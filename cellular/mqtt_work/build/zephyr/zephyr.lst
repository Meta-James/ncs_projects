
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table>:
    c000:	b0 80 02 20 a1 39 01 00 0b 93 02 00 d1 39 01 00     ... .9.......9..
    c010:	d1 39 01 00 d1 39 01 00 d1 39 01 00 d1 39 01 00     .9...9...9...9..
	...
    c02c:	ad 36 01 00 d1 39 01 00 00 00 00 00 fd 35 01 00     .6...9.......5..
    c03c:	ef 92 02 00                                         ....

0000c040 <_irq_vector_table>:
    c040:	61 39 01 00 61 39 01 00 61 39 01 00 61 39 01 00     a9..a9..a9..a9..
    c050:	61 39 01 00 61 39 01 00 61 39 01 00 61 39 01 00     a9..a9..a9..a9..
    c060:	61 39 01 00 61 39 01 00 61 39 01 00 61 39 01 00     a9..a9..a9..a9..
    c070:	61 39 01 00 61 39 01 00 61 39 01 00 61 39 01 00     a9..a9..a9..a9..
    c080:	61 39 01 00 61 39 01 00 61 39 01 00 61 39 01 00     a9..a9..a9..a9..
    c090:	61 39 01 00 61 39 01 00 61 39 01 00 61 39 01 00     a9..a9..a9..a9..
    c0a0:	61 39 01 00 61 39 01 00 61 39 01 00 61 39 01 00     a9..a9..a9..a9..
    c0b0:	69 55 01 00 f1 a1 02 00 61 39 01 00 61 39 01 00     iU......a9..a9..
    c0c0:	61 39 01 00 61 39 01 00 61 39 01 00 61 39 01 00     a9..a9..a9..a9..
    c0d0:	61 39 01 00 61 39 01 00 61 39 01 00 61 39 01 00     a9..a9..a9..a9..
    c0e0:	61 39 01 00 61 39 01 00 0f a2 02 00 61 39 01 00     a9..a9......a9..
    c0f0:	61 39 01 00 61 39 01 00 61 39 01 00 61 39 01 00     a9..a9..a9..a9..
    c100:	61 39 01 00 61 39 01 00 61 39 01 00 61 39 01 00     a9..a9..a9..a9..
    c110:	61 39 01 00 61 39 01 00 61 39 01 00 61 39 01 00     a9..a9..a9..a9..
    c120:	61 39 01 00 61 39 01 00 61 39 01 00 61 39 01 00     a9..a9..a9..a9..
    c130:	61 39 01 00 61 39 01 00 61 39 01 00 61 39 01 00     a9..a9..a9..a9..
    c140:	61 39 01 00                                         a9..

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	de e6 1e 28 4c bb ce 8f 02 5b 00 00 3c 00 00 00     ...(L....[..<...
    c210:	40 2e 02 00 01 00 00 00 00 c0 00 00 00 c0 00 00     @...............
    c220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

0000c240 <__aeabi_drsub>:
    c240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c244:	e002      	b.n	c24c <__adddf3>
    c246:	bf00      	nop

0000c248 <__aeabi_dsub>:
    c248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c24c <__adddf3>:
    c24c:	b530      	push	{r4, r5, lr}
    c24e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c256:	ea94 0f05 	teq	r4, r5
    c25a:	bf08      	it	eq
    c25c:	ea90 0f02 	teqeq	r0, r2
    c260:	bf1f      	itttt	ne
    c262:	ea54 0c00 	orrsne.w	ip, r4, r0
    c266:	ea55 0c02 	orrsne.w	ip, r5, r2
    c26a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c26e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c272:	f000 80e2 	beq.w	c43a <__adddf3+0x1ee>
    c276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c27a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c27e:	bfb8      	it	lt
    c280:	426d      	neglt	r5, r5
    c282:	dd0c      	ble.n	c29e <__adddf3+0x52>
    c284:	442c      	add	r4, r5
    c286:	ea80 0202 	eor.w	r2, r0, r2
    c28a:	ea81 0303 	eor.w	r3, r1, r3
    c28e:	ea82 0000 	eor.w	r0, r2, r0
    c292:	ea83 0101 	eor.w	r1, r3, r1
    c296:	ea80 0202 	eor.w	r2, r0, r2
    c29a:	ea81 0303 	eor.w	r3, r1, r3
    c29e:	2d36      	cmp	r5, #54	; 0x36
    c2a0:	bf88      	it	hi
    c2a2:	bd30      	pophi	{r4, r5, pc}
    c2a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c2a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c2ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c2b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c2b4:	d002      	beq.n	c2bc <__adddf3+0x70>
    c2b6:	4240      	negs	r0, r0
    c2b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2c8:	d002      	beq.n	c2d0 <__adddf3+0x84>
    c2ca:	4252      	negs	r2, r2
    c2cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2d0:	ea94 0f05 	teq	r4, r5
    c2d4:	f000 80a7 	beq.w	c426 <__adddf3+0x1da>
    c2d8:	f1a4 0401 	sub.w	r4, r4, #1
    c2dc:	f1d5 0e20 	rsbs	lr, r5, #32
    c2e0:	db0d      	blt.n	c2fe <__adddf3+0xb2>
    c2e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2e6:	fa22 f205 	lsr.w	r2, r2, r5
    c2ea:	1880      	adds	r0, r0, r2
    c2ec:	f141 0100 	adc.w	r1, r1, #0
    c2f0:	fa03 f20e 	lsl.w	r2, r3, lr
    c2f4:	1880      	adds	r0, r0, r2
    c2f6:	fa43 f305 	asr.w	r3, r3, r5
    c2fa:	4159      	adcs	r1, r3
    c2fc:	e00e      	b.n	c31c <__adddf3+0xd0>
    c2fe:	f1a5 0520 	sub.w	r5, r5, #32
    c302:	f10e 0e20 	add.w	lr, lr, #32
    c306:	2a01      	cmp	r2, #1
    c308:	fa03 fc0e 	lsl.w	ip, r3, lr
    c30c:	bf28      	it	cs
    c30e:	f04c 0c02 	orrcs.w	ip, ip, #2
    c312:	fa43 f305 	asr.w	r3, r3, r5
    c316:	18c0      	adds	r0, r0, r3
    c318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c31c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c320:	d507      	bpl.n	c332 <__adddf3+0xe6>
    c322:	f04f 0e00 	mov.w	lr, #0
    c326:	f1dc 0c00 	rsbs	ip, ip, #0
    c32a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c32e:	eb6e 0101 	sbc.w	r1, lr, r1
    c332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c336:	d31b      	bcc.n	c370 <__adddf3+0x124>
    c338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c33c:	d30c      	bcc.n	c358 <__adddf3+0x10c>
    c33e:	0849      	lsrs	r1, r1, #1
    c340:	ea5f 0030 	movs.w	r0, r0, rrx
    c344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c348:	f104 0401 	add.w	r4, r4, #1
    c34c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c354:	f080 809a 	bcs.w	c48c <__adddf3+0x240>
    c358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c35c:	bf08      	it	eq
    c35e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c362:	f150 0000 	adcs.w	r0, r0, #0
    c366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c36a:	ea41 0105 	orr.w	r1, r1, r5
    c36e:	bd30      	pop	{r4, r5, pc}
    c370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c374:	4140      	adcs	r0, r0
    c376:	eb41 0101 	adc.w	r1, r1, r1
    c37a:	3c01      	subs	r4, #1
    c37c:	bf28      	it	cs
    c37e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c382:	d2e9      	bcs.n	c358 <__adddf3+0x10c>
    c384:	f091 0f00 	teq	r1, #0
    c388:	bf04      	itt	eq
    c38a:	4601      	moveq	r1, r0
    c38c:	2000      	moveq	r0, #0
    c38e:	fab1 f381 	clz	r3, r1
    c392:	bf08      	it	eq
    c394:	3320      	addeq	r3, #32
    c396:	f1a3 030b 	sub.w	r3, r3, #11
    c39a:	f1b3 0220 	subs.w	r2, r3, #32
    c39e:	da0c      	bge.n	c3ba <__adddf3+0x16e>
    c3a0:	320c      	adds	r2, #12
    c3a2:	dd08      	ble.n	c3b6 <__adddf3+0x16a>
    c3a4:	f102 0c14 	add.w	ip, r2, #20
    c3a8:	f1c2 020c 	rsb	r2, r2, #12
    c3ac:	fa01 f00c 	lsl.w	r0, r1, ip
    c3b0:	fa21 f102 	lsr.w	r1, r1, r2
    c3b4:	e00c      	b.n	c3d0 <__adddf3+0x184>
    c3b6:	f102 0214 	add.w	r2, r2, #20
    c3ba:	bfd8      	it	le
    c3bc:	f1c2 0c20 	rsble	ip, r2, #32
    c3c0:	fa01 f102 	lsl.w	r1, r1, r2
    c3c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3c8:	bfdc      	itt	le
    c3ca:	ea41 010c 	orrle.w	r1, r1, ip
    c3ce:	4090      	lslle	r0, r2
    c3d0:	1ae4      	subs	r4, r4, r3
    c3d2:	bfa2      	ittt	ge
    c3d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3d8:	4329      	orrge	r1, r5
    c3da:	bd30      	popge	{r4, r5, pc}
    c3dc:	ea6f 0404 	mvn.w	r4, r4
    c3e0:	3c1f      	subs	r4, #31
    c3e2:	da1c      	bge.n	c41e <__adddf3+0x1d2>
    c3e4:	340c      	adds	r4, #12
    c3e6:	dc0e      	bgt.n	c406 <__adddf3+0x1ba>
    c3e8:	f104 0414 	add.w	r4, r4, #20
    c3ec:	f1c4 0220 	rsb	r2, r4, #32
    c3f0:	fa20 f004 	lsr.w	r0, r0, r4
    c3f4:	fa01 f302 	lsl.w	r3, r1, r2
    c3f8:	ea40 0003 	orr.w	r0, r0, r3
    c3fc:	fa21 f304 	lsr.w	r3, r1, r4
    c400:	ea45 0103 	orr.w	r1, r5, r3
    c404:	bd30      	pop	{r4, r5, pc}
    c406:	f1c4 040c 	rsb	r4, r4, #12
    c40a:	f1c4 0220 	rsb	r2, r4, #32
    c40e:	fa20 f002 	lsr.w	r0, r0, r2
    c412:	fa01 f304 	lsl.w	r3, r1, r4
    c416:	ea40 0003 	orr.w	r0, r0, r3
    c41a:	4629      	mov	r1, r5
    c41c:	bd30      	pop	{r4, r5, pc}
    c41e:	fa21 f004 	lsr.w	r0, r1, r4
    c422:	4629      	mov	r1, r5
    c424:	bd30      	pop	{r4, r5, pc}
    c426:	f094 0f00 	teq	r4, #0
    c42a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c42e:	bf06      	itte	eq
    c430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c434:	3401      	addeq	r4, #1
    c436:	3d01      	subne	r5, #1
    c438:	e74e      	b.n	c2d8 <__adddf3+0x8c>
    c43a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c43e:	bf18      	it	ne
    c440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c444:	d029      	beq.n	c49a <__adddf3+0x24e>
    c446:	ea94 0f05 	teq	r4, r5
    c44a:	bf08      	it	eq
    c44c:	ea90 0f02 	teqeq	r0, r2
    c450:	d005      	beq.n	c45e <__adddf3+0x212>
    c452:	ea54 0c00 	orrs.w	ip, r4, r0
    c456:	bf04      	itt	eq
    c458:	4619      	moveq	r1, r3
    c45a:	4610      	moveq	r0, r2
    c45c:	bd30      	pop	{r4, r5, pc}
    c45e:	ea91 0f03 	teq	r1, r3
    c462:	bf1e      	ittt	ne
    c464:	2100      	movne	r1, #0
    c466:	2000      	movne	r0, #0
    c468:	bd30      	popne	{r4, r5, pc}
    c46a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c46e:	d105      	bne.n	c47c <__adddf3+0x230>
    c470:	0040      	lsls	r0, r0, #1
    c472:	4149      	adcs	r1, r1
    c474:	bf28      	it	cs
    c476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c47a:	bd30      	pop	{r4, r5, pc}
    c47c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c480:	bf3c      	itt	cc
    c482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c486:	bd30      	popcc	{r4, r5, pc}
    c488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c48c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c494:	f04f 0000 	mov.w	r0, #0
    c498:	bd30      	pop	{r4, r5, pc}
    c49a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c49e:	bf1a      	itte	ne
    c4a0:	4619      	movne	r1, r3
    c4a2:	4610      	movne	r0, r2
    c4a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c4a8:	bf1c      	itt	ne
    c4aa:	460b      	movne	r3, r1
    c4ac:	4602      	movne	r2, r0
    c4ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c4b2:	bf06      	itte	eq
    c4b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c4b8:	ea91 0f03 	teqeq	r1, r3
    c4bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4c0:	bd30      	pop	{r4, r5, pc}
    c4c2:	bf00      	nop

0000c4c4 <__aeabi_ui2d>:
    c4c4:	f090 0f00 	teq	r0, #0
    c4c8:	bf04      	itt	eq
    c4ca:	2100      	moveq	r1, #0
    c4cc:	4770      	bxeq	lr
    c4ce:	b530      	push	{r4, r5, lr}
    c4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d8:	f04f 0500 	mov.w	r5, #0
    c4dc:	f04f 0100 	mov.w	r1, #0
    c4e0:	e750      	b.n	c384 <__adddf3+0x138>
    c4e2:	bf00      	nop

0000c4e4 <__aeabi_i2d>:
    c4e4:	f090 0f00 	teq	r0, #0
    c4e8:	bf04      	itt	eq
    c4ea:	2100      	moveq	r1, #0
    c4ec:	4770      	bxeq	lr
    c4ee:	b530      	push	{r4, r5, lr}
    c4f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4fc:	bf48      	it	mi
    c4fe:	4240      	negmi	r0, r0
    c500:	f04f 0100 	mov.w	r1, #0
    c504:	e73e      	b.n	c384 <__adddf3+0x138>
    c506:	bf00      	nop

0000c508 <__aeabi_f2d>:
    c508:	0042      	lsls	r2, r0, #1
    c50a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c50e:	ea4f 0131 	mov.w	r1, r1, rrx
    c512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c516:	bf1f      	itttt	ne
    c518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c51c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c524:	4770      	bxne	lr
    c526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c52a:	bf08      	it	eq
    c52c:	4770      	bxeq	lr
    c52e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c532:	bf04      	itt	eq
    c534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c538:	4770      	bxeq	lr
    c53a:	b530      	push	{r4, r5, lr}
    c53c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c548:	e71c      	b.n	c384 <__adddf3+0x138>
    c54a:	bf00      	nop

0000c54c <__aeabi_ul2d>:
    c54c:	ea50 0201 	orrs.w	r2, r0, r1
    c550:	bf08      	it	eq
    c552:	4770      	bxeq	lr
    c554:	b530      	push	{r4, r5, lr}
    c556:	f04f 0500 	mov.w	r5, #0
    c55a:	e00a      	b.n	c572 <__aeabi_l2d+0x16>

0000c55c <__aeabi_l2d>:
    c55c:	ea50 0201 	orrs.w	r2, r0, r1
    c560:	bf08      	it	eq
    c562:	4770      	bxeq	lr
    c564:	b530      	push	{r4, r5, lr}
    c566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c56a:	d502      	bpl.n	c572 <__aeabi_l2d+0x16>
    c56c:	4240      	negs	r0, r0
    c56e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c57a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c57e:	f43f aed8 	beq.w	c332 <__adddf3+0xe6>
    c582:	f04f 0203 	mov.w	r2, #3
    c586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c58a:	bf18      	it	ne
    c58c:	3203      	addne	r2, #3
    c58e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c592:	bf18      	it	ne
    c594:	3203      	addne	r2, #3
    c596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c59a:	f1c2 0320 	rsb	r3, r2, #32
    c59e:	fa00 fc03 	lsl.w	ip, r0, r3
    c5a2:	fa20 f002 	lsr.w	r0, r0, r2
    c5a6:	fa01 fe03 	lsl.w	lr, r1, r3
    c5aa:	ea40 000e 	orr.w	r0, r0, lr
    c5ae:	fa21 f102 	lsr.w	r1, r1, r2
    c5b2:	4414      	add	r4, r2
    c5b4:	e6bd      	b.n	c332 <__adddf3+0xe6>
    c5b6:	bf00      	nop

0000c5b8 <__gedf2>:
    c5b8:	f04f 3cff 	mov.w	ip, #4294967295
    c5bc:	e006      	b.n	c5cc <__cmpdf2+0x4>
    c5be:	bf00      	nop

0000c5c0 <__ledf2>:
    c5c0:	f04f 0c01 	mov.w	ip, #1
    c5c4:	e002      	b.n	c5cc <__cmpdf2+0x4>
    c5c6:	bf00      	nop

0000c5c8 <__cmpdf2>:
    c5c8:	f04f 0c01 	mov.w	ip, #1
    c5cc:	f84d cd04 	str.w	ip, [sp, #-4]!
    c5d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c5d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c5d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c5dc:	bf18      	it	ne
    c5de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    c5e2:	d01b      	beq.n	c61c <__cmpdf2+0x54>
    c5e4:	b001      	add	sp, #4
    c5e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    c5ea:	bf0c      	ite	eq
    c5ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    c5f0:	ea91 0f03 	teqne	r1, r3
    c5f4:	bf02      	ittt	eq
    c5f6:	ea90 0f02 	teqeq	r0, r2
    c5fa:	2000      	moveq	r0, #0
    c5fc:	4770      	bxeq	lr
    c5fe:	f110 0f00 	cmn.w	r0, #0
    c602:	ea91 0f03 	teq	r1, r3
    c606:	bf58      	it	pl
    c608:	4299      	cmppl	r1, r3
    c60a:	bf08      	it	eq
    c60c:	4290      	cmpeq	r0, r2
    c60e:	bf2c      	ite	cs
    c610:	17d8      	asrcs	r0, r3, #31
    c612:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    c616:	f040 0001 	orr.w	r0, r0, #1
    c61a:	4770      	bx	lr
    c61c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c624:	d102      	bne.n	c62c <__cmpdf2+0x64>
    c626:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    c62a:	d107      	bne.n	c63c <__cmpdf2+0x74>
    c62c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c630:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c634:	d1d6      	bne.n	c5e4 <__cmpdf2+0x1c>
    c636:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    c63a:	d0d3      	beq.n	c5e4 <__cmpdf2+0x1c>
    c63c:	f85d 0b04 	ldr.w	r0, [sp], #4
    c640:	4770      	bx	lr
    c642:	bf00      	nop

0000c644 <__aeabi_cdrcmple>:
    c644:	4684      	mov	ip, r0
    c646:	4610      	mov	r0, r2
    c648:	4662      	mov	r2, ip
    c64a:	468c      	mov	ip, r1
    c64c:	4619      	mov	r1, r3
    c64e:	4663      	mov	r3, ip
    c650:	e000      	b.n	c654 <__aeabi_cdcmpeq>
    c652:	bf00      	nop

0000c654 <__aeabi_cdcmpeq>:
    c654:	b501      	push	{r0, lr}
    c656:	f7ff ffb7 	bl	c5c8 <__cmpdf2>
    c65a:	2800      	cmp	r0, #0
    c65c:	bf48      	it	mi
    c65e:	f110 0f00 	cmnmi.w	r0, #0
    c662:	bd01      	pop	{r0, pc}

0000c664 <__aeabi_dcmpeq>:
    c664:	f84d ed08 	str.w	lr, [sp, #-8]!
    c668:	f7ff fff4 	bl	c654 <__aeabi_cdcmpeq>
    c66c:	bf0c      	ite	eq
    c66e:	2001      	moveq	r0, #1
    c670:	2000      	movne	r0, #0
    c672:	f85d fb08 	ldr.w	pc, [sp], #8
    c676:	bf00      	nop

0000c678 <__aeabi_dcmplt>:
    c678:	f84d ed08 	str.w	lr, [sp, #-8]!
    c67c:	f7ff ffea 	bl	c654 <__aeabi_cdcmpeq>
    c680:	bf34      	ite	cc
    c682:	2001      	movcc	r0, #1
    c684:	2000      	movcs	r0, #0
    c686:	f85d fb08 	ldr.w	pc, [sp], #8
    c68a:	bf00      	nop

0000c68c <__aeabi_dcmple>:
    c68c:	f84d ed08 	str.w	lr, [sp, #-8]!
    c690:	f7ff ffe0 	bl	c654 <__aeabi_cdcmpeq>
    c694:	bf94      	ite	ls
    c696:	2001      	movls	r0, #1
    c698:	2000      	movhi	r0, #0
    c69a:	f85d fb08 	ldr.w	pc, [sp], #8
    c69e:	bf00      	nop

0000c6a0 <__aeabi_dcmpge>:
    c6a0:	f84d ed08 	str.w	lr, [sp, #-8]!
    c6a4:	f7ff ffce 	bl	c644 <__aeabi_cdrcmple>
    c6a8:	bf94      	ite	ls
    c6aa:	2001      	movls	r0, #1
    c6ac:	2000      	movhi	r0, #0
    c6ae:	f85d fb08 	ldr.w	pc, [sp], #8
    c6b2:	bf00      	nop

0000c6b4 <__aeabi_dcmpgt>:
    c6b4:	f84d ed08 	str.w	lr, [sp, #-8]!
    c6b8:	f7ff ffc4 	bl	c644 <__aeabi_cdrcmple>
    c6bc:	bf34      	ite	cc
    c6be:	2001      	movcc	r0, #1
    c6c0:	2000      	movcs	r0, #0
    c6c2:	f85d fb08 	ldr.w	pc, [sp], #8
    c6c6:	bf00      	nop

0000c6c8 <__aeabi_d2iz>:
    c6c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c6cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c6d0:	d215      	bcs.n	c6fe <__aeabi_d2iz+0x36>
    c6d2:	d511      	bpl.n	c6f8 <__aeabi_d2iz+0x30>
    c6d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    c6d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c6dc:	d912      	bls.n	c704 <__aeabi_d2iz+0x3c>
    c6de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c6e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c6e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c6ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c6ee:	fa23 f002 	lsr.w	r0, r3, r2
    c6f2:	bf18      	it	ne
    c6f4:	4240      	negne	r0, r0
    c6f6:	4770      	bx	lr
    c6f8:	f04f 0000 	mov.w	r0, #0
    c6fc:	4770      	bx	lr
    c6fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c702:	d105      	bne.n	c710 <__aeabi_d2iz+0x48>
    c704:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    c708:	bf08      	it	eq
    c70a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    c70e:	4770      	bx	lr
    c710:	f04f 0000 	mov.w	r0, #0
    c714:	4770      	bx	lr
    c716:	bf00      	nop

0000c718 <__aeabi_d2f>:
    c718:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c71c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c720:	bf24      	itt	cs
    c722:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c726:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c72a:	d90d      	bls.n	c748 <__aeabi_d2f+0x30>
    c72c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c730:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c734:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c738:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c73c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c740:	bf08      	it	eq
    c742:	f020 0001 	biceq.w	r0, r0, #1
    c746:	4770      	bx	lr
    c748:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c74c:	d121      	bne.n	c792 <__aeabi_d2f+0x7a>
    c74e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c752:	bfbc      	itt	lt
    c754:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c758:	4770      	bxlt	lr
    c75a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c75e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c762:	f1c2 0218 	rsb	r2, r2, #24
    c766:	f1c2 0c20 	rsb	ip, r2, #32
    c76a:	fa10 f30c 	lsls.w	r3, r0, ip
    c76e:	fa20 f002 	lsr.w	r0, r0, r2
    c772:	bf18      	it	ne
    c774:	f040 0001 	orrne.w	r0, r0, #1
    c778:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c77c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c780:	fa03 fc0c 	lsl.w	ip, r3, ip
    c784:	ea40 000c 	orr.w	r0, r0, ip
    c788:	fa23 f302 	lsr.w	r3, r3, r2
    c78c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c790:	e7cc      	b.n	c72c <__aeabi_d2f+0x14>
    c792:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c796:	d107      	bne.n	c7a8 <__aeabi_d2f+0x90>
    c798:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c79c:	bf1e      	ittt	ne
    c79e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c7a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c7a6:	4770      	bxne	lr
    c7a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c7ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c7b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c7b4:	4770      	bx	lr
    c7b6:	bf00      	nop

0000c7b8 <__aeabi_ldivmod>:
    c7b8:	b97b      	cbnz	r3, c7da <__aeabi_ldivmod+0x22>
    c7ba:	b972      	cbnz	r2, c7da <__aeabi_ldivmod+0x22>
    c7bc:	2900      	cmp	r1, #0
    c7be:	bfbe      	ittt	lt
    c7c0:	2000      	movlt	r0, #0
    c7c2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    c7c6:	e006      	blt.n	c7d6 <__aeabi_ldivmod+0x1e>
    c7c8:	bf08      	it	eq
    c7ca:	2800      	cmpeq	r0, #0
    c7cc:	bf1c      	itt	ne
    c7ce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    c7d2:	f04f 30ff 	movne.w	r0, #4294967295
    c7d6:	f000 b9cb 	b.w	cb70 <__aeabi_idiv0>
    c7da:	f1ad 0c08 	sub.w	ip, sp, #8
    c7de:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c7e2:	2900      	cmp	r1, #0
    c7e4:	db09      	blt.n	c7fa <__aeabi_ldivmod+0x42>
    c7e6:	2b00      	cmp	r3, #0
    c7e8:	db1a      	blt.n	c820 <__aeabi_ldivmod+0x68>
    c7ea:	f000 f84d 	bl	c888 <__udivmoddi4>
    c7ee:	f8dd e004 	ldr.w	lr, [sp, #4]
    c7f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c7f6:	b004      	add	sp, #16
    c7f8:	4770      	bx	lr
    c7fa:	4240      	negs	r0, r0
    c7fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c800:	2b00      	cmp	r3, #0
    c802:	db1b      	blt.n	c83c <__aeabi_ldivmod+0x84>
    c804:	f000 f840 	bl	c888 <__udivmoddi4>
    c808:	f8dd e004 	ldr.w	lr, [sp, #4]
    c80c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c810:	b004      	add	sp, #16
    c812:	4240      	negs	r0, r0
    c814:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c818:	4252      	negs	r2, r2
    c81a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c81e:	4770      	bx	lr
    c820:	4252      	negs	r2, r2
    c822:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c826:	f000 f82f 	bl	c888 <__udivmoddi4>
    c82a:	f8dd e004 	ldr.w	lr, [sp, #4]
    c82e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c832:	b004      	add	sp, #16
    c834:	4240      	negs	r0, r0
    c836:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c83a:	4770      	bx	lr
    c83c:	4252      	negs	r2, r2
    c83e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c842:	f000 f821 	bl	c888 <__udivmoddi4>
    c846:	f8dd e004 	ldr.w	lr, [sp, #4]
    c84a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c84e:	b004      	add	sp, #16
    c850:	4252      	negs	r2, r2
    c852:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c856:	4770      	bx	lr

0000c858 <__aeabi_uldivmod>:
    c858:	b953      	cbnz	r3, c870 <__aeabi_uldivmod+0x18>
    c85a:	b94a      	cbnz	r2, c870 <__aeabi_uldivmod+0x18>
    c85c:	2900      	cmp	r1, #0
    c85e:	bf08      	it	eq
    c860:	2800      	cmpeq	r0, #0
    c862:	bf1c      	itt	ne
    c864:	f04f 31ff 	movne.w	r1, #4294967295
    c868:	f04f 30ff 	movne.w	r0, #4294967295
    c86c:	f000 b980 	b.w	cb70 <__aeabi_idiv0>
    c870:	f1ad 0c08 	sub.w	ip, sp, #8
    c874:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c878:	f000 f806 	bl	c888 <__udivmoddi4>
    c87c:	f8dd e004 	ldr.w	lr, [sp, #4]
    c880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c884:	b004      	add	sp, #16
    c886:	4770      	bx	lr

0000c888 <__udivmoddi4>:
    c888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c88c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    c88e:	4604      	mov	r4, r0
    c890:	4688      	mov	r8, r1
    c892:	2b00      	cmp	r3, #0
    c894:	f040 8084 	bne.w	c9a0 <__udivmoddi4+0x118>
    c898:	428a      	cmp	r2, r1
    c89a:	4617      	mov	r7, r2
    c89c:	d943      	bls.n	c926 <__udivmoddi4+0x9e>
    c89e:	fab2 f282 	clz	r2, r2
    c8a2:	b142      	cbz	r2, c8b6 <__udivmoddi4+0x2e>
    c8a4:	f1c2 0020 	rsb	r0, r2, #32
    c8a8:	4091      	lsls	r1, r2
    c8aa:	4097      	lsls	r7, r2
    c8ac:	fa24 f000 	lsr.w	r0, r4, r0
    c8b0:	4094      	lsls	r4, r2
    c8b2:	ea40 0801 	orr.w	r8, r0, r1
    c8b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    c8ba:	0c23      	lsrs	r3, r4, #16
    c8bc:	fa1f fe87 	uxth.w	lr, r7
    c8c0:	fbb8 f6fc 	udiv	r6, r8, ip
    c8c4:	fb0c 8116 	mls	r1, ip, r6, r8
    c8c8:	fb06 f00e 	mul.w	r0, r6, lr
    c8cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c8d0:	4298      	cmp	r0, r3
    c8d2:	d907      	bls.n	c8e4 <__udivmoddi4+0x5c>
    c8d4:	18fb      	adds	r3, r7, r3
    c8d6:	f106 31ff 	add.w	r1, r6, #4294967295
    c8da:	d202      	bcs.n	c8e2 <__udivmoddi4+0x5a>
    c8dc:	4298      	cmp	r0, r3
    c8de:	f200 8131 	bhi.w	cb44 <__udivmoddi4+0x2bc>
    c8e2:	460e      	mov	r6, r1
    c8e4:	1a19      	subs	r1, r3, r0
    c8e6:	b2a3      	uxth	r3, r4
    c8e8:	fbb1 f0fc 	udiv	r0, r1, ip
    c8ec:	fb0c 1110 	mls	r1, ip, r0, r1
    c8f0:	fb00 fe0e 	mul.w	lr, r0, lr
    c8f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c8f8:	45a6      	cmp	lr, r4
    c8fa:	d907      	bls.n	c90c <__udivmoddi4+0x84>
    c8fc:	193c      	adds	r4, r7, r4
    c8fe:	f100 33ff 	add.w	r3, r0, #4294967295
    c902:	d202      	bcs.n	c90a <__udivmoddi4+0x82>
    c904:	45a6      	cmp	lr, r4
    c906:	f200 811a 	bhi.w	cb3e <__udivmoddi4+0x2b6>
    c90a:	4618      	mov	r0, r3
    c90c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    c910:	eba4 040e 	sub.w	r4, r4, lr
    c914:	2600      	movs	r6, #0
    c916:	b11d      	cbz	r5, c920 <__udivmoddi4+0x98>
    c918:	40d4      	lsrs	r4, r2
    c91a:	2300      	movs	r3, #0
    c91c:	e9c5 4300 	strd	r4, r3, [r5]
    c920:	4631      	mov	r1, r6
    c922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c926:	b902      	cbnz	r2, c92a <__udivmoddi4+0xa2>
    c928:	deff      	udf	#255	; 0xff
    c92a:	fab2 f282 	clz	r2, r2
    c92e:	2a00      	cmp	r2, #0
    c930:	d152      	bne.n	c9d8 <__udivmoddi4+0x150>
    c932:	1bcb      	subs	r3, r1, r7
    c934:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c938:	fa1f f887 	uxth.w	r8, r7
    c93c:	2601      	movs	r6, #1
    c93e:	0c21      	lsrs	r1, r4, #16
    c940:	fbb3 fcfe 	udiv	ip, r3, lr
    c944:	fb0e 301c 	mls	r0, lr, ip, r3
    c948:	fb08 f90c 	mul.w	r9, r8, ip
    c94c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c950:	4589      	cmp	r9, r1
    c952:	d90b      	bls.n	c96c <__udivmoddi4+0xe4>
    c954:	1879      	adds	r1, r7, r1
    c956:	f10c 33ff 	add.w	r3, ip, #4294967295
    c95a:	bf2c      	ite	cs
    c95c:	2001      	movcs	r0, #1
    c95e:	2000      	movcc	r0, #0
    c960:	4589      	cmp	r9, r1
    c962:	d902      	bls.n	c96a <__udivmoddi4+0xe2>
    c964:	2800      	cmp	r0, #0
    c966:	f000 80f0 	beq.w	cb4a <__udivmoddi4+0x2c2>
    c96a:	469c      	mov	ip, r3
    c96c:	eba1 0109 	sub.w	r1, r1, r9
    c970:	b2a3      	uxth	r3, r4
    c972:	fbb1 f0fe 	udiv	r0, r1, lr
    c976:	fb0e 1110 	mls	r1, lr, r0, r1
    c97a:	fb08 f800 	mul.w	r8, r8, r0
    c97e:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c982:	45a0      	cmp	r8, r4
    c984:	d907      	bls.n	c996 <__udivmoddi4+0x10e>
    c986:	193c      	adds	r4, r7, r4
    c988:	f100 33ff 	add.w	r3, r0, #4294967295
    c98c:	d202      	bcs.n	c994 <__udivmoddi4+0x10c>
    c98e:	45a0      	cmp	r8, r4
    c990:	f200 80d2 	bhi.w	cb38 <__udivmoddi4+0x2b0>
    c994:	4618      	mov	r0, r3
    c996:	eba4 0408 	sub.w	r4, r4, r8
    c99a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c99e:	e7ba      	b.n	c916 <__udivmoddi4+0x8e>
    c9a0:	428b      	cmp	r3, r1
    c9a2:	d909      	bls.n	c9b8 <__udivmoddi4+0x130>
    c9a4:	2d00      	cmp	r5, #0
    c9a6:	f000 80be 	beq.w	cb26 <__udivmoddi4+0x29e>
    c9aa:	2600      	movs	r6, #0
    c9ac:	e9c5 0100 	strd	r0, r1, [r5]
    c9b0:	4630      	mov	r0, r6
    c9b2:	4631      	mov	r1, r6
    c9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c9b8:	fab3 f683 	clz	r6, r3
    c9bc:	2e00      	cmp	r6, #0
    c9be:	d14d      	bne.n	ca5c <__udivmoddi4+0x1d4>
    c9c0:	428b      	cmp	r3, r1
    c9c2:	f0c0 80b3 	bcc.w	cb2c <__udivmoddi4+0x2a4>
    c9c6:	4282      	cmp	r2, r0
    c9c8:	f240 80b0 	bls.w	cb2c <__udivmoddi4+0x2a4>
    c9cc:	4630      	mov	r0, r6
    c9ce:	2d00      	cmp	r5, #0
    c9d0:	d0a6      	beq.n	c920 <__udivmoddi4+0x98>
    c9d2:	e9c5 4800 	strd	r4, r8, [r5]
    c9d6:	e7a3      	b.n	c920 <__udivmoddi4+0x98>
    c9d8:	4097      	lsls	r7, r2
    c9da:	f1c2 0320 	rsb	r3, r2, #32
    c9de:	fa01 f002 	lsl.w	r0, r1, r2
    c9e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c9e6:	40d9      	lsrs	r1, r3
    c9e8:	fa24 f303 	lsr.w	r3, r4, r3
    c9ec:	fa1f f887 	uxth.w	r8, r7
    c9f0:	4094      	lsls	r4, r2
    c9f2:	4303      	orrs	r3, r0
    c9f4:	fbb1 f0fe 	udiv	r0, r1, lr
    c9f8:	0c1e      	lsrs	r6, r3, #16
    c9fa:	fb0e 1110 	mls	r1, lr, r0, r1
    c9fe:	fb00 fc08 	mul.w	ip, r0, r8
    ca02:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    ca06:	458c      	cmp	ip, r1
    ca08:	d90e      	bls.n	ca28 <__udivmoddi4+0x1a0>
    ca0a:	1879      	adds	r1, r7, r1
    ca0c:	f100 36ff 	add.w	r6, r0, #4294967295
    ca10:	bf2c      	ite	cs
    ca12:	f04f 0901 	movcs.w	r9, #1
    ca16:	f04f 0900 	movcc.w	r9, #0
    ca1a:	458c      	cmp	ip, r1
    ca1c:	d903      	bls.n	ca26 <__udivmoddi4+0x19e>
    ca1e:	f1b9 0f00 	cmp.w	r9, #0
    ca22:	f000 8096 	beq.w	cb52 <__udivmoddi4+0x2ca>
    ca26:	4630      	mov	r0, r6
    ca28:	eba1 010c 	sub.w	r1, r1, ip
    ca2c:	b29b      	uxth	r3, r3
    ca2e:	fbb1 f6fe 	udiv	r6, r1, lr
    ca32:	fb0e 1116 	mls	r1, lr, r6, r1
    ca36:	fb06 fc08 	mul.w	ip, r6, r8
    ca3a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    ca3e:	458c      	cmp	ip, r1
    ca40:	d907      	bls.n	ca52 <__udivmoddi4+0x1ca>
    ca42:	1879      	adds	r1, r7, r1
    ca44:	f106 33ff 	add.w	r3, r6, #4294967295
    ca48:	d202      	bcs.n	ca50 <__udivmoddi4+0x1c8>
    ca4a:	458c      	cmp	ip, r1
    ca4c:	f200 8088 	bhi.w	cb60 <__udivmoddi4+0x2d8>
    ca50:	461e      	mov	r6, r3
    ca52:	eba1 030c 	sub.w	r3, r1, ip
    ca56:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
    ca5a:	e770      	b.n	c93e <__udivmoddi4+0xb6>
    ca5c:	f1c6 0720 	rsb	r7, r6, #32
    ca60:	fa03 f406 	lsl.w	r4, r3, r6
    ca64:	fa02 fc06 	lsl.w	ip, r2, r6
    ca68:	fa01 fe06 	lsl.w	lr, r1, r6
    ca6c:	40fa      	lsrs	r2, r7
    ca6e:	fa20 f807 	lsr.w	r8, r0, r7
    ca72:	40f9      	lsrs	r1, r7
    ca74:	fa00 f306 	lsl.w	r3, r0, r6
    ca78:	4322      	orrs	r2, r4
    ca7a:	ea48 040e 	orr.w	r4, r8, lr
    ca7e:	ea4f 4812 	mov.w	r8, r2, lsr #16
    ca82:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    ca86:	fa1f f982 	uxth.w	r9, r2
    ca8a:	fbb1 faf8 	udiv	sl, r1, r8
    ca8e:	fb08 111a 	mls	r1, r8, sl, r1
    ca92:	fb0a f009 	mul.w	r0, sl, r9
    ca96:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
    ca9a:	4570      	cmp	r0, lr
    ca9c:	d90e      	bls.n	cabc <__udivmoddi4+0x234>
    ca9e:	eb12 0e0e 	adds.w	lr, r2, lr
    caa2:	f10a 31ff 	add.w	r1, sl, #4294967295
    caa6:	bf2c      	ite	cs
    caa8:	f04f 0b01 	movcs.w	fp, #1
    caac:	f04f 0b00 	movcc.w	fp, #0
    cab0:	4570      	cmp	r0, lr
    cab2:	d902      	bls.n	caba <__udivmoddi4+0x232>
    cab4:	f1bb 0f00 	cmp.w	fp, #0
    cab8:	d04e      	beq.n	cb58 <__udivmoddi4+0x2d0>
    caba:	468a      	mov	sl, r1
    cabc:	ebae 0e00 	sub.w	lr, lr, r0
    cac0:	b2a4      	uxth	r4, r4
    cac2:	fbbe f0f8 	udiv	r0, lr, r8
    cac6:	fb08 ee10 	mls	lr, r8, r0, lr
    caca:	fb00 f909 	mul.w	r9, r0, r9
    cace:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
    cad2:	45f1      	cmp	r9, lr
    cad4:	d907      	bls.n	cae6 <__udivmoddi4+0x25e>
    cad6:	eb12 0e0e 	adds.w	lr, r2, lr
    cada:	f100 31ff 	add.w	r1, r0, #4294967295
    cade:	d201      	bcs.n	cae4 <__udivmoddi4+0x25c>
    cae0:	45f1      	cmp	r9, lr
    cae2:	d840      	bhi.n	cb66 <__udivmoddi4+0x2de>
    cae4:	4608      	mov	r0, r1
    cae6:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    caea:	ebae 0e09 	sub.w	lr, lr, r9
    caee:	fba0 890c 	umull	r8, r9, r0, ip
    caf2:	45ce      	cmp	lr, r9
    caf4:	4641      	mov	r1, r8
    caf6:	464c      	mov	r4, r9
    caf8:	d302      	bcc.n	cb00 <__udivmoddi4+0x278>
    cafa:	d106      	bne.n	cb0a <__udivmoddi4+0x282>
    cafc:	4543      	cmp	r3, r8
    cafe:	d204      	bcs.n	cb0a <__udivmoddi4+0x282>
    cb00:	3801      	subs	r0, #1
    cb02:	ebb8 010c 	subs.w	r1, r8, ip
    cb06:	eb69 0402 	sbc.w	r4, r9, r2
    cb0a:	b37d      	cbz	r5, cb6c <__udivmoddi4+0x2e4>
    cb0c:	1a5a      	subs	r2, r3, r1
    cb0e:	eb6e 0e04 	sbc.w	lr, lr, r4
    cb12:	40f2      	lsrs	r2, r6
    cb14:	fa0e f707 	lsl.w	r7, lr, r7
    cb18:	fa2e f306 	lsr.w	r3, lr, r6
    cb1c:	2600      	movs	r6, #0
    cb1e:	4317      	orrs	r7, r2
    cb20:	e9c5 7300 	strd	r7, r3, [r5]
    cb24:	e6fc      	b.n	c920 <__udivmoddi4+0x98>
    cb26:	462e      	mov	r6, r5
    cb28:	4628      	mov	r0, r5
    cb2a:	e6f9      	b.n	c920 <__udivmoddi4+0x98>
    cb2c:	1a84      	subs	r4, r0, r2
    cb2e:	eb61 0103 	sbc.w	r1, r1, r3
    cb32:	2001      	movs	r0, #1
    cb34:	4688      	mov	r8, r1
    cb36:	e74a      	b.n	c9ce <__udivmoddi4+0x146>
    cb38:	3802      	subs	r0, #2
    cb3a:	443c      	add	r4, r7
    cb3c:	e72b      	b.n	c996 <__udivmoddi4+0x10e>
    cb3e:	3802      	subs	r0, #2
    cb40:	443c      	add	r4, r7
    cb42:	e6e3      	b.n	c90c <__udivmoddi4+0x84>
    cb44:	3e02      	subs	r6, #2
    cb46:	443b      	add	r3, r7
    cb48:	e6cc      	b.n	c8e4 <__udivmoddi4+0x5c>
    cb4a:	f1ac 0c02 	sub.w	ip, ip, #2
    cb4e:	4439      	add	r1, r7
    cb50:	e70c      	b.n	c96c <__udivmoddi4+0xe4>
    cb52:	3802      	subs	r0, #2
    cb54:	4439      	add	r1, r7
    cb56:	e767      	b.n	ca28 <__udivmoddi4+0x1a0>
    cb58:	f1aa 0a02 	sub.w	sl, sl, #2
    cb5c:	4496      	add	lr, r2
    cb5e:	e7ad      	b.n	cabc <__udivmoddi4+0x234>
    cb60:	3e02      	subs	r6, #2
    cb62:	4439      	add	r1, r7
    cb64:	e775      	b.n	ca52 <__udivmoddi4+0x1ca>
    cb66:	3802      	subs	r0, #2
    cb68:	4496      	add	lr, r2
    cb6a:	e7bc      	b.n	cae6 <__udivmoddi4+0x25e>
    cb6c:	462e      	mov	r6, r5
    cb6e:	e6d7      	b.n	c920 <__udivmoddi4+0x98>

0000cb70 <__aeabi_idiv0>:
    cb70:	4770      	bx	lr
    cb72:	bf00      	nop

0000cb74 <memcpy>:
    cb74:	4684      	mov	ip, r0
    cb76:	ea41 0300 	orr.w	r3, r1, r0
    cb7a:	f013 0303 	ands.w	r3, r3, #3
    cb7e:	d149      	bne.n	cc14 <memcpy+0xa0>
    cb80:	3a40      	subs	r2, #64	; 0x40
    cb82:	d323      	bcc.n	cbcc <memcpy+0x58>
    cb84:	680b      	ldr	r3, [r1, #0]
    cb86:	6003      	str	r3, [r0, #0]
    cb88:	684b      	ldr	r3, [r1, #4]
    cb8a:	6043      	str	r3, [r0, #4]
    cb8c:	688b      	ldr	r3, [r1, #8]
    cb8e:	6083      	str	r3, [r0, #8]
    cb90:	68cb      	ldr	r3, [r1, #12]
    cb92:	60c3      	str	r3, [r0, #12]
    cb94:	690b      	ldr	r3, [r1, #16]
    cb96:	6103      	str	r3, [r0, #16]
    cb98:	694b      	ldr	r3, [r1, #20]
    cb9a:	6143      	str	r3, [r0, #20]
    cb9c:	698b      	ldr	r3, [r1, #24]
    cb9e:	6183      	str	r3, [r0, #24]
    cba0:	69cb      	ldr	r3, [r1, #28]
    cba2:	61c3      	str	r3, [r0, #28]
    cba4:	6a0b      	ldr	r3, [r1, #32]
    cba6:	6203      	str	r3, [r0, #32]
    cba8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    cbaa:	6243      	str	r3, [r0, #36]	; 0x24
    cbac:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    cbae:	6283      	str	r3, [r0, #40]	; 0x28
    cbb0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    cbb2:	62c3      	str	r3, [r0, #44]	; 0x2c
    cbb4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    cbb6:	6303      	str	r3, [r0, #48]	; 0x30
    cbb8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    cbba:	6343      	str	r3, [r0, #52]	; 0x34
    cbbc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    cbbe:	6383      	str	r3, [r0, #56]	; 0x38
    cbc0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    cbc2:	63c3      	str	r3, [r0, #60]	; 0x3c
    cbc4:	3040      	adds	r0, #64	; 0x40
    cbc6:	3140      	adds	r1, #64	; 0x40
    cbc8:	3a40      	subs	r2, #64	; 0x40
    cbca:	d2db      	bcs.n	cb84 <memcpy+0x10>
    cbcc:	3230      	adds	r2, #48	; 0x30
    cbce:	d30b      	bcc.n	cbe8 <memcpy+0x74>
    cbd0:	680b      	ldr	r3, [r1, #0]
    cbd2:	6003      	str	r3, [r0, #0]
    cbd4:	684b      	ldr	r3, [r1, #4]
    cbd6:	6043      	str	r3, [r0, #4]
    cbd8:	688b      	ldr	r3, [r1, #8]
    cbda:	6083      	str	r3, [r0, #8]
    cbdc:	68cb      	ldr	r3, [r1, #12]
    cbde:	60c3      	str	r3, [r0, #12]
    cbe0:	3010      	adds	r0, #16
    cbe2:	3110      	adds	r1, #16
    cbe4:	3a10      	subs	r2, #16
    cbe6:	d2f3      	bcs.n	cbd0 <memcpy+0x5c>
    cbe8:	320c      	adds	r2, #12
    cbea:	d305      	bcc.n	cbf8 <memcpy+0x84>
    cbec:	f851 3b04 	ldr.w	r3, [r1], #4
    cbf0:	f840 3b04 	str.w	r3, [r0], #4
    cbf4:	3a04      	subs	r2, #4
    cbf6:	d2f9      	bcs.n	cbec <memcpy+0x78>
    cbf8:	3204      	adds	r2, #4
    cbfa:	d008      	beq.n	cc0e <memcpy+0x9a>
    cbfc:	07d2      	lsls	r2, r2, #31
    cbfe:	bf1c      	itt	ne
    cc00:	f811 3b01 	ldrbne.w	r3, [r1], #1
    cc04:	f800 3b01 	strbne.w	r3, [r0], #1
    cc08:	d301      	bcc.n	cc0e <memcpy+0x9a>
    cc0a:	880b      	ldrh	r3, [r1, #0]
    cc0c:	8003      	strh	r3, [r0, #0]
    cc0e:	4660      	mov	r0, ip
    cc10:	4770      	bx	lr
    cc12:	bf00      	nop
    cc14:	2a08      	cmp	r2, #8
    cc16:	d313      	bcc.n	cc40 <memcpy+0xcc>
    cc18:	078b      	lsls	r3, r1, #30
    cc1a:	d0b1      	beq.n	cb80 <memcpy+0xc>
    cc1c:	f010 0303 	ands.w	r3, r0, #3
    cc20:	d0ae      	beq.n	cb80 <memcpy+0xc>
    cc22:	f1c3 0304 	rsb	r3, r3, #4
    cc26:	1ad2      	subs	r2, r2, r3
    cc28:	07db      	lsls	r3, r3, #31
    cc2a:	bf1c      	itt	ne
    cc2c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    cc30:	f800 3b01 	strbne.w	r3, [r0], #1
    cc34:	d3a4      	bcc.n	cb80 <memcpy+0xc>
    cc36:	f831 3b02 	ldrh.w	r3, [r1], #2
    cc3a:	f820 3b02 	strh.w	r3, [r0], #2
    cc3e:	e79f      	b.n	cb80 <memcpy+0xc>
    cc40:	3a04      	subs	r2, #4
    cc42:	d3d9      	bcc.n	cbf8 <memcpy+0x84>
    cc44:	3a01      	subs	r2, #1
    cc46:	f811 3b01 	ldrb.w	r3, [r1], #1
    cc4a:	f800 3b01 	strb.w	r3, [r0], #1
    cc4e:	d2f9      	bcs.n	cc44 <memcpy+0xd0>
    cc50:	780b      	ldrb	r3, [r1, #0]
    cc52:	7003      	strb	r3, [r0, #0]
    cc54:	784b      	ldrb	r3, [r1, #1]
    cc56:	7043      	strb	r3, [r0, #1]
    cc58:	788b      	ldrb	r3, [r1, #2]
    cc5a:	7083      	strb	r3, [r0, #2]
    cc5c:	4660      	mov	r0, ip
    cc5e:	4770      	bx	lr

0000cc60 <strcmp>:
    cc60:	ea80 0c01 	eor.w	ip, r0, r1
    cc64:	f01c 0f03 	tst.w	ip, #3
    cc68:	d137      	bne.n	ccda <strcmp+0x7a>
    cc6a:	f010 0c03 	ands.w	ip, r0, #3
    cc6e:	f020 0003 	bic.w	r0, r0, #3
    cc72:	f021 0103 	bic.w	r1, r1, #3
    cc76:	f850 2b04 	ldr.w	r2, [r0], #4
    cc7a:	bf08      	it	eq
    cc7c:	f851 3b04 	ldreq.w	r3, [r1], #4
    cc80:	d00e      	beq.n	cca0 <strcmp+0x40>
    cc82:	f08c 0c03 	eor.w	ip, ip, #3
    cc86:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    cc8a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    cc8e:	fa23 fc0c 	lsr.w	ip, r3, ip
    cc92:	f851 3b04 	ldr.w	r3, [r1], #4
    cc96:	ea42 020c 	orr.w	r2, r2, ip
    cc9a:	ea43 030c 	orr.w	r3, r3, ip
    cc9e:	bf00      	nop
    cca0:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    cca4:	429a      	cmp	r2, r3
    cca6:	bf01      	itttt	eq
    cca8:	ea2c 0c02 	biceq.w	ip, ip, r2
    ccac:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
    ccb0:	f850 2b04 	ldreq.w	r2, [r0], #4
    ccb4:	f851 3b04 	ldreq.w	r3, [r1], #4
    ccb8:	d0f2      	beq.n	cca0 <strcmp+0x40>
    ccba:	ea4f 6002 	mov.w	r0, r2, lsl #24
    ccbe:	ea4f 2212 	mov.w	r2, r2, lsr #8
    ccc2:	2801      	cmp	r0, #1
    ccc4:	bf28      	it	cs
    ccc6:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
    ccca:	bf08      	it	eq
    cccc:	0a1b      	lsreq	r3, r3, #8
    ccce:	d0f4      	beq.n	ccba <strcmp+0x5a>
    ccd0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    ccd4:	0e00      	lsrs	r0, r0, #24
    ccd6:	1ac0      	subs	r0, r0, r3
    ccd8:	4770      	bx	lr
    ccda:	f010 0f03 	tst.w	r0, #3
    ccde:	d00a      	beq.n	ccf6 <strcmp+0x96>
    cce0:	f810 2b01 	ldrb.w	r2, [r0], #1
    cce4:	f811 3b01 	ldrb.w	r3, [r1], #1
    cce8:	2a01      	cmp	r2, #1
    ccea:	bf28      	it	cs
    ccec:	429a      	cmpcs	r2, r3
    ccee:	d0f4      	beq.n	ccda <strcmp+0x7a>
    ccf0:	eba2 0003 	sub.w	r0, r2, r3
    ccf4:	4770      	bx	lr
    ccf6:	f84d 5d04 	str.w	r5, [sp, #-4]!
    ccfa:	f850 2b04 	ldr.w	r2, [r0], #4
    ccfe:	f001 0503 	and.w	r5, r1, #3
    cd02:	f021 0103 	bic.w	r1, r1, #3
    cd06:	f851 3b04 	ldr.w	r3, [r1], #4
    cd0a:	2d02      	cmp	r5, #2
    cd0c:	d026      	beq.n	cd5c <strcmp+0xfc>
    cd0e:	d84d      	bhi.n	cdac <strcmp+0x14c>
    cd10:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
    cd14:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
    cd18:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    cd1c:	ea2c 0c02 	bic.w	ip, ip, r2
    cd20:	d10d      	bne.n	cd3e <strcmp+0xde>
    cd22:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    cd26:	bf08      	it	eq
    cd28:	f851 3b04 	ldreq.w	r3, [r1], #4
    cd2c:	d10a      	bne.n	cd44 <strcmp+0xe4>
    cd2e:	ea85 0502 	eor.w	r5, r5, r2
    cd32:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
    cd36:	d10c      	bne.n	cd52 <strcmp+0xf2>
    cd38:	f850 2b04 	ldr.w	r2, [r0], #4
    cd3c:	e7e8      	b.n	cd10 <strcmp+0xb0>
    cd3e:	ea4f 2313 	mov.w	r3, r3, lsr #8
    cd42:	e05b      	b.n	cdfc <strcmp+0x19c>
    cd44:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
    cd48:	d154      	bne.n	cdf4 <strcmp+0x194>
    cd4a:	780b      	ldrb	r3, [r1, #0]
    cd4c:	ea4f 6512 	mov.w	r5, r2, lsr #24
    cd50:	e054      	b.n	cdfc <strcmp+0x19c>
    cd52:	ea4f 6512 	mov.w	r5, r2, lsr #24
    cd56:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    cd5a:	e04f      	b.n	cdfc <strcmp+0x19c>
    cd5c:	ea4f 4502 	mov.w	r5, r2, lsl #16
    cd60:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    cd64:	ea4f 4515 	mov.w	r5, r5, lsr #16
    cd68:	ea2c 0c02 	bic.w	ip, ip, r2
    cd6c:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
    cd70:	d118      	bne.n	cda4 <strcmp+0x144>
    cd72:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    cd76:	bf08      	it	eq
    cd78:	f851 3b04 	ldreq.w	r3, [r1], #4
    cd7c:	d107      	bne.n	cd8e <strcmp+0x12e>
    cd7e:	ea85 0502 	eor.w	r5, r5, r2
    cd82:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
    cd86:	d109      	bne.n	cd9c <strcmp+0x13c>
    cd88:	f850 2b04 	ldr.w	r2, [r0], #4
    cd8c:	e7e6      	b.n	cd5c <strcmp+0xfc>
    cd8e:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
    cd92:	d12f      	bne.n	cdf4 <strcmp+0x194>
    cd94:	880b      	ldrh	r3, [r1, #0]
    cd96:	ea4f 4512 	mov.w	r5, r2, lsr #16
    cd9a:	e02f      	b.n	cdfc <strcmp+0x19c>
    cd9c:	ea4f 4303 	mov.w	r3, r3, lsl #16
    cda0:	ea4f 4512 	mov.w	r5, r2, lsr #16
    cda4:	ea4f 4313 	mov.w	r3, r3, lsr #16
    cda8:	e028      	b.n	cdfc <strcmp+0x19c>
    cdaa:	bf00      	nop
    cdac:	f002 05ff 	and.w	r5, r2, #255	; 0xff
    cdb0:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
    cdb4:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    cdb8:	ea2c 0c02 	bic.w	ip, ip, r2
    cdbc:	d10d      	bne.n	cdda <strcmp+0x17a>
    cdbe:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    cdc2:	bf08      	it	eq
    cdc4:	f851 3b04 	ldreq.w	r3, [r1], #4
    cdc8:	d10a      	bne.n	cde0 <strcmp+0x180>
    cdca:	ea85 0502 	eor.w	r5, r5, r2
    cdce:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
    cdd2:	d10a      	bne.n	cdea <strcmp+0x18a>
    cdd4:	f850 2b04 	ldr.w	r2, [r0], #4
    cdd8:	e7e8      	b.n	cdac <strcmp+0x14c>
    cdda:	ea4f 6313 	mov.w	r3, r3, lsr #24
    cdde:	e00d      	b.n	cdfc <strcmp+0x19c>
    cde0:	f012 0fff 	tst.w	r2, #255	; 0xff
    cde4:	d006      	beq.n	cdf4 <strcmp+0x194>
    cde6:	f851 3b04 	ldr.w	r3, [r1], #4
    cdea:	ea4f 2512 	mov.w	r5, r2, lsr #8
    cdee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cdf2:	e003      	b.n	cdfc <strcmp+0x19c>
    cdf4:	f04f 0000 	mov.w	r0, #0
    cdf8:	bc20      	pop	{r5}
    cdfa:	4770      	bx	lr
    cdfc:	f005 02ff 	and.w	r2, r5, #255	; 0xff
    ce00:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    ce04:	2801      	cmp	r0, #1
    ce06:	bf28      	it	cs
    ce08:	4290      	cmpcs	r0, r2
    ce0a:	bf04      	itt	eq
    ce0c:	0a2d      	lsreq	r5, r5, #8
    ce0e:	0a1b      	lsreq	r3, r3, #8
    ce10:	d0f4      	beq.n	cdfc <strcmp+0x19c>
    ce12:	eba2 0000 	sub.w	r0, r2, r0
    ce16:	bc20      	pop	{r5}
    ce18:	4770      	bx	lr
    ce1a:	bf00      	nop

0000ce1c <__aeabi_dmul>:
    ce1c:	b570      	push	{r4, r5, r6, lr}
    ce1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    ce22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    ce26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    ce2a:	bf1d      	ittte	ne
    ce2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    ce30:	ea94 0f0c 	teqne	r4, ip
    ce34:	ea95 0f0c 	teqne	r5, ip
    ce38:	f000 f8de 	bleq	cff8 <__aeabi_dmul+0x1dc>
    ce3c:	442c      	add	r4, r5
    ce3e:	ea81 0603 	eor.w	r6, r1, r3
    ce42:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    ce46:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    ce4a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    ce4e:	bf18      	it	ne
    ce50:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    ce54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ce58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ce5c:	d038      	beq.n	ced0 <__aeabi_dmul+0xb4>
    ce5e:	fba0 ce02 	umull	ip, lr, r0, r2
    ce62:	f04f 0500 	mov.w	r5, #0
    ce66:	fbe1 e502 	umlal	lr, r5, r1, r2
    ce6a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    ce6e:	fbe0 e503 	umlal	lr, r5, r0, r3
    ce72:	f04f 0600 	mov.w	r6, #0
    ce76:	fbe1 5603 	umlal	r5, r6, r1, r3
    ce7a:	f09c 0f00 	teq	ip, #0
    ce7e:	bf18      	it	ne
    ce80:	f04e 0e01 	orrne.w	lr, lr, #1
    ce84:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    ce88:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    ce8c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    ce90:	d204      	bcs.n	ce9c <__aeabi_dmul+0x80>
    ce92:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    ce96:	416d      	adcs	r5, r5
    ce98:	eb46 0606 	adc.w	r6, r6, r6
    ce9c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    cea0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    cea4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    cea8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    ceac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    ceb0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    ceb4:	bf88      	it	hi
    ceb6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    ceba:	d81e      	bhi.n	cefa <__aeabi_dmul+0xde>
    cebc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    cec0:	bf08      	it	eq
    cec2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    cec6:	f150 0000 	adcs.w	r0, r0, #0
    ceca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    cece:	bd70      	pop	{r4, r5, r6, pc}
    ced0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    ced4:	ea46 0101 	orr.w	r1, r6, r1
    ced8:	ea40 0002 	orr.w	r0, r0, r2
    cedc:	ea81 0103 	eor.w	r1, r1, r3
    cee0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    cee4:	bfc2      	ittt	gt
    cee6:	ebd4 050c 	rsbsgt	r5, r4, ip
    ceea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    ceee:	bd70      	popgt	{r4, r5, r6, pc}
    cef0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cef4:	f04f 0e00 	mov.w	lr, #0
    cef8:	3c01      	subs	r4, #1
    cefa:	f300 80ab 	bgt.w	d054 <__aeabi_dmul+0x238>
    cefe:	f114 0f36 	cmn.w	r4, #54	; 0x36
    cf02:	bfde      	ittt	le
    cf04:	2000      	movle	r0, #0
    cf06:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    cf0a:	bd70      	pople	{r4, r5, r6, pc}
    cf0c:	f1c4 0400 	rsb	r4, r4, #0
    cf10:	3c20      	subs	r4, #32
    cf12:	da35      	bge.n	cf80 <__aeabi_dmul+0x164>
    cf14:	340c      	adds	r4, #12
    cf16:	dc1b      	bgt.n	cf50 <__aeabi_dmul+0x134>
    cf18:	f104 0414 	add.w	r4, r4, #20
    cf1c:	f1c4 0520 	rsb	r5, r4, #32
    cf20:	fa00 f305 	lsl.w	r3, r0, r5
    cf24:	fa20 f004 	lsr.w	r0, r0, r4
    cf28:	fa01 f205 	lsl.w	r2, r1, r5
    cf2c:	ea40 0002 	orr.w	r0, r0, r2
    cf30:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    cf34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    cf38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    cf3c:	fa21 f604 	lsr.w	r6, r1, r4
    cf40:	eb42 0106 	adc.w	r1, r2, r6
    cf44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cf48:	bf08      	it	eq
    cf4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cf4e:	bd70      	pop	{r4, r5, r6, pc}
    cf50:	f1c4 040c 	rsb	r4, r4, #12
    cf54:	f1c4 0520 	rsb	r5, r4, #32
    cf58:	fa00 f304 	lsl.w	r3, r0, r4
    cf5c:	fa20 f005 	lsr.w	r0, r0, r5
    cf60:	fa01 f204 	lsl.w	r2, r1, r4
    cf64:	ea40 0002 	orr.w	r0, r0, r2
    cf68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cf6c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    cf70:	f141 0100 	adc.w	r1, r1, #0
    cf74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cf78:	bf08      	it	eq
    cf7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cf7e:	bd70      	pop	{r4, r5, r6, pc}
    cf80:	f1c4 0520 	rsb	r5, r4, #32
    cf84:	fa00 f205 	lsl.w	r2, r0, r5
    cf88:	ea4e 0e02 	orr.w	lr, lr, r2
    cf8c:	fa20 f304 	lsr.w	r3, r0, r4
    cf90:	fa01 f205 	lsl.w	r2, r1, r5
    cf94:	ea43 0302 	orr.w	r3, r3, r2
    cf98:	fa21 f004 	lsr.w	r0, r1, r4
    cf9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cfa0:	fa21 f204 	lsr.w	r2, r1, r4
    cfa4:	ea20 0002 	bic.w	r0, r0, r2
    cfa8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    cfac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cfb0:	bf08      	it	eq
    cfb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cfb6:	bd70      	pop	{r4, r5, r6, pc}
    cfb8:	f094 0f00 	teq	r4, #0
    cfbc:	d10f      	bne.n	cfde <__aeabi_dmul+0x1c2>
    cfbe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    cfc2:	0040      	lsls	r0, r0, #1
    cfc4:	eb41 0101 	adc.w	r1, r1, r1
    cfc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cfcc:	bf08      	it	eq
    cfce:	3c01      	subeq	r4, #1
    cfd0:	d0f7      	beq.n	cfc2 <__aeabi_dmul+0x1a6>
    cfd2:	ea41 0106 	orr.w	r1, r1, r6
    cfd6:	f095 0f00 	teq	r5, #0
    cfda:	bf18      	it	ne
    cfdc:	4770      	bxne	lr
    cfde:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    cfe2:	0052      	lsls	r2, r2, #1
    cfe4:	eb43 0303 	adc.w	r3, r3, r3
    cfe8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    cfec:	bf08      	it	eq
    cfee:	3d01      	subeq	r5, #1
    cff0:	d0f7      	beq.n	cfe2 <__aeabi_dmul+0x1c6>
    cff2:	ea43 0306 	orr.w	r3, r3, r6
    cff6:	4770      	bx	lr
    cff8:	ea94 0f0c 	teq	r4, ip
    cffc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    d000:	bf18      	it	ne
    d002:	ea95 0f0c 	teqne	r5, ip
    d006:	d00c      	beq.n	d022 <__aeabi_dmul+0x206>
    d008:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d00c:	bf18      	it	ne
    d00e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d012:	d1d1      	bne.n	cfb8 <__aeabi_dmul+0x19c>
    d014:	ea81 0103 	eor.w	r1, r1, r3
    d018:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d01c:	f04f 0000 	mov.w	r0, #0
    d020:	bd70      	pop	{r4, r5, r6, pc}
    d022:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d026:	bf06      	itte	eq
    d028:	4610      	moveq	r0, r2
    d02a:	4619      	moveq	r1, r3
    d02c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d030:	d019      	beq.n	d066 <__aeabi_dmul+0x24a>
    d032:	ea94 0f0c 	teq	r4, ip
    d036:	d102      	bne.n	d03e <__aeabi_dmul+0x222>
    d038:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    d03c:	d113      	bne.n	d066 <__aeabi_dmul+0x24a>
    d03e:	ea95 0f0c 	teq	r5, ip
    d042:	d105      	bne.n	d050 <__aeabi_dmul+0x234>
    d044:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    d048:	bf1c      	itt	ne
    d04a:	4610      	movne	r0, r2
    d04c:	4619      	movne	r1, r3
    d04e:	d10a      	bne.n	d066 <__aeabi_dmul+0x24a>
    d050:	ea81 0103 	eor.w	r1, r1, r3
    d054:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d058:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d05c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d060:	f04f 0000 	mov.w	r0, #0
    d064:	bd70      	pop	{r4, r5, r6, pc}
    d066:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d06a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    d06e:	bd70      	pop	{r4, r5, r6, pc}

0000d070 <__aeabi_ddiv>:
    d070:	b570      	push	{r4, r5, r6, lr}
    d072:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d076:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    d07a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    d07e:	bf1d      	ittte	ne
    d080:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    d084:	ea94 0f0c 	teqne	r4, ip
    d088:	ea95 0f0c 	teqne	r5, ip
    d08c:	f000 f8a7 	bleq	d1de <__aeabi_ddiv+0x16e>
    d090:	eba4 0405 	sub.w	r4, r4, r5
    d094:	ea81 0e03 	eor.w	lr, r1, r3
    d098:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d09c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    d0a0:	f000 8088 	beq.w	d1b4 <__aeabi_ddiv+0x144>
    d0a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    d0a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d0ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    d0b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    d0b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
    d0b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    d0bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    d0c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
    d0c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    d0c8:	429d      	cmp	r5, r3
    d0ca:	bf08      	it	eq
    d0cc:	4296      	cmpeq	r6, r2
    d0ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    d0d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
    d0d6:	d202      	bcs.n	d0de <__aeabi_ddiv+0x6e>
    d0d8:	085b      	lsrs	r3, r3, #1
    d0da:	ea4f 0232 	mov.w	r2, r2, rrx
    d0de:	1ab6      	subs	r6, r6, r2
    d0e0:	eb65 0503 	sbc.w	r5, r5, r3
    d0e4:	085b      	lsrs	r3, r3, #1
    d0e6:	ea4f 0232 	mov.w	r2, r2, rrx
    d0ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    d0ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    d0f2:	ebb6 0e02 	subs.w	lr, r6, r2
    d0f6:	eb75 0e03 	sbcs.w	lr, r5, r3
    d0fa:	bf22      	ittt	cs
    d0fc:	1ab6      	subcs	r6, r6, r2
    d0fe:	4675      	movcs	r5, lr
    d100:	ea40 000c 	orrcs.w	r0, r0, ip
    d104:	085b      	lsrs	r3, r3, #1
    d106:	ea4f 0232 	mov.w	r2, r2, rrx
    d10a:	ebb6 0e02 	subs.w	lr, r6, r2
    d10e:	eb75 0e03 	sbcs.w	lr, r5, r3
    d112:	bf22      	ittt	cs
    d114:	1ab6      	subcs	r6, r6, r2
    d116:	4675      	movcs	r5, lr
    d118:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    d11c:	085b      	lsrs	r3, r3, #1
    d11e:	ea4f 0232 	mov.w	r2, r2, rrx
    d122:	ebb6 0e02 	subs.w	lr, r6, r2
    d126:	eb75 0e03 	sbcs.w	lr, r5, r3
    d12a:	bf22      	ittt	cs
    d12c:	1ab6      	subcs	r6, r6, r2
    d12e:	4675      	movcs	r5, lr
    d130:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    d134:	085b      	lsrs	r3, r3, #1
    d136:	ea4f 0232 	mov.w	r2, r2, rrx
    d13a:	ebb6 0e02 	subs.w	lr, r6, r2
    d13e:	eb75 0e03 	sbcs.w	lr, r5, r3
    d142:	bf22      	ittt	cs
    d144:	1ab6      	subcs	r6, r6, r2
    d146:	4675      	movcs	r5, lr
    d148:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    d14c:	ea55 0e06 	orrs.w	lr, r5, r6
    d150:	d018      	beq.n	d184 <__aeabi_ddiv+0x114>
    d152:	ea4f 1505 	mov.w	r5, r5, lsl #4
    d156:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    d15a:	ea4f 1606 	mov.w	r6, r6, lsl #4
    d15e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    d162:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    d166:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    d16a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    d16e:	d1c0      	bne.n	d0f2 <__aeabi_ddiv+0x82>
    d170:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d174:	d10b      	bne.n	d18e <__aeabi_ddiv+0x11e>
    d176:	ea41 0100 	orr.w	r1, r1, r0
    d17a:	f04f 0000 	mov.w	r0, #0
    d17e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    d182:	e7b6      	b.n	d0f2 <__aeabi_ddiv+0x82>
    d184:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d188:	bf04      	itt	eq
    d18a:	4301      	orreq	r1, r0
    d18c:	2000      	moveq	r0, #0
    d18e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    d192:	bf88      	it	hi
    d194:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    d198:	f63f aeaf 	bhi.w	cefa <__aeabi_dmul+0xde>
    d19c:	ebb5 0c03 	subs.w	ip, r5, r3
    d1a0:	bf04      	itt	eq
    d1a2:	ebb6 0c02 	subseq.w	ip, r6, r2
    d1a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    d1aa:	f150 0000 	adcs.w	r0, r0, #0
    d1ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d1b2:	bd70      	pop	{r4, r5, r6, pc}
    d1b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    d1b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    d1bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    d1c0:	bfc2      	ittt	gt
    d1c2:	ebd4 050c 	rsbsgt	r5, r4, ip
    d1c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    d1ca:	bd70      	popgt	{r4, r5, r6, pc}
    d1cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d1d0:	f04f 0e00 	mov.w	lr, #0
    d1d4:	3c01      	subs	r4, #1
    d1d6:	e690      	b.n	cefa <__aeabi_dmul+0xde>
    d1d8:	ea45 0e06 	orr.w	lr, r5, r6
    d1dc:	e68d      	b.n	cefa <__aeabi_dmul+0xde>
    d1de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    d1e2:	ea94 0f0c 	teq	r4, ip
    d1e6:	bf08      	it	eq
    d1e8:	ea95 0f0c 	teqeq	r5, ip
    d1ec:	f43f af3b 	beq.w	d066 <__aeabi_dmul+0x24a>
    d1f0:	ea94 0f0c 	teq	r4, ip
    d1f4:	d10a      	bne.n	d20c <__aeabi_ddiv+0x19c>
    d1f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    d1fa:	f47f af34 	bne.w	d066 <__aeabi_dmul+0x24a>
    d1fe:	ea95 0f0c 	teq	r5, ip
    d202:	f47f af25 	bne.w	d050 <__aeabi_dmul+0x234>
    d206:	4610      	mov	r0, r2
    d208:	4619      	mov	r1, r3
    d20a:	e72c      	b.n	d066 <__aeabi_dmul+0x24a>
    d20c:	ea95 0f0c 	teq	r5, ip
    d210:	d106      	bne.n	d220 <__aeabi_ddiv+0x1b0>
    d212:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d216:	f43f aefd 	beq.w	d014 <__aeabi_dmul+0x1f8>
    d21a:	4610      	mov	r0, r2
    d21c:	4619      	mov	r1, r3
    d21e:	e722      	b.n	d066 <__aeabi_dmul+0x24a>
    d220:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d224:	bf18      	it	ne
    d226:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d22a:	f47f aec5 	bne.w	cfb8 <__aeabi_dmul+0x19c>
    d22e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    d232:	f47f af0d 	bne.w	d050 <__aeabi_dmul+0x234>
    d236:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    d23a:	f47f aeeb 	bne.w	d014 <__aeabi_dmul+0x1f8>
    d23e:	e712      	b.n	d066 <__aeabi_dmul+0x24a>

0000d240 <__aeabi_dcmpun>:
    d240:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    d244:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d248:	d102      	bne.n	d250 <__aeabi_dcmpun+0x10>
    d24a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    d24e:	d10a      	bne.n	d266 <__aeabi_dcmpun+0x26>
    d250:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    d254:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d258:	d102      	bne.n	d260 <__aeabi_dcmpun+0x20>
    d25a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    d25e:	d102      	bne.n	d266 <__aeabi_dcmpun+0x26>
    d260:	f04f 0000 	mov.w	r0, #0
    d264:	4770      	bx	lr
    d266:	f04f 0001 	mov.w	r0, #1
    d26a:	4770      	bx	lr

0000d26c <__aeabi_d2uiz>:
    d26c:	004a      	lsls	r2, r1, #1
    d26e:	d211      	bcs.n	d294 <__aeabi_d2uiz+0x28>
    d270:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    d274:	d211      	bcs.n	d29a <__aeabi_d2uiz+0x2e>
    d276:	d50d      	bpl.n	d294 <__aeabi_d2uiz+0x28>
    d278:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    d27c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    d280:	d40e      	bmi.n	d2a0 <__aeabi_d2uiz+0x34>
    d282:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d286:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d28a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    d28e:	fa23 f002 	lsr.w	r0, r3, r2
    d292:	4770      	bx	lr
    d294:	f04f 0000 	mov.w	r0, #0
    d298:	4770      	bx	lr
    d29a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    d29e:	d102      	bne.n	d2a6 <__aeabi_d2uiz+0x3a>
    d2a0:	f04f 30ff 	mov.w	r0, #4294967295
    d2a4:	4770      	bx	lr
    d2a6:	f04f 0000 	mov.w	r0, #0
    d2aa:	4770      	bx	lr

0000d2ac <__aeabi_d2lz>:
    d2ac:	b538      	push	{r3, r4, r5, lr}
    d2ae:	2200      	movs	r2, #0
    d2b0:	2300      	movs	r3, #0
    d2b2:	4604      	mov	r4, r0
    d2b4:	460d      	mov	r5, r1
    d2b6:	f7ff f9df 	bl	c678 <__aeabi_dcmplt>
    d2ba:	b928      	cbnz	r0, d2c8 <__aeabi_d2lz+0x1c>
    d2bc:	4620      	mov	r0, r4
    d2be:	4629      	mov	r1, r5
    d2c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d2c4:	f000 b80a 	b.w	d2dc <__aeabi_d2ulz>
    d2c8:	4620      	mov	r0, r4
    d2ca:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
    d2ce:	f000 f805 	bl	d2dc <__aeabi_d2ulz>
    d2d2:	4240      	negs	r0, r0
    d2d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d2d8:	bd38      	pop	{r3, r4, r5, pc}
    d2da:	bf00      	nop

0000d2dc <__aeabi_d2ulz>:
    d2dc:	b5d0      	push	{r4, r6, r7, lr}
    d2de:	2200      	movs	r2, #0
    d2e0:	4b0b      	ldr	r3, [pc, #44]	; (d310 <__aeabi_d2ulz+0x34>)
    d2e2:	4606      	mov	r6, r0
    d2e4:	460f      	mov	r7, r1
    d2e6:	f7ff fd99 	bl	ce1c <__aeabi_dmul>
    d2ea:	f7ff ffbf 	bl	d26c <__aeabi_d2uiz>
    d2ee:	4604      	mov	r4, r0
    d2f0:	f7ff f8e8 	bl	c4c4 <__aeabi_ui2d>
    d2f4:	2200      	movs	r2, #0
    d2f6:	4b07      	ldr	r3, [pc, #28]	; (d314 <__aeabi_d2ulz+0x38>)
    d2f8:	f7ff fd90 	bl	ce1c <__aeabi_dmul>
    d2fc:	4602      	mov	r2, r0
    d2fe:	460b      	mov	r3, r1
    d300:	4630      	mov	r0, r6
    d302:	4639      	mov	r1, r7
    d304:	f7fe ffa0 	bl	c248 <__aeabi_dsub>
    d308:	f7ff ffb0 	bl	d26c <__aeabi_d2uiz>
    d30c:	4621      	mov	r1, r4
    d30e:	bdd0      	pop	{r4, r6, r7, pc}
    d310:	3df00000 	.word	0x3df00000
    d314:	41f00000 	.word	0x41f00000

0000d318 <sntp_query>:

	return res;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
    d318:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    d31c:	4604      	mov	r4, r0
    d31e:	b09a      	sub	sp, #104	; 0x68
    d320:	460f      	mov	r7, r1
    d322:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
    d324:	2100      	movs	r1, #0
    d326:	2230      	movs	r2, #48	; 0x30
    d328:	a802      	add	r0, sp, #8
    d32a:	f014 ff8f 	bl	2224c <memset>
	int ret = 0;

	if (!ctx || !time) {
    d32e:	2c00      	cmp	r4, #0
    d330:	f000 8087 	beq.w	d442 <sntp_query+0x12a>
    d334:	2e00      	cmp	r6, #0
    d336:	f000 8084 	beq.w	d442 <sntp_query+0x12a>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
    d33a:	231b      	movs	r3, #27
    d33c:	f88d 3008 	strb.w	r3, [sp, #8]
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    d340:	f01d ff3e 	bl	2b1c0 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    d344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d348:	2500      	movs	r5, #0
    d34a:	fba0 bc03 	umull	fp, ip, r0, r3
    d34e:	fb03 cc01 	mla	ip, r3, r1, ip
    d352:	ea4f 30db 	mov.w	r0, fp, lsr #15
	return time / MSEC_PER_SEC;
    d356:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d35a:	2300      	movs	r3, #0
    d35c:	4629      	mov	r1, r5
    d35e:	ea40 404c 	orr.w	r0, r0, ip, lsl #17
    d362:	f7ff fa79 	bl	c858 <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
    d366:	4a3c      	ldr	r2, [pc, #240]	; (d458 <sntp_query+0x140>)
    d368:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
    d36a:	0a13      	lsrs	r3, r2, #8
    d36c:	0211      	lsls	r1, r2, #8
    d36e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    d372:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    d376:	430b      	orrs	r3, r1
    d378:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    d37c:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
    d380:	68e0      	ldr	r0, [r4, #12]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
    d382:	6122      	str	r2, [r4, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
    d384:	930c      	str	r3, [sp, #48]	; 0x30
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
    d386:	2230      	movs	r2, #48	; 0x30
    d388:	462b      	mov	r3, r5
    d38a:	e9cd 5500 	strd	r5, r5, [sp]
    d38e:	a902      	add	r1, sp, #8
    d390:	f01b feca 	bl	29128 <z_impl_zsock_sendto>
	if (ret < 0) {
    d394:	2800      	cmp	r0, #0
    d396:	db0f      	blt.n	d3b8 <sntp_query+0xa0>
	struct sntp_pkt buf = { 0 };
    d398:	4629      	mov	r1, r5
    d39a:	2230      	movs	r2, #48	; 0x30
    d39c:	a80e      	add	r0, sp, #56	; 0x38
    d39e:	f014 ff55 	bl	2224c <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
    d3a2:	68a1      	ldr	r1, [r4, #8]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
    d3a4:	463a      	mov	r2, r7
    d3a6:	4620      	mov	r0, r4
    d3a8:	f005 fd56 	bl	12e58 <z_impl_zsock_poll>
	if (status < 0) {
    d3ac:	42a8      	cmp	r0, r5
    d3ae:	da06      	bge.n	d3be <sntp_query+0xa6>
		return -errno;
    d3b0:	f01b fffa 	bl	293a8 <__errno>
    d3b4:	6800      	ldr	r0, [r0, #0]
    d3b6:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
    d3b8:	b01a      	add	sp, #104	; 0x68
    d3ba:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
	if (status == 0) {
    d3be:	d037      	beq.n	d430 <sntp_query+0x118>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
    d3c0:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
    d3c2:	2230      	movs	r2, #48	; 0x30
    d3c4:	462b      	mov	r3, r5
    d3c6:	e9cd 5500 	strd	r5, r5, [sp]
    d3ca:	a90e      	add	r1, sp, #56	; 0x38
    d3cc:	f01b fedf 	bl	2918e <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
    d3d0:	2800      	cmp	r0, #0
    d3d2:	dbed      	blt.n	d3b0 <sntp_query+0x98>
	if (rcvd != sizeof(struct sntp_pkt)) {
    d3d4:	2830      	cmp	r0, #48	; 0x30
    d3d6:	d12e      	bne.n	d436 <sntp_query+0x11e>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
    d3d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d3da:	6922      	ldr	r2, [r4, #16]
    d3dc:	ba1b      	rev	r3, r3
    d3de:	429a      	cmp	r2, r3
    d3e0:	d002      	beq.n	d3e8 <sntp_query+0xd0>
		return -EINVAL;
    d3e2:	f06f 0015 	mvn.w	r0, #21
    d3e6:	e7e7      	b.n	d3b8 <sntp_query+0xa0>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
    d3e8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    d3ec:	f003 0307 	and.w	r3, r3, #7
    d3f0:	2b04      	cmp	r3, #4
    d3f2:	d1f6      	bne.n	d3e2 <sntp_query+0xca>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
    d3f4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    d3f8:	b303      	cbz	r3, d43c <sntp_query+0x124>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
    d3fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
    d3fc:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d3fe:	ba1b      	rev	r3, r3
    d400:	ba12      	rev	r2, r2
    d402:	ea53 0102 	orrs.w	r1, r3, r2
    d406:	d0ec      	beq.n	d3e2 <sntp_query+0xca>
	if (ts & 0x80000000) {
    d408:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
    d40a:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
    d40c:	da0c      	bge.n	d428 <sntp_query+0x110>
		if (ts >= OFFSET_1970_JAN_1) {
    d40e:	4a13      	ldr	r2, [pc, #76]	; (d45c <sntp_query+0x144>)
    d410:	4293      	cmp	r3, r2
    d412:	d9e6      	bls.n	d3e2 <sntp_query+0xca>
			time->seconds = ts - OFFSET_1970_JAN_1;
    d414:	a10c      	add	r1, pc, #48	; (adr r1, d448 <sntp_query+0x130>)
    d416:	e9d1 0100 	ldrd	r0, r1, [r1]
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
    d41a:	18c0      	adds	r0, r0, r3
    d41c:	f141 0100 	adc.w	r1, r1, #0
    d420:	e9c6 0100 	strd	r0, r1, [r6]
	return 0;
    d424:	2000      	movs	r0, #0
    d426:	e7c7      	b.n	d3b8 <sntp_query+0xa0>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
    d428:	a109      	add	r1, pc, #36	; (adr r1, d450 <sntp_query+0x138>)
    d42a:	e9d1 0100 	ldrd	r0, r1, [r1]
    d42e:	e7f4      	b.n	d41a <sntp_query+0x102>
		return -ETIMEDOUT;
    d430:	f06f 0073 	mvn.w	r0, #115	; 0x73
    d434:	e7c0      	b.n	d3b8 <sntp_query+0xa0>
		return -EMSGSIZE;
    d436:	f06f 0079 	mvn.w	r0, #121	; 0x79
    d43a:	e7bd      	b.n	d3b8 <sntp_query+0xa0>
		return -EBUSY;
    d43c:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
    d440:	e7ba      	b.n	d3b8 <sntp_query+0xa0>
		return -EFAULT;
    d442:	f06f 000d 	mvn.w	r0, #13
    d446:	e7b7      	b.n	d3b8 <sntp_query+0xa0>
    d448:	7c558180 	.word	0x7c558180
    d44c:	ffffffff 	.word	0xffffffff
    d450:	7c558180 	.word	0x7c558180
    d454:	00000000 	.word	0x00000000
    d458:	83aa7e80 	.word	0x83aa7e80
    d45c:	83aa7e7f 	.word	0x83aa7e7f

0000d460 <at_handler>:

	return err;
}

static void at_handler(void *context, const char *response)
{
    d460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d464:	ed2d 8b02 	vpush	{d8}
	int err;
	bool notify = false;
	enum lte_lc_notif_type notif_type;
	struct lte_lc_evt evt;

	if (response == NULL) {
    d468:	460e      	mov	r6, r1
{
    d46a:	b08c      	sub	sp, #48	; 0x30
	if (response == NULL) {
    d46c:	b971      	cbnz	r1, d48c <at_handler+0x2c>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    d46e:	49b2      	ldr	r1, [pc, #712]	; (d738 <at_handler+0x2d8>)
    d470:	4bb2      	ldr	r3, [pc, #712]	; (d73c <at_handler+0x2dc>)
		LOG_ERR("Response buffer is NULL-pointer");
    d472:	48b3      	ldr	r0, [pc, #716]	; (d740 <at_handler+0x2e0>)
    d474:	1ac9      	subs	r1, r1, r3
    d476:	08c9      	lsrs	r1, r1, #3
    d478:	0189      	lsls	r1, r1, #6
    d47a:	f041 0101 	orr.w	r1, r1, #1
    d47e:	f01b fafb 	bl	28a78 <log_0>
	}

	if (evt_handler && notify) {
		evt_handler(&evt);
	}
}
    d482:	b00c      	add	sp, #48	; 0x30
    d484:	ecbd 8b02 	vpop	{d8}
    d488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    d48c:	2700      	movs	r7, #0
    d48e:	4cad      	ldr	r4, [pc, #692]	; (d744 <at_handler+0x2e4>)
		if (strncmp(at_notifs[i], notif,
    d490:	f854 5b04 	ldr.w	r5, [r4], #4
    d494:	4628      	mov	r0, r5
    d496:	f015 fae9 	bl	22a6c <strlen>
    d49a:	4631      	mov	r1, r6
    d49c:	4602      	mov	r2, r0
    d49e:	4628      	mov	r0, r5
    d4a0:	f015 fb12 	bl	22ac8 <strncmp>
    d4a4:	4605      	mov	r5, r0
    d4a6:	bb60      	cbnz	r0, d502 <at_handler+0xa2>
	switch (notif_type) {
    d4a8:	2f01      	cmp	r7, #1
			*type = i;
    d4aa:	b2fb      	uxtb	r3, r7
	switch (notif_type) {
    d4ac:	f000 8107 	beq.w	d6be <at_handler+0x25e>
    d4b0:	2b02      	cmp	r3, #2
    d4b2:	f000 818d 	beq.w	d7d0 <at_handler+0x370>
	size_t len = sizeof(str_buf) - 1;
    d4b6:	f04f 0809 	mov.w	r8, #9
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    d4ba:	210a      	movs	r1, #10
    d4bc:	a807      	add	r0, sp, #28
	size_t len = sizeof(str_buf) - 1;
    d4be:	f8cd 8008 	str.w	r8, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    d4c2:	f01d fa6c 	bl	2a99e <at_params_list_init>
	if (err) {
    d4c6:	4604      	mov	r4, r0
    d4c8:	b1f8      	cbz	r0, d50a <at_handler+0xaa>
    d4ca:	4a9b      	ldr	r2, [pc, #620]	; (d738 <at_handler+0x2d8>)
    d4cc:	4b9b      	ldr	r3, [pc, #620]	; (d73c <at_handler+0x2dc>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d4ce:	4601      	mov	r1, r0
    d4d0:	1ad2      	subs	r2, r2, r3
    d4d2:	08d2      	lsrs	r2, r2, #3
    d4d4:	0192      	lsls	r2, r2, #6
    d4d6:	489c      	ldr	r0, [pc, #624]	; (d748 <at_handler+0x2e8>)
    d4d8:	f042 0201 	orr.w	r2, r2, #1
    d4dc:	f01b fadb 	bl	28a96 <log_1>
    d4e0:	4b96      	ldr	r3, [pc, #600]	; (d73c <at_handler+0x2dc>)
    d4e2:	4d95      	ldr	r5, [pc, #596]	; (d738 <at_handler+0x2d8>)
			LOG_ERR("Failed to parse notification (error %d): %s",
    d4e4:	4630      	mov	r0, r6
    d4e6:	1aed      	subs	r5, r5, r3
    d4e8:	f005 f832 	bl	12550 <log_strdup>
    d4ec:	08ed      	lsrs	r5, r5, #3
    d4ee:	01ad      	lsls	r5, r5, #6
    d4f0:	f045 0501 	orr.w	r5, r5, #1
    d4f4:	4602      	mov	r2, r0
    d4f6:	462b      	mov	r3, r5
    d4f8:	4621      	mov	r1, r4
    d4fa:	4894      	ldr	r0, [pc, #592]	; (d74c <at_handler+0x2ec>)
    d4fc:	f01b fae2 	bl	28ac4 <log_2>
			return;
    d500:	e7bf      	b.n	d482 <at_handler+0x22>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    d502:	3701      	adds	r7, #1
    d504:	2f03      	cmp	r7, #3
    d506:	d1c3      	bne.n	d490 <at_handler+0x30>
    d508:	e7bb      	b.n	d482 <at_handler+0x22>
	err = at_parser_params_from_str(notification,
    d50a:	4601      	mov	r1, r0
    d50c:	aa07      	add	r2, sp, #28
    d50e:	4630      	mov	r0, r6
    d510:	f01d fa1d 	bl	2a94e <at_parser_params_from_str>
	if (err) {
    d514:	4604      	mov	r4, r0
    d516:	2800      	cmp	r0, #0
    d518:	d05c      	beq.n	d5d4 <at_handler+0x174>
    d51a:	4a87      	ldr	r2, [pc, #540]	; (d738 <at_handler+0x2d8>)
    d51c:	4b87      	ldr	r3, [pc, #540]	; (d73c <at_handler+0x2dc>)
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
    d51e:	4601      	mov	r1, r0
    d520:	1ad2      	subs	r2, r2, r3
    d522:	08d2      	lsrs	r2, r2, #3
    d524:	0192      	lsls	r2, r2, #6
    d526:	488a      	ldr	r0, [pc, #552]	; (d750 <at_handler+0x2f0>)
    d528:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not get registration status, error: %d", err);
    d52c:	f01b fab3 	bl	28a96 <log_1>
	at_params_list_free(&resp_list);
    d530:	a807      	add	r0, sp, #28
    d532:	f01d fa65 	bl	2aa00 <at_params_list_free>
		if (err) {
    d536:	2c00      	cmp	r4, #0
    d538:	d1d2      	bne.n	d4e0 <at_handler+0x80>
		if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d53a:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
    d53e:	2b01      	cmp	r3, #1
    d540:	d102      	bne.n	d548 <at_handler+0xe8>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    d542:	4884      	ldr	r0, [pc, #528]	; (d754 <at_handler+0x2f4>)
    d544:	f013 fef6 	bl	21334 <z_impl_k_sem_give>
		if (!evt_handler) {
    d548:	4c83      	ldr	r4, [pc, #524]	; (d758 <at_handler+0x2f8>)
    d54a:	6823      	ldr	r3, [r4, #0]
    d54c:	2b00      	cmp	r3, #0
    d54e:	d098      	beq.n	d482 <at_handler+0x22>
		if (reg_status != prev_reg_status) {
    d550:	4a82      	ldr	r2, [pc, #520]	; (d75c <at_handler+0x2fc>)
    d552:	7811      	ldrb	r1, [r2, #0]
    d554:	42a9      	cmp	r1, r5
    d556:	d007      	beq.n	d568 <at_handler+0x108>
			prev_reg_status = reg_status;
    d558:	7015      	strb	r5, [r2, #0]
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    d55a:	2200      	movs	r2, #0
			evt.nw_reg_status = reg_status;
    d55c:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    d560:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			evt_handler(&evt);
    d564:	a809      	add	r0, sp, #36	; 0x24
    d566:	4798      	blx	r3
		if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
    d568:	4e7d      	ldr	r6, [pc, #500]	; (d760 <at_handler+0x300>)
    d56a:	ad03      	add	r5, sp, #12
    d56c:	2208      	movs	r2, #8
    d56e:	4631      	mov	r1, r6
    d570:	4628      	mov	r0, r5
    d572:	f014 fe3d 	bl	221f0 <memcmp>
    d576:	b160      	cbz	r0, d592 <at_handler+0x132>
			evt.type = LTE_LC_EVT_CELL_UPDATE;
    d578:	e895 0003 	ldmia.w	r5, {r0, r1}
    d57c:	2304      	movs	r3, #4
    d57e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
    d582:	ab0c      	add	r3, sp, #48	; 0x30
    d584:	e903 0003 	stmdb	r3, {r0, r1}
    d588:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
    d58c:	6823      	ldr	r3, [r4, #0]
    d58e:	a809      	add	r0, sp, #36	; 0x24
    d590:	4798      	blx	r3
		if (memcmp(&psm_cfg, &prev_psm_cfg,
    d592:	4e74      	ldr	r6, [pc, #464]	; (d764 <at_handler+0x304>)
    d594:	ad05      	add	r5, sp, #20
    d596:	2208      	movs	r2, #8
    d598:	4631      	mov	r1, r6
    d59a:	4628      	mov	r0, r5
    d59c:	f014 fe28 	bl	221f0 <memcmp>
    d5a0:	b160      	cbz	r0, d5bc <at_handler+0x15c>
			evt.type = LTE_LC_EVT_PSM_UPDATE;
    d5a2:	e895 0003 	ldmia.w	r5, {r0, r1}
    d5a6:	2301      	movs	r3, #1
    d5a8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_psm_cfg, &psm_cfg,
    d5ac:	ab0c      	add	r3, sp, #48	; 0x30
    d5ae:	e903 0003 	stmdb	r3, {r0, r1}
    d5b2:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
    d5b6:	6823      	ldr	r3, [r4, #0]
    d5b8:	a809      	add	r0, sp, #36	; 0x24
    d5ba:	4798      	blx	r3
	bool notify = false;
    d5bc:	2300      	movs	r3, #0
	if (evt_handler && notify) {
    d5be:	4a66      	ldr	r2, [pc, #408]	; (d758 <at_handler+0x2f8>)
    d5c0:	6812      	ldr	r2, [r2, #0]
    d5c2:	2a00      	cmp	r2, #0
    d5c4:	f43f af5d 	beq.w	d482 <at_handler+0x22>
    d5c8:	2b00      	cmp	r3, #0
    d5ca:	f43f af5a 	beq.w	d482 <at_handler+0x22>
		evt_handler(&evt);
    d5ce:	a809      	add	r0, sp, #36	; 0x24
    d5d0:	4790      	blx	r2
    d5d2:	e756      	b.n	d482 <at_handler+0x22>
	err = at_params_int_get(&resp_list,
    d5d4:	2101      	movs	r1, #1
    d5d6:	aa01      	add	r2, sp, #4
    d5d8:	a807      	add	r0, sp, #28
    d5da:	f01d fa9d 	bl	2ab18 <at_params_int_get>
	if (err) {
    d5de:	4604      	mov	r4, r0
    d5e0:	b148      	cbz	r0, d5f6 <at_handler+0x196>
    d5e2:	4a55      	ldr	r2, [pc, #340]	; (d738 <at_handler+0x2d8>)
    d5e4:	4b55      	ldr	r3, [pc, #340]	; (d73c <at_handler+0x2dc>)
		LOG_ERR("Could not get registration status, error: %d", err);
    d5e6:	4601      	mov	r1, r0
    d5e8:	1ad2      	subs	r2, r2, r3
    d5ea:	08d2      	lsrs	r2, r2, #3
    d5ec:	0192      	lsls	r2, r2, #6
    d5ee:	485e      	ldr	r0, [pc, #376]	; (d768 <at_handler+0x308>)
    d5f0:	f042 0201 	orr.w	r2, r2, #1
    d5f4:	e79a      	b.n	d52c <at_handler+0xcc>
	*reg_status = status;
    d5f6:	f89d 5004 	ldrb.w	r5, [sp, #4]
	if (*reg_status != LTE_LC_NW_REG_UICC_FAIL) {
    d5fa:	2d5a      	cmp	r5, #90	; 0x5a
    d5fc:	d047      	beq.n	d68e <at_handler+0x22e>
		err = at_params_string_get(&resp_list,
    d5fe:	2102      	movs	r1, #2
    d600:	ab02      	add	r3, sp, #8
    d602:	aa09      	add	r2, sp, #36	; 0x24
    d604:	a807      	add	r0, sp, #28
    d606:	f01d fa9a 	bl	2ab3e <at_params_string_get>
		if (err) {
    d60a:	4607      	mov	r7, r0
    d60c:	b160      	cbz	r0, d628 <at_handler+0x1c8>
    d60e:	4a4a      	ldr	r2, [pc, #296]	; (d738 <at_handler+0x2d8>)
    d610:	4b4a      	ldr	r3, [pc, #296]	; (d73c <at_handler+0x2dc>)
			LOG_ERR("Could not get tracking area code, error: %d", err);
    d612:	4601      	mov	r1, r0
    d614:	1ad2      	subs	r2, r2, r3
    d616:	08d2      	lsrs	r2, r2, #3
    d618:	0192      	lsls	r2, r2, #6
    d61a:	4854      	ldr	r0, [pc, #336]	; (d76c <at_handler+0x30c>)
    d61c:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not get cell ID, error: %d", err);
    d620:	f01b fa39 	bl	28a96 <log_1>
			goto clean_exit;
    d624:	463c      	mov	r4, r7
    d626:	e783      	b.n	d530 <at_handler+0xd0>
		str_buf[len] = '\0';
    d628:	9b02      	ldr	r3, [sp, #8]
    d62a:	aa0c      	add	r2, sp, #48	; 0x30
    d62c:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
    d62e:	4621      	mov	r1, r4
    d630:	2210      	movs	r2, #16
    d632:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
    d634:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
    d638:	f015 fe1c 	bl	23274 <strtoul>
		err = at_params_string_get(&resp_list,
    d63c:	2103      	movs	r1, #3
		cell->tac = strtoul(str_buf, NULL, 16);
    d63e:	9004      	str	r0, [sp, #16]
		err = at_params_string_get(&resp_list,
    d640:	ab02      	add	r3, sp, #8
    d642:	aa09      	add	r2, sp, #36	; 0x24
    d644:	a807      	add	r0, sp, #28
		len = sizeof(str_buf) - 1;
    d646:	f8cd 8008 	str.w	r8, [sp, #8]
		err = at_params_string_get(&resp_list,
    d64a:	f01d fa78 	bl	2ab3e <at_params_string_get>
		if (err) {
    d64e:	4607      	mov	r7, r0
    d650:	b148      	cbz	r0, d666 <at_handler+0x206>
    d652:	4a39      	ldr	r2, [pc, #228]	; (d738 <at_handler+0x2d8>)
    d654:	4b39      	ldr	r3, [pc, #228]	; (d73c <at_handler+0x2dc>)
			LOG_ERR("Could not get cell ID, error: %d", err);
    d656:	4601      	mov	r1, r0
    d658:	1ad2      	subs	r2, r2, r3
    d65a:	08d2      	lsrs	r2, r2, #3
    d65c:	0192      	lsls	r2, r2, #6
    d65e:	4844      	ldr	r0, [pc, #272]	; (d770 <at_handler+0x310>)
    d660:	f042 0201 	orr.w	r2, r2, #1
    d664:	e7dc      	b.n	d620 <at_handler+0x1c0>
		str_buf[len] = '\0';
    d666:	9b02      	ldr	r3, [sp, #8]
    d668:	aa0c      	add	r2, sp, #48	; 0x30
    d66a:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
    d66c:	4621      	mov	r1, r4
    d66e:	2210      	movs	r2, #16
    d670:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
    d672:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
    d676:	f015 fdfd 	bl	23274 <strtoul>
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d67a:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
    d67e:	2b01      	cmp	r3, #1
		cell->id = strtoul(str_buf, NULL, 16);
    d680:	9003      	str	r0, [sp, #12]
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d682:	d009      	beq.n	d698 <at_handler+0x238>
		psm_cfg->tau = -1;
    d684:	f04f 33ff 	mov.w	r3, #4294967295
		psm_cfg->active_time = -1;
    d688:	e9cd 3305 	strd	r3, r3, [sp, #20]
    d68c:	e750      	b.n	d530 <at_handler+0xd0>
		cell->tac = UINT32_MAX;
    d68e:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = UINT32_MAX;
    d692:	e9cd 3303 	strd	r3, r3, [sp, #12]
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d696:	e7f5      	b.n	d684 <at_handler+0x224>
		err = parse_psm_cfg(&resp_list, true, psm_cfg);
    d698:	2101      	movs	r1, #1
    d69a:	aa05      	add	r2, sp, #20
    d69c:	a807      	add	r0, sp, #28
    d69e:	f009 fdf3 	bl	17288 <parse_psm_cfg>
		if (err) {
    d6a2:	4604      	mov	r4, r0
    d6a4:	2800      	cmp	r0, #0
    d6a6:	f43f af43 	beq.w	d530 <at_handler+0xd0>
    d6aa:	4a23      	ldr	r2, [pc, #140]	; (d738 <at_handler+0x2d8>)
    d6ac:	4b23      	ldr	r3, [pc, #140]	; (d73c <at_handler+0x2dc>)
			LOG_ERR("Failed to parse PSM configuration, error: %d",
    d6ae:	4601      	mov	r1, r0
    d6b0:	1ad2      	subs	r2, r2, r3
    d6b2:	08d2      	lsrs	r2, r2, #3
    d6b4:	0192      	lsls	r2, r2, #6
    d6b6:	482f      	ldr	r0, [pc, #188]	; (d774 <at_handler+0x314>)
    d6b8:	f042 0201 	orr.w	r2, r2, #1
    d6bc:	e736      	b.n	d52c <at_handler+0xcc>
static int parse_rrc_mode(const char *at_response,
			  enum lte_lc_rrc_mode *mode,
			  size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
    d6be:	e9cd 0007 	strd	r0, r0, [sp, #28]

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
    d6c2:	2104      	movs	r1, #4
    d6c4:	a807      	add	r0, sp, #28
    d6c6:	f01d f96a 	bl	2a99e <at_params_list_init>
	if (err) {
    d6ca:	4604      	mov	r4, r0
    d6cc:	b1b0      	cbz	r0, d6fc <at_handler+0x29c>
    d6ce:	4a1a      	ldr	r2, [pc, #104]	; (d738 <at_handler+0x2d8>)
    d6d0:	4b1a      	ldr	r3, [pc, #104]	; (d73c <at_handler+0x2dc>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d6d2:	4601      	mov	r1, r0
    d6d4:	1ad2      	subs	r2, r2, r3
    d6d6:	08d2      	lsrs	r2, r2, #3
    d6d8:	0192      	lsls	r2, r2, #6
    d6da:	481b      	ldr	r0, [pc, #108]	; (d748 <at_handler+0x2e8>)
    d6dc:	f042 0201 	orr.w	r2, r2, #1
    d6e0:	f01b f9d9 	bl	28a96 <log_1>
			LOG_ERR("Can't parse signalling mode, error: %d", err);
    d6e4:	4621      	mov	r1, r4
    d6e6:	4a14      	ldr	r2, [pc, #80]	; (d738 <at_handler+0x2d8>)
    d6e8:	4b14      	ldr	r3, [pc, #80]	; (d73c <at_handler+0x2dc>)
    d6ea:	4823      	ldr	r0, [pc, #140]	; (d778 <at_handler+0x318>)
    d6ec:	1ad2      	subs	r2, r2, r3
    d6ee:	08d2      	lsrs	r2, r2, #3
    d6f0:	0192      	lsls	r2, r2, #6
    d6f2:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Can't parse eDRX, error: %d", err);
    d6f6:	f01b f9ce 	bl	28a96 <log_1>
			return;
    d6fa:	e6c2      	b.n	d482 <at_handler+0x22>
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    d6fc:	4601      	mov	r1, r0
    d6fe:	aa07      	add	r2, sp, #28
    d700:	4630      	mov	r0, r6
    d702:	f01d f924 	bl	2a94e <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    d706:	4604      	mov	r4, r0
    d708:	2800      	cmp	r0, #0
    d70a:	d039      	beq.n	d780 <at_handler+0x320>
    d70c:	4a0a      	ldr	r2, [pc, #40]	; (d738 <at_handler+0x2d8>)
    d70e:	4b0b      	ldr	r3, [pc, #44]	; (d73c <at_handler+0x2dc>)
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
    d710:	4601      	mov	r1, r0
    d712:	1ad2      	subs	r2, r2, r3
    d714:	08d2      	lsrs	r2, r2, #3
    d716:	0192      	lsls	r2, r2, #6
    d718:	4818      	ldr	r0, [pc, #96]	; (d77c <at_handler+0x31c>)
    d71a:	f042 0201 	orr.w	r2, r2, #1
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
	if (err) {
		LOG_ERR("Could not get signalling mode, error: %d", err);
    d71e:	f01b f9ba 	bl	28a96 <log_1>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
    d722:	a807      	add	r0, sp, #28
    d724:	f01d f96c 	bl	2aa00 <at_params_list_free>
		if (err) {
    d728:	2c00      	cmp	r4, #0
    d72a:	d1db      	bne.n	d6e4 <at_handler+0x284>
		evt.type = LTE_LC_EVT_RRC_UPDATE;
    d72c:	2303      	movs	r3, #3
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    d72e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		notify = true;
    d732:	2301      	movs	r3, #1
		break;
    d734:	e743      	b.n	d5be <at_handler+0x15e>
    d736:	bf00      	nop
    d738:	0002b800 	.word	0x0002b800
    d73c:	0002b7b8 	.word	0x0002b7b8
    d740:	0002d77e 	.word	0x0002d77e
    d744:	0002bba8 	.word	0x0002bba8
    d748:	0002d79e 	.word	0x0002d79e
    d74c:	0002d89b 	.word	0x0002d89b
    d750:	0002d7c7 	.word	0x0002d7c7
    d754:	2002170c 	.word	0x2002170c
    d758:	20021708 	.word	0x20021708
    d75c:	2002500c 	.word	0x2002500c
    d760:	20021724 	.word	0x20021724
    d764:	2002172c 	.word	0x2002172c
    d768:	0002d7f4 	.word	0x0002d7f4
    d76c:	0002d821 	.word	0x0002d821
    d770:	0002d84d 	.word	0x0002d84d
    d774:	0002d86e 	.word	0x0002d86e
    d778:	0002d937 	.word	0x0002d937
    d77c:	0002d8c7 	.word	0x0002d8c7
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
    d780:	4639      	mov	r1, r7
    d782:	aa05      	add	r2, sp, #20
    d784:	a807      	add	r0, sp, #28
    d786:	f01d f9c7 	bl	2ab18 <at_params_int_get>
	if (err) {
    d78a:	4604      	mov	r4, r0
    d78c:	b148      	cbz	r0, d7a2 <at_handler+0x342>
    d78e:	4a82      	ldr	r2, [pc, #520]	; (d998 <at_handler+0x538>)
    d790:	4b82      	ldr	r3, [pc, #520]	; (d99c <at_handler+0x53c>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
    d792:	4601      	mov	r1, r0
    d794:	1ad2      	subs	r2, r2, r3
    d796:	08d2      	lsrs	r2, r2, #3
    d798:	0192      	lsls	r2, r2, #6
    d79a:	4881      	ldr	r0, [pc, #516]	; (d9a0 <at_handler+0x540>)
    d79c:	f042 0201 	orr.w	r2, r2, #1
    d7a0:	e7bd      	b.n	d71e <at_handler+0x2be>
	if (temp_mode == 0) {
    d7a2:	9905      	ldr	r1, [sp, #20]
    d7a4:	b911      	cbnz	r1, d7ac <at_handler+0x34c>
		*mode = LTE_LC_RRC_MODE_IDLE;
    d7a6:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
    d7aa:	e7ba      	b.n	d722 <at_handler+0x2c2>
	} else if (temp_mode == 1) {
    d7ac:	2901      	cmp	r1, #1
    d7ae:	d102      	bne.n	d7b6 <at_handler+0x356>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
    d7b0:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
    d7b4:	e7b5      	b.n	d722 <at_handler+0x2c2>
    d7b6:	4b79      	ldr	r3, [pc, #484]	; (d99c <at_handler+0x53c>)
    d7b8:	4a77      	ldr	r2, [pc, #476]	; (d998 <at_handler+0x538>)
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
    d7ba:	487a      	ldr	r0, [pc, #488]	; (d9a4 <at_handler+0x544>)
    d7bc:	1ad2      	subs	r2, r2, r3
    d7be:	08d2      	lsrs	r2, r2, #3
    d7c0:	0192      	lsls	r2, r2, #6
    d7c2:	f042 0201 	orr.w	r2, r2, #1
    d7c6:	f01b f966 	bl	28a96 <log_1>
		err = -EINVAL;
    d7ca:	f06f 0415 	mvn.w	r4, #21
    d7ce:	e7a8      	b.n	d722 <at_handler+0x2c2>
{
	int err;
	uint8_t idx;
	struct at_param_list resp_list = {0};
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
    d7d0:	2304      	movs	r3, #4
	switch (sys_mode_current) {
    d7d2:	4d75      	ldr	r5, [pc, #468]	; (d9a8 <at_handler+0x548>)
	size_t len = sizeof(tmp_buf) - 1;
    d7d4:	9303      	str	r3, [sp, #12]
    d7d6:	782b      	ldrb	r3, [r5, #0]
	struct at_param_list resp_list = {0};
    d7d8:	e9cd 0007 	strd	r0, r0, [sp, #28]
	switch (sys_mode_current) {
    d7dc:	3b01      	subs	r3, #1
    d7de:	2b04      	cmp	r3, #4
    d7e0:	d804      	bhi.n	d7ec <at_handler+0x38c>
    d7e2:	e8df f003 	tbb	[pc, r3]
    d7e6:	2d19      	.short	0x2d19
    d7e8:	1903      	.short	0x1903
    d7ea:	2d          	.byte	0x2d
    d7eb:	00          	.byte	0x00
    d7ec:	4b6b      	ldr	r3, [pc, #428]	; (d99c <at_handler+0x53c>)
    d7ee:	496a      	ldr	r1, [pc, #424]	; (d998 <at_handler+0x538>)
		LOG_ERR("No LTE connection available in this system mode");
    d7f0:	486e      	ldr	r0, [pc, #440]	; (d9ac <at_handler+0x54c>)
    d7f2:	1ac9      	subs	r1, r1, r3
    d7f4:	08c9      	lsrs	r1, r1, #3
    d7f6:	0189      	lsls	r1, r1, #6
    d7f8:	f041 0101 	orr.w	r1, r1, #1
    d7fc:	f01b f93c 	bl	28a78 <log_0>
		return -ENOTCONN;
    d800:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    d804:	4a64      	ldr	r2, [pc, #400]	; (d998 <at_handler+0x538>)
    d806:	4b65      	ldr	r3, [pc, #404]	; (d99c <at_handler+0x53c>)
			LOG_ERR("Can't parse eDRX, error: %d", err);
    d808:	4621      	mov	r1, r4
    d80a:	1ad2      	subs	r2, r2, r3
    d80c:	08d2      	lsrs	r2, r2, #3
    d80e:	0192      	lsls	r2, r2, #6
    d810:	4867      	ldr	r0, [pc, #412]	; (d9b0 <at_handler+0x550>)
    d812:	f042 0201 	orr.w	r2, r2, #1
    d816:	e76e      	b.n	d6f6 <at_handler+0x296>
	switch (sys_mode_current) {
    d818:	ed9f 8a66 	vldr	s16, [pc, #408]	; d9b4 <at_handler+0x554>
	err = get_ptw_multiplier(&ptw_multiplier);
	if (err) {
		return err;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
    d81c:	2105      	movs	r1, #5
    d81e:	a807      	add	r0, sp, #28
    d820:	f01d f8bd 	bl	2a99e <at_params_list_init>
	if (err) {
    d824:	4604      	mov	r4, r0
    d826:	b170      	cbz	r0, d846 <at_handler+0x3e6>
    d828:	4b5c      	ldr	r3, [pc, #368]	; (d99c <at_handler+0x53c>)
    d82a:	4a5b      	ldr	r2, [pc, #364]	; (d998 <at_handler+0x538>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d82c:	4601      	mov	r1, r0
    d82e:	1ad2      	subs	r2, r2, r3
    d830:	08d2      	lsrs	r2, r2, #3
    d832:	0192      	lsls	r2, r2, #6
    d834:	4860      	ldr	r0, [pc, #384]	; (d9b8 <at_handler+0x558>)
    d836:	f042 0201 	orr.w	r2, r2, #1
    d83a:	f01b f92c 	bl	28a96 <log_1>
		return err;
    d83e:	e7e1      	b.n	d804 <at_handler+0x3a4>
		*ptw_multiplier = 2.56;
    d840:	ed9f 8a5e 	vldr	s16, [pc, #376]	; d9bc <at_handler+0x55c>
    d844:	e7ea      	b.n	d81c <at_handler+0x3bc>
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    d846:	4601      	mov	r1, r0
    d848:	aa07      	add	r2, sp, #28
    d84a:	4630      	mov	r0, r6
    d84c:	f01d f87f 	bl	2a94e <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    d850:	4604      	mov	r4, r0
    d852:	b188      	cbz	r0, d878 <at_handler+0x418>
    d854:	4a50      	ldr	r2, [pc, #320]	; (d998 <at_handler+0x538>)
    d856:	4b51      	ldr	r3, [pc, #324]	; (d99c <at_handler+0x53c>)
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
    d858:	4601      	mov	r1, r0
    d85a:	1ad2      	subs	r2, r2, r3
    d85c:	08d2      	lsrs	r2, r2, #3
    d85e:	0192      	lsls	r2, r2, #6
    d860:	4857      	ldr	r0, [pc, #348]	; (d9c0 <at_handler+0x560>)
    d862:	f042 0201 	orr.w	r2, r2, #1
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
				   tmp_buf, &len);
	if (err) {
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    d866:	f01b f916 	bl	28a96 <log_1>
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
    d86a:	a807      	add	r0, sp, #28
    d86c:	f01d f8c8 	bl	2aa00 <at_params_list_free>
		if (err) {
    d870:	2c00      	cmp	r4, #0
    d872:	d1c7      	bne.n	d804 <at_handler+0x3a4>
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    d874:	2302      	movs	r3, #2
    d876:	e75a      	b.n	d72e <at_handler+0x2ce>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
    d878:	2103      	movs	r1, #3
    d87a:	ab03      	add	r3, sp, #12
    d87c:	aa05      	add	r2, sp, #20
    d87e:	a807      	add	r0, sp, #28
    d880:	f01d f95d 	bl	2ab3e <at_params_string_get>
	if (err) {
    d884:	4604      	mov	r4, r0
    d886:	b148      	cbz	r0, d89c <at_handler+0x43c>
    d888:	4a43      	ldr	r2, [pc, #268]	; (d998 <at_handler+0x538>)
    d88a:	4b44      	ldr	r3, [pc, #272]	; (d99c <at_handler+0x53c>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    d88c:	4601      	mov	r1, r0
    d88e:	1ad2      	subs	r2, r2, r3
    d890:	08d2      	lsrs	r2, r2, #3
    d892:	0192      	lsls	r2, r2, #6
    d894:	484b      	ldr	r0, [pc, #300]	; (d9c4 <at_handler+0x564>)
    d896:	f042 0201 	orr.w	r2, r2, #1
    d89a:	e7e4      	b.n	d866 <at_handler+0x406>
	tmp_buf[len] = '\0';
    d89c:	9b03      	ldr	r3, [sp, #12]
    d89e:	aa0c      	add	r2, sp, #48	; 0x30
    d8a0:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
    d8a2:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    d8a4:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d8a8:	2202      	movs	r2, #2
    d8aa:	a805      	add	r0, sp, #20
    d8ac:	f015 fce2 	bl	23274 <strtoul>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    d8b0:	b2c0      	uxtb	r0, r0
    d8b2:	280f      	cmp	r0, #15
    d8b4:	d844      	bhi.n	d940 <at_handler+0x4e0>
	switch (sys_mode_current) {
    d8b6:	782b      	ldrb	r3, [r5, #0]
    d8b8:	3b01      	subs	r3, #1
    d8ba:	2b04      	cmp	r3, #4
    d8bc:	d828      	bhi.n	d910 <at_handler+0x4b0>
    d8be:	e8df f003 	tbb	[pc, r3]
    d8c2:	2503      	.short	0x2503
    d8c4:	0327      	.short	0x0327
    d8c6:	25          	.byte	0x25
    d8c7:	00          	.byte	0x00
		multiplier = edrx_lookup_ltem[idx];
    d8c8:	4b3f      	ldr	r3, [pc, #252]	; (d9c8 <at_handler+0x568>)
		multiplier = edrx_lookup_nbiot[idx];
    d8ca:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d8ce:	2800      	cmp	r0, #0
    d8d0:	d034      	beq.n	d93c <at_handler+0x4dc>
    d8d2:	f7fe fe07 	bl	c4e4 <__aeabi_i2d>
    d8d6:	a32e      	add	r3, pc, #184	; (adr r3, d990 <at_handler+0x530>)
    d8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    d8dc:	f7ff fa9e 	bl	ce1c <__aeabi_dmul>
    d8e0:	f7fe ff1a 	bl	c718 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
    d8e4:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d8e6:	900a      	str	r0, [sp, #40]	; 0x28
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d8e8:	ab03      	add	r3, sp, #12
    d8ea:	aa05      	add	r2, sp, #20
    d8ec:	a807      	add	r0, sp, #28
	len = sizeof(tmp_buf) - 1;
    d8ee:	9103      	str	r1, [sp, #12]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d8f0:	f01d f925 	bl	2ab3e <at_params_string_get>
	if (err) {
    d8f4:	4604      	mov	r4, r0
    d8f6:	b330      	cbz	r0, d946 <at_handler+0x4e6>
    d8f8:	4a27      	ldr	r2, [pc, #156]	; (d998 <at_handler+0x538>)
    d8fa:	4b28      	ldr	r3, [pc, #160]	; (d99c <at_handler+0x53c>)
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
    d8fc:	4601      	mov	r1, r0
    d8fe:	1ad2      	subs	r2, r2, r3
    d900:	08d2      	lsrs	r2, r2, #3
    d902:	0192      	lsls	r2, r2, #6
    d904:	4831      	ldr	r0, [pc, #196]	; (d9cc <at_handler+0x56c>)
    d906:	f042 0201 	orr.w	r2, r2, #1
    d90a:	e7ac      	b.n	d866 <at_handler+0x406>
		multiplier = edrx_lookup_nbiot[idx];
    d90c:	4b30      	ldr	r3, [pc, #192]	; (d9d0 <at_handler+0x570>)
    d90e:	e7dc      	b.n	d8ca <at_handler+0x46a>
    d910:	4b22      	ldr	r3, [pc, #136]	; (d99c <at_handler+0x53c>)
    d912:	4921      	ldr	r1, [pc, #132]	; (d998 <at_handler+0x538>)
		LOG_ERR("No LTE connection available in this system mode");
    d914:	4825      	ldr	r0, [pc, #148]	; (d9ac <at_handler+0x54c>)
    d916:	1ac9      	subs	r1, r1, r3
    d918:	08c9      	lsrs	r1, r1, #3
    d91a:	0189      	lsls	r1, r1, #6
    d91c:	f041 0101 	orr.w	r1, r1, #1
    d920:	f01b f8aa 	bl	28a78 <log_0>
		return -ENOTCONN;
    d924:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    d928:	4a1b      	ldr	r2, [pc, #108]	; (d998 <at_handler+0x538>)
    d92a:	4b1c      	ldr	r3, [pc, #112]	; (d99c <at_handler+0x53c>)
		LOG_ERR("Failed to get eDRX value, error; %d", err);
    d92c:	4621      	mov	r1, r4
    d92e:	1ad2      	subs	r2, r2, r3
    d930:	08d2      	lsrs	r2, r2, #3
    d932:	0192      	lsls	r2, r2, #6
    d934:	4827      	ldr	r0, [pc, #156]	; (d9d4 <at_handler+0x574>)
    d936:	f042 0201 	orr.w	r2, r2, #1
    d93a:	e794      	b.n	d866 <at_handler+0x406>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d93c:	4826      	ldr	r0, [pc, #152]	; (d9d8 <at_handler+0x578>)
    d93e:	e7d1      	b.n	d8e4 <at_handler+0x484>
		return -EINVAL;
    d940:	f06f 0415 	mvn.w	r4, #21
    d944:	e7f0      	b.n	d928 <at_handler+0x4c8>
	tmp_buf[len] = '\0';
    d946:	9b03      	ldr	r3, [sp, #12]
    d948:	aa0c      	add	r2, sp, #48	; 0x30
    d94a:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
    d94c:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    d94e:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d952:	2202      	movs	r2, #2
    d954:	a805      	add	r0, sp, #20
    d956:	f015 fc8d 	bl	23274 <strtoul>
	if (idx > 15) {
    d95a:	b2c1      	uxtb	r1, r0
    d95c:	290f      	cmp	r1, #15
    d95e:	d90c      	bls.n	d97a <at_handler+0x51a>
    d960:	4b0e      	ldr	r3, [pc, #56]	; (d99c <at_handler+0x53c>)
    d962:	4a0d      	ldr	r2, [pc, #52]	; (d998 <at_handler+0x538>)
		LOG_ERR("Invalid PTW lookup index: %d", idx);
    d964:	481d      	ldr	r0, [pc, #116]	; (d9dc <at_handler+0x57c>)
    d966:	1ad2      	subs	r2, r2, r3
    d968:	08d2      	lsrs	r2, r2, #3
    d96a:	0192      	lsls	r2, r2, #6
    d96c:	f042 0201 	orr.w	r2, r2, #1
    d970:	f01b f891 	bl	28a96 <log_1>
		err = -EINVAL;
    d974:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
    d978:	e777      	b.n	d86a <at_handler+0x40a>
	idx += 1;
    d97a:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
    d97c:	b2c0      	uxtb	r0, r0
    d97e:	ee07 0a90 	vmov	s15, r0
    d982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d986:	ee67 7a88 	vmul.f32	s15, s15, s16
    d98a:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
clean_exit:
    d98e:	e76c      	b.n	d86a <at_handler+0x40a>
    d990:	47ae147b 	.word	0x47ae147b
    d994:	40247ae1 	.word	0x40247ae1
    d998:	0002b800 	.word	0x0002b800
    d99c:	0002b7b8 	.word	0x0002b7b8
    d9a0:	0002d8f2 	.word	0x0002d8f2
    d9a4:	0002d91b 	.word	0x0002d91b
    d9a8:	2002500d 	.word	0x2002500d
    d9ac:	0002d95e 	.word	0x0002d95e
    d9b0:	0002da52 	.word	0x0002da52
    d9b4:	3fa3d70a 	.word	0x3fa3d70a
    d9b8:	0002d79e 	.word	0x0002d79e
    d9bc:	4023d70a 	.word	0x4023d70a
    d9c0:	0002d98e 	.word	0x0002d98e
    d9c4:	0002d9ba 	.word	0x0002d9ba
    d9c8:	0002c458 	.word	0x0002c458
    d9cc:	0002da0a 	.word	0x0002da0a
    d9d0:	0002c478 	.word	0x0002c478
    d9d4:	0002d9e6 	.word	0x0002d9e6
    d9d8:	40a3d70a 	.word	0x40a3d70a
    d9dc:	0002da35 	.word	0x0002da35

0000d9e0 <_strtod_l>:
    d9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9e4:	4c25      	ldr	r4, [pc, #148]	; (da7c <_strtod_l+0x9c>)
    d9e6:	460f      	mov	r7, r1
    d9e8:	2500      	movs	r5, #0
    d9ea:	4683      	mov	fp, r0
    d9ec:	6824      	ldr	r4, [r4, #0]
    d9ee:	ed2d 8b02 	vpush	{d8}
    d9f2:	b0a3      	sub	sp, #140	; 0x8c
    d9f4:	4620      	mov	r0, r4
    d9f6:	9408      	str	r4, [sp, #32]
    d9f8:	461c      	mov	r4, r3
    d9fa:	9207      	str	r2, [sp, #28]
    d9fc:	951e      	str	r5, [sp, #120]	; 0x78
    d9fe:	f015 f835 	bl	22a6c <strlen>
    da02:	2100      	movs	r1, #0
    da04:	2200      	movs	r2, #0
    da06:	463b      	mov	r3, r7
    da08:	4680      	mov	r8, r0
    da0a:	971d      	str	r7, [sp, #116]	; 0x74
    da0c:	e9cd 1204 	strd	r1, r2, [sp, #16]
    da10:	469a      	mov	sl, r3
    da12:	f813 6b01 	ldrb.w	r6, [r3], #1
    da16:	2e2d      	cmp	r6, #45	; 0x2d
    da18:	d832      	bhi.n	da80 <_strtod_l+0xa0>
    da1a:	e8df f016 	tbh	[pc, r6, lsl #1]
    da1e:	01e4      	.short	0x01e4
    da20:	00310031 	.word	0x00310031
    da24:	00310031 	.word	0x00310031
    da28:	00310031 	.word	0x00310031
    da2c:	00310031 	.word	0x00310031
    da30:	01f201f2 	.word	0x01f201f2
    da34:	01f201f2 	.word	0x01f201f2
    da38:	003101f2 	.word	0x003101f2
    da3c:	00310031 	.word	0x00310031
    da40:	00310031 	.word	0x00310031
    da44:	00310031 	.word	0x00310031
    da48:	00310031 	.word	0x00310031
    da4c:	00310031 	.word	0x00310031
    da50:	00310031 	.word	0x00310031
    da54:	00310031 	.word	0x00310031
    da58:	00310031 	.word	0x00310031
    da5c:	01f20031 	.word	0x01f20031
    da60:	00310031 	.word	0x00310031
    da64:	00310031 	.word	0x00310031
    da68:	00310031 	.word	0x00310031
    da6c:	00310031 	.word	0x00310031
    da70:	00310031 	.word	0x00310031
    da74:	00310423 	.word	0x00310423
    da78:	0417      	.short	0x0417
    da7a:	bf00      	nop
    da7c:	0002c3b4 	.word	0x0002c3b4
    da80:	2300      	movs	r3, #0
    da82:	930a      	str	r3, [sp, #40]	; 0x28
    da84:	2e30      	cmp	r6, #48	; 0x30
    da86:	f000 81d9 	beq.w	de3c <_strtod_l+0x45c>
    da8a:	2300      	movs	r3, #0
    da8c:	930b      	str	r3, [sp, #44]	; 0x2c
    da8e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    da92:	2b09      	cmp	r3, #9
    da94:	f200 8460 	bhi.w	e358 <_strtod_l+0x978>
    da98:	2500      	movs	r5, #0
    da9a:	4650      	mov	r0, sl
    da9c:	46a9      	mov	r9, r5
    da9e:	462c      	mov	r4, r5
    daa0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    daa4:	3001      	adds	r0, #1
    daa6:	eb09 0289 	add.w	r2, r9, r9, lsl #2
    daaa:	2c08      	cmp	r4, #8
    daac:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    dab0:	901d      	str	r0, [sp, #116]	; 0x74
    dab2:	eb06 0242 	add.w	r2, r6, r2, lsl #1
    dab6:	7806      	ldrb	r6, [r0, #0]
    dab8:	bfc8      	it	gt
    daba:	f1a3 0530 	subgt.w	r5, r3, #48	; 0x30
    dabe:	f104 0401 	add.w	r4, r4, #1
    dac2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    dac6:	bfd8      	it	le
    dac8:	f1a2 0930 	suble.w	r9, r2, #48	; 0x30
    dacc:	2b09      	cmp	r3, #9
    dace:	d9e7      	bls.n	daa0 <_strtod_l+0xc0>
    dad0:	9908      	ldr	r1, [sp, #32]
    dad2:	4642      	mov	r2, r8
    dad4:	f014 fff8 	bl	22ac8 <strncmp>
    dad8:	2800      	cmp	r0, #0
    dada:	f000 82a8 	beq.w	e02e <_strtod_l+0x64e>
    dade:	f026 0620 	bic.w	r6, r6, #32
    dae2:	2e45      	cmp	r6, #69	; 0x45
    dae4:	f000 81be 	beq.w	de64 <_strtod_l+0x484>
    dae8:	2300      	movs	r3, #0
    daea:	46a0      	mov	r8, r4
    daec:	930c      	str	r3, [sp, #48]	; 0x30
    daee:	9308      	str	r3, [sp, #32]
    daf0:	4648      	mov	r0, r9
    daf2:	4646      	mov	r6, r8
    daf4:	f7fe fce6 	bl	c4c4 <__aeabi_ui2d>
    daf8:	4602      	mov	r2, r0
    dafa:	460b      	mov	r3, r1
    dafc:	2c00      	cmp	r4, #0
    dafe:	bf08      	it	eq
    db00:	4644      	moveq	r4, r8
    db02:	2e10      	cmp	r6, #16
    db04:	e9cd 2304 	strd	r2, r3, [sp, #16]
    db08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    db0a:	bfa8      	it	ge
    db0c:	2610      	movge	r6, #16
    db0e:	9a08      	ldr	r2, [sp, #32]
    db10:	f1b8 0f09 	cmp.w	r8, #9
    db14:	eba3 0302 	sub.w	r3, r3, r2
    db18:	930e      	str	r3, [sp, #56]	; 0x38
    db1a:	dd13      	ble.n	db44 <_strtod_l+0x164>
    db1c:	4bc2      	ldr	r3, [pc, #776]	; (de28 <_strtod_l+0x448>)
    db1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    db22:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    db26:	f7ff f979 	bl	ce1c <__aeabi_dmul>
    db2a:	ec41 0b18 	vmov	d8, r0, r1
    db2e:	4628      	mov	r0, r5
    db30:	f7fe fcc8 	bl	c4c4 <__aeabi_ui2d>
    db34:	4602      	mov	r2, r0
    db36:	460b      	mov	r3, r1
    db38:	ec51 0b18 	vmov	r0, r1, d8
    db3c:	f7fe fb86 	bl	c24c <__adddf3>
    db40:	e9cd 0104 	strd	r0, r1, [sp, #16]
    db44:	f1b8 0f0f 	cmp.w	r8, #15
    db48:	f300 8200 	bgt.w	df4c <_strtod_l+0x56c>
    db4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    db4e:	2b00      	cmp	r3, #0
    db50:	f000 8449 	beq.w	e3e6 <_strtod_l+0xa06>
    db54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    db56:	f340 83c6 	ble.w	e2e6 <_strtod_l+0x906>
    db5a:	2b16      	cmp	r3, #22
    db5c:	f340 8567 	ble.w	e62e <_strtod_l+0xc4e>
    db60:	f1c8 0325 	rsb	r3, r8, #37	; 0x25
    db64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    db66:	4293      	cmp	r3, r2
    db68:	f280 85b5 	bge.w	e6d6 <_strtod_l+0xcf6>
    db6c:	eba8 0306 	sub.w	r3, r8, r6
    db70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    db72:	189d      	adds	r5, r3, r2
    db74:	f015 030f 	ands.w	r3, r5, #15
    db78:	d00a      	beq.n	db90 <_strtod_l+0x1b0>
    db7a:	49ab      	ldr	r1, [pc, #684]	; (de28 <_strtod_l+0x448>)
    db7c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    db80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    db84:	e9d1 0100 	ldrd	r0, r1, [r1]
    db88:	f7ff f948 	bl	ce1c <__aeabi_dmul>
    db8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    db90:	f035 030f 	bics.w	r3, r5, #15
    db94:	f040 8380 	bne.w	e298 <_strtod_l+0x8b8>
    db98:	2300      	movs	r3, #0
    db9a:	930b      	str	r3, [sp, #44]	; 0x2c
    db9c:	4643      	mov	r3, r8
    db9e:	4622      	mov	r2, r4
    dba0:	4651      	mov	r1, sl
    dba2:	4658      	mov	r0, fp
    dba4:	f8cd 9000 	str.w	r9, [sp]
    dba8:	f019 fa10 	bl	26fcc <__s2b>
    dbac:	9014      	str	r0, [sp, #80]	; 0x50
    dbae:	2800      	cmp	r0, #0
    dbb0:	f000 84ff 	beq.w	e5b2 <_strtod_l+0xbd2>
    dbb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    dbb6:	2600      	movs	r6, #0
    dbb8:	9b08      	ldr	r3, [sp, #32]
    dbba:	4637      	mov	r7, r6
    dbbc:	46b2      	mov	sl, r6
    dbbe:	1a9b      	subs	r3, r3, r2
    dbc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    dbc2:	2a00      	cmp	r2, #0
    dbc4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    dbc8:	bfa8      	it	ge
    dbca:	4633      	movge	r3, r6
    dbcc:	9211      	str	r2, [sp, #68]	; 0x44
    dbce:	930f      	str	r3, [sp, #60]	; 0x3c
    dbd0:	9c14      	ldr	r4, [sp, #80]	; 0x50
    dbd2:	4658      	mov	r0, fp
    dbd4:	6861      	ldr	r1, [r4, #4]
    dbd6:	f019 f973 	bl	26ec0 <_Balloc>
    dbda:	4681      	mov	r9, r0
    dbdc:	2800      	cmp	r0, #0
    dbde:	f000 8288 	beq.w	e0f2 <_strtod_l+0x712>
    dbe2:	6922      	ldr	r2, [r4, #16]
    dbe4:	f104 010c 	add.w	r1, r4, #12
    dbe8:	300c      	adds	r0, #12
    dbea:	3202      	adds	r2, #2
    dbec:	ed9d 7b04 	vldr	d7, [sp, #16]
    dbf0:	0092      	lsls	r2, r2, #2
    dbf2:	ed8d 7b08 	vstr	d7, [sp, #32]
    dbf6:	f7fe ffbd 	bl	cb74 <memcpy>
    dbfa:	aa20      	add	r2, sp, #128	; 0x80
    dbfc:	a91f      	add	r1, sp, #124	; 0x7c
    dbfe:	4658      	mov	r0, fp
    dc00:	ed9d 0b08 	vldr	d0, [sp, #32]
    dc04:	f019 fd6e 	bl	276e4 <__d2b>
    dc08:	901e      	str	r0, [sp, #120]	; 0x78
    dc0a:	2800      	cmp	r0, #0
    dc0c:	f000 8261 	beq.w	e0d2 <_strtod_l+0x6f2>
    dc10:	2101      	movs	r1, #1
    dc12:	4658      	mov	r0, fp
    dc14:	f019 fa86 	bl	27124 <__i2b>
    dc18:	4607      	mov	r7, r0
    dc1a:	2800      	cmp	r0, #0
    dc1c:	f000 8269 	beq.w	e0f2 <_strtod_l+0x712>
    dc20:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    dc22:	2b00      	cmp	r3, #0
    dc24:	f2c0 8258 	blt.w	e0d8 <_strtod_l+0x6f8>
    dc28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    dc2a:	9d11      	ldr	r5, [sp, #68]	; 0x44
    dc2c:	189e      	adds	r6, r3, r2
    dc2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    dc30:	9c20      	ldr	r4, [sp, #128]	; 0x80
    dc32:	1a9b      	subs	r3, r3, r2
    dc34:	4a7d      	ldr	r2, [pc, #500]	; (de2c <_strtod_l+0x44c>)
    dc36:	4423      	add	r3, r4
    dc38:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
    dc3c:	3b01      	subs	r3, #1
    dc3e:	4293      	cmp	r3, r2
    dc40:	f280 820c 	bge.w	e05c <_strtod_l+0x67c>
    dc44:	1ad2      	subs	r2, r2, r3
    dc46:	2a1f      	cmp	r2, #31
    dc48:	eba4 0402 	sub.w	r4, r4, r2
    dc4c:	f300 827c 	bgt.w	e148 <_strtod_l+0x768>
    dc50:	2301      	movs	r3, #1
    dc52:	2100      	movs	r1, #0
    dc54:	4093      	lsls	r3, r2
    dc56:	9115      	str	r1, [sp, #84]	; 0x54
    dc58:	930c      	str	r3, [sp, #48]	; 0x30
    dc5a:	4425      	add	r5, r4
    dc5c:	4434      	add	r4, r6
    dc5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dc60:	42a6      	cmp	r6, r4
    dc62:	441d      	add	r5, r3
    dc64:	4633      	mov	r3, r6
    dc66:	bfa8      	it	ge
    dc68:	4623      	movge	r3, r4
    dc6a:	42ab      	cmp	r3, r5
    dc6c:	bfa8      	it	ge
    dc6e:	462b      	movge	r3, r5
    dc70:	2b00      	cmp	r3, #0
    dc72:	dd02      	ble.n	dc7a <_strtod_l+0x29a>
    dc74:	1ae4      	subs	r4, r4, r3
    dc76:	1aed      	subs	r5, r5, r3
    dc78:	1af6      	subs	r6, r6, r3
    dc7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dc7c:	2b00      	cmp	r3, #0
    dc7e:	f300 8208 	bgt.w	e092 <_strtod_l+0x6b2>
    dc82:	2c00      	cmp	r4, #0
    dc84:	f300 821c 	bgt.w	e0c0 <_strtod_l+0x6e0>
    dc88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dc8a:	2b00      	cmp	r3, #0
    dc8c:	f300 8228 	bgt.w	e0e0 <_strtod_l+0x700>
    dc90:	2d00      	cmp	r5, #0
    dc92:	f300 824f 	bgt.w	e134 <_strtod_l+0x754>
    dc96:	2e00      	cmp	r6, #0
    dc98:	dd08      	ble.n	dcac <_strtod_l+0x2cc>
    dc9a:	4639      	mov	r1, r7
    dc9c:	4632      	mov	r2, r6
    dc9e:	4658      	mov	r0, fp
    dca0:	f019 fb52 	bl	27348 <__lshift>
    dca4:	4607      	mov	r7, r0
    dca6:	2800      	cmp	r0, #0
    dca8:	f000 8223 	beq.w	e0f2 <_strtod_l+0x712>
    dcac:	464a      	mov	r2, r9
    dcae:	991e      	ldr	r1, [sp, #120]	; 0x78
    dcb0:	4658      	mov	r0, fp
    dcb2:	f019 fbd9 	bl	27468 <__mdiff>
    dcb6:	4682      	mov	sl, r0
    dcb8:	2800      	cmp	r0, #0
    dcba:	f000 821a 	beq.w	e0f2 <_strtod_l+0x712>
    dcbe:	2300      	movs	r3, #0
    dcc0:	68c2      	ldr	r2, [r0, #12]
    dcc2:	4639      	mov	r1, r7
    dcc4:	60c3      	str	r3, [r0, #12]
    dcc6:	9210      	str	r2, [sp, #64]	; 0x40
    dcc8:	f019 fbb0 	bl	2742c <__mcmp>
    dccc:	2800      	cmp	r0, #0
    dcce:	f2c0 853c 	blt.w	e74a <_strtod_l+0xd6a>
    dcd2:	f000 84bf 	beq.w	e654 <_strtod_l+0xc74>
    dcd6:	4639      	mov	r1, r7
    dcd8:	4650      	mov	r0, sl
    dcda:	f019 fd6d 	bl	277b8 <__ratio>
    dcde:	2200      	movs	r2, #0
    dce0:	ee10 0a10 	vmov	r0, s0
    dce4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dce8:	ec55 4b10 	vmov	r4, r5, d0
    dcec:	4629      	mov	r1, r5
    dcee:	f7fe fccd 	bl	c68c <__aeabi_dcmple>
    dcf2:	2800      	cmp	r0, #0
    dcf4:	f000 81b7 	beq.w	e066 <_strtod_l+0x686>
    dcf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dcfa:	2b00      	cmp	r3, #0
    dcfc:	f000 822f 	beq.w	e15e <_strtod_l+0x77e>
    dd00:	2300      	movs	r3, #0
    dd02:	4c4b      	ldr	r4, [pc, #300]	; (de30 <_strtod_l+0x450>)
    dd04:	4d4a      	ldr	r5, [pc, #296]	; (de30 <_strtod_l+0x450>)
    dd06:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    dd0a:	9b05      	ldr	r3, [sp, #20]
    dd0c:	2400      	movs	r4, #0
    dd0e:	4698      	mov	r8, r3
    dd10:	4e48      	ldr	r6, [pc, #288]	; (de34 <_strtod_l+0x454>)
    dd12:	4b49      	ldr	r3, [pc, #292]	; (de38 <_strtod_l+0x458>)
    dd14:	ea08 0606 	and.w	r6, r8, r6
    dd18:	429e      	cmp	r6, r3
    dd1a:	f000 825f 	beq.w	e1dc <_strtod_l+0x7fc>
    dd1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dd20:	b323      	cbz	r3, dd6c <_strtod_l+0x38c>
    dd22:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
    dd26:	d821      	bhi.n	dd6c <_strtod_l+0x38c>
    dd28:	4620      	mov	r0, r4
    dd2a:	4629      	mov	r1, r5
    dd2c:	a33c      	add	r3, pc, #240	; (adr r3, de20 <_strtod_l+0x440>)
    dd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    dd32:	f7fe fcab 	bl	c68c <__aeabi_dcmple>
    dd36:	b1a0      	cbz	r0, dd62 <_strtod_l+0x382>
    dd38:	4629      	mov	r1, r5
    dd3a:	4620      	mov	r0, r4
    dd3c:	f7ff fa96 	bl	d26c <__aeabi_d2uiz>
    dd40:	2801      	cmp	r0, #1
    dd42:	bf38      	it	cc
    dd44:	2001      	movcc	r0, #1
    dd46:	f7fe fbbd 	bl	c4c4 <__aeabi_ui2d>
    dd4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dd4c:	4604      	mov	r4, r0
    dd4e:	460d      	mov	r5, r1
    dd50:	2b00      	cmp	r3, #0
    dd52:	f000 829c 	beq.w	e28e <_strtod_l+0x8ae>
    dd56:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
    dd5a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    dd5e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    dd62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dd64:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
    dd68:	1b9b      	subs	r3, r3, r6
    dd6a:	930d      	str	r3, [sp, #52]	; 0x34
    dd6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    dd70:	ed9d 0b08 	vldr	d0, [sp, #32]
    dd74:	e9cd 0104 	strd	r0, r1, [sp, #16]
    dd78:	f019 fc20 	bl	275bc <__ulp>
    dd7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    dd80:	ec53 2b10 	vmov	r2, r3, d0
    dd84:	f7ff f84a 	bl	ce1c <__aeabi_dmul>
    dd88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    dd8c:	f7fe fa5e 	bl	c24c <__adddf3>
    dd90:	4602      	mov	r2, r0
    dd92:	460b      	mov	r3, r1
    dd94:	4688      	mov	r8, r1
    dd96:	e9cd 2304 	strd	r2, r3, [sp, #16]
    dd9a:	4b26      	ldr	r3, [pc, #152]	; (de34 <_strtod_l+0x454>)
    dd9c:	ea08 0303 	and.w	r3, r8, r3
    dda0:	42b3      	cmp	r3, r6
    dda2:	d103      	bne.n	ddac <_strtod_l+0x3cc>
    dda4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dda6:	2b00      	cmp	r3, #0
    dda8:	f000 82af 	beq.w	e30a <_strtod_l+0x92a>
    ddac:	991e      	ldr	r1, [sp, #120]	; 0x78
    ddae:	4658      	mov	r0, fp
    ddb0:	f019 f8ac 	bl	26f0c <_Bfree>
    ddb4:	4649      	mov	r1, r9
    ddb6:	4658      	mov	r0, fp
    ddb8:	f019 f8a8 	bl	26f0c <_Bfree>
    ddbc:	4639      	mov	r1, r7
    ddbe:	4658      	mov	r0, fp
    ddc0:	f019 f8a4 	bl	26f0c <_Bfree>
    ddc4:	4651      	mov	r1, sl
    ddc6:	4658      	mov	r0, fp
    ddc8:	f019 f8a0 	bl	26f0c <_Bfree>
    ddcc:	e700      	b.n	dbd0 <_strtod_l+0x1f0>
    ddce:	f04f 0c01 	mov.w	ip, #1
    ddd2:	f026 0320 	bic.w	r3, r6, #32
    ddd6:	2b45      	cmp	r3, #69	; 0x45
    ddd8:	f040 80b2 	bne.w	df40 <_strtod_l+0x560>
    dddc:	ea44 0300 	orr.w	r3, r4, r0
    dde0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    dde2:	4313      	orrs	r3, r2
    dde4:	d142      	bne.n	de6c <_strtod_l+0x48c>
    dde6:	9b07      	ldr	r3, [sp, #28]
    dde8:	b16b      	cbz	r3, de06 <_strtod_l+0x426>
    ddea:	f04f 0800 	mov.w	r8, #0
    ddee:	f04f 0900 	mov.w	r9, #0
    ddf2:	601f      	str	r7, [r3, #0]
    ddf4:	ec49 8b10 	vmov	d0, r8, r9
    ddf8:	b023      	add	sp, #140	; 0x8c
    ddfa:	ecbd 8b02 	vpop	{d8}
    ddfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de02:	931d      	str	r3, [sp, #116]	; 0x74
    de04:	e604      	b.n	da10 <_strtod_l+0x30>
    de06:	f04f 0800 	mov.w	r8, #0
    de0a:	f04f 0900 	mov.w	r9, #0
    de0e:	ec49 8b10 	vmov	d0, r8, r9
    de12:	b023      	add	sp, #140	; 0x8c
    de14:	ecbd 8b02 	vpop	{d8}
    de18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de1c:	f3af 8000 	nop.w
    de20:	ffc00000 	.word	0xffc00000
    de24:	41dfffff 	.word	0x41dfffff
    de28:	0002b8f8 	.word	0x0002b8f8
    de2c:	fffffc02 	.word	0xfffffc02
    de30:	3ff00000 	.word	0x3ff00000
    de34:	7ff00000 	.word	0x7ff00000
    de38:	7fe00000 	.word	0x7fe00000
    de3c:	f89a 3001 	ldrb.w	r3, [sl, #1]
    de40:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    de44:	2b58      	cmp	r3, #88	; 0x58
    de46:	f000 82e3 	beq.w	e410 <_strtod_l+0xa30>
    de4a:	4653      	mov	r3, sl
    de4c:	3301      	adds	r3, #1
    de4e:	931d      	str	r3, [sp, #116]	; 0x74
    de50:	781e      	ldrb	r6, [r3, #0]
    de52:	2e30      	cmp	r6, #48	; 0x30
    de54:	d0fa      	beq.n	de4c <_strtod_l+0x46c>
    de56:	469a      	mov	sl, r3
    de58:	2e00      	cmp	r6, #0
    de5a:	f000 80d2 	beq.w	e002 <_strtod_l+0x622>
    de5e:	2301      	movs	r3, #1
    de60:	930b      	str	r3, [sp, #44]	; 0x2c
    de62:	e614      	b.n	da8e <_strtod_l+0xae>
    de64:	2000      	movs	r0, #0
    de66:	46a6      	mov	lr, r4
    de68:	4684      	mov	ip, r0
    de6a:	9008      	str	r0, [sp, #32]
    de6c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
    de6e:	1c7b      	adds	r3, r7, #1
    de70:	931d      	str	r3, [sp, #116]	; 0x74
    de72:	787e      	ldrb	r6, [r7, #1]
    de74:	2e2b      	cmp	r6, #43	; 0x2b
    de76:	f000 826c 	beq.w	e352 <_strtod_l+0x972>
    de7a:	2e2d      	cmp	r6, #45	; 0x2d
    de7c:	f000 8194 	beq.w	e1a8 <_strtod_l+0x7c8>
    de80:	f04f 0800 	mov.w	r8, #0
    de84:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    de88:	2b09      	cmp	r3, #9
    de8a:	f200 8193 	bhi.w	e1b4 <_strtod_l+0x7d4>
    de8e:	2e30      	cmp	r6, #48	; 0x30
    de90:	d105      	bne.n	de9e <_strtod_l+0x4be>
    de92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    de94:	3301      	adds	r3, #1
    de96:	931d      	str	r3, [sp, #116]	; 0x74
    de98:	781e      	ldrb	r6, [r3, #0]
    de9a:	2e30      	cmp	r6, #48	; 0x30
    de9c:	d0fa      	beq.n	de94 <_strtod_l+0x4b4>
    de9e:	f1a6 0331 	sub.w	r3, r6, #49	; 0x31
    dea2:	2b08      	cmp	r3, #8
    dea4:	d84c      	bhi.n	df40 <_strtod_l+0x560>
    dea6:	991d      	ldr	r1, [sp, #116]	; 0x74
    dea8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    deac:	1c4a      	adds	r2, r1, #1
    deae:	910c      	str	r1, [sp, #48]	; 0x30
    deb0:	921d      	str	r2, [sp, #116]	; 0x74
    deb2:	784e      	ldrb	r6, [r1, #1]
    deb4:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
    deb8:	2909      	cmp	r1, #9
    deba:	f200 8307 	bhi.w	e4cc <_strtod_l+0xaec>
    debe:	3201      	adds	r2, #1
    dec0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    dec4:	921d      	str	r2, [sp, #116]	; 0x74
    dec6:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    deca:	7816      	ldrb	r6, [r2, #0]
    decc:	3b30      	subs	r3, #48	; 0x30
    dece:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
    ded2:	2909      	cmp	r1, #9
    ded4:	d9f3      	bls.n	debe <_strtod_l+0x4de>
    ded6:	990c      	ldr	r1, [sp, #48]	; 0x30
    ded8:	1a52      	subs	r2, r2, r1
    deda:	2a08      	cmp	r2, #8
    dedc:	f340 82f6 	ble.w	e4cc <_strtod_l+0xaec>
    dee0:	f644 631f 	movw	r3, #19999	; 0x4e1f
    dee4:	930c      	str	r3, [sp, #48]	; 0x30
    dee6:	f1b8 0f00 	cmp.w	r8, #0
    deea:	d002      	beq.n	def2 <_strtod_l+0x512>
    deec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    deee:	425b      	negs	r3, r3
    def0:	930c      	str	r3, [sp, #48]	; 0x30
    def2:	2c00      	cmp	r4, #0
    def4:	f040 82d5 	bne.w	e4a2 <_strtod_l+0xac2>
    def8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    defa:	4303      	orrs	r3, r0
    defc:	f040 8081 	bne.w	e002 <_strtod_l+0x622>
    df00:	f1bc 0f00 	cmp.w	ip, #0
    df04:	f47f af6f 	bne.w	dde6 <_strtod_l+0x406>
    df08:	2e69      	cmp	r6, #105	; 0x69
    df0a:	f000 81d3 	beq.w	e2b4 <_strtod_l+0x8d4>
    df0e:	dc1a      	bgt.n	df46 <_strtod_l+0x566>
    df10:	2e49      	cmp	r6, #73	; 0x49
    df12:	f000 81cf 	beq.w	e2b4 <_strtod_l+0x8d4>
    df16:	2e4e      	cmp	r6, #78	; 0x4e
    df18:	f47f af65 	bne.w	dde6 <_strtod_l+0x406>
    df1c:	49a7      	ldr	r1, [pc, #668]	; (e1bc <_strtod_l+0x7dc>)
    df1e:	a81d      	add	r0, sp, #116	; 0x74
    df20:	f018 fd8e 	bl	26a40 <__match>
    df24:	2800      	cmp	r0, #0
    df26:	f43f af5e 	beq.w	dde6 <_strtod_l+0x406>
    df2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    df2c:	781b      	ldrb	r3, [r3, #0]
    df2e:	2b28      	cmp	r3, #40	; 0x28
    df30:	f000 83f8 	beq.w	e724 <_strtod_l+0xd44>
    df34:	48a2      	ldr	r0, [pc, #648]	; (e1c0 <_strtod_l+0x7e0>)
    df36:	f003 fa47 	bl	113c8 <nan>
    df3a:	ec59 8b10 	vmov	r8, r9, d0
    df3e:	e064      	b.n	e00a <_strtod_l+0x62a>
    df40:	2300      	movs	r3, #0
    df42:	930c      	str	r3, [sp, #48]	; 0x30
    df44:	e7d5      	b.n	def2 <_strtod_l+0x512>
    df46:	2e6e      	cmp	r6, #110	; 0x6e
    df48:	d0e8      	beq.n	df1c <_strtod_l+0x53c>
    df4a:	e74c      	b.n	dde6 <_strtod_l+0x406>
    df4c:	eba8 0306 	sub.w	r3, r8, r6
    df50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    df52:	189d      	adds	r5, r3, r2
    df54:	2d00      	cmp	r5, #0
    df56:	f73f ae0d 	bgt.w	db74 <_strtod_l+0x194>
    df5a:	f43f ae1d 	beq.w	db98 <_strtod_l+0x1b8>
    df5e:	426d      	negs	r5, r5
    df60:	f015 020f 	ands.w	r2, r5, #15
    df64:	d00a      	beq.n	df7c <_strtod_l+0x59c>
    df66:	4b97      	ldr	r3, [pc, #604]	; (e1c4 <_strtod_l+0x7e4>)
    df68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    df6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    df70:	e9d3 2300 	ldrd	r2, r3, [r3]
    df74:	f7ff f87c 	bl	d070 <__aeabi_ddiv>
    df78:	e9cd 0104 	strd	r0, r1, [sp, #16]
    df7c:	112d      	asrs	r5, r5, #4
    df7e:	f43f ae0b 	beq.w	db98 <_strtod_l+0x1b8>
    df82:	2d1f      	cmp	r5, #31
    df84:	dc3a      	bgt.n	dffc <_strtod_l+0x61c>
    df86:	f015 0310 	ands.w	r3, r5, #16
    df8a:	4e8f      	ldr	r6, [pc, #572]	; (e1c8 <_strtod_l+0x7e8>)
    df8c:	f04f 0700 	mov.w	r7, #0
    df90:	bf18      	it	ne
    df92:	236a      	movne	r3, #106	; 0x6a
    df94:	930b      	str	r3, [sp, #44]	; 0x2c
    df96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    df9a:	f015 0f01 	tst.w	r5, #1
    df9e:	4610      	mov	r0, r2
    dfa0:	4619      	mov	r1, r3
    dfa2:	d006      	beq.n	dfb2 <_strtod_l+0x5d2>
    dfa4:	2701      	movs	r7, #1
    dfa6:	e9d6 2300 	ldrd	r2, r3, [r6]
    dfaa:	f7fe ff37 	bl	ce1c <__aeabi_dmul>
    dfae:	4602      	mov	r2, r0
    dfb0:	460b      	mov	r3, r1
    dfb2:	106d      	asrs	r5, r5, #1
    dfb4:	f106 0608 	add.w	r6, r6, #8
    dfb8:	d1ef      	bne.n	df9a <_strtod_l+0x5ba>
    dfba:	b10f      	cbz	r7, dfc0 <_strtod_l+0x5e0>
    dfbc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    dfc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dfc2:	b193      	cbz	r3, dfea <_strtod_l+0x60a>
    dfc4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    dfc8:	f3c2 530a 	ubfx	r3, r2, #20, #11
    dfcc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    dfd0:	2b00      	cmp	r3, #0
    dfd2:	dd0a      	ble.n	dfea <_strtod_l+0x60a>
    dfd4:	2b1f      	cmp	r3, #31
    dfd6:	f340 8450 	ble.w	e87a <_strtod_l+0xe9a>
    dfda:	2100      	movs	r1, #0
    dfdc:	2b34      	cmp	r3, #52	; 0x34
    dfde:	9104      	str	r1, [sp, #16]
    dfe0:	f340 8457 	ble.w	e892 <_strtod_l+0xeb2>
    dfe4:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    dfe8:	9305      	str	r3, [sp, #20]
    dfea:	2200      	movs	r2, #0
    dfec:	2300      	movs	r3, #0
    dfee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    dff2:	f7fe fb37 	bl	c664 <__aeabi_dcmpeq>
    dff6:	2800      	cmp	r0, #0
    dff8:	f43f add0 	beq.w	db9c <_strtod_l+0x1bc>
    dffc:	2322      	movs	r3, #34	; 0x22
    dffe:	f8cb 3000 	str.w	r3, [fp]
    e002:	f04f 0800 	mov.w	r8, #0
    e006:	f04f 0900 	mov.w	r9, #0
    e00a:	9a07      	ldr	r2, [sp, #28]
    e00c:	b10a      	cbz	r2, e012 <_strtod_l+0x632>
    e00e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e010:	6013      	str	r3, [r2, #0]
    e012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e014:	2b00      	cmp	r3, #0
    e016:	f43f aeed 	beq.w	ddf4 <_strtod_l+0x414>
    e01a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
    e01e:	4699      	mov	r9, r3
    e020:	ec49 8b10 	vmov	d0, r8, r9
    e024:	b023      	add	sp, #140	; 0x8c
    e026:	ecbd 8b02 	vpop	{d8}
    e02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e02e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e030:	46a6      	mov	lr, r4
    e032:	9008      	str	r0, [sp, #32]
    e034:	eb03 0208 	add.w	r2, r3, r8
    e038:	921d      	str	r2, [sp, #116]	; 0x74
    e03a:	f813 6008 	ldrb.w	r6, [r3, r8]
    e03e:	f1a6 0230 	sub.w	r2, r6, #48	; 0x30
    e042:	2a09      	cmp	r2, #9
    e044:	f63f aec3 	bhi.w	ddce <_strtod_l+0x3ee>
    e048:	3001      	adds	r0, #1
    e04a:	4690      	mov	r8, r2
    e04c:	2a00      	cmp	r2, #0
    e04e:	f040 81fe 	bne.w	e44e <_strtod_l+0xa6e>
    e052:	991d      	ldr	r1, [sp, #116]	; 0x74
    e054:	1c4b      	adds	r3, r1, #1
    e056:	931d      	str	r3, [sp, #116]	; 0x74
    e058:	784e      	ldrb	r6, [r1, #1]
    e05a:	e7f0      	b.n	e03e <_strtod_l+0x65e>
    e05c:	2300      	movs	r3, #0
    e05e:	9315      	str	r3, [sp, #84]	; 0x54
    e060:	2301      	movs	r3, #1
    e062:	930c      	str	r3, [sp, #48]	; 0x30
    e064:	e5f9      	b.n	dc5a <_strtod_l+0x27a>
    e066:	4620      	mov	r0, r4
    e068:	4629      	mov	r1, r5
    e06a:	4b58      	ldr	r3, [pc, #352]	; (e1cc <_strtod_l+0x7ec>)
    e06c:	2200      	movs	r2, #0
    e06e:	f7fe fed5 	bl	ce1c <__aeabi_dmul>
    e072:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e074:	4604      	mov	r4, r0
    e076:	460d      	mov	r5, r1
    e078:	2b00      	cmp	r3, #0
    e07a:	d16d      	bne.n	e158 <_strtod_l+0x778>
    e07c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    e080:	9012      	str	r0, [sp, #72]	; 0x48
    e082:	9313      	str	r3, [sp, #76]	; 0x4c
    e084:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    e088:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    e08c:	9b05      	ldr	r3, [sp, #20]
    e08e:	4698      	mov	r8, r3
    e090:	e63e      	b.n	dd10 <_strtod_l+0x330>
    e092:	4639      	mov	r1, r7
    e094:	461a      	mov	r2, r3
    e096:	4658      	mov	r0, fp
    e098:	f019 f90a 	bl	272b0 <__pow5mult>
    e09c:	4607      	mov	r7, r0
    e09e:	b340      	cbz	r0, e0f2 <_strtod_l+0x712>
    e0a0:	4601      	mov	r1, r0
    e0a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    e0a4:	4658      	mov	r0, fp
    e0a6:	f019 f853 	bl	27150 <__multiply>
    e0aa:	b310      	cbz	r0, e0f2 <_strtod_l+0x712>
    e0ac:	9010      	str	r0, [sp, #64]	; 0x40
    e0ae:	4658      	mov	r0, fp
    e0b0:	991e      	ldr	r1, [sp, #120]	; 0x78
    e0b2:	f018 ff2b 	bl	26f0c <_Bfree>
    e0b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e0b8:	2c00      	cmp	r4, #0
    e0ba:	931e      	str	r3, [sp, #120]	; 0x78
    e0bc:	f77f ade4 	ble.w	dc88 <_strtod_l+0x2a8>
    e0c0:	4622      	mov	r2, r4
    e0c2:	991e      	ldr	r1, [sp, #120]	; 0x78
    e0c4:	4658      	mov	r0, fp
    e0c6:	f019 f93f 	bl	27348 <__lshift>
    e0ca:	901e      	str	r0, [sp, #120]	; 0x78
    e0cc:	2800      	cmp	r0, #0
    e0ce:	f47f addb 	bne.w	dc88 <_strtod_l+0x2a8>
    e0d2:	4656      	mov	r6, sl
    e0d4:	46ca      	mov	sl, r9
    e0d6:	e00f      	b.n	e0f8 <_strtod_l+0x718>
    e0d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e0da:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    e0dc:	1ad5      	subs	r5, r2, r3
    e0de:	e5a6      	b.n	dc2e <_strtod_l+0x24e>
    e0e0:	4649      	mov	r1, r9
    e0e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e0e4:	4658      	mov	r0, fp
    e0e6:	f019 f8e3 	bl	272b0 <__pow5mult>
    e0ea:	4681      	mov	r9, r0
    e0ec:	2800      	cmp	r0, #0
    e0ee:	f47f adcf 	bne.w	dc90 <_strtod_l+0x2b0>
    e0f2:	4656      	mov	r6, sl
    e0f4:	46ca      	mov	sl, r9
    e0f6:	981e      	ldr	r0, [sp, #120]	; 0x78
    e0f8:	4b35      	ldr	r3, [pc, #212]	; (e1d0 <_strtod_l+0x7f0>)
    e0fa:	2200      	movs	r2, #0
    e0fc:	9305      	str	r3, [sp, #20]
    e0fe:	2322      	movs	r3, #34	; 0x22
    e100:	9204      	str	r2, [sp, #16]
    e102:	f8cb 3000 	str.w	r3, [fp]
    e106:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e10a:	4601      	mov	r1, r0
    e10c:	4658      	mov	r0, fp
    e10e:	f018 fefd 	bl	26f0c <_Bfree>
    e112:	4651      	mov	r1, sl
    e114:	4658      	mov	r0, fp
    e116:	f018 fef9 	bl	26f0c <_Bfree>
    e11a:	4639      	mov	r1, r7
    e11c:	4658      	mov	r0, fp
    e11e:	f018 fef5 	bl	26f0c <_Bfree>
    e122:	9914      	ldr	r1, [sp, #80]	; 0x50
    e124:	4658      	mov	r0, fp
    e126:	f018 fef1 	bl	26f0c <_Bfree>
    e12a:	4631      	mov	r1, r6
    e12c:	4658      	mov	r0, fp
    e12e:	f018 feed 	bl	26f0c <_Bfree>
    e132:	e76a      	b.n	e00a <_strtod_l+0x62a>
    e134:	4649      	mov	r1, r9
    e136:	462a      	mov	r2, r5
    e138:	4658      	mov	r0, fp
    e13a:	f019 f905 	bl	27348 <__lshift>
    e13e:	4681      	mov	r9, r0
    e140:	2800      	cmp	r0, #0
    e142:	f47f ada8 	bne.w	dc96 <_strtod_l+0x2b6>
    e146:	e7d4      	b.n	e0f2 <_strtod_l+0x712>
    e148:	4922      	ldr	r1, [pc, #136]	; (e1d4 <_strtod_l+0x7f4>)
    e14a:	2201      	movs	r2, #1
    e14c:	1acb      	subs	r3, r1, r3
    e14e:	920c      	str	r2, [sp, #48]	; 0x30
    e150:	fa02 f303 	lsl.w	r3, r2, r3
    e154:	9315      	str	r3, [sp, #84]	; 0x54
    e156:	e580      	b.n	dc5a <_strtod_l+0x27a>
    e158:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    e15c:	e792      	b.n	e084 <_strtod_l+0x6a4>
    e15e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e162:	2900      	cmp	r1, #0
    e164:	f040 8081 	bne.w	e26a <_strtod_l+0x88a>
    e168:	f3c2 0313 	ubfx	r3, r2, #0, #20
    e16c:	4690      	mov	r8, r2
    e16e:	2b00      	cmp	r3, #0
    e170:	f040 8081 	bne.w	e276 <_strtod_l+0x896>
    e174:	2200      	movs	r2, #0
    e176:	4b18      	ldr	r3, [pc, #96]	; (e1d8 <_strtod_l+0x7f8>)
    e178:	4620      	mov	r0, r4
    e17a:	4629      	mov	r1, r5
    e17c:	f7fe fa7c 	bl	c678 <__aeabi_dcmplt>
    e180:	2800      	cmp	r0, #0
    e182:	f040 8260 	bne.w	e646 <_strtod_l+0xc66>
    e186:	4620      	mov	r0, r4
    e188:	4629      	mov	r1, r5
    e18a:	4b10      	ldr	r3, [pc, #64]	; (e1cc <_strtod_l+0x7ec>)
    e18c:	2200      	movs	r2, #0
    e18e:	f7fe fe45 	bl	ce1c <__aeabi_dmul>
    e192:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    e196:	4604      	mov	r4, r0
    e198:	460d      	mov	r5, r1
    e19a:	901a      	str	r0, [sp, #104]	; 0x68
    e19c:	931b      	str	r3, [sp, #108]	; 0x6c
    e19e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    e1a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    e1a6:	e5b3      	b.n	dd10 <_strtod_l+0x330>
    e1a8:	f04f 0801 	mov.w	r8, #1
    e1ac:	1cbb      	adds	r3, r7, #2
    e1ae:	931d      	str	r3, [sp, #116]	; 0x74
    e1b0:	78be      	ldrb	r6, [r7, #2]
    e1b2:	e667      	b.n	de84 <_strtod_l+0x4a4>
    e1b4:	2300      	movs	r3, #0
    e1b6:	971d      	str	r7, [sp, #116]	; 0x74
    e1b8:	930c      	str	r3, [sp, #48]	; 0x30
    e1ba:	e69a      	b.n	def2 <_strtod_l+0x512>
    e1bc:	0002c0b0 	.word	0x0002c0b0
    e1c0:	0002bf6c 	.word	0x0002bf6c
    e1c4:	0002b8f8 	.word	0x0002b8f8
    e1c8:	0002b8a8 	.word	0x0002b8a8
    e1cc:	3fe00000 	.word	0x3fe00000
    e1d0:	7ff00000 	.word	0x7ff00000
    e1d4:	fffffbe2 	.word	0xfffffbe2
    e1d8:	3ff00000 	.word	0x3ff00000
    e1dc:	f1a8 7354 	sub.w	r3, r8, #55574528	; 0x3500000
    e1e0:	9305      	str	r3, [sp, #20]
    e1e2:	ed9d 7b04 	vldr	d7, [sp, #16]
    e1e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    e1ea:	eeb0 8a47 	vmov.f32	s16, s14
    e1ee:	eef0 8a67 	vmov.f32	s17, s15
    e1f2:	eeb0 0a47 	vmov.f32	s0, s14
    e1f6:	eef0 0a67 	vmov.f32	s1, s15
    e1fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
    e1fe:	f019 f9dd 	bl	275bc <__ulp>
    e202:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e206:	ec53 2b10 	vmov	r2, r3, d0
    e20a:	f7fe fe07 	bl	ce1c <__aeabi_dmul>
    e20e:	ec53 2b18 	vmov	r2, r3, d8
    e212:	f7fe f81b 	bl	c24c <__adddf3>
    e216:	460a      	mov	r2, r1
    e218:	4bb7      	ldr	r3, [pc, #732]	; (e4f8 <_strtod_l+0xb18>)
    e21a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    e21e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    e222:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    e226:	49b5      	ldr	r1, [pc, #724]	; (e4fc <_strtod_l+0xb1c>)
    e228:	4011      	ands	r1, r2
    e22a:	4299      	cmp	r1, r3
    e22c:	d92a      	bls.n	e284 <_strtod_l+0x8a4>
    e22e:	4ab4      	ldr	r2, [pc, #720]	; (e500 <_strtod_l+0xb20>)
    e230:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    e234:	4291      	cmp	r1, r2
    e236:	d103      	bne.n	e240 <_strtod_l+0x860>
    e238:	f1b0 3fff 	cmp.w	r0, #4294967295
    e23c:	f43f af59 	beq.w	e0f2 <_strtod_l+0x712>
    e240:	f04f 33ff 	mov.w	r3, #4294967295
    e244:	49ae      	ldr	r1, [pc, #696]	; (e500 <_strtod_l+0xb20>)
    e246:	e9cd 3104 	strd	r3, r1, [sp, #16]
    e24a:	e5af      	b.n	ddac <_strtod_l+0x3cc>
    e24c:	2301      	movs	r3, #1
    e24e:	930a      	str	r3, [sp, #40]	; 0x28
    e250:	f10a 0301 	add.w	r3, sl, #1
    e254:	931d      	str	r3, [sp, #116]	; 0x74
    e256:	f89a 6001 	ldrb.w	r6, [sl, #1]
    e25a:	2e00      	cmp	r6, #0
    e25c:	f43f adc3 	beq.w	dde6 <_strtod_l+0x406>
    e260:	469a      	mov	sl, r3
    e262:	e40f      	b.n	da84 <_strtod_l+0xa4>
    e264:	2300      	movs	r3, #0
    e266:	930a      	str	r3, [sp, #40]	; 0x28
    e268:	e7f2      	b.n	e250 <_strtod_l+0x870>
    e26a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e26e:	2901      	cmp	r1, #1
    e270:	f000 811b 	beq.w	e4aa <_strtod_l+0xaca>
    e274:	4690      	mov	r8, r2
    e276:	4ca3      	ldr	r4, [pc, #652]	; (e504 <_strtod_l+0xb24>)
    e278:	2300      	movs	r3, #0
    e27a:	4da3      	ldr	r5, [pc, #652]	; (e508 <_strtod_l+0xb28>)
    e27c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    e280:	2400      	movs	r4, #0
    e282:	e545      	b.n	dd10 <_strtod_l+0x330>
    e284:	f102 7854 	add.w	r8, r2, #55574528	; 0x3500000
    e288:	f8cd 8014 	str.w	r8, [sp, #20]
    e28c:	e585      	b.n	dd9a <_strtod_l+0x3ba>
    e28e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    e292:	9016      	str	r0, [sp, #88]	; 0x58
    e294:	9317      	str	r3, [sp, #92]	; 0x5c
    e296:	e560      	b.n	dd5a <_strtod_l+0x37a>
    e298:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
    e29c:	f340 813e 	ble.w	e51c <_strtod_l+0xb3c>
    e2a0:	4b96      	ldr	r3, [pc, #600]	; (e4fc <_strtod_l+0xb1c>)
    e2a2:	2200      	movs	r2, #0
    e2a4:	9305      	str	r3, [sp, #20]
    e2a6:	2322      	movs	r3, #34	; 0x22
    e2a8:	9204      	str	r2, [sp, #16]
    e2aa:	f8cb 3000 	str.w	r3, [fp]
    e2ae:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e2b2:	e6aa      	b.n	e00a <_strtod_l+0x62a>
    e2b4:	4995      	ldr	r1, [pc, #596]	; (e50c <_strtod_l+0xb2c>)
    e2b6:	a81d      	add	r0, sp, #116	; 0x74
    e2b8:	f018 fbc2 	bl	26a40 <__match>
    e2bc:	2800      	cmp	r0, #0
    e2be:	f43f ad92 	beq.w	dde6 <_strtod_l+0x406>
    e2c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e2c4:	a81d      	add	r0, sp, #116	; 0x74
    e2c6:	4992      	ldr	r1, [pc, #584]	; (e510 <_strtod_l+0xb30>)
    e2c8:	3b01      	subs	r3, #1
    e2ca:	931d      	str	r3, [sp, #116]	; 0x74
    e2cc:	f018 fbb8 	bl	26a40 <__match>
    e2d0:	b910      	cbnz	r0, e2d8 <_strtod_l+0x8f8>
    e2d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e2d4:	3301      	adds	r3, #1
    e2d6:	931d      	str	r3, [sp, #116]	; 0x74
    e2d8:	2300      	movs	r3, #0
    e2da:	4888      	ldr	r0, [pc, #544]	; (e4fc <_strtod_l+0xb1c>)
    e2dc:	e9cd 3004 	strd	r3, r0, [sp, #16]
    e2e0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e2e4:	e691      	b.n	e00a <_strtod_l+0x62a>
    e2e6:	3316      	adds	r3, #22
    e2e8:	f6ff ae30 	blt.w	df4c <_strtod_l+0x56c>
    e2ec:	9b08      	ldr	r3, [sp, #32]
    e2ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e2f0:	1a9a      	subs	r2, r3, r2
    e2f2:	4b88      	ldr	r3, [pc, #544]	; (e514 <_strtod_l+0xb34>)
    e2f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    e2f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    e300:	f7fe feb6 	bl	d070 <__aeabi_ddiv>
    e304:	4680      	mov	r8, r0
    e306:	4689      	mov	r9, r1
    e308:	e67f      	b.n	e00a <_strtod_l+0x62a>
    e30a:	4620      	mov	r0, r4
    e30c:	4629      	mov	r1, r5
    e30e:	f7fe ffcd 	bl	d2ac <__aeabi_d2lz>
    e312:	f7fe f923 	bl	c55c <__aeabi_l2d>
    e316:	460b      	mov	r3, r1
    e318:	4602      	mov	r2, r0
    e31a:	4629      	mov	r1, r5
    e31c:	4620      	mov	r0, r4
    e31e:	f7fd ff93 	bl	c248 <__aeabi_dsub>
    e322:	9c04      	ldr	r4, [sp, #16]
    e324:	9e10      	ldr	r6, [sp, #64]	; 0x40
    e326:	f3c8 0c13 	ubfx	ip, r8, #0, #20
    e32a:	460d      	mov	r5, r1
    e32c:	4326      	orrs	r6, r4
    e32e:	4604      	mov	r4, r0
    e330:	ea56 030c 	orrs.w	r3, r6, ip
    e334:	d15a      	bne.n	e3ec <_strtod_l+0xa0c>
    e336:	a36a      	add	r3, pc, #424	; (adr r3, e4e0 <_strtod_l+0xb00>)
    e338:	e9d3 2300 	ldrd	r2, r3, [r3]
    e33c:	f7fe f99c 	bl	c678 <__aeabi_dcmplt>
    e340:	2800      	cmp	r0, #0
    e342:	f43f ad33 	beq.w	ddac <_strtod_l+0x3cc>
    e346:	4656      	mov	r6, sl
    e348:	981e      	ldr	r0, [sp, #120]	; 0x78
    e34a:	46ca      	mov	sl, r9
    e34c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e350:	e6db      	b.n	e10a <_strtod_l+0x72a>
    e352:	f04f 0800 	mov.w	r8, #0
    e356:	e729      	b.n	e1ac <_strtod_l+0x7cc>
    e358:	9908      	ldr	r1, [sp, #32]
    e35a:	4642      	mov	r2, r8
    e35c:	4650      	mov	r0, sl
    e35e:	f014 fbb3 	bl	22ac8 <strncmp>
    e362:	4686      	mov	lr, r0
    e364:	2800      	cmp	r0, #0
    e366:	f040 82ab 	bne.w	e8c0 <_strtod_l+0xee0>
    e36a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    e36c:	eb02 0308 	add.w	r3, r2, r8
    e370:	931d      	str	r3, [sp, #116]	; 0x74
    e372:	f812 6008 	ldrb.w	r6, [r2, r8]
    e376:	2e30      	cmp	r6, #48	; 0x30
    e378:	f040 8157 	bne.w	e62a <_strtod_l+0xc4a>
    e37c:	f1c3 0201 	rsb	r2, r3, #1
    e380:	1898      	adds	r0, r3, r2
    e382:	3301      	adds	r3, #1
    e384:	931d      	str	r3, [sp, #116]	; 0x74
    e386:	781e      	ldrb	r6, [r3, #0]
    e388:	2e30      	cmp	r6, #48	; 0x30
    e38a:	d0f9      	beq.n	e380 <_strtod_l+0x9a0>
    e38c:	f1a6 0331 	sub.w	r3, r6, #49	; 0x31
    e390:	2b08      	cmp	r3, #8
    e392:	d80f      	bhi.n	e3b4 <_strtod_l+0x9d4>
    e394:	991d      	ldr	r1, [sp, #116]	; 0x74
    e396:	f04f 0900 	mov.w	r9, #0
    e39a:	1c43      	adds	r3, r0, #1
    e39c:	f1a6 0830 	sub.w	r8, r6, #48	; 0x30
    e3a0:	468a      	mov	sl, r1
    e3a2:	464d      	mov	r5, r9
    e3a4:	2401      	movs	r4, #1
    e3a6:	9308      	str	r3, [sp, #32]
    e3a8:	eb09 0989 	add.w	r9, r9, r9, lsl #2
    e3ac:	2000      	movs	r0, #0
    e3ae:	eb08 0949 	add.w	r9, r8, r9, lsl #1
    e3b2:	e64f      	b.n	e054 <_strtod_l+0x674>
    e3b4:	2300      	movs	r3, #0
    e3b6:	f04f 0c01 	mov.w	ip, #1
    e3ba:	461c      	mov	r4, r3
    e3bc:	4699      	mov	r9, r3
    e3be:	461d      	mov	r5, r3
    e3c0:	9308      	str	r3, [sp, #32]
    e3c2:	e506      	b.n	ddd2 <_strtod_l+0x3f2>
    e3c4:	e9dd 1320 	ldrd	r1, r3, [sp, #128]	; 0x80
    e3c8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    e3ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    e3ce:	9104      	str	r1, [sp, #16]
    e3d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
    e3d4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    e3d8:	9305      	str	r3, [sp, #20]
    e3da:	0724      	lsls	r4, r4, #28
    e3dc:	d503      	bpl.n	e3e6 <_strtod_l+0xa06>
    e3de:	9b05      	ldr	r3, [sp, #20]
    e3e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e3e4:	9305      	str	r3, [sp, #20]
    e3e6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e3ea:	e60e      	b.n	e00a <_strtod_l+0x62a>
    e3ec:	a33e      	add	r3, pc, #248	; (adr r3, e4e8 <_strtod_l+0xb08>)
    e3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3f2:	f7fe f941 	bl	c678 <__aeabi_dcmplt>
    e3f6:	2800      	cmp	r0, #0
    e3f8:	d1a5      	bne.n	e346 <_strtod_l+0x966>
    e3fa:	4620      	mov	r0, r4
    e3fc:	4629      	mov	r1, r5
    e3fe:	a33c      	add	r3, pc, #240	; (adr r3, e4f0 <_strtod_l+0xb10>)
    e400:	e9d3 2300 	ldrd	r2, r3, [r3]
    e404:	f7fe f956 	bl	c6b4 <__aeabi_dcmpgt>
    e408:	2800      	cmp	r0, #0
    e40a:	f43f accf 	beq.w	ddac <_strtod_l+0x3cc>
    e40e:	e79a      	b.n	e346 <_strtod_l+0x966>
    e410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e412:	aa1e      	add	r2, sp, #120	; 0x78
    e414:	9402      	str	r4, [sp, #8]
    e416:	a91d      	add	r1, sp, #116	; 0x74
    e418:	9301      	str	r3, [sp, #4]
    e41a:	4658      	mov	r0, fp
    e41c:	9200      	str	r2, [sp, #0]
    e41e:	ab1f      	add	r3, sp, #124	; 0x7c
    e420:	4a3d      	ldr	r2, [pc, #244]	; (e518 <_strtod_l+0xb38>)
    e422:	f018 f84f 	bl	264c4 <__gethex>
    e426:	f010 0507 	ands.w	r5, r0, #7
    e42a:	4604      	mov	r4, r0
    e42c:	f43f ade9 	beq.w	e002 <_strtod_l+0x622>
    e430:	2d06      	cmp	r5, #6
    e432:	f040 80c8 	bne.w	e5c6 <_strtod_l+0xbe6>
    e436:	9a07      	ldr	r2, [sp, #28]
    e438:	f10a 0301 	add.w	r3, sl, #1
    e43c:	2a00      	cmp	r2, #0
    e43e:	f43f ace2 	beq.w	de06 <_strtod_l+0x426>
    e442:	f04f 0800 	mov.w	r8, #0
    e446:	f04f 0900 	mov.w	r9, #0
    e44a:	6013      	str	r3, [r2, #0]
    e44c:	e4d2      	b.n	ddf4 <_strtod_l+0x414>
    e44e:	9b08      	ldr	r3, [sp, #32]
    e450:	2801      	cmp	r0, #1
    e452:	991d      	ldr	r1, [sp, #116]	; 0x74
    e454:	f104 0601 	add.w	r6, r4, #1
    e458:	4403      	add	r3, r0
    e45a:	9308      	str	r3, [sp, #32]
    e45c:	f000 822d 	beq.w	e8ba <_strtod_l+0xeda>
    e460:	4420      	add	r0, r4
    e462:	f100 3cff 	add.w	ip, r0, #4294967295
    e466:	e004      	b.n	e472 <_strtod_l+0xa92>
    e468:	ea4f 0946 	mov.w	r9, r6, lsl #1
    e46c:	4563      	cmp	r3, ip
    e46e:	461c      	mov	r4, r3
    e470:	d00b      	beq.n	e48a <_strtod_l+0xaaa>
    e472:	2c08      	cmp	r4, #8
    e474:	f104 0301 	add.w	r3, r4, #1
    e478:	eb09 0689 	add.w	r6, r9, r9, lsl #2
    e47c:	ddf4      	ble.n	e468 <_strtod_l+0xa88>
    e47e:	eb05 0485 	add.w	r4, r5, r5, lsl #2
    e482:	2b10      	cmp	r3, #16
    e484:	bfd8      	it	le
    e486:	0065      	lslle	r5, r4, #1
    e488:	e7f0      	b.n	e46c <_strtod_l+0xa8c>
    e48a:	4604      	mov	r4, r0
    e48c:	2b08      	cmp	r3, #8
    e48e:	dd8b      	ble.n	e3a8 <_strtod_l+0x9c8>
    e490:	2c10      	cmp	r4, #16
    e492:	f300 8137 	bgt.w	e704 <_strtod_l+0xd24>
    e496:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    e49a:	2000      	movs	r0, #0
    e49c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
    e4a0:	e5d8      	b.n	e054 <_strtod_l+0x674>
    e4a2:	46a0      	mov	r8, r4
    e4a4:	4674      	mov	r4, lr
    e4a6:	f7ff bb23 	b.w	daf0 <_strtod_l+0x110>
    e4aa:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e4ae:	4690      	mov	r8, r2
    e4b0:	2a00      	cmp	r2, #0
    e4b2:	f47f aee0 	bne.w	e276 <_strtod_l+0x896>
    e4b6:	4656      	mov	r6, sl
    e4b8:	46ca      	mov	sl, r9
    e4ba:	2322      	movs	r3, #34	; 0x22
    e4bc:	981e      	ldr	r0, [sp, #120]	; 0x78
    e4be:	f04f 0800 	mov.w	r8, #0
    e4c2:	f04f 0900 	mov.w	r9, #0
    e4c6:	f8cb 3000 	str.w	r3, [fp]
    e4ca:	e61e      	b.n	e10a <_strtod_l+0x72a>
    e4cc:	f644 621f 	movw	r2, #19999	; 0x4e1f
    e4d0:	4293      	cmp	r3, r2
    e4d2:	bfa8      	it	ge
    e4d4:	4613      	movge	r3, r2
    e4d6:	930c      	str	r3, [sp, #48]	; 0x30
    e4d8:	e505      	b.n	dee6 <_strtod_l+0x506>
    e4da:	bf00      	nop
    e4dc:	f3af 8000 	nop.w
    e4e0:	94a03595 	.word	0x94a03595
    e4e4:	3fcfffff 	.word	0x3fcfffff
    e4e8:	94a03595 	.word	0x94a03595
    e4ec:	3fdfffff 	.word	0x3fdfffff
    e4f0:	35afe535 	.word	0x35afe535
    e4f4:	3fe00000 	.word	0x3fe00000
    e4f8:	7c9fffff 	.word	0x7c9fffff
    e4fc:	7ff00000 	.word	0x7ff00000
    e500:	7fefffff 	.word	0x7fefffff
    e504:	bff00000 	.word	0xbff00000
    e508:	3ff00000 	.word	0x3ff00000
    e50c:	0002c0a4 	.word	0x0002c0a4
    e510:	0002c0a8 	.word	0x0002c0a8
    e514:	0002b8f8 	.word	0x0002b8f8
    e518:	0002c0b4 	.word	0x0002c0b4
    e51c:	2b10      	cmp	r3, #16
    e51e:	ea4f 1523 	mov.w	r5, r3, asr #4
    e522:	f340 8159 	ble.w	e7d8 <_strtod_l+0xdf8>
    e526:	4bb0      	ldr	r3, [pc, #704]	; (e7e8 <_strtod_l+0xe08>)
    e528:	f04f 0c00 	mov.w	ip, #0
    e52c:	461e      	mov	r6, r3
    e52e:	930b      	str	r3, [sp, #44]	; 0x2c
    e530:	4667      	mov	r7, ip
    e532:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e536:	f015 0f01 	tst.w	r5, #1
    e53a:	4610      	mov	r0, r2
    e53c:	4619      	mov	r1, r3
    e53e:	ea4f 0565 	mov.w	r5, r5, asr #1
    e542:	f107 0701 	add.w	r7, r7, #1
    e546:	d007      	beq.n	e558 <_strtod_l+0xb78>
    e548:	e9d6 2300 	ldrd	r2, r3, [r6]
    e54c:	f7fe fc66 	bl	ce1c <__aeabi_dmul>
    e550:	f04f 0c01 	mov.w	ip, #1
    e554:	4602      	mov	r2, r0
    e556:	460b      	mov	r3, r1
    e558:	2d01      	cmp	r5, #1
    e55a:	f106 0608 	add.w	r6, r6, #8
    e55e:	d1ea      	bne.n	e536 <_strtod_l+0xb56>
    e560:	f1bc 0f00 	cmp.w	ip, #0
    e564:	d001      	beq.n	e56a <_strtod_l+0xb8a>
    e566:	e9cd 2304 	strd	r2, r3, [sp, #16]
    e56a:	9b05      	ldr	r3, [sp, #20]
    e56c:	4d9f      	ldr	r5, [pc, #636]	; (e7ec <_strtod_l+0xe0c>)
    e56e:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    e572:	4e9f      	ldr	r6, [pc, #636]	; (e7f0 <_strtod_l+0xe10>)
    e574:	9305      	str	r3, [sp, #20]
    e576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e578:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
    e57c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e580:	e9d7 0100 	ldrd	r0, r1, [r7]
    e584:	f7fe fc4a 	bl	ce1c <__aeabi_dmul>
    e588:	ea01 0305 	and.w	r3, r1, r5
    e58c:	460a      	mov	r2, r1
    e58e:	42b3      	cmp	r3, r6
    e590:	e9cd 0104 	strd	r0, r1, [sp, #16]
    e594:	f200 80bf 	bhi.w	e716 <_strtod_l+0xd36>
    e598:	4996      	ldr	r1, [pc, #600]	; (e7f4 <_strtod_l+0xe14>)
    e59a:	428b      	cmp	r3, r1
    e59c:	f240 80b4 	bls.w	e708 <_strtod_l+0xd28>
    e5a0:	4b95      	ldr	r3, [pc, #596]	; (e7f8 <_strtod_l+0xe18>)
    e5a2:	9305      	str	r3, [sp, #20]
    e5a4:	2300      	movs	r3, #0
    e5a6:	930b      	str	r3, [sp, #44]	; 0x2c
    e5a8:	f04f 33ff 	mov.w	r3, #4294967295
    e5ac:	9304      	str	r3, [sp, #16]
    e5ae:	f7ff baf5 	b.w	db9c <_strtod_l+0x1bc>
    e5b2:	4b8e      	ldr	r3, [pc, #568]	; (e7ec <_strtod_l+0xe0c>)
    e5b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e5b6:	9305      	str	r3, [sp, #20]
    e5b8:	2322      	movs	r3, #34	; 0x22
    e5ba:	9204      	str	r2, [sp, #16]
    e5bc:	f8cb 3000 	str.w	r3, [fp]
    e5c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e5c4:	e521      	b.n	e00a <_strtod_l+0x62a>
    e5c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    e5c8:	b13a      	cbz	r2, e5da <_strtod_l+0xbfa>
    e5ca:	2135      	movs	r1, #53	; 0x35
    e5cc:	a820      	add	r0, sp, #128	; 0x80
    e5ce:	f019 f923 	bl	27818 <__copybits>
    e5d2:	4658      	mov	r0, fp
    e5d4:	991e      	ldr	r1, [sp, #120]	; 0x78
    e5d6:	f018 fc99 	bl	26f0c <_Bfree>
    e5da:	3d01      	subs	r5, #1
    e5dc:	2d05      	cmp	r5, #5
    e5de:	f63f aefc 	bhi.w	e3da <_strtod_l+0x9fa>
    e5e2:	a301      	add	r3, pc, #4	; (adr r3, e5e8 <_strtod_l+0xc08>)
    e5e4:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    e5e8:	0000e3c5 	.word	0x0000e3c5
    e5ec:	0000e621 	.word	0x0000e621
    e5f0:	0000e617 	.word	0x0000e617
    e5f4:	0000e609 	.word	0x0000e609
    e5f8:	0000e3c5 	.word	0x0000e3c5
    e5fc:	0000e601 	.word	0x0000e601
    e600:	2300      	movs	r3, #0
    e602:	e9cd 3304 	strd	r3, r3, [sp, #16]
    e606:	e6e8      	b.n	e3da <_strtod_l+0x9fa>
    e608:	f04f 33ff 	mov.w	r3, #4294967295
    e60c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    e610:	e9cd 3504 	strd	r3, r5, [sp, #16]
    e614:	e6e1      	b.n	e3da <_strtod_l+0x9fa>
    e616:	2300      	movs	r3, #0
    e618:	4e74      	ldr	r6, [pc, #464]	; (e7ec <_strtod_l+0xe0c>)
    e61a:	e9cd 3604 	strd	r3, r6, [sp, #16]
    e61e:	e6dc      	b.n	e3da <_strtod_l+0x9fa>
    e620:	9b20      	ldr	r3, [sp, #128]	; 0x80
    e622:	9304      	str	r3, [sp, #16]
    e624:	9b21      	ldr	r3, [sp, #132]	; 0x84
    e626:	9305      	str	r3, [sp, #20]
    e628:	e6d7      	b.n	e3da <_strtod_l+0x9fa>
    e62a:	4670      	mov	r0, lr
    e62c:	e6ae      	b.n	e38c <_strtod_l+0x9ac>
    e62e:	4973      	ldr	r1, [pc, #460]	; (e7fc <_strtod_l+0xe1c>)
    e630:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    e634:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e638:	e9d1 0100 	ldrd	r0, r1, [r1]
    e63c:	f7fe fbee 	bl	ce1c <__aeabi_dmul>
    e640:	4680      	mov	r8, r0
    e642:	4689      	mov	r9, r1
    e644:	e4e1      	b.n	e00a <_strtod_l+0x62a>
    e646:	ed9f 7b66 	vldr	d7, [pc, #408]	; e7e0 <_strtod_l+0xe00>
    e64a:	2400      	movs	r4, #0
    e64c:	4d6c      	ldr	r5, [pc, #432]	; (e800 <_strtod_l+0xe20>)
    e64e:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
    e652:	e5a4      	b.n	e19e <_strtod_l+0x7be>
    e654:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e656:	4656      	mov	r6, sl
    e658:	46ca      	mov	sl, r9
    e65a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    e65e:	2b00      	cmp	r3, #0
    e660:	f000 80ab 	beq.w	e7ba <_strtod_l+0xdda>
    e664:	4b67      	ldr	r3, [pc, #412]	; (e804 <_strtod_l+0xe24>)
    e666:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    e66a:	f3c5 0113 	ubfx	r1, r5, #0, #20
    e66e:	462a      	mov	r2, r5
    e670:	4299      	cmp	r1, r3
    e672:	f000 80cd 	beq.w	e810 <_strtod_l+0xe30>
    e676:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e678:	2b00      	cmp	r3, #0
    e67a:	f000 80a7 	beq.w	e7cc <_strtod_l+0xdec>
    e67e:	9a05      	ldr	r2, [sp, #20]
    e680:	4213      	tst	r3, r2
    e682:	d010      	beq.n	e6a6 <_strtod_l+0xcc6>
    e684:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e686:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e688:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e68c:	2b00      	cmp	r3, #0
    e68e:	f000 80e2 	beq.w	e856 <_strtod_l+0xe76>
    e692:	f014 fca1 	bl	22fd8 <sulp>
    e696:	4602      	mov	r2, r0
    e698:	460b      	mov	r3, r1
    e69a:	4640      	mov	r0, r8
    e69c:	4649      	mov	r1, r9
    e69e:	f7fd fdd5 	bl	c24c <__adddf3>
    e6a2:	4680      	mov	r8, r0
    e6a4:	4689      	mov	r9, r1
    e6a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e6a8:	b19b      	cbz	r3, e6d2 <_strtod_l+0xcf2>
    e6aa:	2300      	movs	r3, #0
    e6ac:	4a56      	ldr	r2, [pc, #344]	; (e808 <_strtod_l+0xe28>)
    e6ae:	4640      	mov	r0, r8
    e6b0:	4649      	mov	r1, r9
    e6b2:	e9cd 3218 	strd	r3, r2, [sp, #96]	; 0x60
    e6b6:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    e6ba:	f7fe fbaf 	bl	ce1c <__aeabi_dmul>
    e6be:	4603      	mov	r3, r0
    e6c0:	4680      	mov	r8, r0
    e6c2:	4689      	mov	r9, r1
    e6c4:	430b      	orrs	r3, r1
    e6c6:	d104      	bne.n	e6d2 <_strtod_l+0xcf2>
    e6c8:	2322      	movs	r3, #34	; 0x22
    e6ca:	981e      	ldr	r0, [sp, #120]	; 0x78
    e6cc:	f8cb 3000 	str.w	r3, [fp]
    e6d0:	e51b      	b.n	e10a <_strtod_l+0x72a>
    e6d2:	981e      	ldr	r0, [sp, #120]	; 0x78
    e6d4:	e519      	b.n	e10a <_strtod_l+0x72a>
    e6d6:	f1c8 080f 	rsb	r8, r8, #15
    e6da:	4c48      	ldr	r4, [pc, #288]	; (e7fc <_strtod_l+0xe1c>)
    e6dc:	eb04 01c8 	add.w	r1, r4, r8, lsl #3
    e6e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e6e4:	e9d1 0100 	ldrd	r0, r1, [r1]
    e6e8:	f7fe fb98 	bl	ce1c <__aeabi_dmul>
    e6ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e6ee:	eba3 0808 	sub.w	r8, r3, r8
    e6f2:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
    e6f6:	e9d4 2300 	ldrd	r2, r3, [r4]
    e6fa:	f7fe fb8f 	bl	ce1c <__aeabi_dmul>
    e6fe:	4680      	mov	r8, r0
    e700:	4689      	mov	r9, r1
    e702:	e482      	b.n	e00a <_strtod_l+0x62a>
    e704:	2000      	movs	r0, #0
    e706:	e4a5      	b.n	e054 <_strtod_l+0x674>
    e708:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    e70c:	9305      	str	r3, [sp, #20]
    e70e:	2300      	movs	r3, #0
    e710:	930b      	str	r3, [sp, #44]	; 0x2c
    e712:	f7ff ba43 	b.w	db9c <_strtod_l+0x1bc>
    e716:	2322      	movs	r3, #34	; 0x22
    e718:	2200      	movs	r2, #0
    e71a:	9505      	str	r5, [sp, #20]
    e71c:	9204      	str	r2, [sp, #16]
    e71e:	f8cb 3000 	str.w	r3, [fp]
    e722:	e660      	b.n	e3e6 <_strtod_l+0xa06>
    e724:	a81d      	add	r0, sp, #116	; 0x74
    e726:	aa20      	add	r2, sp, #128	; 0x80
    e728:	4938      	ldr	r1, [pc, #224]	; (e80c <_strtod_l+0xe2c>)
    e72a:	f018 f9a3 	bl	26a74 <__hexnan>
    e72e:	2805      	cmp	r0, #5
    e730:	f47f ac00 	bne.w	df34 <_strtod_l+0x554>
    e734:	9b21      	ldr	r3, [sp, #132]	; 0x84
    e736:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    e73a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    e73e:	9305      	str	r3, [sp, #20]
    e740:	9b20      	ldr	r3, [sp, #128]	; 0x80
    e742:	9304      	str	r3, [sp, #16]
    e744:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e748:	e45f      	b.n	e00a <_strtod_l+0x62a>
    e74a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e74c:	4656      	mov	r6, sl
    e74e:	46ca      	mov	sl, r9
    e750:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e754:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    e758:	4303      	orrs	r3, r0
    e75a:	d1a4      	bne.n	e6a6 <_strtod_l+0xcc6>
    e75c:	f3c1 0313 	ubfx	r3, r1, #0, #20
    e760:	460c      	mov	r4, r1
    e762:	2b00      	cmp	r3, #0
    e764:	d19f      	bne.n	e6a6 <_strtod_l+0xcc6>
    e766:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    e76a:	0d1b      	lsrs	r3, r3, #20
    e76c:	051b      	lsls	r3, r3, #20
    e76e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    e772:	d998      	bls.n	e6a6 <_strtod_l+0xcc6>
    e774:	6973      	ldr	r3, [r6, #20]
    e776:	b913      	cbnz	r3, e77e <_strtod_l+0xd9e>
    e778:	6933      	ldr	r3, [r6, #16]
    e77a:	2b01      	cmp	r3, #1
    e77c:	dd93      	ble.n	e6a6 <_strtod_l+0xcc6>
    e77e:	4631      	mov	r1, r6
    e780:	2201      	movs	r2, #1
    e782:	4658      	mov	r0, fp
    e784:	f018 fde0 	bl	27348 <__lshift>
    e788:	4639      	mov	r1, r7
    e78a:	4606      	mov	r6, r0
    e78c:	f018 fe4e 	bl	2742c <__mcmp>
    e790:	2800      	cmp	r0, #0
    e792:	dd88      	ble.n	e6a6 <_strtod_l+0xcc6>
    e794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e796:	2b00      	cmp	r3, #0
    e798:	f040 8084 	bne.w	e8a4 <_strtod_l+0xec4>
    e79c:	4b13      	ldr	r3, [pc, #76]	; (e7ec <_strtod_l+0xe0c>)
    e79e:	4023      	ands	r3, r4
    e7a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    e7a4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    e7a8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    e7ac:	9305      	str	r3, [sp, #20]
    e7ae:	f04f 33ff 	mov.w	r3, #4294967295
    e7b2:	9304      	str	r3, [sp, #16]
    e7b4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e7b8:	e775      	b.n	e6a6 <_strtod_l+0xcc6>
    e7ba:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e7be:	f3c2 0313 	ubfx	r3, r2, #0, #20
    e7c2:	4614      	mov	r4, r2
    e7c4:	430b      	orrs	r3, r1
    e7c6:	f47f af56 	bne.w	e676 <_strtod_l+0xc96>
    e7ca:	e7e3      	b.n	e794 <_strtod_l+0xdb4>
    e7cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e7ce:	9a04      	ldr	r2, [sp, #16]
    e7d0:	4213      	tst	r3, r2
    e7d2:	f43f af68 	beq.w	e6a6 <_strtod_l+0xcc6>
    e7d6:	e755      	b.n	e684 <_strtod_l+0xca4>
    e7d8:	4b03      	ldr	r3, [pc, #12]	; (e7e8 <_strtod_l+0xe08>)
    e7da:	2700      	movs	r7, #0
    e7dc:	930b      	str	r3, [sp, #44]	; 0x2c
    e7de:	e6c4      	b.n	e56a <_strtod_l+0xb8a>
    e7e0:	00000000 	.word	0x00000000
    e7e4:	bfe00000 	.word	0xbfe00000
    e7e8:	0002b8d0 	.word	0x0002b8d0
    e7ec:	7ff00000 	.word	0x7ff00000
    e7f0:	7ca00000 	.word	0x7ca00000
    e7f4:	7c900000 	.word	0x7c900000
    e7f8:	7fefffff 	.word	0x7fefffff
    e7fc:	0002b8f8 	.word	0x0002b8f8
    e800:	3fe00000 	.word	0x3fe00000
    e804:	000fffff 	.word	0x000fffff
    e808:	39500000 	.word	0x39500000
    e80c:	0002c0c8 	.word	0x0002c0c8
    e810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e812:	9904      	ldr	r1, [sp, #16]
    e814:	2b00      	cmp	r3, #0
    e816:	d039      	beq.n	e88c <_strtod_l+0xeac>
    e818:	4b2f      	ldr	r3, [pc, #188]	; (e8d8 <_strtod_l+0xef8>)
    e81a:	402b      	ands	r3, r5
    e81c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    e820:	d834      	bhi.n	e88c <_strtod_l+0xeac>
    e822:	0d1b      	lsrs	r3, r3, #20
    e824:	f04f 30ff 	mov.w	r0, #4294967295
    e828:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    e82c:	fa00 f303 	lsl.w	r3, r0, r3
    e830:	4299      	cmp	r1, r3
    e832:	f47f af20 	bne.w	e676 <_strtod_l+0xc96>
    e836:	4b29      	ldr	r3, [pc, #164]	; (e8dc <_strtod_l+0xefc>)
    e838:	429a      	cmp	r2, r3
    e83a:	d102      	bne.n	e842 <_strtod_l+0xe62>
    e83c:	3101      	adds	r1, #1
    e83e:	f43f ac5a 	beq.w	e0f6 <_strtod_l+0x716>
    e842:	4b25      	ldr	r3, [pc, #148]	; (e8d8 <_strtod_l+0xef8>)
    e844:	4013      	ands	r3, r2
    e846:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    e84a:	9305      	str	r3, [sp, #20]
    e84c:	2300      	movs	r3, #0
    e84e:	9304      	str	r3, [sp, #16]
    e850:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e854:	e727      	b.n	e6a6 <_strtod_l+0xcc6>
    e856:	f014 fbbf 	bl	22fd8 <sulp>
    e85a:	4602      	mov	r2, r0
    e85c:	460b      	mov	r3, r1
    e85e:	4640      	mov	r0, r8
    e860:	4649      	mov	r1, r9
    e862:	f7fd fcf1 	bl	c248 <__aeabi_dsub>
    e866:	2200      	movs	r2, #0
    e868:	2300      	movs	r3, #0
    e86a:	4680      	mov	r8, r0
    e86c:	4689      	mov	r9, r1
    e86e:	f7fd fef9 	bl	c664 <__aeabi_dcmpeq>
    e872:	2800      	cmp	r0, #0
    e874:	f43f af17 	beq.w	e6a6 <_strtod_l+0xcc6>
    e878:	e61f      	b.n	e4ba <_strtod_l+0xada>
    e87a:	f04f 32ff 	mov.w	r2, #4294967295
    e87e:	fa02 f303 	lsl.w	r3, r2, r3
    e882:	9a04      	ldr	r2, [sp, #16]
    e884:	401a      	ands	r2, r3
    e886:	9204      	str	r2, [sp, #16]
    e888:	f7ff bbaf 	b.w	dfea <_strtod_l+0x60a>
    e88c:	f04f 33ff 	mov.w	r3, #4294967295
    e890:	e7ce      	b.n	e830 <_strtod_l+0xe50>
    e892:	3b20      	subs	r3, #32
    e894:	f04f 31ff 	mov.w	r1, #4294967295
    e898:	fa01 f303 	lsl.w	r3, r1, r3
    e89c:	4013      	ands	r3, r2
    e89e:	9305      	str	r3, [sp, #20]
    e8a0:	f7ff bba3 	b.w	dfea <_strtod_l+0x60a>
    e8a4:	4b0c      	ldr	r3, [pc, #48]	; (e8d8 <_strtod_l+0xef8>)
    e8a6:	4023      	ands	r3, r4
    e8a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    e8ac:	f73f af78 	bgt.w	e7a0 <_strtod_l+0xdc0>
    e8b0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    e8b4:	f73f aef9 	bgt.w	e6aa <_strtod_l+0xcca>
    e8b8:	e5ff      	b.n	e4ba <_strtod_l+0xada>
    e8ba:	4623      	mov	r3, r4
    e8bc:	4634      	mov	r4, r6
    e8be:	e5e5      	b.n	e48c <_strtod_l+0xaac>
    e8c0:	f04f 0e00 	mov.w	lr, #0
    e8c4:	4675      	mov	r5, lr
    e8c6:	46f1      	mov	r9, lr
    e8c8:	4670      	mov	r0, lr
    e8ca:	4674      	mov	r4, lr
    e8cc:	46f4      	mov	ip, lr
    e8ce:	f8cd e020 	str.w	lr, [sp, #32]
    e8d2:	f7ff ba7e 	b.w	ddd2 <_strtod_l+0x3f2>
    e8d6:	bf00      	nop
    e8d8:	7ff00000 	.word	0x7ff00000
    e8dc:	7fefffff 	.word	0x7fefffff

0000e8e0 <_svfprintf_r>:
    e8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8e4:	ed2d 8b08 	vpush	{d8-d11}
    e8e8:	b0d1      	sub	sp, #324	; 0x144
    e8ea:	468b      	mov	fp, r1
    e8ec:	4617      	mov	r7, r2
    e8ee:	4681      	mov	r9, r0
    e8f0:	9309      	str	r3, [sp, #36]	; 0x24
    e8f2:	f018 f9a5 	bl	26c40 <_localeconv_r>
    e8f6:	6803      	ldr	r3, [r0, #0]
    e8f8:	4618      	mov	r0, r3
    e8fa:	9311      	str	r3, [sp, #68]	; 0x44
    e8fc:	f014 f8b6 	bl	22a6c <strlen>
    e900:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    e904:	9010      	str	r0, [sp, #64]	; 0x40
    e906:	061c      	lsls	r4, r3, #24
    e908:	d504      	bpl.n	e914 <_svfprintf_r+0x34>
    e90a:	f8db 3010 	ldr.w	r3, [fp, #16]
    e90e:	2b00      	cmp	r3, #0
    e910:	f000 87f2 	beq.w	f8f8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe98>
    e914:	2300      	movs	r3, #0
    e916:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    e91a:	ee09 9a10 	vmov	s18, r9
    e91e:	ee09 ba90 	vmov	s19, fp
    e922:	930c      	str	r3, [sp, #48]	; 0x30
    e924:	9326      	str	r3, [sp, #152]	; 0x98
    e926:	9312      	str	r3, [sp, #72]	; 0x48
    e928:	9314      	str	r3, [sp, #80]	; 0x50
    e92a:	9317      	str	r3, [sp, #92]	; 0x5c
    e92c:	9305      	str	r3, [sp, #20]
    e92e:	9325      	str	r3, [sp, #148]	; 0x94
    e930:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
    e934:	ed9f 7b9c 	vldr	d7, [pc, #624]	; eba8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x148>
    e938:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    e93c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    e940:	783b      	ldrb	r3, [r7, #0]
    e942:	463c      	mov	r4, r7
    e944:	b1e3      	cbz	r3, e980 <_svfprintf_r+0xa0>
    e946:	2b25      	cmp	r3, #37	; 0x25
    e948:	d01a      	beq.n	e980 <_svfprintf_r+0xa0>
    e94a:	4625      	mov	r5, r4
    e94c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    e950:	b10b      	cbz	r3, e956 <_svfprintf_r+0x76>
    e952:	2b25      	cmp	r3, #37	; 0x25
    e954:	d1f9      	bne.n	e94a <_svfprintf_r+0x6a>
    e956:	1be6      	subs	r6, r4, r7
    e958:	d012      	beq.n	e980 <_svfprintf_r+0xa0>
    e95a:	f8c8 7000 	str.w	r7, [r8]
    e95e:	f8c8 6004 	str.w	r6, [r8, #4]
    e962:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e966:	3301      	adds	r3, #1
    e968:	4432      	add	r2, r6
    e96a:	2b07      	cmp	r3, #7
    e96c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e970:	f300 810b 	bgt.w	eb8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12a>
    e974:	f108 0808 	add.w	r8, r8, #8
    e978:	9b05      	ldr	r3, [sp, #20]
    e97a:	4433      	add	r3, r6
    e97c:	9305      	str	r3, [sp, #20]
    e97e:	786b      	ldrb	r3, [r5, #1]
    e980:	2b00      	cmp	r3, #0
    e982:	f001 819e 	beq.w	fcc2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1262>
    e986:	2300      	movs	r3, #0
    e988:	1c67      	adds	r7, r4, #1
    e98a:	f894 9001 	ldrb.w	r9, [r4, #1]
    e98e:	f04f 3aff 	mov.w	sl, #4294967295
    e992:	242b      	movs	r4, #43	; 0x2b
    e994:	9306      	str	r3, [sp, #24]
    e996:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    e99a:	9303      	str	r3, [sp, #12]
    e99c:	3701      	adds	r7, #1
    e99e:	f1a9 0320 	sub.w	r3, r9, #32
    e9a2:	2b5a      	cmp	r3, #90	; 0x5a
    e9a4:	f200 8104 	bhi.w	ebb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x150>
    e9a8:	e8df f013 	tbh	[pc, r3, lsl #1]
    e9ac:	0102006a 	.word	0x0102006a
    e9b0:	02820102 	.word	0x02820102
    e9b4:	01020102 	.word	0x01020102
    e9b8:	025e0102 	.word	0x025e0102
    e9bc:	01020102 	.word	0x01020102
    e9c0:	02380226 	.word	0x02380226
    e9c4:	02310102 	.word	0x02310102
    e9c8:	01020244 	.word	0x01020244
    e9cc:	005b023d 	.word	0x005b023d
    e9d0:	005b005b 	.word	0x005b005b
    e9d4:	005b005b 	.word	0x005b005b
    e9d8:	005b005b 	.word	0x005b005b
    e9dc:	005b005b 	.word	0x005b005b
    e9e0:	01020102 	.word	0x01020102
    e9e4:	01020102 	.word	0x01020102
    e9e8:	01020102 	.word	0x01020102
    e9ec:	01890102 	.word	0x01890102
    e9f0:	01f10102 	.word	0x01f10102
    e9f4:	01890079 	.word	0x01890079
    e9f8:	01890189 	.word	0x01890189
    e9fc:	01020102 	.word	0x01020102
    ea00:	01020102 	.word	0x01020102
    ea04:	01020299 	.word	0x01020299
    ea08:	00a70102 	.word	0x00a70102
    ea0c:	01020102 	.word	0x01020102
    ea10:	02010102 	.word	0x02010102
    ea14:	02890102 	.word	0x02890102
    ea18:	01020102 	.word	0x01020102
    ea1c:	01020784 	.word	0x01020784
    ea20:	01020102 	.word	0x01020102
    ea24:	01020102 	.word	0x01020102
    ea28:	01020102 	.word	0x01020102
    ea2c:	01890102 	.word	0x01890102
    ea30:	01f10102 	.word	0x01f10102
    ea34:	0189007d 	.word	0x0189007d
    ea38:	01890189 	.word	0x01890189
    ea3c:	007d02d4 	.word	0x007d02d4
    ea40:	01020072 	.word	0x01020072
    ea44:	010202c9 	.word	0x010202c9
    ea48:	00ab02b2 	.word	0x00ab02b2
    ea4c:	007202a0 	.word	0x007202a0
    ea50:	02010102 	.word	0x02010102
    ea54:	0780006f 	.word	0x0780006f
    ea58:	01020102 	.word	0x01020102
    ea5c:	0102075f 	.word	0x0102075f
    ea60:	006f      	.short	0x006f
    ea62:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    ea66:	2200      	movs	r2, #0
    ea68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ea6c:	f817 9b01 	ldrb.w	r9, [r7], #1
    ea70:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    ea74:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    ea78:	2b09      	cmp	r3, #9
    ea7a:	d9f5      	bls.n	ea68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8>
    ea7c:	9206      	str	r2, [sp, #24]
    ea7e:	e78e      	b.n	e99e <_svfprintf_r+0xbe>
    ea80:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
    ea84:	2b00      	cmp	r3, #0
    ea86:	f000 862b 	beq.w	f6e0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc80>
    ea8a:	f897 9000 	ldrb.w	r9, [r7]
    ea8e:	e785      	b.n	e99c <_svfprintf_r+0xbc>
    ea90:	9b03      	ldr	r3, [sp, #12]
    ea92:	f897 9000 	ldrb.w	r9, [r7]
    ea96:	f043 0320 	orr.w	r3, r3, #32
    ea9a:	9303      	str	r3, [sp, #12]
    ea9c:	e77e      	b.n	e99c <_svfprintf_r+0xbc>
    ea9e:	9b03      	ldr	r3, [sp, #12]
    eaa0:	f043 0310 	orr.w	r3, r3, #16
    eaa4:	9303      	str	r3, [sp, #12]
    eaa6:	9b03      	ldr	r3, [sp, #12]
    eaa8:	0698      	lsls	r0, r3, #26
    eaaa:	f140 815f 	bpl.w	ed6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x30c>
    eaae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eab0:	3307      	adds	r3, #7
    eab2:	f023 0307 	bic.w	r3, r3, #7
    eab6:	4619      	mov	r1, r3
    eab8:	e8f1 2302 	ldrd	r2, r3, [r1], #8
    eabc:	4614      	mov	r4, r2
    eabe:	461d      	mov	r5, r3
    eac0:	9109      	str	r1, [sp, #36]	; 0x24
    eac2:	2a00      	cmp	r2, #0
    eac4:	f173 0300 	sbcs.w	r3, r3, #0
    eac8:	f2c0 85c9 	blt.w	f65e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbfe>
    eacc:	f1ba 3fff 	cmp.w	sl, #4294967295
    ead0:	f000 8496 	beq.w	f400 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9a0>
    ead4:	9b03      	ldr	r3, [sp, #12]
    ead6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    eada:	9303      	str	r3, [sp, #12]
    eadc:	f1ba 0f00 	cmp.w	sl, #0
    eae0:	f040 848e 	bne.w	f400 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9a0>
    eae4:	ea54 0305 	orrs.w	r3, r4, r5
    eae8:	bf14      	ite	ne
    eaea:	2301      	movne	r3, #1
    eaec:	2300      	moveq	r3, #0
    eaee:	f040 8487 	bne.w	f400 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9a0>
    eaf2:	469a      	mov	sl, r3
    eaf4:	ae50      	add	r6, sp, #320	; 0x140
    eaf6:	9307      	str	r3, [sp, #28]
    eaf8:	e036      	b.n	eb68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x108>
    eafa:	9b03      	ldr	r3, [sp, #12]
    eafc:	f043 0310 	orr.w	r3, r3, #16
    eb00:	9303      	str	r3, [sp, #12]
    eb02:	9b03      	ldr	r3, [sp, #12]
    eb04:	069d      	lsls	r5, r3, #26
    eb06:	f140 8122 	bpl.w	ed4e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2ee>
    eb0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eb0c:	3307      	adds	r3, #7
    eb0e:	f023 0307 	bic.w	r3, r3, #7
    eb12:	e8f3 4502 	ldrd	r4, r5, [r3], #8
    eb16:	9309      	str	r3, [sp, #36]	; 0x24
    eb18:	9b03      	ldr	r3, [sp, #12]
    eb1a:	f423 6b80 	bic.w	fp, r3, #1024	; 0x400
    eb1e:	2300      	movs	r3, #0
    eb20:	2200      	movs	r2, #0
    eb22:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
    eb26:	f1ba 3fff 	cmp.w	sl, #4294967295
    eb2a:	f000 8319 	beq.w	f160 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x700>
    eb2e:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
    eb32:	9203      	str	r2, [sp, #12]
    eb34:	ea54 0205 	orrs.w	r2, r4, r5
    eb38:	f040 8310 	bne.w	f15c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6fc>
    eb3c:	f1ba 0200 	subs.w	r2, sl, #0
    eb40:	bf18      	it	ne
    eb42:	2201      	movne	r2, #1
    eb44:	f1ba 0f00 	cmp.w	sl, #0
    eb48:	f040 8308 	bne.w	f15c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6fc>
    eb4c:	2b00      	cmp	r3, #0
    eb4e:	f040 8452 	bne.w	f3f6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x996>
    eb52:	f01b 0201 	ands.w	r2, fp, #1
    eb56:	9207      	str	r2, [sp, #28]
    eb58:	f000 8504 	beq.w	f564 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb04>
    eb5c:	2230      	movs	r2, #48	; 0x30
    eb5e:	469a      	mov	sl, r3
    eb60:	f20d 163f 	addw	r6, sp, #319	; 0x13f
    eb64:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    eb68:	9907      	ldr	r1, [sp, #28]
    eb6a:	2300      	movs	r3, #0
    eb6c:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    eb70:	4551      	cmp	r1, sl
    eb72:	9308      	str	r3, [sp, #32]
    eb74:	930d      	str	r3, [sp, #52]	; 0x34
    eb76:	bfb8      	it	lt
    eb78:	4651      	movlt	r1, sl
    eb7a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    eb7e:	9104      	str	r1, [sp, #16]
    eb80:	b352      	cbz	r2, ebd8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x178>
    eb82:	9b04      	ldr	r3, [sp, #16]
    eb84:	3301      	adds	r3, #1
    eb86:	9304      	str	r3, [sp, #16]
    eb88:	e026      	b.n	ebd8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x178>
    eb8a:	aa24      	add	r2, sp, #144	; 0x90
    eb8c:	ee19 1a90 	vmov	r1, s19
    eb90:	ee19 0a10 	vmov	r0, s18
    eb94:	f019 f92e 	bl	27df4 <__ssprint_r>
    eb98:	2800      	cmp	r0, #0
    eb9a:	f041 83eb 	bne.w	10374 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x374>
    eb9e:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    eba2:	e6e9      	b.n	e978 <_svfprintf_r+0x98>
    eba4:	f3af 8000 	nop.w
	...
    ebb0:	f1b9 0f00 	cmp.w	r9, #0
    ebb4:	f001 8085 	beq.w	fcc2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1262>
    ebb8:	2201      	movs	r2, #1
    ebba:	2300      	movs	r3, #0
    ebbc:	ae37      	add	r6, sp, #220	; 0xdc
    ebbe:	f88d 90dc 	strb.w	r9, [sp, #220]	; 0xdc
    ebc2:	4611      	mov	r1, r2
    ebc4:	9204      	str	r2, [sp, #16]
    ebc6:	461a      	mov	r2, r3
    ebc8:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    ebcc:	9107      	str	r1, [sp, #28]
    ebce:	4692      	mov	sl, r2
    ebd0:	9208      	str	r2, [sp, #32]
    ebd2:	920d      	str	r2, [sp, #52]	; 0x34
    ebd4:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
    ebd8:	9b03      	ldr	r3, [sp, #12]
    ebda:	f013 0302 	ands.w	r3, r3, #2
    ebde:	d002      	beq.n	ebe6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x186>
    ebe0:	9904      	ldr	r1, [sp, #16]
    ebe2:	3102      	adds	r1, #2
    ebe4:	9104      	str	r1, [sp, #16]
    ebe6:	9903      	ldr	r1, [sp, #12]
    ebe8:	f011 0b84 	ands.w	fp, r1, #132	; 0x84
    ebec:	d105      	bne.n	ebfa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x19a>
    ebee:	9906      	ldr	r1, [sp, #24]
    ebf0:	9804      	ldr	r0, [sp, #16]
    ebf2:	1a0d      	subs	r5, r1, r0
    ebf4:	2d00      	cmp	r5, #0
    ebf6:	f300 8356 	bgt.w	f2a6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x846>
    ebfa:	9c26      	ldr	r4, [sp, #152]	; 0x98
    ebfc:	b182      	cbz	r2, ec20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c0>
    ebfe:	9a25      	ldr	r2, [sp, #148]	; 0x94
    ec00:	2101      	movs	r1, #1
    ec02:	3401      	adds	r4, #1
    ec04:	f10d 0073 	add.w	r0, sp, #115	; 0x73
    ec08:	440a      	add	r2, r1
    ec0a:	f8c8 1004 	str.w	r1, [r8, #4]
    ec0e:	9426      	str	r4, [sp, #152]	; 0x98
    ec10:	2a07      	cmp	r2, #7
    ec12:	f8c8 0000 	str.w	r0, [r8]
    ec16:	9225      	str	r2, [sp, #148]	; 0x94
    ec18:	f300 838f 	bgt.w	f33a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8da>
    ec1c:	f108 0808 	add.w	r8, r8, #8
    ec20:	b17b      	cbz	r3, ec42 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1e2>
    ec22:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ec24:	3402      	adds	r4, #2
    ec26:	a91d      	add	r1, sp, #116	; 0x74
    ec28:	2202      	movs	r2, #2
    ec2a:	3301      	adds	r3, #1
    ec2c:	9426      	str	r4, [sp, #152]	; 0x98
    ec2e:	f8c8 1000 	str.w	r1, [r8]
    ec32:	2b07      	cmp	r3, #7
    ec34:	9325      	str	r3, [sp, #148]	; 0x94
    ec36:	f8c8 2004 	str.w	r2, [r8, #4]
    ec3a:	f300 838e 	bgt.w	f35a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8fa>
    ec3e:	f108 0808 	add.w	r8, r8, #8
    ec42:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
    ec46:	f000 81f9 	beq.w	f03c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5dc>
    ec4a:	9b07      	ldr	r3, [sp, #28]
    ec4c:	ebaa 0a03 	sub.w	sl, sl, r3
    ec50:	f1ba 0f00 	cmp.w	sl, #0
    ec54:	f300 8241 	bgt.w	f0da <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x67a>
    ec58:	9b03      	ldr	r3, [sp, #12]
    ec5a:	05d8      	lsls	r0, r3, #23
    ec5c:	f100 818e 	bmi.w	ef7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x51c>
    ec60:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ec62:	9a07      	ldr	r2, [sp, #28]
    ec64:	3301      	adds	r3, #1
    ec66:	f8c8 6000 	str.w	r6, [r8]
    ec6a:	4414      	add	r4, r2
    ec6c:	f8c8 2004 	str.w	r2, [r8, #4]
    ec70:	2b07      	cmp	r3, #7
    ec72:	9325      	str	r3, [sp, #148]	; 0x94
    ec74:	9426      	str	r4, [sp, #152]	; 0x98
    ec76:	f300 8309 	bgt.w	f28c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x82c>
    ec7a:	f108 0808 	add.w	r8, r8, #8
    ec7e:	9b03      	ldr	r3, [sp, #12]
    ec80:	0759      	lsls	r1, r3, #29
    ec82:	d505      	bpl.n	ec90 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x230>
    ec84:	9b06      	ldr	r3, [sp, #24]
    ec86:	9a04      	ldr	r2, [sp, #16]
    ec88:	1a9d      	subs	r5, r3, r2
    ec8a:	2d00      	cmp	r5, #0
    ec8c:	f300 8373 	bgt.w	f376 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x916>
    ec90:	9904      	ldr	r1, [sp, #16]
    ec92:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    ec96:	428a      	cmp	r2, r1
    ec98:	bfac      	ite	ge
    ec9a:	189b      	addge	r3, r3, r2
    ec9c:	185b      	addlt	r3, r3, r1
    ec9e:	9305      	str	r3, [sp, #20]
    eca0:	2c00      	cmp	r4, #0
    eca2:	f040 8297 	bne.w	f1d4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x774>
    eca6:	2300      	movs	r3, #0
    eca8:	9325      	str	r3, [sp, #148]	; 0x94
    ecaa:	9b08      	ldr	r3, [sp, #32]
    ecac:	b123      	cbz	r3, ecb8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x258>
    ecae:	9908      	ldr	r1, [sp, #32]
    ecb0:	ee19 0a10 	vmov	r0, s18
    ecb4:	f017 f912 	bl	25edc <_free_r>
    ecb8:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    ecbc:	e640      	b.n	e940 <_svfprintf_r+0x60>
    ecbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ecc0:	f04f 32ff 	mov.w	r2, #4294967295
    ecc4:	3307      	adds	r3, #7
    ecc6:	f023 0307 	bic.w	r3, r3, #7
    ecca:	ecb3 7b02 	vldmia	r3!, {d7}
    ecce:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    ecd2:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
    ecd6:	9309      	str	r3, [sp, #36]	; 0x24
    ecd8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
    ecdc:	ee0a 4a10 	vmov	s20, r4
    ece0:	ee0a 3a90 	vmov	s21, r3
    ece4:	4ba1      	ldr	r3, [pc, #644]	; (ef6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x50c>)
    ece6:	eeb0 8a4a 	vmov.f32	s16, s20
    ecea:	eef0 8a6a 	vmov.f32	s17, s21
    ecee:	ec51 0b18 	vmov	r0, r1, d8
    ecf2:	f7fe faa5 	bl	d240 <__aeabi_dcmpun>
    ecf6:	2800      	cmp	r0, #0
    ecf8:	f040 8509 	bne.w	f70e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xcae>
    ecfc:	f04f 32ff 	mov.w	r2, #4294967295
    ed00:	4b9a      	ldr	r3, [pc, #616]	; (ef6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x50c>)
    ed02:	ec51 0b18 	vmov	r0, r1, d8
    ed06:	f7fd fcc1 	bl	c68c <__aeabi_dcmple>
    ed0a:	2800      	cmp	r0, #0
    ed0c:	f040 84ff 	bne.w	f70e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xcae>
    ed10:	2200      	movs	r2, #0
    ed12:	2300      	movs	r3, #0
    ed14:	4620      	mov	r0, r4
    ed16:	4629      	mov	r1, r5
    ed18:	f7fd fcae 	bl	c678 <__aeabi_dcmplt>
    ed1c:	2800      	cmp	r0, #0
    ed1e:	f041 80de 	bne.w	fede <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x147e>
    ed22:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    ed26:	2103      	movs	r1, #3
    ed28:	4e91      	ldr	r6, [pc, #580]	; (ef70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x510>)
    ed2a:	4b92      	ldr	r3, [pc, #584]	; (ef74 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x514>)
    ed2c:	9104      	str	r1, [sp, #16]
    ed2e:	9c03      	ldr	r4, [sp, #12]
    ed30:	2000      	movs	r0, #0
    ed32:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    ed36:	bfc8      	it	gt
    ed38:	461e      	movgt	r6, r3
    ed3a:	9107      	str	r1, [sp, #28]
    ed3c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    ed40:	4682      	mov	sl, r0
    ed42:	9008      	str	r0, [sp, #32]
    ed44:	9403      	str	r4, [sp, #12]
    ed46:	900d      	str	r0, [sp, #52]	; 0x34
    ed48:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
    ed4c:	e718      	b.n	eb80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x120>
    ed4e:	9b03      	ldr	r3, [sp, #12]
    ed50:	06dc      	lsls	r4, r3, #27
    ed52:	f100 84d5 	bmi.w	f700 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xca0>
    ed56:	9b03      	ldr	r3, [sp, #12]
    ed58:	0658      	lsls	r0, r3, #25
    ed5a:	f140 87ef 	bpl.w	fd3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12dc>
    ed5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed60:	2500      	movs	r5, #0
    ed62:	f853 4b04 	ldr.w	r4, [r3], #4
    ed66:	b2a4      	uxth	r4, r4
    ed68:	9309      	str	r3, [sp, #36]	; 0x24
    ed6a:	e6d5      	b.n	eb18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb8>
    ed6c:	9b03      	ldr	r3, [sp, #12]
    ed6e:	06d9      	lsls	r1, r3, #27
    ed70:	f100 84bd 	bmi.w	f6ee <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc8e>
    ed74:	9b03      	ldr	r3, [sp, #12]
    ed76:	065a      	lsls	r2, r3, #25
    ed78:	f140 87d2 	bpl.w	fd20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12c0>
    ed7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed7e:	f853 4b04 	ldr.w	r4, [r3], #4
    ed82:	b224      	sxth	r4, r4
    ed84:	9309      	str	r3, [sp, #36]	; 0x24
    ed86:	17e5      	asrs	r5, r4, #31
    ed88:	4622      	mov	r2, r4
    ed8a:	462b      	mov	r3, r5
    ed8c:	e699      	b.n	eac2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x62>
    ed8e:	2201      	movs	r2, #1
    ed90:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed92:	2100      	movs	r1, #0
    ed94:	ae37      	add	r6, sp, #220	; 0xdc
    ed96:	4614      	mov	r4, r2
    ed98:	f853 0b04 	ldr.w	r0, [r3], #4
    ed9c:	9204      	str	r2, [sp, #16]
    ed9e:	460a      	mov	r2, r1
    eda0:	f88d 1073 	strb.w	r1, [sp, #115]	; 0x73
    eda4:	9407      	str	r4, [sp, #28]
    eda6:	f88d 00dc 	strb.w	r0, [sp, #220]	; 0xdc
    edaa:	9309      	str	r3, [sp, #36]	; 0x24
    edac:	e70f      	b.n	ebce <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16e>
    edae:	9c09      	ldr	r4, [sp, #36]	; 0x24
    edb0:	2500      	movs	r5, #0
    edb2:	f854 6b04 	ldr.w	r6, [r4], #4
    edb6:	f88d 5073 	strb.w	r5, [sp, #115]	; 0x73
    edba:	2e00      	cmp	r6, #0
    edbc:	f000 8791 	beq.w	fce2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1282>
    edc0:	f1ba 3fff 	cmp.w	sl, #4294967295
    edc4:	f000 85a8 	beq.w	f918 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xeb8>
    edc8:	4652      	mov	r2, sl
    edca:	4629      	mov	r1, r5
    edcc:	4630      	mov	r0, r6
    edce:	f013 f9d1 	bl	22174 <memchr>
    edd2:	9008      	str	r0, [sp, #32]
    edd4:	2800      	cmp	r0, #0
    edd6:	f001 81eb 	beq.w	101b0 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1b0>
    edda:	9b08      	ldr	r3, [sp, #32]
    eddc:	46aa      	mov	sl, r5
    edde:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    ede2:	1b9b      	subs	r3, r3, r6
    ede4:	9409      	str	r4, [sp, #36]	; 0x24
    ede6:	9508      	str	r5, [sp, #32]
    ede8:	9307      	str	r3, [sp, #28]
    edea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    edee:	950d      	str	r5, [sp, #52]	; 0x34
    edf0:	9304      	str	r3, [sp, #16]
    edf2:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
    edf6:	e6c3      	b.n	eb80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x120>
    edf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    edfa:	f853 2b04 	ldr.w	r2, [r3], #4
    edfe:	2a00      	cmp	r2, #0
    ee00:	9206      	str	r2, [sp, #24]
    ee02:	f280 845c 	bge.w	f6be <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc5e>
    ee06:	9a06      	ldr	r2, [sp, #24]
    ee08:	9309      	str	r3, [sp, #36]	; 0x24
    ee0a:	4252      	negs	r2, r2
    ee0c:	9206      	str	r2, [sp, #24]
    ee0e:	9b03      	ldr	r3, [sp, #12]
    ee10:	f897 9000 	ldrb.w	r9, [r7]
    ee14:	f043 0304 	orr.w	r3, r3, #4
    ee18:	9303      	str	r3, [sp, #12]
    ee1a:	e5bf      	b.n	e99c <_svfprintf_r+0xbc>
    ee1c:	f897 9000 	ldrb.w	r9, [r7]
    ee20:	f88d 4073 	strb.w	r4, [sp, #115]	; 0x73
    ee24:	e5ba      	b.n	e99c <_svfprintf_r+0xbc>
    ee26:	9b03      	ldr	r3, [sp, #12]
    ee28:	f897 9000 	ldrb.w	r9, [r7]
    ee2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ee30:	9303      	str	r3, [sp, #12]
    ee32:	e5b3      	b.n	e99c <_svfprintf_r+0xbc>
    ee34:	463a      	mov	r2, r7
    ee36:	f812 9b01 	ldrb.w	r9, [r2], #1
    ee3a:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    ee3e:	f001 82d3 	beq.w	103e8 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3e8>
    ee42:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    ee46:	4617      	mov	r7, r2
    ee48:	f04f 0a00 	mov.w	sl, #0
    ee4c:	2b09      	cmp	r3, #9
    ee4e:	f63f ada6 	bhi.w	e99e <_svfprintf_r+0xbe>
    ee52:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    ee56:	f817 9b01 	ldrb.w	r9, [r7], #1
    ee5a:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
    ee5e:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    ee62:	2b09      	cmp	r3, #9
    ee64:	d9f5      	bls.n	ee52 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3f2>
    ee66:	e59a      	b.n	e99e <_svfprintf_r+0xbe>
    ee68:	ee19 0a10 	vmov	r0, s18
    ee6c:	f017 fee8 	bl	26c40 <_localeconv_r>
    ee70:	6843      	ldr	r3, [r0, #4]
    ee72:	4618      	mov	r0, r3
    ee74:	9316      	str	r3, [sp, #88]	; 0x58
    ee76:	f013 fdf9 	bl	22a6c <strlen>
    ee7a:	4603      	mov	r3, r0
    ee7c:	ee19 0a10 	vmov	r0, s18
    ee80:	461d      	mov	r5, r3
    ee82:	9315      	str	r3, [sp, #84]	; 0x54
    ee84:	f017 fedc 	bl	26c40 <_localeconv_r>
    ee88:	6882      	ldr	r2, [r0, #8]
    ee8a:	9217      	str	r2, [sp, #92]	; 0x5c
    ee8c:	2d00      	cmp	r5, #0
    ee8e:	f43f adfc 	beq.w	ea8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a>
    ee92:	2a00      	cmp	r2, #0
    ee94:	f43f adf9 	beq.w	ea8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a>
    ee98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ee9a:	781b      	ldrb	r3, [r3, #0]
    ee9c:	2b00      	cmp	r3, #0
    ee9e:	f43f adf4 	beq.w	ea8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a>
    eea2:	9b03      	ldr	r3, [sp, #12]
    eea4:	f897 9000 	ldrb.w	r9, [r7]
    eea8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    eeac:	9303      	str	r3, [sp, #12]
    eeae:	e575      	b.n	e99c <_svfprintf_r+0xbc>
    eeb0:	9b03      	ldr	r3, [sp, #12]
    eeb2:	f897 9000 	ldrb.w	r9, [r7]
    eeb6:	f043 0301 	orr.w	r3, r3, #1
    eeba:	9303      	str	r3, [sp, #12]
    eebc:	e56e      	b.n	e99c <_svfprintf_r+0xbc>
    eebe:	9b03      	ldr	r3, [sp, #12]
    eec0:	f043 0b10 	orr.w	fp, r3, #16
    eec4:	f01b 0f20 	tst.w	fp, #32
    eec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    eeca:	f000 83b2 	beq.w	f632 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbd2>
    eece:	3207      	adds	r2, #7
    eed0:	2301      	movs	r3, #1
    eed2:	f022 0207 	bic.w	r2, r2, #7
    eed6:	e8f2 4502 	ldrd	r4, r5, [r2], #8
    eeda:	9209      	str	r2, [sp, #36]	; 0x24
    eedc:	e620      	b.n	eb20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc0>
    eede:	9b03      	ldr	r3, [sp, #12]
    eee0:	f897 9000 	ldrb.w	r9, [r7]
    eee4:	f043 0308 	orr.w	r3, r3, #8
    eee8:	9303      	str	r3, [sp, #12]
    eeea:	e557      	b.n	e99c <_svfprintf_r+0xbc>
    eeec:	9a09      	ldr	r2, [sp, #36]	; 0x24
    eeee:	f647 0130 	movw	r1, #30768	; 0x7830
    eef2:	9b03      	ldr	r3, [sp, #12]
    eef4:	f04f 0978 	mov.w	r9, #120	; 0x78
    eef8:	f852 4b04 	ldr.w	r4, [r2], #4
    eefc:	2500      	movs	r5, #0
    eefe:	f043 0b02 	orr.w	fp, r3, #2
    ef02:	4b1d      	ldr	r3, [pc, #116]	; (ef78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x518>)
    ef04:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
    ef08:	9312      	str	r3, [sp, #72]	; 0x48
    ef0a:	2302      	movs	r3, #2
    ef0c:	9209      	str	r2, [sp, #36]	; 0x24
    ef0e:	e607      	b.n	eb20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc0>
    ef10:	9b03      	ldr	r3, [sp, #12]
    ef12:	0699      	lsls	r1, r3, #26
    ef14:	f100 83d8 	bmi.w	f6c8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc68>
    ef18:	9b03      	ldr	r3, [sp, #12]
    ef1a:	06da      	lsls	r2, r3, #27
    ef1c:	f100 86c9 	bmi.w	fcb2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1252>
    ef20:	9b03      	ldr	r3, [sp, #12]
    ef22:	065b      	lsls	r3, r3, #25
    ef24:	f101 8009 	bmi.w	ff3a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14da>
    ef28:	9b03      	ldr	r3, [sp, #12]
    ef2a:	059e      	lsls	r6, r3, #22
    ef2c:	f140 86c1 	bpl.w	fcb2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1252>
    ef30:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ef32:	9905      	ldr	r1, [sp, #20]
    ef34:	f853 2b04 	ldr.w	r2, [r3], #4
    ef38:	7011      	strb	r1, [r2, #0]
    ef3a:	9309      	str	r3, [sp, #36]	; 0x24
    ef3c:	e500      	b.n	e940 <_svfprintf_r+0x60>
    ef3e:	f897 9000 	ldrb.w	r9, [r7]
    ef42:	9b03      	ldr	r3, [sp, #12]
    ef44:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    ef48:	f000 84b7 	beq.w	f8ba <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe5a>
    ef4c:	f043 0310 	orr.w	r3, r3, #16
    ef50:	9303      	str	r3, [sp, #12]
    ef52:	e523      	b.n	e99c <_svfprintf_r+0xbc>
    ef54:	f897 9000 	ldrb.w	r9, [r7]
    ef58:	9b03      	ldr	r3, [sp, #12]
    ef5a:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    ef5e:	f000 84b4 	beq.w	f8ca <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe6a>
    ef62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ef66:	9303      	str	r3, [sp, #12]
    ef68:	e518      	b.n	e99c <_svfprintf_r+0xbc>
    ef6a:	bf00      	nop
    ef6c:	7fefffff 	.word	0x7fefffff
    ef70:	0002c0dc 	.word	0x0002c0dc
    ef74:	0002c0e0 	.word	0x0002c0e0
    ef78:	0002c0ec 	.word	0x0002c0ec
    ef7c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    ef80:	f340 8137 	ble.w	f1f2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x792>
    ef84:	2200      	movs	r2, #0
    ef86:	2300      	movs	r3, #0
    ef88:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    ef8c:	f7fd fb6a 	bl	c664 <__aeabi_dcmpeq>
    ef90:	2800      	cmp	r0, #0
    ef92:	f000 8247 	beq.w	f424 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9c4>
    ef96:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ef98:	2201      	movs	r2, #1
    ef9a:	3401      	adds	r4, #1
    ef9c:	49ca      	ldr	r1, [pc, #808]	; (f2c8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x868>)
    ef9e:	4413      	add	r3, r2
    efa0:	f8c8 2004 	str.w	r2, [r8, #4]
    efa4:	9426      	str	r4, [sp, #152]	; 0x98
    efa6:	2b07      	cmp	r3, #7
    efa8:	f8c8 1000 	str.w	r1, [r8]
    efac:	9325      	str	r3, [sp, #148]	; 0x94
    efae:	f300 85fe 	bgt.w	fbae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x114e>
    efb2:	f108 0808 	add.w	r8, r8, #8
    efb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    efb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    efba:	4293      	cmp	r3, r2
    efbc:	f280 837a 	bge.w	f6b4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc54>
    efc0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    efc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    efc4:	3301      	adds	r3, #1
    efc6:	9911      	ldr	r1, [sp, #68]	; 0x44
    efc8:	4414      	add	r4, r2
    efca:	f8c8 2004 	str.w	r2, [r8, #4]
    efce:	2b07      	cmp	r3, #7
    efd0:	f8c8 1000 	str.w	r1, [r8]
    efd4:	9426      	str	r4, [sp, #152]	; 0x98
    efd6:	9325      	str	r3, [sp, #148]	; 0x94
    efd8:	f300 847f 	bgt.w	f8da <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe7a>
    efdc:	f108 0808 	add.w	r8, r8, #8
    efe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    efe2:	1e5e      	subs	r6, r3, #1
    efe4:	2e00      	cmp	r6, #0
    efe6:	f77f ae4a 	ble.w	ec7e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x21e>
    efea:	2e10      	cmp	r6, #16
    efec:	9b25      	ldr	r3, [sp, #148]	; 0x94
    efee:	f340 85ef 	ble.w	fbd0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1170>
    eff2:	f04f 0910 	mov.w	r9, #16
    eff6:	4db5      	ldr	r5, [pc, #724]	; (f2cc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x86c>)
    eff8:	ee19 aa10 	vmov	sl, s18
    effc:	ee19 ba90 	vmov	fp, s19
    f000:	e003      	b.n	f00a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5aa>
    f002:	3e10      	subs	r6, #16
    f004:	2e10      	cmp	r6, #16
    f006:	f340 85e4 	ble.w	fbd2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1172>
    f00a:	3301      	adds	r3, #1
    f00c:	3410      	adds	r4, #16
    f00e:	f8c8 5000 	str.w	r5, [r8]
    f012:	f108 0808 	add.w	r8, r8, #8
    f016:	2b07      	cmp	r3, #7
    f018:	f848 9c04 	str.w	r9, [r8, #-4]
    f01c:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f020:	ddef      	ble.n	f002 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5a2>
    f022:	aa24      	add	r2, sp, #144	; 0x90
    f024:	4659      	mov	r1, fp
    f026:	4650      	mov	r0, sl
    f028:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f02c:	f018 fee2 	bl	27df4 <__ssprint_r>
    f030:	2800      	cmp	r0, #0
    f032:	f041 804e 	bne.w	100d2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xd2>
    f036:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
    f03a:	e7e2      	b.n	f002 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5a2>
    f03c:	9b06      	ldr	r3, [sp, #24]
    f03e:	9a04      	ldr	r2, [sp, #16]
    f040:	eba3 0b02 	sub.w	fp, r3, r2
    f044:	f1bb 0f00 	cmp.w	fp, #0
    f048:	f77f adff 	ble.w	ec4a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ea>
    f04c:	f1bb 0f10 	cmp.w	fp, #16
    f050:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f052:	f341 8118 	ble.w	10286 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x286>
    f056:	4620      	mov	r0, r4
    f058:	9613      	str	r6, [sp, #76]	; 0x4c
    f05a:	2310      	movs	r3, #16
    f05c:	4d9b      	ldr	r5, [pc, #620]	; (f2cc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x86c>)
    f05e:	ee19 4a10 	vmov	r4, s18
    f062:	ee19 6a90 	vmov	r6, s19
    f066:	e004      	b.n	f072 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x612>
    f068:	f1ab 0b10 	sub.w	fp, fp, #16
    f06c:	f1bb 0f10 	cmp.w	fp, #16
    f070:	dd1d      	ble.n	f0ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64e>
    f072:	3201      	adds	r2, #1
    f074:	3010      	adds	r0, #16
    f076:	f8c8 5000 	str.w	r5, [r8]
    f07a:	f108 0808 	add.w	r8, r8, #8
    f07e:	2a07      	cmp	r2, #7
    f080:	f848 3c04 	str.w	r3, [r8, #-4]
    f084:	e9cd 2025 	strd	r2, r0, [sp, #148]	; 0x94
    f088:	ddee      	ble.n	f068 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x608>
    f08a:	aa24      	add	r2, sp, #144	; 0x90
    f08c:	4631      	mov	r1, r6
    f08e:	4620      	mov	r0, r4
    f090:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f094:	f018 feae 	bl	27df4 <__ssprint_r>
    f098:	2800      	cmp	r0, #0
    f09a:	f040 824c 	bne.w	f536 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xad6>
    f09e:	f1ab 0b10 	sub.w	fp, fp, #16
    f0a2:	2310      	movs	r3, #16
    f0a4:	f1bb 0f10 	cmp.w	fp, #16
    f0a8:	e9dd 2025 	ldrd	r2, r0, [sp, #148]	; 0x94
    f0ac:	dce1      	bgt.n	f072 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x612>
    f0ae:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    f0b0:	4604      	mov	r4, r0
    f0b2:	3201      	adds	r2, #1
    f0b4:	445c      	add	r4, fp
    f0b6:	f8c8 5000 	str.w	r5, [r8]
    f0ba:	2a07      	cmp	r2, #7
    f0bc:	f8c8 b004 	str.w	fp, [r8, #4]
    f0c0:	e9cd 2425 	strd	r2, r4, [sp, #148]	; 0x94
    f0c4:	f300 85d8 	bgt.w	fc78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1218>
    f0c8:	9b07      	ldr	r3, [sp, #28]
    f0ca:	f108 0808 	add.w	r8, r8, #8
    f0ce:	ebaa 0a03 	sub.w	sl, sl, r3
    f0d2:	f1ba 0f00 	cmp.w	sl, #0
    f0d6:	f77f adbf 	ble.w	ec58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f8>
    f0da:	f1ba 0f10 	cmp.w	sl, #16
    f0de:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f0e0:	f340 8643 	ble.w	fd6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x130a>
    f0e4:	4622      	mov	r2, r4
    f0e6:	9613      	str	r6, [sp, #76]	; 0x4c
    f0e8:	f04f 0b10 	mov.w	fp, #16
    f0ec:	4d77      	ldr	r5, [pc, #476]	; (f2cc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x86c>)
    f0ee:	ee19 4a10 	vmov	r4, s18
    f0f2:	ee19 6a90 	vmov	r6, s19
    f0f6:	e004      	b.n	f102 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6a2>
    f0f8:	f1aa 0a10 	sub.w	sl, sl, #16
    f0fc:	f1ba 0f10 	cmp.w	sl, #16
    f100:	dd1c      	ble.n	f13c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6dc>
    f102:	3301      	adds	r3, #1
    f104:	3210      	adds	r2, #16
    f106:	f8c8 5000 	str.w	r5, [r8]
    f10a:	f108 0808 	add.w	r8, r8, #8
    f10e:	2b07      	cmp	r3, #7
    f110:	f848 bc04 	str.w	fp, [r8, #-4]
    f114:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f118:	ddee      	ble.n	f0f8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x698>
    f11a:	aa24      	add	r2, sp, #144	; 0x90
    f11c:	4631      	mov	r1, r6
    f11e:	4620      	mov	r0, r4
    f120:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f124:	f018 fe66 	bl	27df4 <__ssprint_r>
    f128:	2800      	cmp	r0, #0
    f12a:	f040 8204 	bne.w	f536 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xad6>
    f12e:	f1aa 0a10 	sub.w	sl, sl, #16
    f132:	f1ba 0f10 	cmp.w	sl, #16
    f136:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f13a:	dce2      	bgt.n	f102 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6a2>
    f13c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    f13e:	4614      	mov	r4, r2
    f140:	3301      	adds	r3, #1
    f142:	4454      	add	r4, sl
    f144:	f8c8 5000 	str.w	r5, [r8]
    f148:	2b07      	cmp	r3, #7
    f14a:	f8c8 a004 	str.w	sl, [r8, #4]
    f14e:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f152:	f300 825f 	bgt.w	f614 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbb4>
    f156:	f108 0808 	add.w	r8, r8, #8
    f15a:	e57d      	b.n	ec58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f8>
    f15c:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f160:	2b01      	cmp	r3, #1
    f162:	f000 814f 	beq.w	f404 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9a4>
    f166:	2b02      	cmp	r3, #2
    f168:	ae50      	add	r6, sp, #320	; 0x140
    f16a:	d114      	bne.n	f196 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x736>
    f16c:	9812      	ldr	r0, [sp, #72]	; 0x48
    f16e:	0923      	lsrs	r3, r4, #4
    f170:	f004 010f 	and.w	r1, r4, #15
    f174:	092a      	lsrs	r2, r5, #4
    f176:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    f17a:	4615      	mov	r5, r2
    f17c:	461c      	mov	r4, r3
    f17e:	5c43      	ldrb	r3, [r0, r1]
    f180:	f806 3d01 	strb.w	r3, [r6, #-1]!
    f184:	ea54 0305 	orrs.w	r3, r4, r5
    f188:	d1f1      	bne.n	f16e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x70e>
    f18a:	ab50      	add	r3, sp, #320	; 0x140
    f18c:	f8cd b00c 	str.w	fp, [sp, #12]
    f190:	1b9b      	subs	r3, r3, r6
    f192:	9307      	str	r3, [sp, #28]
    f194:	e4e8      	b.n	eb68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x108>
    f196:	08e2      	lsrs	r2, r4, #3
    f198:	f004 0307 	and.w	r3, r4, #7
    f19c:	08e9      	lsrs	r1, r5, #3
    f19e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    f1a2:	3330      	adds	r3, #48	; 0x30
    f1a4:	460d      	mov	r5, r1
    f1a6:	4614      	mov	r4, r2
    f1a8:	4632      	mov	r2, r6
    f1aa:	f806 3d01 	strb.w	r3, [r6, #-1]!
    f1ae:	ea54 0105 	orrs.w	r1, r4, r5
    f1b2:	d1f0      	bne.n	f196 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x736>
    f1b4:	2b30      	cmp	r3, #48	; 0x30
    f1b6:	d0e8      	beq.n	f18a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x72a>
    f1b8:	f01b 0f01 	tst.w	fp, #1
    f1bc:	d0e5      	beq.n	f18a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x72a>
    f1be:	2330      	movs	r3, #48	; 0x30
    f1c0:	3a02      	subs	r2, #2
    f1c2:	f8cd b00c 	str.w	fp, [sp, #12]
    f1c6:	f806 3c01 	strb.w	r3, [r6, #-1]
    f1ca:	ab50      	add	r3, sp, #320	; 0x140
    f1cc:	4616      	mov	r6, r2
    f1ce:	1a9b      	subs	r3, r3, r2
    f1d0:	9307      	str	r3, [sp, #28]
    f1d2:	e4c9      	b.n	eb68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x108>
    f1d4:	aa24      	add	r2, sp, #144	; 0x90
    f1d6:	ee19 1a90 	vmov	r1, s19
    f1da:	ee19 0a10 	vmov	r0, s18
    f1de:	f018 fe09 	bl	27df4 <__ssprint_r>
    f1e2:	2800      	cmp	r0, #0
    f1e4:	f43f ad5f 	beq.w	eca6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x246>
    f1e8:	ee19 9a10 	vmov	r9, s18
    f1ec:	ee19 ba90 	vmov	fp, s19
    f1f0:	e1a3      	b.n	f53a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xada>
    f1f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f1f4:	2b01      	cmp	r3, #1
    f1f6:	f340 81b9 	ble.w	f56c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb0c>
    f1fa:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f1fc:	2201      	movs	r2, #1
    f1fe:	3401      	adds	r4, #1
    f200:	f8c8 6000 	str.w	r6, [r8]
    f204:	4413      	add	r3, r2
    f206:	f8c8 2004 	str.w	r2, [r8, #4]
    f20a:	9426      	str	r4, [sp, #152]	; 0x98
    f20c:	2b07      	cmp	r3, #7
    f20e:	9325      	str	r3, [sp, #148]	; 0x94
    f210:	f300 8241 	bgt.w	f696 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc36>
    f214:	f108 0808 	add.w	r8, r8, #8
    f218:	f103 0901 	add.w	r9, r3, #1
    f21c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f21e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f220:	4414      	add	r4, r2
    f222:	f1b9 0f07 	cmp.w	r9, #7
    f226:	f8c8 3000 	str.w	r3, [r8]
    f22a:	f8c8 2004 	str.w	r2, [r8, #4]
    f22e:	e9cd 9425 	strd	r9, r4, [sp, #148]	; 0x94
    f232:	f300 8220 	bgt.w	f676 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc16>
    f236:	f108 0808 	add.w	r8, r8, #8
    f23a:	2300      	movs	r3, #0
    f23c:	2200      	movs	r2, #0
    f23e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    f242:	f7fd fa0f 	bl	c664 <__aeabi_dcmpeq>
    f246:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f248:	2800      	cmp	r0, #0
    f24a:	f040 81b3 	bne.w	f5b4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb54>
    f24e:	3b01      	subs	r3, #1
    f250:	f109 0901 	add.w	r9, r9, #1
    f254:	3601      	adds	r6, #1
    f256:	441c      	add	r4, r3
    f258:	f1b9 0f07 	cmp.w	r9, #7
    f25c:	f8c8 6000 	str.w	r6, [r8]
    f260:	f8c8 3004 	str.w	r3, [r8, #4]
    f264:	e9cd 9425 	strd	r9, r4, [sp, #148]	; 0x94
    f268:	f300 8194 	bgt.w	f594 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb34>
    f26c:	f108 0808 	add.w	r8, r8, #8
    f270:	9914      	ldr	r1, [sp, #80]	; 0x50
    f272:	f109 0301 	add.w	r3, r9, #1
    f276:	aa20      	add	r2, sp, #128	; 0x80
    f278:	440c      	add	r4, r1
    f27a:	2b07      	cmp	r3, #7
    f27c:	f8c8 1004 	str.w	r1, [r8, #4]
    f280:	f8c8 2000 	str.w	r2, [r8]
    f284:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f288:	f77f acf7 	ble.w	ec7a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x21a>
    f28c:	aa24      	add	r2, sp, #144	; 0x90
    f28e:	ee19 1a90 	vmov	r1, s19
    f292:	ee19 0a10 	vmov	r0, s18
    f296:	f018 fdad 	bl	27df4 <__ssprint_r>
    f29a:	2800      	cmp	r0, #0
    f29c:	d1a4      	bne.n	f1e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x788>
    f29e:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f2a0:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f2a4:	e4eb      	b.n	ec7e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x21e>
    f2a6:	2d10      	cmp	r5, #16
    f2a8:	9926      	ldr	r1, [sp, #152]	; 0x98
    f2aa:	f340 87a0 	ble.w	101ee <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1ee>
    f2ae:	9618      	str	r6, [sp, #96]	; 0x60
    f2b0:	2410      	movs	r4, #16
    f2b2:	462e      	mov	r6, r5
    f2b4:	9719      	str	r7, [sp, #100]	; 0x64
    f2b6:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f2b8:	4608      	mov	r0, r1
    f2ba:	ee19 5a10 	vmov	r5, s18
    f2be:	ee19 7a90 	vmov	r7, s19
    f2c2:	9313      	str	r3, [sp, #76]	; 0x4c
    f2c4:	e007      	b.n	f2d6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x876>
    f2c6:	bf00      	nop
    f2c8:	0002c11c 	.word	0x0002c11c
    f2cc:	0002c130 	.word	0x0002c130
    f2d0:	3e10      	subs	r6, #16
    f2d2:	2e10      	cmp	r6, #16
    f2d4:	dd1b      	ble.n	f30e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8ae>
    f2d6:	3201      	adds	r2, #1
    f2d8:	3010      	adds	r0, #16
    f2da:	4bbe      	ldr	r3, [pc, #760]	; (f5d4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb74>)
    f2dc:	f108 0808 	add.w	r8, r8, #8
    f2e0:	2a07      	cmp	r2, #7
    f2e2:	f848 4c04 	str.w	r4, [r8, #-4]
    f2e6:	f848 3c08 	str.w	r3, [r8, #-8]
    f2ea:	e9cd 2025 	strd	r2, r0, [sp, #148]	; 0x94
    f2ee:	ddef      	ble.n	f2d0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x870>
    f2f0:	aa24      	add	r2, sp, #144	; 0x90
    f2f2:	4639      	mov	r1, r7
    f2f4:	4628      	mov	r0, r5
    f2f6:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f2fa:	f018 fd7b 	bl	27df4 <__ssprint_r>
    f2fe:	2800      	cmp	r0, #0
    f300:	f040 8447 	bne.w	fb92 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1132>
    f304:	3e10      	subs	r6, #16
    f306:	2e10      	cmp	r6, #16
    f308:	e9dd 2025 	ldrd	r2, r0, [sp, #148]	; 0x94
    f30c:	dce3      	bgt.n	f2d6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x876>
    f30e:	4635      	mov	r5, r6
    f310:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f312:	9e18      	ldr	r6, [sp, #96]	; 0x60
    f314:	4601      	mov	r1, r0
    f316:	9f19      	ldr	r7, [sp, #100]	; 0x64
    f318:	3201      	adds	r2, #1
    f31a:	186c      	adds	r4, r5, r1
    f31c:	49ad      	ldr	r1, [pc, #692]	; (f5d4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb74>)
    f31e:	2a07      	cmp	r2, #7
    f320:	f8c8 5004 	str.w	r5, [r8, #4]
    f324:	f8c8 1000 	str.w	r1, [r8]
    f328:	e9cd 2425 	strd	r2, r4, [sp, #148]	; 0x94
    f32c:	f300 841e 	bgt.w	fb6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x110c>
    f330:	f108 0808 	add.w	r8, r8, #8
    f334:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    f338:	e460      	b.n	ebfc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x19c>
    f33a:	aa24      	add	r2, sp, #144	; 0x90
    f33c:	ee19 1a90 	vmov	r1, s19
    f340:	ee19 0a10 	vmov	r0, s18
    f344:	9313      	str	r3, [sp, #76]	; 0x4c
    f346:	f018 fd55 	bl	27df4 <__ssprint_r>
    f34a:	2800      	cmp	r0, #0
    f34c:	f47f af4c 	bne.w	f1e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x788>
    f350:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f352:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f356:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f358:	e462      	b.n	ec20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c0>
    f35a:	aa24      	add	r2, sp, #144	; 0x90
    f35c:	ee19 1a90 	vmov	r1, s19
    f360:	ee19 0a10 	vmov	r0, s18
    f364:	f018 fd46 	bl	27df4 <__ssprint_r>
    f368:	2800      	cmp	r0, #0
    f36a:	f47f af3d 	bne.w	f1e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x788>
    f36e:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f370:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f374:	e465      	b.n	ec42 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1e2>
    f376:	2d10      	cmp	r5, #16
    f378:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f37a:	dd24      	ble.n	f3c6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x966>
    f37c:	2610      	movs	r6, #16
    f37e:	ee19 9a10 	vmov	r9, s18
    f382:	ee19 aa90 	vmov	sl, s19
    f386:	e002      	b.n	f38e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x92e>
    f388:	3d10      	subs	r5, #16
    f38a:	2d10      	cmp	r5, #16
    f38c:	dd1b      	ble.n	f3c6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x966>
    f38e:	3301      	adds	r3, #1
    f390:	3410      	adds	r4, #16
    f392:	4a90      	ldr	r2, [pc, #576]	; (f5d4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb74>)
    f394:	f108 0808 	add.w	r8, r8, #8
    f398:	2b07      	cmp	r3, #7
    f39a:	f848 6c04 	str.w	r6, [r8, #-4]
    f39e:	f848 2c08 	str.w	r2, [r8, #-8]
    f3a2:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f3a6:	ddef      	ble.n	f388 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x928>
    f3a8:	aa24      	add	r2, sp, #144	; 0x90
    f3aa:	4651      	mov	r1, sl
    f3ac:	4648      	mov	r0, r9
    f3ae:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f3b2:	f018 fd1f 	bl	27df4 <__ssprint_r>
    f3b6:	2800      	cmp	r0, #0
    f3b8:	f040 8408 	bne.w	fbcc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x116c>
    f3bc:	3d10      	subs	r5, #16
    f3be:	2d10      	cmp	r5, #16
    f3c0:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
    f3c4:	dce3      	bgt.n	f38e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x92e>
    f3c6:	3301      	adds	r3, #1
    f3c8:	442c      	add	r4, r5
    f3ca:	4a82      	ldr	r2, [pc, #520]	; (f5d4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb74>)
    f3cc:	2b07      	cmp	r3, #7
    f3ce:	f8c8 5004 	str.w	r5, [r8, #4]
    f3d2:	f8c8 2000 	str.w	r2, [r8]
    f3d6:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f3da:	f77f ac59 	ble.w	ec90 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x230>
    f3de:	aa24      	add	r2, sp, #144	; 0x90
    f3e0:	ee19 1a90 	vmov	r1, s19
    f3e4:	ee19 0a10 	vmov	r0, s18
    f3e8:	f018 fd04 	bl	27df4 <__ssprint_r>
    f3ec:	2800      	cmp	r0, #0
    f3ee:	f47f aefb 	bne.w	f1e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x788>
    f3f2:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f3f4:	e44c      	b.n	ec90 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x230>
    f3f6:	4692      	mov	sl, r2
    f3f8:	ae50      	add	r6, sp, #320	; 0x140
    f3fa:	9207      	str	r2, [sp, #28]
    f3fc:	f7ff bbb4 	b.w	eb68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x108>
    f400:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f404:	2d00      	cmp	r5, #0
    f406:	bf08      	it	eq
    f408:	2c0a      	cmpeq	r4, #10
    f40a:	f080 83ef 	bcs.w	fbec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x118c>
    f40e:	3430      	adds	r4, #48	; 0x30
    f410:	2301      	movs	r3, #1
    f412:	f20d 163f 	addw	r6, sp, #319	; 0x13f
    f416:	f8cd b00c 	str.w	fp, [sp, #12]
    f41a:	9307      	str	r3, [sp, #28]
    f41c:	f88d 413f 	strb.w	r4, [sp, #319]	; 0x13f
    f420:	f7ff bba2 	b.w	eb68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x108>
    f424:	991e      	ldr	r1, [sp, #120]	; 0x78
    f426:	2900      	cmp	r1, #0
    f428:	f340 836b 	ble.w	fb02 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10a2>
    f42c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f42e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f430:	4293      	cmp	r3, r2
    f432:	bfa8      	it	ge
    f434:	4613      	movge	r3, r2
    f436:	2b00      	cmp	r3, #0
    f438:	461d      	mov	r5, r3
    f43a:	dd0d      	ble.n	f458 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9f8>
    f43c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f43e:	442c      	add	r4, r5
    f440:	f8c8 6000 	str.w	r6, [r8]
    f444:	3301      	adds	r3, #1
    f446:	9426      	str	r4, [sp, #152]	; 0x98
    f448:	f8c8 5004 	str.w	r5, [r8, #4]
    f44c:	2b07      	cmp	r3, #7
    f44e:	9325      	str	r3, [sp, #148]	; 0x94
    f450:	f300 8630 	bgt.w	100b4 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xb4>
    f454:	f108 0808 	add.w	r8, r8, #8
    f458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f45a:	2d00      	cmp	r5, #0
    f45c:	bfa8      	it	ge
    f45e:	1b5b      	subge	r3, r3, r5
    f460:	2b00      	cmp	r3, #0
    f462:	4699      	mov	r9, r3
    f464:	f300 8269 	bgt.w	f93a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xeda>
    f468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f46a:	4433      	add	r3, r6
    f46c:	469b      	mov	fp, r3
    f46e:	9b03      	ldr	r3, [sp, #12]
    f470:	055b      	lsls	r3, r3, #21
    f472:	f100 828f 	bmi.w	f994 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf34>
    f476:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f478:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f47a:	4293      	cmp	r3, r2
    f47c:	db03      	blt.n	f486 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa26>
    f47e:	9a03      	ldr	r2, [sp, #12]
    f480:	07d5      	lsls	r5, r2, #31
    f482:	f140 8550 	bpl.w	ff26 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14c6>
    f486:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f488:	9910      	ldr	r1, [sp, #64]	; 0x40
    f48a:	3201      	adds	r2, #1
    f48c:	9811      	ldr	r0, [sp, #68]	; 0x44
    f48e:	440c      	add	r4, r1
    f490:	f8c8 1004 	str.w	r1, [r8, #4]
    f494:	2a07      	cmp	r2, #7
    f496:	f8c8 0000 	str.w	r0, [r8]
    f49a:	9426      	str	r4, [sp, #152]	; 0x98
    f49c:	9225      	str	r2, [sp, #148]	; 0x94
    f49e:	f300 861e 	bgt.w	100de <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xde>
    f4a2:	f108 0808 	add.w	r8, r8, #8
    f4a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f4a8:	4416      	add	r6, r2
    f4aa:	1ad3      	subs	r3, r2, r3
    f4ac:	eba6 060b 	sub.w	r6, r6, fp
    f4b0:	429e      	cmp	r6, r3
    f4b2:	bfa8      	it	ge
    f4b4:	461e      	movge	r6, r3
    f4b6:	2e00      	cmp	r6, #0
    f4b8:	dd0d      	ble.n	f4d6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa76>
    f4ba:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f4bc:	4434      	add	r4, r6
    f4be:	f8c8 b000 	str.w	fp, [r8]
    f4c2:	3201      	adds	r2, #1
    f4c4:	9426      	str	r4, [sp, #152]	; 0x98
    f4c6:	f8c8 6004 	str.w	r6, [r8, #4]
    f4ca:	2a07      	cmp	r2, #7
    f4cc:	9225      	str	r2, [sp, #148]	; 0x94
    f4ce:	f300 867c 	bgt.w	101ca <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1ca>
    f4d2:	f108 0808 	add.w	r8, r8, #8
    f4d6:	2e00      	cmp	r6, #0
    f4d8:	bfac      	ite	ge
    f4da:	1b9e      	subge	r6, r3, r6
    f4dc:	461e      	movlt	r6, r3
    f4de:	2e00      	cmp	r6, #0
    f4e0:	f77f abcd 	ble.w	ec7e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x21e>
    f4e4:	2e10      	cmp	r6, #16
    f4e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f4e8:	f340 8372 	ble.w	fbd0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1170>
    f4ec:	f04f 0910 	mov.w	r9, #16
    f4f0:	4d39      	ldr	r5, [pc, #228]	; (f5d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb78>)
    f4f2:	ee19 aa10 	vmov	sl, s18
    f4f6:	ee19 ba90 	vmov	fp, s19
    f4fa:	e003      	b.n	f504 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xaa4>
    f4fc:	3e10      	subs	r6, #16
    f4fe:	2e10      	cmp	r6, #16
    f500:	f340 8367 	ble.w	fbd2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1172>
    f504:	3301      	adds	r3, #1
    f506:	3410      	adds	r4, #16
    f508:	f8c8 5000 	str.w	r5, [r8]
    f50c:	f108 0808 	add.w	r8, r8, #8
    f510:	2b07      	cmp	r3, #7
    f512:	f848 9c04 	str.w	r9, [r8, #-4]
    f516:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f51a:	ddef      	ble.n	f4fc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa9c>
    f51c:	aa24      	add	r2, sp, #144	; 0x90
    f51e:	4659      	mov	r1, fp
    f520:	4650      	mov	r0, sl
    f522:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f526:	f018 fc65 	bl	27df4 <__ssprint_r>
    f52a:	2800      	cmp	r0, #0
    f52c:	f040 85d1 	bne.w	100d2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xd2>
    f530:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
    f534:	e7e2      	b.n	f4fc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa9c>
    f536:	46a1      	mov	r9, r4
    f538:	46b3      	mov	fp, r6
    f53a:	9b08      	ldr	r3, [sp, #32]
    f53c:	b11b      	cbz	r3, f546 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xae6>
    f53e:	9908      	ldr	r1, [sp, #32]
    f540:	4648      	mov	r0, r9
    f542:	f016 fccb 	bl	25edc <_free_r>
    f546:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    f54a:	f013 0f40 	tst.w	r3, #64	; 0x40
    f54e:	9b05      	ldr	r3, [sp, #20]
    f550:	bf18      	it	ne
    f552:	f04f 33ff 	movne.w	r3, #4294967295
    f556:	9305      	str	r3, [sp, #20]
    f558:	9805      	ldr	r0, [sp, #20]
    f55a:	b051      	add	sp, #324	; 0x144
    f55c:	ecbd 8b08 	vpop	{d8-d11}
    f560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f564:	469a      	mov	sl, r3
    f566:	ae50      	add	r6, sp, #320	; 0x140
    f568:	f7ff bafe 	b.w	eb68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x108>
    f56c:	9b03      	ldr	r3, [sp, #12]
    f56e:	07d8      	lsls	r0, r3, #31
    f570:	f53f ae43 	bmi.w	f1fa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x79a>
    f574:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f576:	2301      	movs	r3, #1
    f578:	3401      	adds	r4, #1
    f57a:	f8c8 6000 	str.w	r6, [r8]
    f57e:	eb02 0903 	add.w	r9, r2, r3
    f582:	f8c8 3004 	str.w	r3, [r8, #4]
    f586:	9426      	str	r4, [sp, #152]	; 0x98
    f588:	f1b9 0f07 	cmp.w	r9, #7
    f58c:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
    f590:	f77f ae6c 	ble.w	f26c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x80c>
    f594:	aa24      	add	r2, sp, #144	; 0x90
    f596:	ee19 1a90 	vmov	r1, s19
    f59a:	ee19 0a10 	vmov	r0, s18
    f59e:	f018 fc29 	bl	27df4 <__ssprint_r>
    f5a2:	2800      	cmp	r0, #0
    f5a4:	f47f ae20 	bne.w	f1e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x788>
    f5a8:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f5aa:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f5ae:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
    f5b2:	e65d      	b.n	f270 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x810>
    f5b4:	1e5e      	subs	r6, r3, #1
    f5b6:	2e00      	cmp	r6, #0
    f5b8:	f77f ae5a 	ble.w	f270 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x810>
    f5bc:	2e10      	cmp	r6, #16
    f5be:	4d06      	ldr	r5, [pc, #24]	; (f5d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb78>)
    f5c0:	f340 83a0 	ble.w	fd04 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12a4>
    f5c4:	464b      	mov	r3, r9
    f5c6:	f04f 0a10 	mov.w	sl, #16
    f5ca:	ee19 9a10 	vmov	r9, s18
    f5ce:	ee19 ba90 	vmov	fp, s19
    f5d2:	e007      	b.n	f5e4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb84>
    f5d4:	0002c120 	.word	0x0002c120
    f5d8:	0002c130 	.word	0x0002c130
    f5dc:	3e10      	subs	r6, #16
    f5de:	2e10      	cmp	r6, #16
    f5e0:	f340 838f 	ble.w	fd02 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12a2>
    f5e4:	3301      	adds	r3, #1
    f5e6:	3410      	adds	r4, #16
    f5e8:	f8c8 5000 	str.w	r5, [r8]
    f5ec:	f108 0808 	add.w	r8, r8, #8
    f5f0:	2b07      	cmp	r3, #7
    f5f2:	f848 ac04 	str.w	sl, [r8, #-4]
    f5f6:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f5fa:	ddef      	ble.n	f5dc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb7c>
    f5fc:	aa24      	add	r2, sp, #144	; 0x90
    f5fe:	4659      	mov	r1, fp
    f600:	4648      	mov	r0, r9
    f602:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f606:	f018 fbf5 	bl	27df4 <__ssprint_r>
    f60a:	2800      	cmp	r0, #0
    f60c:	d195      	bne.n	f53a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xada>
    f60e:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
    f612:	e7e3      	b.n	f5dc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb7c>
    f614:	aa24      	add	r2, sp, #144	; 0x90
    f616:	ee19 1a90 	vmov	r1, s19
    f61a:	ee19 0a10 	vmov	r0, s18
    f61e:	f018 fbe9 	bl	27df4 <__ssprint_r>
    f622:	2800      	cmp	r0, #0
    f624:	f47f ade0 	bne.w	f1e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x788>
    f628:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f62a:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f62e:	f7ff bb13 	b.w	ec58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f8>
    f632:	f852 4b04 	ldr.w	r4, [r2], #4
    f636:	f01b 0f10 	tst.w	fp, #16
    f63a:	f04f 0301 	mov.w	r3, #1
    f63e:	9209      	str	r2, [sp, #36]	; 0x24
    f640:	d10a      	bne.n	f658 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbf8>
    f642:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f646:	d003      	beq.n	f650 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbf0>
    f648:	b2a4      	uxth	r4, r4
    f64a:	2500      	movs	r5, #0
    f64c:	f7ff ba68 	b.w	eb20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc0>
    f650:	f41b 7f00 	tst.w	fp, #512	; 0x200
    f654:	bf18      	it	ne
    f656:	b2e4      	uxtbne	r4, r4
    f658:	2500      	movs	r5, #0
    f65a:	f7ff ba61 	b.w	eb20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc0>
    f65e:	222d      	movs	r2, #45	; 0x2d
    f660:	4264      	negs	r4, r4
    f662:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f666:	f04f 0301 	mov.w	r3, #1
    f66a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    f66e:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
    f672:	f7ff ba58 	b.w	eb26 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc6>
    f676:	aa24      	add	r2, sp, #144	; 0x90
    f678:	ee19 1a90 	vmov	r1, s19
    f67c:	ee19 0a10 	vmov	r0, s18
    f680:	f018 fbb8 	bl	27df4 <__ssprint_r>
    f684:	2800      	cmp	r0, #0
    f686:	f47f adaf 	bne.w	f1e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x788>
    f68a:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f68c:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f690:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
    f694:	e5d1      	b.n	f23a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7da>
    f696:	aa24      	add	r2, sp, #144	; 0x90
    f698:	ee19 1a90 	vmov	r1, s19
    f69c:	ee19 0a10 	vmov	r0, s18
    f6a0:	f018 fba8 	bl	27df4 <__ssprint_r>
    f6a4:	2800      	cmp	r0, #0
    f6a6:	f47f ad9f 	bne.w	f1e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x788>
    f6aa:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f6ac:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f6b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f6b2:	e5b1      	b.n	f218 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7b8>
    f6b4:	9b03      	ldr	r3, [sp, #12]
    f6b6:	07d9      	lsls	r1, r3, #31
    f6b8:	f57f aae1 	bpl.w	ec7e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x21e>
    f6bc:	e480      	b.n	efc0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x560>
    f6be:	f897 9000 	ldrb.w	r9, [r7]
    f6c2:	9309      	str	r3, [sp, #36]	; 0x24
    f6c4:	f7ff b96a 	b.w	e99c <_svfprintf_r+0xbc>
    f6c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f6ca:	f853 1b04 	ldr.w	r1, [r3], #4
    f6ce:	9309      	str	r3, [sp, #36]	; 0x24
    f6d0:	9b05      	ldr	r3, [sp, #20]
    f6d2:	17dd      	asrs	r5, r3, #31
    f6d4:	461a      	mov	r2, r3
    f6d6:	462b      	mov	r3, r5
    f6d8:	e9c1 2300 	strd	r2, r3, [r1]
    f6dc:	f7ff b930 	b.w	e940 <_svfprintf_r+0x60>
    f6e0:	2320      	movs	r3, #32
    f6e2:	f897 9000 	ldrb.w	r9, [r7]
    f6e6:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    f6ea:	f7ff b957 	b.w	e99c <_svfprintf_r+0xbc>
    f6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f6f0:	f853 4b04 	ldr.w	r4, [r3], #4
    f6f4:	17e5      	asrs	r5, r4, #31
    f6f6:	9309      	str	r3, [sp, #36]	; 0x24
    f6f8:	4622      	mov	r2, r4
    f6fa:	462b      	mov	r3, r5
    f6fc:	f7ff b9e1 	b.w	eac2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x62>
    f700:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f702:	2500      	movs	r5, #0
    f704:	f853 4b04 	ldr.w	r4, [r3], #4
    f708:	9309      	str	r3, [sp, #36]	; 0x24
    f70a:	f7ff ba05 	b.w	eb18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb8>
    f70e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    f712:	4602      	mov	r2, r0
    f714:	460b      	mov	r3, r1
    f716:	f7fd fd93 	bl	d240 <__aeabi_dcmpun>
    f71a:	2800      	cmp	r0, #0
    f71c:	f040 85e5 	bne.w	102ea <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2ea>
    f720:	f029 0320 	bic.w	r3, r9, #32
    f724:	2b41      	cmp	r3, #65	; 0x41
    f726:	9304      	str	r3, [sp, #16]
    f728:	f040 8328 	bne.w	fd7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x131c>
    f72c:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    f730:	f04f 0230 	mov.w	r2, #48	; 0x30
    f734:	bf0c      	ite	eq
    f736:	2378      	moveq	r3, #120	; 0x78
    f738:	2358      	movne	r3, #88	; 0x58
    f73a:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
    f73e:	f88d 2074 	strb.w	r2, [sp, #116]	; 0x74
    f742:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    f746:	f300 8400 	bgt.w	ff4a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14ea>
    f74a:	ae37      	add	r6, sp, #220	; 0xdc
    f74c:	9008      	str	r0, [sp, #32]
    f74e:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
    f752:	2a00      	cmp	r2, #0
    f754:	f280 8577 	bge.w	10246 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x246>
    f758:	232d      	movs	r3, #45	; 0x2d
    f75a:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
    f75e:	9313      	str	r3, [sp, #76]	; 0x4c
    f760:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
    f764:	911a      	str	r1, [sp, #104]	; 0x68
    f766:	931b      	str	r3, [sp, #108]	; 0x6c
    f768:	a81e      	add	r0, sp, #120	; 0x78
    f76a:	ed9d 0b1a 	vldr	d0, [sp, #104]	; 0x68
    f76e:	f018 f8bf 	bl	278f0 <frexp>
    f772:	2200      	movs	r2, #0
    f774:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    f778:	ec51 0b10 	vmov	r0, r1, d0
    f77c:	f7fd fb4e 	bl	ce1c <__aeabi_dmul>
    f780:	2200      	movs	r2, #0
    f782:	2300      	movs	r3, #0
    f784:	4604      	mov	r4, r0
    f786:	460d      	mov	r5, r1
    f788:	f7fc ff6c 	bl	c664 <__aeabi_dcmpeq>
    f78c:	b108      	cbz	r0, f792 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd32>
    f78e:	2301      	movs	r3, #1
    f790:	931e      	str	r3, [sp, #120]	; 0x78
    f792:	4ab9      	ldr	r2, [pc, #740]	; (fa78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1018>)
    f794:	f10a 3aff 	add.w	sl, sl, #4294967295
    f798:	4bb8      	ldr	r3, [pc, #736]	; (fa7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x101c>)
    f79a:	46b3      	mov	fp, r6
    f79c:	9714      	str	r7, [sp, #80]	; 0x50
    f79e:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    f7a2:	bf18      	it	ne
    f7a4:	461a      	movne	r2, r3
    f7a6:	f8cd 801c 	str.w	r8, [sp, #28]
    f7aa:	4617      	mov	r7, r2
    f7ac:	920a      	str	r2, [sp, #40]	; 0x28
    f7ae:	e9cd 960c 	strd	r9, r6, [sp, #48]	; 0x30
    f7b2:	e002      	b.n	f7ba <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd5a>
    f7b4:	f7fc ff56 	bl	c664 <__aeabi_dcmpeq>
    f7b8:	bb18      	cbnz	r0, f802 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xda2>
    f7ba:	2200      	movs	r2, #0
    f7bc:	4bb0      	ldr	r3, [pc, #704]	; (fa80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1020>)
    f7be:	4620      	mov	r0, r4
    f7c0:	4629      	mov	r1, r5
    f7c2:	f7fd fb2b 	bl	ce1c <__aeabi_dmul>
    f7c6:	460d      	mov	r5, r1
    f7c8:	4604      	mov	r4, r0
    f7ca:	f7fc ff7d 	bl	c6c8 <__aeabi_d2iz>
    f7ce:	4606      	mov	r6, r0
    f7d0:	f7fc fe88 	bl	c4e4 <__aeabi_i2d>
    f7d4:	4602      	mov	r2, r0
    f7d6:	460b      	mov	r3, r1
    f7d8:	4620      	mov	r0, r4
    f7da:	4629      	mov	r1, r5
    f7dc:	f7fc fd34 	bl	c248 <__aeabi_dsub>
    f7e0:	f817 c006 	ldrb.w	ip, [r7, r6]
    f7e4:	f1ba 3fff 	cmp.w	sl, #4294967295
    f7e8:	46d8      	mov	r8, fp
    f7ea:	46d1      	mov	r9, sl
    f7ec:	4604      	mov	r4, r0
    f7ee:	460d      	mov	r5, r1
    f7f0:	f04f 0200 	mov.w	r2, #0
    f7f4:	f04f 0300 	mov.w	r3, #0
    f7f8:	f10a 3aff 	add.w	sl, sl, #4294967295
    f7fc:	f80b cb01 	strb.w	ip, [fp], #1
    f800:	d1d8      	bne.n	f7b4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd54>
    f802:	2200      	movs	r2, #0
    f804:	4b9f      	ldr	r3, [pc, #636]	; (fa84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1024>)
    f806:	4620      	mov	r0, r4
    f808:	4629      	mov	r1, r5
    f80a:	46b2      	mov	sl, r6
    f80c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    f810:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    f812:	f8dd 801c 	ldr.w	r8, [sp, #28]
    f816:	9f14      	ldr	r7, [sp, #80]	; 0x50
    f818:	f8cd 901c 	str.w	r9, [sp, #28]
    f81c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    f820:	f7fc ff48 	bl	c6b4 <__aeabi_dcmpgt>
    f824:	2800      	cmp	r0, #0
    f826:	f040 858a 	bne.w	1033e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x33e>
    f82a:	4620      	mov	r0, r4
    f82c:	4629      	mov	r1, r5
    f82e:	2200      	movs	r2, #0
    f830:	4b94      	ldr	r3, [pc, #592]	; (fa84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1024>)
    f832:	f7fc ff17 	bl	c664 <__aeabi_dcmpeq>
    f836:	b118      	cbz	r0, f840 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xde0>
    f838:	4653      	mov	r3, sl
    f83a:	07db      	lsls	r3, r3, #31
    f83c:	f100 857f 	bmi.w	1033e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x33e>
    f840:	9b07      	ldr	r3, [sp, #28]
    f842:	2b00      	cmp	r3, #0
    f844:	db07      	blt.n	f856 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdf6>
    f846:	9b07      	ldr	r3, [sp, #28]
    f848:	2230      	movs	r2, #48	; 0x30
    f84a:	3301      	adds	r3, #1
    f84c:	445b      	add	r3, fp
    f84e:	f80b 2b01 	strb.w	r2, [fp], #1
    f852:	455b      	cmp	r3, fp
    f854:	d1fb      	bne.n	f84e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdee>
    f856:	9b03      	ldr	r3, [sp, #12]
    f858:	f043 0302 	orr.w	r3, r3, #2
    f85c:	9303      	str	r3, [sp, #12]
    f85e:	ebab 0306 	sub.w	r3, fp, r6
    f862:	930c      	str	r3, [sp, #48]	; 0x30
    f864:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f866:	930a      	str	r3, [sp, #40]	; 0x28
    f868:	e2d0      	b.n	fe0c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13ac>
    f86a:	4b83      	ldr	r3, [pc, #524]	; (fa78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1018>)
    f86c:	9312      	str	r3, [sp, #72]	; 0x48
    f86e:	9b03      	ldr	r3, [sp, #12]
    f870:	0699      	lsls	r1, r3, #26
    f872:	f140 80ea 	bpl.w	fa4a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfea>
    f876:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f878:	3307      	adds	r3, #7
    f87a:	f023 0307 	bic.w	r3, r3, #7
    f87e:	e8f3 4502 	ldrd	r4, r5, [r3], #8
    f882:	9309      	str	r3, [sp, #36]	; 0x24
    f884:	ea54 0305 	orrs.w	r3, r4, r5
    f888:	d00a      	beq.n	f8a0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe40>
    f88a:	9b03      	ldr	r3, [sp, #12]
    f88c:	07de      	lsls	r6, r3, #31
    f88e:	d507      	bpl.n	f8a0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe40>
    f890:	f043 0302 	orr.w	r3, r3, #2
    f894:	f88d 9075 	strb.w	r9, [sp, #117]	; 0x75
    f898:	9303      	str	r3, [sp, #12]
    f89a:	2330      	movs	r3, #48	; 0x30
    f89c:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    f8a0:	9b03      	ldr	r3, [sp, #12]
    f8a2:	f423 6b80 	bic.w	fp, r3, #1024	; 0x400
    f8a6:	2302      	movs	r3, #2
    f8a8:	f7ff b93a 	b.w	eb20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc0>
    f8ac:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f8b0:	f7ff bb08 	b.w	eec4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x464>
    f8b4:	4b71      	ldr	r3, [pc, #452]	; (fa7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x101c>)
    f8b6:	9312      	str	r3, [sp, #72]	; 0x48
    f8b8:	e7d9      	b.n	f86e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0e>
    f8ba:	f043 0320 	orr.w	r3, r3, #32
    f8be:	f897 9001 	ldrb.w	r9, [r7, #1]
    f8c2:	3701      	adds	r7, #1
    f8c4:	9303      	str	r3, [sp, #12]
    f8c6:	f7ff b869 	b.w	e99c <_svfprintf_r+0xbc>
    f8ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    f8ce:	f897 9001 	ldrb.w	r9, [r7, #1]
    f8d2:	3701      	adds	r7, #1
    f8d4:	9303      	str	r3, [sp, #12]
    f8d6:	f7ff b861 	b.w	e99c <_svfprintf_r+0xbc>
    f8da:	aa24      	add	r2, sp, #144	; 0x90
    f8dc:	ee19 1a90 	vmov	r1, s19
    f8e0:	ee19 0a10 	vmov	r0, s18
    f8e4:	f018 fa86 	bl	27df4 <__ssprint_r>
    f8e8:	2800      	cmp	r0, #0
    f8ea:	f47f ac7d 	bne.w	f1e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x788>
    f8ee:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f8f0:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f8f4:	f7ff bb74 	b.w	efe0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x580>
    f8f8:	2140      	movs	r1, #64	; 0x40
    f8fa:	4648      	mov	r0, r9
    f8fc:	f012 f96c 	bl	21bd8 <_malloc_r>
    f900:	f8cb 0000 	str.w	r0, [fp]
    f904:	f8cb 0010 	str.w	r0, [fp, #16]
    f908:	2800      	cmp	r0, #0
    f90a:	f000 858d 	beq.w	10428 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x428>
    f90e:	2340      	movs	r3, #64	; 0x40
    f910:	f8cb 3014 	str.w	r3, [fp, #20]
    f914:	f7fe bffe 	b.w	e914 <_svfprintf_r+0x34>
    f918:	4630      	mov	r0, r6
    f91a:	46aa      	mov	sl, r5
    f91c:	f013 f8a6 	bl	22a6c <strlen>
    f920:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    f924:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    f928:	9007      	str	r0, [sp, #28]
    f92a:	950d      	str	r5, [sp, #52]	; 0x34
    f92c:	9304      	str	r3, [sp, #16]
    f92e:	e9cd 5408 	strd	r5, r4, [sp, #32]
    f932:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
    f936:	f7ff b923 	b.w	eb80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x120>
    f93a:	f1b9 0f10 	cmp.w	r9, #16
    f93e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f940:	f340 8564 	ble.w	1040c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x40c>
    f944:	4622      	mov	r2, r4
    f946:	f04f 0a10 	mov.w	sl, #16
    f94a:	4d4f      	ldr	r5, [pc, #316]	; (fa88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1028>)
    f94c:	ee19 ba10 	vmov	fp, s18
    f950:	ee19 4a90 	vmov	r4, s19
    f954:	e005      	b.n	f962 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf02>
    f956:	f1a9 0910 	sub.w	r9, r9, #16
    f95a:	f1b9 0f10 	cmp.w	r9, #16
    f95e:	f340 82c4 	ble.w	feea <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x148a>
    f962:	3301      	adds	r3, #1
    f964:	3210      	adds	r2, #16
    f966:	f8c8 5000 	str.w	r5, [r8]
    f96a:	f108 0808 	add.w	r8, r8, #8
    f96e:	2b07      	cmp	r3, #7
    f970:	f848 ac04 	str.w	sl, [r8, #-4]
    f974:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f978:	dded      	ble.n	f956 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xef6>
    f97a:	aa24      	add	r2, sp, #144	; 0x90
    f97c:	4621      	mov	r1, r4
    f97e:	4658      	mov	r0, fp
    f980:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f984:	f018 fa36 	bl	27df4 <__ssprint_r>
    f988:	2800      	cmp	r0, #0
    f98a:	f040 847f 	bne.w	1028c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x28c>
    f98e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f992:	e7e0      	b.n	f956 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xef6>
    f994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f996:	2b00      	cmp	r3, #0
    f998:	dc0a      	bgt.n	f9b0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf50>
    f99a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f99c:	2b00      	cmp	r3, #0
    f99e:	dc07      	bgt.n	f9b0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf50>
    f9a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f9a2:	18f3      	adds	r3, r6, r3
    f9a4:	9307      	str	r3, [sp, #28]
    f9a6:	9b07      	ldr	r3, [sp, #28]
    f9a8:	459b      	cmp	fp, r3
    f9aa:	bf28      	it	cs
    f9ac:	469b      	movcs	fp, r3
    f9ae:	e562      	b.n	f476 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa16>
    f9b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f9b2:	4622      	mov	r2, r4
    f9b4:	9613      	str	r6, [sp, #76]	; 0x4c
    f9b6:	ee19 9a10 	vmov	r9, s18
    f9ba:	18f3      	adds	r3, r6, r3
    f9bc:	9718      	str	r7, [sp, #96]	; 0x60
    f9be:	465e      	mov	r6, fp
    f9c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; fa88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1028>
    f9c4:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    f9c8:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    f9ca:	930a      	str	r3, [sp, #40]	; 0x28
    f9cc:	f1bb 0f00 	cmp.w	fp, #0
    f9d0:	d045      	beq.n	fa5e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xffe>
    f9d2:	f10b 3bff 	add.w	fp, fp, #4294967295
    f9d6:	9825      	ldr	r0, [sp, #148]	; 0x94
    f9d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f9da:	3001      	adds	r0, #1
    f9dc:	9916      	ldr	r1, [sp, #88]	; 0x58
    f9de:	441a      	add	r2, r3
    f9e0:	f8c8 3004 	str.w	r3, [r8, #4]
    f9e4:	2807      	cmp	r0, #7
    f9e6:	f8c8 1000 	str.w	r1, [r8]
    f9ea:	9226      	str	r2, [sp, #152]	; 0x98
    f9ec:	9025      	str	r0, [sp, #148]	; 0x94
    f9ee:	dc7b      	bgt.n	fae8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1088>
    f9f0:	f108 0808 	add.w	r8, r8, #8
    f9f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9f6:	7838      	ldrb	r0, [r7, #0]
    f9f8:	1b9d      	subs	r5, r3, r6
    f9fa:	9307      	str	r3, [sp, #28]
    f9fc:	4285      	cmp	r5, r0
    f9fe:	bfa8      	it	ge
    fa00:	4605      	movge	r5, r0
    fa02:	2d00      	cmp	r5, #0
    fa04:	dd0e      	ble.n	fa24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfc4>
    fa06:	9825      	ldr	r0, [sp, #148]	; 0x94
    fa08:	442a      	add	r2, r5
    fa0a:	f8c8 6000 	str.w	r6, [r8]
    fa0e:	3001      	adds	r0, #1
    fa10:	9226      	str	r2, [sp, #152]	; 0x98
    fa12:	f8c8 5004 	str.w	r5, [r8, #4]
    fa16:	2807      	cmp	r0, #7
    fa18:	9025      	str	r0, [sp, #148]	; 0x94
    fa1a:	f300 813c 	bgt.w	fc96 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1236>
    fa1e:	f108 0808 	add.w	r8, r8, #8
    fa22:	7838      	ldrb	r0, [r7, #0]
    fa24:	2d00      	cmp	r5, #0
    fa26:	bfac      	ite	ge
    fa28:	1b45      	subge	r5, r0, r5
    fa2a:	4605      	movlt	r5, r0
    fa2c:	2d00      	cmp	r5, #0
    fa2e:	dc1b      	bgt.n	fa68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1008>
    fa30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa32:	4406      	add	r6, r0
    fa34:	2b00      	cmp	r3, #0
    fa36:	dcc9      	bgt.n	f9cc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf6c>
    fa38:	f1bb 0f00 	cmp.w	fp, #0
    fa3c:	dcc6      	bgt.n	f9cc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf6c>
    fa3e:	46b3      	mov	fp, r6
    fa40:	9717      	str	r7, [sp, #92]	; 0x5c
    fa42:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    fa44:	4614      	mov	r4, r2
    fa46:	9f18      	ldr	r7, [sp, #96]	; 0x60
    fa48:	e7ad      	b.n	f9a6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf46>
    fa4a:	9b03      	ldr	r3, [sp, #12]
    fa4c:	06da      	lsls	r2, r3, #27
    fa4e:	f140 80a3 	bpl.w	fb98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1138>
    fa52:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa54:	2500      	movs	r5, #0
    fa56:	f853 4b04 	ldr.w	r4, [r3], #4
    fa5a:	9309      	str	r3, [sp, #36]	; 0x24
    fa5c:	e712      	b.n	f884 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe24>
    fa5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa60:	3f01      	subs	r7, #1
    fa62:	3b01      	subs	r3, #1
    fa64:	930b      	str	r3, [sp, #44]	; 0x2c
    fa66:	e7b6      	b.n	f9d6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf76>
    fa68:	2d10      	cmp	r5, #16
    fa6a:	9825      	ldr	r0, [sp, #148]	; 0x94
    fa6c:	dd2d      	ble.n	faca <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x106a>
    fa6e:	960d      	str	r6, [sp, #52]	; 0x34
    fa70:	2410      	movs	r4, #16
    fa72:	ee19 6a90 	vmov	r6, s19
    fa76:	e00c      	b.n	fa92 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1032>
    fa78:	0002c0ec 	.word	0x0002c0ec
    fa7c:	0002c100 	.word	0x0002c100
    fa80:	40300000 	.word	0x40300000
    fa84:	3fe00000 	.word	0x3fe00000
    fa88:	0002c130 	.word	0x0002c130
    fa8c:	3d10      	subs	r5, #16
    fa8e:	2d10      	cmp	r5, #16
    fa90:	dd1a      	ble.n	fac8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1068>
    fa92:	3001      	adds	r0, #1
    fa94:	3210      	adds	r2, #16
    fa96:	f8c8 a000 	str.w	sl, [r8]
    fa9a:	f108 0808 	add.w	r8, r8, #8
    fa9e:	2807      	cmp	r0, #7
    faa0:	f848 4c04 	str.w	r4, [r8, #-4]
    faa4:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    faa8:	ddf0      	ble.n	fa8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x102c>
    faaa:	aa24      	add	r2, sp, #144	; 0x90
    faac:	4631      	mov	r1, r6
    faae:	4648      	mov	r0, r9
    fab0:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fab4:	f018 f99e 	bl	27df4 <__ssprint_r>
    fab8:	2800      	cmp	r0, #0
    faba:	f040 830d 	bne.w	100d8 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xd8>
    fabe:	3d10      	subs	r5, #16
    fac0:	2d10      	cmp	r5, #16
    fac2:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    fac6:	dce4      	bgt.n	fa92 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1032>
    fac8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    faca:	3001      	adds	r0, #1
    facc:	442a      	add	r2, r5
    face:	f8c8 a000 	str.w	sl, [r8]
    fad2:	2807      	cmp	r0, #7
    fad4:	f8c8 5004 	str.w	r5, [r8, #4]
    fad8:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    fadc:	f300 8323 	bgt.w	10126 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x126>
    fae0:	f108 0808 	add.w	r8, r8, #8
    fae4:	7838      	ldrb	r0, [r7, #0]
    fae6:	e7a3      	b.n	fa30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfd0>
    fae8:	aa24      	add	r2, sp, #144	; 0x90
    faea:	ee19 1a90 	vmov	r1, s19
    faee:	4648      	mov	r0, r9
    faf0:	f018 f980 	bl	27df4 <__ssprint_r>
    faf4:	2800      	cmp	r0, #0
    faf6:	f47f ab79 	bne.w	f1ec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78c>
    fafa:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fafc:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fb00:	e778      	b.n	f9f4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf94>
    fb02:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fb04:	2201      	movs	r2, #1
    fb06:	3401      	adds	r4, #1
    fb08:	4899      	ldr	r0, [pc, #612]	; (fd70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1310>)
    fb0a:	4413      	add	r3, r2
    fb0c:	f8c8 2004 	str.w	r2, [r8, #4]
    fb10:	9426      	str	r4, [sp, #152]	; 0x98
    fb12:	2b07      	cmp	r3, #7
    fb14:	f8c8 0000 	str.w	r0, [r8]
    fb18:	9325      	str	r3, [sp, #148]	; 0x94
    fb1a:	f300 81f5 	bgt.w	ff08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14a8>
    fb1e:	f108 0808 	add.w	r8, r8, #8
    fb22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fb24:	430b      	orrs	r3, r1
    fb26:	f000 82ea 	beq.w	100fe <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xfe>
    fb2a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fb2c:	9810      	ldr	r0, [sp, #64]	; 0x40
    fb2e:	3301      	adds	r3, #1
    fb30:	1902      	adds	r2, r0, r4
    fb32:	9c11      	ldr	r4, [sp, #68]	; 0x44
    fb34:	2b07      	cmp	r3, #7
    fb36:	f8c8 0004 	str.w	r0, [r8, #4]
    fb3a:	f8c8 4000 	str.w	r4, [r8]
    fb3e:	9226      	str	r2, [sp, #152]	; 0x98
    fb40:	9325      	str	r3, [sp, #148]	; 0x94
    fb42:	f300 82a7 	bgt.w	10094 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x94>
    fb46:	f108 0808 	add.w	r8, r8, #8
    fb4a:	2900      	cmp	r1, #0
    fb4c:	f2c0 8352 	blt.w	101f4 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1f4>
    fb50:	990c      	ldr	r1, [sp, #48]	; 0x30
    fb52:	3301      	adds	r3, #1
    fb54:	f8c8 6000 	str.w	r6, [r8]
    fb58:	188c      	adds	r4, r1, r2
    fb5a:	2b07      	cmp	r3, #7
    fb5c:	f8c8 1004 	str.w	r1, [r8, #4]
    fb60:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    fb64:	f77f a889 	ble.w	ec7a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x21a>
    fb68:	f7ff bb90 	b.w	f28c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x82c>
    fb6c:	aa24      	add	r2, sp, #144	; 0x90
    fb6e:	ee19 1a90 	vmov	r1, s19
    fb72:	ee19 0a10 	vmov	r0, s18
    fb76:	9313      	str	r3, [sp, #76]	; 0x4c
    fb78:	f018 f93c 	bl	27df4 <__ssprint_r>
    fb7c:	2800      	cmp	r0, #0
    fb7e:	f47f ab33 	bne.w	f1e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x788>
    fb82:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    fb86:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fb8a:	9c26      	ldr	r4, [sp, #152]	; 0x98
    fb8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fb8e:	f7ff b835 	b.w	ebfc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x19c>
    fb92:	46a9      	mov	r9, r5
    fb94:	46bb      	mov	fp, r7
    fb96:	e4d0      	b.n	f53a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xada>
    fb98:	9b03      	ldr	r3, [sp, #12]
    fb9a:	065b      	lsls	r3, r3, #25
    fb9c:	f140 80da 	bpl.w	fd54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12f4>
    fba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fba2:	2500      	movs	r5, #0
    fba4:	f853 4b04 	ldr.w	r4, [r3], #4
    fba8:	b2a4      	uxth	r4, r4
    fbaa:	9309      	str	r3, [sp, #36]	; 0x24
    fbac:	e66a      	b.n	f884 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe24>
    fbae:	aa24      	add	r2, sp, #144	; 0x90
    fbb0:	ee19 1a90 	vmov	r1, s19
    fbb4:	ee19 0a10 	vmov	r0, s18
    fbb8:	f018 f91c 	bl	27df4 <__ssprint_r>
    fbbc:	2800      	cmp	r0, #0
    fbbe:	f47f ab13 	bne.w	f1e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x788>
    fbc2:	9c26      	ldr	r4, [sp, #152]	; 0x98
    fbc4:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fbc8:	f7ff b9f5 	b.w	efb6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x556>
    fbcc:	46d3      	mov	fp, sl
    fbce:	e4b4      	b.n	f53a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xada>
    fbd0:	4d68      	ldr	r5, [pc, #416]	; (fd74 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1314>)
    fbd2:	3301      	adds	r3, #1
    fbd4:	4434      	add	r4, r6
    fbd6:	f8c8 5000 	str.w	r5, [r8]
    fbda:	2b07      	cmp	r3, #7
    fbdc:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    fbe0:	f8c8 6004 	str.w	r6, [r8, #4]
    fbe4:	f77f a849 	ble.w	ec7a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x21a>
    fbe8:	f7ff bb50 	b.w	f28c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x82c>
    fbec:	f40b 6380 	and.w	r3, fp, #1024	; 0x400
    fbf0:	2200      	movs	r2, #0
    fbf2:	f8cd 900c 	str.w	r9, [sp, #12]
    fbf6:	ae50      	add	r6, sp, #320	; 0x140
    fbf8:	f8cd 8010 	str.w	r8, [sp, #16]
    fbfc:	4691      	mov	r9, r2
    fbfe:	9707      	str	r7, [sp, #28]
    fc00:	461f      	mov	r7, r3
    fc02:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    fc06:	e007      	b.n	fc18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11b8>
    fc08:	f7fc fe26 	bl	c858 <__aeabi_uldivmod>
    fc0c:	2d00      	cmp	r5, #0
    fc0e:	bf08      	it	eq
    fc10:	2c0a      	cmpeq	r4, #10
    fc12:	d321      	bcc.n	fc58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11f8>
    fc14:	4604      	mov	r4, r0
    fc16:	460d      	mov	r5, r1
    fc18:	220a      	movs	r2, #10
    fc1a:	2300      	movs	r3, #0
    fc1c:	4620      	mov	r0, r4
    fc1e:	4629      	mov	r1, r5
    fc20:	f7fc fe1a 	bl	c858 <__aeabi_uldivmod>
    fc24:	4694      	mov	ip, r2
    fc26:	4620      	mov	r0, r4
    fc28:	4629      	mov	r1, r5
    fc2a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    fc2e:	220a      	movs	r2, #10
    fc30:	2300      	movs	r3, #0
    fc32:	f109 0901 	add.w	r9, r9, #1
    fc36:	f806 cc01 	strb.w	ip, [r6, #-1]
    fc3a:	3e01      	subs	r6, #1
    fc3c:	2f00      	cmp	r7, #0
    fc3e:	d0e3      	beq.n	fc08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11a8>
    fc40:	f898 c000 	ldrb.w	ip, [r8]
    fc44:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    fc48:	d0de      	beq.n	fc08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11a8>
    fc4a:	45cc      	cmp	ip, r9
    fc4c:	d1dc      	bne.n	fc08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11a8>
    fc4e:	429d      	cmp	r5, r3
    fc50:	bf08      	it	eq
    fc52:	4294      	cmpeq	r4, r2
    fc54:	f080 8275 	bcs.w	10142 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x142>
    fc58:	ab50      	add	r3, sp, #320	; 0x140
    fc5a:	9f07      	ldr	r7, [sp, #28]
    fc5c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
    fc60:	1b9b      	subs	r3, r3, r6
    fc62:	f8dd 900c 	ldr.w	r9, [sp, #12]
    fc66:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    fc6a:	f8cd b00c 	str.w	fp, [sp, #12]
    fc6e:	f8dd 8010 	ldr.w	r8, [sp, #16]
    fc72:	9307      	str	r3, [sp, #28]
    fc74:	f7fe bf78 	b.w	eb68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x108>
    fc78:	aa24      	add	r2, sp, #144	; 0x90
    fc7a:	ee19 1a90 	vmov	r1, s19
    fc7e:	ee19 0a10 	vmov	r0, s18
    fc82:	f018 f8b7 	bl	27df4 <__ssprint_r>
    fc86:	2800      	cmp	r0, #0
    fc88:	f47f aaae 	bne.w	f1e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x788>
    fc8c:	9c26      	ldr	r4, [sp, #152]	; 0x98
    fc8e:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fc92:	f7fe bfda 	b.w	ec4a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ea>
    fc96:	aa24      	add	r2, sp, #144	; 0x90
    fc98:	ee19 1a90 	vmov	r1, s19
    fc9c:	4648      	mov	r0, r9
    fc9e:	f018 f8a9 	bl	27df4 <__ssprint_r>
    fca2:	2800      	cmp	r0, #0
    fca4:	f47f aaa2 	bne.w	f1ec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78c>
    fca8:	7838      	ldrb	r0, [r7, #0]
    fcaa:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fcae:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fcb0:	e6b8      	b.n	fa24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfc4>
    fcb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fcb4:	9905      	ldr	r1, [sp, #20]
    fcb6:	f853 2b04 	ldr.w	r2, [r3], #4
    fcba:	6011      	str	r1, [r2, #0]
    fcbc:	9309      	str	r3, [sp, #36]	; 0x24
    fcbe:	f7fe be3f 	b.w	e940 <_svfprintf_r+0x60>
    fcc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    fcc4:	ee19 ba90 	vmov	fp, s19
    fcc8:	2b00      	cmp	r3, #0
    fcca:	f43f ac3c 	beq.w	f546 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xae6>
    fcce:	ee19 0a10 	vmov	r0, s18
    fcd2:	aa24      	add	r2, sp, #144	; 0x90
    fcd4:	ee19 1a90 	vmov	r1, s19
    fcd8:	f018 f88c 	bl	27df4 <__ssprint_r>
    fcdc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    fce0:	e433      	b.n	f54a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xaea>
    fce2:	4653      	mov	r3, sl
    fce4:	4632      	mov	r2, r6
    fce6:	46b2      	mov	sl, r6
    fce8:	960d      	str	r6, [sp, #52]	; 0x34
    fcea:	2b06      	cmp	r3, #6
    fcec:	bf28      	it	cs
    fcee:	2306      	movcs	r3, #6
    fcf0:	e9cd 6408 	strd	r6, r4, [sp, #32]
    fcf4:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
    fcf8:	9304      	str	r3, [sp, #16]
    fcfa:	4e1f      	ldr	r6, [pc, #124]	; (fd78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1318>)
    fcfc:	9307      	str	r3, [sp, #28]
    fcfe:	f7fe bf3f 	b.w	eb80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x120>
    fd02:	4699      	mov	r9, r3
    fd04:	f109 0901 	add.w	r9, r9, #1
    fd08:	4434      	add	r4, r6
    fd0a:	f8c8 5000 	str.w	r5, [r8]
    fd0e:	f1b9 0f07 	cmp.w	r9, #7
    fd12:	f8c8 6004 	str.w	r6, [r8, #4]
    fd16:	e9cd 9425 	strd	r9, r4, [sp, #148]	; 0x94
    fd1a:	f77f aaa7 	ble.w	f26c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x80c>
    fd1e:	e439      	b.n	f594 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb34>
    fd20:	9b03      	ldr	r3, [sp, #12]
    fd22:	f413 7f00 	tst.w	r3, #512	; 0x200
    fd26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd28:	f853 4b04 	ldr.w	r4, [r3], #4
    fd2c:	bf18      	it	ne
    fd2e:	b264      	sxtbne	r4, r4
    fd30:	9309      	str	r3, [sp, #36]	; 0x24
    fd32:	17e5      	asrs	r5, r4, #31
    fd34:	4622      	mov	r2, r4
    fd36:	462b      	mov	r3, r5
    fd38:	f7fe bec3 	b.w	eac2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x62>
    fd3c:	9b03      	ldr	r3, [sp, #12]
    fd3e:	2500      	movs	r5, #0
    fd40:	f413 7f00 	tst.w	r3, #512	; 0x200
    fd44:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd46:	f853 4b04 	ldr.w	r4, [r3], #4
    fd4a:	bf18      	it	ne
    fd4c:	b2e4      	uxtbne	r4, r4
    fd4e:	9309      	str	r3, [sp, #36]	; 0x24
    fd50:	f7fe bee2 	b.w	eb18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb8>
    fd54:	9b03      	ldr	r3, [sp, #12]
    fd56:	2500      	movs	r5, #0
    fd58:	f413 7f00 	tst.w	r3, #512	; 0x200
    fd5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd5e:	f853 4b04 	ldr.w	r4, [r3], #4
    fd62:	bf18      	it	ne
    fd64:	b2e4      	uxtbne	r4, r4
    fd66:	9309      	str	r3, [sp, #36]	; 0x24
    fd68:	e58c      	b.n	f884 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe24>
    fd6a:	4d02      	ldr	r5, [pc, #8]	; (fd74 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1314>)
    fd6c:	f7ff b9e8 	b.w	f140 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6e0>
    fd70:	0002c11c 	.word	0x0002c11c
    fd74:	0002c130 	.word	0x0002c130
    fd78:	0002c114 	.word	0x0002c114
    fd7c:	f1ba 3fff 	cmp.w	sl, #4294967295
    fd80:	f000 80f0 	beq.w	ff64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1504>
    fd84:	f1ba 0f00 	cmp.w	sl, #0
    fd88:	f040 80ee 	bne.w	ff68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1508>
    fd8c:	9b04      	ldr	r3, [sp, #16]
    fd8e:	2b47      	cmp	r3, #71	; 0x47
    fd90:	f040 80ea 	bne.w	ff68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1508>
    fd94:	9a03      	ldr	r2, [sp, #12]
    fd96:	f04f 0a01 	mov.w	sl, #1
    fd9a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	; 0x38
    fd9e:	f442 7580 	orr.w	r5, r2, #256	; 0x100
    fda2:	4663      	mov	r3, ip
    fda4:	2b00      	cmp	r3, #0
    fda6:	f2c0 82b5 	blt.w	10314 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x314>
    fdaa:	4654      	mov	r4, sl
    fdac:	9013      	str	r0, [sp, #76]	; 0x4c
    fdae:	ec4c bb1b 	vmov	d11, fp, ip
    fdb2:	a922      	add	r1, sp, #136	; 0x88
    fdb4:	a81f      	add	r0, sp, #124	; 0x7c
    fdb6:	ab1e      	add	r3, sp, #120	; 0x78
    fdb8:	eeb0 0a4b 	vmov.f32	s0, s22
    fdbc:	eef0 0a6b 	vmov.f32	s1, s23
    fdc0:	9101      	str	r1, [sp, #4]
    fdc2:	4622      	mov	r2, r4
    fdc4:	9000      	str	r0, [sp, #0]
    fdc6:	2102      	movs	r1, #2
    fdc8:	ee19 0a10 	vmov	r0, s18
    fdcc:	f000 fb4c 	bl	10468 <_dtoa_r>
    fdd0:	9b04      	ldr	r3, [sp, #16]
    fdd2:	4606      	mov	r6, r0
    fdd4:	2b47      	cmp	r3, #71	; 0x47
    fdd6:	f040 81de 	bne.w	10196 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x196>
    fdda:	9b03      	ldr	r3, [sp, #12]
    fddc:	07db      	lsls	r3, r3, #31
    fdde:	f100 81da 	bmi.w	10196 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x196>
    fde2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fde4:	1b9b      	subs	r3, r3, r6
    fde6:	930c      	str	r3, [sp, #48]	; 0x30
    fde8:	9b04      	ldr	r3, [sp, #16]
    fdea:	2b47      	cmp	r3, #71	; 0x47
    fdec:	f040 810f 	bne.w	1000e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xe>
    fdf0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    fdf2:	4553      	cmp	r3, sl
    fdf4:	930a      	str	r3, [sp, #40]	; 0x28
    fdf6:	dc02      	bgt.n	fdfe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x139e>
    fdf8:	3303      	adds	r3, #3
    fdfa:	f280 812a 	bge.w	10052 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x52>
    fdfe:	2300      	movs	r3, #0
    fe00:	f1a9 0902 	sub.w	r9, r9, #2
    fe04:	9308      	str	r3, [sp, #32]
    fe06:	f029 0320 	bic.w	r3, r9, #32
    fe0a:	9304      	str	r3, [sp, #16]
    fe0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fe0e:	9a04      	ldr	r2, [sp, #16]
    fe10:	3b01      	subs	r3, #1
    fe12:	2a41      	cmp	r2, #65	; 0x41
    fe14:	931e      	str	r3, [sp, #120]	; 0x78
    fe16:	f040 8273 	bne.w	10300 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x300>
    fe1a:	f109 020f 	add.w	r2, r9, #15
    fe1e:	b2d2      	uxtb	r2, r2
    fe20:	2b00      	cmp	r3, #0
    fe22:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
    fe26:	f2c0 82c2 	blt.w	103ae <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3ae>
    fe2a:	222b      	movs	r2, #43	; 0x2b
    fe2c:	2b09      	cmp	r3, #9
    fe2e:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
    fe32:	f340 82a8 	ble.w	10386 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x386>
    fe36:	f10d 0e8f 	add.w	lr, sp, #143	; 0x8f
    fe3a:	f8df c624 	ldr.w	ip, [pc, #1572]	; 10460 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x460>
    fe3e:	4670      	mov	r0, lr
    fe40:	fb8c 1203 	smull	r1, r2, ip, r3
    fe44:	17d9      	asrs	r1, r3, #31
    fe46:	461d      	mov	r5, r3
    fe48:	4604      	mov	r4, r0
    fe4a:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
    fe4e:	3801      	subs	r0, #1
    fe50:	2d63      	cmp	r5, #99	; 0x63
    fe52:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    fe56:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
    fe5a:	460b      	mov	r3, r1
    fe5c:	f102 0230 	add.w	r2, r2, #48	; 0x30
    fe60:	f804 2c01 	strb.w	r2, [r4, #-1]
    fe64:	dcec      	bgt.n	fe40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13e0>
    fe66:	3330      	adds	r3, #48	; 0x30
    fe68:	1ea2      	subs	r2, r4, #2
    fe6a:	b2db      	uxtb	r3, r3
    fe6c:	4596      	cmp	lr, r2
    fe6e:	f800 3c01 	strb.w	r3, [r0, #-1]
    fe72:	f240 82d6 	bls.w	10422 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x422>
    fe76:	f10d 0282 	add.w	r2, sp, #130	; 0x82
    fe7a:	e001      	b.n	fe80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1420>
    fe7c:	f810 3b01 	ldrb.w	r3, [r0], #1
    fe80:	4586      	cmp	lr, r0
    fe82:	f802 3b01 	strb.w	r3, [r2], #1
    fe86:	d1f9      	bne.n	fe7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x141c>
    fe88:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    fe8c:	f10d 0182 	add.w	r1, sp, #130	; 0x82
    fe90:	aa20      	add	r2, sp, #128	; 0x80
    fe92:	1b1b      	subs	r3, r3, r4
    fe94:	440b      	add	r3, r1
    fe96:	1a9b      	subs	r3, r3, r2
    fe98:	9314      	str	r3, [sp, #80]	; 0x50
    fe9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fe9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    fe9e:	2b01      	cmp	r3, #1
    fea0:	441a      	add	r2, r3
    fea2:	9207      	str	r2, [sp, #28]
    fea4:	f340 827e 	ble.w	103a4 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3a4>
    fea8:	9b07      	ldr	r3, [sp, #28]
    feaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    feac:	4413      	add	r3, r2
    feae:	9307      	str	r3, [sp, #28]
    feb0:	9b03      	ldr	r3, [sp, #12]
    feb2:	2200      	movs	r2, #0
    feb4:	9907      	ldr	r1, [sp, #28]
    feb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    feba:	920d      	str	r2, [sp, #52]	; 0x34
    febc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    fec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    fec4:	9104      	str	r1, [sp, #16]
    fec6:	9303      	str	r3, [sp, #12]
    fec8:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
    fecc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fece:	2b00      	cmp	r3, #0
    fed0:	f040 80d9 	bne.w	10086 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x86>
    fed4:	469a      	mov	sl, r3
    fed6:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    feda:	f7fe be51 	b.w	eb80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x120>
    fede:	232d      	movs	r3, #45	; 0x2d
    fee0:	461a      	mov	r2, r3
    fee2:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    fee6:	f7fe bf1e 	b.w	ed26 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c6>
    feea:	4614      	mov	r4, r2
    feec:	3301      	adds	r3, #1
    feee:	444c      	add	r4, r9
    fef0:	f8c8 5000 	str.w	r5, [r8]
    fef4:	2b07      	cmp	r3, #7
    fef6:	f8c8 9004 	str.w	r9, [r8, #4]
    fefa:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    fefe:	dc6b      	bgt.n	ffd8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1578>
    ff00:	f108 0808 	add.w	r8, r8, #8
    ff04:	f7ff bab0 	b.w	f468 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa08>
    ff08:	aa24      	add	r2, sp, #144	; 0x90
    ff0a:	ee19 1a90 	vmov	r1, s19
    ff0e:	ee19 0a10 	vmov	r0, s18
    ff12:	f017 ff6f 	bl	27df4 <__ssprint_r>
    ff16:	2800      	cmp	r0, #0
    ff18:	f47f a966 	bne.w	f1e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x788>
    ff1c:	991e      	ldr	r1, [sp, #120]	; 0x78
    ff1e:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    ff22:	9c26      	ldr	r4, [sp, #152]	; 0x98
    ff24:	e5fd      	b.n	fb22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c2>
    ff26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ff28:	4416      	add	r6, r2
    ff2a:	1ad3      	subs	r3, r2, r3
    ff2c:	eba6 060b 	sub.w	r6, r6, fp
    ff30:	429e      	cmp	r6, r3
    ff32:	bfa8      	it	ge
    ff34:	461e      	movge	r6, r3
    ff36:	f7ff bace 	b.w	f4d6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa76>
    ff3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ff3c:	9905      	ldr	r1, [sp, #20]
    ff3e:	f853 2b04 	ldr.w	r2, [r3], #4
    ff42:	8011      	strh	r1, [r2, #0]
    ff44:	9309      	str	r3, [sp, #36]	; 0x24
    ff46:	f7fe bcfb 	b.w	e940 <_svfprintf_r+0x60>
    ff4a:	f10a 0101 	add.w	r1, sl, #1
    ff4e:	ee19 0a10 	vmov	r0, s18
    ff52:	f011 fe41 	bl	21bd8 <_malloc_r>
    ff56:	4606      	mov	r6, r0
    ff58:	2800      	cmp	r0, #0
    ff5a:	f000 8271 	beq.w	10440 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x440>
    ff5e:	9008      	str	r0, [sp, #32]
    ff60:	f7ff bbf5 	b.w	f74e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xcee>
    ff64:	f04f 0a06 	mov.w	sl, #6
    ff68:	9a03      	ldr	r2, [sp, #12]
    ff6a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    ff6e:	f442 7580 	orr.w	r5, r2, #256	; 0x100
    ff72:	2900      	cmp	r1, #0
    ff74:	f2c0 81ce 	blt.w	10314 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x314>
    ff78:	2300      	movs	r3, #0
    ff7a:	ec41 0b1b 	vmov	d11, r0, r1
    ff7e:	9313      	str	r3, [sp, #76]	; 0x4c
    ff80:	9b04      	ldr	r3, [sp, #16]
    ff82:	2b46      	cmp	r3, #70	; 0x46
    ff84:	f040 80f2 	bne.w	1016c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x16c>
    ff88:	a922      	add	r1, sp, #136	; 0x88
    ff8a:	a81f      	add	r0, sp, #124	; 0x7c
    ff8c:	ab1e      	add	r3, sp, #120	; 0x78
    ff8e:	eeb0 0a4b 	vmov.f32	s0, s22
    ff92:	eef0 0a6b 	vmov.f32	s1, s23
    ff96:	9101      	str	r1, [sp, #4]
    ff98:	4652      	mov	r2, sl
    ff9a:	9000      	str	r0, [sp, #0]
    ff9c:	2103      	movs	r1, #3
    ff9e:	ee19 0a10 	vmov	r0, s18
    ffa2:	f000 fa61 	bl	10468 <_dtoa_r>
    ffa6:	7803      	ldrb	r3, [r0, #0]
    ffa8:	4606      	mov	r6, r0
    ffaa:	2b30      	cmp	r3, #48	; 0x30
    ffac:	d108      	bne.n	ffc0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1560>
    ffae:	2200      	movs	r2, #0
    ffb0:	2300      	movs	r3, #0
    ffb2:	ec51 0b1b 	vmov	r0, r1, d11
    ffb6:	f7fc fb55 	bl	c664 <__aeabi_dcmpeq>
    ffba:	2800      	cmp	r0, #0
    ffbc:	f000 821f 	beq.w	103fe <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3fe>
    ffc0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    ffc2:	4453      	add	r3, sl
    ffc4:	18f4      	adds	r4, r6, r3
    ffc6:	2200      	movs	r2, #0
    ffc8:	2300      	movs	r3, #0
    ffca:	ec51 0b1b 	vmov	r0, r1, d11
    ffce:	f7fc fb49 	bl	c664 <__aeabi_dcmpeq>
    ffd2:	b180      	cbz	r0, fff6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1596>
    ffd4:	4623      	mov	r3, r4
    ffd6:	e705      	b.n	fde4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1384>
    ffd8:	aa24      	add	r2, sp, #144	; 0x90
    ffda:	ee19 1a90 	vmov	r1, s19
    ffde:	ee19 0a10 	vmov	r0, s18
    ffe2:	f017 ff07 	bl	27df4 <__ssprint_r>
    ffe6:	2800      	cmp	r0, #0
    ffe8:	f47f a8fe 	bne.w	f1e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x788>
    ffec:	9c26      	ldr	r4, [sp, #152]	; 0x98
    ffee:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fff2:	f7ff ba39 	b.w	f468 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa08>
    fff6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fff8:	42a3      	cmp	r3, r4
    fffa:	f4bf aef3 	bcs.w	fde4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1384>
    fffe:	2130      	movs	r1, #48	; 0x30
   10000:	1c5a      	adds	r2, r3, #1
   10002:	9222      	str	r2, [sp, #136]	; 0x88
   10004:	7019      	strb	r1, [r3, #0]
   10006:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10008:	429c      	cmp	r4, r3
   1000a:	d8f9      	bhi.n	10000 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM>
   1000c:	e6ea      	b.n	fde4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1384>
   1000e:	9b04      	ldr	r3, [sp, #16]
   10010:	2b46      	cmp	r3, #70	; 0x46
   10012:	f040 8200 	bne.w	10416 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x416>
   10016:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   10018:	9b03      	ldr	r3, [sp, #12]
   1001a:	2a00      	cmp	r2, #0
   1001c:	920a      	str	r2, [sp, #40]	; 0x28
   1001e:	f003 0301 	and.w	r3, r3, #1
   10022:	f340 81ce 	ble.w	103c2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3c2>
   10026:	ea53 030a 	orrs.w	r3, r3, sl
   1002a:	f040 816c 	bne.w	10306 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x306>
   1002e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10030:	f04f 0966 	mov.w	r9, #102	; 0x66
   10034:	9307      	str	r3, [sp, #28]
   10036:	9b03      	ldr	r3, [sp, #12]
   10038:	055a      	lsls	r2, r3, #21
   1003a:	f100 812d 	bmi.w	10298 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x298>
   1003e:	9b07      	ldr	r3, [sp, #28]
   10040:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10044:	9304      	str	r3, [sp, #16]
   10046:	2300      	movs	r3, #0
   10048:	9503      	str	r5, [sp, #12]
   1004a:	9308      	str	r3, [sp, #32]
   1004c:	930d      	str	r3, [sp, #52]	; 0x34
   1004e:	930b      	str	r3, [sp, #44]	; 0x2c
   10050:	e73c      	b.n	fecc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x146c>
   10052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10054:	990c      	ldr	r1, [sp, #48]	; 0x30
   10056:	428b      	cmp	r3, r1
   10058:	f2c0 809f 	blt.w	1019a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x19a>
   1005c:	9a03      	ldr	r2, [sp, #12]
   1005e:	07d4      	lsls	r4, r2, #31
   10060:	f140 818e 	bpl.w	10380 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x380>
   10064:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10066:	4413      	add	r3, r2
   10068:	9307      	str	r3, [sp, #28]
   1006a:	9b03      	ldr	r3, [sp, #12]
   1006c:	0558      	lsls	r0, r3, #21
   1006e:	d503      	bpl.n	10078 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x78>
   10070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10072:	2b00      	cmp	r3, #0
   10074:	f300 810e 	bgt.w	10294 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x294>
   10078:	9b07      	ldr	r3, [sp, #28]
   1007a:	f04f 0967 	mov.w	r9, #103	; 0x67
   1007e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10082:	9304      	str	r3, [sp, #16]
   10084:	e7df      	b.n	10046 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x46>
   10086:	222d      	movs	r2, #45	; 0x2d
   10088:	f04f 0a00 	mov.w	sl, #0
   1008c:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
   10090:	f7fe bd77 	b.w	eb82 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x122>
   10094:	aa24      	add	r2, sp, #144	; 0x90
   10096:	ee19 1a90 	vmov	r1, s19
   1009a:	ee19 0a10 	vmov	r0, s18
   1009e:	f017 fea9 	bl	27df4 <__ssprint_r>
   100a2:	2800      	cmp	r0, #0
   100a4:	f47f a8a0 	bne.w	f1e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x788>
   100a8:	991e      	ldr	r1, [sp, #120]	; 0x78
   100aa:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   100ae:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   100b2:	e54a      	b.n	fb4a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10ea>
   100b4:	aa24      	add	r2, sp, #144	; 0x90
   100b6:	ee19 1a90 	vmov	r1, s19
   100ba:	ee19 0a10 	vmov	r0, s18
   100be:	f017 fe99 	bl	27df4 <__ssprint_r>
   100c2:	2800      	cmp	r0, #0
   100c4:	f47f a890 	bne.w	f1e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x788>
   100c8:	9c26      	ldr	r4, [sp, #152]	; 0x98
   100ca:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   100ce:	f7ff b9c3 	b.w	f458 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9f8>
   100d2:	46d1      	mov	r9, sl
   100d4:	f7ff ba31 	b.w	f53a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xada>
   100d8:	46b3      	mov	fp, r6
   100da:	f7ff ba2e 	b.w	f53a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xada>
   100de:	aa24      	add	r2, sp, #144	; 0x90
   100e0:	ee19 1a90 	vmov	r1, s19
   100e4:	ee19 0a10 	vmov	r0, s18
   100e8:	f017 fe84 	bl	27df4 <__ssprint_r>
   100ec:	2800      	cmp	r0, #0
   100ee:	f47f a87b 	bne.w	f1e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x788>
   100f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   100f4:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   100f8:	9c26      	ldr	r4, [sp, #152]	; 0x98
   100fa:	f7ff b9d4 	b.w	f4a6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa46>
   100fe:	9b03      	ldr	r3, [sp, #12]
   10100:	07da      	lsls	r2, r3, #31
   10102:	f57e adbc 	bpl.w	ec7e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x21e>
   10106:	9b25      	ldr	r3, [sp, #148]	; 0x94
   10108:	9910      	ldr	r1, [sp, #64]	; 0x40
   1010a:	3301      	adds	r3, #1
   1010c:	9811      	ldr	r0, [sp, #68]	; 0x44
   1010e:	190a      	adds	r2, r1, r4
   10110:	f8c8 1004 	str.w	r1, [r8, #4]
   10114:	2b07      	cmp	r3, #7
   10116:	f8c8 0000 	str.w	r0, [r8]
   1011a:	9226      	str	r2, [sp, #152]	; 0x98
   1011c:	9325      	str	r3, [sp, #148]	; 0x94
   1011e:	dcb9      	bgt.n	10094 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x94>
   10120:	f108 0808 	add.w	r8, r8, #8
   10124:	e514      	b.n	fb50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10f0>
   10126:	aa24      	add	r2, sp, #144	; 0x90
   10128:	ee19 1a90 	vmov	r1, s19
   1012c:	4648      	mov	r0, r9
   1012e:	f017 fe61 	bl	27df4 <__ssprint_r>
   10132:	2800      	cmp	r0, #0
   10134:	f47f a85a 	bne.w	f1ec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78c>
   10138:	7838      	ldrb	r0, [r7, #0]
   1013a:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   1013e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10140:	e476      	b.n	fa30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfd0>
   10142:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10144:	9916      	ldr	r1, [sp, #88]	; 0x58
   10146:	1af6      	subs	r6, r6, r3
   10148:	461a      	mov	r2, r3
   1014a:	4630      	mov	r0, r6
   1014c:	f012 fcf6 	bl	22b3c <strncpy>
   10150:	f898 3001 	ldrb.w	r3, [r8, #1]
   10154:	b10b      	cbz	r3, 1015a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x15a>
   10156:	f108 0801 	add.w	r8, r8, #1
   1015a:	4620      	mov	r0, r4
   1015c:	4629      	mov	r1, r5
   1015e:	220a      	movs	r2, #10
   10160:	2300      	movs	r3, #0
   10162:	f04f 0900 	mov.w	r9, #0
   10166:	f7fc fb77 	bl	c858 <__aeabi_uldivmod>
   1016a:	e553      	b.n	fc14 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11b4>
   1016c:	2b45      	cmp	r3, #69	; 0x45
   1016e:	f040 8156 	bne.w	1041e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x41e>
   10172:	a822      	add	r0, sp, #136	; 0x88
   10174:	a91f      	add	r1, sp, #124	; 0x7c
   10176:	f10a 0401 	add.w	r4, sl, #1
   1017a:	eeb0 0a4b 	vmov.f32	s0, s22
   1017e:	eef0 0a6b 	vmov.f32	s1, s23
   10182:	ab1e      	add	r3, sp, #120	; 0x78
   10184:	4622      	mov	r2, r4
   10186:	e9cd 1000 	strd	r1, r0, [sp]
   1018a:	2102      	movs	r1, #2
   1018c:	ee19 0a10 	vmov	r0, s18
   10190:	f000 f96a 	bl	10468 <_dtoa_r>
   10194:	4606      	mov	r6, r0
   10196:	4434      	add	r4, r6
   10198:	e715      	b.n	ffc6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1566>
   1019a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1019c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1019e:	189a      	adds	r2, r3, r2
   101a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   101a2:	2b00      	cmp	r3, #0
   101a4:	9207      	str	r2, [sp, #28]
   101a6:	f340 80c0 	ble.w	1032a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x32a>
   101aa:	f04f 0967 	mov.w	r9, #103	; 0x67
   101ae:	e742      	b.n	10036 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x36>
   101b0:	f8cd a010 	str.w	sl, [sp, #16]
   101b4:	f8cd a01c 	str.w	sl, [sp, #28]
   101b8:	4682      	mov	sl, r0
   101ba:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
   101be:	9409      	str	r4, [sp, #36]	; 0x24
   101c0:	900d      	str	r0, [sp, #52]	; 0x34
   101c2:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
   101c6:	f7fe bcdb 	b.w	eb80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x120>
   101ca:	aa24      	add	r2, sp, #144	; 0x90
   101cc:	ee19 1a90 	vmov	r1, s19
   101d0:	ee19 0a10 	vmov	r0, s18
   101d4:	f017 fe0e 	bl	27df4 <__ssprint_r>
   101d8:	2800      	cmp	r0, #0
   101da:	f47f a805 	bne.w	f1e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x788>
   101de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   101e0:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   101e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   101e6:	9c26      	ldr	r4, [sp, #152]	; 0x98
   101e8:	1ad3      	subs	r3, r2, r3
   101ea:	f7ff b974 	b.w	f4d6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa76>
   101ee:	9a25      	ldr	r2, [sp, #148]	; 0x94
   101f0:	f7ff b892 	b.w	f318 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8b8>
   101f4:	f1c1 0900 	rsb	r9, r1, #0
   101f8:	3110      	adds	r1, #16
   101fa:	4d96      	ldr	r5, [pc, #600]	; (10454 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x454>)
   101fc:	da29      	bge.n	10252 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x252>
   101fe:	2410      	movs	r4, #16
   10200:	ee19 aa10 	vmov	sl, s18
   10204:	ee19 ba90 	vmov	fp, s19
   10208:	e004      	b.n	10214 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x214>
   1020a:	f1a9 0910 	sub.w	r9, r9, #16
   1020e:	f1b9 0f10 	cmp.w	r9, #16
   10212:	dd1e      	ble.n	10252 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x252>
   10214:	3301      	adds	r3, #1
   10216:	3210      	adds	r2, #16
   10218:	f8c8 5000 	str.w	r5, [r8]
   1021c:	f108 0808 	add.w	r8, r8, #8
   10220:	2b07      	cmp	r3, #7
   10222:	f848 4c04 	str.w	r4, [r8, #-4]
   10226:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1022a:	ddee      	ble.n	1020a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x20a>
   1022c:	aa24      	add	r2, sp, #144	; 0x90
   1022e:	4659      	mov	r1, fp
   10230:	4650      	mov	r0, sl
   10232:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   10236:	f017 fddd 	bl	27df4 <__ssprint_r>
   1023a:	2800      	cmp	r0, #0
   1023c:	f47f af49 	bne.w	100d2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xd2>
   10240:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   10244:	e7e1      	b.n	1020a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x20a>
   10246:	2300      	movs	r3, #0
   10248:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
   1024c:	9313      	str	r3, [sp, #76]	; 0x4c
   1024e:	f7ff ba8b 	b.w	f768 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd08>
   10252:	3301      	adds	r3, #1
   10254:	444a      	add	r2, r9
   10256:	f8c8 5000 	str.w	r5, [r8]
   1025a:	2b07      	cmp	r3, #7
   1025c:	f8c8 9004 	str.w	r9, [r8, #4]
   10260:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   10264:	f77f af5c 	ble.w	10120 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x120>
   10268:	aa24      	add	r2, sp, #144	; 0x90
   1026a:	ee19 1a90 	vmov	r1, s19
   1026e:	ee19 0a10 	vmov	r0, s18
   10272:	f017 fdbf 	bl	27df4 <__ssprint_r>
   10276:	2800      	cmp	r0, #0
   10278:	f47e afb6 	bne.w	f1e8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x788>
   1027c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1027e:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   10282:	9b25      	ldr	r3, [sp, #148]	; 0x94
   10284:	e464      	b.n	fb50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10f0>
   10286:	4d73      	ldr	r5, [pc, #460]	; (10454 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x454>)
   10288:	f7fe bf13 	b.w	f0b2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x652>
   1028c:	46d9      	mov	r9, fp
   1028e:	46a3      	mov	fp, r4
   10290:	f7ff b953 	b.w	f53a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xada>
   10294:	f04f 0967 	mov.w	r9, #103	; 0x67
   10298:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1029a:	780b      	ldrb	r3, [r1, #0]
   1029c:	2bff      	cmp	r3, #255	; 0xff
   1029e:	f000 80cb 	beq.w	10438 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x438>
   102a2:	2400      	movs	r4, #0
   102a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   102a6:	4620      	mov	r0, r4
   102a8:	e003      	b.n	102b2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2b2>
   102aa:	3001      	adds	r0, #1
   102ac:	3101      	adds	r1, #1
   102ae:	2bff      	cmp	r3, #255	; 0xff
   102b0:	d008      	beq.n	102c4 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2c4>
   102b2:	4293      	cmp	r3, r2
   102b4:	da06      	bge.n	102c4 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2c4>
   102b6:	1ad2      	subs	r2, r2, r3
   102b8:	784b      	ldrb	r3, [r1, #1]
   102ba:	2b00      	cmp	r3, #0
   102bc:	d1f5      	bne.n	102aa <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2aa>
   102be:	3401      	adds	r4, #1
   102c0:	780b      	ldrb	r3, [r1, #0]
   102c2:	e7f4      	b.n	102ae <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2ae>
   102c4:	920a      	str	r2, [sp, #40]	; 0x28
   102c6:	9117      	str	r1, [sp, #92]	; 0x5c
   102c8:	900b      	str	r0, [sp, #44]	; 0x2c
   102ca:	940d      	str	r4, [sp, #52]	; 0x34
   102cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   102ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   102d0:	9907      	ldr	r1, [sp, #28]
   102d2:	4413      	add	r3, r2
   102d4:	2200      	movs	r2, #0
   102d6:	9503      	str	r5, [sp, #12]
   102d8:	9208      	str	r2, [sp, #32]
   102da:	9a15      	ldr	r2, [sp, #84]	; 0x54
   102dc:	fb02 1303 	mla	r3, r2, r3, r1
   102e0:	9307      	str	r3, [sp, #28]
   102e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   102e6:	9304      	str	r3, [sp, #16]
   102e8:	e5f0      	b.n	fecc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x146c>
   102ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   102ec:	2b00      	cmp	r3, #0
   102ee:	db63      	blt.n	103b8 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3b8>
   102f0:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
   102f4:	2103      	movs	r1, #3
   102f6:	4e58      	ldr	r6, [pc, #352]	; (10458 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x458>)
   102f8:	4b58      	ldr	r3, [pc, #352]	; (1045c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x45c>)
   102fa:	9104      	str	r1, [sp, #16]
   102fc:	f7fe bd17 	b.w	ed2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2ce>
   10300:	fa5f f289 	uxtb.w	r2, r9
   10304:	e58c      	b.n	fe20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13c0>
   10306:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10308:	f04f 0966 	mov.w	r9, #102	; 0x66
   1030c:	18d3      	adds	r3, r2, r3
   1030e:	4453      	add	r3, sl
   10310:	9307      	str	r3, [sp, #28]
   10312:	e690      	b.n	10036 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x36>
   10314:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
   10318:	232d      	movs	r3, #45	; 0x2d
   1031a:	ee0b 1a10 	vmov	s22, r1
   1031e:	9313      	str	r3, [sp, #76]	; 0x4c
   10320:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   10324:	ee0b 3a90 	vmov	s23, r3
   10328:	e62a      	b.n	ff80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1520>
   1032a:	f1c3 0301 	rsb	r3, r3, #1
   1032e:	f04f 0967 	mov.w	r9, #103	; 0x67
   10332:	441a      	add	r2, r3
   10334:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10338:	9207      	str	r2, [sp, #28]
   1033a:	9304      	str	r3, [sp, #16]
   1033c:	e683      	b.n	10046 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x46>
   1033e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10340:	9322      	str	r3, [sp, #136]	; 0x88
   10342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10344:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   10348:	7bd9      	ldrb	r1, [r3, #15]
   1034a:	465b      	mov	r3, fp
   1034c:	428a      	cmp	r2, r1
   1034e:	d109      	bne.n	10364 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x364>
   10350:	2030      	movs	r0, #48	; 0x30
   10352:	f803 0c01 	strb.w	r0, [r3, #-1]
   10356:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10358:	1e5a      	subs	r2, r3, #1
   1035a:	9222      	str	r2, [sp, #136]	; 0x88
   1035c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   10360:	4291      	cmp	r1, r2
   10362:	d0f6      	beq.n	10352 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x352>
   10364:	2a39      	cmp	r2, #57	; 0x39
   10366:	d053      	beq.n	10410 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x410>
   10368:	3201      	adds	r2, #1
   1036a:	b2d2      	uxtb	r2, r2
   1036c:	f803 2c01 	strb.w	r2, [r3, #-1]
   10370:	f7ff ba71 	b.w	f856 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdf6>
   10374:	ee19 ba90 	vmov	fp, s19
   10378:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   1037c:	f7ff b8e5 	b.w	f54a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xaea>
   10380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10382:	9307      	str	r3, [sp, #28]
   10384:	e671      	b.n	1006a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x6a>
   10386:	9a04      	ldr	r2, [sp, #16]
   10388:	2a41      	cmp	r2, #65	; 0x41
   1038a:	d03c      	beq.n	10406 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x406>
   1038c:	2130      	movs	r1, #48	; 0x30
   1038e:	f10d 0283 	add.w	r2, sp, #131	; 0x83
   10392:	f88d 1082 	strb.w	r1, [sp, #130]	; 0x82
   10396:	3330      	adds	r3, #48	; 0x30
   10398:	a920      	add	r1, sp, #128	; 0x80
   1039a:	f802 3b01 	strb.w	r3, [r2], #1
   1039e:	1a53      	subs	r3, r2, r1
   103a0:	9314      	str	r3, [sp, #80]	; 0x50
   103a2:	e57a      	b.n	fe9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x143a>
   103a4:	9b03      	ldr	r3, [sp, #12]
   103a6:	07dd      	lsls	r5, r3, #31
   103a8:	f57f ad82 	bpl.w	feb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1450>
   103ac:	e57c      	b.n	fea8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1448>
   103ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   103b0:	222d      	movs	r2, #45	; 0x2d
   103b2:	f1c3 0301 	rsb	r3, r3, #1
   103b6:	e539      	b.n	fe2c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13cc>
   103b8:	232d      	movs	r3, #45	; 0x2d
   103ba:	461a      	mov	r2, r3
   103bc:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
   103c0:	e798      	b.n	102f4 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2f4>
   103c2:	ea53 030a 	orrs.w	r3, r3, sl
   103c6:	d105      	bne.n	103d4 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3d4>
   103c8:	2301      	movs	r3, #1
   103ca:	f04f 0966 	mov.w	r9, #102	; 0x66
   103ce:	9304      	str	r3, [sp, #16]
   103d0:	9307      	str	r3, [sp, #28]
   103d2:	e638      	b.n	10046 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x46>
   103d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   103d6:	f04f 0966 	mov.w	r9, #102	; 0x66
   103da:	3301      	adds	r3, #1
   103dc:	4453      	add	r3, sl
   103de:	9307      	str	r3, [sp, #28]
   103e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   103e4:	9304      	str	r3, [sp, #16]
   103e6:	e62e      	b.n	10046 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x46>
   103e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   103ea:	f897 9001 	ldrb.w	r9, [r7, #1]
   103ee:	4617      	mov	r7, r2
   103f0:	f853 2b04 	ldr.w	r2, [r3], #4
   103f4:	ea42 7ae2 	orr.w	sl, r2, r2, asr #31
   103f8:	9309      	str	r3, [sp, #36]	; 0x24
   103fa:	f7fe bacf 	b.w	e99c <_svfprintf_r+0xbc>
   103fe:	f1ca 0301 	rsb	r3, sl, #1
   10402:	931e      	str	r3, [sp, #120]	; 0x78
   10404:	e5dd      	b.n	ffc2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1562>
   10406:	f10d 0282 	add.w	r2, sp, #130	; 0x82
   1040a:	e7c4      	b.n	10396 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x396>
   1040c:	4d11      	ldr	r5, [pc, #68]	; (10454 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x454>)
   1040e:	e56d      	b.n	feec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x148c>
   10410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10412:	7a92      	ldrb	r2, [r2, #10]
   10414:	e7aa      	b.n	1036c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x36c>
   10416:	2300      	movs	r3, #0
   10418:	9308      	str	r3, [sp, #32]
   1041a:	f7ff ba23 	b.w	f864 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe04>
   1041e:	4654      	mov	r4, sl
   10420:	e4c7      	b.n	fdb2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1352>
   10422:	2302      	movs	r3, #2
   10424:	9314      	str	r3, [sp, #80]	; 0x50
   10426:	e538      	b.n	fe9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x143a>
   10428:	230c      	movs	r3, #12
   1042a:	f04f 32ff 	mov.w	r2, #4294967295
   1042e:	f8c9 3000 	str.w	r3, [r9]
   10432:	9205      	str	r2, [sp, #20]
   10434:	f7ff b890 	b.w	f558 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xaf8>
   10438:	2300      	movs	r3, #0
   1043a:	930d      	str	r3, [sp, #52]	; 0x34
   1043c:	930b      	str	r3, [sp, #44]	; 0x2c
   1043e:	e745      	b.n	102cc <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2cc>
   10440:	ee19 ba90 	vmov	fp, s19
   10444:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   10448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1044c:	f8ab 300c 	strh.w	r3, [fp, #12]
   10450:	f7ff b87b 	b.w	f54a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xaea>
   10454:	0002c130 	.word	0x0002c130
   10458:	0002c0e4 	.word	0x0002c0e4
   1045c:	0002c0e8 	.word	0x0002c0e8
   10460:	66666667 	.word	0x66666667
   10464:	00000000 	.word	0x00000000

00010468 <_dtoa_r>:
   10468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1046c:	ed2d 8b04 	vpush	{d8-d9}
   10470:	b099      	sub	sp, #100	; 0x64
   10472:	4604      	mov	r4, r0
   10474:	9101      	str	r1, [sp, #4]
   10476:	6c01      	ldr	r1, [r0, #64]	; 0x40
   10478:	9d26      	ldr	r5, [sp, #152]	; 0x98
   1047a:	920b      	str	r2, [sp, #44]	; 0x2c
   1047c:	9308      	str	r3, [sp, #32]
   1047e:	ec57 6b10 	vmov	r6, r7, d0
   10482:	e9cd 6704 	strd	r6, r7, [sp, #16]
   10486:	b141      	cbz	r1, 1049a <_dtoa_r+0x32>
   10488:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1048a:	2301      	movs	r3, #1
   1048c:	4093      	lsls	r3, r2
   1048e:	e9c1 2301 	strd	r2, r3, [r1, #4]
   10492:	f016 fd3b 	bl	26f0c <_Bfree>
   10496:	2300      	movs	r3, #0
   10498:	6423      	str	r3, [r4, #64]	; 0x40
   1049a:	f1b7 0900 	subs.w	r9, r7, #0
   1049e:	f2c0 80b4 	blt.w	1060a <_dtoa_r+0x1a2>
   104a2:	2300      	movs	r3, #0
   104a4:	602b      	str	r3, [r5, #0]
   104a6:	4b7e      	ldr	r3, [pc, #504]	; (106a0 <_dtoa_r+0x238>)
   104a8:	ea33 0309 	bics.w	r3, r3, r9
   104ac:	f000 80b8 	beq.w	10620 <_dtoa_r+0x1b8>
   104b0:	2200      	movs	r2, #0
   104b2:	2300      	movs	r3, #0
   104b4:	ed9d 7b04 	vldr	d7, [sp, #16]
   104b8:	ec51 0b17 	vmov	r0, r1, d7
   104bc:	ed8d 7b02 	vstr	d7, [sp, #8]
   104c0:	f7fc f8d0 	bl	c664 <__aeabi_dcmpeq>
   104c4:	4680      	mov	r8, r0
   104c6:	b188      	cbz	r0, 104ec <_dtoa_r+0x84>
   104c8:	2301      	movs	r3, #1
   104ca:	9a08      	ldr	r2, [sp, #32]
   104cc:	6013      	str	r3, [r2, #0]
   104ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   104d0:	2b00      	cmp	r3, #0
   104d2:	f000 825a 	beq.w	1098a <_dtoa_r+0x522>
   104d6:	4b73      	ldr	r3, [pc, #460]	; (106a4 <_dtoa_r+0x23c>)
   104d8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   104da:	f103 39ff 	add.w	r9, r3, #4294967295
   104de:	6013      	str	r3, [r2, #0]
   104e0:	4648      	mov	r0, r9
   104e2:	b019      	add	sp, #100	; 0x64
   104e4:	ecbd 8b04 	vpop	{d8-d9}
   104e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   104ec:	ed9d 0b02 	vldr	d0, [sp, #8]
   104f0:	aa16      	add	r2, sp, #88	; 0x58
   104f2:	a917      	add	r1, sp, #92	; 0x5c
   104f4:	4620      	mov	r0, r4
   104f6:	f017 f8f5 	bl	276e4 <__d2b>
   104fa:	4683      	mov	fp, r0
   104fc:	ea5f 5519 	movs.w	r5, r9, lsr #20
   10500:	f040 80a7 	bne.w	10652 <_dtoa_r+0x1ea>
   10504:	e9dd 8516 	ldrd	r8, r5, [sp, #88]	; 0x58
   10508:	4445      	add	r5, r8
   1050a:	f205 4032 	addw	r0, r5, #1074	; 0x432
   1050e:	2820      	cmp	r0, #32
   10510:	f340 8243 	ble.w	1099a <_dtoa_r+0x532>
   10514:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   10518:	f205 4012 	addw	r0, r5, #1042	; 0x412
   1051c:	fa09 f903 	lsl.w	r9, r9, r3
   10520:	fa26 f000 	lsr.w	r0, r6, r0
   10524:	ea49 0000 	orr.w	r0, r9, r0
   10528:	f7fb ffcc 	bl	c4c4 <__aeabi_ui2d>
   1052c:	3d01      	subs	r5, #1
   1052e:	2201      	movs	r2, #1
   10530:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   10534:	9210      	str	r2, [sp, #64]	; 0x40
   10536:	2200      	movs	r2, #0
   10538:	4b5b      	ldr	r3, [pc, #364]	; (106a8 <_dtoa_r+0x240>)
   1053a:	f7fb fe85 	bl	c248 <__aeabi_dsub>
   1053e:	a352      	add	r3, pc, #328	; (adr r3, 10688 <_dtoa_r+0x220>)
   10540:	e9d3 2300 	ldrd	r2, r3, [r3]
   10544:	f7fc fc6a 	bl	ce1c <__aeabi_dmul>
   10548:	a351      	add	r3, pc, #324	; (adr r3, 10690 <_dtoa_r+0x228>)
   1054a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1054e:	f7fb fe7d 	bl	c24c <__adddf3>
   10552:	4606      	mov	r6, r0
   10554:	460f      	mov	r7, r1
   10556:	4628      	mov	r0, r5
   10558:	f7fb ffc4 	bl	c4e4 <__aeabi_i2d>
   1055c:	a34e      	add	r3, pc, #312	; (adr r3, 10698 <_dtoa_r+0x230>)
   1055e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10562:	f7fc fc5b 	bl	ce1c <__aeabi_dmul>
   10566:	4602      	mov	r2, r0
   10568:	460b      	mov	r3, r1
   1056a:	4630      	mov	r0, r6
   1056c:	4639      	mov	r1, r7
   1056e:	f7fb fe6d 	bl	c24c <__adddf3>
   10572:	4606      	mov	r6, r0
   10574:	460f      	mov	r7, r1
   10576:	f7fc f8a7 	bl	c6c8 <__aeabi_d2iz>
   1057a:	2200      	movs	r2, #0
   1057c:	4682      	mov	sl, r0
   1057e:	2300      	movs	r3, #0
   10580:	4630      	mov	r0, r6
   10582:	4639      	mov	r1, r7
   10584:	f7fc f878 	bl	c678 <__aeabi_dcmplt>
   10588:	2800      	cmp	r0, #0
   1058a:	f040 81f1 	bne.w	10970 <_dtoa_r+0x508>
   1058e:	f1ba 0f16 	cmp.w	sl, #22
   10592:	f200 81df 	bhi.w	10954 <_dtoa_r+0x4ec>
   10596:	4b45      	ldr	r3, [pc, #276]	; (106ac <_dtoa_r+0x244>)
   10598:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   1059c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   105a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   105a4:	f7fc f868 	bl	c678 <__aeabi_dcmplt>
   105a8:	2800      	cmp	r0, #0
   105aa:	f000 8085 	beq.w	106b8 <_dtoa_r+0x250>
   105ae:	2300      	movs	r3, #0
   105b0:	eba8 0505 	sub.w	r5, r8, r5
   105b4:	f10a 3aff 	add.w	sl, sl, #4294967295
   105b8:	930f      	str	r3, [sp, #60]	; 0x3c
   105ba:	1e6b      	subs	r3, r5, #1
   105bc:	9309      	str	r3, [sp, #36]	; 0x24
   105be:	f100 81d1 	bmi.w	10964 <_dtoa_r+0x4fc>
   105c2:	2300      	movs	r3, #0
   105c4:	930c      	str	r3, [sp, #48]	; 0x30
   105c6:	f1ba 0f00 	cmp.w	sl, #0
   105ca:	da7d      	bge.n	106c8 <_dtoa_r+0x260>
   105cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   105ce:	f8cd a01c 	str.w	sl, [sp, #28]
   105d2:	eba3 030a 	sub.w	r3, r3, sl
   105d6:	930c      	str	r3, [sp, #48]	; 0x30
   105d8:	f1ca 0300 	rsb	r3, sl, #0
   105dc:	f04f 0a00 	mov.w	sl, #0
   105e0:	930e      	str	r3, [sp, #56]	; 0x38
   105e2:	9b01      	ldr	r3, [sp, #4]
   105e4:	2b09      	cmp	r3, #9
   105e6:	d879      	bhi.n	106dc <_dtoa_r+0x274>
   105e8:	2b05      	cmp	r3, #5
   105ea:	f340 81db 	ble.w	109a4 <_dtoa_r+0x53c>
   105ee:	3b04      	subs	r3, #4
   105f0:	2500      	movs	r5, #0
   105f2:	9301      	str	r3, [sp, #4]
   105f4:	9b01      	ldr	r3, [sp, #4]
   105f6:	3b02      	subs	r3, #2
   105f8:	2b03      	cmp	r3, #3
   105fa:	f200 8564 	bhi.w	110c6 <_dtoa_r+0xc5e>
   105fe:	e8df f013 	tbh	[pc, r3, lsl #1]
   10602:	03f4      	.short	0x03f4
   10604:	03e803f1 	.word	0x03e803f1
   10608:	03cc      	.short	0x03cc
   1060a:	2301      	movs	r3, #1
   1060c:	f029 4900 	bic.w	r9, r9, #2147483648	; 0x80000000
   10610:	602b      	str	r3, [r5, #0]
   10612:	4b23      	ldr	r3, [pc, #140]	; (106a0 <_dtoa_r+0x238>)
   10614:	f8cd 9014 	str.w	r9, [sp, #20]
   10618:	ea33 0309 	bics.w	r3, r3, r9
   1061c:	f47f af48 	bne.w	104b0 <_dtoa_r+0x48>
   10620:	f242 730f 	movw	r3, #9999	; 0x270f
   10624:	f3c9 0913 	ubfx	r9, r9, #0, #20
   10628:	9a08      	ldr	r2, [sp, #32]
   1062a:	6013      	str	r3, [r2, #0]
   1062c:	ea59 0306 	orrs.w	r3, r9, r6
   10630:	d01f      	beq.n	10672 <_dtoa_r+0x20a>
   10632:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   10634:	f8df 9078 	ldr.w	r9, [pc, #120]	; 106b0 <_dtoa_r+0x248>
   10638:	2b00      	cmp	r3, #0
   1063a:	f43f af51 	beq.w	104e0 <_dtoa_r+0x78>
   1063e:	f109 0303 	add.w	r3, r9, #3
   10642:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   10644:	4648      	mov	r0, r9
   10646:	6013      	str	r3, [r2, #0]
   10648:	b019      	add	sp, #100	; 0x64
   1064a:	ecbd 8b04 	vpop	{d8-d9}
   1064e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10652:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   10656:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   1065a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   1065e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   10662:	4608      	mov	r0, r1
   10664:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   10668:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   1066c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   10670:	e761      	b.n	10536 <_dtoa_r+0xce>
   10672:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   10674:	f8df 903c 	ldr.w	r9, [pc, #60]	; 106b4 <_dtoa_r+0x24c>
   10678:	2b00      	cmp	r3, #0
   1067a:	f43f af31 	beq.w	104e0 <_dtoa_r+0x78>
   1067e:	f109 0308 	add.w	r3, r9, #8
   10682:	e7de      	b.n	10642 <_dtoa_r+0x1da>
   10684:	f3af 8000 	nop.w
   10688:	636f4361 	.word	0x636f4361
   1068c:	3fd287a7 	.word	0x3fd287a7
   10690:	8b60c8b3 	.word	0x8b60c8b3
   10694:	3fc68a28 	.word	0x3fc68a28
   10698:	509f79fb 	.word	0x509f79fb
   1069c:	3fd34413 	.word	0x3fd34413
   106a0:	7ff00000 	.word	0x7ff00000
   106a4:	0002c11d 	.word	0x0002c11d
   106a8:	3ff80000 	.word	0x3ff80000
   106ac:	0002b8f8 	.word	0x0002b8f8
   106b0:	0002c18c 	.word	0x0002c18c
   106b4:	0002c190 	.word	0x0002c190
   106b8:	eba8 0505 	sub.w	r5, r8, r5
   106bc:	1e6b      	subs	r3, r5, #1
   106be:	9309      	str	r3, [sp, #36]	; 0x24
   106c0:	f100 84ca 	bmi.w	11058 <_dtoa_r+0xbf0>
   106c4:	900f      	str	r0, [sp, #60]	; 0x3c
   106c6:	900c      	str	r0, [sp, #48]	; 0x30
   106c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   106ca:	f8cd a01c 	str.w	sl, [sp, #28]
   106ce:	4453      	add	r3, sl
   106d0:	9309      	str	r3, [sp, #36]	; 0x24
   106d2:	2300      	movs	r3, #0
   106d4:	930e      	str	r3, [sp, #56]	; 0x38
   106d6:	9b01      	ldr	r3, [sp, #4]
   106d8:	2b09      	cmp	r3, #9
   106da:	d985      	bls.n	105e8 <_dtoa_r+0x180>
   106dc:	2300      	movs	r3, #0
   106de:	2501      	movs	r5, #1
   106e0:	f04f 32ff 	mov.w	r2, #4294967295
   106e4:	9301      	str	r3, [sp, #4]
   106e6:	920a      	str	r2, [sp, #40]	; 0x28
   106e8:	950d      	str	r5, [sp, #52]	; 0x34
   106ea:	930b      	str	r3, [sp, #44]	; 0x2c
   106ec:	2100      	movs	r1, #0
   106ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   106f0:	6461      	str	r1, [r4, #68]	; 0x44
   106f2:	9314      	str	r3, [sp, #80]	; 0x50
   106f4:	4620      	mov	r0, r4
   106f6:	f016 fbe3 	bl	26ec0 <_Balloc>
   106fa:	9006      	str	r0, [sp, #24]
   106fc:	2800      	cmp	r0, #0
   106fe:	f000 8641 	beq.w	11384 <_dtoa_r+0xf1c>
   10702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10704:	2b0e      	cmp	r3, #14
   10706:	bf8c      	ite	hi
   10708:	2500      	movhi	r5, #0
   1070a:	f005 0501 	andls.w	r5, r5, #1
   1070e:	9b06      	ldr	r3, [sp, #24]
   10710:	6423      	str	r3, [r4, #64]	; 0x40
   10712:	2d00      	cmp	r5, #0
   10714:	f000 80f2 	beq.w	108fc <_dtoa_r+0x494>
   10718:	9907      	ldr	r1, [sp, #28]
   1071a:	2900      	cmp	r1, #0
   1071c:	f340 829c 	ble.w	10c58 <_dtoa_r+0x7f0>
   10720:	4ac8      	ldr	r2, [pc, #800]	; (10a44 <_dtoa_r+0x5dc>)
   10722:	f001 030f 	and.w	r3, r1, #15
   10726:	05c8      	lsls	r0, r1, #23
   10728:	ea4f 1521 	mov.w	r5, r1, asr #4
   1072c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   10730:	e9d3 6700 	ldrd	r6, r7, [r3]
   10734:	f140 8328 	bpl.w	10d88 <_dtoa_r+0x920>
   10738:	4bc3      	ldr	r3, [pc, #780]	; (10a48 <_dtoa_r+0x5e0>)
   1073a:	f005 050f 	and.w	r5, r5, #15
   1073e:	f04f 0803 	mov.w	r8, #3
   10742:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   10746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1074a:	f7fc fc91 	bl	d070 <__aeabi_ddiv>
   1074e:	ec41 0b18 	vmov	d8, r0, r1
   10752:	b18d      	cbz	r5, 10778 <_dtoa_r+0x310>
   10754:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 10a48 <_dtoa_r+0x5e0>
   10758:	07e9      	lsls	r1, r5, #31
   1075a:	d509      	bpl.n	10770 <_dtoa_r+0x308>
   1075c:	4630      	mov	r0, r6
   1075e:	4639      	mov	r1, r7
   10760:	f108 0801 	add.w	r8, r8, #1
   10764:	e9d9 2300 	ldrd	r2, r3, [r9]
   10768:	f7fc fb58 	bl	ce1c <__aeabi_dmul>
   1076c:	4606      	mov	r6, r0
   1076e:	460f      	mov	r7, r1
   10770:	106d      	asrs	r5, r5, #1
   10772:	f109 0908 	add.w	r9, r9, #8
   10776:	d1ef      	bne.n	10758 <_dtoa_r+0x2f0>
   10778:	4632      	mov	r2, r6
   1077a:	463b      	mov	r3, r7
   1077c:	ec51 0b18 	vmov	r0, r1, d8
   10780:	f7fc fc76 	bl	d070 <__aeabi_ddiv>
   10784:	4606      	mov	r6, r0
   10786:	460f      	mov	r7, r1
   10788:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1078a:	b143      	cbz	r3, 1079e <_dtoa_r+0x336>
   1078c:	2200      	movs	r2, #0
   1078e:	4baf      	ldr	r3, [pc, #700]	; (10a4c <_dtoa_r+0x5e4>)
   10790:	4630      	mov	r0, r6
   10792:	4639      	mov	r1, r7
   10794:	f7fb ff70 	bl	c678 <__aeabi_dcmplt>
   10798:	2800      	cmp	r0, #0
   1079a:	f040 845f 	bne.w	1105c <_dtoa_r+0xbf4>
   1079e:	4640      	mov	r0, r8
   107a0:	f7fb fea0 	bl	c4e4 <__aeabi_i2d>
   107a4:	4632      	mov	r2, r6
   107a6:	463b      	mov	r3, r7
   107a8:	f7fc fb38 	bl	ce1c <__aeabi_dmul>
   107ac:	4ba8      	ldr	r3, [pc, #672]	; (10a50 <_dtoa_r+0x5e8>)
   107ae:	2200      	movs	r2, #0
   107b0:	f7fb fd4c 	bl	c24c <__adddf3>
   107b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   107b6:	4680      	mov	r8, r0
   107b8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   107bc:	2b00      	cmp	r3, #0
   107be:	f000 8101 	beq.w	109c4 <_dtoa_r+0x55c>
   107c2:	9b07      	ldr	r3, [sp, #28]
   107c4:	9312      	str	r3, [sp, #72]	; 0x48
   107c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   107c8:	9311      	str	r3, [sp, #68]	; 0x44
   107ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   107cc:	2b00      	cmp	r3, #0
   107ce:	f000 830f 	beq.w	10df0 <_dtoa_r+0x988>
   107d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   107d4:	2000      	movs	r0, #0
   107d6:	4b9b      	ldr	r3, [pc, #620]	; (10a44 <_dtoa_r+0x5dc>)
   107d8:	499e      	ldr	r1, [pc, #632]	; (10a54 <_dtoa_r+0x5ec>)
   107da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   107de:	9d06      	ldr	r5, [sp, #24]
   107e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   107e4:	f7fc fc44 	bl	d070 <__aeabi_ddiv>
   107e8:	4642      	mov	r2, r8
   107ea:	464b      	mov	r3, r9
   107ec:	f7fb fd2c 	bl	c248 <__aeabi_dsub>
   107f0:	4680      	mov	r8, r0
   107f2:	4689      	mov	r9, r1
   107f4:	4630      	mov	r0, r6
   107f6:	4639      	mov	r1, r7
   107f8:	f7fb ff66 	bl	c6c8 <__aeabi_d2iz>
   107fc:	ec49 8b18 	vmov	d8, r8, r9
   10800:	4680      	mov	r8, r0
   10802:	f7fb fe6f 	bl	c4e4 <__aeabi_i2d>
   10806:	4602      	mov	r2, r0
   10808:	460b      	mov	r3, r1
   1080a:	f108 0830 	add.w	r8, r8, #48	; 0x30
   1080e:	4630      	mov	r0, r6
   10810:	4639      	mov	r1, r7
   10812:	f7fb fd19 	bl	c248 <__aeabi_dsub>
   10816:	f805 8b01 	strb.w	r8, [r5], #1
   1081a:	4606      	mov	r6, r0
   1081c:	460f      	mov	r7, r1
   1081e:	4602      	mov	r2, r0
   10820:	460b      	mov	r3, r1
   10822:	ec51 0b18 	vmov	r0, r1, d8
   10826:	f7fb ff45 	bl	c6b4 <__aeabi_dcmpgt>
   1082a:	2800      	cmp	r0, #0
   1082c:	f040 8515 	bne.w	1125a <_dtoa_r+0xdf2>
   10830:	f04f 0900 	mov.w	r9, #0
   10834:	ee09 ba10 	vmov	s18, fp
   10838:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
   1083c:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
   10840:	46ca      	mov	sl, r9
   10842:	ec59 8b18 	vmov	r8, r9, d8
   10846:	ee08 4a10 	vmov	s16, r4
   1084a:	462c      	mov	r4, r5
   1084c:	e02a      	b.n	108a4 <_dtoa_r+0x43c>
   1084e:	f10a 0a01 	add.w	sl, sl, #1
   10852:	45da      	cmp	sl, fp
   10854:	da4c      	bge.n	108f0 <_dtoa_r+0x488>
   10856:	4640      	mov	r0, r8
   10858:	4649      	mov	r1, r9
   1085a:	2200      	movs	r2, #0
   1085c:	4b7e      	ldr	r3, [pc, #504]	; (10a58 <_dtoa_r+0x5f0>)
   1085e:	f7fc fadd 	bl	ce1c <__aeabi_dmul>
   10862:	2200      	movs	r2, #0
   10864:	4b7c      	ldr	r3, [pc, #496]	; (10a58 <_dtoa_r+0x5f0>)
   10866:	4680      	mov	r8, r0
   10868:	4689      	mov	r9, r1
   1086a:	4630      	mov	r0, r6
   1086c:	4639      	mov	r1, r7
   1086e:	f7fc fad5 	bl	ce1c <__aeabi_dmul>
   10872:	460f      	mov	r7, r1
   10874:	4606      	mov	r6, r0
   10876:	f7fb ff27 	bl	c6c8 <__aeabi_d2iz>
   1087a:	4605      	mov	r5, r0
   1087c:	f7fb fe32 	bl	c4e4 <__aeabi_i2d>
   10880:	4602      	mov	r2, r0
   10882:	460b      	mov	r3, r1
   10884:	3530      	adds	r5, #48	; 0x30
   10886:	4630      	mov	r0, r6
   10888:	4639      	mov	r1, r7
   1088a:	f7fb fcdd 	bl	c248 <__aeabi_dsub>
   1088e:	4642      	mov	r2, r8
   10890:	464b      	mov	r3, r9
   10892:	f804 5b01 	strb.w	r5, [r4], #1
   10896:	4606      	mov	r6, r0
   10898:	460f      	mov	r7, r1
   1089a:	f7fb feed 	bl	c678 <__aeabi_dcmplt>
   1089e:	2800      	cmp	r0, #0
   108a0:	f040 84d6 	bne.w	11250 <_dtoa_r+0xde8>
   108a4:	4632      	mov	r2, r6
   108a6:	463b      	mov	r3, r7
   108a8:	2000      	movs	r0, #0
   108aa:	4968      	ldr	r1, [pc, #416]	; (10a4c <_dtoa_r+0x5e4>)
   108ac:	f7fb fccc 	bl	c248 <__aeabi_dsub>
   108b0:	4642      	mov	r2, r8
   108b2:	464b      	mov	r3, r9
   108b4:	f7fb fee0 	bl	c678 <__aeabi_dcmplt>
   108b8:	2800      	cmp	r0, #0
   108ba:	d0c8      	beq.n	1084e <_dtoa_r+0x3e6>
   108bc:	4625      	mov	r5, r4
   108be:	ee19 ba10 	vmov	fp, s18
   108c2:	9906      	ldr	r1, [sp, #24]
   108c4:	ee18 4a10 	vmov	r4, s16
   108c8:	e002      	b.n	108d0 <_dtoa_r+0x468>
   108ca:	42a9      	cmp	r1, r5
   108cc:	f000 8496 	beq.w	111fc <_dtoa_r+0xd94>
   108d0:	462a      	mov	r2, r5
   108d2:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   108d6:	2b39      	cmp	r3, #57	; 0x39
   108d8:	d0f7      	beq.n	108ca <_dtoa_r+0x462>
   108da:	3301      	adds	r3, #1
   108dc:	9106      	str	r1, [sp, #24]
   108de:	b2db      	uxtb	r3, r3
   108e0:	702b      	strb	r3, [r5, #0]
   108e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   108e4:	f8dd 9018 	ldr.w	r9, [sp, #24]
   108e8:	3301      	adds	r3, #1
   108ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
   108ee:	e092      	b.n	10a16 <_dtoa_r+0x5ae>
   108f0:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
   108f4:	ee19 ba10 	vmov	fp, s18
   108f8:	ee18 4a10 	vmov	r4, s16
   108fc:	9a07      	ldr	r2, [sp, #28]
   108fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10900:	2a0e      	cmp	r2, #14
   10902:	dc02      	bgt.n	1090a <_dtoa_r+0x4a2>
   10904:	2b00      	cmp	r3, #0
   10906:	f280 81e2 	bge.w	10cce <_dtoa_r+0x866>
   1090a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1090c:	2a00      	cmp	r2, #0
   1090e:	f000 80a9 	beq.w	10a64 <_dtoa_r+0x5fc>
   10912:	9a01      	ldr	r2, [sp, #4]
   10914:	2a01      	cmp	r2, #1
   10916:	f340 83c6 	ble.w	110a6 <_dtoa_r+0xc3e>
   1091a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1091c:	1e5f      	subs	r7, r3, #1
   1091e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10920:	42bb      	cmp	r3, r7
   10922:	f280 8370 	bge.w	11006 <_dtoa_r+0xb9e>
   10926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10928:	970e      	str	r7, [sp, #56]	; 0x38
   1092a:	1afb      	subs	r3, r7, r3
   1092c:	2700      	movs	r7, #0
   1092e:	449a      	add	sl, r3
   10930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10932:	2b00      	cmp	r3, #0
   10934:	f2c0 845d 	blt.w	111f2 <_dtoa_r+0xd8a>
   10938:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1093a:	4611      	mov	r1, r2
   1093c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1093e:	4419      	add	r1, r3
   10940:	4616      	mov	r6, r2
   10942:	441a      	add	r2, r3
   10944:	9109      	str	r1, [sp, #36]	; 0x24
   10946:	920c      	str	r2, [sp, #48]	; 0x30
   10948:	2101      	movs	r1, #1
   1094a:	4620      	mov	r0, r4
   1094c:	f016 fbea 	bl	27124 <__i2b>
   10950:	4605      	mov	r5, r0
   10952:	e08a      	b.n	10a6a <_dtoa_r+0x602>
   10954:	2301      	movs	r3, #1
   10956:	eba8 0505 	sub.w	r5, r8, r5
   1095a:	930f      	str	r3, [sp, #60]	; 0x3c
   1095c:	1e6b      	subs	r3, r5, #1
   1095e:	9309      	str	r3, [sp, #36]	; 0x24
   10960:	f57f ae2f 	bpl.w	105c2 <_dtoa_r+0x15a>
   10964:	f1c5 0301 	rsb	r3, r5, #1
   10968:	930c      	str	r3, [sp, #48]	; 0x30
   1096a:	2300      	movs	r3, #0
   1096c:	9309      	str	r3, [sp, #36]	; 0x24
   1096e:	e62a      	b.n	105c6 <_dtoa_r+0x15e>
   10970:	4650      	mov	r0, sl
   10972:	f7fb fdb7 	bl	c4e4 <__aeabi_i2d>
   10976:	4632      	mov	r2, r6
   10978:	463b      	mov	r3, r7
   1097a:	f7fb fe73 	bl	c664 <__aeabi_dcmpeq>
   1097e:	2800      	cmp	r0, #0
   10980:	f47f ae05 	bne.w	1058e <_dtoa_r+0x126>
   10984:	f10a 3aff 	add.w	sl, sl, #4294967295
   10988:	e601      	b.n	1058e <_dtoa_r+0x126>
   1098a:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 10a60 <_dtoa_r+0x5f8>
   1098e:	4648      	mov	r0, r9
   10990:	b019      	add	sp, #100	; 0x64
   10992:	ecbd 8b04 	vpop	{d8-d9}
   10996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1099a:	f1c0 0020 	rsb	r0, r0, #32
   1099e:	fa06 f000 	lsl.w	r0, r6, r0
   109a2:	e5c1      	b.n	10528 <_dtoa_r+0xc0>
   109a4:	2501      	movs	r5, #1
   109a6:	e625      	b.n	105f4 <_dtoa_r+0x18c>
   109a8:	4640      	mov	r0, r8
   109aa:	f7fb fd9b 	bl	c4e4 <__aeabi_i2d>
   109ae:	4632      	mov	r2, r6
   109b0:	463b      	mov	r3, r7
   109b2:	f7fc fa33 	bl	ce1c <__aeabi_dmul>
   109b6:	2200      	movs	r2, #0
   109b8:	4b25      	ldr	r3, [pc, #148]	; (10a50 <_dtoa_r+0x5e8>)
   109ba:	f7fb fc47 	bl	c24c <__adddf3>
   109be:	4680      	mov	r8, r0
   109c0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   109c4:	4630      	mov	r0, r6
   109c6:	4639      	mov	r1, r7
   109c8:	2200      	movs	r2, #0
   109ca:	4b24      	ldr	r3, [pc, #144]	; (10a5c <_dtoa_r+0x5f4>)
   109cc:	f7fb fc3c 	bl	c248 <__aeabi_dsub>
   109d0:	4642      	mov	r2, r8
   109d2:	464b      	mov	r3, r9
   109d4:	4606      	mov	r6, r0
   109d6:	460f      	mov	r7, r1
   109d8:	f7fb fe6c 	bl	c6b4 <__aeabi_dcmpgt>
   109dc:	2800      	cmp	r0, #0
   109de:	f040 832d 	bne.w	1103c <_dtoa_r+0xbd4>
   109e2:	4630      	mov	r0, r6
   109e4:	4639      	mov	r1, r7
   109e6:	4642      	mov	r2, r8
   109e8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   109ec:	f7fb fe44 	bl	c678 <__aeabi_dcmplt>
   109f0:	2800      	cmp	r0, #0
   109f2:	d083      	beq.n	108fc <_dtoa_r+0x494>
   109f4:	2700      	movs	r7, #0
   109f6:	463d      	mov	r5, r7
   109f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   109fa:	f8dd 9018 	ldr.w	r9, [sp, #24]
   109fe:	43de      	mvns	r6, r3
   10a00:	4639      	mov	r1, r7
   10a02:	4620      	mov	r0, r4
   10a04:	f016 fa82 	bl	26f0c <_Bfree>
   10a08:	1c73      	adds	r3, r6, #1
   10a0a:	9307      	str	r3, [sp, #28]
   10a0c:	b11d      	cbz	r5, 10a16 <_dtoa_r+0x5ae>
   10a0e:	4629      	mov	r1, r5
   10a10:	4620      	mov	r0, r4
   10a12:	f016 fa7b 	bl	26f0c <_Bfree>
   10a16:	4659      	mov	r1, fp
   10a18:	4620      	mov	r0, r4
   10a1a:	f016 fa77 	bl	26f0c <_Bfree>
   10a1e:	2300      	movs	r3, #0
   10a20:	9a06      	ldr	r2, [sp, #24]
   10a22:	7013      	strb	r3, [r2, #0]
   10a24:	9b08      	ldr	r3, [sp, #32]
   10a26:	4619      	mov	r1, r3
   10a28:	9b07      	ldr	r3, [sp, #28]
   10a2a:	600b      	str	r3, [r1, #0]
   10a2c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   10a2e:	2b00      	cmp	r3, #0
   10a30:	f43f ad56 	beq.w	104e0 <_dtoa_r+0x78>
   10a34:	4648      	mov	r0, r9
   10a36:	601a      	str	r2, [r3, #0]
   10a38:	b019      	add	sp, #100	; 0x64
   10a3a:	ecbd 8b04 	vpop	{d8-d9}
   10a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a42:	bf00      	nop
   10a44:	0002b8f8 	.word	0x0002b8f8
   10a48:	0002b8d0 	.word	0x0002b8d0
   10a4c:	3ff00000 	.word	0x3ff00000
   10a50:	401c0000 	.word	0x401c0000
   10a54:	3fe00000 	.word	0x3fe00000
   10a58:	40240000 	.word	0x40240000
   10a5c:	40140000 	.word	0x40140000
   10a60:	0002c11c 	.word	0x0002c11c
   10a64:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   10a66:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
   10a6a:	2e00      	cmp	r6, #0
   10a6c:	dd0c      	ble.n	10a88 <_dtoa_r+0x620>
   10a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10a70:	2a00      	cmp	r2, #0
   10a72:	dd09      	ble.n	10a88 <_dtoa_r+0x620>
   10a74:	42b2      	cmp	r2, r6
   10a76:	4613      	mov	r3, r2
   10a78:	990c      	ldr	r1, [sp, #48]	; 0x30
   10a7a:	bfa8      	it	ge
   10a7c:	4633      	movge	r3, r6
   10a7e:	1ac9      	subs	r1, r1, r3
   10a80:	1af6      	subs	r6, r6, r3
   10a82:	1ad3      	subs	r3, r2, r3
   10a84:	910c      	str	r1, [sp, #48]	; 0x30
   10a86:	9309      	str	r3, [sp, #36]	; 0x24
   10a88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10a8a:	b143      	cbz	r3, 10a9e <_dtoa_r+0x636>
   10a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10a8e:	2b00      	cmp	r3, #0
   10a90:	d061      	beq.n	10b56 <_dtoa_r+0x6ee>
   10a92:	2f00      	cmp	r7, #0
   10a94:	f300 82a5 	bgt.w	10fe2 <_dtoa_r+0xb7a>
   10a98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10a9a:	1bda      	subs	r2, r3, r7
   10a9c:	d15c      	bne.n	10b58 <_dtoa_r+0x6f0>
   10a9e:	2101      	movs	r1, #1
   10aa0:	4620      	mov	r0, r4
   10aa2:	f016 fb3f 	bl	27124 <__i2b>
   10aa6:	f1ba 0f00 	cmp.w	sl, #0
   10aaa:	4607      	mov	r7, r0
   10aac:	f300 8135 	bgt.w	10d1a <_dtoa_r+0x8b2>
   10ab0:	9b01      	ldr	r3, [sp, #4]
   10ab2:	2b01      	cmp	r3, #1
   10ab4:	f340 82c5 	ble.w	11042 <_dtoa_r+0xbda>
   10ab8:	f04f 0800 	mov.w	r8, #0
   10abc:	f1ba 0f00 	cmp.w	sl, #0
   10ac0:	f040 8137 	bne.w	10d32 <_dtoa_r+0x8ca>
   10ac4:	2301      	movs	r3, #1
   10ac6:	9909      	ldr	r1, [sp, #36]	; 0x24
   10ac8:	440b      	add	r3, r1
   10aca:	f013 031f 	ands.w	r3, r3, #31
   10ace:	d049      	beq.n	10b64 <_dtoa_r+0x6fc>
   10ad0:	f1c3 0220 	rsb	r2, r3, #32
   10ad4:	2a04      	cmp	r2, #4
   10ad6:	f340 844f 	ble.w	11378 <_dtoa_r+0xf10>
   10ada:	f1c3 031c 	rsb	r3, r3, #28
   10ade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10ae0:	4419      	add	r1, r3
   10ae2:	441a      	add	r2, r3
   10ae4:	441e      	add	r6, r3
   10ae6:	920c      	str	r2, [sp, #48]	; 0x30
   10ae8:	9109      	str	r1, [sp, #36]	; 0x24
   10aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10aec:	2b00      	cmp	r3, #0
   10aee:	dd05      	ble.n	10afc <_dtoa_r+0x694>
   10af0:	4659      	mov	r1, fp
   10af2:	461a      	mov	r2, r3
   10af4:	4620      	mov	r0, r4
   10af6:	f016 fc27 	bl	27348 <__lshift>
   10afa:	4683      	mov	fp, r0
   10afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10afe:	2b00      	cmp	r3, #0
   10b00:	dd05      	ble.n	10b0e <_dtoa_r+0x6a6>
   10b02:	4639      	mov	r1, r7
   10b04:	461a      	mov	r2, r3
   10b06:	4620      	mov	r0, r4
   10b08:	f016 fc1e 	bl	27348 <__lshift>
   10b0c:	4607      	mov	r7, r0
   10b0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10b10:	2b00      	cmp	r3, #0
   10b12:	f040 8117 	bne.w	10d44 <_dtoa_r+0x8dc>
   10b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10b18:	2b00      	cmp	r3, #0
   10b1a:	dc2c      	bgt.n	10b76 <_dtoa_r+0x70e>
   10b1c:	9b01      	ldr	r3, [sp, #4]
   10b1e:	2b02      	cmp	r3, #2
   10b20:	dd29      	ble.n	10b76 <_dtoa_r+0x70e>
   10b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10b24:	2b00      	cmp	r3, #0
   10b26:	f47f af67 	bne.w	109f8 <_dtoa_r+0x590>
   10b2a:	4639      	mov	r1, r7
   10b2c:	2205      	movs	r2, #5
   10b2e:	4620      	mov	r0, r4
   10b30:	f016 f9f6 	bl	26f20 <__multadd>
   10b34:	4607      	mov	r7, r0
   10b36:	4658      	mov	r0, fp
   10b38:	4639      	mov	r1, r7
   10b3a:	f016 fc77 	bl	2742c <__mcmp>
   10b3e:	2800      	cmp	r0, #0
   10b40:	f77f af5a 	ble.w	109f8 <_dtoa_r+0x590>
   10b44:	9806      	ldr	r0, [sp, #24]
   10b46:	2331      	movs	r3, #49	; 0x31
   10b48:	9e07      	ldr	r6, [sp, #28]
   10b4a:	4681      	mov	r9, r0
   10b4c:	f800 3b01 	strb.w	r3, [r0], #1
   10b50:	3601      	adds	r6, #1
   10b52:	9006      	str	r0, [sp, #24]
   10b54:	e754      	b.n	10a00 <_dtoa_r+0x598>
   10b56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10b58:	4659      	mov	r1, fp
   10b5a:	4620      	mov	r0, r4
   10b5c:	f016 fba8 	bl	272b0 <__pow5mult>
   10b60:	4683      	mov	fp, r0
   10b62:	e79c      	b.n	10a9e <_dtoa_r+0x636>
   10b64:	231c      	movs	r3, #28
   10b66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10b68:	441e      	add	r6, r3
   10b6a:	441a      	add	r2, r3
   10b6c:	920c      	str	r2, [sp, #48]	; 0x30
   10b6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10b70:	441a      	add	r2, r3
   10b72:	9209      	str	r2, [sp, #36]	; 0x24
   10b74:	e7b9      	b.n	10aea <_dtoa_r+0x682>
   10b76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10b78:	2b00      	cmp	r3, #0
   10b7a:	f000 81af 	beq.w	10edc <_dtoa_r+0xa74>
   10b7e:	2e00      	cmp	r6, #0
   10b80:	f300 8243 	bgt.w	1100a <_dtoa_r+0xba2>
   10b84:	f1b8 0f00 	cmp.w	r8, #0
   10b88:	f040 8372 	bne.w	11270 <_dtoa_r+0xe08>
   10b8c:	46a9      	mov	r9, r5
   10b8e:	9a06      	ldr	r2, [sp, #24]
   10b90:	9904      	ldr	r1, [sp, #16]
   10b92:	1e53      	subs	r3, r2, #1
   10b94:	4690      	mov	r8, r2
   10b96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10b98:	f001 0101 	and.w	r1, r1, #1
   10b9c:	441a      	add	r2, r3
   10b9e:	9102      	str	r1, [sp, #8]
   10ba0:	920a      	str	r2, [sp, #40]	; 0x28
   10ba2:	4639      	mov	r1, r7
   10ba4:	4658      	mov	r0, fp
   10ba6:	f014 feef 	bl	25988 <quorem>
   10baa:	4629      	mov	r1, r5
   10bac:	4682      	mov	sl, r0
   10bae:	4658      	mov	r0, fp
   10bb0:	f016 fc3c 	bl	2742c <__mcmp>
   10bb4:	464a      	mov	r2, r9
   10bb6:	4639      	mov	r1, r7
   10bb8:	4606      	mov	r6, r0
   10bba:	4620      	mov	r0, r4
   10bbc:	f016 fc54 	bl	27468 <__mdiff>
   10bc0:	68c2      	ldr	r2, [r0, #12]
   10bc2:	f10a 0330 	add.w	r3, sl, #48	; 0x30
   10bc6:	4601      	mov	r1, r0
   10bc8:	2a00      	cmp	r2, #0
   10bca:	f040 8225 	bne.w	11018 <_dtoa_r+0xbb0>
   10bce:	9004      	str	r0, [sp, #16]
   10bd0:	4658      	mov	r0, fp
   10bd2:	9309      	str	r3, [sp, #36]	; 0x24
   10bd4:	f016 fc2a 	bl	2742c <__mcmp>
   10bd8:	4602      	mov	r2, r0
   10bda:	9904      	ldr	r1, [sp, #16]
   10bdc:	4620      	mov	r0, r4
   10bde:	9204      	str	r2, [sp, #16]
   10be0:	f016 f994 	bl	26f0c <_Bfree>
   10be4:	9b01      	ldr	r3, [sp, #4]
   10be6:	9a04      	ldr	r2, [sp, #16]
   10be8:	ea42 0103 	orr.w	r1, r2, r3
   10bec:	9b02      	ldr	r3, [sp, #8]
   10bee:	430b      	orrs	r3, r1
   10bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10bf2:	f000 839d 	beq.w	11330 <_dtoa_r+0xec8>
   10bf6:	2e00      	cmp	r6, #0
   10bf8:	f2c0 830e 	blt.w	11218 <_dtoa_r+0xdb0>
   10bfc:	9901      	ldr	r1, [sp, #4]
   10bfe:	430e      	orrs	r6, r1
   10c00:	9902      	ldr	r1, [sp, #8]
   10c02:	4331      	orrs	r1, r6
   10c04:	f000 8308 	beq.w	11218 <_dtoa_r+0xdb0>
   10c08:	2a00      	cmp	r2, #0
   10c0a:	f300 8373 	bgt.w	112f4 <_dtoa_r+0xe8c>
   10c0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10c10:	f108 0601 	add.w	r6, r8, #1
   10c14:	f888 3000 	strb.w	r3, [r8]
   10c18:	4542      	cmp	r2, r8
   10c1a:	46b2      	mov	sl, r6
   10c1c:	f000 8375 	beq.w	1130a <_dtoa_r+0xea2>
   10c20:	4659      	mov	r1, fp
   10c22:	2300      	movs	r3, #0
   10c24:	220a      	movs	r2, #10
   10c26:	4620      	mov	r0, r4
   10c28:	f016 f97a 	bl	26f20 <__multadd>
   10c2c:	454d      	cmp	r5, r9
   10c2e:	4683      	mov	fp, r0
   10c30:	4629      	mov	r1, r5
   10c32:	f04f 0300 	mov.w	r3, #0
   10c36:	f04f 020a 	mov.w	r2, #10
   10c3a:	4620      	mov	r0, r4
   10c3c:	f000 81f3 	beq.w	11026 <_dtoa_r+0xbbe>
   10c40:	f016 f96e 	bl	26f20 <__multadd>
   10c44:	4649      	mov	r1, r9
   10c46:	4605      	mov	r5, r0
   10c48:	2300      	movs	r3, #0
   10c4a:	220a      	movs	r2, #10
   10c4c:	4620      	mov	r0, r4
   10c4e:	f016 f967 	bl	26f20 <__multadd>
   10c52:	46b0      	mov	r8, r6
   10c54:	4681      	mov	r9, r0
   10c56:	e7a4      	b.n	10ba2 <_dtoa_r+0x73a>
   10c58:	f000 819a 	beq.w	10f90 <_dtoa_r+0xb28>
   10c5c:	9b07      	ldr	r3, [sp, #28]
   10c5e:	f1c3 0900 	rsb	r9, r3, #0
   10c62:	4bce      	ldr	r3, [pc, #824]	; (10f9c <_dtoa_r+0xb34>)
   10c64:	f009 020f 	and.w	r2, r9, #15
   10c68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10c6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10c70:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c74:	f7fc f8d2 	bl	ce1c <__aeabi_dmul>
   10c78:	ea5f 1929 	movs.w	r9, r9, asr #4
   10c7c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   10c80:	f000 8371 	beq.w	11366 <_dtoa_r+0xefe>
   10c84:	4ac6      	ldr	r2, [pc, #792]	; (10fa0 <_dtoa_r+0xb38>)
   10c86:	2300      	movs	r3, #0
   10c88:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
   10c8c:	f04f 0802 	mov.w	r8, #2
   10c90:	46aa      	mov	sl, r5
   10c92:	4606      	mov	r6, r0
   10c94:	460f      	mov	r7, r1
   10c96:	4615      	mov	r5, r2
   10c98:	f019 0f01 	tst.w	r9, #1
   10c9c:	d00a      	beq.n	10cb4 <_dtoa_r+0x84c>
   10c9e:	4630      	mov	r0, r6
   10ca0:	4639      	mov	r1, r7
   10ca2:	f108 0801 	add.w	r8, r8, #1
   10ca6:	e9d5 2300 	ldrd	r2, r3, [r5]
   10caa:	f7fc f8b7 	bl	ce1c <__aeabi_dmul>
   10cae:	4653      	mov	r3, sl
   10cb0:	4606      	mov	r6, r0
   10cb2:	460f      	mov	r7, r1
   10cb4:	ea5f 0969 	movs.w	r9, r9, asr #1
   10cb8:	f105 0508 	add.w	r5, r5, #8
   10cbc:	d1ec      	bne.n	10c98 <_dtoa_r+0x830>
   10cbe:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   10cc2:	2b00      	cmp	r3, #0
   10cc4:	f47f ad60 	bne.w	10788 <_dtoa_r+0x320>
   10cc8:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
   10ccc:	e55c      	b.n	10788 <_dtoa_r+0x320>
   10cce:	4bb3      	ldr	r3, [pc, #716]	; (10f9c <_dtoa_r+0xb34>)
   10cd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10cd4:	ed93 7b00 	vldr	d7, [r3]
   10cd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10cda:	2b00      	cmp	r3, #0
   10cdc:	eeb0 8a47 	vmov.f32	s16, s14
   10ce0:	eef0 8a67 	vmov.f32	s17, s15
   10ce4:	f280 820f 	bge.w	11106 <_dtoa_r+0xc9e>
   10ce8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   10cea:	2f00      	cmp	r7, #0
   10cec:	f300 820b 	bgt.w	11106 <_dtoa_r+0xc9e>
   10cf0:	2f00      	cmp	r7, #0
   10cf2:	f47f ae7f 	bne.w	109f4 <_dtoa_r+0x58c>
   10cf6:	2200      	movs	r2, #0
   10cf8:	4baa      	ldr	r3, [pc, #680]	; (10fa4 <_dtoa_r+0xb3c>)
   10cfa:	ec51 0b17 	vmov	r0, r1, d7
   10cfe:	f7fc f88d 	bl	ce1c <__aeabi_dmul>
   10d02:	4602      	mov	r2, r0
   10d04:	460b      	mov	r3, r1
   10d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10d0a:	f7fb fcbf 	bl	c68c <__aeabi_dcmple>
   10d0e:	2800      	cmp	r0, #0
   10d10:	f000 8195 	beq.w	1103e <_dtoa_r+0xbd6>
   10d14:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   10d16:	463d      	mov	r5, r7
   10d18:	e66e      	b.n	109f8 <_dtoa_r+0x590>
   10d1a:	4601      	mov	r1, r0
   10d1c:	4652      	mov	r2, sl
   10d1e:	4620      	mov	r0, r4
   10d20:	f016 fac6 	bl	272b0 <__pow5mult>
   10d24:	9b01      	ldr	r3, [sp, #4]
   10d26:	4607      	mov	r7, r0
   10d28:	2b01      	cmp	r3, #1
   10d2a:	f340 8141 	ble.w	10fb0 <_dtoa_r+0xb48>
   10d2e:	f04f 0800 	mov.w	r8, #0
   10d32:	693b      	ldr	r3, [r7, #16]
   10d34:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   10d38:	6918      	ldr	r0, [r3, #16]
   10d3a:	f016 f9a1 	bl	27080 <__hi0bits>
   10d3e:	f1c0 0320 	rsb	r3, r0, #32
   10d42:	e6c0      	b.n	10ac6 <_dtoa_r+0x65e>
   10d44:	4639      	mov	r1, r7
   10d46:	4658      	mov	r0, fp
   10d48:	f016 fb70 	bl	2742c <__mcmp>
   10d4c:	2800      	cmp	r0, #0
   10d4e:	f6bf aee2 	bge.w	10b16 <_dtoa_r+0x6ae>
   10d52:	4659      	mov	r1, fp
   10d54:	2300      	movs	r3, #0
   10d56:	220a      	movs	r2, #10
   10d58:	4620      	mov	r0, r4
   10d5a:	f016 f8e1 	bl	26f20 <__multadd>
   10d5e:	9b07      	ldr	r3, [sp, #28]
   10d60:	4683      	mov	fp, r0
   10d62:	f103 39ff 	add.w	r9, r3, #4294967295
   10d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10d68:	2b00      	cmp	r3, #0
   10d6a:	f040 82e9 	bne.w	11340 <_dtoa_r+0xed8>
   10d6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10d70:	2b00      	cmp	r3, #0
   10d72:	f300 82e2 	bgt.w	1133a <_dtoa_r+0xed2>
   10d76:	9b01      	ldr	r3, [sp, #4]
   10d78:	2b02      	cmp	r3, #2
   10d7a:	f340 82de 	ble.w	1133a <_dtoa_r+0xed2>
   10d7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10d80:	f8cd 901c 	str.w	r9, [sp, #28]
   10d84:	930a      	str	r3, [sp, #40]	; 0x28
   10d86:	e6cc      	b.n	10b22 <_dtoa_r+0x6ba>
   10d88:	ed9d 7b02 	vldr	d7, [sp, #8]
   10d8c:	f04f 0802 	mov.w	r8, #2
   10d90:	eeb0 8a47 	vmov.f32	s16, s14
   10d94:	eef0 8a67 	vmov.f32	s17, s15
   10d98:	e4db      	b.n	10752 <_dtoa_r+0x2ea>
   10d9a:	2301      	movs	r3, #1
   10d9c:	930d      	str	r3, [sp, #52]	; 0x34
   10d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10da0:	9a07      	ldr	r2, [sp, #28]
   10da2:	4413      	add	r3, r2
   10da4:	9314      	str	r3, [sp, #80]	; 0x50
   10da6:	3301      	adds	r3, #1
   10da8:	2b01      	cmp	r3, #1
   10daa:	4618      	mov	r0, r3
   10dac:	930a      	str	r3, [sp, #40]	; 0x28
   10dae:	bfb8      	it	lt
   10db0:	2001      	movlt	r0, #1
   10db2:	2100      	movs	r1, #0
   10db4:	2817      	cmp	r0, #23
   10db6:	6461      	str	r1, [r4, #68]	; 0x44
   10db8:	f77f ac9c 	ble.w	106f4 <_dtoa_r+0x28c>
   10dbc:	2201      	movs	r2, #1
   10dbe:	2304      	movs	r3, #4
   10dc0:	005b      	lsls	r3, r3, #1
   10dc2:	4611      	mov	r1, r2
   10dc4:	3201      	adds	r2, #1
   10dc6:	f103 0614 	add.w	r6, r3, #20
   10dca:	4286      	cmp	r6, r0
   10dcc:	d9f8      	bls.n	10dc0 <_dtoa_r+0x958>
   10dce:	6461      	str	r1, [r4, #68]	; 0x44
   10dd0:	e490      	b.n	106f4 <_dtoa_r+0x28c>
   10dd2:	2301      	movs	r3, #1
   10dd4:	930d      	str	r3, [sp, #52]	; 0x34
   10dd6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10dd8:	2800      	cmp	r0, #0
   10dda:	f340 812a 	ble.w	11032 <_dtoa_r+0xbca>
   10dde:	9014      	str	r0, [sp, #80]	; 0x50
   10de0:	900a      	str	r0, [sp, #40]	; 0x28
   10de2:	e7e6      	b.n	10db2 <_dtoa_r+0x94a>
   10de4:	2300      	movs	r3, #0
   10de6:	930d      	str	r3, [sp, #52]	; 0x34
   10de8:	e7d9      	b.n	10d9e <_dtoa_r+0x936>
   10dea:	2300      	movs	r3, #0
   10dec:	930d      	str	r3, [sp, #52]	; 0x34
   10dee:	e7f2      	b.n	10dd6 <_dtoa_r+0x96e>
   10df0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10df2:	4642      	mov	r2, r8
   10df4:	4969      	ldr	r1, [pc, #420]	; (10f9c <_dtoa_r+0xb34>)
   10df6:	9d06      	ldr	r5, [sp, #24]
   10df8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   10dfc:	464b      	mov	r3, r9
   10dfe:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   10e02:	f7fc f80b 	bl	ce1c <__aeabi_dmul>
   10e06:	4602      	mov	r2, r0
   10e08:	460b      	mov	r3, r1
   10e0a:	4630      	mov	r0, r6
   10e0c:	4639      	mov	r1, r7
   10e0e:	ec43 2b18 	vmov	d8, r2, r3
   10e12:	f7fb fc59 	bl	c6c8 <__aeabi_d2iz>
   10e16:	4680      	mov	r8, r0
   10e18:	f7fb fb64 	bl	c4e4 <__aeabi_i2d>
   10e1c:	460b      	mov	r3, r1
   10e1e:	4602      	mov	r2, r0
   10e20:	4639      	mov	r1, r7
   10e22:	4630      	mov	r0, r6
   10e24:	f108 0830 	add.w	r8, r8, #48	; 0x30
   10e28:	f7fb fa0e 	bl	c248 <__aeabi_dsub>
   10e2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10e2e:	4606      	mov	r6, r0
   10e30:	460f      	mov	r7, r1
   10e32:	2b01      	cmp	r3, #1
   10e34:	f805 8b01 	strb.w	r8, [r5], #1
   10e38:	d022      	beq.n	10e80 <_dtoa_r+0xa18>
   10e3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10e3c:	9a06      	ldr	r2, [sp, #24]
   10e3e:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
   10e42:	4413      	add	r3, r2
   10e44:	469a      	mov	sl, r3
   10e46:	2200      	movs	r2, #0
   10e48:	4b57      	ldr	r3, [pc, #348]	; (10fa8 <_dtoa_r+0xb40>)
   10e4a:	4630      	mov	r0, r6
   10e4c:	4639      	mov	r1, r7
   10e4e:	f7fb ffe5 	bl	ce1c <__aeabi_dmul>
   10e52:	4689      	mov	r9, r1
   10e54:	4680      	mov	r8, r0
   10e56:	f7fb fc37 	bl	c6c8 <__aeabi_d2iz>
   10e5a:	4607      	mov	r7, r0
   10e5c:	f7fb fb42 	bl	c4e4 <__aeabi_i2d>
   10e60:	460b      	mov	r3, r1
   10e62:	4602      	mov	r2, r0
   10e64:	4649      	mov	r1, r9
   10e66:	4640      	mov	r0, r8
   10e68:	f7fb f9ee 	bl	c248 <__aeabi_dsub>
   10e6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
   10e70:	4606      	mov	r6, r0
   10e72:	460f      	mov	r7, r1
   10e74:	f805 3b01 	strb.w	r3, [r5], #1
   10e78:	4555      	cmp	r5, sl
   10e7a:	d1e4      	bne.n	10e46 <_dtoa_r+0x9de>
   10e7c:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   10e80:	2200      	movs	r2, #0
   10e82:	4b4a      	ldr	r3, [pc, #296]	; (10fac <_dtoa_r+0xb44>)
   10e84:	ee18 0a10 	vmov	r0, s16
   10e88:	ec59 8b18 	vmov	r8, r9, d8
   10e8c:	4649      	mov	r1, r9
   10e8e:	f7fb f9dd 	bl	c24c <__adddf3>
   10e92:	4602      	mov	r2, r0
   10e94:	460b      	mov	r3, r1
   10e96:	4630      	mov	r0, r6
   10e98:	4639      	mov	r1, r7
   10e9a:	f7fb fc0b 	bl	c6b4 <__aeabi_dcmpgt>
   10e9e:	2800      	cmp	r0, #0
   10ea0:	f040 81e3 	bne.w	1126a <_dtoa_r+0xe02>
   10ea4:	ee18 2a10 	vmov	r2, s16
   10ea8:	464b      	mov	r3, r9
   10eaa:	2000      	movs	r0, #0
   10eac:	493f      	ldr	r1, [pc, #252]	; (10fac <_dtoa_r+0xb44>)
   10eae:	f7fb f9cb 	bl	c248 <__aeabi_dsub>
   10eb2:	4602      	mov	r2, r0
   10eb4:	460b      	mov	r3, r1
   10eb6:	4630      	mov	r0, r6
   10eb8:	4639      	mov	r1, r7
   10eba:	f7fb fbdd 	bl	c678 <__aeabi_dcmplt>
   10ebe:	2800      	cmp	r0, #0
   10ec0:	f43f ad1c 	beq.w	108fc <_dtoa_r+0x494>
   10ec4:	462a      	mov	r2, r5
   10ec6:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   10eca:	2b30      	cmp	r3, #48	; 0x30
   10ecc:	d0fa      	beq.n	10ec4 <_dtoa_r+0xa5c>
   10ece:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10ed0:	f8dd 9018 	ldr.w	r9, [sp, #24]
   10ed4:	3301      	adds	r3, #1
   10ed6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10eda:	e59c      	b.n	10a16 <_dtoa_r+0x5ae>
   10edc:	9b07      	ldr	r3, [sp, #28]
   10ede:	3301      	adds	r3, #1
   10ee0:	9307      	str	r3, [sp, #28]
   10ee2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   10ee6:	2601      	movs	r6, #1
   10ee8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   10eec:	e007      	b.n	10efe <_dtoa_r+0xa96>
   10eee:	4659      	mov	r1, fp
   10ef0:	2300      	movs	r3, #0
   10ef2:	220a      	movs	r2, #10
   10ef4:	4620      	mov	r0, r4
   10ef6:	f016 f813 	bl	26f20 <__multadd>
   10efa:	3601      	adds	r6, #1
   10efc:	4683      	mov	fp, r0
   10efe:	4639      	mov	r1, r7
   10f00:	4658      	mov	r0, fp
   10f02:	f014 fd41 	bl	25988 <quorem>
   10f06:	454e      	cmp	r6, r9
   10f08:	f100 0030 	add.w	r0, r0, #48	; 0x30
   10f0c:	f808 0b01 	strb.w	r0, [r8], #1
   10f10:	dbed      	blt.n	10eee <_dtoa_r+0xa86>
   10f12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10f14:	4603      	mov	r3, r0
   10f16:	2600      	movs	r6, #0
   10f18:	2a00      	cmp	r2, #0
   10f1a:	bfcc      	ite	gt
   10f1c:	4692      	movgt	sl, r2
   10f1e:	f04f 0a01 	movle.w	sl, #1
   10f22:	9a06      	ldr	r2, [sp, #24]
   10f24:	4492      	add	sl, r2
   10f26:	4659      	mov	r1, fp
   10f28:	2201      	movs	r2, #1
   10f2a:	4620      	mov	r0, r4
   10f2c:	9301      	str	r3, [sp, #4]
   10f2e:	f016 fa0b 	bl	27348 <__lshift>
   10f32:	4639      	mov	r1, r7
   10f34:	4683      	mov	fp, r0
   10f36:	f016 fa79 	bl	2742c <__mcmp>
   10f3a:	2800      	cmp	r0, #0
   10f3c:	f340 8149 	ble.w	111d2 <_dtoa_r+0xd6a>
   10f40:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   10f44:	f10a 3aff 	add.w	sl, sl, #4294967295
   10f48:	9a06      	ldr	r2, [sp, #24]
   10f4a:	e004      	b.n	10f56 <_dtoa_r+0xaee>
   10f4c:	4552      	cmp	r2, sl
   10f4e:	f000 8139 	beq.w	111c4 <_dtoa_r+0xd5c>
   10f52:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
   10f56:	2b39      	cmp	r3, #57	; 0x39
   10f58:	f10a 0801 	add.w	r8, sl, #1
   10f5c:	d0f6      	beq.n	10f4c <_dtoa_r+0xae4>
   10f5e:	3301      	adds	r3, #1
   10f60:	f88a 3000 	strb.w	r3, [sl]
   10f64:	4639      	mov	r1, r7
   10f66:	4620      	mov	r0, r4
   10f68:	f015 ffd0 	bl	26f0c <_Bfree>
   10f6c:	2d00      	cmp	r5, #0
   10f6e:	f000 813b 	beq.w	111e8 <_dtoa_r+0xd80>
   10f72:	2e00      	cmp	r6, #0
   10f74:	f000 8214 	beq.w	113a0 <_dtoa_r+0xf38>
   10f78:	42ae      	cmp	r6, r5
   10f7a:	f000 8211 	beq.w	113a0 <_dtoa_r+0xf38>
   10f7e:	4631      	mov	r1, r6
   10f80:	4620      	mov	r0, r4
   10f82:	f8dd 9018 	ldr.w	r9, [sp, #24]
   10f86:	f015 ffc1 	bl	26f0c <_Bfree>
   10f8a:	f8cd 8018 	str.w	r8, [sp, #24]
   10f8e:	e53e      	b.n	10a0e <_dtoa_r+0x5a6>
   10f90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   10f94:	f04f 0802 	mov.w	r8, #2
   10f98:	f7ff bbf6 	b.w	10788 <_dtoa_r+0x320>
   10f9c:	0002b8f8 	.word	0x0002b8f8
   10fa0:	0002b8d0 	.word	0x0002b8d0
   10fa4:	40140000 	.word	0x40140000
   10fa8:	40240000 	.word	0x40240000
   10fac:	3fe00000 	.word	0x3fe00000
   10fb0:	9b04      	ldr	r3, [sp, #16]
   10fb2:	2b00      	cmp	r3, #0
   10fb4:	f47f aebb 	bne.w	10d2e <_dtoa_r+0x8c6>
   10fb8:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   10fbc:	f3c2 0313 	ubfx	r3, r2, #0, #20
   10fc0:	2b00      	cmp	r3, #0
   10fc2:	f47f aeb4 	bne.w	10d2e <_dtoa_r+0x8c6>
   10fc6:	4bc7      	ldr	r3, [pc, #796]	; (112e4 <_dtoa_r+0xe7c>)
   10fc8:	4013      	ands	r3, r2
   10fca:	2b00      	cmp	r3, #0
   10fcc:	f000 81a3 	beq.w	11316 <_dtoa_r+0xeae>
   10fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10fd2:	f04f 0801 	mov.w	r8, #1
   10fd6:	3301      	adds	r3, #1
   10fd8:	930c      	str	r3, [sp, #48]	; 0x30
   10fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10fdc:	3301      	adds	r3, #1
   10fde:	9309      	str	r3, [sp, #36]	; 0x24
   10fe0:	e56c      	b.n	10abc <_dtoa_r+0x654>
   10fe2:	4629      	mov	r1, r5
   10fe4:	463a      	mov	r2, r7
   10fe6:	4620      	mov	r0, r4
   10fe8:	f016 f962 	bl	272b0 <__pow5mult>
   10fec:	4605      	mov	r5, r0
   10fee:	465a      	mov	r2, fp
   10ff0:	4620      	mov	r0, r4
   10ff2:	4629      	mov	r1, r5
   10ff4:	f016 f8ac 	bl	27150 <__multiply>
   10ff8:	4680      	mov	r8, r0
   10ffa:	4659      	mov	r1, fp
   10ffc:	4620      	mov	r0, r4
   10ffe:	46c3      	mov	fp, r8
   11000:	f015 ff84 	bl	26f0c <_Bfree>
   11004:	e548      	b.n	10a98 <_dtoa_r+0x630>
   11006:	1bdf      	subs	r7, r3, r7
   11008:	e492      	b.n	10930 <_dtoa_r+0x4c8>
   1100a:	4629      	mov	r1, r5
   1100c:	4632      	mov	r2, r6
   1100e:	4620      	mov	r0, r4
   11010:	f016 f99a 	bl	27348 <__lshift>
   11014:	4605      	mov	r5, r0
   11016:	e5b5      	b.n	10b84 <_dtoa_r+0x71c>
   11018:	4620      	mov	r0, r4
   1101a:	9304      	str	r3, [sp, #16]
   1101c:	f015 ff76 	bl	26f0c <_Bfree>
   11020:	2201      	movs	r2, #1
   11022:	9b04      	ldr	r3, [sp, #16]
   11024:	e5e7      	b.n	10bf6 <_dtoa_r+0x78e>
   11026:	f015 ff7b 	bl	26f20 <__multadd>
   1102a:	46b0      	mov	r8, r6
   1102c:	4605      	mov	r5, r0
   1102e:	4681      	mov	r9, r0
   11030:	e5b7      	b.n	10ba2 <_dtoa_r+0x73a>
   11032:	2301      	movs	r3, #1
   11034:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   11038:	f7ff bb58 	b.w	106ec <_dtoa_r+0x284>
   1103c:	2700      	movs	r7, #0
   1103e:	463d      	mov	r5, r7
   11040:	e580      	b.n	10b44 <_dtoa_r+0x6dc>
   11042:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11046:	2900      	cmp	r1, #0
   11048:	f47f ad36 	bne.w	10ab8 <_dtoa_r+0x650>
   1104c:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11050:	2b00      	cmp	r3, #0
   11052:	f47f ad31 	bne.w	10ab8 <_dtoa_r+0x650>
   11056:	e7b6      	b.n	10fc6 <_dtoa_r+0xb5e>
   11058:	900f      	str	r0, [sp, #60]	; 0x3c
   1105a:	e483      	b.n	10964 <_dtoa_r+0x4fc>
   1105c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1105e:	2b00      	cmp	r3, #0
   11060:	f43f aca2 	beq.w	109a8 <_dtoa_r+0x540>
   11064:	9d14      	ldr	r5, [sp, #80]	; 0x50
   11066:	2d00      	cmp	r5, #0
   11068:	f77f ac48 	ble.w	108fc <_dtoa_r+0x494>
   1106c:	9b07      	ldr	r3, [sp, #28]
   1106e:	2200      	movs	r2, #0
   11070:	4630      	mov	r0, r6
   11072:	4639      	mov	r1, r7
   11074:	3b01      	subs	r3, #1
   11076:	9312      	str	r3, [sp, #72]	; 0x48
   11078:	4b9b      	ldr	r3, [pc, #620]	; (112e8 <_dtoa_r+0xe80>)
   1107a:	f7fb fecf 	bl	ce1c <__aeabi_dmul>
   1107e:	4606      	mov	r6, r0
   11080:	460f      	mov	r7, r1
   11082:	f108 0001 	add.w	r0, r8, #1
   11086:	f7fb fa2d 	bl	c4e4 <__aeabi_i2d>
   1108a:	4632      	mov	r2, r6
   1108c:	463b      	mov	r3, r7
   1108e:	f7fb fec5 	bl	ce1c <__aeabi_dmul>
   11092:	2200      	movs	r2, #0
   11094:	4b95      	ldr	r3, [pc, #596]	; (112ec <_dtoa_r+0xe84>)
   11096:	f7fb f8d9 	bl	c24c <__adddf3>
   1109a:	9511      	str	r5, [sp, #68]	; 0x44
   1109c:	4680      	mov	r8, r0
   1109e:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   110a2:	f7ff bb92 	b.w	107ca <_dtoa_r+0x362>
   110a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   110a8:	2a00      	cmp	r2, #0
   110aa:	f000 80ae 	beq.w	1120a <_dtoa_r+0xda2>
   110ae:	990c      	ldr	r1, [sp, #48]	; 0x30
   110b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
   110b4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   110b6:	460e      	mov	r6, r1
   110b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   110ba:	441a      	add	r2, r3
   110bc:	9209      	str	r2, [sp, #36]	; 0x24
   110be:	460a      	mov	r2, r1
   110c0:	441a      	add	r2, r3
   110c2:	920c      	str	r2, [sp, #48]	; 0x30
   110c4:	e440      	b.n	10948 <_dtoa_r+0x4e0>
   110c6:	2100      	movs	r1, #0
   110c8:	4620      	mov	r0, r4
   110ca:	6461      	str	r1, [r4, #68]	; 0x44
   110cc:	f015 fef8 	bl	26ec0 <_Balloc>
   110d0:	9006      	str	r0, [sp, #24]
   110d2:	2800      	cmp	r0, #0
   110d4:	f000 8156 	beq.w	11384 <_dtoa_r+0xf1c>
   110d8:	9a07      	ldr	r2, [sp, #28]
   110da:	9b06      	ldr	r3, [sp, #24]
   110dc:	2a0e      	cmp	r2, #14
   110de:	6423      	str	r3, [r4, #64]	; 0x40
   110e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   110e2:	f300 8163 	bgt.w	113ac <_dtoa_r+0xf44>
   110e6:	2b00      	cmp	r3, #0
   110e8:	f2c0 8160 	blt.w	113ac <_dtoa_r+0xf44>
   110ec:	f04f 32ff 	mov.w	r2, #4294967295
   110f0:	4b7f      	ldr	r3, [pc, #508]	; (112f0 <_dtoa_r+0xe88>)
   110f2:	920a      	str	r2, [sp, #40]	; 0x28
   110f4:	9a07      	ldr	r2, [sp, #28]
   110f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   110fa:	ed93 7b00 	vldr	d7, [r3]
   110fe:	eeb0 8a47 	vmov.f32	s16, s14
   11102:	eef0 8a67 	vmov.f32	s17, s15
   11106:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1110a:	ec53 2b18 	vmov	r2, r3, d8
   1110e:	4630      	mov	r0, r6
   11110:	4639      	mov	r1, r7
   11112:	f7fb ffad 	bl	d070 <__aeabi_ddiv>
   11116:	9d06      	ldr	r5, [sp, #24]
   11118:	f7fb fad6 	bl	c6c8 <__aeabi_d2iz>
   1111c:	4681      	mov	r9, r0
   1111e:	f7fb f9e1 	bl	c4e4 <__aeabi_i2d>
   11122:	ec53 2b18 	vmov	r2, r3, d8
   11126:	f7fb fe79 	bl	ce1c <__aeabi_dmul>
   1112a:	460b      	mov	r3, r1
   1112c:	4602      	mov	r2, r0
   1112e:	4639      	mov	r1, r7
   11130:	4630      	mov	r0, r6
   11132:	f7fb f889 	bl	c248 <__aeabi_dsub>
   11136:	f109 0330 	add.w	r3, r9, #48	; 0x30
   1113a:	f805 3b01 	strb.w	r3, [r5], #1
   1113e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11140:	2b01      	cmp	r3, #1
   11142:	f000 80b1 	beq.w	112a8 <_dtoa_r+0xe40>
   11146:	ee09 ba10 	vmov	s18, fp
   1114a:	f04f 0801 	mov.w	r8, #1
   1114e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   11152:	ee09 4a90 	vmov	s19, r4
   11156:	ec5b ab18 	vmov	sl, fp, d8
   1115a:	e01d      	b.n	11198 <_dtoa_r+0xd30>
   1115c:	4652      	mov	r2, sl
   1115e:	465b      	mov	r3, fp
   11160:	4630      	mov	r0, r6
   11162:	4639      	mov	r1, r7
   11164:	f7fb ff84 	bl	d070 <__aeabi_ddiv>
   11168:	f108 0801 	add.w	r8, r8, #1
   1116c:	f7fb faac 	bl	c6c8 <__aeabi_d2iz>
   11170:	4604      	mov	r4, r0
   11172:	f7fb f9b7 	bl	c4e4 <__aeabi_i2d>
   11176:	4652      	mov	r2, sl
   11178:	465b      	mov	r3, fp
   1117a:	f7fb fe4f 	bl	ce1c <__aeabi_dmul>
   1117e:	460b      	mov	r3, r1
   11180:	4602      	mov	r2, r0
   11182:	4639      	mov	r1, r7
   11184:	4630      	mov	r0, r6
   11186:	f7fb f85f 	bl	c248 <__aeabi_dsub>
   1118a:	f104 0330 	add.w	r3, r4, #48	; 0x30
   1118e:	45c8      	cmp	r8, r9
   11190:	f805 3b01 	strb.w	r3, [r5], #1
   11194:	f000 8083 	beq.w	1129e <_dtoa_r+0xe36>
   11198:	2200      	movs	r2, #0
   1119a:	4b53      	ldr	r3, [pc, #332]	; (112e8 <_dtoa_r+0xe80>)
   1119c:	f7fb fe3e 	bl	ce1c <__aeabi_dmul>
   111a0:	2200      	movs	r2, #0
   111a2:	2300      	movs	r3, #0
   111a4:	4606      	mov	r6, r0
   111a6:	460f      	mov	r7, r1
   111a8:	f7fb fa5c 	bl	c664 <__aeabi_dcmpeq>
   111ac:	2800      	cmp	r0, #0
   111ae:	d0d5      	beq.n	1115c <_dtoa_r+0xcf4>
   111b0:	ee19 ba10 	vmov	fp, s18
   111b4:	ee19 4a90 	vmov	r4, s19
   111b8:	e9dd 9306 	ldrd	r9, r3, [sp, #24]
   111bc:	3301      	adds	r3, #1
   111be:	e9cd 5306 	strd	r5, r3, [sp, #24]
   111c2:	e428      	b.n	10a16 <_dtoa_r+0x5ae>
   111c4:	9a07      	ldr	r2, [sp, #28]
   111c6:	2331      	movs	r3, #49	; 0x31
   111c8:	3201      	adds	r2, #1
   111ca:	9207      	str	r2, [sp, #28]
   111cc:	9a06      	ldr	r2, [sp, #24]
   111ce:	7013      	strb	r3, [r2, #0]
   111d0:	e6c8      	b.n	10f64 <_dtoa_r+0xafc>
   111d2:	d103      	bne.n	111dc <_dtoa_r+0xd74>
   111d4:	9b01      	ldr	r3, [sp, #4]
   111d6:	07db      	lsls	r3, r3, #31
   111d8:	f53f aeb2 	bmi.w	10f40 <_dtoa_r+0xad8>
   111dc:	46d0      	mov	r8, sl
   111de:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
   111e2:	2b30      	cmp	r3, #48	; 0x30
   111e4:	d0fa      	beq.n	111dc <_dtoa_r+0xd74>
   111e6:	e6bd      	b.n	10f64 <_dtoa_r+0xafc>
   111e8:	f8dd 9018 	ldr.w	r9, [sp, #24]
   111ec:	f8cd 8018 	str.w	r8, [sp, #24]
   111f0:	e411      	b.n	10a16 <_dtoa_r+0x5ae>
   111f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   111f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   111f6:	1a9e      	subs	r6, r3, r2
   111f8:	f7ff bba6 	b.w	10948 <_dtoa_r+0x4e0>
   111fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   111fe:	9106      	str	r1, [sp, #24]
   11200:	3301      	adds	r3, #1
   11202:	9312      	str	r3, [sp, #72]	; 0x48
   11204:	2331      	movs	r3, #49	; 0x31
   11206:	f7ff bb6b 	b.w	108e0 <_dtoa_r+0x478>
   1120a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1120c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1120e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   11210:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   11214:	460e      	mov	r6, r1
   11216:	e74f      	b.n	110b8 <_dtoa_r+0xc50>
   11218:	2a00      	cmp	r2, #0
   1121a:	dd11      	ble.n	11240 <_dtoa_r+0xdd8>
   1121c:	4659      	mov	r1, fp
   1121e:	2201      	movs	r2, #1
   11220:	4620      	mov	r0, r4
   11222:	9301      	str	r3, [sp, #4]
   11224:	f016 f890 	bl	27348 <__lshift>
   11228:	4639      	mov	r1, r7
   1122a:	4683      	mov	fp, r0
   1122c:	f016 f8fe 	bl	2742c <__mcmp>
   11230:	2800      	cmp	r0, #0
   11232:	9b01      	ldr	r3, [sp, #4]
   11234:	f340 809a 	ble.w	1136c <_dtoa_r+0xf04>
   11238:	2b39      	cmp	r3, #57	; 0x39
   1123a:	d06f      	beq.n	1131c <_dtoa_r+0xeb4>
   1123c:	f10a 0331 	add.w	r3, sl, #49	; 0x31
   11240:	9a07      	ldr	r2, [sp, #28]
   11242:	462e      	mov	r6, r5
   11244:	f808 3b01 	strb.w	r3, [r8], #1
   11248:	464d      	mov	r5, r9
   1124a:	3201      	adds	r2, #1
   1124c:	9207      	str	r2, [sp, #28]
   1124e:	e689      	b.n	10f64 <_dtoa_r+0xafc>
   11250:	4625      	mov	r5, r4
   11252:	ee19 ba10 	vmov	fp, s18
   11256:	ee18 4a10 	vmov	r4, s16
   1125a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1125c:	f8dd 9018 	ldr.w	r9, [sp, #24]
   11260:	3301      	adds	r3, #1
   11262:	e9cd 5306 	strd	r5, r3, [sp, #24]
   11266:	f7ff bbd6 	b.w	10a16 <_dtoa_r+0x5ae>
   1126a:	9906      	ldr	r1, [sp, #24]
   1126c:	f7ff bb30 	b.w	108d0 <_dtoa_r+0x468>
   11270:	6869      	ldr	r1, [r5, #4]
   11272:	4620      	mov	r0, r4
   11274:	f015 fe24 	bl	26ec0 <_Balloc>
   11278:	4606      	mov	r6, r0
   1127a:	2800      	cmp	r0, #0
   1127c:	f000 8089 	beq.w	11392 <_dtoa_r+0xf2a>
   11280:	692b      	ldr	r3, [r5, #16]
   11282:	f105 010c 	add.w	r1, r5, #12
   11286:	300c      	adds	r0, #12
   11288:	3302      	adds	r3, #2
   1128a:	009a      	lsls	r2, r3, #2
   1128c:	f7fb fc72 	bl	cb74 <memcpy>
   11290:	4631      	mov	r1, r6
   11292:	2201      	movs	r2, #1
   11294:	4620      	mov	r0, r4
   11296:	f016 f857 	bl	27348 <__lshift>
   1129a:	4681      	mov	r9, r0
   1129c:	e477      	b.n	10b8e <_dtoa_r+0x726>
   1129e:	46a1      	mov	r9, r4
   112a0:	ee19 ba10 	vmov	fp, s18
   112a4:	ee19 4a90 	vmov	r4, s19
   112a8:	4602      	mov	r2, r0
   112aa:	460b      	mov	r3, r1
   112ac:	f7fa ffce 	bl	c24c <__adddf3>
   112b0:	4606      	mov	r6, r0
   112b2:	460f      	mov	r7, r1
   112b4:	ec53 2b18 	vmov	r2, r3, d8
   112b8:	f7fb f9fc 	bl	c6b4 <__aeabi_dcmpgt>
   112bc:	b960      	cbnz	r0, 112d8 <_dtoa_r+0xe70>
   112be:	4630      	mov	r0, r6
   112c0:	4639      	mov	r1, r7
   112c2:	ec53 2b18 	vmov	r2, r3, d8
   112c6:	f7fb f9cd 	bl	c664 <__aeabi_dcmpeq>
   112ca:	2800      	cmp	r0, #0
   112cc:	f43f af74 	beq.w	111b8 <_dtoa_r+0xd50>
   112d0:	f019 0f01 	tst.w	r9, #1
   112d4:	f43f af70 	beq.w	111b8 <_dtoa_r+0xd50>
   112d8:	9b07      	ldr	r3, [sp, #28]
   112da:	9906      	ldr	r1, [sp, #24]
   112dc:	9312      	str	r3, [sp, #72]	; 0x48
   112de:	f7ff baf7 	b.w	108d0 <_dtoa_r+0x468>
   112e2:	bf00      	nop
   112e4:	7ff00000 	.word	0x7ff00000
   112e8:	40240000 	.word	0x40240000
   112ec:	401c0000 	.word	0x401c0000
   112f0:	0002b8f8 	.word	0x0002b8f8
   112f4:	2b39      	cmp	r3, #57	; 0x39
   112f6:	d011      	beq.n	1131c <_dtoa_r+0xeb4>
   112f8:	9a07      	ldr	r2, [sp, #28]
   112fa:	3301      	adds	r3, #1
   112fc:	462e      	mov	r6, r5
   112fe:	464d      	mov	r5, r9
   11300:	3201      	adds	r2, #1
   11302:	f808 3b01 	strb.w	r3, [r8], #1
   11306:	9207      	str	r2, [sp, #28]
   11308:	e62c      	b.n	10f64 <_dtoa_r+0xafc>
   1130a:	9a07      	ldr	r2, [sp, #28]
   1130c:	462e      	mov	r6, r5
   1130e:	464d      	mov	r5, r9
   11310:	3201      	adds	r2, #1
   11312:	9207      	str	r2, [sp, #28]
   11314:	e607      	b.n	10f26 <_dtoa_r+0xabe>
   11316:	4698      	mov	r8, r3
   11318:	f7ff bbd0 	b.w	10abc <_dtoa_r+0x654>
   1131c:	9a07      	ldr	r2, [sp, #28]
   1131e:	46c2      	mov	sl, r8
   11320:	2339      	movs	r3, #57	; 0x39
   11322:	462e      	mov	r6, r5
   11324:	3201      	adds	r2, #1
   11326:	464d      	mov	r5, r9
   11328:	f80a 3b01 	strb.w	r3, [sl], #1
   1132c:	9207      	str	r2, [sp, #28]
   1132e:	e609      	b.n	10f44 <_dtoa_r+0xadc>
   11330:	2b39      	cmp	r3, #57	; 0x39
   11332:	d0f3      	beq.n	1131c <_dtoa_r+0xeb4>
   11334:	2e00      	cmp	r6, #0
   11336:	dc81      	bgt.n	1123c <_dtoa_r+0xdd4>
   11338:	e782      	b.n	11240 <_dtoa_r+0xdd8>
   1133a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1133c:	930a      	str	r3, [sp, #40]	; 0x28
   1133e:	e5d0      	b.n	10ee2 <_dtoa_r+0xa7a>
   11340:	4629      	mov	r1, r5
   11342:	2300      	movs	r3, #0
   11344:	220a      	movs	r2, #10
   11346:	4620      	mov	r0, r4
   11348:	f015 fdea 	bl	26f20 <__multadd>
   1134c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1134e:	4605      	mov	r5, r0
   11350:	2b00      	cmp	r3, #0
   11352:	dc03      	bgt.n	1135c <_dtoa_r+0xef4>
   11354:	9b01      	ldr	r3, [sp, #4]
   11356:	2b02      	cmp	r3, #2
   11358:	f73f ad11 	bgt.w	10d7e <_dtoa_r+0x916>
   1135c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1135e:	f8cd 901c 	str.w	r9, [sp, #28]
   11362:	930a      	str	r3, [sp, #40]	; 0x28
   11364:	e40b      	b.n	10b7e <_dtoa_r+0x716>
   11366:	f04f 0802 	mov.w	r8, #2
   1136a:	e4ad      	b.n	10cc8 <_dtoa_r+0x860>
   1136c:	f47f af68 	bne.w	11240 <_dtoa_r+0xdd8>
   11370:	07da      	lsls	r2, r3, #31
   11372:	f57f af65 	bpl.w	11240 <_dtoa_r+0xdd8>
   11376:	e75f      	b.n	11238 <_dtoa_r+0xdd0>
   11378:	f43f abb7 	beq.w	10aea <_dtoa_r+0x682>
   1137c:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   11380:	f7ff bbf1 	b.w	10b66 <_dtoa_r+0x6fe>
   11384:	4b0e      	ldr	r3, [pc, #56]	; (113c0 <_dtoa_r+0xf58>)
   11386:	2200      	movs	r2, #0
   11388:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   1138c:	480d      	ldr	r0, [pc, #52]	; (113c4 <_dtoa_r+0xf5c>)
   1138e:	f010 fbdd 	bl	21b4c <__assert_func>
   11392:	4602      	mov	r2, r0
   11394:	4b0a      	ldr	r3, [pc, #40]	; (113c0 <_dtoa_r+0xf58>)
   11396:	f240 21ea 	movw	r1, #746	; 0x2ea
   1139a:	480a      	ldr	r0, [pc, #40]	; (113c4 <_dtoa_r+0xf5c>)
   1139c:	f010 fbd6 	bl	21b4c <__assert_func>
   113a0:	f8dd 9018 	ldr.w	r9, [sp, #24]
   113a4:	f8cd 8018 	str.w	r8, [sp, #24]
   113a8:	f7ff bb31 	b.w	10a0e <_dtoa_r+0x5a6>
   113ac:	2101      	movs	r1, #1
   113ae:	f04f 32ff 	mov.w	r2, #4294967295
   113b2:	910d      	str	r1, [sp, #52]	; 0x34
   113b4:	2100      	movs	r1, #0
   113b6:	920a      	str	r2, [sp, #40]	; 0x28
   113b8:	910b      	str	r1, [sp, #44]	; 0x2c
   113ba:	9214      	str	r2, [sp, #80]	; 0x50
   113bc:	f7ff baa9 	b.w	10912 <_dtoa_r+0x4aa>
   113c0:	0002c19c 	.word	0x0002c19c
   113c4:	0002c1b0 	.word	0x0002c1b0

000113c8 <nan>:
   113c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 113d0 <nan+0x8>
   113cc:	4770      	bx	lr
   113ce:	bf00      	nop
   113d0:	00000000 	.word	0x00000000
   113d4:	7ff80000 	.word	0x7ff80000

000113d8 <data_print>:
#endif /* defined(CONFIG_BSD_LIBRARY) */

/**@brief Function to print strings without null-termination
 */
static void data_print(uint8_t *prefix, uint8_t *data, size_t len)
{
   113d8:	b5b0      	push	{r4, r5, r7, lr}
	char buf[len + 1];
   113da:	f102 0308 	add.w	r3, r2, #8
   113de:	f023 0307 	bic.w	r3, r3, #7
{
   113e2:	af00      	add	r7, sp, #0
	char buf[len + 1];
   113e4:	ebad 0d03 	sub.w	sp, sp, r3
{
   113e8:	4605      	mov	r5, r0
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   113ea:	4668      	mov	r0, sp
   113ec:	4614      	mov	r4, r2
   113ee:	f7fb fbc1 	bl	cb74 <memcpy>

	memcpy(buf, data, len);
	buf[len] = 0;
   113f2:	2300      	movs	r3, #0
	printk("%s%s\n", prefix, buf);
   113f4:	466a      	mov	r2, sp
   113f6:	4629      	mov	r1, r5
   113f8:	4803      	ldr	r0, [pc, #12]	; (11408 <data_print+0x30>)
	buf[len] = 0;
   113fa:	f80d 3004 	strb.w	r3, [sp, r4]
	printk("%s%s\n", prefix, buf);
   113fe:	f016 ffdd 	bl	283bc <printk>
}
   11402:	46bd      	mov	sp, r7
   11404:	bdb0      	pop	{r4, r5, r7, pc}
   11406:	bf00      	nop
   11408:	0002c498 	.word	0x0002c498

0001140c <data_publish.constprop.0>:
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
	uint8_t *data, size_t len)
{
	struct mqtt_publish_param param;

	param.message.topic.qos = qos;
   1140c:	2301      	movs	r3, #1
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
   1140e:	b570      	push	{r4, r5, r6, lr}
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
   11410:	4c15      	ldr	r4, [pc, #84]	; (11468 <data_publish.constprop.0+0x5c>)
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
   11412:	b086      	sub	sp, #24
   11414:	4605      	mov	r5, r0
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
   11416:	4620      	mov	r0, r4
	param.message.payload.data = data;
	param.message.payload.len = len;
   11418:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
	param.message.topic.qos = qos;
   1141c:	f88d 3008 	strb.w	r3, [sp, #8]
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
   11420:	9400      	str	r4, [sp, #0]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
   11422:	f011 fb23 	bl	22a6c <strlen>
	param.message.payload.data = data;
   11426:	9503      	str	r5, [sp, #12]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
   11428:	9001      	str	r0, [sp, #4]
	param.message.payload.len = len;
   1142a:	9604      	str	r6, [sp, #16]
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
   1142c:	f003 f962 	bl	146f4 <z_impl_sys_rand32_get>
	param.message_id = sys_rand32_get();
	param.dup_flag = 0;
   11430:	f89d 3016 	ldrb.w	r3, [sp, #22]
	param.retain_flag = 0;

	data_print("Publishing: ", data, len);
   11434:	4632      	mov	r2, r6
	param.dup_flag = 0;
   11436:	f023 0303 	bic.w	r3, r3, #3
	data_print("Publishing: ", data, len);
   1143a:	4629      	mov	r1, r5
	param.message_id = sys_rand32_get();
   1143c:	f8ad 0014 	strh.w	r0, [sp, #20]
	data_print("Publishing: ", data, len);
   11440:	480a      	ldr	r0, [pc, #40]	; (1146c <data_publish.constprop.0+0x60>)
	param.dup_flag = 0;
   11442:	f88d 3016 	strb.w	r3, [sp, #22]
	data_print("Publishing: ", data, len);
   11446:	f7ff ffc7 	bl	113d8 <data_print>
	printk("to topic: %s len: %u\n",
		CONFIG_MQTT_PUB_TOPIC,
		(unsigned int)strlen(CONFIG_MQTT_PUB_TOPIC));
   1144a:	4620      	mov	r0, r4
   1144c:	f011 fb0e 	bl	22a6c <strlen>
	printk("to topic: %s len: %u\n",
   11450:	4621      	mov	r1, r4
		(unsigned int)strlen(CONFIG_MQTT_PUB_TOPIC));
   11452:	4602      	mov	r2, r0
	printk("to topic: %s len: %u\n",
   11454:	4806      	ldr	r0, [pc, #24]	; (11470 <data_publish.constprop.0+0x64>)
   11456:	f016 ffb1 	bl	283bc <printk>

	return mqtt_publish(c, &param);
   1145a:	4669      	mov	r1, sp
   1145c:	4805      	ldr	r0, [pc, #20]	; (11474 <data_publish.constprop.0+0x68>)
   1145e:	f018 fbba 	bl	29bd6 <mqtt_publish>
}
   11462:	b006      	add	sp, #24
   11464:	bd70      	pop	{r4, r5, r6, pc}
   11466:	bf00      	nop
   11468:	0002c49e 	.word	0x0002c49e
   1146c:	0002c4b9 	.word	0x0002c4b9
   11470:	0002c4c6 	.word	0x0002c4c6
   11474:	2002141c 	.word	0x2002141c

00011478 <k_work_submit_to_queue.constprop.0>:
 * @param work_q Address of workqueue.
 * @param work Address of work item.
 *
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
   11478:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1147a:	f100 0308 	add.w	r3, r0, #8
   1147e:	e8d3 2fef 	ldaex	r2, [r3]
   11482:	f042 0001 	orr.w	r0, r2, #1
   11486:	e8c3 0fec 	stlex	ip, r0, [r3]
   1148a:	f1bc 0f00 	cmp.w	ip, #0
   1148e:	d1f6      	bne.n	1147e <k_work_submit_to_queue.constprop.0+0x6>
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   11490:	07d3      	lsls	r3, r2, #31
   11492:	d402      	bmi.n	1149a <k_work_submit_to_queue.constprop.0+0x22>
		k_queue_append(&work_q->queue, work);
   11494:	4801      	ldr	r0, [pc, #4]	; (1149c <k_work_submit_to_queue.constprop.0+0x24>)
   11496:	f019 bcd4 	b.w	2ae42 <k_queue_append>
	}
}
   1149a:	4770      	bx	lr
   1149c:	20020cc8 	.word	0x20020cc8

000114a0 <button_handler>:
*  Can be used to simulate alarm events.
*/

static void button_handler(uint32_t button_states, uint32_t has_changed)
{
	if (has_changed & button_states & DK_BTN1_MSK) {
   114a0:	4008      	ands	r0, r1
{
   114a2:	b508      	push	{r3, lr}
	if (has_changed & button_states & DK_BTN1_MSK) {
   114a4:	07c3      	lsls	r3, r0, #31
   114a6:	d507      	bpl.n	114b8 <button_handler+0x18>
		printk("DEV_DBG: button 1 pressed\n");
   114a8:	4804      	ldr	r0, [pc, #16]	; (114bc <button_handler+0x1c>)
   114aa:	f016 ff87 	bl	283bc <printk>
	else if (has_changed & button_states & DK_BTN2_MSK) {
	
	}

	return;
}
   114ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit_to_queue(&app_work_q, &alarm_work);
   114b2:	4803      	ldr	r0, [pc, #12]	; (114c0 <button_handler+0x20>)
   114b4:	f7ff bfe0 	b.w	11478 <k_work_submit_to_queue.constprop.0>
}
   114b8:	bd08      	pop	{r3, pc}
   114ba:	bf00      	nop
   114bc:	0002c4dc 	.word	0x0002c4dc
   114c0:	20021410 	.word	0x20021410

000114c4 <app_timer_handler>:
	}
}

/* @brief triggers every minute. Publish work if one period has passed */ 
void app_timer_handler(struct k_timer *dummy)
{
   114c4:	b510      	push	{r4, lr}
	static uint32_t minutes;

	minutes++;
   114c6:	4c0a      	ldr	r4, [pc, #40]	; (114f0 <app_timer_handler+0x2c>)
   114c8:	490a      	ldr	r1, [pc, #40]	; (114f4 <app_timer_handler+0x30>)
   114ca:	6822      	ldr	r2, [r4, #0]
   114cc:	3201      	adds	r2, #1
   114ce:	6022      	str	r2, [r4, #0]
   114d0:	434a      	muls	r2, r1
	/* This shall match the PSM interval*/
	if (minutes % TRANSMISSION_INTERVAL == 0) {
   114d2:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
   114d6:	d805      	bhi.n	114e4 <app_timer_handler+0x20>
		printk("Timer: fired sample interval\n");
   114d8:	4807      	ldr	r0, [pc, #28]	; (114f8 <app_timer_handler+0x34>)
   114da:	f016 ff6f 	bl	283bc <printk>
		k_work_submit_to_queue(&app_work_q, &periodic_work);
   114de:	4807      	ldr	r0, [pc, #28]	; (114fc <app_timer_handler+0x38>)
   114e0:	f7ff ffca 	bl	11478 <k_work_submit_to_queue.constprop.0>
	}
	printk("Elapsed time: %d\n", minutes);
   114e4:	6821      	ldr	r1, [r4, #0]
   114e6:	4806      	ldr	r0, [pc, #24]	; (11500 <app_timer_handler+0x3c>)
}
   114e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Elapsed time: %d\n", minutes);
   114ec:	f016 bf66 	b.w	283bc <printk>
   114f0:	20021488 	.word	0x20021488
   114f4:	cccccccd 	.word	0xcccccccd
   114f8:	0002c4f7 	.word	0x0002c4f7
   114fc:	2002148c 	.word	0x2002148c
   11500:	0002c515 	.word	0x0002c515

00011504 <date_time_handler>:

	k_work_init(&alarm_work, publish_alarm);
	k_work_init(&periodic_work, publish_samples);
}

void date_time_handler(const struct date_time_evt *evt) {
   11504:	b508      	push	{r3, lr}
   11506:	7803      	ldrb	r3, [r0, #0]
   11508:	2b03      	cmp	r3, #3
   1150a:	d811      	bhi.n	11530 <date_time_handler+0x2c>
   1150c:	e8df f003 	tbb	[pc, r3]
   11510:	0e0c0a02 	.word	0x0e0c0a02

	switch (evt->type)
	{
	case DATE_TIME_OBTAINED_MODEM:
		printk("DATE_TIME: got time from modem.\n");
   11514:	4807      	ldr	r0, [pc, #28]	; (11534 <date_time_handler+0x30>)
	case DATE_TIME_OBTAINED_EXT:
		printk("DATE_TIME: got time from external.\n");
		k_sem_give(&date_time_ok);
		break;
	case DATE_TIME_NOT_OBTAINED:
		printk("DATE_TIME: failed to get time.\n");
   11516:	f016 ff51 	bl	283bc <printk>
		k_sem_give(&date_time_ok);
		break;
	default:
		break;
	}
}
   1151a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1151e:	4806      	ldr	r0, [pc, #24]	; (11538 <date_time_handler+0x34>)
   11520:	f00f bf08 	b.w	21334 <z_impl_k_sem_give>
		printk("DATE_TIME: got time from NTP.\n");
   11524:	4805      	ldr	r0, [pc, #20]	; (1153c <date_time_handler+0x38>)
   11526:	e7f6      	b.n	11516 <date_time_handler+0x12>
		printk("DATE_TIME: got time from external.\n");
   11528:	4805      	ldr	r0, [pc, #20]	; (11540 <date_time_handler+0x3c>)
   1152a:	e7f4      	b.n	11516 <date_time_handler+0x12>
		printk("DATE_TIME: failed to get time.\n");
   1152c:	4805      	ldr	r0, [pc, #20]	; (11544 <date_time_handler+0x40>)
   1152e:	e7f2      	b.n	11516 <date_time_handler+0x12>
}
   11530:	bd08      	pop	{r3, pc}
   11532:	bf00      	nop
   11534:	0002c527 	.word	0x0002c527
   11538:	20020c18 	.word	0x20020c18
   1153c:	0002c548 	.word	0x0002c548
   11540:	0002c567 	.word	0x0002c567
   11544:	0002c58b 	.word	0x0002c58b

00011548 <mqtt_evt_handler>:
{
   11548:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	switch (evt->type) {
   1154c:	780b      	ldrb	r3, [r1, #0]
{
   1154e:	4605      	mov	r5, r0
   11550:	460c      	mov	r4, r1
   11552:	2b07      	cmp	r3, #7
   11554:	f200 8084 	bhi.w	11660 <mqtt_evt_handler+0x118>
   11558:	e8df f003 	tbb	[pc, r3]
   1155c:	6d201704 	.word	0x6d201704
   11560:	79828282 	.word	0x79828282
		if (evt->result != 0) {
   11564:	69c9      	ldr	r1, [r1, #28]
   11566:	b129      	cbz	r1, 11574 <mqtt_evt_handler+0x2c>
			printk("MQTT connect failed %d\n", evt->result);
   11568:	4841      	ldr	r0, [pc, #260]	; (11670 <mqtt_evt_handler+0x128>)
}
   1156a:	b002      	add	sp, #8
   1156c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				printk("Could not app_disconnect: %d\n", err);
   11570:	f016 bf24 	b.w	283bc <printk>
   11574:	483f      	ldr	r0, [pc, #252]	; (11674 <mqtt_evt_handler+0x12c>)
   11576:	f00f fedd 	bl	21334 <z_impl_k_sem_give>
		printk("[%s:%d] MQTT client connected!\n", __func__, __LINE__);
   1157a:	22cf      	movs	r2, #207	; 0xcf
   1157c:	493e      	ldr	r1, [pc, #248]	; (11678 <mqtt_evt_handler+0x130>)
   1157e:	483f      	ldr	r0, [pc, #252]	; (1167c <mqtt_evt_handler+0x134>)
}
   11580:	b002      	add	sp, #8
   11582:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		printk("[%s:%d] MQTT client connected!\n", __func__, __LINE__);
   11586:	f016 bf19 	b.w	283bc <printk>
		printk("[%s:%d] MQTT client disconnected %d\n", __func__,
   1158a:	22d5      	movs	r2, #213	; 0xd5
   1158c:	69cb      	ldr	r3, [r1, #28]
   1158e:	483c      	ldr	r0, [pc, #240]	; (11680 <mqtt_evt_handler+0x138>)
   11590:	4939      	ldr	r1, [pc, #228]	; (11678 <mqtt_evt_handler+0x130>)
}
   11592:	b002      	add	sp, #8
   11594:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		printk("[%s:%d] PUBACK packet id: %u\n", __func__, __LINE__,
   11598:	f016 bf10 	b.w	283bc <printk>
		printk("[%s:%d] MQTT PUBLISH result=%d len=%d\n", __func__,
   1159c:	694b      	ldr	r3, [r1, #20]
   1159e:	22dd      	movs	r2, #221	; 0xdd
   115a0:	9300      	str	r3, [sp, #0]
   115a2:	69cb      	ldr	r3, [r1, #28]
   115a4:	4837      	ldr	r0, [pc, #220]	; (11684 <mqtt_evt_handler+0x13c>)
   115a6:	4934      	ldr	r1, [pc, #208]	; (11678 <mqtt_evt_handler+0x130>)
   115a8:	f016 ff08 	bl	283bc <printk>
		err = publish_get_payload(c, p->message.payload.len);
   115ac:	6962      	ldr	r2, [r4, #20]
	uint8_t *end = buf + length;
   115ae:	4b36      	ldr	r3, [pc, #216]	; (11688 <mqtt_evt_handler+0x140>)
	if (length > sizeof(payload_buf)) {
   115b0:	2a80      	cmp	r2, #128	; 0x80
	uint8_t *end = buf + length;
   115b2:	eb03 0602 	add.w	r6, r3, r2
	if (length > sizeof(payload_buf)) {
   115b6:	d83b      	bhi.n	11630 <mqtt_evt_handler+0xe8>
	uint8_t *buf = payload_buf;
   115b8:	469a      	mov	sl, r3
			printk("mqtt_read_publish_payload: EAGAIN\n");
   115ba:	4f34      	ldr	r7, [pc, #208]	; (1168c <mqtt_evt_handler+0x144>)
	return z_impl_zsock_poll(fds, nfds, timeout);
   115bc:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 11694 <mqtt_evt_handler+0x14c>
   115c0:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 116bc <mqtt_evt_handler+0x174>
	while (buf < end) {
   115c4:	4556      	cmp	r6, sl
   115c6:	d807      	bhi.n	115d8 <mqtt_evt_handler+0x90>
			data_print("Received: ", payload_buf,
   115c8:	6962      	ldr	r2, [r4, #20]
   115ca:	492f      	ldr	r1, [pc, #188]	; (11688 <mqtt_evt_handler+0x140>)
   115cc:	4830      	ldr	r0, [pc, #192]	; (11690 <mqtt_evt_handler+0x148>)
}
   115ce:	b002      	add	sp, #8
   115d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			data_print("Received: ", payload_buf,
   115d4:	f7ff bf00 	b.w	113d8 <data_print>
		int ret = mqtt_read_publish_payload(c, buf, end - buf);
   115d8:	4651      	mov	r1, sl
   115da:	4628      	mov	r0, r5
   115dc:	eba6 020a 	sub.w	r2, r6, sl
   115e0:	f018 fbf1 	bl	29dc6 <mqtt_read_publish_payload>
		if (ret < 0) {
   115e4:	1e01      	subs	r1, r0, #0
   115e6:	da20      	bge.n	1162a <mqtt_evt_handler+0xe2>
			if (ret != -EAGAIN) {
   115e8:	f111 0f0b 	cmn.w	r1, #11
   115ec:	d10b      	bne.n	11606 <mqtt_evt_handler+0xbe>
			printk("mqtt_read_publish_payload: EAGAIN\n");
   115ee:	4638      	mov	r0, r7
   115f0:	f016 fee4 	bl	283bc <printk>
   115f4:	2101      	movs	r1, #1
   115f6:	464a      	mov	r2, r9
   115f8:	4826      	ldr	r0, [pc, #152]	; (11694 <mqtt_evt_handler+0x14c>)
   115fa:	f001 fc2d 	bl	12e58 <z_impl_zsock_poll>
			if (err > 0 && (fds.revents & POLLIN) == POLLIN) {
   115fe:	2800      	cmp	r0, #0
   11600:	dc0e      	bgt.n	11620 <mqtt_evt_handler+0xd8>
				return -EIO;
   11602:	f06f 0104 	mvn.w	r1, #4
			printk("mqtt_read_publish_payload: Failed! %d\n", err);
   11606:	4824      	ldr	r0, [pc, #144]	; (11698 <mqtt_evt_handler+0x150>)
   11608:	f016 fed8 	bl	283bc <printk>
			printk("Disconnecting MQTT client...\n");
   1160c:	4823      	ldr	r0, [pc, #140]	; (1169c <mqtt_evt_handler+0x154>)
   1160e:	f016 fed5 	bl	283bc <printk>
			err = mqtt_disconnect(c);
   11612:	4628      	mov	r0, r5
   11614:	f018 fb24 	bl	29c60 <mqtt_disconnect>
			if (err) {
   11618:	4601      	mov	r1, r0
   1161a:	b330      	cbz	r0, 1166a <mqtt_evt_handler+0x122>
				printk("Could not app_disconnect: %d\n", err);
   1161c:	4820      	ldr	r0, [pc, #128]	; (116a0 <mqtt_evt_handler+0x158>)
   1161e:	e7a4      	b.n	1156a <mqtt_evt_handler+0x22>
			if (err > 0 && (fds.revents & POLLIN) == POLLIN) {
   11620:	f8b8 3006 	ldrh.w	r3, [r8, #6]
   11624:	07db      	lsls	r3, r3, #31
   11626:	d4cd      	bmi.n	115c4 <mqtt_evt_handler+0x7c>
   11628:	e7eb      	b.n	11602 <mqtt_evt_handler+0xba>
		if (ret == 0) {
   1162a:	d0ea      	beq.n	11602 <mqtt_evt_handler+0xba>
		buf += ret;
   1162c:	448a      	add	sl, r1
   1162e:	e7c9      	b.n	115c4 <mqtt_evt_handler+0x7c>
		return -EMSGSIZE;
   11630:	f06f 0179 	mvn.w	r1, #121	; 0x79
   11634:	e7e7      	b.n	11606 <mqtt_evt_handler+0xbe>
		if (evt->result != 0) {
   11636:	69c9      	ldr	r1, [r1, #28]
   11638:	b109      	cbz	r1, 1163e <mqtt_evt_handler+0xf6>
			printk("MQTT PUBACK error %d\n", evt->result);
   1163a:	481a      	ldr	r0, [pc, #104]	; (116a4 <mqtt_evt_handler+0x15c>)
   1163c:	e795      	b.n	1156a <mqtt_evt_handler+0x22>
   1163e:	481a      	ldr	r0, [pc, #104]	; (116a8 <mqtt_evt_handler+0x160>)
   11640:	f00f fe78 	bl	21334 <z_impl_k_sem_give>
		printk("[%s:%d] PUBACK packet id: %u\n", __func__, __LINE__,
   11644:	22f5      	movs	r2, #245	; 0xf5
   11646:	88a3      	ldrh	r3, [r4, #4]
   11648:	490b      	ldr	r1, [pc, #44]	; (11678 <mqtt_evt_handler+0x130>)
   1164a:	4818      	ldr	r0, [pc, #96]	; (116ac <mqtt_evt_handler+0x164>)
   1164c:	e7a1      	b.n	11592 <mqtt_evt_handler+0x4a>
		if (evt->result != 0) {
   1164e:	69c9      	ldr	r1, [r1, #28]
   11650:	b109      	cbz	r1, 11656 <mqtt_evt_handler+0x10e>
			printk("MQTT SUBACK error %d\n", evt->result);
   11652:	4817      	ldr	r0, [pc, #92]	; (116b0 <mqtt_evt_handler+0x168>)
   11654:	e789      	b.n	1156a <mqtt_evt_handler+0x22>
		printk("[%s:%d] SUBACK packet id: %u\n", __func__, __LINE__,
   11656:	22ff      	movs	r2, #255	; 0xff
   11658:	88a3      	ldrh	r3, [r4, #4]
   1165a:	4907      	ldr	r1, [pc, #28]	; (11678 <mqtt_evt_handler+0x130>)
   1165c:	4815      	ldr	r0, [pc, #84]	; (116b4 <mqtt_evt_handler+0x16c>)
   1165e:	e798      	b.n	11592 <mqtt_evt_handler+0x4a>
		printk("[%s:%d] default: %d\n", __func__, __LINE__,
   11660:	f44f 7282 	mov.w	r2, #260	; 0x104
   11664:	4904      	ldr	r1, [pc, #16]	; (11678 <mqtt_evt_handler+0x130>)
   11666:	4814      	ldr	r0, [pc, #80]	; (116b8 <mqtt_evt_handler+0x170>)
   11668:	e793      	b.n	11592 <mqtt_evt_handler+0x4a>
}
   1166a:	b002      	add	sp, #8
   1166c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11670:	0002c5ab 	.word	0x0002c5ab
   11674:	20020c60 	.word	0x20020c60
   11678:	0002ca5b 	.word	0x0002ca5b
   1167c:	0002c5c3 	.word	0x0002c5c3
   11680:	0002c5e3 	.word	0x0002c5e3
   11684:	0002c608 	.word	0x0002c608
   11688:	2002304b 	.word	0x2002304b
   1168c:	0002c62f 	.word	0x0002c62f
   11690:	0002c732 	.word	0x0002c732
   11694:	20021480 	.word	0x20021480
   11698:	0002c652 	.word	0x0002c652
   1169c:	0002c679 	.word	0x0002c679
   116a0:	0002c697 	.word	0x0002c697
   116a4:	0002c6b5 	.word	0x0002c6b5
   116a8:	20020c78 	.word	0x20020c78
   116ac:	0002c6cb 	.word	0x0002c6cb
   116b0:	0002c6e9 	.word	0x0002c6e9
   116b4:	0002c6ff 	.word	0x0002c6ff
   116b8:	0002c71d 	.word	0x0002c71d
   116bc:	006ddd00 	.word	0x006ddd00

000116c0 <bsd_recoverable_error_handler>:
{
   116c0:	4601      	mov	r1, r0
	printk("bsdlib recoverable error: %u\n", (unsigned int)err);
   116c2:	4801      	ldr	r0, [pc, #4]	; (116c8 <bsd_recoverable_error_handler+0x8>)
   116c4:	f016 be7a 	b.w	283bc <printk>
   116c8:	0002c73d 	.word	0x0002c73d

000116cc <timer_init>:
{
   116cc:	b507      	push	{r0, r1, r2, lr}
   116ce:	2300      	movs	r3, #0
	compiler_barrier();
   116d0:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
	z_impl_k_timer_start(timer, duration, period);
   116d4:	4803      	ldr	r0, [pc, #12]	; (116e4 <timer_init+0x18>)
   116d6:	e9cd 2300 	strd	r2, r3, [sp]
   116da:	f010 f933 	bl	21944 <z_impl_k_timer_start>
}
   116de:	b003      	add	sp, #12
   116e0:	f85d fb04 	ldr.w	pc, [sp], #4
   116e4:	20020b18 	.word	0x20020b18

000116e8 <app_connect>:
void app_connect(void) {
   116e8:	b510      	push	{r4, lr}
	printk("Connecting\n");
   116ea:	4817      	ldr	r0, [pc, #92]	; (11748 <app_connect+0x60>)
   116ec:	f016 fe66 	bl	283bc <printk>
	err = lte_lc_connect();
   116f0:	f019 fa5d 	bl	2abae <lte_lc_connect>
	if(err) {
   116f4:	b110      	cbz	r0, 116fc <app_connect+0x14>
		printk("LTE: Connection failed\n");
   116f6:	4815      	ldr	r0, [pc, #84]	; (1174c <app_connect+0x64>)
   116f8:	f016 fe60 	bl	283bc <printk>
	err = mqtt_connect(&client);
   116fc:	4c14      	ldr	r4, [pc, #80]	; (11750 <app_connect+0x68>)
	printk("LTE: Link connected\n");
   116fe:	4815      	ldr	r0, [pc, #84]	; (11754 <app_connect+0x6c>)
   11700:	f016 fe5c 	bl	283bc <printk>
	err = mqtt_connect(&client);
   11704:	4620      	mov	r0, r4
   11706:	f018 fa24 	bl	29b52 <mqtt_connect>
	if (err != 0) {
   1170a:	4601      	mov	r1, r0
   1170c:	b120      	cbz	r0, 11718 <app_connect+0x30>
		printk("ERROR: mqtt_connect %d\n", err);
   1170e:	4812      	ldr	r0, [pc, #72]	; (11758 <app_connect+0x70>)
}
   11710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("ERROR: fds_init %d\n", err);
   11714:	f016 be52 	b.w	283bc <printk>
	if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {
   11718:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1171c:	b11b      	cbz	r3, 11726 <app_connect+0x3e>
		printk("ERROR: fds_init %d\n", err);
   1171e:	f06f 0185 	mvn.w	r1, #133	; 0x85
   11722:	480e      	ldr	r0, [pc, #56]	; (1175c <app_connect+0x74>)
   11724:	e7f4      	b.n	11710 <app_connect+0x28>
		fds.fd = c->transport.tcp.sock;
   11726:	4a0e      	ldr	r2, [pc, #56]	; (11760 <app_connect+0x78>)
   11728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1172a:	6013      	str	r3, [r2, #0]
	fds.events = POLLIN;
   1172c:	2301      	movs	r3, #1
   1172e:	8093      	strh	r3, [r2, #4]
	app_connected = true;
   11730:	4a0c      	ldr	r2, [pc, #48]	; (11764 <app_connect+0x7c>)
   11732:	7013      	strb	r3, [r2, #0]
	return z_impl_k_sem_take(sem, timeout);
   11734:	f04f 32ff 	mov.w	r2, #4294967295
}
   11738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1173c:	f04f 33ff 	mov.w	r3, #4294967295
   11740:	4809      	ldr	r0, [pc, #36]	; (11768 <app_connect+0x80>)
   11742:	f00f be1d 	b.w	21380 <z_impl_k_sem_take>
   11746:	bf00      	nop
   11748:	0002c75b 	.word	0x0002c75b
   1174c:	0002c767 	.word	0x0002c767
   11750:	2002141c 	.word	0x2002141c
   11754:	0002c77f 	.word	0x0002c77f
   11758:	0002c794 	.word	0x0002c794
   1175c:	0002c7ac 	.word	0x0002c7ac
   11760:	20021480 	.word	0x20021480
   11764:	2002304a 	.word	0x2002304a
   11768:	20020c60 	.word	0x20020c60

0001176c <app_disconnect>:
void app_disconnect(void) {
   1176c:	b508      	push	{r3, lr}
	printk("Disconnecting\n");
   1176e:	480f      	ldr	r0, [pc, #60]	; (117ac <app_disconnect+0x40>)
   11770:	f016 fe24 	bl	283bc <printk>
	app_connected = 0;
   11774:	2200      	movs	r2, #0
   11776:	4b0e      	ldr	r3, [pc, #56]	; (117b0 <app_disconnect+0x44>)
	err = mqtt_disconnect(&client);
   11778:	480e      	ldr	r0, [pc, #56]	; (117b4 <app_disconnect+0x48>)
	app_connected = 0;
   1177a:	701a      	strb	r2, [r3, #0]
	err = mqtt_disconnect(&client);
   1177c:	f018 fa70 	bl	29c60 <mqtt_disconnect>
	if (err != 0) {
   11780:	4601      	mov	r1, r0
   11782:	b120      	cbz	r0, 1178e <app_disconnect+0x22>
}
   11784:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("ERROR: mqtt_connect %d\n", err);
   11788:	480b      	ldr	r0, [pc, #44]	; (117b8 <app_disconnect+0x4c>)
   1178a:	f016 be17 	b.w	283bc <printk>
	printk("MQTT: disconnected\n");
   1178e:	480b      	ldr	r0, [pc, #44]	; (117bc <app_disconnect+0x50>)
   11790:	f016 fe14 	bl	283bc <printk>
	err = lte_lc_offline();
   11794:	f005 fe08 	bl	173a8 <lte_lc_offline>
	if(err) {
   11798:	b110      	cbz	r0, 117a0 <app_disconnect+0x34>
		printk("LTE: Offline mode failed\n");
   1179a:	4809      	ldr	r0, [pc, #36]	; (117c0 <app_disconnect+0x54>)
   1179c:	f016 fe0e 	bl	283bc <printk>
}
   117a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("LTE: offline\n");
   117a4:	4807      	ldr	r0, [pc, #28]	; (117c4 <app_disconnect+0x58>)
   117a6:	f016 be09 	b.w	283bc <printk>
   117aa:	bf00      	nop
   117ac:	0002c7c0 	.word	0x0002c7c0
   117b0:	2002304a 	.word	0x2002304a
   117b4:	2002141c 	.word	0x2002141c
   117b8:	0002c794 	.word	0x0002c794
   117bc:	0002c7cf 	.word	0x0002c7cf
   117c0:	0002c7e3 	.word	0x0002c7e3
   117c4:	0002c7fd 	.word	0x0002c7fd

000117c8 <init_work>:
	k_work_q_start(&app_work_q, app_stack_area, K_THREAD_STACK_SIZEOF(app_stack_area), WORK_PRIORITY);
   117c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
void init_work(void) {
   117cc:	b508      	push	{r3, lr}
	k_work_q_start(&app_work_q, app_stack_area, K_THREAD_STACK_SIZEOF(app_stack_area), WORK_PRIORITY);
   117ce:	4908      	ldr	r1, [pc, #32]	; (117f0 <init_work+0x28>)
   117d0:	2305      	movs	r3, #5
   117d2:	4808      	ldr	r0, [pc, #32]	; (117f4 <init_work+0x2c>)
   117d4:	f00f fed0 	bl	21578 <k_work_q_start>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   117d8:	2300      	movs	r3, #0
   117da:	4a07      	ldr	r2, [pc, #28]	; (117f8 <init_work+0x30>)
   117dc:	4907      	ldr	r1, [pc, #28]	; (117fc <init_work+0x34>)
   117de:	6013      	str	r3, [r2, #0]
   117e0:	e9c2 1301 	strd	r1, r3, [r2, #4]
   117e4:	4a06      	ldr	r2, [pc, #24]	; (11800 <init_work+0x38>)
   117e6:	4907      	ldr	r1, [pc, #28]	; (11804 <init_work+0x3c>)
   117e8:	6013      	str	r3, [r2, #0]
   117ea:	e9c2 1301 	strd	r1, r3, [r2, #4]
}
   117ee:	bd08      	pop	{r3, pc}
   117f0:	200251b0 	.word	0x200251b0
   117f4:	20020cc8 	.word	0x20020cc8
   117f8:	20021410 	.word	0x20021410
   117fc:	0001190d 	.word	0x0001190d
   11800:	2002148c 	.word	0x2002148c
   11804:	000118a9 	.word	0x000118a9

00011808 <create_message>:

void create_message(char* destination, enum app_msg_type type, uint8_t *data, size_t len, int64_t *timestamp) {
   11808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1180c:	b087      	sub	sp, #28
   1180e:	af02      	add	r7, sp, #8
   11810:	4680      	mov	r8, r0
   11812:	4689      	mov	r9, r1
   11814:	4615      	mov	r5, r2
   11816:	461e      	mov	r6, r3

	cJSON *message;

	message = cJSON_CreateObject();
   11818:	f003 fdf2 	bl	15400 <cJSON_CreateObject>
   1181c:	4604      	mov	r4, r0
	
	if(type == SENSOR_ALARM) {
   1181e:	f1b9 0f00 	cmp.w	r9, #0
   11822:	d130      	bne.n	11886 <create_message+0x7e>
		cJSON_AddStringToObject(message, "type", "alarm");
   11824:	4a19      	ldr	r2, [pc, #100]	; (1188c <create_message+0x84>)
	} else {
		cJSON_AddStringToObject(message, "type", "periodic sample");
   11826:	491a      	ldr	r1, [pc, #104]	; (11890 <create_message+0x88>)
   11828:	f018 fccc 	bl	2a1c4 <cJSON_AddStringToObject>
	}

	char time_str[16];
	snprintf(time_str, 16, "%lld", *timestamp);
   1182c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1182e:	2110      	movs	r1, #16
   11830:	e9d3 2300 	ldrd	r2, r3, [r3]
   11834:	4638      	mov	r0, r7
   11836:	e9cd 2300 	strd	r2, r3, [sp]
   1183a:	4a16      	ldr	r2, [pc, #88]	; (11894 <create_message+0x8c>)
   1183c:	f010 ff76 	bl	2272c <snprintf>

	char data_str[len];
   11840:	1df3      	adds	r3, r6, #7
   11842:	f023 0307 	bic.w	r3, r3, #7
   11846:	ebad 0d03 	sub.w	sp, sp, r3
	snprintf(data_str, len, "%s", data);
   1184a:	4631      	mov	r1, r6
   1184c:	462b      	mov	r3, r5
   1184e:	4a12      	ldr	r2, [pc, #72]	; (11898 <create_message+0x90>)
   11850:	a802      	add	r0, sp, #8
   11852:	f010 ff6b 	bl	2272c <snprintf>

	cJSON_AddStringToObject(message, "timestamp", time_str);
   11856:	463a      	mov	r2, r7
   11858:	4620      	mov	r0, r4
   1185a:	4910      	ldr	r1, [pc, #64]	; (1189c <create_message+0x94>)
   1185c:	f018 fcb2 	bl	2a1c4 <cJSON_AddStringToObject>
	cJSON_AddStringToObject(message, "data", data);
   11860:	462a      	mov	r2, r5
   11862:	490f      	ldr	r1, [pc, #60]	; (118a0 <create_message+0x98>)
   11864:	4620      	mov	r0, r4
   11866:	f018 fcad 	bl	2a1c4 <cJSON_AddStringToObject>

	strcpy(destination, cJSON_Print(message));
   1186a:	4620      	mov	r0, r4
   1186c:	f018 fca7 	bl	2a1be <cJSON_Print>
   11870:	4601      	mov	r1, r0
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   11872:	4640      	mov	r0, r8
   11874:	f011 f89c 	bl	229b0 <strcpy>

	cJSON_Delete(message);
   11878:	4620      	mov	r0, r4
   1187a:	f003 fd85 	bl	15388 <cJSON_Delete>
}
   1187e:	3714      	adds	r7, #20
   11880:	46bd      	mov	sp, r7
   11882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cJSON_AddStringToObject(message, "type", "periodic sample");
   11886:	4a07      	ldr	r2, [pc, #28]	; (118a4 <create_message+0x9c>)
   11888:	e7cd      	b.n	11826 <create_message+0x1e>
   1188a:	bf00      	nop
   1188c:	0002c80b 	.word	0x0002c80b
   11890:	0002c811 	.word	0x0002c811
   11894:	0002c826 	.word	0x0002c826
   11898:	0002d8c4 	.word	0x0002d8c4
   1189c:	0002c82b 	.word	0x0002c82b
   118a0:	0002c835 	.word	0x0002c835
   118a4:	0002c816 	.word	0x0002c816

000118a8 <publish_samples>:
void publish_samples(struct k_work *item) {
   118a8:	b510      	push	{r4, lr}
   118aa:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
	app_connect();
   118ae:	f7ff ff1b 	bl	116e8 <app_connect>
	printk("DEV: Publish Samples\n");
   118b2:	4813      	ldr	r0, [pc, #76]	; (11900 <publish_samples+0x58>)
   118b4:	f016 fd82 	bl	283bc <printk>
	date_time_now(&curr_time);
   118b8:	ac02      	add	r4, sp, #8
	dk_set_led(DK_LED2, 0);
   118ba:	2100      	movs	r1, #0
   118bc:	2001      	movs	r0, #1
   118be:	f004 fd6d 	bl	1639c <dk_set_led>
	date_time_now(&curr_time);
   118c2:	4620      	mov	r0, r4
   118c4:	f006 f964 	bl	17b90 <date_time_now>
	create_message(message, SENSOR_SAMPLE, testData, TEST_DATA_SIZE, &curr_time);
   118c8:	4a0e      	ldr	r2, [pc, #56]	; (11904 <publish_samples+0x5c>)
   118ca:	9400      	str	r4, [sp, #0]
   118cc:	2364      	movs	r3, #100	; 0x64
   118ce:	2101      	movs	r1, #1
   118d0:	6812      	ldr	r2, [r2, #0]
   118d2:	a805      	add	r0, sp, #20
   118d4:	f7ff ff98 	bl	11808 <create_message>
	data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, message, sizeof(message));
   118d8:	a805      	add	r0, sp, #20
   118da:	f7ff fd97 	bl	1140c <data_publish.constprop.0>
   118de:	f04f 32ff 	mov.w	r2, #4294967295
   118e2:	f04f 33ff 	mov.w	r3, #4294967295
   118e6:	4808      	ldr	r0, [pc, #32]	; (11908 <publish_samples+0x60>)
   118e8:	f00f fd4a 	bl	21380 <z_impl_k_sem_take>
	dk_set_led(DK_LED2, 1);
   118ec:	2101      	movs	r1, #1
   118ee:	4608      	mov	r0, r1
   118f0:	f004 fd54 	bl	1639c <dk_set_led>
	app_disconnect();
   118f4:	f7ff ff3a 	bl	1176c <app_disconnect>
}
   118f8:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   118fc:	bd10      	pop	{r4, pc}
   118fe:	bf00      	nop
   11900:	0002c83a 	.word	0x0002c83a
   11904:	20020428 	.word	0x20020428
   11908:	20020c78 	.word	0x20020c78

0001190c <publish_alarm>:
void publish_alarm(struct k_work *item) {
   1190c:	b510      	push	{r4, lr}
   1190e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
	app_connect();
   11912:	f7ff fee9 	bl	116e8 <app_connect>
	printk("DEV: Publish alarm\n");
   11916:	4812      	ldr	r0, [pc, #72]	; (11960 <publish_alarm+0x54>)
   11918:	f016 fd50 	bl	283bc <printk>
	date_time_now(&curr_time);
   1191c:	ac02      	add	r4, sp, #8
	dk_set_led(DK_LED2, 0);
   1191e:	2100      	movs	r1, #0
   11920:	2001      	movs	r0, #1
   11922:	f004 fd3b 	bl	1639c <dk_set_led>
	date_time_now(&curr_time);
   11926:	4620      	mov	r0, r4
   11928:	f006 f932 	bl	17b90 <date_time_now>
	create_message(message, SENSOR_ALARM, curr_sample, 1, &curr_time);
   1192c:	2301      	movs	r3, #1
   1192e:	2100      	movs	r1, #0
   11930:	4a0c      	ldr	r2, [pc, #48]	; (11964 <publish_alarm+0x58>)
   11932:	a805      	add	r0, sp, #20
   11934:	9400      	str	r4, [sp, #0]
   11936:	f7ff ff67 	bl	11808 <create_message>
	data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, message, sizeof(message));
   1193a:	a805      	add	r0, sp, #20
   1193c:	f7ff fd66 	bl	1140c <data_publish.constprop.0>
   11940:	f04f 32ff 	mov.w	r2, #4294967295
   11944:	f04f 33ff 	mov.w	r3, #4294967295
   11948:	4807      	ldr	r0, [pc, #28]	; (11968 <publish_alarm+0x5c>)
   1194a:	f00f fd19 	bl	21380 <z_impl_k_sem_take>
	dk_set_led(DK_LED2, 1);
   1194e:	2101      	movs	r1, #1
   11950:	4608      	mov	r0, r1
   11952:	f004 fd23 	bl	1639c <dk_set_led>
	app_disconnect();
   11956:	f7ff ff09 	bl	1176c <app_disconnect>
}
   1195a:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   1195e:	bd10      	pop	{r4, pc}
   11960:	0002c850 	.word	0x0002c850
   11964:	0002cf94 	.word	0x0002cf94
   11968:	20020c78 	.word	0x20020c78

0001196c <main>:

/**** Application code - End ****/

void main(void)
{
   1196c:	b530      	push	{r4, r5, lr}
	int err;

    printk("MQTT sensor application example started\n");
   1196e:	486f      	ldr	r0, [pc, #444]	; (11b2c <main+0x1c0>)
{
   11970:	b09b      	sub	sp, #108	; 0x6c
    printk("MQTT sensor application example started\n");
   11972:	f016 fd23 	bl	283bc <printk>
		printk("LTE Link Connecting ...\n");
   11976:	486e      	ldr	r0, [pc, #440]	; (11b30 <main+0x1c4>)
   11978:	f016 fd20 	bl	283bc <printk>
		err = lte_lc_init_and_connect();
   1197c:	f019 f91a 	bl	2abb4 <lte_lc_init_and_connect>
		printk("LTE Link Connected!\n");
   11980:	486c      	ldr	r0, [pc, #432]	; (11b34 <main+0x1c8>)
   11982:	f016 fd1b 	bl	283bc <printk>

	modem_configure();
	date_time_update_async(date_time_handler);
   11986:	486c      	ldr	r0, [pc, #432]	; (11b38 <main+0x1cc>)
   11988:	f006 f924 	bl	17bd4 <date_time_update_async>
	struct addrinfo hints = {
   1198c:	2401      	movs	r4, #1
   1198e:	f04f 33ff 	mov.w	r3, #4294967295
   11992:	f04f 32ff 	mov.w	r2, #4294967295
   11996:	4869      	ldr	r0, [pc, #420]	; (11b3c <main+0x1d0>)
   11998:	f00f fcf2 	bl	21380 <z_impl_k_sem_take>
	mqtt_client_init(client);
   1199c:	4868      	ldr	r0, [pc, #416]	; (11b40 <main+0x1d4>)
   1199e:	f018 f8be 	bl	29b1e <mqtt_client_init>
	struct addrinfo hints = {
   119a2:	2250      	movs	r2, #80	; 0x50
   119a4:	2100      	movs	r1, #0
   119a6:	a806      	add	r0, sp, #24
   119a8:	f010 fc50 	bl	2224c <memset>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   119ac:	2100      	movs	r1, #0
   119ae:	4865      	ldr	r0, [pc, #404]	; (11b44 <main+0x1d8>)
   119b0:	ab01      	add	r3, sp, #4
   119b2:	aa06      	add	r2, sp, #24
   119b4:	e9cd 4408 	strd	r4, r4, [sp, #32]
   119b8:	f017 fb76 	bl	290a8 <zsock_getaddrinfo>
	if (err) {
   119bc:	4d62      	ldr	r5, [pc, #392]	; (11b48 <main+0x1dc>)
   119be:	4601      	mov	r1, r0
   119c0:	2800      	cmp	r0, #0
   119c2:	d066      	beq.n	11a92 <main+0x126>
		printk("ERROR: getaddrinfo failed %d\n", err);
   119c4:	4861      	ldr	r0, [pc, #388]	; (11b4c <main+0x1e0>)
   119c6:	f016 fcf9 	bl	283bc <printk>
	client->broker = &broker;
   119ca:	4c5d      	ldr	r4, [pc, #372]	; (11b40 <main+0x1d4>)
	client->evt_cb = mqtt_evt_handler;
   119cc:	4b60      	ldr	r3, [pc, #384]	; (11b50 <main+0x1e4>)
	client->client_id.utf8 = (uint8_t *)CONFIG_MQTT_CLIENT_ID;
   119ce:	4861      	ldr	r0, [pc, #388]	; (11b54 <main+0x1e8>)
	client->evt_cb = mqtt_evt_handler;
   119d0:	64a3      	str	r3, [r4, #72]	; 0x48
	client->broker = &broker;
   119d2:	6365      	str	r5, [r4, #52]	; 0x34
	client->client_id.utf8 = (uint8_t *)CONFIG_MQTT_CLIENT_ID;
   119d4:	62e0      	str	r0, [r4, #44]	; 0x2c
	client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
   119d6:	f011 f849 	bl	22a6c <strlen>
	client->protocol_version = MQTT_VERSION_3_1_1;
   119da:	2204      	movs	r2, #4
   119dc:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	client->rx_buf = rx_buffer;
   119e0:	4a5d      	ldr	r2, [pc, #372]	; (11b58 <main+0x1ec>)
	client->password = NULL;
   119e2:	2300      	movs	r3, #0
	client->rx_buf = rx_buffer;
   119e4:	64e2      	str	r2, [r4, #76]	; 0x4c
	client->rx_buf_size = sizeof(rx_buffer);
   119e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
	client->tx_buf = tx_buffer;
   119ea:	495c      	ldr	r1, [pc, #368]	; (11b5c <main+0x1f0>)
	client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
   119ec:	6320      	str	r0, [r4, #48]	; 0x30
	printk("DEV_DBG: Initalizing buttons and leds.\n");
   119ee:	485c      	ldr	r0, [pc, #368]	; (11b60 <main+0x1f4>)
	client->tx_buf_size = sizeof(tx_buffer);
   119f0:	e9c4 1215 	strd	r1, r2, [r4, #84]	; 0x54
	client->user_name = NULL;
   119f4:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
	client->rx_buf_size = sizeof(rx_buffer);
   119f8:	6522      	str	r2, [r4, #80]	; 0x50
	client->transport.type = MQTT_TRANSPORT_NON_SECURE;
   119fa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	printk("DEV_DBG: Initalizing buttons and leds.\n");
   119fe:	f016 fcdd 	bl	283bc <printk>
	err = dk_buttons_init(button_handler);
   11a02:	4858      	ldr	r0, [pc, #352]	; (11b64 <main+0x1f8>)
   11a04:	f004 fc14 	bl	16230 <dk_buttons_init>
	if (err) {
   11a08:	4601      	mov	r1, r0
   11a0a:	b110      	cbz	r0, 11a12 <main+0xa6>
		printk("Could not initialize buttons, err code: %d\n", err);
   11a0c:	4856      	ldr	r0, [pc, #344]	; (11b68 <main+0x1fc>)
   11a0e:	f016 fcd5 	bl	283bc <printk>
	err = dk_leds_init();
   11a12:	f004 fbbd 	bl	16190 <dk_leds_init>
	if (err) {
   11a16:	4601      	mov	r1, r0
   11a18:	b110      	cbz	r0, 11a20 <main+0xb4>
		printk("Could not initialize leds, err code: %d\n", err);
   11a1a:	4854      	ldr	r0, [pc, #336]	; (11b6c <main+0x200>)
   11a1c:	f016 fcce 	bl	283bc <printk>
	err = dk_set_leds_state(DK_ALL_LEDS_MSK, DK_NO_LEDS_MSK);
   11a20:	2100      	movs	r1, #0
   11a22:	200f      	movs	r0, #15
   11a24:	f018 ff6a 	bl	2a8fc <dk_set_leds_state>
	if (err) {
   11a28:	4601      	mov	r1, r0
   11a2a:	b110      	cbz	r0, 11a32 <main+0xc6>
		printk("Could not set leds state, err code: %d\n", err);
   11a2c:	4850      	ldr	r0, [pc, #320]	; (11b70 <main+0x204>)
   11a2e:	f016 fcc5 	bl	283bc <printk>
	k_sem_take(&date_time_ok,K_FOREVER);

	client_init(&client);

	buttons_leds_init(); /* Button for "alarm simulation" and leds for control */
	timer_init(); /* Periodic sample timer */
   11a32:	f7ff fe4b 	bl	116cc <timer_init>
	init_work();  /* Work queue and items for sampling and alarm */
   11a36:	f7ff fec7 	bl	117c8 <init_work>
	
	err = lte_lc_offline();
   11a3a:	f005 fcb5 	bl	173a8 <lte_lc_offline>
	if(err) {
   11a3e:	b110      	cbz	r0, 11a46 <main+0xda>
		printk("LTE: Offline mode failed\n");
   11a40:	484c      	ldr	r0, [pc, #304]	; (11b74 <main+0x208>)
   11a42:	f016 fcbb 	bl	283bc <printk>
	}


	//Lighting LED1 to indicate that the application entering main loop.
	dk_set_led(DK_LED1, 0);
   11a46:	2100      	movs	r1, #0
   11a48:	4608      	mov	r0, r1
   11a4a:	f004 fca7 	bl	1639c <dk_set_led>

	while (1) {
		if(app_connected) {
   11a4e:	4d4a      	ldr	r5, [pc, #296]	; (11b78 <main+0x20c>)
   11a50:	4c4a      	ldr	r4, [pc, #296]	; (11b7c <main+0x210>)
   11a52:	782b      	ldrb	r3, [r5, #0]
   11a54:	2b00      	cmp	r3, #0
   11a56:	d062      	beq.n	11b1e <main+0x1b2>
			err = poll(&fds, 1, mqtt_keepalive_time_left(&client));
   11a58:	4839      	ldr	r0, [pc, #228]	; (11b40 <main+0x1d4>)
   11a5a:	f018 f97c 	bl	29d56 <mqtt_keepalive_time_left>
   11a5e:	4602      	mov	r2, r0
   11a60:	2101      	movs	r1, #1
   11a62:	4620      	mov	r0, r4
   11a64:	f001 f9f8 	bl	12e58 <z_impl_zsock_poll>
			if (err < 0) {
   11a68:	2800      	cmp	r0, #0
   11a6a:	da32      	bge.n	11ad2 <main+0x166>
				printk("ERROR: poll %d\n", errno);
   11a6c:	f017 fc9c 	bl	293a8 <__errno>
   11a70:	6801      	ldr	r1, [r0, #0]
   11a72:	4843      	ldr	r0, [pc, #268]	; (11b80 <main+0x214>)
			/* Check if the app is still connected, as it can be disconnnected
			 * during poll. */
			if(app_connected) { 
				err = mqtt_live(&client);
				if ((err != 0) && (err != -EAGAIN)) {
					printk("ERROR: mqtt_live %d\n", err);
   11a74:	f016 fca2 	bl	283bc <printk>
		{
			k_sleep(K_SECONDS(SAMPLE_INTERVAL));
		}
	}

	printk("Disconnecting MQTT client...\n");
   11a78:	4842      	ldr	r0, [pc, #264]	; (11b84 <main+0x218>)
   11a7a:	f016 fc9f 	bl	283bc <printk>

	err = mqtt_disconnect(&client);
   11a7e:	4830      	ldr	r0, [pc, #192]	; (11b40 <main+0x1d4>)
   11a80:	f018 f8ee 	bl	29c60 <mqtt_disconnect>
	if (err) {
   11a84:	4601      	mov	r1, r0
   11a86:	b110      	cbz	r0, 11a8e <main+0x122>
		printk("Could not disconnect MQTT client. Error: %d\n", err);
   11a88:	483f      	ldr	r0, [pc, #252]	; (11b88 <main+0x21c>)
   11a8a:	f016 fc97 	bl	283bc <printk>
	}
}
   11a8e:	b01b      	add	sp, #108	; 0x6c
   11a90:	bd30      	pop	{r4, r5, pc}
	addr = result;
   11a92:	9b01      	ldr	r3, [sp, #4]
	while (addr != NULL) {
   11a94:	b19b      	cbz	r3, 11abe <main+0x152>
		if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
   11a96:	6959      	ldr	r1, [r3, #20]
   11a98:	2908      	cmp	r1, #8
   11a9a:	d114      	bne.n	11ac6 <main+0x15a>
				->sin_addr.s_addr;
   11a9c:	699b      	ldr	r3, [r3, #24]
			broker4->sin_family = AF_INET;
   11a9e:	802c      	strh	r4, [r5, #0]
				->sin_addr.s_addr;
   11aa0:	685b      	ldr	r3, [r3, #4]
			broker4->sin_addr.s_addr =
   11aa2:	606b      	str	r3, [r5, #4]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
   11aa4:	f645 3307 	movw	r3, #23303	; 0x5b07
   11aa8:	806b      	strh	r3, [r5, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   11aaa:	2310      	movs	r3, #16
   11aac:	1d29      	adds	r1, r5, #4
   11aae:	4620      	mov	r0, r4
   11ab0:	aa02      	add	r2, sp, #8
   11ab2:	f002 fc4f 	bl	14354 <z_impl_net_addr_ntop>
			printk("IPv4 Address found %s\n", ipv4_addr);
   11ab6:	4835      	ldr	r0, [pc, #212]	; (11b8c <main+0x220>)
   11ab8:	a902      	add	r1, sp, #8
   11aba:	f016 fc7f 	bl	283bc <printk>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   11abe:	9801      	ldr	r0, [sp, #4]
   11ac0:	f017 faf4 	bl	290ac <zsock_freeaddrinfo>
   11ac4:	e781      	b.n	119ca <main+0x5e>
			printk("ai_addrlen = %u should be %u or %u\n",
   11ac6:	2318      	movs	r3, #24
   11ac8:	2208      	movs	r2, #8
   11aca:	4831      	ldr	r0, [pc, #196]	; (11b90 <main+0x224>)
   11acc:	f016 fc76 	bl	283bc <printk>
		break;
   11ad0:	e7f5      	b.n	11abe <main+0x152>
			if(app_connected) { 
   11ad2:	782b      	ldrb	r3, [r5, #0]
   11ad4:	2b00      	cmp	r3, #0
   11ad6:	d0bc      	beq.n	11a52 <main+0xe6>
				err = mqtt_live(&client);
   11ad8:	4819      	ldr	r0, [pc, #100]	; (11b40 <main+0x1d4>)
   11ada:	f018 f915 	bl	29d08 <mqtt_live>
				if ((err != 0) && (err != -EAGAIN)) {
   11ade:	4601      	mov	r1, r0
   11ae0:	b120      	cbz	r0, 11aec <main+0x180>
   11ae2:	f110 0f0b 	cmn.w	r0, #11
   11ae6:	d001      	beq.n	11aec <main+0x180>
					printk("ERROR: mqtt_live %d\n", err);
   11ae8:	482a      	ldr	r0, [pc, #168]	; (11b94 <main+0x228>)
   11aea:	e7c3      	b.n	11a74 <main+0x108>
				if ((fds.revents & POLLIN) == POLLIN) {
   11aec:	88e3      	ldrh	r3, [r4, #6]
   11aee:	07d9      	lsls	r1, r3, #31
   11af0:	d508      	bpl.n	11b04 <main+0x198>
					err = mqtt_input(&client);
   11af2:	4813      	ldr	r0, [pc, #76]	; (11b40 <main+0x1d4>)
   11af4:	f018 f946 	bl	29d84 <mqtt_input>
					if (err != 0) {
   11af8:	4601      	mov	r1, r0
   11afa:	b118      	cbz	r0, 11b04 <main+0x198>
						printk("ERROR: mqtt_input %d\n", err);
   11afc:	4826      	ldr	r0, [pc, #152]	; (11b98 <main+0x22c>)
   11afe:	f016 fc5d 	bl	283bc <printk>
						continue;
   11b02:	e7a6      	b.n	11a52 <main+0xe6>
				if ((fds.revents & POLLERR) == POLLERR) {
   11b04:	88e3      	ldrh	r3, [r4, #6]
   11b06:	071a      	lsls	r2, r3, #28
   11b08:	d503      	bpl.n	11b12 <main+0x1a6>
					printk("POLLERR\n");
   11b0a:	4824      	ldr	r0, [pc, #144]	; (11b9c <main+0x230>)
   11b0c:	f016 fc56 	bl	283bc <printk>
					break;
   11b10:	e7b2      	b.n	11a78 <main+0x10c>
				if ((fds.revents & POLLNVAL) == POLLNVAL) {
   11b12:	069b      	lsls	r3, r3, #26
   11b14:	d59d      	bpl.n	11a52 <main+0xe6>
					printk("POLLNVAL\n");
   11b16:	4822      	ldr	r0, [pc, #136]	; (11ba0 <main+0x234>)
   11b18:	f016 fc50 	bl	283bc <printk>
					continue;
   11b1c:	e799      	b.n	11a52 <main+0xe6>
	return z_impl_k_sleep(timeout);
   11b1e:	2100      	movs	r1, #0
   11b20:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11b24:	f00f fbe0 	bl	212e8 <z_impl_k_sleep>
   11b28:	e793      	b.n	11a52 <main+0xe6>
   11b2a:	bf00      	nop
   11b2c:	0002c864 	.word	0x0002c864
   11b30:	0002c88d 	.word	0x0002c88d
   11b34:	0002c8a6 	.word	0x0002c8a6
   11b38:	00011505 	.word	0x00011505
   11b3c:	20020c18 	.word	0x20020c18
   11b40:	2002141c 	.word	0x2002141c
   11b44:	0002c8bb 	.word	0x0002c8bb
   11b48:	20023028 	.word	0x20023028
   11b4c:	0002c8cc 	.word	0x0002c8cc
   11b50:	00011549 	.word	0x00011549
   11b54:	0002c925 	.word	0x0002c925
   11b58:	200230cb 	.word	0x200230cb
   11b5c:	200232bf 	.word	0x200232bf
   11b60:	0002c931 	.word	0x0002c931
   11b64:	000114a1 	.word	0x000114a1
   11b68:	0002c959 	.word	0x0002c959
   11b6c:	0002c985 	.word	0x0002c985
   11b70:	0002c9ae 	.word	0x0002c9ae
   11b74:	0002c7e3 	.word	0x0002c7e3
   11b78:	2002304a 	.word	0x2002304a
   11b7c:	20021480 	.word	0x20021480
   11b80:	0002c9d6 	.word	0x0002c9d6
   11b84:	0002c679 	.word	0x0002c679
   11b88:	0002ca24 	.word	0x0002ca24
   11b8c:	0002c8ea 	.word	0x0002c8ea
   11b90:	0002c901 	.word	0x0002c901
   11b94:	0002c9e6 	.word	0x0002c9e6
   11b98:	0002c9fb 	.word	0x0002c9fb
   11b9c:	0002ca11 	.word	0x0002ca11
   11ba0:	0002ca1a 	.word	0x0002ca1a

00011ba4 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   11ba4:	2803      	cmp	r0, #3
{
   11ba6:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   11ba8:	d906      	bls.n	11bb8 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   11baa:	f017 fbfd 	bl	293a8 <__errno>
   11bae:	2309      	movs	r3, #9
   11bb0:	6003      	str	r3, [r0, #0]
   11bb2:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   11bb6:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11bb8:	220c      	movs	r2, #12
   11bba:	4b05      	ldr	r3, [pc, #20]	; (11bd0 <_check_fd+0x2c>)
   11bbc:	fb02 3000 	mla	r0, r2, r0, r3
   11bc0:	3008      	adds	r0, #8
   11bc2:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   11bc6:	2b00      	cmp	r3, #0
   11bc8:	d0ef      	beq.n	11baa <_check_fd+0x6>
	return 0;
   11bca:	2000      	movs	r0, #0
   11bcc:	e7f3      	b.n	11bb6 <_check_fd+0x12>
   11bce:	bf00      	nop
   11bd0:	20021498 	.word	0x20021498

00011bd4 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   11bd4:	b570      	push	{r4, r5, r6, lr}
   11bd6:	4604      	mov	r4, r0
   11bd8:	460d      	mov	r5, r1
   11bda:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   11bdc:	f7ff ffe2 	bl	11ba4 <_check_fd>
   11be0:	2800      	cmp	r0, #0
   11be2:	db0a      	blt.n	11bfa <z_get_fd_obj+0x26>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
   11be4:	4a08      	ldr	r2, [pc, #32]	; (11c08 <z_get_fd_obj+0x34>)
   11be6:	b155      	cbz	r5, 11bfe <z_get_fd_obj+0x2a>
   11be8:	230c      	movs	r3, #12
   11bea:	fb03 2304 	mla	r3, r3, r4, r2
   11bee:	685b      	ldr	r3, [r3, #4]
   11bf0:	42ab      	cmp	r3, r5
   11bf2:	d004      	beq.n	11bfe <z_get_fd_obj+0x2a>
		errno = err;
   11bf4:	f017 fbd8 	bl	293a8 <__errno>
   11bf8:	6006      	str	r6, [r0, #0]
		return NULL;
   11bfa:	2000      	movs	r0, #0
   11bfc:	e002      	b.n	11c04 <z_get_fd_obj+0x30>
		return NULL;
	}

	return fd_entry->obj;
   11bfe:	200c      	movs	r0, #12
   11c00:	4344      	muls	r4, r0
   11c02:	5910      	ldr	r0, [r2, r4]
}
   11c04:	bd70      	pop	{r4, r5, r6, pc}
   11c06:	bf00      	nop
   11c08:	20021498 	.word	0x20021498

00011c0c <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
   11c0c:	b538      	push	{r3, r4, r5, lr}
   11c0e:	4605      	mov	r5, r0
   11c10:	460c      	mov	r4, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   11c12:	f7ff ffc7 	bl	11ba4 <_check_fd>
   11c16:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
   11c18:	bfa3      	ittte	ge
   11c1a:	230c      	movge	r3, #12
   11c1c:	fb03 f005 	mulge.w	r0, r3, r5
   11c20:	4a03      	ldrge	r2, [pc, #12]	; (11c30 <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
   11c22:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
   11c24:	bfa1      	itttt	ge
   11c26:	1813      	addge	r3, r2, r0
   11c28:	685b      	ldrge	r3, [r3, #4]
   11c2a:	6023      	strge	r3, [r4, #0]

	return fd_entry->obj;
   11c2c:	5810      	ldrge	r0, [r2, r0]
}
   11c2e:	bd38      	pop	{r3, r4, r5, pc}
   11c30:	20021498 	.word	0x20021498

00011c34 <z_reserve_fd>:

int z_reserve_fd(void)
{
   11c34:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   11c36:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   11c38:	f04f 33ff 	mov.w	r3, #4294967295
   11c3c:	f04f 32ff 	mov.w	r2, #4294967295
   11c40:	4812      	ldr	r0, [pc, #72]	; (11c8c <z_reserve_fd+0x58>)
   11c42:	f00e ff2f 	bl	20aa4 <z_impl_k_mutex_lock>
   11c46:	4b12      	ldr	r3, [pc, #72]	; (11c90 <z_reserve_fd+0x5c>)
   11c48:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
   11c4c:	b17a      	cbz	r2, 11c6e <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   11c4e:	3401      	adds	r4, #1
   11c50:	2c04      	cmp	r4, #4
   11c52:	f103 030c 	add.w	r3, r3, #12
   11c56:	d1f7      	bne.n	11c48 <z_reserve_fd+0x14>
	errno = ENFILE;
   11c58:	f017 fba6 	bl	293a8 <__errno>
   11c5c:	2317      	movs	r3, #23
	return -1;
   11c5e:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   11c62:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   11c64:	4809      	ldr	r0, [pc, #36]	; (11c8c <z_reserve_fd+0x58>)
   11c66:	f00e ff95 	bl	20b94 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   11c6a:	4620      	mov	r0, r4
   11c6c:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11c6e:	e8d3 1fef 	ldaex	r1, [r3]
   11c72:	3101      	adds	r1, #1
   11c74:	e8c3 1fe0 	stlex	r0, r1, [r3]
   11c78:	2800      	cmp	r0, #0
   11c7a:	d1f8      	bne.n	11c6e <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
   11c7c:	230c      	movs	r3, #12
   11c7e:	4363      	muls	r3, r4
   11c80:	4904      	ldr	r1, [pc, #16]	; (11c94 <z_reserve_fd+0x60>)
   11c82:	18c8      	adds	r0, r1, r3
   11c84:	50ca      	str	r2, [r1, r3]
		fdtable[fd].vtable = NULL;
   11c86:	6042      	str	r2, [r0, #4]
   11c88:	e7ec      	b.n	11c64 <z_reserve_fd+0x30>
   11c8a:	bf00      	nop
   11c8c:	20020b78 	.word	0x20020b78
   11c90:	200214a0 	.word	0x200214a0
   11c94:	20021498 	.word	0x20021498

00011c98 <z_finalize_fd>:
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   11c98:	230c      	movs	r3, #12
{
   11c9a:	b510      	push	{r4, lr}
	fdtable[fd].obj = obj;
   11c9c:	4358      	muls	r0, r3
   11c9e:	4c02      	ldr	r4, [pc, #8]	; (11ca8 <z_finalize_fd+0x10>)
   11ca0:	1823      	adds	r3, r4, r0
   11ca2:	5021      	str	r1, [r4, r0]
	fdtable[fd].vtable = vtable;
   11ca4:	605a      	str	r2, [r3, #4]
}
   11ca6:	bd10      	pop	{r4, pc}
   11ca8:	20021498 	.word	0x20021498

00011cac <z_free_fd>:
		old_rc = atomic_get(&fdtable[fd].refcount);
   11cac:	230c      	movs	r3, #12
   11cae:	4a0e      	ldr	r2, [pc, #56]	; (11ce8 <z_free_fd+0x3c>)

void z_free_fd(int fd)
{
   11cb0:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   11cb2:	fb03 2300 	mla	r3, r3, r0, r2
   11cb6:	3308      	adds	r3, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11cb8:	e8d3 1faf 	lda	r1, [r3]
		if (!old_rc) {
   11cbc:	b191      	cbz	r1, 11ce4 <z_free_fd+0x38>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   11cbe:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   11cc0:	e8d3 5fef 	ldaex	r5, [r3]
   11cc4:	428d      	cmp	r5, r1
   11cc6:	d104      	bne.n	11cd2 <z_free_fd+0x26>
   11cc8:	e8c3 4fec 	stlex	ip, r4, [r3]
   11ccc:	f1bc 0f00 	cmp.w	ip, #0
   11cd0:	d1f6      	bne.n	11cc0 <z_free_fd+0x14>
   11cd2:	d1f1      	bne.n	11cb8 <z_free_fd+0xc>
	if (old_rc != 1) {
   11cd4:	2901      	cmp	r1, #1
   11cd6:	d105      	bne.n	11ce4 <z_free_fd+0x38>
	fdtable[fd].obj = NULL;
   11cd8:	230c      	movs	r3, #12
   11cda:	4358      	muls	r0, r3
   11cdc:	2300      	movs	r3, #0
   11cde:	1811      	adds	r1, r2, r0
   11ce0:	5013      	str	r3, [r2, r0]
	fdtable[fd].vtable = NULL;
   11ce2:	604b      	str	r3, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   11ce4:	bd30      	pop	{r4, r5, pc}
   11ce6:	bf00      	nop
   11ce8:	20021498 	.word	0x20021498

00011cec <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
   11cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cf0:	b087      	sub	sp, #28
   11cf2:	460f      	mov	r7, r1
   11cf4:	4619      	mov	r1, r3
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
   11cf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
   11cf8:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   11cfa:	2514      	movs	r5, #20
{
   11cfc:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
   11cfe:	4698      	mov	r8, r3
{
   11d00:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   11d04:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
   11d08:	4c1e      	ldr	r4, [pc, #120]	; (11d84 <print_digits+0x98>)
   11d0a:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   11d0e:	ea50 0301 	orrs.w	r3, r0, r1
   11d12:	d11a      	bne.n	11d4a <print_digits+0x5e>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
   11d14:	2d14      	cmp	r5, #20
		buf[i] = '0';
   11d16:	bf08      	it	eq
   11d18:	2330      	moveq	r3, #48	; 0x30
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   11d1a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
   11d1c:	bf18      	it	ne
   11d1e:	3501      	addne	r5, #1
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   11d20:	442c      	add	r4, r5
		buf[i] = '0';
   11d22:	bf08      	it	eq
   11d24:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   11d28:	2c15      	cmp	r4, #21
   11d2a:	d01b      	beq.n	11d64 <print_digits+0x78>
   11d2c:	3c15      	subs	r4, #21

	for (/**/; pad > 0 && pad_before; pad--) {
   11d2e:	2c00      	cmp	r4, #0
   11d30:	dc1a      	bgt.n	11d68 <print_digits+0x7c>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
   11d32:	f81d 0005 	ldrb.w	r0, [sp, r5]
   11d36:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
   11d38:	3501      	adds	r5, #1
		out(buf[i], ctx);
   11d3a:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
   11d3c:	2d15      	cmp	r5, #21
   11d3e:	d1f8      	bne.n	11d32 <print_digits+0x46>
	}
	for (/**/; pad > 0; pad--) {
   11d40:	2c00      	cmp	r4, #0
   11d42:	dc19      	bgt.n	11d78 <print_digits+0x8c>
		out(pad_char, ctx);
	}
}
   11d44:	b007      	add	sp, #28
   11d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
   11d4a:	4642      	mov	r2, r8
   11d4c:	464b      	mov	r3, r9
   11d4e:	f7fa fd83 	bl	c858 <__aeabi_uldivmod>
   11d52:	4684      	mov	ip, r0
   11d54:	460b      	mov	r3, r1
   11d56:	5ca2      	ldrb	r2, [r4, r2]
		num /= base;
   11d58:	4660      	mov	r0, ip
		buf[i] = "0123456789abcdef"[num % base];
   11d5a:	f80d 2005 	strb.w	r2, [sp, r5]
		num /= base;
   11d5e:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   11d60:	3d01      	subs	r5, #1
   11d62:	e7d4      	b.n	11d0e <print_digits+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   11d64:	2400      	movs	r4, #0
	for (/**/; i < DIGITS_BUFLEN; i++) {
   11d66:	e7e4      	b.n	11d32 <print_digits+0x46>
	for (/**/; pad > 0 && pad_before; pad--) {
   11d68:	f1bb 0f00 	cmp.w	fp, #0
   11d6c:	d0e1      	beq.n	11d32 <print_digits+0x46>
		out(pad_char, ctx);
   11d6e:	4639      	mov	r1, r7
   11d70:	4650      	mov	r0, sl
   11d72:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
   11d74:	3c01      	subs	r4, #1
   11d76:	e7da      	b.n	11d2e <print_digits+0x42>
		out(pad_char, ctx);
   11d78:	4639      	mov	r1, r7
   11d7a:	4650      	mov	r0, sl
   11d7c:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
   11d7e:	3c01      	subs	r4, #1
   11d80:	e7de      	b.n	11d40 <print_digits+0x54>
   11d82:	bf00      	nop
   11d84:	0002ca6c 	.word	0x0002ca6c

00011d88 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   11d88:	680b      	ldr	r3, [r1, #0]
   11d8a:	3301      	adds	r3, #1
   11d8c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   11d8e:	4b01      	ldr	r3, [pc, #4]	; (11d94 <char_out+0xc>)
   11d90:	681b      	ldr	r3, [r3, #0]
   11d92:	4718      	bx	r3
   11d94:	2002042c 	.word	0x2002042c

00011d98 <__printk_hook_install>:
	_char_out = fn;
   11d98:	4b01      	ldr	r3, [pc, #4]	; (11da0 <__printk_hook_install+0x8>)
   11d9a:	6018      	str	r0, [r3, #0]
}
   11d9c:	4770      	bx	lr
   11d9e:	bf00      	nop
   11da0:	2002042c 	.word	0x2002042c

00011da4 <z_vprintk>:
{
   11da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   11da8:	2600      	movs	r6, #0
{
   11daa:	4605      	mov	r5, r0
   11dac:	468b      	mov	fp, r1
   11dae:	461c      	mov	r4, r3
	int min_width = -1;
   11db0:	f04f 38ff 	mov.w	r8, #4294967295
	enum pad_type padding = PAD_NONE;
   11db4:	4637      	mov	r7, r6
{
   11db6:	b087      	sub	sp, #28
   11db8:	f102 3aff 	add.w	sl, r2, #4294967295
			might_format = 0;
   11dbc:	f04f 0900 	mov.w	r9, #0
					break;
   11dc0:	e007      	b.n	11dd2 <z_vprintk+0x2e>
		if (!might_format) {
   11dc2:	f1b9 0f00 	cmp.w	r9, #0
   11dc6:	d10b      	bne.n	11de0 <z_vprintk+0x3c>
			if (*fmt != '%') {
   11dc8:	2825      	cmp	r0, #37	; 0x25
   11dca:	f000 810a 	beq.w	11fe2 <z_vprintk+0x23e>
				out((int)*fmt, ctx);
   11dce:	4659      	mov	r1, fp
   11dd0:	47a8      	blx	r5
	while (*fmt) {
   11dd2:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   11dd6:	2800      	cmp	r0, #0
   11dd8:	d1f3      	bne.n	11dc2 <z_vprintk+0x1e>
}
   11dda:	b007      	add	sp, #28
   11ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   11de0:	287a      	cmp	r0, #122	; 0x7a
   11de2:	d80a      	bhi.n	11dfa <z_vprintk+0x56>
   11de4:	2862      	cmp	r0, #98	; 0x62
   11de6:	d810      	bhi.n	11e0a <z_vprintk+0x66>
   11de8:	2830      	cmp	r0, #48	; 0x30
   11dea:	d051      	beq.n	11e90 <z_vprintk+0xec>
   11dec:	d844      	bhi.n	11e78 <z_vprintk+0xd4>
   11dee:	2825      	cmp	r0, #37	; 0x25
   11df0:	f000 80f5 	beq.w	11fde <z_vprintk+0x23a>
   11df4:	282d      	cmp	r0, #45	; 0x2d
   11df6:	f000 80fb 	beq.w	11ff0 <z_vprintk+0x24c>
					out((int)'%', ctx);
   11dfa:	4659      	mov	r1, fp
   11dfc:	2025      	movs	r0, #37	; 0x25
   11dfe:	47a8      	blx	r5
					out((int)*fmt, ctx);
   11e00:	4659      	mov	r1, fp
   11e02:	f89a 0000 	ldrb.w	r0, [sl]
   11e06:	47a8      	blx	r5
   11e08:	e7d8      	b.n	11dbc <z_vprintk+0x18>
   11e0a:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
   11e0e:	2b17      	cmp	r3, #23
   11e10:	d8f3      	bhi.n	11dfa <z_vprintk+0x56>
   11e12:	a201      	add	r2, pc, #4	; (adr r2, 11e18 <z_vprintk+0x74>)
   11e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11e18:	00011fd7 	.word	0x00011fd7
   11e1c:	00011ed9 	.word	0x00011ed9
   11e20:	00011dfb 	.word	0x00011dfb
   11e24:	00011dfb 	.word	0x00011dfb
   11e28:	00011dfb 	.word	0x00011dfb
   11e2c:	00011ebb 	.word	0x00011ebb
   11e30:	00011ed9 	.word	0x00011ed9
   11e34:	00011dfb 	.word	0x00011dfb
   11e38:	00011dfb 	.word	0x00011dfb
   11e3c:	00011ebb 	.word	0x00011ebb
   11e40:	00011dfb 	.word	0x00011dfb
   11e44:	00011dfb 	.word	0x00011dfb
   11e48:	00011dfb 	.word	0x00011dfb
   11e4c:	00011f53 	.word	0x00011f53
   11e50:	00011dfb 	.word	0x00011dfb
   11e54:	00011dfb 	.word	0x00011dfb
   11e58:	00011f9f 	.word	0x00011f9f
   11e5c:	00011dfb 	.word	0x00011dfb
   11e60:	00011ed9 	.word	0x00011ed9
   11e64:	00011dfb 	.word	0x00011dfb
   11e68:	00011dfb 	.word	0x00011dfb
   11e6c:	00011e81 	.word	0x00011e81
   11e70:	00011dfb 	.word	0x00011dfb
   11e74:	00011ebb 	.word	0x00011ebb
			switch (*fmt) {
   11e78:	2839      	cmp	r0, #57	; 0x39
   11e7a:	d915      	bls.n	11ea8 <z_vprintk+0x104>
   11e7c:	2858      	cmp	r0, #88	; 0x58
   11e7e:	d1bc      	bne.n	11dfa <z_vprintk+0x56>
				if (*fmt == 'p') {
   11e80:	f89a 3000 	ldrb.w	r3, [sl]
   11e84:	2b70      	cmp	r3, #112	; 0x70
   11e86:	d16e      	bne.n	11f66 <z_vprintk+0x1c2>
					x = va_arg(ap, unsigned int);
   11e88:	2300      	movs	r3, #0
   11e8a:	f854 2b04 	ldr.w	r2, [r4], #4
   11e8e:	e075      	b.n	11f7c <z_vprintk+0x1d8>
				if (min_width < 0 && padding == PAD_NONE) {
   11e90:	f1b8 0f00 	cmp.w	r8, #0
   11e94:	da0b      	bge.n	11eae <z_vprintk+0x10a>
   11e96:	2f00      	cmp	r7, #0
   11e98:	f000 80ac 	beq.w	11ff4 <z_vprintk+0x250>
					min_width = *fmt - '0';
   11e9c:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   11ea0:	2f00      	cmp	r7, #0
   11ea2:	bf08      	it	eq
   11ea4:	2702      	moveq	r7, #2
   11ea6:	e794      	b.n	11dd2 <z_vprintk+0x2e>
				if (min_width < 0) {
   11ea8:	f1b8 0f00 	cmp.w	r8, #0
   11eac:	dbf6      	blt.n	11e9c <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   11eae:	230a      	movs	r3, #10
   11eb0:	fb03 0808 	mla	r8, r3, r8, r0
   11eb4:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   11eb8:	e7f2      	b.n	11ea0 <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
   11eba:	2868      	cmp	r0, #104	; 0x68
   11ebc:	d103      	bne.n	11ec6 <z_vprintk+0x122>
   11ebe:	2e68      	cmp	r6, #104	; 0x68
   11ec0:	d106      	bne.n	11ed0 <z_vprintk+0x12c>
					length_mod = 'H';
   11ec2:	2648      	movs	r6, #72	; 0x48
   11ec4:	e785      	b.n	11dd2 <z_vprintk+0x2e>
				} else if (*fmt == 'l' && length_mod == 'l') {
   11ec6:	286c      	cmp	r0, #108	; 0x6c
   11ec8:	d102      	bne.n	11ed0 <z_vprintk+0x12c>
   11eca:	2e6c      	cmp	r6, #108	; 0x6c
   11ecc:	f000 8094 	beq.w	11ff8 <z_vprintk+0x254>
				} else if (length_mod == 0) {
   11ed0:	2e00      	cmp	r6, #0
   11ed2:	d192      	bne.n	11dfa <z_vprintk+0x56>
   11ed4:	4606      	mov	r6, r0
   11ed6:	e77c      	b.n	11dd2 <z_vprintk+0x2e>
				if (length_mod == 'z') {
   11ed8:	2e7a      	cmp	r6, #122	; 0x7a
   11eda:	d106      	bne.n	11eea <z_vprintk+0x146>
					d = va_arg(ap, long);
   11edc:	46a1      	mov	r9, r4
   11ede:	f859 2b04 	ldr.w	r2, [r9], #4
   11ee2:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   11ee4:	2875      	cmp	r0, #117	; 0x75
   11ee6:	d123      	bne.n	11f30 <z_vprintk+0x18c>
   11ee8:	e00f      	b.n	11f0a <z_vprintk+0x166>
				} else if (length_mod == 'l') {
   11eea:	2e6c      	cmp	r6, #108	; 0x6c
   11eec:	d0f6      	beq.n	11edc <z_vprintk+0x138>
				} else if (length_mod == 'L') {
   11eee:	2e4c      	cmp	r6, #76	; 0x4c
   11ef0:	d105      	bne.n	11efe <z_vprintk+0x15a>
					long long lld = va_arg(ap, long long);
   11ef2:	3407      	adds	r4, #7
   11ef4:	f024 0907 	bic.w	r9, r4, #7
					d = (printk_val_t) lld;
   11ef8:	e8f9 2302 	ldrd	r2, r3, [r9], #8
   11efc:	e7f2      	b.n	11ee4 <z_vprintk+0x140>
				} else if (*fmt == 'u') {
   11efe:	2875      	cmp	r0, #117	; 0x75
					d = va_arg(ap, unsigned int);
   11f00:	6822      	ldr	r2, [r4, #0]
   11f02:	f104 0904 	add.w	r9, r4, #4
				} else if (*fmt == 'u') {
   11f06:	d112      	bne.n	11f2e <z_vprintk+0x18a>
					d = va_arg(ap, unsigned int);
   11f08:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
   11f0a:	1ef8      	subs	r0, r7, #3
   11f0c:	bf18      	it	ne
   11f0e:	2001      	movne	r0, #1
   11f10:	2f01      	cmp	r7, #1
   11f12:	bf0c      	ite	eq
   11f14:	2430      	moveq	r4, #48	; 0x30
   11f16:	2420      	movne	r4, #32
   11f18:	9001      	str	r0, [sp, #4]
   11f1a:	200a      	movs	r0, #10
   11f1c:	e9cd 4802 	strd	r4, r8, [sp, #8]
   11f20:	9000      	str	r0, [sp, #0]
   11f22:	4659      	mov	r1, fp
   11f24:	4628      	mov	r0, r5
   11f26:	f7ff fee1 	bl	11cec <print_digits>
}
   11f2a:	464c      	mov	r4, r9
   11f2c:	e746      	b.n	11dbc <z_vprintk+0x18>
					d = va_arg(ap, int);
   11f2e:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   11f30:	2a00      	cmp	r2, #0
   11f32:	f173 0100 	sbcs.w	r1, r3, #0
   11f36:	dae8      	bge.n	11f0a <z_vprintk+0x166>
					out((int)'-', ctx);
   11f38:	4659      	mov	r1, fp
   11f3a:	202d      	movs	r0, #45	; 0x2d
   11f3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   11f40:	47a8      	blx	r5
					d = -d;
   11f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11f46:	4252      	negs	r2, r2
   11f48:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
   11f4c:	f108 38ff 	add.w	r8, r8, #4294967295
   11f50:	e7db      	b.n	11f0a <z_vprintk+0x166>
				out('0', ctx);
   11f52:	4659      	mov	r1, fp
   11f54:	2030      	movs	r0, #48	; 0x30
   11f56:	47a8      	blx	r5
				out('x', ctx);
   11f58:	4659      	mov	r1, fp
   11f5a:	2078      	movs	r0, #120	; 0x78
   11f5c:	47a8      	blx	r5
				min_width = sizeof(void *) * 2;
   11f5e:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
   11f62:	2701      	movs	r7, #1
   11f64:	e78c      	b.n	11e80 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
   11f66:	2e6c      	cmp	r6, #108	; 0x6c
   11f68:	d08e      	beq.n	11e88 <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
   11f6a:	2e4c      	cmp	r6, #76	; 0x4c
   11f6c:	d18c      	bne.n	11e88 <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
   11f6e:	1de3      	adds	r3, r4, #7
   11f70:	f023 0307 	bic.w	r3, r3, #7
   11f74:	461c      	mov	r4, r3
   11f76:	685b      	ldr	r3, [r3, #4]
   11f78:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
   11f7c:	1ef8      	subs	r0, r7, #3
   11f7e:	bf18      	it	ne
   11f80:	2001      	movne	r0, #1
   11f82:	2f01      	cmp	r7, #1
   11f84:	bf0c      	ite	eq
   11f86:	2130      	moveq	r1, #48	; 0x30
   11f88:	2120      	movne	r1, #32
   11f8a:	e9cd 1802 	strd	r1, r8, [sp, #8]
   11f8e:	2110      	movs	r1, #16
   11f90:	9001      	str	r0, [sp, #4]
   11f92:	9100      	str	r1, [sp, #0]
   11f94:	4628      	mov	r0, r5
   11f96:	4659      	mov	r1, fp
   11f98:	f7ff fea8 	bl	11cec <print_digits>
   11f9c:	e70e      	b.n	11dbc <z_vprintk+0x18>
				char *s = va_arg(ap, char *);
   11f9e:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
   11fa2:	4699      	mov	r9, r3
   11fa4:	464a      	mov	r2, r9
   11fa6:	f819 0b01 	ldrb.w	r0, [r9], #1
   11faa:	b978      	cbnz	r0, 11fcc <z_vprintk+0x228>
				if (padding == PAD_SPACE_AFTER) {
   11fac:	2f03      	cmp	r7, #3
   11fae:	d125      	bne.n	11ffc <z_vprintk+0x258>
					int remaining = min_width - (s - start);
   11fb0:	eba2 0903 	sub.w	r9, r2, r3
   11fb4:	eba8 0909 	sub.w	r9, r8, r9
					while (remaining-- > 0) {
   11fb8:	f1b9 0f00 	cmp.w	r9, #0
   11fbc:	f77f aefe 	ble.w	11dbc <z_vprintk+0x18>
						out(' ', ctx);
   11fc0:	4659      	mov	r1, fp
   11fc2:	2020      	movs	r0, #32
   11fc4:	47a8      	blx	r5
   11fc6:	f109 39ff 	add.w	r9, r9, #4294967295
   11fca:	e7f5      	b.n	11fb8 <z_vprintk+0x214>
					out((int)(*s++), ctx);
   11fcc:	4659      	mov	r1, fp
   11fce:	9304      	str	r3, [sp, #16]
   11fd0:	47a8      	blx	r5
   11fd2:	9b04      	ldr	r3, [sp, #16]
   11fd4:	e7e6      	b.n	11fa4 <z_vprintk+0x200>
				out(c, ctx);
   11fd6:	4659      	mov	r1, fp
   11fd8:	f854 0b04 	ldr.w	r0, [r4], #4
   11fdc:	e713      	b.n	11e06 <z_vprintk+0x62>
				out((int)'%', ctx);
   11fde:	4659      	mov	r1, fp
   11fe0:	e711      	b.n	11e06 <z_vprintk+0x62>
				length_mod = 0;
   11fe2:	464e      	mov	r6, r9
				padding = PAD_NONE;
   11fe4:	464f      	mov	r7, r9
				min_width = -1;
   11fe6:	f04f 38ff 	mov.w	r8, #4294967295
				might_format = 1;
   11fea:	f04f 0901 	mov.w	r9, #1
   11fee:	e6f0      	b.n	11dd2 <z_vprintk+0x2e>
			switch (*fmt) {
   11ff0:	2703      	movs	r7, #3
   11ff2:	e6ee      	b.n	11dd2 <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
   11ff4:	2701      	movs	r7, #1
   11ff6:	e6ec      	b.n	11dd2 <z_vprintk+0x2e>
					length_mod = 'L';
   11ff8:	264c      	movs	r6, #76	; 0x4c
   11ffa:	e6ea      	b.n	11dd2 <z_vprintk+0x2e>
			might_format = 0;
   11ffc:	4681      	mov	r9, r0
   11ffe:	e6e8      	b.n	11dd2 <z_vprintk+0x2e>

00012000 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   12000:	b507      	push	{r0, r1, r2, lr}
   12002:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   12004:	2100      	movs	r1, #0
{
   12006:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   12008:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
   1200a:	4803      	ldr	r0, [pc, #12]	; (12018 <vprintk+0x18>)
   1200c:	a901      	add	r1, sp, #4
   1200e:	f7ff fec9 	bl	11da4 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   12012:	b003      	add	sp, #12
   12014:	f85d fb04 	ldr.w	pc, [sp], #4
   12018:	00011d89 	.word	0x00011d89

0001201c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   1201c:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   1201e:	2500      	movs	r5, #0
{
   12020:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   12022:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   12026:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   12028:	a901      	add	r1, sp, #4
   1202a:	4805      	ldr	r0, [pc, #20]	; (12040 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   1202c:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   1202e:	f7ff feb9 	bl	11da4 <z_vprintk>

	if (ctx.count < ctx.max) {
   12032:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   12036:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   12038:	bfb8      	it	lt
   1203a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   1203c:	b005      	add	sp, #20
   1203e:	bd30      	pop	{r4, r5, pc}
   12040:	00028397 	.word	0x00028397

00012044 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12048:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
   1204c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   1204e:	f019 0808 	ands.w	r8, r9, #8
{
   12052:	4693      	mov	fp, r2
	if (processing) {
   12054:	d00e      	beq.n	12074 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
   12056:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12058:	bf0c      	ite	eq
   1205a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   1205e:	f049 0920 	orrne.w	r9, r9, #32
   12062:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   12066:	f38b 8811 	msr	BASEPRI, fp
   1206a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   1206e:	b003      	add	sp, #12
   12070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
   12074:	f8df a190 	ldr.w	sl, [pc, #400]	; 12208 <process_event+0x1c4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12078:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   1207c:	2902      	cmp	r1, #2
   1207e:	d107      	bne.n	12090 <process_event+0x4c>
			evt = process_recheck(mgr);
   12080:	4620      	mov	r0, r4
   12082:	f016 f9b5 	bl	283f0 <process_recheck>
		if (evt == EVT_NOP) {
   12086:	2800      	cmp	r0, #0
   12088:	d0ed      	beq.n	12066 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   1208a:	2801      	cmp	r0, #1
   1208c:	8b23      	ldrh	r3, [r4, #24]
   1208e:	d14b      	bne.n	12128 <process_event+0xe4>
			res = mgr->last_res;
   12090:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12092:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   12094:	2f00      	cmp	r7, #0
   12096:	da15      	bge.n	120c4 <process_event+0x80>
		*clients = mgr->clients;
   12098:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1209a:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   1209e:	e9c4 8800 	strd	r8, r8, [r4]
   120a2:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   120a6:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   120a8:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   120aa:	8b21      	ldrh	r1, [r4, #24]
   120ac:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   120b0:	454a      	cmp	r2, r9
   120b2:	d002      	beq.n	120ba <process_event+0x76>
		if (do_monitors
   120b4:	68a3      	ldr	r3, [r4, #8]
   120b6:	2b00      	cmp	r3, #0
   120b8:	d157      	bne.n	1216a <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
   120ba:	b90d      	cbnz	r5, 120c0 <process_event+0x7c>
		    || (transit != NULL)) {
   120bc:	2e00      	cmp	r6, #0
   120be:	d06f      	beq.n	121a0 <process_event+0x15c>
   120c0:	2300      	movs	r3, #0
   120c2:	e053      	b.n	1216c <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   120c4:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   120c8:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   120ca:	2a01      	cmp	r2, #1
   120cc:	d81d      	bhi.n	1210a <process_event+0xc6>
		*clients = mgr->clients;
   120ce:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   120d2:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   120d4:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   120d6:	b289      	uxth	r1, r1
	list->tail = NULL;
   120d8:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   120dc:	d10a      	bne.n	120f4 <process_event+0xb0>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   120de:	b13d      	cbz	r5, 120f0 <process_event+0xac>
   120e0:	462a      	mov	r2, r5
   120e2:	8b63      	ldrh	r3, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   120e4:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
   120e6:	3301      	adds	r3, #1
   120e8:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   120ea:	2a00      	cmp	r2, #0
   120ec:	d1fa      	bne.n	120e4 <process_event+0xa0>
   120ee:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   120f0:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   120f4:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   120f6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   120f8:	f016 f97a 	bl	283f0 <process_recheck>
   120fc:	2800      	cmp	r0, #0
   120fe:	d0d3      	beq.n	120a8 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12100:	8b23      	ldrh	r3, [r4, #24]
   12102:	f043 0320 	orr.w	r3, r3, #32
   12106:	8323      	strh	r3, [r4, #24]
   12108:	e7ce      	b.n	120a8 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1210a:	2b04      	cmp	r3, #4
   1210c:	d10a      	bne.n	12124 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1210e:	f021 0107 	bic.w	r1, r1, #7
   12112:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   12114:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   12116:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   12118:	f016 f96a 	bl	283f0 <process_recheck>
   1211c:	b110      	cbz	r0, 12124 <process_event+0xe0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1211e:	f041 0120 	orr.w	r1, r1, #32
   12122:	8321      	strh	r1, [r4, #24]
   12124:	2500      	movs	r5, #0
   12126:	e7bf      	b.n	120a8 <process_event+0x64>
		} else if (evt == EVT_START) {
   12128:	2803      	cmp	r0, #3
   1212a:	d109      	bne.n	12140 <process_event+0xfc>
			transit = mgr->transitions->start;
   1212c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1212e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   12132:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12134:	f043 0306 	orr.w	r3, r3, #6
}
   12138:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   1213a:	8323      	strh	r3, [r4, #24]
		res = 0;
   1213c:	462f      	mov	r7, r5
   1213e:	e7b4      	b.n	120aa <process_event+0x66>
		} else if (evt == EVT_STOP) {
   12140:	2804      	cmp	r0, #4
   12142:	d106      	bne.n	12152 <process_event+0x10e>
			transit = mgr->transitions->stop;
   12144:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12146:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   1214a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1214c:	f043 0304 	orr.w	r3, r3, #4
   12150:	e7f2      	b.n	12138 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
   12152:	2805      	cmp	r0, #5
   12154:	d106      	bne.n	12164 <process_event+0x120>
			transit = mgr->transitions->reset;
   12156:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12158:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   1215c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1215e:	f043 0305 	orr.w	r3, r3, #5
   12162:	e7e9      	b.n	12138 <process_event+0xf4>
   12164:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   12166:	462e      	mov	r6, r5
   12168:	e7e8      	b.n	1213c <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
   1216a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1216c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   12170:	8321      	strh	r1, [r4, #24]
   12172:	f38b 8811 	msr	BASEPRI, fp
   12176:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1217a:	bb03      	cbnz	r3, 121be <process_event+0x17a>
	while (!sys_slist_is_empty(list)) {
   1217c:	2d00      	cmp	r5, #0
   1217e:	d131      	bne.n	121e4 <process_event+0x1a0>
			if (transit != NULL) {
   12180:	b116      	cbz	r6, 12188 <process_event+0x144>
				transit(mgr, transition_complete);
   12182:	4651      	mov	r1, sl
   12184:	4620      	mov	r0, r4
   12186:	47b0      	blx	r6
	__asm__ volatile(
   12188:	f04f 0320 	mov.w	r3, #32
   1218c:	f3ef 8b11 	mrs	fp, BASEPRI
   12190:	f383 8811 	msr	BASEPRI, r3
   12194:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   12198:	8b23      	ldrh	r3, [r4, #24]
   1219a:	f023 0308 	bic.w	r3, r3, #8
   1219e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   121a0:	8b23      	ldrh	r3, [r4, #24]
   121a2:	06da      	lsls	r2, r3, #27
   121a4:	d527      	bpl.n	121f6 <process_event+0x1b2>
			evt = EVT_COMPLETE;
   121a6:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   121a8:	f023 0310 	bic.w	r3, r3, #16
   121ac:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   121ae:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   121b2:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   121b6:	2900      	cmp	r1, #0
   121b8:	f47f af60 	bne.w	1207c <process_event+0x38>
out:
   121bc:	e753      	b.n	12066 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   121be:	68a1      	ldr	r1, [r4, #8]
   121c0:	2900      	cmp	r1, #0
   121c2:	d0db      	beq.n	1217c <process_event+0x138>
   121c4:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   121c8:	463b      	mov	r3, r7
   121ca:	4620      	mov	r0, r4
   121cc:	f8d1 b004 	ldr.w	fp, [r1, #4]
   121d0:	9201      	str	r2, [sp, #4]
   121d2:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   121d4:	9a01      	ldr	r2, [sp, #4]
   121d6:	f1b9 0f00 	cmp.w	r9, #0
   121da:	d0cf      	beq.n	1217c <process_event+0x138>
   121dc:	4649      	mov	r1, r9
   121de:	f8d9 9000 	ldr.w	r9, [r9]
   121e2:	e7f1      	b.n	121c8 <process_event+0x184>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   121e4:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   121e6:	463b      	mov	r3, r7
   121e8:	4620      	mov	r0, r4
   121ea:	9201      	str	r2, [sp, #4]
   121ec:	682d      	ldr	r5, [r5, #0]
   121ee:	f016 f91b 	bl	28428 <notify_one>
	while (!sys_slist_is_empty(list)) {
   121f2:	9a01      	ldr	r2, [sp, #4]
   121f4:	e7c2      	b.n	1217c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   121f6:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   121fa:	bf1e      	ittt	ne
   121fc:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   12200:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   12202:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   12204:	e7d3      	b.n	121ae <process_event+0x16a>
   12206:	bf00      	nop
   12208:	00028455 	.word	0x00028455

0001220c <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   1220c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
   12210:	f240 746c 	movw	r4, #1900	; 0x76c
   12214:	2500      	movs	r5, #0
	unsigned int m = tm->tm_mon + 1;
   12216:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   12218:	68c2      	ldr	r2, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   1221a:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
   1221e:	1e53      	subs	r3, r2, #1
   12220:	9301      	str	r3, [sp, #4]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   12222:	6943      	ldr	r3, [r0, #20]
{
   12224:	4680      	mov	r8, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
   12226:	18e4      	adds	r4, r4, r3
   12228:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
   1222c:	f1b9 0f02 	cmp.w	r9, #2
   12230:	bf8c      	ite	hi
   12232:	2300      	movhi	r3, #0
   12234:	2301      	movls	r3, #1
   12236:	1ae4      	subs	r4, r4, r3
   12238:	f165 0500 	sbc.w	r5, r5, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   1223c:	2c00      	cmp	r4, #0
   1223e:	f175 0300 	sbcs.w	r3, r5, #0
   12242:	da54      	bge.n	122ee <timeutil_timegm64+0xe2>
   12244:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   12248:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1224c:	2300      	movs	r3, #0
   1224e:	1820      	adds	r0, r4, r0
   12250:	f145 31ff 	adc.w	r1, r5, #4294967295
   12254:	f7fa fab0 	bl	c7b8 <__aeabi_ldivmod>
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   12258:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   1225c:	4a27      	ldr	r2, [pc, #156]	; (122fc <timeutil_timegm64+0xf0>)
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   1225e:	4603      	mov	r3, r0
	unsigned int yoe = y - era * 400;
   12260:	fb02 4200 	mla	r2, r2, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   12264:	e9d8 0400 	ldrd	r0, r4, [r8]
   12268:	f8d8 8008 	ldr.w	r8, [r8, #8]
   1226c:	17e5      	asrs	r5, r4, #31
   1226e:	fbcc 4508 	smlal	r4, r5, ip, r8
   12272:	fba4 ab0c 	umull	sl, fp, r4, ip
   12276:	fb0c bb05 	mla	fp, ip, r5, fp
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1227a:	f1b9 0f02 	cmp.w	r9, #2
   1227e:	bf8c      	ite	hi
   12280:	f06f 0e02 	mvnhi.w	lr, #2
   12284:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   12288:	eb1a 0a00 	adds.w	sl, sl, r0
   1228c:	eb4b 7be0 	adc.w	fp, fp, r0, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   12290:	f240 106d 	movw	r0, #365	; 0x16d
   12294:	0894      	lsrs	r4, r2, #2
   12296:	fb00 4002 	mla	r0, r0, r2, r4
   1229a:	9c01      	ldr	r4, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1229c:	44f1      	add	r9, lr
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1229e:	4420      	add	r0, r4
   122a0:	2464      	movs	r4, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   122a2:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   122a6:	fbb2 f4f4 	udiv	r4, r2, r4
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   122aa:	2205      	movs	r2, #5
   122ac:	fb0e fe09 	mul.w	lr, lr, r9
   122b0:	f10e 0e02 	add.w	lr, lr, #2
   122b4:	fbbe fef2 	udiv	lr, lr, r2
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   122b8:	1b04      	subs	r4, r0, r4
	return era * 146097 + (time_t)doe - 719468;
   122ba:	4811      	ldr	r0, [pc, #68]	; (12300 <timeutil_timegm64+0xf4>)
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   122bc:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   122be:	fba3 2300 	umull	r2, r3, r3, r0
   122c2:	fb00 3301 	mla	r3, r0, r1, r3
   122c6:	490f      	ldr	r1, [pc, #60]	; (12304 <timeutil_timegm64+0xf8>)
   122c8:	1856      	adds	r6, r2, r1
	time += 86400LL * ndays;
   122ca:	490f      	ldr	r1, [pc, #60]	; (12308 <timeutil_timegm64+0xfc>)
	return era * 146097 + (time_t)doe - 719468;
   122cc:	f143 37ff 	adc.w	r7, r3, #4294967295
   122d0:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   122d4:	fba6 2301 	umull	r2, r3, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   122d8:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   122dc:	fb01 3307 	mla	r3, r1, r7, r3

	return time;
}
   122e0:	eb12 000a 	adds.w	r0, r2, sl
   122e4:	eb43 010b 	adc.w	r1, r3, fp
   122e8:	b003      	add	sp, #12
   122ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   122ee:	f44f 72c8 	mov.w	r2, #400	; 0x190
   122f2:	2300      	movs	r3, #0
   122f4:	4620      	mov	r0, r4
   122f6:	4629      	mov	r1, r5
   122f8:	e7ac      	b.n	12254 <timeutil_timegm64+0x48>
   122fa:	bf00      	nop
   122fc:	fffffe70 	.word	0xfffffe70
   12300:	00023ab1 	.word	0x00023ab1
   12304:	fff50594 	.word	0xfff50594
   12308:	00015180 	.word	0x00015180

0001230c <nordicsemi_nrf91_init>:
   1230c:	f04f 0220 	mov.w	r2, #32
   12310:	f3ef 8311 	mrs	r3, BASEPRI
   12314:	f382 8811 	msr	BASEPRI, r2
   12318:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1231c:	2101      	movs	r1, #1
   1231e:	4a04      	ldr	r2, [pc, #16]	; (12330 <nordicsemi_nrf91_init+0x24>)
   12320:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   12324:	f383 8811 	msr	BASEPRI, r3
   12328:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1232c:	2000      	movs	r0, #0
   1232e:	4770      	bx	lr
   12330:	40039000 	.word	0x40039000

00012334 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   12334:	b120      	cbz	r0, 12340 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   12336:	4b03      	ldr	r3, [pc, #12]	; (12344 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   12338:	0180      	lsls	r0, r0, #6
   1233a:	f043 0301 	orr.w	r3, r3, #1
   1233e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   12340:	4770      	bx	lr
   12342:	bf00      	nop
   12344:	0002b8a0 	.word	0x0002b8a0

00012348 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   12348:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   1234a:	2200      	movs	r2, #0
{
   1234c:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   1234e:	490f      	ldr	r1, [pc, #60]	; (1238c <enable_logger+0x44>)
   12350:	480f      	ldr	r0, [pc, #60]	; (12390 <enable_logger+0x48>)
   12352:	f018 ff60 	bl	2b216 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12356:	2200      	movs	r2, #0
   12358:	2300      	movs	r3, #0
   1235a:	2400      	movs	r4, #0
   1235c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12360:	230e      	movs	r3, #14
   12362:	4d0c      	ldr	r5, [pc, #48]	; (12394 <enable_logger+0x4c>)
   12364:	e9cd 3403 	strd	r3, r4, [sp, #12]
   12368:	f44f 7240 	mov.w	r2, #768	; 0x300
   1236c:	4628      	mov	r0, r5
   1236e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12372:	4b09      	ldr	r3, [pc, #36]	; (12398 <enable_logger+0x50>)
   12374:	4909      	ldr	r1, [pc, #36]	; (1239c <enable_logger+0x54>)
   12376:	9400      	str	r4, [sp, #0]
   12378:	f00f f874 	bl	21464 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1237c:	4908      	ldr	r1, [pc, #32]	; (123a0 <enable_logger+0x58>)
   1237e:	4628      	mov	r0, r5
   12380:	f018 fe70 	bl	2b064 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   12384:	4620      	mov	r0, r4
   12386:	b009      	add	sp, #36	; 0x24
   12388:	bd30      	pop	{r4, r5, pc}
   1238a:	bf00      	nop
   1238c:	000123a5 	.word	0x000123a5
   12390:	20020da8 	.word	0x20020da8
   12394:	20020de0 	.word	0x20020de0
   12398:	000127f9 	.word	0x000127f9
   1239c:	200261b0 	.word	0x200261b0
   123a0:	0002ca81 	.word	0x0002ca81

000123a4 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   123a4:	4801      	ldr	r0, [pc, #4]	; (123ac <log_process_thread_timer_expiry_fn+0x8>)
   123a6:	f00e bfc5 	b.w	21334 <z_impl_k_sem_give>
   123aa:	bf00      	nop
   123ac:	20020c48 	.word	0x20020c48

000123b0 <z_log_get_s_mask>:
{
   123b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   123b2:	4605      	mov	r5, r0
	uint32_t mask = 0;
   123b4:	2000      	movs	r0, #0
				mask |= BIT(arg);
   123b6:	2701      	movs	r7, #1
	uint32_t arg = 0;
   123b8:	4603      	mov	r3, r0
	bool arm = false;
   123ba:	4602      	mov	r2, r0
		} else if (arm && isalpha((int)curr)) {
   123bc:	4e0d      	ldr	r6, [pc, #52]	; (123f4 <z_log_get_s_mask+0x44>)
	while ((curr = *str++) && arg < nargs) {
   123be:	f815 4b01 	ldrb.w	r4, [r5], #1
   123c2:	b10c      	cbz	r4, 123c8 <z_log_get_s_mask+0x18>
   123c4:	428b      	cmp	r3, r1
   123c6:	d300      	bcc.n	123ca <z_log_get_s_mask+0x1a>
}
   123c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   123ca:	2c25      	cmp	r4, #37	; 0x25
   123cc:	d102      	bne.n	123d4 <z_log_get_s_mask+0x24>
			arm = !arm;
   123ce:	f082 0201 	eor.w	r2, r2, #1
   123d2:	e7f4      	b.n	123be <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
   123d4:	2a00      	cmp	r2, #0
   123d6:	d0f2      	beq.n	123be <z_log_get_s_mask+0xe>
   123d8:	f814 c006 	ldrb.w	ip, [r4, r6]
   123dc:	f01c 0f03 	tst.w	ip, #3
   123e0:	d0ed      	beq.n	123be <z_log_get_s_mask+0xe>
			if (curr == 's') {
   123e2:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   123e4:	bf04      	itt	eq
   123e6:	fa07 f203 	lsleq.w	r2, r7, r3
   123ea:	4310      	orreq	r0, r2
			arg++;
   123ec:	3301      	adds	r3, #1
			arm = false;
   123ee:	2200      	movs	r2, #0
   123f0:	e7e5      	b.n	123be <z_log_get_s_mask+0xe>
   123f2:	bf00      	nop
   123f4:	0002bfa1 	.word	0x0002bfa1

000123f8 <log_core_init>:
{
   123f8:	b508      	push	{r3, lr}
		log_msg_pool_init();
   123fa:	f000 fa5b 	bl	128b4 <log_msg_pool_init>
		log_list_init(&list);
   123fe:	4809      	ldr	r0, [pc, #36]	; (12424 <log_core_init+0x2c>)
   12400:	f016 fb17 	bl	28a32 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   12404:	2304      	movs	r3, #4
   12406:	2234      	movs	r2, #52	; 0x34
   12408:	4907      	ldr	r1, [pc, #28]	; (12428 <log_core_init+0x30>)
   1240a:	4808      	ldr	r0, [pc, #32]	; (1242c <log_core_init+0x34>)
   1240c:	f018 fc7f 	bl	2ad0e <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
   12410:	4b07      	ldr	r3, [pc, #28]	; (12430 <log_core_init+0x38>)
   12412:	4a08      	ldr	r2, [pc, #32]	; (12434 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
   12414:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   12418:	601a      	str	r2, [r3, #0]
}
   1241a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
   1241e:	f000 bc95 	b.w	12d4c <log_output_timestamp_freq_set>
   12422:	bf00      	nop
   12424:	200214d4 	.word	0x200214d4
   12428:	20028df0 	.word	0x20028df0
   1242c:	200214dc 	.word	0x200214dc
   12430:	20020430 	.word	0x20020430
   12434:	00028a71 	.word	0x00028a71

00012438 <dropped_notify>:
{
   12438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1243a:	2500      	movs	r5, #0
   1243c:	4b0c      	ldr	r3, [pc, #48]	; (12470 <dropped_notify+0x38>)
   1243e:	e8d3 7fef 	ldaex	r7, [r3]
   12442:	e8c3 5fe2 	stlex	r2, r5, [r3]
   12446:	2a00      	cmp	r2, #0
   12448:	d1f9      	bne.n	1243e <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   1244a:	4c0a      	ldr	r4, [pc, #40]	; (12474 <dropped_notify+0x3c>)
   1244c:	4e0a      	ldr	r6, [pc, #40]	; (12478 <dropped_notify+0x40>)
   1244e:	1b36      	subs	r6, r6, r4
   12450:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   12452:	42b5      	cmp	r5, r6
   12454:	db00      	blt.n	12458 <dropped_notify+0x20>
}
   12456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   12458:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1245a:	795b      	ldrb	r3, [r3, #5]
   1245c:	b12b      	cbz	r3, 1246a <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
   1245e:	6823      	ldr	r3, [r4, #0]
   12460:	68db      	ldr	r3, [r3, #12]
   12462:	b113      	cbz	r3, 1246a <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
   12464:	4639      	mov	r1, r7
   12466:	4620      	mov	r0, r4
   12468:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   1246a:	3501      	adds	r5, #1
   1246c:	3410      	adds	r4, #16
   1246e:	e7f0      	b.n	12452 <dropped_notify+0x1a>
   12470:	200214cc 	.word	0x200214cc
   12474:	0002b838 	.word	0x0002b838
   12478:	0002b848 	.word	0x0002b848

0001247c <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1247c:	4b04      	ldr	r3, [pc, #16]	; (12490 <log_dropped+0x14>)
   1247e:	e8d3 2fef 	ldaex	r2, [r3]
   12482:	3201      	adds	r2, #1
   12484:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12488:	2900      	cmp	r1, #0
   1248a:	d1f8      	bne.n	1247e <log_dropped+0x2>
}
   1248c:	4770      	bx	lr
   1248e:	bf00      	nop
   12490:	200214cc 	.word	0x200214cc

00012494 <log_source_name_get>:
   12494:	4a04      	ldr	r2, [pc, #16]	; (124a8 <log_source_name_get+0x14>)
   12496:	4b05      	ldr	r3, [pc, #20]	; (124ac <log_source_name_get+0x18>)
   12498:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   1249a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   1249e:	bf34      	ite	cc
   124a0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   124a4:	2000      	movcs	r0, #0
}
   124a6:	4770      	bx	lr
   124a8:	0002b7b8 	.word	0x0002b7b8
   124ac:	0002b838 	.word	0x0002b838

000124b0 <log_backend_enable>:
	id += backend - log_backend_get(0);
   124b0:	4b09      	ldr	r3, [pc, #36]	; (124d8 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
   124b2:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
   124b4:	1ac3      	subs	r3, r0, r3
   124b6:	111b      	asrs	r3, r3, #4
   124b8:	3301      	adds	r3, #1
{
   124ba:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
   124bc:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
   124be:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
   124c0:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
   124c2:	4c06      	ldr	r4, [pc, #24]	; (124dc <log_backend_enable+0x2c>)
   124c4:	715a      	strb	r2, [r3, #5]
   124c6:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   124c8:	6019      	str	r1, [r3, #0]
   124ca:	b912      	cbnz	r2, 124d2 <log_backend_enable+0x22>
   124cc:	4804      	ldr	r0, [pc, #16]	; (124e0 <log_backend_enable+0x30>)
   124ce:	f00e ff31 	bl	21334 <z_impl_k_sem_give>
	backend_attached = true;
   124d2:	2301      	movs	r3, #1
   124d4:	7023      	strb	r3, [r4, #0]
}
   124d6:	bd10      	pop	{r4, pc}
   124d8:	0002b838 	.word	0x0002b838
   124dc:	200234b3 	.word	0x200234b3
   124e0:	20020c48 	.word	0x20020c48

000124e4 <log_init>:
{
   124e4:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
   124e6:	4b14      	ldr	r3, [pc, #80]	; (12538 <log_init+0x54>)
   124e8:	4c14      	ldr	r4, [pc, #80]	; (1253c <log_init+0x58>)
   124ea:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   124ec:	2b9f      	cmp	r3, #159	; 0x9f
   124ee:	ea4f 1623 	mov.w	r6, r3, asr #4
   124f2:	d906      	bls.n	12502 <log_init+0x1e>
   124f4:	f240 210b 	movw	r1, #523	; 0x20b
   124f8:	4b11      	ldr	r3, [pc, #68]	; (12540 <log_init+0x5c>)
   124fa:	4a12      	ldr	r2, [pc, #72]	; (12544 <log_init+0x60>)
   124fc:	4812      	ldr	r0, [pc, #72]	; (12548 <log_init+0x64>)
   124fe:	f00f fb25 	bl	21b4c <__assert_func>
   12502:	4b12      	ldr	r3, [pc, #72]	; (1254c <log_init+0x68>)
   12504:	e8d3 5fef 	ldaex	r5, [r3]
   12508:	1c6a      	adds	r2, r5, #1
   1250a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1250e:	2900      	cmp	r1, #0
   12510:	d1f8      	bne.n	12504 <log_init+0x20>
	if (atomic_inc(&initialized) != 0) {
   12512:	b90d      	cbnz	r5, 12518 <log_init+0x34>
	for (i = 0; i < log_backend_count_get(); i++) {
   12514:	42b5      	cmp	r5, r6
   12516:	d100      	bne.n	1251a <log_init+0x36>
}
   12518:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   1251a:	7b23      	ldrb	r3, [r4, #12]
   1251c:	b143      	cbz	r3, 12530 <log_init+0x4c>
			if (backend->api->init != NULL) {
   1251e:	6823      	ldr	r3, [r4, #0]
   12520:	695b      	ldr	r3, [r3, #20]
   12522:	b103      	cbz	r3, 12526 <log_init+0x42>
				backend->api->init();
   12524:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   12526:	2204      	movs	r2, #4
   12528:	2100      	movs	r1, #0
   1252a:	4620      	mov	r0, r4
   1252c:	f7ff ffc0 	bl	124b0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   12530:	3501      	adds	r5, #1
   12532:	3410      	adds	r4, #16
   12534:	e7ee      	b.n	12514 <log_init+0x30>
   12536:	bf00      	nop
   12538:	0002b848 	.word	0x0002b848
   1253c:	0002b838 	.word	0x0002b838
   12540:	0002cab6 	.word	0x0002cab6
   12544:	0002cb46 	.word	0x0002cb46
   12548:	0002ca89 	.word	0x0002ca89
   1254c:	200214d0 	.word	0x200214d0

00012550 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   12550:	4b15      	ldr	r3, [pc, #84]	; (125a8 <log_strdup+0x58>)
{
   12552:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   12554:	4298      	cmp	r0, r3
{
   12556:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   12558:	d302      	bcc.n	12560 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   1255a:	4b14      	ldr	r3, [pc, #80]	; (125ac <log_strdup+0x5c>)
   1255c:	4298      	cmp	r0, r3
   1255e:	d31d      	bcc.n	1259c <log_strdup+0x4c>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   12560:	2200      	movs	r2, #0
   12562:	2300      	movs	r3, #0
   12564:	4812      	ldr	r0, [pc, #72]	; (125b0 <log_strdup+0x60>)
   12566:	a901      	add	r1, sp, #4
   12568:	f00e f98e 	bl	20888 <k_mem_slab_alloc>
	if (err != 0) {
   1256c:	4605      	mov	r5, r0
   1256e:	b9c0      	cbnz	r0, 125a2 <log_strdup+0x52>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12570:	2201      	movs	r2, #1
   12572:	9b01      	ldr	r3, [sp, #4]
   12574:	e8d3 1fef 	ldaex	r1, [r3]
   12578:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1257c:	2800      	cmp	r0, #0
   1257e:	d1f9      	bne.n	12574 <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   12580:	9e01      	ldr	r6, [sp, #4]
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   12582:	222d      	movs	r2, #45	; 0x2d
   12584:	1d33      	adds	r3, r6, #4
   12586:	4618      	mov	r0, r3
   12588:	4621      	mov	r1, r4
   1258a:	f010 fad7 	bl	22b3c <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   1258e:	227e      	movs	r2, #126	; 0x7e
   12590:	4603      	mov	r3, r0
   12592:	f886 2031 	strb.w	r2, [r6, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   12596:	f886 5032 	strb.w	r5, [r6, #50]	; 0x32
	return dup->buf;
   1259a:	461c      	mov	r4, r3
}
   1259c:	4620      	mov	r0, r4
   1259e:	b002      	add	sp, #8
   125a0:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
   125a2:	4b04      	ldr	r3, [pc, #16]	; (125b4 <log_strdup+0x64>)
   125a4:	e7f9      	b.n	1259a <log_strdup+0x4a>
   125a6:	bf00      	nop
   125a8:	0002b4fc 	.word	0x0002b4fc
   125ac:	0002e178 	.word	0x0002e178
   125b0:	200214dc 	.word	0x200214dc
   125b4:	0002cae9 	.word	0x0002cae9

000125b8 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   125b8:	b148      	cbz	r0, 125ce <log_is_strdup+0x16>
   125ba:	4b05      	ldr	r3, [pc, #20]	; (125d0 <log_is_strdup+0x18>)
   125bc:	4298      	cmp	r0, r3
   125be:	d305      	bcc.n	125cc <log_is_strdup+0x14>
   125c0:	33d0      	adds	r3, #208	; 0xd0
   125c2:	4298      	cmp	r0, r3
   125c4:	bf2c      	ite	cs
   125c6:	2000      	movcs	r0, #0
   125c8:	2001      	movcc	r0, #1
   125ca:	4770      	bx	lr
   125cc:	2000      	movs	r0, #0
}
   125ce:	4770      	bx	lr
   125d0:	20028df0 	.word	0x20028df0

000125d4 <z_impl_log_process>:
{
   125d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   125d8:	4b4a      	ldr	r3, [pc, #296]	; (12704 <z_impl_log_process+0x130>)
{
   125da:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   125dc:	781b      	ldrb	r3, [r3, #0]
{
   125de:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
   125e0:	b903      	cbnz	r3, 125e4 <z_impl_log_process+0x10>
   125e2:	b340      	cbz	r0, 12636 <z_impl_log_process+0x62>
	__asm__ volatile(
   125e4:	f04f 0320 	mov.w	r3, #32
   125e8:	f3ef 8611 	mrs	r6, BASEPRI
   125ec:	f383 8811 	msr	BASEPRI, r3
   125f0:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
   125f4:	4844      	ldr	r0, [pc, #272]	; (12708 <z_impl_log_process+0x134>)
   125f6:	f016 fa2c 	bl	28a52 <log_list_head_get>
   125fa:	4605      	mov	r5, r0
	__asm__ volatile(
   125fc:	f386 8811 	msr	BASEPRI, r6
   12600:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
   12604:	b158      	cbz	r0, 1261e <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12606:	4b41      	ldr	r3, [pc, #260]	; (1270c <z_impl_log_process+0x138>)
   12608:	e8d3 2fef 	ldaex	r2, [r3]
   1260c:	3a01      	subs	r2, #1
   1260e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12612:	2900      	cmp	r1, #0
   12614:	d1f8      	bne.n	12608 <z_impl_log_process+0x34>
	if (!bypass) {
   12616:	b194      	cbz	r4, 1263e <z_impl_log_process+0x6a>
	log_msg_put(msg);
   12618:	4628      	mov	r0, r5
   1261a:	f016 fb17 	bl	28c4c <log_msg_put>
	if (!bypass && dropped_cnt) {
   1261e:	b924      	cbnz	r4, 1262a <z_impl_log_process+0x56>
   12620:	4b3b      	ldr	r3, [pc, #236]	; (12710 <z_impl_log_process+0x13c>)
   12622:	681b      	ldr	r3, [r3, #0]
   12624:	b10b      	cbz	r3, 1262a <z_impl_log_process+0x56>
		dropped_notify();
   12626:	f7ff ff07 	bl	12438 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   1262a:	4837      	ldr	r0, [pc, #220]	; (12708 <z_impl_log_process+0x134>)
   1262c:	f016 fa0f 	bl	28a4e <log_list_head_peek>
   12630:	1e04      	subs	r4, r0, #0
   12632:	bf18      	it	ne
   12634:	2401      	movne	r4, #1
}
   12636:	4620      	mov	r0, r4
   12638:	b005      	add	sp, #20
   1263a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   1263e:	4b35      	ldr	r3, [pc, #212]	; (12714 <z_impl_log_process+0x140>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
   12640:	781b      	ldrb	r3, [r3, #0]
   12642:	b9cb      	cbnz	r3, 12678 <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12644:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   12646:	07db      	lsls	r3, r3, #31
   12648:	d416      	bmi.n	12678 <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
   1264a:	f016 fb0e 	bl	28c6a <log_msg_str_get>
   1264e:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   12650:	4628      	mov	r0, r5
   12652:	f016 fad9 	bl	28c08 <log_msg_nargs_get>
   12656:	4601      	mov	r1, r0
   12658:	4640      	mov	r0, r8
   1265a:	f7ff fea9 	bl	123b0 <z_log_get_s_mask>
   1265e:	4606      	mov	r6, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   12660:	4f2d      	ldr	r7, [pc, #180]	; (12718 <z_impl_log_process+0x144>)
   12662:	4b2e      	ldr	r3, [pc, #184]	; (1271c <z_impl_log_process+0x148>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   12664:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 12738 <z_impl_log_process+0x164>
   12668:	1bdb      	subs	r3, r3, r7
   1266a:	08db      	lsrs	r3, r3, #3
   1266c:	9303      	str	r3, [sp, #12]
   1266e:	4b2c      	ldr	r3, [pc, #176]	; (12720 <z_impl_log_process+0x14c>)
   12670:	1bdb      	subs	r3, r3, r7
   12672:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
   12676:	b936      	cbnz	r6, 12686 <z_impl_log_process+0xb2>
   12678:	4e2a      	ldr	r6, [pc, #168]	; (12724 <z_impl_log_process+0x150>)
   1267a:	4f2b      	ldr	r7, [pc, #172]	; (12728 <z_impl_log_process+0x154>)
   1267c:	f04f 0800 	mov.w	r8, #0
   12680:	1bbf      	subs	r7, r7, r6
   12682:	113f      	asrs	r7, r7, #4
   12684:	e03a      	b.n	126fc <z_impl_log_process+0x128>
		idx = 31 - __builtin_clz(mask);
   12686:	fab6 f186 	clz	r1, r6
   1268a:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   1268e:	4649      	mov	r1, r9
   12690:	4628      	mov	r0, r5
   12692:	f016 fabc 	bl	28c0e <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   12696:	4b25      	ldr	r3, [pc, #148]	; (1272c <z_impl_log_process+0x158>)
		str = (const char *)log_msg_arg_get(msg, idx);
   12698:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   1269a:	4298      	cmp	r0, r3
   1269c:	d302      	bcc.n	126a4 <z_impl_log_process+0xd0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   1269e:	4a24      	ldr	r2, [pc, #144]	; (12730 <z_impl_log_process+0x15c>)
   126a0:	4290      	cmp	r0, r2
   126a2:	d31a      	bcc.n	126da <z_impl_log_process+0x106>
   126a4:	4608      	mov	r0, r1
   126a6:	f7ff ff87 	bl	125b8 <log_is_strdup>
   126aa:	4602      	mov	r2, r0
   126ac:	b9a8      	cbnz	r0, 126da <z_impl_log_process+0x106>
   126ae:	4b21      	ldr	r3, [pc, #132]	; (12734 <z_impl_log_process+0x160>)
   126b0:	4299      	cmp	r1, r3
   126b2:	d012      	beq.n	126da <z_impl_log_process+0x106>
	return msg->hdr.ids.source_id;
   126b4:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   126b6:	9903      	ldr	r1, [sp, #12]
   126b8:	f3c3 1389 	ubfx	r3, r3, #6, #10
   126bc:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
   126be:	bf38      	it	cc
   126c0:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   126c4:	ea4f 138a 	mov.w	r3, sl, lsl #6
   126c8:	f043 0301 	orr.w	r3, r3, #1
   126cc:	f8ad 3000 	strh.w	r3, [sp]
   126d0:	4649      	mov	r1, r9
   126d2:	4643      	mov	r3, r8
   126d4:	4658      	mov	r0, fp
   126d6:	f016 fa0e 	bl	28af6 <log_3>
		mask &= ~BIT(idx);
   126da:	2301      	movs	r3, #1
   126dc:	fa03 f109 	lsl.w	r1, r3, r9
   126e0:	ea26 0601 	bic.w	r6, r6, r1
   126e4:	e7c7      	b.n	12676 <z_impl_log_process+0xa2>
	return backend->cb->active;
   126e6:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
   126e8:	795b      	ldrb	r3, [r3, #5]
   126ea:	b123      	cbz	r3, 126f6 <z_impl_log_process+0x122>
	backend->api->put(backend, msg);
   126ec:	6833      	ldr	r3, [r6, #0]
   126ee:	4629      	mov	r1, r5
   126f0:	4630      	mov	r0, r6
   126f2:	681b      	ldr	r3, [r3, #0]
   126f4:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   126f6:	f108 0801 	add.w	r8, r8, #1
   126fa:	3610      	adds	r6, #16
   126fc:	45b8      	cmp	r8, r7
   126fe:	dbf2      	blt.n	126e6 <z_impl_log_process+0x112>
   12700:	e78a      	b.n	12618 <z_impl_log_process+0x44>
   12702:	bf00      	nop
   12704:	200234b3 	.word	0x200234b3
   12708:	200214d4 	.word	0x200214d4
   1270c:	200214c8 	.word	0x200214c8
   12710:	200214cc 	.word	0x200214cc
   12714:	200234b4 	.word	0x200234b4
   12718:	0002b7b8 	.word	0x0002b7b8
   1271c:	0002b838 	.word	0x0002b838
   12720:	0002b7f8 	.word	0x0002b7f8
   12724:	0002b838 	.word	0x0002b838
   12728:	0002b848 	.word	0x0002b848
   1272c:	0002b4fc 	.word	0x0002b4fc
   12730:	0002e178 	.word	0x0002e178
   12734:	0002cae9 	.word	0x0002cae9
   12738:	0002cb03 	.word	0x0002cb03

0001273c <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   1273c:	4b27      	ldr	r3, [pc, #156]	; (127dc <msg_finalize+0xa0>)
{
   1273e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
   12740:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   12742:	8141      	strh	r1, [r0, #10]
{
   12744:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   12746:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12748:	4d25      	ldr	r5, [pc, #148]	; (127e0 <msg_finalize+0xa4>)
   1274a:	60e0      	str	r0, [r4, #12]
   1274c:	e8d5 3fef 	ldaex	r3, [r5]
   12750:	3301      	adds	r3, #1
   12752:	e8c5 3fe2 	stlex	r2, r3, [r5]
   12756:	2a00      	cmp	r2, #0
   12758:	d1f8      	bne.n	1274c <msg_finalize+0x10>
	__asm__ volatile(
   1275a:	f04f 0320 	mov.w	r3, #32
   1275e:	f3ef 8611 	mrs	r6, BASEPRI
   12762:	f383 8811 	msr	BASEPRI, r3
   12766:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1276a:	481e      	ldr	r0, [pc, #120]	; (127e4 <msg_finalize+0xa8>)
   1276c:	4621      	mov	r1, r4
   1276e:	f016 f964 	bl	28a3a <log_list_add_tail>
	__asm__ volatile(
   12772:	f386 8811 	msr	BASEPRI, r6
   12776:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
   1277a:	4b1b      	ldr	r3, [pc, #108]	; (127e8 <msg_finalize+0xac>)
   1277c:	781b      	ldrb	r3, [r3, #0]
   1277e:	b183      	cbz	r3, 127a2 <msg_finalize+0x66>
	__asm__ volatile(
   12780:	f04f 0320 	mov.w	r3, #32
   12784:	f3ef 8411 	mrs	r4, BASEPRI
   12788:	f383 8811 	msr	BASEPRI, r3
   1278c:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   12790:	2000      	movs	r0, #0
   12792:	f7ff ff1f 	bl	125d4 <z_impl_log_process>
	__asm__ volatile(
   12796:	f384 8811 	msr	BASEPRI, r4
   1279a:	f3bf 8f6f 	isb	sy
}
   1279e:	b002      	add	sp, #8
   127a0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   127a2:	4a12      	ldr	r2, [pc, #72]	; (127ec <msg_finalize+0xb0>)
   127a4:	682b      	ldr	r3, [r5, #0]
   127a6:	6812      	ldr	r2, [r2, #0]
   127a8:	2a00      	cmp	r2, #0
   127aa:	d0f8      	beq.n	1279e <msg_finalize+0x62>
   127ac:	2b01      	cmp	r3, #1
   127ae:	d10a      	bne.n	127c6 <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
   127b0:	2200      	movs	r2, #0
   127b2:	2300      	movs	r3, #0
   127b4:	480e      	ldr	r0, [pc, #56]	; (127f0 <msg_finalize+0xb4>)
   127b6:	e9cd 2300 	strd	r2, r3, [sp]
   127ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   127be:	2300      	movs	r3, #0
   127c0:	f00f f8c0 	bl	21944 <z_impl_k_timer_start>
   127c4:	e7eb      	b.n	1279e <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   127c6:	2b0a      	cmp	r3, #10
   127c8:	d1e9      	bne.n	1279e <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   127ca:	4809      	ldr	r0, [pc, #36]	; (127f0 <msg_finalize+0xb4>)
   127cc:	f018 fd2f 	bl	2b22e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   127d0:	4808      	ldr	r0, [pc, #32]	; (127f4 <msg_finalize+0xb8>)
}
   127d2:	b002      	add	sp, #8
   127d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   127d8:	f00e bdac 	b.w	21334 <z_impl_k_sem_give>
   127dc:	20020430 	.word	0x20020430
   127e0:	200214c8 	.word	0x200214c8
   127e4:	200214d4 	.word	0x200214d4
   127e8:	200234b4 	.word	0x200234b4
   127ec:	200214f8 	.word	0x200214f8
   127f0:	20020da8 	.word	0x20020da8
   127f4:	20020c48 	.word	0x20020c48

000127f8 <log_process_thread_func>:
{
   127f8:	b510      	push	{r4, lr}
	log_init();
   127fa:	f7ff fe73 	bl	124e4 <log_init>
	return z_impl_k_current_get();
   127fe:	f00e fd93 	bl	21328 <z_impl_k_current_get>
	proc_tid = process_tid;
   12802:	4b0c      	ldr	r3, [pc, #48]	; (12834 <log_process_thread_func+0x3c>)
   12804:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   12806:	b130      	cbz	r0, 12816 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   12808:	4b0b      	ldr	r3, [pc, #44]	; (12838 <log_process_thread_func+0x40>)
	    process_tid &&
   1280a:	681b      	ldr	r3, [r3, #0]
   1280c:	2b09      	cmp	r3, #9
   1280e:	dd02      	ble.n	12816 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   12810:	480a      	ldr	r0, [pc, #40]	; (1283c <log_process_thread_func+0x44>)
   12812:	f00e fd8f 	bl	21334 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   12816:	4c09      	ldr	r4, [pc, #36]	; (1283c <log_process_thread_func+0x44>)
   12818:	2000      	movs	r0, #0
   1281a:	f7ff fedb 	bl	125d4 <z_impl_log_process>
		if (log_process(false) == false) {
   1281e:	2800      	cmp	r0, #0
   12820:	d1fa      	bne.n	12818 <log_process_thread_func+0x20>
   12822:	f04f 32ff 	mov.w	r2, #4294967295
   12826:	f04f 33ff 	mov.w	r3, #4294967295
   1282a:	4620      	mov	r0, r4
   1282c:	f00e fda8 	bl	21380 <z_impl_k_sem_take>
   12830:	e7f2      	b.n	12818 <log_process_thread_func+0x20>
   12832:	bf00      	nop
   12834:	200214f8 	.word	0x200214f8
   12838:	200214c8 	.word	0x200214c8
   1283c:	20020c48 	.word	0x20020c48

00012840 <z_impl_log_panic>:
{
   12840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   12842:	4f0e      	ldr	r7, [pc, #56]	; (1287c <z_impl_log_panic+0x3c>)
   12844:	783d      	ldrb	r5, [r7, #0]
   12846:	b975      	cbnz	r5, 12866 <z_impl_log_panic+0x26>
	log_init();
   12848:	f7ff fe4c 	bl	124e4 <log_init>
	return __log_backends_end - __log_backends_start;
   1284c:	4c0c      	ldr	r4, [pc, #48]	; (12880 <z_impl_log_panic+0x40>)
   1284e:	4e0d      	ldr	r6, [pc, #52]	; (12884 <z_impl_log_panic+0x44>)
   12850:	1b36      	subs	r6, r6, r4
   12852:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   12854:	42b5      	cmp	r5, r6
   12856:	db07      	blt.n	12868 <z_impl_log_panic+0x28>
   12858:	2000      	movs	r0, #0
   1285a:	f7ff febb 	bl	125d4 <z_impl_log_process>
		while (log_process(false) == true) {
   1285e:	2800      	cmp	r0, #0
   12860:	d1fa      	bne.n	12858 <z_impl_log_panic+0x18>
	panic_mode = true;
   12862:	2301      	movs	r3, #1
   12864:	703b      	strb	r3, [r7, #0]
}
   12866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   12868:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1286a:	795b      	ldrb	r3, [r3, #5]
   1286c:	b11b      	cbz	r3, 12876 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   1286e:	6823      	ldr	r3, [r4, #0]
   12870:	4620      	mov	r0, r4
   12872:	691b      	ldr	r3, [r3, #16]
   12874:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   12876:	3501      	adds	r5, #1
   12878:	3410      	adds	r4, #16
   1287a:	e7eb      	b.n	12854 <z_impl_log_panic+0x14>
   1287c:	200234b4 	.word	0x200234b4
   12880:	0002b838 	.word	0x0002b838
   12884:	0002b848 	.word	0x0002b848

00012888 <log_free>:
{
   12888:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   1288a:	3804      	subs	r0, #4
   1288c:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1288e:	e8d0 3fef 	ldaex	r3, [r0]
   12892:	1e5a      	subs	r2, r3, #1
   12894:	e8c0 2fe1 	stlex	r1, r2, [r0]
   12898:	2900      	cmp	r1, #0
   1289a:	d1f8      	bne.n	1288e <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   1289c:	2b01      	cmp	r3, #1
   1289e:	d103      	bne.n	128a8 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   128a0:	4803      	ldr	r0, [pc, #12]	; (128b0 <log_free+0x28>)
   128a2:	a901      	add	r1, sp, #4
   128a4:	f00e f822 	bl	208ec <k_mem_slab_free>
}
   128a8:	b003      	add	sp, #12
   128aa:	f85d fb04 	ldr.w	pc, [sp], #4
   128ae:	bf00      	nop
   128b0:	200214dc 	.word	0x200214dc

000128b4 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   128b4:	2320      	movs	r3, #32
   128b6:	4902      	ldr	r1, [pc, #8]	; (128c0 <log_msg_pool_init+0xc>)
   128b8:	461a      	mov	r2, r3
   128ba:	4802      	ldr	r0, [pc, #8]	; (128c4 <log_msg_pool_init+0x10>)
   128bc:	f018 ba27 	b.w	2ad0e <k_mem_slab_init>
   128c0:	20028ec0 	.word	0x20028ec0
   128c4:	200214fc 	.word	0x200214fc

000128c8 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   128c8:	2300      	movs	r3, #0
{
   128ca:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   128cc:	4d09      	ldr	r5, [pc, #36]	; (128f4 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   128ce:	9301      	str	r3, [sp, #4]
   128d0:	2001      	movs	r0, #1
   128d2:	f7ff fe7f 	bl	125d4 <z_impl_log_process>
   128d6:	4604      	mov	r4, r0
			log_dropped();
   128d8:	f7ff fdd0 	bl	1247c <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   128dc:	2200      	movs	r2, #0
   128de:	2300      	movs	r3, #0
   128e0:	4628      	mov	r0, r5
   128e2:	a901      	add	r1, sp, #4
   128e4:	f00d ffd0 	bl	20888 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   128e8:	b108      	cbz	r0, 128ee <log_msg_no_space_handle+0x26>
   128ea:	2c00      	cmp	r4, #0
   128ec:	d1f0      	bne.n	128d0 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
   128ee:	9801      	ldr	r0, [sp, #4]
   128f0:	b003      	add	sp, #12
   128f2:	bd30      	pop	{r4, r5, pc}
   128f4:	200214fc 	.word	0x200214fc

000128f8 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
   128f8:	2300      	movs	r3, #0
{
   128fa:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   128fc:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
   128fe:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   12900:	4806      	ldr	r0, [pc, #24]	; (1291c <log_msg_chunk_alloc+0x24>)
   12902:	2300      	movs	r3, #0
   12904:	a901      	add	r1, sp, #4
   12906:	f00d ffbf 	bl	20888 <k_mem_slab_alloc>
	if (err != 0) {
   1290a:	b110      	cbz	r0, 12912 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   1290c:	f7ff ffdc 	bl	128c8 <log_msg_no_space_handle>
   12910:	9001      	str	r0, [sp, #4]
}
   12912:	9801      	ldr	r0, [sp, #4]
   12914:	b003      	add	sp, #12
   12916:	f85d fb04 	ldr.w	pc, [sp], #4
   1291a:	bf00      	nop
   1291c:	200214fc 	.word	0x200214fc

00012920 <msg_free>:
{
   12920:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12922:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   12924:	7a45      	ldrb	r5, [r0, #9]
{
   12926:	b085      	sub	sp, #20
   12928:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   1292a:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
   1292c:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   12930:	d41c      	bmi.n	1296c <msg_free+0x4c>
   12932:	b1dd      	cbz	r5, 1296c <msg_free+0x4c>
		uint32_t smask = 0;
   12934:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
   12936:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   12938:	4631      	mov	r1, r6
   1293a:	9801      	ldr	r0, [sp, #4]
   1293c:	f016 f967 	bl	28c0e <log_msg_arg_get>
   12940:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   12942:	f7ff fe39 	bl	125b8 <log_is_strdup>
   12946:	b170      	cbz	r0, 12966 <msg_free+0x46>
				if (smask == 0) {
   12948:	b934      	cbnz	r4, 12958 <msg_free+0x38>
					smask = z_log_get_s_mask(
   1294a:	9b01      	ldr	r3, [sp, #4]
   1294c:	4629      	mov	r1, r5
   1294e:	6918      	ldr	r0, [r3, #16]
   12950:	f7ff fd2e 	bl	123b0 <z_log_get_s_mask>
					if (smask == 0) {
   12954:	4604      	mov	r4, r0
   12956:	b148      	cbz	r0, 1296c <msg_free+0x4c>
				if (smask & BIT(i)) {
   12958:	fa24 f306 	lsr.w	r3, r4, r6
   1295c:	07d9      	lsls	r1, r3, #31
   1295e:	d502      	bpl.n	12966 <msg_free+0x46>
					log_free(buf);
   12960:	4638      	mov	r0, r7
   12962:	f7ff ff91 	bl	12888 <log_free>
		for (i = 0; i < nargs; i++) {
   12966:	3601      	adds	r6, #1
   12968:	42ae      	cmp	r6, r5
   1296a:	d3e5      	bcc.n	12938 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
   1296c:	9b01      	ldr	r3, [sp, #4]
   1296e:	7a1a      	ldrb	r2, [r3, #8]
   12970:	0792      	lsls	r2, r2, #30
   12972:	d504      	bpl.n	1297e <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
   12974:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   12976:	4c08      	ldr	r4, [pc, #32]	; (12998 <msg_free+0x78>)
   12978:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   1297a:	9b03      	ldr	r3, [sp, #12]
   1297c:	b92b      	cbnz	r3, 1298a <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   1297e:	4806      	ldr	r0, [pc, #24]	; (12998 <msg_free+0x78>)
   12980:	a901      	add	r1, sp, #4
   12982:	f00d ffb3 	bl	208ec <k_mem_slab_free>
}
   12986:	b005      	add	sp, #20
   12988:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   1298a:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   1298c:	4620      	mov	r0, r4
   1298e:	a903      	add	r1, sp, #12
   12990:	f00d ffac 	bl	208ec <k_mem_slab_free>
		cont = next;
   12994:	9503      	str	r5, [sp, #12]
   12996:	e7f0      	b.n	1297a <msg_free+0x5a>
   12998:	200214fc 	.word	0x200214fc

0001299c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   1299c:	b40e      	push	{r1, r2, r3}
   1299e:	b503      	push	{r0, r1, lr}
   129a0:	ab03      	add	r3, sp, #12
   129a2:	f853 2b04 	ldr.w	r2, [r3], #4
   129a6:	4601      	mov	r1, r0
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   129a8:	4804      	ldr	r0, [pc, #16]	; (129bc <print_formatted+0x20>)
	va_start(args, fmt);
   129aa:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   129ac:	f7ff f9fa 	bl	11da4 <z_vprintk>
#endif
	va_end(args);

	return length;
}
   129b0:	2000      	movs	r0, #0
   129b2:	b002      	add	sp, #8
   129b4:	f85d eb04 	ldr.w	lr, [sp], #4
   129b8:	b003      	add	sp, #12
   129ba:	4770      	bx	lr
   129bc:	00029013 	.word	0x00029013

000129c0 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
   129c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   129c4:	f011 0402 	ands.w	r4, r1, #2
{
   129c8:	b085      	sub	sp, #20
   129ca:	4606      	mov	r6, r0
   129cc:	4690      	mov	r8, r2
   129ce:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   129d2:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   129d6:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   129da:	d007      	beq.n	129ec <prefix_print+0x2c>
	if (!format) {
   129dc:	f011 0f44 	tst.w	r1, #68	; 0x44
   129e0:	d137      	bne.n	12a52 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   129e2:	461a      	mov	r2, r3
   129e4:	4932      	ldr	r1, [pc, #200]	; (12ab0 <prefix_print+0xf0>)
   129e6:	f7ff ffd9 	bl	1299c <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   129ea:	4604      	mov	r4, r0
	if (color) {
   129ec:	f1b9 0f00 	cmp.w	r9, #0
   129f0:	d00a      	beq.n	12a08 <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
   129f2:	4b30      	ldr	r3, [pc, #192]	; (12ab4 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
   129f4:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
   129f6:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
   129fa:	4b2f      	ldr	r3, [pc, #188]	; (12ab8 <prefix_print+0xf8>)
   129fc:	492f      	ldr	r1, [pc, #188]	; (12abc <prefix_print+0xfc>)
   129fe:	2a00      	cmp	r2, #0
   12a00:	bf08      	it	eq
   12a02:	461a      	moveq	r2, r3
   12a04:	f7ff ffca 	bl	1299c <print_formatted>
	if (level_on) {
   12a08:	b13d      	cbz	r5, 12a1a <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   12a0a:	4b2d      	ldr	r3, [pc, #180]	; (12ac0 <prefix_print+0x100>)
   12a0c:	4630      	mov	r0, r6
   12a0e:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   12a12:	492c      	ldr	r1, [pc, #176]	; (12ac4 <prefix_print+0x104>)
   12a14:	f7ff ffc2 	bl	1299c <print_formatted>
   12a18:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   12a1a:	f1b8 0f00 	cmp.w	r8, #0
   12a1e:	d044      	beq.n	12aaa <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   12a20:	2301      	movs	r3, #1
   12a22:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   12a26:	4b28      	ldr	r3, [pc, #160]	; (12ac8 <prefix_print+0x108>)
   12a28:	f017 0f10 	tst.w	r7, #16
   12a2c:	4f27      	ldr	r7, [pc, #156]	; (12acc <prefix_print+0x10c>)
   12a2e:	bf18      	it	ne
   12a30:	461f      	movne	r7, r3
   12a32:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   12a36:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   12a3a:	f7ff fd2b 	bl	12494 <log_source_name_get>
   12a3e:	4639      	mov	r1, r7
   12a40:	4602      	mov	r2, r0
   12a42:	4630      	mov	r0, r6
   12a44:	f7ff ffaa 	bl	1299c <print_formatted>
   12a48:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
   12a4a:	4420      	add	r0, r4
   12a4c:	b005      	add	sp, #20
   12a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   12a52:	4a1f      	ldr	r2, [pc, #124]	; (12ad0 <prefix_print+0x110>)
   12a54:	6811      	ldr	r1, [r2, #0]
   12a56:	b331      	cbz	r1, 12aa6 <prefix_print+0xe6>
		timestamp /= timestamp_div;
   12a58:	4a1e      	ldr	r2, [pc, #120]	; (12ad4 <prefix_print+0x114>)
   12a5a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   12a5e:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   12a60:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   12a64:	fbb3 f3f4 	udiv	r3, r3, r4
		total_seconds = timestamp / freq;
   12a68:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   12a6c:	fbb4 f2fe 	udiv	r2, r4, lr
   12a70:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   12a74:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   12a78:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12a7c:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   12a80:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12a84:	fb01 441b 	mls	r4, r1, fp, r4
   12a88:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   12a8c:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12a90:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   12a94:	e9cd b101 	strd	fp, r1, [sp, #4]
   12a98:	fb0a e113 	mls	r1, sl, r3, lr
   12a9c:	9100      	str	r1, [sp, #0]
   12a9e:	490e      	ldr	r1, [pc, #56]	; (12ad8 <prefix_print+0x118>)
   12aa0:	f7ff ff7c 	bl	1299c <print_formatted>
   12aa4:	e7a1      	b.n	129ea <prefix_print+0x2a>
		length = 0;
   12aa6:	4608      	mov	r0, r1
   12aa8:	e79f      	b.n	129ea <prefix_print+0x2a>
	total += print_formatted(log_output,
   12aaa:	4f08      	ldr	r7, [pc, #32]	; (12acc <prefix_print+0x10c>)
   12aac:	e7c1      	b.n	12a32 <prefix_print+0x72>
   12aae:	bf00      	nop
   12ab0:	0002cb5d 	.word	0x0002cb5d
   12ab4:	0002b9c0 	.word	0x0002b9c0
   12ab8:	0002cb4f 	.word	0x0002cb4f
   12abc:	0002d8c4 	.word	0x0002d8c4
   12ac0:	0002b9d4 	.word	0x0002b9d4
   12ac4:	0002cb82 	.word	0x0002cb82
   12ac8:	0002cb59 	.word	0x0002cb59
   12acc:	0002cb54 	.word	0x0002cb54
   12ad0:	20021518 	.word	0x20021518
   12ad4:	2002151c 	.word	0x2002151c
   12ad8:	0002cb66 	.word	0x0002cb66

00012adc <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
   12adc:	b538      	push	{r3, r4, r5, lr}
   12ade:	460c      	mov	r4, r1
	if (color) {
   12ae0:	07e1      	lsls	r1, r4, #31
{
   12ae2:	4605      	mov	r5, r0
	if (color) {
   12ae4:	d503      	bpl.n	12aee <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
   12ae6:	4a08      	ldr	r2, [pc, #32]	; (12b08 <postfix_print+0x2c>)
   12ae8:	4908      	ldr	r1, [pc, #32]	; (12b0c <postfix_print+0x30>)
   12aea:	f7ff ff57 	bl	1299c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12aee:	06e2      	lsls	r2, r4, #27
   12af0:	d408      	bmi.n	12b04 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   12af2:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   12af4:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   12af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   12afa:	bf4c      	ite	mi
   12afc:	4904      	ldrmi	r1, [pc, #16]	; (12b10 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   12afe:	4905      	ldrpl	r1, [pc, #20]	; (12b14 <postfix_print+0x38>)
   12b00:	f7ff bf4c 	b.w	1299c <print_formatted>
}
   12b04:	bd38      	pop	{r3, r4, r5, pc}
   12b06:	bf00      	nop
   12b08:	0002cb4f 	.word	0x0002cb4f
   12b0c:	0002d8c4 	.word	0x0002d8c4
   12b10:	0002e053 	.word	0x0002e053
   12b14:	0002e052 	.word	0x0002e052

00012b18 <hexdump_line_print>:
{
   12b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12b1c:	461d      	mov	r5, r3
   12b1e:	9b08      	ldr	r3, [sp, #32]
   12b20:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12b22:	06da      	lsls	r2, r3, #27
{
   12b24:	4604      	mov	r4, r0
   12b26:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12b28:	d405      	bmi.n	12b36 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   12b2a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   12b2c:	bf4c      	ite	mi
   12b2e:	492b      	ldrmi	r1, [pc, #172]	; (12bdc <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   12b30:	492b      	ldrpl	r1, [pc, #172]	; (12be0 <hexdump_line_print+0xc8>)
   12b32:	f7ff ff33 	bl	1299c <print_formatted>
{
   12b36:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
   12b3a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 12be8 <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   12b3e:	45a8      	cmp	r8, r5
   12b40:	db2d      	blt.n	12b9e <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12b42:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   12b44:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 12bec <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
   12b48:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 12bf0 <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
   12b4c:	f8df a098 	ldr.w	sl, [pc, #152]	; 12be8 <hexdump_line_print+0xd0>
		if (i < length) {
   12b50:	42bd      	cmp	r5, r7
   12b52:	d232      	bcs.n	12bba <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
   12b54:	4649      	mov	r1, r9
   12b56:	4620      	mov	r0, r4
   12b58:	5d72      	ldrb	r2, [r6, r5]
   12b5a:	f7ff ff1f 	bl	1299c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12b5e:	3501      	adds	r5, #1
   12b60:	2d10      	cmp	r5, #16
   12b62:	d123      	bne.n	12bac <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
   12b64:	4620      	mov	r0, r4
   12b66:	491f      	ldr	r1, [pc, #124]	; (12be4 <hexdump_line_print+0xcc>)
   12b68:	f7ff ff18 	bl	1299c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12b6c:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   12b6e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 12be8 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   12b72:	f8df 9080 	ldr.w	r9, [pc, #128]	; 12bf4 <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
   12b76:	f8df a080 	ldr.w	sl, [pc, #128]	; 12bf8 <hexdump_line_print+0xe0>
		if (i < length) {
   12b7a:	42af      	cmp	r7, r5
   12b7c:	d929      	bls.n	12bd2 <hexdump_line_print+0xba>
			char c = (char)data[i];
   12b7e:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   12b80:	4651      	mov	r1, sl
   12b82:	f812 3009 	ldrb.w	r3, [r2, r9]
   12b86:	4620      	mov	r0, r4
   12b88:	f013 0f97 	tst.w	r3, #151	; 0x97
   12b8c:	bf08      	it	eq
   12b8e:	222e      	moveq	r2, #46	; 0x2e
   12b90:	f7ff ff04 	bl	1299c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12b94:	3501      	adds	r5, #1
   12b96:	2d10      	cmp	r5, #16
   12b98:	d114      	bne.n	12bc4 <hexdump_line_print+0xac>
}
   12b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   12b9e:	4649      	mov	r1, r9
   12ba0:	4620      	mov	r0, r4
   12ba2:	f7ff fefb 	bl	1299c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   12ba6:	f108 0801 	add.w	r8, r8, #1
   12baa:	e7c8      	b.n	12b3e <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   12bac:	076a      	lsls	r2, r5, #29
   12bae:	d1cf      	bne.n	12b50 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
   12bb0:	4651      	mov	r1, sl
   12bb2:	4620      	mov	r0, r4
   12bb4:	f7ff fef2 	bl	1299c <print_formatted>
   12bb8:	e7ca      	b.n	12b50 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
   12bba:	4641      	mov	r1, r8
   12bbc:	4620      	mov	r0, r4
   12bbe:	f7ff feed 	bl	1299c <print_formatted>
   12bc2:	e7cc      	b.n	12b5e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   12bc4:	076b      	lsls	r3, r5, #29
   12bc6:	d1d8      	bne.n	12b7a <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   12bc8:	4641      	mov	r1, r8
   12bca:	4620      	mov	r0, r4
   12bcc:	f7ff fee6 	bl	1299c <print_formatted>
   12bd0:	e7d3      	b.n	12b7a <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   12bd2:	4641      	mov	r1, r8
   12bd4:	4620      	mov	r0, r4
   12bd6:	f7ff fee1 	bl	1299c <print_formatted>
   12bda:	e7db      	b.n	12b94 <hexdump_line_print+0x7c>
   12bdc:	0002e053 	.word	0x0002e053
   12be0:	0002e052 	.word	0x0002e052
   12be4:	0002cb92 	.word	0x0002cb92
   12be8:	0002cb90 	.word	0x0002cb90
   12bec:	0002cb8e 	.word	0x0002cb8e
   12bf0:	0002cb88 	.word	0x0002cb88
   12bf4:	0002bfa1 	.word	0x0002bfa1
   12bf8:	0002cb94 	.word	0x0002cb94

00012bfc <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   12bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   12c00:	7a8b      	ldrb	r3, [r1, #10]
   12c02:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   12c04:	f013 0807 	ands.w	r8, r3, #7
{
   12c08:	4605      	mov	r5, r0
   12c0a:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12c0c:	7a0a      	ldrb	r2, [r1, #8]
   12c0e:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   12c10:	d021      	beq.n	12c56 <log_output_msg_process+0x5a>
   12c12:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   12c14:	8949      	ldrh	r1, [r1, #10]
   12c16:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   12c1a:	f3c1 1189 	ubfx	r1, r1, #6, #10
   12c1e:	e9cd 8300 	strd	r8, r3, [sp]
   12c22:	9102      	str	r1, [sp, #8]
   12c24:	68f3      	ldr	r3, [r6, #12]
   12c26:	4639      	mov	r1, r7
   12c28:	f002 0201 	and.w	r2, r2, #1
   12c2c:	f7ff fec8 	bl	129c0 <prefix_print>
   12c30:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12c32:	7a34      	ldrb	r4, [r6, #8]
   12c34:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   12c36:	f014 0401 	ands.w	r4, r4, #1
   12c3a:	d00e      	beq.n	12c5a <log_output_msg_process+0x5e>
		std_print(msg, log_output);
   12c3c:	4629      	mov	r1, r5
   12c3e:	4630      	mov	r0, r6
   12c40:	f016 f87d 	bl	28d3e <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
   12c44:	f1b8 0f00 	cmp.w	r8, #0
   12c48:	d02b      	beq.n	12ca2 <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
   12c4a:	4642      	mov	r2, r8
   12c4c:	4639      	mov	r1, r7
   12c4e:	4628      	mov	r0, r5
   12c50:	f7ff ff44 	bl	12adc <postfix_print>
   12c54:	e025      	b.n	12ca2 <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   12c56:	46c1      	mov	r9, r8
   12c58:	e7eb      	b.n	12c32 <log_output_msg_process+0x36>
	} else if (raw_string) {
   12c5a:	f1b8 0f00 	cmp.w	r8, #0
   12c5e:	d126      	bne.n	12cae <log_output_msg_process+0xb2>
	size_t offset = 0;
   12c60:	4627      	mov	r7, r4
		length = log_output->size;
   12c62:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   12c64:	aa06      	add	r2, sp, #24
		length = log_output->size;
   12c66:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   12c68:	4630      	mov	r0, r6
   12c6a:	463b      	mov	r3, r7
   12c6c:	68a9      	ldr	r1, [r5, #8]
   12c6e:	f016 f852 	bl	28d16 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
   12c72:	9a06      	ldr	r2, [sp, #24]
   12c74:	686b      	ldr	r3, [r5, #4]
   12c76:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   12c78:	b13a      	cbz	r2, 12c8a <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
   12c7a:	68ab      	ldr	r3, [r5, #8]
   12c7c:	4413      	add	r3, r2
   12c7e:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   12c82:	f1a4 030a 	sub.w	r3, r4, #10
   12c86:	425c      	negs	r4, r3
   12c88:	415c      	adcs	r4, r3
		log_output_flush(log_output);
   12c8a:	4628      	mov	r0, r5
   12c8c:	f016 f9b4 	bl	28ff8 <log_output_flush>
		offset += length;
   12c90:	9b06      	ldr	r3, [sp, #24]
   12c92:	441f      	add	r7, r3
	} while (length > 0);
   12c94:	2b00      	cmp	r3, #0
   12c96:	d1e4      	bne.n	12c62 <log_output_msg_process+0x66>
	if (eol) {
   12c98:	b11c      	cbz	r4, 12ca2 <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
   12c9a:	4628      	mov	r0, r5
   12c9c:	4913      	ldr	r1, [pc, #76]	; (12cec <log_output_msg_process+0xf0>)
   12c9e:	f7ff fe7d 	bl	1299c <print_formatted>
	}

	log_output_flush(log_output);
   12ca2:	4628      	mov	r0, r5
   12ca4:	f016 f9a8 	bl	28ff8 <log_output_flush>
}
   12ca8:	b00a      	add	sp, #40	; 0x28
   12caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
   12cae:	4630      	mov	r0, r6
   12cb0:	f015 ffdb 	bl	28c6a <log_msg_str_get>
   12cb4:	490e      	ldr	r1, [pc, #56]	; (12cf0 <log_output_msg_process+0xf4>)
   12cb6:	4602      	mov	r2, r0
   12cb8:	4628      	mov	r0, r5
   12cba:	f7ff fe6f 	bl	1299c <print_formatted>
		length = sizeof(buf);
   12cbe:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   12cc2:	aa05      	add	r2, sp, #20
   12cc4:	4623      	mov	r3, r4
   12cc6:	4630      	mov	r0, r6
   12cc8:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   12cca:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   12cce:	f016 f822 	bl	28d16 <log_msg_hexdump_data_get>
		if (length) {
   12cd2:	9a05      	ldr	r2, [sp, #20]
   12cd4:	2a00      	cmp	r2, #0
   12cd6:	d0b8      	beq.n	12c4a <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
   12cd8:	464b      	mov	r3, r9
   12cda:	4628      	mov	r0, r5
   12cdc:	9700      	str	r7, [sp, #0]
   12cde:	a906      	add	r1, sp, #24
   12ce0:	f7ff ff1a 	bl	12b18 <hexdump_line_print>
			offset += length;
   12ce4:	9b05      	ldr	r3, [sp, #20]
   12ce6:	441c      	add	r4, r3
		length = sizeof(buf);
   12ce8:	e7eb      	b.n	12cc2 <log_output_msg_process+0xc6>
   12cea:	bf00      	nop
   12cec:	0002cb97 	.word	0x0002cb97
   12cf0:	0002d8c4 	.word	0x0002d8c4

00012cf4 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12cf4:	f242 730f 	movw	r3, #9999	; 0x270f
{
   12cf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12cfa:	428b      	cmp	r3, r1
   12cfc:	bf28      	it	cs
   12cfe:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
   12d00:	6805      	ldr	r5, [r0, #0]
{
   12d02:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12d04:	2105      	movs	r1, #5
   12d06:	4668      	mov	r0, sp
   12d08:	4a0d      	ldr	r2, [pc, #52]	; (12d40 <log_output_dropped_process+0x4c>)
   12d0a:	f015 fb64 	bl	283d6 <snprintk>
   12d0e:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   12d10:	6863      	ldr	r3, [r4, #4]
   12d12:	4628      	mov	r0, r5
   12d14:	220b      	movs	r2, #11
   12d16:	685b      	ldr	r3, [r3, #4]
   12d18:	490a      	ldr	r1, [pc, #40]	; (12d44 <log_output_dropped_process+0x50>)
   12d1a:	f016 f803 	bl	28d24 <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
   12d1e:	6863      	ldr	r3, [r4, #4]
   12d20:	4632      	mov	r2, r6
   12d22:	4669      	mov	r1, sp
   12d24:	4628      	mov	r0, r5
   12d26:	685b      	ldr	r3, [r3, #4]
   12d28:	f015 fffc 	bl	28d24 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   12d2c:	6863      	ldr	r3, [r4, #4]
   12d2e:	221b      	movs	r2, #27
   12d30:	4628      	mov	r0, r5
   12d32:	685b      	ldr	r3, [r3, #4]
   12d34:	4904      	ldr	r1, [pc, #16]	; (12d48 <log_output_dropped_process+0x54>)
   12d36:	f015 fff5 	bl	28d24 <buffer_write>
		     log_output->control_block->ctx);
}
   12d3a:	b002      	add	sp, #8
   12d3c:	bd70      	pop	{r4, r5, r6, pc}
   12d3e:	bf00      	nop
   12d40:	0002d70f 	.word	0x0002d70f
   12d44:	0002cbd5 	.word	0x0002cbd5
   12d48:	0002cbb9 	.word	0x0002cbb9

00012d4c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   12d4c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   12d4e:	2100      	movs	r1, #0
	timestamp_div = 1U;
   12d50:	4a07      	ldr	r2, [pc, #28]	; (12d70 <log_output_timestamp_freq_set+0x24>)
{
   12d52:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   12d54:	4c07      	ldr	r4, [pc, #28]	; (12d74 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   12d56:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   12d58:	42a0      	cmp	r0, r4
   12d5a:	d804      	bhi.n	12d66 <log_output_timestamp_freq_set+0x1a>
   12d5c:	b101      	cbz	r1, 12d60 <log_output_timestamp_freq_set+0x14>
   12d5e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   12d60:	4b05      	ldr	r3, [pc, #20]	; (12d78 <log_output_timestamp_freq_set+0x2c>)
   12d62:	6018      	str	r0, [r3, #0]
}
   12d64:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   12d66:	2101      	movs	r1, #1
		frequency /= 2U;
   12d68:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   12d6a:	005b      	lsls	r3, r3, #1
   12d6c:	e7f4      	b.n	12d58 <log_output_timestamp_freq_set+0xc>
   12d6e:	bf00      	nop
   12d70:	2002151c 	.word	0x2002151c
   12d74:	000f4240 	.word	0x000f4240
   12d78:	20021518 	.word	0x20021518

00012d7c <char_out>:
#include <assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   12d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d7e:	460d      	mov	r5, r1
   12d80:	4604      	mov	r4, r0
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
   12d82:	4f06      	ldr	r7, [pc, #24]	; (12d9c <char_out+0x20>)
   12d84:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
   12d86:	42b4      	cmp	r4, r6
   12d88:	d101      	bne.n	12d8e <char_out+0x12>
	}

	return length;
}
   12d8a:	4628      	mov	r0, r5
   12d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
   12d8e:	6838      	ldr	r0, [r7, #0]
   12d90:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   12d94:	6883      	ldr	r3, [r0, #8]
   12d96:	685b      	ldr	r3, [r3, #4]
   12d98:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   12d9a:	e7f4      	b.n	12d86 <char_out+0xa>
   12d9c:	20021534 	.word	0x20021534

00012da0 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   12da0:	4801      	ldr	r0, [pc, #4]	; (12da8 <panic+0x8>)
   12da2:	f016 b929 	b.w	28ff8 <log_output_flush>
   12da6:	bf00      	nop
   12da8:	0002ba00 	.word	0x0002ba00

00012dac <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
   12dac:	4801      	ldr	r0, [pc, #4]	; (12db4 <dropped+0x8>)
   12dae:	f7ff bfa1 	b.w	12cf4 <log_output_dropped_process>
   12db2:	bf00      	nop
   12db4:	0002ba00 	.word	0x0002ba00

00012db8 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
   12db8:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   12dba:	4806      	ldr	r0, [pc, #24]	; (12dd4 <log_backend_uart_init+0x1c>)
   12dbc:	f00d fbba 	bl	20534 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   12dc0:	4b05      	ldr	r3, [pc, #20]	; (12dd8 <log_backend_uart_init+0x20>)
   12dc2:	6018      	str	r0, [r3, #0]
	assert((void *)uart_dev);
   12dc4:	b928      	cbnz	r0, 12dd2 <log_backend_uart_init+0x1a>
   12dc6:	212d      	movs	r1, #45	; 0x2d
   12dc8:	4b04      	ldr	r3, [pc, #16]	; (12ddc <log_backend_uart_init+0x24>)
   12dca:	4a05      	ldr	r2, [pc, #20]	; (12de0 <log_backend_uart_init+0x28>)
   12dcc:	4805      	ldr	r0, [pc, #20]	; (12de4 <log_backend_uart_init+0x2c>)
   12dce:	f00e febd 	bl	21b4c <__assert_func>
}
   12dd2:	bd08      	pop	{r3, pc}
   12dd4:	0002cbe1 	.word	0x0002cbe1
   12dd8:	20021534 	.word	0x20021534
   12ddc:	0002cbe8 	.word	0x0002cbe8
   12de0:	0002cc3f 	.word	0x0002cc3f
   12de4:	0002cbf9 	.word	0x0002cbf9

00012de8 <put>:
{
   12de8:	b510      	push	{r4, lr}
   12dea:	460c      	mov	r4, r1
	log_msg_get(msg);
   12dec:	4608      	mov	r0, r1
   12dee:	f015 ff02 	bl	28bf6 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
   12df2:	4621      	mov	r1, r4
   12df4:	4804      	ldr	r0, [pc, #16]	; (12e08 <put+0x20>)
   12df6:	220f      	movs	r2, #15
   12df8:	f7ff ff00 	bl	12bfc <log_output_msg_process>
	log_msg_put(msg);
   12dfc:	4620      	mov	r0, r4
}
   12dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12e02:	f015 bf23 	b.w	28c4c <log_msg_put>
   12e06:	bf00      	nop
   12e08:	0002ba00 	.word	0x0002ba00

00012e0c <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
   12e0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12e0e:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   12e10:	4c0f      	ldr	r4, [pc, #60]	; (12e50 <z_impl_zsock_socket+0x44>)
   12e12:	4e10      	ldr	r6, [pc, #64]	; (12e54 <z_impl_zsock_socket+0x48>)
   12e14:	42b4      	cmp	r4, r6
   12e16:	d307      	bcc.n	12e28 <z_impl_zsock_socket+0x1c>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   12e18:	f016 fac6 	bl	293a8 <__errno>
   12e1c:	236a      	movs	r3, #106	; 0x6a
   12e1e:	6003      	str	r3, [r0, #0]
	return -1;
}
   12e20:	f04f 30ff 	mov.w	r0, #4294967295
   12e24:	b002      	add	sp, #8
   12e26:	bd70      	pop	{r4, r5, r6, pc}
		if (sock_family->family != family &&
   12e28:	6823      	ldr	r3, [r4, #0]
   12e2a:	42ab      	cmp	r3, r5
   12e2c:	d000      	beq.n	12e30 <z_impl_zsock_socket+0x24>
   12e2e:	b96b      	cbnz	r3, 12e4c <z_impl_zsock_socket+0x40>
		if (!sock_family->is_supported(family, type, proto)) {
   12e30:	4628      	mov	r0, r5
   12e32:	6863      	ldr	r3, [r4, #4]
   12e34:	e9cd 1200 	strd	r1, r2, [sp]
   12e38:	4798      	blx	r3
   12e3a:	e9dd 1200 	ldrd	r1, r2, [sp]
   12e3e:	b128      	cbz	r0, 12e4c <z_impl_zsock_socket+0x40>
		return sock_family->handler(family, type, proto);
   12e40:	4628      	mov	r0, r5
   12e42:	68a3      	ldr	r3, [r4, #8]
}
   12e44:	b002      	add	sp, #8
   12e46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return sock_family->handler(family, type, proto);
   12e4a:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   12e4c:	340c      	adds	r4, #12
   12e4e:	e7e1      	b.n	12e14 <z_impl_zsock_socket+0x8>
   12e50:	0002b7ac 	.word	0x0002b7ac
   12e54:	0002b7b8 	.word	0x0002b7b8

00012e58 <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   12e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	if (poll_timeout < 0) {
   12e5c:	1e14      	subs	r4, r2, #0
{
   12e5e:	b09b      	sub	sp, #108	; 0x6c
   12e60:	4606      	mov	r6, r0
   12e62:	9103      	str	r1, [sp, #12]
	if (poll_timeout < 0) {
   12e64:	db30      	blt.n	12ec8 <z_impl_zsock_poll+0x70>
   12e66:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   12e6a:	f240 30e7 	movw	r0, #999	; 0x3e7
   12e6e:	2100      	movs	r1, #0
   12e70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12e74:	2300      	movs	r3, #0
   12e76:	fbc5 0104 	smlal	r0, r1, r5, r4
   12e7a:	f7f9 fced 	bl	c858 <__aeabi_uldivmod>
   12e7e:	4682      	mov	sl, r0
   12e80:	468b      	mov	fp, r1
	void *offl_ctx = NULL;
   12e82:	2500      	movs	r5, #0
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = z_timeout_end_calc(timeout);
   12e84:	4650      	mov	r0, sl
   12e86:	4659      	mov	r1, fp
   12e88:	f018 f99c 	bl	2b1c4 <z_timeout_end_calc>

	pev = poll_events;
   12e8c:	ab0b      	add	r3, sp, #44	; 0x2c
   12e8e:	9309      	str	r3, [sp, #36]	; 0x24
	const struct fd_op_vtable *offl_vtable = NULL;
   12e90:	462f      	mov	r7, r5
	for (pfd = fds, i = nfds; i--; pfd++) {
   12e92:	4633      	mov	r3, r6
	bool offload = false;
   12e94:	46a8      	mov	r8, r5
	end = z_timeout_end_calc(timeout);
   12e96:	e9cd 0104 	strd	r0, r1, [sp, #16]
	for (pfd = fds, i = nfds; i--; pfd++) {
   12e9a:	f8dd 900c 	ldr.w	r9, [sp, #12]
   12e9e:	f1b9 0f00 	cmp.w	r9, #0
   12ea2:	d118      	bne.n	12ed6 <z_impl_zsock_poll+0x7e>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   12ea4:	f1b8 0f00 	cmp.w	r8, #0
   12ea8:	d049      	beq.n	12f3e <z_impl_zsock_poll+0xe6>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   12eaa:	9b03      	ldr	r3, [sp, #12]
   12eac:	9401      	str	r4, [sp, #4]
   12eae:	9300      	str	r3, [sp, #0]
   12eb0:	f44f 7282 	mov.w	r2, #260	; 0x104
   12eb4:	4633      	mov	r3, r6
   12eb6:	4629      	mov	r1, r5
   12eb8:	4638      	mov	r0, r7
   12eba:	f016 f8f9 	bl	290b0 <z_fdtable_call_ioctl>
   12ebe:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
   12ec0:	4620      	mov	r0, r4
   12ec2:	b01b      	add	sp, #108	; 0x6c
   12ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_FOREVER;
   12ec8:	f04f 3aff 	mov.w	sl, #4294967295
   12ecc:	f04f 3bff 	mov.w	fp, #4294967295
		poll_timeout = SYS_FOREVER_MS;
   12ed0:	f04f 34ff 	mov.w	r4, #4294967295
   12ed4:	e7d5      	b.n	12e82 <z_impl_zsock_poll+0x2a>
		if (pfd->fd < 0) {
   12ed6:	6818      	ldr	r0, [r3, #0]
   12ed8:	2800      	cmp	r0, #0
   12eda:	db2c      	blt.n	12f36 <z_impl_zsock_poll+0xde>
	ctx = z_get_fd_obj_and_vtable(sock,
   12edc:	a90a      	add	r1, sp, #40	; 0x28
   12ede:	9306      	str	r3, [sp, #24]
   12ee0:	f7fe fe94 	bl	11c0c <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   12ee4:	9b06      	ldr	r3, [sp, #24]
   12ee6:	4601      	mov	r1, r0
   12ee8:	b328      	cbz	r0, 12f36 <z_impl_zsock_poll+0xde>
		result = z_fdtable_call_ioctl(vtable, ctx,
   12eea:	aa1a      	add	r2, sp, #104	; 0x68
   12eec:	9201      	str	r2, [sp, #4]
   12eee:	aa09      	add	r2, sp, #36	; 0x24
   12ef0:	9200      	str	r2, [sp, #0]
   12ef2:	9006      	str	r0, [sp, #24]
   12ef4:	f44f 7281 	mov.w	r2, #258	; 0x102
   12ef8:	980a      	ldr	r0, [sp, #40]	; 0x28
   12efa:	9307      	str	r3, [sp, #28]
   12efc:	f016 f8d8 	bl	290b0 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   12f00:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   12f04:	4602      	mov	r2, r0
		if (result == -EALREADY) {
   12f06:	9b07      	ldr	r3, [sp, #28]
   12f08:	d011      	beq.n	12f2e <z_impl_zsock_poll+0xd6>
		} else if (result == -EXDEV) {
   12f0a:	f110 0f12 	cmn.w	r0, #18
   12f0e:	9906      	ldr	r1, [sp, #24]
   12f10:	d105      	bne.n	12f1e <z_impl_zsock_poll+0xc6>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   12f12:	b90f      	cbnz	r7, 12f18 <z_impl_zsock_poll+0xc0>
				offl_vtable = vtable;
   12f14:	460d      	mov	r5, r1
   12f16:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			offload = true;
   12f18:	f04f 0801 	mov.w	r8, #1
   12f1c:	e00b      	b.n	12f36 <z_impl_zsock_poll+0xde>
		} else if (result != 0) {
   12f1e:	b150      	cbz	r0, 12f36 <z_impl_zsock_poll+0xde>
   12f20:	9203      	str	r2, [sp, #12]
				errno = -result;
   12f22:	f016 fa41 	bl	293a8 <__errno>
   12f26:	9a03      	ldr	r2, [sp, #12]
   12f28:	4252      	negs	r2, r2
   12f2a:	6002      	str	r2, [r0, #0]
				return -1;
   12f2c:	e03e      	b.n	12fac <z_impl_zsock_poll+0x154>
			timeout = K_NO_WAIT;
   12f2e:	f04f 0a00 	mov.w	sl, #0
   12f32:	f04f 0b00 	mov.w	fp, #0
	for (pfd = fds, i = nfds; i--; pfd++) {
   12f36:	3308      	adds	r3, #8
   12f38:	f109 39ff 	add.w	r9, r9, #4294967295
   12f3c:	e7af      	b.n	12e9e <z_impl_zsock_poll+0x46>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   12f3e:	ea5a 030b 	orrs.w	r3, sl, fp
   12f42:	d016      	beq.n	12f72 <z_impl_zsock_poll+0x11a>
   12f44:	f1bb 3fff 	cmp.w	fp, #4294967295
   12f48:	bf08      	it	eq
   12f4a:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   12f4e:	d010      	beq.n	12f72 <z_impl_zsock_poll+0x11a>
		int64_t remaining = end - z_tick_get();
   12f50:	f00e fcb8 	bl	218c4 <z_tick_get>
   12f54:	9b04      	ldr	r3, [sp, #16]
   12f56:	ebb3 0a00 	subs.w	sl, r3, r0
   12f5a:	9b05      	ldr	r3, [sp, #20]
   12f5c:	eb63 0b01 	sbc.w	fp, r3, r1
   12f60:	f1ba 0f00 	cmp.w	sl, #0
   12f64:	f17b 0300 	sbcs.w	r3, fp, #0
   12f68:	bfbc      	itt	lt
   12f6a:	f04f 0a00 	movlt.w	sl, #0
   12f6e:	f04f 0b00 	movlt.w	fp, #0
			pfd->revents = 0;
   12f72:	f04f 0900 	mov.w	r9, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   12f76:	9909      	ldr	r1, [sp, #36]	; 0x24
   12f78:	ac0b      	add	r4, sp, #44	; 0x2c
   12f7a:	4b34      	ldr	r3, [pc, #208]	; (1304c <z_impl_zsock_poll+0x1f4>)
   12f7c:	1b09      	subs	r1, r1, r4
   12f7e:	1089      	asrs	r1, r1, #2
   12f80:	4359      	muls	r1, r3
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   12f82:	465b      	mov	r3, fp
   12f84:	4652      	mov	r2, sl
   12f86:	4620      	mov	r0, r4
   12f88:	f00e fd38 	bl	219fc <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   12f8c:	f100 030b 	add.w	r3, r0, #11
   12f90:	2b0b      	cmp	r3, #11
   12f92:	4607      	mov	r7, r0
   12f94:	d806      	bhi.n	12fa4 <z_impl_zsock_poll+0x14c>
   12f96:	f640 0581 	movw	r5, #2177	; 0x881
   12f9a:	40dd      	lsrs	r5, r3
   12f9c:	43ed      	mvns	r5, r5
   12f9e:	f015 0501 	ands.w	r5, r5, #1
   12fa2:	d006      	beq.n	12fb2 <z_impl_zsock_poll+0x15a>
			errno = -ret;
   12fa4:	f016 fa00 	bl	293a8 <__errno>
   12fa8:	427f      	negs	r7, r7
   12faa:	6007      	str	r7, [r0, #0]
			return -1;
   12fac:	f04f 34ff 	mov.w	r4, #4294967295
   12fb0:	e786      	b.n	12ec0 <z_impl_zsock_poll+0x68>
		pev = poll_events;
   12fb2:	9409      	str	r4, [sp, #36]	; 0x24
		for (pfd = fds, i = nfds; i--; pfd++) {
   12fb4:	46b0      	mov	r8, r6
		ret = 0;
   12fb6:	462c      	mov	r4, r5
		for (pfd = fds, i = nfds; i--; pfd++) {
   12fb8:	9f03      	ldr	r7, [sp, #12]
   12fba:	b9ef      	cbnz	r7, 12ff8 <z_impl_zsock_poll+0x1a0>
		if (retry) {
   12fbc:	2d00      	cmp	r5, #0
   12fbe:	f43f af7f 	beq.w	12ec0 <z_impl_zsock_poll+0x68>
			if (ret > 0) {
   12fc2:	2c00      	cmp	r4, #0
   12fc4:	f73f af7c 	bgt.w	12ec0 <z_impl_zsock_poll+0x68>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   12fc8:	ea5a 030b 	orrs.w	r3, sl, fp
   12fcc:	f43f af78 	beq.w	12ec0 <z_impl_zsock_poll+0x68>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   12fd0:	f1bb 3fff 	cmp.w	fp, #4294967295
   12fd4:	bf08      	it	eq
   12fd6:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   12fda:	d0cc      	beq.n	12f76 <z_impl_zsock_poll+0x11e>
				int64_t remaining = end - z_tick_get();
   12fdc:	f00e fc72 	bl	218c4 <z_tick_get>
   12fe0:	9b04      	ldr	r3, [sp, #16]
   12fe2:	ebb3 0a00 	subs.w	sl, r3, r0
   12fe6:	9b05      	ldr	r3, [sp, #20]
   12fe8:	eb63 0b01 	sbc.w	fp, r3, r1
				if (remaining <= 0) {
   12fec:	f1ba 0f01 	cmp.w	sl, #1
   12ff0:	f17b 0300 	sbcs.w	r3, fp, #0
   12ff4:	dabf      	bge.n	12f76 <z_impl_zsock_poll+0x11e>
   12ff6:	e763      	b.n	12ec0 <z_impl_zsock_poll+0x68>
			if (pfd->fd < 0) {
   12ff8:	f8d8 0000 	ldr.w	r0, [r8]
			pfd->revents = 0;
   12ffc:	f8a8 9006 	strh.w	r9, [r8, #6]
			if (pfd->fd < 0) {
   13000:	2800      	cmp	r0, #0
   13002:	db1c      	blt.n	1303e <z_impl_zsock_poll+0x1e6>
	ctx = z_get_fd_obj_and_vtable(sock,
   13004:	a90a      	add	r1, sp, #40	; 0x28
   13006:	f7fe fe01 	bl	11c0c <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   1300a:	4601      	mov	r1, r0
   1300c:	b920      	cbnz	r0, 13018 <z_impl_zsock_poll+0x1c0>
				pfd->revents = ZSOCK_POLLNVAL;
   1300e:	2220      	movs	r2, #32
   13010:	f8a8 2006 	strh.w	r2, [r8, #6]
				ret++;
   13014:	3401      	adds	r4, #1
   13016:	e012      	b.n	1303e <z_impl_zsock_poll+0x1e6>
			result = z_fdtable_call_ioctl(vtable, ctx,
   13018:	ab09      	add	r3, sp, #36	; 0x24
   1301a:	f240 1203 	movw	r2, #259	; 0x103
   1301e:	9300      	str	r3, [sp, #0]
   13020:	980a      	ldr	r0, [sp, #40]	; 0x28
   13022:	4643      	mov	r3, r8
   13024:	f016 f844 	bl	290b0 <z_fdtable_call_ioctl>
			if (result == -EAGAIN) {
   13028:	f110 0f0b 	cmn.w	r0, #11
			result = z_fdtable_call_ioctl(vtable, ctx,
   1302c:	4602      	mov	r2, r0
			if (result == -EAGAIN) {
   1302e:	d00a      	beq.n	13046 <z_impl_zsock_poll+0x1ee>
			} else if (result != 0) {
   13030:	2800      	cmp	r0, #0
   13032:	f47f af75 	bne.w	12f20 <z_impl_zsock_poll+0xc8>
			if (pfd->revents != 0) {
   13036:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
   1303a:	2a00      	cmp	r2, #0
   1303c:	d1ea      	bne.n	13014 <z_impl_zsock_poll+0x1bc>
		for (pfd = fds, i = nfds; i--; pfd++) {
   1303e:	f108 0808 	add.w	r8, r8, #8
   13042:	3f01      	subs	r7, #1
   13044:	e7b9      	b.n	12fba <z_impl_zsock_poll+0x162>
				retry = true;
   13046:	2501      	movs	r5, #1
   13048:	e7f9      	b.n	1303e <z_impl_zsock_poll+0x1e6>
   1304a:	bf00      	nop
   1304c:	cccccccd 	.word	0xcccccccd

00013050 <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
   13050:	4b01      	ldr	r3, [pc, #4]	; (13058 <socket_offload_dns_register+0x8>)
   13052:	6018      	str	r0, [r3, #0]
}
   13054:	4770      	bx	lr
   13056:	bf00      	nop
   13058:	20021538 	.word	0x20021538

0001305c <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   1305c:	b410      	push	{r4}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);

	return dns_offload->getaddrinfo(node, service, hints, res);
   1305e:	4c03      	ldr	r4, [pc, #12]	; (1306c <socket_offload_getaddrinfo+0x10>)
   13060:	6824      	ldr	r4, [r4, #0]
   13062:	6824      	ldr	r4, [r4, #0]
   13064:	46a4      	mov	ip, r4
}
   13066:	f85d 4b04 	ldr.w	r4, [sp], #4
	return dns_offload->getaddrinfo(node, service, hints, res);
   1306a:	4760      	bx	ip
   1306c:	20021538 	.word	0x20021538

00013070 <socket_offload_freeaddrinfo>:
void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);

	return dns_offload->freeaddrinfo(res);
   13070:	4b01      	ldr	r3, [pc, #4]	; (13078 <socket_offload_freeaddrinfo+0x8>)
   13072:	681b      	ldr	r3, [r3, #0]
   13074:	685b      	ldr	r3, [r3, #4]
   13076:	4718      	bx	r3
   13078:	20021538 	.word	0x20021538

0001307c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1307c:	b508      	push	{r3, lr}
   1307e:	4806      	ldr	r0, [pc, #24]	; (13098 <uart_console_init+0x1c>)
   13080:	f00d fa58 	bl	20534 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   13084:	4b05      	ldr	r3, [pc, #20]	; (1309c <uart_console_init+0x20>)
   13086:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   13088:	4805      	ldr	r0, [pc, #20]	; (130a0 <uart_console_init+0x24>)
   1308a:	f001 f8cd 	bl	14228 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1308e:	4804      	ldr	r0, [pc, #16]	; (130a0 <uart_console_init+0x24>)
   13090:	f7fe fe82 	bl	11d98 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   13094:	2000      	movs	r0, #0
   13096:	bd08      	pop	{r3, pc}
   13098:	0002cbe1 	.word	0x0002cbe1
   1309c:	2002153c 	.word	0x2002153c
   130a0:	000130a5 	.word	0x000130a5

000130a4 <console_out>:
	if ('\n' == c) {
   130a4:	280a      	cmp	r0, #10
{
   130a6:	b538      	push	{r3, r4, r5, lr}
   130a8:	4604      	mov	r4, r0
   130aa:	4d07      	ldr	r5, [pc, #28]	; (130c8 <console_out+0x24>)
	if ('\n' == c) {
   130ac:	d104      	bne.n	130b8 <console_out+0x14>
   130ae:	6828      	ldr	r0, [r5, #0]
   130b0:	6883      	ldr	r3, [r0, #8]
   130b2:	210d      	movs	r1, #13
   130b4:	685b      	ldr	r3, [r3, #4]
   130b6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   130b8:	6828      	ldr	r0, [r5, #0]
   130ba:	6883      	ldr	r3, [r0, #8]
   130bc:	b2e1      	uxtb	r1, r4
   130be:	685b      	ldr	r3, [r3, #4]
   130c0:	4798      	blx	r3
}
   130c2:	4620      	mov	r0, r4
   130c4:	bd38      	pop	{r3, r4, r5, pc}
   130c6:	bf00      	nop
   130c8:	2002153c 	.word	0x2002153c

000130cc <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   130cc:	b570      	push	{r4, r5, r6, lr}
   130ce:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
   130d0:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
   130d2:	480d      	ldr	r0, [pc, #52]	; (13108 <onoff_stop+0x3c>)
{
   130d4:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
   130d6:	1a23      	subs	r3, r4, r0
   130d8:	109a      	asrs	r2, r3, #2
   130da:	4b0c      	ldr	r3, [pc, #48]	; (1310c <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
   130dc:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   130de:	4353      	muls	r3, r2
   130e0:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
   130e2:	435d      	muls	r5, r3
   130e4:	f105 0340 	add.w	r3, r5, #64	; 0x40
   130e8:	4418      	add	r0, r3
   130ea:	f016 f876 	bl	291da <set_off_state>
	if (err < 0) {
   130ee:	1e01      	subs	r1, r0, #0
   130f0:	db04      	blt.n	130fc <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   130f2:	4b07      	ldr	r3, [pc, #28]	; (13110 <onoff_stop+0x44>)
   130f4:	442b      	add	r3, r5
   130f6:	685b      	ldr	r3, [r3, #4]
   130f8:	4798      	blx	r3
	return 0;
   130fa:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   130fc:	4620      	mov	r0, r4
   130fe:	4633      	mov	r3, r6
}
   13100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   13104:	4718      	bx	r3
   13106:	bf00      	nop
   13108:	20021550 	.word	0x20021550
   1310c:	b6db6db7 	.word	0xb6db6db7
   13110:	0002ba24 	.word	0x0002ba24

00013114 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   13114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   13118:	4c0f      	ldr	r4, [pc, #60]	; (13158 <onoff_start+0x44>)
   1311a:	4d10      	ldr	r5, [pc, #64]	; (1315c <onoff_start+0x48>)
   1311c:	1b03      	subs	r3, r0, r4
   1311e:	109b      	asrs	r3, r3, #2
   13120:	435d      	muls	r5, r3
   13122:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
   13124:	250c      	movs	r5, #12
   13126:	435d      	muls	r5, r3
{
   13128:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   1312a:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   1312e:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   13130:	4420      	add	r0, r4
   13132:	2140      	movs	r1, #64	; 0x40
   13134:	f016 f86a 	bl	2920c <set_starting_state>
	if (err < 0) {
   13138:	1e01      	subs	r1, r0, #0
   1313a:	db08      	blt.n	1314e <onoff_start+0x3a>
	subdata->cb = data->cb;
   1313c:	4b08      	ldr	r3, [pc, #32]	; (13160 <onoff_start+0x4c>)
   1313e:	442c      	add	r4, r5
	subdata->user_data = data->user_data;
   13140:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   13144:	4b07      	ldr	r3, [pc, #28]	; (13164 <onoff_start+0x50>)
   13146:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   13148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   1314c:	4718      	bx	r3
		notify(mgr, err);
   1314e:	4638      	mov	r0, r7
   13150:	4633      	mov	r3, r6
}
   13152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   13156:	4718      	bx	r3
   13158:	20021550 	.word	0x20021550
   1315c:	b6db6db7 	.word	0xb6db6db7
   13160:	0002926f 	.word	0x0002926f
   13164:	0002ba24 	.word	0x0002ba24

00013168 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   13168:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1316a:	2200      	movs	r2, #0
   1316c:	2101      	movs	r1, #1
{
   1316e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13170:	2005      	movs	r0, #5
   13172:	f000 fac9 	bl	13708 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   13176:	2005      	movs	r0, #5
   13178:	f000 faa8 	bl	136cc <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
   1317c:	480f      	ldr	r0, [pc, #60]	; (131bc <clk_init+0x54>)
   1317e:	f00d f8e5 	bl	2034c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   13182:	4b0f      	ldr	r3, [pc, #60]	; (131c0 <clk_init+0x58>)
   13184:	4298      	cmp	r0, r3
   13186:	d115      	bne.n	131b4 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   13188:	f017 fd2f 	bl	2abea <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   1318c:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1318e:	490d      	ldr	r1, [pc, #52]	; (131c4 <clk_init+0x5c>)
   13190:	4630      	mov	r0, r6
   13192:	f015 f97d 	bl	28490 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   13196:	2800      	cmp	r0, #0
   13198:	db0b      	blt.n	131b2 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1319a:	2501      	movs	r5, #1
   1319c:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   1319e:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   131a0:	4908      	ldr	r1, [pc, #32]	; (131c4 <clk_init+0x5c>)
   131a2:	f104 001c 	add.w	r0, r4, #28
   131a6:	f015 f973 	bl	28490 <onoff_manager_init>
		if (err < 0) {
   131aa:	2800      	cmp	r0, #0
   131ac:	db01      	blt.n	131b2 <clk_init+0x4a>
	}

	return 0;
   131ae:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   131b0:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   131b2:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   131b4:	f06f 0004 	mvn.w	r0, #4
   131b8:	e7fb      	b.n	131b2 <clk_init+0x4a>
   131ba:	bf00      	nop
   131bc:	00013205 	.word	0x00013205
   131c0:	0bad0000 	.word	0x0bad0000
   131c4:	0002ba3c 	.word	0x0002ba3c

000131c8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   131c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   131ca:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   131cc:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   131ce:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   131d0:	434b      	muls	r3, r1
   131d2:	480a      	ldr	r0, [pc, #40]	; (131fc <clkstarted_handle.constprop.0+0x34>)
   131d4:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   131d6:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
   131d8:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   131dc:	4418      	add	r0, r3
	sub_data->cb = NULL;
   131de:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
   131e0:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   131e2:	f016 f831 	bl	29248 <set_on_state>
	if (callback) {
   131e6:	b135      	cbz	r5, 131f6 <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   131e8:	462b      	mov	r3, r5
   131ea:	9a01      	ldr	r2, [sp, #4]
   131ec:	4804      	ldr	r0, [pc, #16]	; (13200 <clkstarted_handle.constprop.0+0x38>)
}
   131ee:	b002      	add	sp, #8
   131f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   131f4:	4718      	bx	r3
}
   131f6:	b002      	add	sp, #8
   131f8:	bd70      	pop	{r4, r5, r6, pc}
   131fa:	bf00      	nop
   131fc:	20021550 	.word	0x20021550
   13200:	20020a60 	.word	0x20020a60

00013204 <clock_event_handler>:
	switch (event) {
   13204:	b110      	cbz	r0, 1320c <clock_event_handler+0x8>
   13206:	2801      	cmp	r0, #1
   13208:	d004      	beq.n	13214 <clock_event_handler+0x10>
   1320a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1320c:	4b03      	ldr	r3, [pc, #12]	; (1321c <clock_event_handler+0x18>)
   1320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   13210:	075b      	lsls	r3, r3, #29
   13212:	d101      	bne.n	13218 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   13214:	f7ff bfd8 	b.w	131c8 <clkstarted_handle.constprop.0>
}
   13218:	4770      	bx	lr
   1321a:	bf00      	nop
   1321c:	20021550 	.word	0x20021550

00013220 <generic_hfclk_start>:
{
   13220:	b508      	push	{r3, lr}
	__asm__ volatile(
   13222:	f04f 0320 	mov.w	r3, #32
   13226:	f3ef 8111 	mrs	r1, BASEPRI
   1322a:	f383 8811 	msr	BASEPRI, r3
   1322e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   13232:	4a11      	ldr	r2, [pc, #68]	; (13278 <generic_hfclk_start+0x58>)
   13234:	6813      	ldr	r3, [r2, #0]
   13236:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1323a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1323e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   13240:	d00b      	beq.n	1325a <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   13242:	4a0e      	ldr	r2, [pc, #56]	; (1327c <generic_hfclk_start+0x5c>)
   13244:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   13248:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1324c:	f013 0301 	ands.w	r3, r3, #1
   13250:	d003      	beq.n	1325a <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   13252:	480b      	ldr	r0, [pc, #44]	; (13280 <generic_hfclk_start+0x60>)
   13254:	f015 fff8 	bl	29248 <set_on_state>
			already_started = true;
   13258:	2301      	movs	r3, #1
	__asm__ volatile(
   1325a:	f381 8811 	msr	BASEPRI, r1
   1325e:	f3bf 8f6f 	isb	sy
	if (already_started) {
   13262:	b123      	cbz	r3, 1326e <generic_hfclk_start+0x4e>
}
   13264:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
   13268:	2000      	movs	r0, #0
   1326a:	f7ff bfad 	b.w	131c8 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1326e:	2001      	movs	r0, #1
}
   13270:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13274:	f00d b87a 	b.w	2036c <nrfx_clock_start>
   13278:	200215a0 	.word	0x200215a0
   1327c:	40005000 	.word	0x40005000
   13280:	20021590 	.word	0x20021590

00013284 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13284:	4b07      	ldr	r3, [pc, #28]	; (132a4 <generic_hfclk_stop+0x20>)
   13286:	e8d3 2fef 	ldaex	r2, [r3]
   1328a:	f022 0102 	bic.w	r1, r2, #2
   1328e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   13292:	2800      	cmp	r0, #0
   13294:	d1f7      	bne.n	13286 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   13296:	07d3      	lsls	r3, r2, #31
   13298:	d402      	bmi.n	132a0 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1329a:	2001      	movs	r0, #1
   1329c:	f00d b898 	b.w	203d0 <nrfx_clock_stop>
}
   132a0:	4770      	bx	lr
   132a2:	bf00      	nop
   132a4:	200215a0 	.word	0x200215a0

000132a8 <api_blocking_start>:
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   132a8:	2300      	movs	r3, #0
   132aa:	2201      	movs	r2, #1
{
   132ac:	b510      	push	{r4, lr}
   132ae:	b08a      	sub	sp, #40	; 0x28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   132b0:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
   132b4:	9301      	str	r3, [sp, #4]
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   132b6:	aa08      	add	r2, sp, #32
	struct clock_control_async_data data = {
   132b8:	4b0a      	ldr	r3, [pc, #40]	; (132e4 <api_blocking_start+0x3c>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   132ba:	e9cd 2208 	strd	r2, r2, [sp, #32]
   132be:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
   132c0:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   132c2:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
   132c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
   132ca:	f015 fff7 	bl	292bc <api_start>
	if (err < 0) {
   132ce:	2800      	cmp	r0, #0
   132d0:	db05      	blt.n	132de <api_blocking_start+0x36>
	return z_impl_k_sem_take(sem, timeout);
   132d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   132d6:	2300      	movs	r3, #0
   132d8:	4620      	mov	r0, r4
   132da:	f00e f851 	bl	21380 <z_impl_k_sem_take>
}
   132de:	b00a      	add	sp, #40	; 0x28
   132e0:	bd10      	pop	{r4, pc}
   132e2:	bf00      	nop
   132e4:	00029283 	.word	0x00029283

000132e8 <z_nrf_clock_control_lf_on>:
{
   132e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   132ec:	2201      	movs	r2, #1
   132ee:	4607      	mov	r7, r0
   132f0:	4936      	ldr	r1, [pc, #216]	; (133cc <z_nrf_clock_control_lf_on+0xe4>)
   132f2:	e8d1 3fef 	ldaex	r3, [r1]
   132f6:	e8c1 2fe0 	stlex	r0, r2, [r1]
   132fa:	2800      	cmp	r0, #0
   132fc:	d1f9      	bne.n	132f2 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   132fe:	b933      	cbnz	r3, 1330e <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   13300:	4933      	ldr	r1, [pc, #204]	; (133d0 <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
   13302:	4834      	ldr	r0, [pc, #208]	; (133d4 <z_nrf_clock_control_lf_on+0xec>)
   13304:	604b      	str	r3, [r1, #4]
   13306:	60cb      	str	r3, [r1, #12]
   13308:	608a      	str	r2, [r1, #8]
   1330a:	f015 f8d4 	bl	284b6 <onoff_request>
	switch (start_mode) {
   1330e:	1e7b      	subs	r3, r7, #1
   13310:	2b01      	cmp	r3, #1
   13312:	d82e      	bhi.n	13372 <z_nrf_clock_control_lf_on+0x8a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   13314:	2f01      	cmp	r7, #1
   13316:	d106      	bne.n	13326 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   13318:	4b2f      	ldr	r3, [pc, #188]	; (133d8 <z_nrf_clock_control_lf_on+0xf0>)
   1331a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1331e:	f003 0303 	and.w	r3, r3, #3
   13322:	2b02      	cmp	r3, #2
   13324:	d025      	beq.n	13372 <z_nrf_clock_control_lf_on+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   13326:	f017 fe95 	bl	2b054 <k_is_in_isr>
   1332a:	4604      	mov	r4, r0
   1332c:	b918      	cbnz	r0, 13336 <z_nrf_clock_control_lf_on+0x4e>
	return !z_sys_post_kernel;
   1332e:	4b2b      	ldr	r3, [pc, #172]	; (133dc <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
   13330:	781b      	ldrb	r3, [r3, #0]
   13332:	2b00      	cmp	r3, #0
   13334:	d144      	bne.n	133c0 <z_nrf_clock_control_lf_on+0xd8>
	__asm__ volatile(
   13336:	f04f 0320 	mov.w	r3, #32
   1333a:	f3ef 8611 	mrs	r6, BASEPRI
   1333e:	f383 8811 	msr	BASEPRI, r3
   13342:	f3bf 8f6f 	isb	sy
   13346:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13348:	4d23      	ldr	r5, [pc, #140]	; (133d8 <z_nrf_clock_control_lf_on+0xf0>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1334a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 133e8 <z_nrf_clock_control_lf_on+0x100>
   1334e:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13350:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13354:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   13358:	03d2      	lsls	r2, r2, #15
   1335a:	d50c      	bpl.n	13376 <z_nrf_clock_control_lf_on+0x8e>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1335c:	f003 0303 	and.w	r3, r3, #3
   13360:	2b02      	cmp	r3, #2
   13362:	d001      	beq.n	13368 <z_nrf_clock_control_lf_on+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   13364:	2f01      	cmp	r7, #1
   13366:	d106      	bne.n	13376 <z_nrf_clock_control_lf_on+0x8e>
	if (isr_mode) {
   13368:	b334      	cbz	r4, 133b8 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   1336a:	f386 8811 	msr	BASEPRI, r6
   1336e:	f3bf 8f6f 	isb	sy
}
   13372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   13376:	b1d4      	cbz	r4, 133ae <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   13378:	4630      	mov	r0, r6
   1337a:	f000 fa41 	bl	13800 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1337e:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   13382:	b2db      	uxtb	r3, r3
   13384:	2b01      	cmp	r3, #1
   13386:	d1e3      	bne.n	13350 <z_nrf_clock_control_lf_on+0x68>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13388:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   1338c:	2a00      	cmp	r2, #0
   1338e:	d0df      	beq.n	13350 <z_nrf_clock_control_lf_on+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13390:	2200      	movs	r2, #0
   13392:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   13396:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1339a:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1339c:	2120      	movs	r1, #32
   1339e:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   133a2:	4a0f      	ldr	r2, [pc, #60]	; (133e0 <z_nrf_clock_control_lf_on+0xf8>)
   133a4:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   133a8:	4a0e      	ldr	r2, [pc, #56]	; (133e4 <z_nrf_clock_control_lf_on+0xfc>)
   133aa:	6013      	str	r3, [r2, #0]
}
   133ac:	e7d0      	b.n	13350 <z_nrf_clock_control_lf_on+0x68>
	return z_impl_k_sleep(timeout);
   133ae:	2100      	movs	r1, #0
   133b0:	2021      	movs	r0, #33	; 0x21
   133b2:	f00d ff99 	bl	212e8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   133b6:	e7e2      	b.n	1337e <z_nrf_clock_control_lf_on+0x96>
    p_reg->INTENSET = mask;
   133b8:	2302      	movs	r3, #2
   133ba:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   133be:	e7d8      	b.n	13372 <z_nrf_clock_control_lf_on+0x8a>
    p_reg->INTENCLR = mask;
   133c0:	2202      	movs	r2, #2
   133c2:	4b05      	ldr	r3, [pc, #20]	; (133d8 <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
   133c4:	4606      	mov	r6, r0
   133c6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   133ca:	e7bd      	b.n	13348 <z_nrf_clock_control_lf_on+0x60>
   133cc:	200215a4 	.word	0x200215a4
   133d0:	20021540 	.word	0x20021540
   133d4:	2002156c 	.word	0x2002156c
   133d8:	40005000 	.word	0x40005000
   133dc:	2002501d 	.word	0x2002501d
   133e0:	e000e100 	.word	0xe000e100
   133e4:	40005008 	.word	0x40005008
   133e8:	40005104 	.word	0x40005104

000133ec <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
   133ec:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   133ee:	4b08      	ldr	r3, [pc, #32]	; (13410 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   133f0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   133f4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   133f8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   133fc:	4290      	cmp	r0, r2
   133fe:	d100      	bne.n	13402 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   13400:	4770      	bx	lr
   13402:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   13406:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   13408:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1340c:	e7f2      	b.n	133f4 <handle_next_cycle_case+0x8>
   1340e:	bf00      	nop
   13410:	40015000 	.word	0x40015000

00013414 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13414:	2200      	movs	r2, #0
   13416:	4b07      	ldr	r3, [pc, #28]	; (13434 <rtc_nrf_isr+0x20>)
   13418:	601a      	str	r2, [r3, #0]
   1341a:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   1341c:	4a06      	ldr	r2, [pc, #24]	; (13438 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
   1341e:	4b07      	ldr	r3, [pc, #28]	; (1343c <rtc_nrf_isr+0x28>)
   13420:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
   13424:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   13426:	1ac0      	subs	r0, r0, r3
   13428:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   1342c:	4403      	add	r3, r0
   1342e:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
   13430:	f00e b9de 	b.w	217f0 <z_clock_announce>
   13434:	40015140 	.word	0x40015140
   13438:	200215a8 	.word	0x200215a8
   1343c:	40015000 	.word	0x40015000

00013440 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
   13440:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   13442:	2400      	movs	r4, #0
   13444:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   13448:	4d0e      	ldr	r5, [pc, #56]	; (13484 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1344a:	4b0f      	ldr	r3, [pc, #60]	; (13488 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
   1344c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13450:	601c      	str	r4, [r3, #0]
   13452:	681b      	ldr	r3, [r3, #0]
   13454:	4b0d      	ldr	r3, [pc, #52]	; (1348c <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
   13456:	2101      	movs	r1, #1
   13458:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   1345c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   13460:	4622      	mov	r2, r4
   13462:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   13466:	2015      	movs	r0, #21
   13468:	f000 f94e 	bl	13708 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
   1346c:	2015      	movs	r0, #21
   1346e:	f000 f92d 	bl	136cc <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   13472:	2301      	movs	r3, #1
   13474:	4a06      	ldr	r2, [pc, #24]	; (13490 <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
   13476:	2002      	movs	r0, #2
   13478:	6013      	str	r3, [r2, #0]
   1347a:	602b      	str	r3, [r5, #0]
   1347c:	f7ff ff34 	bl	132e8 <z_nrf_clock_control_lf_on>

	return 0;
}
   13480:	4620      	mov	r0, r4
   13482:	bd38      	pop	{r3, r4, r5, pc}
   13484:	40015000 	.word	0x40015000
   13488:	40015140 	.word	0x40015140
   1348c:	e000e100 	.word	0xe000e100
   13490:	40015008 	.word	0x40015008

00013494 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
   13494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
   13496:	4b2d      	ldr	r3, [pc, #180]	; (1354c <z_clock_set_timeout+0xb8>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13498:	4c2d      	ldr	r4, [pc, #180]	; (13550 <z_clock_set_timeout+0xbc>)
   1349a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
   1349e:	4b2d      	ldr	r3, [pc, #180]	; (13554 <z_clock_set_timeout+0xc0>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   134a0:	f1b0 3fff 	cmp.w	r0, #4294967295
   134a4:	bf08      	it	eq
   134a6:	4620      	moveq	r0, r4
	uint32_t unannounced = counter_sub(counter(), last_count);
   134a8:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   134aa:	1a52      	subs	r2, r2, r1
   134ac:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   134b0:	0212      	lsls	r2, r2, #8
   134b2:	d438      	bmi.n	13526 <z_clock_set_timeout+0x92>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
   134b4:	3801      	subs	r0, #1
   134b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   134ba:	42a0      	cmp	r0, r4
   134bc:	bfa8      	it	ge
   134be:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   134c0:	3301      	adds	r3, #1
   134c2:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   134c4:	42a0      	cmp	r0, r4
   134c6:	bf94      	ite	ls
   134c8:	180c      	addls	r4, r1, r0
   134ca:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   134cc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   134d0:	2600      	movs	r6, #0
    p_reg->INTENCLR = mask;
   134d2:	4a1e      	ldr	r2, [pc, #120]	; (1354c <z_clock_set_timeout+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   134d4:	4d20      	ldr	r5, [pc, #128]	; (13558 <z_clock_set_timeout+0xc4>)
    p_reg->INTENCLR = mask;
   134d6:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
     return p_reg->COUNTER;
   134da:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
    return p_reg->CC[ch];
   134de:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   134e2:	602e      	str	r6, [r5, #0]
	return (a - b) & COUNTER_MAX;
   134e4:	1a5b      	subs	r3, r3, r1
   134e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   134ea:	682f      	ldr	r7, [r5, #0]
	if (counter_sub(prev_val, now) == 1) {
   134ec:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   134ee:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   134f2:	f8c2 7540 	str.w	r7, [r2, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   134f6:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
   134fa:	d104      	bne.n	13506 <z_clock_set_timeout+0x72>
	z_impl_k_busy_wait(usec_to_wait);
   134fc:	200f      	movs	r0, #15
   134fe:	f017 fdaf 	bl	2b060 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13502:	602e      	str	r6, [r5, #0]
   13504:	682b      	ldr	r3, [r5, #0]
   13506:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1350a:	4b14      	ldr	r3, [pc, #80]	; (1355c <z_clock_set_timeout+0xc8>)
   1350c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   13510:	4b0e      	ldr	r3, [pc, #56]	; (1354c <z_clock_set_timeout+0xb8>)
   13512:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   13516:	1a22      	subs	r2, r4, r0
   13518:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
   1351c:	2a01      	cmp	r2, #1
   1351e:	d104      	bne.n	1352a <z_clock_set_timeout+0x96>
		handle_next_cycle_case(t);
   13520:	f7ff ff64 	bl	133ec <handle_next_cycle_case>
   13524:	e00b      	b.n	1353e <z_clock_set_timeout+0xaa>
		ticks = 0;
   13526:	2000      	movs	r0, #0
   13528:	e7ca      	b.n	134c0 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1352a:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1352e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
   13532:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   13536:	1a24      	subs	r4, r4, r0
   13538:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
   1353a:	0223      	lsls	r3, r4, #8
   1353c:	d4f0      	bmi.n	13520 <z_clock_set_timeout+0x8c>
    p_reg->INTENSET = mask;
   1353e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   13542:	4b02      	ldr	r3, [pc, #8]	; (1354c <z_clock_set_timeout+0xb8>)
   13544:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
   13548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1354a:	bf00      	nop
   1354c:	40015000 	.word	0x40015000
   13550:	007fffff 	.word	0x007fffff
   13554:	200215a8 	.word	0x200215a8
   13558:	40015140 	.word	0x40015140
   1355c:	e000e100 	.word	0xe000e100

00013560 <z_clock_elapsed>:
	__asm__ volatile(
   13560:	f04f 0220 	mov.w	r2, #32
   13564:	f3ef 8311 	mrs	r3, BASEPRI
   13568:	f382 8811 	msr	BASEPRI, r2
   1356c:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   13570:	4a06      	ldr	r2, [pc, #24]	; (1358c <z_clock_elapsed+0x2c>)
   13572:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   13576:	4a06      	ldr	r2, [pc, #24]	; (13590 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   13578:	6812      	ldr	r2, [r2, #0]
   1357a:	1a80      	subs	r0, r0, r2
   1357c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   13580:	f383 8811 	msr	BASEPRI, r3
   13584:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   13588:	4770      	bx	lr
   1358a:	bf00      	nop
   1358c:	40015000 	.word	0x40015000
   13590:	200215a8 	.word	0x200215a8

00013594 <z_timer_cycle_get_32>:
	__asm__ volatile(
   13594:	f04f 0320 	mov.w	r3, #32
   13598:	f3ef 8211 	mrs	r2, BASEPRI
   1359c:	f383 8811 	msr	BASEPRI, r3
   135a0:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   135a4:	4906      	ldr	r1, [pc, #24]	; (135c0 <z_timer_cycle_get_32+0x2c>)
   135a6:	4b07      	ldr	r3, [pc, #28]	; (135c4 <z_timer_cycle_get_32+0x30>)
   135a8:	6808      	ldr	r0, [r1, #0]
   135aa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   135ae:	f382 8811 	msr	BASEPRI, r2
   135b2:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   135b6:	1a1b      	subs	r3, r3, r0
   135b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   135bc:	4418      	add	r0, r3
   135be:	4770      	bx	lr
   135c0:	200215a8 	.word	0x200215a8
   135c4:	40015000 	.word	0x40015000

000135c8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   135c8:	4a09      	ldr	r2, [pc, #36]	; (135f0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   135ca:	490a      	ldr	r1, [pc, #40]	; (135f4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   135cc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   135ce:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   135d0:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   135d2:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   135d4:	4908      	ldr	r1, [pc, #32]	; (135f8 <arch_swap+0x30>)
   135d6:	684b      	ldr	r3, [r1, #4]
   135d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   135dc:	604b      	str	r3, [r1, #4]
   135de:	2300      	movs	r3, #0
   135e0:	f383 8811 	msr	BASEPRI, r3
   135e4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   135e8:	6893      	ldr	r3, [r2, #8]
}
   135ea:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   135ec:	4770      	bx	lr
   135ee:	bf00      	nop
   135f0:	20021d74 	.word	0x20021d74
   135f4:	0002bf48 	.word	0x0002bf48
   135f8:	e000ed00 	.word	0xe000ed00

000135fc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   135fc:	4929      	ldr	r1, [pc, #164]	; (136a4 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   135fe:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13600:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   13604:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13606:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1360a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   1360e:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   13612:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   13616:	d004      	beq.n	13622 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   13618:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   1361c:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   13620:	e007      	b.n	13632 <out_fp_endif>

00013622 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   13622:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
   13626:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   1362a:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   1362e:	f050 0004 	orrs.w	r0, r0, #4

00013632 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   13632:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13636:	2020      	movs	r0, #32
    msr BASEPRI, r0
   13638:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1363c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13640:	4f19      	ldr	r7, [pc, #100]	; (136a8 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13642:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   13646:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   13648:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1364a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1364c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1364e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13650:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   13652:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   13656:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   1365a:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   1365e:	d105      	bne.n	1366c <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   13660:	2300      	movs	r3, #0
    vmsr fpscr, r3
   13662:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   13666:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   1366a:	e005      	b.n	13678 <in_fp_endif>

0001366c <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   1366c:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   13670:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
   13674:	ec90 8a10 	vldmia	r0, {s16-s31}

00013678 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   13678:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   1367c:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   13680:	f383 8814 	msr	CONTROL, r3
    isb
   13684:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   13688:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   1368c:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   13690:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   13694:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   13698:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   1369a:	f015 fe2e 	bl	292fa <configure_builtin_stack_guard>
    pop {r2, lr}
   1369e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   136a2:	4770      	bx	lr
    ldr r1, =_kernel
   136a4:	20021d74 	.word	0x20021d74
    ldr v4, =_SCS_ICSR
   136a8:	e000ed04 	.word	0xe000ed04

000136ac <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   136ac:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   136b0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   136b2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   136b6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   136ba:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   136bc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   136c0:	2902      	cmp	r1, #2
    beq _oops
   136c2:	d0ff      	beq.n	136c4 <_oops>

000136c4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   136c4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   136c6:	f015 fe1c 	bl	29302 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   136ca:	bd01      	pop	{r0, pc}

000136cc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   136cc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   136ce:	2b00      	cmp	r3, #0
   136d0:	db08      	blt.n	136e4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   136d2:	2201      	movs	r2, #1
   136d4:	f000 001f 	and.w	r0, r0, #31
   136d8:	fa02 f000 	lsl.w	r0, r2, r0
   136dc:	4a02      	ldr	r2, [pc, #8]	; (136e8 <arch_irq_enable+0x1c>)
   136de:	095b      	lsrs	r3, r3, #5
   136e0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   136e4:	4770      	bx	lr
   136e6:	bf00      	nop
   136e8:	e000e100 	.word	0xe000e100

000136ec <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   136ec:	4b05      	ldr	r3, [pc, #20]	; (13704 <arch_irq_is_enabled+0x18>)
   136ee:	0942      	lsrs	r2, r0, #5
   136f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   136f4:	2301      	movs	r3, #1
   136f6:	f000 001f 	and.w	r0, r0, #31
   136fa:	fa03 f000 	lsl.w	r0, r3, r0
}
   136fe:	4010      	ands	r0, r2
   13700:	4770      	bx	lr
   13702:	bf00      	nop
   13704:	e000e100 	.word	0xe000e100

00013708 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   13708:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1370a:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
   1370c:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13710:	bfac      	ite	ge
   13712:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13716:	4b06      	ldrlt	r3, [pc, #24]	; (13730 <z_arm_irq_priority_set+0x28>)
   13718:	ea4f 1141 	mov.w	r1, r1, lsl #5
   1371c:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1371e:	bfab      	itete	ge
   13720:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13724:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13728:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1372c:	5419      	strblt	r1, [r3, r0]
}
   1372e:	4770      	bx	lr
   13730:	e000ed14 	.word	0xe000ed14

00013734 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   13734:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   13736:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13738:	4b04      	ldr	r3, [pc, #16]	; (1374c <_arch_isr_direct_pm+0x18>)
   1373a:	6a18      	ldr	r0, [r3, #32]
   1373c:	b118      	cbz	r0, 13746 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   1373e:	2200      	movs	r2, #0
   13740:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   13742:	f017 fa5d 	bl	2ac00 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   13746:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13748:	bd08      	pop	{r3, pc}
   1374a:	bf00      	nop
   1374c:	20021d74 	.word	0x20021d74

00013750 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   13750:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13754:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   13756:	490c      	ldr	r1, [pc, #48]	; (13788 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
   13758:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1375c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   1375e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   13762:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   13766:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   13768:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   1376c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   13770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   13774:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   13778:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1377a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1377c:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   1377e:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
   13780:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13784:	4770      	bx	lr
   13786:	bf00      	nop
   13788:	00028571 	.word	0x00028571

0001378c <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   1378c:	b508      	push	{r3, lr}
   1378e:	4604      	mov	r4, r0
   13790:	460e      	mov	r6, r1
   13792:	4615      	mov	r5, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   13794:	2300      	movs	r3, #0
   13796:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1379a:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   1379e:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   137a2:	f383 8814 	msr	CONTROL, r3
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   137a6:	f3bf 8f6f 	isb	sy
	z_arm_configure_static_mpu_regions();
   137aa:	f000 fb8f 	bl	13ecc <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   137ae:	4b09      	ldr	r3, [pc, #36]	; (137d4 <arch_switch_to_main_thread+0x48>)
   137b0:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   137b2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   137b4:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   137b8:	4628      	mov	r0, r5
   137ba:	f386 8809 	msr	PSP, r6
   137be:	2100      	movs	r1, #0
   137c0:	b663      	cpsie	if
   137c2:	f381 8811 	msr	BASEPRI, r1
   137c6:	f3bf 8f6f 	isb	sy
   137ca:	2200      	movs	r2, #0
   137cc:	2300      	movs	r3, #0
   137ce:	f014 fecf 	bl	28570 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   137d2:	bf00      	nop
   137d4:	20021d74 	.word	0x20021d74

000137d8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   137d8:	4901      	ldr	r1, [pc, #4]	; (137e0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   137da:	2210      	movs	r2, #16
	str	r2, [r1]
   137dc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   137de:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   137e0:	e000ed10 	.word	0xe000ed10

000137e4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   137e4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   137e6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   137e8:	f380 8811 	msr	BASEPRI, r0
	isb
   137ec:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   137f0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   137f4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   137f6:	b662      	cpsie	i
	isb
   137f8:	f3bf 8f6f 	isb	sy

	bx	lr
   137fc:	4770      	bx	lr
   137fe:	bf00      	nop

00013800 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   13800:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   13802:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   13804:	f381 8811 	msr	BASEPRI, r1

	wfe
   13808:	bf20      	wfe

	msr	BASEPRI, r0
   1380a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1380e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   13810:	4770      	bx	lr
   13812:	bf00      	nop

00013814 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   13814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13818:	4606      	mov	r6, r0

	if (esf != NULL) {
   1381a:	460d      	mov	r5, r1
{
   1381c:	b08b      	sub	sp, #44	; 0x2c
	if (esf != NULL) {
   1381e:	2900      	cmp	r1, #0
   13820:	d054      	beq.n	138cc <z_arm_fatal_error+0xb8>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   13822:	4b2e      	ldr	r3, [pc, #184]	; (138dc <z_arm_fatal_error+0xc8>)
   13824:	4c2e      	ldr	r4, [pc, #184]	; (138e0 <z_arm_fatal_error+0xcc>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   13826:	482f      	ldr	r0, [pc, #188]	; (138e4 <z_arm_fatal_error+0xd0>)
   13828:	1ae4      	subs	r4, r4, r3
   1382a:	08e4      	lsrs	r4, r4, #3
   1382c:	01a4      	lsls	r4, r4, #6
   1382e:	f044 0401 	orr.w	r4, r4, #1
   13832:	f8ad 4000 	strh.w	r4, [sp]
   13836:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   1383a:	6809      	ldr	r1, [r1, #0]
   1383c:	f015 f95b 	bl	28af6 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   13840:	f8ad 4000 	strh.w	r4, [sp]
   13844:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   13848:	68e9      	ldr	r1, [r5, #12]
   1384a:	4827      	ldr	r0, [pc, #156]	; (138e8 <z_arm_fatal_error+0xd4>)
   1384c:	f015 f953 	bl	28af6 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   13850:	4622      	mov	r2, r4
   13852:	69e9      	ldr	r1, [r5, #28]
   13854:	4825      	ldr	r0, [pc, #148]	; (138ec <z_arm_fatal_error+0xd8>)
   13856:	f015 f91e 	bl	28a96 <log_1>
	for (int i = 0; i < 16; i += 4) {
   1385a:	46a8      	mov	r8, r5
   1385c:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   1385e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 138f8 <z_arm_fatal_error+0xe4>
   13862:	edd8 7a08 	vldr	s15, [r8, #32]
   13866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1386a:	edcd 7a03 	vstr	s15, [sp, #12]
   1386e:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
   13872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   13876:	edcd 7a05 	vstr	s15, [sp, #20]
   1387a:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
   1387e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   13882:	edcd 7a07 	vstr	s15, [sp, #28]
   13886:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
   1388a:	2208      	movs	r2, #8
   1388c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   13890:	1c7b      	adds	r3, r7, #1
   13892:	9304      	str	r3, [sp, #16]
   13894:	1cbb      	adds	r3, r7, #2
   13896:	9306      	str	r3, [sp, #24]
   13898:	1cfb      	adds	r3, r7, #3
   1389a:	9702      	str	r7, [sp, #8]
   1389c:	9308      	str	r3, [sp, #32]
   1389e:	4648      	mov	r0, r9
   138a0:	4623      	mov	r3, r4
   138a2:	eb0d 0102 	add.w	r1, sp, r2
	for (int i = 0; i < 16; i += 4) {
   138a6:	3704      	adds	r7, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   138a8:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   138ac:	f015 f942 	bl	28b34 <log_n>
	for (int i = 0; i < 16; i += 4) {
   138b0:	2f10      	cmp	r7, #16
   138b2:	f108 0810 	add.w	r8, r8, #16
   138b6:	d1d4      	bne.n	13862 <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   138b8:	4622      	mov	r2, r4
   138ba:	6e29      	ldr	r1, [r5, #96]	; 0x60
   138bc:	480c      	ldr	r0, [pc, #48]	; (138f0 <z_arm_fatal_error+0xdc>)
   138be:	f015 f8ea 	bl	28a96 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   138c2:	4622      	mov	r2, r4
   138c4:	69a9      	ldr	r1, [r5, #24]
   138c6:	480b      	ldr	r0, [pc, #44]	; (138f4 <z_arm_fatal_error+0xe0>)
   138c8:	f015 f8e5 	bl	28a96 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   138cc:	4629      	mov	r1, r5
   138ce:	4630      	mov	r0, r6
   138d0:	f00c fe5e 	bl	20590 <z_fatal_error>
}
   138d4:	b00b      	add	sp, #44	; 0x2c
   138d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   138da:	bf00      	nop
   138dc:	0002b7b8 	.word	0x0002b7b8
   138e0:	0002b818 	.word	0x0002b818
   138e4:	0002cc85 	.word	0x0002cc85
   138e8:	0002ccb4 	.word	0x0002ccb4
   138ec:	0002cce3 	.word	0x0002cce3
   138f0:	0002cd35 	.word	0x0002cd35
   138f4:	0002cd44 	.word	0x0002cd44
   138f8:	0002ccf2 	.word	0x0002ccf2

000138fc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   138fc:	bf30      	wfi
    b z_SysNmiOnReset
   138fe:	f7ff bffd 	b.w	138fc <z_SysNmiOnReset>
   13902:	bf00      	nop

00013904 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13904:	4a14      	ldr	r2, [pc, #80]	; (13958 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   13906:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13908:	4b14      	ldr	r3, [pc, #80]	; (1395c <z_arm_prep_c+0x58>)
   1390a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1390e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   13910:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13914:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   13918:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1391c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   13924:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13928:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   1392c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   13930:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   13934:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   13938:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1393c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   13940:	2300      	movs	r3, #0
   13942:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13946:	f00c fea1 	bl	2068c <z_bss_zero>
	z_data_copy();
   1394a:	f00c fea9 	bl	206a0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1394e:	f000 fa85 	bl	13e5c <z_arm_interrupt_init>
	z_cstart();
   13952:	f00c fee3 	bl	2071c <z_cstart>
   13956:	bf00      	nop
   13958:	0000c000 	.word	0x0000c000
   1395c:	e000ed00 	.word	0xe000ed00

00013960 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   13960:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   13962:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   13964:	4a0b      	ldr	r2, [pc, #44]	; (13994 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   13966:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   13968:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1396a:	bf1e      	ittt	ne
	movne	r1, #0
   1396c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1396e:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   13970:	f017 f946 	blne	2ac00 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   13974:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   13976:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1397a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1397e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   13982:	4905      	ldr	r1, [pc, #20]	; (13998 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   13984:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   13986:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13988:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1398a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1398e:	4903      	ldr	r1, [pc, #12]	; (1399c <_isr_wrapper+0x3c>)
	bx r1
   13990:	4708      	bx	r1
   13992:	0000      	.short	0x0000
	ldr r2, =_kernel
   13994:	20021d74 	.word	0x20021d74
	ldr r1, =_sw_isr_table
   13998:	0002b5a4 	.word	0x0002b5a4
	ldr r1, =z_arm_int_exit
   1399c:	00013e1d 	.word	0x00013e1d

000139a0 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   139a0:	f015 f845 	bl	28a2e <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   139a4:	2020      	movs	r0, #32
    msr BASEPRI, r0
   139a6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   139aa:	4808      	ldr	r0, [pc, #32]	; (139cc <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   139ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   139b0:	1840      	adds	r0, r0, r1
    msr PSP, r0
   139b2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   139b6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   139ba:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   139bc:	4308      	orrs	r0, r1
    msr CONTROL, r0
   139be:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   139c2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   139c6:	f7ff ff9d 	bl	13904 <z_arm_prep_c>
   139ca:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   139cc:	200281f0 	.word	0x200281f0

000139d0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   139d0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   139d4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   139d8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   139da:	4672      	mov	r2, lr
	bl z_arm_fault
   139dc:	f000 f93e 	bl	13c5c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   139e0:	bd01      	pop	{r0, pc}
   139e2:	bf00      	nop

000139e4 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   139e4:	b570      	push	{r4, r5, r6, lr}
   139e6:	4b28      	ldr	r3, [pc, #160]	; (13a88 <usage_fault.isra.0+0xa4>)
   139e8:	4c28      	ldr	r4, [pc, #160]	; (13a8c <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   139ea:	4d29      	ldr	r5, [pc, #164]	; (13a90 <usage_fault.isra.0+0xac>)
   139ec:	1ae4      	subs	r4, r4, r3
   139ee:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   139f0:	01a4      	lsls	r4, r4, #6
   139f2:	f044 0601 	orr.w	r6, r4, #1
   139f6:	4631      	mov	r1, r6
   139f8:	4826      	ldr	r0, [pc, #152]	; (13a94 <usage_fault.isra.0+0xb0>)
   139fa:	f015 f83d 	bl	28a78 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   139fe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13a00:	0193      	lsls	r3, r2, #6
   13a02:	d503      	bpl.n	13a0c <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   13a04:	4631      	mov	r1, r6
   13a06:	4824      	ldr	r0, [pc, #144]	; (13a98 <usage_fault.isra.0+0xb4>)
   13a08:	f015 f836 	bl	28a78 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13a0c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13a0e:	01dd      	lsls	r5, r3, #7
   13a10:	d504      	bpl.n	13a1c <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   13a12:	4822      	ldr	r0, [pc, #136]	; (13a9c <usage_fault.isra.0+0xb8>)
   13a14:	f044 0101 	orr.w	r1, r4, #1
   13a18:	f015 f82e 	bl	28a78 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   13a1c:	4d1c      	ldr	r5, [pc, #112]	; (13a90 <usage_fault.isra.0+0xac>)
   13a1e:	6aae      	ldr	r6, [r5, #40]	; 0x28
   13a20:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   13a24:	d005      	beq.n	13a32 <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   13a26:	481e      	ldr	r0, [pc, #120]	; (13aa0 <usage_fault.isra.0+0xbc>)
   13a28:	f044 0101 	orr.w	r1, r4, #1
   13a2c:	f015 f824 	bl	28a78 <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   13a30:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   13a32:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13a34:	0318      	lsls	r0, r3, #12
   13a36:	d504      	bpl.n	13a42 <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
   13a38:	481a      	ldr	r0, [pc, #104]	; (13aa4 <usage_fault.isra.0+0xc0>)
   13a3a:	f044 0101 	orr.w	r1, r4, #1
   13a3e:	f015 f81b 	bl	28a78 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13a42:	4d13      	ldr	r5, [pc, #76]	; (13a90 <usage_fault.isra.0+0xac>)
   13a44:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13a46:	0351      	lsls	r1, r2, #13
   13a48:	d504      	bpl.n	13a54 <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   13a4a:	4817      	ldr	r0, [pc, #92]	; (13aa8 <usage_fault.isra.0+0xc4>)
   13a4c:	f044 0101 	orr.w	r1, r4, #1
   13a50:	f015 f812 	bl	28a78 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13a54:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13a56:	039a      	lsls	r2, r3, #14
   13a58:	d504      	bpl.n	13a64 <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   13a5a:	4814      	ldr	r0, [pc, #80]	; (13aac <usage_fault.isra.0+0xc8>)
   13a5c:	f044 0101 	orr.w	r1, r4, #1
   13a60:	f015 f80a 	bl	28a78 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   13a64:	4d0a      	ldr	r5, [pc, #40]	; (13a90 <usage_fault.isra.0+0xac>)
   13a66:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13a68:	03db      	lsls	r3, r3, #15
   13a6a:	d504      	bpl.n	13a76 <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   13a6c:	4810      	ldr	r0, [pc, #64]	; (13ab0 <usage_fault.isra.0+0xcc>)
   13a6e:	f044 0101 	orr.w	r1, r4, #1
   13a72:	f015 f801 	bl	28a78 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13a76:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   13a78:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13a7a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   13a7e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   13a82:	62ab      	str	r3, [r5, #40]	; 0x28
}
   13a84:	bd70      	pop	{r4, r5, r6, pc}
   13a86:	bf00      	nop
   13a88:	0002b7b8 	.word	0x0002b7b8
   13a8c:	0002b818 	.word	0x0002b818
   13a90:	e000ed00 	.word	0xe000ed00
   13a94:	0002cd72 	.word	0x0002cd72
   13a98:	0002cd8a 	.word	0x0002cd8a
   13a9c:	0002cd9d 	.word	0x0002cd9d
   13aa0:	0002cdb7 	.word	0x0002cdb7
   13aa4:	0002cde1 	.word	0x0002cde1
   13aa8:	0002cdff 	.word	0x0002cdff
   13aac:	0002ce24 	.word	0x0002ce24
   13ab0:	0002ce3e 	.word	0x0002ce3e

00013ab4 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   13ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ab8:	4b27      	ldr	r3, [pc, #156]	; (13b58 <mem_manage_fault.isra.0+0xa4>)
   13aba:	4c28      	ldr	r4, [pc, #160]	; (13b5c <mem_manage_fault.isra.0+0xa8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13abc:	4d28      	ldr	r5, [pc, #160]	; (13b60 <mem_manage_fault.isra.0+0xac>)
   13abe:	1ae4      	subs	r4, r4, r3
   13ac0:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   13ac2:	01a4      	lsls	r4, r4, #6
   13ac4:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   13ac8:	4607      	mov	r7, r0
   13aca:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   13acc:	4825      	ldr	r0, [pc, #148]	; (13b64 <mem_manage_fault.isra.0+0xb0>)
   13ace:	4641      	mov	r1, r8
   13ad0:	f014 ffd2 	bl	28a78 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13ad4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13ad6:	06d1      	lsls	r1, r2, #27
   13ad8:	d503      	bpl.n	13ae2 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   13ada:	4641      	mov	r1, r8
   13adc:	4822      	ldr	r0, [pc, #136]	; (13b68 <mem_manage_fault.isra.0+0xb4>)
   13ade:	f014 ffcb 	bl	28a78 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   13ae2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13ae4:	071a      	lsls	r2, r3, #28
   13ae6:	d504      	bpl.n	13af2 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   13ae8:	4820      	ldr	r0, [pc, #128]	; (13b6c <mem_manage_fault.isra.0+0xb8>)
   13aea:	f044 0101 	orr.w	r1, r4, #1
   13aee:	f014 ffc3 	bl	28a78 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13af2:	4d1b      	ldr	r5, [pc, #108]	; (13b60 <mem_manage_fault.isra.0+0xac>)
   13af4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13af6:	079b      	lsls	r3, r3, #30
   13af8:	d512      	bpl.n	13b20 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   13afa:	f044 0801 	orr.w	r8, r4, #1
   13afe:	4641      	mov	r1, r8
   13b00:	481b      	ldr	r0, [pc, #108]	; (13b70 <mem_manage_fault.isra.0+0xbc>)
   13b02:	f014 ffb9 	bl	28a78 <log_0>
		mmfar = SCB->MMFAR;
   13b06:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   13b08:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13b0a:	0618      	lsls	r0, r3, #24
   13b0c:	d508      	bpl.n	13b20 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   13b0e:	4642      	mov	r2, r8
   13b10:	4818      	ldr	r0, [pc, #96]	; (13b74 <mem_manage_fault.isra.0+0xc0>)
   13b12:	f014 ffc0 	bl	28a96 <log_1>
			if (from_hard_fault) {
   13b16:	b11f      	cbz	r7, 13b20 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13b18:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13b1e:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   13b20:	4d0f      	ldr	r5, [pc, #60]	; (13b60 <mem_manage_fault.isra.0+0xac>)
   13b22:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13b24:	07d2      	lsls	r2, r2, #31
   13b26:	d504      	bpl.n	13b32 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   13b28:	4813      	ldr	r0, [pc, #76]	; (13b78 <mem_manage_fault.isra.0+0xc4>)
   13b2a:	f044 0101 	orr.w	r1, r4, #1
   13b2e:	f014 ffa3 	bl	28a78 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13b32:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13b34:	069b      	lsls	r3, r3, #26
   13b36:	d504      	bpl.n	13b42 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   13b38:	4810      	ldr	r0, [pc, #64]	; (13b7c <mem_manage_fault.isra.0+0xc8>)
   13b3a:	f044 0101 	orr.w	r1, r4, #1
   13b3e:	f014 ff9b 	bl	28a78 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   13b42:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   13b44:	4b06      	ldr	r3, [pc, #24]	; (13b60 <mem_manage_fault.isra.0+0xac>)
   13b46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13b4a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   13b4e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   13b50:	7030      	strb	r0, [r6, #0]
}
   13b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b56:	bf00      	nop
   13b58:	0002b7b8 	.word	0x0002b7b8
   13b5c:	0002b818 	.word	0x0002b818
   13b60:	e000ed00 	.word	0xe000ed00
   13b64:	0002ce69 	.word	0x0002ce69
   13b68:	0002ce7f 	.word	0x0002ce7f
   13b6c:	0002ceb2 	.word	0x0002ceb2
   13b70:	0002cec5 	.word	0x0002cec5
   13b74:	0002cedd 	.word	0x0002cedd
   13b78:	0002cef3 	.word	0x0002cef3
   13b7c:	0002cf12 	.word	0x0002cf12

00013b80 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b84:	4b2a      	ldr	r3, [pc, #168]	; (13c30 <bus_fault.isra.0+0xb0>)
   13b86:	4c2b      	ldr	r4, [pc, #172]	; (13c34 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13b88:	4d2b      	ldr	r5, [pc, #172]	; (13c38 <bus_fault.isra.0+0xb8>)
   13b8a:	1ae4      	subs	r4, r4, r3
   13b8c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   13b8e:	01a4      	lsls	r4, r4, #6
   13b90:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13b94:	4607      	mov	r7, r0
   13b96:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   13b98:	4828      	ldr	r0, [pc, #160]	; (13c3c <bus_fault.isra.0+0xbc>)
   13b9a:	4641      	mov	r1, r8
   13b9c:	f014 ff6c 	bl	28a78 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13ba0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13ba2:	04d1      	lsls	r1, r2, #19
   13ba4:	d503      	bpl.n	13bae <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   13ba6:	4641      	mov	r1, r8
   13ba8:	4825      	ldr	r0, [pc, #148]	; (13c40 <bus_fault.isra.0+0xc0>)
   13baa:	f014 ff65 	bl	28a78 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   13bae:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13bb0:	051a      	lsls	r2, r3, #20
   13bb2:	d504      	bpl.n	13bbe <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   13bb4:	4823      	ldr	r0, [pc, #140]	; (13c44 <bus_fault.isra.0+0xc4>)
   13bb6:	f044 0101 	orr.w	r1, r4, #1
   13bba:	f014 ff5d 	bl	28a78 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   13bbe:	4d1e      	ldr	r5, [pc, #120]	; (13c38 <bus_fault.isra.0+0xb8>)
   13bc0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13bc2:	059b      	lsls	r3, r3, #22
   13bc4:	d512      	bpl.n	13bec <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   13bc6:	f044 0801 	orr.w	r8, r4, #1
   13bca:	4641      	mov	r1, r8
   13bcc:	481e      	ldr	r0, [pc, #120]	; (13c48 <bus_fault.isra.0+0xc8>)
   13bce:	f014 ff53 	bl	28a78 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   13bd2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   13bd4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13bd6:	0418      	lsls	r0, r3, #16
   13bd8:	d508      	bpl.n	13bec <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   13bda:	4642      	mov	r2, r8
   13bdc:	481b      	ldr	r0, [pc, #108]	; (13c4c <bus_fault.isra.0+0xcc>)
   13bde:	f014 ff5a 	bl	28a96 <log_1>
			if (from_hard_fault) {
   13be2:	b11f      	cbz	r7, 13bec <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   13be4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13be6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   13bea:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   13bec:	4d12      	ldr	r5, [pc, #72]	; (13c38 <bus_fault.isra.0+0xb8>)
   13bee:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13bf0:	0559      	lsls	r1, r3, #21
   13bf2:	d504      	bpl.n	13bfe <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   13bf4:	4816      	ldr	r0, [pc, #88]	; (13c50 <bus_fault.isra.0+0xd0>)
   13bf6:	f044 0101 	orr.w	r1, r4, #1
   13bfa:	f014 ff3d 	bl	28a78 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   13bfe:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13c00:	05da      	lsls	r2, r3, #23
   13c02:	d50d      	bpl.n	13c20 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   13c04:	4813      	ldr	r0, [pc, #76]	; (13c54 <bus_fault.isra.0+0xd4>)
   13c06:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   13c0a:	f014 ff35 	bl	28a78 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   13c0e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13c10:	4a09      	ldr	r2, [pc, #36]	; (13c38 <bus_fault.isra.0+0xb8>)
   13c12:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13c14:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   13c18:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   13c1a:	7030      	strb	r0, [r6, #0]
}
   13c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   13c20:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13c22:	049b      	lsls	r3, r3, #18
   13c24:	d5f3      	bpl.n	13c0e <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   13c26:	480c      	ldr	r0, [pc, #48]	; (13c58 <bus_fault.isra.0+0xd8>)
   13c28:	f044 0101 	orr.w	r1, r4, #1
   13c2c:	e7ed      	b.n	13c0a <bus_fault.isra.0+0x8a>
   13c2e:	bf00      	nop
   13c30:	0002b7b8 	.word	0x0002b7b8
   13c34:	0002b818 	.word	0x0002b818
   13c38:	e000ed00 	.word	0xe000ed00
   13c3c:	0002cf41 	.word	0x0002cf41
   13c40:	0002cf57 	.word	0x0002cf57
   13c44:	0002ceb2 	.word	0x0002ceb2
   13c48:	0002cf68 	.word	0x0002cf68
   13c4c:	0002cf81 	.word	0x0002cf81
   13c50:	0002cf96 	.word	0x0002cf96
   13c54:	0002cfb1 	.word	0x0002cfb1
   13c58:	0002cf12 	.word	0x0002cf12

00013c5c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   13c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13c60:	4b5a      	ldr	r3, [pc, #360]	; (13dcc <z_arm_fault+0x170>)
{
   13c62:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13c64:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   13c68:	460f      	mov	r7, r1
   13c6a:	4614      	mov	r4, r2
   13c6c:	2500      	movs	r5, #0
   13c6e:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13c70:	f3c8 0608 	ubfx	r6, r8, #0, #9
   13c74:	f385 8811 	msr	BASEPRI, r5
   13c78:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13c7c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   13c80:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   13c84:	d123      	bne.n	13cce <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   13c86:	07d0      	lsls	r0, r2, #31
   13c88:	d421      	bmi.n	13cce <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   13c8a:	0651      	lsls	r1, r2, #25
   13c8c:	d403      	bmi.n	13c96 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   13c8e:	0722      	lsls	r2, r4, #28
   13c90:	d40e      	bmi.n	13cb0 <z_arm_fault+0x54>
			*nested_exc = true;
   13c92:	2501      	movs	r5, #1
   13c94:	e00e      	b.n	13cb4 <z_arm_fault+0x58>
   13c96:	494e      	ldr	r1, [pc, #312]	; (13dd0 <z_arm_fault+0x174>)
   13c98:	4b4e      	ldr	r3, [pc, #312]	; (13dd4 <z_arm_fault+0x178>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   13c9a:	484f      	ldr	r0, [pc, #316]	; (13dd8 <z_arm_fault+0x17c>)
   13c9c:	1a5b      	subs	r3, r3, r1
   13c9e:	08db      	lsrs	r3, r3, #3
   13ca0:	019b      	lsls	r3, r3, #6
   13ca2:	f043 0101 	orr.w	r1, r3, #1
   13ca6:	f014 fee7 	bl	28a78 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   13caa:	f014 0504 	ands.w	r5, r4, #4
   13cae:	d001      	beq.n	13cb4 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)psp;
   13cb0:	46b9      	mov	r9, r7
	*nested_exc = false;
   13cb2:	2500      	movs	r5, #0
	*recoverable = false;
   13cb4:	2300      	movs	r3, #0
   13cb6:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   13cba:	1ef3      	subs	r3, r6, #3
   13cbc:	2b09      	cmp	r3, #9
   13cbe:	d86c      	bhi.n	13d9a <z_arm_fault+0x13e>
   13cc0:	e8df f003 	tbb	[pc, r3]
   13cc4:	3e5e5a07 	.word	0x3e5e5a07
   13cc8:	6b6b6b6b 	.word	0x6b6b6b6b
   13ccc:	626b      	.short	0x626b
		return NULL;
   13cce:	46a9      	mov	r9, r5
   13cd0:	e7f0      	b.n	13cb4 <z_arm_fault+0x58>
	*recoverable = false;
   13cd2:	f04f 0800 	mov.w	r8, #0
   13cd6:	4b3e      	ldr	r3, [pc, #248]	; (13dd0 <z_arm_fault+0x174>)
   13cd8:	4e3e      	ldr	r6, [pc, #248]	; (13dd4 <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   13cda:	4840      	ldr	r0, [pc, #256]	; (13ddc <z_arm_fault+0x180>)
   13cdc:	1af6      	subs	r6, r6, r3
   13cde:	08f6      	lsrs	r6, r6, #3
   13ce0:	01b6      	lsls	r6, r6, #6
   13ce2:	f046 0601 	orr.w	r6, r6, #1
   13ce6:	4631      	mov	r1, r6
   13ce8:	f014 fec6 	bl	28a78 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13cec:	4b37      	ldr	r3, [pc, #220]	; (13dcc <z_arm_fault+0x170>)
	*recoverable = false;
   13cee:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13cf2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   13cf4:	f014 0402 	ands.w	r4, r4, #2
   13cf8:	d005      	beq.n	13d06 <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   13cfa:	4631      	mov	r1, r6
   13cfc:	4838      	ldr	r0, [pc, #224]	; (13de0 <z_arm_fault+0x184>)
	PR_FAULT_INFO(
   13cfe:	f014 febb 	bl	28a78 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13d02:	2400      	movs	r4, #0
}
   13d04:	e01f      	b.n	13d46 <z_arm_fault+0xea>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   13d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13d08:	005b      	lsls	r3, r3, #1
   13d0a:	d51c      	bpl.n	13d46 <z_arm_fault+0xea>
		PR_EXC("  Fault escalation (see below)");
   13d0c:	4631      	mov	r1, r6
   13d0e:	4835      	ldr	r0, [pc, #212]	; (13de4 <z_arm_fault+0x188>)
   13d10:	f014 feb2 	bl	28a78 <log_0>
		if (SCB_MMFSR != 0) {
   13d14:	4b34      	ldr	r3, [pc, #208]	; (13de8 <z_arm_fault+0x18c>)
   13d16:	781b      	ldrb	r3, [r3, #0]
   13d18:	b12b      	cbz	r3, 13d26 <z_arm_fault+0xca>
			reason = mem_manage_fault(esf, 1, recoverable);
   13d1a:	2001      	movs	r0, #1
   13d1c:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   13d20:	f7ff fec8 	bl	13ab4 <mem_manage_fault.isra.0>
   13d24:	e00e      	b.n	13d44 <z_arm_fault+0xe8>
		} else if (SCB_BFSR != 0) {
   13d26:	4b31      	ldr	r3, [pc, #196]	; (13dec <z_arm_fault+0x190>)
   13d28:	781b      	ldrb	r3, [r3, #0]
   13d2a:	b12b      	cbz	r3, 13d38 <z_arm_fault+0xdc>
			reason = bus_fault(esf, 1, recoverable);
   13d2c:	2001      	movs	r0, #1
   13d2e:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   13d32:	f7ff ff25 	bl	13b80 <bus_fault.isra.0>
   13d36:	e005      	b.n	13d44 <z_arm_fault+0xe8>
		} else if (SCB_UFSR != 0) {
   13d38:	4b2d      	ldr	r3, [pc, #180]	; (13df0 <z_arm_fault+0x194>)
   13d3a:	881b      	ldrh	r3, [r3, #0]
   13d3c:	b29b      	uxth	r3, r3
   13d3e:	b113      	cbz	r3, 13d46 <z_arm_fault+0xea>
			reason = usage_fault(esf);
   13d40:	f7ff fe50 	bl	139e4 <usage_fault.isra.0>
   13d44:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   13d46:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13d4a:	b993      	cbnz	r3, 13d72 <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   13d4c:	2268      	movs	r2, #104	; 0x68
   13d4e:	4649      	mov	r1, r9
   13d50:	a802      	add	r0, sp, #8
   13d52:	f7f8 ff0f 	bl	cb74 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   13d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13d58:	b39d      	cbz	r5, 13dc2 <z_arm_fault+0x166>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   13d5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
   13d5e:	b922      	cbnz	r2, 13d6a <z_arm_fault+0x10e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   13d60:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   13d64:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13d68:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   13d6a:	4620      	mov	r0, r4
   13d6c:	a902      	add	r1, sp, #8
   13d6e:	f7ff fd51 	bl	13814 <z_arm_fatal_error>
}
   13d72:	b01d      	add	sp, #116	; 0x74
   13d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   13d78:	2000      	movs	r0, #0
   13d7a:	f10d 0107 	add.w	r1, sp, #7
   13d7e:	e7cf      	b.n	13d20 <z_arm_fault+0xc4>
		reason = bus_fault(esf, 0, recoverable);
   13d80:	2000      	movs	r0, #0
   13d82:	f10d 0107 	add.w	r1, sp, #7
   13d86:	e7d4      	b.n	13d32 <z_arm_fault+0xd6>
   13d88:	4912      	ldr	r1, [pc, #72]	; (13dd4 <z_arm_fault+0x178>)
   13d8a:	4b11      	ldr	r3, [pc, #68]	; (13dd0 <z_arm_fault+0x174>)
	PR_FAULT_INFO(
   13d8c:	4819      	ldr	r0, [pc, #100]	; (13df4 <z_arm_fault+0x198>)
   13d8e:	1ac9      	subs	r1, r1, r3
   13d90:	08c9      	lsrs	r1, r1, #3
   13d92:	0189      	lsls	r1, r1, #6
   13d94:	f041 0101 	orr.w	r1, r1, #1
   13d98:	e7b1      	b.n	13cfe <z_arm_fault+0xa2>
   13d9a:	4a0d      	ldr	r2, [pc, #52]	; (13dd0 <z_arm_fault+0x174>)
   13d9c:	4b0d      	ldr	r3, [pc, #52]	; (13dd4 <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** %s %d) *****",
   13d9e:	4816      	ldr	r0, [pc, #88]	; (13df8 <z_arm_fault+0x19c>)
   13da0:	1a9b      	subs	r3, r3, r2
   13da2:	08db      	lsrs	r3, r3, #3
   13da4:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   13da8:	ea4f 1383 	mov.w	r3, r3, lsl #6
   13dac:	4913      	ldr	r1, [pc, #76]	; (13dfc <z_arm_fault+0x1a0>)
   13dae:	f043 0301 	orr.w	r3, r3, #1
   13db2:	bf18      	it	ne
   13db4:	4601      	movne	r1, r0
   13db6:	f1a6 0210 	sub.w	r2, r6, #16
   13dba:	4811      	ldr	r0, [pc, #68]	; (13e00 <z_arm_fault+0x1a4>)
   13dbc:	f014 fe82 	bl	28ac4 <log_2>
   13dc0:	e79f      	b.n	13d02 <z_arm_fault+0xa6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13dc2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   13dc6:	f023 0301 	bic.w	r3, r3, #1
   13dca:	e7cd      	b.n	13d68 <z_arm_fault+0x10c>
   13dcc:	e000ed00 	.word	0xe000ed00
   13dd0:	0002b7b8 	.word	0x0002b7b8
   13dd4:	0002b818 	.word	0x0002b818
   13dd8:	0002cfc9 	.word	0x0002cfc9
   13ddc:	0002cfec 	.word	0x0002cfec
   13de0:	0002d003 	.word	0x0002d003
   13de4:	0002d024 	.word	0x0002d024
   13de8:	e000ed28 	.word	0xe000ed28
   13dec:	e000ed29 	.word	0xe000ed29
   13df0:	e000ed2a 	.word	0xe000ed2a
   13df4:	0002d043 	.word	0x0002d043
   13df8:	0002d08e 	.word	0x0002d08e
   13dfc:	0002d079 	.word	0x0002d079
   13e00:	0002d0a7 	.word	0x0002d0a7

00013e04 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   13e04:	4b04      	ldr	r3, [pc, #16]	; (13e18 <z_arm_fault_init+0x14>)
   13e06:	695a      	ldr	r2, [r3, #20]
   13e08:	f042 0210 	orr.w	r2, r2, #16
   13e0c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   13e0e:	695a      	ldr	r2, [r3, #20]
   13e10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   13e14:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   13e16:	4770      	bx	lr
   13e18:	e000ed00 	.word	0xe000ed00

00013e1c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13e1c:	4b04      	ldr	r3, [pc, #16]	; (13e30 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   13e1e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   13e20:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   13e22:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13e24:	d003      	beq.n	13e2e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   13e26:	4903      	ldr	r1, [pc, #12]	; (13e34 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13e2c:	600a      	str	r2, [r1, #0]

00013e2e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   13e2e:	4770      	bx	lr
	ldr r3, =_kernel
   13e30:	20021d74 	.word	0x20021d74
	ldr r1, =_SCS_ICSR
   13e34:	e000ed04 	.word	0xe000ed04

00013e38 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   13e38:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13e3c:	4905      	ldr	r1, [pc, #20]	; (13e54 <sys_arch_reboot+0x1c>)
   13e3e:	4b06      	ldr	r3, [pc, #24]	; (13e58 <sys_arch_reboot+0x20>)
   13e40:	68ca      	ldr	r2, [r1, #12]
   13e42:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13e46:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13e48:	60cb      	str	r3, [r1, #12]
   13e4a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   13e4e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13e50:	e7fd      	b.n	13e4e <sys_arch_reboot+0x16>
   13e52:	bf00      	nop
   13e54:	e000ed00 	.word	0xe000ed00
   13e58:	05fa0004 	.word	0x05fa0004

00013e5c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   13e5c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13e5e:	2120      	movs	r1, #32
   13e60:	4803      	ldr	r0, [pc, #12]	; (13e70 <z_arm_interrupt_init+0x14>)
   13e62:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13e64:	3301      	adds	r3, #1
   13e66:	2b41      	cmp	r3, #65	; 0x41
   13e68:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   13e6c:	d1f9      	bne.n	13e62 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   13e6e:	4770      	bx	lr
   13e70:	e000e100 	.word	0xe000e100

00013e74 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   13e74:	b510      	push	{r4, lr}
   13e76:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
   13e78:	f00d f8c0 	bl	20ffc <z_thread_single_abort>

	if (_current == thread) {
   13e7c:	4b11      	ldr	r3, [pc, #68]	; (13ec4 <z_impl_k_thread_abort+0x50>)
   13e7e:	689b      	ldr	r3, [r3, #8]
   13e80:	42a3      	cmp	r3, r4
   13e82:	d107      	bne.n	13e94 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13e84:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   13e88:	b183      	cbz	r3, 13eac <z_impl_k_thread_abort+0x38>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13e8a:	4a0f      	ldr	r2, [pc, #60]	; (13ec8 <z_impl_k_thread_abort+0x54>)
   13e8c:	6853      	ldr	r3, [r2, #4]
   13e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13e92:	6053      	str	r3, [r2, #4]
	__asm__ volatile(
   13e94:	f04f 0320 	mov.w	r3, #32
   13e98:	f3ef 8011 	mrs	r0, BASEPRI
   13e9c:	f383 8811 	msr	BASEPRI, r3
   13ea0:	f3bf 8f6f 	isb	sy
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   13ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   13ea8:	f016 bff9 	b.w	2ae9e <z_reschedule_irqlock>
   13eac:	f04f 0320 	mov.w	r3, #32
   13eb0:	f3ef 8011 	mrs	r0, BASEPRI
   13eb4:	f383 8811 	msr	BASEPRI, r3
   13eb8:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
   13ebc:	f7ff fb84 	bl	135c8 <arch_swap>
	return ret;
   13ec0:	e7e8      	b.n	13e94 <z_impl_k_thread_abort+0x20>
   13ec2:	bf00      	nop
   13ec4:	20021d74 	.word	0x20021d74
   13ec8:	e000ed00 	.word	0xe000ed00

00013ecc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   13ecc:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   13ece:	4b0e      	ldr	r3, [pc, #56]	; (13f08 <z_arm_configure_static_mpu_regions+0x3c>)
{
   13ed0:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   13ed2:	9302      	str	r3, [sp, #8]
   13ed4:	4b0d      	ldr	r3, [pc, #52]	; (13f0c <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13ed6:	4c0e      	ldr	r4, [pc, #56]	; (13f10 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   13ed8:	9303      	str	r3, [sp, #12]
   13eda:	4b0e      	ldr	r3, [pc, #56]	; (13f14 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13edc:	4a0e      	ldr	r2, [pc, #56]	; (13f18 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   13ede:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   13ee0:	ab02      	add	r3, sp, #8
   13ee2:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13ee4:	a801      	add	r0, sp, #4
   13ee6:	4623      	mov	r3, r4
   13ee8:	2101      	movs	r1, #1
   13eea:	f000 f93d 	bl	14168 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   13eee:	2300      	movs	r3, #0
   13ef0:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   13ef2:	4b0a      	ldr	r3, [pc, #40]	; (13f1c <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   13ef4:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   13ef6:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   13ef8:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   13efa:	9305      	str	r3, [sp, #20]
   13efc:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   13efe:	f000 f93d 	bl	1417c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   13f02:	b008      	add	sp, #32
   13f04:	bd10      	pop	{r4, pc}
   13f06:	bf00      	nop
   13f08:	20020000 	.word	0x20020000
   13f0c:	00000000 	.word	0x00000000
   13f10:	20040000 	.word	0x20040000
   13f14:	00010006 	.word	0x00010006
   13f18:	20020000 	.word	0x20020000
   13f1c:	20020cc8 	.word	0x20020cc8

00013f20 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   13f20:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   13f22:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   13f24:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   13f26:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   13f2a:	f004 031f 	and.w	r3, r4, #31
   13f2e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   13f30:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   13f32:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   13f34:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   13f38:	4904      	ldr	r1, [pc, #16]	; (13f4c <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   13f3a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   13f3e:	f043 0301 	orr.w	r3, r3, #1
   13f42:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   13f44:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   13f46:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   13f48:	bd10      	pop	{r4, pc}
   13f4a:	bf00      	nop
   13f4c:	e000ed90 	.word	0xe000ed90

00013f50 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   13f50:	b508      	push	{r3, lr}
   13f52:	4a07      	ldr	r2, [pc, #28]	; (13f70 <region_allocate_and_init.part.0+0x20>)
   13f54:	4b07      	ldr	r3, [pc, #28]	; (13f74 <region_allocate_and_init.part.0+0x24>)
   13f56:	4601      	mov	r1, r0
   13f58:	1ad2      	subs	r2, r2, r3
   13f5a:	08d2      	lsrs	r2, r2, #3
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13f5c:	0192      	lsls	r2, r2, #6
   13f5e:	4806      	ldr	r0, [pc, #24]	; (13f78 <region_allocate_and_init.part.0+0x28>)
   13f60:	f042 0201 	orr.w	r2, r2, #1
   13f64:	f014 fd97 	bl	28a96 <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   13f68:	f06f 0015 	mvn.w	r0, #21
   13f6c:	bd08      	pop	{r3, pc}
   13f6e:	bf00      	nop
   13f70:	0002b808 	.word	0x0002b808
   13f74:	0002b7b8 	.word	0x0002b7b8
   13f78:	0002d0be 	.word	0x0002d0be

00013f7c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   13f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f80:	4607      	mov	r7, r0
   13f82:	4688      	mov	r8, r1
   13f84:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   13f86:	2600      	movs	r6, #0
	MPU->RNR = index;
   13f88:	4d56      	ldr	r5, [pc, #344]	; (140e4 <mpu_configure_regions_and_partition.constprop.0+0x168>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   13f8a:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   13f8c:	4546      	cmp	r6, r8
   13f8e:	da35      	bge.n	13ffc <mpu_configure_regions_and_partition.constprop.0+0x80>
		if (regions[i]->size == 0U) {
   13f90:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   13f94:	f8d3 9004 	ldr.w	r9, [r3, #4]
   13f98:	f1b9 0f00 	cmp.w	r9, #0
   13f9c:	d051      	beq.n	14042 <mpu_configure_regions_and_partition.constprop.0+0xc6>
		&&
   13f9e:	f1b9 0f1f 	cmp.w	r9, #31
   13fa2:	d91e      	bls.n	13fe2 <mpu_configure_regions_and_partition.constprop.0+0x66>
		&&
   13fa4:	f019 0f1f 	tst.w	r9, #31
   13fa8:	d11b      	bne.n	13fe2 <mpu_configure_regions_and_partition.constprop.0+0x66>
		((part->start &
   13faa:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   13fae:	f01a 0f1f 	tst.w	sl, #31
   13fb2:	d116      	bne.n	13fe2 <mpu_configure_regions_and_partition.constprop.0+0x66>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   13fb4:	4650      	mov	r0, sl
   13fb6:	f015 f9d0 	bl	2935a <arm_cmse_mpu_region_get>
   13fba:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   13fbc:	eb09 000a 	add.w	r0, r9, sl
   13fc0:	3801      	subs	r0, #1
   13fc2:	f015 f9ca 	bl	2935a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   13fc6:	4583      	cmp	fp, r0
   13fc8:	d01c      	beq.n	14004 <mpu_configure_regions_and_partition.constprop.0+0x88>
	return -EINVAL;
   13fca:	f06f 0b15 	mvn.w	fp, #21
   13fce:	4a46      	ldr	r2, [pc, #280]	; (140e8 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   13fd0:	4b46      	ldr	r3, [pc, #280]	; (140ec <mpu_configure_regions_and_partition.constprop.0+0x170>)
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   13fd2:	4659      	mov	r1, fp
   13fd4:	1ad2      	subs	r2, r2, r3
   13fd6:	08d2      	lsrs	r2, r2, #3
   13fd8:	0192      	lsls	r2, r2, #6
   13fda:	4845      	ldr	r0, [pc, #276]	; (140f0 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   13fdc:	f042 0201 	orr.w	r2, r2, #1
   13fe0:	e008      	b.n	13ff4 <mpu_configure_regions_and_partition.constprop.0+0x78>
			LOG_ERR("Partition %u: sanity check failed.", i);
   13fe2:	4631      	mov	r1, r6
   13fe4:	4a40      	ldr	r2, [pc, #256]	; (140e8 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   13fe6:	4b41      	ldr	r3, [pc, #260]	; (140ec <mpu_configure_regions_and_partition.constprop.0+0x170>)
   13fe8:	4842      	ldr	r0, [pc, #264]	; (140f4 <mpu_configure_regions_and_partition.constprop.0+0x178>)
   13fea:	1ad2      	subs	r2, r2, r3
   13fec:	08d2      	lsrs	r2, r2, #3
   13fee:	0192      	lsls	r2, r2, #6
   13ff0:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   13ff4:	f014 fd4f 	bl	28a96 <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   13ff8:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   13ffc:	4620      	mov	r0, r4
   13ffe:	b005      	add	sp, #20
   14000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   14004:	f11b 0f16 	cmn.w	fp, #22
   14008:	d0e1      	beq.n	13fce <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
   1400a:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   1400c:	455b      	cmp	r3, fp
   1400e:	dbde      	blt.n	13fce <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
   14010:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   14014:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   14016:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1401a:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1401c:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   14020:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   14024:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   14028:	e9d1 3200 	ldrd	r3, r2, [r1]
   1402c:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   1402e:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   14030:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   14034:	d118      	bne.n	14068 <mpu_configure_regions_and_partition.constprop.0+0xec>
   14036:	45ca      	cmp	sl, r9
   14038:	d105      	bne.n	14046 <mpu_configure_regions_and_partition.constprop.0+0xca>
			mpu_configure_region(u_reg_index, regions[i]);
   1403a:	fa5f f08b 	uxtb.w	r0, fp
   1403e:	f015 f96b 	bl	29318 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   14042:	3601      	adds	r6, #1
   14044:	e7a2      	b.n	13f8c <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   14046:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1404a:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   1404c:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   14050:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   14054:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   14056:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   14058:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   1405a:	f015 f95d 	bl	29318 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1405e:	f110 0f16 	cmn.w	r0, #22
   14062:	d0c9      	beq.n	13ff8 <mpu_configure_regions_and_partition.constprop.0+0x7c>
			reg_index++;
   14064:	1c44      	adds	r4, r0, #1
   14066:	e7ec      	b.n	14042 <mpu_configure_regions_and_partition.constprop.0+0xc6>
	MPU->RNR = index;
   14068:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1406c:	692a      	ldr	r2, [r5, #16]
   1406e:	3b01      	subs	r3, #1
   14070:	f023 031f 	bic.w	r3, r3, #31
   14074:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   14078:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   1407a:	45ca      	cmp	sl, r9
   1407c:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1407e:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   14080:	d0eb      	beq.n	1405a <mpu_configure_regions_and_partition.constprop.0+0xde>
				mpu_configure_region(reg_index, regions[i]);
   14082:	f015 f949 	bl	29318 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   14086:	f110 0f16 	cmn.w	r0, #22
   1408a:	d0b5      	beq.n	13ff8 <mpu_configure_regions_and_partition.constprop.0+0x7c>
	MPU->RNR = index;
   1408c:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   14090:	68ea      	ldr	r2, [r5, #12]
   14092:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   14096:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   1409a:	f362 0304 	bfi	r3, r2, #0, #5
   1409e:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   140a2:	692b      	ldr	r3, [r5, #16]
   140a4:	f89d 2008 	ldrb.w	r2, [sp, #8]
   140a8:	085b      	lsrs	r3, r3, #1
   140aa:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   140ae:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   140b2:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   140b6:	e9d3 1300 	ldrd	r1, r3, [r3]
   140ba:	440b      	add	r3, r1
   140bc:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   140be:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   140c2:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   140c4:	4453      	add	r3, sl
   140c6:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
   140ca:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i]->start +
   140cc:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   140d0:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   140d2:	9303      	str	r3, [sp, #12]
   140d4:	d902      	bls.n	140dc <mpu_configure_regions_and_partition.constprop.0+0x160>
   140d6:	f7ff ff3b 	bl	13f50 <region_allocate_and_init.part.0>
   140da:	e7c0      	b.n	1405e <mpu_configure_regions_and_partition.constprop.0+0xe2>
	region_init(index, region_conf);
   140dc:	4669      	mov	r1, sp
   140de:	f7ff ff1f 	bl	13f20 <region_init>
			if (reg_index == -EINVAL) {
   140e2:	e7bf      	b.n	14064 <mpu_configure_regions_and_partition.constprop.0+0xe8>
   140e4:	e000ed90 	.word	0xe000ed90
   140e8:	0002b808 	.word	0x0002b808
   140ec:	0002b7b8 	.word	0x0002b7b8
   140f0:	0002d107 	.word	0x0002d107
   140f4:	0002d0e4 	.word	0x0002d0e4

000140f8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   140f8:	2205      	movs	r2, #5
   140fa:	4b03      	ldr	r3, [pc, #12]	; (14108 <arm_core_mpu_enable+0x10>)
   140fc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   140fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14102:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   14106:	4770      	bx	lr
   14108:	e000ed90 	.word	0xe000ed90

0001410c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   1410c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   14110:	2200      	movs	r2, #0
   14112:	4b01      	ldr	r3, [pc, #4]	; (14118 <arm_core_mpu_disable+0xc>)
   14114:	605a      	str	r2, [r3, #4]
}
   14116:	4770      	bx	lr
   14118:	e000ed90 	.word	0xe000ed90

0001411c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   1411c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1411e:	4c0e      	ldr	r4, [pc, #56]	; (14158 <arm_mpu_init+0x3c>)
   14120:	6825      	ldr	r5, [r4, #0]
   14122:	2d10      	cmp	r5, #16
   14124:	d814      	bhi.n	14150 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   14126:	f7ff fff1 	bl	1410c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1412a:	2000      	movs	r0, #0
	MPU->MAIR0 =
   1412c:	4b0b      	ldr	r3, [pc, #44]	; (1415c <arm_mpu_init+0x40>)
   1412e:	4a0c      	ldr	r2, [pc, #48]	; (14160 <arm_mpu_init+0x44>)
   14130:	631a      	str	r2, [r3, #48]	; 0x30
   14132:	4285      	cmp	r5, r0
   14134:	d105      	bne.n	14142 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   14136:	4b0b      	ldr	r3, [pc, #44]	; (14164 <arm_mpu_init+0x48>)
   14138:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   1413a:	f7ff ffdd 	bl	140f8 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   1413e:	2000      	movs	r0, #0
}
   14140:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   14142:	6861      	ldr	r1, [r4, #4]
   14144:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   14148:	f7ff feea 	bl	13f20 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1414c:	3001      	adds	r0, #1
   1414e:	e7f0      	b.n	14132 <arm_mpu_init+0x16>
		return -1;
   14150:	f04f 30ff 	mov.w	r0, #4294967295
   14154:	e7f4      	b.n	14140 <arm_mpu_init+0x24>
   14156:	bf00      	nop
   14158:	0002ba48 	.word	0x0002ba48
   1415c:	e000ed90 	.word	0xe000ed90
   14160:	0044ffaa 	.word	0x0044ffaa
   14164:	200234b6 	.word	0x200234b6

00014168 <arm_core_mpu_configure_static_mpu_regions>:
{
   14168:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1416a:	4c03      	ldr	r4, [pc, #12]	; (14178 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1416c:	7822      	ldrb	r2, [r4, #0]
   1416e:	f7ff ff05 	bl	13f7c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   14172:	7020      	strb	r0, [r4, #0]
}
   14174:	bd10      	pop	{r4, pc}
   14176:	bf00      	nop
   14178:	200234b6 	.word	0x200234b6

0001417c <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   1417c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14180:	4d26      	ldr	r5, [pc, #152]	; (1421c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   14182:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   14184:	4606      	mov	r6, r0
   14186:	f04f 0800 	mov.w	r8, #0
   1418a:	46ab      	mov	fp, r5
	MPU->RNR = index;
   1418c:	4f24      	ldr	r7, [pc, #144]	; (14220 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1418e:	45d0      	cmp	r8, sl
   14190:	da1b      	bge.n	141ca <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   14192:	f8d6 9004 	ldr.w	r9, [r6, #4]
   14196:	f1b9 0f00 	cmp.w	r9, #0
   1419a:	d039      	beq.n	14210 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   1419c:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1419e:	4608      	mov	r0, r1
   141a0:	9101      	str	r1, [sp, #4]
   141a2:	f015 f8da 	bl	2935a <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   141a6:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   141a8:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   141aa:	eb09 0001 	add.w	r0, r9, r1
   141ae:	3801      	subs	r0, #1
   141b0:	f015 f8d3 	bl	2935a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   141b4:	4284      	cmp	r4, r0
   141b6:	f04f 0214 	mov.w	r2, #20
   141ba:	4b1a      	ldr	r3, [pc, #104]	; (14224 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   141bc:	d008      	beq.n	141d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   141be:	f06f 0315 	mvn.w	r3, #21
   141c2:	fb02 f808 	mul.w	r8, r2, r8
   141c6:	f84b 3008 	str.w	r3, [fp, r8]
}
   141ca:	b003      	add	sp, #12
   141cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   141d0:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   141d4:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   141d6:	d0f8      	beq.n	141ca <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   141d8:	7819      	ldrb	r1, [r3, #0]
   141da:	42a1      	cmp	r1, r4
   141dc:	ddf5      	ble.n	141ca <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   141de:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   141e2:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   141e4:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   141e6:	68fc      	ldr	r4, [r7, #12]
   141e8:	f100 0108 	add.w	r1, r0, #8
   141ec:	7b00      	ldrb	r0, [r0, #12]
   141ee:	f364 0004 	bfi	r0, r4, #0, #5
   141f2:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   141f4:	6938      	ldr	r0, [r7, #16]
   141f6:	790c      	ldrb	r4, [r1, #4]
   141f8:	0840      	lsrs	r0, r0, #1
   141fa:	f360 1447 	bfi	r4, r0, #5, #3
   141fe:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   14200:	68f9      	ldr	r1, [r7, #12]
   14202:	f021 011f 	bic.w	r1, r1, #31
   14206:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   14208:	6939      	ldr	r1, [r7, #16]
   1420a:	f021 011f 	bic.w	r1, r1, #31
   1420e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   14210:	f108 0801 	add.w	r8, r8, #1
   14214:	3514      	adds	r5, #20
   14216:	360c      	adds	r6, #12
   14218:	e7b9      	b.n	1418e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   1421a:	bf00      	nop
   1421c:	200215ac 	.word	0x200215ac
   14220:	e000ed90 	.word	0xe000ed90
   14224:	200234b6 	.word	0x200234b6

00014228 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   14228:	4b01      	ldr	r3, [pc, #4]	; (14230 <__stdout_hook_install+0x8>)
   1422a:	6018      	str	r0, [r3, #0]
}
   1422c:	4770      	bx	lr
   1422e:	bf00      	nop
   14230:	20020438 	.word	0x20020438

00014234 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   14234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14236:	4606      	mov	r6, r0
   14238:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   1423a:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   1423c:	4f06      	ldr	r7, [pc, #24]	; (14258 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   1423e:	42ac      	cmp	r4, r5
   14240:	da08      	bge.n	14254 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   14242:	683b      	ldr	r3, [r7, #0]
   14244:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   14246:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   14248:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1424a:	f104 0401 	add.w	r4, r4, #1
   1424e:	d001      	beq.n	14254 <z_impl_zephyr_read_stdin+0x20>
   14250:	280d      	cmp	r0, #13
   14252:	d1f4      	bne.n	1423e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   14254:	4620      	mov	r0, r4
   14256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14258:	20020434 	.word	0x20020434

0001425c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   1425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1425e:	460d      	mov	r5, r1
   14260:	4f09      	ldr	r7, [pc, #36]	; (14288 <z_impl_zephyr_write_stdout+0x2c>)
   14262:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   14264:	f1c0 0401 	rsb	r4, r0, #1
   14268:	19a3      	adds	r3, r4, r6
   1426a:	429d      	cmp	r5, r3
   1426c:	dc01      	bgt.n	14272 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   1426e:	4628      	mov	r0, r5
   14270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   14272:	7873      	ldrb	r3, [r6, #1]
   14274:	2b0a      	cmp	r3, #10
   14276:	d102      	bne.n	1427e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   14278:	200d      	movs	r0, #13
   1427a:	683b      	ldr	r3, [r7, #0]
   1427c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   1427e:	683b      	ldr	r3, [r7, #0]
   14280:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   14284:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   14286:	e7ef      	b.n	14268 <z_impl_zephyr_write_stdout+0xc>
   14288:	20020438 	.word	0x20020438

0001428c <_exit>:

int _write(int fd, const void *buf, int nbytes)
{
	ARG_UNUSED(fd);

	return z_impl_zephyr_write_stdout(buf, nbytes);
   1428c:	2105      	movs	r1, #5
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   1428e:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   14290:	4801      	ldr	r0, [pc, #4]	; (14298 <_exit+0xc>)
   14292:	f7ff ffe3 	bl	1425c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   14296:	e7fe      	b.n	14296 <_exit+0xa>
   14298:	0002d12a 	.word	0x0002d12a

0001429c <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   1429c:	b510      	push	{r4, lr}
   1429e:	4604      	mov	r4, r0
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
   142a0:	f04f 32ff 	mov.w	r2, #4294967295
   142a4:	f04f 33ff 	mov.w	r3, #4294967295
   142a8:	480a      	ldr	r0, [pc, #40]	; (142d4 <_sbrk+0x38>)
   142aa:	f014 f952 	bl	28552 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   142ae:	490a      	ldr	r1, [pc, #40]	; (142d8 <_sbrk+0x3c>)
   142b0:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   142b2:	18e0      	adds	r0, r4, r3
   142b4:	4c09      	ldr	r4, [pc, #36]	; (142dc <_sbrk+0x40>)
   142b6:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   142ba:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   142be:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   142c0:	bf2e      	itee	cs
   142c2:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   142c6:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   142c8:	6008      	strcc	r0, [r1, #0]
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
   142ca:	4802      	ldr	r0, [pc, #8]	; (142d4 <_sbrk+0x38>)
   142cc:	f014 f93c 	bl	28548 <sys_sem_give>

	return ret;
}
   142d0:	4620      	mov	r0, r4
   142d2:	bd10      	pop	{r4, pc}
   142d4:	20020c30 	.word	0x20020c30
   142d8:	200215c0 	.word	0x200215c0
   142dc:	20029408 	.word	0x20029408

000142e0 <__chk_fail>:
	return z_impl_zephyr_write_stdout(buf, nbytes);
   142e0:	211d      	movs	r1, #29
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   142e2:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   142e4:	4804      	ldr	r0, [pc, #16]	; (142f8 <__chk_fail+0x18>)
   142e6:	f7ff ffb9 	bl	1425c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   142ea:	4040      	eors	r0, r0
   142ec:	f380 8811 	msr	BASEPRI, r0
   142f0:	f04f 0003 	mov.w	r0, #3
   142f4:	df02      	svc	2
	CODE_UNREACHABLE;
   142f6:	bf00      	nop
   142f8:	0002d130 	.word	0x0002d130

000142fc <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   142fc:	b538      	push	{r3, r4, r5, lr}
   142fe:	4c08      	ldr	r4, [pc, #32]	; (14320 <net_if_init+0x24>)

	NET_DBG("");

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   14300:	4d08      	ldr	r5, [pc, #32]	; (14324 <net_if_init+0x28>)
   14302:	42ac      	cmp	r4, r5
   14304:	4620      	mov	r0, r4
   14306:	d300      	bcc.n	1430a <net_if_init+0xe>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   14308:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   1430a:	6803      	ldr	r3, [r0, #0]
   1430c:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   1430e:	681b      	ldr	r3, [r3, #0]
   14310:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   14312:	2b00      	cmp	r3, #0
   14314:	d0f5      	beq.n	14302 <net_if_init+0x6>
   14316:	681b      	ldr	r3, [r3, #0]
   14318:	2b00      	cmp	r3, #0
   1431a:	d0f2      	beq.n	14302 <net_if_init+0x6>
	api->init(iface);
   1431c:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1431e:	e7f0      	b.n	14302 <net_if_init+0x6>
   14320:	20020ca8 	.word	0x20020ca8
   14324:	20020cac 	.word	0x20020cac

00014328 <net_if_post_init>:

void net_if_post_init(void)
{
   14328:	b538      	push	{r3, r4, r5, lr}
   1432a:	4c08      	ldr	r4, [pc, #32]	; (1434c <net_if_post_init+0x24>)
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1432c:	4d08      	ldr	r5, [pc, #32]	; (14350 <net_if_post_init+0x28>)
   1432e:	42ac      	cmp	r4, r5
   14330:	4620      	mov	r0, r4
   14332:	d300      	bcc.n	14336 <net_if_post_init+0xe>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   14334:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14336:	6803      	ldr	r3, [r0, #0]
   14338:	3404      	adds	r4, #4
   1433a:	330c      	adds	r3, #12
   1433c:	e8d3 3faf 	lda	r3, [r3]
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   14340:	071b      	lsls	r3, r3, #28
   14342:	d4f4      	bmi.n	1432e <net_if_post_init+0x6>
			net_if_up(iface);
   14344:	f015 f84b 	bl	293de <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   14348:	e7f1      	b.n	1432e <net_if_post_init+0x6>
   1434a:	bf00      	nop
   1434c:	20020ca8 	.word	0x20020ca8
   14350:	20020cac 	.word	0x20020cac

00014354 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   14354:	2300      	movs	r3, #0
{
   14356:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   1435a:	2802      	cmp	r0, #2
{
   1435c:	b089      	sub	sp, #36	; 0x24
   1435e:	4607      	mov	r7, r0
   14360:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   14362:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   14366:	9104      	str	r1, [sp, #16]
	if (family == AF_INET6) {
   14368:	d13e      	bne.n	143e8 <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   1436a:	a806      	add	r0, sp, #24
   1436c:	9105      	str	r1, [sp, #20]
   1436e:	4601      	mov	r1, r0
{
   14370:	461a      	mov	r2, r3
   14372:	e006      	b.n	14382 <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   14374:	780c      	ldrb	r4, [r1, #0]
   14376:	3201      	adds	r2, #1
   14378:	3401      	adds	r4, #1
   1437a:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   1437c:	b2d4      	uxtb	r4, r2
   1437e:	2c07      	cmp	r4, #7
   14380:	d804      	bhi.n	1438c <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   14382:	9c04      	ldr	r4, [sp, #16]
   14384:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   14388:	2c00      	cmp	r4, #0
   1438a:	d0f3      	beq.n	14374 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   1438c:	3301      	adds	r3, #1
   1438e:	2b08      	cmp	r3, #8
   14390:	f101 0101 	add.w	r1, r1, #1
   14394:	d1ec      	bne.n	14370 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   14396:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   1439a:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   1439e:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   143a0:	f810 2b01 	ldrb.w	r2, [r0], #1
   143a4:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   143a6:	bf88      	it	hi
   143a8:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   143ac:	f103 0301 	add.w	r3, r3, #1
   143b0:	b2db      	uxtb	r3, r3
				pos = i;
   143b2:	bf88      	it	hi
   143b4:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   143b6:	2b08      	cmp	r3, #8
   143b8:	d1f2      	bne.n	143a0 <z_impl_net_addr_ntop+0x4c>
		len = 8;
   143ba:	469b      	mov	fp, r3
   143bc:	f1b9 0f01 	cmp.w	r9, #1
   143c0:	f04f 033a 	mov.w	r3, #58	; 0x3a
   143c4:	bf08      	it	eq
   143c6:	f04f 38ff 	moveq.w	r8, #4294967295
   143ca:	9303      	str	r3, [sp, #12]
	bool needcolon = false;
   143cc:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   143ce:	4634      	mov	r4, r6
   143d0:	460d      	mov	r5, r1
   143d2:	455d      	cmp	r5, fp
   143d4:	db17      	blt.n	14406 <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   143d6:	42b4      	cmp	r4, r6
   143d8:	d008      	beq.n	143ec <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   143da:	2300      	movs	r3, #0
   143dc:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   143de:	bf0c      	ite	eq
   143e0:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   143e4:	7023      	strbne	r3, [r4, #0]
   143e6:	e002      	b.n	143ee <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   143e8:	2801      	cmp	r0, #1
   143ea:	d004      	beq.n	143f6 <z_impl_net_addr_ntop+0xa2>
		return NULL;
   143ec:	2600      	movs	r6, #0
	}

	return dst;
}
   143ee:	4630      	mov	r0, r6
   143f0:	b009      	add	sp, #36	; 0x24
   143f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   143f6:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   143f8:	f04f 0b04 	mov.w	fp, #4
	int8_t pos = -1;
   143fc:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   14400:	4681      	mov	r9, r0
		delim = '.';
   14402:	9303      	str	r3, [sp, #12]
   14404:	e7e2      	b.n	143cc <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   14406:	f1bb 0f04 	cmp.w	fp, #4
   1440a:	d13b      	bne.n	14484 <z_impl_net_addr_ntop+0x130>
			value = (uint32_t)addr->s4_addr[i];
   1440c:	9b04      	ldr	r3, [sp, #16]
   1440e:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   14410:	b94a      	cbnz	r2, 14426 <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   14412:	2330      	movs	r3, #48	; 0x30
   14414:	4620      	mov	r0, r4
   14416:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   1441a:	9b03      	ldr	r3, [sp, #12]
   1441c:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   1441e:	3501      	adds	r5, #1
   14420:	4604      	mov	r4, r0
   14422:	b2ed      	uxtb	r5, r5
   14424:	e7d5      	b.n	143d2 <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   14426:	f04f 0e09 	mov.w	lr, #9
   1442a:	f04f 0a00 	mov.w	sl, #0
   1442e:	e9cd 2401 	strd	r2, r4, [sp, #4]
   14432:	483a      	ldr	r0, [pc, #232]	; (1451c <z_impl_net_addr_ntop+0x1c8>)
		value = value % divisor;
   14434:	f8dd c004 	ldr.w	ip, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   14438:	45f2      	cmp	sl, lr
		value = value % divisor;
   1443a:	fbbc f2f0 	udiv	r2, ip, r0
   1443e:	fb00 c212 	mls	r2, r0, r2, ip
   14442:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   14444:	dc01      	bgt.n	1444a <z_impl_net_addr_ntop+0xf6>
   14446:	4584      	cmp	ip, r0
   14448:	d308      	bcc.n	1445c <z_impl_net_addr_ntop+0x108>
		temp = value / divisor;
   1444a:	fbbc fcf0 	udiv	ip, ip, r0
			*buf++ = (char) (temp + '0');
   1444e:	46f2      	mov	sl, lr
   14450:	9b02      	ldr	r3, [sp, #8]
   14452:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   14456:	f803 cb01 	strb.w	ip, [r3], #1
   1445a:	9302      	str	r3, [sp, #8]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   1445c:	220a      	movs	r2, #10
   1445e:	f10e 3eff 	add.w	lr, lr, #4294967295
   14462:	f1be 3fff 	cmp.w	lr, #4294967295
   14466:	fbb0 f0f2 	udiv	r0, r0, r2
   1446a:	d1e3      	bne.n	14434 <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   1446c:	f04f 0200 	mov.w	r2, #0
   14470:	9b02      	ldr	r3, [sp, #8]
   14472:	701a      	strb	r2, [r3, #0]
	return buf - start;
   14474:	1b1b      	subs	r3, r3, r4
			ptr += l;
   14476:	b2da      	uxtb	r2, r3
   14478:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   1447c:	1c58      	adds	r0, r3, #1
   1447e:	9b03      	ldr	r3, [sp, #12]
   14480:	54a3      	strb	r3, [r4, r2]
			continue;
   14482:	e7cc      	b.n	1441e <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   14484:	45a8      	cmp	r8, r5
   14486:	d110      	bne.n	144aa <z_impl_net_addr_ntop+0x156>
			if (needcolon || i == 0U) {
   14488:	b911      	cbnz	r1, 14490 <z_impl_net_addr_ntop+0x13c>
   1448a:	f1b8 0f00 	cmp.w	r8, #0
   1448e:	d102      	bne.n	14496 <z_impl_net_addr_ntop+0x142>
				*ptr++ = ':';
   14490:	233a      	movs	r3, #58	; 0x3a
   14492:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   14496:	233a      	movs	r3, #58	; 0x3a
   14498:	4620      	mov	r0, r4
   1449a:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   1449e:	f109 33ff 	add.w	r3, r9, #4294967295
   144a2:	441d      	add	r5, r3
			needcolon = false;
   144a4:	2100      	movs	r1, #0
			i += longest - 1U;
   144a6:	b2ed      	uxtb	r5, r5
			continue;
   144a8:	e7b9      	b.n	1441e <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   144aa:	b111      	cbz	r1, 144b2 <z_impl_net_addr_ntop+0x15e>
			*ptr++ = ':';
   144ac:	233a      	movs	r3, #58	; 0x3a
   144ae:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   144b2:	9b05      	ldr	r3, [sp, #20]
   144b4:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   144b8:	0219      	lsls	r1, r3, #8
   144ba:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
		if (bh) {
   144be:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   144c2:	b20a      	sxth	r2, r1
		bh = value >> 8;
   144c4:	f3c1 2307 	ubfx	r3, r1, #8, #8
		bl = value & 0xff;
   144c8:	fa5f fa81 	uxtb.w	sl, r1
		if (bh) {
   144cc:	d016      	beq.n	144fc <z_impl_net_addr_ntop+0x1a8>
			if (bh > 0x0f) {
   144ce:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   144d0:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   144d2:	d90b      	bls.n	144ec <z_impl_net_addr_ntop+0x198>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   144d4:	2300      	movs	r3, #0
   144d6:	2261      	movs	r2, #97	; 0x61
   144d8:	4620      	mov	r0, r4
   144da:	f014 ffb1 	bl	29440 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   144de:	2301      	movs	r3, #1
   144e0:	2261      	movs	r2, #97	; 0x61
   144e2:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   144e4:	f014 ffac 	bl	29440 <net_byte_to_hex>
		needcolon = true;
   144e8:	2101      	movs	r1, #1
   144ea:	e798      	b.n	1441e <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   144ec:	b25b      	sxtb	r3, r3
   144ee:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   144f0:	bf94      	ite	ls
   144f2:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   144f4:	3357      	addhi	r3, #87	; 0x57
   144f6:	1c60      	adds	r0, r4, #1
   144f8:	7023      	strb	r3, [r4, #0]
   144fa:	e7f0      	b.n	144de <z_impl_net_addr_ntop+0x18a>
		} else if (bl > 0x0f) {
   144fc:	f1ba 0f0f 	cmp.w	sl, #15
   14500:	d903      	bls.n	1450a <z_impl_net_addr_ntop+0x1b6>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   14502:	2261      	movs	r2, #97	; 0x61
   14504:	4651      	mov	r1, sl
   14506:	4620      	mov	r0, r4
   14508:	e7ec      	b.n	144e4 <z_impl_net_addr_ntop+0x190>
			if (bl < 10) {
   1450a:	b253      	sxtb	r3, r2
   1450c:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   14510:	bf94      	ite	ls
   14512:	3330      	addls	r3, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   14514:	3357      	addhi	r3, #87	; 0x57
   14516:	1c60      	adds	r0, r4, #1
   14518:	7023      	strb	r3, [r4, #0]
   1451a:	e7e5      	b.n	144e8 <z_impl_net_addr_ntop+0x194>
   1451c:	3b9aca00 	.word	0x3b9aca00

00014520 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   14520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   14524:	680d      	ldr	r5, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   14526:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1452a:	4b3b      	ldr	r3, [pc, #236]	; (14618 <connect_request_encode+0xf8>)
   1452c:	4a3b      	ldr	r2, [pc, #236]	; (1461c <connect_request_encode+0xfc>)
{
   1452e:	4607      	mov	r7, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   14530:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   14534:	3505      	adds	r5, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   14536:	2804      	cmp	r0, #4
   14538:	bf0c      	ite	eq
   1453a:	4610      	moveq	r0, r2
   1453c:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1453e:	600d      	str	r5, [r1, #0]
{
   14540:	4688      	mov	r8, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   14542:	f015 f864 	bl	2960e <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   14546:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (err_code != 0) {
   1454a:	4603      	mov	r3, r0
   1454c:	b938      	cbnz	r0, 1455e <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1454e:	e9d8 2000 	ldrd	r2, r0, [r8]
   14552:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   14554:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   14558:	d104      	bne.n	14564 <connect_request_encode+0x44>
		return -ENOMEM;
   1455a:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   1455e:	4618      	mov	r0, r3
   14560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   14564:	1c50      	adds	r0, r2, #1
   14566:	f8c8 0000 	str.w	r0, [r8]
   1456a:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1456c:	e9d8 6200 	ldrd	r6, r2, [r8]
   14570:	4296      	cmp	r6, r2
   14572:	d0f2      	beq.n	1455a <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   14574:	1c72      	adds	r2, r6, #1
   14576:	f8c8 2000 	str.w	r2, [r8]
   1457a:	7033      	strb	r3, [r6, #0]
	err_code = pack_uint16(client->keepalive, buf);
   1457c:	4641      	mov	r1, r8
   1457e:	f8b7 005c 	ldrh.w	r0, [r7, #92]	; 0x5c
   14582:	f015 f832 	bl	295ea <pack_uint16>
	if (err_code != 0) {
   14586:	4603      	mov	r3, r0
   14588:	2800      	cmp	r0, #0
   1458a:	d1e8      	bne.n	1455e <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   1458c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   14590:	f015 f83d 	bl	2960e <pack_utf8_str>
	if (err_code != 0) {
   14594:	4603      	mov	r3, r0
   14596:	2800      	cmp	r0, #0
   14598:	d1e1      	bne.n	1455e <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   1459a:	6c38      	ldr	r0, [r7, #64]	; 0x40
	uint8_t connect_flags = client->clean_session << 1;
   1459c:	0064      	lsls	r4, r4, #1
	if (client->will_topic != NULL) {
   1459e:	b1d8      	cbz	r0, 145d8 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   145a0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   145a4:	f044 0404 	orr.w	r4, r4, #4
		connect_flags |= client->will_retain << 5;
   145a8:	f003 0301 	and.w	r3, r3, #1
   145ac:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   145b0:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   145b2:	4641      	mov	r1, r8
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   145b4:	00db      	lsls	r3, r3, #3
   145b6:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   145ba:	431c      	orrs	r4, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   145bc:	f015 f827 	bl	2960e <pack_utf8_str>
		if (err_code != 0) {
   145c0:	4603      	mov	r3, r0
   145c2:	2800      	cmp	r0, #0
   145c4:	d1cb      	bne.n	1455e <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   145c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
			err_code = pack_utf8_str(client->will_message, buf);
   145c8:	4641      	mov	r1, r8
		if (client->will_message != NULL) {
   145ca:	b30b      	cbz	r3, 14610 <connect_request_encode+0xf0>
			err_code = pack_utf8_str(client->will_message, buf);
   145cc:	4618      	mov	r0, r3
   145ce:	f015 f81e 	bl	2960e <pack_utf8_str>
			if (err_code != 0) {
   145d2:	4603      	mov	r3, r0
   145d4:	2800      	cmp	r0, #0
   145d6:	d1c2      	bne.n	1455e <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   145d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   145da:	b138      	cbz	r0, 145ec <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   145dc:	4641      	mov	r1, r8
   145de:	f015 f816 	bl	2960e <pack_utf8_str>
		if (err_code != 0) {
   145e2:	4603      	mov	r3, r0
   145e4:	2800      	cmp	r0, #0
   145e6:	d1ba      	bne.n	1455e <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   145e8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	if (client->password != NULL) {
   145ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   145ee:	b138      	cbz	r0, 14600 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   145f0:	4641      	mov	r1, r8
   145f2:	f015 f80c 	bl	2960e <pack_utf8_str>
		if (err_code != 0) {
   145f6:	4603      	mov	r3, r0
   145f8:	2800      	cmp	r0, #0
   145fa:	d1b0      	bne.n	1455e <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   145fc:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	*connect_flags_pos = connect_flags;
   14600:	7034      	strb	r4, [r6, #0]
	return mqtt_encode_fixed_header(message_type, start, buf);
   14602:	4642      	mov	r2, r8
   14604:	4629      	mov	r1, r5
}
   14606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   1460a:	2010      	movs	r0, #16
   1460c:	f015 b81a 	b.w	29644 <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   14610:	f014 ffeb 	bl	295ea <pack_uint16>
   14614:	e7dd      	b.n	145d2 <connect_request_encode+0xb2>
   14616:	bf00      	nop
   14618:	0002ba70 	.word	0x0002ba70
   1461c:	0002ba78 	.word	0x0002ba78

00014620 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   14620:	e9d0 2300 	ldrd	r2, r3, [r0]
   14624:	1a9b      	subs	r3, r3, r2
   14626:	2b01      	cmp	r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14628:	bf81      	itttt	hi
   1462a:	4b05      	ldrhi	r3, [pc, #20]	; (14640 <disconnect_encode+0x20>)
   1462c:	881b      	ldrhhi	r3, [r3, #0]
   1462e:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   14630:	6803      	ldrhi	r3, [r0, #0]
   14632:	bf83      	ittte	hi
   14634:	3302      	addhi	r3, #2
   14636:	6043      	strhi	r3, [r0, #4]

	return 0;
   14638:	2000      	movhi	r0, #0
		return -ENOMEM;
   1463a:	f06f 000b 	mvnls.w	r0, #11
}
   1463e:	4770      	bx	lr
   14640:	0002d165 	.word	0x0002d165

00014644 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   14644:	e9d0 2300 	ldrd	r2, r3, [r0]
   14648:	1a9b      	subs	r3, r3, r2
   1464a:	2b01      	cmp	r3, #1
   1464c:	bf81      	itttt	hi
   1464e:	4b05      	ldrhi	r3, [pc, #20]	; (14664 <ping_request_encode+0x20>)
   14650:	881b      	ldrhhi	r3, [r3, #0]
   14652:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   14654:	6803      	ldrhi	r3, [r0, #0]
   14656:	bf83      	ittte	hi
   14658:	3302      	addhi	r3, #2
   1465a:	6043      	strhi	r3, [r0, #4]

	return 0;
   1465c:	2000      	movhi	r0, #0
		return -ENOMEM;
   1465e:	f06f 000b 	mvnls.w	r0, #11
}
   14662:	4770      	bx	lr
   14664:	0002d167 	.word	0x0002d167

00014668 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   14668:	2314      	movs	r3, #20
   1466a:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   1466e:	4353      	muls	r3, r2
   14670:	4a01      	ldr	r2, [pc, #4]	; (14678 <mqtt_transport_connect+0x10>)
   14672:	58d3      	ldr	r3, [r2, r3]
   14674:	4718      	bx	r3
   14676:	bf00      	nop
   14678:	0002ba80 	.word	0x0002ba80

0001467c <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   1467c:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1467e:	2514      	movs	r5, #20
   14680:	4c03      	ldr	r4, [pc, #12]	; (14690 <mqtt_transport_write+0x14>)
   14682:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   14686:	fb05 4303 	mla	r3, r5, r3, r4
							  datalen);
}
   1468a:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1468c:	685b      	ldr	r3, [r3, #4]
   1468e:	4718      	bx	r3
   14690:	0002ba80 	.word	0x0002ba80

00014694 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   14694:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   14696:	2414      	movs	r4, #20
   14698:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1469c:	4a03      	ldr	r2, [pc, #12]	; (146ac <mqtt_transport_write_msg+0x18>)
   1469e:	fb04 2303 	mla	r3, r4, r3, r2
}
   146a2:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   146a6:	689b      	ldr	r3, [r3, #8]
   146a8:	4718      	bx	r3
   146aa:	bf00      	nop
   146ac:	0002ba80 	.word	0x0002ba80

000146b0 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   146b0:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   146b2:	2614      	movs	r6, #20
   146b4:	4d04      	ldr	r5, [pc, #16]	; (146c8 <mqtt_transport_read+0x18>)
   146b6:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   146ba:	fb06 5404 	mla	r4, r6, r4, r5
   146be:	68e4      	ldr	r4, [r4, #12]
   146c0:	46a4      	mov	ip, r4
							 shall_block);
}
   146c2:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   146c4:	4760      	bx	ip
   146c6:	bf00      	nop
   146c8:	0002ba80 	.word	0x0002ba80

000146cc <sys_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   146cc:	68c2      	ldr	r2, [r0, #12]
{
   146ce:	b508      	push	{r3, lr}
	if (mutex->kernel_mutex.lock_count == 0) {
   146d0:	b142      	cbz	r2, 146e4 <sys_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   146d2:	4b07      	ldr	r3, [pc, #28]	; (146f0 <sys_mutex_unlock+0x24>)
   146d4:	6882      	ldr	r2, [r0, #8]
   146d6:	689b      	ldr	r3, [r3, #8]
   146d8:	429a      	cmp	r2, r3
   146da:	d106      	bne.n	146ea <sys_mutex_unlock+0x1e>
	return z_impl_k_mutex_unlock(mutex);
   146dc:	f00c fa5a 	bl	20b94 <z_impl_k_mutex_unlock>
		return -EPERM;
	}

	k_mutex_unlock(&mutex->kernel_mutex);
	return 0;
   146e0:	2000      	movs	r0, #0
}
   146e2:	bd08      	pop	{r3, pc}
		return -EINVAL;
   146e4:	f06f 0015 	mvn.w	r0, #21
   146e8:	e7fb      	b.n	146e2 <sys_mutex_unlock+0x16>
		return -EPERM;
   146ea:	f04f 30ff 	mov.w	r0, #4294967295
   146ee:	e7f8      	b.n	146e2 <sys_mutex_unlock+0x16>
   146f0:	20021d74 	.word	0x20021d74

000146f4 <z_impl_sys_rand32_get>:

static const struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
uint32_t z_impl_sys_rand32_get(void)
{
   146f4:	b513      	push	{r0, r1, r4, lr}
	const struct device *dev = entropy_driver;
   146f6:	4c0a      	ldr	r4, [pc, #40]	; (14720 <z_impl_sys_rand32_get+0x2c>)
   146f8:	6820      	ldr	r0, [r4, #0]
	uint32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   146fa:	b918      	cbnz	r0, 14704 <z_impl_sys_rand32_get+0x10>
   146fc:	4809      	ldr	r0, [pc, #36]	; (14724 <z_impl_sys_rand32_get+0x30>)
   146fe:	f00b ff19 	bl	20534 <z_impl_device_get_binding>
		dev = device_get_binding(DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		__ASSERT((dev != NULL),
			"Device driver for %s (DT_CHOSEN_ZEPHYR_ENTROPY_LABEL) not found. "
			"Check your build configuration!",
			DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		entropy_driver = dev;
   14702:	6020      	str	r0, [r4, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   14704:	2204      	movs	r2, #4
   14706:	6883      	ldr	r3, [r0, #8]
   14708:	eb0d 0102 	add.w	r1, sp, r2
   1470c:	681b      	ldr	r3, [r3, #0]
   1470e:	4798      	blx	r3
	}

	ret = entropy_get_entropy(dev, (uint8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   14710:	2800      	cmp	r0, #0
   14712:	da02      	bge.n	1471a <z_impl_sys_rand32_get+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   14714:	f7fe ff3e 	bl	13594 <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   14718:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   1471a:	9801      	ldr	r0, [sp, #4]
   1471c:	b002      	add	sp, #8
   1471e:	bd10      	pop	{r4, pc}
   14720:	200215c4 	.word	0x200215c4
   14724:	0002d175 	.word	0x0002d175

00014728 <nrf_gpio_cfg_sense_set>:

NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   14728:	4a06      	ldr	r2, [pc, #24]	; (14744 <nrf_gpio_cfg_sense_set+0x1c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1472a:	f000 001f 	and.w	r0, r0, #31
   1472e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   14732:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   14736:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1473a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1473e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   14742:	4770      	bx	lr
   14744:	40842500 	.word	0x40842500

00014748 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   14748:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1474a:	4b09      	ldr	r3, [pc, #36]	; (14770 <gpio_nrfx_init+0x28>)
   1474c:	781a      	ldrb	r2, [r3, #0]
   1474e:	b96a      	cbnz	r2, 1476c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   14750:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   14752:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   14754:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   14756:	2105      	movs	r1, #5
   14758:	f7fe ffd6 	bl	13708 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1475c:	2031      	movs	r0, #49	; 0x31
   1475e:	f7fe ffb5 	bl	136cc <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   14762:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   14766:	4b03      	ldr	r3, [pc, #12]	; (14774 <gpio_nrfx_init+0x2c>)
   14768:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1476c:	2000      	movs	r0, #0
   1476e:	bd08      	pop	{r3, pc}
   14770:	200234b7 	.word	0x200234b7
   14774:	40031000 	.word	0x40031000

00014778 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14778:	4b28      	ldr	r3, [pc, #160]	; (1481c <gpio_nrfx_config+0xa4>)
{
   1477a:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1477c:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1477e:	4828      	ldr	r0, [pc, #160]	; (14820 <gpio_nrfx_config+0xa8>)
   14780:	4013      	ands	r3, r2
   14782:	4283      	cmp	r3, r0
   14784:	d03b      	beq.n	147fe <gpio_nrfx_config+0x86>
   14786:	d80d      	bhi.n	147a4 <gpio_nrfx_config+0x2c>
   14788:	2b06      	cmp	r3, #6
   1478a:	d015      	beq.n	147b8 <gpio_nrfx_config+0x40>
   1478c:	d805      	bhi.n	1479a <gpio_nrfx_config+0x22>
   1478e:	b19b      	cbz	r3, 147b8 <gpio_nrfx_config+0x40>
   14790:	2b02      	cmp	r3, #2
   14792:	d036      	beq.n	14802 <gpio_nrfx_config+0x8a>
   14794:	f06f 0015 	mvn.w	r0, #21
   14798:	e030      	b.n	147fc <gpio_nrfx_config+0x84>
   1479a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1479e:	d1f9      	bne.n	14794 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   147a0:	2301      	movs	r3, #1
   147a2:	e009      	b.n	147b8 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   147a4:	481f      	ldr	r0, [pc, #124]	; (14824 <gpio_nrfx_config+0xac>)
   147a6:	4283      	cmp	r3, r0
   147a8:	d02d      	beq.n	14806 <gpio_nrfx_config+0x8e>
   147aa:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   147ae:	d02c      	beq.n	1480a <gpio_nrfx_config+0x92>
   147b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   147b4:	d1ee      	bne.n	14794 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   147b6:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   147b8:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
   147ba:	bf4c      	ite	mi
   147bc:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
   147be:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   147c2:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   147c6:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   147ca:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   147ce:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   147d2:	d006      	beq.n	147e2 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   147d4:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   147d8:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   147da:	d018      	beq.n	1480e <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_set(reg, BIT(pin));
   147dc:	2201      	movs	r2, #1
   147de:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   147e0:	60b2      	str	r2, [r6, #8]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   147e2:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
   147e6:	2000      	movs	r0, #0
   147e8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    *p_pin = pin_number & 0x1F;
   147ec:	f001 011f 	and.w	r1, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   147f0:	4a0d      	ldr	r2, [pc, #52]	; (14828 <gpio_nrfx_config+0xb0>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   147f2:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   147f6:	3180      	adds	r1, #128	; 0x80
   147f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   147fc:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   147fe:	2307      	movs	r3, #7
   14800:	e7da      	b.n	147b8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   14802:	2304      	movs	r3, #4
   14804:	e7d8      	b.n	147b8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   14806:	2305      	movs	r3, #5
   14808:	e7d6      	b.n	147b8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1480a:	2303      	movs	r3, #3
   1480c:	e7d4      	b.n	147b8 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1480e:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   14810:	bf42      	ittt	mi
   14812:	2201      	movmi	r2, #1
   14814:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   14816:	60f2      	strmi	r2, [r6, #12]
}
   14818:	e7e3      	b.n	147e2 <gpio_nrfx_config+0x6a>
   1481a:	bf00      	nop
   1481c:	00f00006 	.word	0x00f00006
   14820:	00100006 	.word	0x00100006
   14824:	00400002 	.word	0x00400002
   14828:	40842500 	.word	0x40842500

0001482c <gpio_nrfx_pin_interrupt_configure>:
{
   1482c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14830:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   14832:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   14834:	f8d0 800c 	ldr.w	r8, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   14838:	7a08      	ldrb	r0, [r1, #8]
   1483a:	f005 071f 	and.w	r7, r5, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1483e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   14842:	ea47 1740 	orr.w	r7, r7, r0, lsl #5
   14846:	d10a      	bne.n	1485e <gpio_nrfx_pin_interrupt_configure+0x32>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   14848:	486e      	ldr	r0, [pc, #440]	; (14a04 <gpio_nrfx_pin_interrupt_configure+0x1d8>)
    *p_pin = pin_number & 0x1F;
   1484a:	f007 011f 	and.w	r1, r7, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1484e:	3180      	adds	r1, #128	; 0x80
   14850:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   14854:	07c8      	lsls	r0, r1, #31
   14856:	d508      	bpl.n	1486a <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
   14858:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1485c:	e0c2      	b.n	149e4 <gpio_nrfx_pin_interrupt_configure+0x1b8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1485e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   14862:	f8d8 100c 	ldr.w	r1, [r8, #12]
   14866:	f000 80ae 	beq.w	149c6 <gpio_nrfx_pin_interrupt_configure+0x19a>
   1486a:	2101      	movs	r1, #1
   1486c:	f8d8 000c 	ldr.w	r0, [r8, #12]
   14870:	40a9      	lsls	r1, r5
   14872:	4301      	orrs	r1, r0
   14874:	f8c8 100c 	str.w	r1, [r8, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   14878:	2101      	movs	r1, #1
   1487a:	f8d8 0014 	ldr.w	r0, [r8, #20]
   1487e:	40a9      	lsls	r1, r5
   14880:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   14884:	f8d8 2018 	ldr.w	r2, [r8, #24]
   14888:	bf0c      	ite	eq
   1488a:	4308      	orreq	r0, r1
   1488c:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1488e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   14892:	bf0c      	ite	eq
   14894:	430a      	orreq	r2, r1
   14896:	438a      	bicne	r2, r1
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   14898:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1489c:	f04f 0300 	mov.w	r3, #0
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   148a0:	f8c8 2018 	str.w	r2, [r8, #24]
   148a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   148a8:	4e57      	ldr	r6, [pc, #348]	; (14a08 <gpio_nrfx_pin_interrupt_configure+0x1dc>)
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   148aa:	bf0c      	ite	eq
   148ac:	4311      	orreq	r1, r2
   148ae:	ea22 0101 	bicne.w	r1, r2, r1
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   148b2:	f8c8 0014 	str.w	r0, [r8, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   148b6:	f8c8 1010 	str.w	r1, [r8, #16]
   148ba:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   148be:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   148c0:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   148c4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   148c8:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   148cc:	428f      	cmp	r7, r1
   148ce:	d17f      	bne.n	149d0 <gpio_nrfx_pin_interrupt_configure+0x1a4>
		    && (intenset & BIT(i))) {
   148d0:	fa22 f103 	lsr.w	r1, r2, r3
   148d4:	07c9      	lsls	r1, r1, #31
   148d6:	d57b      	bpl.n	149d0 <gpio_nrfx_pin_interrupt_configure+0x1a4>
			(void)atomic_and(mask, ~BIT(i));
   148d8:	2201      	movs	r2, #1
   148da:	409a      	lsls	r2, r3
   148dc:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   148de:	494b      	ldr	r1, [pc, #300]	; (14a0c <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   148e0:	e8d1 4fef 	ldaex	r4, [r1]
   148e4:	4004      	ands	r4, r0
   148e6:	e8c1 4fec 	stlex	ip, r4, [r1]
   148ea:	f1bc 0f00 	cmp.w	ip, #0
   148ee:	d1f7      	bne.n	148e0 <gpio_nrfx_pin_interrupt_configure+0xb4>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   148f0:	009b      	lsls	r3, r3, #2
   148f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   148f6:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   148fa:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   148fe:	f021 0101 	bic.w	r1, r1, #1
   14902:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   14906:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1490a:	2100      	movs	r1, #0
   1490c:	4638      	mov	r0, r7
   1490e:	f7ff ff0b 	bl	14728 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   14912:	f8d8 300c 	ldr.w	r3, [r8, #12]
   14916:	40eb      	lsrs	r3, r5
   14918:	f013 0301 	ands.w	r3, r3, #1
   1491c:	d051      	beq.n	149c2 <gpio_nrfx_pin_interrupt_configure+0x196>
		if (data->trig_edge & BIT(pin)) {
   1491e:	f8d8 3014 	ldr.w	r3, [r8, #20]
   14922:	40eb      	lsrs	r3, r5
   14924:	f013 0401 	ands.w	r4, r3, #1
   14928:	d05e      	beq.n	149e8 <gpio_nrfx_pin_interrupt_configure+0x1bc>
			if (data->double_edge & BIT(pin)) {
   1492a:	f8d8 3018 	ldr.w	r3, [r8, #24]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1492e:	2200      	movs	r2, #0
			if (data->double_edge & BIT(pin)) {
   14930:	40eb      	lsrs	r3, r5
   14932:	07db      	lsls	r3, r3, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   14934:	bf48      	it	mi
   14936:	2503      	movmi	r5, #3
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   14938:	f04f 0c01 	mov.w	ip, #1
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1493c:	bf5f      	itttt	pl
   1493e:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
   14942:	fa21 f505 	lsrpl.w	r5, r1, r5
   14946:	f005 0501 	andpl.w	r5, r5, #1
   1494a:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1494e:	492f      	ldr	r1, [pc, #188]	; (14a0c <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   14950:	bf58      	it	pl
   14952:	b2ed      	uxtbpl	r5, r5
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   14954:	fa0c f402 	lsl.w	r4, ip, r2
   14958:	e8d1 0fef 	ldaex	r0, [r1]
   1495c:	ea40 0304 	orr.w	r3, r0, r4
   14960:	e8c1 3fee 	stlex	lr, r3, [r1]
   14964:	f1be 0f00 	cmp.w	lr, #0
   14968:	d1f6      	bne.n	14958 <gpio_nrfx_pin_interrupt_configure+0x12c>
		if ((prev & BIT(channel)) == 0) {
   1496a:	40d0      	lsrs	r0, r2
   1496c:	f010 0301 	ands.w	r3, r0, #1
   14970:	d133      	bne.n	149da <gpio_nrfx_pin_interrupt_configure+0x1ae>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14972:	0091      	lsls	r1, r2, #2
   14974:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   14978:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   1497c:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
			nrf_gpiote_event_t evt =
   14980:	3240      	adds	r2, #64	; 0x40
   14982:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   14986:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1498a:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1498e:	023f      	lsls	r7, r7, #8
   14990:	0092      	lsls	r2, r2, #2
   14992:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   14996:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   1499a:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1499c:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
    return ((uint32_t)p_reg + event);
   149a0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   149a4:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   149a8:	4307      	orrs	r7, r0
   149aa:	f8c1 7510 	str.w	r7, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   149ae:	6013      	str	r3, [r2, #0]
   149b0:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   149b2:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   149b6:	f042 0201 	orr.w	r2, r2, #1
   149ba:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   149be:	f8c6 4304 	str.w	r4, [r6, #772]	; 0x304
	int res = 0;
   149c2:	4618      	mov	r0, r3
   149c4:	e00e      	b.n	149e4 <gpio_nrfx_pin_interrupt_configure+0x1b8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   149c6:	2001      	movs	r0, #1
   149c8:	40a8      	lsls	r0, r5
   149ca:	ea21 0100 	bic.w	r1, r1, r0
   149ce:	e751      	b.n	14874 <gpio_nrfx_pin_interrupt_configure+0x48>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   149d0:	3301      	adds	r3, #1
   149d2:	2b08      	cmp	r3, #8
   149d4:	f47f af74 	bne.w	148c0 <gpio_nrfx_pin_interrupt_configure+0x94>
   149d8:	e797      	b.n	1490a <gpio_nrfx_pin_interrupt_configure+0xde>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   149da:	3201      	adds	r2, #1
   149dc:	2a08      	cmp	r2, #8
   149de:	d1b9      	bne.n	14954 <gpio_nrfx_pin_interrupt_configure+0x128>
	return -ENODEV;
   149e0:	f06f 0012 	mvn.w	r0, #18
}
   149e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   149e8:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   149ec:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
   149ee:	40e9      	lsrs	r1, r5
   149f0:	f001 0101 	and.w	r1, r1, #1
   149f4:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   149f8:	b2c9      	uxtb	r1, r1
   149fa:	f7ff fe95 	bl	14728 <nrf_gpio_cfg_sense_set>
	int res = 0;
   149fe:	4620      	mov	r0, r4
   14a00:	e7f0      	b.n	149e4 <gpio_nrfx_pin_interrupt_configure+0x1b8>
   14a02:	bf00      	nop
   14a04:	40842500 	.word	0x40842500
   14a08:	40031000 	.word	0x40031000
   14a0c:	200215e4 	.word	0x200215e4

00014a10 <gpiote_event_handler>:
{
   14a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14a14:	4e3c      	ldr	r6, [pc, #240]	; (14b08 <gpiote_event_handler+0xf8>)
   14a16:	6837      	ldr	r7, [r6, #0]
	if (port_event) {
   14a18:	2f00      	cmp	r7, #0
   14a1a:	d04f      	beq.n	14abc <gpiote_event_handler+0xac>
	uint32_t bit = 1U << pin;
   14a1c:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
   14a20:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
   14a24:	4b39      	ldr	r3, [pc, #228]	; (14b0c <gpiote_event_handler+0xfc>)
   14a26:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   14a28:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   14a2c:	430a      	orrs	r2, r1
   14a2e:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
   14a32:	4a37      	ldr	r2, [pc, #220]	; (14b10 <gpiote_event_handler+0x100>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   14a34:	691b      	ldr	r3, [r3, #16]
   14a36:	6914      	ldr	r4, [r2, #16]
   14a38:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   14a3a:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   14a3e:	bb75      	cbnz	r5, 14a9e <gpiote_event_handler+0x8e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14a40:	6035      	str	r5, [r6, #0]
   14a42:	6833      	ldr	r3, [r6, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   14a44:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   14a46:	2501      	movs	r5, #1
   14a48:	461e      	mov	r6, r3
    return p_reg->INTENSET & mask;
   14a4a:	4832      	ldr	r0, [pc, #200]	; (14b14 <gpiote_event_handler+0x104>)
   14a4c:	4932      	ldr	r1, [pc, #200]	; (14b18 <gpiote_event_handler+0x108>)
   14a4e:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   14a52:	fa05 fc03 	lsl.w	ip, r5, r3
   14a56:	ea1c 0f02 	tst.w	ip, r2
   14a5a:	d00f      	beq.n	14a7c <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14a5c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   14a60:	b162      	cbz	r2, 14a7c <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14a62:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   14a66:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14a6a:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14a6e:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   14a72:	fa05 f202 	lsl.w	r2, r5, r2
   14a76:	4314      	orrs	r4, r2
   14a78:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   14a7c:	3301      	adds	r3, #1
   14a7e:	2b08      	cmp	r3, #8
   14a80:	d1e5      	bne.n	14a4e <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   14a82:	b9ec      	cbnz	r4, 14ac0 <gpiote_event_handler+0xb0>
	if (port_event) {
   14a84:	b14f      	cbz	r7, 14a9a <gpiote_event_handler+0x8a>
	uint32_t bit = 1U << pin;
   14a86:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   14a88:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   14a8a:	4d20      	ldr	r5, [pc, #128]	; (14b0c <gpiote_event_handler+0xfc>)
   14a8c:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   14a8e:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   14a92:	430a      	orrs	r2, r1
   14a94:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   14a98:	bb1c      	cbnz	r4, 14ae2 <gpiote_event_handler+0xd2>
}
   14a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
   14a9e:	ea15 0f08 	tst.w	r5, r8
   14aa2:	d006      	beq.n	14ab2 <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   14aa4:	2100      	movs	r1, #0
   14aa6:	f009 001f 	and.w	r0, r9, #31
   14aaa:	f7ff fe3d 	bl	14728 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   14aae:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   14ab2:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   14ab6:	ea4f 0848 	mov.w	r8, r8, lsl #1
   14aba:	e7c0      	b.n	14a3e <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   14abc:	463c      	mov	r4, r7
   14abe:	e7c1      	b.n	14a44 <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14ac0:	4b12      	ldr	r3, [pc, #72]	; (14b0c <gpiote_event_handler+0xfc>)
   14ac2:	6859      	ldr	r1, [r3, #4]
   14ac4:	2900      	cmp	r1, #0
   14ac6:	d0dd      	beq.n	14a84 <gpiote_event_handler+0x74>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14ac8:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   14aca:	4e14      	ldr	r6, [pc, #80]	; (14b1c <gpiote_event_handler+0x10c>)
		if (cb->pin_mask & pins) {
   14acc:	688a      	ldr	r2, [r1, #8]
   14ace:	4022      	ands	r2, r4
   14ad0:	d002      	beq.n	14ad8 <gpiote_event_handler+0xc8>
			cb->handler(port, cb, cb->pin_mask & pins);
   14ad2:	4630      	mov	r0, r6
   14ad4:	684b      	ldr	r3, [r1, #4]
   14ad6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14ad8:	2d00      	cmp	r5, #0
   14ada:	d0d3      	beq.n	14a84 <gpiote_event_handler+0x74>
   14adc:	4629      	mov	r1, r5
   14ade:	682d      	ldr	r5, [r5, #0]
   14ae0:	e7f4      	b.n	14acc <gpiote_event_handler+0xbc>
		if (level_pins & bit) {
   14ae2:	4226      	tst	r6, r4
   14ae4:	d00c      	beq.n	14b00 <gpiote_event_handler+0xf0>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   14ae6:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   14ae8:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   14aec:	40f9      	lsrs	r1, r7
   14aee:	f001 0101 	and.w	r1, r1, #1
   14af2:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   14af6:	b2c9      	uxtb	r1, r1
   14af8:	f7ff fe16 	bl	14728 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   14afc:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   14b00:	3701      	adds	r7, #1
		bit <<= 1;
   14b02:	0076      	lsls	r6, r6, #1
   14b04:	e7c8      	b.n	14a98 <gpiote_event_handler+0x88>
   14b06:	bf00      	nop
   14b08:	4003117c 	.word	0x4003117c
   14b0c:	200215c8 	.word	0x200215c8
   14b10:	40842500 	.word	0x40842500
   14b14:	40031000 	.word	0x40031000
   14b18:	40031100 	.word	0x40031100
   14b1c:	20020ab0 	.word	0x20020ab0

00014b20 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   14b20:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   14b22:	794b      	ldrb	r3, [r1, #5]
   14b24:	2b01      	cmp	r3, #1
   14b26:	d029      	beq.n	14b7c <uarte_nrfx_configure+0x5c>
   14b28:	2b03      	cmp	r3, #3
   14b2a:	d124      	bne.n	14b76 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   14b2c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   14b2e:	798b      	ldrb	r3, [r1, #6]
   14b30:	2b03      	cmp	r3, #3
   14b32:	d120      	bne.n	14b76 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   14b34:	79cc      	ldrb	r4, [r1, #7]
   14b36:	b124      	cbz	r4, 14b42 <uarte_nrfx_configure+0x22>
   14b38:	2c01      	cmp	r4, #1
   14b3a:	d11c      	bne.n	14b76 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   14b3c:	6843      	ldr	r3, [r0, #4]
   14b3e:	791b      	ldrb	r3, [r3, #4]
   14b40:	b1cb      	cbz	r3, 14b76 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   14b42:	790a      	ldrb	r2, [r1, #4]
   14b44:	b112      	cbz	r2, 14b4c <uarte_nrfx_configure+0x2c>
   14b46:	2a02      	cmp	r2, #2
   14b48:	d115      	bne.n	14b76 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   14b4a:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   14b4c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   14b4e:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   14b50:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   14b54:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   14b56:	d065      	beq.n	14c24 <uarte_nrfx_configure+0x104>
   14b58:	d82d      	bhi.n	14bb6 <uarte_nrfx_configure+0x96>
   14b5a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14b5e:	d064      	beq.n	14c2a <uarte_nrfx_configure+0x10a>
   14b60:	d816      	bhi.n	14b90 <uarte_nrfx_configure+0x70>
   14b62:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   14b66:	d062      	beq.n	14c2e <uarte_nrfx_configure+0x10e>
   14b68:	d80a      	bhi.n	14b80 <uarte_nrfx_configure+0x60>
   14b6a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   14b6e:	d061      	beq.n	14c34 <uarte_nrfx_configure+0x114>
   14b70:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   14b74:	d061      	beq.n	14c3a <uarte_nrfx_configure+0x11a>
   14b76:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14b7a:	e052      	b.n	14c22 <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   14b7c:	2600      	movs	r6, #0
   14b7e:	e7d6      	b.n	14b2e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   14b80:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   14b84:	d05c      	beq.n	14c40 <uarte_nrfx_configure+0x120>
   14b86:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   14b8a:	d1f4      	bne.n	14b76 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   14b8c:	4b37      	ldr	r3, [pc, #220]	; (14c6c <uarte_nrfx_configure+0x14c>)
   14b8e:	e03c      	b.n	14c0a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   14b90:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   14b94:	d057      	beq.n	14c46 <uarte_nrfx_configure+0x126>
   14b96:	d807      	bhi.n	14ba8 <uarte_nrfx_configure+0x88>
   14b98:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   14b9c:	d055      	beq.n	14c4a <uarte_nrfx_configure+0x12a>
   14b9e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   14ba2:	d1e8      	bne.n	14b76 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   14ba4:	4b32      	ldr	r3, [pc, #200]	; (14c70 <uarte_nrfx_configure+0x150>)
   14ba6:	e030      	b.n	14c0a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   14ba8:	f647 2712 	movw	r7, #31250	; 0x7a12
   14bac:	42bb      	cmp	r3, r7
   14bae:	d1e2      	bne.n	14b76 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   14bb0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   14bb4:	e029      	b.n	14c0a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   14bb6:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   14bba:	d048      	beq.n	14c4e <uarte_nrfx_configure+0x12e>
   14bbc:	d813      	bhi.n	14be6 <uarte_nrfx_configure+0xc6>
   14bbe:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   14bc2:	d047      	beq.n	14c54 <uarte_nrfx_configure+0x134>
   14bc4:	d809      	bhi.n	14bda <uarte_nrfx_configure+0xba>
   14bc6:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   14bca:	42bb      	cmp	r3, r7
   14bcc:	d044      	beq.n	14c58 <uarte_nrfx_configure+0x138>
   14bce:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   14bd2:	d1d0      	bne.n	14b76 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   14bd4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   14bd8:	e017      	b.n	14c0a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   14bda:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   14bde:	d1ca      	bne.n	14b76 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   14be0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   14be4:	e011      	b.n	14c0a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   14be6:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   14bea:	d038      	beq.n	14c5e <uarte_nrfx_configure+0x13e>
   14bec:	d808      	bhi.n	14c00 <uarte_nrfx_configure+0xe0>
   14bee:	4f21      	ldr	r7, [pc, #132]	; (14c74 <uarte_nrfx_configure+0x154>)
   14bf0:	42bb      	cmp	r3, r7
   14bf2:	d037      	beq.n	14c64 <uarte_nrfx_configure+0x144>
   14bf4:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   14bf8:	d1bd      	bne.n	14b76 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   14bfa:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   14bfe:	e004      	b.n	14c0a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   14c00:	4f1d      	ldr	r7, [pc, #116]	; (14c78 <uarte_nrfx_configure+0x158>)
   14c02:	42bb      	cmp	r3, r7
   14c04:	d1b7      	bne.n	14b76 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   14c06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   14c0a:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   14c0e:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   14c10:	4334      	orrs	r4, r6
   14c12:	4322      	orrs	r2, r4
   14c14:	3304      	adds	r3, #4
   14c16:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   14c18:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   14c1c:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   14c20:	2000      	movs	r0, #0
}
   14c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   14c24:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   14c28:	e7ef      	b.n	14c0a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   14c2a:	4b14      	ldr	r3, [pc, #80]	; (14c7c <uarte_nrfx_configure+0x15c>)
   14c2c:	e7ed      	b.n	14c0a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   14c2e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   14c32:	e7ea      	b.n	14c0a <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   14c34:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   14c38:	e7e7      	b.n	14c0a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   14c3a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   14c3e:	e7e4      	b.n	14c0a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   14c40:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   14c44:	e7e1      	b.n	14c0a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   14c46:	4b0e      	ldr	r3, [pc, #56]	; (14c80 <uarte_nrfx_configure+0x160>)
   14c48:	e7df      	b.n	14c0a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   14c4a:	4b0e      	ldr	r3, [pc, #56]	; (14c84 <uarte_nrfx_configure+0x164>)
   14c4c:	e7dd      	b.n	14c0a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   14c4e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   14c52:	e7da      	b.n	14c0a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   14c54:	4b0c      	ldr	r3, [pc, #48]	; (14c88 <uarte_nrfx_configure+0x168>)
   14c56:	e7d8      	b.n	14c0a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   14c58:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   14c5c:	e7d5      	b.n	14c0a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   14c5e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   14c62:	e7d2      	b.n	14c0a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   14c64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   14c68:	e7cf      	b.n	14c0a <uarte_nrfx_configure+0xea>
   14c6a:	bf00      	nop
   14c6c:	0013b000 	.word	0x0013b000
   14c70:	004ea000 	.word	0x004ea000
   14c74:	0003d090 	.word	0x0003d090
   14c78:	000f4240 	.word	0x000f4240
   14c7c:	00275000 	.word	0x00275000
   14c80:	0075c000 	.word	0x0075c000
   14c84:	003af000 	.word	0x003af000
   14c88:	013a9000 	.word	0x013a9000

00014c8c <uarte_instance_init.constprop.0>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(const struct device *dev,
   14c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	nrf_uarte_disable(uarte);

	data->dev = dev;

	nrf_gpio_pin_write(config->pseltxd, 1);
   14c8e:	680f      	ldr	r7, [r1, #0]
static int uarte_instance_init(const struct device *dev,
   14c90:	460d      	mov	r5, r1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14c92:	2101      	movs	r1, #1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   14c94:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
   14c98:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14c9a:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   14c9c:	681c      	ldr	r4, [r3, #0]
    *p_pin = pin_number & 0x1F;
   14c9e:	f007 021f 	and.w	r2, r7, #31
    p_reg->OUTSET = set_mask;
   14ca2:	4b2b      	ldr	r3, [pc, #172]	; (14d50 <uarte_instance_init.constprop.0+0xc4>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14ca4:	4091      	lsls	r1, r2
   14ca6:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
	data->dev = dev;
   14caa:	6030      	str	r0, [r6, #0]
    p_reg->OUTSET = set_mask;
   14cac:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14cae:	2103      	movs	r1, #3
   14cb0:	3280      	adds	r2, #128	; 0x80
   14cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   14cb6:	686a      	ldr	r2, [r5, #4]
   14cb8:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
   14cba:	bf1e      	ittt	ne
   14cbc:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14cc0:	3180      	addne	r1, #128	; 0x80
   14cc2:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   14cc6:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.TXD = pseltxd;
   14cc8:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
   14ccc:	1c4f      	adds	r7, r1, #1
   14cce:	bf18      	it	ne
   14cd0:	2700      	movne	r7, #0
    p_reg->PSEL.RXD = pselrxd;
   14cd2:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
   14cd6:	bf1e      	ittt	ne
   14cd8:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14cdc:	3280      	addne	r2, #128	; 0x80
   14cde:	f843 7022 	strne.w	r7, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   14ce2:	68ef      	ldr	r7, [r5, #12]
   14ce4:	1c7a      	adds	r2, r7, #1
   14ce6:	d00c      	beq.n	14d02 <uarte_instance_init.constprop.0+0x76>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14ce8:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
   14cec:	f007 021f 	and.w	r2, r7, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14cf0:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
   14cf4:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14cf8:	f04f 0c03 	mov.w	ip, #3
   14cfc:	3280      	adds	r2, #128	; 0x80
   14cfe:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   14d02:	f8c4 7508 	str.w	r7, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   14d06:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   14d0a:	68c1      	ldr	r1, [r0, #12]
   14d0c:	3104      	adds	r1, #4
   14d0e:	f7ff ff07 	bl	14b20 <uarte_nrfx_configure>
	if (err) {
   14d12:	b9d8      	cbnz	r0, 14d4c <uarte_instance_init.constprop.0+0xc0>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   14d14:	2308      	movs	r3, #8
   14d16:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   14d1a:	686b      	ldr	r3, [r5, #4]
   14d1c:	3301      	adds	r3, #1
   14d1e:	d00b      	beq.n	14d38 <uarte_instance_init.constprop.0+0xac>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14d20:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   14d24:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   14d28:	f106 0314 	add.w	r3, r6, #20

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   14d2c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   14d30:	2301      	movs	r3, #1
   14d32:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14d36:	6023      	str	r3, [r4, #0]
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   14d38:	68f3      	ldr	r3, [r6, #12]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14d3a:	689b      	ldr	r3, [r3, #8]
   14d3c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14d40:	2300      	movs	r3, #0
   14d42:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14d46:	2301      	movs	r3, #1
   14d48:	60a3      	str	r3, [r4, #8]
   14d4a:	60e3      	str	r3, [r4, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   14d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14d4e:	bf00      	nop
   14d50:	40842500 	.word	0x40842500

00014d54 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   14d54:	b530      	push	{r4, r5, lr}
   14d56:	b085      	sub	sp, #20
   14d58:	466c      	mov	r4, sp
   14d5a:	4605      	mov	r5, r0
   14d5c:	4b08      	ldr	r3, [pc, #32]	; (14d80 <uarte_1_init+0x2c>)
   14d5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   14d60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   14d64:	2200      	movs	r2, #0
   14d66:	2101      	movs	r1, #1
   14d68:	2009      	movs	r0, #9
   14d6a:	f7fe fccd 	bl	13708 <z_arm_irq_priority_set>
   14d6e:	2009      	movs	r0, #9
   14d70:	f7fe fcac 	bl	136cc <arch_irq_enable>
   14d74:	4621      	mov	r1, r4
   14d76:	4628      	mov	r0, r5
   14d78:	f7ff ff88 	bl	14c8c <uarte_instance_init.constprop.0>
   14d7c:	b005      	add	sp, #20
   14d7e:	bd30      	pop	{r4, r5, pc}
   14d80:	0002b850 	.word	0x0002b850

00014d84 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   14d84:	b530      	push	{r4, r5, lr}
   14d86:	b085      	sub	sp, #20
   14d88:	466c      	mov	r4, sp
   14d8a:	4605      	mov	r5, r0
   14d8c:	4b08      	ldr	r3, [pc, #32]	; (14db0 <uarte_0_init+0x2c>)
   14d8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   14d90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   14d94:	2200      	movs	r2, #0
   14d96:	2101      	movs	r1, #1
   14d98:	2008      	movs	r0, #8
   14d9a:	f7fe fcb5 	bl	13708 <z_arm_irq_priority_set>
   14d9e:	2008      	movs	r0, #8
   14da0:	f7fe fc94 	bl	136cc <arch_irq_enable>
   14da4:	4621      	mov	r1, r4
   14da6:	4628      	mov	r0, r5
   14da8:	f7ff ff70 	bl	14c8c <uarte_instance_init.constprop.0>
   14dac:	b005      	add	sp, #20
   14dae:	bd30      	pop	{r4, r5, pc}
   14db0:	0002b860 	.word	0x0002b860

00014db4 <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
   14db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14db8:	4605      	mov	r5, r0
    unsigned char *output_pointer = NULL;
    size_t output_length = 0;
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;

    if (output_buffer == NULL)
   14dba:	460f      	mov	r7, r1
{
   14dbc:	b085      	sub	sp, #20
    if (output_buffer == NULL)
   14dbe:	b919      	cbnz	r1, 14dc8 <print_string_ptr+0x14>
    {
        return false;
   14dc0:	2000      	movs	r0, #0
    }
    output[output_length + 1] = '\"';
    output[output_length + 2] = '\0';

    return true;
}
   14dc2:	b005      	add	sp, #20
   14dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const char quotes[] = "\"\"";
   14dc8:	4b4e      	ldr	r3, [pc, #312]	; (14f04 <print_string_ptr+0x150>)
   14dca:	881a      	ldrh	r2, [r3, #0]
   14dcc:	789b      	ldrb	r3, [r3, #2]
   14dce:	f8ad 200c 	strh.w	r2, [sp, #12]
   14dd2:	f88d 300e 	strb.w	r3, [sp, #14]
    if (input == NULL)
   14dd6:	b340      	cbz	r0, 14e2a <print_string_ptr+0x76>
   14dd8:	4601      	mov	r1, r0
    size_t escape_characters = 0;
   14dda:	f04f 0b00 	mov.w	fp, #0
   14dde:	2001      	movs	r0, #1
   14de0:	4c49      	ldr	r4, [pc, #292]	; (14f08 <print_string_ptr+0x154>)
   14de2:	468a      	mov	sl, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   14de4:	f811 3b01 	ldrb.w	r3, [r1], #1
   14de8:	bb6b      	cbnz	r3, 14e46 <print_string_ptr+0x92>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   14dea:	ebaa 0a05 	sub.w	sl, sl, r5
   14dee:	44da      	add	sl, fp
    output = ensure(output_buffer, output_length + sizeof(quotes));
   14df0:	4638      	mov	r0, r7
   14df2:	f10a 0103 	add.w	r1, sl, #3
   14df6:	f015 f9a1 	bl	2a13c <ensure>
    if (output == NULL)
   14dfa:	4606      	mov	r6, r0
   14dfc:	2800      	cmp	r0, #0
   14dfe:	d0df      	beq.n	14dc0 <print_string_ptr+0xc>
    if (escape_characters == 0)
   14e00:	2322      	movs	r3, #34	; 0x22
   14e02:	1c44      	adds	r4, r0, #1
   14e04:	f10a 0901 	add.w	r9, sl, #1
   14e08:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   14e0c:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   14e0e:	f1bb 0f00 	cmp.w	fp, #0
   14e12:	d12e      	bne.n	14e72 <print_string_ptr+0xbe>
   14e14:	4652      	mov	r2, sl
   14e16:	4629      	mov	r1, r5
   14e18:	4620      	mov	r0, r4
   14e1a:	f7f7 feab 	bl	cb74 <memcpy>
        output[output_length + 1] = '\"';
   14e1e:	2322      	movs	r3, #34	; 0x22
   14e20:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   14e24:	f806 b008 	strb.w	fp, [r6, r8]
        return true;
   14e28:	e00b      	b.n	14e42 <print_string_ptr+0x8e>
        output = ensure(output_buffer, sizeof(quotes));
   14e2a:	2103      	movs	r1, #3
   14e2c:	4638      	mov	r0, r7
   14e2e:	f015 f985 	bl	2a13c <ensure>
        if (output == NULL)
   14e32:	2800      	cmp	r0, #0
   14e34:	d0c4      	beq.n	14dc0 <print_string_ptr+0xc>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   14e36:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   14e3a:	a903      	add	r1, sp, #12
   14e3c:	1ad2      	subs	r2, r2, r3
   14e3e:	f00d fe7d 	bl	22b3c <strncpy>
    return true;
   14e42:	2001      	movs	r0, #1
   14e44:	e7bd      	b.n	14dc2 <print_string_ptr+0xe>
        switch (*input_pointer)
   14e46:	2b22      	cmp	r3, #34	; 0x22
   14e48:	d80b      	bhi.n	14e62 <print_string_ptr+0xae>
   14e4a:	2b07      	cmp	r3, #7
   14e4c:	d90c      	bls.n	14e68 <print_string_ptr+0xb4>
   14e4e:	f1a3 0208 	sub.w	r2, r3, #8
   14e52:	b2d2      	uxtb	r2, r2
   14e54:	fa00 f202 	lsl.w	r2, r0, r2
   14e58:	4222      	tst	r2, r4
   14e5a:	d005      	beq.n	14e68 <print_string_ptr+0xb4>
                escape_characters++;
   14e5c:	f10b 0b01 	add.w	fp, fp, #1
                break;
   14e60:	e7bf      	b.n	14de2 <print_string_ptr+0x2e>
        switch (*input_pointer)
   14e62:	2b5c      	cmp	r3, #92	; 0x5c
   14e64:	d1bd      	bne.n	14de2 <print_string_ptr+0x2e>
   14e66:	e7f9      	b.n	14e5c <print_string_ptr+0xa8>
                if (*input_pointer < 32)
   14e68:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   14e6a:	bf98      	it	ls
   14e6c:	f10b 0b05 	addls.w	fp, fp, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   14e70:	e7b7      	b.n	14de2 <print_string_ptr+0x2e>
            *output_pointer++ = '\\';
   14e72:	f04f 0a5c 	mov.w	sl, #92	; 0x5c
                    *output_pointer = 't';
   14e76:	f04f 0b74 	mov.w	fp, #116	; 0x74
   14e7a:	1e6b      	subs	r3, r5, #1
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   14e7c:	4a23      	ldr	r2, [pc, #140]	; (14f0c <print_string_ptr+0x158>)
   14e7e:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   14e80:	9901      	ldr	r1, [sp, #4]
   14e82:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   14e86:	9101      	str	r1, [sp, #4]
   14e88:	b92b      	cbnz	r3, 14e96 <print_string_ptr+0xe2>
    output[output_length + 1] = '\"';
   14e8a:	2222      	movs	r2, #34	; 0x22
   14e8c:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   14e90:	f806 3008 	strb.w	r3, [r6, r8]
   14e94:	e7d5      	b.n	14e42 <print_string_ptr+0x8e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   14e96:	2b1f      	cmp	r3, #31
   14e98:	d907      	bls.n	14eaa <print_string_ptr+0xf6>
   14e9a:	2b22      	cmp	r3, #34	; 0x22
   14e9c:	d005      	beq.n	14eaa <print_string_ptr+0xf6>
   14e9e:	2b5c      	cmp	r3, #92	; 0x5c
   14ea0:	d003      	beq.n	14eaa <print_string_ptr+0xf6>
            *output_pointer = *input_pointer;
   14ea2:	4620      	mov	r0, r4
   14ea4:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   14ea6:	1c44      	adds	r4, r0, #1
   14ea8:	e7ea      	b.n	14e80 <print_string_ptr+0xcc>
            *output_pointer++ = '\\';
   14eaa:	4620      	mov	r0, r4
            switch (*input_pointer)
   14eac:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   14eae:	f800 ab01 	strb.w	sl, [r0], #1
            switch (*input_pointer)
   14eb2:	781b      	ldrb	r3, [r3, #0]
   14eb4:	2b0d      	cmp	r3, #13
   14eb6:	d80a      	bhi.n	14ece <print_string_ptr+0x11a>
   14eb8:	2b07      	cmp	r3, #7
   14eba:	d919      	bls.n	14ef0 <print_string_ptr+0x13c>
   14ebc:	f1a3 0108 	sub.w	r1, r3, #8
   14ec0:	2905      	cmp	r1, #5
   14ec2:	d815      	bhi.n	14ef0 <print_string_ptr+0x13c>
   14ec4:	e8df f001 	tbb	[pc, r1]
   14ec8:	140d1109 	.word	0x140d1109
   14ecc:	0f0b      	.short	0x0f0b
   14ece:	2b22      	cmp	r3, #34	; 0x22
   14ed0:	d001      	beq.n	14ed6 <print_string_ptr+0x122>
   14ed2:	2b5c      	cmp	r3, #92	; 0x5c
   14ed4:	d10c      	bne.n	14ef0 <print_string_ptr+0x13c>
                    *output_pointer = 'b';
   14ed6:	7063      	strb	r3, [r4, #1]
                    break;
   14ed8:	e7e5      	b.n	14ea6 <print_string_ptr+0xf2>
                    *output_pointer = 'b';
   14eda:	2362      	movs	r3, #98	; 0x62
   14edc:	e7fb      	b.n	14ed6 <print_string_ptr+0x122>
                    *output_pointer = 'f';
   14ede:	2366      	movs	r3, #102	; 0x66
   14ee0:	e7f9      	b.n	14ed6 <print_string_ptr+0x122>
                    *output_pointer = 'n';
   14ee2:	236e      	movs	r3, #110	; 0x6e
   14ee4:	e7f7      	b.n	14ed6 <print_string_ptr+0x122>
                    *output_pointer = 'r';
   14ee6:	2372      	movs	r3, #114	; 0x72
   14ee8:	e7f5      	b.n	14ed6 <print_string_ptr+0x122>
                    *output_pointer = 't';
   14eea:	f884 b001 	strb.w	fp, [r4, #1]
                    break;
   14eee:	e7da      	b.n	14ea6 <print_string_ptr+0xf2>
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   14ef0:	6839      	ldr	r1, [r7, #0]
   14ef2:	687d      	ldr	r5, [r7, #4]
   14ef4:	1a41      	subs	r1, r0, r1
   14ef6:	1a69      	subs	r1, r5, r1
   14ef8:	f00d fc18 	bl	2272c <snprintf>
                    output_pointer += 4;
   14efc:	4a03      	ldr	r2, [pc, #12]	; (14f0c <print_string_ptr+0x158>)
   14efe:	1d60      	adds	r0, r4, #5
                    break;
   14f00:	e7d1      	b.n	14ea6 <print_string_ptr+0xf2>
   14f02:	bf00      	nop
   14f04:	0002d1a7 	.word	0x0002d1a7
   14f08:	04000037 	.word	0x04000037
   14f0c:	0002d1a1 	.word	0x0002d1a1

00014f10 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
   14f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14f14:	460c      	mov	r4, r1
    unsigned char *output = NULL;

    if ((item == NULL) || (output_buffer == NULL))
   14f16:	4606      	mov	r6, r0
{
   14f18:	b08f      	sub	sp, #60	; 0x3c
    if ((item == NULL) || (output_buffer == NULL))
   14f1a:	b908      	cbnz	r0, 14f20 <print_value+0x10>
    {
        return false;
    }

    switch ((item->type) & 0xFF)
   14f1c:	2500      	movs	r5, #0
   14f1e:	e06f      	b.n	15000 <print_value+0xf0>
    if ((item == NULL) || (output_buffer == NULL))
   14f20:	2900      	cmp	r1, #0
   14f22:	d0fb      	beq.n	14f1c <print_value+0xc>
    switch ((item->type) & 0xFF)
   14f24:	7b05      	ldrb	r5, [r0, #12]
   14f26:	2d10      	cmp	r5, #16
   14f28:	f000 80cc 	beq.w	150c4 <print_value+0x1b4>
   14f2c:	dc18      	bgt.n	14f60 <print_value+0x50>
   14f2e:	1e6b      	subs	r3, r5, #1
   14f30:	2b07      	cmp	r3, #7
   14f32:	d8f3      	bhi.n	14f1c <print_value+0xc>
   14f34:	2b07      	cmp	r3, #7
   14f36:	d8f1      	bhi.n	14f1c <print_value+0xc>
   14f38:	a201      	add	r2, pc, #4	; (adr r2, 14f40 <print_value+0x30>)
   14f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14f3e:	bf00      	nop
   14f40:	00014fdd 	.word	0x00014fdd
   14f44:	00015009 	.word	0x00015009
   14f48:	00014f1d 	.word	0x00014f1d
   14f4c:	00014fb5 	.word	0x00014fb5
   14f50:	00014f1d 	.word	0x00014f1d
   14f54:	00014f1d 	.word	0x00014f1d
   14f58:	00014f1d 	.word	0x00014f1d
   14f5c:	0001500d 	.word	0x0001500d
   14f60:	2d40      	cmp	r5, #64	; 0x40
   14f62:	f000 80dd 	beq.w	15120 <print_value+0x210>
   14f66:	2d80      	cmp	r5, #128	; 0x80
   14f68:	f000 8098 	beq.w	1509c <print_value+0x18c>
   14f6c:	2d20      	cmp	r5, #32
   14f6e:	d1d5      	bne.n	14f1c <print_value+0xc>

        case cJSON_String:
            return print_string(item, output_buffer);

        case cJSON_Array:
            return print_array(item, output_buffer);
   14f70:	6886      	ldr	r6, [r0, #8]
        return false;
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
   14f72:	2101      	movs	r1, #1
   14f74:	4620      	mov	r0, r4
   14f76:	f015 f8e1 	bl	2a13c <ensure>
    if (output_pointer == NULL)
   14f7a:	2800      	cmp	r0, #0
   14f7c:	d0ce      	beq.n	14f1c <print_value+0xc>
    {
        return false;
    }

    *output_pointer = '[';
   14f7e:	235b      	movs	r3, #91	; 0x5b
            output_pointer = ensure(output_buffer, length + 1);
            if (output_pointer == NULL)
            {
                return false;
            }
            *output_pointer++ = ',';
   14f80:	272c      	movs	r7, #44	; 0x2c
            if(output_buffer->format)
            {
                *output_pointer++ = ' ';
            }
            *output_pointer = '\0';
   14f82:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   14f86:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   14f88:	68a3      	ldr	r3, [r4, #8]
   14f8a:	3301      	adds	r3, #1
   14f8c:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   14f8e:	68e3      	ldr	r3, [r4, #12]
   14f90:	3301      	adds	r3, #1
   14f92:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   14f94:	2e00      	cmp	r6, #0
   14f96:	f040 809a 	bne.w	150ce <print_value+0x1be>
            output_buffer->offset += length;
        }
        current_element = current_element->next;
    }

    output_pointer = ensure(output_buffer, 2);
   14f9a:	2102      	movs	r1, #2
   14f9c:	4620      	mov	r0, r4
   14f9e:	f015 f8cd 	bl	2a13c <ensure>
    if (output_pointer == NULL)
   14fa2:	2800      	cmp	r0, #0
   14fa4:	d0ba      	beq.n	14f1c <print_value+0xc>
    {
        return false;
    }
    *output_pointer++ = ']';
   14fa6:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   14fa8:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   14faa:	7003      	strb	r3, [r0, #0]
            *output_pointer++ = '\t';
        }
    }
    *output_pointer++ = '}';
    *output_pointer = '\0';
    output_buffer->depth--;
   14fac:	68e3      	ldr	r3, [r4, #12]
   14fae:	3b01      	subs	r3, #1
   14fb0:	60e3      	str	r3, [r4, #12]
   14fb2:	e011      	b.n	14fd8 <print_value+0xc8>
            const char buff[] = "null";
   14fb4:	4ba8      	ldr	r3, [pc, #672]	; (15258 <print_value+0x348>)
            const char buff[] = "true";
   14fb6:	6818      	ldr	r0, [r3, #0]
   14fb8:	791b      	ldrb	r3, [r3, #4]
   14fba:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   14fbc:	2105      	movs	r1, #5
   14fbe:	4620      	mov	r0, r4
            const char buff[] = "true";
   14fc0:	f88d 3020 	strb.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   14fc4:	f015 f8ba 	bl	2a13c <ensure>
            if (output == NULL)
   14fc8:	4605      	mov	r5, r0
   14fca:	b1c8      	cbz	r0, 15000 <print_value+0xf0>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   14fcc:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   14fd0:	a907      	add	r1, sp, #28
   14fd2:	1ad2      	subs	r2, r2, r3
   14fd4:	f00d fdb2 	bl	22b3c <strncpy>

    return true;
   14fd8:	2501      	movs	r5, #1
   14fda:	e011      	b.n	15000 <print_value+0xf0>
            const char buff[] = "false";
   14fdc:	4b9f      	ldr	r3, [pc, #636]	; (1525c <print_value+0x34c>)
            output = ensure(output_buffer, sizeof(buff));
   14fde:	2106      	movs	r1, #6
            const char buff[] = "false";
   14fe0:	6818      	ldr	r0, [r3, #0]
   14fe2:	889b      	ldrh	r3, [r3, #4]
   14fe4:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   14fe6:	4620      	mov	r0, r4
            const char buff[] = "false";
   14fe8:	f8ad 3020 	strh.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   14fec:	f015 f8a6 	bl	2a13c <ensure>
            if (output == NULL)
   14ff0:	2800      	cmp	r0, #0
   14ff2:	d093      	beq.n	14f1c <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   14ff4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   14ff8:	a907      	add	r1, sp, #28
   14ffa:	1ad2      	subs	r2, r2, r3
   14ffc:	f00d fd9e 	bl	22b3c <strncpy>
}
   15000:	4628      	mov	r0, r5
   15002:	b00f      	add	sp, #60	; 0x3c
   15004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            const char buff[] = "true";
   15008:	4b95      	ldr	r3, [pc, #596]	; (15260 <print_value+0x350>)
   1500a:	e7d4      	b.n	14fb6 <print_value+0xa6>
    if ((d * 0) != 0)
   1500c:	2200      	movs	r2, #0
    double d = item->valuedouble;
   1500e:	e9d0 8906 	ldrd	r8, r9, [r0, #24]
    if ((d * 0) != 0)
   15012:	2300      	movs	r3, #0
   15014:	4640      	mov	r0, r8
   15016:	4649      	mov	r1, r9
   15018:	f7f7 ff00 	bl	ce1c <__aeabi_dmul>
   1501c:	2200      	movs	r2, #0
   1501e:	2300      	movs	r3, #0
   15020:	f7f7 fb20 	bl	c664 <__aeabi_dcmpeq>
   15024:	ae07      	add	r6, sp, #28
   15026:	b9b8      	cbnz	r0, 15058 <print_value+0x148>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   15028:	4630      	mov	r0, r6
   1502a:	498b      	ldr	r1, [pc, #556]	; (15258 <print_value+0x348>)
   1502c:	f00d fcc0 	bl	229b0 <strcpy>
   15030:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   15032:	4620      	mov	r0, r4
   15034:	1c69      	adds	r1, r5, #1
   15036:	f015 f881 	bl	2a13c <ensure>
    if (output_pointer == NULL)
   1503a:	2800      	cmp	r0, #0
   1503c:	f43f af6e 	beq.w	14f1c <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   15040:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   15042:	5cf2      	ldrb	r2, [r6, r3]
        output_pointer[i] = number_buffer[i];
   15044:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   15046:	3301      	adds	r3, #1
   15048:	429d      	cmp	r5, r3
   1504a:	d1fa      	bne.n	15042 <print_value+0x132>
    output_pointer[i] = '\0';
   1504c:	2300      	movs	r3, #0
   1504e:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   15050:	68a0      	ldr	r0, [r4, #8]
   15052:	4428      	add	r0, r5
   15054:	60a0      	str	r0, [r4, #8]
    return true;
   15056:	e7bf      	b.n	14fd8 <print_value+0xc8>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   15058:	211a      	movs	r1, #26
   1505a:	4a82      	ldr	r2, [pc, #520]	; (15264 <print_value+0x354>)
   1505c:	4630      	mov	r0, r6
   1505e:	e9cd 8900 	strd	r8, r9, [sp]
   15062:	f00d fb63 	bl	2272c <snprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   15066:	4980      	ldr	r1, [pc, #512]	; (15268 <print_value+0x358>)
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   15068:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   1506a:	aa04      	add	r2, sp, #16
   1506c:	4630      	mov	r0, r6
   1506e:	f00d fbc1 	bl	227f4 <sscanf>
   15072:	2801      	cmp	r0, #1
   15074:	d106      	bne.n	15084 <print_value+0x174>
   15076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1507a:	4640      	mov	r0, r8
   1507c:	4649      	mov	r1, r9
   1507e:	f7f7 faf1 	bl	c664 <__aeabi_dcmpeq>
   15082:	b938      	cbnz	r0, 15094 <print_value+0x184>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   15084:	211a      	movs	r1, #26
   15086:	4630      	mov	r0, r6
   15088:	e9cd 8900 	strd	r8, r9, [sp]
   1508c:	4a77      	ldr	r2, [pc, #476]	; (1526c <print_value+0x35c>)
   1508e:	f00d fb4d 	bl	2272c <snprintf>
   15092:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   15094:	2d19      	cmp	r5, #25
   15096:	f73f af41 	bgt.w	14f1c <print_value+0xc>
   1509a:	e7ca      	b.n	15032 <print_value+0x122>
            if (item->valuestring == NULL)
   1509c:	6900      	ldr	r0, [r0, #16]
   1509e:	2800      	cmp	r0, #0
   150a0:	f43f af3c 	beq.w	14f1c <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   150a4:	f00d fce2 	bl	22a6c <strlen>
   150a8:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   150aa:	4611      	mov	r1, r2
   150ac:	4620      	mov	r0, r4
   150ae:	9203      	str	r2, [sp, #12]
   150b0:	f015 f844 	bl	2a13c <ensure>
            if (output == NULL)
   150b4:	2800      	cmp	r0, #0
   150b6:	f43f af31 	beq.w	14f1c <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   150ba:	9a03      	ldr	r2, [sp, #12]
   150bc:	6931      	ldr	r1, [r6, #16]
   150be:	f7f7 fd59 	bl	cb74 <memcpy>
   150c2:	e789      	b.n	14fd8 <print_value+0xc8>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   150c4:	6900      	ldr	r0, [r0, #16]
   150c6:	f7ff fe75 	bl	14db4 <print_string_ptr>
   150ca:	4605      	mov	r5, r0
            return print_string(item, output_buffer);
   150cc:	e798      	b.n	15000 <print_value+0xf0>
        if (!print_value(current_element, output_buffer))
   150ce:	4621      	mov	r1, r4
   150d0:	4630      	mov	r0, r6
   150d2:	f7ff ff1d 	bl	14f10 <print_value>
   150d6:	2800      	cmp	r0, #0
   150d8:	f43f af20 	beq.w	14f1c <print_value+0xc>
        update_offset(output_buffer);
   150dc:	4620      	mov	r0, r4
   150de:	f015 f804 	bl	2a0ea <update_offset>
        if (current_element->next)
   150e2:	6833      	ldr	r3, [r6, #0]
   150e4:	b1bb      	cbz	r3, 15116 <print_value+0x206>
            length = (size_t) (output_buffer->format ? 2 : 1);
   150e6:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   150e8:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   150ea:	2b00      	cmp	r3, #0
   150ec:	bf14      	ite	ne
   150ee:	f04f 0902 	movne.w	r9, #2
   150f2:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   150f6:	f109 0101 	add.w	r1, r9, #1
   150fa:	f015 f81f 	bl	2a13c <ensure>
            if (output_pointer == NULL)
   150fe:	2800      	cmp	r0, #0
   15100:	f43f af0c 	beq.w	14f1c <print_value+0xc>
            *output_pointer++ = ',';
   15104:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   15106:	6963      	ldr	r3, [r4, #20]
   15108:	b93b      	cbnz	r3, 1511a <print_value+0x20a>
            *output_pointer++ = ',';
   1510a:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   1510c:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   15110:	68a3      	ldr	r3, [r4, #8]
   15112:	444b      	add	r3, r9
   15114:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   15116:	6836      	ldr	r6, [r6, #0]
   15118:	e73c      	b.n	14f94 <print_value+0x84>
                *output_pointer++ = ' ';
   1511a:	1c83      	adds	r3, r0, #2
   1511c:	7045      	strb	r5, [r0, #1]
   1511e:	e7f5      	b.n	1510c <print_value+0x1fc>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   15120:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   15122:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   15124:	2b00      	cmp	r3, #0
   15126:	bf14      	ite	ne
   15128:	2702      	movne	r7, #2
   1512a:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   1512c:	4620      	mov	r0, r4
   1512e:	1c79      	adds	r1, r7, #1
   15130:	f015 f804 	bl	2a13c <ensure>
    if (output_pointer == NULL)
   15134:	2800      	cmp	r0, #0
   15136:	f43f aef1 	beq.w	14f1c <print_value+0xc>
    *output_pointer++ = '{';
   1513a:	237b      	movs	r3, #123	; 0x7b
   1513c:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   1513e:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   15140:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   15142:	3201      	adds	r2, #1
   15144:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   15146:	b10b      	cbz	r3, 1514c <print_value+0x23c>
        *output_pointer++ = '\n';
   15148:	230a      	movs	r3, #10
   1514a:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   1514c:	68a3      	ldr	r3, [r4, #8]
                *output_pointer++ = '\t';
   1514e:	2609      	movs	r6, #9
    output_buffer->offset += length;
   15150:	443b      	add	r3, r7
        *output_pointer++ = ':';
   15152:	273a      	movs	r7, #58	; 0x3a
    output_buffer->offset += length;
   15154:	60a3      	str	r3, [r4, #8]
    while (current_item)
   15156:	6963      	ldr	r3, [r4, #20]
   15158:	b995      	cbnz	r5, 15180 <print_value+0x270>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   1515a:	2b00      	cmp	r3, #0
   1515c:	d06f      	beq.n	1523e <print_value+0x32e>
   1515e:	68e1      	ldr	r1, [r4, #12]
   15160:	3101      	adds	r1, #1
   15162:	4620      	mov	r0, r4
   15164:	f014 ffea 	bl	2a13c <ensure>
    if (output_pointer == NULL)
   15168:	2800      	cmp	r0, #0
   1516a:	f43f aed7 	beq.w	14f1c <print_value+0xc>
    if (output_buffer->format)
   1516e:	6963      	ldr	r3, [r4, #20]
   15170:	2b00      	cmp	r3, #0
   15172:	d16e      	bne.n	15252 <print_value+0x342>
   15174:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   15176:	227d      	movs	r2, #125	; 0x7d
   15178:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   1517a:	2200      	movs	r2, #0
   1517c:	705a      	strb	r2, [r3, #1]
   1517e:	e715      	b.n	14fac <print_value+0x9c>
        if (output_buffer->format)
   15180:	b173      	cbz	r3, 151a0 <print_value+0x290>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   15182:	4620      	mov	r0, r4
   15184:	68e1      	ldr	r1, [r4, #12]
   15186:	f014 ffd9 	bl	2a13c <ensure>
            if (output_pointer == NULL)
   1518a:	2800      	cmp	r0, #0
   1518c:	f43f aec6 	beq.w	14f1c <print_value+0xc>
   15190:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   15192:	68e1      	ldr	r1, [r4, #12]
   15194:	1a13      	subs	r3, r2, r0
   15196:	428b      	cmp	r3, r1
   15198:	d34e      	bcc.n	15238 <print_value+0x328>
            output_buffer->offset += output_buffer->depth;
   1519a:	68a3      	ldr	r3, [r4, #8]
   1519c:	440b      	add	r3, r1
   1519e:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   151a0:	4621      	mov	r1, r4
   151a2:	6a28      	ldr	r0, [r5, #32]
   151a4:	f7ff fe06 	bl	14db4 <print_string_ptr>
   151a8:	2800      	cmp	r0, #0
   151aa:	f43f aeb7 	beq.w	14f1c <print_value+0xc>
        update_offset(output_buffer);
   151ae:	4620      	mov	r0, r4
   151b0:	f014 ff9b 	bl	2a0ea <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   151b4:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   151b6:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   151b8:	2b00      	cmp	r3, #0
   151ba:	bf14      	ite	ne
   151bc:	f04f 0802 	movne.w	r8, #2
   151c0:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   151c4:	4641      	mov	r1, r8
   151c6:	f014 ffb9 	bl	2a13c <ensure>
        if (output_pointer == NULL)
   151ca:	2800      	cmp	r0, #0
   151cc:	f43f aea6 	beq.w	14f1c <print_value+0xc>
        *output_pointer++ = ':';
   151d0:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   151d2:	6963      	ldr	r3, [r4, #20]
   151d4:	b103      	cbz	r3, 151d8 <print_value+0x2c8>
            *output_pointer++ = '\t';
   151d6:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   151d8:	68a3      	ldr	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   151da:	4621      	mov	r1, r4
        output_buffer->offset += length;
   151dc:	4443      	add	r3, r8
        if (!print_value(current_item, output_buffer))
   151de:	4628      	mov	r0, r5
        output_buffer->offset += length;
   151e0:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   151e2:	f7ff fe95 	bl	14f10 <print_value>
   151e6:	2800      	cmp	r0, #0
   151e8:	f43f ae98 	beq.w	14f1c <print_value+0xc>
        update_offset(output_buffer);
   151ec:	4620      	mov	r0, r4
   151ee:	f014 ff7c 	bl	2a0ea <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   151f2:	682b      	ldr	r3, [r5, #0]
   151f4:	6962      	ldr	r2, [r4, #20]
   151f6:	3b00      	subs	r3, #0
   151f8:	bf18      	it	ne
   151fa:	2301      	movne	r3, #1
   151fc:	2a00      	cmp	r2, #0
   151fe:	bf0c      	ite	eq
   15200:	4698      	moveq	r8, r3
   15202:	f103 0801 	addne.w	r8, r3, #1
        output_pointer = ensure(output_buffer, length + 1);
   15206:	4620      	mov	r0, r4
   15208:	f108 0101 	add.w	r1, r8, #1
   1520c:	f014 ff96 	bl	2a13c <ensure>
        if (output_pointer == NULL)
   15210:	2800      	cmp	r0, #0
   15212:	f43f ae83 	beq.w	14f1c <print_value+0xc>
        if (current_item->next)
   15216:	682b      	ldr	r3, [r5, #0]
   15218:	b113      	cbz	r3, 15220 <print_value+0x310>
            *output_pointer++ = ',';
   1521a:	232c      	movs	r3, #44	; 0x2c
   1521c:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   15220:	6963      	ldr	r3, [r4, #20]
   15222:	b113      	cbz	r3, 1522a <print_value+0x31a>
            *output_pointer++ = '\n';
   15224:	230a      	movs	r3, #10
   15226:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   1522a:	2300      	movs	r3, #0
   1522c:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   1522e:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   15230:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   15232:	4443      	add	r3, r8
   15234:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   15236:	e78e      	b.n	15156 <print_value+0x246>
                *output_pointer++ = '\t';
   15238:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   1523c:	e7a9      	b.n	15192 <print_value+0x282>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   1523e:	2102      	movs	r1, #2
   15240:	e78f      	b.n	15162 <print_value+0x252>
            *output_pointer++ = '\t';
   15242:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   15246:	68e2      	ldr	r2, [r4, #12]
   15248:	1a19      	subs	r1, r3, r0
   1524a:	3a01      	subs	r2, #1
   1524c:	4291      	cmp	r1, r2
   1524e:	d3f8      	bcc.n	15242 <print_value+0x332>
   15250:	e791      	b.n	15176 <print_value+0x266>
   15252:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   15254:	2509      	movs	r5, #9
   15256:	e7f6      	b.n	15246 <print_value+0x336>
   15258:	0002d1aa 	.word	0x0002d1aa
   1525c:	0002d1c1 	.word	0x0002d1c1
   15260:	0002d1c7 	.word	0x0002d1c7
   15264:	0002d1af 	.word	0x0002d1af
   15268:	0002d1b6 	.word	0x0002d1b6
   1526c:	0002d1ba 	.word	0x0002d1ba

00015270 <cJSON_strdup.isra.0.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   15270:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   15272:	4605      	mov	r5, r0
   15274:	b180      	cbz	r0, 15298 <cJSON_strdup.isra.0.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   15276:	f00d fbf9 	bl	22a6c <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   1527a:	4b08      	ldr	r3, [pc, #32]	; (1529c <cJSON_strdup.isra.0.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   1527c:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   1527e:	4610      	mov	r0, r2
   15280:	681b      	ldr	r3, [r3, #0]
   15282:	9201      	str	r2, [sp, #4]
   15284:	4798      	blx	r3
    if (copy == NULL)
   15286:	4604      	mov	r4, r0
   15288:	b118      	cbz	r0, 15292 <cJSON_strdup.isra.0.constprop.0+0x22>
   1528a:	4629      	mov	r1, r5
   1528c:	9a01      	ldr	r2, [sp, #4]
   1528e:	f7f7 fc71 	bl	cb74 <memcpy>
}
   15292:	4620      	mov	r0, r4
   15294:	b003      	add	sp, #12
   15296:	bd30      	pop	{r4, r5, pc}
        return NULL;
   15298:	4604      	mov	r4, r0
   1529a:	e7fa      	b.n	15292 <cJSON_strdup.isra.0.constprop.0+0x22>
   1529c:	2002048c 	.word	0x2002048c

000152a0 <add_item_to_object.constprop.0>:
#if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   152a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   152a2:	460d      	mov	r5, r1
   152a4:	4614      	mov	r4, r2
{
    char *new_key = NULL;
    int new_type = cJSON_Invalid;

    if ((object == NULL) || (string == NULL) || (item == NULL))
   152a6:	4607      	mov	r7, r0
   152a8:	b1f0      	cbz	r0, 152e8 <add_item_to_object.constprop.0+0x48>
   152aa:	b1e9      	cbz	r1, 152e8 <add_item_to_object.constprop.0+0x48>
   152ac:	b1e2      	cbz	r2, 152e8 <add_item_to_object.constprop.0+0x48>
    {
        return false;
    }

    if (constant_key)
   152ae:	b193      	cbz	r3, 152d6 <add_item_to_object.constprop.0+0x36>
    {
        new_key = (char*)cast_away_const(string);
        new_type = item->type | cJSON_StringIsConst;
   152b0:	68d6      	ldr	r6, [r2, #12]
   152b2:	f446 7600 	orr.w	r6, r6, #512	; 0x200
        }

        new_type = item->type & ~cJSON_StringIsConst;
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   152b6:	68e3      	ldr	r3, [r4, #12]
   152b8:	059b      	lsls	r3, r3, #22
   152ba:	d404      	bmi.n	152c6 <add_item_to_object.constprop.0+0x26>
   152bc:	6a20      	ldr	r0, [r4, #32]
   152be:	b110      	cbz	r0, 152c6 <add_item_to_object.constprop.0+0x26>
    {
        hooks->deallocate(item->string);
   152c0:	4b0a      	ldr	r3, [pc, #40]	; (152ec <add_item_to_object.constprop.0+0x4c>)
   152c2:	685b      	ldr	r3, [r3, #4]
   152c4:	4798      	blx	r3
    }

    item->string = new_key;
    item->type = new_type;

    return add_item_to_array(object, item);
   152c6:	4621      	mov	r1, r4
   152c8:	4638      	mov	r0, r7
    item->string = new_key;
   152ca:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   152cc:	60e6      	str	r6, [r4, #12]
}
   152ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   152d2:	f014 bf17 	b.w	2a104 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   152d6:	4608      	mov	r0, r1
   152d8:	f7ff ffca 	bl	15270 <cJSON_strdup.isra.0.constprop.0>
        if (new_key == NULL)
   152dc:	4605      	mov	r5, r0
   152de:	b118      	cbz	r0, 152e8 <add_item_to_object.constprop.0+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   152e0:	68e6      	ldr	r6, [r4, #12]
   152e2:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   152e6:	e7e6      	b.n	152b6 <add_item_to_object.constprop.0+0x16>
}
   152e8:	2000      	movs	r0, #0
   152ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   152ec:	2002048c 	.word	0x2002048c

000152f0 <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   152f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   152f2:	4d24      	ldr	r5, [pc, #144]	; (15384 <print.constprop.0+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   152f4:	b08b      	sub	sp, #44	; 0x2c
   152f6:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   152f8:	2224      	movs	r2, #36	; 0x24
   152fa:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   152fc:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   152fe:	a801      	add	r0, sp, #4
   15300:	f00c ffa4 	bl	2224c <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   15304:	682b      	ldr	r3, [r5, #0]
   15306:	f44f 7080 	mov.w	r0, #256	; 0x100
   1530a:	4798      	blx	r3
    buffer->length = default_buffer_size;
   1530c:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   15310:	4603      	mov	r3, r0
    buffer->format = format;
   15312:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   15314:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   15316:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   15318:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   1531a:	462f      	mov	r7, r5
   1531c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   15320:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   15324:	b17b      	cbz	r3, 15346 <print.constprop.0+0x56>
    if (!print_value(item, buffer))
   15326:	4620      	mov	r0, r4
   15328:	a901      	add	r1, sp, #4
   1532a:	f7ff fdf1 	bl	14f10 <print_value>
   1532e:	b150      	cbz	r0, 15346 <print.constprop.0+0x56>
    update_offset(buffer);
   15330:	a801      	add	r0, sp, #4
   15332:	f014 feda 	bl	2a0ea <update_offset>
    if (hooks->reallocate != NULL)
   15336:	68ae      	ldr	r6, [r5, #8]
   15338:	9903      	ldr	r1, [sp, #12]
   1533a:	b15e      	cbz	r6, 15354 <print.constprop.0+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   1533c:	9801      	ldr	r0, [sp, #4]
   1533e:	3101      	adds	r1, #1
   15340:	47b0      	blx	r6
        if (printed == NULL) {
   15342:	4604      	mov	r4, r0
   15344:	b9d0      	cbnz	r0, 1537c <print.constprop.0+0x8c>
    if (buffer->buffer != NULL)
   15346:	9c01      	ldr	r4, [sp, #4]
   15348:	b1c4      	cbz	r4, 1537c <print.constprop.0+0x8c>
        hooks->deallocate(buffer->buffer);
   1534a:	4620      	mov	r0, r4
   1534c:	687b      	ldr	r3, [r7, #4]
   1534e:	4798      	blx	r3
    return NULL;
   15350:	2400      	movs	r4, #0
   15352:	e013      	b.n	1537c <print.constprop.0+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   15354:	682b      	ldr	r3, [r5, #0]
   15356:	1c48      	adds	r0, r1, #1
   15358:	4798      	blx	r3
        if (printed == NULL)
   1535a:	4604      	mov	r4, r0
   1535c:	2800      	cmp	r0, #0
   1535e:	d0f2      	beq.n	15346 <print.constprop.0+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   15360:	9a03      	ldr	r2, [sp, #12]
   15362:	9b02      	ldr	r3, [sp, #8]
   15364:	3201      	adds	r2, #1
   15366:	429a      	cmp	r2, r3
   15368:	bf28      	it	cs
   1536a:	461a      	movcs	r2, r3
   1536c:	9901      	ldr	r1, [sp, #4]
   1536e:	f7f7 fc01 	bl	cb74 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   15372:	9b03      	ldr	r3, [sp, #12]
   15374:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   15376:	686b      	ldr	r3, [r5, #4]
   15378:	9801      	ldr	r0, [sp, #4]
   1537a:	4798      	blx	r3
}
   1537c:	4620      	mov	r0, r4
   1537e:	b00b      	add	sp, #44	; 0x2c
   15380:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15382:	bf00      	nop
   15384:	2002048c 	.word	0x2002048c

00015388 <cJSON_Delete>:
{
   15388:	b570      	push	{r4, r5, r6, lr}
   1538a:	4604      	mov	r4, r0
   1538c:	4d0f      	ldr	r5, [pc, #60]	; (153cc <cJSON_Delete+0x44>)
    while (item != NULL)
   1538e:	b904      	cbnz	r4, 15392 <cJSON_Delete+0xa>
}
   15390:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   15392:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   15394:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   15396:	05d9      	lsls	r1, r3, #23
   15398:	d403      	bmi.n	153a2 <cJSON_Delete+0x1a>
   1539a:	68a0      	ldr	r0, [r4, #8]
   1539c:	b968      	cbnz	r0, 153ba <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   1539e:	6920      	ldr	r0, [r4, #16]
   153a0:	b988      	cbnz	r0, 153c6 <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   153a2:	68e3      	ldr	r3, [r4, #12]
   153a4:	059b      	lsls	r3, r3, #22
   153a6:	d403      	bmi.n	153b0 <cJSON_Delete+0x28>
   153a8:	6a20      	ldr	r0, [r4, #32]
   153aa:	b108      	cbz	r0, 153b0 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   153ac:	686b      	ldr	r3, [r5, #4]
   153ae:	4798      	blx	r3
        global_hooks.deallocate(item);
   153b0:	4620      	mov	r0, r4
   153b2:	686b      	ldr	r3, [r5, #4]
   153b4:	4798      	blx	r3
        item = next;
   153b6:	4634      	mov	r4, r6
   153b8:	e7e9      	b.n	1538e <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   153ba:	f7ff ffe5 	bl	15388 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   153be:	68e3      	ldr	r3, [r4, #12]
   153c0:	05da      	lsls	r2, r3, #23
   153c2:	d5ec      	bpl.n	1539e <cJSON_Delete+0x16>
   153c4:	e7ed      	b.n	153a2 <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   153c6:	686b      	ldr	r3, [r5, #4]
   153c8:	4798      	blx	r3
   153ca:	e7ea      	b.n	153a2 <cJSON_Delete+0x1a>
   153cc:	2002048c 	.word	0x2002048c

000153d0 <cJSON_CreateString>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   153d0:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   153d2:	4b0a      	ldr	r3, [pc, #40]	; (153fc <cJSON_CreateString+0x2c>)
{
   153d4:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   153d6:	6818      	ldr	r0, [r3, #0]
   153d8:	f014 fea4 	bl	2a124 <cJSON_New_Item.isra.0>
    if(item)
   153dc:	4604      	mov	r4, r0
   153de:	b158      	cbz	r0, 153f8 <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   153e0:	2310      	movs	r3, #16
   153e2:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   153e4:	4628      	mov	r0, r5
   153e6:	f7ff ff43 	bl	15270 <cJSON_strdup.isra.0.constprop.0>
   153ea:	4605      	mov	r5, r0
   153ec:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   153ee:	b918      	cbnz	r0, 153f8 <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   153f0:	4620      	mov	r0, r4
   153f2:	f7ff ffc9 	bl	15388 <cJSON_Delete>
            return NULL;
   153f6:	462c      	mov	r4, r5
        }
    }

    return item;
}
   153f8:	4620      	mov	r0, r4
   153fa:	bd38      	pop	{r3, r4, r5, pc}
   153fc:	2002048c 	.word	0x2002048c

00015400 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   15400:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   15402:	4b04      	ldr	r3, [pc, #16]	; (15414 <cJSON_CreateObject+0x14>)
   15404:	6818      	ldr	r0, [r3, #0]
   15406:	f014 fe8d 	bl	2a124 <cJSON_New_Item.isra.0>
    if (item)
   1540a:	b108      	cbz	r0, 15410 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   1540c:	2340      	movs	r3, #64	; 0x40
   1540e:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   15410:	bd08      	pop	{r3, pc}
   15412:	bf00      	nop
   15414:	2002048c 	.word	0x2002048c

00015418 <_bsdlib_init>:
extern void ipc_proxy_irq_handler(void);

static int init_ret;

static int _bsdlib_init(const struct device *unused)
{
   15418:	b530      	push	{r4, r5, lr}
	if (!first_time_init) {
   1541a:	4d19      	ldr	r5, [pc, #100]	; (15480 <_bsdlib_init+0x68>)
   1541c:	4c19      	ldr	r4, [pc, #100]	; (15484 <_bsdlib_init+0x6c>)
   1541e:	782b      	ldrb	r3, [r5, #0]
{
   15420:	b085      	sub	sp, #20
	if (!first_time_init) {
   15422:	b933      	cbnz	r3, 15432 <_bsdlib_init+0x1a>
	list->tail = NULL;
   15424:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   15428:	4817      	ldr	r0, [pc, #92]	; (15488 <_bsdlib_init+0x70>)
   1542a:	f015 fc8b 	bl	2ad44 <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   1542e:	2301      	movs	r3, #1
   15430:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   15432:	2200      	movs	r2, #0
   15434:	202a      	movs	r0, #42	; 0x2a
   15436:	4611      	mov	r1, r2
   15438:	f7fe f966 	bl	13708 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	const bsd_init_params_t init_params = {
   1543c:	4a13      	ldr	r2, [pc, #76]	; (1548c <_bsdlib_init+0x74>)
   1543e:	ab01      	add	r3, sp, #4
   15440:	ca07      	ldmia	r2, {r0, r1, r2}
   15442:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.trace_on = true,
		.bsd_memory_address = BSD_RESERVED_MEMORY_ADDRESS,
		.bsd_memory_size = BSD_RESERVED_MEMORY_SIZE
	};

	init_ret = bsd_init(&init_params);
   15446:	4618      	mov	r0, r3
   15448:	f008 fed8 	bl	1e1fc <bsd_init>
   1544c:	4b10      	ldr	r3, [pc, #64]	; (15490 <_bsdlib_init+0x78>)
   1544e:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   15450:	f04f 32ff 	mov.w	r2, #4294967295
   15454:	f04f 33ff 	mov.w	r3, #4294967295
   15458:	480b      	ldr	r0, [pc, #44]	; (15488 <_bsdlib_init+0x70>)
   1545a:	f00b fb23 	bl	20aa4 <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   1545e:	6820      	ldr	r0, [r4, #0]
   15460:	b138      	cbz	r0, 15472 <_bsdlib_init+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15462:	6804      	ldr	r4, [r0, #0]
	z_impl_k_sem_give(sem);
   15464:	3004      	adds	r0, #4
   15466:	f00b ff65 	bl	21334 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   1546a:	b114      	cbz	r4, 15472 <_bsdlib_init+0x5a>
   1546c:	4620      	mov	r0, r4
   1546e:	6824      	ldr	r4, [r4, #0]
   15470:	e7f8      	b.n	15464 <_bsdlib_init+0x4c>
	return z_impl_k_mutex_unlock(mutex);
   15472:	4805      	ldr	r0, [pc, #20]	; (15488 <_bsdlib_init+0x70>)
   15474:	f00b fb8e 	bl	20b94 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   15478:	2000      	movs	r0, #0
   1547a:	b005      	add	sp, #20
   1547c:	bd30      	pop	{r4, r5, pc}
   1547e:	bf00      	nop
   15480:	200234f8 	.word	0x200234f8
   15484:	200215ec 	.word	0x200215ec
   15488:	200215f4 	.word	0x200215f4
   1548c:	0002b870 	.word	0x0002b870
   15490:	200215e8 	.word	0x200215e8

00015494 <bsdlib_shutdown_wait>:

void bsdlib_shutdown_wait(void)
{
   15494:	b530      	push	{r4, r5, lr}
   15496:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   15498:	2201      	movs	r2, #1
   1549a:	2100      	movs	r1, #0
   1549c:	a802      	add	r0, sp, #8
   1549e:	f015 fdc9 	bl	2b034 <z_impl_k_sem_init>
   154a2:	ad01      	add	r5, sp, #4
	return z_impl_k_mutex_lock(mutex, timeout);
   154a4:	f04f 33ff 	mov.w	r3, #4294967295
   154a8:	f04f 32ff 	mov.w	r2, #4294967295
   154ac:	481c      	ldr	r0, [pc, #112]	; (15520 <bsdlib_shutdown_wait+0x8c>)
   154ae:	f00b faf9 	bl	20aa4 <z_impl_k_mutex_lock>
	parent->next = child;
   154b2:	2300      	movs	r3, #0
Z_GENLIST_APPEND(slist, snode)
   154b4:	4c1b      	ldr	r4, [pc, #108]	; (15524 <bsdlib_shutdown_wait+0x90>)
	parent->next = child;
   154b6:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   154b8:	6863      	ldr	r3, [r4, #4]
   154ba:	bb2b      	cbnz	r3, 15508 <bsdlib_shutdown_wait+0x74>
	list->head = node;
   154bc:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
   154c0:	4817      	ldr	r0, [pc, #92]	; (15520 <bsdlib_shutdown_wait+0x8c>)
   154c2:	f00b fb67 	bl	20b94 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   154c6:	f04f 32ff 	mov.w	r2, #4294967295
   154ca:	f04f 33ff 	mov.w	r3, #4294967295
   154ce:	a802      	add	r0, sp, #8
   154d0:	f00b ff56 	bl	21380 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   154d4:	f04f 32ff 	mov.w	r2, #4294967295
   154d8:	f04f 33ff 	mov.w	r3, #4294967295
   154dc:	4810      	ldr	r0, [pc, #64]	; (15520 <bsdlib_shutdown_wait+0x8c>)
   154de:	f00b fae1 	bl	20aa4 <z_impl_k_mutex_lock>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   154e2:	2200      	movs	r2, #0
   154e4:	6823      	ldr	r3, [r4, #0]
   154e6:	b153      	cbz	r3, 154fe <bsdlib_shutdown_wait+0x6a>
   154e8:	42ab      	cmp	r3, r5
   154ea:	d116      	bne.n	1551a <bsdlib_shutdown_wait+0x86>
Z_GENLIST_REMOVE(slist, snode)
   154ec:	9901      	ldr	r1, [sp, #4]
   154ee:	b972      	cbnz	r2, 1550e <bsdlib_shutdown_wait+0x7a>
   154f0:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   154f2:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   154f4:	429a      	cmp	r2, r3
   154f6:	d100      	bne.n	154fa <bsdlib_shutdown_wait+0x66>
	list->tail = node;
   154f8:	6061      	str	r1, [r4, #4]
	parent->next = child;
   154fa:	2300      	movs	r3, #0
   154fc:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   154fe:	4808      	ldr	r0, [pc, #32]	; (15520 <bsdlib_shutdown_wait+0x8c>)
   15500:	f00b fb48 	bl	20b94 <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   15504:	b009      	add	sp, #36	; 0x24
   15506:	bd30      	pop	{r4, r5, pc}
   15508:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1550a:	6065      	str	r5, [r4, #4]
}
   1550c:	e7d8      	b.n	154c0 <bsdlib_shutdown_wait+0x2c>
	parent->next = child;
   1550e:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   15510:	6861      	ldr	r1, [r4, #4]
   15512:	4299      	cmp	r1, r3
	list->tail = node;
   15514:	bf08      	it	eq
   15516:	6062      	streq	r2, [r4, #4]
}
   15518:	e7ef      	b.n	154fa <bsdlib_shutdown_wait+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1551a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1551c:	681b      	ldr	r3, [r3, #0]
   1551e:	e7e2      	b.n	154e6 <bsdlib_shutdown_wait+0x52>
   15520:	200215f4 	.word	0x200215f4
   15524:	200215ec 	.word	0x200215ec

00015528 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   15528:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   1552a:	4c0d      	ldr	r4, [pc, #52]	; (15560 <thread_monitor_entry_get+0x38>)
{
   1552c:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   1552e:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   15530:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   15532:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   15534:	4b0b      	ldr	r3, [pc, #44]	; (15564 <thread_monitor_entry_get+0x3c>)
   15536:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   15538:	6801      	ldr	r1, [r0, #0]
   1553a:	4291      	cmp	r1, r2
   1553c:	d00e      	beq.n	1555c <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   1553e:	b151      	cbz	r1, 15556 <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   15540:	6841      	ldr	r1, [r0, #4]
   15542:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   15544:	42b1      	cmp	r1, r6
   15546:	bfc4      	itt	gt
   15548:	4604      	movgt	r4, r0
   1554a:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1554c:	3d01      	subs	r5, #1
   1554e:	f100 0008 	add.w	r0, r0, #8
   15552:	d1f1      	bne.n	15538 <thread_monitor_entry_get+0x10>
   15554:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   15556:	3b01      	subs	r3, #1
	new_entry->id = id;
   15558:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   1555a:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   1555c:	bd70      	pop	{r4, r5, r6, pc}
   1555e:	bf00      	nop
   15560:	20021614 	.word	0x20021614
   15564:	20021608 	.word	0x20021608

00015568 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   15568:	4668      	mov	r0, sp
   1556a:	f020 0107 	bic.w	r1, r0, #7
   1556e:	468d      	mov	sp, r1
   15570:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   15572:	4b0d      	ldr	r3, [pc, #52]	; (155a8 <rpc_proxy_irq_handler+0x40>)
   15574:	e8d3 2fef 	ldaex	r2, [r3]
   15578:	3201      	adds	r2, #1
   1557a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1557e:	2900      	cmp	r1, #0
   15580:	d1f8      	bne.n	15574 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   15582:	f003 fa7f 	bl	18a84 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   15586:	4b09      	ldr	r3, [pc, #36]	; (155ac <rpc_proxy_irq_handler+0x44>)
   15588:	681c      	ldr	r4, [r3, #0]
   1558a:	b93c      	cbnz	r4, 1559c <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1558c:	f7fe f8d2 	bl	13734 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   15590:	f7fe fc44 	bl	13e1c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   15594:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   15598:	4685      	mov	sp, r0
   1559a:	4770      	bx	lr
	z_impl_k_sem_give(sem);
   1559c:	1d20      	adds	r0, r4, #4
   1559e:	f00b fec9 	bl	21334 <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   155a2:	6824      	ldr	r4, [r4, #0]
	return node->next;
   155a4:	e7f1      	b.n	1558a <rpc_proxy_irq_handler+0x22>
   155a6:	bf00      	nop
   155a8:	20021608 	.word	0x20021608
   155ac:	2002160c 	.word	0x2002160c

000155b0 <bsd_os_timedwait>:
{
   155b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155b4:	460c      	mov	r4, r1
   155b6:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   155b8:	f015 fe02 	bl	2b1c0 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   155bc:	6823      	ldr	r3, [r4, #0]
   155be:	4680      	mov	r8, r0
   155c0:	2b00      	cmp	r3, #0
   155c2:	468a      	mov	sl, r1
   155c4:	d103      	bne.n	155ce <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   155c6:	f00b fe43 	bl	21250 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   155ca:	203c      	movs	r0, #60	; 0x3c
   155cc:	e091      	b.n	156f2 <bsd_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   155ce:	bfbc      	itt	lt
   155d0:	f04f 33ff 	movlt.w	r3, #4294967295
   155d4:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   155d6:	2201      	movs	r2, #1
   155d8:	2100      	movs	r1, #0
   155da:	a802      	add	r0, sp, #8
   155dc:	f015 fd2a 	bl	2b034 <z_impl_k_sem_init>
   155e0:	ad01      	add	r5, sp, #4
   155e2:	f04f 0320 	mov.w	r3, #32
   155e6:	f3ef 8b11 	mrs	fp, BASEPRI
   155ea:	f383 8811 	msr	BASEPRI, r3
   155ee:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   155f2:	f00b fe99 	bl	21328 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   155f6:	f7ff ff97 	bl	15528 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   155fa:	4947      	ldr	r1, [pc, #284]	; (15718 <bsd_os_timedwait+0x168>)
   155fc:	6843      	ldr	r3, [r0, #4]
   155fe:	680a      	ldr	r2, [r1, #0]
   15600:	4689      	mov	r9, r1
   15602:	4293      	cmp	r3, r2
   15604:	f04f 0300 	mov.w	r3, #0
   15608:	d108      	bne.n	1561c <bsd_os_timedwait+0x6c>
	parent->next = child;
   1560a:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   1560c:	4b43      	ldr	r3, [pc, #268]	; (1571c <bsd_os_timedwait+0x16c>)
   1560e:	685a      	ldr	r2, [r3, #4]
   15610:	2a00      	cmp	r2, #0
   15612:	d171      	bne.n	156f8 <bsd_os_timedwait+0x148>
	list->head = node;
   15614:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   15618:	2301      	movs	r3, #1
}
   1561a:	e000      	b.n	1561e <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   1561c:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   1561e:	f38b 8811 	msr	BASEPRI, fp
   15622:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   15626:	2b00      	cmp	r3, #0
   15628:	d062      	beq.n	156f0 <bsd_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1562a:	6823      	ldr	r3, [r4, #0]
   1562c:	1c5a      	adds	r2, r3, #1
   1562e:	d066      	beq.n	156fe <bsd_os_timedwait+0x14e>
   15630:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   15634:	f240 30e7 	movw	r0, #999	; 0x3e7
   15638:	2100      	movs	r1, #0
   1563a:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   1563e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15642:	2300      	movs	r3, #0
   15644:	fbce 010c 	smlal	r0, r1, lr, ip
   15648:	f7f7 f906 	bl	c858 <__aeabi_uldivmod>
   1564c:	4602      	mov	r2, r0
   1564e:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   15650:	a802      	add	r0, sp, #8
   15652:	f00b fe95 	bl	21380 <z_impl_k_sem_take>
	__asm__ volatile(
   15656:	f04f 0320 	mov.w	r3, #32
   1565a:	f3ef 8b11 	mrs	fp, BASEPRI
   1565e:	f383 8811 	msr	BASEPRI, r3
   15662:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15666:	2000      	movs	r0, #0
   15668:	4b2c      	ldr	r3, [pc, #176]	; (1571c <bsd_os_timedwait+0x16c>)
   1566a:	681a      	ldr	r2, [r3, #0]
   1566c:	b15a      	cbz	r2, 15686 <bsd_os_timedwait+0xd6>
   1566e:	42aa      	cmp	r2, r5
   15670:	d14f      	bne.n	15712 <bsd_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   15672:	9d01      	ldr	r5, [sp, #4]
   15674:	2800      	cmp	r0, #0
   15676:	d146      	bne.n	15706 <bsd_os_timedwait+0x156>
   15678:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   1567a:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1567c:	4291      	cmp	r1, r2
   1567e:	d100      	bne.n	15682 <bsd_os_timedwait+0xd2>
	list->tail = node;
   15680:	605d      	str	r5, [r3, #4]
	parent->next = child;
   15682:	2300      	movs	r3, #0
   15684:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   15686:	f00b fe4f 	bl	21328 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1568a:	f7ff ff4d 	bl	15528 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   1568e:	f8d9 3000 	ldr.w	r3, [r9]
   15692:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   15694:	f38b 8811 	msr	BASEPRI, fp
   15698:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   1569c:	6825      	ldr	r5, [r4, #0]
   1569e:	1c6b      	adds	r3, r5, #1
   156a0:	d026      	beq.n	156f0 <bsd_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   156a2:	f015 fd8d 	bl	2b1c0 <z_impl_k_uptime_ticks>
   156a6:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   156aa:	468e      	mov	lr, r1
   156ac:	fba8 890c 	umull	r8, r9, r8, ip
   156b0:	fba0 010c 	umull	r0, r1, r0, ip
   156b4:	fb0c 990a 	mla	r9, ip, sl, r9
   156b8:	fb0c 110e 	mla	r1, ip, lr, r1
   156bc:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   156c0:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   156c4:	1952      	adds	r2, r2, r5
   156c6:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   156ca:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   156ce:	0bc5      	lsrs	r5, r0, #15
   156d0:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   156d4:	1b56      	subs	r6, r2, r5
   156d6:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   156da:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   156de:	2e00      	cmp	r6, #0
   156e0:	f177 0300 	sbcs.w	r3, r7, #0
   156e4:	bfb8      	it	lt
   156e6:	2600      	movlt	r6, #0
   156e8:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   156ea:	2e00      	cmp	r6, #0
   156ec:	f43f af6d 	beq.w	155ca <bsd_os_timedwait+0x1a>
	return 0;
   156f0:	2000      	movs	r0, #0
}
   156f2:	b009      	add	sp, #36	; 0x24
   156f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156f8:	6015      	str	r5, [r2, #0]
	list->tail = node;
   156fa:	605d      	str	r5, [r3, #4]
   156fc:	e78c      	b.n	15618 <bsd_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   156fe:	f04f 32ff 	mov.w	r2, #4294967295
   15702:	4613      	mov	r3, r2
   15704:	e7a4      	b.n	15650 <bsd_os_timedwait+0xa0>
	parent->next = child;
   15706:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   15708:	6859      	ldr	r1, [r3, #4]
   1570a:	4291      	cmp	r1, r2
	list->tail = node;
   1570c:	bf08      	it	eq
   1570e:	6058      	streq	r0, [r3, #4]
}
   15710:	e7b7      	b.n	15682 <bsd_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15712:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15714:	6812      	ldr	r2, [r2, #0]
   15716:	e7a9      	b.n	1566c <bsd_os_timedwait+0xbc>
   15718:	20021608 	.word	0x20021608
   1571c:	2002160c 	.word	0x2002160c

00015720 <bsd_os_errno_set>:
	switch (err_code) {
   15720:	283c      	cmp	r0, #60	; 0x3c
{
   15722:	4601      	mov	r1, r0
   15724:	b508      	push	{r3, lr}
	switch (err_code) {
   15726:	f300 808f 	bgt.w	15848 <bsd_os_errno_set+0x128>
   1572a:	2800      	cmp	r0, #0
   1572c:	dc0d      	bgt.n	1574a <bsd_os_errno_set+0x2a>
   1572e:	4bb2      	ldr	r3, [pc, #712]	; (159f8 <bsd_os_errno_set+0x2d8>)
   15730:	4ab2      	ldr	r2, [pc, #712]	; (159fc <bsd_os_errno_set+0x2dc>)
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   15732:	48b3      	ldr	r0, [pc, #716]	; (15a00 <bsd_os_errno_set+0x2e0>)
   15734:	1ad2      	subs	r2, r2, r3
   15736:	08d2      	lsrs	r2, r2, #3
   15738:	0192      	lsls	r2, r2, #6
   1573a:	f042 0201 	orr.w	r2, r2, #1
   1573e:	f013 f9aa 	bl	28a96 <log_1>
		errno = 0xBAADBAAD;
   15742:	f013 fe31 	bl	293a8 <__errno>
   15746:	4baf      	ldr	r3, [pc, #700]	; (15a04 <bsd_os_errno_set+0x2e4>)
   15748:	e0bf      	b.n	158ca <bsd_os_errno_set+0x1aa>
   1574a:	1e43      	subs	r3, r0, #1
   1574c:	2b3b      	cmp	r3, #59	; 0x3b
   1574e:	d8ee      	bhi.n	1572e <bsd_os_errno_set+0xe>
   15750:	a201      	add	r2, pc, #4	; (adr r2, 15758 <bsd_os_errno_set+0x38>)
   15752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15756:	bf00      	nop
   15758:	000158c5 	.word	0x000158c5
   1575c:	000158cf 	.word	0x000158cf
   15760:	0001572f 	.word	0x0001572f
   15764:	0001572f 	.word	0x0001572f
   15768:	000158d7 	.word	0x000158d7
   1576c:	0001572f 	.word	0x0001572f
   15770:	0001572f 	.word	0x0001572f
   15774:	000158df 	.word	0x000158df
   15778:	000158e7 	.word	0x000158e7
   1577c:	0001572f 	.word	0x0001572f
   15780:	0001572f 	.word	0x0001572f
   15784:	000158ef 	.word	0x000158ef
   15788:	000158f7 	.word	0x000158f7
   1578c:	000158ff 	.word	0x000158ff
   15790:	0001572f 	.word	0x0001572f
   15794:	0001572f 	.word	0x0001572f
   15798:	0001572f 	.word	0x0001572f
   1579c:	0001572f 	.word	0x0001572f
   157a0:	0001572f 	.word	0x0001572f
   157a4:	0001572f 	.word	0x0001572f
   157a8:	0001572f 	.word	0x0001572f
   157ac:	00015907 	.word	0x00015907
   157b0:	0001572f 	.word	0x0001572f
   157b4:	0001590f 	.word	0x0001590f
   157b8:	0001572f 	.word	0x0001572f
   157bc:	0001572f 	.word	0x0001572f
   157c0:	0001572f 	.word	0x0001572f
   157c4:	0001572f 	.word	0x0001572f
   157c8:	0001572f 	.word	0x0001572f
   157cc:	0001572f 	.word	0x0001572f
   157d0:	0001572f 	.word	0x0001572f
   157d4:	0001572f 	.word	0x0001572f
   157d8:	0001572f 	.word	0x0001572f
   157dc:	0001572f 	.word	0x0001572f
   157e0:	00015917 	.word	0x00015917
   157e4:	0001572f 	.word	0x0001572f
   157e8:	0001591f 	.word	0x0001591f
   157ec:	0001572f 	.word	0x0001572f
   157f0:	0001572f 	.word	0x0001572f
   157f4:	000159e7 	.word	0x000159e7
   157f8:	00015927 	.word	0x00015927
   157fc:	0001592f 	.word	0x0001592f
   15800:	00015937 	.word	0x00015937
   15804:	0001593f 	.word	0x0001593f
   15808:	00015947 	.word	0x00015947
   1580c:	0001572f 	.word	0x0001572f
   15810:	0001594f 	.word	0x0001594f
   15814:	00015957 	.word	0x00015957
   15818:	0001572f 	.word	0x0001572f
   1581c:	0001595f 	.word	0x0001595f
   15820:	00015967 	.word	0x00015967
   15824:	0001596f 	.word	0x0001596f
   15828:	000159ef 	.word	0x000159ef
   1582c:	00015977 	.word	0x00015977
   15830:	0001572f 	.word	0x0001572f
   15834:	0001597f 	.word	0x0001597f
   15838:	00015987 	.word	0x00015987
   1583c:	0001572f 	.word	0x0001572f
   15840:	0001572f 	.word	0x0001572f
   15844:	0001598f 	.word	0x0001598f
	switch (err_code) {
   15848:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   1584c:	2b18      	cmp	r3, #24
   1584e:	f63f af6e 	bhi.w	1572e <bsd_os_errno_set+0xe>
   15852:	2b18      	cmp	r3, #24
   15854:	f63f af6b 	bhi.w	1572e <bsd_os_errno_set+0xe>
   15858:	a201      	add	r2, pc, #4	; (adr r2, 15860 <bsd_os_errno_set+0x140>)
   1585a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1585e:	bf00      	nop
   15860:	00015997 	.word	0x00015997
   15864:	0001572f 	.word	0x0001572f
   15868:	0001572f 	.word	0x0001572f
   1586c:	0001572f 	.word	0x0001572f
   15870:	0001572f 	.word	0x0001572f
   15874:	0001572f 	.word	0x0001572f
   15878:	0001572f 	.word	0x0001572f
   1587c:	0001599f 	.word	0x0001599f
   15880:	0001572f 	.word	0x0001572f
   15884:	000159af 	.word	0x000159af
   15888:	000159a7 	.word	0x000159a7
   1588c:	0001572f 	.word	0x0001572f
   15890:	0001572f 	.word	0x0001572f
   15894:	0001572f 	.word	0x0001572f
   15898:	0001572f 	.word	0x0001572f
   1589c:	0001572f 	.word	0x0001572f
   158a0:	0001572f 	.word	0x0001572f
   158a4:	0001572f 	.word	0x0001572f
   158a8:	0001572f 	.word	0x0001572f
   158ac:	0001572f 	.word	0x0001572f
   158b0:	000159b7 	.word	0x000159b7
   158b4:	000159bf 	.word	0x000159bf
   158b8:	000159c9 	.word	0x000159c9
   158bc:	000159d3 	.word	0x000159d3
   158c0:	000159dd 	.word	0x000159dd
		errno = EPERM;
   158c4:	f013 fd70 	bl	293a8 <__errno>
   158c8:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   158ca:	6003      	str	r3, [r0, #0]
}
   158cc:	bd08      	pop	{r3, pc}
		errno = ENOENT;
   158ce:	f013 fd6b 	bl	293a8 <__errno>
   158d2:	2302      	movs	r3, #2
   158d4:	e7f9      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EIO;
   158d6:	f013 fd67 	bl	293a8 <__errno>
   158da:	2305      	movs	r3, #5
   158dc:	e7f5      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = ENOEXEC;
   158de:	f013 fd63 	bl	293a8 <__errno>
   158e2:	2308      	movs	r3, #8
   158e4:	e7f1      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EBADF;
   158e6:	f013 fd5f 	bl	293a8 <__errno>
   158ea:	2309      	movs	r3, #9
   158ec:	e7ed      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = ENOMEM;
   158ee:	f013 fd5b 	bl	293a8 <__errno>
   158f2:	230c      	movs	r3, #12
   158f4:	e7e9      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EACCES;
   158f6:	f013 fd57 	bl	293a8 <__errno>
   158fa:	230d      	movs	r3, #13
   158fc:	e7e5      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EFAULT;
   158fe:	f013 fd53 	bl	293a8 <__errno>
   15902:	230e      	movs	r3, #14
   15904:	e7e1      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EINVAL;
   15906:	f013 fd4f 	bl	293a8 <__errno>
   1590a:	2316      	movs	r3, #22
   1590c:	e7dd      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EMFILE;
   1590e:	f013 fd4b 	bl	293a8 <__errno>
   15912:	2318      	movs	r3, #24
   15914:	e7d9      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EAGAIN;
   15916:	f013 fd47 	bl	293a8 <__errno>
   1591a:	230b      	movs	r3, #11
   1591c:	e7d5      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EDOM;
   1591e:	f013 fd43 	bl	293a8 <__errno>
   15922:	2321      	movs	r3, #33	; 0x21
   15924:	e7d1      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EPROTOTYPE;
   15926:	f013 fd3f 	bl	293a8 <__errno>
   1592a:	236b      	movs	r3, #107	; 0x6b
   1592c:	e7cd      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = ENOPROTOOPT;
   1592e:	f013 fd3b 	bl	293a8 <__errno>
   15932:	236d      	movs	r3, #109	; 0x6d
   15934:	e7c9      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EPROTONOSUPPORT;
   15936:	f013 fd37 	bl	293a8 <__errno>
   1593a:	237b      	movs	r3, #123	; 0x7b
   1593c:	e7c5      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = ESOCKTNOSUPPORT;
   1593e:	f013 fd33 	bl	293a8 <__errno>
   15942:	237c      	movs	r3, #124	; 0x7c
   15944:	e7c1      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EOPNOTSUPP;
   15946:	f013 fd2f 	bl	293a8 <__errno>
   1594a:	235f      	movs	r3, #95	; 0x5f
   1594c:	e7bd      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EAFNOSUPPORT;
   1594e:	f013 fd2b 	bl	293a8 <__errno>
   15952:	236a      	movs	r3, #106	; 0x6a
   15954:	e7b9      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EADDRINUSE;
   15956:	f013 fd27 	bl	293a8 <__errno>
   1595a:	2370      	movs	r3, #112	; 0x70
   1595c:	e7b5      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = ENETDOWN;
   1595e:	f013 fd23 	bl	293a8 <__errno>
   15962:	2373      	movs	r3, #115	; 0x73
   15964:	e7b1      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = ENETUNREACH;
   15966:	f013 fd1f 	bl	293a8 <__errno>
   1596a:	2372      	movs	r3, #114	; 0x72
   1596c:	e7ad      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = ENETRESET;
   1596e:	f013 fd1b 	bl	293a8 <__errno>
   15972:	237e      	movs	r3, #126	; 0x7e
   15974:	e7a9      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = ECONNRESET;
   15976:	f013 fd17 	bl	293a8 <__errno>
   1597a:	2368      	movs	r3, #104	; 0x68
   1597c:	e7a5      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EISCONN;
   1597e:	f013 fd13 	bl	293a8 <__errno>
   15982:	237f      	movs	r3, #127	; 0x7f
   15984:	e7a1      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = ENOTCONN;
   15986:	f013 fd0f 	bl	293a8 <__errno>
   1598a:	2380      	movs	r3, #128	; 0x80
   1598c:	e79d      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = ETIMEDOUT;
   1598e:	f013 fd0b 	bl	293a8 <__errno>
   15992:	2374      	movs	r3, #116	; 0x74
   15994:	e799      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = ENOBUFS;
   15996:	f013 fd07 	bl	293a8 <__errno>
   1599a:	2369      	movs	r3, #105	; 0x69
   1599c:	e795      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EHOSTDOWN;
   1599e:	f013 fd03 	bl	293a8 <__errno>
   159a2:	2375      	movs	r3, #117	; 0x75
   159a4:	e791      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EINPROGRESS;
   159a6:	f013 fcff 	bl	293a8 <__errno>
   159aa:	2377      	movs	r3, #119	; 0x77
   159ac:	e78d      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EALREADY;
   159ae:	f013 fcfb 	bl	293a8 <__errno>
   159b2:	2378      	movs	r3, #120	; 0x78
   159b4:	e789      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = ECANCELED;
   159b6:	f013 fcf7 	bl	293a8 <__errno>
   159ba:	238c      	movs	r3, #140	; 0x8c
   159bc:	e785      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = ENOKEY;
   159be:	f013 fcf3 	bl	293a8 <__errno>
   159c2:	f240 73d1 	movw	r3, #2001	; 0x7d1
   159c6:	e780      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EKEYEXPIRED;
   159c8:	f013 fcee 	bl	293a8 <__errno>
   159cc:	f240 73d2 	movw	r3, #2002	; 0x7d2
   159d0:	e77b      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EKEYREVOKED;
   159d2:	f013 fce9 	bl	293a8 <__errno>
   159d6:	f240 73d3 	movw	r3, #2003	; 0x7d3
   159da:	e776      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EKEYREJECTED;
   159dc:	f013 fce4 	bl	293a8 <__errno>
   159e0:	f240 73d4 	movw	r3, #2004	; 0x7d4
   159e4:	e771      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = EMSGSIZE;
   159e6:	f013 fcdf 	bl	293a8 <__errno>
   159ea:	237a      	movs	r3, #122	; 0x7a
   159ec:	e76d      	b.n	158ca <bsd_os_errno_set+0x1aa>
		errno = ECONNABORTED;
   159ee:	f013 fcdb 	bl	293a8 <__errno>
   159f2:	2371      	movs	r3, #113	; 0x71
   159f4:	e769      	b.n	158ca <bsd_os_errno_set+0x1aa>
   159f6:	bf00      	nop
   159f8:	0002b7b8 	.word	0x0002b7b8
   159fc:	0002b7d0 	.word	0x0002b7d0
   15a00:	0002d1cc 	.word	0x0002d1cc
   15a04:	baadbaad 	.word	0xbaadbaad

00015a08 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   15a0c:	4b01      	ldr	r3, [pc, #4]	; (15a14 <bsd_os_application_irq_set+0xc>)
   15a0e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   15a12:	4770      	bx	lr
   15a14:	e000e100 	.word	0xe000e100

00015a18 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   15a1c:	4b01      	ldr	r3, [pc, #4]	; (15a24 <bsd_os_application_irq_clear+0xc>)
   15a1e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   15a22:	4770      	bx	lr
   15a24:	e000e100 	.word	0xe000e100

00015a28 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15a28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   15a2c:	4b01      	ldr	r3, [pc, #4]	; (15a34 <bsd_os_trace_irq_set+0xc>)
   15a2e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   15a32:	4770      	bx	lr
   15a34:	e000e100 	.word	0xe000e100

00015a38 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15a38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   15a3c:	4b01      	ldr	r3, [pc, #4]	; (15a44 <bsd_os_trace_irq_clear+0xc>)
   15a3e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   15a42:	4770      	bx	lr
   15a44:	e000e100 	.word	0xe000e100

00015a48 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   15a48:	b508      	push	{r3, lr}
	list->head = NULL;
   15a4a:	2300      	movs	r3, #0
   15a4c:	4a07      	ldr	r2, [pc, #28]	; (15a6c <bsd_os_init+0x24>)
	list->tail = NULL;
   15a4e:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15a52:	4a07      	ldr	r2, [pc, #28]	; (15a70 <bsd_os_init+0x28>)
   15a54:	e8d2 1fef 	ldaex	r1, [r2]
   15a58:	e8c2 3fe0 	stlex	r0, r3, [r2]
   15a5c:	2800      	cmp	r0, #0
   15a5e:	d1f9      	bne.n	15a54 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   15a60:	f014 fbef 	bl	2a242 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   15a64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   15a68:	f014 bbe0 	b.w	2a22c <trace_task_create>
   15a6c:	2002160c 	.word	0x2002160c
   15a70:	20021608 	.word	0x20021608

00015a74 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   15a74:	f240 2302 	movw	r3, #514	; 0x202
   15a78:	4298      	cmp	r0, r3
   15a7a:	f000 8087 	beq.w	15b8c <z_to_nrf_optname+0x118>
   15a7e:	dc07      	bgt.n	15a90 <z_to_nrf_optname+0x1c>
   15a80:	2801      	cmp	r0, #1
   15a82:	d040      	beq.n	15b06 <z_to_nrf_optname+0x92>
   15a84:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   15a88:	d034      	beq.n	15af4 <z_to_nrf_optname+0x80>
   15a8a:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   15a8e:	4770      	bx	lr
	switch (z_in_level) {
   15a90:	f240 2303 	movw	r3, #515	; 0x203
   15a94:	4298      	cmp	r0, r3
   15a96:	d1f8      	bne.n	15a8a <z_to_nrf_optname+0x16>
		switch (z_in_optname) {
   15a98:	3901      	subs	r1, #1
   15a9a:	2913      	cmp	r1, #19
   15a9c:	d8f5      	bhi.n	15a8a <z_to_nrf_optname+0x16>
   15a9e:	a301      	add	r3, pc, #4	; (adr r3, 15aa4 <z_to_nrf_optname+0x30>)
   15aa0:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   15aa4:	00015b9b 	.word	0x00015b9b
   15aa8:	00015b75 	.word	0x00015b75
   15aac:	00015b79 	.word	0x00015b79
   15ab0:	00015b17 	.word	0x00015b17
   15ab4:	00015b7d 	.word	0x00015b7d
   15ab8:	00015b81 	.word	0x00015b81
   15abc:	00015b85 	.word	0x00015b85
   15ac0:	00015a8b 	.word	0x00015a8b
   15ac4:	00015a8b 	.word	0x00015a8b
   15ac8:	00015a8b 	.word	0x00015a8b
   15acc:	00015a8b 	.word	0x00015a8b
   15ad0:	00015a8b 	.word	0x00015a8b
   15ad4:	00015a8b 	.word	0x00015a8b
   15ad8:	00015a8b 	.word	0x00015a8b
   15adc:	00015a8b 	.word	0x00015a8b
   15ae0:	00015a8b 	.word	0x00015a8b
   15ae4:	00015a8b 	.word	0x00015a8b
   15ae8:	00015a8b 	.word	0x00015a8b
   15aec:	00015a8b 	.word	0x00015a8b
   15af0:	00015b89 	.word	0x00015b89
		switch (z_in_optname) {
   15af4:	3901      	subs	r1, #1
   15af6:	2906      	cmp	r1, #6
   15af8:	d8c7      	bhi.n	15a8a <z_to_nrf_optname+0x16>
   15afa:	e8df f001 	tbb	[pc, r1]
   15afe:	3f3b      	.short	0x3f3b
   15b00:	4e0c4341 	.word	0x4e0c4341
   15b04:	3d          	.byte	0x3d
   15b05:	00          	.byte	0x00
		switch (z_in_optname) {
   15b06:	2920      	cmp	r1, #32
   15b08:	dcbf      	bgt.n	15a8a <z_to_nrf_optname+0x16>
   15b0a:	2913      	cmp	r1, #19
   15b0c:	dc05      	bgt.n	15b1a <z_to_nrf_optname+0xa6>
   15b0e:	2902      	cmp	r1, #2
   15b10:	d028      	beq.n	15b64 <z_to_nrf_optname+0xf0>
   15b12:	2904      	cmp	r1, #4
   15b14:	d1b9      	bne.n	15a8a <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   15b16:	2304      	movs	r3, #4
   15b18:	e040      	b.n	15b9c <z_to_nrf_optname+0x128>
   15b1a:	3914      	subs	r1, #20
   15b1c:	290c      	cmp	r1, #12
   15b1e:	d8b4      	bhi.n	15a8a <z_to_nrf_optname+0x16>
   15b20:	a301      	add	r3, pc, #4	; (adr r3, 15b28 <z_to_nrf_optname+0xb4>)
   15b22:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   15b26:	bf00      	nop
   15b28:	00015b89 	.word	0x00015b89
   15b2c:	00015b5d 	.word	0x00015b5d
   15b30:	00015a8b 	.word	0x00015a8b
   15b34:	00015a8b 	.word	0x00015a8b
   15b38:	00015a8b 	.word	0x00015a8b
   15b3c:	00015b61 	.word	0x00015b61
   15b40:	00015a8b 	.word	0x00015a8b
   15b44:	00015a8b 	.word	0x00015a8b
   15b48:	00015a8b 	.word	0x00015a8b
   15b4c:	00015a8b 	.word	0x00015a8b
   15b50:	00015b69 	.word	0x00015b69
   15b54:	00015b6d 	.word	0x00015b6d
   15b58:	00015b71 	.word	0x00015b71
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   15b5c:	2315      	movs	r3, #21
   15b5e:	e01d      	b.n	15b9c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   15b60:	2319      	movs	r3, #25
   15b62:	e01b      	b.n	15b9c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   15b64:	2328      	movs	r3, #40	; 0x28
   15b66:	e019      	b.n	15b9c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   15b68:	231e      	movs	r3, #30
   15b6a:	e017      	b.n	15b9c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_IP_ECHO_REPLY;
   15b6c:	231f      	movs	r3, #31
   15b6e:	e015      	b.n	15b9c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_IPV6_ECHO_REPLY;
   15b70:	2320      	movs	r3, #32
   15b72:	e013      	b.n	15b9c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   15b74:	2302      	movs	r3, #2
   15b76:	e011      	b.n	15b9c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   15b78:	2303      	movs	r3, #3
   15b7a:	e00f      	b.n	15b9c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   15b7c:	2305      	movs	r3, #5
   15b7e:	e00d      	b.n	15b9c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   15b80:	2306      	movs	r3, #6
   15b82:	e00b      	b.n	15b9c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   15b84:	2307      	movs	r3, #7
   15b86:	e009      	b.n	15b9c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   15b88:	2314      	movs	r3, #20
   15b8a:	e007      	b.n	15b9c <z_to_nrf_optname+0x128>
		switch (z_in_optname) {
   15b8c:	2902      	cmp	r1, #2
   15b8e:	d0f1      	beq.n	15b74 <z_to_nrf_optname+0x100>
   15b90:	2903      	cmp	r1, #3
   15b92:	d0f1      	beq.n	15b78 <z_to_nrf_optname+0x104>
   15b94:	2901      	cmp	r1, #1
   15b96:	f47f af78 	bne.w	15a8a <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   15b9a:	2301      	movs	r3, #1
	int retval = 0;
   15b9c:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   15b9e:	6013      	str	r3, [r2, #0]
			break;
   15ba0:	4770      	bx	lr
   15ba2:	bf00      	nop

00015ba4 <nrf91_socket_offload_ioctl>:
static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
	int sd = OBJ_TO_SD(obj);

	switch (request) {
   15ba4:	f240 1303 	movw	r3, #259	; 0x103
{
   15ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   15bac:	4299      	cmp	r1, r3
{
   15bae:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   15bb0:	f000 8097 	beq.w	15ce2 <nrf91_socket_offload_ioctl+0x13e>
   15bb4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   15bb8:	d005      	beq.n	15bc6 <nrf91_socket_offload_ioctl+0x22>
   15bba:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   15bbe:	d171      	bne.n	15ca4 <nrf91_socket_offload_ioctl+0x100>
	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;
   15bc0:	f06f 0411 	mvn.w	r4, #17
   15bc4:	e01d      	b.n	15c02 <nrf91_socket_offload_ioctl+0x5e>
	for (int i = 0; i < nfds; i++) {
   15bc6:	f04f 0800 	mov.w	r8, #0
		struct zsock_pollfd *fds;
		int nfds;
		int timeout;

		fds = va_arg(args, struct zsock_pollfd *);
		nfds = va_arg(args, int);
   15bca:	e9d2 a900 	ldrd	sl, r9, [r2]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   15bce:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   15bd0:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   15bd4:	4668      	mov	r0, sp
   15bd6:	2240      	movs	r2, #64	; 0x40
   15bd8:	f00c fb38 	bl	2224c <memset>
	for (int i = 0; i < nfds; i++) {
   15bdc:	466e      	mov	r6, sp
   15bde:	4655      	mov	r5, sl
   15be0:	4657      	mov	r7, sl
	int retval = 0;
   15be2:	4644      	mov	r4, r8
		tmp[i].events = 0;
   15be4:	4643      	mov	r3, r8
			obj = z_get_fd_obj(fds[i].fd,
   15be6:	4940      	ldr	r1, [pc, #256]	; (15ce8 <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   15be8:	45c1      	cmp	r9, r8
   15bea:	dc0e      	bgt.n	15c0a <nrf91_socket_offload_ioctl+0x66>
	if (retval > 0) {
   15bec:	2c00      	cmp	r4, #0
   15bee:	dc08      	bgt.n	15c02 <nrf91_socket_offload_ioctl+0x5e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   15bf0:	465a      	mov	r2, fp
   15bf2:	4649      	mov	r1, r9
   15bf4:	4668      	mov	r0, sp
   15bf6:	f008 fdf5 	bl	1e7e4 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   15bfa:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   15bfc:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   15bfe:	4599      	cmp	r9, r3
   15c00:	dc28      	bgt.n	15c54 <nrf91_socket_offload_ioctl+0xb0>
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   15c02:	4620      	mov	r0, r4
   15c04:	b011      	add	sp, #68	; 0x44
   15c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (fds[i].fd < 0) {
   15c0a:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   15c0c:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   15c0e:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   15c10:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   15c12:	da05      	bge.n	15c20 <nrf91_socket_offload_ioctl+0x7c>
			tmp[i].fd = fds[i].fd;
   15c14:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   15c16:	f108 0801 	add.w	r8, r8, #1
   15c1a:	3608      	adds	r6, #8
   15c1c:	3708      	adds	r7, #8
   15c1e:	e7e3      	b.n	15be8 <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   15c20:	2286      	movs	r2, #134	; 0x86
   15c22:	f7fb ffd7 	bl	11bd4 <z_get_fd_obj>
			if (obj != NULL) {
   15c26:	2300      	movs	r3, #0
   15c28:	492f      	ldr	r1, [pc, #188]	; (15ce8 <nrf91_socket_offload_ioctl+0x144>)
   15c2a:	b178      	cbz	r0, 15c4c <nrf91_socket_offload_ioctl+0xa8>
				tmp[i].fd = OBJ_TO_SD(obj);
   15c2c:	3801      	subs	r0, #1
   15c2e:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   15c30:	88b8      	ldrh	r0, [r7, #4]
   15c32:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   15c34:	bf42      	ittt	mi
   15c36:	88b2      	ldrhmi	r2, [r6, #4]
   15c38:	f042 0201 	orrmi.w	r2, r2, #1
   15c3c:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   15c3e:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   15c40:	bf42      	ittt	mi
   15c42:	88b2      	ldrhmi	r2, [r6, #4]
   15c44:	f042 0202 	orrmi.w	r2, r2, #2
   15c48:	80b2      	strhmi	r2, [r6, #4]
   15c4a:	e7e4      	b.n	15c16 <nrf91_socket_offload_ioctl+0x72>
				fds[i].revents = POLLNVAL;
   15c4c:	2220      	movs	r2, #32
				retval++;
   15c4e:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   15c50:	80fa      	strh	r2, [r7, #6]
				retval++;
   15c52:	e7ed      	b.n	15c30 <nrf91_socket_offload_ioctl+0x8c>
		if (fds[i].fd < 0) {
   15c54:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   15c58:	2a00      	cmp	r2, #0
   15c5a:	db20      	blt.n	15c9e <nrf91_socket_offload_ioctl+0xfa>
		if (tmp[i].revents & NRF_POLLIN) {
   15c5c:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   15c60:	88d2      	ldrh	r2, [r2, #6]
   15c62:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   15c64:	bf42      	ittt	mi
   15c66:	88e9      	ldrhmi	r1, [r5, #6]
   15c68:	f041 0101 	orrmi.w	r1, r1, #1
   15c6c:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   15c6e:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   15c70:	bf42      	ittt	mi
   15c72:	88e9      	ldrhmi	r1, [r5, #6]
   15c74:	f041 0104 	orrmi.w	r1, r1, #4
   15c78:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   15c7a:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   15c7c:	bf42      	ittt	mi
   15c7e:	88e9      	ldrhmi	r1, [r5, #6]
   15c80:	f041 0108 	orrmi.w	r1, r1, #8
   15c84:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   15c86:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   15c88:	bf42      	ittt	mi
   15c8a:	88e9      	ldrhmi	r1, [r5, #6]
   15c8c:	f041 0120 	orrmi.w	r1, r1, #32
   15c90:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   15c92:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   15c94:	bf42      	ittt	mi
   15c96:	88ea      	ldrhmi	r2, [r5, #6]
   15c98:	f042 0210 	orrmi.w	r2, r2, #16
   15c9c:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   15c9e:	3301      	adds	r3, #1
   15ca0:	3508      	adds	r5, #8
   15ca2:	e7ac      	b.n	15bfe <nrf91_socket_offload_ioctl+0x5a>
	switch (cmd) {
   15ca4:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   15ca6:	f100 30ff 	add.w	r0, r0, #4294967295
	switch (cmd) {
   15caa:	d00b      	beq.n	15cc4 <nrf91_socket_offload_ioctl+0x120>
   15cac:	2904      	cmp	r1, #4
   15cae:	d111      	bne.n	15cd4 <nrf91_socket_offload_ioctl+0x130>
		flags = va_arg(args, int);
   15cb0:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   15cb2:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   15cb6:	d10d      	bne.n	15cd4 <nrf91_socket_offload_ioctl+0x130>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   15cb8:	2101      	movs	r1, #1
   15cba:	1392      	asrs	r2, r2, #14
   15cbc:	f008 fd94 	bl	1e7e8 <nrf_fcntl>
   15cc0:	4604      	mov	r4, r0
		break;
   15cc2:	e79e      	b.n	15c02 <nrf91_socket_offload_ioctl+0x5e>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   15cc4:	2200      	movs	r2, #0
   15cc6:	2102      	movs	r1, #2
   15cc8:	f008 fd8e 	bl	1e7e8 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   15ccc:	0380      	lsls	r0, r0, #14
   15cce:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   15cd2:	e796      	b.n	15c02 <nrf91_socket_offload_ioctl+0x5e>
	errno = EINVAL;
   15cd4:	f013 fb68 	bl	293a8 <__errno>
   15cd8:	2316      	movs	r3, #22
	return retval;
   15cda:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   15cde:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   15ce0:	e78f      	b.n	15c02 <nrf91_socket_offload_ioctl+0x5e>
	switch (request) {
   15ce2:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   15ce6:	e78c      	b.n	15c02 <nrf91_socket_offload_ioctl+0x5e>
   15ce8:	0002bb30 	.word	0x0002bb30

00015cec <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   15cec:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   15cee:	4b03      	ldr	r3, [pc, #12]	; (15cfc <nrf91_socket_iface_init+0x10>)
   15cf0:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   15cf2:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   15cf4:	4802      	ldr	r0, [pc, #8]	; (15d00 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   15cf6:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   15cf8:	f7fd b9aa 	b.w	13050 <socket_offload_dns_register>
   15cfc:	20021664 	.word	0x20021664
   15d00:	0002bb28 	.word	0x0002bb28

00015d04 <nrf91_socket_offload_accept>:
{
   15d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15d08:	b08a      	sub	sp, #40	; 0x28
   15d0a:	4607      	mov	r7, r0
   15d0c:	460c      	mov	r4, r1
   15d0e:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   15d10:	f7fb ff90 	bl	11c34 <z_reserve_fd>
   15d14:	4606      	mov	r6, r0
	if (fd < 0) {
   15d16:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   15d18:	f107 30ff 	add.w	r0, r7, #4294967295
	if (fd < 0) {
   15d1c:	da05      	bge.n	15d2a <nrf91_socket_offload_accept+0x26>
	return -1;
   15d1e:	f04f 36ff 	mov.w	r6, #4294967295
}
   15d22:	4630      	mov	r0, r6
   15d24:	b00a      	add	sp, #40	; 0x28
   15d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   15d2a:	b31c      	cbz	r4, 15d74 <nrf91_socket_offload_accept+0x70>
   15d2c:	b32d      	cbz	r5, 15d7a <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   15d2e:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   15d30:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   15d32:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   15d34:	bf0c      	ite	eq
   15d36:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   15d38:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   15d3a:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   15d3c:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   15d3e:	4639      	mov	r1, r7
   15d40:	f008 fcec 	bl	1e71c <nrf_accept>
	if (new_sd < 0) {
   15d44:	f1b0 0800 	subs.w	r8, r0, #0
   15d48:	dbe9      	blt.n	15d1e <nrf91_socket_offload_accept+0x1a>
	if ((addr != NULL) && (addrlen != NULL)) {
   15d4a:	b164      	cbz	r4, 15d66 <nrf91_socket_offload_accept+0x62>
   15d4c:	b15d      	cbz	r5, 15d66 <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   15d4e:	687b      	ldr	r3, [r7, #4]
   15d50:	2b02      	cmp	r3, #2
   15d52:	d115      	bne.n	15d80 <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   15d54:	2308      	movs	r3, #8
   15d56:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   15d58:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   15d5c:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   15d5e:	2301      	movs	r3, #1
   15d60:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   15d62:	9b04      	ldr	r3, [sp, #16]
   15d64:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   15d66:	4630      	mov	r0, r6
   15d68:	4a0c      	ldr	r2, [pc, #48]	; (15d9c <nrf91_socket_offload_accept+0x98>)
   15d6a:	f108 0101 	add.w	r1, r8, #1
   15d6e:	f7fb ff93 	bl	11c98 <z_finalize_fd>
	return fd;
   15d72:	e7d6      	b.n	15d22 <nrf91_socket_offload_accept+0x1e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   15d74:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   15d76:	4627      	mov	r7, r4
   15d78:	e7e1      	b.n	15d3e <nrf91_socket_offload_accept+0x3a>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   15d7a:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   15d7c:	462f      	mov	r7, r5
   15d7e:	e7de      	b.n	15d3e <nrf91_socket_offload_accept+0x3a>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   15d80:	2b0a      	cmp	r3, #10
   15d82:	d106      	bne.n	15d92 <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   15d84:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   15d86:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   15d88:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   15d8a:	a901      	add	r1, sp, #4
   15d8c:	f014 fb57 	bl	2a43e <nrf_to_z_ipv6>
   15d90:	e7e9      	b.n	15d66 <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   15d92:	4630      	mov	r0, r6
   15d94:	f7fb ff8a 	bl	11cac <z_free_fd>
   15d98:	e7c1      	b.n	15d1e <nrf91_socket_offload_accept+0x1a>
   15d9a:	bf00      	nop
   15d9c:	0002bb30 	.word	0x0002bb30

00015da0 <nrf91_socket_offload_sendmsg>:
{
   15da0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   15da4:	4607      	mov	r7, r0
   15da6:	4690      	mov	r8, r2
	if (msg == NULL) {
   15da8:	460c      	mov	r4, r1
   15daa:	b319      	cbz	r1, 15df4 <nrf91_socket_offload_sendmsg+0x54>
	for (i = 0; i < msg->msg_iovlen; i++) {
   15dac:	2300      	movs	r3, #0
	ssize_t len = 0;
   15dae:	461a      	mov	r2, r3
   15db0:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   15db2:	4283      	cmp	r3, r0
   15db4:	d128      	bne.n	15e08 <nrf91_socket_offload_sendmsg+0x68>
	if (len <= sizeof(buf)) {
   15db6:	2a80      	cmp	r2, #128	; 0x80
   15db8:	d857      	bhi.n	15e6a <nrf91_socket_offload_sendmsg+0xca>
		for (i = 0; i < msg->msg_iovlen; i++) {
   15dba:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   15dbc:	f04f 32ff 	mov.w	r2, #4294967295
   15dc0:	f04f 33ff 	mov.w	r3, #4294967295
   15dc4:	482a      	ldr	r0, [pc, #168]	; (15e70 <nrf91_socket_offload_sendmsg+0xd0>)
   15dc6:	f00a fe6d 	bl	20aa4 <z_impl_k_mutex_lock>
		len = 0;
   15dca:	462e      	mov	r6, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   15dcc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 15e74 <nrf91_socket_offload_sendmsg+0xd4>
		for (i = 0; i < msg->msg_iovlen; i++) {
   15dd0:	68e3      	ldr	r3, [r4, #12]
   15dd2:	42ab      	cmp	r3, r5
   15dd4:	d81f      	bhi.n	15e16 <nrf91_socket_offload_sendmsg+0x76>
		ret = nrf91_socket_offload_sendto(obj, buf, len,
   15dd6:	6863      	ldr	r3, [r4, #4]
   15dd8:	4632      	mov	r2, r6
   15dda:	9301      	str	r3, [sp, #4]
   15ddc:	6823      	ldr	r3, [r4, #0]
   15dde:	4638      	mov	r0, r7
   15de0:	9300      	str	r3, [sp, #0]
   15de2:	4924      	ldr	r1, [pc, #144]	; (15e74 <nrf91_socket_offload_sendmsg+0xd4>)
   15de4:	4643      	mov	r3, r8
   15de6:	f014 fc86 	bl	2a6f6 <nrf91_socket_offload_sendto>
   15dea:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   15dec:	4820      	ldr	r0, [pc, #128]	; (15e70 <nrf91_socket_offload_sendmsg+0xd0>)
   15dee:	f00a fed1 	bl	20b94 <z_impl_k_mutex_unlock>
		return ret;
   15df2:	e005      	b.n	15e00 <nrf91_socket_offload_sendmsg+0x60>
		errno = EINVAL;
   15df4:	f013 fad8 	bl	293a8 <__errno>
   15df8:	2316      	movs	r3, #22
		return -1;
   15dfa:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   15dfe:	6003      	str	r3, [r0, #0]
}
   15e00:	4628      	mov	r0, r5
   15e02:	b002      	add	sp, #8
   15e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   15e08:	68a1      	ldr	r1, [r4, #8]
   15e0a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   15e0e:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   15e10:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   15e12:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   15e14:	e7cd      	b.n	15db2 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   15e16:	68a1      	ldr	r1, [r4, #8]
   15e18:	eb09 0006 	add.w	r0, r9, r6
   15e1c:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   15e20:	685a      	ldr	r2, [r3, #4]
   15e22:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   15e26:	f7f6 fea5 	bl	cb74 <memcpy>
			len += msg->msg_iov[i].iov_len;
   15e2a:	68a3      	ldr	r3, [r4, #8]
   15e2c:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   15e30:	4453      	add	r3, sl
   15e32:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   15e34:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   15e36:	441e      	add	r6, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   15e38:	e7ca      	b.n	15dd0 <nrf91_socket_offload_sendmsg+0x30>
		if (msg->msg_iov[i].iov_len == 0) {
   15e3a:	68a1      	ldr	r1, [r4, #8]
   15e3c:	eb01 03c6 	add.w	r3, r1, r6, lsl #3
   15e40:	685a      	ldr	r2, [r3, #4]
   15e42:	b162      	cbz	r2, 15e5e <nrf91_socket_offload_sendmsg+0xbe>
		ret = nrf91_socket_offload_sendto(obj, msg->msg_iov[i].iov_base,
   15e44:	6863      	ldr	r3, [r4, #4]
   15e46:	4638      	mov	r0, r7
   15e48:	9301      	str	r3, [sp, #4]
   15e4a:	6823      	ldr	r3, [r4, #0]
   15e4c:	9300      	str	r3, [sp, #0]
   15e4e:	f851 1036 	ldr.w	r1, [r1, r6, lsl #3]
   15e52:	4643      	mov	r3, r8
   15e54:	f014 fc4f 	bl	2a6f6 <nrf91_socket_offload_sendto>
		if (ret < 0) {
   15e58:	1e05      	subs	r5, r0, #0
   15e5a:	dbd1      	blt.n	15e00 <nrf91_socket_offload_sendmsg+0x60>
		len += ret;
   15e5c:	44a9      	add	r9, r5
	for (i = 0; i < msg->msg_iovlen; i++) {
   15e5e:	3601      	adds	r6, #1
   15e60:	68e3      	ldr	r3, [r4, #12]
   15e62:	42b3      	cmp	r3, r6
   15e64:	d8e9      	bhi.n	15e3a <nrf91_socket_offload_sendmsg+0x9a>
   15e66:	464d      	mov	r5, r9
   15e68:	e7ca      	b.n	15e00 <nrf91_socket_offload_sendmsg+0x60>
   15e6a:	2600      	movs	r6, #0
	len = 0;
   15e6c:	46b1      	mov	r9, r6
   15e6e:	e7f7      	b.n	15e60 <nrf91_socket_offload_sendmsg+0xc0>
   15e70:	20020bb4 	.word	0x20020bb4
   15e74:	200234f9 	.word	0x200234f9

00015e78 <nrf91_socket_create>:
{
   15e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15e7a:	4606      	mov	r6, r0
   15e7c:	460d      	mov	r5, r1
   15e7e:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   15e80:	f7fb fed8 	bl	11c34 <z_reserve_fd>
	if (fd < 0) {
   15e84:	1e04      	subs	r4, r0, #0
   15e86:	db0d      	blt.n	15ea4 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   15e88:	b2b0      	uxth	r0, r6
   15e8a:	f014 f9f5 	bl	2a278 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   15e8e:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   15e92:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   15e94:	d109      	bne.n	15eaa <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   15e96:	f013 fa87 	bl	293a8 <__errno>
   15e9a:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   15e9c:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   15e9e:	4620      	mov	r0, r4
   15ea0:	f7fb ff04 	bl	11cac <z_free_fd>
		return -1;
   15ea4:	f04f 34ff 	mov.w	r4, #4294967295
   15ea8:	e01b      	b.n	15ee2 <nrf91_socket_create+0x6a>
	switch (socktype) {
   15eaa:	2d03      	cmp	r5, #3
   15eac:	d003      	beq.n	15eb6 <nrf91_socket_create+0x3e>
   15eae:	2d04      	cmp	r5, #4
   15eb0:	bf08      	it	eq
   15eb2:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   15eb6:	4638      	mov	r0, r7
   15eb8:	f014 f9fa 	bl	2a2b0 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   15ebc:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   15ec0:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   15ec2:	d103      	bne.n	15ecc <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   15ec4:	f013 fa70 	bl	293a8 <__errno>
   15ec8:	237b      	movs	r3, #123	; 0x7b
   15eca:	e7e7      	b.n	15e9c <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   15ecc:	4629      	mov	r1, r5
   15ece:	4630      	mov	r0, r6
   15ed0:	f008 fbaa 	bl	1e628 <nrf_socket>
	if (sd < 0) {
   15ed4:	1e01      	subs	r1, r0, #0
   15ed6:	dbe2      	blt.n	15e9e <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   15ed8:	4620      	mov	r0, r4
   15eda:	4a03      	ldr	r2, [pc, #12]	; (15ee8 <nrf91_socket_create+0x70>)
   15edc:	3101      	adds	r1, #1
   15ede:	f7fb fedb 	bl	11c98 <z_finalize_fd>
}
   15ee2:	4620      	mov	r0, r4
   15ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15ee6:	bf00      	nop
   15ee8:	0002bb30 	.word	0x0002bb30

00015eec <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   15eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15ef0:	4606      	mov	r6, r0
   15ef2:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   15ef4:	2500      	movs	r5, #0
   15ef6:	f04f 0a01 	mov.w	sl, #1

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   15efa:	f8df 8064 	ldr.w	r8, [pc, #100]	; 15f60 <dk_set_leds_state.part.0+0x74>
   15efe:	f8df 9064 	ldr.w	r9, [pc, #100]	; 15f64 <dk_set_leds_state.part.0+0x78>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   15f02:	fa26 f205 	lsr.w	r2, r6, r5
   15f06:	fa27 f305 	lsr.w	r3, r7, r5
   15f0a:	4313      	orrs	r3, r2
   15f0c:	07d9      	lsls	r1, r3, #31
   15f0e:	d51b      	bpl.n	15f48 <dk_set_leds_state.part.0+0x5c>
			int err = gpio_pin_set_raw(led_devs[i],
   15f10:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
   15f14:	7919      	ldrb	r1, [r3, #4]
   15f16:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (value != 0)	{
   15f1a:	fa0a f101 	lsl.w	r1, sl, r1
   15f1e:	07d3      	lsls	r3, r2, #31
	return api->port_set_bits_raw(port, pins);
   15f20:	6883      	ldr	r3, [r0, #8]
   15f22:	bf54      	ite	pl
   15f24:	68db      	ldrpl	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   15f26:	691b      	ldrmi	r3, [r3, #16]
   15f28:	4798      	blx	r3
   15f2a:	4604      	mov	r4, r0
						   led_pins[i].number, val);
			if (err) {
   15f2c:	b160      	cbz	r0, 15f48 <dk_set_leds_state.part.0+0x5c>
   15f2e:	4909      	ldr	r1, [pc, #36]	; (15f54 <dk_set_leds_state.part.0+0x68>)
   15f30:	4b09      	ldr	r3, [pc, #36]	; (15f58 <dk_set_leds_state.part.0+0x6c>)
				LOG_ERR("Cannot write LED gpio");
   15f32:	480a      	ldr	r0, [pc, #40]	; (15f5c <dk_set_leds_state.part.0+0x70>)
   15f34:	1ac9      	subs	r1, r1, r3
   15f36:	08c9      	lsrs	r1, r1, #3
   15f38:	0189      	lsls	r1, r1, #6
   15f3a:	f041 0101 	orr.w	r1, r1, #1
   15f3e:	f012 fd9b 	bl	28a78 <log_0>
			}
		}
	}

	return 0;
}
   15f42:	4620      	mov	r0, r4
   15f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   15f48:	3501      	adds	r5, #1
   15f4a:	2d04      	cmp	r5, #4
   15f4c:	d1d9      	bne.n	15f02 <dk_set_leds_state.part.0+0x16>
	return 0;
   15f4e:	2400      	movs	r4, #0
   15f50:	e7f7      	b.n	15f42 <dk_set_leds_state.part.0+0x56>
   15f52:	bf00      	nop
   15f54:	0002b7e8 	.word	0x0002b7e8
   15f58:	0002b7b8 	.word	0x0002b7b8
   15f5c:	0002d205 	.word	0x0002d205
   15f60:	200216ac 	.word	0x200216ac
   15f64:	0002bb88 	.word	0x0002bb88

00015f68 <button_pressed>:
{
   15f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   15f6a:	f04f 0320 	mov.w	r3, #32
   15f6e:	f3ef 8511 	mrs	r5, BASEPRI
   15f72:	f383 8811 	msr	BASEPRI, r3
   15f76:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   15f7a:	2400      	movs	r4, #0
   15f7c:	4e16      	ldr	r6, [pc, #88]	; (15fd8 <button_pressed+0x70>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   15f7e:	4f17      	ldr	r7, [pc, #92]	; (15fdc <button_pressed+0x74>)
   15f80:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   15f84:	f856 0b04 	ldr.w	r0, [r6], #4
   15f88:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   15f8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   15f8e:	3401      	adds	r4, #1
   15f90:	f014 fc91 	bl	2a8b6 <z_impl_gpio_pin_interrupt_configure>
   15f94:	2c04      	cmp	r4, #4
   15f96:	d00c      	beq.n	15fb2 <button_pressed+0x4a>
   15f98:	2800      	cmp	r0, #0
   15f9a:	d0f1      	beq.n	15f80 <button_pressed+0x18>
   15f9c:	4b10      	ldr	r3, [pc, #64]	; (15fe0 <button_pressed+0x78>)
   15f9e:	4911      	ldr	r1, [pc, #68]	; (15fe4 <button_pressed+0x7c>)
		LOG_ERR("Cannot disable callbacks");
   15fa0:	4811      	ldr	r0, [pc, #68]	; (15fe8 <button_pressed+0x80>)
   15fa2:	1ac9      	subs	r1, r1, r3
   15fa4:	08c9      	lsrs	r1, r1, #3
   15fa6:	0189      	lsls	r1, r1, #6
   15fa8:	f041 0101 	orr.w	r1, r1, #1
   15fac:	f012 fd64 	bl	28a78 <log_0>
   15fb0:	e001      	b.n	15fb6 <button_pressed+0x4e>
	if (err) {
   15fb2:	2800      	cmp	r0, #0
   15fb4:	d1f2      	bne.n	15f9c <button_pressed+0x34>
	switch (state) {
   15fb6:	4b0d      	ldr	r3, [pc, #52]	; (15fec <button_pressed+0x84>)
   15fb8:	781a      	ldrb	r2, [r3, #0]
   15fba:	b93a      	cbnz	r2, 15fcc <button_pressed+0x64>
		state = STATE_SCANNING;
   15fbc:	2201      	movs	r2, #1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   15fbe:	490c      	ldr	r1, [pc, #48]	; (15ff0 <button_pressed+0x88>)
   15fc0:	701a      	strb	r2, [r3, #0]
   15fc2:	480c      	ldr	r0, [pc, #48]	; (15ff4 <button_pressed+0x8c>)
   15fc4:	2221      	movs	r2, #33	; 0x21
   15fc6:	2300      	movs	r3, #0
   15fc8:	f00b fafe 	bl	215c8 <k_delayed_work_submit_to_queue>
	__asm__ volatile(
   15fcc:	f385 8811 	msr	BASEPRI, r5
   15fd0:	f3bf 8f6f 	isb	sy
}
   15fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15fd6:	bf00      	nop
   15fd8:	20021668 	.word	0x20021668
   15fdc:	0002bb68 	.word	0x0002bb68
   15fe0:	0002b7b8 	.word	0x0002b7b8
   15fe4:	0002b7e8 	.word	0x0002b7e8
   15fe8:	0002d21b 	.word	0x0002d21b
   15fec:	20023579 	.word	0x20023579
   15ff0:	20020ea8 	.word	0x20020ea8
   15ff4:	20021328 	.word	0x20021328

00015ff8 <buttons_scan_fn>:
{
   15ff8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t ret = 0;
   15ffc:	2400      	movs	r4, #0
   15ffe:	4e54      	ldr	r6, [pc, #336]	; (16150 <buttons_scan_fn+0x158>)
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   16000:	f8df a184 	ldr.w	sl, [pc, #388]	; 16188 <buttons_scan_fn+0x190>
{
   16004:	46b1      	mov	r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16006:	4625      	mov	r5, r4
   16008:	4657      	mov	r7, sl
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   1600a:	eb0a 03c5 	add.w	r3, sl, r5, lsl #3
   1600e:	f859 0b04 	ldr.w	r0, [r9], #4
   16012:	f893 8004 	ldrb.w	r8, [r3, #4]
	return api->port_get_raw(port, value);
   16016:	6883      	ldr	r3, [r0, #8]
   16018:	a901      	add	r1, sp, #4
   1601a:	685b      	ldr	r3, [r3, #4]
   1601c:	4798      	blx	r3
	if (ret == 0) {
   1601e:	2800      	cmp	r0, #0
   16020:	d14a      	bne.n	160b8 <buttons_scan_fn+0xc0>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   16022:	2301      	movs	r3, #1
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   16024:	9a01      	ldr	r2, [sp, #4]
   16026:	fa03 f808 	lsl.w	r8, r3, r8
   1602a:	ea18 0f02 	tst.w	r8, r2
   1602e:	d003      	beq.n	16038 <buttons_scan_fn+0x40>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16030:	3501      	adds	r5, #1
   16032:	2d04      	cmp	r5, #4
   16034:	d1e9      	bne.n	1600a <buttons_scan_fn+0x12>
   16036:	e04b      	b.n	160d0 <buttons_scan_fn+0xd8>
			ret |= 1U << i;
   16038:	40ab      	lsls	r3, r5
   1603a:	431c      	orrs	r4, r3
   1603c:	e7f8      	b.n	16030 <buttons_scan_fn+0x38>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1603e:	3d04      	subs	r5, #4
   16040:	2d00      	cmp	r5, #0
   16042:	d069      	beq.n	16118 <buttons_scan_fn+0x120>
			handler->cb(button_state, has_changed);
   16044:	46aa      	mov	sl, r5
   16046:	f85a 3b04 	ldr.w	r3, [sl], #4
   1604a:	4641      	mov	r1, r8
   1604c:	4620      	mov	r0, r4
   1604e:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   16050:	f1ba 0f00 	cmp.w	sl, #0
   16054:	d060      	beq.n	16118 <buttons_scan_fn+0x120>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16056:	686d      	ldr	r5, [r5, #4]
	return node->next;
   16058:	e05c      	b.n	16114 <buttons_scan_fn+0x11c>
		initial_run = false;
   1605a:	2200      	movs	r2, #0
   1605c:	701a      	strb	r2, [r3, #0]
   1605e:	e05e      	b.n	1611e <buttons_scan_fn+0x126>
	__asm__ volatile(
   16060:	f04f 0320 	mov.w	r3, #32
   16064:	f3ef 8511 	mrs	r5, BASEPRI
   16068:	f383 8811 	msr	BASEPRI, r3
   1606c:	f3bf 8f6f 	isb	sy
		switch (state) {
   16070:	4b38      	ldr	r3, [pc, #224]	; (16154 <buttons_scan_fn+0x15c>)
   16072:	781a      	ldrb	r2, [r3, #0]
   16074:	2a01      	cmp	r2, #1
   16076:	d11d      	bne.n	160b4 <buttons_scan_fn+0xbc>
			state = STATE_WAITING;
   16078:	701c      	strb	r4, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   1607a:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   1607e:	f856 0b04 	ldr.w	r0, [r6], #4
   16082:	7919      	ldrb	r1, [r3, #4]
   16084:	f44f 3210 	mov.w	r2, #147456	; 0x24000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   16088:	3401      	adds	r4, #1
   1608a:	f014 fc14 	bl	2a8b6 <z_impl_gpio_pin_interrupt_configure>
   1608e:	2c04      	cmp	r4, #4
   16090:	d001      	beq.n	16096 <buttons_scan_fn+0x9e>
   16092:	2800      	cmp	r0, #0
   16094:	d0f1      	beq.n	1607a <buttons_scan_fn+0x82>
	__asm__ volatile(
   16096:	f385 8811 	msr	BASEPRI, r5
   1609a:	f3bf 8f6f 	isb	sy
		if (err) {
   1609e:	2800      	cmp	r0, #0
   160a0:	d053      	beq.n	1614a <buttons_scan_fn+0x152>
   160a2:	492d      	ldr	r1, [pc, #180]	; (16158 <buttons_scan_fn+0x160>)
   160a4:	4b2d      	ldr	r3, [pc, #180]	; (1615c <buttons_scan_fn+0x164>)
			LOG_ERR("Cannot enable callbacks");
   160a6:	482e      	ldr	r0, [pc, #184]	; (16160 <buttons_scan_fn+0x168>)
   160a8:	1ac9      	subs	r1, r1, r3
   160aa:	08c9      	lsrs	r1, r1, #3
   160ac:	0189      	lsls	r1, r1, #6
   160ae:	f041 0101 	orr.w	r1, r1, #1
   160b2:	e048      	b.n	16146 <buttons_scan_fn+0x14e>
		int err = 0;
   160b4:	4620      	mov	r0, r4
   160b6:	e7ee      	b.n	16096 <buttons_scan_fn+0x9e>
		if (val < 0) {
   160b8:	daba      	bge.n	16030 <buttons_scan_fn+0x38>
   160ba:	4b28      	ldr	r3, [pc, #160]	; (1615c <buttons_scan_fn+0x164>)
   160bc:	4926      	ldr	r1, [pc, #152]	; (16158 <buttons_scan_fn+0x160>)
			LOG_ERR("Cannot read gpio pin");
   160be:	4829      	ldr	r0, [pc, #164]	; (16164 <buttons_scan_fn+0x16c>)
   160c0:	1ac9      	subs	r1, r1, r3
   160c2:	08c9      	lsrs	r1, r1, #3
   160c4:	0189      	lsls	r1, r1, #6
   160c6:	f041 0101 	orr.w	r1, r1, #1
   160ca:	f012 fcd5 	bl	28a78 <log_0>
			return 0;
   160ce:	2400      	movs	r4, #0
   160d0:	4b25      	ldr	r3, [pc, #148]	; (16168 <buttons_scan_fn+0x170>)
   160d2:	e8d3 2fef 	ldaex	r2, [r3]
   160d6:	e8c3 4fe1 	stlex	r1, r4, [r3]
   160da:	2900      	cmp	r1, #0
   160dc:	d1f9      	bne.n	160d2 <buttons_scan_fn+0xda>
	if (!initial_run) {
   160de:	4b23      	ldr	r3, [pc, #140]	; (1616c <buttons_scan_fn+0x174>)
   160e0:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1618c <buttons_scan_fn+0x194>
   160e4:	781a      	ldrb	r2, [r3, #0]
   160e6:	2a00      	cmp	r2, #0
   160e8:	d1b7      	bne.n	1605a <buttons_scan_fn+0x62>
		if (button_scan != last_button_scan) {
   160ea:	f8d9 1000 	ldr.w	r1, [r9]
   160ee:	42a1      	cmp	r1, r4
   160f0:	d015      	beq.n	1611e <buttons_scan_fn+0x126>
	if (button_handler_cb != NULL) {
   160f2:	4b1f      	ldr	r3, [pc, #124]	; (16170 <buttons_scan_fn+0x178>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   160f4:	ea81 0804 	eor.w	r8, r1, r4
	if (button_handler_cb != NULL) {
   160f8:	681b      	ldr	r3, [r3, #0]
   160fa:	b113      	cbz	r3, 16102 <buttons_scan_fn+0x10a>
		button_handler_cb(button_state, has_changed);
   160fc:	4641      	mov	r1, r8
   160fe:	4620      	mov	r0, r4
   16100:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   16102:	f04f 33ff 	mov.w	r3, #4294967295
   16106:	f04f 32ff 	mov.w	r2, #4294967295
   1610a:	481a      	ldr	r0, [pc, #104]	; (16174 <buttons_scan_fn+0x17c>)
   1610c:	f00a fcca 	bl	20aa4 <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   16110:	4b19      	ldr	r3, [pc, #100]	; (16178 <buttons_scan_fn+0x180>)
   16112:	681d      	ldr	r5, [r3, #0]
   16114:	2d00      	cmp	r5, #0
   16116:	d192      	bne.n	1603e <buttons_scan_fn+0x46>
	return z_impl_k_mutex_unlock(mutex);
   16118:	4816      	ldr	r0, [pc, #88]	; (16174 <buttons_scan_fn+0x17c>)
   1611a:	f00a fd3b 	bl	20b94 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   1611e:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   16122:	2c00      	cmp	r4, #0
   16124:	d09c      	beq.n	16060 <buttons_scan_fn+0x68>
   16126:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1612a:	2300      	movs	r3, #0
   1612c:	4913      	ldr	r1, [pc, #76]	; (1617c <buttons_scan_fn+0x184>)
   1612e:	4814      	ldr	r0, [pc, #80]	; (16180 <buttons_scan_fn+0x188>)
   16130:	f00b fa4a 	bl	215c8 <k_delayed_work_submit_to_queue>
		if (err) {
   16134:	b148      	cbz	r0, 1614a <buttons_scan_fn+0x152>
   16136:	4908      	ldr	r1, [pc, #32]	; (16158 <buttons_scan_fn+0x160>)
   16138:	4b08      	ldr	r3, [pc, #32]	; (1615c <buttons_scan_fn+0x164>)
			LOG_ERR("Cannot add work to workqueue");
   1613a:	4812      	ldr	r0, [pc, #72]	; (16184 <buttons_scan_fn+0x18c>)
   1613c:	1ac9      	subs	r1, r1, r3
   1613e:	08c9      	lsrs	r1, r1, #3
   16140:	0189      	lsls	r1, r1, #6
   16142:	f041 0101 	orr.w	r1, r1, #1
			LOG_ERR("Cannot enable callbacks");
   16146:	f012 fc97 	bl	28a78 <log_0>
}
   1614a:	b002      	add	sp, #8
   1614c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16150:	20021668 	.word	0x20021668
   16154:	20023579 	.word	0x20023579
   16158:	0002b7e8 	.word	0x0002b7e8
   1615c:	0002b7b8 	.word	0x0002b7b8
   16160:	0002d266 	.word	0x0002d266
   16164:	0002d234 	.word	0x0002d234
   16168:	200216bc 	.word	0x200216bc
   1616c:	20020a5c 	.word	0x20020a5c
   16170:	20021678 	.word	0x20021678
   16174:	2002167c 	.word	0x2002167c
   16178:	20021690 	.word	0x20021690
   1617c:	20020ea8 	.word	0x20020ea8
   16180:	20021328 	.word	0x20021328
   16184:	0002d249 	.word	0x0002d249
   16188:	0002bb68 	.word	0x0002bb68
   1618c:	200216a4 	.word	0x200216a4

00016190 <dk_leds_init>:
{
   16190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   16192:	2600      	movs	r6, #0
   16194:	4d18      	ldr	r5, [pc, #96]	; (161f8 <dk_leds_init+0x68>)
   16196:	4f19      	ldr	r7, [pc, #100]	; (161fc <dk_leds_init+0x6c>)
		led_devs[i] = device_get_binding(led_pins[i].port);
   16198:	6828      	ldr	r0, [r5, #0]
   1619a:	f00a f9cb 	bl	20534 <z_impl_device_get_binding>
   1619e:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
   161a2:	b968      	cbnz	r0, 161c0 <dk_leds_init+0x30>
   161a4:	4b16      	ldr	r3, [pc, #88]	; (16200 <dk_leds_init+0x70>)
   161a6:	4917      	ldr	r1, [pc, #92]	; (16204 <dk_leds_init+0x74>)
			LOG_ERR("Cannot bind gpio device");
   161a8:	4817      	ldr	r0, [pc, #92]	; (16208 <dk_leds_init+0x78>)
   161aa:	1ac9      	subs	r1, r1, r3
   161ac:	08c9      	lsrs	r1, r1, #3
   161ae:	0189      	lsls	r1, r1, #6
   161b0:	f041 0101 	orr.w	r1, r1, #1
   161b4:	f012 fc60 	bl	28a78 <log_0>
			return -ENODEV;
   161b8:	f06f 0412 	mvn.w	r4, #18
}
   161bc:	4620      	mov	r0, r4
   161be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   161c0:	f44f 7200 	mov.w	r2, #512	; 0x200
   161c4:	7929      	ldrb	r1, [r5, #4]
   161c6:	f014 fb8a 	bl	2a8de <gpio_pin_configure>
		if (err) {
   161ca:	4604      	mov	r4, r0
   161cc:	b150      	cbz	r0, 161e4 <dk_leds_init+0x54>
   161ce:	4b0c      	ldr	r3, [pc, #48]	; (16200 <dk_leds_init+0x70>)
   161d0:	490c      	ldr	r1, [pc, #48]	; (16204 <dk_leds_init+0x74>)
			LOG_ERR("Cannot configure LED gpio");
   161d2:	480e      	ldr	r0, [pc, #56]	; (1620c <dk_leds_init+0x7c>)
   161d4:	1ac9      	subs	r1, r1, r3
   161d6:	08c9      	lsrs	r1, r1, #3
   161d8:	0189      	lsls	r1, r1, #6
   161da:	f041 0101 	orr.w	r1, r1, #1
   161de:	f012 fc4b 	bl	28a78 <log_0>
			return err;
   161e2:	e7eb      	b.n	161bc <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   161e4:	3601      	adds	r6, #1
   161e6:	2e04      	cmp	r6, #4
   161e8:	f105 0508 	add.w	r5, r5, #8
   161ec:	d1d4      	bne.n	16198 <dk_leds_init+0x8>
}
   161ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   161f2:	210f      	movs	r1, #15
   161f4:	f7ff be7a 	b.w	15eec <dk_set_leds_state.part.0>
   161f8:	0002bb88 	.word	0x0002bb88
   161fc:	200216ac 	.word	0x200216ac
   16200:	0002b7b8 	.word	0x0002b7b8
   16204:	0002b7e8 	.word	0x0002b7e8
   16208:	0002d27e 	.word	0x0002d27e
   1620c:	0002d296 	.word	0x0002d296

00016210 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16210:	4b05      	ldr	r3, [pc, #20]	; (16228 <dk_read_buttons+0x18>)
   16212:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   16216:	b100      	cbz	r0, 1621a <dk_read_buttons+0xa>
		*button_state = current_state;
   16218:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   1621a:	4804      	ldr	r0, [pc, #16]	; (1622c <dk_read_buttons+0x1c>)
   1621c:	b111      	cbz	r1, 16224 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   1621e:	6802      	ldr	r2, [r0, #0]
   16220:	405a      	eors	r2, r3
   16222:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   16224:	6003      	str	r3, [r0, #0]
}
   16226:	4770      	bx	lr
   16228:	200216bc 	.word	0x200216bc
   1622c:	200216a8 	.word	0x200216a8

00016230 <dk_buttons_init>:
{
   16230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   16234:	4b48      	ldr	r3, [pc, #288]	; (16358 <dk_buttons_init+0x128>)
   16236:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   16238:	4d48      	ldr	r5, [pc, #288]	; (1635c <dk_buttons_init+0x12c>)
   1623a:	4f49      	ldr	r7, [pc, #292]	; (16360 <dk_buttons_init+0x130>)
   1623c:	4849      	ldr	r0, [pc, #292]	; (16364 <dk_buttons_init+0x134>)
   1623e:	f014 fd81 	bl	2ad44 <z_impl_k_mutex_init>
   16242:	46b9      	mov	r9, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16244:	2600      	movs	r6, #0
   16246:	46a8      	mov	r8, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   16248:	6828      	ldr	r0, [r5, #0]
   1624a:	f00a f973 	bl	20534 <z_impl_device_get_binding>
   1624e:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   16252:	b970      	cbnz	r0, 16272 <dk_buttons_init+0x42>
   16254:	4b44      	ldr	r3, [pc, #272]	; (16368 <dk_buttons_init+0x138>)
   16256:	4945      	ldr	r1, [pc, #276]	; (1636c <dk_buttons_init+0x13c>)
			LOG_ERR("Cannot bind gpio device");
   16258:	4845      	ldr	r0, [pc, #276]	; (16370 <dk_buttons_init+0x140>)
   1625a:	1ac9      	subs	r1, r1, r3
   1625c:	08c9      	lsrs	r1, r1, #3
   1625e:	0189      	lsls	r1, r1, #6
   16260:	f041 0101 	orr.w	r1, r1, #1
   16264:	f012 fc08 	bl	28a78 <log_0>
			return -ENODEV;
   16268:	f06f 0412 	mvn.w	r4, #18
}
   1626c:	4620      	mov	r0, r4
   1626e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   16272:	f44f 7288 	mov.w	r2, #272	; 0x110
   16276:	7929      	ldrb	r1, [r5, #4]
   16278:	f014 fb31 	bl	2a8de <gpio_pin_configure>
		if (err) {
   1627c:	4604      	mov	r4, r0
   1627e:	b150      	cbz	r0, 16296 <dk_buttons_init+0x66>
   16280:	493a      	ldr	r1, [pc, #232]	; (1636c <dk_buttons_init+0x13c>)
   16282:	4b39      	ldr	r3, [pc, #228]	; (16368 <dk_buttons_init+0x138>)
			LOG_ERR("Cannot configure button gpio");
   16284:	483b      	ldr	r0, [pc, #236]	; (16374 <dk_buttons_init+0x144>)
   16286:	1ac9      	subs	r1, r1, r3
   16288:	08c9      	lsrs	r1, r1, #3
   1628a:	0189      	lsls	r1, r1, #6
   1628c:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Cannot add work to workqueue");
   16290:	f012 fbf2 	bl	28a78 <log_0>
		return err;
   16294:	e7ea      	b.n	1626c <dk_buttons_init+0x3c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16296:	3601      	adds	r6, #1
   16298:	2e04      	cmp	r6, #4
   1629a:	f105 0508 	add.w	r5, r5, #8
   1629e:	d1d3      	bne.n	16248 <dk_buttons_init+0x18>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   162a0:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   162a2:	4681      	mov	r9, r0
		pin_mask |= BIT(button_pins[i].number);
   162a4:	f04f 0b01 	mov.w	fp, #1
   162a8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 16360 <dk_buttons_init+0x130>
		err = gpio_pin_interrupt_configure(button_devs[i],
   162ac:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
   162b0:	f85a 0b04 	ldr.w	r0, [sl], #4
   162b4:	791e      	ldrb	r6, [r3, #4]
   162b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   162ba:	4631      	mov	r1, r6
   162bc:	f014 fafb 	bl	2a8b6 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   162c0:	4604      	mov	r4, r0
   162c2:	b140      	cbz	r0, 162d6 <dk_buttons_init+0xa6>
   162c4:	4929      	ldr	r1, [pc, #164]	; (1636c <dk_buttons_init+0x13c>)
   162c6:	4b28      	ldr	r3, [pc, #160]	; (16368 <dk_buttons_init+0x138>)
			LOG_ERR("Cannot disable callbacks()");
   162c8:	482b      	ldr	r0, [pc, #172]	; (16378 <dk_buttons_init+0x148>)
   162ca:	1ac9      	subs	r1, r1, r3
   162cc:	08c9      	lsrs	r1, r1, #3
   162ce:	0189      	lsls	r1, r1, #6
   162d0:	f041 0101 	orr.w	r1, r1, #1
   162d4:	e7dc      	b.n	16290 <dk_buttons_init+0x60>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   162d6:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   162d8:	fa0b f606 	lsl.w	r6, fp, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   162dc:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   162de:	ea49 0906 	orr.w	r9, r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   162e2:	d1e3      	bne.n	162ac <dk_buttons_init+0x7c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   162e4:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   162e6:	4e25      	ldr	r6, [pc, #148]	; (1637c <dk_buttons_init+0x14c>)
   162e8:	4b25      	ldr	r3, [pc, #148]	; (16380 <dk_buttons_init+0x150>)
	callback->pin_mask = pin_mask;
   162ea:	e9c6 3901 	strd	r3, r9, [r6, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   162ee:	f857 0b04 	ldr.w	r0, [r7], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   162f2:	6883      	ldr	r3, [r0, #8]
   162f4:	69db      	ldr	r3, [r3, #28]
   162f6:	b16b      	cbz	r3, 16314 <dk_buttons_init+0xe4>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   162f8:	2201      	movs	r2, #1
   162fa:	4631      	mov	r1, r6
   162fc:	4798      	blx	r3
		if (err) {
   162fe:	4604      	mov	r4, r0
   16300:	b158      	cbz	r0, 1631a <dk_buttons_init+0xea>
   16302:	491a      	ldr	r1, [pc, #104]	; (1636c <dk_buttons_init+0x13c>)
   16304:	4b18      	ldr	r3, [pc, #96]	; (16368 <dk_buttons_init+0x138>)
			LOG_ERR("Cannot add callback");
   16306:	481f      	ldr	r0, [pc, #124]	; (16384 <dk_buttons_init+0x154>)
   16308:	1ac9      	subs	r1, r1, r3
   1630a:	08c9      	lsrs	r1, r1, #3
   1630c:	0189      	lsls	r1, r1, #6
   1630e:	f041 0101 	orr.w	r1, r1, #1
   16312:	e7bd      	b.n	16290 <dk_buttons_init+0x60>
		return -ENOTSUP;
   16314:	f06f 0485 	mvn.w	r4, #133	; 0x85
   16318:	e7f3      	b.n	16302 <dk_buttons_init+0xd2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1631a:	3501      	adds	r5, #1
   1631c:	2d04      	cmp	r5, #4
   1631e:	d1e6      	bne.n	162ee <dk_buttons_init+0xbe>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   16320:	4919      	ldr	r1, [pc, #100]	; (16388 <dk_buttons_init+0x158>)
   16322:	481a      	ldr	r0, [pc, #104]	; (1638c <dk_buttons_init+0x15c>)
   16324:	f014 feff 	bl	2b126 <k_delayed_work_init>
	state = STATE_SCANNING;
   16328:	2201      	movs	r2, #1
   1632a:	4b19      	ldr	r3, [pc, #100]	; (16390 <dk_buttons_init+0x160>)
   1632c:	4917      	ldr	r1, [pc, #92]	; (1638c <dk_buttons_init+0x15c>)
   1632e:	701a      	strb	r2, [r3, #0]
   16330:	4818      	ldr	r0, [pc, #96]	; (16394 <dk_buttons_init+0x164>)
   16332:	2200      	movs	r2, #0
   16334:	2300      	movs	r3, #0
   16336:	f00b f947 	bl	215c8 <k_delayed_work_submit_to_queue>
	if (err) {
   1633a:	4604      	mov	r4, r0
   1633c:	b140      	cbz	r0, 16350 <dk_buttons_init+0x120>
   1633e:	490b      	ldr	r1, [pc, #44]	; (1636c <dk_buttons_init+0x13c>)
   16340:	4b09      	ldr	r3, [pc, #36]	; (16368 <dk_buttons_init+0x138>)
		LOG_ERR("Cannot add work to workqueue");
   16342:	4815      	ldr	r0, [pc, #84]	; (16398 <dk_buttons_init+0x168>)
   16344:	1ac9      	subs	r1, r1, r3
   16346:	08c9      	lsrs	r1, r1, #3
   16348:	0189      	lsls	r1, r1, #6
   1634a:	f041 0101 	orr.w	r1, r1, #1
   1634e:	e79f      	b.n	16290 <dk_buttons_init+0x60>
	dk_read_buttons(NULL, NULL);
   16350:	4601      	mov	r1, r0
   16352:	f7ff ff5d 	bl	16210 <dk_read_buttons>
	return 0;
   16356:	e789      	b.n	1626c <dk_buttons_init+0x3c>
   16358:	20021678 	.word	0x20021678
   1635c:	0002bb68 	.word	0x0002bb68
   16360:	20021668 	.word	0x20021668
   16364:	2002167c 	.word	0x2002167c
   16368:	0002b7b8 	.word	0x0002b7b8
   1636c:	0002b7e8 	.word	0x0002b7e8
   16370:	0002d27e 	.word	0x0002d27e
   16374:	0002d2b0 	.word	0x0002d2b0
   16378:	0002d2cd 	.word	0x0002d2cd
   1637c:	20021698 	.word	0x20021698
   16380:	00015f69 	.word	0x00015f69
   16384:	0002d2e8 	.word	0x0002d2e8
   16388:	00015ff9 	.word	0x00015ff9
   1638c:	20020ea8 	.word	0x20020ea8
   16390:	20023579 	.word	0x20023579
   16394:	20021328 	.word	0x20021328
   16398:	0002d249 	.word	0x0002d249

0001639c <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   1639c:	2804      	cmp	r0, #4
{
   1639e:	4603      	mov	r3, r0
   163a0:	460a      	mov	r2, r1
   163a2:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
   163a4:	d90d      	bls.n	163c2 <dk_set_led+0x26>
   163a6:	4b16      	ldr	r3, [pc, #88]	; (16400 <dk_set_led+0x64>)
   163a8:	4916      	ldr	r1, [pc, #88]	; (16404 <dk_set_led+0x68>)
		LOG_ERR("LED index out of the range");
   163aa:	4817      	ldr	r0, [pc, #92]	; (16408 <dk_set_led+0x6c>)
   163ac:	1ac9      	subs	r1, r1, r3
   163ae:	08c9      	lsrs	r1, r1, #3
   163b0:	0189      	lsls	r1, r1, #6
   163b2:	f041 0101 	orr.w	r1, r1, #1
   163b6:	f012 fb5f 	bl	28a78 <log_0>
		return -EINVAL;
   163ba:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   163be:	4620      	mov	r0, r4
   163c0:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   163c2:	4912      	ldr	r1, [pc, #72]	; (1640c <dk_set_led+0x70>)
   163c4:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   163c8:	4911      	ldr	r1, [pc, #68]	; (16410 <dk_set_led+0x74>)
   163ca:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   163ce:	7919      	ldrb	r1, [r3, #4]
   163d0:	2301      	movs	r3, #1
   163d2:	fa03 f101 	lsl.w	r1, r3, r1
	if (value != 0)	{
   163d6:	b982      	cbnz	r2, 163fa <dk_set_led+0x5e>
	return api->port_set_bits_raw(port, pins);
   163d8:	6883      	ldr	r3, [r0, #8]
   163da:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   163dc:	4798      	blx	r3
   163de:	4604      	mov	r4, r0
	if (err) {
   163e0:	2800      	cmp	r0, #0
   163e2:	d0ec      	beq.n	163be <dk_set_led+0x22>
   163e4:	4b06      	ldr	r3, [pc, #24]	; (16400 <dk_set_led+0x64>)
   163e6:	4907      	ldr	r1, [pc, #28]	; (16404 <dk_set_led+0x68>)
		LOG_ERR("Cannot write LED gpio");
   163e8:	480a      	ldr	r0, [pc, #40]	; (16414 <dk_set_led+0x78>)
   163ea:	1ac9      	subs	r1, r1, r3
   163ec:	08c9      	lsrs	r1, r1, #3
   163ee:	0189      	lsls	r1, r1, #6
   163f0:	f041 0101 	orr.w	r1, r1, #1
   163f4:	f012 fb40 	bl	28a78 <log_0>
   163f8:	e7e1      	b.n	163be <dk_set_led+0x22>
   163fa:	6883      	ldr	r3, [r0, #8]
   163fc:	691b      	ldr	r3, [r3, #16]
   163fe:	e7ed      	b.n	163dc <dk_set_led+0x40>
   16400:	0002b7b8 	.word	0x0002b7b8
   16404:	0002b7e8 	.word	0x0002b7e8
   16408:	0002d2fc 	.word	0x0002d2fc
   1640c:	200216ac 	.word	0x200216ac
   16410:	0002bb88 	.word	0x0002bb88
   16414:	0002d205 	.word	0x0002d205

00016418 <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   16418:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   1641a:	f240 2201 	movw	r2, #513	; 0x201
   1641e:	2102      	movs	r1, #2
   16420:	2066      	movs	r0, #102	; 0x66
   16422:	f7fc fcf3 	bl	12e0c <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   16426:	4b05      	ldr	r3, [pc, #20]	; (1643c <open_socket+0x24>)
   16428:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   1642a:	3001      	adds	r0, #1
   1642c:	d104      	bne.n	16438 <open_socket+0x20>
		return -errno;
   1642e:	f012 ffbb 	bl	293a8 <__errno>
   16432:	6800      	ldr	r0, [r0, #0]
   16434:	4240      	negs	r0, r0
	}

	return 0;
}
   16436:	bd08      	pop	{r3, pc}
	return 0;
   16438:	2000      	movs	r0, #0
   1643a:	e7fc      	b.n	16436 <open_socket+0x1e>
   1643c:	200216c4 	.word	0x200216c4

00016440 <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   16440:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   16442:	4d17      	ldr	r5, [pc, #92]	; (164a0 <at_cmd_driver_init+0x60>)
{
   16444:	b089      	sub	sp, #36	; 0x24
	if (initialized) {
   16446:	782b      	ldrb	r3, [r5, #0]
   16448:	bb43      	cbnz	r3, 1649c <at_cmd_driver_init+0x5c>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   1644a:	f7ff ffe5 	bl	16418 <open_socket>
	if (err) {
   1644e:	4604      	mov	r4, r0
   16450:	b168      	cbz	r0, 1646e <at_cmd_driver_init+0x2e>
   16452:	4a14      	ldr	r2, [pc, #80]	; (164a4 <at_cmd_driver_init+0x64>)
   16454:	4b14      	ldr	r3, [pc, #80]	; (164a8 <at_cmd_driver_init+0x68>)
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   16456:	4601      	mov	r1, r0
   16458:	1ad2      	subs	r2, r2, r3
   1645a:	08d2      	lsrs	r2, r2, #3
   1645c:	0192      	lsls	r2, r2, #6
   1645e:	4813      	ldr	r0, [pc, #76]	; (164ac <at_cmd_driver_init+0x6c>)
   16460:	f042 0201 	orr.w	r2, r2, #1
   16464:	f012 fb17 	bl	28a96 <log_1>

	initialized = true;
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   16468:	4620      	mov	r0, r4
   1646a:	b009      	add	sp, #36	; 0x24
   1646c:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1646e:	2200      	movs	r2, #0
   16470:	2300      	movs	r3, #0
   16472:	e9cd 2306 	strd	r2, r3, [sp, #24]
   16476:	230a      	movs	r3, #10
   16478:	e9cd 0000 	strd	r0, r0, [sp]
   1647c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   16480:	9004      	str	r0, [sp, #16]
   16482:	f44f 6280 	mov.w	r2, #1024	; 0x400
   16486:	4b0a      	ldr	r3, [pc, #40]	; (164b0 <at_cmd_driver_init+0x70>)
   16488:	490a      	ldr	r1, [pc, #40]	; (164b4 <at_cmd_driver_init+0x74>)
   1648a:	480b      	ldr	r0, [pc, #44]	; (164b8 <at_cmd_driver_init+0x78>)
   1648c:	f00a ffea 	bl	21464 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   16490:	490a      	ldr	r1, [pc, #40]	; (164bc <at_cmd_driver_init+0x7c>)
   16492:	f014 fde7 	bl	2b064 <z_impl_k_thread_name_set>
	initialized = true;
   16496:	2301      	movs	r3, #1
   16498:	702b      	strb	r3, [r5, #0]
	return 0;
   1649a:	e7e5      	b.n	16468 <at_cmd_driver_init+0x28>
		return 0;
   1649c:	2400      	movs	r4, #0
   1649e:	e7e3      	b.n	16468 <at_cmd_driver_init+0x28>
   164a0:	20024006 	.word	0x20024006
   164a4:	0002b7b8 	.word	0x0002b7b8
   164a8:	0002b7b8 	.word	0x0002b7b8
   164ac:	0002d32b 	.word	0x0002d32b
   164b0:	000165e1 	.word	0x000165e1
   164b4:	200264b0 	.word	0x200264b0
   164b8:	20020ed8 	.word	0x20020ed8
   164bc:	0002d34d 	.word	0x0002d34d

000164c0 <complete_cmd>:
{
   164c0:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   164c2:	4c08      	ldr	r4, [pc, #32]	; (164e4 <complete_cmd+0x24>)
   164c4:	f04f 32ff 	mov.w	r2, #4294967295
   164c8:	f04f 33ff 	mov.w	r3, #4294967295
   164cc:	4620      	mov	r0, r4
   164ce:	f00a fae9 	bl	20aa4 <z_impl_k_mutex_lock>
	current_cmd.cmd = NULL;
   164d2:	2200      	movs	r2, #0
   164d4:	4b04      	ldr	r3, [pc, #16]	; (164e8 <complete_cmd+0x28>)
   164d6:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   164d8:	4620      	mov	r0, r4
}
   164da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   164de:	f00a bb59 	b.w	20b94 <z_impl_k_mutex_unlock>
   164e2:	bf00      	nop
   164e4:	20020b64 	.word	0x20020b64
   164e8:	200216c8 	.word	0x200216c8

000164ec <load_cmd_and_write>:
{
   164ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   164f0:	b086      	sub	sp, #24
		if (current_cmd.cmd != NULL ||
   164f2:	4e32      	ldr	r6, [pc, #200]	; (165bc <load_cmd_and_write+0xd0>)
	return z_impl_k_mutex_lock(mutex, timeout);
   164f4:	f04f 33ff 	mov.w	r3, #4294967295
   164f8:	4637      	mov	r7, r6
   164fa:	f04f 32ff 	mov.w	r2, #4294967295
   164fe:	4830      	ldr	r0, [pc, #192]	; (165c0 <load_cmd_and_write+0xd4>)
   16500:	f00a fad0 	bl	20aa4 <z_impl_k_mutex_lock>
   16504:	4d2f      	ldr	r5, [pc, #188]	; (165c4 <load_cmd_and_write+0xd8>)
   16506:	4b30      	ldr	r3, [pc, #192]	; (165c8 <load_cmd_and_write+0xdc>)
	return z_impl_k_msgq_get(msgq, data, timeout);
   16508:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 165dc <load_cmd_and_write+0xf0>
   1650c:	1aed      	subs	r5, r5, r3
   1650e:	08ed      	lsrs	r5, r5, #3
   16510:	6833      	ldr	r3, [r6, #0]
   16512:	2b00      	cmp	r3, #0
   16514:	d14b      	bne.n	165ae <load_cmd_and_write+0xc2>
   16516:	2200      	movs	r2, #0
   16518:	2300      	movs	r3, #0
   1651a:	4631      	mov	r1, r6
   1651c:	4640      	mov	r0, r8
   1651e:	f00a fa63 	bl	209e8 <z_impl_k_msgq_get>
   16522:	4604      	mov	r4, r0
   16524:	2800      	cmp	r0, #0
   16526:	d142      	bne.n	165ae <load_cmd_and_write+0xc2>
		ret = at_write(current_cmd.cmd);
   16528:	6831      	ldr	r1, [r6, #0]
	int bytes_to_send = strlen(cmd);
   1652a:	4608      	mov	r0, r1
   1652c:	9103      	str	r1, [sp, #12]
   1652e:	f00c fa9d 	bl	22a6c <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   16532:	4b26      	ldr	r3, [pc, #152]	; (165cc <load_cmd_and_write+0xe0>)
	int bytes_to_send = strlen(cmd);
   16534:	4602      	mov	r2, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   16536:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   16538:	9903      	ldr	r1, [sp, #12]
   1653a:	4623      	mov	r3, r4
   1653c:	e9cd 4400 	strd	r4, r4, [sp]
   16540:	9202      	str	r2, [sp, #8]
   16542:	f012 fdf1 	bl	29128 <z_impl_zsock_sendto>
   16546:	4601      	mov	r1, r0
	if (bytes_sent == -1) {
   16548:	1c48      	adds	r0, r1, #1
   1654a:	9a02      	ldr	r2, [sp, #8]
   1654c:	d126      	bne.n	1659c <load_cmd_and_write+0xb0>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   1654e:	f012 ff2b 	bl	293a8 <__errno>
   16552:	01ac      	lsls	r4, r5, #6
   16554:	f044 0401 	orr.w	r4, r4, #1
   16558:	4622      	mov	r2, r4
   1655a:	6801      	ldr	r1, [r0, #0]
   1655c:	481c      	ldr	r0, [pc, #112]	; (165d0 <load_cmd_and_write+0xe4>)
   1655e:	f012 fa9a 	bl	28a96 <log_1>
		return -errno;
   16562:	f012 ff21 	bl	293a8 <__errno>
   16566:	6804      	ldr	r4, [r0, #0]
   16568:	4264      	negs	r4, r4
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   1656a:	7c3b      	ldrb	r3, [r7, #16]
   1656c:	07da      	lsls	r2, r3, #31
   1656e:	d502      	bpl.n	16576 <load_cmd_and_write+0x8a>
			k_free(current_cmd.cmd);
   16570:	6838      	ldr	r0, [r7, #0]
   16572:	f014 ffa2 	bl	2b4ba <k_free>
		if (ret != 0) {
   16576:	b1d4      	cbz	r4, 165ae <load_cmd_and_write+0xc2>
			resp.state = AT_CMD_ERROR_WRITE;
   16578:	2305      	movs	r3, #5
   1657a:	f88d 3014 	strb.w	r3, [sp, #20]
			if (current_cmd.flags & AT_CMD_SYNC) {
   1657e:	7c3b      	ldrb	r3, [r7, #16]
			resp.code = ret;
   16580:	9404      	str	r4, [sp, #16]
			if (current_cmd.flags & AT_CMD_SYNC) {
   16582:	079b      	lsls	r3, r3, #30
   16584:	d507      	bpl.n	16596 <load_cmd_and_write+0xaa>
	return z_impl_k_msgq_put(msgq, data, timeout);
   16586:	f04f 32ff 	mov.w	r2, #4294967295
   1658a:	f04f 33ff 	mov.w	r3, #4294967295
   1658e:	4811      	ldr	r0, [pc, #68]	; (165d4 <load_cmd_and_write+0xe8>)
   16590:	a904      	add	r1, sp, #16
   16592:	f00a f9d5 	bl	20940 <z_impl_k_msgq_put>
			complete_cmd();
   16596:	f7ff ff93 	bl	164c0 <complete_cmd>
	} while (ret != 0);
   1659a:	e7b9      	b.n	16510 <load_cmd_and_write+0x24>
	if (bytes_sent != bytes_to_send) {
   1659c:	428a      	cmp	r2, r1
   1659e:	d0e4      	beq.n	1656a <load_cmd_and_write+0x7e>
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   165a0:	01ab      	lsls	r3, r5, #6
   165a2:	480d      	ldr	r0, [pc, #52]	; (165d8 <load_cmd_and_write+0xec>)
   165a4:	f043 0302 	orr.w	r3, r3, #2
   165a8:	f012 fa8c 	bl	28ac4 <log_2>
   165ac:	e7dd      	b.n	1656a <load_cmd_and_write+0x7e>
	return z_impl_k_mutex_unlock(mutex);
   165ae:	4804      	ldr	r0, [pc, #16]	; (165c0 <load_cmd_and_write+0xd4>)
   165b0:	f00a faf0 	bl	20b94 <z_impl_k_mutex_unlock>
}
   165b4:	b006      	add	sp, #24
   165b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   165ba:	bf00      	nop
   165bc:	200216c8 	.word	0x200216c8
   165c0:	20020b64 	.word	0x20020b64
   165c4:	0002b7b8 	.word	0x0002b7b8
   165c8:	0002b7b8 	.word	0x0002b7b8
   165cc:	200216c4 	.word	0x200216c4
   165d0:	0002d362 	.word	0x0002d362
   165d4:	20020bf0 	.word	0x20020bf0
   165d8:	0002d385 	.word	0x0002d385
   165dc:	20020bc8 	.word	0x20020bc8

000165e0 <socket_thread_fn>:
{
   165e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   165e4:	f8df 9260 	ldr.w	r9, [pc, #608]	; 16848 <socket_thread_fn+0x268>
   165e8:	4f83      	ldr	r7, [pc, #524]	; (167f8 <socket_thread_fn+0x218>)
   165ea:	46ca      	mov	sl, r9
   165ec:	4b83      	ldr	r3, [pc, #524]	; (167fc <socket_thread_fn+0x21c>)
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   165ee:	4e84      	ldr	r6, [pc, #528]	; (16800 <socket_thread_fn+0x220>)
   165f0:	1aff      	subs	r7, r7, r3
   165f2:	08ff      	lsrs	r7, r7, #3
		load_cmd_and_write();
   165f4:	f7ff ff7a 	bl	164ec <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   165f8:	f8d9 0000 	ldr.w	r0, [r9]
   165fc:	2500      	movs	r5, #0
   165fe:	f640 228c 	movw	r2, #2700	; 0xa8c
   16602:	462b      	mov	r3, r5
   16604:	e9cd 5500 	strd	r5, r5, [sp]
   16608:	497d      	ldr	r1, [pc, #500]	; (16800 <socket_thread_fn+0x220>)
   1660a:	f012 fdc0 	bl	2918e <z_impl_zsock_recvfrom>
		ret.code  = 0;
   1660e:	4c7d      	ldr	r4, [pc, #500]	; (16804 <socket_thread_fn+0x224>)
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   16610:	f8df b238 	ldr.w	fp, [pc, #568]	; 1684c <socket_thread_fn+0x26c>
		if (bytes_read < 0) {
   16614:	42a8      	cmp	r0, r5
   16616:	4680      	mov	r8, r0
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   16618:	f8cb 0000 	str.w	r0, [fp]
		ret.code  = 0;
   1661c:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   1661e:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   16620:	da6a      	bge.n	166f8 <socket_thread_fn+0x118>
			if (errno == EHOSTDOWN) {
   16622:	f012 fec1 	bl	293a8 <__errno>
   16626:	6803      	ldr	r3, [r0, #0]
   16628:	2b75      	cmp	r3, #117	; 0x75
   1662a:	d122      	bne.n	16672 <socket_thread_fn+0x92>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1662c:	2301      	movs	r3, #1
   1662e:	4c76      	ldr	r4, [pc, #472]	; (16808 <socket_thread_fn+0x228>)
   16630:	e8d4 2fef 	ldaex	r2, [r4]
   16634:	e8c4 3fe1 	stlex	r1, r3, [r4]
   16638:	2900      	cmp	r1, #0
   1663a:	d1f9      	bne.n	16630 <socket_thread_fn+0x50>
				close(common_socket_fd);
   1663c:	f8d9 0000 	ldr.w	r0, [r9]
	return z_impl_zsock_close(sock);
   16640:	f012 fd45 	bl	290ce <z_impl_zsock_close>
				bsdlib_shutdown_wait();
   16644:	f7fe ff26 	bl	15494 <bsdlib_shutdown_wait>
   16648:	e8d4 3fef 	ldaex	r3, [r4]
   1664c:	e8c4 5fe2 	stlex	r2, r5, [r4]
   16650:	2a00      	cmp	r2, #0
   16652:	d1f9      	bne.n	16648 <socket_thread_fn+0x68>
				if (open_socket() != 0) {
   16654:	f7ff fee0 	bl	16418 <open_socket>
   16658:	2800      	cmp	r0, #0
   1665a:	d0cb      	beq.n	165f4 <socket_thread_fn+0x14>
					LOG_ERR("Failed to open AT socket "
   1665c:	f012 fea4 	bl	293a8 <__errno>
   16660:	01bc      	lsls	r4, r7, #6
   16662:	f044 0401 	orr.w	r4, r4, #1
   16666:	6801      	ldr	r1, [r0, #0]
   16668:	4622      	mov	r2, r4
   1666a:	4868      	ldr	r0, [pc, #416]	; (1680c <socket_thread_fn+0x22c>)
   1666c:	f012 fa13 	bl	28a96 <log_1>
   16670:	e7c0      	b.n	165f4 <socket_thread_fn+0x14>
				LOG_ERR("AT socket recv failed with err %d",
   16672:	01bd      	lsls	r5, r7, #6
   16674:	f8db 1000 	ldr.w	r1, [fp]
   16678:	4865      	ldr	r0, [pc, #404]	; (16810 <socket_thread_fn+0x230>)
   1667a:	f045 0201 	orr.w	r2, r5, #1
   1667e:	f012 fa0a 	bl	28a96 <log_1>
			if ((close(common_socket_fd) == 0) &&
   16682:	f8d9 0000 	ldr.w	r0, [r9]
   16686:	f012 fd22 	bl	290ce <z_impl_zsock_close>
   1668a:	bb28      	cbnz	r0, 166d8 <socket_thread_fn+0xf8>
			    (open_socket() == 0)) {
   1668c:	f7ff fec4 	bl	16418 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   16690:	bb10      	cbnz	r0, 166d8 <socket_thread_fn+0xf8>
				LOG_INF("AT socket recovered");
   16692:	4860      	ldr	r0, [pc, #384]	; (16814 <socket_thread_fn+0x234>)
   16694:	f045 0103 	orr.w	r1, r5, #3
   16698:	f012 f9ee 	bl	28a78 <log_0>
				ret.state = AT_CMD_ERROR_READ;
   1669c:	2306      	movs	r3, #6
   1669e:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   166a0:	f012 fe82 	bl	293a8 <__errno>
   166a4:	6803      	ldr	r3, [r0, #0]
   166a6:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   166a8:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   166aa:	4b5b      	ldr	r3, [pc, #364]	; (16818 <socket_thread_fn+0x238>)
   166ac:	681a      	ldr	r2, [r3, #0]
   166ae:	b16a      	cbz	r2, 166cc <socket_thread_fn+0xec>
   166b0:	7c1b      	ldrb	r3, [r3, #16]
   166b2:	079b      	lsls	r3, r3, #30
   166b4:	d50a      	bpl.n	166cc <socket_thread_fn+0xec>
		    current_cmd.flags & AT_CMD_SYNC &&
   166b6:	7923      	ldrb	r3, [r4, #4]
   166b8:	2b07      	cmp	r3, #7
   166ba:	d09b      	beq.n	165f4 <socket_thread_fn+0x14>
	return z_impl_k_msgq_put(msgq, data, timeout);
   166bc:	f04f 32ff 	mov.w	r2, #4294967295
   166c0:	f04f 33ff 	mov.w	r3, #4294967295
   166c4:	494f      	ldr	r1, [pc, #316]	; (16804 <socket_thread_fn+0x224>)
   166c6:	4855      	ldr	r0, [pc, #340]	; (1681c <socket_thread_fn+0x23c>)
   166c8:	f00a f93a 	bl	20940 <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   166cc:	7923      	ldrb	r3, [r4, #4]
   166ce:	2b07      	cmp	r3, #7
   166d0:	d090      	beq.n	165f4 <socket_thread_fn+0x14>
			complete_cmd();
   166d2:	f7ff fef5 	bl	164c0 <complete_cmd>
   166d6:	e78d      	b.n	165f4 <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   166d8:	f012 fe66 	bl	293a8 <__errno>
   166dc:	f045 0501 	orr.w	r5, r5, #1
   166e0:	6801      	ldr	r1, [r0, #0]
   166e2:	462a      	mov	r2, r5
   166e4:	484e      	ldr	r0, [pc, #312]	; (16820 <socket_thread_fn+0x240>)
   166e6:	f012 f9d6 	bl	28a96 <log_1>
			close(common_socket_fd);
   166ea:	f8da 0000 	ldr.w	r0, [sl]
}
   166ee:	b003      	add	sp, #12
   166f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166f4:	f012 bceb 	b.w	290ce <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   166f8:	d10a      	bne.n	16710 <socket_thread_fn+0x130>
			LOG_ERR("AT message empty");
   166fa:	01b9      	lsls	r1, r7, #6
   166fc:	4849      	ldr	r0, [pc, #292]	; (16824 <socket_thread_fn+0x244>)
   166fe:	f041 0101 	orr.w	r1, r1, #1
   16702:	f012 f9b9 	bl	28a78 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   16706:	2306      	movs	r3, #6
   16708:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   1670a:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   1670e:	e7cb      	b.n	166a8 <socket_thread_fn+0xc8>
		} else if (buf[bytes_read - 1] != '\0') {
   16710:	1833      	adds	r3, r6, r0
   16712:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   16716:	b153      	cbz	r3, 1672e <socket_thread_fn+0x14e>
			LOG_ERR("AT message too large for reception buffer or "
   16718:	01b9      	lsls	r1, r7, #6
   1671a:	4843      	ldr	r0, [pc, #268]	; (16828 <socket_thread_fn+0x248>)
   1671c:	f041 0101 	orr.w	r1, r1, #1
   16720:	f012 f9aa 	bl	28a78 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   16724:	2306      	movs	r3, #6
   16726:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   16728:	f06f 0368 	mvn.w	r3, #104	; 0x68
   1672c:	e7bc      	b.n	166a8 <socket_thread_fn+0xc8>
	ret->state = AT_CMD_NOTIFICATION;
   1672e:	2307      	movs	r3, #7
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   16730:	1f45      	subs	r5, r0, #5
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   16732:	483e      	ldr	r0, [pc, #248]	; (1682c <socket_thread_fn+0x24c>)
	ret->state = AT_CMD_NOTIFICATION;
   16734:	7123      	strb	r3, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   16736:	f00c f999 	bl	22a6c <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   1673a:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   1673c:	4602      	mov	r2, r0
   1673e:	493b      	ldr	r1, [pc, #236]	; (1682c <socket_thread_fn+0x24c>)
   16740:	4628      	mov	r0, r5
   16742:	f00c f9c1 	bl	22ac8 <strncmp>
		if (match) {
   16746:	b9c0      	cbnz	r0, 1677a <socket_thread_fn+0x19a>
			ret->state = AT_CMD_OK;
   16748:	7120      	strb	r0, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   1674a:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   1674c:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   1674e:	1baa      	subs	r2, r5, r6
		buf[new_len++] = '\0';
   16750:	3201      	adds	r2, #1
   16752:	702b      	strb	r3, [r5, #0]
		if (current_cmd.cmd != NULL &&
   16754:	4d30      	ldr	r5, [pc, #192]	; (16818 <socket_thread_fn+0x238>)
   16756:	682b      	ldr	r3, [r5, #0]
   16758:	2b00      	cmp	r3, #0
   1675a:	d043      	beq.n	167e4 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   1675c:	6868      	ldr	r0, [r5, #4]
		if (current_cmd.cmd != NULL &&
   1675e:	2800      	cmp	r0, #0
   16760:	d040      	beq.n	167e4 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   16762:	7923      	ldrb	r3, [r4, #4]
   16764:	2b07      	cmp	r3, #7
   16766:	d12e      	bne.n	167c6 <socket_thread_fn+0x1e6>
		    notification_handler != NULL) {
   16768:	4b31      	ldr	r3, [pc, #196]	; (16830 <socket_thread_fn+0x250>)
   1676a:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   1676c:	b913      	cbnz	r3, 16774 <socket_thread_fn+0x194>
		} else if (current_cmd.callback != NULL) {
   1676e:	68ab      	ldr	r3, [r5, #8]
   16770:	2b00      	cmp	r3, #0
   16772:	d09a      	beq.n	166aa <socket_thread_fn+0xca>
			current_cmd.callback(buf);
   16774:	4630      	mov	r0, r6
   16776:	4798      	blx	r3
   16778:	e797      	b.n	166aa <socket_thread_fn+0xca>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   1677a:	4630      	mov	r0, r6
   1677c:	492d      	ldr	r1, [pc, #180]	; (16834 <socket_thread_fn+0x254>)
   1677e:	f00c fb6f 	bl	22e60 <strstr>
		if (tmpstr) {
   16782:	4605      	mov	r5, r0
   16784:	b128      	cbz	r0, 16792 <socket_thread_fn+0x1b2>
			ret->state = AT_CMD_ERROR_CMS;
   16786:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   16788:	482b      	ldr	r0, [pc, #172]	; (16838 <socket_thread_fn+0x258>)
			ret->state = AT_CMD_ERROR_CMS;
   1678a:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   1678c:	f00b f9fc 	bl	21b88 <atoi>
   16790:	e7db      	b.n	1674a <socket_thread_fn+0x16a>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   16792:	4630      	mov	r0, r6
   16794:	4929      	ldr	r1, [pc, #164]	; (1683c <socket_thread_fn+0x25c>)
   16796:	f00c fb63 	bl	22e60 <strstr>
		if (tmpstr) {
   1679a:	4605      	mov	r5, r0
   1679c:	b108      	cbz	r0, 167a2 <socket_thread_fn+0x1c2>
			ret->state = AT_CMD_ERROR_CME;
   1679e:	2303      	movs	r3, #3
   167a0:	e7f2      	b.n	16788 <socket_thread_fn+0x1a8>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   167a2:	4827      	ldr	r0, [pc, #156]	; (16840 <socket_thread_fn+0x260>)
   167a4:	f00c f962 	bl	22a6c <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   167a8:	f1a8 0508 	sub.w	r5, r8, #8
   167ac:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   167ae:	4602      	mov	r2, r0
   167b0:	4923      	ldr	r1, [pc, #140]	; (16840 <socket_thread_fn+0x260>)
   167b2:	4628      	mov	r0, r5
   167b4:	f00c f988 	bl	22ac8 <strncmp>
		if (match) {
   167b8:	b9c0      	cbnz	r0, 167ec <socket_thread_fn+0x20c>
			ret->state = AT_CMD_ERROR;
   167ba:	2301      	movs	r3, #1
   167bc:	7123      	strb	r3, [r4, #4]
			ret->code  = -ENOEXEC;
   167be:	f06f 0307 	mvn.w	r3, #7
   167c2:	6023      	str	r3, [r4, #0]
			break;
   167c4:	e7c2      	b.n	1674c <socket_thread_fn+0x16c>
			if (current_cmd.resp_size < payload_len) {
   167c6:	68eb      	ldr	r3, [r5, #12]
   167c8:	429a      	cmp	r2, r3
   167ca:	d908      	bls.n	167de <socket_thread_fn+0x1fe>
				LOG_ERR("Response buffer not large enough");
   167cc:	01b9      	lsls	r1, r7, #6
   167ce:	481d      	ldr	r0, [pc, #116]	; (16844 <socket_thread_fn+0x264>)
   167d0:	f041 0101 	orr.w	r1, r1, #1
   167d4:	f012 f950 	bl	28a78 <log_0>
				ret.code  = -EMSGSIZE;
   167d8:	f06f 0379 	mvn.w	r3, #121	; 0x79
   167dc:	e764      	b.n	166a8 <socket_thread_fn+0xc8>
   167de:	4631      	mov	r1, r6
   167e0:	f7f6 f9c8 	bl	cb74 <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   167e4:	7923      	ldrb	r3, [r4, #4]
   167e6:	2b07      	cmp	r3, #7
   167e8:	d1c1      	bne.n	1676e <socket_thread_fn+0x18e>
   167ea:	e7bd      	b.n	16768 <socket_thread_fn+0x188>
		new_len = strlen(buf) + 1;
   167ec:	4630      	mov	r0, r6
   167ee:	f00c f93d 	bl	22a6c <strlen>
   167f2:	1c42      	adds	r2, r0, #1
   167f4:	e7ae      	b.n	16754 <socket_thread_fn+0x174>
   167f6:	bf00      	nop
   167f8:	0002b7b8 	.word	0x0002b7b8
   167fc:	0002b7b8 	.word	0x0002b7b8
   16800:	2002357a 	.word	0x2002357a
   16804:	200216e0 	.word	0x200216e0
   16808:	200216e8 	.word	0x200216e8
   1680c:	0002d3b7 	.word	0x0002d3b7
   16810:	0002d3eb 	.word	0x0002d3eb
   16814:	0002d40d 	.word	0x0002d40d
   16818:	200216c8 	.word	0x200216c8
   1681c:	20020bf0 	.word	0x20020bf0
   16820:	0002d421 	.word	0x0002d421
   16824:	0002d458 	.word	0x0002d458
   16828:	0002d469 	.word	0x0002d469
   1682c:	0002d4b4 	.word	0x0002d4b4
   16830:	200216dc 	.word	0x200216dc
   16834:	0002d4b9 	.word	0x0002d4b9
   16838:	20023585 	.word	0x20023585
   1683c:	0002d4c5 	.word	0x0002d4c5
   16840:	0002d4d1 	.word	0x0002d4d1
   16844:	0002d4d9 	.word	0x0002d4d9
   16848:	200216c4 	.word	0x200216c4
   1684c:	200216c0 	.word	0x200216c0

00016850 <at_cmd_write>:
{
   16850:	b530      	push	{r4, r5, lr}
   16852:	461c      	mov	r4, r3
   16854:	b089      	sub	sp, #36	; 0x24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16856:	4b32      	ldr	r3, [pc, #200]	; (16920 <at_cmd_write+0xd0>)
   16858:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   1685c:	2b01      	cmp	r3, #1
   1685e:	d05c      	beq.n	1691a <at_cmd_write+0xca>
	if (cmd == NULL) {
   16860:	b160      	cbz	r0, 1687c <at_cmd_write+0x2c>
   16862:	1e45      	subs	r5, r0, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   16864:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   16868:	b9d3      	cbnz	r3, 168a0 <at_cmd_write+0x50>
   1686a:	492e      	ldr	r1, [pc, #184]	; (16924 <at_cmd_write+0xd4>)
   1686c:	4b2e      	ldr	r3, [pc, #184]	; (16928 <at_cmd_write+0xd8>)
		LOG_ERR("Invalid command");
   1686e:	482f      	ldr	r0, [pc, #188]	; (1692c <at_cmd_write+0xdc>)
   16870:	1ac9      	subs	r1, r1, r3
   16872:	08c9      	lsrs	r1, r1, #3
   16874:	0189      	lsls	r1, r1, #6
   16876:	f041 0101 	orr.w	r1, r1, #1
   1687a:	e007      	b.n	1688c <at_cmd_write+0x3c>
   1687c:	4929      	ldr	r1, [pc, #164]	; (16924 <at_cmd_write+0xd4>)
   1687e:	4b2a      	ldr	r3, [pc, #168]	; (16928 <at_cmd_write+0xd8>)
		LOG_ERR("cmd is NULL");
   16880:	482b      	ldr	r0, [pc, #172]	; (16930 <at_cmd_write+0xe0>)
   16882:	1ac9      	subs	r1, r1, r3
   16884:	08c9      	lsrs	r1, r1, #3
   16886:	0189      	lsls	r1, r1, #6
   16888:	f041 0101 	orr.w	r1, r1, #1
   1688c:	f012 f8f4 	bl	28a78 <log_0>
		if (state) {
   16890:	b91c      	cbnz	r4, 1689a <at_cmd_write+0x4a>
		return -EINVAL;
   16892:	f06f 0015 	mvn.w	r0, #21
}
   16896:	b009      	add	sp, #36	; 0x24
   16898:	bd30      	pop	{r4, r5, pc}
			*state = AT_CMD_ERROR_QUEUE;
   1689a:	2304      	movs	r3, #4
   1689c:	7023      	strb	r3, [r4, #0]
   1689e:	e7f8      	b.n	16892 <at_cmd_write+0x42>
		if (*c > ' ') {
   168a0:	2b20      	cmp	r3, #32
   168a2:	d9df      	bls.n	16864 <at_cmd_write+0x14>
	command.callback = NULL;
   168a4:	2300      	movs	r3, #0
   168a6:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   168a8:	2302      	movs	r3, #2
	command.resp = buf;
   168aa:	e9cd 0103 	strd	r0, r1, [sp, #12]
	command.resp_size = buf_len;
   168ae:	9206      	str	r2, [sp, #24]
	command.flags = AT_CMD_SYNC;
   168b0:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   168b4:	f04f 32ff 	mov.w	r2, #4294967295
   168b8:	f04f 33ff 	mov.w	r3, #4294967295
   168bc:	481d      	ldr	r0, [pc, #116]	; (16934 <at_cmd_write+0xe4>)
   168be:	f00a f8f1 	bl	20aa4 <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   168c2:	f04f 32ff 	mov.w	r2, #4294967295
   168c6:	a903      	add	r1, sp, #12
   168c8:	f04f 33ff 	mov.w	r3, #4294967295
   168cc:	481a      	ldr	r0, [pc, #104]	; (16938 <at_cmd_write+0xe8>)
   168ce:	f00a f837 	bl	20940 <z_impl_k_msgq_put>
   168d2:	4601      	mov	r1, r0
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   168d4:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   168d6:	b170      	cbz	r0, 168f6 <at_cmd_write+0xa6>
   168d8:	4a12      	ldr	r2, [pc, #72]	; (16924 <at_cmd_write+0xd4>)
   168da:	4b13      	ldr	r3, [pc, #76]	; (16928 <at_cmd_write+0xd8>)
		LOG_ERR("Could not enqueue cmd, error %d", ret.code);
   168dc:	4817      	ldr	r0, [pc, #92]	; (1693c <at_cmd_write+0xec>)
   168de:	1ad2      	subs	r2, r2, r3
   168e0:	08d2      	lsrs	r2, r2, #3
   168e2:	0192      	lsls	r2, r2, #6
   168e4:	f042 0201 	orr.w	r2, r2, #1
   168e8:	f012 f8d5 	bl	28a96 <log_1>
		if (state) {
   168ec:	b10c      	cbz	r4, 168f2 <at_cmd_write+0xa2>
			*state = AT_CMD_ERROR_QUEUE;
   168ee:	2304      	movs	r3, #4
		*state = ret.state;
   168f0:	7023      	strb	r3, [r4, #0]
	return ret.code;
   168f2:	9801      	ldr	r0, [sp, #4]
   168f4:	e7cf      	b.n	16896 <at_cmd_write+0x46>
	load_cmd_and_write();
   168f6:	f7ff fdf9 	bl	164ec <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   168fa:	f04f 32ff 	mov.w	r2, #4294967295
   168fe:	f04f 33ff 	mov.w	r3, #4294967295
   16902:	a901      	add	r1, sp, #4
   16904:	480e      	ldr	r0, [pc, #56]	; (16940 <at_cmd_write+0xf0>)
   16906:	f00a f86f 	bl	209e8 <z_impl_k_msgq_get>
	return z_impl_k_mutex_unlock(mutex);
   1690a:	480a      	ldr	r0, [pc, #40]	; (16934 <at_cmd_write+0xe4>)
   1690c:	f00a f942 	bl	20b94 <z_impl_k_mutex_unlock>
	if (state) {
   16910:	2c00      	cmp	r4, #0
   16912:	d0ee      	beq.n	168f2 <at_cmd_write+0xa2>
		*state = ret.state;
   16914:	f89d 3008 	ldrb.w	r3, [sp, #8]
   16918:	e7ea      	b.n	168f0 <at_cmd_write+0xa0>
		return -EHOSTDOWN;
   1691a:	f06f 0074 	mvn.w	r0, #116	; 0x74
   1691e:	e7ba      	b.n	16896 <at_cmd_write+0x46>
   16920:	200216e8 	.word	0x200216e8
   16924:	0002b7b8 	.word	0x0002b7b8
   16928:	0002b7b8 	.word	0x0002b7b8
   1692c:	0002d506 	.word	0x0002d506
   16930:	0002d4fa 	.word	0x0002d4fa
   16934:	20020ba0 	.word	0x20020ba0
   16938:	20020bc8 	.word	0x20020bc8
   1693c:	0002d516 	.word	0x0002d516
   16940:	20020bf0 	.word	0x20020bf0

00016944 <at_cmd_set_notification_handler>:
{
   16944:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   16946:	4c09      	ldr	r4, [pc, #36]	; (1696c <at_cmd_set_notification_handler+0x28>)
{
   16948:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   1694a:	6821      	ldr	r1, [r4, #0]
   1694c:	b159      	cbz	r1, 16966 <at_cmd_set_notification_handler+0x22>
   1694e:	4281      	cmp	r1, r0
   16950:	d009      	beq.n	16966 <at_cmd_set_notification_handler+0x22>
   16952:	4a07      	ldr	r2, [pc, #28]	; (16970 <at_cmd_set_notification_handler+0x2c>)
   16954:	4b07      	ldr	r3, [pc, #28]	; (16974 <at_cmd_set_notification_handler+0x30>)
		LOG_WRN("Forgetting prior notification handler %p",
   16956:	4808      	ldr	r0, [pc, #32]	; (16978 <at_cmd_set_notification_handler+0x34>)
   16958:	1ad2      	subs	r2, r2, r3
   1695a:	08d2      	lsrs	r2, r2, #3
   1695c:	0192      	lsls	r2, r2, #6
   1695e:	f042 0202 	orr.w	r2, r2, #2
   16962:	f012 f898 	bl	28a96 <log_1>
	notification_handler = handler;
   16966:	6025      	str	r5, [r4, #0]
}
   16968:	bd38      	pop	{r3, r4, r5, pc}
   1696a:	bf00      	nop
   1696c:	200216dc 	.word	0x200216dc
   16970:	0002b7b8 	.word	0x0002b7b8
   16974:	0002b7b8 	.word	0x0002b7b8
   16978:	0002d536 	.word	0x0002d536

0001697c <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1697c:	4b0b      	ldr	r3, [pc, #44]	; (169ac <find_node+0x30>)
{
   1697e:	b570      	push	{r4, r5, r6, lr}
   16980:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   16982:	6818      	ldr	r0, [r3, #0]
   16984:	b150      	cbz	r0, 1699c <find_node+0x20>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16986:	2500      	movs	r5, #0
   16988:	4603      	mov	r3, r0
   1698a:	6800      	ldr	r0, [r0, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   1698c:	685e      	ldr	r6, [r3, #4]
   1698e:	428e      	cmp	r6, r1
   16990:	d105      	bne.n	1699e <find_node+0x22>
   16992:	689e      	ldr	r6, [r3, #8]
   16994:	4296      	cmp	r6, r2
   16996:	d102      	bne.n	1699e <find_node+0x22>
			*prev_out = prev;
			return curr;
   16998:	4618      	mov	r0, r3
			*prev_out = prev;
   1699a:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   1699c:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1699e:	2800      	cmp	r0, #0
   169a0:	d0fc      	beq.n	1699c <find_node+0x20>
   169a2:	461d      	mov	r5, r3
   169a4:	4603      	mov	r3, r0
   169a6:	6800      	ldr	r0, [r0, #0]
   169a8:	e7f0      	b.n	1698c <find_node+0x10>
   169aa:	bf00      	nop
   169ac:	200216ec 	.word	0x200216ec

000169b0 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   169b0:	4a0c      	ldr	r2, [pc, #48]	; (169e4 <module_init+0x34>)
{
   169b2:	b508      	push	{r3, lr}
	if (initialized) {
   169b4:	7813      	ldrb	r3, [r2, #0]
   169b6:	b15b      	cbz	r3, 169d0 <module_init+0x20>
   169b8:	490b      	ldr	r1, [pc, #44]	; (169e8 <module_init+0x38>)
   169ba:	4b0c      	ldr	r3, [pc, #48]	; (169ec <module_init+0x3c>)
		LOG_WRN("Already initialized. Nothing to do");
   169bc:	480c      	ldr	r0, [pc, #48]	; (169f0 <module_init+0x40>)
   169be:	1ac9      	subs	r1, r1, r3
   169c0:	08c9      	lsrs	r1, r1, #3
   169c2:	0189      	lsls	r1, r1, #6
   169c4:	f041 0102 	orr.w	r1, r1, #2
   169c8:	f012 f856 	bl	28a78 <log_0>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   169cc:	2000      	movs	r0, #0
   169ce:	bd08      	pop	{r3, pc}
	initialized = true;
   169d0:	2101      	movs	r1, #1
   169d2:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   169d4:	4a07      	ldr	r2, [pc, #28]	; (169f4 <module_init+0x44>)
	at_cmd_set_notification_handler(notif_dispatch);
   169d6:	4808      	ldr	r0, [pc, #32]	; (169f8 <module_init+0x48>)
	list->tail = NULL;
   169d8:	e9c2 3300 	strd	r3, r3, [r2]
   169dc:	f7ff ffb2 	bl	16944 <at_cmd_set_notification_handler>
	return 0;
   169e0:	e7f4      	b.n	169cc <module_init+0x1c>
   169e2:	bf00      	nop
   169e4:	20024007 	.word	0x20024007
   169e8:	0002b7c8 	.word	0x0002b7c8
   169ec:	0002b7b8 	.word	0x0002b7b8
   169f0:	0002d566 	.word	0x0002d566
   169f4:	200216ec 	.word	0x200216ec
   169f8:	00016a09 	.word	0x00016a09

000169fc <k_mutex_unlock.constprop.0>:
   169fc:	4801      	ldr	r0, [pc, #4]	; (16a04 <k_mutex_unlock.constprop.0+0x8>)
   169fe:	f00a b8c9 	b.w	20b94 <z_impl_k_mutex_unlock>
   16a02:	bf00      	nop
   16a04:	20020b8c 	.word	0x20020b8c

00016a08 <notif_dispatch>:
{
   16a08:	b538      	push	{r3, r4, r5, lr}
   16a0a:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   16a0c:	f04f 33ff 	mov.w	r3, #4294967295
   16a10:	f04f 32ff 	mov.w	r2, #4294967295
   16a14:	4809      	ldr	r0, [pc, #36]	; (16a3c <notif_dispatch+0x34>)
   16a16:	f00a f845 	bl	20aa4 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   16a1a:	4b09      	ldr	r3, [pc, #36]	; (16a40 <notif_dispatch+0x38>)
   16a1c:	681b      	ldr	r3, [r3, #0]
   16a1e:	b91b      	cbnz	r3, 16a28 <notif_dispatch+0x20>
}
   16a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   16a24:	f7ff bfea 	b.w	169fc <k_mutex_unlock.constprop.0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16a28:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   16a2a:	4629      	mov	r1, r5
   16a2c:	689a      	ldr	r2, [r3, #8]
   16a2e:	6858      	ldr	r0, [r3, #4]
   16a30:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   16a32:	2c00      	cmp	r4, #0
   16a34:	d0f4      	beq.n	16a20 <notif_dispatch+0x18>
   16a36:	4623      	mov	r3, r4
   16a38:	6824      	ldr	r4, [r4, #0]
   16a3a:	e7f6      	b.n	16a2a <notif_dispatch+0x22>
   16a3c:	20020b8c 	.word	0x20020b8c
   16a40:	200216ec 	.word	0x200216ec

00016a44 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   16a44:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16a46:	4606      	mov	r6, r0
	if (handler == NULL) {
   16a48:	460d      	mov	r5, r1
   16a4a:	b979      	cbnz	r1, 16a6c <at_notif_register_handler+0x28>
   16a4c:	4a1d      	ldr	r2, [pc, #116]	; (16ac4 <at_notif_register_handler+0x80>)
   16a4e:	4b1e      	ldr	r3, [pc, #120]	; (16ac8 <at_notif_register_handler+0x84>)
   16a50:	1a9b      	subs	r3, r3, r2
   16a52:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   16a54:	019b      	lsls	r3, r3, #6
   16a56:	460a      	mov	r2, r1
   16a58:	f043 0301 	orr.w	r3, r3, #1
   16a5c:	4601      	mov	r1, r0
   16a5e:	481b      	ldr	r0, [pc, #108]	; (16acc <at_notif_register_handler+0x88>)
   16a60:	f012 f830 	bl	28ac4 <log_2>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   16a64:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   16a68:	b002      	add	sp, #8
   16a6a:	bd70      	pop	{r4, r5, r6, pc}
   16a6c:	f04f 32ff 	mov.w	r2, #4294967295
   16a70:	f04f 33ff 	mov.w	r3, #4294967295
   16a74:	4816      	ldr	r0, [pc, #88]	; (16ad0 <at_notif_register_handler+0x8c>)
   16a76:	f00a f815 	bl	20aa4 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   16a7a:	462a      	mov	r2, r5
   16a7c:	4631      	mov	r1, r6
   16a7e:	a801      	add	r0, sp, #4
   16a80:	f7ff ff7c 	bl	1697c <find_node>
   16a84:	4604      	mov	r4, r0
   16a86:	b118      	cbz	r0, 16a90 <at_notif_register_handler+0x4c>
		k_mutex_unlock(&list_mtx);
   16a88:	f7ff ffb8 	bl	169fc <k_mutex_unlock.constprop.0>
		return 0;
   16a8c:	2000      	movs	r0, #0
   16a8e:	e7eb      	b.n	16a68 <at_notif_register_handler+0x24>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   16a90:	200c      	movs	r0, #12
   16a92:	f00b f83b 	bl	21b0c <k_malloc>
   16a96:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   16a98:	b920      	cbnz	r0, 16aa4 <at_notif_register_handler+0x60>
		k_mutex_unlock(&list_mtx);
   16a9a:	f7ff ffaf 	bl	169fc <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   16a9e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16aa2:	e7e1      	b.n	16a68 <at_notif_register_handler+0x24>
__ssp_bos_icheck3(memset, void *, int)
   16aa4:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   16aa6:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   16aa8:	4a0a      	ldr	r2, [pc, #40]	; (16ad4 <at_notif_register_handler+0x90>)
   16aaa:	6044      	str	r4, [r0, #4]
   16aac:	6084      	str	r4, [r0, #8]
	parent->next = child;
   16aae:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   16ab0:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   16ab2:	e9c3 6501 	strd	r6, r5, [r3, #4]
   16ab6:	b911      	cbnz	r1, 16abe <at_notif_register_handler+0x7a>
	list->head = node;
   16ab8:	e9c2 3300 	strd	r3, r3, [r2]
}
   16abc:	e7e4      	b.n	16a88 <at_notif_register_handler+0x44>
	parent->next = child;
   16abe:	600b      	str	r3, [r1, #0]
	list->tail = node;
   16ac0:	6053      	str	r3, [r2, #4]
}
   16ac2:	e7e1      	b.n	16a88 <at_notif_register_handler+0x44>
   16ac4:	0002b7b8 	.word	0x0002b7b8
   16ac8:	0002b7c8 	.word	0x0002b7c8
   16acc:	0002d589 	.word	0x0002d589
   16ad0:	20020b8c 	.word	0x20020b8c
   16ad4:	200216ec 	.word	0x200216ec

00016ad8 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   16ad8:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   16ada:	4d05      	ldr	r5, [pc, #20]	; (16af0 <write_uart_string+0x18>)
   16adc:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   16ade:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   16ae2:	b901      	cbnz	r1, 16ae6 <write_uart_string+0xe>
	}
}
   16ae4:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   16ae6:	6828      	ldr	r0, [r5, #0]
   16ae8:	6883      	ldr	r3, [r0, #8]
   16aea:	685b      	ldr	r3, [r3, #4]
   16aec:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   16aee:	e7f6      	b.n	16ade <write_uart_string+0x6>
   16af0:	20021704 	.word	0x20021704

00016af4 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   16af4:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   16af6:	4921      	ldr	r1, [pc, #132]	; (16b7c <cmd_send+0x88>)
{
   16af8:	b08b      	sub	sp, #44	; 0x2c
	err = at_cmd_write(at_buf, at_buf,
   16afa:	4608      	mov	r0, r1
   16afc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   16b00:	f10d 030b 	add.w	r3, sp, #11
   16b04:	f7ff fea4 	bl	16850 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   16b08:	1e01      	subs	r1, r0, #0
   16b0a:	da0e      	bge.n	16b2a <cmd_send+0x36>
   16b0c:	4b1c      	ldr	r3, [pc, #112]	; (16b80 <cmd_send+0x8c>)
   16b0e:	4a1d      	ldr	r2, [pc, #116]	; (16b84 <cmd_send+0x90>)
		LOG_ERR("Error while processing AT command: %d", err);
   16b10:	481d      	ldr	r0, [pc, #116]	; (16b88 <cmd_send+0x94>)
   16b12:	1ad2      	subs	r2, r2, r3
   16b14:	08d2      	lsrs	r2, r2, #3
   16b16:	0192      	lsls	r2, r2, #6
   16b18:	f042 0201 	orr.w	r2, r2, #1
   16b1c:	f011 ffbb 	bl	28a96 <log_1>
		state = AT_CMD_ERROR;
   16b20:	2301      	movs	r3, #1
   16b22:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   16b26:	4819      	ldr	r0, [pc, #100]	; (16b8c <cmd_send+0x98>)
   16b28:	e012      	b.n	16b50 <cmd_send+0x5c>
	switch (state) {
   16b2a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   16b2e:	2b03      	cmp	r3, #3
   16b30:	d810      	bhi.n	16b54 <cmd_send+0x60>
   16b32:	a201      	add	r2, pc, #4	; (adr r2, 16b38 <cmd_send+0x44>)
   16b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16b38:	00016b49 	.word	0x00016b49
   16b3c:	00016b27 	.word	0x00016b27
   16b40:	00016b63 	.word	0x00016b63
   16b44:	00016b75 	.word	0x00016b75
		write_uart_string(at_buf);
   16b48:	480c      	ldr	r0, [pc, #48]	; (16b7c <cmd_send+0x88>)
   16b4a:	f7ff ffc5 	bl	16ad8 <write_uart_string>
		write_uart_string(OK_STR);
   16b4e:	4810      	ldr	r0, [pc, #64]	; (16b90 <cmd_send+0x9c>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   16b50:	f7ff ffc2 	bl	16ad8 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   16b54:	4b0f      	ldr	r3, [pc, #60]	; (16b94 <cmd_send+0xa0>)
   16b56:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   16b58:	f013 feda 	bl	2a910 <z_impl_uart_irq_rx_enable>
}
   16b5c:	b00b      	add	sp, #44	; 0x2c
   16b5e:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   16b62:	4b0d      	ldr	r3, [pc, #52]	; (16b98 <cmd_send+0xa4>)
   16b64:	9100      	str	r1, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   16b66:	2219      	movs	r2, #25
   16b68:	2100      	movs	r1, #0
   16b6a:	a803      	add	r0, sp, #12
   16b6c:	f00b fe22 	bl	227b4 <__sprintf_chk>
		write_uart_string(str);
   16b70:	a803      	add	r0, sp, #12
   16b72:	e7ed      	b.n	16b50 <cmd_send+0x5c>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   16b74:	4b09      	ldr	r3, [pc, #36]	; (16b9c <cmd_send+0xa8>)
   16b76:	9100      	str	r1, [sp, #0]
   16b78:	e7f5      	b.n	16b66 <cmd_send+0x72>
   16b7a:	bf00      	nop
   16b7c:	20024008 	.word	0x20024008
   16b80:	0002b7b8 	.word	0x0002b7b8
   16b84:	0002b7c0 	.word	0x0002b7c0
   16b88:	0002d5c3 	.word	0x0002d5c3
   16b8c:	0002d4d1 	.word	0x0002d4d1
   16b90:	0002d4b4 	.word	0x0002d4b4
   16b94:	20021704 	.word	0x20021704
   16b98:	0002d5e9 	.word	0x0002d5e9
   16b9c:	0002d5fa 	.word	0x0002d5fa

00016ba0 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   16ba0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16ba4:	4604      	mov	r4, r0
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update) {
   16ba6:	6883      	ldr	r3, [r0, #8]
   16ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   16baa:	b103      	cbz	r3, 16bae <isr+0xe>
		return api->irq_update(dev);
   16bac:	4798      	blx	r3
	if (api->irq_rx_ready) {
   16bae:	68a3      	ldr	r3, [r4, #8]
   16bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16bb2:	b1bb      	cbz	r3, 16be4 <isr+0x44>
		return api->irq_rx_ready(dev);
   16bb4:	4620      	mov	r0, r4
   16bb6:	4798      	blx	r3

	uint8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   16bb8:	b1a0      	cbz	r0, 16be4 <isr+0x44>
   16bba:	f8df 8140 	ldr.w	r8, [pc, #320]	; 16cfc <isr+0x15c>
   16bbe:	4e44      	ldr	r6, [pc, #272]	; (16cd0 <isr+0x130>)
   16bc0:	4647      	mov	r7, r8
   16bc2:	4b44      	ldr	r3, [pc, #272]	; (16cd4 <isr+0x134>)
		if (at_cmd_len > 0) {
   16bc4:	4d44      	ldr	r5, [pc, #272]	; (16cd8 <isr+0x138>)
   16bc6:	1af6      	subs	r6, r6, r3
   16bc8:	08f6      	lsrs	r6, r6, #3
   16bca:	e8d8 3faf 	lda	r3, [r8]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   16bce:	07db      	lsls	r3, r3, #31
   16bd0:	d408      	bmi.n	16be4 <isr+0x44>
	if (api->fifo_read) {
   16bd2:	68a3      	ldr	r3, [r4, #8]
   16bd4:	699b      	ldr	r3, [r3, #24]
   16bd6:	b12b      	cbz	r3, 16be4 <isr+0x44>
		return api->fifo_read(dev, rx_data, size);
   16bd8:	2201      	movs	r2, #1
   16bda:	4620      	mov	r0, r4
   16bdc:	f10d 0107 	add.w	r1, sp, #7
   16be0:	4798      	blx	r3
   16be2:	b910      	cbnz	r0, 16bea <isr+0x4a>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   16be4:	b002      	add	sp, #8
   16be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uart_rx_handler(character);
   16bea:	f89d 1007 	ldrb.w	r1, [sp, #7]
	switch (character) {
   16bee:	2908      	cmp	r1, #8
   16bf0:	d001      	beq.n	16bf6 <isr+0x56>
   16bf2:	297f      	cmp	r1, #127	; 0x7f
   16bf4:	d105      	bne.n	16c02 <isr+0x62>
		if (at_cmd_len > 0) {
   16bf6:	682b      	ldr	r3, [r5, #0]
   16bf8:	2b00      	cmp	r3, #0
   16bfa:	d0e6      	beq.n	16bca <isr+0x2a>
			at_cmd_len--;
   16bfc:	3b01      	subs	r3, #1
   16bfe:	602b      	str	r3, [r5, #0]
   16c00:	e7e3      	b.n	16bca <isr+0x2a>
	if (!inside_quotes) {
   16c02:	4836      	ldr	r0, [pc, #216]	; (16cdc <isr+0x13c>)
   16c04:	7803      	ldrb	r3, [r0, #0]
   16c06:	b993      	cbnz	r3, 16c2e <isr+0x8e>
		switch (character) {
   16c08:	290a      	cmp	r1, #10
   16c0a:	d01e      	beq.n	16c4a <isr+0xaa>
   16c0c:	290d      	cmp	r1, #13
   16c0e:	d00a      	beq.n	16c26 <isr+0x86>
   16c10:	b969      	cbnz	r1, 16c2e <isr+0x8e>
			if (term_mode == MODE_NULL_TERM) {
   16c12:	4b33      	ldr	r3, [pc, #204]	; (16ce0 <isr+0x140>)
   16c14:	781b      	ldrb	r3, [r3, #0]
   16c16:	b3a3      	cbz	r3, 16c82 <isr+0xe2>
			LOG_WRN("Ignored null; would terminate string early.");
   16c18:	01b1      	lsls	r1, r6, #6
   16c1a:	4832      	ldr	r0, [pc, #200]	; (16ce4 <isr+0x144>)
   16c1c:	f041 0102 	orr.w	r1, r1, #2
   16c20:	f011 ff2a 	bl	28a78 <log_0>
			return;
   16c24:	e7d1      	b.n	16bca <isr+0x2a>
			if (term_mode == MODE_CR) {
   16c26:	4a2e      	ldr	r2, [pc, #184]	; (16ce0 <isr+0x140>)
   16c28:	7812      	ldrb	r2, [r2, #0]
   16c2a:	2a01      	cmp	r2, #1
			    at_cmd_len > 0 &&
   16c2c:	d029      	beq.n	16c82 <isr+0xe2>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   16c2e:	f8d5 c000 	ldr.w	ip, [r5]
   16c32:	f10c 0201 	add.w	r2, ip, #1
   16c36:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   16c3a:	d317      	bcc.n	16c6c <isr+0xcc>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   16c3c:	01b2      	lsls	r2, r6, #6
   16c3e:	482a      	ldr	r0, [pc, #168]	; (16ce8 <isr+0x148>)
   16c40:	f042 0201 	orr.w	r2, r2, #1
   16c44:	f011 ff27 	bl	28a96 <log_1>
		return;
   16c48:	e7bf      	b.n	16bca <isr+0x2a>
			if (term_mode == MODE_LF) {
   16c4a:	4a25      	ldr	r2, [pc, #148]	; (16ce0 <isr+0x140>)
   16c4c:	7812      	ldrb	r2, [r2, #0]
   16c4e:	2a02      	cmp	r2, #2
   16c50:	d017      	beq.n	16c82 <isr+0xe2>
			if (term_mode == MODE_CR_LF &&
   16c52:	2a03      	cmp	r2, #3
   16c54:	d1eb      	bne.n	16c2e <isr+0x8e>
   16c56:	f8d5 c000 	ldr.w	ip, [r5]
   16c5a:	f1bc 0f00 	cmp.w	ip, #0
   16c5e:	d0e6      	beq.n	16c2e <isr+0x8e>
			    at_buf[at_cmd_len - 1] == '\r') {
   16c60:	4a22      	ldr	r2, [pc, #136]	; (16cec <isr+0x14c>)
   16c62:	4462      	add	r2, ip
			    at_cmd_len > 0 &&
   16c64:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   16c68:	2a0d      	cmp	r2, #13
   16c6a:	e7df      	b.n	16c2c <isr+0x8c>
	at_buf[at_cmd_len] = character;
   16c6c:	f8df e07c 	ldr.w	lr, [pc, #124]	; 16cec <isr+0x14c>
	if (character == '"') {
   16c70:	2922      	cmp	r1, #34	; 0x22
	at_buf[at_cmd_len] = character;
   16c72:	f80e 100c 	strb.w	r1, [lr, ip]
	at_cmd_len++;
   16c76:	602a      	str	r2, [r5, #0]
	if (character == '"') {
   16c78:	d1a7      	bne.n	16bca <isr+0x2a>
	if (!inside_quotes) {
   16c7a:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   16c7e:	7003      	strb	r3, [r0, #0]
   16c80:	e7a3      	b.n	16bca <isr+0x2a>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   16c82:	2200      	movs	r2, #0
   16c84:	6829      	ldr	r1, [r5, #0]
   16c86:	4b19      	ldr	r3, [pc, #100]	; (16cec <isr+0x14c>)
	inside_quotes = false;
   16c88:	7002      	strb	r2, [r0, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   16c8a:	545a      	strb	r2, [r3, r1]
	at_cmd_len = 0;
   16c8c:	4619      	mov	r1, r3
   16c8e:	602a      	str	r2, [r5, #0]
		if (*c > ' ') {
   16c90:	f813 2b01 	ldrb.w	r2, [r3], #1
   16c94:	2a20      	cmp	r2, #32
   16c96:	d802      	bhi.n	16c9e <isr+0xfe>
		} else if (*c == '\0') {
   16c98:	2a00      	cmp	r2, #0
   16c9a:	d1f9      	bne.n	16c90 <isr+0xf0>
   16c9c:	e795      	b.n	16bca <isr+0x2a>
	if (at_buf[0]) {
   16c9e:	780b      	ldrb	r3, [r1, #0]
   16ca0:	2b00      	cmp	r3, #0
   16ca2:	d092      	beq.n	16bca <isr+0x2a>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   16ca4:	4b12      	ldr	r3, [pc, #72]	; (16cf0 <isr+0x150>)
   16ca6:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   16ca8:	6883      	ldr	r3, [r0, #8]
   16caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16cac:	b103      	cbz	r3, 16cb0 <isr+0x110>
		api->irq_rx_disable(dev);
   16cae:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16cb0:	e8d7 3fef 	ldaex	r3, [r7]
   16cb4:	f043 0201 	orr.w	r2, r3, #1
   16cb8:	e8c7 2fe1 	stlex	r1, r2, [r7]
   16cbc:	2900      	cmp	r1, #0
   16cbe:	d1f7      	bne.n	16cb0 <isr+0x110>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   16cc0:	07da      	lsls	r2, r3, #31
   16cc2:	d482      	bmi.n	16bca <isr+0x2a>
		k_queue_append(&work_q->queue, work);
   16cc4:	490b      	ldr	r1, [pc, #44]	; (16cf4 <isr+0x154>)
   16cc6:	480c      	ldr	r0, [pc, #48]	; (16cf8 <isr+0x158>)
   16cc8:	f014 f8bb 	bl	2ae42 <k_queue_append>
   16ccc:	e77d      	b.n	16bca <isr+0x2a>
   16cce:	bf00      	nop
   16cd0:	0002b7c0 	.word	0x0002b7c0
   16cd4:	0002b7b8 	.word	0x0002b7b8
   16cd8:	200216f4 	.word	0x200216f4
   16cdc:	20025008 	.word	0x20025008
   16ce0:	20025009 	.word	0x20025009
   16ce4:	0002d60b 	.word	0x0002d60b
   16ce8:	0002d637 	.word	0x0002d637
   16cec:	20024008 	.word	0x20024008
   16cf0:	20021704 	.word	0x20021704
   16cf4:	200216f8 	.word	0x200216f8
   16cf8:	20020fa0 	.word	0x20020fa0
   16cfc:	20021700 	.word	0x20021700

00016d00 <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(const struct device *arg)
{
   16d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   16d04:	2201      	movs	r2, #1
   16d06:	4b49      	ldr	r3, [pc, #292]	; (16e2c <at_host_init+0x12c>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   16d08:	2000      	movs	r0, #0
   16d0a:	4949      	ldr	r1, [pc, #292]	; (16e30 <at_host_init+0x130>)
		term_mode = mode;
   16d0c:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   16d0e:	f7ff fe99 	bl	16a44 <at_notif_register_handler>
	if (err != 0) {
   16d12:	4c48      	ldr	r4, [pc, #288]	; (16e34 <at_host_init+0x134>)
   16d14:	4a48      	ldr	r2, [pc, #288]	; (16e38 <at_host_init+0x138>)
   16d16:	4606      	mov	r6, r0
   16d18:	1aa4      	subs	r4, r4, r2
   16d1a:	08e4      	lsrs	r4, r4, #3
   16d1c:	b150      	cbz	r0, 16d34 <at_host_init+0x34>
		LOG_ERR("Can't register handler err=%d", err);
   16d1e:	01a2      	lsls	r2, r4, #6
   16d20:	4601      	mov	r1, r0
   16d22:	f042 0201 	orr.w	r2, r2, #1
   16d26:	4845      	ldr	r0, [pc, #276]	; (16e3c <at_host_init+0x13c>)
   16d28:	f011 feb5 	bl	28a96 <log_1>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   16d2c:	4630      	mov	r0, r6
   16d2e:	b003      	add	sp, #12
   16d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d34:	4842      	ldr	r0, [pc, #264]	; (16e40 <at_host_init+0x140>)
   16d36:	f009 fbfd 	bl	20534 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   16d3a:	4d42      	ldr	r5, [pc, #264]	; (16e44 <at_host_init+0x144>)
   16d3c:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   16d3e:	b988      	cbnz	r0, 16d64 <at_host_init+0x64>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   16d40:	01a2      	lsls	r2, r4, #6
   16d42:	493f      	ldr	r1, [pc, #252]	; (16e40 <at_host_init+0x140>)
   16d44:	4840      	ldr	r0, [pc, #256]	; (16e48 <at_host_init+0x148>)
   16d46:	f042 0201 	orr.w	r2, r2, #1
   16d4a:	f011 fea4 	bl	28a96 <log_1>
		return -EINVAL;
   16d4e:	f06f 0115 	mvn.w	r1, #21
		LOG_ERR("UART could not be initialized: %d", err);
   16d52:	01a2      	lsls	r2, r4, #6
   16d54:	483d      	ldr	r0, [pc, #244]	; (16e4c <at_host_init+0x14c>)
   16d56:	f042 0201 	orr.w	r2, r2, #1
   16d5a:	f011 fe9c 	bl	28a96 <log_1>
		return -EFAULT;
   16d5e:	f06f 060d 	mvn.w	r6, #13
   16d62:	e7e3      	b.n	16d2c <at_host_init+0x2c>
	return z_impl_k_uptime_ticks();
   16d64:	f014 fa2c 	bl	2b1c0 <z_impl_k_uptime_ticks>
   16d68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16d6c:	460a      	mov	r2, r1
   16d6e:	fba0 0103 	umull	r0, r1, r0, r3
   16d72:	fb03 1102 	mla	r1, r3, r2, r1
   16d76:	ea4f 38d0 	mov.w	r8, r0, lsr #15
   16d7a:	ea4f 1984 	mov.w	r9, r4, lsl #6
			LOG_INF("UART check failed: %d. "
   16d7e:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 16e68 <at_host_init+0x168>
   16d82:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   16d86:	f049 0a03 	orr.w	sl, r9, #3
		err = uart_err_check(uart_dev);
   16d8a:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   16d8c:	6883      	ldr	r3, [r0, #8]
   16d8e:	689b      	ldr	r3, [r3, #8]
   16d90:	b393      	cbz	r3, 16df8 <at_host_init+0xf8>
		return api->err_check(dev);
   16d92:	4798      	blx	r3
		if (err) {
   16d94:	4607      	mov	r7, r0
   16d96:	b378      	cbz	r0, 16df8 <at_host_init+0xf8>
   16d98:	f014 fa12 	bl	2b1c0 <z_impl_k_uptime_ticks>
   16d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16da0:	460a      	mov	r2, r1
   16da2:	fba0 0103 	umull	r0, r1, r0, r3
   16da6:	fb03 1102 	mla	r1, r3, r2, r1
   16daa:	0bc3      	lsrs	r3, r0, #15
   16dac:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			if (k_uptime_get_32() - start_time >
   16db0:	eba3 0308 	sub.w	r3, r3, r8
   16db4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   16db8:	d908      	bls.n	16dcc <at_host_init+0xcc>
				LOG_ERR("UART check failed: %d. "
   16dba:	4639      	mov	r1, r7
   16dbc:	4824      	ldr	r0, [pc, #144]	; (16e50 <at_host_init+0x150>)
   16dbe:	f049 0201 	orr.w	r2, r9, #1
   16dc2:	f011 fe68 	bl	28a96 <log_1>
				return -EIO;
   16dc6:	f06f 0104 	mvn.w	r1, #4
   16dca:	e7c2      	b.n	16d52 <at_host_init+0x52>
			LOG_INF("UART check failed: %d. "
   16dcc:	4652      	mov	r2, sl
   16dce:	4639      	mov	r1, r7
   16dd0:	4658      	mov	r0, fp
   16dd2:	f011 fe60 	bl	28a96 <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   16dd6:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   16dd8:	6883      	ldr	r3, [r0, #8]
   16dda:	699b      	ldr	r3, [r3, #24]
   16ddc:	b92b      	cbnz	r3, 16dea <at_host_init+0xea>
	return z_impl_k_sleep(timeout);
   16dde:	2100      	movs	r1, #0
   16de0:	f44f 70a4 	mov.w	r0, #328	; 0x148
   16de4:	f00a fa80 	bl	212e8 <z_impl_k_sleep>
	} while (err);
   16de8:	e7cf      	b.n	16d8a <at_host_init+0x8a>
		return api->fifo_read(dev, rx_data, size);
   16dea:	2201      	movs	r2, #1
   16dec:	f10d 0107 	add.w	r1, sp, #7
   16df0:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   16df2:	2800      	cmp	r0, #0
   16df4:	d1ef      	bne.n	16dd6 <at_host_init+0xd6>
   16df6:	e7f2      	b.n	16dde <at_host_init+0xde>
	uart_irq_callback_set(uart_dev, isr);
   16df8:	6828      	ldr	r0, [r5, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   16dfa:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   16dfc:	b123      	cbz	r3, 16e08 <at_host_init+0x108>
   16dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   16e00:	b113      	cbz	r3, 16e08 <at_host_init+0x108>
		api->irq_callback_set(dev, cb, user_data);
   16e02:	2200      	movs	r2, #0
   16e04:	4913      	ldr	r1, [pc, #76]	; (16e54 <at_host_init+0x154>)
   16e06:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   16e08:	2200      	movs	r2, #0
   16e0a:	4b13      	ldr	r3, [pc, #76]	; (16e58 <at_host_init+0x158>)
   16e0c:	4913      	ldr	r1, [pc, #76]	; (16e5c <at_host_init+0x15c>)
   16e0e:	601a      	str	r2, [r3, #0]
   16e10:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   16e14:	4812      	ldr	r0, [pc, #72]	; (16e60 <at_host_init+0x160>)
   16e16:	230a      	movs	r3, #10
   16e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
   16e1c:	4911      	ldr	r1, [pc, #68]	; (16e64 <at_host_init+0x164>)
   16e1e:	f00a fbab 	bl	21578 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   16e22:	6828      	ldr	r0, [r5, #0]
   16e24:	f013 fd74 	bl	2a910 <z_impl_uart_irq_rx_enable>
	return err;
   16e28:	e780      	b.n	16d2c <at_host_init+0x2c>
   16e2a:	bf00      	nop
   16e2c:	20025009 	.word	0x20025009
   16e30:	0002a91b 	.word	0x0002a91b
   16e34:	0002b7c0 	.word	0x0002b7c0
   16e38:	0002b7b8 	.word	0x0002b7b8
   16e3c:	0002d657 	.word	0x0002d657
   16e40:	0002cbe1 	.word	0x0002cbe1
   16e44:	20021704 	.word	0x20021704
   16e48:	0002d675 	.word	0x0002d675
   16e4c:	0002d6f0 	.word	0x0002d6f0
   16e50:	0002d685 	.word	0x0002d685
   16e54:	00016ba1 	.word	0x00016ba1
   16e58:	200216f8 	.word	0x200216f8
   16e5c:	00016af5 	.word	0x00016af5
   16e60:	20020fa0 	.word	0x20020fa0
   16e64:	200268b0 	.word	0x200268b0
   16e68:	0002d6bb 	.word	0x0002d6bb

00016e6c <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   16e6c:	4b06      	ldr	r3, [pc, #24]	; (16e88 <is_valid_notification_char+0x1c>)
   16e6e:	5cc3      	ldrb	r3, [r0, r3]
   16e70:	f003 0303 	and.w	r3, r3, #3
   16e74:	2b02      	cmp	r3, #2
   16e76:	bf08      	it	eq
   16e78:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   16e7a:	3841      	subs	r0, #65	; 0x41
   16e7c:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   16e7e:	2819      	cmp	r0, #25
   16e80:	bf8c      	ite	hi
   16e82:	2000      	movhi	r0, #0
   16e84:	2001      	movls	r0, #1
   16e86:	4770      	bx	lr
   16e88:	0002bfa1 	.word	0x0002bfa1

00016e8c <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   16e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   16e90:	6805      	ldr	r5, [r0, #0]
{
   16e92:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   16e94:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16e96:	782b      	ldrb	r3, [r5, #0]
{
   16e98:	4680      	mov	r8, r0
   16e9a:	460f      	mov	r7, r1
   16e9c:	4616      	mov	r6, r2
   16e9e:	2b00      	cmp	r3, #0
   16ea0:	f000 80c8 	beq.w	17034 <at_parse_process_element+0x1a8>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   16ea4:	4b65      	ldr	r3, [pc, #404]	; (1703c <at_parse_process_element+0x1b0>)
   16ea6:	781c      	ldrb	r4, [r3, #0]
   16ea8:	2c06      	cmp	r4, #6
   16eaa:	d110      	bne.n	16ece <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   16eac:	1c6b      	adds	r3, r5, #1
   16eae:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   16eb0:	9a00      	ldr	r2, [sp, #0]
   16eb2:	7810      	ldrb	r0, [r2, #0]
   16eb4:	f7ff ffda 	bl	16e6c <is_valid_notification_char>
   16eb8:	b930      	cbnz	r0, 16ec8 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   16eba:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   16ebc:	462a      	mov	r2, r5
   16ebe:	4639      	mov	r1, r7
   16ec0:	4630      	mov	r0, r6
   16ec2:	f013 fde3 	bl	2aa8c <at_params_string_put>
   16ec6:	e01b      	b.n	16f00 <at_parse_process_element+0x74>
			tmpstr++;
   16ec8:	3201      	adds	r2, #1
   16eca:	9200      	str	r2, [sp, #0]
   16ecc:	e7f0      	b.n	16eb0 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   16ece:	2c07      	cmp	r4, #7
   16ed0:	d124      	bne.n	16f1c <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   16ed2:	4668      	mov	r0, sp
   16ed4:	f013 fd2d 	bl	2a932 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   16ed8:	9a00      	ldr	r2, [sp, #0]
   16eda:	7810      	ldrb	r0, [r2, #0]
   16edc:	f7ff ffc6 	bl	16e6c <is_valid_notification_char>
   16ee0:	b9a8      	cbnz	r0, 16f0e <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   16ee2:	1b53      	subs	r3, r2, r5
   16ee4:	4639      	mov	r1, r7
   16ee6:	462a      	mov	r2, r5
   16ee8:	4630      	mov	r0, r6
   16eea:	f013 fdcf 	bl	2aa8c <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   16eee:	9b00      	ldr	r3, [sp, #0]
   16ef0:	781a      	ldrb	r2, [r3, #0]
   16ef2:	2a3d      	cmp	r2, #61	; 0x3d
   16ef4:	d10e      	bne.n	16f14 <at_parse_process_element+0x88>
   16ef6:	785a      	ldrb	r2, [r3, #1]
   16ef8:	2a3f      	cmp	r2, #63	; 0x3f
   16efa:	d101      	bne.n	16f00 <at_parse_process_element+0x74>
			tmpstr += 2;
   16efc:	3302      	adds	r3, #2
			tmpstr++;
   16efe:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   16f00:	2000      	movs	r0, #0
	*str = tmpstr;
   16f02:	9b00      	ldr	r3, [sp, #0]
   16f04:	f8c8 3000 	str.w	r3, [r8]
}
   16f08:	b023      	add	sp, #140	; 0x8c
   16f0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   16f0e:	3201      	adds	r2, #1
   16f10:	9200      	str	r2, [sp, #0]
   16f12:	e7e1      	b.n	16ed8 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   16f14:	2a3f      	cmp	r2, #63	; 0x3f
   16f16:	d1f3      	bne.n	16f00 <at_parse_process_element+0x74>
			tmpstr++;
   16f18:	3301      	adds	r3, #1
   16f1a:	e7f0      	b.n	16efe <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   16f1c:	2c08      	cmp	r4, #8
   16f1e:	d103      	bne.n	16f28 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   16f20:	4610      	mov	r0, r2
   16f22:	f013 fd8e 	bl	2aa42 <at_params_empty_put>
   16f26:	e7eb      	b.n	16f00 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   16f28:	2c02      	cmp	r4, #2
   16f2a:	d111      	bne.n	16f50 <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   16f2c:	9a00      	ldr	r2, [sp, #0]
   16f2e:	7811      	ldrb	r1, [r2, #0]
   16f30:	4608      	mov	r0, r1
   16f32:	f013 fcf5 	bl	2a920 <is_lfcr>
   16f36:	b918      	cbnz	r0, 16f40 <at_parse_process_element+0xb4>
   16f38:	b111      	cbz	r1, 16f40 <at_parse_process_element+0xb4>
			tmpstr++;
   16f3a:	3201      	adds	r2, #1
   16f3c:	9200      	str	r2, [sp, #0]
   16f3e:	e7f5      	b.n	16f2c <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   16f40:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   16f42:	462a      	mov	r2, r5
   16f44:	4639      	mov	r1, r7
   16f46:	4630      	mov	r0, r6
   16f48:	f013 fda0 	bl	2aa8c <at_params_string_put>
		tmpstr++;
   16f4c:	9b00      	ldr	r3, [sp, #0]
   16f4e:	e7e3      	b.n	16f18 <at_parse_process_element+0x8c>
	} else if (state == QUOTED_STRING) {
   16f50:	2c03      	cmp	r4, #3
   16f52:	d109      	bne.n	16f68 <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   16f54:	9b00      	ldr	r3, [sp, #0]
   16f56:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   16f58:	2a22      	cmp	r2, #34	; 0x22
   16f5a:	d003      	beq.n	16f64 <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16f5c:	b112      	cbz	r2, 16f64 <at_parse_process_element+0xd8>
			tmpstr++;
   16f5e:	3301      	adds	r3, #1
   16f60:	9300      	str	r3, [sp, #0]
   16f62:	e7f7      	b.n	16f54 <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   16f64:	1b5b      	subs	r3, r3, r5
   16f66:	e7ec      	b.n	16f42 <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   16f68:	2c01      	cmp	r4, #1
   16f6a:	d13c      	bne.n	16fe6 <at_parse_process_element+0x15a>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   16f6c:	4628      	mov	r0, r5
   16f6e:	220a      	movs	r2, #10
   16f70:	a901      	add	r1, sp, #4
   16f72:	f00c f97f 	bl	23274 <strtoul>
		tmpstr = next;
   16f76:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   16f78:	4d31      	ldr	r5, [pc, #196]	; (17040 <at_parse_process_element+0x1b4>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   16f7a:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   16f7c:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   16f7e:	9800      	ldr	r0, [sp, #0]
   16f80:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   16f82:	2b29      	cmp	r3, #41	; 0x29
   16f84:	d028      	beq.n	16fd8 <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   16f86:	b33b      	cbz	r3, 16fd8 <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   16f88:	3b2c      	subs	r3, #44	; 0x2c
   16f8a:	b2db      	uxtb	r3, r3
   16f8c:	3001      	adds	r0, #1
   16f8e:	2b11      	cmp	r3, #17
				tmparray[i++] =
   16f90:	9000      	str	r0, [sp, #0]
   16f92:	d803      	bhi.n	16f9c <at_parse_process_element+0x110>
   16f94:	fa25 f303 	lsr.w	r3, r5, r3
   16f98:	07db      	lsls	r3, r3, #31
   16f9a:	d408      	bmi.n	16fae <at_parse_process_element+0x122>
				tmpstr++;
   16f9c:	46a1      	mov	r9, r4
   16f9e:	e004      	b.n	16faa <at_parse_process_element+0x11e>
					tmpstr = next;
   16fa0:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   16fa2:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   16fa6:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   16fa8:	d015      	beq.n	16fd6 <at_parse_process_element+0x14a>
				tmpstr++;
   16faa:	464c      	mov	r4, r9
   16fac:	e7e7      	b.n	16f7e <at_parse_process_element+0xf2>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   16fae:	220a      	movs	r2, #10
   16fb0:	a901      	add	r1, sp, #4
   16fb2:	f00c f95f 	bl	23274 <strtoul>
				tmparray[i++] =
   16fb6:	ab22      	add	r3, sp, #136	; 0x88
   16fb8:	f104 0901 	add.w	r9, r4, #1
   16fbc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   16fc0:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   16fc4:	9800      	ldr	r0, [sp, #0]
   16fc6:	f00b fd51 	bl	22a6c <strlen>
   16fca:	4604      	mov	r4, r0
   16fcc:	9801      	ldr	r0, [sp, #4]
   16fce:	f00b fd4d 	bl	22a6c <strlen>
   16fd2:	4284      	cmp	r4, r0
   16fd4:	d1e4      	bne.n	16fa0 <at_parse_process_element+0x114>
   16fd6:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   16fd8:	4639      	mov	r1, r7
   16fda:	4630      	mov	r0, r6
   16fdc:	00a3      	lsls	r3, r4, #2
   16fde:	aa02      	add	r2, sp, #8
   16fe0:	f013 fd77 	bl	2aad2 <at_params_array_put>
   16fe4:	e7b2      	b.n	16f4c <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   16fe6:	2c04      	cmp	r4, #4
   16fe8:	d115      	bne.n	17016 <at_parse_process_element+0x18a>
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   16fea:	220a      	movs	r2, #10
   16fec:	4628      	mov	r0, r5
   16fee:	a902      	add	r1, sp, #8
   16ff0:	f00c f940 	bl	23274 <strtoul>
		tmpstr = next;
   16ff4:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   16ff6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   16ffa:	4602      	mov	r2, r0
		tmpstr = next;
   16ffc:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   16ffe:	da05      	bge.n	1700c <at_parse_process_element+0x180>
			at_params_short_put(list, index, (uint16_t)value);
   17000:	b282      	uxth	r2, r0
   17002:	4639      	mov	r1, r7
   17004:	4630      	mov	r0, r6
   17006:	f013 fd09 	bl	2aa1c <at_params_short_put>
   1700a:	e779      	b.n	16f00 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   1700c:	4639      	mov	r1, r7
   1700e:	4630      	mov	r0, r6
   17010:	f013 fd29 	bl	2aa66 <at_params_int_put>
   17014:	e774      	b.n	16f00 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   17016:	2c05      	cmp	r4, #5
   17018:	f47f af72 	bne.w	16f00 <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   1701c:	4909      	ldr	r1, [pc, #36]	; (17044 <at_parse_process_element+0x1b8>)
   1701e:	9b00      	ldr	r3, [sp, #0]
   17020:	781a      	ldrb	r2, [r3, #0]
   17022:	5c52      	ldrb	r2, [r2, r1]
   17024:	f012 0f44 	tst.w	r2, #68	; 0x44
   17028:	d101      	bne.n	1702e <at_parse_process_element+0x1a2>
		at_params_string_put(list, index, start_ptr,
   1702a:	1b5b      	subs	r3, r3, r5
   1702c:	e746      	b.n	16ebc <at_parse_process_element+0x30>
			tmpstr++;
   1702e:	3301      	adds	r3, #1
   17030:	9300      	str	r3, [sp, #0]
   17032:	e7f4      	b.n	1701e <at_parse_process_element+0x192>
		return -1;
   17034:	f04f 30ff 	mov.w	r0, #4294967295
   17038:	e766      	b.n	16f08 <at_parse_process_element+0x7c>
   1703a:	bf00      	nop
   1703c:	2002500a 	.word	0x2002500a
   17040:	00024001 	.word	0x00024001
   17044:	0002bfa1 	.word	0x0002bfa1

00017048 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   17048:	b510      	push	{r4, lr}
   1704a:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1704c:	f00b fd0e 	bl	22a6c <strlen>
   17050:	2801      	cmp	r0, #1
   17052:	d922      	bls.n	1709a <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   17054:	7821      	ldrb	r1, [r4, #0]
   17056:	4b13      	ldr	r3, [pc, #76]	; (170a4 <is_command+0x5c>)
   17058:	5cca      	ldrb	r2, [r1, r3]
   1705a:	f002 0203 	and.w	r2, r2, #3
   1705e:	2a02      	cmp	r2, #2
   17060:	bf08      	it	eq
   17062:	3920      	subeq	r1, #32
   17064:	2941      	cmp	r1, #65	; 0x41
   17066:	461a      	mov	r2, r3
   17068:	d117      	bne.n	1709a <is_command+0x52>
   1706a:	7863      	ldrb	r3, [r4, #1]
   1706c:	5cd2      	ldrb	r2, [r2, r3]
   1706e:	f002 0203 	and.w	r2, r2, #3
   17072:	2a02      	cmp	r2, #2
   17074:	bf08      	it	eq
   17076:	3b20      	subeq	r3, #32
   17078:	2b54      	cmp	r3, #84	; 0x54
   1707a:	d10e      	bne.n	1709a <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1707c:	78a2      	ldrb	r2, [r4, #2]
   1707e:	2a25      	cmp	r2, #37	; 0x25
   17080:	d00d      	beq.n	1709e <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   17082:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   17086:	2b23      	cmp	r3, #35	; 0x23
   17088:	d009      	beq.n	1709e <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1708a:	4610      	mov	r0, r2
   1708c:	f013 fc48 	bl	2a920 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   17090:	b910      	cbnz	r0, 17098 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   17092:	fab2 f082 	clz	r0, r2
   17096:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   17098:	bd10      	pop	{r4, pc}
		return false;
   1709a:	2000      	movs	r0, #0
   1709c:	e7fc      	b.n	17098 <is_command+0x50>
		return true;
   1709e:	2001      	movs	r0, #1
   170a0:	e7fa      	b.n	17098 <is_command+0x50>
   170a2:	bf00      	nop
   170a4:	0002bfa1 	.word	0x0002bfa1

000170a8 <at_parse_detect_type>:
{
   170a8:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   170aa:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   170ac:	2900      	cmp	r1, #0
{
   170ae:	4605      	mov	r5, r0
   170b0:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   170b2:	d141      	bne.n	17138 <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   170b4:	2a2b      	cmp	r2, #43	; 0x2b
   170b6:	4e29      	ldr	r6, [pc, #164]	; (1715c <at_parse_detect_type+0xb4>)
   170b8:	d001      	beq.n	170be <at_parse_detect_type+0x16>
   170ba:	2a25      	cmp	r2, #37	; 0x25
   170bc:	d104      	bne.n	170c8 <at_parse_detect_type+0x20>
	state = new_state;
   170be:	2306      	movs	r3, #6
   170c0:	7033      	strb	r3, [r6, #0]
	return 0;
   170c2:	2000      	movs	r0, #0
	*str = tmpstr;
   170c4:	602c      	str	r4, [r5, #0]
}
   170c6:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   170c8:	4620      	mov	r0, r4
   170ca:	f7ff ffbd 	bl	17048 <is_command>
   170ce:	b388      	cbz	r0, 17134 <at_parse_detect_type+0x8c>
	state = new_state;
   170d0:	2307      	movs	r3, #7
   170d2:	e7f5      	b.n	170c0 <at_parse_detect_type+0x18>
	if (chr == '"') {
   170d4:	2a22      	cmp	r2, #34	; 0x22
   170d6:	d006      	beq.n	170e6 <at_parse_detect_type+0x3e>
	if (chr == '(') {
   170d8:	2a28      	cmp	r2, #40	; 0x28
   170da:	d109      	bne.n	170f0 <at_parse_detect_type+0x48>
   170dc:	2201      	movs	r2, #1
   170de:	4b1f      	ldr	r3, [pc, #124]	; (1715c <at_parse_detect_type+0xb4>)
		tmpstr++;
   170e0:	4414      	add	r4, r2
	state = new_state;
   170e2:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   170e4:	e7ed      	b.n	170c2 <at_parse_detect_type+0x1a>
	state = new_state;
   170e6:	2203      	movs	r2, #3
   170e8:	4b1c      	ldr	r3, [pc, #112]	; (1715c <at_parse_detect_type+0xb4>)
		tmpstr++;
   170ea:	3401      	adds	r4, #1
	state = new_state;
   170ec:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   170ee:	e7e8      	b.n	170c2 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   170f0:	4610      	mov	r0, r2
   170f2:	f013 fc15 	bl	2a920 <is_lfcr>
   170f6:	b170      	cbz	r0, 17116 <at_parse_detect_type+0x6e>
   170f8:	4918      	ldr	r1, [pc, #96]	; (1715c <at_parse_detect_type+0xb4>)
   170fa:	7808      	ldrb	r0, [r1, #0]
   170fc:	2804      	cmp	r0, #4
   170fe:	d108      	bne.n	17112 <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   17100:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   17104:	f013 fc0c 	bl	2a920 <is_lfcr>
   17108:	2800      	cmp	r0, #0
   1710a:	d1f9      	bne.n	17100 <at_parse_detect_type+0x58>
	state = new_state;
   1710c:	2305      	movs	r3, #5
   1710e:	700b      	strb	r3, [r1, #0]
}
   17110:	e7d7      	b.n	170c2 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   17112:	2808      	cmp	r0, #8
   17114:	d0d5      	beq.n	170c2 <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   17116:	3a2c      	subs	r2, #44	; 0x2c
   17118:	b2d2      	uxtb	r2, r2
   1711a:	2a11      	cmp	r2, #17
   1711c:	d807      	bhi.n	1712e <at_parse_detect_type+0x86>
   1711e:	4b10      	ldr	r3, [pc, #64]	; (17160 <at_parse_detect_type+0xb8>)
   17120:	fa23 f202 	lsr.w	r2, r3, r2
   17124:	07d3      	lsls	r3, r2, #31
   17126:	d502      	bpl.n	1712e <at_parse_detect_type+0x86>
	state = new_state;
   17128:	2208      	movs	r2, #8
   1712a:	4b0c      	ldr	r3, [pc, #48]	; (1715c <at_parse_detect_type+0xb4>)
   1712c:	e013      	b.n	17156 <at_parse_detect_type+0xae>
		return -1;
   1712e:	f04f 30ff 	mov.w	r0, #4294967295
   17132:	e7c8      	b.n	170c6 <at_parse_detect_type+0x1e>
	state = new_state;
   17134:	2302      	movs	r3, #2
   17136:	e7c3      	b.n	170c0 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   17138:	dd03      	ble.n	17142 <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1713a:	2a2b      	cmp	r2, #43	; 0x2b
   1713c:	d0f7      	beq.n	1712e <at_parse_detect_type+0x86>
   1713e:	2a25      	cmp	r2, #37	; 0x25
   17140:	d0f5      	beq.n	1712e <at_parse_detect_type+0x86>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   17142:	4b08      	ldr	r3, [pc, #32]	; (17164 <at_parse_detect_type+0xbc>)
   17144:	5cd3      	ldrb	r3, [r2, r3]
   17146:	0759      	lsls	r1, r3, #29
   17148:	d403      	bmi.n	17152 <at_parse_detect_type+0xaa>
   1714a:	2a2d      	cmp	r2, #45	; 0x2d
   1714c:	d001      	beq.n	17152 <at_parse_detect_type+0xaa>
   1714e:	2a2b      	cmp	r2, #43	; 0x2b
   17150:	d1c0      	bne.n	170d4 <at_parse_detect_type+0x2c>
	state = new_state;
   17152:	2204      	movs	r2, #4
   17154:	4b01      	ldr	r3, [pc, #4]	; (1715c <at_parse_detect_type+0xb4>)
   17156:	701a      	strb	r2, [r3, #0]
}
   17158:	e7b3      	b.n	170c2 <at_parse_detect_type+0x1a>
   1715a:	bf00      	nop
   1715c:	2002500a 	.word	0x2002500a
   17160:	00024001 	.word	0x00024001
   17164:	0002bfa1 	.word	0x0002bfa1

00017168 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   17168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1716c:	4688      	mov	r8, r1
   1716e:	4616      	mov	r6, r2
   17170:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   17172:	4604      	mov	r4, r0
   17174:	2800      	cmp	r0, #0
   17176:	d07e      	beq.n	17276 <at_parser_max_params_from_str+0x10e>
   17178:	2a00      	cmp	r2, #0
   1717a:	d07c      	beq.n	17276 <at_parser_max_params_from_str+0x10e>
   1717c:	6853      	ldr	r3, [r2, #4]
   1717e:	2b00      	cmp	r3, #0
   17180:	d079      	beq.n	17276 <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   17182:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   17184:	4610      	mov	r0, r2
   17186:	f013 fc1d 	bl	2a9c4 <at_params_list_clear>
	const char *str = *at_params_str;
   1718a:	9401      	str	r4, [sp, #4]
	int index = 0;
   1718c:	462c      	mov	r4, r5

	max_params_count = MIN(max_params_count, list->param_count);
   1718e:	6833      	ldr	r3, [r6, #0]
		if (isspace((int)*str)) {
   17190:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 17280 <at_parser_max_params_from_str+0x118>
	max_params_count = MIN(max_params_count, list->param_count);
   17194:	429f      	cmp	r7, r3
   17196:	bf28      	it	cs
   17198:	461f      	movcs	r7, r3
	state = IDLE;
   1719a:	4b38      	ldr	r3, [pc, #224]	; (1727c <at_parser_max_params_from_str+0x114>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1719c:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 17284 <at_parser_max_params_from_str+0x11c>
   171a0:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   171a2:	9b01      	ldr	r3, [sp, #4]
   171a4:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   171a6:	2a00      	cmp	r2, #0
   171a8:	d04b      	beq.n	17242 <at_parser_max_params_from_str+0xda>
   171aa:	42a7      	cmp	r7, r4
   171ac:	d949      	bls.n	17242 <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   171ae:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   171b2:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   171b4:	0711      	lsls	r1, r2, #28
			str++;
   171b6:	bf48      	it	mi
   171b8:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   171ba:	4621      	mov	r1, r4
			str++;
   171bc:	bf48      	it	mi
   171be:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   171c0:	f7ff ff72 	bl	170a8 <at_parse_detect_type>
   171c4:	1c42      	adds	r2, r0, #1
   171c6:	d03c      	beq.n	17242 <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   171c8:	4632      	mov	r2, r6
   171ca:	4621      	mov	r1, r4
   171cc:	a801      	add	r0, sp, #4
   171ce:	f7ff fe5d 	bl	16e8c <at_parse_process_element>
   171d2:	1c43      	adds	r3, r0, #1
   171d4:	d035      	beq.n	17242 <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   171d6:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   171d8:	781a      	ldrb	r2, [r3, #0]
   171da:	3a2c      	subs	r2, #44	; 0x2c
   171dc:	b2d2      	uxtb	r2, r2
   171de:	2a11      	cmp	r2, #17
   171e0:	d81a      	bhi.n	17218 <at_parser_max_params_from_str+0xb0>
   171e2:	fa2a f202 	lsr.w	r2, sl, r2
   171e6:	07d1      	lsls	r1, r2, #31
   171e8:	d516      	bpl.n	17218 <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   171ea:	7858      	ldrb	r0, [r3, #1]
   171ec:	f013 fb98 	bl	2a920 <is_lfcr>
   171f0:	b178      	cbz	r0, 17212 <at_parser_max_params_from_str+0xaa>
				index++;
   171f2:	3401      	adds	r4, #1
				if (index == max_params) {
   171f4:	42bc      	cmp	r4, r7
   171f6:	d039      	beq.n	1726c <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   171f8:	4621      	mov	r1, r4
   171fa:	a801      	add	r0, sp, #4
   171fc:	f7ff ff54 	bl	170a8 <at_parse_detect_type>
   17200:	1c42      	adds	r2, r0, #1
   17202:	d01e      	beq.n	17242 <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   17204:	4632      	mov	r2, r6
   17206:	4621      	mov	r1, r4
   17208:	a801      	add	r0, sp, #4
   1720a:	f7ff fe3f 	bl	16e8c <at_parse_process_element>
   1720e:	1c43      	adds	r3, r0, #1
   17210:	d017      	beq.n	17242 <at_parser_max_params_from_str+0xda>
			str++;
   17212:	9b01      	ldr	r3, [sp, #4]
   17214:	3301      	adds	r3, #1
   17216:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   17218:	9a01      	ldr	r2, [sp, #4]
   1721a:	7810      	ldrb	r0, [r2, #0]
   1721c:	f013 fb80 	bl	2a920 <is_lfcr>
   17220:	b1f8      	cbz	r0, 17262 <at_parser_max_params_from_str+0xfa>
   17222:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   17224:	7811      	ldrb	r1, [r2, #0]
   17226:	4693      	mov	fp, r2
   17228:	4608      	mov	r0, r1
   1722a:	3201      	adds	r2, #1
   1722c:	f013 fb78 	bl	2a920 <is_lfcr>
   17230:	2800      	cmp	r0, #0
   17232:	d1f7      	bne.n	17224 <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   17234:	b119      	cbz	r1, 1723e <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   17236:	292b      	cmp	r1, #43	; 0x2b
   17238:	d001      	beq.n	1723e <at_parser_max_params_from_str+0xd6>
   1723a:	2925      	cmp	r1, #37	; 0x25
   1723c:	d111      	bne.n	17262 <at_parser_max_params_from_str+0xfa>
				str += i;
   1723e:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   17242:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   17244:	b9a5      	cbnz	r5, 17270 <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   17246:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   17248:	2a00      	cmp	r2, #0
   1724a:	bf0c      	ite	eq
   1724c:	2000      	moveq	r0, #0
   1724e:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   17252:	f1b8 0f00 	cmp.w	r8, #0
   17256:	d001      	beq.n	1725c <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   17258:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   1725c:	b003      	add	sp, #12
   1725e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   17262:	3401      	adds	r4, #1
			oversized = true;
   17264:	42bc      	cmp	r4, r7
   17266:	bf08      	it	eq
   17268:	2501      	moveq	r5, #1
   1726a:	e79a      	b.n	171a2 <at_parser_max_params_from_str+0x3a>
					oversized = true;
   1726c:	4605      	mov	r5, r0
   1726e:	e7e8      	b.n	17242 <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   17270:	f06f 0006 	mvn.w	r0, #6
   17274:	e7ed      	b.n	17252 <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   17276:	f06f 0015 	mvn.w	r0, #21
   1727a:	e7ef      	b.n	1725c <at_parser_max_params_from_str+0xf4>
   1727c:	2002500a 	.word	0x2002500a
   17280:	0002bfa1 	.word	0x0002bfa1
   17284:	00024001 	.word	0x00024001

00017288 <parse_psm_cfg>:
	char timer_str[9] = {0};
   17288:	2300      	movs	r3, #0
{
   1728a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1728c:	b089      	sub	sp, #36	; 0x24
	char timer_str[9] = {0};
   1728e:	e9cd 3305 	strd	r3, r3, [sp, #20]
   17292:	f88d 301c 	strb.w	r3, [sp, #28]
	char unit_str[4] = {0};
   17296:	9303      	str	r3, [sp, #12]
	size_t timer_str_len = sizeof(timer_str) - 1;
   17298:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   1729a:	2900      	cmp	r1, #0
	err = at_params_string_get(at_params,
   1729c:	bf14      	ite	ne
   1729e:	2108      	movne	r1, #8
   172a0:	2109      	moveq	r1, #9
	size_t timer_str_len = sizeof(timer_str) - 1;
   172a2:	9304      	str	r3, [sp, #16]
{
   172a4:	4615      	mov	r5, r2
	err = at_params_string_get(at_params,
   172a6:	ab04      	add	r3, sp, #16
   172a8:	aa05      	add	r2, sp, #20
{
   172aa:	4606      	mov	r6, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   172ac:	bf14      	ite	ne
   172ae:	2707      	movne	r7, #7
   172b0:	2708      	moveq	r7, #8
	err = at_params_string_get(at_params,
   172b2:	f013 fc44 	bl	2ab3e <at_params_string_get>
	if (err) {
   172b6:	4601      	mov	r1, r0
   172b8:	b170      	cbz	r0, 172d8 <parse_psm_cfg+0x50>
   172ba:	4b34      	ldr	r3, [pc, #208]	; (1738c <parse_psm_cfg+0x104>)
   172bc:	4a34      	ldr	r2, [pc, #208]	; (17390 <parse_psm_cfg+0x108>)
		LOG_ERR("Could not get TAU, error: %d", err);
   172be:	4835      	ldr	r0, [pc, #212]	; (17394 <parse_psm_cfg+0x10c>)
   172c0:	1ad2      	subs	r2, r2, r3
   172c2:	08d2      	lsrs	r2, r2, #3
   172c4:	0192      	lsls	r2, r2, #6
   172c6:	f042 0201 	orr.w	r2, r2, #1
   172ca:	9101      	str	r1, [sp, #4]
   172cc:	f011 fbe3 	bl	28a96 <log_1>
		return err;
   172d0:	9901      	ldr	r1, [sp, #4]
}
   172d2:	4608      	mov	r0, r1
   172d4:	b009      	add	sp, #36	; 0x24
   172d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(unit_str, timer_str, unit_str_len);
   172d8:	9b05      	ldr	r3, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   172da:	9001      	str	r0, [sp, #4]
	memcpy(unit_str, timer_str, unit_str_len);
   172dc:	f8ad 300c 	strh.w	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   172e0:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   172e2:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   172e4:	a803      	add	r0, sp, #12
	memcpy(unit_str, timer_str, unit_str_len);
   172e6:	f88d 300e 	strb.w	r3, [sp, #14]
	lut_idx = strtoul(unit_str, NULL, 2);
   172ea:	f00b ffc3 	bl	23274 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   172ee:	2807      	cmp	r0, #7
   172f0:	9901      	ldr	r1, [sp, #4]
   172f2:	d90c      	bls.n	1730e <parse_psm_cfg+0x86>
   172f4:	4926      	ldr	r1, [pc, #152]	; (17390 <parse_psm_cfg+0x108>)
   172f6:	4b25      	ldr	r3, [pc, #148]	; (1738c <parse_psm_cfg+0x104>)
		LOG_ERR("Unable to parse periodic TAU string");
   172f8:	4827      	ldr	r0, [pc, #156]	; (17398 <parse_psm_cfg+0x110>)
   172fa:	1ac9      	subs	r1, r1, r3
   172fc:	08c9      	lsrs	r1, r1, #3
   172fe:	0189      	lsls	r1, r1, #6
   17300:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Unable to parse active time string");
   17304:	f011 fbb8 	bl	28a78 <log_0>
		return err;
   17308:	f06f 0115 	mvn.w	r1, #21
   1730c:	e7e1      	b.n	172d2 <parse_psm_cfg+0x4a>
	timer_unit = t3412_lookup[lut_idx];
   1730e:	4b23      	ldr	r3, [pc, #140]	; (1739c <parse_psm_cfg+0x114>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   17310:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   17312:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   17316:	f10d 0017 	add.w	r0, sp, #23
   1731a:	f00b ffab 	bl	23274 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   1731e:	b30c      	cbz	r4, 17364 <parse_psm_cfg+0xdc>
   17320:	4344      	muls	r4, r0
	err = at_params_string_get(at_params,
   17322:	4639      	mov	r1, r7
   17324:	4630      	mov	r0, r6
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   17326:	602c      	str	r4, [r5, #0]
	err = at_params_string_get(at_params,
   17328:	ab04      	add	r3, sp, #16
   1732a:	aa05      	add	r2, sp, #20
   1732c:	f013 fc07 	bl	2ab3e <at_params_string_get>
	if (err) {
   17330:	4601      	mov	r1, r0
   17332:	2800      	cmp	r0, #0
   17334:	d1c1      	bne.n	172ba <parse_psm_cfg+0x32>
	memcpy(unit_str, timer_str, unit_str_len);
   17336:	9b05      	ldr	r3, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   17338:	9001      	str	r0, [sp, #4]
	memcpy(unit_str, timer_str, unit_str_len);
   1733a:	f8ad 300c 	strh.w	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   1733e:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   17340:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   17342:	a803      	add	r0, sp, #12
	memcpy(unit_str, timer_str, unit_str_len);
   17344:	f88d 300e 	strb.w	r3, [sp, #14]
	lut_idx = strtoul(unit_str, NULL, 2);
   17348:	f00b ff94 	bl	23274 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   1734c:	2807      	cmp	r0, #7
   1734e:	9901      	ldr	r1, [sp, #4]
   17350:	d90b      	bls.n	1736a <parse_psm_cfg+0xe2>
   17352:	490f      	ldr	r1, [pc, #60]	; (17390 <parse_psm_cfg+0x108>)
   17354:	4b0d      	ldr	r3, [pc, #52]	; (1738c <parse_psm_cfg+0x104>)
		LOG_ERR("Unable to parse active time string");
   17356:	4812      	ldr	r0, [pc, #72]	; (173a0 <parse_psm_cfg+0x118>)
   17358:	1ac9      	subs	r1, r1, r3
   1735a:	08c9      	lsrs	r1, r1, #3
   1735c:	0189      	lsls	r1, r1, #6
   1735e:	f041 0101 	orr.w	r1, r1, #1
   17362:	e7cf      	b.n	17304 <parse_psm_cfg+0x7c>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   17364:	f04f 34ff 	mov.w	r4, #4294967295
   17368:	e7db      	b.n	17322 <parse_psm_cfg+0x9a>
	timer_unit = t3324_lookup[lut_idx];
   1736a:	4b0e      	ldr	r3, [pc, #56]	; (173a4 <parse_psm_cfg+0x11c>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   1736c:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   1736e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   17372:	f10d 0017 	add.w	r0, sp, #23
   17376:	9101      	str	r1, [sp, #4]
   17378:	f00b ff7c 	bl	23274 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   1737c:	9901      	ldr	r1, [sp, #4]
   1737e:	b114      	cbz	r4, 17386 <parse_psm_cfg+0xfe>
   17380:	4360      	muls	r0, r4
   17382:	6068      	str	r0, [r5, #4]
	return 0;
   17384:	e7a5      	b.n	172d2 <parse_psm_cfg+0x4a>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   17386:	f04f 30ff 	mov.w	r0, #4294967295
   1738a:	e7fa      	b.n	17382 <parse_psm_cfg+0xfa>
   1738c:	0002b7b8 	.word	0x0002b7b8
   17390:	0002b800 	.word	0x0002b800
   17394:	0002d71a 	.word	0x0002d71a
   17398:	0002d737 	.word	0x0002d737
   1739c:	0002bbec 	.word	0x0002bbec
   173a0:	0002d75b 	.word	0x0002d75b
   173a4:	0002bbcc 	.word	0x0002bbcc

000173a8 <lte_lc_offline>:
{
   173a8:	b508      	push	{r3, lr}
	if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   173aa:	2300      	movs	r3, #0
   173ac:	4804      	ldr	r0, [pc, #16]	; (173c0 <lte_lc_offline+0x18>)
   173ae:	461a      	mov	r2, r3
   173b0:	4619      	mov	r1, r3
   173b2:	f7ff fa4d 	bl	16850 <at_cmd_write>
   173b6:	2800      	cmp	r0, #0
}
   173b8:	bf18      	it	ne
   173ba:	f06f 0004 	mvnne.w	r0, #4
   173be:	bd08      	pop	{r3, pc}
   173c0:	0002de55 	.word	0x0002de55

000173c4 <lte_lc_normal>:
{
   173c4:	b508      	push	{r3, lr}
	if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   173c6:	2300      	movs	r3, #0
   173c8:	4804      	ldr	r0, [pc, #16]	; (173dc <lte_lc_normal+0x18>)
   173ca:	461a      	mov	r2, r3
   173cc:	4619      	mov	r1, r3
   173ce:	f7ff fa3f 	bl	16850 <at_cmd_write>
   173d2:	2800      	cmp	r0, #0
}
   173d4:	bf18      	it	ne
   173d6:	f06f 0004 	mvnne.w	r0, #4
   173da:	bd08      	pop	{r3, pc}
   173dc:	0002de4b 	.word	0x0002de4b

000173e0 <lte_lc_system_mode_set>:

	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode)
{
   173e0:	b530      	push	{r4, r5, lr}
	int err, len;
	char cmd[50];

	switch (mode) {
   173e2:	4605      	mov	r5, r0
{
   173e4:	b08f      	sub	sp, #60	; 0x3c
	switch (mode) {
   173e6:	2800      	cmp	r0, #0
   173e8:	d040      	beq.n	1746c <lte_lc_system_mode_set+0x8c>
   173ea:	1e43      	subs	r3, r0, #1
   173ec:	2b04      	cmp	r3, #4
   173ee:	d90e      	bls.n	1740e <lte_lc_system_mode_set+0x2e>
   173f0:	4b1f      	ldr	r3, [pc, #124]	; (17470 <lte_lc_system_mode_set+0x90>)
   173f2:	4920      	ldr	r1, [pc, #128]	; (17474 <lte_lc_system_mode_set+0x94>)
	case LTE_LC_SYSTEM_MODE_NBIOT:
	case LTE_LC_SYSTEM_MODE_NBIOT_GPS:
	case LTE_LC_SYSTEM_MODE_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested");
   173f4:	4820      	ldr	r0, [pc, #128]	; (17478 <lte_lc_system_mode_set+0x98>)
   173f6:	1ac9      	subs	r1, r1, r3
   173f8:	08c9      	lsrs	r1, r1, #3
   173fa:	0189      	lsls	r1, r1, #6
   173fc:	f041 0101 	orr.w	r1, r1, #1
   17400:	f011 fb3a 	bl	28a78 <log_0>
		return -EINVAL;
   17404:	f06f 0415 	mvn.w	r4, #21

	sys_mode_current = mode;
	sys_mode_target = mode;

	return err;
}
   17408:	4620      	mov	r0, r4
   1740a:	b00f      	add	sp, #60	; 0x3c
   1740c:	bd30      	pop	{r4, r5, pc}
	len = snprintk(cmd, sizeof(cmd), "AT%%XSYSTEMMODE=%s",
   1740e:	4b1b      	ldr	r3, [pc, #108]	; (1747c <lte_lc_system_mode_set+0x9c>)
   17410:	2132      	movs	r1, #50	; 0x32
   17412:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   17416:	4a1a      	ldr	r2, [pc, #104]	; (17480 <lte_lc_system_mode_set+0xa0>)
   17418:	a801      	add	r0, sp, #4
   1741a:	f010 ffdc 	bl	283d6 <snprintk>
	if (len < 0) {
   1741e:	2800      	cmp	r0, #0
   17420:	da0c      	bge.n	1743c <lte_lc_system_mode_set+0x5c>
   17422:	4b13      	ldr	r3, [pc, #76]	; (17470 <lte_lc_system_mode_set+0x90>)
   17424:	4913      	ldr	r1, [pc, #76]	; (17474 <lte_lc_system_mode_set+0x94>)
		LOG_ERR("Could not construct system mode command");
   17426:	4817      	ldr	r0, [pc, #92]	; (17484 <lte_lc_system_mode_set+0xa4>)
   17428:	1ac9      	subs	r1, r1, r3
   1742a:	08c9      	lsrs	r1, r1, #3
   1742c:	0189      	lsls	r1, r1, #6
   1742e:	f041 0101 	orr.w	r1, r1, #1
   17432:	f011 fb21 	bl	28a78 <log_0>
		return -EFAULT;
   17436:	f06f 040d 	mvn.w	r4, #13
   1743a:	e7e5      	b.n	17408 <lte_lc_system_mode_set+0x28>
	err = at_cmd_write(cmd, NULL, 0, NULL);
   1743c:	2300      	movs	r3, #0
   1743e:	a801      	add	r0, sp, #4
   17440:	461a      	mov	r2, r3
   17442:	4619      	mov	r1, r3
   17444:	f7ff fa04 	bl	16850 <at_cmd_write>
	if (err) {
   17448:	4604      	mov	r4, r0
   1744a:	b150      	cbz	r0, 17462 <lte_lc_system_mode_set+0x82>
   1744c:	4a09      	ldr	r2, [pc, #36]	; (17474 <lte_lc_system_mode_set+0x94>)
   1744e:	4b08      	ldr	r3, [pc, #32]	; (17470 <lte_lc_system_mode_set+0x90>)
		LOG_ERR("Could not send AT command, error: %d", err);
   17450:	4601      	mov	r1, r0
   17452:	1ad2      	subs	r2, r2, r3
   17454:	08d2      	lsrs	r2, r2, #3
   17456:	0192      	lsls	r2, r2, #6
   17458:	480b      	ldr	r0, [pc, #44]	; (17488 <lte_lc_system_mode_set+0xa8>)
   1745a:	f042 0201 	orr.w	r2, r2, #1
   1745e:	f011 fb1a 	bl	28a96 <log_1>
	sys_mode_current = mode;
   17462:	4b0a      	ldr	r3, [pc, #40]	; (1748c <lte_lc_system_mode_set+0xac>)
   17464:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   17466:	4b0a      	ldr	r3, [pc, #40]	; (17490 <lte_lc_system_mode_set+0xb0>)
   17468:	701d      	strb	r5, [r3, #0]
	return err;
   1746a:	e7cd      	b.n	17408 <lte_lc_system_mode_set+0x28>
	switch (mode) {
   1746c:	4604      	mov	r4, r0
   1746e:	e7cb      	b.n	17408 <lte_lc_system_mode_set+0x28>
   17470:	0002b7b8 	.word	0x0002b7b8
   17474:	0002b800 	.word	0x0002b800
   17478:	0002db1a 	.word	0x0002db1a
   1747c:	0002bbb4 	.word	0x0002bbb4
   17480:	0002db38 	.word	0x0002db38
   17484:	0002db4b 	.word	0x0002db4b
   17488:	0002db73 	.word	0x0002db73
   1748c:	2002500d 	.word	0x2002500d
   17490:	20020a5d 	.word	0x20020a5d

00017494 <w_lte_lc_connect>:
{
   17494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!is_initialized) {
   17498:	4b23      	ldr	r3, [pc, #140]	; (17528 <w_lte_lc_connect+0x94>)
   1749a:	4c24      	ldr	r4, [pc, #144]	; (1752c <w_lte_lc_connect+0x98>)
   1749c:	4924      	ldr	r1, [pc, #144]	; (17530 <w_lte_lc_connect+0x9c>)
   1749e:	781b      	ldrb	r3, [r3, #0]
   174a0:	1a64      	subs	r4, r4, r1
{
   174a2:	4605      	mov	r5, r0
   174a4:	08e4      	lsrs	r4, r4, #3
	if (!is_initialized) {
   174a6:	b94b      	cbnz	r3, 174bc <w_lte_lc_connect+0x28>
		LOG_ERR("The LTE link controller is not initialized");
   174a8:	01a1      	lsls	r1, r4, #6
   174aa:	4822      	ldr	r0, [pc, #136]	; (17534 <w_lte_lc_connect+0xa0>)
   174ac:	f041 0101 	orr.w	r1, r1, #1
   174b0:	f011 fae2 	bl	28a78 <log_0>
		return -EPERM;
   174b4:	f04f 30ff 	mov.w	r0, #4294967295
}
   174b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   174bc:	2201      	movs	r2, #1
   174be:	2100      	movs	r1, #0
   174c0:	481d      	ldr	r0, [pc, #116]	; (17538 <w_lte_lc_connect+0xa4>)
   174c2:	f013 fdb7 	bl	2b034 <z_impl_k_sem_init>
		err = lte_lc_system_mode_set(sys_mode_target);
   174c6:	4e1d      	ldr	r6, [pc, #116]	; (1753c <w_lte_lc_connect+0xa8>)
	return z_impl_k_sem_take(sem, timeout);
   174c8:	4f1b      	ldr	r7, [pc, #108]	; (17538 <w_lte_lc_connect+0xa4>)
			LOG_INF("Network connection attempt timed out");
   174ca:	f8df 8078 	ldr.w	r8, [pc, #120]	; 17544 <w_lte_lc_connect+0xb0>
		err = lte_lc_system_mode_set(sys_mode_target);
   174ce:	7830      	ldrb	r0, [r6, #0]
   174d0:	f7ff ff86 	bl	173e0 <lte_lc_system_mode_set>
		if (err) {
   174d4:	2800      	cmp	r0, #0
   174d6:	d1ef      	bne.n	174b8 <w_lte_lc_connect+0x24>
		err = lte_lc_normal();
   174d8:	f7ff ff74 	bl	173c4 <lte_lc_normal>
		if (err || !blocking) {
   174dc:	2800      	cmp	r0, #0
   174de:	d1eb      	bne.n	174b8 <w_lte_lc_connect+0x24>
   174e0:	2d00      	cmp	r5, #0
   174e2:	d0e9      	beq.n	174b8 <w_lte_lc_connect+0x24>
   174e4:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   174e8:	2300      	movs	r3, #0
   174ea:	4638      	mov	r0, r7
   174ec:	f009 ff48 	bl	21380 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   174f0:	f110 0f0b 	cmn.w	r0, #11
   174f4:	d1e0      	bne.n	174b8 <w_lte_lc_connect+0x24>
			LOG_INF("Network connection attempt timed out");
   174f6:	ea4f 1984 	mov.w	r9, r4, lsl #6
   174fa:	f049 0903 	orr.w	r9, r9, #3
   174fe:	4649      	mov	r1, r9
   17500:	4640      	mov	r0, r8
   17502:	f011 fab9 	bl	28a78 <log_0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   17506:	7833      	ldrb	r3, [r6, #0]
   17508:	2b01      	cmp	r3, #1
   1750a:	d10a      	bne.n	17522 <w_lte_lc_connect+0x8e>
				sys_mode_target = sys_mode_fallback;
   1750c:	2302      	movs	r3, #2
   1750e:	7033      	strb	r3, [r6, #0]
				err = lte_lc_offline();
   17510:	f7ff ff4a 	bl	173a8 <lte_lc_offline>
				if (err) {
   17514:	2800      	cmp	r0, #0
   17516:	d1cf      	bne.n	174b8 <w_lte_lc_connect+0x24>
				LOG_INF("Using fallback network mode");
   17518:	4649      	mov	r1, r9
   1751a:	4809      	ldr	r0, [pc, #36]	; (17540 <w_lte_lc_connect+0xac>)
   1751c:	f011 faac 	bl	28a78 <log_0>
	} while (retry);
   17520:	e7d5      	b.n	174ce <w_lte_lc_connect+0x3a>
				err = -ETIMEDOUT;
   17522:	f06f 0073 	mvn.w	r0, #115	; 0x73
   17526:	e7c7      	b.n	174b8 <w_lte_lc_connect+0x24>
   17528:	2002500b 	.word	0x2002500b
   1752c:	0002b800 	.word	0x0002b800
   17530:	0002b7b8 	.word	0x0002b7b8
   17534:	0002db98 	.word	0x0002db98
   17538:	2002170c 	.word	0x2002170c
   1753c:	20020a5d 	.word	0x20020a5d
   17540:	0002dbe8 	.word	0x0002dbe8
   17544:	0002dbc3 	.word	0x0002dbc3

00017548 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode)
{
   17548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, bitmask = 0;
	struct at_param_list resp_list = {0};
   1754c:	2400      	movs	r4, #0
{
   1754e:	b090      	sub	sp, #64	; 0x40
   17550:	4605      	mov	r5, r0
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   17552:	221a      	movs	r2, #26
   17554:	4621      	mov	r1, r4
   17556:	a809      	add	r0, sp, #36	; 0x24
	struct at_param_list resp_list = {0};
   17558:	e9cd 4402 	strd	r4, r4, [sp, #8]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   1755c:	9408      	str	r4, [sp, #32]
   1755e:	f00a fe75 	bl	2224c <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   17562:	230d      	movs	r3, #13
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   17564:	e9cd 4404 	strd	r4, r4, [sp, #16]
   17568:	9406      	str	r4, [sp, #24]
   1756a:	f88d 401c 	strb.w	r4, [sp, #28]
	size_t response_prefix_len = sizeof(response_prefix);
   1756e:	9300      	str	r3, [sp, #0]

	if (mode == NULL) {
   17570:	2d00      	cmp	r5, #0
   17572:	f000 80ad 	beq.w	176d0 <lte_lc_system_mode_get+0x188>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   17576:	4623      	mov	r3, r4
   17578:	221e      	movs	r2, #30
   1757a:	4857      	ldr	r0, [pc, #348]	; (176d8 <lte_lc_system_mode_get+0x190>)
   1757c:	a908      	add	r1, sp, #32
   1757e:	f7ff f967 	bl	16850 <at_cmd_write>
			   NULL);
	if (err) {
   17582:	4604      	mov	r4, r0
   17584:	b168      	cbz	r0, 175a2 <lte_lc_system_mode_get+0x5a>
   17586:	4955      	ldr	r1, [pc, #340]	; (176dc <lte_lc_system_mode_get+0x194>)
   17588:	4b55      	ldr	r3, [pc, #340]	; (176e0 <lte_lc_system_mode_get+0x198>)
		LOG_ERR("Could not send AT command");
   1758a:	4856      	ldr	r0, [pc, #344]	; (176e4 <lte_lc_system_mode_get+0x19c>)
   1758c:	1ac9      	subs	r1, r1, r3
   1758e:	08c9      	lsrs	r1, r1, #3
   17590:	0189      	lsls	r1, r1, #6
   17592:	f041 0101 	orr.w	r1, r1, #1
   17596:	f011 fa6f 	bl	28a78 <log_0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1759a:	4620      	mov	r0, r4
   1759c:	b010      	add	sp, #64	; 0x40
   1759e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   175a2:	2105      	movs	r1, #5
   175a4:	a802      	add	r0, sp, #8
   175a6:	f013 f9fa 	bl	2a99e <at_params_list_init>
	if (err) {
   175aa:	4604      	mov	r4, r0
   175ac:	b158      	cbz	r0, 175c6 <lte_lc_system_mode_get+0x7e>
   175ae:	4b4c      	ldr	r3, [pc, #304]	; (176e0 <lte_lc_system_mode_get+0x198>)
   175b0:	4a4a      	ldr	r2, [pc, #296]	; (176dc <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Could init AT params list, error: %d", err);
   175b2:	4601      	mov	r1, r0
   175b4:	1ad2      	subs	r2, r2, r3
   175b6:	08d2      	lsrs	r2, r2, #3
   175b8:	0192      	lsls	r2, r2, #6
   175ba:	484b      	ldr	r0, [pc, #300]	; (176e8 <lte_lc_system_mode_get+0x1a0>)
   175bc:	f042 0201 	orr.w	r2, r2, #1
   175c0:	f011 fa69 	bl	28a96 <log_1>
		return err;
   175c4:	e7e9      	b.n	1759a <lte_lc_system_mode_get+0x52>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   175c6:	4601      	mov	r1, r0
   175c8:	2305      	movs	r3, #5
   175ca:	aa02      	add	r2, sp, #8
   175cc:	a808      	add	r0, sp, #32
   175ce:	f7ff fdcb 	bl	17168 <at_parser_max_params_from_str>
	if (err) {
   175d2:	4604      	mov	r4, r0
   175d4:	b158      	cbz	r0, 175ee <lte_lc_system_mode_get+0xa6>
   175d6:	4a41      	ldr	r2, [pc, #260]	; (176dc <lte_lc_system_mode_get+0x194>)
   175d8:	4b41      	ldr	r3, [pc, #260]	; (176e0 <lte_lc_system_mode_get+0x198>)
		LOG_ERR("Could not parse AT response, error: %d", err);
   175da:	4601      	mov	r1, r0
   175dc:	1ad2      	subs	r2, r2, r3
   175de:	08d2      	lsrs	r2, r2, #3
   175e0:	0192      	lsls	r2, r2, #6
   175e2:	4842      	ldr	r0, [pc, #264]	; (176ec <lte_lc_system_mode_get+0x1a4>)
   175e4:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   175e8:	f011 fa55 	bl	28a96 <log_1>
			goto clean_exit;
   175ec:	e013      	b.n	17616 <lte_lc_system_mode_get+0xce>
	err = at_params_string_get(&resp_list,
   175ee:	4601      	mov	r1, r0
   175f0:	466b      	mov	r3, sp
   175f2:	aa04      	add	r2, sp, #16
   175f4:	a802      	add	r0, sp, #8
   175f6:	f013 faa2 	bl	2ab3e <at_params_string_get>
	if (err) {
   175fa:	4606      	mov	r6, r0
   175fc:	b178      	cbz	r0, 1761e <lte_lc_system_mode_get+0xd6>
   175fe:	4b38      	ldr	r3, [pc, #224]	; (176e0 <lte_lc_system_mode_get+0x198>)
   17600:	4a36      	ldr	r2, [pc, #216]	; (176dc <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   17602:	4601      	mov	r1, r0
   17604:	1ad2      	subs	r2, r2, r3
   17606:	08d2      	lsrs	r2, r2, #3
   17608:	0192      	lsls	r2, r2, #6
   1760a:	4839      	ldr	r0, [pc, #228]	; (176f0 <lte_lc_system_mode_get+0x1a8>)
   1760c:	f042 0201 	orr.w	r2, r2, #1
   17610:	f011 fa41 	bl	28a96 <log_1>
		goto clean_exit;
   17614:	4634      	mov	r4, r6
	at_params_list_free(&resp_list);
   17616:	a802      	add	r0, sp, #8
   17618:	f013 f9f2 	bl	2aa00 <at_params_list_free>
	return err;
   1761c:	e7bd      	b.n	1759a <lte_lc_system_mode_get+0x52>
	if (!response_is_valid(response_prefix, response_prefix_len,
   1761e:	4a35      	ldr	r2, [pc, #212]	; (176f4 <lte_lc_system_mode_get+0x1ac>)
   17620:	9900      	ldr	r1, [sp, #0]
   17622:	a804      	add	r0, sp, #16
   17624:	f013 faae 	bl	2ab84 <response_is_valid>
   17628:	b960      	cbnz	r0, 17644 <lte_lc_system_mode_get+0xfc>
   1762a:	4b2d      	ldr	r3, [pc, #180]	; (176e0 <lte_lc_system_mode_get+0x198>)
   1762c:	492b      	ldr	r1, [pc, #172]	; (176dc <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Invalid XSYSTEMMODE response");
   1762e:	4832      	ldr	r0, [pc, #200]	; (176f8 <lte_lc_system_mode_get+0x1b0>)
   17630:	1ac9      	subs	r1, r1, r3
   17632:	08c9      	lsrs	r1, r1, #3
   17634:	0189      	lsls	r1, r1, #6
   17636:	f041 0101 	orr.w	r1, r1, #1
   1763a:	f011 fa1d 	bl	28a78 <log_0>
		err = -EIO;
   1763e:	f06f 0404 	mvn.w	r4, #4
		goto clean_exit;
   17642:	e7e8      	b.n	17616 <lte_lc_system_mode_get+0xce>
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   17644:	2701      	movs	r7, #1
		bitmask = param ? bitmask | BIT(i) : bitmask;
   17646:	46b8      	mov	r8, r7
		err = at_params_int_get(&resp_list, i, &param);
   17648:	4639      	mov	r1, r7
   1764a:	aa01      	add	r2, sp, #4
   1764c:	a802      	add	r0, sp, #8
   1764e:	f013 fa63 	bl	2ab18 <at_params_int_get>
		if (err) {
   17652:	4604      	mov	r4, r0
   17654:	b148      	cbz	r0, 1766a <lte_lc_system_mode_get+0x122>
   17656:	4a21      	ldr	r2, [pc, #132]	; (176dc <lte_lc_system_mode_get+0x194>)
   17658:	4b21      	ldr	r3, [pc, #132]	; (176e0 <lte_lc_system_mode_get+0x198>)
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   1765a:	4601      	mov	r1, r0
   1765c:	1ad2      	subs	r2, r2, r3
   1765e:	08d2      	lsrs	r2, r2, #3
   17660:	0192      	lsls	r2, r2, #6
   17662:	4826      	ldr	r0, [pc, #152]	; (176fc <lte_lc_system_mode_get+0x1b4>)
   17664:	f042 0201 	orr.w	r2, r2, #1
   17668:	e7be      	b.n	175e8 <lte_lc_system_mode_get+0xa0>
		bitmask = param ? bitmask | BIT(i) : bitmask;
   1766a:	9b01      	ldr	r3, [sp, #4]
   1766c:	b113      	cbz	r3, 17674 <lte_lc_system_mode_get+0x12c>
   1766e:	fa08 f307 	lsl.w	r3, r8, r7
   17672:	431e      	orrs	r6, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   17674:	3701      	adds	r7, #1
   17676:	2f05      	cmp	r7, #5
   17678:	d1e6      	bne.n	17648 <lte_lc_system_mode_get+0x100>
	switch (bitmask) {
   1767a:	2e0c      	cmp	r6, #12
   1767c:	d81b      	bhi.n	176b6 <lte_lc_system_mode_get+0x16e>
   1767e:	e8df f006 	tbb	[pc, r6]
   17682:	1a07      	.short	0x1a07
   17684:	1a121a10 	.word	0x1a121a10
   17688:	1a141a1a 	.word	0x1a141a1a
   1768c:	1a16      	.short	0x1a16
   1768e:	18          	.byte	0x18
   1768f:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   17690:	2300      	movs	r3, #0
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   17692:	702b      	strb	r3, [r5, #0]
	if (sys_mode_current != *mode) {
   17694:	4b1a      	ldr	r3, [pc, #104]	; (17700 <lte_lc_system_mode_get+0x1b8>)
   17696:	782a      	ldrb	r2, [r5, #0]
   17698:	7819      	ldrb	r1, [r3, #0]
   1769a:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   1769c:	bf18      	it	ne
   1769e:	701a      	strbne	r2, [r3, #0]
   176a0:	e7b9      	b.n	17616 <lte_lc_system_mode_get+0xce>
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   176a2:	2301      	movs	r3, #1
   176a4:	e7f5      	b.n	17692 <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   176a6:	2302      	movs	r3, #2
   176a8:	e7f3      	b.n	17692 <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   176aa:	2303      	movs	r3, #3
   176ac:	e7f1      	b.n	17692 <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   176ae:	2304      	movs	r3, #4
   176b0:	e7ef      	b.n	17692 <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   176b2:	2305      	movs	r3, #5
   176b4:	e7ed      	b.n	17692 <lte_lc_system_mode_get+0x14a>
   176b6:	4b0a      	ldr	r3, [pc, #40]	; (176e0 <lte_lc_system_mode_get+0x198>)
   176b8:	4908      	ldr	r1, [pc, #32]	; (176dc <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Invalid system mode, assuming parsing error");
   176ba:	4812      	ldr	r0, [pc, #72]	; (17704 <lte_lc_system_mode_get+0x1bc>)
   176bc:	1ac9      	subs	r1, r1, r3
   176be:	08c9      	lsrs	r1, r1, #3
   176c0:	0189      	lsls	r1, r1, #6
   176c2:	f041 0101 	orr.w	r1, r1, #1
   176c6:	f011 f9d7 	bl	28a78 <log_0>
		err = -EFAULT;
   176ca:	f06f 040d 	mvn.w	r4, #13
		goto clean_exit;
   176ce:	e7a2      	b.n	17616 <lte_lc_system_mode_get+0xce>
		return -EINVAL;
   176d0:	f06f 0415 	mvn.w	r4, #21
   176d4:	e761      	b.n	1759a <lte_lc_system_mode_get+0x52>
   176d6:	bf00      	nop
   176d8:	0002dc04 	.word	0x0002dc04
   176dc:	0002b800 	.word	0x0002b800
   176e0:	0002b7b8 	.word	0x0002b7b8
   176e4:	0002dc14 	.word	0x0002dc14
   176e8:	0002dc2e 	.word	0x0002dc2e
   176ec:	0002dc53 	.word	0x0002dc53
   176f0:	0002da95 	.word	0x0002da95
   176f4:	0002dc7a 	.word	0x0002dc7a
   176f8:	0002dc87 	.word	0x0002dc87
   176fc:	0002dca4 	.word	0x0002dca4
   17700:	2002500d 	.word	0x2002500d
   17704:	0002dccc 	.word	0x0002dccc

00017708 <w_lte_lc_init>:
{
   17708:	b570      	push	{r4, r5, r6, lr}
	if (is_initialized) {
   1770a:	4e3a      	ldr	r6, [pc, #232]	; (177f4 <w_lte_lc_init+0xec>)
{
   1770c:	b08e      	sub	sp, #56	; 0x38
	if (is_initialized) {
   1770e:	7833      	ldrb	r3, [r6, #0]
   17710:	2b00      	cmp	r3, #0
   17712:	d168      	bne.n	177e6 <w_lte_lc_init+0xde>
	err = lte_lc_system_mode_get(&sys_mode_current);
   17714:	4d38      	ldr	r5, [pc, #224]	; (177f8 <w_lte_lc_init+0xf0>)
   17716:	4628      	mov	r0, r5
   17718:	f7ff ff16 	bl	17548 <lte_lc_system_mode_get>
	if (err) {
   1771c:	4604      	mov	r4, r0
   1771e:	b168      	cbz	r0, 1773c <w_lte_lc_init+0x34>
   17720:	4a36      	ldr	r2, [pc, #216]	; (177fc <w_lte_lc_init+0xf4>)
   17722:	4b37      	ldr	r3, [pc, #220]	; (17800 <w_lte_lc_init+0xf8>)
		LOG_ERR("Could not get current system mode, error: %d", err);
   17724:	4601      	mov	r1, r0
   17726:	1ad2      	subs	r2, r2, r3
   17728:	08d2      	lsrs	r2, r2, #3
   1772a:	0192      	lsls	r2, r2, #6
   1772c:	4835      	ldr	r0, [pc, #212]	; (17804 <w_lte_lc_init+0xfc>)
   1772e:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Can't register AT handler, error: %d", err);
   17732:	f011 f9b0 	bl	28a96 <log_1>
}
   17736:	4620      	mov	r0, r4
   17738:	b00e      	add	sp, #56	; 0x38
   1773a:	bd70      	pop	{r4, r5, r6, pc}
	err = at_notif_register_handler(NULL, at_handler);
   1773c:	4932      	ldr	r1, [pc, #200]	; (17808 <w_lte_lc_init+0x100>)
   1773e:	f7ff f981 	bl	16a44 <at_notif_register_handler>
	if (err) {
   17742:	4604      	mov	r4, r0
   17744:	b148      	cbz	r0, 1775a <w_lte_lc_init+0x52>
   17746:	4a2d      	ldr	r2, [pc, #180]	; (177fc <w_lte_lc_init+0xf4>)
   17748:	4b2d      	ldr	r3, [pc, #180]	; (17800 <w_lte_lc_init+0xf8>)
		LOG_ERR("Can't register AT handler, error: %d", err);
   1774a:	4601      	mov	r1, r0
   1774c:	1ad2      	subs	r2, r2, r3
   1774e:	08d2      	lsrs	r2, r2, #3
   17750:	0192      	lsls	r2, r2, #6
   17752:	482e      	ldr	r0, [pc, #184]	; (1780c <w_lte_lc_init+0x104>)
   17754:	f042 0201 	orr.w	r2, r2, #1
   17758:	e7eb      	b.n	17732 <w_lte_lc_init+0x2a>
	if (sys_mode_current != sys_mode_target) {
   1775a:	4b2d      	ldr	r3, [pc, #180]	; (17810 <w_lte_lc_init+0x108>)
   1775c:	7818      	ldrb	r0, [r3, #0]
   1775e:	782b      	ldrb	r3, [r5, #0]
   17760:	4283      	cmp	r3, r0
   17762:	d00d      	beq.n	17780 <w_lte_lc_init+0x78>
		err = lte_lc_system_mode_set(sys_mode_target);
   17764:	f7ff fe3c 	bl	173e0 <lte_lc_system_mode_set>
		if (err) {
   17768:	4604      	mov	r4, r0
   1776a:	b148      	cbz	r0, 17780 <w_lte_lc_init+0x78>
   1776c:	4a23      	ldr	r2, [pc, #140]	; (177fc <w_lte_lc_init+0xf4>)
   1776e:	4b24      	ldr	r3, [pc, #144]	; (17800 <w_lte_lc_init+0xf8>)
			LOG_ERR("Could not set system mode, error: %d", err);
   17770:	4601      	mov	r1, r0
   17772:	1ad2      	subs	r2, r2, r3
   17774:	08d2      	lsrs	r2, r2, #3
   17776:	0192      	lsls	r2, r2, #6
   17778:	4826      	ldr	r0, [pc, #152]	; (17814 <w_lte_lc_init+0x10c>)
   1777a:	f042 0201 	orr.w	r2, r2, #1
   1777e:	e7d8      	b.n	17732 <w_lte_lc_init+0x2a>
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   17780:	2300      	movs	r3, #0
   17782:	4825      	ldr	r0, [pc, #148]	; (17818 <w_lte_lc_init+0x110>)
   17784:	461a      	mov	r2, r3
   17786:	4619      	mov	r1, r3
   17788:	f7ff f862 	bl	16850 <at_cmd_write>
   1778c:	4604      	mov	r4, r0
   1778e:	bb68      	cbnz	r0, 177ec <w_lte_lc_init+0xe4>
	err = at_cmd_write(cscon, NULL, 0, NULL);
   17790:	4602      	mov	r2, r0
   17792:	4603      	mov	r3, r0
   17794:	4601      	mov	r1, r0
   17796:	4821      	ldr	r0, [pc, #132]	; (1781c <w_lte_lc_init+0x114>)
   17798:	f7ff f85a 	bl	16850 <at_cmd_write>
	if (err) {
   1779c:	4602      	mov	r2, r0
   1779e:	b1f8      	cbz	r0, 177e0 <w_lte_lc_init+0xd8>
   177a0:	4b17      	ldr	r3, [pc, #92]	; (17800 <w_lte_lc_init+0xf8>)
   177a2:	4d16      	ldr	r5, [pc, #88]	; (177fc <w_lte_lc_init+0xf4>)
		LOG_WRN("%s failed (%d), RRC notifications are not enabled",
   177a4:	491d      	ldr	r1, [pc, #116]	; (1781c <w_lte_lc_init+0x114>)
   177a6:	1aed      	subs	r5, r5, r3
   177a8:	08ed      	lsrs	r5, r5, #3
   177aa:	01ad      	lsls	r5, r5, #6
   177ac:	f045 0502 	orr.w	r5, r5, #2
   177b0:	462b      	mov	r3, r5
   177b2:	481b      	ldr	r0, [pc, #108]	; (17820 <w_lte_lc_init+0x118>)
   177b4:	f011 f986 	bl	28ac4 <log_2>
		LOG_WRN("%s is supported in nRF9160 modem >= v1.1.0", cscon);
   177b8:	462a      	mov	r2, r5
   177ba:	4918      	ldr	r1, [pc, #96]	; (1781c <w_lte_lc_init+0x114>)
   177bc:	4819      	ldr	r0, [pc, #100]	; (17824 <w_lte_lc_init+0x11c>)
   177be:	f011 f96a 	bl	28a96 <log_1>
		err = at_cmd_write("AT+CGMR", buf, sizeof(buf), NULL);
   177c2:	4623      	mov	r3, r4
   177c4:	2232      	movs	r2, #50	; 0x32
   177c6:	4818      	ldr	r0, [pc, #96]	; (17828 <w_lte_lc_init+0x120>)
   177c8:	a901      	add	r1, sp, #4
   177ca:	f7ff f841 	bl	16850 <at_cmd_write>
		if (err == 0) {
   177ce:	b938      	cbnz	r0, 177e0 <w_lte_lc_init+0xd8>
			LOG_WRN("Current modem firmware version: %s",
   177d0:	a801      	add	r0, sp, #4
   177d2:	f7fa febd 	bl	12550 <log_strdup>
   177d6:	462a      	mov	r2, r5
   177d8:	4601      	mov	r1, r0
   177da:	4814      	ldr	r0, [pc, #80]	; (1782c <w_lte_lc_init+0x124>)
   177dc:	f011 f95b 	bl	28a96 <log_1>
	is_initialized = true;
   177e0:	2301      	movs	r3, #1
   177e2:	7033      	strb	r3, [r6, #0]
	return 0;
   177e4:	e7a7      	b.n	17736 <w_lte_lc_init+0x2e>
		return -EALREADY;
   177e6:	f06f 0477 	mvn.w	r4, #119	; 0x77
   177ea:	e7a4      	b.n	17736 <w_lte_lc_init+0x2e>
		return -EIO;
   177ec:	f06f 0404 	mvn.w	r4, #4
   177f0:	e7a1      	b.n	17736 <w_lte_lc_init+0x2e>
   177f2:	bf00      	nop
   177f4:	2002500b 	.word	0x2002500b
   177f8:	2002500d 	.word	0x2002500d
   177fc:	0002b800 	.word	0x0002b800
   17800:	0002b7b8 	.word	0x0002b7b8
   17804:	0002dcf8 	.word	0x0002dcf8
   17808:	0000d461 	.word	0x0000d461
   1780c:	0002dd25 	.word	0x0002dd25
   17810:	20020a5d 	.word	0x20020a5d
   17814:	0002dd4a 	.word	0x0002dd4a
   17818:	0002de35 	.word	0x0002de35
   1781c:	0002de40 	.word	0x0002de40
   17820:	0002dd6f 	.word	0x0002dd6f
   17824:	0002dda1 	.word	0x0002dda1
   17828:	0002ddcc 	.word	0x0002ddcc
   1782c:	0002ddd4 	.word	0x0002ddd4

00017830 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   17830:	b508      	push	{r3, lr}
	z_impl_log_panic();
   17832:	f7fb f805 	bl	12840 <z_impl_log_panic>
   17836:	4b06      	ldr	r3, [pc, #24]	; (17850 <k_sys_fatal_error_handler+0x20>)
   17838:	4906      	ldr	r1, [pc, #24]	; (17854 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   1783a:	4807      	ldr	r0, [pc, #28]	; (17858 <k_sys_fatal_error_handler+0x28>)
   1783c:	1ac9      	subs	r1, r1, r3
   1783e:	08c9      	lsrs	r1, r1, #3
   17840:	0189      	lsls	r1, r1, #6
   17842:	f041 0101 	orr.w	r1, r1, #1
   17846:	f011 f917 	bl	28a78 <log_0>
	sys_arch_reboot(0);
   1784a:	2000      	movs	r0, #0
   1784c:	f7fc faf4 	bl	13e38 <sys_arch_reboot>

	CODE_UNREACHABLE;
   17850:	0002b7b8 	.word	0x0002b7b8
   17854:	0002b7f0 	.word	0x0002b7f0
   17858:	0002de5f 	.word	0x0002de5f

0001785c <date_time_notify_event.constprop.0>:

static void date_time_notify_event(const struct date_time_evt *evt)
{
	__ASSERT(evt != NULL, "Library event not found");

	if (app_evt_handler != NULL) {
   1785c:	4b02      	ldr	r3, [pc, #8]	; (17868 <date_time_notify_event.constprop.0+0xc>)
   1785e:	681b      	ldr	r3, [r3, #0]
   17860:	b10b      	cbz	r3, 17866 <date_time_notify_event.constprop.0+0xa>
		app_evt_handler(evt);
   17862:	4802      	ldr	r0, [pc, #8]	; (1786c <date_time_notify_event.constprop.0+0x10>)
   17864:	4718      	bx	r3
	}
}
   17866:	4770      	bx	lr
   17868:	20021734 	.word	0x20021734
   1786c:	2002500e 	.word	0x2002500e

00017870 <new_date_time_get>:

	return 0;
}

static void new_date_time_get(void)
{
   17870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (time_aux.last_date_time_update == 0 ||
   17874:	4e73      	ldr	r6, [pc, #460]	; (17a44 <new_date_time_get+0x1d4>)
   17876:	4c74      	ldr	r4, [pc, #464]	; (17a48 <new_date_time_get+0x1d8>)
   17878:	4637      	mov	r7, r6
   1787a:	4b74      	ldr	r3, [pc, #464]	; (17a4c <new_date_time_get+0x1dc>)
{
   1787c:	b095      	sub	sp, #84	; 0x54
   1787e:	1ae4      	subs	r4, r4, r3
   17880:	08e4      	lsrs	r4, r4, #3
   17882:	f04f 33ff 	mov.w	r3, #4294967295
   17886:	f04f 32ff 	mov.w	r2, #4294967295
   1788a:	4871      	ldr	r0, [pc, #452]	; (17a50 <new_date_time_get+0x1e0>)
   1788c:	f009 fd78 	bl	21380 <z_impl_k_sem_take>
	if (time_aux.last_date_time_update == 0 ||
   17890:	68b3      	ldr	r3, [r6, #8]
   17892:	b193      	cbz	r3, 178ba <new_date_time_get+0x4a>
   17894:	e9d6 2300 	ldrd	r2, r3, [r6]
   17898:	4313      	orrs	r3, r2
   1789a:	d00e      	beq.n	178ba <new_date_time_get+0x4a>
	if ((k_uptime_get() - time_aux.last_date_time_update) >
   1789c:	f013 f994 	bl	2abc8 <k_uptime_get>
   178a0:	68b3      	ldr	r3, [r6, #8]
   178a2:	4a6c      	ldr	r2, [pc, #432]	; (17a54 <new_date_time_get+0x1e4>)
   178a4:	1ac0      	subs	r0, r0, r3
   178a6:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
   178aa:	2300      	movs	r3, #0
   178ac:	4282      	cmp	r2, r0
   178ae:	418b      	sbcs	r3, r1
   178b0:	db03      	blt.n	178ba <new_date_time_get+0x4a>
		LOG_DBG("Updating date time UTC...");

		err = current_time_check();
		if (err == 0) {
			LOG_DBG("Time successfully obtained");
			initial_valid_time = true;
   178b2:	2201      	movs	r2, #1
   178b4:	4b68      	ldr	r3, [pc, #416]	; (17a58 <new_date_time_get+0x1e8>)

		LOG_DBG("Not getting time from NTP server");
#endif
		LOG_DBG("Not getting time from any time source");

		evt.type = DATE_TIME_NOT_OBTAINED;
   178b6:	701a      	strb	r2, [r3, #0]
   178b8:	e05a      	b.n	17970 <new_date_time_get+0x100>
	err = at_cmd_write(AT_CMD_MODEM_DATE_TIME, buf, sizeof(buf), NULL);
   178ba:	2300      	movs	r3, #0
   178bc:	2221      	movs	r2, #33	; 0x21
   178be:	4867      	ldr	r0, [pc, #412]	; (17a5c <new_date_time_get+0x1ec>)
   178c0:	a902      	add	r1, sp, #8
   178c2:	f7fe ffc5 	bl	16850 <at_cmd_write>
	if (err) {
   178c6:	2800      	cmp	r0, #0
   178c8:	d155      	bne.n	17976 <new_date_time_get+0x106>
	buf[AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN - 4] = '\0';
   178ca:	2520      	movs	r5, #32
   178cc:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   178d0:	f244 0109 	movw	r1, #16393	; 0x4009
			buf[i] = ' ';
   178d4:	4628      	mov	r0, r5
   178d6:	aa02      	add	r2, sp, #8
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   178d8:	f812 3b01 	ldrb.w	r3, [r2], #1
   178dc:	3b2c      	subs	r3, #44	; 0x2c
   178de:	b2db      	uxtb	r3, r3
   178e0:	2b0e      	cmp	r3, #14
   178e2:	d805      	bhi.n	178f0 <new_date_time_get+0x80>
   178e4:	fa21 f303 	lsr.w	r3, r1, r3
   178e8:	07db      	lsls	r3, r3, #31
			buf[i] = ' ';
   178ea:	bf48      	it	mi
   178ec:	f802 0c01 	strbmi.w	r0, [r2, #-1]
	for (int i = 0; i < AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN; i++) {
   178f0:	3d01      	subs	r5, #1
   178f2:	d1f1      	bne.n	178d8 <new_date_time_get+0x68>
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   178f4:	220a      	movs	r2, #10
	char *ptr_index = &buf[8];
   178f6:	a804      	add	r0, sp, #16
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   178f8:	a901      	add	r1, sp, #4
	char *ptr_index = &buf[8];
   178fa:	9001      	str	r0, [sp, #4]
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   178fc:	f00b fc22 	bl	23144 <strtol>
   17900:	3064      	adds	r0, #100	; 0x64
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   17902:	220a      	movs	r2, #10
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   17904:	9010      	str	r0, [sp, #64]	; 0x40
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   17906:	a901      	add	r1, sp, #4
   17908:	9801      	ldr	r0, [sp, #4]
   1790a:	f00b fc1b 	bl	23144 <strtol>
   1790e:	3801      	subs	r0, #1
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   17910:	220a      	movs	r2, #10
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   17912:	900f      	str	r0, [sp, #60]	; 0x3c
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   17914:	a901      	add	r1, sp, #4
   17916:	9801      	ldr	r0, [sp, #4]
   17918:	f00b fc14 	bl	23144 <strtol>
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   1791c:	220a      	movs	r2, #10
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   1791e:	900e      	str	r0, [sp, #56]	; 0x38
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   17920:	a901      	add	r1, sp, #4
   17922:	9801      	ldr	r0, [sp, #4]
   17924:	f00b fc0e 	bl	23144 <strtol>
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   17928:	220a      	movs	r2, #10
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   1792a:	900d      	str	r0, [sp, #52]	; 0x34
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   1792c:	a901      	add	r1, sp, #4
   1792e:	9801      	ldr	r0, [sp, #4]
   17930:	f00b fc08 	bl	23144 <strtol>
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   17934:	220a      	movs	r2, #10
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   17936:	900c      	str	r0, [sp, #48]	; 0x30
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   17938:	a901      	add	r1, sp, #4
   1793a:	9801      	ldr	r0, [sp, #4]
   1793c:	f00b fc02 	bl	23144 <strtol>
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   17940:	9b10      	ldr	r3, [sp, #64]	; 0x40
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   17942:	900b      	str	r0, [sp, #44]	; 0x2c
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   17944:	2b73      	cmp	r3, #115	; 0x73
   17946:	d016      	beq.n	17976 <new_date_time_get+0x106>
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(&date_time) * 1000;
   17948:	a80b      	add	r0, sp, #44	; 0x2c
   1794a:	f7fa fc5f 	bl	1220c <timeutil_timegm64>
   1794e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   17952:	460a      	mov	r2, r1
   17954:	fba0 0103 	umull	r0, r1, r0, r3
   17958:	fb03 1102 	mla	r1, r3, r2, r1
   1795c:	e9c7 0100 	strd	r0, r1, [r7]
	time_aux.last_date_time_update = k_uptime_get();
   17960:	f013 f932 	bl	2abc8 <k_uptime_get>
			initial_valid_time = true;
   17964:	2201      	movs	r2, #1
   17966:	4b3c      	ldr	r3, [pc, #240]	; (17a58 <new_date_time_get+0x1e8>)
	time_aux.last_date_time_update = k_uptime_get();
   17968:	60b8      	str	r0, [r7, #8]
			initial_valid_time = true;
   1796a:	701a      	strb	r2, [r3, #0]
			evt.type = DATE_TIME_OBTAINED_MODEM;
   1796c:	4b3c      	ldr	r3, [pc, #240]	; (17a60 <new_date_time_get+0x1f0>)
   1796e:	701d      	strb	r5, [r3, #0]
		date_time_notify_event(&evt);
   17970:	f7ff ff74 	bl	1785c <date_time_notify_event.constprop.0>
   17974:	e785      	b.n	17882 <new_date_time_get+0x12>
		if (err == 0) {
   17976:	f04f 0900 	mov.w	r9, #0
   1797a:	4d3a      	ldr	r5, [pc, #232]	; (17a64 <new_date_time_get+0x1f4>)
	hints.ai_family = AF_INET;
   1797c:	f8df 8100 	ldr.w	r8, [pc, #256]	; 17a80 <new_date_time_get+0x210>
	err = sntp_query(&sntp_ctx, timeout, time);
   17980:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 17a78 <new_date_time_get+0x208>
	hints.ai_socktype = SOCK_DGRAM;
   17984:	2302      	movs	r3, #2
   17986:	2201      	movs	r2, #1
   17988:	e9c8 2302 	strd	r2, r3, [r8, #8]
	hints.ai_protocol = 0;
   1798c:	2300      	movs	r3, #0
   1798e:	f8c8 3010 	str.w	r3, [r8, #16]
	if (server->addr == NULL) {
   17992:	686b      	ldr	r3, [r5, #4]
   17994:	b9eb      	cbnz	r3, 179d2 <new_date_time_get+0x162>
	return zsock_getaddrinfo(host, service, hints, res);
   17996:	4934      	ldr	r1, [pc, #208]	; (17a68 <new_date_time_get+0x1f8>)
   17998:	4642      	mov	r2, r8
   1799a:	6828      	ldr	r0, [r5, #0]
   1799c:	1d2b      	adds	r3, r5, #4
   1799e:	f011 fb83 	bl	290a8 <zsock_getaddrinfo>
		if (err) {
   179a2:	4601      	mov	r1, r0
   179a4:	b1a8      	cbz	r0, 179d2 <new_date_time_get+0x162>
			LOG_WRN("getaddrinfo, error: %d", err);
   179a6:	01a2      	lsls	r2, r4, #6
   179a8:	4830      	ldr	r0, [pc, #192]	; (17a6c <new_date_time_get+0x1fc>)
   179aa:	f042 0202 	orr.w	r2, r2, #2
   179ae:	f011 f872 	bl	28a96 <log_1>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   179b2:	f109 0901 	add.w	r9, r9, #1
   179b6:	f1b9 0f05 	cmp.w	r9, #5
   179ba:	f105 0508 	add.w	r5, r5, #8
   179be:	d1e1      	bne.n	17984 <new_date_time_get+0x114>
	LOG_WRN("Not getting time from any NTP server");
   179c0:	01a1      	lsls	r1, r4, #6
   179c2:	482b      	ldr	r0, [pc, #172]	; (17a70 <new_date_time_get+0x200>)
   179c4:	f041 0102 	orr.w	r1, r1, #2
   179c8:	f011 f856 	bl	28a78 <log_0>
		evt.type = DATE_TIME_NOT_OBTAINED;
   179cc:	2203      	movs	r2, #3
   179ce:	4b24      	ldr	r3, [pc, #144]	; (17a60 <new_date_time_get+0x1f0>)
   179d0:	e771      	b.n	178b6 <new_date_time_get+0x46>
	err = sntp_init(&sntp_ctx, server->addr->ai_addr,
   179d2:	686b      	ldr	r3, [r5, #4]
   179d4:	a80b      	add	r0, sp, #44	; 0x2c
   179d6:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   179da:	f011 fb31 	bl	29040 <sntp_init>
	if (err) {
   179de:	4682      	mov	sl, r0
   179e0:	b300      	cbz	r0, 17a24 <new_date_time_get+0x1b4>
		LOG_WRN("sntp_init, error: %d", err);
   179e2:	4601      	mov	r1, r0
   179e4:	01a2      	lsls	r2, r4, #6
   179e6:	4823      	ldr	r0, [pc, #140]	; (17a74 <new_date_time_get+0x204>)
   179e8:	f042 0202 	orr.w	r2, r2, #2
		LOG_WRN("sntp_query, error: %d", err);
   179ec:	f011 f853 	bl	28a96 <log_1>
	sntp_close(&sntp_ctx);
   179f0:	a80b      	add	r0, sp, #44	; 0x2c
   179f2:	f011 fb54 	bl	2909e <sntp_close>
		if (err) {
   179f6:	f1ba 0f00 	cmp.w	sl, #0
   179fa:	d1da      	bne.n	179b2 <new_date_time_get+0x142>
		time_aux.date_time_utc = (int64_t)sntp_time.seconds * 1000;
   179fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   17a00:	4b1d      	ldr	r3, [pc, #116]	; (17a78 <new_date_time_get+0x208>)
   17a02:	681a      	ldr	r2, [r3, #0]
   17a04:	6858      	ldr	r0, [r3, #4]
   17a06:	fba2 2301 	umull	r2, r3, r2, r1
   17a0a:	fb01 3300 	mla	r3, r1, r0, r3
   17a0e:	e9c7 2300 	strd	r2, r3, [r7]
		time_aux.last_date_time_update = k_uptime_get();
   17a12:	f013 f8d9 	bl	2abc8 <k_uptime_get>
			initial_valid_time = true;
   17a16:	2301      	movs	r3, #1
   17a18:	4a0f      	ldr	r2, [pc, #60]	; (17a58 <new_date_time_get+0x1e8>)
		time_aux.last_date_time_update = k_uptime_get();
   17a1a:	60b8      	str	r0, [r7, #8]
			initial_valid_time = true;
   17a1c:	7013      	strb	r3, [r2, #0]
			evt.type = DATE_TIME_OBTAINED_NTP;
   17a1e:	4a10      	ldr	r2, [pc, #64]	; (17a60 <new_date_time_get+0x1f0>)
   17a20:	7013      	strb	r3, [r2, #0]
			date_time_notify_event(&evt);
   17a22:	e7a5      	b.n	17970 <new_date_time_get+0x100>
	err = sntp_query(&sntp_ctx, timeout, time);
   17a24:	465a      	mov	r2, fp
   17a26:	f241 3188 	movw	r1, #5000	; 0x1388
   17a2a:	a80b      	add	r0, sp, #44	; 0x2c
   17a2c:	f7f5 fc74 	bl	d318 <sntp_query>
	if (err) {
   17a30:	4682      	mov	sl, r0
   17a32:	2800      	cmp	r0, #0
   17a34:	d0dc      	beq.n	179f0 <new_date_time_get+0x180>
		LOG_WRN("sntp_query, error: %d", err);
   17a36:	01a2      	lsls	r2, r4, #6
   17a38:	4601      	mov	r1, r0
   17a3a:	f042 0202 	orr.w	r2, r2, #2
   17a3e:	480f      	ldr	r0, [pc, #60]	; (17a7c <new_date_time_get+0x20c>)
   17a40:	e7d4      	b.n	179ec <new_date_time_get+0x17c>
   17a42:	bf00      	nop
   17a44:	20021158 	.word	0x20021158
   17a48:	0002b7e0 	.word	0x0002b7e0
   17a4c:	0002b7b8 	.word	0x0002b7b8
   17a50:	20020c90 	.word	0x20020c90
   17a54:	0036ee80 	.word	0x0036ee80
   17a58:	2002500f 	.word	0x2002500f
   17a5c:	0002de7c 	.word	0x0002de7c
   17a60:	2002500e 	.word	0x2002500e
   17a64:	2002049c 	.word	0x2002049c
   17a68:	0002de85 	.word	0x0002de85
   17a6c:	0002de89 	.word	0x0002de89
   17a70:	0002decb 	.word	0x0002decb
   17a74:	0002dea0 	.word	0x0002dea0
   17a78:	20021148 	.word	0x20021148
   17a7c:	0002deb5 	.word	0x0002deb5
   17a80:	20021738 	.word	0x20021738

00017a84 <date_time_init>:
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
	}
}

static int date_time_init(const struct device *unused)
{
   17a84:	b510      	push	{r4, lr}
	k_delayed_work_init(&time_work, date_time_handler);
   17a86:	4c07      	ldr	r4, [pc, #28]	; (17aa4 <date_time_init+0x20>)
   17a88:	4907      	ldr	r1, [pc, #28]	; (17aa8 <date_time_init+0x24>)
   17a8a:	4620      	mov	r0, r4
   17a8c:	f013 fb4b 	bl	2b126 <k_delayed_work_init>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   17a90:	f04f 62e1 	mov.w	r2, #117964800	; 0x7080000
   17a94:	2300      	movs	r3, #0
   17a96:	4621      	mov	r1, r4
   17a98:	4804      	ldr	r0, [pc, #16]	; (17aac <date_time_init+0x28>)
   17a9a:	f009 fd95 	bl	215c8 <k_delayed_work_submit_to_queue>
	k_delayed_work_submit(&time_work,
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));

	return 0;
}
   17a9e:	2000      	movs	r0, #0
   17aa0:	bd10      	pop	{r4, pc}
   17aa2:	bf00      	nop
   17aa4:	20021168 	.word	0x20021168
   17aa8:	00017ab1 	.word	0x00017ab1
   17aac:	20021328 	.word	0x20021328

00017ab0 <date_time_handler>:
{
   17ab0:	b510      	push	{r4, lr}
	z_impl_k_sem_give(sem);
   17ab2:	4806      	ldr	r0, [pc, #24]	; (17acc <date_time_handler+0x1c>)
   17ab4:	f009 fc3e 	bl	21334 <z_impl_k_sem_give>
}
   17ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17abc:	f04f 62e1 	mov.w	r2, #117964800	; 0x7080000
   17ac0:	2300      	movs	r3, #0
   17ac2:	4903      	ldr	r1, [pc, #12]	; (17ad0 <date_time_handler+0x20>)
   17ac4:	4803      	ldr	r0, [pc, #12]	; (17ad4 <date_time_handler+0x24>)
   17ac6:	f009 bd7f 	b.w	215c8 <k_delayed_work_submit_to_queue>
   17aca:	bf00      	nop
   17acc:	20020c90 	.word	0x20020c90
   17ad0:	20021168 	.word	0x20021168
   17ad4:	20021328 	.word	0x20021328

00017ad8 <date_time_uptime_to_unix_time_ms>:

	return 0;
}

int date_time_uptime_to_unix_time_ms(int64_t *uptime)
{
   17ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t uptime_prev = *uptime;
   17adc:	6803      	ldr	r3, [r0, #0]
{
   17ade:	4604      	mov	r4, r0
	int64_t uptime_prev = *uptime;
   17ae0:	9300      	str	r3, [sp, #0]
   17ae2:	6843      	ldr	r3, [r0, #4]
   17ae4:	9301      	str	r3, [sp, #4]

	if (!initial_valid_time) {
   17ae6:	4b23      	ldr	r3, [pc, #140]	; (17b74 <date_time_uptime_to_unix_time_ms+0x9c>)
   17ae8:	781b      	ldrb	r3, [r3, #0]
   17aea:	b973      	cbnz	r3, 17b0a <date_time_uptime_to_unix_time_ms+0x32>
   17aec:	4b22      	ldr	r3, [pc, #136]	; (17b78 <date_time_uptime_to_unix_time_ms+0xa0>)
   17aee:	4923      	ldr	r1, [pc, #140]	; (17b7c <date_time_uptime_to_unix_time_ms+0xa4>)
		LOG_WRN("Valid time not currently available");
   17af0:	4823      	ldr	r0, [pc, #140]	; (17b80 <date_time_uptime_to_unix_time_ms+0xa8>)
   17af2:	1ac9      	subs	r1, r1, r3
   17af4:	08c9      	lsrs	r1, r1, #3
   17af6:	0189      	lsls	r1, r1, #6
   17af8:	f041 0102 	orr.w	r1, r1, #2
   17afc:	f010 ffbc 	bl	28a78 <log_0>
		return -ENODATA;
   17b00:	f06f 003c 	mvn.w	r0, #60	; 0x3c
		*uptime = uptime_prev;
		return -EINVAL;
	}

	return 0;
}
   17b04:	b003      	add	sp, #12
   17b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*uptime += time_aux.date_time_utc - time_aux.last_date_time_update;
   17b0a:	4d1e      	ldr	r5, [pc, #120]	; (17b84 <date_time_uptime_to_unix_time_ms+0xac>)
   17b0c:	68a9      	ldr	r1, [r5, #8]
   17b0e:	e9d5 6700 	ldrd	r6, r7, [r5]
   17b12:	1a72      	subs	r2, r6, r1
   17b14:	eb67 73e1 	sbc.w	r3, r7, r1, asr #31
   17b18:	9900      	ldr	r1, [sp, #0]
   17b1a:	eb12 0801 	adds.w	r8, r2, r1
   17b1e:	9901      	ldr	r1, [sp, #4]
   17b20:	eb43 0901 	adc.w	r9, r3, r1
   17b24:	e9c0 8900 	strd	r8, r9, [r0]
	    (k_uptime_get() - time_aux.last_date_time_update)) {
   17b28:	f013 f84e 	bl	2abc8 <k_uptime_get>
   17b2c:	68ab      	ldr	r3, [r5, #8]
	if (*uptime > time_aux.date_time_utc +
   17b2e:	1af6      	subs	r6, r6, r3
   17b30:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
   17b34:	eb16 0a00 	adds.w	sl, r6, r0
   17b38:	eb47 0b01 	adc.w	fp, r7, r1
   17b3c:	45c2      	cmp	sl, r8
   17b3e:	eb7b 0309 	sbcs.w	r3, fp, r9
   17b42:	da15      	bge.n	17b70 <date_time_uptime_to_unix_time_ms+0x98>
   17b44:	4b0c      	ldr	r3, [pc, #48]	; (17b78 <date_time_uptime_to_unix_time_ms+0xa0>)
   17b46:	4d0d      	ldr	r5, [pc, #52]	; (17b7c <date_time_uptime_to_unix_time_ms+0xa4>)
		LOG_WRN("Uptime to large or previously converted");
   17b48:	480f      	ldr	r0, [pc, #60]	; (17b88 <date_time_uptime_to_unix_time_ms+0xb0>)
   17b4a:	1aed      	subs	r5, r5, r3
   17b4c:	08ed      	lsrs	r5, r5, #3
   17b4e:	01ad      	lsls	r5, r5, #6
   17b50:	f045 0502 	orr.w	r5, r5, #2
   17b54:	4629      	mov	r1, r5
   17b56:	f010 ff8f 	bl	28a78 <log_0>
		LOG_WRN("Clear variable or set a new uptime");
   17b5a:	480c      	ldr	r0, [pc, #48]	; (17b8c <date_time_uptime_to_unix_time_ms+0xb4>)
   17b5c:	4629      	mov	r1, r5
   17b5e:	f010 ff8b 	bl	28a78 <log_0>
		*uptime = uptime_prev;
   17b62:	9b00      	ldr	r3, [sp, #0]
		return -EINVAL;
   17b64:	f06f 0015 	mvn.w	r0, #21
		*uptime = uptime_prev;
   17b68:	6023      	str	r3, [r4, #0]
   17b6a:	9b01      	ldr	r3, [sp, #4]
   17b6c:	6063      	str	r3, [r4, #4]
		return -EINVAL;
   17b6e:	e7c9      	b.n	17b04 <date_time_uptime_to_unix_time_ms+0x2c>
	return 0;
   17b70:	2000      	movs	r0, #0
   17b72:	e7c7      	b.n	17b04 <date_time_uptime_to_unix_time_ms+0x2c>
   17b74:	2002500f 	.word	0x2002500f
   17b78:	0002b7b8 	.word	0x0002b7b8
   17b7c:	0002b7e0 	.word	0x0002b7e0
   17b80:	0002def0 	.word	0x0002def0
   17b84:	20021158 	.word	0x20021158
   17b88:	0002df13 	.word	0x0002df13
   17b8c:	0002df3b 	.word	0x0002df3b

00017b90 <date_time_now>:

int date_time_now(int64_t *unix_time_ms)
{
   17b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;
	int64_t unix_time_ms_prev = *unix_time_ms;
   17b92:	e9d0 4500 	ldrd	r4, r5, [r0]
{
   17b96:	4606      	mov	r6, r0

	*unix_time_ms = k_uptime_get();
   17b98:	f013 f816 	bl	2abc8 <k_uptime_get>
   17b9c:	e9c6 0100 	strd	r0, r1, [r6]

	err = date_time_uptime_to_unix_time_ms(unix_time_ms);
   17ba0:	4630      	mov	r0, r6
   17ba2:	f7ff ff99 	bl	17ad8 <date_time_uptime_to_unix_time_ms>
	if (err) {
   17ba6:	4607      	mov	r7, r0
   17ba8:	b160      	cbz	r0, 17bc4 <date_time_now+0x34>
   17baa:	4b07      	ldr	r3, [pc, #28]	; (17bc8 <date_time_now+0x38>)
   17bac:	4a07      	ldr	r2, [pc, #28]	; (17bcc <date_time_now+0x3c>)
		LOG_WRN("date_time_uptime_to_unix_time_ms, error: %d", err);
   17bae:	4601      	mov	r1, r0
   17bb0:	1ad2      	subs	r2, r2, r3
   17bb2:	08d2      	lsrs	r2, r2, #3
   17bb4:	0192      	lsls	r2, r2, #6
   17bb6:	4806      	ldr	r0, [pc, #24]	; (17bd0 <date_time_now+0x40>)
   17bb8:	f042 0202 	orr.w	r2, r2, #2
   17bbc:	f010 ff6b 	bl	28a96 <log_1>
		*unix_time_ms = unix_time_ms_prev;
   17bc0:	e9c6 4500 	strd	r4, r5, [r6]
	}

	return err;
}
   17bc4:	4638      	mov	r0, r7
   17bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17bc8:	0002b7b8 	.word	0x0002b7b8
   17bcc:	0002b7e0 	.word	0x0002b7e0
   17bd0:	0002df5e 	.word	0x0002df5e

00017bd4 <date_time_update_async>:

	app_evt_handler = evt_handler;
}

int date_time_update_async(date_time_evt_handler_t evt_handler)
{
   17bd4:	b508      	push	{r3, lr}
	if (evt_handler) {
   17bd6:	b108      	cbz	r0, 17bdc <date_time_update_async+0x8>
		app_evt_handler = evt_handler;
   17bd8:	4b03      	ldr	r3, [pc, #12]	; (17be8 <date_time_update_async+0x14>)
   17bda:	6018      	str	r0, [r3, #0]
   17bdc:	4803      	ldr	r0, [pc, #12]	; (17bec <date_time_update_async+0x18>)
   17bde:	f009 fba9 	bl	21334 <z_impl_k_sem_give>
	}

	k_sem_give(&time_fetch_sem);

	return 0;
}
   17be2:	2000      	movs	r0, #0
   17be4:	bd08      	pop	{r3, pc}
   17be6:	bf00      	nop
   17be8:	20021734 	.word	0x20021734
   17bec:	20020c90 	.word	0x20020c90

00017bf0 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   17bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   17bf4:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   17bf6:	4c21      	ldr	r4, [pc, #132]	; (17c7c <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   17bf8:	4e21      	ldr	r6, [pc, #132]	; (17c80 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   17bfa:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   17bfe:	f8df 9088 	ldr.w	r9, [pc, #136]	; 17c88 <check_ext_api_requests+0x98>
{
   17c02:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   17c04:	45a8      	cmp	r8, r5
   17c06:	d803      	bhi.n	17c10 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   17c08:	2000      	movs	r0, #0
   17c0a:	b005      	add	sp, #20
   17c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   17c10:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17c12:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   17c16:	681f      	ldr	r7, [r3, #0]
   17c18:	ab01      	add	r3, sp, #4
   17c1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   17c1e:	220c      	movs	r2, #12
   17c20:	4619      	mov	r1, r3
   17c22:	4638      	mov	r0, r7
   17c24:	f00a fae4 	bl	221f0 <memcmp>
   17c28:	b990      	cbnz	r0, 17c50 <check_ext_api_requests+0x60>
   17c2a:	b18f      	cbz	r7, 17c50 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   17c2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   17c2e:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   17c30:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   17c32:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   17c34:	4291      	cmp	r1, r2
   17c36:	d10b      	bne.n	17c50 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   17c38:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   17c3a:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   17c3c:	4291      	cmp	r1, r2
   17c3e:	d807      	bhi.n	17c50 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   17c40:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   17c42:	4291      	cmp	r1, r2
   17c44:	d904      	bls.n	17c50 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   17c46:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   17c48:	695b      	ldr	r3, [r3, #20]
   17c4a:	ea32 0303 	bics.w	r3, r2, r3
   17c4e:	d00a      	beq.n	17c66 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   17c50:	6a27      	ldr	r7, [r4, #32]
   17c52:	b167      	cbz	r7, 17c6e <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   17c54:	480b      	ldr	r0, [pc, #44]	; (17c84 <check_ext_api_requests+0x94>)
   17c56:	f010 fbb1 	bl	283bc <printk>
			k_panic();
   17c5a:	4040      	eors	r0, r0
   17c5c:	f380 8811 	msr	BASEPRI, r0
   17c60:	f04f 0004 	mov.w	r0, #4
   17c64:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   17c66:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   17c68:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   17c6a:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   17c6c:	e7ca      	b.n	17c04 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   17c6e:	4648      	mov	r0, r9
   17c70:	f010 fba4 	bl	283bc <printk>
			*ext_api_req->ext_api = NULL;
   17c74:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17c76:	601f      	str	r7, [r3, #0]
   17c78:	e7f5      	b.n	17c66 <check_ext_api_requests+0x76>
   17c7a:	bf00      	nop
   17c7c:	0000c23c 	.word	0x0000c23c
   17c80:	0002b87c 	.word	0x0002b87c
   17c84:	0002dff9 	.word	0x0002dff9
   17c88:	0002e022 	.word	0x0002e022

00017c8c <packet_free_cb>:
   17c8c:	b510      	push	{r4, lr}
   17c8e:	4604      	mov	r4, r0
   17c90:	6800      	ldr	r0, [r0, #0]
   17c92:	f004 fef7 	bl	1ca84 <rpc_logobj_client_data_free>
   17c96:	68a0      	ldr	r0, [r4, #8]
   17c98:	b118      	cbz	r0, 17ca2 <packet_free_cb+0x16>
   17c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17c9e:	f007 bd0b 	b.w	1f6b8 <nrf_free>
   17ca2:	bd10      	pop	{r4, pc}

00017ca4 <logobj_event_handler>:
   17ca4:	b530      	push	{r4, r5, lr}
   17ca6:	4b3b      	ldr	r3, [pc, #236]	; (17d94 <logobj_event_handler+0xf0>)
   17ca8:	b085      	sub	sp, #20
   17caa:	681d      	ldr	r5, [r3, #0]
   17cac:	2d00      	cmp	r5, #0
   17cae:	d04c      	beq.n	17d4a <logobj_event_handler+0xa6>
   17cb0:	f248 0302 	movw	r3, #32770	; 0x8002
   17cb4:	4299      	cmp	r1, r3
   17cb6:	d053      	beq.n	17d60 <logobj_event_handler+0xbc>
   17cb8:	d91c      	bls.n	17cf4 <logobj_event_handler+0x50>
   17cba:	f248 0303 	movw	r3, #32771	; 0x8003
   17cbe:	4299      	cmp	r1, r3
   17cc0:	d05a      	beq.n	17d78 <logobj_event_handler+0xd4>
   17cc2:	f249 0301 	movw	r3, #36865	; 0x9001
   17cc6:	4299      	cmp	r1, r3
   17cc8:	d147      	bne.n	17d5a <logobj_event_handler+0xb6>
   17cca:	2400      	movs	r4, #0
   17ccc:	6843      	ldr	r3, [r0, #4]
   17cce:	6802      	ldr	r2, [r0, #0]
   17cd0:	e9cd 4402 	strd	r4, r4, [sp, #8]
   17cd4:	e9cd 2300 	strd	r2, r3, [sp]
   17cd8:	69e8      	ldr	r0, [r5, #28]
   17cda:	4669      	mov	r1, sp
   17cdc:	6803      	ldr	r3, [r0, #0]
   17cde:	685b      	ldr	r3, [r3, #4]
   17ce0:	4798      	blx	r3
   17ce2:	3001      	adds	r0, #1
   17ce4:	d04e      	beq.n	17d84 <logobj_event_handler+0xe0>
   17ce6:	4620      	mov	r0, r4
   17ce8:	682b      	ldr	r3, [r5, #0]
   17cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17cee:	602b      	str	r3, [r5, #0]
   17cf0:	b005      	add	sp, #20
   17cf2:	bd30      	pop	{r4, r5, pc}
   17cf4:	f248 0301 	movw	r3, #32769	; 0x8001
   17cf8:	4299      	cmp	r1, r3
   17cfa:	d12e      	bne.n	17d5a <logobj_event_handler+0xb6>
   17cfc:	68c3      	ldr	r3, [r0, #12]
   17cfe:	2b00      	cmp	r3, #0
   17d00:	d135      	bne.n	17d6e <logobj_event_handler+0xca>
   17d02:	6828      	ldr	r0, [r5, #0]
   17d04:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   17d08:	d03e      	beq.n	17d88 <logobj_event_handler+0xe4>
   17d0a:	682b      	ldr	r3, [r5, #0]
   17d0c:	b29b      	uxth	r3, r3
   17d0e:	2b01      	cmp	r3, #1
   17d10:	d105      	bne.n	17d1e <logobj_event_handler+0x7a>
   17d12:	682b      	ldr	r3, [r5, #0]
   17d14:	0c1b      	lsrs	r3, r3, #16
   17d16:	041b      	lsls	r3, r3, #16
   17d18:	f043 0302 	orr.w	r3, r3, #2
   17d1c:	602b      	str	r3, [r5, #0]
   17d1e:	4b1e      	ldr	r3, [pc, #120]	; (17d98 <logobj_event_handler+0xf4>)
   17d20:	781a      	ldrb	r2, [r3, #0]
   17d22:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   17d26:	2a00      	cmp	r2, #0
   17d28:	d031      	beq.n	17d8e <logobj_event_handler+0xea>
   17d2a:	4a1c      	ldr	r2, [pc, #112]	; (17d9c <logobj_event_handler+0xf8>)
   17d2c:	7811      	ldrb	r1, [r2, #0]
   17d2e:	b909      	cbnz	r1, 17d34 <logobj_event_handler+0x90>
   17d30:	2101      	movs	r1, #1
   17d32:	7011      	strb	r1, [r2, #0]
   17d34:	2000      	movs	r0, #0
   17d36:	7018      	strb	r0, [r3, #0]
   17d38:	682b      	ldr	r3, [r5, #0]
   17d3a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   17d3e:	602b      	str	r3, [r5, #0]
   17d40:	682b      	ldr	r3, [r5, #0]
   17d42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   17d46:	602b      	str	r3, [r5, #0]
   17d48:	e7d2      	b.n	17cf0 <logobj_event_handler+0x4c>
   17d4a:	6800      	ldr	r0, [r0, #0]
   17d4c:	2800      	cmp	r0, #0
   17d4e:	d0cf      	beq.n	17cf0 <logobj_event_handler+0x4c>
   17d50:	f004 fe98 	bl	1ca84 <rpc_logobj_client_data_free>
   17d54:	4628      	mov	r0, r5
   17d56:	b005      	add	sp, #20
   17d58:	bd30      	pop	{r4, r5, pc}
   17d5a:	2000      	movs	r0, #0
   17d5c:	b005      	add	sp, #20
   17d5e:	bd30      	pop	{r4, r5, pc}
   17d60:	682b      	ldr	r3, [r5, #0]
   17d62:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   17d66:	d00b      	beq.n	17d80 <logobj_event_handler+0xdc>
   17d68:	68c0      	ldr	r0, [r0, #12]
   17d6a:	2800      	cmp	r0, #0
   17d6c:	d0e4      	beq.n	17d38 <logobj_event_handler+0x94>
   17d6e:	230e      	movs	r3, #14
   17d70:	2000      	movs	r0, #0
   17d72:	606b      	str	r3, [r5, #4]
   17d74:	b005      	add	sp, #20
   17d76:	bd30      	pop	{r4, r5, pc}
   17d78:	68c3      	ldr	r3, [r0, #12]
   17d7a:	2b01      	cmp	r3, #1
   17d7c:	d1a5      	bne.n	17cca <logobj_event_handler+0x26>
   17d7e:	e7f6      	b.n	17d6e <logobj_event_handler+0xca>
   17d80:	4618      	mov	r0, r3
   17d82:	e7b5      	b.n	17cf0 <logobj_event_handler+0x4c>
   17d84:	2002      	movs	r0, #2
   17d86:	e7b3      	b.n	17cf0 <logobj_event_handler+0x4c>
   17d88:	230e      	movs	r3, #14
   17d8a:	606b      	str	r3, [r5, #4]
   17d8c:	e7b0      	b.n	17cf0 <logobj_event_handler+0x4c>
   17d8e:	4a03      	ldr	r2, [pc, #12]	; (17d9c <logobj_event_handler+0xf8>)
   17d90:	7011      	strb	r1, [r2, #0]
   17d92:	e7cf      	b.n	17d34 <logobj_event_handler+0x90>
   17d94:	2002178c 	.word	0x2002178c
   17d98:	20025010 	.word	0x20025010
   17d9c:	20025011 	.word	0x20025011

00017da0 <logobj_interface_init>:
   17da0:	2300      	movs	r3, #0
   17da2:	b510      	push	{r4, lr}
   17da4:	4808      	ldr	r0, [pc, #32]	; (17dc8 <logobj_interface_init+0x28>)
   17da6:	4c09      	ldr	r4, [pc, #36]	; (17dcc <logobj_interface_init+0x2c>)
   17da8:	4909      	ldr	r1, [pc, #36]	; (17dd0 <logobj_interface_init+0x30>)
   17daa:	4a0a      	ldr	r2, [pc, #40]	; (17dd4 <logobj_interface_init+0x34>)
   17dac:	7023      	strb	r3, [r4, #0]
   17dae:	6003      	str	r3, [r0, #0]
   17db0:	700b      	strb	r3, [r1, #0]
   17db2:	6013      	str	r3, [r2, #0]
   17db4:	f004 fe2a 	bl	1ca0c <rpc_logobj_client_init>
   17db8:	b918      	cbnz	r0, 17dc2 <logobj_interface_init+0x22>
   17dba:	2201      	movs	r2, #1
   17dbc:	4b06      	ldr	r3, [pc, #24]	; (17dd8 <logobj_interface_init+0x38>)
   17dbe:	701a      	strb	r2, [r3, #0]
   17dc0:	bd10      	pop	{r4, pc}
   17dc2:	f04f 30ff 	mov.w	r0, #4294967295
   17dc6:	bd10      	pop	{r4, pc}
   17dc8:	2002178c 	.word	0x2002178c
   17dcc:	20025011 	.word	0x20025011
   17dd0:	20025010 	.word	0x20025010
   17dd4:	20021788 	.word	0x20021788
   17dd8:	20025012 	.word	0x20025012

00017ddc <logobj_interface_open>:
   17ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17de0:	2400      	movs	r4, #0
   17de2:	4b5b      	ldr	r3, [pc, #364]	; (17f50 <logobj_interface_open+0x174>)
   17de4:	b084      	sub	sp, #16
   17de6:	781b      	ldrb	r3, [r3, #0]
   17de8:	9401      	str	r4, [sp, #4]
   17dea:	2b00      	cmp	r3, #0
   17dec:	f000 809f 	beq.w	17f2e <logobj_interface_open+0x152>
   17df0:	2866      	cmp	r0, #102	; 0x66
   17df2:	4680      	mov	r8, r0
   17df4:	f040 808f 	bne.w	17f16 <logobj_interface_open+0x13a>
   17df8:	2902      	cmp	r1, #2
   17dfa:	4689      	mov	r9, r1
   17dfc:	f040 808b 	bne.w	17f16 <logobj_interface_open+0x13a>
   17e00:	f240 2305 	movw	r3, #517	; 0x205
   17e04:	429a      	cmp	r2, r3
   17e06:	4692      	mov	sl, r2
   17e08:	f040 8085 	bne.w	17f16 <logobj_interface_open+0x13a>
   17e0c:	4f51      	ldr	r7, [pc, #324]	; (17f54 <logobj_interface_open+0x178>)
   17e0e:	683d      	ldr	r5, [r7, #0]
   17e10:	2d00      	cmp	r5, #0
   17e12:	f040 8086 	bne.w	17f22 <logobj_interface_open+0x146>
   17e16:	4a50      	ldr	r2, [pc, #320]	; (17f58 <logobj_interface_open+0x17c>)
   17e18:	a801      	add	r0, sp, #4
   17e1a:	f008 f825 	bl	1fe68 <interface_socket_allocate>
   17e1e:	9b01      	ldr	r3, [sp, #4]
   17e20:	4606      	mov	r6, r0
   17e22:	2b00      	cmp	r3, #0
   17e24:	f000 808d 	beq.w	17f42 <logobj_interface_open+0x166>
   17e28:	4629      	mov	r1, r5
   17e2a:	2204      	movs	r2, #4
   17e2c:	484b      	ldr	r0, [pc, #300]	; (17f5c <logobj_interface_open+0x180>)
   17e2e:	603b      	str	r3, [r7, #0]
   17e30:	f00a fa0c 	bl	2224c <memset>
   17e34:	9c01      	ldr	r4, [sp, #4]
   17e36:	4629      	mov	r1, r5
   17e38:	e9c4 8903 	strd	r8, r9, [r4, #12]
   17e3c:	f8c4 a014 	str.w	sl, [r4, #20]
   17e40:	a802      	add	r0, sp, #8
   17e42:	f004 fde9 	bl	1ca18 <rpc_logobj_client_request_alloc>
   17e46:	2800      	cmp	r0, #0
   17e48:	d142      	bne.n	17ed0 <logobj_interface_open+0xf4>
   17e4a:	2201      	movs	r2, #1
   17e4c:	2104      	movs	r1, #4
   17e4e:	9b02      	ldr	r3, [sp, #8]
   17e50:	4d43      	ldr	r5, [pc, #268]	; (17f60 <logobj_interface_open+0x184>)
   17e52:	7358      	strb	r0, [r3, #13]
   17e54:	7398      	strb	r0, [r3, #14]
   17e56:	73d8      	strb	r0, [r3, #15]
   17e58:	7258      	strb	r0, [r3, #9]
   17e5a:	7298      	strb	r0, [r3, #10]
   17e5c:	72d8      	strb	r0, [r3, #11]
   17e5e:	7219      	strb	r1, [r3, #8]
   17e60:	702a      	strb	r2, [r5, #0]
   17e62:	731a      	strb	r2, [r3, #12]
   17e64:	6822      	ldr	r2, [r4, #0]
   17e66:	4618      	mov	r0, r3
   17e68:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   17e6c:	6022      	str	r2, [r4, #0]
   17e6e:	f247 0101 	movw	r1, #28673	; 0x7001
   17e72:	f004 fde9 	bl	1ca48 <rpc_logobj_client_request_send>
   17e76:	bb68      	cbnz	r0, 17ed4 <logobj_interface_open+0xf8>
   17e78:	6a61      	ldr	r1, [r4, #36]	; 0x24
   17e7a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   17e7e:	2900      	cmp	r1, #0
   17e80:	bf08      	it	eq
   17e82:	f04f 31ff 	moveq.w	r1, #4294967295
   17e86:	ab04      	add	r3, sp, #16
   17e88:	f843 1d04 	str.w	r1, [r3, #-4]!
   17e8c:	4630      	mov	r0, r6
   17e8e:	4611      	mov	r1, r2
   17e90:	f008 f89c 	bl	1ffcc <interface_socket_wait>
   17e94:	4604      	mov	r4, r0
   17e96:	b310      	cbz	r0, 17ede <logobj_interface_open+0x102>
   17e98:	9a01      	ldr	r2, [sp, #4]
   17e9a:	2e00      	cmp	r6, #0
   17e9c:	6813      	ldr	r3, [r2, #0]
   17e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17ea2:	6013      	str	r3, [r2, #0]
   17ea4:	9a01      	ldr	r2, [sp, #4]
   17ea6:	6813      	ldr	r3, [r2, #0]
   17ea8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   17eac:	6013      	str	r3, [r2, #0]
   17eae:	9a01      	ldr	r2, [sp, #4]
   17eb0:	6813      	ldr	r3, [r2, #0]
   17eb2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   17eb6:	6013      	str	r3, [r2, #0]
   17eb8:	da3f      	bge.n	17f3a <logobj_interface_open+0x15e>
   17eba:	2300      	movs	r3, #0
   17ebc:	4620      	mov	r0, r4
   17ebe:	603b      	str	r3, [r7, #0]
   17ec0:	f04f 36ff 	mov.w	r6, #4294967295
   17ec4:	f7fd fc2c 	bl	15720 <bsd_os_errno_set>
   17ec8:	4630      	mov	r0, r6
   17eca:	b004      	add	sp, #16
   17ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17ed0:	240c      	movs	r4, #12
   17ed2:	e7e1      	b.n	17e98 <logobj_interface_open+0xbc>
   17ed4:	9802      	ldr	r0, [sp, #8]
   17ed6:	f004 fdcd 	bl	1ca74 <rpc_logobj_client_message_free>
   17eda:	2405      	movs	r4, #5
   17edc:	e7dc      	b.n	17e98 <logobj_interface_open+0xbc>
   17ede:	4630      	mov	r0, r6
   17ee0:	f008 f8e8 	bl	200b4 <interface_socket_from_handle_get>
   17ee4:	b120      	cbz	r0, 17ef0 <logobj_interface_open+0x114>
   17ee6:	6844      	ldr	r4, [r0, #4]
   17ee8:	b114      	cbz	r4, 17ef0 <logobj_interface_open+0x114>
   17eea:	2300      	movs	r3, #0
   17eec:	6043      	str	r3, [r0, #4]
   17eee:	e7d3      	b.n	17e98 <logobj_interface_open+0xbc>
   17ef0:	4630      	mov	r0, r6
   17ef2:	9a01      	ldr	r2, [sp, #4]
   17ef4:	6813      	ldr	r3, [r2, #0]
   17ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17efa:	6013      	str	r3, [r2, #0]
   17efc:	9a01      	ldr	r2, [sp, #4]
   17efe:	6813      	ldr	r3, [r2, #0]
   17f00:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   17f04:	6013      	str	r3, [r2, #0]
   17f06:	9a01      	ldr	r2, [sp, #4]
   17f08:	6813      	ldr	r3, [r2, #0]
   17f0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   17f0e:	6013      	str	r3, [r2, #0]
   17f10:	b004      	add	sp, #16
   17f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17f16:	2016      	movs	r0, #22
   17f18:	f7fd fc02 	bl	15720 <bsd_os_errno_set>
   17f1c:	f04f 36ff 	mov.w	r6, #4294967295
   17f20:	e7d2      	b.n	17ec8 <logobj_interface_open+0xec>
   17f22:	2001      	movs	r0, #1
   17f24:	f7fd fbfc 	bl	15720 <bsd_os_errno_set>
   17f28:	f04f 36ff 	mov.w	r6, #4294967295
   17f2c:	e7cc      	b.n	17ec8 <logobj_interface_open+0xec>
   17f2e:	2070      	movs	r0, #112	; 0x70
   17f30:	f7fd fbf6 	bl	15720 <bsd_os_errno_set>
   17f34:	f04f 36ff 	mov.w	r6, #4294967295
   17f38:	e7c6      	b.n	17ec8 <logobj_interface_open+0xec>
   17f3a:	4630      	mov	r0, r6
   17f3c:	f007 fff8 	bl	1ff30 <interface_socket_free>
   17f40:	e7bb      	b.n	17eba <logobj_interface_open+0xde>
   17f42:	2018      	movs	r0, #24
   17f44:	f7fd fbec 	bl	15720 <bsd_os_errno_set>
   17f48:	f04f 36ff 	mov.w	r6, #4294967295
   17f4c:	e7bc      	b.n	17ec8 <logobj_interface_open+0xec>
   17f4e:	bf00      	nop
   17f50:	20025012 	.word	0x20025012
   17f54:	2002178c 	.word	0x2002178c
   17f58:	00017c8d 	.word	0x00017c8d
   17f5c:	20021788 	.word	0x20021788
   17f60:	20025010 	.word	0x20025010

00017f64 <logobj_interface_read>:
   17f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17f68:	b087      	sub	sp, #28
   17f6a:	2900      	cmp	r1, #0
   17f6c:	d06b      	beq.n	18046 <logobj_interface_read+0xe2>
   17f6e:	2a00      	cmp	r2, #0
   17f70:	4617      	mov	r7, r2
   17f72:	dd68      	ble.n	18046 <logobj_interface_read+0xe2>
   17f74:	461d      	mov	r5, r3
   17f76:	4680      	mov	r8, r0
   17f78:	460e      	mov	r6, r1
   17f7a:	f008 f89b 	bl	200b4 <interface_socket_from_handle_get>
   17f7e:	4604      	mov	r4, r0
   17f80:	2800      	cmp	r0, #0
   17f82:	d066      	beq.n	18052 <logobj_interface_read+0xee>
   17f84:	bb4d      	cbnz	r5, 17fda <logobj_interface_read+0x76>
   17f86:	69e0      	ldr	r0, [r4, #28]
   17f88:	07aa      	lsls	r2, r5, #30
   17f8a:	6803      	ldr	r3, [r0, #0]
   17f8c:	68db      	ldr	r3, [r3, #12]
   17f8e:	d52d      	bpl.n	17fec <logobj_interface_read+0x88>
   17f90:	4798      	blx	r3
   17f92:	3001      	adds	r0, #1
   17f94:	d047      	beq.n	18026 <logobj_interface_read+0xc2>
   17f96:	6823      	ldr	r3, [r4, #0]
   17f98:	69e0      	ldr	r0, [r4, #28]
   17f9a:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   17f9e:	d044      	beq.n	1802a <logobj_interface_read+0xc6>
   17fa0:	2100      	movs	r1, #0
   17fa2:	6823      	ldr	r3, [r4, #0]
   17fa4:	462a      	mov	r2, r5
   17fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   17faa:	6023      	str	r3, [r4, #0]
   17fac:	e9cd 1104 	strd	r1, r1, [sp, #16]
   17fb0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   17fb4:	6803      	ldr	r3, [r0, #0]
   17fb6:	a902      	add	r1, sp, #8
   17fb8:	689b      	ldr	r3, [r3, #8]
   17fba:	4798      	blx	r3
   17fbc:	4605      	mov	r5, r0
   17fbe:	69e0      	ldr	r0, [r4, #28]
   17fc0:	6803      	ldr	r3, [r0, #0]
   17fc2:	68db      	ldr	r3, [r3, #12]
   17fc4:	4798      	blx	r3
   17fc6:	3001      	adds	r0, #1
   17fc8:	d003      	beq.n	17fd2 <logobj_interface_read+0x6e>
   17fca:	6823      	ldr	r3, [r4, #0]
   17fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17fd0:	6023      	str	r3, [r4, #0]
   17fd2:	4628      	mov	r0, r5
   17fd4:	b007      	add	sp, #28
   17fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17fda:	f015 0f2a 	tst.w	r5, #42	; 0x2a
   17fde:	d1d2      	bne.n	17f86 <logobj_interface_read+0x22>
   17fe0:	202d      	movs	r0, #45	; 0x2d
   17fe2:	f7fd fb9d 	bl	15720 <bsd_os_errno_set>
   17fe6:	f04f 35ff 	mov.w	r5, #4294967295
   17fea:	e7f2      	b.n	17fd2 <logobj_interface_read+0x6e>
   17fec:	6822      	ldr	r2, [r4, #0]
   17fee:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   17ff2:	d1cd      	bne.n	17f90 <logobj_interface_read+0x2c>
   17ff4:	4798      	blx	r3
   17ff6:	1c43      	adds	r3, r0, #1
   17ff8:	d1cd      	bne.n	17f96 <logobj_interface_read+0x32>
   17ffa:	6a22      	ldr	r2, [r4, #32]
   17ffc:	ab06      	add	r3, sp, #24
   17ffe:	2a00      	cmp	r2, #0
   18000:	bf18      	it	ne
   18002:	4610      	movne	r0, r2
   18004:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   18008:	f843 0d14 	str.w	r0, [r3, #-20]!
   1800c:	4611      	mov	r1, r2
   1800e:	4640      	mov	r0, r8
   18010:	f007 ffdc 	bl	1ffcc <interface_socket_wait>
   18014:	b158      	cbz	r0, 1802e <logobj_interface_read+0xca>
   18016:	f04f 35ff 	mov.w	r5, #4294967295
   1801a:	f7fd fb81 	bl	15720 <bsd_os_errno_set>
   1801e:	4628      	mov	r0, r5
   18020:	b007      	add	sp, #28
   18022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18026:	2023      	movs	r0, #35	; 0x23
   18028:	e7f5      	b.n	18016 <logobj_interface_read+0xb2>
   1802a:	461d      	mov	r5, r3
   1802c:	e7c8      	b.n	17fc0 <logobj_interface_read+0x5c>
   1802e:	4640      	mov	r0, r8
   18030:	f008 f840 	bl	200b4 <interface_socket_from_handle_get>
   18034:	4603      	mov	r3, r0
   18036:	2800      	cmp	r0, #0
   18038:	d0ad      	beq.n	17f96 <logobj_interface_read+0x32>
   1803a:	6840      	ldr	r0, [r0, #4]
   1803c:	2800      	cmp	r0, #0
   1803e:	d0aa      	beq.n	17f96 <logobj_interface_read+0x32>
   18040:	f8c3 9004 	str.w	r9, [r3, #4]
   18044:	e7e7      	b.n	18016 <logobj_interface_read+0xb2>
   18046:	2016      	movs	r0, #22
   18048:	f7fd fb6a 	bl	15720 <bsd_os_errno_set>
   1804c:	f04f 35ff 	mov.w	r5, #4294967295
   18050:	e7bf      	b.n	17fd2 <logobj_interface_read+0x6e>
   18052:	2009      	movs	r0, #9
   18054:	f7fd fb64 	bl	15720 <bsd_os_errno_set>
   18058:	f04f 35ff 	mov.w	r5, #4294967295
   1805c:	e7b9      	b.n	17fd2 <logobj_interface_read+0x6e>
   1805e:	bf00      	nop

00018060 <logobj_interface_write>:
   18060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18064:	b082      	sub	sp, #8
   18066:	2900      	cmp	r1, #0
   18068:	d06b      	beq.n	18142 <logobj_interface_write+0xe2>
   1806a:	2a04      	cmp	r2, #4
   1806c:	d169      	bne.n	18142 <logobj_interface_write+0xe2>
   1806e:	461f      	mov	r7, r3
   18070:	4606      	mov	r6, r0
   18072:	460d      	mov	r5, r1
   18074:	f008 f81e 	bl	200b4 <interface_socket_from_handle_get>
   18078:	4604      	mov	r4, r0
   1807a:	2800      	cmp	r0, #0
   1807c:	d074      	beq.n	18168 <logobj_interface_write+0x108>
   1807e:	b1e7      	cbz	r7, 180ba <logobj_interface_write+0x5a>
   18080:	07b8      	lsls	r0, r7, #30
   18082:	d56b      	bpl.n	1815c <logobj_interface_write+0xfc>
   18084:	6823      	ldr	r3, [r4, #0]
   18086:	039b      	lsls	r3, r3, #14
   18088:	d564      	bpl.n	18154 <logobj_interface_write+0xf4>
   1808a:	2700      	movs	r7, #0
   1808c:	6823      	ldr	r3, [r4, #0]
   1808e:	2100      	movs	r1, #0
   18090:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   18094:	6023      	str	r3, [r4, #0]
   18096:	4668      	mov	r0, sp
   18098:	f8d5 8000 	ldr.w	r8, [r5]
   1809c:	f004 fcbc 	bl	1ca18 <rpc_logobj_client_request_alloc>
   180a0:	b198      	cbz	r0, 180ca <logobj_interface_write+0x6a>
   180a2:	200c      	movs	r0, #12
   180a4:	6823      	ldr	r3, [r4, #0]
   180a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   180aa:	6023      	str	r3, [r4, #0]
   180ac:	f7fd fb38 	bl	15720 <bsd_os_errno_set>
   180b0:	f04f 30ff 	mov.w	r0, #4294967295
   180b4:	b002      	add	sp, #8
   180b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   180ba:	6803      	ldr	r3, [r0, #0]
   180bc:	00d9      	lsls	r1, r3, #3
   180be:	d4e1      	bmi.n	18084 <logobj_interface_write+0x24>
   180c0:	6803      	ldr	r3, [r0, #0]
   180c2:	039a      	lsls	r2, r3, #14
   180c4:	d548      	bpl.n	18158 <logobj_interface_write+0xf8>
   180c6:	2701      	movs	r7, #1
   180c8:	e7e0      	b.n	1808c <logobj_interface_write+0x2c>
   180ca:	2504      	movs	r5, #4
   180cc:	9b00      	ldr	r3, [sp, #0]
   180ce:	f247 0103 	movw	r1, #28675	; 0x7003
   180d2:	f8c3 800c 	str.w	r8, [r3, #12]
   180d6:	7258      	strb	r0, [r3, #9]
   180d8:	7298      	strb	r0, [r3, #10]
   180da:	72d8      	strb	r0, [r3, #11]
   180dc:	721d      	strb	r5, [r3, #8]
   180de:	4618      	mov	r0, r3
   180e0:	f004 fcb2 	bl	1ca48 <rpc_logobj_client_request_send>
   180e4:	4680      	mov	r8, r0
   180e6:	bb18      	cbnz	r0, 18130 <logobj_interface_write+0xd0>
   180e8:	b1d7      	cbz	r7, 18120 <logobj_interface_write+0xc0>
   180ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
   180ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   180f0:	2900      	cmp	r1, #0
   180f2:	bf08      	it	eq
   180f4:	f04f 31ff 	moveq.w	r1, #4294967295
   180f8:	ab02      	add	r3, sp, #8
   180fa:	f843 1d04 	str.w	r1, [r3, #-4]!
   180fe:	4630      	mov	r0, r6
   18100:	4611      	mov	r1, r2
   18102:	f007 ff63 	bl	1ffcc <interface_socket_wait>
   18106:	b120      	cbz	r0, 18112 <logobj_interface_write+0xb2>
   18108:	6823      	ldr	r3, [r4, #0]
   1810a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1810e:	6023      	str	r3, [r4, #0]
   18110:	e7cc      	b.n	180ac <logobj_interface_write+0x4c>
   18112:	4630      	mov	r0, r6
   18114:	f007 ffce 	bl	200b4 <interface_socket_from_handle_get>
   18118:	4603      	mov	r3, r0
   1811a:	b108      	cbz	r0, 18120 <logobj_interface_write+0xc0>
   1811c:	6840      	ldr	r0, [r0, #4]
   1811e:	b9b0      	cbnz	r0, 1814e <logobj_interface_write+0xee>
   18120:	4628      	mov	r0, r5
   18122:	6823      	ldr	r3, [r4, #0]
   18124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18128:	6023      	str	r3, [r4, #0]
   1812a:	b002      	add	sp, #8
   1812c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18130:	9800      	ldr	r0, [sp, #0]
   18132:	f004 fc9f 	bl	1ca74 <rpc_logobj_client_message_free>
   18136:	6823      	ldr	r3, [r4, #0]
   18138:	2005      	movs	r0, #5
   1813a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1813e:	6023      	str	r3, [r4, #0]
   18140:	e7b4      	b.n	180ac <logobj_interface_write+0x4c>
   18142:	2016      	movs	r0, #22
   18144:	f7fd faec 	bl	15720 <bsd_os_errno_set>
   18148:	f04f 30ff 	mov.w	r0, #4294967295
   1814c:	e7b2      	b.n	180b4 <logobj_interface_write+0x54>
   1814e:	f8c3 8004 	str.w	r8, [r3, #4]
   18152:	e7d9      	b.n	18108 <logobj_interface_write+0xa8>
   18154:	2073      	movs	r0, #115	; 0x73
   18156:	e7a9      	b.n	180ac <logobj_interface_write+0x4c>
   18158:	2009      	movs	r0, #9
   1815a:	e7a7      	b.n	180ac <logobj_interface_write+0x4c>
   1815c:	202d      	movs	r0, #45	; 0x2d
   1815e:	f7fd fadf 	bl	15720 <bsd_os_errno_set>
   18162:	f04f 30ff 	mov.w	r0, #4294967295
   18166:	e7a5      	b.n	180b4 <logobj_interface_write+0x54>
   18168:	2009      	movs	r0, #9
   1816a:	f7fd fad9 	bl	15720 <bsd_os_errno_set>
   1816e:	f04f 30ff 	mov.w	r0, #4294967295
   18172:	e79f      	b.n	180b4 <logobj_interface_write+0x54>

00018174 <logobj_interface_setopt>:
   18174:	b5f0      	push	{r4, r5, r6, r7, lr}
   18176:	2901      	cmp	r1, #1
   18178:	b085      	sub	sp, #20
   1817a:	d06d      	beq.n	18258 <logobj_interface_setopt+0xe4>
   1817c:	461e      	mov	r6, r3
   1817e:	f240 2305 	movw	r3, #517	; 0x205
   18182:	4299      	cmp	r1, r3
   18184:	f040 80a0 	bne.w	182c8 <logobj_interface_setopt+0x154>
   18188:	4607      	mov	r7, r0
   1818a:	4615      	mov	r5, r2
   1818c:	f007 ff92 	bl	200b4 <interface_socket_from_handle_get>
   18190:	4604      	mov	r4, r0
   18192:	2800      	cmp	r0, #0
   18194:	f000 80c3 	beq.w	1831e <logobj_interface_setopt+0x1aa>
   18198:	2d01      	cmp	r5, #1
   1819a:	d019      	beq.n	181d0 <logobj_interface_setopt+0x5c>
   1819c:	2d02      	cmp	r5, #2
   1819e:	d010      	beq.n	181c2 <logobj_interface_setopt+0x4e>
   181a0:	252a      	movs	r5, #42	; 0x2a
   181a2:	6803      	ldr	r3, [r0, #0]
   181a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   181a8:	6023      	str	r3, [r4, #0]
   181aa:	6823      	ldr	r3, [r4, #0]
   181ac:	4628      	mov	r0, r5
   181ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   181b2:	6023      	str	r3, [r4, #0]
   181b4:	f7fd fab4 	bl	15720 <bsd_os_errno_set>
   181b8:	f04f 35ff 	mov.w	r5, #4294967295
   181bc:	4628      	mov	r0, r5
   181be:	b005      	add	sp, #20
   181c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   181c2:	b116      	cbz	r6, 181ca <logobj_interface_setopt+0x56>
   181c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   181c6:	2b01      	cmp	r3, #1
   181c8:	d04e      	beq.n	18268 <logobj_interface_setopt+0xf4>
   181ca:	6823      	ldr	r3, [r4, #0]
   181cc:	2516      	movs	r5, #22
   181ce:	e7e9      	b.n	181a4 <logobj_interface_setopt+0x30>
   181d0:	2e00      	cmp	r6, #0
   181d2:	d0fa      	beq.n	181ca <logobj_interface_setopt+0x56>
   181d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   181d6:	2b04      	cmp	r3, #4
   181d8:	d1f7      	bne.n	181ca <logobj_interface_setopt+0x56>
   181da:	2100      	movs	r1, #0
   181dc:	a803      	add	r0, sp, #12
   181de:	f004 fc1b 	bl	1ca18 <rpc_logobj_client_request_alloc>
   181e2:	4605      	mov	r5, r0
   181e4:	2800      	cmp	r0, #0
   181e6:	d175      	bne.n	182d4 <logobj_interface_setopt+0x160>
   181e8:	9803      	ldr	r0, [sp, #12]
   181ea:	2208      	movs	r2, #8
   181ec:	4629      	mov	r1, r5
   181ee:	300c      	adds	r0, #12
   181f0:	f00a f82c 	bl	2224c <memset>
   181f4:	9803      	ldr	r0, [sp, #12]
   181f6:	4631      	mov	r1, r6
   181f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   181fa:	300c      	adds	r0, #12
   181fc:	f7f4 fcba 	bl	cb74 <memcpy>
   18200:	2308      	movs	r3, #8
   18202:	9803      	ldr	r0, [sp, #12]
   18204:	f247 0102 	movw	r1, #28674	; 0x7002
   18208:	7203      	strb	r3, [r0, #8]
   1820a:	7245      	strb	r5, [r0, #9]
   1820c:	7285      	strb	r5, [r0, #10]
   1820e:	72c5      	strb	r5, [r0, #11]
   18210:	6823      	ldr	r3, [r4, #0]
   18212:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   18216:	6023      	str	r3, [r4, #0]
   18218:	f004 fc16 	bl	1ca48 <rpc_logobj_client_request_send>
   1821c:	2800      	cmp	r0, #0
   1821e:	d178      	bne.n	18312 <logobj_interface_setopt+0x19e>
   18220:	6a61      	ldr	r1, [r4, #36]	; 0x24
   18222:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   18226:	2900      	cmp	r1, #0
   18228:	bf08      	it	eq
   1822a:	f04f 31ff 	moveq.w	r1, #4294967295
   1822e:	ab04      	add	r3, sp, #16
   18230:	f843 1d08 	str.w	r1, [r3, #-8]!
   18234:	4638      	mov	r0, r7
   18236:	4611      	mov	r1, r2
   18238:	f007 fec8 	bl	1ffcc <interface_socket_wait>
   1823c:	4605      	mov	r5, r0
   1823e:	2800      	cmp	r0, #0
   18240:	d140      	bne.n	182c4 <logobj_interface_setopt+0x150>
   18242:	4638      	mov	r0, r7
   18244:	f007 ff36 	bl	200b4 <interface_socket_from_handle_get>
   18248:	2800      	cmp	r0, #0
   1824a:	d04e      	beq.n	182ea <logobj_interface_setopt+0x176>
   1824c:	6843      	ldr	r3, [r0, #4]
   1824e:	2b00      	cmp	r3, #0
   18250:	d04b      	beq.n	182ea <logobj_interface_setopt+0x176>
   18252:	6045      	str	r5, [r0, #4]
   18254:	461d      	mov	r5, r3
   18256:	e035      	b.n	182c4 <logobj_interface_setopt+0x150>
   18258:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1825a:	9400      	str	r4, [sp, #0]
   1825c:	f007 ff52 	bl	20104 <interface_socket_setopt>
   18260:	4605      	mov	r5, r0
   18262:	4628      	mov	r0, r5
   18264:	b005      	add	sp, #20
   18266:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18268:	2100      	movs	r1, #0
   1826a:	a802      	add	r0, sp, #8
   1826c:	7835      	ldrb	r5, [r6, #0]
   1826e:	f004 fbd3 	bl	1ca18 <rpc_logobj_client_request_alloc>
   18272:	bb78      	cbnz	r0, 182d4 <logobj_interface_setopt+0x160>
   18274:	2d01      	cmp	r5, #1
   18276:	bf08      	it	eq
   18278:	4b2c      	ldreq	r3, [pc, #176]	; (1832c <logobj_interface_setopt+0x1b8>)
   1827a:	f04f 0204 	mov.w	r2, #4
   1827e:	bf08      	it	eq
   18280:	701d      	strbeq	r5, [r3, #0]
   18282:	2300      	movs	r3, #0
   18284:	9802      	ldr	r0, [sp, #8]
   18286:	f247 0101 	movw	r1, #28673	; 0x7001
   1828a:	7243      	strb	r3, [r0, #9]
   1828c:	60c5      	str	r5, [r0, #12]
   1828e:	7283      	strb	r3, [r0, #10]
   18290:	72c3      	strb	r3, [r0, #11]
   18292:	7202      	strb	r2, [r0, #8]
   18294:	6823      	ldr	r3, [r4, #0]
   18296:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1829a:	6023      	str	r3, [r4, #0]
   1829c:	f004 fbd4 	bl	1ca48 <rpc_logobj_client_request_send>
   182a0:	4606      	mov	r6, r0
   182a2:	bb80      	cbnz	r0, 18306 <logobj_interface_setopt+0x192>
   182a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   182a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   182aa:	2900      	cmp	r1, #0
   182ac:	bf08      	it	eq
   182ae:	f04f 31ff 	moveq.w	r1, #4294967295
   182b2:	ab04      	add	r3, sp, #16
   182b4:	f843 1d04 	str.w	r1, [r3, #-4]!
   182b8:	4638      	mov	r0, r7
   182ba:	4611      	mov	r1, r2
   182bc:	f007 fe86 	bl	1ffcc <interface_socket_wait>
   182c0:	4605      	mov	r5, r0
   182c2:	b150      	cbz	r0, 182da <logobj_interface_setopt+0x166>
   182c4:	6823      	ldr	r3, [r4, #0]
   182c6:	e76d      	b.n	181a4 <logobj_interface_setopt+0x30>
   182c8:	202a      	movs	r0, #42	; 0x2a
   182ca:	f7fd fa29 	bl	15720 <bsd_os_errno_set>
   182ce:	f04f 35ff 	mov.w	r5, #4294967295
   182d2:	e773      	b.n	181bc <logobj_interface_setopt+0x48>
   182d4:	6823      	ldr	r3, [r4, #0]
   182d6:	250c      	movs	r5, #12
   182d8:	e764      	b.n	181a4 <logobj_interface_setopt+0x30>
   182da:	4638      	mov	r0, r7
   182dc:	f007 feea 	bl	200b4 <interface_socket_from_handle_get>
   182e0:	b140      	cbz	r0, 182f4 <logobj_interface_setopt+0x180>
   182e2:	6845      	ldr	r5, [r0, #4]
   182e4:	b135      	cbz	r5, 182f4 <logobj_interface_setopt+0x180>
   182e6:	6046      	str	r6, [r0, #4]
   182e8:	e7ec      	b.n	182c4 <logobj_interface_setopt+0x150>
   182ea:	4631      	mov	r1, r6
   182ec:	2204      	movs	r2, #4
   182ee:	4810      	ldr	r0, [pc, #64]	; (18330 <logobj_interface_setopt+0x1bc>)
   182f0:	f7f4 fc40 	bl	cb74 <memcpy>
   182f4:	6823      	ldr	r3, [r4, #0]
   182f6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   182fa:	6023      	str	r3, [r4, #0]
   182fc:	6823      	ldr	r3, [r4, #0]
   182fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   18302:	6023      	str	r3, [r4, #0]
   18304:	e75a      	b.n	181bc <logobj_interface_setopt+0x48>
   18306:	9802      	ldr	r0, [sp, #8]
   18308:	f004 fbb4 	bl	1ca74 <rpc_logobj_client_message_free>
   1830c:	2505      	movs	r5, #5
   1830e:	6823      	ldr	r3, [r4, #0]
   18310:	e748      	b.n	181a4 <logobj_interface_setopt+0x30>
   18312:	9803      	ldr	r0, [sp, #12]
   18314:	f004 fbae 	bl	1ca74 <rpc_logobj_client_message_free>
   18318:	2505      	movs	r5, #5
   1831a:	6823      	ldr	r3, [r4, #0]
   1831c:	e742      	b.n	181a4 <logobj_interface_setopt+0x30>
   1831e:	2009      	movs	r0, #9
   18320:	f7fd f9fe 	bl	15720 <bsd_os_errno_set>
   18324:	f04f 35ff 	mov.w	r5, #4294967295
   18328:	e748      	b.n	181bc <logobj_interface_setopt+0x48>
   1832a:	bf00      	nop
   1832c:	20025010 	.word	0x20025010
   18330:	20021788 	.word	0x20021788

00018334 <logobj_interface_getopt>:
   18334:	b5f0      	push	{r4, r5, r6, r7, lr}
   18336:	2901      	cmp	r1, #1
   18338:	b083      	sub	sp, #12
   1833a:	9e08      	ldr	r6, [sp, #32]
   1833c:	d030      	beq.n	183a0 <logobj_interface_getopt+0x6c>
   1833e:	461f      	mov	r7, r3
   18340:	f240 2305 	movw	r3, #517	; 0x205
   18344:	4299      	cmp	r1, r3
   18346:	d134      	bne.n	183b2 <logobj_interface_getopt+0x7e>
   18348:	4615      	mov	r5, r2
   1834a:	f007 feb3 	bl	200b4 <interface_socket_from_handle_get>
   1834e:	2800      	cmp	r0, #0
   18350:	d037      	beq.n	183c2 <logobj_interface_getopt+0x8e>
   18352:	2d01      	cmp	r5, #1
   18354:	d015      	beq.n	18382 <logobj_interface_getopt+0x4e>
   18356:	2d02      	cmp	r5, #2
   18358:	d10b      	bne.n	18372 <logobj_interface_getopt+0x3e>
   1835a:	b387      	cbz	r7, 183be <logobj_interface_getopt+0x8a>
   1835c:	6833      	ldr	r3, [r6, #0]
   1835e:	b373      	cbz	r3, 183be <logobj_interface_getopt+0x8a>
   18360:	2300      	movs	r3, #0
   18362:	2201      	movs	r2, #1
   18364:	4618      	mov	r0, r3
   18366:	491a      	ldr	r1, [pc, #104]	; (183d0 <logobj_interface_getopt+0x9c>)
   18368:	7809      	ldrb	r1, [r1, #0]
   1836a:	7039      	strb	r1, [r7, #0]
   1836c:	6032      	str	r2, [r6, #0]
   1836e:	b003      	add	sp, #12
   18370:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18372:	2009      	movs	r0, #9
   18374:	f7fd f9d4 	bl	15720 <bsd_os_errno_set>
   18378:	f04f 33ff 	mov.w	r3, #4294967295
   1837c:	4618      	mov	r0, r3
   1837e:	b003      	add	sp, #12
   18380:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18382:	b1e7      	cbz	r7, 183be <logobj_interface_getopt+0x8a>
   18384:	6833      	ldr	r3, [r6, #0]
   18386:	2b03      	cmp	r3, #3
   18388:	d919      	bls.n	183be <logobj_interface_getopt+0x8a>
   1838a:	4638      	mov	r0, r7
   1838c:	2204      	movs	r2, #4
   1838e:	4911      	ldr	r1, [pc, #68]	; (183d4 <logobj_interface_getopt+0xa0>)
   18390:	f7f4 fbf0 	bl	cb74 <memcpy>
   18394:	2300      	movs	r3, #0
   18396:	2204      	movs	r2, #4
   18398:	4618      	mov	r0, r3
   1839a:	6032      	str	r2, [r6, #0]
   1839c:	b003      	add	sp, #12
   1839e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   183a0:	9600      	str	r6, [sp, #0]
   183a2:	f007 fef5 	bl	20190 <interface_socket_getopt>
   183a6:	4603      	mov	r3, r0
   183a8:	2800      	cmp	r0, #0
   183aa:	d1e3      	bne.n	18374 <logobj_interface_getopt+0x40>
   183ac:	4618      	mov	r0, r3
   183ae:	b003      	add	sp, #12
   183b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   183b2:	202a      	movs	r0, #42	; 0x2a
   183b4:	f7fd f9b4 	bl	15720 <bsd_os_errno_set>
   183b8:	f04f 33ff 	mov.w	r3, #4294967295
   183bc:	e7de      	b.n	1837c <logobj_interface_getopt+0x48>
   183be:	2016      	movs	r0, #22
   183c0:	e7d8      	b.n	18374 <logobj_interface_getopt+0x40>
   183c2:	2009      	movs	r0, #9
   183c4:	f7fd f9ac 	bl	15720 <bsd_os_errno_set>
   183c8:	f04f 33ff 	mov.w	r3, #4294967295
   183cc:	e7d6      	b.n	1837c <logobj_interface_getopt+0x48>
   183ce:	bf00      	nop
   183d0:	20025011 	.word	0x20025011
   183d4:	20021788 	.word	0x20021788

000183d8 <logobj_interface_close>:
   183d8:	b510      	push	{r4, lr}
   183da:	4604      	mov	r4, r0
   183dc:	f007 fe6a 	bl	200b4 <interface_socket_from_handle_get>
   183e0:	b138      	cbz	r0, 183f2 <logobj_interface_close+0x1a>
   183e2:	4620      	mov	r0, r4
   183e4:	f007 fda4 	bl	1ff30 <interface_socket_free>
   183e8:	2300      	movs	r3, #0
   183ea:	4a05      	ldr	r2, [pc, #20]	; (18400 <logobj_interface_close+0x28>)
   183ec:	4618      	mov	r0, r3
   183ee:	6013      	str	r3, [r2, #0]
   183f0:	bd10      	pop	{r4, pc}
   183f2:	2009      	movs	r0, #9
   183f4:	f7fd f994 	bl	15720 <bsd_os_errno_set>
   183f8:	f04f 30ff 	mov.w	r0, #4294967295
   183fc:	bd10      	pop	{r4, pc}
   183fe:	bf00      	nop
   18400:	2002178c 	.word	0x2002178c

00018404 <rpc_transport_send>:
   18404:	f000 bed8 	b.w	191b8 <rpc_transport_ipc_send>

00018408 <rpc_transport_rpc_alloc>:
   18408:	f000 bf58 	b.w	192bc <rpc_transport_ipc_tx_rpc_data_alloc>

0001840c <rpc_transport_data_alloc>:
   1840c:	f000 bfbe 	b.w	1938c <rpc_transport_ipc_tx_data_alloc>

00018410 <rpc_transport_rpc_free>:
   18410:	f000 bdb6 	b.w	18f80 <rpc_transport_ipc_msg_free>

00018414 <rpc_transport_data_free>:
   18414:	f000 ba64 	b.w	188e0 <rpc_transport_ipc_data_free>

00018418 <ipc_trace_init>:
   18418:	4b01      	ldr	r3, [pc, #4]	; (18420 <ipc_trace_init+0x8>)
   1841a:	6018      	str	r0, [r3, #0]
   1841c:	4770      	bx	lr
   1841e:	bf00      	nop
   18420:	2002179c 	.word	0x2002179c

00018424 <bsd_os_trace_irq_handler>:
   18424:	b5f0      	push	{r4, r5, r6, r7, lr}
   18426:	4b6e      	ldr	r3, [pc, #440]	; (185e0 <bsd_os_trace_irq_handler+0x1bc>)
   18428:	b083      	sub	sp, #12
   1842a:	781b      	ldrb	r3, [r3, #0]
   1842c:	2b00      	cmp	r3, #0
   1842e:	f000 80d3 	beq.w	185d8 <bsd_os_trace_irq_handler+0x1b4>
   18432:	4b6c      	ldr	r3, [pc, #432]	; (185e4 <bsd_os_trace_irq_handler+0x1c0>)
   18434:	681c      	ldr	r4, [r3, #0]
   18436:	b124      	cbz	r4, 18442 <bsd_os_trace_irq_handler+0x1e>
   18438:	68a3      	ldr	r3, [r4, #8]
   1843a:	6862      	ldr	r2, [r4, #4]
   1843c:	4293      	cmp	r3, r2
   1843e:	f040 808c 	bne.w	1855a <bsd_os_trace_irq_handler+0x136>
   18442:	4b69      	ldr	r3, [pc, #420]	; (185e8 <bsd_os_trace_irq_handler+0x1c4>)
   18444:	681c      	ldr	r4, [r3, #0]
   18446:	b11c      	cbz	r4, 18450 <bsd_os_trace_irq_handler+0x2c>
   18448:	68a3      	ldr	r3, [r4, #8]
   1844a:	6862      	ldr	r2, [r4, #4]
   1844c:	4293      	cmp	r3, r2
   1844e:	d146      	bne.n	184de <bsd_os_trace_irq_handler+0xba>
   18450:	4b66      	ldr	r3, [pc, #408]	; (185ec <bsd_os_trace_irq_handler+0x1c8>)
   18452:	681c      	ldr	r4, [r3, #0]
   18454:	b11c      	cbz	r4, 1845e <bsd_os_trace_irq_handler+0x3a>
   18456:	68a3      	ldr	r3, [r4, #8]
   18458:	6862      	ldr	r2, [r4, #4]
   1845a:	4293      	cmp	r3, r2
   1845c:	d101      	bne.n	18462 <bsd_os_trace_irq_handler+0x3e>
   1845e:	b003      	add	sp, #12
   18460:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18462:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   18466:	f8ad 2000 	strh.w	r2, [sp]
   1846a:	7822      	ldrb	r2, [r4, #0]
   1846c:	466e      	mov	r6, sp
   1846e:	f88d 2004 	strb.w	r2, [sp, #4]
   18472:	6862      	ldr	r2, [r4, #4]
   18474:	2105      	movs	r1, #5
   18476:	4293      	cmp	r3, r2
   18478:	bf2a      	itet	cs
   1847a:	6927      	ldrcs	r7, [r4, #16]
   1847c:	1ad7      	subcc	r7, r2, r3
   1847e:	1aff      	subcs	r7, r7, r3
   18480:	4293      	cmp	r3, r2
   18482:	bf94      	ite	ls
   18484:	2500      	movls	r5, #0
   18486:	68e5      	ldrhi	r5, [r4, #12]
   18488:	b2bf      	uxth	r7, r7
   1848a:	bf88      	it	hi
   1848c:	1b52      	subhi	r2, r2, r5
   1848e:	4630      	mov	r0, r6
   18490:	bf88      	it	hi
   18492:	b295      	uxthhi	r5, r2
   18494:	f8ad 7002 	strh.w	r7, [sp, #2]
   18498:	f011 fede 	bl	2a258 <bsd_os_trace_put>
   1849c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   184a0:	68a0      	ldr	r0, [r4, #8]
   184a2:	f011 fed9 	bl	2a258 <bsd_os_trace_put>
   184a6:	68a3      	ldr	r3, [r4, #8]
   184a8:	6922      	ldr	r2, [r4, #16]
   184aa:	441f      	add	r7, r3
   184ac:	4297      	cmp	r7, r2
   184ae:	bf08      	it	eq
   184b0:	68e3      	ldreq	r3, [r4, #12]
   184b2:	60a7      	str	r7, [r4, #8]
   184b4:	bf08      	it	eq
   184b6:	60a3      	streq	r3, [r4, #8]
   184b8:	2d00      	cmp	r5, #0
   184ba:	d0d0      	beq.n	1845e <bsd_os_trace_irq_handler+0x3a>
   184bc:	2105      	movs	r1, #5
   184be:	4630      	mov	r0, r6
   184c0:	f8ad 5002 	strh.w	r5, [sp, #2]
   184c4:	f011 fec8 	bl	2a258 <bsd_os_trace_put>
   184c8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   184cc:	68e0      	ldr	r0, [r4, #12]
   184ce:	f011 fec3 	bl	2a258 <bsd_os_trace_put>
   184d2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   184d6:	68e3      	ldr	r3, [r4, #12]
   184d8:	4413      	add	r3, r2
   184da:	60a3      	str	r3, [r4, #8]
   184dc:	e7bf      	b.n	1845e <bsd_os_trace_irq_handler+0x3a>
   184de:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   184e2:	f8ad 2000 	strh.w	r2, [sp]
   184e6:	7822      	ldrb	r2, [r4, #0]
   184e8:	466e      	mov	r6, sp
   184ea:	f88d 2004 	strb.w	r2, [sp, #4]
   184ee:	6862      	ldr	r2, [r4, #4]
   184f0:	2105      	movs	r1, #5
   184f2:	4293      	cmp	r3, r2
   184f4:	bf2a      	itet	cs
   184f6:	6927      	ldrcs	r7, [r4, #16]
   184f8:	1ad7      	subcc	r7, r2, r3
   184fa:	1aff      	subcs	r7, r7, r3
   184fc:	4293      	cmp	r3, r2
   184fe:	bf94      	ite	ls
   18500:	2500      	movls	r5, #0
   18502:	68e5      	ldrhi	r5, [r4, #12]
   18504:	b2bf      	uxth	r7, r7
   18506:	bf88      	it	hi
   18508:	1b52      	subhi	r2, r2, r5
   1850a:	4630      	mov	r0, r6
   1850c:	bf88      	it	hi
   1850e:	b295      	uxthhi	r5, r2
   18510:	f8ad 7002 	strh.w	r7, [sp, #2]
   18514:	f011 fea0 	bl	2a258 <bsd_os_trace_put>
   18518:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1851c:	68a0      	ldr	r0, [r4, #8]
   1851e:	f011 fe9b 	bl	2a258 <bsd_os_trace_put>
   18522:	68a3      	ldr	r3, [r4, #8]
   18524:	6922      	ldr	r2, [r4, #16]
   18526:	441f      	add	r7, r3
   18528:	4297      	cmp	r7, r2
   1852a:	bf08      	it	eq
   1852c:	68e3      	ldreq	r3, [r4, #12]
   1852e:	60a7      	str	r7, [r4, #8]
   18530:	bf08      	it	eq
   18532:	60a3      	streq	r3, [r4, #8]
   18534:	2d00      	cmp	r5, #0
   18536:	d08b      	beq.n	18450 <bsd_os_trace_irq_handler+0x2c>
   18538:	2105      	movs	r1, #5
   1853a:	4630      	mov	r0, r6
   1853c:	f8ad 5002 	strh.w	r5, [sp, #2]
   18540:	f011 fe8a 	bl	2a258 <bsd_os_trace_put>
   18544:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18548:	68e0      	ldr	r0, [r4, #12]
   1854a:	f011 fe85 	bl	2a258 <bsd_os_trace_put>
   1854e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   18552:	68e3      	ldr	r3, [r4, #12]
   18554:	4413      	add	r3, r2
   18556:	60a3      	str	r3, [r4, #8]
   18558:	e77a      	b.n	18450 <bsd_os_trace_irq_handler+0x2c>
   1855a:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1855e:	f8ad 2000 	strh.w	r2, [sp]
   18562:	7822      	ldrb	r2, [r4, #0]
   18564:	466e      	mov	r6, sp
   18566:	f88d 2004 	strb.w	r2, [sp, #4]
   1856a:	6862      	ldr	r2, [r4, #4]
   1856c:	2105      	movs	r1, #5
   1856e:	4293      	cmp	r3, r2
   18570:	bf2a      	itet	cs
   18572:	6927      	ldrcs	r7, [r4, #16]
   18574:	1ad7      	subcc	r7, r2, r3
   18576:	1aff      	subcs	r7, r7, r3
   18578:	4293      	cmp	r3, r2
   1857a:	bf94      	ite	ls
   1857c:	2500      	movls	r5, #0
   1857e:	68e5      	ldrhi	r5, [r4, #12]
   18580:	b2bf      	uxth	r7, r7
   18582:	bf88      	it	hi
   18584:	1b52      	subhi	r2, r2, r5
   18586:	4630      	mov	r0, r6
   18588:	bf88      	it	hi
   1858a:	b295      	uxthhi	r5, r2
   1858c:	f8ad 7002 	strh.w	r7, [sp, #2]
   18590:	f011 fe62 	bl	2a258 <bsd_os_trace_put>
   18594:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18598:	68a0      	ldr	r0, [r4, #8]
   1859a:	f011 fe5d 	bl	2a258 <bsd_os_trace_put>
   1859e:	68a3      	ldr	r3, [r4, #8]
   185a0:	6922      	ldr	r2, [r4, #16]
   185a2:	441f      	add	r7, r3
   185a4:	4297      	cmp	r7, r2
   185a6:	bf08      	it	eq
   185a8:	68e3      	ldreq	r3, [r4, #12]
   185aa:	60a7      	str	r7, [r4, #8]
   185ac:	bf08      	it	eq
   185ae:	60a3      	streq	r3, [r4, #8]
   185b0:	2d00      	cmp	r5, #0
   185b2:	f43f af46 	beq.w	18442 <bsd_os_trace_irq_handler+0x1e>
   185b6:	2105      	movs	r1, #5
   185b8:	4630      	mov	r0, r6
   185ba:	f8ad 5002 	strh.w	r5, [sp, #2]
   185be:	f011 fe4b 	bl	2a258 <bsd_os_trace_put>
   185c2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   185c6:	68e0      	ldr	r0, [r4, #12]
   185c8:	f011 fe46 	bl	2a258 <bsd_os_trace_put>
   185cc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   185d0:	68e3      	ldr	r3, [r4, #12]
   185d2:	4413      	add	r3, r2
   185d4:	60a3      	str	r3, [r4, #8]
   185d6:	e734      	b.n	18442 <bsd_os_trace_irq_handler+0x1e>
   185d8:	f7fd fa2e 	bl	15a38 <bsd_os_trace_irq_clear>
   185dc:	e729      	b.n	18432 <bsd_os_trace_irq_handler+0xe>
   185de:	bf00      	nop
   185e0:	20025013 	.word	0x20025013
   185e4:	20021798 	.word	0x20021798
   185e8:	20021790 	.word	0x20021790
   185ec:	20021794 	.word	0x20021794

000185f0 <ipc_trace_handle>:
   185f0:	2200      	movs	r2, #0
   185f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185f6:	4bb2      	ldr	r3, [pc, #712]	; (188c0 <ipc_trace_handle+0x2d0>)
   185f8:	b083      	sub	sp, #12
   185fa:	681b      	ldr	r3, [r3, #0]
   185fc:	6919      	ldr	r1, [r3, #16]
   185fe:	695c      	ldr	r4, [r3, #20]
   18600:	7c18      	ldrb	r0, [r3, #16]
   18602:	741a      	strb	r2, [r3, #16]
   18604:	7c58      	ldrb	r0, [r3, #17]
   18606:	745a      	strb	r2, [r3, #17]
   18608:	7c98      	ldrb	r0, [r3, #18]
   1860a:	749a      	strb	r2, [r3, #18]
   1860c:	7cd8      	ldrb	r0, [r3, #19]
   1860e:	74da      	strb	r2, [r3, #19]
   18610:	7d18      	ldrb	r0, [r3, #20]
   18612:	751a      	strb	r2, [r3, #20]
   18614:	7d58      	ldrb	r0, [r3, #21]
   18616:	755a      	strb	r2, [r3, #21]
   18618:	7d98      	ldrb	r0, [r3, #22]
   1861a:	759a      	strb	r2, [r3, #22]
   1861c:	7dd8      	ldrb	r0, [r3, #23]
   1861e:	75da      	strb	r2, [r3, #23]
   18620:	b1a9      	cbz	r1, 1864e <ipc_trace_handle+0x5e>
   18622:	3901      	subs	r1, #1
   18624:	2903      	cmp	r1, #3
   18626:	d812      	bhi.n	1864e <ipc_trace_handle+0x5e>
   18628:	e8df f001 	tbb	[pc, r1]
   1862c:	1402a97c 	.word	0x1402a97c
   18630:	2501      	movs	r5, #1
   18632:	2003      	movs	r0, #3
   18634:	2200      	movs	r2, #0
   18636:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1863a:	4ca2      	ldr	r4, [pc, #648]	; (188c4 <ipc_trace_handle+0x2d4>)
   1863c:	7025      	strb	r5, [r4, #0]
   1863e:	7a1c      	ldrb	r4, [r3, #8]
   18640:	7218      	strb	r0, [r3, #8]
   18642:	7a58      	ldrb	r0, [r3, #9]
   18644:	725a      	strb	r2, [r3, #9]
   18646:	7a98      	ldrb	r0, [r3, #10]
   18648:	729a      	strb	r2, [r3, #10]
   1864a:	7ada      	ldrb	r2, [r3, #11]
   1864c:	72d9      	strb	r1, [r3, #11]
   1864e:	b003      	add	sp, #12
   18650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18654:	2104      	movs	r1, #4
   18656:	2200      	movs	r2, #0
   18658:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   1865c:	7a1c      	ldrb	r4, [r3, #8]
   1865e:	7219      	strb	r1, [r3, #8]
   18660:	7a59      	ldrb	r1, [r3, #9]
   18662:	725a      	strb	r2, [r3, #9]
   18664:	4997      	ldr	r1, [pc, #604]	; (188c4 <ipc_trace_handle+0x2d4>)
   18666:	7a9c      	ldrb	r4, [r3, #10]
   18668:	729a      	strb	r2, [r3, #10]
   1866a:	7adc      	ldrb	r4, [r3, #11]
   1866c:	72d8      	strb	r0, [r3, #11]
   1866e:	700a      	strb	r2, [r1, #0]
   18670:	780b      	ldrb	r3, [r1, #0]
   18672:	2b00      	cmp	r3, #0
   18674:	f000 809f 	beq.w	187b6 <ipc_trace_handle+0x1c6>
   18678:	4b93      	ldr	r3, [pc, #588]	; (188c8 <ipc_trace_handle+0x2d8>)
   1867a:	681c      	ldr	r4, [r3, #0]
   1867c:	b124      	cbz	r4, 18688 <ipc_trace_handle+0x98>
   1867e:	68a3      	ldr	r3, [r4, #8]
   18680:	6862      	ldr	r2, [r4, #4]
   18682:	4293      	cmp	r3, r2
   18684:	f040 80d9 	bne.w	1883a <ipc_trace_handle+0x24a>
   18688:	4b90      	ldr	r3, [pc, #576]	; (188cc <ipc_trace_handle+0x2dc>)
   1868a:	681c      	ldr	r4, [r3, #0]
   1868c:	b124      	cbz	r4, 18698 <ipc_trace_handle+0xa8>
   1868e:	68a3      	ldr	r3, [r4, #8]
   18690:	6862      	ldr	r2, [r4, #4]
   18692:	4293      	cmp	r3, r2
   18694:	f040 8092 	bne.w	187bc <ipc_trace_handle+0x1cc>
   18698:	4b8d      	ldr	r3, [pc, #564]	; (188d0 <ipc_trace_handle+0x2e0>)
   1869a:	681c      	ldr	r4, [r3, #0]
   1869c:	2c00      	cmp	r4, #0
   1869e:	d0d6      	beq.n	1864e <ipc_trace_handle+0x5e>
   186a0:	68a3      	ldr	r3, [r4, #8]
   186a2:	6862      	ldr	r2, [r4, #4]
   186a4:	4293      	cmp	r3, r2
   186a6:	d0d2      	beq.n	1864e <ipc_trace_handle+0x5e>
   186a8:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   186ac:	f8ad 2000 	strh.w	r2, [sp]
   186b0:	7822      	ldrb	r2, [r4, #0]
   186b2:	466e      	mov	r6, sp
   186b4:	f88d 2004 	strb.w	r2, [sp, #4]
   186b8:	6862      	ldr	r2, [r4, #4]
   186ba:	2105      	movs	r1, #5
   186bc:	4293      	cmp	r3, r2
   186be:	bf2a      	itet	cs
   186c0:	6927      	ldrcs	r7, [r4, #16]
   186c2:	1ad7      	subcc	r7, r2, r3
   186c4:	1aff      	subcs	r7, r7, r3
   186c6:	4293      	cmp	r3, r2
   186c8:	bf94      	ite	ls
   186ca:	2500      	movls	r5, #0
   186cc:	68e5      	ldrhi	r5, [r4, #12]
   186ce:	b2bf      	uxth	r7, r7
   186d0:	bf88      	it	hi
   186d2:	1b52      	subhi	r2, r2, r5
   186d4:	4630      	mov	r0, r6
   186d6:	bf88      	it	hi
   186d8:	b295      	uxthhi	r5, r2
   186da:	f8ad 7002 	strh.w	r7, [sp, #2]
   186de:	f011 fdbb 	bl	2a258 <bsd_os_trace_put>
   186e2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   186e6:	68a0      	ldr	r0, [r4, #8]
   186e8:	f011 fdb6 	bl	2a258 <bsd_os_trace_put>
   186ec:	68a3      	ldr	r3, [r4, #8]
   186ee:	6922      	ldr	r2, [r4, #16]
   186f0:	441f      	add	r7, r3
   186f2:	4297      	cmp	r7, r2
   186f4:	bf08      	it	eq
   186f6:	68e3      	ldreq	r3, [r4, #12]
   186f8:	60a7      	str	r7, [r4, #8]
   186fa:	bf08      	it	eq
   186fc:	60a3      	streq	r3, [r4, #8]
   186fe:	2d00      	cmp	r5, #0
   18700:	d0a5      	beq.n	1864e <ipc_trace_handle+0x5e>
   18702:	2105      	movs	r1, #5
   18704:	4630      	mov	r0, r6
   18706:	f8ad 5002 	strh.w	r5, [sp, #2]
   1870a:	f011 fda5 	bl	2a258 <bsd_os_trace_put>
   1870e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18712:	68e0      	ldr	r0, [r4, #12]
   18714:	f011 fda0 	bl	2a258 <bsd_os_trace_put>
   18718:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1871c:	68e3      	ldr	r3, [r4, #12]
   1871e:	4413      	add	r3, r2
   18720:	60a3      	str	r3, [r4, #8]
   18722:	e794      	b.n	1864e <ipc_trace_handle+0x5e>
   18724:	4a67      	ldr	r2, [pc, #412]	; (188c4 <ipc_trace_handle+0x2d4>)
   18726:	7811      	ldrb	r1, [r2, #0]
   18728:	b109      	cbz	r1, 1872e <ipc_trace_handle+0x13e>
   1872a:	2100      	movs	r1, #0
   1872c:	7011      	strb	r1, [r2, #0]
   1872e:	68a5      	ldr	r5, [r4, #8]
   18730:	2d00      	cmp	r5, #0
   18732:	d03b      	beq.n	187ac <ipc_trace_handle+0x1bc>
   18734:	f04f 0c00 	mov.w	ip, #0
   18738:	f8df a190 	ldr.w	sl, [pc, #400]	; 188cc <ipc_trace_handle+0x2dc>
   1873c:	f8df b188 	ldr.w	fp, [pc, #392]	; 188c8 <ipc_trace_handle+0x2d8>
   18740:	4963      	ldr	r1, [pc, #396]	; (188d0 <ipc_trace_handle+0x2e0>)
   18742:	46e1      	mov	r9, ip
   18744:	4666      	mov	r6, ip
   18746:	4662      	mov	r2, ip
   18748:	f8d1 e000 	ldr.w	lr, [r1]
   1874c:	f8da 8000 	ldr.w	r8, [sl]
   18750:	f8db 7000 	ldr.w	r7, [fp]
   18754:	e008      	b.n	18768 <ipc_trace_handle+0x178>
   18756:	2963      	cmp	r1, #99	; 0x63
   18758:	d016      	beq.n	18788 <ipc_trace_handle+0x198>
   1875a:	2961      	cmp	r1, #97	; 0x61
   1875c:	bf04      	itt	eq
   1875e:	4607      	moveq	r7, r0
   18760:	2601      	moveq	r6, #1
   18762:	3201      	adds	r2, #1
   18764:	42aa      	cmp	r2, r5
   18766:	d013      	beq.n	18790 <ipc_trace_handle+0x1a0>
   18768:	1c91      	adds	r1, r2, #2
   1876a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1876e:	6848      	ldr	r0, [r1, #4]
   18770:	7801      	ldrb	r1, [r0, #0]
   18772:	2962      	cmp	r1, #98	; 0x62
   18774:	d1ef      	bne.n	18756 <ipc_trace_handle+0x166>
   18776:	4680      	mov	r8, r0
   18778:	f04f 0901 	mov.w	r9, #1
   1877c:	e7f1      	b.n	18762 <ipc_trace_handle+0x172>
   1877e:	f7fd f953 	bl	15a28 <bsd_os_trace_irq_set>
   18782:	b003      	add	sp, #12
   18784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18788:	4686      	mov	lr, r0
   1878a:	f04f 0c01 	mov.w	ip, #1
   1878e:	e7e8      	b.n	18762 <ipc_trace_handle+0x172>
   18790:	2e00      	cmp	r6, #0
   18792:	f040 8091 	bne.w	188b8 <ipc_trace_handle+0x2c8>
   18796:	f1b9 0f00 	cmp.w	r9, #0
   1879a:	d001      	beq.n	187a0 <ipc_trace_handle+0x1b0>
   1879c:	f8ca 8000 	str.w	r8, [sl]
   187a0:	f1bc 0f00 	cmp.w	ip, #0
   187a4:	d002      	beq.n	187ac <ipc_trace_handle+0x1bc>
   187a6:	4a4a      	ldr	r2, [pc, #296]	; (188d0 <ipc_trace_handle+0x2e0>)
   187a8:	f8c2 e000 	str.w	lr, [r2]
   187ac:	2001      	movs	r0, #1
   187ae:	2200      	movs	r2, #0
   187b0:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   187b4:	e743      	b.n	1863e <ipc_trace_handle+0x4e>
   187b6:	f7fd f93f 	bl	15a38 <bsd_os_trace_irq_clear>
   187ba:	e75d      	b.n	18678 <ipc_trace_handle+0x88>
   187bc:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   187c0:	f8ad 2000 	strh.w	r2, [sp]
   187c4:	7822      	ldrb	r2, [r4, #0]
   187c6:	466e      	mov	r6, sp
   187c8:	f88d 2004 	strb.w	r2, [sp, #4]
   187cc:	6862      	ldr	r2, [r4, #4]
   187ce:	2105      	movs	r1, #5
   187d0:	4293      	cmp	r3, r2
   187d2:	bf2a      	itet	cs
   187d4:	6927      	ldrcs	r7, [r4, #16]
   187d6:	1ad7      	subcc	r7, r2, r3
   187d8:	1aff      	subcs	r7, r7, r3
   187da:	4293      	cmp	r3, r2
   187dc:	bf94      	ite	ls
   187de:	2500      	movls	r5, #0
   187e0:	68e5      	ldrhi	r5, [r4, #12]
   187e2:	b2bf      	uxth	r7, r7
   187e4:	bf88      	it	hi
   187e6:	1b52      	subhi	r2, r2, r5
   187e8:	4630      	mov	r0, r6
   187ea:	bf88      	it	hi
   187ec:	b295      	uxthhi	r5, r2
   187ee:	f8ad 7002 	strh.w	r7, [sp, #2]
   187f2:	f011 fd31 	bl	2a258 <bsd_os_trace_put>
   187f6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   187fa:	68a0      	ldr	r0, [r4, #8]
   187fc:	f011 fd2c 	bl	2a258 <bsd_os_trace_put>
   18800:	68a3      	ldr	r3, [r4, #8]
   18802:	6922      	ldr	r2, [r4, #16]
   18804:	441f      	add	r7, r3
   18806:	4297      	cmp	r7, r2
   18808:	bf08      	it	eq
   1880a:	68e3      	ldreq	r3, [r4, #12]
   1880c:	60a7      	str	r7, [r4, #8]
   1880e:	bf08      	it	eq
   18810:	60a3      	streq	r3, [r4, #8]
   18812:	2d00      	cmp	r5, #0
   18814:	f43f af40 	beq.w	18698 <ipc_trace_handle+0xa8>
   18818:	2105      	movs	r1, #5
   1881a:	4630      	mov	r0, r6
   1881c:	f8ad 5002 	strh.w	r5, [sp, #2]
   18820:	f011 fd1a 	bl	2a258 <bsd_os_trace_put>
   18824:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18828:	68e0      	ldr	r0, [r4, #12]
   1882a:	f011 fd15 	bl	2a258 <bsd_os_trace_put>
   1882e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   18832:	68e3      	ldr	r3, [r4, #12]
   18834:	4413      	add	r3, r2
   18836:	60a3      	str	r3, [r4, #8]
   18838:	e72e      	b.n	18698 <ipc_trace_handle+0xa8>
   1883a:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1883e:	f8ad 2000 	strh.w	r2, [sp]
   18842:	7822      	ldrb	r2, [r4, #0]
   18844:	466e      	mov	r6, sp
   18846:	f88d 2004 	strb.w	r2, [sp, #4]
   1884a:	6862      	ldr	r2, [r4, #4]
   1884c:	2105      	movs	r1, #5
   1884e:	4293      	cmp	r3, r2
   18850:	bf2a      	itet	cs
   18852:	6927      	ldrcs	r7, [r4, #16]
   18854:	1ad7      	subcc	r7, r2, r3
   18856:	1aff      	subcs	r7, r7, r3
   18858:	4293      	cmp	r3, r2
   1885a:	bf94      	ite	ls
   1885c:	2500      	movls	r5, #0
   1885e:	68e5      	ldrhi	r5, [r4, #12]
   18860:	b2bf      	uxth	r7, r7
   18862:	bf88      	it	hi
   18864:	1b52      	subhi	r2, r2, r5
   18866:	4630      	mov	r0, r6
   18868:	bf88      	it	hi
   1886a:	b295      	uxthhi	r5, r2
   1886c:	f8ad 7002 	strh.w	r7, [sp, #2]
   18870:	f011 fcf2 	bl	2a258 <bsd_os_trace_put>
   18874:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18878:	68a0      	ldr	r0, [r4, #8]
   1887a:	f011 fced 	bl	2a258 <bsd_os_trace_put>
   1887e:	68a3      	ldr	r3, [r4, #8]
   18880:	6922      	ldr	r2, [r4, #16]
   18882:	441f      	add	r7, r3
   18884:	4297      	cmp	r7, r2
   18886:	bf08      	it	eq
   18888:	68e3      	ldreq	r3, [r4, #12]
   1888a:	60a7      	str	r7, [r4, #8]
   1888c:	bf08      	it	eq
   1888e:	60a3      	streq	r3, [r4, #8]
   18890:	2d00      	cmp	r5, #0
   18892:	f43f aef9 	beq.w	18688 <ipc_trace_handle+0x98>
   18896:	2105      	movs	r1, #5
   18898:	4630      	mov	r0, r6
   1889a:	f8ad 5002 	strh.w	r5, [sp, #2]
   1889e:	f011 fcdb 	bl	2a258 <bsd_os_trace_put>
   188a2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   188a6:	68e0      	ldr	r0, [r4, #12]
   188a8:	f011 fcd6 	bl	2a258 <bsd_os_trace_put>
   188ac:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   188b0:	68e3      	ldr	r3, [r4, #12]
   188b2:	4413      	add	r3, r2
   188b4:	60a3      	str	r3, [r4, #8]
   188b6:	e6e7      	b.n	18688 <ipc_trace_handle+0x98>
   188b8:	f8cb 7000 	str.w	r7, [fp]
   188bc:	e76b      	b.n	18796 <ipc_trace_handle+0x1a6>
   188be:	bf00      	nop
   188c0:	2002179c 	.word	0x2002179c
   188c4:	20025013 	.word	0x20025013
   188c8:	20021798 	.word	0x20021798
   188cc:	20021790 	.word	0x20021790
   188d0:	20021794 	.word	0x20021794

000188d4 <rpc_trace_coredump_in_progress>:
   188d4:	4b01      	ldr	r3, [pc, #4]	; (188dc <rpc_trace_coredump_in_progress+0x8>)
   188d6:	7818      	ldrb	r0, [r3, #0]
   188d8:	4770      	bx	lr
   188da:	bf00      	nop
   188dc:	20025013 	.word	0x20025013

000188e0 <rpc_transport_ipc_data_free>:
   188e0:	b510      	push	{r4, lr}
   188e2:	4b0e      	ldr	r3, [pc, #56]	; (1891c <rpc_transport_ipc_data_free+0x3c>)
   188e4:	4604      	mov	r4, r0
   188e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   188ea:	4413      	add	r3, r2
   188ec:	4298      	cmp	r0, r3
   188ee:	d20d      	bcs.n	1890c <rpc_transport_ipc_data_free+0x2c>
   188f0:	4282      	cmp	r2, r0
   188f2:	d80b      	bhi.n	1890c <rpc_transport_ipc_data_free+0x2c>
   188f4:	f000 fd1a 	bl	1932c <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   188f8:	b158      	cbz	r0, 18912 <rpc_transport_ipc_data_free+0x32>
   188fa:	4a09      	ldr	r2, [pc, #36]	; (18920 <rpc_transport_ipc_data_free+0x40>)
   188fc:	6084      	str	r4, [r0, #8]
   188fe:	6002      	str	r2, [r0, #0]
   18900:	f7ff fd80 	bl	18404 <rpc_transport_send>
   18904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18908:	f7fd b87e 	b.w	15a08 <bsd_os_application_irq_set>
   1890c:	4620      	mov	r0, r4
   1890e:	f006 ff99 	bl	1f844 <nrf_shared_free>
   18912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18916:	f7fd b877 	b.w	15a08 <bsd_os_application_irq_set>
   1891a:	bf00      	nop
   1891c:	200217a0 	.word	0x200217a0
   18920:	00020001 	.word	0x00020001

00018924 <rpc_transport_ipc_init>:
   18924:	b188      	cbz	r0, 1894a <rpc_transport_ipc_init+0x26>
   18926:	b510      	push	{r4, lr}
   18928:	b082      	sub	sp, #8
   1892a:	aa01      	add	r2, sp, #4
   1892c:	4669      	mov	r1, sp
   1892e:	4604      	mov	r4, r0
   18930:	f000 fb58 	bl	18fe4 <rpc_transport_ipc_tx_init>
   18934:	4602      	mov	r2, r0
   18936:	b148      	cbz	r0, 1894c <rpc_transport_ipc_init+0x28>
   18938:	4b12      	ldr	r3, [pc, #72]	; (18984 <rpc_transport_ipc_init+0x60>)
   1893a:	3428      	adds	r4, #40	; 0x28
   1893c:	e894 0003 	ldmia.w	r4, {r0, r1}
   18940:	e883 0003 	stmia.w	r3, {r0, r1}
   18944:	4610      	mov	r0, r2
   18946:	b002      	add	sp, #8
   18948:	bd10      	pop	{r4, pc}
   1894a:	e7fe      	b.n	1894a <rpc_transport_ipc_init+0x26>
   1894c:	e9dd 1200 	ldrd	r1, r2, [sp]
   18950:	4620      	mov	r0, r4
   18952:	f000 f9ef 	bl	18d34 <rpc_transport_ipc_rx_init>
   18956:	4602      	mov	r2, r0
   18958:	4b0a      	ldr	r3, [pc, #40]	; (18984 <rpc_transport_ipc_init+0x60>)
   1895a:	f104 0128 	add.w	r1, r4, #40	; 0x28
   1895e:	c903      	ldmia	r1, {r0, r1}
   18960:	e883 0003 	stmia.w	r3, {r0, r1}
   18964:	2a00      	cmp	r2, #0
   18966:	d1ed      	bne.n	18944 <rpc_transport_ipc_init+0x20>
   18968:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1896c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1896e:	4906      	ldr	r1, [pc, #24]	; (18988 <rpc_transport_ipc_init+0x64>)
   18970:	015b      	lsls	r3, r3, #5
   18972:	b2db      	uxtb	r3, r3
   18974:	f881 332a 	strb.w	r3, [r1, #810]	; 0x32a
   18978:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   1897c:	6048      	str	r0, [r1, #4]
   1897e:	4610      	mov	r0, r2
   18980:	b002      	add	sp, #8
   18982:	bd10      	pop	{r4, pc}
   18984:	200217a0 	.word	0x200217a0
   18988:	e000e100 	.word	0xe000e100

0001898c <rpc_transport_ipc_shutdown>:
   1898c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18990:	b08c      	sub	sp, #48	; 0x30
   18992:	f000 fd05 	bl	193a0 <rpc_transport_ipc_tx_suspend>
   18996:	2200      	movs	r2, #0
   18998:	2010      	movs	r0, #16
   1899a:	4b31      	ldr	r3, [pc, #196]	; (18a60 <rpc_transport_ipc_shutdown+0xd4>)
   1899c:	f04f 0c01 	mov.w	ip, #1
   189a0:	4c30      	ldr	r4, [pc, #192]	; (18a64 <rpc_transport_ipc_shutdown+0xd8>)
   189a2:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   189a6:	6821      	ldr	r1, [r4, #0]
   189a8:	2704      	movs	r7, #4
   189aa:	910a      	str	r1, [sp, #40]	; 0x28
   189ac:	492e      	ldr	r1, [pc, #184]	; (18a68 <rpc_transport_ipc_shutdown+0xdc>)
   189ae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   189b0:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   189b4:	680d      	ldr	r5, [r1, #0]
   189b6:	950b      	str	r5, [sp, #44]	; 0x2c
   189b8:	4d2c      	ldr	r5, [pc, #176]	; (18a6c <rpc_transport_ipc_shutdown+0xe0>)
   189ba:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   189bc:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   189c0:	682d      	ldr	r5, [r5, #0]
   189c2:	2640      	movs	r6, #64	; 0x40
   189c4:	9509      	str	r5, [sp, #36]	; 0x24
   189c6:	4d2a      	ldr	r5, [pc, #168]	; (18a70 <rpc_transport_ipc_shutdown+0xe4>)
   189c8:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   189cc:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   189d0:	f8d5 e000 	ldr.w	lr, [r5]
   189d4:	2580      	movs	r5, #128	; 0x80
   189d6:	f8cd e020 	str.w	lr, [sp, #32]
   189da:	f8dd e020 	ldr.w	lr, [sp, #32]
   189de:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   189e2:	f8d4 e000 	ldr.w	lr, [r4]
   189e6:	2405      	movs	r4, #5
   189e8:	f8cd e01c 	str.w	lr, [sp, #28]
   189ec:	f8df e08c 	ldr.w	lr, [pc, #140]	; 18a7c <rpc_transport_ipc_shutdown+0xf0>
   189f0:	f8dd 801c 	ldr.w	r8, [sp, #28]
   189f4:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   189f8:	f8de e000 	ldr.w	lr, [lr]
   189fc:	f8cd e018 	str.w	lr, [sp, #24]
   18a00:	f8df e07c 	ldr.w	lr, [pc, #124]	; 18a80 <rpc_transport_ipc_shutdown+0xf4>
   18a04:	f8dd 8018 	ldr.w	r8, [sp, #24]
   18a08:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   18a0c:	f8de e000 	ldr.w	lr, [lr]
   18a10:	f8cd e014 	str.w	lr, [sp, #20]
   18a14:	f8dd e014 	ldr.w	lr, [sp, #20]
   18a18:	f8c3 c308 	str.w	ip, [r3, #776]	; 0x308
   18a1c:	f8d1 c000 	ldr.w	ip, [r1]
   18a20:	f8cd c010 	str.w	ip, [sp, #16]
   18a24:	f8dd c010 	ldr.w	ip, [sp, #16]
   18a28:	f8c3 7308 	str.w	r7, [r3, #776]	; 0x308
   18a2c:	680f      	ldr	r7, [r1, #0]
   18a2e:	9703      	str	r7, [sp, #12]
   18a30:	9f03      	ldr	r7, [sp, #12]
   18a32:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   18a36:	6808      	ldr	r0, [r1, #0]
   18a38:	9002      	str	r0, [sp, #8]
   18a3a:	9802      	ldr	r0, [sp, #8]
   18a3c:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   18a40:	680e      	ldr	r6, [r1, #0]
   18a42:	480c      	ldr	r0, [pc, #48]	; (18a74 <rpc_transport_ipc_shutdown+0xe8>)
   18a44:	9601      	str	r6, [sp, #4]
   18a46:	9e01      	ldr	r6, [sp, #4]
   18a48:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   18a4c:	6809      	ldr	r1, [r1, #0]
   18a4e:	4b0a      	ldr	r3, [pc, #40]	; (18a78 <rpc_transport_ipc_shutdown+0xec>)
   18a50:	9100      	str	r1, [sp, #0]
   18a52:	9900      	ldr	r1, [sp, #0]
   18a54:	8002      	strh	r2, [r0, #0]
   18a56:	601c      	str	r4, [r3, #0]
   18a58:	b00c      	add	sp, #48	; 0x30
   18a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18a5e:	bf00      	nop
   18a60:	4002a000 	.word	0x4002a000
   18a64:	4002a5a0 	.word	0x4002a5a0
   18a68:	4002a308 	.word	0x4002a308
   18a6c:	4002a590 	.word	0x4002a590
   18a70:	4002a598 	.word	0x4002a598
   18a74:	20023040 	.word	0x20023040
   18a78:	200217b8 	.word	0x200217b8
   18a7c:	4002a5a8 	.word	0x4002a5a8
   18a80:	4002a5ac 	.word	0x4002a5ac

00018a84 <bsd_os_application_irq_handler>:
   18a84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a88:	f7fc ffc6 	bl	15a18 <bsd_os_application_irq_clear>
   18a8c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 18b64 <bsd_os_application_irq_handler+0xe0>
   18a90:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 18b68 <bsd_os_application_irq_handler+0xe4>
   18a94:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 18b6c <bsd_os_application_irq_handler+0xe8>
   18a98:	f108 0908 	add.w	r9, r8, #8
   18a9c:	f858 7b04 	ldr.w	r7, [r8], #4
   18aa0:	6839      	ldr	r1, [r7, #0]
   18aa2:	b361      	cbz	r1, 18afe <bsd_os_application_irq_handler+0x7a>
   18aa4:	2400      	movs	r4, #0
   18aa6:	e002      	b.n	18aae <bsd_os_application_irq_handler+0x2a>
   18aa8:	3401      	adds	r4, #1
   18aaa:	428c      	cmp	r4, r1
   18aac:	d227      	bcs.n	18afe <bsd_os_application_irq_handler+0x7a>
   18aae:	00e6      	lsls	r6, r4, #3
   18ab0:	19bd      	adds	r5, r7, r6
   18ab2:	68aa      	ldr	r2, [r5, #8]
   18ab4:	2a00      	cmp	r2, #0
   18ab6:	d0f7      	beq.n	18aa8 <bsd_os_application_irq_handler+0x24>
   18ab8:	686a      	ldr	r2, [r5, #4]
   18aba:	b2d2      	uxtb	r2, r2
   18abc:	2a01      	cmp	r2, #1
   18abe:	d1f3      	bne.n	18aa8 <bsd_os_application_irq_handler+0x24>
   18ac0:	6868      	ldr	r0, [r5, #4]
   18ac2:	f8bb 2000 	ldrh.w	r2, [fp]
   18ac6:	ebb2 4f10 	cmp.w	r2, r0, lsr #16
   18aca:	d1ed      	bne.n	18aa8 <bsd_os_application_irq_handler+0x24>
   18acc:	68a8      	ldr	r0, [r5, #8]
   18ace:	6841      	ldr	r1, [r0, #4]
   18ad0:	b2c9      	uxtb	r1, r1
   18ad2:	2902      	cmp	r1, #2
   18ad4:	d02c      	beq.n	18b30 <bsd_os_application_irq_handler+0xac>
   18ad6:	2901      	cmp	r1, #1
   18ad8:	d015      	beq.n	18b06 <bsd_os_application_irq_handler+0x82>
   18ada:	3604      	adds	r6, #4
   18adc:	59b9      	ldr	r1, [r7, r6]
   18ade:	3201      	adds	r2, #1
   18ae0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   18ae4:	f041 0103 	orr.w	r1, r1, #3
   18ae8:	51b9      	str	r1, [r7, r6]
   18aea:	f8ab 2000 	strh.w	r2, [fp]
   18aee:	f7fc ff8b 	bl	15a08 <bsd_os_application_irq_set>
   18af2:	f858 7c04 	ldr.w	r7, [r8, #-4]
   18af6:	3401      	adds	r4, #1
   18af8:	6839      	ldr	r1, [r7, #0]
   18afa:	428c      	cmp	r4, r1
   18afc:	d3d7      	bcc.n	18aae <bsd_os_application_irq_handler+0x2a>
   18afe:	45c1      	cmp	r9, r8
   18b00:	d1cc      	bne.n	18a9c <bsd_os_application_irq_handler+0x18>
   18b02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b06:	6801      	ldr	r1, [r0, #0]
   18b08:	0c09      	lsrs	r1, r1, #16
   18b0a:	f002 ff45 	bl	1b998 <rpc_handle_ctrl_message>
   18b0e:	2801      	cmp	r0, #1
   18b10:	d014      	beq.n	18b3c <bsd_os_application_irq_handler+0xb8>
   18b12:	d310      	bcc.n	18b36 <bsd_os_application_irq_handler+0xb2>
   18b14:	2802      	cmp	r0, #2
   18b16:	d007      	beq.n	18b28 <bsd_os_application_irq_handler+0xa4>
   18b18:	2203      	movs	r2, #3
   18b1a:	4b11      	ldr	r3, [pc, #68]	; (18b60 <bsd_os_application_irq_handler+0xdc>)
   18b1c:	4610      	mov	r0, r2
   18b1e:	f8ca 2000 	str.w	r2, [sl]
   18b22:	601a      	str	r2, [r3, #0]
   18b24:	f005 fb8a 	bl	1e23c <rpc_transport_ipc_fault_handler>
   18b28:	f858 7c04 	ldr.w	r7, [r8, #-4]
   18b2c:	6839      	ldr	r1, [r7, #0]
   18b2e:	e7bb      	b.n	18aa8 <bsd_os_application_irq_handler+0x24>
   18b30:	f002 ff4a 	bl	1b9c8 <rpc_handle_data_message>
   18b34:	e7eb      	b.n	18b0e <bsd_os_application_irq_handler+0x8a>
   18b36:	f8bb 2000 	ldrh.w	r2, [fp]
   18b3a:	e7ce      	b.n	18ada <bsd_os_application_irq_handler+0x56>
   18b3c:	686a      	ldr	r2, [r5, #4]
   18b3e:	f8bb 1000 	ldrh.w	r1, [fp]
   18b42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   18b46:	f042 0202 	orr.w	r2, r2, #2
   18b4a:	606a      	str	r2, [r5, #4]
   18b4c:	1c4a      	adds	r2, r1, #1
   18b4e:	f8ab 2000 	strh.w	r2, [fp]
   18b52:	f7fc ff59 	bl	15a08 <bsd_os_application_irq_set>
   18b56:	f858 7c04 	ldr.w	r7, [r8, #-4]
   18b5a:	6839      	ldr	r1, [r7, #0]
   18b5c:	e7a4      	b.n	18aa8 <bsd_os_application_irq_handler+0x24>
   18b5e:	bf00      	nop
   18b60:	200217a8 	.word	0x200217a8
   18b64:	200217b0 	.word	0x200217b0
   18b68:	20023040 	.word	0x20023040
   18b6c:	200217b8 	.word	0x200217b8

00018b70 <IPC_IRQHandler>:
   18b70:	b570      	push	{r4, r5, r6, lr}
   18b72:	f44f 6680 	mov.w	r6, #1024	; 0x400
   18b76:	4d62      	ldr	r5, [pc, #392]	; (18d00 <IPC_IRQHandler+0x190>)
   18b78:	4c62      	ldr	r4, [pc, #392]	; (18d04 <IPC_IRQHandler+0x194>)
   18b7a:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
   18b7e:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   18b82:	b086      	sub	sp, #24
   18b84:	061b      	lsls	r3, r3, #24
   18b86:	d50b      	bpl.n	18ba0 <IPC_IRQHandler+0x30>
   18b88:	f7ff fd32 	bl	185f0 <ipc_trace_handle>
   18b8c:	f7ff fea2 	bl	188d4 <rpc_trace_coredump_in_progress>
   18b90:	2800      	cmp	r0, #0
   18b92:	d151      	bne.n	18c38 <IPC_IRQHandler+0xc8>
   18b94:	4b5c      	ldr	r3, [pc, #368]	; (18d08 <IPC_IRQHandler+0x198>)
   18b96:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   18b9a:	681b      	ldr	r3, [r3, #0]
   18b9c:	9301      	str	r3, [sp, #4]
   18b9e:	9b01      	ldr	r3, [sp, #4]
   18ba0:	4b58      	ldr	r3, [pc, #352]	; (18d04 <IPC_IRQHandler+0x194>)
   18ba2:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   18ba6:	f012 0201 	ands.w	r2, r2, #1
   18baa:	d11c      	bne.n	18be6 <IPC_IRQHandler+0x76>
   18bac:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   18bb0:	f011 0140 	ands.w	r1, r1, #64	; 0x40
   18bb4:	d145      	bne.n	18c42 <IPC_IRQHandler+0xd2>
   18bb6:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   18bba:	0750      	lsls	r0, r2, #29
   18bbc:	d50c      	bpl.n	18bd8 <IPC_IRQHandler+0x68>
   18bbe:	4a53      	ldr	r2, [pc, #332]	; (18d0c <IPC_IRQHandler+0x19c>)
   18bc0:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   18bc4:	6812      	ldr	r2, [r2, #0]
   18bc6:	4b52      	ldr	r3, [pc, #328]	; (18d10 <IPC_IRQHandler+0x1a0>)
   18bc8:	9204      	str	r2, [sp, #16]
   18bca:	9a04      	ldr	r2, [sp, #16]
   18bcc:	681a      	ldr	r2, [r3, #0]
   18bce:	2a02      	cmp	r2, #2
   18bd0:	d079      	beq.n	18cc6 <IPC_IRQHandler+0x156>
   18bd2:	681a      	ldr	r2, [r3, #0]
   18bd4:	2a01      	cmp	r2, #1
   18bd6:	d05b      	beq.n	18c90 <IPC_IRQHandler+0x120>
   18bd8:	4b4a      	ldr	r3, [pc, #296]	; (18d04 <IPC_IRQHandler+0x194>)
   18bda:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   18bde:	06d2      	lsls	r2, r2, #27
   18be0:	d41e      	bmi.n	18c20 <IPC_IRQHandler+0xb0>
   18be2:	b006      	add	sp, #24
   18be4:	bd70      	pop	{r4, r5, r6, pc}
   18be6:	2000      	movs	r0, #0
   18be8:	f248 0202 	movw	r2, #32770	; 0x8002
   18bec:	4949      	ldr	r1, [pc, #292]	; (18d14 <IPC_IRQHandler+0x1a4>)
   18bee:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   18bf2:	6809      	ldr	r1, [r1, #0]
   18bf4:	9102      	str	r1, [sp, #8]
   18bf6:	9902      	ldr	r1, [sp, #8]
   18bf8:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   18bfc:	4293      	cmp	r3, r2
   18bfe:	d06b      	beq.n	18cd8 <IPC_IRQHandler+0x168>
   18c00:	d82a      	bhi.n	18c58 <IPC_IRQHandler+0xe8>
   18c02:	2b00      	cmp	r3, #0
   18c04:	d062      	beq.n	18ccc <IPC_IRQHandler+0x15c>
   18c06:	2b02      	cmp	r3, #2
   18c08:	d937      	bls.n	18c7a <IPC_IRQHandler+0x10a>
   18c0a:	f248 0201 	movw	r2, #32769	; 0x8001
   18c0e:	4293      	cmp	r3, r2
   18c10:	d15c      	bne.n	18ccc <IPC_IRQHandler+0x15c>
   18c12:	2003      	movs	r0, #3
   18c14:	2207      	movs	r2, #7
   18c16:	493e      	ldr	r1, [pc, #248]	; (18d10 <IPC_IRQHandler+0x1a0>)
   18c18:	4b3f      	ldr	r3, [pc, #252]	; (18d18 <IPC_IRQHandler+0x1a8>)
   18c1a:	6008      	str	r0, [r1, #0]
   18c1c:	601a      	str	r2, [r3, #0]
   18c1e:	e7e0      	b.n	18be2 <IPC_IRQHandler+0x72>
   18c20:	2100      	movs	r1, #0
   18c22:	4a3e      	ldr	r2, [pc, #248]	; (18d1c <IPC_IRQHandler+0x1ac>)
   18c24:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
   18c28:	6813      	ldr	r3, [r2, #0]
   18c2a:	9305      	str	r3, [sp, #20]
   18c2c:	9b05      	ldr	r3, [sp, #20]
   18c2e:	b006      	add	sp, #24
   18c30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18c34:	f7fc bee8 	b.w	15a08 <bsd_os_application_irq_set>
   18c38:	23e0      	movs	r3, #224	; 0xe0
   18c3a:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   18c3e:	606e      	str	r6, [r5, #4]
   18c40:	e7cf      	b.n	18be2 <IPC_IRQHandler+0x72>
   18c42:	4937      	ldr	r1, [pc, #220]	; (18d20 <IPC_IRQHandler+0x1b0>)
   18c44:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   18c48:	680b      	ldr	r3, [r1, #0]
   18c4a:	9303      	str	r3, [sp, #12]
   18c4c:	9b03      	ldr	r3, [sp, #12]
   18c4e:	b006      	add	sp, #24
   18c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18c54:	f7ff be9a 	b.w	1898c <rpc_transport_ipc_shutdown>
   18c58:	4a32      	ldr	r2, [pc, #200]	; (18d24 <IPC_IRQHandler+0x1b4>)
   18c5a:	4293      	cmp	r3, r2
   18c5c:	d82a      	bhi.n	18cb4 <IPC_IRQHandler+0x144>
   18c5e:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   18c62:	d82a      	bhi.n	18cba <IPC_IRQHandler+0x14a>
   18c64:	f248 0203 	movw	r2, #32771	; 0x8003
   18c68:	4293      	cmp	r3, r2
   18c6a:	d12f      	bne.n	18ccc <IPC_IRQHandler+0x15c>
   18c6c:	2003      	movs	r0, #3
   18c6e:	2204      	movs	r2, #4
   18c70:	4927      	ldr	r1, [pc, #156]	; (18d10 <IPC_IRQHandler+0x1a0>)
   18c72:	4b29      	ldr	r3, [pc, #164]	; (18d18 <IPC_IRQHandler+0x1a8>)
   18c74:	6008      	str	r0, [r1, #0]
   18c76:	601a      	str	r2, [r3, #0]
   18c78:	e7b3      	b.n	18be2 <IPC_IRQHandler+0x72>
   18c7a:	2303      	movs	r3, #3
   18c7c:	4618      	mov	r0, r3
   18c7e:	4924      	ldr	r1, [pc, #144]	; (18d10 <IPC_IRQHandler+0x1a0>)
   18c80:	4a25      	ldr	r2, [pc, #148]	; (18d18 <IPC_IRQHandler+0x1a8>)
   18c82:	600b      	str	r3, [r1, #0]
   18c84:	6013      	str	r3, [r2, #0]
   18c86:	b006      	add	sp, #24
   18c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18c8c:	f005 bad6 	b.w	1e23c <rpc_transport_ipc_fault_handler>
   18c90:	4a25      	ldr	r2, [pc, #148]	; (18d28 <IPC_IRQHandler+0x1b8>)
   18c92:	4826      	ldr	r0, [pc, #152]	; (18d2c <IPC_IRQHandler+0x1bc>)
   18c94:	6811      	ldr	r1, [r2, #0]
   18c96:	688a      	ldr	r2, [r1, #8]
   18c98:	6002      	str	r2, [r0, #0]
   18c9a:	6849      	ldr	r1, [r1, #4]
   18c9c:	6041      	str	r1, [r0, #4]
   18c9e:	b312      	cbz	r2, 18ce6 <IPC_IRQHandler+0x176>
   18ca0:	b309      	cbz	r1, 18ce6 <IPC_IRQHandler+0x176>
   18ca2:	6812      	ldr	r2, [r2, #0]
   18ca4:	2a10      	cmp	r2, #16
   18ca6:	d824      	bhi.n	18cf2 <IPC_IRQHandler+0x182>
   18ca8:	680a      	ldr	r2, [r1, #0]
   18caa:	2a10      	cmp	r2, #16
   18cac:	d821      	bhi.n	18cf2 <IPC_IRQHandler+0x182>
   18cae:	2202      	movs	r2, #2
   18cb0:	601a      	str	r2, [r3, #0]
   18cb2:	e791      	b.n	18bd8 <IPC_IRQHandler+0x68>
   18cb4:	4a1e      	ldr	r2, [pc, #120]	; (18d30 <IPC_IRQHandler+0x1c0>)
   18cb6:	4293      	cmp	r3, r2
   18cb8:	d108      	bne.n	18ccc <IPC_IRQHandler+0x15c>
   18cba:	2003      	movs	r0, #3
   18cbc:	4914      	ldr	r1, [pc, #80]	; (18d10 <IPC_IRQHandler+0x1a0>)
   18cbe:	4a16      	ldr	r2, [pc, #88]	; (18d18 <IPC_IRQHandler+0x1a8>)
   18cc0:	6008      	str	r0, [r1, #0]
   18cc2:	6013      	str	r3, [r2, #0]
   18cc4:	e78d      	b.n	18be2 <IPC_IRQHandler+0x72>
   18cc6:	f7fc fe9f 	bl	15a08 <bsd_os_application_irq_set>
   18cca:	e785      	b.n	18bd8 <IPC_IRQHandler+0x68>
   18ccc:	2303      	movs	r3, #3
   18cce:	4910      	ldr	r1, [pc, #64]	; (18d10 <IPC_IRQHandler+0x1a0>)
   18cd0:	4a11      	ldr	r2, [pc, #68]	; (18d18 <IPC_IRQHandler+0x1a8>)
   18cd2:	600b      	str	r3, [r1, #0]
   18cd4:	6013      	str	r3, [r2, #0]
   18cd6:	e784      	b.n	18be2 <IPC_IRQHandler+0x72>
   18cd8:	2003      	movs	r0, #3
   18cda:	2206      	movs	r2, #6
   18cdc:	490c      	ldr	r1, [pc, #48]	; (18d10 <IPC_IRQHandler+0x1a0>)
   18cde:	4b0e      	ldr	r3, [pc, #56]	; (18d18 <IPC_IRQHandler+0x1a8>)
   18ce0:	6008      	str	r0, [r1, #0]
   18ce2:	601a      	str	r2, [r3, #0]
   18ce4:	e77d      	b.n	18be2 <IPC_IRQHandler+0x72>
   18ce6:	2003      	movs	r0, #3
   18ce8:	2110      	movs	r1, #16
   18cea:	4a0b      	ldr	r2, [pc, #44]	; (18d18 <IPC_IRQHandler+0x1a8>)
   18cec:	6018      	str	r0, [r3, #0]
   18cee:	6011      	str	r1, [r2, #0]
   18cf0:	e772      	b.n	18bd8 <IPC_IRQHandler+0x68>
   18cf2:	2003      	movs	r0, #3
   18cf4:	f24c 0106 	movw	r1, #49158	; 0xc006
   18cf8:	4a07      	ldr	r2, [pc, #28]	; (18d18 <IPC_IRQHandler+0x1a8>)
   18cfa:	6018      	str	r0, [r3, #0]
   18cfc:	6011      	str	r1, [r2, #0]
   18cfe:	e76b      	b.n	18bd8 <IPC_IRQHandler+0x68>
   18d00:	e000e100 	.word	0xe000e100
   18d04:	4002a000 	.word	0x4002a000
   18d08:	4002a11c 	.word	0x4002a11c
   18d0c:	4002a108 	.word	0x4002a108
   18d10:	200217b8 	.word	0x200217b8
   18d14:	4002a100 	.word	0x4002a100
   18d18:	200217a8 	.word	0x200217a8
   18d1c:	4002a110 	.word	0x4002a110
   18d20:	4002a118 	.word	0x4002a118
   18d24:	04400004 	.word	0x04400004
   18d28:	200217bc 	.word	0x200217bc
   18d2c:	200217b0 	.word	0x200217b0
   18d30:	05500001 	.word	0x05500001

00018d34 <rpc_transport_ipc_rx_init>:
   18d34:	2800      	cmp	r0, #0
   18d36:	f000 8109 	beq.w	18f4c <rpc_transport_ipc_rx_init+0x218>
   18d3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d3e:	6805      	ldr	r5, [r0, #0]
   18d40:	b097      	sub	sp, #92	; 0x5c
   18d42:	2d00      	cmp	r5, #0
   18d44:	f000 80f8 	beq.w	18f38 <rpc_transport_ipc_rx_init+0x204>
   18d48:	6883      	ldr	r3, [r0, #8]
   18d4a:	2b00      	cmp	r3, #0
   18d4c:	f000 80f4 	beq.w	18f38 <rpc_transport_ipc_rx_init+0x204>
   18d50:	6906      	ldr	r6, [r0, #16]
   18d52:	2e00      	cmp	r6, #0
   18d54:	f000 80f0 	beq.w	18f38 <rpc_transport_ipc_rx_init+0x204>
   18d58:	6a84      	ldr	r4, [r0, #40]	; 0x28
   18d5a:	2c00      	cmp	r4, #0
   18d5c:	f000 80ec 	beq.w	18f38 <rpc_transport_ipc_rx_init+0x204>
   18d60:	6844      	ldr	r4, [r0, #4]
   18d62:	2c1b      	cmp	r4, #27
   18d64:	f240 80ed 	bls.w	18f42 <rpc_transport_ipc_rx_init+0x20e>
   18d68:	68c4      	ldr	r4, [r0, #12]
   18d6a:	2c0b      	cmp	r4, #11
   18d6c:	f240 80e9 	bls.w	18f42 <rpc_transport_ipc_rx_init+0x20e>
   18d70:	f8d0 e014 	ldr.w	lr, [r0, #20]
   18d74:	f1be 0f17 	cmp.w	lr, #23
   18d78:	f240 80e3 	bls.w	18f42 <rpc_transport_ipc_rx_init+0x20e>
   18d7c:	4604      	mov	r4, r0
   18d7e:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 18f74 <rpc_transport_ipc_rx_init+0x240>
   18d82:	6ba7      	ldr	r7, [r4, #56]	; 0x38
   18d84:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 18f78 <rpc_transport_ipc_rx_init+0x244>
   18d88:	4690      	mov	r8, r2
   18d8a:	9101      	str	r1, [sp, #4]
   18d8c:	4672      	mov	r2, lr
   18d8e:	2100      	movs	r1, #0
   18d90:	4630      	mov	r0, r6
   18d92:	f8ca 7000 	str.w	r7, [sl]
   18d96:	f8cb 3000 	str.w	r3, [fp]
   18d9a:	f009 fa57 	bl	2224c <memset>
   18d9e:	69e3      	ldr	r3, [r4, #28]
   18da0:	4630      	mov	r0, r6
   18da2:	6033      	str	r3, [r6, #0]
   18da4:	69a3      	ldr	r3, [r4, #24]
   18da6:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 18f7c <rpc_transport_ipc_rx_init+0x248>
   18daa:	6073      	str	r3, [r6, #4]
   18dac:	f7ff fb34 	bl	18418 <ipc_trace_init>
   18db0:	2200      	movs	r2, #0
   18db2:	2001      	movs	r0, #1
   18db4:	4b67      	ldr	r3, [pc, #412]	; (18f54 <rpc_transport_ipc_rx_init+0x220>)
   18db6:	4968      	ldr	r1, [pc, #416]	; (18f58 <rpc_transport_ipc_rx_init+0x224>)
   18db8:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   18dbc:	6809      	ldr	r1, [r1, #0]
   18dbe:	f04f 0c80 	mov.w	ip, #128	; 0x80
   18dc2:	9106      	str	r1, [sp, #24]
   18dc4:	4965      	ldr	r1, [pc, #404]	; (18f5c <rpc_transport_ipc_rx_init+0x228>)
   18dc6:	f8dd e018 	ldr.w	lr, [sp, #24]
   18dca:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   18dce:	6809      	ldr	r1, [r1, #0]
   18dd0:	702a      	strb	r2, [r5, #0]
   18dd2:	9105      	str	r1, [sp, #20]
   18dd4:	706a      	strb	r2, [r5, #1]
   18dd6:	70ea      	strb	r2, [r5, #3]
   18dd8:	70a8      	strb	r0, [r5, #2]
   18dda:	9905      	ldr	r1, [sp, #20]
   18ddc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   18dde:	f8db e000 	ldr.w	lr, [fp]
   18de2:	6069      	str	r1, [r5, #4]
   18de4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   18de6:	61ae      	str	r6, [r5, #24]
   18de8:	60a9      	str	r1, [r5, #8]
   18dea:	9901      	ldr	r1, [sp, #4]
   18dec:	f8c5 e014 	str.w	lr, [r5, #20]
   18df0:	6129      	str	r1, [r5, #16]
   18df2:	495b      	ldr	r1, [pc, #364]	; (18f60 <rpc_transport_ipc_rx_init+0x22c>)
   18df4:	f8c5 800c 	str.w	r8, [r5, #12]
   18df8:	f8c3 0590 	str.w	r0, [r3, #1424]	; 0x590
   18dfc:	680c      	ldr	r4, [r1, #0]
   18dfe:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   18e02:	9407      	str	r4, [sp, #28]
   18e04:	9c07      	ldr	r4, [sp, #28]
   18e06:	2404      	movs	r4, #4
   18e08:	f8c3 4598 	str.w	r4, [r3, #1432]	; 0x598
   18e0c:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   18e10:	4f54      	ldr	r7, [pc, #336]	; (18f64 <rpc_transport_ipc_rx_init+0x230>)
   18e12:	9408      	str	r4, [sp, #32]
   18e14:	9c08      	ldr	r4, [sp, #32]
   18e16:	2410      	movs	r4, #16
   18e18:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   18e1c:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   18e20:	9409      	str	r4, [sp, #36]	; 0x24
   18e22:	9c09      	ldr	r4, [sp, #36]	; 0x24
   18e24:	2440      	movs	r4, #64	; 0x40
   18e26:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   18e2a:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   18e2e:	940a      	str	r4, [sp, #40]	; 0x28
   18e30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   18e32:	f8c3 c5ac 	str.w	ip, [r3, #1452]	; 0x5ac
   18e36:	f8d1 44ac 	ldr.w	r4, [r1, #1196]	; 0x4ac
   18e3a:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   18e3e:	940b      	str	r4, [sp, #44]	; 0x2c
   18e40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   18e42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18e46:	680c      	ldr	r4, [r1, #0]
   18e48:	940c      	str	r4, [sp, #48]	; 0x30
   18e4a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   18e4c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   18e50:	688c      	ldr	r4, [r1, #8]
   18e52:	940d      	str	r4, [sp, #52]	; 0x34
   18e54:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   18e56:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   18e5a:	690c      	ldr	r4, [r1, #16]
   18e5c:	940e      	str	r4, [sp, #56]	; 0x38
   18e5e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   18e60:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   18e64:	698c      	ldr	r4, [r1, #24]
   18e66:	940f      	str	r4, [sp, #60]	; 0x3c
   18e68:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   18e6a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   18e6e:	69cc      	ldr	r4, [r1, #28]
   18e70:	f501 7101 	add.w	r1, r1, #516	; 0x204
   18e74:	9410      	str	r4, [sp, #64]	; 0x40
   18e76:	9c10      	ldr	r4, [sp, #64]	; 0x40
   18e78:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   18e7c:	4304      	orrs	r4, r0
   18e7e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   18e82:	680d      	ldr	r5, [r1, #0]
   18e84:	4c38      	ldr	r4, [pc, #224]	; (18f68 <rpc_transport_ipc_rx_init+0x234>)
   18e86:	9511      	str	r5, [sp, #68]	; 0x44
   18e88:	9d11      	ldr	r5, [sp, #68]	; 0x44
   18e8a:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   18e8e:	4d37      	ldr	r5, [pc, #220]	; (18f6c <rpc_transport_ipc_rx_init+0x238>)
   18e90:	f046 0604 	orr.w	r6, r6, #4
   18e94:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   18e98:	680e      	ldr	r6, [r1, #0]
   18e9a:	9612      	str	r6, [sp, #72]	; 0x48
   18e9c:	9e12      	ldr	r6, [sp, #72]	; 0x48
   18e9e:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   18ea2:	f046 0610 	orr.w	r6, r6, #16
   18ea6:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   18eaa:	680e      	ldr	r6, [r1, #0]
   18eac:	9613      	str	r6, [sp, #76]	; 0x4c
   18eae:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   18eb0:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   18eb4:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   18eb8:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   18ebc:	680e      	ldr	r6, [r1, #0]
   18ebe:	9614      	str	r6, [sp, #80]	; 0x50
   18ec0:	9e14      	ldr	r6, [sp, #80]	; 0x50
   18ec2:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   18ec6:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   18eca:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   18ece:	f8da 3000 	ldr.w	r3, [sl]
   18ed2:	6809      	ldr	r1, [r1, #0]
   18ed4:	015b      	lsls	r3, r3, #5
   18ed6:	9115      	str	r1, [sp, #84]	; 0x54
   18ed8:	b2db      	uxtb	r3, r3
   18eda:	9915      	ldr	r1, [sp, #84]	; 0x54
   18edc:	6022      	str	r2, [r4, #0]
   18ede:	f8c9 0000 	str.w	r0, [r9]
   18ee2:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   18ee6:	f8c5 c184 	str.w	ip, [r5, #388]	; 0x184
   18eea:	f8c5 c004 	str.w	ip, [r5, #4]
   18eee:	9204      	str	r2, [sp, #16]
   18ef0:	f8c7 2610 	str.w	r2, [r7, #1552]	; 0x610
   18ef4:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
   18ef8:	9304      	str	r3, [sp, #16]
   18efa:	9b04      	ldr	r3, [sp, #16]
   18efc:	f8d9 3000 	ldr.w	r3, [r9]
   18f00:	4283      	cmp	r3, r0
   18f02:	d10f      	bne.n	18f24 <rpc_transport_ipc_rx_init+0x1f0>
   18f04:	2614      	movs	r6, #20
   18f06:	4d1a      	ldr	r5, [pc, #104]	; (18f70 <rpc_transport_ipc_rx_init+0x23c>)
   18f08:	e000      	b.n	18f0c <rpc_transport_ipc_rx_init+0x1d8>
   18f0a:	b15d      	cbz	r5, 18f24 <rpc_transport_ipc_rx_init+0x1f0>
   18f0c:	a903      	add	r1, sp, #12
   18f0e:	2000      	movs	r0, #0
   18f10:	9603      	str	r6, [sp, #12]
   18f12:	f7fc fb4d 	bl	155b0 <bsd_os_timedwait>
   18f16:	9b03      	ldr	r3, [sp, #12]
   18f18:	f8d9 2000 	ldr.w	r2, [r9]
   18f1c:	3b14      	subs	r3, #20
   18f1e:	2a01      	cmp	r2, #1
   18f20:	441d      	add	r5, r3
   18f22:	d0f2      	beq.n	18f0a <rpc_transport_ipc_rx_init+0x1d6>
   18f24:	f8d9 3000 	ldr.w	r3, [r9]
   18f28:	2b01      	cmp	r3, #1
   18f2a:	bf0a      	itet	eq
   18f2c:	200d      	moveq	r0, #13
   18f2e:	6820      	ldrne	r0, [r4, #0]
   18f30:	6020      	streq	r0, [r4, #0]
   18f32:	b017      	add	sp, #92	; 0x5c
   18f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f38:	f24c 000e 	movw	r0, #49166	; 0xc00e
   18f3c:	b017      	add	sp, #92	; 0x5c
   18f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f42:	f24c 0009 	movw	r0, #49161	; 0xc009
   18f46:	b017      	add	sp, #92	; 0x5c
   18f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f4c:	f24c 000e 	movw	r0, #49166	; 0xc00e
   18f50:	4770      	bx	lr
   18f52:	bf00      	nop
   18f54:	4002a000 	.word	0x4002a000
   18f58:	4002a610 	.word	0x4002a610
   18f5c:	4002a614 	.word	0x4002a614
   18f60:	4002a590 	.word	0x4002a590
   18f64:	40005000 	.word	0x40005000
   18f68:	200217a8 	.word	0x200217a8
   18f6c:	e000e100 	.word	0xe000e100
   18f70:	000249f0 	.word	0x000249f0
   18f74:	200217ac 	.word	0x200217ac
   18f78:	200217bc 	.word	0x200217bc
   18f7c:	200217b8 	.word	0x200217b8

00018f80 <rpc_transport_ipc_msg_free>:
   18f80:	b470      	push	{r4, r5, r6}
   18f82:	4e17      	ldr	r6, [pc, #92]	; (18fe0 <rpc_transport_ipc_msg_free+0x60>)
   18f84:	6831      	ldr	r1, [r6, #0]
   18f86:	680d      	ldr	r5, [r1, #0]
   18f88:	b1ad      	cbz	r5, 18fb6 <rpc_transport_ipc_msg_free+0x36>
   18f8a:	688b      	ldr	r3, [r1, #8]
   18f8c:	4283      	cmp	r3, r0
   18f8e:	d024      	beq.n	18fda <rpc_transport_ipc_msg_free+0x5a>
   18f90:	2300      	movs	r3, #0
   18f92:	3301      	adds	r3, #1
   18f94:	00da      	lsls	r2, r3, #3
   18f96:	429d      	cmp	r5, r3
   18f98:	eb01 0402 	add.w	r4, r1, r2
   18f9c:	d00b      	beq.n	18fb6 <rpc_transport_ipc_msg_free+0x36>
   18f9e:	68a4      	ldr	r4, [r4, #8]
   18fa0:	42a0      	cmp	r0, r4
   18fa2:	d1f6      	bne.n	18f92 <rpc_transport_ipc_msg_free+0x12>
   18fa4:	3204      	adds	r2, #4
   18fa6:	588b      	ldr	r3, [r1, r2]
   18fa8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   18fac:	f043 0303 	orr.w	r3, r3, #3
   18fb0:	508b      	str	r3, [r1, r2]
   18fb2:	bc70      	pop	{r4, r5, r6}
   18fb4:	4770      	bx	lr
   18fb6:	6871      	ldr	r1, [r6, #4]
   18fb8:	680d      	ldr	r5, [r1, #0]
   18fba:	2d00      	cmp	r5, #0
   18fbc:	d0f9      	beq.n	18fb2 <rpc_transport_ipc_msg_free+0x32>
   18fbe:	688b      	ldr	r3, [r1, #8]
   18fc0:	4283      	cmp	r3, r0
   18fc2:	d00a      	beq.n	18fda <rpc_transport_ipc_msg_free+0x5a>
   18fc4:	2300      	movs	r3, #0
   18fc6:	3301      	adds	r3, #1
   18fc8:	00da      	lsls	r2, r3, #3
   18fca:	429d      	cmp	r5, r3
   18fcc:	eb01 0402 	add.w	r4, r1, r2
   18fd0:	d0ef      	beq.n	18fb2 <rpc_transport_ipc_msg_free+0x32>
   18fd2:	68a4      	ldr	r4, [r4, #8]
   18fd4:	42a0      	cmp	r0, r4
   18fd6:	d1f6      	bne.n	18fc6 <rpc_transport_ipc_msg_free+0x46>
   18fd8:	e7e4      	b.n	18fa4 <rpc_transport_ipc_msg_free+0x24>
   18fda:	2204      	movs	r2, #4
   18fdc:	e7e3      	b.n	18fa6 <rpc_transport_ipc_msg_free+0x26>
   18fde:	bf00      	nop
   18fe0:	200217b0 	.word	0x200217b0

00018fe4 <rpc_transport_ipc_tx_init>:
   18fe4:	2800      	cmp	r0, #0
   18fe6:	f000 80b8 	beq.w	1915a <rpc_transport_ipc_tx_init+0x176>
   18fea:	2900      	cmp	r1, #0
   18fec:	f000 80b5 	beq.w	1915a <rpc_transport_ipc_tx_init+0x176>
   18ff0:	2a00      	cmp	r2, #0
   18ff2:	f000 80b2 	beq.w	1915a <rpc_transport_ipc_tx_init+0x176>
   18ff6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ffa:	6a04      	ldr	r4, [r0, #32]
   18ffc:	b085      	sub	sp, #20
   18ffe:	2c00      	cmp	r4, #0
   19000:	f000 80a6 	beq.w	19150 <rpc_transport_ipc_tx_init+0x16c>
   19004:	6a40      	ldr	r0, [r0, #36]	; 0x24
   19006:	2800      	cmp	r0, #0
   19008:	f000 80a2 	beq.w	19150 <rpc_transport_ipc_tx_init+0x16c>
   1900c:	f642 4587 	movw	r5, #11399	; 0x2c87
   19010:	f04f 0a00 	mov.w	sl, #0
   19014:	4e55      	ldr	r6, [pc, #340]	; (1916c <rpc_transport_ipc_tx_init+0x188>)
   19016:	42a8      	cmp	r0, r5
   19018:	f886 a000 	strb.w	sl, [r6]
   1901c:	f240 80a0 	bls.w	19160 <rpc_transport_ipc_tx_init+0x17c>
   19020:	2708      	movs	r7, #8
   19022:	f8df 9180 	ldr.w	r9, [pc, #384]	; 191a4 <rpc_transport_ipc_tx_init+0x1c0>
   19026:	4620      	mov	r0, r4
   19028:	4616      	mov	r6, r2
   1902a:	460d      	mov	r5, r1
   1902c:	2244      	movs	r2, #68	; 0x44
   1902e:	4651      	mov	r1, sl
   19030:	f8c9 4000 	str.w	r4, [r9]
   19034:	f009 f90a 	bl	2224c <memset>
   19038:	f8d9 2000 	ldr.w	r2, [r9]
   1903c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   19040:	f8df 8164 	ldr.w	r8, [pc, #356]	; 191a8 <rpc_transport_ipc_tx_init+0x1c4>
   19044:	f882 a001 	strb.w	sl, [r2, #1]
   19048:	f882 a002 	strb.w	sl, [r2, #2]
   1904c:	f882 a003 	strb.w	sl, [r2, #3]
   19050:	7017      	strb	r7, [r2, #0]
   19052:	4618      	mov	r0, r3
   19054:	2244      	movs	r2, #68	; 0x44
   19056:	4651      	mov	r1, sl
   19058:	f8c8 3000 	str.w	r3, [r8]
   1905c:	f009 f8f6 	bl	2224c <memset>
   19060:	f8d8 2000 	ldr.w	r2, [r8]
   19064:	f104 0388 	add.w	r3, r4, #136	; 0x88
   19068:	f8df b140 	ldr.w	fp, [pc, #320]	; 191ac <rpc_transport_ipc_tx_init+0x1c8>
   1906c:	7017      	strb	r7, [r2, #0]
   1906e:	f882 a001 	strb.w	sl, [r2, #1]
   19072:	f882 a002 	strb.w	sl, [r2, #2]
   19076:	f882 a003 	strb.w	sl, [r2, #3]
   1907a:	4618      	mov	r0, r3
   1907c:	f44f 7200 	mov.w	r2, #512	; 0x200
   19080:	4651      	mov	r1, sl
   19082:	f8cb 3000 	str.w	r3, [fp]
   19086:	f009 f8e1 	bl	2224c <memset>
   1908a:	4b39      	ldr	r3, [pc, #228]	; (19170 <rpc_transport_ipc_tx_init+0x18c>)
   1908c:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   19090:	f8c3 c000 	str.w	ip, [r3]
   19094:	4651      	mov	r1, sl
   19096:	4660      	mov	r0, ip
   19098:	f44f 7200 	mov.w	r2, #512	; 0x200
   1909c:	f009 f8d6 	bl	2224c <memset>
   190a0:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   190a4:	2106      	movs	r1, #6
   190a6:	f04f 0e01 	mov.w	lr, #1
   190aa:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   190ae:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   190b2:	4b30      	ldr	r3, [pc, #192]	; (19174 <rpc_transport_ipc_tx_init+0x190>)
   190b4:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   190b8:	605c      	str	r4, [r3, #4]
   190ba:	4c2f      	ldr	r4, [pc, #188]	; (19178 <rpc_transport_ipc_tx_init+0x194>)
   190bc:	f8c3 c008 	str.w	ip, [r3, #8]
   190c0:	8199      	strh	r1, [r3, #12]
   190c2:	f8a3 e000 	strh.w	lr, [r3]
   190c6:	4619      	mov	r1, r3
   190c8:	611c      	str	r4, [r3, #16]
   190ca:	4b2c      	ldr	r3, [pc, #176]	; (1917c <rpc_transport_ipc_tx_init+0x198>)
   190cc:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 191b0 <rpc_transport_ipc_tx_init+0x1cc>
   190d0:	6120      	str	r0, [r4, #16]
   190d2:	482b      	ldr	r0, [pc, #172]	; (19180 <rpc_transport_ipc_tx_init+0x19c>)
   190d4:	6063      	str	r3, [r4, #4]
   190d6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   190da:	60a0      	str	r0, [r4, #8]
   190dc:	f8c4 c000 	str.w	ip, [r4]
   190e0:	4828      	ldr	r0, [pc, #160]	; (19184 <rpc_transport_ipc_tx_init+0x1a0>)
   190e2:	60e3      	str	r3, [r4, #12]
   190e4:	6162      	str	r2, [r4, #20]
   190e6:	f006 f9c3 	bl	1f470 <nrf_mem_register>
   190ea:	2800      	cmp	r0, #0
   190ec:	d132      	bne.n	19154 <rpc_transport_ipc_tx_init+0x170>
   190ee:	f04f 0c02 	mov.w	ip, #2
   190f2:	2420      	movs	r4, #32
   190f4:	f8d9 1000 	ldr.w	r1, [r9]
   190f8:	f8db 2000 	ldr.w	r2, [fp]
   190fc:	6029      	str	r1, [r5, #0]
   190fe:	4b1c      	ldr	r3, [pc, #112]	; (19170 <rpc_transport_ipc_tx_init+0x18c>)
   19100:	f8d8 1000 	ldr.w	r1, [r8]
   19104:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 191b4 <rpc_transport_ipc_tx_init+0x1d0>
   19108:	4d1f      	ldr	r5, [pc, #124]	; (19188 <rpc_transport_ipc_tx_init+0x1a4>)
   1910a:	6031      	str	r1, [r6, #0]
   1910c:	f8ce 2000 	str.w	r2, [lr]
   19110:	681b      	ldr	r3, [r3, #0]
   19112:	491e      	ldr	r1, [pc, #120]	; (1918c <rpc_transport_ipc_tx_init+0x1a8>)
   19114:	f502 7200 	add.w	r2, r2, #512	; 0x200
   19118:	602a      	str	r2, [r5, #0]
   1911a:	4e1d      	ldr	r6, [pc, #116]	; (19190 <rpc_transport_ipc_tx_init+0x1ac>)
   1911c:	4a1d      	ldr	r2, [pc, #116]	; (19194 <rpc_transport_ipc_tx_init+0x1b0>)
   1911e:	4d1e      	ldr	r5, [pc, #120]	; (19198 <rpc_transport_ipc_tx_init+0x1b4>)
   19120:	600b      	str	r3, [r1, #0]
   19122:	f503 7300 	add.w	r3, r3, #512	; 0x200
   19126:	491d      	ldr	r1, [pc, #116]	; (1919c <rpc_transport_ipc_tx_init+0x1b8>)
   19128:	6033      	str	r3, [r6, #0]
   1912a:	8028      	strh	r0, [r5, #0]
   1912c:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   19130:	6809      	ldr	r1, [r1, #0]
   19132:	4b1b      	ldr	r3, [pc, #108]	; (191a0 <rpc_transport_ipc_tx_init+0x1bc>)
   19134:	9103      	str	r1, [sp, #12]
   19136:	9903      	ldr	r1, [sp, #12]
   19138:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   1913c:	6819      	ldr	r1, [r3, #0]
   1913e:	443b      	add	r3, r7
   19140:	9102      	str	r1, [sp, #8]
   19142:	9902      	ldr	r1, [sp, #8]
   19144:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   19148:	681b      	ldr	r3, [r3, #0]
   1914a:	9301      	str	r3, [sp, #4]
   1914c:	9b01      	ldr	r3, [sp, #4]
   1914e:	e001      	b.n	19154 <rpc_transport_ipc_tx_init+0x170>
   19150:	f24c 0007 	movw	r0, #49159	; 0xc007
   19154:	b005      	add	sp, #20
   19156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1915a:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1915e:	4770      	bx	lr
   19160:	f24c 0004 	movw	r0, #49156	; 0xc004
   19164:	b005      	add	sp, #20
   19166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1916a:	bf00      	nop
   1916c:	20025014 	.word	0x20025014
   19170:	200217e8 	.word	0x200217e8
   19174:	200217d4 	.word	0x200217d4
   19178:	200217f8 	.word	0x200217f8
   1917c:	00040080 	.word	0x00040080
   19180:	00040100 	.word	0x00040100
   19184:	200217c0 	.word	0x200217c0
   19188:	200217cc 	.word	0x200217cc
   1918c:	200217c8 	.word	0x200217c8
   19190:	200217c4 	.word	0x200217c4
   19194:	4002a000 	.word	0x4002a000
   19198:	20023042 	.word	0x20023042
   1919c:	4002a514 	.word	0x4002a514
   191a0:	4002a51c 	.word	0x4002a51c
   191a4:	200217f4 	.word	0x200217f4
   191a8:	200217ec 	.word	0x200217ec
   191ac:	200217f0 	.word	0x200217f0
   191b0:	00080040 	.word	0x00080040
   191b4:	200217d0 	.word	0x200217d0

000191b8 <rpc_transport_ipc_send>:
   191b8:	2800      	cmp	r0, #0
   191ba:	d061      	beq.n	19280 <rpc_transport_ipc_send+0xc8>
   191bc:	b4f0      	push	{r4, r5, r6, r7}
   191be:	4b34      	ldr	r3, [pc, #208]	; (19290 <rpc_transport_ipc_send+0xd8>)
   191c0:	b082      	sub	sp, #8
   191c2:	681a      	ldr	r2, [r3, #0]
   191c4:	4b33      	ldr	r3, [pc, #204]	; (19294 <rpc_transport_ipc_send+0xdc>)
   191c6:	4282      	cmp	r2, r0
   191c8:	d81e      	bhi.n	19208 <rpc_transport_ipc_send+0x50>
   191ca:	681b      	ldr	r3, [r3, #0]
   191cc:	4932      	ldr	r1, [pc, #200]	; (19298 <rpc_transport_ipc_send+0xe0>)
   191ce:	4283      	cmp	r3, r0
   191d0:	6809      	ldr	r1, [r1, #0]
   191d2:	d803      	bhi.n	191dc <rpc_transport_ipc_send+0x24>
   191d4:	4c31      	ldr	r4, [pc, #196]	; (1929c <rpc_transport_ipc_send+0xe4>)
   191d6:	6824      	ldr	r4, [r4, #0]
   191d8:	4284      	cmp	r4, r0
   191da:	d849      	bhi.n	19270 <rpc_transport_ipc_send+0xb8>
   191dc:	4281      	cmp	r1, r0
   191de:	d90e      	bls.n	191fe <rpc_transport_ipc_send+0x46>
   191e0:	4b2f      	ldr	r3, [pc, #188]	; (192a0 <rpc_transport_ipc_send+0xe8>)
   191e2:	781b      	ldrb	r3, [r3, #0]
   191e4:	2b00      	cmp	r3, #0
   191e6:	d14e      	bne.n	19286 <rpc_transport_ipc_send+0xce>
   191e8:	1a83      	subs	r3, r0, r2
   191ea:	492e      	ldr	r1, [pc, #184]	; (192a4 <rpc_transport_ipc_send+0xec>)
   191ec:	099f      	lsrs	r7, r3, #6
   191ee:	069b      	lsls	r3, r3, #26
   191f0:	680a      	ldr	r2, [r1, #0]
   191f2:	4d2d      	ldr	r5, [pc, #180]	; (192a8 <rpc_transport_ipc_send+0xf0>)
   191f4:	f04f 0403 	mov.w	r4, #3
   191f8:	f04f 0602 	mov.w	r6, #2
   191fc:	d014      	beq.n	19228 <rpc_transport_ipc_send+0x70>
   191fe:	f24c 0010 	movw	r0, #49168	; 0xc010
   19202:	b002      	add	sp, #8
   19204:	bcf0      	pop	{r4, r5, r6, r7}
   19206:	4770      	bx	lr
   19208:	681b      	ldr	r3, [r3, #0]
   1920a:	4298      	cmp	r0, r3
   1920c:	d3f7      	bcc.n	191fe <rpc_transport_ipc_send+0x46>
   1920e:	4a23      	ldr	r2, [pc, #140]	; (1929c <rpc_transport_ipc_send+0xe4>)
   19210:	6812      	ldr	r2, [r2, #0]
   19212:	4290      	cmp	r0, r2
   19214:	d2f3      	bcs.n	191fe <rpc_transport_ipc_send+0x46>
   19216:	2401      	movs	r4, #1
   19218:	1ac3      	subs	r3, r0, r3
   1921a:	4a24      	ldr	r2, [pc, #144]	; (192ac <rpc_transport_ipc_send+0xf4>)
   1921c:	099f      	lsrs	r7, r3, #6
   1921e:	069b      	lsls	r3, r3, #26
   19220:	4626      	mov	r6, r4
   19222:	6812      	ldr	r2, [r2, #0]
   19224:	4d22      	ldr	r5, [pc, #136]	; (192b0 <rpc_transport_ipc_send+0xf8>)
   19226:	d1ea      	bne.n	191fe <rpc_transport_ipc_send+0x46>
   19228:	6841      	ldr	r1, [r0, #4]
   1922a:	b2c9      	uxtb	r1, r1
   1922c:	428e      	cmp	r6, r1
   1922e:	d122      	bne.n	19276 <rpc_transport_ipc_send+0xbe>
   19230:	2020      	movs	r0, #32
   19232:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
   19236:	491f      	ldr	r1, [pc, #124]	; (192b4 <rpc_transport_ipc_send+0xfc>)
   19238:	685a      	ldr	r2, [r3, #4]
   1923a:	880e      	ldrh	r6, [r1, #0]
   1923c:	b292      	uxth	r2, r2
   1923e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   19242:	605a      	str	r2, [r3, #4]
   19244:	685a      	ldr	r2, [r3, #4]
   19246:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1924a:	f042 0201 	orr.w	r2, r2, #1
   1924e:	605a      	str	r2, [r3, #4]
   19250:	bf00      	nop
   19252:	3801      	subs	r0, #1
   19254:	d1fc      	bne.n	19250 <rpc_transport_ipc_send+0x98>
   19256:	2201      	movs	r2, #1
   19258:	4b17      	ldr	r3, [pc, #92]	; (192b8 <rpc_transport_ipc_send+0x100>)
   1925a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1925e:	682a      	ldr	r2, [r5, #0]
   19260:	880b      	ldrh	r3, [r1, #0]
   19262:	9201      	str	r2, [sp, #4]
   19264:	9a01      	ldr	r2, [sp, #4]
   19266:	3301      	adds	r3, #1
   19268:	800b      	strh	r3, [r1, #0]
   1926a:	b002      	add	sp, #8
   1926c:	bcf0      	pop	{r4, r5, r6, r7}
   1926e:	4770      	bx	lr
   19270:	4281      	cmp	r1, r0
   19272:	d9d0      	bls.n	19216 <rpc_transport_ipc_send+0x5e>
   19274:	e7b4      	b.n	191e0 <rpc_transport_ipc_send+0x28>
   19276:	f24c 0007 	movw	r0, #49159	; 0xc007
   1927a:	b002      	add	sp, #8
   1927c:	bcf0      	pop	{r4, r5, r6, r7}
   1927e:	4770      	bx	lr
   19280:	f24c 000e 	movw	r0, #49166	; 0xc00e
   19284:	4770      	bx	lr
   19286:	f24c 000f 	movw	r0, #49167	; 0xc00f
   1928a:	b002      	add	sp, #8
   1928c:	bcf0      	pop	{r4, r5, r6, r7}
   1928e:	4770      	bx	lr
   19290:	200217d0 	.word	0x200217d0
   19294:	200217c8 	.word	0x200217c8
   19298:	200217cc 	.word	0x200217cc
   1929c:	200217c4 	.word	0x200217c4
   192a0:	20025014 	.word	0x20025014
   192a4:	200217f4 	.word	0x200217f4
   192a8:	4002a00c 	.word	0x4002a00c
   192ac:	200217ec 	.word	0x200217ec
   192b0:	4002a004 	.word	0x4002a004
   192b4:	20023042 	.word	0x20023042
   192b8:	4002a000 	.word	0x4002a000

000192bc <rpc_transport_ipc_tx_rpc_data_alloc>:
   192bc:	4b18      	ldr	r3, [pc, #96]	; (19320 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   192be:	781b      	ldrb	r3, [r3, #0]
   192c0:	bb63      	cbnz	r3, 1931c <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   192c2:	b4f0      	push	{r4, r5, r6, r7}
   192c4:	4a17      	ldr	r2, [pc, #92]	; (19324 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   192c6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   192ca:	6814      	ldr	r4, [r2, #0]
   192cc:	4b16      	ldr	r3, [pc, #88]	; (19328 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   192ce:	6825      	ldr	r5, [r4, #0]
   192d0:	681e      	ldr	r6, [r3, #0]
   192d2:	b1a5      	cbz	r5, 192fe <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   192d4:	4607      	mov	r7, r0
   192d6:	00c1      	lsls	r1, r0, #3
   192d8:	1863      	adds	r3, r4, r1
   192da:	685a      	ldr	r2, [r3, #4]
   192dc:	b2d2      	uxtb	r2, r2
   192de:	2a03      	cmp	r2, #3
   192e0:	d104      	bne.n	192ec <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   192e2:	609f      	str	r7, [r3, #8]
   192e4:	685a      	ldr	r2, [r3, #4]
   192e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   192ea:	605a      	str	r2, [r3, #4]
   192ec:	685a      	ldr	r2, [r3, #4]
   192ee:	f012 0fff 	tst.w	r2, #255	; 0xff
   192f2:	d101      	bne.n	192f8 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   192f4:	689b      	ldr	r3, [r3, #8]
   192f6:	b12b      	cbz	r3, 19304 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   192f8:	3001      	adds	r0, #1
   192fa:	42a8      	cmp	r0, r5
   192fc:	d1eb      	bne.n	192d6 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   192fe:	2000      	movs	r0, #0
   19300:	bcf0      	pop	{r4, r5, r6, r7}
   19302:	4770      	bx	lr
   19304:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   19308:	4421      	add	r1, r4
   1930a:	6088      	str	r0, [r1, #8]
   1930c:	6843      	ldr	r3, [r0, #4]
   1930e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   19312:	f043 0302 	orr.w	r3, r3, #2
   19316:	6043      	str	r3, [r0, #4]
   19318:	bcf0      	pop	{r4, r5, r6, r7}
   1931a:	4770      	bx	lr
   1931c:	2000      	movs	r0, #0
   1931e:	4770      	bx	lr
   19320:	20025014 	.word	0x20025014
   19324:	200217f4 	.word	0x200217f4
   19328:	200217f0 	.word	0x200217f0

0001932c <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   1932c:	b4f0      	push	{r4, r5, r6, r7}
   1932e:	4a15      	ldr	r2, [pc, #84]	; (19384 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   19330:	4b15      	ldr	r3, [pc, #84]	; (19388 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   19332:	6814      	ldr	r4, [r2, #0]
   19334:	681e      	ldr	r6, [r3, #0]
   19336:	6825      	ldr	r5, [r4, #0]
   19338:	b1ad      	cbz	r5, 19366 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   1933a:	2000      	movs	r0, #0
   1933c:	4607      	mov	r7, r0
   1933e:	00c1      	lsls	r1, r0, #3
   19340:	1863      	adds	r3, r4, r1
   19342:	685a      	ldr	r2, [r3, #4]
   19344:	b2d2      	uxtb	r2, r2
   19346:	2a03      	cmp	r2, #3
   19348:	d104      	bne.n	19354 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   1934a:	609f      	str	r7, [r3, #8]
   1934c:	685a      	ldr	r2, [r3, #4]
   1934e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   19352:	605a      	str	r2, [r3, #4]
   19354:	685a      	ldr	r2, [r3, #4]
   19356:	f012 0fff 	tst.w	r2, #255	; 0xff
   1935a:	d101      	bne.n	19360 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   1935c:	689b      	ldr	r3, [r3, #8]
   1935e:	b12b      	cbz	r3, 1936c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   19360:	3001      	adds	r0, #1
   19362:	4285      	cmp	r5, r0
   19364:	d1eb      	bne.n	1933e <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   19366:	2000      	movs	r0, #0
   19368:	bcf0      	pop	{r4, r5, r6, r7}
   1936a:	4770      	bx	lr
   1936c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   19370:	4421      	add	r1, r4
   19372:	6088      	str	r0, [r1, #8]
   19374:	6843      	ldr	r3, [r0, #4]
   19376:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1937a:	f043 0301 	orr.w	r3, r3, #1
   1937e:	6043      	str	r3, [r0, #4]
   19380:	bcf0      	pop	{r4, r5, r6, r7}
   19382:	4770      	bx	lr
   19384:	200217ec 	.word	0x200217ec
   19388:	200217e8 	.word	0x200217e8

0001938c <rpc_transport_ipc_tx_data_alloc>:
   1938c:	4b03      	ldr	r3, [pc, #12]	; (1939c <rpc_transport_ipc_tx_data_alloc+0x10>)
   1938e:	781b      	ldrb	r3, [r3, #0]
   19390:	b90b      	cbnz	r3, 19396 <rpc_transport_ipc_tx_data_alloc+0xa>
   19392:	f006 ba4d 	b.w	1f830 <nrf_shared_malloc>
   19396:	2000      	movs	r0, #0
   19398:	4770      	bx	lr
   1939a:	bf00      	nop
   1939c:	20025014 	.word	0x20025014

000193a0 <rpc_transport_ipc_tx_suspend>:
   193a0:	2201      	movs	r2, #1
   193a2:	4b01      	ldr	r3, [pc, #4]	; (193a8 <rpc_transport_ipc_tx_suspend+0x8>)
   193a4:	701a      	strb	r2, [r3, #0]
   193a6:	4770      	bx	lr
   193a8:	20025014 	.word	0x20025014

000193ac <secure_client_socket>:
   193ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   193b0:	f04f 3cff 	mov.w	ip, #4294967295
   193b4:	460c      	mov	r4, r1
   193b6:	680b      	ldr	r3, [r1, #0]
   193b8:	4f45      	ldr	r7, [pc, #276]	; (194d0 <secure_client_socket+0x124>)
   193ba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   193be:	600b      	str	r3, [r1, #0]
   193c0:	680b      	ldr	r3, [r1, #0]
   193c2:	00c6      	lsls	r6, r0, #3
   193c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   193c8:	600b      	str	r3, [r1, #0]
   193ca:	eb07 0a06 	add.w	sl, r7, r6
   193ce:	b084      	sub	sp, #16
   193d0:	f8da 3004 	ldr.w	r3, [sl, #4]
   193d4:	6989      	ldr	r1, [r1, #24]
   193d6:	f247 0281 	movw	r2, #28801	; 0x7081
   193da:	4605      	mov	r5, r0
   193dc:	f8d4 8000 	ldr.w	r8, [r4]
   193e0:	e9cd cc02 	strd	ip, ip, [sp, #8]
   193e4:	f000 fd76 	bl	19ed4 <ip_interface_request_create>
   193e8:	2800      	cmp	r0, #0
   193ea:	d06c      	beq.n	194c6 <secure_client_socket+0x11a>
   193ec:	f8da 2004 	ldr.w	r2, [sl, #4]
   193f0:	4681      	mov	r9, r0
   193f2:	2a00      	cmp	r2, #0
   193f4:	d15c      	bne.n	194b0 <secure_client_socket+0x104>
   193f6:	4b37      	ldr	r3, [pc, #220]	; (194d4 <secure_client_socket+0x128>)
   193f8:	1971      	adds	r1, r6, r5
   193fa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   193fe:	2224      	movs	r2, #36	; 0x24
   19400:	f109 0014 	add.w	r0, r9, #20
   19404:	f7f3 fbb6 	bl	cb74 <memcpy>
   19408:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1940c:	4649      	mov	r1, r9
   1940e:	3324      	adds	r3, #36	; 0x24
   19410:	f8c9 3008 	str.w	r3, [r9, #8]
   19414:	6822      	ldr	r2, [r4, #0]
   19416:	4643      	mov	r3, r8
   19418:	0c12      	lsrs	r2, r2, #16
   1941a:	0412      	lsls	r2, r2, #16
   1941c:	f042 020a 	orr.w	r2, r2, #10
   19420:	6022      	str	r2, [r4, #0]
   19422:	4620      	mov	r0, r4
   19424:	f247 0281 	movw	r2, #28801	; 0x7081
   19428:	f000 fd74 	bl	19f14 <ip_interface_request_send>
   1942c:	4603      	mov	r3, r0
   1942e:	b968      	cbnz	r0, 1944c <secure_client_socket+0xa0>
   19430:	6823      	ldr	r3, [r4, #0]
   19432:	00db      	lsls	r3, r3, #3
   19434:	d40e      	bmi.n	19454 <secure_client_socket+0xa8>
   19436:	ab03      	add	r3, sp, #12
   19438:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1943c:	210b      	movs	r1, #11
   1943e:	4628      	mov	r0, r5
   19440:	f000 fd7c 	bl	19f3c <ip_interface_wait>
   19444:	4603      	mov	r3, r0
   19446:	b150      	cbz	r0, 1945e <secure_client_socket+0xb2>
   19448:	f8c4 8000 	str.w	r8, [r4]
   1944c:	4618      	mov	r0, r3
   1944e:	b004      	add	sp, #16
   19450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19454:	2373      	movs	r3, #115	; 0x73
   19456:	4618      	mov	r0, r3
   19458:	b004      	add	sp, #16
   1945a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1945e:	220c      	movs	r2, #12
   19460:	ab02      	add	r3, sp, #8
   19462:	4611      	mov	r1, r2
   19464:	4628      	mov	r0, r5
   19466:	f000 fd69 	bl	19f3c <ip_interface_wait>
   1946a:	4603      	mov	r3, r0
   1946c:	bb30      	cbnz	r0, 194bc <secure_client_socket+0x110>
   1946e:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   19472:	b138      	cbz	r0, 19484 <secure_client_socket+0xd8>
   19474:	9301      	str	r3, [sp, #4]
   19476:	f006 f91f 	bl	1f6b8 <nrf_free>
   1947a:	9b01      	ldr	r3, [sp, #4]
   1947c:	443e      	add	r6, r7
   1947e:	6073      	str	r3, [r6, #4]
   19480:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   19484:	4618      	mov	r0, r3
   19486:	6822      	ldr	r2, [r4, #0]
   19488:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   1948c:	6022      	str	r2, [r4, #0]
   1948e:	6822      	ldr	r2, [r4, #0]
   19490:	0c12      	lsrs	r2, r2, #16
   19492:	0412      	lsls	r2, r2, #16
   19494:	f042 020c 	orr.w	r2, r2, #12
   19498:	6022      	str	r2, [r4, #0]
   1949a:	6822      	ldr	r2, [r4, #0]
   1949c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   194a0:	6022      	str	r2, [r4, #0]
   194a2:	6822      	ldr	r2, [r4, #0]
   194a4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   194a8:	6022      	str	r2, [r4, #0]
   194aa:	b004      	add	sp, #16
   194ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   194b0:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   194b4:	6800      	ldr	r0, [r0, #0]
   194b6:	f7f3 fb5d 	bl	cb74 <memcpy>
   194ba:	e79c      	b.n	193f6 <secure_client_socket+0x4a>
   194bc:	2b73      	cmp	r3, #115	; 0x73
   194be:	d0c5      	beq.n	1944c <secure_client_socket+0xa0>
   194c0:	f8c4 8000 	str.w	r8, [r4]
   194c4:	e7c2      	b.n	1944c <secure_client_socket+0xa0>
   194c6:	230c      	movs	r3, #12
   194c8:	4618      	mov	r0, r3
   194ca:	b004      	add	sp, #16
   194cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   194d0:	20021954 	.word	0x20021954
   194d4:	20021810 	.word	0x20021810

000194d8 <tls_interface_init>:
   194d8:	2201      	movs	r2, #1
   194da:	4b02      	ldr	r3, [pc, #8]	; (194e4 <tls_interface_init+0xc>)
   194dc:	2000      	movs	r0, #0
   194de:	701a      	strb	r2, [r3, #0]
   194e0:	4770      	bx	lr
   194e2:	bf00      	nop
   194e4:	20025015 	.word	0x20025015

000194e8 <tls_interface_open>:
   194e8:	b538      	push	{r3, r4, r5, lr}
   194ea:	4b23      	ldr	r3, [pc, #140]	; (19578 <tls_interface_open+0x90>)
   194ec:	781b      	ldrb	r3, [r3, #0]
   194ee:	2b00      	cmp	r3, #0
   194f0:	d03c      	beq.n	1956c <tls_interface_open+0x84>
   194f2:	1e4b      	subs	r3, r1, #1
   194f4:	2b01      	cmp	r3, #1
   194f6:	d808      	bhi.n	1950a <tls_interface_open+0x22>
   194f8:	4614      	mov	r4, r2
   194fa:	b162      	cbz	r2, 19516 <tls_interface_open+0x2e>
   194fc:	2901      	cmp	r1, #1
   194fe:	d02d      	beq.n	1955c <tls_interface_open+0x74>
   19500:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   19504:	bf08      	it	eq
   19506:	2202      	moveq	r2, #2
   19508:	d00d      	beq.n	19526 <tls_interface_open+0x3e>
   1950a:	2029      	movs	r0, #41	; 0x29
   1950c:	f7fc f908 	bl	15720 <bsd_os_errno_set>
   19510:	f04f 35ff 	mov.w	r5, #4294967295
   19514:	e020      	b.n	19558 <tls_interface_open+0x70>
   19516:	2901      	cmp	r1, #1
   19518:	bf0b      	itete	eq
   1951a:	2201      	moveq	r2, #1
   1951c:	2202      	movne	r2, #2
   1951e:	f44f 7482 	moveq.w	r4, #260	; 0x104
   19522:	f44f 7487 	movne.w	r4, #270	; 0x10e
   19526:	f000 fd3b 	bl	19fa0 <ip_interface_open>
   1952a:	1e05      	subs	r5, r0, #0
   1952c:	db1b      	blt.n	19566 <tls_interface_open+0x7e>
   1952e:	4b13      	ldr	r3, [pc, #76]	; (1957c <tls_interface_open+0x94>)
   19530:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   19534:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   19538:	2224      	movs	r2, #36	; 0x24
   1953a:	4911      	ldr	r1, [pc, #68]	; (19580 <tls_interface_open+0x98>)
   1953c:	f7f3 fb1a 	bl	cb74 <memcpy>
   19540:	4628      	mov	r0, r5
   19542:	f006 fdb7 	bl	200b4 <interface_socket_from_handle_get>
   19546:	6803      	ldr	r3, [r0, #0]
   19548:	6144      	str	r4, [r0, #20]
   1954a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1954e:	6003      	str	r3, [r0, #0]
   19550:	6803      	ldr	r3, [r0, #0]
   19552:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   19556:	6003      	str	r3, [r0, #0]
   19558:	4628      	mov	r0, r5
   1955a:	bd38      	pop	{r3, r4, r5, pc}
   1955c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   19560:	d1d3      	bne.n	1950a <tls_interface_open+0x22>
   19562:	460a      	mov	r2, r1
   19564:	e7df      	b.n	19526 <tls_interface_open+0x3e>
   19566:	f04f 35ff 	mov.w	r5, #4294967295
   1956a:	e7f5      	b.n	19558 <tls_interface_open+0x70>
   1956c:	2070      	movs	r0, #112	; 0x70
   1956e:	f7fc f8d7 	bl	15720 <bsd_os_errno_set>
   19572:	f04f 35ff 	mov.w	r5, #4294967295
   19576:	e7ef      	b.n	19558 <tls_interface_open+0x70>
   19578:	20025015 	.word	0x20025015
   1957c:	20021810 	.word	0x20021810
   19580:	0002bc0c 	.word	0x0002bc0c

00019584 <tls_interface_close>:
   19584:	b538      	push	{r3, r4, r5, lr}
   19586:	4604      	mov	r4, r0
   19588:	f006 fd94 	bl	200b4 <interface_socket_from_handle_get>
   1958c:	b180      	cbz	r0, 195b0 <tls_interface_close+0x2c>
   1958e:	4d0b      	ldr	r5, [pc, #44]	; (195bc <tls_interface_close+0x38>)
   19590:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   19594:	b138      	cbz	r0, 195a6 <tls_interface_close+0x22>
   19596:	f006 f88f 	bl	1f6b8 <nrf_free>
   1959a:	2300      	movs	r3, #0
   1959c:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   195a0:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   195a4:	6053      	str	r3, [r2, #4]
   195a6:	4620      	mov	r0, r4
   195a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   195ac:	f000 bdbe 	b.w	1a12c <ip_interface_close>
   195b0:	2009      	movs	r0, #9
   195b2:	f7fc f8b5 	bl	15720 <bsd_os_errno_set>
   195b6:	f04f 30ff 	mov.w	r0, #4294967295
   195ba:	bd38      	pop	{r3, r4, r5, pc}
   195bc:	20021954 	.word	0x20021954

000195c0 <tls_interface_sendto>:
   195c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195c4:	b087      	sub	sp, #28
   195c6:	9103      	str	r1, [sp, #12]
   195c8:	4616      	mov	r6, r2
   195ca:	469b      	mov	fp, r3
   195cc:	4682      	mov	sl, r0
   195ce:	f006 fd71 	bl	200b4 <interface_socket_from_handle_get>
   195d2:	2800      	cmp	r0, #0
   195d4:	f000 8082 	beq.w	196dc <tls_interface_sendto+0x11c>
   195d8:	2400      	movs	r4, #0
   195da:	f01b 0f02 	tst.w	fp, #2
   195de:	bf08      	it	eq
   195e0:	6807      	ldreq	r7, [r0, #0]
   195e2:	4a40      	ldr	r2, [pc, #256]	; (196e4 <tls_interface_sendto+0x124>)
   195e4:	bf08      	it	eq
   195e6:	f087 5780 	eoreq.w	r7, r7, #268435456	; 0x10000000
   195ea:	eb0a 09ca 	add.w	r9, sl, sl, lsl #3
   195ee:	4605      	mov	r5, r0
   195f0:	bf0c      	ite	eq
   195f2:	f3c7 7700 	ubfxeq	r7, r7, #28, #1
   195f6:	2700      	movne	r7, #0
   195f8:	46a0      	mov	r8, r4
   195fa:	f04f 33ff 	mov.w	r3, #4294967295
   195fe:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   19602:	e00f      	b.n	19624 <tls_interface_sendto+0x64>
   19604:	f899 2000 	ldrb.w	r2, [r9]
   19608:	2a02      	cmp	r2, #2
   1960a:	d061      	beq.n	196d0 <tls_interface_sendto+0x110>
   1960c:	692a      	ldr	r2, [r5, #16]
   1960e:	2a01      	cmp	r2, #1
   19610:	d061      	beq.n	196d6 <tls_interface_sendto+0x116>
   19612:	2b00      	cmp	r3, #0
   19614:	db30      	blt.n	19678 <tls_interface_sendto+0xb8>
   19616:	f1b8 0f00 	cmp.w	r8, #0
   1961a:	dc18      	bgt.n	1964e <tls_interface_sendto+0x8e>
   1961c:	441c      	add	r4, r3
   1961e:	b1df      	cbz	r7, 19658 <tls_interface_sendto+0x98>
   19620:	42a6      	cmp	r6, r4
   19622:	dd19      	ble.n	19658 <tls_interface_sendto+0x98>
   19624:	6829      	ldr	r1, [r5, #0]
   19626:	1b32      	subs	r2, r6, r4
   19628:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   1962c:	b289      	uxth	r1, r1
   1962e:	bfa8      	it	ge
   19630:	f44f 6200 	movge.w	r2, #2048	; 0x800
   19634:	290c      	cmp	r1, #12
   19636:	d013      	beq.n	19660 <tls_interface_sendto+0xa0>
   19638:	6829      	ldr	r1, [r5, #0]
   1963a:	b289      	uxth	r1, r1
   1963c:	290b      	cmp	r1, #11
   1963e:	d0e1      	beq.n	19604 <tls_interface_sendto+0x44>
   19640:	6929      	ldr	r1, [r5, #16]
   19642:	2901      	cmp	r1, #1
   19644:	d024      	beq.n	19690 <tls_interface_sendto+0xd0>
   19646:	2902      	cmp	r1, #2
   19648:	d01a      	beq.n	19680 <tls_interface_sendto+0xc0>
   1964a:	f04f 0839 	mov.w	r8, #57	; 0x39
   1964e:	4640      	mov	r0, r8
   19650:	f7fc f866 	bl	15720 <bsd_os_errno_set>
   19654:	f04f 34ff 	mov.w	r4, #4294967295
   19658:	4620      	mov	r0, r4
   1965a:	b007      	add	sp, #28
   1965c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19660:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19662:	9903      	ldr	r1, [sp, #12]
   19664:	9301      	str	r3, [sp, #4]
   19666:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19668:	4421      	add	r1, r4
   1966a:	9300      	str	r3, [sp, #0]
   1966c:	4650      	mov	r0, sl
   1966e:	465b      	mov	r3, fp
   19670:	f000 fdce 	bl	1a210 <ip_interface_sendto>
   19674:	1e03      	subs	r3, r0, #0
   19676:	dad1      	bge.n	1961c <tls_interface_sendto+0x5c>
   19678:	f1b8 0f00 	cmp.w	r8, #0
   1967c:	ddea      	ble.n	19654 <tls_interface_sendto+0x94>
   1967e:	e7e6      	b.n	1964e <tls_interface_sendto+0x8e>
   19680:	6829      	ldr	r1, [r5, #0]
   19682:	b289      	uxth	r1, r1
   19684:	2902      	cmp	r1, #2
   19686:	d007      	beq.n	19698 <tls_interface_sendto+0xd8>
   19688:	6829      	ldr	r1, [r5, #0]
   1968a:	b289      	uxth	r1, r1
   1968c:	2904      	cmp	r1, #4
   1968e:	d003      	beq.n	19698 <tls_interface_sendto+0xd8>
   19690:	6829      	ldr	r1, [r5, #0]
   19692:	b289      	uxth	r1, r1
   19694:	2905      	cmp	r1, #5
   19696:	d1d8      	bne.n	1964a <tls_interface_sendto+0x8a>
   19698:	f899 1000 	ldrb.w	r1, [r9]
   1969c:	2902      	cmp	r1, #2
   1969e:	d1b8      	bne.n	19612 <tls_interface_sendto+0x52>
   196a0:	4629      	mov	r1, r5
   196a2:	4650      	mov	r0, sl
   196a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   196a8:	f7ff fe80 	bl	193ac <secure_client_socket>
   196ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   196b0:	4680      	mov	r8, r0
   196b2:	2800      	cmp	r0, #0
   196b4:	d1ad      	bne.n	19612 <tls_interface_sendto+0x52>
   196b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   196b8:	9903      	ldr	r1, [sp, #12]
   196ba:	9301      	str	r3, [sp, #4]
   196bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   196be:	4421      	add	r1, r4
   196c0:	9300      	str	r3, [sp, #0]
   196c2:	4650      	mov	r0, sl
   196c4:	465b      	mov	r3, fp
   196c6:	f000 fda3 	bl	1a210 <ip_interface_sendto>
   196ca:	1e03      	subs	r3, r0, #0
   196cc:	daa6      	bge.n	1961c <tls_interface_sendto+0x5c>
   196ce:	e7c1      	b.n	19654 <tls_interface_sendto+0x94>
   196d0:	f04f 0823 	mov.w	r8, #35	; 0x23
   196d4:	e7bb      	b.n	1964e <tls_interface_sendto+0x8e>
   196d6:	f04f 082a 	mov.w	r8, #42	; 0x2a
   196da:	e7b8      	b.n	1964e <tls_interface_sendto+0x8e>
   196dc:	f04f 0809 	mov.w	r8, #9
   196e0:	e7b5      	b.n	1964e <tls_interface_sendto+0x8e>
   196e2:	bf00      	nop
   196e4:	20021810 	.word	0x20021810

000196e8 <tls_interface_recvfrom>:
   196e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   196ec:	460d      	mov	r5, r1
   196ee:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   196f2:	4616      	mov	r6, r2
   196f4:	461f      	mov	r7, r3
   196f6:	4604      	mov	r4, r0
   196f8:	f006 fcdc 	bl	200b4 <interface_socket_from_handle_get>
   196fc:	2800      	cmp	r0, #0
   196fe:	d038      	beq.n	19772 <tls_interface_recvfrom+0x8a>
   19700:	6803      	ldr	r3, [r0, #0]
   19702:	b29b      	uxth	r3, r3
   19704:	2b0c      	cmp	r3, #12
   19706:	d00f      	beq.n	19728 <tls_interface_recvfrom+0x40>
   19708:	6803      	ldr	r3, [r0, #0]
   1970a:	b29b      	uxth	r3, r3
   1970c:	2b0d      	cmp	r3, #13
   1970e:	d00b      	beq.n	19728 <tls_interface_recvfrom+0x40>
   19710:	6903      	ldr	r3, [r0, #16]
   19712:	2b01      	cmp	r3, #1
   19714:	d01a      	beq.n	1974c <tls_interface_recvfrom+0x64>
   19716:	2b02      	cmp	r3, #2
   19718:	d010      	beq.n	1973c <tls_interface_recvfrom+0x54>
   1971a:	2023      	movs	r0, #35	; 0x23
   1971c:	f7fc f800 	bl	15720 <bsd_os_errno_set>
   19720:	f04f 30ff 	mov.w	r0, #4294967295
   19724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19728:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1972c:	463b      	mov	r3, r7
   1972e:	4632      	mov	r2, r6
   19730:	4629      	mov	r1, r5
   19732:	4620      	mov	r0, r4
   19734:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19738:	f000 bee6 	b.w	1a508 <ip_interface_recvfrom>
   1973c:	6803      	ldr	r3, [r0, #0]
   1973e:	b29b      	uxth	r3, r3
   19740:	2b02      	cmp	r3, #2
   19742:	d007      	beq.n	19754 <tls_interface_recvfrom+0x6c>
   19744:	6803      	ldr	r3, [r0, #0]
   19746:	b29b      	uxth	r3, r3
   19748:	2b04      	cmp	r3, #4
   1974a:	d003      	beq.n	19754 <tls_interface_recvfrom+0x6c>
   1974c:	6803      	ldr	r3, [r0, #0]
   1974e:	b29b      	uxth	r3, r3
   19750:	2b05      	cmp	r3, #5
   19752:	d1e2      	bne.n	1971a <tls_interface_recvfrom+0x32>
   19754:	4b08      	ldr	r3, [pc, #32]	; (19778 <tls_interface_recvfrom+0x90>)
   19756:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1975a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1975e:	2b02      	cmp	r3, #2
   19760:	d1db      	bne.n	1971a <tls_interface_recvfrom+0x32>
   19762:	4601      	mov	r1, r0
   19764:	4620      	mov	r0, r4
   19766:	f7ff fe21 	bl	193ac <secure_client_socket>
   1976a:	2800      	cmp	r0, #0
   1976c:	d0dc      	beq.n	19728 <tls_interface_recvfrom+0x40>
   1976e:	dcd5      	bgt.n	1971c <tls_interface_recvfrom+0x34>
   19770:	e7d6      	b.n	19720 <tls_interface_recvfrom+0x38>
   19772:	2009      	movs	r0, #9
   19774:	e7d2      	b.n	1971c <tls_interface_recvfrom+0x34>
   19776:	bf00      	nop
   19778:	20021810 	.word	0x20021810

0001977c <tls_interface_bind>:
   1977c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19780:	b082      	sub	sp, #8
   19782:	460e      	mov	r6, r1
   19784:	4617      	mov	r7, r2
   19786:	4605      	mov	r5, r0
   19788:	f006 fc94 	bl	200b4 <interface_socket_from_handle_get>
   1978c:	2800      	cmp	r0, #0
   1978e:	d069      	beq.n	19864 <tls_interface_bind+0xe8>
   19790:	6803      	ldr	r3, [r0, #0]
   19792:	4604      	mov	r4, r0
   19794:	b29b      	uxth	r3, r3
   19796:	2b02      	cmp	r3, #2
   19798:	d158      	bne.n	1984c <tls_interface_bind+0xd0>
   1979a:	463a      	mov	r2, r7
   1979c:	4631      	mov	r1, r6
   1979e:	4628      	mov	r0, r5
   197a0:	f001 f9c2 	bl	1ab28 <ip_interface_bind>
   197a4:	2800      	cmp	r0, #0
   197a6:	d148      	bne.n	1983a <tls_interface_bind+0xbe>
   197a8:	00ee      	lsls	r6, r5, #3
   197aa:	4f2f      	ldr	r7, [pc, #188]	; (19868 <tls_interface_bind+0xec>)
   197ac:	1973      	adds	r3, r6, r5
   197ae:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   197b2:	2b01      	cmp	r3, #1
   197b4:	d002      	beq.n	197bc <tls_interface_bind+0x40>
   197b6:	b002      	add	sp, #8
   197b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   197bc:	f04f 3cff 	mov.w	ip, #4294967295
   197c0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 1986c <tls_interface_bind+0xf0>
   197c4:	f247 0281 	movw	r2, #28801	; 0x7081
   197c8:	eb0a 0906 	add.w	r9, sl, r6
   197cc:	f8d9 3004 	ldr.w	r3, [r9, #4]
   197d0:	69a1      	ldr	r1, [r4, #24]
   197d2:	4628      	mov	r0, r5
   197d4:	f8cd c004 	str.w	ip, [sp, #4]
   197d8:	f000 fb7c 	bl	19ed4 <ip_interface_request_create>
   197dc:	4680      	mov	r8, r0
   197de:	2800      	cmp	r0, #0
   197e0:	d03e      	beq.n	19860 <tls_interface_bind+0xe4>
   197e2:	f8d9 2004 	ldr.w	r2, [r9, #4]
   197e6:	bbaa      	cbnz	r2, 19854 <tls_interface_bind+0xd8>
   197e8:	1971      	adds	r1, r6, r5
   197ea:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   197ee:	2224      	movs	r2, #36	; 0x24
   197f0:	f108 0014 	add.w	r0, r8, #20
   197f4:	f7f3 f9be 	bl	cb74 <memcpy>
   197f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   197fc:	4641      	mov	r1, r8
   197fe:	3324      	adds	r3, #36	; 0x24
   19800:	f8c8 3008 	str.w	r3, [r8, #8]
   19804:	6822      	ldr	r2, [r4, #0]
   19806:	2304      	movs	r3, #4
   19808:	0c12      	lsrs	r2, r2, #16
   1980a:	0412      	lsls	r2, r2, #16
   1980c:	f042 020a 	orr.w	r2, r2, #10
   19810:	6022      	str	r2, [r4, #0]
   19812:	4620      	mov	r0, r4
   19814:	f247 0281 	movw	r2, #28801	; 0x7081
   19818:	f000 fb7c 	bl	19f14 <ip_interface_request_send>
   1981c:	b968      	cbnz	r0, 1983a <tls_interface_bind+0xbe>
   1981e:	6823      	ldr	r3, [r4, #0]
   19820:	00db      	lsls	r3, r3, #3
   19822:	d415      	bmi.n	19850 <tls_interface_bind+0xd4>
   19824:	4628      	mov	r0, r5
   19826:	ab01      	add	r3, sp, #4
   19828:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1982c:	210b      	movs	r1, #11
   1982e:	f000 fb85 	bl	19f3c <ip_interface_wait>
   19832:	2800      	cmp	r0, #0
   19834:	d0bf      	beq.n	197b6 <tls_interface_bind+0x3a>
   19836:	2304      	movs	r3, #4
   19838:	6023      	str	r3, [r4, #0]
   1983a:	2800      	cmp	r0, #0
   1983c:	ddbb      	ble.n	197b6 <tls_interface_bind+0x3a>
   1983e:	f7fb ff6f 	bl	15720 <bsd_os_errno_set>
   19842:	f04f 30ff 	mov.w	r0, #4294967295
   19846:	b002      	add	sp, #8
   19848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1984c:	202d      	movs	r0, #45	; 0x2d
   1984e:	e7f6      	b.n	1983e <tls_interface_bind+0xc2>
   19850:	2073      	movs	r0, #115	; 0x73
   19852:	e7f4      	b.n	1983e <tls_interface_bind+0xc2>
   19854:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   19858:	6800      	ldr	r0, [r0, #0]
   1985a:	f7f3 f98b 	bl	cb74 <memcpy>
   1985e:	e7c3      	b.n	197e8 <tls_interface_bind+0x6c>
   19860:	200c      	movs	r0, #12
   19862:	e7ec      	b.n	1983e <tls_interface_bind+0xc2>
   19864:	2009      	movs	r0, #9
   19866:	e7ea      	b.n	1983e <tls_interface_bind+0xc2>
   19868:	20021810 	.word	0x20021810
   1986c:	20021954 	.word	0x20021954

00019870 <tls_interface_connect>:
   19870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19872:	460e      	mov	r6, r1
   19874:	4617      	mov	r7, r2
   19876:	4604      	mov	r4, r0
   19878:	f006 fc1c 	bl	200b4 <interface_socket_from_handle_get>
   1987c:	b1e8      	cbz	r0, 198ba <tls_interface_connect+0x4a>
   1987e:	4b13      	ldr	r3, [pc, #76]	; (198cc <tls_interface_connect+0x5c>)
   19880:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   19884:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   19888:	2b02      	cmp	r3, #2
   1988a:	d11c      	bne.n	198c6 <tls_interface_connect+0x56>
   1988c:	6803      	ldr	r3, [r0, #0]
   1988e:	4605      	mov	r5, r0
   19890:	b29b      	uxth	r3, r3
   19892:	2b02      	cmp	r3, #2
   19894:	d003      	beq.n	1989e <tls_interface_connect+0x2e>
   19896:	6803      	ldr	r3, [r0, #0]
   19898:	b29b      	uxth	r3, r3
   1989a:	2b04      	cmp	r3, #4
   1989c:	d113      	bne.n	198c6 <tls_interface_connect+0x56>
   1989e:	463a      	mov	r2, r7
   198a0:	4631      	mov	r1, r6
   198a2:	4620      	mov	r0, r4
   198a4:	f000 ff58 	bl	1a758 <ip_interface_connect>
   198a8:	b110      	cbz	r0, 198b0 <tls_interface_connect+0x40>
   198aa:	2800      	cmp	r0, #0
   198ac:	dc06      	bgt.n	198bc <tls_interface_connect+0x4c>
   198ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   198b0:	4629      	mov	r1, r5
   198b2:	4620      	mov	r0, r4
   198b4:	f7ff fd7a 	bl	193ac <secure_client_socket>
   198b8:	e7f7      	b.n	198aa <tls_interface_connect+0x3a>
   198ba:	2009      	movs	r0, #9
   198bc:	f7fb ff30 	bl	15720 <bsd_os_errno_set>
   198c0:	f04f 30ff 	mov.w	r0, #4294967295
   198c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   198c6:	202d      	movs	r0, #45	; 0x2d
   198c8:	e7f8      	b.n	198bc <tls_interface_connect+0x4c>
   198ca:	bf00      	nop
   198cc:	20021810 	.word	0x20021810

000198d0 <tls_interface_listen>:
   198d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198d4:	b085      	sub	sp, #20
   198d6:	4689      	mov	r9, r1
   198d8:	4605      	mov	r5, r0
   198da:	f006 fbeb 	bl	200b4 <interface_socket_from_handle_get>
   198de:	2800      	cmp	r0, #0
   198e0:	f000 8084 	beq.w	199ec <tls_interface_listen+0x11c>
   198e4:	6803      	ldr	r3, [r0, #0]
   198e6:	4604      	mov	r4, r0
   198e8:	00da      	lsls	r2, r3, #3
   198ea:	d47d      	bmi.n	199e8 <tls_interface_listen+0x118>
   198ec:	6903      	ldr	r3, [r0, #16]
   198ee:	2b01      	cmp	r3, #1
   198f0:	d17a      	bne.n	199e8 <tls_interface_listen+0x118>
   198f2:	6803      	ldr	r3, [r0, #0]
   198f4:	b29b      	uxth	r3, r3
   198f6:	2b04      	cmp	r3, #4
   198f8:	d05d      	beq.n	199b6 <tls_interface_listen+0xe6>
   198fa:	6823      	ldr	r3, [r4, #0]
   198fc:	b29b      	uxth	r3, r3
   198fe:	2b0b      	cmp	r3, #11
   19900:	d172      	bne.n	199e8 <tls_interface_listen+0x118>
   19902:	4a3b      	ldr	r2, [pc, #236]	; (199f0 <tls_interface_listen+0x120>)
   19904:	00ee      	lsls	r6, r5, #3
   19906:	1973      	adds	r3, r6, r5
   19908:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1990c:	9201      	str	r2, [sp, #4]
   1990e:	2b01      	cmp	r3, #1
   19910:	d16a      	bne.n	199e8 <tls_interface_listen+0x118>
   19912:	2201      	movs	r2, #1
   19914:	9901      	ldr	r1, [sp, #4]
   19916:	1973      	adds	r3, r6, r5
   19918:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
   1991c:	6823      	ldr	r3, [r4, #0]
   1991e:	2b0b      	cmp	r3, #11
   19920:	d040      	beq.n	199a4 <tls_interface_listen+0xd4>
   19922:	f04f 3cff 	mov.w	ip, #4294967295
   19926:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 199f4 <tls_interface_listen+0x124>
   1992a:	f247 0281 	movw	r2, #28801	; 0x7081
   1992e:	eb0a 0806 	add.w	r8, sl, r6
   19932:	f8d8 3004 	ldr.w	r3, [r8, #4]
   19936:	69a1      	ldr	r1, [r4, #24]
   19938:	4628      	mov	r0, r5
   1993a:	6827      	ldr	r7, [r4, #0]
   1993c:	f8cd c00c 	str.w	ip, [sp, #12]
   19940:	f000 fac8 	bl	19ed4 <ip_interface_request_create>
   19944:	4683      	mov	fp, r0
   19946:	2800      	cmp	r0, #0
   19948:	d046      	beq.n	199d8 <tls_interface_listen+0x108>
   1994a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1994e:	2a00      	cmp	r2, #0
   19950:	d144      	bne.n	199dc <tls_interface_listen+0x10c>
   19952:	9b01      	ldr	r3, [sp, #4]
   19954:	1971      	adds	r1, r6, r5
   19956:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1995a:	2224      	movs	r2, #36	; 0x24
   1995c:	f10b 0014 	add.w	r0, fp, #20
   19960:	f7f3 f908 	bl	cb74 <memcpy>
   19964:	f8db 2008 	ldr.w	r2, [fp, #8]
   19968:	4659      	mov	r1, fp
   1996a:	3224      	adds	r2, #36	; 0x24
   1996c:	f8cb 2008 	str.w	r2, [fp, #8]
   19970:	6822      	ldr	r2, [r4, #0]
   19972:	463b      	mov	r3, r7
   19974:	0c12      	lsrs	r2, r2, #16
   19976:	0412      	lsls	r2, r2, #16
   19978:	f042 020a 	orr.w	r2, r2, #10
   1997c:	6022      	str	r2, [r4, #0]
   1997e:	4620      	mov	r0, r4
   19980:	f247 0281 	movw	r2, #28801	; 0x7081
   19984:	f000 fac6 	bl	19f14 <ip_interface_request_send>
   19988:	b980      	cbnz	r0, 199ac <tls_interface_listen+0xdc>
   1998a:	6823      	ldr	r3, [r4, #0]
   1998c:	00db      	lsls	r3, r3, #3
   1998e:	d41b      	bmi.n	199c8 <tls_interface_listen+0xf8>
   19990:	ab03      	add	r3, sp, #12
   19992:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19996:	210b      	movs	r1, #11
   19998:	4628      	mov	r0, r5
   1999a:	f000 facf 	bl	19f3c <ip_interface_wait>
   1999e:	b108      	cbz	r0, 199a4 <tls_interface_listen+0xd4>
   199a0:	6027      	str	r7, [r4, #0]
   199a2:	e003      	b.n	199ac <tls_interface_listen+0xdc>
   199a4:	4649      	mov	r1, r9
   199a6:	4628      	mov	r0, r5
   199a8:	f001 f960 	bl	1ac6c <ip_interface_listen>
   199ac:	2800      	cmp	r0, #0
   199ae:	dc0c      	bgt.n	199ca <tls_interface_listen+0xfa>
   199b0:	b005      	add	sp, #20
   199b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199b6:	4a0e      	ldr	r2, [pc, #56]	; (199f0 <tls_interface_listen+0x120>)
   199b8:	00ee      	lsls	r6, r5, #3
   199ba:	1973      	adds	r3, r6, r5
   199bc:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   199c0:	9201      	str	r2, [sp, #4]
   199c2:	2b02      	cmp	r3, #2
   199c4:	d199      	bne.n	198fa <tls_interface_listen+0x2a>
   199c6:	e7a4      	b.n	19912 <tls_interface_listen+0x42>
   199c8:	2073      	movs	r0, #115	; 0x73
   199ca:	f7fb fea9 	bl	15720 <bsd_os_errno_set>
   199ce:	f04f 30ff 	mov.w	r0, #4294967295
   199d2:	b005      	add	sp, #20
   199d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199d8:	200c      	movs	r0, #12
   199da:	e7f6      	b.n	199ca <tls_interface_listen+0xfa>
   199dc:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   199e0:	6800      	ldr	r0, [r0, #0]
   199e2:	f7f3 f8c7 	bl	cb74 <memcpy>
   199e6:	e7b4      	b.n	19952 <tls_interface_listen+0x82>
   199e8:	202d      	movs	r0, #45	; 0x2d
   199ea:	e7ee      	b.n	199ca <tls_interface_listen+0xfa>
   199ec:	2009      	movs	r0, #9
   199ee:	e7ec      	b.n	199ca <tls_interface_listen+0xfa>
   199f0:	20021810 	.word	0x20021810
   199f4:	20021954 	.word	0x20021954

000199f8 <tls_interface_accept>:
   199f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   199fc:	b083      	sub	sp, #12
   199fe:	460f      	mov	r7, r1
   19a00:	4690      	mov	r8, r2
   19a02:	4699      	mov	r9, r3
   19a04:	4606      	mov	r6, r0
   19a06:	f04f 34ff 	mov.w	r4, #4294967295
   19a0a:	f006 fb53 	bl	200b4 <interface_socket_from_handle_get>
   19a0e:	9401      	str	r4, [sp, #4]
   19a10:	2800      	cmp	r0, #0
   19a12:	d048      	beq.n	19aa6 <tls_interface_accept+0xae>
   19a14:	6805      	ldr	r5, [r0, #0]
   19a16:	b2ad      	uxth	r5, r5
   19a18:	2d07      	cmp	r5, #7
   19a1a:	d144      	bne.n	19aa6 <tls_interface_accept+0xae>
   19a1c:	6803      	ldr	r3, [r0, #0]
   19a1e:	00db      	lsls	r3, r3, #3
   19a20:	d443      	bmi.n	19aaa <tls_interface_accept+0xb2>
   19a22:	464b      	mov	r3, r9
   19a24:	4642      	mov	r2, r8
   19a26:	4639      	mov	r1, r7
   19a28:	4630      	mov	r0, r6
   19a2a:	f001 f99b 	bl	1ad64 <ip_interface_accept>
   19a2e:	1e04      	subs	r4, r0, #0
   19a30:	da08      	bge.n	19a44 <tls_interface_accept+0x4c>
   19a32:	4620      	mov	r0, r4
   19a34:	f7fb fe74 	bl	15720 <bsd_os_errno_set>
   19a38:	f04f 34ff 	mov.w	r4, #4294967295
   19a3c:	4620      	mov	r0, r4
   19a3e:	b003      	add	sp, #12
   19a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19a44:	f006 fb36 	bl	200b4 <interface_socket_from_handle_get>
   19a48:	6803      	ldr	r3, [r0, #0]
   19a4a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 19ab4 <tls_interface_accept+0xbc>
   19a4e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   19a52:	6003      	str	r3, [r0, #0]
   19a54:	6803      	ldr	r3, [r0, #0]
   19a56:	eb04 07c4 	add.w	r7, r4, r4, lsl #3
   19a5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   19a5e:	00bf      	lsls	r7, r7, #2
   19a60:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   19a64:	4605      	mov	r5, r0
   19a66:	6003      	str	r3, [r0, #0]
   19a68:	eb08 0186 	add.w	r1, r8, r6, lsl #2
   19a6c:	2224      	movs	r2, #36	; 0x24
   19a6e:	eb08 0007 	add.w	r0, r8, r7
   19a72:	f7f3 f87f 	bl	cb74 <memcpy>
   19a76:	2302      	movs	r3, #2
   19a78:	f808 3007 	strb.w	r3, [r8, r7]
   19a7c:	682a      	ldr	r2, [r5, #0]
   19a7e:	ab01      	add	r3, sp, #4
   19a80:	0c12      	lsrs	r2, r2, #16
   19a82:	0412      	lsls	r2, r2, #16
   19a84:	f042 020b 	orr.w	r2, r2, #11
   19a88:	602a      	str	r2, [r5, #0]
   19a8a:	210c      	movs	r1, #12
   19a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19a90:	4620      	mov	r0, r4
   19a92:	f000 fa53 	bl	19f3c <ip_interface_wait>
   19a96:	4605      	mov	r5, r0
   19a98:	2800      	cmp	r0, #0
   19a9a:	d0cf      	beq.n	19a3c <tls_interface_accept+0x44>
   19a9c:	4620      	mov	r0, r4
   19a9e:	f000 fb45 	bl	1a12c <ip_interface_close>
   19aa2:	462c      	mov	r4, r5
   19aa4:	e7c5      	b.n	19a32 <tls_interface_accept+0x3a>
   19aa6:	2409      	movs	r4, #9
   19aa8:	e7c3      	b.n	19a32 <tls_interface_accept+0x3a>
   19aaa:	202d      	movs	r0, #45	; 0x2d
   19aac:	f7fb fe38 	bl	15720 <bsd_os_errno_set>
   19ab0:	e7c4      	b.n	19a3c <tls_interface_accept+0x44>
   19ab2:	bf00      	nop
   19ab4:	20021810 	.word	0x20021810

00019ab8 <tls_interface_setopt>:
   19ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19abc:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   19ac0:	b082      	sub	sp, #8
   19ac2:	9e08      	ldr	r6, [sp, #32]
   19ac4:	d120      	bne.n	19b08 <tls_interface_setopt+0x50>
   19ac6:	4698      	mov	r8, r3
   19ac8:	4617      	mov	r7, r2
   19aca:	4605      	mov	r5, r0
   19acc:	2b00      	cmp	r3, #0
   19ace:	f000 80a0 	beq.w	19c12 <tls_interface_setopt+0x15a>
   19ad2:	f006 faef 	bl	200b4 <interface_socket_from_handle_get>
   19ad6:	2800      	cmp	r0, #0
   19ad8:	f000 8097 	beq.w	19c0a <tls_interface_setopt+0x152>
   19adc:	6804      	ldr	r4, [r0, #0]
   19ade:	b2a4      	uxth	r4, r4
   19ae0:	2c02      	cmp	r4, #2
   19ae2:	d008      	beq.n	19af6 <tls_interface_setopt+0x3e>
   19ae4:	6803      	ldr	r3, [r0, #0]
   19ae6:	b29b      	uxth	r3, r3
   19ae8:	2b04      	cmp	r3, #4
   19aea:	d004      	beq.n	19af6 <tls_interface_setopt+0x3e>
   19aec:	6803      	ldr	r3, [r0, #0]
   19aee:	b29b      	uxth	r3, r3
   19af0:	2b05      	cmp	r3, #5
   19af2:	f040 808a 	bne.w	19c0a <tls_interface_setopt+0x152>
   19af6:	1e7a      	subs	r2, r7, #1
   19af8:	2a05      	cmp	r2, #5
   19afa:	f200 8090 	bhi.w	19c1e <tls_interface_setopt+0x166>
   19afe:	e8df f002 	tbb	[pc, r2]
   19b02:	2718      	.short	0x2718
   19b04:	08594b3c 	.word	0x08594b3c
   19b08:	b002      	add	sp, #8
   19b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19b0e:	f001 ba6b 	b.w	1afe8 <ip_interface_setopt>
   19b12:	4601      	mov	r1, r0
   19b14:	e9cd 8600 	strd	r8, r6, [sp]
   19b18:	4628      	mov	r0, r5
   19b1a:	f247 0301 	movw	r3, #28673	; 0x7001
   19b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
   19b22:	f000 ff8b 	bl	1aa3c <ip_interface_socketoption_send>
   19b26:	2800      	cmp	r0, #0
   19b28:	d161      	bne.n	19bee <tls_interface_setopt+0x136>
   19b2a:	2000      	movs	r0, #0
   19b2c:	b002      	add	sp, #8
   19b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19b32:	2e04      	cmp	r6, #4
   19b34:	d15a      	bne.n	19bec <tls_interface_setopt+0x134>
   19b36:	f8d8 0000 	ldr.w	r0, [r8]
   19b3a:	2800      	cmp	r0, #0
   19b3c:	d05e      	beq.n	19bfc <tls_interface_setopt+0x144>
   19b3e:	2801      	cmp	r0, #1
   19b40:	d154      	bne.n	19bec <tls_interface_setopt+0x134>
   19b42:	4b38      	ldr	r3, [pc, #224]	; (19c24 <tls_interface_setopt+0x16c>)
   19b44:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   19b48:	f803 0024 	strb.w	r0, [r3, r4, lsl #2]
   19b4c:	2000      	movs	r0, #0
   19b4e:	e7ed      	b.n	19b2c <tls_interface_setopt+0x74>
   19b50:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   19b54:	d04a      	beq.n	19bec <tls_interface_setopt+0x134>
   19b56:	f016 0703 	ands.w	r7, r6, #3
   19b5a:	d147      	bne.n	19bec <tls_interface_setopt+0x134>
   19b5c:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   19b60:	00a4      	lsls	r4, r4, #2
   19b62:	4b30      	ldr	r3, [pc, #192]	; (19c24 <tls_interface_setopt+0x16c>)
   19b64:	1d20      	adds	r0, r4, #4
   19b66:	4418      	add	r0, r3
   19b68:	4423      	add	r3, r4
   19b6a:	4632      	mov	r2, r6
   19b6c:	4641      	mov	r1, r8
   19b6e:	f883 c003 	strb.w	ip, [r3, #3]
   19b72:	f7f2 ffff 	bl	cb74 <memcpy>
   19b76:	4638      	mov	r0, r7
   19b78:	e7d8      	b.n	19b2c <tls_interface_setopt+0x74>
   19b7a:	2e01      	cmp	r6, #1
   19b7c:	d136      	bne.n	19bec <tls_interface_setopt+0x134>
   19b7e:	f898 2000 	ldrb.w	r2, [r8]
   19b82:	4b28      	ldr	r3, [pc, #160]	; (19c24 <tls_interface_setopt+0x16c>)
   19b84:	3200      	adds	r2, #0
   19b86:	bf18      	it	ne
   19b88:	2201      	movne	r2, #1
   19b8a:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   19b8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   19b92:	7062      	strb	r2, [r4, #1]
   19b94:	2000      	movs	r0, #0
   19b96:	e7c9      	b.n	19b2c <tls_interface_setopt+0x74>
   19b98:	2e04      	cmp	r6, #4
   19b9a:	d127      	bne.n	19bec <tls_interface_setopt+0x134>
   19b9c:	f8d8 2000 	ldr.w	r2, [r8]
   19ba0:	2a02      	cmp	r2, #2
   19ba2:	d823      	bhi.n	19bec <tls_interface_setopt+0x134>
   19ba4:	4b1f      	ldr	r3, [pc, #124]	; (19c24 <tls_interface_setopt+0x16c>)
   19ba6:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   19baa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   19bae:	70a2      	strb	r2, [r4, #2]
   19bb0:	2000      	movs	r0, #0
   19bb2:	e7bb      	b.n	19b2c <tls_interface_setopt+0x74>
   19bb4:	4c1c      	ldr	r4, [pc, #112]	; (19c28 <tls_interface_setopt+0x170>)
   19bb6:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   19bba:	b138      	cbz	r0, 19bcc <tls_interface_setopt+0x114>
   19bbc:	f005 fd7c 	bl	1f6b8 <nrf_free>
   19bc0:	2200      	movs	r2, #0
   19bc2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   19bc6:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   19bca:	605a      	str	r2, [r3, #4]
   19bcc:	2e00      	cmp	r6, #0
   19bce:	d0ac      	beq.n	19b2a <tls_interface_setopt+0x72>
   19bd0:	4630      	mov	r0, r6
   19bd2:	f005 fd67 	bl	1f6a4 <nrf_malloc>
   19bd6:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   19bda:	b1c0      	cbz	r0, 19c0e <tls_interface_setopt+0x156>
   19bdc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   19be0:	4632      	mov	r2, r6
   19be2:	4641      	mov	r1, r8
   19be4:	6066      	str	r6, [r4, #4]
   19be6:	f7f2 ffc5 	bl	cb74 <memcpy>
   19bea:	e79e      	b.n	19b2a <tls_interface_setopt+0x72>
   19bec:	2016      	movs	r0, #22
   19bee:	f7fb fd97 	bl	15720 <bsd_os_errno_set>
   19bf2:	f04f 30ff 	mov.w	r0, #4294967295
   19bf6:	b002      	add	sp, #8
   19bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19bfc:	2202      	movs	r2, #2
   19bfe:	4b09      	ldr	r3, [pc, #36]	; (19c24 <tls_interface_setopt+0x16c>)
   19c00:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   19c04:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
   19c08:	e790      	b.n	19b2c <tls_interface_setopt+0x74>
   19c0a:	2009      	movs	r0, #9
   19c0c:	e7ef      	b.n	19bee <tls_interface_setopt+0x136>
   19c0e:	200c      	movs	r0, #12
   19c10:	e7ed      	b.n	19bee <tls_interface_setopt+0x136>
   19c12:	200e      	movs	r0, #14
   19c14:	f7fb fd84 	bl	15720 <bsd_os_errno_set>
   19c18:	f04f 30ff 	mov.w	r0, #4294967295
   19c1c:	e786      	b.n	19b2c <tls_interface_setopt+0x74>
   19c1e:	202a      	movs	r0, #42	; 0x2a
   19c20:	e7e5      	b.n	19bee <tls_interface_setopt+0x136>
   19c22:	bf00      	nop
   19c24:	20021810 	.word	0x20021810
   19c28:	20021954 	.word	0x20021954

00019c2c <tls_interface_getopt>:
   19c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c2e:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   19c32:	b083      	sub	sp, #12
   19c34:	9f08      	ldr	r7, [sp, #32]
   19c36:	d112      	bne.n	19c5e <tls_interface_getopt+0x32>
   19c38:	461d      	mov	r5, r3
   19c3a:	b16b      	cbz	r3, 19c58 <tls_interface_getopt+0x2c>
   19c3c:	b167      	cbz	r7, 19c58 <tls_interface_getopt+0x2c>
   19c3e:	4606      	mov	r6, r0
   19c40:	4614      	mov	r4, r2
   19c42:	f006 fa37 	bl	200b4 <interface_socket_from_handle_get>
   19c46:	b178      	cbz	r0, 19c68 <tls_interface_getopt+0x3c>
   19c48:	3c01      	subs	r4, #1
   19c4a:	2c05      	cmp	r4, #5
   19c4c:	d859      	bhi.n	19d02 <tls_interface_getopt+0xd6>
   19c4e:	e8df f004 	tbb	[pc, r4]
   19c52:	2818      	.short	0x2818
   19c54:	0d584c40 	.word	0x0d584c40
   19c58:	200e      	movs	r0, #14
   19c5a:	b003      	add	sp, #12
   19c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19c5e:	b003      	add	sp, #12
   19c60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   19c64:	f001 ba62 	b.w	1b12c <ip_interface_getopt>
   19c68:	2009      	movs	r0, #9
   19c6a:	e7f6      	b.n	19c5a <tls_interface_getopt+0x2e>
   19c6c:	4601      	mov	r1, r0
   19c6e:	e9cd 5700 	strd	r5, r7, [sp]
   19c72:	4630      	mov	r0, r6
   19c74:	f247 0301 	movw	r3, #28673	; 0x7001
   19c78:	f44f 7280 	mov.w	r2, #256	; 0x100
   19c7c:	f000 fe2e 	bl	1a8dc <ip_interface_socketoption_get>
   19c80:	e7eb      	b.n	19c5a <tls_interface_getopt+0x2e>
   19c82:	683b      	ldr	r3, [r7, #0]
   19c84:	2b04      	cmp	r3, #4
   19c86:	d13e      	bne.n	19d06 <tls_interface_getopt+0xda>
   19c88:	4b22      	ldr	r3, [pc, #136]	; (19d14 <tls_interface_getopt+0xe8>)
   19c8a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   19c8e:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   19c92:	2000      	movs	r0, #0
   19c94:	f1a3 0301 	sub.w	r3, r3, #1
   19c98:	fab3 f383 	clz	r3, r3
   19c9c:	095b      	lsrs	r3, r3, #5
   19c9e:	602b      	str	r3, [r5, #0]
   19ca0:	e7db      	b.n	19c5a <tls_interface_getopt+0x2e>
   19ca2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   19ca6:	491b      	ldr	r1, [pc, #108]	; (19d14 <tls_interface_getopt+0xe8>)
   19ca8:	683b      	ldr	r3, [r7, #0]
   19caa:	00b6      	lsls	r6, r6, #2
   19cac:	198a      	adds	r2, r1, r6
   19cae:	f013 0403 	ands.w	r4, r3, #3
   19cb2:	78d0      	ldrb	r0, [r2, #3]
   19cb4:	d129      	bne.n	19d0a <tls_interface_getopt+0xde>
   19cb6:	089b      	lsrs	r3, r3, #2
   19cb8:	4283      	cmp	r3, r0
   19cba:	bf28      	it	cs
   19cbc:	4603      	movcs	r3, r0
   19cbe:	009a      	lsls	r2, r3, #2
   19cc0:	b31b      	cbz	r3, 19d0a <tls_interface_getopt+0xde>
   19cc2:	3604      	adds	r6, #4
   19cc4:	4431      	add	r1, r6
   19cc6:	603a      	str	r2, [r7, #0]
   19cc8:	4628      	mov	r0, r5
   19cca:	f7f2 ff53 	bl	cb74 <memcpy>
   19cce:	4620      	mov	r0, r4
   19cd0:	e7c3      	b.n	19c5a <tls_interface_getopt+0x2e>
   19cd2:	683b      	ldr	r3, [r7, #0]
   19cd4:	2b01      	cmp	r3, #1
   19cd6:	d116      	bne.n	19d06 <tls_interface_getopt+0xda>
   19cd8:	4b0e      	ldr	r3, [pc, #56]	; (19d14 <tls_interface_getopt+0xe8>)
   19cda:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   19cde:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   19ce2:	7873      	ldrb	r3, [r6, #1]
   19ce4:	2000      	movs	r0, #0
   19ce6:	702b      	strb	r3, [r5, #0]
   19ce8:	e7b7      	b.n	19c5a <tls_interface_getopt+0x2e>
   19cea:	683b      	ldr	r3, [r7, #0]
   19cec:	2b04      	cmp	r3, #4
   19cee:	d10a      	bne.n	19d06 <tls_interface_getopt+0xda>
   19cf0:	4b08      	ldr	r3, [pc, #32]	; (19d14 <tls_interface_getopt+0xe8>)
   19cf2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   19cf6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   19cfa:	78b3      	ldrb	r3, [r6, #2]
   19cfc:	2000      	movs	r0, #0
   19cfe:	602b      	str	r3, [r5, #0]
   19d00:	e7ab      	b.n	19c5a <tls_interface_getopt+0x2e>
   19d02:	202a      	movs	r0, #42	; 0x2a
   19d04:	e7a9      	b.n	19c5a <tls_interface_getopt+0x2e>
   19d06:	2016      	movs	r0, #22
   19d08:	e7a7      	b.n	19c5a <tls_interface_getopt+0x2e>
   19d0a:	2800      	cmp	r0, #0
   19d0c:	d1fb      	bne.n	19d06 <tls_interface_getopt+0xda>
   19d0e:	6038      	str	r0, [r7, #0]
   19d10:	e7a3      	b.n	19c5a <tls_interface_getopt+0x2e>
   19d12:	bf00      	nop
   19d14:	20021810 	.word	0x20021810

00019d18 <tls_rpc_ip_event_handler>:
   19d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d1a:	f248 0581 	movw	r5, #32897	; 0x8081
   19d1e:	42ab      	cmp	r3, r5
   19d20:	460c      	mov	r4, r1
   19d22:	d044      	beq.n	19dae <tls_rpc_ip_event_handler+0x96>
   19d24:	f249 0182 	movw	r1, #36994	; 0x9082
   19d28:	428b      	cmp	r3, r1
   19d2a:	4606      	mov	r6, r0
   19d2c:	d02d      	beq.n	19d8a <tls_rpc_ip_event_handler+0x72>
   19d2e:	f248 0102 	movw	r1, #32770	; 0x8002
   19d32:	428b      	cmp	r3, r1
   19d34:	d001      	beq.n	19d3a <tls_rpc_ip_event_handler+0x22>
   19d36:	2001      	movs	r0, #1
   19d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19d3a:	2c00      	cmp	r4, #0
   19d3c:	d0fb      	beq.n	19d36 <tls_rpc_ip_event_handler+0x1e>
   19d3e:	6963      	ldr	r3, [r4, #20]
   19d40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   19d44:	d002      	beq.n	19d4c <tls_rpc_ip_event_handler+0x34>
   19d46:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   19d4a:	d1f4      	bne.n	19d36 <tls_rpc_ip_event_handler+0x1e>
   19d4c:	6823      	ldr	r3, [r4, #0]
   19d4e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   19d52:	6023      	str	r3, [r4, #0]
   19d54:	6955      	ldr	r5, [r2, #20]
   19d56:	bb05      	cbnz	r5, 19d9a <tls_rpc_ip_event_handler+0x82>
   19d58:	6823      	ldr	r3, [r4, #0]
   19d5a:	0c1b      	lsrs	r3, r3, #16
   19d5c:	041b      	lsls	r3, r3, #16
   19d5e:	f043 0305 	orr.w	r3, r3, #5
   19d62:	6023      	str	r3, [r4, #0]
   19d64:	6823      	ldr	r3, [r4, #0]
   19d66:	00db      	lsls	r3, r3, #3
   19d68:	d50d      	bpl.n	19d86 <tls_rpc_ip_event_handler+0x6e>
   19d6a:	4b2a      	ldr	r3, [pc, #168]	; (19e14 <tls_rpc_ip_event_handler+0xfc>)
   19d6c:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   19d70:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   19d74:	2b02      	cmp	r3, #2
   19d76:	d106      	bne.n	19d86 <tls_rpc_ip_event_handler+0x6e>
   19d78:	4630      	mov	r0, r6
   19d7a:	4621      	mov	r1, r4
   19d7c:	f7ff fb16 	bl	193ac <secure_client_socket>
   19d80:	b108      	cbz	r0, 19d86 <tls_rpc_ip_event_handler+0x6e>
   19d82:	2873      	cmp	r0, #115	; 0x73
   19d84:	d10c      	bne.n	19da0 <tls_rpc_ip_event_handler+0x88>
   19d86:	2000      	movs	r0, #0
   19d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19d8a:	2c00      	cmp	r4, #0
   19d8c:	d0fb      	beq.n	19d86 <tls_rpc_ip_event_handler+0x6e>
   19d8e:	6823      	ldr	r3, [r4, #0]
   19d90:	b29b      	uxth	r3, r3
   19d92:	2b0b      	cmp	r3, #11
   19d94:	d1f7      	bne.n	19d86 <tls_rpc_ip_event_handler+0x6e>
   19d96:	6915      	ldr	r5, [r2, #16]
   19d98:	b1cd      	cbz	r5, 19dce <tls_rpc_ip_event_handler+0xb6>
   19d9a:	4628      	mov	r0, r5
   19d9c:	f000 f890 	bl	19ec0 <rpc_error_to_nrf_bsd_error>
   19da0:	6060      	str	r0, [r4, #4]
   19da2:	6823      	ldr	r3, [r4, #0]
   19da4:	2000      	movs	r0, #0
   19da6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   19daa:	6023      	str	r3, [r4, #0]
   19dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19dae:	2900      	cmp	r1, #0
   19db0:	d0e9      	beq.n	19d86 <tls_rpc_ip_event_handler+0x6e>
   19db2:	680b      	ldr	r3, [r1, #0]
   19db4:	b29b      	uxth	r3, r3
   19db6:	2b0a      	cmp	r3, #10
   19db8:	d1e5      	bne.n	19d86 <tls_rpc_ip_event_handler+0x6e>
   19dba:	6950      	ldr	r0, [r2, #20]
   19dbc:	2800      	cmp	r0, #0
   19dbe:	d1ed      	bne.n	19d9c <tls_rpc_ip_event_handler+0x84>
   19dc0:	680b      	ldr	r3, [r1, #0]
   19dc2:	0c1b      	lsrs	r3, r3, #16
   19dc4:	041b      	lsls	r3, r3, #16
   19dc6:	f043 030b 	orr.w	r3, r3, #11
   19dca:	600b      	str	r3, [r1, #0]
   19dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19dce:	6823      	ldr	r3, [r4, #0]
   19dd0:	4f11      	ldr	r7, [pc, #68]	; (19e18 <tls_rpc_ip_event_handler+0x100>)
   19dd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   19dd6:	6023      	str	r3, [r4, #0]
   19dd8:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   19ddc:	b130      	cbz	r0, 19dec <tls_rpc_ip_event_handler+0xd4>
   19dde:	f005 fc6b 	bl	1f6b8 <nrf_free>
   19de2:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   19de6:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   19dea:	605d      	str	r5, [r3, #4]
   19dec:	6823      	ldr	r3, [r4, #0]
   19dee:	2000      	movs	r0, #0
   19df0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   19df4:	6023      	str	r3, [r4, #0]
   19df6:	6823      	ldr	r3, [r4, #0]
   19df8:	0c1b      	lsrs	r3, r3, #16
   19dfa:	041b      	lsls	r3, r3, #16
   19dfc:	f043 030c 	orr.w	r3, r3, #12
   19e00:	6023      	str	r3, [r4, #0]
   19e02:	6823      	ldr	r3, [r4, #0]
   19e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19e08:	6023      	str	r3, [r4, #0]
   19e0a:	6823      	ldr	r3, [r4, #0]
   19e0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   19e10:	6023      	str	r3, [r4, #0]
   19e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19e14:	20021810 	.word	0x20021810
   19e18:	20021954 	.word	0x20021954

00019e1c <ip_client_event_handler>:
   19e1c:	f850 1b08 	ldr.w	r1, [r0], #8
   19e20:	0c09      	lsrs	r1, r1, #16
   19e22:	f001 bb23 	b.w	1b46c <rpc_ip_event_handler>
   19e26:	bf00      	nop

00019e28 <rpc_ip_client_init>:
   19e28:	4801      	ldr	r0, [pc, #4]	; (19e30 <rpc_ip_client_init+0x8>)
   19e2a:	f001 be21 	b.w	1ba70 <rpc_client_register>
   19e2e:	bf00      	nop
   19e30:	0002bc30 	.word	0x0002bc30

00019e34 <rpc_ip_client_request_alloc>:
   19e34:	2300      	movs	r3, #0
   19e36:	b510      	push	{r4, lr}
   19e38:	b082      	sub	sp, #8
   19e3a:	9301      	str	r3, [sp, #4]
   19e3c:	b158      	cbz	r0, 19e56 <rpc_ip_client_request_alloc+0x22>
   19e3e:	4604      	mov	r4, r0
   19e40:	aa01      	add	r2, sp, #4
   19e42:	2004      	movs	r0, #4
   19e44:	f001 fe8e 	bl	1bb64 <rpc_message_alloc>
   19e48:	b918      	cbnz	r0, 19e52 <rpc_ip_client_request_alloc+0x1e>
   19e4a:	9b01      	ldr	r3, [sp, #4]
   19e4c:	b10b      	cbz	r3, 19e52 <rpc_ip_client_request_alloc+0x1e>
   19e4e:	3308      	adds	r3, #8
   19e50:	6023      	str	r3, [r4, #0]
   19e52:	b002      	add	sp, #8
   19e54:	bd10      	pop	{r4, pc}
   19e56:	2007      	movs	r0, #7
   19e58:	b002      	add	sp, #8
   19e5a:	bd10      	pop	{r4, pc}

00019e5c <rpc_ip_client_request_send>:
   19e5c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   19e60:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   19e64:	d10b      	bne.n	19e7e <rpc_ip_client_request_send+0x22>
   19e66:	b160      	cbz	r0, 19e82 <rpc_ip_client_request_send+0x26>
   19e68:	4603      	mov	r3, r0
   19e6a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   19e6e:	2004      	movs	r0, #4
   19e70:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   19e74:	f843 1d08 	str.w	r1, [r3, #-8]!
   19e78:	4619      	mov	r1, r3
   19e7a:	f001 be63 	b.w	1bb44 <rpc_message_send>
   19e7e:	200f      	movs	r0, #15
   19e80:	4770      	bx	lr
   19e82:	2007      	movs	r0, #7
   19e84:	4770      	bx	lr
   19e86:	bf00      	nop

00019e88 <rpc_ip_client_message_free>:
   19e88:	b120      	cbz	r0, 19e94 <rpc_ip_client_message_free+0xc>
   19e8a:	f1a0 0108 	sub.w	r1, r0, #8
   19e8e:	2004      	movs	r0, #4
   19e90:	f001 be94 	b.w	1bbbc <rpc_message_free>
   19e94:	2007      	movs	r0, #7
   19e96:	4770      	bx	lr

00019e98 <rpc_ip_client_data_free>:
   19e98:	b118      	cbz	r0, 19ea2 <rpc_ip_client_data_free+0xa>
   19e9a:	4601      	mov	r1, r0
   19e9c:	2004      	movs	r0, #4
   19e9e:	f001 be99 	b.w	1bbd4 <rpc_message_data_free>
   19ea2:	2007      	movs	r0, #7
   19ea4:	4770      	bx	lr
   19ea6:	bf00      	nop

00019ea8 <ip_recvd_packet_free_cb>:
   19ea8:	b510      	push	{r4, lr}
   19eaa:	4604      	mov	r4, r0
   19eac:	6800      	ldr	r0, [r0, #0]
   19eae:	f7ff fff3 	bl	19e98 <rpc_ip_client_data_free>
   19eb2:	68a0      	ldr	r0, [r4, #8]
   19eb4:	b118      	cbz	r0, 19ebe <ip_recvd_packet_free_cb+0x16>
   19eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19eba:	f005 bbfd 	b.w	1f6b8 <nrf_free>
   19ebe:	bd10      	pop	{r4, pc}

00019ec0 <rpc_error_to_nrf_bsd_error>:
   19ec0:	2810      	cmp	r0, #16
   19ec2:	bf9a      	itte	ls
   19ec4:	4b02      	ldrls	r3, [pc, #8]	; (19ed0 <rpc_error_to_nrf_bsd_error+0x10>)
   19ec6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   19eca:	202d      	movhi	r0, #45	; 0x2d
   19ecc:	4770      	bx	lr
   19ece:	bf00      	nop
   19ed0:	0002bc40 	.word	0x0002bc40

00019ed4 <ip_interface_request_create>:
   19ed4:	b570      	push	{r4, r5, r6, lr}
   19ed6:	2500      	movs	r5, #0
   19ed8:	b082      	sub	sp, #8
   19eda:	ac02      	add	r4, sp, #8
   19edc:	f844 5d04 	str.w	r5, [r4, #-4]!
   19ee0:	4606      	mov	r6, r0
   19ee2:	460d      	mov	r5, r1
   19ee4:	4620      	mov	r0, r4
   19ee6:	4619      	mov	r1, r3
   19ee8:	4614      	mov	r4, r2
   19eea:	f7ff ffa3 	bl	19e34 <rpc_ip_client_request_alloc>
   19eee:	b960      	cbnz	r0, 19f0a <ip_interface_request_create+0x36>
   19ef0:	9b01      	ldr	r3, [sp, #4]
   19ef2:	2208      	movs	r2, #8
   19ef4:	7258      	strb	r0, [r3, #9]
   19ef6:	7298      	strb	r0, [r3, #10]
   19ef8:	72d8      	strb	r0, [r3, #11]
   19efa:	4618      	mov	r0, r3
   19efc:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   19f00:	60dc      	str	r4, [r3, #12]
   19f02:	611d      	str	r5, [r3, #16]
   19f04:	721a      	strb	r2, [r3, #8]
   19f06:	b002      	add	sp, #8
   19f08:	bd70      	pop	{r4, r5, r6, pc}
   19f0a:	9b01      	ldr	r3, [sp, #4]
   19f0c:	4618      	mov	r0, r3
   19f0e:	b002      	add	sp, #8
   19f10:	bd70      	pop	{r4, r5, r6, pc}
   19f12:	bf00      	nop

00019f14 <ip_interface_request_send>:
   19f14:	b570      	push	{r4, r5, r6, lr}
   19f16:	460c      	mov	r4, r1
   19f18:	4605      	mov	r5, r0
   19f1a:	4611      	mov	r1, r2
   19f1c:	4620      	mov	r0, r4
   19f1e:	461e      	mov	r6, r3
   19f20:	f7ff ff9c 	bl	19e5c <rpc_ip_client_request_send>
   19f24:	b900      	cbnz	r0, 19f28 <ip_interface_request_send+0x14>
   19f26:	bd70      	pop	{r4, r5, r6, pc}
   19f28:	6820      	ldr	r0, [r4, #0]
   19f2a:	b108      	cbz	r0, 19f30 <ip_interface_request_send+0x1c>
   19f2c:	f7ff ffb4 	bl	19e98 <rpc_ip_client_data_free>
   19f30:	4620      	mov	r0, r4
   19f32:	f7ff ffa9 	bl	19e88 <rpc_ip_client_message_free>
   19f36:	602e      	str	r6, [r5, #0]
   19f38:	2023      	movs	r0, #35	; 0x23
   19f3a:	bd70      	pop	{r4, r5, r6, pc}

00019f3c <ip_interface_wait>:
   19f3c:	b538      	push	{r3, r4, r5, lr}
   19f3e:	4605      	mov	r5, r0
   19f40:	f006 f844 	bl	1ffcc <interface_socket_wait>
   19f44:	4604      	mov	r4, r0
   19f46:	b108      	cbz	r0, 19f4c <ip_interface_wait+0x10>
   19f48:	4620      	mov	r0, r4
   19f4a:	bd38      	pop	{r3, r4, r5, pc}
   19f4c:	4628      	mov	r0, r5
   19f4e:	f006 f8b1 	bl	200b4 <interface_socket_from_handle_get>
   19f52:	2800      	cmp	r0, #0
   19f54:	d0f8      	beq.n	19f48 <ip_interface_wait+0xc>
   19f56:	6844      	ldr	r4, [r0, #4]
   19f58:	2c00      	cmp	r4, #0
   19f5a:	d0f5      	beq.n	19f48 <ip_interface_wait+0xc>
   19f5c:	2300      	movs	r3, #0
   19f5e:	6043      	str	r3, [r0, #4]
   19f60:	4620      	mov	r0, r4
   19f62:	bd38      	pop	{r3, r4, r5, pc}

00019f64 <ip_interface_init>:
   19f64:	b538      	push	{r3, r4, r5, lr}
   19f66:	2300      	movs	r3, #0
   19f68:	4d09      	ldr	r5, [pc, #36]	; (19f90 <ip_interface_init+0x2c>)
   19f6a:	4c0a      	ldr	r4, [pc, #40]	; (19f94 <ip_interface_init+0x30>)
   19f6c:	4619      	mov	r1, r3
   19f6e:	2224      	movs	r2, #36	; 0x24
   19f70:	4809      	ldr	r0, [pc, #36]	; (19f98 <ip_interface_init+0x34>)
   19f72:	602b      	str	r3, [r5, #0]
   19f74:	6023      	str	r3, [r4, #0]
   19f76:	f008 f969 	bl	2224c <memset>
   19f7a:	f7ff ff55 	bl	19e28 <rpc_ip_client_init>
   19f7e:	b918      	cbnz	r0, 19f88 <ip_interface_init+0x24>
   19f80:	2201      	movs	r2, #1
   19f82:	4b06      	ldr	r3, [pc, #24]	; (19f9c <ip_interface_init+0x38>)
   19f84:	701a      	strb	r2, [r3, #0]
   19f86:	bd38      	pop	{r3, r4, r5, pc}
   19f88:	f04f 30ff 	mov.w	r0, #4294967295
   19f8c:	bd38      	pop	{r3, r4, r5, pc}
   19f8e:	bf00      	nop
   19f90:	200219a4 	.word	0x200219a4
   19f94:	200219a0 	.word	0x200219a0
   19f98:	200219a8 	.word	0x200219a8
   19f9c:	20025016 	.word	0x20025016

00019fa0 <ip_interface_open>:
   19fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19fa4:	2500      	movs	r5, #0
   19fa6:	f04f 37ff 	mov.w	r7, #4294967295
   19faa:	4c5e      	ldr	r4, [pc, #376]	; (1a124 <ip_interface_open+0x184>)
   19fac:	4606      	mov	r6, r0
   19fae:	7820      	ldrb	r0, [r4, #0]
   19fb0:	b084      	sub	sp, #16
   19fb2:	e9cd 5701 	strd	r5, r7, [sp, #4]
   19fb6:	2800      	cmp	r0, #0
   19fb8:	f000 80b0 	beq.w	1a11c <ip_interface_open+0x17c>
   19fbc:	4690      	mov	r8, r2
   19fbe:	f026 0208 	bic.w	r2, r6, #8
   19fc2:	2a02      	cmp	r2, #2
   19fc4:	460c      	mov	r4, r1
   19fc6:	d002      	beq.n	19fce <ip_interface_open+0x2e>
   19fc8:	2e05      	cmp	r6, #5
   19fca:	f040 808d 	bne.w	1a0e8 <ip_interface_open+0x148>
   19fce:	1e63      	subs	r3, r4, #1
   19fd0:	2b02      	cmp	r3, #2
   19fd2:	f200 809d 	bhi.w	1a110 <ip_interface_open+0x170>
   19fd6:	f1b8 0f00 	cmp.w	r8, #0
   19fda:	d159      	bne.n	1a090 <ip_interface_open+0xf0>
   19fdc:	2c01      	cmp	r4, #1
   19fde:	d06f      	beq.n	1a0c0 <ip_interface_open+0x120>
   19fe0:	2c03      	cmp	r4, #3
   19fe2:	bf18      	it	ne
   19fe4:	f04f 0802 	movne.w	r8, #2
   19fe8:	4a4f      	ldr	r2, [pc, #316]	; (1a128 <ip_interface_open+0x188>)
   19fea:	4621      	mov	r1, r4
   19fec:	a801      	add	r0, sp, #4
   19fee:	f005 ff3b 	bl	1fe68 <interface_socket_allocate>
   19ff2:	9b01      	ldr	r3, [sp, #4]
   19ff4:	4607      	mov	r7, r0
   19ff6:	2b00      	cmp	r3, #0
   19ff8:	d060      	beq.n	1a0bc <ip_interface_open+0x11c>
   19ffa:	2100      	movs	r1, #0
   19ffc:	a804      	add	r0, sp, #16
   19ffe:	f840 1d04 	str.w	r1, [r0, #-4]!
   1a002:	e9c3 6403 	strd	r6, r4, [r3, #12]
   1a006:	f8c3 8014 	str.w	r8, [r3, #20]
   1a00a:	f7ff ff13 	bl	19e34 <rpc_ip_client_request_alloc>
   1a00e:	2800      	cmp	r0, #0
   1a010:	d151      	bne.n	1a0b6 <ip_interface_open+0x116>
   1a012:	f247 0201 	movw	r2, #28673	; 0x7001
   1a016:	f04f 33ff 	mov.w	r3, #4294967295
   1a01a:	2108      	movs	r1, #8
   1a01c:	9d03      	ldr	r5, [sp, #12]
   1a01e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   1a022:	60ea      	str	r2, [r5, #12]
   1a024:	7268      	strb	r0, [r5, #9]
   1a026:	72a8      	strb	r0, [r5, #10]
   1a028:	72e8      	strb	r0, [r5, #11]
   1a02a:	7229      	strb	r1, [r5, #8]
   1a02c:	742b      	strb	r3, [r5, #16]
   1a02e:	746b      	strb	r3, [r5, #17]
   1a030:	74ab      	strb	r3, [r5, #18]
   1a032:	74eb      	strb	r3, [r5, #19]
   1a034:	68ab      	ldr	r3, [r5, #8]
   1a036:	2e05      	cmp	r6, #5
   1a038:	f103 030c 	add.w	r3, r3, #12
   1a03c:	60ab      	str	r3, [r5, #8]
   1a03e:	d003      	beq.n	1a048 <ip_interface_open+0xa8>
   1a040:	2e0a      	cmp	r6, #10
   1a042:	bf14      	ite	ne
   1a044:	2601      	movne	r6, #1
   1a046:	2602      	moveq	r6, #2
   1a048:	616e      	str	r6, [r5, #20]
   1a04a:	f8c5 801c 	str.w	r8, [r5, #28]
   1a04e:	61ac      	str	r4, [r5, #24]
   1a050:	f247 0101 	movw	r1, #28673	; 0x7001
   1a054:	4628      	mov	r0, r5
   1a056:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1a05a:	f7ff feff 	bl	19e5c <rpc_ip_client_request_send>
   1a05e:	4606      	mov	r6, r0
   1a060:	b380      	cbz	r0, 1a0c4 <ip_interface_open+0x124>
   1a062:	6828      	ldr	r0, [r5, #0]
   1a064:	b108      	cbz	r0, 1a06a <ip_interface_open+0xca>
   1a066:	f7ff ff17 	bl	19e98 <rpc_ip_client_data_free>
   1a06a:	4628      	mov	r0, r5
   1a06c:	f7ff ff0c 	bl	19e88 <rpc_ip_client_message_free>
   1a070:	2301      	movs	r3, #1
   1a072:	2523      	movs	r5, #35	; 0x23
   1a074:	f8c8 3000 	str.w	r3, [r8]
   1a078:	4638      	mov	r0, r7
   1a07a:	f005 ff59 	bl	1ff30 <interface_socket_free>
   1a07e:	4628      	mov	r0, r5
   1a080:	f7fb fb4e 	bl	15720 <bsd_os_errno_set>
   1a084:	f04f 37ff 	mov.w	r7, #4294967295
   1a088:	4638      	mov	r0, r7
   1a08a:	b004      	add	sp, #16
   1a08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a090:	2c01      	cmp	r4, #1
   1a092:	d00a      	beq.n	1a0aa <ip_interface_open+0x10a>
   1a094:	2c02      	cmp	r4, #2
   1a096:	d10b      	bne.n	1a0b0 <ip_interface_open+0x110>
   1a098:	f1b8 0f02 	cmp.w	r8, #2
   1a09c:	d0a4      	beq.n	19fe8 <ip_interface_open+0x48>
   1a09e:	2029      	movs	r0, #41	; 0x29
   1a0a0:	f7fb fb3e 	bl	15720 <bsd_os_errno_set>
   1a0a4:	f04f 37ff 	mov.w	r7, #4294967295
   1a0a8:	e7ee      	b.n	1a088 <ip_interface_open+0xe8>
   1a0aa:	f1b8 0f01 	cmp.w	r8, #1
   1a0ae:	d1f6      	bne.n	1a09e <ip_interface_open+0xfe>
   1a0b0:	f04f 0802 	mov.w	r8, #2
   1a0b4:	e798      	b.n	19fe8 <ip_interface_open+0x48>
   1a0b6:	9d03      	ldr	r5, [sp, #12]
   1a0b8:	2d00      	cmp	r5, #0
   1a0ba:	d1bb      	bne.n	1a034 <ip_interface_open+0x94>
   1a0bc:	2569      	movs	r5, #105	; 0x69
   1a0be:	e7db      	b.n	1a078 <ip_interface_open+0xd8>
   1a0c0:	46a0      	mov	r8, r4
   1a0c2:	e791      	b.n	19fe8 <ip_interface_open+0x48>
   1a0c4:	ab02      	add	r3, sp, #8
   1a0c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a0ca:	2102      	movs	r1, #2
   1a0cc:	4638      	mov	r0, r7
   1a0ce:	f005 ff7d 	bl	1ffcc <interface_socket_wait>
   1a0d2:	4605      	mov	r5, r0
   1a0d4:	2800      	cmp	r0, #0
   1a0d6:	d1cf      	bne.n	1a078 <ip_interface_open+0xd8>
   1a0d8:	4638      	mov	r0, r7
   1a0da:	f005 ffeb 	bl	200b4 <interface_socket_from_handle_get>
   1a0de:	b138      	cbz	r0, 1a0f0 <ip_interface_open+0x150>
   1a0e0:	6845      	ldr	r5, [r0, #4]
   1a0e2:	b12d      	cbz	r5, 1a0f0 <ip_interface_open+0x150>
   1a0e4:	6046      	str	r6, [r0, #4]
   1a0e6:	e7c7      	b.n	1a078 <ip_interface_open+0xd8>
   1a0e8:	202f      	movs	r0, #47	; 0x2f
   1a0ea:	f7fb fb19 	bl	15720 <bsd_os_errno_set>
   1a0ee:	e7cb      	b.n	1a088 <ip_interface_open+0xe8>
   1a0f0:	3c02      	subs	r4, #2
   1a0f2:	2c01      	cmp	r4, #1
   1a0f4:	d8c8      	bhi.n	1a088 <ip_interface_open+0xe8>
   1a0f6:	4638      	mov	r0, r7
   1a0f8:	9b01      	ldr	r3, [sp, #4]
   1a0fa:	681a      	ldr	r2, [r3, #0]
   1a0fc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1a100:	601a      	str	r2, [r3, #0]
   1a102:	681a      	ldr	r2, [r3, #0]
   1a104:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1a108:	601a      	str	r2, [r3, #0]
   1a10a:	b004      	add	sp, #16
   1a10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a110:	2016      	movs	r0, #22
   1a112:	f7fb fb05 	bl	15720 <bsd_os_errno_set>
   1a116:	f04f 37ff 	mov.w	r7, #4294967295
   1a11a:	e7b5      	b.n	1a088 <ip_interface_open+0xe8>
   1a11c:	2070      	movs	r0, #112	; 0x70
   1a11e:	f7fb faff 	bl	15720 <bsd_os_errno_set>
   1a122:	e7b1      	b.n	1a088 <ip_interface_open+0xe8>
   1a124:	20025016 	.word	0x20025016
   1a128:	00019ea9 	.word	0x00019ea9

0001a12c <ip_interface_close>:
   1a12c:	f04f 33ff 	mov.w	r3, #4294967295
   1a130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a134:	b082      	sub	sp, #8
   1a136:	4606      	mov	r6, r0
   1a138:	9300      	str	r3, [sp, #0]
   1a13a:	f005 ffbb 	bl	200b4 <interface_socket_from_handle_get>
   1a13e:	2800      	cmp	r0, #0
   1a140:	d062      	beq.n	1a208 <ip_interface_close+0xdc>
   1a142:	4604      	mov	r4, r0
   1a144:	2100      	movs	r1, #0
   1a146:	a802      	add	r0, sp, #8
   1a148:	6827      	ldr	r7, [r4, #0]
   1a14a:	f840 1d04 	str.w	r1, [r0, #-4]!
   1a14e:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1a152:	f7ff fe6f 	bl	19e34 <rpc_ip_client_request_alloc>
   1a156:	2800      	cmp	r0, #0
   1a158:	d139      	bne.n	1a1ce <ip_interface_close+0xa2>
   1a15a:	f247 0309 	movw	r3, #28681	; 0x7009
   1a15e:	2208      	movs	r2, #8
   1a160:	9d01      	ldr	r5, [sp, #4]
   1a162:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1a166:	60eb      	str	r3, [r5, #12]
   1a168:	f8c5 8010 	str.w	r8, [r5, #16]
   1a16c:	7268      	strb	r0, [r5, #9]
   1a16e:	72a8      	strb	r0, [r5, #10]
   1a170:	72e8      	strb	r0, [r5, #11]
   1a172:	722a      	strb	r2, [r5, #8]
   1a174:	6823      	ldr	r3, [r4, #0]
   1a176:	f247 0109 	movw	r1, #28681	; 0x7009
   1a17a:	0c1b      	lsrs	r3, r3, #16
   1a17c:	041b      	lsls	r3, r3, #16
   1a17e:	f043 030d 	orr.w	r3, r3, #13
   1a182:	6023      	str	r3, [r4, #0]
   1a184:	6823      	ldr	r3, [r4, #0]
   1a186:	4628      	mov	r0, r5
   1a188:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1a18c:	6023      	str	r3, [r4, #0]
   1a18e:	6823      	ldr	r3, [r4, #0]
   1a190:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1a194:	6023      	str	r3, [r4, #0]
   1a196:	f7ff fe61 	bl	19e5c <rpc_ip_client_request_send>
   1a19a:	bb38      	cbnz	r0, 1a1ec <ip_interface_close+0xc0>
   1a19c:	466b      	mov	r3, sp
   1a19e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a1a2:	210e      	movs	r1, #14
   1a1a4:	4630      	mov	r0, r6
   1a1a6:	f005 ff11 	bl	1ffcc <interface_socket_wait>
   1a1aa:	4604      	mov	r4, r0
   1a1ac:	b1a0      	cbz	r0, 1a1d8 <ip_interface_close+0xac>
   1a1ae:	4c17      	ldr	r4, [pc, #92]	; (1a20c <ip_interface_close+0xe0>)
   1a1b0:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   1a1b4:	b120      	cbz	r0, 1a1c0 <ip_interface_close+0x94>
   1a1b6:	f7ff fe67 	bl	19e88 <rpc_ip_client_message_free>
   1a1ba:	2300      	movs	r3, #0
   1a1bc:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   1a1c0:	4630      	mov	r0, r6
   1a1c2:	f005 feb5 	bl	1ff30 <interface_socket_free>
   1a1c6:	2000      	movs	r0, #0
   1a1c8:	b002      	add	sp, #8
   1a1ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a1ce:	9d01      	ldr	r5, [sp, #4]
   1a1d0:	200c      	movs	r0, #12
   1a1d2:	2d00      	cmp	r5, #0
   1a1d4:	d1ce      	bne.n	1a174 <ip_interface_close+0x48>
   1a1d6:	e012      	b.n	1a1fe <ip_interface_close+0xd2>
   1a1d8:	4630      	mov	r0, r6
   1a1da:	f005 ff6b 	bl	200b4 <interface_socket_from_handle_get>
   1a1de:	2800      	cmp	r0, #0
   1a1e0:	d0e5      	beq.n	1a1ae <ip_interface_close+0x82>
   1a1e2:	6843      	ldr	r3, [r0, #4]
   1a1e4:	2b00      	cmp	r3, #0
   1a1e6:	d0e2      	beq.n	1a1ae <ip_interface_close+0x82>
   1a1e8:	6044      	str	r4, [r0, #4]
   1a1ea:	e7e0      	b.n	1a1ae <ip_interface_close+0x82>
   1a1ec:	6828      	ldr	r0, [r5, #0]
   1a1ee:	b108      	cbz	r0, 1a1f4 <ip_interface_close+0xc8>
   1a1f0:	f7ff fe52 	bl	19e98 <rpc_ip_client_data_free>
   1a1f4:	4628      	mov	r0, r5
   1a1f6:	f7ff fe47 	bl	19e88 <rpc_ip_client_message_free>
   1a1fa:	2023      	movs	r0, #35	; 0x23
   1a1fc:	6027      	str	r7, [r4, #0]
   1a1fe:	f7fb fa8f 	bl	15720 <bsd_os_errno_set>
   1a202:	f04f 30ff 	mov.w	r0, #4294967295
   1a206:	e7df      	b.n	1a1c8 <ip_interface_close+0x9c>
   1a208:	2009      	movs	r0, #9
   1a20a:	e7f8      	b.n	1a1fe <ip_interface_close+0xd2>
   1a20c:	200219a8 	.word	0x200219a8

0001a210 <ip_interface_sendto>:
   1a210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a214:	2400      	movs	r4, #0
   1a216:	b08b      	sub	sp, #44	; 0x2c
   1a218:	9102      	str	r1, [sp, #8]
   1a21a:	4615      	mov	r5, r2
   1a21c:	4699      	mov	r9, r3
   1a21e:	9407      	str	r4, [sp, #28]
   1a220:	4607      	mov	r7, r0
   1a222:	9e14      	ldr	r6, [sp, #80]	; 0x50
   1a224:	f005 ff46 	bl	200b4 <interface_socket_from_handle_get>
   1a228:	2800      	cmp	r0, #0
   1a22a:	f000 8163 	beq.w	1a4f4 <ip_interface_sendto+0x2e4>
   1a22e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1a232:	f300 8150 	bgt.w	1a4d6 <ip_interface_sendto+0x2c6>
   1a236:	6903      	ldr	r3, [r0, #16]
   1a238:	4604      	mov	r4, r0
   1a23a:	2b01      	cmp	r3, #1
   1a23c:	f000 8109 	beq.w	1a452 <ip_interface_sendto+0x242>
   1a240:	6822      	ldr	r2, [r4, #0]
   1a242:	0391      	lsls	r1, r2, #14
   1a244:	d569      	bpl.n	1a31a <ip_interface_sendto+0x10a>
   1a246:	f1b9 0f00 	cmp.w	r9, #0
   1a24a:	f000 8112 	beq.w	1a472 <ip_interface_sendto+0x262>
   1a24e:	f019 0f02 	tst.w	r9, #2
   1a252:	f000 814a 	beq.w	1a4ea <ip_interface_sendto+0x2da>
   1a256:	2300      	movs	r3, #0
   1a258:	9303      	str	r3, [sp, #12]
   1a25a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a25c:	f247 0806 	movw	r8, #28678	; 0x7006
   1a260:	2b00      	cmp	r3, #0
   1a262:	bf08      	it	eq
   1a264:	f04f 33ff 	moveq.w	r3, #4294967295
   1a268:	f04f 0b0c 	mov.w	fp, #12
   1a26c:	4aa5      	ldr	r2, [pc, #660]	; (1a504 <ip_interface_sendto+0x2f4>)
   1a26e:	9308      	str	r3, [sp, #32]
   1a270:	043b      	lsls	r3, r7, #16
   1a272:	9200      	str	r2, [sp, #0]
   1a274:	9304      	str	r3, [sp, #16]
   1a276:	4629      	mov	r1, r5
   1a278:	a807      	add	r0, sp, #28
   1a27a:	f7ff fddb 	bl	19e34 <rpc_ip_client_request_alloc>
   1a27e:	2804      	cmp	r0, #4
   1a280:	d05e      	beq.n	1a340 <ip_interface_sendto+0x130>
   1a282:	2800      	cmp	r0, #0
   1a284:	f040 813b 	bne.w	1a4fe <ip_interface_sendto+0x2ee>
   1a288:	9b07      	ldr	r3, [sp, #28]
   1a28a:	f883 b008 	strb.w	fp, [r3, #8]
   1a28e:	7258      	strb	r0, [r3, #9]
   1a290:	7298      	strb	r0, [r3, #10]
   1a292:	72d8      	strb	r0, [r3, #11]
   1a294:	2e00      	cmp	r6, #0
   1a296:	d06b      	beq.n	1a370 <ip_interface_sendto+0x160>
   1a298:	68e2      	ldr	r2, [r4, #12]
   1a29a:	6871      	ldr	r1, [r6, #4]
   1a29c:	428a      	cmp	r2, r1
   1a29e:	f040 80a8 	bne.w	1a3f2 <ip_interface_sendto+0x1e2>
   1a2a2:	7831      	ldrb	r1, [r6, #0]
   1a2a4:	9815      	ldr	r0, [sp, #84]	; 0x54
   1a2a6:	4288      	cmp	r0, r1
   1a2a8:	d10a      	bne.n	1a2c0 <ip_interface_sendto+0xb0>
   1a2aa:	2a02      	cmp	r2, #2
   1a2ac:	f103 001c 	add.w	r0, r3, #28
   1a2b0:	f000 80ff 	beq.w	1a4b2 <ip_interface_sendto+0x2a2>
   1a2b4:	2a0a      	cmp	r2, #10
   1a2b6:	d103      	bne.n	1a2c0 <ip_interface_sendto+0xb0>
   1a2b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1a2ba:	2a24      	cmp	r2, #36	; 0x24
   1a2bc:	f000 80e6 	beq.w	1a48c <ip_interface_sendto+0x27c>
   1a2c0:	f04f 0a16 	mov.w	sl, #22
   1a2c4:	6818      	ldr	r0, [r3, #0]
   1a2c6:	b110      	cbz	r0, 1a2ce <ip_interface_sendto+0xbe>
   1a2c8:	f7ff fde6 	bl	19e98 <rpc_ip_client_data_free>
   1a2cc:	9b07      	ldr	r3, [sp, #28]
   1a2ce:	4618      	mov	r0, r3
   1a2d0:	f7ff fdda 	bl	19e88 <rpc_ip_client_message_free>
   1a2d4:	6823      	ldr	r3, [r4, #0]
   1a2d6:	0318      	lsls	r0, r3, #12
   1a2d8:	d40b      	bmi.n	1a2f2 <ip_interface_sendto+0xe2>
   1a2da:	6823      	ldr	r3, [r4, #0]
   1a2dc:	b29b      	uxth	r3, r3
   1a2de:	2b0d      	cmp	r3, #13
   1a2e0:	d007      	beq.n	1a2f2 <ip_interface_sendto+0xe2>
   1a2e2:	6823      	ldr	r3, [r4, #0]
   1a2e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1a2e8:	6023      	str	r3, [r4, #0]
   1a2ea:	6823      	ldr	r3, [r4, #0]
   1a2ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1a2f0:	6023      	str	r3, [r4, #0]
   1a2f2:	f1ba 0f00 	cmp.w	sl, #0
   1a2f6:	f040 80b3 	bne.w	1a460 <ip_interface_sendto+0x250>
   1a2fa:	6823      	ldr	r3, [r4, #0]
   1a2fc:	0119      	lsls	r1, r3, #4
   1a2fe:	d57b      	bpl.n	1a3f8 <ip_interface_sendto+0x1e8>
   1a300:	6823      	ldr	r3, [r4, #0]
   1a302:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   1a306:	6023      	str	r3, [r4, #0]
   1a308:	9b00      	ldr	r3, [sp, #0]
   1a30a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1a30e:	2800      	cmp	r0, #0
   1a310:	d176      	bne.n	1a400 <ip_interface_sendto+0x1f0>
   1a312:	4628      	mov	r0, r5
   1a314:	b00b      	add	sp, #44	; 0x2c
   1a316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a31a:	6822      	ldr	r2, [r4, #0]
   1a31c:	0092      	lsls	r2, r2, #2
   1a31e:	d406      	bmi.n	1a32e <ip_interface_sendto+0x11e>
   1a320:	2b01      	cmp	r3, #1
   1a322:	f000 80ad 	beq.w	1a480 <ip_interface_sendto+0x270>
   1a326:	6823      	ldr	r3, [r4, #0]
   1a328:	031b      	lsls	r3, r3, #12
   1a32a:	f140 80cf 	bpl.w	1a4cc <ip_interface_sendto+0x2bc>
   1a32e:	6823      	ldr	r3, [r4, #0]
   1a330:	031e      	lsls	r6, r3, #12
   1a332:	f140 80d5 	bpl.w	1a4e0 <ip_interface_sendto+0x2d0>
   1a336:	4b73      	ldr	r3, [pc, #460]	; (1a504 <ip_interface_sendto+0x2f4>)
   1a338:	f8d4 a008 	ldr.w	sl, [r4, #8]
   1a33c:	9300      	str	r3, [sp, #0]
   1a33e:	e7d8      	b.n	1a2f2 <ip_interface_sendto+0xe2>
   1a340:	9b03      	ldr	r3, [sp, #12]
   1a342:	2b00      	cmp	r3, #0
   1a344:	d052      	beq.n	1a3ec <ip_interface_sendto+0x1dc>
   1a346:	9b08      	ldr	r3, [sp, #32]
   1a348:	3301      	adds	r3, #1
   1a34a:	d094      	beq.n	1a276 <ip_interface_sendto+0x66>
   1a34c:	230a      	movs	r3, #10
   1a34e:	a90a      	add	r1, sp, #40	; 0x28
   1a350:	f841 3d04 	str.w	r3, [r1, #-4]!
   1a354:	2000      	movs	r0, #0
   1a356:	f7fb f92b 	bl	155b0 <bsd_os_timedwait>
   1a35a:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   1a35e:	f1c2 020a 	rsb	r2, r2, #10
   1a362:	1a9b      	subs	r3, r3, r2
   1a364:	2b00      	cmp	r3, #0
   1a366:	9308      	str	r3, [sp, #32]
   1a368:	dc85      	bgt.n	1a276 <ip_interface_sendto+0x66>
   1a36a:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
   1a36e:	e7b1      	b.n	1a2d4 <ip_interface_sendto+0xc4>
   1a370:	4642      	mov	r2, r8
   1a372:	f8c3 9014 	str.w	r9, [r3, #20]
   1a376:	69a1      	ldr	r1, [r4, #24]
   1a378:	9804      	ldr	r0, [sp, #16]
   1a37a:	6119      	str	r1, [r3, #16]
   1a37c:	9902      	ldr	r1, [sp, #8]
   1a37e:	4302      	orrs	r2, r0
   1a380:	60da      	str	r2, [r3, #12]
   1a382:	605d      	str	r5, [r3, #4]
   1a384:	b119      	cbz	r1, 1a38e <ip_interface_sendto+0x17e>
   1a386:	6818      	ldr	r0, [r3, #0]
   1a388:	462a      	mov	r2, r5
   1a38a:	f7f2 fbf3 	bl	cb74 <memcpy>
   1a38e:	6823      	ldr	r3, [r4, #0]
   1a390:	4641      	mov	r1, r8
   1a392:	9305      	str	r3, [sp, #20]
   1a394:	6823      	ldr	r3, [r4, #0]
   1a396:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1a39a:	6023      	str	r3, [r4, #0]
   1a39c:	6823      	ldr	r3, [r4, #0]
   1a39e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1a3a2:	6023      	str	r3, [r4, #0]
   1a3a4:	9b07      	ldr	r3, [sp, #28]
   1a3a6:	4618      	mov	r0, r3
   1a3a8:	9301      	str	r3, [sp, #4]
   1a3aa:	f7ff fd57 	bl	19e5c <rpc_ip_client_request_send>
   1a3ae:	9b01      	ldr	r3, [sp, #4]
   1a3b0:	4682      	mov	sl, r0
   1a3b2:	bb78      	cbnz	r0, 1a414 <ip_interface_sendto+0x204>
   1a3b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1a3b8:	ab08      	add	r3, sp, #32
   1a3ba:	4611      	mov	r1, r2
   1a3bc:	4638      	mov	r0, r7
   1a3be:	f005 fe05 	bl	1ffcc <interface_socket_wait>
   1a3c2:	4603      	mov	r3, r0
   1a3c4:	b398      	cbz	r0, 1a42e <ip_interface_sendto+0x21e>
   1a3c6:	6822      	ldr	r2, [r4, #0]
   1a3c8:	0312      	lsls	r2, r2, #12
   1a3ca:	d43f      	bmi.n	1a44c <ip_interface_sendto+0x23c>
   1a3cc:	2b3c      	cmp	r3, #60	; 0x3c
   1a3ce:	d001      	beq.n	1a3d4 <ip_interface_sendto+0x1c4>
   1a3d0:	2b0c      	cmp	r3, #12
   1a3d2:	d001      	beq.n	1a3d8 <ip_interface_sendto+0x1c8>
   1a3d4:	469a      	mov	sl, r3
   1a3d6:	e77d      	b.n	1a2d4 <ip_interface_sendto+0xc4>
   1a3d8:	9b00      	ldr	r3, [sp, #0]
   1a3da:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1a3de:	b108      	cbz	r0, 1a3e4 <ip_interface_sendto+0x1d4>
   1a3e0:	f7ff fd52 	bl	19e88 <rpc_ip_client_message_free>
   1a3e4:	9b03      	ldr	r3, [sp, #12]
   1a3e6:	2b00      	cmp	r3, #0
   1a3e8:	f47f af45 	bne.w	1a276 <ip_interface_sendto+0x66>
   1a3ec:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1a3f0:	e770      	b.n	1a2d4 <ip_interface_sendto+0xc4>
   1a3f2:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   1a3f6:	e765      	b.n	1a2c4 <ip_interface_sendto+0xb4>
   1a3f8:	9b00      	ldr	r3, [sp, #0]
   1a3fa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1a3fe:	6985      	ldr	r5, [r0, #24]
   1a400:	f7ff fd42 	bl	19e88 <rpc_ip_client_message_free>
   1a404:	2300      	movs	r3, #0
   1a406:	4628      	mov	r0, r5
   1a408:	9a00      	ldr	r2, [sp, #0]
   1a40a:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   1a40e:	b00b      	add	sp, #44	; 0x2c
   1a410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a414:	6818      	ldr	r0, [r3, #0]
   1a416:	469a      	mov	sl, r3
   1a418:	b108      	cbz	r0, 1a41e <ip_interface_sendto+0x20e>
   1a41a:	f7ff fd3d 	bl	19e98 <rpc_ip_client_data_free>
   1a41e:	4650      	mov	r0, sl
   1a420:	f7ff fd32 	bl	19e88 <rpc_ip_client_message_free>
   1a424:	9b05      	ldr	r3, [sp, #20]
   1a426:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1a42a:	6023      	str	r3, [r4, #0]
   1a42c:	e752      	b.n	1a2d4 <ip_interface_sendto+0xc4>
   1a42e:	9001      	str	r0, [sp, #4]
   1a430:	4638      	mov	r0, r7
   1a432:	f005 fe3f 	bl	200b4 <interface_socket_from_handle_get>
   1a436:	9b01      	ldr	r3, [sp, #4]
   1a438:	2800      	cmp	r0, #0
   1a43a:	d0cb      	beq.n	1a3d4 <ip_interface_sendto+0x1c4>
   1a43c:	6843      	ldr	r3, [r0, #4]
   1a43e:	2b00      	cmp	r3, #0
   1a440:	d0c8      	beq.n	1a3d4 <ip_interface_sendto+0x1c4>
   1a442:	f8c0 a004 	str.w	sl, [r0, #4]
   1a446:	6822      	ldr	r2, [r4, #0]
   1a448:	0312      	lsls	r2, r2, #12
   1a44a:	d5bf      	bpl.n	1a3cc <ip_interface_sendto+0x1bc>
   1a44c:	f8d4 a008 	ldr.w	sl, [r4, #8]
   1a450:	e740      	b.n	1a2d4 <ip_interface_sendto+0xc4>
   1a452:	2e00      	cmp	r6, #0
   1a454:	f43f aef4 	beq.w	1a240 <ip_interface_sendto+0x30>
   1a458:	f04f 0a38 	mov.w	sl, #56	; 0x38
   1a45c:	4b29      	ldr	r3, [pc, #164]	; (1a504 <ip_interface_sendto+0x2f4>)
   1a45e:	9300      	str	r3, [sp, #0]
   1a460:	4650      	mov	r0, sl
   1a462:	f7fb f95d 	bl	15720 <bsd_os_errno_set>
   1a466:	9b00      	ldr	r3, [sp, #0]
   1a468:	f04f 35ff 	mov.w	r5, #4294967295
   1a46c:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1a470:	e74d      	b.n	1a30e <ip_interface_sendto+0xfe>
   1a472:	6823      	ldr	r3, [r4, #0]
   1a474:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   1a478:	f3c3 7300 	ubfx	r3, r3, #28, #1
   1a47c:	9303      	str	r3, [sp, #12]
   1a47e:	e6ec      	b.n	1a25a <ip_interface_sendto+0x4a>
   1a480:	6823      	ldr	r3, [r4, #0]
   1a482:	b29b      	uxth	r3, r3
   1a484:	2b05      	cmp	r3, #5
   1a486:	f47f af52 	bne.w	1a32e <ip_interface_sendto+0x11e>
   1a48a:	e74c      	b.n	1a326 <ip_interface_sendto+0x116>
   1a48c:	2210      	movs	r2, #16
   1a48e:	8931      	ldrh	r1, [r6, #8]
   1a490:	835a      	strh	r2, [r3, #26]
   1a492:	8319      	strh	r1, [r3, #24]
   1a494:	18b1      	adds	r1, r6, r2
   1a496:	f7f2 fb6d 	bl	cb74 <memcpy>
   1a49a:	f247 0207 	movw	r2, #28679	; 0x7007
   1a49e:	9b07      	ldr	r3, [sp, #28]
   1a4a0:	4690      	mov	r8, r2
   1a4a2:	6899      	ldr	r1, [r3, #8]
   1a4a4:	8b58      	ldrh	r0, [r3, #26]
   1a4a6:	3104      	adds	r1, #4
   1a4a8:	4401      	add	r1, r0
   1a4aa:	f8c3 9014 	str.w	r9, [r3, #20]
   1a4ae:	6099      	str	r1, [r3, #8]
   1a4b0:	e761      	b.n	1a376 <ip_interface_sendto+0x166>
   1a4b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1a4b4:	2a10      	cmp	r2, #16
   1a4b6:	f47f af03 	bne.w	1a2c0 <ip_interface_sendto+0xb0>
   1a4ba:	2204      	movs	r2, #4
   1a4bc:	8931      	ldrh	r1, [r6, #8]
   1a4be:	835a      	strh	r2, [r3, #26]
   1a4c0:	8319      	strh	r1, [r3, #24]
   1a4c2:	f106 010c 	add.w	r1, r6, #12
   1a4c6:	f7f2 fb55 	bl	cb74 <memcpy>
   1a4ca:	e7e6      	b.n	1a49a <ip_interface_sendto+0x28a>
   1a4cc:	4b0d      	ldr	r3, [pc, #52]	; (1a504 <ip_interface_sendto+0x2f4>)
   1a4ce:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1a4d2:	9300      	str	r3, [sp, #0]
   1a4d4:	e7c4      	b.n	1a460 <ip_interface_sendto+0x250>
   1a4d6:	4b0b      	ldr	r3, [pc, #44]	; (1a504 <ip_interface_sendto+0x2f4>)
   1a4d8:	f04f 0a28 	mov.w	sl, #40	; 0x28
   1a4dc:	9300      	str	r3, [sp, #0]
   1a4de:	e7bf      	b.n	1a460 <ip_interface_sendto+0x250>
   1a4e0:	4b08      	ldr	r3, [pc, #32]	; (1a504 <ip_interface_sendto+0x2f4>)
   1a4e2:	f04f 0a39 	mov.w	sl, #57	; 0x39
   1a4e6:	9300      	str	r3, [sp, #0]
   1a4e8:	e7ba      	b.n	1a460 <ip_interface_sendto+0x250>
   1a4ea:	4b06      	ldr	r3, [pc, #24]	; (1a504 <ip_interface_sendto+0x2f4>)
   1a4ec:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   1a4f0:	9300      	str	r3, [sp, #0]
   1a4f2:	e7b5      	b.n	1a460 <ip_interface_sendto+0x250>
   1a4f4:	4b03      	ldr	r3, [pc, #12]	; (1a504 <ip_interface_sendto+0x2f4>)
   1a4f6:	f04f 0a09 	mov.w	sl, #9
   1a4fa:	9300      	str	r3, [sp, #0]
   1a4fc:	e7b0      	b.n	1a460 <ip_interface_sendto+0x250>
   1a4fe:	f04f 0a0c 	mov.w	sl, #12
   1a502:	e6e7      	b.n	1a2d4 <ip_interface_sendto+0xc4>
   1a504:	200219a8 	.word	0x200219a8

0001a508 <ip_interface_recvfrom>:
   1a508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a50c:	b087      	sub	sp, #28
   1a50e:	2a00      	cmp	r2, #0
   1a510:	f000 8112 	beq.w	1a738 <ip_interface_recvfrom+0x230>
   1a514:	4680      	mov	r8, r0
   1a516:	468b      	mov	fp, r1
   1a518:	469a      	mov	sl, r3
   1a51a:	4691      	mov	r9, r2
   1a51c:	b11b      	cbz	r3, 1a526 <ip_interface_recvfrom+0x1e>
   1a51e:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   1a522:	f000 8107 	beq.w	1a734 <ip_interface_recvfrom+0x22c>
   1a526:	4640      	mov	r0, r8
   1a528:	f005 fdc4 	bl	200b4 <interface_socket_from_handle_get>
   1a52c:	4604      	mov	r4, r0
   1a52e:	2800      	cmp	r0, #0
   1a530:	f000 8104 	beq.w	1a73c <ip_interface_recvfrom+0x234>
   1a534:	6803      	ldr	r3, [r0, #0]
   1a536:	02db      	lsls	r3, r3, #11
   1a538:	d562      	bpl.n	1a600 <ip_interface_recvfrom+0xf8>
   1a53a:	f01a 0f02 	tst.w	sl, #2
   1a53e:	bf18      	it	ne
   1a540:	2600      	movne	r6, #0
   1a542:	f04f 35ff 	mov.w	r5, #4294967295
   1a546:	bf08      	it	eq
   1a548:	6806      	ldreq	r6, [r0, #0]
   1a54a:	f00a 0310 	and.w	r3, sl, #16
   1a54e:	bf04      	itt	eq
   1a550:	f086 5680 	eoreq.w	r6, r6, #268435456	; 0x10000000
   1a554:	f3c6 7600 	ubfxeq	r6, r6, #28, #1
   1a558:	9301      	str	r3, [sp, #4]
   1a55a:	6823      	ldr	r3, [r4, #0]
   1a55c:	03df      	lsls	r7, r3, #15
   1a55e:	d567      	bpl.n	1a630 <ip_interface_recvfrom+0x128>
   1a560:	6823      	ldr	r3, [r4, #0]
   1a562:	69e0      	ldr	r0, [r4, #28]
   1a564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1a568:	6023      	str	r3, [r4, #0]
   1a56a:	6803      	ldr	r3, [r0, #0]
   1a56c:	68db      	ldr	r3, [r3, #12]
   1a56e:	4798      	blx	r3
   1a570:	4605      	mov	r5, r0
   1a572:	3001      	adds	r0, #1
   1a574:	d07d      	beq.n	1a672 <ip_interface_recvfrom+0x16a>
   1a576:	45a9      	cmp	r9, r5
   1a578:	dd03      	ble.n	1a582 <ip_interface_recvfrom+0x7a>
   1a57a:	6923      	ldr	r3, [r4, #16]
   1a57c:	2b01      	cmp	r3, #1
   1a57e:	f000 80a3 	beq.w	1a6c8 <ip_interface_recvfrom+0x1c0>
   1a582:	f04f 0800 	mov.w	r8, #0
   1a586:	af02      	add	r7, sp, #8
   1a588:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a58a:	b103      	cbz	r3, 1a58e <ip_interface_recvfrom+0x86>
   1a58c:	681b      	ldr	r3, [r3, #0]
   1a58e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1a590:	e9cd b902 	strd	fp, r9, [sp, #8]
   1a594:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1a598:	69e0      	ldr	r0, [r4, #28]
   1a59a:	4639      	mov	r1, r7
   1a59c:	6803      	ldr	r3, [r0, #0]
   1a59e:	4652      	mov	r2, sl
   1a5a0:	689b      	ldr	r3, [r3, #8]
   1a5a2:	4798      	blx	r3
   1a5a4:	4605      	mov	r5, r0
   1a5a6:	69e0      	ldr	r0, [r4, #28]
   1a5a8:	1c6b      	adds	r3, r5, #1
   1a5aa:	6803      	ldr	r3, [r0, #0]
   1a5ac:	bf18      	it	ne
   1a5ae:	2701      	movne	r7, #1
   1a5b0:	68db      	ldr	r3, [r3, #12]
   1a5b2:	bf0a      	itet	eq
   1a5b4:	2700      	moveq	r7, #0
   1a5b6:	2600      	movne	r6, #0
   1a5b8:	2623      	moveq	r6, #35	; 0x23
   1a5ba:	4798      	blx	r3
   1a5bc:	3001      	adds	r0, #1
   1a5be:	d132      	bne.n	1a626 <ip_interface_recvfrom+0x11e>
   1a5c0:	f1b8 0f00 	cmp.w	r8, #0
   1a5c4:	f000 80b0 	beq.w	1a728 <ip_interface_recvfrom+0x220>
   1a5c8:	2f00      	cmp	r7, #0
   1a5ca:	f000 80a1 	beq.w	1a710 <ip_interface_recvfrom+0x208>
   1a5ce:	6823      	ldr	r3, [r4, #0]
   1a5d0:	0318      	lsls	r0, r3, #12
   1a5d2:	d506      	bpl.n	1a5e2 <ip_interface_recvfrom+0xda>
   1a5d4:	6823      	ldr	r3, [r4, #0]
   1a5d6:	b29b      	uxth	r3, r3
   1a5d8:	2b0d      	cmp	r3, #13
   1a5da:	d002      	beq.n	1a5e2 <ip_interface_recvfrom+0xda>
   1a5dc:	6923      	ldr	r3, [r4, #16]
   1a5de:	2b01      	cmp	r3, #1
   1a5e0:	d021      	beq.n	1a626 <ip_interface_recvfrom+0x11e>
   1a5e2:	6823      	ldr	r3, [r4, #0]
   1a5e4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1a5e8:	6823      	ldr	r3, [r4, #0]
   1a5ea:	f040 80a9 	bne.w	1a740 <ip_interface_recvfrom+0x238>
   1a5ee:	0319      	lsls	r1, r3, #12
   1a5f0:	d473      	bmi.n	1a6da <ip_interface_recvfrom+0x1d2>
   1a5f2:	2e00      	cmp	r6, #0
   1a5f4:	f040 8086 	bne.w	1a704 <ip_interface_recvfrom+0x1fc>
   1a5f8:	4628      	mov	r0, r5
   1a5fa:	b007      	add	sp, #28
   1a5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a600:	6803      	ldr	r3, [r0, #0]
   1a602:	b29b      	uxth	r3, r3
   1a604:	2b06      	cmp	r3, #6
   1a606:	d071      	beq.n	1a6ec <ip_interface_recvfrom+0x1e4>
   1a608:	6803      	ldr	r3, [r0, #0]
   1a60a:	b29b      	uxth	r3, r3
   1a60c:	2b07      	cmp	r3, #7
   1a60e:	bf0c      	ite	eq
   1a610:	2609      	moveq	r6, #9
   1a612:	2639      	movne	r6, #57	; 0x39
   1a614:	69e0      	ldr	r0, [r4, #28]
   1a616:	6803      	ldr	r3, [r0, #0]
   1a618:	68db      	ldr	r3, [r3, #12]
   1a61a:	4798      	blx	r3
   1a61c:	1c43      	adds	r3, r0, #1
   1a61e:	4605      	mov	r5, r0
   1a620:	d0df      	beq.n	1a5e2 <ip_interface_recvfrom+0xda>
   1a622:	f04f 35ff 	mov.w	r5, #4294967295
   1a626:	6823      	ldr	r3, [r4, #0]
   1a628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1a62c:	6023      	str	r3, [r4, #0]
   1a62e:	e7e0      	b.n	1a5f2 <ip_interface_recvfrom+0xea>
   1a630:	2e00      	cmp	r6, #0
   1a632:	d07d      	beq.n	1a730 <ip_interface_recvfrom+0x228>
   1a634:	6a26      	ldr	r6, [r4, #32]
   1a636:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a63a:	2e00      	cmp	r6, #0
   1a63c:	bf08      	it	eq
   1a63e:	f04f 36ff 	moveq.w	r6, #4294967295
   1a642:	af02      	add	r7, sp, #8
   1a644:	463b      	mov	r3, r7
   1a646:	4611      	mov	r1, r2
   1a648:	4640      	mov	r0, r8
   1a64a:	9602      	str	r6, [sp, #8]
   1a64c:	f005 fcbe 	bl	1ffcc <interface_socket_wait>
   1a650:	4606      	mov	r6, r0
   1a652:	b350      	cbz	r0, 1a6aa <ip_interface_recvfrom+0x1a2>
   1a654:	6823      	ldr	r3, [r4, #0]
   1a656:	031a      	lsls	r2, r3, #12
   1a658:	d532      	bpl.n	1a6c0 <ip_interface_recvfrom+0x1b8>
   1a65a:	6823      	ldr	r3, [r4, #0]
   1a65c:	b29b      	uxth	r3, r3
   1a65e:	2b0d      	cmp	r3, #13
   1a660:	d02e      	beq.n	1a6c0 <ip_interface_recvfrom+0x1b8>
   1a662:	6923      	ldr	r3, [r4, #16]
   1a664:	f1a3 0801 	sub.w	r8, r3, #1
   1a668:	fab8 f888 	clz	r8, r8
   1a66c:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1a670:	e78a      	b.n	1a588 <ip_interface_recvfrom+0x80>
   1a672:	6823      	ldr	r3, [r4, #0]
   1a674:	031a      	lsls	r2, r3, #12
   1a676:	d5db      	bpl.n	1a630 <ip_interface_recvfrom+0x128>
   1a678:	6823      	ldr	r3, [r4, #0]
   1a67a:	b29b      	uxth	r3, r3
   1a67c:	2b0d      	cmp	r3, #13
   1a67e:	d0d7      	beq.n	1a630 <ip_interface_recvfrom+0x128>
   1a680:	6923      	ldr	r3, [r4, #16]
   1a682:	69e0      	ldr	r0, [r4, #28]
   1a684:	2b01      	cmp	r3, #1
   1a686:	d033      	beq.n	1a6f0 <ip_interface_recvfrom+0x1e8>
   1a688:	2639      	movs	r6, #57	; 0x39
   1a68a:	6823      	ldr	r3, [r4, #0]
   1a68c:	0c1b      	lsrs	r3, r3, #16
   1a68e:	041b      	lsls	r3, r3, #16
   1a690:	f043 030d 	orr.w	r3, r3, #13
   1a694:	6023      	str	r3, [r4, #0]
   1a696:	6823      	ldr	r3, [r4, #0]
   1a698:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1a69c:	6023      	str	r3, [r4, #0]
   1a69e:	6803      	ldr	r3, [r0, #0]
   1a6a0:	68db      	ldr	r3, [r3, #12]
   1a6a2:	4798      	blx	r3
   1a6a4:	3001      	adds	r0, #1
   1a6a6:	d1be      	bne.n	1a626 <ip_interface_recvfrom+0x11e>
   1a6a8:	e79b      	b.n	1a5e2 <ip_interface_recvfrom+0xda>
   1a6aa:	4640      	mov	r0, r8
   1a6ac:	f005 fd02 	bl	200b4 <interface_socket_from_handle_get>
   1a6b0:	b140      	cbz	r0, 1a6c4 <ip_interface_recvfrom+0x1bc>
   1a6b2:	6846      	ldr	r6, [r0, #4]
   1a6b4:	b136      	cbz	r6, 1a6c4 <ip_interface_recvfrom+0x1bc>
   1a6b6:	2300      	movs	r3, #0
   1a6b8:	6043      	str	r3, [r0, #4]
   1a6ba:	6823      	ldr	r3, [r4, #0]
   1a6bc:	031a      	lsls	r2, r3, #12
   1a6be:	d4cc      	bmi.n	1a65a <ip_interface_recvfrom+0x152>
   1a6c0:	69e0      	ldr	r0, [r4, #28]
   1a6c2:	e7ec      	b.n	1a69e <ip_interface_recvfrom+0x196>
   1a6c4:	2601      	movs	r6, #1
   1a6c6:	e748      	b.n	1a55a <ip_interface_recvfrom+0x52>
   1a6c8:	9b01      	ldr	r3, [sp, #4]
   1a6ca:	b11b      	cbz	r3, 1a6d4 <ip_interface_recvfrom+0x1cc>
   1a6cc:	6823      	ldr	r3, [r4, #0]
   1a6ce:	00d9      	lsls	r1, r3, #3
   1a6d0:	d5b0      	bpl.n	1a634 <ip_interface_recvfrom+0x12c>
   1a6d2:	e756      	b.n	1a582 <ip_interface_recvfrom+0x7a>
   1a6d4:	4698      	mov	r8, r3
   1a6d6:	af02      	add	r7, sp, #8
   1a6d8:	e756      	b.n	1a588 <ip_interface_recvfrom+0x80>
   1a6da:	6823      	ldr	r3, [r4, #0]
   1a6dc:	b29b      	uxth	r3, r3
   1a6de:	2b0d      	cmp	r3, #13
   1a6e0:	d187      	bne.n	1a5f2 <ip_interface_recvfrom+0xea>
   1a6e2:	68a3      	ldr	r3, [r4, #8]
   1a6e4:	2b00      	cmp	r3, #0
   1a6e6:	d084      	beq.n	1a5f2 <ip_interface_recvfrom+0xea>
   1a6e8:	68a6      	ldr	r6, [r4, #8]
   1a6ea:	e782      	b.n	1a5f2 <ip_interface_recvfrom+0xea>
   1a6ec:	2609      	movs	r6, #9
   1a6ee:	e791      	b.n	1a614 <ip_interface_recvfrom+0x10c>
   1a6f0:	6803      	ldr	r3, [r0, #0]
   1a6f2:	68db      	ldr	r3, [r3, #12]
   1a6f4:	4798      	blx	r3
   1a6f6:	3001      	adds	r0, #1
   1a6f8:	d00a      	beq.n	1a710 <ip_interface_recvfrom+0x208>
   1a6fa:	2623      	movs	r6, #35	; 0x23
   1a6fc:	6823      	ldr	r3, [r4, #0]
   1a6fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1a702:	6023      	str	r3, [r4, #0]
   1a704:	4630      	mov	r0, r6
   1a706:	f7fb f80b 	bl	15720 <bsd_os_errno_set>
   1a70a:	f04f 35ff 	mov.w	r5, #4294967295
   1a70e:	e773      	b.n	1a5f8 <ip_interface_recvfrom+0xf0>
   1a710:	6823      	ldr	r3, [r4, #0]
   1a712:	2500      	movs	r5, #0
   1a714:	0c1b      	lsrs	r3, r3, #16
   1a716:	041b      	lsls	r3, r3, #16
   1a718:	f043 030d 	orr.w	r3, r3, #13
   1a71c:	6023      	str	r3, [r4, #0]
   1a71e:	6823      	ldr	r3, [r4, #0]
   1a720:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1a724:	6023      	str	r3, [r4, #0]
   1a726:	e767      	b.n	1a5f8 <ip_interface_recvfrom+0xf0>
   1a728:	2f00      	cmp	r7, #0
   1a72a:	f47f af50 	bne.w	1a5ce <ip_interface_recvfrom+0xc6>
   1a72e:	e758      	b.n	1a5e2 <ip_interface_recvfrom+0xda>
   1a730:	2623      	movs	r6, #35	; 0x23
   1a732:	e7c5      	b.n	1a6c0 <ip_interface_recvfrom+0x1b8>
   1a734:	262d      	movs	r6, #45	; 0x2d
   1a736:	e7e5      	b.n	1a704 <ip_interface_recvfrom+0x1fc>
   1a738:	2616      	movs	r6, #22
   1a73a:	e7e3      	b.n	1a704 <ip_interface_recvfrom+0x1fc>
   1a73c:	2609      	movs	r6, #9
   1a73e:	e7e1      	b.n	1a704 <ip_interface_recvfrom+0x1fc>
   1a740:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   1a744:	6023      	str	r3, [r4, #0]
   1a746:	6823      	ldr	r3, [r4, #0]
   1a748:	2669      	movs	r6, #105	; 0x69
   1a74a:	0c1b      	lsrs	r3, r3, #16
   1a74c:	041b      	lsls	r3, r3, #16
   1a74e:	f043 030d 	orr.w	r3, r3, #13
   1a752:	6023      	str	r3, [r4, #0]
   1a754:	e7d6      	b.n	1a704 <ip_interface_recvfrom+0x1fc>
   1a756:	bf00      	nop

0001a758 <ip_interface_connect>:
   1a758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a75c:	b082      	sub	sp, #8
   1a75e:	2900      	cmp	r1, #0
   1a760:	d04b      	beq.n	1a7fa <ip_interface_connect+0xa2>
   1a762:	4617      	mov	r7, r2
   1a764:	2a00      	cmp	r2, #0
   1a766:	d048      	beq.n	1a7fa <ip_interface_connect+0xa2>
   1a768:	4680      	mov	r8, r0
   1a76a:	4689      	mov	r9, r1
   1a76c:	f005 fca2 	bl	200b4 <interface_socket_from_handle_get>
   1a770:	4605      	mov	r5, r0
   1a772:	2800      	cmp	r0, #0
   1a774:	f000 80af 	beq.w	1a8d6 <ip_interface_connect+0x17e>
   1a778:	6803      	ldr	r3, [r0, #0]
   1a77a:	b29b      	uxth	r3, r3
   1a77c:	2b02      	cmp	r3, #2
   1a77e:	d004      	beq.n	1a78a <ip_interface_connect+0x32>
   1a780:	6803      	ldr	r3, [r0, #0]
   1a782:	b29b      	uxth	r3, r3
   1a784:	2b04      	cmp	r3, #4
   1a786:	f040 809d 	bne.w	1a8c4 <ip_interface_connect+0x16c>
   1a78a:	6829      	ldr	r1, [r5, #0]
   1a78c:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   1a790:	f040 8089 	bne.w	1a8a6 <ip_interface_connect+0x14e>
   1a794:	ae02      	add	r6, sp, #8
   1a796:	f8d5 a018 	ldr.w	sl, [r5, #24]
   1a79a:	f846 1d04 	str.w	r1, [r6, #-4]!
   1a79e:	4630      	mov	r0, r6
   1a7a0:	f7ff fb48 	bl	19e34 <rpc_ip_client_request_alloc>
   1a7a4:	bb98      	cbnz	r0, 1a80e <ip_interface_connect+0xb6>
   1a7a6:	2108      	movs	r1, #8
   1a7a8:	ea4f 4208 	mov.w	r2, r8, lsl #16
   1a7ac:	9c01      	ldr	r4, [sp, #4]
   1a7ae:	f442 43e0 	orr.w	r3, r2, #28672	; 0x7000
   1a7b2:	f043 0302 	orr.w	r3, r3, #2
   1a7b6:	60e3      	str	r3, [r4, #12]
   1a7b8:	f8c4 a010 	str.w	sl, [r4, #16]
   1a7bc:	7260      	strb	r0, [r4, #9]
   1a7be:	72a0      	strb	r0, [r4, #10]
   1a7c0:	72e0      	strb	r0, [r4, #11]
   1a7c2:	7221      	strb	r1, [r4, #8]
   1a7c4:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
   1a7c8:	f042 0202 	orr.w	r2, r2, #2
   1a7cc:	60e2      	str	r2, [r4, #12]
   1a7ce:	68a3      	ldr	r3, [r4, #8]
   1a7d0:	69aa      	ldr	r2, [r5, #24]
   1a7d2:	3304      	adds	r3, #4
   1a7d4:	6122      	str	r2, [r4, #16]
   1a7d6:	60a3      	str	r3, [r4, #8]
   1a7d8:	68eb      	ldr	r3, [r5, #12]
   1a7da:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1a7de:	4293      	cmp	r3, r2
   1a7e0:	d11b      	bne.n	1a81a <ip_interface_connect+0xc2>
   1a7e2:	f899 2000 	ldrb.w	r2, [r9]
   1a7e6:	4297      	cmp	r7, r2
   1a7e8:	d107      	bne.n	1a7fa <ip_interface_connect+0xa2>
   1a7ea:	2b02      	cmp	r3, #2
   1a7ec:	f104 0018 	add.w	r0, r4, #24
   1a7f0:	d015      	beq.n	1a81e <ip_interface_connect+0xc6>
   1a7f2:	2b0a      	cmp	r3, #10
   1a7f4:	d101      	bne.n	1a7fa <ip_interface_connect+0xa2>
   1a7f6:	2f24      	cmp	r7, #36	; 0x24
   1a7f8:	d01d      	beq.n	1a836 <ip_interface_connect+0xde>
   1a7fa:	2416      	movs	r4, #22
   1a7fc:	4620      	mov	r0, r4
   1a7fe:	f7fa ff8f 	bl	15720 <bsd_os_errno_set>
   1a802:	f04f 34ff 	mov.w	r4, #4294967295
   1a806:	4620      	mov	r0, r4
   1a808:	b002      	add	sp, #8
   1a80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a80e:	9c01      	ldr	r4, [sp, #4]
   1a810:	2c00      	cmp	r4, #0
   1a812:	d05e      	beq.n	1a8d2 <ip_interface_connect+0x17a>
   1a814:	ea4f 4208 	mov.w	r2, r8, lsl #16
   1a818:	e7d4      	b.n	1a7c4 <ip_interface_connect+0x6c>
   1a81a:	242f      	movs	r4, #47	; 0x2f
   1a81c:	e7ee      	b.n	1a7fc <ip_interface_connect+0xa4>
   1a81e:	2f10      	cmp	r7, #16
   1a820:	d1eb      	bne.n	1a7fa <ip_interface_connect+0xa2>
   1a822:	2204      	movs	r2, #4
   1a824:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   1a828:	f109 010c 	add.w	r1, r9, #12
   1a82c:	82e2      	strh	r2, [r4, #22]
   1a82e:	82a3      	strh	r3, [r4, #20]
   1a830:	f7f2 f9a0 	bl	cb74 <memcpy>
   1a834:	e008      	b.n	1a848 <ip_interface_connect+0xf0>
   1a836:	2210      	movs	r2, #16
   1a838:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   1a83c:	eb09 0102 	add.w	r1, r9, r2
   1a840:	82e2      	strh	r2, [r4, #22]
   1a842:	82a3      	strh	r3, [r4, #20]
   1a844:	f7f2 f996 	bl	cb74 <memcpy>
   1a848:	68a3      	ldr	r3, [r4, #8]
   1a84a:	8ae2      	ldrh	r2, [r4, #22]
   1a84c:	f247 0102 	movw	r1, #28674	; 0x7002
   1a850:	4413      	add	r3, r2
   1a852:	60a3      	str	r3, [r4, #8]
   1a854:	682f      	ldr	r7, [r5, #0]
   1a856:	682b      	ldr	r3, [r5, #0]
   1a858:	4620      	mov	r0, r4
   1a85a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1a85e:	602b      	str	r3, [r5, #0]
   1a860:	f7ff fafc 	bl	19e5c <rpc_ip_client_request_send>
   1a864:	b9a8      	cbnz	r0, 1a892 <ip_interface_connect+0x13a>
   1a866:	682b      	ldr	r3, [r5, #0]
   1a868:	00db      	lsls	r3, r3, #3
   1a86a:	d429      	bmi.n	1a8c0 <ip_interface_connect+0x168>
   1a86c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   1a86e:	4633      	mov	r3, r6
   1a870:	2c00      	cmp	r4, #0
   1a872:	bf08      	it	eq
   1a874:	f04f 34ff 	moveq.w	r4, #4294967295
   1a878:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a87c:	2105      	movs	r1, #5
   1a87e:	4640      	mov	r0, r8
   1a880:	9401      	str	r4, [sp, #4]
   1a882:	f005 fba3 	bl	1ffcc <interface_socket_wait>
   1a886:	4604      	mov	r4, r0
   1a888:	b178      	cbz	r0, 1a8aa <ip_interface_connect+0x152>
   1a88a:	2c73      	cmp	r4, #115	; 0x73
   1a88c:	d0b6      	beq.n	1a7fc <ip_interface_connect+0xa4>
   1a88e:	602f      	str	r7, [r5, #0]
   1a890:	e7b4      	b.n	1a7fc <ip_interface_connect+0xa4>
   1a892:	6820      	ldr	r0, [r4, #0]
   1a894:	b108      	cbz	r0, 1a89a <ip_interface_connect+0x142>
   1a896:	f7ff faff 	bl	19e98 <rpc_ip_client_data_free>
   1a89a:	4620      	mov	r0, r4
   1a89c:	f7ff faf4 	bl	19e88 <rpc_ip_client_message_free>
   1a8a0:	2423      	movs	r4, #35	; 0x23
   1a8a2:	602f      	str	r7, [r5, #0]
   1a8a4:	e7aa      	b.n	1a7fc <ip_interface_connect+0xa4>
   1a8a6:	2472      	movs	r4, #114	; 0x72
   1a8a8:	e7a8      	b.n	1a7fc <ip_interface_connect+0xa4>
   1a8aa:	4640      	mov	r0, r8
   1a8ac:	f005 fc02 	bl	200b4 <interface_socket_from_handle_get>
   1a8b0:	2800      	cmp	r0, #0
   1a8b2:	d0a8      	beq.n	1a806 <ip_interface_connect+0xae>
   1a8b4:	6843      	ldr	r3, [r0, #4]
   1a8b6:	2b00      	cmp	r3, #0
   1a8b8:	d0a5      	beq.n	1a806 <ip_interface_connect+0xae>
   1a8ba:	6044      	str	r4, [r0, #4]
   1a8bc:	461c      	mov	r4, r3
   1a8be:	e7e4      	b.n	1a88a <ip_interface_connect+0x132>
   1a8c0:	2473      	movs	r4, #115	; 0x73
   1a8c2:	e79b      	b.n	1a7fc <ip_interface_connect+0xa4>
   1a8c4:	6803      	ldr	r3, [r0, #0]
   1a8c6:	b29b      	uxth	r3, r3
   1a8c8:	2b05      	cmp	r3, #5
   1a8ca:	bf14      	ite	ne
   1a8cc:	2409      	movne	r4, #9
   1a8ce:	2438      	moveq	r4, #56	; 0x38
   1a8d0:	e794      	b.n	1a7fc <ip_interface_connect+0xa4>
   1a8d2:	240c      	movs	r4, #12
   1a8d4:	e792      	b.n	1a7fc <ip_interface_connect+0xa4>
   1a8d6:	2409      	movs	r4, #9
   1a8d8:	e790      	b.n	1a7fc <ip_interface_connect+0xa4>
   1a8da:	bf00      	nop

0001a8dc <ip_interface_socketoption_get>:
   1a8dc:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   1a8e0:	f04f 34ff 	mov.w	r4, #4294967295
   1a8e4:	b082      	sub	sp, #8
   1a8e6:	9400      	str	r4, [sp, #0]
   1a8e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1a8ea:	2c00      	cmp	r4, #0
   1a8ec:	d05b      	beq.n	1a9a6 <ip_interface_socketoption_get+0xca>
   1a8ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1a8f0:	6824      	ldr	r4, [r4, #0]
   1a8f2:	2c00      	cmp	r4, #0
   1a8f4:	d057      	beq.n	1a9a6 <ip_interface_socketoption_get+0xca>
   1a8f6:	680c      	ldr	r4, [r1, #0]
   1a8f8:	0266      	lsls	r6, r4, #9
   1a8fa:	d44f      	bmi.n	1a99c <ip_interface_socketoption_get+0xc0>
   1a8fc:	680c      	ldr	r4, [r1, #0]
   1a8fe:	0225      	lsls	r5, r4, #8
   1a900:	d44c      	bmi.n	1a99c <ip_interface_socketoption_get+0xc0>
   1a902:	680c      	ldr	r4, [r1, #0]
   1a904:	01e4      	lsls	r4, r4, #7
   1a906:	d449      	bmi.n	1a99c <ip_interface_socketoption_get+0xc0>
   1a908:	680c      	ldr	r4, [r1, #0]
   1a90a:	f014 7c00 	ands.w	ip, r4, #33554432	; 0x2000000
   1a90e:	d145      	bne.n	1a99c <ip_interface_socketoption_get+0xc0>
   1a910:	460c      	mov	r4, r1
   1a912:	680e      	ldr	r6, [r1, #0]
   1a914:	461f      	mov	r7, r3
   1a916:	680b      	ldr	r3, [r1, #0]
   1a918:	4681      	mov	r9, r0
   1a91a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1a91e:	600b      	str	r3, [r1, #0]
   1a920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a922:	a802      	add	r0, sp, #8
   1a924:	f840 cd04 	str.w	ip, [r0, #-4]!
   1a928:	6819      	ldr	r1, [r3, #0]
   1a92a:	4615      	mov	r5, r2
   1a92c:	f8d4 b018 	ldr.w	fp, [r4, #24]
   1a930:	f7ff fa80 	bl	19e34 <rpc_ip_client_request_alloc>
   1a934:	2800      	cmp	r0, #0
   1a936:	d146      	bne.n	1a9c6 <ip_interface_socketoption_get+0xea>
   1a938:	f247 0304 	movw	r3, #28676	; 0x7004
   1a93c:	2208      	movs	r2, #8
   1a93e:	f8dd a004 	ldr.w	sl, [sp, #4]
   1a942:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   1a946:	f8ca 300c 	str.w	r3, [sl, #12]
   1a94a:	f8ca b010 	str.w	fp, [sl, #16]
   1a94e:	f88a 0009 	strb.w	r0, [sl, #9]
   1a952:	f88a 000a 	strb.w	r0, [sl, #10]
   1a956:	f88a 000b 	strb.w	r0, [sl, #11]
   1a95a:	f88a 2008 	strb.w	r2, [sl, #8]
   1a95e:	f8da 3008 	ldr.w	r3, [sl, #8]
   1a962:	f8ca 7018 	str.w	r7, [sl, #24]
   1a966:	3308      	adds	r3, #8
   1a968:	f8ca 5014 	str.w	r5, [sl, #20]
   1a96c:	f8ca 3008 	str.w	r3, [sl, #8]
   1a970:	f247 0104 	movw	r1, #28676	; 0x7004
   1a974:	4650      	mov	r0, sl
   1a976:	f8da 7000 	ldr.w	r7, [sl]
   1a97a:	f7ff fa6f 	bl	19e5c <rpc_ip_client_request_send>
   1a97e:	b9b8      	cbnz	r0, 1a9b0 <ip_interface_socketoption_get+0xd4>
   1a980:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   1a984:	466b      	mov	r3, sp
   1a986:	4611      	mov	r1, r2
   1a988:	4648      	mov	r0, r9
   1a98a:	f005 fb1f 	bl	1ffcc <interface_socket_wait>
   1a98e:	4605      	mov	r5, r0
   1a990:	b300      	cbz	r0, 1a9d4 <ip_interface_socketoption_get+0xf8>
   1a992:	4638      	mov	r0, r7
   1a994:	f7ff fa80 	bl	19e98 <rpc_ip_client_data_free>
   1a998:	6026      	str	r6, [r4, #0]
   1a99a:	e000      	b.n	1a99e <ip_interface_socketoption_get+0xc2>
   1a99c:	2523      	movs	r5, #35	; 0x23
   1a99e:	4628      	mov	r0, r5
   1a9a0:	b002      	add	sp, #8
   1a9a2:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   1a9a6:	2516      	movs	r5, #22
   1a9a8:	4628      	mov	r0, r5
   1a9aa:	b002      	add	sp, #8
   1a9ac:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   1a9b0:	f8da 0000 	ldr.w	r0, [sl]
   1a9b4:	b108      	cbz	r0, 1a9ba <ip_interface_socketoption_get+0xde>
   1a9b6:	f7ff fa6f 	bl	19e98 <rpc_ip_client_data_free>
   1a9ba:	4650      	mov	r0, sl
   1a9bc:	f7ff fa64 	bl	19e88 <rpc_ip_client_message_free>
   1a9c0:	2523      	movs	r5, #35	; 0x23
   1a9c2:	6026      	str	r6, [r4, #0]
   1a9c4:	e7e5      	b.n	1a992 <ip_interface_socketoption_get+0xb6>
   1a9c6:	f8dd a004 	ldr.w	sl, [sp, #4]
   1a9ca:	f1ba 0f00 	cmp.w	sl, #0
   1a9ce:	d1c6      	bne.n	1a95e <ip_interface_socketoption_get+0x82>
   1a9d0:	250c      	movs	r5, #12
   1a9d2:	e7e1      	b.n	1a998 <ip_interface_socketoption_get+0xbc>
   1a9d4:	4648      	mov	r0, r9
   1a9d6:	f005 fb6d 	bl	200b4 <interface_socket_from_handle_get>
   1a9da:	b120      	cbz	r0, 1a9e6 <ip_interface_socketoption_get+0x10a>
   1a9dc:	6843      	ldr	r3, [r0, #4]
   1a9de:	b113      	cbz	r3, 1a9e6 <ip_interface_socketoption_get+0x10a>
   1a9e0:	6045      	str	r5, [r0, #4]
   1a9e2:	461d      	mov	r5, r3
   1a9e4:	e7d5      	b.n	1a992 <ip_interface_socketoption_get+0xb6>
   1a9e6:	f8df b050 	ldr.w	fp, [pc, #80]	; 1aa38 <ip_interface_socketoption_get+0x15c>
   1a9ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a9ec:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   1a9f0:	681b      	ldr	r3, [r3, #0]
   1a9f2:	b1b0      	cbz	r0, 1aa22 <ip_interface_socketoption_get+0x146>
   1a9f4:	6842      	ldr	r2, [r0, #4]
   1a9f6:	429a      	cmp	r2, r3
   1a9f8:	d811      	bhi.n	1aa1e <ip_interface_socketoption_get+0x142>
   1a9fa:	6801      	ldr	r1, [r0, #0]
   1a9fc:	b179      	cbz	r1, 1aa1e <ip_interface_socketoption_get+0x142>
   1a9fe:	980a      	ldr	r0, [sp, #40]	; 0x28
   1aa00:	f7f2 f8b8 	bl	cb74 <memcpy>
   1aa04:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
   1aa08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1aa0a:	685b      	ldr	r3, [r3, #4]
   1aa0c:	6013      	str	r3, [r2, #0]
   1aa0e:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   1aa12:	f7ff fa39 	bl	19e88 <rpc_ip_client_message_free>
   1aa16:	2300      	movs	r3, #0
   1aa18:	f84b 3029 	str.w	r3, [fp, r9, lsl #2]
   1aa1c:	e7b9      	b.n	1a992 <ip_interface_socketoption_get+0xb6>
   1aa1e:	2516      	movs	r5, #22
   1aa20:	e7f7      	b.n	1aa12 <ip_interface_socketoption_get+0x136>
   1aa22:	461a      	mov	r2, r3
   1aa24:	980a      	ldr	r0, [sp, #40]	; 0x28
   1aa26:	4639      	mov	r1, r7
   1aa28:	f7f2 f8a4 	bl	cb74 <memcpy>
   1aa2c:	f8da 3004 	ldr.w	r3, [sl, #4]
   1aa30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1aa32:	6013      	str	r3, [r2, #0]
   1aa34:	e7ad      	b.n	1a992 <ip_interface_socketoption_get+0xb6>
   1aa36:	bf00      	nop
   1aa38:	200219a8 	.word	0x200219a8

0001aa3c <ip_interface_socketoption_send>:
   1aa3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aa40:	f04f 35ff 	mov.w	r5, #4294967295
   1aa44:	680c      	ldr	r4, [r1, #0]
   1aa46:	b082      	sub	sp, #8
   1aa48:	0266      	lsls	r6, r4, #9
   1aa4a:	9500      	str	r5, [sp, #0]
   1aa4c:	d44d      	bmi.n	1aaea <ip_interface_socketoption_send+0xae>
   1aa4e:	680c      	ldr	r4, [r1, #0]
   1aa50:	0225      	lsls	r5, r4, #8
   1aa52:	d44a      	bmi.n	1aaea <ip_interface_socketoption_send+0xae>
   1aa54:	680c      	ldr	r4, [r1, #0]
   1aa56:	01e4      	lsls	r4, r4, #7
   1aa58:	d447      	bmi.n	1aaea <ip_interface_socketoption_send+0xae>
   1aa5a:	680c      	ldr	r4, [r1, #0]
   1aa5c:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
   1aa60:	d143      	bne.n	1aaea <ip_interface_socketoption_send+0xae>
   1aa62:	4688      	mov	r8, r1
   1aa64:	f8d1 9000 	ldr.w	r9, [r1]
   1aa68:	461f      	mov	r7, r3
   1aa6a:	680b      	ldr	r3, [r1, #0]
   1aa6c:	4605      	mov	r5, r0
   1aa6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1aa72:	a802      	add	r0, sp, #8
   1aa74:	600b      	str	r3, [r1, #0]
   1aa76:	f840 4d04 	str.w	r4, [r0, #-4]!
   1aa7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1aa7c:	4616      	mov	r6, r2
   1aa7e:	f8d8 a018 	ldr.w	sl, [r8, #24]
   1aa82:	f7ff f9d7 	bl	19e34 <rpc_ip_client_request_alloc>
   1aa86:	bba8      	cbnz	r0, 1aaf4 <ip_interface_socketoption_send+0xb8>
   1aa88:	f247 0303 	movw	r3, #28675	; 0x7003
   1aa8c:	2208      	movs	r2, #8
   1aa8e:	9c01      	ldr	r4, [sp, #4]
   1aa90:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   1aa94:	60e3      	str	r3, [r4, #12]
   1aa96:	f8c4 a010 	str.w	sl, [r4, #16]
   1aa9a:	7260      	strb	r0, [r4, #9]
   1aa9c:	72a0      	strb	r0, [r4, #10]
   1aa9e:	72e0      	strb	r0, [r4, #11]
   1aaa0:	7222      	strb	r2, [r4, #8]
   1aaa2:	68a3      	ldr	r3, [r4, #8]
   1aaa4:	6166      	str	r6, [r4, #20]
   1aaa6:	3308      	adds	r3, #8
   1aaa8:	60a3      	str	r3, [r4, #8]
   1aaaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1aaac:	61a7      	str	r7, [r4, #24]
   1aaae:	b133      	cbz	r3, 1aabe <ip_interface_socketoption_send+0x82>
   1aab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1aab2:	b123      	cbz	r3, 1aabe <ip_interface_socketoption_send+0x82>
   1aab4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1aab6:	4619      	mov	r1, r3
   1aab8:	6820      	ldr	r0, [r4, #0]
   1aaba:	f7f2 f85b 	bl	cb74 <memcpy>
   1aabe:	f247 0103 	movw	r1, #28675	; 0x7003
   1aac2:	4620      	mov	r0, r4
   1aac4:	f7ff f9ca 	bl	19e5c <rpc_ip_client_request_send>
   1aac8:	4606      	mov	r6, r0
   1aaca:	b9c0      	cbnz	r0, 1aafe <ip_interface_socketoption_send+0xc2>
   1aacc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1aad0:	466b      	mov	r3, sp
   1aad2:	4611      	mov	r1, r2
   1aad4:	4628      	mov	r0, r5
   1aad6:	f005 fa79 	bl	1ffcc <interface_socket_wait>
   1aada:	4604      	mov	r4, r0
   1aadc:	b1d0      	cbz	r0, 1ab14 <ip_interface_socketoption_send+0xd8>
   1aade:	4620      	mov	r0, r4
   1aae0:	f8c8 9000 	str.w	r9, [r8]
   1aae4:	b002      	add	sp, #8
   1aae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1aaea:	2423      	movs	r4, #35	; 0x23
   1aaec:	4620      	mov	r0, r4
   1aaee:	b002      	add	sp, #8
   1aaf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1aaf4:	9c01      	ldr	r4, [sp, #4]
   1aaf6:	2c00      	cmp	r4, #0
   1aaf8:	d1d3      	bne.n	1aaa2 <ip_interface_socketoption_send+0x66>
   1aafa:	240c      	movs	r4, #12
   1aafc:	e7ef      	b.n	1aade <ip_interface_socketoption_send+0xa2>
   1aafe:	6820      	ldr	r0, [r4, #0]
   1ab00:	b108      	cbz	r0, 1ab06 <ip_interface_socketoption_send+0xca>
   1ab02:	f7ff f9c9 	bl	19e98 <rpc_ip_client_data_free>
   1ab06:	4620      	mov	r0, r4
   1ab08:	f7ff f9be 	bl	19e88 <rpc_ip_client_message_free>
   1ab0c:	2423      	movs	r4, #35	; 0x23
   1ab0e:	f8c8 9000 	str.w	r9, [r8]
   1ab12:	e7e4      	b.n	1aade <ip_interface_socketoption_send+0xa2>
   1ab14:	4628      	mov	r0, r5
   1ab16:	f005 facd 	bl	200b4 <interface_socket_from_handle_get>
   1ab1a:	2800      	cmp	r0, #0
   1ab1c:	d0df      	beq.n	1aade <ip_interface_socketoption_send+0xa2>
   1ab1e:	6844      	ldr	r4, [r0, #4]
   1ab20:	2c00      	cmp	r4, #0
   1ab22:	d0dc      	beq.n	1aade <ip_interface_socketoption_send+0xa2>
   1ab24:	6046      	str	r6, [r0, #4]
   1ab26:	e7da      	b.n	1aade <ip_interface_socketoption_send+0xa2>

0001ab28 <ip_interface_bind>:
   1ab28:	f04f 33ff 	mov.w	r3, #4294967295
   1ab2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ab30:	b083      	sub	sp, #12
   1ab32:	9300      	str	r3, [sp, #0]
   1ab34:	b3b1      	cbz	r1, 1aba4 <ip_interface_bind+0x7c>
   1ab36:	4616      	mov	r6, r2
   1ab38:	b3a2      	cbz	r2, 1aba4 <ip_interface_bind+0x7c>
   1ab3a:	4607      	mov	r7, r0
   1ab3c:	4688      	mov	r8, r1
   1ab3e:	f005 fab9 	bl	200b4 <interface_socket_from_handle_get>
   1ab42:	4605      	mov	r5, r0
   1ab44:	2800      	cmp	r0, #0
   1ab46:	d04a      	beq.n	1abde <ip_interface_bind+0xb6>
   1ab48:	6803      	ldr	r3, [r0, #0]
   1ab4a:	b29b      	uxth	r3, r3
   1ab4c:	2b02      	cmp	r3, #2
   1ab4e:	d146      	bne.n	1abde <ip_interface_bind+0xb6>
   1ab50:	2100      	movs	r1, #0
   1ab52:	a802      	add	r0, sp, #8
   1ab54:	f840 1d04 	str.w	r1, [r0, #-4]!
   1ab58:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1ab5c:	f7ff f96a 	bl	19e34 <rpc_ip_client_request_alloc>
   1ab60:	bb50      	cbnz	r0, 1abb8 <ip_interface_bind+0x90>
   1ab62:	f247 0305 	movw	r3, #28677	; 0x7005
   1ab66:	2208      	movs	r2, #8
   1ab68:	9c01      	ldr	r4, [sp, #4]
   1ab6a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   1ab6e:	60e3      	str	r3, [r4, #12]
   1ab70:	f8c4 9010 	str.w	r9, [r4, #16]
   1ab74:	7260      	strb	r0, [r4, #9]
   1ab76:	72a0      	strb	r0, [r4, #10]
   1ab78:	72e0      	strb	r0, [r4, #11]
   1ab7a:	7222      	strb	r2, [r4, #8]
   1ab7c:	68a3      	ldr	r3, [r4, #8]
   1ab7e:	3304      	adds	r3, #4
   1ab80:	60a3      	str	r3, [r4, #8]
   1ab82:	68eb      	ldr	r3, [r5, #12]
   1ab84:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1ab88:	4293      	cmp	r3, r2
   1ab8a:	d11a      	bne.n	1abc2 <ip_interface_bind+0x9a>
   1ab8c:	f898 2000 	ldrb.w	r2, [r8]
   1ab90:	4296      	cmp	r6, r2
   1ab92:	d107      	bne.n	1aba4 <ip_interface_bind+0x7c>
   1ab94:	2b02      	cmp	r3, #2
   1ab96:	f104 0018 	add.w	r0, r4, #24
   1ab9a:	d014      	beq.n	1abc6 <ip_interface_bind+0x9e>
   1ab9c:	2b0a      	cmp	r3, #10
   1ab9e:	d101      	bne.n	1aba4 <ip_interface_bind+0x7c>
   1aba0:	2e24      	cmp	r6, #36	; 0x24
   1aba2:	d01e      	beq.n	1abe2 <ip_interface_bind+0xba>
   1aba4:	2416      	movs	r4, #22
   1aba6:	4620      	mov	r0, r4
   1aba8:	f7fa fdba 	bl	15720 <bsd_os_errno_set>
   1abac:	f04f 34ff 	mov.w	r4, #4294967295
   1abb0:	4620      	mov	r0, r4
   1abb2:	b003      	add	sp, #12
   1abb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1abb8:	9c01      	ldr	r4, [sp, #4]
   1abba:	2c00      	cmp	r4, #0
   1abbc:	d1de      	bne.n	1ab7c <ip_interface_bind+0x54>
   1abbe:	240c      	movs	r4, #12
   1abc0:	e7f1      	b.n	1aba6 <ip_interface_bind+0x7e>
   1abc2:	242f      	movs	r4, #47	; 0x2f
   1abc4:	e7ef      	b.n	1aba6 <ip_interface_bind+0x7e>
   1abc6:	2e10      	cmp	r6, #16
   1abc8:	d1ec      	bne.n	1aba4 <ip_interface_bind+0x7c>
   1abca:	2204      	movs	r2, #4
   1abcc:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1abd0:	f108 010c 	add.w	r1, r8, #12
   1abd4:	82e2      	strh	r2, [r4, #22]
   1abd6:	82a3      	strh	r3, [r4, #20]
   1abd8:	f7f1 ffcc 	bl	cb74 <memcpy>
   1abdc:	e00a      	b.n	1abf4 <ip_interface_bind+0xcc>
   1abde:	2409      	movs	r4, #9
   1abe0:	e7e1      	b.n	1aba6 <ip_interface_bind+0x7e>
   1abe2:	2210      	movs	r2, #16
   1abe4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1abe8:	eb08 0102 	add.w	r1, r8, r2
   1abec:	82e2      	strh	r2, [r4, #22]
   1abee:	82a3      	strh	r3, [r4, #20]
   1abf0:	f7f1 ffc0 	bl	cb74 <memcpy>
   1abf4:	68a3      	ldr	r3, [r4, #8]
   1abf6:	8ae2      	ldrh	r2, [r4, #22]
   1abf8:	f247 0105 	movw	r1, #28677	; 0x7005
   1abfc:	4413      	add	r3, r2
   1abfe:	60a3      	str	r3, [r4, #8]
   1ac00:	682b      	ldr	r3, [r5, #0]
   1ac02:	4620      	mov	r0, r4
   1ac04:	0c1b      	lsrs	r3, r3, #16
   1ac06:	041b      	lsls	r3, r3, #16
   1ac08:	f043 0303 	orr.w	r3, r3, #3
   1ac0c:	602b      	str	r3, [r5, #0]
   1ac0e:	682e      	ldr	r6, [r5, #0]
   1ac10:	f7ff f924 	bl	19e5c <rpc_ip_client_request_send>
   1ac14:	4680      	mov	r8, r0
   1ac16:	b978      	cbnz	r0, 1ac38 <ip_interface_bind+0x110>
   1ac18:	466b      	mov	r3, sp
   1ac1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ac1e:	2104      	movs	r1, #4
   1ac20:	4638      	mov	r0, r7
   1ac22:	f005 f9d3 	bl	1ffcc <interface_socket_wait>
   1ac26:	4604      	mov	r4, r0
   1ac28:	b1a0      	cbz	r0, 1ac54 <ip_interface_bind+0x12c>
   1ac2a:	682b      	ldr	r3, [r5, #0]
   1ac2c:	0c1b      	lsrs	r3, r3, #16
   1ac2e:	041b      	lsls	r3, r3, #16
   1ac30:	f043 0302 	orr.w	r3, r3, #2
   1ac34:	602b      	str	r3, [r5, #0]
   1ac36:	e7b6      	b.n	1aba6 <ip_interface_bind+0x7e>
   1ac38:	6820      	ldr	r0, [r4, #0]
   1ac3a:	b108      	cbz	r0, 1ac40 <ip_interface_bind+0x118>
   1ac3c:	f7ff f92c 	bl	19e98 <rpc_ip_client_data_free>
   1ac40:	0c36      	lsrs	r6, r6, #16
   1ac42:	0436      	lsls	r6, r6, #16
   1ac44:	4620      	mov	r0, r4
   1ac46:	f046 0602 	orr.w	r6, r6, #2
   1ac4a:	f7ff f91d 	bl	19e88 <rpc_ip_client_message_free>
   1ac4e:	2423      	movs	r4, #35	; 0x23
   1ac50:	602e      	str	r6, [r5, #0]
   1ac52:	e7a8      	b.n	1aba6 <ip_interface_bind+0x7e>
   1ac54:	4638      	mov	r0, r7
   1ac56:	f005 fa2d 	bl	200b4 <interface_socket_from_handle_get>
   1ac5a:	2800      	cmp	r0, #0
   1ac5c:	d0a8      	beq.n	1abb0 <ip_interface_bind+0x88>
   1ac5e:	6844      	ldr	r4, [r0, #4]
   1ac60:	2c00      	cmp	r4, #0
   1ac62:	d0a5      	beq.n	1abb0 <ip_interface_bind+0x88>
   1ac64:	f8c0 8004 	str.w	r8, [r0, #4]
   1ac68:	e7df      	b.n	1ac2a <ip_interface_bind+0x102>
   1ac6a:	bf00      	nop

0001ac6c <ip_interface_listen>:
   1ac6c:	f04f 33ff 	mov.w	r3, #4294967295
   1ac70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ac74:	b082      	sub	sp, #8
   1ac76:	4606      	mov	r6, r0
   1ac78:	9300      	str	r3, [sp, #0]
   1ac7a:	f005 fa1b 	bl	200b4 <interface_socket_from_handle_get>
   1ac7e:	2800      	cmp	r0, #0
   1ac80:	d06c      	beq.n	1ad5c <ip_interface_listen+0xf0>
   1ac82:	6803      	ldr	r3, [r0, #0]
   1ac84:	4604      	mov	r4, r0
   1ac86:	b29b      	uxth	r3, r3
   1ac88:	2b04      	cmp	r3, #4
   1ac8a:	d003      	beq.n	1ac94 <ip_interface_listen+0x28>
   1ac8c:	6803      	ldr	r3, [r0, #0]
   1ac8e:	b29b      	uxth	r3, r3
   1ac90:	2b0b      	cmp	r3, #11
   1ac92:	d163      	bne.n	1ad5c <ip_interface_listen+0xf0>
   1ac94:	2100      	movs	r1, #0
   1ac96:	4a32      	ldr	r2, [pc, #200]	; (1ad60 <ip_interface_listen+0xf4>)
   1ac98:	4630      	mov	r0, r6
   1ac9a:	f005 f95f 	bl	1ff5c <interface_socket_packet_handler_update>
   1ac9e:	4601      	mov	r1, r0
   1aca0:	2800      	cmp	r0, #0
   1aca2:	d159      	bne.n	1ad58 <ip_interface_listen+0xec>
   1aca4:	a802      	add	r0, sp, #8
   1aca6:	f840 1d04 	str.w	r1, [r0, #-4]!
   1acaa:	69a7      	ldr	r7, [r4, #24]
   1acac:	f7ff f8c2 	bl	19e34 <rpc_ip_client_request_alloc>
   1acb0:	bba0      	cbnz	r0, 1ad1c <ip_interface_listen+0xb0>
   1acb2:	f247 0308 	movw	r3, #28680	; 0x7008
   1acb6:	2208      	movs	r2, #8
   1acb8:	9d01      	ldr	r5, [sp, #4]
   1acba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1acbe:	60eb      	str	r3, [r5, #12]
   1acc0:	612f      	str	r7, [r5, #16]
   1acc2:	7268      	strb	r0, [r5, #9]
   1acc4:	72a8      	strb	r0, [r5, #10]
   1acc6:	72e8      	strb	r0, [r5, #11]
   1acc8:	722a      	strb	r2, [r5, #8]
   1acca:	68ab      	ldr	r3, [r5, #8]
   1accc:	f247 0108 	movw	r1, #28680	; 0x7008
   1acd0:	3304      	adds	r3, #4
   1acd2:	60ab      	str	r3, [r5, #8]
   1acd4:	6823      	ldr	r3, [r4, #0]
   1acd6:	4628      	mov	r0, r5
   1acd8:	0c1b      	lsrs	r3, r3, #16
   1acda:	041b      	lsls	r3, r3, #16
   1acdc:	f043 0306 	orr.w	r3, r3, #6
   1ace0:	6023      	str	r3, [r4, #0]
   1ace2:	6827      	ldr	r7, [r4, #0]
   1ace4:	f7ff f8ba 	bl	19e5c <rpc_ip_client_request_send>
   1ace8:	4680      	mov	r8, r0
   1acea:	b9e0      	cbnz	r0, 1ad26 <ip_interface_listen+0xba>
   1acec:	466b      	mov	r3, sp
   1acee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1acf2:	2107      	movs	r1, #7
   1acf4:	4630      	mov	r0, r6
   1acf6:	f005 f969 	bl	1ffcc <interface_socket_wait>
   1acfa:	4605      	mov	r5, r0
   1acfc:	b308      	cbz	r0, 1ad42 <ip_interface_listen+0xd6>
   1acfe:	6823      	ldr	r3, [r4, #0]
   1ad00:	0c1b      	lsrs	r3, r3, #16
   1ad02:	041b      	lsls	r3, r3, #16
   1ad04:	f043 0304 	orr.w	r3, r3, #4
   1ad08:	6023      	str	r3, [r4, #0]
   1ad0a:	4628      	mov	r0, r5
   1ad0c:	f7fa fd08 	bl	15720 <bsd_os_errno_set>
   1ad10:	f04f 35ff 	mov.w	r5, #4294967295
   1ad14:	4628      	mov	r0, r5
   1ad16:	b002      	add	sp, #8
   1ad18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ad1c:	9d01      	ldr	r5, [sp, #4]
   1ad1e:	2d00      	cmp	r5, #0
   1ad20:	d1d3      	bne.n	1acca <ip_interface_listen+0x5e>
   1ad22:	250c      	movs	r5, #12
   1ad24:	e7f1      	b.n	1ad0a <ip_interface_listen+0x9e>
   1ad26:	6828      	ldr	r0, [r5, #0]
   1ad28:	b108      	cbz	r0, 1ad2e <ip_interface_listen+0xc2>
   1ad2a:	f7ff f8b5 	bl	19e98 <rpc_ip_client_data_free>
   1ad2e:	0c3f      	lsrs	r7, r7, #16
   1ad30:	043f      	lsls	r7, r7, #16
   1ad32:	4628      	mov	r0, r5
   1ad34:	f047 0704 	orr.w	r7, r7, #4
   1ad38:	f7ff f8a6 	bl	19e88 <rpc_ip_client_message_free>
   1ad3c:	2523      	movs	r5, #35	; 0x23
   1ad3e:	6027      	str	r7, [r4, #0]
   1ad40:	e7e3      	b.n	1ad0a <ip_interface_listen+0x9e>
   1ad42:	4630      	mov	r0, r6
   1ad44:	f005 f9b6 	bl	200b4 <interface_socket_from_handle_get>
   1ad48:	2800      	cmp	r0, #0
   1ad4a:	d0e3      	beq.n	1ad14 <ip_interface_listen+0xa8>
   1ad4c:	6845      	ldr	r5, [r0, #4]
   1ad4e:	2d00      	cmp	r5, #0
   1ad50:	d0e0      	beq.n	1ad14 <ip_interface_listen+0xa8>
   1ad52:	f8c0 8004 	str.w	r8, [r0, #4]
   1ad56:	e7d2      	b.n	1acfe <ip_interface_listen+0x92>
   1ad58:	2523      	movs	r5, #35	; 0x23
   1ad5a:	e7d6      	b.n	1ad0a <ip_interface_listen+0x9e>
   1ad5c:	2509      	movs	r5, #9
   1ad5e:	e7d4      	b.n	1ad0a <ip_interface_listen+0x9e>
   1ad60:	00019ea9 	.word	0x00019ea9

0001ad64 <ip_interface_accept>:
   1ad64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad68:	f04f 33ff 	mov.w	r3, #4294967295
   1ad6c:	2500      	movs	r5, #0
   1ad6e:	b087      	sub	sp, #28
   1ad70:	460f      	mov	r7, r1
   1ad72:	4690      	mov	r8, r2
   1ad74:	e9cd 5303 	strd	r5, r3, [sp, #12]
   1ad78:	4606      	mov	r6, r0
   1ad7a:	f005 f99b 	bl	200b4 <interface_socket_from_handle_get>
   1ad7e:	4604      	mov	r4, r0
   1ad80:	2800      	cmp	r0, #0
   1ad82:	f000 8123 	beq.w	1afcc <ip_interface_accept+0x268>
   1ad86:	6803      	ldr	r3, [r0, #0]
   1ad88:	b29b      	uxth	r3, r3
   1ad8a:	2b07      	cmp	r3, #7
   1ad8c:	d10a      	bne.n	1ada4 <ip_interface_accept+0x40>
   1ad8e:	6803      	ldr	r3, [r0, #0]
   1ad90:	6805      	ldr	r5, [r0, #0]
   1ad92:	00db      	lsls	r3, r3, #3
   1ad94:	d416      	bmi.n	1adc4 <ip_interface_accept+0x60>
   1ad96:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1ad9a:	d019      	beq.n	1add0 <ip_interface_accept+0x6c>
   1ad9c:	6805      	ldr	r5, [r0, #0]
   1ad9e:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1ada2:	d124      	bne.n	1adee <ip_interface_accept+0x8a>
   1ada4:	f04f 0909 	mov.w	r9, #9
   1ada8:	9b03      	ldr	r3, [sp, #12]
   1adaa:	b113      	cbz	r3, 1adb2 <ip_interface_accept+0x4e>
   1adac:	4628      	mov	r0, r5
   1adae:	f005 f8bf 	bl	1ff30 <interface_socket_free>
   1adb2:	4648      	mov	r0, r9
   1adb4:	f04f 39ff 	mov.w	r9, #4294967295
   1adb8:	f7fa fcb2 	bl	15720 <bsd_os_errno_set>
   1adbc:	4648      	mov	r0, r9
   1adbe:	b007      	add	sp, #28
   1adc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1adc4:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1adc8:	d170      	bne.n	1aeac <ip_interface_accept+0x148>
   1adca:	f04f 0923 	mov.w	r9, #35	; 0x23
   1adce:	e7eb      	b.n	1ada8 <ip_interface_accept+0x44>
   1add0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1add4:	ab04      	add	r3, sp, #16
   1add6:	4611      	mov	r1, r2
   1add8:	4630      	mov	r0, r6
   1adda:	f005 f8f7 	bl	1ffcc <interface_socket_wait>
   1adde:	4681      	mov	r9, r0
   1ade0:	2800      	cmp	r0, #0
   1ade2:	f000 8082 	beq.w	1aeea <ip_interface_accept+0x186>
   1ade6:	6825      	ldr	r5, [r4, #0]
   1ade8:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1adec:	d0dc      	beq.n	1ada8 <ip_interface_accept+0x44>
   1adee:	f04f 30ff 	mov.w	r0, #4294967295
   1adf2:	2300      	movs	r3, #0
   1adf4:	e9cd 0300 	strd	r0, r3, [sp]
   1adf8:	4a78      	ldr	r2, [pc, #480]	; (1afdc <ip_interface_accept+0x278>)
   1adfa:	6921      	ldr	r1, [r4, #16]
   1adfc:	a803      	add	r0, sp, #12
   1adfe:	f005 f833 	bl	1fe68 <interface_socket_allocate>
   1ae02:	9b03      	ldr	r3, [sp, #12]
   1ae04:	4605      	mov	r5, r0
   1ae06:	2b00      	cmp	r3, #0
   1ae08:	f000 80e4 	beq.w	1afd4 <ip_interface_accept+0x270>
   1ae0c:	2100      	movs	r1, #0
   1ae0e:	6962      	ldr	r2, [r4, #20]
   1ae10:	a806      	add	r0, sp, #24
   1ae12:	615a      	str	r2, [r3, #20]
   1ae14:	68e2      	ldr	r2, [r4, #12]
   1ae16:	f840 1d04 	str.w	r1, [r0, #-4]!
   1ae1a:	60da      	str	r2, [r3, #12]
   1ae1c:	6922      	ldr	r2, [r4, #16]
   1ae1e:	611a      	str	r2, [r3, #16]
   1ae20:	f8d4 9018 	ldr.w	r9, [r4, #24]
   1ae24:	f7ff f806 	bl	19e34 <rpc_ip_client_request_alloc>
   1ae28:	2800      	cmp	r0, #0
   1ae2a:	d146      	bne.n	1aeba <ip_interface_accept+0x156>
   1ae2c:	f247 030c 	movw	r3, #28684	; 0x700c
   1ae30:	2108      	movs	r1, #8
   1ae32:	f8dd b014 	ldr.w	fp, [sp, #20]
   1ae36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1ae3a:	f8cb 300c 	str.w	r3, [fp, #12]
   1ae3e:	f8cb 9010 	str.w	r9, [fp, #16]
   1ae42:	f88b 0009 	strb.w	r0, [fp, #9]
   1ae46:	f88b 000a 	strb.w	r0, [fp, #10]
   1ae4a:	f88b 000b 	strb.w	r0, [fp, #11]
   1ae4e:	f88b 1008 	strb.w	r1, [fp, #8]
   1ae52:	6823      	ldr	r3, [r4, #0]
   1ae54:	f247 010c 	movw	r1, #28684	; 0x700c
   1ae58:	0c1b      	lsrs	r3, r3, #16
   1ae5a:	041b      	lsls	r3, r3, #16
   1ae5c:	f043 0308 	orr.w	r3, r3, #8
   1ae60:	6023      	str	r3, [r4, #0]
   1ae62:	4658      	mov	r0, fp
   1ae64:	f8d4 9000 	ldr.w	r9, [r4]
   1ae68:	f7fe fff8 	bl	19e5c <rpc_ip_client_request_send>
   1ae6c:	4682      	mov	sl, r0
   1ae6e:	bb60      	cbnz	r0, 1aeca <ip_interface_accept+0x166>
   1ae70:	6822      	ldr	r2, [r4, #0]
   1ae72:	9900      	ldr	r1, [sp, #0]
   1ae74:	ab04      	add	r3, sp, #16
   1ae76:	400a      	ands	r2, r1
   1ae78:	6022      	str	r2, [r4, #0]
   1ae7a:	2109      	movs	r1, #9
   1ae7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ae80:	4630      	mov	r0, r6
   1ae82:	f005 f8a3 	bl	1ffcc <interface_socket_wait>
   1ae86:	4681      	mov	r9, r0
   1ae88:	2800      	cmp	r0, #0
   1ae8a:	f000 808d 	beq.w	1afa8 <ip_interface_accept+0x244>
   1ae8e:	6823      	ldr	r3, [r4, #0]
   1ae90:	9a01      	ldr	r2, [sp, #4]
   1ae92:	431a      	orrs	r2, r3
   1ae94:	6022      	str	r2, [r4, #0]
   1ae96:	6823      	ldr	r3, [r4, #0]
   1ae98:	0c1b      	lsrs	r3, r3, #16
   1ae9a:	041b      	lsls	r3, r3, #16
   1ae9c:	f043 0307 	orr.w	r3, r3, #7
   1aea0:	6023      	str	r3, [r4, #0]
   1aea2:	6823      	ldr	r3, [r4, #0]
   1aea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1aea8:	6023      	str	r3, [r4, #0]
   1aeaa:	e77d      	b.n	1ada8 <ip_interface_accept+0x44>
   1aeac:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   1aeb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1aeb4:	e9cd 2300 	strd	r2, r3, [sp]
   1aeb8:	e79e      	b.n	1adf8 <ip_interface_accept+0x94>
   1aeba:	f8dd b014 	ldr.w	fp, [sp, #20]
   1aebe:	f04f 090c 	mov.w	r9, #12
   1aec2:	f1bb 0f00 	cmp.w	fp, #0
   1aec6:	d1c4      	bne.n	1ae52 <ip_interface_accept+0xee>
   1aec8:	e76e      	b.n	1ada8 <ip_interface_accept+0x44>
   1aeca:	f8db 0000 	ldr.w	r0, [fp]
   1aece:	b108      	cbz	r0, 1aed4 <ip_interface_accept+0x170>
   1aed0:	f7fe ffe2 	bl	19e98 <rpc_ip_client_data_free>
   1aed4:	ea4f 4919 	mov.w	r9, r9, lsr #16
   1aed8:	4658      	mov	r0, fp
   1aeda:	ea4f 4909 	mov.w	r9, r9, lsl #16
   1aede:	f7fe ffd3 	bl	19e88 <rpc_ip_client_message_free>
   1aee2:	f049 0307 	orr.w	r3, r9, #7
   1aee6:	6023      	str	r3, [r4, #0]
   1aee8:	e76f      	b.n	1adca <ip_interface_accept+0x66>
   1aeea:	4630      	mov	r0, r6
   1aeec:	f005 f8e2 	bl	200b4 <interface_socket_from_handle_get>
   1aef0:	b130      	cbz	r0, 1af00 <ip_interface_accept+0x19c>
   1aef2:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1aef6:	f1b9 0f00 	cmp.w	r9, #0
   1aefa:	d001      	beq.n	1af00 <ip_interface_accept+0x19c>
   1aefc:	6045      	str	r5, [r0, #4]
   1aefe:	e772      	b.n	1ade6 <ip_interface_accept+0x82>
   1af00:	6823      	ldr	r3, [r4, #0]
   1af02:	03d9      	lsls	r1, r3, #15
   1af04:	f53f af73 	bmi.w	1adee <ip_interface_accept+0x8a>
   1af08:	4d35      	ldr	r5, [pc, #212]	; (1afe0 <ip_interface_accept+0x27c>)
   1af0a:	9903      	ldr	r1, [sp, #12]
   1af0c:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1af10:	699b      	ldr	r3, [r3, #24]
   1af12:	618b      	str	r3, [r1, #24]
   1af14:	b147      	cbz	r7, 1af28 <ip_interface_accept+0x1c4>
   1af16:	68cb      	ldr	r3, [r1, #12]
   1af18:	2b0a      	cmp	r3, #10
   1af1a:	d028      	beq.n	1af6e <ip_interface_accept+0x20a>
   1af1c:	2b02      	cmp	r3, #2
   1af1e:	d103      	bne.n	1af28 <ip_interface_accept+0x1c4>
   1af20:	f8d8 2000 	ldr.w	r2, [r8]
   1af24:	2a10      	cmp	r2, #16
   1af26:	d036      	beq.n	1af96 <ip_interface_accept+0x232>
   1af28:	680a      	ldr	r2, [r1, #0]
   1af2a:	482e      	ldr	r0, [pc, #184]	; (1afe4 <ip_interface_accept+0x280>)
   1af2c:	4002      	ands	r2, r0
   1af2e:	f042 0205 	orr.w	r2, r2, #5
   1af32:	600a      	str	r2, [r1, #0]
   1af34:	9a03      	ldr	r2, [sp, #12]
   1af36:	6811      	ldr	r1, [r2, #0]
   1af38:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   1af3c:	6011      	str	r1, [r2, #0]
   1af3e:	6811      	ldr	r1, [r2, #0]
   1af40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1af44:	6011      	str	r1, [r2, #0]
   1af46:	6823      	ldr	r3, [r4, #0]
   1af48:	4003      	ands	r3, r0
   1af4a:	f043 0307 	orr.w	r3, r3, #7
   1af4e:	6023      	str	r3, [r4, #0]
   1af50:	6823      	ldr	r3, [r4, #0]
   1af52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1af56:	6023      	str	r3, [r4, #0]
   1af58:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   1af5c:	f7fe ff94 	bl	19e88 <rpc_ip_client_message_free>
   1af60:	2300      	movs	r3, #0
   1af62:	4648      	mov	r0, r9
   1af64:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   1af68:	b007      	add	sp, #28
   1af6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af6e:	f8d8 2000 	ldr.w	r2, [r8]
   1af72:	2a24      	cmp	r2, #36	; 0x24
   1af74:	d1d8      	bne.n	1af28 <ip_interface_accept+0x1c4>
   1af76:	703a      	strb	r2, [r7, #0]
   1af78:	2210      	movs	r2, #16
   1af7a:	607b      	str	r3, [r7, #4]
   1af7c:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1af80:	f107 0010 	add.w	r0, r7, #16
   1af84:	8b9b      	ldrh	r3, [r3, #28]
   1af86:	813b      	strh	r3, [r7, #8]
   1af88:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   1af8c:	3120      	adds	r1, #32
   1af8e:	f7f1 fdf1 	bl	cb74 <memcpy>
   1af92:	9903      	ldr	r1, [sp, #12]
   1af94:	e7c8      	b.n	1af28 <ip_interface_accept+0x1c4>
   1af96:	703a      	strb	r2, [r7, #0]
   1af98:	607b      	str	r3, [r7, #4]
   1af9a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1af9e:	f107 000c 	add.w	r0, r7, #12
   1afa2:	8b9b      	ldrh	r3, [r3, #28]
   1afa4:	2204      	movs	r2, #4
   1afa6:	e7ee      	b.n	1af86 <ip_interface_accept+0x222>
   1afa8:	4630      	mov	r0, r6
   1afaa:	f005 f883 	bl	200b4 <interface_socket_from_handle_get>
   1afae:	b138      	cbz	r0, 1afc0 <ip_interface_accept+0x25c>
   1afb0:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1afb4:	f1b9 0f00 	cmp.w	r9, #0
   1afb8:	d002      	beq.n	1afc0 <ip_interface_accept+0x25c>
   1afba:	f8c0 a004 	str.w	sl, [r0, #4]
   1afbe:	e766      	b.n	1ae8e <ip_interface_accept+0x12a>
   1afc0:	6823      	ldr	r3, [r4, #0]
   1afc2:	9a01      	ldr	r2, [sp, #4]
   1afc4:	46a9      	mov	r9, r5
   1afc6:	4313      	orrs	r3, r2
   1afc8:	6023      	str	r3, [r4, #0]
   1afca:	e79d      	b.n	1af08 <ip_interface_accept+0x1a4>
   1afcc:	4605      	mov	r5, r0
   1afce:	f04f 0909 	mov.w	r9, #9
   1afd2:	e6e9      	b.n	1ada8 <ip_interface_accept+0x44>
   1afd4:	f04f 090c 	mov.w	r9, #12
   1afd8:	e6eb      	b.n	1adb2 <ip_interface_accept+0x4e>
   1afda:	bf00      	nop
   1afdc:	00019ea9 	.word	0x00019ea9
   1afe0:	200219a8 	.word	0x200219a8
   1afe4:	ffff0000 	.word	0xffff0000

0001afe8 <ip_interface_setopt>:
   1afe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1afec:	2901      	cmp	r1, #1
   1afee:	b084      	sub	sp, #16
   1aff0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1aff2:	f040 808a 	bne.w	1b10a <ip_interface_setopt+0x122>
   1aff6:	4617      	mov	r7, r2
   1aff8:	461d      	mov	r5, r3
   1affa:	4680      	mov	r8, r0
   1affc:	f005 f85a 	bl	200b4 <interface_socket_from_handle_get>
   1b000:	4604      	mov	r4, r0
   1b002:	2800      	cmp	r0, #0
   1b004:	f000 808d 	beq.w	1b122 <ip_interface_setopt+0x13a>
   1b008:	f1a7 0119 	sub.w	r1, r7, #25
   1b00c:	290f      	cmp	r1, #15
   1b00e:	d872      	bhi.n	1b0f6 <ip_interface_setopt+0x10e>
   1b010:	e8df f001 	tbb	[pc, r1]
   1b014:	7171711a 	.word	0x7171711a
   1b018:	61514071 	.word	0x61514071
   1b01c:	71717171 	.word	0x71717171
   1b020:	08717171 	.word	0x08717171
   1b024:	2e04      	cmp	r6, #4
   1b026:	d176      	bne.n	1b116 <ip_interface_setopt+0x12e>
   1b028:	2d00      	cmp	r5, #0
   1b02a:	d074      	beq.n	1b116 <ip_interface_setopt+0x12e>
   1b02c:	4601      	mov	r1, r0
   1b02e:	e9cd 5600 	strd	r5, r6, [sp]
   1b032:	4640      	mov	r0, r8
   1b034:	f241 0304 	movw	r3, #4100	; 0x1004
   1b038:	2208      	movs	r2, #8
   1b03a:	f7ff fcff 	bl	1aa3c <ip_interface_socketoption_send>
   1b03e:	bb20      	cbnz	r0, 1b08a <ip_interface_setopt+0xa2>
   1b040:	2000      	movs	r0, #0
   1b042:	b004      	add	sp, #16
   1b044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b048:	2d00      	cmp	r5, #0
   1b04a:	d06c      	beq.n	1b126 <ip_interface_setopt+0x13e>
   1b04c:	4628      	mov	r0, r5
   1b04e:	f007 fd0d 	bl	22a6c <strlen>
   1b052:	42b0      	cmp	r0, r6
   1b054:	d167      	bne.n	1b126 <ip_interface_setopt+0x13e>
   1b056:	6823      	ldr	r3, [r4, #0]
   1b058:	b29b      	uxth	r3, r3
   1b05a:	2b02      	cmp	r3, #2
   1b05c:	d161      	bne.n	1b122 <ip_interface_setopt+0x13a>
   1b05e:	4629      	mov	r1, r5
   1b060:	68e0      	ldr	r0, [r4, #12]
   1b062:	f002 fdb9 	bl	1dbd8 <pdn_interface_pdn_id_get>
   1b066:	9003      	str	r0, [sp, #12]
   1b068:	3001      	adds	r0, #1
   1b06a:	bf08      	it	eq
   1b06c:	2016      	moveq	r0, #22
   1b06e:	d00c      	beq.n	1b08a <ip_interface_setopt+0xa2>
   1b070:	2204      	movs	r2, #4
   1b072:	ab03      	add	r3, sp, #12
   1b074:	e9cd 3200 	strd	r3, r2, [sp]
   1b078:	4621      	mov	r1, r4
   1b07a:	4640      	mov	r0, r8
   1b07c:	f243 0310 	movw	r3, #12304	; 0x3010
   1b080:	2208      	movs	r2, #8
   1b082:	f7ff fcdb 	bl	1aa3c <ip_interface_socketoption_send>
   1b086:	2800      	cmp	r0, #0
   1b088:	d0da      	beq.n	1b040 <ip_interface_setopt+0x58>
   1b08a:	f7fa fb49 	bl	15720 <bsd_os_errno_set>
   1b08e:	f04f 30ff 	mov.w	r0, #4294967295
   1b092:	e7d6      	b.n	1b042 <ip_interface_setopt+0x5a>
   1b094:	2e04      	cmp	r6, #4
   1b096:	d13e      	bne.n	1b116 <ip_interface_setopt+0x12e>
   1b098:	2d00      	cmp	r5, #0
   1b09a:	d03c      	beq.n	1b116 <ip_interface_setopt+0x12e>
   1b09c:	4601      	mov	r1, r0
   1b09e:	e9cd 5600 	strd	r5, r6, [sp]
   1b0a2:	4640      	mov	r0, r8
   1b0a4:	f248 0301 	movw	r3, #32769	; 0x8001
   1b0a8:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b0ac:	f7ff fcc6 	bl	1aa3c <ip_interface_socketoption_send>
   1b0b0:	2800      	cmp	r0, #0
   1b0b2:	d0c5      	beq.n	1b040 <ip_interface_setopt+0x58>
   1b0b4:	e7e9      	b.n	1b08a <ip_interface_setopt+0xa2>
   1b0b6:	2e04      	cmp	r6, #4
   1b0b8:	d12d      	bne.n	1b116 <ip_interface_setopt+0x12e>
   1b0ba:	b365      	cbz	r5, 1b116 <ip_interface_setopt+0x12e>
   1b0bc:	4601      	mov	r1, r0
   1b0be:	e9cd 5600 	strd	r5, r6, [sp]
   1b0c2:	4640      	mov	r0, r8
   1b0c4:	f244 0310 	movw	r3, #16400	; 0x4010
   1b0c8:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b0cc:	f7ff fcb6 	bl	1aa3c <ip_interface_socketoption_send>
   1b0d0:	2800      	cmp	r0, #0
   1b0d2:	d0b5      	beq.n	1b040 <ip_interface_setopt+0x58>
   1b0d4:	e7d9      	b.n	1b08a <ip_interface_setopt+0xa2>
   1b0d6:	2e04      	cmp	r6, #4
   1b0d8:	d11d      	bne.n	1b116 <ip_interface_setopt+0x12e>
   1b0da:	b1e5      	cbz	r5, 1b116 <ip_interface_setopt+0x12e>
   1b0dc:	4601      	mov	r1, r0
   1b0de:	e9cd 5600 	strd	r5, r6, [sp]
   1b0e2:	4640      	mov	r0, r8
   1b0e4:	f246 0310 	movw	r3, #24592	; 0x6010
   1b0e8:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b0ec:	f7ff fca6 	bl	1aa3c <ip_interface_socketoption_send>
   1b0f0:	2800      	cmp	r0, #0
   1b0f2:	d0a5      	beq.n	1b040 <ip_interface_setopt+0x58>
   1b0f4:	e7c9      	b.n	1b08a <ip_interface_setopt+0xa2>
   1b0f6:	9600      	str	r6, [sp, #0]
   1b0f8:	462b      	mov	r3, r5
   1b0fa:	463a      	mov	r2, r7
   1b0fc:	4640      	mov	r0, r8
   1b0fe:	2101      	movs	r1, #1
   1b100:	f005 f800 	bl	20104 <interface_socket_setopt>
   1b104:	b004      	add	sp, #16
   1b106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b10a:	202a      	movs	r0, #42	; 0x2a
   1b10c:	f7fa fb08 	bl	15720 <bsd_os_errno_set>
   1b110:	f04f 30ff 	mov.w	r0, #4294967295
   1b114:	e795      	b.n	1b042 <ip_interface_setopt+0x5a>
   1b116:	2016      	movs	r0, #22
   1b118:	f7fa fb02 	bl	15720 <bsd_os_errno_set>
   1b11c:	f04f 30ff 	mov.w	r0, #4294967295
   1b120:	e78f      	b.n	1b042 <ip_interface_setopt+0x5a>
   1b122:	2009      	movs	r0, #9
   1b124:	e7b1      	b.n	1b08a <ip_interface_setopt+0xa2>
   1b126:	200e      	movs	r0, #14
   1b128:	e7af      	b.n	1b08a <ip_interface_setopt+0xa2>
   1b12a:	bf00      	nop

0001b12c <ip_interface_getopt>:
   1b12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b130:	2901      	cmp	r1, #1
   1b132:	b082      	sub	sp, #8
   1b134:	9c08      	ldr	r4, [sp, #32]
   1b136:	d173      	bne.n	1b220 <ip_interface_getopt+0xf4>
   1b138:	4617      	mov	r7, r2
   1b13a:	461e      	mov	r6, r3
   1b13c:	4680      	mov	r8, r0
   1b13e:	f004 ffb9 	bl	200b4 <interface_socket_from_handle_get>
   1b142:	2800      	cmp	r0, #0
   1b144:	d072      	beq.n	1b22c <ip_interface_getopt+0x100>
   1b146:	f1a7 051e 	sub.w	r5, r7, #30
   1b14a:	2d0a      	cmp	r5, #10
   1b14c:	d858      	bhi.n	1b200 <ip_interface_getopt+0xd4>
   1b14e:	e8df f005 	tbb	[pc, r5]
   1b152:	331b      	.short	0x331b
   1b154:	57575745 	.word	0x57575745
   1b158:	57575757 	.word	0x57575757
   1b15c:	06          	.byte	0x06
   1b15d:	00          	.byte	0x00
   1b15e:	2c00      	cmp	r4, #0
   1b160:	d058      	beq.n	1b214 <ip_interface_getopt+0xe8>
   1b162:	6823      	ldr	r3, [r4, #0]
   1b164:	2b04      	cmp	r3, #4
   1b166:	d155      	bne.n	1b214 <ip_interface_getopt+0xe8>
   1b168:	2e00      	cmp	r6, #0
   1b16a:	d053      	beq.n	1b214 <ip_interface_getopt+0xe8>
   1b16c:	4601      	mov	r1, r0
   1b16e:	e9cd 6400 	strd	r6, r4, [sp]
   1b172:	4640      	mov	r0, r8
   1b174:	f241 0304 	movw	r3, #4100	; 0x1004
   1b178:	2208      	movs	r2, #8
   1b17a:	f7ff fbaf 	bl	1a8dc <ip_interface_socketoption_get>
   1b17e:	b9b0      	cbnz	r0, 1b1ae <ip_interface_getopt+0x82>
   1b180:	2000      	movs	r0, #0
   1b182:	b002      	add	sp, #8
   1b184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b188:	2c00      	cmp	r4, #0
   1b18a:	d043      	beq.n	1b214 <ip_interface_getopt+0xe8>
   1b18c:	6823      	ldr	r3, [r4, #0]
   1b18e:	2b04      	cmp	r3, #4
   1b190:	d140      	bne.n	1b214 <ip_interface_getopt+0xe8>
   1b192:	2e00      	cmp	r6, #0
   1b194:	d03e      	beq.n	1b214 <ip_interface_getopt+0xe8>
   1b196:	4601      	mov	r1, r0
   1b198:	e9cd 6400 	strd	r6, r4, [sp]
   1b19c:	4640      	mov	r0, r8
   1b19e:	f248 0301 	movw	r3, #32769	; 0x8001
   1b1a2:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b1a6:	f7ff fb99 	bl	1a8dc <ip_interface_socketoption_get>
   1b1aa:	2800      	cmp	r0, #0
   1b1ac:	d0e8      	beq.n	1b180 <ip_interface_getopt+0x54>
   1b1ae:	f7fa fab7 	bl	15720 <bsd_os_errno_set>
   1b1b2:	f04f 30ff 	mov.w	r0, #4294967295
   1b1b6:	e7e4      	b.n	1b182 <ip_interface_getopt+0x56>
   1b1b8:	b364      	cbz	r4, 1b214 <ip_interface_getopt+0xe8>
   1b1ba:	6823      	ldr	r3, [r4, #0]
   1b1bc:	2b04      	cmp	r3, #4
   1b1be:	d129      	bne.n	1b214 <ip_interface_getopt+0xe8>
   1b1c0:	b346      	cbz	r6, 1b214 <ip_interface_getopt+0xe8>
   1b1c2:	4601      	mov	r1, r0
   1b1c4:	e9cd 6400 	strd	r6, r4, [sp]
   1b1c8:	4640      	mov	r0, r8
   1b1ca:	f244 0310 	movw	r3, #16400	; 0x4010
   1b1ce:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b1d2:	f7ff fb83 	bl	1a8dc <ip_interface_socketoption_get>
   1b1d6:	2800      	cmp	r0, #0
   1b1d8:	d0d2      	beq.n	1b180 <ip_interface_getopt+0x54>
   1b1da:	e7e8      	b.n	1b1ae <ip_interface_getopt+0x82>
   1b1dc:	b1d4      	cbz	r4, 1b214 <ip_interface_getopt+0xe8>
   1b1de:	6823      	ldr	r3, [r4, #0]
   1b1e0:	2b04      	cmp	r3, #4
   1b1e2:	d117      	bne.n	1b214 <ip_interface_getopt+0xe8>
   1b1e4:	b1b6      	cbz	r6, 1b214 <ip_interface_getopt+0xe8>
   1b1e6:	4601      	mov	r1, r0
   1b1e8:	e9cd 6400 	strd	r6, r4, [sp]
   1b1ec:	4640      	mov	r0, r8
   1b1ee:	f246 0310 	movw	r3, #24592	; 0x6010
   1b1f2:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b1f6:	f7ff fb71 	bl	1a8dc <ip_interface_socketoption_get>
   1b1fa:	2800      	cmp	r0, #0
   1b1fc:	d0c0      	beq.n	1b180 <ip_interface_getopt+0x54>
   1b1fe:	e7d6      	b.n	1b1ae <ip_interface_getopt+0x82>
   1b200:	4633      	mov	r3, r6
   1b202:	463a      	mov	r2, r7
   1b204:	4640      	mov	r0, r8
   1b206:	2101      	movs	r1, #1
   1b208:	9408      	str	r4, [sp, #32]
   1b20a:	b002      	add	sp, #8
   1b20c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b210:	f004 bfbe 	b.w	20190 <interface_socket_getopt>
   1b214:	2016      	movs	r0, #22
   1b216:	f7fa fa83 	bl	15720 <bsd_os_errno_set>
   1b21a:	f04f 30ff 	mov.w	r0, #4294967295
   1b21e:	e7b0      	b.n	1b182 <ip_interface_getopt+0x56>
   1b220:	202a      	movs	r0, #42	; 0x2a
   1b222:	f7fa fa7d 	bl	15720 <bsd_os_errno_set>
   1b226:	f04f 30ff 	mov.w	r0, #4294967295
   1b22a:	e7aa      	b.n	1b182 <ip_interface_getopt+0x56>
   1b22c:	2009      	movs	r0, #9
   1b22e:	f7fa fa77 	bl	15720 <bsd_os_errno_set>
   1b232:	f04f 30ff 	mov.w	r0, #4294967295
   1b236:	e7a4      	b.n	1b182 <ip_interface_getopt+0x56>

0001b238 <ip_interface_getaddrinfo>:
   1b238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b23c:	f04f 0c00 	mov.w	ip, #0
   1b240:	2401      	movs	r4, #1
   1b242:	4e75      	ldr	r6, [pc, #468]	; (1b418 <ip_interface_getaddrinfo+0x1e0>)
   1b244:	4d75      	ldr	r5, [pc, #468]	; (1b41c <ip_interface_getaddrinfo+0x1e4>)
   1b246:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 1b42c <ip_interface_getaddrinfo+0x1f4>
   1b24a:	4f75      	ldr	r7, [pc, #468]	; (1b420 <ip_interface_getaddrinfo+0x1e8>)
   1b24c:	7836      	ldrb	r6, [r6, #0]
   1b24e:	b085      	sub	sp, #20
   1b250:	f8a5 c000 	strh.w	ip, [r5]
   1b254:	f8c8 4000 	str.w	r4, [r8]
   1b258:	603c      	str	r4, [r7, #0]
   1b25a:	2e00      	cmp	r6, #0
   1b25c:	d05b      	beq.n	1b316 <ip_interface_getaddrinfo+0xde>
   1b25e:	9301      	str	r3, [sp, #4]
   1b260:	4614      	mov	r4, r2
   1b262:	460b      	mov	r3, r1
   1b264:	4606      	mov	r6, r0
   1b266:	b171      	cbz	r1, 1b286 <ip_interface_getaddrinfo+0x4e>
   1b268:	4618      	mov	r0, r3
   1b26a:	220a      	movs	r2, #10
   1b26c:	4661      	mov	r1, ip
   1b26e:	f007 ff69 	bl	23144 <strtol>
   1b272:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   1b276:	1e42      	subs	r2, r0, #1
   1b278:	429a      	cmp	r2, r3
   1b27a:	f200 8097 	bhi.w	1b3ac <ip_interface_getaddrinfo+0x174>
   1b27e:	0203      	lsls	r3, r0, #8
   1b280:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   1b284:	8028      	strh	r0, [r5, #0]
   1b286:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 1b430 <ip_interface_getaddrinfo+0x1f8>
   1b28a:	f8da 3000 	ldr.w	r3, [sl]
   1b28e:	2b00      	cmp	r3, #0
   1b290:	d145      	bne.n	1b31e <ip_interface_getaddrinfo+0xe6>
   1b292:	4a64      	ldr	r2, [pc, #400]	; (1b424 <ip_interface_getaddrinfo+0x1ec>)
   1b294:	6013      	str	r3, [r2, #0]
   1b296:	4a64      	ldr	r2, [pc, #400]	; (1b428 <ip_interface_getaddrinfo+0x1f0>)
   1b298:	6013      	str	r3, [r2, #0]
   1b29a:	2e00      	cmp	r6, #0
   1b29c:	d07a      	beq.n	1b394 <ip_interface_getaddrinfo+0x15c>
   1b29e:	4630      	mov	r0, r6
   1b2a0:	f007 fbe4 	bl	22a6c <strlen>
   1b2a4:	4683      	mov	fp, r0
   1b2a6:	b144      	cbz	r4, 1b2ba <ip_interface_getaddrinfo+0x82>
   1b2a8:	69e2      	ldr	r2, [r4, #28]
   1b2aa:	b132      	cbz	r2, 1b2ba <ip_interface_getaddrinfo+0x82>
   1b2ac:	6851      	ldr	r1, [r2, #4]
   1b2ae:	2966      	cmp	r1, #102	; 0x66
   1b2b0:	d103      	bne.n	1b2ba <ip_interface_getaddrinfo+0x82>
   1b2b2:	6891      	ldr	r1, [r2, #8]
   1b2b4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1b2b8:	d07e      	beq.n	1b3b8 <ip_interface_getaddrinfo+0x180>
   1b2ba:	f04f 32ff 	mov.w	r2, #4294967295
   1b2be:	2100      	movs	r1, #0
   1b2c0:	f10d 0910 	add.w	r9, sp, #16
   1b2c4:	f849 1d04 	str.w	r1, [r9, #-4]!
   1b2c8:	4648      	mov	r0, r9
   1b2ca:	4659      	mov	r1, fp
   1b2cc:	9200      	str	r2, [sp, #0]
   1b2ce:	f7fe fdb1 	bl	19e34 <rpc_ip_client_request_alloc>
   1b2d2:	9a00      	ldr	r2, [sp, #0]
   1b2d4:	2800      	cmp	r0, #0
   1b2d6:	d15f      	bne.n	1b398 <ip_interface_getaddrinfo+0x160>
   1b2d8:	f247 010d 	movw	r1, #28685	; 0x700d
   1b2dc:	f04f 0c08 	mov.w	ip, #8
   1b2e0:	9d03      	ldr	r5, [sp, #12]
   1b2e2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1b2e6:	60e9      	str	r1, [r5, #12]
   1b2e8:	612a      	str	r2, [r5, #16]
   1b2ea:	7268      	strb	r0, [r5, #9]
   1b2ec:	72a8      	strb	r0, [r5, #10]
   1b2ee:	72e8      	strb	r0, [r5, #11]
   1b2f0:	f885 c008 	strb.w	ip, [r5, #8]
   1b2f4:	2c00      	cmp	r4, #0
   1b2f6:	d076      	beq.n	1b3e6 <ip_interface_getaddrinfo+0x1ae>
   1b2f8:	6862      	ldr	r2, [r4, #4]
   1b2fa:	f022 0108 	bic.w	r1, r2, #8
   1b2fe:	2902      	cmp	r1, #2
   1b300:	d011      	beq.n	1b326 <ip_interface_getaddrinfo+0xee>
   1b302:	2a05      	cmp	r2, #5
   1b304:	d176      	bne.n	1b3f4 <ip_interface_getaddrinfo+0x1bc>
   1b306:	68a1      	ldr	r1, [r4, #8]
   1b308:	2902      	cmp	r1, #2
   1b30a:	6039      	str	r1, [r7, #0]
   1b30c:	d115      	bne.n	1b33a <ip_interface_getaddrinfo+0x102>
   1b30e:	2102      	movs	r1, #2
   1b310:	f8c8 1000 	str.w	r1, [r8]
   1b314:	e00b      	b.n	1b32e <ip_interface_getaddrinfo+0xf6>
   1b316:	2070      	movs	r0, #112	; 0x70
   1b318:	b005      	add	sp, #20
   1b31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b31e:	2073      	movs	r0, #115	; 0x73
   1b320:	b005      	add	sp, #20
   1b322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b326:	68a1      	ldr	r1, [r4, #8]
   1b328:	2902      	cmp	r1, #2
   1b32a:	6039      	str	r1, [r7, #0]
   1b32c:	d0ef      	beq.n	1b30e <ip_interface_getaddrinfo+0xd6>
   1b32e:	2a05      	cmp	r2, #5
   1b330:	d003      	beq.n	1b33a <ip_interface_getaddrinfo+0x102>
   1b332:	2a0a      	cmp	r2, #10
   1b334:	bf14      	ite	ne
   1b336:	2201      	movne	r2, #1
   1b338:	2202      	moveq	r2, #2
   1b33a:	61aa      	str	r2, [r5, #24]
   1b33c:	68e2      	ldr	r2, [r4, #12]
   1b33e:	622a      	str	r2, [r5, #32]
   1b340:	68a2      	ldr	r2, [r4, #8]
   1b342:	61ea      	str	r2, [r5, #28]
   1b344:	6822      	ldr	r2, [r4, #0]
   1b346:	616a      	str	r2, [r5, #20]
   1b348:	68aa      	ldr	r2, [r5, #8]
   1b34a:	3210      	adds	r2, #16
   1b34c:	60aa      	str	r2, [r5, #8]
   1b34e:	b12e      	cbz	r6, 1b35c <ip_interface_getaddrinfo+0x124>
   1b350:	6828      	ldr	r0, [r5, #0]
   1b352:	b118      	cbz	r0, 1b35c <ip_interface_getaddrinfo+0x124>
   1b354:	465a      	mov	r2, fp
   1b356:	4631      	mov	r1, r6
   1b358:	f7f1 fc0c 	bl	cb74 <memcpy>
   1b35c:	2301      	movs	r3, #1
   1b35e:	f247 010d 	movw	r1, #28685	; 0x700d
   1b362:	4628      	mov	r0, r5
   1b364:	f8ca 3000 	str.w	r3, [sl]
   1b368:	f7fe fd78 	bl	19e5c <rpc_ip_client_request_send>
   1b36c:	bb10      	cbnz	r0, 1b3b4 <ip_interface_getaddrinfo+0x17c>
   1b36e:	f04f 33ff 	mov.w	r3, #4294967295
   1b372:	9303      	str	r3, [sp, #12]
   1b374:	4649      	mov	r1, r9
   1b376:	4628      	mov	r0, r5
   1b378:	f7fa f91a 	bl	155b0 <bsd_os_timedwait>
   1b37c:	f8da 3000 	ldr.w	r3, [sl]
   1b380:	2b01      	cmp	r3, #1
   1b382:	d0f7      	beq.n	1b374 <ip_interface_getaddrinfo+0x13c>
   1b384:	4b28      	ldr	r3, [pc, #160]	; (1b428 <ip_interface_getaddrinfo+0x1f0>)
   1b386:	6818      	ldr	r0, [r3, #0]
   1b388:	bb40      	cbnz	r0, 1b3dc <ip_interface_getaddrinfo+0x1a4>
   1b38a:	4b26      	ldr	r3, [pc, #152]	; (1b424 <ip_interface_getaddrinfo+0x1ec>)
   1b38c:	9a01      	ldr	r2, [sp, #4]
   1b38e:	681b      	ldr	r3, [r3, #0]
   1b390:	6013      	str	r3, [r2, #0]
   1b392:	e7c1      	b.n	1b318 <ip_interface_getaddrinfo+0xe0>
   1b394:	46b3      	mov	fp, r6
   1b396:	e786      	b.n	1b2a6 <ip_interface_getaddrinfo+0x6e>
   1b398:	9d03      	ldr	r5, [sp, #12]
   1b39a:	2d00      	cmp	r5, #0
   1b39c:	d1aa      	bne.n	1b2f4 <ip_interface_getaddrinfo+0xbc>
   1b39e:	200c      	movs	r0, #12
   1b3a0:	2300      	movs	r3, #0
   1b3a2:	f8ca 3000 	str.w	r3, [sl]
   1b3a6:	b005      	add	sp, #20
   1b3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3ac:	2016      	movs	r0, #22
   1b3ae:	b005      	add	sp, #20
   1b3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3b4:	2023      	movs	r0, #35	; 0x23
   1b3b6:	e7f3      	b.n	1b3a0 <ip_interface_getaddrinfo+0x168>
   1b3b8:	f240 2002 	movw	r0, #514	; 0x202
   1b3bc:	68d1      	ldr	r1, [r2, #12]
   1b3be:	4281      	cmp	r1, r0
   1b3c0:	f47f af7b 	bne.w	1b2ba <ip_interface_getaddrinfo+0x82>
   1b3c4:	6991      	ldr	r1, [r2, #24]
   1b3c6:	2900      	cmp	r1, #0
   1b3c8:	f43f af77 	beq.w	1b2ba <ip_interface_getaddrinfo+0x82>
   1b3cc:	6860      	ldr	r0, [r4, #4]
   1b3ce:	f002 fc03 	bl	1dbd8 <pdn_interface_pdn_id_get>
   1b3d2:	1c43      	adds	r3, r0, #1
   1b3d4:	f43f af71 	beq.w	1b2ba <ip_interface_getaddrinfo+0x82>
   1b3d8:	4602      	mov	r2, r0
   1b3da:	e770      	b.n	1b2be <ip_interface_getaddrinfo+0x86>
   1b3dc:	4b12      	ldr	r3, [pc, #72]	; (1b428 <ip_interface_getaddrinfo+0x1f0>)
   1b3de:	6818      	ldr	r0, [r3, #0]
   1b3e0:	2800      	cmp	r0, #0
   1b3e2:	d099      	beq.n	1b318 <ip_interface_getaddrinfo+0xe0>
   1b3e4:	e7dc      	b.n	1b3a0 <ip_interface_getaddrinfo+0x168>
   1b3e6:	4621      	mov	r1, r4
   1b3e8:	2210      	movs	r2, #16
   1b3ea:	f105 0014 	add.w	r0, r5, #20
   1b3ee:	f006 ff2d 	bl	2224c <memset>
   1b3f2:	e7a9      	b.n	1b348 <ip_interface_getaddrinfo+0x110>
   1b3f4:	202f      	movs	r0, #47	; 0x2f
   1b3f6:	f7fa f993 	bl	15720 <bsd_os_errno_set>
   1b3fa:	68aa      	ldr	r2, [r5, #8]
   1b3fc:	3210      	adds	r2, #16
   1b3fe:	60aa      	str	r2, [r5, #8]
   1b400:	b916      	cbnz	r6, 1b408 <ip_interface_getaddrinfo+0x1d0>
   1b402:	f04f 30ff 	mov.w	r0, #4294967295
   1b406:	e7cb      	b.n	1b3a0 <ip_interface_getaddrinfo+0x168>
   1b408:	6828      	ldr	r0, [r5, #0]
   1b40a:	2800      	cmp	r0, #0
   1b40c:	d0f9      	beq.n	1b402 <ip_interface_getaddrinfo+0x1ca>
   1b40e:	465a      	mov	r2, fp
   1b410:	4631      	mov	r1, r6
   1b412:	f7f1 fbaf 	bl	cb74 <memcpy>
   1b416:	e7f4      	b.n	1b402 <ip_interface_getaddrinfo+0x1ca>
   1b418:	20025016 	.word	0x20025016
   1b41c:	20023044 	.word	0x20023044
   1b420:	20021998 	.word	0x20021998
   1b424:	200219a4 	.word	0x200219a4
   1b428:	2002199c 	.word	0x2002199c
   1b42c:	20021994 	.word	0x20021994
   1b430:	200219a0 	.word	0x200219a0

0001b434 <ip_interface_freeaddrinfo>:
   1b434:	b538      	push	{r3, r4, r5, lr}
   1b436:	4d0b      	ldr	r5, [pc, #44]	; (1b464 <ip_interface_freeaddrinfo+0x30>)
   1b438:	682b      	ldr	r3, [r5, #0]
   1b43a:	2b02      	cmp	r3, #2
   1b43c:	d000      	beq.n	1b440 <ip_interface_freeaddrinfo+0xc>
   1b43e:	bd38      	pop	{r3, r4, r5, pc}
   1b440:	b150      	cbz	r0, 1b458 <ip_interface_freeaddrinfo+0x24>
   1b442:	4604      	mov	r4, r0
   1b444:	6940      	ldr	r0, [r0, #20]
   1b446:	f004 f937 	bl	1f6b8 <nrf_free>
   1b44a:	69a0      	ldr	r0, [r4, #24]
   1b44c:	b108      	cbz	r0, 1b452 <ip_interface_freeaddrinfo+0x1e>
   1b44e:	f004 f933 	bl	1f6b8 <nrf_free>
   1b452:	4620      	mov	r0, r4
   1b454:	f004 f930 	bl	1f6b8 <nrf_free>
   1b458:	2300      	movs	r3, #0
   1b45a:	4a03      	ldr	r2, [pc, #12]	; (1b468 <ip_interface_freeaddrinfo+0x34>)
   1b45c:	602b      	str	r3, [r5, #0]
   1b45e:	6013      	str	r3, [r2, #0]
   1b460:	bd38      	pop	{r3, r4, r5, pc}
   1b462:	bf00      	nop
   1b464:	200219a0 	.word	0x200219a0
   1b468:	2002199c 	.word	0x2002199c

0001b46c <rpc_ip_event_handler>:
   1b46c:	f248 030d 	movw	r3, #32781	; 0x800d
   1b470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b474:	4299      	cmp	r1, r3
   1b476:	b089      	sub	sp, #36	; 0x24
   1b478:	4604      	mov	r4, r0
   1b47a:	d05c      	beq.n	1b536 <rpc_ip_event_handler+0xca>
   1b47c:	f248 030f 	movw	r3, #32783	; 0x800f
   1b480:	4299      	cmp	r1, r3
   1b482:	460d      	mov	r5, r1
   1b484:	d045      	beq.n	1b512 <rpc_ip_event_handler+0xa6>
   1b486:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   1b48a:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   1b48e:	68c0      	ldr	r0, [r0, #12]
   1b490:	d075      	beq.n	1b57e <rpc_ip_event_handler+0x112>
   1b492:	0c06      	lsrs	r6, r0, #16
   1b494:	4630      	mov	r0, r6
   1b496:	f004 fe0d 	bl	200b4 <interface_socket_from_handle_get>
   1b49a:	4607      	mov	r7, r0
   1b49c:	2800      	cmp	r0, #0
   1b49e:	d059      	beq.n	1b554 <rpc_ip_event_handler+0xe8>
   1b4a0:	4601      	mov	r1, r0
   1b4a2:	462b      	mov	r3, r5
   1b4a4:	4622      	mov	r2, r4
   1b4a6:	4630      	mov	r0, r6
   1b4a8:	f7fe fc36 	bl	19d18 <tls_rpc_ip_event_handler>
   1b4ac:	2800      	cmp	r0, #0
   1b4ae:	d04d      	beq.n	1b54c <rpc_ip_event_handler+0xe0>
   1b4b0:	f248 0307 	movw	r3, #32775	; 0x8007
   1b4b4:	429d      	cmp	r5, r3
   1b4b6:	d866      	bhi.n	1b586 <rpc_ip_event_handler+0x11a>
   1b4b8:	f248 0306 	movw	r3, #32774	; 0x8006
   1b4bc:	429d      	cmp	r5, r3
   1b4be:	f080 81e7 	bcs.w	1b890 <rpc_ip_event_handler+0x424>
   1b4c2:	f248 0303 	movw	r3, #32771	; 0x8003
   1b4c6:	429d      	cmp	r5, r3
   1b4c8:	f000 81c5 	beq.w	1b856 <rpc_ip_event_handler+0x3ea>
   1b4cc:	f200 811b 	bhi.w	1b706 <rpc_ip_event_handler+0x29a>
   1b4d0:	f248 0301 	movw	r3, #32769	; 0x8001
   1b4d4:	429d      	cmp	r5, r3
   1b4d6:	f000 8154 	beq.w	1b782 <rpc_ip_event_handler+0x316>
   1b4da:	f248 0302 	movw	r3, #32770	; 0x8002
   1b4de:	429d      	cmp	r5, r3
   1b4e0:	d138      	bne.n	1b554 <rpc_ip_event_handler+0xe8>
   1b4e2:	683b      	ldr	r3, [r7, #0]
   1b4e4:	0098      	lsls	r0, r3, #2
   1b4e6:	d531      	bpl.n	1b54c <rpc_ip_event_handler+0xe0>
   1b4e8:	683b      	ldr	r3, [r7, #0]
   1b4ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1b4ee:	603b      	str	r3, [r7, #0]
   1b4f0:	6963      	ldr	r3, [r4, #20]
   1b4f2:	2b00      	cmp	r3, #0
   1b4f4:	f000 81ea 	beq.w	1b8cc <rpc_ip_event_handler+0x460>
   1b4f8:	2b10      	cmp	r3, #16
   1b4fa:	bf8e      	itee	hi
   1b4fc:	232d      	movhi	r3, #45	; 0x2d
   1b4fe:	4ab9      	ldrls	r2, [pc, #740]	; (1b7e4 <rpc_ip_event_handler+0x378>)
   1b500:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1b504:	607b      	str	r3, [r7, #4]
   1b506:	683b      	ldr	r3, [r7, #0]
   1b508:	2000      	movs	r0, #0
   1b50a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1b50e:	603b      	str	r3, [r7, #0]
   1b510:	e00e      	b.n	1b530 <rpc_ip_event_handler+0xc4>
   1b512:	6943      	ldr	r3, [r0, #20]
   1b514:	2001      	movs	r0, #1
   1b516:	2b10      	cmp	r3, #16
   1b518:	49b3      	ldr	r1, [pc, #716]	; (1b7e8 <rpc_ip_event_handler+0x37c>)
   1b51a:	bf88      	it	hi
   1b51c:	222d      	movhi	r2, #45	; 0x2d
   1b51e:	7008      	strb	r0, [r1, #0]
   1b520:	f04f 0000 	mov.w	r0, #0
   1b524:	bf9c      	itt	ls
   1b526:	4aaf      	ldrls	r2, [pc, #700]	; (1b7e4 <rpc_ip_event_handler+0x378>)
   1b528:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   1b52c:	4baf      	ldr	r3, [pc, #700]	; (1b7ec <rpc_ip_event_handler+0x380>)
   1b52e:	601a      	str	r2, [r3, #0]
   1b530:	b009      	add	sp, #36	; 0x24
   1b532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b536:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 1b800 <rpc_ip_event_handler+0x394>
   1b53a:	6807      	ldr	r7, [r0, #0]
   1b53c:	f8da 2000 	ldr.w	r2, [sl]
   1b540:	2a01      	cmp	r2, #1
   1b542:	d00b      	beq.n	1b55c <rpc_ip_event_handler+0xf0>
   1b544:	b117      	cbz	r7, 1b54c <rpc_ip_event_handler+0xe0>
   1b546:	4638      	mov	r0, r7
   1b548:	f7fe fca6 	bl	19e98 <rpc_ip_client_data_free>
   1b54c:	2000      	movs	r0, #0
   1b54e:	b009      	add	sp, #36	; 0x24
   1b550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b554:	6820      	ldr	r0, [r4, #0]
   1b556:	2800      	cmp	r0, #0
   1b558:	d1f6      	bne.n	1b548 <rpc_ip_event_handler+0xdc>
   1b55a:	e7f7      	b.n	1b54c <rpc_ip_event_handler+0xe0>
   1b55c:	6942      	ldr	r2, [r0, #20]
   1b55e:	2a00      	cmp	r2, #0
   1b560:	d045      	beq.n	1b5ee <rpc_ip_event_handler+0x182>
   1b562:	2a10      	cmp	r2, #16
   1b564:	bf8e      	itee	hi
   1b566:	222d      	movhi	r2, #45	; 0x2d
   1b568:	499e      	ldrls	r1, [pc, #632]	; (1b7e4 <rpc_ip_event_handler+0x378>)
   1b56a:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   1b56e:	49a0      	ldr	r1, [pc, #640]	; (1b7f0 <rpc_ip_event_handler+0x384>)
   1b570:	600a      	str	r2, [r1, #0]
   1b572:	2202      	movs	r2, #2
   1b574:	f8ca 2000 	str.w	r2, [sl]
   1b578:	2f00      	cmp	r7, #0
   1b57a:	d1e4      	bne.n	1b546 <rpc_ip_event_handler+0xda>
   1b57c:	e7e6      	b.n	1b54c <rpc_ip_event_handler+0xe0>
   1b57e:	f004 fd47 	bl	20010 <interface_from_internal_id_search>
   1b582:	4606      	mov	r6, r0
   1b584:	e786      	b.n	1b494 <rpc_ip_event_handler+0x28>
   1b586:	f248 030c 	movw	r3, #32780	; 0x800c
   1b58a:	429d      	cmp	r5, r3
   1b58c:	f000 813c 	beq.w	1b808 <rpc_ip_event_handler+0x39c>
   1b590:	f240 80d5 	bls.w	1b73e <rpc_ip_event_handler+0x2d2>
   1b594:	f249 0302 	movw	r3, #36866	; 0x9002
   1b598:	429d      	cmp	r5, r3
   1b59a:	f000 811d 	beq.w	1b7d8 <rpc_ip_event_handler+0x36c>
   1b59e:	f249 0303 	movw	r3, #36867	; 0x9003
   1b5a2:	429d      	cmp	r5, r3
   1b5a4:	f000 80f9 	beq.w	1b79a <rpc_ip_event_handler+0x32e>
   1b5a8:	f249 0301 	movw	r3, #36865	; 0x9001
   1b5ac:	429d      	cmp	r5, r3
   1b5ae:	d1d1      	bne.n	1b554 <rpc_ip_event_handler+0xe8>
   1b5b0:	683d      	ldr	r5, [r7, #0]
   1b5b2:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   1b5b6:	f000 8184 	beq.w	1b8c2 <rpc_ip_event_handler+0x456>
   1b5ba:	68a3      	ldr	r3, [r4, #8]
   1b5bc:	2b04      	cmp	r3, #4
   1b5be:	f200 81af 	bhi.w	1b920 <rpc_ip_event_handler+0x4b4>
   1b5c2:	2500      	movs	r5, #0
   1b5c4:	462e      	mov	r6, r5
   1b5c6:	6821      	ldr	r1, [r4, #0]
   1b5c8:	6862      	ldr	r2, [r4, #4]
   1b5ca:	e9cd 6506 	strd	r6, r5, [sp, #24]
   1b5ce:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1b5d2:	69f8      	ldr	r0, [r7, #28]
   1b5d4:	a904      	add	r1, sp, #16
   1b5d6:	6803      	ldr	r3, [r0, #0]
   1b5d8:	685b      	ldr	r3, [r3, #4]
   1b5da:	4798      	blx	r3
   1b5dc:	3001      	adds	r0, #1
   1b5de:	f000 818e 	beq.w	1b8fe <rpc_ip_event_handler+0x492>
   1b5e2:	683b      	ldr	r3, [r7, #0]
   1b5e4:	2000      	movs	r0, #0
   1b5e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1b5ea:	603b      	str	r3, [r7, #0]
   1b5ec:	e7a0      	b.n	1b530 <rpc_ip_event_handler+0xc4>
   1b5ee:	6985      	ldr	r5, [r0, #24]
   1b5f0:	016b      	lsls	r3, r5, #5
   1b5f2:	4618      	mov	r0, r3
   1b5f4:	9303      	str	r3, [sp, #12]
   1b5f6:	f004 f855 	bl	1f6a4 <nrf_malloc>
   1b5fa:	9002      	str	r0, [sp, #8]
   1b5fc:	2800      	cmp	r0, #0
   1b5fe:	d078      	beq.n	1b6f2 <rpc_ip_event_handler+0x286>
   1b600:	00ee      	lsls	r6, r5, #3
   1b602:	1970      	adds	r0, r6, r5
   1b604:	0080      	lsls	r0, r0, #2
   1b606:	f004 f84d 	bl	1f6a4 <nrf_malloc>
   1b60a:	2800      	cmp	r0, #0
   1b60c:	d073      	beq.n	1b6f6 <rpc_ip_event_handler+0x28a>
   1b60e:	2d00      	cmp	r5, #0
   1b610:	d074      	beq.n	1b6fc <rpc_ip_event_handler+0x290>
   1b612:	3610      	adds	r6, #16
   1b614:	1983      	adds	r3, r0, r6
   1b616:	9301      	str	r3, [sp, #4]
   1b618:	9b02      	ldr	r3, [sp, #8]
   1b61a:	2204      	movs	r2, #4
   1b61c:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 1b804 <rpc_ip_event_handler+0x398>
   1b620:	f100 0810 	add.w	r8, r0, #16
   1b624:	f103 0520 	add.w	r5, r3, #32
   1b628:	e013      	b.n	1b652 <rpc_ip_event_handler+0x1e6>
   1b62a:	464a      	mov	r2, r9
   1b62c:	f7f1 faa2 	bl	cb74 <memcpy>
   1b630:	2100      	movs	r1, #0
   1b632:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1b636:	f108 0808 	add.w	r8, r8, #8
   1b63a:	eb09 0206 	add.w	r2, r9, r6
   1b63e:	f803 1009 	strb.w	r1, [r3, r9]
   1b642:	9b01      	ldr	r3, [sp, #4]
   1b644:	f845 5c04 	str.w	r5, [r5, #-4]
   1b648:	4598      	cmp	r8, r3
   1b64a:	f105 0520 	add.w	r5, r5, #32
   1b64e:	f000 8090 	beq.w	1b772 <rpc_ip_event_handler+0x306>
   1b652:	58bb      	ldr	r3, [r7, r2]
   1b654:	18b9      	adds	r1, r7, r2
   1b656:	f845 3c20 	str.w	r3, [r5, #-32]
   1b65a:	684b      	ldr	r3, [r1, #4]
   1b65c:	f8db 0000 	ldr.w	r0, [fp]
   1b660:	2b02      	cmp	r3, #2
   1b662:	bf14      	ite	ne
   1b664:	2602      	movne	r6, #2
   1b666:	260a      	moveq	r6, #10
   1b668:	4b62      	ldr	r3, [pc, #392]	; (1b7f4 <rpc_ip_event_handler+0x388>)
   1b66a:	e945 6007 	strd	r6, r0, [r5, #-28]
   1b66e:	681b      	ldr	r3, [r3, #0]
   1b670:	f102 0614 	add.w	r6, r2, #20
   1b674:	f845 3c14 	str.w	r3, [r5, #-20]
   1b678:	8a08      	ldrh	r0, [r1, #16]
   1b67a:	f1a8 0310 	sub.w	r3, r8, #16
   1b67e:	f845 0c10 	str.w	r0, [r5, #-16]
   1b682:	f8b1 9012 	ldrh.w	r9, [r1, #18]
   1b686:	f845 3c0c 	str.w	r3, [r5, #-12]
   1b68a:	4b5b      	ldr	r3, [pc, #364]	; (1b7f8 <rpc_ip_event_handler+0x38c>)
   1b68c:	2804      	cmp	r0, #4
   1b68e:	eb07 0106 	add.w	r1, r7, r6
   1b692:	881b      	ldrh	r3, [r3, #0]
   1b694:	d01e      	beq.n	1b6d4 <rpc_ip_event_handler+0x268>
   1b696:	220a      	movs	r2, #10
   1b698:	f848 2c0c 	str.w	r2, [r8, #-12]
   1b69c:	f04f 0224 	mov.w	r2, #36	; 0x24
   1b6a0:	f828 3c08 	strh.w	r3, [r8, #-8]
   1b6a4:	f808 2c10 	strb.w	r2, [r8, #-16]
   1b6a8:	f855 2c10 	ldr.w	r2, [r5, #-16]
   1b6ac:	4640      	mov	r0, r8
   1b6ae:	f7f1 fa61 	bl	cb74 <memcpy>
   1b6b2:	f855 3c10 	ldr.w	r3, [r5, #-16]
   1b6b6:	f109 0001 	add.w	r0, r9, #1
   1b6ba:	441e      	add	r6, r3
   1b6bc:	f003 fff2 	bl	1f6a4 <nrf_malloc>
   1b6c0:	19b9      	adds	r1, r7, r6
   1b6c2:	eb09 0206 	add.w	r2, r9, r6
   1b6c6:	f845 0c08 	str.w	r0, [r5, #-8]
   1b6ca:	2800      	cmp	r0, #0
   1b6cc:	d1ad      	bne.n	1b62a <rpc_ip_event_handler+0x1be>
   1b6ce:	f108 0808 	add.w	r8, r8, #8
   1b6d2:	e7b6      	b.n	1b642 <rpc_ip_event_handler+0x1d6>
   1b6d4:	2210      	movs	r2, #16
   1b6d6:	2002      	movs	r0, #2
   1b6d8:	f828 3c08 	strh.w	r3, [r8, #-8]
   1b6dc:	f848 0c0c 	str.w	r0, [r8, #-12]
   1b6e0:	f808 2c10 	strb.w	r2, [r8, #-16]
   1b6e4:	f855 2c10 	ldr.w	r2, [r5, #-16]
   1b6e8:	f1a8 0004 	sub.w	r0, r8, #4
   1b6ec:	f7f1 fa42 	bl	cb74 <memcpy>
   1b6f0:	e7df      	b.n	1b6b2 <rpc_ip_event_handler+0x246>
   1b6f2:	f003 ffe1 	bl	1f6b8 <nrf_free>
   1b6f6:	210c      	movs	r1, #12
   1b6f8:	4a3d      	ldr	r2, [pc, #244]	; (1b7f0 <rpc_ip_event_handler+0x384>)
   1b6fa:	6011      	str	r1, [r2, #0]
   1b6fc:	9b02      	ldr	r3, [sp, #8]
   1b6fe:	4a3f      	ldr	r2, [pc, #252]	; (1b7fc <rpc_ip_event_handler+0x390>)
   1b700:	6827      	ldr	r7, [r4, #0]
   1b702:	6013      	str	r3, [r2, #0]
   1b704:	e735      	b.n	1b572 <rpc_ip_event_handler+0x106>
   1b706:	f248 0304 	movw	r3, #32772	; 0x8004
   1b70a:	429d      	cmp	r5, r3
   1b70c:	f000 808f 	beq.w	1b82e <rpc_ip_event_handler+0x3c2>
   1b710:	f248 0305 	movw	r3, #32773	; 0x8005
   1b714:	429d      	cmp	r5, r3
   1b716:	f47f af1d 	bne.w	1b554 <rpc_ip_event_handler+0xe8>
   1b71a:	683b      	ldr	r3, [r7, #0]
   1b71c:	b29b      	uxth	r3, r3
   1b71e:	2b03      	cmp	r3, #3
   1b720:	f47f af14 	bne.w	1b54c <rpc_ip_event_handler+0xe0>
   1b724:	6963      	ldr	r3, [r4, #20]
   1b726:	2b00      	cmp	r3, #0
   1b728:	f000 80eb 	beq.w	1b902 <rpc_ip_event_handler+0x496>
   1b72c:	2b10      	cmp	r3, #16
   1b72e:	f200 80bd 	bhi.w	1b8ac <rpc_ip_event_handler+0x440>
   1b732:	4a2c      	ldr	r2, [pc, #176]	; (1b7e4 <rpc_ip_event_handler+0x378>)
   1b734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1b738:	607b      	str	r3, [r7, #4]
   1b73a:	2000      	movs	r0, #0
   1b73c:	e6f8      	b.n	1b530 <rpc_ip_event_handler+0xc4>
   1b73e:	f248 0308 	movw	r3, #32776	; 0x8008
   1b742:	429d      	cmp	r5, r3
   1b744:	f000 8094 	beq.w	1b870 <rpc_ip_event_handler+0x404>
   1b748:	f248 0309 	movw	r3, #32777	; 0x8009
   1b74c:	429d      	cmp	r5, r3
   1b74e:	f47f af01 	bne.w	1b554 <rpc_ip_event_handler+0xe8>
   1b752:	683b      	ldr	r3, [r7, #0]
   1b754:	b29b      	uxth	r3, r3
   1b756:	2b0d      	cmp	r3, #13
   1b758:	f47f aef8 	bne.w	1b54c <rpc_ip_event_handler+0xe0>
   1b75c:	6960      	ldr	r0, [r4, #20]
   1b75e:	2800      	cmp	r0, #0
   1b760:	f000 80d7 	beq.w	1b912 <rpc_ip_event_handler+0x4a6>
   1b764:	2810      	cmp	r0, #16
   1b766:	f200 80a1 	bhi.w	1b8ac <rpc_ip_event_handler+0x440>
   1b76a:	4b1e      	ldr	r3, [pc, #120]	; (1b7e4 <rpc_ip_event_handler+0x378>)
   1b76c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1b770:	e7e2      	b.n	1b738 <rpc_ip_event_handler+0x2cc>
   1b772:	2100      	movs	r1, #0
   1b774:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   1b778:	4403      	add	r3, r0
   1b77a:	f843 1c04 	str.w	r1, [r3, #-4]
   1b77e:	4603      	mov	r3, r0
   1b780:	e7bd      	b.n	1b6fe <rpc_ip_event_handler+0x292>
   1b782:	683b      	ldr	r3, [r7, #0]
   1b784:	2b01      	cmp	r3, #1
   1b786:	f47f aee1 	bne.w	1b54c <rpc_ip_event_handler+0xe0>
   1b78a:	6960      	ldr	r0, [r4, #20]
   1b78c:	2800      	cmp	r0, #0
   1b78e:	d1e9      	bne.n	1b764 <rpc_ip_event_handler+0x2f8>
   1b790:	2302      	movs	r3, #2
   1b792:	603b      	str	r3, [r7, #0]
   1b794:	69a3      	ldr	r3, [r4, #24]
   1b796:	61bb      	str	r3, [r7, #24]
   1b798:	e6ca      	b.n	1b530 <rpc_ip_event_handler+0xc4>
   1b79a:	683b      	ldr	r3, [r7, #0]
   1b79c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1b7a0:	603b      	str	r3, [r7, #0]
   1b7a2:	683b      	ldr	r3, [r7, #0]
   1b7a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1b7a8:	603b      	str	r3, [r7, #0]
   1b7aa:	683b      	ldr	r3, [r7, #0]
   1b7ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1b7b0:	603b      	str	r3, [r7, #0]
   1b7b2:	683b      	ldr	r3, [r7, #0]
   1b7b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1b7b8:	603b      	str	r3, [r7, #0]
   1b7ba:	6923      	ldr	r3, [r4, #16]
   1b7bc:	2b6c      	cmp	r3, #108	; 0x6c
   1b7be:	d077      	beq.n	1b8b0 <rpc_ip_event_handler+0x444>
   1b7c0:	2b10      	cmp	r3, #16
   1b7c2:	bf8c      	ite	hi
   1b7c4:	232d      	movhi	r3, #45	; 0x2d
   1b7c6:	4a07      	ldrls	r2, [pc, #28]	; (1b7e4 <rpc_ip_event_handler+0x378>)
   1b7c8:	f04f 0000 	mov.w	r0, #0
   1b7cc:	bf98      	it	ls
   1b7ce:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1b7d2:	607b      	str	r3, [r7, #4]
   1b7d4:	60bb      	str	r3, [r7, #8]
   1b7d6:	e6ab      	b.n	1b530 <rpc_ip_event_handler+0xc4>
   1b7d8:	683b      	ldr	r3, [r7, #0]
   1b7da:	b29b      	uxth	r3, r3
   1b7dc:	2b07      	cmp	r3, #7
   1b7de:	f47f aeb5 	bne.w	1b54c <rpc_ip_event_handler+0xe0>
   1b7e2:	e6fe      	b.n	1b5e2 <rpc_ip_event_handler+0x176>
   1b7e4:	0002bc40 	.word	0x0002bc40
   1b7e8:	20025017 	.word	0x20025017
   1b7ec:	200219cc 	.word	0x200219cc
   1b7f0:	2002199c 	.word	0x2002199c
   1b7f4:	20021994 	.word	0x20021994
   1b7f8:	20023044 	.word	0x20023044
   1b7fc:	200219a4 	.word	0x200219a4
   1b800:	200219a0 	.word	0x200219a0
   1b804:	20021998 	.word	0x20021998
   1b808:	683b      	ldr	r3, [r7, #0]
   1b80a:	b29b      	uxth	r3, r3
   1b80c:	2b08      	cmp	r3, #8
   1b80e:	f47f ae9d 	bne.w	1b54c <rpc_ip_event_handler+0xe0>
   1b812:	6963      	ldr	r3, [r4, #20]
   1b814:	2b00      	cmp	r3, #0
   1b816:	d189      	bne.n	1b72c <rpc_ip_event_handler+0x2c0>
   1b818:	4b5e      	ldr	r3, [pc, #376]	; (1b994 <rpc_ip_event_handler+0x528>)
   1b81a:	2001      	movs	r0, #1
   1b81c:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   1b820:	683b      	ldr	r3, [r7, #0]
   1b822:	0c1b      	lsrs	r3, r3, #16
   1b824:	041b      	lsls	r3, r3, #16
   1b826:	f043 0309 	orr.w	r3, r3, #9
   1b82a:	603b      	str	r3, [r7, #0]
   1b82c:	e680      	b.n	1b530 <rpc_ip_event_handler+0xc4>
   1b82e:	683b      	ldr	r3, [r7, #0]
   1b830:	01db      	lsls	r3, r3, #7
   1b832:	f57f ae8b 	bpl.w	1b54c <rpc_ip_event_handler+0xe0>
   1b836:	6963      	ldr	r3, [r4, #20]
   1b838:	2b00      	cmp	r3, #0
   1b83a:	f47f af77 	bne.w	1b72c <rpc_ip_event_handler+0x2c0>
   1b83e:	6823      	ldr	r3, [r4, #0]
   1b840:	2b00      	cmp	r3, #0
   1b842:	d071      	beq.n	1b928 <rpc_ip_event_handler+0x4bc>
   1b844:	2001      	movs	r0, #1
   1b846:	4b53      	ldr	r3, [pc, #332]	; (1b994 <rpc_ip_event_handler+0x528>)
   1b848:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   1b84c:	683b      	ldr	r3, [r7, #0]
   1b84e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1b852:	603b      	str	r3, [r7, #0]
   1b854:	e66c      	b.n	1b530 <rpc_ip_event_handler+0xc4>
   1b856:	683b      	ldr	r3, [r7, #0]
   1b858:	025a      	lsls	r2, r3, #9
   1b85a:	f57f ae77 	bpl.w	1b54c <rpc_ip_event_handler+0xe0>
   1b85e:	6960      	ldr	r0, [r4, #20]
   1b860:	2800      	cmp	r0, #0
   1b862:	f47f af7f 	bne.w	1b764 <rpc_ip_event_handler+0x2f8>
   1b866:	683b      	ldr	r3, [r7, #0]
   1b868:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1b86c:	603b      	str	r3, [r7, #0]
   1b86e:	e65f      	b.n	1b530 <rpc_ip_event_handler+0xc4>
   1b870:	683b      	ldr	r3, [r7, #0]
   1b872:	b29b      	uxth	r3, r3
   1b874:	2b06      	cmp	r3, #6
   1b876:	f47f ae69 	bne.w	1b54c <rpc_ip_event_handler+0xe0>
   1b87a:	6960      	ldr	r0, [r4, #20]
   1b87c:	2800      	cmp	r0, #0
   1b87e:	f47f af71 	bne.w	1b764 <rpc_ip_event_handler+0x2f8>
   1b882:	683b      	ldr	r3, [r7, #0]
   1b884:	0c1b      	lsrs	r3, r3, #16
   1b886:	041b      	lsls	r3, r3, #16
   1b888:	f043 0307 	orr.w	r3, r3, #7
   1b88c:	603b      	str	r3, [r7, #0]
   1b88e:	e64f      	b.n	1b530 <rpc_ip_event_handler+0xc4>
   1b890:	683b      	ldr	r3, [r7, #0]
   1b892:	0299      	lsls	r1, r3, #10
   1b894:	f57f ae5a 	bpl.w	1b54c <rpc_ip_event_handler+0xe0>
   1b898:	6963      	ldr	r3, [r4, #20]
   1b89a:	b33b      	cbz	r3, 1b8ec <rpc_ip_event_handler+0x480>
   1b89c:	2b6b      	cmp	r3, #107	; 0x6b
   1b89e:	f47f ae2b 	bne.w	1b4f8 <rpc_ip_event_handler+0x8c>
   1b8a2:	693b      	ldr	r3, [r7, #16]
   1b8a4:	2b01      	cmp	r3, #1
   1b8a6:	d041      	beq.n	1b92c <rpc_ip_event_handler+0x4c0>
   1b8a8:	230c      	movs	r3, #12
   1b8aa:	e62b      	b.n	1b504 <rpc_ip_event_handler+0x98>
   1b8ac:	232d      	movs	r3, #45	; 0x2d
   1b8ae:	e743      	b.n	1b738 <rpc_ip_event_handler+0x2cc>
   1b8b0:	2239      	movs	r2, #57	; 0x39
   1b8b2:	683b      	ldr	r3, [r7, #0]
   1b8b4:	2000      	movs	r0, #0
   1b8b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   1b8ba:	603b      	str	r3, [r7, #0]
   1b8bc:	607a      	str	r2, [r7, #4]
   1b8be:	60ba      	str	r2, [r7, #8]
   1b8c0:	e636      	b.n	1b530 <rpc_ip_event_handler+0xc4>
   1b8c2:	6820      	ldr	r0, [r4, #0]
   1b8c4:	f7fe fae8 	bl	19e98 <rpc_ip_client_data_free>
   1b8c8:	4628      	mov	r0, r5
   1b8ca:	e631      	b.n	1b530 <rpc_ip_event_handler+0xc4>
   1b8cc:	683b      	ldr	r3, [r7, #0]
   1b8ce:	2000      	movs	r0, #0
   1b8d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b8d4:	603b      	str	r3, [r7, #0]
   1b8d6:	683b      	ldr	r3, [r7, #0]
   1b8d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1b8dc:	603b      	str	r3, [r7, #0]
   1b8de:	683b      	ldr	r3, [r7, #0]
   1b8e0:	0c1b      	lsrs	r3, r3, #16
   1b8e2:	041b      	lsls	r3, r3, #16
   1b8e4:	f043 0305 	orr.w	r3, r3, #5
   1b8e8:	603b      	str	r3, [r7, #0]
   1b8ea:	e621      	b.n	1b530 <rpc_ip_event_handler+0xc4>
   1b8ec:	683b      	ldr	r3, [r7, #0]
   1b8ee:	4a29      	ldr	r2, [pc, #164]	; (1b994 <rpc_ip_event_handler+0x528>)
   1b8f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b8f4:	603b      	str	r3, [r7, #0]
   1b8f6:	2001      	movs	r0, #1
   1b8f8:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
   1b8fc:	e618      	b.n	1b530 <rpc_ip_event_handler+0xc4>
   1b8fe:	2002      	movs	r0, #2
   1b900:	e616      	b.n	1b530 <rpc_ip_event_handler+0xc4>
   1b902:	683b      	ldr	r3, [r7, #0]
   1b904:	2000      	movs	r0, #0
   1b906:	0c1b      	lsrs	r3, r3, #16
   1b908:	041b      	lsls	r3, r3, #16
   1b90a:	f043 0304 	orr.w	r3, r3, #4
   1b90e:	603b      	str	r3, [r7, #0]
   1b910:	e60e      	b.n	1b530 <rpc_ip_event_handler+0xc4>
   1b912:	683b      	ldr	r3, [r7, #0]
   1b914:	0c1b      	lsrs	r3, r3, #16
   1b916:	041b      	lsls	r3, r3, #16
   1b918:	f043 030e 	orr.w	r3, r3, #14
   1b91c:	603b      	str	r3, [r7, #0]
   1b91e:	e607      	b.n	1b530 <rpc_ip_event_handler+0xc4>
   1b920:	8a65      	ldrh	r5, [r4, #18]
   1b922:	b95d      	cbnz	r5, 1b93c <rpc_ip_event_handler+0x4d0>
   1b924:	462e      	mov	r6, r5
   1b926:	e64e      	b.n	1b5c6 <rpc_ip_event_handler+0x15a>
   1b928:	2000      	movs	r0, #0
   1b92a:	e78f      	b.n	1b84c <rpc_ip_event_handler+0x3e0>
   1b92c:	220c      	movs	r2, #12
   1b92e:	683b      	ldr	r3, [r7, #0]
   1b930:	2000      	movs	r0, #0
   1b932:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   1b936:	603b      	str	r3, [r7, #0]
   1b938:	607a      	str	r2, [r7, #4]
   1b93a:	e5f9      	b.n	1b530 <rpc_ip_event_handler+0xc4>
   1b93c:	2024      	movs	r0, #36	; 0x24
   1b93e:	f003 feb1 	bl	1f6a4 <nrf_malloc>
   1b942:	4606      	mov	r6, r0
   1b944:	2800      	cmp	r0, #0
   1b946:	d0da      	beq.n	1b8fe <rpc_ip_event_handler+0x492>
   1b948:	8a62      	ldrh	r2, [r4, #18]
   1b94a:	2a10      	cmp	r2, #16
   1b94c:	d009      	beq.n	1b962 <rpc_ip_event_handler+0x4f6>
   1b94e:	2a04      	cmp	r2, #4
   1b950:	d013      	beq.n	1b97a <rpc_ip_event_handler+0x50e>
   1b952:	6820      	ldr	r0, [r4, #0]
   1b954:	f7fe faa0 	bl	19e98 <rpc_ip_client_data_free>
   1b958:	4630      	mov	r0, r6
   1b95a:	f003 fead 	bl	1f6b8 <nrf_free>
   1b95e:	2000      	movs	r0, #0
   1b960:	e5e6      	b.n	1b530 <rpc_ip_event_handler+0xc4>
   1b962:	230a      	movs	r3, #10
   1b964:	2524      	movs	r5, #36	; 0x24
   1b966:	6043      	str	r3, [r0, #4]
   1b968:	7005      	strb	r5, [r0, #0]
   1b96a:	8a23      	ldrh	r3, [r4, #16]
   1b96c:	f104 0114 	add.w	r1, r4, #20
   1b970:	8103      	strh	r3, [r0, #8]
   1b972:	3010      	adds	r0, #16
   1b974:	f7f1 f8fe 	bl	cb74 <memcpy>
   1b978:	e625      	b.n	1b5c6 <rpc_ip_event_handler+0x15a>
   1b97a:	2302      	movs	r3, #2
   1b97c:	2510      	movs	r5, #16
   1b97e:	6043      	str	r3, [r0, #4]
   1b980:	7005      	strb	r5, [r0, #0]
   1b982:	8a23      	ldrh	r3, [r4, #16]
   1b984:	f104 0114 	add.w	r1, r4, #20
   1b988:	8103      	strh	r3, [r0, #8]
   1b98a:	300c      	adds	r0, #12
   1b98c:	f7f1 f8f2 	bl	cb74 <memcpy>
   1b990:	e619      	b.n	1b5c6 <rpc_ip_event_handler+0x15a>
   1b992:	bf00      	nop
   1b994:	200219a8 	.word	0x200219a8

0001b998 <rpc_handle_ctrl_message>:
   1b998:	2902      	cmp	r1, #2
   1b99a:	b510      	push	{r4, lr}
   1b99c:	4604      	mov	r4, r0
   1b99e:	d00c      	beq.n	1b9ba <rpc_handle_ctrl_message+0x22>
   1b9a0:	2904      	cmp	r1, #4
   1b9a2:	d008      	beq.n	1b9b6 <rpc_handle_ctrl_message+0x1e>
   1b9a4:	2901      	cmp	r1, #1
   1b9a6:	d006      	beq.n	1b9b6 <rpc_handle_ctrl_message+0x1e>
   1b9a8:	6880      	ldr	r0, [r0, #8]
   1b9aa:	b108      	cbz	r0, 1b9b0 <rpc_handle_ctrl_message+0x18>
   1b9ac:	f7fc fd32 	bl	18414 <rpc_transport_data_free>
   1b9b0:	4620      	mov	r0, r4
   1b9b2:	f7fc fd2d 	bl	18410 <rpc_transport_rpc_free>
   1b9b6:	2000      	movs	r0, #0
   1b9b8:	bd10      	pop	{r4, pc}
   1b9ba:	6880      	ldr	r0, [r0, #8]
   1b9bc:	2800      	cmp	r0, #0
   1b9be:	d0fa      	beq.n	1b9b6 <rpc_handle_ctrl_message+0x1e>
   1b9c0:	f7fc fd28 	bl	18414 <rpc_transport_data_free>
   1b9c4:	2000      	movs	r0, #0
   1b9c6:	bd10      	pop	{r4, pc}

0001b9c8 <rpc_handle_data_message>:
   1b9c8:	4b23      	ldr	r3, [pc, #140]	; (1ba58 <rpc_handle_data_message+0x90>)
   1b9ca:	6802      	ldr	r2, [r0, #0]
   1b9cc:	8819      	ldrh	r1, [r3, #0]
   1b9ce:	b292      	uxth	r2, r2
   1b9d0:	4291      	cmp	r1, r2
   1b9d2:	d027      	beq.n	1ba24 <rpc_handle_data_message+0x5c>
   1b9d4:	8a19      	ldrh	r1, [r3, #16]
   1b9d6:	4291      	cmp	r1, r2
   1b9d8:	d02a      	beq.n	1ba30 <rpc_handle_data_message+0x68>
   1b9da:	8c19      	ldrh	r1, [r3, #32]
   1b9dc:	4291      	cmp	r1, r2
   1b9de:	d02b      	beq.n	1ba38 <rpc_handle_data_message+0x70>
   1b9e0:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   1b9e2:	4291      	cmp	r1, r2
   1b9e4:	d02a      	beq.n	1ba3c <rpc_handle_data_message+0x74>
   1b9e6:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
   1b9ea:	4291      	cmp	r1, r2
   1b9ec:	d028      	beq.n	1ba40 <rpc_handle_data_message+0x78>
   1b9ee:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
   1b9f2:	4291      	cmp	r1, r2
   1b9f4:	d026      	beq.n	1ba44 <rpc_handle_data_message+0x7c>
   1b9f6:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
   1b9fa:	4291      	cmp	r1, r2
   1b9fc:	d026      	beq.n	1ba4c <rpc_handle_data_message+0x84>
   1b9fe:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   1ba02:	4291      	cmp	r1, r2
   1ba04:	d024      	beq.n	1ba50 <rpc_handle_data_message+0x88>
   1ba06:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
   1ba0a:	4291      	cmp	r1, r2
   1ba0c:	d01c      	beq.n	1ba48 <rpc_handle_data_message+0x80>
   1ba0e:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
   1ba12:	4291      	cmp	r1, r2
   1ba14:	d01e      	beq.n	1ba54 <rpc_handle_data_message+0x8c>
   1ba16:	6880      	ldr	r0, [r0, #8]
   1ba18:	b160      	cbz	r0, 1ba34 <rpc_handle_data_message+0x6c>
   1ba1a:	b510      	push	{r4, lr}
   1ba1c:	f7fc fcfa 	bl	18414 <rpc_transport_data_free>
   1ba20:	2000      	movs	r0, #0
   1ba22:	bd10      	pop	{r4, pc}
   1ba24:	2200      	movs	r2, #0
   1ba26:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1ba2a:	685a      	ldr	r2, [r3, #4]
   1ba2c:	68d9      	ldr	r1, [r3, #12]
   1ba2e:	4710      	bx	r2
   1ba30:	2201      	movs	r2, #1
   1ba32:	e7f8      	b.n	1ba26 <rpc_handle_data_message+0x5e>
   1ba34:	2000      	movs	r0, #0
   1ba36:	4770      	bx	lr
   1ba38:	2202      	movs	r2, #2
   1ba3a:	e7f4      	b.n	1ba26 <rpc_handle_data_message+0x5e>
   1ba3c:	2203      	movs	r2, #3
   1ba3e:	e7f2      	b.n	1ba26 <rpc_handle_data_message+0x5e>
   1ba40:	2204      	movs	r2, #4
   1ba42:	e7f0      	b.n	1ba26 <rpc_handle_data_message+0x5e>
   1ba44:	2205      	movs	r2, #5
   1ba46:	e7ee      	b.n	1ba26 <rpc_handle_data_message+0x5e>
   1ba48:	2208      	movs	r2, #8
   1ba4a:	e7ec      	b.n	1ba26 <rpc_handle_data_message+0x5e>
   1ba4c:	2206      	movs	r2, #6
   1ba4e:	e7ea      	b.n	1ba26 <rpc_handle_data_message+0x5e>
   1ba50:	2207      	movs	r2, #7
   1ba52:	e7e8      	b.n	1ba26 <rpc_handle_data_message+0x5e>
   1ba54:	2209      	movs	r2, #9
   1ba56:	e7e6      	b.n	1ba26 <rpc_handle_data_message+0x5e>
   1ba58:	200219d0 	.word	0x200219d0

0001ba5c <rpc_framework_init>:
   1ba5c:	b508      	push	{r3, lr}
   1ba5e:	22a0      	movs	r2, #160	; 0xa0
   1ba60:	2100      	movs	r1, #0
   1ba62:	4802      	ldr	r0, [pc, #8]	; (1ba6c <rpc_framework_init+0x10>)
   1ba64:	f006 fbf2 	bl	2224c <memset>
   1ba68:	2000      	movs	r0, #0
   1ba6a:	bd08      	pop	{r3, pc}
   1ba6c:	200219d0 	.word	0x200219d0

0001ba70 <rpc_client_register>:
   1ba70:	8803      	ldrh	r3, [r0, #0]
   1ba72:	2b00      	cmp	r3, #0
   1ba74:	d045      	beq.n	1bb02 <rpc_client_register+0x92>
   1ba76:	6842      	ldr	r2, [r0, #4]
   1ba78:	4601      	mov	r1, r0
   1ba7a:	2a00      	cmp	r2, #0
   1ba7c:	d050      	beq.n	1bb20 <rpc_client_register+0xb0>
   1ba7e:	4a30      	ldr	r2, [pc, #192]	; (1bb40 <rpc_client_register+0xd0>)
   1ba80:	8810      	ldrh	r0, [r2, #0]
   1ba82:	4283      	cmp	r3, r0
   1ba84:	d03d      	beq.n	1bb02 <rpc_client_register+0x92>
   1ba86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ba8a:	8a14      	ldrh	r4, [r2, #16]
   1ba8c:	42a3      	cmp	r3, r4
   1ba8e:	d035      	beq.n	1bafc <rpc_client_register+0x8c>
   1ba90:	8c15      	ldrh	r5, [r2, #32]
   1ba92:	42ab      	cmp	r3, r5
   1ba94:	d032      	beq.n	1bafc <rpc_client_register+0x8c>
   1ba96:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   1ba98:	42b3      	cmp	r3, r6
   1ba9a:	d02f      	beq.n	1bafc <rpc_client_register+0x8c>
   1ba9c:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   1baa0:	42bb      	cmp	r3, r7
   1baa2:	d02b      	beq.n	1bafc <rpc_client_register+0x8c>
   1baa4:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   1baa8:	4563      	cmp	r3, ip
   1baaa:	d027      	beq.n	1bafc <rpc_client_register+0x8c>
   1baac:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   1bab0:	4573      	cmp	r3, lr
   1bab2:	d023      	beq.n	1bafc <rpc_client_register+0x8c>
   1bab4:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   1bab8:	4543      	cmp	r3, r8
   1baba:	d01f      	beq.n	1bafc <rpc_client_register+0x8c>
   1babc:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   1bac0:	454b      	cmp	r3, r9
   1bac2:	d01b      	beq.n	1bafc <rpc_client_register+0x8c>
   1bac4:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   1bac8:	4553      	cmp	r3, sl
   1baca:	d017      	beq.n	1bafc <rpc_client_register+0x8c>
   1bacc:	b1e0      	cbz	r0, 1bb08 <rpc_client_register+0x98>
   1bace:	b35c      	cbz	r4, 1bb28 <rpc_client_register+0xb8>
   1bad0:	b365      	cbz	r5, 1bb2c <rpc_client_register+0xbc>
   1bad2:	b36e      	cbz	r6, 1bb30 <rpc_client_register+0xc0>
   1bad4:	b377      	cbz	r7, 1bb34 <rpc_client_register+0xc4>
   1bad6:	f1bc 0f00 	cmp.w	ip, #0
   1bada:	d02d      	beq.n	1bb38 <rpc_client_register+0xc8>
   1badc:	f1be 0f00 	cmp.w	lr, #0
   1bae0:	d020      	beq.n	1bb24 <rpc_client_register+0xb4>
   1bae2:	f1b8 0f00 	cmp.w	r8, #0
   1bae6:	d029      	beq.n	1bb3c <rpc_client_register+0xcc>
   1bae8:	f1b9 0f00 	cmp.w	r9, #0
   1baec:	d00b      	beq.n	1bb06 <rpc_client_register+0x96>
   1baee:	2009      	movs	r0, #9
   1baf0:	f1ba 0f00 	cmp.w	sl, #0
   1baf4:	d008      	beq.n	1bb08 <rpc_client_register+0x98>
   1baf6:	2004      	movs	r0, #4
   1baf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bafc:	2007      	movs	r0, #7
   1bafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bb02:	2007      	movs	r0, #7
   1bb04:	4770      	bx	lr
   1bb06:	2008      	movs	r0, #8
   1bb08:	0100      	lsls	r0, r0, #4
   1bb0a:	5213      	strh	r3, [r2, r0]
   1bb0c:	684b      	ldr	r3, [r1, #4]
   1bb0e:	4402      	add	r2, r0
   1bb10:	6053      	str	r3, [r2, #4]
   1bb12:	688b      	ldr	r3, [r1, #8]
   1bb14:	2000      	movs	r0, #0
   1bb16:	6093      	str	r3, [r2, #8]
   1bb18:	68cb      	ldr	r3, [r1, #12]
   1bb1a:	60d3      	str	r3, [r2, #12]
   1bb1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bb20:	200e      	movs	r0, #14
   1bb22:	4770      	bx	lr
   1bb24:	2006      	movs	r0, #6
   1bb26:	e7ef      	b.n	1bb08 <rpc_client_register+0x98>
   1bb28:	2001      	movs	r0, #1
   1bb2a:	e7ed      	b.n	1bb08 <rpc_client_register+0x98>
   1bb2c:	2002      	movs	r0, #2
   1bb2e:	e7eb      	b.n	1bb08 <rpc_client_register+0x98>
   1bb30:	2003      	movs	r0, #3
   1bb32:	e7e9      	b.n	1bb08 <rpc_client_register+0x98>
   1bb34:	2004      	movs	r0, #4
   1bb36:	e7e7      	b.n	1bb08 <rpc_client_register+0x98>
   1bb38:	2005      	movs	r0, #5
   1bb3a:	e7e5      	b.n	1bb08 <rpc_client_register+0x98>
   1bb3c:	2007      	movs	r0, #7
   1bb3e:	e7e3      	b.n	1bb08 <rpc_client_register+0x98>
   1bb40:	200219d0 	.word	0x200219d0

0001bb44 <rpc_message_send>:
   1bb44:	b150      	cbz	r0, 1bb5c <rpc_message_send+0x18>
   1bb46:	b159      	cbz	r1, 1bb60 <rpc_message_send+0x1c>
   1bb48:	684b      	ldr	r3, [r1, #4]
   1bb4a:	8008      	strh	r0, [r1, #0]
   1bb4c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1bb50:	f043 0302 	orr.w	r3, r3, #2
   1bb54:	604b      	str	r3, [r1, #4]
   1bb56:	4608      	mov	r0, r1
   1bb58:	f7fc bc54 	b.w	18404 <rpc_transport_send>
   1bb5c:	2007      	movs	r0, #7
   1bb5e:	4770      	bx	lr
   1bb60:	200e      	movs	r0, #14
   1bb62:	4770      	bx	lr

0001bb64 <rpc_message_alloc>:
   1bb64:	b342      	cbz	r2, 1bbb8 <rpc_message_alloc+0x54>
   1bb66:	b328      	cbz	r0, 1bbb4 <rpc_message_alloc+0x50>
   1bb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb6a:	2300      	movs	r3, #0
   1bb6c:	4616      	mov	r6, r2
   1bb6e:	460c      	mov	r4, r1
   1bb70:	4605      	mov	r5, r0
   1bb72:	6013      	str	r3, [r2, #0]
   1bb74:	b171      	cbz	r1, 1bb94 <rpc_message_alloc+0x30>
   1bb76:	4608      	mov	r0, r1
   1bb78:	f7fc fc48 	bl	1840c <rpc_transport_data_alloc>
   1bb7c:	4607      	mov	r7, r0
   1bb7e:	b1b8      	cbz	r0, 1bbb0 <rpc_message_alloc+0x4c>
   1bb80:	f7fc fc42 	bl	18408 <rpc_transport_rpc_alloc>
   1bb84:	4603      	mov	r3, r0
   1bb86:	b180      	cbz	r0, 1bbaa <rpc_message_alloc+0x46>
   1bb88:	2000      	movs	r0, #0
   1bb8a:	60dc      	str	r4, [r3, #12]
   1bb8c:	609f      	str	r7, [r3, #8]
   1bb8e:	801d      	strh	r5, [r3, #0]
   1bb90:	6033      	str	r3, [r6, #0]
   1bb92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb94:	f7fc fc38 	bl	18408 <rpc_transport_rpc_alloc>
   1bb98:	4603      	mov	r3, r0
   1bb9a:	b148      	cbz	r0, 1bbb0 <rpc_message_alloc+0x4c>
   1bb9c:	4627      	mov	r7, r4
   1bb9e:	60dc      	str	r4, [r3, #12]
   1bba0:	609f      	str	r7, [r3, #8]
   1bba2:	801d      	strh	r5, [r3, #0]
   1bba4:	2000      	movs	r0, #0
   1bba6:	6033      	str	r3, [r6, #0]
   1bba8:	e7f3      	b.n	1bb92 <rpc_message_alloc+0x2e>
   1bbaa:	4638      	mov	r0, r7
   1bbac:	f7fc fc32 	bl	18414 <rpc_transport_data_free>
   1bbb0:	2004      	movs	r0, #4
   1bbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bbb4:	2007      	movs	r0, #7
   1bbb6:	4770      	bx	lr
   1bbb8:	200e      	movs	r0, #14
   1bbba:	4770      	bx	lr

0001bbbc <rpc_message_free>:
   1bbbc:	b130      	cbz	r0, 1bbcc <rpc_message_free+0x10>
   1bbbe:	b139      	cbz	r1, 1bbd0 <rpc_message_free+0x14>
   1bbc0:	b508      	push	{r3, lr}
   1bbc2:	4608      	mov	r0, r1
   1bbc4:	f7fc fc24 	bl	18410 <rpc_transport_rpc_free>
   1bbc8:	2000      	movs	r0, #0
   1bbca:	bd08      	pop	{r3, pc}
   1bbcc:	2007      	movs	r0, #7
   1bbce:	4770      	bx	lr
   1bbd0:	200e      	movs	r0, #14
   1bbd2:	4770      	bx	lr

0001bbd4 <rpc_message_data_free>:
   1bbd4:	b130      	cbz	r0, 1bbe4 <rpc_message_data_free+0x10>
   1bbd6:	b139      	cbz	r1, 1bbe8 <rpc_message_data_free+0x14>
   1bbd8:	b508      	push	{r3, lr}
   1bbda:	4608      	mov	r0, r1
   1bbdc:	f7fc fc1a 	bl	18414 <rpc_transport_data_free>
   1bbe0:	2000      	movs	r0, #0
   1bbe2:	bd08      	pop	{r3, pc}
   1bbe4:	2007      	movs	r0, #7
   1bbe6:	4770      	bx	lr
   1bbe8:	200e      	movs	r0, #14
   1bbea:	4770      	bx	lr

0001bbec <packet_free_cb>:
   1bbec:	b510      	push	{r4, lr}
   1bbee:	4604      	mov	r4, r0
   1bbf0:	b118      	cbz	r0, 1bbfa <packet_free_cb+0xe>
   1bbf2:	6800      	ldr	r0, [r0, #0]
   1bbf4:	b108      	cbz	r0, 1bbfa <packet_free_cb+0xe>
   1bbf6:	f002 ff71 	bl	1eadc <rpc_gnss_client_data_free>
   1bbfa:	68a0      	ldr	r0, [r4, #8]
   1bbfc:	b118      	cbz	r0, 1bc06 <packet_free_cb+0x1a>
   1bbfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bc02:	f003 bd59 	b.w	1f6b8 <nrf_free>
   1bc06:	bd10      	pop	{r4, pc}

0001bc08 <rpc_gnss_event_handler>:
   1bc08:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc0a:	4b64      	ldr	r3, [pc, #400]	; (1bd9c <rpc_gnss_event_handler+0x194>)
   1bc0c:	4606      	mov	r6, r0
   1bc0e:	6800      	ldr	r0, [r0, #0]
   1bc10:	881b      	ldrh	r3, [r3, #0]
   1bc12:	6802      	ldr	r2, [r0, #0]
   1bc14:	b085      	sub	sp, #20
   1bc16:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   1bc1a:	460d      	mov	r5, r1
   1bc1c:	d037      	beq.n	1bc8e <rpc_gnss_event_handler+0x86>
   1bc1e:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   1bc22:	33ff      	adds	r3, #255	; 0xff
   1bc24:	b29b      	uxth	r3, r3
   1bc26:	2b02      	cmp	r3, #2
   1bc28:	d811      	bhi.n	1bc4e <rpc_gnss_event_handler+0x46>
   1bc2a:	4c5d      	ldr	r4, [pc, #372]	; (1bda0 <rpc_gnss_event_handler+0x198>)
   1bc2c:	6823      	ldr	r3, [r4, #0]
   1bc2e:	075a      	lsls	r2, r3, #29
   1bc30:	d410      	bmi.n	1bc54 <rpc_gnss_event_handler+0x4c>
   1bc32:	6823      	ldr	r3, [r4, #0]
   1bc34:	079b      	lsls	r3, r3, #30
   1bc36:	d503      	bpl.n	1bc40 <rpc_gnss_event_handler+0x38>
   1bc38:	f244 0303 	movw	r3, #16387	; 0x4003
   1bc3c:	429d      	cmp	r5, r3
   1bc3e:	d009      	beq.n	1bc54 <rpc_gnss_event_handler+0x4c>
   1bc40:	6830      	ldr	r0, [r6, #0]
   1bc42:	b120      	cbz	r0, 1bc4e <rpc_gnss_event_handler+0x46>
   1bc44:	f002 ff4a 	bl	1eadc <rpc_gnss_client_data_free>
   1bc48:	2200      	movs	r2, #0
   1bc4a:	4b56      	ldr	r3, [pc, #344]	; (1bda4 <rpc_gnss_event_handler+0x19c>)
   1bc4c:	601a      	str	r2, [r3, #0]
   1bc4e:	2000      	movs	r0, #0
   1bc50:	b005      	add	sp, #20
   1bc52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bc54:	2002      	movs	r0, #2
   1bc56:	f003 fd25 	bl	1f6a4 <nrf_malloc>
   1bc5a:	4607      	mov	r7, r0
   1bc5c:	2800      	cmp	r0, #0
   1bc5e:	f000 8094 	beq.w	1bd8a <rpc_gnss_event_handler+0x182>
   1bc62:	2302      	movs	r3, #2
   1bc64:	8005      	strh	r5, [r0, #0]
   1bc66:	6831      	ldr	r1, [r6, #0]
   1bc68:	6872      	ldr	r2, [r6, #4]
   1bc6a:	484f      	ldr	r0, [pc, #316]	; (1bda8 <rpc_gnss_event_handler+0x1a0>)
   1bc6c:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   1bc70:	6800      	ldr	r0, [r0, #0]
   1bc72:	9303      	str	r3, [sp, #12]
   1bc74:	6803      	ldr	r3, [r0, #0]
   1bc76:	4669      	mov	r1, sp
   1bc78:	685b      	ldr	r3, [r3, #4]
   1bc7a:	4798      	blx	r3
   1bc7c:	3001      	adds	r0, #1
   1bc7e:	d071      	beq.n	1bd64 <rpc_gnss_event_handler+0x15c>
   1bc80:	2000      	movs	r0, #0
   1bc82:	6823      	ldr	r3, [r4, #0]
   1bc84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1bc88:	6023      	str	r3, [r4, #0]
   1bc8a:	b005      	add	sp, #20
   1bc8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bc8e:	4c44      	ldr	r4, [pc, #272]	; (1bda0 <rpc_gnss_event_handler+0x198>)
   1bc90:	4f44      	ldr	r7, [pc, #272]	; (1bda4 <rpc_gnss_event_handler+0x19c>)
   1bc92:	6823      	ldr	r3, [r4, #0]
   1bc94:	6038      	str	r0, [r7, #0]
   1bc96:	01d9      	lsls	r1, r3, #7
   1bc98:	d523      	bpl.n	1bce2 <rpc_gnss_event_handler+0xda>
   1bc9a:	f242 1302 	movw	r3, #8450	; 0x2102
   1bc9e:	429d      	cmp	r5, r3
   1bca0:	d11f      	bne.n	1bce2 <rpc_gnss_event_handler+0xda>
   1bca2:	6843      	ldr	r3, [r0, #4]
   1bca4:	b91b      	cbnz	r3, 1bcae <rpc_gnss_event_handler+0xa6>
   1bca6:	6823      	ldr	r3, [r4, #0]
   1bca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1bcac:	6023      	str	r3, [r4, #0]
   1bcae:	6823      	ldr	r3, [r4, #0]
   1bcb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1bcb4:	6023      	str	r3, [r4, #0]
   1bcb6:	6823      	ldr	r3, [r4, #0]
   1bcb8:	025a      	lsls	r2, r3, #9
   1bcba:	d430      	bmi.n	1bd1e <rpc_gnss_event_handler+0x116>
   1bcbc:	f242 0305 	movw	r3, #8197	; 0x2005
   1bcc0:	429d      	cmp	r5, r3
   1bcc2:	d12c      	bne.n	1bd1e <rpc_gnss_event_handler+0x116>
   1bcc4:	6823      	ldr	r3, [r4, #0]
   1bcc6:	0299      	lsls	r1, r3, #10
   1bcc8:	d529      	bpl.n	1bd1e <rpc_gnss_event_handler+0x116>
   1bcca:	6843      	ldr	r3, [r0, #4]
   1bccc:	2b00      	cmp	r3, #0
   1bcce:	d157      	bne.n	1bd80 <rpc_gnss_event_handler+0x178>
   1bcd0:	6823      	ldr	r3, [r4, #0]
   1bcd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1bcd6:	6023      	str	r3, [r4, #0]
   1bcd8:	6823      	ldr	r3, [r4, #0]
   1bcda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1bcde:	6023      	str	r3, [r4, #0]
   1bce0:	e01d      	b.n	1bd1e <rpc_gnss_event_handler+0x116>
   1bce2:	6823      	ldr	r3, [r4, #0]
   1bce4:	025b      	lsls	r3, r3, #9
   1bce6:	d50e      	bpl.n	1bd06 <rpc_gnss_event_handler+0xfe>
   1bce8:	f242 1303 	movw	r3, #8451	; 0x2103
   1bcec:	429d      	cmp	r5, r3
   1bcee:	d10a      	bne.n	1bd06 <rpc_gnss_event_handler+0xfe>
   1bcf0:	6843      	ldr	r3, [r0, #4]
   1bcf2:	b91b      	cbnz	r3, 1bcfc <rpc_gnss_event_handler+0xf4>
   1bcf4:	6823      	ldr	r3, [r4, #0]
   1bcf6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1bcfa:	6023      	str	r3, [r4, #0]
   1bcfc:	6823      	ldr	r3, [r4, #0]
   1bcfe:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1bd02:	6023      	str	r3, [r4, #0]
   1bd04:	e00b      	b.n	1bd1e <rpc_gnss_event_handler+0x116>
   1bd06:	f242 0301 	movw	r3, #8193	; 0x2001
   1bd0a:	429d      	cmp	r5, r3
   1bd0c:	d10c      	bne.n	1bd28 <rpc_gnss_event_handler+0x120>
   1bd0e:	6843      	ldr	r3, [r0, #4]
   1bd10:	b92b      	cbnz	r3, 1bd1e <rpc_gnss_event_handler+0x116>
   1bd12:	6823      	ldr	r3, [r4, #0]
   1bd14:	0c1b      	lsrs	r3, r3, #16
   1bd16:	041b      	lsls	r3, r3, #16
   1bd18:	f043 0302 	orr.w	r3, r3, #2
   1bd1c:	6023      	str	r3, [r4, #0]
   1bd1e:	f002 fedd 	bl	1eadc <rpc_gnss_client_data_free>
   1bd22:	2300      	movs	r3, #0
   1bd24:	603b      	str	r3, [r7, #0]
   1bd26:	e77a      	b.n	1bc1e <rpc_gnss_event_handler+0x16>
   1bd28:	f242 0304 	movw	r3, #8196	; 0x2004
   1bd2c:	429d      	cmp	r5, r3
   1bd2e:	d1c5      	bne.n	1bcbc <rpc_gnss_event_handler+0xb4>
   1bd30:	6843      	ldr	r3, [r0, #4]
   1bd32:	b993      	cbnz	r3, 1bd5a <rpc_gnss_event_handler+0x152>
   1bd34:	6823      	ldr	r3, [r4, #0]
   1bd36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1bd3a:	6023      	str	r3, [r4, #0]
   1bd3c:	6823      	ldr	r3, [r4, #0]
   1bd3e:	b29b      	uxth	r3, r3
   1bd40:	2b03      	cmp	r3, #3
   1bd42:	6823      	ldr	r3, [r4, #0]
   1bd44:	d016      	beq.n	1bd74 <rpc_gnss_event_handler+0x16c>
   1bd46:	b29b      	uxth	r3, r3
   1bd48:	2b04      	cmp	r3, #4
   1bd4a:	d1d7      	bne.n	1bcfc <rpc_gnss_event_handler+0xf4>
   1bd4c:	6823      	ldr	r3, [r4, #0]
   1bd4e:	0c1b      	lsrs	r3, r3, #16
   1bd50:	041b      	lsls	r3, r3, #16
   1bd52:	f043 0302 	orr.w	r3, r3, #2
   1bd56:	6023      	str	r3, [r4, #0]
   1bd58:	e7d0      	b.n	1bcfc <rpc_gnss_event_handler+0xf4>
   1bd5a:	6823      	ldr	r3, [r4, #0]
   1bd5c:	b29b      	uxth	r3, r3
   1bd5e:	2b03      	cmp	r3, #3
   1bd60:	d1cc      	bne.n	1bcfc <rpc_gnss_event_handler+0xf4>
   1bd62:	e7f3      	b.n	1bd4c <rpc_gnss_event_handler+0x144>
   1bd64:	4638      	mov	r0, r7
   1bd66:	f003 fca7 	bl	1f6b8 <nrf_free>
   1bd6a:	6830      	ldr	r0, [r6, #0]
   1bd6c:	2800      	cmp	r0, #0
   1bd6e:	f47f af69 	bne.w	1bc44 <rpc_gnss_event_handler+0x3c>
   1bd72:	e76c      	b.n	1bc4e <rpc_gnss_event_handler+0x46>
   1bd74:	0c1b      	lsrs	r3, r3, #16
   1bd76:	041b      	lsls	r3, r3, #16
   1bd78:	f043 0304 	orr.w	r3, r3, #4
   1bd7c:	6023      	str	r3, [r4, #0]
   1bd7e:	e7bd      	b.n	1bcfc <rpc_gnss_event_handler+0xf4>
   1bd80:	6823      	ldr	r3, [r4, #0]
   1bd82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1bd86:	6023      	str	r3, [r4, #0]
   1bd88:	e7c9      	b.n	1bd1e <rpc_gnss_event_handler+0x116>
   1bd8a:	6830      	ldr	r0, [r6, #0]
   1bd8c:	2800      	cmp	r0, #0
   1bd8e:	f43f af5e 	beq.w	1bc4e <rpc_gnss_event_handler+0x46>
   1bd92:	f002 fea3 	bl	1eadc <rpc_gnss_client_data_free>
   1bd96:	4b03      	ldr	r3, [pc, #12]	; (1bda4 <rpc_gnss_event_handler+0x19c>)
   1bd98:	601f      	str	r7, [r3, #0]
   1bd9a:	e758      	b.n	1bc4e <rpc_gnss_event_handler+0x46>
   1bd9c:	20023046 	.word	0x20023046
   1bda0:	20021a70 	.word	0x20021a70
   1bda4:	20021a74 	.word	0x20021a74
   1bda8:	20021a78 	.word	0x20021a78

0001bdac <gnss_interface_write>:
   1bdac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bdb0:	4a74      	ldr	r2, [pc, #464]	; (1bf84 <gnss_interface_write+0x1d8>)
   1bdb2:	b09f      	sub	sp, #124	; 0x7c
   1bdb4:	4290      	cmp	r0, r2
   1bdb6:	9d26      	ldr	r5, [sp, #152]	; 0x98
   1bdb8:	f040 80d7 	bne.w	1bf6a <gnss_interface_write+0x1be>
   1bdbc:	2900      	cmp	r1, #0
   1bdbe:	f000 80c6 	beq.w	1bf4e <gnss_interface_write+0x1a2>
   1bdc2:	2d00      	cmp	r5, #0
   1bdc4:	f000 80c3 	beq.w	1bf4e <gnss_interface_write+0x1a2>
   1bdc8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   1bdca:	2a02      	cmp	r2, #2
   1bdcc:	f040 80bf 	bne.w	1bf4e <gnss_interface_write+0x1a2>
   1bdd0:	4c6d      	ldr	r4, [pc, #436]	; (1bf88 <gnss_interface_write+0x1dc>)
   1bdd2:	6822      	ldr	r2, [r4, #0]
   1bdd4:	b292      	uxth	r2, r2
   1bdd6:	2a02      	cmp	r2, #2
   1bdd8:	d004      	beq.n	1bde4 <gnss_interface_write+0x38>
   1bdda:	6822      	ldr	r2, [r4, #0]
   1bddc:	b292      	uxth	r2, r2
   1bdde:	2a04      	cmp	r2, #4
   1bde0:	f040 80bd 	bne.w	1bf5e <gnss_interface_write+0x1b2>
   1bde4:	2b00      	cmp	r3, #0
   1bde6:	f040 80c6 	bne.w	1bf76 <gnss_interface_write+0x1ca>
   1bdea:	6822      	ldr	r2, [r4, #0]
   1bdec:	0390      	lsls	r0, r2, #14
   1bdee:	d512      	bpl.n	1be16 <gnss_interface_write+0x6a>
   1bdf0:	6822      	ldr	r2, [r4, #0]
   1bdf2:	882b      	ldrh	r3, [r5, #0]
   1bdf4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   1bdf8:	6022      	str	r2, [r4, #0]
   1bdfa:	6822      	ldr	r2, [r4, #0]
   1bdfc:	3b01      	subs	r3, #1
   1bdfe:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   1be02:	6022      	str	r2, [r4, #0]
   1be04:	2b07      	cmp	r3, #7
   1be06:	f200 80a2 	bhi.w	1bf4e <gnss_interface_write+0x1a2>
   1be0a:	e8df f003 	tbb	[pc, r3]
   1be0e:	7d82      	.short	0x7d82
   1be10:	646e7378 	.word	0x646e7378
   1be14:	0869      	.short	0x0869
   1be16:	2000      	movs	r0, #0
   1be18:	b01f      	add	sp, #124	; 0x7c
   1be1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1be1e:	4608      	mov	r0, r1
   1be20:	a902      	add	r1, sp, #8
   1be22:	f002 fe0f 	bl	1ea44 <rpc_gnss_serialize_integrity>
   1be26:	2172      	movs	r1, #114	; 0x72
   1be28:	4668      	mov	r0, sp
   1be2a:	f002 fe25 	bl	1ea78 <rpc_gnss_client_request_alloc>
   1be2e:	4605      	mov	r5, r0
   1be30:	9800      	ldr	r0, [sp, #0]
   1be32:	2d00      	cmp	r5, #0
   1be34:	d172      	bne.n	1bf1c <gnss_interface_write+0x170>
   1be36:	2800      	cmp	r0, #0
   1be38:	d077      	beq.n	1bf2a <gnss_interface_write+0x17e>
   1be3a:	f241 0605 	movw	r6, #4101	; 0x1005
   1be3e:	f04f 0c49 	mov.w	ip, #73	; 0x49
   1be42:	2272      	movs	r2, #114	; 0x72
   1be44:	f04f 0e76 	mov.w	lr, #118	; 0x76
   1be48:	f04f 0943 	mov.w	r9, #67	; 0x43
   1be4c:	f04f 0854 	mov.w	r8, #84	; 0x54
   1be50:	4f4e      	ldr	r7, [pc, #312]	; (1bf8c <gnss_interface_write+0x1e0>)
   1be52:	a91e      	add	r1, sp, #120	; 0x78
   1be54:	883b      	ldrh	r3, [r7, #0]
   1be56:	f880 c00f 	strb.w	ip, [r0, #15]
   1be5a:	3301      	adds	r3, #1
   1be5c:	b29b      	uxth	r3, r3
   1be5e:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   1be62:	f841 cd74 	str.w	ip, [r1, #-116]!
   1be66:	7145      	strb	r5, [r0, #5]
   1be68:	7185      	strb	r5, [r0, #6]
   1be6a:	71c5      	strb	r5, [r0, #7]
   1be6c:	7205      	strb	r5, [r0, #8]
   1be6e:	7245      	strb	r5, [r0, #9]
   1be70:	7285      	strb	r5, [r0, #10]
   1be72:	72c5      	strb	r5, [r0, #11]
   1be74:	7102      	strb	r2, [r0, #4]
   1be76:	f880 900c 	strb.w	r9, [r0, #12]
   1be7a:	f880 800d 	strb.w	r8, [r0, #13]
   1be7e:	f880 e00e 	strb.w	lr, [r0, #14]
   1be82:	6800      	ldr	r0, [r0, #0]
   1be84:	803b      	strh	r3, [r7, #0]
   1be86:	f7f0 fe75 	bl	cb74 <memcpy>
   1be8a:	4b41      	ldr	r3, [pc, #260]	; (1bf90 <gnss_interface_write+0x1e4>)
   1be8c:	4631      	mov	r1, r6
   1be8e:	9800      	ldr	r0, [sp, #0]
   1be90:	601d      	str	r5, [r3, #0]
   1be92:	f002 fe05 	bl	1eaa0 <rpc_gnss_client_request_send>
   1be96:	2800      	cmp	r0, #0
   1be98:	d14e      	bne.n	1bf38 <gnss_interface_write+0x18c>
   1be9a:	6823      	ldr	r3, [r4, #0]
   1be9c:	0299      	lsls	r1, r3, #10
   1be9e:	d50b      	bpl.n	1beb8 <gnss_interface_write+0x10c>
   1bea0:	4e3c      	ldr	r6, [pc, #240]	; (1bf94 <gnss_interface_write+0x1e8>)
   1bea2:	4d38      	ldr	r5, [pc, #224]	; (1bf84 <gnss_interface_write+0x1d8>)
   1bea4:	e000      	b.n	1bea8 <gnss_interface_write+0xfc>
   1bea6:	b978      	cbnz	r0, 1bec8 <gnss_interface_write+0x11c>
   1bea8:	4631      	mov	r1, r6
   1beaa:	4628      	mov	r0, r5
   1beac:	f7f9 fb80 	bl	155b0 <bsd_os_timedwait>
   1beb0:	6823      	ldr	r3, [r4, #0]
   1beb2:	029a      	lsls	r2, r3, #10
   1beb4:	d4f7      	bmi.n	1bea6 <gnss_interface_write+0xfa>
   1beb6:	b938      	cbnz	r0, 1bec8 <gnss_interface_write+0x11c>
   1beb8:	6823      	ldr	r3, [r4, #0]
   1beba:	039b      	lsls	r3, r3, #14
   1bebc:	d4ab      	bmi.n	1be16 <gnss_interface_write+0x6a>
   1bebe:	2005      	movs	r0, #5
   1bec0:	6823      	ldr	r3, [r4, #0]
   1bec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1bec6:	6023      	str	r3, [r4, #0]
   1bec8:	f7f9 fc2a 	bl	15720 <bsd_os_errno_set>
   1becc:	f04f 30ff 	mov.w	r0, #4294967295
   1bed0:	b01f      	add	sp, #124	; 0x7c
   1bed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bed6:	4608      	mov	r0, r1
   1bed8:	a902      	add	r1, sp, #8
   1beda:	f002 fd6b 	bl	1e9b4 <rpc_gnss_serialize_time_and_sv_tow>
   1bede:	e7a2      	b.n	1be26 <gnss_interface_write+0x7a>
   1bee0:	4608      	mov	r0, r1
   1bee2:	a902      	add	r1, sp, #8
   1bee4:	f002 fd8e 	bl	1ea04 <rpc_gnss_serialize_location>
   1bee8:	e79d      	b.n	1be26 <gnss_interface_write+0x7a>
   1beea:	4608      	mov	r0, r1
   1beec:	a902      	add	r1, sp, #8
   1beee:	f002 fd47 	bl	1e980 <rpc_gnss_serialize_nequick>
   1bef2:	e798      	b.n	1be26 <gnss_interface_write+0x7a>
   1bef4:	4608      	mov	r0, r1
   1bef6:	a902      	add	r1, sp, #8
   1bef8:	f002 fd1e 	bl	1e938 <rpc_gnss_serialize_klob>
   1befc:	e793      	b.n	1be26 <gnss_interface_write+0x7a>
   1befe:	4608      	mov	r0, r1
   1bf00:	a902      	add	r1, sp, #8
   1bf02:	f002 fce7 	bl	1e8d4 <rpc_gnss_serialize_alm>
   1bf06:	e78e      	b.n	1be26 <gnss_interface_write+0x7a>
   1bf08:	4608      	mov	r0, r1
   1bf0a:	a902      	add	r1, sp, #8
   1bf0c:	f002 fc90 	bl	1e830 <rpc_gnss_serialize_ephe>
   1bf10:	e789      	b.n	1be26 <gnss_interface_write+0x7a>
   1bf12:	4608      	mov	r0, r1
   1bf14:	a902      	add	r1, sp, #8
   1bf16:	f002 fc69 	bl	1e7ec <rpc_gnss_serialize_utc>
   1bf1a:	e784      	b.n	1be26 <gnss_interface_write+0x7a>
   1bf1c:	b128      	cbz	r0, 1bf2a <gnss_interface_write+0x17e>
   1bf1e:	6803      	ldr	r3, [r0, #0]
   1bf20:	b11b      	cbz	r3, 1bf2a <gnss_interface_write+0x17e>
   1bf22:	4618      	mov	r0, r3
   1bf24:	f002 fdda 	bl	1eadc <rpc_gnss_client_data_free>
   1bf28:	9800      	ldr	r0, [sp, #0]
   1bf2a:	f002 fdcf 	bl	1eacc <rpc_gnss_client_message_free>
   1bf2e:	2023      	movs	r0, #35	; 0x23
   1bf30:	f7f9 fbf6 	bl	15720 <bsd_os_errno_set>
   1bf34:	f04f 30ff 	mov.w	r0, #4294967295
   1bf38:	6823      	ldr	r3, [r4, #0]
   1bf3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1bf3e:	6023      	str	r3, [r4, #0]
   1bf40:	6823      	ldr	r3, [r4, #0]
   1bf42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1bf46:	6023      	str	r3, [r4, #0]
   1bf48:	b01f      	add	sp, #124	; 0x7c
   1bf4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bf4e:	2016      	movs	r0, #22
   1bf50:	f7f9 fbe6 	bl	15720 <bsd_os_errno_set>
   1bf54:	f04f 30ff 	mov.w	r0, #4294967295
   1bf58:	b01f      	add	sp, #124	; 0x7c
   1bf5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bf5e:	2039      	movs	r0, #57	; 0x39
   1bf60:	f7f9 fbde 	bl	15720 <bsd_os_errno_set>
   1bf64:	f04f 30ff 	mov.w	r0, #4294967295
   1bf68:	e756      	b.n	1be18 <gnss_interface_write+0x6c>
   1bf6a:	2009      	movs	r0, #9
   1bf6c:	f7f9 fbd8 	bl	15720 <bsd_os_errno_set>
   1bf70:	f04f 30ff 	mov.w	r0, #4294967295
   1bf74:	e750      	b.n	1be18 <gnss_interface_write+0x6c>
   1bf76:	202d      	movs	r0, #45	; 0x2d
   1bf78:	f7f9 fbd2 	bl	15720 <bsd_os_errno_set>
   1bf7c:	f04f 30ff 	mov.w	r0, #4294967295
   1bf80:	e74a      	b.n	1be18 <gnss_interface_write+0x6c>
   1bf82:	bf00      	nop
   1bf84:	49765443 	.word	0x49765443
   1bf88:	20021a70 	.word	0x20021a70
   1bf8c:	20023046 	.word	0x20023046
   1bf90:	20021a74 	.word	0x20021a74
   1bf94:	200204c4 	.word	0x200204c4

0001bf98 <gnss_interface_read>:
   1bf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf9c:	4c55      	ldr	r4, [pc, #340]	; (1c0f4 <gnss_interface_read+0x15c>)
   1bf9e:	b0b7      	sub	sp, #220	; 0xdc
   1bfa0:	42a0      	cmp	r0, r4
   1bfa2:	f040 81fa 	bne.w	1c39a <gnss_interface_read+0x402>
   1bfa6:	460e      	mov	r6, r1
   1bfa8:	2900      	cmp	r1, #0
   1bfaa:	f000 81f0 	beq.w	1c38e <gnss_interface_read+0x3f6>
   1bfae:	2ad7      	cmp	r2, #215	; 0xd7
   1bfb0:	f240 81ed 	bls.w	1c38e <gnss_interface_read+0x3f6>
   1bfb4:	4d50      	ldr	r5, [pc, #320]	; (1c0f8 <gnss_interface_read+0x160>)
   1bfb6:	469a      	mov	sl, r3
   1bfb8:	682b      	ldr	r3, [r5, #0]
   1bfba:	b29b      	uxth	r3, r3
   1bfbc:	2b04      	cmp	r3, #4
   1bfbe:	d004      	beq.n	1bfca <gnss_interface_read+0x32>
   1bfc0:	682b      	ldr	r3, [r5, #0]
   1bfc2:	b29b      	uxth	r3, r3
   1bfc4:	2b02      	cmp	r3, #2
   1bfc6:	f040 81dc 	bne.w	1c382 <gnss_interface_read+0x3ea>
   1bfca:	f1ba 0f00 	cmp.w	sl, #0
   1bfce:	d178      	bne.n	1c0c2 <gnss_interface_read+0x12a>
   1bfd0:	2102      	movs	r1, #2
   1bfd2:	20b6      	movs	r0, #182	; 0xb6
   1bfd4:	2400      	movs	r4, #0
   1bfd6:	682b      	ldr	r3, [r5, #0]
   1bfd8:	f10d 020e 	add.w	r2, sp, #14
   1bfdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1bfe0:	602b      	str	r3, [r5, #0]
   1bfe2:	ab08      	add	r3, sp, #32
   1bfe4:	9304      	str	r3, [sp, #16]
   1bfe6:	f8df b118 	ldr.w	fp, [pc, #280]	; 1c100 <gnss_interface_read+0x168>
   1bfea:	ea0a 0301 	and.w	r3, sl, r1
   1bfee:	4f43      	ldr	r7, [pc, #268]	; (1c0fc <gnss_interface_read+0x164>)
   1bff0:	f8df 9110 	ldr.w	r9, [pc, #272]	; 1c104 <gnss_interface_read+0x16c>
   1bff4:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1c0f4 <gnss_interface_read+0x15c>
   1bff8:	9005      	str	r0, [sp, #20]
   1bffa:	9107      	str	r1, [sp, #28]
   1bffc:	9206      	str	r2, [sp, #24]
   1bffe:	9301      	str	r3, [sp, #4]
   1c000:	f8db 0000 	ldr.w	r0, [fp]
   1c004:	4652      	mov	r2, sl
   1c006:	6803      	ldr	r3, [r0, #0]
   1c008:	a904      	add	r1, sp, #16
   1c00a:	689b      	ldr	r3, [r3, #8]
   1c00c:	4798      	blx	r3
   1c00e:	2800      	cmp	r0, #0
   1c010:	da2a      	bge.n	1c068 <gnss_interface_read+0xd0>
   1c012:	9b01      	ldr	r3, [sp, #4]
   1c014:	b15b      	cbz	r3, 1c02e <gnss_interface_read+0x96>
   1c016:	1c42      	adds	r2, r0, #1
   1c018:	4603      	mov	r3, r0
   1c01a:	d125      	bne.n	1c068 <gnss_interface_read+0xd0>
   1c01c:	b9dc      	cbnz	r4, 1c056 <gnss_interface_read+0xbe>
   1c01e:	2023      	movs	r0, #35	; 0x23
   1c020:	461c      	mov	r4, r3
   1c022:	f7f9 fb7d 	bl	15720 <bsd_os_errno_set>
   1c026:	4620      	mov	r0, r4
   1c028:	b037      	add	sp, #220	; 0xdc
   1c02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c02e:	682a      	ldr	r2, [r5, #0]
   1c030:	783b      	ldrb	r3, [r7, #0]
   1c032:	03d1      	lsls	r1, r2, #15
   1c034:	d40c      	bmi.n	1c050 <gnss_interface_read+0xb8>
   1c036:	b95c      	cbnz	r4, 1c050 <gnss_interface_read+0xb8>
   1c038:	b163      	cbz	r3, 1c054 <gnss_interface_read+0xbc>
   1c03a:	4649      	mov	r1, r9
   1c03c:	4640      	mov	r0, r8
   1c03e:	f7f9 fab7 	bl	155b0 <bsd_os_timedwait>
   1c042:	682b      	ldr	r3, [r5, #0]
   1c044:	03db      	lsls	r3, r3, #15
   1c046:	d437      	bmi.n	1c0b8 <gnss_interface_read+0x120>
   1c048:	783b      	ldrb	r3, [r7, #0]
   1c04a:	2800      	cmp	r0, #0
   1c04c:	d0f4      	beq.n	1c038 <gnss_interface_read+0xa0>
   1c04e:	4604      	mov	r4, r0
   1c050:	2b00      	cmp	r3, #0
   1c052:	d1d5      	bne.n	1c000 <gnss_interface_read+0x68>
   1c054:	2470      	movs	r4, #112	; 0x70
   1c056:	4620      	mov	r0, r4
   1c058:	f04f 34ff 	mov.w	r4, #4294967295
   1c05c:	f7f9 fb60 	bl	15720 <bsd_os_errno_set>
   1c060:	4620      	mov	r0, r4
   1c062:	b037      	add	sp, #220	; 0xdc
   1c064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c068:	f244 0202 	movw	r2, #16386	; 0x4002
   1c06c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1c070:	4293      	cmp	r3, r2
   1c072:	d02f      	beq.n	1c0d4 <gnss_interface_read+0x13c>
   1c074:	f244 0201 	movw	r2, #16385	; 0x4001
   1c078:	4293      	cmp	r3, r2
   1c07a:	d045      	beq.n	1c108 <gnss_interface_read+0x170>
   1c07c:	f244 0203 	movw	r2, #16387	; 0x4003
   1c080:	4293      	cmp	r3, r2
   1c082:	f040 8184 	bne.w	1c38e <gnss_interface_read+0x3f6>
   1c086:	2203      	movs	r2, #3
   1c088:	2414      	movs	r4, #20
   1c08a:	9b08      	ldr	r3, [sp, #32]
   1c08c:	7032      	strb	r2, [r6, #0]
   1c08e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c090:	60b3      	str	r3, [r6, #8]
   1c092:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1c096:	e9c6 2303 	strd	r2, r3, [r6, #12]
   1c09a:	f8db 0000 	ldr.w	r0, [fp]
   1c09e:	6803      	ldr	r3, [r0, #0]
   1c0a0:	68db      	ldr	r3, [r3, #12]
   1c0a2:	4798      	blx	r3
   1c0a4:	2800      	cmp	r0, #0
   1c0a6:	ddbe      	ble.n	1c026 <gnss_interface_read+0x8e>
   1c0a8:	4620      	mov	r0, r4
   1c0aa:	682b      	ldr	r3, [r5, #0]
   1c0ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1c0b0:	602b      	str	r3, [r5, #0]
   1c0b2:	b037      	add	sp, #220	; 0xdc
   1c0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0b8:	783b      	ldrb	r3, [r7, #0]
   1c0ba:	4604      	mov	r4, r0
   1c0bc:	2b00      	cmp	r3, #0
   1c0be:	d19f      	bne.n	1c000 <gnss_interface_read+0x68>
   1c0c0:	e7c8      	b.n	1c054 <gnss_interface_read+0xbc>
   1c0c2:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   1c0c6:	d183      	bne.n	1bfd0 <gnss_interface_read+0x38>
   1c0c8:	202d      	movs	r0, #45	; 0x2d
   1c0ca:	f7f9 fb29 	bl	15720 <bsd_os_errno_set>
   1c0ce:	f04f 34ff 	mov.w	r4, #4294967295
   1c0d2:	e7a8      	b.n	1c026 <gnss_interface_read+0x8e>
   1c0d4:	a808      	add	r0, sp, #32
   1c0d6:	f006 fcc9 	bl	22a6c <strlen>
   1c0da:	2302      	movs	r3, #2
   1c0dc:	1c44      	adds	r4, r0, #1
   1c0de:	b2a4      	uxth	r4, r4
   1c0e0:	f806 3b08 	strb.w	r3, [r6], #8
   1c0e4:	4622      	mov	r2, r4
   1c0e6:	a908      	add	r1, sp, #32
   1c0e8:	4630      	mov	r0, r6
   1c0ea:	f7f0 fd43 	bl	cb74 <memcpy>
   1c0ee:	3408      	adds	r4, #8
   1c0f0:	e7d3      	b.n	1c09a <gnss_interface_read+0x102>
   1c0f2:	bf00      	nop
   1c0f4:	49765443 	.word	0x49765443
   1c0f8:	20021a70 	.word	0x20021a70
   1c0fc:	20025018 	.word	0x20025018
   1c100:	20021a78 	.word	0x20021a78
   1c104:	200204c4 	.word	0x200204c4
   1c108:	2401      	movs	r4, #1
   1c10a:	a809      	add	r0, sp, #36	; 0x24
   1c10c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   1c10e:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1c112:	e9c6 2304 	strd	r2, r3, [r6, #16]
   1c116:	990d      	ldr	r1, [sp, #52]	; 0x34
   1c118:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c11a:	7034      	strb	r4, [r6, #0]
   1c11c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c11e:	61b1      	str	r1, [r6, #24]
   1c120:	9910      	ldr	r1, [sp, #64]	; 0x40
   1c122:	61f2      	str	r2, [r6, #28]
   1c124:	6233      	str	r3, [r6, #32]
   1c126:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   1c12a:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   1c12e:	6271      	str	r1, [r6, #36]	; 0x24
   1c130:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   1c134:	f886 2044 	strb.w	r2, [r6, #68]	; 0x44
   1c138:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   1c13c:	6373      	str	r3, [r6, #52]	; 0x34
   1c13e:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   1c142:	63b1      	str	r1, [r6, #56]	; 0x38
   1c144:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   1c148:	63f2      	str	r2, [r6, #60]	; 0x3c
   1c14a:	6433      	str	r3, [r6, #64]	; 0x40
   1c14c:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   1c150:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1c154:	8531      	strh	r1, [r6, #40]	; 0x28
   1c156:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
   1c15a:	f8c6 202a 	str.w	r2, [r6, #42]	; 0x2a
   1c15e:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1c162:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   1c166:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1c168:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   1c16c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   1c170:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   1c174:	f3c3 210f 	ubfx	r1, r3, #8, #16
   1c178:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1c17a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   1c17e:	8630      	strh	r0, [r6, #48]	; 0x30
   1c180:	f8a6 104a 	strh.w	r1, [r6, #74]	; 0x4a
   1c184:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   1c188:	f3c3 230f 	ubfx	r3, r3, #8, #16
   1c18c:	f8a6 2056 	strh.w	r2, [r6, #86]	; 0x56
   1c190:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   1c194:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
   1c198:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   1c19c:	f8a6 1046 	strh.w	r1, [r6, #70]	; 0x46
   1c1a0:	f886 2048 	strb.w	r2, [r6, #72]	; 0x48
   1c1a4:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   1c1a8:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1c1ac:	64f3      	str	r3, [r6, #76]	; 0x4c
   1c1ae:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   1c1b2:	f886 1050 	strb.w	r1, [r6, #80]	; 0x50
   1c1b6:	f8a6 2052 	strh.w	r2, [r6, #82]	; 0x52
   1c1ba:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
   1c1be:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   1c1c2:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   1c1c6:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   1c1ca:	65b1      	str	r1, [r6, #88]	; 0x58
   1c1cc:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
   1c1d0:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   1c1d4:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   1c1d8:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
   1c1dc:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   1c1e0:	f886 1060 	strb.w	r1, [r6, #96]	; 0x60
   1c1e4:	6672      	str	r2, [r6, #100]	; 0x64
   1c1e6:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
   1c1ea:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   1c1ee:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   1c1f2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1c1f4:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   1c1f8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1c1fc:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   1c200:	f3c2 220f 	ubfx	r2, r2, #8, #16
   1c204:	f8a6 106e 	strh.w	r1, [r6, #110]	; 0x6e
   1c208:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   1c20c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1c210:	f8a6 207a 	strh.w	r2, [r6, #122]	; 0x7a
   1c214:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   1c218:	f8a6 3086 	strh.w	r3, [r6, #134]	; 0x86
   1c21c:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   1c220:	f8a6 106a 	strh.w	r1, [r6, #106]	; 0x6a
   1c224:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
   1c228:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   1c22c:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   1c230:	6733      	str	r3, [r6, #112]	; 0x70
   1c232:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   1c236:	f886 1074 	strb.w	r1, [r6, #116]	; 0x74
   1c23a:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
   1c23e:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
   1c242:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   1c246:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   1c24a:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   1c24e:	67f1      	str	r1, [r6, #124]	; 0x7c
   1c250:	f886 2080 	strb.w	r2, [r6, #128]	; 0x80
   1c254:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   1c258:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   1c25c:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
   1c260:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   1c264:	f886 1084 	strb.w	r1, [r6, #132]	; 0x84
   1c268:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
   1c26c:	f886 308c 	strb.w	r3, [r6, #140]	; 0x8c
   1c270:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   1c274:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1c276:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   1c27a:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   1c27e:	f3c3 210f 	ubfx	r1, r3, #8, #16
   1c282:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1c284:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   1c288:	f8a6 1092 	strh.w	r1, [r6, #146]	; 0x92
   1c28c:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   1c290:	f8a6 209e 	strh.w	r2, [r6, #158]	; 0x9e
   1c294:	f3c3 230f 	ubfx	r3, r3, #8, #16
   1c298:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   1c29c:	f8a6 008e 	strh.w	r0, [r6, #142]	; 0x8e
   1c2a0:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
   1c2a4:	f886 1090 	strb.w	r1, [r6, #144]	; 0x90
   1c2a8:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   1c2ac:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   1c2b0:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
   1c2b4:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   1c2b8:	f886 3098 	strb.w	r3, [r6, #152]	; 0x98
   1c2bc:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   1c2c0:	f8a6 109a 	strh.w	r1, [r6, #154]	; 0x9a
   1c2c4:	f886 209c 	strb.w	r2, [r6, #156]	; 0x9c
   1c2c8:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   1c2cc:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   1c2d0:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
   1c2d4:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   1c2d8:	f886 10a4 	strb.w	r1, [r6, #164]	; 0xa4
   1c2dc:	f8a6 20a6 	strh.w	r2, [r6, #166]	; 0xa6
   1c2e0:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   1c2e4:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   1c2e8:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   1c2ec:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   1c2f0:	f8c6 10ac 	str.w	r1, [r6, #172]	; 0xac
   1c2f4:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
   1c2f8:	f8a6 30b2 	strh.w	r3, [r6, #178]	; 0xb2
   1c2fc:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   1c300:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   1c304:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   1c308:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   1c30a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1c30e:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   1c312:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   1c316:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1c31a:	f3c2 220f 	ubfx	r2, r2, #8, #16
   1c31e:	f8a6 10b6 	strh.w	r1, [r6, #182]	; 0xb6
   1c322:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
   1c326:	f886 40b4 	strb.w	r4, [r6, #180]	; 0xb4
   1c32a:	f8a6 20c2 	strh.w	r2, [r6, #194]	; 0xc2
   1c32e:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   1c332:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   1c336:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   1c33a:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   1c33e:	f886 10bc 	strb.w	r1, [r6, #188]	; 0xbc
   1c342:	f8a6 20be 	strh.w	r2, [r6, #190]	; 0xbe
   1c346:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
   1c34a:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
   1c34e:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   1c352:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   1c356:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   1c35a:	f8c6 10c4 	str.w	r1, [r6, #196]	; 0xc4
   1c35e:	f886 20c8 	strb.w	r2, [r6, #200]	; 0xc8
   1c362:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   1c366:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   1c36a:	f8a6 30ca 	strh.w	r3, [r6, #202]	; 0xca
   1c36e:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   1c372:	f886 10cc 	strb.w	r1, [r6, #204]	; 0xcc
   1c376:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
   1c37a:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
   1c37e:	24d8      	movs	r4, #216	; 0xd8
   1c380:	e68b      	b.n	1c09a <gnss_interface_read+0x102>
   1c382:	2039      	movs	r0, #57	; 0x39
   1c384:	f7f9 f9cc 	bl	15720 <bsd_os_errno_set>
   1c388:	f04f 34ff 	mov.w	r4, #4294967295
   1c38c:	e64b      	b.n	1c026 <gnss_interface_read+0x8e>
   1c38e:	2016      	movs	r0, #22
   1c390:	f7f9 f9c6 	bl	15720 <bsd_os_errno_set>
   1c394:	f04f 34ff 	mov.w	r4, #4294967295
   1c398:	e645      	b.n	1c026 <gnss_interface_read+0x8e>
   1c39a:	2009      	movs	r0, #9
   1c39c:	f7f9 f9c0 	bl	15720 <bsd_os_errno_set>
   1c3a0:	f04f 34ff 	mov.w	r4, #4294967295
   1c3a4:	e63f      	b.n	1c026 <gnss_interface_read+0x8e>
   1c3a6:	bf00      	nop

0001c3a8 <gnss_interface_setopt>:
   1c3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c3ac:	4db9      	ldr	r5, [pc, #740]	; (1c694 <gnss_interface_setopt+0x2ec>)
   1c3ae:	b087      	sub	sp, #28
   1c3b0:	682c      	ldr	r4, [r5, #0]
   1c3b2:	4690      	mov	r8, r2
   1c3b4:	b2a4      	uxth	r4, r4
   1c3b6:	2c02      	cmp	r4, #2
   1c3b8:	d00c      	beq.n	1c3d4 <gnss_interface_setopt+0x2c>
   1c3ba:	2a08      	cmp	r2, #8
   1c3bc:	d00a      	beq.n	1c3d4 <gnss_interface_setopt+0x2c>
   1c3be:	3a0a      	subs	r2, #10
   1c3c0:	2a01      	cmp	r2, #1
   1c3c2:	d907      	bls.n	1c3d4 <gnss_interface_setopt+0x2c>
   1c3c4:	200e      	movs	r0, #14
   1c3c6:	f7f9 f9ab 	bl	15720 <bsd_os_errno_set>
   1c3ca:	f04f 30ff 	mov.w	r0, #4294967295
   1c3ce:	b007      	add	sp, #28
   1c3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c3d4:	682a      	ldr	r2, [r5, #0]
   1c3d6:	0252      	lsls	r2, r2, #9
   1c3d8:	f100 8155 	bmi.w	1c686 <gnss_interface_setopt+0x2de>
   1c3dc:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1c3e0:	f040 8145 	bne.w	1c66e <gnss_interface_setopt+0x2c6>
   1c3e4:	4aac      	ldr	r2, [pc, #688]	; (1c698 <gnss_interface_setopt+0x2f0>)
   1c3e6:	4290      	cmp	r0, r2
   1c3e8:	f040 8147 	bne.w	1c67a <gnss_interface_setopt+0x2d2>
   1c3ec:	f1a8 020a 	sub.w	r2, r8, #10
   1c3f0:	2a01      	cmp	r2, #1
   1c3f2:	d902      	bls.n	1c3fa <gnss_interface_setopt+0x52>
   1c3f4:	2b00      	cmp	r3, #0
   1c3f6:	f000 811e 	beq.w	1c636 <gnss_interface_setopt+0x28e>
   1c3fa:	f108 32ff 	add.w	r2, r8, #4294967295
   1c3fe:	2a0a      	cmp	r2, #10
   1c400:	f200 8119 	bhi.w	1c636 <gnss_interface_setopt+0x28e>
   1c404:	e8df f012 	tbh	[pc, r2, lsl #1]
   1c408:	00950088 	.word	0x00950088
   1c40c:	00ab00a1 	.word	0x00ab00a1
   1c410:	00c200b7 	.word	0x00c200b7
   1c414:	00e600ce 	.word	0x00e600ce
   1c418:	010800fc 	.word	0x010800fc
   1c41c:	000b      	.short	0x000b
   1c41e:	682b      	ldr	r3, [r5, #0]
   1c420:	b29b      	uxth	r3, r3
   1c422:	2b04      	cmp	r3, #4
   1c424:	d1ce      	bne.n	1c3c4 <gnss_interface_setopt+0x1c>
   1c426:	2203      	movs	r2, #3
   1c428:	f241 0604 	movw	r6, #4100	; 0x1004
   1c42c:	2300      	movs	r3, #0
   1c42e:	4637      	mov	r7, r6
   1c430:	f88d 2008 	strb.w	r2, [sp, #8]
   1c434:	f88d 3009 	strb.w	r3, [sp, #9]
   1c438:	f88d 300a 	strb.w	r3, [sp, #10]
   1c43c:	f88d 300b 	strb.w	r3, [sp, #11]
   1c440:	f88d 300c 	strb.w	r3, [sp, #12]
   1c444:	682b      	ldr	r3, [r5, #0]
   1c446:	2112      	movs	r1, #18
   1c448:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1c44c:	4668      	mov	r0, sp
   1c44e:	602b      	str	r3, [r5, #0]
   1c450:	f002 fb12 	bl	1ea78 <rpc_gnss_client_request_alloc>
   1c454:	4604      	mov	r4, r0
   1c456:	9800      	ldr	r0, [sp, #0]
   1c458:	2c00      	cmp	r4, #0
   1c45a:	f040 80f2 	bne.w	1c642 <gnss_interface_setopt+0x29a>
   1c45e:	2800      	cmp	r0, #0
   1c460:	f000 80f6 	beq.w	1c650 <gnss_interface_setopt+0x2a8>
   1c464:	2212      	movs	r2, #18
   1c466:	f04f 0976 	mov.w	r9, #118	; 0x76
   1c46a:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1c46e:	f04f 0b43 	mov.w	fp, #67	; 0x43
   1c472:	f04f 0a54 	mov.w	sl, #84	; 0x54
   1c476:	f8df c22c 	ldr.w	ip, [pc, #556]	; 1c6a4 <gnss_interface_setopt+0x2fc>
   1c47a:	a906      	add	r1, sp, #24
   1c47c:	f8bc 3000 	ldrh.w	r3, [ip]
   1c480:	f880 900e 	strb.w	r9, [r0, #14]
   1c484:	3301      	adds	r3, #1
   1c486:	b29b      	uxth	r3, r3
   1c488:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   1c48c:	f841 6d14 	str.w	r6, [r1, #-20]!
   1c490:	7144      	strb	r4, [r0, #5]
   1c492:	7184      	strb	r4, [r0, #6]
   1c494:	71c4      	strb	r4, [r0, #7]
   1c496:	7204      	strb	r4, [r0, #8]
   1c498:	7244      	strb	r4, [r0, #9]
   1c49a:	7284      	strb	r4, [r0, #10]
   1c49c:	72c4      	strb	r4, [r0, #11]
   1c49e:	7102      	strb	r2, [r0, #4]
   1c4a0:	f880 b00c 	strb.w	fp, [r0, #12]
   1c4a4:	f880 a00d 	strb.w	sl, [r0, #13]
   1c4a8:	f880 e00f 	strb.w	lr, [r0, #15]
   1c4ac:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 1c6a8 <gnss_interface_setopt+0x300>
   1c4b0:	6800      	ldr	r0, [r0, #0]
   1c4b2:	f8ac 3000 	strh.w	r3, [ip]
   1c4b6:	f7f0 fb5d 	bl	cb74 <memcpy>
   1c4ba:	4639      	mov	r1, r7
   1c4bc:	9800      	ldr	r0, [sp, #0]
   1c4be:	f8c9 4000 	str.w	r4, [r9]
   1c4c2:	f002 faed 	bl	1eaa0 <rpc_gnss_client_request_send>
   1c4c6:	2800      	cmp	r0, #0
   1c4c8:	f040 80c7 	bne.w	1c65a <gnss_interface_setopt+0x2b2>
   1c4cc:	4f73      	ldr	r7, [pc, #460]	; (1c69c <gnss_interface_setopt+0x2f4>)
   1c4ce:	4e72      	ldr	r6, [pc, #456]	; (1c698 <gnss_interface_setopt+0x2f0>)
   1c4d0:	4639      	mov	r1, r7
   1c4d2:	4630      	mov	r0, r6
   1c4d4:	f7f9 f86c 	bl	155b0 <bsd_os_timedwait>
   1c4d8:	682c      	ldr	r4, [r5, #0]
   1c4da:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   1c4de:	d1f7      	bne.n	1c4d0 <gnss_interface_setopt+0x128>
   1c4e0:	f8d9 0000 	ldr.w	r0, [r9]
   1c4e4:	b118      	cbz	r0, 1c4ee <gnss_interface_setopt+0x146>
   1c4e6:	f002 faf9 	bl	1eadc <rpc_gnss_client_data_free>
   1c4ea:	f8c9 4000 	str.w	r4, [r9]
   1c4ee:	682b      	ldr	r3, [r5, #0]
   1c4f0:	021b      	lsls	r3, r3, #8
   1c4f2:	f140 8098 	bpl.w	1c626 <gnss_interface_setopt+0x27e>
   1c4f6:	f1b8 0f08 	cmp.w	r8, #8
   1c4fa:	f040 809a 	bne.w	1c632 <gnss_interface_setopt+0x28a>
   1c4fe:	4b68      	ldr	r3, [pc, #416]	; (1c6a0 <gnss_interface_setopt+0x2f8>)
   1c500:	6818      	ldr	r0, [r3, #0]
   1c502:	6803      	ldr	r3, [r0, #0]
   1c504:	691b      	ldr	r3, [r3, #16]
   1c506:	4798      	blx	r3
   1c508:	2000      	movs	r0, #0
   1c50a:	682b      	ldr	r3, [r5, #0]
   1c50c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1c510:	602b      	str	r3, [r5, #0]
   1c512:	b007      	add	sp, #28
   1c514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c518:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c51a:	2a02      	cmp	r2, #2
   1c51c:	f040 808b 	bne.w	1c636 <gnss_interface_setopt+0x28e>
   1c520:	2208      	movs	r2, #8
   1c522:	f241 1603 	movw	r6, #4355	; 0x1103
   1c526:	881b      	ldrh	r3, [r3, #0]
   1c528:	9202      	str	r2, [sp, #8]
   1c52a:	f8ad 300f 	strh.w	r3, [sp, #15]
   1c52e:	4637      	mov	r7, r6
   1c530:	e788      	b.n	1c444 <gnss_interface_setopt+0x9c>
   1c532:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c534:	2a02      	cmp	r2, #2
   1c536:	d17e      	bne.n	1c636 <gnss_interface_setopt+0x28e>
   1c538:	2210      	movs	r2, #16
   1c53a:	f241 1603 	movw	r6, #4355	; 0x1103
   1c53e:	881b      	ldrh	r3, [r3, #0]
   1c540:	9202      	str	r2, [sp, #8]
   1c542:	f8ad 3011 	strh.w	r3, [sp, #17]
   1c546:	4637      	mov	r7, r6
   1c548:	e77c      	b.n	1c444 <gnss_interface_setopt+0x9c>
   1c54a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c54c:	2a01      	cmp	r2, #1
   1c54e:	d172      	bne.n	1c636 <gnss_interface_setopt+0x28e>
   1c550:	781b      	ldrb	r3, [r3, #0]
   1c552:	2b01      	cmp	r3, #1
   1c554:	d16f      	bne.n	1c636 <gnss_interface_setopt+0x28e>
   1c556:	f241 1603 	movw	r6, #4355	; 0x1103
   1c55a:	4637      	mov	r7, r6
   1c55c:	e772      	b.n	1c444 <gnss_interface_setopt+0x9c>
   1c55e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c560:	2a02      	cmp	r2, #2
   1c562:	d168      	bne.n	1c636 <gnss_interface_setopt+0x28e>
   1c564:	2220      	movs	r2, #32
   1c566:	f241 1603 	movw	r6, #4355	; 0x1103
   1c56a:	881b      	ldrh	r3, [r3, #0]
   1c56c:	9202      	str	r2, [sp, #8]
   1c56e:	f8ad 3013 	strh.w	r3, [sp, #19]
   1c572:	4637      	mov	r7, r6
   1c574:	e766      	b.n	1c444 <gnss_interface_setopt+0x9c>
   1c576:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c578:	2a01      	cmp	r2, #1
   1c57a:	d15c      	bne.n	1c636 <gnss_interface_setopt+0x28e>
   1c57c:	f241 1603 	movw	r6, #4355	; 0x1103
   1c580:	781b      	ldrb	r3, [r3, #0]
   1c582:	9202      	str	r2, [sp, #8]
   1c584:	f88d 300c 	strb.w	r3, [sp, #12]
   1c588:	4637      	mov	r7, r6
   1c58a:	e75b      	b.n	1c444 <gnss_interface_setopt+0x9c>
   1c58c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c58e:	2a01      	cmp	r2, #1
   1c590:	d151      	bne.n	1c636 <gnss_interface_setopt+0x28e>
   1c592:	2202      	movs	r2, #2
   1c594:	f241 1603 	movw	r6, #4355	; 0x1103
   1c598:	781b      	ldrb	r3, [r3, #0]
   1c59a:	9202      	str	r2, [sp, #8]
   1c59c:	f88d 300d 	strb.w	r3, [sp, #13]
   1c5a0:	4637      	mov	r7, r6
   1c5a2:	e74f      	b.n	1c444 <gnss_interface_setopt+0x9c>
   1c5a4:	682a      	ldr	r2, [r5, #0]
   1c5a6:	b292      	uxth	r2, r2
   1c5a8:	2a02      	cmp	r2, #2
   1c5aa:	f47f af0b 	bne.w	1c3c4 <gnss_interface_setopt+0x1c>
   1c5ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c5b0:	2a04      	cmp	r2, #4
   1c5b2:	d140      	bne.n	1c636 <gnss_interface_setopt+0x28e>
   1c5b4:	2101      	movs	r1, #1
   1c5b6:	f241 0604 	movw	r6, #4100	; 0x1004
   1c5ba:	682a      	ldr	r2, [r5, #0]
   1c5bc:	6818      	ldr	r0, [r3, #0]
   1c5be:	0c13      	lsrs	r3, r2, #16
   1c5c0:	041b      	lsls	r3, r3, #16
   1c5c2:	f043 0303 	orr.w	r3, r3, #3
   1c5c6:	f8cd 0009 	str.w	r0, [sp, #9]
   1c5ca:	602b      	str	r3, [r5, #0]
   1c5cc:	f88d 1008 	strb.w	r1, [sp, #8]
   1c5d0:	4637      	mov	r7, r6
   1c5d2:	e737      	b.n	1c444 <gnss_interface_setopt+0x9c>
   1c5d4:	682a      	ldr	r2, [r5, #0]
   1c5d6:	b292      	uxth	r2, r2
   1c5d8:	2a04      	cmp	r2, #4
   1c5da:	d004      	beq.n	1c5e6 <gnss_interface_setopt+0x23e>
   1c5dc:	682a      	ldr	r2, [r5, #0]
   1c5de:	b292      	uxth	r2, r2
   1c5e0:	2a02      	cmp	r2, #2
   1c5e2:	f47f aeef 	bne.w	1c3c4 <gnss_interface_setopt+0x1c>
   1c5e6:	2200      	movs	r2, #0
   1c5e8:	f88d 2008 	strb.w	r2, [sp, #8]
   1c5ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c5ee:	2a04      	cmp	r2, #4
   1c5f0:	d121      	bne.n	1c636 <gnss_interface_setopt+0x28e>
   1c5f2:	f241 0604 	movw	r6, #4100	; 0x1004
   1c5f6:	681b      	ldr	r3, [r3, #0]
   1c5f8:	4637      	mov	r7, r6
   1c5fa:	f8cd 3009 	str.w	r3, [sp, #9]
   1c5fe:	e721      	b.n	1c444 <gnss_interface_setopt+0x9c>
   1c600:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c602:	2a01      	cmp	r2, #1
   1c604:	d117      	bne.n	1c636 <gnss_interface_setopt+0x28e>
   1c606:	2240      	movs	r2, #64	; 0x40
   1c608:	f241 1603 	movw	r6, #4355	; 0x1103
   1c60c:	781b      	ldrb	r3, [r3, #0]
   1c60e:	9202      	str	r2, [sp, #8]
   1c610:	f88d 3015 	strb.w	r3, [sp, #21]
   1c614:	4637      	mov	r7, r6
   1c616:	e715      	b.n	1c444 <gnss_interface_setopt+0x9c>
   1c618:	682b      	ldr	r3, [r5, #0]
   1c61a:	b29b      	uxth	r3, r3
   1c61c:	2b04      	cmp	r3, #4
   1c61e:	f47f aed1 	bne.w	1c3c4 <gnss_interface_setopt+0x1c>
   1c622:	2202      	movs	r2, #2
   1c624:	e700      	b.n	1c428 <gnss_interface_setopt+0x80>
   1c626:	200e      	movs	r0, #14
   1c628:	f7f9 f87a 	bl	15720 <bsd_os_errno_set>
   1c62c:	f04f 30ff 	mov.w	r0, #4294967295
   1c630:	e76b      	b.n	1c50a <gnss_interface_setopt+0x162>
   1c632:	2000      	movs	r0, #0
   1c634:	e769      	b.n	1c50a <gnss_interface_setopt+0x162>
   1c636:	2016      	movs	r0, #22
   1c638:	f7f9 f872 	bl	15720 <bsd_os_errno_set>
   1c63c:	f04f 30ff 	mov.w	r0, #4294967295
   1c640:	e6c5      	b.n	1c3ce <gnss_interface_setopt+0x26>
   1c642:	b128      	cbz	r0, 1c650 <gnss_interface_setopt+0x2a8>
   1c644:	6803      	ldr	r3, [r0, #0]
   1c646:	b11b      	cbz	r3, 1c650 <gnss_interface_setopt+0x2a8>
   1c648:	4618      	mov	r0, r3
   1c64a:	f002 fa47 	bl	1eadc <rpc_gnss_client_data_free>
   1c64e:	9800      	ldr	r0, [sp, #0]
   1c650:	f002 fa3c 	bl	1eacc <rpc_gnss_client_message_free>
   1c654:	2023      	movs	r0, #35	; 0x23
   1c656:	f7f9 f863 	bl	15720 <bsd_os_errno_set>
   1c65a:	682b      	ldr	r3, [r5, #0]
   1c65c:	200e      	movs	r0, #14
   1c65e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1c662:	602b      	str	r3, [r5, #0]
   1c664:	f7f9 f85c 	bl	15720 <bsd_os_errno_set>
   1c668:	f04f 30ff 	mov.w	r0, #4294967295
   1c66c:	e6af      	b.n	1c3ce <gnss_interface_setopt+0x26>
   1c66e:	202a      	movs	r0, #42	; 0x2a
   1c670:	f7f9 f856 	bl	15720 <bsd_os_errno_set>
   1c674:	f04f 30ff 	mov.w	r0, #4294967295
   1c678:	e6a9      	b.n	1c3ce <gnss_interface_setopt+0x26>
   1c67a:	2009      	movs	r0, #9
   1c67c:	f7f9 f850 	bl	15720 <bsd_os_errno_set>
   1c680:	f04f 30ff 	mov.w	r0, #4294967295
   1c684:	e6a3      	b.n	1c3ce <gnss_interface_setopt+0x26>
   1c686:	2073      	movs	r0, #115	; 0x73
   1c688:	f7f9 f84a 	bl	15720 <bsd_os_errno_set>
   1c68c:	f04f 30ff 	mov.w	r0, #4294967295
   1c690:	e69d      	b.n	1c3ce <gnss_interface_setopt+0x26>
   1c692:	bf00      	nop
   1c694:	20021a70 	.word	0x20021a70
   1c698:	49765443 	.word	0x49765443
   1c69c:	200204c4 	.word	0x200204c4
   1c6a0:	20021a78 	.word	0x20021a78
   1c6a4:	20023046 	.word	0x20023046
   1c6a8:	20021a74 	.word	0x20021a74

0001c6ac <gnss_interface_getopt>:
   1c6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c6b0:	4c81      	ldr	r4, [pc, #516]	; (1c8b8 <gnss_interface_getopt+0x20c>)
   1c6b2:	b087      	sub	sp, #28
   1c6b4:	6825      	ldr	r5, [r4, #0]
   1c6b6:	4698      	mov	r8, r3
   1c6b8:	b2ad      	uxth	r5, r5
   1c6ba:	2d02      	cmp	r5, #2
   1c6bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1c6be:	f040 80dd 	bne.w	1c87c <gnss_interface_getopt+0x1d0>
   1c6c2:	6825      	ldr	r5, [r4, #0]
   1c6c4:	03ee      	lsls	r6, r5, #15
   1c6c6:	f100 80eb 	bmi.w	1c8a0 <gnss_interface_getopt+0x1f4>
   1c6ca:	6825      	ldr	r5, [r4, #0]
   1c6cc:	01ed      	lsls	r5, r5, #7
   1c6ce:	f100 80ed 	bmi.w	1c8ac <gnss_interface_getopt+0x200>
   1c6d2:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1c6d6:	f040 80d7 	bne.w	1c888 <gnss_interface_getopt+0x1dc>
   1c6da:	4978      	ldr	r1, [pc, #480]	; (1c8bc <gnss_interface_getopt+0x210>)
   1c6dc:	4288      	cmp	r0, r1
   1c6de:	f040 80d9 	bne.w	1c894 <gnss_interface_getopt+0x1e8>
   1c6e2:	f1b8 0f00 	cmp.w	r8, #0
   1c6e6:	d00b      	beq.n	1c700 <gnss_interface_getopt+0x54>
   1c6e8:	b153      	cbz	r3, 1c700 <gnss_interface_getopt+0x54>
   1c6ea:	1e57      	subs	r7, r2, #1
   1c6ec:	2f05      	cmp	r7, #5
   1c6ee:	d807      	bhi.n	1c700 <gnss_interface_getopt+0x54>
   1c6f0:	e8df f007 	tbb	[pc, r7]
   1c6f4:	0f030f0f 	.word	0x0f030f0f
   1c6f8:	0303      	.short	0x0303
   1c6fa:	681b      	ldr	r3, [r3, #0]
   1c6fc:	2b01      	cmp	r3, #1
   1c6fe:	d00b      	beq.n	1c718 <gnss_interface_getopt+0x6c>
   1c700:	2016      	movs	r0, #22
   1c702:	f7f9 f80d 	bl	15720 <bsd_os_errno_set>
   1c706:	f04f 35ff 	mov.w	r5, #4294967295
   1c70a:	4628      	mov	r0, r5
   1c70c:	b007      	add	sp, #28
   1c70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c712:	681b      	ldr	r3, [r3, #0]
   1c714:	2b02      	cmp	r3, #2
   1c716:	d1f3      	bne.n	1c700 <gnss_interface_getopt+0x54>
   1c718:	6823      	ldr	r3, [r4, #0]
   1c71a:	2212      	movs	r2, #18
   1c71c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1c720:	2100      	movs	r1, #0
   1c722:	a801      	add	r0, sp, #4
   1c724:	6023      	str	r3, [r4, #0]
   1c726:	f005 fd91 	bl	2224c <memset>
   1c72a:	2112      	movs	r1, #18
   1c72c:	4668      	mov	r0, sp
   1c72e:	f002 f9a3 	bl	1ea78 <rpc_gnss_client_request_alloc>
   1c732:	4605      	mov	r5, r0
   1c734:	9800      	ldr	r0, [sp, #0]
   1c736:	2d00      	cmp	r5, #0
   1c738:	f040 808a 	bne.w	1c850 <gnss_interface_getopt+0x1a4>
   1c73c:	2800      	cmp	r0, #0
   1c73e:	f000 808e 	beq.w	1c85e <gnss_interface_getopt+0x1b2>
   1c742:	f241 1602 	movw	r6, #4354	; 0x1102
   1c746:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1c74a:	2212      	movs	r2, #18
   1c74c:	f04f 0976 	mov.w	r9, #118	; 0x76
   1c750:	f04f 0b43 	mov.w	fp, #67	; 0x43
   1c754:	f04f 0a54 	mov.w	sl, #84	; 0x54
   1c758:	f8df c168 	ldr.w	ip, [pc, #360]	; 1c8c4 <gnss_interface_getopt+0x218>
   1c75c:	f880 e00f 	strb.w	lr, [r0, #15]
   1c760:	f8bc 3000 	ldrh.w	r3, [ip]
   1c764:	f880 900e 	strb.w	r9, [r0, #14]
   1c768:	3301      	adds	r3, #1
   1c76a:	b29b      	uxth	r3, r3
   1c76c:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   1c770:	f8cd e004 	str.w	lr, [sp, #4]
   1c774:	7145      	strb	r5, [r0, #5]
   1c776:	7185      	strb	r5, [r0, #6]
   1c778:	71c5      	strb	r5, [r0, #7]
   1c77a:	7205      	strb	r5, [r0, #8]
   1c77c:	7245      	strb	r5, [r0, #9]
   1c77e:	7285      	strb	r5, [r0, #10]
   1c780:	72c5      	strb	r5, [r0, #11]
   1c782:	a901      	add	r1, sp, #4
   1c784:	7102      	strb	r2, [r0, #4]
   1c786:	f880 b00c 	strb.w	fp, [r0, #12]
   1c78a:	f880 a00d 	strb.w	sl, [r0, #13]
   1c78e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 1c8c8 <gnss_interface_getopt+0x21c>
   1c792:	6800      	ldr	r0, [r0, #0]
   1c794:	f8ac 3000 	strh.w	r3, [ip]
   1c798:	f7f0 f9ec 	bl	cb74 <memcpy>
   1c79c:	4631      	mov	r1, r6
   1c79e:	9800      	ldr	r0, [sp, #0]
   1c7a0:	f8c9 5000 	str.w	r5, [r9]
   1c7a4:	f002 f97c 	bl	1eaa0 <rpc_gnss_client_request_send>
   1c7a8:	2800      	cmp	r0, #0
   1c7aa:	d15d      	bne.n	1c868 <gnss_interface_getopt+0x1bc>
   1c7ac:	4e44      	ldr	r6, [pc, #272]	; (1c8c0 <gnss_interface_getopt+0x214>)
   1c7ae:	4d43      	ldr	r5, [pc, #268]	; (1c8bc <gnss_interface_getopt+0x210>)
   1c7b0:	4631      	mov	r1, r6
   1c7b2:	4628      	mov	r0, r5
   1c7b4:	f7f8 fefc 	bl	155b0 <bsd_os_timedwait>
   1c7b8:	6823      	ldr	r3, [r4, #0]
   1c7ba:	01db      	lsls	r3, r3, #7
   1c7bc:	d4f8      	bmi.n	1c7b0 <gnss_interface_getopt+0x104>
   1c7be:	f8d9 0000 	ldr.w	r0, [r9]
   1c7c2:	b1d8      	cbz	r0, 1c7fc <gnss_interface_getopt+0x150>
   1c7c4:	6825      	ldr	r5, [r4, #0]
   1c7c6:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   1c7ca:	d00f      	beq.n	1c7ec <gnss_interface_getopt+0x140>
   1c7cc:	2f05      	cmp	r7, #5
   1c7ce:	d837      	bhi.n	1c840 <gnss_interface_getopt+0x194>
   1c7d0:	e8df f007 	tbb	[pc, r7]
   1c7d4:	2b26201a 	.word	0x2b26201a
   1c7d8:	0331      	.short	0x0331
   1c7da:	2500      	movs	r5, #0
   1c7dc:	7b43      	ldrb	r3, [r0, #13]
   1c7de:	f888 3000 	strb.w	r3, [r8]
   1c7e2:	f002 f97b 	bl	1eadc <rpc_gnss_client_data_free>
   1c7e6:	2300      	movs	r3, #0
   1c7e8:	f8c9 3000 	str.w	r3, [r9]
   1c7ec:	6823      	ldr	r3, [r4, #0]
   1c7ee:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1c7f2:	6023      	str	r3, [r4, #0]
   1c7f4:	4628      	mov	r0, r5
   1c7f6:	b007      	add	sp, #28
   1c7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c7fc:	6823      	ldr	r3, [r4, #0]
   1c7fe:	4605      	mov	r5, r0
   1c800:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1c804:	6023      	str	r3, [r4, #0]
   1c806:	e7f5      	b.n	1c7f4 <gnss_interface_getopt+0x148>
   1c808:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   1c80c:	2500      	movs	r5, #0
   1c80e:	f8a8 3000 	strh.w	r3, [r8]
   1c812:	e7e6      	b.n	1c7e2 <gnss_interface_getopt+0x136>
   1c814:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   1c818:	2500      	movs	r5, #0
   1c81a:	f8a8 3000 	strh.w	r3, [r8]
   1c81e:	e7e0      	b.n	1c7e2 <gnss_interface_getopt+0x136>
   1c820:	7b83      	ldrb	r3, [r0, #14]
   1c822:	2500      	movs	r5, #0
   1c824:	f888 3000 	strb.w	r3, [r8]
   1c828:	e7db      	b.n	1c7e2 <gnss_interface_getopt+0x136>
   1c82a:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   1c82e:	2500      	movs	r5, #0
   1c830:	f8a8 3000 	strh.w	r3, [r8]
   1c834:	e7d5      	b.n	1c7e2 <gnss_interface_getopt+0x136>
   1c836:	7b03      	ldrb	r3, [r0, #12]
   1c838:	2500      	movs	r5, #0
   1c83a:	f888 3000 	strb.w	r3, [r8]
   1c83e:	e7d0      	b.n	1c7e2 <gnss_interface_getopt+0x136>
   1c840:	2016      	movs	r0, #22
   1c842:	f7f8 ff6d 	bl	15720 <bsd_os_errno_set>
   1c846:	f04f 35ff 	mov.w	r5, #4294967295
   1c84a:	f8d9 0000 	ldr.w	r0, [r9]
   1c84e:	e7c8      	b.n	1c7e2 <gnss_interface_getopt+0x136>
   1c850:	b128      	cbz	r0, 1c85e <gnss_interface_getopt+0x1b2>
   1c852:	6803      	ldr	r3, [r0, #0]
   1c854:	b11b      	cbz	r3, 1c85e <gnss_interface_getopt+0x1b2>
   1c856:	4618      	mov	r0, r3
   1c858:	f002 f940 	bl	1eadc <rpc_gnss_client_data_free>
   1c85c:	9800      	ldr	r0, [sp, #0]
   1c85e:	f002 f935 	bl	1eacc <rpc_gnss_client_message_free>
   1c862:	2023      	movs	r0, #35	; 0x23
   1c864:	f7f8 ff5c 	bl	15720 <bsd_os_errno_set>
   1c868:	6823      	ldr	r3, [r4, #0]
   1c86a:	200e      	movs	r0, #14
   1c86c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1c870:	6023      	str	r3, [r4, #0]
   1c872:	f04f 35ff 	mov.w	r5, #4294967295
   1c876:	f7f8 ff53 	bl	15720 <bsd_os_errno_set>
   1c87a:	e746      	b.n	1c70a <gnss_interface_getopt+0x5e>
   1c87c:	200e      	movs	r0, #14
   1c87e:	f7f8 ff4f 	bl	15720 <bsd_os_errno_set>
   1c882:	f04f 35ff 	mov.w	r5, #4294967295
   1c886:	e740      	b.n	1c70a <gnss_interface_getopt+0x5e>
   1c888:	202a      	movs	r0, #42	; 0x2a
   1c88a:	f7f8 ff49 	bl	15720 <bsd_os_errno_set>
   1c88e:	f04f 35ff 	mov.w	r5, #4294967295
   1c892:	e73a      	b.n	1c70a <gnss_interface_getopt+0x5e>
   1c894:	2009      	movs	r0, #9
   1c896:	f7f8 ff43 	bl	15720 <bsd_os_errno_set>
   1c89a:	f04f 35ff 	mov.w	r5, #4294967295
   1c89e:	e734      	b.n	1c70a <gnss_interface_getopt+0x5e>
   1c8a0:	2005      	movs	r0, #5
   1c8a2:	f7f8 ff3d 	bl	15720 <bsd_os_errno_set>
   1c8a6:	f04f 35ff 	mov.w	r5, #4294967295
   1c8aa:	e72e      	b.n	1c70a <gnss_interface_getopt+0x5e>
   1c8ac:	2073      	movs	r0, #115	; 0x73
   1c8ae:	f7f8 ff37 	bl	15720 <bsd_os_errno_set>
   1c8b2:	f04f 35ff 	mov.w	r5, #4294967295
   1c8b6:	e728      	b.n	1c70a <gnss_interface_getopt+0x5e>
   1c8b8:	20021a70 	.word	0x20021a70
   1c8bc:	49765443 	.word	0x49765443
   1c8c0:	200204c4 	.word	0x200204c4
   1c8c4:	20023046 	.word	0x20023046
   1c8c8:	20021a74 	.word	0x20021a74

0001c8cc <gnss_interface_init>:
   1c8cc:	2100      	movs	r1, #0
   1c8ce:	b538      	push	{r3, r4, r5, lr}
   1c8d0:	4c0a      	ldr	r4, [pc, #40]	; (1c8fc <gnss_interface_init+0x30>)
   1c8d2:	4d0b      	ldr	r5, [pc, #44]	; (1c900 <gnss_interface_init+0x34>)
   1c8d4:	6822      	ldr	r2, [r4, #0]
   1c8d6:	480b      	ldr	r0, [pc, #44]	; (1c904 <gnss_interface_init+0x38>)
   1c8d8:	4b0b      	ldr	r3, [pc, #44]	; (1c908 <gnss_interface_init+0x3c>)
   1c8da:	402a      	ands	r2, r5
   1c8dc:	6022      	str	r2, [r4, #0]
   1c8de:	8001      	strh	r1, [r0, #0]
   1c8e0:	6019      	str	r1, [r3, #0]
   1c8e2:	f002 f8c3 	bl	1ea6c <rpc_gnss_client_init>
   1c8e6:	b938      	cbnz	r0, 1c8f8 <gnss_interface_init+0x2c>
   1c8e8:	2101      	movs	r1, #1
   1c8ea:	6823      	ldr	r3, [r4, #0]
   1c8ec:	4a07      	ldr	r2, [pc, #28]	; (1c90c <gnss_interface_init+0x40>)
   1c8ee:	402b      	ands	r3, r5
   1c8f0:	430b      	orrs	r3, r1
   1c8f2:	7011      	strb	r1, [r2, #0]
   1c8f4:	6023      	str	r3, [r4, #0]
   1c8f6:	bd38      	pop	{r3, r4, r5, pc}
   1c8f8:	2003      	movs	r0, #3
   1c8fa:	bd38      	pop	{r3, r4, r5, pc}
   1c8fc:	20021a70 	.word	0x20021a70
   1c900:	ffff0000 	.word	0xffff0000
   1c904:	20023046 	.word	0x20023046
   1c908:	20021a74 	.word	0x20021a74
   1c90c:	20025018 	.word	0x20025018

0001c910 <gnss_interface_open>:
   1c910:	b510      	push	{r4, lr}
   1c912:	4b1c      	ldr	r3, [pc, #112]	; (1c984 <gnss_interface_open+0x74>)
   1c914:	781b      	ldrb	r3, [r3, #0]
   1c916:	b34b      	cbz	r3, 1c96c <gnss_interface_open+0x5c>
   1c918:	2902      	cmp	r1, #2
   1c91a:	d121      	bne.n	1c960 <gnss_interface_open+0x50>
   1c91c:	4c1a      	ldr	r4, [pc, #104]	; (1c988 <gnss_interface_open+0x78>)
   1c91e:	6823      	ldr	r3, [r4, #0]
   1c920:	b29b      	uxth	r3, r3
   1c922:	2b01      	cmp	r3, #1
   1c924:	d116      	bne.n	1c954 <gnss_interface_open+0x44>
   1c926:	6823      	ldr	r3, [r4, #0]
   1c928:	4608      	mov	r0, r1
   1c92a:	0c1b      	lsrs	r3, r3, #16
   1c92c:	041b      	lsls	r3, r3, #16
   1c92e:	f043 0302 	orr.w	r3, r3, #2
   1c932:	2200      	movs	r2, #0
   1c934:	4915      	ldr	r1, [pc, #84]	; (1c98c <gnss_interface_open+0x7c>)
   1c936:	6023      	str	r3, [r4, #0]
   1c938:	f002 f9ba 	bl	1ecb0 <packet_handler_create>
   1c93c:	4a14      	ldr	r2, [pc, #80]	; (1c990 <gnss_interface_open+0x80>)
   1c93e:	6010      	str	r0, [r2, #0]
   1c940:	b1d0      	cbz	r0, 1c978 <gnss_interface_open+0x68>
   1c942:	6823      	ldr	r3, [r4, #0]
   1c944:	6802      	ldr	r2, [r0, #0]
   1c946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1c94a:	6812      	ldr	r2, [r2, #0]
   1c94c:	6023      	str	r3, [r4, #0]
   1c94e:	4790      	blx	r2
   1c950:	4810      	ldr	r0, [pc, #64]	; (1c994 <gnss_interface_open+0x84>)
   1c952:	bd10      	pop	{r4, pc}
   1c954:	2005      	movs	r0, #5
   1c956:	f7f8 fee3 	bl	15720 <bsd_os_errno_set>
   1c95a:	f04f 30ff 	mov.w	r0, #4294967295
   1c95e:	bd10      	pop	{r4, pc}
   1c960:	2029      	movs	r0, #41	; 0x29
   1c962:	f7f8 fedd 	bl	15720 <bsd_os_errno_set>
   1c966:	f04f 30ff 	mov.w	r0, #4294967295
   1c96a:	bd10      	pop	{r4, pc}
   1c96c:	2070      	movs	r0, #112	; 0x70
   1c96e:	f7f8 fed7 	bl	15720 <bsd_os_errno_set>
   1c972:	f04f 30ff 	mov.w	r0, #4294967295
   1c976:	bd10      	pop	{r4, pc}
   1c978:	200e      	movs	r0, #14
   1c97a:	f7f8 fed1 	bl	15720 <bsd_os_errno_set>
   1c97e:	f04f 30ff 	mov.w	r0, #4294967295
   1c982:	bd10      	pop	{r4, pc}
   1c984:	20025018 	.word	0x20025018
   1c988:	20021a70 	.word	0x20021a70
   1c98c:	0001bbed 	.word	0x0001bbed
   1c990:	20021a78 	.word	0x20021a78
   1c994:	49765443 	.word	0x49765443

0001c998 <gnss_interface_close>:
   1c998:	b530      	push	{r4, r5, lr}
   1c99a:	4b15      	ldr	r3, [pc, #84]	; (1c9f0 <gnss_interface_close+0x58>)
   1c99c:	b085      	sub	sp, #20
   1c99e:	4298      	cmp	r0, r3
   1c9a0:	d11f      	bne.n	1c9e2 <gnss_interface_close+0x4a>
   1c9a2:	4c14      	ldr	r4, [pc, #80]	; (1c9f4 <gnss_interface_close+0x5c>)
   1c9a4:	6822      	ldr	r2, [r4, #0]
   1c9a6:	b292      	uxth	r2, r2
   1c9a8:	2a04      	cmp	r2, #4
   1c9aa:	d00f      	beq.n	1c9cc <gnss_interface_close+0x34>
   1c9ac:	4d12      	ldr	r5, [pc, #72]	; (1c9f8 <gnss_interface_close+0x60>)
   1c9ae:	6828      	ldr	r0, [r5, #0]
   1c9b0:	b118      	cbz	r0, 1c9ba <gnss_interface_close+0x22>
   1c9b2:	f002 f99d 	bl	1ecf0 <packet_handler_delete>
   1c9b6:	2300      	movs	r3, #0
   1c9b8:	602b      	str	r3, [r5, #0]
   1c9ba:	2000      	movs	r0, #0
   1c9bc:	6823      	ldr	r3, [r4, #0]
   1c9be:	0c1b      	lsrs	r3, r3, #16
   1c9c0:	041b      	lsls	r3, r3, #16
   1c9c2:	f043 0301 	orr.w	r3, r3, #1
   1c9c6:	6023      	str	r3, [r4, #0]
   1c9c8:	b005      	add	sp, #20
   1c9ca:	bd30      	pop	{r4, r5, pc}
   1c9cc:	2100      	movs	r1, #0
   1c9ce:	ab04      	add	r3, sp, #16
   1c9d0:	f843 1d04 	str.w	r1, [r3, #-4]!
   1c9d4:	9200      	str	r2, [sp, #0]
   1c9d6:	f44f 7101 	mov.w	r1, #516	; 0x204
   1c9da:	2208      	movs	r2, #8
   1c9dc:	f001 fec6 	bl	1e76c <nrf_setsockopt>
   1c9e0:	e7e4      	b.n	1c9ac <gnss_interface_close+0x14>
   1c9e2:	2009      	movs	r0, #9
   1c9e4:	f7f8 fe9c 	bl	15720 <bsd_os_errno_set>
   1c9e8:	f04f 30ff 	mov.w	r0, #4294967295
   1c9ec:	e7ec      	b.n	1c9c8 <gnss_interface_close+0x30>
   1c9ee:	bf00      	nop
   1c9f0:	49765443 	.word	0x49765443
   1c9f4:	20021a70 	.word	0x20021a70
   1c9f8:	20021a78 	.word	0x20021a78

0001c9fc <rpc_logobj_client_evt_handler>:
   1c9fc:	b120      	cbz	r0, 1ca08 <rpc_logobj_client_evt_handler+0xc>
   1c9fe:	f850 1b08 	ldr.w	r1, [r0], #8
   1ca02:	0c09      	lsrs	r1, r1, #16
   1ca04:	f7fb b94e 	b.w	17ca4 <logobj_event_handler>
   1ca08:	4770      	bx	lr
   1ca0a:	bf00      	nop

0001ca0c <rpc_logobj_client_init>:
   1ca0c:	4801      	ldr	r0, [pc, #4]	; (1ca14 <rpc_logobj_client_init+0x8>)
   1ca0e:	f7ff b82f 	b.w	1ba70 <rpc_client_register>
   1ca12:	bf00      	nop
   1ca14:	0002bc84 	.word	0x0002bc84

0001ca18 <rpc_logobj_client_request_alloc>:
   1ca18:	2300      	movs	r3, #0
   1ca1a:	b510      	push	{r4, lr}
   1ca1c:	b082      	sub	sp, #8
   1ca1e:	9301      	str	r3, [sp, #4]
   1ca20:	b961      	cbnz	r1, 1ca3c <rpc_logobj_client_request_alloc+0x24>
   1ca22:	b170      	cbz	r0, 1ca42 <rpc_logobj_client_request_alloc+0x2a>
   1ca24:	4604      	mov	r4, r0
   1ca26:	aa01      	add	r2, sp, #4
   1ca28:	2009      	movs	r0, #9
   1ca2a:	f7ff f89b 	bl	1bb64 <rpc_message_alloc>
   1ca2e:	b918      	cbnz	r0, 1ca38 <rpc_logobj_client_request_alloc+0x20>
   1ca30:	9b01      	ldr	r3, [sp, #4]
   1ca32:	b10b      	cbz	r3, 1ca38 <rpc_logobj_client_request_alloc+0x20>
   1ca34:	3308      	adds	r3, #8
   1ca36:	6023      	str	r3, [r4, #0]
   1ca38:	b002      	add	sp, #8
   1ca3a:	bd10      	pop	{r4, pc}
   1ca3c:	200f      	movs	r0, #15
   1ca3e:	b002      	add	sp, #8
   1ca40:	bd10      	pop	{r4, pc}
   1ca42:	200e      	movs	r0, #14
   1ca44:	b002      	add	sp, #8
   1ca46:	bd10      	pop	{r4, pc}

0001ca48 <rpc_logobj_client_request_send>:
   1ca48:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1ca4c:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   1ca50:	d10b      	bne.n	1ca6a <rpc_logobj_client_request_send+0x22>
   1ca52:	b160      	cbz	r0, 1ca6e <rpc_logobj_client_request_send+0x26>
   1ca54:	4603      	mov	r3, r0
   1ca56:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1ca5a:	2009      	movs	r0, #9
   1ca5c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1ca60:	f843 1d08 	str.w	r1, [r3, #-8]!
   1ca64:	4619      	mov	r1, r3
   1ca66:	f7ff b86d 	b.w	1bb44 <rpc_message_send>
   1ca6a:	200f      	movs	r0, #15
   1ca6c:	4770      	bx	lr
   1ca6e:	200e      	movs	r0, #14
   1ca70:	4770      	bx	lr
   1ca72:	bf00      	nop

0001ca74 <rpc_logobj_client_message_free>:
   1ca74:	b120      	cbz	r0, 1ca80 <rpc_logobj_client_message_free+0xc>
   1ca76:	f1a0 0108 	sub.w	r1, r0, #8
   1ca7a:	2009      	movs	r0, #9
   1ca7c:	f7ff b89e 	b.w	1bbbc <rpc_message_free>
   1ca80:	200e      	movs	r0, #14
   1ca82:	4770      	bx	lr

0001ca84 <rpc_logobj_client_data_free>:
   1ca84:	b118      	cbz	r0, 1ca8e <rpc_logobj_client_data_free+0xa>
   1ca86:	4601      	mov	r1, r0
   1ca88:	2009      	movs	r0, #9
   1ca8a:	f7ff b8a3 	b.w	1bbd4 <rpc_message_data_free>
   1ca8e:	200e      	movs	r0, #14
   1ca90:	4770      	bx	lr
   1ca92:	bf00      	nop

0001ca94 <dfu_client_event_handler>:
   1ca94:	f850 1b08 	ldr.w	r1, [r0], #8
   1ca98:	0c09      	lsrs	r1, r1, #16
   1ca9a:	f002 bedf 	b.w	1f85c <rpc_dfu_event_handler>
   1ca9e:	bf00      	nop

0001caa0 <rpc_dfu_client_init>:
   1caa0:	4801      	ldr	r0, [pc, #4]	; (1caa8 <rpc_dfu_client_init+0x8>)
   1caa2:	f7fe bfe5 	b.w	1ba70 <rpc_client_register>
   1caa6:	bf00      	nop
   1caa8:	0002bc94 	.word	0x0002bc94

0001caac <rpc_dfu_client_request_alloc>:
   1caac:	2300      	movs	r3, #0
   1caae:	b510      	push	{r4, lr}
   1cab0:	b082      	sub	sp, #8
   1cab2:	9301      	str	r3, [sp, #4]
   1cab4:	b158      	cbz	r0, 1cace <rpc_dfu_client_request_alloc+0x22>
   1cab6:	4604      	mov	r4, r0
   1cab8:	aa01      	add	r2, sp, #4
   1caba:	2006      	movs	r0, #6
   1cabc:	f7ff f852 	bl	1bb64 <rpc_message_alloc>
   1cac0:	b918      	cbnz	r0, 1caca <rpc_dfu_client_request_alloc+0x1e>
   1cac2:	9b01      	ldr	r3, [sp, #4]
   1cac4:	b10b      	cbz	r3, 1caca <rpc_dfu_client_request_alloc+0x1e>
   1cac6:	3308      	adds	r3, #8
   1cac8:	6023      	str	r3, [r4, #0]
   1caca:	b002      	add	sp, #8
   1cacc:	bd10      	pop	{r4, pc}
   1cace:	2007      	movs	r0, #7
   1cad0:	b002      	add	sp, #8
   1cad2:	bd10      	pop	{r4, pc}

0001cad4 <rpc_dfu_client_request_send>:
   1cad4:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   1cad8:	d10b      	bne.n	1caf2 <rpc_dfu_client_request_send+0x1e>
   1cada:	b160      	cbz	r0, 1caf6 <rpc_dfu_client_request_send+0x22>
   1cadc:	4603      	mov	r3, r0
   1cade:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1cae2:	2006      	movs	r0, #6
   1cae4:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1cae8:	f843 1d08 	str.w	r1, [r3, #-8]!
   1caec:	4619      	mov	r1, r3
   1caee:	f7ff b829 	b.w	1bb44 <rpc_message_send>
   1caf2:	200f      	movs	r0, #15
   1caf4:	4770      	bx	lr
   1caf6:	2007      	movs	r0, #7
   1caf8:	4770      	bx	lr
   1cafa:	bf00      	nop

0001cafc <rpc_dfu_client_message_free>:
   1cafc:	b120      	cbz	r0, 1cb08 <rpc_dfu_client_message_free+0xc>
   1cafe:	f1a0 0108 	sub.w	r1, r0, #8
   1cb02:	2006      	movs	r0, #6
   1cb04:	f7ff b85a 	b.w	1bbbc <rpc_message_free>
   1cb08:	2007      	movs	r0, #7
   1cb0a:	4770      	bx	lr

0001cb0c <rpc_dfu_client_data_free>:
   1cb0c:	b118      	cbz	r0, 1cb16 <rpc_dfu_client_data_free+0xa>
   1cb0e:	4601      	mov	r1, r0
   1cb10:	2006      	movs	r0, #6
   1cb12:	f7ff b85f 	b.w	1bbd4 <rpc_message_data_free>
   1cb16:	2007      	movs	r0, #7
   1cb18:	4770      	bx	lr
   1cb1a:	bf00      	nop

0001cb1c <packet_free_cb>:
   1cb1c:	6800      	ldr	r0, [r0, #0]
   1cb1e:	f003 bbf7 	b.w	20310 <rpc_at_client_data_free>
   1cb22:	bf00      	nop

0001cb24 <at_interface_write>:
   1cb24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cb28:	b083      	sub	sp, #12
   1cb2a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1cb2c:	2c00      	cmp	r4, #0
   1cb2e:	d16c      	bne.n	1cc0a <at_interface_write+0xe6>
   1cb30:	4688      	mov	r8, r1
   1cb32:	4615      	mov	r5, r2
   1cb34:	461e      	mov	r6, r3
   1cb36:	4607      	mov	r7, r0
   1cb38:	f003 fabc 	bl	200b4 <interface_socket_from_handle_get>
   1cb3c:	4604      	mov	r4, r0
   1cb3e:	2e00      	cmp	r6, #0
   1cb40:	d137      	bne.n	1cbb2 <at_interface_write+0x8e>
   1cb42:	2800      	cmp	r0, #0
   1cb44:	d067      	beq.n	1cc16 <at_interface_write+0xf2>
   1cb46:	6803      	ldr	r3, [r0, #0]
   1cb48:	039b      	lsls	r3, r3, #14
   1cb4a:	d564      	bpl.n	1cc16 <at_interface_write+0xf2>
   1cb4c:	6803      	ldr	r3, [r0, #0]
   1cb4e:	4629      	mov	r1, r5
   1cb50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1cb54:	6003      	str	r3, [r0, #0]
   1cb56:	6803      	ldr	r3, [r0, #0]
   1cb58:	4668      	mov	r0, sp
   1cb5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1cb5e:	6023      	str	r3, [r4, #0]
   1cb60:	f003 fbac 	bl	202bc <rpc_at_client_request_alloc>
   1cb64:	4606      	mov	r6, r0
   1cb66:	4638      	mov	r0, r7
   1cb68:	f003 faa4 	bl	200b4 <interface_socket_from_handle_get>
   1cb6c:	4681      	mov	r9, r0
   1cb6e:	bb56      	cbnz	r6, 1cbc6 <at_interface_write+0xa2>
   1cb70:	2304      	movs	r3, #4
   1cb72:	9800      	ldr	r0, [sp, #0]
   1cb74:	7203      	strb	r3, [r0, #8]
   1cb76:	7246      	strb	r6, [r0, #9]
   1cb78:	7286      	strb	r6, [r0, #10]
   1cb7a:	72c6      	strb	r6, [r0, #11]
   1cb7c:	60c7      	str	r7, [r0, #12]
   1cb7e:	bb25      	cbnz	r5, 1cbca <at_interface_write+0xa6>
   1cb80:	2101      	movs	r1, #1
   1cb82:	f003 fbaf 	bl	202e4 <rpc_at_client_request_send>
   1cb86:	bb78      	cbnz	r0, 1cbe8 <at_interface_write+0xc4>
   1cb88:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
   1cb8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1cb90:	2900      	cmp	r1, #0
   1cb92:	bf08      	it	eq
   1cb94:	f04f 31ff 	moveq.w	r1, #4294967295
   1cb98:	ab02      	add	r3, sp, #8
   1cb9a:	f843 1d04 	str.w	r1, [r3, #-4]!
   1cb9e:	4638      	mov	r0, r7
   1cba0:	4611      	mov	r1, r2
   1cba2:	f003 fa13 	bl	1ffcc <interface_socket_wait>
   1cba6:	b320      	cbz	r0, 1cbf2 <at_interface_write+0xce>
   1cba8:	6823      	ldr	r3, [r4, #0]
   1cbaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1cbae:	6023      	str	r3, [r4, #0]
   1cbb0:	e002      	b.n	1cbb8 <at_interface_write+0x94>
   1cbb2:	b390      	cbz	r0, 1cc1a <at_interface_write+0xf6>
   1cbb4:	6803      	ldr	r3, [r0, #0]
   1cbb6:	202d      	movs	r0, #45	; 0x2d
   1cbb8:	f7f8 fdb2 	bl	15720 <bsd_os_errno_set>
   1cbbc:	f04f 30ff 	mov.w	r0, #4294967295
   1cbc0:	b003      	add	sp, #12
   1cbc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cbc6:	200c      	movs	r0, #12
   1cbc8:	e7ee      	b.n	1cba8 <at_interface_write+0x84>
   1cbca:	4641      	mov	r1, r8
   1cbcc:	6800      	ldr	r0, [r0, #0]
   1cbce:	462a      	mov	r2, r5
   1cbd0:	f7ef ffd0 	bl	cb74 <memcpy>
   1cbd4:	2101      	movs	r1, #1
   1cbd6:	9800      	ldr	r0, [sp, #0]
   1cbd8:	f003 fb84 	bl	202e4 <rpc_at_client_request_send>
   1cbdc:	2800      	cmp	r0, #0
   1cbde:	d0d3      	beq.n	1cb88 <at_interface_write+0x64>
   1cbe0:	9b00      	ldr	r3, [sp, #0]
   1cbe2:	6818      	ldr	r0, [r3, #0]
   1cbe4:	f003 fb94 	bl	20310 <rpc_at_client_data_free>
   1cbe8:	9800      	ldr	r0, [sp, #0]
   1cbea:	f003 fb89 	bl	20300 <rpc_at_client_message_free>
   1cbee:	2023      	movs	r0, #35	; 0x23
   1cbf0:	e7da      	b.n	1cba8 <at_interface_write+0x84>
   1cbf2:	4638      	mov	r0, r7
   1cbf4:	f003 fa5e 	bl	200b4 <interface_socket_from_handle_get>
   1cbf8:	4603      	mov	r3, r0
   1cbfa:	b120      	cbz	r0, 1cc06 <at_interface_write+0xe2>
   1cbfc:	6840      	ldr	r0, [r0, #4]
   1cbfe:	b110      	cbz	r0, 1cc06 <at_interface_write+0xe2>
   1cc00:	2200      	movs	r2, #0
   1cc02:	605a      	str	r2, [r3, #4]
   1cc04:	e7d0      	b.n	1cba8 <at_interface_write+0x84>
   1cc06:	4628      	mov	r0, r5
   1cc08:	e7da      	b.n	1cbc0 <at_interface_write+0x9c>
   1cc0a:	2038      	movs	r0, #56	; 0x38
   1cc0c:	f7f8 fd88 	bl	15720 <bsd_os_errno_set>
   1cc10:	f04f 30ff 	mov.w	r0, #4294967295
   1cc14:	e7d4      	b.n	1cbc0 <at_interface_write+0x9c>
   1cc16:	2016      	movs	r0, #22
   1cc18:	e7ce      	b.n	1cbb8 <at_interface_write+0x94>
   1cc1a:	202d      	movs	r0, #45	; 0x2d
   1cc1c:	e7cc      	b.n	1cbb8 <at_interface_write+0x94>
   1cc1e:	bf00      	nop

0001cc20 <at_interface_init>:
   1cc20:	b508      	push	{r3, lr}
   1cc22:	f003 fb45 	bl	202b0 <rpc_at_client_init>
   1cc26:	b910      	cbnz	r0, 1cc2e <at_interface_init+0xe>
   1cc28:	2201      	movs	r2, #1
   1cc2a:	4b01      	ldr	r3, [pc, #4]	; (1cc30 <at_interface_init+0x10>)
   1cc2c:	701a      	strb	r2, [r3, #0]
   1cc2e:	bd08      	pop	{r3, pc}
   1cc30:	20025019 	.word	0x20025019

0001cc34 <at_interface_open>:
   1cc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cc38:	2600      	movs	r6, #0
   1cc3a:	4b34      	ldr	r3, [pc, #208]	; (1cd0c <at_interface_open+0xd8>)
   1cc3c:	b084      	sub	sp, #16
   1cc3e:	781b      	ldrb	r3, [r3, #0]
   1cc40:	9601      	str	r6, [sp, #4]
   1cc42:	2b00      	cmp	r3, #0
   1cc44:	d05c      	beq.n	1cd00 <at_interface_open+0xcc>
   1cc46:	2902      	cmp	r1, #2
   1cc48:	460d      	mov	r5, r1
   1cc4a:	d153      	bne.n	1ccf4 <at_interface_open+0xc0>
   1cc4c:	4680      	mov	r8, r0
   1cc4e:	4617      	mov	r7, r2
   1cc50:	a801      	add	r0, sp, #4
   1cc52:	4a2f      	ldr	r2, [pc, #188]	; (1cd10 <at_interface_open+0xdc>)
   1cc54:	f003 f908 	bl	1fe68 <interface_socket_allocate>
   1cc58:	9b01      	ldr	r3, [sp, #4]
   1cc5a:	4604      	mov	r4, r0
   1cc5c:	b3c3      	cbz	r3, 1ccd0 <at_interface_open+0x9c>
   1cc5e:	615f      	str	r7, [r3, #20]
   1cc60:	4631      	mov	r1, r6
   1cc62:	e9c3 8503 	strd	r8, r5, [r3, #12]
   1cc66:	a802      	add	r0, sp, #8
   1cc68:	f003 fb28 	bl	202bc <rpc_at_client_request_alloc>
   1cc6c:	4606      	mov	r6, r0
   1cc6e:	4620      	mov	r0, r4
   1cc70:	f003 fa20 	bl	200b4 <interface_socket_from_handle_get>
   1cc74:	4607      	mov	r7, r0
   1cc76:	bb16      	cbnz	r6, 1ccbe <at_interface_open+0x8a>
   1cc78:	2304      	movs	r3, #4
   1cc7a:	9802      	ldr	r0, [sp, #8]
   1cc7c:	2105      	movs	r1, #5
   1cc7e:	7246      	strb	r6, [r0, #9]
   1cc80:	7286      	strb	r6, [r0, #10]
   1cc82:	72c6      	strb	r6, [r0, #11]
   1cc84:	7203      	strb	r3, [r0, #8]
   1cc86:	60c4      	str	r4, [r0, #12]
   1cc88:	f003 fb2c 	bl	202e4 <rpc_at_client_request_send>
   1cc8c:	4606      	mov	r6, r0
   1cc8e:	bb60      	cbnz	r0, 1ccea <at_interface_open+0xb6>
   1cc90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1cc92:	ab04      	add	r3, sp, #16
   1cc94:	2a00      	cmp	r2, #0
   1cc96:	bf08      	it	eq
   1cc98:	f04f 32ff 	moveq.w	r2, #4294967295
   1cc9c:	4629      	mov	r1, r5
   1cc9e:	f843 2d04 	str.w	r2, [r3, #-4]!
   1cca2:	4620      	mov	r0, r4
   1cca4:	462a      	mov	r2, r5
   1cca6:	f003 f991 	bl	1ffcc <interface_socket_wait>
   1ccaa:	4605      	mov	r5, r0
   1ccac:	b940      	cbnz	r0, 1ccc0 <at_interface_open+0x8c>
   1ccae:	4620      	mov	r0, r4
   1ccb0:	f003 fa00 	bl	200b4 <interface_socket_from_handle_get>
   1ccb4:	b180      	cbz	r0, 1ccd8 <at_interface_open+0xa4>
   1ccb6:	6845      	ldr	r5, [r0, #4]
   1ccb8:	b175      	cbz	r5, 1ccd8 <at_interface_open+0xa4>
   1ccba:	6046      	str	r6, [r0, #4]
   1ccbc:	e000      	b.n	1ccc0 <at_interface_open+0x8c>
   1ccbe:	250c      	movs	r5, #12
   1ccc0:	4620      	mov	r0, r4
   1ccc2:	f003 f935 	bl	1ff30 <interface_socket_free>
   1ccc6:	4628      	mov	r0, r5
   1ccc8:	f7f8 fd2a 	bl	15720 <bsd_os_errno_set>
   1cccc:	f04f 34ff 	mov.w	r4, #4294967295
   1ccd0:	4620      	mov	r0, r4
   1ccd2:	b004      	add	sp, #16
   1ccd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ccd8:	4620      	mov	r0, r4
   1ccda:	9a01      	ldr	r2, [sp, #4]
   1ccdc:	6813      	ldr	r3, [r2, #0]
   1ccde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1cce2:	6013      	str	r3, [r2, #0]
   1cce4:	b004      	add	sp, #16
   1cce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ccea:	9802      	ldr	r0, [sp, #8]
   1ccec:	f003 fb08 	bl	20300 <rpc_at_client_message_free>
   1ccf0:	2523      	movs	r5, #35	; 0x23
   1ccf2:	e7e5      	b.n	1ccc0 <at_interface_open+0x8c>
   1ccf4:	2029      	movs	r0, #41	; 0x29
   1ccf6:	f7f8 fd13 	bl	15720 <bsd_os_errno_set>
   1ccfa:	f04f 34ff 	mov.w	r4, #4294967295
   1ccfe:	e7e7      	b.n	1ccd0 <at_interface_open+0x9c>
   1cd00:	2070      	movs	r0, #112	; 0x70
   1cd02:	f7f8 fd0d 	bl	15720 <bsd_os_errno_set>
   1cd06:	f04f 34ff 	mov.w	r4, #4294967295
   1cd0a:	e7e1      	b.n	1ccd0 <at_interface_open+0x9c>
   1cd0c:	20025019 	.word	0x20025019
   1cd10:	0001cb1d 	.word	0x0001cb1d

0001cd14 <at_interface_close>:
   1cd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cd18:	b082      	sub	sp, #8
   1cd1a:	4606      	mov	r6, r0
   1cd1c:	f003 f9ca 	bl	200b4 <interface_socket_from_handle_get>
   1cd20:	2800      	cmp	r0, #0
   1cd22:	d051      	beq.n	1cdc8 <at_interface_close+0xb4>
   1cd24:	230d      	movs	r3, #13
   1cd26:	6807      	ldr	r7, [r0, #0]
   1cd28:	6003      	str	r3, [r0, #0]
   1cd2a:	6803      	ldr	r3, [r0, #0]
   1cd2c:	4604      	mov	r4, r0
   1cd2e:	039b      	lsls	r3, r3, #14
   1cd30:	d42e      	bmi.n	1cd90 <at_interface_close+0x7c>
   1cd32:	2100      	movs	r1, #0
   1cd34:	4668      	mov	r0, sp
   1cd36:	f003 fac1 	bl	202bc <rpc_at_client_request_alloc>
   1cd3a:	4605      	mov	r5, r0
   1cd3c:	4630      	mov	r0, r6
   1cd3e:	f003 f9b9 	bl	200b4 <interface_socket_from_handle_get>
   1cd42:	4680      	mov	r8, r0
   1cd44:	bb75      	cbnz	r5, 1cda4 <at_interface_close+0x90>
   1cd46:	2304      	movs	r3, #4
   1cd48:	9800      	ldr	r0, [sp, #0]
   1cd4a:	2106      	movs	r1, #6
   1cd4c:	7203      	strb	r3, [r0, #8]
   1cd4e:	7245      	strb	r5, [r0, #9]
   1cd50:	7285      	strb	r5, [r0, #10]
   1cd52:	72c5      	strb	r5, [r0, #11]
   1cd54:	60c6      	str	r6, [r0, #12]
   1cd56:	f003 fac5 	bl	202e4 <rpc_at_client_request_send>
   1cd5a:	b9f0      	cbnz	r0, 1cd9a <at_interface_close+0x86>
   1cd5c:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   1cd60:	220e      	movs	r2, #14
   1cd62:	2900      	cmp	r1, #0
   1cd64:	bf08      	it	eq
   1cd66:	f04f 31ff 	moveq.w	r1, #4294967295
   1cd6a:	ab02      	add	r3, sp, #8
   1cd6c:	f843 1d04 	str.w	r1, [r3, #-4]!
   1cd70:	4630      	mov	r0, r6
   1cd72:	4611      	mov	r1, r2
   1cd74:	f003 f92a 	bl	1ffcc <interface_socket_wait>
   1cd78:	4605      	mov	r5, r0
   1cd7a:	b1a8      	cbz	r0, 1cda8 <at_interface_close+0x94>
   1cd7c:	6027      	str	r7, [r4, #0]
   1cd7e:	4628      	mov	r0, r5
   1cd80:	f04f 35ff 	mov.w	r5, #4294967295
   1cd84:	f7f8 fccc 	bl	15720 <bsd_os_errno_set>
   1cd88:	4628      	mov	r0, r5
   1cd8a:	b002      	add	sp, #8
   1cd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cd90:	6803      	ldr	r3, [r0, #0]
   1cd92:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1cd96:	6003      	str	r3, [r0, #0]
   1cd98:	e7cb      	b.n	1cd32 <at_interface_close+0x1e>
   1cd9a:	9800      	ldr	r0, [sp, #0]
   1cd9c:	f003 fab0 	bl	20300 <rpc_at_client_message_free>
   1cda0:	2523      	movs	r5, #35	; 0x23
   1cda2:	e7eb      	b.n	1cd7c <at_interface_close+0x68>
   1cda4:	250c      	movs	r5, #12
   1cda6:	e7e9      	b.n	1cd7c <at_interface_close+0x68>
   1cda8:	4630      	mov	r0, r6
   1cdaa:	f003 f983 	bl	200b4 <interface_socket_from_handle_get>
   1cdae:	b120      	cbz	r0, 1cdba <at_interface_close+0xa6>
   1cdb0:	6843      	ldr	r3, [r0, #4]
   1cdb2:	b113      	cbz	r3, 1cdba <at_interface_close+0xa6>
   1cdb4:	6045      	str	r5, [r0, #4]
   1cdb6:	461d      	mov	r5, r3
   1cdb8:	e7e0      	b.n	1cd7c <at_interface_close+0x68>
   1cdba:	4630      	mov	r0, r6
   1cdbc:	f003 f8b8 	bl	1ff30 <interface_socket_free>
   1cdc0:	4628      	mov	r0, r5
   1cdc2:	b002      	add	sp, #8
   1cdc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cdc8:	2516      	movs	r5, #22
   1cdca:	e7d8      	b.n	1cd7e <at_interface_close+0x6a>

0001cdcc <at_interface_read>:
   1cdcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cdd0:	b087      	sub	sp, #28
   1cdd2:	4688      	mov	r8, r1
   1cdd4:	4615      	mov	r5, r2
   1cdd6:	461e      	mov	r6, r3
   1cdd8:	4607      	mov	r7, r0
   1cdda:	f003 f96b 	bl	200b4 <interface_socket_from_handle_get>
   1cdde:	2800      	cmp	r0, #0
   1cde0:	f000 8084 	beq.w	1ceec <at_interface_read+0x120>
   1cde4:	2300      	movs	r3, #0
   1cde6:	4604      	mov	r4, r0
   1cde8:	e9cd 8502 	strd	r8, r5, [sp, #8]
   1cdec:	e9cd 3304 	strd	r3, r3, [sp, #16]
   1cdf0:	2e00      	cmp	r6, #0
   1cdf2:	d12d      	bne.n	1ce50 <at_interface_read+0x84>
   1cdf4:	f016 0502 	ands.w	r5, r6, #2
   1cdf8:	d148      	bne.n	1ce8c <at_interface_read+0xc0>
   1cdfa:	46a8      	mov	r8, r5
   1cdfc:	6823      	ldr	r3, [r4, #0]
   1cdfe:	69e0      	ldr	r0, [r4, #28]
   1ce00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1ce04:	6023      	str	r3, [r4, #0]
   1ce06:	6803      	ldr	r3, [r0, #0]
   1ce08:	4632      	mov	r2, r6
   1ce0a:	689b      	ldr	r3, [r3, #8]
   1ce0c:	a902      	add	r1, sp, #8
   1ce0e:	4798      	blx	r3
   1ce10:	f1b0 0900 	subs.w	r9, r0, #0
   1ce14:	da2a      	bge.n	1ce6c <at_interface_read+0xa0>
   1ce16:	2d00      	cmp	r5, #0
   1ce18:	d15e      	bne.n	1ced8 <at_interface_read+0x10c>
   1ce1a:	6a25      	ldr	r5, [r4, #32]
   1ce1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ce20:	2d00      	cmp	r5, #0
   1ce22:	bf08      	it	eq
   1ce24:	f04f 35ff 	moveq.w	r5, #4294967295
   1ce28:	4611      	mov	r1, r2
   1ce2a:	ab01      	add	r3, sp, #4
   1ce2c:	4638      	mov	r0, r7
   1ce2e:	9501      	str	r5, [sp, #4]
   1ce30:	f003 f8cc 	bl	1ffcc <interface_socket_wait>
   1ce34:	4605      	mov	r5, r0
   1ce36:	2800      	cmp	r0, #0
   1ce38:	d1e0      	bne.n	1cdfc <at_interface_read+0x30>
   1ce3a:	4638      	mov	r0, r7
   1ce3c:	f003 f93a 	bl	200b4 <interface_socket_from_handle_get>
   1ce40:	2800      	cmp	r0, #0
   1ce42:	d0db      	beq.n	1cdfc <at_interface_read+0x30>
   1ce44:	6845      	ldr	r5, [r0, #4]
   1ce46:	2d00      	cmp	r5, #0
   1ce48:	d0d8      	beq.n	1cdfc <at_interface_read+0x30>
   1ce4a:	f8c0 8004 	str.w	r8, [r0, #4]
   1ce4e:	e7d5      	b.n	1cdfc <at_interface_read+0x30>
   1ce50:	f016 0f2a 	tst.w	r6, #42	; 0x2a
   1ce54:	d1ce      	bne.n	1cdf4 <at_interface_read+0x28>
   1ce56:	252d      	movs	r5, #45	; 0x2d
   1ce58:	f04f 39ff 	mov.w	r9, #4294967295
   1ce5c:	4628      	mov	r0, r5
   1ce5e:	f7f8 fc5f 	bl	15720 <bsd_os_errno_set>
   1ce62:	4648      	mov	r0, r9
   1ce64:	b007      	add	sp, #28
   1ce66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ce6a:	2500      	movs	r5, #0
   1ce6c:	69e0      	ldr	r0, [r4, #28]
   1ce6e:	6803      	ldr	r3, [r0, #0]
   1ce70:	68db      	ldr	r3, [r3, #12]
   1ce72:	4798      	blx	r3
   1ce74:	3001      	adds	r0, #1
   1ce76:	d003      	beq.n	1ce80 <at_interface_read+0xb4>
   1ce78:	6823      	ldr	r3, [r4, #0]
   1ce7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1ce7e:	6023      	str	r3, [r4, #0]
   1ce80:	2d00      	cmp	r5, #0
   1ce82:	d1eb      	bne.n	1ce5c <at_interface_read+0x90>
   1ce84:	4648      	mov	r0, r9
   1ce86:	b007      	add	sp, #28
   1ce88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ce8c:	6823      	ldr	r3, [r4, #0]
   1ce8e:	69e0      	ldr	r0, [r4, #28]
   1ce90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1ce94:	6023      	str	r3, [r4, #0]
   1ce96:	6803      	ldr	r3, [r0, #0]
   1ce98:	4632      	mov	r2, r6
   1ce9a:	689b      	ldr	r3, [r3, #8]
   1ce9c:	a902      	add	r1, sp, #8
   1ce9e:	4798      	blx	r3
   1cea0:	f1b0 0900 	subs.w	r9, r0, #0
   1cea4:	dae1      	bge.n	1ce6a <at_interface_read+0x9e>
   1cea6:	69e0      	ldr	r0, [r4, #28]
   1cea8:	f1b9 3fff 	cmp.w	r9, #4294967295
   1ceac:	6803      	ldr	r3, [r0, #0]
   1ceae:	68db      	ldr	r3, [r3, #12]
   1ceb0:	d10a      	bne.n	1cec8 <at_interface_read+0xfc>
   1ceb2:	2523      	movs	r5, #35	; 0x23
   1ceb4:	4798      	blx	r3
   1ceb6:	3001      	adds	r0, #1
   1ceb8:	d0ce      	beq.n	1ce58 <at_interface_read+0x8c>
   1ceba:	6823      	ldr	r3, [r4, #0]
   1cebc:	f04f 39ff 	mov.w	r9, #4294967295
   1cec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1cec4:	6023      	str	r3, [r4, #0]
   1cec6:	e7db      	b.n	1ce80 <at_interface_read+0xb4>
   1cec8:	4798      	blx	r3
   1ceca:	3001      	adds	r0, #1
   1cecc:	d0c9      	beq.n	1ce62 <at_interface_read+0x96>
   1cece:	6823      	ldr	r3, [r4, #0]
   1ced0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1ced4:	6023      	str	r3, [r4, #0]
   1ced6:	e7c4      	b.n	1ce62 <at_interface_read+0x96>
   1ced8:	69e0      	ldr	r0, [r4, #28]
   1ceda:	f1b9 3fff 	cmp.w	r9, #4294967295
   1cede:	6803      	ldr	r3, [r0, #0]
   1cee0:	68db      	ldr	r3, [r3, #12]
   1cee2:	d0e7      	beq.n	1ceb4 <at_interface_read+0xe8>
   1cee4:	4798      	blx	r3
   1cee6:	3001      	adds	r0, #1
   1cee8:	d1c6      	bne.n	1ce78 <at_interface_read+0xac>
   1ceea:	e7b7      	b.n	1ce5c <at_interface_read+0x90>
   1ceec:	2516      	movs	r5, #22
   1ceee:	e7b3      	b.n	1ce58 <at_interface_read+0x8c>

0001cef0 <at_interface_getopt>:
   1cef0:	f003 b94e 	b.w	20190 <interface_socket_getopt>

0001cef4 <at_interface_setopt>:
   1cef4:	f003 b906 	b.w	20104 <interface_socket_setopt>

0001cef8 <rpc_at_event_handler>:
   1cef8:	b570      	push	{r4, r5, r6, lr}
   1cefa:	4606      	mov	r6, r0
   1cefc:	b084      	sub	sp, #16
   1cefe:	68c0      	ldr	r0, [r0, #12]
   1cf00:	460d      	mov	r5, r1
   1cf02:	f003 f8d7 	bl	200b4 <interface_socket_from_handle_get>
   1cf06:	4604      	mov	r4, r0
   1cf08:	b348      	cbz	r0, 1cf5e <rpc_at_event_handler+0x66>
   1cf0a:	6803      	ldr	r3, [r0, #0]
   1cf0c:	b29b      	uxth	r3, r3
   1cf0e:	2b01      	cmp	r3, #1
   1cf10:	d01f      	beq.n	1cf52 <rpc_at_event_handler+0x5a>
   1cf12:	6803      	ldr	r3, [r0, #0]
   1cf14:	b29b      	uxth	r3, r3
   1cf16:	2b0d      	cmp	r3, #13
   1cf18:	d029      	beq.n	1cf6e <rpc_at_event_handler+0x76>
   1cf1a:	6803      	ldr	r3, [r0, #0]
   1cf1c:	b29b      	uxth	r3, r3
   1cf1e:	2b02      	cmp	r3, #2
   1cf20:	d02d      	beq.n	1cf7e <rpc_at_event_handler+0x86>
   1cf22:	3d03      	subs	r5, #3
   1cf24:	2d01      	cmp	r5, #1
   1cf26:	d817      	bhi.n	1cf58 <rpc_at_event_handler+0x60>
   1cf28:	2500      	movs	r5, #0
   1cf2a:	6873      	ldr	r3, [r6, #4]
   1cf2c:	6832      	ldr	r2, [r6, #0]
   1cf2e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1cf32:	e9cd 2300 	strd	r2, r3, [sp]
   1cf36:	69e0      	ldr	r0, [r4, #28]
   1cf38:	4669      	mov	r1, sp
   1cf3a:	6803      	ldr	r3, [r0, #0]
   1cf3c:	685b      	ldr	r3, [r3, #4]
   1cf3e:	4798      	blx	r3
   1cf40:	3001      	adds	r0, #1
   1cf42:	d019      	beq.n	1cf78 <rpc_at_event_handler+0x80>
   1cf44:	4628      	mov	r0, r5
   1cf46:	6823      	ldr	r3, [r4, #0]
   1cf48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1cf4c:	6023      	str	r3, [r4, #0]
   1cf4e:	b004      	add	sp, #16
   1cf50:	bd70      	pop	{r4, r5, r6, pc}
   1cf52:	2d02      	cmp	r5, #2
   1cf54:	d1e5      	bne.n	1cf22 <rpc_at_event_handler+0x2a>
   1cf56:	6005      	str	r5, [r0, #0]
   1cf58:	2000      	movs	r0, #0
   1cf5a:	b004      	add	sp, #16
   1cf5c:	bd70      	pop	{r4, r5, r6, pc}
   1cf5e:	6830      	ldr	r0, [r6, #0]
   1cf60:	2800      	cmp	r0, #0
   1cf62:	d0f9      	beq.n	1cf58 <rpc_at_event_handler+0x60>
   1cf64:	f003 f9d4 	bl	20310 <rpc_at_client_data_free>
   1cf68:	4620      	mov	r0, r4
   1cf6a:	b004      	add	sp, #16
   1cf6c:	bd70      	pop	{r4, r5, r6, pc}
   1cf6e:	2d02      	cmp	r5, #2
   1cf70:	d1d7      	bne.n	1cf22 <rpc_at_event_handler+0x2a>
   1cf72:	230e      	movs	r3, #14
   1cf74:	6003      	str	r3, [r0, #0]
   1cf76:	e7ef      	b.n	1cf58 <rpc_at_event_handler+0x60>
   1cf78:	2002      	movs	r0, #2
   1cf7a:	b004      	add	sp, #16
   1cf7c:	bd70      	pop	{r4, r5, r6, pc}
   1cf7e:	6803      	ldr	r3, [r0, #0]
   1cf80:	029b      	lsls	r3, r3, #10
   1cf82:	d5ce      	bpl.n	1cf22 <rpc_at_event_handler+0x2a>
   1cf84:	2d02      	cmp	r5, #2
   1cf86:	d1cc      	bne.n	1cf22 <rpc_at_event_handler+0x2a>
   1cf88:	6803      	ldr	r3, [r0, #0]
   1cf8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1cf8e:	6003      	str	r3, [r0, #0]
   1cf90:	6803      	ldr	r3, [r0, #0]
   1cf92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1cf96:	6003      	str	r3, [r0, #0]
   1cf98:	e7de      	b.n	1cf58 <rpc_at_event_handler+0x60>
   1cf9a:	bf00      	nop

0001cf9c <ok_rsp_parser>:
   1cf9c:	2000      	movs	r0, #0
   1cf9e:	4770      	bx	lr

0001cfa0 <pdn_state_get_parser>:
   1cfa0:	2200      	movs	r2, #0
   1cfa2:	b570      	push	{r4, r5, r6, lr}
   1cfa4:	780b      	ldrb	r3, [r1, #0]
   1cfa6:	b084      	sub	sp, #16
   1cfa8:	460e      	mov	r6, r1
   1cfaa:	e9cd 2200 	strd	r2, r2, [sp]
   1cfae:	e9cd 2202 	strd	r2, r2, [sp, #8]
   1cfb2:	b323      	cbz	r3, 1cffe <pdn_state_get_parser+0x5e>
   1cfb4:	460c      	mov	r4, r1
   1cfb6:	2b20      	cmp	r3, #32
   1cfb8:	460d      	mov	r5, r1
   1cfba:	d01b      	beq.n	1cff4 <pdn_state_get_parser+0x54>
   1cfbc:	700b      	strb	r3, [r1, #0]
   1cfbe:	3201      	adds	r2, #1
   1cfc0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1cfc4:	18b1      	adds	r1, r6, r2
   1cfc6:	460d      	mov	r5, r1
   1cfc8:	2b00      	cmp	r3, #0
   1cfca:	d1f4      	bne.n	1cfb6 <pdn_state_get_parser+0x16>
   1cfcc:	2200      	movs	r2, #0
   1cfce:	4b0d      	ldr	r3, [pc, #52]	; (1d004 <pdn_state_get_parser+0x64>)
   1cfd0:	702a      	strb	r2, [r5, #0]
   1cfd2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1cfd6:	4a0c      	ldr	r2, [pc, #48]	; (1d008 <pdn_state_get_parser+0x68>)
   1cfd8:	681b      	ldr	r3, [r3, #0]
   1cfda:	2110      	movs	r1, #16
   1cfdc:	4668      	mov	r0, sp
   1cfde:	f005 fba5 	bl	2272c <snprintf>
   1cfe2:	4669      	mov	r1, sp
   1cfe4:	4630      	mov	r0, r6
   1cfe6:	f005 ff3b 	bl	22e60 <strstr>
   1cfea:	3000      	adds	r0, #0
   1cfec:	bf18      	it	ne
   1cfee:	2001      	movne	r0, #1
   1cff0:	b004      	add	sp, #16
   1cff2:	bd70      	pop	{r4, r5, r6, pc}
   1cff4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1cff8:	2b00      	cmp	r3, #0
   1cffa:	d1dc      	bne.n	1cfb6 <pdn_state_get_parser+0x16>
   1cffc:	e7e6      	b.n	1cfcc <pdn_state_get_parser+0x2c>
   1cffe:	460d      	mov	r5, r1
   1d000:	e7e4      	b.n	1cfcc <pdn_state_get_parser+0x2c>
   1d002:	bf00      	nop
   1d004:	20021b80 	.word	0x20021b80
   1d008:	0002bd68 	.word	0x0002bd68

0001d00c <pdn_id_get_parser>:
   1d00c:	b570      	push	{r4, r5, r6, lr}
   1d00e:	780b      	ldrb	r3, [r1, #0]
   1d010:	4606      	mov	r6, r0
   1d012:	b313      	cbz	r3, 1d05a <pdn_id_get_parser+0x4e>
   1d014:	4608      	mov	r0, r1
   1d016:	2400      	movs	r4, #0
   1d018:	460a      	mov	r2, r1
   1d01a:	2b20      	cmp	r3, #32
   1d01c:	4615      	mov	r5, r2
   1d01e:	d017      	beq.n	1d050 <pdn_id_get_parser+0x44>
   1d020:	7013      	strb	r3, [r2, #0]
   1d022:	3401      	adds	r4, #1
   1d024:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1d028:	190a      	adds	r2, r1, r4
   1d02a:	4615      	mov	r5, r2
   1d02c:	2b00      	cmp	r3, #0
   1d02e:	d1f4      	bne.n	1d01a <pdn_id_get_parser+0xe>
   1d030:	2300      	movs	r3, #0
   1d032:	4608      	mov	r0, r1
   1d034:	702b      	strb	r3, [r5, #0]
   1d036:	213a      	movs	r1, #58	; 0x3a
   1d038:	f005 fc52 	bl	228e0 <strchr>
   1d03c:	b130      	cbz	r0, 1d04c <pdn_id_get_parser+0x40>
   1d03e:	3001      	adds	r0, #1
   1d040:	f004 fda2 	bl	21b88 <atoi>
   1d044:	4b06      	ldr	r3, [pc, #24]	; (1d060 <pdn_id_get_parser+0x54>)
   1d046:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   1d04a:	6058      	str	r0, [r3, #4]
   1d04c:	2000      	movs	r0, #0
   1d04e:	bd70      	pop	{r4, r5, r6, pc}
   1d050:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1d054:	2b00      	cmp	r3, #0
   1d056:	d1e0      	bne.n	1d01a <pdn_id_get_parser+0xe>
   1d058:	e7ea      	b.n	1d030 <pdn_id_get_parser+0x24>
   1d05a:	460d      	mov	r5, r1
   1d05c:	e7e8      	b.n	1d030 <pdn_id_get_parser+0x24>
   1d05e:	bf00      	nop
   1d060:	20021b80 	.word	0x20021b80

0001d064 <context_create_parser>:
   1d064:	b570      	push	{r4, r5, r6, lr}
   1d066:	780b      	ldrb	r3, [r1, #0]
   1d068:	4606      	mov	r6, r0
   1d06a:	b313      	cbz	r3, 1d0b2 <context_create_parser+0x4e>
   1d06c:	4608      	mov	r0, r1
   1d06e:	2400      	movs	r4, #0
   1d070:	460a      	mov	r2, r1
   1d072:	2b20      	cmp	r3, #32
   1d074:	4615      	mov	r5, r2
   1d076:	d017      	beq.n	1d0a8 <context_create_parser+0x44>
   1d078:	7013      	strb	r3, [r2, #0]
   1d07a:	3401      	adds	r4, #1
   1d07c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1d080:	190a      	adds	r2, r1, r4
   1d082:	4615      	mov	r5, r2
   1d084:	2b00      	cmp	r3, #0
   1d086:	d1f4      	bne.n	1d072 <context_create_parser+0xe>
   1d088:	2300      	movs	r3, #0
   1d08a:	4608      	mov	r0, r1
   1d08c:	702b      	strb	r3, [r5, #0]
   1d08e:	213a      	movs	r1, #58	; 0x3a
   1d090:	f005 fc26 	bl	228e0 <strchr>
   1d094:	b130      	cbz	r0, 1d0a4 <context_create_parser+0x40>
   1d096:	4b08      	ldr	r3, [pc, #32]	; (1d0b8 <context_create_parser+0x54>)
   1d098:	3001      	adds	r0, #1
   1d09a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   1d09e:	f004 fd73 	bl	21b88 <atoi>
   1d0a2:	6020      	str	r0, [r4, #0]
   1d0a4:	2000      	movs	r0, #0
   1d0a6:	bd70      	pop	{r4, r5, r6, pc}
   1d0a8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1d0ac:	2b00      	cmp	r3, #0
   1d0ae:	d1e0      	bne.n	1d072 <context_create_parser+0xe>
   1d0b0:	e7ea      	b.n	1d088 <context_create_parser+0x24>
   1d0b2:	460d      	mov	r5, r1
   1d0b4:	e7e8      	b.n	1d088 <context_create_parser+0x24>
   1d0b6:	bf00      	nop
   1d0b8:	20021b80 	.word	0x20021b80

0001d0bc <pdn_interface_init>:
   1d0bc:	f04f 33ff 	mov.w	r3, #4294967295
   1d0c0:	b510      	push	{r4, lr}
   1d0c2:	4c0b      	ldr	r4, [pc, #44]	; (1d0f0 <pdn_interface_init+0x34>)
   1d0c4:	2228      	movs	r2, #40	; 0x28
   1d0c6:	2100      	movs	r1, #0
   1d0c8:	480a      	ldr	r0, [pc, #40]	; (1d0f4 <pdn_interface_init+0x38>)
   1d0ca:	6023      	str	r3, [r4, #0]
   1d0cc:	f005 f8be 	bl	2224c <memset>
   1d0d0:	f240 2201 	movw	r2, #513	; 0x201
   1d0d4:	2102      	movs	r1, #2
   1d0d6:	2066      	movs	r0, #102	; 0x66
   1d0d8:	f7ff fdac 	bl	1cc34 <at_interface_open>
   1d0dc:	2800      	cmp	r0, #0
   1d0de:	6020      	str	r0, [r4, #0]
   1d0e0:	db04      	blt.n	1d0ec <pdn_interface_init+0x30>
   1d0e2:	2201      	movs	r2, #1
   1d0e4:	4b04      	ldr	r3, [pc, #16]	; (1d0f8 <pdn_interface_init+0x3c>)
   1d0e6:	2000      	movs	r0, #0
   1d0e8:	701a      	strb	r2, [r3, #0]
   1d0ea:	bd10      	pop	{r4, pc}
   1d0ec:	2003      	movs	r0, #3
   1d0ee:	bd10      	pop	{r4, pc}
   1d0f0:	20021a7c 	.word	0x20021a7c
   1d0f4:	20021b80 	.word	0x20021b80
   1d0f8:	2002501a 	.word	0x2002501a

0001d0fc <pdn_interface_open>:
   1d0fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d100:	4b68      	ldr	r3, [pc, #416]	; (1d2a4 <pdn_interface_open+0x1a8>)
   1d102:	b083      	sub	sp, #12
   1d104:	781b      	ldrb	r3, [r3, #0]
   1d106:	2b00      	cmp	r3, #0
   1d108:	f000 80c5 	beq.w	1d296 <pdn_interface_open+0x19a>
   1d10c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1d110:	f040 80b0 	bne.w	1d274 <pdn_interface_open+0x178>
   1d114:	4c64      	ldr	r4, [pc, #400]	; (1d2a8 <pdn_interface_open+0x1ac>)
   1d116:	6825      	ldr	r5, [r4, #0]
   1d118:	b34d      	cbz	r5, 1d16e <pdn_interface_open+0x72>
   1d11a:	6863      	ldr	r3, [r4, #4]
   1d11c:	2b00      	cmp	r3, #0
   1d11e:	f000 809b 	beq.w	1d258 <pdn_interface_open+0x15c>
   1d122:	68a3      	ldr	r3, [r4, #8]
   1d124:	2b00      	cmp	r3, #0
   1d126:	f000 8099 	beq.w	1d25c <pdn_interface_open+0x160>
   1d12a:	68e3      	ldr	r3, [r4, #12]
   1d12c:	2b00      	cmp	r3, #0
   1d12e:	f000 8097 	beq.w	1d260 <pdn_interface_open+0x164>
   1d132:	6923      	ldr	r3, [r4, #16]
   1d134:	2b00      	cmp	r3, #0
   1d136:	f000 8095 	beq.w	1d264 <pdn_interface_open+0x168>
   1d13a:	6963      	ldr	r3, [r4, #20]
   1d13c:	2b00      	cmp	r3, #0
   1d13e:	f000 8093 	beq.w	1d268 <pdn_interface_open+0x16c>
   1d142:	69a3      	ldr	r3, [r4, #24]
   1d144:	2b00      	cmp	r3, #0
   1d146:	f000 8091 	beq.w	1d26c <pdn_interface_open+0x170>
   1d14a:	69e3      	ldr	r3, [r4, #28]
   1d14c:	2b00      	cmp	r3, #0
   1d14e:	f000 808f 	beq.w	1d270 <pdn_interface_open+0x174>
   1d152:	6a23      	ldr	r3, [r4, #32]
   1d154:	b153      	cbz	r3, 1d16c <pdn_interface_open+0x70>
   1d156:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d158:	2509      	movs	r5, #9
   1d15a:	b143      	cbz	r3, 1d16e <pdn_interface_open+0x72>
   1d15c:	200c      	movs	r0, #12
   1d15e:	f7f8 fadf 	bl	15720 <bsd_os_errno_set>
   1d162:	f04f 30ff 	mov.w	r0, #4294967295
   1d166:	b003      	add	sp, #12
   1d168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d16c:	2508      	movs	r5, #8
   1d16e:	2020      	movs	r0, #32
   1d170:	f002 fa98 	bl	1f6a4 <nrf_malloc>
   1d174:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   1d178:	2800      	cmp	r0, #0
   1d17a:	d0ef      	beq.n	1d15c <pdn_interface_open+0x60>
   1d17c:	2220      	movs	r2, #32
   1d17e:	2100      	movs	r1, #0
   1d180:	f005 f864 	bl	2224c <memset>
   1d184:	2101      	movs	r1, #1
   1d186:	2003      	movs	r0, #3
   1d188:	f04f 37ff 	mov.w	r7, #4294967295
   1d18c:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   1d190:	4b46      	ldr	r3, [pc, #280]	; (1d2ac <pdn_interface_open+0x1b0>)
   1d192:	6091      	str	r1, [r2, #8]
   1d194:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
   1d198:	4a45      	ldr	r2, [pc, #276]	; (1d2b0 <pdn_interface_open+0x1b4>)
   1d19a:	60c8      	str	r0, [r1, #12]
   1d19c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1d1a0:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d1a4:	6047      	str	r7, [r0, #4]
   1d1a6:	f8df 8118 	ldr.w	r8, [pc, #280]	; 1d2c0 <pdn_interface_open+0x1c4>
   1d1aa:	4842      	ldr	r0, [pc, #264]	; (1d2b4 <pdn_interface_open+0x1b8>)
   1d1ac:	f005 fabe 	bl	2272c <snprintf>
   1d1b0:	4840      	ldr	r0, [pc, #256]	; (1d2b4 <pdn_interface_open+0x1b8>)
   1d1b2:	f8d8 9000 	ldr.w	r9, [r8]
   1d1b6:	2600      	movs	r6, #0
   1d1b8:	f005 fc58 	bl	22a6c <strlen>
   1d1bc:	4633      	mov	r3, r6
   1d1be:	4602      	mov	r2, r0
   1d1c0:	493c      	ldr	r1, [pc, #240]	; (1d2b4 <pdn_interface_open+0x1b8>)
   1d1c2:	4648      	mov	r0, r9
   1d1c4:	9601      	str	r6, [sp, #4]
   1d1c6:	9600      	str	r6, [sp, #0]
   1d1c8:	f7ff fcac 	bl	1cb24 <at_interface_write>
   1d1cc:	4681      	mov	r9, r0
   1d1ce:	4839      	ldr	r0, [pc, #228]	; (1d2b4 <pdn_interface_open+0x1b8>)
   1d1d0:	f005 fc4c 	bl	22a6c <strlen>
   1d1d4:	4548      	cmp	r0, r9
   1d1d6:	d153      	bne.n	1d280 <pdn_interface_open+0x184>
   1d1d8:	4633      	mov	r3, r6
   1d1da:	e9cd 6600 	strd	r6, r6, [sp]
   1d1de:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d1e2:	4934      	ldr	r1, [pc, #208]	; (1d2b4 <pdn_interface_open+0x1b8>)
   1d1e4:	f8d8 0000 	ldr.w	r0, [r8]
   1d1e8:	f7ff fdf0 	bl	1cdcc <at_interface_read>
   1d1ec:	4606      	mov	r6, r0
   1d1ee:	4832      	ldr	r0, [pc, #200]	; (1d2b8 <pdn_interface_open+0x1bc>)
   1d1f0:	f005 fc3c 	bl	22a6c <strlen>
   1d1f4:	4286      	cmp	r6, r0
   1d1f6:	db15      	blt.n	1d224 <pdn_interface_open+0x128>
   1d1f8:	4602      	mov	r2, r0
   1d1fa:	492e      	ldr	r1, [pc, #184]	; (1d2b4 <pdn_interface_open+0x1b8>)
   1d1fc:	482e      	ldr	r0, [pc, #184]	; (1d2b8 <pdn_interface_open+0x1bc>)
   1d1fe:	f005 fc63 	bl	22ac8 <strncmp>
   1d202:	b978      	cbnz	r0, 1d224 <pdn_interface_open+0x128>
   1d204:	492b      	ldr	r1, [pc, #172]	; (1d2b4 <pdn_interface_open+0x1b8>)
   1d206:	4628      	mov	r0, r5
   1d208:	f7ff ff2c 	bl	1d064 <context_create_parser>
   1d20c:	b9b0      	cbnz	r0, 1d23c <pdn_interface_open+0x140>
   1d20e:	2202      	movs	r2, #2
   1d210:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1d214:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   1d218:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   1d21c:	609a      	str	r2, [r3, #8]
   1d21e:	b003      	add	sp, #12
   1d220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d224:	4825      	ldr	r0, [pc, #148]	; (1d2bc <pdn_interface_open+0x1c0>)
   1d226:	f005 fc21 	bl	22a6c <strlen>
   1d22a:	4922      	ldr	r1, [pc, #136]	; (1d2b4 <pdn_interface_open+0x1b8>)
   1d22c:	4602      	mov	r2, r0
   1d22e:	4823      	ldr	r0, [pc, #140]	; (1d2bc <pdn_interface_open+0x1c0>)
   1d230:	f005 fc4a 	bl	22ac8 <strncmp>
   1d234:	b960      	cbnz	r0, 1d250 <pdn_interface_open+0x154>
   1d236:	2008      	movs	r0, #8
   1d238:	f7f8 fa72 	bl	15720 <bsd_os_errno_set>
   1d23c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1d240:	f002 fa3a 	bl	1f6b8 <nrf_free>
   1d244:	2300      	movs	r3, #0
   1d246:	f04f 30ff 	mov.w	r0, #4294967295
   1d24a:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   1d24e:	e78a      	b.n	1d166 <pdn_interface_open+0x6a>
   1d250:	2005      	movs	r0, #5
   1d252:	f7f8 fa65 	bl	15720 <bsd_os_errno_set>
   1d256:	e7f1      	b.n	1d23c <pdn_interface_open+0x140>
   1d258:	2501      	movs	r5, #1
   1d25a:	e788      	b.n	1d16e <pdn_interface_open+0x72>
   1d25c:	2502      	movs	r5, #2
   1d25e:	e786      	b.n	1d16e <pdn_interface_open+0x72>
   1d260:	2503      	movs	r5, #3
   1d262:	e784      	b.n	1d16e <pdn_interface_open+0x72>
   1d264:	2504      	movs	r5, #4
   1d266:	e782      	b.n	1d16e <pdn_interface_open+0x72>
   1d268:	2505      	movs	r5, #5
   1d26a:	e780      	b.n	1d16e <pdn_interface_open+0x72>
   1d26c:	2506      	movs	r5, #6
   1d26e:	e77e      	b.n	1d16e <pdn_interface_open+0x72>
   1d270:	2507      	movs	r5, #7
   1d272:	e77c      	b.n	1d16e <pdn_interface_open+0x72>
   1d274:	2029      	movs	r0, #41	; 0x29
   1d276:	f7f8 fa53 	bl	15720 <bsd_os_errno_set>
   1d27a:	f04f 30ff 	mov.w	r0, #4294967295
   1d27e:	e772      	b.n	1d166 <pdn_interface_open+0x6a>
   1d280:	2005      	movs	r0, #5
   1d282:	f7f8 fa4d 	bl	15720 <bsd_os_errno_set>
   1d286:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1d28a:	f002 fa15 	bl	1f6b8 <nrf_free>
   1d28e:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   1d292:	4638      	mov	r0, r7
   1d294:	e767      	b.n	1d166 <pdn_interface_open+0x6a>
   1d296:	2070      	movs	r0, #112	; 0x70
   1d298:	f7f8 fa42 	bl	15720 <bsd_os_errno_set>
   1d29c:	f04f 30ff 	mov.w	r0, #4294967295
   1d2a0:	e761      	b.n	1d166 <pdn_interface_open+0x6a>
   1d2a2:	bf00      	nop
   1d2a4:	2002501a 	.word	0x2002501a
   1d2a8:	20021b80 	.word	0x20021b80
   1d2ac:	0002bd44 	.word	0x0002bd44
   1d2b0:	0002bd50 	.word	0x0002bd50
   1d2b4:	20021a80 	.word	0x20021a80
   1d2b8:	0002bd54 	.word	0x0002bd54
   1d2bc:	0002bd60 	.word	0x0002bd60
   1d2c0:	20021a7c 	.word	0x20021a7c

0001d2c4 <pdn_interface_connect>:
   1d2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2c8:	b085      	sub	sp, #20
   1d2ca:	2900      	cmp	r1, #0
   1d2cc:	f000 81e8 	beq.w	1d6a0 <pdn_interface_connect+0x3dc>
   1d2d0:	2a64      	cmp	r2, #100	; 0x64
   1d2d2:	4690      	mov	r8, r2
   1d2d4:	f200 81e4 	bhi.w	1d6a0 <pdn_interface_connect+0x3dc>
   1d2d8:	0c03      	lsrs	r3, r0, #16
   1d2da:	4aac      	ldr	r2, [pc, #688]	; (1d58c <pdn_interface_connect+0x2c8>)
   1d2dc:	041b      	lsls	r3, r3, #16
   1d2de:	4293      	cmp	r3, r2
   1d2e0:	f040 814b 	bne.w	1d57a <pdn_interface_connect+0x2b6>
   1d2e4:	f020 45f1 	bic.w	r5, r0, #2021654528	; 0x78800000
   1d2e8:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   1d2ec:	2d09      	cmp	r5, #9
   1d2ee:	f300 8144 	bgt.w	1d57a <pdn_interface_connect+0x2b6>
   1d2f2:	4fa7      	ldr	r7, [pc, #668]	; (1d590 <pdn_interface_connect+0x2cc>)
   1d2f4:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1d2f8:	2b00      	cmp	r3, #0
   1d2fa:	f000 813e 	beq.w	1d57a <pdn_interface_connect+0x2b6>
   1d2fe:	689a      	ldr	r2, [r3, #8]
   1d300:	2a00      	cmp	r2, #0
   1d302:	f000 813a 	beq.w	1d57a <pdn_interface_connect+0x2b6>
   1d306:	689b      	ldr	r3, [r3, #8]
   1d308:	2b02      	cmp	r3, #2
   1d30a:	f040 8136 	bne.w	1d57a <pdn_interface_connect+0x2b6>
   1d30e:	4ea1      	ldr	r6, [pc, #644]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d310:	4ba1      	ldr	r3, [pc, #644]	; (1d598 <pdn_interface_connect+0x2d4>)
   1d312:	4aa2      	ldr	r2, [pc, #648]	; (1d59c <pdn_interface_connect+0x2d8>)
   1d314:	4689      	mov	r9, r1
   1d316:	4630      	mov	r0, r6
   1d318:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d31c:	f005 fa06 	bl	2272c <snprintf>
   1d320:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1d324:	4604      	mov	r4, r0
   1d326:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1d32a:	681b      	ldr	r3, [r3, #0]
   1d32c:	4a9c      	ldr	r2, [pc, #624]	; (1d5a0 <pdn_interface_connect+0x2dc>)
   1d32e:	1830      	adds	r0, r6, r0
   1d330:	f005 f9fc 	bl	2272c <snprintf>
   1d334:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1d338:	4404      	add	r4, r0
   1d33a:	68db      	ldr	r3, [r3, #12]
   1d33c:	f003 0203 	and.w	r2, r3, #3
   1d340:	2a03      	cmp	r2, #3
   1d342:	f000 8111 	beq.w	1d568 <pdn_interface_connect+0x2a4>
   1d346:	079b      	lsls	r3, r3, #30
   1d348:	eb06 0004 	add.w	r0, r6, r4
   1d34c:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1d350:	bf4c      	ite	mi
   1d352:	4b94      	ldrmi	r3, [pc, #592]	; (1d5a4 <pdn_interface_connect+0x2e0>)
   1d354:	4b94      	ldrpl	r3, [pc, #592]	; (1d5a8 <pdn_interface_connect+0x2e4>)
   1d356:	4a95      	ldr	r2, [pc, #596]	; (1d5ac <pdn_interface_connect+0x2e8>)
   1d358:	f005 f9e8 	bl	2272c <snprintf>
   1d35c:	4404      	add	r4, r0
   1d35e:	f8cd 9000 	str.w	r9, [sp]
   1d362:	4643      	mov	r3, r8
   1d364:	4a92      	ldr	r2, [pc, #584]	; (1d5b0 <pdn_interface_connect+0x2ec>)
   1d366:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1d36a:	1930      	adds	r0, r6, r4
   1d36c:	f005 f9de 	bl	2272c <snprintf>
   1d370:	4420      	add	r0, r4
   1d372:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1d376:	f300 8199 	bgt.w	1d6ac <pdn_interface_connect+0x3e8>
   1d37a:	f8df a254 	ldr.w	sl, [pc, #596]	; 1d5d0 <pdn_interface_connect+0x30c>
   1d37e:	4885      	ldr	r0, [pc, #532]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d380:	f8da b000 	ldr.w	fp, [sl]
   1d384:	2400      	movs	r4, #0
   1d386:	f005 fb71 	bl	22a6c <strlen>
   1d38a:	4623      	mov	r3, r4
   1d38c:	4602      	mov	r2, r0
   1d38e:	4981      	ldr	r1, [pc, #516]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d390:	4658      	mov	r0, fp
   1d392:	9401      	str	r4, [sp, #4]
   1d394:	9400      	str	r4, [sp, #0]
   1d396:	f7ff fbc5 	bl	1cb24 <at_interface_write>
   1d39a:	4683      	mov	fp, r0
   1d39c:	487d      	ldr	r0, [pc, #500]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d39e:	f005 fb65 	bl	22a6c <strlen>
   1d3a2:	4558      	cmp	r0, fp
   1d3a4:	d008      	beq.n	1d3b8 <pdn_interface_connect+0xf4>
   1d3a6:	2005      	movs	r0, #5
   1d3a8:	f7f8 f9ba 	bl	15720 <bsd_os_errno_set>
   1d3ac:	f04f 3bff 	mov.w	fp, #4294967295
   1d3b0:	4658      	mov	r0, fp
   1d3b2:	b005      	add	sp, #20
   1d3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3b8:	4623      	mov	r3, r4
   1d3ba:	e9cd 4400 	strd	r4, r4, [sp]
   1d3be:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d3c2:	4974      	ldr	r1, [pc, #464]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d3c4:	f8da 0000 	ldr.w	r0, [sl]
   1d3c8:	f7ff fd00 	bl	1cdcc <at_interface_read>
   1d3cc:	4604      	mov	r4, r0
   1d3ce:	4879      	ldr	r0, [pc, #484]	; (1d5b4 <pdn_interface_connect+0x2f0>)
   1d3d0:	f005 fb4c 	bl	22a6c <strlen>
   1d3d4:	4284      	cmp	r4, r0
   1d3d6:	da0f      	bge.n	1d3f8 <pdn_interface_connect+0x134>
   1d3d8:	4877      	ldr	r0, [pc, #476]	; (1d5b8 <pdn_interface_connect+0x2f4>)
   1d3da:	f005 fb47 	bl	22a6c <strlen>
   1d3de:	496d      	ldr	r1, [pc, #436]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d3e0:	4602      	mov	r2, r0
   1d3e2:	4875      	ldr	r0, [pc, #468]	; (1d5b8 <pdn_interface_connect+0x2f4>)
   1d3e4:	f005 fb70 	bl	22ac8 <strncmp>
   1d3e8:	2800      	cmp	r0, #0
   1d3ea:	d1dc      	bne.n	1d3a6 <pdn_interface_connect+0xe2>
   1d3ec:	2008      	movs	r0, #8
   1d3ee:	f7f8 f997 	bl	15720 <bsd_os_errno_set>
   1d3f2:	f04f 3bff 	mov.w	fp, #4294967295
   1d3f6:	e7db      	b.n	1d3b0 <pdn_interface_connect+0xec>
   1d3f8:	4602      	mov	r2, r0
   1d3fa:	4966      	ldr	r1, [pc, #408]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d3fc:	486d      	ldr	r0, [pc, #436]	; (1d5b4 <pdn_interface_connect+0x2f0>)
   1d3fe:	f005 fb63 	bl	22ac8 <strncmp>
   1d402:	2800      	cmp	r0, #0
   1d404:	d1e8      	bne.n	1d3d8 <pdn_interface_connect+0x114>
   1d406:	4963      	ldr	r1, [pc, #396]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d408:	4628      	mov	r0, r5
   1d40a:	f7ff fdc7 	bl	1cf9c <ok_rsp_parser>
   1d40e:	4683      	mov	fp, r0
   1d410:	2800      	cmp	r0, #0
   1d412:	d1cd      	bne.n	1d3b0 <pdn_interface_connect+0xec>
   1d414:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1d418:	7c1b      	ldrb	r3, [r3, #16]
   1d41a:	2b00      	cmp	r3, #0
   1d41c:	f040 80da 	bne.w	1d5d4 <pdn_interface_connect+0x310>
   1d420:	4b66      	ldr	r3, [pc, #408]	; (1d5bc <pdn_interface_connect+0x2f8>)
   1d422:	4a5e      	ldr	r2, [pc, #376]	; (1d59c <pdn_interface_connect+0x2d8>)
   1d424:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d428:	485a      	ldr	r0, [pc, #360]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d42a:	f005 f97f 	bl	2272c <snprintf>
   1d42e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1d432:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1d436:	4a62      	ldr	r2, [pc, #392]	; (1d5c0 <pdn_interface_connect+0x2fc>)
   1d438:	681b      	ldr	r3, [r3, #0]
   1d43a:	4430      	add	r0, r6
   1d43c:	f005 f976 	bl	2272c <snprintf>
   1d440:	f8da 3000 	ldr.w	r3, [sl]
   1d444:	4853      	ldr	r0, [pc, #332]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d446:	2400      	movs	r4, #0
   1d448:	9303      	str	r3, [sp, #12]
   1d44a:	f005 fb0f 	bl	22a6c <strlen>
   1d44e:	9b03      	ldr	r3, [sp, #12]
   1d450:	4602      	mov	r2, r0
   1d452:	4950      	ldr	r1, [pc, #320]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d454:	4618      	mov	r0, r3
   1d456:	9401      	str	r4, [sp, #4]
   1d458:	4623      	mov	r3, r4
   1d45a:	9400      	str	r4, [sp, #0]
   1d45c:	f7ff fb62 	bl	1cb24 <at_interface_write>
   1d460:	9003      	str	r0, [sp, #12]
   1d462:	484c      	ldr	r0, [pc, #304]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d464:	f005 fb02 	bl	22a6c <strlen>
   1d468:	9b03      	ldr	r3, [sp, #12]
   1d46a:	4298      	cmp	r0, r3
   1d46c:	d19b      	bne.n	1d3a6 <pdn_interface_connect+0xe2>
   1d46e:	4623      	mov	r3, r4
   1d470:	e9cd 4400 	strd	r4, r4, [sp]
   1d474:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d478:	4946      	ldr	r1, [pc, #280]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d47a:	f8da 0000 	ldr.w	r0, [sl]
   1d47e:	f7ff fca5 	bl	1cdcc <at_interface_read>
   1d482:	4604      	mov	r4, r0
   1d484:	484b      	ldr	r0, [pc, #300]	; (1d5b4 <pdn_interface_connect+0x2f0>)
   1d486:	f005 faf1 	bl	22a6c <strlen>
   1d48a:	4284      	cmp	r4, r0
   1d48c:	dba4      	blt.n	1d3d8 <pdn_interface_connect+0x114>
   1d48e:	4602      	mov	r2, r0
   1d490:	4940      	ldr	r1, [pc, #256]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d492:	4848      	ldr	r0, [pc, #288]	; (1d5b4 <pdn_interface_connect+0x2f0>)
   1d494:	f005 fb18 	bl	22ac8 <strncmp>
   1d498:	4604      	mov	r4, r0
   1d49a:	2800      	cmp	r0, #0
   1d49c:	d19c      	bne.n	1d3d8 <pdn_interface_connect+0x114>
   1d49e:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   1d4a2:	f108 0320 	add.w	r3, r8, #32
   1d4a6:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   1d4aa:	4413      	add	r3, r2
   1d4ac:	4419      	add	r1, r3
   1d4ae:	f002 f90f 	bl	1f6d0 <nrf_realloc>
   1d4b2:	2800      	cmp	r0, #0
   1d4b4:	f000 80fd 	beq.w	1d6b2 <pdn_interface_connect+0x3ee>
   1d4b8:	2303      	movs	r3, #3
   1d4ba:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
   1d4be:	6083      	str	r3, [r0, #8]
   1d4c0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1d4c4:	4649      	mov	r1, r9
   1d4c6:	f8c3 801c 	str.w	r8, [r3, #28]
   1d4ca:	f857 c025 	ldr.w	ip, [r7, r5, lsl #2]
   1d4ce:	4642      	mov	r2, r8
   1d4d0:	e9dc 0305 	ldrd	r0, r3, [ip, #20]
   1d4d4:	4418      	add	r0, r3
   1d4d6:	4603      	mov	r3, r0
   1d4d8:	3320      	adds	r3, #32
   1d4da:	eb0c 0003 	add.w	r0, ip, r3
   1d4de:	f7ef fb49 	bl	cb74 <memcpy>
   1d4e2:	4b38      	ldr	r3, [pc, #224]	; (1d5c4 <pdn_interface_connect+0x300>)
   1d4e4:	4a2d      	ldr	r2, [pc, #180]	; (1d59c <pdn_interface_connect+0x2d8>)
   1d4e6:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d4ea:	482a      	ldr	r0, [pc, #168]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d4ec:	f005 f91e 	bl	2272c <snprintf>
   1d4f0:	4601      	mov	r1, r0
   1d4f2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1d4f6:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   1d4fa:	681b      	ldr	r3, [r3, #0]
   1d4fc:	4a30      	ldr	r2, [pc, #192]	; (1d5c0 <pdn_interface_connect+0x2fc>)
   1d4fe:	1830      	adds	r0, r6, r0
   1d500:	f005 f914 	bl	2272c <snprintf>
   1d504:	4823      	ldr	r0, [pc, #140]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d506:	f8da 6000 	ldr.w	r6, [sl]
   1d50a:	f005 faaf 	bl	22a6c <strlen>
   1d50e:	4623      	mov	r3, r4
   1d510:	4602      	mov	r2, r0
   1d512:	4920      	ldr	r1, [pc, #128]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d514:	4630      	mov	r0, r6
   1d516:	9401      	str	r4, [sp, #4]
   1d518:	9400      	str	r4, [sp, #0]
   1d51a:	f7ff fb03 	bl	1cb24 <at_interface_write>
   1d51e:	4606      	mov	r6, r0
   1d520:	481c      	ldr	r0, [pc, #112]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d522:	f005 faa3 	bl	22a6c <strlen>
   1d526:	42b0      	cmp	r0, r6
   1d528:	f040 80d3 	bne.w	1d6d2 <pdn_interface_connect+0x40e>
   1d52c:	4623      	mov	r3, r4
   1d52e:	e9cd 4400 	strd	r4, r4, [sp]
   1d532:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d536:	4917      	ldr	r1, [pc, #92]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d538:	f8da 0000 	ldr.w	r0, [sl]
   1d53c:	f7ff fc46 	bl	1cdcc <at_interface_read>
   1d540:	4604      	mov	r4, r0
   1d542:	4821      	ldr	r0, [pc, #132]	; (1d5c8 <pdn_interface_connect+0x304>)
   1d544:	f005 fa92 	bl	22a6c <strlen>
   1d548:	4284      	cmp	r4, r0
   1d54a:	f2c0 80b5 	blt.w	1d6b8 <pdn_interface_connect+0x3f4>
   1d54e:	4602      	mov	r2, r0
   1d550:	4910      	ldr	r1, [pc, #64]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d552:	481d      	ldr	r0, [pc, #116]	; (1d5c8 <pdn_interface_connect+0x304>)
   1d554:	f005 fab8 	bl	22ac8 <strncmp>
   1d558:	2800      	cmp	r0, #0
   1d55a:	f040 80ad 	bne.w	1d6b8 <pdn_interface_connect+0x3f4>
   1d55e:	4628      	mov	r0, r5
   1d560:	490c      	ldr	r1, [pc, #48]	; (1d594 <pdn_interface_connect+0x2d0>)
   1d562:	f7ff fd53 	bl	1d00c <pdn_id_get_parser>
   1d566:	e723      	b.n	1d3b0 <pdn_interface_connect+0xec>
   1d568:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1d56c:	1930      	adds	r0, r6, r4
   1d56e:	4b17      	ldr	r3, [pc, #92]	; (1d5cc <pdn_interface_connect+0x308>)
   1d570:	4a0e      	ldr	r2, [pc, #56]	; (1d5ac <pdn_interface_connect+0x2e8>)
   1d572:	f005 f8db 	bl	2272c <snprintf>
   1d576:	4404      	add	r4, r0
   1d578:	e6f1      	b.n	1d35e <pdn_interface_connect+0x9a>
   1d57a:	f04f 3bff 	mov.w	fp, #4294967295
   1d57e:	2009      	movs	r0, #9
   1d580:	f7f8 f8ce 	bl	15720 <bsd_os_errno_set>
   1d584:	4658      	mov	r0, fp
   1d586:	b005      	add	sp, #20
   1d588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d58c:	789a0000 	.word	0x789a0000
   1d590:	20021b80 	.word	0x20021b80
   1d594:	20021a80 	.word	0x20021a80
   1d598:	0002bcb0 	.word	0x0002bcb0
   1d59c:	0002bd50 	.word	0x0002bd50
   1d5a0:	0002bcbc 	.word	0x0002bcbc
   1d5a4:	0002bcd0 	.word	0x0002bcd0
   1d5a8:	0002bcd8 	.word	0x0002bcd8
   1d5ac:	0002bcc8 	.word	0x0002bcc8
   1d5b0:	0002bd28 	.word	0x0002bd28
   1d5b4:	0002bcdc 	.word	0x0002bcdc
   1d5b8:	0002bd60 	.word	0x0002bd60
   1d5bc:	0002bcfc 	.word	0x0002bcfc
   1d5c0:	0002bd08 	.word	0x0002bd08
   1d5c4:	0002bd0c 	.word	0x0002bd0c
   1d5c8:	0002bd1c 	.word	0x0002bd1c
   1d5cc:	0002bcc0 	.word	0x0002bcc0
   1d5d0:	20021a7c 	.word	0x20021a7c
   1d5d4:	4b41      	ldr	r3, [pc, #260]	; (1d6dc <pdn_interface_connect+0x418>)
   1d5d6:	4a42      	ldr	r2, [pc, #264]	; (1d6e0 <pdn_interface_connect+0x41c>)
   1d5d8:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d5dc:	4841      	ldr	r0, [pc, #260]	; (1d6e4 <pdn_interface_connect+0x420>)
   1d5de:	f005 f8a5 	bl	2272c <snprintf>
   1d5e2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1d5e6:	4a40      	ldr	r2, [pc, #256]	; (1d6e8 <pdn_interface_connect+0x424>)
   1d5e8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1d5ec:	4604      	mov	r4, r0
   1d5ee:	681b      	ldr	r3, [r3, #0]
   1d5f0:	1830      	adds	r0, r6, r0
   1d5f2:	f005 f89b 	bl	2272c <snprintf>
   1d5f6:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1d5fa:	4404      	add	r4, r0
   1d5fc:	7c1b      	ldrb	r3, [r3, #16]
   1d5fe:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1d602:	2b01      	cmp	r3, #1
   1d604:	bf0c      	ite	eq
   1d606:	4a39      	ldreq	r2, [pc, #228]	; (1d6ec <pdn_interface_connect+0x428>)
   1d608:	4a39      	ldrne	r2, [pc, #228]	; (1d6f0 <pdn_interface_connect+0x42c>)
   1d60a:	1930      	adds	r0, r6, r4
   1d60c:	f005 f88e 	bl	2272c <snprintf>
   1d610:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1d614:	4404      	add	r4, r0
   1d616:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1d61a:	4a36      	ldr	r2, [pc, #216]	; (1d6f4 <pdn_interface_connect+0x430>)
   1d61c:	3320      	adds	r3, #32
   1d61e:	1930      	adds	r0, r6, r4
   1d620:	f005 f884 	bl	2272c <snprintf>
   1d624:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   1d628:	4420      	add	r0, r4
   1d62a:	695a      	ldr	r2, [r3, #20]
   1d62c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1d630:	3220      	adds	r2, #32
   1d632:	4413      	add	r3, r2
   1d634:	4430      	add	r0, r6
   1d636:	4a30      	ldr	r2, [pc, #192]	; (1d6f8 <pdn_interface_connect+0x434>)
   1d638:	f005 f878 	bl	2272c <snprintf>
   1d63c:	f8da 3000 	ldr.w	r3, [sl]
   1d640:	4828      	ldr	r0, [pc, #160]	; (1d6e4 <pdn_interface_connect+0x420>)
   1d642:	2400      	movs	r4, #0
   1d644:	9303      	str	r3, [sp, #12]
   1d646:	f005 fa11 	bl	22a6c <strlen>
   1d64a:	9b03      	ldr	r3, [sp, #12]
   1d64c:	4602      	mov	r2, r0
   1d64e:	4925      	ldr	r1, [pc, #148]	; (1d6e4 <pdn_interface_connect+0x420>)
   1d650:	4618      	mov	r0, r3
   1d652:	9401      	str	r4, [sp, #4]
   1d654:	4623      	mov	r3, r4
   1d656:	9400      	str	r4, [sp, #0]
   1d658:	f7ff fa64 	bl	1cb24 <at_interface_write>
   1d65c:	9003      	str	r0, [sp, #12]
   1d65e:	4821      	ldr	r0, [pc, #132]	; (1d6e4 <pdn_interface_connect+0x420>)
   1d660:	f005 fa04 	bl	22a6c <strlen>
   1d664:	9b03      	ldr	r3, [sp, #12]
   1d666:	4298      	cmp	r0, r3
   1d668:	f47f ae9d 	bne.w	1d3a6 <pdn_interface_connect+0xe2>
   1d66c:	4623      	mov	r3, r4
   1d66e:	e9cd 4400 	strd	r4, r4, [sp]
   1d672:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d676:	491b      	ldr	r1, [pc, #108]	; (1d6e4 <pdn_interface_connect+0x420>)
   1d678:	f8da 0000 	ldr.w	r0, [sl]
   1d67c:	f7ff fba6 	bl	1cdcc <at_interface_read>
   1d680:	4604      	mov	r4, r0
   1d682:	481e      	ldr	r0, [pc, #120]	; (1d6fc <pdn_interface_connect+0x438>)
   1d684:	f005 f9f2 	bl	22a6c <strlen>
   1d688:	4284      	cmp	r4, r0
   1d68a:	f6ff aea5 	blt.w	1d3d8 <pdn_interface_connect+0x114>
   1d68e:	4602      	mov	r2, r0
   1d690:	4914      	ldr	r1, [pc, #80]	; (1d6e4 <pdn_interface_connect+0x420>)
   1d692:	481a      	ldr	r0, [pc, #104]	; (1d6fc <pdn_interface_connect+0x438>)
   1d694:	f005 fa18 	bl	22ac8 <strncmp>
   1d698:	2800      	cmp	r0, #0
   1d69a:	f43f aec1 	beq.w	1d420 <pdn_interface_connect+0x15c>
   1d69e:	e69b      	b.n	1d3d8 <pdn_interface_connect+0x114>
   1d6a0:	2016      	movs	r0, #22
   1d6a2:	f7f8 f83d 	bl	15720 <bsd_os_errno_set>
   1d6a6:	f04f 3bff 	mov.w	fp, #4294967295
   1d6aa:	e681      	b.n	1d3b0 <pdn_interface_connect+0xec>
   1d6ac:	f04f 3bff 	mov.w	fp, #4294967295
   1d6b0:	e67e      	b.n	1d3b0 <pdn_interface_connect+0xec>
   1d6b2:	f04f 0b0c 	mov.w	fp, #12
   1d6b6:	e67b      	b.n	1d3b0 <pdn_interface_connect+0xec>
   1d6b8:	4811      	ldr	r0, [pc, #68]	; (1d700 <pdn_interface_connect+0x43c>)
   1d6ba:	f005 f9d7 	bl	22a6c <strlen>
   1d6be:	4909      	ldr	r1, [pc, #36]	; (1d6e4 <pdn_interface_connect+0x420>)
   1d6c0:	4602      	mov	r2, r0
   1d6c2:	480f      	ldr	r0, [pc, #60]	; (1d700 <pdn_interface_connect+0x43c>)
   1d6c4:	f005 fa00 	bl	22ac8 <strncmp>
   1d6c8:	b918      	cbnz	r0, 1d6d2 <pdn_interface_connect+0x40e>
   1d6ca:	2008      	movs	r0, #8
   1d6cc:	f7f8 f828 	bl	15720 <bsd_os_errno_set>
   1d6d0:	e66e      	b.n	1d3b0 <pdn_interface_connect+0xec>
   1d6d2:	2005      	movs	r0, #5
   1d6d4:	f7f8 f824 	bl	15720 <bsd_os_errno_set>
   1d6d8:	e66a      	b.n	1d3b0 <pdn_interface_connect+0xec>
   1d6da:	bf00      	nop
   1d6dc:	0002bce0 	.word	0x0002bce0
   1d6e0:	0002bd50 	.word	0x0002bd50
   1d6e4:	20021a80 	.word	0x20021a80
   1d6e8:	0002bcbc 	.word	0x0002bcbc
   1d6ec:	0002bcec 	.word	0x0002bcec
   1d6f0:	0002bcf0 	.word	0x0002bcf0
   1d6f4:	0002bcc8 	.word	0x0002bcc8
   1d6f8:	0002bcf4 	.word	0x0002bcf4
   1d6fc:	0002bcdc 	.word	0x0002bcdc
   1d700:	0002bd60 	.word	0x0002bd60

0001d704 <pdn_interface_close>:
   1d704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d708:	4a6c      	ldr	r2, [pc, #432]	; (1d8bc <pdn_interface_close+0x1b8>)
   1d70a:	0c03      	lsrs	r3, r0, #16
   1d70c:	041b      	lsls	r3, r3, #16
   1d70e:	4293      	cmp	r3, r2
   1d710:	b083      	sub	sp, #12
   1d712:	f040 80ae 	bne.w	1d872 <pdn_interface_close+0x16e>
   1d716:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1d71a:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1d71e:	2c09      	cmp	r4, #9
   1d720:	f300 80a7 	bgt.w	1d872 <pdn_interface_close+0x16e>
   1d724:	4d66      	ldr	r5, [pc, #408]	; (1d8c0 <pdn_interface_close+0x1bc>)
   1d726:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1d72a:	2800      	cmp	r0, #0
   1d72c:	f000 80a1 	beq.w	1d872 <pdn_interface_close+0x16e>
   1d730:	6883      	ldr	r3, [r0, #8]
   1d732:	2b00      	cmp	r3, #0
   1d734:	f000 809d 	beq.w	1d872 <pdn_interface_close+0x16e>
   1d738:	6883      	ldr	r3, [r0, #8]
   1d73a:	2b03      	cmp	r3, #3
   1d73c:	d00b      	beq.n	1d756 <pdn_interface_close+0x52>
   1d73e:	6883      	ldr	r3, [r0, #8]
   1d740:	2b02      	cmp	r3, #2
   1d742:	d056      	beq.n	1d7f2 <pdn_interface_close+0xee>
   1d744:	f001 ffb8 	bl	1f6b8 <nrf_free>
   1d748:	2300      	movs	r3, #0
   1d74a:	4618      	mov	r0, r3
   1d74c:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   1d750:	b003      	add	sp, #12
   1d752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d756:	4e5b      	ldr	r6, [pc, #364]	; (1d8c4 <pdn_interface_close+0x1c0>)
   1d758:	4b5b      	ldr	r3, [pc, #364]	; (1d8c8 <pdn_interface_close+0x1c4>)
   1d75a:	4a5c      	ldr	r2, [pc, #368]	; (1d8cc <pdn_interface_close+0x1c8>)
   1d75c:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d760:	4630      	mov	r0, r6
   1d762:	f004 ffe3 	bl	2272c <snprintf>
   1d766:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1d76a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1d76e:	681b      	ldr	r3, [r3, #0]
   1d770:	4a57      	ldr	r2, [pc, #348]	; (1d8d0 <pdn_interface_close+0x1cc>)
   1d772:	4430      	add	r0, r6
   1d774:	f8df 8168 	ldr.w	r8, [pc, #360]	; 1d8e0 <pdn_interface_close+0x1dc>
   1d778:	f004 ffd8 	bl	2272c <snprintf>
   1d77c:	4630      	mov	r0, r6
   1d77e:	f8d8 9000 	ldr.w	r9, [r8]
   1d782:	2700      	movs	r7, #0
   1d784:	f005 f972 	bl	22a6c <strlen>
   1d788:	4631      	mov	r1, r6
   1d78a:	4602      	mov	r2, r0
   1d78c:	463b      	mov	r3, r7
   1d78e:	4648      	mov	r0, r9
   1d790:	9701      	str	r7, [sp, #4]
   1d792:	9700      	str	r7, [sp, #0]
   1d794:	f7ff f9c6 	bl	1cb24 <at_interface_write>
   1d798:	4681      	mov	r9, r0
   1d79a:	4630      	mov	r0, r6
   1d79c:	f005 f966 	bl	22a6c <strlen>
   1d7a0:	4548      	cmp	r0, r9
   1d7a2:	f040 8083 	bne.w	1d8ac <pdn_interface_close+0x1a8>
   1d7a6:	463b      	mov	r3, r7
   1d7a8:	e9cd 7700 	strd	r7, r7, [sp]
   1d7ac:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d7b0:	4631      	mov	r1, r6
   1d7b2:	f8d8 0000 	ldr.w	r0, [r8]
   1d7b6:	f7ff fb09 	bl	1cdcc <at_interface_read>
   1d7ba:	4607      	mov	r7, r0
   1d7bc:	4845      	ldr	r0, [pc, #276]	; (1d8d4 <pdn_interface_close+0x1d0>)
   1d7be:	f005 f955 	bl	22a6c <strlen>
   1d7c2:	4287      	cmp	r7, r0
   1d7c4:	da5b      	bge.n	1d87e <pdn_interface_close+0x17a>
   1d7c6:	4844      	ldr	r0, [pc, #272]	; (1d8d8 <pdn_interface_close+0x1d4>)
   1d7c8:	f005 f950 	bl	22a6c <strlen>
   1d7cc:	493d      	ldr	r1, [pc, #244]	; (1d8c4 <pdn_interface_close+0x1c0>)
   1d7ce:	4602      	mov	r2, r0
   1d7d0:	4841      	ldr	r0, [pc, #260]	; (1d8d8 <pdn_interface_close+0x1d4>)
   1d7d2:	f005 f979 	bl	22ac8 <strncmp>
   1d7d6:	2800      	cmp	r0, #0
   1d7d8:	d168      	bne.n	1d8ac <pdn_interface_close+0x1a8>
   1d7da:	2008      	movs	r0, #8
   1d7dc:	f7f7 ffa0 	bl	15720 <bsd_os_errno_set>
   1d7e0:	2202      	movs	r2, #2
   1d7e2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1d7e6:	609a      	str	r2, [r3, #8]
   1d7e8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1d7ec:	6883      	ldr	r3, [r0, #8]
   1d7ee:	2b02      	cmp	r3, #2
   1d7f0:	d1a8      	bne.n	1d744 <pdn_interface_close+0x40>
   1d7f2:	4e34      	ldr	r6, [pc, #208]	; (1d8c4 <pdn_interface_close+0x1c0>)
   1d7f4:	4b39      	ldr	r3, [pc, #228]	; (1d8dc <pdn_interface_close+0x1d8>)
   1d7f6:	4a35      	ldr	r2, [pc, #212]	; (1d8cc <pdn_interface_close+0x1c8>)
   1d7f8:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d7fc:	4630      	mov	r0, r6
   1d7fe:	f004 ff95 	bl	2272c <snprintf>
   1d802:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1d806:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1d80a:	681b      	ldr	r3, [r3, #0]
   1d80c:	4a30      	ldr	r2, [pc, #192]	; (1d8d0 <pdn_interface_close+0x1cc>)
   1d80e:	4430      	add	r0, r6
   1d810:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 1d8e0 <pdn_interface_close+0x1dc>
   1d814:	f004 ff8a 	bl	2272c <snprintf>
   1d818:	4630      	mov	r0, r6
   1d81a:	f8d8 9000 	ldr.w	r9, [r8]
   1d81e:	2700      	movs	r7, #0
   1d820:	f005 f924 	bl	22a6c <strlen>
   1d824:	4631      	mov	r1, r6
   1d826:	4602      	mov	r2, r0
   1d828:	463b      	mov	r3, r7
   1d82a:	4648      	mov	r0, r9
   1d82c:	9701      	str	r7, [sp, #4]
   1d82e:	9700      	str	r7, [sp, #0]
   1d830:	f7ff f978 	bl	1cb24 <at_interface_write>
   1d834:	4681      	mov	r9, r0
   1d836:	4630      	mov	r0, r6
   1d838:	f005 f918 	bl	22a6c <strlen>
   1d83c:	4548      	cmp	r0, r9
   1d83e:	d139      	bne.n	1d8b4 <pdn_interface_close+0x1b0>
   1d840:	463b      	mov	r3, r7
   1d842:	e9cd 7700 	strd	r7, r7, [sp]
   1d846:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d84a:	4631      	mov	r1, r6
   1d84c:	f8d8 0000 	ldr.w	r0, [r8]
   1d850:	f7ff fabc 	bl	1cdcc <at_interface_read>
   1d854:	4607      	mov	r7, r0
   1d856:	481f      	ldr	r0, [pc, #124]	; (1d8d4 <pdn_interface_close+0x1d0>)
   1d858:	f005 f908 	bl	22a6c <strlen>
   1d85c:	4287      	cmp	r7, r0
   1d85e:	db16      	blt.n	1d88e <pdn_interface_close+0x18a>
   1d860:	4602      	mov	r2, r0
   1d862:	4631      	mov	r1, r6
   1d864:	481b      	ldr	r0, [pc, #108]	; (1d8d4 <pdn_interface_close+0x1d0>)
   1d866:	f005 f92f 	bl	22ac8 <strncmp>
   1d86a:	b980      	cbnz	r0, 1d88e <pdn_interface_close+0x18a>
   1d86c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1d870:	e768      	b.n	1d744 <pdn_interface_close+0x40>
   1d872:	2009      	movs	r0, #9
   1d874:	f7f7 ff54 	bl	15720 <bsd_os_errno_set>
   1d878:	f04f 30ff 	mov.w	r0, #4294967295
   1d87c:	e768      	b.n	1d750 <pdn_interface_close+0x4c>
   1d87e:	4602      	mov	r2, r0
   1d880:	4631      	mov	r1, r6
   1d882:	4814      	ldr	r0, [pc, #80]	; (1d8d4 <pdn_interface_close+0x1d0>)
   1d884:	f005 f920 	bl	22ac8 <strncmp>
   1d888:	2800      	cmp	r0, #0
   1d88a:	d0a9      	beq.n	1d7e0 <pdn_interface_close+0xdc>
   1d88c:	e79b      	b.n	1d7c6 <pdn_interface_close+0xc2>
   1d88e:	4812      	ldr	r0, [pc, #72]	; (1d8d8 <pdn_interface_close+0x1d4>)
   1d890:	f005 f8ec 	bl	22a6c <strlen>
   1d894:	490b      	ldr	r1, [pc, #44]	; (1d8c4 <pdn_interface_close+0x1c0>)
   1d896:	4602      	mov	r2, r0
   1d898:	480f      	ldr	r0, [pc, #60]	; (1d8d8 <pdn_interface_close+0x1d4>)
   1d89a:	f005 f915 	bl	22ac8 <strncmp>
   1d89e:	b948      	cbnz	r0, 1d8b4 <pdn_interface_close+0x1b0>
   1d8a0:	2008      	movs	r0, #8
   1d8a2:	f7f7 ff3d 	bl	15720 <bsd_os_errno_set>
   1d8a6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1d8aa:	e74b      	b.n	1d744 <pdn_interface_close+0x40>
   1d8ac:	2005      	movs	r0, #5
   1d8ae:	f7f7 ff37 	bl	15720 <bsd_os_errno_set>
   1d8b2:	e795      	b.n	1d7e0 <pdn_interface_close+0xdc>
   1d8b4:	2005      	movs	r0, #5
   1d8b6:	f7f7 ff33 	bl	15720 <bsd_os_errno_set>
   1d8ba:	e7d7      	b.n	1d86c <pdn_interface_close+0x168>
   1d8bc:	789a0000 	.word	0x789a0000
   1d8c0:	20021b80 	.word	0x20021b80
   1d8c4:	20021a80 	.word	0x20021a80
   1d8c8:	0002bca4 	.word	0x0002bca4
   1d8cc:	0002bd50 	.word	0x0002bd50
   1d8d0:	0002bd08 	.word	0x0002bd08
   1d8d4:	0002bcdc 	.word	0x0002bcdc
   1d8d8:	0002bd60 	.word	0x0002bd60
   1d8dc:	0002bcb0 	.word	0x0002bcb0
   1d8e0:	20021a7c 	.word	0x20021a7c

0001d8e4 <pdn_interface_setopt>:
   1d8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d8e6:	f240 2402 	movw	r4, #514	; 0x202
   1d8ea:	42a1      	cmp	r1, r4
   1d8ec:	9e06      	ldr	r6, [sp, #24]
   1d8ee:	f040 8090 	bne.w	1da12 <pdn_interface_setopt+0x12e>
   1d8f2:	461d      	mov	r5, r3
   1d8f4:	2b00      	cmp	r3, #0
   1d8f6:	f000 808c 	beq.w	1da12 <pdn_interface_setopt+0x12e>
   1d8fa:	2e00      	cmp	r6, #0
   1d8fc:	f000 8089 	beq.w	1da12 <pdn_interface_setopt+0x12e>
   1d900:	0c03      	lsrs	r3, r0, #16
   1d902:	494d      	ldr	r1, [pc, #308]	; (1da38 <pdn_interface_setopt+0x154>)
   1d904:	041b      	lsls	r3, r3, #16
   1d906:	428b      	cmp	r3, r1
   1d908:	d005      	beq.n	1d916 <pdn_interface_setopt+0x32>
   1d90a:	2009      	movs	r0, #9
   1d90c:	f7f7 ff08 	bl	15720 <bsd_os_errno_set>
   1d910:	f04f 30ff 	mov.w	r0, #4294967295
   1d914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d916:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1d91a:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1d91e:	2c09      	cmp	r4, #9
   1d920:	dcf3      	bgt.n	1d90a <pdn_interface_setopt+0x26>
   1d922:	4f46      	ldr	r7, [pc, #280]	; (1da3c <pdn_interface_setopt+0x158>)
   1d924:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1d928:	2b00      	cmp	r3, #0
   1d92a:	d0ee      	beq.n	1d90a <pdn_interface_setopt+0x26>
   1d92c:	6899      	ldr	r1, [r3, #8]
   1d92e:	2900      	cmp	r1, #0
   1d930:	d0eb      	beq.n	1d90a <pdn_interface_setopt+0x26>
   1d932:	2a01      	cmp	r2, #1
   1d934:	d049      	beq.n	1d9ca <pdn_interface_setopt+0xe6>
   1d936:	2a04      	cmp	r2, #4
   1d938:	d145      	bne.n	1d9c6 <pdn_interface_setopt+0xe2>
   1d93a:	689a      	ldr	r2, [r3, #8]
   1d93c:	2a00      	cmp	r2, #0
   1d93e:	d04c      	beq.n	1d9da <pdn_interface_setopt+0xf6>
   1d940:	689a      	ldr	r2, [r3, #8]
   1d942:	2a03      	cmp	r2, #3
   1d944:	d049      	beq.n	1d9da <pdn_interface_setopt+0xf6>
   1d946:	689b      	ldr	r3, [r3, #8]
   1d948:	2b04      	cmp	r3, #4
   1d94a:	d046      	beq.n	1d9da <pdn_interface_setopt+0xf6>
   1d94c:	4628      	mov	r0, r5
   1d94e:	f005 f88d 	bl	22a6c <strlen>
   1d952:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1d956:	3001      	adds	r0, #1
   1d958:	f105 0664 	add.w	r6, r5, #100	; 0x64
   1d95c:	6158      	str	r0, [r3, #20]
   1d95e:	4630      	mov	r0, r6
   1d960:	f005 f884 	bl	22a6c <strlen>
   1d964:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1d968:	3001      	adds	r0, #1
   1d96a:	6198      	str	r0, [r3, #24]
   1d96c:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
   1d970:	3b01      	subs	r3, #1
   1d972:	2b01      	cmp	r3, #1
   1d974:	d84b      	bhi.n	1da0e <pdn_interface_setopt+0x12a>
   1d976:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   1d97a:	6943      	ldr	r3, [r0, #20]
   1d97c:	2b63      	cmp	r3, #99	; 0x63
   1d97e:	dc46      	bgt.n	1da0e <pdn_interface_setopt+0x12a>
   1d980:	6982      	ldr	r2, [r0, #24]
   1d982:	2a63      	cmp	r2, #99	; 0x63
   1d984:	dc43      	bgt.n	1da0e <pdn_interface_setopt+0x12a>
   1d986:	4413      	add	r3, r2
   1d988:	f103 0120 	add.w	r1, r3, #32
   1d98c:	f001 fea0 	bl	1f6d0 <nrf_realloc>
   1d990:	4603      	mov	r3, r0
   1d992:	2800      	cmp	r0, #0
   1d994:	d048      	beq.n	1da28 <pdn_interface_setopt+0x144>
   1d996:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   1d99a:	6941      	ldr	r1, [r0, #20]
   1d99c:	462b      	mov	r3, r5
   1d99e:	4a28      	ldr	r2, [pc, #160]	; (1da40 <pdn_interface_setopt+0x15c>)
   1d9a0:	3020      	adds	r0, #32
   1d9a2:	f004 fec3 	bl	2272c <snprintf>
   1d9a6:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   1d9aa:	3021      	adds	r0, #33	; 0x21
   1d9ac:	4633      	mov	r3, r6
   1d9ae:	6991      	ldr	r1, [r2, #24]
   1d9b0:	4410      	add	r0, r2
   1d9b2:	4a23      	ldr	r2, [pc, #140]	; (1da40 <pdn_interface_setopt+0x15c>)
   1d9b4:	f004 feba 	bl	2272c <snprintf>
   1d9b8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1d9bc:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
   1d9c0:	2000      	movs	r0, #0
   1d9c2:	741a      	strb	r2, [r3, #16]
   1d9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d9c6:	202d      	movs	r0, #45	; 0x2d
   1d9c8:	e7a0      	b.n	1d90c <pdn_interface_setopt+0x28>
   1d9ca:	689a      	ldr	r2, [r3, #8]
   1d9cc:	b12a      	cbz	r2, 1d9da <pdn_interface_setopt+0xf6>
   1d9ce:	689a      	ldr	r2, [r3, #8]
   1d9d0:	2a03      	cmp	r2, #3
   1d9d2:	d002      	beq.n	1d9da <pdn_interface_setopt+0xf6>
   1d9d4:	689a      	ldr	r2, [r3, #8]
   1d9d6:	2a04      	cmp	r2, #4
   1d9d8:	d101      	bne.n	1d9de <pdn_interface_setopt+0xfa>
   1d9da:	200e      	movs	r0, #14
   1d9dc:	e796      	b.n	1d90c <pdn_interface_setopt+0x28>
   1d9de:	08b2      	lsrs	r2, r6, #2
   1d9e0:	1e51      	subs	r1, r2, #1
   1d9e2:	2901      	cmp	r1, #1
   1d9e4:	d813      	bhi.n	1da0e <pdn_interface_setopt+0x12a>
   1d9e6:	07b1      	lsls	r1, r6, #30
   1d9e8:	d111      	bne.n	1da0e <pdn_interface_setopt+0x12a>
   1d9ea:	6829      	ldr	r1, [r5, #0]
   1d9ec:	2902      	cmp	r1, #2
   1d9ee:	d016      	beq.n	1da1e <pdn_interface_setopt+0x13a>
   1d9f0:	290a      	cmp	r1, #10
   1d9f2:	d10c      	bne.n	1da0e <pdn_interface_setopt+0x12a>
   1d9f4:	2102      	movs	r1, #2
   1d9f6:	2a02      	cmp	r2, #2
   1d9f8:	d106      	bne.n	1da08 <pdn_interface_setopt+0x124>
   1d9fa:	686a      	ldr	r2, [r5, #4]
   1d9fc:	2a02      	cmp	r2, #2
   1d9fe:	d010      	beq.n	1da22 <pdn_interface_setopt+0x13e>
   1da00:	2a0a      	cmp	r2, #10
   1da02:	d104      	bne.n	1da0e <pdn_interface_setopt+0x12a>
   1da04:	f041 0102 	orr.w	r1, r1, #2
   1da08:	60d9      	str	r1, [r3, #12]
   1da0a:	2000      	movs	r0, #0
   1da0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1da0e:	2016      	movs	r0, #22
   1da10:	e77c      	b.n	1d90c <pdn_interface_setopt+0x28>
   1da12:	2016      	movs	r0, #22
   1da14:	f7f7 fe84 	bl	15720 <bsd_os_errno_set>
   1da18:	f04f 30ff 	mov.w	r0, #4294967295
   1da1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1da1e:	2101      	movs	r1, #1
   1da20:	e7e9      	b.n	1d9f6 <pdn_interface_setopt+0x112>
   1da22:	f041 0101 	orr.w	r1, r1, #1
   1da26:	e7ef      	b.n	1da08 <pdn_interface_setopt+0x124>
   1da28:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   1da2c:	200c      	movs	r0, #12
   1da2e:	6153      	str	r3, [r2, #20]
   1da30:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   1da34:	6193      	str	r3, [r2, #24]
   1da36:	e769      	b.n	1d90c <pdn_interface_setopt+0x28>
   1da38:	789a0000 	.word	0x789a0000
   1da3c:	20021b80 	.word	0x20021b80
   1da40:	0002bd50 	.word	0x0002bd50

0001da44 <pdn_interface_getopt>:
   1da44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1da48:	f240 2402 	movw	r4, #514	; 0x202
   1da4c:	b083      	sub	sp, #12
   1da4e:	42a1      	cmp	r1, r4
   1da50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1da52:	f040 808f 	bne.w	1db74 <pdn_interface_getopt+0x130>
   1da56:	461e      	mov	r6, r3
   1da58:	2b00      	cmp	r3, #0
   1da5a:	f000 808b 	beq.w	1db74 <pdn_interface_getopt+0x130>
   1da5e:	2d00      	cmp	r5, #0
   1da60:	f000 8088 	beq.w	1db74 <pdn_interface_getopt+0x130>
   1da64:	0c03      	lsrs	r3, r0, #16
   1da66:	4954      	ldr	r1, [pc, #336]	; (1dbb8 <pdn_interface_getopt+0x174>)
   1da68:	041b      	lsls	r3, r3, #16
   1da6a:	428b      	cmp	r3, r1
   1da6c:	f040 8084 	bne.w	1db78 <pdn_interface_getopt+0x134>
   1da70:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1da74:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1da78:	2c09      	cmp	r4, #9
   1da7a:	dc7d      	bgt.n	1db78 <pdn_interface_getopt+0x134>
   1da7c:	4b4f      	ldr	r3, [pc, #316]	; (1dbbc <pdn_interface_getopt+0x178>)
   1da7e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1da82:	2b00      	cmp	r3, #0
   1da84:	d078      	beq.n	1db78 <pdn_interface_getopt+0x134>
   1da86:	6899      	ldr	r1, [r3, #8]
   1da88:	2900      	cmp	r1, #0
   1da8a:	d075      	beq.n	1db78 <pdn_interface_getopt+0x134>
   1da8c:	2a02      	cmp	r2, #2
   1da8e:	d04e      	beq.n	1db2e <pdn_interface_getopt+0xea>
   1da90:	2a03      	cmp	r2, #3
   1da92:	d009      	beq.n	1daa8 <pdn_interface_getopt+0x64>
   1da94:	2a01      	cmp	r2, #1
   1da96:	d054      	beq.n	1db42 <pdn_interface_getopt+0xfe>
   1da98:	202d      	movs	r0, #45	; 0x2d
   1da9a:	f7f7 fe41 	bl	15720 <bsd_os_errno_set>
   1da9e:	f04f 30ff 	mov.w	r0, #4294967295
   1daa2:	b003      	add	sp, #12
   1daa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1daa8:	682b      	ldr	r3, [r5, #0]
   1daaa:	2b00      	cmp	r3, #0
   1daac:	d062      	beq.n	1db74 <pdn_interface_getopt+0x130>
   1daae:	4b44      	ldr	r3, [pc, #272]	; (1dbc0 <pdn_interface_getopt+0x17c>)
   1dab0:	4a44      	ldr	r2, [pc, #272]	; (1dbc4 <pdn_interface_getopt+0x180>)
   1dab2:	f44f 7180 	mov.w	r1, #256	; 0x100
   1dab6:	4844      	ldr	r0, [pc, #272]	; (1dbc8 <pdn_interface_getopt+0x184>)
   1dab8:	f8df 8118 	ldr.w	r8, [pc, #280]	; 1dbd4 <pdn_interface_getopt+0x190>
   1dabc:	f004 fe36 	bl	2272c <snprintf>
   1dac0:	4841      	ldr	r0, [pc, #260]	; (1dbc8 <pdn_interface_getopt+0x184>)
   1dac2:	f8d8 9000 	ldr.w	r9, [r8]
   1dac6:	2700      	movs	r7, #0
   1dac8:	f004 ffd0 	bl	22a6c <strlen>
   1dacc:	463b      	mov	r3, r7
   1dace:	4602      	mov	r2, r0
   1dad0:	493d      	ldr	r1, [pc, #244]	; (1dbc8 <pdn_interface_getopt+0x184>)
   1dad2:	4648      	mov	r0, r9
   1dad4:	9701      	str	r7, [sp, #4]
   1dad6:	9700      	str	r7, [sp, #0]
   1dad8:	f7ff f824 	bl	1cb24 <at_interface_write>
   1dadc:	4681      	mov	r9, r0
   1dade:	483a      	ldr	r0, [pc, #232]	; (1dbc8 <pdn_interface_getopt+0x184>)
   1dae0:	f004 ffc4 	bl	22a6c <strlen>
   1dae4:	4548      	cmp	r0, r9
   1dae6:	d161      	bne.n	1dbac <pdn_interface_getopt+0x168>
   1dae8:	463b      	mov	r3, r7
   1daea:	e9cd 7700 	strd	r7, r7, [sp]
   1daee:	f44f 7280 	mov.w	r2, #256	; 0x100
   1daf2:	4935      	ldr	r1, [pc, #212]	; (1dbc8 <pdn_interface_getopt+0x184>)
   1daf4:	f8d8 0000 	ldr.w	r0, [r8]
   1daf8:	f7ff f968 	bl	1cdcc <at_interface_read>
   1dafc:	4607      	mov	r7, r0
   1dafe:	4833      	ldr	r0, [pc, #204]	; (1dbcc <pdn_interface_getopt+0x188>)
   1db00:	f004 ffb4 	bl	22a6c <strlen>
   1db04:	4287      	cmp	r7, r0
   1db06:	db3d      	blt.n	1db84 <pdn_interface_getopt+0x140>
   1db08:	4602      	mov	r2, r0
   1db0a:	492f      	ldr	r1, [pc, #188]	; (1dbc8 <pdn_interface_getopt+0x184>)
   1db0c:	482f      	ldr	r0, [pc, #188]	; (1dbcc <pdn_interface_getopt+0x188>)
   1db0e:	f004 ffdb 	bl	22ac8 <strncmp>
   1db12:	4607      	mov	r7, r0
   1db14:	2800      	cmp	r0, #0
   1db16:	d135      	bne.n	1db84 <pdn_interface_getopt+0x140>
   1db18:	4620      	mov	r0, r4
   1db1a:	492b      	ldr	r1, [pc, #172]	; (1dbc8 <pdn_interface_getopt+0x184>)
   1db1c:	f7ff fa40 	bl	1cfa0 <pdn_state_get_parser>
   1db20:	2800      	cmp	r0, #0
   1db22:	dbba      	blt.n	1da9a <pdn_interface_getopt+0x56>
   1db24:	2301      	movs	r3, #1
   1db26:	7030      	strb	r0, [r6, #0]
   1db28:	4638      	mov	r0, r7
   1db2a:	602b      	str	r3, [r5, #0]
   1db2c:	e7b9      	b.n	1daa2 <pdn_interface_getopt+0x5e>
   1db2e:	682a      	ldr	r2, [r5, #0]
   1db30:	b302      	cbz	r2, 1db74 <pdn_interface_getopt+0x130>
   1db32:	2201      	movs	r2, #1
   1db34:	2000      	movs	r0, #0
   1db36:	681b      	ldr	r3, [r3, #0]
   1db38:	7033      	strb	r3, [r6, #0]
   1db3a:	602a      	str	r2, [r5, #0]
   1db3c:	b003      	add	sp, #12
   1db3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1db42:	689a      	ldr	r2, [r3, #8]
   1db44:	b1a2      	cbz	r2, 1db70 <pdn_interface_getopt+0x12c>
   1db46:	689a      	ldr	r2, [r3, #8]
   1db48:	2a04      	cmp	r2, #4
   1db4a:	d011      	beq.n	1db70 <pdn_interface_getopt+0x12c>
   1db4c:	682a      	ldr	r2, [r5, #0]
   1db4e:	2a07      	cmp	r2, #7
   1db50:	d910      	bls.n	1db74 <pdn_interface_getopt+0x130>
   1db52:	f012 0203 	ands.w	r2, r2, #3
   1db56:	d10d      	bne.n	1db74 <pdn_interface_getopt+0x130>
   1db58:	68db      	ldr	r3, [r3, #12]
   1db5a:	0799      	lsls	r1, r3, #30
   1db5c:	d421      	bmi.n	1dba2 <pdn_interface_getopt+0x15e>
   1db5e:	2104      	movs	r1, #4
   1db60:	07db      	lsls	r3, r3, #31
   1db62:	d502      	bpl.n	1db6a <pdn_interface_getopt+0x126>
   1db64:	2302      	movs	r3, #2
   1db66:	50b3      	str	r3, [r6, r2]
   1db68:	460a      	mov	r2, r1
   1db6a:	602a      	str	r2, [r5, #0]
   1db6c:	2000      	movs	r0, #0
   1db6e:	e798      	b.n	1daa2 <pdn_interface_getopt+0x5e>
   1db70:	200e      	movs	r0, #14
   1db72:	e792      	b.n	1da9a <pdn_interface_getopt+0x56>
   1db74:	2016      	movs	r0, #22
   1db76:	e790      	b.n	1da9a <pdn_interface_getopt+0x56>
   1db78:	2009      	movs	r0, #9
   1db7a:	f7f7 fdd1 	bl	15720 <bsd_os_errno_set>
   1db7e:	f04f 30ff 	mov.w	r0, #4294967295
   1db82:	e78e      	b.n	1daa2 <pdn_interface_getopt+0x5e>
   1db84:	4812      	ldr	r0, [pc, #72]	; (1dbd0 <pdn_interface_getopt+0x18c>)
   1db86:	f004 ff71 	bl	22a6c <strlen>
   1db8a:	490f      	ldr	r1, [pc, #60]	; (1dbc8 <pdn_interface_getopt+0x184>)
   1db8c:	4602      	mov	r2, r0
   1db8e:	4810      	ldr	r0, [pc, #64]	; (1dbd0 <pdn_interface_getopt+0x18c>)
   1db90:	f004 ff9a 	bl	22ac8 <strncmp>
   1db94:	b950      	cbnz	r0, 1dbac <pdn_interface_getopt+0x168>
   1db96:	2008      	movs	r0, #8
   1db98:	f7f7 fdc2 	bl	15720 <bsd_os_errno_set>
   1db9c:	f04f 30ff 	mov.w	r0, #4294967295
   1dba0:	e77b      	b.n	1da9a <pdn_interface_getopt+0x56>
   1dba2:	220a      	movs	r2, #10
   1dba4:	2108      	movs	r1, #8
   1dba6:	6032      	str	r2, [r6, #0]
   1dba8:	2204      	movs	r2, #4
   1dbaa:	e7d9      	b.n	1db60 <pdn_interface_getopt+0x11c>
   1dbac:	2005      	movs	r0, #5
   1dbae:	f7f7 fdb7 	bl	15720 <bsd_os_errno_set>
   1dbb2:	f04f 30ff 	mov.w	r0, #4294967295
   1dbb6:	e770      	b.n	1da9a <pdn_interface_getopt+0x56>
   1dbb8:	789a0000 	.word	0x789a0000
   1dbbc:	20021b80 	.word	0x20021b80
   1dbc0:	0002bd30 	.word	0x0002bd30
   1dbc4:	0002bd50 	.word	0x0002bd50
   1dbc8:	20021a80 	.word	0x20021a80
   1dbcc:	0002bd3c 	.word	0x0002bd3c
   1dbd0:	0002bd60 	.word	0x0002bd60
   1dbd4:	20021a7c 	.word	0x20021a7c

0001dbd8 <pdn_interface_pdn_id_get>:
   1dbd8:	2900      	cmp	r1, #0
   1dbda:	f000 82e0 	beq.w	1e19e <pdn_interface_pdn_id_get+0x5c6>
   1dbde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dbe2:	4ca5      	ldr	r4, [pc, #660]	; (1de78 <pdn_interface_pdn_id_get+0x2a0>)
   1dbe4:	2802      	cmp	r0, #2
   1dbe6:	b083      	sub	sp, #12
   1dbe8:	460d      	mov	r5, r1
   1dbea:	6823      	ldr	r3, [r4, #0]
   1dbec:	f000 808f 	beq.w	1dd0e <pdn_interface_pdn_id_get+0x136>
   1dbf0:	280a      	cmp	r0, #10
   1dbf2:	d03f      	beq.n	1dc74 <pdn_interface_pdn_id_get+0x9c>
   1dbf4:	b11b      	cbz	r3, 1dbfe <pdn_interface_pdn_id_get+0x26>
   1dbf6:	689a      	ldr	r2, [r3, #8]
   1dbf8:	2a03      	cmp	r2, #3
   1dbfa:	f000 80e2 	beq.w	1ddc2 <pdn_interface_pdn_id_get+0x1ea>
   1dbfe:	6863      	ldr	r3, [r4, #4]
   1dc00:	b11b      	cbz	r3, 1dc0a <pdn_interface_pdn_id_get+0x32>
   1dc02:	689a      	ldr	r2, [r3, #8]
   1dc04:	2a03      	cmp	r2, #3
   1dc06:	f000 80d2 	beq.w	1ddae <pdn_interface_pdn_id_get+0x1d6>
   1dc0a:	68a3      	ldr	r3, [r4, #8]
   1dc0c:	b11b      	cbz	r3, 1dc16 <pdn_interface_pdn_id_get+0x3e>
   1dc0e:	689a      	ldr	r2, [r3, #8]
   1dc10:	2a03      	cmp	r2, #3
   1dc12:	f000 80ff 	beq.w	1de14 <pdn_interface_pdn_id_get+0x23c>
   1dc16:	68e3      	ldr	r3, [r4, #12]
   1dc18:	b11b      	cbz	r3, 1dc22 <pdn_interface_pdn_id_get+0x4a>
   1dc1a:	689a      	ldr	r2, [r3, #8]
   1dc1c:	2a03      	cmp	r2, #3
   1dc1e:	f000 8121 	beq.w	1de64 <pdn_interface_pdn_id_get+0x28c>
   1dc22:	6923      	ldr	r3, [r4, #16]
   1dc24:	b11b      	cbz	r3, 1dc2e <pdn_interface_pdn_id_get+0x56>
   1dc26:	689a      	ldr	r2, [r3, #8]
   1dc28:	2a03      	cmp	r2, #3
   1dc2a:	f000 8111 	beq.w	1de50 <pdn_interface_pdn_id_get+0x278>
   1dc2e:	6963      	ldr	r3, [r4, #20]
   1dc30:	b11b      	cbz	r3, 1dc3a <pdn_interface_pdn_id_get+0x62>
   1dc32:	689a      	ldr	r2, [r3, #8]
   1dc34:	2a03      	cmp	r2, #3
   1dc36:	f000 8101 	beq.w	1de3c <pdn_interface_pdn_id_get+0x264>
   1dc3a:	69a3      	ldr	r3, [r4, #24]
   1dc3c:	b11b      	cbz	r3, 1dc46 <pdn_interface_pdn_id_get+0x6e>
   1dc3e:	689a      	ldr	r2, [r3, #8]
   1dc40:	2a03      	cmp	r2, #3
   1dc42:	f000 80f1 	beq.w	1de28 <pdn_interface_pdn_id_get+0x250>
   1dc46:	69e3      	ldr	r3, [r4, #28]
   1dc48:	b11b      	cbz	r3, 1dc52 <pdn_interface_pdn_id_get+0x7a>
   1dc4a:	689a      	ldr	r2, [r3, #8]
   1dc4c:	2a03      	cmp	r2, #3
   1dc4e:	f000 80cc 	beq.w	1ddea <pdn_interface_pdn_id_get+0x212>
   1dc52:	6a23      	ldr	r3, [r4, #32]
   1dc54:	b11b      	cbz	r3, 1dc5e <pdn_interface_pdn_id_get+0x86>
   1dc56:	689a      	ldr	r2, [r3, #8]
   1dc58:	2a03      	cmp	r2, #3
   1dc5a:	f000 80bc 	beq.w	1ddd6 <pdn_interface_pdn_id_get+0x1fe>
   1dc5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dc60:	b11b      	cbz	r3, 1dc6a <pdn_interface_pdn_id_get+0x92>
   1dc62:	689a      	ldr	r2, [r3, #8]
   1dc64:	2a03      	cmp	r2, #3
   1dc66:	f000 80ca 	beq.w	1ddfe <pdn_interface_pdn_id_get+0x226>
   1dc6a:	f04f 30ff 	mov.w	r0, #4294967295
   1dc6e:	b003      	add	sp, #12
   1dc70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1dc74:	b11b      	cbz	r3, 1dc7e <pdn_interface_pdn_id_get+0xa6>
   1dc76:	689a      	ldr	r2, [r3, #8]
   1dc78:	2a03      	cmp	r2, #3
   1dc7a:	f000 80ff 	beq.w	1de7c <pdn_interface_pdn_id_get+0x2a4>
   1dc7e:	6863      	ldr	r3, [r4, #4]
   1dc80:	b11b      	cbz	r3, 1dc8a <pdn_interface_pdn_id_get+0xb2>
   1dc82:	689a      	ldr	r2, [r3, #8]
   1dc84:	2a03      	cmp	r2, #3
   1dc86:	f000 8158 	beq.w	1df3a <pdn_interface_pdn_id_get+0x362>
   1dc8a:	68a3      	ldr	r3, [r4, #8]
   1dc8c:	b11b      	cbz	r3, 1dc96 <pdn_interface_pdn_id_get+0xbe>
   1dc8e:	689a      	ldr	r2, [r3, #8]
   1dc90:	2a03      	cmp	r2, #3
   1dc92:	f000 81e3 	beq.w	1e05c <pdn_interface_pdn_id_get+0x484>
   1dc96:	68e3      	ldr	r3, [r4, #12]
   1dc98:	b11b      	cbz	r3, 1dca2 <pdn_interface_pdn_id_get+0xca>
   1dc9a:	689e      	ldr	r6, [r3, #8]
   1dc9c:	2e03      	cmp	r6, #3
   1dc9e:	f000 8195 	beq.w	1dfcc <pdn_interface_pdn_id_get+0x3f4>
   1dca2:	6923      	ldr	r3, [r4, #16]
   1dca4:	b11b      	cbz	r3, 1dcae <pdn_interface_pdn_id_get+0xd6>
   1dca6:	689a      	ldr	r2, [r3, #8]
   1dca8:	2a03      	cmp	r2, #3
   1dcaa:	f000 81a1 	beq.w	1dff0 <pdn_interface_pdn_id_get+0x418>
   1dcae:	6963      	ldr	r3, [r4, #20]
   1dcb0:	b11b      	cbz	r3, 1dcba <pdn_interface_pdn_id_get+0xe2>
   1dcb2:	689a      	ldr	r2, [r3, #8]
   1dcb4:	2a03      	cmp	r2, #3
   1dcb6:	f000 81e2 	beq.w	1e07e <pdn_interface_pdn_id_get+0x4a6>
   1dcba:	69a3      	ldr	r3, [r4, #24]
   1dcbc:	b11b      	cbz	r3, 1dcc6 <pdn_interface_pdn_id_get+0xee>
   1dcbe:	689a      	ldr	r2, [r3, #8]
   1dcc0:	2a03      	cmp	r2, #3
   1dcc2:	f000 825b 	beq.w	1e17c <pdn_interface_pdn_id_get+0x5a4>
   1dcc6:	69e3      	ldr	r3, [r4, #28]
   1dcc8:	b11b      	cbz	r3, 1dcd2 <pdn_interface_pdn_id_get+0xfa>
   1dcca:	689a      	ldr	r2, [r3, #8]
   1dccc:	2a03      	cmp	r2, #3
   1dcce:	f000 8233 	beq.w	1e138 <pdn_interface_pdn_id_get+0x560>
   1dcd2:	6a23      	ldr	r3, [r4, #32]
   1dcd4:	b11b      	cbz	r3, 1dcde <pdn_interface_pdn_id_get+0x106>
   1dcd6:	689a      	ldr	r2, [r3, #8]
   1dcd8:	2a03      	cmp	r2, #3
   1dcda:	f000 823e 	beq.w	1e15a <pdn_interface_pdn_id_get+0x582>
   1dcde:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dce0:	2b00      	cmp	r3, #0
   1dce2:	d0c2      	beq.n	1dc6a <pdn_interface_pdn_id_get+0x92>
   1dce4:	689a      	ldr	r2, [r3, #8]
   1dce6:	2a03      	cmp	r2, #3
   1dce8:	d1bf      	bne.n	1dc6a <pdn_interface_pdn_id_get+0x92>
   1dcea:	e9d3 1205 	ldrd	r1, r2, [r3, #20]
   1dcee:	440a      	add	r2, r1
   1dcf0:	f102 0120 	add.w	r1, r2, #32
   1dcf4:	4628      	mov	r0, r5
   1dcf6:	4419      	add	r1, r3
   1dcf8:	2264      	movs	r2, #100	; 0x64
   1dcfa:	f004 fee5 	bl	22ac8 <strncmp>
   1dcfe:	2800      	cmp	r0, #0
   1dd00:	d1b3      	bne.n	1dc6a <pdn_interface_pdn_id_get+0x92>
   1dd02:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dd04:	68da      	ldr	r2, [r3, #12]
   1dd06:	0792      	lsls	r2, r2, #30
   1dd08:	d5af      	bpl.n	1dc6a <pdn_interface_pdn_id_get+0x92>
   1dd0a:	2609      	movs	r6, #9
   1dd0c:	e0c8      	b.n	1dea0 <pdn_interface_pdn_id_get+0x2c8>
   1dd0e:	b11b      	cbz	r3, 1dd18 <pdn_interface_pdn_id_get+0x140>
   1dd10:	689a      	ldr	r2, [r3, #8]
   1dd12:	2a03      	cmp	r2, #3
   1dd14:	f000 8124 	beq.w	1df60 <pdn_interface_pdn_id_get+0x388>
   1dd18:	6863      	ldr	r3, [r4, #4]
   1dd1a:	b11b      	cbz	r3, 1dd24 <pdn_interface_pdn_id_get+0x14c>
   1dd1c:	689a      	ldr	r2, [r3, #8]
   1dd1e:	2a03      	cmp	r2, #3
   1dd20:	f000 8130 	beq.w	1df84 <pdn_interface_pdn_id_get+0x3ac>
   1dd24:	68a3      	ldr	r3, [r4, #8]
   1dd26:	b11b      	cbz	r3, 1dd30 <pdn_interface_pdn_id_get+0x158>
   1dd28:	689a      	ldr	r2, [r3, #8]
   1dd2a:	2a03      	cmp	r2, #3
   1dd2c:	f000 8183 	beq.w	1e036 <pdn_interface_pdn_id_get+0x45e>
   1dd30:	68e3      	ldr	r3, [r4, #12]
   1dd32:	b11b      	cbz	r3, 1dd3c <pdn_interface_pdn_id_get+0x164>
   1dd34:	689e      	ldr	r6, [r3, #8]
   1dd36:	2e03      	cmp	r6, #3
   1dd38:	f000 816b 	beq.w	1e012 <pdn_interface_pdn_id_get+0x43a>
   1dd3c:	6923      	ldr	r3, [r4, #16]
   1dd3e:	b11b      	cbz	r3, 1dd48 <pdn_interface_pdn_id_get+0x170>
   1dd40:	689a      	ldr	r2, [r3, #8]
   1dd42:	2a03      	cmp	r2, #3
   1dd44:	f000 812f 	beq.w	1dfa6 <pdn_interface_pdn_id_get+0x3ce>
   1dd48:	6963      	ldr	r3, [r4, #20]
   1dd4a:	b11b      	cbz	r3, 1dd54 <pdn_interface_pdn_id_get+0x17c>
   1dd4c:	689a      	ldr	r2, [r3, #8]
   1dd4e:	2a03      	cmp	r2, #3
   1dd50:	f000 81a8 	beq.w	1e0a4 <pdn_interface_pdn_id_get+0x4cc>
   1dd54:	69a3      	ldr	r3, [r4, #24]
   1dd56:	b11b      	cbz	r3, 1dd60 <pdn_interface_pdn_id_get+0x188>
   1dd58:	689a      	ldr	r2, [r3, #8]
   1dd5a:	2a03      	cmp	r2, #3
   1dd5c:	f000 81b3 	beq.w	1e0c6 <pdn_interface_pdn_id_get+0x4ee>
   1dd60:	69e3      	ldr	r3, [r4, #28]
   1dd62:	b11b      	cbz	r3, 1dd6c <pdn_interface_pdn_id_get+0x194>
   1dd64:	689a      	ldr	r2, [r3, #8]
   1dd66:	2a03      	cmp	r2, #3
   1dd68:	f000 81c0 	beq.w	1e0ec <pdn_interface_pdn_id_get+0x514>
   1dd6c:	6a23      	ldr	r3, [r4, #32]
   1dd6e:	b11b      	cbz	r3, 1dd78 <pdn_interface_pdn_id_get+0x1a0>
   1dd70:	689a      	ldr	r2, [r3, #8]
   1dd72:	2a03      	cmp	r2, #3
   1dd74:	f000 81cd 	beq.w	1e112 <pdn_interface_pdn_id_get+0x53a>
   1dd78:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dd7a:	2b00      	cmp	r3, #0
   1dd7c:	f43f af75 	beq.w	1dc6a <pdn_interface_pdn_id_get+0x92>
   1dd80:	689a      	ldr	r2, [r3, #8]
   1dd82:	2a03      	cmp	r2, #3
   1dd84:	f47f af71 	bne.w	1dc6a <pdn_interface_pdn_id_get+0x92>
   1dd88:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1dd8c:	440a      	add	r2, r1
   1dd8e:	f102 0120 	add.w	r1, r2, #32
   1dd92:	4628      	mov	r0, r5
   1dd94:	4419      	add	r1, r3
   1dd96:	2264      	movs	r2, #100	; 0x64
   1dd98:	f004 fe96 	bl	22ac8 <strncmp>
   1dd9c:	2800      	cmp	r0, #0
   1dd9e:	f47f af64 	bne.w	1dc6a <pdn_interface_pdn_id_get+0x92>
   1dda2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dda4:	68da      	ldr	r2, [r3, #12]
   1dda6:	07d2      	lsls	r2, r2, #31
   1dda8:	f57f af5f 	bpl.w	1dc6a <pdn_interface_pdn_id_get+0x92>
   1ddac:	e7ad      	b.n	1dd0a <pdn_interface_pdn_id_get+0x132>
   1ddae:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1ddb2:	4401      	add	r1, r0
   1ddb4:	3120      	adds	r1, #32
   1ddb6:	2264      	movs	r2, #100	; 0x64
   1ddb8:	4419      	add	r1, r3
   1ddba:	4628      	mov	r0, r5
   1ddbc:	f004 fe84 	bl	22ac8 <strncmp>
   1ddc0:	e723      	b.n	1dc0a <pdn_interface_pdn_id_get+0x32>
   1ddc2:	e9d3 0105 	ldrd	r0, r1, [r3, #20]
   1ddc6:	4401      	add	r1, r0
   1ddc8:	3120      	adds	r1, #32
   1ddca:	2264      	movs	r2, #100	; 0x64
   1ddcc:	4419      	add	r1, r3
   1ddce:	4628      	mov	r0, r5
   1ddd0:	f004 fe7a 	bl	22ac8 <strncmp>
   1ddd4:	e713      	b.n	1dbfe <pdn_interface_pdn_id_get+0x26>
   1ddd6:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1ddda:	4401      	add	r1, r0
   1dddc:	3120      	adds	r1, #32
   1ddde:	2264      	movs	r2, #100	; 0x64
   1dde0:	4419      	add	r1, r3
   1dde2:	4628      	mov	r0, r5
   1dde4:	f004 fe70 	bl	22ac8 <strncmp>
   1dde8:	e739      	b.n	1dc5e <pdn_interface_pdn_id_get+0x86>
   1ddea:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1ddee:	4401      	add	r1, r0
   1ddf0:	3120      	adds	r1, #32
   1ddf2:	2264      	movs	r2, #100	; 0x64
   1ddf4:	4419      	add	r1, r3
   1ddf6:	4628      	mov	r0, r5
   1ddf8:	f004 fe66 	bl	22ac8 <strncmp>
   1ddfc:	e729      	b.n	1dc52 <pdn_interface_pdn_id_get+0x7a>
   1ddfe:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1de02:	440a      	add	r2, r1
   1de04:	f102 0120 	add.w	r1, r2, #32
   1de08:	4628      	mov	r0, r5
   1de0a:	4419      	add	r1, r3
   1de0c:	2264      	movs	r2, #100	; 0x64
   1de0e:	f004 fe5b 	bl	22ac8 <strncmp>
   1de12:	e72a      	b.n	1dc6a <pdn_interface_pdn_id_get+0x92>
   1de14:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1de18:	4401      	add	r1, r0
   1de1a:	3120      	adds	r1, #32
   1de1c:	2264      	movs	r2, #100	; 0x64
   1de1e:	4419      	add	r1, r3
   1de20:	4628      	mov	r0, r5
   1de22:	f004 fe51 	bl	22ac8 <strncmp>
   1de26:	e6f6      	b.n	1dc16 <pdn_interface_pdn_id_get+0x3e>
   1de28:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1de2c:	4401      	add	r1, r0
   1de2e:	3120      	adds	r1, #32
   1de30:	2264      	movs	r2, #100	; 0x64
   1de32:	4419      	add	r1, r3
   1de34:	4628      	mov	r0, r5
   1de36:	f004 fe47 	bl	22ac8 <strncmp>
   1de3a:	e704      	b.n	1dc46 <pdn_interface_pdn_id_get+0x6e>
   1de3c:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1de40:	4401      	add	r1, r0
   1de42:	3120      	adds	r1, #32
   1de44:	2264      	movs	r2, #100	; 0x64
   1de46:	4419      	add	r1, r3
   1de48:	4628      	mov	r0, r5
   1de4a:	f004 fe3d 	bl	22ac8 <strncmp>
   1de4e:	e6f4      	b.n	1dc3a <pdn_interface_pdn_id_get+0x62>
   1de50:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1de54:	4401      	add	r1, r0
   1de56:	3120      	adds	r1, #32
   1de58:	2264      	movs	r2, #100	; 0x64
   1de5a:	4419      	add	r1, r3
   1de5c:	4628      	mov	r0, r5
   1de5e:	f004 fe33 	bl	22ac8 <strncmp>
   1de62:	e6e4      	b.n	1dc2e <pdn_interface_pdn_id_get+0x56>
   1de64:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1de68:	4401      	add	r1, r0
   1de6a:	3120      	adds	r1, #32
   1de6c:	2264      	movs	r2, #100	; 0x64
   1de6e:	4419      	add	r1, r3
   1de70:	4628      	mov	r0, r5
   1de72:	f004 fe29 	bl	22ac8 <strncmp>
   1de76:	e6d4      	b.n	1dc22 <pdn_interface_pdn_id_get+0x4a>
   1de78:	20021b80 	.word	0x20021b80
   1de7c:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1de80:	4401      	add	r1, r0
   1de82:	3120      	adds	r1, #32
   1de84:	2264      	movs	r2, #100	; 0x64
   1de86:	4419      	add	r1, r3
   1de88:	4628      	mov	r0, r5
   1de8a:	f004 fe1d 	bl	22ac8 <strncmp>
   1de8e:	4606      	mov	r6, r0
   1de90:	2800      	cmp	r0, #0
   1de92:	f47f aef4 	bne.w	1dc7e <pdn_interface_pdn_id_get+0xa6>
   1de96:	6823      	ldr	r3, [r4, #0]
   1de98:	68da      	ldr	r2, [r3, #12]
   1de9a:	0797      	lsls	r7, r2, #30
   1de9c:	f57f aeef 	bpl.w	1dc7e <pdn_interface_pdn_id_get+0xa6>
   1dea0:	6858      	ldr	r0, [r3, #4]
   1dea2:	1c43      	adds	r3, r0, #1
   1dea4:	f47f aee3 	bne.w	1dc6e <pdn_interface_pdn_id_get+0x96>
   1dea8:	4dbe      	ldr	r5, [pc, #760]	; (1e1a4 <pdn_interface_pdn_id_get+0x5cc>)
   1deaa:	4bbf      	ldr	r3, [pc, #764]	; (1e1a8 <pdn_interface_pdn_id_get+0x5d0>)
   1deac:	4abf      	ldr	r2, [pc, #764]	; (1e1ac <pdn_interface_pdn_id_get+0x5d4>)
   1deae:	f44f 7180 	mov.w	r1, #256	; 0x100
   1deb2:	4628      	mov	r0, r5
   1deb4:	f004 fc3a 	bl	2272c <snprintf>
   1deb8:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1debc:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1dec0:	681b      	ldr	r3, [r3, #0]
   1dec2:	4abb      	ldr	r2, [pc, #748]	; (1e1b0 <pdn_interface_pdn_id_get+0x5d8>)
   1dec4:	4428      	add	r0, r5
   1dec6:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 1e1b8 <pdn_interface_pdn_id_get+0x5e0>
   1deca:	f004 fc2f 	bl	2272c <snprintf>
   1dece:	4628      	mov	r0, r5
   1ded0:	f8d8 9000 	ldr.w	r9, [r8]
   1ded4:	2700      	movs	r7, #0
   1ded6:	f004 fdc9 	bl	22a6c <strlen>
   1deda:	4629      	mov	r1, r5
   1dedc:	4602      	mov	r2, r0
   1dede:	463b      	mov	r3, r7
   1dee0:	4648      	mov	r0, r9
   1dee2:	9701      	str	r7, [sp, #4]
   1dee4:	9700      	str	r7, [sp, #0]
   1dee6:	f7fe fe1d 	bl	1cb24 <at_interface_write>
   1deea:	4681      	mov	r9, r0
   1deec:	4628      	mov	r0, r5
   1deee:	f004 fdbd 	bl	22a6c <strlen>
   1def2:	4548      	cmp	r0, r9
   1def4:	f040 8172 	bne.w	1e1dc <pdn_interface_pdn_id_get+0x604>
   1def8:	463b      	mov	r3, r7
   1defa:	f44f 7280 	mov.w	r2, #256	; 0x100
   1defe:	e9cd 7700 	strd	r7, r7, [sp]
   1df02:	4629      	mov	r1, r5
   1df04:	f8d8 0000 	ldr.w	r0, [r8]
   1df08:	f7fe ff60 	bl	1cdcc <at_interface_read>
   1df0c:	4607      	mov	r7, r0
   1df0e:	48a9      	ldr	r0, [pc, #676]	; (1e1b4 <pdn_interface_pdn_id_get+0x5dc>)
   1df10:	f004 fdac 	bl	22a6c <strlen>
   1df14:	4287      	cmp	r7, r0
   1df16:	4602      	mov	r2, r0
   1df18:	f2c0 8150 	blt.w	1e1bc <pdn_interface_pdn_id_get+0x5e4>
   1df1c:	4629      	mov	r1, r5
   1df1e:	48a5      	ldr	r0, [pc, #660]	; (1e1b4 <pdn_interface_pdn_id_get+0x5dc>)
   1df20:	f004 fdd2 	bl	22ac8 <strncmp>
   1df24:	2800      	cmp	r0, #0
   1df26:	f040 8149 	bne.w	1e1bc <pdn_interface_pdn_id_get+0x5e4>
   1df2a:	4629      	mov	r1, r5
   1df2c:	4630      	mov	r0, r6
   1df2e:	f7ff f86d 	bl	1d00c <pdn_id_get_parser>
   1df32:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1df36:	6858      	ldr	r0, [r3, #4]
   1df38:	e699      	b.n	1dc6e <pdn_interface_pdn_id_get+0x96>
   1df3a:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1df3e:	4401      	add	r1, r0
   1df40:	3120      	adds	r1, #32
   1df42:	2264      	movs	r2, #100	; 0x64
   1df44:	4419      	add	r1, r3
   1df46:	4628      	mov	r0, r5
   1df48:	f004 fdbe 	bl	22ac8 <strncmp>
   1df4c:	2800      	cmp	r0, #0
   1df4e:	f47f ae9c 	bne.w	1dc8a <pdn_interface_pdn_id_get+0xb2>
   1df52:	6863      	ldr	r3, [r4, #4]
   1df54:	68da      	ldr	r2, [r3, #12]
   1df56:	0796      	lsls	r6, r2, #30
   1df58:	f57f ae97 	bpl.w	1dc8a <pdn_interface_pdn_id_get+0xb2>
   1df5c:	2601      	movs	r6, #1
   1df5e:	e79f      	b.n	1dea0 <pdn_interface_pdn_id_get+0x2c8>
   1df60:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1df64:	4401      	add	r1, r0
   1df66:	3120      	adds	r1, #32
   1df68:	2264      	movs	r2, #100	; 0x64
   1df6a:	4419      	add	r1, r3
   1df6c:	4628      	mov	r0, r5
   1df6e:	f004 fdab 	bl	22ac8 <strncmp>
   1df72:	4606      	mov	r6, r0
   1df74:	2800      	cmp	r0, #0
   1df76:	f47f aecf 	bne.w	1dd18 <pdn_interface_pdn_id_get+0x140>
   1df7a:	6823      	ldr	r3, [r4, #0]
   1df7c:	68da      	ldr	r2, [r3, #12]
   1df7e:	07d7      	lsls	r7, r2, #31
   1df80:	d48e      	bmi.n	1dea0 <pdn_interface_pdn_id_get+0x2c8>
   1df82:	e6c9      	b.n	1dd18 <pdn_interface_pdn_id_get+0x140>
   1df84:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1df88:	4401      	add	r1, r0
   1df8a:	3120      	adds	r1, #32
   1df8c:	2264      	movs	r2, #100	; 0x64
   1df8e:	4419      	add	r1, r3
   1df90:	4628      	mov	r0, r5
   1df92:	f004 fd99 	bl	22ac8 <strncmp>
   1df96:	2800      	cmp	r0, #0
   1df98:	f47f aec4 	bne.w	1dd24 <pdn_interface_pdn_id_get+0x14c>
   1df9c:	6863      	ldr	r3, [r4, #4]
   1df9e:	68da      	ldr	r2, [r3, #12]
   1dfa0:	07d6      	lsls	r6, r2, #31
   1dfa2:	d4db      	bmi.n	1df5c <pdn_interface_pdn_id_get+0x384>
   1dfa4:	e6be      	b.n	1dd24 <pdn_interface_pdn_id_get+0x14c>
   1dfa6:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1dfaa:	4401      	add	r1, r0
   1dfac:	3120      	adds	r1, #32
   1dfae:	2264      	movs	r2, #100	; 0x64
   1dfb0:	4419      	add	r1, r3
   1dfb2:	4628      	mov	r0, r5
   1dfb4:	f004 fd88 	bl	22ac8 <strncmp>
   1dfb8:	2800      	cmp	r0, #0
   1dfba:	f47f aec5 	bne.w	1dd48 <pdn_interface_pdn_id_get+0x170>
   1dfbe:	6923      	ldr	r3, [r4, #16]
   1dfc0:	68da      	ldr	r2, [r3, #12]
   1dfc2:	07d2      	lsls	r2, r2, #31
   1dfc4:	f57f aec0 	bpl.w	1dd48 <pdn_interface_pdn_id_get+0x170>
   1dfc8:	2604      	movs	r6, #4
   1dfca:	e769      	b.n	1dea0 <pdn_interface_pdn_id_get+0x2c8>
   1dfcc:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1dfd0:	4401      	add	r1, r0
   1dfd2:	3120      	adds	r1, #32
   1dfd4:	2264      	movs	r2, #100	; 0x64
   1dfd6:	4419      	add	r1, r3
   1dfd8:	4628      	mov	r0, r5
   1dfda:	f004 fd75 	bl	22ac8 <strncmp>
   1dfde:	2800      	cmp	r0, #0
   1dfe0:	f47f ae5f 	bne.w	1dca2 <pdn_interface_pdn_id_get+0xca>
   1dfe4:	68e3      	ldr	r3, [r4, #12]
   1dfe6:	68da      	ldr	r2, [r3, #12]
   1dfe8:	0791      	lsls	r1, r2, #30
   1dfea:	f53f af59 	bmi.w	1dea0 <pdn_interface_pdn_id_get+0x2c8>
   1dfee:	e658      	b.n	1dca2 <pdn_interface_pdn_id_get+0xca>
   1dff0:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1dff4:	4401      	add	r1, r0
   1dff6:	3120      	adds	r1, #32
   1dff8:	2264      	movs	r2, #100	; 0x64
   1dffa:	4419      	add	r1, r3
   1dffc:	4628      	mov	r0, r5
   1dffe:	f004 fd63 	bl	22ac8 <strncmp>
   1e002:	2800      	cmp	r0, #0
   1e004:	f47f ae53 	bne.w	1dcae <pdn_interface_pdn_id_get+0xd6>
   1e008:	6923      	ldr	r3, [r4, #16]
   1e00a:	68da      	ldr	r2, [r3, #12]
   1e00c:	0792      	lsls	r2, r2, #30
   1e00e:	d4db      	bmi.n	1dfc8 <pdn_interface_pdn_id_get+0x3f0>
   1e010:	e64d      	b.n	1dcae <pdn_interface_pdn_id_get+0xd6>
   1e012:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1e016:	4401      	add	r1, r0
   1e018:	3120      	adds	r1, #32
   1e01a:	2264      	movs	r2, #100	; 0x64
   1e01c:	4419      	add	r1, r3
   1e01e:	4628      	mov	r0, r5
   1e020:	f004 fd52 	bl	22ac8 <strncmp>
   1e024:	2800      	cmp	r0, #0
   1e026:	f47f ae89 	bne.w	1dd3c <pdn_interface_pdn_id_get+0x164>
   1e02a:	68e3      	ldr	r3, [r4, #12]
   1e02c:	68da      	ldr	r2, [r3, #12]
   1e02e:	07d1      	lsls	r1, r2, #31
   1e030:	f53f af36 	bmi.w	1dea0 <pdn_interface_pdn_id_get+0x2c8>
   1e034:	e682      	b.n	1dd3c <pdn_interface_pdn_id_get+0x164>
   1e036:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1e03a:	4401      	add	r1, r0
   1e03c:	3120      	adds	r1, #32
   1e03e:	2264      	movs	r2, #100	; 0x64
   1e040:	4419      	add	r1, r3
   1e042:	4628      	mov	r0, r5
   1e044:	f004 fd40 	bl	22ac8 <strncmp>
   1e048:	2800      	cmp	r0, #0
   1e04a:	f47f ae71 	bne.w	1dd30 <pdn_interface_pdn_id_get+0x158>
   1e04e:	68a3      	ldr	r3, [r4, #8]
   1e050:	68da      	ldr	r2, [r3, #12]
   1e052:	07d0      	lsls	r0, r2, #31
   1e054:	f57f ae6c 	bpl.w	1dd30 <pdn_interface_pdn_id_get+0x158>
   1e058:	2602      	movs	r6, #2
   1e05a:	e721      	b.n	1dea0 <pdn_interface_pdn_id_get+0x2c8>
   1e05c:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1e060:	4401      	add	r1, r0
   1e062:	3120      	adds	r1, #32
   1e064:	2264      	movs	r2, #100	; 0x64
   1e066:	4419      	add	r1, r3
   1e068:	4628      	mov	r0, r5
   1e06a:	f004 fd2d 	bl	22ac8 <strncmp>
   1e06e:	2800      	cmp	r0, #0
   1e070:	f47f ae11 	bne.w	1dc96 <pdn_interface_pdn_id_get+0xbe>
   1e074:	68a3      	ldr	r3, [r4, #8]
   1e076:	68da      	ldr	r2, [r3, #12]
   1e078:	0790      	lsls	r0, r2, #30
   1e07a:	d4ed      	bmi.n	1e058 <pdn_interface_pdn_id_get+0x480>
   1e07c:	e60b      	b.n	1dc96 <pdn_interface_pdn_id_get+0xbe>
   1e07e:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1e082:	4401      	add	r1, r0
   1e084:	3120      	adds	r1, #32
   1e086:	2264      	movs	r2, #100	; 0x64
   1e088:	4419      	add	r1, r3
   1e08a:	4628      	mov	r0, r5
   1e08c:	f004 fd1c 	bl	22ac8 <strncmp>
   1e090:	2800      	cmp	r0, #0
   1e092:	f47f ae12 	bne.w	1dcba <pdn_interface_pdn_id_get+0xe2>
   1e096:	6963      	ldr	r3, [r4, #20]
   1e098:	68da      	ldr	r2, [r3, #12]
   1e09a:	0797      	lsls	r7, r2, #30
   1e09c:	f57f ae0d 	bpl.w	1dcba <pdn_interface_pdn_id_get+0xe2>
   1e0a0:	2605      	movs	r6, #5
   1e0a2:	e6fd      	b.n	1dea0 <pdn_interface_pdn_id_get+0x2c8>
   1e0a4:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1e0a8:	4401      	add	r1, r0
   1e0aa:	3120      	adds	r1, #32
   1e0ac:	2264      	movs	r2, #100	; 0x64
   1e0ae:	4419      	add	r1, r3
   1e0b0:	4628      	mov	r0, r5
   1e0b2:	f004 fd09 	bl	22ac8 <strncmp>
   1e0b6:	2800      	cmp	r0, #0
   1e0b8:	f47f ae4c 	bne.w	1dd54 <pdn_interface_pdn_id_get+0x17c>
   1e0bc:	6963      	ldr	r3, [r4, #20]
   1e0be:	68da      	ldr	r2, [r3, #12]
   1e0c0:	07d7      	lsls	r7, r2, #31
   1e0c2:	d4ed      	bmi.n	1e0a0 <pdn_interface_pdn_id_get+0x4c8>
   1e0c4:	e646      	b.n	1dd54 <pdn_interface_pdn_id_get+0x17c>
   1e0c6:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1e0ca:	4401      	add	r1, r0
   1e0cc:	3120      	adds	r1, #32
   1e0ce:	2264      	movs	r2, #100	; 0x64
   1e0d0:	4419      	add	r1, r3
   1e0d2:	4628      	mov	r0, r5
   1e0d4:	f004 fcf8 	bl	22ac8 <strncmp>
   1e0d8:	2800      	cmp	r0, #0
   1e0da:	f47f ae41 	bne.w	1dd60 <pdn_interface_pdn_id_get+0x188>
   1e0de:	69a3      	ldr	r3, [r4, #24]
   1e0e0:	68da      	ldr	r2, [r3, #12]
   1e0e2:	07d6      	lsls	r6, r2, #31
   1e0e4:	f57f ae3c 	bpl.w	1dd60 <pdn_interface_pdn_id_get+0x188>
   1e0e8:	2606      	movs	r6, #6
   1e0ea:	e6d9      	b.n	1dea0 <pdn_interface_pdn_id_get+0x2c8>
   1e0ec:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1e0f0:	4401      	add	r1, r0
   1e0f2:	3120      	adds	r1, #32
   1e0f4:	2264      	movs	r2, #100	; 0x64
   1e0f6:	4419      	add	r1, r3
   1e0f8:	4628      	mov	r0, r5
   1e0fa:	f004 fce5 	bl	22ac8 <strncmp>
   1e0fe:	2800      	cmp	r0, #0
   1e100:	f47f ae34 	bne.w	1dd6c <pdn_interface_pdn_id_get+0x194>
   1e104:	69e3      	ldr	r3, [r4, #28]
   1e106:	68da      	ldr	r2, [r3, #12]
   1e108:	07d0      	lsls	r0, r2, #31
   1e10a:	f57f ae2f 	bpl.w	1dd6c <pdn_interface_pdn_id_get+0x194>
   1e10e:	2607      	movs	r6, #7
   1e110:	e6c6      	b.n	1dea0 <pdn_interface_pdn_id_get+0x2c8>
   1e112:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1e116:	4401      	add	r1, r0
   1e118:	3120      	adds	r1, #32
   1e11a:	2264      	movs	r2, #100	; 0x64
   1e11c:	4419      	add	r1, r3
   1e11e:	4628      	mov	r0, r5
   1e120:	f004 fcd2 	bl	22ac8 <strncmp>
   1e124:	2800      	cmp	r0, #0
   1e126:	f47f ae27 	bne.w	1dd78 <pdn_interface_pdn_id_get+0x1a0>
   1e12a:	6a23      	ldr	r3, [r4, #32]
   1e12c:	68da      	ldr	r2, [r3, #12]
   1e12e:	07d1      	lsls	r1, r2, #31
   1e130:	f57f ae22 	bpl.w	1dd78 <pdn_interface_pdn_id_get+0x1a0>
   1e134:	2608      	movs	r6, #8
   1e136:	e6b3      	b.n	1dea0 <pdn_interface_pdn_id_get+0x2c8>
   1e138:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1e13c:	4401      	add	r1, r0
   1e13e:	3120      	adds	r1, #32
   1e140:	2264      	movs	r2, #100	; 0x64
   1e142:	4419      	add	r1, r3
   1e144:	4628      	mov	r0, r5
   1e146:	f004 fcbf 	bl	22ac8 <strncmp>
   1e14a:	2800      	cmp	r0, #0
   1e14c:	f47f adc1 	bne.w	1dcd2 <pdn_interface_pdn_id_get+0xfa>
   1e150:	69e3      	ldr	r3, [r4, #28]
   1e152:	68da      	ldr	r2, [r3, #12]
   1e154:	0790      	lsls	r0, r2, #30
   1e156:	d4da      	bmi.n	1e10e <pdn_interface_pdn_id_get+0x536>
   1e158:	e5bb      	b.n	1dcd2 <pdn_interface_pdn_id_get+0xfa>
   1e15a:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1e15e:	4401      	add	r1, r0
   1e160:	3120      	adds	r1, #32
   1e162:	2264      	movs	r2, #100	; 0x64
   1e164:	4419      	add	r1, r3
   1e166:	4628      	mov	r0, r5
   1e168:	f004 fcae 	bl	22ac8 <strncmp>
   1e16c:	2800      	cmp	r0, #0
   1e16e:	f47f adb6 	bne.w	1dcde <pdn_interface_pdn_id_get+0x106>
   1e172:	6a23      	ldr	r3, [r4, #32]
   1e174:	68da      	ldr	r2, [r3, #12]
   1e176:	0791      	lsls	r1, r2, #30
   1e178:	d4dc      	bmi.n	1e134 <pdn_interface_pdn_id_get+0x55c>
   1e17a:	e5b0      	b.n	1dcde <pdn_interface_pdn_id_get+0x106>
   1e17c:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1e180:	4401      	add	r1, r0
   1e182:	3120      	adds	r1, #32
   1e184:	2264      	movs	r2, #100	; 0x64
   1e186:	4419      	add	r1, r3
   1e188:	4628      	mov	r0, r5
   1e18a:	f004 fc9d 	bl	22ac8 <strncmp>
   1e18e:	2800      	cmp	r0, #0
   1e190:	f47f ad99 	bne.w	1dcc6 <pdn_interface_pdn_id_get+0xee>
   1e194:	69a3      	ldr	r3, [r4, #24]
   1e196:	68da      	ldr	r2, [r3, #12]
   1e198:	0796      	lsls	r6, r2, #30
   1e19a:	d4a5      	bmi.n	1e0e8 <pdn_interface_pdn_id_get+0x510>
   1e19c:	e593      	b.n	1dcc6 <pdn_interface_pdn_id_get+0xee>
   1e19e:	f04f 30ff 	mov.w	r0, #4294967295
   1e1a2:	4770      	bx	lr
   1e1a4:	20021a80 	.word	0x20021a80
   1e1a8:	0002bd0c 	.word	0x0002bd0c
   1e1ac:	0002bd50 	.word	0x0002bd50
   1e1b0:	0002bd08 	.word	0x0002bd08
   1e1b4:	0002bd1c 	.word	0x0002bd1c
   1e1b8:	20021a7c 	.word	0x20021a7c
   1e1bc:	480b      	ldr	r0, [pc, #44]	; (1e1ec <pdn_interface_pdn_id_get+0x614>)
   1e1be:	f004 fc55 	bl	22a6c <strlen>
   1e1c2:	490b      	ldr	r1, [pc, #44]	; (1e1f0 <pdn_interface_pdn_id_get+0x618>)
   1e1c4:	4602      	mov	r2, r0
   1e1c6:	4809      	ldr	r0, [pc, #36]	; (1e1ec <pdn_interface_pdn_id_get+0x614>)
   1e1c8:	f004 fc7e 	bl	22ac8 <strncmp>
   1e1cc:	b930      	cbnz	r0, 1e1dc <pdn_interface_pdn_id_get+0x604>
   1e1ce:	2008      	movs	r0, #8
   1e1d0:	f7f7 faa6 	bl	15720 <bsd_os_errno_set>
   1e1d4:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1e1d8:	6858      	ldr	r0, [r3, #4]
   1e1da:	e548      	b.n	1dc6e <pdn_interface_pdn_id_get+0x96>
   1e1dc:	2005      	movs	r0, #5
   1e1de:	f7f7 fa9f 	bl	15720 <bsd_os_errno_set>
   1e1e2:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1e1e6:	6858      	ldr	r0, [r3, #4]
   1e1e8:	e541      	b.n	1dc6e <pdn_interface_pdn_id_get+0x96>
   1e1ea:	bf00      	nop
   1e1ec:	0002bd60 	.word	0x0002bd60
   1e1f0:	20021a80 	.word	0x20021a80

0001e1f4 <bsd_platform_error_handler>:
   1e1f4:	b508      	push	{r3, lr}
   1e1f6:	f7f3 fa63 	bl	116c0 <bsd_recoverable_error_handler>
   1e1fa:	bd08      	pop	{r3, pc}

0001e1fc <bsd_init>:
   1e1fc:	b160      	cbz	r0, 1e218 <bsd_init+0x1c>
   1e1fe:	b510      	push	{r4, lr}
   1e200:	4c07      	ldr	r4, [pc, #28]	; (1e220 <bsd_init+0x24>)
   1e202:	7823      	ldrb	r3, [r4, #0]
   1e204:	b92b      	cbnz	r3, 1e212 <bsd_init+0x16>
   1e206:	f000 f81b 	bl	1e240 <bsd_platform_init>
   1e20a:	b908      	cbnz	r0, 1e210 <bsd_init+0x14>
   1e20c:	2301      	movs	r3, #1
   1e20e:	7023      	strb	r3, [r4, #0]
   1e210:	bd10      	pop	{r4, pc}
   1e212:	f04f 30ff 	mov.w	r0, #4294967295
   1e216:	bd10      	pop	{r4, pc}
   1e218:	f04f 30ff 	mov.w	r0, #4294967295
   1e21c:	4770      	bx	lr
   1e21e:	bf00      	nop
   1e220:	2002501b 	.word	0x2002501b

0001e224 <unimplemented_method>:
   1e224:	b40f      	push	{r0, r1, r2, r3}
   1e226:	b508      	push	{r3, lr}
   1e228:	202d      	movs	r0, #45	; 0x2d
   1e22a:	f7f7 fa79 	bl	15720 <bsd_os_errno_set>
   1e22e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1e232:	f04f 30ff 	mov.w	r0, #4294967295
   1e236:	b004      	add	sp, #16
   1e238:	4770      	bx	lr
   1e23a:	bf00      	nop

0001e23c <rpc_transport_ipc_fault_handler>:
   1e23c:	f7ff bfda 	b.w	1e1f4 <bsd_platform_error_handler>

0001e240 <bsd_platform_init>:
   1e240:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e242:	f04f 0c00 	mov.w	ip, #0
   1e246:	f247 0660 	movw	r6, #28768	; 0x7060
   1e24a:	f24b 0260 	movw	r2, #45152	; 0xb060
   1e24e:	6843      	ldr	r3, [r0, #4]
   1e250:	4d3a      	ldr	r5, [pc, #232]	; (1e33c <bsd_platform_init+0xfc>)
   1e252:	4607      	mov	r7, r0
   1e254:	602b      	str	r3, [r5, #0]
   1e256:	7801      	ldrb	r1, [r0, #0]
   1e258:	2006      	movs	r0, #6
   1e25a:	4561      	cmp	r1, ip
   1e25c:	bf08      	it	eq
   1e25e:	4632      	moveq	r2, r6
   1e260:	4413      	add	r3, r2
   1e262:	4c37      	ldr	r4, [pc, #220]	; (1e340 <bsd_platform_init+0x100>)
   1e264:	60ab      	str	r3, [r5, #8]
   1e266:	68b9      	ldr	r1, [r7, #8]
   1e268:	6063      	str	r3, [r4, #4]
   1e26a:	4b36      	ldr	r3, [pc, #216]	; (1e344 <bsd_platform_init+0x104>)
   1e26c:	b093      	sub	sp, #76	; 0x4c
   1e26e:	606a      	str	r2, [r5, #4]
   1e270:	f8a4 c000 	strh.w	ip, [r4]
   1e274:	1a8a      	subs	r2, r1, r2
   1e276:	60ea      	str	r2, [r5, #12]
   1e278:	60a2      	str	r2, [r4, #8]
   1e27a:	81a0      	strh	r0, [r4, #12]
   1e27c:	6123      	str	r3, [r4, #16]
   1e27e:	f001 f883 	bl	1f388 <nrf_mem_init>
   1e282:	2800      	cmp	r0, #0
   1e284:	d156      	bne.n	1e334 <bsd_platform_init+0xf4>
   1e286:	4621      	mov	r1, r4
   1e288:	a801      	add	r0, sp, #4
   1e28a:	f001 f8f1 	bl	1f470 <nrf_mem_register>
   1e28e:	2800      	cmp	r0, #0
   1e290:	d150      	bne.n	1e334 <bsd_platform_init+0xf4>
   1e292:	f7f7 fbd9 	bl	15a48 <bsd_os_init>
   1e296:	f7fd fbe1 	bl	1ba5c <rpc_framework_init>
   1e29a:	2800      	cmp	r0, #0
   1e29c:	d14a      	bne.n	1e334 <bsd_platform_init+0xf4>
   1e29e:	783a      	ldrb	r2, [r7, #0]
   1e2a0:	682b      	ldr	r3, [r5, #0]
   1e2a2:	bb32      	cbnz	r2, 1e2f2 <bsd_platform_init+0xb2>
   1e2a4:	4606      	mov	r6, r0
   1e2a6:	2220      	movs	r2, #32
   1e2a8:	2408      	movs	r4, #8
   1e2aa:	2500      	movs	r5, #0
   1e2ac:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   1e2b0:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   1e2b4:	f503 5141 	add.w	r1, r3, #12352	; 0x3040
   1e2b8:	4411      	add	r1, r2
   1e2ba:	9302      	str	r3, [sp, #8]
   1e2bc:	e9cd 6008 	strd	r6, r0, [sp, #32]
   1e2c0:	910c      	str	r1, [sp, #48]	; 0x30
   1e2c2:	9203      	str	r2, [sp, #12]
   1e2c4:	f103 0140 	add.w	r1, r3, #64	; 0x40
   1e2c8:	9205      	str	r2, [sp, #20]
   1e2ca:	9207      	str	r2, [sp, #28]
   1e2cc:	eb0d 0004 	add.w	r0, sp, r4
   1e2d0:	189a      	adds	r2, r3, r2
   1e2d2:	3360      	adds	r3, #96	; 0x60
   1e2d4:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   1e2d8:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   1e2dc:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
   1e2e0:	940f      	str	r4, [sp, #60]	; 0x3c
   1e2e2:	9104      	str	r1, [sp, #16]
   1e2e4:	9206      	str	r2, [sp, #24]
   1e2e6:	930a      	str	r3, [sp, #40]	; 0x28
   1e2e8:	f7fa fb1c 	bl	18924 <rpc_transport_ipc_init>
   1e2ec:	b128      	cbz	r0, 1e2fa <bsd_platform_init+0xba>
   1e2ee:	b013      	add	sp, #76	; 0x4c
   1e2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e2f2:	441e      	add	r6, r3
   1e2f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   1e2f8:	e7d5      	b.n	1e2a6 <bsd_platform_init+0x66>
   1e2fa:	f001 fda9 	bl	1fe50 <interface_init>
   1e2fe:	b9c8      	cbnz	r0, 1e334 <bsd_platform_init+0xf4>
   1e300:	f7fe fc8e 	bl	1cc20 <at_interface_init>
   1e304:	b9b0      	cbnz	r0, 1e334 <bsd_platform_init+0xf4>
   1e306:	f7fb fe2d 	bl	19f64 <ip_interface_init>
   1e30a:	b998      	cbnz	r0, 1e334 <bsd_platform_init+0xf4>
   1e30c:	f7fb f8e4 	bl	194d8 <tls_interface_init>
   1e310:	b980      	cbnz	r0, 1e334 <bsd_platform_init+0xf4>
   1e312:	f001 fab9 	bl	1f888 <mfu_interface_init>
   1e316:	b968      	cbnz	r0, 1e334 <bsd_platform_init+0xf4>
   1e318:	f7fe fed0 	bl	1d0bc <pdn_interface_init>
   1e31c:	b950      	cbnz	r0, 1e334 <bsd_platform_init+0xf4>
   1e31e:	f7fe fad5 	bl	1c8cc <gnss_interface_init>
   1e322:	b938      	cbnz	r0, 1e334 <bsd_platform_init+0xf4>
   1e324:	f7f9 fd3c 	bl	17da0 <logobj_interface_init>
   1e328:	1b40      	subs	r0, r0, r5
   1e32a:	bf18      	it	ne
   1e32c:	2001      	movne	r0, #1
   1e32e:	4240      	negs	r0, r0
   1e330:	b013      	add	sp, #76	; 0x4c
   1e332:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e334:	f04f 30ff 	mov.w	r0, #4294967295
   1e338:	b013      	add	sp, #76	; 0x4c
   1e33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e33c:	20021bbc 	.word	0x20021bbc
   1e340:	20021ba8 	.word	0x20021ba8
   1e344:	0002beb4 	.word	0x0002beb4

0001e348 <bsd_platform_af_method_table_get>:
   1e348:	2805      	cmp	r0, #5
   1e34a:	d02a      	beq.n	1e3a2 <bsd_platform_af_method_table_get+0x5a>
   1e34c:	b508      	push	{r3, lr}
   1e34e:	d914      	bls.n	1e37a <bsd_platform_af_method_table_get+0x32>
   1e350:	280a      	cmp	r0, #10
   1e352:	d016      	beq.n	1e382 <bsd_platform_af_method_table_get+0x3a>
   1e354:	2866      	cmp	r0, #102	; 0x66
   1e356:	d11f      	bne.n	1e398 <bsd_platform_af_method_table_get+0x50>
   1e358:	f240 2302 	movw	r3, #514	; 0x202
   1e35c:	429a      	cmp	r2, r3
   1e35e:	d035      	beq.n	1e3cc <bsd_platform_af_method_table_get+0x84>
   1e360:	f240 2305 	movw	r3, #517	; 0x205
   1e364:	429a      	cmp	r2, r3
   1e366:	d035      	beq.n	1e3d4 <bsd_platform_af_method_table_get+0x8c>
   1e368:	f240 2301 	movw	r3, #513	; 0x201
   1e36c:	429a      	cmp	r2, r3
   1e36e:	d02f      	beq.n	1e3d0 <bsd_platform_af_method_table_get+0x88>
   1e370:	202b      	movs	r0, #43	; 0x2b
   1e372:	f7f7 f9d5 	bl	15720 <bsd_os_errno_set>
   1e376:	2000      	movs	r0, #0
   1e378:	bd08      	pop	{r3, pc}
   1e37a:	2801      	cmp	r0, #1
   1e37c:	d016      	beq.n	1e3ac <bsd_platform_af_method_table_get+0x64>
   1e37e:	2802      	cmp	r0, #2
   1e380:	d10a      	bne.n	1e398 <bsd_platform_af_method_table_get+0x50>
   1e382:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   1e386:	d21a      	bcs.n	1e3be <bsd_platform_af_method_table_get+0x76>
   1e388:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1e38c:	d21a      	bcs.n	1e3c4 <bsd_platform_af_method_table_get+0x7c>
   1e38e:	3a01      	subs	r2, #1
   1e390:	2a01      	cmp	r2, #1
   1e392:	d8ed      	bhi.n	1e370 <bsd_platform_af_method_table_get+0x28>
   1e394:	4810      	ldr	r0, [pc, #64]	; (1e3d8 <bsd_platform_af_method_table_get+0x90>)
   1e396:	bd08      	pop	{r3, pc}
   1e398:	2016      	movs	r0, #22
   1e39a:	f7f7 f9c1 	bl	15720 <bsd_os_errno_set>
   1e39e:	2000      	movs	r0, #0
   1e3a0:	bd08      	pop	{r3, pc}
   1e3a2:	2903      	cmp	r1, #3
   1e3a4:	480d      	ldr	r0, [pc, #52]	; (1e3dc <bsd_platform_af_method_table_get+0x94>)
   1e3a6:	bf18      	it	ne
   1e3a8:	2000      	movne	r0, #0
   1e3aa:	4770      	bx	lr
   1e3ac:	f240 2303 	movw	r3, #515	; 0x203
   1e3b0:	429a      	cmp	r2, r3
   1e3b2:	d009      	beq.n	1e3c8 <bsd_platform_af_method_table_get+0x80>
   1e3b4:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1e3b8:	d1da      	bne.n	1e370 <bsd_platform_af_method_table_get+0x28>
   1e3ba:	4809      	ldr	r0, [pc, #36]	; (1e3e0 <bsd_platform_af_method_table_get+0x98>)
   1e3bc:	bd08      	pop	{r3, pc}
   1e3be:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1e3c2:	d1d5      	bne.n	1e370 <bsd_platform_af_method_table_get+0x28>
   1e3c4:	4807      	ldr	r0, [pc, #28]	; (1e3e4 <bsd_platform_af_method_table_get+0x9c>)
   1e3c6:	bd08      	pop	{r3, pc}
   1e3c8:	4807      	ldr	r0, [pc, #28]	; (1e3e8 <bsd_platform_af_method_table_get+0xa0>)
   1e3ca:	bd08      	pop	{r3, pc}
   1e3cc:	4807      	ldr	r0, [pc, #28]	; (1e3ec <bsd_platform_af_method_table_get+0xa4>)
   1e3ce:	bd08      	pop	{r3, pc}
   1e3d0:	4807      	ldr	r0, [pc, #28]	; (1e3f0 <bsd_platform_af_method_table_get+0xa8>)
   1e3d2:	bd08      	pop	{r3, pc}
   1e3d4:	4807      	ldr	r0, [pc, #28]	; (1e3f4 <bsd_platform_af_method_table_get+0xac>)
   1e3d6:	bd08      	pop	{r3, pc}
   1e3d8:	0002bd9c 	.word	0x0002bd9c
   1e3dc:	0002be8c 	.word	0x0002be8c
   1e3e0:	0002be3c 	.word	0x0002be3c
   1e3e4:	0002bdc4 	.word	0x0002bdc4
   1e3e8:	0002bdec 	.word	0x0002bdec
   1e3ec:	0002be14 	.word	0x0002be14
   1e3f0:	0002bd74 	.word	0x0002bd74
   1e3f4:	0002be64 	.word	0x0002be64

0001e3f8 <bsd_platform_fd_method_table_get>:
   1e3f8:	b538      	push	{r3, r4, r5, lr}
   1e3fa:	4605      	mov	r5, r0
   1e3fc:	f001 fe5a 	bl	200b4 <interface_socket_from_handle_get>
   1e400:	4604      	mov	r4, r0
   1e402:	b960      	cbnz	r0, 1e41e <bsd_platform_fd_method_table_get+0x26>
   1e404:	4b2c      	ldr	r3, [pc, #176]	; (1e4b8 <bsd_platform_fd_method_table_get+0xc0>)
   1e406:	429d      	cmp	r5, r3
   1e408:	d02f      	beq.n	1e46a <bsd_platform_fd_method_table_get+0x72>
   1e40a:	0c2b      	lsrs	r3, r5, #16
   1e40c:	4a2b      	ldr	r2, [pc, #172]	; (1e4bc <bsd_platform_fd_method_table_get+0xc4>)
   1e40e:	041b      	lsls	r3, r3, #16
   1e410:	4293      	cmp	r3, r2
   1e412:	d03d      	beq.n	1e490 <bsd_platform_fd_method_table_get+0x98>
   1e414:	4b2a      	ldr	r3, [pc, #168]	; (1e4c0 <bsd_platform_fd_method_table_get+0xc8>)
   1e416:	429d      	cmp	r5, r3
   1e418:	d149      	bne.n	1e4ae <bsd_platform_fd_method_table_get+0xb6>
   1e41a:	482a      	ldr	r0, [pc, #168]	; (1e4c4 <bsd_platform_fd_method_table_get+0xcc>)
   1e41c:	bd38      	pop	{r3, r4, r5, pc}
   1e41e:	68c3      	ldr	r3, [r0, #12]
   1e420:	6942      	ldr	r2, [r0, #20]
   1e422:	2b05      	cmp	r3, #5
   1e424:	d036      	beq.n	1e494 <bsd_platform_fd_method_table_get+0x9c>
   1e426:	d911      	bls.n	1e44c <bsd_platform_fd_method_table_get+0x54>
   1e428:	2b0a      	cmp	r3, #10
   1e42a:	d013      	beq.n	1e454 <bsd_platform_fd_method_table_get+0x5c>
   1e42c:	2b66      	cmp	r3, #102	; 0x66
   1e42e:	d11e      	bne.n	1e46e <bsd_platform_fd_method_table_get+0x76>
   1e430:	f240 2302 	movw	r3, #514	; 0x202
   1e434:	429a      	cmp	r2, r3
   1e436:	d02b      	beq.n	1e490 <bsd_platform_fd_method_table_get+0x98>
   1e438:	f240 2305 	movw	r3, #517	; 0x205
   1e43c:	429a      	cmp	r2, r3
   1e43e:	d02f      	beq.n	1e4a0 <bsd_platform_fd_method_table_get+0xa8>
   1e440:	f240 2301 	movw	r3, #513	; 0x201
   1e444:	429a      	cmp	r2, r3
   1e446:	d11e      	bne.n	1e486 <bsd_platform_fd_method_table_get+0x8e>
   1e448:	481f      	ldr	r0, [pc, #124]	; (1e4c8 <bsd_platform_fd_method_table_get+0xd0>)
   1e44a:	bd38      	pop	{r3, r4, r5, pc}
   1e44c:	2b01      	cmp	r3, #1
   1e44e:	d013      	beq.n	1e478 <bsd_platform_fd_method_table_get+0x80>
   1e450:	2b02      	cmp	r3, #2
   1e452:	d10c      	bne.n	1e46e <bsd_platform_fd_method_table_get+0x76>
   1e454:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   1e458:	d224      	bcs.n	1e4a4 <bsd_platform_fd_method_table_get+0xac>
   1e45a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1e45e:	d224      	bcs.n	1e4aa <bsd_platform_fd_method_table_get+0xb2>
   1e460:	3a01      	subs	r2, #1
   1e462:	2a01      	cmp	r2, #1
   1e464:	d80f      	bhi.n	1e486 <bsd_platform_fd_method_table_get+0x8e>
   1e466:	4819      	ldr	r0, [pc, #100]	; (1e4cc <bsd_platform_fd_method_table_get+0xd4>)
   1e468:	bd38      	pop	{r3, r4, r5, pc}
   1e46a:	4819      	ldr	r0, [pc, #100]	; (1e4d0 <bsd_platform_fd_method_table_get+0xd8>)
   1e46c:	bd38      	pop	{r3, r4, r5, pc}
   1e46e:	2016      	movs	r0, #22
   1e470:	f7f7 f956 	bl	15720 <bsd_os_errno_set>
   1e474:	2000      	movs	r0, #0
   1e476:	bd38      	pop	{r3, r4, r5, pc}
   1e478:	f240 2303 	movw	r3, #515	; 0x203
   1e47c:	429a      	cmp	r2, r3
   1e47e:	d0f4      	beq.n	1e46a <bsd_platform_fd_method_table_get+0x72>
   1e480:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1e484:	d0c9      	beq.n	1e41a <bsd_platform_fd_method_table_get+0x22>
   1e486:	202b      	movs	r0, #43	; 0x2b
   1e488:	f7f7 f94a 	bl	15720 <bsd_os_errno_set>
   1e48c:	2000      	movs	r0, #0
   1e48e:	bd38      	pop	{r3, r4, r5, pc}
   1e490:	4810      	ldr	r0, [pc, #64]	; (1e4d4 <bsd_platform_fd_method_table_get+0xdc>)
   1e492:	bd38      	pop	{r3, r4, r5, pc}
   1e494:	6903      	ldr	r3, [r0, #16]
   1e496:	4810      	ldr	r0, [pc, #64]	; (1e4d8 <bsd_platform_fd_method_table_get+0xe0>)
   1e498:	2b03      	cmp	r3, #3
   1e49a:	bf18      	it	ne
   1e49c:	2000      	movne	r0, #0
   1e49e:	bd38      	pop	{r3, r4, r5, pc}
   1e4a0:	480e      	ldr	r0, [pc, #56]	; (1e4dc <bsd_platform_fd_method_table_get+0xe4>)
   1e4a2:	bd38      	pop	{r3, r4, r5, pc}
   1e4a4:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1e4a8:	d1ed      	bne.n	1e486 <bsd_platform_fd_method_table_get+0x8e>
   1e4aa:	480d      	ldr	r0, [pc, #52]	; (1e4e0 <bsd_platform_fd_method_table_get+0xe8>)
   1e4ac:	bd38      	pop	{r3, r4, r5, pc}
   1e4ae:	2009      	movs	r0, #9
   1e4b0:	f7f7 f936 	bl	15720 <bsd_os_errno_set>
   1e4b4:	4620      	mov	r0, r4
   1e4b6:	bd38      	pop	{r3, r4, r5, pc}
   1e4b8:	49765432 	.word	0x49765432
   1e4bc:	789a0000 	.word	0x789a0000
   1e4c0:	49765443 	.word	0x49765443
   1e4c4:	0002be3c 	.word	0x0002be3c
   1e4c8:	0002bd74 	.word	0x0002bd74
   1e4cc:	0002bd9c 	.word	0x0002bd9c
   1e4d0:	0002bdec 	.word	0x0002bdec
   1e4d4:	0002be14 	.word	0x0002be14
   1e4d8:	0002be8c 	.word	0x0002be8c
   1e4dc:	0002be64 	.word	0x0002be64
   1e4e0:	0002bdc4 	.word	0x0002bdc4

0001e4e4 <bsd_platform_getaddrinfo>:
   1e4e4:	f7fc bea8 	b.w	1b238 <ip_interface_getaddrinfo>

0001e4e8 <bsd_platform_freeaddrinfo>:
   1e4e8:	f7fc bfa4 	b.w	1b434 <ip_interface_freeaddrinfo>

0001e4ec <bsd_platform_poll>:
   1e4ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e4f0:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   1e4f4:	b083      	sub	sp, #12
   1e4f6:	9200      	str	r2, [sp, #0]
   1e4f8:	2800      	cmp	r0, #0
   1e4fa:	d048      	beq.n	1e58e <bsd_platform_poll+0xa2>
   1e4fc:	1e4b      	subs	r3, r1, #1
   1e4fe:	2b08      	cmp	r3, #8
   1e500:	d845      	bhi.n	1e58e <bsd_platform_poll+0xa2>
   1e502:	4680      	mov	r8, r0
   1e504:	4605      	mov	r5, r0
   1e506:	2400      	movs	r4, #0
   1e508:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   1e50c:	88ab      	ldrh	r3, [r5, #4]
   1e50e:	6828      	ldr	r0, [r5, #0]
   1e510:	f003 0303 	and.w	r3, r3, #3
   1e514:	a901      	add	r1, sp, #4
   1e516:	f043 061c 	orr.w	r6, r3, #28
   1e51a:	f001 fdd9 	bl	200d0 <interface_socket_event_get>
   1e51e:	9b01      	ldr	r3, [sp, #4]
   1e520:	3508      	adds	r5, #8
   1e522:	4033      	ands	r3, r6
   1e524:	f825 3c02 	strh.w	r3, [r5, #-2]
   1e528:	b103      	cbz	r3, 1e52c <bsd_platform_poll+0x40>
   1e52a:	3401      	adds	r4, #1
   1e52c:	42af      	cmp	r7, r5
   1e52e:	d1ed      	bne.n	1e50c <bsd_platform_poll+0x20>
   1e530:	bb9c      	cbnz	r4, 1e59a <bsd_platform_poll+0xae>
   1e532:	4669      	mov	r1, sp
   1e534:	4640      	mov	r0, r8
   1e536:	f7f7 f83b 	bl	155b0 <bsd_os_timedwait>
   1e53a:	4607      	mov	r7, r0
   1e53c:	b108      	cbz	r0, 1e542 <bsd_platform_poll+0x56>
   1e53e:	283c      	cmp	r0, #60	; 0x3c
   1e540:	d11d      	bne.n	1e57e <bsd_platform_poll+0x92>
   1e542:	46c1      	mov	r9, r8
   1e544:	2600      	movs	r6, #0
   1e546:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1e54a:	f8d9 0000 	ldr.w	r0, [r9]
   1e54e:	f003 0303 	and.w	r3, r3, #3
   1e552:	a901      	add	r1, sp, #4
   1e554:	f043 041c 	orr.w	r4, r3, #28
   1e558:	f001 fdba 	bl	200d0 <interface_socket_event_get>
   1e55c:	9b01      	ldr	r3, [sp, #4]
   1e55e:	f109 0908 	add.w	r9, r9, #8
   1e562:	4023      	ands	r3, r4
   1e564:	f829 3c02 	strh.w	r3, [r9, #-2]
   1e568:	b103      	cbz	r3, 1e56c <bsd_platform_poll+0x80>
   1e56a:	3601      	adds	r6, #1
   1e56c:	454d      	cmp	r5, r9
   1e56e:	d1ea      	bne.n	1e546 <bsd_platform_poll+0x5a>
   1e570:	b90e      	cbnz	r6, 1e576 <bsd_platform_poll+0x8a>
   1e572:	2f00      	cmp	r7, #0
   1e574:	d0dd      	beq.n	1e532 <bsd_platform_poll+0x46>
   1e576:	4630      	mov	r0, r6
   1e578:	b003      	add	sp, #12
   1e57a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e57e:	2023      	movs	r0, #35	; 0x23
   1e580:	f7f7 f8ce 	bl	15720 <bsd_os_errno_set>
   1e584:	f04f 30ff 	mov.w	r0, #4294967295
   1e588:	b003      	add	sp, #12
   1e58a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e58e:	2016      	movs	r0, #22
   1e590:	f7f7 f8c6 	bl	15720 <bsd_os_errno_set>
   1e594:	f04f 30ff 	mov.w	r0, #4294967295
   1e598:	e7ee      	b.n	1e578 <bsd_platform_poll+0x8c>
   1e59a:	4620      	mov	r0, r4
   1e59c:	e7ec      	b.n	1e578 <bsd_platform_poll+0x8c>
   1e59e:	bf00      	nop

0001e5a0 <bsd_platform_fcntl>:
   1e5a0:	b508      	push	{r3, lr}
   1e5a2:	4b06      	ldr	r3, [pc, #24]	; (1e5bc <bsd_platform_fcntl+0x1c>)
   1e5a4:	4298      	cmp	r0, r3
   1e5a6:	d003      	beq.n	1e5b0 <bsd_platform_fcntl+0x10>
   1e5a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1e5ac:	f001 be3a 	b.w	20224 <interface_socket_fcntl>
   1e5b0:	202d      	movs	r0, #45	; 0x2d
   1e5b2:	f7f7 f8b5 	bl	15720 <bsd_os_errno_set>
   1e5b6:	f04f 30ff 	mov.w	r0, #4294967295
   1e5ba:	bd08      	pop	{r3, pc}
   1e5bc:	49765432 	.word	0x49765432

0001e5c0 <linked_list_init>:
   1e5c0:	b128      	cbz	r0, 1e5ce <linked_list_init+0xe>
   1e5c2:	2300      	movs	r3, #0
   1e5c4:	6003      	str	r3, [r0, #0]
   1e5c6:	e9c0 3301 	strd	r3, r3, [r0, #4]
   1e5ca:	4618      	mov	r0, r3
   1e5cc:	4770      	bx	lr
   1e5ce:	2007      	movs	r0, #7
   1e5d0:	4770      	bx	lr
   1e5d2:	bf00      	nop

0001e5d4 <linked_list_push>:
   1e5d4:	6802      	ldr	r2, [r0, #0]
   1e5d6:	4603      	mov	r3, r0
   1e5d8:	3201      	adds	r2, #1
   1e5da:	d00e      	beq.n	1e5fa <linked_list_push+0x26>
   1e5dc:	2200      	movs	r2, #0
   1e5de:	600a      	str	r2, [r1, #0]
   1e5e0:	6802      	ldr	r2, [r0, #0]
   1e5e2:	b13a      	cbz	r2, 1e5f4 <linked_list_push+0x20>
   1e5e4:	6882      	ldr	r2, [r0, #8]
   1e5e6:	6011      	str	r1, [r2, #0]
   1e5e8:	6081      	str	r1, [r0, #8]
   1e5ea:	681a      	ldr	r2, [r3, #0]
   1e5ec:	2000      	movs	r0, #0
   1e5ee:	3201      	adds	r2, #1
   1e5f0:	601a      	str	r2, [r3, #0]
   1e5f2:	4770      	bx	lr
   1e5f4:	e9c0 1101 	strd	r1, r1, [r0, #4]
   1e5f8:	e7f7      	b.n	1e5ea <linked_list_push+0x16>
   1e5fa:	2004      	movs	r0, #4
   1e5fc:	4770      	bx	lr
   1e5fe:	bf00      	nop

0001e600 <linked_list_pop>:
   1e600:	4603      	mov	r3, r0
   1e602:	6800      	ldr	r0, [r0, #0]
   1e604:	b128      	cbz	r0, 1e612 <linked_list_pop+0x12>
   1e606:	6858      	ldr	r0, [r3, #4]
   1e608:	681a      	ldr	r2, [r3, #0]
   1e60a:	6801      	ldr	r1, [r0, #0]
   1e60c:	3a01      	subs	r2, #1
   1e60e:	6059      	str	r1, [r3, #4]
   1e610:	601a      	str	r2, [r3, #0]
   1e612:	4770      	bx	lr

0001e614 <linked_list_peek>:
   1e614:	6803      	ldr	r3, [r0, #0]
   1e616:	b10b      	cbz	r3, 1e61c <linked_list_peek+0x8>
   1e618:	6840      	ldr	r0, [r0, #4]
   1e61a:	4770      	bx	lr
   1e61c:	4618      	mov	r0, r3
   1e61e:	4770      	bx	lr

0001e620 <linked_list_size_get>:
   1e620:	6800      	ldr	r0, [r0, #0]
   1e622:	4770      	bx	lr

0001e624 <linked_list_get_next>:
   1e624:	6800      	ldr	r0, [r0, #0]
   1e626:	4770      	bx	lr

0001e628 <nrf_socket>:
   1e628:	b570      	push	{r4, r5, r6, lr}
   1e62a:	4604      	mov	r4, r0
   1e62c:	460d      	mov	r5, r1
   1e62e:	4616      	mov	r6, r2
   1e630:	f7ff fe8a 	bl	1e348 <bsd_platform_af_method_table_get>
   1e634:	b130      	cbz	r0, 1e644 <nrf_socket+0x1c>
   1e636:	6803      	ldr	r3, [r0, #0]
   1e638:	4632      	mov	r2, r6
   1e63a:	4629      	mov	r1, r5
   1e63c:	4620      	mov	r0, r4
   1e63e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e642:	4718      	bx	r3
   1e644:	f04f 30ff 	mov.w	r0, #4294967295
   1e648:	bd70      	pop	{r4, r5, r6, pc}
   1e64a:	bf00      	nop

0001e64c <nrf_close>:
   1e64c:	b510      	push	{r4, lr}
   1e64e:	4604      	mov	r4, r0
   1e650:	f7ff fed2 	bl	1e3f8 <bsd_platform_fd_method_table_get>
   1e654:	b120      	cbz	r0, 1e660 <nrf_close+0x14>
   1e656:	6843      	ldr	r3, [r0, #4]
   1e658:	4620      	mov	r0, r4
   1e65a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e65e:	4718      	bx	r3
   1e660:	f04f 30ff 	mov.w	r0, #4294967295
   1e664:	bd10      	pop	{r4, pc}
   1e666:	bf00      	nop

0001e668 <nrf_sendto>:
   1e668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e66c:	460d      	mov	r5, r1
   1e66e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1e672:	4616      	mov	r6, r2
   1e674:	461f      	mov	r7, r3
   1e676:	4604      	mov	r4, r0
   1e678:	f7ff febe 	bl	1e3f8 <bsd_platform_fd_method_table_get>
   1e67c:	b158      	cbz	r0, 1e696 <nrf_sendto+0x2e>
   1e67e:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1e682:	f8d0 e008 	ldr.w	lr, [r0, #8]
   1e686:	463b      	mov	r3, r7
   1e688:	4632      	mov	r2, r6
   1e68a:	4629      	mov	r1, r5
   1e68c:	4620      	mov	r0, r4
   1e68e:	46f4      	mov	ip, lr
   1e690:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e694:	4760      	bx	ip
   1e696:	f04f 30ff 	mov.w	r0, #4294967295
   1e69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e69e:	bf00      	nop

0001e6a0 <nrf_recvfrom>:
   1e6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e6a4:	460d      	mov	r5, r1
   1e6a6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1e6aa:	4616      	mov	r6, r2
   1e6ac:	461f      	mov	r7, r3
   1e6ae:	4604      	mov	r4, r0
   1e6b0:	f7ff fea2 	bl	1e3f8 <bsd_platform_fd_method_table_get>
   1e6b4:	b158      	cbz	r0, 1e6ce <nrf_recvfrom+0x2e>
   1e6b6:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1e6ba:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   1e6be:	463b      	mov	r3, r7
   1e6c0:	4632      	mov	r2, r6
   1e6c2:	4629      	mov	r1, r5
   1e6c4:	4620      	mov	r0, r4
   1e6c6:	46f4      	mov	ip, lr
   1e6c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e6cc:	4760      	bx	ip
   1e6ce:	f04f 30ff 	mov.w	r0, #4294967295
   1e6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e6d6:	bf00      	nop

0001e6d8 <nrf_connect>:
   1e6d8:	b570      	push	{r4, r5, r6, lr}
   1e6da:	460d      	mov	r5, r1
   1e6dc:	4616      	mov	r6, r2
   1e6de:	4604      	mov	r4, r0
   1e6e0:	f7ff fe8a 	bl	1e3f8 <bsd_platform_fd_method_table_get>
   1e6e4:	b130      	cbz	r0, 1e6f4 <nrf_connect+0x1c>
   1e6e6:	6943      	ldr	r3, [r0, #20]
   1e6e8:	4632      	mov	r2, r6
   1e6ea:	4629      	mov	r1, r5
   1e6ec:	4620      	mov	r0, r4
   1e6ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e6f2:	4718      	bx	r3
   1e6f4:	f04f 30ff 	mov.w	r0, #4294967295
   1e6f8:	bd70      	pop	{r4, r5, r6, pc}
   1e6fa:	bf00      	nop

0001e6fc <nrf_listen>:
   1e6fc:	b570      	push	{r4, r5, r6, lr}
   1e6fe:	460d      	mov	r5, r1
   1e700:	4604      	mov	r4, r0
   1e702:	f7ff fe79 	bl	1e3f8 <bsd_platform_fd_method_table_get>
   1e706:	b128      	cbz	r0, 1e714 <nrf_listen+0x18>
   1e708:	6983      	ldr	r3, [r0, #24]
   1e70a:	4629      	mov	r1, r5
   1e70c:	4620      	mov	r0, r4
   1e70e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e712:	4718      	bx	r3
   1e714:	f04f 30ff 	mov.w	r0, #4294967295
   1e718:	bd70      	pop	{r4, r5, r6, pc}
   1e71a:	bf00      	nop

0001e71c <nrf_accept>:
   1e71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e720:	460d      	mov	r5, r1
   1e722:	4616      	mov	r6, r2
   1e724:	4604      	mov	r4, r0
   1e726:	f7ff fe67 	bl	1e3f8 <bsd_platform_fd_method_table_get>
   1e72a:	b140      	cbz	r0, 1e73e <nrf_accept+0x22>
   1e72c:	69c7      	ldr	r7, [r0, #28]
   1e72e:	4632      	mov	r2, r6
   1e730:	4629      	mov	r1, r5
   1e732:	4620      	mov	r0, r4
   1e734:	46bc      	mov	ip, r7
   1e736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e73a:	2300      	movs	r3, #0
   1e73c:	4760      	bx	ip
   1e73e:	f04f 30ff 	mov.w	r0, #4294967295
   1e742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e746:	bf00      	nop

0001e748 <nrf_bind>:
   1e748:	b570      	push	{r4, r5, r6, lr}
   1e74a:	460d      	mov	r5, r1
   1e74c:	4616      	mov	r6, r2
   1e74e:	4604      	mov	r4, r0
   1e750:	f7ff fe52 	bl	1e3f8 <bsd_platform_fd_method_table_get>
   1e754:	b130      	cbz	r0, 1e764 <nrf_bind+0x1c>
   1e756:	6903      	ldr	r3, [r0, #16]
   1e758:	4632      	mov	r2, r6
   1e75a:	4629      	mov	r1, r5
   1e75c:	4620      	mov	r0, r4
   1e75e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e762:	4718      	bx	r3
   1e764:	f04f 30ff 	mov.w	r0, #4294967295
   1e768:	bd70      	pop	{r4, r5, r6, pc}
   1e76a:	bf00      	nop

0001e76c <nrf_setsockopt>:
   1e76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e770:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1e774:	460d      	mov	r5, r1
   1e776:	4616      	mov	r6, r2
   1e778:	461f      	mov	r7, r3
   1e77a:	4604      	mov	r4, r0
   1e77c:	f7ff fe3c 	bl	1e3f8 <bsd_platform_fd_method_table_get>
   1e780:	b158      	cbz	r0, 1e79a <nrf_setsockopt+0x2e>
   1e782:	f8cd 8018 	str.w	r8, [sp, #24]
   1e786:	f8d0 e020 	ldr.w	lr, [r0, #32]
   1e78a:	463b      	mov	r3, r7
   1e78c:	4632      	mov	r2, r6
   1e78e:	4629      	mov	r1, r5
   1e790:	4620      	mov	r0, r4
   1e792:	46f4      	mov	ip, lr
   1e794:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e798:	4760      	bx	ip
   1e79a:	f04f 30ff 	mov.w	r0, #4294967295
   1e79e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e7a2:	bf00      	nop

0001e7a4 <nrf_getsockopt>:
   1e7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e7a8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1e7ac:	460d      	mov	r5, r1
   1e7ae:	4616      	mov	r6, r2
   1e7b0:	461f      	mov	r7, r3
   1e7b2:	4604      	mov	r4, r0
   1e7b4:	f7ff fe20 	bl	1e3f8 <bsd_platform_fd_method_table_get>
   1e7b8:	b158      	cbz	r0, 1e7d2 <nrf_getsockopt+0x2e>
   1e7ba:	f8cd 8018 	str.w	r8, [sp, #24]
   1e7be:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   1e7c2:	463b      	mov	r3, r7
   1e7c4:	4632      	mov	r2, r6
   1e7c6:	4629      	mov	r1, r5
   1e7c8:	4620      	mov	r0, r4
   1e7ca:	46f4      	mov	ip, lr
   1e7cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e7d0:	4760      	bx	ip
   1e7d2:	f04f 30ff 	mov.w	r0, #4294967295
   1e7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e7da:	bf00      	nop

0001e7dc <nrf_getaddrinfo>:
   1e7dc:	f7ff be82 	b.w	1e4e4 <bsd_platform_getaddrinfo>

0001e7e0 <nrf_freeaddrinfo>:
   1e7e0:	f7ff be82 	b.w	1e4e8 <bsd_platform_freeaddrinfo>

0001e7e4 <nrf_poll>:
   1e7e4:	f7ff be82 	b.w	1e4ec <bsd_platform_poll>

0001e7e8 <nrf_fcntl>:
   1e7e8:	f7ff beda 	b.w	1e5a0 <bsd_platform_fcntl>

0001e7ec <rpc_gnss_serialize_utc>:
   1e7ec:	4603      	mov	r3, r0
   1e7ee:	b1d8      	cbz	r0, 1e828 <rpc_gnss_serialize_utc+0x3c>
   1e7f0:	b1d1      	cbz	r1, 1e828 <rpc_gnss_serialize_utc+0x3c>
   1e7f2:	2000      	movs	r0, #0
   1e7f4:	2201      	movs	r2, #1
   1e7f6:	7048      	strb	r0, [r1, #1]
   1e7f8:	700a      	strb	r2, [r1, #0]
   1e7fa:	685a      	ldr	r2, [r3, #4]
   1e7fc:	2010      	movs	r0, #16
   1e7fe:	f8c1 2006 	str.w	r2, [r1, #6]
   1e802:	681a      	ldr	r2, [r3, #0]
   1e804:	f8c1 2002 	str.w	r2, [r1, #2]
   1e808:	f993 200a 	ldrsb.w	r2, [r3, #10]
   1e80c:	730a      	strb	r2, [r1, #12]
   1e80e:	f993 200d 	ldrsb.w	r2, [r3, #13]
   1e812:	73ca      	strb	r2, [r1, #15]
   1e814:	f993 200c 	ldrsb.w	r2, [r3, #12]
   1e818:	738a      	strb	r2, [r1, #14]
   1e81a:	7a1a      	ldrb	r2, [r3, #8]
   1e81c:	728a      	strb	r2, [r1, #10]
   1e81e:	7ada      	ldrb	r2, [r3, #11]
   1e820:	734a      	strb	r2, [r1, #13]
   1e822:	7a5b      	ldrb	r3, [r3, #9]
   1e824:	72cb      	strb	r3, [r1, #11]
   1e826:	4770      	bx	lr
   1e828:	f04f 30ff 	mov.w	r0, #4294967295
   1e82c:	4770      	bx	lr
   1e82e:	bf00      	nop

0001e830 <rpc_gnss_serialize_ephe>:
   1e830:	4603      	mov	r3, r0
   1e832:	2800      	cmp	r0, #0
   1e834:	d04b      	beq.n	1e8ce <rpc_gnss_serialize_ephe+0x9e>
   1e836:	2900      	cmp	r1, #0
   1e838:	d049      	beq.n	1e8ce <rpc_gnss_serialize_ephe+0x9e>
   1e83a:	2000      	movs	r0, #0
   1e83c:	2202      	movs	r2, #2
   1e83e:	7048      	strb	r0, [r1, #1]
   1e840:	700a      	strb	r2, [r1, #0]
   1e842:	68da      	ldr	r2, [r3, #12]
   1e844:	2040      	movs	r0, #64	; 0x40
   1e846:	f8c1 200b 	str.w	r2, [r1, #11]
   1e84a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1e84e:	f8a1 2009 	strh.w	r2, [r1, #9]
   1e852:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1e856:	720a      	strb	r2, [r1, #8]
   1e858:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   1e85c:	878a      	strh	r2, [r1, #60]	; 0x3c
   1e85e:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   1e862:	86ca      	strh	r2, [r1, #54]	; 0x36
   1e864:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   1e868:	874a      	strh	r2, [r1, #58]	; 0x3a
   1e86a:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   1e86e:	868a      	strh	r2, [r1, #52]	; 0x34
   1e870:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   1e874:	87ca      	strh	r2, [r1, #62]	; 0x3e
   1e876:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   1e87a:	870a      	strh	r2, [r1, #56]	; 0x38
   1e87c:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1e880:	830a      	strh	r2, [r1, #24]
   1e882:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1e884:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   1e888:	7c9a      	ldrb	r2, [r3, #18]
   1e88a:	744a      	strb	r2, [r1, #17]
   1e88c:	785a      	ldrb	r2, [r3, #1]
   1e88e:	70ca      	strb	r2, [r1, #3]
   1e890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1e892:	62ca      	str	r2, [r1, #44]	; 0x2c
   1e894:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   1e898:	84ca      	strh	r2, [r1, #38]	; 0x26
   1e89a:	885a      	ldrh	r2, [r3, #2]
   1e89c:	808a      	strh	r2, [r1, #4]
   1e89e:	6a1a      	ldr	r2, [r3, #32]
   1e8a0:	f8c1 201a 	str.w	r2, [r1, #26]
   1e8a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1e8a6:	630a      	str	r2, [r1, #48]	; 0x30
   1e8a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1e8aa:	f8c1 201e 	str.w	r2, [r1, #30]
   1e8ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1e8b0:	628a      	str	r2, [r1, #40]	; 0x28
   1e8b2:	781a      	ldrb	r2, [r3, #0]
   1e8b4:	708a      	strb	r2, [r1, #2]
   1e8b6:	f993 2010 	ldrsb.w	r2, [r3, #16]
   1e8ba:	73ca      	strb	r2, [r1, #15]
   1e8bc:	889a      	ldrh	r2, [r3, #4]
   1e8be:	80ca      	strh	r2, [r1, #6]
   1e8c0:	8a9a      	ldrh	r2, [r3, #20]
   1e8c2:	824a      	strh	r2, [r1, #18]
   1e8c4:	7c5a      	ldrb	r2, [r3, #17]
   1e8c6:	740a      	strb	r2, [r1, #16]
   1e8c8:	699b      	ldr	r3, [r3, #24]
   1e8ca:	614b      	str	r3, [r1, #20]
   1e8cc:	4770      	bx	lr
   1e8ce:	f04f 30ff 	mov.w	r0, #4294967295
   1e8d2:	4770      	bx	lr

0001e8d4 <rpc_gnss_serialize_alm>:
   1e8d4:	4603      	mov	r3, r0
   1e8d6:	b360      	cbz	r0, 1e932 <rpc_gnss_serialize_alm+0x5e>
   1e8d8:	b359      	cbz	r1, 1e932 <rpc_gnss_serialize_alm+0x5e>
   1e8da:	2000      	movs	r0, #0
   1e8dc:	2203      	movs	r2, #3
   1e8de:	7048      	strb	r0, [r1, #1]
   1e8e0:	700a      	strb	r2, [r1, #0]
   1e8e2:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1e8e6:	2021      	movs	r0, #33	; 0x21
   1e8e8:	f8a1 201d 	strh.w	r2, [r1, #29]
   1e8ec:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   1e8f0:	f8a1 201f 	strh.w	r2, [r1, #31]
   1e8f4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   1e8f8:	810a      	strh	r2, [r1, #8]
   1e8fa:	889a      	ldrh	r2, [r3, #4]
   1e8fc:	80ca      	strh	r2, [r1, #6]
   1e8fe:	78da      	ldrb	r2, [r3, #3]
   1e900:	714a      	strb	r2, [r1, #5]
   1e902:	699a      	ldr	r2, [r3, #24]
   1e904:	f8c1 2019 	str.w	r2, [r1, #25]
   1e908:	691a      	ldr	r2, [r3, #16]
   1e90a:	f8c1 2011 	str.w	r2, [r1, #17]
   1e90e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1e912:	814a      	strh	r2, [r1, #10]
   1e914:	68da      	ldr	r2, [r3, #12]
   1e916:	f8c1 200d 	str.w	r2, [r1, #13]
   1e91a:	7a9a      	ldrb	r2, [r3, #10]
   1e91c:	730a      	strb	r2, [r1, #12]
   1e91e:	781a      	ldrb	r2, [r3, #0]
   1e920:	708a      	strb	r2, [r1, #2]
   1e922:	789a      	ldrb	r2, [r3, #2]
   1e924:	710a      	strb	r2, [r1, #4]
   1e926:	695a      	ldr	r2, [r3, #20]
   1e928:	f8c1 2015 	str.w	r2, [r1, #21]
   1e92c:	785b      	ldrb	r3, [r3, #1]
   1e92e:	70cb      	strb	r3, [r1, #3]
   1e930:	4770      	bx	lr
   1e932:	f04f 30ff 	mov.w	r0, #4294967295
   1e936:	4770      	bx	lr

0001e938 <rpc_gnss_serialize_klob>:
   1e938:	4603      	mov	r3, r0
   1e93a:	b1f0      	cbz	r0, 1e97a <rpc_gnss_serialize_klob+0x42>
   1e93c:	b1e9      	cbz	r1, 1e97a <rpc_gnss_serialize_klob+0x42>
   1e93e:	2000      	movs	r0, #0
   1e940:	2204      	movs	r2, #4
   1e942:	7048      	strb	r0, [r1, #1]
   1e944:	700a      	strb	r2, [r1, #0]
   1e946:	f993 2000 	ldrsb.w	r2, [r3]
   1e94a:	200a      	movs	r0, #10
   1e94c:	708a      	strb	r2, [r1, #2]
   1e94e:	f993 2001 	ldrsb.w	r2, [r3, #1]
   1e952:	70ca      	strb	r2, [r1, #3]
   1e954:	f993 2002 	ldrsb.w	r2, [r3, #2]
   1e958:	710a      	strb	r2, [r1, #4]
   1e95a:	f993 2003 	ldrsb.w	r2, [r3, #3]
   1e95e:	714a      	strb	r2, [r1, #5]
   1e960:	f993 2004 	ldrsb.w	r2, [r3, #4]
   1e964:	718a      	strb	r2, [r1, #6]
   1e966:	f993 2005 	ldrsb.w	r2, [r3, #5]
   1e96a:	71ca      	strb	r2, [r1, #7]
   1e96c:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1e970:	720a      	strb	r2, [r1, #8]
   1e972:	f993 3007 	ldrsb.w	r3, [r3, #7]
   1e976:	724b      	strb	r3, [r1, #9]
   1e978:	4770      	bx	lr
   1e97a:	f04f 30ff 	mov.w	r0, #4294967295
   1e97e:	4770      	bx	lr

0001e980 <rpc_gnss_serialize_nequick>:
   1e980:	4603      	mov	r3, r0
   1e982:	b198      	cbz	r0, 1e9ac <rpc_gnss_serialize_nequick+0x2c>
   1e984:	b191      	cbz	r1, 1e9ac <rpc_gnss_serialize_nequick+0x2c>
   1e986:	2000      	movs	r0, #0
   1e988:	2205      	movs	r2, #5
   1e98a:	7048      	strb	r0, [r1, #1]
   1e98c:	700a      	strb	r2, [r1, #0]
   1e98e:	f9b3 2000 	ldrsh.w	r2, [r3]
   1e992:	200a      	movs	r0, #10
   1e994:	804a      	strh	r2, [r1, #2]
   1e996:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   1e99a:	808a      	strh	r2, [r1, #4]
   1e99c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   1e9a0:	80ca      	strh	r2, [r1, #6]
   1e9a2:	799a      	ldrb	r2, [r3, #6]
   1e9a4:	720a      	strb	r2, [r1, #8]
   1e9a6:	79db      	ldrb	r3, [r3, #7]
   1e9a8:	724b      	strb	r3, [r1, #9]
   1e9aa:	4770      	bx	lr
   1e9ac:	f04f 30ff 	mov.w	r0, #4294967295
   1e9b0:	4770      	bx	lr
   1e9b2:	bf00      	nop

0001e9b4 <rpc_gnss_serialize_time_and_sv_tow>:
   1e9b4:	b310      	cbz	r0, 1e9fc <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1e9b6:	b309      	cbz	r1, 1e9fc <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1e9b8:	b470      	push	{r4, r5, r6}
   1e9ba:	2500      	movs	r5, #0
   1e9bc:	2606      	movs	r6, #6
   1e9be:	460c      	mov	r4, r1
   1e9c0:	704d      	strb	r5, [r1, #1]
   1e9c2:	700e      	strb	r6, [r1, #0]
   1e9c4:	462b      	mov	r3, r5
   1e9c6:	8805      	ldrh	r5, [r0, #0]
   1e9c8:	4602      	mov	r2, r0
   1e9ca:	804d      	strh	r5, [r1, #2]
   1e9cc:	68c5      	ldr	r5, [r0, #12]
   1e9ce:	f8c1 500a 	str.w	r5, [r1, #10]
   1e9d2:	8905      	ldrh	r5, [r0, #8]
   1e9d4:	810d      	strh	r5, [r1, #8]
   1e9d6:	6840      	ldr	r0, [r0, #4]
   1e9d8:	6048      	str	r0, [r1, #4]
   1e9da:	8a15      	ldrh	r5, [r2, #16]
   1e9dc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   1e9e0:	4408      	add	r0, r1
   1e9e2:	81c5      	strh	r5, [r0, #14]
   1e9e4:	7c90      	ldrb	r0, [r2, #18]
   1e9e6:	3301      	adds	r3, #1
   1e9e8:	2b20      	cmp	r3, #32
   1e9ea:	7420      	strb	r0, [r4, #16]
   1e9ec:	f102 0204 	add.w	r2, r2, #4
   1e9f0:	f104 0403 	add.w	r4, r4, #3
   1e9f4:	d1f1      	bne.n	1e9da <rpc_gnss_serialize_time_and_sv_tow+0x26>
   1e9f6:	206e      	movs	r0, #110	; 0x6e
   1e9f8:	bc70      	pop	{r4, r5, r6}
   1e9fa:	4770      	bx	lr
   1e9fc:	f04f 30ff 	mov.w	r0, #4294967295
   1ea00:	4770      	bx	lr
   1ea02:	bf00      	nop

0001ea04 <rpc_gnss_serialize_location>:
   1ea04:	4603      	mov	r3, r0
   1ea06:	b1c8      	cbz	r0, 1ea3c <rpc_gnss_serialize_location+0x38>
   1ea08:	b1c1      	cbz	r1, 1ea3c <rpc_gnss_serialize_location+0x38>
   1ea0a:	2000      	movs	r0, #0
   1ea0c:	2207      	movs	r2, #7
   1ea0e:	7048      	strb	r0, [r1, #1]
   1ea10:	700a      	strb	r2, [r1, #0]
   1ea12:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1ea16:	2011      	movs	r0, #17
   1ea18:	814a      	strh	r2, [r1, #10]
   1ea1a:	7b9a      	ldrb	r2, [r3, #14]
   1ea1c:	740a      	strb	r2, [r1, #16]
   1ea1e:	681a      	ldr	r2, [r3, #0]
   1ea20:	f8c1 2002 	str.w	r2, [r1, #2]
   1ea24:	685a      	ldr	r2, [r3, #4]
   1ea26:	f8c1 2006 	str.w	r2, [r1, #6]
   1ea2a:	7b1a      	ldrb	r2, [r3, #12]
   1ea2c:	738a      	strb	r2, [r1, #14]
   1ea2e:	7b5a      	ldrb	r2, [r3, #13]
   1ea30:	73ca      	strb	r2, [r1, #15]
   1ea32:	7a9a      	ldrb	r2, [r3, #10]
   1ea34:	730a      	strb	r2, [r1, #12]
   1ea36:	7adb      	ldrb	r3, [r3, #11]
   1ea38:	734b      	strb	r3, [r1, #13]
   1ea3a:	4770      	bx	lr
   1ea3c:	f04f 30ff 	mov.w	r0, #4294967295
   1ea40:	4770      	bx	lr
   1ea42:	bf00      	nop

0001ea44 <rpc_gnss_serialize_integrity>:
   1ea44:	b148      	cbz	r0, 1ea5a <rpc_gnss_serialize_integrity+0x16>
   1ea46:	b141      	cbz	r1, 1ea5a <rpc_gnss_serialize_integrity+0x16>
   1ea48:	2200      	movs	r2, #0
   1ea4a:	2308      	movs	r3, #8
   1ea4c:	704a      	strb	r2, [r1, #1]
   1ea4e:	700b      	strb	r3, [r1, #0]
   1ea50:	6803      	ldr	r3, [r0, #0]
   1ea52:	2006      	movs	r0, #6
   1ea54:	f8c1 3002 	str.w	r3, [r1, #2]
   1ea58:	4770      	bx	lr
   1ea5a:	f04f 30ff 	mov.w	r0, #4294967295
   1ea5e:	4770      	bx	lr

0001ea60 <gnss_client_event_handler>:
   1ea60:	f850 1b08 	ldr.w	r1, [r0], #8
   1ea64:	0c09      	lsrs	r1, r1, #16
   1ea66:	f7fd b8cf 	b.w	1bc08 <rpc_gnss_event_handler>
   1ea6a:	bf00      	nop

0001ea6c <rpc_gnss_client_init>:
   1ea6c:	4801      	ldr	r0, [pc, #4]	; (1ea74 <rpc_gnss_client_init+0x8>)
   1ea6e:	f7fc bfff 	b.w	1ba70 <rpc_client_register>
   1ea72:	bf00      	nop
   1ea74:	0002becc 	.word	0x0002becc

0001ea78 <rpc_gnss_client_request_alloc>:
   1ea78:	2300      	movs	r3, #0
   1ea7a:	b510      	push	{r4, lr}
   1ea7c:	b082      	sub	sp, #8
   1ea7e:	9301      	str	r3, [sp, #4]
   1ea80:	b158      	cbz	r0, 1ea9a <rpc_gnss_client_request_alloc+0x22>
   1ea82:	4604      	mov	r4, r0
   1ea84:	aa01      	add	r2, sp, #4
   1ea86:	2007      	movs	r0, #7
   1ea88:	f7fd f86c 	bl	1bb64 <rpc_message_alloc>
   1ea8c:	b918      	cbnz	r0, 1ea96 <rpc_gnss_client_request_alloc+0x1e>
   1ea8e:	9b01      	ldr	r3, [sp, #4]
   1ea90:	b10b      	cbz	r3, 1ea96 <rpc_gnss_client_request_alloc+0x1e>
   1ea92:	3308      	adds	r3, #8
   1ea94:	6023      	str	r3, [r4, #0]
   1ea96:	b002      	add	sp, #8
   1ea98:	bd10      	pop	{r4, pc}
   1ea9a:	2007      	movs	r0, #7
   1ea9c:	b002      	add	sp, #8
   1ea9e:	bd10      	pop	{r4, pc}

0001eaa0 <rpc_gnss_client_request_send>:
   1eaa0:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1eaa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1eaa8:	d10b      	bne.n	1eac2 <rpc_gnss_client_request_send+0x22>
   1eaaa:	b160      	cbz	r0, 1eac6 <rpc_gnss_client_request_send+0x26>
   1eaac:	4603      	mov	r3, r0
   1eaae:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1eab2:	2007      	movs	r0, #7
   1eab4:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1eab8:	f843 1d08 	str.w	r1, [r3, #-8]!
   1eabc:	4619      	mov	r1, r3
   1eabe:	f7fd b841 	b.w	1bb44 <rpc_message_send>
   1eac2:	200f      	movs	r0, #15
   1eac4:	4770      	bx	lr
   1eac6:	2007      	movs	r0, #7
   1eac8:	4770      	bx	lr
   1eaca:	bf00      	nop

0001eacc <rpc_gnss_client_message_free>:
   1eacc:	b120      	cbz	r0, 1ead8 <rpc_gnss_client_message_free+0xc>
   1eace:	f1a0 0108 	sub.w	r1, r0, #8
   1ead2:	2007      	movs	r0, #7
   1ead4:	f7fd b872 	b.w	1bbbc <rpc_message_free>
   1ead8:	2007      	movs	r0, #7
   1eada:	4770      	bx	lr

0001eadc <rpc_gnss_client_data_free>:
   1eadc:	b118      	cbz	r0, 1eae6 <rpc_gnss_client_data_free+0xa>
   1eade:	4601      	mov	r1, r0
   1eae0:	2007      	movs	r0, #7
   1eae2:	f7fd b877 	b.w	1bbd4 <rpc_message_data_free>
   1eae6:	2007      	movs	r0, #7
   1eae8:	4770      	bx	lr
   1eaea:	bf00      	nop

0001eaec <datagram_handler_init>:
   1eaec:	b510      	push	{r4, lr}
   1eaee:	4604      	mov	r4, r0
   1eaf0:	200c      	movs	r0, #12
   1eaf2:	f000 fdd7 	bl	1f6a4 <nrf_malloc>
   1eaf6:	60e0      	str	r0, [r4, #12]
   1eaf8:	b118      	cbz	r0, 1eb02 <datagram_handler_init+0x16>
   1eafa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1eafe:	f7ff bd5f 	b.w	1e5c0 <linked_list_init>
   1eb02:	2004      	movs	r0, #4
   1eb04:	bd10      	pop	{r4, pc}
   1eb06:	bf00      	nop

0001eb08 <datagram_handler_put>:
   1eb08:	b570      	push	{r4, r5, r6, lr}
   1eb0a:	4606      	mov	r6, r0
   1eb0c:	2014      	movs	r0, #20
   1eb0e:	460d      	mov	r5, r1
   1eb10:	f000 fdc8 	bl	1f6a4 <nrf_malloc>
   1eb14:	b178      	cbz	r0, 1eb36 <datagram_handler_put+0x2e>
   1eb16:	682b      	ldr	r3, [r5, #0]
   1eb18:	4604      	mov	r4, r0
   1eb1a:	6043      	str	r3, [r0, #4]
   1eb1c:	686b      	ldr	r3, [r5, #4]
   1eb1e:	4601      	mov	r1, r0
   1eb20:	6083      	str	r3, [r0, #8]
   1eb22:	68eb      	ldr	r3, [r5, #12]
   1eb24:	60c3      	str	r3, [r0, #12]
   1eb26:	68ab      	ldr	r3, [r5, #8]
   1eb28:	6103      	str	r3, [r0, #16]
   1eb2a:	68f0      	ldr	r0, [r6, #12]
   1eb2c:	f7ff fd52 	bl	1e5d4 <linked_list_push>
   1eb30:	b920      	cbnz	r0, 1eb3c <datagram_handler_put+0x34>
   1eb32:	6868      	ldr	r0, [r5, #4]
   1eb34:	bd70      	pop	{r4, r5, r6, pc}
   1eb36:	f04f 30ff 	mov.w	r0, #4294967295
   1eb3a:	bd70      	pop	{r4, r5, r6, pc}
   1eb3c:	4620      	mov	r0, r4
   1eb3e:	f000 fdbb 	bl	1f6b8 <nrf_free>
   1eb42:	f04f 30ff 	mov.w	r0, #4294967295
   1eb46:	bd70      	pop	{r4, r5, r6, pc}

0001eb48 <datagram_handler_get>:
   1eb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb4c:	4607      	mov	r7, r0
   1eb4e:	b084      	sub	sp, #16
   1eb50:	68c0      	ldr	r0, [r0, #12]
   1eb52:	460c      	mov	r4, r1
   1eb54:	4616      	mov	r6, r2
   1eb56:	f7ff fd5d 	bl	1e614 <linked_list_peek>
   1eb5a:	2800      	cmp	r0, #0
   1eb5c:	d03b      	beq.n	1ebd6 <datagram_handler_get+0x8e>
   1eb5e:	6882      	ldr	r2, [r0, #8]
   1eb60:	4605      	mov	r5, r0
   1eb62:	e9d4 0300 	ldrd	r0, r3, [r4]
   1eb66:	429a      	cmp	r2, r3
   1eb68:	bf28      	it	cs
   1eb6a:	461a      	movcs	r2, r3
   1eb6c:	6062      	str	r2, [r4, #4]
   1eb6e:	b110      	cbz	r0, 1eb76 <datagram_handler_get+0x2e>
   1eb70:	6869      	ldr	r1, [r5, #4]
   1eb72:	f7ed ffff 	bl	cb74 <memcpy>
   1eb76:	68a0      	ldr	r0, [r4, #8]
   1eb78:	b118      	cbz	r0, 1eb82 <datagram_handler_get+0x3a>
   1eb7a:	692b      	ldr	r3, [r5, #16]
   1eb7c:	b10b      	cbz	r3, 1eb82 <datagram_handler_get+0x3a>
   1eb7e:	68ea      	ldr	r2, [r5, #12]
   1eb80:	bb02      	cbnz	r2, 1ebc4 <datagram_handler_get+0x7c>
   1eb82:	2300      	movs	r3, #0
   1eb84:	60e3      	str	r3, [r4, #12]
   1eb86:	0732      	lsls	r2, r6, #28
   1eb88:	d506      	bpl.n	1eb98 <datagram_handler_get+0x50>
   1eb8a:	06b3      	lsls	r3, r6, #26
   1eb8c:	bf4c      	ite	mi
   1eb8e:	68a8      	ldrmi	r0, [r5, #8]
   1eb90:	6860      	ldrpl	r0, [r4, #4]
   1eb92:	b004      	add	sp, #16
   1eb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eb98:	68f8      	ldr	r0, [r7, #12]
   1eb9a:	f7ff fd31 	bl	1e600 <linked_list_pop>
   1eb9e:	4680      	mov	r8, r0
   1eba0:	2800      	cmp	r0, #0
   1eba2:	d0f2      	beq.n	1eb8a <datagram_handler_get+0x42>
   1eba4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1eba8:	6902      	ldr	r2, [r0, #16]
   1ebaa:	9300      	str	r3, [sp, #0]
   1ebac:	68c3      	ldr	r3, [r0, #12]
   1ebae:	e9cd 1201 	strd	r1, r2, [sp, #4]
   1ebb2:	9303      	str	r3, [sp, #12]
   1ebb4:	4668      	mov	r0, sp
   1ebb6:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
   1ebba:	4798      	blx	r3
   1ebbc:	4640      	mov	r0, r8
   1ebbe:	f000 fd7b 	bl	1f6b8 <nrf_free>
   1ebc2:	e7e2      	b.n	1eb8a <datagram_handler_get+0x42>
   1ebc4:	68e3      	ldr	r3, [r4, #12]
   1ebc6:	429a      	cmp	r2, r3
   1ebc8:	bf28      	it	cs
   1ebca:	461a      	movcs	r2, r3
   1ebcc:	60e2      	str	r2, [r4, #12]
   1ebce:	6929      	ldr	r1, [r5, #16]
   1ebd0:	f7ed ffd0 	bl	cb74 <memcpy>
   1ebd4:	e7d7      	b.n	1eb86 <datagram_handler_get+0x3e>
   1ebd6:	f04f 30ff 	mov.w	r0, #4294967295
   1ebda:	e7da      	b.n	1eb92 <datagram_handler_get+0x4a>

0001ebdc <datagram_handler_available>:
   1ebdc:	b508      	push	{r3, lr}
   1ebde:	68c0      	ldr	r0, [r0, #12]
   1ebe0:	f7ff fd18 	bl	1e614 <linked_list_peek>
   1ebe4:	b108      	cbz	r0, 1ebea <datagram_handler_available+0xe>
   1ebe6:	6880      	ldr	r0, [r0, #8]
   1ebe8:	bd08      	pop	{r3, pc}
   1ebea:	f04f 30ff 	mov.w	r0, #4294967295
   1ebee:	bd08      	pop	{r3, pc}

0001ebf0 <datagram_handler_flush>:
   1ebf0:	b530      	push	{r4, r5, lr}
   1ebf2:	4605      	mov	r5, r0
   1ebf4:	68c0      	ldr	r0, [r0, #12]
   1ebf6:	b085      	sub	sp, #20
   1ebf8:	b9a8      	cbnz	r0, 1ec26 <datagram_handler_flush+0x36>
   1ebfa:	e01a      	b.n	1ec32 <datagram_handler_flush+0x42>
   1ebfc:	68e8      	ldr	r0, [r5, #12]
   1ebfe:	f7ff fcff 	bl	1e600 <linked_list_pop>
   1ec02:	4604      	mov	r4, r0
   1ec04:	b170      	cbz	r0, 1ec24 <datagram_handler_flush+0x34>
   1ec06:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1ec0a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1ec0e:	e9cd 0100 	strd	r0, r1, [sp]
   1ec12:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ec16:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1ec1a:	4668      	mov	r0, sp
   1ec1c:	4798      	blx	r3
   1ec1e:	4620      	mov	r0, r4
   1ec20:	f000 fd4a 	bl	1f6b8 <nrf_free>
   1ec24:	68e8      	ldr	r0, [r5, #12]
   1ec26:	f7ff fcfb 	bl	1e620 <linked_list_size_get>
   1ec2a:	2800      	cmp	r0, #0
   1ec2c:	d1e6      	bne.n	1ebfc <datagram_handler_flush+0xc>
   1ec2e:	b005      	add	sp, #20
   1ec30:	bd30      	pop	{r4, r5, pc}
   1ec32:	2008      	movs	r0, #8
   1ec34:	b005      	add	sp, #20
   1ec36:	bd30      	pop	{r4, r5, pc}

0001ec38 <datagram_handler_free>:
   1ec38:	b530      	push	{r4, r5, lr}
   1ec3a:	4605      	mov	r5, r0
   1ec3c:	68c0      	ldr	r0, [r0, #12]
   1ec3e:	b085      	sub	sp, #20
   1ec40:	b9a0      	cbnz	r0, 1ec6c <datagram_handler_free+0x34>
   1ec42:	e01c      	b.n	1ec7e <datagram_handler_free+0x46>
   1ec44:	f7ff fcdc 	bl	1e600 <linked_list_pop>
   1ec48:	4604      	mov	r4, r0
   1ec4a:	b170      	cbz	r0, 1ec6a <datagram_handler_free+0x32>
   1ec4c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1ec50:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1ec54:	e9cd 0100 	strd	r0, r1, [sp]
   1ec58:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ec5c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1ec60:	4668      	mov	r0, sp
   1ec62:	4798      	blx	r3
   1ec64:	4620      	mov	r0, r4
   1ec66:	f000 fd27 	bl	1f6b8 <nrf_free>
   1ec6a:	68e8      	ldr	r0, [r5, #12]
   1ec6c:	f7ff fcd8 	bl	1e620 <linked_list_size_get>
   1ec70:	4604      	mov	r4, r0
   1ec72:	68e8      	ldr	r0, [r5, #12]
   1ec74:	2c00      	cmp	r4, #0
   1ec76:	d1e5      	bne.n	1ec44 <datagram_handler_free+0xc>
   1ec78:	f000 fd1e 	bl	1f6b8 <nrf_free>
   1ec7c:	60ec      	str	r4, [r5, #12]
   1ec7e:	b005      	add	sp, #20
   1ec80:	bd30      	pop	{r4, r5, pc}
   1ec82:	bf00      	nop

0001ec84 <null_handler_init>:
   1ec84:	2000      	movs	r0, #0
   1ec86:	4770      	bx	lr

0001ec88 <null_handler_put>:
   1ec88:	b510      	push	{r4, lr}
   1ec8a:	460c      	mov	r4, r1
   1ec8c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1ec90:	4620      	mov	r0, r4
   1ec92:	4798      	blx	r3
   1ec94:	6860      	ldr	r0, [r4, #4]
   1ec96:	bd10      	pop	{r4, pc}

0001ec98 <null_handler_get>:
   1ec98:	f04f 30ff 	mov.w	r0, #4294967295
   1ec9c:	4770      	bx	lr
   1ec9e:	bf00      	nop

0001eca0 <null_handler_available>:
   1eca0:	f04f 30ff 	mov.w	r0, #4294967295
   1eca4:	4770      	bx	lr
   1eca6:	bf00      	nop

0001eca8 <null_handler_flush>:
   1eca8:	2000      	movs	r0, #0
   1ecaa:	4770      	bx	lr

0001ecac <null_handler_free>:
   1ecac:	4770      	bx	lr
   1ecae:	bf00      	nop

0001ecb0 <packet_handler_create>:
   1ecb0:	2801      	cmp	r0, #1
   1ecb2:	b538      	push	{r3, r4, r5, lr}
   1ecb4:	460d      	mov	r5, r1
   1ecb6:	4614      	mov	r4, r2
   1ecb8:	d00d      	beq.n	1ecd6 <packet_handler_create+0x26>
   1ecba:	db11      	blt.n	1ece0 <packet_handler_create+0x30>
   1ecbc:	2803      	cmp	r0, #3
   1ecbe:	dc0f      	bgt.n	1ece0 <packet_handler_create+0x30>
   1ecc0:	2010      	movs	r0, #16
   1ecc2:	f000 fcef 	bl	1f6a4 <nrf_malloc>
   1ecc6:	2218      	movs	r2, #24
   1ecc8:	b120      	cbz	r0, 1ecd4 <packet_handler_create+0x24>
   1ecca:	4b08      	ldr	r3, [pc, #32]	; (1ecec <packet_handler_create+0x3c>)
   1eccc:	6045      	str	r5, [r0, #4]
   1ecce:	4413      	add	r3, r2
   1ecd0:	6084      	str	r4, [r0, #8]
   1ecd2:	6003      	str	r3, [r0, #0]
   1ecd4:	bd38      	pop	{r3, r4, r5, pc}
   1ecd6:	2014      	movs	r0, #20
   1ecd8:	f000 fce4 	bl	1f6a4 <nrf_malloc>
   1ecdc:	2230      	movs	r2, #48	; 0x30
   1ecde:	e7f3      	b.n	1ecc8 <packet_handler_create+0x18>
   1ece0:	200c      	movs	r0, #12
   1ece2:	f000 fcdf 	bl	1f6a4 <nrf_malloc>
   1ece6:	2200      	movs	r2, #0
   1ece8:	e7ee      	b.n	1ecc8 <packet_handler_create+0x18>
   1ecea:	bf00      	nop
   1ecec:	0002bedc 	.word	0x0002bedc

0001ecf0 <packet_handler_delete>:
   1ecf0:	b510      	push	{r4, lr}
   1ecf2:	4604      	mov	r4, r0
   1ecf4:	6803      	ldr	r3, [r0, #0]
   1ecf6:	691b      	ldr	r3, [r3, #16]
   1ecf8:	4798      	blx	r3
   1ecfa:	6823      	ldr	r3, [r4, #0]
   1ecfc:	4620      	mov	r0, r4
   1ecfe:	695b      	ldr	r3, [r3, #20]
   1ed00:	4798      	blx	r3
   1ed02:	4620      	mov	r0, r4
   1ed04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ed08:	f000 bcd6 	b.w	1f6b8 <nrf_free>

0001ed0c <stream_handler_init>:
   1ed0c:	b510      	push	{r4, lr}
   1ed0e:	4604      	mov	r4, r0
   1ed10:	200c      	movs	r0, #12
   1ed12:	f000 fcc7 	bl	1f6a4 <nrf_malloc>
   1ed16:	60e0      	str	r0, [r4, #12]
   1ed18:	b128      	cbz	r0, 1ed26 <stream_handler_init+0x1a>
   1ed1a:	2300      	movs	r3, #0
   1ed1c:	6123      	str	r3, [r4, #16]
   1ed1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ed22:	f7ff bc4d 	b.w	1e5c0 <linked_list_init>
   1ed26:	2004      	movs	r0, #4
   1ed28:	bd10      	pop	{r4, pc}
   1ed2a:	bf00      	nop

0001ed2c <stream_handler_put>:
   1ed2c:	b570      	push	{r4, r5, r6, lr}
   1ed2e:	4606      	mov	r6, r0
   1ed30:	2014      	movs	r0, #20
   1ed32:	460d      	mov	r5, r1
   1ed34:	f000 fcb6 	bl	1f6a4 <nrf_malloc>
   1ed38:	b178      	cbz	r0, 1ed5a <stream_handler_put+0x2e>
   1ed3a:	682b      	ldr	r3, [r5, #0]
   1ed3c:	4604      	mov	r4, r0
   1ed3e:	6043      	str	r3, [r0, #4]
   1ed40:	686b      	ldr	r3, [r5, #4]
   1ed42:	4601      	mov	r1, r0
   1ed44:	6083      	str	r3, [r0, #8]
   1ed46:	68eb      	ldr	r3, [r5, #12]
   1ed48:	60c3      	str	r3, [r0, #12]
   1ed4a:	68ab      	ldr	r3, [r5, #8]
   1ed4c:	6103      	str	r3, [r0, #16]
   1ed4e:	68f0      	ldr	r0, [r6, #12]
   1ed50:	f7ff fc40 	bl	1e5d4 <linked_list_push>
   1ed54:	b920      	cbnz	r0, 1ed60 <stream_handler_put+0x34>
   1ed56:	6868      	ldr	r0, [r5, #4]
   1ed58:	bd70      	pop	{r4, r5, r6, pc}
   1ed5a:	f04f 30ff 	mov.w	r0, #4294967295
   1ed5e:	bd70      	pop	{r4, r5, r6, pc}
   1ed60:	4620      	mov	r0, r4
   1ed62:	f000 fca9 	bl	1f6b8 <nrf_free>
   1ed66:	f04f 30ff 	mov.w	r0, #4294967295
   1ed6a:	bd70      	pop	{r4, r5, r6, pc}

0001ed6c <stream_handler_get>:
   1ed6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed70:	4682      	mov	sl, r0
   1ed72:	b089      	sub	sp, #36	; 0x24
   1ed74:	68c0      	ldr	r0, [r0, #12]
   1ed76:	4689      	mov	r9, r1
   1ed78:	4693      	mov	fp, r2
   1ed7a:	f7ff fc4b 	bl	1e614 <linked_list_peek>
   1ed7e:	2800      	cmp	r0, #0
   1ed80:	d071      	beq.n	1ee66 <stream_handler_get+0xfa>
   1ed82:	4605      	mov	r5, r0
   1ed84:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1ed88:	b120      	cbz	r0, 1ed94 <stream_handler_get+0x28>
   1ed8a:	692b      	ldr	r3, [r5, #16]
   1ed8c:	b113      	cbz	r3, 1ed94 <stream_handler_get+0x28>
   1ed8e:	68ea      	ldr	r2, [r5, #12]
   1ed90:	2a00      	cmp	r2, #0
   1ed92:	d15d      	bne.n	1ee50 <stream_handler_get+0xe4>
   1ed94:	2300      	movs	r3, #0
   1ed96:	f8c9 300c 	str.w	r3, [r9, #12]
   1ed9a:	f8d9 2000 	ldr.w	r2, [r9]
   1ed9e:	f8d9 8004 	ldr.w	r8, [r9, #4]
   1eda2:	f8da 1010 	ldr.w	r1, [sl, #16]
   1eda6:	9203      	str	r2, [sp, #12]
   1eda8:	f1b8 0f00 	cmp.w	r8, #0
   1edac:	d030      	beq.n	1ee10 <stream_handler_get+0xa4>
   1edae:	2400      	movs	r4, #0
   1edb0:	f00b 0320 	and.w	r3, fp, #32
   1edb4:	9301      	str	r3, [sp, #4]
   1edb6:	f00b 0b08 	and.w	fp, fp, #8
   1edba:	68ae      	ldr	r6, [r5, #8]
   1edbc:	eba8 0304 	sub.w	r3, r8, r4
   1edc0:	1a76      	subs	r6, r6, r1
   1edc2:	429e      	cmp	r6, r3
   1edc4:	4637      	mov	r7, r6
   1edc6:	bf28      	it	cs
   1edc8:	461f      	movcs	r7, r3
   1edca:	b10a      	cbz	r2, 1edd0 <stream_handler_get+0x64>
   1edcc:	9a01      	ldr	r2, [sp, #4]
   1edce:	b1aa      	cbz	r2, 1edfc <stream_handler_get+0x90>
   1edd0:	f1bb 0f00 	cmp.w	fp, #0
   1edd4:	d106      	bne.n	1ede4 <stream_handler_get+0x78>
   1edd6:	429e      	cmp	r6, r3
   1edd8:	d921      	bls.n	1ee1e <stream_handler_get+0xb2>
   1edda:	f8da 3010 	ldr.w	r3, [sl, #16]
   1edde:	443b      	add	r3, r7
   1ede0:	f8ca 3010 	str.w	r3, [sl, #16]
   1ede4:	4628      	mov	r0, r5
   1ede6:	f7ff fc1d 	bl	1e624 <linked_list_get_next>
   1edea:	443c      	add	r4, r7
   1edec:	4605      	mov	r5, r0
   1edee:	b180      	cbz	r0, 1ee12 <stream_handler_get+0xa6>
   1edf0:	45a0      	cmp	r8, r4
   1edf2:	d90e      	bls.n	1ee12 <stream_handler_get+0xa6>
   1edf4:	f8d9 2000 	ldr.w	r2, [r9]
   1edf8:	2100      	movs	r1, #0
   1edfa:	e7de      	b.n	1edba <stream_handler_get+0x4e>
   1edfc:	6868      	ldr	r0, [r5, #4]
   1edfe:	9302      	str	r3, [sp, #8]
   1ee00:	9b03      	ldr	r3, [sp, #12]
   1ee02:	4401      	add	r1, r0
   1ee04:	463a      	mov	r2, r7
   1ee06:	1918      	adds	r0, r3, r4
   1ee08:	f7ed feb4 	bl	cb74 <memcpy>
   1ee0c:	9b02      	ldr	r3, [sp, #8]
   1ee0e:	e7df      	b.n	1edd0 <stream_handler_get+0x64>
   1ee10:	4644      	mov	r4, r8
   1ee12:	4620      	mov	r0, r4
   1ee14:	f8c9 4004 	str.w	r4, [r9, #4]
   1ee18:	b009      	add	sp, #36	; 0x24
   1ee1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee1e:	f8da 000c 	ldr.w	r0, [sl, #12]
   1ee22:	f7ff fbed 	bl	1e600 <linked_list_pop>
   1ee26:	4606      	mov	r6, r0
   1ee28:	b170      	cbz	r0, 1ee48 <stream_handler_get+0xdc>
   1ee2a:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1ee2e:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   1ee32:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1ee36:	e9cd 1006 	strd	r1, r0, [sp, #24]
   1ee3a:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   1ee3e:	a804      	add	r0, sp, #16
   1ee40:	4798      	blx	r3
   1ee42:	4630      	mov	r0, r6
   1ee44:	f000 fc38 	bl	1f6b8 <nrf_free>
   1ee48:	2300      	movs	r3, #0
   1ee4a:	f8ca 3010 	str.w	r3, [sl, #16]
   1ee4e:	e7c9      	b.n	1ede4 <stream_handler_get+0x78>
   1ee50:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1ee54:	429a      	cmp	r2, r3
   1ee56:	bf28      	it	cs
   1ee58:	461a      	movcs	r2, r3
   1ee5a:	f8c9 200c 	str.w	r2, [r9, #12]
   1ee5e:	6929      	ldr	r1, [r5, #16]
   1ee60:	f7ed fe88 	bl	cb74 <memcpy>
   1ee64:	e799      	b.n	1ed9a <stream_handler_get+0x2e>
   1ee66:	f04f 30ff 	mov.w	r0, #4294967295
   1ee6a:	e7d5      	b.n	1ee18 <stream_handler_get+0xac>

0001ee6c <stream_handler_available>:
   1ee6c:	b510      	push	{r4, lr}
   1ee6e:	4604      	mov	r4, r0
   1ee70:	68c0      	ldr	r0, [r0, #12]
   1ee72:	f7ff fbcf 	bl	1e614 <linked_list_peek>
   1ee76:	b150      	cbz	r0, 1ee8e <stream_handler_available+0x22>
   1ee78:	6924      	ldr	r4, [r4, #16]
   1ee7a:	4264      	negs	r4, r4
   1ee7c:	6883      	ldr	r3, [r0, #8]
   1ee7e:	441c      	add	r4, r3
   1ee80:	f7ff fbd0 	bl	1e624 <linked_list_get_next>
   1ee84:	2800      	cmp	r0, #0
   1ee86:	d1f9      	bne.n	1ee7c <stream_handler_available+0x10>
   1ee88:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   1ee8c:	bd10      	pop	{r4, pc}
   1ee8e:	f04f 30ff 	mov.w	r0, #4294967295
   1ee92:	bd10      	pop	{r4, pc}

0001ee94 <stream_handler_flush>:
   1ee94:	b530      	push	{r4, r5, lr}
   1ee96:	4605      	mov	r5, r0
   1ee98:	68c0      	ldr	r0, [r0, #12]
   1ee9a:	b085      	sub	sp, #20
   1ee9c:	b9a8      	cbnz	r0, 1eeca <stream_handler_flush+0x36>
   1ee9e:	e01a      	b.n	1eed6 <stream_handler_flush+0x42>
   1eea0:	68e8      	ldr	r0, [r5, #12]
   1eea2:	f7ff fbad 	bl	1e600 <linked_list_pop>
   1eea6:	4604      	mov	r4, r0
   1eea8:	b170      	cbz	r0, 1eec8 <stream_handler_flush+0x34>
   1eeaa:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1eeae:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1eeb2:	e9cd 0100 	strd	r0, r1, [sp]
   1eeb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1eeba:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1eebe:	4668      	mov	r0, sp
   1eec0:	4798      	blx	r3
   1eec2:	4620      	mov	r0, r4
   1eec4:	f000 fbf8 	bl	1f6b8 <nrf_free>
   1eec8:	68e8      	ldr	r0, [r5, #12]
   1eeca:	f7ff fba9 	bl	1e620 <linked_list_size_get>
   1eece:	2800      	cmp	r0, #0
   1eed0:	d1e6      	bne.n	1eea0 <stream_handler_flush+0xc>
   1eed2:	b005      	add	sp, #20
   1eed4:	bd30      	pop	{r4, r5, pc}
   1eed6:	2008      	movs	r0, #8
   1eed8:	b005      	add	sp, #20
   1eeda:	bd30      	pop	{r4, r5, pc}

0001eedc <stream_handler_free>:
   1eedc:	b530      	push	{r4, r5, lr}
   1eede:	4605      	mov	r5, r0
   1eee0:	68c0      	ldr	r0, [r0, #12]
   1eee2:	b085      	sub	sp, #20
   1eee4:	b9a0      	cbnz	r0, 1ef10 <stream_handler_free+0x34>
   1eee6:	e01c      	b.n	1ef22 <stream_handler_free+0x46>
   1eee8:	f7ff fb8a 	bl	1e600 <linked_list_pop>
   1eeec:	4604      	mov	r4, r0
   1eeee:	b170      	cbz	r0, 1ef0e <stream_handler_free+0x32>
   1eef0:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1eef4:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1eef8:	e9cd 0100 	strd	r0, r1, [sp]
   1eefc:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ef00:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1ef04:	4668      	mov	r0, sp
   1ef06:	4798      	blx	r3
   1ef08:	4620      	mov	r0, r4
   1ef0a:	f000 fbd5 	bl	1f6b8 <nrf_free>
   1ef0e:	68e8      	ldr	r0, [r5, #12]
   1ef10:	f7ff fb86 	bl	1e620 <linked_list_size_get>
   1ef14:	4604      	mov	r4, r0
   1ef16:	68e8      	ldr	r0, [r5, #12]
   1ef18:	2c00      	cmp	r4, #0
   1ef1a:	d1e5      	bne.n	1eee8 <stream_handler_free+0xc>
   1ef1c:	f000 fbcc 	bl	1f6b8 <nrf_free>
   1ef20:	60ec      	str	r4, [r5, #12]
   1ef22:	b005      	add	sp, #20
   1ef24:	bd30      	pop	{r4, r5, pc}
   1ef26:	bf00      	nop

0001ef28 <mem_free>:
   1ef28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef2c:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1effc <mem_free+0xd4>
   1ef30:	b083      	sub	sp, #12
   1ef32:	9000      	str	r0, [sp, #0]
   1ef34:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   1ef38:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1ef3c:	b12b      	cbz	r3, 1ef4a <mem_free+0x22>
   1ef3e:	f8dc 2000 	ldr.w	r2, [ip]
   1ef42:	9c00      	ldr	r4, [sp, #0]
   1ef44:	7810      	ldrb	r0, [r2, #0]
   1ef46:	42a0      	cmp	r0, r4
   1ef48:	d006      	beq.n	1ef58 <mem_free+0x30>
   1ef4a:	f10c 0c0c 	add.w	ip, ip, #12
   1ef4e:	45e3      	cmp	fp, ip
   1ef50:	d1f2      	bne.n	1ef38 <mem_free+0x10>
   1ef52:	b003      	add	sp, #12
   1ef54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef58:	f8dc a004 	ldr.w	sl, [ip, #4]
   1ef5c:	eb03 080a 	add.w	r8, r3, sl
   1ef60:	45c2      	cmp	sl, r8
   1ef62:	d2f2      	bcs.n	1ef4a <mem_free+0x22>
   1ef64:	6853      	ldr	r3, [r2, #4]
   1ef66:	f8cd c004 	str.w	ip, [sp, #4]
   1ef6a:	46d6      	mov	lr, sl
   1ef6c:	469c      	mov	ip, r3
   1ef6e:	f8d2 9010 	ldr.w	r9, [r2, #16]
   1ef72:	8997      	ldrh	r7, [r2, #12]
   1ef74:	ebae 000a 	sub.w	r0, lr, sl
   1ef78:	b3df      	cbz	r7, 1eff2 <mem_free+0xca>
   1ef7a:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   1ef7e:	4290      	cmp	r0, r2
   1ef80:	d31c      	bcc.n	1efbc <mem_free+0x94>
   1ef82:	4665      	mov	r5, ip
   1ef84:	2400      	movs	r4, #0
   1ef86:	f109 0304 	add.w	r3, r9, #4
   1ef8a:	e003      	b.n	1ef94 <mem_free+0x6c>
   1ef8c:	885a      	ldrh	r2, [r3, #2]
   1ef8e:	3304      	adds	r3, #4
   1ef90:	4282      	cmp	r2, r0
   1ef92:	d815      	bhi.n	1efc0 <mem_free+0x98>
   1ef94:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   1ef98:	3401      	adds	r4, #1
   1ef9a:	42a7      	cmp	r7, r4
   1ef9c:	fb02 5506 	mla	r5, r2, r6, r5
   1efa0:	eba0 0002 	sub.w	r0, r0, r2
   1efa4:	461e      	mov	r6, r3
   1efa6:	d1f1      	bne.n	1ef8c <mem_free+0x64>
   1efa8:	2000      	movs	r0, #0
   1efaa:	4281      	cmp	r1, r0
   1efac:	d00d      	beq.n	1efca <mem_free+0xa2>
   1efae:	f10e 0e01 	add.w	lr, lr, #1
   1efb2:	45f0      	cmp	r8, lr
   1efb4:	d1de      	bne.n	1ef74 <mem_free+0x4c>
   1efb6:	f8dd c004 	ldr.w	ip, [sp, #4]
   1efba:	e7c6      	b.n	1ef4a <mem_free+0x22>
   1efbc:	4665      	mov	r5, ip
   1efbe:	464e      	mov	r6, r9
   1efc0:	8833      	ldrh	r3, [r6, #0]
   1efc2:	fb00 5003 	mla	r0, r0, r3, r5
   1efc6:	4281      	cmp	r1, r0
   1efc8:	d1f1      	bne.n	1efae <mem_free+0x86>
   1efca:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   1efce:	f8dd c004 	ldr.w	ip, [sp, #4]
   1efd2:	d0ba      	beq.n	1ef4a <mem_free+0x22>
   1efd4:	2301      	movs	r3, #1
   1efd6:	4a08      	ldr	r2, [pc, #32]	; (1eff8 <mem_free+0xd0>)
   1efd8:	ea4f 115e 	mov.w	r1, lr, lsr #5
   1efdc:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1efe0:	f00e 0e1f 	and.w	lr, lr, #31
   1efe4:	fa03 fe0e 	lsl.w	lr, r3, lr
   1efe8:	ea4e 0000 	orr.w	r0, lr, r0
   1efec:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   1eff0:	e7af      	b.n	1ef52 <mem_free+0x2a>
   1eff2:	4638      	mov	r0, r7
   1eff4:	e7d9      	b.n	1efaa <mem_free+0x82>
   1eff6:	bf00      	nop
   1eff8:	20021bcc 	.word	0x20021bcc
   1effc:	20021c10 	.word	0x20021c10

0001f000 <mem_alloc.constprop.5>:
   1f000:	2800      	cmp	r0, #0
   1f002:	d050      	beq.n	1f0a6 <mem_alloc.constprop.5+0xa6>
   1f004:	4b6d      	ldr	r3, [pc, #436]	; (1f1bc <mem_alloc.constprop.5+0x1bc>)
   1f006:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1f00a:	4290      	cmp	r0, r2
   1f00c:	d84b      	bhi.n	1f0a6 <mem_alloc.constprop.5+0xa6>
   1f00e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f012:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   1f016:	b083      	sub	sp, #12
   1f018:	f1bb 0f00 	cmp.w	fp, #0
   1f01c:	d054      	beq.n	1f0c8 <mem_alloc.constprop.5+0xc8>
   1f01e:	f10b 32ff 	add.w	r2, fp, #4294967295
   1f022:	4691      	mov	r9, r2
   1f024:	2600      	movs	r6, #0
   1f026:	f04f 0812 	mov.w	r8, #18
   1f02a:	4f65      	ldr	r7, [pc, #404]	; (1f1c0 <mem_alloc.constprop.5+0x1c0>)
   1f02c:	9201      	str	r2, [sp, #4]
   1f02e:	f10b 0e11 	add.w	lr, fp, #17
   1f032:	eb06 0209 	add.w	r2, r6, r9
   1f036:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   1f03a:	3201      	adds	r2, #1
   1f03c:	0852      	lsrs	r2, r2, #1
   1f03e:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   1f042:	f102 0112 	add.w	r1, r2, #18
   1f046:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   1f04a:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   1f04e:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   1f052:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   1f056:	f8dc c004 	ldr.w	ip, [ip, #4]
   1f05a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1f05e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1f062:	f8da a010 	ldr.w	sl, [sl, #16]
   1f066:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   1f06a:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   1f06e:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   1f072:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1f076:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   1f07a:	6849      	ldr	r1, [r1, #4]
   1f07c:	692d      	ldr	r5, [r5, #16]
   1f07e:	6924      	ldr	r4, [r4, #16]
   1f080:	f8dc c004 	ldr.w	ip, [ip, #4]
   1f084:	4550      	cmp	r0, sl
   1f086:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   1f08a:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   1f08e:	d915      	bls.n	1f0bc <mem_alloc.constprop.5+0xbc>
   1f090:	4288      	cmp	r0, r1
   1f092:	d211      	bcs.n	1f0b8 <mem_alloc.constprop.5+0xb8>
   1f094:	42a8      	cmp	r0, r5
   1f096:	d908      	bls.n	1f0aa <mem_alloc.constprop.5+0xaa>
   1f098:	1c56      	adds	r6, r2, #1
   1f09a:	45b1      	cmp	r9, r6
   1f09c:	f0c0 8087 	bcc.w	1f1ae <mem_alloc.constprop.5+0x1ae>
   1f0a0:	f102 0813 	add.w	r8, r2, #19
   1f0a4:	e7c5      	b.n	1f032 <mem_alloc.constprop.5+0x32>
   1f0a6:	2000      	movs	r0, #0
   1f0a8:	4770      	bx	lr
   1f0aa:	f102 39ff 	add.w	r9, r2, #4294967295
   1f0ae:	454e      	cmp	r6, r9
   1f0b0:	d87d      	bhi.n	1f1ae <mem_alloc.constprop.5+0x1ae>
   1f0b2:	f102 0e11 	add.w	lr, r2, #17
   1f0b6:	e7bc      	b.n	1f032 <mem_alloc.constprop.5+0x32>
   1f0b8:	f109 0601 	add.w	r6, r9, #1
   1f0bc:	45b3      	cmp	fp, r6
   1f0be:	d007      	beq.n	1f0d0 <mem_alloc.constprop.5+0xd0>
   1f0c0:	2e10      	cmp	r6, #16
   1f0c2:	d001      	beq.n	1f0c8 <mem_alloc.constprop.5+0xc8>
   1f0c4:	45b3      	cmp	fp, r6
   1f0c6:	d808      	bhi.n	1f0da <mem_alloc.constprop.5+0xda>
   1f0c8:	2000      	movs	r0, #0
   1f0ca:	b003      	add	sp, #12
   1f0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0d0:	9a01      	ldr	r2, [sp, #4]
   1f0d2:	2a10      	cmp	r2, #16
   1f0d4:	bf18      	it	ne
   1f0d6:	4616      	movne	r6, r2
   1f0d8:	d0f6      	beq.n	1f0c8 <mem_alloc.constprop.5+0xc8>
   1f0da:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 1f1c4 <mem_alloc.constprop.5+0x1c4>
   1f0de:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   1f0e2:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   1f0e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1f0ea:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   1f0ee:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   1f0f2:	f8d2 e004 	ldr.w	lr, [r2, #4]
   1f0f6:	691d      	ldr	r5, [r3, #16]
   1f0f8:	2c00      	cmp	r4, #0
   1f0fa:	d056      	beq.n	1f1aa <mem_alloc.constprop.5+0x1aa>
   1f0fc:	462a      	mov	r2, r5
   1f0fe:	4670      	mov	r0, lr
   1f100:	00a4      	lsls	r4, r4, #2
   1f102:	eb05 0904 	add.w	r9, r5, r4
   1f106:	8851      	ldrh	r1, [r2, #2]
   1f108:	3204      	adds	r2, #4
   1f10a:	4591      	cmp	r9, r2
   1f10c:	4408      	add	r0, r1
   1f10e:	d1fa      	bne.n	1f106 <mem_alloc.constprop.5+0x106>
   1f110:	1929      	adds	r1, r5, r4
   1f112:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   1f116:	4482      	add	sl, r0
   1f118:	4582      	cmp	sl, r0
   1f11a:	d918      	bls.n	1f14e <mem_alloc.constprop.5+0x14e>
   1f11c:	0941      	lsrs	r1, r0, #5
   1f11e:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   1f122:	f000 041f 	and.w	r4, r0, #31
   1f126:	fa22 f904 	lsr.w	r9, r2, r4
   1f12a:	f019 0f01 	tst.w	r9, #1
   1f12e:	d007      	beq.n	1f140 <mem_alloc.constprop.5+0x140>
   1f130:	e013      	b.n	1f15a <mem_alloc.constprop.5+0x15a>
   1f132:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   1f136:	fa22 f904 	lsr.w	r9, r2, r4
   1f13a:	f019 0f01 	tst.w	r9, #1
   1f13e:	d10c      	bne.n	1f15a <mem_alloc.constprop.5+0x15a>
   1f140:	3001      	adds	r0, #1
   1f142:	4582      	cmp	sl, r0
   1f144:	ea4f 1150 	mov.w	r1, r0, lsr #5
   1f148:	f000 041f 	and.w	r4, r0, #31
   1f14c:	d1f1      	bne.n	1f132 <mem_alloc.constprop.5+0x132>
   1f14e:	3601      	adds	r6, #1
   1f150:	455e      	cmp	r6, fp
   1f152:	f108 0808 	add.w	r8, r8, #8
   1f156:	d3c4      	bcc.n	1f0e2 <mem_alloc.constprop.5+0xe2>
   1f158:	e7b6      	b.n	1f0c8 <mem_alloc.constprop.5+0xc8>
   1f15a:	2601      	movs	r6, #1
   1f15c:	fa06 f404 	lsl.w	r4, r6, r4
   1f160:	899e      	ldrh	r6, [r3, #12]
   1f162:	ea22 0204 	bic.w	r2, r2, r4
   1f166:	eba0 000e 	sub.w	r0, r0, lr
   1f16a:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   1f16e:	685c      	ldr	r4, [r3, #4]
   1f170:	2e00      	cmp	r6, #0
   1f172:	d0a9      	beq.n	1f0c8 <mem_alloc.constprop.5+0xc8>
   1f174:	886a      	ldrh	r2, [r5, #2]
   1f176:	4282      	cmp	r2, r0
   1f178:	d811      	bhi.n	1f19e <mem_alloc.constprop.5+0x19e>
   1f17a:	2100      	movs	r1, #0
   1f17c:	1d2b      	adds	r3, r5, #4
   1f17e:	e003      	b.n	1f188 <mem_alloc.constprop.5+0x188>
   1f180:	885a      	ldrh	r2, [r3, #2]
   1f182:	3304      	adds	r3, #4
   1f184:	4282      	cmp	r2, r0
   1f186:	d80a      	bhi.n	1f19e <mem_alloc.constprop.5+0x19e>
   1f188:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   1f18c:	3101      	adds	r1, #1
   1f18e:	428e      	cmp	r6, r1
   1f190:	fb02 4405 	mla	r4, r2, r5, r4
   1f194:	eba0 0002 	sub.w	r0, r0, r2
   1f198:	461d      	mov	r5, r3
   1f19a:	d1f1      	bne.n	1f180 <mem_alloc.constprop.5+0x180>
   1f19c:	e794      	b.n	1f0c8 <mem_alloc.constprop.5+0xc8>
   1f19e:	882b      	ldrh	r3, [r5, #0]
   1f1a0:	fb00 4003 	mla	r0, r0, r3, r4
   1f1a4:	b003      	add	sp, #12
   1f1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1aa:	4670      	mov	r0, lr
   1f1ac:	e7b0      	b.n	1f110 <mem_alloc.constprop.5+0x110>
   1f1ae:	f1bb 0f10 	cmp.w	fp, #16
   1f1b2:	bf08      	it	eq
   1f1b4:	260f      	moveq	r6, #15
   1f1b6:	d090      	beq.n	1f0da <mem_alloc.constprop.5+0xda>
   1f1b8:	e786      	b.n	1f0c8 <mem_alloc.constprop.5+0xc8>
   1f1ba:	bf00      	nop
   1f1bc:	20021c4c 	.word	0x20021c4c
   1f1c0:	20021c10 	.word	0x20021c10
   1f1c4:	20021bcc 	.word	0x20021bcc

0001f1c8 <mem_alloc.constprop.4>:
   1f1c8:	2800      	cmp	r0, #0
   1f1ca:	d04c      	beq.n	1f266 <mem_alloc.constprop.4+0x9e>
   1f1cc:	4b6b      	ldr	r3, [pc, #428]	; (1f37c <__kernel_ram_size+0x44>)
   1f1ce:	681a      	ldr	r2, [r3, #0]
   1f1d0:	4290      	cmp	r0, r2
   1f1d2:	d848      	bhi.n	1f266 <mem_alloc.constprop.4+0x9e>
   1f1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f1d8:	685f      	ldr	r7, [r3, #4]
   1f1da:	b083      	sub	sp, #12
   1f1dc:	9700      	str	r7, [sp, #0]
   1f1de:	2f00      	cmp	r7, #0
   1f1e0:	d051      	beq.n	1f286 <mem_alloc.constprop.4+0xbe>
   1f1e2:	1e7a      	subs	r2, r7, #1
   1f1e4:	4696      	mov	lr, r2
   1f1e6:	2100      	movs	r1, #0
   1f1e8:	f04f 0c01 	mov.w	ip, #1
   1f1ec:	4c64      	ldr	r4, [pc, #400]	; (1f380 <__kernel_ram_size+0x48>)
   1f1ee:	9201      	str	r2, [sp, #4]
   1f1f0:	eb01 020e 	add.w	r2, r1, lr
   1f1f4:	3201      	adds	r2, #1
   1f1f6:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   1f1fa:	0852      	lsrs	r2, r2, #1
   1f1fc:	f102 0801 	add.w	r8, r2, #1
   1f200:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1f204:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   1f208:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   1f20c:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   1f210:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   1f214:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   1f218:	f8d9 9004 	ldr.w	r9, [r9, #4]
   1f21c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   1f220:	f8da a010 	ldr.w	sl, [sl, #16]
   1f224:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   1f228:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   1f22c:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   1f230:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   1f234:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   1f238:	6936      	ldr	r6, [r6, #16]
   1f23a:	f8db b004 	ldr.w	fp, [fp, #4]
   1f23e:	692d      	ldr	r5, [r5, #16]
   1f240:	f8d9 9004 	ldr.w	r9, [r9, #4]
   1f244:	4550      	cmp	r0, sl
   1f246:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   1f24a:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   1f24e:	d913      	bls.n	1f278 <mem_alloc.constprop.4+0xb0>
   1f250:	42a8      	cmp	r0, r5
   1f252:	d210      	bcs.n	1f276 <mem_alloc.constprop.4+0xae>
   1f254:	42b0      	cmp	r0, r6
   1f256:	d908      	bls.n	1f26a <mem_alloc.constprop.4+0xa2>
   1f258:	45c6      	cmp	lr, r8
   1f25a:	4641      	mov	r1, r8
   1f25c:	f0c0 8087 	bcc.w	1f36e <__kernel_ram_size+0x36>
   1f260:	f108 0c01 	add.w	ip, r8, #1
   1f264:	e7c4      	b.n	1f1f0 <mem_alloc.constprop.4+0x28>
   1f266:	2000      	movs	r0, #0
   1f268:	4770      	bx	lr
   1f26a:	f102 3eff 	add.w	lr, r2, #4294967295
   1f26e:	4571      	cmp	r1, lr
   1f270:	d87d      	bhi.n	1f36e <__kernel_ram_size+0x36>
   1f272:	4617      	mov	r7, r2
   1f274:	e7bc      	b.n	1f1f0 <mem_alloc.constprop.4+0x28>
   1f276:	4639      	mov	r1, r7
   1f278:	9a00      	ldr	r2, [sp, #0]
   1f27a:	428a      	cmp	r2, r1
   1f27c:	d007      	beq.n	1f28e <mem_alloc.constprop.4+0xc6>
   1f27e:	2910      	cmp	r1, #16
   1f280:	d001      	beq.n	1f286 <mem_alloc.constprop.4+0xbe>
   1f282:	428a      	cmp	r2, r1
   1f284:	d808      	bhi.n	1f298 <mem_alloc.constprop.4+0xd0>
   1f286:	2000      	movs	r0, #0
   1f288:	b003      	add	sp, #12
   1f28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f28e:	9a01      	ldr	r2, [sp, #4]
   1f290:	2a10      	cmp	r2, #16
   1f292:	bf18      	it	ne
   1f294:	4611      	movne	r1, r2
   1f296:	d0f6      	beq.n	1f286 <mem_alloc.constprop.4+0xbe>
   1f298:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 1f384 <__kernel_ram_size+0x4c>
   1f29c:	f8dd 9000 	ldr.w	r9, [sp]
   1f2a0:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   1f2a4:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   1f2a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1f2ac:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   1f2b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1f2b4:	f8d2 e004 	ldr.w	lr, [r2, #4]
   1f2b8:	691f      	ldr	r7, [r3, #16]
   1f2ba:	2e00      	cmp	r6, #0
   1f2bc:	d055      	beq.n	1f36a <__kernel_ram_size+0x32>
   1f2be:	463a      	mov	r2, r7
   1f2c0:	4670      	mov	r0, lr
   1f2c2:	00b6      	lsls	r6, r6, #2
   1f2c4:	eb07 0a06 	add.w	sl, r7, r6
   1f2c8:	8855      	ldrh	r5, [r2, #2]
   1f2ca:	3204      	adds	r2, #4
   1f2cc:	4592      	cmp	sl, r2
   1f2ce:	4428      	add	r0, r5
   1f2d0:	d1fa      	bne.n	1f2c8 <mem_alloc.constprop.4+0x100>
   1f2d2:	19bd      	adds	r5, r7, r6
   1f2d4:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   1f2d8:	4483      	add	fp, r0
   1f2da:	4583      	cmp	fp, r0
   1f2dc:	d918      	bls.n	1f310 <mem_alloc.constprop.4+0x148>
   1f2de:	0945      	lsrs	r5, r0, #5
   1f2e0:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   1f2e4:	f000 061f 	and.w	r6, r0, #31
   1f2e8:	fa22 fa06 	lsr.w	sl, r2, r6
   1f2ec:	f01a 0f01 	tst.w	sl, #1
   1f2f0:	d007      	beq.n	1f302 <mem_alloc.constprop.4+0x13a>
   1f2f2:	e013      	b.n	1f31c <mem_alloc.constprop.4+0x154>
   1f2f4:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   1f2f8:	fa22 fa06 	lsr.w	sl, r2, r6
   1f2fc:	f01a 0f01 	tst.w	sl, #1
   1f300:	d10c      	bne.n	1f31c <mem_alloc.constprop.4+0x154>
   1f302:	3001      	adds	r0, #1
   1f304:	4583      	cmp	fp, r0
   1f306:	ea4f 1550 	mov.w	r5, r0, lsr #5
   1f30a:	f000 061f 	and.w	r6, r0, #31
   1f30e:	d1f1      	bne.n	1f2f4 <mem_alloc.constprop.4+0x12c>
   1f310:	3101      	adds	r1, #1
   1f312:	4549      	cmp	r1, r9
   1f314:	f108 0808 	add.w	r8, r8, #8
   1f318:	d3c4      	bcc.n	1f2a4 <mem_alloc.constprop.4+0xdc>
   1f31a:	e7b4      	b.n	1f286 <mem_alloc.constprop.4+0xbe>
   1f31c:	2101      	movs	r1, #1
   1f31e:	40b1      	lsls	r1, r6
   1f320:	899e      	ldrh	r6, [r3, #12]
   1f322:	ea22 0201 	bic.w	r2, r2, r1
   1f326:	eba0 000e 	sub.w	r0, r0, lr
   1f32a:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   1f32e:	685c      	ldr	r4, [r3, #4]
   1f330:	2e00      	cmp	r6, #0
   1f332:	d0a8      	beq.n	1f286 <mem_alloc.constprop.4+0xbe>
   1f334:	887a      	ldrh	r2, [r7, #2]
   1f336:	4282      	cmp	r2, r0
   1f338:	d811      	bhi.n	1f35e <__kernel_ram_size+0x26>
   1f33a:	2100      	movs	r1, #0
   1f33c:	1d3b      	adds	r3, r7, #4
   1f33e:	e003      	b.n	1f348 <__kernel_ram_size+0x10>
   1f340:	885a      	ldrh	r2, [r3, #2]
   1f342:	3304      	adds	r3, #4
   1f344:	4282      	cmp	r2, r0
   1f346:	d80a      	bhi.n	1f35e <__kernel_ram_size+0x26>
   1f348:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   1f34c:	3101      	adds	r1, #1
   1f34e:	428e      	cmp	r6, r1
   1f350:	eba0 0002 	sub.w	r0, r0, r2
   1f354:	fb02 4405 	mla	r4, r2, r5, r4
   1f358:	461f      	mov	r7, r3
   1f35a:	d1f1      	bne.n	1f340 <__kernel_ram_size+0x8>
   1f35c:	e793      	b.n	1f286 <mem_alloc.constprop.4+0xbe>
   1f35e:	883b      	ldrh	r3, [r7, #0]
   1f360:	fb00 4003 	mla	r0, r0, r3, r4
   1f364:	b003      	add	sp, #12
   1f366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f36a:	4670      	mov	r0, lr
   1f36c:	e7b1      	b.n	1f2d2 <mem_alloc.constprop.4+0x10a>
   1f36e:	9a00      	ldr	r2, [sp, #0]
   1f370:	2a10      	cmp	r2, #16
   1f372:	bf08      	it	eq
   1f374:	210f      	moveq	r1, #15
   1f376:	d08f      	beq.n	1f298 <mem_alloc.constprop.4+0xd0>
   1f378:	e785      	b.n	1f286 <mem_alloc.constprop.4+0xbe>
   1f37a:	bf00      	nop
   1f37c:	20021c4c 	.word	0x20021c4c
   1f380:	20021c10 	.word	0x20021c10
   1f384:	20021bcc 	.word	0x20021bcc

0001f388 <nrf_mem_init>:
   1f388:	b570      	push	{r4, r5, r6, lr}
   1f38a:	2200      	movs	r2, #0
   1f38c:	2501      	movs	r5, #1
   1f38e:	4833      	ldr	r0, [pc, #204]	; (1f45c <nrf_mem_init+0xd4>)
   1f390:	0951      	lsrs	r1, r2, #5
   1f392:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   1f396:	f002 031f 	and.w	r3, r2, #31
   1f39a:	fa05 f303 	lsl.w	r3, r5, r3
   1f39e:	3201      	adds	r2, #1
   1f3a0:	4323      	orrs	r3, r4
   1f3a2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1f3a6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   1f3aa:	d1f1      	bne.n	1f390 <nrf_mem_init+0x8>
   1f3ac:	2400      	movs	r4, #0
   1f3ae:	4b2c      	ldr	r3, [pc, #176]	; (1f460 <nrf_mem_init+0xd8>)
   1f3b0:	4621      	mov	r1, r4
   1f3b2:	223c      	movs	r2, #60	; 0x3c
   1f3b4:	482b      	ldr	r0, [pc, #172]	; (1f464 <nrf_mem_init+0xdc>)
   1f3b6:	601c      	str	r4, [r3, #0]
   1f3b8:	f002 ff48 	bl	2224c <memset>
   1f3bc:	2110      	movs	r1, #16
   1f3be:	2205      	movs	r2, #5
   1f3c0:	4b29      	ldr	r3, [pc, #164]	; (1f468 <nrf_mem_init+0xe0>)
   1f3c2:	4e2a      	ldr	r6, [pc, #168]	; (1f46c <nrf_mem_init+0xe4>)
   1f3c4:	e9c3 4400 	strd	r4, r4, [r3]
   1f3c8:	60d9      	str	r1, [r3, #12]
   1f3ca:	6159      	str	r1, [r3, #20]
   1f3cc:	61d9      	str	r1, [r3, #28]
   1f3ce:	6259      	str	r1, [r3, #36]	; 0x24
   1f3d0:	62d9      	str	r1, [r3, #44]	; 0x2c
   1f3d2:	6359      	str	r1, [r3, #52]	; 0x34
   1f3d4:	63d9      	str	r1, [r3, #60]	; 0x3c
   1f3d6:	6459      	str	r1, [r3, #68]	; 0x44
   1f3d8:	64d9      	str	r1, [r3, #76]	; 0x4c
   1f3da:	6559      	str	r1, [r3, #84]	; 0x54
   1f3dc:	65d9      	str	r1, [r3, #92]	; 0x5c
   1f3de:	6659      	str	r1, [r3, #100]	; 0x64
   1f3e0:	66d9      	str	r1, [r3, #108]	; 0x6c
   1f3e2:	6759      	str	r1, [r3, #116]	; 0x74
   1f3e4:	67d9      	str	r1, [r3, #124]	; 0x7c
   1f3e6:	609a      	str	r2, [r3, #8]
   1f3e8:	611a      	str	r2, [r3, #16]
   1f3ea:	619a      	str	r2, [r3, #24]
   1f3ec:	621a      	str	r2, [r3, #32]
   1f3ee:	629a      	str	r2, [r3, #40]	; 0x28
   1f3f0:	631a      	str	r2, [r3, #48]	; 0x30
   1f3f2:	639a      	str	r2, [r3, #56]	; 0x38
   1f3f4:	641a      	str	r2, [r3, #64]	; 0x40
   1f3f6:	649a      	str	r2, [r3, #72]	; 0x48
   1f3f8:	651a      	str	r2, [r3, #80]	; 0x50
   1f3fa:	659a      	str	r2, [r3, #88]	; 0x58
   1f3fc:	661a      	str	r2, [r3, #96]	; 0x60
   1f3fe:	669a      	str	r2, [r3, #104]	; 0x68
   1f400:	671a      	str	r2, [r3, #112]	; 0x70
   1f402:	679a      	str	r2, [r3, #120]	; 0x78
   1f404:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   1f408:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   1f40c:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   1f410:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   1f414:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   1f418:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   1f41c:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   1f420:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   1f424:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   1f428:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   1f42c:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   1f430:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   1f434:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   1f438:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   1f43c:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   1f440:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   1f444:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   1f448:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1f44c:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   1f450:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1f454:	4620      	mov	r0, r4
   1f456:	7035      	strb	r5, [r6, #0]
   1f458:	bd70      	pop	{r4, r5, r6, pc}
   1f45a:	bf00      	nop
   1f45c:	20021bcc 	.word	0x20021bcc
   1f460:	20021c0c 	.word	0x20021c0c
   1f464:	20021c10 	.word	0x20021c10
   1f468:	20021c4c 	.word	0x20021c4c
   1f46c:	2002501c 	.word	0x2002501c

0001f470 <nrf_mem_register>:
   1f470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f474:	4b87      	ldr	r3, [pc, #540]	; (1f694 <nrf_mem_register+0x224>)
   1f476:	b087      	sub	sp, #28
   1f478:	781b      	ldrb	r3, [r3, #0]
   1f47a:	2b00      	cmp	r3, #0
   1f47c:	f000 808c 	beq.w	1f598 <nrf_mem_register+0x128>
   1f480:	b328      	cbz	r0, 1f4ce <nrf_mem_register+0x5e>
   1f482:	b321      	cbz	r1, 1f4ce <nrf_mem_register+0x5e>
   1f484:	780b      	ldrb	r3, [r1, #0]
   1f486:	f8df 8218 	ldr.w	r8, [pc, #536]	; 1f6a0 <nrf_mem_register+0x230>
   1f48a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1f48e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1f492:	685b      	ldr	r3, [r3, #4]
   1f494:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   1f498:	4463      	add	r3, ip
   1f49a:	2b10      	cmp	r3, #16
   1f49c:	d811      	bhi.n	1f4c2 <nrf_mem_register+0x52>
   1f49e:	f04f 0a00 	mov.w	sl, #0
   1f4a2:	4689      	mov	r9, r1
   1f4a4:	4b7c      	ldr	r3, [pc, #496]	; (1f698 <nrf_mem_register+0x228>)
   1f4a6:	4f7d      	ldr	r7, [pc, #500]	; (1f69c <nrf_mem_register+0x22c>)
   1f4a8:	681b      	ldr	r3, [r3, #0]
   1f4aa:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   1f4ae:	9300      	str	r3, [sp, #0]
   1f4b0:	68b9      	ldr	r1, [r7, #8]
   1f4b2:	b191      	cbz	r1, 1f4da <nrf_mem_register+0x6a>
   1f4b4:	f10a 0a01 	add.w	sl, sl, #1
   1f4b8:	f1ba 0f05 	cmp.w	sl, #5
   1f4bc:	f107 070c 	add.w	r7, r7, #12
   1f4c0:	d1f6      	bne.n	1f4b0 <nrf_mem_register+0x40>
   1f4c2:	f248 1b07 	movw	fp, #33031	; 0x8107
   1f4c6:	4658      	mov	r0, fp
   1f4c8:	b007      	add	sp, #28
   1f4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4ce:	f248 1b0e 	movw	fp, #33038	; 0x810e
   1f4d2:	4658      	mov	r0, fp
   1f4d4:	b007      	add	sp, #28
   1f4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4da:	f1bc 0f00 	cmp.w	ip, #0
   1f4de:	d061      	beq.n	1f5a4 <nrf_mem_register+0x134>
   1f4e0:	460d      	mov	r5, r1
   1f4e2:	460c      	mov	r4, r1
   1f4e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1f4e8:	eb0e 0b03 	add.w	fp, lr, r3
   1f4ec:	885a      	ldrh	r2, [r3, #2]
   1f4ee:	f833 6b04 	ldrh.w	r6, [r3], #4
   1f4f2:	4415      	add	r5, r2
   1f4f4:	459b      	cmp	fp, r3
   1f4f6:	fb02 4406 	mla	r4, r2, r6, r4
   1f4fa:	d1f7      	bne.n	1f4ec <nrf_mem_register+0x7c>
   1f4fc:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1f500:	42a3      	cmp	r3, r4
   1f502:	d3d7      	bcc.n	1f4b4 <nrf_mem_register+0x44>
   1f504:	9b00      	ldr	r3, [sp, #0]
   1f506:	442b      	add	r3, r5
   1f508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1f50c:	d2d2      	bcs.n	1f4b4 <nrf_mem_register+0x44>
   1f50e:	4c63      	ldr	r4, [pc, #396]	; (1f69c <nrf_mem_register+0x22c>)
   1f510:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   1f514:	0092      	lsls	r2, r2, #2
   1f516:	f8c0 a000 	str.w	sl, [r0]
   1f51a:	18a0      	adds	r0, r4, r2
   1f51c:	f844 9002 	str.w	r9, [r4, r2]
   1f520:	9a00      	ldr	r2, [sp, #0]
   1f522:	468b      	mov	fp, r1
   1f524:	e9c0 2501 	strd	r2, r5, [r0, #4]
   1f528:	f899 2001 	ldrb.w	r2, [r9, #1]
   1f52c:	485a      	ldr	r0, [pc, #360]	; (1f698 <nrf_mem_register+0x228>)
   1f52e:	2a01      	cmp	r2, #1
   1f530:	6003      	str	r3, [r0, #0]
   1f532:	d0c8      	beq.n	1f4c6 <nrf_mem_register+0x56>
   1f534:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   1f538:	2b00      	cmp	r3, #0
   1f53a:	d0c4      	beq.n	1f4c6 <nrf_mem_register+0x56>
   1f53c:	2500      	movs	r5, #0
   1f53e:	f8cd 9004 	str.w	r9, [sp, #4]
   1f542:	f8cd a00c 	str.w	sl, [sp, #12]
   1f546:	f8cd b014 	str.w	fp, [sp, #20]
   1f54a:	9b01      	ldr	r3, [sp, #4]
   1f54c:	781f      	ldrb	r7, [r3, #0]
   1f54e:	691a      	ldr	r2, [r3, #16]
   1f550:	013b      	lsls	r3, r7, #4
   1f552:	eb03 0907 	add.w	r9, r3, r7
   1f556:	9300      	str	r3, [sp, #0]
   1f558:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   1f55c:	6859      	ldr	r1, [r3, #4]
   1f55e:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   1f562:	9102      	str	r1, [sp, #8]
   1f564:	bb39      	cbnz	r1, 1f5b6 <nrf_mem_register+0x146>
   1f566:	9a03      	ldr	r2, [sp, #12]
   1f568:	60dd      	str	r5, [r3, #12]
   1f56a:	609a      	str	r2, [r3, #8]
   1f56c:	9b00      	ldr	r3, [sp, #0]
   1f56e:	443b      	add	r3, r7
   1f570:	461f      	mov	r7, r3
   1f572:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   1f576:	684b      	ldr	r3, [r1, #4]
   1f578:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   1f57c:	3301      	adds	r3, #1
   1f57e:	4294      	cmp	r4, r2
   1f580:	604b      	str	r3, [r1, #4]
   1f582:	d912      	bls.n	1f5aa <nrf_mem_register+0x13a>
   1f584:	9b01      	ldr	r3, [sp, #4]
   1f586:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   1f58a:	899b      	ldrh	r3, [r3, #12]
   1f58c:	3501      	adds	r5, #1
   1f58e:	429d      	cmp	r5, r3
   1f590:	d3db      	bcc.n	1f54a <nrf_mem_register+0xda>
   1f592:	f8dd b014 	ldr.w	fp, [sp, #20]
   1f596:	e796      	b.n	1f4c6 <nrf_mem_register+0x56>
   1f598:	f248 1b08 	movw	fp, #33032	; 0x8108
   1f59c:	4658      	mov	r0, fp
   1f59e:	b007      	add	sp, #28
   1f5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f5a4:	9b00      	ldr	r3, [sp, #0]
   1f5a6:	4665      	mov	r5, ip
   1f5a8:	e7ae      	b.n	1f508 <nrf_mem_register+0x98>
   1f5aa:	9b01      	ldr	r3, [sp, #4]
   1f5ac:	3501      	adds	r5, #1
   1f5ae:	899b      	ldrh	r3, [r3, #12]
   1f5b0:	42ab      	cmp	r3, r5
   1f5b2:	d8ca      	bhi.n	1f54a <nrf_mem_register+0xda>
   1f5b4:	e7ed      	b.n	1f592 <nrf_mem_register+0x122>
   1f5b6:	2600      	movs	r6, #0
   1f5b8:	f101 3aff 	add.w	sl, r1, #4294967295
   1f5bc:	9504      	str	r5, [sp, #16]
   1f5be:	eb06 000a 	add.w	r0, r6, sl
   1f5c2:	eb09 0206 	add.w	r2, r9, r6
   1f5c6:	3201      	adds	r2, #1
   1f5c8:	3001      	adds	r0, #1
   1f5ca:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   1f5ce:	0840      	lsrs	r0, r0, #1
   1f5d0:	4d32      	ldr	r5, [pc, #200]	; (1f69c <nrf_mem_register+0x22c>)
   1f5d2:	eb09 0100 	add.w	r1, r9, r0
   1f5d6:	eb09 030a 	add.w	r3, r9, sl
   1f5da:	3101      	adds	r1, #1
   1f5dc:	3301      	adds	r3, #1
   1f5de:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1f5e2:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   1f5e6:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   1f5ea:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   1f5ee:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   1f5f2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   1f5f6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1f5fa:	f8db b010 	ldr.w	fp, [fp, #16]
   1f5fe:	6852      	ldr	r2, [r2, #4]
   1f600:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   1f604:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   1f608:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   1f60c:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1f610:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   1f614:	f8de e010 	ldr.w	lr, [lr, #16]
   1f618:	6849      	ldr	r1, [r1, #4]
   1f61a:	f8dc c010 	ldr.w	ip, [ip, #16]
   1f61e:	685b      	ldr	r3, [r3, #4]
   1f620:	4294      	cmp	r4, r2
   1f622:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   1f626:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   1f62a:	d92d      	bls.n	1f688 <nrf_mem_register+0x218>
   1f62c:	429c      	cmp	r4, r3
   1f62e:	d22d      	bcs.n	1f68c <nrf_mem_register+0x21c>
   1f630:	428c      	cmp	r4, r1
   1f632:	d924      	bls.n	1f67e <nrf_mem_register+0x20e>
   1f634:	1c46      	adds	r6, r0, #1
   1f636:	45b2      	cmp	sl, r6
   1f638:	d2c1      	bcs.n	1f5be <nrf_mem_register+0x14e>
   1f63a:	2610      	movs	r6, #16
   1f63c:	9d04      	ldr	r5, [sp, #16]
   1f63e:	9a02      	ldr	r2, [sp, #8]
   1f640:	42b2      	cmp	r2, r6
   1f642:	d911      	bls.n	1f668 <nrf_mem_register+0x1f8>
   1f644:	9b00      	ldr	r3, [sp, #0]
   1f646:	443b      	add	r3, r7
   1f648:	441a      	add	r2, r3
   1f64a:	4433      	add	r3, r6
   1f64c:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   1f650:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   1f654:	2208      	movs	r2, #8
   1f656:	4651      	mov	r1, sl
   1f658:	eb0a 0002 	add.w	r0, sl, r2
   1f65c:	f1aa 0a08 	sub.w	sl, sl, #8
   1f660:	f7ed fa88 	bl	cb74 <memcpy>
   1f664:	45d1      	cmp	r9, sl
   1f666:	d1f5      	bne.n	1f654 <nrf_mem_register+0x1e4>
   1f668:	9b00      	ldr	r3, [sp, #0]
   1f66a:	9903      	ldr	r1, [sp, #12]
   1f66c:	443b      	add	r3, r7
   1f66e:	4433      	add	r3, r6
   1f670:	3301      	adds	r3, #1
   1f672:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1f676:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   1f67a:	6055      	str	r5, [r2, #4]
   1f67c:	e776      	b.n	1f56c <nrf_mem_register+0xfc>
   1f67e:	f100 3aff 	add.w	sl, r0, #4294967295
   1f682:	4556      	cmp	r6, sl
   1f684:	d99b      	bls.n	1f5be <nrf_mem_register+0x14e>
   1f686:	e7d8      	b.n	1f63a <nrf_mem_register+0x1ca>
   1f688:	9d04      	ldr	r5, [sp, #16]
   1f68a:	e7d8      	b.n	1f63e <nrf_mem_register+0x1ce>
   1f68c:	9d04      	ldr	r5, [sp, #16]
   1f68e:	f10a 0601 	add.w	r6, sl, #1
   1f692:	e7d4      	b.n	1f63e <nrf_mem_register+0x1ce>
   1f694:	2002501c 	.word	0x2002501c
   1f698:	20021c0c 	.word	0x20021c0c
   1f69c:	20021c10 	.word	0x20021c10
   1f6a0:	20021c4c 	.word	0x20021c4c

0001f6a4 <nrf_malloc>:
   1f6a4:	4b03      	ldr	r3, [pc, #12]	; (1f6b4 <nrf_malloc+0x10>)
   1f6a6:	781b      	ldrb	r3, [r3, #0]
   1f6a8:	b10b      	cbz	r3, 1f6ae <nrf_malloc+0xa>
   1f6aa:	f7ff bd8d 	b.w	1f1c8 <mem_alloc.constprop.4>
   1f6ae:	4618      	mov	r0, r3
   1f6b0:	4770      	bx	lr
   1f6b2:	bf00      	nop
   1f6b4:	2002501c 	.word	0x2002501c

0001f6b8 <nrf_free>:
   1f6b8:	4b04      	ldr	r3, [pc, #16]	; (1f6cc <nrf_free+0x14>)
   1f6ba:	781b      	ldrb	r3, [r3, #0]
   1f6bc:	b123      	cbz	r3, 1f6c8 <nrf_free+0x10>
   1f6be:	b118      	cbz	r0, 1f6c8 <nrf_free+0x10>
   1f6c0:	4601      	mov	r1, r0
   1f6c2:	2000      	movs	r0, #0
   1f6c4:	f7ff bc30 	b.w	1ef28 <mem_free>
   1f6c8:	4770      	bx	lr
   1f6ca:	bf00      	nop
   1f6cc:	2002501c 	.word	0x2002501c

0001f6d0 <nrf_realloc>:
   1f6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f6d4:	4b52      	ldr	r3, [pc, #328]	; (1f820 <nrf_realloc+0x150>)
   1f6d6:	b087      	sub	sp, #28
   1f6d8:	781b      	ldrb	r3, [r3, #0]
   1f6da:	b173      	cbz	r3, 1f6fa <nrf_realloc+0x2a>
   1f6dc:	b168      	cbz	r0, 1f6fa <nrf_realloc+0x2a>
   1f6de:	e9cd 0101 	strd	r0, r1, [sp, #4]
   1f6e2:	f8df a148 	ldr.w	sl, [pc, #328]	; 1f82c <nrf_realloc+0x15c>
   1f6e6:	f8da 3000 	ldr.w	r3, [sl]
   1f6ea:	b10b      	cbz	r3, 1f6f0 <nrf_realloc+0x20>
   1f6ec:	781a      	ldrb	r2, [r3, #0]
   1f6ee:	b14a      	cbz	r2, 1f704 <nrf_realloc+0x34>
   1f6f0:	4b4c      	ldr	r3, [pc, #304]	; (1f824 <nrf_realloc+0x154>)
   1f6f2:	f10a 0a0c 	add.w	sl, sl, #12
   1f6f6:	4553      	cmp	r3, sl
   1f6f8:	d1f5      	bne.n	1f6e6 <nrf_realloc+0x16>
   1f6fa:	2400      	movs	r4, #0
   1f6fc:	4620      	mov	r0, r4
   1f6fe:	b007      	add	sp, #28
   1f700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f704:	e9da 9201 	ldrd	r9, r2, [sl, #4]
   1f708:	444a      	add	r2, r9
   1f70a:	4591      	cmp	r9, r2
   1f70c:	9200      	str	r2, [sp, #0]
   1f70e:	d2ef      	bcs.n	1f6f0 <nrf_realloc+0x20>
   1f710:	685a      	ldr	r2, [r3, #4]
   1f712:	f8cd a00c 	str.w	sl, [sp, #12]
   1f716:	46cb      	mov	fp, r9
   1f718:	4692      	mov	sl, r2
   1f71a:	f8d3 8010 	ldr.w	r8, [r3, #16]
   1f71e:	899f      	ldrh	r7, [r3, #12]
   1f720:	ebab 0e09 	sub.w	lr, fp, r9
   1f724:	b1d7      	cbz	r7, 1f75c <nrf_realloc+0x8c>
   1f726:	f8b8 c002 	ldrh.w	ip, [r8, #2]
   1f72a:	45e6      	cmp	lr, ip
   1f72c:	4662      	mov	r2, ip
   1f72e:	d31d      	bcc.n	1f76c <nrf_realloc+0x9c>
   1f730:	4654      	mov	r4, sl
   1f732:	4671      	mov	r1, lr
   1f734:	4665      	mov	r5, ip
   1f736:	2000      	movs	r0, #0
   1f738:	f108 0304 	add.w	r3, r8, #4
   1f73c:	e004      	b.n	1f748 <nrf_realloc+0x78>
   1f73e:	885a      	ldrh	r2, [r3, #2]
   1f740:	3304      	adds	r3, #4
   1f742:	428a      	cmp	r2, r1
   1f744:	4615      	mov	r5, r2
   1f746:	d814      	bhi.n	1f772 <nrf_realloc+0xa2>
   1f748:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   1f74c:	3001      	adds	r0, #1
   1f74e:	4287      	cmp	r7, r0
   1f750:	fb02 4406 	mla	r4, r2, r6, r4
   1f754:	eba1 0105 	sub.w	r1, r1, r5
   1f758:	461e      	mov	r6, r3
   1f75a:	d1f0      	bne.n	1f73e <nrf_realloc+0x6e>
   1f75c:	9b00      	ldr	r3, [sp, #0]
   1f75e:	f10b 0b01 	add.w	fp, fp, #1
   1f762:	455b      	cmp	r3, fp
   1f764:	d1dc      	bne.n	1f720 <nrf_realloc+0x50>
   1f766:	f8dd a00c 	ldr.w	sl, [sp, #12]
   1f76a:	e7c1      	b.n	1f6f0 <nrf_realloc+0x20>
   1f76c:	4654      	mov	r4, sl
   1f76e:	4671      	mov	r1, lr
   1f770:	4646      	mov	r6, r8
   1f772:	8833      	ldrh	r3, [r6, #0]
   1f774:	fb01 4103 	mla	r1, r1, r3, r4
   1f778:	9b01      	ldr	r3, [sp, #4]
   1f77a:	428b      	cmp	r3, r1
   1f77c:	d1ee      	bne.n	1f75c <nrf_realloc+0x8c>
   1f77e:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
   1f782:	f8dd a00c 	ldr.w	sl, [sp, #12]
   1f786:	d0b3      	beq.n	1f6f0 <nrf_realloc+0x20>
   1f788:	45e6      	cmp	lr, ip
   1f78a:	d334      	bcc.n	1f7f6 <nrf_realloc+0x126>
   1f78c:	2200      	movs	r2, #0
   1f78e:	f108 0304 	add.w	r3, r8, #4
   1f792:	e006      	b.n	1f7a2 <nrf_realloc+0xd2>
   1f794:	f8b3 c002 	ldrh.w	ip, [r3, #2]
   1f798:	4698      	mov	r8, r3
   1f79a:	45f4      	cmp	ip, lr
   1f79c:	f103 0304 	add.w	r3, r3, #4
   1f7a0:	d829      	bhi.n	1f7f6 <nrf_realloc+0x126>
   1f7a2:	3201      	adds	r2, #1
   1f7a4:	42ba      	cmp	r2, r7
   1f7a6:	ebae 0e0c 	sub.w	lr, lr, ip
   1f7aa:	d1f3      	bne.n	1f794 <nrf_realloc+0xc4>
   1f7ac:	2300      	movs	r3, #0
   1f7ae:	9a02      	ldr	r2, [sp, #8]
   1f7b0:	429a      	cmp	r2, r3
   1f7b2:	d923      	bls.n	1f7fc <nrf_realloc+0x12c>
   1f7b4:	4610      	mov	r0, r2
   1f7b6:	f7ff fd07 	bl	1f1c8 <mem_alloc.constprop.4>
   1f7ba:	4604      	mov	r4, r0
   1f7bc:	2800      	cmp	r0, #0
   1f7be:	d097      	beq.n	1f6f0 <nrf_realloc+0x20>
   1f7c0:	e9dd 1501 	ldrd	r1, r5, [sp, #4]
   1f7c4:	462a      	mov	r2, r5
   1f7c6:	f7ed f9d5 	bl	cb74 <memcpy>
   1f7ca:	462b      	mov	r3, r5
   1f7cc:	2201      	movs	r2, #1
   1f7ce:	3303      	adds	r3, #3
   1f7d0:	4915      	ldr	r1, [pc, #84]	; (1f828 <nrf_realloc+0x158>)
   1f7d2:	4423      	add	r3, r4
   1f7d4:	f023 0303 	bic.w	r3, r3, #3
   1f7d8:	ea4f 105b 	mov.w	r0, fp, lsr #5
   1f7dc:	681e      	ldr	r6, [r3, #0]
   1f7de:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
   1f7e2:	f00b 031f 	and.w	r3, fp, #31
   1f7e6:	fa02 f303 	lsl.w	r3, r2, r3
   1f7ea:	9605      	str	r6, [sp, #20]
   1f7ec:	432b      	orrs	r3, r5
   1f7ee:	9a05      	ldr	r2, [sp, #20]
   1f7f0:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   1f7f4:	e782      	b.n	1f6fc <nrf_realloc+0x2c>
   1f7f6:	f8b8 3000 	ldrh.w	r3, [r8]
   1f7fa:	e7d8      	b.n	1f7ae <nrf_realloc+0xde>
   1f7fc:	4615      	mov	r5, r2
   1f7fe:	b96a      	cbnz	r2, 1f81c <nrf_realloc+0x14c>
   1f800:	2301      	movs	r3, #1
   1f802:	4a09      	ldr	r2, [pc, #36]	; (1f828 <nrf_realloc+0x158>)
   1f804:	ea4f 115b 	mov.w	r1, fp, lsr #5
   1f808:	f00b 041f 	and.w	r4, fp, #31
   1f80c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1f810:	40a3      	lsls	r3, r4
   1f812:	4303      	orrs	r3, r0
   1f814:	462c      	mov	r4, r5
   1f816:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   1f81a:	e76f      	b.n	1f6fc <nrf_realloc+0x2c>
   1f81c:	9c01      	ldr	r4, [sp, #4]
   1f81e:	e76d      	b.n	1f6fc <nrf_realloc+0x2c>
   1f820:	2002501c 	.word	0x2002501c
   1f824:	20021c4c 	.word	0x20021c4c
   1f828:	20021bcc 	.word	0x20021bcc
   1f82c:	20021c10 	.word	0x20021c10

0001f830 <nrf_shared_malloc>:
   1f830:	4b03      	ldr	r3, [pc, #12]	; (1f840 <nrf_shared_malloc+0x10>)
   1f832:	781b      	ldrb	r3, [r3, #0]
   1f834:	b10b      	cbz	r3, 1f83a <nrf_shared_malloc+0xa>
   1f836:	f7ff bbe3 	b.w	1f000 <mem_alloc.constprop.5>
   1f83a:	4618      	mov	r0, r3
   1f83c:	4770      	bx	lr
   1f83e:	bf00      	nop
   1f840:	2002501c 	.word	0x2002501c

0001f844 <nrf_shared_free>:
   1f844:	4b04      	ldr	r3, [pc, #16]	; (1f858 <nrf_shared_free+0x14>)
   1f846:	781b      	ldrb	r3, [r3, #0]
   1f848:	b123      	cbz	r3, 1f854 <nrf_shared_free+0x10>
   1f84a:	b118      	cbz	r0, 1f854 <nrf_shared_free+0x10>
   1f84c:	4601      	mov	r1, r0
   1f84e:	2001      	movs	r0, #1
   1f850:	f7ff bb6a 	b.w	1ef28 <mem_free>
   1f854:	4770      	bx	lr
   1f856:	bf00      	nop
   1f858:	2002501c 	.word	0x2002501c

0001f85c <rpc_dfu_event_handler>:
   1f85c:	b508      	push	{r3, lr}
   1f85e:	4a08      	ldr	r2, [pc, #32]	; (1f880 <rpc_dfu_event_handler+0x24>)
   1f860:	68c1      	ldr	r1, [r0, #12]
   1f862:	8812      	ldrh	r2, [r2, #0]
   1f864:	4603      	mov	r3, r0
   1f866:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   1f86a:	d005      	beq.n	1f878 <rpc_dfu_event_handler+0x1c>
   1f86c:	6800      	ldr	r0, [r0, #0]
   1f86e:	b110      	cbz	r0, 1f876 <rpc_dfu_event_handler+0x1a>
   1f870:	f7fd f94c 	bl	1cb0c <rpc_dfu_client_data_free>
   1f874:	2000      	movs	r0, #0
   1f876:	bd08      	pop	{r3, pc}
   1f878:	4a02      	ldr	r2, [pc, #8]	; (1f884 <rpc_dfu_event_handler+0x28>)
   1f87a:	2001      	movs	r0, #1
   1f87c:	6013      	str	r3, [r2, #0]
   1f87e:	bd08      	pop	{r3, pc}
   1f880:	20023048 	.word	0x20023048
   1f884:	20021d68 	.word	0x20021d68

0001f888 <mfu_interface_init>:
   1f888:	2300      	movs	r3, #0
   1f88a:	b510      	push	{r4, lr}
   1f88c:	4808      	ldr	r0, [pc, #32]	; (1f8b0 <mfu_interface_init+0x28>)
   1f88e:	4909      	ldr	r1, [pc, #36]	; (1f8b4 <mfu_interface_init+0x2c>)
   1f890:	4a09      	ldr	r2, [pc, #36]	; (1f8b8 <mfu_interface_init+0x30>)
   1f892:	4c0a      	ldr	r4, [pc, #40]	; (1f8bc <mfu_interface_init+0x34>)
   1f894:	8003      	strh	r3, [r0, #0]
   1f896:	600b      	str	r3, [r1, #0]
   1f898:	6013      	str	r3, [r2, #0]
   1f89a:	6023      	str	r3, [r4, #0]
   1f89c:	f7fd f900 	bl	1caa0 <rpc_dfu_client_init>
   1f8a0:	b910      	cbnz	r0, 1f8a8 <mfu_interface_init+0x20>
   1f8a2:	2301      	movs	r3, #1
   1f8a4:	6023      	str	r3, [r4, #0]
   1f8a6:	bd10      	pop	{r4, pc}
   1f8a8:	f04f 30ff 	mov.w	r0, #4294967295
   1f8ac:	bd10      	pop	{r4, pc}
   1f8ae:	bf00      	nop
   1f8b0:	20023048 	.word	0x20023048
   1f8b4:	20021d68 	.word	0x20021d68
   1f8b8:	20021d64 	.word	0x20021d64
   1f8bc:	20021d5c 	.word	0x20021d5c

0001f8c0 <mfu_interface_open>:
   1f8c0:	b508      	push	{r3, lr}
   1f8c2:	4b07      	ldr	r3, [pc, #28]	; (1f8e0 <mfu_interface_open+0x20>)
   1f8c4:	681a      	ldr	r2, [r3, #0]
   1f8c6:	2a01      	cmp	r2, #1
   1f8c8:	d103      	bne.n	1f8d2 <mfu_interface_open+0x12>
   1f8ca:	2202      	movs	r2, #2
   1f8cc:	601a      	str	r2, [r3, #0]
   1f8ce:	4805      	ldr	r0, [pc, #20]	; (1f8e4 <mfu_interface_open+0x24>)
   1f8d0:	bd08      	pop	{r3, pc}
   1f8d2:	2001      	movs	r0, #1
   1f8d4:	f7f5 ff24 	bl	15720 <bsd_os_errno_set>
   1f8d8:	f04f 30ff 	mov.w	r0, #4294967295
   1f8dc:	bd08      	pop	{r3, pc}
   1f8de:	bf00      	nop
   1f8e0:	20021d5c 	.word	0x20021d5c
   1f8e4:	49765432 	.word	0x49765432

0001f8e8 <mfu_interface_close>:
   1f8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f8ea:	4c32      	ldr	r4, [pc, #200]	; (1f9b4 <mfu_interface_close+0xcc>)
   1f8ec:	b083      	sub	sp, #12
   1f8ee:	6823      	ldr	r3, [r4, #0]
   1f8f0:	1e9a      	subs	r2, r3, #2
   1f8f2:	2a01      	cmp	r2, #1
   1f8f4:	d857      	bhi.n	1f9a6 <mfu_interface_close+0xbe>
   1f8f6:	2b03      	cmp	r3, #3
   1f8f8:	d004      	beq.n	1f904 <mfu_interface_close+0x1c>
   1f8fa:	2301      	movs	r3, #1
   1f8fc:	2000      	movs	r0, #0
   1f8fe:	6023      	str	r3, [r4, #0]
   1f900:	b003      	add	sp, #12
   1f902:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f904:	2100      	movs	r1, #0
   1f906:	4668      	mov	r0, sp
   1f908:	f7fd f8d0 	bl	1caac <rpc_dfu_client_request_alloc>
   1f90c:	4603      	mov	r3, r0
   1f90e:	2800      	cmp	r0, #0
   1f910:	d13d      	bne.n	1f98e <mfu_interface_close+0xa6>
   1f912:	2104      	movs	r1, #4
   1f914:	4e28      	ldr	r6, [pc, #160]	; (1f9b8 <mfu_interface_close+0xd0>)
   1f916:	9800      	ldr	r0, [sp, #0]
   1f918:	8832      	ldrh	r2, [r6, #0]
   1f91a:	7201      	strb	r1, [r0, #8]
   1f91c:	3201      	adds	r2, #1
   1f91e:	b292      	uxth	r2, r2
   1f920:	0411      	lsls	r1, r2, #16
   1f922:	f041 0106 	orr.w	r1, r1, #6
   1f926:	4d25      	ldr	r5, [pc, #148]	; (1f9bc <mfu_interface_close+0xd4>)
   1f928:	60c1      	str	r1, [r0, #12]
   1f92a:	7103      	strb	r3, [r0, #4]
   1f92c:	7143      	strb	r3, [r0, #5]
   1f92e:	7183      	strb	r3, [r0, #6]
   1f930:	71c3      	strb	r3, [r0, #7]
   1f932:	7243      	strb	r3, [r0, #9]
   1f934:	7283      	strb	r3, [r0, #10]
   1f936:	72c3      	strb	r3, [r0, #11]
   1f938:	2106      	movs	r1, #6
   1f93a:	8032      	strh	r2, [r6, #0]
   1f93c:	602b      	str	r3, [r5, #0]
   1f93e:	f7fd f8c9 	bl	1cad4 <rpc_dfu_client_request_send>
   1f942:	b9d8      	cbnz	r0, 1f97c <mfu_interface_close+0x94>
   1f944:	f04f 33ff 	mov.w	r3, #4294967295
   1f948:	ae02      	add	r6, sp, #8
   1f94a:	4627      	mov	r7, r4
   1f94c:	f846 3d04 	str.w	r3, [r6, #-4]!
   1f950:	e004      	b.n	1f95c <mfu_interface_close+0x74>
   1f952:	4631      	mov	r1, r6
   1f954:	4638      	mov	r0, r7
   1f956:	f7f5 fe2b 	bl	155b0 <bsd_os_timedwait>
   1f95a:	b9f0      	cbnz	r0, 1f99a <mfu_interface_close+0xb2>
   1f95c:	6828      	ldr	r0, [r5, #0]
   1f95e:	2800      	cmp	r0, #0
   1f960:	d0f7      	beq.n	1f952 <mfu_interface_close+0x6a>
   1f962:	6905      	ldr	r5, [r0, #16]
   1f964:	f7fd f8ca 	bl	1cafc <rpc_dfu_client_message_free>
   1f968:	2d00      	cmp	r5, #0
   1f96a:	d0c6      	beq.n	1f8fa <mfu_interface_close+0x12>
   1f96c:	4b14      	ldr	r3, [pc, #80]	; (1f9c0 <mfu_interface_close+0xd8>)
   1f96e:	2008      	movs	r0, #8
   1f970:	601d      	str	r5, [r3, #0]
   1f972:	f7f5 fed5 	bl	15720 <bsd_os_errno_set>
   1f976:	f04f 30ff 	mov.w	r0, #4294967295
   1f97a:	e7c1      	b.n	1f900 <mfu_interface_close+0x18>
   1f97c:	9800      	ldr	r0, [sp, #0]
   1f97e:	6803      	ldr	r3, [r0, #0]
   1f980:	b11b      	cbz	r3, 1f98a <mfu_interface_close+0xa2>
   1f982:	4618      	mov	r0, r3
   1f984:	f7fd f8c2 	bl	1cb0c <rpc_dfu_client_data_free>
   1f988:	9800      	ldr	r0, [sp, #0]
   1f98a:	f7fd f8b7 	bl	1cafc <rpc_dfu_client_message_free>
   1f98e:	200c      	movs	r0, #12
   1f990:	f7f5 fec6 	bl	15720 <bsd_os_errno_set>
   1f994:	f04f 30ff 	mov.w	r0, #4294967295
   1f998:	e7b2      	b.n	1f900 <mfu_interface_close+0x18>
   1f99a:	203c      	movs	r0, #60	; 0x3c
   1f99c:	f7f5 fec0 	bl	15720 <bsd_os_errno_set>
   1f9a0:	f04f 30ff 	mov.w	r0, #4294967295
   1f9a4:	e7ac      	b.n	1f900 <mfu_interface_close+0x18>
   1f9a6:	2001      	movs	r0, #1
   1f9a8:	f7f5 feba 	bl	15720 <bsd_os_errno_set>
   1f9ac:	f04f 30ff 	mov.w	r0, #4294967295
   1f9b0:	e7a6      	b.n	1f900 <mfu_interface_close+0x18>
   1f9b2:	bf00      	nop
   1f9b4:	20021d5c 	.word	0x20021d5c
   1f9b8:	20023048 	.word	0x20023048
   1f9bc:	20021d68 	.word	0x20021d68
   1f9c0:	20021d60 	.word	0x20021d60

0001f9c4 <mfu_interface_sendto>:
   1f9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f9c8:	4e64      	ldr	r6, [pc, #400]	; (1fb5c <mfu_interface_sendto+0x198>)
   1f9ca:	460f      	mov	r7, r1
   1f9cc:	6831      	ldr	r1, [r6, #0]
   1f9ce:	4615      	mov	r5, r2
   1f9d0:	1e8a      	subs	r2, r1, #2
   1f9d2:	2a01      	cmp	r2, #1
   1f9d4:	b082      	sub	sp, #8
   1f9d6:	f200 80b4 	bhi.w	1fb42 <mfu_interface_sendto+0x17e>
   1f9da:	2f00      	cmp	r7, #0
   1f9dc:	f000 80a5 	beq.w	1fb2a <mfu_interface_sendto+0x166>
   1f9e0:	2d00      	cmp	r5, #0
   1f9e2:	f000 80a2 	beq.w	1fb2a <mfu_interface_sendto+0x166>
   1f9e6:	2b00      	cmp	r3, #0
   1f9e8:	f040 80b1 	bne.w	1fb4e <mfu_interface_sendto+0x18a>
   1f9ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f9ee:	2b00      	cmp	r3, #0
   1f9f0:	f040 80a1 	bne.w	1fb36 <mfu_interface_sendto+0x172>
   1f9f4:	2902      	cmp	r1, #2
   1f9f6:	d04f      	beq.n	1fa98 <mfu_interface_sendto+0xd4>
   1f9f8:	46e8      	mov	r8, sp
   1f9fa:	4640      	mov	r0, r8
   1f9fc:	4629      	mov	r1, r5
   1f9fe:	f7fd f855 	bl	1caac <rpc_dfu_client_request_alloc>
   1fa02:	4606      	mov	r6, r0
   1fa04:	b140      	cbz	r0, 1fa18 <mfu_interface_sendto+0x54>
   1fa06:	200c      	movs	r0, #12
   1fa08:	f7f5 fe8a 	bl	15720 <bsd_os_errno_set>
   1fa0c:	f04f 35ff 	mov.w	r5, #4294967295
   1fa10:	4628      	mov	r0, r5
   1fa12:	b002      	add	sp, #8
   1fa14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fa18:	9b00      	ldr	r3, [sp, #0]
   1fa1a:	4639      	mov	r1, r7
   1fa1c:	6818      	ldr	r0, [r3, #0]
   1fa1e:	462a      	mov	r2, r5
   1fa20:	f7ed f8a8 	bl	cb74 <memcpy>
   1fa24:	2104      	movs	r1, #4
   1fa26:	4c4e      	ldr	r4, [pc, #312]	; (1fb60 <mfu_interface_sendto+0x19c>)
   1fa28:	9800      	ldr	r0, [sp, #0]
   1fa2a:	8823      	ldrh	r3, [r4, #0]
   1fa2c:	6045      	str	r5, [r0, #4]
   1fa2e:	3301      	adds	r3, #1
   1fa30:	b29b      	uxth	r3, r3
   1fa32:	041a      	lsls	r2, r3, #16
   1fa34:	8023      	strh	r3, [r4, #0]
   1fa36:	430a      	orrs	r2, r1
   1fa38:	4c4a      	ldr	r4, [pc, #296]	; (1fb64 <mfu_interface_sendto+0x1a0>)
   1fa3a:	60c2      	str	r2, [r0, #12]
   1fa3c:	7246      	strb	r6, [r0, #9]
   1fa3e:	7286      	strb	r6, [r0, #10]
   1fa40:	72c6      	strb	r6, [r0, #11]
   1fa42:	7201      	strb	r1, [r0, #8]
   1fa44:	6026      	str	r6, [r4, #0]
   1fa46:	f7fd f845 	bl	1cad4 <rpc_dfu_client_request_send>
   1fa4a:	2800      	cmp	r0, #0
   1fa4c:	d163      	bne.n	1fb16 <mfu_interface_sendto+0x152>
   1fa4e:	f04f 33ff 	mov.w	r3, #4294967295
   1fa52:	ae02      	add	r6, sp, #8
   1fa54:	4f41      	ldr	r7, [pc, #260]	; (1fb5c <mfu_interface_sendto+0x198>)
   1fa56:	f846 3d04 	str.w	r3, [r6, #-4]!
   1fa5a:	e004      	b.n	1fa66 <mfu_interface_sendto+0xa2>
   1fa5c:	4631      	mov	r1, r6
   1fa5e:	4638      	mov	r0, r7
   1fa60:	f7f5 fda6 	bl	155b0 <bsd_os_timedwait>
   1fa64:	b978      	cbnz	r0, 1fa86 <mfu_interface_sendto+0xc2>
   1fa66:	6820      	ldr	r0, [r4, #0]
   1fa68:	2800      	cmp	r0, #0
   1fa6a:	d0f7      	beq.n	1fa5c <mfu_interface_sendto+0x98>
   1fa6c:	6904      	ldr	r4, [r0, #16]
   1fa6e:	f7fd f845 	bl	1cafc <rpc_dfu_client_message_free>
   1fa72:	2c00      	cmp	r4, #0
   1fa74:	d0cc      	beq.n	1fa10 <mfu_interface_sendto+0x4c>
   1fa76:	4b3c      	ldr	r3, [pc, #240]	; (1fb68 <mfu_interface_sendto+0x1a4>)
   1fa78:	2008      	movs	r0, #8
   1fa7a:	601c      	str	r4, [r3, #0]
   1fa7c:	f04f 35ff 	mov.w	r5, #4294967295
   1fa80:	f7f5 fe4e 	bl	15720 <bsd_os_errno_set>
   1fa84:	e7c4      	b.n	1fa10 <mfu_interface_sendto+0x4c>
   1fa86:	f04f 35ff 	mov.w	r5, #4294967295
   1fa8a:	203c      	movs	r0, #60	; 0x3c
   1fa8c:	f7f5 fe48 	bl	15720 <bsd_os_errno_set>
   1fa90:	4628      	mov	r0, r5
   1fa92:	b002      	add	sp, #8
   1fa94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fa98:	46e8      	mov	r8, sp
   1fa9a:	4619      	mov	r1, r3
   1fa9c:	4640      	mov	r0, r8
   1fa9e:	f7fd f805 	bl	1caac <rpc_dfu_client_request_alloc>
   1faa2:	4602      	mov	r2, r0
   1faa4:	2800      	cmp	r0, #0
   1faa6:	d1ae      	bne.n	1fa06 <mfu_interface_sendto+0x42>
   1faa8:	f04f 0c08 	mov.w	ip, #8
   1faac:	492c      	ldr	r1, [pc, #176]	; (1fb60 <mfu_interface_sendto+0x19c>)
   1faae:	482f      	ldr	r0, [pc, #188]	; (1fb6c <mfu_interface_sendto+0x1a8>)
   1fab0:	880b      	ldrh	r3, [r1, #0]
   1fab2:	6804      	ldr	r4, [r0, #0]
   1fab4:	3301      	adds	r3, #1
   1fab6:	9800      	ldr	r0, [sp, #0]
   1fab8:	b29b      	uxth	r3, r3
   1faba:	800b      	strh	r3, [r1, #0]
   1fabc:	041b      	lsls	r3, r3, #16
   1fabe:	f043 0303 	orr.w	r3, r3, #3
   1fac2:	6104      	str	r4, [r0, #16]
   1fac4:	4c27      	ldr	r4, [pc, #156]	; (1fb64 <mfu_interface_sendto+0x1a0>)
   1fac6:	60c3      	str	r3, [r0, #12]
   1fac8:	7102      	strb	r2, [r0, #4]
   1faca:	7142      	strb	r2, [r0, #5]
   1facc:	7182      	strb	r2, [r0, #6]
   1face:	71c2      	strb	r2, [r0, #7]
   1fad0:	7242      	strb	r2, [r0, #9]
   1fad2:	7282      	strb	r2, [r0, #10]
   1fad4:	72c2      	strb	r2, [r0, #11]
   1fad6:	f880 c008 	strb.w	ip, [r0, #8]
   1fada:	2103      	movs	r1, #3
   1fadc:	6022      	str	r2, [r4, #0]
   1fade:	f7fc fff9 	bl	1cad4 <rpc_dfu_client_request_send>
   1fae2:	b9c0      	cbnz	r0, 1fb16 <mfu_interface_sendto+0x152>
   1fae4:	f04f 33ff 	mov.w	r3, #4294967295
   1fae8:	f10d 0908 	add.w	r9, sp, #8
   1faec:	f849 3d04 	str.w	r3, [r9, #-4]!
   1faf0:	46b2      	mov	sl, r6
   1faf2:	e005      	b.n	1fb00 <mfu_interface_sendto+0x13c>
   1faf4:	4649      	mov	r1, r9
   1faf6:	4650      	mov	r0, sl
   1faf8:	f7f5 fd5a 	bl	155b0 <bsd_os_timedwait>
   1fafc:	2800      	cmp	r0, #0
   1fafe:	d1c2      	bne.n	1fa86 <mfu_interface_sendto+0xc2>
   1fb00:	6820      	ldr	r0, [r4, #0]
   1fb02:	2800      	cmp	r0, #0
   1fb04:	d0f6      	beq.n	1faf4 <mfu_interface_sendto+0x130>
   1fb06:	6904      	ldr	r4, [r0, #16]
   1fb08:	f7fc fff8 	bl	1cafc <rpc_dfu_client_message_free>
   1fb0c:	2c00      	cmp	r4, #0
   1fb0e:	d1b2      	bne.n	1fa76 <mfu_interface_sendto+0xb2>
   1fb10:	2303      	movs	r3, #3
   1fb12:	6033      	str	r3, [r6, #0]
   1fb14:	e771      	b.n	1f9fa <mfu_interface_sendto+0x36>
   1fb16:	9800      	ldr	r0, [sp, #0]
   1fb18:	6803      	ldr	r3, [r0, #0]
   1fb1a:	b11b      	cbz	r3, 1fb24 <mfu_interface_sendto+0x160>
   1fb1c:	4618      	mov	r0, r3
   1fb1e:	f7fc fff5 	bl	1cb0c <rpc_dfu_client_data_free>
   1fb22:	9800      	ldr	r0, [sp, #0]
   1fb24:	f7fc ffea 	bl	1cafc <rpc_dfu_client_message_free>
   1fb28:	e76d      	b.n	1fa06 <mfu_interface_sendto+0x42>
   1fb2a:	2016      	movs	r0, #22
   1fb2c:	f7f5 fdf8 	bl	15720 <bsd_os_errno_set>
   1fb30:	f04f 35ff 	mov.w	r5, #4294967295
   1fb34:	e76c      	b.n	1fa10 <mfu_interface_sendto+0x4c>
   1fb36:	2038      	movs	r0, #56	; 0x38
   1fb38:	f7f5 fdf2 	bl	15720 <bsd_os_errno_set>
   1fb3c:	f04f 35ff 	mov.w	r5, #4294967295
   1fb40:	e766      	b.n	1fa10 <mfu_interface_sendto+0x4c>
   1fb42:	2001      	movs	r0, #1
   1fb44:	f7f5 fdec 	bl	15720 <bsd_os_errno_set>
   1fb48:	f04f 35ff 	mov.w	r5, #4294967295
   1fb4c:	e760      	b.n	1fa10 <mfu_interface_sendto+0x4c>
   1fb4e:	202d      	movs	r0, #45	; 0x2d
   1fb50:	f7f5 fde6 	bl	15720 <bsd_os_errno_set>
   1fb54:	f04f 35ff 	mov.w	r5, #4294967295
   1fb58:	e75a      	b.n	1fa10 <mfu_interface_sendto+0x4c>
   1fb5a:	bf00      	nop
   1fb5c:	20021d5c 	.word	0x20021d5c
   1fb60:	20023048 	.word	0x20023048
   1fb64:	20021d68 	.word	0x20021d68
   1fb68:	20021d60 	.word	0x20021d60
   1fb6c:	20021d64 	.word	0x20021d64

0001fb70 <mfu_interface_setopt>:
   1fb70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fb72:	4846      	ldr	r0, [pc, #280]	; (1fc8c <mfu_interface_setopt+0x11c>)
   1fb74:	b083      	sub	sp, #12
   1fb76:	6800      	ldr	r0, [r0, #0]
   1fb78:	3802      	subs	r0, #2
   1fb7a:	2801      	cmp	r0, #1
   1fb7c:	d877      	bhi.n	1fc6e <mfu_interface_setopt+0xfe>
   1fb7e:	f240 2003 	movw	r0, #515	; 0x203
   1fb82:	4281      	cmp	r1, r0
   1fb84:	d16d      	bne.n	1fc62 <mfu_interface_setopt+0xf2>
   1fb86:	3a04      	subs	r2, #4
   1fb88:	2a03      	cmp	r2, #3
   1fb8a:	d85c      	bhi.n	1fc46 <mfu_interface_setopt+0xd6>
   1fb8c:	e8df f002 	tbb	[pc, r2]
   1fb90:	514e024b 	.word	0x514e024b
   1fb94:	2407      	movs	r4, #7
   1fb96:	4625      	mov	r5, r4
   1fb98:	2100      	movs	r1, #0
   1fb9a:	4668      	mov	r0, sp
   1fb9c:	f7fc ff86 	bl	1caac <rpc_dfu_client_request_alloc>
   1fba0:	4603      	mov	r3, r0
   1fba2:	2800      	cmp	r0, #0
   1fba4:	d138      	bne.n	1fc18 <mfu_interface_setopt+0xa8>
   1fba6:	2704      	movs	r7, #4
   1fba8:	4e39      	ldr	r6, [pc, #228]	; (1fc90 <mfu_interface_setopt+0x120>)
   1fbaa:	9800      	ldr	r0, [sp, #0]
   1fbac:	8832      	ldrh	r2, [r6, #0]
   1fbae:	4629      	mov	r1, r5
   1fbb0:	3201      	adds	r2, #1
   1fbb2:	b292      	uxth	r2, r2
   1fbb4:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   1fbb8:	4c36      	ldr	r4, [pc, #216]	; (1fc94 <mfu_interface_setopt+0x124>)
   1fbba:	60c5      	str	r5, [r0, #12]
   1fbbc:	7103      	strb	r3, [r0, #4]
   1fbbe:	7143      	strb	r3, [r0, #5]
   1fbc0:	7183      	strb	r3, [r0, #6]
   1fbc2:	71c3      	strb	r3, [r0, #7]
   1fbc4:	7243      	strb	r3, [r0, #9]
   1fbc6:	7283      	strb	r3, [r0, #10]
   1fbc8:	72c3      	strb	r3, [r0, #11]
   1fbca:	7207      	strb	r7, [r0, #8]
   1fbcc:	8032      	strh	r2, [r6, #0]
   1fbce:	6023      	str	r3, [r4, #0]
   1fbd0:	f7fc ff80 	bl	1cad4 <rpc_dfu_client_request_send>
   1fbd4:	b9b8      	cbnz	r0, 1fc06 <mfu_interface_setopt+0x96>
   1fbd6:	f04f 33ff 	mov.w	r3, #4294967295
   1fbda:	ad02      	add	r5, sp, #8
   1fbdc:	4e2b      	ldr	r6, [pc, #172]	; (1fc8c <mfu_interface_setopt+0x11c>)
   1fbde:	f845 3d04 	str.w	r3, [r5, #-4]!
   1fbe2:	e005      	b.n	1fbf0 <mfu_interface_setopt+0x80>
   1fbe4:	4629      	mov	r1, r5
   1fbe6:	4630      	mov	r0, r6
   1fbe8:	f7f5 fce2 	bl	155b0 <bsd_os_timedwait>
   1fbec:	2800      	cmp	r0, #0
   1fbee:	d131      	bne.n	1fc54 <mfu_interface_setopt+0xe4>
   1fbf0:	6820      	ldr	r0, [r4, #0]
   1fbf2:	2800      	cmp	r0, #0
   1fbf4:	d0f6      	beq.n	1fbe4 <mfu_interface_setopt+0x74>
   1fbf6:	6904      	ldr	r4, [r0, #16]
   1fbf8:	f7fc ff80 	bl	1cafc <rpc_dfu_client_message_free>
   1fbfc:	2c00      	cmp	r4, #0
   1fbfe:	d13c      	bne.n	1fc7a <mfu_interface_setopt+0x10a>
   1fc00:	4620      	mov	r0, r4
   1fc02:	b003      	add	sp, #12
   1fc04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fc06:	9800      	ldr	r0, [sp, #0]
   1fc08:	6803      	ldr	r3, [r0, #0]
   1fc0a:	b11b      	cbz	r3, 1fc14 <mfu_interface_setopt+0xa4>
   1fc0c:	4618      	mov	r0, r3
   1fc0e:	f7fc ff7d 	bl	1cb0c <rpc_dfu_client_data_free>
   1fc12:	9800      	ldr	r0, [sp, #0]
   1fc14:	f7fc ff72 	bl	1cafc <rpc_dfu_client_message_free>
   1fc18:	200c      	movs	r0, #12
   1fc1a:	f7f5 fd81 	bl	15720 <bsd_os_errno_set>
   1fc1e:	f04f 30ff 	mov.w	r0, #4294967295
   1fc22:	b003      	add	sp, #12
   1fc24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fc26:	2405      	movs	r4, #5
   1fc28:	4625      	mov	r5, r4
   1fc2a:	e7b5      	b.n	1fb98 <mfu_interface_setopt+0x28>
   1fc2c:	2408      	movs	r4, #8
   1fc2e:	4625      	mov	r5, r4
   1fc30:	e7b2      	b.n	1fb98 <mfu_interface_setopt+0x28>
   1fc32:	b1b3      	cbz	r3, 1fc62 <mfu_interface_setopt+0xf2>
   1fc34:	9a08      	ldr	r2, [sp, #32]
   1fc36:	2a04      	cmp	r2, #4
   1fc38:	d113      	bne.n	1fc62 <mfu_interface_setopt+0xf2>
   1fc3a:	2000      	movs	r0, #0
   1fc3c:	681a      	ldr	r2, [r3, #0]
   1fc3e:	4b16      	ldr	r3, [pc, #88]	; (1fc98 <mfu_interface_setopt+0x128>)
   1fc40:	601a      	str	r2, [r3, #0]
   1fc42:	b003      	add	sp, #12
   1fc44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fc46:	202a      	movs	r0, #42	; 0x2a
   1fc48:	f7f5 fd6a 	bl	15720 <bsd_os_errno_set>
   1fc4c:	f04f 30ff 	mov.w	r0, #4294967295
   1fc50:	b003      	add	sp, #12
   1fc52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fc54:	203c      	movs	r0, #60	; 0x3c
   1fc56:	f7f5 fd63 	bl	15720 <bsd_os_errno_set>
   1fc5a:	f04f 30ff 	mov.w	r0, #4294967295
   1fc5e:	b003      	add	sp, #12
   1fc60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fc62:	2016      	movs	r0, #22
   1fc64:	f7f5 fd5c 	bl	15720 <bsd_os_errno_set>
   1fc68:	f04f 30ff 	mov.w	r0, #4294967295
   1fc6c:	e7c9      	b.n	1fc02 <mfu_interface_setopt+0x92>
   1fc6e:	2001      	movs	r0, #1
   1fc70:	f7f5 fd56 	bl	15720 <bsd_os_errno_set>
   1fc74:	f04f 30ff 	mov.w	r0, #4294967295
   1fc78:	e7c3      	b.n	1fc02 <mfu_interface_setopt+0x92>
   1fc7a:	4b08      	ldr	r3, [pc, #32]	; (1fc9c <mfu_interface_setopt+0x12c>)
   1fc7c:	2008      	movs	r0, #8
   1fc7e:	601c      	str	r4, [r3, #0]
   1fc80:	f7f5 fd4e 	bl	15720 <bsd_os_errno_set>
   1fc84:	f04f 30ff 	mov.w	r0, #4294967295
   1fc88:	e7bb      	b.n	1fc02 <mfu_interface_setopt+0x92>
   1fc8a:	bf00      	nop
   1fc8c:	20021d5c 	.word	0x20021d5c
   1fc90:	20023048 	.word	0x20023048
   1fc94:	20021d68 	.word	0x20021d68
   1fc98:	20021d64 	.word	0x20021d64
   1fc9c:	20021d60 	.word	0x20021d60

0001fca0 <mfu_interface_getopt>:
   1fca0:	f240 2003 	movw	r0, #515	; 0x203
   1fca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fca8:	4281      	cmp	r1, r0
   1fcaa:	b082      	sub	sp, #8
   1fcac:	9e08      	ldr	r6, [sp, #32]
   1fcae:	f040 80ae 	bne.w	1fe0e <mfu_interface_getopt+0x16e>
   1fcb2:	461d      	mov	r5, r3
   1fcb4:	2b00      	cmp	r3, #0
   1fcb6:	f000 80aa 	beq.w	1fe0e <mfu_interface_getopt+0x16e>
   1fcba:	2e00      	cmp	r6, #0
   1fcbc:	f000 80a7 	beq.w	1fe0e <mfu_interface_getopt+0x16e>
   1fcc0:	4b5e      	ldr	r3, [pc, #376]	; (1fe3c <mfu_interface_getopt+0x19c>)
   1fcc2:	681b      	ldr	r3, [r3, #0]
   1fcc4:	3b02      	subs	r3, #2
   1fcc6:	2b01      	cmp	r3, #1
   1fcc8:	f200 80a7 	bhi.w	1fe1a <mfu_interface_getopt+0x17a>
   1fccc:	3a01      	subs	r2, #1
   1fcce:	2a13      	cmp	r2, #19
   1fcd0:	d879      	bhi.n	1fdc6 <mfu_interface_getopt+0x126>
   1fcd2:	e8df f002 	tbb	[pc, r2]
   1fcd6:	5f17      	.short	0x5f17
   1fcd8:	78787878 	.word	0x78787878
   1fcdc:	78787872 	.word	0x78787872
   1fce0:	78787878 	.word	0x78787878
   1fce4:	78787878 	.word	0x78787878
   1fce8:	0a78      	.short	0x0a78
   1fcea:	6833      	ldr	r3, [r6, #0]
   1fcec:	2b04      	cmp	r3, #4
   1fcee:	f040 808e 	bne.w	1fe0e <mfu_interface_getopt+0x16e>
   1fcf2:	2200      	movs	r2, #0
   1fcf4:	4610      	mov	r0, r2
   1fcf6:	4b52      	ldr	r3, [pc, #328]	; (1fe40 <mfu_interface_getopt+0x1a0>)
   1fcf8:	6819      	ldr	r1, [r3, #0]
   1fcfa:	601a      	str	r2, [r3, #0]
   1fcfc:	6029      	str	r1, [r5, #0]
   1fcfe:	b002      	add	sp, #8
   1fd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fd04:	6833      	ldr	r3, [r6, #0]
   1fd06:	2b24      	cmp	r3, #36	; 0x24
   1fd08:	f040 8081 	bne.w	1fe0e <mfu_interface_getopt+0x16e>
   1fd0c:	2401      	movs	r4, #1
   1fd0e:	46a0      	mov	r8, r4
   1fd10:	2100      	movs	r1, #0
   1fd12:	4668      	mov	r0, sp
   1fd14:	f7fc feca 	bl	1caac <rpc_dfu_client_request_alloc>
   1fd18:	2800      	cmp	r0, #0
   1fd1a:	d146      	bne.n	1fdaa <mfu_interface_getopt+0x10a>
   1fd1c:	4949      	ldr	r1, [pc, #292]	; (1fe44 <mfu_interface_getopt+0x1a4>)
   1fd1e:	9b00      	ldr	r3, [sp, #0]
   1fd20:	880a      	ldrh	r2, [r1, #0]
   1fd22:	f1b8 0f03 	cmp.w	r8, #3
   1fd26:	f102 0201 	add.w	r2, r2, #1
   1fd2a:	b292      	uxth	r2, r2
   1fd2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   1fd30:	7118      	strb	r0, [r3, #4]
   1fd32:	800a      	strh	r2, [r1, #0]
   1fd34:	60dc      	str	r4, [r3, #12]
   1fd36:	7158      	strb	r0, [r3, #5]
   1fd38:	7198      	strb	r0, [r3, #6]
   1fd3a:	71d8      	strb	r0, [r3, #7]
   1fd3c:	d04b      	beq.n	1fdd6 <mfu_interface_getopt+0x136>
   1fd3e:	2104      	movs	r1, #4
   1fd40:	2200      	movs	r2, #0
   1fd42:	4f41      	ldr	r7, [pc, #260]	; (1fe48 <mfu_interface_getopt+0x1a8>)
   1fd44:	6099      	str	r1, [r3, #8]
   1fd46:	4618      	mov	r0, r3
   1fd48:	4641      	mov	r1, r8
   1fd4a:	603a      	str	r2, [r7, #0]
   1fd4c:	f7fc fec2 	bl	1cad4 <rpc_dfu_client_request_send>
   1fd50:	2800      	cmp	r0, #0
   1fd52:	d14d      	bne.n	1fdf0 <mfu_interface_getopt+0x150>
   1fd54:	f04f 33ff 	mov.w	r3, #4294967295
   1fd58:	ac02      	add	r4, sp, #8
   1fd5a:	f844 3d04 	str.w	r3, [r4, #-4]!
   1fd5e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1fe3c <mfu_interface_getopt+0x19c>
   1fd62:	e005      	b.n	1fd70 <mfu_interface_getopt+0xd0>
   1fd64:	4621      	mov	r1, r4
   1fd66:	4640      	mov	r0, r8
   1fd68:	f7f5 fc22 	bl	155b0 <bsd_os_timedwait>
   1fd6c:	2800      	cmp	r0, #0
   1fd6e:	d137      	bne.n	1fde0 <mfu_interface_getopt+0x140>
   1fd70:	6839      	ldr	r1, [r7, #0]
   1fd72:	2900      	cmp	r1, #0
   1fd74:	d0f6      	beq.n	1fd64 <mfu_interface_getopt+0xc4>
   1fd76:	690c      	ldr	r4, [r1, #16]
   1fd78:	2c00      	cmp	r4, #0
   1fd7a:	d154      	bne.n	1fe26 <mfu_interface_getopt+0x186>
   1fd7c:	6832      	ldr	r2, [r6, #0]
   1fd7e:	3114      	adds	r1, #20
   1fd80:	4628      	mov	r0, r5
   1fd82:	f7ec fef7 	bl	cb74 <memcpy>
   1fd86:	6838      	ldr	r0, [r7, #0]
   1fd88:	f7fc feb8 	bl	1cafc <rpc_dfu_client_message_free>
   1fd8c:	4620      	mov	r0, r4
   1fd8e:	b002      	add	sp, #8
   1fd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fd94:	6833      	ldr	r3, [r6, #0]
   1fd96:	2b04      	cmp	r3, #4
   1fd98:	d139      	bne.n	1fe0e <mfu_interface_getopt+0x16e>
   1fd9a:	2402      	movs	r4, #2
   1fd9c:	2100      	movs	r1, #0
   1fd9e:	4668      	mov	r0, sp
   1fda0:	46a0      	mov	r8, r4
   1fda2:	f7fc fe83 	bl	1caac <rpc_dfu_client_request_alloc>
   1fda6:	2800      	cmp	r0, #0
   1fda8:	d0b8      	beq.n	1fd1c <mfu_interface_getopt+0x7c>
   1fdaa:	200c      	movs	r0, #12
   1fdac:	f7f5 fcb8 	bl	15720 <bsd_os_errno_set>
   1fdb0:	f04f 30ff 	mov.w	r0, #4294967295
   1fdb4:	b002      	add	sp, #8
   1fdb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fdba:	6833      	ldr	r3, [r6, #0]
   1fdbc:	2b04      	cmp	r3, #4
   1fdbe:	d126      	bne.n	1fe0e <mfu_interface_getopt+0x16e>
   1fdc0:	2409      	movs	r4, #9
   1fdc2:	46a0      	mov	r8, r4
   1fdc4:	e7a4      	b.n	1fd10 <mfu_interface_getopt+0x70>
   1fdc6:	202a      	movs	r0, #42	; 0x2a
   1fdc8:	f7f5 fcaa 	bl	15720 <bsd_os_errno_set>
   1fdcc:	f04f 30ff 	mov.w	r0, #4294967295
   1fdd0:	b002      	add	sp, #8
   1fdd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fdd6:	4a1d      	ldr	r2, [pc, #116]	; (1fe4c <mfu_interface_getopt+0x1ac>)
   1fdd8:	2108      	movs	r1, #8
   1fdda:	6812      	ldr	r2, [r2, #0]
   1fddc:	611a      	str	r2, [r3, #16]
   1fdde:	e7af      	b.n	1fd40 <mfu_interface_getopt+0xa0>
   1fde0:	203c      	movs	r0, #60	; 0x3c
   1fde2:	f7f5 fc9d 	bl	15720 <bsd_os_errno_set>
   1fde6:	f04f 30ff 	mov.w	r0, #4294967295
   1fdea:	b002      	add	sp, #8
   1fdec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fdf0:	9800      	ldr	r0, [sp, #0]
   1fdf2:	6803      	ldr	r3, [r0, #0]
   1fdf4:	b11b      	cbz	r3, 1fdfe <mfu_interface_getopt+0x15e>
   1fdf6:	4618      	mov	r0, r3
   1fdf8:	f7fc fe88 	bl	1cb0c <rpc_dfu_client_data_free>
   1fdfc:	9800      	ldr	r0, [sp, #0]
   1fdfe:	f7fc fe7d 	bl	1cafc <rpc_dfu_client_message_free>
   1fe02:	200c      	movs	r0, #12
   1fe04:	f7f5 fc8c 	bl	15720 <bsd_os_errno_set>
   1fe08:	f04f 30ff 	mov.w	r0, #4294967295
   1fe0c:	e7d2      	b.n	1fdb4 <mfu_interface_getopt+0x114>
   1fe0e:	2016      	movs	r0, #22
   1fe10:	f7f5 fc86 	bl	15720 <bsd_os_errno_set>
   1fe14:	f04f 30ff 	mov.w	r0, #4294967295
   1fe18:	e771      	b.n	1fcfe <mfu_interface_getopt+0x5e>
   1fe1a:	2001      	movs	r0, #1
   1fe1c:	f7f5 fc80 	bl	15720 <bsd_os_errno_set>
   1fe20:	f04f 30ff 	mov.w	r0, #4294967295
   1fe24:	e76b      	b.n	1fcfe <mfu_interface_getopt+0x5e>
   1fe26:	4b06      	ldr	r3, [pc, #24]	; (1fe40 <mfu_interface_getopt+0x1a0>)
   1fe28:	2008      	movs	r0, #8
   1fe2a:	601c      	str	r4, [r3, #0]
   1fe2c:	f7f5 fc78 	bl	15720 <bsd_os_errno_set>
   1fe30:	6838      	ldr	r0, [r7, #0]
   1fe32:	f7fc fe63 	bl	1cafc <rpc_dfu_client_message_free>
   1fe36:	f04f 30ff 	mov.w	r0, #4294967295
   1fe3a:	e760      	b.n	1fcfe <mfu_interface_getopt+0x5e>
   1fe3c:	20021d5c 	.word	0x20021d5c
   1fe40:	20021d60 	.word	0x20021d60
   1fe44:	20023048 	.word	0x20023048
   1fe48:	20021d68 	.word	0x20021d68
   1fe4c:	20021d64 	.word	0x20021d64

0001fe50 <interface_init>:
   1fe50:	b508      	push	{r3, lr}
   1fe52:	f44f 72b4 	mov.w	r2, #360	; 0x168
   1fe56:	2100      	movs	r1, #0
   1fe58:	4802      	ldr	r0, [pc, #8]	; (1fe64 <interface_init+0x14>)
   1fe5a:	f002 f9f7 	bl	2224c <memset>
   1fe5e:	2000      	movs	r0, #0
   1fe60:	bd08      	pop	{r3, pc}
   1fe62:	bf00      	nop
   1fe64:	20025020 	.word	0x20025020

0001fe68 <interface_socket_allocate>:
   1fe68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fe6a:	4b30      	ldr	r3, [pc, #192]	; (1ff2c <interface_socket_allocate+0xc4>)
   1fe6c:	4606      	mov	r6, r0
   1fe6e:	681d      	ldr	r5, [r3, #0]
   1fe70:	4608      	mov	r0, r1
   1fe72:	b31d      	cbz	r5, 1febc <interface_socket_allocate+0x54>
   1fe74:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   1fe76:	2c00      	cmp	r4, #0
   1fe78:	d04a      	beq.n	1ff10 <interface_socket_allocate+0xa8>
   1fe7a:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   1fe7c:	2c00      	cmp	r4, #0
   1fe7e:	d049      	beq.n	1ff14 <interface_socket_allocate+0xac>
   1fe80:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   1fe82:	2c00      	cmp	r4, #0
   1fe84:	d048      	beq.n	1ff18 <interface_socket_allocate+0xb0>
   1fe86:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   1fe8a:	2900      	cmp	r1, #0
   1fe8c:	d046      	beq.n	1ff1c <interface_socket_allocate+0xb4>
   1fe8e:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   1fe92:	b191      	cbz	r1, 1feba <interface_socket_allocate+0x52>
   1fe94:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
   1fe98:	2900      	cmp	r1, #0
   1fe9a:	d043      	beq.n	1ff24 <interface_socket_allocate+0xbc>
   1fe9c:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
   1fea0:	2900      	cmp	r1, #0
   1fea2:	d041      	beq.n	1ff28 <interface_socket_allocate+0xc0>
   1fea4:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   1fea8:	2900      	cmp	r1, #0
   1feaa:	d039      	beq.n	1ff20 <interface_socket_allocate+0xb8>
   1feac:	f04f 35ff 	mov.w	r5, #4294967295
   1feb0:	2069      	movs	r0, #105	; 0x69
   1feb2:	f7f5 fc35 	bl	15720 <bsd_os_errno_set>
   1feb6:	4628      	mov	r0, r5
   1feb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1feba:	2505      	movs	r5, #5
   1febc:	f04f 0c01 	mov.w	ip, #1
   1fec0:	f04f 37ff 	mov.w	r7, #4294967295
   1fec4:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   1fec8:	00e4      	lsls	r4, r4, #3
   1feca:	f843 c004 	str.w	ip, [r3, r4]
   1fece:	441c      	add	r4, r3
   1fed0:	4611      	mov	r1, r2
   1fed2:	61a7      	str	r7, [r4, #24]
   1fed4:	4622      	mov	r2, r4
   1fed6:	f7fe feeb 	bl	1ecb0 <packet_handler_create>
   1feda:	4603      	mov	r3, r0
   1fedc:	61e0      	str	r0, [r4, #28]
   1fede:	b158      	cbz	r0, 1fef8 <interface_socket_allocate+0x90>
   1fee0:	681b      	ldr	r3, [r3, #0]
   1fee2:	681b      	ldr	r3, [r3, #0]
   1fee4:	4798      	blx	r3
   1fee6:	b910      	cbnz	r0, 1feee <interface_socket_allocate+0x86>
   1fee8:	6034      	str	r4, [r6, #0]
   1feea:	4628      	mov	r0, r5
   1feec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1feee:	69e0      	ldr	r0, [r4, #28]
   1fef0:	f7fe fefe 	bl	1ecf0 <packet_handler_delete>
   1fef4:	2300      	movs	r3, #0
   1fef6:	61e3      	str	r3, [r4, #28]
   1fef8:	f04f 35ff 	mov.w	r5, #4294967295
   1fefc:	2228      	movs	r2, #40	; 0x28
   1fefe:	2100      	movs	r1, #0
   1ff00:	4620      	mov	r0, r4
   1ff02:	f002 f9a3 	bl	2224c <memset>
   1ff06:	200c      	movs	r0, #12
   1ff08:	f7f5 fc0a 	bl	15720 <bsd_os_errno_set>
   1ff0c:	4628      	mov	r0, r5
   1ff0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ff10:	2501      	movs	r5, #1
   1ff12:	e7d3      	b.n	1febc <interface_socket_allocate+0x54>
   1ff14:	2502      	movs	r5, #2
   1ff16:	e7d1      	b.n	1febc <interface_socket_allocate+0x54>
   1ff18:	2503      	movs	r5, #3
   1ff1a:	e7cf      	b.n	1febc <interface_socket_allocate+0x54>
   1ff1c:	2504      	movs	r5, #4
   1ff1e:	e7cd      	b.n	1febc <interface_socket_allocate+0x54>
   1ff20:	2508      	movs	r5, #8
   1ff22:	e7cb      	b.n	1febc <interface_socket_allocate+0x54>
   1ff24:	2506      	movs	r5, #6
   1ff26:	e7c9      	b.n	1febc <interface_socket_allocate+0x54>
   1ff28:	2507      	movs	r5, #7
   1ff2a:	e7c7      	b.n	1febc <interface_socket_allocate+0x54>
   1ff2c:	20025020 	.word	0x20025020

0001ff30 <interface_socket_free>:
   1ff30:	2808      	cmp	r0, #8
   1ff32:	d900      	bls.n	1ff36 <interface_socket_free+0x6>
   1ff34:	4770      	bx	lr
   1ff36:	b510      	push	{r4, lr}
   1ff38:	4c07      	ldr	r4, [pc, #28]	; (1ff58 <interface_socket_free+0x28>)
   1ff3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1ff3e:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   1ff42:	69e0      	ldr	r0, [r4, #28]
   1ff44:	b108      	cbz	r0, 1ff4a <interface_socket_free+0x1a>
   1ff46:	f7fe fed3 	bl	1ecf0 <packet_handler_delete>
   1ff4a:	4620      	mov	r0, r4
   1ff4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ff50:	2228      	movs	r2, #40	; 0x28
   1ff52:	2100      	movs	r1, #0
   1ff54:	f002 b97a 	b.w	2224c <memset>
   1ff58:	20025020 	.word	0x20025020

0001ff5c <interface_socket_packet_handler_update>:
   1ff5c:	2808      	cmp	r0, #8
   1ff5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ff62:	d81e      	bhi.n	1ffa2 <interface_socket_packet_handler_update+0x46>
   1ff64:	ea4f 0880 	mov.w	r8, r0, lsl #2
   1ff68:	4e17      	ldr	r6, [pc, #92]	; (1ffc8 <interface_socket_packet_handler_update+0x6c>)
   1ff6a:	eb08 0300 	add.w	r3, r8, r0
   1ff6e:	00db      	lsls	r3, r3, #3
   1ff70:	58f4      	ldr	r4, [r6, r3]
   1ff72:	18f5      	adds	r5, r6, r3
   1ff74:	b1ac      	cbz	r4, 1ffa2 <interface_socket_packet_handler_update+0x46>
   1ff76:	460b      	mov	r3, r1
   1ff78:	4604      	mov	r4, r0
   1ff7a:	4611      	mov	r1, r2
   1ff7c:	4618      	mov	r0, r3
   1ff7e:	462a      	mov	r2, r5
   1ff80:	f8d5 901c 	ldr.w	r9, [r5, #28]
   1ff84:	f7fe fe94 	bl	1ecb0 <packet_handler_create>
   1ff88:	61e8      	str	r0, [r5, #28]
   1ff8a:	b1d0      	cbz	r0, 1ffc2 <interface_socket_packet_handler_update+0x66>
   1ff8c:	6803      	ldr	r3, [r0, #0]
   1ff8e:	681b      	ldr	r3, [r3, #0]
   1ff90:	4798      	blx	r3
   1ff92:	4607      	mov	r7, r0
   1ff94:	b948      	cbnz	r0, 1ffaa <interface_socket_packet_handler_update+0x4e>
   1ff96:	4648      	mov	r0, r9
   1ff98:	f7fe feaa 	bl	1ecf0 <packet_handler_delete>
   1ff9c:	4638      	mov	r0, r7
   1ff9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ffa2:	2705      	movs	r7, #5
   1ffa4:	4638      	mov	r0, r7
   1ffa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ffaa:	69e8      	ldr	r0, [r5, #28]
   1ffac:	f7fe fea0 	bl	1ecf0 <packet_handler_delete>
   1ffb0:	eb08 0004 	add.w	r0, r8, r4
   1ffb4:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
   1ffb8:	f8c6 901c 	str.w	r9, [r6, #28]
   1ffbc:	4638      	mov	r0, r7
   1ffbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ffc2:	2704      	movs	r7, #4
   1ffc4:	e7f4      	b.n	1ffb0 <interface_socket_packet_handler_update+0x54>
   1ffc6:	bf00      	nop
   1ffc8:	20025020 	.word	0x20025020

0001ffcc <interface_socket_wait>:
   1ffcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ffd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1ffd4:	4c0d      	ldr	r4, [pc, #52]	; (2000c <interface_socket_wait+0x40>)
   1ffd6:	00c0      	lsls	r0, r0, #3
   1ffd8:	5825      	ldr	r5, [r4, r0]
   1ffda:	4404      	add	r4, r0
   1ffdc:	4015      	ands	r5, r2
   1ffde:	428d      	cmp	r5, r1
   1ffe0:	d011      	beq.n	20006 <interface_socket_wait+0x3a>
   1ffe2:	6860      	ldr	r0, [r4, #4]
   1ffe4:	b978      	cbnz	r0, 20006 <interface_socket_wait+0x3a>
   1ffe6:	4698      	mov	r8, r3
   1ffe8:	460f      	mov	r7, r1
   1ffea:	4616      	mov	r6, r2
   1ffec:	4625      	mov	r5, r4
   1ffee:	e006      	b.n	1fffe <interface_socket_wait+0x32>
   1fff0:	686b      	ldr	r3, [r5, #4]
   1fff2:	b943      	cbnz	r3, 20006 <interface_socket_wait+0x3a>
   1fff4:	4641      	mov	r1, r8
   1fff6:	4620      	mov	r0, r4
   1fff8:	f7f5 fada 	bl	155b0 <bsd_os_timedwait>
   1fffc:	b920      	cbnz	r0, 20008 <interface_socket_wait+0x3c>
   1fffe:	6828      	ldr	r0, [r5, #0]
   20000:	4030      	ands	r0, r6
   20002:	42b8      	cmp	r0, r7
   20004:	d1f4      	bne.n	1fff0 <interface_socket_wait+0x24>
   20006:	2000      	movs	r0, #0
   20008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2000c:	20025020 	.word	0x20025020

00020010 <interface_from_internal_id_search>:
   20010:	4b27      	ldr	r3, [pc, #156]	; (200b0 <interface_from_internal_id_search+0xa0>)
   20012:	681a      	ldr	r2, [r3, #0]
   20014:	b112      	cbz	r2, 2001c <interface_from_internal_id_search+0xc>
   20016:	699a      	ldr	r2, [r3, #24]
   20018:	4282      	cmp	r2, r0
   2001a:	d039      	beq.n	20090 <interface_from_internal_id_search+0x80>
   2001c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2001e:	b112      	cbz	r2, 20026 <interface_from_internal_id_search+0x16>
   20020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   20022:	4282      	cmp	r2, r0
   20024:	d036      	beq.n	20094 <interface_from_internal_id_search+0x84>
   20026:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   20028:	b112      	cbz	r2, 20030 <interface_from_internal_id_search+0x20>
   2002a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   2002c:	4282      	cmp	r2, r0
   2002e:	d033      	beq.n	20098 <interface_from_internal_id_search+0x88>
   20030:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   20032:	b11a      	cbz	r2, 2003c <interface_from_internal_id_search+0x2c>
   20034:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   20038:	4282      	cmp	r2, r0
   2003a:	d02f      	beq.n	2009c <interface_from_internal_id_search+0x8c>
   2003c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   20040:	b11a      	cbz	r2, 2004a <interface_from_internal_id_search+0x3a>
   20042:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   20046:	4282      	cmp	r2, r0
   20048:	d02a      	beq.n	200a0 <interface_from_internal_id_search+0x90>
   2004a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   2004e:	b11a      	cbz	r2, 20058 <interface_from_internal_id_search+0x48>
   20050:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   20054:	4282      	cmp	r2, r0
   20056:	d025      	beq.n	200a4 <interface_from_internal_id_search+0x94>
   20058:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   2005c:	b11a      	cbz	r2, 20066 <interface_from_internal_id_search+0x56>
   2005e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   20062:	4282      	cmp	r2, r0
   20064:	d020      	beq.n	200a8 <interface_from_internal_id_search+0x98>
   20066:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   2006a:	b11a      	cbz	r2, 20074 <interface_from_internal_id_search+0x64>
   2006c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   20070:	4282      	cmp	r2, r0
   20072:	d01b      	beq.n	200ac <interface_from_internal_id_search+0x9c>
   20074:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   20078:	b13a      	cbz	r2, 2008a <interface_from_internal_id_search+0x7a>
   2007a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   2007e:	4283      	cmp	r3, r0
   20080:	bf14      	ite	ne
   20082:	f04f 30ff 	movne.w	r0, #4294967295
   20086:	2008      	moveq	r0, #8
   20088:	4770      	bx	lr
   2008a:	f04f 30ff 	mov.w	r0, #4294967295
   2008e:	4770      	bx	lr
   20090:	2000      	movs	r0, #0
   20092:	4770      	bx	lr
   20094:	2001      	movs	r0, #1
   20096:	4770      	bx	lr
   20098:	2002      	movs	r0, #2
   2009a:	4770      	bx	lr
   2009c:	2003      	movs	r0, #3
   2009e:	4770      	bx	lr
   200a0:	2004      	movs	r0, #4
   200a2:	4770      	bx	lr
   200a4:	2005      	movs	r0, #5
   200a6:	4770      	bx	lr
   200a8:	2006      	movs	r0, #6
   200aa:	4770      	bx	lr
   200ac:	2007      	movs	r0, #7
   200ae:	4770      	bx	lr
   200b0:	20025020 	.word	0x20025020

000200b4 <interface_socket_from_handle_get>:
   200b4:	2808      	cmp	r0, #8
   200b6:	d807      	bhi.n	200c8 <interface_socket_from_handle_get+0x14>
   200b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   200bc:	4b03      	ldr	r3, [pc, #12]	; (200cc <interface_socket_from_handle_get+0x18>)
   200be:	00c0      	lsls	r0, r0, #3
   200c0:	581a      	ldr	r2, [r3, r0]
   200c2:	b10a      	cbz	r2, 200c8 <interface_socket_from_handle_get+0x14>
   200c4:	4418      	add	r0, r3
   200c6:	4770      	bx	lr
   200c8:	2000      	movs	r0, #0
   200ca:	4770      	bx	lr
   200cc:	20025020 	.word	0x20025020

000200d0 <interface_socket_event_get>:
   200d0:	b119      	cbz	r1, 200da <interface_socket_event_get+0xa>
   200d2:	2808      	cmp	r0, #8
   200d4:	d902      	bls.n	200dc <interface_socket_event_get+0xc>
   200d6:	2310      	movs	r3, #16
   200d8:	600b      	str	r3, [r1, #0]
   200da:	4770      	bx	lr
   200dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   200e0:	4b07      	ldr	r3, [pc, #28]	; (20100 <interface_socket_event_get+0x30>)
   200e2:	00c0      	lsls	r0, r0, #3
   200e4:	581a      	ldr	r2, [r3, r0]
   200e6:	2a00      	cmp	r2, #0
   200e8:	d0f5      	beq.n	200d6 <interface_socket_event_get+0x6>
   200ea:	581b      	ldr	r3, [r3, r0]
   200ec:	0c1b      	lsrs	r3, r3, #16
   200ee:	f003 020a 	and.w	r2, r3, #10
   200f2:	2a0a      	cmp	r2, #10
   200f4:	bf14      	ite	ne
   200f6:	f003 030f 	andne.w	r3, r3, #15
   200fa:	f003 030d 	andeq.w	r3, r3, #13
   200fe:	e7eb      	b.n	200d8 <interface_socket_event_get+0x8>
   20100:	20025020 	.word	0x20025020

00020104 <interface_socket_setopt>:
   20104:	2808      	cmp	r0, #8
   20106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20108:	d82c      	bhi.n	20164 <interface_socket_setopt+0x60>
   2010a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2010e:	4e1e      	ldr	r6, [pc, #120]	; (20188 <interface_socket_setopt+0x84>)
   20110:	00c0      	lsls	r0, r0, #3
   20112:	5834      	ldr	r4, [r6, r0]
   20114:	b334      	cbz	r4, 20164 <interface_socket_setopt+0x60>
   20116:	2901      	cmp	r1, #1
   20118:	d11e      	bne.n	20158 <interface_socket_setopt+0x54>
   2011a:	f1a2 0114 	sub.w	r1, r2, #20
   2011e:	2901      	cmp	r1, #1
   20120:	d81a      	bhi.n	20158 <interface_socket_setopt+0x54>
   20122:	9906      	ldr	r1, [sp, #24]
   20124:	2908      	cmp	r1, #8
   20126:	d123      	bne.n	20170 <interface_socket_setopt+0x6c>
   20128:	b313      	cbz	r3, 20170 <interface_socket_setopt+0x6c>
   2012a:	6859      	ldr	r1, [r3, #4]
   2012c:	4c17      	ldr	r4, [pc, #92]	; (2018c <interface_socket_setopt+0x88>)
   2012e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   20132:	fba4 4101 	umull	r4, r1, r4, r1
   20136:	0989      	lsrs	r1, r1, #6
   20138:	460c      	mov	r4, r1
   2013a:	2500      	movs	r5, #0
   2013c:	681b      	ldr	r3, [r3, #0]
   2013e:	fbe7 4503 	umlal	r4, r5, r7, r3
   20142:	2d01      	cmp	r5, #1
   20144:	bf08      	it	eq
   20146:	2c00      	cmpeq	r4, #0
   20148:	d218      	bcs.n	2017c <interface_socket_setopt+0x78>
   2014a:	4430      	add	r0, r6
   2014c:	2a14      	cmp	r2, #20
   2014e:	bf0c      	ite	eq
   20150:	6204      	streq	r4, [r0, #32]
   20152:	6244      	strne	r4, [r0, #36]	; 0x24
   20154:	2000      	movs	r0, #0
   20156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20158:	202a      	movs	r0, #42	; 0x2a
   2015a:	f7f5 fae1 	bl	15720 <bsd_os_errno_set>
   2015e:	f04f 30ff 	mov.w	r0, #4294967295
   20162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20164:	2009      	movs	r0, #9
   20166:	f7f5 fadb 	bl	15720 <bsd_os_errno_set>
   2016a:	f04f 30ff 	mov.w	r0, #4294967295
   2016e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20170:	2016      	movs	r0, #22
   20172:	f7f5 fad5 	bl	15720 <bsd_os_errno_set>
   20176:	f04f 30ff 	mov.w	r0, #4294967295
   2017a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2017c:	2025      	movs	r0, #37	; 0x25
   2017e:	f7f5 facf 	bl	15720 <bsd_os_errno_set>
   20182:	f04f 30ff 	mov.w	r0, #4294967295
   20186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20188:	20025020 	.word	0x20025020
   2018c:	10624dd3 	.word	0x10624dd3

00020190 <interface_socket_getopt>:
   20190:	b570      	push	{r4, r5, r6, lr}
   20192:	2808      	cmp	r0, #8
   20194:	9d04      	ldr	r5, [sp, #16]
   20196:	d835      	bhi.n	20204 <interface_socket_getopt+0x74>
   20198:	4c20      	ldr	r4, [pc, #128]	; (2021c <interface_socket_getopt+0x8c>)
   2019a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2019e:	00c0      	lsls	r0, r0, #3
   201a0:	5826      	ldr	r6, [r4, r0]
   201a2:	4404      	add	r4, r0
   201a4:	b376      	cbz	r6, 20204 <interface_socket_getopt+0x74>
   201a6:	2901      	cmp	r1, #1
   201a8:	d132      	bne.n	20210 <interface_socket_getopt+0x80>
   201aa:	b32b      	cbz	r3, 201f8 <interface_socket_getopt+0x68>
   201ac:	b325      	cbz	r5, 201f8 <interface_socket_getopt+0x68>
   201ae:	2a04      	cmp	r2, #4
   201b0:	d019      	beq.n	201e6 <interface_socket_getopt+0x56>
   201b2:	f1a2 0114 	sub.w	r1, r2, #20
   201b6:	2901      	cmp	r1, #1
   201b8:	d82a      	bhi.n	20210 <interface_socket_getopt+0x80>
   201ba:	6829      	ldr	r1, [r5, #0]
   201bc:	2908      	cmp	r1, #8
   201be:	d11b      	bne.n	201f8 <interface_socket_getopt+0x68>
   201c0:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   201c4:	2a14      	cmp	r2, #20
   201c6:	bf18      	it	ne
   201c8:	4601      	movne	r1, r0
   201ca:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   201ce:	4a14      	ldr	r2, [pc, #80]	; (20220 <interface_socket_getopt+0x90>)
   201d0:	2000      	movs	r0, #0
   201d2:	fba2 5201 	umull	r5, r2, r2, r1
   201d6:	0992      	lsrs	r2, r2, #6
   201d8:	fb04 1112 	mls	r1, r4, r2, r1
   201dc:	fb04 f101 	mul.w	r1, r4, r1
   201e0:	e9c3 2100 	strd	r2, r1, [r3]
   201e4:	bd70      	pop	{r4, r5, r6, pc}
   201e6:	682a      	ldr	r2, [r5, #0]
   201e8:	2a04      	cmp	r2, #4
   201ea:	d105      	bne.n	201f8 <interface_socket_getopt+0x68>
   201ec:	2200      	movs	r2, #0
   201ee:	6861      	ldr	r1, [r4, #4]
   201f0:	4610      	mov	r0, r2
   201f2:	6019      	str	r1, [r3, #0]
   201f4:	6062      	str	r2, [r4, #4]
   201f6:	bd70      	pop	{r4, r5, r6, pc}
   201f8:	2016      	movs	r0, #22
   201fa:	f7f5 fa91 	bl	15720 <bsd_os_errno_set>
   201fe:	f04f 30ff 	mov.w	r0, #4294967295
   20202:	bd70      	pop	{r4, r5, r6, pc}
   20204:	2009      	movs	r0, #9
   20206:	f7f5 fa8b 	bl	15720 <bsd_os_errno_set>
   2020a:	f04f 30ff 	mov.w	r0, #4294967295
   2020e:	bd70      	pop	{r4, r5, r6, pc}
   20210:	202a      	movs	r0, #42	; 0x2a
   20212:	f7f5 fa85 	bl	15720 <bsd_os_errno_set>
   20216:	f04f 30ff 	mov.w	r0, #4294967295
   2021a:	bd70      	pop	{r4, r5, r6, pc}
   2021c:	20025020 	.word	0x20025020
   20220:	10624dd3 	.word	0x10624dd3

00020224 <interface_socket_fcntl>:
   20224:	2808      	cmp	r0, #8
   20226:	b510      	push	{r4, lr}
   20228:	d826      	bhi.n	20278 <interface_socket_fcntl+0x54>
   2022a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2022e:	4c1b      	ldr	r4, [pc, #108]	; (2029c <interface_socket_fcntl+0x78>)
   20230:	00c3      	lsls	r3, r0, #3
   20232:	58e0      	ldr	r0, [r4, r3]
   20234:	b300      	cbz	r0, 20278 <interface_socket_fcntl+0x54>
   20236:	2901      	cmp	r1, #1
   20238:	d005      	beq.n	20246 <interface_socket_fcntl+0x22>
   2023a:	2902      	cmp	r1, #2
   2023c:	d122      	bne.n	20284 <interface_socket_fcntl+0x60>
   2023e:	58e0      	ldr	r0, [r4, r3]
   20240:	f3c0 7000 	ubfx	r0, r0, #28, #1
   20244:	bd10      	pop	{r4, pc}
   20246:	07d2      	lsls	r2, r2, #31
   20248:	d410      	bmi.n	2026c <interface_socket_fcntl+0x48>
   2024a:	58e0      	ldr	r0, [r4, r3]
   2024c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
   20250:	d11e      	bne.n	20290 <interface_socket_fcntl+0x6c>
   20252:	58e2      	ldr	r2, [r4, r3]
   20254:	b292      	uxth	r2, r2
   20256:	2a0a      	cmp	r2, #10
   20258:	d01a      	beq.n	20290 <interface_socket_fcntl+0x6c>
   2025a:	58e2      	ldr	r2, [r4, r3]
   2025c:	b292      	uxth	r2, r2
   2025e:	2a0b      	cmp	r2, #11
   20260:	d016      	beq.n	20290 <interface_socket_fcntl+0x6c>
   20262:	58e2      	ldr	r2, [r4, r3]
   20264:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   20268:	50e2      	str	r2, [r4, r3]
   2026a:	bd10      	pop	{r4, pc}
   2026c:	58e2      	ldr	r2, [r4, r3]
   2026e:	2000      	movs	r0, #0
   20270:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   20274:	50e2      	str	r2, [r4, r3]
   20276:	bd10      	pop	{r4, pc}
   20278:	2009      	movs	r0, #9
   2027a:	f7f5 fa51 	bl	15720 <bsd_os_errno_set>
   2027e:	f04f 30ff 	mov.w	r0, #4294967295
   20282:	bd10      	pop	{r4, pc}
   20284:	2016      	movs	r0, #22
   20286:	f7f5 fa4b 	bl	15720 <bsd_os_errno_set>
   2028a:	f04f 30ff 	mov.w	r0, #4294967295
   2028e:	bd10      	pop	{r4, pc}
   20290:	2023      	movs	r0, #35	; 0x23
   20292:	f7f5 fa45 	bl	15720 <bsd_os_errno_set>
   20296:	f04f 30ff 	mov.w	r0, #4294967295
   2029a:	bd10      	pop	{r4, pc}
   2029c:	20025020 	.word	0x20025020

000202a0 <at_client_evt_handler>:
   202a0:	b120      	cbz	r0, 202ac <at_client_evt_handler+0xc>
   202a2:	f850 1b08 	ldr.w	r1, [r0], #8
   202a6:	0c09      	lsrs	r1, r1, #16
   202a8:	f7fc be26 	b.w	1cef8 <rpc_at_event_handler>
   202ac:	4770      	bx	lr
   202ae:	bf00      	nop

000202b0 <rpc_at_client_init>:
   202b0:	4801      	ldr	r0, [pc, #4]	; (202b8 <rpc_at_client_init+0x8>)
   202b2:	f7fb bbdd 	b.w	1ba70 <rpc_client_register>
   202b6:	bf00      	nop
   202b8:	0002bf24 	.word	0x0002bf24

000202bc <rpc_at_client_request_alloc>:
   202bc:	b180      	cbz	r0, 202e0 <rpc_at_client_request_alloc+0x24>
   202be:	2300      	movs	r3, #0
   202c0:	b510      	push	{r4, lr}
   202c2:	b082      	sub	sp, #8
   202c4:	aa02      	add	r2, sp, #8
   202c6:	4604      	mov	r4, r0
   202c8:	f842 3d04 	str.w	r3, [r2, #-4]!
   202cc:	2003      	movs	r0, #3
   202ce:	f7fb fc49 	bl	1bb64 <rpc_message_alloc>
   202d2:	b918      	cbnz	r0, 202dc <rpc_at_client_request_alloc+0x20>
   202d4:	9b01      	ldr	r3, [sp, #4]
   202d6:	b10b      	cbz	r3, 202dc <rpc_at_client_request_alloc+0x20>
   202d8:	3308      	adds	r3, #8
   202da:	6023      	str	r3, [r4, #0]
   202dc:	b002      	add	sp, #8
   202de:	bd10      	pop	{r4, pc}
   202e0:	200e      	movs	r0, #14
   202e2:	4770      	bx	lr

000202e4 <rpc_at_client_request_send>:
   202e4:	b150      	cbz	r0, 202fc <rpc_at_client_request_send+0x18>
   202e6:	4603      	mov	r3, r0
   202e8:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   202ec:	2003      	movs	r0, #3
   202ee:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   202f2:	f843 1d08 	str.w	r1, [r3, #-8]!
   202f6:	4619      	mov	r1, r3
   202f8:	f7fb bc24 	b.w	1bb44 <rpc_message_send>
   202fc:	200e      	movs	r0, #14
   202fe:	4770      	bx	lr

00020300 <rpc_at_client_message_free>:
   20300:	b120      	cbz	r0, 2030c <rpc_at_client_message_free+0xc>
   20302:	f1a0 0108 	sub.w	r1, r0, #8
   20306:	2003      	movs	r0, #3
   20308:	f7fb bc58 	b.w	1bbbc <rpc_message_free>
   2030c:	200e      	movs	r0, #14
   2030e:	4770      	bx	lr

00020310 <rpc_at_client_data_free>:
   20310:	b118      	cbz	r0, 2031a <rpc_at_client_data_free+0xa>
   20312:	4601      	mov	r1, r0
   20314:	2003      	movs	r0, #3
   20316:	f7fb bc5d 	b.w	1bbd4 <rpc_message_data_free>
   2031a:	200e      	movs	r0, #14
   2031c:	4770      	bx	lr
   2031e:	bf00      	nop

00020320 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   20320:	4a07      	ldr	r2, [pc, #28]	; (20340 <SystemInit+0x20>)
   20322:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   20326:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   2032a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   2032e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   20332:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   20336:	4b03      	ldr	r3, [pc, #12]	; (20344 <SystemInit+0x24>)
   20338:	4a03      	ldr	r2, [pc, #12]	; (20348 <SystemInit+0x28>)
   2033a:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   2033c:	4770      	bx	lr
   2033e:	bf00      	nop
   20340:	e000ed00 	.word	0xe000ed00
   20344:	200204c8 	.word	0x200204c8
   20348:	03d09000 	.word	0x03d09000

0002034c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   2034c:	4b04      	ldr	r3, [pc, #16]	; (20360 <nrfx_clock_init+0x14>)
   2034e:	791a      	ldrb	r2, [r3, #4]
   20350:	b922      	cbnz	r2, 2035c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   20352:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   20354:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   20356:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   20358:	4802      	ldr	r0, [pc, #8]	; (20364 <nrfx_clock_init+0x18>)
   2035a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   2035c:	4802      	ldr	r0, [pc, #8]	; (20368 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2035e:	4770      	bx	lr
   20360:	20021d6c 	.word	0x20021d6c
   20364:	0bad0000 	.word	0x0bad0000
   20368:	0bad000c 	.word	0x0bad000c

0002036c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   2036c:	b110      	cbz	r0, 20374 <nrfx_clock_start+0x8>
   2036e:	2801      	cmp	r0, #1
   20370:	d01e      	beq.n	203b0 <nrfx_clock_start+0x44>
   20372:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   20374:	4b13      	ldr	r3, [pc, #76]	; (203c4 <nrfx_clock_start+0x58>)
   20376:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2037a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   2037e:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   20382:	4619      	mov	r1, r3
   20384:	d010      	beq.n	203a8 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   20386:	f002 0203 	and.w	r2, r2, #3
   2038a:	2a02      	cmp	r2, #2
   2038c:	d10c      	bne.n	203a8 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2038e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20392:	2200      	movs	r2, #0
   20394:	4b0c      	ldr	r3, [pc, #48]	; (203c8 <nrfx_clock_start+0x5c>)
   20396:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   20398:	2202      	movs	r2, #2
   2039a:	681b      	ldr	r3, [r3, #0]
   2039c:	4b09      	ldr	r3, [pc, #36]	; (203c4 <nrfx_clock_start+0x58>)
   2039e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   203a2:	2201      	movs	r2, #1
   203a4:	609a      	str	r2, [r3, #8]
}
   203a6:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   203a8:	2301      	movs	r3, #1
   203aa:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   203ae:	e7f0      	b.n	20392 <nrfx_clock_start+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   203b0:	2200      	movs	r2, #0
   203b2:	4b06      	ldr	r3, [pc, #24]	; (203cc <nrfx_clock_start+0x60>)
   203b4:	601a      	str	r2, [r3, #0]
   203b6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   203b8:	4b02      	ldr	r3, [pc, #8]	; (203c4 <nrfx_clock_start+0x58>)
   203ba:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   203be:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   203c0:	4770      	bx	lr
   203c2:	bf00      	nop
   203c4:	40005000 	.word	0x40005000
   203c8:	40005104 	.word	0x40005104
   203cc:	40005100 	.word	0x40005100

000203d0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   203d0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   203d2:	b110      	cbz	r0, 203da <nrfx_clock_stop+0xa>
   203d4:	2801      	cmp	r0, #1
   203d6:	d016      	beq.n	20406 <nrfx_clock_stop+0x36>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   203d8:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   203da:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   203dc:	2101      	movs	r1, #1
   203de:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   203e2:	4c16      	ldr	r4, [pc, #88]	; (2043c <nrfx_clock_stop+0x6c>)
   203e4:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   203e8:	4a15      	ldr	r2, [pc, #84]	; (20440 <nrfx_clock_stop+0x70>)
   203ea:	6010      	str	r0, [r2, #0]
   203ec:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   203ee:	4a15      	ldr	r2, [pc, #84]	; (20444 <nrfx_clock_stop+0x74>)
   203f0:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   203f2:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   203f6:	03db      	lsls	r3, r3, #15
   203f8:	d5ee      	bpl.n	203d8 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   203fa:	2001      	movs	r0, #1
   203fc:	f00a fbf3 	bl	2abe6 <nrfx_busy_wait>
   20400:	3d01      	subs	r5, #1
   20402:	d1f6      	bne.n	203f2 <nrfx_clock_stop+0x22>
   20404:	e7e8      	b.n	203d8 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20406:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20408:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2040c:	4b0e      	ldr	r3, [pc, #56]	; (20448 <nrfx_clock_stop+0x78>)
    p_reg->INTENCLR = mask;
   2040e:	4c0b      	ldr	r4, [pc, #44]	; (2043c <nrfx_clock_stop+0x6c>)
   20410:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20414:	601a      	str	r2, [r3, #0]
   20416:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20418:	4b0c      	ldr	r3, [pc, #48]	; (2044c <nrfx_clock_stop+0x7c>)
   2041a:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2041c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   20420:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   20424:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   20428:	03d2      	lsls	r2, r2, #15
   2042a:	d5d5      	bpl.n	203d8 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   2042c:	2b00      	cmp	r3, #0
   2042e:	d0d3      	beq.n	203d8 <nrfx_clock_stop+0x8>
   20430:	2001      	movs	r0, #1
   20432:	f00a fbd8 	bl	2abe6 <nrfx_busy_wait>
   20436:	3d01      	subs	r5, #1
   20438:	d1f0      	bne.n	2041c <nrfx_clock_stop+0x4c>
   2043a:	e7cd      	b.n	203d8 <nrfx_clock_stop+0x8>
   2043c:	40005000 	.word	0x40005000
   20440:	40005104 	.word	0x40005104
   20444:	4000500c 	.word	0x4000500c
   20448:	40005100 	.word	0x40005100
   2044c:	40005004 	.word	0x40005004

00020450 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   20450:	4b15      	ldr	r3, [pc, #84]	; (204a8 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   20452:	b510      	push	{r4, lr}
   20454:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   20456:	b14a      	cbz	r2, 2046c <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20458:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   2045a:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2045c:	6018      	str	r0, [r3, #0]
   2045e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   20460:	4b12      	ldr	r3, [pc, #72]	; (204ac <nrfx_power_clock_irq_handler+0x5c>)
   20462:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   20466:	4b12      	ldr	r3, [pc, #72]	; (204b0 <nrfx_power_clock_irq_handler+0x60>)
   20468:	681b      	ldr	r3, [r3, #0]
   2046a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2046c:	4b11      	ldr	r3, [pc, #68]	; (204b4 <nrfx_power_clock_irq_handler+0x64>)
   2046e:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   20470:	b182      	cbz	r2, 20494 <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20472:	2200      	movs	r2, #0
   20474:	601a      	str	r2, [r3, #0]
   20476:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   20478:	4b0c      	ldr	r3, [pc, #48]	; (204ac <nrfx_power_clock_irq_handler+0x5c>)
   2047a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2047e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   20482:	f002 0203 	and.w	r2, r2, #3
   20486:	2a01      	cmp	r2, #1
   20488:	f04f 0102 	mov.w	r1, #2
   2048c:	d103      	bne.n	20496 <nrfx_power_clock_irq_handler+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2048e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20492:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   20494:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   20496:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2049a:	4b05      	ldr	r3, [pc, #20]	; (204b0 <nrfx_power_clock_irq_handler+0x60>)
   2049c:	2001      	movs	r0, #1
}
   2049e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   204a2:	681b      	ldr	r3, [r3, #0]
   204a4:	4718      	bx	r3
   204a6:	bf00      	nop
   204a8:	40005100 	.word	0x40005100
   204ac:	40005000 	.word	0x40005000
   204b0:	20021d6c 	.word	0x20021d6c
   204b4:	40005104 	.word	0x40005104

000204b8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   204b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   204ba:	4b10      	ldr	r3, [pc, #64]	; (204fc <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   204bc:	4f10      	ldr	r7, [pc, #64]	; (20500 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   204be:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   204c2:	3001      	adds	r0, #1
   204c4:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   204c8:	42ae      	cmp	r6, r5
   204ca:	d800      	bhi.n	204ce <z_sys_init_run_level+0x16>
		}
	}
}
   204cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   204ce:	e9d5 3400 	ldrd	r3, r4, [r5]
   204d2:	4620      	mov	r0, r4
   204d4:	4798      	blx	r3
   204d6:	b170      	cbz	r0, 204f6 <z_sys_init_run_level+0x3e>
   204d8:	b16c      	cbz	r4, 204f6 <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   204da:	2301      	movs	r3, #1
				(dev - __device_start));
   204dc:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   204de:	4a09      	ldr	r2, [pc, #36]	; (20504 <z_sys_init_run_level+0x4c>)
   204e0:	1124      	asrs	r4, r4, #4
   204e2:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   204e4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   204e8:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   204ec:	fa03 f404 	lsl.w	r4, r3, r4
   204f0:	4304      	orrs	r4, r0
   204f2:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   204f6:	3508      	adds	r5, #8
   204f8:	e7e6      	b.n	204c8 <z_sys_init_run_level+0x10>
   204fa:	bf00      	nop
   204fc:	0002bf34 	.word	0x0002bf34
   20500:	20020a60 	.word	0x20020a60
   20504:	20020ae0 	.word	0x20020ae0

00020508 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   20508:	4b08      	ldr	r3, [pc, #32]	; (2052c <z_device_ready+0x24>)
   2050a:	1ac0      	subs	r0, r0, r3
   2050c:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   2050e:	4b08      	ldr	r3, [pc, #32]	; (20530 <z_device_ready+0x28>)
   20510:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   20512:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   20516:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   20518:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   2051c:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   20520:	4210      	tst	r0, r2
}
   20522:	bf0c      	ite	eq
   20524:	4618      	moveq	r0, r3
   20526:	2000      	movne	r0, #0
   20528:	4770      	bx	lr
   2052a:	bf00      	nop
   2052c:	20020a60 	.word	0x20020a60
   20530:	20020ae0 	.word	0x20020ae0

00020534 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   20534:	4911      	ldr	r1, [pc, #68]	; (2057c <z_impl_device_get_binding+0x48>)
{
   20536:	b570      	push	{r4, r5, r6, lr}
   20538:	4605      	mov	r5, r0
   2053a:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   2053c:	4c10      	ldr	r4, [pc, #64]	; (20580 <z_impl_device_get_binding+0x4c>)
   2053e:	428c      	cmp	r4, r1
   20540:	d104      	bne.n	2054c <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   20542:	4c0f      	ldr	r4, [pc, #60]	; (20580 <z_impl_device_get_binding+0x4c>)
   20544:	42b4      	cmp	r4, r6
   20546:	d10a      	bne.n	2055e <z_impl_device_get_binding+0x2a>
	return NULL;
   20548:	2400      	movs	r4, #0
   2054a:	e014      	b.n	20576 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   2054c:	4620      	mov	r0, r4
   2054e:	f7ff ffdb 	bl	20508 <z_device_ready>
   20552:	b110      	cbz	r0, 2055a <z_impl_device_get_binding+0x26>
   20554:	6823      	ldr	r3, [r4, #0]
   20556:	42ab      	cmp	r3, r5
   20558:	d00d      	beq.n	20576 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   2055a:	3410      	adds	r4, #16
   2055c:	e7ef      	b.n	2053e <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   2055e:	4620      	mov	r0, r4
   20560:	f7ff ffd2 	bl	20508 <z_device_ready>
   20564:	b908      	cbnz	r0, 2056a <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   20566:	3410      	adds	r4, #16
   20568:	e7ec      	b.n	20544 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   2056a:	4628      	mov	r0, r5
   2056c:	6821      	ldr	r1, [r4, #0]
   2056e:	f7ec fb77 	bl	cc60 <strcmp>
   20572:	2800      	cmp	r0, #0
   20574:	d1f7      	bne.n	20566 <z_impl_device_get_binding+0x32>
}
   20576:	4620      	mov	r0, r4
   20578:	bd70      	pop	{r4, r5, r6, pc}
   2057a:	bf00      	nop
   2057c:	20020ae0 	.word	0x20020ae0
   20580:	20020a60 	.word	0x20020a60

00020584 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   20584:	4b01      	ldr	r3, [pc, #4]	; (2058c <z_impl_z_errno+0x8>)
   20586:	6898      	ldr	r0, [r3, #8]
}
   20588:	3064      	adds	r0, #100	; 0x64
   2058a:	4770      	bx	lr
   2058c:	20021d74 	.word	0x20021d74

00020590 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   20590:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20594:	4605      	mov	r5, r0
   20596:	460f      	mov	r7, r1
	__asm__ volatile(
   20598:	f04f 0320 	mov.w	r3, #32
   2059c:	f3ef 8811 	mrs	r8, BASEPRI
   205a0:	f383 8811 	msr	BASEPRI, r3
   205a4:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   205a8:	f000 febe 	bl	21328 <z_impl_k_current_get>
   205ac:	4c22      	ldr	r4, [pc, #136]	; (20638 <z_fatal_error+0xa8>)
   205ae:	4b23      	ldr	r3, [pc, #140]	; (2063c <z_fatal_error+0xac>)
   205b0:	2d04      	cmp	r5, #4
   205b2:	eba4 0403 	sub.w	r4, r4, r3
   205b6:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   205ba:	bf98      	it	ls
   205bc:	4a20      	ldrls	r2, [pc, #128]	; (20640 <z_fatal_error+0xb0>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   205be:	ea4f 1484 	mov.w	r4, r4, lsl #6
   205c2:	f044 0301 	orr.w	r3, r4, #1
   205c6:	4606      	mov	r6, r0
	switch (reason) {
   205c8:	bf94      	ite	ls
   205ca:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   205ce:	4a1d      	ldrhi	r2, [pc, #116]	; (20644 <z_fatal_error+0xb4>)
   205d0:	f8ad 3000 	strh.w	r3, [sp]
   205d4:	4629      	mov	r1, r5
   205d6:	2300      	movs	r3, #0
   205d8:	481b      	ldr	r0, [pc, #108]	; (20648 <z_fatal_error+0xb8>)
   205da:	f008 fa8c 	bl	28af6 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   205de:	b147      	cbz	r7, 205f2 <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   205e0:	69fb      	ldr	r3, [r7, #28]
   205e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   205e6:	b123      	cbz	r3, 205f2 <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   205e8:	4818      	ldr	r0, [pc, #96]	; (2064c <z_fatal_error+0xbc>)
   205ea:	f044 0101 	orr.w	r1, r4, #1
   205ee:	f008 fa43 	bl	28a78 <log_0>
	const char *thread_name = k_thread_name_get(thread);
   205f2:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   205f4:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   205f8:	f00a fd37 	bl	2b06a <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   205fc:	b1d0      	cbz	r0, 20634 <z_fatal_error+0xa4>
   205fe:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   20600:	4b13      	ldr	r3, [pc, #76]	; (20650 <z_fatal_error+0xc0>)
   20602:	2a00      	cmp	r2, #0
   20604:	bf08      	it	eq
   20606:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   20608:	f7f1 ffa2 	bl	12550 <log_strdup>
   2060c:	4623      	mov	r3, r4
   2060e:	4602      	mov	r2, r0
   20610:	4631      	mov	r1, r6
   20612:	4810      	ldr	r0, [pc, #64]	; (20654 <z_fatal_error+0xc4>)
   20614:	f008 fa56 	bl	28ac4 <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   20618:	4639      	mov	r1, r7
   2061a:	4628      	mov	r0, r5
   2061c:	f7f7 f908 	bl	17830 <k_sys_fatal_error_handler>
	__asm__ volatile(
   20620:	f388 8811 	msr	BASEPRI, r8
   20624:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   20628:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   2062a:	b002      	add	sp, #8
   2062c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20630:	f7f3 bc20 	b.w	13e74 <z_impl_k_thread_abort>
		thread_name = "unknown";
   20634:	4806      	ldr	r0, [pc, #24]	; (20650 <z_fatal_error+0xc0>)
   20636:	e7e7      	b.n	20608 <z_fatal_error+0x78>
   20638:	0002b818 	.word	0x0002b818
   2063c:	0002b7b8 	.word	0x0002b7b8
   20640:	0002bf4c 	.word	0x0002bf4c
   20644:	0002e055 	.word	0x0002e055
   20648:	0002e06b 	.word	0x0002e06b
   2064c:	0002e093 	.word	0x0002e093
   20650:	0002e063 	.word	0x0002e063
   20654:	0002e0b4 	.word	0x0002e0b4

00020658 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   20658:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   2065a:	4d0b      	ldr	r5, [pc, #44]	; (20688 <idle+0x30>)
	__asm__ volatile(
   2065c:	f04f 0220 	mov.w	r2, #32
   20660:	f3ef 8311 	mrs	r3, BASEPRI
   20664:	f382 8811 	msr	BASEPRI, r2
   20668:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   2066c:	f00a fd79 	bl	2b162 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   20670:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
   20672:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   20674:	2802      	cmp	r0, #2
   20676:	bfd8      	it	le
   20678:	4608      	movle	r0, r1
   2067a:	f00a fd82 	bl	2b182 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   2067e:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   20680:	f7f3 f8b0 	bl	137e4 <arch_cpu_idle>
}
   20684:	e7ea      	b.n	2065c <idle+0x4>
   20686:	bf00      	nop
   20688:	20021d74 	.word	0x20021d74

0002068c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   2068c:	4802      	ldr	r0, [pc, #8]	; (20698 <z_bss_zero+0xc>)
   2068e:	4a03      	ldr	r2, [pc, #12]	; (2069c <z_bss_zero+0x10>)
   20690:	2100      	movs	r1, #0
   20692:	1a12      	subs	r2, r2, r0
   20694:	f001 bdda 	b.w	2224c <memset>
   20698:	20020cc8 	.word	0x20020cc8
   2069c:	200251b0 	.word	0x200251b0

000206a0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   206a0:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   206a2:	4806      	ldr	r0, [pc, #24]	; (206bc <z_data_copy+0x1c>)
   206a4:	4a06      	ldr	r2, [pc, #24]	; (206c0 <z_data_copy+0x20>)
   206a6:	4907      	ldr	r1, [pc, #28]	; (206c4 <z_data_copy+0x24>)
   206a8:	1a12      	subs	r2, r2, r0
   206aa:	f7ec fa63 	bl	cb74 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   206ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   206b2:	4a05      	ldr	r2, [pc, #20]	; (206c8 <z_data_copy+0x28>)
   206b4:	4905      	ldr	r1, [pc, #20]	; (206cc <z_data_copy+0x2c>)
   206b6:	4806      	ldr	r0, [pc, #24]	; (206d0 <z_data_copy+0x30>)
   206b8:	f7ec ba5c 	b.w	cb74 <memcpy>
   206bc:	20020000 	.word	0x20020000
   206c0:	20020cc8 	.word	0x20020cc8
   206c4:	0002e178 	.word	0x0002e178
   206c8:	00000000 	.word	0x00000000
   206cc:	0002e178 	.word	0x0002e178
   206d0:	20020000 	.word	0x20020000

000206d4 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   206d4:	2201      	movs	r2, #1
{
   206d6:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   206d8:	4b0b      	ldr	r3, [pc, #44]	; (20708 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   206da:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   206dc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   206de:	f7ff feeb 	bl	204b8 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   206e2:	4a0a      	ldr	r2, [pc, #40]	; (2070c <bg_thread_main+0x38>)
   206e4:	490a      	ldr	r1, [pc, #40]	; (20710 <bg_thread_main+0x3c>)
   206e6:	480b      	ldr	r0, [pc, #44]	; (20714 <bg_thread_main+0x40>)
   206e8:	f007 fe68 	bl	283bc <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   206ec:	2003      	movs	r0, #3
   206ee:	f7ff fee3 	bl	204b8 <z_sys_init_run_level>

	z_init_static_threads();
   206f2:	f000 fee3 	bl	214bc <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   206f6:	f7f1 f939 	bl	1196c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   206fa:	4a07      	ldr	r2, [pc, #28]	; (20718 <bg_thread_main+0x44>)
   206fc:	7b13      	ldrb	r3, [r2, #12]
   206fe:	f023 0301 	bic.w	r3, r3, #1
   20702:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   20704:	bd08      	pop	{r3, pc}
   20706:	bf00      	nop
   20708:	2002501d 	.word	0x2002501d
   2070c:	0002e054 	.word	0x0002e054
   20710:	0002e116 	.word	0x0002e116
   20714:	0002e139 	.word	0x0002e139
   20718:	20021260 	.word	0x20021260

0002071c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   2071c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   20720:	b0b9      	sub	sp, #228	; 0xe4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   20722:	f7f1 fe69 	bl	123f8 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   20726:	4b34      	ldr	r3, [pc, #208]	; (207f8 <z_cstart+0xdc>)
	uint32_t msp =
   20728:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2072c:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   20730:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   20734:	2400      	movs	r4, #0
   20736:	23e0      	movs	r3, #224	; 0xe0
   20738:	4d30      	ldr	r5, [pc, #192]	; (207fc <z_cstart+0xe0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2073a:	f04f 0b01 	mov.w	fp, #1
   2073e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   20742:	77ec      	strb	r4, [r5, #31]
   20744:	762c      	strb	r4, [r5, #24]
   20746:	766c      	strb	r4, [r5, #25]
   20748:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2074a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   2074c:	4e2c      	ldr	r6, [pc, #176]	; (20800 <z_cstart+0xe4>)
   2074e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   20752:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   20754:	f7f3 fb56 	bl	13e04 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   20758:	f7f3 f83e 	bl	137d8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2075c:	f04f 33ff 	mov.w	r3, #4294967295
   20760:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   20762:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   20764:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   20768:	4d26      	ldr	r5, [pc, #152]	; (20804 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   2076a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   2076e:	ab06      	add	r3, sp, #24
   20770:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   20772:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   20774:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   20778:	f7ff fe9e 	bl	204b8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2077c:	2001      	movs	r0, #1
   2077e:	f7ff fe9b 	bl	204b8 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20782:	f8df a098 	ldr.w	sl, [pc, #152]	; 2081c <z_cstart+0x100>
	z_sched_init();
   20786:	f000 fd57 	bl	21238 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2078a:	4b1f      	ldr	r3, [pc, #124]	; (20808 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   2078c:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2078e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   20792:	491e      	ldr	r1, [pc, #120]	; (2080c <z_cstart+0xf0>)
   20794:	9305      	str	r3, [sp, #20]
   20796:	4630      	mov	r0, r6
   20798:	4653      	mov	r3, sl
   2079a:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   2079e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   207a2:	9400      	str	r4, [sp, #0]
   207a4:	f000 fe2e 	bl	21404 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   207a8:	7b73      	ldrb	r3, [r6, #13]
   207aa:	4680      	mov	r8, r0
   207ac:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   207b0:	4630      	mov	r0, r6
   207b2:	7373      	strb	r3, [r6, #13]
   207b4:	f00a fbb1 	bl	2af1a <z_ready_thread>
	z_setup_new_thread(thread, stack,
   207b8:	230f      	movs	r3, #15
   207ba:	4f15      	ldr	r7, [pc, #84]	; (20810 <z_cstart+0xf4>)
   207bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
   207c0:	e9cd 4302 	strd	r4, r3, [sp, #8]
   207c4:	4913      	ldr	r1, [pc, #76]	; (20814 <z_cstart+0xf8>)
   207c6:	4b14      	ldr	r3, [pc, #80]	; (20818 <z_cstart+0xfc>)
   207c8:	4638      	mov	r0, r7
   207ca:	e9cd b404 	strd	fp, r4, [sp, #16]
   207ce:	e9cd 4400 	strd	r4, r4, [sp]
   207d2:	f000 fe17 	bl	21404 <z_setup_new_thread>
   207d6:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   207d8:	4652      	mov	r2, sl
   207da:	f023 0304 	bic.w	r3, r3, #4
   207de:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   207e0:	f105 0318 	add.w	r3, r5, #24
   207e4:	4641      	mov	r1, r8
   207e6:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   207e8:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   207ec:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   207ee:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   207f0:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   207f4:	f7f2 ffca 	bl	1378c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   207f8:	200281f0 	.word	0x200281f0
   207fc:	e000ed00 	.word	0xe000ed00
   20800:	20021260 	.word	0x20021260
   20804:	20021d74 	.word	0x20021d74
   20808:	0002e160 	.word	0x0002e160
   2080c:	200270b0 	.word	0x200270b0
   20810:	20021198 	.word	0x20021198
   20814:	200280b0 	.word	0x200280b0
   20818:	00020659 	.word	0x00020659
   2081c:	000206d5 	.word	0x000206d5

00020820 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   20820:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   20822:	4c06      	ldr	r4, [pc, #24]	; (2083c <statics_init+0x1c>)
   20824:	4d06      	ldr	r5, [pc, #24]	; (20840 <statics_init+0x20>)
   20826:	42ac      	cmp	r4, r5
   20828:	d301      	bcc.n	2082e <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   2082a:	2000      	movs	r0, #0
   2082c:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   2082e:	4620      	mov	r0, r4
   20830:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   20834:	f00a f9e6 	bl	2ac04 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   20838:	3414      	adds	r4, #20
   2083a:	e7f4      	b.n	20826 <statics_init+0x6>
   2083c:	20020b50 	.word	0x20020b50
   20840:	20020b64 	.word	0x20020b64

00020844 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   20844:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20846:	4b0e      	ldr	r3, [pc, #56]	; (20880 <init_mem_slab_module+0x3c>)
   20848:	4c0e      	ldr	r4, [pc, #56]	; (20884 <init_mem_slab_module+0x40>)
   2084a:	42a3      	cmp	r3, r4
   2084c:	d301      	bcc.n	20852 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   2084e:	2000      	movs	r0, #0
	return rc;
}
   20850:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   20852:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   20856:	ea41 0200 	orr.w	r2, r1, r0
   2085a:	f012 0203 	ands.w	r2, r2, #3
   2085e:	d10b      	bne.n	20878 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   20860:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   20862:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   20864:	42aa      	cmp	r2, r5
   20866:	d101      	bne.n	2086c <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20868:	331c      	adds	r3, #28
   2086a:	e7ee      	b.n	2084a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   2086c:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2086e:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   20870:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   20872:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   20874:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   20876:	e7f5      	b.n	20864 <init_mem_slab_module+0x20>
		return -EINVAL;
   20878:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2087c:	e7e8      	b.n	20850 <init_mem_slab_module+0xc>
   2087e:	bf00      	nop
   20880:	20020b50 	.word	0x20020b50
   20884:	20020b50 	.word	0x20020b50

00020888 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   20888:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   2088a:	460c      	mov	r4, r1
   2088c:	4616      	mov	r6, r2
   2088e:	461f      	mov	r7, r3
   20890:	f04f 0320 	mov.w	r3, #32
   20894:	f3ef 8111 	mrs	r1, BASEPRI
   20898:	f383 8811 	msr	BASEPRI, r3
   2089c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   208a0:	6943      	ldr	r3, [r0, #20]
   208a2:	b15b      	cbz	r3, 208bc <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   208a4:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   208a6:	681b      	ldr	r3, [r3, #0]
   208a8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   208aa:	6983      	ldr	r3, [r0, #24]
   208ac:	3301      	adds	r3, #1
   208ae:	6183      	str	r3, [r0, #24]
		result = 0;
   208b0:	2000      	movs	r0, #0
	__asm__ volatile(
   208b2:	f381 8811 	msr	BASEPRI, r1
   208b6:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   208ba:	e011      	b.n	208e0 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   208bc:	ea56 0207 	orrs.w	r2, r6, r7
   208c0:	d103      	bne.n	208ca <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   208c2:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   208c6:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   208c8:	e7f3      	b.n	208b2 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   208ca:	4602      	mov	r2, r0
   208cc:	e9cd 6700 	strd	r6, r7, [sp]
   208d0:	4804      	ldr	r0, [pc, #16]	; (208e4 <k_mem_slab_alloc+0x5c>)
   208d2:	f000 fc2f 	bl	21134 <z_pend_curr>
		if (result == 0) {
   208d6:	b918      	cbnz	r0, 208e0 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   208d8:	4b03      	ldr	r3, [pc, #12]	; (208e8 <k_mem_slab_alloc+0x60>)
   208da:	689b      	ldr	r3, [r3, #8]
   208dc:	695b      	ldr	r3, [r3, #20]
   208de:	6023      	str	r3, [r4, #0]
}
   208e0:	b002      	add	sp, #8
   208e2:	bdd0      	pop	{r4, r6, r7, pc}
   208e4:	2002501e 	.word	0x2002501e
   208e8:	20021d74 	.word	0x20021d74

000208ec <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   208ec:	b570      	push	{r4, r5, r6, lr}
   208ee:	4604      	mov	r4, r0
   208f0:	460d      	mov	r5, r1
	__asm__ volatile(
   208f2:	f04f 0320 	mov.w	r3, #32
   208f6:	f3ef 8611 	mrs	r6, BASEPRI
   208fa:	f383 8811 	msr	BASEPRI, r3
   208fe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   20902:	f00a fb62 	bl	2afca <z_unpend_first_thread>

	if (pending_thread != NULL) {
   20906:	b158      	cbz	r0, 20920 <k_mem_slab_free+0x34>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   20908:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2090a:	682a      	ldr	r2, [r5, #0]
   2090c:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2090e:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   20910:	f00a fb03 	bl	2af1a <z_ready_thread>
		z_reschedule(&lock, key);
   20914:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   20916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   2091a:	4808      	ldr	r0, [pc, #32]	; (2093c <k_mem_slab_free+0x50>)
   2091c:	f000 b9f6 	b.w	20d0c <z_reschedule>
		**(char ***)mem = slab->free_list;
   20920:	682b      	ldr	r3, [r5, #0]
   20922:	6962      	ldr	r2, [r4, #20]
   20924:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   20926:	682b      	ldr	r3, [r5, #0]
   20928:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   2092a:	69a3      	ldr	r3, [r4, #24]
   2092c:	3b01      	subs	r3, #1
   2092e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   20930:	f386 8811 	msr	BASEPRI, r6
   20934:	f3bf 8f6f 	isb	sy
}
   20938:	bd70      	pop	{r4, r5, r6, pc}
   2093a:	bf00      	nop
   2093c:	2002501e 	.word	0x2002501e

00020940 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   20940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20944:	4604      	mov	r4, r0
   20946:	4616      	mov	r6, r2
   20948:	461f      	mov	r7, r3
   2094a:	b085      	sub	sp, #20

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   2094c:	f100 0908 	add.w	r9, r0, #8
	__asm__ volatile(
   20950:	f04f 0320 	mov.w	r3, #32
   20954:	f3ef 8811 	mrs	r8, BASEPRI
   20958:	f383 8811 	msr	BASEPRI, r3
   2095c:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   20960:	6a02      	ldr	r2, [r0, #32]
   20962:	68c3      	ldr	r3, [r0, #12]
   20964:	429a      	cmp	r2, r3
   20966:	d22b      	bcs.n	209c0 <z_impl_k_msgq_put+0x80>
   20968:	9103      	str	r1, [sp, #12]
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   2096a:	f00a fb2e 	bl	2afca <z_unpend_first_thread>
		if (pending_thread != NULL) {
   2096e:	68a2      	ldr	r2, [r4, #8]
   20970:	4605      	mov	r5, r0
   20972:	9903      	ldr	r1, [sp, #12]
   20974:	b178      	cbz	r0, 20996 <z_impl_k_msgq_put+0x56>
   20976:	2400      	movs	r4, #0
   20978:	6940      	ldr	r0, [r0, #20]
   2097a:	f7ec f8fb 	bl	cb74 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   2097e:	4628      	mov	r0, r5
   20980:	67ec      	str	r4, [r5, #124]	; 0x7c
   20982:	f00a faca 	bl	2af1a <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   20986:	4648      	mov	r0, r9
   20988:	4641      	mov	r1, r8
   2098a:	f000 f9bf 	bl	20d0c <z_reschedule>
			return 0;
   2098e:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   20990:	b005      	add	sp, #20
   20992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20996:	69e0      	ldr	r0, [r4, #28]
   20998:	f7ec f8ec 	bl	cb74 <memcpy>
		result = 0;
   2099c:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   2099e:	69e3      	ldr	r3, [r4, #28]
   209a0:	68a2      	ldr	r2, [r4, #8]
   209a2:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   209a4:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   209a6:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   209a8:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   209aa:	bf04      	itt	eq
   209ac:	6923      	ldreq	r3, [r4, #16]
   209ae:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   209b0:	6a23      	ldr	r3, [r4, #32]
   209b2:	3301      	adds	r3, #1
   209b4:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   209b6:	f388 8811 	msr	BASEPRI, r8
   209ba:	f3bf 8f6f 	isb	sy
	return result;
   209be:	e7e7      	b.n	20990 <z_impl_k_msgq_put+0x50>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   209c0:	ea56 0307 	orrs.w	r3, r6, r7
   209c4:	d00a      	beq.n	209dc <z_impl_k_msgq_put+0x9c>
		_current->base.swap_data = (void *) data;
   209c6:	4b07      	ldr	r3, [pc, #28]	; (209e4 <z_impl_k_msgq_put+0xa4>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   209c8:	4602      	mov	r2, r0
		_current->base.swap_data = (void *) data;
   209ca:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   209cc:	4648      	mov	r0, r9
		_current->base.swap_data = (void *) data;
   209ce:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   209d0:	4641      	mov	r1, r8
   209d2:	e9cd 6700 	strd	r6, r7, [sp]
   209d6:	f000 fbad 	bl	21134 <z_pend_curr>
   209da:	e7d9      	b.n	20990 <z_impl_k_msgq_put+0x50>
		result = -ENOMSG;
   209dc:	f06f 0022 	mvn.w	r0, #34	; 0x22
   209e0:	e7e9      	b.n	209b6 <z_impl_k_msgq_put+0x76>
   209e2:	bf00      	nop
   209e4:	20021d74 	.word	0x20021d74

000209e8 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   209e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   209ec:	4604      	mov	r4, r0
   209ee:	4616      	mov	r6, r2
   209f0:	4608      	mov	r0, r1
   209f2:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   209f4:	f104 0908 	add.w	r9, r4, #8
	__asm__ volatile(
   209f8:	f04f 0320 	mov.w	r3, #32
   209fc:	f3ef 8811 	mrs	r8, BASEPRI
   20a00:	f383 8811 	msr	BASEPRI, r3
   20a04:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   20a08:	6a23      	ldr	r3, [r4, #32]
   20a0a:	2b00      	cmp	r3, #0
   20a0c:	d032      	beq.n	20a74 <z_impl_k_msgq_get+0x8c>
   20a0e:	68a2      	ldr	r2, [r4, #8]
   20a10:	69a1      	ldr	r1, [r4, #24]
   20a12:	f7ec f8af 	bl	cb74 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   20a16:	69a3      	ldr	r3, [r4, #24]
   20a18:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   20a1a:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   20a1c:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   20a1e:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   20a20:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   20a22:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   20a24:	bf04      	itt	eq
   20a26:	6923      	ldreq	r3, [r4, #16]
   20a28:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   20a2a:	6a23      	ldr	r3, [r4, #32]
   20a2c:	3b01      	subs	r3, #1
   20a2e:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   20a30:	f00a facb 	bl	2afca <z_unpend_first_thread>
		if (pending_thread != NULL) {
   20a34:	4605      	mov	r5, r0
   20a36:	b368      	cbz	r0, 20a94 <z_impl_k_msgq_get+0xac>
   20a38:	6941      	ldr	r1, [r0, #20]
   20a3a:	68a2      	ldr	r2, [r4, #8]
   20a3c:	69e0      	ldr	r0, [r4, #28]
   20a3e:	f7ec f899 	bl	cb74 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   20a42:	69e3      	ldr	r3, [r4, #28]
   20a44:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   20a46:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   20a48:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   20a4a:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   20a4c:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   20a4e:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   20a50:	bf04      	itt	eq
   20a52:	6923      	ldreq	r3, [r4, #16]
   20a54:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   20a56:	6a23      	ldr	r3, [r4, #32]
   20a58:	3301      	adds	r3, #1
   20a5a:	6223      	str	r3, [r4, #32]
   20a5c:	2400      	movs	r4, #0
   20a5e:	67ec      	str	r4, [r5, #124]	; 0x7c
			z_ready_thread(pending_thread);
   20a60:	f00a fa5b 	bl	2af1a <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   20a64:	4648      	mov	r0, r9
   20a66:	4641      	mov	r1, r8
   20a68:	f000 f950 	bl	20d0c <z_reschedule>
			return 0;
   20a6c:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   20a6e:	b003      	add	sp, #12
   20a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20a74:	ea56 0307 	orrs.w	r3, r6, r7
   20a78:	d00a      	beq.n	20a90 <z_impl_k_msgq_get+0xa8>
		_current->base.swap_data = data;
   20a7a:	4b09      	ldr	r3, [pc, #36]	; (20aa0 <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   20a7c:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   20a7e:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   20a80:	4648      	mov	r0, r9
		_current->base.swap_data = data;
   20a82:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   20a84:	4641      	mov	r1, r8
   20a86:	e9cd 6700 	strd	r6, r7, [sp]
   20a8a:	f000 fb53 	bl	21134 <z_pend_curr>
   20a8e:	e7ee      	b.n	20a6e <z_impl_k_msgq_get+0x86>
		result = -ENOMSG;
   20a90:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   20a94:	f388 8811 	msr	BASEPRI, r8
   20a98:	f3bf 8f6f 	isb	sy
	return result;
   20a9c:	e7e7      	b.n	20a6e <z_impl_k_msgq_get+0x86>
   20a9e:	bf00      	nop
   20aa0:	20021d74 	.word	0x20021d74

00020aa4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   20aa4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20aa8:	4604      	mov	r4, r0
   20aaa:	4616      	mov	r6, r2
   20aac:	461f      	mov	r7, r3
	__asm__ volatile(
   20aae:	f04f 0320 	mov.w	r3, #32
   20ab2:	f3ef 8811 	mrs	r8, BASEPRI
   20ab6:	f383 8811 	msr	BASEPRI, r3
   20aba:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   20abe:	68c3      	ldr	r3, [r0, #12]
   20ac0:	4a32      	ldr	r2, [pc, #200]	; (20b8c <z_impl_k_mutex_lock+0xe8>)
   20ac2:	b16b      	cbz	r3, 20ae0 <z_impl_k_mutex_lock+0x3c>
   20ac4:	6880      	ldr	r0, [r0, #8]
   20ac6:	6891      	ldr	r1, [r2, #8]
   20ac8:	4288      	cmp	r0, r1
   20aca:	d019      	beq.n	20b00 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   20acc:	ea56 0307 	orrs.w	r3, r6, r7
   20ad0:	d118      	bne.n	20b04 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   20ad2:	f388 8811 	msr	BASEPRI, r8
   20ad6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   20ada:	f06f 000f 	mvn.w	r0, #15
   20ade:	e00c      	b.n	20afa <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   20ae0:	6891      	ldr	r1, [r2, #8]
   20ae2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   20ae6:	3301      	adds	r3, #1
   20ae8:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   20aea:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   20aec:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   20aee:	60a3      	str	r3, [r4, #8]
   20af0:	f388 8811 	msr	BASEPRI, r8
   20af4:	f3bf 8f6f 	isb	sy
		return 0;
   20af8:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   20afa:	b002      	add	sp, #8
   20afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   20b00:	6921      	ldr	r1, [r4, #16]
   20b02:	e7f0      	b.n	20ae6 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   20b04:	f990 300e 	ldrsb.w	r3, [r0, #14]
   20b08:	f991 100e 	ldrsb.w	r1, [r1, #14]
   20b0c:	4299      	cmp	r1, r3
   20b0e:	bfa8      	it	ge
   20b10:	4619      	movge	r1, r3
   20b12:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   20b16:	428b      	cmp	r3, r1
   20b18:	dd2c      	ble.n	20b74 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   20b1a:	f000 fb4d 	bl	211b8 <z_set_prio>
   20b1e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   20b20:	4622      	mov	r2, r4
   20b22:	4641      	mov	r1, r8
   20b24:	e9cd 6700 	strd	r6, r7, [sp]
   20b28:	4819      	ldr	r0, [pc, #100]	; (20b90 <z_impl_k_mutex_lock+0xec>)
   20b2a:	f000 fb03 	bl	21134 <z_pend_curr>
	if (got_mutex == 0) {
   20b2e:	2800      	cmp	r0, #0
   20b30:	d0e3      	beq.n	20afa <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   20b32:	f04f 0320 	mov.w	r3, #32
   20b36:	f3ef 8611 	mrs	r6, BASEPRI
   20b3a:	f383 8811 	msr	BASEPRI, r3
   20b3e:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   20b42:	6823      	ldr	r3, [r4, #0]
   20b44:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20b46:	42a3      	cmp	r3, r4
   20b48:	d007      	beq.n	20b5a <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   20b4a:	b133      	cbz	r3, 20b5a <z_impl_k_mutex_lock+0xb6>
   20b4c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   20b50:	4299      	cmp	r1, r3
   20b52:	bfa8      	it	ge
   20b54:	4619      	movge	r1, r3
   20b56:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   20b5a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   20b5c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   20b60:	4299      	cmp	r1, r3
   20b62:	d109      	bne.n	20b78 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   20b64:	b16d      	cbz	r5, 20b82 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   20b66:	4631      	mov	r1, r6
   20b68:	4809      	ldr	r0, [pc, #36]	; (20b90 <z_impl_k_mutex_lock+0xec>)
   20b6a:	f000 f8cf 	bl	20d0c <z_reschedule>
	return -EAGAIN;
   20b6e:	f06f 000a 	mvn.w	r0, #10
   20b72:	e7c2      	b.n	20afa <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   20b74:	2500      	movs	r5, #0
   20b76:	e7d3      	b.n	20b20 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   20b78:	f000 fb1e 	bl	211b8 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   20b7c:	2800      	cmp	r0, #0
   20b7e:	d1f2      	bne.n	20b66 <z_impl_k_mutex_lock+0xc2>
   20b80:	e7f0      	b.n	20b64 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   20b82:	f386 8811 	msr	BASEPRI, r6
   20b86:	f3bf 8f6f 	isb	sy
   20b8a:	e7f0      	b.n	20b6e <z_impl_k_mutex_lock+0xca>
   20b8c:	20021d74 	.word	0x20021d74
   20b90:	2002501e 	.word	0x2002501e

00020b94 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   20b94:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   20b96:	6883      	ldr	r3, [r0, #8]
{
   20b98:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   20b9a:	2b00      	cmp	r3, #0
   20b9c:	d036      	beq.n	20c0c <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   20b9e:	4a1e      	ldr	r2, [pc, #120]	; (20c18 <z_impl_k_mutex_unlock+0x84>)
   20ba0:	6892      	ldr	r2, [r2, #8]
   20ba2:	4293      	cmp	r3, r2
   20ba4:	d135      	bne.n	20c12 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   20ba6:	7bda      	ldrb	r2, [r3, #15]
   20ba8:	3a01      	subs	r2, #1
   20baa:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   20bac:	68c3      	ldr	r3, [r0, #12]
   20bae:	2b01      	cmp	r3, #1
   20bb0:	d005      	beq.n	20bbe <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   20bb2:	3b01      	subs	r3, #1
   20bb4:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   20bb6:	f000 f909 	bl	20dcc <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   20bba:	2000      	movs	r0, #0
}
   20bbc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   20bbe:	f04f 0320 	mov.w	r3, #32
   20bc2:	f3ef 8511 	mrs	r5, BASEPRI
   20bc6:	f383 8811 	msr	BASEPRI, r3
   20bca:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   20bce:	6901      	ldr	r1, [r0, #16]
   20bd0:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   20bd2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   20bd6:	4299      	cmp	r1, r3
   20bd8:	d001      	beq.n	20bde <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   20bda:	f000 faed 	bl	211b8 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   20bde:	4620      	mov	r0, r4
   20be0:	f00a f9f3 	bl	2afca <z_unpend_first_thread>
	mutex->owner = new_owner;
   20be4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   20be6:	b158      	cbz	r0, 20c00 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   20be8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   20bec:	6122      	str	r2, [r4, #16]
   20bee:	2200      	movs	r2, #0
   20bf0:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   20bf2:	f00a f992 	bl	2af1a <z_ready_thread>
		z_reschedule(&lock, key);
   20bf6:	4629      	mov	r1, r5
   20bf8:	4808      	ldr	r0, [pc, #32]	; (20c1c <z_impl_k_mutex_unlock+0x88>)
   20bfa:	f000 f887 	bl	20d0c <z_reschedule>
   20bfe:	e7da      	b.n	20bb6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   20c00:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   20c02:	f385 8811 	msr	BASEPRI, r5
   20c06:	f3bf 8f6f 	isb	sy
   20c0a:	e7d4      	b.n	20bb6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   20c0c:	f06f 0015 	mvn.w	r0, #21
   20c10:	e7d4      	b.n	20bbc <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   20c12:	f04f 30ff 	mov.w	r0, #4294967295
   20c16:	e7d1      	b.n	20bbc <z_impl_k_mutex_unlock+0x28>
   20c18:	20021d74 	.word	0x20021d74
   20c1c:	2002501e 	.word	0x2002501e

00020c20 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   20c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20c22:	4616      	mov	r6, r2
   20c24:	461f      	mov	r7, r3
	__asm__ volatile(
   20c26:	f04f 0320 	mov.w	r3, #32
   20c2a:	f3ef 8511 	mrs	r5, BASEPRI
   20c2e:	f383 8811 	msr	BASEPRI, r3
   20c32:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   20c36:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   20c38:	b19c      	cbz	r4, 20c62 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20c3a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20c3c:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20c3e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20c42:	4294      	cmp	r4, r2
	list->head = node;
   20c44:	6003      	str	r3, [r0, #0]
	list->tail = node;
   20c46:	bf08      	it	eq
   20c48:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   20c4a:	2101      	movs	r1, #1
   20c4c:	4620      	mov	r0, r4
   20c4e:	f00a f8e0 	bl	2ae12 <z_queue_node_peek>
   20c52:	4604      	mov	r4, r0
	__asm__ volatile(
   20c54:	f385 8811 	msr	BASEPRI, r5
   20c58:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   20c5c:	4620      	mov	r0, r4
   20c5e:	b003      	add	sp, #12
   20c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20c62:	ea56 0307 	orrs.w	r3, r6, r7
   20c66:	d0f5      	beq.n	20c54 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20c68:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   20c6c:	4629      	mov	r1, r5
   20c6e:	4610      	mov	r0, r2
   20c70:	e9cd 6700 	strd	r6, r7, [sp]
   20c74:	f000 fa5e 	bl	21134 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   20c78:	2800      	cmp	r0, #0
   20c7a:	d1ef      	bne.n	20c5c <z_impl_k_queue_get+0x3c>
   20c7c:	4b01      	ldr	r3, [pc, #4]	; (20c84 <z_impl_k_queue_get+0x64>)
   20c7e:	689b      	ldr	r3, [r3, #8]
   20c80:	695c      	ldr	r4, [r3, #20]
   20c82:	e7eb      	b.n	20c5c <z_impl_k_queue_get+0x3c>
   20c84:	20021d74 	.word	0x20021d74

00020c88 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   20c88:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   20c8a:	4c08      	ldr	r4, [pc, #32]	; (20cac <z_reset_time_slice+0x24>)
   20c8c:	6823      	ldr	r3, [r4, #0]
   20c8e:	b15b      	cbz	r3, 20ca8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   20c90:	f7f2 fc66 	bl	13560 <z_clock_elapsed>
   20c94:	6822      	ldr	r2, [r4, #0]
   20c96:	4906      	ldr	r1, [pc, #24]	; (20cb0 <z_reset_time_slice+0x28>)
   20c98:	4410      	add	r0, r2
   20c9a:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
   20c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   20ca0:	2100      	movs	r1, #0
   20ca2:	4610      	mov	r0, r2
   20ca4:	f00a ba6d 	b.w	2b182 <z_set_timeout_expiry>
}
   20ca8:	bd10      	pop	{r4, pc}
   20caa:	bf00      	nop
   20cac:	20021db0 	.word	0x20021db0
   20cb0:	20021d74 	.word	0x20021d74

00020cb4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   20cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20cb6:	460c      	mov	r4, r1
	__asm__ volatile(
   20cb8:	f04f 0320 	mov.w	r3, #32
   20cbc:	f3ef 8511 	mrs	r5, BASEPRI
   20cc0:	f383 8811 	msr	BASEPRI, r3
   20cc4:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   20cc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   20ccc:	f240 36e7 	movw	r6, #999	; 0x3e7
   20cd0:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   20cd2:	2200      	movs	r2, #0
   20cd4:	fbe1 6700 	umlal	r6, r7, r1, r0
   20cd8:	4b09      	ldr	r3, [pc, #36]	; (20d00 <k_sched_time_slice_set+0x4c>)
   20cda:	4630      	mov	r0, r6
   20cdc:	611a      	str	r2, [r3, #16]
   20cde:	4639      	mov	r1, r7
   20ce0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20ce4:	2300      	movs	r3, #0
   20ce6:	f7eb fdb7 	bl	c858 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   20cea:	4b06      	ldr	r3, [pc, #24]	; (20d04 <k_sched_time_slice_set+0x50>)
   20cec:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   20cee:	4b06      	ldr	r3, [pc, #24]	; (20d08 <k_sched_time_slice_set+0x54>)
   20cf0:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   20cf2:	f7ff ffc9 	bl	20c88 <z_reset_time_slice>
	__asm__ volatile(
   20cf6:	f385 8811 	msr	BASEPRI, r5
   20cfa:	f3bf 8f6f 	isb	sy
	}
}
   20cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20d00:	20021d74 	.word	0x20021d74
   20d04:	20021db0 	.word	0x20021db0
   20d08:	20021dac 	.word	0x20021dac

00020d0c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   20d0c:	b949      	cbnz	r1, 20d22 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   20d0e:	f3ef 8005 	mrs	r0, IPSR
   20d12:	b930      	cbnz	r0, 20d22 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   20d14:	4b05      	ldr	r3, [pc, #20]	; (20d2c <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   20d16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   20d18:	689b      	ldr	r3, [r3, #8]
   20d1a:	429a      	cmp	r2, r3
   20d1c:	d001      	beq.n	20d22 <z_reschedule+0x16>
	ret = arch_swap(key);
   20d1e:	f7f2 bc53 	b.w	135c8 <arch_swap>
   20d22:	f381 8811 	msr	BASEPRI, r1
   20d26:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   20d2a:	4770      	bx	lr
   20d2c:	20021d74 	.word	0x20021d74

00020d30 <k_sched_lock>:
	__asm__ volatile(
   20d30:	f04f 0320 	mov.w	r3, #32
   20d34:	f3ef 8111 	mrs	r1, BASEPRI
   20d38:	f383 8811 	msr	BASEPRI, r3
   20d3c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   20d40:	4b04      	ldr	r3, [pc, #16]	; (20d54 <k_sched_lock+0x24>)
   20d42:	689a      	ldr	r2, [r3, #8]
   20d44:	7bd3      	ldrb	r3, [r2, #15]
   20d46:	3b01      	subs	r3, #1
   20d48:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   20d4a:	f381 8811 	msr	BASEPRI, r1
   20d4e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   20d52:	4770      	bx	lr
   20d54:	20021d74 	.word	0x20021d74

00020d58 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   20d58:	4b09      	ldr	r3, [pc, #36]	; (20d80 <z_priq_dumb_remove+0x28>)
   20d5a:	f103 0228 	add.w	r2, r3, #40	; 0x28
   20d5e:	4282      	cmp	r2, r0
   20d60:	d105      	bne.n	20d6e <z_priq_dumb_remove+0x16>
   20d62:	689b      	ldr	r3, [r3, #8]
   20d64:	428b      	cmp	r3, r1
   20d66:	d102      	bne.n	20d6e <z_priq_dumb_remove+0x16>
   20d68:	7b4b      	ldrb	r3, [r1, #13]
   20d6a:	06db      	lsls	r3, r3, #27
   20d6c:	d106      	bne.n	20d7c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   20d6e:	e9d1 3200 	ldrd	r3, r2, [r1]
   20d72:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   20d74:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20d76:	2300      	movs	r3, #0
	node->prev = NULL;
   20d78:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   20d7c:	4770      	bx	lr
   20d7e:	bf00      	nop
   20d80:	20021d74 	.word	0x20021d74

00020d84 <update_cache>:
{
   20d84:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   20d86:	4c10      	ldr	r4, [pc, #64]	; (20dc8 <update_cache+0x44>)
{
   20d88:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   20d8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   20d8e:	f00a f8be 	bl	2af0e <z_priq_dumb_best>
   20d92:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   20d94:	68a3      	ldr	r3, [r4, #8]
   20d96:	7b59      	ldrb	r1, [r3, #13]
   20d98:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   20d9a:	bf44      	itt	mi
   20d9c:	f041 0108 	orrmi.w	r1, r1, #8
   20da0:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   20da2:	b905      	cbnz	r5, 20da6 <update_cache+0x22>
   20da4:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   20da6:	b94e      	cbnz	r6, 20dbc <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   20da8:	7b5a      	ldrb	r2, [r3, #13]
   20daa:	06d2      	lsls	r2, r2, #27
   20dac:	d106      	bne.n	20dbc <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   20dae:	69aa      	ldr	r2, [r5, #24]
   20db0:	b922      	cbnz	r2, 20dbc <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   20db2:	89da      	ldrh	r2, [r3, #14]
   20db4:	2a7f      	cmp	r2, #127	; 0x7f
   20db6:	d901      	bls.n	20dbc <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   20db8:	6263      	str	r3, [r4, #36]	; 0x24
}
   20dba:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   20dbc:	42ab      	cmp	r3, r5
   20dbe:	d001      	beq.n	20dc4 <update_cache+0x40>
			z_reset_time_slice();
   20dc0:	f7ff ff62 	bl	20c88 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   20dc4:	6265      	str	r5, [r4, #36]	; 0x24
}
   20dc6:	e7f8      	b.n	20dba <update_cache+0x36>
   20dc8:	20021d74 	.word	0x20021d74

00020dcc <k_sched_unlock>:
{
   20dcc:	b510      	push	{r4, lr}
	__asm__ volatile(
   20dce:	f04f 0320 	mov.w	r3, #32
   20dd2:	f3ef 8411 	mrs	r4, BASEPRI
   20dd6:	f383 8811 	msr	BASEPRI, r3
   20dda:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   20dde:	4b08      	ldr	r3, [pc, #32]	; (20e00 <k_sched_unlock+0x34>)
		update_cache(0);
   20de0:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   20de2:	689a      	ldr	r2, [r3, #8]
   20de4:	7bd3      	ldrb	r3, [r2, #15]
   20de6:	3301      	adds	r3, #1
   20de8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   20dea:	f7ff ffcb 	bl	20d84 <update_cache>
	__asm__ volatile(
   20dee:	f384 8811 	msr	BASEPRI, r4
   20df2:	f3bf 8f6f 	isb	sy
}
   20df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   20dfa:	f00a b85c 	b.w	2aeb6 <z_reschedule_unlocked>
   20dfe:	bf00      	nop
   20e00:	20021d74 	.word	0x20021d74

00020e04 <ready_thread>:
{
   20e04:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   20e06:	7b43      	ldrb	r3, [r0, #13]
   20e08:	06db      	lsls	r3, r3, #27
   20e0a:	d127      	bne.n	20e5c <ready_thread+0x58>
	if (z_is_thread_ready(thread)) {
   20e0c:	6983      	ldr	r3, [r0, #24]
   20e0e:	bb2b      	cbnz	r3, 20e5c <ready_thread+0x58>
	return list->head == list;
   20e10:	4a13      	ldr	r2, [pc, #76]	; (20e60 <ready_thread+0x5c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20e12:	f102 0128 	add.w	r1, r2, #40	; 0x28
   20e16:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
   20e1a:	428b      	cmp	r3, r1
   20e1c:	d018      	beq.n	20e50 <ready_thread+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20e1e:	b1bb      	cbz	r3, 20e50 <ready_thread+0x4c>
	if (thread_1->base.prio < thread_2->base.prio) {
   20e20:	f990 500e 	ldrsb.w	r5, [r0, #14]
   20e24:	f993 600e 	ldrsb.w	r6, [r3, #14]
   20e28:	42ae      	cmp	r6, r5
   20e2a:	dd0c      	ble.n	20e46 <ready_thread+0x42>
	node->prev = successor->prev;
   20e2c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   20e2e:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   20e32:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   20e34:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   20e36:	7b43      	ldrb	r3, [r0, #13]
   20e38:	f063 037f 	orn	r3, r3, #127	; 0x7f
   20e3c:	7343      	strb	r3, [r0, #13]
}
   20e3e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   20e40:	2000      	movs	r0, #0
   20e42:	f7ff bf9f 	b.w	20d84 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   20e46:	429c      	cmp	r4, r3
   20e48:	d002      	beq.n	20e50 <ready_thread+0x4c>
   20e4a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20e4c:	2b00      	cmp	r3, #0
   20e4e:	d1e9      	bne.n	20e24 <ready_thread+0x20>
	node->prev = list->tail;
   20e50:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   20e54:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   20e56:	6018      	str	r0, [r3, #0]
	list->tail = node;
   20e58:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   20e5a:	e7ec      	b.n	20e36 <ready_thread+0x32>
}
   20e5c:	bc70      	pop	{r4, r5, r6}
   20e5e:	4770      	bx	lr
   20e60:	20021d74 	.word	0x20021d74

00020e64 <z_sched_start>:
{
   20e64:	b510      	push	{r4, lr}
	__asm__ volatile(
   20e66:	f04f 0220 	mov.w	r2, #32
   20e6a:	f3ef 8411 	mrs	r4, BASEPRI
   20e6e:	f382 8811 	msr	BASEPRI, r2
   20e72:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   20e76:	7b42      	ldrb	r2, [r0, #13]
   20e78:	0751      	lsls	r1, r2, #29
   20e7a:	d404      	bmi.n	20e86 <z_sched_start+0x22>
	__asm__ volatile(
   20e7c:	f384 8811 	msr	BASEPRI, r4
   20e80:	f3bf 8f6f 	isb	sy
}
   20e84:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20e86:	f022 0204 	bic.w	r2, r2, #4
   20e8a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   20e8c:	f7ff ffba 	bl	20e04 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   20e90:	4621      	mov	r1, r4
}
   20e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   20e96:	4801      	ldr	r0, [pc, #4]	; (20e9c <z_sched_start+0x38>)
   20e98:	f7ff bf38 	b.w	20d0c <z_reschedule>
   20e9c:	2002501e 	.word	0x2002501e

00020ea0 <move_thread_to_end_of_prio_q>:
{
   20ea0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   20ea2:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   20ea6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   20ea8:	2b00      	cmp	r3, #0
   20eaa:	da02      	bge.n	20eb2 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   20eac:	4816      	ldr	r0, [pc, #88]	; (20f08 <move_thread_to_end_of_prio_q+0x68>)
   20eae:	f7ff ff53 	bl	20d58 <z_priq_dumb_remove>
	return list->head == list;
   20eb2:	4a16      	ldr	r2, [pc, #88]	; (20f0c <move_thread_to_end_of_prio_q+0x6c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20eb4:	f102 0028 	add.w	r0, r2, #40	; 0x28
   20eb8:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
   20ebc:	4283      	cmp	r3, r0
   20ebe:	d01c      	beq.n	20efa <move_thread_to_end_of_prio_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20ec0:	b1db      	cbz	r3, 20efa <move_thread_to_end_of_prio_q+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   20ec2:	f991 500e 	ldrsb.w	r5, [r1, #14]
   20ec6:	f993 600e 	ldrsb.w	r6, [r3, #14]
   20eca:	42ae      	cmp	r6, r5
   20ecc:	dd10      	ble.n	20ef0 <move_thread_to_end_of_prio_q+0x50>
	node->prev = successor->prev;
   20ece:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   20ed0:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   20ed4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   20ed6:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   20ed8:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   20eda:	6890      	ldr	r0, [r2, #8]
   20edc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   20ee0:	734b      	strb	r3, [r1, #13]
   20ee2:	1a43      	subs	r3, r0, r1
   20ee4:	4258      	negs	r0, r3
   20ee6:	4158      	adcs	r0, r3
}
   20ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   20eec:	f7ff bf4a 	b.w	20d84 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   20ef0:	429c      	cmp	r4, r3
   20ef2:	d002      	beq.n	20efa <move_thread_to_end_of_prio_q+0x5a>
   20ef4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20ef6:	2b00      	cmp	r3, #0
   20ef8:	d1e5      	bne.n	20ec6 <move_thread_to_end_of_prio_q+0x26>
	node->prev = list->tail;
   20efa:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   20efe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   20f00:	6019      	str	r1, [r3, #0]
	list->tail = node;
   20f02:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   20f04:	e7e8      	b.n	20ed8 <move_thread_to_end_of_prio_q+0x38>
   20f06:	bf00      	nop
   20f08:	20021d9c 	.word	0x20021d9c
   20f0c:	20021d74 	.word	0x20021d74

00020f10 <z_time_slice>:
{
   20f10:	4601      	mov	r1, r0
   20f12:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   20f14:	f04f 0320 	mov.w	r3, #32
   20f18:	f3ef 8411 	mrs	r4, BASEPRI
   20f1c:	f383 8811 	msr	BASEPRI, r3
   20f20:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   20f24:	4b16      	ldr	r3, [pc, #88]	; (20f80 <z_time_slice+0x70>)
   20f26:	4a17      	ldr	r2, [pc, #92]	; (20f84 <z_time_slice+0x74>)
   20f28:	6898      	ldr	r0, [r3, #8]
   20f2a:	6815      	ldr	r5, [r2, #0]
   20f2c:	42a8      	cmp	r0, r5
   20f2e:	461d      	mov	r5, r3
   20f30:	d106      	bne.n	20f40 <z_time_slice+0x30>
			z_reset_time_slice();
   20f32:	f7ff fea9 	bl	20c88 <z_reset_time_slice>
	__asm__ volatile(
   20f36:	f384 8811 	msr	BASEPRI, r4
   20f3a:	f3bf 8f6f 	isb	sy
}
   20f3e:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   20f40:	2600      	movs	r6, #0
   20f42:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   20f44:	4a10      	ldr	r2, [pc, #64]	; (20f88 <z_time_slice+0x78>)
   20f46:	6812      	ldr	r2, [r2, #0]
   20f48:	b1ba      	cbz	r2, 20f7a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   20f4a:	89c2      	ldrh	r2, [r0, #14]
   20f4c:	2a7f      	cmp	r2, #127	; 0x7f
   20f4e:	d814      	bhi.n	20f7a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   20f50:	7b42      	ldrb	r2, [r0, #13]
   20f52:	06d2      	lsls	r2, r2, #27
   20f54:	d111      	bne.n	20f7a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   20f56:	4a0d      	ldr	r2, [pc, #52]	; (20f8c <z_time_slice+0x7c>)
   20f58:	f990 600e 	ldrsb.w	r6, [r0, #14]
   20f5c:	6812      	ldr	r2, [r2, #0]
   20f5e:	4296      	cmp	r6, r2
   20f60:	db0b      	blt.n	20f7a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   20f62:	4a0b      	ldr	r2, [pc, #44]	; (20f90 <z_time_slice+0x80>)
   20f64:	4290      	cmp	r0, r2
   20f66:	d008      	beq.n	20f7a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   20f68:	691a      	ldr	r2, [r3, #16]
   20f6a:	428a      	cmp	r2, r1
   20f6c:	dc02      	bgt.n	20f74 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   20f6e:	f7ff ff97 	bl	20ea0 <move_thread_to_end_of_prio_q>
   20f72:	e7de      	b.n	20f32 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   20f74:	1a52      	subs	r2, r2, r1
   20f76:	611a      	str	r2, [r3, #16]
   20f78:	e7dd      	b.n	20f36 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   20f7a:	2300      	movs	r3, #0
   20f7c:	612b      	str	r3, [r5, #16]
   20f7e:	e7da      	b.n	20f36 <z_time_slice+0x26>
   20f80:	20021d74 	.word	0x20021d74
   20f84:	20021da8 	.word	0x20021da8
   20f88:	20021db0 	.word	0x20021db0
   20f8c:	20021dac 	.word	0x20021dac
   20f90:	20021198 	.word	0x20021198

00020f94 <z_impl_k_thread_suspend>:
{
   20f94:	b570      	push	{r4, r5, r6, lr}
   20f96:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   20f98:	3018      	adds	r0, #24
   20f9a:	f00a f8cc 	bl	2b136 <z_abort_timeout>
	__asm__ volatile(
   20f9e:	f04f 0320 	mov.w	r3, #32
   20fa2:	f3ef 8611 	mrs	r6, BASEPRI
   20fa6:	f383 8811 	msr	BASEPRI, r3
   20faa:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   20fae:	f994 300d 	ldrsb.w	r3, [r4, #13]
   20fb2:	2b00      	cmp	r3, #0
   20fb4:	da07      	bge.n	20fc6 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   20fb6:	4621      	mov	r1, r4
   20fb8:	480e      	ldr	r0, [pc, #56]	; (20ff4 <z_impl_k_thread_suspend+0x60>)
   20fba:	f7ff fecd 	bl	20d58 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   20fbe:	7b63      	ldrb	r3, [r4, #13]
   20fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20fc4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   20fc6:	4d0c      	ldr	r5, [pc, #48]	; (20ff8 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   20fc8:	7b63      	ldrb	r3, [r4, #13]
   20fca:	68a8      	ldr	r0, [r5, #8]
   20fcc:	f043 0310 	orr.w	r3, r3, #16
   20fd0:	7363      	strb	r3, [r4, #13]
   20fd2:	1b03      	subs	r3, r0, r4
   20fd4:	4258      	negs	r0, r3
   20fd6:	4158      	adcs	r0, r3
   20fd8:	f7ff fed4 	bl	20d84 <update_cache>
	__asm__ volatile(
   20fdc:	f386 8811 	msr	BASEPRI, r6
   20fe0:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   20fe4:	68ab      	ldr	r3, [r5, #8]
   20fe6:	42a3      	cmp	r3, r4
   20fe8:	d103      	bne.n	20ff2 <z_impl_k_thread_suspend+0x5e>
}
   20fea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   20fee:	f009 bf62 	b.w	2aeb6 <z_reschedule_unlocked>
}
   20ff2:	bd70      	pop	{r4, r5, r6, pc}
   20ff4:	20021d9c 	.word	0x20021d9c
   20ff8:	20021d74 	.word	0x20021d74

00020ffc <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   20ffc:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
   20ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21002:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   21004:	b103      	cbz	r3, 21008 <z_thread_single_abort+0xc>
		thread->fn_abort();
   21006:	4798      	blx	r3
   21008:	f104 0018 	add.w	r0, r4, #24
   2100c:	f00a f893 	bl	2b136 <z_abort_timeout>
	__asm__ volatile(
   21010:	f04f 0320 	mov.w	r3, #32
   21014:	f3ef 8611 	mrs	r6, BASEPRI
   21018:	f383 8811 	msr	BASEPRI, r3
   2101c:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   21020:	7b63      	ldrb	r3, [r4, #13]
   21022:	06d8      	lsls	r0, r3, #27
   21024:	d123      	bne.n	2106e <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   21026:	69a2      	ldr	r2, [r4, #24]
   21028:	bb0a      	cbnz	r2, 2106e <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   2102a:	0619      	lsls	r1, r3, #24
   2102c:	d507      	bpl.n	2103e <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   2102e:	4621      	mov	r1, r4
   21030:	481e      	ldr	r0, [pc, #120]	; (210ac <z_thread_single_abort+0xb0>)
   21032:	f7ff fe91 	bl	20d58 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   21036:	7b63      	ldrb	r3, [r4, #13]
   21038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2103c:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   2103e:	4b1c      	ldr	r3, [pc, #112]	; (210b0 <z_thread_single_abort+0xb4>)
   21040:	6898      	ldr	r0, [r3, #8]
   21042:	1b02      	subs	r2, r0, r4
   21044:	4250      	negs	r0, r2
   21046:	4150      	adcs	r0, r2
   21048:	f7ff fe9c 	bl	20d84 <update_cache>
			waiter->base.pended_on = NULL;
   2104c:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   2104e:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   21050:	f104 0830 	add.w	r8, r4, #48	; 0x30
   21054:	f043 0308 	orr.w	r3, r3, #8
   21058:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   2105a:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2105c:	4545      	cmp	r5, r8
   2105e:	d000      	beq.n	21062 <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   21060:	b995      	cbnz	r5, 21088 <z_thread_single_abort+0x8c>
	__asm__ volatile(
   21062:	f386 8811 	msr	BASEPRI, r6
   21066:	f3bf 8f6f 	isb	sy
}
   2106a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   2106e:	079b      	lsls	r3, r3, #30
   21070:	d5ec      	bpl.n	2104c <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   21072:	4621      	mov	r1, r4
   21074:	68a0      	ldr	r0, [r4, #8]
   21076:	f7ff fe6f 	bl	20d58 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2107a:	7b63      	ldrb	r3, [r4, #13]
   2107c:	f023 0302 	bic.w	r3, r3, #2
   21080:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   21082:	2300      	movs	r3, #0
   21084:	60a3      	str	r3, [r4, #8]
   21086:	e7e1      	b.n	2104c <z_thread_single_abort+0x50>
   21088:	f105 0018 	add.w	r0, r5, #24
   2108c:	f00a f853 	bl	2b136 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   21090:	68a8      	ldr	r0, [r5, #8]
   21092:	4629      	mov	r1, r5
   21094:	f7ff fe60 	bl	20d58 <z_priq_dumb_remove>
   21098:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   2109a:	4628      	mov	r0, r5
   2109c:	f023 0302 	bic.w	r3, r3, #2
   210a0:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   210a2:	60af      	str	r7, [r5, #8]
   210a4:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   210a6:	f7ff fead 	bl	20e04 <ready_thread>
   210aa:	e7d6      	b.n	2105a <z_thread_single_abort+0x5e>
   210ac:	20021d9c 	.word	0x20021d9c
   210b0:	20021d74 	.word	0x20021d74

000210b4 <unready_thread>:
{
   210b4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   210b6:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   210ba:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   210bc:	2b00      	cmp	r3, #0
   210be:	da06      	bge.n	210ce <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   210c0:	4807      	ldr	r0, [pc, #28]	; (210e0 <unready_thread+0x2c>)
   210c2:	f7ff fe49 	bl	20d58 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   210c6:	7b4b      	ldrb	r3, [r1, #13]
   210c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   210cc:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   210ce:	4b05      	ldr	r3, [pc, #20]	; (210e4 <unready_thread+0x30>)
   210d0:	6898      	ldr	r0, [r3, #8]
   210d2:	1a43      	subs	r3, r0, r1
   210d4:	4258      	negs	r0, r3
   210d6:	4158      	adcs	r0, r3
}
   210d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   210dc:	f7ff be52 	b.w	20d84 <update_cache>
   210e0:	20021d9c 	.word	0x20021d9c
   210e4:	20021d74 	.word	0x20021d74

000210e8 <pend>:
{
   210e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   210ec:	4606      	mov	r6, r0
   210ee:	4614      	mov	r4, r2
   210f0:	461d      	mov	r5, r3
	__asm__ volatile(
   210f2:	f04f 0320 	mov.w	r3, #32
   210f6:	f3ef 8711 	mrs	r7, BASEPRI
   210fa:	f383 8811 	msr	BASEPRI, r3
   210fe:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   21102:	f009 ff3a 	bl	2af7a <add_to_waitq_locked>
	__asm__ volatile(
   21106:	f387 8811 	msr	BASEPRI, r7
   2110a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2110e:	1c6b      	adds	r3, r5, #1
   21110:	bf08      	it	eq
   21112:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   21116:	d008      	beq.n	2112a <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   21118:	4622      	mov	r2, r4
   2111a:	462b      	mov	r3, r5
   2111c:	f106 0018 	add.w	r0, r6, #24
   21120:	4903      	ldr	r1, [pc, #12]	; (21130 <pend+0x48>)
}
   21122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21126:	f000 badb 	b.w	216e0 <z_add_timeout>
   2112a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2112e:	bf00      	nop
   21130:	0002af3b 	.word	0x0002af3b

00021134 <z_pend_curr>:
{
   21134:	b510      	push	{r4, lr}
   21136:	460c      	mov	r4, r1
	pending_current = _current;
   21138:	4b06      	ldr	r3, [pc, #24]	; (21154 <z_pend_curr+0x20>)
{
   2113a:	4611      	mov	r1, r2
	pending_current = _current;
   2113c:	6898      	ldr	r0, [r3, #8]
   2113e:	4b06      	ldr	r3, [pc, #24]	; (21158 <z_pend_curr+0x24>)
   21140:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   21142:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21146:	f7ff ffcf 	bl	210e8 <pend>
   2114a:	4620      	mov	r0, r4
}
   2114c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21150:	f7f2 ba3a 	b.w	135c8 <arch_swap>
   21154:	20021d74 	.word	0x20021d74
   21158:	20021da8 	.word	0x20021da8

0002115c <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   2115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2115e:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   21160:	f00a f82a 	bl	2b1b8 <z_tick_get_32>
   21164:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   21166:	f04f 0320 	mov.w	r3, #32
   2116a:	f3ef 8711 	mrs	r7, BASEPRI
   2116e:	f383 8811 	msr	BASEPRI, r3
   21172:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   21176:	4e0d      	ldr	r6, [pc, #52]	; (211ac <z_tick_sleep.part.0+0x50>)
   21178:	4b0d      	ldr	r3, [pc, #52]	; (211b0 <z_tick_sleep.part.0+0x54>)
   2117a:	68b0      	ldr	r0, [r6, #8]
   2117c:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   2117e:	f7ff ff99 	bl	210b4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   21182:	68b0      	ldr	r0, [r6, #8]
   21184:	490b      	ldr	r1, [pc, #44]	; (211b4 <z_tick_sleep.part.0+0x58>)
   21186:	462a      	mov	r2, r5
   21188:	17eb      	asrs	r3, r5, #31
   2118a:	3018      	adds	r0, #24
   2118c:	f000 faa8 	bl	216e0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   21190:	68b2      	ldr	r2, [r6, #8]
   21192:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   21194:	7b53      	ldrb	r3, [r2, #13]
   21196:	f043 0310 	orr.w	r3, r3, #16
   2119a:	7353      	strb	r3, [r2, #13]
   2119c:	f7f2 fa14 	bl	135c8 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   211a0:	f00a f80a 	bl	2b1b8 <z_tick_get_32>
   211a4:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   211a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   211aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   211ac:	20021d74 	.word	0x20021d74
   211b0:	20021da8 	.word	0x20021da8
   211b4:	0002af3b 	.word	0x0002af3b

000211b8 <z_set_prio>:
{
   211b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   211ba:	4604      	mov	r4, r0
   211bc:	f04f 0320 	mov.w	r3, #32
   211c0:	f3ef 8711 	mrs	r7, BASEPRI
   211c4:	f383 8811 	msr	BASEPRI, r3
   211c8:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   211cc:	7b43      	ldrb	r3, [r0, #13]
   211ce:	b24e      	sxtb	r6, r1
   211d0:	06db      	lsls	r3, r3, #27
   211d2:	d12c      	bne.n	2122e <z_set_prio+0x76>
		if (need_sched) {
   211d4:	6983      	ldr	r3, [r0, #24]
   211d6:	bb53      	cbnz	r3, 2122e <z_set_prio+0x76>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   211d8:	4d16      	ldr	r5, [pc, #88]	; (21234 <z_set_prio+0x7c>)
   211da:	4621      	mov	r1, r4
   211dc:	f105 0028 	add.w	r0, r5, #40	; 0x28
   211e0:	f7ff fdba 	bl	20d58 <z_priq_dumb_remove>
	return list->head == list;
   211e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   211e6:	462a      	mov	r2, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
   211e8:	4283      	cmp	r3, r0
				thread->base.prio = prio;
   211ea:	73a6      	strb	r6, [r4, #14]
   211ec:	d018      	beq.n	21220 <z_set_prio+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   211ee:	b1bb      	cbz	r3, 21220 <z_set_prio+0x68>
   211f0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   211f2:	f993 500e 	ldrsb.w	r5, [r3, #14]
   211f6:	42b5      	cmp	r5, r6
   211f8:	dd0d      	ble.n	21216 <z_set_prio+0x5e>
	node->prev = successor->prev;
   211fa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   211fc:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   21200:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21202:	605c      	str	r4, [r3, #4]
			update_cache(1);
   21204:	2001      	movs	r0, #1
   21206:	f7ff fdbd 	bl	20d84 <update_cache>
   2120a:	2001      	movs	r0, #1
	__asm__ volatile(
   2120c:	f387 8811 	msr	BASEPRI, r7
   21210:	f3bf 8f6f 	isb	sy
}
   21214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   21216:	428b      	cmp	r3, r1
   21218:	d002      	beq.n	21220 <z_set_prio+0x68>
   2121a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2121c:	2b00      	cmp	r3, #0
   2121e:	d1e8      	bne.n	211f2 <z_set_prio+0x3a>
	node->prev = list->tail;
   21220:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   21222:	6020      	str	r0, [r4, #0]
	node->prev = list->tail;
   21224:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   21226:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   21228:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2122a:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   2122c:	e7ea      	b.n	21204 <z_set_prio+0x4c>
			thread->base.prio = prio;
   2122e:	2000      	movs	r0, #0
   21230:	73a6      	strb	r6, [r4, #14]
   21232:	e7eb      	b.n	2120c <z_set_prio+0x54>
   21234:	20021d74 	.word	0x20021d74

00021238 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   21238:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   2123a:	4b04      	ldr	r3, [pc, #16]	; (2124c <z_sched_init+0x14>)
   2123c:	4608      	mov	r0, r1
   2123e:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   21242:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   21246:	f7ff bd35 	b.w	20cb4 <k_sched_time_slice_set>
   2124a:	bf00      	nop
   2124c:	20021d74 	.word	0x20021d74

00021250 <z_impl_k_yield>:
{
   21250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   21252:	4c23      	ldr	r4, [pc, #140]	; (212e0 <z_impl_k_yield+0x90>)
   21254:	4b23      	ldr	r3, [pc, #140]	; (212e4 <z_impl_k_yield+0x94>)
   21256:	68a2      	ldr	r2, [r4, #8]
   21258:	429a      	cmp	r2, r3
   2125a:	d028      	beq.n	212ae <z_impl_k_yield+0x5e>
	__asm__ volatile(
   2125c:	f04f 0320 	mov.w	r3, #32
   21260:	f3ef 8511 	mrs	r5, BASEPRI
   21264:	f383 8811 	msr	BASEPRI, r3
   21268:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   2126c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   21270:	68a1      	ldr	r1, [r4, #8]
   21272:	f7ff fd71 	bl	20d58 <z_priq_dumb_remove>
	return list->head == list;
   21276:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   21278:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2127a:	4282      	cmp	r2, r0
   2127c:	d028      	beq.n	212d0 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2127e:	b33a      	cbz	r2, 212d0 <z_impl_k_yield+0x80>
   21280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   21282:	f993 100e 	ldrsb.w	r1, [r3, #14]
   21286:	f992 700e 	ldrsb.w	r7, [r2, #14]
   2128a:	428f      	cmp	r7, r1
   2128c:	dd1b      	ble.n	212c6 <z_impl_k_yield+0x76>
	node->prev = successor->prev;
   2128e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   21290:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   21294:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   21296:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   21298:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   2129a:	2001      	movs	r0, #1
   2129c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   212a0:	735a      	strb	r2, [r3, #13]
   212a2:	f7ff fd6f 	bl	20d84 <update_cache>
	__asm__ volatile(
   212a6:	f385 8811 	msr	BASEPRI, r5
   212aa:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   212ae:	f04f 0320 	mov.w	r3, #32
   212b2:	f3ef 8011 	mrs	r0, BASEPRI
   212b6:	f383 8811 	msr	BASEPRI, r3
   212ba:	f3bf 8f6f 	isb	sy
}
   212be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   212c2:	f7f2 b981 	b.w	135c8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   212c6:	4296      	cmp	r6, r2
   212c8:	d002      	beq.n	212d0 <z_impl_k_yield+0x80>
   212ca:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   212cc:	2a00      	cmp	r2, #0
   212ce:	d1da      	bne.n	21286 <z_impl_k_yield+0x36>
	node->prev = list->tail;
   212d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   212d2:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
   212d4:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   212d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   212d8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   212da:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   212dc:	e7dc      	b.n	21298 <z_impl_k_yield+0x48>
   212de:	bf00      	nop
   212e0:	20021d74 	.word	0x20021d74
   212e4:	20021198 	.word	0x20021198

000212e8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   212e8:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   212ea:	3301      	adds	r3, #1
   212ec:	bf08      	it	eq
   212ee:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   212f2:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   212f4:	d106      	bne.n	21304 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   212f6:	4b0b      	ldr	r3, [pc, #44]	; (21324 <z_impl_k_sleep+0x3c>)
   212f8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   212fa:	f7ff fe4b 	bl	20f94 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   212fe:	f04f 30ff 	mov.w	r0, #4294967295
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   21302:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   21304:	4604      	mov	r4, r0
	if (ticks == 0) {
   21306:	b948      	cbnz	r0, 2131c <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   21308:	f7ff ffa2 	bl	21250 <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   2130c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   21310:	fb84 3400 	smull	r3, r4, r4, r0
   21314:	0bd8      	lsrs	r0, r3, #15
   21316:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   2131a:	e7f2      	b.n	21302 <z_impl_k_sleep+0x1a>
   2131c:	f7ff ff1e 	bl	2115c <z_tick_sleep.part.0>
   21320:	4604      	mov	r4, r0
   21322:	e7f3      	b.n	2130c <z_impl_k_sleep+0x24>
   21324:	20021d74 	.word	0x20021d74

00021328 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   21328:	4b01      	ldr	r3, [pc, #4]	; (21330 <z_impl_k_current_get+0x8>)
   2132a:	6898      	ldr	r0, [r3, #8]
   2132c:	4770      	bx	lr
   2132e:	bf00      	nop
   21330:	20021d74 	.word	0x20021d74

00021334 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   21334:	b538      	push	{r3, r4, r5, lr}
   21336:	4604      	mov	r4, r0
   21338:	f04f 0320 	mov.w	r3, #32
   2133c:	f3ef 8511 	mrs	r5, BASEPRI
   21340:	f383 8811 	msr	BASEPRI, r3
   21344:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   21348:	f009 fe3f 	bl	2afca <z_unpend_first_thread>

	if (thread != NULL) {
   2134c:	b148      	cbz	r0, 21362 <z_impl_k_sem_give+0x2e>
   2134e:	2200      	movs	r2, #0
   21350:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   21352:	f009 fde2 	bl	2af1a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   21356:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   21358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2135c:	4807      	ldr	r0, [pc, #28]	; (2137c <z_impl_k_sem_give+0x48>)
   2135e:	f7ff bcd5 	b.w	20d0c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   21362:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   21366:	429a      	cmp	r2, r3
   21368:	bf18      	it	ne
   2136a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2136c:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2136e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21370:	f104 0010 	add.w	r0, r4, #16
   21374:	f00a f87b 	bl	2b46e <z_handle_obj_poll_events>
}
   21378:	e7ed      	b.n	21356 <z_impl_k_sem_give+0x22>
   2137a:	bf00      	nop
   2137c:	2002501e 	.word	0x2002501e

00021380 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   21380:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21382:	4614      	mov	r4, r2
   21384:	461d      	mov	r5, r3
   21386:	f04f 0320 	mov.w	r3, #32
   2138a:	f3ef 8111 	mrs	r1, BASEPRI
   2138e:	f383 8811 	msr	BASEPRI, r3
   21392:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   21396:	6883      	ldr	r3, [r0, #8]
   21398:	b143      	cbz	r3, 213ac <z_impl_k_sem_take+0x2c>
		sem->count--;
   2139a:	3b01      	subs	r3, #1
   2139c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   2139e:	f381 8811 	msr	BASEPRI, r1
   213a2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   213a6:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   213a8:	b003      	add	sp, #12
   213aa:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   213ac:	ea54 0305 	orrs.w	r3, r4, r5
   213b0:	d106      	bne.n	213c0 <z_impl_k_sem_take+0x40>
   213b2:	f381 8811 	msr	BASEPRI, r1
   213b6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   213ba:	f06f 000f 	mvn.w	r0, #15
   213be:	e7f3      	b.n	213a8 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   213c0:	4602      	mov	r2, r0
   213c2:	e9cd 4500 	strd	r4, r5, [sp]
   213c6:	4802      	ldr	r0, [pc, #8]	; (213d0 <z_impl_k_sem_take+0x50>)
   213c8:	f7ff feb4 	bl	21134 <z_pend_curr>
	return ret;
   213cc:	e7ec      	b.n	213a8 <z_impl_k_sem_take+0x28>
   213ce:	bf00      	nop
   213d0:	2002501e 	.word	0x2002501e

000213d4 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   213d4:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   213d6:	4c08      	ldr	r4, [pc, #32]	; (213f8 <k_sys_work_q_init+0x24>)
   213d8:	f04f 33ff 	mov.w	r3, #4294967295
   213dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   213e0:	4620      	mov	r0, r4
   213e2:	4906      	ldr	r1, [pc, #24]	; (213fc <k_sys_work_q_init+0x28>)
   213e4:	f000 f8c8 	bl	21578 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   213e8:	4905      	ldr	r1, [pc, #20]	; (21400 <k_sys_work_q_init+0x2c>)
   213ea:	f104 0018 	add.w	r0, r4, #24
   213ee:	f009 fe39 	bl	2b064 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   213f2:	2000      	movs	r0, #0
   213f4:	bd10      	pop	{r4, pc}
   213f6:	bf00      	nop
   213f8:	20021328 	.word	0x20021328
   213fc:	200289f0 	.word	0x200289f0
   21400:	0002e168 	.word	0x0002e168

00021404 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   21404:	e92d 41b0 	stmdb	sp!, {r4, r5, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   21408:	f100 0530 	add.w	r5, r0, #48	; 0x30
   2140c:	b085      	sub	sp, #20
	list->tail = (sys_dnode_t *)list;
   2140e:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   21412:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   21414:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
   21416:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   21418:	2504      	movs	r5, #4
   2141a:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
   2141c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2141e:	3207      	adds	r2, #7
	thread_base->prio = priority;
   21420:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
   21422:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21424:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   21428:	e9c0 121a 	strd	r1, r2, [r0, #104]	; 0x68
	stack_ptr = (char *)stack + stack_obj_size;
   2142c:	eb01 0802 	add.w	r8, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	node->prev = NULL;
   21432:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->sched_locked = 0U;
   21436:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   21438:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2143a:	9202      	str	r2, [sp, #8]
   2143c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2143e:	9201      	str	r2, [sp, #4]
   21440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21442:	9200      	str	r2, [sp, #0]
   21444:	4642      	mov	r2, r8
   21446:	f7f2 f983 	bl	13750 <arch_new_thread>
	if (!_current) {
   2144a:	4b05      	ldr	r3, [pc, #20]	; (21460 <z_setup_new_thread+0x5c>)
	new_thread->fn_abort = NULL;
   2144c:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   21450:	689b      	ldr	r3, [r3, #8]
   21452:	b103      	cbz	r3, 21456 <z_setup_new_thread+0x52>
	new_thread->resource_pool = _current->resource_pool;
   21454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   21456:	4640      	mov	r0, r8
   21458:	6763      	str	r3, [r4, #116]	; 0x74
   2145a:	b005      	add	sp, #20
   2145c:	e8bd 81b0 	ldmia.w	sp!, {r4, r5, r7, r8, pc}
   21460:	20021d74 	.word	0x20021d74

00021464 <z_impl_k_thread_create>:
{
   21464:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21466:	2500      	movs	r5, #0
{
   21468:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2146a:	9505      	str	r5, [sp, #20]
   2146c:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   2146e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21472:	9504      	str	r5, [sp, #16]
   21474:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   21476:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21478:	9503      	str	r5, [sp, #12]
   2147a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2147c:	9502      	str	r5, [sp, #8]
   2147e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   21480:	9501      	str	r5, [sp, #4]
   21482:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   21484:	9500      	str	r5, [sp, #0]
   21486:	f7ff ffbd 	bl	21404 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2148a:	1c7b      	adds	r3, r7, #1
   2148c:	bf08      	it	eq
   2148e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   21492:	d005      	beq.n	214a0 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21494:	ea56 0307 	orrs.w	r3, r6, r7
   21498:	d105      	bne.n	214a6 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   2149a:	4620      	mov	r0, r4
   2149c:	f7ff fce2 	bl	20e64 <z_sched_start>
}
   214a0:	4620      	mov	r0, r4
   214a2:	b007      	add	sp, #28
   214a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   214a6:	4632      	mov	r2, r6
   214a8:	463b      	mov	r3, r7
   214aa:	4903      	ldr	r1, [pc, #12]	; (214b8 <z_impl_k_thread_create+0x54>)
   214ac:	f104 0018 	add.w	r0, r4, #24
   214b0:	f000 f916 	bl	216e0 <z_add_timeout>
   214b4:	e7f4      	b.n	214a0 <z_impl_k_thread_create+0x3c>
   214b6:	bf00      	nop
   214b8:	0002af3b 	.word	0x0002af3b

000214bc <z_init_static_threads>:
{
   214bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   214c0:	4e2a      	ldr	r6, [pc, #168]	; (2156c <z_init_static_threads+0xb0>)
   214c2:	4d2b      	ldr	r5, [pc, #172]	; (21570 <z_init_static_threads+0xb4>)
   214c4:	46b0      	mov	r8, r6
{
   214c6:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   214c8:	42b5      	cmp	r5, r6
   214ca:	f105 0430 	add.w	r4, r5, #48	; 0x30
   214ce:	d310      	bcc.n	214f2 <z_init_static_threads+0x36>
	k_sched_lock();
   214d0:	f7ff fc2e 	bl	20d30 <k_sched_lock>
   214d4:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   214d8:	f240 36e7 	movw	r6, #999	; 0x3e7
   214dc:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   214de:	4c24      	ldr	r4, [pc, #144]	; (21570 <z_init_static_threads+0xb4>)
   214e0:	f8df a090 	ldr.w	sl, [pc, #144]	; 21574 <z_init_static_threads+0xb8>
   214e4:	4544      	cmp	r4, r8
   214e6:	d321      	bcc.n	2152c <z_init_static_threads+0x70>
}
   214e8:	b006      	add	sp, #24
   214ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   214ee:	f7ff bc6d 	b.w	20dcc <k_sched_unlock>
		z_setup_new_thread(
   214f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   214f6:	9305      	str	r3, [sp, #20]
   214f8:	f854 3c10 	ldr.w	r3, [r4, #-16]
   214fc:	9304      	str	r3, [sp, #16]
   214fe:	f854 3c14 	ldr.w	r3, [r4, #-20]
   21502:	9303      	str	r3, [sp, #12]
   21504:	f854 3c18 	ldr.w	r3, [r4, #-24]
   21508:	9302      	str	r3, [sp, #8]
   2150a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2150e:	9301      	str	r3, [sp, #4]
   21510:	f854 3c20 	ldr.w	r3, [r4, #-32]
   21514:	9300      	str	r3, [sp, #0]
   21516:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2151a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2151e:	f7ff ff71 	bl	21404 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   21522:	f854 3c30 	ldr.w	r3, [r4, #-48]
   21526:	65dd      	str	r5, [r3, #92]	; 0x5c
   21528:	4625      	mov	r5, r4
   2152a:	e7cd      	b.n	214c8 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2152c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2152e:	1c5a      	adds	r2, r3, #1
   21530:	d00d      	beq.n	2154e <z_init_static_threads+0x92>
   21532:	4630      	mov	r0, r6
   21534:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   21536:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2153a:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2153e:	42b9      	cmp	r1, r7
   21540:	bf08      	it	eq
   21542:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   21544:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21546:	d104      	bne.n	21552 <z_init_static_threads+0x96>
	z_sched_start(thread);
   21548:	4628      	mov	r0, r5
   2154a:	f7ff fc8b 	bl	20e64 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2154e:	3430      	adds	r4, #48	; 0x30
   21550:	e7c8      	b.n	214e4 <z_init_static_threads+0x28>
   21552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21556:	2300      	movs	r3, #0
   21558:	f7eb f97e 	bl	c858 <__aeabi_uldivmod>
   2155c:	4602      	mov	r2, r0
   2155e:	460b      	mov	r3, r1
   21560:	f105 0018 	add.w	r0, r5, #24
   21564:	4651      	mov	r1, sl
   21566:	f000 f8bb 	bl	216e0 <z_add_timeout>
   2156a:	e7f0      	b.n	2154e <z_init_static_threads+0x92>
   2156c:	20020b14 	.word	0x20020b14
   21570:	20020ae4 	.word	0x20020ae4
   21574:	0002af3b 	.word	0x0002af3b

00021578 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   21578:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   2157c:	b08a      	sub	sp, #40	; 0x28
   2157e:	4604      	mov	r4, r0
   21580:	461d      	mov	r5, r3
   21582:	e9cd 2108 	strd	r2, r1, [sp, #32]
	z_impl_k_queue_init(queue);
   21586:	f009 fc50 	bl	2ae2a <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   2158a:	f104 0618 	add.w	r6, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2158e:	2000      	movs	r0, #0
   21590:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   21594:	f04f 0800 	mov.w	r8, #0
   21598:	f04f 0900 	mov.w	r9, #0
   2159c:	e9cd 5003 	strd	r5, r0, [sp, #12]
   215a0:	e9cd 0001 	strd	r0, r0, [sp, #4]
   215a4:	e9cd 8906 	strd	r8, r9, [sp, #24]
   215a8:	4630      	mov	r0, r6
   215aa:	4b05      	ldr	r3, [pc, #20]	; (215c0 <k_work_q_start+0x48>)
   215ac:	9400      	str	r4, [sp, #0]
   215ae:	f7ff ff59 	bl	21464 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   215b2:	4630      	mov	r0, r6
   215b4:	4903      	ldr	r1, [pc, #12]	; (215c4 <k_work_q_start+0x4c>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   215b6:	b00a      	add	sp, #40	; 0x28
   215b8:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   215bc:	f009 bd52 	b.w	2b064 <z_impl_k_thread_name_set>
   215c0:	00028585 	.word	0x00028585
   215c4:	0002d25c 	.word	0x0002d25c

000215c8 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   215c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   215cc:	4606      	mov	r6, r0
   215ce:	460d      	mov	r5, r1
   215d0:	4690      	mov	r8, r2
   215d2:	4699      	mov	r9, r3
	__asm__ volatile(
   215d4:	f04f 0320 	mov.w	r3, #32
   215d8:	f3ef 8711 	mrs	r7, BASEPRI
   215dc:	f383 8811 	msr	BASEPRI, r3
   215e0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   215e4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   215e6:	b17b      	cbz	r3, 21608 <k_delayed_work_submit_to_queue+0x40>
   215e8:	4283      	cmp	r3, r0
   215ea:	d128      	bne.n	2163e <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   215ec:	4628      	mov	r0, r5
   215ee:	f009 fd57 	bl	2b0a0 <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   215f2:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   215f6:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   215f8:	d008      	beq.n	2160c <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   215fa:	2800      	cmp	r0, #0
   215fc:	da07      	bge.n	2160e <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   215fe:	f387 8811 	msr	BASEPRI, r7
   21602:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   21606:	e00f      	b.n	21628 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   21608:	2800      	cmp	r0, #0
   2160a:	d0ef      	beq.n	215ec <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   2160c:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2160e:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   21612:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21614:	d10b      	bne.n	2162e <k_delayed_work_submit_to_queue+0x66>
   21616:	f387 8811 	msr	BASEPRI, r7
   2161a:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   2161e:	4629      	mov	r1, r5
   21620:	4630      	mov	r0, r6
   21622:	f009 fd24 	bl	2b06e <k_work_submit_to_queue>
		return 0;
   21626:	2400      	movs	r4, #0
}
   21628:	4620      	mov	r0, r4
   2162a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   2162e:	4642      	mov	r2, r8
   21630:	464b      	mov	r3, r9
   21632:	4904      	ldr	r1, [pc, #16]	; (21644 <k_delayed_work_submit_to_queue+0x7c>)
   21634:	f105 0010 	add.w	r0, r5, #16
   21638:	f000 f852 	bl	216e0 <z_add_timeout>
   2163c:	e7df      	b.n	215fe <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   2163e:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   21642:	e7dc      	b.n	215fe <k_delayed_work_submit_to_queue+0x36>
   21644:	0002b097 	.word	0x0002b097

00021648 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   21648:	4b03      	ldr	r3, [pc, #12]	; (21658 <elapsed+0x10>)
   2164a:	681b      	ldr	r3, [r3, #0]
   2164c:	b90b      	cbnz	r3, 21652 <elapsed+0xa>
   2164e:	f7f1 bf87 	b.w	13560 <z_clock_elapsed>
}
   21652:	2000      	movs	r0, #0
   21654:	4770      	bx	lr
   21656:	bf00      	nop
   21658:	20021db4 	.word	0x20021db4

0002165c <remove_timeout>:
{
   2165c:	b530      	push	{r4, r5, lr}
   2165e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21660:	b168      	cbz	r0, 2167e <remove_timeout+0x22>
   21662:	4a0a      	ldr	r2, [pc, #40]	; (2168c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   21664:	6852      	ldr	r2, [r2, #4]
   21666:	4290      	cmp	r0, r2
   21668:	d009      	beq.n	2167e <remove_timeout+0x22>
	if (next(t) != NULL) {
   2166a:	b143      	cbz	r3, 2167e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   2166c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   21670:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   21674:	1912      	adds	r2, r2, r4
   21676:	eb45 0101 	adc.w	r1, r5, r1
   2167a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   2167e:	6842      	ldr	r2, [r0, #4]
   21680:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   21682:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21684:	2300      	movs	r3, #0
	node->prev = NULL;
   21686:	e9c0 3300 	strd	r3, r3, [r0]
}
   2168a:	bd30      	pop	{r4, r5, pc}
   2168c:	200204cc 	.word	0x200204cc

00021690 <next_timeout>:
	return list->head == list;
   21690:	4b11      	ldr	r3, [pc, #68]	; (216d8 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   21692:	b510      	push	{r4, lr}
   21694:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21696:	429c      	cmp	r4, r3
   21698:	bf08      	it	eq
   2169a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2169c:	f7ff ffd4 	bl	21648 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   216a0:	b1bc      	cbz	r4, 216d2 <next_timeout+0x42>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   216a2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   216a6:	1a12      	subs	r2, r2, r0
   216a8:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   216ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   216b0:	f173 0100 	sbcs.w	r1, r3, #0
   216b4:	da0d      	bge.n	216d2 <next_timeout+0x42>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   216b6:	4619      	mov	r1, r3
   216b8:	2a00      	cmp	r2, #0
   216ba:	f171 0300 	sbcs.w	r3, r1, #0
   216be:	4610      	mov	r0, r2
   216c0:	da00      	bge.n	216c4 <next_timeout+0x34>
   216c2:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   216c4:	4b05      	ldr	r3, [pc, #20]	; (216dc <next_timeout+0x4c>)
   216c6:	691b      	ldr	r3, [r3, #16]
   216c8:	b113      	cbz	r3, 216d0 <next_timeout+0x40>
   216ca:	4298      	cmp	r0, r3
   216cc:	bfa8      	it	ge
   216ce:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   216d0:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   216d2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   216d6:	e7f5      	b.n	216c4 <next_timeout+0x34>
   216d8:	200204cc 	.word	0x200204cc
   216dc:	20021d74 	.word	0x20021d74

000216e0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   216e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   216e4:	9101      	str	r1, [sp, #4]
   216e6:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   216e8:	1c4b      	adds	r3, r1, #1
   216ea:	bf08      	it	eq
   216ec:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   216f0:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   216f2:	d06b      	beq.n	217cc <z_add_timeout+0xec>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   216f4:	f06f 0301 	mvn.w	r3, #1
   216f8:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   216fc:	1c54      	adds	r4, r2, #1
   216fe:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   21702:	ebb3 0804 	subs.w	r8, r3, r4
   21706:	eb6b 0905 	sbc.w	r9, fp, r5
   2170a:	f1b8 0f00 	cmp.w	r8, #0
   2170e:	f179 0300 	sbcs.w	r3, r9, #0
   21712:	db0f      	blt.n	21734 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   21714:	f7ff ff98 	bl	21648 <elapsed>
   21718:	f06f 0301 	mvn.w	r3, #1
   2171c:	4a32      	ldr	r2, [pc, #200]	; (217e8 <z_add_timeout+0x108>)
   2171e:	e9d2 1c00 	ldrd	r1, ip, [r2]
   21722:	1a5b      	subs	r3, r3, r1
   21724:	eb6b 020c 	sbc.w	r2, fp, ip
   21728:	1b1e      	subs	r6, r3, r4
   2172a:	eb62 0705 	sbc.w	r7, r2, r5
   2172e:	1a34      	subs	r4, r6, r0
   21730:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   21734:	9b01      	ldr	r3, [sp, #4]
   21736:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   2173a:	f04f 0320 	mov.w	r3, #32
   2173e:	f3ef 8611 	mrs	r6, BASEPRI
   21742:	f383 8811 	msr	BASEPRI, r3
   21746:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   2174a:	f7ff ff7d 	bl	21648 <elapsed>
	ticks = MAX(1, ticks);
   2174e:	2c01      	cmp	r4, #1
   21750:	f175 0300 	sbcs.w	r3, r5, #0
   21754:	bfbc      	itt	lt
   21756:	2401      	movlt	r4, #1
   21758:	2500      	movlt	r5, #0
	return list->head == list;
   2175a:	4b24      	ldr	r3, [pc, #144]	; (217ec <z_add_timeout+0x10c>)
		to->dticks = ticks + elapsed();
   2175c:	1824      	adds	r4, r4, r0
   2175e:	681a      	ldr	r2, [r3, #0]
   21760:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21764:	429a      	cmp	r2, r3
   21766:	e9ca 4504 	strd	r4, r5, [sl, #16]
   2176a:	d001      	beq.n	21770 <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2176c:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   2176e:	b952      	cbnz	r2, 21786 <z_add_timeout+0xa6>
	node->prev = list->tail;
   21770:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   21772:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   21776:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   2177a:	685a      	ldr	r2, [r3, #4]
   2177c:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   21780:	f8c3 a004 	str.w	sl, [r3, #4]
}
   21784:	e014      	b.n	217b0 <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
   21786:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   2178a:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   2178e:	4544      	cmp	r4, r8
   21790:	eb75 0109 	sbcs.w	r1, r5, r9
   21794:	da1d      	bge.n	217d2 <z_add_timeout+0xf2>
				t->dticks -= to->dticks;
   21796:	ebb8 0004 	subs.w	r0, r8, r4
   2179a:	eb69 0105 	sbc.w	r1, r9, r5
   2179e:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   217a2:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   217a4:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   217a8:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   217ac:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   217b0:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   217b2:	429a      	cmp	r2, r3
   217b4:	d006      	beq.n	217c4 <z_add_timeout+0xe4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   217b6:	4592      	cmp	sl, r2
   217b8:	d104      	bne.n	217c4 <z_add_timeout+0xe4>
			z_clock_set_timeout(next_timeout(), false);
   217ba:	f7ff ff69 	bl	21690 <next_timeout>
   217be:	2100      	movs	r1, #0
   217c0:	f7f1 fe68 	bl	13494 <z_clock_set_timeout>
	__asm__ volatile(
   217c4:	f386 8811 	msr	BASEPRI, r6
   217c8:	f3bf 8f6f 	isb	sy
		}
	}
}
   217cc:	b003      	add	sp, #12
   217ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   217d2:	ebb4 0008 	subs.w	r0, r4, r8
   217d6:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   217da:	42ba      	cmp	r2, r7
   217dc:	e9ca 0104 	strd	r0, r1, [sl, #16]
   217e0:	d0c6      	beq.n	21770 <z_add_timeout+0x90>
   217e2:	6812      	ldr	r2, [r2, #0]
   217e4:	e7c3      	b.n	2176e <z_add_timeout+0x8e>
   217e6:	bf00      	nop
   217e8:	20021408 	.word	0x20021408
   217ec:	200204cc 	.word	0x200204cc

000217f0 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   217f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   217f4:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   217f6:	f7ff fb8b 	bl	20f10 <z_time_slice>
	__asm__ volatile(
   217fa:	f04f 0320 	mov.w	r3, #32
   217fe:	f3ef 8411 	mrs	r4, BASEPRI
   21802:	f383 8811 	msr	BASEPRI, r3
   21806:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   2180a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 218bc <z_clock_announce+0xcc>
   2180e:	4d2a      	ldr	r5, [pc, #168]	; (218b8 <z_clock_announce+0xc8>)
   21810:	4651      	mov	r1, sl
	return list->head == list;
   21812:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 218c0 <z_clock_announce+0xd0>
   21816:	602e      	str	r6, [r5, #0]
   21818:	f8d5 c000 	ldr.w	ip, [r5]
   2181c:	f8db 0000 	ldr.w	r0, [fp]
   21820:	4662      	mov	r2, ip
   21822:	e9da 8900 	ldrd	r8, r9, [sl]
   21826:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21828:	4558      	cmp	r0, fp
   2182a:	e9cd 2300 	strd	r2, r3, [sp]
   2182e:	d00d      	beq.n	2184c <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   21830:	b160      	cbz	r0, 2184c <z_clock_announce+0x5c>
   21832:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   21836:	45b4      	cmp	ip, r6
   21838:	41bb      	sbcs	r3, r7
   2183a:	da1d      	bge.n	21878 <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2183c:	9b00      	ldr	r3, [sp, #0]
   2183e:	ebb6 0c03 	subs.w	ip, r6, r3
   21842:	9b01      	ldr	r3, [sp, #4]
   21844:	eb67 0603 	sbc.w	r6, r7, r3
   21848:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   2184c:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
   2184e:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   21850:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
   21852:	eb13 0208 	adds.w	r2, r3, r8
   21856:	9b01      	ldr	r3, [sp, #4]
   21858:	eb43 0309 	adc.w	r3, r3, r9
   2185c:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
   21860:	f7ff ff16 	bl	21690 <next_timeout>
   21864:	4631      	mov	r1, r6
   21866:	f7f1 fe15 	bl	13494 <z_clock_set_timeout>
	__asm__ volatile(
   2186a:	f384 8811 	msr	BASEPRI, r4
   2186e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   21872:	b003      	add	sp, #12
   21874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   21878:	2200      	movs	r2, #0
   2187a:	2300      	movs	r3, #0
		curr_tick += dt;
   2187c:	eb18 0806 	adds.w	r8, r8, r6
   21880:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   21884:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   21888:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   2188c:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   21890:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   21892:	f7ff fee3 	bl	2165c <remove_timeout>
   21896:	f384 8811 	msr	BASEPRI, r4
   2189a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2189e:	6883      	ldr	r3, [r0, #8]
   218a0:	4798      	blx	r3
	__asm__ volatile(
   218a2:	f04f 0320 	mov.w	r3, #32
   218a6:	f3ef 8411 	mrs	r4, BASEPRI
   218aa:	f383 8811 	msr	BASEPRI, r3
   218ae:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   218b2:	4902      	ldr	r1, [pc, #8]	; (218bc <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   218b4:	e7b0      	b.n	21818 <z_clock_announce+0x28>
   218b6:	bf00      	nop
   218b8:	20021db4 	.word	0x20021db4
   218bc:	20021408 	.word	0x20021408
   218c0:	200204cc 	.word	0x200204cc

000218c4 <z_tick_get>:

int64_t z_tick_get(void)
{
   218c4:	b510      	push	{r4, lr}
   218c6:	f04f 0320 	mov.w	r3, #32
   218ca:	f3ef 8411 	mrs	r4, BASEPRI
   218ce:	f383 8811 	msr	BASEPRI, r3
   218d2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   218d6:	f7f1 fe43 	bl	13560 <z_clock_elapsed>
   218da:	4b06      	ldr	r3, [pc, #24]	; (218f4 <z_tick_get+0x30>)
   218dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   218e0:	1812      	adds	r2, r2, r0
   218e2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   218e6:	f384 8811 	msr	BASEPRI, r4
   218ea:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   218ee:	4610      	mov	r0, r2
   218f0:	4619      	mov	r1, r3
   218f2:	bd10      	pop	{r4, pc}
   218f4:	20021408 	.word	0x20021408

000218f8 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   218f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   218fa:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   218fe:	1c56      	adds	r6, r2, #1
   21900:	f143 0700 	adc.w	r7, r3, #0
   21904:	2f00      	cmp	r7, #0
   21906:	bf08      	it	eq
   21908:	2e02      	cmpeq	r6, #2
{
   2190a:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2190c:	d302      	bcc.n	21914 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2190e:	490c      	ldr	r1, [pc, #48]	; (21940 <z_timer_expiration_handler+0x48>)
   21910:	f7ff fee6 	bl	216e0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   21914:	6b23      	ldr	r3, [r4, #48]	; 0x30
   21916:	3301      	adds	r3, #1
   21918:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2191a:	6a23      	ldr	r3, [r4, #32]
   2191c:	b10b      	cbz	r3, 21922 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   2191e:	4620      	mov	r0, r4
   21920:	4798      	blx	r3
	return list->head == list;
   21922:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21926:	42a5      	cmp	r5, r4
   21928:	d008      	beq.n	2193c <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2192a:	b13d      	cbz	r5, 2193c <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   2192c:	4628      	mov	r0, r5
   2192e:	f009 faa6 	bl	2ae7e <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   21932:	4628      	mov	r0, r5
   21934:	f009 faf1 	bl	2af1a <z_ready_thread>
   21938:	2300      	movs	r3, #0
   2193a:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);
}
   2193c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2193e:	bf00      	nop
   21940:	000218f9 	.word	0x000218f9

00021944 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   21944:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   21948:	4619      	mov	r1, r3
   2194a:	4606      	mov	r6, r0
   2194c:	4610      	mov	r0, r2
   2194e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   21952:	1c4c      	adds	r4, r1, #1
   21954:	bf08      	it	eq
   21956:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   2195a:	4680      	mov	r8, r0
   2195c:	4689      	mov	r9, r1
   2195e:	d047      	beq.n	219f0 <z_impl_k_timer_start+0xac>
   21960:	4614      	mov	r4, r2
   21962:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   21964:	ea54 0305 	orrs.w	r3, r4, r5
   21968:	d016      	beq.n	21998 <z_impl_k_timer_start+0x54>
   2196a:	f06f 0301 	mvn.w	r3, #1
   2196e:	ebb3 0a02 	subs.w	sl, r3, r2
   21972:	f04f 33ff 	mov.w	r3, #4294967295
   21976:	eb63 0b05 	sbc.w	fp, r3, r5
   2197a:	f1ba 0f00 	cmp.w	sl, #0
   2197e:	f17b 0300 	sbcs.w	r3, fp, #0
   21982:	da09      	bge.n	21998 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   21984:	f112 34ff 	adds.w	r4, r2, #4294967295
   21988:	f145 35ff 	adc.w	r5, r5, #4294967295
   2198c:	2c01      	cmp	r4, #1
   2198e:	f175 0300 	sbcs.w	r3, r5, #0
   21992:	bfbc      	itt	lt
   21994:	2401      	movlt	r4, #1
   21996:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   21998:	f06f 0301 	mvn.w	r3, #1
   2199c:	1a1b      	subs	r3, r3, r0
   2199e:	9300      	str	r3, [sp, #0]
   219a0:	f04f 33ff 	mov.w	r3, #4294967295
   219a4:	eb63 0301 	sbc.w	r3, r3, r1
   219a8:	9301      	str	r3, [sp, #4]
   219aa:	e9dd 2300 	ldrd	r2, r3, [sp]
   219ae:	2a00      	cmp	r2, #0
   219b0:	f173 0300 	sbcs.w	r3, r3, #0
   219b4:	da0c      	bge.n	219d0 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   219b6:	f110 38ff 	adds.w	r8, r0, #4294967295
   219ba:	f141 39ff 	adc.w	r9, r1, #4294967295
   219be:	f1b8 0f00 	cmp.w	r8, #0
   219c2:	f179 0300 	sbcs.w	r3, r9, #0
   219c6:	bfbc      	itt	lt
   219c8:	f04f 0800 	movlt.w	r8, #0
   219cc:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   219d0:	4630      	mov	r0, r6
   219d2:	f009 fbb0 	bl	2b136 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   219d6:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   219d8:	4642      	mov	r2, r8
	timer->status = 0U;
   219da:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   219dc:	4630      	mov	r0, r6
   219de:	464b      	mov	r3, r9
   219e0:	4905      	ldr	r1, [pc, #20]	; (219f8 <z_impl_k_timer_start+0xb4>)
	timer->period = period;
   219e2:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   219e6:	b002      	add	sp, #8
   219e8:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   219ec:	f7ff be78 	b.w	216e0 <z_add_timeout>
}
   219f0:	b002      	add	sp, #8
   219f2:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   219f6:	bf00      	nop
   219f8:	000218f9 	.word	0x000218f9

000219fc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   219fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21a00:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   21a02:	2301      	movs	r3, #1
{
   21a04:	b089      	sub	sp, #36	; 0x24
	struct _poller poller = { .is_polling = true,
   21a06:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   21a0a:	4b29      	ldr	r3, [pc, #164]	; (21ab0 <z_impl_k_poll+0xb4>)
{
   21a0c:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   21a0e:	689b      	ldr	r3, [r3, #8]
{
   21a10:	4605      	mov	r5, r0
	struct _poller poller = { .is_polling = true,
   21a12:	9306      	str	r3, [sp, #24]
   21a14:	4b27      	ldr	r3, [pc, #156]	; (21ab4 <z_impl_k_poll+0xb8>)
   21a16:	9307      	str	r3, [sp, #28]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   21a18:	ea52 0307 	orrs.w	r3, r2, r7
   21a1c:	bf0c      	ite	eq
   21a1e:	2301      	moveq	r3, #1
   21a20:	2300      	movne	r3, #0
   21a22:	aa05      	add	r2, sp, #20
   21a24:	f009 fcc2 	bl	2b3ac <register_events>
   21a28:	4680      	mov	r8, r0
	__asm__ volatile(
   21a2a:	f04f 0320 	mov.w	r3, #32
   21a2e:	f3ef 8911 	mrs	r9, BASEPRI
   21a32:	f383 8811 	msr	BASEPRI, r3
   21a36:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   21a3a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21a3e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   21a42:	b963      	cbnz	r3, 21a5e <z_impl_k_poll+0x62>
		clear_event_registrations(events, events_registered, key);
   21a44:	4601      	mov	r1, r0
   21a46:	464a      	mov	r2, r9
   21a48:	4628      	mov	r0, r5
   21a4a:	f009 fc12 	bl	2b272 <clear_event_registrations>
	__asm__ volatile(
   21a4e:	f389 8811 	msr	BASEPRI, r9
   21a52:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   21a56:	4620      	mov	r0, r4
   21a58:	b009      	add	sp, #36	; 0x24
   21a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller.is_polling = false;
   21a5e:	2300      	movs	r3, #0
   21a60:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21a64:	ea56 0307 	orrs.w	r3, r6, r7
   21a68:	d106      	bne.n	21a78 <z_impl_k_poll+0x7c>
   21a6a:	f389 8811 	msr	BASEPRI, r9
   21a6e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   21a72:	f06f 040a 	mvn.w	r4, #10
   21a76:	e7ee      	b.n	21a56 <z_impl_k_poll+0x5a>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   21a78:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   21a7a:	4649      	mov	r1, r9
   21a7c:	e9cd 6700 	strd	r6, r7, [sp]
   21a80:	480d      	ldr	r0, [pc, #52]	; (21ab8 <z_impl_k_poll+0xbc>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   21a82:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   21a86:	f7ff fb55 	bl	21134 <z_pend_curr>
   21a8a:	4604      	mov	r4, r0
	__asm__ volatile(
   21a8c:	f04f 0320 	mov.w	r3, #32
   21a90:	f3ef 8611 	mrs	r6, BASEPRI
   21a94:	f383 8811 	msr	BASEPRI, r3
   21a98:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   21a9c:	4632      	mov	r2, r6
   21a9e:	4641      	mov	r1, r8
   21aa0:	4628      	mov	r0, r5
   21aa2:	f009 fbe6 	bl	2b272 <clear_event_registrations>
	__asm__ volatile(
   21aa6:	f386 8811 	msr	BASEPRI, r6
   21aaa:	f3bf 8f6f 	isb	sy
	return swap_rc;
   21aae:	e7d2      	b.n	21a56 <z_impl_k_poll+0x5a>
   21ab0:	20021d74 	.word	0x20021d74
   21ab4:	0002b2ff 	.word	0x0002b2ff
   21ab8:	2002501e 	.word	0x2002501e

00021abc <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   21abc:	b538      	push	{r3, r4, r5, lr}
   21abe:	4603      	mov	r3, r0
	__asm__ volatile(
   21ac0:	f04f 0220 	mov.w	r2, #32
   21ac4:	f3ef 8511 	mrs	r5, BASEPRI
   21ac8:	f382 8811 	msr	BASEPRI, r2
   21acc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   21ad0:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   21ad2:	2101      	movs	r1, #1
   21ad4:	6081      	str	r1, [r0, #8]
	return list->head == list;
   21ad6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   21ad8:	4283      	cmp	r3, r0
   21ada:	d106      	bne.n	21aea <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   21adc:	f385 8811 	msr	BASEPRI, r5
   21ae0:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   21ae4:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   21ae6:	4620      	mov	r0, r4
   21ae8:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   21aea:	e9d0 3200 	ldrd	r3, r2, [r0]
   21aee:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   21af0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21af2:	2300      	movs	r3, #0
	node->prev = NULL;
   21af4:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   21af8:	f009 fbe6 	bl	2b2c8 <signal_poll_event>
	z_reschedule(&lock, key);
   21afc:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   21afe:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   21b00:	4801      	ldr	r0, [pc, #4]	; (21b08 <z_impl_k_poll_signal_raise+0x4c>)
   21b02:	f7ff f903 	bl	20d0c <z_reschedule>
	return rc;
   21b06:	e7ee      	b.n	21ae6 <z_impl_k_poll_signal_raise+0x2a>
   21b08:	2002501e 	.word	0x2002501e

00021b0c <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   21b0c:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   21b0e:	4801      	ldr	r0, [pc, #4]	; (21b14 <k_malloc+0x8>)
   21b10:	f009 bcbb 	b.w	2b48a <k_mem_pool_malloc>
   21b14:	200204d4 	.word	0x200204d4

00021b18 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   21b18:	b507      	push	{r0, r1, r2, lr}
   21b1a:	9001      	str	r0, [sp, #4]
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   21b1c:	f009 fa9a 	bl	2b054 <k_is_in_isr>
   21b20:	9901      	ldr	r1, [sp, #4]
   21b22:	b948      	cbnz	r0, 21b38 <z_thread_malloc+0x20>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   21b24:	4b07      	ldr	r3, [pc, #28]	; (21b44 <z_thread_malloc+0x2c>)
   21b26:	689b      	ldr	r3, [r3, #8]
   21b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (pool) {
   21b2a:	b13b      	cbz	r3, 21b3c <z_thread_malloc+0x24>
		ret = k_mem_pool_malloc(pool, size);
   21b2c:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   21b2e:	b003      	add	sp, #12
   21b30:	f85d eb04 	ldr.w	lr, [sp], #4
		ret = k_mem_pool_malloc(pool, size);
   21b34:	f009 bca9 	b.w	2b48a <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   21b38:	4b03      	ldr	r3, [pc, #12]	; (21b48 <z_thread_malloc+0x30>)
   21b3a:	e7f7      	b.n	21b2c <z_thread_malloc+0x14>
}
   21b3c:	b003      	add	sp, #12
   21b3e:	f85d fb04 	ldr.w	pc, [sp], #4
   21b42:	bf00      	nop
   21b44:	20021d74 	.word	0x20021d74
   21b48:	200204d4 	.word	0x200204d4

00021b4c <__assert_func>:
   21b4c:	4d0a      	ldr	r5, [pc, #40]	; (21b78 <__assert_func+0x2c>)
   21b4e:	4614      	mov	r4, r2
   21b50:	461a      	mov	r2, r3
   21b52:	4603      	mov	r3, r0
   21b54:	682d      	ldr	r5, [r5, #0]
   21b56:	b500      	push	{lr}
   21b58:	68e8      	ldr	r0, [r5, #12]
   21b5a:	b085      	sub	sp, #20
   21b5c:	b144      	cbz	r4, 21b70 <__assert_func+0x24>
   21b5e:	4d07      	ldr	r5, [pc, #28]	; (21b7c <__assert_func+0x30>)
   21b60:	9100      	str	r1, [sp, #0]
   21b62:	4907      	ldr	r1, [pc, #28]	; (21b80 <__assert_func+0x34>)
   21b64:	e9cd 5401 	strd	r5, r4, [sp, #4]
   21b68:	f000 f812 	bl	21b90 <fiprintf>
   21b6c:	f003 fef2 	bl	25954 <abort>
   21b70:	4d04      	ldr	r5, [pc, #16]	; (21b84 <__assert_func+0x38>)
   21b72:	462c      	mov	r4, r5
   21b74:	e7f4      	b.n	21b60 <__assert_func+0x14>
   21b76:	bf00      	nop
   21b78:	200204d8 	.word	0x200204d8
   21b7c:	0002bf60 	.word	0x0002bf60
   21b80:	0002bf70 	.word	0x0002bf70
   21b84:	0002bf6c 	.word	0x0002bf6c

00021b88 <atoi>:
   21b88:	220a      	movs	r2, #10
   21b8a:	2100      	movs	r1, #0
   21b8c:	f001 bada 	b.w	23144 <strtol>

00021b90 <fiprintf>:
   21b90:	b40e      	push	{r1, r2, r3}
   21b92:	b510      	push	{r4, lr}
   21b94:	b083      	sub	sp, #12
   21b96:	4c07      	ldr	r4, [pc, #28]	; (21bb4 <fiprintf+0x24>)
   21b98:	4601      	mov	r1, r0
   21b9a:	ab05      	add	r3, sp, #20
   21b9c:	6820      	ldr	r0, [r4, #0]
   21b9e:	f853 2b04 	ldr.w	r2, [r3], #4
   21ba2:	9301      	str	r3, [sp, #4]
   21ba4:	f002 ff02 	bl	249ac <_vfiprintf_r>
   21ba8:	b003      	add	sp, #12
   21baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21bae:	b003      	add	sp, #12
   21bb0:	4770      	bx	lr
   21bb2:	bf00      	nop
   21bb4:	200204d8 	.word	0x200204d8

00021bb8 <malloc>:
   21bb8:	4b02      	ldr	r3, [pc, #8]	; (21bc4 <malloc+0xc>)
   21bba:	4601      	mov	r1, r0
   21bbc:	6818      	ldr	r0, [r3, #0]
   21bbe:	f000 b80b 	b.w	21bd8 <_malloc_r>
   21bc2:	bf00      	nop
   21bc4:	200204d8 	.word	0x200204d8

00021bc8 <free>:
   21bc8:	4b02      	ldr	r3, [pc, #8]	; (21bd4 <free+0xc>)
   21bca:	4601      	mov	r1, r0
   21bcc:	6818      	ldr	r0, [r3, #0]
   21bce:	f004 b985 	b.w	25edc <_free_r>
   21bd2:	bf00      	nop
   21bd4:	200204d8 	.word	0x200204d8

00021bd8 <_malloc_r>:
   21bd8:	f101 030b 	add.w	r3, r1, #11
   21bdc:	2b16      	cmp	r3, #22
   21bde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21be2:	4606      	mov	r6, r0
   21be4:	b083      	sub	sp, #12
   21be6:	d824      	bhi.n	21c32 <_malloc_r+0x5a>
   21be8:	2910      	cmp	r1, #16
   21bea:	f200 80f5 	bhi.w	21dd8 <_malloc_r+0x200>
   21bee:	f000 fb7d 	bl	222ec <__malloc_lock>
   21bf2:	2510      	movs	r5, #16
   21bf4:	2002      	movs	r0, #2
   21bf6:	2318      	movs	r3, #24
   21bf8:	4fce      	ldr	r7, [pc, #824]	; (21f34 <_malloc_r+0x35c>)
   21bfa:	443b      	add	r3, r7
   21bfc:	685a      	ldr	r2, [r3, #4]
   21bfe:	f1a3 0108 	sub.w	r1, r3, #8
   21c02:	428a      	cmp	r2, r1
   21c04:	f000 80ef 	beq.w	21de6 <_malloc_r+0x20e>
   21c08:	6853      	ldr	r3, [r2, #4]
   21c0a:	f102 0408 	add.w	r4, r2, #8
   21c0e:	68d1      	ldr	r1, [r2, #12]
   21c10:	4630      	mov	r0, r6
   21c12:	f023 0303 	bic.w	r3, r3, #3
   21c16:	6895      	ldr	r5, [r2, #8]
   21c18:	441a      	add	r2, r3
   21c1a:	60e9      	str	r1, [r5, #12]
   21c1c:	608d      	str	r5, [r1, #8]
   21c1e:	6853      	ldr	r3, [r2, #4]
   21c20:	f043 0301 	orr.w	r3, r3, #1
   21c24:	6053      	str	r3, [r2, #4]
   21c26:	f000 fb67 	bl	222f8 <__malloc_unlock>
   21c2a:	4620      	mov	r0, r4
   21c2c:	b003      	add	sp, #12
   21c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c32:	2b00      	cmp	r3, #0
   21c34:	f023 0507 	bic.w	r5, r3, #7
   21c38:	f2c0 80ce 	blt.w	21dd8 <_malloc_r+0x200>
   21c3c:	42a9      	cmp	r1, r5
   21c3e:	f200 80cb 	bhi.w	21dd8 <_malloc_r+0x200>
   21c42:	f000 fb53 	bl	222ec <__malloc_lock>
   21c46:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   21c4a:	f0c0 81ca 	bcc.w	21fe2 <_malloc_r+0x40a>
   21c4e:	0a6b      	lsrs	r3, r5, #9
   21c50:	f000 813a 	beq.w	21ec8 <_malloc_r+0x2f0>
   21c54:	2b04      	cmp	r3, #4
   21c56:	f200 81a0 	bhi.w	21f9a <_malloc_r+0x3c2>
   21c5a:	09ab      	lsrs	r3, r5, #6
   21c5c:	f103 0039 	add.w	r0, r3, #57	; 0x39
   21c60:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   21c64:	00c3      	lsls	r3, r0, #3
   21c66:	4fb3      	ldr	r7, [pc, #716]	; (21f34 <_malloc_r+0x35c>)
   21c68:	443b      	add	r3, r7
   21c6a:	f1a3 0408 	sub.w	r4, r3, #8
   21c6e:	685b      	ldr	r3, [r3, #4]
   21c70:	429c      	cmp	r4, r3
   21c72:	d107      	bne.n	21c84 <_malloc_r+0xac>
   21c74:	e0bc      	b.n	21df0 <_malloc_r+0x218>
   21c76:	2900      	cmp	r1, #0
   21c78:	f280 8149 	bge.w	21f0e <_malloc_r+0x336>
   21c7c:	68db      	ldr	r3, [r3, #12]
   21c7e:	429c      	cmp	r4, r3
   21c80:	f000 80b6 	beq.w	21df0 <_malloc_r+0x218>
   21c84:	685a      	ldr	r2, [r3, #4]
   21c86:	f022 0203 	bic.w	r2, r2, #3
   21c8a:	1b51      	subs	r1, r2, r5
   21c8c:	290f      	cmp	r1, #15
   21c8e:	ddf2      	ble.n	21c76 <_malloc_r+0x9e>
   21c90:	4660      	mov	r0, ip
   21c92:	f8df e2bc 	ldr.w	lr, [pc, #700]	; 21f50 <_malloc_r+0x378>
   21c96:	f8d7 c010 	ldr.w	ip, [r7, #16]
   21c9a:	45f4      	cmp	ip, lr
   21c9c:	f040 80af 	bne.w	21dfe <_malloc_r+0x226>
   21ca0:	1083      	asrs	r3, r0, #2
   21ca2:	2401      	movs	r4, #1
   21ca4:	687a      	ldr	r2, [r7, #4]
   21ca6:	409c      	lsls	r4, r3
   21ca8:	4294      	cmp	r4, r2
   21caa:	f240 80d5 	bls.w	21e58 <_malloc_r+0x280>
   21cae:	f8d7 8008 	ldr.w	r8, [r7, #8]
   21cb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   21cb6:	f023 0903 	bic.w	r9, r3, #3
   21cba:	eba9 0205 	sub.w	r2, r9, r5
   21cbe:	2a0f      	cmp	r2, #15
   21cc0:	dd02      	ble.n	21cc8 <_malloc_r+0xf0>
   21cc2:	45a9      	cmp	r9, r5
   21cc4:	f080 8111 	bcs.w	21eea <_malloc_r+0x312>
   21cc8:	4a9b      	ldr	r2, [pc, #620]	; (21f38 <_malloc_r+0x360>)
   21cca:	eb08 0b09 	add.w	fp, r8, r9
   21cce:	4b9b      	ldr	r3, [pc, #620]	; (21f3c <_malloc_r+0x364>)
   21cd0:	6811      	ldr	r1, [r2, #0]
   21cd2:	681b      	ldr	r3, [r3, #0]
   21cd4:	3101      	adds	r1, #1
   21cd6:	442b      	add	r3, r5
   21cd8:	f000 81d7 	beq.w	2208a <_malloc_r+0x4b2>
   21cdc:	f241 010f 	movw	r1, #4111	; 0x100f
   21ce0:	4c97      	ldr	r4, [pc, #604]	; (21f40 <_malloc_r+0x368>)
   21ce2:	4419      	add	r1, r3
   21ce4:	400c      	ands	r4, r1
   21ce6:	4621      	mov	r1, r4
   21ce8:	4630      	mov	r0, r6
   21cea:	f000 fd0d 	bl	22708 <_sbrk_r>
   21cee:	f1b0 3fff 	cmp.w	r0, #4294967295
   21cf2:	4682      	mov	sl, r0
   21cf4:	4a90      	ldr	r2, [pc, #576]	; (21f38 <_malloc_r+0x360>)
   21cf6:	f000 81b3 	beq.w	22060 <_malloc_r+0x488>
   21cfa:	45b8      	cmp	r8, r7
   21cfc:	d002      	beq.n	21d04 <_malloc_r+0x12c>
   21cfe:	4583      	cmp	fp, r0
   21d00:	f200 81ae 	bhi.w	22060 <_malloc_r+0x488>
   21d04:	4b8f      	ldr	r3, [pc, #572]	; (21f44 <_malloc_r+0x36c>)
   21d06:	45d3      	cmp	fp, sl
   21d08:	6818      	ldr	r0, [r3, #0]
   21d0a:	4420      	add	r0, r4
   21d0c:	6018      	str	r0, [r3, #0]
   21d0e:	f000 81ac 	beq.w	2206a <_malloc_r+0x492>
   21d12:	6811      	ldr	r1, [r2, #0]
   21d14:	3101      	adds	r1, #1
   21d16:	f000 81b5 	beq.w	22084 <_malloc_r+0x4ac>
   21d1a:	ebaa 0b0b 	sub.w	fp, sl, fp
   21d1e:	4458      	add	r0, fp
   21d20:	6018      	str	r0, [r3, #0]
   21d22:	f01a 0207 	ands.w	r2, sl, #7
   21d26:	f000 81bc 	beq.w	220a2 <_malloc_r+0x4ca>
   21d2a:	f1c2 0c08 	rsb	ip, r2, #8
   21d2e:	f241 0108 	movw	r1, #4104	; 0x1008
   21d32:	4630      	mov	r0, r6
   21d34:	9201      	str	r2, [sp, #4]
   21d36:	44e2      	add	sl, ip
   21d38:	1a89      	subs	r1, r1, r2
   21d3a:	4454      	add	r4, sl
   21d3c:	1b09      	subs	r1, r1, r4
   21d3e:	f3c1 0b0b 	ubfx	fp, r1, #0, #12
   21d42:	4659      	mov	r1, fp
   21d44:	f000 fce0 	bl	22708 <_sbrk_r>
   21d48:	1c42      	adds	r2, r0, #1
   21d4a:	4b7e      	ldr	r3, [pc, #504]	; (21f44 <_malloc_r+0x36c>)
   21d4c:	9a01      	ldr	r2, [sp, #4]
   21d4e:	f000 81f2 	beq.w	22136 <_malloc_r+0x55e>
   21d52:	eba0 000a 	sub.w	r0, r0, sl
   21d56:	eb00 040b 	add.w	r4, r0, fp
   21d5a:	6818      	ldr	r0, [r3, #0]
   21d5c:	f044 0101 	orr.w	r1, r4, #1
   21d60:	45b8      	cmp	r8, r7
   21d62:	f8c7 a008 	str.w	sl, [r7, #8]
   21d66:	4458      	add	r0, fp
   21d68:	f8ca 1004 	str.w	r1, [sl, #4]
   21d6c:	6018      	str	r0, [r3, #0]
   21d6e:	f000 81bc 	beq.w	220ea <_malloc_r+0x512>
   21d72:	f1b9 0f0f 	cmp.w	r9, #15
   21d76:	f240 81ba 	bls.w	220ee <_malloc_r+0x516>
   21d7a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   21d7e:	f1a9 010c 	sub.w	r1, r9, #12
   21d82:	f04f 0c05 	mov.w	ip, #5
   21d86:	f021 0107 	bic.w	r1, r1, #7
   21d8a:	f002 0201 	and.w	r2, r2, #1
   21d8e:	eb08 0401 	add.w	r4, r8, r1
   21d92:	430a      	orrs	r2, r1
   21d94:	290f      	cmp	r1, #15
   21d96:	f8c8 2004 	str.w	r2, [r8, #4]
   21d9a:	e9c4 cc01 	strd	ip, ip, [r4, #4]
   21d9e:	f200 81be 	bhi.w	2211e <_malloc_r+0x546>
   21da2:	f8da 1004 	ldr.w	r1, [sl, #4]
   21da6:	46d0      	mov	r8, sl
   21da8:	4b67      	ldr	r3, [pc, #412]	; (21f48 <_malloc_r+0x370>)
   21daa:	681a      	ldr	r2, [r3, #0]
   21dac:	4282      	cmp	r2, r0
   21dae:	bf38      	it	cc
   21db0:	6018      	strcc	r0, [r3, #0]
   21db2:	4b66      	ldr	r3, [pc, #408]	; (21f4c <_malloc_r+0x374>)
   21db4:	681a      	ldr	r2, [r3, #0]
   21db6:	4282      	cmp	r2, r0
   21db8:	bf38      	it	cc
   21dba:	6018      	strcc	r0, [r3, #0]
   21dbc:	f021 0103 	bic.w	r1, r1, #3
   21dc0:	42a9      	cmp	r1, r5
   21dc2:	eba1 0205 	sub.w	r2, r1, r5
   21dc6:	d302      	bcc.n	21dce <_malloc_r+0x1f6>
   21dc8:	2a0f      	cmp	r2, #15
   21dca:	f300 808e 	bgt.w	21eea <_malloc_r+0x312>
   21dce:	4630      	mov	r0, r6
   21dd0:	2400      	movs	r4, #0
   21dd2:	f000 fa91 	bl	222f8 <__malloc_unlock>
   21dd6:	e728      	b.n	21c2a <_malloc_r+0x52>
   21dd8:	2400      	movs	r4, #0
   21dda:	230c      	movs	r3, #12
   21ddc:	4620      	mov	r0, r4
   21dde:	6033      	str	r3, [r6, #0]
   21de0:	b003      	add	sp, #12
   21de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21de6:	68da      	ldr	r2, [r3, #12]
   21de8:	4293      	cmp	r3, r2
   21dea:	f47f af0d 	bne.w	21c08 <_malloc_r+0x30>
   21dee:	3002      	adds	r0, #2
   21df0:	f8d7 c010 	ldr.w	ip, [r7, #16]
   21df4:	f8df e158 	ldr.w	lr, [pc, #344]	; 21f50 <_malloc_r+0x378>
   21df8:	45f4      	cmp	ip, lr
   21dfa:	f43f af51 	beq.w	21ca0 <_malloc_r+0xc8>
   21dfe:	f8dc 2004 	ldr.w	r2, [ip, #4]
   21e02:	f022 0203 	bic.w	r2, r2, #3
   21e06:	1b53      	subs	r3, r2, r5
   21e08:	2b0f      	cmp	r3, #15
   21e0a:	f300 80ee 	bgt.w	21fea <_malloc_r+0x412>
   21e0e:	2b00      	cmp	r3, #0
   21e10:	e9c7 ee04 	strd	lr, lr, [r7, #16]
   21e14:	da5e      	bge.n	21ed4 <_malloc_r+0x2fc>
   21e16:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   21e1a:	f080 809b 	bcs.w	21f54 <_malloc_r+0x37c>
   21e1e:	2301      	movs	r3, #1
   21e20:	ea4f 08d2 	mov.w	r8, r2, lsr #3
   21e24:	0952      	lsrs	r2, r2, #5
   21e26:	6879      	ldr	r1, [r7, #4]
   21e28:	4498      	add	r8, r3
   21e2a:	fa03 f202 	lsl.w	r2, r3, r2
   21e2e:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   21e32:	f857 4038 	ldr.w	r4, [r7, r8, lsl #3]
   21e36:	430a      	orrs	r2, r1
   21e38:	3b08      	subs	r3, #8
   21e3a:	f8cc 4008 	str.w	r4, [ip, #8]
   21e3e:	607a      	str	r2, [r7, #4]
   21e40:	f8cc 300c 	str.w	r3, [ip, #12]
   21e44:	f847 c038 	str.w	ip, [r7, r8, lsl #3]
   21e48:	f8c4 c00c 	str.w	ip, [r4, #12]
   21e4c:	1083      	asrs	r3, r0, #2
   21e4e:	2401      	movs	r4, #1
   21e50:	409c      	lsls	r4, r3
   21e52:	4294      	cmp	r4, r2
   21e54:	f63f af2b 	bhi.w	21cae <_malloc_r+0xd6>
   21e58:	4214      	tst	r4, r2
   21e5a:	d105      	bne.n	21e68 <_malloc_r+0x290>
   21e5c:	f020 0003 	bic.w	r0, r0, #3
   21e60:	0064      	lsls	r4, r4, #1
   21e62:	3004      	adds	r0, #4
   21e64:	4214      	tst	r4, r2
   21e66:	d0fb      	beq.n	21e60 <_malloc_r+0x288>
   21e68:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   21e6c:	4680      	mov	r8, r0
   21e6e:	46cc      	mov	ip, r9
   21e70:	f8dc 300c 	ldr.w	r3, [ip, #12]
   21e74:	459c      	cmp	ip, r3
   21e76:	d107      	bne.n	21e88 <_malloc_r+0x2b0>
   21e78:	e09b      	b.n	21fb2 <_malloc_r+0x3da>
   21e7a:	2a00      	cmp	r2, #0
   21e7c:	f280 80a2 	bge.w	21fc4 <_malloc_r+0x3ec>
   21e80:	68db      	ldr	r3, [r3, #12]
   21e82:	459c      	cmp	ip, r3
   21e84:	f000 8095 	beq.w	21fb2 <_malloc_r+0x3da>
   21e88:	6859      	ldr	r1, [r3, #4]
   21e8a:	f021 0103 	bic.w	r1, r1, #3
   21e8e:	1b4a      	subs	r2, r1, r5
   21e90:	2a0f      	cmp	r2, #15
   21e92:	ddf2      	ble.n	21e7a <_malloc_r+0x2a2>
   21e94:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   21e98:	f045 0401 	orr.w	r4, r5, #1
   21e9c:	f042 0801 	orr.w	r8, r2, #1
   21ea0:	441d      	add	r5, r3
   21ea2:	4630      	mov	r0, r6
   21ea4:	689e      	ldr	r6, [r3, #8]
   21ea6:	605c      	str	r4, [r3, #4]
   21ea8:	f103 0408 	add.w	r4, r3, #8
   21eac:	f8c6 c00c 	str.w	ip, [r6, #12]
   21eb0:	f8cc 6008 	str.w	r6, [ip, #8]
   21eb4:	e9c7 5504 	strd	r5, r5, [r7, #16]
   21eb8:	e9c5 ee02 	strd	lr, lr, [r5, #8]
   21ebc:	f8c5 8004 	str.w	r8, [r5, #4]
   21ec0:	505a      	str	r2, [r3, r1]
   21ec2:	f000 fa19 	bl	222f8 <__malloc_unlock>
   21ec6:	e6b0      	b.n	21c2a <_malloc_r+0x52>
   21ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
   21ecc:	2040      	movs	r0, #64	; 0x40
   21ece:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   21ed2:	e6c8      	b.n	21c66 <_malloc_r+0x8e>
   21ed4:	4462      	add	r2, ip
   21ed6:	4630      	mov	r0, r6
   21ed8:	f10c 0408 	add.w	r4, ip, #8
   21edc:	6853      	ldr	r3, [r2, #4]
   21ede:	f043 0301 	orr.w	r3, r3, #1
   21ee2:	6053      	str	r3, [r2, #4]
   21ee4:	f000 fa08 	bl	222f8 <__malloc_unlock>
   21ee8:	e69f      	b.n	21c2a <_malloc_r+0x52>
   21eea:	f045 0301 	orr.w	r3, r5, #1
   21eee:	f042 0201 	orr.w	r2, r2, #1
   21ef2:	4445      	add	r5, r8
   21ef4:	f108 0408 	add.w	r4, r8, #8
   21ef8:	f8c8 3004 	str.w	r3, [r8, #4]
   21efc:	4630      	mov	r0, r6
   21efe:	60bd      	str	r5, [r7, #8]
   21f00:	606a      	str	r2, [r5, #4]
   21f02:	f000 f9f9 	bl	222f8 <__malloc_unlock>
   21f06:	4620      	mov	r0, r4
   21f08:	b003      	add	sp, #12
   21f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f0e:	441a      	add	r2, r3
   21f10:	f103 0408 	add.w	r4, r3, #8
   21f14:	4630      	mov	r0, r6
   21f16:	6851      	ldr	r1, [r2, #4]
   21f18:	e9d3 7502 	ldrd	r7, r5, [r3, #8]
   21f1c:	f041 0101 	orr.w	r1, r1, #1
   21f20:	60fd      	str	r5, [r7, #12]
   21f22:	60af      	str	r7, [r5, #8]
   21f24:	6051      	str	r1, [r2, #4]
   21f26:	f000 f9e7 	bl	222f8 <__malloc_unlock>
   21f2a:	4620      	mov	r0, r4
   21f2c:	b003      	add	sp, #12
   21f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f32:	bf00      	nop
   21f34:	200204dc 	.word	0x200204dc
   21f38:	200208e4 	.word	0x200208e4
   21f3c:	20023024 	.word	0x20023024
   21f40:	fffff000 	.word	0xfffff000
   21f44:	20022ff4 	.word	0x20022ff4
   21f48:	2002301c 	.word	0x2002301c
   21f4c:	20023020 	.word	0x20023020
   21f50:	200204e4 	.word	0x200204e4
   21f54:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   21f58:	ea4f 2352 	mov.w	r3, r2, lsr #9
   21f5c:	d359      	bcc.n	22012 <_malloc_r+0x43a>
   21f5e:	2b14      	cmp	r3, #20
   21f60:	f200 80b1 	bhi.w	220c6 <_malloc_r+0x4ee>
   21f64:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   21f68:	335b      	adds	r3, #91	; 0x5b
   21f6a:	00c9      	lsls	r1, r1, #3
   21f6c:	187c      	adds	r4, r7, r1
   21f6e:	5879      	ldr	r1, [r7, r1]
   21f70:	3c08      	subs	r4, #8
   21f72:	428c      	cmp	r4, r1
   21f74:	f000 808c 	beq.w	22090 <_malloc_r+0x4b8>
   21f78:	684b      	ldr	r3, [r1, #4]
   21f7a:	f023 0303 	bic.w	r3, r3, #3
   21f7e:	4293      	cmp	r3, r2
   21f80:	d902      	bls.n	21f88 <_malloc_r+0x3b0>
   21f82:	6889      	ldr	r1, [r1, #8]
   21f84:	428c      	cmp	r4, r1
   21f86:	d1f7      	bne.n	21f78 <_malloc_r+0x3a0>
   21f88:	68cc      	ldr	r4, [r1, #12]
   21f8a:	687a      	ldr	r2, [r7, #4]
   21f8c:	e9cc 1402 	strd	r1, r4, [ip, #8]
   21f90:	f8c4 c008 	str.w	ip, [r4, #8]
   21f94:	f8c1 c00c 	str.w	ip, [r1, #12]
   21f98:	e758      	b.n	21e4c <_malloc_r+0x274>
   21f9a:	2b14      	cmp	r3, #20
   21f9c:	d93f      	bls.n	2201e <_malloc_r+0x446>
   21f9e:	2b54      	cmp	r3, #84	; 0x54
   21fa0:	f200 8099 	bhi.w	220d6 <_malloc_r+0x4fe>
   21fa4:	0b2b      	lsrs	r3, r5, #12
   21fa6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   21faa:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   21fae:	00c3      	lsls	r3, r0, #3
   21fb0:	e659      	b.n	21c66 <_malloc_r+0x8e>
   21fb2:	f108 0801 	add.w	r8, r8, #1
   21fb6:	f10c 0c08 	add.w	ip, ip, #8
   21fba:	f018 0f03 	tst.w	r8, #3
   21fbe:	f47f af57 	bne.w	21e70 <_malloc_r+0x298>
   21fc2:	e037      	b.n	22034 <_malloc_r+0x45c>
   21fc4:	4419      	add	r1, r3
   21fc6:	68da      	ldr	r2, [r3, #12]
   21fc8:	461c      	mov	r4, r3
   21fca:	4630      	mov	r0, r6
   21fcc:	684b      	ldr	r3, [r1, #4]
   21fce:	f854 5f08 	ldr.w	r5, [r4, #8]!
   21fd2:	f043 0301 	orr.w	r3, r3, #1
   21fd6:	604b      	str	r3, [r1, #4]
   21fd8:	60ea      	str	r2, [r5, #12]
   21fda:	6095      	str	r5, [r2, #8]
   21fdc:	f000 f98c 	bl	222f8 <__malloc_unlock>
   21fe0:	e623      	b.n	21c2a <_malloc_r+0x52>
   21fe2:	08e8      	lsrs	r0, r5, #3
   21fe4:	f105 0308 	add.w	r3, r5, #8
   21fe8:	e606      	b.n	21bf8 <_malloc_r+0x20>
   21fea:	f045 0401 	orr.w	r4, r5, #1
   21fee:	f043 0101 	orr.w	r1, r3, #1
   21ff2:	4465      	add	r5, ip
   21ff4:	4630      	mov	r0, r6
   21ff6:	f8cc 4004 	str.w	r4, [ip, #4]
   21ffa:	f10c 0408 	add.w	r4, ip, #8
   21ffe:	e9c7 5504 	strd	r5, r5, [r7, #16]
   22002:	e9c5 ee02 	strd	lr, lr, [r5, #8]
   22006:	6069      	str	r1, [r5, #4]
   22008:	f84c 3002 	str.w	r3, [ip, r2]
   2200c:	f000 f974 	bl	222f8 <__malloc_unlock>
   22010:	e60b      	b.n	21c2a <_malloc_r+0x52>
   22012:	0993      	lsrs	r3, r2, #6
   22014:	f103 0139 	add.w	r1, r3, #57	; 0x39
   22018:	3338      	adds	r3, #56	; 0x38
   2201a:	00c9      	lsls	r1, r1, #3
   2201c:	e7a6      	b.n	21f6c <_malloc_r+0x394>
   2201e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   22022:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   22026:	00c3      	lsls	r3, r0, #3
   22028:	e61d      	b.n	21c66 <_malloc_r+0x8e>
   2202a:	f859 3908 	ldr.w	r3, [r9], #-8
   2202e:	454b      	cmp	r3, r9
   22030:	f040 809c 	bne.w	2216c <_malloc_r+0x594>
   22034:	f010 0f03 	tst.w	r0, #3
   22038:	f100 30ff 	add.w	r0, r0, #4294967295
   2203c:	d1f5      	bne.n	2202a <_malloc_r+0x452>
   2203e:	687b      	ldr	r3, [r7, #4]
   22040:	ea23 0304 	bic.w	r3, r3, r4
   22044:	607b      	str	r3, [r7, #4]
   22046:	0064      	lsls	r4, r4, #1
   22048:	f43f ae31 	beq.w	21cae <_malloc_r+0xd6>
   2204c:	429c      	cmp	r4, r3
   2204e:	d903      	bls.n	22058 <_malloc_r+0x480>
   22050:	e62d      	b.n	21cae <_malloc_r+0xd6>
   22052:	0064      	lsls	r4, r4, #1
   22054:	f108 0804 	add.w	r8, r8, #4
   22058:	421c      	tst	r4, r3
   2205a:	d0fa      	beq.n	22052 <_malloc_r+0x47a>
   2205c:	4640      	mov	r0, r8
   2205e:	e703      	b.n	21e68 <_malloc_r+0x290>
   22060:	f8d7 8008 	ldr.w	r8, [r7, #8]
   22064:	f8d8 1004 	ldr.w	r1, [r8, #4]
   22068:	e6a8      	b.n	21dbc <_malloc_r+0x1e4>
   2206a:	f3cb 010b 	ubfx	r1, fp, #0, #12
   2206e:	2900      	cmp	r1, #0
   22070:	f47f ae4f 	bne.w	21d12 <_malloc_r+0x13a>
   22074:	444c      	add	r4, r9
   22076:	f8d7 8008 	ldr.w	r8, [r7, #8]
   2207a:	f044 0101 	orr.w	r1, r4, #1
   2207e:	f8c8 1004 	str.w	r1, [r8, #4]
   22082:	e691      	b.n	21da8 <_malloc_r+0x1d0>
   22084:	f8c2 a000 	str.w	sl, [r2]
   22088:	e64b      	b.n	21d22 <_malloc_r+0x14a>
   2208a:	f103 0410 	add.w	r4, r3, #16
   2208e:	e62a      	b.n	21ce6 <_malloc_r+0x10e>
   22090:	109a      	asrs	r2, r3, #2
   22092:	f04f 0801 	mov.w	r8, #1
   22096:	687b      	ldr	r3, [r7, #4]
   22098:	fa08 f202 	lsl.w	r2, r8, r2
   2209c:	431a      	orrs	r2, r3
   2209e:	607a      	str	r2, [r7, #4]
   220a0:	e774      	b.n	21f8c <_malloc_r+0x3b4>
   220a2:	eb0a 0b04 	add.w	fp, sl, r4
   220a6:	4630      	mov	r0, r6
   220a8:	9201      	str	r2, [sp, #4]
   220aa:	f1cb 0b00 	rsb	fp, fp, #0
   220ae:	f3cb 0b0b 	ubfx	fp, fp, #0, #12
   220b2:	4659      	mov	r1, fp
   220b4:	f000 fb28 	bl	22708 <_sbrk_r>
   220b8:	1c43      	adds	r3, r0, #1
   220ba:	9a01      	ldr	r2, [sp, #4]
   220bc:	4b2c      	ldr	r3, [pc, #176]	; (22170 <_malloc_r+0x598>)
   220be:	f47f ae48 	bne.w	21d52 <_malloc_r+0x17a>
   220c2:	4693      	mov	fp, r2
   220c4:	e649      	b.n	21d5a <_malloc_r+0x182>
   220c6:	2b54      	cmp	r3, #84	; 0x54
   220c8:	d815      	bhi.n	220f6 <_malloc_r+0x51e>
   220ca:	0b13      	lsrs	r3, r2, #12
   220cc:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   220d0:	336e      	adds	r3, #110	; 0x6e
   220d2:	00c9      	lsls	r1, r1, #3
   220d4:	e74a      	b.n	21f6c <_malloc_r+0x394>
   220d6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   220da:	d815      	bhi.n	22108 <_malloc_r+0x530>
   220dc:	0beb      	lsrs	r3, r5, #15
   220de:	f103 0078 	add.w	r0, r3, #120	; 0x78
   220e2:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   220e6:	00c3      	lsls	r3, r0, #3
   220e8:	e5bd      	b.n	21c66 <_malloc_r+0x8e>
   220ea:	46d0      	mov	r8, sl
   220ec:	e65c      	b.n	21da8 <_malloc_r+0x1d0>
   220ee:	2301      	movs	r3, #1
   220f0:	f8ca 3004 	str.w	r3, [sl, #4]
   220f4:	e66b      	b.n	21dce <_malloc_r+0x1f6>
   220f6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   220fa:	d823      	bhi.n	22144 <_malloc_r+0x56c>
   220fc:	0bd3      	lsrs	r3, r2, #15
   220fe:	f103 0178 	add.w	r1, r3, #120	; 0x78
   22102:	3377      	adds	r3, #119	; 0x77
   22104:	00c9      	lsls	r1, r1, #3
   22106:	e731      	b.n	21f6c <_malloc_r+0x394>
   22108:	f240 5254 	movw	r2, #1364	; 0x554
   2210c:	4293      	cmp	r3, r2
   2210e:	d823      	bhi.n	22158 <_malloc_r+0x580>
   22110:	0cab      	lsrs	r3, r5, #18
   22112:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   22116:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   2211a:	00c3      	lsls	r3, r0, #3
   2211c:	e5a3      	b.n	21c66 <_malloc_r+0x8e>
   2211e:	f108 0108 	add.w	r1, r8, #8
   22122:	4630      	mov	r0, r6
   22124:	f003 feda 	bl	25edc <_free_r>
   22128:	f8d7 8008 	ldr.w	r8, [r7, #8]
   2212c:	4b10      	ldr	r3, [pc, #64]	; (22170 <_malloc_r+0x598>)
   2212e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   22132:	6818      	ldr	r0, [r3, #0]
   22134:	e638      	b.n	21da8 <_malloc_r+0x1d0>
   22136:	3a08      	subs	r2, #8
   22138:	f04f 0b00 	mov.w	fp, #0
   2213c:	4414      	add	r4, r2
   2213e:	eba4 040a 	sub.w	r4, r4, sl
   22142:	e60a      	b.n	21d5a <_malloc_r+0x182>
   22144:	f240 5154 	movw	r1, #1364	; 0x554
   22148:	428b      	cmp	r3, r1
   2214a:	d80b      	bhi.n	22164 <_malloc_r+0x58c>
   2214c:	0c93      	lsrs	r3, r2, #18
   2214e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   22152:	337c      	adds	r3, #124	; 0x7c
   22154:	00c9      	lsls	r1, r1, #3
   22156:	e709      	b.n	21f6c <_malloc_r+0x394>
   22158:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   2215c:	207f      	movs	r0, #127	; 0x7f
   2215e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   22162:	e580      	b.n	21c66 <_malloc_r+0x8e>
   22164:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   22168:	237e      	movs	r3, #126	; 0x7e
   2216a:	e6ff      	b.n	21f6c <_malloc_r+0x394>
   2216c:	687b      	ldr	r3, [r7, #4]
   2216e:	e76a      	b.n	22046 <_malloc_r+0x46e>
   22170:	20022ff4 	.word	0x20022ff4

00022174 <memchr>:
   22174:	b470      	push	{r4, r5, r6}
   22176:	0784      	lsls	r4, r0, #30
   22178:	b2ce      	uxtb	r6, r1
   2217a:	d012      	beq.n	221a2 <memchr+0x2e>
   2217c:	4603      	mov	r3, r0
   2217e:	1e55      	subs	r5, r2, #1
   22180:	b922      	cbnz	r2, 2218c <memchr+0x18>
   22182:	e00b      	b.n	2219c <memchr+0x28>
   22184:	079a      	lsls	r2, r3, #30
   22186:	d00e      	beq.n	221a6 <memchr+0x32>
   22188:	3d01      	subs	r5, #1
   2218a:	d307      	bcc.n	2219c <memchr+0x28>
   2218c:	4618      	mov	r0, r3
   2218e:	f813 2b01 	ldrb.w	r2, [r3], #1
   22192:	42b2      	cmp	r2, r6
   22194:	461c      	mov	r4, r3
   22196:	d1f5      	bne.n	22184 <memchr+0x10>
   22198:	bc70      	pop	{r4, r5, r6}
   2219a:	4770      	bx	lr
   2219c:	2000      	movs	r0, #0
   2219e:	bc70      	pop	{r4, r5, r6}
   221a0:	4770      	bx	lr
   221a2:	4604      	mov	r4, r0
   221a4:	4615      	mov	r5, r2
   221a6:	2d03      	cmp	r5, #3
   221a8:	d80c      	bhi.n	221c4 <memchr+0x50>
   221aa:	2d00      	cmp	r5, #0
   221ac:	d0f6      	beq.n	2219c <memchr+0x28>
   221ae:	1963      	adds	r3, r4, r5
   221b0:	e001      	b.n	221b6 <memchr+0x42>
   221b2:	429c      	cmp	r4, r3
   221b4:	d0f2      	beq.n	2219c <memchr+0x28>
   221b6:	4620      	mov	r0, r4
   221b8:	f814 2b01 	ldrb.w	r2, [r4], #1
   221bc:	42b2      	cmp	r2, r6
   221be:	d1f8      	bne.n	221b2 <memchr+0x3e>
   221c0:	bc70      	pop	{r4, r5, r6}
   221c2:	4770      	bx	lr
   221c4:	020a      	lsls	r2, r1, #8
   221c6:	4621      	mov	r1, r4
   221c8:	b292      	uxth	r2, r2
   221ca:	4332      	orrs	r2, r6
   221cc:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   221d0:	460c      	mov	r4, r1
   221d2:	3104      	adds	r1, #4
   221d4:	6823      	ldr	r3, [r4, #0]
   221d6:	4053      	eors	r3, r2
   221d8:	f1a3 3001 	sub.w	r0, r3, #16843009	; 0x1010101
   221dc:	ea20 0303 	bic.w	r3, r0, r3
   221e0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   221e4:	d1e3      	bne.n	221ae <memchr+0x3a>
   221e6:	3d04      	subs	r5, #4
   221e8:	460c      	mov	r4, r1
   221ea:	2d03      	cmp	r5, #3
   221ec:	d8f0      	bhi.n	221d0 <memchr+0x5c>
   221ee:	e7dc      	b.n	221aa <memchr+0x36>

000221f0 <memcmp>:
   221f0:	2a03      	cmp	r2, #3
   221f2:	b470      	push	{r4, r5, r6}
   221f4:	d912      	bls.n	2221c <memcmp+0x2c>
   221f6:	ea40 0501 	orr.w	r5, r0, r1
   221fa:	4604      	mov	r4, r0
   221fc:	460b      	mov	r3, r1
   221fe:	07ad      	lsls	r5, r5, #30
   22200:	d11d      	bne.n	2223e <memcmp+0x4e>
   22202:	4619      	mov	r1, r3
   22204:	4620      	mov	r0, r4
   22206:	f853 5b04 	ldr.w	r5, [r3], #4
   2220a:	f854 6b04 	ldr.w	r6, [r4], #4
   2220e:	42ae      	cmp	r6, r5
   22210:	d115      	bne.n	2223e <memcmp+0x4e>
   22212:	3a04      	subs	r2, #4
   22214:	4620      	mov	r0, r4
   22216:	4619      	mov	r1, r3
   22218:	2a03      	cmp	r2, #3
   2221a:	d8f2      	bhi.n	22202 <memcmp+0x12>
   2221c:	1e56      	subs	r6, r2, #1
   2221e:	b19a      	cbz	r2, 22248 <memcmp+0x58>
   22220:	3901      	subs	r1, #1
   22222:	1e44      	subs	r4, r0, #1
   22224:	e001      	b.n	2222a <memcmp+0x3a>
   22226:	18c3      	adds	r3, r0, r3
   22228:	d00b      	beq.n	22242 <memcmp+0x52>
   2222a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
   2222e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   22232:	1b33      	subs	r3, r6, r4
   22234:	4295      	cmp	r5, r2
   22236:	d0f6      	beq.n	22226 <memcmp+0x36>
   22238:	1aa8      	subs	r0, r5, r2
   2223a:	bc70      	pop	{r4, r5, r6}
   2223c:	4770      	bx	lr
   2223e:	1e56      	subs	r6, r2, #1
   22240:	e7ee      	b.n	22220 <memcmp+0x30>
   22242:	4618      	mov	r0, r3
   22244:	bc70      	pop	{r4, r5, r6}
   22246:	4770      	bx	lr
   22248:	4610      	mov	r0, r2
   2224a:	e7f6      	b.n	2223a <memcmp+0x4a>

0002224c <memset>:
   2224c:	b4f0      	push	{r4, r5, r6, r7}
   2224e:	0786      	lsls	r6, r0, #30
   22250:	d046      	beq.n	222e0 <memset+0x94>
   22252:	1e54      	subs	r4, r2, #1
   22254:	2a00      	cmp	r2, #0
   22256:	d03c      	beq.n	222d2 <memset+0x86>
   22258:	b2ca      	uxtb	r2, r1
   2225a:	4603      	mov	r3, r0
   2225c:	e001      	b.n	22262 <memset+0x16>
   2225e:	3c01      	subs	r4, #1
   22260:	d337      	bcc.n	222d2 <memset+0x86>
   22262:	f803 2b01 	strb.w	r2, [r3], #1
   22266:	079d      	lsls	r5, r3, #30
   22268:	d1f9      	bne.n	2225e <memset+0x12>
   2226a:	2c03      	cmp	r4, #3
   2226c:	d92a      	bls.n	222c4 <memset+0x78>
   2226e:	b2cd      	uxtb	r5, r1
   22270:	2c0f      	cmp	r4, #15
   22272:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   22276:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   2227a:	d934      	bls.n	222e6 <memset+0x9a>
   2227c:	f1a4 0610 	sub.w	r6, r4, #16
   22280:	f103 0720 	add.w	r7, r3, #32
   22284:	f103 0210 	add.w	r2, r3, #16
   22288:	f026 0c0f 	bic.w	ip, r6, #15
   2228c:	0936      	lsrs	r6, r6, #4
   2228e:	4467      	add	r7, ip
   22290:	e942 5504 	strd	r5, r5, [r2, #-16]
   22294:	e942 5502 	strd	r5, r5, [r2, #-8]
   22298:	3210      	adds	r2, #16
   2229a:	42ba      	cmp	r2, r7
   2229c:	d1f8      	bne.n	22290 <memset+0x44>
   2229e:	1c72      	adds	r2, r6, #1
   222a0:	f014 0f0c 	tst.w	r4, #12
   222a4:	f004 060f 	and.w	r6, r4, #15
   222a8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   222ac:	d013      	beq.n	222d6 <memset+0x8a>
   222ae:	1f33      	subs	r3, r6, #4
   222b0:	f023 0303 	bic.w	r3, r3, #3
   222b4:	3304      	adds	r3, #4
   222b6:	4413      	add	r3, r2
   222b8:	f842 5b04 	str.w	r5, [r2], #4
   222bc:	4293      	cmp	r3, r2
   222be:	d1fb      	bne.n	222b8 <memset+0x6c>
   222c0:	f006 0403 	and.w	r4, r6, #3
   222c4:	b12c      	cbz	r4, 222d2 <memset+0x86>
   222c6:	b2ca      	uxtb	r2, r1
   222c8:	441c      	add	r4, r3
   222ca:	f803 2b01 	strb.w	r2, [r3], #1
   222ce:	429c      	cmp	r4, r3
   222d0:	d1fb      	bne.n	222ca <memset+0x7e>
   222d2:	bcf0      	pop	{r4, r5, r6, r7}
   222d4:	4770      	bx	lr
   222d6:	4634      	mov	r4, r6
   222d8:	4613      	mov	r3, r2
   222da:	2c00      	cmp	r4, #0
   222dc:	d1f3      	bne.n	222c6 <memset+0x7a>
   222de:	e7f8      	b.n	222d2 <memset+0x86>
   222e0:	4614      	mov	r4, r2
   222e2:	4603      	mov	r3, r0
   222e4:	e7c1      	b.n	2226a <memset+0x1e>
   222e6:	461a      	mov	r2, r3
   222e8:	4626      	mov	r6, r4
   222ea:	e7e0      	b.n	222ae <memset+0x62>

000222ec <__malloc_lock>:
   222ec:	4801      	ldr	r0, [pc, #4]	; (222f4 <__malloc_lock+0x8>)
   222ee:	f004 bcaf 	b.w	26c50 <__retarget_lock_acquire_recursive>
   222f2:	bf00      	nop
   222f4:	20025198 	.word	0x20025198

000222f8 <__malloc_unlock>:
   222f8:	4801      	ldr	r0, [pc, #4]	; (22300 <__malloc_unlock+0x8>)
   222fa:	f004 bcab 	b.w	26c54 <__retarget_lock_release_recursive>
   222fe:	bf00      	nop
   22300:	20025198 	.word	0x20025198

00022304 <realloc>:
   22304:	4b02      	ldr	r3, [pc, #8]	; (22310 <realloc+0xc>)
   22306:	460a      	mov	r2, r1
   22308:	4601      	mov	r1, r0
   2230a:	6818      	ldr	r0, [r3, #0]
   2230c:	f000 b802 	b.w	22314 <_realloc_r>
   22310:	200204d8 	.word	0x200204d8

00022314 <_realloc_r>:
   22314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22318:	4617      	mov	r7, r2
   2231a:	2900      	cmp	r1, #0
   2231c:	f000 80ba 	beq.w	22494 <_realloc_r+0x180>
   22320:	460c      	mov	r4, r1
   22322:	f107 050b 	add.w	r5, r7, #11
   22326:	4680      	mov	r8, r0
   22328:	f7ff ffe0 	bl	222ec <__malloc_lock>
   2232c:	f854 1c04 	ldr.w	r1, [r4, #-4]
   22330:	2d16      	cmp	r5, #22
   22332:	f1a4 0908 	sub.w	r9, r4, #8
   22336:	f021 0603 	bic.w	r6, r1, #3
   2233a:	d85d      	bhi.n	223f8 <_realloc_r+0xe4>
   2233c:	2210      	movs	r2, #16
   2233e:	2300      	movs	r3, #0
   22340:	4615      	mov	r5, r2
   22342:	42bd      	cmp	r5, r7
   22344:	f0c0 80c2 	bcc.w	224cc <_realloc_r+0x1b8>
   22348:	2b00      	cmp	r3, #0
   2234a:	f040 80bf 	bne.w	224cc <_realloc_r+0x1b8>
   2234e:	4296      	cmp	r6, r2
   22350:	da7e      	bge.n	22450 <_realloc_r+0x13c>
   22352:	4bc6      	ldr	r3, [pc, #792]	; (2266c <_realloc_r+0x358>)
   22354:	eb09 0006 	add.w	r0, r9, r6
   22358:	f8d3 c008 	ldr.w	ip, [r3, #8]
   2235c:	4584      	cmp	ip, r0
   2235e:	f000 80bc 	beq.w	224da <_realloc_r+0x1c6>
   22362:	f8d0 c004 	ldr.w	ip, [r0, #4]
   22366:	f02c 0301 	bic.w	r3, ip, #1
   2236a:	4403      	add	r3, r0
   2236c:	685b      	ldr	r3, [r3, #4]
   2236e:	07db      	lsls	r3, r3, #31
   22370:	f100 8085 	bmi.w	2247e <_realloc_r+0x16a>
   22374:	f02c 0c03 	bic.w	ip, ip, #3
   22378:	eb06 030c 	add.w	r3, r6, ip
   2237c:	4293      	cmp	r3, r2
   2237e:	f280 80fa 	bge.w	22576 <_realloc_r+0x262>
   22382:	07cb      	lsls	r3, r1, #31
   22384:	d40f      	bmi.n	223a6 <_realloc_r+0x92>
   22386:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2238a:	eba9 0a03 	sub.w	sl, r9, r3
   2238e:	f8da 3004 	ldr.w	r3, [sl, #4]
   22392:	f023 0103 	bic.w	r1, r3, #3
   22396:	448c      	add	ip, r1
   22398:	44b4      	add	ip, r6
   2239a:	4594      	cmp	ip, r2
   2239c:	da31      	bge.n	22402 <_realloc_r+0xee>
   2239e:	1873      	adds	r3, r6, r1
   223a0:	4293      	cmp	r3, r2
   223a2:	f280 80ff 	bge.w	225a4 <_realloc_r+0x290>
   223a6:	4639      	mov	r1, r7
   223a8:	4640      	mov	r0, r8
   223aa:	f7ff fc15 	bl	21bd8 <_malloc_r>
   223ae:	4607      	mov	r7, r0
   223b0:	b1e0      	cbz	r0, 223ec <_realloc_r+0xd8>
   223b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   223b6:	f1a0 0208 	sub.w	r2, r0, #8
   223ba:	f023 0301 	bic.w	r3, r3, #1
   223be:	444b      	add	r3, r9
   223c0:	4293      	cmp	r3, r2
   223c2:	f000 80de 	beq.w	22582 <_realloc_r+0x26e>
   223c6:	1f32      	subs	r2, r6, #4
   223c8:	2a24      	cmp	r2, #36	; 0x24
   223ca:	f200 810c 	bhi.w	225e6 <_realloc_r+0x2d2>
   223ce:	2a13      	cmp	r2, #19
   223d0:	f200 80dd 	bhi.w	2258e <_realloc_r+0x27a>
   223d4:	4603      	mov	r3, r0
   223d6:	4622      	mov	r2, r4
   223d8:	6811      	ldr	r1, [r2, #0]
   223da:	6019      	str	r1, [r3, #0]
   223dc:	6851      	ldr	r1, [r2, #4]
   223de:	6059      	str	r1, [r3, #4]
   223e0:	6892      	ldr	r2, [r2, #8]
   223e2:	609a      	str	r2, [r3, #8]
   223e4:	4621      	mov	r1, r4
   223e6:	4640      	mov	r0, r8
   223e8:	f003 fd78 	bl	25edc <_free_r>
   223ec:	4640      	mov	r0, r8
   223ee:	f7ff ff83 	bl	222f8 <__malloc_unlock>
   223f2:	4638      	mov	r0, r7
   223f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223f8:	f025 0507 	bic.w	r5, r5, #7
   223fc:	462a      	mov	r2, r5
   223fe:	0feb      	lsrs	r3, r5, #31
   22400:	e79f      	b.n	22342 <_realloc_r+0x2e>
   22402:	68c3      	ldr	r3, [r0, #12]
   22404:	4657      	mov	r7, sl
   22406:	6881      	ldr	r1, [r0, #8]
   22408:	1f32      	subs	r2, r6, #4
   2240a:	60cb      	str	r3, [r1, #12]
   2240c:	2a24      	cmp	r2, #36	; 0x24
   2240e:	6099      	str	r1, [r3, #8]
   22410:	f857 1f08 	ldr.w	r1, [r7, #8]!
   22414:	f8da 300c 	ldr.w	r3, [sl, #12]
   22418:	60cb      	str	r3, [r1, #12]
   2241a:	6099      	str	r1, [r3, #8]
   2241c:	f200 8112 	bhi.w	22644 <_realloc_r+0x330>
   22420:	2a13      	cmp	r2, #19
   22422:	f240 810d 	bls.w	22640 <_realloc_r+0x32c>
   22426:	6823      	ldr	r3, [r4, #0]
   22428:	2a1b      	cmp	r2, #27
   2242a:	f8ca 3008 	str.w	r3, [sl, #8]
   2242e:	6863      	ldr	r3, [r4, #4]
   22430:	f8ca 300c 	str.w	r3, [sl, #12]
   22434:	f200 8125 	bhi.w	22682 <_realloc_r+0x36e>
   22438:	3408      	adds	r4, #8
   2243a:	f10a 0310 	add.w	r3, sl, #16
   2243e:	6822      	ldr	r2, [r4, #0]
   22440:	4666      	mov	r6, ip
   22442:	46d1      	mov	r9, sl
   22444:	601a      	str	r2, [r3, #0]
   22446:	6862      	ldr	r2, [r4, #4]
   22448:	605a      	str	r2, [r3, #4]
   2244a:	68a2      	ldr	r2, [r4, #8]
   2244c:	463c      	mov	r4, r7
   2244e:	609a      	str	r2, [r3, #8]
   22450:	1b73      	subs	r3, r6, r5
   22452:	2b0f      	cmp	r3, #15
   22454:	d823      	bhi.n	2249e <_realloc_r+0x18a>
   22456:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2245a:	eb09 0106 	add.w	r1, r9, r6
   2245e:	f002 0201 	and.w	r2, r2, #1
   22462:	4332      	orrs	r2, r6
   22464:	f8c9 2004 	str.w	r2, [r9, #4]
   22468:	684b      	ldr	r3, [r1, #4]
   2246a:	f043 0301 	orr.w	r3, r3, #1
   2246e:	604b      	str	r3, [r1, #4]
   22470:	4640      	mov	r0, r8
   22472:	4627      	mov	r7, r4
   22474:	f7ff ff40 	bl	222f8 <__malloc_unlock>
   22478:	4638      	mov	r0, r7
   2247a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2247e:	07c9      	lsls	r1, r1, #31
   22480:	d491      	bmi.n	223a6 <_realloc_r+0x92>
   22482:	f854 3c08 	ldr.w	r3, [r4, #-8]
   22486:	eba9 0a03 	sub.w	sl, r9, r3
   2248a:	f8da 1004 	ldr.w	r1, [sl, #4]
   2248e:	f021 0103 	bic.w	r1, r1, #3
   22492:	e784      	b.n	2239e <_realloc_r+0x8a>
   22494:	4611      	mov	r1, r2
   22496:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2249a:	f7ff bb9d 	b.w	21bd8 <_malloc_r>
   2249e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   224a2:	eb09 0205 	add.w	r2, r9, r5
   224a6:	444e      	add	r6, r9
   224a8:	f043 0301 	orr.w	r3, r3, #1
   224ac:	f001 0101 	and.w	r1, r1, #1
   224b0:	4640      	mov	r0, r8
   224b2:	430d      	orrs	r5, r1
   224b4:	f102 0108 	add.w	r1, r2, #8
   224b8:	f8c9 5004 	str.w	r5, [r9, #4]
   224bc:	6053      	str	r3, [r2, #4]
   224be:	6873      	ldr	r3, [r6, #4]
   224c0:	f043 0301 	orr.w	r3, r3, #1
   224c4:	6073      	str	r3, [r6, #4]
   224c6:	f003 fd09 	bl	25edc <_free_r>
   224ca:	e7d1      	b.n	22470 <_realloc_r+0x15c>
   224cc:	230c      	movs	r3, #12
   224ce:	2700      	movs	r7, #0
   224d0:	f8c8 3000 	str.w	r3, [r8]
   224d4:	4638      	mov	r0, r7
   224d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   224da:	f8dc b004 	ldr.w	fp, [ip, #4]
   224de:	f105 0010 	add.w	r0, r5, #16
   224e2:	f02b 0b03 	bic.w	fp, fp, #3
   224e6:	eb06 0c0b 	add.w	ip, r6, fp
   224ea:	4584      	cmp	ip, r0
   224ec:	f280 8094 	bge.w	22618 <_realloc_r+0x304>
   224f0:	07c9      	lsls	r1, r1, #31
   224f2:	f53f af58 	bmi.w	223a6 <_realloc_r+0x92>
   224f6:	f854 1c08 	ldr.w	r1, [r4, #-8]
   224fa:	eba9 0a01 	sub.w	sl, r9, r1
   224fe:	f8da 1004 	ldr.w	r1, [sl, #4]
   22502:	f021 0103 	bic.w	r1, r1, #3
   22506:	448b      	add	fp, r1
   22508:	44b3      	add	fp, r6
   2250a:	4558      	cmp	r0, fp
   2250c:	f73f af47 	bgt.w	2239e <_realloc_r+0x8a>
   22510:	4657      	mov	r7, sl
   22512:	1f32      	subs	r2, r6, #4
   22514:	f8da 100c 	ldr.w	r1, [sl, #12]
   22518:	f857 0f08 	ldr.w	r0, [r7, #8]!
   2251c:	2a24      	cmp	r2, #36	; 0x24
   2251e:	60c1      	str	r1, [r0, #12]
   22520:	6088      	str	r0, [r1, #8]
   22522:	f200 80bc 	bhi.w	2269e <_realloc_r+0x38a>
   22526:	2a13      	cmp	r2, #19
   22528:	f240 80b7 	bls.w	2269a <_realloc_r+0x386>
   2252c:	6821      	ldr	r1, [r4, #0]
   2252e:	2a1b      	cmp	r2, #27
   22530:	f8ca 1008 	str.w	r1, [sl, #8]
   22534:	6861      	ldr	r1, [r4, #4]
   22536:	f8ca 100c 	str.w	r1, [sl, #12]
   2253a:	f200 80c1 	bhi.w	226c0 <_realloc_r+0x3ac>
   2253e:	3408      	adds	r4, #8
   22540:	f10a 0210 	add.w	r2, sl, #16
   22544:	6821      	ldr	r1, [r4, #0]
   22546:	6011      	str	r1, [r2, #0]
   22548:	6861      	ldr	r1, [r4, #4]
   2254a:	6051      	str	r1, [r2, #4]
   2254c:	68a1      	ldr	r1, [r4, #8]
   2254e:	6091      	str	r1, [r2, #8]
   22550:	ebab 0205 	sub.w	r2, fp, r5
   22554:	eb0a 0105 	add.w	r1, sl, r5
   22558:	4640      	mov	r0, r8
   2255a:	f042 0201 	orr.w	r2, r2, #1
   2255e:	6099      	str	r1, [r3, #8]
   22560:	604a      	str	r2, [r1, #4]
   22562:	f8da 3004 	ldr.w	r3, [sl, #4]
   22566:	f003 0301 	and.w	r3, r3, #1
   2256a:	431d      	orrs	r5, r3
   2256c:	f8ca 5004 	str.w	r5, [sl, #4]
   22570:	f7ff fec2 	bl	222f8 <__malloc_unlock>
   22574:	e780      	b.n	22478 <_realloc_r+0x164>
   22576:	68c2      	ldr	r2, [r0, #12]
   22578:	461e      	mov	r6, r3
   2257a:	6883      	ldr	r3, [r0, #8]
   2257c:	60da      	str	r2, [r3, #12]
   2257e:	6093      	str	r3, [r2, #8]
   22580:	e766      	b.n	22450 <_realloc_r+0x13c>
   22582:	f850 3c04 	ldr.w	r3, [r0, #-4]
   22586:	f023 0303 	bic.w	r3, r3, #3
   2258a:	441e      	add	r6, r3
   2258c:	e760      	b.n	22450 <_realloc_r+0x13c>
   2258e:	6823      	ldr	r3, [r4, #0]
   22590:	2a1b      	cmp	r2, #27
   22592:	6003      	str	r3, [r0, #0]
   22594:	6863      	ldr	r3, [r4, #4]
   22596:	6043      	str	r3, [r0, #4]
   22598:	d829      	bhi.n	225ee <_realloc_r+0x2da>
   2259a:	f104 0208 	add.w	r2, r4, #8
   2259e:	f100 0308 	add.w	r3, r0, #8
   225a2:	e719      	b.n	223d8 <_realloc_r+0xc4>
   225a4:	4657      	mov	r7, sl
   225a6:	1f32      	subs	r2, r6, #4
   225a8:	f8da 100c 	ldr.w	r1, [sl, #12]
   225ac:	f857 0f08 	ldr.w	r0, [r7, #8]!
   225b0:	2a24      	cmp	r2, #36	; 0x24
   225b2:	60c1      	str	r1, [r0, #12]
   225b4:	6088      	str	r0, [r1, #8]
   225b6:	d827      	bhi.n	22608 <_realloc_r+0x2f4>
   225b8:	2a13      	cmp	r2, #19
   225ba:	d923      	bls.n	22604 <_realloc_r+0x2f0>
   225bc:	6821      	ldr	r1, [r4, #0]
   225be:	2a1b      	cmp	r2, #27
   225c0:	f8ca 1008 	str.w	r1, [sl, #8]
   225c4:	6861      	ldr	r1, [r4, #4]
   225c6:	f8ca 100c 	str.w	r1, [sl, #12]
   225ca:	d843      	bhi.n	22654 <_realloc_r+0x340>
   225cc:	3408      	adds	r4, #8
   225ce:	f10a 0210 	add.w	r2, sl, #16
   225d2:	6821      	ldr	r1, [r4, #0]
   225d4:	461e      	mov	r6, r3
   225d6:	46d1      	mov	r9, sl
   225d8:	6011      	str	r1, [r2, #0]
   225da:	6863      	ldr	r3, [r4, #4]
   225dc:	6053      	str	r3, [r2, #4]
   225de:	68a3      	ldr	r3, [r4, #8]
   225e0:	463c      	mov	r4, r7
   225e2:	6093      	str	r3, [r2, #8]
   225e4:	e734      	b.n	22450 <_realloc_r+0x13c>
   225e6:	4621      	mov	r1, r4
   225e8:	f004 fc00 	bl	26dec <memmove>
   225ec:	e6fa      	b.n	223e4 <_realloc_r+0xd0>
   225ee:	68a3      	ldr	r3, [r4, #8]
   225f0:	2a24      	cmp	r2, #36	; 0x24
   225f2:	6083      	str	r3, [r0, #8]
   225f4:	68e3      	ldr	r3, [r4, #12]
   225f6:	60c3      	str	r3, [r0, #12]
   225f8:	d03a      	beq.n	22670 <_realloc_r+0x35c>
   225fa:	f104 0210 	add.w	r2, r4, #16
   225fe:	f100 0310 	add.w	r3, r0, #16
   22602:	e6e9      	b.n	223d8 <_realloc_r+0xc4>
   22604:	463a      	mov	r2, r7
   22606:	e7e4      	b.n	225d2 <_realloc_r+0x2be>
   22608:	4621      	mov	r1, r4
   2260a:	4638      	mov	r0, r7
   2260c:	461e      	mov	r6, r3
   2260e:	46d1      	mov	r9, sl
   22610:	463c      	mov	r4, r7
   22612:	f004 fbeb 	bl	26dec <memmove>
   22616:	e71b      	b.n	22450 <_realloc_r+0x13c>
   22618:	ebac 0205 	sub.w	r2, ip, r5
   2261c:	eb09 0105 	add.w	r1, r9, r5
   22620:	4640      	mov	r0, r8
   22622:	4627      	mov	r7, r4
   22624:	f042 0201 	orr.w	r2, r2, #1
   22628:	6099      	str	r1, [r3, #8]
   2262a:	604a      	str	r2, [r1, #4]
   2262c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   22630:	f003 0301 	and.w	r3, r3, #1
   22634:	431d      	orrs	r5, r3
   22636:	f844 5c04 	str.w	r5, [r4, #-4]
   2263a:	f7ff fe5d 	bl	222f8 <__malloc_unlock>
   2263e:	e71b      	b.n	22478 <_realloc_r+0x164>
   22640:	463b      	mov	r3, r7
   22642:	e6fc      	b.n	2243e <_realloc_r+0x12a>
   22644:	4621      	mov	r1, r4
   22646:	4638      	mov	r0, r7
   22648:	4666      	mov	r6, ip
   2264a:	46d1      	mov	r9, sl
   2264c:	463c      	mov	r4, r7
   2264e:	f004 fbcd 	bl	26dec <memmove>
   22652:	e6fd      	b.n	22450 <_realloc_r+0x13c>
   22654:	68a1      	ldr	r1, [r4, #8]
   22656:	2a24      	cmp	r2, #36	; 0x24
   22658:	f8ca 1010 	str.w	r1, [sl, #16]
   2265c:	68e1      	ldr	r1, [r4, #12]
   2265e:	f8ca 1014 	str.w	r1, [sl, #20]
   22662:	d022      	beq.n	226aa <_realloc_r+0x396>
   22664:	3410      	adds	r4, #16
   22666:	f10a 0218 	add.w	r2, sl, #24
   2266a:	e7b2      	b.n	225d2 <_realloc_r+0x2be>
   2266c:	200204dc 	.word	0x200204dc
   22670:	6921      	ldr	r1, [r4, #16]
   22672:	f104 0218 	add.w	r2, r4, #24
   22676:	f100 0318 	add.w	r3, r0, #24
   2267a:	6101      	str	r1, [r0, #16]
   2267c:	6961      	ldr	r1, [r4, #20]
   2267e:	6141      	str	r1, [r0, #20]
   22680:	e6aa      	b.n	223d8 <_realloc_r+0xc4>
   22682:	68a3      	ldr	r3, [r4, #8]
   22684:	2a24      	cmp	r2, #36	; 0x24
   22686:	f8ca 3010 	str.w	r3, [sl, #16]
   2268a:	68e3      	ldr	r3, [r4, #12]
   2268c:	f8ca 3014 	str.w	r3, [sl, #20]
   22690:	d022      	beq.n	226d8 <_realloc_r+0x3c4>
   22692:	3410      	adds	r4, #16
   22694:	f10a 0318 	add.w	r3, sl, #24
   22698:	e6d1      	b.n	2243e <_realloc_r+0x12a>
   2269a:	463a      	mov	r2, r7
   2269c:	e752      	b.n	22544 <_realloc_r+0x230>
   2269e:	4621      	mov	r1, r4
   226a0:	4638      	mov	r0, r7
   226a2:	f004 fba3 	bl	26dec <memmove>
   226a6:	4b17      	ldr	r3, [pc, #92]	; (22704 <_realloc_r+0x3f0>)
   226a8:	e752      	b.n	22550 <_realloc_r+0x23c>
   226aa:	6921      	ldr	r1, [r4, #16]
   226ac:	f10a 0220 	add.w	r2, sl, #32
   226b0:	3418      	adds	r4, #24
   226b2:	f8ca 1018 	str.w	r1, [sl, #24]
   226b6:	f854 1c04 	ldr.w	r1, [r4, #-4]
   226ba:	f8ca 101c 	str.w	r1, [sl, #28]
   226be:	e788      	b.n	225d2 <_realloc_r+0x2be>
   226c0:	68a1      	ldr	r1, [r4, #8]
   226c2:	2a24      	cmp	r2, #36	; 0x24
   226c4:	f8ca 1010 	str.w	r1, [sl, #16]
   226c8:	68e1      	ldr	r1, [r4, #12]
   226ca:	f8ca 1014 	str.w	r1, [sl, #20]
   226ce:	d00e      	beq.n	226ee <_realloc_r+0x3da>
   226d0:	3410      	adds	r4, #16
   226d2:	f10a 0218 	add.w	r2, sl, #24
   226d6:	e735      	b.n	22544 <_realloc_r+0x230>
   226d8:	6922      	ldr	r2, [r4, #16]
   226da:	f10a 0320 	add.w	r3, sl, #32
   226de:	3418      	adds	r4, #24
   226e0:	f8ca 2018 	str.w	r2, [sl, #24]
   226e4:	f854 2c04 	ldr.w	r2, [r4, #-4]
   226e8:	f8ca 201c 	str.w	r2, [sl, #28]
   226ec:	e6a7      	b.n	2243e <_realloc_r+0x12a>
   226ee:	6921      	ldr	r1, [r4, #16]
   226f0:	f10a 0220 	add.w	r2, sl, #32
   226f4:	3418      	adds	r4, #24
   226f6:	f8ca 1018 	str.w	r1, [sl, #24]
   226fa:	f854 1c04 	ldr.w	r1, [r4, #-4]
   226fe:	f8ca 101c 	str.w	r1, [sl, #28]
   22702:	e71f      	b.n	22544 <_realloc_r+0x230>
   22704:	200204dc 	.word	0x200204dc

00022708 <_sbrk_r>:
   22708:	b538      	push	{r3, r4, r5, lr}
   2270a:	2200      	movs	r2, #0
   2270c:	4d06      	ldr	r5, [pc, #24]	; (22728 <_sbrk_r+0x20>)
   2270e:	4604      	mov	r4, r0
   22710:	4608      	mov	r0, r1
   22712:	602a      	str	r2, [r5, #0]
   22714:	f7f1 fdc2 	bl	1429c <_sbrk>
   22718:	1c43      	adds	r3, r0, #1
   2271a:	d000      	beq.n	2271e <_sbrk_r+0x16>
   2271c:	bd38      	pop	{r3, r4, r5, pc}
   2271e:	682b      	ldr	r3, [r5, #0]
   22720:	2b00      	cmp	r3, #0
   22722:	d0fb      	beq.n	2271c <_sbrk_r+0x14>
   22724:	6023      	str	r3, [r4, #0]
   22726:	bd38      	pop	{r3, r4, r5, pc}
   22728:	200251ac 	.word	0x200251ac

0002272c <snprintf>:
   2272c:	b40c      	push	{r2, r3}
   2272e:	4b20      	ldr	r3, [pc, #128]	; (227b0 <snprintf+0x84>)
   22730:	b570      	push	{r4, r5, r6, lr}
   22732:	1e0c      	subs	r4, r1, #0
   22734:	b09c      	sub	sp, #112	; 0x70
   22736:	681d      	ldr	r5, [r3, #0]
   22738:	db35      	blt.n	227a6 <snprintf+0x7a>
   2273a:	f44f 7302 	mov.w	r3, #520	; 0x208
   2273e:	9002      	str	r0, [sp, #8]
   22740:	9006      	str	r0, [sp, #24]
   22742:	f8ad 3014 	strh.w	r3, [sp, #20]
   22746:	ab21      	add	r3, sp, #132	; 0x84
   22748:	d018      	beq.n	2277c <snprintf+0x50>
   2274a:	1e61      	subs	r1, r4, #1
   2274c:	f64f 74ff 	movw	r4, #65535	; 0xffff
   22750:	9a20      	ldr	r2, [sp, #128]	; 0x80
   22752:	4628      	mov	r0, r5
   22754:	9104      	str	r1, [sp, #16]
   22756:	9107      	str	r1, [sp, #28]
   22758:	a902      	add	r1, sp, #8
   2275a:	9301      	str	r3, [sp, #4]
   2275c:	f8ad 4016 	strh.w	r4, [sp, #22]
   22760:	f7ec f8be 	bl	e8e0 <_svfprintf_r>
   22764:	1c42      	adds	r2, r0, #1
   22766:	da01      	bge.n	2276c <snprintf+0x40>
   22768:	238b      	movs	r3, #139	; 0x8b
   2276a:	602b      	str	r3, [r5, #0]
   2276c:	9b02      	ldr	r3, [sp, #8]
   2276e:	2200      	movs	r2, #0
   22770:	701a      	strb	r2, [r3, #0]
   22772:	b01c      	add	sp, #112	; 0x70
   22774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   22778:	b002      	add	sp, #8
   2277a:	4770      	bx	lr
   2277c:	f64f 76ff 	movw	r6, #65535	; 0xffff
   22780:	9a20      	ldr	r2, [sp, #128]	; 0x80
   22782:	a902      	add	r1, sp, #8
   22784:	4628      	mov	r0, r5
   22786:	9301      	str	r3, [sp, #4]
   22788:	9404      	str	r4, [sp, #16]
   2278a:	9407      	str	r4, [sp, #28]
   2278c:	f8ad 6016 	strh.w	r6, [sp, #22]
   22790:	f7ec f8a6 	bl	e8e0 <_svfprintf_r>
   22794:	1c43      	adds	r3, r0, #1
   22796:	da01      	bge.n	2279c <snprintf+0x70>
   22798:	238b      	movs	r3, #139	; 0x8b
   2279a:	602b      	str	r3, [r5, #0]
   2279c:	b01c      	add	sp, #112	; 0x70
   2279e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   227a2:	b002      	add	sp, #8
   227a4:	4770      	bx	lr
   227a6:	238b      	movs	r3, #139	; 0x8b
   227a8:	f04f 30ff 	mov.w	r0, #4294967295
   227ac:	602b      	str	r3, [r5, #0]
   227ae:	e7f5      	b.n	2279c <snprintf+0x70>
   227b0:	200204d8 	.word	0x200204d8

000227b4 <__sprintf_chk>:
   227b4:	b408      	push	{r3}
   227b6:	b510      	push	{r4, lr}
   227b8:	b083      	sub	sp, #12
   227ba:	1e14      	subs	r4, r2, #0
   227bc:	ab05      	add	r3, sp, #20
   227be:	f853 1b04 	ldr.w	r1, [r3], #4
   227c2:	9301      	str	r3, [sp, #4]
   227c4:	db0c      	blt.n	227e0 <__sprintf_chk+0x2c>
   227c6:	460a      	mov	r2, r1
   227c8:	4621      	mov	r1, r4
   227ca:	f003 f813 	bl	257f4 <vsnprintf>
   227ce:	2800      	cmp	r0, #0
   227d0:	db01      	blt.n	227d6 <__sprintf_chk+0x22>
   227d2:	42a0      	cmp	r0, r4
   227d4:	d20c      	bcs.n	227f0 <__sprintf_chk+0x3c>
   227d6:	b003      	add	sp, #12
   227d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   227dc:	b001      	add	sp, #4
   227de:	4770      	bx	lr
   227e0:	461a      	mov	r2, r3
   227e2:	f003 f82d 	bl	25840 <vsprintf>
   227e6:	b003      	add	sp, #12
   227e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   227ec:	b001      	add	sp, #4
   227ee:	4770      	bx	lr
   227f0:	f7f1 fd76 	bl	142e0 <__chk_fail>

000227f4 <sscanf>:
   227f4:	b40e      	push	{r1, r2, r3}
   227f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   227f8:	b09e      	sub	sp, #120	; 0x78
   227fa:	f44f 7101 	mov.w	r1, #516	; 0x204
   227fe:	2500      	movs	r5, #0
   22800:	4f10      	ldr	r7, [pc, #64]	; (22844 <sscanf+0x50>)
   22802:	ac23      	add	r4, sp, #140	; 0x8c
   22804:	f8ad 101c 	strh.w	r1, [sp, #28]
   22808:	9004      	str	r0, [sp, #16]
   2280a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   2280e:	f854 2b04 	ldr.w	r2, [r4], #4
   22812:	9008      	str	r0, [sp, #32]
   22814:	9201      	str	r2, [sp, #4]
   22816:	f000 f929 	bl	22a6c <strlen>
   2281a:	4b0b      	ldr	r3, [pc, #44]	; (22848 <sscanf+0x54>)
   2281c:	4601      	mov	r1, r0
   2281e:	9a01      	ldr	r2, [sp, #4]
   22820:	9105      	str	r1, [sp, #20]
   22822:	9109      	str	r1, [sp, #36]	; 0x24
   22824:	a904      	add	r1, sp, #16
   22826:	6818      	ldr	r0, [r3, #0]
   22828:	4623      	mov	r3, r4
   2282a:	9403      	str	r4, [sp, #12]
   2282c:	970c      	str	r7, [sp, #48]	; 0x30
   2282e:	9510      	str	r5, [sp, #64]	; 0x40
   22830:	9515      	str	r5, [sp, #84]	; 0x54
   22832:	f8ad 601e 	strh.w	r6, [sp, #30]
   22836:	f000 fd29 	bl	2328c <__ssvfscanf_r>
   2283a:	b01e      	add	sp, #120	; 0x78
   2283c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   22840:	b003      	add	sp, #12
   22842:	4770      	bx	lr
   22844:	00022871 	.word	0x00022871
   22848:	200204d8 	.word	0x200204d8

0002284c <__sread>:
   2284c:	b510      	push	{r4, lr}
   2284e:	460c      	mov	r4, r1
   22850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   22854:	f005 f836 	bl	278c4 <_read_r>
   22858:	2800      	cmp	r0, #0
   2285a:	db03      	blt.n	22864 <__sread+0x18>
   2285c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2285e:	4403      	add	r3, r0
   22860:	6523      	str	r3, [r4, #80]	; 0x50
   22862:	bd10      	pop	{r4, pc}
   22864:	89a3      	ldrh	r3, [r4, #12]
   22866:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2286a:	81a3      	strh	r3, [r4, #12]
   2286c:	bd10      	pop	{r4, pc}
   2286e:	bf00      	nop

00022870 <__seofread>:
   22870:	2000      	movs	r0, #0
   22872:	4770      	bx	lr

00022874 <__swrite>:
   22874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22878:	460c      	mov	r4, r1
   2287a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   2287e:	461f      	mov	r7, r3
   22880:	4616      	mov	r6, r2
   22882:	05cb      	lsls	r3, r1, #23
   22884:	4605      	mov	r5, r0
   22886:	d40b      	bmi.n	228a0 <__swrite+0x2c>
   22888:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   2288c:	463b      	mov	r3, r7
   2288e:	4632      	mov	r2, r6
   22890:	4628      	mov	r0, r5
   22892:	81a1      	strh	r1, [r4, #12]
   22894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   22898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2289c:	f002 bfdc 	b.w	25858 <_write_r>
   228a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   228a4:	2302      	movs	r3, #2
   228a6:	2200      	movs	r2, #0
   228a8:	f004 f9d6 	bl	26c58 <_lseek_r>
   228ac:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   228b0:	e7ea      	b.n	22888 <__swrite+0x14>
   228b2:	bf00      	nop

000228b4 <__sseek>:
   228b4:	b510      	push	{r4, lr}
   228b6:	460c      	mov	r4, r1
   228b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   228bc:	f004 f9cc 	bl	26c58 <_lseek_r>
   228c0:	1c42      	adds	r2, r0, #1
   228c2:	89a3      	ldrh	r3, [r4, #12]
   228c4:	d004      	beq.n	228d0 <__sseek+0x1c>
   228c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   228ca:	6520      	str	r0, [r4, #80]	; 0x50
   228cc:	81a3      	strh	r3, [r4, #12]
   228ce:	bd10      	pop	{r4, pc}
   228d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   228d4:	81a3      	strh	r3, [r4, #12]
   228d6:	bd10      	pop	{r4, pc}

000228d8 <__sclose>:
   228d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   228dc:	f003 b842 	b.w	25964 <_close_r>

000228e0 <strchr>:
   228e0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   228e4:	4603      	mov	r3, r0
   228e6:	d044      	beq.n	22972 <strchr+0x92>
   228e8:	0782      	lsls	r2, r0, #30
   228ea:	d132      	bne.n	22952 <strchr+0x72>
   228ec:	b470      	push	{r4, r5, r6}
   228ee:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   228f2:	6803      	ldr	r3, [r0, #0]
   228f4:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   228f8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   228fc:	ea86 0403 	eor.w	r4, r6, r3
   22900:	ea22 0203 	bic.w	r2, r2, r3
   22904:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   22908:	ea23 0304 	bic.w	r3, r3, r4
   2290c:	4313      	orrs	r3, r2
   2290e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   22912:	d10f      	bne.n	22934 <strchr+0x54>
   22914:	f850 4f04 	ldr.w	r4, [r0, #4]!
   22918:	ea84 0506 	eor.w	r5, r4, r6
   2291c:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   22920:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   22924:	ea23 0304 	bic.w	r3, r3, r4
   22928:	ea22 0205 	bic.w	r2, r2, r5
   2292c:	4313      	orrs	r3, r2
   2292e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   22932:	d0ef      	beq.n	22914 <strchr+0x34>
   22934:	7803      	ldrb	r3, [r0, #0]
   22936:	b923      	cbnz	r3, 22942 <strchr+0x62>
   22938:	e036      	b.n	229a8 <strchr+0xc8>
   2293a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2293e:	2b00      	cmp	r3, #0
   22940:	d032      	beq.n	229a8 <strchr+0xc8>
   22942:	4299      	cmp	r1, r3
   22944:	d1f9      	bne.n	2293a <strchr+0x5a>
   22946:	e030      	b.n	229aa <strchr+0xca>
   22948:	428a      	cmp	r2, r1
   2294a:	d011      	beq.n	22970 <strchr+0x90>
   2294c:	079a      	lsls	r2, r3, #30
   2294e:	4618      	mov	r0, r3
   22950:	d0cc      	beq.n	228ec <strchr+0xc>
   22952:	4618      	mov	r0, r3
   22954:	f813 2b01 	ldrb.w	r2, [r3], #1
   22958:	2a00      	cmp	r2, #0
   2295a:	d1f5      	bne.n	22948 <strchr+0x68>
   2295c:	4610      	mov	r0, r2
   2295e:	4770      	bx	lr
   22960:	0799      	lsls	r1, r3, #30
   22962:	4618      	mov	r0, r3
   22964:	d007      	beq.n	22976 <strchr+0x96>
   22966:	4618      	mov	r0, r3
   22968:	3301      	adds	r3, #1
   2296a:	7802      	ldrb	r2, [r0, #0]
   2296c:	2a00      	cmp	r2, #0
   2296e:	d1f7      	bne.n	22960 <strchr+0x80>
   22970:	4770      	bx	lr
   22972:	0782      	lsls	r2, r0, #30
   22974:	d1f7      	bne.n	22966 <strchr+0x86>
   22976:	6802      	ldr	r2, [r0, #0]
   22978:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2297c:	ea23 0302 	bic.w	r3, r3, r2
   22980:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   22984:	d108      	bne.n	22998 <strchr+0xb8>
   22986:	f850 2f04 	ldr.w	r2, [r0, #4]!
   2298a:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2298e:	ea23 0302 	bic.w	r3, r3, r2
   22992:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   22996:	d0f6      	beq.n	22986 <strchr+0xa6>
   22998:	7803      	ldrb	r3, [r0, #0]
   2299a:	2b00      	cmp	r3, #0
   2299c:	d0e8      	beq.n	22970 <strchr+0x90>
   2299e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   229a2:	2b00      	cmp	r3, #0
   229a4:	d1fb      	bne.n	2299e <strchr+0xbe>
   229a6:	4770      	bx	lr
   229a8:	4618      	mov	r0, r3
   229aa:	bc70      	pop	{r4, r5, r6}
   229ac:	4770      	bx	lr
   229ae:	bf00      	nop

000229b0 <strcpy>:
   229b0:	ea80 0201 	eor.w	r2, r0, r1
   229b4:	4684      	mov	ip, r0
   229b6:	f012 0f03 	tst.w	r2, #3
   229ba:	d14f      	bne.n	22a5c <strcpy+0xac>
   229bc:	f011 0f03 	tst.w	r1, #3
   229c0:	d132      	bne.n	22a28 <strcpy+0x78>
   229c2:	f84d 4d04 	str.w	r4, [sp, #-4]!
   229c6:	f011 0f04 	tst.w	r1, #4
   229ca:	f851 3b04 	ldr.w	r3, [r1], #4
   229ce:	d00b      	beq.n	229e8 <strcpy+0x38>
   229d0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   229d4:	439a      	bics	r2, r3
   229d6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   229da:	bf04      	itt	eq
   229dc:	f84c 3b04 	streq.w	r3, [ip], #4
   229e0:	f851 3b04 	ldreq.w	r3, [r1], #4
   229e4:	d116      	bne.n	22a14 <strcpy+0x64>
   229e6:	bf00      	nop
   229e8:	f851 4b04 	ldr.w	r4, [r1], #4
   229ec:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   229f0:	439a      	bics	r2, r3
   229f2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   229f6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   229fa:	d10b      	bne.n	22a14 <strcpy+0x64>
   229fc:	f84c 3b04 	str.w	r3, [ip], #4
   22a00:	43a2      	bics	r2, r4
   22a02:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   22a06:	bf04      	itt	eq
   22a08:	f851 3b04 	ldreq.w	r3, [r1], #4
   22a0c:	f84c 4b04 	streq.w	r4, [ip], #4
   22a10:	d0ea      	beq.n	229e8 <strcpy+0x38>
   22a12:	4623      	mov	r3, r4
   22a14:	f80c 3b01 	strb.w	r3, [ip], #1
   22a18:	f013 0fff 	tst.w	r3, #255	; 0xff
   22a1c:	ea4f 2333 	mov.w	r3, r3, ror #8
   22a20:	d1f8      	bne.n	22a14 <strcpy+0x64>
   22a22:	f85d 4b04 	ldr.w	r4, [sp], #4
   22a26:	4770      	bx	lr
   22a28:	f011 0f01 	tst.w	r1, #1
   22a2c:	d006      	beq.n	22a3c <strcpy+0x8c>
   22a2e:	f811 2b01 	ldrb.w	r2, [r1], #1
   22a32:	f80c 2b01 	strb.w	r2, [ip], #1
   22a36:	2a00      	cmp	r2, #0
   22a38:	bf08      	it	eq
   22a3a:	4770      	bxeq	lr
   22a3c:	f011 0f02 	tst.w	r1, #2
   22a40:	d0bf      	beq.n	229c2 <strcpy+0x12>
   22a42:	f831 2b02 	ldrh.w	r2, [r1], #2
   22a46:	f012 0fff 	tst.w	r2, #255	; 0xff
   22a4a:	bf16      	itet	ne
   22a4c:	f82c 2b02 	strhne.w	r2, [ip], #2
   22a50:	f88c 2000 	strbeq.w	r2, [ip]
   22a54:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   22a58:	d1b3      	bne.n	229c2 <strcpy+0x12>
   22a5a:	4770      	bx	lr
   22a5c:	f811 2b01 	ldrb.w	r2, [r1], #1
   22a60:	f80c 2b01 	strb.w	r2, [ip], #1
   22a64:	2a00      	cmp	r2, #0
   22a66:	d1f9      	bne.n	22a5c <strcpy+0xac>
   22a68:	4770      	bx	lr
   22a6a:	bf00      	nop

00022a6c <strlen>:
   22a6c:	f020 0103 	bic.w	r1, r0, #3
   22a70:	f010 0003 	ands.w	r0, r0, #3
   22a74:	f1c0 0000 	rsb	r0, r0, #0
   22a78:	f851 3b04 	ldr.w	r3, [r1], #4
   22a7c:	f100 0c04 	add.w	ip, r0, #4
   22a80:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   22a84:	f06f 0200 	mvn.w	r2, #0
   22a88:	bf1c      	itt	ne
   22a8a:	fa22 f20c 	lsrne.w	r2, r2, ip
   22a8e:	4313      	orrne	r3, r2
   22a90:	f04f 0c01 	mov.w	ip, #1
   22a94:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   22a98:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   22a9c:	eba3 020c 	sub.w	r2, r3, ip
   22aa0:	ea22 0203 	bic.w	r2, r2, r3
   22aa4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   22aa8:	bf04      	itt	eq
   22aaa:	f851 3b04 	ldreq.w	r3, [r1], #4
   22aae:	3004      	addeq	r0, #4
   22ab0:	d0f4      	beq.n	22a9c <strlen+0x30>
   22ab2:	f1c2 0100 	rsb	r1, r2, #0
   22ab6:	ea02 0201 	and.w	r2, r2, r1
   22aba:	fab2 f282 	clz	r2, r2
   22abe:	f1c2 021f 	rsb	r2, r2, #31
   22ac2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   22ac6:	4770      	bx	lr

00022ac8 <strncmp>:
   22ac8:	b3b2      	cbz	r2, 22b38 <strncmp+0x70>
   22aca:	460b      	mov	r3, r1
   22acc:	b4f0      	push	{r4, r5, r6, r7}
   22ace:	ea40 0501 	orr.w	r5, r0, r1
   22ad2:	4604      	mov	r4, r0
   22ad4:	07ad      	lsls	r5, r5, #30
   22ad6:	d029      	beq.n	22b2c <strncmp+0x64>
   22ad8:	7820      	ldrb	r0, [r4, #0]
   22ada:	780e      	ldrb	r6, [r1, #0]
   22adc:	4286      	cmp	r6, r0
   22ade:	d10f      	bne.n	22b00 <strncmp+0x38>
   22ae0:	b33e      	cbz	r6, 22b32 <strncmp+0x6a>
   22ae2:	2a01      	cmp	r2, #1
   22ae4:	d025      	beq.n	22b32 <strncmp+0x6a>
   22ae6:	4625      	mov	r5, r4
   22ae8:	e002      	b.n	22af0 <strncmp+0x28>
   22aea:	42dc      	cmn	r4, r3
   22aec:	d021      	beq.n	22b32 <strncmp+0x6a>
   22aee:	b300      	cbz	r0, 22b32 <strncmp+0x6a>
   22af0:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   22af4:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   22af8:	43eb      	mvns	r3, r5
   22afa:	42b0      	cmp	r0, r6
   22afc:	4413      	add	r3, r2
   22afe:	d0f4      	beq.n	22aea <strncmp+0x22>
   22b00:	1b80      	subs	r0, r0, r6
   22b02:	bcf0      	pop	{r4, r5, r6, r7}
   22b04:	4770      	bx	lr
   22b06:	4619      	mov	r1, r3
   22b08:	4604      	mov	r4, r0
   22b0a:	f850 5b04 	ldr.w	r5, [r0], #4
   22b0e:	3304      	adds	r3, #4
   22b10:	680f      	ldr	r7, [r1, #0]
   22b12:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
   22b16:	42bd      	cmp	r5, r7
   22b18:	ea26 0505 	bic.w	r5, r6, r5
   22b1c:	d1dc      	bne.n	22ad8 <strncmp+0x10>
   22b1e:	3a04      	subs	r2, #4
   22b20:	4604      	mov	r4, r0
   22b22:	4619      	mov	r1, r3
   22b24:	d005      	beq.n	22b32 <strncmp+0x6a>
   22b26:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   22b2a:	d102      	bne.n	22b32 <strncmp+0x6a>
   22b2c:	2a03      	cmp	r2, #3
   22b2e:	d8ea      	bhi.n	22b06 <strncmp+0x3e>
   22b30:	e7d2      	b.n	22ad8 <strncmp+0x10>
   22b32:	2000      	movs	r0, #0
   22b34:	bcf0      	pop	{r4, r5, r6, r7}
   22b36:	4770      	bx	lr
   22b38:	4610      	mov	r0, r2
   22b3a:	4770      	bx	lr

00022b3c <strncpy>:
   22b3c:	b470      	push	{r4, r5, r6}
   22b3e:	ea40 0401 	orr.w	r4, r0, r1
   22b42:	07a3      	lsls	r3, r4, #30
   22b44:	d101      	bne.n	22b4a <strncpy+0xe>
   22b46:	2a03      	cmp	r2, #3
   22b48:	d80f      	bhi.n	22b6a <strncpy+0x2e>
   22b4a:	4604      	mov	r4, r0
   22b4c:	1e4d      	subs	r5, r1, #1
   22b4e:	e007      	b.n	22b60 <strncpy+0x24>
   22b50:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   22b54:	1e56      	subs	r6, r2, #1
   22b56:	f803 1b01 	strb.w	r1, [r3], #1
   22b5a:	b1c9      	cbz	r1, 22b90 <strncpy+0x54>
   22b5c:	4632      	mov	r2, r6
   22b5e:	461c      	mov	r4, r3
   22b60:	4623      	mov	r3, r4
   22b62:	2a00      	cmp	r2, #0
   22b64:	d1f4      	bne.n	22b50 <strncpy+0x14>
   22b66:	bc70      	pop	{r4, r5, r6}
   22b68:	4770      	bx	lr
   22b6a:	460b      	mov	r3, r1
   22b6c:	4604      	mov	r4, r0
   22b6e:	4619      	mov	r1, r3
   22b70:	f853 6b04 	ldr.w	r6, [r3], #4
   22b74:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   22b78:	ea25 0506 	bic.w	r5, r5, r6
   22b7c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   22b80:	d1e4      	bne.n	22b4c <strncpy+0x10>
   22b82:	3a04      	subs	r2, #4
   22b84:	4619      	mov	r1, r3
   22b86:	f844 6b04 	str.w	r6, [r4], #4
   22b8a:	2a03      	cmp	r2, #3
   22b8c:	d8ef      	bhi.n	22b6e <strncpy+0x32>
   22b8e:	e7dd      	b.n	22b4c <strncpy+0x10>
   22b90:	2e00      	cmp	r6, #0
   22b92:	d0e8      	beq.n	22b66 <strncpy+0x2a>
   22b94:	4422      	add	r2, r4
   22b96:	f803 1b01 	strb.w	r1, [r3], #1
   22b9a:	4293      	cmp	r3, r2
   22b9c:	d1fb      	bne.n	22b96 <strncpy+0x5a>
   22b9e:	bc70      	pop	{r4, r5, r6}
   22ba0:	4770      	bx	lr
   22ba2:	bf00      	nop

00022ba4 <two_way_long_needle>:
   22ba4:	2b01      	cmp	r3, #1
   22ba6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22baa:	461d      	mov	r5, r3
   22bac:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
   22bb0:	4682      	mov	sl, r0
   22bb2:	460f      	mov	r7, r1
   22bb4:	4690      	mov	r8, r2
   22bb6:	f04f 0301 	mov.w	r3, #1
   22bba:	f240 814d 	bls.w	22e58 <_flash_used+0x18>
   22bbe:	2400      	movs	r4, #0
   22bc0:	f04f 30ff 	mov.w	r0, #4294967295
   22bc4:	4619      	mov	r1, r3
   22bc6:	469c      	mov	ip, r3
   22bc8:	e006      	b.n	22bd8 <two_way_long_needle+0x34>
   22bca:	eba3 0c00 	sub.w	ip, r3, r0
   22bce:	461c      	mov	r4, r3
   22bd0:	2101      	movs	r1, #1
   22bd2:	190b      	adds	r3, r1, r4
   22bd4:	429d      	cmp	r5, r3
   22bd6:	d910      	bls.n	22bfa <two_way_long_needle+0x56>
   22bd8:	eb08 0200 	add.w	r2, r8, r0
   22bdc:	f818 6003 	ldrb.w	r6, [r8, r3]
   22be0:	5c52      	ldrb	r2, [r2, r1]
   22be2:	4296      	cmp	r6, r2
   22be4:	d3f1      	bcc.n	22bca <two_way_long_needle+0x26>
   22be6:	f000 8083 	beq.w	22cf0 <two_way_long_needle+0x14c>
   22bea:	f04f 0c01 	mov.w	ip, #1
   22bee:	4620      	mov	r0, r4
   22bf0:	4661      	mov	r1, ip
   22bf2:	4464      	add	r4, ip
   22bf4:	190b      	adds	r3, r1, r4
   22bf6:	429d      	cmp	r5, r3
   22bf8:	d8ee      	bhi.n	22bd8 <two_way_long_needle+0x34>
   22bfa:	f8cd c004 	str.w	ip, [sp, #4]
   22bfe:	f04f 0c01 	mov.w	ip, #1
   22c02:	2400      	movs	r4, #0
   22c04:	f04f 36ff 	mov.w	r6, #4294967295
   22c08:	4661      	mov	r1, ip
   22c0a:	4663      	mov	r3, ip
   22c0c:	e006      	b.n	22c1c <two_way_long_needle+0x78>
   22c0e:	eba3 0c06 	sub.w	ip, r3, r6
   22c12:	461c      	mov	r4, r3
   22c14:	2101      	movs	r1, #1
   22c16:	1863      	adds	r3, r4, r1
   22c18:	429d      	cmp	r5, r3
   22c1a:	d90f      	bls.n	22c3c <two_way_long_needle+0x98>
   22c1c:	eb08 0201 	add.w	r2, r8, r1
   22c20:	f818 e003 	ldrb.w	lr, [r8, r3]
   22c24:	5d92      	ldrb	r2, [r2, r6]
   22c26:	4596      	cmp	lr, r2
   22c28:	d8f1      	bhi.n	22c0e <two_way_long_needle+0x6a>
   22c2a:	d069      	beq.n	22d00 <two_way_long_needle+0x15c>
   22c2c:	f04f 0c01 	mov.w	ip, #1
   22c30:	4626      	mov	r6, r4
   22c32:	4661      	mov	r1, ip
   22c34:	4464      	add	r4, ip
   22c36:	1863      	adds	r3, r4, r1
   22c38:	429d      	cmp	r5, r3
   22c3a:	d8ef      	bhi.n	22c1c <two_way_long_needle+0x78>
   22c3c:	3601      	adds	r6, #1
   22c3e:	f100 0b01 	add.w	fp, r0, #1
   22c42:	45b3      	cmp	fp, r6
   22c44:	d802      	bhi.n	22c4c <two_way_long_needle+0xa8>
   22c46:	46b3      	mov	fp, r6
   22c48:	f8cd c004 	str.w	ip, [sp, #4]
   22c4c:	ab05      	add	r3, sp, #20
   22c4e:	f20d 4214 	addw	r2, sp, #1044	; 0x414
   22c52:	f843 5f04 	str.w	r5, [r3, #4]!
   22c56:	4293      	cmp	r3, r2
   22c58:	d1fb      	bne.n	22c52 <two_way_long_needle+0xae>
   22c5a:	2d00      	cmp	r5, #0
   22c5c:	f000 80f7 	beq.w	22e4e <_flash_used+0xe>
   22c60:	1e6c      	subs	r4, r5, #1
   22c62:	ae06      	add	r6, sp, #24
   22c64:	f108 32ff 	add.w	r2, r8, #4294967295
   22c68:	eb08 0004 	add.w	r0, r8, r4
   22c6c:	9600      	str	r6, [sp, #0]
   22c6e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   22c72:	43d3      	mvns	r3, r2
   22c74:	4282      	cmp	r2, r0
   22c76:	442b      	add	r3, r5
   22c78:	4443      	add	r3, r8
   22c7a:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
   22c7e:	d1f6      	bne.n	22c6e <two_way_long_needle+0xca>
   22c80:	9e01      	ldr	r6, [sp, #4]
   22c82:	465a      	mov	r2, fp
   22c84:	4640      	mov	r0, r8
   22c86:	eb08 0106 	add.w	r1, r8, r6
   22c8a:	f7ff fab1 	bl	221f0 <memcmp>
   22c8e:	2800      	cmp	r0, #0
   22c90:	f040 8089 	bne.w	22da6 <two_way_long_needle+0x202>
   22c94:	f10b 33ff 	add.w	r3, fp, #4294967295
   22c98:	4681      	mov	r9, r0
   22c9a:	f8cd 8008 	str.w	r8, [sp, #8]
   22c9e:	9305      	str	r3, [sp, #20]
   22ca0:	1bab      	subs	r3, r5, r6
   22ca2:	4606      	mov	r6, r0
   22ca4:	9303      	str	r3, [sp, #12]
   22ca6:	eb0a 0806 	add.w	r8, sl, r6
   22caa:	9a00      	ldr	r2, [sp, #0]
   22cac:	f818 3004 	ldrb.w	r3, [r8, r4]
   22cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   22cb4:	b35b      	cbz	r3, 22d0e <two_way_long_needle+0x16a>
   22cb6:	f1b9 0f00 	cmp.w	r9, #0
   22cba:	d004      	beq.n	22cc6 <two_way_long_needle+0x122>
   22cbc:	9a01      	ldr	r2, [sp, #4]
   22cbe:	4293      	cmp	r3, r2
   22cc0:	9a03      	ldr	r2, [sp, #12]
   22cc2:	bf38      	it	cc
   22cc4:	4613      	movcc	r3, r2
   22cc6:	441e      	add	r6, r3
   22cc8:	f04f 0900 	mov.w	r9, #0
   22ccc:	1b7b      	subs	r3, r7, r5
   22cce:	42b3      	cmp	r3, r6
   22cd0:	d2e9      	bcs.n	22ca6 <two_way_long_needle+0x102>
   22cd2:	eb0a 0007 	add.w	r0, sl, r7
   22cd6:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
   22cda:	f004 fef7 	bl	27acc <strnlen>
   22cde:	4407      	add	r7, r0
   22ce0:	1b7b      	subs	r3, r7, r5
   22ce2:	42b3      	cmp	r3, r6
   22ce4:	d2df      	bcs.n	22ca6 <two_way_long_needle+0x102>
   22ce6:	2000      	movs	r0, #0
   22ce8:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   22cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22cf0:	458c      	cmp	ip, r1
   22cf2:	f101 0101 	add.w	r1, r1, #1
   22cf6:	f47f af6c 	bne.w	22bd2 <two_way_long_needle+0x2e>
   22cfa:	4464      	add	r4, ip
   22cfc:	2101      	movs	r1, #1
   22cfe:	e768      	b.n	22bd2 <two_way_long_needle+0x2e>
   22d00:	458c      	cmp	ip, r1
   22d02:	f101 0101 	add.w	r1, r1, #1
   22d06:	d186      	bne.n	22c16 <two_way_long_needle+0x72>
   22d08:	4464      	add	r4, ip
   22d0a:	2101      	movs	r1, #1
   22d0c:	e783      	b.n	22c16 <two_way_long_needle+0x72>
   22d0e:	45cb      	cmp	fp, r9
   22d10:	465b      	mov	r3, fp
   22d12:	bf38      	it	cc
   22d14:	464b      	movcc	r3, r9
   22d16:	42a3      	cmp	r3, r4
   22d18:	d215      	bcs.n	22d46 <two_way_long_needle+0x1a2>
   22d1a:	1e59      	subs	r1, r3, #1
   22d1c:	199a      	adds	r2, r3, r6
   22d1e:	9802      	ldr	r0, [sp, #8]
   22d20:	4452      	add	r2, sl
   22d22:	4401      	add	r1, r0
   22d24:	e002      	b.n	22d2c <two_way_long_needle+0x188>
   22d26:	3301      	adds	r3, #1
   22d28:	42a3      	cmp	r3, r4
   22d2a:	d20c      	bcs.n	22d46 <two_way_long_needle+0x1a2>
   22d2c:	f812 0b01 	ldrb.w	r0, [r2], #1
   22d30:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   22d34:	4584      	cmp	ip, r0
   22d36:	d0f6      	beq.n	22d26 <two_way_long_needle+0x182>
   22d38:	f1cb 0201 	rsb	r2, fp, #1
   22d3c:	f04f 0900 	mov.w	r9, #0
   22d40:	4416      	add	r6, r2
   22d42:	441e      	add	r6, r3
   22d44:	e7c2      	b.n	22ccc <two_way_long_needle+0x128>
   22d46:	45cb      	cmp	fp, r9
   22d48:	9b05      	ldr	r3, [sp, #20]
   22d4a:	d97e      	bls.n	22e4a <_flash_used+0xa>
   22d4c:	eb0b 0206 	add.w	r2, fp, r6
   22d50:	9902      	ldr	r1, [sp, #8]
   22d52:	f8cd b010 	str.w	fp, [sp, #16]
   22d56:	4459      	add	r1, fp
   22d58:	4452      	add	r2, sl
   22d5a:	e002      	b.n	22d62 <two_way_long_needle+0x1be>
   22d5c:	454b      	cmp	r3, r9
   22d5e:	4673      	mov	r3, lr
   22d60:	d015      	beq.n	22d8e <two_way_long_needle+0x1ea>
   22d62:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
   22d66:	f103 0b01 	add.w	fp, r3, #1
   22d6a:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   22d6e:	f103 3eff 	add.w	lr, r3, #4294967295
   22d72:	4584      	cmp	ip, r0
   22d74:	d0f2      	beq.n	22d5c <two_way_long_needle+0x1b8>
   22d76:	465b      	mov	r3, fp
   22d78:	f8dd b010 	ldr.w	fp, [sp, #16]
   22d7c:	f109 0901 	add.w	r9, r9, #1
   22d80:	4599      	cmp	r9, r3
   22d82:	d80b      	bhi.n	22d9c <two_way_long_needle+0x1f8>
   22d84:	9b01      	ldr	r3, [sp, #4]
   22d86:	f8dd 900c 	ldr.w	r9, [sp, #12]
   22d8a:	441e      	add	r6, r3
   22d8c:	e79e      	b.n	22ccc <two_way_long_needle+0x128>
   22d8e:	464b      	mov	r3, r9
   22d90:	f109 0901 	add.w	r9, r9, #1
   22d94:	f8dd b010 	ldr.w	fp, [sp, #16]
   22d98:	4599      	cmp	r9, r3
   22d9a:	d9f3      	bls.n	22d84 <two_way_long_needle+0x1e0>
   22d9c:	4640      	mov	r0, r8
   22d9e:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   22da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22da6:	eba5 030b 	sub.w	r3, r5, fp
   22daa:	f10b 32ff 	add.w	r2, fp, #4294967295
   22dae:	2600      	movs	r6, #0
   22db0:	f445 6900 	orr.w	r9, r5, #2048	; 0x800
   22db4:	455b      	cmp	r3, fp
   22db6:	9201      	str	r2, [sp, #4]
   22db8:	f1cb 0201 	rsb	r2, fp, #1
   22dbc:	bf38      	it	cc
   22dbe:	465b      	movcc	r3, fp
   22dc0:	9202      	str	r2, [sp, #8]
   22dc2:	3301      	adds	r3, #1
   22dc4:	9303      	str	r3, [sp, #12]
   22dc6:	eb0a 0006 	add.w	r0, sl, r6
   22dca:	9a00      	ldr	r2, [sp, #0]
   22dcc:	5d03      	ldrb	r3, [r0, r4]
   22dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   22dd2:	b16b      	cbz	r3, 22df0 <two_way_long_needle+0x24c>
   22dd4:	441e      	add	r6, r3
   22dd6:	1b7b      	subs	r3, r7, r5
   22dd8:	429e      	cmp	r6, r3
   22dda:	d9f4      	bls.n	22dc6 <two_way_long_needle+0x222>
   22ddc:	eb0a 0007 	add.w	r0, sl, r7
   22de0:	4649      	mov	r1, r9
   22de2:	f004 fe73 	bl	27acc <strnlen>
   22de6:	4407      	add	r7, r0
   22de8:	1b7b      	subs	r3, r7, r5
   22dea:	429e      	cmp	r6, r3
   22dec:	d9eb      	bls.n	22dc6 <two_way_long_needle+0x222>
   22dee:	e77a      	b.n	22ce6 <two_way_long_needle+0x142>
   22df0:	45a3      	cmp	fp, r4
   22df2:	d214      	bcs.n	22e1e <two_way_long_needle+0x27a>
   22df4:	9b01      	ldr	r3, [sp, #4]
   22df6:	eb0b 0206 	add.w	r2, fp, r6
   22dfa:	eb08 0c03 	add.w	ip, r8, r3
   22dfe:	4452      	add	r2, sl
   22e00:	465b      	mov	r3, fp
   22e02:	e002      	b.n	22e0a <two_way_long_needle+0x266>
   22e04:	3301      	adds	r3, #1
   22e06:	42a3      	cmp	r3, r4
   22e08:	d209      	bcs.n	22e1e <two_way_long_needle+0x27a>
   22e0a:	f812 1b01 	ldrb.w	r1, [r2], #1
   22e0e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
   22e12:	458e      	cmp	lr, r1
   22e14:	d0f6      	beq.n	22e04 <two_way_long_needle+0x260>
   22e16:	9a02      	ldr	r2, [sp, #8]
   22e18:	4416      	add	r6, r2
   22e1a:	441e      	add	r6, r3
   22e1c:	e7db      	b.n	22dd6 <two_way_long_needle+0x232>
   22e1e:	f1bb 0f00 	cmp.w	fp, #0
   22e22:	f43f af61 	beq.w	22ce8 <two_way_long_needle+0x144>
   22e26:	eb0b 0c06 	add.w	ip, fp, r6
   22e2a:	eb08 020b 	add.w	r2, r8, fp
   22e2e:	44d4      	add	ip, sl
   22e30:	e002      	b.n	22e38 <two_way_long_needle+0x294>
   22e32:	4543      	cmp	r3, r8
   22e34:	f43f af58 	beq.w	22ce8 <two_way_long_needle+0x144>
   22e38:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   22e3c:	f81c 1d01 	ldrb.w	r1, [ip, #-1]!
   22e40:	4613      	mov	r3, r2
   22e42:	458e      	cmp	lr, r1
   22e44:	d0f5      	beq.n	22e32 <two_way_long_needle+0x28e>
   22e46:	9b03      	ldr	r3, [sp, #12]
   22e48:	e7c4      	b.n	22dd4 <two_way_long_needle+0x230>
   22e4a:	465b      	mov	r3, fp
   22e4c:	e796      	b.n	22d7c <two_way_long_needle+0x1d8>
   22e4e:	ab06      	add	r3, sp, #24
   22e50:	f04f 34ff 	mov.w	r4, #4294967295
   22e54:	9300      	str	r3, [sp, #0]
   22e56:	e713      	b.n	22c80 <two_way_long_needle+0xdc>
   22e58:	f04f 0b00 	mov.w	fp, #0
   22e5c:	9301      	str	r3, [sp, #4]
   22e5e:	e6f5      	b.n	22c4c <two_way_long_needle+0xa8>

00022e60 <strstr>:
   22e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22e64:	460e      	mov	r6, r1
   22e66:	7809      	ldrb	r1, [r1, #0]
   22e68:	b090      	sub	sp, #64	; 0x40
   22e6a:	4604      	mov	r4, r0
   22e6c:	2900      	cmp	r1, #0
   22e6e:	d051      	beq.n	22f14 <strstr+0xb4>
   22e70:	7875      	ldrb	r5, [r6, #1]
   22e72:	2d00      	cmp	r5, #0
   22e74:	f000 8083 	beq.w	22f7e <strstr+0x11e>
   22e78:	78b3      	ldrb	r3, [r6, #2]
   22e7a:	2b00      	cmp	r3, #0
   22e7c:	d04e      	beq.n	22f1c <strstr+0xbc>
   22e7e:	78f2      	ldrb	r2, [r6, #3]
   22e80:	2a00      	cmp	r2, #0
   22e82:	f000 8085 	beq.w	22f90 <strstr+0x130>
   22e86:	7933      	ldrb	r3, [r6, #4]
   22e88:	2b00      	cmp	r3, #0
   22e8a:	d05b      	beq.n	22f44 <strstr+0xe4>
   22e8c:	4630      	mov	r0, r6
   22e8e:	f7ff fded 	bl	22a6c <strlen>
   22e92:	4607      	mov	r7, r0
   22e94:	4620      	mov	r0, r4
   22e96:	f447 7100 	orr.w	r1, r7, #512	; 0x200
   22e9a:	f004 fe17 	bl	27acc <strnlen>
   22e9e:	4287      	cmp	r7, r0
   22ea0:	d84b      	bhi.n	22f3a <strstr+0xda>
   22ea2:	2ffe      	cmp	r7, #254	; 0xfe
   22ea4:	f200 808f 	bhi.w	22fc6 <strstr+0x166>
   22ea8:	eba0 0807 	sub.w	r8, r0, r7
   22eac:	2240      	movs	r2, #64	; 0x40
   22eae:	1c79      	adds	r1, r7, #1
   22eb0:	4668      	mov	r0, sp
   22eb2:	44a0      	add	r8, r4
   22eb4:	f7ff f9ca 	bl	2224c <memset>
   22eb8:	b17f      	cbz	r7, 22eda <strstr+0x7a>
   22eba:	1e72      	subs	r2, r6, #1
   22ebc:	b2fd      	uxtb	r5, r7
   22ebe:	19d0      	adds	r0, r2, r7
   22ec0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   22ec4:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
   22ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22ecc:	1ab1      	subs	r1, r6, r2
   22ece:	4282      	cmp	r2, r0
   22ed0:	4463      	add	r3, ip
   22ed2:	4429      	add	r1, r5
   22ed4:	f803 1c40 	strb.w	r1, [r3, #-64]
   22ed8:	d1f2      	bne.n	22ec0 <strstr+0x60>
   22eda:	3c01      	subs	r4, #1
   22edc:	aa10      	add	r2, sp, #64	; 0x40
   22ede:	5de3      	ldrb	r3, [r4, r7]
   22ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22ee4:	4413      	add	r3, r2
   22ee6:	f813 0c40 	ldrb.w	r0, [r3, #-64]
   22eea:	4404      	add	r4, r0
   22eec:	45a0      	cmp	r8, r4
   22eee:	d203      	bcs.n	22ef8 <strstr+0x98>
   22ef0:	e037      	b.n	22f62 <strstr+0x102>
   22ef2:	442c      	add	r4, r5
   22ef4:	45a0      	cmp	r8, r4
   22ef6:	d334      	bcc.n	22f62 <strstr+0x102>
   22ef8:	5de5      	ldrb	r5, [r4, r7]
   22efa:	ab10      	add	r3, sp, #64	; 0x40
   22efc:	463a      	mov	r2, r7
   22efe:	4631      	mov	r1, r6
   22f00:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   22f04:	4620      	mov	r0, r4
   22f06:	441d      	add	r5, r3
   22f08:	f815 5c40 	ldrb.w	r5, [r5, #-64]
   22f0c:	f7ff f970 	bl	221f0 <memcmp>
   22f10:	2800      	cmp	r0, #0
   22f12:	d1ee      	bne.n	22ef2 <strstr+0x92>
   22f14:	4620      	mov	r0, r4
   22f16:	b010      	add	sp, #64	; 0x40
   22f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22f1c:	7802      	ldrb	r2, [r0, #0]
   22f1e:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   22f22:	b152      	cbz	r2, 22f3a <strstr+0xda>
   22f24:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   22f28:	4620      	mov	r0, r4
   22f2a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   22f2e:	4299      	cmp	r1, r3
   22f30:	d02c      	beq.n	22f8c <strstr+0x12c>
   22f32:	2a00      	cmp	r2, #0
   22f34:	d1f6      	bne.n	22f24 <strstr+0xc4>
   22f36:	4299      	cmp	r1, r3
   22f38:	d028      	beq.n	22f8c <strstr+0x12c>
   22f3a:	2400      	movs	r4, #0
   22f3c:	4620      	mov	r0, r4
   22f3e:	b010      	add	sp, #64	; 0x40
   22f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22f44:	7802      	ldrb	r2, [r0, #0]
   22f46:	2a00      	cmp	r2, #0
   22f48:	d0f7      	beq.n	22f3a <strstr+0xda>
   22f4a:	6831      	ldr	r1, [r6, #0]
   22f4c:	ba09      	rev	r1, r1
   22f4e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   22f52:	4620      	mov	r0, r4
   22f54:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   22f58:	b392      	cbz	r2, 22fc0 <strstr+0x160>
   22f5a:	428b      	cmp	r3, r1
   22f5c:	d1f7      	bne.n	22f4e <strstr+0xee>
   22f5e:	1ec4      	subs	r4, r0, #3
   22f60:	e7d8      	b.n	22f14 <strstr+0xb4>
   22f62:	f818 3007 	ldrb.w	r3, [r8, r7]
   22f66:	eb08 0007 	add.w	r0, r8, r7
   22f6a:	2b00      	cmp	r3, #0
   22f6c:	d0e5      	beq.n	22f3a <strstr+0xda>
   22f6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   22f72:	f004 fdab 	bl	27acc <strnlen>
   22f76:	4480      	add	r8, r0
   22f78:	45a0      	cmp	r8, r4
   22f7a:	d2ae      	bcs.n	22eda <strstr+0x7a>
   22f7c:	e7dd      	b.n	22f3a <strstr+0xda>
   22f7e:	f7ff fcaf 	bl	228e0 <strchr>
   22f82:	4604      	mov	r4, r0
   22f84:	4620      	mov	r0, r4
   22f86:	b010      	add	sp, #64	; 0x40
   22f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22f8c:	1e44      	subs	r4, r0, #1
   22f8e:	e7c1      	b.n	22f14 <strstr+0xb4>
   22f90:	042d      	lsls	r5, r5, #16
   22f92:	7806      	ldrb	r6, [r0, #0]
   22f94:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
   22f98:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
   22f9c:	2e00      	cmp	r6, #0
   22f9e:	d0cc      	beq.n	22f3a <strstr+0xda>
   22fa0:	ea46 0102 	orr.w	r1, r6, r2
   22fa4:	4620      	mov	r0, r4
   22fa6:	f814 6f01 	ldrb.w	r6, [r4, #1]!
   22faa:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
   22fae:	ea4f 2201 	mov.w	r2, r1, lsl #8
   22fb2:	d001      	beq.n	22fb8 <strstr+0x158>
   22fb4:	2e00      	cmp	r6, #0
   22fb6:	d1f3      	bne.n	22fa0 <strstr+0x140>
   22fb8:	4293      	cmp	r3, r2
   22fba:	d1be      	bne.n	22f3a <strstr+0xda>
   22fbc:	1e84      	subs	r4, r0, #2
   22fbe:	e7a9      	b.n	22f14 <strstr+0xb4>
   22fc0:	428b      	cmp	r3, r1
   22fc2:	d1ba      	bne.n	22f3a <strstr+0xda>
   22fc4:	e7cb      	b.n	22f5e <strstr+0xfe>
   22fc6:	4601      	mov	r1, r0
   22fc8:	463b      	mov	r3, r7
   22fca:	4620      	mov	r0, r4
   22fcc:	4632      	mov	r2, r6
   22fce:	f7ff fde9 	bl	22ba4 <two_way_long_needle>
   22fd2:	4604      	mov	r4, r0
   22fd4:	e79e      	b.n	22f14 <strstr+0xb4>
   22fd6:	bf00      	nop

00022fd8 <sulp>:
   22fd8:	b570      	push	{r4, r5, r6, lr}
   22fda:	4604      	mov	r4, r0
   22fdc:	460d      	mov	r5, r1
   22fde:	4616      	mov	r6, r2
   22fe0:	ec45 4b10 	vmov	d0, r4, r5
   22fe4:	f004 faea 	bl	275bc <__ulp>
   22fe8:	ec51 0b10 	vmov	r0, r1, d0
   22fec:	b16e      	cbz	r6, 2300a <sulp+0x32>
   22fee:	f3c5 530a 	ubfx	r3, r5, #20, #11
   22ff2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   22ff6:	2b00      	cmp	r3, #0
   22ff8:	dd07      	ble.n	2300a <sulp+0x32>
   22ffa:	4a04      	ldr	r2, [pc, #16]	; (2300c <sulp+0x34>)
   22ffc:	2400      	movs	r4, #0
   22ffe:	eb02 5503 	add.w	r5, r2, r3, lsl #20
   23002:	4622      	mov	r2, r4
   23004:	462b      	mov	r3, r5
   23006:	f7e9 ff09 	bl	ce1c <__aeabi_dmul>
   2300a:	bd70      	pop	{r4, r5, r6, pc}
   2300c:	3ff00000 	.word	0x3ff00000

00023010 <_strtod_r>:
   23010:	4b01      	ldr	r3, [pc, #4]	; (23018 <_strtod_r+0x8>)
   23012:	f7ea bce5 	b.w	d9e0 <_strtod_l>
   23016:	bf00      	nop
   23018:	200208f0 	.word	0x200208f0

0002301c <_strtol_l.isra.0>:
   2301c:	2b01      	cmp	r3, #1
   2301e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23022:	d055      	beq.n	230d0 <_strtol_l.isra.0+0xb4>
   23024:	2b24      	cmp	r3, #36	; 0x24
   23026:	d853      	bhi.n	230d0 <_strtol_l.isra.0+0xb4>
   23028:	4698      	mov	r8, r3
   2302a:	460d      	mov	r5, r1
   2302c:	4f43      	ldr	r7, [pc, #268]	; (2313c <_strtol_l.isra.0+0x120>)
   2302e:	46ac      	mov	ip, r5
   23030:	f815 4b01 	ldrb.w	r4, [r5], #1
   23034:	5d3e      	ldrb	r6, [r7, r4]
   23036:	f016 0608 	ands.w	r6, r6, #8
   2303a:	d1f8      	bne.n	2302e <_strtol_l.isra.0+0x12>
   2303c:	2c2d      	cmp	r4, #45	; 0x2d
   2303e:	d056      	beq.n	230ee <_strtol_l.isra.0+0xd2>
   23040:	2c2b      	cmp	r4, #43	; 0x2b
   23042:	d06b      	beq.n	2311c <_strtol_l.isra.0+0x100>
   23044:	46a3      	mov	fp, r4
   23046:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
   2304a:	f033 0410 	bics.w	r4, r3, #16
   2304e:	d106      	bne.n	2305e <_strtol_l.isra.0+0x42>
   23050:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   23054:	d055      	beq.n	23102 <_strtol_l.isra.0+0xe6>
   23056:	b913      	cbnz	r3, 2305e <_strtol_l.isra.0+0x42>
   23058:	f04f 080a 	mov.w	r8, #10
   2305c:	4643      	mov	r3, r8
   2305e:	f04f 0c00 	mov.w	ip, #0
   23062:	fbba fef8 	udiv	lr, sl, r8
   23066:	4667      	mov	r7, ip
   23068:	fb08 a91e 	mls	r9, r8, lr, sl
   2306c:	e00f      	b.n	2308e <_strtol_l.isra.0+0x72>
   2306e:	f1ab 0437 	sub.w	r4, fp, #55	; 0x37
   23072:	42a3      	cmp	r3, r4
   23074:	dd1b      	ble.n	230ae <_strtol_l.isra.0+0x92>
   23076:	f1bc 0f00 	cmp.w	ip, #0
   2307a:	db04      	blt.n	23086 <_strtol_l.isra.0+0x6a>
   2307c:	45be      	cmp	lr, r7
   2307e:	d302      	bcc.n	23086 <_strtol_l.isra.0+0x6a>
   23080:	d121      	bne.n	230c6 <_strtol_l.isra.0+0xaa>
   23082:	45a1      	cmp	r9, r4
   23084:	da1f      	bge.n	230c6 <_strtol_l.isra.0+0xaa>
   23086:	f04f 3cff 	mov.w	ip, #4294967295
   2308a:	f815 bb01 	ldrb.w	fp, [r5], #1
   2308e:	f1ab 0430 	sub.w	r4, fp, #48	; 0x30
   23092:	2c09      	cmp	r4, #9
   23094:	d9ed      	bls.n	23072 <_strtol_l.isra.0+0x56>
   23096:	f1ab 0441 	sub.w	r4, fp, #65	; 0x41
   2309a:	2c19      	cmp	r4, #25
   2309c:	d9e7      	bls.n	2306e <_strtol_l.isra.0+0x52>
   2309e:	f1ab 0461 	sub.w	r4, fp, #97	; 0x61
   230a2:	2c19      	cmp	r4, #25
   230a4:	d803      	bhi.n	230ae <_strtol_l.isra.0+0x92>
   230a6:	f1ab 0457 	sub.w	r4, fp, #87	; 0x57
   230aa:	42a3      	cmp	r3, r4
   230ac:	dce3      	bgt.n	23076 <_strtol_l.isra.0+0x5a>
   230ae:	f1bc 3fff 	cmp.w	ip, #4294967295
   230b2:	d015      	beq.n	230e0 <_strtol_l.isra.0+0xc4>
   230b4:	bb1e      	cbnz	r6, 230fe <_strtol_l.isra.0+0xe2>
   230b6:	b11a      	cbz	r2, 230c0 <_strtol_l.isra.0+0xa4>
   230b8:	f1bc 0f00 	cmp.w	ip, #0
   230bc:	d13c      	bne.n	23138 <_strtol_l.isra.0+0x11c>
   230be:	6011      	str	r1, [r2, #0]
   230c0:	4638      	mov	r0, r7
   230c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   230c6:	fb08 4707 	mla	r7, r8, r7, r4
   230ca:	f04f 0c01 	mov.w	ip, #1
   230ce:	e7dc      	b.n	2308a <_strtol_l.isra.0+0x6e>
   230d0:	f006 f96a 	bl	293a8 <__errno>
   230d4:	2216      	movs	r2, #22
   230d6:	4603      	mov	r3, r0
   230d8:	2000      	movs	r0, #0
   230da:	601a      	str	r2, [r3, #0]
   230dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   230e0:	2322      	movs	r3, #34	; 0x22
   230e2:	6003      	str	r3, [r0, #0]
   230e4:	b1c2      	cbz	r2, 23118 <_strtol_l.isra.0+0xfc>
   230e6:	1e69      	subs	r1, r5, #1
   230e8:	4657      	mov	r7, sl
   230ea:	6011      	str	r1, [r2, #0]
   230ec:	e7e8      	b.n	230c0 <_strtol_l.isra.0+0xa4>
   230ee:	f895 b000 	ldrb.w	fp, [r5]
   230f2:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
   230f6:	f10c 0502 	add.w	r5, ip, #2
   230fa:	2601      	movs	r6, #1
   230fc:	e7a5      	b.n	2304a <_strtol_l.isra.0+0x2e>
   230fe:	427f      	negs	r7, r7
   23100:	e7d9      	b.n	230b6 <_strtol_l.isra.0+0x9a>
   23102:	782c      	ldrb	r4, [r5, #0]
   23104:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   23108:	2c58      	cmp	r4, #88	; 0x58
   2310a:	d00e      	beq.n	2312a <_strtol_l.isra.0+0x10e>
   2310c:	2b00      	cmp	r3, #0
   2310e:	d1a6      	bne.n	2305e <_strtol_l.isra.0+0x42>
   23110:	f04f 0808 	mov.w	r8, #8
   23114:	4643      	mov	r3, r8
   23116:	e7a2      	b.n	2305e <_strtol_l.isra.0+0x42>
   23118:	4657      	mov	r7, sl
   2311a:	e7d1      	b.n	230c0 <_strtol_l.isra.0+0xa4>
   2311c:	f895 b000 	ldrb.w	fp, [r5]
   23120:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
   23124:	f10c 0502 	add.w	r5, ip, #2
   23128:	e78f      	b.n	2304a <_strtol_l.isra.0+0x2e>
   2312a:	f04f 0810 	mov.w	r8, #16
   2312e:	f895 b001 	ldrb.w	fp, [r5, #1]
   23132:	3502      	adds	r5, #2
   23134:	4643      	mov	r3, r8
   23136:	e792      	b.n	2305e <_strtol_l.isra.0+0x42>
   23138:	46ba      	mov	sl, r7
   2313a:	e7d4      	b.n	230e6 <_strtol_l.isra.0+0xca>
   2313c:	0002bfa1 	.word	0x0002bfa1

00023140 <_strtol_r>:
   23140:	f7ff bf6c 	b.w	2301c <_strtol_l.isra.0>

00023144 <strtol>:
   23144:	b430      	push	{r4, r5}
   23146:	460d      	mov	r5, r1
   23148:	4c03      	ldr	r4, [pc, #12]	; (23158 <strtol+0x14>)
   2314a:	4613      	mov	r3, r2
   2314c:	4601      	mov	r1, r0
   2314e:	462a      	mov	r2, r5
   23150:	6820      	ldr	r0, [r4, #0]
   23152:	bc30      	pop	{r4, r5}
   23154:	f7ff bf62 	b.w	2301c <_strtol_l.isra.0>
   23158:	200204d8 	.word	0x200204d8

0002315c <_strtoul_l.isra.0>:
   2315c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23160:	468c      	mov	ip, r1
   23162:	4686      	mov	lr, r0
   23164:	4840      	ldr	r0, [pc, #256]	; (23268 <_strtoul_l.isra.0+0x10c>)
   23166:	4667      	mov	r7, ip
   23168:	f81c 4b01 	ldrb.w	r4, [ip], #1
   2316c:	5d06      	ldrb	r6, [r0, r4]
   2316e:	f016 0608 	ands.w	r6, r6, #8
   23172:	d1f8      	bne.n	23166 <_strtoul_l.isra.0+0xa>
   23174:	2c2d      	cmp	r4, #45	; 0x2d
   23176:	d057      	beq.n	23228 <_strtoul_l.isra.0+0xcc>
   23178:	2c2b      	cmp	r4, #43	; 0x2b
   2317a:	d00d      	beq.n	23198 <_strtoul_l.isra.0+0x3c>
   2317c:	4625      	mov	r5, r4
   2317e:	f033 0010 	bics.w	r0, r3, #16
   23182:	d110      	bne.n	231a6 <_strtoul_l.isra.0+0x4a>
   23184:	2d30      	cmp	r5, #48	; 0x30
   23186:	d055      	beq.n	23234 <_strtoul_l.isra.0+0xd8>
   23188:	b96b      	cbnz	r3, 231a6 <_strtoul_l.isra.0+0x4a>
   2318a:	230a      	movs	r3, #10
   2318c:	f04f 0905 	mov.w	r9, #5
   23190:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 2326c <_strtoul_l.isra.0+0x110>
   23194:	469a      	mov	sl, r3
   23196:	e00f      	b.n	231b8 <_strtoul_l.isra.0+0x5c>
   23198:	f033 0010 	bics.w	r0, r3, #16
   2319c:	f89c 5000 	ldrb.w	r5, [ip]
   231a0:	f107 0c02 	add.w	ip, r7, #2
   231a4:	d0ee      	beq.n	23184 <_strtoul_l.isra.0+0x28>
   231a6:	f04f 38ff 	mov.w	r8, #4294967295
   231aa:	469a      	mov	sl, r3
   231ac:	fbb8 f8f3 	udiv	r8, r8, r3
   231b0:	fb03 f908 	mul.w	r9, r3, r8
   231b4:	ea6f 0909 	mvn.w	r9, r9
   231b8:	2700      	movs	r7, #0
   231ba:	4638      	mov	r0, r7
   231bc:	e00e      	b.n	231dc <_strtoul_l.isra.0+0x80>
   231be:	f1a5 0437 	sub.w	r4, r5, #55	; 0x37
   231c2:	42a3      	cmp	r3, r4
   231c4:	dd1a      	ble.n	231fc <_strtoul_l.isra.0+0xa0>
   231c6:	2f00      	cmp	r7, #0
   231c8:	db04      	blt.n	231d4 <_strtoul_l.isra.0+0x78>
   231ca:	4540      	cmp	r0, r8
   231cc:	d802      	bhi.n	231d4 <_strtoul_l.isra.0+0x78>
   231ce:	d11e      	bne.n	2320e <_strtoul_l.isra.0+0xb2>
   231d0:	454c      	cmp	r4, r9
   231d2:	dd1c      	ble.n	2320e <_strtoul_l.isra.0+0xb2>
   231d4:	f04f 37ff 	mov.w	r7, #4294967295
   231d8:	f81c 5b01 	ldrb.w	r5, [ip], #1
   231dc:	f1a5 0430 	sub.w	r4, r5, #48	; 0x30
   231e0:	2c09      	cmp	r4, #9
   231e2:	d9ee      	bls.n	231c2 <_strtoul_l.isra.0+0x66>
   231e4:	f1a5 0441 	sub.w	r4, r5, #65	; 0x41
   231e8:	2c19      	cmp	r4, #25
   231ea:	d9e8      	bls.n	231be <_strtoul_l.isra.0+0x62>
   231ec:	f1a5 0461 	sub.w	r4, r5, #97	; 0x61
   231f0:	2c19      	cmp	r4, #25
   231f2:	d803      	bhi.n	231fc <_strtoul_l.isra.0+0xa0>
   231f4:	f1a5 0457 	sub.w	r4, r5, #87	; 0x57
   231f8:	42a3      	cmp	r3, r4
   231fa:	dce4      	bgt.n	231c6 <_strtoul_l.isra.0+0x6a>
   231fc:	1c7b      	adds	r3, r7, #1
   231fe:	d00a      	beq.n	23216 <_strtoul_l.isra.0+0xba>
   23200:	b106      	cbz	r6, 23204 <_strtoul_l.isra.0+0xa8>
   23202:	4240      	negs	r0, r0
   23204:	b10a      	cbz	r2, 2320a <_strtoul_l.isra.0+0xae>
   23206:	b967      	cbnz	r7, 23222 <_strtoul_l.isra.0+0xc6>
   23208:	6011      	str	r1, [r2, #0]
   2320a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2320e:	fb0a 4000 	mla	r0, sl, r0, r4
   23212:	2701      	movs	r7, #1
   23214:	e7e0      	b.n	231d8 <_strtoul_l.isra.0+0x7c>
   23216:	2322      	movs	r3, #34	; 0x22
   23218:	4638      	mov	r0, r7
   2321a:	f8ce 3000 	str.w	r3, [lr]
   2321e:	2a00      	cmp	r2, #0
   23220:	d0f3      	beq.n	2320a <_strtoul_l.isra.0+0xae>
   23222:	f10c 31ff 	add.w	r1, ip, #4294967295
   23226:	e7ef      	b.n	23208 <_strtoul_l.isra.0+0xac>
   23228:	f89c 5000 	ldrb.w	r5, [ip]
   2322c:	2601      	movs	r6, #1
   2322e:	f107 0c02 	add.w	ip, r7, #2
   23232:	e7a4      	b.n	2317e <_strtoul_l.isra.0+0x22>
   23234:	f89c 0000 	ldrb.w	r0, [ip]
   23238:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2323c:	2858      	cmp	r0, #88	; 0x58
   2323e:	d10a      	bne.n	23256 <_strtoul_l.isra.0+0xfa>
   23240:	2310      	movs	r3, #16
   23242:	f89c 5001 	ldrb.w	r5, [ip, #1]
   23246:	f04f 090f 	mov.w	r9, #15
   2324a:	f10c 0c02 	add.w	ip, ip, #2
   2324e:	469a      	mov	sl, r3
   23250:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   23254:	e7b0      	b.n	231b8 <_strtoul_l.isra.0+0x5c>
   23256:	2b00      	cmp	r3, #0
   23258:	d1a5      	bne.n	231a6 <_strtoul_l.isra.0+0x4a>
   2325a:	2308      	movs	r3, #8
   2325c:	f04f 0907 	mov.w	r9, #7
   23260:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   23264:	469a      	mov	sl, r3
   23266:	e7a7      	b.n	231b8 <_strtoul_l.isra.0+0x5c>
   23268:	0002bfa1 	.word	0x0002bfa1
   2326c:	19999999 	.word	0x19999999

00023270 <_strtoul_r>:
   23270:	f7ff bf74 	b.w	2315c <_strtoul_l.isra.0>

00023274 <strtoul>:
   23274:	b430      	push	{r4, r5}
   23276:	460d      	mov	r5, r1
   23278:	4c03      	ldr	r4, [pc, #12]	; (23288 <strtoul+0x14>)
   2327a:	4613      	mov	r3, r2
   2327c:	4601      	mov	r1, r0
   2327e:	462a      	mov	r2, r5
   23280:	6820      	ldr	r0, [r4, #0]
   23282:	bc30      	pop	{r4, r5}
   23284:	f7ff bf6a 	b.w	2315c <_strtoul_l.isra.0>
   23288:	200204d8 	.word	0x200204d8

0002328c <__ssvfscanf_r>:
   2328c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23290:	ed2d 8b02 	vpush	{d8}
   23294:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
   23298:	468b      	mov	fp, r1
   2329a:	4682      	mov	sl, r0
   2329c:	af02      	add	r7, sp, #8
   2329e:	62bb      	str	r3, [r7, #40]	; 0x28
   232a0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   232a4:	0499      	lsls	r1, r3, #18
   232a6:	d409      	bmi.n	232bc <__ssvfscanf_r+0x30>
   232a8:	f8db 1064 	ldr.w	r1, [fp, #100]	; 0x64
   232ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   232b0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   232b4:	f8ab 300c 	strh.w	r3, [fp, #12]
   232b8:	f8cb 1064 	str.w	r1, [fp, #100]	; 0x64
   232bc:	f812 3b01 	ldrb.w	r3, [r2], #1
   232c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   232c2:	647b      	str	r3, [r7, #68]	; 0x44
   232c4:	2b00      	cmp	r3, #0
   232c6:	f001 80fc 	beq.w	244c2 <__ssvfscanf_r+0x1236>
   232ca:	2200      	movs	r2, #0
   232cc:	ee08 aa10 	vmov	s16, sl
   232d0:	623a      	str	r2, [r7, #32]
   232d2:	4692      	mov	sl, r2
   232d4:	637a      	str	r2, [r7, #52]	; 0x34
   232d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   232d8:	627a      	str	r2, [r7, #36]	; 0x24
   232da:	633a      	str	r2, [r7, #48]	; 0x30
   232dc:	4a7c      	ldr	r2, [pc, #496]	; (234d0 <__ssvfscanf_r+0x244>)
   232de:	5cd5      	ldrb	r5, [r2, r3]
   232e0:	f015 0508 	ands.w	r5, r5, #8
   232e4:	f040 80ac 	bne.w	23440 <__ssvfscanf_r+0x1b4>
   232e8:	2b25      	cmp	r3, #37	; 0x25
   232ea:	f040 8088 	bne.w	233fe <__ssvfscanf_r+0x172>
   232ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   232f0:	462c      	mov	r4, r5
   232f2:	46a8      	mov	r8, r5
   232f4:	7802      	ldrb	r2, [r0, #0]
   232f6:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
   232fa:	1c41      	adds	r1, r0, #1
   232fc:	2b55      	cmp	r3, #85	; 0x55
   232fe:	d86d      	bhi.n	233dc <__ssvfscanf_r+0x150>
   23300:	e8df f013 	tbh	[pc, r3, lsl #1]
   23304:	006c007c 	.word	0x006c007c
   23308:	006c006c 	.word	0x006c006c
   2330c:	04cf006c 	.word	0x04cf006c
   23310:	006c006c 	.word	0x006c006c
   23314:	006c006c 	.word	0x006c006c
   23318:	00c5006c 	.word	0x00c5006c
   2331c:	00c500c5 	.word	0x00c500c5
   23320:	00c500c5 	.word	0x00c500c5
   23324:	00c500c5 	.word	0x00c500c5
   23328:	00c500c5 	.word	0x00c500c5
   2332c:	006c00c5 	.word	0x006c00c5
   23330:	006c006c 	.word	0x006c006c
   23334:	006c006c 	.word	0x006c006c
   23338:	006c006c 	.word	0x006c006c
   2333c:	006c00d1 	.word	0x006c00d1
   23340:	04b104a1 	.word	0x04b104a1
   23344:	00d100d1 	.word	0x00d100d1
   23348:	006c00d1 	.word	0x006c00d1
   2334c:	006c006c 	.word	0x006c006c
   23350:	0439006c 	.word	0x0439006c
   23354:	006c006c 	.word	0x006c006c
   23358:	006c04a8 	.word	0x006c04a8
   2335c:	006c006c 	.word	0x006c006c
   23360:	006c049c 	.word	0x006c049c
   23364:	006c006c 	.word	0x006c006c
   23368:	0442006c 	.word	0x0442006c
   2336c:	006c006c 	.word	0x006c006c
   23370:	006c04ba 	.word	0x006c04ba
   23374:	006c006c 	.word	0x006c006c
   23378:	006c006c 	.word	0x006c006c
   2337c:	006c00d1 	.word	0x006c00d1
   23380:	04b304a3 	.word	0x04b304a3
   23384:	00d100d1 	.word	0x00d100d1
   23388:	04f500d1 	.word	0x04f500d1
   2338c:	04390501 	.word	0x04390501
   23390:	04c3006c 	.word	0x04c3006c
   23394:	04e604d8 	.word	0x04e604d8
   23398:	051104aa 	.word	0x051104aa
   2339c:	006c006c 	.word	0x006c006c
   233a0:	0432049e 	.word	0x0432049e
   233a4:	006c0509 	.word	0x006c0509
   233a8:	0442006c 	.word	0x0442006c
   233ac:	0432006c 	.word	0x0432006c
   233b0:	4659      	mov	r1, fp
   233b2:	ee18 0a10 	vmov	r0, s16
   233b6:	f004 fde1 	bl	27f7c <__ssrefill_r>
   233ba:	2800      	cmp	r0, #0
   233bc:	f000 87c5 	beq.w	2434a <__ssvfscanf_r+0x10be>
   233c0:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   233c4:	2e00      	cmp	r6, #0
   233c6:	f000 8216 	beq.w	237f6 <__ssvfscanf_r+0x56a>
   233ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   233cc:	2b00      	cmp	r3, #0
   233ce:	f000 870c 	beq.w	241ea <__ssvfscanf_r+0xf5e>
   233d2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   233d6:	065a      	lsls	r2, r3, #25
   233d8:	f100 8707 	bmi.w	241ea <__ssvfscanf_r+0xf5e>
   233dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   233de:	b12b      	cbz	r3, 233ec <__ssvfscanf_r+0x160>
   233e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   233e2:	681e      	ldr	r6, [r3, #0]
   233e4:	b116      	cbz	r6, 233ec <__ssvfscanf_r+0x160>
   233e6:	4630      	mov	r0, r6
   233e8:	f7fe fbee 	bl	21bc8 <free>
   233ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
   233ee:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
   233f2:	46bd      	mov	sp, r7
   233f4:	ecbd 8b02 	vpop	{d8}
   233f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   233fc:	63f9      	str	r1, [r7, #60]	; 0x3c
   233fe:	f8db 3004 	ldr.w	r3, [fp, #4]
   23402:	2b00      	cmp	r3, #0
   23404:	dd3b      	ble.n	2347e <__ssvfscanf_r+0x1f2>
   23406:	f8db 3000 	ldr.w	r3, [fp]
   2340a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2340c:	7819      	ldrb	r1, [r3, #0]
   2340e:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   23412:	4291      	cmp	r1, r2
   23414:	d1e2      	bne.n	233dc <__ssvfscanf_r+0x150>
   23416:	f8db 2004 	ldr.w	r2, [fp, #4]
   2341a:	3301      	adds	r3, #1
   2341c:	f10a 0a01 	add.w	sl, sl, #1
   23420:	3a01      	subs	r2, #1
   23422:	e9cb 3200 	strd	r3, r2, [fp]
   23426:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   23428:	f812 3b01 	ldrb.w	r3, [r2], #1
   2342c:	63fa      	str	r2, [r7, #60]	; 0x3c
   2342e:	647b      	str	r3, [r7, #68]	; 0x44
   23430:	2b00      	cmp	r3, #0
   23432:	d0d3      	beq.n	233dc <__ssvfscanf_r+0x150>
   23434:	4a26      	ldr	r2, [pc, #152]	; (234d0 <__ssvfscanf_r+0x244>)
   23436:	5cd5      	ldrb	r5, [r2, r3]
   23438:	f015 0508 	ands.w	r5, r5, #8
   2343c:	f43f af54 	beq.w	232e8 <__ssvfscanf_r+0x5c>
   23440:	f8db 2004 	ldr.w	r2, [fp, #4]
   23444:	ee18 4a10 	vmov	r4, s16
   23448:	e010      	b.n	2346c <__ssvfscanf_r+0x1e0>
   2344a:	f8db 3000 	ldr.w	r3, [fp]
   2344e:	4920      	ldr	r1, [pc, #128]	; (234d0 <__ssvfscanf_r+0x244>)
   23450:	781a      	ldrb	r2, [r3, #0]
   23452:	3301      	adds	r3, #1
   23454:	5c8a      	ldrb	r2, [r1, r2]
   23456:	0712      	lsls	r2, r2, #28
   23458:	d5e5      	bpl.n	23426 <__ssvfscanf_r+0x19a>
   2345a:	f8db 2004 	ldr.w	r2, [fp, #4]
   2345e:	f10a 0a01 	add.w	sl, sl, #1
   23462:	f8cb 3000 	str.w	r3, [fp]
   23466:	3a01      	subs	r2, #1
   23468:	f8cb 2004 	str.w	r2, [fp, #4]
   2346c:	2a00      	cmp	r2, #0
   2346e:	dcec      	bgt.n	2344a <__ssvfscanf_r+0x1be>
   23470:	4659      	mov	r1, fp
   23472:	4620      	mov	r0, r4
   23474:	f004 fd82 	bl	27f7c <__ssrefill_r>
   23478:	2800      	cmp	r0, #0
   2347a:	d0e6      	beq.n	2344a <__ssvfscanf_r+0x1be>
   2347c:	e7d3      	b.n	23426 <__ssvfscanf_r+0x19a>
   2347e:	4659      	mov	r1, fp
   23480:	ee18 0a10 	vmov	r0, s16
   23484:	f004 fd7a 	bl	27f7c <__ssrefill_r>
   23488:	2800      	cmp	r0, #0
   2348a:	d0bc      	beq.n	23406 <__ssvfscanf_r+0x17a>
   2348c:	e79d      	b.n	233ca <__ssvfscanf_r+0x13e>
   2348e:	f014 0f8f 	tst.w	r4, #143	; 0x8f
   23492:	d1a3      	bne.n	233dc <__ssvfscanf_r+0x150>
   23494:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   23498:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   2349c:	7842      	ldrb	r2, [r0, #1]
   2349e:	4608      	mov	r0, r1
   234a0:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   234a4:	e727      	b.n	232f6 <__ssvfscanf_r+0x6a>
   234a6:	2604      	movs	r6, #4
   234a8:	63f9      	str	r1, [r7, #60]	; 0x3c
   234aa:	f8db 3004 	ldr.w	r3, [fp, #4]
   234ae:	2b00      	cmp	r3, #0
   234b0:	f340 8377 	ble.w	23ba2 <__ssvfscanf_r+0x916>
   234b4:	0662      	lsls	r2, r4, #25
   234b6:	f140 837f 	bpl.w	23bb8 <__ssvfscanf_r+0x92c>
   234ba:	1e73      	subs	r3, r6, #1
   234bc:	2b03      	cmp	r3, #3
   234be:	f200 8632 	bhi.w	24126 <__ssvfscanf_r+0xe9a>
   234c2:	e8df f013 	tbh	[pc, r3, lsl #1]
   234c6:	01b4      	.short	0x01b4
   234c8:	00b2015c 	.word	0x00b2015c
   234cc:	0007      	.short	0x0007
   234ce:	bf00      	nop
   234d0:	0002bfa1 	.word	0x0002bfa1
   234d4:	ee18 0a10 	vmov	r0, s16
   234d8:	f003 fbb2 	bl	26c40 <_localeconv_r>
   234dc:	f108 33ff 	add.w	r3, r8, #4294967295
   234e0:	6802      	ldr	r2, [r0, #0]
   234e2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   234e6:	617a      	str	r2, [r7, #20]
   234e8:	f240 84e4 	bls.w	23eb4 <__ssvfscanf_r+0xc28>
   234ec:	f46f 7cae 	mvn.w	ip, #348	; 0x15c
   234f0:	eb08 030c 	add.w	r3, r8, ip
   234f4:	f240 185d 	movw	r8, #349	; 0x15d
   234f8:	60fb      	str	r3, [r7, #12]
   234fa:	2600      	movs	r6, #0
   234fc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   23500:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
   23504:	607d      	str	r5, [r7, #4]
   23506:	4699      	mov	r9, r3
   23508:	4645      	mov	r5, r8
   2350a:	46d8      	mov	r8, fp
   2350c:	46a3      	mov	fp, r4
   2350e:	4634      	mov	r4, r6
   23510:	61fb      	str	r3, [r7, #28]
   23512:	63be      	str	r6, [r7, #56]	; 0x38
   23514:	60be      	str	r6, [r7, #8]
   23516:	613e      	str	r6, [r7, #16]
   23518:	61be      	str	r6, [r7, #24]
   2351a:	f8d8 1000 	ldr.w	r1, [r8]
   2351e:	7808      	ldrb	r0, [r1, #0]
   23520:	f1a0 0e2b 	sub.w	lr, r0, #43	; 0x2b
   23524:	f1be 0f4e 	cmp.w	lr, #78	; 0x4e
   23528:	d850      	bhi.n	235cc <__ssvfscanf_r+0x340>
   2352a:	e8df f01e 	tbh	[pc, lr, lsl #1]
   2352e:	0275      	.short	0x0275
   23530:	0275004f 	.word	0x0275004f
   23534:	004f004f 	.word	0x004f004f
   23538:	00780310 	.word	0x00780310
   2353c:	00780078 	.word	0x00780078
   23540:	00780078 	.word	0x00780078
   23544:	00780078 	.word	0x00780078
   23548:	00780078 	.word	0x00780078
   2354c:	004f004f 	.word	0x004f004f
   23550:	004f004f 	.word	0x004f004f
   23554:	004f004f 	.word	0x004f004f
   23558:	026e004f 	.word	0x026e004f
   2355c:	004f004f 	.word	0x004f004f
   23560:	02f0004f 	.word	0x02f0004f
   23564:	004f02eb 	.word	0x004f02eb
   23568:	0291004f 	.word	0x0291004f
   2356c:	004f004f 	.word	0x004f004f
   23570:	004f004f 	.word	0x004f004f
   23574:	004f027c 	.word	0x004f027c
   23578:	004f004f 	.word	0x004f004f
   2357c:	004f004f 	.word	0x004f004f
   23580:	004f0269 	.word	0x004f0269
   23584:	004f004f 	.word	0x004f004f
   23588:	0264004f 	.word	0x0264004f
   2358c:	004f004f 	.word	0x004f004f
   23590:	004f004f 	.word	0x004f004f
   23594:	004f004f 	.word	0x004f004f
   23598:	026e004f 	.word	0x026e004f
   2359c:	004f004f 	.word	0x004f004f
   235a0:	02f0004f 	.word	0x02f0004f
   235a4:	004f02eb 	.word	0x004f02eb
   235a8:	0291004f 	.word	0x0291004f
   235ac:	004f004f 	.word	0x004f004f
   235b0:	004f004f 	.word	0x004f004f
   235b4:	004f027c 	.word	0x004f027c
   235b8:	004f004f 	.word	0x004f004f
   235bc:	004f004f 	.word	0x004f004f
   235c0:	004f0269 	.word	0x004f0269
   235c4:	004f004f 	.word	0x004f004f
   235c8:	0264004f 	.word	0x0264004f
   235cc:	697b      	ldr	r3, [r7, #20]
   235ce:	f893 e000 	ldrb.w	lr, [r3]
   235d2:	4586      	cmp	lr, r0
   235d4:	d117      	bne.n	23606 <__ssvfscanf_r+0x37a>
   235d6:	f41b 7f00 	tst.w	fp, #512	; 0x200
   235da:	d014      	beq.n	23606 <__ssvfscanf_r+0x37a>
   235dc:	f42b 7b20 	bic.w	fp, fp, #640	; 0x280
   235e0:	61be      	str	r6, [r7, #24]
   235e2:	3d01      	subs	r5, #1
   235e4:	f809 0b01 	strb.w	r0, [r9], #1
   235e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
   235ec:	f10a 0a01 	add.w	sl, sl, #1
   235f0:	3801      	subs	r0, #1
   235f2:	2800      	cmp	r0, #0
   235f4:	f8c8 0004 	str.w	r0, [r8, #4]
   235f8:	f340 83a8 	ble.w	23d4c <__ssvfscanf_r+0xac0>
   235fc:	1c48      	adds	r0, r1, #1
   235fe:	f8c8 0000 	str.w	r0, [r8]
   23602:	2d00      	cmp	r5, #0
   23604:	d189      	bne.n	2351a <__ssvfscanf_r+0x28e>
   23606:	617e      	str	r6, [r7, #20]
   23608:	4626      	mov	r6, r4
   2360a:	697b      	ldr	r3, [r7, #20]
   2360c:	465c      	mov	r4, fp
   2360e:	46c3      	mov	fp, r8
   23610:	2b00      	cmp	r3, #0
   23612:	f001 806a 	beq.w	246ea <__ssvfscanf_r+0x145e>
   23616:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   2361a:	4635      	mov	r5, r6
   2361c:	e229      	b.n	23a72 <__ssvfscanf_r+0x7e6>
   2361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23620:	42e3      	cmn	r3, r4
   23622:	d1f0      	bne.n	23606 <__ssvfscanf_r+0x37a>
   23624:	f42b 7bc0 	bic.w	fp, fp, #384	; 0x180
   23628:	e7db      	b.n	235e2 <__ssvfscanf_r+0x356>
   2362a:	f108 33ff 	add.w	r3, r8, #4294967295
   2362e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   23632:	f240 83be 	bls.w	23db2 <__ssvfscanf_r+0xb26>
   23636:	f46f 70ae 	mvn.w	r0, #348	; 0x15c
   2363a:	eb08 0900 	add.w	r9, r8, r0
   2363e:	f240 185d 	movw	r8, #349	; 0x15d
   23642:	2300      	movs	r3, #0
   23644:	f507 75ac 	add.w	r5, r7, #344	; 0x158
   23648:	465e      	mov	r6, fp
   2364a:	f8c7 9038 	str.w	r9, [r7, #56]	; 0x38
   2364e:	46d3      	mov	fp, sl
   23650:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
   23654:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
   23658:	469a      	mov	sl, r3
   2365a:	61fd      	str	r5, [r7, #28]
   2365c:	6832      	ldr	r2, [r6, #0]
   2365e:	7810      	ldrb	r0, [r2, #0]
   23660:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   23664:	2b4d      	cmp	r3, #77	; 0x4d
   23666:	d861      	bhi.n	2372c <__ssvfscanf_r+0x4a0>
   23668:	e8df f013 	tbh	[pc, r3, lsl #1]
   2366c:	006002cd 	.word	0x006002cd
   23670:	006002cd 	.word	0x006002cd
   23674:	03600060 	.word	0x03600060
   23678:	026b026b 	.word	0x026b026b
   2367c:	026b026b 	.word	0x026b026b
   23680:	026b026b 	.word	0x026b026b
   23684:	02d3026b 	.word	0x02d3026b
   23688:	006002d3 	.word	0x006002d3
   2368c:	00600060 	.word	0x00600060
   23690:	00600060 	.word	0x00600060
   23694:	00600060 	.word	0x00600060
   23698:	004e004e 	.word	0x004e004e
   2369c:	004e004e 	.word	0x004e004e
   236a0:	004e004e 	.word	0x004e004e
   236a4:	00600060 	.word	0x00600060
   236a8:	00600060 	.word	0x00600060
   236ac:	00600060 	.word	0x00600060
   236b0:	00600060 	.word	0x00600060
   236b4:	00600060 	.word	0x00600060
   236b8:	00600060 	.word	0x00600060
   236bc:	00600060 	.word	0x00600060
   236c0:	00600060 	.word	0x00600060
   236c4:	02db0060 	.word	0x02db0060
   236c8:	00600060 	.word	0x00600060
   236cc:	00600060 	.word	0x00600060
   236d0:	00600060 	.word	0x00600060
   236d4:	00600060 	.word	0x00600060
   236d8:	004e004e 	.word	0x004e004e
   236dc:	004e004e 	.word	0x004e004e
   236e0:	004e004e 	.word	0x004e004e
   236e4:	00600060 	.word	0x00600060
   236e8:	00600060 	.word	0x00600060
   236ec:	00600060 	.word	0x00600060
   236f0:	00600060 	.word	0x00600060
   236f4:	00600060 	.word	0x00600060
   236f8:	00600060 	.word	0x00600060
   236fc:	00600060 	.word	0x00600060
   23700:	00600060 	.word	0x00600060
   23704:	02db0060 	.word	0x02db0060
   23708:	f1b9 0f0a 	cmp.w	r9, #10
   2370c:	dd0e      	ble.n	2372c <__ssvfscanf_r+0x4a0>
   2370e:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   23712:	f805 0b01 	strb.w	r0, [r5], #1
   23716:	6873      	ldr	r3, [r6, #4]
   23718:	3b01      	subs	r3, #1
   2371a:	2b00      	cmp	r3, #0
   2371c:	6073      	str	r3, [r6, #4]
   2371e:	f340 8328 	ble.w	23d72 <__ssvfscanf_r+0xae6>
   23722:	3201      	adds	r2, #1
   23724:	6032      	str	r2, [r6, #0]
   23726:	f1b8 0801 	subs.w	r8, r8, #1
   2372a:	d197      	bne.n	2365c <__ssvfscanf_r+0x3d0>
   2372c:	05e3      	lsls	r3, r4, #23
   2372e:	46d0      	mov	r8, sl
   23730:	f8c7 9024 	str.w	r9, [r7, #36]	; 0x24
   23734:	46da      	mov	sl, fp
   23736:	46b3      	mov	fp, r6
   23738:	d507      	bpl.n	2374a <__ssvfscanf_r+0x4be>
   2373a:	69fb      	ldr	r3, [r7, #28]
   2373c:	429d      	cmp	r5, r3
   2373e:	f200 8593 	bhi.w	24268 <__ssvfscanf_r+0xfdc>
   23742:	69fb      	ldr	r3, [r7, #28]
   23744:	429d      	cmp	r5, r3
   23746:	f43f ae49 	beq.w	233dc <__ssvfscanf_r+0x150>
   2374a:	f014 0210 	ands.w	r2, r4, #16
   2374e:	f040 8321 	bne.w	23d94 <__ssvfscanf_r+0xb08>
   23752:	6a3e      	ldr	r6, [r7, #32]
   23754:	ee18 0a10 	vmov	r0, s16
   23758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2375a:	69f9      	ldr	r1, [r7, #28]
   2375c:	702a      	strb	r2, [r5, #0]
   2375e:	47b0      	blx	r6
   23760:	06a6      	lsls	r6, r4, #26
   23762:	f100 830f 	bmi.w	23d84 <__ssvfscanf_r+0xaf8>
   23766:	0721      	lsls	r1, r4, #28
   23768:	f100 84ab 	bmi.w	240c2 <__ssvfscanf_r+0xe36>
   2376c:	0762      	lsls	r2, r4, #29
   2376e:	f140 870d 	bpl.w	2458c <__ssvfscanf_r+0x1300>
   23772:	6abc      	ldr	r4, [r7, #40]	; 0x28
   23774:	f854 3b04 	ldr.w	r3, [r4], #4
   23778:	8018      	strh	r0, [r3, #0]
   2377a:	62bc      	str	r4, [r7, #40]	; 0x28
   2377c:	e307      	b.n	23d8e <__ssvfscanf_r+0xb02>
   2377e:	f1b8 0f00 	cmp.w	r8, #0
   23782:	bf08      	it	eq
   23784:	f04f 38ff 	moveq.w	r8, #4294967295
   23788:	f014 0501 	ands.w	r5, r4, #1
   2378c:	f000 831c 	beq.w	23dc8 <__ssvfscanf_r+0xb3c>
   23790:	f014 0310 	ands.w	r3, r4, #16
   23794:	61fb      	str	r3, [r7, #28]
   23796:	f040 8604 	bne.w	243a2 <__ssvfscanf_r+0x1116>
   2379a:	0622      	lsls	r2, r4, #24
   2379c:	6abe      	ldr	r6, [r7, #40]	; 0x28
   2379e:	f140 8693 	bpl.w	244c8 <__ssvfscanf_r+0x123c>
   237a2:	f856 3b04 	ldr.w	r3, [r6], #4
   237a6:	63bb      	str	r3, [r7, #56]	; 0x38
   237a8:	2b00      	cmp	r3, #0
   237aa:	f43f ae17 	beq.w	233dc <__ssvfscanf_r+0x150>
   237ae:	2080      	movs	r0, #128	; 0x80
   237b0:	f7fe fa02 	bl	21bb8 <malloc>
   237b4:	4681      	mov	r9, r0
   237b6:	2800      	cmp	r0, #0
   237b8:	f000 8517 	beq.w	241ea <__ssvfscanf_r+0xf5e>
   237bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   237be:	6bba      	ldr	r2, [r7, #56]	; 0x38
   237c0:	88dd      	ldrh	r5, [r3, #6]
   237c2:	889c      	ldrh	r4, [r3, #4]
   237c4:	6010      	str	r0, [r2, #0]
   237c6:	42a5      	cmp	r5, r4
   237c8:	f080 8468 	bcs.w	2409c <__ssvfscanf_r+0xe10>
   237cc:	6818      	ldr	r0, [r3, #0]
   237ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
   237d0:	1c6b      	adds	r3, r5, #1
   237d2:	62be      	str	r6, [r7, #40]	; 0x28
   237d4:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
   237d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   237da:	f8c7 9018 	str.w	r9, [r7, #24]
   237de:	80d3      	strh	r3, [r2, #6]
   237e0:	2320      	movs	r3, #32
   237e2:	617b      	str	r3, [r7, #20]
   237e4:	f8db 3000 	ldr.w	r3, [fp]
   237e8:	4ac4      	ldr	r2, [pc, #784]	; (23afc <__ssvfscanf_r+0x870>)
   237ea:	781b      	ldrb	r3, [r3, #0]
   237ec:	5cd3      	ldrb	r3, [r2, r3]
   237ee:	f013 0508 	ands.w	r5, r3, #8
   237f2:	f000 8544 	beq.w	2427e <__ssvfscanf_r+0xff2>
   237f6:	69fb      	ldr	r3, [r7, #28]
   237f8:	2b00      	cmp	r3, #0
   237fa:	f47f ae14 	bne.w	23426 <__ssvfscanf_r+0x19a>
   237fe:	69ba      	ldr	r2, [r7, #24]
   23800:	f8c9 3000 	str.w	r3, [r9]
   23804:	eba9 0102 	sub.w	r1, r9, r2
   23808:	697a      	ldr	r2, [r7, #20]
   2380a:	108b      	asrs	r3, r1, #2
   2380c:	3301      	adds	r3, #1
   2380e:	429a      	cmp	r2, r3
   23810:	f240 8170 	bls.w	23af4 <__ssvfscanf_r+0x868>
   23814:	6bbc      	ldr	r4, [r7, #56]	; 0x38
   23816:	2c00      	cmp	r4, #0
   23818:	f000 816c 	beq.w	23af4 <__ssvfscanf_r+0x868>
   2381c:	3104      	adds	r1, #4
   2381e:	6820      	ldr	r0, [r4, #0]
   23820:	f7fe fd70 	bl	22304 <realloc>
   23824:	2800      	cmp	r0, #0
   23826:	f000 8165 	beq.w	23af4 <__ssvfscanf_r+0x868>
   2382a:	6020      	str	r0, [r4, #0]
   2382c:	e162      	b.n	23af4 <__ssvfscanf_r+0x868>
   2382e:	f1b8 0f00 	cmp.w	r8, #0
   23832:	bf08      	it	eq
   23834:	f04f 38ff 	moveq.w	r8, #4294967295
   23838:	07e2      	lsls	r2, r4, #31
   2383a:	f140 833f 	bpl.w	23ebc <__ssvfscanf_r+0xc30>
   2383e:	f014 0310 	ands.w	r3, r4, #16
   23842:	617b      	str	r3, [r7, #20]
   23844:	f040 85f2 	bne.w	2442c <__ssvfscanf_r+0x11a0>
   23848:	0623      	lsls	r3, r4, #24
   2384a:	6abe      	ldr	r6, [r7, #40]	; 0x28
   2384c:	f140 864a 	bpl.w	244e4 <__ssvfscanf_r+0x1258>
   23850:	f856 3b04 	ldr.w	r3, [r6], #4
   23854:	60bb      	str	r3, [r7, #8]
   23856:	2b00      	cmp	r3, #0
   23858:	f43f adc0 	beq.w	233dc <__ssvfscanf_r+0x150>
   2385c:	2080      	movs	r0, #128	; 0x80
   2385e:	f7fe f9ab 	bl	21bb8 <malloc>
   23862:	4681      	mov	r9, r0
   23864:	2800      	cmp	r0, #0
   23866:	f000 84c0 	beq.w	241ea <__ssvfscanf_r+0xf5e>
   2386a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2386c:	68ba      	ldr	r2, [r7, #8]
   2386e:	88dd      	ldrh	r5, [r3, #6]
   23870:	889c      	ldrh	r4, [r3, #4]
   23872:	6010      	str	r0, [r2, #0]
   23874:	42a5      	cmp	r5, r4
   23876:	f080 83ed 	bcs.w	24054 <__ssvfscanf_r+0xdc8>
   2387a:	6818      	ldr	r0, [r3, #0]
   2387c:	68ba      	ldr	r2, [r7, #8]
   2387e:	1c6b      	adds	r3, r5, #1
   23880:	62be      	str	r6, [r7, #40]	; 0x28
   23882:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
   23886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   23888:	f8c7 900c 	str.w	r9, [r7, #12]
   2388c:	80d3      	strh	r3, [r2, #6]
   2388e:	2320      	movs	r3, #32
   23890:	613b      	str	r3, [r7, #16]
   23892:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   23894:	2400      	movs	r4, #0
   23896:	f8c7 a01c 	str.w	sl, [r7, #28]
   2389a:	ee18 aa10 	vmov	sl, s16
   2389e:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   238a2:	e050      	b.n	23946 <__ssvfscanf_r+0x6ba>
   238a4:	4605      	mov	r5, r0
   238a6:	f8c9 0000 	str.w	r0, [r9]
   238aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
   238ae:	2208      	movs	r2, #8
   238b0:	2100      	movs	r1, #0
   238b2:	4618      	mov	r0, r3
   238b4:	61bb      	str	r3, [r7, #24]
   238b6:	f7fe fcc9 	bl	2224c <memset>
   238ba:	4891      	ldr	r0, [pc, #580]	; (23b00 <__ssvfscanf_r+0x874>)
   238bc:	462a      	mov	r2, r5
   238be:	69bb      	ldr	r3, [r7, #24]
   238c0:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
   238c4:	f107 0140 	add.w	r1, r7, #64	; 0x40
   238c8:	4605      	mov	r5, r0
   238ca:	4650      	mov	r0, sl
   238cc:	47a8      	blx	r5
   238ce:	2801      	cmp	r0, #1
   238d0:	f000 84b0 	beq.w	24234 <__ssvfscanf_r+0xfa8>
   238d4:	2200      	movs	r2, #0
   238d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
   238da:	5c9b      	ldrb	r3, [r3, r2]
   238dc:	2b00      	cmp	r3, #0
   238de:	f000 866e 	beq.w	245be <__ssvfscanf_r+0x1332>
   238e2:	69fb      	ldr	r3, [r7, #28]
   238e4:	2e03      	cmp	r6, #3
   238e6:	4443      	add	r3, r8
   238e8:	61fb      	str	r3, [r7, #28]
   238ea:	f000 84a7 	beq.w	2423c <__ssvfscanf_r+0xfb0>
   238ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   238f0:	3b01      	subs	r3, #1
   238f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   238f4:	697d      	ldr	r5, [r7, #20]
   238f6:	2d00      	cmp	r5, #0
   238f8:	f040 8499 	bne.w	2422e <__ssvfscanf_r+0xfa2>
   238fc:	f109 0904 	add.w	r9, r9, #4
   23900:	68f8      	ldr	r0, [r7, #12]
   23902:	693b      	ldr	r3, [r7, #16]
   23904:	eba9 0400 	sub.w	r4, r9, r0
   23908:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   2390c:	f200 848f 	bhi.w	2422e <__ssvfscanf_r+0xfa2>
   23910:	68ba      	ldr	r2, [r7, #8]
   23912:	2a00      	cmp	r2, #0
   23914:	f000 848b 	beq.w	2422e <__ssvfscanf_r+0xfa2>
   23918:	00d9      	lsls	r1, r3, #3
   2391a:	f7fe fcf3 	bl	22304 <realloc>
   2391e:	60f8      	str	r0, [r7, #12]
   23920:	2800      	cmp	r0, #0
   23922:	f000 8462 	beq.w	241ea <__ssvfscanf_r+0xf5e>
   23926:	693b      	ldr	r3, [r7, #16]
   23928:	eb00 0904 	add.w	r9, r0, r4
   2392c:	68ba      	ldr	r2, [r7, #8]
   2392e:	462c      	mov	r4, r5
   23930:	005b      	lsls	r3, r3, #1
   23932:	6010      	str	r0, [r2, #0]
   23934:	613b      	str	r3, [r7, #16]
   23936:	f8db 3004 	ldr.w	r3, [fp, #4]
   2393a:	2b00      	cmp	r3, #0
   2393c:	dd3c      	ble.n	239b8 <__ssvfscanf_r+0x72c>
   2393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   23940:	2b00      	cmp	r3, #0
   23942:	f000 857c 	beq.w	2443e <__ssvfscanf_r+0x11b2>
   23946:	f003 f975 	bl	26c34 <__locale_mb_cur_max>
   2394a:	42a0      	cmp	r0, r4
   2394c:	f43f ad3d 	beq.w	233ca <__ssvfscanf_r+0x13e>
   23950:	f8db 2000 	ldr.w	r2, [fp]
   23954:	f507 70ac 	add.w	r0, r7, #344	; 0x158
   23958:	f8db 3004 	ldr.w	r3, [fp, #4]
   2395c:	2e03      	cmp	r6, #3
   2395e:	f812 1b01 	ldrb.w	r1, [r2], #1
   23962:	f104 0801 	add.w	r8, r4, #1
   23966:	f103 33ff 	add.w	r3, r3, #4294967295
   2396a:	5501      	strb	r1, [r0, r4]
   2396c:	e9cb 2300 	strd	r2, r3, [fp]
   23970:	f107 0348 	add.w	r3, r7, #72	; 0x48
   23974:	63bb      	str	r3, [r7, #56]	; 0x38
   23976:	d102      	bne.n	2397e <__ssvfscanf_r+0x6f2>
   23978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2397a:	2b04      	cmp	r3, #4
   2397c:	d004      	beq.n	23988 <__ssvfscanf_r+0x6fc>
   2397e:	2208      	movs	r2, #8
   23980:	2100      	movs	r1, #0
   23982:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   23984:	f7fe fc62 	bl	2224c <memset>
   23988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2398a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   2398e:	4649      	mov	r1, r9
   23990:	4650      	mov	r0, sl
   23992:	9300      	str	r3, [sp, #0]
   23994:	4643      	mov	r3, r8
   23996:	f003 f9ef 	bl	26d78 <_mbrtowc_r>
   2399a:	1c45      	adds	r5, r0, #1
   2399c:	4606      	mov	r6, r0
   2399e:	f43f ad14 	beq.w	233ca <__ssvfscanf_r+0x13e>
   239a2:	2800      	cmp	r0, #0
   239a4:	f43f af7e 	beq.w	238a4 <__ssvfscanf_r+0x618>
   239a8:	1cb0      	adds	r0, r6, #2
   239aa:	f040 86a1 	bne.w	246f0 <__ssvfscanf_r+0x1464>
   239ae:	f8db 3004 	ldr.w	r3, [fp, #4]
   239b2:	4644      	mov	r4, r8
   239b4:	2b00      	cmp	r3, #0
   239b6:	dcc2      	bgt.n	2393e <__ssvfscanf_r+0x6b2>
   239b8:	4659      	mov	r1, fp
   239ba:	4650      	mov	r0, sl
   239bc:	f004 fade 	bl	27f7c <__ssrefill_r>
   239c0:	2800      	cmp	r0, #0
   239c2:	d0bc      	beq.n	2393e <__ssvfscanf_r+0x6b2>
   239c4:	f8d7 a01c 	ldr.w	sl, [r7, #28]
   239c8:	62fe      	str	r6, [r7, #44]	; 0x2c
   239ca:	2c00      	cmp	r4, #0
   239cc:	f47f acfd 	bne.w	233ca <__ssvfscanf_r+0x13e>
   239d0:	697b      	ldr	r3, [r7, #20]
   239d2:	2b00      	cmp	r3, #0
   239d4:	f47f ad27 	bne.w	23426 <__ssvfscanf_r+0x19a>
   239d8:	68fa      	ldr	r2, [r7, #12]
   239da:	f8c9 3000 	str.w	r3, [r9]
   239de:	eba9 0102 	sub.w	r1, r9, r2
   239e2:	693a      	ldr	r2, [r7, #16]
   239e4:	108b      	asrs	r3, r1, #2
   239e6:	3301      	adds	r3, #1
   239e8:	429a      	cmp	r2, r3
   239ea:	f240 8083 	bls.w	23af4 <__ssvfscanf_r+0x868>
   239ee:	68bc      	ldr	r4, [r7, #8]
   239f0:	2c00      	cmp	r4, #0
   239f2:	d07f      	beq.n	23af4 <__ssvfscanf_r+0x868>
   239f4:	e712      	b.n	2381c <__ssvfscanf_r+0x590>
   239f6:	2c07      	cmp	r4, #7
   239f8:	f47f ae05 	bne.w	23606 <__ssvfscanf_r+0x37a>
   239fc:	2408      	movs	r4, #8
   239fe:	e5f0      	b.n	235e2 <__ssvfscanf_r+0x356>
   23a00:	2c06      	cmp	r4, #6
   23a02:	f47f ae00 	bne.w	23606 <__ssvfscanf_r+0x37a>
   23a06:	2407      	movs	r4, #7
   23a08:	e5eb      	b.n	235e2 <__ssvfscanf_r+0x356>
   23a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23a0c:	2b01      	cmp	r3, #1
   23a0e:	f47f adfa 	bne.w	23606 <__ssvfscanf_r+0x37a>
   23a12:	2302      	movs	r3, #2
   23a14:	63bb      	str	r3, [r7, #56]	; 0x38
   23a16:	e5e4      	b.n	235e2 <__ssvfscanf_r+0x356>
   23a18:	f01b 0f80 	tst.w	fp, #128	; 0x80
   23a1c:	f43f adf3 	beq.w	23606 <__ssvfscanf_r+0x37a>
   23a20:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   23a24:	e5dd      	b.n	235e2 <__ssvfscanf_r+0x356>
   23a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23a28:	2b00      	cmp	r3, #0
   23a2a:	f040 81bb 	bne.w	23da4 <__ssvfscanf_r+0xb18>
   23a2e:	2e00      	cmp	r6, #0
   23a30:	f040 81b8 	bne.w	23da4 <__ssvfscanf_r+0xb18>
   23a34:	f40b 6ee0 	and.w	lr, fp, #1792	; 0x700
   23a38:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
   23a3c:	f000 840e 	beq.w	2425c <__ssvfscanf_r+0xfd0>
   23a40:	2c01      	cmp	r4, #1
   23a42:	d002      	beq.n	23a4a <__ssvfscanf_r+0x7be>
   23a44:	2c04      	cmp	r4, #4
   23a46:	f47f adde 	bne.w	23606 <__ssvfscanf_r+0x37a>
   23a4a:	1c62      	adds	r2, r4, #1
   23a4c:	b2d4      	uxtb	r4, r2
   23a4e:	e5c8      	b.n	235e2 <__ssvfscanf_r+0x356>
   23a50:	2c00      	cmp	r4, #0
   23a52:	f040 8187 	bne.w	23d64 <__ssvfscanf_r+0xad8>
   23a56:	2e00      	cmp	r6, #0
   23a58:	f040 8184 	bne.w	23d64 <__ssvfscanf_r+0xad8>
   23a5c:	f40b 62e0 	and.w	r2, fp, #1792	; 0x700
   23a60:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
   23a64:	f000 83f5 	beq.w	24252 <__ssvfscanf_r+0xfc6>
   23a68:	465c      	mov	r4, fp
   23a6a:	2300      	movs	r3, #0
   23a6c:	687d      	ldr	r5, [r7, #4]
   23a6e:	46c3      	mov	fp, r8
   23a70:	617b      	str	r3, [r7, #20]
   23a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23a74:	3b01      	subs	r3, #1
   23a76:	2b01      	cmp	r3, #1
   23a78:	f240 85f0 	bls.w	2465c <__ssvfscanf_r+0x13d0>
   23a7c:	1e6b      	subs	r3, r5, #1
   23a7e:	2b06      	cmp	r3, #6
   23a80:	f240 82ae 	bls.w	23fe0 <__ssvfscanf_r+0xd54>
   23a84:	05e6      	lsls	r6, r4, #23
   23a86:	d512      	bpl.n	23aae <__ssvfscanf_r+0x822>
   23a88:	0565      	lsls	r5, r4, #21
   23a8a:	f100 85fe 	bmi.w	2468a <__ssvfscanf_r+0x13fe>
   23a8e:	f819 1c01 	ldrb.w	r1, [r9, #-1]
   23a92:	f001 03df 	and.w	r3, r1, #223	; 0xdf
   23a96:	2b45      	cmp	r3, #69	; 0x45
   23a98:	f040 8470 	bne.w	2437c <__ssvfscanf_r+0x10f0>
   23a9c:	f109 39ff 	add.w	r9, r9, #4294967295
   23aa0:	f10a 3aff 	add.w	sl, sl, #4294967295
   23aa4:	465a      	mov	r2, fp
   23aa6:	ee18 0a10 	vmov	r0, s16
   23aaa:	f004 fa27 	bl	27efc <_sungetc_r>
   23aae:	f014 0210 	ands.w	r2, r4, #16
   23ab2:	f47f acb8 	bne.w	23426 <__ssvfscanf_r+0x19a>
   23ab6:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   23aba:	f889 2000 	strb.w	r2, [r9]
   23abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   23ac2:	f000 8452 	beq.w	2436a <__ssvfscanf_r+0x10de>
   23ac6:	693b      	ldr	r3, [r7, #16]
   23ac8:	2b00      	cmp	r3, #0
   23aca:	f040 8317 	bne.w	240fc <__ssvfscanf_r+0xe70>
   23ace:	ee18 0a10 	vmov	r0, s16
   23ad2:	69f9      	ldr	r1, [r7, #28]
   23ad4:	2200      	movs	r2, #0
   23ad6:	f7ff fa9b 	bl	23010 <_strtod_r>
   23ada:	07e0      	lsls	r0, r4, #31
   23adc:	ec59 8b10 	vmov	r8, r9, d0
   23ae0:	d402      	bmi.n	23ae8 <__ssvfscanf_r+0x85c>
   23ae2:	07a1      	lsls	r1, r4, #30
   23ae4:	f140 82f3 	bpl.w	240ce <__ssvfscanf_r+0xe42>
   23ae8:	6abe      	ldr	r6, [r7, #40]	; 0x28
   23aea:	f856 3b04 	ldr.w	r3, [r6], #4
   23aee:	e9c3 8900 	strd	r8, r9, [r3]
   23af2:	62be      	str	r6, [r7, #40]	; 0x28
   23af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23af6:	3301      	adds	r3, #1
   23af8:	633b      	str	r3, [r7, #48]	; 0x30
   23afa:	e494      	b.n	23426 <__ssvfscanf_r+0x19a>
   23afc:	0002bfa1 	.word	0x0002bfa1
   23b00:	200208f0 	.word	0x200208f0
   23b04:	2c02      	cmp	r4, #2
   23b06:	f47f ad7e 	bne.w	23606 <__ssvfscanf_r+0x37a>
   23b0a:	2403      	movs	r4, #3
   23b0c:	e569      	b.n	235e2 <__ssvfscanf_r+0x356>
   23b0e:	f40b 6ea0 	and.w	lr, fp, #1280	; 0x500
   23b12:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
   23b16:	d006      	beq.n	23b26 <__ssvfscanf_r+0x89a>
   23b18:	f41b 6f80 	tst.w	fp, #1024	; 0x400
   23b1c:	f43f ad73 	beq.w	23606 <__ssvfscanf_r+0x37a>
   23b20:	2e00      	cmp	r6, #0
   23b22:	f000 8594 	beq.w	2464e <__ssvfscanf_r+0x13c2>
   23b26:	f41b 7f00 	tst.w	fp, #512	; 0x200
   23b2a:	d104      	bne.n	23b36 <__ssvfscanf_r+0x8aa>
   23b2c:	69bb      	ldr	r3, [r7, #24]
   23b2e:	f8c7 9008 	str.w	r9, [r7, #8]
   23b32:	1af3      	subs	r3, r6, r3
   23b34:	613b      	str	r3, [r7, #16]
   23b36:	f42b 63f0 	bic.w	r3, fp, #1920	; 0x780
   23b3a:	2600      	movs	r6, #0
   23b3c:	f443 7bc0 	orr.w	fp, r3, #384	; 0x180
   23b40:	e54f      	b.n	235e2 <__ssvfscanf_r+0x356>
   23b42:	4b9d      	ldr	r3, [pc, #628]	; (23db8 <__ssvfscanf_r+0xb2c>)
   23b44:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   23b48:	f933 9019 	ldrsh.w	r9, [r3, r9, lsl #1]
   23b4c:	e5e1      	b.n	23712 <__ssvfscanf_r+0x486>
   23b4e:	f41b 7f80 	tst.w	fp, #256	; 0x100
   23b52:	f43f ad64 	beq.w	2361e <__ssvfscanf_r+0x392>
   23b56:	68fb      	ldr	r3, [r7, #12]
   23b58:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   23b5c:	3601      	adds	r6, #1
   23b5e:	2b00      	cmp	r3, #0
   23b60:	f040 8239 	bne.w	23fd6 <__ssvfscanf_r+0xd4a>
   23b64:	3d01      	subs	r5, #1
   23b66:	e53f      	b.n	235e8 <__ssvfscanf_r+0x35c>
   23b68:	0726      	lsls	r6, r4, #28
   23b6a:	f47f ac37 	bne.w	233dc <__ssvfscanf_r+0x150>
   23b6e:	7842      	ldrb	r2, [r0, #1]
   23b70:	4608      	mov	r0, r1
   23b72:	f7ff bbc0 	b.w	232f6 <__ssvfscanf_r+0x6a>
   23b76:	0723      	lsls	r3, r4, #28
   23b78:	f47f ac30 	bne.w	233dc <__ssvfscanf_r+0x150>
   23b7c:	7842      	ldrb	r2, [r0, #1]
   23b7e:	f044 0402 	orr.w	r4, r4, #2
   23b82:	4608      	mov	r0, r1
   23b84:	f7ff bbb7 	b.w	232f6 <__ssvfscanf_r+0x6a>
   23b88:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   23b8c:	4b8b      	ldr	r3, [pc, #556]	; (23dbc <__ssvfscanf_r+0xb30>)
   23b8e:	2603      	movs	r6, #3
   23b90:	63f9      	str	r1, [r7, #60]	; 0x3c
   23b92:	623b      	str	r3, [r7, #32]
   23b94:	2310      	movs	r3, #16
   23b96:	627b      	str	r3, [r7, #36]	; 0x24
   23b98:	f8db 3004 	ldr.w	r3, [fp, #4]
   23b9c:	2b00      	cmp	r3, #0
   23b9e:	f73f ac89 	bgt.w	234b4 <__ssvfscanf_r+0x228>
   23ba2:	4659      	mov	r1, fp
   23ba4:	ee18 0a10 	vmov	r0, s16
   23ba8:	f004 f9e8 	bl	27f7c <__ssrefill_r>
   23bac:	2800      	cmp	r0, #0
   23bae:	f47f ac0c 	bne.w	233ca <__ssvfscanf_r+0x13e>
   23bb2:	0662      	lsls	r2, r4, #25
   23bb4:	f53f ac81 	bmi.w	234ba <__ssvfscanf_r+0x22e>
   23bb8:	f8db 2000 	ldr.w	r2, [fp]
   23bbc:	4980      	ldr	r1, [pc, #512]	; (23dc0 <__ssvfscanf_r+0xb34>)
   23bbe:	7813      	ldrb	r3, [r2, #0]
   23bc0:	5ccb      	ldrb	r3, [r1, r3]
   23bc2:	071b      	lsls	r3, r3, #28
   23bc4:	f57f ac79 	bpl.w	234ba <__ssvfscanf_r+0x22e>
   23bc8:	ee18 9a10 	vmov	r9, s16
   23bcc:	e007      	b.n	23bde <__ssvfscanf_r+0x952>
   23bce:	f8cb 2000 	str.w	r2, [fp]
   23bd2:	7813      	ldrb	r3, [r2, #0]
   23bd4:	497a      	ldr	r1, [pc, #488]	; (23dc0 <__ssvfscanf_r+0xb34>)
   23bd6:	5ccb      	ldrb	r3, [r1, r3]
   23bd8:	0718      	lsls	r0, r3, #28
   23bda:	f57f ac6e 	bpl.w	234ba <__ssvfscanf_r+0x22e>
   23bde:	f8db 3004 	ldr.w	r3, [fp, #4]
   23be2:	f10a 0a01 	add.w	sl, sl, #1
   23be6:	3201      	adds	r2, #1
   23be8:	3b01      	subs	r3, #1
   23bea:	2b00      	cmp	r3, #0
   23bec:	f8cb 3004 	str.w	r3, [fp, #4]
   23bf0:	dced      	bgt.n	23bce <__ssvfscanf_r+0x942>
   23bf2:	4659      	mov	r1, fp
   23bf4:	4648      	mov	r0, r9
   23bf6:	f004 f9c1 	bl	27f7c <__ssrefill_r>
   23bfa:	2800      	cmp	r0, #0
   23bfc:	f47f abe5 	bne.w	233ca <__ssvfscanf_r+0x13e>
   23c00:	f8db 2000 	ldr.w	r2, [fp]
   23c04:	e7e5      	b.n	23bd2 <__ssvfscanf_r+0x946>
   23c06:	0621      	lsls	r1, r4, #24
   23c08:	f57f ad90 	bpl.w	2372c <__ssvfscanf_r+0x4a0>
   23c0c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   23c10:	e57f      	b.n	23712 <__ssvfscanf_r+0x486>
   23c12:	4b69      	ldr	r3, [pc, #420]	; (23db8 <__ssvfscanf_r+0xb2c>)
   23c14:	f933 9019 	ldrsh.w	r9, [r3, r9, lsl #1]
   23c18:	f1b9 0f08 	cmp.w	r9, #8
   23c1c:	f73f ad77 	bgt.w	2370e <__ssvfscanf_r+0x482>
   23c20:	e584      	b.n	2372c <__ssvfscanf_r+0x4a0>
   23c22:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   23c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   23c2a:	f47f ad7f 	bne.w	2372c <__ssvfscanf_r+0x4a0>
   23c2e:	f424 7400 	bic.w	r4, r4, #512	; 0x200
   23c32:	f04f 0910 	mov.w	r9, #16
   23c36:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
   23c3a:	e56a      	b.n	23712 <__ssvfscanf_r+0x486>
   23c3c:	f044 0401 	orr.w	r4, r4, #1
   23c40:	2602      	movs	r6, #2
   23c42:	63f9      	str	r1, [r7, #60]	; 0x3c
   23c44:	e431      	b.n	234aa <__ssvfscanf_r+0x21e>
   23c46:	f044 0401 	orr.w	r4, r4, #1
   23c4a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   23c4e:	2600      	movs	r6, #0
   23c50:	63f9      	str	r1, [r7, #60]	; 0x3c
   23c52:	e42a      	b.n	234aa <__ssvfscanf_r+0x21e>
   23c54:	f044 0401 	orr.w	r4, r4, #1
   23c58:	4b58      	ldr	r3, [pc, #352]	; (23dbc <__ssvfscanf_r+0xb30>)
   23c5a:	2603      	movs	r6, #3
   23c5c:	63f9      	str	r1, [r7, #60]	; 0x3c
   23c5e:	623b      	str	r3, [r7, #32]
   23c60:	2308      	movs	r3, #8
   23c62:	627b      	str	r3, [r7, #36]	; 0x24
   23c64:	e421      	b.n	234aa <__ssvfscanf_r+0x21e>
   23c66:	f044 0401 	orr.w	r4, r4, #1
   23c6a:	4b56      	ldr	r3, [pc, #344]	; (23dc4 <__ssvfscanf_r+0xb38>)
   23c6c:	2603      	movs	r6, #3
   23c6e:	63f9      	str	r1, [r7, #60]	; 0x3c
   23c70:	623b      	str	r3, [r7, #32]
   23c72:	230a      	movs	r3, #10
   23c74:	627b      	str	r3, [r7, #36]	; 0x24
   23c76:	e418      	b.n	234aa <__ssvfscanf_r+0x21e>
   23c78:	f107 0058 	add.w	r0, r7, #88	; 0x58
   23c7c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   23c80:	f003 fe6c 	bl	2795c <__sccl>
   23c84:	2601      	movs	r6, #1
   23c86:	63f8      	str	r0, [r7, #60]	; 0x3c
   23c88:	e40f      	b.n	234aa <__ssvfscanf_r+0x21e>
   23c8a:	0726      	lsls	r6, r4, #28
   23c8c:	f47f aba6 	bne.w	233dc <__ssvfscanf_r+0x150>
   23c90:	7842      	ldrb	r2, [r0, #1]
   23c92:	2a6c      	cmp	r2, #108	; 0x6c
   23c94:	f000 83d8 	beq.w	24448 <__ssvfscanf_r+0x11bc>
   23c98:	f044 0401 	orr.w	r4, r4, #1
   23c9c:	4608      	mov	r0, r1
   23c9e:	f7ff bb2a 	b.w	232f6 <__ssvfscanf_r+0x6a>
   23ca2:	ea58 0804 	orrs.w	r8, r8, r4
   23ca6:	f47f ab99 	bne.w	233dc <__ssvfscanf_r+0x150>
   23caa:	7842      	ldrb	r2, [r0, #1]
   23cac:	2410      	movs	r4, #16
   23cae:	4608      	mov	r0, r1
   23cb0:	f7ff bb21 	b.w	232f6 <__ssvfscanf_r+0x6a>
   23cb4:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   23cb8:	f47f ab90 	bne.w	233dc <__ssvfscanf_r+0x150>
   23cbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   23cbe:	2a00      	cmp	r2, #0
   23cc0:	f000 83f7 	beq.w	244b2 <__ssvfscanf_r+0x1226>
   23cc4:	7842      	ldrb	r2, [r0, #1]
   23cc6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   23cca:	4608      	mov	r0, r1
   23ccc:	f7ff bb13 	b.w	232f6 <__ssvfscanf_r+0x6a>
   23cd0:	06e2      	lsls	r2, r4, #27
   23cd2:	f100 81aa 	bmi.w	2402a <__ssvfscanf_r+0xd9e>
   23cd6:	0723      	lsls	r3, r4, #28
   23cd8:	f140 840d 	bpl.w	244f6 <__ssvfscanf_r+0x126a>
   23cdc:	6abe      	ldr	r6, [r7, #40]	; 0x28
   23cde:	63f9      	str	r1, [r7, #60]	; 0x3c
   23ce0:	f856 3b04 	ldr.w	r3, [r6], #4
   23ce4:	f883 a000 	strb.w	sl, [r3]
   23ce8:	62be      	str	r6, [r7, #40]	; 0x28
   23cea:	f7ff bb9c 	b.w	23426 <__ssvfscanf_r+0x19a>
   23cee:	0722      	lsls	r2, r4, #28
   23cf0:	f47f ab74 	bne.w	233dc <__ssvfscanf_r+0x150>
   23cf4:	7842      	ldrb	r2, [r0, #1]
   23cf6:	2a68      	cmp	r2, #104	; 0x68
   23cf8:	f000 83b0 	beq.w	2445c <__ssvfscanf_r+0x11d0>
   23cfc:	f044 0404 	orr.w	r4, r4, #4
   23d00:	4608      	mov	r0, r1
   23d02:	f7ff baf8 	b.w	232f6 <__ssvfscanf_r+0x6a>
   23d06:	4b2f      	ldr	r3, [pc, #188]	; (23dc4 <__ssvfscanf_r+0xb38>)
   23d08:	2603      	movs	r6, #3
   23d0a:	63f9      	str	r1, [r7, #60]	; 0x3c
   23d0c:	623b      	str	r3, [r7, #32]
   23d0e:	2300      	movs	r3, #0
   23d10:	627b      	str	r3, [r7, #36]	; 0x24
   23d12:	f7ff bbca 	b.w	234aa <__ssvfscanf_r+0x21e>
   23d16:	4b29      	ldr	r3, [pc, #164]	; (23dbc <__ssvfscanf_r+0xb30>)
   23d18:	2603      	movs	r6, #3
   23d1a:	63f9      	str	r1, [r7, #60]	; 0x3c
   23d1c:	623b      	str	r3, [r7, #32]
   23d1e:	230a      	movs	r3, #10
   23d20:	627b      	str	r3, [r7, #36]	; 0x24
   23d22:	f7ff bbc2 	b.w	234aa <__ssvfscanf_r+0x21e>
   23d26:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   23d2a:	e72f      	b.n	23b8c <__ssvfscanf_r+0x900>
   23d2c:	0521      	lsls	r1, r4, #20
   23d2e:	f57f acf0 	bpl.w	23712 <__ssvfscanf_r+0x486>
   23d32:	f1b9 0f00 	cmp.w	r9, #0
   23d36:	d103      	bne.n	23d40 <__ssvfscanf_r+0xab4>
   23d38:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   23d3c:	f04f 0908 	mov.w	r9, #8
   23d40:	0563      	lsls	r3, r4, #21
   23d42:	f140 8166 	bpl.w	24012 <__ssvfscanf_r+0xd86>
   23d46:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   23d4a:	e4e2      	b.n	23712 <__ssvfscanf_r+0x486>
   23d4c:	4641      	mov	r1, r8
   23d4e:	ee18 0a10 	vmov	r0, s16
   23d52:	f004 f913 	bl	27f7c <__ssrefill_r>
   23d56:	2800      	cmp	r0, #0
   23d58:	f47f ac55 	bne.w	23606 <__ssvfscanf_r+0x37a>
   23d5c:	2d00      	cmp	r5, #0
   23d5e:	f47f abdc 	bne.w	2351a <__ssvfscanf_r+0x28e>
   23d62:	e450      	b.n	23606 <__ssvfscanf_r+0x37a>
   23d64:	2c03      	cmp	r4, #3
   23d66:	f43f ae70 	beq.w	23a4a <__ssvfscanf_r+0x7be>
   23d6a:	2c05      	cmp	r4, #5
   23d6c:	f43f ae6d 	beq.w	23a4a <__ssvfscanf_r+0x7be>
   23d70:	e449      	b.n	23606 <__ssvfscanf_r+0x37a>
   23d72:	4631      	mov	r1, r6
   23d74:	ee18 0a10 	vmov	r0, s16
   23d78:	f004 f900 	bl	27f7c <__ssrefill_r>
   23d7c:	2800      	cmp	r0, #0
   23d7e:	f43f acd2 	beq.w	23726 <__ssvfscanf_r+0x49a>
   23d82:	e4d3      	b.n	2372c <__ssvfscanf_r+0x4a0>
   23d84:	6abc      	ldr	r4, [r7, #40]	; 0x28
   23d86:	f854 3b04 	ldr.w	r3, [r4], #4
   23d8a:	6018      	str	r0, [r3, #0]
   23d8c:	62bc      	str	r4, [r7, #40]	; 0x28
   23d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23d90:	3301      	adds	r3, #1
   23d92:	633b      	str	r3, [r7, #48]	; 0x30
   23d94:	69fb      	ldr	r3, [r7, #28]
   23d96:	1aed      	subs	r5, r5, r3
   23d98:	4643      	mov	r3, r8
   23d9a:	442b      	add	r3, r5
   23d9c:	461e      	mov	r6, r3
   23d9e:	44b2      	add	sl, r6
   23da0:	f7ff bb41 	b.w	23426 <__ssvfscanf_r+0x19a>
   23da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23da6:	2b02      	cmp	r3, #2
   23da8:	f47f ae4a 	bne.w	23a40 <__ssvfscanf_r+0x7b4>
   23dac:	2303      	movs	r3, #3
   23dae:	63bb      	str	r3, [r7, #56]	; 0x38
   23db0:	e417      	b.n	235e2 <__ssvfscanf_r+0x356>
   23db2:	f04f 0900 	mov.w	r9, #0
   23db6:	e444      	b.n	23642 <__ssvfscanf_r+0x3b6>
   23db8:	0002c148 	.word	0x0002c148
   23dbc:	00023271 	.word	0x00023271
   23dc0:	0002bfa1 	.word	0x0002bfa1
   23dc4:	00023141 	.word	0x00023141
   23dc8:	06e6      	lsls	r6, r4, #27
   23dca:	f100 83a9 	bmi.w	24520 <__ssvfscanf_r+0x1294>
   23dce:	f014 0380 	ands.w	r3, r4, #128	; 0x80
   23dd2:	6abe      	ldr	r6, [r7, #40]	; 0x28
   23dd4:	f000 8351 	beq.w	2447a <__ssvfscanf_r+0x11ee>
   23dd8:	f856 3b04 	ldr.w	r3, [r6], #4
   23ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   23dde:	2b00      	cmp	r3, #0
   23de0:	f43f aafc 	beq.w	233dc <__ssvfscanf_r+0x150>
   23de4:	2020      	movs	r0, #32
   23de6:	f7fd fee7 	bl	21bb8 <malloc>
   23dea:	4605      	mov	r5, r0
   23dec:	2800      	cmp	r0, #0
   23dee:	f000 81fc 	beq.w	241ea <__ssvfscanf_r+0xf5e>
   23df2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   23df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23df6:	f8b2 9006 	ldrh.w	r9, [r2, #6]
   23dfa:	8894      	ldrh	r4, [r2, #4]
   23dfc:	6018      	str	r0, [r3, #0]
   23dfe:	45a1      	cmp	r9, r4
   23e00:	f080 8116 	bcs.w	24030 <__ssvfscanf_r+0xda4>
   23e04:	6810      	ldr	r0, [r2, #0]
   23e06:	6bba      	ldr	r2, [r7, #56]	; 0x38
   23e08:	f109 0301 	add.w	r3, r9, #1
   23e0c:	62be      	str	r6, [r7, #40]	; 0x28
   23e0e:	f840 2029 	str.w	r2, [r0, r9, lsl #2]
   23e12:	2201      	movs	r2, #1
   23e14:	f04f 0920 	mov.w	r9, #32
   23e18:	61fa      	str	r2, [r7, #28]
   23e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   23e1c:	80d3      	strh	r3, [r2, #6]
   23e1e:	f8db 3000 	ldr.w	r3, [fp]
   23e22:	49b5      	ldr	r1, [pc, #724]	; (240f8 <__ssvfscanf_r+0xe6c>)
   23e24:	781a      	ldrb	r2, [r3, #0]
   23e26:	5c8a      	ldrb	r2, [r1, r2]
   23e28:	0711      	lsls	r1, r2, #28
   23e2a:	f100 82b8 	bmi.w	2439e <__ssvfscanf_r+0x1112>
   23e2e:	462c      	mov	r4, r5
   23e30:	f8db 2004 	ldr.w	r2, [fp, #4]
   23e34:	1c59      	adds	r1, r3, #1
   23e36:	462e      	mov	r6, r5
   23e38:	3a01      	subs	r2, #1
   23e3a:	e9cb 1200 	strd	r1, r2, [fp]
   23e3e:	781b      	ldrb	r3, [r3, #0]
   23e40:	f806 3b01 	strb.w	r3, [r6], #1
   23e44:	1b35      	subs	r5, r6, r4
   23e46:	45a9      	cmp	r9, r5
   23e48:	d80e      	bhi.n	23e68 <__ssvfscanf_r+0xbdc>
   23e4a:	69fb      	ldr	r3, [r7, #28]
   23e4c:	4620      	mov	r0, r4
   23e4e:	b15b      	cbz	r3, 23e68 <__ssvfscanf_r+0xbdc>
   23e50:	ea4f 0949 	mov.w	r9, r9, lsl #1
   23e54:	4649      	mov	r1, r9
   23e56:	f7fe fa55 	bl	22304 <realloc>
   23e5a:	4604      	mov	r4, r0
   23e5c:	2800      	cmp	r0, #0
   23e5e:	f000 81c4 	beq.w	241ea <__ssvfscanf_r+0xf5e>
   23e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23e64:	1946      	adds	r6, r0, r5
   23e66:	6018      	str	r0, [r3, #0]
   23e68:	f1b8 0801 	subs.w	r8, r8, #1
   23e6c:	4635      	mov	r5, r6
   23e6e:	f000 8292 	beq.w	24396 <__ssvfscanf_r+0x110a>
   23e72:	f8db 3004 	ldr.w	r3, [fp, #4]
   23e76:	2b00      	cmp	r3, #0
   23e78:	f340 8349 	ble.w	2450e <__ssvfscanf_r+0x1282>
   23e7c:	f8db 3000 	ldr.w	r3, [fp]
   23e80:	499d      	ldr	r1, [pc, #628]	; (240f8 <__ssvfscanf_r+0xe6c>)
   23e82:	781a      	ldrb	r2, [r3, #0]
   23e84:	5c8a      	ldrb	r2, [r1, r2]
   23e86:	0712      	lsls	r2, r2, #28
   23e88:	d5d2      	bpl.n	23e30 <__ssvfscanf_r+0xba4>
   23e8a:	1b31      	subs	r1, r6, r4
   23e8c:	4635      	mov	r5, r6
   23e8e:	448a      	add	sl, r1
   23e90:	3101      	adds	r1, #1
   23e92:	2300      	movs	r3, #0
   23e94:	4589      	cmp	r9, r1
   23e96:	702b      	strb	r3, [r5, #0]
   23e98:	f67f ae2c 	bls.w	23af4 <__ssvfscanf_r+0x868>
   23e9c:	69fb      	ldr	r3, [r7, #28]
   23e9e:	2b00      	cmp	r3, #0
   23ea0:	f43f ae28 	beq.w	23af4 <__ssvfscanf_r+0x868>
   23ea4:	6bbc      	ldr	r4, [r7, #56]	; 0x38
   23ea6:	6820      	ldr	r0, [r4, #0]
   23ea8:	f7fe fa2c 	bl	22304 <realloc>
   23eac:	2800      	cmp	r0, #0
   23eae:	f47f acbc 	bne.w	2382a <__ssvfscanf_r+0x59e>
   23eb2:	e61f      	b.n	23af4 <__ssvfscanf_r+0x868>
   23eb4:	2300      	movs	r3, #0
   23eb6:	60fb      	str	r3, [r7, #12]
   23eb8:	f7ff bb1f 	b.w	234fa <__ssvfscanf_r+0x26e>
   23ebc:	06e1      	lsls	r1, r4, #27
   23ebe:	f100 827d 	bmi.w	243bc <__ssvfscanf_r+0x1130>
   23ec2:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   23ec6:	6abe      	ldr	r6, [r7, #40]	; 0x28
   23ec8:	f000 8307 	beq.w	244da <__ssvfscanf_r+0x124e>
   23ecc:	f856 3b04 	ldr.w	r3, [r6], #4
   23ed0:	61fb      	str	r3, [r7, #28]
   23ed2:	2b00      	cmp	r3, #0
   23ed4:	f43f aa82 	beq.w	233dc <__ssvfscanf_r+0x150>
   23ed8:	2020      	movs	r0, #32
   23eda:	f7fd fe6d 	bl	21bb8 <malloc>
   23ede:	4605      	mov	r5, r0
   23ee0:	2800      	cmp	r0, #0
   23ee2:	f000 8182 	beq.w	241ea <__ssvfscanf_r+0xf5e>
   23ee6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   23ee8:	69fb      	ldr	r3, [r7, #28]
   23eea:	f8b2 9006 	ldrh.w	r9, [r2, #6]
   23eee:	8894      	ldrh	r4, [r2, #4]
   23ef0:	6018      	str	r0, [r3, #0]
   23ef2:	45a1      	cmp	r9, r4
   23ef4:	f080 80c0 	bcs.w	24078 <__ssvfscanf_r+0xdec>
   23ef8:	6810      	ldr	r0, [r2, #0]
   23efa:	69fa      	ldr	r2, [r7, #28]
   23efc:	f109 0301 	add.w	r3, r9, #1
   23f00:	2420      	movs	r4, #32
   23f02:	62be      	str	r6, [r7, #40]	; 0x28
   23f04:	f840 2029 	str.w	r2, [r0, r9, lsl #2]
   23f08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   23f0a:	80d3      	strh	r3, [r2, #6]
   23f0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
   23f10:	f8db 2000 	ldr.w	r2, [fp]
   23f14:	4619      	mov	r1, r3
   23f16:	4618      	mov	r0, r3
   23f18:	7813      	ldrb	r3, [r2, #0]
   23f1a:	5ccb      	ldrb	r3, [r1, r3]
   23f1c:	2b00      	cmp	r3, #0
   23f1e:	f43f aa5d 	beq.w	233dc <__ssvfscanf_r+0x150>
   23f22:	69fb      	ldr	r3, [r7, #28]
   23f24:	462e      	mov	r6, r5
   23f26:	f8c7 a018 	str.w	sl, [r7, #24]
   23f2a:	4611      	mov	r1, r2
   23f2c:	3b00      	subs	r3, #0
   23f2e:	46a2      	mov	sl, r4
   23f30:	4681      	mov	r9, r0
   23f32:	bf18      	it	ne
   23f34:	2301      	movne	r3, #1
   23f36:	63bb      	str	r3, [r7, #56]	; 0x38
   23f38:	e007      	b.n	23f4a <__ssvfscanf_r+0xcbe>
   23f3a:	f8db 1000 	ldr.w	r1, [fp]
   23f3e:	780b      	ldrb	r3, [r1, #0]
   23f40:	f819 3003 	ldrb.w	r3, [r9, r3]
   23f44:	2b00      	cmp	r3, #0
   23f46:	f000 8180 	beq.w	2424a <__ssvfscanf_r+0xfbe>
   23f4a:	f8db 3004 	ldr.w	r3, [fp, #4]
   23f4e:	1c48      	adds	r0, r1, #1
   23f50:	3b01      	subs	r3, #1
   23f52:	e9cb 0300 	strd	r0, r3, [fp]
   23f56:	780b      	ldrb	r3, [r1, #0]
   23f58:	f805 3b01 	strb.w	r3, [r5], #1
   23f5c:	1bac      	subs	r4, r5, r6
   23f5e:	4554      	cmp	r4, sl
   23f60:	d30e      	bcc.n	23f80 <__ssvfscanf_r+0xcf4>
   23f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23f64:	4630      	mov	r0, r6
   23f66:	b15b      	cbz	r3, 23f80 <__ssvfscanf_r+0xcf4>
   23f68:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   23f6c:	4651      	mov	r1, sl
   23f6e:	f7fe f9c9 	bl	22304 <realloc>
   23f72:	4606      	mov	r6, r0
   23f74:	2800      	cmp	r0, #0
   23f76:	f000 8138 	beq.w	241ea <__ssvfscanf_r+0xf5e>
   23f7a:	69fb      	ldr	r3, [r7, #28]
   23f7c:	1905      	adds	r5, r0, r4
   23f7e:	6018      	str	r0, [r3, #0]
   23f80:	f1b8 0801 	subs.w	r8, r8, #1
   23f84:	f000 8161 	beq.w	2424a <__ssvfscanf_r+0xfbe>
   23f88:	f8db 3004 	ldr.w	r3, [fp, #4]
   23f8c:	2b00      	cmp	r3, #0
   23f8e:	dcd4      	bgt.n	23f3a <__ssvfscanf_r+0xcae>
   23f90:	4659      	mov	r1, fp
   23f92:	ee18 0a10 	vmov	r0, s16
   23f96:	f003 fff1 	bl	27f7c <__ssrefill_r>
   23f9a:	2800      	cmp	r0, #0
   23f9c:	d0cd      	beq.n	23f3a <__ssvfscanf_r+0xcae>
   23f9e:	42b5      	cmp	r5, r6
   23fa0:	4654      	mov	r4, sl
   23fa2:	f8d7 a018 	ldr.w	sl, [r7, #24]
   23fa6:	f43f aa10 	beq.w	233ca <__ssvfscanf_r+0x13e>
   23faa:	1bae      	subs	r6, r5, r6
   23fac:	f43f aa16 	beq.w	233dc <__ssvfscanf_r+0x150>
   23fb0:	1c71      	adds	r1, r6, #1
   23fb2:	2300      	movs	r3, #0
   23fb4:	428c      	cmp	r4, r1
   23fb6:	702b      	strb	r3, [r5, #0]
   23fb8:	d907      	bls.n	23fca <__ssvfscanf_r+0xd3e>
   23fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23fbc:	b12b      	cbz	r3, 23fca <__ssvfscanf_r+0xd3e>
   23fbe:	69fc      	ldr	r4, [r7, #28]
   23fc0:	6820      	ldr	r0, [r4, #0]
   23fc2:	f7fe f99f 	bl	22304 <realloc>
   23fc6:	b100      	cbz	r0, 23fca <__ssvfscanf_r+0xd3e>
   23fc8:	6020      	str	r0, [r4, #0]
   23fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23fcc:	44b2      	add	sl, r6
   23fce:	3301      	adds	r3, #1
   23fd0:	633b      	str	r3, [r7, #48]	; 0x30
   23fd2:	f7ff ba28 	b.w	23426 <__ssvfscanf_r+0x19a>
   23fd6:	68fb      	ldr	r3, [r7, #12]
   23fd8:	3b01      	subs	r3, #1
   23fda:	60fb      	str	r3, [r7, #12]
   23fdc:	f7ff bb04 	b.w	235e8 <__ssvfscanf_r+0x35c>
   23fe0:	2d02      	cmp	r5, #2
   23fe2:	f240 836a 	bls.w	246ba <__ssvfscanf_r+0x142e>
   23fe6:	2d03      	cmp	r5, #3
   23fe8:	f43f ad4c 	beq.w	23a84 <__ssvfscanf_r+0x7f8>
   23fec:	3d04      	subs	r5, #4
   23fee:	ee18 8a10 	vmov	r8, s16
   23ff2:	b2ee      	uxtb	r6, r5
   23ff4:	43f5      	mvns	r5, r6
   23ff6:	444d      	add	r5, r9
   23ff8:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   23ffc:	465a      	mov	r2, fp
   23ffe:	4640      	mov	r0, r8
   24000:	f003 ff7c 	bl	27efc <_sungetc_r>
   24004:	454d      	cmp	r5, r9
   24006:	d1f7      	bne.n	23ff8 <__ssvfscanf_r+0xd6c>
   24008:	f10a 33ff 	add.w	r3, sl, #4294967295
   2400c:	eba3 0a06 	sub.w	sl, r3, r6
   24010:	e538      	b.n	23a84 <__ssvfscanf_r+0x7f8>
   24012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   24014:	f424 7460 	bic.w	r4, r4, #896	; 0x380
   24018:	b11b      	cbz	r3, 24022 <__ssvfscanf_r+0xd96>
   2401a:	3b01      	subs	r3, #1
   2401c:	f108 0801 	add.w	r8, r8, #1
   24020:	63bb      	str	r3, [r7, #56]	; 0x38
   24022:	f10a 0a01 	add.w	sl, sl, #1
   24026:	f7ff bb76 	b.w	23716 <__ssvfscanf_r+0x48a>
   2402a:	63f9      	str	r1, [r7, #60]	; 0x3c
   2402c:	f7ff b9fb 	b.w	23426 <__ssvfscanf_r+0x19a>
   24030:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   24034:	429c      	cmp	r4, r3
   24036:	f200 80dc 	bhi.w	241f2 <__ssvfscanf_r+0xf66>
   2403a:	3408      	adds	r4, #8
   2403c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2403e:	00a1      	lsls	r1, r4, #2
   24040:	6810      	ldr	r0, [r2, #0]
   24042:	f7fe f95f 	bl	22304 <realloc>
   24046:	2800      	cmp	r0, #0
   24048:	f000 80d3 	beq.w	241f2 <__ssvfscanf_r+0xf66>
   2404c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2404e:	6018      	str	r0, [r3, #0]
   24050:	809c      	strh	r4, [r3, #4]
   24052:	e6d8      	b.n	23e06 <__ssvfscanf_r+0xb7a>
   24054:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   24058:	429c      	cmp	r4, r3
   2405a:	f200 80ca 	bhi.w	241f2 <__ssvfscanf_r+0xf66>
   2405e:	3408      	adds	r4, #8
   24060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   24062:	00a1      	lsls	r1, r4, #2
   24064:	6810      	ldr	r0, [r2, #0]
   24066:	f7fe f94d 	bl	22304 <realloc>
   2406a:	2800      	cmp	r0, #0
   2406c:	f000 80c1 	beq.w	241f2 <__ssvfscanf_r+0xf66>
   24070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   24072:	6018      	str	r0, [r3, #0]
   24074:	809c      	strh	r4, [r3, #4]
   24076:	e401      	b.n	2387c <__ssvfscanf_r+0x5f0>
   24078:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   2407c:	429c      	cmp	r4, r3
   2407e:	f200 80b8 	bhi.w	241f2 <__ssvfscanf_r+0xf66>
   24082:	3408      	adds	r4, #8
   24084:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   24086:	00a1      	lsls	r1, r4, #2
   24088:	6810      	ldr	r0, [r2, #0]
   2408a:	f7fe f93b 	bl	22304 <realloc>
   2408e:	2800      	cmp	r0, #0
   24090:	f000 80af 	beq.w	241f2 <__ssvfscanf_r+0xf66>
   24094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   24096:	6018      	str	r0, [r3, #0]
   24098:	809c      	strh	r4, [r3, #4]
   2409a:	e72e      	b.n	23efa <__ssvfscanf_r+0xc6e>
   2409c:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   240a0:	429c      	cmp	r4, r3
   240a2:	f200 80a6 	bhi.w	241f2 <__ssvfscanf_r+0xf66>
   240a6:	3408      	adds	r4, #8
   240a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   240aa:	00a1      	lsls	r1, r4, #2
   240ac:	6810      	ldr	r0, [r2, #0]
   240ae:	f7fe f929 	bl	22304 <realloc>
   240b2:	2800      	cmp	r0, #0
   240b4:	f000 809d 	beq.w	241f2 <__ssvfscanf_r+0xf66>
   240b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   240ba:	6018      	str	r0, [r3, #0]
   240bc:	809c      	strh	r4, [r3, #4]
   240be:	f7ff bb86 	b.w	237ce <__ssvfscanf_r+0x542>
   240c2:	6abc      	ldr	r4, [r7, #40]	; 0x28
   240c4:	f854 3b04 	ldr.w	r3, [r4], #4
   240c8:	7018      	strb	r0, [r3, #0]
   240ca:	62bc      	str	r4, [r7, #40]	; 0x28
   240cc:	e65f      	b.n	23d8e <__ssvfscanf_r+0xb02>
   240ce:	6abe      	ldr	r6, [r7, #40]	; 0x28
   240d0:	ee10 2a10 	vmov	r2, s0
   240d4:	464b      	mov	r3, r9
   240d6:	ee10 0a10 	vmov	r0, s0
   240da:	4649      	mov	r1, r9
   240dc:	f7e9 f8b0 	bl	d240 <__aeabi_dcmpun>
   240e0:	f856 4b04 	ldr.w	r4, [r6], #4
   240e4:	2800      	cmp	r0, #0
   240e6:	f040 82e0 	bne.w	246aa <__ssvfscanf_r+0x141e>
   240ea:	4640      	mov	r0, r8
   240ec:	4649      	mov	r1, r9
   240ee:	f7e8 fb13 	bl	c718 <__aeabi_d2f>
   240f2:	62be      	str	r6, [r7, #40]	; 0x28
   240f4:	6020      	str	r0, [r4, #0]
   240f6:	e4fd      	b.n	23af4 <__ssvfscanf_r+0x868>
   240f8:	0002bfa1 	.word	0x0002bfa1
   240fc:	68bd      	ldr	r5, [r7, #8]
   240fe:	230a      	movs	r3, #10
   24100:	ee18 0a10 	vmov	r0, s16
   24104:	1c69      	adds	r1, r5, #1
   24106:	46a9      	mov	r9, r5
   24108:	f7ff f81a 	bl	23140 <_strtol_r>
   2410c:	693b      	ldr	r3, [r7, #16]
   2410e:	1ac2      	subs	r2, r0, r3
   24110:	f207 23ab 	addw	r3, r7, #683	; 0x2ab
   24114:	49cf      	ldr	r1, [pc, #828]	; (24454 <__ssvfscanf_r+0x11c8>)
   24116:	4599      	cmp	r9, r3
   24118:	bf28      	it	cs
   2411a:	f207 29aa 	addwcs	r9, r7, #682	; 0x2aa
   2411e:	4648      	mov	r0, r9
   24120:	f003 fcb2 	bl	27a88 <sprintf>
   24124:	e4d3      	b.n	23ace <__ssvfscanf_r+0x842>
   24126:	4645      	mov	r5, r8
   24128:	2d01      	cmp	r5, #1
   2412a:	bf38      	it	cc
   2412c:	2501      	movcc	r5, #1
   2412e:	f014 0301 	ands.w	r3, r4, #1
   24132:	f000 82e6 	beq.w	24702 <__ssvfscanf_r+0x1476>
   24136:	f014 0310 	ands.w	r3, r4, #16
   2413a:	61fb      	str	r3, [r7, #28]
   2413c:	f000 8334 	beq.w	247a8 <__ssvfscanf_r+0x151c>
   24140:	f04f 0900 	mov.w	r9, #0
   24144:	46c8      	mov	r8, r9
   24146:	464e      	mov	r6, r9
   24148:	f8c7 9038 	str.w	r9, [r7, #56]	; 0x38
   2414c:	2400      	movs	r4, #0
   2414e:	f002 fd71 	bl	26c34 <__locale_mb_cur_max>
   24152:	42a0      	cmp	r0, r4
   24154:	f43f a939 	beq.w	233ca <__ssvfscanf_r+0x13e>
   24158:	f8db 1000 	ldr.w	r1, [fp]
   2415c:	f507 7cac 	add.w	ip, r7, #344	; 0x158
   24160:	f8db 2004 	ldr.w	r2, [fp, #4]
   24164:	1c63      	adds	r3, r4, #1
   24166:	f811 0b01 	ldrb.w	r0, [r1], #1
   2416a:	3a01      	subs	r2, #1
   2416c:	f80c 0004 	strb.w	r0, [ip, r4]
   24170:	f107 0450 	add.w	r4, r7, #80	; 0x50
   24174:	e9cb 1200 	strd	r1, r2, [fp]
   24178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2417a:	2a03      	cmp	r2, #3
   2417c:	d102      	bne.n	24184 <__ssvfscanf_r+0xef8>
   2417e:	6822      	ldr	r2, [r4, #0]
   24180:	2a04      	cmp	r2, #4
   24182:	d006      	beq.n	24192 <__ssvfscanf_r+0xf06>
   24184:	2208      	movs	r2, #8
   24186:	2100      	movs	r1, #0
   24188:	4620      	mov	r0, r4
   2418a:	62fb      	str	r3, [r7, #44]	; 0x2c
   2418c:	f7fe f85e 	bl	2224c <memset>
   24190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24192:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   24196:	4631      	mov	r1, r6
   24198:	ee18 0a10 	vmov	r0, s16
   2419c:	9400      	str	r4, [sp, #0]
   2419e:	61bb      	str	r3, [r7, #24]
   241a0:	f002 fdea 	bl	26d78 <_mbrtowc_r>
   241a4:	1c42      	adds	r2, r0, #1
   241a6:	62f8      	str	r0, [r7, #44]	; 0x2c
   241a8:	f43f a90f 	beq.w	233ca <__ssvfscanf_r+0x13e>
   241ac:	69fa      	ldr	r2, [r7, #28]
   241ae:	69bb      	ldr	r3, [r7, #24]
   241b0:	4302      	orrs	r2, r0
   241b2:	f040 837d 	bne.w	248b0 <__ssvfscanf_r+0x1624>
   241b6:	449a      	add	sl, r3
   241b8:	6032      	str	r2, [r6, #0]
   241ba:	3d01      	subs	r5, #1
   241bc:	69fb      	ldr	r3, [r7, #28]
   241be:	2b00      	cmp	r3, #0
   241c0:	f040 83a8 	bne.w	24914 <__ssvfscanf_r+0x1688>
   241c4:	eba6 0408 	sub.w	r4, r6, r8
   241c8:	ebb9 0fa4 	cmp.w	r9, r4, asr #2
   241cc:	f200 83a1 	bhi.w	24912 <__ssvfscanf_r+0x1686>
   241d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   241d2:	2b00      	cmp	r3, #0
   241d4:	f000 839d 	beq.w	24912 <__ssvfscanf_r+0x1686>
   241d8:	4640      	mov	r0, r8
   241da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
   241de:	f7fe f891 	bl	22304 <realloc>
   241e2:	4680      	mov	r8, r0
   241e4:	2800      	cmp	r0, #0
   241e6:	f040 838f 	bne.w	24908 <__ssvfscanf_r+0x167c>
   241ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   241ec:	2b00      	cmp	r3, #0
   241ee:	f000 8166 	beq.w	244be <__ssvfscanf_r+0x1232>
   241f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   241f4:	88dd      	ldrh	r5, [r3, #6]
   241f6:	2d00      	cmp	r5, #0
   241f8:	f000 8136 	beq.w	24468 <__ssvfscanf_r+0x11dc>
   241fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   241fe:	f04f 0800 	mov.w	r8, #0
   24202:	681e      	ldr	r6, [r3, #0]
   24204:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   24208:	4634      	mov	r4, r6
   2420a:	6823      	ldr	r3, [r4, #0]
   2420c:	6818      	ldr	r0, [r3, #0]
   2420e:	f7fd fcdb 	bl	21bc8 <free>
   24212:	f854 3b04 	ldr.w	r3, [r4], #4
   24216:	42ac      	cmp	r4, r5
   24218:	f8c3 8000 	str.w	r8, [r3]
   2421c:	d1f5      	bne.n	2420a <__ssvfscanf_r+0xf7e>
   2421e:	f04f 33ff 	mov.w	r3, #4294967295
   24222:	633b      	str	r3, [r7, #48]	; 0x30
   24224:	2e00      	cmp	r6, #0
   24226:	f47f a8de 	bne.w	233e6 <__ssvfscanf_r+0x15a>
   2422a:	f7ff b8df 	b.w	233ec <__ssvfscanf_r+0x160>
   2422e:	2400      	movs	r4, #0
   24230:	f7ff bb81 	b.w	23936 <__ssvfscanf_r+0x6aa>
   24234:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
   24238:	f7ff bb4d 	b.w	238d6 <__ssvfscanf_r+0x64a>
   2423c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2423e:	681b      	ldr	r3, [r3, #0]
   24240:	2b04      	cmp	r3, #4
   24242:	f47f ab54 	bne.w	238ee <__ssvfscanf_r+0x662>
   24246:	f7ff bb55 	b.w	238f4 <__ssvfscanf_r+0x668>
   2424a:	4654      	mov	r4, sl
   2424c:	f8d7 a018 	ldr.w	sl, [r7, #24]
   24250:	e6ab      	b.n	23faa <__ssvfscanf_r+0xd1e>
   24252:	f42b 6bf0 	bic.w	fp, fp, #1920	; 0x780
   24256:	2401      	movs	r4, #1
   24258:	f7ff b9c3 	b.w	235e2 <__ssvfscanf_r+0x356>
   2425c:	2301      	movs	r3, #1
   2425e:	f42b 6bf0 	bic.w	fp, fp, #1920	; 0x780
   24262:	63bb      	str	r3, [r7, #56]	; 0x38
   24264:	f7ff b9bd 	b.w	235e2 <__ssvfscanf_r+0x356>
   24268:	1e6b      	subs	r3, r5, #1
   2426a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   2426e:	4632      	mov	r2, r6
   24270:	ee18 0a10 	vmov	r0, s16
   24274:	461d      	mov	r5, r3
   24276:	f003 fe41 	bl	27efc <_sungetc_r>
   2427a:	f7ff ba62 	b.w	23742 <__ssvfscanf_r+0x4b6>
   2427e:	f8c7 8010 	str.w	r8, [r7, #16]
   24282:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
   24286:	f002 fcd5 	bl	26c34 <__locale_mb_cur_max>
   2428a:	42a8      	cmp	r0, r5
   2428c:	f43f a89d 	beq.w	233ca <__ssvfscanf_r+0x13e>
   24290:	f8db 2000 	ldr.w	r2, [fp]
   24294:	f507 70ac 	add.w	r0, r7, #344	; 0x158
   24298:	f8db 3004 	ldr.w	r3, [fp, #4]
   2429c:	f1b8 0f03 	cmp.w	r8, #3
   242a0:	f812 1b01 	ldrb.w	r1, [r2], #1
   242a4:	f105 0601 	add.w	r6, r5, #1
   242a8:	f103 33ff 	add.w	r3, r3, #4294967295
   242ac:	f107 0450 	add.w	r4, r7, #80	; 0x50
   242b0:	5541      	strb	r1, [r0, r5]
   242b2:	e9cb 2300 	strd	r2, r3, [fp]
   242b6:	d102      	bne.n	242be <__ssvfscanf_r+0x1032>
   242b8:	6823      	ldr	r3, [r4, #0]
   242ba:	2b04      	cmp	r3, #4
   242bc:	d004      	beq.n	242c8 <__ssvfscanf_r+0x103c>
   242be:	2208      	movs	r2, #8
   242c0:	2100      	movs	r1, #0
   242c2:	4620      	mov	r0, r4
   242c4:	f7fd ffc2 	bl	2224c <memset>
   242c8:	4633      	mov	r3, r6
   242ca:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   242ce:	4649      	mov	r1, r9
   242d0:	ee18 0a10 	vmov	r0, s16
   242d4:	9400      	str	r4, [sp, #0]
   242d6:	f002 fd4f 	bl	26d78 <_mbrtowc_r>
   242da:	f1b0 3fff 	cmp.w	r0, #4294967295
   242de:	4680      	mov	r8, r0
   242e0:	f43f a873 	beq.w	233ca <__ssvfscanf_r+0x13e>
   242e4:	2800      	cmp	r0, #0
   242e6:	f040 80cf 	bne.w	24488 <__ssvfscanf_r+0x11fc>
   242ea:	f8c9 0000 	str.w	r0, [r9]
   242ee:	f002 fc91 	bl	26c14 <iswspace>
   242f2:	2800      	cmp	r0, #0
   242f4:	f040 817c 	bne.w	245f0 <__ssvfscanf_r+0x1364>
   242f8:	44b2      	add	sl, r6
   242fa:	693b      	ldr	r3, [r7, #16]
   242fc:	3b01      	subs	r3, #1
   242fe:	613b      	str	r3, [r7, #16]
   24300:	69fe      	ldr	r6, [r7, #28]
   24302:	2e00      	cmp	r6, #0
   24304:	f040 8140 	bne.w	24588 <__ssvfscanf_r+0x12fc>
   24308:	f109 0904 	add.w	r9, r9, #4
   2430c:	69b8      	ldr	r0, [r7, #24]
   2430e:	697b      	ldr	r3, [r7, #20]
   24310:	eba9 0400 	sub.w	r4, r9, r0
   24314:	461d      	mov	r5, r3
   24316:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   2431a:	f200 8135 	bhi.w	24588 <__ssvfscanf_r+0x12fc>
   2431e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   24320:	2a00      	cmp	r2, #0
   24322:	f000 8131 	beq.w	24588 <__ssvfscanf_r+0x12fc>
   24326:	00d9      	lsls	r1, r3, #3
   24328:	f7fd ffec 	bl	22304 <realloc>
   2432c:	61b8      	str	r0, [r7, #24]
   2432e:	2800      	cmp	r0, #0
   24330:	f43f af5b 	beq.w	241ea <__ssvfscanf_r+0xf5e>
   24334:	6bba      	ldr	r2, [r7, #56]	; 0x38
   24336:	006b      	lsls	r3, r5, #1
   24338:	eb00 0904 	add.w	r9, r0, r4
   2433c:	6010      	str	r0, [r2, #0]
   2433e:	617b      	str	r3, [r7, #20]
   24340:	f8db 3004 	ldr.w	r3, [fp, #4]
   24344:	2b00      	cmp	r3, #0
   24346:	f77f a833 	ble.w	233b0 <__ssvfscanf_r+0x124>
   2434a:	f8db 3000 	ldr.w	r3, [fp]
   2434e:	4a42      	ldr	r2, [pc, #264]	; (24458 <__ssvfscanf_r+0x11cc>)
   24350:	781b      	ldrb	r3, [r3, #0]
   24352:	5cd3      	ldrb	r3, [r2, r3]
   24354:	071b      	lsls	r3, r3, #28
   24356:	d42d      	bmi.n	243b4 <__ssvfscanf_r+0x1128>
   24358:	693b      	ldr	r3, [r7, #16]
   2435a:	b35b      	cbz	r3, 243b4 <__ssvfscanf_r+0x1128>
   2435c:	4635      	mov	r5, r6
   2435e:	f002 fc69 	bl	26c34 <__locale_mb_cur_max>
   24362:	42a8      	cmp	r0, r5
   24364:	d194      	bne.n	24290 <__ssvfscanf_r+0x1004>
   24366:	f7ff b830 	b.w	233ca <__ssvfscanf_r+0x13e>
   2436a:	e9d7 1305 	ldrd	r1, r3, [r7, #20]
   2436e:	428b      	cmp	r3, r1
   24370:	eba3 0201 	sub.w	r2, r3, r1
   24374:	f47f aecc 	bne.w	24110 <__ssvfscanf_r+0xe84>
   24378:	f7ff bba9 	b.w	23ace <__ssvfscanf_r+0x842>
   2437c:	465a      	mov	r2, fp
   2437e:	ee18 0a10 	vmov	r0, s16
   24382:	f003 fdbb 	bl	27efc <_sungetc_r>
   24386:	f1aa 0a02 	sub.w	sl, sl, #2
   2438a:	f819 1c02 	ldrb.w	r1, [r9, #-2]
   2438e:	f1a9 0902 	sub.w	r9, r9, #2
   24392:	f7ff bb87 	b.w	23aa4 <__ssvfscanf_r+0x818>
   24396:	1b31      	subs	r1, r6, r4
   24398:	448a      	add	sl, r1
   2439a:	3101      	adds	r1, #1
   2439c:	e579      	b.n	23e92 <__ssvfscanf_r+0xc06>
   2439e:	2101      	movs	r1, #1
   243a0:	e577      	b.n	23e92 <__ssvfscanf_r+0xc06>
   243a2:	2300      	movs	r3, #0
   243a4:	f107 0244 	add.w	r2, r7, #68	; 0x44
   243a8:	617b      	str	r3, [r7, #20]
   243aa:	4691      	mov	r9, r2
   243ac:	61bb      	str	r3, [r7, #24]
   243ae:	63bb      	str	r3, [r7, #56]	; 0x38
   243b0:	f7ff ba18 	b.w	237e4 <__ssvfscanf_r+0x558>
   243b4:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   243b8:	f7ff ba1d 	b.w	237f6 <__ssvfscanf_r+0x56a>
   243bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
   243c0:	f8db 2000 	ldr.w	r2, [fp]
   243c4:	4619      	mov	r1, r3
   243c6:	7813      	ldrb	r3, [r2, #0]
   243c8:	5ccb      	ldrb	r3, [r1, r3]
   243ca:	2b00      	cmp	r3, #0
   243cc:	f43f a806 	beq.w	233dc <__ssvfscanf_r+0x150>
   243d0:	f8db 3004 	ldr.w	r3, [fp, #4]
   243d4:	3201      	adds	r2, #1
   243d6:	f1b8 0f01 	cmp.w	r8, #1
   243da:	f103 33ff 	add.w	r3, r3, #4294967295
   243de:	e9cb 2300 	strd	r2, r3, [fp]
   243e2:	f43f acdc 	beq.w	23d9e <__ssvfscanf_r+0xb12>
   243e6:	461a      	mov	r2, r3
   243e8:	ee18 4a10 	vmov	r4, s16
   243ec:	460d      	mov	r5, r1
   243ee:	e012      	b.n	24416 <__ssvfscanf_r+0x118a>
   243f0:	f8db 3000 	ldr.w	r3, [fp]
   243f4:	781a      	ldrb	r2, [r3, #0]
   243f6:	3301      	adds	r3, #1
   243f8:	5caa      	ldrb	r2, [r5, r2]
   243fa:	2a00      	cmp	r2, #0
   243fc:	f43f accf 	beq.w	23d9e <__ssvfscanf_r+0xb12>
   24400:	f8db 2004 	ldr.w	r2, [fp, #4]
   24404:	3601      	adds	r6, #1
   24406:	f8cb 3000 	str.w	r3, [fp]
   2440a:	3a01      	subs	r2, #1
   2440c:	45b0      	cmp	r8, r6
   2440e:	f8cb 2004 	str.w	r2, [fp, #4]
   24412:	f43f acc4 	beq.w	23d9e <__ssvfscanf_r+0xb12>
   24416:	2a00      	cmp	r2, #0
   24418:	dcea      	bgt.n	243f0 <__ssvfscanf_r+0x1164>
   2441a:	4659      	mov	r1, fp
   2441c:	4620      	mov	r0, r4
   2441e:	f003 fdad 	bl	27f7c <__ssrefill_r>
   24422:	2800      	cmp	r0, #0
   24424:	d0e4      	beq.n	243f0 <__ssvfscanf_r+0x1164>
   24426:	44b2      	add	sl, r6
   24428:	f7fe bffd 	b.w	23426 <__ssvfscanf_r+0x19a>
   2442c:	2300      	movs	r3, #0
   2442e:	f107 0244 	add.w	r2, r7, #68	; 0x44
   24432:	613b      	str	r3, [r7, #16]
   24434:	4691      	mov	r9, r2
   24436:	e9c7 3302 	strd	r3, r3, [r7, #8]
   2443a:	f7ff ba2a 	b.w	23892 <__ssvfscanf_r+0x606>
   2443e:	f8d7 a01c 	ldr.w	sl, [r7, #28]
   24442:	62fe      	str	r6, [r7, #44]	; 0x2c
   24444:	f7ff bac4 	b.w	239d0 <__ssvfscanf_r+0x744>
   24448:	7882      	ldrb	r2, [r0, #2]
   2444a:	f044 0402 	orr.w	r4, r4, #2
   2444e:	3002      	adds	r0, #2
   24450:	f7fe bf51 	b.w	232f6 <__ssvfscanf_r+0x6a>
   24454:	0002c140 	.word	0x0002c140
   24458:	0002bfa1 	.word	0x0002bfa1
   2445c:	7882      	ldrb	r2, [r0, #2]
   2445e:	f044 0408 	orr.w	r4, r4, #8
   24462:	3002      	adds	r0, #2
   24464:	f7fe bf47 	b.w	232f6 <__ssvfscanf_r+0x6a>
   24468:	681e      	ldr	r6, [r3, #0]
   2446a:	f04f 33ff 	mov.w	r3, #4294967295
   2446e:	633b      	str	r3, [r7, #48]	; 0x30
   24470:	2e00      	cmp	r6, #0
   24472:	f47e afb8 	bne.w	233e6 <__ssvfscanf_r+0x15a>
   24476:	f7fe bfb9 	b.w	233ec <__ssvfscanf_r+0x160>
   2447a:	f856 5b04 	ldr.w	r5, [r6], #4
   2447e:	4699      	mov	r9, r3
   24480:	61fb      	str	r3, [r7, #28]
   24482:	63bb      	str	r3, [r7, #56]	; 0x38
   24484:	62be      	str	r6, [r7, #40]	; 0x28
   24486:	e4ca      	b.n	23e1e <__ssvfscanf_r+0xb92>
   24488:	f110 0f02 	cmn.w	r0, #2
   2448c:	f43f af58 	beq.w	24340 <__ssvfscanf_r+0x10b4>
   24490:	f8d9 0000 	ldr.w	r0, [r9]
   24494:	f002 fbbe 	bl	26c14 <iswspace>
   24498:	2800      	cmp	r0, #0
   2449a:	f040 80a9 	bne.w	245f0 <__ssvfscanf_r+0x1364>
   2449e:	f1b8 0f03 	cmp.w	r8, #3
   244a2:	44b2      	add	sl, r6
   244a4:	f47f af29 	bne.w	242fa <__ssvfscanf_r+0x106e>
   244a8:	6823      	ldr	r3, [r4, #0]
   244aa:	2b04      	cmp	r3, #4
   244ac:	f47f af25 	bne.w	242fa <__ssvfscanf_r+0x106e>
   244b0:	e726      	b.n	24300 <__ssvfscanf_r+0x1074>
   244b2:	b082      	sub	sp, #8
   244b4:	aa02      	add	r2, sp, #8
   244b6:	6013      	str	r3, [r2, #0]
   244b8:	9303      	str	r3, [sp, #12]
   244ba:	637a      	str	r2, [r7, #52]	; 0x34
   244bc:	e402      	b.n	23cc4 <__ssvfscanf_r+0xa38>
   244be:	f04f 33ff 	mov.w	r3, #4294967295
   244c2:	633b      	str	r3, [r7, #48]	; 0x30
   244c4:	f7fe bf92 	b.w	233ec <__ssvfscanf_r+0x160>
   244c8:	69fb      	ldr	r3, [r7, #28]
   244ca:	f856 9b04 	ldr.w	r9, [r6], #4
   244ce:	63bb      	str	r3, [r7, #56]	; 0x38
   244d0:	62be      	str	r6, [r7, #40]	; 0x28
   244d2:	e9c7 3305 	strd	r3, r3, [r7, #20]
   244d6:	f7ff b985 	b.w	237e4 <__ssvfscanf_r+0x558>
   244da:	f856 5b04 	ldr.w	r5, [r6], #4
   244de:	61fc      	str	r4, [r7, #28]
   244e0:	62be      	str	r6, [r7, #40]	; 0x28
   244e2:	e513      	b.n	23f0c <__ssvfscanf_r+0xc80>
   244e4:	697b      	ldr	r3, [r7, #20]
   244e6:	f856 9b04 	ldr.w	r9, [r6], #4
   244ea:	60bb      	str	r3, [r7, #8]
   244ec:	62be      	str	r6, [r7, #40]	; 0x28
   244ee:	e9c7 3303 	strd	r3, r3, [r7, #12]
   244f2:	f7ff b9ce 	b.w	23892 <__ssvfscanf_r+0x606>
   244f6:	0766      	lsls	r6, r4, #29
   244f8:	f140 8091 	bpl.w	2461e <__ssvfscanf_r+0x1392>
   244fc:	6abe      	ldr	r6, [r7, #40]	; 0x28
   244fe:	63f9      	str	r1, [r7, #60]	; 0x3c
   24500:	f856 3b04 	ldr.w	r3, [r6], #4
   24504:	f8a3 a000 	strh.w	sl, [r3]
   24508:	62be      	str	r6, [r7, #40]	; 0x28
   2450a:	f7fe bf8c 	b.w	23426 <__ssvfscanf_r+0x19a>
   2450e:	4659      	mov	r1, fp
   24510:	ee18 0a10 	vmov	r0, s16
   24514:	f003 fd32 	bl	27f7c <__ssrefill_r>
   24518:	2800      	cmp	r0, #0
   2451a:	f43f acaf 	beq.w	23e7c <__ssvfscanf_r+0xbf0>
   2451e:	e4b4      	b.n	23e8a <__ssvfscanf_r+0xbfe>
   24520:	f8db 2000 	ldr.w	r2, [fp]
   24524:	49c0      	ldr	r1, [pc, #768]	; (24828 <__ssvfscanf_r+0x159c>)
   24526:	7813      	ldrb	r3, [r2, #0]
   24528:	5ccb      	ldrb	r3, [r1, r3]
   2452a:	071c      	lsls	r4, r3, #28
   2452c:	d429      	bmi.n	24582 <__ssvfscanf_r+0x12f6>
   2452e:	f8db 3004 	ldr.w	r3, [fp, #4]
   24532:	3201      	adds	r2, #1
   24534:	f1b8 0f01 	cmp.w	r8, #1
   24538:	f103 33ff 	add.w	r3, r3, #4294967295
   2453c:	e9cb 2300 	strd	r2, r3, [fp]
   24540:	f000 80cc 	beq.w	246dc <__ssvfscanf_r+0x1450>
   24544:	2501      	movs	r5, #1
   24546:	461a      	mov	r2, r3
   24548:	ee18 4a10 	vmov	r4, s16
   2454c:	e011      	b.n	24572 <__ssvfscanf_r+0x12e6>
   2454e:	f8db 3000 	ldr.w	r3, [fp]
   24552:	49b5      	ldr	r1, [pc, #724]	; (24828 <__ssvfscanf_r+0x159c>)
   24554:	781a      	ldrb	r2, [r3, #0]
   24556:	3301      	adds	r3, #1
   24558:	5c8a      	ldrb	r2, [r1, r2]
   2455a:	0710      	lsls	r0, r2, #28
   2455c:	d411      	bmi.n	24582 <__ssvfscanf_r+0x12f6>
   2455e:	f8db 2004 	ldr.w	r2, [fp, #4]
   24562:	3501      	adds	r5, #1
   24564:	f8cb 3000 	str.w	r3, [fp]
   24568:	3a01      	subs	r2, #1
   2456a:	45a8      	cmp	r8, r5
   2456c:	f8cb 2004 	str.w	r2, [fp, #4]
   24570:	d007      	beq.n	24582 <__ssvfscanf_r+0x12f6>
   24572:	2a00      	cmp	r2, #0
   24574:	dceb      	bgt.n	2454e <__ssvfscanf_r+0x12c2>
   24576:	4659      	mov	r1, fp
   24578:	4620      	mov	r0, r4
   2457a:	f003 fcff 	bl	27f7c <__ssrefill_r>
   2457e:	2800      	cmp	r0, #0
   24580:	d0e5      	beq.n	2454e <__ssvfscanf_r+0x12c2>
   24582:	44aa      	add	sl, r5
   24584:	f7fe bf4f 	b.w	23426 <__ssvfscanf_r+0x19a>
   24588:	2600      	movs	r6, #0
   2458a:	e6d9      	b.n	24340 <__ssvfscanf_r+0x10b4>
   2458c:	f014 0201 	ands.w	r2, r4, #1
   24590:	f47f abf8 	bne.w	23d84 <__ssvfscanf_r+0xaf8>
   24594:	07a3      	lsls	r3, r4, #30
   24596:	d571      	bpl.n	2467c <__ssvfscanf_r+0x13f0>
   24598:	4ba4      	ldr	r3, [pc, #656]	; (2482c <__ssvfscanf_r+0x15a0>)
   2459a:	ee18 0a10 	vmov	r0, s16
   2459e:	6a39      	ldr	r1, [r7, #32]
   245a0:	4299      	cmp	r1, r3
   245a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   245a4:	69f9      	ldr	r1, [r7, #28]
   245a6:	f000 809d 	beq.w	246e4 <__ssvfscanf_r+0x1458>
   245aa:	f003 fb59 	bl	27c60 <_strtoll_r>
   245ae:	6abc      	ldr	r4, [r7, #40]	; 0x28
   245b0:	f854 3b04 	ldr.w	r3, [r4], #4
   245b4:	6018      	str	r0, [r3, #0]
   245b6:	62bc      	str	r4, [r7, #40]	; 0x28
   245b8:	6059      	str	r1, [r3, #4]
   245ba:	f7ff bbe8 	b.w	23d8e <__ssvfscanf_r+0xb02>
   245be:	4645      	mov	r5, r8
   245c0:	f8d7 a01c 	ldr.w	sl, [r7, #28]
   245c4:	62fe      	str	r6, [r7, #44]	; 0x2c
   245c6:	2d00      	cmp	r5, #0
   245c8:	f43f aa02 	beq.w	239d0 <__ssvfscanf_r+0x744>
   245cc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   245d0:	ee18 6a10 	vmov	r6, s16
   245d4:	441c      	add	r4, r3
   245d6:	7821      	ldrb	r1, [r4, #0]
   245d8:	465a      	mov	r2, fp
   245da:	4630      	mov	r0, r6
   245dc:	f003 fc8e 	bl	27efc <_sungetc_r>
   245e0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   245e4:	429c      	cmp	r4, r3
   245e6:	f104 34ff 	add.w	r4, r4, #4294967295
   245ea:	d1f4      	bne.n	245d6 <__ssvfscanf_r+0x134a>
   245ec:	f7ff b9f0 	b.w	239d0 <__ssvfscanf_r+0x744>
   245f0:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   245f4:	2e00      	cmp	r6, #0
   245f6:	f43f a8fe 	beq.w	237f6 <__ssvfscanf_r+0x56a>
   245fa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   245fe:	ee18 6a10 	vmov	r6, s16
   24602:	441d      	add	r5, r3
   24604:	7829      	ldrb	r1, [r5, #0]
   24606:	465a      	mov	r2, fp
   24608:	4630      	mov	r0, r6
   2460a:	f003 fc77 	bl	27efc <_sungetc_r>
   2460e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   24612:	42ab      	cmp	r3, r5
   24614:	f105 35ff 	add.w	r5, r5, #4294967295
   24618:	d1f4      	bne.n	24604 <__ssvfscanf_r+0x1378>
   2461a:	f7ff b8ec 	b.w	237f6 <__ssvfscanf_r+0x56a>
   2461e:	07e5      	lsls	r5, r4, #31
   24620:	d40c      	bmi.n	2463c <__ssvfscanf_r+0x13b0>
   24622:	07a0      	lsls	r0, r4, #30
   24624:	d50a      	bpl.n	2463c <__ssvfscanf_r+0x13b0>
   24626:	6abe      	ldr	r6, [r7, #40]	; 0x28
   24628:	4652      	mov	r2, sl
   2462a:	63f9      	str	r1, [r7, #60]	; 0x3c
   2462c:	17d3      	asrs	r3, r2, #31
   2462e:	f856 1b04 	ldr.w	r1, [r6], #4
   24632:	62be      	str	r6, [r7, #40]	; 0x28
   24634:	e9c1 2300 	strd	r2, r3, [r1]
   24638:	f7fe bef5 	b.w	23426 <__ssvfscanf_r+0x19a>
   2463c:	6abe      	ldr	r6, [r7, #40]	; 0x28
   2463e:	63f9      	str	r1, [r7, #60]	; 0x3c
   24640:	f856 3b04 	ldr.w	r3, [r6], #4
   24644:	f8c3 a000 	str.w	sl, [r3]
   24648:	62be      	str	r6, [r7, #40]	; 0x28
   2464a:	f7fe beec 	b.w	23426 <__ssvfscanf_r+0x19a>
   2464e:	617e      	str	r6, [r7, #20]
   24650:	4626      	mov	r6, r4
   24652:	465c      	mov	r4, fp
   24654:	46c3      	mov	fp, r8
   24656:	4635      	mov	r5, r6
   24658:	f7ff ba0b 	b.w	23a72 <__ssvfscanf_r+0x7e6>
   2465c:	69fc      	ldr	r4, [r7, #28]
   2465e:	ee18 aa10 	vmov	sl, s16
   24662:	45a1      	cmp	r9, r4
   24664:	f67e aeba 	bls.w	233dc <__ssvfscanf_r+0x150>
   24668:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   2466c:	465a      	mov	r2, fp
   2466e:	4650      	mov	r0, sl
   24670:	f003 fc44 	bl	27efc <_sungetc_r>
   24674:	45a1      	cmp	r9, r4
   24676:	d1f7      	bne.n	24668 <__ssvfscanf_r+0x13dc>
   24678:	f7fe beb0 	b.w	233dc <__ssvfscanf_r+0x150>
   2467c:	6abc      	ldr	r4, [r7, #40]	; 0x28
   2467e:	f854 3b04 	ldr.w	r3, [r4], #4
   24682:	62bc      	str	r4, [r7, #40]	; 0x28
   24684:	6018      	str	r0, [r3, #0]
   24686:	f7ff bb82 	b.w	23d8e <__ssvfscanf_r+0xb02>
   2468a:	69fc      	ldr	r4, [r7, #28]
   2468c:	ee18 aa10 	vmov	sl, s16
   24690:	45a1      	cmp	r9, r4
   24692:	f67e aea3 	bls.w	233dc <__ssvfscanf_r+0x150>
   24696:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   2469a:	465a      	mov	r2, fp
   2469c:	4650      	mov	r0, sl
   2469e:	f003 fc2d 	bl	27efc <_sungetc_r>
   246a2:	45a1      	cmp	r9, r4
   246a4:	d1f7      	bne.n	24696 <__ssvfscanf_r+0x140a>
   246a6:	f7fe be99 	b.w	233dc <__ssvfscanf_r+0x150>
   246aa:	4861      	ldr	r0, [pc, #388]	; (24830 <__ssvfscanf_r+0x15a4>)
   246ac:	62be      	str	r6, [r7, #40]	; 0x28
   246ae:	f003 f999 	bl	279e4 <nanf>
   246b2:	ed84 0a00 	vstr	s0, [r4]
   246b6:	f7ff ba1d 	b.w	23af4 <__ssvfscanf_r+0x868>
   246ba:	69fb      	ldr	r3, [r7, #28]
   246bc:	ee18 aa10 	vmov	sl, s16
   246c0:	4599      	cmp	r9, r3
   246c2:	f67e ae8b 	bls.w	233dc <__ssvfscanf_r+0x150>
   246c6:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   246ca:	465a      	mov	r2, fp
   246cc:	4650      	mov	r0, sl
   246ce:	f003 fc15 	bl	27efc <_sungetc_r>
   246d2:	69fb      	ldr	r3, [r7, #28]
   246d4:	4599      	cmp	r9, r3
   246d6:	d1f6      	bne.n	246c6 <__ssvfscanf_r+0x143a>
   246d8:	f7fe be80 	b.w	233dc <__ssvfscanf_r+0x150>
   246dc:	4645      	mov	r5, r8
   246de:	44aa      	add	sl, r5
   246e0:	f7fe bea1 	b.w	23426 <__ssvfscanf_r+0x19a>
   246e4:	f003 fb84 	bl	27df0 <_strtoull_r>
   246e8:	e761      	b.n	245ae <__ssvfscanf_r+0x1322>
   246ea:	4635      	mov	r5, r6
   246ec:	f7ff b9c1 	b.w	23a72 <__ssvfscanf_r+0x7e6>
   246f0:	f8d9 3000 	ldr.w	r3, [r9]
   246f4:	461d      	mov	r5, r3
   246f6:	3301      	adds	r3, #1
   246f8:	f47f a8d7 	bne.w	238aa <__ssvfscanf_r+0x61e>
   246fc:	462a      	mov	r2, r5
   246fe:	f7ff b8ea 	b.w	238d6 <__ssvfscanf_r+0x64a>
   24702:	06e1      	lsls	r1, r4, #27
   24704:	f100 8096 	bmi.w	24834 <__ssvfscanf_r+0x15a8>
   24708:	f014 0f80 	tst.w	r4, #128	; 0x80
   2470c:	6abc      	ldr	r4, [r7, #40]	; 0x28
   2470e:	f000 80aa 	beq.w	24866 <__ssvfscanf_r+0x15da>
   24712:	f854 6b04 	ldr.w	r6, [r4], #4
   24716:	2e00      	cmp	r6, #0
   24718:	f43e ae60 	beq.w	233dc <__ssvfscanf_r+0x150>
   2471c:	4628      	mov	r0, r5
   2471e:	f7fd fa4b 	bl	21bb8 <malloc>
   24722:	4681      	mov	r9, r0
   24724:	2800      	cmp	r0, #0
   24726:	f43f ad60 	beq.w	241ea <__ssvfscanf_r+0xf5e>
   2472a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2472c:	6030      	str	r0, [r6, #0]
   2472e:	f8b3 8006 	ldrh.w	r8, [r3, #6]
   24732:	889a      	ldrh	r2, [r3, #4]
   24734:	4590      	cmp	r8, r2
   24736:	f0c0 80af 	bcc.w	24898 <__ssvfscanf_r+0x160c>
   2473a:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   2473e:	429a      	cmp	r2, r3
   24740:	f63f ad57 	bhi.w	241f2 <__ssvfscanf_r+0xf66>
   24744:	f102 0308 	add.w	r3, r2, #8
   24748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2474a:	0099      	lsls	r1, r3, #2
   2474c:	6810      	ldr	r0, [r2, #0]
   2474e:	63bb      	str	r3, [r7, #56]	; 0x38
   24750:	f7fd fdd8 	bl	22304 <realloc>
   24754:	2800      	cmp	r0, #0
   24756:	f43f ad4c 	beq.w	241f2 <__ssvfscanf_r+0xf66>
   2475a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2475c:	461a      	mov	r2, r3
   2475e:	6018      	str	r0, [r3, #0]
   24760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   24762:	8093      	strh	r3, [r2, #4]
   24764:	f840 6028 	str.w	r6, [r0, r8, lsl #2]
   24768:	f108 0201 	add.w	r2, r8, #1
   2476c:	6b78      	ldr	r0, [r7, #52]	; 0x34
   2476e:	4649      	mov	r1, r9
   24770:	462b      	mov	r3, r5
   24772:	80c2      	strh	r2, [r0, #6]
   24774:	2201      	movs	r2, #1
   24776:	ee18 0a10 	vmov	r0, s16
   2477a:	f8cd b000 	str.w	fp, [sp]
   2477e:	f003 fc1b 	bl	27fb8 <_sfread_r>
   24782:	4680      	mov	r8, r0
   24784:	2800      	cmp	r0, #0
   24786:	f000 8089 	beq.w	2489c <__ssvfscanf_r+0x1610>
   2478a:	4285      	cmp	r5, r0
   2478c:	d905      	bls.n	2479a <__ssvfscanf_r+0x150e>
   2478e:	4601      	mov	r1, r0
   24790:	6830      	ldr	r0, [r6, #0]
   24792:	f7fd fdb7 	bl	22304 <realloc>
   24796:	b100      	cbz	r0, 2479a <__ssvfscanf_r+0x150e>
   24798:	6030      	str	r0, [r6, #0]
   2479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2479c:	44c2      	add	sl, r8
   2479e:	62bc      	str	r4, [r7, #40]	; 0x28
   247a0:	3301      	adds	r3, #1
   247a2:	633b      	str	r3, [r7, #48]	; 0x30
   247a4:	f7fe be3f 	b.w	23426 <__ssvfscanf_r+0x19a>
   247a8:	0621      	lsls	r1, r4, #24
   247aa:	d534      	bpl.n	24816 <__ssvfscanf_r+0x158a>
   247ac:	f8d7 8028 	ldr.w	r8, [r7, #40]	; 0x28
   247b0:	f858 3b04 	ldr.w	r3, [r8], #4
   247b4:	63bb      	str	r3, [r7, #56]	; 0x38
   247b6:	2b00      	cmp	r3, #0
   247b8:	f43e ae10 	beq.w	233dc <__ssvfscanf_r+0x150>
   247bc:	2080      	movs	r0, #128	; 0x80
   247be:	f7fd f9fb 	bl	21bb8 <malloc>
   247c2:	4606      	mov	r6, r0
   247c4:	2800      	cmp	r0, #0
   247c6:	f43f ad10 	beq.w	241ea <__ssvfscanf_r+0xf5e>
   247ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   247cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
   247ce:	f8b3 9006 	ldrh.w	r9, [r3, #6]
   247d2:	889c      	ldrh	r4, [r3, #4]
   247d4:	6010      	str	r0, [r2, #0]
   247d6:	45a1      	cmp	r9, r4
   247d8:	d35c      	bcc.n	24894 <__ssvfscanf_r+0x1608>
   247da:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   247de:	429c      	cmp	r4, r3
   247e0:	f63f ad07 	bhi.w	241f2 <__ssvfscanf_r+0xf66>
   247e4:	3408      	adds	r4, #8
   247e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   247e8:	00a1      	lsls	r1, r4, #2
   247ea:	6818      	ldr	r0, [r3, #0]
   247ec:	f7fd fd8a 	bl	22304 <realloc>
   247f0:	2800      	cmp	r0, #0
   247f2:	f43f acfe 	beq.w	241f2 <__ssvfscanf_r+0xf66>
   247f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   247f8:	6018      	str	r0, [r3, #0]
   247fa:	809c      	strh	r4, [r3, #4]
   247fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
   247fe:	f109 0301 	add.w	r3, r9, #1
   24802:	f8c7 8028 	str.w	r8, [r7, #40]	; 0x28
   24806:	46b0      	mov	r8, r6
   24808:	f840 2029 	str.w	r2, [r0, r9, lsl #2]
   2480c:	f04f 0920 	mov.w	r9, #32
   24810:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   24812:	80d3      	strh	r3, [r2, #6]
   24814:	e49a      	b.n	2414c <__ssvfscanf_r+0xec0>
   24816:	6abc      	ldr	r4, [r7, #40]	; 0x28
   24818:	69fb      	ldr	r3, [r7, #28]
   2481a:	f854 6b04 	ldr.w	r6, [r4], #4
   2481e:	4699      	mov	r9, r3
   24820:	4698      	mov	r8, r3
   24822:	63bb      	str	r3, [r7, #56]	; 0x38
   24824:	62bc      	str	r4, [r7, #40]	; 0x28
   24826:	e491      	b.n	2414c <__ssvfscanf_r+0xec0>
   24828:	0002bfa1 	.word	0x0002bfa1
   2482c:	00023271 	.word	0x00023271
   24830:	0002bf6c 	.word	0x0002bf6c
   24834:	461c      	mov	r4, r3
   24836:	f8db 2004 	ldr.w	r2, [fp, #4]
   2483a:	4659      	mov	r1, fp
   2483c:	ee18 0a10 	vmov	r0, s16
   24840:	f8db 3000 	ldr.w	r3, [fp]
   24844:	4295      	cmp	r5, r2
   24846:	dd1d      	ble.n	24884 <__ssvfscanf_r+0x15f8>
   24848:	4413      	add	r3, r2
   2484a:	4414      	add	r4, r2
   2484c:	1aad      	subs	r5, r5, r2
   2484e:	f8cb 3000 	str.w	r3, [fp]
   24852:	f003 fb93 	bl	27f7c <__ssrefill_r>
   24856:	2800      	cmp	r0, #0
   24858:	d0ed      	beq.n	24836 <__ssvfscanf_r+0x15aa>
   2485a:	2c00      	cmp	r4, #0
   2485c:	f43e adb5 	beq.w	233ca <__ssvfscanf_r+0x13e>
   24860:	44a2      	add	sl, r4
   24862:	f7fe bde0 	b.w	23426 <__ssvfscanf_r+0x19a>
   24866:	f854 1b04 	ldr.w	r1, [r4], #4
   2486a:	462b      	mov	r3, r5
   2486c:	2201      	movs	r2, #1
   2486e:	ee18 0a10 	vmov	r0, s16
   24872:	f8cd b000 	str.w	fp, [sp]
   24876:	f003 fb9f 	bl	27fb8 <_sfread_r>
   2487a:	4680      	mov	r8, r0
   2487c:	2800      	cmp	r0, #0
   2487e:	d18c      	bne.n	2479a <__ssvfscanf_r+0x150e>
   24880:	f7fe bda3 	b.w	233ca <__ssvfscanf_r+0x13e>
   24884:	1b52      	subs	r2, r2, r5
   24886:	442c      	add	r4, r5
   24888:	442b      	add	r3, r5
   2488a:	44a2      	add	sl, r4
   2488c:	e9cb 3200 	strd	r3, r2, [fp]
   24890:	f7fe bdc9 	b.w	23426 <__ssvfscanf_r+0x19a>
   24894:	6818      	ldr	r0, [r3, #0]
   24896:	e7b1      	b.n	247fc <__ssvfscanf_r+0x1570>
   24898:	6818      	ldr	r0, [r3, #0]
   2489a:	e763      	b.n	24764 <__ssvfscanf_r+0x14d8>
   2489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2489e:	2b00      	cmp	r3, #0
   248a0:	f43f aca7 	beq.w	241f2 <__ssvfscanf_r+0xf66>
   248a4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   248a8:	065b      	lsls	r3, r3, #25
   248aa:	f57e ad99 	bpl.w	233e0 <__ssvfscanf_r+0x154>
   248ae:	e49c      	b.n	241ea <__ssvfscanf_r+0xf5e>
   248b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   248b2:	1c90      	adds	r0, r2, #2
   248b4:	d008      	beq.n	248c8 <__ssvfscanf_r+0x163c>
   248b6:	2a03      	cmp	r2, #3
   248b8:	449a      	add	sl, r3
   248ba:	f47f ac7e 	bne.w	241ba <__ssvfscanf_r+0xf2e>
   248be:	6823      	ldr	r3, [r4, #0]
   248c0:	2b04      	cmp	r3, #4
   248c2:	f47f ac7a 	bne.w	241ba <__ssvfscanf_r+0xf2e>
   248c6:	e479      	b.n	241bc <__ssvfscanf_r+0xf30>
   248c8:	f8db 2004 	ldr.w	r2, [fp, #4]
   248cc:	461c      	mov	r4, r3
   248ce:	2a00      	cmp	r2, #0
   248d0:	f73f ac3d 	bgt.w	2414e <__ssvfscanf_r+0xec2>
   248d4:	4659      	mov	r1, fp
   248d6:	ee18 0a10 	vmov	r0, s16
   248da:	f003 fb4f 	bl	27f7c <__ssrefill_r>
   248de:	b978      	cbnz	r0, 24900 <__ssvfscanf_r+0x1674>
   248e0:	2d00      	cmp	r5, #0
   248e2:	f47f ac34 	bne.w	2414e <__ssvfscanf_r+0xec2>
   248e6:	eba6 0108 	sub.w	r1, r6, r8
   248ea:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
   248ee:	d901      	bls.n	248f4 <__ssvfscanf_r+0x1668>
   248f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   248f2:	b9c3      	cbnz	r3, 24926 <__ssvfscanf_r+0x169a>
   248f4:	69fb      	ldr	r3, [r7, #28]
   248f6:	2b00      	cmp	r3, #0
   248f8:	f47e ad95 	bne.w	23426 <__ssvfscanf_r+0x19a>
   248fc:	f7ff b8fa 	b.w	23af4 <__ssvfscanf_r+0x868>
   24900:	2c00      	cmp	r4, #0
   24902:	d0f0      	beq.n	248e6 <__ssvfscanf_r+0x165a>
   24904:	f7fe bd61 	b.w	233ca <__ssvfscanf_r+0x13e>
   24908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2490a:	1906      	adds	r6, r0, r4
   2490c:	ea4f 0949 	mov.w	r9, r9, lsl #1
   24910:	6018      	str	r0, [r3, #0]
   24912:	3604      	adds	r6, #4
   24914:	f8db 3004 	ldr.w	r3, [fp, #4]
   24918:	2400      	movs	r4, #0
   2491a:	2b00      	cmp	r3, #0
   2491c:	ddda      	ble.n	248d4 <__ssvfscanf_r+0x1648>
   2491e:	2d00      	cmp	r5, #0
   24920:	f47f ac15 	bne.w	2414e <__ssvfscanf_r+0xec2>
   24924:	e7df      	b.n	248e6 <__ssvfscanf_r+0x165a>
   24926:	6bbc      	ldr	r4, [r7, #56]	; 0x38
   24928:	6820      	ldr	r0, [r4, #0]
   2492a:	f7fd fceb 	bl	22304 <realloc>
   2492e:	2800      	cmp	r0, #0
   24930:	d0e0      	beq.n	248f4 <__ssvfscanf_r+0x1668>
   24932:	6020      	str	r0, [r4, #0]
   24934:	e7de      	b.n	248f4 <__ssvfscanf_r+0x1668>
   24936:	bf00      	nop

00024938 <__sprint_r.part.0>:
   24938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2493c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   2493e:	4690      	mov	r8, r2
   24940:	049c      	lsls	r4, r3, #18
   24942:	d52c      	bpl.n	2499e <__sprint_r.part.0+0x66>
   24944:	6893      	ldr	r3, [r2, #8]
   24946:	6812      	ldr	r2, [r2, #0]
   24948:	b33b      	cbz	r3, 2499a <__sprint_r.part.0+0x62>
   2494a:	468b      	mov	fp, r1
   2494c:	4606      	mov	r6, r0
   2494e:	f102 0908 	add.w	r9, r2, #8
   24952:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   24956:	ea5f 079a 	movs.w	r7, sl, lsr #2
   2495a:	d014      	beq.n	24986 <__sprint_r.part.0+0x4e>
   2495c:	3d04      	subs	r5, #4
   2495e:	2400      	movs	r4, #0
   24960:	e001      	b.n	24966 <__sprint_r.part.0+0x2e>
   24962:	42a7      	cmp	r7, r4
   24964:	d00d      	beq.n	24982 <__sprint_r.part.0+0x4a>
   24966:	465a      	mov	r2, fp
   24968:	f855 1f04 	ldr.w	r1, [r5, #4]!
   2496c:	4630      	mov	r0, r6
   2496e:	3401      	adds	r4, #1
   24970:	f001 fa30 	bl	25dd4 <_fputwc_r>
   24974:	1c43      	adds	r3, r0, #1
   24976:	d1f4      	bne.n	24962 <__sprint_r.part.0+0x2a>
   24978:	2300      	movs	r3, #0
   2497a:	e9c8 3301 	strd	r3, r3, [r8, #4]
   2497e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24982:	f8d8 3008 	ldr.w	r3, [r8, #8]
   24986:	f02a 0a03 	bic.w	sl, sl, #3
   2498a:	f109 0908 	add.w	r9, r9, #8
   2498e:	eba3 030a 	sub.w	r3, r3, sl
   24992:	f8c8 3008 	str.w	r3, [r8, #8]
   24996:	2b00      	cmp	r3, #0
   24998:	d1db      	bne.n	24952 <__sprint_r.part.0+0x1a>
   2499a:	2000      	movs	r0, #0
   2499c:	e7ec      	b.n	24978 <__sprint_r.part.0+0x40>
   2499e:	f001 fba3 	bl	260e8 <__sfvwrite_r>
   249a2:	2300      	movs	r3, #0
   249a4:	e9c8 3301 	strd	r3, r3, [r8, #4]
   249a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000249ac <_vfiprintf_r>:
   249ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   249b0:	ed2d 8b02 	vpush	{d8}
   249b4:	b0bd      	sub	sp, #244	; 0xf4
   249b6:	461c      	mov	r4, r3
   249b8:	468a      	mov	sl, r1
   249ba:	4691      	mov	r9, r2
   249bc:	ee08 0a10 	vmov	s16, r0
   249c0:	9306      	str	r3, [sp, #24]
   249c2:	b118      	cbz	r0, 249cc <_vfiprintf_r+0x20>
   249c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   249c6:	2b00      	cmp	r3, #0
   249c8:	f000 8279 	beq.w	24ebe <_vfiprintf_r+0x512>
   249cc:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   249d0:	f9ba 100c 	ldrsh.w	r1, [sl, #12]
   249d4:	07db      	lsls	r3, r3, #31
   249d6:	b28a      	uxth	r2, r1
   249d8:	d402      	bmi.n	249e0 <_vfiprintf_r+0x34>
   249da:	058f      	lsls	r7, r1, #22
   249dc:	f140 8508 	bpl.w	253f0 <_vfiprintf_r+0xa44>
   249e0:	0496      	lsls	r6, r2, #18
   249e2:	d40a      	bmi.n	249fa <_vfiprintf_r+0x4e>
   249e4:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   249e8:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   249ec:	b28a      	uxth	r2, r1
   249ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   249f2:	f8aa 100c 	strh.w	r1, [sl, #12]
   249f6:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
   249fa:	0715      	lsls	r5, r2, #28
   249fc:	f140 80f3 	bpl.w	24be6 <_vfiprintf_r+0x23a>
   24a00:	f8da 3010 	ldr.w	r3, [sl, #16]
   24a04:	2b00      	cmp	r3, #0
   24a06:	f000 80ee 	beq.w	24be6 <_vfiprintf_r+0x23a>
   24a0a:	f002 031a 	and.w	r3, r2, #26
   24a0e:	2b0a      	cmp	r3, #10
   24a10:	f000 80f8 	beq.w	24c04 <_vfiprintf_r+0x258>
   24a14:	2300      	movs	r3, #0
   24a16:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   24a1a:	ee18 ba10 	vmov	fp, s16
   24a1e:	9309      	str	r3, [sp, #36]	; 0x24
   24a20:	9312      	str	r3, [sp, #72]	; 0x48
   24a22:	930a      	str	r3, [sp, #40]	; 0x28
   24a24:	9305      	str	r3, [sp, #20]
   24a26:	9311      	str	r3, [sp, #68]	; 0x44
   24a28:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   24a2c:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
   24a30:	f899 3000 	ldrb.w	r3, [r9]
   24a34:	464c      	mov	r4, r9
   24a36:	2b25      	cmp	r3, #37	; 0x25
   24a38:	d01c      	beq.n	24a74 <_vfiprintf_r+0xc8>
   24a3a:	b1db      	cbz	r3, 24a74 <_vfiprintf_r+0xc8>
   24a3c:	4625      	mov	r5, r4
   24a3e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   24a42:	b10b      	cbz	r3, 24a48 <_vfiprintf_r+0x9c>
   24a44:	2b25      	cmp	r3, #37	; 0x25
   24a46:	d1f9      	bne.n	24a3c <_vfiprintf_r+0x90>
   24a48:	ebb4 0609 	subs.w	r6, r4, r9
   24a4c:	d012      	beq.n	24a74 <_vfiprintf_r+0xc8>
   24a4e:	f8c8 9000 	str.w	r9, [r8]
   24a52:	f8c8 6004 	str.w	r6, [r8, #4]
   24a56:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
   24a5a:	3301      	adds	r3, #1
   24a5c:	4432      	add	r2, r6
   24a5e:	2b07      	cmp	r3, #7
   24a60:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   24a64:	f300 812b 	bgt.w	24cbe <_vfiprintf_r+0x312>
   24a68:	f108 0808 	add.w	r8, r8, #8
   24a6c:	9b05      	ldr	r3, [sp, #20]
   24a6e:	4433      	add	r3, r6
   24a70:	9305      	str	r3, [sp, #20]
   24a72:	786b      	ldrb	r3, [r5, #1]
   24a74:	2b00      	cmp	r3, #0
   24a76:	f000 812e 	beq.w	24cd6 <_vfiprintf_r+0x32a>
   24a7a:	f04f 0300 	mov.w	r3, #0
   24a7e:	2600      	movs	r6, #0
   24a80:	f04f 32ff 	mov.w	r2, #4294967295
   24a84:	f104 0901 	add.w	r9, r4, #1
   24a88:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   24a8c:	252b      	movs	r5, #43	; 0x2b
   24a8e:	7863      	ldrb	r3, [r4, #1]
   24a90:	9604      	str	r6, [sp, #16]
   24a92:	9202      	str	r2, [sp, #8]
   24a94:	f109 0901 	add.w	r9, r9, #1
   24a98:	f1a3 0220 	sub.w	r2, r3, #32
   24a9c:	2a5a      	cmp	r2, #90	; 0x5a
   24a9e:	f200 8131 	bhi.w	24d04 <_vfiprintf_r+0x358>
   24aa2:	e8df f012 	tbh	[pc, r2, lsl #1]
   24aa6:	006a      	.short	0x006a
   24aa8:	012f012f 	.word	0x012f012f
   24aac:	012f0262 	.word	0x012f0262
   24ab0:	012f012f 	.word	0x012f012f
   24ab4:	012f0242 	.word	0x012f0242
   24ab8:	020f012f 	.word	0x020f012f
   24abc:	012f021f 	.word	0x012f021f
   24ac0:	0229021a 	.word	0x0229021a
   24ac4:	0224012f 	.word	0x0224012f
   24ac8:	005b005b 	.word	0x005b005b
   24acc:	005b005b 	.word	0x005b005b
   24ad0:	005b005b 	.word	0x005b005b
   24ad4:	005b005b 	.word	0x005b005b
   24ad8:	012f005b 	.word	0x012f005b
   24adc:	012f012f 	.word	0x012f012f
   24ae0:	012f012f 	.word	0x012f012f
   24ae4:	012f012f 	.word	0x012f012f
   24ae8:	012f012f 	.word	0x012f012f
   24aec:	007701fd 	.word	0x007701fd
   24af0:	012f012f 	.word	0x012f012f
   24af4:	012f012f 	.word	0x012f012f
   24af8:	012f012f 	.word	0x012f012f
   24afc:	012f012f 	.word	0x012f012f
   24b00:	012f012f 	.word	0x012f012f
   24b04:	012f00c9 	.word	0x012f00c9
   24b08:	012f012f 	.word	0x012f012f
   24b0c:	012f01e1 	.word	0x012f01e1
   24b10:	012f0277 	.word	0x012f0277
   24b14:	04e8012f 	.word	0x04e8012f
   24b18:	012f012f 	.word	0x012f012f
   24b1c:	012f012f 	.word	0x012f012f
   24b20:	012f012f 	.word	0x012f012f
   24b24:	012f012f 	.word	0x012f012f
   24b28:	012f012f 	.word	0x012f012f
   24b2c:	007901fd 	.word	0x007901fd
   24b30:	012f012f 	.word	0x012f012f
   24b34:	026f012f 	.word	0x026f012f
   24b38:	00720079 	.word	0x00720079
   24b3c:	0267012f 	.word	0x0267012f
   24b40:	0298012f 	.word	0x0298012f
   24b44:	028700cb 	.word	0x028700cb
   24b48:	012f0072 	.word	0x012f0072
   24b4c:	006f01e1 	.word	0x006f01e1
   24b50:	012f04e6 	.word	0x012f04e6
   24b54:	0505012f 	.word	0x0505012f
   24b58:	006f012f 	.word	0x006f012f
   24b5c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   24b60:	2100      	movs	r1, #0
   24b62:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   24b66:	f819 3b01 	ldrb.w	r3, [r9], #1
   24b6a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   24b6e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   24b72:	2a09      	cmp	r2, #9
   24b74:	d9f5      	bls.n	24b62 <_vfiprintf_r+0x1b6>
   24b76:	9104      	str	r1, [sp, #16]
   24b78:	e78e      	b.n	24a98 <_vfiprintf_r+0xec>
   24b7a:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   24b7e:	2b00      	cmp	r3, #0
   24b80:	f000 8453 	beq.w	2542a <_vfiprintf_r+0xa7e>
   24b84:	f899 3000 	ldrb.w	r3, [r9]
   24b88:	e784      	b.n	24a94 <_vfiprintf_r+0xe8>
   24b8a:	f046 0620 	orr.w	r6, r6, #32
   24b8e:	f899 3000 	ldrb.w	r3, [r9]
   24b92:	e77f      	b.n	24a94 <_vfiprintf_r+0xe8>
   24b94:	f046 0610 	orr.w	r6, r6, #16
   24b98:	06b7      	lsls	r7, r6, #26
   24b9a:	f140 814a 	bpl.w	24e32 <_vfiprintf_r+0x486>
   24b9e:	9c06      	ldr	r4, [sp, #24]
   24ba0:	3407      	adds	r4, #7
   24ba2:	f024 0307 	bic.w	r3, r4, #7
   24ba6:	4619      	mov	r1, r3
   24ba8:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   24bac:	4614      	mov	r4, r2
   24bae:	461d      	mov	r5, r3
   24bb0:	9106      	str	r1, [sp, #24]
   24bb2:	2a00      	cmp	r2, #0
   24bb4:	f173 0300 	sbcs.w	r3, r3, #0
   24bb8:	f2c0 83f9 	blt.w	253ae <_vfiprintf_r+0xa02>
   24bbc:	9b02      	ldr	r3, [sp, #8]
   24bbe:	3301      	adds	r3, #1
   24bc0:	f000 83b3 	beq.w	2532a <_vfiprintf_r+0x97e>
   24bc4:	ea54 0305 	orrs.w	r3, r4, r5
   24bc8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   24bcc:	f040 83ad 	bne.w	2532a <_vfiprintf_r+0x97e>
   24bd0:	9a02      	ldr	r2, [sp, #8]
   24bd2:	1e13      	subs	r3, r2, #0
   24bd4:	bf18      	it	ne
   24bd6:	2301      	movne	r3, #1
   24bd8:	2a00      	cmp	r2, #0
   24bda:	f040 83a6 	bne.w	2532a <_vfiprintf_r+0x97e>
   24bde:	af3c      	add	r7, sp, #240	; 0xf0
   24be0:	9302      	str	r3, [sp, #8]
   24be2:	9303      	str	r3, [sp, #12]
   24be4:	e05e      	b.n	24ca4 <_vfiprintf_r+0x2f8>
   24be6:	4651      	mov	r1, sl
   24be8:	ee18 0a10 	vmov	r0, s16
   24bec:	f000 fe4a 	bl	25884 <__swsetup_r>
   24bf0:	2800      	cmp	r0, #0
   24bf2:	f040 856b 	bne.w	256cc <_vfiprintf_r+0xd20>
   24bf6:	f8ba 200c 	ldrh.w	r2, [sl, #12]
   24bfa:	f002 031a 	and.w	r3, r2, #26
   24bfe:	2b0a      	cmp	r3, #10
   24c00:	f47f af08 	bne.w	24a14 <_vfiprintf_r+0x68>
   24c04:	f9ba 300e 	ldrsh.w	r3, [sl, #14]
   24c08:	2b00      	cmp	r3, #0
   24c0a:	f6ff af03 	blt.w	24a14 <_vfiprintf_r+0x68>
   24c0e:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   24c12:	07d9      	lsls	r1, r3, #31
   24c14:	d402      	bmi.n	24c1c <_vfiprintf_r+0x270>
   24c16:	0593      	lsls	r3, r2, #22
   24c18:	f140 850c 	bpl.w	25634 <_vfiprintf_r+0xc88>
   24c1c:	4623      	mov	r3, r4
   24c1e:	464a      	mov	r2, r9
   24c20:	4651      	mov	r1, sl
   24c22:	ee18 0a10 	vmov	r0, s16
   24c26:	f000 fd6d 	bl	25704 <__sbprintf>
   24c2a:	9005      	str	r0, [sp, #20]
   24c2c:	9805      	ldr	r0, [sp, #20]
   24c2e:	b03d      	add	sp, #244	; 0xf4
   24c30:	ecbd 8b02 	vpop	{d8}
   24c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24c38:	f046 0610 	orr.w	r6, r6, #16
   24c3c:	06b5      	lsls	r5, r6, #26
   24c3e:	9c06      	ldr	r4, [sp, #24]
   24c40:	f140 8106 	bpl.w	24e50 <_vfiprintf_r+0x4a4>
   24c44:	3407      	adds	r4, #7
   24c46:	f024 0307 	bic.w	r3, r4, #7
   24c4a:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   24c4e:	9306      	str	r3, [sp, #24]
   24c50:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   24c54:	9301      	str	r3, [sp, #4]
   24c56:	2300      	movs	r3, #0
   24c58:	f04f 0200 	mov.w	r2, #0
   24c5c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   24c60:	9a02      	ldr	r2, [sp, #8]
   24c62:	4611      	mov	r1, r2
   24c64:	3101      	adds	r1, #1
   24c66:	f000 81d5 	beq.w	25014 <_vfiprintf_r+0x668>
   24c6a:	9901      	ldr	r1, [sp, #4]
   24c6c:	f021 0680 	bic.w	r6, r1, #128	; 0x80
   24c70:	ea54 0105 	orrs.w	r1, r4, r5
   24c74:	f040 81cd 	bne.w	25012 <_vfiprintf_r+0x666>
   24c78:	4611      	mov	r1, r2
   24c7a:	3a00      	subs	r2, #0
   24c7c:	bf18      	it	ne
   24c7e:	2201      	movne	r2, #1
   24c80:	2900      	cmp	r1, #0
   24c82:	f040 81c6 	bne.w	25012 <_vfiprintf_r+0x666>
   24c86:	2b00      	cmp	r3, #0
   24c88:	f040 834b 	bne.w	25322 <_vfiprintf_r+0x976>
   24c8c:	9a01      	ldr	r2, [sp, #4]
   24c8e:	f012 0201 	ands.w	r2, r2, #1
   24c92:	9203      	str	r2, [sp, #12]
   24c94:	f000 8379 	beq.w	2538a <_vfiprintf_r+0x9de>
   24c98:	2230      	movs	r2, #48	; 0x30
   24c9a:	f10d 07ef 	add.w	r7, sp, #239	; 0xef
   24c9e:	9302      	str	r3, [sp, #8]
   24ca0:	f88d 20ef 	strb.w	r2, [sp, #239]	; 0xef
   24ca4:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   24ca8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   24cac:	428a      	cmp	r2, r1
   24cae:	bfb8      	it	lt
   24cb0:	460a      	movlt	r2, r1
   24cb2:	9201      	str	r2, [sp, #4]
   24cb4:	2b00      	cmp	r3, #0
   24cb6:	d033      	beq.n	24d20 <_vfiprintf_r+0x374>
   24cb8:	3201      	adds	r2, #1
   24cba:	9201      	str	r2, [sp, #4]
   24cbc:	e030      	b.n	24d20 <_vfiprintf_r+0x374>
   24cbe:	2a00      	cmp	r2, #0
   24cc0:	f000 835e 	beq.w	25380 <_vfiprintf_r+0x9d4>
   24cc4:	aa10      	add	r2, sp, #64	; 0x40
   24cc6:	4651      	mov	r1, sl
   24cc8:	4658      	mov	r0, fp
   24cca:	f7ff fe35 	bl	24938 <__sprint_r.part.0>
   24cce:	b940      	cbnz	r0, 24ce2 <_vfiprintf_r+0x336>
   24cd0:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   24cd4:	e6ca      	b.n	24a6c <_vfiprintf_r+0xc0>
   24cd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   24cd8:	2b00      	cmp	r3, #0
   24cda:	f040 84d8 	bne.w	2568e <_vfiprintf_r+0xce2>
   24cde:	2300      	movs	r3, #0
   24ce0:	9311      	str	r3, [sp, #68]	; 0x44
   24ce2:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   24ce6:	f013 0f01 	tst.w	r3, #1
   24cea:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   24cee:	f000 8096 	beq.w	24e1e <_vfiprintf_r+0x472>
   24cf2:	065b      	lsls	r3, r3, #25
   24cf4:	f100 84d6 	bmi.w	256a4 <_vfiprintf_r+0xcf8>
   24cf8:	9805      	ldr	r0, [sp, #20]
   24cfa:	b03d      	add	sp, #244	; 0xf4
   24cfc:	ecbd 8b02 	vpop	{d8}
   24d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d04:	2b00      	cmp	r3, #0
   24d06:	d0e6      	beq.n	24cd6 <_vfiprintf_r+0x32a>
   24d08:	2201      	movs	r2, #1
   24d0a:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   24d0e:	af23      	add	r7, sp, #140	; 0x8c
   24d10:	f04f 0300 	mov.w	r3, #0
   24d14:	9201      	str	r2, [sp, #4]
   24d16:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   24d1a:	9203      	str	r2, [sp, #12]
   24d1c:	2300      	movs	r3, #0
   24d1e:	9302      	str	r3, [sp, #8]
   24d20:	f016 0302 	ands.w	r3, r6, #2
   24d24:	9307      	str	r3, [sp, #28]
   24d26:	d002      	beq.n	24d2e <_vfiprintf_r+0x382>
   24d28:	9b01      	ldr	r3, [sp, #4]
   24d2a:	3302      	adds	r3, #2
   24d2c:	9301      	str	r3, [sp, #4]
   24d2e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   24d32:	9308      	str	r3, [sp, #32]
   24d34:	d105      	bne.n	24d42 <_vfiprintf_r+0x396>
   24d36:	9b04      	ldr	r3, [sp, #16]
   24d38:	9a01      	ldr	r2, [sp, #4]
   24d3a:	1a9c      	subs	r4, r3, r2
   24d3c:	2c00      	cmp	r4, #0
   24d3e:	f300 8259 	bgt.w	251f4 <_vfiprintf_r+0x848>
   24d42:	e9dd 2c11 	ldrd	r2, ip, [sp, #68]	; 0x44
   24d46:	1c51      	adds	r1, r2, #1
   24d48:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   24d4c:	b178      	cbz	r0, 24d6e <_vfiprintf_r+0x3c2>
   24d4e:	f10c 0c01 	add.w	ip, ip, #1
   24d52:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   24d56:	2201      	movs	r2, #1
   24d58:	2907      	cmp	r1, #7
   24d5a:	e9cd 1c11 	strd	r1, ip, [sp, #68]	; 0x44
   24d5e:	e9c8 0200 	strd	r0, r2, [r8]
   24d62:	f300 8227 	bgt.w	251b4 <_vfiprintf_r+0x808>
   24d66:	460a      	mov	r2, r1
   24d68:	f108 0808 	add.w	r8, r8, #8
   24d6c:	3101      	adds	r1, #1
   24d6e:	9b07      	ldr	r3, [sp, #28]
   24d70:	b1db      	cbz	r3, 24daa <_vfiprintf_r+0x3fe>
   24d72:	f10c 0c02 	add.w	ip, ip, #2
   24d76:	aa0f      	add	r2, sp, #60	; 0x3c
   24d78:	2302      	movs	r3, #2
   24d7a:	2907      	cmp	r1, #7
   24d7c:	e9cd 1c11 	strd	r1, ip, [sp, #68]	; 0x44
   24d80:	e9c8 2300 	strd	r2, r3, [r8]
   24d84:	f340 8231 	ble.w	251ea <_vfiprintf_r+0x83e>
   24d88:	f1bc 0f00 	cmp.w	ip, #0
   24d8c:	f000 82e0 	beq.w	25350 <_vfiprintf_r+0x9a4>
   24d90:	aa10      	add	r2, sp, #64	; 0x40
   24d92:	4651      	mov	r1, sl
   24d94:	4658      	mov	r0, fp
   24d96:	f7ff fdcf 	bl	24938 <__sprint_r.part.0>
   24d9a:	2800      	cmp	r0, #0
   24d9c:	d1a1      	bne.n	24ce2 <_vfiprintf_r+0x336>
   24d9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   24da0:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   24da4:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   24da8:	1c51      	adds	r1, r2, #1
   24daa:	9b08      	ldr	r3, [sp, #32]
   24dac:	2b80      	cmp	r3, #128	; 0x80
   24dae:	f000 8169 	beq.w	25084 <_vfiprintf_r+0x6d8>
   24db2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   24db6:	1a1c      	subs	r4, r3, r0
   24db8:	2c00      	cmp	r4, #0
   24dba:	f300 81b8 	bgt.w	2512e <_vfiprintf_r+0x782>
   24dbe:	9a03      	ldr	r2, [sp, #12]
   24dc0:	2907      	cmp	r1, #7
   24dc2:	4613      	mov	r3, r2
   24dc4:	4463      	add	r3, ip
   24dc6:	e9c8 7200 	strd	r7, r2, [r8]
   24dca:	e9cd 1311 	strd	r1, r3, [sp, #68]	; 0x44
   24dce:	f340 811d 	ble.w	2500c <_vfiprintf_r+0x660>
   24dd2:	2b00      	cmp	r3, #0
   24dd4:	f000 824a 	beq.w	2526c <_vfiprintf_r+0x8c0>
   24dd8:	aa10      	add	r2, sp, #64	; 0x40
   24dda:	4651      	mov	r1, sl
   24ddc:	4658      	mov	r0, fp
   24dde:	f7ff fdab 	bl	24938 <__sprint_r.part.0>
   24de2:	2800      	cmp	r0, #0
   24de4:	f47f af7d 	bne.w	24ce2 <_vfiprintf_r+0x336>
   24de8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   24dea:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   24dee:	0771      	lsls	r1, r6, #29
   24df0:	d505      	bpl.n	24dfe <_vfiprintf_r+0x452>
   24df2:	9a04      	ldr	r2, [sp, #16]
   24df4:	9901      	ldr	r1, [sp, #4]
   24df6:	1a54      	subs	r4, r2, r1
   24df8:	2c00      	cmp	r4, #0
   24dfa:	f300 8241 	bgt.w	25280 <_vfiprintf_r+0x8d4>
   24dfe:	9801      	ldr	r0, [sp, #4]
   24e00:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   24e04:	4281      	cmp	r1, r0
   24e06:	bfac      	ite	ge
   24e08:	1852      	addge	r2, r2, r1
   24e0a:	1812      	addlt	r2, r2, r0
   24e0c:	9205      	str	r2, [sp, #20]
   24e0e:	2b00      	cmp	r3, #0
   24e10:	f040 81c7 	bne.w	251a2 <_vfiprintf_r+0x7f6>
   24e14:	2300      	movs	r3, #0
   24e16:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   24e1a:	9311      	str	r3, [sp, #68]	; 0x44
   24e1c:	e608      	b.n	24a30 <_vfiprintf_r+0x84>
   24e1e:	059a      	lsls	r2, r3, #22
   24e20:	f53f af67 	bmi.w	24cf2 <_vfiprintf_r+0x346>
   24e24:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   24e28:	f001 ff14 	bl	26c54 <__retarget_lock_release_recursive>
   24e2c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   24e30:	e75f      	b.n	24cf2 <_vfiprintf_r+0x346>
   24e32:	9b06      	ldr	r3, [sp, #24]
   24e34:	06f5      	lsls	r5, r6, #27
   24e36:	f853 4b04 	ldr.w	r4, [r3], #4
   24e3a:	f100 82ea 	bmi.w	25412 <_vfiprintf_r+0xa66>
   24e3e:	0670      	lsls	r0, r6, #25
   24e40:	f140 82e4 	bpl.w	2540c <_vfiprintf_r+0xa60>
   24e44:	b224      	sxth	r4, r4
   24e46:	9306      	str	r3, [sp, #24]
   24e48:	17e5      	asrs	r5, r4, #31
   24e4a:	4622      	mov	r2, r4
   24e4c:	462b      	mov	r3, r5
   24e4e:	e6b0      	b.n	24bb2 <_vfiprintf_r+0x206>
   24e50:	f854 3b04 	ldr.w	r3, [r4], #4
   24e54:	06f0      	lsls	r0, r6, #27
   24e56:	9406      	str	r4, [sp, #24]
   24e58:	f100 82e4 	bmi.w	25424 <_vfiprintf_r+0xa78>
   24e5c:	0671      	lsls	r1, r6, #25
   24e5e:	f140 82de 	bpl.w	2541e <_vfiprintf_r+0xa72>
   24e62:	b29c      	uxth	r4, r3
   24e64:	2500      	movs	r5, #0
   24e66:	e6f3      	b.n	24c50 <_vfiprintf_r+0x2a4>
   24e68:	9c06      	ldr	r4, [sp, #24]
   24e6a:	f04f 0300 	mov.w	r3, #0
   24e6e:	f854 7b04 	ldr.w	r7, [r4], #4
   24e72:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   24e76:	2f00      	cmp	r7, #0
   24e78:	f000 839d 	beq.w	255b6 <_vfiprintf_r+0xc0a>
   24e7c:	9a02      	ldr	r2, [sp, #8]
   24e7e:	4613      	mov	r3, r2
   24e80:	3301      	adds	r3, #1
   24e82:	f000 8318 	beq.w	254b6 <_vfiprintf_r+0xb0a>
   24e86:	2100      	movs	r1, #0
   24e88:	4638      	mov	r0, r7
   24e8a:	f7fd f973 	bl	22174 <memchr>
   24e8e:	2800      	cmp	r0, #0
   24e90:	f000 83ea 	beq.w	25668 <_vfiprintf_r+0xcbc>
   24e94:	1bc3      	subs	r3, r0, r7
   24e96:	9406      	str	r4, [sp, #24]
   24e98:	9303      	str	r3, [sp, #12]
   24e9a:	2300      	movs	r3, #0
   24e9c:	9302      	str	r3, [sp, #8]
   24e9e:	e701      	b.n	24ca4 <_vfiprintf_r+0x2f8>
   24ea0:	9c06      	ldr	r4, [sp, #24]
   24ea2:	f04f 0300 	mov.w	r3, #0
   24ea6:	2201      	movs	r2, #1
   24ea8:	af23      	add	r7, sp, #140	; 0x8c
   24eaa:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   24eae:	f854 3b04 	ldr.w	r3, [r4], #4
   24eb2:	9201      	str	r2, [sp, #4]
   24eb4:	9203      	str	r2, [sp, #12]
   24eb6:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   24eba:	9406      	str	r4, [sp, #24]
   24ebc:	e72e      	b.n	24d1c <_vfiprintf_r+0x370>
   24ebe:	f000 fefd 	bl	25cbc <__sinit>
   24ec2:	e583      	b.n	249cc <_vfiprintf_r+0x20>
   24ec4:	9b06      	ldr	r3, [sp, #24]
   24ec6:	f853 2b04 	ldr.w	r2, [r3], #4
   24eca:	2a00      	cmp	r2, #0
   24ecc:	9204      	str	r2, [sp, #16]
   24ece:	f280 828a 	bge.w	253e6 <_vfiprintf_r+0xa3a>
   24ed2:	9a04      	ldr	r2, [sp, #16]
   24ed4:	9306      	str	r3, [sp, #24]
   24ed6:	4252      	negs	r2, r2
   24ed8:	9204      	str	r2, [sp, #16]
   24eda:	f046 0604 	orr.w	r6, r6, #4
   24ede:	f899 3000 	ldrb.w	r3, [r9]
   24ee2:	e5d7      	b.n	24a94 <_vfiprintf_r+0xe8>
   24ee4:	f899 3000 	ldrb.w	r3, [r9]
   24ee8:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
   24eec:	e5d2      	b.n	24a94 <_vfiprintf_r+0xe8>
   24eee:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   24ef2:	f899 3000 	ldrb.w	r3, [r9]
   24ef6:	e5cd      	b.n	24a94 <_vfiprintf_r+0xe8>
   24ef8:	4649      	mov	r1, r9
   24efa:	f811 3b01 	ldrb.w	r3, [r1], #1
   24efe:	2b2a      	cmp	r3, #42	; 0x2a
   24f00:	f000 83d8 	beq.w	256b4 <_vfiprintf_r+0xd08>
   24f04:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   24f08:	4689      	mov	r9, r1
   24f0a:	2a09      	cmp	r2, #9
   24f0c:	f200 83b7 	bhi.w	2567e <_vfiprintf_r+0xcd2>
   24f10:	2100      	movs	r1, #0
   24f12:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   24f16:	f819 3b01 	ldrb.w	r3, [r9], #1
   24f1a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   24f1e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   24f22:	2a09      	cmp	r2, #9
   24f24:	d9f5      	bls.n	24f12 <_vfiprintf_r+0x566>
   24f26:	9102      	str	r1, [sp, #8]
   24f28:	e5b6      	b.n	24a98 <_vfiprintf_r+0xec>
   24f2a:	4658      	mov	r0, fp
   24f2c:	f001 fe88 	bl	26c40 <_localeconv_r>
   24f30:	6843      	ldr	r3, [r0, #4]
   24f32:	4618      	mov	r0, r3
   24f34:	930b      	str	r3, [sp, #44]	; 0x2c
   24f36:	f7fd fd99 	bl	22a6c <strlen>
   24f3a:	4603      	mov	r3, r0
   24f3c:	4658      	mov	r0, fp
   24f3e:	461c      	mov	r4, r3
   24f40:	930c      	str	r3, [sp, #48]	; 0x30
   24f42:	f001 fe7d 	bl	26c40 <_localeconv_r>
   24f46:	6882      	ldr	r2, [r0, #8]
   24f48:	920a      	str	r2, [sp, #40]	; 0x28
   24f4a:	2c00      	cmp	r4, #0
   24f4c:	f43f ae1a 	beq.w	24b84 <_vfiprintf_r+0x1d8>
   24f50:	2a00      	cmp	r2, #0
   24f52:	f43f ae17 	beq.w	24b84 <_vfiprintf_r+0x1d8>
   24f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24f58:	781b      	ldrb	r3, [r3, #0]
   24f5a:	2b00      	cmp	r3, #0
   24f5c:	f43f ae12 	beq.w	24b84 <_vfiprintf_r+0x1d8>
   24f60:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   24f64:	f899 3000 	ldrb.w	r3, [r9]
   24f68:	e594      	b.n	24a94 <_vfiprintf_r+0xe8>
   24f6a:	f046 0601 	orr.w	r6, r6, #1
   24f6e:	f899 3000 	ldrb.w	r3, [r9]
   24f72:	e58f      	b.n	24a94 <_vfiprintf_r+0xe8>
   24f74:	f899 3000 	ldrb.w	r3, [r9]
   24f78:	2b6c      	cmp	r3, #108	; 0x6c
   24f7a:	f000 830c 	beq.w	25596 <_vfiprintf_r+0xbea>
   24f7e:	f046 0610 	orr.w	r6, r6, #16
   24f82:	e587      	b.n	24a94 <_vfiprintf_r+0xe8>
   24f84:	f899 3000 	ldrb.w	r3, [r9]
   24f88:	2b68      	cmp	r3, #104	; 0x68
   24f8a:	f000 82fc 	beq.w	25586 <_vfiprintf_r+0xbda>
   24f8e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   24f92:	e57f      	b.n	24a94 <_vfiprintf_r+0xe8>
   24f94:	f046 0310 	orr.w	r3, r6, #16
   24f98:	9301      	str	r3, [sp, #4]
   24f9a:	9b01      	ldr	r3, [sp, #4]
   24f9c:	069b      	lsls	r3, r3, #26
   24f9e:	f140 81f7 	bpl.w	25390 <_vfiprintf_r+0x9e4>
   24fa2:	9c06      	ldr	r4, [sp, #24]
   24fa4:	2301      	movs	r3, #1
   24fa6:	3407      	adds	r4, #7
   24fa8:	f024 0207 	bic.w	r2, r4, #7
   24fac:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   24fb0:	9206      	str	r2, [sp, #24]
   24fb2:	e651      	b.n	24c58 <_vfiprintf_r+0x2ac>
   24fb4:	9c06      	ldr	r4, [sp, #24]
   24fb6:	f046 0302 	orr.w	r3, r6, #2
   24fba:	f647 0130 	movw	r1, #30768	; 0x7830
   24fbe:	2500      	movs	r5, #0
   24fc0:	f854 2b04 	ldr.w	r2, [r4], #4
   24fc4:	9301      	str	r3, [sp, #4]
   24fc6:	4bb2      	ldr	r3, [pc, #712]	; (25290 <_vfiprintf_r+0x8e4>)
   24fc8:	9406      	str	r4, [sp, #24]
   24fca:	4614      	mov	r4, r2
   24fcc:	9309      	str	r3, [sp, #36]	; 0x24
   24fce:	2302      	movs	r3, #2
   24fd0:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
   24fd4:	e640      	b.n	24c58 <_vfiprintf_r+0x2ac>
   24fd6:	06b2      	lsls	r2, r6, #26
   24fd8:	f100 822e 	bmi.w	25438 <_vfiprintf_r+0xa8c>
   24fdc:	06f3      	lsls	r3, r6, #27
   24fde:	f100 82e2 	bmi.w	255a6 <_vfiprintf_r+0xbfa>
   24fe2:	0677      	lsls	r7, r6, #25
   24fe4:	f100 8310 	bmi.w	25608 <_vfiprintf_r+0xc5c>
   24fe8:	05b6      	lsls	r6, r6, #22
   24fea:	f140 82dc 	bpl.w	255a6 <_vfiprintf_r+0xbfa>
   24fee:	9c06      	ldr	r4, [sp, #24]
   24ff0:	9a05      	ldr	r2, [sp, #20]
   24ff2:	f854 3b04 	ldr.w	r3, [r4], #4
   24ff6:	701a      	strb	r2, [r3, #0]
   24ff8:	9406      	str	r4, [sp, #24]
   24ffa:	e519      	b.n	24a30 <_vfiprintf_r+0x84>
   24ffc:	9b03      	ldr	r3, [sp, #12]
   24ffe:	2201      	movs	r2, #1
   25000:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   25004:	9713      	str	r7, [sp, #76]	; 0x4c
   25006:	9314      	str	r3, [sp, #80]	; 0x50
   25008:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
   2500c:	f108 0808 	add.w	r8, r8, #8
   25010:	e6ed      	b.n	24dee <_vfiprintf_r+0x442>
   25012:	9601      	str	r6, [sp, #4]
   25014:	2b01      	cmp	r3, #1
   25016:	f000 8189 	beq.w	2532c <_vfiprintf_r+0x980>
   2501a:	2b02      	cmp	r3, #2
   2501c:	af3c      	add	r7, sp, #240	; 0xf0
   2501e:	d113      	bne.n	25048 <_vfiprintf_r+0x69c>
   25020:	9809      	ldr	r0, [sp, #36]	; 0x24
   25022:	0923      	lsrs	r3, r4, #4
   25024:	f004 010f 	and.w	r1, r4, #15
   25028:	092a      	lsrs	r2, r5, #4
   2502a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   2502e:	4615      	mov	r5, r2
   25030:	461c      	mov	r4, r3
   25032:	5c43      	ldrb	r3, [r0, r1]
   25034:	f807 3d01 	strb.w	r3, [r7, #-1]!
   25038:	ea54 0305 	orrs.w	r3, r4, r5
   2503c:	d1f1      	bne.n	25022 <_vfiprintf_r+0x676>
   2503e:	ab3c      	add	r3, sp, #240	; 0xf0
   25040:	9e01      	ldr	r6, [sp, #4]
   25042:	1bdb      	subs	r3, r3, r7
   25044:	9303      	str	r3, [sp, #12]
   25046:	e62d      	b.n	24ca4 <_vfiprintf_r+0x2f8>
   25048:	08e2      	lsrs	r2, r4, #3
   2504a:	f004 0307 	and.w	r3, r4, #7
   2504e:	08e9      	lsrs	r1, r5, #3
   25050:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   25054:	3330      	adds	r3, #48	; 0x30
   25056:	460d      	mov	r5, r1
   25058:	4614      	mov	r4, r2
   2505a:	463a      	mov	r2, r7
   2505c:	f807 3d01 	strb.w	r3, [r7, #-1]!
   25060:	ea54 0105 	orrs.w	r1, r4, r5
   25064:	d1f0      	bne.n	25048 <_vfiprintf_r+0x69c>
   25066:	2b30      	cmp	r3, #48	; 0x30
   25068:	d0e9      	beq.n	2503e <_vfiprintf_r+0x692>
   2506a:	9b01      	ldr	r3, [sp, #4]
   2506c:	07dc      	lsls	r4, r3, #31
   2506e:	d5e6      	bpl.n	2503e <_vfiprintf_r+0x692>
   25070:	2330      	movs	r3, #48	; 0x30
   25072:	3a02      	subs	r2, #2
   25074:	9e01      	ldr	r6, [sp, #4]
   25076:	f807 3c01 	strb.w	r3, [r7, #-1]
   2507a:	ab3c      	add	r3, sp, #240	; 0xf0
   2507c:	4617      	mov	r7, r2
   2507e:	1a9b      	subs	r3, r3, r2
   25080:	9303      	str	r3, [sp, #12]
   25082:	e60f      	b.n	24ca4 <_vfiprintf_r+0x2f8>
   25084:	9b04      	ldr	r3, [sp, #16]
   25086:	9801      	ldr	r0, [sp, #4]
   25088:	1a1c      	subs	r4, r3, r0
   2508a:	2c00      	cmp	r4, #0
   2508c:	f77f ae91 	ble.w	24db2 <_vfiprintf_r+0x406>
   25090:	2c10      	cmp	r4, #16
   25092:	f340 830c 	ble.w	256ae <_vfiprintf_r+0xd02>
   25096:	9607      	str	r6, [sp, #28]
   25098:	4666      	mov	r6, ip
   2509a:	4d7e      	ldr	r5, [pc, #504]	; (25294 <_vfiprintf_r+0x8e8>)
   2509c:	e00a      	b.n	250b4 <_vfiprintf_r+0x708>
   2509e:	f7ff fc4b 	bl	24938 <__sprint_r.part.0>
   250a2:	2800      	cmp	r0, #0
   250a4:	f47f ae1d 	bne.w	24ce2 <_vfiprintf_r+0x336>
   250a8:	e9dd 2611 	ldrd	r2, r6, [sp, #68]	; 0x44
   250ac:	1c50      	adds	r0, r2, #1
   250ae:	3c10      	subs	r4, #16
   250b0:	2c10      	cmp	r4, #16
   250b2:	dd1a      	ble.n	250ea <_vfiprintf_r+0x73e>
   250b4:	1c53      	adds	r3, r2, #1
   250b6:	3610      	adds	r6, #16
   250b8:	2110      	movs	r1, #16
   250ba:	1c90      	adds	r0, r2, #2
   250bc:	2b07      	cmp	r3, #7
   250be:	f8c8 5000 	str.w	r5, [r8]
   250c2:	f8c8 1004 	str.w	r1, [r8, #4]
   250c6:	461a      	mov	r2, r3
   250c8:	f108 0808 	add.w	r8, r8, #8
   250cc:	9612      	str	r6, [sp, #72]	; 0x48
   250ce:	9311      	str	r3, [sp, #68]	; 0x44
   250d0:	dded      	ble.n	250ae <_vfiprintf_r+0x702>
   250d2:	aa10      	add	r2, sp, #64	; 0x40
   250d4:	4651      	mov	r1, sl
   250d6:	4658      	mov	r0, fp
   250d8:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   250dc:	2e00      	cmp	r6, #0
   250de:	d1de      	bne.n	2509e <_vfiprintf_r+0x6f2>
   250e0:	3c10      	subs	r4, #16
   250e2:	2001      	movs	r0, #1
   250e4:	4632      	mov	r2, r6
   250e6:	2c10      	cmp	r4, #16
   250e8:	dce4      	bgt.n	250b4 <_vfiprintf_r+0x708>
   250ea:	46b4      	mov	ip, r6
   250ec:	9e07      	ldr	r6, [sp, #28]
   250ee:	44a4      	add	ip, r4
   250f0:	2807      	cmp	r0, #7
   250f2:	e9c8 5400 	strd	r5, r4, [r8]
   250f6:	e9cd 0c11 	strd	r0, ip, [sp, #68]	; 0x44
   250fa:	f340 8182 	ble.w	25402 <_vfiprintf_r+0xa56>
   250fe:	f1bc 0f00 	cmp.w	ip, #0
   25102:	f000 8271 	beq.w	255e8 <_vfiprintf_r+0xc3c>
   25106:	aa10      	add	r2, sp, #64	; 0x40
   25108:	4651      	mov	r1, sl
   2510a:	4658      	mov	r0, fp
   2510c:	f7ff fc14 	bl	24938 <__sprint_r.part.0>
   25110:	2800      	cmp	r0, #0
   25112:	f47f ade6 	bne.w	24ce2 <_vfiprintf_r+0x336>
   25116:	9a11      	ldr	r2, [sp, #68]	; 0x44
   25118:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   2511c:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   25120:	1c51      	adds	r1, r2, #1
   25122:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   25126:	1a1c      	subs	r4, r3, r0
   25128:	2c00      	cmp	r4, #0
   2512a:	f77f ae48 	ble.w	24dbe <_vfiprintf_r+0x412>
   2512e:	2c10      	cmp	r4, #16
   25130:	4d58      	ldr	r5, [pc, #352]	; (25294 <_vfiprintf_r+0x8e8>)
   25132:	dd2a      	ble.n	2518a <_vfiprintf_r+0x7de>
   25134:	9602      	str	r6, [sp, #8]
   25136:	4666      	mov	r6, ip
   25138:	e00a      	b.n	25150 <_vfiprintf_r+0x7a4>
   2513a:	f7ff fbfd 	bl	24938 <__sprint_r.part.0>
   2513e:	2800      	cmp	r0, #0
   25140:	f47f adcf 	bne.w	24ce2 <_vfiprintf_r+0x336>
   25144:	e9dd 2611 	ldrd	r2, r6, [sp, #68]	; 0x44
   25148:	1c51      	adds	r1, r2, #1
   2514a:	3c10      	subs	r4, #16
   2514c:	2c10      	cmp	r4, #16
   2514e:	dd1a      	ble.n	25186 <_vfiprintf_r+0x7da>
   25150:	1c53      	adds	r3, r2, #1
   25152:	3610      	adds	r6, #16
   25154:	2010      	movs	r0, #16
   25156:	1c91      	adds	r1, r2, #2
   25158:	2b07      	cmp	r3, #7
   2515a:	f8c8 5000 	str.w	r5, [r8]
   2515e:	f8c8 0004 	str.w	r0, [r8, #4]
   25162:	461a      	mov	r2, r3
   25164:	f108 0808 	add.w	r8, r8, #8
   25168:	9612      	str	r6, [sp, #72]	; 0x48
   2516a:	9311      	str	r3, [sp, #68]	; 0x44
   2516c:	dded      	ble.n	2514a <_vfiprintf_r+0x79e>
   2516e:	aa10      	add	r2, sp, #64	; 0x40
   25170:	4651      	mov	r1, sl
   25172:	4658      	mov	r0, fp
   25174:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   25178:	2e00      	cmp	r6, #0
   2517a:	d1de      	bne.n	2513a <_vfiprintf_r+0x78e>
   2517c:	3c10      	subs	r4, #16
   2517e:	2101      	movs	r1, #1
   25180:	4632      	mov	r2, r6
   25182:	2c10      	cmp	r4, #16
   25184:	dce4      	bgt.n	25150 <_vfiprintf_r+0x7a4>
   25186:	46b4      	mov	ip, r6
   25188:	9e02      	ldr	r6, [sp, #8]
   2518a:	44a4      	add	ip, r4
   2518c:	2907      	cmp	r1, #7
   2518e:	e9c8 5400 	strd	r5, r4, [r8]
   25192:	e9cd 1c11 	strd	r1, ip, [sp, #68]	; 0x44
   25196:	f300 80e0 	bgt.w	2535a <_vfiprintf_r+0x9ae>
   2519a:	f108 0808 	add.w	r8, r8, #8
   2519e:	3101      	adds	r1, #1
   251a0:	e60d      	b.n	24dbe <_vfiprintf_r+0x412>
   251a2:	aa10      	add	r2, sp, #64	; 0x40
   251a4:	4651      	mov	r1, sl
   251a6:	4658      	mov	r0, fp
   251a8:	f7ff fbc6 	bl	24938 <__sprint_r.part.0>
   251ac:	2800      	cmp	r0, #0
   251ae:	f43f ae31 	beq.w	24e14 <_vfiprintf_r+0x468>
   251b2:	e596      	b.n	24ce2 <_vfiprintf_r+0x336>
   251b4:	f1bc 0f00 	cmp.w	ip, #0
   251b8:	f000 80c6 	beq.w	25348 <_vfiprintf_r+0x99c>
   251bc:	aa10      	add	r2, sp, #64	; 0x40
   251be:	4651      	mov	r1, sl
   251c0:	4658      	mov	r0, fp
   251c2:	f7ff fbb9 	bl	24938 <__sprint_r.part.0>
   251c6:	2800      	cmp	r0, #0
   251c8:	f47f ad8b 	bne.w	24ce2 <_vfiprintf_r+0x336>
   251cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   251ce:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   251d2:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   251d6:	1c51      	adds	r1, r2, #1
   251d8:	e5c9      	b.n	24d6e <_vfiprintf_r+0x3c2>
   251da:	2302      	movs	r3, #2
   251dc:	aa0f      	add	r2, sp, #60	; 0x3c
   251de:	2101      	movs	r1, #1
   251e0:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   251e4:	469c      	mov	ip, r3
   251e6:	9213      	str	r2, [sp, #76]	; 0x4c
   251e8:	9314      	str	r3, [sp, #80]	; 0x50
   251ea:	460a      	mov	r2, r1
   251ec:	f108 0808 	add.w	r8, r8, #8
   251f0:	1c51      	adds	r1, r2, #1
   251f2:	e5da      	b.n	24daa <_vfiprintf_r+0x3fe>
   251f4:	2c10      	cmp	r4, #16
   251f6:	f340 823d 	ble.w	25674 <_vfiprintf_r+0xcc8>
   251fa:	4d27      	ldr	r5, [pc, #156]	; (25298 <_vfiprintf_r+0x8ec>)
   251fc:	960d      	str	r6, [sp, #52]	; 0x34
   251fe:	e9dd 0311 	ldrd	r0, r3, [sp, #68]	; 0x44
   25202:	e00a      	b.n	2521a <_vfiprintf_r+0x86e>
   25204:	f7ff fb98 	bl	24938 <__sprint_r.part.0>
   25208:	2800      	cmp	r0, #0
   2520a:	f47f ad6a 	bne.w	24ce2 <_vfiprintf_r+0x336>
   2520e:	e9dd 0311 	ldrd	r0, r3, [sp, #68]	; 0x44
   25212:	1c42      	adds	r2, r0, #1
   25214:	3c10      	subs	r4, #16
   25216:	2c10      	cmp	r4, #16
   25218:	dd1a      	ble.n	25250 <_vfiprintf_r+0x8a4>
   2521a:	1c41      	adds	r1, r0, #1
   2521c:	3310      	adds	r3, #16
   2521e:	2610      	movs	r6, #16
   25220:	1c82      	adds	r2, r0, #2
   25222:	2907      	cmp	r1, #7
   25224:	f8c8 5000 	str.w	r5, [r8]
   25228:	f8c8 6004 	str.w	r6, [r8, #4]
   2522c:	4608      	mov	r0, r1
   2522e:	f108 0808 	add.w	r8, r8, #8
   25232:	9312      	str	r3, [sp, #72]	; 0x48
   25234:	9111      	str	r1, [sp, #68]	; 0x44
   25236:	dded      	ble.n	25214 <_vfiprintf_r+0x868>
   25238:	aa10      	add	r2, sp, #64	; 0x40
   2523a:	4651      	mov	r1, sl
   2523c:	4658      	mov	r0, fp
   2523e:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   25242:	2b00      	cmp	r3, #0
   25244:	d1de      	bne.n	25204 <_vfiprintf_r+0x858>
   25246:	3c10      	subs	r4, #16
   25248:	4618      	mov	r0, r3
   2524a:	2201      	movs	r2, #1
   2524c:	2c10      	cmp	r4, #16
   2524e:	dce4      	bgt.n	2521a <_vfiprintf_r+0x86e>
   25250:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   25252:	eb04 0c03 	add.w	ip, r4, r3
   25256:	2a07      	cmp	r2, #7
   25258:	e9c8 5400 	strd	r5, r4, [r8]
   2525c:	e9cd 2c11 	strd	r2, ip, [sp, #68]	; 0x44
   25260:	f300 80af 	bgt.w	253c2 <_vfiprintf_r+0xa16>
   25264:	f108 0808 	add.w	r8, r8, #8
   25268:	1c51      	adds	r1, r2, #1
   2526a:	e56d      	b.n	24d48 <_vfiprintf_r+0x39c>
   2526c:	0770      	lsls	r0, r6, #29
   2526e:	9311      	str	r3, [sp, #68]	; 0x44
   25270:	d54e      	bpl.n	25310 <_vfiprintf_r+0x964>
   25272:	9a04      	ldr	r2, [sp, #16]
   25274:	9901      	ldr	r1, [sp, #4]
   25276:	1a54      	subs	r4, r2, r1
   25278:	2c00      	cmp	r4, #0
   2527a:	dd49      	ble.n	25310 <_vfiprintf_r+0x964>
   2527c:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   25280:	2c10      	cmp	r4, #16
   25282:	f340 8200 	ble.w	25686 <_vfiprintf_r+0xcda>
   25286:	9911      	ldr	r1, [sp, #68]	; 0x44
   25288:	2610      	movs	r6, #16
   2528a:	4d03      	ldr	r5, [pc, #12]	; (25298 <_vfiprintf_r+0x8ec>)
   2528c:	e013      	b.n	252b6 <_vfiprintf_r+0x90a>
   2528e:	bf00      	nop
   25290:	0002c0ec 	.word	0x0002c0ec
   25294:	0002c17c 	.word	0x0002c17c
   25298:	0002c16c 	.word	0x0002c16c
   2529c:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   252a0:	f7ff fb4a 	bl	24938 <__sprint_r.part.0>
   252a4:	2800      	cmp	r0, #0
   252a6:	f47f ad1c 	bne.w	24ce2 <_vfiprintf_r+0x336>
   252aa:	e9dd 1311 	ldrd	r1, r3, [sp, #68]	; 0x44
   252ae:	1c48      	adds	r0, r1, #1
   252b0:	3c10      	subs	r4, #16
   252b2:	2c10      	cmp	r4, #16
   252b4:	dd19      	ble.n	252ea <_vfiprintf_r+0x93e>
   252b6:	1c4a      	adds	r2, r1, #1
   252b8:	3310      	adds	r3, #16
   252ba:	1c88      	adds	r0, r1, #2
   252bc:	f8c8 5000 	str.w	r5, [r8]
   252c0:	2a07      	cmp	r2, #7
   252c2:	f8c8 6004 	str.w	r6, [r8, #4]
   252c6:	4611      	mov	r1, r2
   252c8:	f108 0808 	add.w	r8, r8, #8
   252cc:	9312      	str	r3, [sp, #72]	; 0x48
   252ce:	9211      	str	r2, [sp, #68]	; 0x44
   252d0:	ddee      	ble.n	252b0 <_vfiprintf_r+0x904>
   252d2:	aa10      	add	r2, sp, #64	; 0x40
   252d4:	4651      	mov	r1, sl
   252d6:	4658      	mov	r0, fp
   252d8:	2b00      	cmp	r3, #0
   252da:	d1df      	bne.n	2529c <_vfiprintf_r+0x8f0>
   252dc:	3c10      	subs	r4, #16
   252de:	2001      	movs	r0, #1
   252e0:	4619      	mov	r1, r3
   252e2:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   252e6:	2c10      	cmp	r4, #16
   252e8:	dce5      	bgt.n	252b6 <_vfiprintf_r+0x90a>
   252ea:	4423      	add	r3, r4
   252ec:	2807      	cmp	r0, #7
   252ee:	e9c8 5400 	strd	r5, r4, [r8]
   252f2:	e9cd 0311 	strd	r0, r3, [sp, #68]	; 0x44
   252f6:	f77f ad82 	ble.w	24dfe <_vfiprintf_r+0x452>
   252fa:	b14b      	cbz	r3, 25310 <_vfiprintf_r+0x964>
   252fc:	aa10      	add	r2, sp, #64	; 0x40
   252fe:	4651      	mov	r1, sl
   25300:	4658      	mov	r0, fp
   25302:	f7ff fb19 	bl	24938 <__sprint_r.part.0>
   25306:	2800      	cmp	r0, #0
   25308:	f47f aceb 	bne.w	24ce2 <_vfiprintf_r+0x336>
   2530c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2530e:	e576      	b.n	24dfe <_vfiprintf_r+0x452>
   25310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   25314:	9901      	ldr	r1, [sp, #4]
   25316:	428a      	cmp	r2, r1
   25318:	bfac      	ite	ge
   2531a:	189b      	addge	r3, r3, r2
   2531c:	185b      	addlt	r3, r3, r1
   2531e:	9305      	str	r3, [sp, #20]
   25320:	e578      	b.n	24e14 <_vfiprintf_r+0x468>
   25322:	af3c      	add	r7, sp, #240	; 0xf0
   25324:	9202      	str	r2, [sp, #8]
   25326:	9203      	str	r2, [sp, #12]
   25328:	e4bc      	b.n	24ca4 <_vfiprintf_r+0x2f8>
   2532a:	9601      	str	r6, [sp, #4]
   2532c:	2d00      	cmp	r5, #0
   2532e:	bf08      	it	eq
   25330:	2c0a      	cmpeq	r4, #10
   25332:	f080 80e8 	bcs.w	25506 <_vfiprintf_r+0xb5a>
   25336:	3430      	adds	r4, #48	; 0x30
   25338:	2301      	movs	r3, #1
   2533a:	9e01      	ldr	r6, [sp, #4]
   2533c:	f10d 07ef 	add.w	r7, sp, #239	; 0xef
   25340:	9303      	str	r3, [sp, #12]
   25342:	f88d 40ef 	strb.w	r4, [sp, #239]	; 0xef
   25346:	e4ad      	b.n	24ca4 <_vfiprintf_r+0x2f8>
   25348:	9b07      	ldr	r3, [sp, #28]
   2534a:	2b00      	cmp	r3, #0
   2534c:	f040 8089 	bne.w	25462 <_vfiprintf_r+0xab6>
   25350:	2101      	movs	r1, #1
   25352:	4662      	mov	r2, ip
   25354:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   25358:	e527      	b.n	24daa <_vfiprintf_r+0x3fe>
   2535a:	f1bc 0f00 	cmp.w	ip, #0
   2535e:	f43f ae4d 	beq.w	24ffc <_vfiprintf_r+0x650>
   25362:	aa10      	add	r2, sp, #64	; 0x40
   25364:	4651      	mov	r1, sl
   25366:	4658      	mov	r0, fp
   25368:	f7ff fae6 	bl	24938 <__sprint_r.part.0>
   2536c:	2800      	cmp	r0, #0
   2536e:	f47f acb8 	bne.w	24ce2 <_vfiprintf_r+0x336>
   25372:	9911      	ldr	r1, [sp, #68]	; 0x44
   25374:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   25378:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   2537c:	3101      	adds	r1, #1
   2537e:	e51e      	b.n	24dbe <_vfiprintf_r+0x412>
   25380:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   25384:	9211      	str	r2, [sp, #68]	; 0x44
   25386:	f7ff bb71 	b.w	24a6c <_vfiprintf_r+0xc0>
   2538a:	af3c      	add	r7, sp, #240	; 0xf0
   2538c:	9302      	str	r3, [sp, #8]
   2538e:	e489      	b.n	24ca4 <_vfiprintf_r+0x2f8>
   25390:	9b01      	ldr	r3, [sp, #4]
   25392:	06df      	lsls	r7, r3, #27
   25394:	d45c      	bmi.n	25450 <_vfiprintf_r+0xaa4>
   25396:	9b01      	ldr	r3, [sp, #4]
   25398:	065e      	lsls	r6, r3, #25
   2539a:	f140 8116 	bpl.w	255ca <_vfiprintf_r+0xc1e>
   2539e:	9c06      	ldr	r4, [sp, #24]
   253a0:	2301      	movs	r3, #1
   253a2:	2500      	movs	r5, #0
   253a4:	f854 2b04 	ldr.w	r2, [r4], #4
   253a8:	9406      	str	r4, [sp, #24]
   253aa:	b294      	uxth	r4, r2
   253ac:	e454      	b.n	24c58 <_vfiprintf_r+0x2ac>
   253ae:	222d      	movs	r2, #45	; 0x2d
   253b0:	4264      	negs	r4, r4
   253b2:	f04f 0301 	mov.w	r3, #1
   253b6:	9601      	str	r6, [sp, #4]
   253b8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   253bc:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   253c0:	e44e      	b.n	24c60 <_vfiprintf_r+0x2b4>
   253c2:	f1bc 0f00 	cmp.w	ip, #0
   253c6:	d07f      	beq.n	254c8 <_vfiprintf_r+0xb1c>
   253c8:	aa10      	add	r2, sp, #64	; 0x40
   253ca:	4651      	mov	r1, sl
   253cc:	4658      	mov	r0, fp
   253ce:	f7ff fab3 	bl	24938 <__sprint_r.part.0>
   253d2:	2800      	cmp	r0, #0
   253d4:	f47f ac85 	bne.w	24ce2 <_vfiprintf_r+0x336>
   253d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   253da:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   253de:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   253e2:	1c51      	adds	r1, r2, #1
   253e4:	e4b0      	b.n	24d48 <_vfiprintf_r+0x39c>
   253e6:	9306      	str	r3, [sp, #24]
   253e8:	f899 3000 	ldrb.w	r3, [r9]
   253ec:	f7ff bb52 	b.w	24a94 <_vfiprintf_r+0xe8>
   253f0:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   253f4:	f001 fc2c 	bl	26c50 <__retarget_lock_acquire_recursive>
   253f8:	f9ba 100c 	ldrsh.w	r1, [sl, #12]
   253fc:	b28a      	uxth	r2, r1
   253fe:	f7ff baef 	b.w	249e0 <_vfiprintf_r+0x34>
   25402:	f108 0808 	add.w	r8, r8, #8
   25406:	1c41      	adds	r1, r0, #1
   25408:	4602      	mov	r2, r0
   2540a:	e4d2      	b.n	24db2 <_vfiprintf_r+0x406>
   2540c:	05b1      	lsls	r1, r6, #22
   2540e:	f100 8103 	bmi.w	25618 <_vfiprintf_r+0xc6c>
   25412:	17e5      	asrs	r5, r4, #31
   25414:	9306      	str	r3, [sp, #24]
   25416:	4622      	mov	r2, r4
   25418:	462b      	mov	r3, r5
   2541a:	f7ff bbca 	b.w	24bb2 <_vfiprintf_r+0x206>
   2541e:	05b2      	lsls	r2, r6, #22
   25420:	f100 8101 	bmi.w	25626 <_vfiprintf_r+0xc7a>
   25424:	461c      	mov	r4, r3
   25426:	2500      	movs	r5, #0
   25428:	e412      	b.n	24c50 <_vfiprintf_r+0x2a4>
   2542a:	2220      	movs	r2, #32
   2542c:	f899 3000 	ldrb.w	r3, [r9]
   25430:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   25434:	f7ff bb2e 	b.w	24a94 <_vfiprintf_r+0xe8>
   25438:	9b05      	ldr	r3, [sp, #20]
   2543a:	9c06      	ldr	r4, [sp, #24]
   2543c:	17dd      	asrs	r5, r3, #31
   2543e:	461a      	mov	r2, r3
   25440:	f854 1b04 	ldr.w	r1, [r4], #4
   25444:	462b      	mov	r3, r5
   25446:	9406      	str	r4, [sp, #24]
   25448:	e9c1 2300 	strd	r2, r3, [r1]
   2544c:	f7ff baf0 	b.w	24a30 <_vfiprintf_r+0x84>
   25450:	9c06      	ldr	r4, [sp, #24]
   25452:	2301      	movs	r3, #1
   25454:	2500      	movs	r5, #0
   25456:	f854 2b04 	ldr.w	r2, [r4], #4
   2545a:	9406      	str	r4, [sp, #24]
   2545c:	4614      	mov	r4, r2
   2545e:	f7ff bbfb 	b.w	24c58 <_vfiprintf_r+0x2ac>
   25462:	2302      	movs	r3, #2
   25464:	a90f      	add	r1, sp, #60	; 0x3c
   25466:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   2546a:	469c      	mov	ip, r3
   2546c:	9113      	str	r1, [sp, #76]	; 0x4c
   2546e:	9314      	str	r3, [sp, #80]	; 0x50
   25470:	e6bc      	b.n	251ec <_vfiprintf_r+0x840>
   25472:	9601      	str	r6, [sp, #4]
   25474:	e591      	b.n	24f9a <_vfiprintf_r+0x5ee>
   25476:	4a9e      	ldr	r2, [pc, #632]	; (256f0 <_vfiprintf_r+0xd44>)
   25478:	9209      	str	r2, [sp, #36]	; 0x24
   2547a:	06b5      	lsls	r5, r6, #26
   2547c:	9c06      	ldr	r4, [sp, #24]
   2547e:	d532      	bpl.n	254e6 <_vfiprintf_r+0xb3a>
   25480:	3407      	adds	r4, #7
   25482:	f024 0207 	bic.w	r2, r4, #7
   25486:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   2548a:	9206      	str	r2, [sp, #24]
   2548c:	ea54 0205 	orrs.w	r2, r4, r5
   25490:	d008      	beq.n	254a4 <_vfiprintf_r+0xaf8>
   25492:	07f7      	lsls	r7, r6, #31
   25494:	d506      	bpl.n	254a4 <_vfiprintf_r+0xaf8>
   25496:	2230      	movs	r2, #48	; 0x30
   25498:	f046 0602 	orr.w	r6, r6, #2
   2549c:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   254a0:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   254a4:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   254a8:	9301      	str	r3, [sp, #4]
   254aa:	2302      	movs	r3, #2
   254ac:	f7ff bbd4 	b.w	24c58 <_vfiprintf_r+0x2ac>
   254b0:	4a90      	ldr	r2, [pc, #576]	; (256f4 <_vfiprintf_r+0xd48>)
   254b2:	9209      	str	r2, [sp, #36]	; 0x24
   254b4:	e7e1      	b.n	2547a <_vfiprintf_r+0xace>
   254b6:	4638      	mov	r0, r7
   254b8:	9406      	str	r4, [sp, #24]
   254ba:	f7fd fad7 	bl	22a6c <strlen>
   254be:	2300      	movs	r3, #0
   254c0:	e9cd 3002 	strd	r3, r0, [sp, #8]
   254c4:	f7ff bbee 	b.w	24ca4 <_vfiprintf_r+0x2f8>
   254c8:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   254cc:	2a00      	cmp	r2, #0
   254ce:	f000 8091 	beq.w	255f4 <_vfiprintf_r+0xc48>
   254d2:	2201      	movs	r2, #1
   254d4:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   254d8:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   254dc:	4611      	mov	r1, r2
   254de:	4694      	mov	ip, r2
   254e0:	e9cd 0213 	strd	r0, r2, [sp, #76]	; 0x4c
   254e4:	e43f      	b.n	24d66 <_vfiprintf_r+0x3ba>
   254e6:	f854 2b04 	ldr.w	r2, [r4], #4
   254ea:	9406      	str	r4, [sp, #24]
   254ec:	06f4      	lsls	r4, r6, #27
   254ee:	d407      	bmi.n	25500 <_vfiprintf_r+0xb54>
   254f0:	0670      	lsls	r0, r6, #25
   254f2:	d502      	bpl.n	254fa <_vfiprintf_r+0xb4e>
   254f4:	b294      	uxth	r4, r2
   254f6:	2500      	movs	r5, #0
   254f8:	e7c8      	b.n	2548c <_vfiprintf_r+0xae0>
   254fa:	05b1      	lsls	r1, r6, #22
   254fc:	f100 8097 	bmi.w	2562e <_vfiprintf_r+0xc82>
   25500:	4614      	mov	r4, r2
   25502:	2500      	movs	r5, #0
   25504:	e7c2      	b.n	2548c <_vfiprintf_r+0xae0>
   25506:	9b01      	ldr	r3, [sp, #4]
   25508:	2600      	movs	r6, #0
   2550a:	f8cd 800c 	str.w	r8, [sp, #12]
   2550e:	af3c      	add	r7, sp, #240	; 0xf0
   25510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   25514:	f8cd 901c 	str.w	r9, [sp, #28]
   25518:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2551c:	4698      	mov	r8, r3
   2551e:	e007      	b.n	25530 <_vfiprintf_r+0xb84>
   25520:	f7e7 f99a 	bl	c858 <__aeabi_uldivmod>
   25524:	2d00      	cmp	r5, #0
   25526:	bf08      	it	eq
   25528:	2c0a      	cmpeq	r4, #10
   2552a:	d320      	bcc.n	2556e <_vfiprintf_r+0xbc2>
   2552c:	4604      	mov	r4, r0
   2552e:	460d      	mov	r5, r1
   25530:	220a      	movs	r2, #10
   25532:	2300      	movs	r3, #0
   25534:	4620      	mov	r0, r4
   25536:	4629      	mov	r1, r5
   25538:	f7e7 f98e 	bl	c858 <__aeabi_uldivmod>
   2553c:	4694      	mov	ip, r2
   2553e:	4620      	mov	r0, r4
   25540:	4629      	mov	r1, r5
   25542:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   25546:	220a      	movs	r2, #10
   25548:	2300      	movs	r3, #0
   2554a:	3601      	adds	r6, #1
   2554c:	f807 cc01 	strb.w	ip, [r7, #-1]
   25550:	3f01      	subs	r7, #1
   25552:	f1b8 0f00 	cmp.w	r8, #0
   25556:	d0e3      	beq.n	25520 <_vfiprintf_r+0xb74>
   25558:	f899 c000 	ldrb.w	ip, [r9]
   2555c:	45b4      	cmp	ip, r6
   2555e:	d1df      	bne.n	25520 <_vfiprintf_r+0xb74>
   25560:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   25564:	d0dc      	beq.n	25520 <_vfiprintf_r+0xb74>
   25566:	429d      	cmp	r5, r3
   25568:	bf08      	it	eq
   2556a:	4294      	cmpeq	r4, r2
   2556c:	d268      	bcs.n	25640 <_vfiprintf_r+0xc94>
   2556e:	ab3c      	add	r3, sp, #240	; 0xf0
   25570:	f8dd 800c 	ldr.w	r8, [sp, #12]
   25574:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   25578:	1bdb      	subs	r3, r3, r7
   2557a:	f8dd 901c 	ldr.w	r9, [sp, #28]
   2557e:	9e01      	ldr	r6, [sp, #4]
   25580:	9303      	str	r3, [sp, #12]
   25582:	f7ff bb8f 	b.w	24ca4 <_vfiprintf_r+0x2f8>
   25586:	f899 3001 	ldrb.w	r3, [r9, #1]
   2558a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
   2558e:	f109 0901 	add.w	r9, r9, #1
   25592:	f7ff ba7f 	b.w	24a94 <_vfiprintf_r+0xe8>
   25596:	f899 3001 	ldrb.w	r3, [r9, #1]
   2559a:	f046 0620 	orr.w	r6, r6, #32
   2559e:	f109 0901 	add.w	r9, r9, #1
   255a2:	f7ff ba77 	b.w	24a94 <_vfiprintf_r+0xe8>
   255a6:	9c06      	ldr	r4, [sp, #24]
   255a8:	9a05      	ldr	r2, [sp, #20]
   255aa:	f854 3b04 	ldr.w	r3, [r4], #4
   255ae:	601a      	str	r2, [r3, #0]
   255b0:	9406      	str	r4, [sp, #24]
   255b2:	f7ff ba3d 	b.w	24a30 <_vfiprintf_r+0x84>
   255b6:	9b02      	ldr	r3, [sp, #8]
   255b8:	4f4f      	ldr	r7, [pc, #316]	; (256f8 <_vfiprintf_r+0xd4c>)
   255ba:	2b06      	cmp	r3, #6
   255bc:	9406      	str	r4, [sp, #24]
   255be:	bf28      	it	cs
   255c0:	2306      	movcs	r3, #6
   255c2:	9303      	str	r3, [sp, #12]
   255c4:	9301      	str	r3, [sp, #4]
   255c6:	f7ff bba9 	b.w	24d1c <_vfiprintf_r+0x370>
   255ca:	9c06      	ldr	r4, [sp, #24]
   255cc:	2500      	movs	r5, #0
   255ce:	9b01      	ldr	r3, [sp, #4]
   255d0:	f854 2b04 	ldr.w	r2, [r4], #4
   255d4:	f413 7f00 	tst.w	r3, #512	; 0x200
   255d8:	f04f 0301 	mov.w	r3, #1
   255dc:	9406      	str	r4, [sp, #24]
   255de:	bf14      	ite	ne
   255e0:	b2d4      	uxtbne	r4, r2
   255e2:	4614      	moveq	r4, r2
   255e4:	f7ff bb38 	b.w	24c58 <_vfiprintf_r+0x2ac>
   255e8:	2101      	movs	r1, #1
   255ea:	4662      	mov	r2, ip
   255ec:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   255f0:	f7ff bbdf 	b.w	24db2 <_vfiprintf_r+0x406>
   255f4:	9b07      	ldr	r3, [sp, #28]
   255f6:	2b00      	cmp	r3, #0
   255f8:	f47f adef 	bne.w	251da <_vfiprintf_r+0x82e>
   255fc:	4662      	mov	r2, ip
   255fe:	2101      	movs	r1, #1
   25600:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   25604:	f7ff bbd5 	b.w	24db2 <_vfiprintf_r+0x406>
   25608:	9c06      	ldr	r4, [sp, #24]
   2560a:	9a05      	ldr	r2, [sp, #20]
   2560c:	f854 3b04 	ldr.w	r3, [r4], #4
   25610:	801a      	strh	r2, [r3, #0]
   25612:	9406      	str	r4, [sp, #24]
   25614:	f7ff ba0c 	b.w	24a30 <_vfiprintf_r+0x84>
   25618:	b264      	sxtb	r4, r4
   2561a:	9306      	str	r3, [sp, #24]
   2561c:	17e5      	asrs	r5, r4, #31
   2561e:	4622      	mov	r2, r4
   25620:	462b      	mov	r3, r5
   25622:	f7ff bac6 	b.w	24bb2 <_vfiprintf_r+0x206>
   25626:	b2dc      	uxtb	r4, r3
   25628:	2500      	movs	r5, #0
   2562a:	f7ff bb11 	b.w	24c50 <_vfiprintf_r+0x2a4>
   2562e:	b2d4      	uxtb	r4, r2
   25630:	2500      	movs	r5, #0
   25632:	e72b      	b.n	2548c <_vfiprintf_r+0xae0>
   25634:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   25638:	f001 fb0c 	bl	26c54 <__retarget_lock_release_recursive>
   2563c:	f7ff baee 	b.w	24c1c <_vfiprintf_r+0x270>
   25640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25642:	990b      	ldr	r1, [sp, #44]	; 0x2c
   25644:	1aff      	subs	r7, r7, r3
   25646:	461a      	mov	r2, r3
   25648:	4638      	mov	r0, r7
   2564a:	f7fd fa77 	bl	22b3c <strncpy>
   2564e:	f899 3001 	ldrb.w	r3, [r9, #1]
   25652:	b10b      	cbz	r3, 25658 <_vfiprintf_r+0xcac>
   25654:	f109 0901 	add.w	r9, r9, #1
   25658:	4620      	mov	r0, r4
   2565a:	4629      	mov	r1, r5
   2565c:	220a      	movs	r2, #10
   2565e:	2300      	movs	r3, #0
   25660:	2600      	movs	r6, #0
   25662:	f7e7 f8f9 	bl	c858 <__aeabi_uldivmod>
   25666:	e761      	b.n	2552c <_vfiprintf_r+0xb80>
   25668:	9b02      	ldr	r3, [sp, #8]
   2566a:	9406      	str	r4, [sp, #24]
   2566c:	9303      	str	r3, [sp, #12]
   2566e:	9002      	str	r0, [sp, #8]
   25670:	f7ff bb18 	b.w	24ca4 <_vfiprintf_r+0x2f8>
   25674:	e9dd 2311 	ldrd	r2, r3, [sp, #68]	; 0x44
   25678:	4d20      	ldr	r5, [pc, #128]	; (256fc <_vfiprintf_r+0xd50>)
   2567a:	3201      	adds	r2, #1
   2567c:	e5e9      	b.n	25252 <_vfiprintf_r+0x8a6>
   2567e:	2200      	movs	r2, #0
   25680:	9202      	str	r2, [sp, #8]
   25682:	f7ff ba09 	b.w	24a98 <_vfiprintf_r+0xec>
   25686:	9811      	ldr	r0, [sp, #68]	; 0x44
   25688:	4d1c      	ldr	r5, [pc, #112]	; (256fc <_vfiprintf_r+0xd50>)
   2568a:	3001      	adds	r0, #1
   2568c:	e62d      	b.n	252ea <_vfiprintf_r+0x93e>
   2568e:	ee18 0a10 	vmov	r0, s16
   25692:	aa10      	add	r2, sp, #64	; 0x40
   25694:	4651      	mov	r1, sl
   25696:	f7ff f94f 	bl	24938 <__sprint_r.part.0>
   2569a:	2800      	cmp	r0, #0
   2569c:	f43f ab1f 	beq.w	24cde <_vfiprintf_r+0x332>
   256a0:	f7ff bb1f 	b.w	24ce2 <_vfiprintf_r+0x336>
   256a4:	f04f 33ff 	mov.w	r3, #4294967295
   256a8:	9305      	str	r3, [sp, #20]
   256aa:	f7ff bb25 	b.w	24cf8 <_vfiprintf_r+0x34c>
   256ae:	4608      	mov	r0, r1
   256b0:	4d13      	ldr	r5, [pc, #76]	; (25700 <_vfiprintf_r+0xd54>)
   256b2:	e51c      	b.n	250ee <_vfiprintf_r+0x742>
   256b4:	9a06      	ldr	r2, [sp, #24]
   256b6:	f899 3001 	ldrb.w	r3, [r9, #1]
   256ba:	4689      	mov	r9, r1
   256bc:	f852 1b04 	ldr.w	r1, [r2], #4
   256c0:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   256c4:	9206      	str	r2, [sp, #24]
   256c6:	9102      	str	r1, [sp, #8]
   256c8:	f7ff b9e4 	b.w	24a94 <_vfiprintf_r+0xe8>
   256cc:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   256d0:	07dc      	lsls	r4, r3, #31
   256d2:	d4e7      	bmi.n	256a4 <_vfiprintf_r+0xcf8>
   256d4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   256d8:	0598      	lsls	r0, r3, #22
   256da:	d4e3      	bmi.n	256a4 <_vfiprintf_r+0xcf8>
   256dc:	f04f 33ff 	mov.w	r3, #4294967295
   256e0:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   256e4:	9305      	str	r3, [sp, #20]
   256e6:	f001 fab5 	bl	26c54 <__retarget_lock_release_recursive>
   256ea:	f7ff bb05 	b.w	24cf8 <_vfiprintf_r+0x34c>
   256ee:	bf00      	nop
   256f0:	0002c100 	.word	0x0002c100
   256f4:	0002c0ec 	.word	0x0002c0ec
   256f8:	0002c114 	.word	0x0002c114
   256fc:	0002c16c 	.word	0x0002c16c
   25700:	0002c17c 	.word	0x0002c17c

00025704 <__sbprintf>:
   25704:	b5f0      	push	{r4, r5, r6, r7, lr}
   25706:	460c      	mov	r4, r1
   25708:	8989      	ldrh	r1, [r1, #12]
   2570a:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
   2570e:	2700      	movs	r7, #0
   25710:	f021 0102 	bic.w	r1, r1, #2
   25714:	4606      	mov	r6, r0
   25716:	ad1c      	add	r5, sp, #112	; 0x70
   25718:	9708      	str	r7, [sp, #32]
   2571a:	f8ad 1014 	strh.w	r1, [sp, #20]
   2571e:	f44f 6780 	mov.w	r7, #1024	; 0x400
   25722:	89e1      	ldrh	r1, [r4, #14]
   25724:	a818      	add	r0, sp, #96	; 0x60
   25726:	9502      	str	r5, [sp, #8]
   25728:	f8ad 1016 	strh.w	r1, [sp, #22]
   2572c:	69e1      	ldr	r1, [r4, #28]
   2572e:	9506      	str	r5, [sp, #24]
   25730:	9109      	str	r1, [sp, #36]	; 0x24
   25732:	6a61      	ldr	r1, [r4, #36]	; 0x24
   25734:	9704      	str	r7, [sp, #16]
   25736:	910b      	str	r1, [sp, #44]	; 0x2c
   25738:	9707      	str	r7, [sp, #28]
   2573a:	e9cd 3200 	strd	r3, r2, [sp]
   2573e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   25740:	931b      	str	r3, [sp, #108]	; 0x6c
   25742:	f001 fa81 	bl	26c48 <__retarget_lock_init_recursive>
   25746:	a902      	add	r1, sp, #8
   25748:	4630      	mov	r0, r6
   2574a:	e9dd 3200 	ldrd	r3, r2, [sp]
   2574e:	f7ff f92d 	bl	249ac <_vfiprintf_r>
   25752:	1e05      	subs	r5, r0, #0
   25754:	db07      	blt.n	25766 <__sbprintf+0x62>
   25756:	4630      	mov	r0, r6
   25758:	a902      	add	r1, sp, #8
   2575a:	f000 fa51 	bl	25c00 <_fflush_r>
   2575e:	2800      	cmp	r0, #0
   25760:	bf18      	it	ne
   25762:	f04f 35ff 	movne.w	r5, #4294967295
   25766:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2576a:	065b      	lsls	r3, r3, #25
   2576c:	d503      	bpl.n	25776 <__sbprintf+0x72>
   2576e:	89a3      	ldrh	r3, [r4, #12]
   25770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25774:	81a3      	strh	r3, [r4, #12]
   25776:	9818      	ldr	r0, [sp, #96]	; 0x60
   25778:	f001 fa68 	bl	26c4c <__retarget_lock_close_recursive>
   2577c:	4628      	mov	r0, r5
   2577e:	f20d 4d74 	addw	sp, sp, #1140	; 0x474
   25782:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025784 <_vsnprintf_r>:
   25784:	b570      	push	{r4, r5, r6, lr}
   25786:	1e14      	subs	r4, r2, #0
   25788:	b09a      	sub	sp, #104	; 0x68
   2578a:	4605      	mov	r5, r0
   2578c:	db2c      	blt.n	257e8 <_vsnprintf_r+0x64>
   2578e:	f44f 7202 	mov.w	r2, #520	; 0x208
   25792:	9100      	str	r1, [sp, #0]
   25794:	9104      	str	r1, [sp, #16]
   25796:	f8ad 200c 	strh.w	r2, [sp, #12]
   2579a:	d014      	beq.n	257c6 <_vsnprintf_r+0x42>
   2579c:	3c01      	subs	r4, #1
   2579e:	f64f 76ff 	movw	r6, #65535	; 0xffff
   257a2:	461a      	mov	r2, r3
   257a4:	4669      	mov	r1, sp
   257a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   257a8:	9402      	str	r4, [sp, #8]
   257aa:	9405      	str	r4, [sp, #20]
   257ac:	f8ad 600e 	strh.w	r6, [sp, #14]
   257b0:	f7e9 f896 	bl	e8e0 <_svfprintf_r>
   257b4:	1c42      	adds	r2, r0, #1
   257b6:	da01      	bge.n	257bc <_vsnprintf_r+0x38>
   257b8:	238b      	movs	r3, #139	; 0x8b
   257ba:	602b      	str	r3, [r5, #0]
   257bc:	9b00      	ldr	r3, [sp, #0]
   257be:	2200      	movs	r2, #0
   257c0:	701a      	strb	r2, [r3, #0]
   257c2:	b01a      	add	sp, #104	; 0x68
   257c4:	bd70      	pop	{r4, r5, r6, pc}
   257c6:	f64f 76ff 	movw	r6, #65535	; 0xffff
   257ca:	461a      	mov	r2, r3
   257cc:	4669      	mov	r1, sp
   257ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   257d0:	9402      	str	r4, [sp, #8]
   257d2:	9405      	str	r4, [sp, #20]
   257d4:	f8ad 600e 	strh.w	r6, [sp, #14]
   257d8:	f7e9 f882 	bl	e8e0 <_svfprintf_r>
   257dc:	1c43      	adds	r3, r0, #1
   257de:	da01      	bge.n	257e4 <_vsnprintf_r+0x60>
   257e0:	238b      	movs	r3, #139	; 0x8b
   257e2:	602b      	str	r3, [r5, #0]
   257e4:	b01a      	add	sp, #104	; 0x68
   257e6:	bd70      	pop	{r4, r5, r6, pc}
   257e8:	238b      	movs	r3, #139	; 0x8b
   257ea:	f04f 30ff 	mov.w	r0, #4294967295
   257ee:	602b      	str	r3, [r5, #0]
   257f0:	e7f8      	b.n	257e4 <_vsnprintf_r+0x60>
   257f2:	bf00      	nop

000257f4 <vsnprintf>:
   257f4:	b570      	push	{r4, r5, r6, lr}
   257f6:	460e      	mov	r6, r1
   257f8:	b082      	sub	sp, #8
   257fa:	4615      	mov	r5, r2
   257fc:	4c04      	ldr	r4, [pc, #16]	; (25810 <vsnprintf+0x1c>)
   257fe:	4601      	mov	r1, r0
   25800:	9300      	str	r3, [sp, #0]
   25802:	4632      	mov	r2, r6
   25804:	462b      	mov	r3, r5
   25806:	6820      	ldr	r0, [r4, #0]
   25808:	f7ff ffbc 	bl	25784 <_vsnprintf_r>
   2580c:	b002      	add	sp, #8
   2580e:	bd70      	pop	{r4, r5, r6, pc}
   25810:	200204d8 	.word	0x200204d8

00025814 <_vsprintf_r>:
   25814:	b570      	push	{r4, r5, r6, lr}
   25816:	b09a      	sub	sp, #104	; 0x68
   25818:	460c      	mov	r4, r1
   2581a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   2581e:	4e07      	ldr	r6, [pc, #28]	; (2583c <_vsprintf_r+0x28>)
   25820:	4669      	mov	r1, sp
   25822:	9400      	str	r4, [sp, #0]
   25824:	9505      	str	r5, [sp, #20]
   25826:	9502      	str	r5, [sp, #8]
   25828:	e9cd 6403 	strd	r6, r4, [sp, #12]
   2582c:	f7e9 f858 	bl	e8e0 <_svfprintf_r>
   25830:	9b00      	ldr	r3, [sp, #0]
   25832:	2200      	movs	r2, #0
   25834:	701a      	strb	r2, [r3, #0]
   25836:	b01a      	add	sp, #104	; 0x68
   25838:	bd70      	pop	{r4, r5, r6, pc}
   2583a:	bf00      	nop
   2583c:	ffff0208 	.word	0xffff0208

00025840 <vsprintf>:
   25840:	b430      	push	{r4, r5}
   25842:	460d      	mov	r5, r1
   25844:	4c03      	ldr	r4, [pc, #12]	; (25854 <vsprintf+0x14>)
   25846:	4613      	mov	r3, r2
   25848:	4601      	mov	r1, r0
   2584a:	462a      	mov	r2, r5
   2584c:	6820      	ldr	r0, [r4, #0]
   2584e:	bc30      	pop	{r4, r5}
   25850:	f7ff bfe0 	b.w	25814 <_vsprintf_r>
   25854:	200204d8 	.word	0x200204d8

00025858 <_write_r>:
   25858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2585a:	460f      	mov	r7, r1
   2585c:	4d08      	ldr	r5, [pc, #32]	; (25880 <_write_r+0x28>)
   2585e:	2600      	movs	r6, #0
   25860:	4611      	mov	r1, r2
   25862:	4604      	mov	r4, r0
   25864:	461a      	mov	r2, r3
   25866:	4638      	mov	r0, r7
   25868:	602e      	str	r6, [r5, #0]
   2586a:	f003 fd89 	bl	29380 <_write>
   2586e:	1c43      	adds	r3, r0, #1
   25870:	d000      	beq.n	25874 <_write_r+0x1c>
   25872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25874:	682b      	ldr	r3, [r5, #0]
   25876:	2b00      	cmp	r3, #0
   25878:	d0fb      	beq.n	25872 <_write_r+0x1a>
   2587a:	6023      	str	r3, [r4, #0]
   2587c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2587e:	bf00      	nop
   25880:	200251ac 	.word	0x200251ac

00025884 <__swsetup_r>:
   25884:	b538      	push	{r3, r4, r5, lr}
   25886:	4b32      	ldr	r3, [pc, #200]	; (25950 <__swsetup_r+0xcc>)
   25888:	4605      	mov	r5, r0
   2588a:	460c      	mov	r4, r1
   2588c:	681b      	ldr	r3, [r3, #0]
   2588e:	b113      	cbz	r3, 25896 <__swsetup_r+0x12>
   25890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   25892:	2a00      	cmp	r2, #0
   25894:	d036      	beq.n	25904 <__swsetup_r+0x80>
   25896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2589a:	0718      	lsls	r0, r3, #28
   2589c:	b29a      	uxth	r2, r3
   2589e:	d50c      	bpl.n	258ba <__swsetup_r+0x36>
   258a0:	6921      	ldr	r1, [r4, #16]
   258a2:	b1a9      	cbz	r1, 258d0 <__swsetup_r+0x4c>
   258a4:	f012 0001 	ands.w	r0, r2, #1
   258a8:	d022      	beq.n	258f0 <__swsetup_r+0x6c>
   258aa:	6960      	ldr	r0, [r4, #20]
   258ac:	2500      	movs	r5, #0
   258ae:	4240      	negs	r0, r0
   258b0:	60a5      	str	r5, [r4, #8]
   258b2:	61a0      	str	r0, [r4, #24]
   258b4:	b311      	cbz	r1, 258fc <__swsetup_r+0x78>
   258b6:	2000      	movs	r0, #0
   258b8:	bd38      	pop	{r3, r4, r5, pc}
   258ba:	06d1      	lsls	r1, r2, #27
   258bc:	d53a      	bpl.n	25934 <__swsetup_r+0xb0>
   258be:	0752      	lsls	r2, r2, #29
   258c0:	d424      	bmi.n	2590c <__swsetup_r+0x88>
   258c2:	6921      	ldr	r1, [r4, #16]
   258c4:	f043 0308 	orr.w	r3, r3, #8
   258c8:	b29a      	uxth	r2, r3
   258ca:	81a3      	strh	r3, [r4, #12]
   258cc:	2900      	cmp	r1, #0
   258ce:	d1e9      	bne.n	258a4 <__swsetup_r+0x20>
   258d0:	f402 7020 	and.w	r0, r2, #640	; 0x280
   258d4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   258d8:	d0e4      	beq.n	258a4 <__swsetup_r+0x20>
   258da:	4628      	mov	r0, r5
   258dc:	4621      	mov	r1, r4
   258de:	f001 f9ff 	bl	26ce0 <__smakebuf_r>
   258e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   258e6:	6921      	ldr	r1, [r4, #16]
   258e8:	b29a      	uxth	r2, r3
   258ea:	f012 0001 	ands.w	r0, r2, #1
   258ee:	d1dc      	bne.n	258aa <__swsetup_r+0x26>
   258f0:	0795      	lsls	r5, r2, #30
   258f2:	bf58      	it	pl
   258f4:	6960      	ldrpl	r0, [r4, #20]
   258f6:	60a0      	str	r0, [r4, #8]
   258f8:	2900      	cmp	r1, #0
   258fa:	d1dc      	bne.n	258b6 <__swsetup_r+0x32>
   258fc:	0612      	lsls	r2, r2, #24
   258fe:	d421      	bmi.n	25944 <__swsetup_r+0xc0>
   25900:	4608      	mov	r0, r1
   25902:	bd38      	pop	{r3, r4, r5, pc}
   25904:	4618      	mov	r0, r3
   25906:	f000 f9d9 	bl	25cbc <__sinit>
   2590a:	e7c4      	b.n	25896 <__swsetup_r+0x12>
   2590c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2590e:	b151      	cbz	r1, 25926 <__swsetup_r+0xa2>
   25910:	f104 0240 	add.w	r2, r4, #64	; 0x40
   25914:	4291      	cmp	r1, r2
   25916:	d004      	beq.n	25922 <__swsetup_r+0x9e>
   25918:	4628      	mov	r0, r5
   2591a:	f000 fadf 	bl	25edc <_free_r>
   2591e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25922:	2200      	movs	r2, #0
   25924:	6322      	str	r2, [r4, #48]	; 0x30
   25926:	2200      	movs	r2, #0
   25928:	6921      	ldr	r1, [r4, #16]
   2592a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   2592e:	e9c4 1200 	strd	r1, r2, [r4]
   25932:	e7c7      	b.n	258c4 <__swsetup_r+0x40>
   25934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25938:	2209      	movs	r2, #9
   2593a:	f04f 30ff 	mov.w	r0, #4294967295
   2593e:	602a      	str	r2, [r5, #0]
   25940:	81a3      	strh	r3, [r4, #12]
   25942:	bd38      	pop	{r3, r4, r5, pc}
   25944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25948:	f04f 30ff 	mov.w	r0, #4294967295
   2594c:	81a3      	strh	r3, [r4, #12]
   2594e:	bd38      	pop	{r3, r4, r5, pc}
   25950:	200204d8 	.word	0x200204d8

00025954 <abort>:
   25954:	2006      	movs	r0, #6
   25956:	b508      	push	{r3, lr}
   25958:	f002 f876 	bl	27a48 <raise>
   2595c:	2001      	movs	r0, #1
   2595e:	f7ee fc95 	bl	1428c <_exit>
   25962:	bf00      	nop

00025964 <_close_r>:
   25964:	b538      	push	{r3, r4, r5, lr}
   25966:	2200      	movs	r2, #0
   25968:	4d06      	ldr	r5, [pc, #24]	; (25984 <_close_r+0x20>)
   2596a:	4604      	mov	r4, r0
   2596c:	4608      	mov	r0, r1
   2596e:	602a      	str	r2, [r5, #0]
   25970:	f003 fd0a 	bl	29388 <_close>
   25974:	1c43      	adds	r3, r0, #1
   25976:	d000      	beq.n	2597a <_close_r+0x16>
   25978:	bd38      	pop	{r3, r4, r5, pc}
   2597a:	682b      	ldr	r3, [r5, #0]
   2597c:	2b00      	cmp	r3, #0
   2597e:	d0fb      	beq.n	25978 <_close_r+0x14>
   25980:	6023      	str	r3, [r4, #0]
   25982:	bd38      	pop	{r3, r4, r5, pc}
   25984:	200251ac 	.word	0x200251ac

00025988 <quorem>:
   25988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2598c:	6903      	ldr	r3, [r0, #16]
   2598e:	b085      	sub	sp, #20
   25990:	690c      	ldr	r4, [r1, #16]
   25992:	9101      	str	r1, [sp, #4]
   25994:	42a3      	cmp	r3, r4
   25996:	f2c0 808c 	blt.w	25ab2 <quorem+0x12a>
   2599a:	3c01      	subs	r4, #1
   2599c:	f101 0514 	add.w	r5, r1, #20
   259a0:	f100 0914 	add.w	r9, r0, #20
   259a4:	4682      	mov	sl, r0
   259a6:	00a2      	lsls	r2, r4, #2
   259a8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   259ac:	eb09 0184 	add.w	r1, r9, r4, lsl #2
   259b0:	3301      	adds	r3, #1
   259b2:	9202      	str	r2, [sp, #8]
   259b4:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
   259b8:	eb05 0884 	add.w	r8, r5, r4, lsl #2
   259bc:	9103      	str	r1, [sp, #12]
   259be:	429a      	cmp	r2, r3
   259c0:	fbb2 f6f3 	udiv	r6, r2, r3
   259c4:	d33c      	bcc.n	25a40 <quorem+0xb8>
   259c6:	2300      	movs	r3, #0
   259c8:	4628      	mov	r0, r5
   259ca:	464f      	mov	r7, r9
   259cc:	461a      	mov	r2, r3
   259ce:	f850 1b04 	ldr.w	r1, [r0], #4
   259d2:	f8d7 e000 	ldr.w	lr, [r7]
   259d6:	fa1f fc81 	uxth.w	ip, r1
   259da:	4580      	cmp	r8, r0
   259dc:	ea4f 4111 	mov.w	r1, r1, lsr #16
   259e0:	fb06 3c0c 	mla	ip, r6, ip, r3
   259e4:	fa1f fb8e 	uxth.w	fp, lr
   259e8:	ea4f 431c 	mov.w	r3, ip, lsr #16
   259ec:	fa1f fc8c 	uxth.w	ip, ip
   259f0:	fb06 3301 	mla	r3, r6, r1, r3
   259f4:	eba2 010c 	sub.w	r1, r2, ip
   259f8:	b29a      	uxth	r2, r3
   259fa:	4459      	add	r1, fp
   259fc:	ea4f 4313 	mov.w	r3, r3, lsr #16
   25a00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   25a04:	fa1f fc81 	uxth.w	ip, r1
   25a08:	eb02 4221 	add.w	r2, r2, r1, asr #16
   25a0c:	ea4c 4102 	orr.w	r1, ip, r2, lsl #16
   25a10:	ea4f 4222 	mov.w	r2, r2, asr #16
   25a14:	f847 1b04 	str.w	r1, [r7], #4
   25a18:	d2d9      	bcs.n	259ce <quorem+0x46>
   25a1a:	9b02      	ldr	r3, [sp, #8]
   25a1c:	f859 3003 	ldr.w	r3, [r9, r3]
   25a20:	b973      	cbnz	r3, 25a40 <quorem+0xb8>
   25a22:	9b03      	ldr	r3, [sp, #12]
   25a24:	3b04      	subs	r3, #4
   25a26:	4599      	cmp	r9, r3
   25a28:	d304      	bcc.n	25a34 <quorem+0xac>
   25a2a:	e007      	b.n	25a3c <quorem+0xb4>
   25a2c:	4599      	cmp	r9, r3
   25a2e:	f104 34ff 	add.w	r4, r4, #4294967295
   25a32:	d203      	bcs.n	25a3c <quorem+0xb4>
   25a34:	f853 2904 	ldr.w	r2, [r3], #-4
   25a38:	2a00      	cmp	r2, #0
   25a3a:	d0f7      	beq.n	25a2c <quorem+0xa4>
   25a3c:	f8ca 4010 	str.w	r4, [sl, #16]
   25a40:	9901      	ldr	r1, [sp, #4]
   25a42:	4650      	mov	r0, sl
   25a44:	f001 fcf2 	bl	2742c <__mcmp>
   25a48:	2800      	cmp	r0, #0
   25a4a:	db2e      	blt.n	25aaa <quorem+0x122>
   25a4c:	3601      	adds	r6, #1
   25a4e:	4648      	mov	r0, r9
   25a50:	2200      	movs	r2, #0
   25a52:	f855 1b04 	ldr.w	r1, [r5], #4
   25a56:	f8d0 c000 	ldr.w	ip, [r0]
   25a5a:	b28b      	uxth	r3, r1
   25a5c:	45a8      	cmp	r8, r5
   25a5e:	ea4f 4111 	mov.w	r1, r1, lsr #16
   25a62:	eba2 0303 	sub.w	r3, r2, r3
   25a66:	fa1f f28c 	uxth.w	r2, ip
   25a6a:	ebc1 411c 	rsb	r1, r1, ip, lsr #16
   25a6e:	4413      	add	r3, r2
   25a70:	eb01 4123 	add.w	r1, r1, r3, asr #16
   25a74:	b29b      	uxth	r3, r3
   25a76:	ea4f 4221 	mov.w	r2, r1, asr #16
   25a7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   25a7e:	f840 3b04 	str.w	r3, [r0], #4
   25a82:	d2e6      	bcs.n	25a52 <quorem+0xca>
   25a84:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
   25a88:	eb09 0384 	add.w	r3, r9, r4, lsl #2
   25a8c:	b96a      	cbnz	r2, 25aaa <quorem+0x122>
   25a8e:	3b04      	subs	r3, #4
   25a90:	4599      	cmp	r9, r3
   25a92:	d304      	bcc.n	25a9e <quorem+0x116>
   25a94:	e007      	b.n	25aa6 <quorem+0x11e>
   25a96:	4599      	cmp	r9, r3
   25a98:	f104 34ff 	add.w	r4, r4, #4294967295
   25a9c:	d203      	bcs.n	25aa6 <quorem+0x11e>
   25a9e:	f853 2904 	ldr.w	r2, [r3], #-4
   25aa2:	2a00      	cmp	r2, #0
   25aa4:	d0f7      	beq.n	25a96 <quorem+0x10e>
   25aa6:	f8ca 4010 	str.w	r4, [sl, #16]
   25aaa:	4630      	mov	r0, r6
   25aac:	b005      	add	sp, #20
   25aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25ab2:	2000      	movs	r0, #0
   25ab4:	b005      	add	sp, #20
   25ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25aba:	bf00      	nop

00025abc <__sflush_r>:
   25abc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   25ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25ac4:	460d      	mov	r5, r1
   25ac6:	0711      	lsls	r1, r2, #28
   25ac8:	4680      	mov	r8, r0
   25aca:	d431      	bmi.n	25b30 <__sflush_r+0x74>
   25acc:	686b      	ldr	r3, [r5, #4]
   25ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   25ad2:	2b00      	cmp	r3, #0
   25ad4:	81aa      	strh	r2, [r5, #12]
   25ad6:	dd48      	ble.n	25b6a <__sflush_r+0xae>
   25ad8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   25ada:	2c00      	cmp	r4, #0
   25adc:	d042      	beq.n	25b64 <__sflush_r+0xa8>
   25ade:	2100      	movs	r1, #0
   25ae0:	b293      	uxth	r3, r2
   25ae2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   25ae6:	f8d8 6000 	ldr.w	r6, [r8]
   25aea:	f8c8 1000 	str.w	r1, [r8]
   25aee:	d140      	bne.n	25b72 <__sflush_r+0xb6>
   25af0:	2301      	movs	r3, #1
   25af2:	69e9      	ldr	r1, [r5, #28]
   25af4:	4640      	mov	r0, r8
   25af6:	47a0      	blx	r4
   25af8:	1c43      	adds	r3, r0, #1
   25afa:	d073      	beq.n	25be4 <__sflush_r+0x128>
   25afc:	89ab      	ldrh	r3, [r5, #12]
   25afe:	6aac      	ldr	r4, [r5, #40]	; 0x28
   25b00:	075f      	lsls	r7, r3, #29
   25b02:	d505      	bpl.n	25b10 <__sflush_r+0x54>
   25b04:	686a      	ldr	r2, [r5, #4]
   25b06:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   25b08:	1a80      	subs	r0, r0, r2
   25b0a:	b10b      	cbz	r3, 25b10 <__sflush_r+0x54>
   25b0c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   25b0e:	1ac0      	subs	r0, r0, r3
   25b10:	4602      	mov	r2, r0
   25b12:	2300      	movs	r3, #0
   25b14:	69e9      	ldr	r1, [r5, #28]
   25b16:	4640      	mov	r0, r8
   25b18:	47a0      	blx	r4
   25b1a:	1c44      	adds	r4, r0, #1
   25b1c:	d133      	bne.n	25b86 <__sflush_r+0xca>
   25b1e:	f8d8 4000 	ldr.w	r4, [r8]
   25b22:	2c1d      	cmp	r4, #29
   25b24:	d94b      	bls.n	25bbe <__sflush_r+0x102>
   25b26:	89ab      	ldrh	r3, [r5, #12]
   25b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25b2c:	81ab      	strh	r3, [r5, #12]
   25b2e:	e01a      	b.n	25b66 <__sflush_r+0xaa>
   25b30:	692f      	ldr	r7, [r5, #16]
   25b32:	b1bf      	cbz	r7, 25b64 <__sflush_r+0xa8>
   25b34:	b293      	uxth	r3, r2
   25b36:	682e      	ldr	r6, [r5, #0]
   25b38:	602f      	str	r7, [r5, #0]
   25b3a:	0799      	lsls	r1, r3, #30
   25b3c:	eba6 0607 	sub.w	r6, r6, r7
   25b40:	bf0c      	ite	eq
   25b42:	696b      	ldreq	r3, [r5, #20]
   25b44:	2300      	movne	r3, #0
   25b46:	60ab      	str	r3, [r5, #8]
   25b48:	e00a      	b.n	25b60 <__sflush_r+0xa4>
   25b4a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   25b4c:	4633      	mov	r3, r6
   25b4e:	463a      	mov	r2, r7
   25b50:	69e9      	ldr	r1, [r5, #28]
   25b52:	4640      	mov	r0, r8
   25b54:	47a0      	blx	r4
   25b56:	1e04      	subs	r4, r0, #0
   25b58:	eba6 0604 	sub.w	r6, r6, r4
   25b5c:	4427      	add	r7, r4
   25b5e:	dd0a      	ble.n	25b76 <__sflush_r+0xba>
   25b60:	2e00      	cmp	r6, #0
   25b62:	dcf2      	bgt.n	25b4a <__sflush_r+0x8e>
   25b64:	2000      	movs	r0, #0
   25b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25b6a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   25b6c:	2b00      	cmp	r3, #0
   25b6e:	dcb3      	bgt.n	25ad8 <__sflush_r+0x1c>
   25b70:	e7f8      	b.n	25b64 <__sflush_r+0xa8>
   25b72:	6d28      	ldr	r0, [r5, #80]	; 0x50
   25b74:	e7c4      	b.n	25b00 <__sflush_r+0x44>
   25b76:	89ab      	ldrh	r3, [r5, #12]
   25b78:	f04f 30ff 	mov.w	r0, #4294967295
   25b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25b80:	81ab      	strh	r3, [r5, #12]
   25b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25b86:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   25b8a:	2100      	movs	r1, #0
   25b8c:	692a      	ldr	r2, [r5, #16]
   25b8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   25b92:	e9c5 2100 	strd	r2, r1, [r5]
   25b96:	04da      	lsls	r2, r3, #19
   25b98:	81ab      	strh	r3, [r5, #12]
   25b9a:	d500      	bpl.n	25b9e <__sflush_r+0xe2>
   25b9c:	6528      	str	r0, [r5, #80]	; 0x50
   25b9e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   25ba0:	f8c8 6000 	str.w	r6, [r8]
   25ba4:	2900      	cmp	r1, #0
   25ba6:	d0dd      	beq.n	25b64 <__sflush_r+0xa8>
   25ba8:	f105 0340 	add.w	r3, r5, #64	; 0x40
   25bac:	4299      	cmp	r1, r3
   25bae:	d002      	beq.n	25bb6 <__sflush_r+0xfa>
   25bb0:	4640      	mov	r0, r8
   25bb2:	f000 f993 	bl	25edc <_free_r>
   25bb6:	2000      	movs	r0, #0
   25bb8:	6328      	str	r0, [r5, #48]	; 0x30
   25bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25bbe:	4a0f      	ldr	r2, [pc, #60]	; (25bfc <__sflush_r+0x140>)
   25bc0:	40e2      	lsrs	r2, r4
   25bc2:	43d2      	mvns	r2, r2
   25bc4:	f012 0201 	ands.w	r2, r2, #1
   25bc8:	d1ad      	bne.n	25b26 <__sflush_r+0x6a>
   25bca:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   25bce:	6929      	ldr	r1, [r5, #16]
   25bd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   25bd4:	81ab      	strh	r3, [r5, #12]
   25bd6:	04db      	lsls	r3, r3, #19
   25bd8:	e9c5 1200 	strd	r1, r2, [r5]
   25bdc:	d5df      	bpl.n	25b9e <__sflush_r+0xe2>
   25bde:	2c00      	cmp	r4, #0
   25be0:	d1dd      	bne.n	25b9e <__sflush_r+0xe2>
   25be2:	e7db      	b.n	25b9c <__sflush_r+0xe0>
   25be4:	f8d8 3000 	ldr.w	r3, [r8]
   25be8:	2b00      	cmp	r3, #0
   25bea:	d087      	beq.n	25afc <__sflush_r+0x40>
   25bec:	2b1d      	cmp	r3, #29
   25bee:	d001      	beq.n	25bf4 <__sflush_r+0x138>
   25bf0:	2b16      	cmp	r3, #22
   25bf2:	d198      	bne.n	25b26 <__sflush_r+0x6a>
   25bf4:	f8c8 6000 	str.w	r6, [r8]
   25bf8:	e7b4      	b.n	25b64 <__sflush_r+0xa8>
   25bfa:	bf00      	nop
   25bfc:	20400001 	.word	0x20400001

00025c00 <_fflush_r>:
   25c00:	b538      	push	{r3, r4, r5, lr}
   25c02:	460c      	mov	r4, r1
   25c04:	4605      	mov	r5, r0
   25c06:	b108      	cbz	r0, 25c0c <_fflush_r+0xc>
   25c08:	6b83      	ldr	r3, [r0, #56]	; 0x38
   25c0a:	b1a3      	cbz	r3, 25c36 <_fflush_r+0x36>
   25c0c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   25c10:	b1b8      	cbz	r0, 25c42 <_fflush_r+0x42>
   25c12:	6e63      	ldr	r3, [r4, #100]	; 0x64
   25c14:	07db      	lsls	r3, r3, #31
   25c16:	d401      	bmi.n	25c1c <_fflush_r+0x1c>
   25c18:	0581      	lsls	r1, r0, #22
   25c1a:	d515      	bpl.n	25c48 <_fflush_r+0x48>
   25c1c:	4628      	mov	r0, r5
   25c1e:	4621      	mov	r1, r4
   25c20:	f7ff ff4c 	bl	25abc <__sflush_r>
   25c24:	6e63      	ldr	r3, [r4, #100]	; 0x64
   25c26:	4605      	mov	r5, r0
   25c28:	07da      	lsls	r2, r3, #31
   25c2a:	d402      	bmi.n	25c32 <_fflush_r+0x32>
   25c2c:	89a3      	ldrh	r3, [r4, #12]
   25c2e:	059b      	lsls	r3, r3, #22
   25c30:	d50e      	bpl.n	25c50 <_fflush_r+0x50>
   25c32:	4628      	mov	r0, r5
   25c34:	bd38      	pop	{r3, r4, r5, pc}
   25c36:	f000 f841 	bl	25cbc <__sinit>
   25c3a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   25c3e:	2800      	cmp	r0, #0
   25c40:	d1e7      	bne.n	25c12 <_fflush_r+0x12>
   25c42:	4605      	mov	r5, r0
   25c44:	4628      	mov	r0, r5
   25c46:	bd38      	pop	{r3, r4, r5, pc}
   25c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
   25c4a:	f001 f801 	bl	26c50 <__retarget_lock_acquire_recursive>
   25c4e:	e7e5      	b.n	25c1c <_fflush_r+0x1c>
   25c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
   25c52:	f000 ffff 	bl	26c54 <__retarget_lock_release_recursive>
   25c56:	4628      	mov	r0, r5
   25c58:	bd38      	pop	{r3, r4, r5, pc}
   25c5a:	bf00      	nop

00025c5c <std>:
   25c5c:	b538      	push	{r3, r4, r5, lr}
   25c5e:	4604      	mov	r4, r0
   25c60:	4613      	mov	r3, r2
   25c62:	460d      	mov	r5, r1
   25c64:	2100      	movs	r1, #0
   25c66:	2208      	movs	r2, #8
   25c68:	305c      	adds	r0, #92	; 0x5c
   25c6a:	f820 5c50 	strh.w	r5, [r0, #-80]
   25c6e:	81e3      	strh	r3, [r4, #14]
   25c70:	60a1      	str	r1, [r4, #8]
   25c72:	6661      	str	r1, [r4, #100]	; 0x64
   25c74:	61a1      	str	r1, [r4, #24]
   25c76:	4d0a      	ldr	r5, [pc, #40]	; (25ca0 <std+0x44>)
   25c78:	e9c4 1100 	strd	r1, r1, [r4]
   25c7c:	e9c4 1104 	strd	r1, r1, [r4, #16]
   25c80:	f7fc fae4 	bl	2224c <memset>
   25c84:	4b07      	ldr	r3, [pc, #28]	; (25ca4 <std+0x48>)
   25c86:	4908      	ldr	r1, [pc, #32]	; (25ca8 <std+0x4c>)
   25c88:	f104 0058 	add.w	r0, r4, #88	; 0x58
   25c8c:	4a07      	ldr	r2, [pc, #28]	; (25cac <std+0x50>)
   25c8e:	62e3      	str	r3, [r4, #44]	; 0x2c
   25c90:	e9c4 4507 	strd	r4, r5, [r4, #28]
   25c94:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   25c98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25c9c:	f000 bfd4 	b.w	26c48 <__retarget_lock_init_recursive>
   25ca0:	0002284d 	.word	0x0002284d
   25ca4:	000228d9 	.word	0x000228d9
   25ca8:	00022875 	.word	0x00022875
   25cac:	000228b5 	.word	0x000228b5

00025cb0 <_cleanup_r>:
   25cb0:	4901      	ldr	r1, [pc, #4]	; (25cb8 <_cleanup_r+0x8>)
   25cb2:	f000 bb8f 	b.w	263d4 <_fwalk_reent>
   25cb6:	bf00      	nop
   25cb8:	0002821d 	.word	0x0002821d

00025cbc <__sinit>:
   25cbc:	b510      	push	{r4, lr}
   25cbe:	4604      	mov	r4, r0
   25cc0:	4814      	ldr	r0, [pc, #80]	; (25d14 <__sinit+0x58>)
   25cc2:	f000 ffc5 	bl	26c50 <__retarget_lock_acquire_recursive>
   25cc6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   25cc8:	b9fa      	cbnz	r2, 25d0a <__sinit+0x4e>
   25cca:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   25cce:	4812      	ldr	r0, [pc, #72]	; (25d18 <__sinit+0x5c>)
   25cd0:	2103      	movs	r1, #3
   25cd2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   25cd6:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   25cda:	63e0      	str	r0, [r4, #60]	; 0x3c
   25cdc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   25ce0:	2104      	movs	r1, #4
   25ce2:	6860      	ldr	r0, [r4, #4]
   25ce4:	f7ff ffba 	bl	25c5c <std>
   25ce8:	68a0      	ldr	r0, [r4, #8]
   25cea:	2201      	movs	r2, #1
   25cec:	2109      	movs	r1, #9
   25cee:	f7ff ffb5 	bl	25c5c <std>
   25cf2:	68e0      	ldr	r0, [r4, #12]
   25cf4:	2202      	movs	r2, #2
   25cf6:	2112      	movs	r1, #18
   25cf8:	f7ff ffb0 	bl	25c5c <std>
   25cfc:	2301      	movs	r3, #1
   25cfe:	4805      	ldr	r0, [pc, #20]	; (25d14 <__sinit+0x58>)
   25d00:	63a3      	str	r3, [r4, #56]	; 0x38
   25d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25d06:	f000 bfa5 	b.w	26c54 <__retarget_lock_release_recursive>
   25d0a:	4802      	ldr	r0, [pc, #8]	; (25d14 <__sinit+0x58>)
   25d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25d10:	f000 bfa0 	b.w	26c54 <__retarget_lock_release_recursive>
   25d14:	20025194 	.word	0x20025194
   25d18:	00025cb1 	.word	0x00025cb1

00025d1c <__sfp_lock_acquire>:
   25d1c:	4801      	ldr	r0, [pc, #4]	; (25d24 <__sfp_lock_acquire+0x8>)
   25d1e:	f000 bf97 	b.w	26c50 <__retarget_lock_acquire_recursive>
   25d22:	bf00      	nop
   25d24:	200251a8 	.word	0x200251a8

00025d28 <__sfp_lock_release>:
   25d28:	4801      	ldr	r0, [pc, #4]	; (25d30 <__sfp_lock_release+0x8>)
   25d2a:	f000 bf93 	b.w	26c54 <__retarget_lock_release_recursive>
   25d2e:	bf00      	nop
   25d30:	200251a8 	.word	0x200251a8

00025d34 <__fputwc>:
   25d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25d38:	b082      	sub	sp, #8
   25d3a:	4680      	mov	r8, r0
   25d3c:	4689      	mov	r9, r1
   25d3e:	4614      	mov	r4, r2
   25d40:	f000 ff78 	bl	26c34 <__locale_mb_cur_max>
   25d44:	2801      	cmp	r0, #1
   25d46:	d103      	bne.n	25d50 <__fputwc+0x1c>
   25d48:	f109 33ff 	add.w	r3, r9, #4294967295
   25d4c:	2bfe      	cmp	r3, #254	; 0xfe
   25d4e:	d931      	bls.n	25db4 <__fputwc+0x80>
   25d50:	464a      	mov	r2, r9
   25d52:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   25d56:	a901      	add	r1, sp, #4
   25d58:	4640      	mov	r0, r8
   25d5a:	f002 fa03 	bl	28164 <_wcrtomb_r>
   25d5e:	1c42      	adds	r2, r0, #1
   25d60:	4606      	mov	r6, r0
   25d62:	d032      	beq.n	25dca <__fputwc+0x96>
   25d64:	b360      	cbz	r0, 25dc0 <__fputwc+0x8c>
   25d66:	f89d c004 	ldrb.w	ip, [sp, #4]
   25d6a:	2500      	movs	r5, #0
   25d6c:	f10d 0a04 	add.w	sl, sp, #4
   25d70:	e00c      	b.n	25d8c <__fputwc+0x58>
   25d72:	f1bc 0f0a 	cmp.w	ip, #10
   25d76:	d014      	beq.n	25da2 <__fputwc+0x6e>
   25d78:	6823      	ldr	r3, [r4, #0]
   25d7a:	1c5a      	adds	r2, r3, #1
   25d7c:	6022      	str	r2, [r4, #0]
   25d7e:	f883 c000 	strb.w	ip, [r3]
   25d82:	3501      	adds	r5, #1
   25d84:	42b5      	cmp	r5, r6
   25d86:	d21b      	bcs.n	25dc0 <__fputwc+0x8c>
   25d88:	f815 c00a 	ldrb.w	ip, [r5, sl]
   25d8c:	68a3      	ldr	r3, [r4, #8]
   25d8e:	3b01      	subs	r3, #1
   25d90:	2b00      	cmp	r3, #0
   25d92:	60a3      	str	r3, [r4, #8]
   25d94:	daf0      	bge.n	25d78 <__fputwc+0x44>
   25d96:	69a7      	ldr	r7, [r4, #24]
   25d98:	4661      	mov	r1, ip
   25d9a:	4622      	mov	r2, r4
   25d9c:	4640      	mov	r0, r8
   25d9e:	42bb      	cmp	r3, r7
   25da0:	dae7      	bge.n	25d72 <__fputwc+0x3e>
   25da2:	f002 f987 	bl	280b4 <__swbuf_r>
   25da6:	1c43      	adds	r3, r0, #1
   25da8:	d1eb      	bne.n	25d82 <__fputwc+0x4e>
   25daa:	4606      	mov	r6, r0
   25dac:	4630      	mov	r0, r6
   25dae:	b002      	add	sp, #8
   25db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25db4:	fa5f fc89 	uxtb.w	ip, r9
   25db8:	4606      	mov	r6, r0
   25dba:	f88d c004 	strb.w	ip, [sp, #4]
   25dbe:	e7d4      	b.n	25d6a <__fputwc+0x36>
   25dc0:	464e      	mov	r6, r9
   25dc2:	4630      	mov	r0, r6
   25dc4:	b002      	add	sp, #8
   25dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25dca:	89a3      	ldrh	r3, [r4, #12]
   25dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25dd0:	81a3      	strh	r3, [r4, #12]
   25dd2:	e7eb      	b.n	25dac <__fputwc+0x78>

00025dd4 <_fputwc_r>:
   25dd4:	6e53      	ldr	r3, [r2, #100]	; 0x64
   25dd6:	f013 0f01 	tst.w	r3, #1
   25dda:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   25dde:	b530      	push	{r4, r5, lr}
   25de0:	4614      	mov	r4, r2
   25de2:	b083      	sub	sp, #12
   25de4:	4605      	mov	r5, r0
   25de6:	b29a      	uxth	r2, r3
   25de8:	d101      	bne.n	25dee <_fputwc_r+0x1a>
   25dea:	0598      	lsls	r0, r3, #22
   25dec:	d51c      	bpl.n	25e28 <_fputwc_r+0x54>
   25dee:	0490      	lsls	r0, r2, #18
   25df0:	d406      	bmi.n	25e00 <_fputwc_r+0x2c>
   25df2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   25df4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   25df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   25dfc:	81a3      	strh	r3, [r4, #12]
   25dfe:	6662      	str	r2, [r4, #100]	; 0x64
   25e00:	4628      	mov	r0, r5
   25e02:	4622      	mov	r2, r4
   25e04:	f7ff ff96 	bl	25d34 <__fputwc>
   25e08:	6e63      	ldr	r3, [r4, #100]	; 0x64
   25e0a:	4605      	mov	r5, r0
   25e0c:	07da      	lsls	r2, r3, #31
   25e0e:	d402      	bmi.n	25e16 <_fputwc_r+0x42>
   25e10:	89a3      	ldrh	r3, [r4, #12]
   25e12:	059b      	lsls	r3, r3, #22
   25e14:	d502      	bpl.n	25e1c <_fputwc_r+0x48>
   25e16:	4628      	mov	r0, r5
   25e18:	b003      	add	sp, #12
   25e1a:	bd30      	pop	{r4, r5, pc}
   25e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   25e1e:	f000 ff19 	bl	26c54 <__retarget_lock_release_recursive>
   25e22:	4628      	mov	r0, r5
   25e24:	b003      	add	sp, #12
   25e26:	bd30      	pop	{r4, r5, pc}
   25e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
   25e2a:	9101      	str	r1, [sp, #4]
   25e2c:	f000 ff10 	bl	26c50 <__retarget_lock_acquire_recursive>
   25e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25e34:	9901      	ldr	r1, [sp, #4]
   25e36:	b29a      	uxth	r2, r3
   25e38:	e7d9      	b.n	25dee <_fputwc_r+0x1a>
   25e3a:	bf00      	nop

00025e3c <_malloc_trim_r>:
   25e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25e3e:	4f23      	ldr	r7, [pc, #140]	; (25ecc <_malloc_trim_r+0x90>)
   25e40:	460c      	mov	r4, r1
   25e42:	4606      	mov	r6, r0
   25e44:	f7fc fa52 	bl	222ec <__malloc_lock>
   25e48:	68b9      	ldr	r1, [r7, #8]
   25e4a:	f640 73ef 	movw	r3, #4079	; 0xfef
   25e4e:	4a20      	ldr	r2, [pc, #128]	; (25ed0 <_malloc_trim_r+0x94>)
   25e50:	684d      	ldr	r5, [r1, #4]
   25e52:	1b1b      	subs	r3, r3, r4
   25e54:	f025 0503 	bic.w	r5, r5, #3
   25e58:	442b      	add	r3, r5
   25e5a:	401a      	ands	r2, r3
   25e5c:	f5a2 5480 	sub.w	r4, r2, #4096	; 0x1000
   25e60:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   25e64:	db07      	blt.n	25e76 <_malloc_trim_r+0x3a>
   25e66:	2100      	movs	r1, #0
   25e68:	4630      	mov	r0, r6
   25e6a:	f7fc fc4d 	bl	22708 <_sbrk_r>
   25e6e:	68bb      	ldr	r3, [r7, #8]
   25e70:	442b      	add	r3, r5
   25e72:	4298      	cmp	r0, r3
   25e74:	d004      	beq.n	25e80 <_malloc_trim_r+0x44>
   25e76:	4630      	mov	r0, r6
   25e78:	f7fc fa3e 	bl	222f8 <__malloc_unlock>
   25e7c:	2000      	movs	r0, #0
   25e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25e80:	4261      	negs	r1, r4
   25e82:	4630      	mov	r0, r6
   25e84:	f7fc fc40 	bl	22708 <_sbrk_r>
   25e88:	3001      	adds	r0, #1
   25e8a:	d00d      	beq.n	25ea8 <_malloc_trim_r+0x6c>
   25e8c:	4b11      	ldr	r3, [pc, #68]	; (25ed4 <_malloc_trim_r+0x98>)
   25e8e:	1b2d      	subs	r5, r5, r4
   25e90:	68b9      	ldr	r1, [r7, #8]
   25e92:	4630      	mov	r0, r6
   25e94:	681a      	ldr	r2, [r3, #0]
   25e96:	f045 0501 	orr.w	r5, r5, #1
   25e9a:	1b12      	subs	r2, r2, r4
   25e9c:	604d      	str	r5, [r1, #4]
   25e9e:	601a      	str	r2, [r3, #0]
   25ea0:	f7fc fa2a 	bl	222f8 <__malloc_unlock>
   25ea4:	2001      	movs	r0, #1
   25ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25ea8:	2100      	movs	r1, #0
   25eaa:	4630      	mov	r0, r6
   25eac:	f7fc fc2c 	bl	22708 <_sbrk_r>
   25eb0:	68ba      	ldr	r2, [r7, #8]
   25eb2:	1a83      	subs	r3, r0, r2
   25eb4:	2b0f      	cmp	r3, #15
   25eb6:	ddde      	ble.n	25e76 <_malloc_trim_r+0x3a>
   25eb8:	4c07      	ldr	r4, [pc, #28]	; (25ed8 <_malloc_trim_r+0x9c>)
   25eba:	f043 0301 	orr.w	r3, r3, #1
   25ebe:	4905      	ldr	r1, [pc, #20]	; (25ed4 <_malloc_trim_r+0x98>)
   25ec0:	6824      	ldr	r4, [r4, #0]
   25ec2:	6053      	str	r3, [r2, #4]
   25ec4:	1b00      	subs	r0, r0, r4
   25ec6:	6008      	str	r0, [r1, #0]
   25ec8:	e7d5      	b.n	25e76 <_malloc_trim_r+0x3a>
   25eca:	bf00      	nop
   25ecc:	200204dc 	.word	0x200204dc
   25ed0:	fffff000 	.word	0xfffff000
   25ed4:	20022ff4 	.word	0x20022ff4
   25ed8:	200208e4 	.word	0x200208e4

00025edc <_free_r>:
   25edc:	2900      	cmp	r1, #0
   25ede:	d05f      	beq.n	25fa0 <_free_r+0xc4>
   25ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25ee2:	460c      	mov	r4, r1
   25ee4:	4606      	mov	r6, r0
   25ee6:	f7fc fa01 	bl	222ec <__malloc_lock>
   25eea:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 260e4 <_free_r+0x208>
   25eee:	f854 3c04 	ldr.w	r3, [r4, #-4]
   25ef2:	f1a4 0008 	sub.w	r0, r4, #8
   25ef6:	f8dc 7008 	ldr.w	r7, [ip, #8]
   25efa:	f023 0101 	bic.w	r1, r3, #1
   25efe:	1842      	adds	r2, r0, r1
   25f00:	6855      	ldr	r5, [r2, #4]
   25f02:	4297      	cmp	r7, r2
   25f04:	f025 0503 	bic.w	r5, r5, #3
   25f08:	f000 8089 	beq.w	2601e <_free_r+0x142>
   25f0c:	07df      	lsls	r7, r3, #31
   25f0e:	6055      	str	r5, [r2, #4]
   25f10:	d434      	bmi.n	25f7c <_free_r+0xa0>
   25f12:	f854 3c08 	ldr.w	r3, [r4, #-8]
   25f16:	f10c 0408 	add.w	r4, ip, #8
   25f1a:	1ac0      	subs	r0, r0, r3
   25f1c:	4419      	add	r1, r3
   25f1e:	6883      	ldr	r3, [r0, #8]
   25f20:	42a3      	cmp	r3, r4
   25f22:	d06a      	beq.n	25ffa <_free_r+0x11e>
   25f24:	1957      	adds	r7, r2, r5
   25f26:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   25f2a:	687f      	ldr	r7, [r7, #4]
   25f2c:	f8c3 e00c 	str.w	lr, [r3, #12]
   25f30:	f8ce 3008 	str.w	r3, [lr, #8]
   25f34:	07fb      	lsls	r3, r7, #31
   25f36:	f140 8097 	bpl.w	26068 <_free_r+0x18c>
   25f3a:	f041 0301 	orr.w	r3, r1, #1
   25f3e:	6043      	str	r3, [r0, #4]
   25f40:	6011      	str	r1, [r2, #0]
   25f42:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   25f46:	d234      	bcs.n	25fb2 <_free_r+0xd6>
   25f48:	2201      	movs	r2, #1
   25f4a:	08cb      	lsrs	r3, r1, #3
   25f4c:	0949      	lsrs	r1, r1, #5
   25f4e:	f8dc 4004 	ldr.w	r4, [ip, #4]
   25f52:	4413      	add	r3, r2
   25f54:	fa02 f101 	lsl.w	r1, r2, r1
   25f58:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   25f5c:	4321      	orrs	r1, r4
   25f5e:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   25f62:	3a08      	subs	r2, #8
   25f64:	f8cc 1004 	str.w	r1, [ip, #4]
   25f68:	e9c0 4202 	strd	r4, r2, [r0, #8]
   25f6c:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   25f70:	60e0      	str	r0, [r4, #12]
   25f72:	4630      	mov	r0, r6
   25f74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   25f78:	f7fc b9be 	b.w	222f8 <__malloc_unlock>
   25f7c:	1953      	adds	r3, r2, r5
   25f7e:	685b      	ldr	r3, [r3, #4]
   25f80:	07df      	lsls	r7, r3, #31
   25f82:	d40e      	bmi.n	25fa2 <_free_r+0xc6>
   25f84:	4429      	add	r1, r5
   25f86:	f10c 0408 	add.w	r4, ip, #8
   25f8a:	6893      	ldr	r3, [r2, #8]
   25f8c:	42a3      	cmp	r3, r4
   25f8e:	d073      	beq.n	26078 <_free_r+0x19c>
   25f90:	68d4      	ldr	r4, [r2, #12]
   25f92:	f041 0201 	orr.w	r2, r1, #1
   25f96:	60dc      	str	r4, [r3, #12]
   25f98:	60a3      	str	r3, [r4, #8]
   25f9a:	6042      	str	r2, [r0, #4]
   25f9c:	5041      	str	r1, [r0, r1]
   25f9e:	e7d0      	b.n	25f42 <_free_r+0x66>
   25fa0:	4770      	bx	lr
   25fa2:	f041 0301 	orr.w	r3, r1, #1
   25fa6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   25faa:	f844 3c04 	str.w	r3, [r4, #-4]
   25fae:	6011      	str	r1, [r2, #0]
   25fb0:	d3ca      	bcc.n	25f48 <_free_r+0x6c>
   25fb2:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   25fb6:	ea4f 2351 	mov.w	r3, r1, lsr #9
   25fba:	d24a      	bcs.n	26052 <_free_r+0x176>
   25fbc:	098b      	lsrs	r3, r1, #6
   25fbe:	f103 0439 	add.w	r4, r3, #57	; 0x39
   25fc2:	f103 0238 	add.w	r2, r3, #56	; 0x38
   25fc6:	00e3      	lsls	r3, r4, #3
   25fc8:	eb0c 0403 	add.w	r4, ip, r3
   25fcc:	f85c 3003 	ldr.w	r3, [ip, r3]
   25fd0:	3c08      	subs	r4, #8
   25fd2:	429c      	cmp	r4, r3
   25fd4:	d059      	beq.n	2608a <_free_r+0x1ae>
   25fd6:	685a      	ldr	r2, [r3, #4]
   25fd8:	f022 0203 	bic.w	r2, r2, #3
   25fdc:	428a      	cmp	r2, r1
   25fde:	d902      	bls.n	25fe6 <_free_r+0x10a>
   25fe0:	689b      	ldr	r3, [r3, #8]
   25fe2:	429c      	cmp	r4, r3
   25fe4:	d1f7      	bne.n	25fd6 <_free_r+0xfa>
   25fe6:	68dc      	ldr	r4, [r3, #12]
   25fe8:	e9c0 3402 	strd	r3, r4, [r0, #8]
   25fec:	60a0      	str	r0, [r4, #8]
   25fee:	60d8      	str	r0, [r3, #12]
   25ff0:	4630      	mov	r0, r6
   25ff2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   25ff6:	f7fc b97f 	b.w	222f8 <__malloc_unlock>
   25ffa:	1953      	adds	r3, r2, r5
   25ffc:	685b      	ldr	r3, [r3, #4]
   25ffe:	07db      	lsls	r3, r3, #31
   26000:	d466      	bmi.n	260d0 <_free_r+0x1f4>
   26002:	4429      	add	r1, r5
   26004:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   26008:	f041 0401 	orr.w	r4, r1, #1
   2600c:	60d3      	str	r3, [r2, #12]
   2600e:	609a      	str	r2, [r3, #8]
   26010:	6044      	str	r4, [r0, #4]
   26012:	5041      	str	r1, [r0, r1]
   26014:	4630      	mov	r0, r6
   26016:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2601a:	f7fc b96d 	b.w	222f8 <__malloc_unlock>
   2601e:	07db      	lsls	r3, r3, #31
   26020:	4429      	add	r1, r5
   26022:	d407      	bmi.n	26034 <_free_r+0x158>
   26024:	f854 3c08 	ldr.w	r3, [r4, #-8]
   26028:	1ac0      	subs	r0, r0, r3
   2602a:	4419      	add	r1, r3
   2602c:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   26030:	60d3      	str	r3, [r2, #12]
   26032:	609a      	str	r2, [r3, #8]
   26034:	4b29      	ldr	r3, [pc, #164]	; (260dc <_free_r+0x200>)
   26036:	f041 0201 	orr.w	r2, r1, #1
   2603a:	681b      	ldr	r3, [r3, #0]
   2603c:	6042      	str	r2, [r0, #4]
   2603e:	428b      	cmp	r3, r1
   26040:	f8cc 0008 	str.w	r0, [ip, #8]
   26044:	d895      	bhi.n	25f72 <_free_r+0x96>
   26046:	4b26      	ldr	r3, [pc, #152]	; (260e0 <_free_r+0x204>)
   26048:	4630      	mov	r0, r6
   2604a:	6819      	ldr	r1, [r3, #0]
   2604c:	f7ff fef6 	bl	25e3c <_malloc_trim_r>
   26050:	e78f      	b.n	25f72 <_free_r+0x96>
   26052:	2b14      	cmp	r3, #20
   26054:	d90a      	bls.n	2606c <_free_r+0x190>
   26056:	2b54      	cmp	r3, #84	; 0x54
   26058:	d821      	bhi.n	2609e <_free_r+0x1c2>
   2605a:	0b0b      	lsrs	r3, r1, #12
   2605c:	f103 046f 	add.w	r4, r3, #111	; 0x6f
   26060:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   26064:	00e3      	lsls	r3, r4, #3
   26066:	e7af      	b.n	25fc8 <_free_r+0xec>
   26068:	4429      	add	r1, r5
   2606a:	e78e      	b.n	25f8a <_free_r+0xae>
   2606c:	f103 045c 	add.w	r4, r3, #92	; 0x5c
   26070:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   26074:	00e3      	lsls	r3, r4, #3
   26076:	e7a7      	b.n	25fc8 <_free_r+0xec>
   26078:	f041 0301 	orr.w	r3, r1, #1
   2607c:	e9cc 0004 	strd	r0, r0, [ip, #16]
   26080:	e9c0 4402 	strd	r4, r4, [r0, #8]
   26084:	6043      	str	r3, [r0, #4]
   26086:	5041      	str	r1, [r0, r1]
   26088:	e773      	b.n	25f72 <_free_r+0x96>
   2608a:	1092      	asrs	r2, r2, #2
   2608c:	2501      	movs	r5, #1
   2608e:	f8dc 1004 	ldr.w	r1, [ip, #4]
   26092:	fa05 f202 	lsl.w	r2, r5, r2
   26096:	430a      	orrs	r2, r1
   26098:	f8cc 2004 	str.w	r2, [ip, #4]
   2609c:	e7a4      	b.n	25fe8 <_free_r+0x10c>
   2609e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   260a2:	d806      	bhi.n	260b2 <_free_r+0x1d6>
   260a4:	0bcb      	lsrs	r3, r1, #15
   260a6:	f103 0478 	add.w	r4, r3, #120	; 0x78
   260aa:	f103 0277 	add.w	r2, r3, #119	; 0x77
   260ae:	00e3      	lsls	r3, r4, #3
   260b0:	e78a      	b.n	25fc8 <_free_r+0xec>
   260b2:	f240 5254 	movw	r2, #1364	; 0x554
   260b6:	4293      	cmp	r3, r2
   260b8:	d806      	bhi.n	260c8 <_free_r+0x1ec>
   260ba:	0c8b      	lsrs	r3, r1, #18
   260bc:	f103 047d 	add.w	r4, r3, #125	; 0x7d
   260c0:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   260c4:	00e3      	lsls	r3, r4, #3
   260c6:	e77f      	b.n	25fc8 <_free_r+0xec>
   260c8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   260cc:	227e      	movs	r2, #126	; 0x7e
   260ce:	e77b      	b.n	25fc8 <_free_r+0xec>
   260d0:	f041 0301 	orr.w	r3, r1, #1
   260d4:	6043      	str	r3, [r0, #4]
   260d6:	6011      	str	r1, [r2, #0]
   260d8:	e74b      	b.n	25f72 <_free_r+0x96>
   260da:	bf00      	nop
   260dc:	200208e8 	.word	0x200208e8
   260e0:	20023024 	.word	0x20023024
   260e4:	200204dc 	.word	0x200204dc

000260e8 <__sfvwrite_r>:
   260e8:	6893      	ldr	r3, [r2, #8]
   260ea:	2b00      	cmp	r3, #0
   260ec:	f000 808d 	beq.w	2620a <__sfvwrite_r+0x122>
   260f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   260f4:	4690      	mov	r8, r2
   260f6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   260fa:	460c      	mov	r4, r1
   260fc:	b083      	sub	sp, #12
   260fe:	0711      	lsls	r1, r2, #28
   26100:	4681      	mov	r9, r0
   26102:	b293      	uxth	r3, r2
   26104:	d525      	bpl.n	26152 <__sfvwrite_r+0x6a>
   26106:	6922      	ldr	r2, [r4, #16]
   26108:	b31a      	cbz	r2, 26152 <__sfvwrite_r+0x6a>
   2610a:	f013 0702 	ands.w	r7, r3, #2
   2610e:	f8d8 5000 	ldr.w	r5, [r8]
   26112:	d02d      	beq.n	26170 <__sfvwrite_r+0x88>
   26114:	2600      	movs	r6, #0
   26116:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 263d0 <__sfvwrite_r+0x2e8>
   2611a:	46aa      	mov	sl, r5
   2611c:	4637      	mov	r7, r6
   2611e:	455f      	cmp	r7, fp
   26120:	463b      	mov	r3, r7
   26122:	4632      	mov	r2, r6
   26124:	4648      	mov	r0, r9
   26126:	bf28      	it	cs
   26128:	465b      	movcs	r3, fp
   2612a:	2f00      	cmp	r7, #0
   2612c:	d052      	beq.n	261d4 <__sfvwrite_r+0xec>
   2612e:	69e1      	ldr	r1, [r4, #28]
   26130:	6a65      	ldr	r5, [r4, #36]	; 0x24
   26132:	47a8      	blx	r5
   26134:	2800      	cmp	r0, #0
   26136:	dd5e      	ble.n	261f6 <__sfvwrite_r+0x10e>
   26138:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2613c:	4406      	add	r6, r0
   2613e:	1a3f      	subs	r7, r7, r0
   26140:	1a18      	subs	r0, r3, r0
   26142:	f8c8 0008 	str.w	r0, [r8, #8]
   26146:	2800      	cmp	r0, #0
   26148:	d1e9      	bne.n	2611e <__sfvwrite_r+0x36>
   2614a:	2000      	movs	r0, #0
   2614c:	b003      	add	sp, #12
   2614e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26152:	4621      	mov	r1, r4
   26154:	4648      	mov	r0, r9
   26156:	f7ff fb95 	bl	25884 <__swsetup_r>
   2615a:	2800      	cmp	r0, #0
   2615c:	f040 8135 	bne.w	263ca <__sfvwrite_r+0x2e2>
   26160:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   26164:	f8d8 5000 	ldr.w	r5, [r8]
   26168:	b293      	uxth	r3, r2
   2616a:	f013 0702 	ands.w	r7, r3, #2
   2616e:	d1d1      	bne.n	26114 <__sfvwrite_r+0x2c>
   26170:	f013 0a01 	ands.w	sl, r3, #1
   26174:	d14b      	bne.n	2620e <__sfvwrite_r+0x126>
   26176:	4656      	mov	r6, sl
   26178:	b346      	cbz	r6, 261cc <__sfvwrite_r+0xe4>
   2617a:	059a      	lsls	r2, r3, #22
   2617c:	f8d4 b008 	ldr.w	fp, [r4, #8]
   26180:	f140 8090 	bpl.w	262a4 <__sfvwrite_r+0x1bc>
   26184:	45b3      	cmp	fp, r6
   26186:	465a      	mov	r2, fp
   26188:	f200 80bc 	bhi.w	26304 <__sfvwrite_r+0x21c>
   2618c:	f413 6f90 	tst.w	r3, #1152	; 0x480
   26190:	f040 80d0 	bne.w	26334 <__sfvwrite_r+0x24c>
   26194:	6820      	ldr	r0, [r4, #0]
   26196:	4651      	mov	r1, sl
   26198:	9200      	str	r2, [sp, #0]
   2619a:	f000 fe27 	bl	26dec <memmove>
   2619e:	68a1      	ldr	r1, [r4, #8]
   261a0:	6823      	ldr	r3, [r4, #0]
   261a2:	4637      	mov	r7, r6
   261a4:	9a00      	ldr	r2, [sp, #0]
   261a6:	eba1 010b 	sub.w	r1, r1, fp
   261aa:	2600      	movs	r6, #0
   261ac:	4413      	add	r3, r2
   261ae:	60a1      	str	r1, [r4, #8]
   261b0:	6023      	str	r3, [r4, #0]
   261b2:	f8d8 0008 	ldr.w	r0, [r8, #8]
   261b6:	44ba      	add	sl, r7
   261b8:	1bc7      	subs	r7, r0, r7
   261ba:	f8c8 7008 	str.w	r7, [r8, #8]
   261be:	2f00      	cmp	r7, #0
   261c0:	d0c3      	beq.n	2614a <__sfvwrite_r+0x62>
   261c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   261c6:	b29b      	uxth	r3, r3
   261c8:	2e00      	cmp	r6, #0
   261ca:	d1d6      	bne.n	2617a <__sfvwrite_r+0x92>
   261cc:	e9d5 a600 	ldrd	sl, r6, [r5]
   261d0:	3508      	adds	r5, #8
   261d2:	e7d1      	b.n	26178 <__sfvwrite_r+0x90>
   261d4:	e9da 6700 	ldrd	r6, r7, [sl]
   261d8:	f10a 0a08 	add.w	sl, sl, #8
   261dc:	e79f      	b.n	2611e <__sfvwrite_r+0x36>
   261de:	4629      	mov	r1, r5
   261e0:	465a      	mov	r2, fp
   261e2:	f000 fe03 	bl	26dec <memmove>
   261e6:	6823      	ldr	r3, [r4, #0]
   261e8:	4621      	mov	r1, r4
   261ea:	4648      	mov	r0, r9
   261ec:	445b      	add	r3, fp
   261ee:	6023      	str	r3, [r4, #0]
   261f0:	f7ff fd06 	bl	25c00 <_fflush_r>
   261f4:	b358      	cbz	r0, 2624e <__sfvwrite_r+0x166>
   261f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   261fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   261fe:	f04f 30ff 	mov.w	r0, #4294967295
   26202:	81a3      	strh	r3, [r4, #12]
   26204:	b003      	add	sp, #12
   26206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2620a:	2000      	movs	r0, #0
   2620c:	4770      	bx	lr
   2620e:	463e      	mov	r6, r7
   26210:	46aa      	mov	sl, r5
   26212:	4638      	mov	r0, r7
   26214:	463d      	mov	r5, r7
   26216:	9700      	str	r7, [sp, #0]
   26218:	b36e      	cbz	r6, 26276 <__sfvwrite_r+0x18e>
   2621a:	2800      	cmp	r0, #0
   2621c:	d035      	beq.n	2628a <__sfvwrite_r+0x1a2>
   2621e:	9a00      	ldr	r2, [sp, #0]
   26220:	42b2      	cmp	r2, r6
   26222:	6820      	ldr	r0, [r4, #0]
   26224:	6921      	ldr	r1, [r4, #16]
   26226:	6963      	ldr	r3, [r4, #20]
   26228:	bf28      	it	cs
   2622a:	4632      	movcs	r2, r6
   2622c:	68a7      	ldr	r7, [r4, #8]
   2622e:	4288      	cmp	r0, r1
   26230:	eb03 0b07 	add.w	fp, r3, r7
   26234:	d901      	bls.n	2623a <__sfvwrite_r+0x152>
   26236:	455a      	cmp	r2, fp
   26238:	dcd1      	bgt.n	261de <__sfvwrite_r+0xf6>
   2623a:	4293      	cmp	r3, r2
   2623c:	dc6d      	bgt.n	2631a <__sfvwrite_r+0x232>
   2623e:	462a      	mov	r2, r5
   26240:	69e1      	ldr	r1, [r4, #28]
   26242:	4648      	mov	r0, r9
   26244:	6a67      	ldr	r7, [r4, #36]	; 0x24
   26246:	47b8      	blx	r7
   26248:	f1b0 0b00 	subs.w	fp, r0, #0
   2624c:	ddd3      	ble.n	261f6 <__sfvwrite_r+0x10e>
   2624e:	9b00      	ldr	r3, [sp, #0]
   26250:	ebb3 030b 	subs.w	r3, r3, fp
   26254:	9300      	str	r3, [sp, #0]
   26256:	d059      	beq.n	2630c <__sfvwrite_r+0x224>
   26258:	2001      	movs	r0, #1
   2625a:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2625e:	445d      	add	r5, fp
   26260:	eba6 060b 	sub.w	r6, r6, fp
   26264:	eba2 020b 	sub.w	r2, r2, fp
   26268:	f8c8 2008 	str.w	r2, [r8, #8]
   2626c:	2a00      	cmp	r2, #0
   2626e:	f43f af6c 	beq.w	2614a <__sfvwrite_r+0x62>
   26272:	2e00      	cmp	r6, #0
   26274:	d1d1      	bne.n	2621a <__sfvwrite_r+0x132>
   26276:	f10a 0308 	add.w	r3, sl, #8
   2627a:	f853 6c04 	ldr.w	r6, [r3, #-4]
   2627e:	469a      	mov	sl, r3
   26280:	f853 5c08 	ldr.w	r5, [r3, #-8]
   26284:	3308      	adds	r3, #8
   26286:	2e00      	cmp	r6, #0
   26288:	d0f7      	beq.n	2627a <__sfvwrite_r+0x192>
   2628a:	4632      	mov	r2, r6
   2628c:	210a      	movs	r1, #10
   2628e:	4628      	mov	r0, r5
   26290:	f7fb ff70 	bl	22174 <memchr>
   26294:	2800      	cmp	r0, #0
   26296:	f000 808f 	beq.w	263b8 <__sfvwrite_r+0x2d0>
   2629a:	3001      	adds	r0, #1
   2629c:	1b43      	subs	r3, r0, r5
   2629e:	461a      	mov	r2, r3
   262a0:	9300      	str	r3, [sp, #0]
   262a2:	e7bd      	b.n	26220 <__sfvwrite_r+0x138>
   262a4:	6820      	ldr	r0, [r4, #0]
   262a6:	6923      	ldr	r3, [r4, #16]
   262a8:	4298      	cmp	r0, r3
   262aa:	d814      	bhi.n	262d6 <__sfvwrite_r+0x1ee>
   262ac:	6963      	ldr	r3, [r4, #20]
   262ae:	42b3      	cmp	r3, r6
   262b0:	d811      	bhi.n	262d6 <__sfvwrite_r+0x1ee>
   262b2:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   262b6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   262b8:	4652      	mov	r2, sl
   262ba:	69e1      	ldr	r1, [r4, #28]
   262bc:	45b4      	cmp	ip, r6
   262be:	4648      	mov	r0, r9
   262c0:	bf28      	it	cs
   262c2:	46b4      	movcs	ip, r6
   262c4:	fb9c fcf3 	sdiv	ip, ip, r3
   262c8:	fb03 f30c 	mul.w	r3, r3, ip
   262cc:	47b8      	blx	r7
   262ce:	1e07      	subs	r7, r0, #0
   262d0:	dd91      	ble.n	261f6 <__sfvwrite_r+0x10e>
   262d2:	1bf6      	subs	r6, r6, r7
   262d4:	e76d      	b.n	261b2 <__sfvwrite_r+0xca>
   262d6:	45b3      	cmp	fp, r6
   262d8:	465f      	mov	r7, fp
   262da:	4651      	mov	r1, sl
   262dc:	bf28      	it	cs
   262de:	4637      	movcs	r7, r6
   262e0:	463a      	mov	r2, r7
   262e2:	f000 fd83 	bl	26dec <memmove>
   262e6:	68a3      	ldr	r3, [r4, #8]
   262e8:	6822      	ldr	r2, [r4, #0]
   262ea:	1bdb      	subs	r3, r3, r7
   262ec:	443a      	add	r2, r7
   262ee:	60a3      	str	r3, [r4, #8]
   262f0:	6022      	str	r2, [r4, #0]
   262f2:	2b00      	cmp	r3, #0
   262f4:	d1ed      	bne.n	262d2 <__sfvwrite_r+0x1ea>
   262f6:	4621      	mov	r1, r4
   262f8:	4648      	mov	r0, r9
   262fa:	f7ff fc81 	bl	25c00 <_fflush_r>
   262fe:	2800      	cmp	r0, #0
   26300:	d0e7      	beq.n	262d2 <__sfvwrite_r+0x1ea>
   26302:	e778      	b.n	261f6 <__sfvwrite_r+0x10e>
   26304:	46b3      	mov	fp, r6
   26306:	6820      	ldr	r0, [r4, #0]
   26308:	4632      	mov	r2, r6
   2630a:	e744      	b.n	26196 <__sfvwrite_r+0xae>
   2630c:	4621      	mov	r1, r4
   2630e:	4648      	mov	r0, r9
   26310:	f7ff fc76 	bl	25c00 <_fflush_r>
   26314:	2800      	cmp	r0, #0
   26316:	d0a0      	beq.n	2625a <__sfvwrite_r+0x172>
   26318:	e76d      	b.n	261f6 <__sfvwrite_r+0x10e>
   2631a:	4629      	mov	r1, r5
   2631c:	4693      	mov	fp, r2
   2631e:	9201      	str	r2, [sp, #4]
   26320:	f000 fd64 	bl	26dec <memmove>
   26324:	68a1      	ldr	r1, [r4, #8]
   26326:	6823      	ldr	r3, [r4, #0]
   26328:	9a01      	ldr	r2, [sp, #4]
   2632a:	1a89      	subs	r1, r1, r2
   2632c:	441a      	add	r2, r3
   2632e:	60a1      	str	r1, [r4, #8]
   26330:	6022      	str	r2, [r4, #0]
   26332:	e78c      	b.n	2624e <__sfvwrite_r+0x166>
   26334:	6822      	ldr	r2, [r4, #0]
   26336:	6921      	ldr	r1, [r4, #16]
   26338:	6967      	ldr	r7, [r4, #20]
   2633a:	eba2 0b01 	sub.w	fp, r2, r1
   2633e:	eb17 0747 	adds.w	r7, r7, r7, lsl #1
   26342:	f10b 0001 	add.w	r0, fp, #1
   26346:	bf48      	it	mi
   26348:	3701      	addmi	r7, #1
   2634a:	4430      	add	r0, r6
   2634c:	107f      	asrs	r7, r7, #1
   2634e:	42b8      	cmp	r0, r7
   26350:	463a      	mov	r2, r7
   26352:	d901      	bls.n	26358 <__sfvwrite_r+0x270>
   26354:	4607      	mov	r7, r0
   26356:	4602      	mov	r2, r0
   26358:	055b      	lsls	r3, r3, #21
   2635a:	d51b      	bpl.n	26394 <__sfvwrite_r+0x2ac>
   2635c:	4611      	mov	r1, r2
   2635e:	4648      	mov	r0, r9
   26360:	f7fb fc3a 	bl	21bd8 <_malloc_r>
   26364:	b358      	cbz	r0, 263be <__sfvwrite_r+0x2d6>
   26366:	465a      	mov	r2, fp
   26368:	6921      	ldr	r1, [r4, #16]
   2636a:	9000      	str	r0, [sp, #0]
   2636c:	f7e6 fc02 	bl	cb74 <memcpy>
   26370:	89a2      	ldrh	r2, [r4, #12]
   26372:	9b00      	ldr	r3, [sp, #0]
   26374:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   26378:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2637c:	81a2      	strh	r2, [r4, #12]
   2637e:	eba7 020b 	sub.w	r2, r7, fp
   26382:	eb03 000b 	add.w	r0, r3, fp
   26386:	6123      	str	r3, [r4, #16]
   26388:	46b3      	mov	fp, r6
   2638a:	60a2      	str	r2, [r4, #8]
   2638c:	4632      	mov	r2, r6
   2638e:	6020      	str	r0, [r4, #0]
   26390:	6167      	str	r7, [r4, #20]
   26392:	e700      	b.n	26196 <__sfvwrite_r+0xae>
   26394:	4648      	mov	r0, r9
   26396:	f7fb ffbd 	bl	22314 <_realloc_r>
   2639a:	4603      	mov	r3, r0
   2639c:	2800      	cmp	r0, #0
   2639e:	d1ee      	bne.n	2637e <__sfvwrite_r+0x296>
   263a0:	6921      	ldr	r1, [r4, #16]
   263a2:	4648      	mov	r0, r9
   263a4:	f7ff fd9a 	bl	25edc <_free_r>
   263a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   263ac:	220c      	movs	r2, #12
   263ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   263b2:	f8c9 2000 	str.w	r2, [r9]
   263b6:	e720      	b.n	261fa <__sfvwrite_r+0x112>
   263b8:	1c72      	adds	r2, r6, #1
   263ba:	9200      	str	r2, [sp, #0]
   263bc:	e730      	b.n	26220 <__sfvwrite_r+0x138>
   263be:	220c      	movs	r2, #12
   263c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   263c4:	f8c9 2000 	str.w	r2, [r9]
   263c8:	e717      	b.n	261fa <__sfvwrite_r+0x112>
   263ca:	f04f 30ff 	mov.w	r0, #4294967295
   263ce:	e6bd      	b.n	2614c <__sfvwrite_r+0x64>
   263d0:	7ffffc00 	.word	0x7ffffc00

000263d4 <_fwalk_reent>:
   263d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   263d8:	2600      	movs	r6, #0
   263da:	4681      	mov	r9, r0
   263dc:	4688      	mov	r8, r1
   263de:	f500 7738 	add.w	r7, r0, #736	; 0x2e0
   263e2:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
   263e6:	3d01      	subs	r5, #1
   263e8:	d40f      	bmi.n	2640a <_fwalk_reent+0x36>
   263ea:	89a3      	ldrh	r3, [r4, #12]
   263ec:	3d01      	subs	r5, #1
   263ee:	2b01      	cmp	r3, #1
   263f0:	d907      	bls.n	26402 <_fwalk_reent+0x2e>
   263f2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   263f6:	4621      	mov	r1, r4
   263f8:	4648      	mov	r0, r9
   263fa:	3301      	adds	r3, #1
   263fc:	d001      	beq.n	26402 <_fwalk_reent+0x2e>
   263fe:	47c0      	blx	r8
   26400:	4306      	orrs	r6, r0
   26402:	1c6b      	adds	r3, r5, #1
   26404:	f104 0468 	add.w	r4, r4, #104	; 0x68
   26408:	d1ef      	bne.n	263ea <_fwalk_reent+0x16>
   2640a:	683f      	ldr	r7, [r7, #0]
   2640c:	2f00      	cmp	r7, #0
   2640e:	d1e8      	bne.n	263e2 <_fwalk_reent+0xe>
   26410:	4630      	mov	r0, r6
   26412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26416:	bf00      	nop

00026418 <rshift>:
   26418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2641c:	6906      	ldr	r6, [r0, #16]
   2641e:	ebb6 1f61 	cmp.w	r6, r1, asr #5
   26422:	dd2d      	ble.n	26480 <rshift+0x68>
   26424:	f100 0414 	add.w	r4, r0, #20
   26428:	ea4f 1c61 	mov.w	ip, r1, asr #5
   2642c:	f011 051f 	ands.w	r5, r1, #31
   26430:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   26434:	eb04 038c 	add.w	r3, r4, ip, lsl #2
   26438:	d028      	beq.n	2648c <rshift+0x74>
   2643a:	3304      	adds	r3, #4
   2643c:	f854 202c 	ldr.w	r2, [r4, ip, lsl #2]
   26440:	f1c5 0e20 	rsb	lr, r5, #32
   26444:	429f      	cmp	r7, r3
   26446:	fa22 f105 	lsr.w	r1, r2, r5
   2644a:	d935      	bls.n	264b8 <rshift+0xa0>
   2644c:	46a0      	mov	r8, r4
   2644e:	681a      	ldr	r2, [r3, #0]
   26450:	fa02 f20e 	lsl.w	r2, r2, lr
   26454:	430a      	orrs	r2, r1
   26456:	f848 2b04 	str.w	r2, [r8], #4
   2645a:	f853 1b04 	ldr.w	r1, [r3], #4
   2645e:	429f      	cmp	r7, r3
   26460:	fa21 f105 	lsr.w	r1, r1, r5
   26464:	d8f3      	bhi.n	2644e <rshift+0x36>
   26466:	eba6 030c 	sub.w	r3, r6, ip
   2646a:	009b      	lsls	r3, r3, #2
   2646c:	3b05      	subs	r3, #5
   2646e:	089b      	lsrs	r3, r3, #2
   26470:	3301      	adds	r3, #1
   26472:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
   26476:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   2647a:	b1a9      	cbz	r1, 264a8 <rshift+0x90>
   2647c:	3304      	adds	r3, #4
   2647e:	e013      	b.n	264a8 <rshift+0x90>
   26480:	2300      	movs	r3, #0
   26482:	6103      	str	r3, [r0, #16]
   26484:	2300      	movs	r3, #0
   26486:	6143      	str	r3, [r0, #20]
   26488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2648c:	429f      	cmp	r7, r3
   2648e:	d9f7      	bls.n	26480 <rshift+0x68>
   26490:	f100 0210 	add.w	r2, r0, #16
   26494:	f853 1b04 	ldr.w	r1, [r3], #4
   26498:	429f      	cmp	r7, r3
   2649a:	f842 1f04 	str.w	r1, [r2, #4]!
   2649e:	d8f9      	bhi.n	26494 <rshift+0x7c>
   264a0:	eba6 030c 	sub.w	r3, r6, ip
   264a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   264a8:	1b1a      	subs	r2, r3, r4
   264aa:	42a3      	cmp	r3, r4
   264ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
   264b0:	6102      	str	r2, [r0, #16]
   264b2:	d0e7      	beq.n	26484 <rshift+0x6c>
   264b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   264b8:	6141      	str	r1, [r0, #20]
   264ba:	2900      	cmp	r1, #0
   264bc:	d0e0      	beq.n	26480 <rshift+0x68>
   264be:	4623      	mov	r3, r4
   264c0:	e7dc      	b.n	2647c <rshift+0x64>
   264c2:	bf00      	nop

000264c4 <__gethex>:
   264c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   264c8:	4cc4      	ldr	r4, [pc, #784]	; (267dc <__gethex+0x318>)
   264ca:	4689      	mov	r9, r1
   264cc:	6824      	ldr	r4, [r4, #0]
   264ce:	ed2d 8b02 	vpush	{d8}
   264d2:	b08b      	sub	sp, #44	; 0x2c
   264d4:	ee08 0a10 	vmov	s16, r0
   264d8:	4620      	mov	r0, r4
   264da:	9203      	str	r2, [sp, #12]
   264dc:	9307      	str	r3, [sp, #28]
   264de:	9404      	str	r4, [sp, #16]
   264e0:	f7fc fac4 	bl	22a6c <strlen>
   264e4:	f8d9 5000 	ldr.w	r5, [r9]
   264e8:	1823      	adds	r3, r4, r0
   264ea:	4602      	mov	r2, r0
   264ec:	78a9      	ldrb	r1, [r5, #2]
   264ee:	f813 bc01 	ldrb.w	fp, [r3, #-1]
   264f2:	2930      	cmp	r1, #48	; 0x30
   264f4:	f040 81f3 	bne.w	268de <__gethex+0x41a>
   264f8:	f06f 0001 	mvn.w	r0, #1
   264fc:	1ceb      	adds	r3, r5, #3
   264fe:	1b40      	subs	r0, r0, r5
   26500:	eb00 0a03 	add.w	sl, r0, r3
   26504:	461d      	mov	r5, r3
   26506:	f813 1b01 	ldrb.w	r1, [r3], #1
   2650a:	2930      	cmp	r1, #48	; 0x30
   2650c:	d0f8      	beq.n	26500 <__gethex+0x3c>
   2650e:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 267e0 <__gethex+0x31c>
   26512:	f818 3001 	ldrb.w	r3, [r8, r1]
   26516:	2b00      	cmp	r3, #0
   26518:	f000 80de 	beq.w	266d8 <__gethex+0x214>
   2651c:	782b      	ldrb	r3, [r5, #0]
   2651e:	2700      	movs	r7, #0
   26520:	f818 3003 	ldrb.w	r3, [r8, r3]
   26524:	463c      	mov	r4, r7
   26526:	462e      	mov	r6, r5
   26528:	b12b      	cbz	r3, 26536 <__gethex+0x72>
   2652a:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   2652e:	f818 3003 	ldrb.w	r3, [r8, r3]
   26532:	2b00      	cmp	r3, #0
   26534:	d1f9      	bne.n	2652a <__gethex+0x66>
   26536:	9904      	ldr	r1, [sp, #16]
   26538:	4630      	mov	r0, r6
   2653a:	9202      	str	r2, [sp, #8]
   2653c:	f7fc fac4 	bl	22ac8 <strncmp>
   26540:	9a02      	ldr	r2, [sp, #8]
   26542:	9001      	str	r0, [sp, #4]
   26544:	2800      	cmp	r0, #0
   26546:	f000 8095 	beq.w	26674 <__gethex+0x1b0>
   2654a:	2c00      	cmp	r4, #0
   2654c:	f040 8095 	bne.w	2667a <__gethex+0x1b6>
   26550:	7833      	ldrb	r3, [r6, #0]
   26552:	9401      	str	r4, [sp, #4]
   26554:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   26558:	4634      	mov	r4, r6
   2655a:	2b50      	cmp	r3, #80	; 0x50
   2655c:	f000 8097 	beq.w	2668e <__gethex+0x1ca>
   26560:	f8c9 6000 	str.w	r6, [r9]
   26564:	2f00      	cmp	r7, #0
   26566:	f040 80a6 	bne.w	266b6 <__gethex+0x1f2>
   2656a:	1b63      	subs	r3, r4, r5
   2656c:	4639      	mov	r1, r7
   2656e:	3b01      	subs	r3, #1
   26570:	2b07      	cmp	r3, #7
   26572:	dd03      	ble.n	2657c <__gethex+0xb8>
   26574:	105b      	asrs	r3, r3, #1
   26576:	3101      	adds	r1, #1
   26578:	2b07      	cmp	r3, #7
   2657a:	dcfb      	bgt.n	26574 <__gethex+0xb0>
   2657c:	ee18 0a10 	vmov	r0, s16
   26580:	9205      	str	r2, [sp, #20]
   26582:	f000 fc9d 	bl	26ec0 <_Balloc>
   26586:	9a05      	ldr	r2, [sp, #20]
   26588:	9002      	str	r0, [sp, #8]
   2658a:	2800      	cmp	r0, #0
   2658c:	f000 8248 	beq.w	26a20 <__gethex+0x55c>
   26590:	9b02      	ldr	r3, [sp, #8]
   26592:	42a5      	cmp	r5, r4
   26594:	f103 0614 	add.w	r6, r3, #20
   26598:	9606      	str	r6, [sp, #24]
   2659a:	f080 81cb 	bcs.w	26934 <__gethex+0x470>
   2659e:	2700      	movs	r7, #0
   265a0:	f1c2 0301 	rsb	r3, r2, #1
   265a4:	46b9      	mov	r9, r7
   265a6:	9305      	str	r3, [sp, #20]
   265a8:	e011      	b.n	265ce <__gethex+0x10a>
   265aa:	2f20      	cmp	r7, #32
   265ac:	f000 808e 	beq.w	266cc <__gethex+0x208>
   265b0:	4639      	mov	r1, r7
   265b2:	3704      	adds	r7, #4
   265b4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   265b8:	4654      	mov	r4, sl
   265ba:	f818 3003 	ldrb.w	r3, [r8, r3]
   265be:	42ac      	cmp	r4, r5
   265c0:	f003 030f 	and.w	r3, r3, #15
   265c4:	fa03 f301 	lsl.w	r3, r3, r1
   265c8:	ea49 0903 	orr.w	r9, r9, r3
   265cc:	d916      	bls.n	265fc <__gethex+0x138>
   265ce:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   265d2:	f104 3aff 	add.w	sl, r4, #4294967295
   265d6:	455b      	cmp	r3, fp
   265d8:	d1e7      	bne.n	265aa <__gethex+0xe6>
   265da:	9b05      	ldr	r3, [sp, #20]
   265dc:	4453      	add	r3, sl
   265de:	42ab      	cmp	r3, r5
   265e0:	d3e3      	bcc.n	265aa <__gethex+0xe6>
   265e2:	4618      	mov	r0, r3
   265e4:	9904      	ldr	r1, [sp, #16]
   265e6:	9209      	str	r2, [sp, #36]	; 0x24
   265e8:	9308      	str	r3, [sp, #32]
   265ea:	f7fc fa6d 	bl	22ac8 <strncmp>
   265ee:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   265f2:	2800      	cmp	r0, #0
   265f4:	d1d9      	bne.n	265aa <__gethex+0xe6>
   265f6:	461c      	mov	r4, r3
   265f8:	42ac      	cmp	r4, r5
   265fa:	d8e8      	bhi.n	265ce <__gethex+0x10a>
   265fc:	9b06      	ldr	r3, [sp, #24]
   265fe:	4648      	mov	r0, r9
   26600:	f846 9b04 	str.w	r9, [r6], #4
   26604:	1af6      	subs	r6, r6, r3
   26606:	9b02      	ldr	r3, [sp, #8]
   26608:	10b6      	asrs	r6, r6, #2
   2660a:	611e      	str	r6, [r3, #16]
   2660c:	0176      	lsls	r6, r6, #5
   2660e:	f000 fd37 	bl	27080 <__hi0bits>
   26612:	9b03      	ldr	r3, [sp, #12]
   26614:	1a30      	subs	r0, r6, r0
   26616:	681c      	ldr	r4, [r3, #0]
   26618:	42a0      	cmp	r0, r4
   2661a:	f300 80be 	bgt.w	2679a <__gethex+0x2d6>
   2661e:	f2c0 813d 	blt.w	2689c <__gethex+0x3d8>
   26622:	2700      	movs	r7, #0
   26624:	9b03      	ldr	r3, [sp, #12]
   26626:	9a01      	ldr	r2, [sp, #4]
   26628:	689b      	ldr	r3, [r3, #8]
   2662a:	4293      	cmp	r3, r2
   2662c:	f2c0 8176 	blt.w	2691c <__gethex+0x458>
   26630:	9803      	ldr	r0, [sp, #12]
   26632:	9a01      	ldr	r2, [sp, #4]
   26634:	6843      	ldr	r3, [r0, #4]
   26636:	4293      	cmp	r3, r2
   26638:	dd6d      	ble.n	26716 <__gethex+0x252>
   2663a:	1a9d      	subs	r5, r3, r2
   2663c:	42ac      	cmp	r4, r5
   2663e:	f300 80d1 	bgt.w	267e4 <__gethex+0x320>
   26642:	68c2      	ldr	r2, [r0, #12]
   26644:	2a02      	cmp	r2, #2
   26646:	f000 81aa 	beq.w	2699e <__gethex+0x4da>
   2664a:	2a03      	cmp	r2, #3
   2664c:	f000 81a2 	beq.w	26994 <__gethex+0x4d0>
   26650:	2a01      	cmp	r2, #1
   26652:	f000 8186 	beq.w	26962 <__gethex+0x49e>
   26656:	2550      	movs	r5, #80	; 0x50
   26658:	ee18 0a10 	vmov	r0, s16
   2665c:	9902      	ldr	r1, [sp, #8]
   2665e:	f000 fc55 	bl	26f0c <_Bfree>
   26662:	2300      	movs	r3, #0
   26664:	9a16      	ldr	r2, [sp, #88]	; 0x58
   26666:	4628      	mov	r0, r5
   26668:	6013      	str	r3, [r2, #0]
   2666a:	b00b      	add	sp, #44	; 0x2c
   2666c:	ecbd 8b02 	vpop	{d8}
   26670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26674:	2c00      	cmp	r4, #0
   26676:	f000 8120 	beq.w	268ba <__gethex+0x3f6>
   2667a:	7833      	ldrb	r3, [r6, #0]
   2667c:	1ba4      	subs	r4, r4, r6
   2667e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   26682:	00a1      	lsls	r1, r4, #2
   26684:	4634      	mov	r4, r6
   26686:	2b50      	cmp	r3, #80	; 0x50
   26688:	9101      	str	r1, [sp, #4]
   2668a:	f47f af69 	bne.w	26560 <__gethex+0x9c>
   2668e:	7863      	ldrb	r3, [r4, #1]
   26690:	2b2b      	cmp	r3, #43	; 0x2b
   26692:	f000 8100 	beq.w	26896 <__gethex+0x3d2>
   26696:	2b2d      	cmp	r3, #45	; 0x2d
   26698:	d05a      	beq.n	26750 <__gethex+0x28c>
   2669a:	f818 3003 	ldrb.w	r3, [r8, r3]
   2669e:	1c66      	adds	r6, r4, #1
   266a0:	f04f 0c00 	mov.w	ip, #0
   266a4:	1e59      	subs	r1, r3, #1
   266a6:	2918      	cmp	r1, #24
   266a8:	d95b      	bls.n	26762 <__gethex+0x29e>
   266aa:	4626      	mov	r6, r4
   266ac:	f8c9 6000 	str.w	r6, [r9]
   266b0:	2f00      	cmp	r7, #0
   266b2:	f43f af5a 	beq.w	2656a <__gethex+0xa6>
   266b6:	f1ba 0f00 	cmp.w	sl, #0
   266ba:	bf14      	ite	ne
   266bc:	2500      	movne	r5, #0
   266be:	2506      	moveq	r5, #6
   266c0:	4628      	mov	r0, r5
   266c2:	b00b      	add	sp, #44	; 0x2c
   266c4:	ecbd 8b02 	vpop	{d8}
   266c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   266cc:	2100      	movs	r1, #0
   266ce:	f846 9b04 	str.w	r9, [r6], #4
   266d2:	2704      	movs	r7, #4
   266d4:	4689      	mov	r9, r1
   266d6:	e76d      	b.n	265b4 <__gethex+0xf0>
   266d8:	9904      	ldr	r1, [sp, #16]
   266da:	4628      	mov	r0, r5
   266dc:	9201      	str	r2, [sp, #4]
   266de:	f7fc f9f3 	bl	22ac8 <strncmp>
   266e2:	9a01      	ldr	r2, [sp, #4]
   266e4:	2800      	cmp	r0, #0
   266e6:	f040 809b 	bne.w	26820 <__gethex+0x35c>
   266ea:	5ca9      	ldrb	r1, [r5, r2]
   266ec:	18ac      	adds	r4, r5, r2
   266ee:	f818 3001 	ldrb.w	r3, [r8, r1]
   266f2:	2b00      	cmp	r3, #0
   266f4:	f000 8096 	beq.w	26824 <__gethex+0x360>
   266f8:	2930      	cmp	r1, #48	; 0x30
   266fa:	4625      	mov	r5, r4
   266fc:	d105      	bne.n	2670a <__gethex+0x246>
   266fe:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   26702:	2b30      	cmp	r3, #48	; 0x30
   26704:	d0fb      	beq.n	266fe <__gethex+0x23a>
   26706:	f818 3003 	ldrb.w	r3, [r8, r3]
   2670a:	fab3 f783 	clz	r7, r3
   2670e:	f04f 0a01 	mov.w	sl, #1
   26712:	097f      	lsrs	r7, r7, #5
   26714:	e707      	b.n	26526 <__gethex+0x62>
   26716:	2501      	movs	r5, #1
   26718:	b167      	cbz	r7, 26734 <__gethex+0x270>
   2671a:	9b03      	ldr	r3, [sp, #12]
   2671c:	68db      	ldr	r3, [r3, #12]
   2671e:	2b02      	cmp	r3, #2
   26720:	f000 8088 	beq.w	26834 <__gethex+0x370>
   26724:	2b03      	cmp	r3, #3
   26726:	f000 8089 	beq.w	2683c <__gethex+0x378>
   2672a:	2b01      	cmp	r3, #1
   2672c:	f000 80aa 	beq.w	26884 <__gethex+0x3c0>
   26730:	f045 0510 	orr.w	r5, r5, #16
   26734:	9b16      	ldr	r3, [sp, #88]	; 0x58
   26736:	4628      	mov	r0, r5
   26738:	461a      	mov	r2, r3
   2673a:	9b02      	ldr	r3, [sp, #8]
   2673c:	6013      	str	r3, [r2, #0]
   2673e:	9b07      	ldr	r3, [sp, #28]
   26740:	461a      	mov	r2, r3
   26742:	9b01      	ldr	r3, [sp, #4]
   26744:	6013      	str	r3, [r2, #0]
   26746:	b00b      	add	sp, #44	; 0x2c
   26748:	ecbd 8b02 	vpop	{d8}
   2674c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26750:	f04f 0c01 	mov.w	ip, #1
   26754:	78a3      	ldrb	r3, [r4, #2]
   26756:	1ca6      	adds	r6, r4, #2
   26758:	f818 3003 	ldrb.w	r3, [r8, r3]
   2675c:	1e59      	subs	r1, r3, #1
   2675e:	2918      	cmp	r1, #24
   26760:	d8a3      	bhi.n	266aa <__gethex+0x1e6>
   26762:	7871      	ldrb	r1, [r6, #1]
   26764:	3b10      	subs	r3, #16
   26766:	3601      	adds	r6, #1
   26768:	f818 1001 	ldrb.w	r1, [r8, r1]
   2676c:	1e48      	subs	r0, r1, #1
   2676e:	2818      	cmp	r0, #24
   26770:	d80b      	bhi.n	2678a <__gethex+0x2c6>
   26772:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   26776:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   2677a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   2677e:	f818 1000 	ldrb.w	r1, [r8, r0]
   26782:	1e48      	subs	r0, r1, #1
   26784:	3b10      	subs	r3, #16
   26786:	2818      	cmp	r0, #24
   26788:	d9f3      	bls.n	26772 <__gethex+0x2ae>
   2678a:	f1bc 0f00 	cmp.w	ip, #0
   2678e:	d000      	beq.n	26792 <__gethex+0x2ce>
   26790:	425b      	negs	r3, r3
   26792:	9901      	ldr	r1, [sp, #4]
   26794:	4419      	add	r1, r3
   26796:	9101      	str	r1, [sp, #4]
   26798:	e6e2      	b.n	26560 <__gethex+0x9c>
   2679a:	1b06      	subs	r6, r0, r4
   2679c:	f8dd 8008 	ldr.w	r8, [sp, #8]
   267a0:	4631      	mov	r1, r6
   267a2:	4640      	mov	r0, r8
   267a4:	f001 f85c 	bl	27860 <__any_on>
   267a8:	4607      	mov	r7, r0
   267aa:	b178      	cbz	r0, 267cc <__gethex+0x308>
   267ac:	1e72      	subs	r2, r6, #1
   267ae:	2701      	movs	r7, #1
   267b0:	9d06      	ldr	r5, [sp, #24]
   267b2:	1151      	asrs	r1, r2, #5
   267b4:	f002 031f 	and.w	r3, r2, #31
   267b8:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
   267bc:	fa07 f303 	lsl.w	r3, r7, r3
   267c0:	420b      	tst	r3, r1
   267c2:	d003      	beq.n	267cc <__gethex+0x308>
   267c4:	42ba      	cmp	r2, r7
   267c6:	f300 80bf 	bgt.w	26948 <__gethex+0x484>
   267ca:	2702      	movs	r7, #2
   267cc:	4631      	mov	r1, r6
   267ce:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
   267d2:	4433      	add	r3, r6
   267d4:	9301      	str	r3, [sp, #4]
   267d6:	f7ff fe1f 	bl	26418 <rshift>
   267da:	e723      	b.n	26624 <__gethex+0x160>
   267dc:	0002c3b4 	.word	0x0002c3b4
   267e0:	0002c2b0 	.word	0x0002c2b0
   267e4:	1e6e      	subs	r6, r5, #1
   267e6:	2f00      	cmp	r7, #0
   267e8:	f040 80a2 	bne.w	26930 <__gethex+0x46c>
   267ec:	2e00      	cmp	r6, #0
   267ee:	f040 80a5 	bne.w	2693c <__gethex+0x478>
   267f2:	2301      	movs	r3, #1
   267f4:	9906      	ldr	r1, [sp, #24]
   267f6:	1172      	asrs	r2, r6, #5
   267f8:	f006 061f 	and.w	r6, r6, #31
   267fc:	9802      	ldr	r0, [sp, #8]
   267fe:	1b64      	subs	r4, r4, r5
   26800:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   26804:	fa03 f606 	lsl.w	r6, r3, r6
   26808:	4629      	mov	r1, r5
   2680a:	2502      	movs	r5, #2
   2680c:	4216      	tst	r6, r2
   2680e:	bf18      	it	ne
   26810:	f047 0702 	orrne.w	r7, r7, #2
   26814:	f7ff fe00 	bl	26418 <rshift>
   26818:	9b03      	ldr	r3, [sp, #12]
   2681a:	685b      	ldr	r3, [r3, #4]
   2681c:	9301      	str	r3, [sp, #4]
   2681e:	e77b      	b.n	26718 <__gethex+0x254>
   26820:	7829      	ldrb	r1, [r5, #0]
   26822:	462c      	mov	r4, r5
   26824:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   26828:	2950      	cmp	r1, #80	; 0x50
   2682a:	f000 8096 	beq.w	2695a <__gethex+0x496>
   2682e:	f8c9 4000 	str.w	r4, [r9]
   26832:	e740      	b.n	266b6 <__gethex+0x1f2>
   26834:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   26836:	f1c3 0301 	rsb	r3, r3, #1
   2683a:	9317      	str	r3, [sp, #92]	; 0x5c
   2683c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2683e:	2b00      	cmp	r3, #0
   26840:	f43f af76 	beq.w	26730 <__gethex+0x26c>
   26844:	9b02      	ldr	r3, [sp, #8]
   26846:	2000      	movs	r0, #0
   26848:	f8dd c018 	ldr.w	ip, [sp, #24]
   2684c:	691e      	ldr	r6, [r3, #16]
   2684e:	4663      	mov	r3, ip
   26850:	eb0c 0186 	add.w	r1, ip, r6, lsl #2
   26854:	00b7      	lsls	r7, r6, #2
   26856:	e003      	b.n	26860 <__gethex+0x39c>
   26858:	4299      	cmp	r1, r3
   2685a:	f843 0c04 	str.w	r0, [r3, #-4]
   2685e:	d942      	bls.n	268e6 <__gethex+0x422>
   26860:	469e      	mov	lr, r3
   26862:	f853 2b04 	ldr.w	r2, [r3], #4
   26866:	f1b2 3fff 	cmp.w	r2, #4294967295
   2686a:	d0f5      	beq.n	26858 <__gethex+0x394>
   2686c:	3201      	adds	r2, #1
   2686e:	2d02      	cmp	r5, #2
   26870:	f8ce 2000 	str.w	r2, [lr]
   26874:	f000 8098 	beq.w	269a8 <__gethex+0x4e4>
   26878:	f014 041f 	ands.w	r4, r4, #31
   2687c:	f040 80b9 	bne.w	269f2 <__gethex+0x52e>
   26880:	2521      	movs	r5, #33	; 0x21
   26882:	e757      	b.n	26734 <__gethex+0x270>
   26884:	07ba      	lsls	r2, r7, #30
   26886:	f57f af53 	bpl.w	26730 <__gethex+0x26c>
   2688a:	9b06      	ldr	r3, [sp, #24]
   2688c:	681b      	ldr	r3, [r3, #0]
   2688e:	431f      	orrs	r7, r3
   26890:	07fb      	lsls	r3, r7, #31
   26892:	d4d7      	bmi.n	26844 <__gethex+0x380>
   26894:	e74c      	b.n	26730 <__gethex+0x26c>
   26896:	f04f 0c00 	mov.w	ip, #0
   2689a:	e75b      	b.n	26754 <__gethex+0x290>
   2689c:	1a22      	subs	r2, r4, r0
   2689e:	9b01      	ldr	r3, [sp, #4]
   268a0:	9902      	ldr	r1, [sp, #8]
   268a2:	ee18 0a10 	vmov	r0, s16
   268a6:	1a9b      	subs	r3, r3, r2
   268a8:	2700      	movs	r7, #0
   268aa:	9301      	str	r3, [sp, #4]
   268ac:	f000 fd4c 	bl	27348 <__lshift>
   268b0:	4603      	mov	r3, r0
   268b2:	9002      	str	r0, [sp, #8]
   268b4:	3314      	adds	r3, #20
   268b6:	9306      	str	r3, [sp, #24]
   268b8:	e6b4      	b.n	26624 <__gethex+0x160>
   268ba:	5cb3      	ldrb	r3, [r6, r2]
   268bc:	18b0      	adds	r0, r6, r2
   268be:	f818 1003 	ldrb.w	r1, [r8, r3]
   268c2:	4606      	mov	r6, r0
   268c4:	2900      	cmp	r1, #0
   268c6:	f43f ae45 	beq.w	26554 <__gethex+0x90>
   268ca:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   268ce:	f818 1003 	ldrb.w	r1, [r8, r3]
   268d2:	2900      	cmp	r1, #0
   268d4:	d1f9      	bne.n	268ca <__gethex+0x406>
   268d6:	1b80      	subs	r0, r0, r6
   268d8:	0081      	lsls	r1, r0, #2
   268da:	9101      	str	r1, [sp, #4]
   268dc:	e63a      	b.n	26554 <__gethex+0x90>
   268de:	3502      	adds	r5, #2
   268e0:	f04f 0a00 	mov.w	sl, #0
   268e4:	e613      	b.n	2650e <__gethex+0x4a>
   268e6:	9b02      	ldr	r3, [sp, #8]
   268e8:	689b      	ldr	r3, [r3, #8]
   268ea:	429e      	cmp	r6, r3
   268ec:	da63      	bge.n	269b6 <__gethex+0x4f2>
   268ee:	4633      	mov	r3, r6
   268f0:	9802      	ldr	r0, [sp, #8]
   268f2:	1c5a      	adds	r2, r3, #1
   268f4:	2101      	movs	r1, #1
   268f6:	2d02      	cmp	r5, #2
   268f8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   268fc:	6102      	str	r2, [r0, #16]
   268fe:	6159      	str	r1, [r3, #20]
   26900:	d052      	beq.n	269a8 <__gethex+0x4e4>
   26902:	4296      	cmp	r6, r2
   26904:	dab8      	bge.n	26878 <__gethex+0x3b4>
   26906:	2101      	movs	r1, #1
   26908:	e9dd 4001 	ldrd	r4, r0, [sp, #4]
   2690c:	440c      	add	r4, r1
   2690e:	9401      	str	r4, [sp, #4]
   26910:	f7ff fd82 	bl	26418 <rshift>
   26914:	9b03      	ldr	r3, [sp, #12]
   26916:	689b      	ldr	r3, [r3, #8]
   26918:	42a3      	cmp	r3, r4
   2691a:	dab1      	bge.n	26880 <__gethex+0x3bc>
   2691c:	9902      	ldr	r1, [sp, #8]
   2691e:	ee18 0a10 	vmov	r0, s16
   26922:	f000 faf3 	bl	26f0c <_Bfree>
   26926:	2300      	movs	r3, #0
   26928:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2692a:	25a3      	movs	r5, #163	; 0xa3
   2692c:	6013      	str	r3, [r2, #0]
   2692e:	e6c7      	b.n	266c0 <__gethex+0x1fc>
   26930:	2701      	movs	r7, #1
   26932:	e75e      	b.n	267f2 <__gethex+0x32e>
   26934:	9e06      	ldr	r6, [sp, #24]
   26936:	f04f 0900 	mov.w	r9, #0
   2693a:	e65f      	b.n	265fc <__gethex+0x138>
   2693c:	4631      	mov	r1, r6
   2693e:	9802      	ldr	r0, [sp, #8]
   26940:	f000 ff8e 	bl	27860 <__any_on>
   26944:	4607      	mov	r7, r0
   26946:	e754      	b.n	267f2 <__gethex+0x32e>
   26948:	1eb1      	subs	r1, r6, #2
   2694a:	4640      	mov	r0, r8
   2694c:	f000 ff88 	bl	27860 <__any_on>
   26950:	2800      	cmp	r0, #0
   26952:	f43f af3a 	beq.w	267ca <__gethex+0x306>
   26956:	2703      	movs	r7, #3
   26958:	e738      	b.n	267cc <__gethex+0x308>
   2695a:	2300      	movs	r3, #0
   2695c:	2701      	movs	r7, #1
   2695e:	9301      	str	r3, [sp, #4]
   26960:	e695      	b.n	2668e <__gethex+0x1ca>
   26962:	42ac      	cmp	r4, r5
   26964:	f47f ae77 	bne.w	26656 <__gethex+0x192>
   26968:	2c01      	cmp	r4, #1
   2696a:	d008      	beq.n	2697e <__gethex+0x4ba>
   2696c:	1e61      	subs	r1, r4, #1
   2696e:	9802      	ldr	r0, [sp, #8]
   26970:	f000 ff76 	bl	27860 <__any_on>
   26974:	2800      	cmp	r0, #0
   26976:	f43f ae6e 	beq.w	26656 <__gethex+0x192>
   2697a:	9b03      	ldr	r3, [sp, #12]
   2697c:	685b      	ldr	r3, [r3, #4]
   2697e:	9907      	ldr	r1, [sp, #28]
   26980:	2201      	movs	r2, #1
   26982:	2562      	movs	r5, #98	; 0x62
   26984:	600b      	str	r3, [r1, #0]
   26986:	9b02      	ldr	r3, [sp, #8]
   26988:	9906      	ldr	r1, [sp, #24]
   2698a:	611a      	str	r2, [r3, #16]
   2698c:	600a      	str	r2, [r1, #0]
   2698e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   26990:	6013      	str	r3, [r2, #0]
   26992:	e695      	b.n	266c0 <__gethex+0x1fc>
   26994:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   26996:	2a00      	cmp	r2, #0
   26998:	f43f ae5d 	beq.w	26656 <__gethex+0x192>
   2699c:	e7ef      	b.n	2697e <__gethex+0x4ba>
   2699e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   269a0:	2a00      	cmp	r2, #0
   269a2:	f47f ae58 	bne.w	26656 <__gethex+0x192>
   269a6:	e7ea      	b.n	2697e <__gethex+0x4ba>
   269a8:	9b03      	ldr	r3, [sp, #12]
   269aa:	681b      	ldr	r3, [r3, #0]
   269ac:	3b01      	subs	r3, #1
   269ae:	42a3      	cmp	r3, r4
   269b0:	d02a      	beq.n	26a08 <__gethex+0x544>
   269b2:	2522      	movs	r5, #34	; 0x22
   269b4:	e6be      	b.n	26734 <__gethex+0x270>
   269b6:	9b02      	ldr	r3, [sp, #8]
   269b8:	ee18 0a10 	vmov	r0, s16
   269bc:	6859      	ldr	r1, [r3, #4]
   269be:	3101      	adds	r1, #1
   269c0:	f000 fa7e 	bl	26ec0 <_Balloc>
   269c4:	4680      	mov	r8, r0
   269c6:	b388      	cbz	r0, 26a2c <__gethex+0x568>
   269c8:	9a02      	ldr	r2, [sp, #8]
   269ca:	300c      	adds	r0, #12
   269cc:	6913      	ldr	r3, [r2, #16]
   269ce:	f102 010c 	add.w	r1, r2, #12
   269d2:	3302      	adds	r3, #2
   269d4:	009a      	lsls	r2, r3, #2
   269d6:	f7e6 f8cd 	bl	cb74 <memcpy>
   269da:	9902      	ldr	r1, [sp, #8]
   269dc:	ee18 0a10 	vmov	r0, s16
   269e0:	f8cd 8008 	str.w	r8, [sp, #8]
   269e4:	f000 fa92 	bl	26f0c <_Bfree>
   269e8:	f108 0c14 	add.w	ip, r8, #20
   269ec:	f8d8 3010 	ldr.w	r3, [r8, #16]
   269f0:	e77e      	b.n	268f0 <__gethex+0x42c>
   269f2:	4467      	add	r7, ip
   269f4:	f1c4 0420 	rsb	r4, r4, #32
   269f8:	f857 0c04 	ldr.w	r0, [r7, #-4]
   269fc:	f000 fb40 	bl	27080 <__hi0bits>
   26a00:	42a0      	cmp	r0, r4
   26a02:	f6bf af3d 	bge.w	26880 <__gethex+0x3bc>
   26a06:	e77e      	b.n	26906 <__gethex+0x442>
   26a08:	1162      	asrs	r2, r4, #5
   26a0a:	2301      	movs	r3, #1
   26a0c:	f004 041f 	and.w	r4, r4, #31
   26a10:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
   26a14:	40a3      	lsls	r3, r4
   26a16:	4213      	tst	r3, r2
   26a18:	bf0c      	ite	eq
   26a1a:	2522      	moveq	r5, #34	; 0x22
   26a1c:	2521      	movne	r5, #33	; 0x21
   26a1e:	e689      	b.n	26734 <__gethex+0x270>
   26a20:	4602      	mov	r2, r0
   26a22:	4b05      	ldr	r3, [pc, #20]	; (26a38 <__gethex+0x574>)
   26a24:	21de      	movs	r1, #222	; 0xde
   26a26:	4805      	ldr	r0, [pc, #20]	; (26a3c <__gethex+0x578>)
   26a28:	f7fb f890 	bl	21b4c <__assert_func>
   26a2c:	4602      	mov	r2, r0
   26a2e:	4b02      	ldr	r3, [pc, #8]	; (26a38 <__gethex+0x574>)
   26a30:	2184      	movs	r1, #132	; 0x84
   26a32:	4802      	ldr	r0, [pc, #8]	; (26a3c <__gethex+0x578>)
   26a34:	f7fb f88a 	bl	21b4c <__assert_func>
   26a38:	0002c19c 	.word	0x0002c19c
   26a3c:	0002c22c 	.word	0x0002c22c

00026a40 <__match>:
   26a40:	b470      	push	{r4, r5, r6}
   26a42:	4606      	mov	r6, r0
   26a44:	6804      	ldr	r4, [r0, #0]
   26a46:	e008      	b.n	26a5a <__match+0x1a>
   26a48:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   26a4c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
   26a50:	2d19      	cmp	r5, #25
   26a52:	bf98      	it	ls
   26a54:	3320      	addls	r3, #32
   26a56:	4293      	cmp	r3, r2
   26a58:	d108      	bne.n	26a6c <__match+0x2c>
   26a5a:	f811 2b01 	ldrb.w	r2, [r1], #1
   26a5e:	2a00      	cmp	r2, #0
   26a60:	d1f2      	bne.n	26a48 <__match+0x8>
   26a62:	3401      	adds	r4, #1
   26a64:	2001      	movs	r0, #1
   26a66:	6034      	str	r4, [r6, #0]
   26a68:	bc70      	pop	{r4, r5, r6}
   26a6a:	4770      	bx	lr
   26a6c:	2000      	movs	r0, #0
   26a6e:	bc70      	pop	{r4, r5, r6}
   26a70:	4770      	bx	lr
   26a72:	bf00      	nop

00026a74 <__hexnan>:
   26a74:	6809      	ldr	r1, [r1, #0]
   26a76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26a7a:	114b      	asrs	r3, r1, #5
   26a7c:	b085      	sub	sp, #20
   26a7e:	f011 011f 	ands.w	r1, r1, #31
   26a82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   26a86:	9002      	str	r0, [sp, #8]
   26a88:	9103      	str	r1, [sp, #12]
   26a8a:	f040 809c 	bne.w	26bc6 <__hexnan+0x152>
   26a8e:	f1a3 0c04 	sub.w	ip, r3, #4
   26a92:	9301      	str	r3, [sp, #4]
   26a94:	9902      	ldr	r1, [sp, #8]
   26a96:	2300      	movs	r3, #0
   26a98:	9801      	ldr	r0, [sp, #4]
   26a9a:	6809      	ldr	r1, [r1, #0]
   26a9c:	f840 3c04 	str.w	r3, [r0, #-4]
   26aa0:	1c4f      	adds	r7, r1, #1
   26aa2:	7849      	ldrb	r1, [r1, #1]
   26aa4:	2900      	cmp	r1, #0
   26aa6:	f000 80a4 	beq.w	26bf2 <__hexnan+0x17e>
   26aaa:	46e0      	mov	r8, ip
   26aac:	4664      	mov	r4, ip
   26aae:	f8df 9160 	ldr.w	r9, [pc, #352]	; 26c10 <__hexnan+0x19c>
   26ab2:	469a      	mov	sl, r3
   26ab4:	469e      	mov	lr, r3
   26ab6:	e00e      	b.n	26ad6 <__hexnan+0x62>
   26ab8:	2920      	cmp	r1, #32
   26aba:	f200 8098 	bhi.w	26bee <__hexnan+0x17a>
   26abe:	45f2      	cmp	sl, lr
   26ac0:	da06      	bge.n	26ad0 <__hexnan+0x5c>
   26ac2:	4544      	cmp	r4, r8
   26ac4:	d201      	bcs.n	26aca <__hexnan+0x56>
   26ac6:	2b07      	cmp	r3, #7
   26ac8:	dd6a      	ble.n	26ba0 <__hexnan+0x12c>
   26aca:	42a2      	cmp	r2, r4
   26acc:	d360      	bcc.n	26b90 <__hexnan+0x11c>
   26ace:	2308      	movs	r3, #8
   26ad0:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   26ad4:	b191      	cbz	r1, 26afc <__hexnan+0x88>
   26ad6:	f819 0001 	ldrb.w	r0, [r9, r1]
   26ada:	2800      	cmp	r0, #0
   26adc:	d0ec      	beq.n	26ab8 <__hexnan+0x44>
   26ade:	3301      	adds	r3, #1
   26ae0:	f10e 0e01 	add.w	lr, lr, #1
   26ae4:	2b08      	cmp	r3, #8
   26ae6:	dc4b      	bgt.n	26b80 <__hexnan+0x10c>
   26ae8:	6821      	ldr	r1, [r4, #0]
   26aea:	0109      	lsls	r1, r1, #4
   26aec:	f000 000f 	and.w	r0, r0, #15
   26af0:	4308      	orrs	r0, r1
   26af2:	6020      	str	r0, [r4, #0]
   26af4:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   26af8:	2900      	cmp	r1, #0
   26afa:	d1ec      	bne.n	26ad6 <__hexnan+0x62>
   26afc:	f1be 0f00 	cmp.w	lr, #0
   26b00:	d077      	beq.n	26bf2 <__hexnan+0x17e>
   26b02:	45a0      	cmp	r8, r4
   26b04:	d913      	bls.n	26b2e <__hexnan+0xba>
   26b06:	2b07      	cmp	r3, #7
   26b08:	dc11      	bgt.n	26b2e <__hexnan+0xba>
   26b0a:	f1c3 0308 	rsb	r3, r3, #8
   26b0e:	6825      	ldr	r5, [r4, #0]
   26b10:	4621      	mov	r1, r4
   26b12:	009b      	lsls	r3, r3, #2
   26b14:	f1c3 0720 	rsb	r7, r3, #32
   26b18:	684e      	ldr	r6, [r1, #4]
   26b1a:	fa06 f007 	lsl.w	r0, r6, r7
   26b1e:	4328      	orrs	r0, r5
   26b20:	fa26 f503 	lsr.w	r5, r6, r3
   26b24:	6008      	str	r0, [r1, #0]
   26b26:	f841 5f04 	str.w	r5, [r1, #4]!
   26b2a:	4588      	cmp	r8, r1
   26b2c:	d8f4      	bhi.n	26b18 <__hexnan+0xa4>
   26b2e:	42a2      	cmp	r2, r4
   26b30:	d24d      	bcs.n	26bce <__hexnan+0x15a>
   26b32:	1f11      	subs	r1, r2, #4
   26b34:	4623      	mov	r3, r4
   26b36:	f853 0b04 	ldr.w	r0, [r3], #4
   26b3a:	4563      	cmp	r3, ip
   26b3c:	f841 0f04 	str.w	r0, [r1, #4]!
   26b40:	d9f9      	bls.n	26b36 <__hexnan+0xc2>
   26b42:	ebac 0304 	sub.w	r3, ip, r4
   26b46:	f10c 0001 	add.w	r0, ip, #1
   26b4a:	3401      	adds	r4, #1
   26b4c:	2100      	movs	r1, #0
   26b4e:	f023 0303 	bic.w	r3, r3, #3
   26b52:	3304      	adds	r3, #4
   26b54:	42a0      	cmp	r0, r4
   26b56:	bf38      	it	cc
   26b58:	2304      	movcc	r3, #4
   26b5a:	4413      	add	r3, r2
   26b5c:	f843 1b04 	str.w	r1, [r3], #4
   26b60:	4563      	cmp	r3, ip
   26b62:	d9fb      	bls.n	26b5c <__hexnan+0xe8>
   26b64:	9b01      	ldr	r3, [sp, #4]
   26b66:	f853 3c04 	ldr.w	r3, [r3, #-4]
   26b6a:	b92b      	cbnz	r3, 26b78 <__hexnan+0x104>
   26b6c:	4562      	cmp	r2, ip
   26b6e:	d044      	beq.n	26bfa <__hexnan+0x186>
   26b70:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   26b74:	2b00      	cmp	r3, #0
   26b76:	d0f9      	beq.n	26b6c <__hexnan+0xf8>
   26b78:	2005      	movs	r0, #5
   26b7a:	b005      	add	sp, #20
   26b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26b80:	42a2      	cmp	r2, r4
   26b82:	d2a5      	bcs.n	26ad0 <__hexnan+0x5c>
   26b84:	2300      	movs	r3, #0
   26b86:	3c04      	subs	r4, #4
   26b88:	6023      	str	r3, [r4, #0]
   26b8a:	4619      	mov	r1, r3
   26b8c:	2301      	movs	r3, #1
   26b8e:	e7ad      	b.n	26aec <__hexnan+0x78>
   26b90:	f1a4 0804 	sub.w	r8, r4, #4
   26b94:	2300      	movs	r3, #0
   26b96:	46f2      	mov	sl, lr
   26b98:	f844 3c04 	str.w	r3, [r4, #-4]
   26b9c:	4644      	mov	r4, r8
   26b9e:	e797      	b.n	26ad0 <__hexnan+0x5c>
   26ba0:	f1c3 0108 	rsb	r1, r3, #8
   26ba4:	6825      	ldr	r5, [r4, #0]
   26ba6:	4623      	mov	r3, r4
   26ba8:	0089      	lsls	r1, r1, #2
   26baa:	f1c1 0b20 	rsb	fp, r1, #32
   26bae:	685e      	ldr	r6, [r3, #4]
   26bb0:	fa06 f00b 	lsl.w	r0, r6, fp
   26bb4:	4328      	orrs	r0, r5
   26bb6:	fa26 f501 	lsr.w	r5, r6, r1
   26bba:	6018      	str	r0, [r3, #0]
   26bbc:	f843 5f04 	str.w	r5, [r3, #4]!
   26bc0:	4543      	cmp	r3, r8
   26bc2:	d3f4      	bcc.n	26bae <__hexnan+0x13a>
   26bc4:	e781      	b.n	26aca <__hexnan+0x56>
   26bc6:	1d19      	adds	r1, r3, #4
   26bc8:	469c      	mov	ip, r3
   26bca:	9101      	str	r1, [sp, #4]
   26bcc:	e762      	b.n	26a94 <__hexnan+0x20>
   26bce:	9b03      	ldr	r3, [sp, #12]
   26bd0:	2b00      	cmp	r3, #0
   26bd2:	d0c7      	beq.n	26b64 <__hexnan+0xf0>
   26bd4:	9b03      	ldr	r3, [sp, #12]
   26bd6:	9c01      	ldr	r4, [sp, #4]
   26bd8:	f1c3 0120 	rsb	r1, r3, #32
   26bdc:	f04f 33ff 	mov.w	r3, #4294967295
   26be0:	f854 0c04 	ldr.w	r0, [r4, #-4]
   26be4:	40cb      	lsrs	r3, r1
   26be6:	4003      	ands	r3, r0
   26be8:	f844 3c04 	str.w	r3, [r4, #-4]
   26bec:	e7bd      	b.n	26b6a <__hexnan+0xf6>
   26bee:	2929      	cmp	r1, #41	; 0x29
   26bf0:	d00a      	beq.n	26c08 <__hexnan+0x194>
   26bf2:	2004      	movs	r0, #4
   26bf4:	b005      	add	sp, #20
   26bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26bfa:	2301      	movs	r3, #1
   26bfc:	2005      	movs	r0, #5
   26bfe:	f8cc 3000 	str.w	r3, [ip]
   26c02:	b005      	add	sp, #20
   26c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26c08:	3701      	adds	r7, #1
   26c0a:	9902      	ldr	r1, [sp, #8]
   26c0c:	600f      	str	r7, [r1, #0]
   26c0e:	e775      	b.n	26afc <__hexnan+0x88>
   26c10:	0002c2b0 	.word	0x0002c2b0

00026c14 <iswspace>:
   26c14:	2100      	movs	r1, #0
   26c16:	f000 b801 	b.w	26c1c <iswspace_l>
   26c1a:	bf00      	nop

00026c1c <iswspace_l>:
   26c1c:	28ff      	cmp	r0, #255	; 0xff
   26c1e:	d804      	bhi.n	26c2a <iswspace_l+0xe>
   26c20:	4b03      	ldr	r3, [pc, #12]	; (26c30 <iswspace_l+0x14>)
   26c22:	5cc0      	ldrb	r0, [r0, r3]
   26c24:	f000 0008 	and.w	r0, r0, #8
   26c28:	4770      	bx	lr
   26c2a:	2000      	movs	r0, #0
   26c2c:	4770      	bx	lr
   26c2e:	bf00      	nop
   26c30:	0002bfa1 	.word	0x0002bfa1

00026c34 <__locale_mb_cur_max>:
   26c34:	4b01      	ldr	r3, [pc, #4]	; (26c3c <__locale_mb_cur_max+0x8>)
   26c36:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   26c3a:	4770      	bx	lr
   26c3c:	200208f0 	.word	0x200208f0

00026c40 <_localeconv_r>:
   26c40:	4800      	ldr	r0, [pc, #0]	; (26c44 <_localeconv_r+0x4>)
   26c42:	4770      	bx	lr
   26c44:	200209e0 	.word	0x200209e0

00026c48 <__retarget_lock_init_recursive>:
   26c48:	4770      	bx	lr
   26c4a:	bf00      	nop

00026c4c <__retarget_lock_close_recursive>:
   26c4c:	4770      	bx	lr
   26c4e:	bf00      	nop

00026c50 <__retarget_lock_acquire_recursive>:
   26c50:	4770      	bx	lr
   26c52:	bf00      	nop

00026c54 <__retarget_lock_release_recursive>:
   26c54:	4770      	bx	lr
   26c56:	bf00      	nop

00026c58 <_lseek_r>:
   26c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26c5a:	460f      	mov	r7, r1
   26c5c:	4d08      	ldr	r5, [pc, #32]	; (26c80 <_lseek_r+0x28>)
   26c5e:	2600      	movs	r6, #0
   26c60:	4611      	mov	r1, r2
   26c62:	4604      	mov	r4, r0
   26c64:	461a      	mov	r2, r3
   26c66:	4638      	mov	r0, r7
   26c68:	602e      	str	r6, [r5, #0]
   26c6a:	f002 fb90 	bl	2938e <_lseek>
   26c6e:	1c43      	adds	r3, r0, #1
   26c70:	d000      	beq.n	26c74 <_lseek_r+0x1c>
   26c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26c74:	682b      	ldr	r3, [r5, #0]
   26c76:	2b00      	cmp	r3, #0
   26c78:	d0fb      	beq.n	26c72 <_lseek_r+0x1a>
   26c7a:	6023      	str	r3, [r4, #0]
   26c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26c7e:	bf00      	nop
   26c80:	200251ac 	.word	0x200251ac

00026c84 <__swhatbuf_r>:
   26c84:	b570      	push	{r4, r5, r6, lr}
   26c86:	460c      	mov	r4, r1
   26c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   26c8c:	b096      	sub	sp, #88	; 0x58
   26c8e:	4615      	mov	r5, r2
   26c90:	2900      	cmp	r1, #0
   26c92:	461e      	mov	r6, r3
   26c94:	db14      	blt.n	26cc0 <__swhatbuf_r+0x3c>
   26c96:	466a      	mov	r2, sp
   26c98:	f001 fb26 	bl	282e8 <_fstat_r>
   26c9c:	2800      	cmp	r0, #0
   26c9e:	db0f      	blt.n	26cc0 <__swhatbuf_r+0x3c>
   26ca0:	9a01      	ldr	r2, [sp, #4]
   26ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   26ca6:	f44f 6000 	mov.w	r0, #2048	; 0x800
   26caa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   26cae:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   26cb2:	fab2 f282 	clz	r2, r2
   26cb6:	0952      	lsrs	r2, r2, #5
   26cb8:	6032      	str	r2, [r6, #0]
   26cba:	602b      	str	r3, [r5, #0]
   26cbc:	b016      	add	sp, #88	; 0x58
   26cbe:	bd70      	pop	{r4, r5, r6, pc}
   26cc0:	89a1      	ldrh	r1, [r4, #12]
   26cc2:	2300      	movs	r3, #0
   26cc4:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   26cc8:	6033      	str	r3, [r6, #0]
   26cca:	d004      	beq.n	26cd6 <__swhatbuf_r+0x52>
   26ccc:	2240      	movs	r2, #64	; 0x40
   26cce:	4618      	mov	r0, r3
   26cd0:	602a      	str	r2, [r5, #0]
   26cd2:	b016      	add	sp, #88	; 0x58
   26cd4:	bd70      	pop	{r4, r5, r6, pc}
   26cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   26cda:	602b      	str	r3, [r5, #0]
   26cdc:	b016      	add	sp, #88	; 0x58
   26cde:	bd70      	pop	{r4, r5, r6, pc}

00026ce0 <__smakebuf_r>:
   26ce0:	898b      	ldrh	r3, [r1, #12]
   26ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
   26ce4:	079d      	lsls	r5, r3, #30
   26ce6:	b083      	sub	sp, #12
   26ce8:	460c      	mov	r4, r1
   26cea:	d507      	bpl.n	26cfc <__smakebuf_r+0x1c>
   26cec:	f101 0343 	add.w	r3, r1, #67	; 0x43
   26cf0:	2201      	movs	r2, #1
   26cf2:	600b      	str	r3, [r1, #0]
   26cf4:	e9c1 3204 	strd	r3, r2, [r1, #16]
   26cf8:	b003      	add	sp, #12
   26cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26cfc:	4606      	mov	r6, r0
   26cfe:	ab01      	add	r3, sp, #4
   26d00:	466a      	mov	r2, sp
   26d02:	f7ff ffbf 	bl	26c84 <__swhatbuf_r>
   26d06:	9900      	ldr	r1, [sp, #0]
   26d08:	4605      	mov	r5, r0
   26d0a:	4630      	mov	r0, r6
   26d0c:	f7fa ff64 	bl	21bd8 <_malloc_r>
   26d10:	b180      	cbz	r0, 26d34 <__smakebuf_r+0x54>
   26d12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   26d16:	4f17      	ldr	r7, [pc, #92]	; (26d74 <__smakebuf_r+0x94>)
   26d18:	f042 0380 	orr.w	r3, r2, #128	; 0x80
   26d1c:	9900      	ldr	r1, [sp, #0]
   26d1e:	9a01      	ldr	r2, [sp, #4]
   26d20:	63f7      	str	r7, [r6, #60]	; 0x3c
   26d22:	81a3      	strh	r3, [r4, #12]
   26d24:	6020      	str	r0, [r4, #0]
   26d26:	e9c4 0104 	strd	r0, r1, [r4, #16]
   26d2a:	b99a      	cbnz	r2, 26d54 <__smakebuf_r+0x74>
   26d2c:	432b      	orrs	r3, r5
   26d2e:	81a3      	strh	r3, [r4, #12]
   26d30:	b003      	add	sp, #12
   26d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26d38:	059a      	lsls	r2, r3, #22
   26d3a:	d4dd      	bmi.n	26cf8 <__smakebuf_r+0x18>
   26d3c:	f023 0303 	bic.w	r3, r3, #3
   26d40:	f104 0243 	add.w	r2, r4, #67	; 0x43
   26d44:	2101      	movs	r1, #1
   26d46:	f043 0302 	orr.w	r3, r3, #2
   26d4a:	6022      	str	r2, [r4, #0]
   26d4c:	6122      	str	r2, [r4, #16]
   26d4e:	81a3      	strh	r3, [r4, #12]
   26d50:	6161      	str	r1, [r4, #20]
   26d52:	e7d1      	b.n	26cf8 <__smakebuf_r+0x18>
   26d54:	4630      	mov	r0, r6
   26d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   26d5a:	f001 fadb 	bl	28314 <_isatty_r>
   26d5e:	b910      	cbnz	r0, 26d66 <__smakebuf_r+0x86>
   26d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26d64:	e7e2      	b.n	26d2c <__smakebuf_r+0x4c>
   26d66:	89a2      	ldrh	r2, [r4, #12]
   26d68:	f022 0203 	bic.w	r2, r2, #3
   26d6c:	f042 0201 	orr.w	r2, r2, #1
   26d70:	b213      	sxth	r3, r2
   26d72:	e7db      	b.n	26d2c <__smakebuf_r+0x4c>
   26d74:	00025cb1 	.word	0x00025cb1

00026d78 <_mbrtowc_r>:
   26d78:	b570      	push	{r4, r5, r6, lr}
   26d7a:	b082      	sub	sp, #8
   26d7c:	4606      	mov	r6, r0
   26d7e:	9c06      	ldr	r4, [sp, #24]
   26d80:	b142      	cbz	r2, 26d94 <_mbrtowc_r+0x1c>
   26d82:	4d0d      	ldr	r5, [pc, #52]	; (26db8 <_mbrtowc_r+0x40>)
   26d84:	9400      	str	r4, [sp, #0]
   26d86:	f8d5 50e4 	ldr.w	r5, [r5, #228]	; 0xe4
   26d8a:	47a8      	blx	r5
   26d8c:	1c43      	adds	r3, r0, #1
   26d8e:	d00c      	beq.n	26daa <_mbrtowc_r+0x32>
   26d90:	b002      	add	sp, #8
   26d92:	bd70      	pop	{r4, r5, r6, pc}
   26d94:	4615      	mov	r5, r2
   26d96:	4a08      	ldr	r2, [pc, #32]	; (26db8 <_mbrtowc_r+0x40>)
   26d98:	2301      	movs	r3, #1
   26d9a:	9400      	str	r4, [sp, #0]
   26d9c:	4629      	mov	r1, r5
   26d9e:	f8d2 50e4 	ldr.w	r5, [r2, #228]	; 0xe4
   26da2:	4a06      	ldr	r2, [pc, #24]	; (26dbc <_mbrtowc_r+0x44>)
   26da4:	47a8      	blx	r5
   26da6:	1c43      	adds	r3, r0, #1
   26da8:	d1f2      	bne.n	26d90 <_mbrtowc_r+0x18>
   26daa:	2200      	movs	r2, #0
   26dac:	238a      	movs	r3, #138	; 0x8a
   26dae:	6022      	str	r2, [r4, #0]
   26db0:	6033      	str	r3, [r6, #0]
   26db2:	b002      	add	sp, #8
   26db4:	bd70      	pop	{r4, r5, r6, pc}
   26db6:	bf00      	nop
   26db8:	200208f0 	.word	0x200208f0
   26dbc:	0002bf6c 	.word	0x0002bf6c

00026dc0 <__ascii_mbtowc>:
   26dc0:	b082      	sub	sp, #8
   26dc2:	b149      	cbz	r1, 26dd8 <__ascii_mbtowc+0x18>
   26dc4:	b15a      	cbz	r2, 26dde <__ascii_mbtowc+0x1e>
   26dc6:	b16b      	cbz	r3, 26de4 <__ascii_mbtowc+0x24>
   26dc8:	7813      	ldrb	r3, [r2, #0]
   26dca:	600b      	str	r3, [r1, #0]
   26dcc:	7812      	ldrb	r2, [r2, #0]
   26dce:	1e10      	subs	r0, r2, #0
   26dd0:	bf18      	it	ne
   26dd2:	2001      	movne	r0, #1
   26dd4:	b002      	add	sp, #8
   26dd6:	4770      	bx	lr
   26dd8:	a901      	add	r1, sp, #4
   26dda:	2a00      	cmp	r2, #0
   26ddc:	d1f3      	bne.n	26dc6 <__ascii_mbtowc+0x6>
   26dde:	4610      	mov	r0, r2
   26de0:	b002      	add	sp, #8
   26de2:	4770      	bx	lr
   26de4:	f06f 0001 	mvn.w	r0, #1
   26de8:	e7f4      	b.n	26dd4 <__ascii_mbtowc+0x14>
   26dea:	bf00      	nop

00026dec <memmove>:
   26dec:	4288      	cmp	r0, r1
   26dee:	b4f0      	push	{r4, r5, r6, r7}
   26df0:	d90d      	bls.n	26e0e <memmove+0x22>
   26df2:	188b      	adds	r3, r1, r2
   26df4:	4283      	cmp	r3, r0
   26df6:	d90a      	bls.n	26e0e <memmove+0x22>
   26df8:	1884      	adds	r4, r0, r2
   26dfa:	b132      	cbz	r2, 26e0a <memmove+0x1e>
   26dfc:	4622      	mov	r2, r4
   26dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   26e02:	4299      	cmp	r1, r3
   26e04:	f802 4d01 	strb.w	r4, [r2, #-1]!
   26e08:	d1f9      	bne.n	26dfe <memmove+0x12>
   26e0a:	bcf0      	pop	{r4, r5, r6, r7}
   26e0c:	4770      	bx	lr
   26e0e:	2a0f      	cmp	r2, #15
   26e10:	d80e      	bhi.n	26e30 <memmove+0x44>
   26e12:	4603      	mov	r3, r0
   26e14:	1e54      	subs	r4, r2, #1
   26e16:	2a00      	cmp	r2, #0
   26e18:	d0f7      	beq.n	26e0a <memmove+0x1e>
   26e1a:	3401      	adds	r4, #1
   26e1c:	3b01      	subs	r3, #1
   26e1e:	440c      	add	r4, r1
   26e20:	f811 2b01 	ldrb.w	r2, [r1], #1
   26e24:	42a1      	cmp	r1, r4
   26e26:	f803 2f01 	strb.w	r2, [r3, #1]!
   26e2a:	d1f9      	bne.n	26e20 <memmove+0x34>
   26e2c:	bcf0      	pop	{r4, r5, r6, r7}
   26e2e:	4770      	bx	lr
   26e30:	ea40 0301 	orr.w	r3, r0, r1
   26e34:	079b      	lsls	r3, r3, #30
   26e36:	d13e      	bne.n	26eb6 <memmove+0xca>
   26e38:	f1a2 0310 	sub.w	r3, r2, #16
   26e3c:	f101 0520 	add.w	r5, r1, #32
   26e40:	f101 0610 	add.w	r6, r1, #16
   26e44:	f100 0710 	add.w	r7, r0, #16
   26e48:	f023 040f 	bic.w	r4, r3, #15
   26e4c:	091b      	lsrs	r3, r3, #4
   26e4e:	4425      	add	r5, r4
   26e50:	f856 4c10 	ldr.w	r4, [r6, #-16]
   26e54:	3610      	adds	r6, #16
   26e56:	3710      	adds	r7, #16
   26e58:	f847 4c20 	str.w	r4, [r7, #-32]
   26e5c:	f856 4c1c 	ldr.w	r4, [r6, #-28]
   26e60:	f847 4c1c 	str.w	r4, [r7, #-28]
   26e64:	f856 4c18 	ldr.w	r4, [r6, #-24]
   26e68:	f847 4c18 	str.w	r4, [r7, #-24]
   26e6c:	f856 4c14 	ldr.w	r4, [r6, #-20]
   26e70:	42ae      	cmp	r6, r5
   26e72:	f847 4c14 	str.w	r4, [r7, #-20]
   26e76:	d1eb      	bne.n	26e50 <memmove+0x64>
   26e78:	3301      	adds	r3, #1
   26e7a:	f012 0f0c 	tst.w	r2, #12
   26e7e:	f002 050f 	and.w	r5, r2, #15
   26e82:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   26e86:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   26e8a:	d017      	beq.n	26ebc <memmove+0xd0>
   26e8c:	3d04      	subs	r5, #4
   26e8e:	1f1c      	subs	r4, r3, #4
   26e90:	460e      	mov	r6, r1
   26e92:	f025 0c03 	bic.w	ip, r5, #3
   26e96:	08ad      	lsrs	r5, r5, #2
   26e98:	449c      	add	ip, r3
   26e9a:	f856 7b04 	ldr.w	r7, [r6], #4
   26e9e:	f844 7f04 	str.w	r7, [r4, #4]!
   26ea2:	4564      	cmp	r4, ip
   26ea4:	d1f9      	bne.n	26e9a <memmove+0xae>
   26ea6:	3501      	adds	r5, #1
   26ea8:	f002 0203 	and.w	r2, r2, #3
   26eac:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   26eb0:	eb01 0185 	add.w	r1, r1, r5, lsl #2
   26eb4:	e7ae      	b.n	26e14 <memmove+0x28>
   26eb6:	1e54      	subs	r4, r2, #1
   26eb8:	4603      	mov	r3, r0
   26eba:	e7ae      	b.n	26e1a <memmove+0x2e>
   26ebc:	462a      	mov	r2, r5
   26ebe:	e7a9      	b.n	26e14 <memmove+0x28>

00026ec0 <_Balloc>:
   26ec0:	b538      	push	{r3, r4, r5, lr}
   26ec2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   26ec4:	4605      	mov	r5, r0
   26ec6:	460c      	mov	r4, r1
   26ec8:	b14b      	cbz	r3, 26ede <_Balloc+0x1e>
   26eca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   26ece:	b180      	cbz	r0, 26ef2 <_Balloc+0x32>
   26ed0:	6802      	ldr	r2, [r0, #0]
   26ed2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   26ed6:	2300      	movs	r3, #0
   26ed8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   26edc:	bd38      	pop	{r3, r4, r5, pc}
   26ede:	2221      	movs	r2, #33	; 0x21
   26ee0:	2104      	movs	r1, #4
   26ee2:	f001 f96b 	bl	281bc <_calloc_r>
   26ee6:	4603      	mov	r3, r0
   26ee8:	64e8      	str	r0, [r5, #76]	; 0x4c
   26eea:	2800      	cmp	r0, #0
   26eec:	d1ed      	bne.n	26eca <_Balloc+0xa>
   26eee:	2000      	movs	r0, #0
   26ef0:	bd38      	pop	{r3, r4, r5, pc}
   26ef2:	2101      	movs	r1, #1
   26ef4:	4628      	mov	r0, r5
   26ef6:	fa01 f504 	lsl.w	r5, r1, r4
   26efa:	1d6a      	adds	r2, r5, #5
   26efc:	0092      	lsls	r2, r2, #2
   26efe:	f001 f95d 	bl	281bc <_calloc_r>
   26f02:	2800      	cmp	r0, #0
   26f04:	d0f3      	beq.n	26eee <_Balloc+0x2e>
   26f06:	e9c0 4501 	strd	r4, r5, [r0, #4]
   26f0a:	e7e4      	b.n	26ed6 <_Balloc+0x16>

00026f0c <_Bfree>:
   26f0c:	b131      	cbz	r1, 26f1c <_Bfree+0x10>
   26f0e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   26f10:	684a      	ldr	r2, [r1, #4]
   26f12:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   26f16:	6008      	str	r0, [r1, #0]
   26f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   26f1c:	4770      	bx	lr
   26f1e:	bf00      	nop

00026f20 <__multadd>:
   26f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26f24:	460f      	mov	r7, r1
   26f26:	4680      	mov	r8, r0
   26f28:	690e      	ldr	r6, [r1, #16]
   26f2a:	f101 0014 	add.w	r0, r1, #20
   26f2e:	b082      	sub	sp, #8
   26f30:	2100      	movs	r1, #0
   26f32:	6805      	ldr	r5, [r0, #0]
   26f34:	3101      	adds	r1, #1
   26f36:	b2ac      	uxth	r4, r5
   26f38:	428e      	cmp	r6, r1
   26f3a:	ea4f 4515 	mov.w	r5, r5, lsr #16
   26f3e:	fb02 3304 	mla	r3, r2, r4, r3
   26f42:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   26f46:	b29c      	uxth	r4, r3
   26f48:	fb02 c305 	mla	r3, r2, r5, ip
   26f4c:	eb04 4403 	add.w	r4, r4, r3, lsl #16
   26f50:	ea4f 4313 	mov.w	r3, r3, lsr #16
   26f54:	f840 4b04 	str.w	r4, [r0], #4
   26f58:	dceb      	bgt.n	26f32 <__multadd+0x12>
   26f5a:	b13b      	cbz	r3, 26f6c <__multadd+0x4c>
   26f5c:	68ba      	ldr	r2, [r7, #8]
   26f5e:	42b2      	cmp	r2, r6
   26f60:	dd08      	ble.n	26f74 <__multadd+0x54>
   26f62:	eb07 0286 	add.w	r2, r7, r6, lsl #2
   26f66:	3601      	adds	r6, #1
   26f68:	6153      	str	r3, [r2, #20]
   26f6a:	613e      	str	r6, [r7, #16]
   26f6c:	4638      	mov	r0, r7
   26f6e:	b002      	add	sp, #8
   26f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26f74:	6879      	ldr	r1, [r7, #4]
   26f76:	4640      	mov	r0, r8
   26f78:	9301      	str	r3, [sp, #4]
   26f7a:	3101      	adds	r1, #1
   26f7c:	f7ff ffa0 	bl	26ec0 <_Balloc>
   26f80:	9b01      	ldr	r3, [sp, #4]
   26f82:	4604      	mov	r4, r0
   26f84:	b1c0      	cbz	r0, 26fb8 <__multadd+0x98>
   26f86:	693a      	ldr	r2, [r7, #16]
   26f88:	f107 010c 	add.w	r1, r7, #12
   26f8c:	300c      	adds	r0, #12
   26f8e:	9301      	str	r3, [sp, #4]
   26f90:	3202      	adds	r2, #2
   26f92:	0092      	lsls	r2, r2, #2
   26f94:	f7e5 fdee 	bl	cb74 <memcpy>
   26f98:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
   26f9c:	6879      	ldr	r1, [r7, #4]
   26f9e:	9b01      	ldr	r3, [sp, #4]
   26fa0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   26fa4:	6038      	str	r0, [r7, #0]
   26fa6:	f842 7021 	str.w	r7, [r2, r1, lsl #2]
   26faa:	4627      	mov	r7, r4
   26fac:	eb07 0286 	add.w	r2, r7, r6, lsl #2
   26fb0:	3601      	adds	r6, #1
   26fb2:	6153      	str	r3, [r2, #20]
   26fb4:	613e      	str	r6, [r7, #16]
   26fb6:	e7d9      	b.n	26f6c <__multadd+0x4c>
   26fb8:	4602      	mov	r2, r0
   26fba:	4b02      	ldr	r3, [pc, #8]	; (26fc4 <__multadd+0xa4>)
   26fbc:	21b5      	movs	r1, #181	; 0xb5
   26fbe:	4802      	ldr	r0, [pc, #8]	; (26fc8 <__multadd+0xa8>)
   26fc0:	f7fa fdc4 	bl	21b4c <__assert_func>
   26fc4:	0002c19c 	.word	0x0002c19c
   26fc8:	0002c3cc 	.word	0x0002c3cc

00026fcc <__s2b>:
   26fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26fd0:	461f      	mov	r7, r3
   26fd2:	4c28      	ldr	r4, [pc, #160]	; (27074 <__s2b+0xa8>)
   26fd4:	4606      	mov	r6, r0
   26fd6:	f103 0008 	add.w	r0, r3, #8
   26fda:	2f09      	cmp	r7, #9
   26fdc:	4689      	mov	r9, r1
   26fde:	fb84 3c00 	smull	r3, ip, r4, r0
   26fe2:	ea4f 73e0 	mov.w	r3, r0, asr #31
   26fe6:	4690      	mov	r8, r2
   26fe8:	9d08      	ldr	r5, [sp, #32]
   26fea:	ebc3 036c 	rsb	r3, r3, ip, asr #1
   26fee:	dd38      	ble.n	27062 <__s2b+0x96>
   26ff0:	2401      	movs	r4, #1
   26ff2:	2100      	movs	r1, #0
   26ff4:	0064      	lsls	r4, r4, #1
   26ff6:	3101      	adds	r1, #1
   26ff8:	42a3      	cmp	r3, r4
   26ffa:	dcfb      	bgt.n	26ff4 <__s2b+0x28>
   26ffc:	4630      	mov	r0, r6
   26ffe:	f7ff ff5f 	bl	26ec0 <_Balloc>
   27002:	4601      	mov	r1, r0
   27004:	b378      	cbz	r0, 27066 <__s2b+0x9a>
   27006:	2301      	movs	r3, #1
   27008:	f1b8 0f09 	cmp.w	r8, #9
   2700c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   27010:	dc15      	bgt.n	2703e <__s2b+0x72>
   27012:	f109 040a 	add.w	r4, r9, #10
   27016:	f04f 0809 	mov.w	r8, #9
   2701a:	4547      	cmp	r7, r8
   2701c:	dd0c      	ble.n	27038 <__s2b+0x6c>
   2701e:	eba7 0508 	sub.w	r5, r7, r8
   27022:	4425      	add	r5, r4
   27024:	f814 3b01 	ldrb.w	r3, [r4], #1
   27028:	220a      	movs	r2, #10
   2702a:	4630      	mov	r0, r6
   2702c:	3b30      	subs	r3, #48	; 0x30
   2702e:	f7ff ff77 	bl	26f20 <__multadd>
   27032:	42a5      	cmp	r5, r4
   27034:	4601      	mov	r1, r0
   27036:	d1f5      	bne.n	27024 <__s2b+0x58>
   27038:	4608      	mov	r0, r1
   2703a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2703e:	f109 0a09 	add.w	sl, r9, #9
   27042:	44c1      	add	r9, r8
   27044:	4655      	mov	r5, sl
   27046:	f815 3b01 	ldrb.w	r3, [r5], #1
   2704a:	220a      	movs	r2, #10
   2704c:	4630      	mov	r0, r6
   2704e:	3b30      	subs	r3, #48	; 0x30
   27050:	f7ff ff66 	bl	26f20 <__multadd>
   27054:	454d      	cmp	r5, r9
   27056:	4601      	mov	r1, r0
   27058:	d1f5      	bne.n	27046 <__s2b+0x7a>
   2705a:	f1a8 0408 	sub.w	r4, r8, #8
   2705e:	4454      	add	r4, sl
   27060:	e7db      	b.n	2701a <__s2b+0x4e>
   27062:	2100      	movs	r1, #0
   27064:	e7ca      	b.n	26ffc <__s2b+0x30>
   27066:	4602      	mov	r2, r0
   27068:	4b03      	ldr	r3, [pc, #12]	; (27078 <__s2b+0xac>)
   2706a:	21ce      	movs	r1, #206	; 0xce
   2706c:	4803      	ldr	r0, [pc, #12]	; (2707c <__s2b+0xb0>)
   2706e:	f7fa fd6d 	bl	21b4c <__assert_func>
   27072:	bf00      	nop
   27074:	38e38e39 	.word	0x38e38e39
   27078:	0002c19c 	.word	0x0002c19c
   2707c:	0002c3cc 	.word	0x0002c3cc

00027080 <__hi0bits>:
   27080:	4b0f      	ldr	r3, [pc, #60]	; (270c0 <__hi0bits+0x40>)
   27082:	4003      	ands	r3, r0
   27084:	b9d3      	cbnz	r3, 270bc <__hi0bits+0x3c>
   27086:	0400      	lsls	r0, r0, #16
   27088:	2310      	movs	r3, #16
   2708a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   2708e:	d101      	bne.n	27094 <__hi0bits+0x14>
   27090:	3308      	adds	r3, #8
   27092:	0200      	lsls	r0, r0, #8
   27094:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   27098:	d101      	bne.n	2709e <__hi0bits+0x1e>
   2709a:	3304      	adds	r3, #4
   2709c:	0100      	lsls	r0, r0, #4
   2709e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   270a2:	d101      	bne.n	270a8 <__hi0bits+0x28>
   270a4:	3302      	adds	r3, #2
   270a6:	0080      	lsls	r0, r0, #2
   270a8:	2800      	cmp	r0, #0
   270aa:	db05      	blt.n	270b8 <__hi0bits+0x38>
   270ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   270b0:	f103 0301 	add.w	r3, r3, #1
   270b4:	bf08      	it	eq
   270b6:	2320      	moveq	r3, #32
   270b8:	4618      	mov	r0, r3
   270ba:	4770      	bx	lr
   270bc:	2300      	movs	r3, #0
   270be:	e7e4      	b.n	2708a <__hi0bits+0xa>
   270c0:	ffff0000 	.word	0xffff0000

000270c4 <__lo0bits>:
   270c4:	6803      	ldr	r3, [r0, #0]
   270c6:	4601      	mov	r1, r0
   270c8:	f013 0207 	ands.w	r2, r3, #7
   270cc:	d007      	beq.n	270de <__lo0bits+0x1a>
   270ce:	07da      	lsls	r2, r3, #31
   270d0:	d420      	bmi.n	27114 <__lo0bits+0x50>
   270d2:	0798      	lsls	r0, r3, #30
   270d4:	d522      	bpl.n	2711c <__lo0bits+0x58>
   270d6:	085b      	lsrs	r3, r3, #1
   270d8:	2001      	movs	r0, #1
   270da:	600b      	str	r3, [r1, #0]
   270dc:	4770      	bx	lr
   270de:	b298      	uxth	r0, r3
   270e0:	b1a8      	cbz	r0, 2710e <__lo0bits+0x4a>
   270e2:	4610      	mov	r0, r2
   270e4:	f013 0fff 	tst.w	r3, #255	; 0xff
   270e8:	d101      	bne.n	270ee <__lo0bits+0x2a>
   270ea:	3008      	adds	r0, #8
   270ec:	0a1b      	lsrs	r3, r3, #8
   270ee:	071a      	lsls	r2, r3, #28
   270f0:	d101      	bne.n	270f6 <__lo0bits+0x32>
   270f2:	3004      	adds	r0, #4
   270f4:	091b      	lsrs	r3, r3, #4
   270f6:	079a      	lsls	r2, r3, #30
   270f8:	d101      	bne.n	270fe <__lo0bits+0x3a>
   270fa:	3002      	adds	r0, #2
   270fc:	089b      	lsrs	r3, r3, #2
   270fe:	07da      	lsls	r2, r3, #31
   27100:	d403      	bmi.n	2710a <__lo0bits+0x46>
   27102:	085b      	lsrs	r3, r3, #1
   27104:	f100 0001 	add.w	r0, r0, #1
   27108:	d006      	beq.n	27118 <__lo0bits+0x54>
   2710a:	600b      	str	r3, [r1, #0]
   2710c:	4770      	bx	lr
   2710e:	0c1b      	lsrs	r3, r3, #16
   27110:	2010      	movs	r0, #16
   27112:	e7e7      	b.n	270e4 <__lo0bits+0x20>
   27114:	2000      	movs	r0, #0
   27116:	4770      	bx	lr
   27118:	2020      	movs	r0, #32
   2711a:	4770      	bx	lr
   2711c:	089b      	lsrs	r3, r3, #2
   2711e:	2002      	movs	r0, #2
   27120:	600b      	str	r3, [r1, #0]
   27122:	4770      	bx	lr

00027124 <__i2b>:
   27124:	b510      	push	{r4, lr}
   27126:	460c      	mov	r4, r1
   27128:	2101      	movs	r1, #1
   2712a:	f7ff fec9 	bl	26ec0 <_Balloc>
   2712e:	4602      	mov	r2, r0
   27130:	b118      	cbz	r0, 2713a <__i2b+0x16>
   27132:	2301      	movs	r3, #1
   27134:	e9c0 3404 	strd	r3, r4, [r0, #16]
   27138:	bd10      	pop	{r4, pc}
   2713a:	4b03      	ldr	r3, [pc, #12]	; (27148 <__i2b+0x24>)
   2713c:	f44f 71a0 	mov.w	r1, #320	; 0x140
   27140:	4802      	ldr	r0, [pc, #8]	; (2714c <__i2b+0x28>)
   27142:	f7fa fd03 	bl	21b4c <__assert_func>
   27146:	bf00      	nop
   27148:	0002c19c 	.word	0x0002c19c
   2714c:	0002c3cc 	.word	0x0002c3cc

00027150 <__multiply>:
   27150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27154:	690e      	ldr	r6, [r1, #16]
   27156:	b085      	sub	sp, #20
   27158:	6917      	ldr	r7, [r2, #16]
   2715a:	460d      	mov	r5, r1
   2715c:	4614      	mov	r4, r2
   2715e:	42be      	cmp	r6, r7
   27160:	db05      	blt.n	2716e <__multiply+0x1e>
   27162:	463a      	mov	r2, r7
   27164:	4623      	mov	r3, r4
   27166:	4637      	mov	r7, r6
   27168:	460c      	mov	r4, r1
   2716a:	4616      	mov	r6, r2
   2716c:	461d      	mov	r5, r3
   2716e:	eb07 0806 	add.w	r8, r7, r6
   27172:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   27176:	4543      	cmp	r3, r8
   27178:	bfb8      	it	lt
   2717a:	3101      	addlt	r1, #1
   2717c:	f7ff fea0 	bl	26ec0 <_Balloc>
   27180:	9001      	str	r0, [sp, #4]
   27182:	2800      	cmp	r0, #0
   27184:	f000 8089 	beq.w	2729a <__multiply+0x14a>
   27188:	9b01      	ldr	r3, [sp, #4]
   2718a:	f103 0914 	add.w	r9, r3, #20
   2718e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   27192:	45d1      	cmp	r9, sl
   27194:	d205      	bcs.n	271a2 <__multiply+0x52>
   27196:	464b      	mov	r3, r9
   27198:	2200      	movs	r2, #0
   2719a:	f843 2b04 	str.w	r2, [r3], #4
   2719e:	459a      	cmp	sl, r3
   271a0:	d8fb      	bhi.n	2719a <__multiply+0x4a>
   271a2:	f105 0e14 	add.w	lr, r5, #20
   271a6:	f104 0314 	add.w	r3, r4, #20
   271aa:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
   271ae:	461a      	mov	r2, r3
   271b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   271b4:	45de      	cmp	lr, fp
   271b6:	d23d      	bcs.n	27234 <__multiply+0xe4>
   271b8:	1b3b      	subs	r3, r7, r4
   271ba:	3415      	adds	r4, #21
   271bc:	3b15      	subs	r3, #21
   271be:	f023 0303 	bic.w	r3, r3, #3
   271c2:	3304      	adds	r3, #4
   271c4:	42a7      	cmp	r7, r4
   271c6:	bf38      	it	cc
   271c8:	2304      	movcc	r3, #4
   271ca:	e9cd a802 	strd	sl, r8, [sp, #8]
   271ce:	4698      	mov	r8, r3
   271d0:	4692      	mov	sl, r2
   271d2:	e003      	b.n	271dc <__multiply+0x8c>
   271d4:	45f3      	cmp	fp, lr
   271d6:	f109 0904 	add.w	r9, r9, #4
   271da:	d929      	bls.n	27230 <__multiply+0xe0>
   271dc:	f85e 4b04 	ldr.w	r4, [lr], #4
   271e0:	b2a6      	uxth	r6, r4
   271e2:	2e00      	cmp	r6, #0
   271e4:	d137      	bne.n	27256 <__multiply+0x106>
   271e6:	0c24      	lsrs	r4, r4, #16
   271e8:	d0f4      	beq.n	271d4 <__multiply+0x84>
   271ea:	f8d9 3000 	ldr.w	r3, [r9]
   271ee:	4655      	mov	r5, sl
   271f0:	464e      	mov	r6, r9
   271f2:	2200      	movs	r2, #0
   271f4:	4618      	mov	r0, r3
   271f6:	0c01      	lsrs	r1, r0, #16
   271f8:	8828      	ldrh	r0, [r5, #0]
   271fa:	b29b      	uxth	r3, r3
   271fc:	fb04 1000 	mla	r0, r4, r0, r1
   27200:	4402      	add	r2, r0
   27202:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   27206:	f846 3b04 	str.w	r3, [r6], #4
   2720a:	f855 3b04 	ldr.w	r3, [r5], #4
   2720e:	6830      	ldr	r0, [r6, #0]
   27210:	0c1b      	lsrs	r3, r3, #16
   27212:	42af      	cmp	r7, r5
   27214:	b281      	uxth	r1, r0
   27216:	fb04 1303 	mla	r3, r4, r3, r1
   2721a:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   2721e:	ea4f 4213 	mov.w	r2, r3, lsr #16
   27222:	d8e8      	bhi.n	271f6 <__multiply+0xa6>
   27224:	45f3      	cmp	fp, lr
   27226:	f849 3008 	str.w	r3, [r9, r8]
   2722a:	f109 0904 	add.w	r9, r9, #4
   2722e:	d8d5      	bhi.n	271dc <__multiply+0x8c>
   27230:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   27234:	f1b8 0f00 	cmp.w	r8, #0
   27238:	dc03      	bgt.n	27242 <__multiply+0xf2>
   2723a:	e006      	b.n	2724a <__multiply+0xfa>
   2723c:	f1b8 0801 	subs.w	r8, r8, #1
   27240:	d003      	beq.n	2724a <__multiply+0xfa>
   27242:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   27246:	2b00      	cmp	r3, #0
   27248:	d0f8      	beq.n	2723c <__multiply+0xec>
   2724a:	9801      	ldr	r0, [sp, #4]
   2724c:	f8c0 8010 	str.w	r8, [r0, #16]
   27250:	b005      	add	sp, #20
   27252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27256:	4655      	mov	r5, sl
   27258:	464c      	mov	r4, r9
   2725a:	2200      	movs	r2, #0
   2725c:	f855 3b04 	ldr.w	r3, [r5], #4
   27260:	6820      	ldr	r0, [r4, #0]
   27262:	b299      	uxth	r1, r3
   27264:	42af      	cmp	r7, r5
   27266:	fa1f fc80 	uxth.w	ip, r0
   2726a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2726e:	fb06 c101 	mla	r1, r6, r1, ip
   27272:	ea4f 4010 	mov.w	r0, r0, lsr #16
   27276:	4411      	add	r1, r2
   27278:	fb06 0203 	mla	r2, r6, r3, r0
   2727c:	b28b      	uxth	r3, r1
   2727e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   27282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   27286:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2728a:	f844 3b04 	str.w	r3, [r4], #4
   2728e:	d8e5      	bhi.n	2725c <__multiply+0x10c>
   27290:	f849 2008 	str.w	r2, [r9, r8]
   27294:	f85e 4c04 	ldr.w	r4, [lr, #-4]
   27298:	e7a5      	b.n	271e6 <__multiply+0x96>
   2729a:	4602      	mov	r2, r0
   2729c:	4b02      	ldr	r3, [pc, #8]	; (272a8 <__multiply+0x158>)
   2729e:	f240 115d 	movw	r1, #349	; 0x15d
   272a2:	4802      	ldr	r0, [pc, #8]	; (272ac <__multiply+0x15c>)
   272a4:	f7fa fc52 	bl	21b4c <__assert_func>
   272a8:	0002c19c 	.word	0x0002c19c
   272ac:	0002c3cc 	.word	0x0002c3cc

000272b0 <__pow5mult>:
   272b0:	f012 0303 	ands.w	r3, r2, #3
   272b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   272b8:	4614      	mov	r4, r2
   272ba:	4607      	mov	r7, r0
   272bc:	d12e      	bne.n	2731c <__pow5mult+0x6c>
   272be:	460e      	mov	r6, r1
   272c0:	10a4      	asrs	r4, r4, #2
   272c2:	d01c      	beq.n	272fe <__pow5mult+0x4e>
   272c4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   272c6:	b395      	cbz	r5, 2732e <__pow5mult+0x7e>
   272c8:	07e3      	lsls	r3, r4, #31
   272ca:	f04f 0800 	mov.w	r8, #0
   272ce:	d406      	bmi.n	272de <__pow5mult+0x2e>
   272d0:	1064      	asrs	r4, r4, #1
   272d2:	d014      	beq.n	272fe <__pow5mult+0x4e>
   272d4:	6828      	ldr	r0, [r5, #0]
   272d6:	b1a8      	cbz	r0, 27304 <__pow5mult+0x54>
   272d8:	4605      	mov	r5, r0
   272da:	07e3      	lsls	r3, r4, #31
   272dc:	d5f8      	bpl.n	272d0 <__pow5mult+0x20>
   272de:	462a      	mov	r2, r5
   272e0:	4631      	mov	r1, r6
   272e2:	4638      	mov	r0, r7
   272e4:	f7ff ff34 	bl	27150 <__multiply>
   272e8:	b1b6      	cbz	r6, 27318 <__pow5mult+0x68>
   272ea:	6871      	ldr	r1, [r6, #4]
   272ec:	1064      	asrs	r4, r4, #1
   272ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   272f0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   272f4:	6032      	str	r2, [r6, #0]
   272f6:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   272fa:	4606      	mov	r6, r0
   272fc:	d1ea      	bne.n	272d4 <__pow5mult+0x24>
   272fe:	4630      	mov	r0, r6
   27300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27304:	462a      	mov	r2, r5
   27306:	4629      	mov	r1, r5
   27308:	4638      	mov	r0, r7
   2730a:	f7ff ff21 	bl	27150 <__multiply>
   2730e:	6028      	str	r0, [r5, #0]
   27310:	4605      	mov	r5, r0
   27312:	f8c0 8000 	str.w	r8, [r0]
   27316:	e7e0      	b.n	272da <__pow5mult+0x2a>
   27318:	4606      	mov	r6, r0
   2731a:	e7d9      	b.n	272d0 <__pow5mult+0x20>
   2731c:	1e5a      	subs	r2, r3, #1
   2731e:	4d09      	ldr	r5, [pc, #36]	; (27344 <__pow5mult+0x94>)
   27320:	2300      	movs	r3, #0
   27322:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   27326:	f7ff fdfb 	bl	26f20 <__multadd>
   2732a:	4606      	mov	r6, r0
   2732c:	e7c8      	b.n	272c0 <__pow5mult+0x10>
   2732e:	f240 2171 	movw	r1, #625	; 0x271
   27332:	4638      	mov	r0, r7
   27334:	f7ff fef6 	bl	27124 <__i2b>
   27338:	2300      	movs	r3, #0
   2733a:	64b8      	str	r0, [r7, #72]	; 0x48
   2733c:	4605      	mov	r5, r0
   2733e:	6003      	str	r3, [r0, #0]
   27340:	e7c2      	b.n	272c8 <__pow5mult+0x18>
   27342:	bf00      	nop
   27344:	0002c44c 	.word	0x0002c44c

00027348 <__lshift>:
   27348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2734c:	690f      	ldr	r7, [r1, #16]
   2734e:	460d      	mov	r5, r1
   27350:	688b      	ldr	r3, [r1, #8]
   27352:	4691      	mov	r9, r2
   27354:	eb07 1762 	add.w	r7, r7, r2, asr #5
   27358:	4680      	mov	r8, r0
   2735a:	1154      	asrs	r4, r2, #5
   2735c:	6849      	ldr	r1, [r1, #4]
   2735e:	1c7e      	adds	r6, r7, #1
   27360:	429e      	cmp	r6, r3
   27362:	dd03      	ble.n	2736c <__lshift+0x24>
   27364:	005b      	lsls	r3, r3, #1
   27366:	3101      	adds	r1, #1
   27368:	429e      	cmp	r6, r3
   2736a:	dcfb      	bgt.n	27364 <__lshift+0x1c>
   2736c:	4640      	mov	r0, r8
   2736e:	f7ff fda7 	bl	26ec0 <_Balloc>
   27372:	2800      	cmp	r0, #0
   27374:	d04f      	beq.n	27416 <__lshift+0xce>
   27376:	2c00      	cmp	r4, #0
   27378:	f100 0114 	add.w	r1, r0, #20
   2737c:	dd0d      	ble.n	2739a <__lshift+0x52>
   2737e:	1d62      	adds	r2, r4, #5
   27380:	460b      	mov	r3, r1
   27382:	2400      	movs	r4, #0
   27384:	ea4f 0c82 	mov.w	ip, r2, lsl #2
   27388:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   2738c:	f843 4b04 	str.w	r4, [r3], #4
   27390:	4293      	cmp	r3, r2
   27392:	d1fb      	bne.n	2738c <__lshift+0x44>
   27394:	f1ac 0314 	sub.w	r3, ip, #20
   27398:	4419      	add	r1, r3
   2739a:	f105 0314 	add.w	r3, r5, #20
   2739e:	692c      	ldr	r4, [r5, #16]
   273a0:	f019 091f 	ands.w	r9, r9, #31
   273a4:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   273a8:	d02d      	beq.n	27406 <__lshift+0xbe>
   273aa:	f1c9 0220 	rsb	r2, r9, #32
   273ae:	468e      	mov	lr, r1
   273b0:	f04f 0a00 	mov.w	sl, #0
   273b4:	681c      	ldr	r4, [r3, #0]
   273b6:	fa04 f409 	lsl.w	r4, r4, r9
   273ba:	ea44 040a 	orr.w	r4, r4, sl
   273be:	f84e 4b04 	str.w	r4, [lr], #4
   273c2:	f853 4b04 	ldr.w	r4, [r3], #4
   273c6:	459c      	cmp	ip, r3
   273c8:	fa24 fa02 	lsr.w	sl, r4, r2
   273cc:	d8f2      	bhi.n	273b4 <__lshift+0x6c>
   273ce:	ebac 0305 	sub.w	r3, ip, r5
   273d2:	f105 0215 	add.w	r2, r5, #21
   273d6:	f1ba 0f00 	cmp.w	sl, #0
   273da:	bf18      	it	ne
   273dc:	4637      	movne	r7, r6
   273de:	3b15      	subs	r3, #21
   273e0:	f023 0303 	bic.w	r3, r3, #3
   273e4:	3304      	adds	r3, #4
   273e6:	4594      	cmp	ip, r2
   273e8:	bf38      	it	cc
   273ea:	2304      	movcc	r3, #4
   273ec:	f841 a003 	str.w	sl, [r1, r3]
   273f0:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   273f4:	686a      	ldr	r2, [r5, #4]
   273f6:	6107      	str	r7, [r0, #16]
   273f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   273fc:	6029      	str	r1, [r5, #0]
   273fe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   27402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27406:	3904      	subs	r1, #4
   27408:	f853 2b04 	ldr.w	r2, [r3], #4
   2740c:	459c      	cmp	ip, r3
   2740e:	f841 2f04 	str.w	r2, [r1, #4]!
   27412:	d8f9      	bhi.n	27408 <__lshift+0xc0>
   27414:	e7ec      	b.n	273f0 <__lshift+0xa8>
   27416:	4602      	mov	r2, r0
   27418:	4b02      	ldr	r3, [pc, #8]	; (27424 <__lshift+0xdc>)
   2741a:	f240 11d9 	movw	r1, #473	; 0x1d9
   2741e:	4802      	ldr	r0, [pc, #8]	; (27428 <__lshift+0xe0>)
   27420:	f7fa fb94 	bl	21b4c <__assert_func>
   27424:	0002c19c 	.word	0x0002c19c
   27428:	0002c3cc 	.word	0x0002c3cc

0002742c <__mcmp>:
   2742c:	690b      	ldr	r3, [r1, #16]
   2742e:	b430      	push	{r4, r5}
   27430:	4605      	mov	r5, r0
   27432:	6900      	ldr	r0, [r0, #16]
   27434:	1ac0      	subs	r0, r0, r3
   27436:	d111      	bne.n	2745c <__mcmp+0x30>
   27438:	3514      	adds	r5, #20
   2743a:	3114      	adds	r1, #20
   2743c:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   27440:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   27444:	e001      	b.n	2744a <__mcmp+0x1e>
   27446:	4295      	cmp	r5, r2
   27448:	d208      	bcs.n	2745c <__mcmp+0x30>
   2744a:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   2744e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   27452:	428c      	cmp	r4, r1
   27454:	d0f7      	beq.n	27446 <__mcmp+0x1a>
   27456:	d203      	bcs.n	27460 <__mcmp+0x34>
   27458:	f04f 30ff 	mov.w	r0, #4294967295
   2745c:	bc30      	pop	{r4, r5}
   2745e:	4770      	bx	lr
   27460:	2001      	movs	r0, #1
   27462:	bc30      	pop	{r4, r5}
   27464:	4770      	bx	lr
   27466:	bf00      	nop

00027468 <__mdiff>:
   27468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2746c:	690f      	ldr	r7, [r1, #16]
   2746e:	460d      	mov	r5, r1
   27470:	6911      	ldr	r1, [r2, #16]
   27472:	b083      	sub	sp, #12
   27474:	4691      	mov	r9, r2
   27476:	1a7f      	subs	r7, r7, r1
   27478:	2f00      	cmp	r7, #0
   2747a:	d17e      	bne.n	2757a <__mdiff+0x112>
   2747c:	f105 0614 	add.w	r6, r5, #20
   27480:	3214      	adds	r2, #20
   27482:	eb06 0381 	add.w	r3, r6, r1, lsl #2
   27486:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   2748a:	e001      	b.n	27490 <__mdiff+0x28>
   2748c:	429e      	cmp	r6, r3
   2748e:	d277      	bcs.n	27580 <__mdiff+0x118>
   27490:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   27494:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   27498:	428c      	cmp	r4, r1
   2749a:	d0f7      	beq.n	2748c <__mdiff+0x24>
   2749c:	d368      	bcc.n	27570 <__mdiff+0x108>
   2749e:	6869      	ldr	r1, [r5, #4]
   274a0:	f7ff fd0e 	bl	26ec0 <_Balloc>
   274a4:	2800      	cmp	r0, #0
   274a6:	d076      	beq.n	27596 <__mdiff+0x12e>
   274a8:	f105 0314 	add.w	r3, r5, #20
   274ac:	f8d5 c010 	ldr.w	ip, [r5, #16]
   274b0:	f8d9 4010 	ldr.w	r4, [r9, #16]
   274b4:	f109 0614 	add.w	r6, r9, #20
   274b8:	f100 0a14 	add.w	sl, r0, #20
   274bc:	eb03 088c 	add.w	r8, r3, ip, lsl #2
   274c0:	9301      	str	r3, [sp, #4]
   274c2:	3510      	adds	r5, #16
   274c4:	2300      	movs	r3, #0
   274c6:	eb06 0b84 	add.w	fp, r6, r4, lsl #2
   274ca:	46d6      	mov	lr, sl
   274cc:	60c7      	str	r7, [r0, #12]
   274ce:	f855 4f04 	ldr.w	r4, [r5, #4]!
   274d2:	f856 2b04 	ldr.w	r2, [r6], #4
   274d6:	b2a1      	uxth	r1, r4
   274d8:	b297      	uxth	r7, r2
   274da:	45b3      	cmp	fp, r6
   274dc:	4419      	add	r1, r3
   274de:	ea4f 4212 	mov.w	r2, r2, lsr #16
   274e2:	eba1 0107 	sub.w	r1, r1, r7
   274e6:	ebc2 4314 	rsb	r3, r2, r4, lsr #16
   274ea:	b28c      	uxth	r4, r1
   274ec:	eb03 4321 	add.w	r3, r3, r1, asr #16
   274f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   274f4:	ea4f 4323 	mov.w	r3, r3, asr #16
   274f8:	f84e 4b04 	str.w	r4, [lr], #4
   274fc:	d8e7      	bhi.n	274ce <__mdiff+0x66>
   274fe:	ebab 0209 	sub.w	r2, fp, r9
   27502:	f109 0915 	add.w	r9, r9, #21
   27506:	9d01      	ldr	r5, [sp, #4]
   27508:	3a15      	subs	r2, #21
   2750a:	45cb      	cmp	fp, r9
   2750c:	f022 0103 	bic.w	r1, r2, #3
   27510:	460a      	mov	r2, r1
   27512:	f101 0104 	add.w	r1, r1, #4
   27516:	bf3c      	itt	cc
   27518:	2104      	movcc	r1, #4
   2751a:	2200      	movcc	r2, #0
   2751c:	440d      	add	r5, r1
   2751e:	4452      	add	r2, sl
   27520:	448a      	add	sl, r1
   27522:	45a8      	cmp	r8, r5
   27524:	d918      	bls.n	27558 <__mdiff+0xf0>
   27526:	4656      	mov	r6, sl
   27528:	4629      	mov	r1, r5
   2752a:	f851 7b04 	ldr.w	r7, [r1], #4
   2752e:	b2ba      	uxth	r2, r7
   27530:	4588      	cmp	r8, r1
   27532:	4413      	add	r3, r2
   27534:	ea4f 4223 	mov.w	r2, r3, asr #16
   27538:	b29c      	uxth	r4, r3
   2753a:	eb02 4317 	add.w	r3, r2, r7, lsr #16
   2753e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   27542:	ea4f 4323 	mov.w	r3, r3, asr #16
   27546:	f846 4b04 	str.w	r4, [r6], #4
   2754a:	d8ee      	bhi.n	2752a <__mdiff+0xc2>
   2754c:	f108 32ff 	add.w	r2, r8, #4294967295
   27550:	1b52      	subs	r2, r2, r5
   27552:	f022 0203 	bic.w	r2, r2, #3
   27556:	4452      	add	r2, sl
   27558:	b92c      	cbnz	r4, 27566 <__mdiff+0xfe>
   2755a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   2755e:	f10c 3cff 	add.w	ip, ip, #4294967295
   27562:	2b00      	cmp	r3, #0
   27564:	d0f9      	beq.n	2755a <__mdiff+0xf2>
   27566:	f8c0 c010 	str.w	ip, [r0, #16]
   2756a:	b003      	add	sp, #12
   2756c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27570:	462b      	mov	r3, r5
   27572:	2701      	movs	r7, #1
   27574:	464d      	mov	r5, r9
   27576:	4699      	mov	r9, r3
   27578:	e791      	b.n	2749e <__mdiff+0x36>
   2757a:	dbf9      	blt.n	27570 <__mdiff+0x108>
   2757c:	2700      	movs	r7, #0
   2757e:	e78e      	b.n	2749e <__mdiff+0x36>
   27580:	2100      	movs	r1, #0
   27582:	f7ff fc9d 	bl	26ec0 <_Balloc>
   27586:	b168      	cbz	r0, 275a4 <__mdiff+0x13c>
   27588:	2201      	movs	r2, #1
   2758a:	2300      	movs	r3, #0
   2758c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   27590:	b003      	add	sp, #12
   27592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27596:	4602      	mov	r2, r0
   27598:	4b06      	ldr	r3, [pc, #24]	; (275b4 <__mdiff+0x14c>)
   2759a:	f44f 7110 	mov.w	r1, #576	; 0x240
   2759e:	4806      	ldr	r0, [pc, #24]	; (275b8 <__mdiff+0x150>)
   275a0:	f7fa fad4 	bl	21b4c <__assert_func>
   275a4:	4602      	mov	r2, r0
   275a6:	4b03      	ldr	r3, [pc, #12]	; (275b4 <__mdiff+0x14c>)
   275a8:	f240 2132 	movw	r1, #562	; 0x232
   275ac:	4802      	ldr	r0, [pc, #8]	; (275b8 <__mdiff+0x150>)
   275ae:	f7fa facd 	bl	21b4c <__assert_func>
   275b2:	bf00      	nop
   275b4:	0002c19c 	.word	0x0002c19c
   275b8:	0002c3cc 	.word	0x0002c3cc

000275bc <__ulp>:
   275bc:	b082      	sub	sp, #8
   275be:	4b17      	ldr	r3, [pc, #92]	; (2761c <__ulp+0x60>)
   275c0:	ed8d 0b00 	vstr	d0, [sp]
   275c4:	9a01      	ldr	r2, [sp, #4]
   275c6:	4013      	ands	r3, r2
   275c8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   275cc:	2b00      	cmp	r3, #0
   275ce:	dd05      	ble.n	275dc <__ulp+0x20>
   275d0:	2000      	movs	r0, #0
   275d2:	4619      	mov	r1, r3
   275d4:	ec41 0b10 	vmov	d0, r0, r1
   275d8:	b002      	add	sp, #8
   275da:	4770      	bx	lr
   275dc:	425b      	negs	r3, r3
   275de:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   275e2:	ea4f 5223 	mov.w	r2, r3, asr #20
   275e6:	da08      	bge.n	275fa <__ulp+0x3e>
   275e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   275ec:	2000      	movs	r0, #0
   275ee:	fa43 f102 	asr.w	r1, r3, r2
   275f2:	ec41 0b10 	vmov	d0, r0, r1
   275f6:	b002      	add	sp, #8
   275f8:	4770      	bx	lr
   275fa:	3a14      	subs	r2, #20
   275fc:	2100      	movs	r1, #0
   275fe:	2a1e      	cmp	r2, #30
   27600:	dc08      	bgt.n	27614 <__ulp+0x58>
   27602:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   27606:	fa23 f202 	lsr.w	r2, r3, r2
   2760a:	4610      	mov	r0, r2
   2760c:	ec41 0b10 	vmov	d0, r0, r1
   27610:	b002      	add	sp, #8
   27612:	4770      	bx	lr
   27614:	2201      	movs	r2, #1
   27616:	4610      	mov	r0, r2
   27618:	e7f8      	b.n	2760c <__ulp+0x50>
   2761a:	bf00      	nop
   2761c:	7ff00000 	.word	0x7ff00000

00027620 <__b2d>:
   27620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27622:	6904      	ldr	r4, [r0, #16]
   27624:	f100 0614 	add.w	r6, r0, #20
   27628:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   2762c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   27630:	1f27      	subs	r7, r4, #4
   27632:	4628      	mov	r0, r5
   27634:	f7ff fd24 	bl	27080 <__hi0bits>
   27638:	f1c0 0320 	rsb	r3, r0, #32
   2763c:	280a      	cmp	r0, #10
   2763e:	600b      	str	r3, [r1, #0]
   27640:	dd34      	ble.n	276ac <__b2d+0x8c>
   27642:	42be      	cmp	r6, r7
   27644:	d21e      	bcs.n	27684 <__b2d+0x64>
   27646:	380b      	subs	r0, #11
   27648:	f854 7c08 	ldr.w	r7, [r4, #-8]
   2764c:	d026      	beq.n	2769c <__b2d+0x7c>
   2764e:	f1c0 0e20 	rsb	lr, r0, #32
   27652:	fa05 fc00 	lsl.w	ip, r5, r0
   27656:	f1a4 0508 	sub.w	r5, r4, #8
   2765a:	fa27 f10e 	lsr.w	r1, r7, lr
   2765e:	42ae      	cmp	r6, r5
   27660:	ea4c 0c01 	orr.w	ip, ip, r1
   27664:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
   27668:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   2766c:	d236      	bcs.n	276dc <__b2d+0xbc>
   2766e:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   27672:	fa07 f000 	lsl.w	r0, r7, r0
   27676:	fa21 f10e 	lsr.w	r1, r1, lr
   2767a:	4301      	orrs	r1, r0
   2767c:	460a      	mov	r2, r1
   2767e:	ec43 2b10 	vmov	d0, r2, r3
   27682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27684:	380b      	subs	r0, #11
   27686:	d008      	beq.n	2769a <__b2d+0x7a>
   27688:	fa05 f000 	lsl.w	r0, r5, r0
   2768c:	2100      	movs	r1, #0
   2768e:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
   27692:	460a      	mov	r2, r1
   27694:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   27698:	e7f1      	b.n	2767e <__b2d+0x5e>
   2769a:	4607      	mov	r7, r0
   2769c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   276a0:	463a      	mov	r2, r7
   276a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   276a6:	ec43 2b10 	vmov	d0, r2, r3
   276aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   276ac:	f1c0 0c0b 	rsb	ip, r0, #11
   276b0:	42be      	cmp	r6, r7
   276b2:	fa25 f10c 	lsr.w	r1, r5, ip
   276b6:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   276ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   276be:	d308      	bcc.n	276d2 <__b2d+0xb2>
   276c0:	2100      	movs	r1, #0
   276c2:	3015      	adds	r0, #21
   276c4:	fa05 f000 	lsl.w	r0, r5, r0
   276c8:	ea40 0201 	orr.w	r2, r0, r1
   276cc:	ec43 2b10 	vmov	d0, r2, r3
   276d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   276d2:	f854 1c08 	ldr.w	r1, [r4, #-8]
   276d6:	fa21 f10c 	lsr.w	r1, r1, ip
   276da:	e7f2      	b.n	276c2 <__b2d+0xa2>
   276dc:	fa07 f100 	lsl.w	r1, r7, r0
   276e0:	460a      	mov	r2, r1
   276e2:	e7cc      	b.n	2767e <__b2d+0x5e>

000276e4 <__d2b>:
   276e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   276e8:	4688      	mov	r8, r1
   276ea:	b083      	sub	sp, #12
   276ec:	2101      	movs	r1, #1
   276ee:	4615      	mov	r5, r2
   276f0:	ec57 6b10 	vmov	r6, r7, d0
   276f4:	f7ff fbe4 	bl	26ec0 <_Balloc>
   276f8:	4604      	mov	r4, r0
   276fa:	2800      	cmp	r0, #0
   276fc:	d050      	beq.n	277a0 <__d2b+0xbc>
   276fe:	f3c7 590a 	ubfx	r9, r7, #20, #11
   27702:	f3c7 0313 	ubfx	r3, r7, #0, #20
   27706:	f1b9 0f00 	cmp.w	r9, #0
   2770a:	d001      	beq.n	27710 <__d2b+0x2c>
   2770c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   27710:	2e00      	cmp	r6, #0
   27712:	9301      	str	r3, [sp, #4]
   27714:	d024      	beq.n	27760 <__d2b+0x7c>
   27716:	4668      	mov	r0, sp
   27718:	9600      	str	r6, [sp, #0]
   2771a:	f7ff fcd3 	bl	270c4 <__lo0bits>
   2771e:	2800      	cmp	r0, #0
   27720:	d03a      	beq.n	27798 <__d2b+0xb4>
   27722:	9b01      	ldr	r3, [sp, #4]
   27724:	f1c0 0220 	rsb	r2, r0, #32
   27728:	9900      	ldr	r1, [sp, #0]
   2772a:	fa03 f202 	lsl.w	r2, r3, r2
   2772e:	40c3      	lsrs	r3, r0
   27730:	430a      	orrs	r2, r1
   27732:	9301      	str	r3, [sp, #4]
   27734:	6162      	str	r2, [r4, #20]
   27736:	2b00      	cmp	r3, #0
   27738:	61a3      	str	r3, [r4, #24]
   2773a:	bf14      	ite	ne
   2773c:	2202      	movne	r2, #2
   2773e:	2201      	moveq	r2, #1
   27740:	6122      	str	r2, [r4, #16]
   27742:	f1b9 0f00 	cmp.w	r9, #0
   27746:	d017      	beq.n	27778 <__d2b+0x94>
   27748:	f2a9 4333 	subw	r3, r9, #1075	; 0x433
   2774c:	f1c0 0235 	rsb	r2, r0, #53	; 0x35
   27750:	4418      	add	r0, r3
   27752:	f8c8 0000 	str.w	r0, [r8]
   27756:	4620      	mov	r0, r4
   27758:	602a      	str	r2, [r5, #0]
   2775a:	b003      	add	sp, #12
   2775c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27760:	a801      	add	r0, sp, #4
   27762:	f7ff fcaf 	bl	270c4 <__lo0bits>
   27766:	2301      	movs	r3, #1
   27768:	9901      	ldr	r1, [sp, #4]
   2776a:	3020      	adds	r0, #32
   2776c:	461a      	mov	r2, r3
   2776e:	e9c4 3104 	strd	r3, r1, [r4, #16]
   27772:	f1b9 0f00 	cmp.w	r9, #0
   27776:	d1e7      	bne.n	27748 <__d2b+0x64>
   27778:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   2777c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   27780:	f8c8 0000 	str.w	r0, [r8]
   27784:	6918      	ldr	r0, [r3, #16]
   27786:	f7ff fc7b 	bl	27080 <__hi0bits>
   2778a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   2778e:	6028      	str	r0, [r5, #0]
   27790:	4620      	mov	r0, r4
   27792:	b003      	add	sp, #12
   27794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27798:	e9dd 2300 	ldrd	r2, r3, [sp]
   2779c:	6162      	str	r2, [r4, #20]
   2779e:	e7ca      	b.n	27736 <__d2b+0x52>
   277a0:	4602      	mov	r2, r0
   277a2:	4b03      	ldr	r3, [pc, #12]	; (277b0 <__d2b+0xcc>)
   277a4:	f240 310a 	movw	r1, #778	; 0x30a
   277a8:	4802      	ldr	r0, [pc, #8]	; (277b4 <__d2b+0xd0>)
   277aa:	f7fa f9cf 	bl	21b4c <__assert_func>
   277ae:	bf00      	nop
   277b0:	0002c19c 	.word	0x0002c19c
   277b4:	0002c3cc 	.word	0x0002c3cc

000277b8 <__ratio>:
   277b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   277bc:	b083      	sub	sp, #12
   277be:	460e      	mov	r6, r1
   277c0:	4607      	mov	r7, r0
   277c2:	4669      	mov	r1, sp
   277c4:	f7ff ff2c 	bl	27620 <__b2d>
   277c8:	4630      	mov	r0, r6
   277ca:	a901      	add	r1, sp, #4
   277cc:	ec55 4b10 	vmov	r4, r5, d0
   277d0:	f7ff ff26 	bl	27620 <__b2d>
   277d4:	693b      	ldr	r3, [r7, #16]
   277d6:	6936      	ldr	r6, [r6, #16]
   277d8:	e9dd 2700 	ldrd	r2, r7, [sp]
   277dc:	1b9e      	subs	r6, r3, r6
   277de:	1bd3      	subs	r3, r2, r7
   277e0:	eb03 1346 	add.w	r3, r3, r6, lsl #5
   277e4:	2b00      	cmp	r3, #0
   277e6:	ec57 6b10 	vmov	r6, r7, d0
   277ea:	dd0d      	ble.n	27808 <__ratio+0x50>
   277ec:	eb05 5103 	add.w	r1, r5, r3, lsl #20
   277f0:	460d      	mov	r5, r1
   277f2:	4632      	mov	r2, r6
   277f4:	463b      	mov	r3, r7
   277f6:	4620      	mov	r0, r4
   277f8:	4629      	mov	r1, r5
   277fa:	f7e5 fc39 	bl	d070 <__aeabi_ddiv>
   277fe:	ec41 0b10 	vmov	d0, r0, r1
   27802:	b003      	add	sp, #12
   27804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27808:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   2780c:	ee10 6a10 	vmov	r6, s0
   27810:	eb07 5903 	add.w	r9, r7, r3, lsl #20
   27814:	464f      	mov	r7, r9
   27816:	e7ec      	b.n	277f2 <__ratio+0x3a>

00027818 <__copybits>:
   27818:	f102 0314 	add.w	r3, r2, #20
   2781c:	b470      	push	{r4, r5, r6}
   2781e:	1e4c      	subs	r4, r1, #1
   27820:	6911      	ldr	r1, [r2, #16]
   27822:	1164      	asrs	r4, r4, #5
   27824:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   27828:	3401      	adds	r4, #1
   2782a:	428b      	cmp	r3, r1
   2782c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   27830:	d20c      	bcs.n	2784c <__copybits+0x34>
   27832:	1f05      	subs	r5, r0, #4
   27834:	f853 6b04 	ldr.w	r6, [r3], #4
   27838:	4299      	cmp	r1, r3
   2783a:	f845 6f04 	str.w	r6, [r5, #4]!
   2783e:	d8f9      	bhi.n	27834 <__copybits+0x1c>
   27840:	1a8b      	subs	r3, r1, r2
   27842:	3b15      	subs	r3, #21
   27844:	f023 0303 	bic.w	r3, r3, #3
   27848:	3304      	adds	r3, #4
   2784a:	4418      	add	r0, r3
   2784c:	4284      	cmp	r4, r0
   2784e:	d904      	bls.n	2785a <__copybits+0x42>
   27850:	2300      	movs	r3, #0
   27852:	f840 3b04 	str.w	r3, [r0], #4
   27856:	4284      	cmp	r4, r0
   27858:	d8fb      	bhi.n	27852 <__copybits+0x3a>
   2785a:	bc70      	pop	{r4, r5, r6}
   2785c:	4770      	bx	lr
   2785e:	bf00      	nop

00027860 <__any_on>:
   27860:	6903      	ldr	r3, [r0, #16]
   27862:	114a      	asrs	r2, r1, #5
   27864:	3014      	adds	r0, #20
   27866:	4293      	cmp	r3, r2
   27868:	da09      	bge.n	2787e <__any_on+0x1e>
   2786a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2786e:	e002      	b.n	27876 <__any_on+0x16>
   27870:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   27874:	b9ca      	cbnz	r2, 278aa <__any_on+0x4a>
   27876:	4283      	cmp	r3, r0
   27878:	d8fa      	bhi.n	27870 <__any_on+0x10>
   2787a:	2000      	movs	r0, #0
   2787c:	4770      	bx	lr
   2787e:	dd11      	ble.n	278a4 <__any_on+0x44>
   27880:	f011 011f 	ands.w	r1, r1, #31
   27884:	d00e      	beq.n	278a4 <__any_on+0x44>
   27886:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   2788a:	b410      	push	{r4}
   2788c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   27890:	fa24 f201 	lsr.w	r2, r4, r1
   27894:	fa02 f101 	lsl.w	r1, r2, r1
   27898:	428c      	cmp	r4, r1
   2789a:	d00c      	beq.n	278b6 <__any_on+0x56>
   2789c:	2001      	movs	r0, #1
   2789e:	f85d 4b04 	ldr.w	r4, [sp], #4
   278a2:	4770      	bx	lr
   278a4:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   278a8:	e7e5      	b.n	27876 <__any_on+0x16>
   278aa:	2001      	movs	r0, #1
   278ac:	4770      	bx	lr
   278ae:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   278b2:	2a00      	cmp	r2, #0
   278b4:	d1f2      	bne.n	2789c <__any_on+0x3c>
   278b6:	4283      	cmp	r3, r0
   278b8:	d8f9      	bhi.n	278ae <__any_on+0x4e>
   278ba:	2000      	movs	r0, #0
   278bc:	f85d 4b04 	ldr.w	r4, [sp], #4
   278c0:	4770      	bx	lr
   278c2:	bf00      	nop

000278c4 <_read_r>:
   278c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   278c6:	460f      	mov	r7, r1
   278c8:	4d08      	ldr	r5, [pc, #32]	; (278ec <_read_r+0x28>)
   278ca:	2600      	movs	r6, #0
   278cc:	4611      	mov	r1, r2
   278ce:	4604      	mov	r4, r0
   278d0:	461a      	mov	r2, r3
   278d2:	4638      	mov	r0, r7
   278d4:	602e      	str	r6, [r5, #0]
   278d6:	f001 fd4f 	bl	29378 <_read>
   278da:	1c43      	adds	r3, r0, #1
   278dc:	d000      	beq.n	278e0 <_read_r+0x1c>
   278de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   278e0:	682b      	ldr	r3, [r5, #0]
   278e2:	2b00      	cmp	r3, #0
   278e4:	d0fb      	beq.n	278de <_read_r+0x1a>
   278e6:	6023      	str	r3, [r4, #0]
   278e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   278ea:	bf00      	nop
   278ec:	200251ac 	.word	0x200251ac

000278f0 <frexp>:
   278f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   278f2:	ec53 2b10 	vmov	r2, r3, d0
   278f6:	4f15      	ldr	r7, [pc, #84]	; (2794c <frexp+0x5c>)
   278f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   278fc:	2600      	movs	r6, #0
   278fe:	42b9      	cmp	r1, r7
   27900:	6006      	str	r6, [r0, #0]
   27902:	dc20      	bgt.n	27946 <frexp+0x56>
   27904:	4604      	mov	r4, r0
   27906:	ee10 0a10 	vmov	r0, s0
   2790a:	4308      	orrs	r0, r1
   2790c:	d01b      	beq.n	27946 <frexp+0x56>
   2790e:	4810      	ldr	r0, [pc, #64]	; (27950 <frexp+0x60>)
   27910:	461d      	mov	r5, r3
   27912:	4018      	ands	r0, r3
   27914:	b960      	cbnz	r0, 27930 <frexp+0x40>
   27916:	4619      	mov	r1, r3
   27918:	2200      	movs	r2, #0
   2791a:	ee10 0a10 	vmov	r0, s0
   2791e:	4b0d      	ldr	r3, [pc, #52]	; (27954 <frexp+0x64>)
   27920:	f7e5 fa7c 	bl	ce1c <__aeabi_dmul>
   27924:	f06f 0635 	mvn.w	r6, #53	; 0x35
   27928:	460d      	mov	r5, r1
   2792a:	4602      	mov	r2, r0
   2792c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   27930:	4809      	ldr	r0, [pc, #36]	; (27958 <frexp+0x68>)
   27932:	1509      	asrs	r1, r1, #20
   27934:	4028      	ands	r0, r5
   27936:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
   2793a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
   2793e:	4431      	add	r1, r6
   27940:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   27944:	6021      	str	r1, [r4, #0]
   27946:	ec43 2b10 	vmov	d0, r2, r3
   2794a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2794c:	7fefffff 	.word	0x7fefffff
   27950:	7ff00000 	.word	0x7ff00000
   27954:	43500000 	.word	0x43500000
   27958:	800fffff 	.word	0x800fffff

0002795c <__sccl>:
   2795c:	b4f0      	push	{r4, r5, r6, r7}
   2795e:	780c      	ldrb	r4, [r1, #0]
   27960:	2c5e      	cmp	r4, #94	; 0x5e
   27962:	d023      	beq.n	279ac <__sccl+0x50>
   27964:	2200      	movs	r2, #0
   27966:	1c4e      	adds	r6, r1, #1
   27968:	4615      	mov	r5, r2
   2796a:	1e43      	subs	r3, r0, #1
   2796c:	f100 01ff 	add.w	r1, r0, #255	; 0xff
   27970:	f803 2f01 	strb.w	r2, [r3, #1]!
   27974:	428b      	cmp	r3, r1
   27976:	d1fb      	bne.n	27970 <__sccl+0x14>
   27978:	b1a4      	cbz	r4, 279a4 <__sccl+0x48>
   2797a:	f085 0201 	eor.w	r2, r5, #1
   2797e:	ea6f 0c00 	mvn.w	ip, r0
   27982:	1c71      	adds	r1, r6, #1
   27984:	5502      	strb	r2, [r0, r4]
   27986:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   2798a:	1e4d      	subs	r5, r1, #1
   2798c:	460e      	mov	r6, r1
   2798e:	2b2d      	cmp	r3, #45	; 0x2d
   27990:	d011      	beq.n	279b6 <__sccl+0x5a>
   27992:	2b5d      	cmp	r3, #93	; 0x5d
   27994:	d003      	beq.n	2799e <__sccl+0x42>
   27996:	b10b      	cbz	r3, 2799c <__sccl+0x40>
   27998:	461c      	mov	r4, r3
   2799a:	e7f2      	b.n	27982 <__sccl+0x26>
   2799c:	462e      	mov	r6, r5
   2799e:	4630      	mov	r0, r6
   279a0:	bcf0      	pop	{r4, r5, r6, r7}
   279a2:	4770      	bx	lr
   279a4:	3e01      	subs	r6, #1
   279a6:	4630      	mov	r0, r6
   279a8:	bcf0      	pop	{r4, r5, r6, r7}
   279aa:	4770      	bx	lr
   279ac:	2201      	movs	r2, #1
   279ae:	1c8e      	adds	r6, r1, #2
   279b0:	784c      	ldrb	r4, [r1, #1]
   279b2:	4615      	mov	r5, r2
   279b4:	e7d9      	b.n	2796a <__sccl+0xe>
   279b6:	780f      	ldrb	r7, [r1, #0]
   279b8:	2f5d      	cmp	r7, #93	; 0x5d
   279ba:	d011      	beq.n	279e0 <__sccl+0x84>
   279bc:	42bc      	cmp	r4, r7
   279be:	dc0f      	bgt.n	279e0 <__sccl+0x84>
   279c0:	1c66      	adds	r6, r4, #1
   279c2:	1983      	adds	r3, r0, r6
   279c4:	f803 2b01 	strb.w	r2, [r3], #1
   279c8:	eb0c 0503 	add.w	r5, ip, r3
   279cc:	42af      	cmp	r7, r5
   279ce:	dcf9      	bgt.n	279c4 <__sccl+0x68>
   279d0:	43e3      	mvns	r3, r4
   279d2:	3102      	adds	r1, #2
   279d4:	443b      	add	r3, r7
   279d6:	42bc      	cmp	r4, r7
   279d8:	bfa8      	it	ge
   279da:	2300      	movge	r3, #0
   279dc:	199c      	adds	r4, r3, r6
   279de:	e7d2      	b.n	27986 <__sccl+0x2a>
   279e0:	242d      	movs	r4, #45	; 0x2d
   279e2:	e7ce      	b.n	27982 <__sccl+0x26>

000279e4 <nanf>:
   279e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 279ec <nanf+0x8>
   279e8:	4770      	bx	lr
   279ea:	bf00      	nop
   279ec:	7fc00000 	.word	0x7fc00000

000279f0 <_raise_r>:
   279f0:	291f      	cmp	r1, #31
   279f2:	b538      	push	{r3, r4, r5, lr}
   279f4:	4605      	mov	r5, r0
   279f6:	d821      	bhi.n	27a3c <_raise_r+0x4c>
   279f8:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   279fc:	460c      	mov	r4, r1
   279fe:	b16a      	cbz	r2, 27a1c <_raise_r+0x2c>
   27a00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   27a04:	b153      	cbz	r3, 27a1c <_raise_r+0x2c>
   27a06:	2b01      	cmp	r3, #1
   27a08:	d016      	beq.n	27a38 <_raise_r+0x48>
   27a0a:	1c59      	adds	r1, r3, #1
   27a0c:	d010      	beq.n	27a30 <_raise_r+0x40>
   27a0e:	2500      	movs	r5, #0
   27a10:	4620      	mov	r0, r4
   27a12:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   27a16:	4798      	blx	r3
   27a18:	4628      	mov	r0, r5
   27a1a:	bd38      	pop	{r3, r4, r5, pc}
   27a1c:	4628      	mov	r0, r5
   27a1e:	f000 f831 	bl	27a84 <_getpid_r>
   27a22:	4622      	mov	r2, r4
   27a24:	4601      	mov	r1, r0
   27a26:	4628      	mov	r0, r5
   27a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27a2c:	f000 b814 	b.w	27a58 <_kill_r>
   27a30:	2316      	movs	r3, #22
   27a32:	2001      	movs	r0, #1
   27a34:	602b      	str	r3, [r5, #0]
   27a36:	bd38      	pop	{r3, r4, r5, pc}
   27a38:	2000      	movs	r0, #0
   27a3a:	bd38      	pop	{r3, r4, r5, pc}
   27a3c:	2316      	movs	r3, #22
   27a3e:	f04f 30ff 	mov.w	r0, #4294967295
   27a42:	602b      	str	r3, [r5, #0]
   27a44:	bd38      	pop	{r3, r4, r5, pc}
   27a46:	bf00      	nop

00027a48 <raise>:
   27a48:	4b02      	ldr	r3, [pc, #8]	; (27a54 <raise+0xc>)
   27a4a:	4601      	mov	r1, r0
   27a4c:	6818      	ldr	r0, [r3, #0]
   27a4e:	f7ff bfcf 	b.w	279f0 <_raise_r>
   27a52:	bf00      	nop
   27a54:	200204d8 	.word	0x200204d8

00027a58 <_kill_r>:
   27a58:	b570      	push	{r4, r5, r6, lr}
   27a5a:	460c      	mov	r4, r1
   27a5c:	4603      	mov	r3, r0
   27a5e:	4d08      	ldr	r5, [pc, #32]	; (27a80 <_kill_r+0x28>)
   27a60:	2600      	movs	r6, #0
   27a62:	4620      	mov	r0, r4
   27a64:	4611      	mov	r1, r2
   27a66:	461c      	mov	r4, r3
   27a68:	602e      	str	r6, [r5, #0]
   27a6a:	f001 fc94 	bl	29396 <_kill>
   27a6e:	1c43      	adds	r3, r0, #1
   27a70:	d000      	beq.n	27a74 <_kill_r+0x1c>
   27a72:	bd70      	pop	{r4, r5, r6, pc}
   27a74:	682b      	ldr	r3, [r5, #0]
   27a76:	2b00      	cmp	r3, #0
   27a78:	d0fb      	beq.n	27a72 <_kill_r+0x1a>
   27a7a:	6023      	str	r3, [r4, #0]
   27a7c:	bd70      	pop	{r4, r5, r6, pc}
   27a7e:	bf00      	nop
   27a80:	200251ac 	.word	0x200251ac

00027a84 <_getpid_r>:
   27a84:	f001 bc89 	b.w	2939a <_getpid>

00027a88 <sprintf>:
   27a88:	b40e      	push	{r1, r2, r3}
   27a8a:	b5f0      	push	{r4, r5, r6, r7, lr}
   27a8c:	b09c      	sub	sp, #112	; 0x70
   27a8e:	4f0d      	ldr	r7, [pc, #52]	; (27ac4 <sprintf+0x3c>)
   27a90:	4604      	mov	r4, r0
   27a92:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   27a96:	ab21      	add	r3, sp, #132	; 0x84
   27a98:	4e0b      	ldr	r6, [pc, #44]	; (27ac8 <sprintf+0x40>)
   27a9a:	a902      	add	r1, sp, #8
   27a9c:	6838      	ldr	r0, [r7, #0]
   27a9e:	f853 2b04 	ldr.w	r2, [r3], #4
   27aa2:	9402      	str	r4, [sp, #8]
   27aa4:	9301      	str	r3, [sp, #4]
   27aa6:	9406      	str	r4, [sp, #24]
   27aa8:	9507      	str	r5, [sp, #28]
   27aaa:	e9cd 5604 	strd	r5, r6, [sp, #16]
   27aae:	f7e6 ff17 	bl	e8e0 <_svfprintf_r>
   27ab2:	9b02      	ldr	r3, [sp, #8]
   27ab4:	2200      	movs	r2, #0
   27ab6:	701a      	strb	r2, [r3, #0]
   27ab8:	b01c      	add	sp, #112	; 0x70
   27aba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   27abe:	b003      	add	sp, #12
   27ac0:	4770      	bx	lr
   27ac2:	bf00      	nop
   27ac4:	200204d8 	.word	0x200204d8
   27ac8:	ffff0208 	.word	0xffff0208

00027acc <strnlen>:
   27acc:	b191      	cbz	r1, 27af4 <strnlen+0x28>
   27ace:	4603      	mov	r3, r0
   27ad0:	b410      	push	{r4}
   27ad2:	1844      	adds	r4, r0, r1
   27ad4:	e001      	b.n	27ada <strnlen+0xe>
   27ad6:	42a3      	cmp	r3, r4
   27ad8:	d008      	beq.n	27aec <strnlen+0x20>
   27ada:	461a      	mov	r2, r3
   27adc:	3301      	adds	r3, #1
   27ade:	7811      	ldrb	r1, [r2, #0]
   27ae0:	2900      	cmp	r1, #0
   27ae2:	d1f8      	bne.n	27ad6 <strnlen+0xa>
   27ae4:	1a10      	subs	r0, r2, r0
   27ae6:	f85d 4b04 	ldr.w	r4, [sp], #4
   27aea:	4770      	bx	lr
   27aec:	1a18      	subs	r0, r3, r0
   27aee:	f85d 4b04 	ldr.w	r4, [sp], #4
   27af2:	4770      	bx	lr
   27af4:	4608      	mov	r0, r1
   27af6:	4770      	bx	lr

00027af8 <_strtoll_l.isra.0>:
   27af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27afc:	b087      	sub	sp, #28
   27afe:	4698      	mov	r8, r3
   27b00:	460d      	mov	r5, r1
   27b02:	9201      	str	r2, [sp, #4]
   27b04:	4a55      	ldr	r2, [pc, #340]	; (27c5c <_strtoll_l.isra.0+0x164>)
   27b06:	9103      	str	r1, [sp, #12]
   27b08:	9005      	str	r0, [sp, #20]
   27b0a:	4629      	mov	r1, r5
   27b0c:	f815 4b01 	ldrb.w	r4, [r5], #1
   27b10:	5d13      	ldrb	r3, [r2, r4]
   27b12:	f013 0308 	ands.w	r3, r3, #8
   27b16:	d1f8      	bne.n	27b0a <_strtoll_l.isra.0+0x12>
   27b18:	2c2d      	cmp	r4, #45	; 0x2d
   27b1a:	d079      	beq.n	27c10 <_strtoll_l.isra.0+0x118>
   27b1c:	2c2b      	cmp	r4, #43	; 0x2b
   27b1e:	d012      	beq.n	27b46 <_strtoll_l.isra.0+0x4e>
   27b20:	9304      	str	r3, [sp, #16]
   27b22:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   27b26:	f04f 33ff 	mov.w	r3, #4294967295
   27b2a:	9302      	str	r3, [sp, #8]
   27b2c:	f038 0310 	bics.w	r3, r8, #16
   27b30:	d115      	bne.n	27b5e <_strtoll_l.isra.0+0x66>
   27b32:	2c30      	cmp	r4, #48	; 0x30
   27b34:	d075      	beq.n	27c22 <_strtoll_l.isra.0+0x12a>
   27b36:	f1b8 0f00 	cmp.w	r8, #0
   27b3a:	d110      	bne.n	27b5e <_strtoll_l.isra.0+0x66>
   27b3c:	260a      	movs	r6, #10
   27b3e:	2700      	movs	r7, #0
   27b40:	f04f 080a 	mov.w	r8, #10
   27b44:	e00d      	b.n	27b62 <_strtoll_l.isra.0+0x6a>
   27b46:	9304      	str	r3, [sp, #16]
   27b48:	f04f 33ff 	mov.w	r3, #4294967295
   27b4c:	782c      	ldrb	r4, [r5, #0]
   27b4e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   27b52:	9302      	str	r3, [sp, #8]
   27b54:	f038 0310 	bics.w	r3, r8, #16
   27b58:	f101 0502 	add.w	r5, r1, #2
   27b5c:	d0e9      	beq.n	27b32 <_strtoll_l.isra.0+0x3a>
   27b5e:	4646      	mov	r6, r8
   27b60:	17f7      	asrs	r7, r6, #31
   27b62:	4632      	mov	r2, r6
   27b64:	463b      	mov	r3, r7
   27b66:	9802      	ldr	r0, [sp, #8]
   27b68:	4649      	mov	r1, r9
   27b6a:	f7e4 fe75 	bl	c858 <__aeabi_uldivmod>
   27b6e:	468c      	mov	ip, r1
   27b70:	4682      	mov	sl, r0
   27b72:	2300      	movs	r3, #0
   27b74:	46e3      	mov	fp, ip
   27b76:	2000      	movs	r0, #0
   27b78:	2100      	movs	r1, #0
   27b7a:	46a4      	mov	ip, r4
   27b7c:	e010      	b.n	27ba0 <_strtoll_l.isra.0+0xa8>
   27b7e:	f1ac 0437 	sub.w	r4, ip, #55	; 0x37
   27b82:	45a0      	cmp	r8, r4
   27b84:	dd1c      	ble.n	27bc0 <_strtoll_l.isra.0+0xc8>
   27b86:	2b00      	cmp	r3, #0
   27b88:	db06      	blt.n	27b98 <_strtoll_l.isra.0+0xa0>
   27b8a:	458b      	cmp	fp, r1
   27b8c:	bf08      	it	eq
   27b8e:	4582      	cmpeq	sl, r0
   27b90:	d302      	bcc.n	27b98 <_strtoll_l.isra.0+0xa0>
   27b92:	d127      	bne.n	27be4 <_strtoll_l.isra.0+0xec>
   27b94:	42a2      	cmp	r2, r4
   27b96:	da25      	bge.n	27be4 <_strtoll_l.isra.0+0xec>
   27b98:	f04f 33ff 	mov.w	r3, #4294967295
   27b9c:	f815 cb01 	ldrb.w	ip, [r5], #1
   27ba0:	f1ac 0430 	sub.w	r4, ip, #48	; 0x30
   27ba4:	2c09      	cmp	r4, #9
   27ba6:	d9ec      	bls.n	27b82 <_strtoll_l.isra.0+0x8a>
   27ba8:	f1ac 0441 	sub.w	r4, ip, #65	; 0x41
   27bac:	2c19      	cmp	r4, #25
   27bae:	d9e6      	bls.n	27b7e <_strtoll_l.isra.0+0x86>
   27bb0:	f1ac 0461 	sub.w	r4, ip, #97	; 0x61
   27bb4:	2c19      	cmp	r4, #25
   27bb6:	d803      	bhi.n	27bc0 <_strtoll_l.isra.0+0xc8>
   27bb8:	f1ac 0457 	sub.w	r4, ip, #87	; 0x57
   27bbc:	45a0      	cmp	r8, r4
   27bbe:	dce2      	bgt.n	27b86 <_strtoll_l.isra.0+0x8e>
   27bc0:	1c5a      	adds	r2, r3, #1
   27bc2:	d01b      	beq.n	27bfc <_strtoll_l.isra.0+0x104>
   27bc4:	9a04      	ldr	r2, [sp, #16]
   27bc6:	b112      	cbz	r2, 27bce <_strtoll_l.isra.0+0xd6>
   27bc8:	4240      	negs	r0, r0
   27bca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   27bce:	9a01      	ldr	r2, [sp, #4]
   27bd0:	b12a      	cbz	r2, 27bde <_strtoll_l.isra.0+0xe6>
   27bd2:	2b00      	cmp	r3, #0
   27bd4:	d13e      	bne.n	27c54 <_strtoll_l.isra.0+0x15c>
   27bd6:	9b01      	ldr	r3, [sp, #4]
   27bd8:	461a      	mov	r2, r3
   27bda:	9b03      	ldr	r3, [sp, #12]
   27bdc:	6013      	str	r3, [r2, #0]
   27bde:	b007      	add	sp, #28
   27be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27be4:	fb00 fc07 	mul.w	ip, r0, r7
   27be8:	2301      	movs	r3, #1
   27bea:	fb06 cc01 	mla	ip, r6, r1, ip
   27bee:	fba0 0106 	umull	r0, r1, r0, r6
   27bf2:	4461      	add	r1, ip
   27bf4:	1900      	adds	r0, r0, r4
   27bf6:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   27bfa:	e7cf      	b.n	27b9c <_strtoll_l.isra.0+0xa4>
   27bfc:	2322      	movs	r3, #34	; 0x22
   27bfe:	9a05      	ldr	r2, [sp, #20]
   27c00:	6013      	str	r3, [r2, #0]
   27c02:	9b01      	ldr	r3, [sp, #4]
   27c04:	b1cb      	cbz	r3, 27c3a <_strtoll_l.isra.0+0x142>
   27c06:	1e6b      	subs	r3, r5, #1
   27c08:	9802      	ldr	r0, [sp, #8]
   27c0a:	4649      	mov	r1, r9
   27c0c:	9303      	str	r3, [sp, #12]
   27c0e:	e7e2      	b.n	27bd6 <_strtoll_l.isra.0+0xde>
   27c10:	2300      	movs	r3, #0
   27c12:	782c      	ldrb	r4, [r5, #0]
   27c14:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   27c18:	1c8d      	adds	r5, r1, #2
   27c1a:	9302      	str	r3, [sp, #8]
   27c1c:	2301      	movs	r3, #1
   27c1e:	9304      	str	r3, [sp, #16]
   27c20:	e784      	b.n	27b2c <_strtoll_l.isra.0+0x34>
   27c22:	782b      	ldrb	r3, [r5, #0]
   27c24:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   27c28:	2b58      	cmp	r3, #88	; 0x58
   27c2a:	d10b      	bne.n	27c44 <_strtoll_l.isra.0+0x14c>
   27c2c:	786c      	ldrb	r4, [r5, #1]
   27c2e:	2610      	movs	r6, #16
   27c30:	2700      	movs	r7, #0
   27c32:	3502      	adds	r5, #2
   27c34:	f04f 0810 	mov.w	r8, #16
   27c38:	e793      	b.n	27b62 <_strtoll_l.isra.0+0x6a>
   27c3a:	9802      	ldr	r0, [sp, #8]
   27c3c:	4649      	mov	r1, r9
   27c3e:	b007      	add	sp, #28
   27c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c44:	f1b8 0f00 	cmp.w	r8, #0
   27c48:	d189      	bne.n	27b5e <_strtoll_l.isra.0+0x66>
   27c4a:	2608      	movs	r6, #8
   27c4c:	2700      	movs	r7, #0
   27c4e:	f04f 0808 	mov.w	r8, #8
   27c52:	e786      	b.n	27b62 <_strtoll_l.isra.0+0x6a>
   27c54:	4689      	mov	r9, r1
   27c56:	9002      	str	r0, [sp, #8]
   27c58:	e7d5      	b.n	27c06 <_strtoll_l.isra.0+0x10e>
   27c5a:	bf00      	nop
   27c5c:	0002bfa1 	.word	0x0002bfa1

00027c60 <_strtoll_r>:
   27c60:	f7ff bf4a 	b.w	27af8 <_strtoll_l.isra.0>

00027c64 <_strtoull_l.isra.0>:
   27c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27c68:	b085      	sub	sp, #20
   27c6a:	468b      	mov	fp, r1
   27c6c:	469a      	mov	sl, r3
   27c6e:	460d      	mov	r5, r1
   27c70:	9201      	str	r2, [sp, #4]
   27c72:	4a5d      	ldr	r2, [pc, #372]	; (27de8 <_strtoull_l.isra.0+0x184>)
   27c74:	9003      	str	r0, [sp, #12]
   27c76:	4629      	mov	r1, r5
   27c78:	f815 4b01 	ldrb.w	r4, [r5], #1
   27c7c:	5d13      	ldrb	r3, [r2, r4]
   27c7e:	f013 0308 	ands.w	r3, r3, #8
   27c82:	d1f8      	bne.n	27c76 <_strtoull_l.isra.0+0x12>
   27c84:	2c2d      	cmp	r4, #45	; 0x2d
   27c86:	f000 8086 	beq.w	27d96 <_strtoull_l.isra.0+0x132>
   27c8a:	2c2b      	cmp	r4, #43	; 0x2b
   27c8c:	d014      	beq.n	27cb8 <_strtoull_l.isra.0+0x54>
   27c8e:	9302      	str	r3, [sp, #8]
   27c90:	f03a 0310 	bics.w	r3, sl, #16
   27c94:	d117      	bne.n	27cc6 <_strtoull_l.isra.0+0x62>
   27c96:	2c30      	cmp	r4, #48	; 0x30
   27c98:	f000 8082 	beq.w	27da0 <_strtoull_l.isra.0+0x13c>
   27c9c:	f1ba 0f00 	cmp.w	sl, #0
   27ca0:	d111      	bne.n	27cc6 <_strtoull_l.isra.0+0x62>
   27ca2:	2205      	movs	r2, #5
   27ca4:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
   27ca8:	4f50      	ldr	r7, [pc, #320]	; (27dec <_strtoull_l.isra.0+0x188>)
   27caa:	f04f 080a 	mov.w	r8, #10
   27cae:	f04f 0900 	mov.w	r9, #0
   27cb2:	f04f 0a0a 	mov.w	sl, #10
   27cb6:	e01c      	b.n	27cf2 <_strtoull_l.isra.0+0x8e>
   27cb8:	9302      	str	r3, [sp, #8]
   27cba:	f03a 0310 	bics.w	r3, sl, #16
   27cbe:	782c      	ldrb	r4, [r5, #0]
   27cc0:	f101 0502 	add.w	r5, r1, #2
   27cc4:	d0e7      	beq.n	27c96 <_strtoull_l.isra.0+0x32>
   27cc6:	ea4f 79ea 	mov.w	r9, sl, asr #31
   27cca:	4652      	mov	r2, sl
   27ccc:	f04f 30ff 	mov.w	r0, #4294967295
   27cd0:	f04f 31ff 	mov.w	r1, #4294967295
   27cd4:	464b      	mov	r3, r9
   27cd6:	46d0      	mov	r8, sl
   27cd8:	f7e4 fdbe 	bl	c858 <__aeabi_uldivmod>
   27cdc:	468c      	mov	ip, r1
   27cde:	4606      	mov	r6, r0
   27ce0:	4652      	mov	r2, sl
   27ce2:	464b      	mov	r3, r9
   27ce4:	f04f 30ff 	mov.w	r0, #4294967295
   27ce8:	f04f 31ff 	mov.w	r1, #4294967295
   27cec:	4667      	mov	r7, ip
   27cee:	f7e4 fdb3 	bl	c858 <__aeabi_uldivmod>
   27cf2:	2300      	movs	r3, #0
   27cf4:	2000      	movs	r0, #0
   27cf6:	2100      	movs	r1, #0
   27cf8:	46a4      	mov	ip, r4
   27cfa:	e013      	b.n	27d24 <_strtoull_l.isra.0+0xc0>
   27cfc:	f1ac 0437 	sub.w	r4, ip, #55	; 0x37
   27d00:	45a2      	cmp	sl, r4
   27d02:	dd1f      	ble.n	27d44 <_strtoull_l.isra.0+0xe0>
   27d04:	2b00      	cmp	r3, #0
   27d06:	db09      	blt.n	27d1c <_strtoull_l.isra.0+0xb8>
   27d08:	428f      	cmp	r7, r1
   27d0a:	bf08      	it	eq
   27d0c:	4286      	cmpeq	r6, r0
   27d0e:	d305      	bcc.n	27d1c <_strtoull_l.isra.0+0xb8>
   27d10:	42b9      	cmp	r1, r7
   27d12:	bf08      	it	eq
   27d14:	42b0      	cmpeq	r0, r6
   27d16:	d125      	bne.n	27d64 <_strtoull_l.isra.0+0x100>
   27d18:	4294      	cmp	r4, r2
   27d1a:	dd23      	ble.n	27d64 <_strtoull_l.isra.0+0x100>
   27d1c:	f04f 33ff 	mov.w	r3, #4294967295
   27d20:	f815 cb01 	ldrb.w	ip, [r5], #1
   27d24:	f1ac 0430 	sub.w	r4, ip, #48	; 0x30
   27d28:	2c09      	cmp	r4, #9
   27d2a:	d9e9      	bls.n	27d00 <_strtoull_l.isra.0+0x9c>
   27d2c:	f1ac 0441 	sub.w	r4, ip, #65	; 0x41
   27d30:	2c19      	cmp	r4, #25
   27d32:	d9e3      	bls.n	27cfc <_strtoull_l.isra.0+0x98>
   27d34:	f1ac 0461 	sub.w	r4, ip, #97	; 0x61
   27d38:	2c19      	cmp	r4, #25
   27d3a:	d803      	bhi.n	27d44 <_strtoull_l.isra.0+0xe0>
   27d3c:	f1ac 0457 	sub.w	r4, ip, #87	; 0x57
   27d40:	45a2      	cmp	sl, r4
   27d42:	dcdf      	bgt.n	27d04 <_strtoull_l.isra.0+0xa0>
   27d44:	1c5a      	adds	r2, r3, #1
   27d46:	d019      	beq.n	27d7c <_strtoull_l.isra.0+0x118>
   27d48:	9a02      	ldr	r2, [sp, #8]
   27d4a:	b112      	cbz	r2, 27d52 <_strtoull_l.isra.0+0xee>
   27d4c:	4240      	negs	r0, r0
   27d4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   27d52:	9a01      	ldr	r2, [sp, #4]
   27d54:	b11a      	cbz	r2, 27d5e <_strtoull_l.isra.0+0xfa>
   27d56:	b9db      	cbnz	r3, 27d90 <_strtoull_l.isra.0+0x12c>
   27d58:	9b01      	ldr	r3, [sp, #4]
   27d5a:	f8c3 b000 	str.w	fp, [r3]
   27d5e:	b005      	add	sp, #20
   27d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27d64:	fb00 fc09 	mul.w	ip, r0, r9
   27d68:	2301      	movs	r3, #1
   27d6a:	fb08 cc01 	mla	ip, r8, r1, ip
   27d6e:	fba0 0108 	umull	r0, r1, r0, r8
   27d72:	4461      	add	r1, ip
   27d74:	1900      	adds	r0, r0, r4
   27d76:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   27d7a:	e7d1      	b.n	27d20 <_strtoull_l.isra.0+0xbc>
   27d7c:	2322      	movs	r3, #34	; 0x22
   27d7e:	9a03      	ldr	r2, [sp, #12]
   27d80:	f04f 30ff 	mov.w	r0, #4294967295
   27d84:	f04f 31ff 	mov.w	r1, #4294967295
   27d88:	6013      	str	r3, [r2, #0]
   27d8a:	9b01      	ldr	r3, [sp, #4]
   27d8c:	2b00      	cmp	r3, #0
   27d8e:	d0e6      	beq.n	27d5e <_strtoull_l.isra.0+0xfa>
   27d90:	f105 3bff 	add.w	fp, r5, #4294967295
   27d94:	e7e0      	b.n	27d58 <_strtoull_l.isra.0+0xf4>
   27d96:	2301      	movs	r3, #1
   27d98:	782c      	ldrb	r4, [r5, #0]
   27d9a:	1c8d      	adds	r5, r1, #2
   27d9c:	9302      	str	r3, [sp, #8]
   27d9e:	e777      	b.n	27c90 <_strtoull_l.isra.0+0x2c>
   27da0:	782b      	ldrb	r3, [r5, #0]
   27da2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   27da6:	2b58      	cmp	r3, #88	; 0x58
   27da8:	d10d      	bne.n	27dc6 <_strtoull_l.isra.0+0x162>
   27daa:	786c      	ldrb	r4, [r5, #1]
   27dac:	220f      	movs	r2, #15
   27dae:	3502      	adds	r5, #2
   27db0:	f04f 36ff 	mov.w	r6, #4294967295
   27db4:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   27db8:	f04f 0810 	mov.w	r8, #16
   27dbc:	f04f 0900 	mov.w	r9, #0
   27dc0:	f04f 0a10 	mov.w	sl, #16
   27dc4:	e795      	b.n	27cf2 <_strtoull_l.isra.0+0x8e>
   27dc6:	f1ba 0f00 	cmp.w	sl, #0
   27dca:	f47f af7c 	bne.w	27cc6 <_strtoull_l.isra.0+0x62>
   27dce:	2207      	movs	r2, #7
   27dd0:	f04f 36ff 	mov.w	r6, #4294967295
   27dd4:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
   27dd8:	f04f 0808 	mov.w	r8, #8
   27ddc:	f04f 0900 	mov.w	r9, #0
   27de0:	f04f 0a08 	mov.w	sl, #8
   27de4:	e785      	b.n	27cf2 <_strtoull_l.isra.0+0x8e>
   27de6:	bf00      	nop
   27de8:	0002bfa1 	.word	0x0002bfa1
   27dec:	19999999 	.word	0x19999999

00027df0 <_strtoull_r>:
   27df0:	f7ff bf38 	b.w	27c64 <_strtoull_l.isra.0>

00027df4 <__ssprint_r>:
   27df4:	6893      	ldr	r3, [r2, #8]
   27df6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27dfa:	4691      	mov	r9, r2
   27dfc:	b083      	sub	sp, #12
   27dfe:	2b00      	cmp	r3, #0
   27e00:	d076      	beq.n	27ef0 <__ssprint_r+0xfc>
   27e02:	6817      	ldr	r7, [r2, #0]
   27e04:	4680      	mov	r8, r0
   27e06:	460c      	mov	r4, r1
   27e08:	6808      	ldr	r0, [r1, #0]
   27e0a:	3708      	adds	r7, #8
   27e0c:	688d      	ldr	r5, [r1, #8]
   27e0e:	e04b      	b.n	27ea8 <__ssprint_r+0xb4>
   27e10:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   27e14:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   27e18:	d034      	beq.n	27e84 <__ssprint_r+0x90>
   27e1a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   27e1e:	eb12 0242 	adds.w	r2, r2, r2, lsl #1
   27e22:	eba0 0501 	sub.w	r5, r0, r1
   27e26:	bf48      	it	mi
   27e28:	3201      	addmi	r2, #1
   27e2a:	19a8      	adds	r0, r5, r6
   27e2c:	ea4f 0b62 	mov.w	fp, r2, asr #1
   27e30:	3001      	adds	r0, #1
   27e32:	4558      	cmp	r0, fp
   27e34:	465a      	mov	r2, fp
   27e36:	d901      	bls.n	27e3c <__ssprint_r+0x48>
   27e38:	4683      	mov	fp, r0
   27e3a:	4602      	mov	r2, r0
   27e3c:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   27e40:	9301      	str	r3, [sp, #4]
   27e42:	d03b      	beq.n	27ebc <__ssprint_r+0xc8>
   27e44:	4611      	mov	r1, r2
   27e46:	4640      	mov	r0, r8
   27e48:	f7f9 fec6 	bl	21bd8 <_malloc_r>
   27e4c:	9b01      	ldr	r3, [sp, #4]
   27e4e:	4682      	mov	sl, r0
   27e50:	2800      	cmp	r0, #0
   27e52:	d03e      	beq.n	27ed2 <__ssprint_r+0xde>
   27e54:	462a      	mov	r2, r5
   27e56:	6921      	ldr	r1, [r4, #16]
   27e58:	9301      	str	r3, [sp, #4]
   27e5a:	f7e4 fe8b 	bl	cb74 <memcpy>
   27e5e:	89a2      	ldrh	r2, [r4, #12]
   27e60:	9b01      	ldr	r3, [sp, #4]
   27e62:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   27e66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   27e6a:	81a2      	strh	r2, [r4, #12]
   27e6c:	eb0a 0005 	add.w	r0, sl, r5
   27e70:	ebab 0205 	sub.w	r2, fp, r5
   27e74:	f8c4 a010 	str.w	sl, [r4, #16]
   27e78:	4635      	mov	r5, r6
   27e7a:	46b2      	mov	sl, r6
   27e7c:	6020      	str	r0, [r4, #0]
   27e7e:	60a2      	str	r2, [r4, #8]
   27e80:	f8c4 b014 	str.w	fp, [r4, #20]
   27e84:	4619      	mov	r1, r3
   27e86:	4652      	mov	r2, sl
   27e88:	f7fe ffb0 	bl	26dec <memmove>
   27e8c:	68a0      	ldr	r0, [r4, #8]
   27e8e:	f8d9 1008 	ldr.w	r1, [r9, #8]
   27e92:	6823      	ldr	r3, [r4, #0]
   27e94:	1b45      	subs	r5, r0, r5
   27e96:	1b8e      	subs	r6, r1, r6
   27e98:	eb03 000a 	add.w	r0, r3, sl
   27e9c:	60a5      	str	r5, [r4, #8]
   27e9e:	6020      	str	r0, [r4, #0]
   27ea0:	f8c9 6008 	str.w	r6, [r9, #8]
   27ea4:	b326      	cbz	r6, 27ef0 <__ssprint_r+0xfc>
   27ea6:	3708      	adds	r7, #8
   27ea8:	e957 3602 	ldrd	r3, r6, [r7, #-8]
   27eac:	2e00      	cmp	r6, #0
   27eae:	d0fa      	beq.n	27ea6 <__ssprint_r+0xb2>
   27eb0:	42b5      	cmp	r5, r6
   27eb2:	46aa      	mov	sl, r5
   27eb4:	d9ac      	bls.n	27e10 <__ssprint_r+0x1c>
   27eb6:	4635      	mov	r5, r6
   27eb8:	46b2      	mov	sl, r6
   27eba:	e7e3      	b.n	27e84 <__ssprint_r+0x90>
   27ebc:	4640      	mov	r0, r8
   27ebe:	f7fa fa29 	bl	22314 <_realloc_r>
   27ec2:	9b01      	ldr	r3, [sp, #4]
   27ec4:	4682      	mov	sl, r0
   27ec6:	2800      	cmp	r0, #0
   27ec8:	d1d0      	bne.n	27e6c <__ssprint_r+0x78>
   27eca:	6921      	ldr	r1, [r4, #16]
   27ecc:	4640      	mov	r0, r8
   27ece:	f7fe f805 	bl	25edc <_free_r>
   27ed2:	230c      	movs	r3, #12
   27ed4:	2200      	movs	r2, #0
   27ed6:	f04f 30ff 	mov.w	r0, #4294967295
   27eda:	f8c8 3000 	str.w	r3, [r8]
   27ede:	89a3      	ldrh	r3, [r4, #12]
   27ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   27ee4:	81a3      	strh	r3, [r4, #12]
   27ee6:	e9c9 2201 	strd	r2, r2, [r9, #4]
   27eea:	b003      	add	sp, #12
   27eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27ef0:	2000      	movs	r0, #0
   27ef2:	f8c9 0004 	str.w	r0, [r9, #4]
   27ef6:	b003      	add	sp, #12
   27ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027efc <_sungetc_r>:
   27efc:	b538      	push	{r3, r4, r5, lr}
   27efe:	1c4b      	adds	r3, r1, #1
   27f00:	d01a      	beq.n	27f38 <_sungetc_r+0x3c>
   27f02:	8993      	ldrh	r3, [r2, #12]
   27f04:	4614      	mov	r4, r2
   27f06:	6b12      	ldr	r2, [r2, #48]	; 0x30
   27f08:	b2cd      	uxtb	r5, r1
   27f0a:	f023 0320 	bic.w	r3, r3, #32
   27f0e:	81a3      	strh	r3, [r4, #12]
   27f10:	b1aa      	cbz	r2, 27f3e <_sungetc_r+0x42>
   27f12:	6862      	ldr	r2, [r4, #4]
   27f14:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27f16:	429a      	cmp	r2, r3
   27f18:	da09      	bge.n	27f2e <_sungetc_r+0x32>
   27f1a:	6823      	ldr	r3, [r4, #0]
   27f1c:	1e5a      	subs	r2, r3, #1
   27f1e:	6022      	str	r2, [r4, #0]
   27f20:	f803 5c01 	strb.w	r5, [r3, #-1]
   27f24:	6863      	ldr	r3, [r4, #4]
   27f26:	3301      	adds	r3, #1
   27f28:	6063      	str	r3, [r4, #4]
   27f2a:	4628      	mov	r0, r5
   27f2c:	bd38      	pop	{r3, r4, r5, pc}
   27f2e:	4621      	mov	r1, r4
   27f30:	f000 f884 	bl	2803c <__submore>
   27f34:	2800      	cmp	r0, #0
   27f36:	d0f0      	beq.n	27f1a <_sungetc_r+0x1e>
   27f38:	f04f 35ff 	mov.w	r5, #4294967295
   27f3c:	e7f5      	b.n	27f2a <_sungetc_r+0x2e>
   27f3e:	6922      	ldr	r2, [r4, #16]
   27f40:	6823      	ldr	r3, [r4, #0]
   27f42:	b12a      	cbz	r2, 27f50 <_sungetc_r+0x54>
   27f44:	429a      	cmp	r2, r3
   27f46:	d203      	bcs.n	27f50 <_sungetc_r+0x54>
   27f48:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   27f4c:	42aa      	cmp	r2, r5
   27f4e:	d00f      	beq.n	27f70 <_sungetc_r+0x74>
   27f50:	6862      	ldr	r2, [r4, #4]
   27f52:	f104 0040 	add.w	r0, r4, #64	; 0x40
   27f56:	63a3      	str	r3, [r4, #56]	; 0x38
   27f58:	2103      	movs	r1, #3
   27f5a:	4623      	mov	r3, r4
   27f5c:	63e2      	str	r2, [r4, #60]	; 0x3c
   27f5e:	2201      	movs	r2, #1
   27f60:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
   27f64:	f803 5f42 	strb.w	r5, [r3, #66]!
   27f68:	4628      	mov	r0, r5
   27f6a:	e9c4 3200 	strd	r3, r2, [r4]
   27f6e:	bd38      	pop	{r3, r4, r5, pc}
   27f70:	6862      	ldr	r2, [r4, #4]
   27f72:	3b01      	subs	r3, #1
   27f74:	3201      	adds	r2, #1
   27f76:	e9c4 3200 	strd	r3, r2, [r4]
   27f7a:	e7d6      	b.n	27f2a <_sungetc_r+0x2e>

00027f7c <__ssrefill_r>:
   27f7c:	b510      	push	{r4, lr}
   27f7e:	460c      	mov	r4, r1
   27f80:	6b09      	ldr	r1, [r1, #48]	; 0x30
   27f82:	b169      	cbz	r1, 27fa0 <__ssrefill_r+0x24>
   27f84:	f104 0340 	add.w	r3, r4, #64	; 0x40
   27f88:	4299      	cmp	r1, r3
   27f8a:	d001      	beq.n	27f90 <__ssrefill_r+0x14>
   27f8c:	f7fd ffa6 	bl	25edc <_free_r>
   27f90:	2000      	movs	r0, #0
   27f92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   27f94:	6320      	str	r0, [r4, #48]	; 0x30
   27f96:	6063      	str	r3, [r4, #4]
   27f98:	b113      	cbz	r3, 27fa0 <__ssrefill_r+0x24>
   27f9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   27f9c:	6023      	str	r3, [r4, #0]
   27f9e:	bd10      	pop	{r4, pc}
   27fa0:	89a3      	ldrh	r3, [r4, #12]
   27fa2:	2100      	movs	r1, #0
   27fa4:	6922      	ldr	r2, [r4, #16]
   27fa6:	f04f 30ff 	mov.w	r0, #4294967295
   27faa:	f043 0320 	orr.w	r3, r3, #32
   27fae:	e9c4 2100 	strd	r2, r1, [r4]
   27fb2:	81a3      	strh	r3, [r4, #12]
   27fb4:	bd10      	pop	{r4, pc}
   27fb6:	bf00      	nop

00027fb8 <_sfread_r>:
   27fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27fbc:	fb02 fa03 	mul.w	sl, r2, r3
   27fc0:	b083      	sub	sp, #12
   27fc2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   27fc4:	e9cd 3200 	strd	r3, r2, [sp]
   27fc8:	f1ba 0f00 	cmp.w	sl, #0
   27fcc:	d027      	beq.n	2801e <_sfread_r+0x66>
   27fce:	4680      	mov	r8, r0
   27fd0:	460e      	mov	r6, r1
   27fd2:	4657      	mov	r7, sl
   27fd4:	f04f 0900 	mov.w	r9, #0
   27fd8:	e00e      	b.n	27ff8 <_sfread_r+0x40>
   27fda:	6821      	ldr	r1, [r4, #0]
   27fdc:	442e      	add	r6, r5
   27fde:	f7e4 fdc9 	bl	cb74 <memcpy>
   27fe2:	6823      	ldr	r3, [r4, #0]
   27fe4:	4621      	mov	r1, r4
   27fe6:	4640      	mov	r0, r8
   27fe8:	442b      	add	r3, r5
   27fea:	f8c4 9004 	str.w	r9, [r4, #4]
   27fee:	6023      	str	r3, [r4, #0]
   27ff0:	f7ff ffc4 	bl	27f7c <__ssrefill_r>
   27ff4:	b9b8      	cbnz	r0, 28026 <_sfread_r+0x6e>
   27ff6:	465f      	mov	r7, fp
   27ff8:	6865      	ldr	r5, [r4, #4]
   27ffa:	4630      	mov	r0, r6
   27ffc:	42bd      	cmp	r5, r7
   27ffe:	462a      	mov	r2, r5
   28000:	eba7 0b05 	sub.w	fp, r7, r5
   28004:	d3e9      	bcc.n	27fda <_sfread_r+0x22>
   28006:	463a      	mov	r2, r7
   28008:	6821      	ldr	r1, [r4, #0]
   2800a:	f8dd a000 	ldr.w	sl, [sp]
   2800e:	f7e4 fdb1 	bl	cb74 <memcpy>
   28012:	e9d4 3200 	ldrd	r3, r2, [r4]
   28016:	1bd2      	subs	r2, r2, r7
   28018:	441f      	add	r7, r3
   2801a:	e9c4 7200 	strd	r7, r2, [r4]
   2801e:	4650      	mov	r0, sl
   28020:	b003      	add	sp, #12
   28022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28026:	44aa      	add	sl, r5
   28028:	9b01      	ldr	r3, [sp, #4]
   2802a:	ebaa 0707 	sub.w	r7, sl, r7
   2802e:	fbb7 faf3 	udiv	sl, r7, r3
   28032:	4650      	mov	r0, sl
   28034:	b003      	add	sp, #12
   28036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2803a:	bf00      	nop

0002803c <__submore>:
   2803c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28040:	460c      	mov	r4, r1
   28042:	6b09      	ldr	r1, [r1, #48]	; 0x30
   28044:	f104 0340 	add.w	r3, r4, #64	; 0x40
   28048:	4299      	cmp	r1, r3
   2804a:	d014      	beq.n	28076 <__submore+0x3a>
   2804c:	6b66      	ldr	r6, [r4, #52]	; 0x34
   2804e:	0077      	lsls	r7, r6, #1
   28050:	463a      	mov	r2, r7
   28052:	f7fa f95f 	bl	22314 <_realloc_r>
   28056:	4605      	mov	r5, r0
   28058:	b348      	cbz	r0, 280ae <__submore+0x72>
   2805a:	eb00 0806 	add.w	r8, r0, r6
   2805e:	4601      	mov	r1, r0
   28060:	4632      	mov	r2, r6
   28062:	4640      	mov	r0, r8
   28064:	f7e4 fd86 	bl	cb74 <memcpy>
   28068:	2000      	movs	r0, #0
   2806a:	f8c4 8000 	str.w	r8, [r4]
   2806e:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   28072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28076:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2807a:	f7f9 fdad 	bl	21bd8 <_malloc_r>
   2807e:	4603      	mov	r3, r0
   28080:	b1a8      	cbz	r0, 280ae <__submore+0x72>
   28082:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
   28086:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2808a:	6323      	str	r3, [r4, #48]	; 0x30
   2808c:	f203 32fd 	addw	r2, r3, #1021	; 0x3fd
   28090:	6360      	str	r0, [r4, #52]	; 0x34
   28092:	2000      	movs	r0, #0
   28094:	f883 13ff 	strb.w	r1, [r3, #1023]	; 0x3ff
   28098:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
   2809c:	f883 13fe 	strb.w	r1, [r3, #1022]	; 0x3fe
   280a0:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   280a4:	f883 13fd 	strb.w	r1, [r3, #1021]	; 0x3fd
   280a8:	6022      	str	r2, [r4, #0]
   280aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   280ae:	f04f 30ff 	mov.w	r0, #4294967295
   280b2:	e7de      	b.n	28072 <__submore+0x36>

000280b4 <__swbuf_r>:
   280b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   280b6:	460d      	mov	r5, r1
   280b8:	4614      	mov	r4, r2
   280ba:	4606      	mov	r6, r0
   280bc:	b110      	cbz	r0, 280c4 <__swbuf_r+0x10>
   280be:	6b83      	ldr	r3, [r0, #56]	; 0x38
   280c0:	2b00      	cmp	r3, #0
   280c2:	d043      	beq.n	2814c <__swbuf_r+0x98>
   280c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   280c8:	69a3      	ldr	r3, [r4, #24]
   280ca:	0717      	lsls	r7, r2, #28
   280cc:	b290      	uxth	r0, r2
   280ce:	60a3      	str	r3, [r4, #8]
   280d0:	d51b      	bpl.n	2810a <__swbuf_r+0x56>
   280d2:	6923      	ldr	r3, [r4, #16]
   280d4:	b1cb      	cbz	r3, 2810a <__swbuf_r+0x56>
   280d6:	b2ed      	uxtb	r5, r5
   280d8:	0481      	lsls	r1, r0, #18
   280da:	462f      	mov	r7, r5
   280dc:	d522      	bpl.n	28124 <__swbuf_r+0x70>
   280de:	6822      	ldr	r2, [r4, #0]
   280e0:	6961      	ldr	r1, [r4, #20]
   280e2:	1ad3      	subs	r3, r2, r3
   280e4:	4299      	cmp	r1, r3
   280e6:	dd29      	ble.n	2813c <__swbuf_r+0x88>
   280e8:	3301      	adds	r3, #1
   280ea:	68a1      	ldr	r1, [r4, #8]
   280ec:	1c50      	adds	r0, r2, #1
   280ee:	3901      	subs	r1, #1
   280f0:	6020      	str	r0, [r4, #0]
   280f2:	60a1      	str	r1, [r4, #8]
   280f4:	7015      	strb	r5, [r2, #0]
   280f6:	6962      	ldr	r2, [r4, #20]
   280f8:	429a      	cmp	r2, r3
   280fa:	d02a      	beq.n	28152 <__swbuf_r+0x9e>
   280fc:	2d0a      	cmp	r5, #10
   280fe:	d102      	bne.n	28106 <__swbuf_r+0x52>
   28100:	7b23      	ldrb	r3, [r4, #12]
   28102:	07db      	lsls	r3, r3, #31
   28104:	d425      	bmi.n	28152 <__swbuf_r+0x9e>
   28106:	4638      	mov	r0, r7
   28108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2810a:	4621      	mov	r1, r4
   2810c:	4630      	mov	r0, r6
   2810e:	f7fd fbb9 	bl	25884 <__swsetup_r>
   28112:	bb20      	cbnz	r0, 2815e <__swbuf_r+0xaa>
   28114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   28118:	b2ed      	uxtb	r5, r5
   2811a:	6923      	ldr	r3, [r4, #16]
   2811c:	b290      	uxth	r0, r2
   2811e:	462f      	mov	r7, r5
   28120:	0481      	lsls	r1, r0, #18
   28122:	d4dc      	bmi.n	280de <__swbuf_r+0x2a>
   28124:	6e61      	ldr	r1, [r4, #100]	; 0x64
   28126:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2812a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   2812e:	81a2      	strh	r2, [r4, #12]
   28130:	6822      	ldr	r2, [r4, #0]
   28132:	6661      	str	r1, [r4, #100]	; 0x64
   28134:	1ad3      	subs	r3, r2, r3
   28136:	6961      	ldr	r1, [r4, #20]
   28138:	4299      	cmp	r1, r3
   2813a:	dcd5      	bgt.n	280e8 <__swbuf_r+0x34>
   2813c:	4621      	mov	r1, r4
   2813e:	4630      	mov	r0, r6
   28140:	f7fd fd5e 	bl	25c00 <_fflush_r>
   28144:	b958      	cbnz	r0, 2815e <__swbuf_r+0xaa>
   28146:	6822      	ldr	r2, [r4, #0]
   28148:	2301      	movs	r3, #1
   2814a:	e7ce      	b.n	280ea <__swbuf_r+0x36>
   2814c:	f7fd fdb6 	bl	25cbc <__sinit>
   28150:	e7b8      	b.n	280c4 <__swbuf_r+0x10>
   28152:	4621      	mov	r1, r4
   28154:	4630      	mov	r0, r6
   28156:	f7fd fd53 	bl	25c00 <_fflush_r>
   2815a:	2800      	cmp	r0, #0
   2815c:	d0d3      	beq.n	28106 <__swbuf_r+0x52>
   2815e:	f04f 37ff 	mov.w	r7, #4294967295
   28162:	e7d0      	b.n	28106 <__swbuf_r+0x52>

00028164 <_wcrtomb_r>:
   28164:	b5f0      	push	{r4, r5, r6, r7, lr}
   28166:	4606      	mov	r6, r0
   28168:	b085      	sub	sp, #20
   2816a:	461d      	mov	r5, r3
   2816c:	b139      	cbz	r1, 2817e <_wcrtomb_r+0x1a>
   2816e:	4c0b      	ldr	r4, [pc, #44]	; (2819c <_wcrtomb_r+0x38>)
   28170:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   28174:	47a0      	blx	r4
   28176:	1c43      	adds	r3, r0, #1
   28178:	d009      	beq.n	2818e <_wcrtomb_r+0x2a>
   2817a:	b005      	add	sp, #20
   2817c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2817e:	4f07      	ldr	r7, [pc, #28]	; (2819c <_wcrtomb_r+0x38>)
   28180:	460a      	mov	r2, r1
   28182:	a901      	add	r1, sp, #4
   28184:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
   28188:	47a0      	blx	r4
   2818a:	1c43      	adds	r3, r0, #1
   2818c:	d1f5      	bne.n	2817a <_wcrtomb_r+0x16>
   2818e:	2200      	movs	r2, #0
   28190:	238a      	movs	r3, #138	; 0x8a
   28192:	602a      	str	r2, [r5, #0]
   28194:	6033      	str	r3, [r6, #0]
   28196:	b005      	add	sp, #20
   28198:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2819a:	bf00      	nop
   2819c:	200208f0 	.word	0x200208f0

000281a0 <__ascii_wctomb>:
   281a0:	4603      	mov	r3, r0
   281a2:	b149      	cbz	r1, 281b8 <__ascii_wctomb+0x18>
   281a4:	2aff      	cmp	r2, #255	; 0xff
   281a6:	d802      	bhi.n	281ae <__ascii_wctomb+0xe>
   281a8:	2001      	movs	r0, #1
   281aa:	700a      	strb	r2, [r1, #0]
   281ac:	4770      	bx	lr
   281ae:	228a      	movs	r2, #138	; 0x8a
   281b0:	f04f 30ff 	mov.w	r0, #4294967295
   281b4:	601a      	str	r2, [r3, #0]
   281b6:	4770      	bx	lr
   281b8:	4608      	mov	r0, r1
   281ba:	4770      	bx	lr

000281bc <_calloc_r>:
   281bc:	b510      	push	{r4, lr}
   281be:	fb02 f101 	mul.w	r1, r2, r1
   281c2:	f7f9 fd09 	bl	21bd8 <_malloc_r>
   281c6:	4604      	mov	r4, r0
   281c8:	b168      	cbz	r0, 281e6 <_calloc_r+0x2a>
   281ca:	f850 2c04 	ldr.w	r2, [r0, #-4]
   281ce:	f022 0203 	bic.w	r2, r2, #3
   281d2:	3a04      	subs	r2, #4
   281d4:	2a24      	cmp	r2, #36	; 0x24
   281d6:	d814      	bhi.n	28202 <_calloc_r+0x46>
   281d8:	2a13      	cmp	r2, #19
   281da:	d806      	bhi.n	281ea <_calloc_r+0x2e>
   281dc:	4602      	mov	r2, r0
   281de:	2300      	movs	r3, #0
   281e0:	e9c2 3300 	strd	r3, r3, [r2]
   281e4:	6093      	str	r3, [r2, #8]
   281e6:	4620      	mov	r0, r4
   281e8:	bd10      	pop	{r4, pc}
   281ea:	2300      	movs	r3, #0
   281ec:	2a1b      	cmp	r2, #27
   281ee:	e9c0 3300 	strd	r3, r3, [r0]
   281f2:	d90b      	bls.n	2820c <_calloc_r+0x50>
   281f4:	2a24      	cmp	r2, #36	; 0x24
   281f6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   281fa:	d00a      	beq.n	28212 <_calloc_r+0x56>
   281fc:	f100 0210 	add.w	r2, r0, #16
   28200:	e7ed      	b.n	281de <_calloc_r+0x22>
   28202:	2100      	movs	r1, #0
   28204:	f7fa f822 	bl	2224c <memset>
   28208:	4620      	mov	r0, r4
   2820a:	bd10      	pop	{r4, pc}
   2820c:	f100 0208 	add.w	r2, r0, #8
   28210:	e7e5      	b.n	281de <_calloc_r+0x22>
   28212:	f100 0218 	add.w	r2, r0, #24
   28216:	6103      	str	r3, [r0, #16]
   28218:	6143      	str	r3, [r0, #20]
   2821a:	e7e0      	b.n	281de <_calloc_r+0x22>

0002821c <_fclose_r>:
   2821c:	b570      	push	{r4, r5, r6, lr}
   2821e:	2900      	cmp	r1, #0
   28220:	d04b      	beq.n	282ba <_fclose_r+0x9e>
   28222:	460c      	mov	r4, r1
   28224:	4605      	mov	r5, r0
   28226:	b110      	cbz	r0, 2822e <_fclose_r+0x12>
   28228:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2822a:	2b00      	cmp	r3, #0
   2822c:	d048      	beq.n	282c0 <_fclose_r+0xa4>
   2822e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   28230:	07d8      	lsls	r0, r3, #31
   28232:	d534      	bpl.n	2829e <_fclose_r+0x82>
   28234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   28238:	2b00      	cmp	r3, #0
   2823a:	d03e      	beq.n	282ba <_fclose_r+0x9e>
   2823c:	4621      	mov	r1, r4
   2823e:	4628      	mov	r0, r5
   28240:	f7fd fc3c 	bl	25abc <__sflush_r>
   28244:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   28246:	4606      	mov	r6, r0
   28248:	b133      	cbz	r3, 28258 <_fclose_r+0x3c>
   2824a:	69e1      	ldr	r1, [r4, #28]
   2824c:	4628      	mov	r0, r5
   2824e:	4798      	blx	r3
   28250:	2800      	cmp	r0, #0
   28252:	bfb8      	it	lt
   28254:	f04f 36ff 	movlt.w	r6, #4294967295
   28258:	89a3      	ldrh	r3, [r4, #12]
   2825a:	061a      	lsls	r2, r3, #24
   2825c:	d43b      	bmi.n	282d6 <_fclose_r+0xba>
   2825e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   28260:	b141      	cbz	r1, 28274 <_fclose_r+0x58>
   28262:	f104 0340 	add.w	r3, r4, #64	; 0x40
   28266:	4299      	cmp	r1, r3
   28268:	d002      	beq.n	28270 <_fclose_r+0x54>
   2826a:	4628      	mov	r0, r5
   2826c:	f7fd fe36 	bl	25edc <_free_r>
   28270:	2300      	movs	r3, #0
   28272:	6323      	str	r3, [r4, #48]	; 0x30
   28274:	6c61      	ldr	r1, [r4, #68]	; 0x44
   28276:	b121      	cbz	r1, 28282 <_fclose_r+0x66>
   28278:	4628      	mov	r0, r5
   2827a:	f7fd fe2f 	bl	25edc <_free_r>
   2827e:	2300      	movs	r3, #0
   28280:	6463      	str	r3, [r4, #68]	; 0x44
   28282:	f7fd fd4b 	bl	25d1c <__sfp_lock_acquire>
   28286:	6e63      	ldr	r3, [r4, #100]	; 0x64
   28288:	2200      	movs	r2, #0
   2828a:	07db      	lsls	r3, r3, #31
   2828c:	81a2      	strh	r2, [r4, #12]
   2828e:	d527      	bpl.n	282e0 <_fclose_r+0xc4>
   28290:	6da0      	ldr	r0, [r4, #88]	; 0x58
   28292:	f7fe fcdb 	bl	26c4c <__retarget_lock_close_recursive>
   28296:	f7fd fd47 	bl	25d28 <__sfp_lock_release>
   2829a:	4630      	mov	r0, r6
   2829c:	bd70      	pop	{r4, r5, r6, pc}
   2829e:	89a3      	ldrh	r3, [r4, #12]
   282a0:	0599      	lsls	r1, r3, #22
   282a2:	d4cb      	bmi.n	2823c <_fclose_r+0x20>
   282a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   282a6:	f7fe fcd3 	bl	26c50 <__retarget_lock_acquire_recursive>
   282aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   282ae:	2b00      	cmp	r3, #0
   282b0:	d1c4      	bne.n	2823c <_fclose_r+0x20>
   282b2:	6e66      	ldr	r6, [r4, #100]	; 0x64
   282b4:	f016 0601 	ands.w	r6, r6, #1
   282b8:	d008      	beq.n	282cc <_fclose_r+0xb0>
   282ba:	2600      	movs	r6, #0
   282bc:	4630      	mov	r0, r6
   282be:	bd70      	pop	{r4, r5, r6, pc}
   282c0:	f7fd fcfc 	bl	25cbc <__sinit>
   282c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   282c6:	07d8      	lsls	r0, r3, #31
   282c8:	d4b4      	bmi.n	28234 <_fclose_r+0x18>
   282ca:	e7e8      	b.n	2829e <_fclose_r+0x82>
   282cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   282ce:	f7fe fcc1 	bl	26c54 <__retarget_lock_release_recursive>
   282d2:	4630      	mov	r0, r6
   282d4:	bd70      	pop	{r4, r5, r6, pc}
   282d6:	6921      	ldr	r1, [r4, #16]
   282d8:	4628      	mov	r0, r5
   282da:	f7fd fdff 	bl	25edc <_free_r>
   282de:	e7be      	b.n	2825e <_fclose_r+0x42>
   282e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   282e2:	f7fe fcb7 	bl	26c54 <__retarget_lock_release_recursive>
   282e6:	e7d3      	b.n	28290 <_fclose_r+0x74>

000282e8 <_fstat_r>:
   282e8:	b570      	push	{r4, r5, r6, lr}
   282ea:	460c      	mov	r4, r1
   282ec:	4603      	mov	r3, r0
   282ee:	4d08      	ldr	r5, [pc, #32]	; (28310 <_fstat_r+0x28>)
   282f0:	2600      	movs	r6, #0
   282f2:	4620      	mov	r0, r4
   282f4:	4611      	mov	r1, r2
   282f6:	461c      	mov	r4, r3
   282f8:	602e      	str	r6, [r5, #0]
   282fa:	f001 f850 	bl	2939e <_fstat>
   282fe:	1c43      	adds	r3, r0, #1
   28300:	d000      	beq.n	28304 <_fstat_r+0x1c>
   28302:	bd70      	pop	{r4, r5, r6, pc}
   28304:	682b      	ldr	r3, [r5, #0]
   28306:	2b00      	cmp	r3, #0
   28308:	d0fb      	beq.n	28302 <_fstat_r+0x1a>
   2830a:	6023      	str	r3, [r4, #0]
   2830c:	bd70      	pop	{r4, r5, r6, pc}
   2830e:	bf00      	nop
   28310:	200251ac 	.word	0x200251ac

00028314 <_isatty_r>:
   28314:	b538      	push	{r3, r4, r5, lr}
   28316:	2200      	movs	r2, #0
   28318:	4d06      	ldr	r5, [pc, #24]	; (28334 <_isatty_r+0x20>)
   2831a:	4604      	mov	r4, r0
   2831c:	4608      	mov	r0, r1
   2831e:	602a      	str	r2, [r5, #0]
   28320:	f001 f837 	bl	29392 <_isatty>
   28324:	1c43      	adds	r3, r0, #1
   28326:	d000      	beq.n	2832a <_isatty_r+0x16>
   28328:	bd38      	pop	{r3, r4, r5, pc}
   2832a:	682b      	ldr	r3, [r5, #0]
   2832c:	2b00      	cmp	r3, #0
   2832e:	d0fb      	beq.n	28328 <_isatty_r+0x14>
   28330:	6023      	str	r3, [r4, #0]
   28332:	bd38      	pop	{r3, r4, r5, pc}
   28334:	200251ac 	.word	0x200251ac

00028338 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   28338:	b140      	cbz	r0, 2834c <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2833a:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2833c:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   28340:	2b02      	cmp	r3, #2
   28342:	d006      	beq.n	28352 <sys_notify_validate+0x1a>
   28344:	2b03      	cmp	r3, #3
   28346:	d004      	beq.n	28352 <sys_notify_validate+0x1a>
   28348:	2b01      	cmp	r3, #1
   2834a:	d005      	beq.n	28358 <sys_notify_validate+0x20>
		return -EINVAL;
   2834c:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   28350:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   28352:	6803      	ldr	r3, [r0, #0]
   28354:	2b00      	cmp	r3, #0
   28356:	d0f9      	beq.n	2834c <sys_notify_validate+0x14>
		notify->result = 0;
   28358:	2300      	movs	r3, #0
   2835a:	6083      	str	r3, [r0, #8]
   2835c:	4618      	mov	r0, r3
   2835e:	4770      	bx	lr

00028360 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   28360:	6843      	ldr	r3, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   28362:	b510      	push	{r4, lr}
	return method & SYS_NOTIFY_METHOD_MASK;
   28364:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   28368:	2b02      	cmp	r3, #2
	notify->result = res;
   2836a:	6081      	str	r1, [r0, #8]
	switch (method) {
   2836c:	d00b      	beq.n	28386 <sys_notify_finalize+0x26>
   2836e:	2b03      	cmp	r3, #3
   28370:	d10c      	bne.n	2838c <sys_notify_finalize+0x2c>
	struct k_poll_signal *sig = NULL;
   28372:	2300      	movs	r3, #0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   28374:	6804      	ldr	r4, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   28376:	2200      	movs	r2, #0
   28378:	6042      	str	r2, [r0, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   2837a:	b113      	cbz	r3, 28382 <sys_notify_finalize+0x22>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   2837c:	4618      	mov	r0, r3
   2837e:	f7f9 fb9d 	bl	21abc <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   28382:	4620      	mov	r0, r4
   28384:	bd10      	pop	{r4, pc}
	sys_notify_generic_callback rv = 0;
   28386:	2400      	movs	r4, #0
		sig = notify->method.signal;
   28388:	6803      	ldr	r3, [r0, #0]
		break;
   2838a:	e7f4      	b.n	28376 <sys_notify_finalize+0x16>
	switch (method) {
   2838c:	2400      	movs	r4, #0
   2838e:	4623      	mov	r3, r4
   28390:	e7f1      	b.n	28376 <sys_notify_finalize+0x16>

00028392 <arch_printk_char_out>:
}
   28392:	2000      	movs	r0, #0
   28394:	4770      	bx	lr

00028396 <str_out>:
{
   28396:	b530      	push	{r4, r5, lr}
   28398:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2839a:	680c      	ldr	r4, [r1, #0]
   2839c:	1c55      	adds	r5, r2, #1
   2839e:	b114      	cbz	r4, 283a6 <str_out+0x10>
   283a0:	684b      	ldr	r3, [r1, #4]
   283a2:	4293      	cmp	r3, r2
   283a4:	dc01      	bgt.n	283aa <str_out+0x14>
		ctx->count++;
   283a6:	608d      	str	r5, [r1, #8]
}
   283a8:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   283aa:	3b01      	subs	r3, #1
   283ac:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   283ae:	bf08      	it	eq
   283b0:	2200      	moveq	r2, #0
   283b2:	608d      	str	r5, [r1, #8]
   283b4:	bf0c      	ite	eq
   283b6:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   283b8:	54a0      	strbne	r0, [r4, r2]
   283ba:	e7f5      	b.n	283a8 <str_out+0x12>

000283bc <printk>:
{
   283bc:	b40f      	push	{r0, r1, r2, r3}
   283be:	b507      	push	{r0, r1, r2, lr}
   283c0:	a904      	add	r1, sp, #16
   283c2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   283c6:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   283c8:	f7e9 fe1a 	bl	12000 <vprintk>
}
   283cc:	b003      	add	sp, #12
   283ce:	f85d eb04 	ldr.w	lr, [sp], #4
   283d2:	b004      	add	sp, #16
   283d4:	4770      	bx	lr

000283d6 <snprintk>:
{
   283d6:	b40c      	push	{r2, r3}
   283d8:	b507      	push	{r0, r1, r2, lr}
   283da:	ab04      	add	r3, sp, #16
   283dc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   283e0:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   283e2:	f7e9 fe1b 	bl	1201c <vsnprintk>
}
   283e6:	b003      	add	sp, #12
   283e8:	f85d eb04 	ldr.w	lr, [sp], #4
   283ec:	b002      	add	sp, #8
   283ee:	4770      	bx	lr

000283f0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   283f0:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   283f2:	f013 0307 	ands.w	r3, r3, #7
   283f6:	d105      	bne.n	28404 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   283f8:	6803      	ldr	r3, [r0, #0]
   283fa:	2b00      	cmp	r3, #0
		evt = EVT_START;
   283fc:	bf0c      	ite	eq
   283fe:	2000      	moveq	r0, #0
   28400:	2003      	movne	r0, #3
   28402:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   28404:	2b02      	cmp	r3, #2
   28406:	d105      	bne.n	28414 <process_recheck+0x24>
		   && (mgr->refs == 0)) {
   28408:	8b43      	ldrh	r3, [r0, #26]
   2840a:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   2840c:	bf14      	ite	ne
   2840e:	2000      	movne	r0, #0
   28410:	2004      	moveq	r0, #4
   28412:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   28414:	2b01      	cmp	r3, #1
   28416:	d105      	bne.n	28424 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   28418:	6803      	ldr	r3, [r0, #0]
   2841a:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   2841c:	bf0c      	ite	eq
   2841e:	2000      	moveq	r0, #0
   28420:	2005      	movne	r0, #5
   28422:	4770      	bx	lr
	int evt = EVT_NOP;
   28424:	2000      	movs	r0, #0
}
   28426:	4770      	bx	lr

00028428 <notify_one>:
{
   28428:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2842a:	460d      	mov	r5, r1
   2842c:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2842e:	4619      	mov	r1, r3
   28430:	1d28      	adds	r0, r5, #4
{
   28432:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   28434:	9300      	str	r3, [sp, #0]
   28436:	f7ff ff93 	bl	28360 <sys_notify_finalize>
	if (cb) {
   2843a:	4604      	mov	r4, r0
   2843c:	b140      	cbz	r0, 28450 <notify_one+0x28>
		cb(mgr, cli, state, res);
   2843e:	e9dd 3200 	ldrd	r3, r2, [sp]
   28442:	4629      	mov	r1, r5
   28444:	4630      	mov	r0, r6
   28446:	46a4      	mov	ip, r4
}
   28448:	b002      	add	sp, #8
   2844a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   2844e:	4760      	bx	ip
}
   28450:	b002      	add	sp, #8
   28452:	bd70      	pop	{r4, r5, r6, pc}

00028454 <transition_complete>:
{
   28454:	b410      	push	{r4}
	__asm__ volatile(
   28456:	f04f 0420 	mov.w	r4, #32
   2845a:	f3ef 8211 	mrs	r2, BASEPRI
   2845e:	f384 8811 	msr	BASEPRI, r4
   28462:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   28466:	6141      	str	r1, [r0, #20]
}
   28468:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   2846c:	2101      	movs	r1, #1
   2846e:	f7e9 bde9 	b.w	12044 <process_event>

00028472 <validate_args>:
{
   28472:	b510      	push	{r4, lr}
   28474:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   28476:	b140      	cbz	r0, 2848a <validate_args+0x18>
   28478:	b139      	cbz	r1, 2848a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   2847a:	1d08      	adds	r0, r1, #4
   2847c:	f7ff ff5c 	bl	28338 <sys_notify_validate>
	if ((rv == 0)
   28480:	b928      	cbnz	r0, 2848e <validate_args+0x1c>
	    && ((cli->notify.flags
   28482:	68a3      	ldr	r3, [r4, #8]
   28484:	f033 0303 	bics.w	r3, r3, #3
   28488:	d001      	beq.n	2848e <validate_args+0x1c>
		rv = -EINVAL;
   2848a:	f06f 0015 	mvn.w	r0, #21
}
   2848e:	bd10      	pop	{r4, pc}

00028490 <onoff_manager_init>:
{
   28490:	b538      	push	{r3, r4, r5, lr}
   28492:	460c      	mov	r4, r1
	if ((mgr == NULL)
   28494:	4605      	mov	r5, r0
   28496:	b158      	cbz	r0, 284b0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   28498:	b151      	cbz	r1, 284b0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2849a:	680b      	ldr	r3, [r1, #0]
   2849c:	b143      	cbz	r3, 284b0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2849e:	684b      	ldr	r3, [r1, #4]
   284a0:	b133      	cbz	r3, 284b0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   284a2:	221c      	movs	r2, #28
   284a4:	2100      	movs	r1, #0
   284a6:	f7f9 fed1 	bl	2224c <memset>
	return 0;
   284aa:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   284ac:	612c      	str	r4, [r5, #16]
}
   284ae:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   284b0:	f06f 0015 	mvn.w	r0, #21
   284b4:	e7fb      	b.n	284ae <onoff_manager_init+0x1e>

000284b6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   284b6:	b570      	push	{r4, r5, r6, lr}
   284b8:	4604      	mov	r4, r0
   284ba:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   284bc:	f7ff ffd9 	bl	28472 <validate_args>

	if (rv < 0) {
   284c0:	1e05      	subs	r5, r0, #0
   284c2:	db31      	blt.n	28528 <onoff_request+0x72>
   284c4:	f04f 0320 	mov.w	r3, #32
   284c8:	f3ef 8111 	mrs	r1, BASEPRI
   284cc:	f383 8811 	msr	BASEPRI, r3
   284d0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   284d4:	f64f 75ff 	movw	r5, #65535	; 0xffff
   284d8:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   284da:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   284dc:	42ab      	cmp	r3, r5
   284de:	f000 0207 	and.w	r2, r0, #7
   284e2:	d02e      	beq.n	28542 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   284e4:	2a02      	cmp	r2, #2
   284e6:	d10e      	bne.n	28506 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   284e8:	3301      	adds	r3, #1
   284ea:	8363      	strh	r3, [r4, #26]
	rv = state;
   284ec:	4615      	mov	r5, r2
		notify = true;
   284ee:	2301      	movs	r3, #1
	__asm__ volatile(
   284f0:	f381 8811 	msr	BASEPRI, r1
   284f4:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   284f8:	b1b3      	cbz	r3, 28528 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   284fa:	2300      	movs	r3, #0
   284fc:	4631      	mov	r1, r6
   284fe:	4620      	mov	r0, r4
   28500:	f7ff ff92 	bl	28428 <notify_one>
   28504:	e010      	b.n	28528 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   28506:	0783      	lsls	r3, r0, #30
   28508:	d001      	beq.n	2850e <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   2850a:	2a06      	cmp	r2, #6
   2850c:	d10e      	bne.n	2852c <onoff_request+0x76>
	parent->next = child;
   2850e:	2300      	movs	r3, #0
   28510:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   28512:	6863      	ldr	r3, [r4, #4]
   28514:	b993      	cbnz	r3, 2853c <onoff_request+0x86>
	list->head = node;
   28516:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   2851a:	4615      	mov	r5, r2
   2851c:	b962      	cbnz	r2, 28538 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   2851e:	460a      	mov	r2, r1
   28520:	4620      	mov	r0, r4
   28522:	2102      	movs	r1, #2
   28524:	f7e9 fd8e 	bl	12044 <process_event>
		}
	}

	return rv;
}
   28528:	4628      	mov	r0, r5
   2852a:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   2852c:	2a05      	cmp	r2, #5
   2852e:	bf0c      	ite	eq
   28530:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   28534:	f06f 0504 	mvnne.w	r5, #4
   28538:	2300      	movs	r3, #0
   2853a:	e7d9      	b.n	284f0 <onoff_request+0x3a>
	parent->next = child;
   2853c:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2853e:	6066      	str	r6, [r4, #4]
}
   28540:	e7eb      	b.n	2851a <onoff_request+0x64>
		rv = -EAGAIN;
   28542:	f06f 050a 	mvn.w	r5, #10
   28546:	e7f7      	b.n	28538 <onoff_request+0x82>

00028548 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   28548:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   2854a:	f7f8 fef3 	bl	21334 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   2854e:	2000      	movs	r0, #0
   28550:	bd08      	pop	{r3, pc}

00028552 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   28552:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   28554:	f7f8 ff14 	bl	21380 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   28558:	f110 0f0b 	cmn.w	r0, #11
   2855c:	d005      	beq.n	2856a <sys_sem_take+0x18>
   2855e:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   28562:	bf08      	it	eq
   28564:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   28568:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   2856a:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   2856e:	e7fb      	b.n	28568 <sys_sem_take+0x16>

00028570 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   28570:	4604      	mov	r4, r0
   28572:	b508      	push	{r3, lr}
   28574:	4608      	mov	r0, r1
   28576:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   28578:	461a      	mov	r2, r3
   2857a:	47a0      	blx	r4
	return z_impl_k_current_get();
   2857c:	f7f8 fed4 	bl	21328 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   28580:	f7eb fc78 	bl	13e74 <z_impl_k_thread_abort>

00028584 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   28584:	b510      	push	{r4, lr}
   28586:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   28588:	f04f 33ff 	mov.w	r3, #4294967295
   2858c:	f04f 32ff 	mov.w	r2, #4294967295
   28590:	4620      	mov	r0, r4
   28592:	f7f8 fb45 	bl	20c20 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   28596:	4603      	mov	r3, r0
   28598:	2800      	cmp	r0, #0
   2859a:	d0f5      	beq.n	28588 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   2859c:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2859e:	3308      	adds	r3, #8
   285a0:	e8d3 1fef 	ldaex	r1, [r3]
   285a4:	f021 0c01 	bic.w	ip, r1, #1
   285a8:	e8c3 cfee 	stlex	lr, ip, [r3]
   285ac:	f1be 0f00 	cmp.w	lr, #0
   285b0:	d1f6      	bne.n	285a0 <z_work_q_main+0x1c>
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   285b2:	07cb      	lsls	r3, r1, #31
   285b4:	d500      	bpl.n	285b8 <z_work_q_main+0x34>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   285b6:	4790      	blx	r2
	z_impl_k_yield();
   285b8:	f7f8 fe4a 	bl	21250 <z_impl_k_yield>
   285bc:	e7e4      	b.n	28588 <z_work_q_main+0x4>

000285be <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   285be:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   285c0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   285c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   285c8:	bf2c      	ite	cs
   285ca:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   285ce:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   285d2:	4770      	bx	lr

000285d4 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   285d4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   285d8:	6880      	ldr	r0, [r0, #8]
   285da:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   285de:	bf2c      	ite	cs
   285e0:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   285e4:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   285e8:	4770      	bx	lr

000285ea <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   285ea:	2201      	movs	r2, #1
{
   285ec:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   285ee:	f7ff ffe6 	bl	285be <chunk_field>
}
   285f2:	0840      	lsrs	r0, r0, #1
   285f4:	bd08      	pop	{r3, pc}

000285f6 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   285f6:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   285f8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   285fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   28600:	d308      	bcc.n	28614 <set_chunk_used+0x1e>
		if (used) {
   28602:	684b      	ldr	r3, [r1, #4]
   28604:	b11a      	cbz	r2, 2860e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   28606:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   2860a:	604b      	str	r3, [r1, #4]
   2860c:	4770      	bx	lr
   2860e:	f023 0301 	bic.w	r3, r3, #1
   28612:	e7fa      	b.n	2860a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   28614:	884b      	ldrh	r3, [r1, #2]
   28616:	b11a      	cbz	r2, 28620 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   28618:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   2861c:	804b      	strh	r3, [r1, #2]
		}
	}
}
   2861e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   28620:	f023 0301 	bic.w	r3, r3, #1
   28624:	e7fa      	b.n	2861c <set_chunk_used+0x26>

00028626 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   28626:	0053      	lsls	r3, r2, #1
   28628:	2201      	movs	r2, #1
   2862a:	f7ff bfd3 	b.w	285d4 <chunk_set>

0002862e <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   2862e:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   28630:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   28632:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   28636:	bf2c      	ite	cs
   28638:	2002      	movcs	r0, #2
   2863a:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   2863c:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   2863e:	fab0 f080 	clz	r0, r0
}
   28642:	f1c0 001f 	rsb	r0, r0, #31
   28646:	4770      	bx	lr

00028648 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   28648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2864a:	4616      	mov	r6, r2
   2864c:	4604      	mov	r4, r0
   2864e:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   28650:	f7ff ffcb 	bl	285ea <chunk_size>
   28654:	4631      	mov	r1, r6
   28656:	4605      	mov	r5, r0
   28658:	4620      	mov	r0, r4
   2865a:	f7ff ffc6 	bl	285ea <chunk_size>
   2865e:	182b      	adds	r3, r5, r0

	set_chunk_size(h, lc, newsz);
   28660:	461a      	mov	r2, r3
   28662:	4639      	mov	r1, r7
   28664:	4620      	mov	r0, r4
   28666:	9301      	str	r3, [sp, #4]
   28668:	f7ff ffdd 	bl	28626 <set_chunk_size>
	return c + chunk_size(h, c);
   2866c:	4631      	mov	r1, r6
   2866e:	4620      	mov	r0, r4
   28670:	f7ff ffbb 	bl	285ea <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   28674:	2200      	movs	r2, #0
   28676:	1831      	adds	r1, r6, r0
   28678:	4620      	mov	r0, r4
   2867a:	9b01      	ldr	r3, [sp, #4]
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   2867c:	b003      	add	sp, #12
   2867e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   28682:	f7ff bfa7 	b.w	285d4 <chunk_set>

00028686 <split_chunks>:
{
   28686:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28688:	4614      	mov	r4, r2
   2868a:	460e      	mov	r6, r1
   2868c:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   2868e:	f7ff ffac 	bl	285ea <chunk_size>
	size_t lsz = rc - lc;
   28692:	1ba3      	subs	r3, r4, r6
	size_t rsz = sz0 - lsz;
   28694:	1b32      	subs	r2, r6, r4
   28696:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
   28698:	4631      	mov	r1, r6
   2869a:	461a      	mov	r2, r3
   2869c:	4628      	mov	r0, r5
   2869e:	9301      	str	r3, [sp, #4]
   286a0:	f7ff ffc1 	bl	28626 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   286a4:	463a      	mov	r2, r7
   286a6:	4621      	mov	r1, r4
   286a8:	4628      	mov	r0, r5
   286aa:	f7ff ffbc 	bl	28626 <set_chunk_size>
   286ae:	9b01      	ldr	r3, [sp, #4]
   286b0:	2200      	movs	r2, #0
   286b2:	4621      	mov	r1, r4
   286b4:	4628      	mov	r0, r5
   286b6:	f7ff ff8d 	bl	285d4 <chunk_set>
	return c + chunk_size(h, c);
   286ba:	4621      	mov	r1, r4
   286bc:	4628      	mov	r0, r5
   286be:	f7ff ff94 	bl	285ea <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   286c2:	463b      	mov	r3, r7
   286c4:	1821      	adds	r1, r4, r0
   286c6:	2200      	movs	r2, #0
   286c8:	4628      	mov	r0, r5
}
   286ca:	b003      	add	sp, #12
   286cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   286d0:	f7ff bf80 	b.w	285d4 <chunk_set>

000286d4 <free_list_remove_bidx>:
{
   286d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   286d8:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   286da:	2203      	movs	r2, #3
   286dc:	460e      	mov	r6, r1
   286de:	4604      	mov	r4, r0
   286e0:	f7ff ff6d 	bl	285be <chunk_field>
	if (next_free_chunk(h, c) == c) {
   286e4:	4286      	cmp	r6, r0
   286e6:	4605      	mov	r5, r0
   286e8:	f107 0804 	add.w	r8, r7, #4
   286ec:	d10b      	bne.n	28706 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   286ee:	2301      	movs	r3, #1
   286f0:	fa03 f707 	lsl.w	r7, r3, r7
   286f4:	68e3      	ldr	r3, [r4, #12]
   286f6:	ea23 0307 	bic.w	r3, r3, r7
   286fa:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   286fc:	2300      	movs	r3, #0
   286fe:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   28702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   28706:	4631      	mov	r1, r6
   28708:	2202      	movs	r2, #2
   2870a:	4620      	mov	r0, r4
   2870c:	f7ff ff57 	bl	285be <chunk_field>
   28710:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   28712:	462b      	mov	r3, r5
   28714:	4601      	mov	r1, r0
   28716:	2203      	movs	r2, #3
   28718:	4620      	mov	r0, r4
		b->next = second;
   2871a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   2871e:	f7ff ff59 	bl	285d4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   28722:	4633      	mov	r3, r6
   28724:	4629      	mov	r1, r5
   28726:	4620      	mov	r0, r4
}
   28728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2872c:	2202      	movs	r2, #2
   2872e:	f7ff bf51 	b.w	285d4 <chunk_set>

00028732 <free_list_remove>:
{
   28732:	b538      	push	{r3, r4, r5, lr}
   28734:	4604      	mov	r4, r0
   28736:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   28738:	f7ff ff57 	bl	285ea <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   2873c:	68a3      	ldr	r3, [r4, #8]
   2873e:	4601      	mov	r1, r0
   28740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   28744:	d301      	bcc.n	2874a <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   28746:	2801      	cmp	r0, #1
   28748:	d009      	beq.n	2875e <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   2874a:	4620      	mov	r0, r4
   2874c:	f7ff ff6f 	bl	2862e <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   28750:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   28752:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   28754:	4620      	mov	r0, r4
}
   28756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   2875a:	f7ff bfbb 	b.w	286d4 <free_list_remove_bidx>
}
   2875e:	bd38      	pop	{r3, r4, r5, pc}

00028760 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   28760:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   28764:	4604      	mov	r4, r0
   28766:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
   28768:	f7ff ff61 	bl	2862e <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   2876c:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   2876e:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   28770:	4620      	mov	r0, r4
   28772:	f7ff ff5c 	bl	2862e <bucket_idx>
   28776:	42a8      	cmp	r0, r5
   28778:	da04      	bge.n	28784 <alloc_chunk+0x24>
		return 0;
   2877a:	2100      	movs	r1, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   2877c:	4608      	mov	r0, r1
   2877e:	b003      	add	sp, #12
   28780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (b->next) {
   28784:	eb04 0985 	add.w	r9, r4, r5, lsl #2
   28788:	f8d9 8010 	ldr.w	r8, [r9, #16]
   2878c:	f1b8 0f00 	cmp.w	r8, #0
   28790:	d019      	beq.n	287c6 <alloc_chunk+0x66>
   28792:	2603      	movs	r6, #3
			chunkid_t c = b->next;
   28794:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
   28798:	4620      	mov	r0, r4
   2879a:	9101      	str	r1, [sp, #4]
   2879c:	f7ff ff25 	bl	285ea <chunk_size>
   287a0:	42b8      	cmp	r0, r7
   287a2:	9901      	ldr	r1, [sp, #4]
   287a4:	d305      	bcc.n	287b2 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   287a6:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   287a8:	4620      	mov	r0, r4
   287aa:	f7ff ff93 	bl	286d4 <free_list_remove_bidx>
   287ae:	9901      	ldr	r1, [sp, #4]
		return c;
   287b0:	e7e4      	b.n	2877c <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   287b2:	2203      	movs	r2, #3
   287b4:	4620      	mov	r0, r4
   287b6:	f7ff ff02 	bl	285be <chunk_field>
		} while (--i && b->next != first);
   287ba:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
   287bc:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
   287c0:	d001      	beq.n	287c6 <alloc_chunk+0x66>
   287c2:	4580      	cmp	r8, r0
   287c4:	d1e6      	bne.n	28794 <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   287c6:	f04f 32ff 	mov.w	r2, #4294967295
   287ca:	68e3      	ldr	r3, [r4, #12]
   287cc:	3501      	adds	r5, #1
   287ce:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0) {
   287d0:	401a      	ands	r2, r3
   287d2:	d0d2      	beq.n	2877a <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   287d4:	fa92 f2a2 	rbit	r2, r2
   287d8:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   287dc:	1d13      	adds	r3, r2, #4
   287de:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   287e2:	9101      	str	r1, [sp, #4]
   287e4:	e7e0      	b.n	287a8 <alloc_chunk+0x48>

000287e6 <free_list_add>:
{
   287e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   287ea:	4604      	mov	r4, r0
   287ec:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   287ee:	f7ff fefc 	bl	285ea <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   287f2:	68a3      	ldr	r3, [r4, #8]
   287f4:	4601      	mov	r1, r0
   287f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   287fa:	d301      	bcc.n	28800 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   287fc:	2801      	cmp	r0, #1
   287fe:	d035      	beq.n	2886c <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   28800:	4620      	mov	r0, r4
   28802:	f7ff ff14 	bl	2862e <bucket_idx>
	if (b->next == 0) {
   28806:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   2880a:	6916      	ldr	r6, [r2, #16]
   2880c:	b99e      	cbnz	r6, 28836 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   2880e:	2301      	movs	r3, #1
   28810:	fa03 f000 	lsl.w	r0, r3, r0
   28814:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   28816:	4629      	mov	r1, r5
   28818:	4303      	orrs	r3, r0
   2881a:	60e3      	str	r3, [r4, #12]
   2881c:	4620      	mov	r0, r4
		b->next = c;
   2881e:	6115      	str	r5, [r2, #16]
   28820:	462b      	mov	r3, r5
   28822:	2202      	movs	r2, #2
   28824:	f7ff fed6 	bl	285d4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   28828:	2203      	movs	r2, #3
   2882a:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   2882c:	4620      	mov	r0, r4
}
   2882e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   28832:	f7ff becf 	b.w	285d4 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   28836:	2202      	movs	r2, #2
   28838:	4631      	mov	r1, r6
   2883a:	4620      	mov	r0, r4
   2883c:	f7ff febf 	bl	285be <chunk_field>
   28840:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   28842:	4603      	mov	r3, r0
   28844:	2202      	movs	r2, #2
   28846:	4629      	mov	r1, r5
   28848:	4620      	mov	r0, r4
   2884a:	f7ff fec3 	bl	285d4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2884e:	4633      	mov	r3, r6
   28850:	2203      	movs	r2, #3
   28852:	4629      	mov	r1, r5
   28854:	4620      	mov	r0, r4
   28856:	f7ff febd 	bl	285d4 <chunk_set>
   2885a:	2203      	movs	r2, #3
   2885c:	4639      	mov	r1, r7
   2885e:	462b      	mov	r3, r5
   28860:	4620      	mov	r0, r4
   28862:	f7ff feb7 	bl	285d4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   28866:	2202      	movs	r2, #2
   28868:	4631      	mov	r1, r6
   2886a:	e7df      	b.n	2882c <free_list_add+0x46>
   2886c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028870 <sys_heap_free>:
{
   28870:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (mem == NULL) {
   28872:	2900      	cmp	r1, #0
   28874:	d052      	beq.n	2891c <sys_heap_free+0xac>
	struct z_heap *h = heap->heap;
   28876:	6805      	ldr	r5, [r0, #0]
	set_chunk_used(h, c, false);
   28878:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   2887a:	68ab      	ldr	r3, [r5, #8]
   2887c:	4628      	mov	r0, r5
   2887e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   28882:	bf2c      	ite	cs
   28884:	2408      	movcs	r4, #8
   28886:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   28888:	1b09      	subs	r1, r1, r4
   2888a:	1b4c      	subs	r4, r1, r5
   2888c:	bf48      	it	mi
   2888e:	3407      	addmi	r4, #7
   28890:	10e4      	asrs	r4, r4, #3
	set_chunk_used(h, c, false);
   28892:	4621      	mov	r1, r4
   28894:	f7ff feaf 	bl	285f6 <set_chunk_used>
	return c + chunk_size(h, c);
   28898:	4621      	mov	r1, r4
   2889a:	f7ff fea6 	bl	285ea <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   2889e:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
   288a0:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   288a2:	4628      	mov	r0, r5
   288a4:	9101      	str	r1, [sp, #4]
   288a6:	f7ff fe8a 	bl	285be <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   288aa:	f010 0f01 	tst.w	r0, #1
   288ae:	9901      	ldr	r1, [sp, #4]
   288b0:	d10b      	bne.n	288ca <sys_heap_free+0x5a>
		free_list_remove(h, right_chunk(h, c));
   288b2:	4628      	mov	r0, r5
   288b4:	f7ff ff3d 	bl	28732 <free_list_remove>
	return c + chunk_size(h, c);
   288b8:	4621      	mov	r1, r4
   288ba:	4628      	mov	r0, r5
   288bc:	f7ff fe95 	bl	285ea <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   288c0:	4621      	mov	r1, r4
   288c2:	1822      	adds	r2, r4, r0
   288c4:	4628      	mov	r0, r5
   288c6:	f7ff febf 	bl	28648 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   288ca:	2200      	movs	r2, #0
   288cc:	4621      	mov	r1, r4
   288ce:	4628      	mov	r0, r5
   288d0:	f7ff fe75 	bl	285be <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   288d4:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
   288d6:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   288d8:	4628      	mov	r0, r5
   288da:	9101      	str	r1, [sp, #4]
   288dc:	f7ff fe6f 	bl	285be <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   288e0:	f010 0601 	ands.w	r6, r0, #1
   288e4:	9901      	ldr	r1, [sp, #4]
   288e6:	d112      	bne.n	2890e <sys_heap_free+0x9e>
		free_list_remove(h, left_chunk(h, c));
   288e8:	4628      	mov	r0, r5
   288ea:	f7ff ff22 	bl	28732 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   288ee:	4621      	mov	r1, r4
   288f0:	4632      	mov	r2, r6
   288f2:	4628      	mov	r0, r5
   288f4:	f7ff fe63 	bl	285be <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   288f8:	4622      	mov	r2, r4
   288fa:	1a21      	subs	r1, r4, r0
   288fc:	4628      	mov	r0, r5
   288fe:	f7ff fea3 	bl	28648 <merge_chunks>
   28902:	4621      	mov	r1, r4
   28904:	4632      	mov	r2, r6
   28906:	4628      	mov	r0, r5
   28908:	f7ff fe59 	bl	285be <chunk_field>
   2890c:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   2890e:	4621      	mov	r1, r4
   28910:	4628      	mov	r0, r5
}
   28912:	b002      	add	sp, #8
   28914:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_list_add(h, c);
   28918:	f7ff bf65 	b.w	287e6 <free_list_add>
}
   2891c:	b002      	add	sp, #8
   2891e:	bd70      	pop	{r4, r5, r6, pc}

00028920 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   28920:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0) {
   28922:	b909      	cbnz	r1, 28928 <sys_heap_alloc+0x8>
		return NULL;
   28924:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   28926:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   28928:	6805      	ldr	r5, [r0, #0]
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   2892a:	1dcc      	adds	r4, r1, #7
	return big_heap(h) ? 8 : 4;
   2892c:	68ab      	ldr	r3, [r5, #8]
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2892e:	4628      	mov	r0, r5
   28930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   28934:	bf2c      	ite	cs
   28936:	2208      	movcs	r2, #8
   28938:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   2893a:	4414      	add	r4, r2
   2893c:	08e4      	lsrs	r4, r4, #3
   2893e:	4621      	mov	r1, r4
   28940:	f7ff ff0e 	bl	28760 <alloc_chunk>
	if (c == 0) {
   28944:	4606      	mov	r6, r0
   28946:	2800      	cmp	r0, #0
   28948:	d0ec      	beq.n	28924 <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   2894a:	4601      	mov	r1, r0
   2894c:	4628      	mov	r0, r5
   2894e:	f7ff fe4c 	bl	285ea <chunk_size>
   28952:	42a0      	cmp	r0, r4
   28954:	d909      	bls.n	2896a <sys_heap_alloc+0x4a>
		split_chunks(h, c, c + chunk_sz);
   28956:	4434      	add	r4, r6
   28958:	4631      	mov	r1, r6
   2895a:	4628      	mov	r0, r5
   2895c:	4622      	mov	r2, r4
   2895e:	f7ff fe92 	bl	28686 <split_chunks>
		free_list_add(h, c + chunk_sz);
   28962:	4621      	mov	r1, r4
   28964:	4628      	mov	r0, r5
   28966:	f7ff ff3e 	bl	287e6 <free_list_add>
	set_chunk_used(h, c, true);
   2896a:	4628      	mov	r0, r5
   2896c:	2201      	movs	r2, #1
   2896e:	4631      	mov	r1, r6
   28970:	f7ff fe41 	bl	285f6 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   28974:	68ab      	ldr	r3, [r5, #8]
   28976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2897a:	bf2c      	ite	cs
   2897c:	2008      	movcs	r0, #8
   2897e:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   28980:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   28984:	4428      	add	r0, r5
	return chunk_mem(h, c);
   28986:	e7ce      	b.n	28926 <sys_heap_alloc+0x6>

00028988 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   28988:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   2898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2898e:	bf2c      	ite	cs
   28990:	2508      	movcs	r5, #8
   28992:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   28994:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   28996:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
   28998:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2899a:	1dcc      	adds	r4, r1, #7
   2899c:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
   289a0:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
   289a2:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   289a6:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   289a8:	440d      	add	r5, r1
   289aa:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   289ae:	1b2d      	subs	r5, r5, r4
   289b0:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   289b2:	4629      	mov	r1, r5
   289b4:	4620      	mov	r0, r4
	h->len = buf_sz;
   289b6:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   289b8:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   289ba:	f7ff fe38 	bl	2862e <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   289be:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   289c0:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   289c2:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   289c4:	361b      	adds	r6, #27
   289c6:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   289c8:	f104 0210 	add.w	r2, r4, #16
   289cc:	428b      	cmp	r3, r1
   289ce:	db29      	blt.n	28a24 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   289d0:	4632      	mov	r2, r6
   289d2:	4620      	mov	r0, r4
   289d4:	2100      	movs	r1, #0
   289d6:	f7ff fe26 	bl	28626 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   289da:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   289dc:	4620      	mov	r0, r4
   289de:	2201      	movs	r2, #1
   289e0:	2100      	movs	r1, #0
   289e2:	f7ff fe08 	bl	285f6 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   289e6:	463a      	mov	r2, r7
   289e8:	4631      	mov	r1, r6
   289ea:	f7ff fe1c 	bl	28626 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   289ee:	4633      	mov	r3, r6
   289f0:	4631      	mov	r1, r6
   289f2:	4620      	mov	r0, r4
   289f4:	2200      	movs	r2, #0
   289f6:	f7ff fded 	bl	285d4 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   289fa:	4629      	mov	r1, r5
   289fc:	4620      	mov	r0, r4
   289fe:	2200      	movs	r2, #0
   28a00:	f7ff fe11 	bl	28626 <set_chunk_size>
   28a04:	463b      	mov	r3, r7
   28a06:	4629      	mov	r1, r5
   28a08:	4620      	mov	r0, r4
   28a0a:	2200      	movs	r2, #0
   28a0c:	f7ff fde2 	bl	285d4 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   28a10:	4629      	mov	r1, r5
   28a12:	4620      	mov	r0, r4
   28a14:	2201      	movs	r2, #1
   28a16:	f7ff fdee 	bl	285f6 <set_chunk_used>

	free_list_add(h, chunk0_size);
   28a1a:	4631      	mov	r1, r6
}
   28a1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   28a20:	f7ff bee1 	b.w	287e6 <free_list_add>
		h->buckets[i].next = 0;
   28a24:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   28a28:	3301      	adds	r3, #1
   28a2a:	e7cf      	b.n	289cc <sys_heap_init+0x44>

00028a2c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   28a2c:	4770      	bx	lr

00028a2e <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   28a2e:	f7f7 bc77 	b.w	20320 <SystemInit>

00028a32 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   28a32:	2300      	movs	r3, #0
	list->head = NULL;
   28a34:	e9c0 3300 	strd	r3, r3, [r0]
}
   28a38:	4770      	bx	lr

00028a3a <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   28a3a:	6803      	ldr	r3, [r0, #0]
   28a3c:	b923      	cbnz	r3, 28a48 <log_list_add_tail+0xe>
		list->head = msg;
   28a3e:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   28a40:	2300      	movs	r3, #0
	list->tail = msg;
   28a42:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   28a44:	600b      	str	r3, [r1, #0]
}
   28a46:	4770      	bx	lr
		list->tail->next = msg;
   28a48:	6843      	ldr	r3, [r0, #4]
   28a4a:	6019      	str	r1, [r3, #0]
   28a4c:	e7f8      	b.n	28a40 <log_list_add_tail+0x6>

00028a4e <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   28a4e:	6800      	ldr	r0, [r0, #0]
   28a50:	4770      	bx	lr

00028a52 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   28a52:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   28a54:	b10b      	cbz	r3, 28a5a <log_list_head_get+0x8>
		list->head = list->head->next;
   28a56:	681a      	ldr	r2, [r3, #0]
   28a58:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   28a5a:	4618      	mov	r0, r3
   28a5c:	4770      	bx	lr

00028a5e <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   28a5e:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   28a60:	f7e9 ff4a 	bl	128f8 <log_msg_chunk_alloc>

	if (msg != NULL) {
   28a64:	b118      	cbz	r0, 28a6e <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   28a66:	2301      	movs	r3, #1
   28a68:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   28a6a:	2300      	movs	r3, #0
   28a6c:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   28a6e:	bd08      	pop	{r3, pc}

00028a70 <k_cycle_get_32_wrapper>:
   28a70:	f7ea bd90 	b.w	13594 <z_timer_cycle_get_32>

00028a74 <dummy_timestamp>:
   28a74:	2000      	movs	r0, #0
   28a76:	4770      	bx	lr

00028a78 <log_0>:
{
   28a78:	b513      	push	{r0, r1, r4, lr}
   28a7a:	4604      	mov	r4, r0
   28a7c:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   28a7e:	f7ff ffee 	bl	28a5e <z_log_msg_std_alloc>

	if (msg != NULL) {
   28a82:	b130      	cbz	r0, 28a92 <log_0+0x1a>
		msg_finalize(msg, src_level);
   28a84:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   28a86:	6104      	str	r4, [r0, #16]
}
   28a88:	b002      	add	sp, #8
   28a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   28a8e:	f7e9 be55 	b.w	1273c <msg_finalize>
}
   28a92:	b002      	add	sp, #8
   28a94:	bd10      	pop	{r4, pc}

00028a96 <log_1>:
{
   28a96:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28a98:	460c      	mov	r4, r1
   28a9a:	4611      	mov	r1, r2
   28a9c:	4605      	mov	r5, r0
   28a9e:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   28aa0:	f7ff ffdd 	bl	28a5e <z_log_msg_std_alloc>

	if (msg != NULL) {
   28aa4:	b160      	cbz	r0, 28ac0 <log_1+0x2a>
		msg->str = str;
   28aa6:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   28aa8:	2501      	movs	r5, #1
   28aaa:	7a42      	ldrb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   28aac:	6144      	str	r4, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   28aae:	f365 1207 	bfi	r2, r5, #4, #4
   28ab2:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   28ab4:	9901      	ldr	r1, [sp, #4]
}
   28ab6:	b003      	add	sp, #12
   28ab8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
   28abc:	f7e9 be3e 	b.w	1273c <msg_finalize>
}
   28ac0:	b003      	add	sp, #12
   28ac2:	bd30      	pop	{r4, r5, pc}

00028ac4 <log_2>:
{
   28ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28ac6:	460e      	mov	r6, r1
   28ac8:	4619      	mov	r1, r3
   28aca:	4607      	mov	r7, r0
   28acc:	4615      	mov	r5, r2
   28ace:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   28ad0:	f7ff ffc5 	bl	28a5e <z_log_msg_std_alloc>

	if (msg != NULL) {
   28ad4:	b168      	cbz	r0, 28af2 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   28ad6:	2202      	movs	r2, #2
   28ad8:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   28ada:	e9c0 6505 	strd	r6, r5, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   28ade:	f362 1307 	bfi	r3, r2, #4, #4
   28ae2:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   28ae4:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   28ae6:	6107      	str	r7, [r0, #16]
}
   28ae8:	b003      	add	sp, #12
   28aea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
   28aee:	f7e9 be25 	b.w	1273c <msg_finalize>
}
   28af2:	b003      	add	sp, #12
   28af4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028af6 <log_3>:
{
   28af6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   28afa:	460f      	mov	r7, r1
   28afc:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   28b00:	4680      	mov	r8, r0
   28b02:	4616      	mov	r6, r2
   28b04:	461d      	mov	r5, r3
   28b06:	9101      	str	r1, [sp, #4]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   28b08:	f7ff ffa9 	bl	28a5e <z_log_msg_std_alloc>

	if (msg != NULL) {
   28b0c:	b178      	cbz	r0, 28b2e <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   28b0e:	2203      	movs	r2, #3
   28b10:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   28b12:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   28b16:	f362 1307 	bfi	r3, r2, #4, #4
   28b1a:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   28b1c:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   28b1e:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   28b22:	61c5      	str	r5, [r0, #28]
}
   28b24:	b002      	add	sp, #8
   28b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   28b2a:	f7e9 be07 	b.w	1273c <msg_finalize>
}
   28b2e:	b002      	add	sp, #8
   28b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028b34 <log_n>:
{
   28b34:	b510      	push	{r4, lr}
   28b36:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   28b38:	f000 f899 	bl	28c6e <log_msg_create_n>
		if (msg == NULL) {
   28b3c:	b120      	cbz	r0, 28b48 <log_n+0x14>
		msg_finalize(msg, src_level);
   28b3e:	4621      	mov	r1, r4
}
   28b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   28b44:	f7e9 bdfa 	b.w	1273c <msg_finalize>
}
   28b48:	bd10      	pop	{r4, pc}

00028b4a <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   28b4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28b4e:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   28b50:	8903      	ldrh	r3, [r0, #8]
{
   28b52:	460e      	mov	r6, r1
	uint32_t available_len = msg->hdr.params.hexdump.length;
   28b54:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   28b58:	42a3      	cmp	r3, r4
{
   28b5a:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   28b5e:	d803      	bhi.n	28b68 <log_msg_hexdump_data_op+0x1e>
		*length = 0;
   28b60:	2300      	movs	r3, #0
   28b62:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   28b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   28b68:	6811      	ldr	r1, [r2, #0]
   28b6a:	4421      	add	r1, r4
   28b6c:	4299      	cmp	r1, r3
		*length = available_len - offset;
   28b6e:	bf84      	itt	hi
   28b70:	1b19      	subhi	r1, r3, r4
   28b72:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   28b74:	2b0c      	cmp	r3, #12
	req_len = *length;
   28b76:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   28b7a:	d92b      	bls.n	28bd4 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   28b7c:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   28b7e:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   28b82:	d82e      	bhi.n	28be2 <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   28b84:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   28b86:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   28b88:	454b      	cmp	r3, r9
   28b8a:	bf28      	it	cs
   28b8c:	464b      	movcs	r3, r9
   28b8e:	4420      	add	r0, r4
   28b90:	461d      	mov	r5, r3
   28b92:	461a      	mov	r2, r3
		if (put_op) {
   28b94:	b317      	cbz	r7, 28bdc <log_msg_hexdump_data_op+0x92>
   28b96:	4631      	mov	r1, r6
   28b98:	f7e3 ffec 	bl	cb74 <memcpy>
		req_len -= cpy_len;
   28b9c:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   28ba0:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   28ba2:	f1b9 0f00 	cmp.w	r9, #0
   28ba6:	d0dd      	beq.n	28b64 <log_msg_hexdump_data_op+0x1a>
   28ba8:	f1b8 0f00 	cmp.w	r8, #0
   28bac:	d0da      	beq.n	28b64 <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   28bae:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   28bb2:	454d      	cmp	r5, r9
   28bb4:	bf28      	it	cs
   28bb6:	464d      	movcs	r5, r9
		if (put_op) {
   28bb8:	1d20      	adds	r0, r4, #4
   28bba:	462a      	mov	r2, r5
   28bbc:	4440      	add	r0, r8
   28bbe:	b1bf      	cbz	r7, 28bf0 <log_msg_hexdump_data_op+0xa6>
   28bc0:	4631      	mov	r1, r6
   28bc2:	f7e3 ffd7 	bl	cb74 <memcpy>
		offset = 0;
   28bc6:	2400      	movs	r4, #0
		cont = cont->next;
   28bc8:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   28bcc:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   28bd0:	442e      	add	r6, r5
   28bd2:	e7e6      	b.n	28ba2 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   28bd4:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   28bd8:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   28bda:	e7d5      	b.n	28b88 <log_msg_hexdump_data_op+0x3e>
   28bdc:	4601      	mov	r1, r0
   28bde:	4630      	mov	r0, r6
   28be0:	e7da      	b.n	28b98 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   28be2:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   28be4:	2c1b      	cmp	r4, #27
   28be6:	d9dc      	bls.n	28ba2 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   28be8:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   28bec:	3c1c      	subs	r4, #28
   28bee:	e7f9      	b.n	28be4 <log_msg_hexdump_data_op+0x9a>
   28bf0:	4601      	mov	r1, r0
   28bf2:	4630      	mov	r0, r6
   28bf4:	e7e5      	b.n	28bc2 <log_msg_hexdump_data_op+0x78>

00028bf6 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   28bf6:	3004      	adds	r0, #4
   28bf8:	e8d0 3fef 	ldaex	r3, [r0]
   28bfc:	3301      	adds	r3, #1
   28bfe:	e8c0 3fe2 	stlex	r2, r3, [r0]
   28c02:	2a00      	cmp	r2, #0
   28c04:	d1f8      	bne.n	28bf8 <log_msg_get+0x2>
}
   28c06:	4770      	bx	lr

00028c08 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   28c08:	7a40      	ldrb	r0, [r0, #9]
}
   28c0a:	0900      	lsrs	r0, r0, #4
   28c0c:	4770      	bx	lr

00028c0e <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   28c0e:	7a43      	ldrb	r3, [r0, #9]
   28c10:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   28c14:	ea4f 1213 	mov.w	r2, r3, lsr #4
   28c18:	d216      	bcs.n	28c48 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   28c1a:	2a03      	cmp	r2, #3
   28c1c:	d803      	bhi.n	28c26 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   28c1e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   28c22:	6948      	ldr	r0, [r1, #20]
   28c24:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   28c26:	2901      	cmp	r1, #1
   28c28:	d803      	bhi.n	28c32 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   28c2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   28c2e:	6988      	ldr	r0, [r1, #24]
   28c30:	4770      	bx	lr
	cont = msg->payload.ext.next;
   28c32:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   28c34:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   28c36:	2906      	cmp	r1, #6
   28c38:	d803      	bhi.n	28c42 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   28c3a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   28c3e:	6848      	ldr	r0, [r1, #4]
   28c40:	4770      	bx	lr
		cont = cont->next;
   28c42:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   28c44:	3907      	subs	r1, #7
		cont = cont->next;
   28c46:	e7f6      	b.n	28c36 <log_msg_arg_get+0x28>
		return 0;
   28c48:	2000      	movs	r0, #0
}
   28c4a:	4770      	bx	lr

00028c4c <log_msg_put>:
{
   28c4c:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   28c4e:	1d02      	adds	r2, r0, #4
   28c50:	e8d2 1fef 	ldaex	r1, [r2]
   28c54:	3901      	subs	r1, #1
   28c56:	e8c2 1fec 	stlex	ip, r1, [r2]
   28c5a:	f1bc 0f00 	cmp.w	ip, #0
   28c5e:	d1f7      	bne.n	28c50 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   28c60:	685b      	ldr	r3, [r3, #4]
   28c62:	b90b      	cbnz	r3, 28c68 <log_msg_put+0x1c>
		msg_free(msg);
   28c64:	f7e9 be5c 	b.w	12920 <msg_free>
}
   28c68:	4770      	bx	lr

00028c6a <log_msg_str_get>:
}
   28c6a:	6900      	ldr	r0, [r0, #16]
   28c6c:	4770      	bx	lr

00028c6e <log_msg_create_n>:
{
   28c6e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28c72:	4681      	mov	r9, r0
   28c74:	4688      	mov	r8, r1
   28c76:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   28c78:	f7e9 fe3e 	bl	128f8 <log_msg_chunk_alloc>
	if (msg != NULL) {
   28c7c:	4604      	mov	r4, r0
   28c7e:	b330      	cbz	r0, 28cce <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   28c80:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   28c82:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   28c84:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   28c86:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   28c88:	8107      	strh	r7, [r0, #8]
   28c8a:	d909      	bls.n	28ca0 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   28c8c:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   28c8e:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
   28c92:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   28c94:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   28c98:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   28c9a:	f1ba 0f00 	cmp.w	sl, #0
   28c9e:	dc0e      	bgt.n	28cbe <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   28ca0:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   28ca2:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   28ca4:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   28ca8:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   28cac:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   28cae:	d818      	bhi.n	28ce2 <log_msg_create_n+0x74>
   28cb0:	4641      	mov	r1, r8
   28cb2:	00aa      	lsls	r2, r5, #2
   28cb4:	f104 0014 	add.w	r0, r4, #20
   28cb8:	f7e3 ff5c 	bl	cb74 <memcpy>
	while (nargs != 0U) {
   28cbc:	e007      	b.n	28cce <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   28cbe:	f7e9 fe1b 	bl	128f8 <log_msg_chunk_alloc>
		if (cont == NULL) {
   28cc2:	4606      	mov	r6, r0
   28cc4:	b930      	cbnz	r0, 28cd4 <log_msg_create_n+0x66>
			msg_free(msg);
   28cc6:	4620      	mov	r0, r4
   28cc8:	f7e9 fe2a 	bl	12920 <msg_free>
			return NULL;
   28ccc:	4634      	mov	r4, r6
}
   28cce:	4620      	mov	r0, r4
   28cd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   28cd4:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   28cd8:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
   28cdc:	4683      	mov	fp, r0
		cont->next = NULL;
   28cde:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
   28ce0:	e7db      	b.n	28c9a <log_msg_create_n+0x2c>
   28ce2:	f8d8 3000 	ldr.w	r3, [r8]
	struct log_msg_cont *cont = msg->payload.ext.next;
   28ce6:	6967      	ldr	r7, [r4, #20]
   28ce8:	61a3      	str	r3, [r4, #24]
   28cea:	f8d8 3004 	ldr.w	r3, [r8, #4]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   28cee:	3d02      	subs	r5, #2
   28cf0:	61e3      	str	r3, [r4, #28]
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   28cf2:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   28cf6:	2d07      	cmp	r5, #7
   28cf8:	462e      	mov	r6, r5
   28cfa:	bf28      	it	cs
   28cfc:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   28cfe:	ea4f 0986 	mov.w	r9, r6, lsl #2
   28d02:	4641      	mov	r1, r8
   28d04:	1d38      	adds	r0, r7, #4
   28d06:	464a      	mov	r2, r9
   28d08:	f7e3 ff34 	bl	cb74 <memcpy>
	while (nargs != 0U) {
   28d0c:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   28d0e:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   28d10:	44c8      	add	r8, r9
	while (nargs != 0U) {
   28d12:	d1f0      	bne.n	28cf6 <log_msg_create_n+0x88>
   28d14:	e7db      	b.n	28cce <log_msg_create_n+0x60>

00028d16 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   28d16:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   28d18:	2400      	movs	r4, #0
   28d1a:	9400      	str	r4, [sp, #0]
   28d1c:	f7ff ff15 	bl	28b4a <log_msg_hexdump_data_op>
}
   28d20:	b002      	add	sp, #8
   28d22:	bd10      	pop	{r4, pc}

00028d24 <buffer_write>:
{
   28d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28d26:	4606      	mov	r6, r0
   28d28:	460d      	mov	r5, r1
   28d2a:	4614      	mov	r4, r2
   28d2c:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   28d2e:	4621      	mov	r1, r4
   28d30:	4628      	mov	r0, r5
   28d32:	463a      	mov	r2, r7
   28d34:	47b0      	blx	r6
	} while (len != 0);
   28d36:	1a24      	subs	r4, r4, r0
		buf += processed;
   28d38:	4405      	add	r5, r0
	} while (len != 0);
   28d3a:	d1f8      	bne.n	28d2e <buffer_write+0xa>
}
   28d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028d3e <std_print>:
{
   28d3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28d42:	b08e      	sub	sp, #56	; 0x38
   28d44:	af0e      	add	r7, sp, #56	; 0x38
   28d46:	4680      	mov	r8, r0
   28d48:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   28d4a:	f7ff ff8e 	bl	28c6a <log_msg_str_get>
   28d4e:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   28d50:	4640      	mov	r0, r8
   28d52:	f7ff ff59 	bl	28c08 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   28d56:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   28d5a:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   28d5c:	0083      	lsls	r3, r0, #2
   28d5e:	3307      	adds	r3, #7
   28d60:	f023 0307 	bic.w	r3, r3, #7
   28d64:	ebad 0d03 	sub.w	sp, sp, r3
   28d68:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   28d6a:	45d1      	cmp	r9, sl
   28d6c:	d116      	bne.n	28d9c <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   28d6e:	4640      	mov	r0, r8
   28d70:	f7ff ff4a 	bl	28c08 <log_msg_nargs_get>
   28d74:	280f      	cmp	r0, #15
   28d76:	d81e      	bhi.n	28db6 <std_print+0x78>
   28d78:	e8df f010 	tbh	[pc, r0, lsl #1]
   28d7c:	00200019 	.word	0x00200019
   28d80:	002d0026 	.word	0x002d0026
   28d84:	00410036 	.word	0x00410036
   28d88:	005d004e 	.word	0x005d004e
   28d8c:	0081006e 	.word	0x0081006e
   28d90:	00ad0096 	.word	0x00ad0096
   28d94:	00e100c6 	.word	0x00e100c6
   28d98:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   28d9c:	4649      	mov	r1, r9
   28d9e:	4640      	mov	r0, r8
   28da0:	f7ff ff35 	bl	28c0e <log_msg_arg_get>
   28da4:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   28da8:	f109 0901 	add.w	r9, r9, #1
   28dac:	e7dd      	b.n	28d6a <std_print+0x2c>
		print_formatted(log_output, str);
   28dae:	4631      	mov	r1, r6
   28db0:	4628      	mov	r0, r5
   28db2:	f7e9 fdf3 	bl	1299c <print_formatted>
}
   28db6:	46bd      	mov	sp, r7
   28db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   28dbc:	4631      	mov	r1, r6
   28dbe:	4628      	mov	r0, r5
   28dc0:	6822      	ldr	r2, [r4, #0]
   28dc2:	f7e9 fdeb 	bl	1299c <print_formatted>
		break;
   28dc6:	e7f6      	b.n	28db6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   28dc8:	4631      	mov	r1, r6
   28dca:	e9d4 2300 	ldrd	r2, r3, [r4]
   28dce:	4628      	mov	r0, r5
   28dd0:	f7e9 fde4 	bl	1299c <print_formatted>
		break;
   28dd4:	e7ef      	b.n	28db6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   28dd6:	68a3      	ldr	r3, [r4, #8]
   28dd8:	4631      	mov	r1, r6
   28dda:	9300      	str	r3, [sp, #0]
   28ddc:	4628      	mov	r0, r5
   28dde:	e9d4 2300 	ldrd	r2, r3, [r4]
   28de2:	f7e9 fddb 	bl	1299c <print_formatted>
		break;
   28de6:	e7e6      	b.n	28db6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   28de8:	68e3      	ldr	r3, [r4, #12]
   28dea:	4631      	mov	r1, r6
   28dec:	9301      	str	r3, [sp, #4]
   28dee:	68a3      	ldr	r3, [r4, #8]
   28df0:	4628      	mov	r0, r5
   28df2:	9300      	str	r3, [sp, #0]
   28df4:	e9d4 2300 	ldrd	r2, r3, [r4]
   28df8:	f7e9 fdd0 	bl	1299c <print_formatted>
		break;
   28dfc:	e7db      	b.n	28db6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   28dfe:	6923      	ldr	r3, [r4, #16]
   28e00:	4631      	mov	r1, r6
   28e02:	9302      	str	r3, [sp, #8]
   28e04:	68e3      	ldr	r3, [r4, #12]
   28e06:	4628      	mov	r0, r5
   28e08:	9301      	str	r3, [sp, #4]
   28e0a:	68a3      	ldr	r3, [r4, #8]
   28e0c:	9300      	str	r3, [sp, #0]
   28e0e:	e9d4 2300 	ldrd	r2, r3, [r4]
   28e12:	f7e9 fdc3 	bl	1299c <print_formatted>
		break;
   28e16:	e7ce      	b.n	28db6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   28e18:	6963      	ldr	r3, [r4, #20]
   28e1a:	4631      	mov	r1, r6
   28e1c:	9303      	str	r3, [sp, #12]
   28e1e:	6923      	ldr	r3, [r4, #16]
   28e20:	4628      	mov	r0, r5
   28e22:	9302      	str	r3, [sp, #8]
   28e24:	68e3      	ldr	r3, [r4, #12]
   28e26:	9301      	str	r3, [sp, #4]
   28e28:	68a3      	ldr	r3, [r4, #8]
   28e2a:	9300      	str	r3, [sp, #0]
   28e2c:	e9d4 2300 	ldrd	r2, r3, [r4]
   28e30:	f7e9 fdb4 	bl	1299c <print_formatted>
		break;
   28e34:	e7bf      	b.n	28db6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   28e36:	69a3      	ldr	r3, [r4, #24]
   28e38:	4631      	mov	r1, r6
   28e3a:	9304      	str	r3, [sp, #16]
   28e3c:	6963      	ldr	r3, [r4, #20]
   28e3e:	4628      	mov	r0, r5
   28e40:	9303      	str	r3, [sp, #12]
   28e42:	6923      	ldr	r3, [r4, #16]
   28e44:	9302      	str	r3, [sp, #8]
   28e46:	68e3      	ldr	r3, [r4, #12]
   28e48:	9301      	str	r3, [sp, #4]
   28e4a:	68a3      	ldr	r3, [r4, #8]
   28e4c:	9300      	str	r3, [sp, #0]
   28e4e:	e9d4 2300 	ldrd	r2, r3, [r4]
   28e52:	f7e9 fda3 	bl	1299c <print_formatted>
		break;
   28e56:	e7ae      	b.n	28db6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   28e58:	69e3      	ldr	r3, [r4, #28]
   28e5a:	4631      	mov	r1, r6
   28e5c:	9305      	str	r3, [sp, #20]
   28e5e:	69a3      	ldr	r3, [r4, #24]
   28e60:	4628      	mov	r0, r5
   28e62:	9304      	str	r3, [sp, #16]
   28e64:	6963      	ldr	r3, [r4, #20]
   28e66:	9303      	str	r3, [sp, #12]
   28e68:	6923      	ldr	r3, [r4, #16]
   28e6a:	9302      	str	r3, [sp, #8]
   28e6c:	68e3      	ldr	r3, [r4, #12]
   28e6e:	9301      	str	r3, [sp, #4]
   28e70:	68a3      	ldr	r3, [r4, #8]
   28e72:	9300      	str	r3, [sp, #0]
   28e74:	e9d4 2300 	ldrd	r2, r3, [r4]
   28e78:	f7e9 fd90 	bl	1299c <print_formatted>
		break;
   28e7c:	e79b      	b.n	28db6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   28e7e:	6a23      	ldr	r3, [r4, #32]
   28e80:	4631      	mov	r1, r6
   28e82:	9306      	str	r3, [sp, #24]
   28e84:	69e3      	ldr	r3, [r4, #28]
   28e86:	4628      	mov	r0, r5
   28e88:	9305      	str	r3, [sp, #20]
   28e8a:	69a3      	ldr	r3, [r4, #24]
   28e8c:	9304      	str	r3, [sp, #16]
   28e8e:	6963      	ldr	r3, [r4, #20]
   28e90:	9303      	str	r3, [sp, #12]
   28e92:	6923      	ldr	r3, [r4, #16]
   28e94:	9302      	str	r3, [sp, #8]
   28e96:	68e3      	ldr	r3, [r4, #12]
   28e98:	9301      	str	r3, [sp, #4]
   28e9a:	68a3      	ldr	r3, [r4, #8]
   28e9c:	9300      	str	r3, [sp, #0]
   28e9e:	e9d4 2300 	ldrd	r2, r3, [r4]
   28ea2:	f7e9 fd7b 	bl	1299c <print_formatted>
		break;
   28ea6:	e786      	b.n	28db6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   28ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28eaa:	4631      	mov	r1, r6
   28eac:	9307      	str	r3, [sp, #28]
   28eae:	6a23      	ldr	r3, [r4, #32]
   28eb0:	4628      	mov	r0, r5
   28eb2:	9306      	str	r3, [sp, #24]
   28eb4:	69e3      	ldr	r3, [r4, #28]
   28eb6:	9305      	str	r3, [sp, #20]
   28eb8:	69a3      	ldr	r3, [r4, #24]
   28eba:	9304      	str	r3, [sp, #16]
   28ebc:	6963      	ldr	r3, [r4, #20]
   28ebe:	9303      	str	r3, [sp, #12]
   28ec0:	6923      	ldr	r3, [r4, #16]
   28ec2:	9302      	str	r3, [sp, #8]
   28ec4:	68e3      	ldr	r3, [r4, #12]
   28ec6:	9301      	str	r3, [sp, #4]
   28ec8:	68a3      	ldr	r3, [r4, #8]
   28eca:	9300      	str	r3, [sp, #0]
   28ecc:	e9d4 2300 	ldrd	r2, r3, [r4]
   28ed0:	f7e9 fd64 	bl	1299c <print_formatted>
		break;
   28ed4:	e76f      	b.n	28db6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   28ed6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   28ed8:	4631      	mov	r1, r6
   28eda:	9308      	str	r3, [sp, #32]
   28edc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28ede:	4628      	mov	r0, r5
   28ee0:	9307      	str	r3, [sp, #28]
   28ee2:	6a23      	ldr	r3, [r4, #32]
   28ee4:	9306      	str	r3, [sp, #24]
   28ee6:	69e3      	ldr	r3, [r4, #28]
   28ee8:	9305      	str	r3, [sp, #20]
   28eea:	69a3      	ldr	r3, [r4, #24]
   28eec:	9304      	str	r3, [sp, #16]
   28eee:	6963      	ldr	r3, [r4, #20]
   28ef0:	9303      	str	r3, [sp, #12]
   28ef2:	6923      	ldr	r3, [r4, #16]
   28ef4:	9302      	str	r3, [sp, #8]
   28ef6:	68e3      	ldr	r3, [r4, #12]
   28ef8:	9301      	str	r3, [sp, #4]
   28efa:	68a3      	ldr	r3, [r4, #8]
   28efc:	9300      	str	r3, [sp, #0]
   28efe:	e9d4 2300 	ldrd	r2, r3, [r4]
   28f02:	f7e9 fd4b 	bl	1299c <print_formatted>
		break;
   28f06:	e756      	b.n	28db6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   28f08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   28f0a:	4631      	mov	r1, r6
   28f0c:	9309      	str	r3, [sp, #36]	; 0x24
   28f0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   28f10:	4628      	mov	r0, r5
   28f12:	9308      	str	r3, [sp, #32]
   28f14:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28f16:	9307      	str	r3, [sp, #28]
   28f18:	6a23      	ldr	r3, [r4, #32]
   28f1a:	9306      	str	r3, [sp, #24]
   28f1c:	69e3      	ldr	r3, [r4, #28]
   28f1e:	9305      	str	r3, [sp, #20]
   28f20:	69a3      	ldr	r3, [r4, #24]
   28f22:	9304      	str	r3, [sp, #16]
   28f24:	6963      	ldr	r3, [r4, #20]
   28f26:	9303      	str	r3, [sp, #12]
   28f28:	6923      	ldr	r3, [r4, #16]
   28f2a:	9302      	str	r3, [sp, #8]
   28f2c:	68e3      	ldr	r3, [r4, #12]
   28f2e:	9301      	str	r3, [sp, #4]
   28f30:	68a3      	ldr	r3, [r4, #8]
   28f32:	9300      	str	r3, [sp, #0]
   28f34:	e9d4 2300 	ldrd	r2, r3, [r4]
   28f38:	f7e9 fd30 	bl	1299c <print_formatted>
		break;
   28f3c:	e73b      	b.n	28db6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   28f3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   28f40:	4631      	mov	r1, r6
   28f42:	930a      	str	r3, [sp, #40]	; 0x28
   28f44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   28f46:	4628      	mov	r0, r5
   28f48:	9309      	str	r3, [sp, #36]	; 0x24
   28f4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   28f4c:	9308      	str	r3, [sp, #32]
   28f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28f50:	9307      	str	r3, [sp, #28]
   28f52:	6a23      	ldr	r3, [r4, #32]
   28f54:	9306      	str	r3, [sp, #24]
   28f56:	69e3      	ldr	r3, [r4, #28]
   28f58:	9305      	str	r3, [sp, #20]
   28f5a:	69a3      	ldr	r3, [r4, #24]
   28f5c:	9304      	str	r3, [sp, #16]
   28f5e:	6963      	ldr	r3, [r4, #20]
   28f60:	9303      	str	r3, [sp, #12]
   28f62:	6923      	ldr	r3, [r4, #16]
   28f64:	9302      	str	r3, [sp, #8]
   28f66:	68e3      	ldr	r3, [r4, #12]
   28f68:	9301      	str	r3, [sp, #4]
   28f6a:	68a3      	ldr	r3, [r4, #8]
   28f6c:	9300      	str	r3, [sp, #0]
   28f6e:	e9d4 2300 	ldrd	r2, r3, [r4]
   28f72:	f7e9 fd13 	bl	1299c <print_formatted>
		break;
   28f76:	e71e      	b.n	28db6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   28f78:	6b63      	ldr	r3, [r4, #52]	; 0x34
   28f7a:	4631      	mov	r1, r6
   28f7c:	930b      	str	r3, [sp, #44]	; 0x2c
   28f7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   28f80:	4628      	mov	r0, r5
   28f82:	930a      	str	r3, [sp, #40]	; 0x28
   28f84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   28f86:	9309      	str	r3, [sp, #36]	; 0x24
   28f88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   28f8a:	9308      	str	r3, [sp, #32]
   28f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28f8e:	9307      	str	r3, [sp, #28]
   28f90:	6a23      	ldr	r3, [r4, #32]
   28f92:	9306      	str	r3, [sp, #24]
   28f94:	69e3      	ldr	r3, [r4, #28]
   28f96:	9305      	str	r3, [sp, #20]
   28f98:	69a3      	ldr	r3, [r4, #24]
   28f9a:	9304      	str	r3, [sp, #16]
   28f9c:	6963      	ldr	r3, [r4, #20]
   28f9e:	9303      	str	r3, [sp, #12]
   28fa0:	6923      	ldr	r3, [r4, #16]
   28fa2:	9302      	str	r3, [sp, #8]
   28fa4:	68e3      	ldr	r3, [r4, #12]
   28fa6:	9301      	str	r3, [sp, #4]
   28fa8:	68a3      	ldr	r3, [r4, #8]
   28faa:	9300      	str	r3, [sp, #0]
   28fac:	e9d4 2300 	ldrd	r2, r3, [r4]
   28fb0:	f7e9 fcf4 	bl	1299c <print_formatted>
		break;
   28fb4:	e6ff      	b.n	28db6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   28fb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   28fb8:	4631      	mov	r1, r6
   28fba:	930c      	str	r3, [sp, #48]	; 0x30
   28fbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   28fbe:	4628      	mov	r0, r5
   28fc0:	930b      	str	r3, [sp, #44]	; 0x2c
   28fc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   28fc4:	930a      	str	r3, [sp, #40]	; 0x28
   28fc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   28fc8:	9309      	str	r3, [sp, #36]	; 0x24
   28fca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   28fcc:	9308      	str	r3, [sp, #32]
   28fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28fd0:	9307      	str	r3, [sp, #28]
   28fd2:	6a23      	ldr	r3, [r4, #32]
   28fd4:	9306      	str	r3, [sp, #24]
   28fd6:	69e3      	ldr	r3, [r4, #28]
   28fd8:	9305      	str	r3, [sp, #20]
   28fda:	69a3      	ldr	r3, [r4, #24]
   28fdc:	9304      	str	r3, [sp, #16]
   28fde:	6963      	ldr	r3, [r4, #20]
   28fe0:	9303      	str	r3, [sp, #12]
   28fe2:	6923      	ldr	r3, [r4, #16]
   28fe4:	9302      	str	r3, [sp, #8]
   28fe6:	68e3      	ldr	r3, [r4, #12]
   28fe8:	9301      	str	r3, [sp, #4]
   28fea:	68a3      	ldr	r3, [r4, #8]
   28fec:	9300      	str	r3, [sp, #0]
   28fee:	e9d4 2300 	ldrd	r2, r3, [r4]
   28ff2:	f7e9 fcd3 	bl	1299c <print_formatted>
}
   28ff6:	e6de      	b.n	28db6 <std_print+0x78>

00028ff8 <log_output_flush>:
		     log_output->control_block->offset,
   28ff8:	6842      	ldr	r2, [r0, #4]
{
   28ffa:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   28ffc:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   29000:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   29002:	6881      	ldr	r1, [r0, #8]
   29004:	6800      	ldr	r0, [r0, #0]
   29006:	f7ff fe8d 	bl	28d24 <buffer_write>
	log_output->control_block->offset = 0;
   2900a:	2200      	movs	r2, #0
   2900c:	6863      	ldr	r3, [r4, #4]
   2900e:	601a      	str	r2, [r3, #0]
}
   29010:	bd10      	pop	{r4, pc}

00029012 <out_func>:
{
   29012:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   29014:	684b      	ldr	r3, [r1, #4]
{
   29016:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   29018:	681a      	ldr	r2, [r3, #0]
   2901a:	68cb      	ldr	r3, [r1, #12]
{
   2901c:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   2901e:	429a      	cmp	r2, r3
   29020:	d102      	bne.n	29028 <out_func+0x16>
		log_output_flush(out_ctx);
   29022:	4608      	mov	r0, r1
   29024:	f7ff ffe8 	bl	28ff8 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   29028:	6863      	ldr	r3, [r4, #4]
   2902a:	e8d3 2fef 	ldaex	r2, [r3]
   2902e:	1c51      	adds	r1, r2, #1
   29030:	e8c3 1fe0 	stlex	r0, r1, [r3]
   29034:	2800      	cmp	r0, #0
   29036:	d1f8      	bne.n	2902a <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   29038:	68a3      	ldr	r3, [r4, #8]
}
   2903a:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   2903c:	549d      	strb	r5, [r3, r2]
}
   2903e:	bd38      	pop	{r3, r4, r5, pc}

00029040 <sntp_init>:
{
   29040:	b570      	push	{r4, r5, r6, lr}
   29042:	460d      	mov	r5, r1
   29044:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   29046:	4604      	mov	r4, r0
   29048:	b330      	cbz	r0, 29098 <sntp_init+0x58>
   2904a:	b329      	cbz	r1, 29098 <sntp_init+0x58>
__ssp_bos_icheck3(memset, void *, int)
   2904c:	2214      	movs	r2, #20
   2904e:	2100      	movs	r1, #0
   29050:	f7f9 f8fc 	bl	2224c <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   29054:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   29056:	2211      	movs	r2, #17
   29058:	2102      	movs	r1, #2
   2905a:	f7e9 fed7 	bl	12e0c <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   2905e:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   29060:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   29062:	da04      	bge.n	2906e <sntp_init+0x2e>
		return -errno;
   29064:	f000 f9a0 	bl	293a8 <__errno>
   29068:	6800      	ldr	r0, [r0, #0]
   2906a:	4240      	negs	r0, r0
}
   2906c:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   2906e:	4632      	mov	r2, r6
   29070:	4629      	mov	r1, r5
   29072:	f000 f843 	bl	290fc <z_impl_zsock_connect>
	if (ret < 0) {
   29076:	2800      	cmp	r0, #0
   29078:	68e0      	ldr	r0, [r4, #12]
   2907a:	da02      	bge.n	29082 <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   2907c:	f000 f827 	bl	290ce <z_impl_zsock_close>
   29080:	e7f0      	b.n	29064 <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   29082:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   29084:	68a3      	ldr	r3, [r4, #8]
   29086:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2908a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   2908e:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   29090:	8091      	strh	r1, [r2, #4]
	return 0;
   29092:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   29094:	60a3      	str	r3, [r4, #8]
	return 0;
   29096:	e7e9      	b.n	2906c <sntp_init+0x2c>
		return -EFAULT;
   29098:	f06f 000d 	mvn.w	r0, #13
   2909c:	e7e6      	b.n	2906c <sntp_init+0x2c>

0002909e <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   2909e:	b110      	cbz	r0, 290a6 <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   290a0:	68c0      	ldr	r0, [r0, #12]
   290a2:	f000 b814 	b.w	290ce <z_impl_zsock_close>
	}
}
   290a6:	4770      	bx	lr

000290a8 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   290a8:	f7e9 bfd8 	b.w	1305c <socket_offload_getaddrinfo>

000290ac <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   290ac:	f7e9 bfe0 	b.w	13070 <socket_offload_freeaddrinfo>

000290b0 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   290b0:	b40c      	push	{r2, r3}
   290b2:	4603      	mov	r3, r0
   290b4:	b507      	push	{r0, r1, r2, lr}
   290b6:	aa04      	add	r2, sp, #16
   290b8:	4608      	mov	r0, r1
   290ba:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   290be:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   290c0:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   290c2:	4798      	blx	r3
	va_end(args);

	return res;
}
   290c4:	b003      	add	sp, #12
   290c6:	f85d eb04 	ldr.w	lr, [sp], #4
   290ca:	b002      	add	sp, #8
   290cc:	4770      	bx	lr

000290ce <z_impl_zsock_close>:
{
   290ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   290d0:	a901      	add	r1, sp, #4
{
   290d2:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   290d4:	f7e8 fd9a 	bl	11c0c <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   290d8:	b940      	cbnz	r0, 290ec <z_impl_zsock_close+0x1e>
		errno = EBADF;
   290da:	f000 f965 	bl	293a8 <__errno>
   290de:	2309      	movs	r3, #9
		return -1;
   290e0:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   290e4:	6003      	str	r3, [r0, #0]
}
   290e6:	4620      	mov	r0, r4
   290e8:	b003      	add	sp, #12
   290ea:	bd30      	pop	{r4, r5, pc}
	ret = vtable->fd_vtable.close(ctx);
   290ec:	9b01      	ldr	r3, [sp, #4]
   290ee:	689b      	ldr	r3, [r3, #8]
   290f0:	4798      	blx	r3
   290f2:	4604      	mov	r4, r0
	z_free_fd(sock);
   290f4:	4628      	mov	r0, r5
   290f6:	f7e8 fdd9 	bl	11cac <z_free_fd>
	return ret;
   290fa:	e7f4      	b.n	290e6 <z_impl_zsock_close+0x18>

000290fc <z_impl_zsock_connect>:
{
   290fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   290fe:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   29100:	a903      	add	r1, sp, #12
{
   29102:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   29104:	f7e8 fd82 	bl	11c0c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   29108:	b118      	cbz	r0, 29112 <z_impl_zsock_connect+0x16>
   2910a:	9b03      	ldr	r3, [sp, #12]
   2910c:	9a01      	ldr	r2, [sp, #4]
   2910e:	695b      	ldr	r3, [r3, #20]
   29110:	b93b      	cbnz	r3, 29122 <z_impl_zsock_connect+0x26>
   29112:	f000 f949 	bl	293a8 <__errno>
   29116:	2309      	movs	r3, #9
   29118:	6003      	str	r3, [r0, #0]
   2911a:	f04f 30ff 	mov.w	r0, #4294967295
}
   2911e:	b004      	add	sp, #16
   29120:	bd10      	pop	{r4, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   29122:	4621      	mov	r1, r4
   29124:	4798      	blx	r3
   29126:	e7fa      	b.n	2911e <z_impl_zsock_connect+0x22>

00029128 <z_impl_zsock_sendto>:
{
   29128:	b530      	push	{r4, r5, lr}
   2912a:	b087      	sub	sp, #28
   2912c:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   2912e:	a905      	add	r1, sp, #20
{
   29130:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   29134:	f7e8 fd6a 	bl	11c0c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   29138:	b120      	cbz	r0, 29144 <z_impl_zsock_sendto+0x1c>
   2913a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2913e:	9905      	ldr	r1, [sp, #20]
   29140:	6a0d      	ldr	r5, [r1, #32]
   29142:	b93d      	cbnz	r5, 29154 <z_impl_zsock_sendto+0x2c>
   29144:	f000 f930 	bl	293a8 <__errno>
   29148:	2309      	movs	r3, #9
   2914a:	6003      	str	r3, [r0, #0]
   2914c:	f04f 30ff 	mov.w	r0, #4294967295
}
   29150:	b007      	add	sp, #28
   29152:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   29154:	990b      	ldr	r1, [sp, #44]	; 0x2c
   29156:	9101      	str	r1, [sp, #4]
   29158:	990a      	ldr	r1, [sp, #40]	; 0x28
   2915a:	9100      	str	r1, [sp, #0]
   2915c:	4621      	mov	r1, r4
   2915e:	47a8      	blx	r5
   29160:	e7f6      	b.n	29150 <z_impl_zsock_sendto+0x28>

00029162 <z_impl_zsock_sendmsg>:
{
   29162:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   29164:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   29166:	a903      	add	r1, sp, #12
{
   29168:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   2916a:	f7e8 fd4f 	bl	11c0c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2916e:	b118      	cbz	r0, 29178 <z_impl_zsock_sendmsg+0x16>
   29170:	9b03      	ldr	r3, [sp, #12]
   29172:	9a01      	ldr	r2, [sp, #4]
   29174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   29176:	b93b      	cbnz	r3, 29188 <z_impl_zsock_sendmsg+0x26>
   29178:	f000 f916 	bl	293a8 <__errno>
   2917c:	2309      	movs	r3, #9
   2917e:	6003      	str	r3, [r0, #0]
   29180:	f04f 30ff 	mov.w	r0, #4294967295
}
   29184:	b004      	add	sp, #16
   29186:	bd10      	pop	{r4, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   29188:	4621      	mov	r1, r4
   2918a:	4798      	blx	r3
   2918c:	e7fa      	b.n	29184 <z_impl_zsock_sendmsg+0x22>

0002918e <z_impl_zsock_recvfrom>:
{
   2918e:	b530      	push	{r4, r5, lr}
   29190:	b087      	sub	sp, #28
   29192:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   29194:	a905      	add	r1, sp, #20
{
   29196:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   2919a:	f7e8 fd37 	bl	11c0c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2919e:	b120      	cbz	r0, 291aa <z_impl_zsock_recvfrom+0x1c>
   291a0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   291a4:	9905      	ldr	r1, [sp, #20]
   291a6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   291a8:	b93d      	cbnz	r5, 291ba <z_impl_zsock_recvfrom+0x2c>
   291aa:	f000 f8fd 	bl	293a8 <__errno>
   291ae:	2309      	movs	r3, #9
   291b0:	6003      	str	r3, [r0, #0]
   291b2:	f04f 30ff 	mov.w	r0, #4294967295
}
   291b6:	b007      	add	sp, #28
   291b8:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   291ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   291bc:	9101      	str	r1, [sp, #4]
   291be:	990a      	ldr	r1, [sp, #40]	; 0x28
   291c0:	9100      	str	r1, [sp, #0]
   291c2:	4621      	mov	r1, r4
   291c4:	47a8      	blx	r5
   291c6:	e7f6      	b.n	291b6 <z_impl_zsock_recvfrom+0x28>

000291c8 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   291c8:	b2cb      	uxtb	r3, r1
   291ca:	210c      	movs	r1, #12
   291cc:	68c2      	ldr	r2, [r0, #12]
   291ce:	fb03 2101 	mla	r1, r3, r1, r2
   291d2:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   291d4:	f000 0007 	and.w	r0, r0, #7
   291d8:	4770      	bx	lr

000291da <set_off_state>:
	__asm__ volatile(
   291da:	f04f 0320 	mov.w	r3, #32
   291de:	f3ef 8211 	mrs	r2, BASEPRI
   291e2:	f383 8811 	msr	BASEPRI, r3
   291e6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   291ea:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   291ec:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   291f0:	d001      	beq.n	291f6 <set_off_state+0x1c>
   291f2:	428b      	cmp	r3, r1
   291f4:	d107      	bne.n	29206 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   291f6:	2301      	movs	r3, #1
   291f8:	6003      	str	r3, [r0, #0]
	int err = 0;
   291fa:	2000      	movs	r0, #0
	__asm__ volatile(
   291fc:	f382 8811 	msr	BASEPRI, r2
   29200:	f3bf 8f6f 	isb	sy
}
   29204:	4770      	bx	lr
		err = -EPERM;
   29206:	f04f 30ff 	mov.w	r0, #4294967295
   2920a:	e7f7      	b.n	291fc <set_off_state+0x22>

0002920c <set_starting_state>:
{
   2920c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2920e:	f04f 0320 	mov.w	r3, #32
   29212:	f3ef 8211 	mrs	r2, BASEPRI
   29216:	f383 8811 	msr	BASEPRI, r3
   2921a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2921e:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   29220:	f003 0407 	and.w	r4, r3, #7
   29224:	2c01      	cmp	r4, #1
   29226:	d106      	bne.n	29236 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   29228:	6001      	str	r1, [r0, #0]
	int err = 0;
   2922a:	2000      	movs	r0, #0
	__asm__ volatile(
   2922c:	f382 8811 	msr	BASEPRI, r2
   29230:	f3bf 8f6f 	isb	sy
}
   29234:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   29236:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2923a:	428b      	cmp	r3, r1
		err = -EBUSY;
   2923c:	bf14      	ite	ne
   2923e:	f04f 30ff 	movne.w	r0, #4294967295
   29242:	f06f 000f 	mvneq.w	r0, #15
   29246:	e7f1      	b.n	2922c <set_starting_state+0x20>

00029248 <set_on_state>:
	__asm__ volatile(
   29248:	f04f 0320 	mov.w	r3, #32
   2924c:	f3ef 8211 	mrs	r2, BASEPRI
   29250:	f383 8811 	msr	BASEPRI, r3
   29254:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   29258:	6803      	ldr	r3, [r0, #0]
   2925a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2925e:	f043 0302 	orr.w	r3, r3, #2
   29262:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   29264:	f382 8811 	msr	BASEPRI, r2
   29268:	f3bf 8f6f 	isb	sy
}
   2926c:	4770      	bx	lr

0002926e <onoff_started_callback>:
{
   2926e:	b410      	push	{r4}
	notify(mgr, 0);
   29270:	241c      	movs	r4, #28
	return &data->mgr[type];
   29272:	68c0      	ldr	r0, [r0, #12]
   29274:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   29276:	fb03 0004 	mla	r0, r3, r4, r0
   2927a:	2100      	movs	r1, #0
}
   2927c:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   29280:	4710      	bx	r2

00029282 <blocking_start_callback>:
{
   29282:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   29284:	f7f8 b856 	b.w	21334 <z_impl_k_sem_give>

00029288 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   29288:	2000      	movs	r0, #0
   2928a:	f7f7 b8a1 	b.w	203d0 <nrfx_clock_stop>

0002928e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2928e:	2000      	movs	r0, #0
   29290:	f7f7 b86c 	b.w	2036c <nrfx_clock_start>

00029294 <api_stop>:
{
   29294:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   29296:	240c      	movs	r4, #12
   29298:	b2c9      	uxtb	r1, r1
   2929a:	434c      	muls	r4, r1
{
   2929c:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   2929e:	68c0      	ldr	r0, [r0, #12]
   292a0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   292a4:	2180      	movs	r1, #128	; 0x80
   292a6:	4418      	add	r0, r3
   292a8:	f7ff ff97 	bl	291da <set_off_state>
	if (err < 0) {
   292ac:	2800      	cmp	r0, #0
   292ae:	db04      	blt.n	292ba <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   292b0:	6869      	ldr	r1, [r5, #4]
   292b2:	440c      	add	r4, r1
   292b4:	6863      	ldr	r3, [r4, #4]
   292b6:	4798      	blx	r3
	return 0;
   292b8:	2000      	movs	r0, #0
}
   292ba:	bd38      	pop	{r3, r4, r5, pc}

000292bc <api_start>:
{
   292bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = set_starting_state(&subdata->flags, ctx);
   292be:	240c      	movs	r4, #12
   292c0:	b2c9      	uxtb	r1, r1
   292c2:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   292c4:	68c5      	ldr	r5, [r0, #12]
{
   292c6:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   292c8:	f104 0040 	add.w	r0, r4, #64	; 0x40
   292cc:	2180      	movs	r1, #128	; 0x80
   292ce:	4428      	add	r0, r5
{
   292d0:	4617      	mov	r7, r2
	err = set_starting_state(&subdata->flags, ctx);
   292d2:	f7ff ff9b 	bl	2920c <set_starting_state>
	if (err < 0) {
   292d6:	2800      	cmp	r0, #0
   292d8:	db08      	blt.n	292ec <api_start+0x30>
	subdata->cb = data->cb;
   292da:	687b      	ldr	r3, [r7, #4]
   292dc:	4425      	add	r5, r4
   292de:	63ab      	str	r3, [r5, #56]	; 0x38
	subdata->user_data = data->user_data;
   292e0:	68bb      	ldr	r3, [r7, #8]
   292e2:	63eb      	str	r3, [r5, #60]	; 0x3c
	 get_sub_config(dev, type)->start();
   292e4:	6873      	ldr	r3, [r6, #4]
   292e6:	591b      	ldr	r3, [r3, r4]
   292e8:	4798      	blx	r3
	return 0;
   292ea:	2000      	movs	r0, #0
}
   292ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000292ee <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   292ee:	4770      	bx	lr

000292f0 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   292f0:	4770      	bx	lr

000292f2 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   292f2:	2100      	movs	r1, #0
   292f4:	2001      	movs	r0, #1
   292f6:	f7ea ba8d 	b.w	13814 <z_arm_fatal_error>

000292fa <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   292fa:	6e83      	ldr	r3, [r0, #104]	; 0x68
   292fc:	f383 880b 	msr	PSPLIM, r3
}
   29300:	4770      	bx	lr

00029302 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   29302:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   29304:	6800      	ldr	r0, [r0, #0]
   29306:	f7ea ba85 	b.w	13814 <z_arm_fatal_error>

0002930a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2930a:	b508      	push	{r3, lr}
	handler();
   2930c:	f7ea faf6 	bl	138fc <z_SysNmiOnReset>
	z_arm_int_exit();
}
   29310:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   29314:	f7ea bd82 	b.w	13e1c <z_arm_exc_exit>

00029318 <mpu_configure_region>:
{
   29318:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   2931a:	890a      	ldrh	r2, [r1, #8]
   2931c:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   2931e:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   29320:	684c      	ldr	r4, [r1, #4]
   29322:	f002 021f 	and.w	r2, r2, #31
{
   29326:	b085      	sub	sp, #20
   29328:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   2932c:	9300      	str	r3, [sp, #0]
   2932e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   29332:	f023 031f 	bic.w	r3, r3, #31
   29336:	1e62      	subs	r2, r4, #1
   29338:	4413      	add	r3, r2
   2933a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   2933e:	280f      	cmp	r0, #15
   29340:	4604      	mov	r4, r0
   29342:	9303      	str	r3, [sp, #12]
   29344:	d905      	bls.n	29352 <mpu_configure_region+0x3a>
   29346:	f7ea fe03 	bl	13f50 <region_allocate_and_init.part.0>
   2934a:	4604      	mov	r4, r0
}
   2934c:	4620      	mov	r0, r4
   2934e:	b005      	add	sp, #20
   29350:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   29352:	4669      	mov	r1, sp
   29354:	f7ea fde4 	bl	13f20 <region_init>
	return region_allocate_and_init(index,
   29358:	e7f8      	b.n	2934c <mpu_configure_region+0x34>

0002935a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2935a:	e840 f000 	tt	r0, r0
   2935e:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   29360:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   29364:	bf14      	ite	ne
   29366:	4618      	movne	r0, r3
   29368:	f06f 0015 	mvneq.w	r0, #21
   2936c:	4770      	bx	lr

0002936e <_stdout_hook_default>:
}
   2936e:	f04f 30ff 	mov.w	r0, #4294967295
   29372:	4770      	bx	lr

00029374 <_stdin_hook_default>:
}
   29374:	2000      	movs	r0, #0
   29376:	4770      	bx	lr

00029378 <_read>:
{
   29378:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2937a:	4611      	mov	r1, r2
   2937c:	f7ea bf5a 	b.w	14234 <z_impl_zephyr_read_stdin>

00029380 <_write>:
{
   29380:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   29382:	4611      	mov	r1, r2
   29384:	f7ea bf6a 	b.w	1425c <z_impl_zephyr_write_stdout>

00029388 <_close>:
   29388:	f04f 30ff 	mov.w	r0, #4294967295
   2938c:	4770      	bx	lr

0002938e <_lseek>:
}
   2938e:	2000      	movs	r0, #0
   29390:	4770      	bx	lr

00029392 <_isatty>:
}
   29392:	2001      	movs	r0, #1
   29394:	4770      	bx	lr

00029396 <_kill>:
}
   29396:	2000      	movs	r0, #0
   29398:	4770      	bx	lr

0002939a <_getpid>:
}
   2939a:	2000      	movs	r0, #0
   2939c:	4770      	bx	lr

0002939e <_fstat>:
	st->st_mode = S_IFCHR;
   2939e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   293a2:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   293a4:	604b      	str	r3, [r1, #4]
}
   293a6:	4770      	bx	lr

000293a8 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   293a8:	f7f7 b8ec 	b.w	20584 <z_impl_z_errno>

000293ac <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   293ac:	b508      	push	{r3, lr}
	net_if_init();
   293ae:	f7ea ffa5 	bl	142fc <net_if_init>
	net_if_post_init();
   293b2:	f7ea ffb9 	bl	14328 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   293b6:	2000      	movs	r0, #0
   293b8:	bd08      	pop	{r3, pc}

000293ba <net_if_l2>:
	if (!iface || !iface->if_dev) {
   293ba:	b110      	cbz	r0, 293c2 <net_if_l2+0x8>
   293bc:	6800      	ldr	r0, [r0, #0]
   293be:	b100      	cbz	r0, 293c2 <net_if_l2+0x8>
	return iface->if_dev->l2;
   293c0:	6840      	ldr	r0, [r0, #4]
}
   293c2:	4770      	bx	lr

000293c4 <l2_flags_get>:
{
   293c4:	b510      	push	{r4, lr}
   293c6:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   293c8:	f7ff fff7 	bl	293ba <net_if_l2>
   293cc:	b128      	cbz	r0, 293da <l2_flags_get+0x16>
   293ce:	68c2      	ldr	r2, [r0, #12]
   293d0:	b11a      	cbz	r2, 293da <l2_flags_get+0x16>
}
   293d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   293d6:	4618      	mov	r0, r3
   293d8:	4710      	bx	r2
}
   293da:	2000      	movs	r0, #0
   293dc:	bd10      	pop	{r4, pc}

000293de <net_if_up>:
{
   293de:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   293e0:	6803      	ldr	r3, [r0, #0]
   293e2:	4604      	mov	r4, r0
   293e4:	330c      	adds	r3, #12
   293e6:	e8d3 3faf 	lda	r3, [r3]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   293ea:	f013 0301 	ands.w	r3, r3, #1
   293ee:	d10b      	bne.n	29408 <net_if_up+0x2a>
	     net_if_is_socket_offloaded(iface))) {
   293f0:	6802      	ldr	r2, [r0, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   293f2:	7e91      	ldrb	r1, [r2, #26]
   293f4:	b151      	cbz	r1, 2940c <net_if_up+0x2e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   293f6:	320c      	adds	r2, #12
   293f8:	e8d2 1fef 	ldaex	r1, [r2]
   293fc:	f041 0101 	orr.w	r1, r1, #1
   29400:	e8c2 1fe0 	stlex	r0, r1, [r2]
   29404:	2800      	cmp	r0, #0
   29406:	d1f7      	bne.n	293f8 <net_if_up+0x1a>
		return 0;
   29408:	2000      	movs	r0, #0
   2940a:	e018      	b.n	2943e <net_if_up+0x60>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   2940c:	f7ff ffd5 	bl	293ba <net_if_l2>
   29410:	b968      	cbnz	r0, 2942e <net_if_up+0x50>
   29412:	6823      	ldr	r3, [r4, #0]
   29414:	330c      	adds	r3, #12
   29416:	e8d3 2fef 	ldaex	r2, [r3]
   2941a:	f042 0201 	orr.w	r2, r2, #1
   2941e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   29422:	2900      	cmp	r1, #0
   29424:	d1f7      	bne.n	29416 <net_if_up+0x38>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   29426:	4620      	mov	r0, r4
   29428:	f7ff ffcc 	bl	293c4 <l2_flags_get>
   2942c:	e7ec      	b.n	29408 <net_if_up+0x2a>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   2942e:	6883      	ldr	r3, [r0, #8]
   29430:	2b00      	cmp	r3, #0
   29432:	d0ee      	beq.n	29412 <net_if_up+0x34>
	status = net_if_l2(iface)->enable(iface, true);
   29434:	2101      	movs	r1, #1
   29436:	4620      	mov	r0, r4
   29438:	4798      	blx	r3
	if (status < 0) {
   2943a:	2800      	cmp	r0, #0
   2943c:	dae9      	bge.n	29412 <net_if_up+0x34>
}
   2943e:	bd10      	pop	{r4, pc}

00029440 <net_byte_to_hex>:
{
   29440:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   29442:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   29444:	b1bb      	cbz	r3, 29476 <net_byte_to_hex+0x36>
		if (val < 10) {
   29446:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   29448:	b26b      	sxtb	r3, r5
   2944a:	bf86      	itte	hi
   2944c:	f1a2 050a 	subhi.w	r5, r2, #10
   29450:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   29452:	3330      	addls	r3, #48	; 0x30
   29454:	1c44      	adds	r4, r0, #1
   29456:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   29458:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   2945c:	4619      	mov	r1, r3
   2945e:	2b09      	cmp	r3, #9
	*ptr = '\0';
   29460:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   29464:	bf83      	ittte	hi
   29466:	3a0a      	subhi	r2, #10
   29468:	1889      	addhi	r1, r1, r2
   2946a:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   2946c:	3130      	addls	r1, #48	; 0x30
   2946e:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   29470:	7063      	strb	r3, [r4, #1]
   29472:	1c60      	adds	r0, r4, #1
}
   29474:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   29476:	2d00      	cmp	r5, #0
   29478:	d1e5      	bne.n	29446 <net_byte_to_hex+0x6>
   2947a:	4604      	mov	r4, r0
   2947c:	e7ec      	b.n	29458 <net_byte_to_hex+0x18>

0002947e <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   2947e:	e9d0 2300 	ldrd	r2, r3, [r0]
   29482:	1a9b      	subs	r3, r3, r2
   29484:	2b01      	cmp	r3, #1
{
   29486:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   29488:	d90c      	bls.n	294a4 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   2948a:	4614      	mov	r4, r2
   2948c:	1c53      	adds	r3, r2, #1
   2948e:	6003      	str	r3, [r0, #0]
   29490:	f814 3b02 	ldrb.w	r3, [r4], #2
   29494:	021b      	lsls	r3, r3, #8
   29496:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   29498:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   2949a:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   2949c:	7852      	ldrb	r2, [r2, #1]
   2949e:	4313      	orrs	r3, r2
   294a0:	800b      	strh	r3, [r1, #0]
}
   294a2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   294a4:	f06f 0015 	mvn.w	r0, #21
   294a8:	e7fb      	b.n	294a2 <unpack_uint16+0x24>

000294aa <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   294aa:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   294ac:	e9d0 3400 	ldrd	r3, r4, [r0]
   294b0:	429c      	cmp	r4, r3
   294b2:	d01f      	beq.n	294f4 <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   294b4:	1c5c      	adds	r4, r3, #1
   294b6:	6004      	str	r4, [r0, #0]
   294b8:	781b      	ldrb	r3, [r3, #0]
   294ba:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   294bc:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   294be:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   294c0:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   294c2:	6804      	ldr	r4, [r0, #0]
   294c4:	42bc      	cmp	r4, r7
   294c6:	d218      	bcs.n	294fa <fixed_header_decode+0x50>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   294c8:	4625      	mov	r5, r4
   294ca:	f815 3b01 	ldrb.w	r3, [r5], #1
   294ce:	6816      	ldr	r6, [r2, #0]
   294d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   294d4:	408b      	lsls	r3, r1
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   294d6:	4433      	add	r3, r6
   294d8:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   294da:	6005      	str	r5, [r0, #0]
   294dc:	f994 4000 	ldrsb.w	r4, [r4]
   294e0:	2c00      	cmp	r4, #0
   294e2:	db04      	blt.n	294ee <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   294e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   294e8:	d204      	bcs.n	294f4 <fixed_header_decode+0x4a>
	return 0;
   294ea:	2000      	movs	r0, #0
   294ec:	e004      	b.n	294f8 <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   294ee:	3107      	adds	r1, #7
   294f0:	291c      	cmp	r1, #28
   294f2:	d1e6      	bne.n	294c2 <fixed_header_decode+0x18>
		return -EINVAL;
   294f4:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   294f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   294fa:	f06f 000a 	mvn.w	r0, #10
   294fe:	e7fb      	b.n	294f8 <fixed_header_decode+0x4e>

00029500 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   29500:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   29502:	e9d1 3500 	ldrd	r3, r5, [r1]
   29506:	429d      	cmp	r5, r3
   29508:	d102      	bne.n	29510 <connect_ack_decode+0x10>
		return -EINVAL;
   2950a:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   2950e:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   29510:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   29512:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   29514:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   29516:	d0f8      	beq.n	2950a <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   29518:	461d      	mov	r5, r3
   2951a:	f815 4b02 	ldrb.w	r4, [r5], #2
   2951e:	600d      	str	r5, [r1, #0]
   29520:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   29522:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
	return 0;
   29526:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   29528:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   2952a:	bf04      	itt	eq
   2952c:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   29530:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   29532:	7051      	strb	r1, [r2, #1]
	return 0;
   29534:	e7eb      	b.n	2950e <connect_ack_decode+0xe>

00029536 <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   29536:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2953a:	461c      	mov	r4, r3
   2953c:	4617      	mov	r7, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   2953e:	7da2      	ldrb	r2, [r4, #22]
   29540:	0043      	lsls	r3, r0, #1
   29542:	f022 0203 	bic.w	r2, r2, #3
   29546:	f003 0302 	and.w	r3, r3, #2
   2954a:	4313      	orrs	r3, r2
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   2954c:	f3c0 0041 	ubfx	r0, r0, #1, #2
   29550:	7220      	strb	r0, [r4, #8]
{
   29552:	4688      	mov	r8, r1
	err_code = unpack_uint16(buf, &utf8_strlen);
   29554:	4638      	mov	r0, r7
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   29556:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   29558:	f10d 0106 	add.w	r1, sp, #6
   2955c:	f7ff ff8f 	bl	2947e <unpack_uint16>
	if (err_code != 0) {
   29560:	4606      	mov	r6, r0
   29562:	b9c0      	cbnz	r0, 29596 <publish_decode+0x60>
	if ((buf->end - buf->cur) < utf8_strlen) {
   29564:	683b      	ldr	r3, [r7, #0]
   29566:	687a      	ldr	r2, [r7, #4]
   29568:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   2956c:	1ad2      	subs	r2, r2, r3
   2956e:	42aa      	cmp	r2, r5
   29570:	da02      	bge.n	29578 <publish_decode+0x42>

	if (var_length < var_header_length) {
		MQTT_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   29572:	f06f 0615 	mvn.w	r6, #21
   29576:	e00e      	b.n	29596 <publish_decode+0x60>
	str->size = utf8_strlen;
   29578:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   2957a:	b185      	cbz	r5, 2959e <publish_decode+0x68>
		str->utf8 = buf->cur;
   2957c:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   2957e:	442b      	add	r3, r5
   29580:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   29582:	7a23      	ldrb	r3, [r4, #8]
   29584:	b96b      	cbnz	r3, 295a2 <publish_decode+0x6c>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   29586:	3502      	adds	r5, #2
	if (var_length < var_header_length) {
   29588:	4545      	cmp	r5, r8
   2958a:	d8f2      	bhi.n	29572 <publish_decode+0x3c>
	}

	param->message.payload.data = NULL;
   2958c:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   2958e:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   29592:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   29594:	6125      	str	r5, [r4, #16]

	return 0;
}
   29596:	4630      	mov	r0, r6
   29598:	b002      	add	sp, #8
   2959a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   2959e:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   295a0:	e7ef      	b.n	29582 <publish_decode+0x4c>
		err_code = unpack_uint16(buf, &param->message_id);
   295a2:	4638      	mov	r0, r7
   295a4:	f104 0114 	add.w	r1, r4, #20
   295a8:	f7ff ff69 	bl	2947e <unpack_uint16>
		if (err_code != 0) {
   295ac:	b908      	cbnz	r0, 295b2 <publish_decode+0x7c>
		var_header_length += sizeof(uint16_t);
   295ae:	3504      	adds	r5, #4
   295b0:	e7ea      	b.n	29588 <publish_decode+0x52>
   295b2:	4606      	mov	r6, r0
   295b4:	e7ef      	b.n	29596 <publish_decode+0x60>

000295b6 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   295b6:	f7ff bf62 	b.w	2947e <unpack_uint16>

000295ba <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   295ba:	f7ff bf60 	b.w	2947e <unpack_uint16>

000295be <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   295be:	f7ff bf5e 	b.w	2947e <unpack_uint16>

000295c2 <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   295c2:	f7ff bf5c 	b.w	2947e <unpack_uint16>

000295c6 <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   295c6:	b538      	push	{r3, r4, r5, lr}
   295c8:	4605      	mov	r5, r0
   295ca:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   295cc:	f7ff ff57 	bl	2947e <unpack_uint16>
	if (err_code != 0) {
   295d0:	b930      	cbnz	r0, 295e0 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   295d2:	e9d5 2300 	ldrd	r2, r3, [r5]
   295d6:	1a99      	subs	r1, r3, r2
	str->len = length;
   295d8:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   295da:	b111      	cbz	r1, 295e2 <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   295dc:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   295de:	602b      	str	r3, [r5, #0]
}
   295e0:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   295e2:	6060      	str	r0, [r4, #4]
   295e4:	e7fc      	b.n	295e0 <subscribe_ack_decode+0x1a>

000295e6 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   295e6:	f7ff bf4a 	b.w	2947e <unpack_uint16>

000295ea <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   295ea:	e9d1 3200 	ldrd	r3, r2, [r1]
   295ee:	1ad2      	subs	r2, r2, r3
   295f0:	2a01      	cmp	r2, #1
   295f2:	d909      	bls.n	29608 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   295f4:	1c5a      	adds	r2, r3, #1
   295f6:	600a      	str	r2, [r1, #0]
   295f8:	0a02      	lsrs	r2, r0, #8
   295fa:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   295fc:	680b      	ldr	r3, [r1, #0]
   295fe:	1c5a      	adds	r2, r3, #1
   29600:	600a      	str	r2, [r1, #0]
   29602:	7018      	strb	r0, [r3, #0]
	return 0;
   29604:	2000      	movs	r0, #0
   29606:	4770      	bx	lr
		return -ENOMEM;
   29608:	f06f 000b 	mvn.w	r0, #11
}
   2960c:	4770      	bx	lr

0002960e <pack_utf8_str>:
{
   2960e:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   29610:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   29614:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   29616:	6840      	ldr	r0, [r0, #4]
   29618:	1a9b      	subs	r3, r3, r2
   2961a:	1c82      	adds	r2, r0, #2
   2961c:	4293      	cmp	r3, r2
{
   2961e:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   29620:	d30d      	bcc.n	2963e <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   29622:	b280      	uxth	r0, r0
   29624:	f7ff ffe1 	bl	295ea <pack_uint16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29628:	e9d5 1200 	ldrd	r1, r2, [r5]
   2962c:	6820      	ldr	r0, [r4, #0]
   2962e:	f7e3 faa1 	bl	cb74 <memcpy>
	return 0;
   29632:	2000      	movs	r0, #0
	buf->cur += str->size;
   29634:	6823      	ldr	r3, [r4, #0]
   29636:	686a      	ldr	r2, [r5, #4]
   29638:	4413      	add	r3, r2
   2963a:	6023      	str	r3, [r4, #0]
}
   2963c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   2963e:	f06f 000b 	mvn.w	r0, #11
   29642:	e7fb      	b.n	2963c <pack_utf8_str+0x2e>

00029644 <mqtt_encode_fixed_header>:
	uint32_t length = buf->cur - start;
   29644:	6813      	ldr	r3, [r2, #0]
{
   29646:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   29648:	1a5c      	subs	r4, r3, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   2964a:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   2964e:	d227      	bcs.n	296a0 <mqtt_encode_fixed_header+0x5c>
   29650:	4625      	mov	r5, r4
   29652:	2600      	movs	r6, #0
	} while (length > 0);
   29654:	09ed      	lsrs	r5, r5, #7
   29656:	b2f3      	uxtb	r3, r6
   29658:	f106 0601 	add.w	r6, r6, #1
   2965c:	d1fa      	bne.n	29654 <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   2965e:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   29660:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   29662:	b2db      	uxtb	r3, r3
   29664:	425d      	negs	r5, r3
   29666:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   29668:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   2966a:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   2966c:	bf1e      	ittt	ne
   2966e:	3301      	addne	r3, #1
   29670:	6013      	strne	r3, [r2, #0]
   29672:	5548      	strbne	r0, [r1, r5]
	return 0;
   29674:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   29676:	6813      	ldr	r3, [r2, #0]
   29678:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   2967c:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   2967e:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   29680:	bf1f      	itttt	ne
   29682:	6811      	ldrne	r1, [r2, #0]
   29684:	780b      	ldrbne	r3, [r1, #0]
   29686:	f063 037f 	ornne	r3, r3, #127	; 0x7f
   2968a:	700b      	strbne	r3, [r1, #0]
			buf->cur++;
   2968c:	6813      	ldr	r3, [r2, #0]
   2968e:	3301      	adds	r3, #1
   29690:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   29692:	2800      	cmp	r0, #0
   29694:	d1ef      	bne.n	29676 <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   29696:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   29698:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   2969a:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   2969c:	6053      	str	r3, [r2, #4]
}
   2969e:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   296a0:	f06f 0079 	mvn.w	r0, #121	; 0x79
   296a4:	e7fb      	b.n	2969e <mqtt_encode_fixed_header+0x5a>

000296a6 <publish_encode>:
{
   296a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   296aa:	7d87      	ldrb	r7, [r0, #22]
   296ac:	7a04      	ldrb	r4, [r0, #8]
   296ae:	f007 0801 	and.w	r8, r7, #1
{
   296b2:	4605      	mov	r5, r0
   296b4:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   296b6:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   296ba:	b10c      	cbz	r4, 296c0 <publish_encode+0x1a>
   296bc:	8a83      	ldrh	r3, [r0, #20]
   296be:	b383      	cbz	r3, 29722 <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   296c0:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   296c4:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   296c6:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   296c8:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   296ca:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   296ce:	f7ff ff9e 	bl	2960e <pack_utf8_str>
	if (err_code != 0) {
   296d2:	b9b0      	cbnz	r0, 29702 <publish_encode+0x5c>
	if (param->message.topic.qos) {
   296d4:	7a2b      	ldrb	r3, [r5, #8]
   296d6:	b9b3      	cbnz	r3, 29706 <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   296d8:	0060      	lsls	r0, r4, #1
   296da:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   296de:	692a      	ldr	r2, [r5, #16]
   296e0:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   296e4:	4338      	orrs	r0, r7
   296e6:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   296ea:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   296ec:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   296f0:	464a      	mov	r2, r9
   296f2:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   296f4:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   296f8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   296fc:	f7ff ffa2 	bl	29644 <mqtt_encode_fixed_header>
	if (err_code != 0) {
   29700:	b140      	cbz	r0, 29714 <publish_encode+0x6e>
}
   29702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   29706:	4649      	mov	r1, r9
   29708:	8aa8      	ldrh	r0, [r5, #20]
   2970a:	f7ff ff6e 	bl	295ea <pack_uint16>
		if (err_code != 0) {
   2970e:	2800      	cmp	r0, #0
   29710:	d0e2      	beq.n	296d8 <publish_encode+0x32>
   29712:	e7f6      	b.n	29702 <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   29714:	f8d9 3004 	ldr.w	r3, [r9, #4]
   29718:	692a      	ldr	r2, [r5, #16]
   2971a:	1a9b      	subs	r3, r3, r2
   2971c:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   29720:	e7ef      	b.n	29702 <publish_encode+0x5c>
		return -EINVAL;
   29722:	f06f 0015 	mvn.w	r0, #21
   29726:	e7ec      	b.n	29702 <publish_encode+0x5c>

00029728 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   29728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2972a:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   2972c:	e9d1 3100 	ldrd	r3, r1, [r1]
   29730:	1acb      	subs	r3, r1, r3
   29732:	4293      	cmp	r3, r2
{
   29734:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   29736:	d301      	bcc.n	2973c <mqtt_read_message_chunk+0x14>
		return 0;
   29738:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   2973a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   2973c:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   2973e:	190f      	adds	r7, r1, r4
   29740:	e9d0 2313 	ldrd	r2, r3, [r0, #76]	; 0x4c
   29744:	4413      	add	r3, r2
   29746:	429f      	cmp	r7, r3
   29748:	d813      	bhi.n	29772 <mqtt_read_message_chunk+0x4a>
   2974a:	4297      	cmp	r7, r2
   2974c:	d311      	bcc.n	29772 <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   2974e:	2300      	movs	r3, #0
   29750:	4622      	mov	r2, r4
   29752:	f7ea ffad 	bl	146b0 <mqtt_transport_read>
	if (len < 0) {
   29756:	2800      	cmp	r0, #0
   29758:	dbef      	blt.n	2973a <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   2975a:	d00d      	beq.n	29778 <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   2975c:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   2975e:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   29760:	4403      	add	r3, r0
   29762:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   29764:	686b      	ldr	r3, [r5, #4]
   29766:	4403      	add	r3, r0
   29768:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   2976a:	d2e5      	bcs.n	29738 <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   2976c:	f06f 000a 	mvn.w	r0, #10
   29770:	e7e3      	b.n	2973a <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   29772:	f06f 000b 	mvn.w	r0, #11
   29776:	e7e0      	b.n	2973a <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   29778:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2977c:	e7dd      	b.n	2973a <mqtt_read_message_chunk+0x12>

0002977e <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   2977e:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   29780:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   29782:	69c2      	ldr	r2, [r0, #28]
{
   29784:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   29786:	9302      	str	r3, [sp, #8]
{
   29788:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   2978a:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   2978c:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   2978e:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   29790:	4628      	mov	r0, r5
   29792:	a902      	add	r1, sp, #8
   29794:	f7ff ffc8 	bl	29728 <mqtt_read_message_chunk>
		if (err_code < 0) {
   29798:	1e04      	subs	r4, r0, #0
   2979a:	db2d      	blt.n	297f8 <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   2979c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2979e:	aa01      	add	r2, sp, #4
   297a0:	f10d 0103 	add.w	r1, sp, #3
   297a4:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   297a6:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   297a8:	f7ff fe7f 	bl	294aa <fixed_header_decode>
	} while (err_code == -EAGAIN);
   297ac:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   297b0:	4604      	mov	r4, r0
		chunk_size = 1U;
   297b2:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   297b6:	d0eb      	beq.n	29790 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   297b8:	2800      	cmp	r0, #0
   297ba:	db21      	blt.n	29800 <mqtt_handle_rx+0x82>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   297bc:	f89d 6003 	ldrb.w	r6, [sp, #3]
   297c0:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   297c4:	2b30      	cmp	r3, #48	; 0x30
   297c6:	d11e      	bne.n	29806 <mqtt_handle_rx+0x88>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   297c8:	2202      	movs	r2, #2
   297ca:	4628      	mov	r0, r5
   297cc:	a902      	add	r1, sp, #8
   297ce:	f7ff ffab 	bl	29728 <mqtt_read_message_chunk>
	if (err_code < 0) {
   297d2:	1e04      	subs	r4, r0, #0
   297d4:	db10      	blt.n	297f8 <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   297d6:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   297d8:	f016 0f06 	tst.w	r6, #6
   297dc:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   297de:	4628      	mov	r0, r5
   297e0:	ba52      	rev16	r2, r2
   297e2:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   297e4:	bf0c      	ite	eq
   297e6:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   297e8:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   297ea:	a902      	add	r1, sp, #8
   297ec:	f7ff ff9c 	bl	29728 <mqtt_read_message_chunk>
	if (err_code < 0) {
   297f0:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   297f4:	2c00      	cmp	r4, #0
   297f6:	da0d      	bge.n	29814 <mqtt_handle_rx+0x96>
		return (err_code == -EAGAIN) ? 0 : err_code;
   297f8:	f114 0f0b 	cmn.w	r4, #11
   297fc:	d100      	bne.n	29800 <mqtt_handle_rx+0x82>
   297fe:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   29800:	4620      	mov	r0, r4
   29802:	b00c      	add	sp, #48	; 0x30
   29804:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   29806:	4628      	mov	r0, r5
   29808:	9a01      	ldr	r2, [sp, #4]
   2980a:	a902      	add	r1, sp, #8
   2980c:	f7ff ff8c 	bl	29728 <mqtt_read_message_chunk>
   29810:	4604      	mov	r4, r0
   29812:	e7ef      	b.n	297f4 <mqtt_handle_rx+0x76>
	evt.result = 0;
   29814:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   29816:	f89d 0003 	ldrb.w	r0, [sp, #3]
   2981a:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   2981c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   29820:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   29822:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   29824:	d066      	beq.n	298f4 <mqtt_handle_rx+0x176>
   29826:	d813      	bhi.n	29850 <mqtt_handle_rx+0xd2>
   29828:	2b40      	cmp	r3, #64	; 0x40
   2982a:	d059      	beq.n	298e0 <mqtt_handle_rx+0x162>
   2982c:	d806      	bhi.n	2983c <mqtt_handle_rx+0xbe>
   2982e:	2b20      	cmp	r3, #32
   29830:	d02f      	beq.n	29892 <mqtt_handle_rx+0x114>
   29832:	2b30      	cmp	r3, #48	; 0x30
   29834:	d048      	beq.n	298c8 <mqtt_handle_rx+0x14a>
	client->internal.rx_buf_datalen = 0U;
   29836:	2400      	movs	r4, #0
   29838:	61ec      	str	r4, [r5, #28]
	return 0;
   2983a:	e7e1      	b.n	29800 <mqtt_handle_rx+0x82>
	switch (type_and_flags & 0xF0) {
   2983c:	2b50      	cmp	r3, #80	; 0x50
   2983e:	d1fa      	bne.n	29836 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBREC;
   29840:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   29842:	a905      	add	r1, sp, #20
   29844:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   29846:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   2984a:	f7ff feb6 	bl	295ba <publish_receive_decode>
   2984e:	e04e      	b.n	298ee <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   29850:	2bb0      	cmp	r3, #176	; 0xb0
   29852:	d05f      	beq.n	29914 <mqtt_handle_rx+0x196>
   29854:	d80b      	bhi.n	2986e <mqtt_handle_rx+0xf0>
   29856:	2b70      	cmp	r3, #112	; 0x70
   29858:	d054      	beq.n	29904 <mqtt_handle_rx+0x186>
   2985a:	2b90      	cmp	r3, #144	; 0x90
   2985c:	d1eb      	bne.n	29836 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_SUBACK;
   2985e:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   29860:	a905      	add	r1, sp, #20
   29862:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   29864:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   29868:	f7ff fead 	bl	295c6 <subscribe_ack_decode>
   2986c:	e03f      	b.n	298ee <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   2986e:	2bd0      	cmp	r3, #208	; 0xd0
   29870:	d1e1      	bne.n	29836 <mqtt_handle_rx+0xb8>
		if (client->unacked_ping <= 0) {
   29872:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
	int err_code = 0;
   29876:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   29878:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   2987a:	bfc8      	it	gt
   2987c:	f103 32ff 	addgt.w	r2, r3, #4294967295
		evt.type = MQTT_EVT_PINGRESP;
   29880:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   29884:	bfc8      	it	gt
   29886:	b252      	sxtbgt	r2, r2
   29888:	f885 205f 	strb.w	r2, [r5, #95]	; 0x5f
		evt.type = MQTT_EVT_PINGRESP;
   2988c:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   29890:	e010      	b.n	298b4 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_CONNACK;
   29892:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   29896:	4628      	mov	r0, r5
   29898:	aa05      	add	r2, sp, #20
   2989a:	a902      	add	r1, sp, #8
   2989c:	f7ff fe30 	bl	29500 <connect_ack_decode>
		if (err_code == 0) {
   298a0:	4604      	mov	r4, r0
   298a2:	bb28      	cbnz	r0, 298f0 <mqtt_handle_rx+0x172>
			if (evt.param.connack.return_code ==
   298a4:	f89d 2015 	ldrb.w	r2, [sp, #21]
   298a8:	b95a      	cbnz	r2, 298c2 <mqtt_handle_rx+0x144>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   298aa:	69ab      	ldr	r3, [r5, #24]
   298ac:	f043 0304 	orr.w	r3, r3, #4
   298b0:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   298b2:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   298b4:	4628      	mov	r0, r5
   298b6:	a904      	add	r1, sp, #16
   298b8:	f000 f8c5 	bl	29a46 <event_notify>
	if (err_code < 0) {
   298bc:	2c00      	cmp	r4, #0
   298be:	daba      	bge.n	29836 <mqtt_handle_rx+0xb8>
   298c0:	e79e      	b.n	29800 <mqtt_handle_rx+0x82>
				err_code = -ECONNREFUSED;
   298c2:	f06f 046e 	mvn.w	r4, #110	; 0x6e
   298c6:	e7f4      	b.n	298b2 <mqtt_handle_rx+0x134>
		evt.type = MQTT_EVT_PUBLISH;
   298c8:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   298ca:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   298cc:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   298d0:	ab05      	add	r3, sp, #20
   298d2:	f7ff fe30 	bl	29536 <publish_decode>
		client->internal.remaining_payload =
   298d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   298d8:	4604      	mov	r4, r0
		evt.result = err_code;
   298da:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   298dc:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   298de:	e7e9      	b.n	298b4 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBACK;
   298e0:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   298e2:	a905      	add	r1, sp, #20
   298e4:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   298e6:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   298ea:	f7ff fe64 	bl	295b6 <publish_ack_decode>
   298ee:	4604      	mov	r4, r0
		evt.result = err_code;
   298f0:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   298f2:	e7df      	b.n	298b4 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBREL;
   298f4:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   298f6:	a905      	add	r1, sp, #20
   298f8:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   298fa:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   298fe:	f7ff fe5e 	bl	295be <publish_release_decode>
   29902:	e7f4      	b.n	298ee <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_PUBCOMP;
   29904:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   29906:	a905      	add	r1, sp, #20
   29908:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   2990a:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   2990e:	f7ff fe58 	bl	295c2 <publish_complete_decode>
   29912:	e7ec      	b.n	298ee <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_UNSUBACK;
   29914:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   29916:	a905      	add	r1, sp, #20
   29918:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   2991c:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   29920:	f7ff fe61 	bl	295e6 <unsubscribe_ack_decode>
   29924:	e7e3      	b.n	298ee <mqtt_handle_rx+0x170>

00029926 <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   29926:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   29928:	6b45      	ldr	r5, [r0, #52]	; 0x34
{
   2992a:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   2992c:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   2992e:	2206      	movs	r2, #6
   29930:	2101      	movs	r1, #1
   29932:	f7e9 fa6b 	bl	12e0c <z_impl_zsock_socket>
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   29936:	2800      	cmp	r0, #0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   29938:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   2993a:	da04      	bge.n	29946 <mqtt_client_tcp_connect+0x20>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   2993c:	f7ff fd34 	bl	293a8 <__errno>
   29940:	6800      	ldr	r0, [r0, #0]
   29942:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   29944:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   29946:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   29948:	6b61      	ldr	r1, [r4, #52]	; 0x34
	if (broker->sa_family == AF_INET) {
   2994a:	2b01      	cmp	r3, #1
		peer_addr_size = sizeof(struct sockaddr_in);
   2994c:	bf14      	ite	ne
   2994e:	2218      	movne	r2, #24
   29950:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   29952:	f7ff fbd3 	bl	290fc <z_impl_zsock_connect>
	if (ret < 0) {
   29956:	2800      	cmp	r0, #0
   29958:	da03      	bge.n	29962 <mqtt_client_tcp_connect+0x3c>
		(void)close(client->transport.tcp.sock);
   2995a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   2995c:	f7ff fbb7 	bl	290ce <z_impl_zsock_close>
   29960:	e7ec      	b.n	2993c <mqtt_client_tcp_connect+0x16>
	return 0;
   29962:	2000      	movs	r0, #0
   29964:	e7ee      	b.n	29944 <mqtt_client_tcp_connect+0x1e>

00029966 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   29966:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   2996a:	2400      	movs	r4, #0
{
   2996c:	4606      	mov	r6, r0
   2996e:	460f      	mov	r7, r1
   29970:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   29972:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   29974:	42ac      	cmp	r4, r5
   29976:	d301      	bcc.n	2997c <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   29978:	2000      	movs	r0, #0
   2997a:	e00d      	b.n	29998 <mqtt_client_tcp_write+0x32>
		ret = send(client->transport.tcp.sock, data + offset,
   2997c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   2997e:	2300      	movs	r3, #0
   29980:	e9cd 8800 	strd	r8, r8, [sp]
   29984:	1b2a      	subs	r2, r5, r4
   29986:	1939      	adds	r1, r7, r4
   29988:	f7ff fbce 	bl	29128 <z_impl_zsock_sendto>
		if (ret < 0) {
   2998c:	1e03      	subs	r3, r0, #0
   2998e:	da06      	bge.n	2999e <mqtt_client_tcp_write+0x38>
			return -errno;
   29990:	f7ff fd0a 	bl	293a8 <__errno>
   29994:	6800      	ldr	r0, [r0, #0]
   29996:	4240      	negs	r0, r0
}
   29998:	b002      	add	sp, #8
   2999a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   2999e:	441c      	add	r4, r3
   299a0:	e7e8      	b.n	29974 <mqtt_client_tcp_write+0xe>

000299a2 <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   299a2:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tcp.sock, message, 0);
   299a4:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   299a6:	2200      	movs	r2, #0
   299a8:	f7ff fbdb 	bl	29162 <z_impl_zsock_sendmsg>
	if (ret < 0) {
   299ac:	2800      	cmp	r0, #0
   299ae:	da04      	bge.n	299ba <mqtt_client_tcp_write_msg+0x18>
		return -errno;
   299b0:	f7ff fcfa 	bl	293a8 <__errno>
   299b4:	6800      	ldr	r0, [r0, #0]
   299b6:	4240      	negs	r0, r0
	}

	return 0;
}
   299b8:	bd08      	pop	{r3, pc}
	return 0;
   299ba:	2000      	movs	r0, #0
   299bc:	e7fc      	b.n	299b8 <mqtt_client_tcp_write_msg+0x16>

000299be <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   299be:	b513      	push	{r0, r1, r4, lr}
   299c0:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   299c2:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   299c4:	bf14      	ite	ne
   299c6:	4623      	movne	r3, r4
   299c8:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   299ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   299cc:	e9cd 4400 	strd	r4, r4, [sp]
   299d0:	f7ff fbdd 	bl	2918e <z_impl_zsock_recvfrom>
	if (ret < 0) {
   299d4:	2800      	cmp	r0, #0
   299d6:	da03      	bge.n	299e0 <mqtt_client_tcp_read+0x22>
		return -errno;
   299d8:	f7ff fce6 	bl	293a8 <__errno>
   299dc:	6800      	ldr	r0, [r0, #0]
   299de:	4240      	negs	r0, r0
	}

	return ret;
}
   299e0:	b002      	add	sp, #8
   299e2:	bd10      	pop	{r4, pc}

000299e4 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   299e4:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   299e6:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   299e8:	f7ff fb71 	bl	290ce <z_impl_zsock_close>
	if (ret < 0) {
   299ec:	2800      	cmp	r0, #0
   299ee:	da04      	bge.n	299fa <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   299f0:	f7ff fcda 	bl	293a8 <__errno>
   299f4:	6800      	ldr	r0, [r0, #0]
   299f6:	4240      	negs	r0, r0
	}

	return 0;
}
   299f8:	bd08      	pop	{r3, pc}
	return 0;
   299fa:	2000      	movs	r0, #0
   299fc:	e7fc      	b.n	299f8 <mqtt_client_tcp_disconnect+0x14>

000299fe <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   299fe:	f7ff bff1 	b.w	299e4 <mqtt_client_tcp_disconnect>

00029a02 <k_uptime_get>:
{
   29a02:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   29a04:	f001 fbdc 	bl	2b1c0 <z_impl_k_uptime_ticks>
   29a08:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   29a0c:	fba0 2304 	umull	r2, r3, r0, r4
   29a10:	fb04 3301 	mla	r3, r4, r1, r3
   29a14:	0bd0      	lsrs	r0, r2, #15
}
   29a16:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   29a1a:	0bd9      	lsrs	r1, r3, #15
   29a1c:	bd10      	pop	{r4, pc}

00029a1e <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   29a1e:	b538      	push	{r3, r4, r5, lr}
   29a20:	4604      	mov	r4, r0
   29a22:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   29a24:	6d82      	ldr	r2, [r0, #88]	; 0x58
   29a26:	2100      	movs	r1, #0
   29a28:	6d40      	ldr	r0, [r0, #84]	; 0x54
   29a2a:	f7f8 fc0f 	bl	2224c <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   29a2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
	buf->end = client->tx_buf + client->tx_buf_size;
   29a30:	6da2      	ldr	r2, [r4, #88]	; 0x58
	buf->cur = client->tx_buf;
   29a32:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   29a34:	4413      	add	r3, r2
   29a36:	606b      	str	r3, [r5, #4]
}
   29a38:	bd38      	pop	{r3, r4, r5, pc}

00029a3a <mqtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   29a3a:	f04f 32ff 	mov.w	r2, #4294967295
   29a3e:	f04f 33ff 	mov.w	r3, #4294967295
   29a42:	f7f7 b82f 	b.w	20aa4 <z_impl_k_mutex_lock>

00029a46 <event_notify>:

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   29a46:	b513      	push	{r0, r1, r4, lr}
	if (client->evt_cb != NULL) {
   29a48:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   29a4a:	4604      	mov	r4, r0
   29a4c:	9101      	str	r1, [sp, #4]
	if (client->evt_cb != NULL) {
   29a4e:	b15b      	cbz	r3, 29a68 <event_notify+0x22>

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
	int ret = sys_mutex_unlock(&client->internal.mutex);
   29a50:	f7ea fe3c 	bl	146cc <sys_mutex_unlock>
		mqtt_mutex_unlock(client);

		client->evt_cb(client, evt);
   29a54:	4620      	mov	r0, r4
   29a56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   29a58:	9901      	ldr	r1, [sp, #4]
   29a5a:	4798      	blx	r3

		mqtt_mutex_lock(client);
   29a5c:	4620      	mov	r0, r4
	}
}
   29a5e:	b002      	add	sp, #8
   29a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mqtt_mutex_lock(client);
   29a64:	f7ff bfe9 	b.w	29a3a <mqtt_mutex_lock>
}
   29a68:	b002      	add	sp, #8
   29a6a:	bd10      	pop	{r4, pc}

00029a6c <client_disconnect.constprop.0>:

static void client_disconnect(struct mqtt_client *client, int result,
   29a6c:	b530      	push	{r4, r5, lr}
   29a6e:	b089      	sub	sp, #36	; 0x24
   29a70:	4604      	mov	r4, r0
   29a72:	460d      	mov	r5, r1
			      bool notify)
{
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   29a74:	f7ff ffc3 	bl	299fe <mqtt_transport_disconnect>
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	if (notify) {
		struct mqtt_evt evt = {
   29a78:	221c      	movs	r2, #28
   29a7a:	2100      	movs	r1, #0
   29a7c:	4668      	mov	r0, sp
   29a7e:	f7f8 fbe5 	bl	2224c <memset>
   29a82:	2301      	movs	r3, #1
			.type = MQTT_EVT_DISCONNECT,
			.result = result,
		};

		/* Notify application. */
		event_notify(client, &evt);
   29a84:	4669      	mov	r1, sp
   29a86:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   29a88:	f88d 3000 	strb.w	r3, [sp]
   29a8c:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   29a8e:	f7ff ffda 	bl	29a46 <event_notify>
	MQTT_STATE_INIT(client);
   29a92:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   29a94:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   29a98:	e9c4 3307 	strd	r3, r3, [r4, #28]
	}

	/* Reset internal state. */
	client_reset(client);
}
   29a9c:	b009      	add	sp, #36	; 0x24
   29a9e:	bd30      	pop	{r4, r5, pc}

00029aa0 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   29aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29aa2:	4617      	mov	r7, r2
   29aa4:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   29aa6:	4605      	mov	r5, r0
{
   29aa8:	9101      	str	r1, [sp, #4]
	NULL_PARAM_CHECK(client);
   29aaa:	b320      	cbz	r0, 29af6 <read_publish_payload+0x56>

	mqtt_mutex_lock(client);
   29aac:	f7ff ffc5 	bl	29a3a <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   29ab0:	6a2c      	ldr	r4, [r5, #32]
   29ab2:	b1b4      	cbz	r4, 29ae2 <read_publish_payload+0x42>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   29ab4:	42bc      	cmp	r4, r7
   29ab6:	4622      	mov	r2, r4
   29ab8:	4633      	mov	r3, r6
   29aba:	bf28      	it	cs
   29abc:	463a      	movcs	r2, r7
   29abe:	4628      	mov	r0, r5
   29ac0:	9901      	ldr	r1, [sp, #4]
   29ac2:	f7ea fdf5 	bl	146b0 <mqtt_transport_read>
   29ac6:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   29ac8:	b916      	cbnz	r6, 29ad0 <read_publish_payload+0x30>
   29aca:	f110 0f0b 	cmn.w	r0, #11
   29ace:	d008      	beq.n	29ae2 <read_publish_payload+0x42>
		goto exit;
	}

	if (ret <= 0) {
   29ad0:	2c00      	cmp	r4, #0
   29ad2:	dc0c      	bgt.n	29aee <read_publish_payload+0x4e>
		if (ret == 0) {
			ret = -ENOTCONN;
   29ad4:	bf08      	it	eq
   29ad6:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   29ada:	4628      	mov	r0, r5
   29adc:	4621      	mov	r1, r4
   29ade:	f7ff ffc5 	bl	29a6c <client_disconnect.constprop.0>
   29ae2:	4628      	mov	r0, r5
   29ae4:	f7ea fdf2 	bl	146cc <sys_mutex_unlock>

exit:
	mqtt_mutex_unlock(client);

	return ret;
}
   29ae8:	4620      	mov	r0, r4
   29aea:	b003      	add	sp, #12
   29aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	client->internal.remaining_payload -= ret;
   29aee:	6a2b      	ldr	r3, [r5, #32]
   29af0:	1b1b      	subs	r3, r3, r4
   29af2:	622b      	str	r3, [r5, #32]
   29af4:	e7f5      	b.n	29ae2 <read_publish_payload+0x42>
	NULL_PARAM_CHECK(client);
   29af6:	f06f 0415 	mvn.w	r4, #21
   29afa:	e7f5      	b.n	29ae8 <read_publish_payload+0x48>

00029afc <client_write>:
{
   29afc:	b538      	push	{r3, r4, r5, lr}
   29afe:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   29b00:	f7ea fdbc 	bl	1467c <mqtt_transport_write>
	if (err_code < 0) {
   29b04:	1e04      	subs	r4, r0, #0
   29b06:	da05      	bge.n	29b14 <client_write+0x18>
		client_disconnect(client, err_code, true);
   29b08:	4621      	mov	r1, r4
   29b0a:	4628      	mov	r0, r5
   29b0c:	f7ff ffae 	bl	29a6c <client_disconnect.constprop.0>
}
   29b10:	4620      	mov	r0, r4
   29b12:	bd38      	pop	{r3, r4, r5, pc}
	return (uint32_t)k_uptime_get();
   29b14:	f7ff ff75 	bl	29a02 <k_uptime_get>
	return 0;
   29b18:	2400      	movs	r4, #0
   29b1a:	6168      	str	r0, [r5, #20]
   29b1c:	e7f8      	b.n	29b10 <client_write+0x14>

00029b1e <mqtt_client_init>:
{
   29b1e:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK_VOID(client);
   29b20:	4604      	mov	r4, r0
   29b22:	b1a8      	cbz	r0, 29b50 <mqtt_client_init+0x32>
	MQTT_STATE_INIT(client);
   29b24:	2500      	movs	r5, #0
   29b26:	2264      	movs	r2, #100	; 0x64
   29b28:	2100      	movs	r1, #0
   29b2a:	f7f8 fb8f 	bl	2224c <memset>
   29b2e:	61a5      	str	r5, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   29b30:	4620      	mov	r0, r4
   29b32:	f001 f907 	bl	2ad44 <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   29b36:	2304      	movs	r3, #4
   29b38:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	client->clean_session = MQTT_CLEAN_SESSION;
   29b3c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   29b40:	f365 0341 	bfi	r3, r5, #1, #1
   29b44:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	client->keepalive = MQTT_KEEPALIVE;
   29b48:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   29b4c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
}
   29b50:	bd38      	pop	{r3, r4, r5, pc}

00029b52 <mqtt_connect>:
{
   29b52:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   29b54:	4605      	mov	r5, r0
   29b56:	2800      	cmp	r0, #0
   29b58:	d03a      	beq.n	29bd0 <mqtt_connect+0x7e>
	NULL_PARAM_CHECK(client->client_id.utf8);
   29b5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   29b5c:	b3c3      	cbz	r3, 29bd0 <mqtt_connect+0x7e>
	mqtt_mutex_lock(client);
   29b5e:	f7ff ff6c 	bl	29a3a <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   29b62:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   29b64:	b38b      	cbz	r3, 29bca <mqtt_connect+0x78>
   29b66:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   29b68:	b37b      	cbz	r3, 29bca <mqtt_connect+0x78>
	err_code = mqtt_transport_connect(client);
   29b6a:	4628      	mov	r0, r5
   29b6c:	f7ea fd7c 	bl	14668 <mqtt_transport_connect>
	if (err_code < 0) {
   29b70:	1e04      	subs	r4, r0, #0
   29b72:	db24      	blt.n	29bbe <mqtt_connect+0x6c>
	tx_buf_init(client, &packet);
   29b74:	4669      	mov	r1, sp
   29b76:	4628      	mov	r0, r5
   29b78:	f7ff ff51 	bl	29a1e <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   29b7c:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   29b7e:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   29b80:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   29b84:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   29b86:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   29b88:	f7ea fcca 	bl	14520 <connect_request_encode>
	if (err_code < 0) {
   29b8c:	1e04      	subs	r4, r0, #0
   29b8e:	db13      	blt.n	29bb8 <mqtt_connect+0x66>
	err_code = mqtt_transport_write(client, packet.cur,
   29b90:	e9dd 1200 	ldrd	r1, r2, [sp]
   29b94:	4628      	mov	r0, r5
   29b96:	1a52      	subs	r2, r2, r1
   29b98:	f7ea fd70 	bl	1467c <mqtt_transport_write>
	if (err_code < 0) {
   29b9c:	1e04      	subs	r4, r0, #0
   29b9e:	db0b      	blt.n	29bb8 <mqtt_connect+0x66>
   29ba0:	f7ff ff2f 	bl	29a02 <k_uptime_get>
	client->unacked_ping = 0;
   29ba4:	2400      	movs	r4, #0
   29ba6:	6168      	str	r0, [r5, #20]
   29ba8:	f885 405f 	strb.w	r4, [r5, #95]	; 0x5f
   29bac:	4628      	mov	r0, r5
   29bae:	f7ea fd8d 	bl	146cc <sys_mutex_unlock>
}
   29bb2:	4620      	mov	r0, r4
   29bb4:	b003      	add	sp, #12
   29bb6:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   29bb8:	4628      	mov	r0, r5
   29bba:	f7ff ff20 	bl	299fe <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   29bbe:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   29bc0:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   29bc4:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   29bc8:	e7f0      	b.n	29bac <mqtt_connect+0x5a>
		err_code = -ENOMEM;
   29bca:	f06f 040b 	mvn.w	r4, #11
   29bce:	e7f6      	b.n	29bbe <mqtt_connect+0x6c>
	NULL_PARAM_CHECK(client);
   29bd0:	f06f 0415 	mvn.w	r4, #21
   29bd4:	e7ed      	b.n	29bb2 <mqtt_connect+0x60>

00029bd6 <mqtt_publish>:
{
   29bd6:	b570      	push	{r4, r5, r6, lr}
   29bd8:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   29bda:	4605      	mov	r5, r0
{
   29bdc:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   29bde:	2800      	cmp	r0, #0
   29be0:	d03b      	beq.n	29c5a <mqtt_publish+0x84>
	NULL_PARAM_CHECK(param);
   29be2:	2900      	cmp	r1, #0
   29be4:	d039      	beq.n	29c5a <mqtt_publish+0x84>
	mqtt_mutex_lock(client);
   29be6:	f7ff ff28 	bl	29a3a <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   29bea:	4628      	mov	r0, r5
   29bec:	a901      	add	r1, sp, #4
   29bee:	f7ff ff16 	bl	29a1e <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   29bf2:	69ab      	ldr	r3, [r5, #24]
   29bf4:	075b      	lsls	r3, r3, #29
   29bf6:	d52d      	bpl.n	29c54 <mqtt_publish+0x7e>
	err_code = publish_encode(param, &packet);
   29bf8:	4630      	mov	r0, r6
   29bfa:	a901      	add	r1, sp, #4
   29bfc:	f7ff fd53 	bl	296a6 <publish_encode>
	if (err_code < 0) {
   29c00:	1e04      	subs	r4, r0, #0
   29c02:	db1c      	blt.n	29c3e <mqtt_publish+0x68>
	io_vector[0].iov_base = packet.cur;
   29c04:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   29c06:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   29c08:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   29c0a:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   29c0c:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   29c0e:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   29c10:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   29c12:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   29c14:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   29c16:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   29c18:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   29c1c:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   29c1e:	f7f8 fb15 	bl	2224c <memset>
	msg.msg_iov = io_vector;
   29c22:	ab03      	add	r3, sp, #12
   29c24:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   29c26:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   29c28:	4628      	mov	r0, r5
   29c2a:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   29c2c:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   29c2e:	f7ea fd31 	bl	14694 <mqtt_transport_write_msg>
	if (err_code < 0) {
   29c32:	1e04      	subs	r4, r0, #0
   29c34:	da09      	bge.n	29c4a <mqtt_publish+0x74>
		client_disconnect(client, err_code, true);
   29c36:	4621      	mov	r1, r4
   29c38:	4628      	mov	r0, r5
   29c3a:	f7ff ff17 	bl	29a6c <client_disconnect.constprop.0>
   29c3e:	4628      	mov	r0, r5
   29c40:	f7ea fd44 	bl	146cc <sys_mutex_unlock>
}
   29c44:	4620      	mov	r0, r4
   29c46:	b00e      	add	sp, #56	; 0x38
   29c48:	bd70      	pop	{r4, r5, r6, pc}
   29c4a:	f7ff feda 	bl	29a02 <k_uptime_get>
	return 0;
   29c4e:	2400      	movs	r4, #0
   29c50:	6168      	str	r0, [r5, #20]
   29c52:	e7f4      	b.n	29c3e <mqtt_publish+0x68>
		return -ENOTCONN;
   29c54:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   29c58:	e7f1      	b.n	29c3e <mqtt_publish+0x68>
	NULL_PARAM_CHECK(client);
   29c5a:	f06f 0415 	mvn.w	r4, #21
   29c5e:	e7f1      	b.n	29c44 <mqtt_publish+0x6e>

00029c60 <mqtt_disconnect>:
{
   29c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   29c62:	4605      	mov	r5, r0
   29c64:	b310      	cbz	r0, 29cac <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   29c66:	f7ff fee8 	bl	29a3a <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   29c6a:	4669      	mov	r1, sp
   29c6c:	4628      	mov	r0, r5
   29c6e:	f7ff fed6 	bl	29a1e <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   29c72:	69ab      	ldr	r3, [r5, #24]
   29c74:	075b      	lsls	r3, r3, #29
   29c76:	d516      	bpl.n	29ca6 <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   29c78:	4668      	mov	r0, sp
   29c7a:	f7ea fcd1 	bl	14620 <disconnect_encode>
	if (err_code < 0) {
   29c7e:	1e04      	subs	r4, r0, #0
   29c80:	db0b      	blt.n	29c9a <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   29c82:	e9dd 1200 	ldrd	r1, r2, [sp]
   29c86:	4628      	mov	r0, r5
   29c88:	1a52      	subs	r2, r2, r1
   29c8a:	f7ff ff37 	bl	29afc <client_write>
	if (err_code < 0) {
   29c8e:	1e04      	subs	r4, r0, #0
   29c90:	db03      	blt.n	29c9a <mqtt_disconnect+0x3a>
	client_disconnect(client, 0, true);
   29c92:	2100      	movs	r1, #0
   29c94:	4628      	mov	r0, r5
   29c96:	f7ff fee9 	bl	29a6c <client_disconnect.constprop.0>
   29c9a:	4628      	mov	r0, r5
   29c9c:	f7ea fd16 	bl	146cc <sys_mutex_unlock>
}
   29ca0:	4620      	mov	r0, r4
   29ca2:	b003      	add	sp, #12
   29ca4:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   29ca6:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   29caa:	e7f6      	b.n	29c9a <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   29cac:	f06f 0415 	mvn.w	r4, #21
   29cb0:	e7f6      	b.n	29ca0 <mqtt_disconnect+0x40>

00029cb2 <mqtt_ping>:
{
   29cb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   29cb4:	4605      	mov	r5, r0
   29cb6:	b320      	cbz	r0, 29d02 <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   29cb8:	f7ff febf 	bl	29a3a <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   29cbc:	4669      	mov	r1, sp
   29cbe:	4628      	mov	r0, r5
   29cc0:	f7ff fead 	bl	29a1e <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   29cc4:	69ab      	ldr	r3, [r5, #24]
   29cc6:	075b      	lsls	r3, r3, #29
   29cc8:	d518      	bpl.n	29cfc <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   29cca:	4668      	mov	r0, sp
   29ccc:	f7ea fcba 	bl	14644 <ping_request_encode>
	if (err_code < 0) {
   29cd0:	1e04      	subs	r4, r0, #0
   29cd2:	db0d      	blt.n	29cf0 <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   29cd4:	e9dd 1200 	ldrd	r1, r2, [sp]
   29cd8:	4628      	mov	r0, r5
   29cda:	1a52      	subs	r2, r2, r1
   29cdc:	f7ff ff0e 	bl	29afc <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   29ce0:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   29ce4:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   29ce6:	2b7f      	cmp	r3, #127	; 0x7f
   29ce8:	d002      	beq.n	29cf0 <mqtt_ping+0x3e>
		client->unacked_ping++;
   29cea:	3301      	adds	r3, #1
   29cec:	f885 305f 	strb.w	r3, [r5, #95]	; 0x5f
   29cf0:	4628      	mov	r0, r5
   29cf2:	f7ea fceb 	bl	146cc <sys_mutex_unlock>
}
   29cf6:	4620      	mov	r0, r4
   29cf8:	b003      	add	sp, #12
   29cfa:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   29cfc:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   29d00:	e7f6      	b.n	29cf0 <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   29d02:	f06f 0415 	mvn.w	r4, #21
   29d06:	e7f6      	b.n	29cf6 <mqtt_ping+0x44>

00029d08 <mqtt_live>:
{
   29d08:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   29d0a:	4606      	mov	r6, r0
   29d0c:	b300      	cbz	r0, 29d50 <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   29d0e:	f7ff fe94 	bl	29a3a <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   29d12:	6974      	ldr	r4, [r6, #20]
   29d14:	f7ff fe75 	bl	29a02 <k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   29d18:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   29d1a:	f8b6 405c 	ldrh.w	r4, [r6, #92]	; 0x5c

	if (diff < 0) {
		return 0;
   29d1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   29d22:	b19c      	cbz	r4, 29d4c <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   29d24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   29d28:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   29d2a:	4284      	cmp	r4, r0
   29d2c:	d80d      	bhi.n	29d4a <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   29d2e:	4630      	mov	r0, r6
   29d30:	f7ff ffbf 	bl	29cb2 <mqtt_ping>
		ping_sent = true;
   29d34:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   29d36:	4605      	mov	r5, r0
	int ret = sys_mutex_unlock(&client->internal.mutex);
   29d38:	4630      	mov	r0, r6
   29d3a:	f7ea fcc7 	bl	146cc <sys_mutex_unlock>
		return -EAGAIN;
   29d3e:	2c00      	cmp	r4, #0
   29d40:	bf08      	it	eq
   29d42:	f06f 050a 	mvneq.w	r5, #10
}
   29d46:	4628      	mov	r0, r5
   29d48:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   29d4a:	2400      	movs	r4, #0
	int err_code = 0;
   29d4c:	4625      	mov	r5, r4
   29d4e:	e7f3      	b.n	29d38 <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   29d50:	f06f 0515 	mvn.w	r5, #21
   29d54:	e7f7      	b.n	29d46 <mqtt_live+0x3e>

00029d56 <mqtt_keepalive_time_left>:
{
   29d56:	b538      	push	{r3, r4, r5, lr}
   29d58:	4604      	mov	r4, r0
	uint32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   29d5a:	6945      	ldr	r5, [r0, #20]
   29d5c:	f7ff fe51 	bl	29a02 <k_uptime_get>
	uint32_t keepalive_ms = 1000U * client->keepalive;
   29d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   29d64:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
	int32_t diff = k_uptime_get_32() - last_activity;
   29d68:	1b42      	subs	r2, r0, r5
   29d6a:	434b      	muls	r3, r1
		return 0;
   29d6c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (client->keepalive == 0) {
   29d70:	b119      	cbz	r1, 29d7a <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   29d72:	4293      	cmp	r3, r2
   29d74:	d904      	bls.n	29d80 <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   29d76:	1a98      	subs	r0, r3, r2
}
   29d78:	bd38      	pop	{r3, r4, r5, pc}
		return UINT32_MAX;
   29d7a:	f04f 30ff 	mov.w	r0, #4294967295
   29d7e:	e7fb      	b.n	29d78 <mqtt_keepalive_time_left+0x22>
		return 0;
   29d80:	2000      	movs	r0, #0
   29d82:	e7f9      	b.n	29d78 <mqtt_keepalive_time_left+0x22>

00029d84 <mqtt_input>:
{
   29d84:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   29d86:	4605      	mov	r5, r0
   29d88:	b1d0      	cbz	r0, 29dc0 <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   29d8a:	f7ff fe56 	bl	29a3a <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   29d8e:	69ab      	ldr	r3, [r5, #24]
   29d90:	079b      	lsls	r3, r3, #30
   29d92:	d50f      	bpl.n	29db4 <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   29d94:	6a2b      	ldr	r3, [r5, #32]
   29d96:	b983      	cbnz	r3, 29dba <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   29d98:	4628      	mov	r0, r5
   29d9a:	f7ff fcf0 	bl	2977e <mqtt_handle_rx>
	if (err_code < 0) {
   29d9e:	1e04      	subs	r4, r0, #0
   29da0:	da03      	bge.n	29daa <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   29da2:	4621      	mov	r1, r4
   29da4:	4628      	mov	r0, r5
   29da6:	f7ff fe61 	bl	29a6c <client_disconnect.constprop.0>
	int ret = sys_mutex_unlock(&client->internal.mutex);
   29daa:	4628      	mov	r0, r5
   29dac:	f7ea fc8e 	bl	146cc <sys_mutex_unlock>
}
   29db0:	4620      	mov	r0, r4
   29db2:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   29db4:	f06f 040c 	mvn.w	r4, #12
   29db8:	e7f7      	b.n	29daa <mqtt_input+0x26>
		return -EBUSY;
   29dba:	f06f 040f 	mvn.w	r4, #15
   29dbe:	e7f4      	b.n	29daa <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   29dc0:	f06f 0415 	mvn.w	r4, #21
   29dc4:	e7f4      	b.n	29db0 <mqtt_input+0x2c>

00029dc6 <mqtt_read_publish_payload>:

int mqtt_read_publish_payload(struct mqtt_client *client, void *buffer,
			      size_t length)
{
	return read_publish_payload(client, buffer, length, false);
   29dc6:	2300      	movs	r3, #0
   29dc8:	f7ff be6a 	b.w	29aa0 <read_publish_payload>

00029dcc <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29dcc:	6843      	ldr	r3, [r0, #4]
}
   29dce:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29dd0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   29dd2:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   29dd4:	600b      	str	r3, [r1, #0]
}
   29dd6:	4770      	bx	lr

00029dd8 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29dd8:	6843      	ldr	r3, [r0, #4]
   29dda:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   29ddc:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   29dde:	4042      	eors	r2, r0
   29de0:	400a      	ands	r2, r1
   29de2:	4042      	eors	r2, r0
    p_reg->OUT = value;
   29de4:	605a      	str	r2, [r3, #4]
}
   29de6:	2000      	movs	r0, #0
   29de8:	4770      	bx	lr

00029dea <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29dea:	6843      	ldr	r3, [r0, #4]
}
   29dec:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29dee:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   29df0:	6099      	str	r1, [r3, #8]
}
   29df2:	4770      	bx	lr

00029df4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29df4:	6843      	ldr	r3, [r0, #4]
}
   29df6:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29df8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   29dfa:	60d9      	str	r1, [r3, #12]
}
   29dfc:	4770      	bx	lr

00029dfe <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29dfe:	6843      	ldr	r3, [r0, #4]
}
   29e00:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29e02:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   29e04:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   29e06:	4059      	eors	r1, r3
    p_reg->OUT = value;
   29e08:	6051      	str	r1, [r2, #4]
}
   29e0a:	4770      	bx	lr

00029e0c <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   29e0c:	68c3      	ldr	r3, [r0, #12]
{
   29e0e:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   29e10:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   29e12:	b158      	cbz	r0, 29e2c <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29e14:	2400      	movs	r4, #0
   29e16:	4281      	cmp	r1, r0
   29e18:	d113      	bne.n	29e42 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   29e1a:	6808      	ldr	r0, [r1, #0]
   29e1c:	b95c      	cbnz	r4, 29e36 <gpio_nrfx_manage_callback+0x2a>
   29e1e:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   29e20:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   29e22:	42a1      	cmp	r1, r4
   29e24:	d100      	bne.n	29e28 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   29e26:	6098      	str	r0, [r3, #8]
	parent->next = child;
   29e28:	2000      	movs	r0, #0
   29e2a:	6008      	str	r0, [r1, #0]
	if (set) {
   29e2c:	b972      	cbnz	r2, 29e4c <gpio_nrfx_manage_callback+0x40>
	return 0;
   29e2e:	2000      	movs	r0, #0
}
   29e30:	bd30      	pop	{r4, r5, pc}
   29e32:	4628      	mov	r0, r5
   29e34:	e7ef      	b.n	29e16 <gpio_nrfx_manage_callback+0xa>
   29e36:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   29e38:	6898      	ldr	r0, [r3, #8]
   29e3a:	4281      	cmp	r1, r0
	list->tail = node;
   29e3c:	bf08      	it	eq
   29e3e:	609c      	streq	r4, [r3, #8]
}
   29e40:	e7f2      	b.n	29e28 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   29e42:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29e44:	4604      	mov	r4, r0
   29e46:	2d00      	cmp	r5, #0
   29e48:	d1f3      	bne.n	29e32 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   29e4a:	b13a      	cbz	r2, 29e5c <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   29e4c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   29e4e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   29e50:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   29e52:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   29e54:	2800      	cmp	r0, #0
   29e56:	d1ea      	bne.n	29e2e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   29e58:	6099      	str	r1, [r3, #8]
}
   29e5a:	e7e9      	b.n	29e30 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   29e5c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   29e60:	e7e6      	b.n	29e30 <gpio_nrfx_manage_callback+0x24>

00029e62 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   29e62:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   29e64:	6843      	ldr	r3, [r0, #4]
	if (data->int_driven->disable_tx_irq &&
   29e66:	68d2      	ldr	r2, [r2, #12]
	return config->uarte_regs;
   29e68:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   29e6a:	7b91      	ldrb	r1, [r2, #14]
   29e6c:	b159      	cbz	r1, 29e86 <uarte_nrfx_isr_int+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29e6e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   29e72:	b141      	cbz	r1, 29e86 <uarte_nrfx_isr_int+0x24>
    p_reg->INTENCLR = mask;
   29e74:	f44f 7180 	mov.w	r1, #256	; 0x100
   29e78:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29e7c:	2101      	movs	r1, #1
   29e7e:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   29e80:	2300      	movs	r3, #0
   29e82:	7393      	strb	r3, [r2, #14]
		return;
   29e84:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29e86:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   29e8a:	b121      	cbz	r1, 29e96 <uarte_nrfx_isr_int+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29e8c:	2100      	movs	r1, #0
   29e8e:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   29e92:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   29e96:	6813      	ldr	r3, [r2, #0]
   29e98:	b10b      	cbz	r3, 29e9e <uarte_nrfx_isr_int+0x3c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   29e9a:	6851      	ldr	r1, [r2, #4]
   29e9c:	4718      	bx	r3
}
   29e9e:	4770      	bx	lr

00029ea0 <uarte_nrfx_config_get>:
{
   29ea0:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   29ea2:	68c2      	ldr	r2, [r0, #12]
   29ea4:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   29ea8:	e883 0003 	stmia.w	r3, {r0, r1}
}
   29eac:	2000      	movs	r0, #0
   29eae:	4770      	bx	lr

00029eb0 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   29eb0:	6843      	ldr	r3, [r0, #4]
   29eb2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   29eb4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   29eb8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   29ebc:	4770      	bx	lr

00029ebe <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   29ebe:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   29ec0:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   29ec2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29ec4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   29ec8:	b148      	cbz	r0, 29ede <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29eca:	2000      	movs	r0, #0
	*c = data->rx_data;
   29ecc:	7d12      	ldrb	r2, [r2, #20]
   29ece:	700a      	strb	r2, [r1, #0]
   29ed0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   29ed4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29ed8:	2201      	movs	r2, #1
   29eda:	601a      	str	r2, [r3, #0]
	return 0;
   29edc:	4770      	bx	lr
		return -1;
   29ede:	f04f 30ff 	mov.w	r0, #4294967295
}
   29ee2:	4770      	bx	lr

00029ee4 <uarte_nrfx_fifo_fill>:
	return config->uarte_regs;
   29ee4:	6843      	ldr	r3, [r0, #4]
{
   29ee6:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   29ee8:	681c      	ldr	r4, [r3, #0]
{
   29eea:	4605      	mov	r5, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29eec:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   29ef0:	b1a0      	cbz	r0, 29f1c <uarte_nrfx_fifo_fill+0x38>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   29ef2:	68ed      	ldr	r5, [r5, #12]
	if (len > data->int_driven->tx_buff_size) {
   29ef4:	68eb      	ldr	r3, [r5, #12]
   29ef6:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29ef8:	2300      	movs	r3, #0
   29efa:	4290      	cmp	r0, r2
   29efc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   29f00:	bfa8      	it	ge
   29f02:	4610      	movge	r0, r2
   29f04:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   29f08:	68ea      	ldr	r2, [r5, #12]
   29f0a:	4283      	cmp	r3, r0
   29f0c:	6892      	ldr	r2, [r2, #8]
   29f0e:	db06      	blt.n	29f1e <uarte_nrfx_fifo_fill+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29f10:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   29f12:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   29f16:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29f1a:	60a3      	str	r3, [r4, #8]
}
   29f1c:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   29f1e:	5cce      	ldrb	r6, [r1, r3]
   29f20:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   29f22:	3301      	adds	r3, #1
   29f24:	e7f0      	b.n	29f08 <uarte_nrfx_fifo_fill+0x24>

00029f26 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   29f26:	6843      	ldr	r3, [r0, #4]
   29f28:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29f2a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   29f2e:	b153      	cbz	r3, 29f46 <uarte_nrfx_fifo_read+0x20>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   29f30:	68c3      	ldr	r3, [r0, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29f32:	2000      	movs	r0, #0
   29f34:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   29f38:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29f3c:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   29f3e:	7d1b      	ldrb	r3, [r3, #20]
   29f40:	700b      	strb	r3, [r1, #0]
   29f42:	6010      	str	r0, [r2, #0]
}
   29f44:	4770      	bx	lr
	int num_rx = 0;
   29f46:	4618      	mov	r0, r3
}
   29f48:	4770      	bx	lr

00029f4a <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   29f4a:	2100      	movs	r1, #0
   29f4c:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   29f4e:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
   29f50:	68d2      	ldr	r2, [r2, #12]
	return config->uarte_regs;
   29f52:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   29f54:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   29f56:	f44f 7280 	mov.w	r2, #256	; 0x100
   29f5a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   29f5e:	4770      	bx	lr

00029f60 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   29f60:	2201      	movs	r2, #1
   29f62:	68c3      	ldr	r3, [r0, #12]
   29f64:	68db      	ldr	r3, [r3, #12]
   29f66:	739a      	strb	r2, [r3, #14]
}
   29f68:	4770      	bx	lr

00029f6a <uarte_nrfx_irq_tx_ready_complete>:
	return !data->int_driven->disable_tx_irq &&
   29f6a:	68c3      	ldr	r3, [r0, #12]
   29f6c:	68db      	ldr	r3, [r3, #12]
   29f6e:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   29f70:	b94b      	cbnz	r3, 29f86 <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   29f72:	6843      	ldr	r3, [r0, #4]
   29f74:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29f76:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
   29f7a:	b128      	cbz	r0, 29f88 <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   29f7c:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   29f80:	f3c0 2000 	ubfx	r0, r0, #8, #1
   29f84:	4770      	bx	lr
   29f86:	2000      	movs	r0, #0
}
   29f88:	4770      	bx	lr

00029f8a <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   29f8a:	6843      	ldr	r3, [r0, #4]
   29f8c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29f8e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   29f92:	3800      	subs	r0, #0
   29f94:	bf18      	it	ne
   29f96:	2001      	movne	r0, #1
   29f98:	4770      	bx	lr

00029f9a <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   29f9a:	2210      	movs	r2, #16
	return config->uarte_regs;
   29f9c:	6843      	ldr	r3, [r0, #4]
   29f9e:	681b      	ldr	r3, [r3, #0]
   29fa0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   29fa4:	4770      	bx	lr

00029fa6 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   29fa6:	2210      	movs	r2, #16
	return config->uarte_regs;
   29fa8:	6843      	ldr	r3, [r0, #4]
   29faa:	681b      	ldr	r3, [r3, #0]
   29fac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   29fb0:	4770      	bx	lr

00029fb2 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   29fb2:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   29fb6:	6843      	ldr	r3, [r0, #4]
   29fb8:	681b      	ldr	r3, [r3, #0]
   29fba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   29fbe:	4770      	bx	lr

00029fc0 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   29fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   29fc4:	6843      	ldr	r3, [r0, #4]
   29fc6:	681b      	ldr	r3, [r3, #0]
   29fc8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   29fcc:	4770      	bx	lr

00029fce <uarte_nrfx_irq_update>:
}
   29fce:	2001      	movs	r0, #1
   29fd0:	4770      	bx	lr

00029fd2 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   29fd2:	68c3      	ldr	r3, [r0, #12]
   29fd4:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   29fd6:	e9c3 1200 	strd	r1, r2, [r3]
}
   29fda:	4770      	bx	lr

00029fdc <uarte_nrfx_irq_is_pending>:
{
   29fdc:	b508      	push	{r3, lr}
	return config->uarte_regs;
   29fde:	6843      	ldr	r3, [r0, #4]
{
   29fe0:	4602      	mov	r2, r0
	return config->uarte_regs;
   29fe2:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   29fe4:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   29fe8:	05db      	lsls	r3, r3, #23
   29fea:	d405      	bmi.n	29ff8 <uarte_nrfx_irq_is_pending+0x1c>
   29fec:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   29ff0:	f010 0010 	ands.w	r0, r0, #16
   29ff4:	d106      	bne.n	2a004 <uarte_nrfx_irq_is_pending+0x28>
}
   29ff6:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   29ff8:	f7ff ffb7 	bl	29f6a <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   29ffc:	2800      	cmp	r0, #0
   29ffe:	d0f5      	beq.n	29fec <uarte_nrfx_irq_is_pending+0x10>
		||
   2a000:	2001      	movs	r0, #1
   2a002:	e7f8      	b.n	29ff6 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   2a004:	4610      	mov	r0, r2
   2a006:	f7ff ffc0 	bl	29f8a <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   2a00a:	3800      	subs	r0, #0
   2a00c:	bf18      	it	ne
   2a00e:	2001      	movne	r0, #1
   2a010:	e7f1      	b.n	29ff6 <uarte_nrfx_irq_is_pending+0x1a>

0002a012 <uarte_nrfx_poll_out>:
{
   2a012:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   2a016:	6843      	ldr	r3, [r0, #4]
{
   2a018:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   2a01c:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2a01e:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   2a020:	f001 f818 	bl	2b054 <k_is_in_isr>
   2a024:	bb98      	cbnz	r0, 2a08e <uarte_nrfx_poll_out+0x7c>
		lock = &data->poll_out_lock;
   2a026:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2a028:	f04f 0801 	mov.w	r8, #1
   2a02c:	f106 0710 	add.w	r7, r6, #16
   2a030:	e8d7 3fef 	ldaex	r3, [r7]
   2a034:	2b00      	cmp	r3, #0
   2a036:	d103      	bne.n	2a040 <uarte_nrfx_poll_out+0x2e>
   2a038:	e8c7 8fe2 	stlex	r2, r8, [r7]
   2a03c:	2a00      	cmp	r2, #0
   2a03e:	d1f7      	bne.n	2a030 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   2a040:	d007      	beq.n	2a052 <uarte_nrfx_poll_out+0x40>
	return z_impl_k_sleep(timeout);
   2a042:	2021      	movs	r0, #33	; 0x21
   2a044:	2100      	movs	r1, #0
   2a046:	3d01      	subs	r5, #1
   2a048:	f7f7 f94e 	bl	212e8 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   2a04c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   2a050:	d1ee      	bne.n	2a030 <uarte_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a052:	2300      	movs	r3, #0
   2a054:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   2a058:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2a05c:	f10d 0307 	add.w	r3, sp, #7
   2a060:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2a064:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a066:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   2a06a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a06e:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a070:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   2a074:	b923      	cbnz	r3, 2a080 <uarte_nrfx_poll_out+0x6e>
   2a076:	2001      	movs	r0, #1
   2a078:	f000 fdb5 	bl	2abe6 <nrfx_busy_wait>
   2a07c:	3d01      	subs	r5, #1
   2a07e:	d1f7      	bne.n	2a070 <uarte_nrfx_poll_out+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a080:	2301      	movs	r3, #1
   2a082:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   2a084:	2300      	movs	r3, #0
   2a086:	6133      	str	r3, [r6, #16]
}
   2a088:	b002      	add	sp, #8
   2a08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   2a08e:	2301      	movs	r3, #1
   2a090:	6133      	str	r3, [r6, #16]
   2a092:	e7de      	b.n	2a052 <uarte_nrfx_poll_out+0x40>

0002a094 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   2a094:	2000      	movs	r0, #0
   2a096:	4770      	bx	lr

0002a098 <entropy_cc310_rng_get_entropy>:
{
   2a098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a09c:	460f      	mov	r7, r1
   2a09e:	4614      	mov	r4, r2
	size_t offset = 0;
   2a0a0:	2600      	movs	r6, #0
	int res = -EINVAL;
   2a0a2:	f06f 0515 	mvn.w	r5, #21
{
   2a0a6:	b0a6      	sub	sp, #152	; 0x98
	while (length > 0) {
   2a0a8:	b91c      	cbnz	r4, 2a0b2 <entropy_cc310_rng_get_entropy+0x1a>
}
   2a0aa:	4628      	mov	r0, r5
   2a0ac:	b026      	add	sp, #152	; 0x98
   2a0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = spm_request_random_number(spm_buf, sizeof(spm_buf),
   2a0b2:	2190      	movs	r1, #144	; 0x90
   2a0b4:	aa01      	add	r2, sp, #4
   2a0b6:	a802      	add	r0, sp, #8
   2a0b8:	f7dd ff9a 	bl	7ff0 <spm_request_random_number>
		if (res < 0) {
   2a0bc:	1e05      	subs	r5, r0, #0
   2a0be:	dbf4      	blt.n	2a0aa <entropy_cc310_rng_get_entropy+0x12>
		if (olen != sizeof(spm_buf)) {
   2a0c0:	9b01      	ldr	r3, [sp, #4]
   2a0c2:	2b90      	cmp	r3, #144	; 0x90
   2a0c4:	d10e      	bne.n	2a0e4 <entropy_cc310_rng_get_entropy+0x4c>
		to_copy = MIN(length, sizeof(spm_buf));
   2a0c6:	2c90      	cmp	r4, #144	; 0x90
   2a0c8:	46a0      	mov	r8, r4
   2a0ca:	bf28      	it	cs
   2a0cc:	f04f 0890 	movcs.w	r8, #144	; 0x90
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a0d0:	19b8      	adds	r0, r7, r6
   2a0d2:	4642      	mov	r2, r8
   2a0d4:	a902      	add	r1, sp, #8
		length -= to_copy;
   2a0d6:	eba4 0408 	sub.w	r4, r4, r8
   2a0da:	f7e2 fd4b 	bl	cb74 <memcpy>
   2a0de:	b2a4      	uxth	r4, r4
		offset += to_copy;
   2a0e0:	4446      	add	r6, r8
   2a0e2:	e7e1      	b.n	2a0a8 <entropy_cc310_rng_get_entropy+0x10>
			return -EINVAL;
   2a0e4:	f06f 0515 	mvn.w	r5, #21
   2a0e8:	e7df      	b.n	2a0aa <entropy_cc310_rng_get_entropy+0x12>

0002a0ea <update_offset>:
{
   2a0ea:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   2a0ec:	4604      	mov	r4, r0
   2a0ee:	b140      	cbz	r0, 2a102 <update_offset+0x18>
   2a0f0:	6803      	ldr	r3, [r0, #0]
   2a0f2:	b133      	cbz	r3, 2a102 <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   2a0f4:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   2a0f6:	4418      	add	r0, r3
   2a0f8:	f7f8 fcb8 	bl	22a6c <strlen>
   2a0fc:	68a3      	ldr	r3, [r4, #8]
   2a0fe:	4418      	add	r0, r3
   2a100:	60a0      	str	r0, [r4, #8]
}
   2a102:	bd10      	pop	{r4, pc}

0002a104 <add_item_to_array>:
    if ((item == NULL) || (array == NULL))
   2a104:	b161      	cbz	r1, 2a120 <add_item_to_array+0x1c>
   2a106:	b160      	cbz	r0, 2a122 <add_item_to_array+0x1e>
    child = array->child;
   2a108:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   2a10a:	b913      	cbnz	r3, 2a112 <add_item_to_array+0xe>
        array->child = item;
   2a10c:	6081      	str	r1, [r0, #8]
}
   2a10e:	2001      	movs	r0, #1
   2a110:	4770      	bx	lr
        while (child->next)
   2a112:	461a      	mov	r2, r3
   2a114:	681b      	ldr	r3, [r3, #0]
   2a116:	2b00      	cmp	r3, #0
   2a118:	d1fb      	bne.n	2a112 <add_item_to_array+0xe>
    prev->next = item;
   2a11a:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   2a11c:	604a      	str	r2, [r1, #4]
   2a11e:	e7f6      	b.n	2a10e <add_item_to_array+0xa>
        return false;
   2a120:	4608      	mov	r0, r1
}
   2a122:	4770      	bx	lr

0002a124 <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   2a124:	4603      	mov	r3, r0
   2a126:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   2a128:	2028      	movs	r0, #40	; 0x28
   2a12a:	4798      	blx	r3
    if (node)
   2a12c:	4604      	mov	r4, r0
   2a12e:	b118      	cbz	r0, 2a138 <cJSON_New_Item.isra.0+0x14>
__ssp_bos_icheck3(memset, void *, int)
   2a130:	2228      	movs	r2, #40	; 0x28
   2a132:	2100      	movs	r1, #0
   2a134:	f7f8 f88a 	bl	2224c <memset>
}
   2a138:	4620      	mov	r0, r4
   2a13a:	bd10      	pop	{r4, pc}

0002a13c <ensure>:
{
   2a13c:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   2a13e:	4604      	mov	r4, r0
   2a140:	b1b8      	cbz	r0, 2a172 <ensure+0x36>
   2a142:	6805      	ldr	r5, [r0, #0]
   2a144:	b165      	cbz	r5, 2a160 <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   2a146:	6842      	ldr	r2, [r0, #4]
   2a148:	b112      	cbz	r2, 2a150 <ensure+0x14>
   2a14a:	6883      	ldr	r3, [r0, #8]
   2a14c:	429a      	cmp	r2, r3
   2a14e:	d910      	bls.n	2a172 <ensure+0x36>
    if (needed > INT_MAX)
   2a150:	2900      	cmp	r1, #0
   2a152:	db0e      	blt.n	2a172 <ensure+0x36>
    needed += p->offset + 1;
   2a154:	68a0      	ldr	r0, [r4, #8]
   2a156:	4401      	add	r1, r0
   2a158:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   2a15a:	429a      	cmp	r2, r3
   2a15c:	d302      	bcc.n	2a164 <ensure+0x28>
        return p->buffer + p->offset;
   2a15e:	4405      	add	r5, r0
}
   2a160:	4628      	mov	r0, r5
   2a162:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   2a164:	6922      	ldr	r2, [r4, #16]
   2a166:	b922      	cbnz	r2, 2a172 <ensure+0x36>
    if (needed > (INT_MAX / 2))
   2a168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   2a16c:	d303      	bcc.n	2a176 <ensure+0x3a>
        if (needed <= INT_MAX)
   2a16e:	2b00      	cmp	r3, #0
   2a170:	da0f      	bge.n	2a192 <ensure+0x56>
        return NULL;
   2a172:	2500      	movs	r5, #0
   2a174:	e7f4      	b.n	2a160 <ensure+0x24>
        newsize = needed + 1;
   2a176:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   2a178:	6a23      	ldr	r3, [r4, #32]
   2a17a:	b16b      	cbz	r3, 2a198 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   2a17c:	4628      	mov	r0, r5
   2a17e:	4631      	mov	r1, r6
   2a180:	4798      	blx	r3
        if (newbuffer == NULL)
   2a182:	4605      	mov	r5, r0
   2a184:	b9b0      	cbnz	r0, 2a1b4 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   2a186:	69e3      	ldr	r3, [r4, #28]
   2a188:	6820      	ldr	r0, [r4, #0]
   2a18a:	4798      	blx	r3
            p->buffer = NULL;
   2a18c:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   2a190:	e7e6      	b.n	2a160 <ensure+0x24>
            newsize = INT_MAX;
   2a192:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   2a196:	e7ef      	b.n	2a178 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   2a198:	4630      	mov	r0, r6
   2a19a:	69a3      	ldr	r3, [r4, #24]
   2a19c:	4798      	blx	r3
        if (!newbuffer)
   2a19e:	4605      	mov	r5, r0
   2a1a0:	2800      	cmp	r0, #0
   2a1a2:	d0f0      	beq.n	2a186 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   2a1a4:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a1a6:	6821      	ldr	r1, [r4, #0]
   2a1a8:	3201      	adds	r2, #1
   2a1aa:	f7e2 fce3 	bl	cb74 <memcpy>
        p->hooks.deallocate(p->buffer);
   2a1ae:	69e3      	ldr	r3, [r4, #28]
   2a1b0:	6820      	ldr	r0, [r4, #0]
   2a1b2:	4798      	blx	r3
    return newbuffer + p->offset;
   2a1b4:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   2a1b6:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   2a1ba:	441d      	add	r5, r3
   2a1bc:	e7d0      	b.n	2a160 <ensure+0x24>

0002a1be <cJSON_Print>:
    return (char*)print(item, true, &global_hooks);
   2a1be:	2101      	movs	r1, #1
   2a1c0:	f7eb b896 	b.w	152f0 <print.constprop.0>

0002a1c4 <cJSON_AddStringToObject>:
{
   2a1c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a1c6:	4605      	mov	r5, r0
    cJSON *string_item = cJSON_CreateString(string);
   2a1c8:	4610      	mov	r0, r2
{
   2a1ca:	9101      	str	r1, [sp, #4]
    cJSON *string_item = cJSON_CreateString(string);
   2a1cc:	f7eb f900 	bl	153d0 <cJSON_CreateString>
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   2a1d0:	2300      	movs	r3, #0
   2a1d2:	4602      	mov	r2, r0
    cJSON *string_item = cJSON_CreateString(string);
   2a1d4:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   2a1d6:	9901      	ldr	r1, [sp, #4]
   2a1d8:	4628      	mov	r0, r5
   2a1da:	f7eb f861 	bl	152a0 <add_item_to_object.constprop.0>
   2a1de:	4605      	mov	r5, r0
   2a1e0:	b918      	cbnz	r0, 2a1ea <cJSON_AddStringToObject+0x26>
    cJSON_Delete(string_item);
   2a1e2:	4620      	mov	r0, r4
   2a1e4:	f7eb f8d0 	bl	15388 <cJSON_Delete>
    return NULL;
   2a1e8:	462c      	mov	r4, r5
}
   2a1ea:	4620      	mov	r0, r4
   2a1ec:	b003      	add	sp, #12
   2a1ee:	bd30      	pop	{r4, r5, pc}

0002a1f0 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   2a1f0:	4668      	mov	r0, sp
   2a1f2:	f020 0107 	bic.w	r1, r0, #7
   2a1f6:	468d      	mov	sp, r1
   2a1f8:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   2a1fa:	f7ee f913 	bl	18424 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2a1fe:	f7e9 fa99 	bl	13734 <_arch_isr_direct_pm>
   2a202:	f7e9 fe0b 	bl	13e1c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   2a206:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2a20a:	4685      	mov	sp, r0
   2a20c:	4770      	bx	lr

0002a20e <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   2a20e:	4668      	mov	r0, sp
   2a210:	f020 0107 	bic.w	r1, r0, #7
   2a214:	468d      	mov	sp, r1
   2a216:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   2a218:	f7ee fcaa 	bl	18b70 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2a21c:	f7e9 fa8a 	bl	13734 <_arch_isr_direct_pm>
   2a220:	f7e9 fdfc 	bl	13e1c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   2a224:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2a228:	4685      	mov	sp, r0
   2a22a:	4770      	bx	lr

0002a22c <trace_task_create>:
{
   2a22c:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   2a22e:	201d      	movs	r0, #29
   2a230:	2200      	movs	r2, #0
   2a232:	2106      	movs	r1, #6
   2a234:	f7e9 fa68 	bl	13708 <z_arm_irq_priority_set>
}
   2a238:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   2a23c:	201d      	movs	r0, #29
   2a23e:	f7e9 ba45 	b.w	136cc <arch_irq_enable>

0002a242 <read_task_create>:
{
   2a242:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   2a244:	201c      	movs	r0, #28
   2a246:	2200      	movs	r2, #0
   2a248:	2106      	movs	r1, #6
   2a24a:	f7e9 fa5d 	bl	13708 <z_arm_irq_priority_set>
}
   2a24e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   2a252:	201c      	movs	r0, #28
   2a254:	f7e9 ba3a 	b.w	136cc <arch_irq_enable>

0002a258 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   2a258:	2000      	movs	r0, #0
   2a25a:	4770      	bx	lr

0002a25c <z_to_nrf_flags>:
{
   2a25c:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   2a25e:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   2a262:	bf18      	it	ne
   2a264:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   2a266:	079a      	lsls	r2, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   2a268:	bf48      	it	mi
   2a26a:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   2a26e:	06db      	lsls	r3, r3, #27
		nrf_flags |= NRF_MSG_TRUNC;
   2a270:	bf48      	it	mi
   2a272:	f040 0020 	orrmi.w	r0, r0, #32
}
   2a276:	4770      	bx	lr

0002a278 <z_to_nrf_family>:
	switch (z_family) {
   2a278:	2806      	cmp	r0, #6
   2a27a:	d80a      	bhi.n	2a292 <z_to_nrf_family+0x1a>
   2a27c:	b198      	cbz	r0, 2a2a6 <z_to_nrf_family+0x2e>
   2a27e:	3801      	subs	r0, #1
   2a280:	2805      	cmp	r0, #5
   2a282:	d810      	bhi.n	2a2a6 <z_to_nrf_family+0x2e>
   2a284:	e8df f000 	tbb	[pc, r0]
   2a288:	0f0d0312 	.word	0x0f0d0312
   2a28c:	0b0f      	.short	0x0b0f
   2a28e:	200a      	movs	r0, #10
   2a290:	4770      	bx	lr
   2a292:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   2a294:	bf14      	ite	ne
   2a296:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   2a29a:	2066      	moveq	r0, #102	; 0x66
   2a29c:	4770      	bx	lr
		return NRF_AF_LOCAL;
   2a29e:	2001      	movs	r0, #1
   2a2a0:	4770      	bx	lr
		return NRF_AF_PACKET;
   2a2a2:	2005      	movs	r0, #5
   2a2a4:	4770      	bx	lr
		return -EAFNOSUPPORT;
   2a2a6:	f06f 0069 	mvn.w	r0, #105	; 0x69
   2a2aa:	4770      	bx	lr
		return NRF_AF_INET;
   2a2ac:	2002      	movs	r0, #2
}
   2a2ae:	4770      	bx	lr

0002a2b0 <z_to_nrf_protocol>:
	switch (proto) {
   2a2b0:	f240 1311 	movw	r3, #273	; 0x111
   2a2b4:	4298      	cmp	r0, r3
   2a2b6:	d023      	beq.n	2a300 <z_to_nrf_protocol+0x50>
   2a2b8:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   2a2bc:	da11      	bge.n	2a2e2 <z_to_nrf_protocol+0x32>
   2a2be:	2811      	cmp	r0, #17
   2a2c0:	d021      	beq.n	2a306 <z_to_nrf_protocol+0x56>
   2a2c2:	dc06      	bgt.n	2a2d2 <z_to_nrf_protocol+0x22>
   2a2c4:	b300      	cbz	r0, 2a308 <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   2a2c6:	2806      	cmp	r0, #6
   2a2c8:	bf14      	ite	ne
   2a2ca:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2a2ce:	2001      	moveq	r0, #1
   2a2d0:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   2a2d2:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2a2d6:	bf14      	ite	ne
   2a2d8:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2a2dc:	f44f 7082 	moveq.w	r0, #260	; 0x104
   2a2e0:	4770      	bx	lr
	switch (proto) {
   2a2e2:	f240 2302 	movw	r3, #514	; 0x202
   2a2e6:	4298      	cmp	r0, r3
   2a2e8:	d00e      	beq.n	2a308 <z_to_nrf_protocol+0x58>
   2a2ea:	f240 2303 	movw	r3, #515	; 0x203
   2a2ee:	4298      	cmp	r0, r3
   2a2f0:	d00a      	beq.n	2a308 <z_to_nrf_protocol+0x58>
   2a2f2:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   2a2f6:	4298      	cmp	r0, r3
   2a2f8:	bf18      	it	ne
   2a2fa:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2a2fe:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   2a300:	f44f 7087 	mov.w	r0, #270	; 0x10e
   2a304:	4770      	bx	lr
	switch (proto) {
   2a306:	2002      	movs	r0, #2
}
   2a308:	4770      	bx	lr

0002a30a <nrf91_socket_is_supported>:
}
   2a30a:	2001      	movs	r0, #1
   2a30c:	4770      	bx	lr

0002a30e <nrf91_bsdlib_socket_offload_init>:
}
   2a30e:	2000      	movs	r0, #0
   2a310:	4770      	bx	lr

0002a312 <nrf91_socket_offload_getsockopt>:
{
   2a312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a316:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   2a318:	2300      	movs	r3, #0
{
   2a31a:	b086      	sub	sp, #24
   2a31c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   2a320:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2a324:	f8d8 3000 	ldr.w	r3, [r8]
{
   2a328:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2a32a:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   2a32c:	f240 2302 	movw	r3, #514	; 0x202
   2a330:	4299      	cmp	r1, r3
{
   2a332:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   2a334:	f100 37ff 	add.w	r7, r0, #4294967295
	switch (z_in_level) {
   2a338:	d005      	beq.n	2a346 <nrf91_socket_offload_getsockopt+0x34>
   2a33a:	dc30      	bgt.n	2a39e <nrf91_socket_offload_getsockopt+0x8c>
   2a33c:	2901      	cmp	r1, #1
   2a33e:	d002      	beq.n	2a346 <nrf91_socket_offload_getsockopt+0x34>
   2a340:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2a344:	d13c      	bne.n	2a3c0 <nrf91_socket_offload_getsockopt+0xae>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   2a346:	4631      	mov	r1, r6
   2a348:	4620      	mov	r0, r4
   2a34a:	aa02      	add	r2, sp, #8
   2a34c:	f7eb fb92 	bl	15a74 <z_to_nrf_optname>
   2a350:	2800      	cmp	r0, #0
   2a352:	db35      	blt.n	2a3c0 <nrf91_socket_offload_getsockopt+0xae>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   2a354:	2c01      	cmp	r4, #1
   2a356:	d126      	bne.n	2a3a6 <nrf91_socket_offload_getsockopt+0x94>
   2a358:	f1a6 0314 	sub.w	r3, r6, #20
   2a35c:	2b01      	cmp	r3, #1
   2a35e:	d822      	bhi.n	2a3a6 <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   2a360:	2308      	movs	r3, #8
   2a362:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   2a364:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2a366:	aa03      	add	r2, sp, #12
   2a368:	4638      	mov	r0, r7
   2a36a:	9200      	str	r2, [sp, #0]
   2a36c:	4621      	mov	r1, r4
   2a36e:	9a02      	ldr	r2, [sp, #8]
   2a370:	f7f4 fa18 	bl	1e7a4 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   2a374:	4607      	mov	r7, r0
   2a376:	b970      	cbnz	r0, 2a396 <nrf91_socket_offload_getsockopt+0x84>
   2a378:	b16d      	cbz	r5, 2a396 <nrf91_socket_offload_getsockopt+0x84>
		*optlen = nrf_optlen;
   2a37a:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   2a37c:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   2a37e:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   2a382:	d108      	bne.n	2a396 <nrf91_socket_offload_getsockopt+0x84>
			if (optname == SO_ERROR) {
   2a384:	2e04      	cmp	r6, #4
   2a386:	d110      	bne.n	2a3aa <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   2a388:	6828      	ldr	r0, [r5, #0]
   2a38a:	f7eb f9c9 	bl	15720 <bsd_os_errno_set>
				*(int *)optval = errno;
   2a38e:	f7ff f80b 	bl	293a8 <__errno>
   2a392:	6803      	ldr	r3, [r0, #0]
   2a394:	602b      	str	r3, [r5, #0]
}
   2a396:	4638      	mov	r0, r7
   2a398:	b006      	add	sp, #24
   2a39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   2a39e:	f240 2303 	movw	r3, #515	; 0x203
   2a3a2:	4299      	cmp	r1, r3
   2a3a4:	e7ce      	b.n	2a344 <nrf91_socket_offload_getsockopt+0x32>
   2a3a6:	462b      	mov	r3, r5
   2a3a8:	e7dd      	b.n	2a366 <nrf91_socket_offload_getsockopt+0x54>
			} else if ((optname == SO_RCVTIMEO) ||
   2a3aa:	3e14      	subs	r6, #20
   2a3ac:	2e01      	cmp	r6, #1
   2a3ae:	d8f2      	bhi.n	2a396 <nrf91_socket_offload_getsockopt+0x84>
				((struct timeval *)optval)->tv_sec =
   2a3b0:	9b04      	ldr	r3, [sp, #16]
   2a3b2:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   2a3b4:	9b05      	ldr	r3, [sp, #20]
   2a3b6:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   2a3b8:	2308      	movs	r3, #8
   2a3ba:	f8c8 3000 	str.w	r3, [r8]
   2a3be:	e7ea      	b.n	2a396 <nrf91_socket_offload_getsockopt+0x84>
	errno = ENOPROTOOPT;
   2a3c0:	f7fe fff2 	bl	293a8 <__errno>
   2a3c4:	236d      	movs	r3, #109	; 0x6d
	return retval;
   2a3c6:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   2a3ca:	6003      	str	r3, [r0, #0]
	return retval;
   2a3cc:	e7e3      	b.n	2a396 <nrf91_socket_offload_getsockopt+0x84>

0002a3ce <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   2a3ce:	3801      	subs	r0, #1
   2a3d0:	f7f4 b994 	b.w	1e6fc <nrf_listen>

0002a3d4 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   2a3d4:	3801      	subs	r0, #1
   2a3d6:	f7f4 b939 	b.w	1e64c <nrf_close>

0002a3da <nrf91_socket_offload_freeaddrinfo>:
{
   2a3da:	b538      	push	{r3, r4, r5, lr}
   2a3dc:	4604      	mov	r4, r0
	while (next != NULL) {
   2a3de:	b904      	cbnz	r4, 2a3e2 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   2a3e0:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   2a3e2:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   2a3e4:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   2a3e6:	f001 f868 	bl	2b4ba <k_free>
		k_free(this);
   2a3ea:	4620      	mov	r0, r4
   2a3ec:	f001 f865 	bl	2b4ba <k_free>
		next = next->ai_next;
   2a3f0:	462c      	mov	r4, r5
   2a3f2:	e7f4      	b.n	2a3de <nrf91_socket_offload_freeaddrinfo+0x4>

0002a3f4 <z_to_nrf_addrinfo_hints>:
{
   2a3f4:	b538      	push	{r3, r4, r5, lr}
   2a3f6:	460c      	mov	r4, r1
   2a3f8:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   2a3fa:	221c      	movs	r2, #28
   2a3fc:	2100      	movs	r1, #0
   2a3fe:	1d20      	adds	r0, r4, #4
   2a400:	f7f7 ff24 	bl	2224c <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   2a404:	2300      	movs	r3, #0
   2a406:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   2a408:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   2a40a:	2b03      	cmp	r3, #3
   2a40c:	d003      	beq.n	2a416 <z_to_nrf_addrinfo_hints+0x22>
   2a40e:	2b04      	cmp	r3, #4
   2a410:	bf08      	it	eq
   2a412:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   2a416:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   2a418:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   2a41a:	f7ff ff2d 	bl	2a278 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   2a41e:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   2a422:	d00b      	beq.n	2a43c <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   2a424:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   2a426:	6928      	ldr	r0, [r5, #16]
   2a428:	f7ff ff42 	bl	2a2b0 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2a42c:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   2a430:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2a432:	d003      	beq.n	2a43c <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   2a434:	69e8      	ldr	r0, [r5, #28]
   2a436:	b108      	cbz	r0, 2a43c <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   2a438:	61a0      	str	r0, [r4, #24]
	return 0;
   2a43a:	2000      	movs	r0, #0
}
   2a43c:	bd38      	pop	{r3, r4, r5, pc}

0002a43e <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   2a43e:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   2a440:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   2a442:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   2a444:	4603      	mov	r3, r0
{
   2a446:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   2a448:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a44c:	f101 0420 	add.w	r4, r1, #32
   2a450:	f101 0210 	add.w	r2, r1, #16
   2a454:	f852 5b04 	ldr.w	r5, [r2], #4
   2a458:	42a2      	cmp	r2, r4
   2a45a:	f843 5b04 	str.w	r5, [r3], #4
   2a45e:	d1f9      	bne.n	2a454 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   2a460:	6a0b      	ldr	r3, [r1, #32]
   2a462:	7503      	strb	r3, [r0, #20]
}
   2a464:	bd30      	pop	{r4, r5, pc}

0002a466 <nrf91_socket_offload_recvfrom>:
{
   2a466:	b5f0      	push	{r4, r5, r6, r7, lr}
	int sd = OBJ_TO_SD(obj);
   2a468:	1e45      	subs	r5, r0, #1
{
   2a46a:	b08f      	sub	sp, #60	; 0x3c
   2a46c:	4618      	mov	r0, r3
   2a46e:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   2a472:	9203      	str	r2, [sp, #12]
   2a474:	f7ff fef2 	bl	2a25c <z_to_nrf_flags>
	if (from == NULL) {
   2a478:	9a03      	ldr	r2, [sp, #12]
   2a47a:	4603      	mov	r3, r0
   2a47c:	b944      	cbnz	r4, 2a490 <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2a47e:	4628      	mov	r0, r5
   2a480:	e9cd 4400 	strd	r4, r4, [sp]
   2a484:	f7f4 f90c 	bl	1e6a0 <nrf_recvfrom>
   2a488:	4605      	mov	r5, r0
}
   2a48a:	4628      	mov	r0, r5
   2a48c:	b00f      	add	sp, #60	; 0x3c
   2a48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   2a490:	2024      	movs	r0, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2a492:	af05      	add	r7, sp, #20
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   2a494:	9004      	str	r0, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2a496:	a804      	add	r0, sp, #16
   2a498:	9001      	str	r0, [sp, #4]
   2a49a:	9700      	str	r7, [sp, #0]
   2a49c:	4628      	mov	r0, r5
   2a49e:	f7f4 f8ff 	bl	1e6a0 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   2a4a2:	9b06      	ldr	r3, [sp, #24]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2a4a4:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   2a4a6:	2b02      	cmp	r3, #2
   2a4a8:	d109      	bne.n	2a4be <nrf91_socket_offload_recvfrom+0x58>
	ptr->sin_port = nrf_in->sin_port;
   2a4aa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2a4ae:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   2a4b0:	2301      	movs	r3, #1
   2a4b2:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2a4b4:	9b08      	ldr	r3, [sp, #32]
   2a4b6:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   2a4b8:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   2a4ba:	6033      	str	r3, [r6, #0]
	return retval;
   2a4bc:	e7e5      	b.n	2a48a <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   2a4be:	2b0a      	cmp	r3, #10
   2a4c0:	d1e3      	bne.n	2a48a <nrf91_socket_offload_recvfrom+0x24>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   2a4c2:	4639      	mov	r1, r7
   2a4c4:	4620      	mov	r0, r4
   2a4c6:	f7ff ffba 	bl	2a43e <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   2a4ca:	2318      	movs	r3, #24
   2a4cc:	e7f5      	b.n	2a4ba <nrf91_socket_offload_recvfrom+0x54>

0002a4ce <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   2a4ce:	2300      	movs	r3, #0
{
   2a4d0:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   2a4d2:	e9cd 3300 	strd	r3, r3, [sp]
   2a4d6:	f7ff ffc6 	bl	2a466 <nrf91_socket_offload_recvfrom>
}
   2a4da:	b003      	add	sp, #12
   2a4dc:	f85d fb04 	ldr.w	pc, [sp], #4

0002a4e0 <nrf91_socket_offload_getaddrinfo>:
{
   2a4e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a4e4:	4614      	mov	r4, r2
   2a4e6:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   2a4e8:	2100      	movs	r1, #0
{
   2a4ea:	b093      	sub	sp, #76	; 0x4c
   2a4ec:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   2a4ee:	2220      	movs	r2, #32
   2a4f0:	a802      	add	r0, sp, #8
{
   2a4f2:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   2a4f4:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   2a4f6:	f7f7 fea9 	bl	2224c <memset>
	if (hints != NULL) {
   2a4fa:	b194      	cbz	r4, 2a522 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   2a4fc:	4620      	mov	r0, r4
   2a4fe:	a902      	add	r1, sp, #8
   2a500:	f7ff ff78 	bl	2a3f4 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   2a504:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   2a508:	f000 80d0 	beq.w	2a6ac <nrf91_socket_offload_getaddrinfo+0x1cc>
		} else if (error == -EAFNOSUPPORT) {
   2a50c:	306a      	adds	r0, #106	; 0x6a
   2a50e:	f000 80d0 	beq.w	2a6b2 <nrf91_socket_offload_getaddrinfo+0x1d2>
		if (hints->ai_next != NULL) {
   2a512:	6820      	ldr	r0, [r4, #0]
   2a514:	b120      	cbz	r0, 2a520 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   2a516:	ac0a      	add	r4, sp, #40	; 0x28
   2a518:	4621      	mov	r1, r4
   2a51a:	f7ff ff6b 	bl	2a3f4 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   2a51e:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   2a520:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   2a522:	4628      	mov	r0, r5
   2a524:	4622      	mov	r2, r4
   2a526:	4631      	mov	r1, r6
   2a528:	ab01      	add	r3, sp, #4
   2a52a:	f7f4 f957 	bl	1e7dc <nrf_getaddrinfo>
	if (retval != 0) {
   2a52e:	4605      	mov	r5, r0
   2a530:	b300      	cbz	r0, 2a574 <nrf91_socket_offload_getaddrinfo+0x94>
	switch (nrf_error) {
   2a532:	282f      	cmp	r0, #47	; 0x2f
   2a534:	f000 80c0 	beq.w	2a6b8 <nrf91_socket_offload_getaddrinfo+0x1d8>
   2a538:	dc0c      	bgt.n	2a554 <nrf91_socket_offload_getaddrinfo+0x74>
   2a53a:	280c      	cmp	r0, #12
   2a53c:	f000 80bf 	beq.w	2a6be <nrf91_socket_offload_getaddrinfo+0x1de>
		return DNS_EAI_AGAIN;
   2a540:	2823      	cmp	r0, #35	; 0x23
   2a542:	bf14      	ite	ne
   2a544:	f06f 050a 	mvnne.w	r5, #10
   2a548:	f06f 0502 	mvneq.w	r5, #2
}
   2a54c:	4628      	mov	r0, r5
   2a54e:	b013      	add	sp, #76	; 0x4c
   2a550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   2a554:	2833      	cmp	r0, #51	; 0x33
   2a556:	d006      	beq.n	2a566 <nrf91_socket_offload_getaddrinfo+0x86>
		return DNS_EAI_INPROGRESS;
   2a558:	2873      	cmp	r0, #115	; 0x73
   2a55a:	bf14      	ite	ne
   2a55c:	f06f 050a 	mvnne.w	r5, #10
   2a560:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   2a564:	e7f2      	b.n	2a54c <nrf91_socket_offload_getaddrinfo+0x6c>
		errno = ENETUNREACH;
   2a566:	f7fe ff1f 	bl	293a8 <__errno>
   2a56a:	2372      	movs	r3, #114	; 0x72
		return DNS_EAI_SYSTEM;
   2a56c:	f06f 050a 	mvn.w	r5, #10
		errno = ENETUNREACH;
   2a570:	6003      	str	r3, [r0, #0]
   2a572:	e7eb      	b.n	2a54c <nrf91_socket_offload_getaddrinfo+0x6c>
	struct zsock_addrinfo *latest_z_res = NULL;
   2a574:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   2a576:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   2a578:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   2a57a:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   2a57c:	b91e      	cbnz	r6, 2a586 <nrf91_socket_offload_getaddrinfo+0xa6>
	nrf_freeaddrinfo(nrf_res);
   2a57e:	9801      	ldr	r0, [sp, #4]
   2a580:	f7f4 f92e 	bl	1e7e0 <nrf_freeaddrinfo>
	return retval;
   2a584:	e7e2      	b.n	2a54c <nrf91_socket_offload_getaddrinfo+0x6c>
					k_malloc(sizeof(struct zsock_addrinfo));
   2a586:	2050      	movs	r0, #80	; 0x50
   2a588:	f7f7 fac0 	bl	21b0c <k_malloc>
		if (next_z_res == NULL) {
   2a58c:	4604      	mov	r4, r0
   2a58e:	2800      	cmp	r0, #0
   2a590:	f000 8081 	beq.w	2a696 <nrf91_socket_offload_getaddrinfo+0x1b6>
	family = nrf_to_z_family(nrf_in->ai_family);
   2a594:	6871      	ldr	r1, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2a596:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   2a598:	290a      	cmp	r1, #10
	z_out->ai_next = NULL;
   2a59a:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   2a59e:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   2a5a2:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2a5a6:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   2a5a8:	dc23      	bgt.n	2a5f2 <nrf91_socket_offload_getaddrinfo+0x112>
   2a5aa:	2900      	cmp	r1, #0
   2a5ac:	dd23      	ble.n	2a5f6 <nrf91_socket_offload_getaddrinfo+0x116>
   2a5ae:	1e4b      	subs	r3, r1, #1
   2a5b0:	2b09      	cmp	r3, #9
   2a5b2:	d820      	bhi.n	2a5f6 <nrf91_socket_offload_getaddrinfo+0x116>
   2a5b4:	e8df f003 	tbb	[pc, r3]
   2a5b8:	1f1f2905 	.word	0x1f1f2905
   2a5bc:	1f1f1f25 	.word	0x1f1f1f25
   2a5c0:	271f      	.short	0x271f
		return AF_LOCAL;
   2a5c2:	2306      	movs	r3, #6
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2a5c4:	68f2      	ldr	r2, [r6, #12]
	z_out->ai_family = family;
   2a5c6:	60a3      	str	r3, [r4, #8]
	switch (proto) {
   2a5c8:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   2a5cc:	d04b      	beq.n	2a666 <nrf91_socket_offload_getaddrinfo+0x186>
   2a5ce:	dc26      	bgt.n	2a61e <nrf91_socket_offload_getaddrinfo+0x13e>
   2a5d0:	2a02      	cmp	r2, #2
   2a5d2:	d04c      	beq.n	2a66e <nrf91_socket_offload_getaddrinfo+0x18e>
   2a5d4:	dc1d      	bgt.n	2a612 <nrf91_socket_offload_getaddrinfo+0x132>
   2a5d6:	b372      	cbz	r2, 2a636 <nrf91_socket_offload_getaddrinfo+0x156>
   2a5d8:	2a01      	cmp	r2, #1
   2a5da:	d04a      	beq.n	2a672 <nrf91_socket_offload_getaddrinfo+0x192>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2a5dc:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   2a5e0:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   2a5e2:	2300      	movs	r3, #0
   2a5e4:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   2a5e6:	4620      	mov	r0, r4
   2a5e8:	f000 ff67 	bl	2b4ba <k_free>
			retval = DNS_EAI_SOCKTYPE;
   2a5ec:	f06f 0506 	mvn.w	r5, #6
   2a5f0:	e053      	b.n	2a69a <nrf91_socket_offload_getaddrinfo+0x1ba>
	switch (nrf_family) {
   2a5f2:	2966      	cmp	r1, #102	; 0x66
   2a5f4:	d00b      	beq.n	2a60e <nrf91_socket_offload_getaddrinfo+0x12e>
			k_free(next_z_res);
   2a5f6:	4620      	mov	r0, r4
   2a5f8:	f000 ff5f 	bl	2b4ba <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   2a5fc:	f06f 0508 	mvn.w	r5, #8
   2a600:	e04b      	b.n	2a69a <nrf91_socket_offload_getaddrinfo+0x1ba>
		return AF_PACKET;
   2a602:	2303      	movs	r3, #3
   2a604:	e7de      	b.n	2a5c4 <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_INET6;
   2a606:	2302      	movs	r3, #2
   2a608:	e7dc      	b.n	2a5c4 <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (nrf_family) {
   2a60a:	2301      	movs	r3, #1
   2a60c:	e7da      	b.n	2a5c4 <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_LTE;
   2a60e:	460b      	mov	r3, r1
   2a610:	e7d8      	b.n	2a5c4 <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (proto) {
   2a612:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   2a616:	d1e1      	bne.n	2a5dc <nrf91_socket_offload_getaddrinfo+0xfc>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2a618:	f44f 7381 	mov.w	r3, #258	; 0x102
   2a61c:	e025      	b.n	2a66a <nrf91_socket_offload_getaddrinfo+0x18a>
	switch (proto) {
   2a61e:	f240 2302 	movw	r3, #514	; 0x202
   2a622:	429a      	cmp	r2, r3
   2a624:	d007      	beq.n	2a636 <nrf91_socket_offload_getaddrinfo+0x156>
   2a626:	f240 2303 	movw	r3, #515	; 0x203
   2a62a:	429a      	cmp	r2, r3
   2a62c:	d003      	beq.n	2a636 <nrf91_socket_offload_getaddrinfo+0x156>
   2a62e:	f240 2301 	movw	r3, #513	; 0x201
   2a632:	429a      	cmp	r2, r3
   2a634:	d1d2      	bne.n	2a5dc <nrf91_socket_offload_getaddrinfo+0xfc>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2a636:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   2a638:	2902      	cmp	r1, #2
   2a63a:	d11c      	bne.n	2a676 <nrf91_socket_offload_getaddrinfo+0x196>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   2a63c:	2008      	movs	r0, #8
   2a63e:	f7f7 fa65 	bl	21b0c <k_malloc>
   2a642:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   2a644:	b320      	cbz	r0, 2a690 <nrf91_socket_offload_getaddrinfo+0x1b0>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   2a646:	2308      	movs	r3, #8
   2a648:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   2a64a:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   2a64c:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2a64e:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   2a650:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   2a652:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2a654:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   2a656:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   2a658:	f1b8 0f00 	cmp.w	r8, #0
   2a65c:	d123      	bne.n	2a6a6 <nrf91_socket_offload_getaddrinfo+0x1c6>
			*res = next_z_res;
   2a65e:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   2a660:	46a0      	mov	r8, r4
   2a662:	69f6      	ldr	r6, [r6, #28]
   2a664:	e78a      	b.n	2a57c <nrf91_socket_offload_getaddrinfo+0x9c>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2a666:	f240 1311 	movw	r3, #273	; 0x111
   2a66a:	6123      	str	r3, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   2a66c:	e7e4      	b.n	2a638 <nrf91_socket_offload_getaddrinfo+0x158>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2a66e:	2311      	movs	r3, #17
   2a670:	e7fb      	b.n	2a66a <nrf91_socket_offload_getaddrinfo+0x18a>
   2a672:	2306      	movs	r3, #6
   2a674:	e7f9      	b.n	2a66a <nrf91_socket_offload_getaddrinfo+0x18a>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   2a676:	290a      	cmp	r1, #10
   2a678:	d1b5      	bne.n	2a5e6 <nrf91_socket_offload_getaddrinfo+0x106>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   2a67a:	2018      	movs	r0, #24
   2a67c:	f7f7 fa46 	bl	21b0c <k_malloc>
   2a680:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   2a682:	b128      	cbz	r0, 2a690 <nrf91_socket_offload_getaddrinfo+0x1b0>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2a684:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   2a686:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2a688:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   2a68a:	f7ff fed8 	bl	2a43e <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   2a68e:	e7e3      	b.n	2a658 <nrf91_socket_offload_getaddrinfo+0x178>
			k_free(next_z_res);
   2a690:	4620      	mov	r0, r4
   2a692:	f000 ff12 	bl	2b4ba <k_free>
			retval = DNS_EAI_MEMORY;
   2a696:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   2a69a:	6838      	ldr	r0, [r7, #0]
   2a69c:	f7ff fe9d 	bl	2a3da <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   2a6a0:	2300      	movs	r3, #0
   2a6a2:	603b      	str	r3, [r7, #0]
   2a6a4:	e76b      	b.n	2a57e <nrf91_socket_offload_getaddrinfo+0x9e>
			latest_z_res->ai_next = next_z_res;
   2a6a6:	f8c8 4000 	str.w	r4, [r8]
   2a6aa:	e7d9      	b.n	2a660 <nrf91_socket_offload_getaddrinfo+0x180>
			return DNS_EAI_SOCKTYPE;
   2a6ac:	f06f 0506 	mvn.w	r5, #6
   2a6b0:	e74c      	b.n	2a54c <nrf91_socket_offload_getaddrinfo+0x6c>
			return DNS_EAI_ADDRFAMILY;
   2a6b2:	f06f 0508 	mvn.w	r5, #8
   2a6b6:	e749      	b.n	2a54c <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_NONAME;
   2a6b8:	f06f 0501 	mvn.w	r5, #1
   2a6bc:	e746      	b.n	2a54c <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_MEMORY;
   2a6be:	f06f 0509 	mvn.w	r5, #9
   2a6c2:	e743      	b.n	2a54c <nrf91_socket_offload_getaddrinfo+0x6c>

0002a6c4 <z_to_nrf_ipv6>:
{
   2a6c4:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   2a6c6:	2124      	movs	r1, #36	; 0x24
   2a6c8:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   2a6ca:	8841      	ldrh	r1, [r0, #2]
{
   2a6cc:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   2a6ce:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   2a6d0:	210a      	movs	r1, #10
{
   2a6d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   2a6d4:	6059      	str	r1, [r3, #4]
   2a6d6:	1d04      	adds	r4, r0, #4
   2a6d8:	f103 0610 	add.w	r6, r3, #16
   2a6dc:	f100 0714 	add.w	r7, r0, #20
   2a6e0:	4635      	mov	r5, r6
   2a6e2:	6820      	ldr	r0, [r4, #0]
   2a6e4:	6861      	ldr	r1, [r4, #4]
   2a6e6:	3408      	adds	r4, #8
   2a6e8:	c503      	stmia	r5!, {r0, r1}
   2a6ea:	42bc      	cmp	r4, r7
   2a6ec:	462e      	mov	r6, r5
   2a6ee:	d1f7      	bne.n	2a6e0 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   2a6f0:	7d12      	ldrb	r2, [r2, #20]
   2a6f2:	621a      	str	r2, [r3, #32]
}
   2a6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a6f6 <nrf91_socket_offload_sendto>:
{
   2a6f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a6fa:	b08e      	sub	sp, #56	; 0x38
   2a6fc:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2a6fe:	460e      	mov	r6, r1
   2a700:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   2a702:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   2a704:	b974      	cbnz	r4, 2a724 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2a706:	4618      	mov	r0, r3
   2a708:	9203      	str	r2, [sp, #12]
   2a70a:	f7ff fda7 	bl	2a25c <z_to_nrf_flags>
   2a70e:	4603      	mov	r3, r0
   2a710:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2a714:	4631      	mov	r1, r6
   2a716:	4628      	mov	r0, r5
   2a718:	9a03      	ldr	r2, [sp, #12]
   2a71a:	f7f3 ffa5 	bl	1e668 <nrf_sendto>
}
   2a71e:	b00e      	add	sp, #56	; 0x38
   2a720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET) {
   2a724:	8823      	ldrh	r3, [r4, #0]
   2a726:	9203      	str	r2, [sp, #12]
   2a728:	2b01      	cmp	r3, #1
   2a72a:	d111      	bne.n	2a750 <nrf91_socket_offload_sendto+0x5a>
	nrf_out->sin_port = ptr->sin_port;
   2a72c:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2a72e:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   2a730:	f8ad 301c 	strh.w	r3, [sp, #28]
	nrf_out->sin_family = NRF_AF_INET;
   2a734:	2302      	movs	r3, #2
   2a736:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2a738:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2a73a:	4638      	mov	r0, r7
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2a73c:	f88d 1014 	strb.w	r1, [sp, #20]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2a740:	9308      	str	r3, [sp, #32]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2a742:	f7ff fd8b 	bl	2a25c <z_to_nrf_flags>
   2a746:	9101      	str	r1, [sp, #4]
   2a748:	a905      	add	r1, sp, #20
   2a74a:	4603      	mov	r3, r0
   2a74c:	9100      	str	r1, [sp, #0]
   2a74e:	e7e1      	b.n	2a714 <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   2a750:	2b02      	cmp	r3, #2
   2a752:	d10d      	bne.n	2a770 <nrf91_socket_offload_sendto+0x7a>
		z_to_nrf_ipv6(to, &ipv6);
   2a754:	f10d 0814 	add.w	r8, sp, #20
   2a758:	4641      	mov	r1, r8
   2a75a:	4620      	mov	r0, r4
   2a75c:	f7ff ffb2 	bl	2a6c4 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2a760:	4638      	mov	r0, r7
   2a762:	f7ff fd7b 	bl	2a25c <z_to_nrf_flags>
   2a766:	2124      	movs	r1, #36	; 0x24
   2a768:	4603      	mov	r3, r0
   2a76a:	e9cd 8100 	strd	r8, r1, [sp]
   2a76e:	e7d1      	b.n	2a714 <nrf91_socket_offload_sendto+0x1e>
	errno = ENOTSUP;
   2a770:	f7fe fe1a 	bl	293a8 <__errno>
   2a774:	2386      	movs	r3, #134	; 0x86
   2a776:	6003      	str	r3, [r0, #0]
	return retval;
   2a778:	f04f 30ff 	mov.w	r0, #4294967295
   2a77c:	e7cf      	b.n	2a71e <nrf91_socket_offload_sendto+0x28>

0002a77e <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2a77e:	2300      	movs	r3, #0
{
   2a780:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2a782:	e9cd 3300 	strd	r3, r3, [sp]
   2a786:	f7ff ffb6 	bl	2a6f6 <nrf91_socket_offload_sendto>
}
   2a78a:	b003      	add	sp, #12
   2a78c:	f85d fb04 	ldr.w	pc, [sp], #4

0002a790 <nrf91_socket_offload_connect>:
{
   2a790:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   2a792:	1e44      	subs	r4, r0, #1
	if (addr->sa_family == AF_INET) {
   2a794:	8808      	ldrh	r0, [r1, #0]
{
   2a796:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   2a798:	2801      	cmp	r0, #1
{
   2a79a:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   2a79c:	d10f      	bne.n	2a7be <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   2a79e:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2a7a0:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2a7a2:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   2a7a6:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2a7a8:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2a7aa:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   2a7ae:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2a7b0:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2a7b2:	4620      	mov	r0, r4
   2a7b4:	a901      	add	r1, sp, #4
   2a7b6:	f7f3 ff8f 	bl	1e6d8 <nrf_connect>
}
   2a7ba:	b00a      	add	sp, #40	; 0x28
   2a7bc:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2a7be:	2802      	cmp	r0, #2
   2a7c0:	d105      	bne.n	2a7ce <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   2a7c2:	4618      	mov	r0, r3
   2a7c4:	a901      	add	r1, sp, #4
   2a7c6:	f7ff ff7d 	bl	2a6c4 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2a7ca:	2224      	movs	r2, #36	; 0x24
   2a7cc:	e7f1      	b.n	2a7b2 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   2a7ce:	4620      	mov	r0, r4
   2a7d0:	f7f3 ff82 	bl	1e6d8 <nrf_connect>
		if (retval < 0) {
   2a7d4:	2800      	cmp	r0, #0
   2a7d6:	daf0      	bge.n	2a7ba <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   2a7d8:	f7fe fde6 	bl	293a8 <__errno>
   2a7dc:	2386      	movs	r3, #134	; 0x86
   2a7de:	6003      	str	r3, [r0, #0]
   2a7e0:	f04f 30ff 	mov.w	r0, #4294967295
   2a7e4:	e7e9      	b.n	2a7ba <nrf91_socket_offload_connect+0x2a>

0002a7e6 <nrf91_socket_offload_setsockopt>:
{
   2a7e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a7ea:	461e      	mov	r6, r3
	switch (z_in_level) {
   2a7ec:	f240 2302 	movw	r3, #514	; 0x202
{
   2a7f0:	b086      	sub	sp, #24
	switch (z_in_level) {
   2a7f2:	4299      	cmp	r1, r3
{
   2a7f4:	460c      	mov	r4, r1
   2a7f6:	4615      	mov	r5, r2
   2a7f8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   2a7fa:	f100 38ff 	add.w	r8, r0, #4294967295
	switch (z_in_level) {
   2a7fe:	d005      	beq.n	2a80c <nrf91_socket_offload_setsockopt+0x26>
   2a800:	dc20      	bgt.n	2a844 <nrf91_socket_offload_setsockopt+0x5e>
   2a802:	2901      	cmp	r1, #1
   2a804:	d002      	beq.n	2a80c <nrf91_socket_offload_setsockopt+0x26>
   2a806:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2a80a:	d126      	bne.n	2a85a <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   2a80c:	4629      	mov	r1, r5
   2a80e:	4620      	mov	r0, r4
   2a810:	aa03      	add	r2, sp, #12
   2a812:	f7eb f92f 	bl	15a74 <z_to_nrf_optname>
   2a816:	2800      	cmp	r0, #0
   2a818:	db1f      	blt.n	2a85a <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   2a81a:	2c01      	cmp	r4, #1
   2a81c:	d116      	bne.n	2a84c <nrf91_socket_offload_setsockopt+0x66>
   2a81e:	3d14      	subs	r5, #20
   2a820:	2d01      	cmp	r5, #1
   2a822:	d805      	bhi.n	2a830 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(struct nrf_timeval);
   2a824:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   2a826:	6832      	ldr	r2, [r6, #0]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2a828:	6873      	ldr	r3, [r6, #4]
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   2a82a:	9204      	str	r2, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2a82c:	9305      	str	r3, [sp, #20]
		nrf_optval = &nrf_timeo;
   2a82e:	ae04      	add	r6, sp, #16
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2a830:	4633      	mov	r3, r6
   2a832:	4621      	mov	r1, r4
   2a834:	4640      	mov	r0, r8
   2a836:	9a03      	ldr	r2, [sp, #12]
   2a838:	9700      	str	r7, [sp, #0]
   2a83a:	f7f3 ff97 	bl	1e76c <nrf_setsockopt>
}
   2a83e:	b006      	add	sp, #24
   2a840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   2a844:	f240 2303 	movw	r3, #515	; 0x203
   2a848:	4299      	cmp	r1, r3
   2a84a:	e7de      	b.n	2a80a <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   2a84c:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   2a850:	d1ee      	bne.n	2a830 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   2a852:	2d07      	cmp	r5, #7
   2a854:	bf08      	it	eq
   2a856:	2701      	moveq	r7, #1
   2a858:	e7ea      	b.n	2a830 <nrf91_socket_offload_setsockopt+0x4a>
	errno = ENOPROTOOPT;
   2a85a:	f7fe fda5 	bl	293a8 <__errno>
   2a85e:	236d      	movs	r3, #109	; 0x6d
   2a860:	6003      	str	r3, [r0, #0]
   2a862:	f04f 30ff 	mov.w	r0, #4294967295
   2a866:	e7ea      	b.n	2a83e <nrf91_socket_offload_setsockopt+0x58>

0002a868 <nrf91_socket_offload_bind>:
{
   2a868:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   2a86a:	880a      	ldrh	r2, [r1, #0]
{
   2a86c:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   2a86e:	2a01      	cmp	r2, #1
{
   2a870:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   2a872:	f100 34ff 	add.w	r4, r0, #4294967295
	if (addr->sa_family == AF_INET) {
   2a876:	d10f      	bne.n	2a898 <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   2a878:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2a87a:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2a87c:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   2a880:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2a882:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2a884:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   2a888:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2a88a:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2a88c:	4620      	mov	r0, r4
   2a88e:	a901      	add	r1, sp, #4
   2a890:	f7f3 ff5a 	bl	1e748 <nrf_bind>
}
   2a894:	b00a      	add	sp, #40	; 0x28
   2a896:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2a898:	2a02      	cmp	r2, #2
   2a89a:	d105      	bne.n	2a8a8 <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   2a89c:	4618      	mov	r0, r3
   2a89e:	a901      	add	r1, sp, #4
   2a8a0:	f7ff ff10 	bl	2a6c4 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2a8a4:	2224      	movs	r2, #36	; 0x24
   2a8a6:	e7f1      	b.n	2a88c <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   2a8a8:	f7fe fd7e 	bl	293a8 <__errno>
   2a8ac:	2386      	movs	r3, #134	; 0x86
   2a8ae:	6003      	str	r3, [r0, #0]
   2a8b0:	f04f 30ff 	mov.w	r0, #4294967295
   2a8b4:	e7ee      	b.n	2a894 <nrf91_socket_offload_bind+0x2c>

0002a8b6 <z_impl_gpio_pin_interrupt_configure>:
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2a8b6:	0413      	lsls	r3, r2, #16
{
   2a8b8:	b430      	push	{r4, r5}
	const struct gpio_driver_api *api =
   2a8ba:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2a8bc:	d507      	bpl.n	2a8ce <z_impl_gpio_pin_interrupt_configure+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   2a8be:	2301      	movs	r3, #1
   2a8c0:	68c5      	ldr	r5, [r0, #12]
   2a8c2:	408b      	lsls	r3, r1
   2a8c4:	682d      	ldr	r5, [r5, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2a8c6:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   2a8c8:	bf18      	it	ne
   2a8ca:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2a8ce:	69a4      	ldr	r4, [r4, #24]
   2a8d0:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   2a8d4:	46a4      	mov	ip, r4
}
   2a8d6:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2a8d8:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
   2a8dc:	4760      	bx	ip

0002a8de <gpio_pin_configure>:
{
   2a8de:	b538      	push	{r3, r4, r5, lr}
   2a8e0:	460c      	mov	r4, r1
	struct gpio_driver_data *data =
   2a8e2:	68c5      	ldr	r5, [r0, #12]
	return api->pin_configure(port, pin, flags);
   2a8e4:	6883      	ldr	r3, [r0, #8]
   2a8e6:	681b      	ldr	r3, [r3, #0]
   2a8e8:	4798      	blx	r3
	if (ret != 0) {
   2a8ea:	b930      	cbnz	r0, 2a8fa <gpio_pin_configure+0x1c>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2a8ec:	2201      	movs	r2, #1
   2a8ee:	682b      	ldr	r3, [r5, #0]
   2a8f0:	fa02 f104 	lsl.w	r1, r2, r4
   2a8f4:	ea23 0301 	bic.w	r3, r3, r1
   2a8f8:	602b      	str	r3, [r5, #0]
}
   2a8fa:	bd38      	pop	{r3, r4, r5, pc}

0002a8fc <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   2a8fc:	ea40 0301 	orr.w	r3, r0, r1
   2a900:	f033 030f 	bics.w	r3, r3, #15
   2a904:	d101      	bne.n	2a90a <dk_set_leds_state+0xe>
   2a906:	f7eb baf1 	b.w	15eec <dk_set_leds_state.part.0>
}
   2a90a:	f06f 0015 	mvn.w	r0, #21
   2a90e:	4770      	bx	lr

0002a910 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   2a910:	6883      	ldr	r3, [r0, #8]
   2a912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2a914:	b103      	cbz	r3, 2a918 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   2a916:	4718      	bx	r3
}
   2a918:	4770      	bx	lr

0002a91a <response_handler>:
	write_uart_string(response);
   2a91a:	4608      	mov	r0, r1
   2a91c:	f7ec b8dc 	b.w	16ad8 <write_uart_string>

0002a920 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   2a920:	280d      	cmp	r0, #13
   2a922:	d004      	beq.n	2a92e <is_lfcr+0xe>
   2a924:	f1a0 030a 	sub.w	r3, r0, #10
   2a928:	4258      	negs	r0, r3
   2a92a:	4158      	adcs	r0, r3
   2a92c:	4770      	bx	lr
		return true;
   2a92e:	2001      	movs	r0, #1
}
   2a930:	4770      	bx	lr

0002a932 <skip_command_prefix>:
{
   2a932:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   2a934:	6801      	ldr	r1, [r0, #0]
{
   2a936:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   2a938:	1c8b      	adds	r3, r1, #2
   2a93a:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   2a93c:	788c      	ldrb	r4, [r1, #2]
   2a93e:	4620      	mov	r0, r4
   2a940:	f7ff ffee 	bl	2a920 <is_lfcr>
   2a944:	b910      	cbnz	r0, 2a94c <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2a946:	b10c      	cbz	r4, 2a94c <skip_command_prefix+0x1a>
	(*cmd)++;
   2a948:	3103      	adds	r1, #3
   2a94a:	6011      	str	r1, [r2, #0]
}
   2a94c:	bd10      	pop	{r4, pc}

0002a94e <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   2a94e:	6813      	ldr	r3, [r2, #0]
   2a950:	f7ec bc0a 	b.w	17168 <at_parser_max_params_from_str>

0002a954 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   2a954:	6803      	ldr	r3, [r0, #0]
   2a956:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   2a958:	bf83      	ittte	hi
   2a95a:	230c      	movhi	r3, #12
   2a95c:	6840      	ldrhi	r0, [r0, #4]
   2a95e:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   2a962:	2000      	movls	r0, #0
}
   2a964:	4770      	bx	lr

0002a966 <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   2a966:	7803      	ldrb	r3, [r0, #0]
   2a968:	2b01      	cmp	r3, #1
   2a96a:	d006      	beq.n	2a97a <at_param_size+0x14>
		return sizeof(uint16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   2a96c:	2b02      	cmp	r3, #2
   2a96e:	d006      	beq.n	2a97e <at_param_size+0x18>
		return sizeof(uint32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   2a970:	3b03      	subs	r3, #3
   2a972:	2b01      	cmp	r3, #1
   2a974:	d805      	bhi.n	2a982 <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   2a976:	6840      	ldr	r0, [r0, #4]
   2a978:	4770      	bx	lr
		return sizeof(uint16_t);
   2a97a:	2002      	movs	r0, #2
   2a97c:	4770      	bx	lr
		return sizeof(uint32_t);
   2a97e:	2004      	movs	r0, #4
   2a980:	4770      	bx	lr
	}

	return 0;
   2a982:	2000      	movs	r0, #0
}
   2a984:	4770      	bx	lr

0002a986 <at_param_clear>:
{
   2a986:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   2a988:	7803      	ldrb	r3, [r0, #0]
{
   2a98a:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   2a98c:	3b03      	subs	r3, #3
   2a98e:	2b01      	cmp	r3, #1
   2a990:	d802      	bhi.n	2a998 <at_param_clear+0x12>
		k_free(param->value.str_val);
   2a992:	6880      	ldr	r0, [r0, #8]
   2a994:	f000 fd91 	bl	2b4ba <k_free>
	param->value.int_val = 0;
   2a998:	2300      	movs	r3, #0
   2a99a:	60a3      	str	r3, [r4, #8]
}
   2a99c:	bd10      	pop	{r4, pc}

0002a99e <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   2a99e:	b538      	push	{r3, r4, r5, lr}
   2a9a0:	460d      	mov	r5, r1
	if (list == NULL) {
   2a9a2:	4604      	mov	r4, r0
   2a9a4:	b140      	cbz	r0, 2a9b8 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   2a9a6:	210c      	movs	r1, #12
   2a9a8:	4628      	mov	r0, r5
   2a9aa:	f000 fd8b 	bl	2b4c4 <k_calloc>
   2a9ae:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   2a9b0:	b128      	cbz	r0, 2a9be <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   2a9b2:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   2a9b4:	6025      	str	r5, [r4, #0]
}
   2a9b6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2a9b8:	f06f 0015 	mvn.w	r0, #21
   2a9bc:	e7fb      	b.n	2a9b6 <at_params_list_init+0x18>
		return -ENOMEM;
   2a9be:	f06f 000b 	mvn.w	r0, #11
   2a9c2:	e7f8      	b.n	2a9b6 <at_params_list_init+0x18>

0002a9c4 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   2a9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (list == NULL || list->params == NULL) {
   2a9c8:	4604      	mov	r4, r0
   2a9ca:	b140      	cbz	r0, 2a9de <at_params_list_clear+0x1a>
   2a9cc:	6843      	ldr	r3, [r0, #4]
   2a9ce:	b133      	cbz	r3, 2a9de <at_params_list_clear+0x1a>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   2a9d0:	2500      	movs	r5, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   2a9d2:	f04f 0a0c 	mov.w	sl, #12
__ssp_bos_icheck3(memset, void *, int)
   2a9d6:	462e      	mov	r6, r5
	for (size_t i = 0; i < list->param_count; ++i) {
   2a9d8:	6823      	ldr	r3, [r4, #0]
   2a9da:	429d      	cmp	r5, r3
   2a9dc:	d301      	bcc.n	2a9e2 <at_params_list_clear+0x1e>
		at_param_init(&params[i]);
	}
}
   2a9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		at_param_clear(&params[i]);
   2a9e2:	fb0a f805 	mul.w	r8, sl, r5
   2a9e6:	f8d4 9004 	ldr.w	r9, [r4, #4]
	for (size_t i = 0; i < list->param_count; ++i) {
   2a9ea:	3501      	adds	r5, #1
		at_param_clear(&params[i]);
   2a9ec:	eb09 0708 	add.w	r7, r9, r8
   2a9f0:	4638      	mov	r0, r7
   2a9f2:	f7ff ffc8 	bl	2a986 <at_param_clear>
   2a9f6:	f849 6008 	str.w	r6, [r9, r8]
   2a9fa:	607e      	str	r6, [r7, #4]
   2a9fc:	60be      	str	r6, [r7, #8]
	for (size_t i = 0; i < list->param_count; ++i) {
   2a9fe:	e7eb      	b.n	2a9d8 <at_params_list_clear+0x14>

0002aa00 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   2aa00:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   2aa02:	4604      	mov	r4, r0
   2aa04:	b148      	cbz	r0, 2aa1a <at_params_list_free+0x1a>
   2aa06:	6843      	ldr	r3, [r0, #4]
   2aa08:	b13b      	cbz	r3, 2aa1a <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   2aa0a:	2500      	movs	r5, #0
	at_params_list_clear(list);
   2aa0c:	f7ff ffda 	bl	2a9c4 <at_params_list_clear>
	k_free(list->params);
   2aa10:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   2aa12:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   2aa14:	f000 fd51 	bl	2b4ba <k_free>
	list->params = NULL;
   2aa18:	6065      	str	r5, [r4, #4]
}
   2aa1a:	bd38      	pop	{r3, r4, r5, pc}

0002aa1c <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			uint16_t value)
{
   2aa1c:	b538      	push	{r3, r4, r5, lr}
   2aa1e:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   2aa20:	b160      	cbz	r0, 2aa3c <at_params_short_put+0x20>
   2aa22:	6843      	ldr	r3, [r0, #4]
   2aa24:	b153      	cbz	r3, 2aa3c <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2aa26:	f7ff ff95 	bl	2a954 <at_params_get>

	if (param == NULL) {
   2aa2a:	4604      	mov	r4, r0
   2aa2c:	b130      	cbz	r0, 2aa3c <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   2aa2e:	f7ff ffaa 	bl	2a986 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   2aa32:	2301      	movs	r3, #1
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
	return 0;
   2aa34:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   2aa36:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
   2aa38:	60a5      	str	r5, [r4, #8]
}
   2aa3a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2aa3c:	f06f 0015 	mvn.w	r0, #21
   2aa40:	e7fb      	b.n	2aa3a <at_params_short_put+0x1e>

0002aa42 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   2aa42:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   2aa44:	b160      	cbz	r0, 2aa60 <at_params_empty_put+0x1e>
   2aa46:	6843      	ldr	r3, [r0, #4]
   2aa48:	b153      	cbz	r3, 2aa60 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2aa4a:	f7ff ff83 	bl	2a954 <at_params_get>

	if (param == NULL) {
   2aa4e:	4604      	mov	r4, r0
   2aa50:	b130      	cbz	r0, 2aa60 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   2aa52:	f7ff ff98 	bl	2a986 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   2aa56:	2305      	movs	r3, #5
	param->value.int_val = 0;
   2aa58:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   2aa5a:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   2aa5c:	60a0      	str	r0, [r4, #8]

	return 0;
}
   2aa5e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2aa60:	f06f 0015 	mvn.w	r0, #21
   2aa64:	e7fb      	b.n	2aa5e <at_params_empty_put+0x1c>

0002aa66 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      uint32_t value)
{
   2aa66:	b538      	push	{r3, r4, r5, lr}
   2aa68:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   2aa6a:	b160      	cbz	r0, 2aa86 <at_params_int_put+0x20>
   2aa6c:	6843      	ldr	r3, [r0, #4]
   2aa6e:	b153      	cbz	r3, 2aa86 <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2aa70:	f7ff ff70 	bl	2a954 <at_params_get>

	if (param == NULL) {
   2aa74:	4604      	mov	r4, r0
   2aa76:	b130      	cbz	r0, 2aa86 <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   2aa78:	f7ff ff85 	bl	2a986 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   2aa7c:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   2aa7e:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   2aa80:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   2aa82:	60a5      	str	r5, [r4, #8]
}
   2aa84:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2aa86:	f06f 0015 	mvn.w	r0, #21
   2aa8a:	e7fb      	b.n	2aa84 <at_params_int_put+0x1e>

0002aa8c <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   2aa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aa8e:	4617      	mov	r7, r2
   2aa90:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   2aa92:	b1c0      	cbz	r0, 2aac6 <at_params_string_put+0x3a>
   2aa94:	6843      	ldr	r3, [r0, #4]
   2aa96:	b1b3      	cbz	r3, 2aac6 <at_params_string_put+0x3a>
   2aa98:	b1aa      	cbz	r2, 2aac6 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2aa9a:	f7ff ff5b 	bl	2a954 <at_params_get>

	if (param == NULL) {
   2aa9e:	4604      	mov	r4, r0
   2aaa0:	b188      	cbz	r0, 2aac6 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   2aaa2:	1c68      	adds	r0, r5, #1
   2aaa4:	f7f7 f832 	bl	21b0c <k_malloc>

	if (param_value == NULL) {
   2aaa8:	4606      	mov	r6, r0
   2aaaa:	b178      	cbz	r0, 2aacc <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2aaac:	462a      	mov	r2, r5
   2aaae:	4639      	mov	r1, r7
   2aab0:	f7e2 f860 	bl	cb74 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   2aab4:	4620      	mov	r0, r4
   2aab6:	f7ff ff66 	bl	2a986 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   2aaba:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   2aabc:	2000      	movs	r0, #0
	param->size = str_len;
   2aabe:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   2aac0:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   2aac2:	60a6      	str	r6, [r4, #8]
}
   2aac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   2aac6:	f06f 0015 	mvn.w	r0, #21
   2aaca:	e7fb      	b.n	2aac4 <at_params_string_put+0x38>
		return -ENOMEM;
   2aacc:	f06f 000b 	mvn.w	r0, #11
   2aad0:	e7f8      	b.n	2aac4 <at_params_string_put+0x38>

0002aad2 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   2aad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aad4:	4617      	mov	r7, r2
   2aad6:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   2aad8:	b1c0      	cbz	r0, 2ab0c <at_params_array_put+0x3a>
   2aada:	6843      	ldr	r3, [r0, #4]
   2aadc:	b1b3      	cbz	r3, 2ab0c <at_params_array_put+0x3a>
   2aade:	b1aa      	cbz	r2, 2ab0c <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2aae0:	f7ff ff38 	bl	2a954 <at_params_get>

	if (param == NULL) {
   2aae4:	4604      	mov	r4, r0
   2aae6:	b188      	cbz	r0, 2ab0c <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   2aae8:	4628      	mov	r0, r5
   2aaea:	f7f7 f80f 	bl	21b0c <k_malloc>

	if (param_value == NULL) {
   2aaee:	4606      	mov	r6, r0
   2aaf0:	b178      	cbz	r0, 2ab12 <at_params_array_put+0x40>
   2aaf2:	462a      	mov	r2, r5
   2aaf4:	4639      	mov	r1, r7
   2aaf6:	f7e2 f83d 	bl	cb74 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   2aafa:	4620      	mov	r0, r4
   2aafc:	f7ff ff43 	bl	2a986 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   2ab00:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   2ab02:	2000      	movs	r0, #0
	param->size = array_len;
   2ab04:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   2ab06:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   2ab08:	60a6      	str	r6, [r4, #8]
}
   2ab0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   2ab0c:	f06f 0015 	mvn.w	r0, #21
   2ab10:	e7fb      	b.n	2ab0a <at_params_array_put+0x38>
		return -ENOMEM;
   2ab12:	f06f 000b 	mvn.w	r0, #11
   2ab16:	e7f8      	b.n	2ab0a <at_params_array_put+0x38>

0002ab18 <at_params_int_get>:
	return 0;
}

int at_params_int_get(const struct at_param_list *list, size_t index,
		      uint32_t *value)
{
   2ab18:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   2ab1a:	b168      	cbz	r0, 2ab38 <at_params_int_get+0x20>
   2ab1c:	6843      	ldr	r3, [r0, #4]
   2ab1e:	b15b      	cbz	r3, 2ab38 <at_params_int_get+0x20>
   2ab20:	b152      	cbz	r2, 2ab38 <at_params_int_get+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2ab22:	f7ff ff17 	bl	2a954 <at_params_get>

	if (param == NULL) {
   2ab26:	b138      	cbz	r0, 2ab38 <at_params_int_get+0x20>
		return -EINVAL;
	}

	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   2ab28:	7803      	ldrb	r3, [r0, #0]
   2ab2a:	3b01      	subs	r3, #1
   2ab2c:	2b01      	cmp	r3, #1
   2ab2e:	d803      	bhi.n	2ab38 <at_params_int_get+0x20>
	    (param->type != AT_PARAM_TYPE_NUM_SHORT)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   2ab30:	6883      	ldr	r3, [r0, #8]
	return 0;
   2ab32:	2000      	movs	r0, #0
	*value = param->value.int_val;
   2ab34:	6013      	str	r3, [r2, #0]
}
   2ab36:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2ab38:	f06f 0015 	mvn.w	r0, #21
   2ab3c:	e7fb      	b.n	2ab36 <at_params_int_get+0x1e>

0002ab3e <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   2ab3e:	b570      	push	{r4, r5, r6, lr}
   2ab40:	4616      	mov	r6, r2
   2ab42:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   2ab44:	b1c0      	cbz	r0, 2ab78 <at_params_string_get+0x3a>
   2ab46:	6843      	ldr	r3, [r0, #4]
   2ab48:	b1b3      	cbz	r3, 2ab78 <at_params_string_get+0x3a>
   2ab4a:	b1aa      	cbz	r2, 2ab78 <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   2ab4c:	b1a4      	cbz	r4, 2ab78 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2ab4e:	f7ff ff01 	bl	2a954 <at_params_get>

	if (param == NULL) {
   2ab52:	4601      	mov	r1, r0
   2ab54:	b180      	cbz	r0, 2ab78 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   2ab56:	7803      	ldrb	r3, [r0, #0]
   2ab58:	2b03      	cmp	r3, #3
   2ab5a:	d10d      	bne.n	2ab78 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   2ab5c:	f7ff ff03 	bl	2a966 <at_param_size>

	if (*len < param_len) {
   2ab60:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   2ab62:	4605      	mov	r5, r0
	if (*len < param_len) {
   2ab64:	4283      	cmp	r3, r0
   2ab66:	d30a      	bcc.n	2ab7e <at_params_string_get+0x40>
   2ab68:	4602      	mov	r2, r0
   2ab6a:	6889      	ldr	r1, [r1, #8]
   2ab6c:	4630      	mov	r0, r6
   2ab6e:	f7e2 f801 	bl	cb74 <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   2ab72:	2000      	movs	r0, #0
	*len = param_len;
   2ab74:	6025      	str	r5, [r4, #0]
}
   2ab76:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2ab78:	f06f 0015 	mvn.w	r0, #21
   2ab7c:	e7fb      	b.n	2ab76 <at_params_string_get+0x38>
		return -ENOMEM;
   2ab7e:	f06f 000b 	mvn.w	r0, #11
   2ab82:	e7f8      	b.n	2ab76 <at_params_string_get+0x38>

0002ab84 <response_is_valid>:
{
   2ab84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ab86:	4605      	mov	r5, r0
	if ((response_len < strlen(check)) ||
   2ab88:	4610      	mov	r0, r2
{
   2ab8a:	460c      	mov	r4, r1
	if ((response_len < strlen(check)) ||
   2ab8c:	9201      	str	r2, [sp, #4]
   2ab8e:	f7f7 ff6d 	bl	22a6c <strlen>
   2ab92:	42a0      	cmp	r0, r4
   2ab94:	d809      	bhi.n	2abaa <response_is_valid+0x26>
	    (memcmp(response, check, response_len) != 0)) {
   2ab96:	4622      	mov	r2, r4
   2ab98:	4628      	mov	r0, r5
   2ab9a:	9901      	ldr	r1, [sp, #4]
   2ab9c:	f7f7 fb28 	bl	221f0 <memcmp>
	if ((response_len < strlen(check)) ||
   2aba0:	fab0 f080 	clz	r0, r0
   2aba4:	0940      	lsrs	r0, r0, #5
}
   2aba6:	b003      	add	sp, #12
   2aba8:	bd30      	pop	{r4, r5, pc}
		return false;
   2abaa:	2000      	movs	r0, #0
   2abac:	e7fb      	b.n	2aba6 <response_is_valid+0x22>

0002abae <lte_lc_connect>:
	return w_lte_lc_connect(true);
   2abae:	2001      	movs	r0, #1
   2abb0:	f7ec bc70 	b.w	17494 <w_lte_lc_connect>

0002abb4 <lte_lc_init_and_connect>:
{
   2abb4:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   2abb6:	f7ec fda7 	bl	17708 <w_lte_lc_init>
	if (ret) {
   2abba:	b920      	cbnz	r0, 2abc6 <lte_lc_init_and_connect+0x12>
}
   2abbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect(true);
   2abc0:	2001      	movs	r0, #1
   2abc2:	f7ec bc67 	b.w	17494 <w_lte_lc_connect>
}
   2abc6:	bd08      	pop	{r3, pc}

0002abc8 <k_uptime_get>:
{
   2abc8:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   2abca:	f000 faf9 	bl	2b1c0 <z_impl_k_uptime_ticks>
   2abce:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2abd2:	fba0 2304 	umull	r2, r3, r0, r4
   2abd6:	fb04 3301 	mla	r3, r4, r1, r3
   2abda:	0bd0      	lsrs	r0, r2, #15
}
   2abdc:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2abe0:	0bd9      	lsrs	r1, r3, #15
   2abe2:	bd10      	pop	{r4, pc}

0002abe4 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2abe4:	4700      	bx	r0

0002abe6 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2abe6:	f000 ba3b 	b.w	2b060 <z_impl_k_busy_wait>

0002abea <nrfx_clock_enable>:
{
   2abea:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2abec:	2005      	movs	r0, #5
   2abee:	f7e8 fd7d 	bl	136ec <arch_irq_is_enabled>
   2abf2:	b920      	cbnz	r0, 2abfe <nrfx_clock_enable+0x14>
}
   2abf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2abf8:	2005      	movs	r0, #5
   2abfa:	f7e8 bd67 	b.w	136cc <arch_irq_enable>
   2abfe:	bd08      	pop	{r3, pc}

0002ac00 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   2ac00:	f7fe bb76 	b.w	292f0 <z_clock_idle_exit>

0002ac04 <k_heap_init>:
{
   2ac04:	b410      	push	{r4}
   2ac06:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2ac0a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2ac0e:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   2ac12:	f7fd beb9 	b.w	28988 <sys_heap_init>

0002ac16 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   2ac16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ac1a:	4605      	mov	r5, r0
   2ac1c:	b085      	sub	sp, #20
   2ac1e:	460f      	mov	r7, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   2ac20:	4610      	mov	r0, r2
   2ac22:	4619      	mov	r1, r3
   2ac24:	f000 face 	bl	2b1c4 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2ac28:	f105 0b14 	add.w	fp, r5, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   2ac2c:	9002      	str	r0, [sp, #8]
   2ac2e:	468a      	mov	sl, r1
	__asm__ volatile(
   2ac30:	f04f 0320 	mov.w	r3, #32
   2ac34:	f3ef 8411 	mrs	r4, BASEPRI
   2ac38:	f383 8811 	msr	BASEPRI, r3
   2ac3c:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2ac40:	f105 060c 	add.w	r6, r5, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   2ac44:	4639      	mov	r1, r7
   2ac46:	4628      	mov	r0, r5
   2ac48:	f7fd fe6a 	bl	28920 <sys_heap_alloc>
   2ac4c:	9003      	str	r0, [sp, #12]
		now = z_tick_get();
   2ac4e:	f7f6 fe39 	bl	218c4 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   2ac52:	9b03      	ldr	r3, [sp, #12]
   2ac54:	b13b      	cbz	r3, 2ac66 <k_heap_alloc+0x50>
	__asm__ volatile(
   2ac56:	f384 8811 	msr	BASEPRI, r4
   2ac5a:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2ac5e:	4618      	mov	r0, r3
   2ac60:	b005      	add	sp, #20
   2ac62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   2ac66:	9a02      	ldr	r2, [sp, #8]
   2ac68:	ebb2 0800 	subs.w	r8, r2, r0
   2ac6c:	eb6a 0901 	sbc.w	r9, sl, r1
   2ac70:	f1b8 0f01 	cmp.w	r8, #1
   2ac74:	f179 0200 	sbcs.w	r2, r9, #0
   2ac78:	dbed      	blt.n	2ac56 <k_heap_alloc+0x40>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2ac7a:	4632      	mov	r2, r6
   2ac7c:	4621      	mov	r1, r4
   2ac7e:	4658      	mov	r0, fp
   2ac80:	e9cd 8900 	strd	r8, r9, [sp]
   2ac84:	f7f6 fa56 	bl	21134 <z_pend_curr>
	__asm__ volatile(
   2ac88:	f04f 0320 	mov.w	r3, #32
   2ac8c:	f3ef 8411 	mrs	r4, BASEPRI
   2ac90:	f383 8811 	msr	BASEPRI, r3
   2ac94:	f3bf 8f6f 	isb	sy
   2ac98:	e7d4      	b.n	2ac44 <k_heap_alloc+0x2e>

0002ac9a <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   2ac9a:	b538      	push	{r3, r4, r5, lr}
   2ac9c:	4604      	mov	r4, r0
   2ac9e:	f04f 0320 	mov.w	r3, #32
   2aca2:	f3ef 8511 	mrs	r5, BASEPRI
   2aca6:	f383 8811 	msr	BASEPRI, r3
   2acaa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2acae:	f7fd fddf 	bl	28870 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   2acb2:	f104 000c 	add.w	r0, r4, #12
   2acb6:	f000 f9ad 	bl	2b014 <z_unpend_all>
   2acba:	b130      	cbz	r0, 2acca <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2acbc:	4629      	mov	r1, r5
   2acbe:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2acc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2acc6:	f7f6 b821 	b.w	20d0c <z_reschedule>
	__asm__ volatile(
   2acca:	f385 8811 	msr	BASEPRI, r5
   2acce:	f3bf 8f6f 	isb	sy
}
   2acd2:	bd38      	pop	{r3, r4, r5, pc}

0002acd4 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   2acd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2acd6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   2acda:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   2acdc:	6800      	ldr	r0, [r0, #0]
{
   2acde:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   2ace0:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   2ace2:	4632      	mov	r2, r6
   2ace4:	463b      	mov	r3, r7
   2ace6:	4621      	mov	r1, r4
   2ace8:	f7ff ff95 	bl	2ac16 <k_heap_alloc>
   2acec:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   2acee:	b144      	cbz	r4, 2ad02 <k_mem_pool_alloc+0x2e>
   2acf0:	b938      	cbnz	r0, 2ad02 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   2acf2:	ea56 0307 	orrs.w	r3, r6, r7
   2acf6:	bf0c      	ite	eq
   2acf8:	f06f 000b 	mvneq.w	r0, #11
   2acfc:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   2ad00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   2ad02:	2000      	movs	r0, #0
   2ad04:	e7fc      	b.n	2ad00 <k_mem_pool_alloc+0x2c>

0002ad06 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   2ad06:	e9d0 1000 	ldrd	r1, r0, [r0]
   2ad0a:	f7ff bfc6 	b.w	2ac9a <k_heap_free>

0002ad0e <k_mem_slab_init>:
{
   2ad0e:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2ad10:	2400      	movs	r4, #0
   2ad12:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2ad14:	ea41 0402 	orr.w	r4, r1, r2
   2ad18:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2ad1c:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2ad20:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2ad22:	d10c      	bne.n	2ad3e <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   2ad24:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2ad26:	42a3      	cmp	r3, r4
   2ad28:	d103      	bne.n	2ad32 <k_mem_slab_init+0x24>
   2ad2a:	e9c0 0000 	strd	r0, r0, [r0]
}
   2ad2e:	2000      	movs	r0, #0
}
   2ad30:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2ad32:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2ad34:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   2ad36:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   2ad38:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   2ad3a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2ad3c:	e7f3      	b.n	2ad26 <k_mem_slab_init+0x18>
		return -EINVAL;
   2ad3e:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2ad42:	e7f5      	b.n	2ad30 <k_mem_slab_init+0x22>

0002ad44 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   2ad44:	2300      	movs	r3, #0
   2ad46:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   2ad4a:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   2ad4e:	4618      	mov	r0, r3
   2ad50:	4770      	bx	lr

0002ad52 <queue_insert>:
{
   2ad52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ad56:	4604      	mov	r4, r0
   2ad58:	460d      	mov	r5, r1
   2ad5a:	4690      	mov	r8, r2
   2ad5c:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2ad5e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2ad62:	f04f 0320 	mov.w	r3, #32
   2ad66:	f3ef 8711 	mrs	r7, BASEPRI
   2ad6a:	f383 8811 	msr	BASEPRI, r3
   2ad6e:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2ad72:	4630      	mov	r0, r6
   2ad74:	f000 f929 	bl	2afca <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2ad78:	b158      	cbz	r0, 2ad92 <queue_insert+0x40>
   2ad7a:	2400      	movs	r4, #0
   2ad7c:	f8c0 8014 	str.w	r8, [r0, #20]
   2ad80:	67c4      	str	r4, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2ad82:	f000 f8ca 	bl	2af1a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2ad86:	4630      	mov	r0, r6
   2ad88:	4639      	mov	r1, r7
   2ad8a:	f7f5 ffbf 	bl	20d0c <z_reschedule>
	return 0;
   2ad8e:	2000      	movs	r0, #0
   2ad90:	e00c      	b.n	2adac <queue_insert+0x5a>
	if (alloc) {
   2ad92:	f1b9 0f00 	cmp.w	r9, #0
   2ad96:	d01b      	beq.n	2add0 <queue_insert+0x7e>
		anode = z_thread_malloc(sizeof(*anode));
   2ad98:	2008      	movs	r0, #8
   2ad9a:	f7f6 febd 	bl	21b18 <z_thread_malloc>
		if (anode == NULL) {
   2ad9e:	b938      	cbnz	r0, 2adb0 <queue_insert+0x5e>
	__asm__ volatile(
   2ada0:	f387 8811 	msr	BASEPRI, r7
   2ada4:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2ada8:	f06f 000b 	mvn.w	r0, #11
}
   2adac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2adb0:	2301      	movs	r3, #1
		anode->data = data;
   2adb2:	f8c0 8004 	str.w	r8, [r0, #4]
   2adb6:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2adb8:	6803      	ldr	r3, [r0, #0]
   2adba:	f003 0203 	and.w	r2, r3, #3
   2adbe:	b95d      	cbnz	r5, 2add8 <queue_insert+0x86>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2adc0:	6823      	ldr	r3, [r4, #0]
   2adc2:	4313      	orrs	r3, r2
   2adc4:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2adc6:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2adc8:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2adca:	b973      	cbnz	r3, 2adea <queue_insert+0x98>
	list->tail = node;
   2adcc:	6060      	str	r0, [r4, #4]
}
   2adce:	e00c      	b.n	2adea <queue_insert+0x98>
}
   2add0:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   2add2:	f8c8 9000 	str.w	r9, [r8]
}
   2add6:	e7ef      	b.n	2adb8 <queue_insert+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2add8:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2adda:	f033 0303 	bics.w	r3, r3, #3
   2adde:	d110      	bne.n	2ae02 <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ade0:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2ade2:	6862      	ldr	r2, [r4, #4]
   2ade4:	b93a      	cbnz	r2, 2adf6 <queue_insert+0xa4>
	list->head = node;
   2ade6:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2adea:	2104      	movs	r1, #4
   2adec:	f104 0010 	add.w	r0, r4, #16
   2adf0:	f000 fb3d 	bl	2b46e <z_handle_obj_poll_events>
   2adf4:	e7c7      	b.n	2ad86 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2adf6:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2adf8:	f003 0303 	and.w	r3, r3, #3
   2adfc:	4303      	orrs	r3, r0
   2adfe:	6013      	str	r3, [r2, #0]
   2ae00:	e7e4      	b.n	2adcc <queue_insert+0x7a>
   2ae02:	4313      	orrs	r3, r2
   2ae04:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ae06:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ae08:	f003 0303 	and.w	r3, r3, #3
   2ae0c:	4303      	orrs	r3, r0
   2ae0e:	602b      	str	r3, [r5, #0]
}
   2ae10:	e7eb      	b.n	2adea <queue_insert+0x98>

0002ae12 <z_queue_node_peek>:
{
   2ae12:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2ae14:	4604      	mov	r4, r0
   2ae16:	b130      	cbz	r0, 2ae26 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ae18:	6802      	ldr	r2, [r0, #0]
   2ae1a:	0793      	lsls	r3, r2, #30
   2ae1c:	d003      	beq.n	2ae26 <z_queue_node_peek+0x14>
		ret = anode->data;
   2ae1e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2ae20:	b109      	cbz	r1, 2ae26 <z_queue_node_peek+0x14>
			k_free(anode);
   2ae22:	f000 fb4a 	bl	2b4ba <k_free>
}
   2ae26:	4620      	mov	r0, r4
   2ae28:	bd10      	pop	{r4, pc}

0002ae2a <z_impl_k_queue_init>:
	list->head = NULL;
   2ae2a:	2300      	movs	r3, #0
	list->tail = NULL;
   2ae2c:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   2ae30:	f100 0308 	add.w	r3, r0, #8
   2ae34:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2ae38:	f100 0310 	add.w	r3, r0, #16
   2ae3c:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2ae40:	4770      	bx	lr

0002ae42 <k_queue_append>:
{
   2ae42:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   2ae44:	2300      	movs	r3, #0
   2ae46:	6841      	ldr	r1, [r0, #4]
   2ae48:	f7ff bf83 	b.w	2ad52 <queue_insert>

0002ae4c <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   2ae4c:	f990 000e 	ldrsb.w	r0, [r0, #14]
   2ae50:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   2ae54:	4298      	cmp	r0, r3
   2ae56:	bfac      	ite	ge
   2ae58:	2000      	movge	r0, #0
   2ae5a:	2001      	movlt	r0, #1
   2ae5c:	4770      	bx	lr

0002ae5e <z_find_first_thread_to_unpend>:
{
   2ae5e:	b510      	push	{r4, lr}
	__asm__ volatile(
   2ae60:	f04f 0320 	mov.w	r3, #32
   2ae64:	f3ef 8411 	mrs	r4, BASEPRI
   2ae68:	f383 8811 	msr	BASEPRI, r3
   2ae6c:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   2ae70:	f000 f84d 	bl	2af0e <z_priq_dumb_best>
	__asm__ volatile(
   2ae74:	f384 8811 	msr	BASEPRI, r4
   2ae78:	f3bf 8f6f 	isb	sy
}
   2ae7c:	bd10      	pop	{r4, pc}

0002ae7e <z_unpend_thread_no_timeout>:
{
   2ae7e:	b510      	push	{r4, lr}
	__asm__ volatile(
   2ae80:	f04f 0320 	mov.w	r3, #32
   2ae84:	f3ef 8411 	mrs	r4, BASEPRI
   2ae88:	f383 8811 	msr	BASEPRI, r3
   2ae8c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2ae90:	f000 f81b 	bl	2aeca <unpend_thread_no_timeout>
	__asm__ volatile(
   2ae94:	f384 8811 	msr	BASEPRI, r4
   2ae98:	f3bf 8f6f 	isb	sy
}
   2ae9c:	bd10      	pop	{r4, pc}

0002ae9e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2ae9e:	4603      	mov	r3, r0
   2aea0:	b920      	cbnz	r0, 2aeac <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2aea2:	f3ef 8205 	mrs	r2, IPSR
   2aea6:	b90a      	cbnz	r2, 2aeac <z_reschedule_irqlock+0xe>
   2aea8:	f7e8 bb8e 	b.w	135c8 <arch_swap>
   2aeac:	f383 8811 	msr	BASEPRI, r3
   2aeb0:	f3bf 8f6f 	isb	sy
}
   2aeb4:	4770      	bx	lr

0002aeb6 <z_reschedule_unlocked>:
	__asm__ volatile(
   2aeb6:	f04f 0320 	mov.w	r3, #32
   2aeba:	f3ef 8011 	mrs	r0, BASEPRI
   2aebe:	f383 8811 	msr	BASEPRI, r3
   2aec2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2aec6:	f7ff bfea 	b.w	2ae9e <z_reschedule_irqlock>

0002aeca <unpend_thread_no_timeout>:
{
   2aeca:	4601      	mov	r1, r0
   2aecc:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2aece:	6880      	ldr	r0, [r0, #8]
   2aed0:	f7f5 ff42 	bl	20d58 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2aed4:	7b4b      	ldrb	r3, [r1, #13]
   2aed6:	f023 0302 	bic.w	r3, r3, #2
   2aeda:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   2aedc:	2300      	movs	r3, #0
   2aede:	608b      	str	r3, [r1, #8]
}
   2aee0:	bd08      	pop	{r3, pc}

0002aee2 <z_unpend_thread>:
{
   2aee2:	b538      	push	{r3, r4, r5, lr}
   2aee4:	4604      	mov	r4, r0
   2aee6:	f04f 0320 	mov.w	r3, #32
   2aeea:	f3ef 8511 	mrs	r5, BASEPRI
   2aeee:	f383 8811 	msr	BASEPRI, r3
   2aef2:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2aef6:	f7ff ffe8 	bl	2aeca <unpend_thread_no_timeout>
	__asm__ volatile(
   2aefa:	f385 8811 	msr	BASEPRI, r5
   2aefe:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   2af02:	f104 0018 	add.w	r0, r4, #24
}
   2af06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2af0a:	f000 b914 	b.w	2b136 <z_abort_timeout>

0002af0e <z_priq_dumb_best>:
	return list->head == list;
   2af0e:	6803      	ldr	r3, [r0, #0]
}
   2af10:	4298      	cmp	r0, r3
   2af12:	bf14      	ite	ne
   2af14:	4618      	movne	r0, r3
   2af16:	2000      	moveq	r0, #0
   2af18:	4770      	bx	lr

0002af1a <z_ready_thread>:
{
   2af1a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2af1c:	f04f 0320 	mov.w	r3, #32
   2af20:	f3ef 8411 	mrs	r4, BASEPRI
   2af24:	f383 8811 	msr	BASEPRI, r3
   2af28:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   2af2c:	f7f5 ff6a 	bl	20e04 <ready_thread>
	__asm__ volatile(
   2af30:	f384 8811 	msr	BASEPRI, r4
   2af34:	f3bf 8f6f 	isb	sy
}
   2af38:	bd10      	pop	{r4, pc}

0002af3a <z_thread_timeout>:
{
   2af3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2af3c:	4604      	mov	r4, r0
	__asm__ volatile(
   2af3e:	f04f 0320 	mov.w	r3, #32
   2af42:	f3ef 8511 	mrs	r5, BASEPRI
   2af46:	f383 8811 	msr	BASEPRI, r3
   2af4a:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   2af4e:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   2af52:	3818      	subs	r0, #24
		if (thread->base.pended_on != NULL) {
   2af54:	b11b      	cbz	r3, 2af5e <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   2af56:	9001      	str	r0, [sp, #4]
   2af58:	f7ff ffb7 	bl	2aeca <unpend_thread_no_timeout>
   2af5c:	9801      	ldr	r0, [sp, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2af5e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2af62:	f023 0314 	bic.w	r3, r3, #20
   2af66:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   2af6a:	f7f5 ff4b 	bl	20e04 <ready_thread>
	__asm__ volatile(
   2af6e:	f385 8811 	msr	BASEPRI, r5
   2af72:	f3bf 8f6f 	isb	sy
}
   2af76:	b003      	add	sp, #12
   2af78:	bd30      	pop	{r4, r5, pc}

0002af7a <add_to_waitq_locked>:
{
   2af7a:	b538      	push	{r3, r4, r5, lr}
   2af7c:	4604      	mov	r4, r0
   2af7e:	460d      	mov	r5, r1
	unready_thread(thread);
   2af80:	f7f6 f898 	bl	210b4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2af84:	7b63      	ldrb	r3, [r4, #13]
   2af86:	f043 0302 	orr.w	r3, r3, #2
   2af8a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2af8c:	b17d      	cbz	r5, 2afae <add_to_waitq_locked+0x34>
   2af8e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2af90:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2af92:	429d      	cmp	r5, r3
   2af94:	d012      	beq.n	2afbc <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2af96:	b18b      	cbz	r3, 2afbc <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
   2af98:	f994 200e 	ldrsb.w	r2, [r4, #14]
   2af9c:	f993 100e 	ldrsb.w	r1, [r3, #14]
   2afa0:	4291      	cmp	r1, r2
   2afa2:	dd05      	ble.n	2afb0 <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
   2afa4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2afa6:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2afaa:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2afac:	605c      	str	r4, [r3, #4]
}
   2afae:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2afb0:	6869      	ldr	r1, [r5, #4]
   2afb2:	428b      	cmp	r3, r1
   2afb4:	d002      	beq.n	2afbc <add_to_waitq_locked+0x42>
   2afb6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2afb8:	2b00      	cmp	r3, #0
   2afba:	d1ef      	bne.n	2af9c <add_to_waitq_locked+0x22>
	node->prev = list->tail;
   2afbc:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2afbe:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   2afc0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2afc2:	686b      	ldr	r3, [r5, #4]
   2afc4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2afc6:	606c      	str	r4, [r5, #4]
}
   2afc8:	e7f1      	b.n	2afae <add_to_waitq_locked+0x34>

0002afca <z_unpend_first_thread>:
{
   2afca:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2afcc:	f04f 0320 	mov.w	r3, #32
   2afd0:	f3ef 8211 	mrs	r2, BASEPRI
   2afd4:	f383 8811 	msr	BASEPRI, r3
   2afd8:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   2afdc:	f7ff ff97 	bl	2af0e <z_priq_dumb_best>
   2afe0:	4604      	mov	r4, r0
	__asm__ volatile(
   2afe2:	f382 8811 	msr	BASEPRI, r2
   2afe6:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   2afea:	b188      	cbz	r0, 2b010 <z_unpend_first_thread+0x46>
	__asm__ volatile(
   2afec:	f04f 0320 	mov.w	r3, #32
   2aff0:	f3ef 8511 	mrs	r5, BASEPRI
   2aff4:	f383 8811 	msr	BASEPRI, r3
   2aff8:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2affc:	f7ff ff65 	bl	2aeca <unpend_thread_no_timeout>
	__asm__ volatile(
   2b000:	f385 8811 	msr	BASEPRI, r5
   2b004:	f3bf 8f6f 	isb	sy
   2b008:	f104 0018 	add.w	r0, r4, #24
   2b00c:	f000 f893 	bl	2b136 <z_abort_timeout>
}
   2b010:	4620      	mov	r0, r4
   2b012:	bd38      	pop	{r3, r4, r5, pc}

0002b014 <z_unpend_all>:
{
   2b014:	b538      	push	{r3, r4, r5, lr}
   2b016:	4605      	mov	r5, r0
	int need_sched = 0;
   2b018:	2000      	movs	r0, #0
	return list->head == list;
   2b01a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b01c:	42a5      	cmp	r5, r4
   2b01e:	d000      	beq.n	2b022 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2b020:	b904      	cbnz	r4, 2b024 <z_unpend_all+0x10>
}
   2b022:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2b024:	4620      	mov	r0, r4
   2b026:	f7ff ff5c 	bl	2aee2 <z_unpend_thread>
		z_ready_thread(thread);
   2b02a:	4620      	mov	r0, r4
   2b02c:	f7ff ff75 	bl	2af1a <z_ready_thread>
		need_sched = 1;
   2b030:	2001      	movs	r0, #1
   2b032:	e7f2      	b.n	2b01a <z_unpend_all+0x6>

0002b034 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   2b034:	b15a      	cbz	r2, 2b04e <z_impl_k_sem_init+0x1a>
   2b036:	428a      	cmp	r2, r1
   2b038:	d309      	bcc.n	2b04e <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2b03a:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2b03e:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2b042:	e9c0 0000 	strd	r0, r0, [r0]
   2b046:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2b04a:	2000      	movs	r0, #0
   2b04c:	4770      	bx	lr
		return -EINVAL;
   2b04e:	f06f 0015 	mvn.w	r0, #21
}
   2b052:	4770      	bx	lr

0002b054 <k_is_in_isr>:
   2b054:	f3ef 8005 	mrs	r0, IPSR
}
   2b058:	3800      	subs	r0, #0
   2b05a:	bf18      	it	ne
   2b05c:	2001      	movne	r0, #1
   2b05e:	4770      	bx	lr

0002b060 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   2b060:	f7e7 b968 	b.w	12334 <arch_busy_wait>

0002b064 <z_impl_k_thread_name_set>:
}
   2b064:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2b068:	4770      	bx	lr

0002b06a <k_thread_name_get>:
}
   2b06a:	2000      	movs	r0, #0
   2b06c:	4770      	bx	lr

0002b06e <k_work_submit_to_queue>:
{
   2b06e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b070:	f101 0308 	add.w	r3, r1, #8
   2b074:	e8d3 2fef 	ldaex	r2, [r3]
   2b078:	f042 0c01 	orr.w	ip, r2, #1
   2b07c:	e8c3 cfee 	stlex	lr, ip, [r3]
   2b080:	f1be 0f00 	cmp.w	lr, #0
   2b084:	d1f6      	bne.n	2b074 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2b086:	07d3      	lsls	r3, r2, #31
   2b088:	d403      	bmi.n	2b092 <k_work_submit_to_queue+0x24>
}
   2b08a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2b08e:	f7ff bed8 	b.w	2ae42 <k_queue_append>
}
   2b092:	f85d fb04 	ldr.w	pc, [sp], #4

0002b096 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   2b096:	f1a0 0110 	sub.w	r1, r0, #16
   2b09a:	6980      	ldr	r0, [r0, #24]
   2b09c:	f7ff bfe7 	b.w	2b06e <k_work_submit_to_queue>

0002b0a0 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   2b0a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   2b0a2:	b570      	push	{r4, r5, r6, lr}
   2b0a4:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   2b0a6:	b913      	cbnz	r3, 2b0ae <work_cancel+0xe>
		return -EALREADY;
   2b0a8:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   2b0ac:	bd70      	pop	{r4, r5, r6, pc}
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   2b0ae:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b0b2:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   2b0b6:	07db      	lsls	r3, r3, #31
   2b0b8:	d52f      	bpl.n	2b11a <work_cancel+0x7a>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2b0ba:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2b0bc:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2b0be:	6813      	ldr	r3, [r2, #0]
   2b0c0:	b913      	cbnz	r3, 2b0c8 <work_cancel+0x28>
			return -EINVAL;
   2b0c2:	f06f 0015 	mvn.w	r0, #21
   2b0c6:	e7f1      	b.n	2b0ac <work_cancel+0xc>
   2b0c8:	429c      	cmp	r4, r3
   2b0ca:	d121      	bne.n	2b110 <work_cancel+0x70>
Z_GENLIST_REMOVE(sflist, sfnode)
   2b0cc:	6823      	ldr	r3, [r4, #0]
   2b0ce:	6856      	ldr	r6, [r2, #4]
   2b0d0:	f023 0003 	bic.w	r0, r3, #3
   2b0d4:	b991      	cbnz	r1, 2b0fc <work_cancel+0x5c>
   2b0d6:	42b4      	cmp	r4, r6
	list->head = node;
   2b0d8:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2b0da:	d100      	bne.n	2b0de <work_cancel+0x3e>
	list->tail = node;
   2b0dc:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b0de:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b0e0:	f003 0303 	and.w	r3, r3, #3
   2b0e4:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   2b0e6:	2000      	movs	r0, #0
   2b0e8:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b0ea:	e8d5 3fef 	ldaex	r3, [r5]
   2b0ee:	f023 0301 	bic.w	r3, r3, #1
   2b0f2:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2b0f6:	2a00      	cmp	r2, #0
   2b0f8:	d0d8      	beq.n	2b0ac <work_cancel+0xc>
   2b0fa:	e7f6      	b.n	2b0ea <work_cancel+0x4a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b0fc:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2b0fe:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b100:	f003 0303 	and.w	r3, r3, #3
   2b104:	ea43 0300 	orr.w	r3, r3, r0
   2b108:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2b10a:	bf08      	it	eq
   2b10c:	6051      	streq	r1, [r2, #4]
}
   2b10e:	e7e6      	b.n	2b0de <work_cancel+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2b110:	6818      	ldr	r0, [r3, #0]
   2b112:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2b114:	f020 0303 	bic.w	r3, r0, #3
   2b118:	e7d2      	b.n	2b0c0 <work_cancel+0x20>
		int err = z_abort_timeout(&work->timeout);
   2b11a:	3010      	adds	r0, #16
   2b11c:	f000 f80b 	bl	2b136 <z_abort_timeout>
		if (err) {
   2b120:	2800      	cmp	r0, #0
   2b122:	d0e0      	beq.n	2b0e6 <work_cancel+0x46>
   2b124:	e7c0      	b.n	2b0a8 <work_cancel+0x8>

0002b126 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2b126:	2300      	movs	r3, #0
   2b128:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   2b12c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   2b130:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   2b132:	6283      	str	r3, [r0, #40]	; 0x28
}
   2b134:	4770      	bx	lr

0002b136 <z_abort_timeout>:
{
   2b136:	b510      	push	{r4, lr}
	__asm__ volatile(
   2b138:	f04f 0220 	mov.w	r2, #32
   2b13c:	f3ef 8411 	mrs	r4, BASEPRI
   2b140:	f382 8811 	msr	BASEPRI, r2
   2b144:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2b148:	6803      	ldr	r3, [r0, #0]
   2b14a:	b13b      	cbz	r3, 2b15c <z_abort_timeout+0x26>
			remove_timeout(to);
   2b14c:	f7f6 fa86 	bl	2165c <remove_timeout>
			ret = 0;
   2b150:	2000      	movs	r0, #0
	__asm__ volatile(
   2b152:	f384 8811 	msr	BASEPRI, r4
   2b156:	f3bf 8f6f 	isb	sy
}
   2b15a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2b15c:	f06f 0015 	mvn.w	r0, #21
   2b160:	e7f7      	b.n	2b152 <z_abort_timeout+0x1c>

0002b162 <z_get_next_timeout_expiry>:
{
   2b162:	b510      	push	{r4, lr}
	__asm__ volatile(
   2b164:	f04f 0320 	mov.w	r3, #32
   2b168:	f3ef 8411 	mrs	r4, BASEPRI
   2b16c:	f383 8811 	msr	BASEPRI, r3
   2b170:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2b174:	f7f6 fa8c 	bl	21690 <next_timeout>
	__asm__ volatile(
   2b178:	f384 8811 	msr	BASEPRI, r4
   2b17c:	f3bf 8f6f 	isb	sy
}
   2b180:	bd10      	pop	{r4, pc}

0002b182 <z_set_timeout_expiry>:
{
   2b182:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2b184:	4604      	mov	r4, r0
   2b186:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   2b188:	f04f 0320 	mov.w	r3, #32
   2b18c:	f3ef 8511 	mrs	r5, BASEPRI
   2b190:	f383 8811 	msr	BASEPRI, r3
   2b194:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2b198:	f7f6 fa7a 	bl	21690 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2b19c:	2801      	cmp	r0, #1
   2b19e:	dd05      	ble.n	2b1ac <z_set_timeout_expiry+0x2a>
   2b1a0:	42a0      	cmp	r0, r4
   2b1a2:	9901      	ldr	r1, [sp, #4]
   2b1a4:	dd02      	ble.n	2b1ac <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   2b1a6:	4620      	mov	r0, r4
   2b1a8:	f7e8 f974 	bl	13494 <z_clock_set_timeout>
	__asm__ volatile(
   2b1ac:	f385 8811 	msr	BASEPRI, r5
   2b1b0:	f3bf 8f6f 	isb	sy
}
   2b1b4:	b003      	add	sp, #12
   2b1b6:	bd30      	pop	{r4, r5, pc}

0002b1b8 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   2b1b8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   2b1ba:	f7f6 fb83 	bl	218c4 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2b1be:	bd08      	pop	{r3, pc}

0002b1c0 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   2b1c0:	f7f6 bb80 	b.w	218c4 <z_tick_get>

0002b1c4 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   2b1c4:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b1c6:	1c4b      	adds	r3, r1, #1
   2b1c8:	bf08      	it	eq
   2b1ca:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2b1ce:	4604      	mov	r4, r0
   2b1d0:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b1d2:	d013      	beq.n	2b1fc <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2b1d4:	ea54 0105 	orrs.w	r1, r4, r5
   2b1d8:	d103      	bne.n	2b1e2 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   2b1da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   2b1de:	f7f6 bb71 	b.w	218c4 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2b1e2:	f06f 0101 	mvn.w	r1, #1
   2b1e6:	1a0a      	subs	r2, r1, r0
   2b1e8:	f04f 31ff 	mov.w	r1, #4294967295
   2b1ec:	eb61 0305 	sbc.w	r3, r1, r5
   2b1f0:	2a00      	cmp	r2, #0
   2b1f2:	f173 0100 	sbcs.w	r1, r3, #0
   2b1f6:	db02      	blt.n	2b1fe <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   2b1f8:	4610      	mov	r0, r2
   2b1fa:	4619      	mov	r1, r3
}
   2b1fc:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   2b1fe:	f7f6 fb61 	bl	218c4 <z_tick_get>
   2b202:	2c01      	cmp	r4, #1
   2b204:	f175 0300 	sbcs.w	r3, r5, #0
   2b208:	bfbc      	itt	lt
   2b20a:	2401      	movlt	r4, #1
   2b20c:	2500      	movlt	r5, #0
   2b20e:	1820      	adds	r0, r4, r0
   2b210:	eb45 0101 	adc.w	r1, r5, r1
   2b214:	e7f2      	b.n	2b1fc <z_timeout_end_calc+0x38>

0002b216 <k_timer_init>:
	timer->status = 0U;
   2b216:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2b218:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2b21c:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2b220:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2b224:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2b228:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2b22a:	6343      	str	r3, [r0, #52]	; 0x34
}
   2b22c:	4770      	bx	lr

0002b22e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2b22e:	b510      	push	{r4, lr}
   2b230:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2b232:	f7ff ff80 	bl	2b136 <z_abort_timeout>

	if (inactive) {
   2b236:	b9d8      	cbnz	r0, 2b270 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   2b238:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b23a:	b10b      	cbz	r3, 2b240 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2b23c:	4620      	mov	r0, r4
   2b23e:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   2b240:	f104 0018 	add.w	r0, r4, #24
   2b244:	2100      	movs	r1, #0
   2b246:	f7ff fe0a 	bl	2ae5e <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   2b24a:	4604      	mov	r4, r0
   2b24c:	b180      	cbz	r0, 2b270 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   2b24e:	f7ff fe16 	bl	2ae7e <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   2b252:	4620      	mov	r0, r4
   2b254:	f7ff fe61 	bl	2af1a <z_ready_thread>
	__asm__ volatile(
   2b258:	f04f 0320 	mov.w	r3, #32
   2b25c:	f3ef 8011 	mrs	r0, BASEPRI
   2b260:	f383 8811 	msr	BASEPRI, r3
   2b264:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   2b268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2b26c:	f7ff be17 	b.w	2ae9e <z_reschedule_irqlock>
   2b270:	bd10      	pop	{r4, pc}

0002b272 <clear_event_registrations>:
	while (num_events--) {
   2b272:	2314      	movs	r3, #20
{
   2b274:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
   2b276:	2400      	movs	r4, #0
   2b278:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   2b27c:	4281      	cmp	r1, r0
   2b27e:	d100      	bne.n	2b282 <clear_event_registrations+0x10>
}
   2b280:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   2b282:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   2b286:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   2b28a:	f003 030f 	and.w	r3, r3, #15
   2b28e:	2b02      	cmp	r3, #2
   2b290:	d80a      	bhi.n	2b2a8 <clear_event_registrations+0x36>
   2b292:	b15b      	cbz	r3, 2b2ac <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   2b294:	f851 3c14 	ldr.w	r3, [r1, #-20]
   2b298:	b143      	cbz	r3, 2b2ac <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   2b29a:	f851 5c10 	ldr.w	r5, [r1, #-16]
   2b29e:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   2b2a0:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2b2a2:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   2b2a6:	e001      	b.n	2b2ac <clear_event_registrations+0x3a>
	switch (event->type) {
   2b2a8:	2b04      	cmp	r3, #4
   2b2aa:	d0f3      	beq.n	2b294 <clear_event_registrations+0x22>
	__asm__ volatile(
   2b2ac:	f382 8811 	msr	BASEPRI, r2
   2b2b0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2b2b4:	f04f 0320 	mov.w	r3, #32
   2b2b8:	f3ef 8211 	mrs	r2, BASEPRI
   2b2bc:	f383 8811 	msr	BASEPRI, r3
   2b2c0:	f3bf 8f6f 	isb	sy
   2b2c4:	3914      	subs	r1, #20
   2b2c6:	e7d9      	b.n	2b27c <clear_event_registrations+0xa>

0002b2c8 <signal_poll_event>:
{
   2b2c8:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   2b2ca:	6884      	ldr	r4, [r0, #8]
{
   2b2cc:	4605      	mov	r5, r0
   2b2ce:	460e      	mov	r6, r1
	if (poller) {
   2b2d0:	b19c      	cbz	r4, 2b2fa <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   2b2d2:	68a3      	ldr	r3, [r4, #8]
   2b2d4:	b95b      	cbnz	r3, 2b2ee <signal_poll_event+0x26>
	int retcode = 0;
   2b2d6:	4618      	mov	r0, r3
		poller->is_polling = false;
   2b2d8:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2b2da:	2300      	movs	r3, #0
   2b2dc:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   2b2de:	68eb      	ldr	r3, [r5, #12]
   2b2e0:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2b2e4:	430e      	orrs	r6, r1
   2b2e6:	f366 3310 	bfi	r3, r6, #12, #5
   2b2ea:	60eb      	str	r3, [r5, #12]
	return retcode;
   2b2ec:	e004      	b.n	2b2f8 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   2b2ee:	4798      	blx	r3
		poller->is_polling = false;
   2b2f0:	2300      	movs	r3, #0
		if (retcode < 0) {
   2b2f2:	2800      	cmp	r0, #0
		poller->is_polling = false;
   2b2f4:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   2b2f6:	daf0      	bge.n	2b2da <signal_poll_event+0x12>
}
   2b2f8:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   2b2fa:	4620      	mov	r0, r4
   2b2fc:	e7ed      	b.n	2b2da <signal_poll_event+0x12>

0002b2fe <k_poll_poller_cb>:
{
   2b2fe:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   2b300:	6883      	ldr	r3, [r0, #8]
{
   2b302:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   2b304:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   2b306:	7b63      	ldrb	r3, [r4, #13]
   2b308:	079a      	lsls	r2, r3, #30
   2b30a:	d515      	bpl.n	2b338 <k_poll_poller_cb+0x3a>
	if (z_is_thread_timeout_expired(thread)) {
   2b30c:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   2b310:	f04f 31ff 	mov.w	r1, #4294967295
   2b314:	f06f 0001 	mvn.w	r0, #1
   2b318:	428b      	cmp	r3, r1
   2b31a:	bf08      	it	eq
   2b31c:	4282      	cmpeq	r2, r0
   2b31e:	d014      	beq.n	2b34a <k_poll_poller_cb+0x4c>
	z_unpend_thread(thread);
   2b320:	4620      	mov	r0, r4
   2b322:	f7ff fdde 	bl	2aee2 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2b326:	2d08      	cmp	r5, #8
   2b328:	bf0c      	ite	eq
   2b32a:	f06f 0303 	mvneq.w	r3, #3
   2b32e:	2300      	movne	r3, #0
   2b330:	67e3      	str	r3, [r4, #124]	; 0x7c
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2b332:	7b63      	ldrb	r3, [r4, #13]
   2b334:	06db      	lsls	r3, r3, #27
   2b336:	d001      	beq.n	2b33c <k_poll_poller_cb+0x3e>
		return 0;
   2b338:	2000      	movs	r0, #0
}
   2b33a:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   2b33c:	69a5      	ldr	r5, [r4, #24]
   2b33e:	2d00      	cmp	r5, #0
   2b340:	d1fa      	bne.n	2b338 <k_poll_poller_cb+0x3a>
	z_ready_thread(thread);
   2b342:	4620      	mov	r0, r4
   2b344:	f7ff fde9 	bl	2af1a <z_ready_thread>
	return 0;
   2b348:	e7f6      	b.n	2b338 <k_poll_poller_cb+0x3a>
		return -EAGAIN;
   2b34a:	f06f 000a 	mvn.w	r0, #10
   2b34e:	e7f4      	b.n	2b33a <k_poll_poller_cb+0x3c>

0002b350 <add_event>:
{
   2b350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b352:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2b354:	e9d0 2300 	ldrd	r2, r3, [r0]
   2b358:	4290      	cmp	r0, r2
   2b35a:	4604      	mov	r4, r0
   2b35c:	460d      	mov	r5, r1
   2b35e:	d106      	bne.n	2b36e <add_event+0x1e>
	node->prev = list->tail;
   2b360:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2b362:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   2b364:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   2b366:	6863      	ldr	r3, [r4, #4]
   2b368:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2b36a:	6065      	str	r5, [r4, #4]
}
   2b36c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2b36e:	2b00      	cmp	r3, #0
   2b370:	d0f6      	beq.n	2b360 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   2b372:	689b      	ldr	r3, [r3, #8]
   2b374:	6879      	ldr	r1, [r7, #4]
   2b376:	6858      	ldr	r0, [r3, #4]
   2b378:	f7ff fd68 	bl	2ae4c <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   2b37c:	2800      	cmp	r0, #0
   2b37e:	d1ef      	bne.n	2b360 <add_event+0x10>
	return list->head == list;
   2b380:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b382:	42b4      	cmp	r4, r6
   2b384:	d0ec      	beq.n	2b360 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2b386:	2e00      	cmp	r6, #0
   2b388:	d0ea      	beq.n	2b360 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   2b38a:	68b3      	ldr	r3, [r6, #8]
   2b38c:	6878      	ldr	r0, [r7, #4]
   2b38e:	6859      	ldr	r1, [r3, #4]
   2b390:	f7ff fd5c 	bl	2ae4c <z_is_t1_higher_prio_than_t2>
   2b394:	b128      	cbz	r0, 2b3a2 <add_event+0x52>
	node->prev = successor->prev;
   2b396:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2b398:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   2b39c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2b39e:	6075      	str	r5, [r6, #4]
			return;
   2b3a0:	e7e4      	b.n	2b36c <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   2b3a2:	6863      	ldr	r3, [r4, #4]
   2b3a4:	429e      	cmp	r6, r3
   2b3a6:	d0db      	beq.n	2b360 <add_event+0x10>
   2b3a8:	6836      	ldr	r6, [r6, #0]
   2b3aa:	e7ec      	b.n	2b386 <add_event+0x36>

0002b3ac <register_events>:
{
   2b3ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2b3b0:	f04f 0a00 	mov.w	sl, #0
{
   2b3b4:	460e      	mov	r6, r1
   2b3b6:	4614      	mov	r4, r2
   2b3b8:	461f      	mov	r7, r3
   2b3ba:	4683      	mov	fp, r0
	int events_registered = 0;
   2b3bc:	4655      	mov	r5, sl
	event->poller = NULL;
   2b3be:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   2b3c0:	45b2      	cmp	sl, r6
   2b3c2:	db02      	blt.n	2b3ca <register_events+0x1e>
}
   2b3c4:	4628      	mov	r0, r5
   2b3c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b3ca:	f04f 0320 	mov.w	r3, #32
   2b3ce:	f3ef 8911 	mrs	r9, BASEPRI
   2b3d2:	f383 8811 	msr	BASEPRI, r3
   2b3d6:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2b3da:	f89b 200d 	ldrb.w	r2, [fp, #13]
   2b3de:	f002 020f 	and.w	r2, r2, #15
   2b3e2:	2a02      	cmp	r2, #2
   2b3e4:	d006      	beq.n	2b3f4 <register_events+0x48>
   2b3e6:	2a04      	cmp	r2, #4
   2b3e8:	d008      	beq.n	2b3fc <register_events+0x50>
   2b3ea:	2a01      	cmp	r2, #1
   2b3ec:	d120      	bne.n	2b430 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   2b3ee:	f8db 3010 	ldr.w	r3, [fp, #16]
   2b3f2:	e001      	b.n	2b3f8 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0) {
   2b3f4:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   2b3f8:	689b      	ldr	r3, [r3, #8]
   2b3fa:	e002      	b.n	2b402 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   2b3fc:	f8db 3010 	ldr.w	r3, [fp, #16]
   2b400:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   2b402:	b1ab      	cbz	r3, 2b430 <register_events+0x84>
	event->state |= state;
   2b404:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   2b408:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   2b40c:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2b410:	430a      	orrs	r2, r1
   2b412:	f362 3310 	bfi	r3, r2, #12, #5
   2b416:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   2b41a:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2b41e:	f389 8811 	msr	BASEPRI, r9
   2b422:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2b426:	f10a 0a01 	add.w	sl, sl, #1
   2b42a:	f10b 0b14 	add.w	fp, fp, #20
   2b42e:	e7c7      	b.n	2b3c0 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   2b430:	2f00      	cmp	r7, #0
   2b432:	d1f4      	bne.n	2b41e <register_events+0x72>
   2b434:	7823      	ldrb	r3, [r4, #0]
   2b436:	2b00      	cmp	r3, #0
   2b438:	d0f1      	beq.n	2b41e <register_events+0x72>
	switch (event->type) {
   2b43a:	f89b 300d 	ldrb.w	r3, [fp, #13]
   2b43e:	f003 030f 	and.w	r3, r3, #15
   2b442:	2b02      	cmp	r3, #2
   2b444:	d008      	beq.n	2b458 <register_events+0xac>
   2b446:	2b04      	cmp	r3, #4
   2b448:	d006      	beq.n	2b458 <register_events+0xac>
   2b44a:	2b01      	cmp	r3, #1
   2b44c:	d10b      	bne.n	2b466 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   2b44e:	4622      	mov	r2, r4
   2b450:	4659      	mov	r1, fp
   2b452:	f8db 0010 	ldr.w	r0, [fp, #16]
   2b456:	e004      	b.n	2b462 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   2b458:	4622      	mov	r2, r4
   2b45a:	4659      	mov	r1, fp
   2b45c:	f8db 0010 	ldr.w	r0, [fp, #16]
   2b460:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   2b462:	f7ff ff75 	bl	2b350 <add_event>
	event->poller = poller;
   2b466:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   2b46a:	3501      	adds	r5, #1
   2b46c:	e7d7      	b.n	2b41e <register_events+0x72>

0002b46e <z_handle_obj_poll_events>:
{
   2b46e:	4603      	mov	r3, r0
	return list->head == list;
   2b470:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2b472:	4283      	cmp	r3, r0
   2b474:	d008      	beq.n	2b488 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   2b476:	e9d0 3200 	ldrd	r3, r2, [r0]
   2b47a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2b47c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2b47e:	2300      	movs	r3, #0
	node->prev = NULL;
   2b480:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2b484:	f7ff bf20 	b.w	2b2c8 <signal_poll_event>
}
   2b488:	4770      	bx	lr

0002b48a <k_mem_pool_malloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   2b48a:	2208      	movs	r2, #8
{
   2b48c:	b530      	push	{r4, r5, lr}
   2b48e:	188a      	adds	r2, r1, r2
   2b490:	b085      	sub	sp, #20
   2b492:	d207      	bcs.n	2b4a4 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   2b494:	2400      	movs	r4, #0
   2b496:	2500      	movs	r5, #0
   2b498:	a902      	add	r1, sp, #8
   2b49a:	e9cd 4500 	strd	r4, r5, [sp]
   2b49e:	f7ff fc19 	bl	2acd4 <k_mem_pool_alloc>
   2b4a2:	b110      	cbz	r0, 2b4aa <k_mem_pool_malloc+0x20>
		return NULL;
   2b4a4:	2000      	movs	r0, #0
}
   2b4a6:	b005      	add	sp, #20
   2b4a8:	bd30      	pop	{r4, r5, pc}
   2b4aa:	9a02      	ldr	r2, [sp, #8]
   2b4ac:	ab02      	add	r3, sp, #8
   2b4ae:	cb03      	ldmia	r3!, {r0, r1}
   2b4b0:	6010      	str	r0, [r2, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   2b4b2:	9802      	ldr	r0, [sp, #8]
   2b4b4:	6051      	str	r1, [r2, #4]
   2b4b6:	3008      	adds	r0, #8
   2b4b8:	e7f5      	b.n	2b4a6 <k_mem_pool_malloc+0x1c>

0002b4ba <k_free>:
	if (ptr != NULL) {
   2b4ba:	b110      	cbz	r0, 2b4c2 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   2b4bc:	3808      	subs	r0, #8
   2b4be:	f7ff bc22 	b.w	2ad06 <k_mem_pool_free_id>
}
   2b4c2:	4770      	bx	lr

0002b4c4 <k_calloc>:
{
   2b4c4:	b513      	push	{r0, r1, r4, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   2b4c6:	fb01 f200 	mul.w	r2, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   2b4ca:	b118      	cbz	r0, 2b4d4 <k_calloc+0x10>
   2b4cc:	fbb2 f0f0 	udiv	r0, r2, r0
   2b4d0:	4281      	cmp	r1, r0
   2b4d2:	d10c      	bne.n	2b4ee <k_calloc+0x2a>
	ret = k_malloc(bounds);
   2b4d4:	4610      	mov	r0, r2
   2b4d6:	9201      	str	r2, [sp, #4]
   2b4d8:	f7f6 fb18 	bl	21b0c <k_malloc>
	if (ret != NULL) {
   2b4dc:	4604      	mov	r4, r0
   2b4de:	b118      	cbz	r0, 2b4e8 <k_calloc+0x24>
__ssp_bos_icheck3(memset, void *, int)
   2b4e0:	2100      	movs	r1, #0
   2b4e2:	9a01      	ldr	r2, [sp, #4]
   2b4e4:	f7f6 feb2 	bl	2224c <memset>
}
   2b4e8:	4620      	mov	r0, r4
   2b4ea:	b002      	add	sp, #8
   2b4ec:	bd10      	pop	{r4, pc}
		return NULL;
   2b4ee:	2400      	movs	r4, #0
   2b4f0:	e7fa      	b.n	2b4e8 <k_calloc+0x24>

0002b4f2 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   2b4f2:	4770      	bx	lr
