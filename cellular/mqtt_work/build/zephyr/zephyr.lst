
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_start>:
    c000:	20029310 	.word	0x20029310
    c004:	000149a1 	.word	0x000149a1
    c008:	0002ccb5 	.word	0x0002ccb5
    c00c:	000149d1 	.word	0x000149d1
    c010:	000149d1 	.word	0x000149d1
    c014:	000149d1 	.word	0x000149d1
    c018:	000149d1 	.word	0x000149d1
    c01c:	000149d1 	.word	0x000149d1
	...
    c02c:	00014675 	.word	0x00014675
    c030:	000149d1 	.word	0x000149d1
    c034:	00000000 	.word	0x00000000
    c038:	000145c5 	.word	0x000145c5
    c03c:	000142b1 	.word	0x000142b1

0000c040 <_irq_vector_table>:
    c040:	00014961 00014961 00014961 00014961     aI..aI..aI..aI..
    c050:	00014961 00014961 00014961 00014961     aI..aI..aI..aI..
    c060:	00014961 00014961 00014961 00014961     aI..aI..aI..aI..
    c070:	00014961 00014961 00014961 00014961     aI..aI..aI..aI..
    c080:	00014961 00014961 00014961 00014961     aI..aI..aI..aI..
    c090:	00014961 00014961 00014961 00014961     aI..aI..aI..aI..
    c0a0:	00014961 00014961 00014961 00014961     aI..aI..aI..aI..
    c0b0:	00016a01 0002dbcd 00014961 00014961     .j......aI..aI..
    c0c0:	00014961 00014961 00014961 00014961     aI..aI..aI..aI..
    c0d0:	00014961 00014961 00014961 00014961     aI..aI..aI..aI..
    c0e0:	00014961 00014961 0002dbeb 00014961     aI..aI......aI..
    c0f0:	00014961 00014961 00014961 00014961     aI..aI..aI..aI..
    c100:	00014961 00014961 00014961 00014961     aI..aI..aI..aI..
    c110:	00014961 00014961 00014961 00014961     aI..aI..aI..aI..
    c120:	00014961 00014961 00014961 00014961     aI..aI..aI..aI..
    c130:	00014961 00014961 00014961 00014961     aI..aI..aI..aI..
    c140:	00014961                                aI..

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	00027c7c 00000001 0000c000 0000c000     ||..............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <__aeabi_drsub>:
    c240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c244:	e002      	b.n	c24c <__adddf3>
    c246:	bf00      	nop

0000c248 <__aeabi_dsub>:
    c248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c24c <__adddf3>:
    c24c:	b530      	push	{r4, r5, lr}
    c24e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c256:	ea94 0f05 	teq	r4, r5
    c25a:	bf08      	it	eq
    c25c:	ea90 0f02 	teqeq	r0, r2
    c260:	bf1f      	itttt	ne
    c262:	ea54 0c00 	orrsne.w	ip, r4, r0
    c266:	ea55 0c02 	orrsne.w	ip, r5, r2
    c26a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c26e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c272:	f000 80e2 	beq.w	c43a <__adddf3+0x1ee>
    c276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c27a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c27e:	bfb8      	it	lt
    c280:	426d      	neglt	r5, r5
    c282:	dd0c      	ble.n	c29e <__adddf3+0x52>
    c284:	442c      	add	r4, r5
    c286:	ea80 0202 	eor.w	r2, r0, r2
    c28a:	ea81 0303 	eor.w	r3, r1, r3
    c28e:	ea82 0000 	eor.w	r0, r2, r0
    c292:	ea83 0101 	eor.w	r1, r3, r1
    c296:	ea80 0202 	eor.w	r2, r0, r2
    c29a:	ea81 0303 	eor.w	r3, r1, r3
    c29e:	2d36      	cmp	r5, #54	; 0x36
    c2a0:	bf88      	it	hi
    c2a2:	bd30      	pophi	{r4, r5, pc}
    c2a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c2a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c2ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c2b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c2b4:	d002      	beq.n	c2bc <__adddf3+0x70>
    c2b6:	4240      	negs	r0, r0
    c2b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2c8:	d002      	beq.n	c2d0 <__adddf3+0x84>
    c2ca:	4252      	negs	r2, r2
    c2cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2d0:	ea94 0f05 	teq	r4, r5
    c2d4:	f000 80a7 	beq.w	c426 <__adddf3+0x1da>
    c2d8:	f1a4 0401 	sub.w	r4, r4, #1
    c2dc:	f1d5 0e20 	rsbs	lr, r5, #32
    c2e0:	db0d      	blt.n	c2fe <__adddf3+0xb2>
    c2e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2e6:	fa22 f205 	lsr.w	r2, r2, r5
    c2ea:	1880      	adds	r0, r0, r2
    c2ec:	f141 0100 	adc.w	r1, r1, #0
    c2f0:	fa03 f20e 	lsl.w	r2, r3, lr
    c2f4:	1880      	adds	r0, r0, r2
    c2f6:	fa43 f305 	asr.w	r3, r3, r5
    c2fa:	4159      	adcs	r1, r3
    c2fc:	e00e      	b.n	c31c <__adddf3+0xd0>
    c2fe:	f1a5 0520 	sub.w	r5, r5, #32
    c302:	f10e 0e20 	add.w	lr, lr, #32
    c306:	2a01      	cmp	r2, #1
    c308:	fa03 fc0e 	lsl.w	ip, r3, lr
    c30c:	bf28      	it	cs
    c30e:	f04c 0c02 	orrcs.w	ip, ip, #2
    c312:	fa43 f305 	asr.w	r3, r3, r5
    c316:	18c0      	adds	r0, r0, r3
    c318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c31c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c320:	d507      	bpl.n	c332 <__adddf3+0xe6>
    c322:	f04f 0e00 	mov.w	lr, #0
    c326:	f1dc 0c00 	rsbs	ip, ip, #0
    c32a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c32e:	eb6e 0101 	sbc.w	r1, lr, r1
    c332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c336:	d31b      	bcc.n	c370 <__adddf3+0x124>
    c338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c33c:	d30c      	bcc.n	c358 <__adddf3+0x10c>
    c33e:	0849      	lsrs	r1, r1, #1
    c340:	ea5f 0030 	movs.w	r0, r0, rrx
    c344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c348:	f104 0401 	add.w	r4, r4, #1
    c34c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c354:	f080 809a 	bcs.w	c48c <__adddf3+0x240>
    c358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c35c:	bf08      	it	eq
    c35e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c362:	f150 0000 	adcs.w	r0, r0, #0
    c366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c36a:	ea41 0105 	orr.w	r1, r1, r5
    c36e:	bd30      	pop	{r4, r5, pc}
    c370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c374:	4140      	adcs	r0, r0
    c376:	eb41 0101 	adc.w	r1, r1, r1
    c37a:	3c01      	subs	r4, #1
    c37c:	bf28      	it	cs
    c37e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c382:	d2e9      	bcs.n	c358 <__adddf3+0x10c>
    c384:	f091 0f00 	teq	r1, #0
    c388:	bf04      	itt	eq
    c38a:	4601      	moveq	r1, r0
    c38c:	2000      	moveq	r0, #0
    c38e:	fab1 f381 	clz	r3, r1
    c392:	bf08      	it	eq
    c394:	3320      	addeq	r3, #32
    c396:	f1a3 030b 	sub.w	r3, r3, #11
    c39a:	f1b3 0220 	subs.w	r2, r3, #32
    c39e:	da0c      	bge.n	c3ba <__adddf3+0x16e>
    c3a0:	320c      	adds	r2, #12
    c3a2:	dd08      	ble.n	c3b6 <__adddf3+0x16a>
    c3a4:	f102 0c14 	add.w	ip, r2, #20
    c3a8:	f1c2 020c 	rsb	r2, r2, #12
    c3ac:	fa01 f00c 	lsl.w	r0, r1, ip
    c3b0:	fa21 f102 	lsr.w	r1, r1, r2
    c3b4:	e00c      	b.n	c3d0 <__adddf3+0x184>
    c3b6:	f102 0214 	add.w	r2, r2, #20
    c3ba:	bfd8      	it	le
    c3bc:	f1c2 0c20 	rsble	ip, r2, #32
    c3c0:	fa01 f102 	lsl.w	r1, r1, r2
    c3c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3c8:	bfdc      	itt	le
    c3ca:	ea41 010c 	orrle.w	r1, r1, ip
    c3ce:	4090      	lslle	r0, r2
    c3d0:	1ae4      	subs	r4, r4, r3
    c3d2:	bfa2      	ittt	ge
    c3d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3d8:	4329      	orrge	r1, r5
    c3da:	bd30      	popge	{r4, r5, pc}
    c3dc:	ea6f 0404 	mvn.w	r4, r4
    c3e0:	3c1f      	subs	r4, #31
    c3e2:	da1c      	bge.n	c41e <__adddf3+0x1d2>
    c3e4:	340c      	adds	r4, #12
    c3e6:	dc0e      	bgt.n	c406 <__adddf3+0x1ba>
    c3e8:	f104 0414 	add.w	r4, r4, #20
    c3ec:	f1c4 0220 	rsb	r2, r4, #32
    c3f0:	fa20 f004 	lsr.w	r0, r0, r4
    c3f4:	fa01 f302 	lsl.w	r3, r1, r2
    c3f8:	ea40 0003 	orr.w	r0, r0, r3
    c3fc:	fa21 f304 	lsr.w	r3, r1, r4
    c400:	ea45 0103 	orr.w	r1, r5, r3
    c404:	bd30      	pop	{r4, r5, pc}
    c406:	f1c4 040c 	rsb	r4, r4, #12
    c40a:	f1c4 0220 	rsb	r2, r4, #32
    c40e:	fa20 f002 	lsr.w	r0, r0, r2
    c412:	fa01 f304 	lsl.w	r3, r1, r4
    c416:	ea40 0003 	orr.w	r0, r0, r3
    c41a:	4629      	mov	r1, r5
    c41c:	bd30      	pop	{r4, r5, pc}
    c41e:	fa21 f004 	lsr.w	r0, r1, r4
    c422:	4629      	mov	r1, r5
    c424:	bd30      	pop	{r4, r5, pc}
    c426:	f094 0f00 	teq	r4, #0
    c42a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c42e:	bf06      	itte	eq
    c430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c434:	3401      	addeq	r4, #1
    c436:	3d01      	subne	r5, #1
    c438:	e74e      	b.n	c2d8 <__adddf3+0x8c>
    c43a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c43e:	bf18      	it	ne
    c440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c444:	d029      	beq.n	c49a <__adddf3+0x24e>
    c446:	ea94 0f05 	teq	r4, r5
    c44a:	bf08      	it	eq
    c44c:	ea90 0f02 	teqeq	r0, r2
    c450:	d005      	beq.n	c45e <__adddf3+0x212>
    c452:	ea54 0c00 	orrs.w	ip, r4, r0
    c456:	bf04      	itt	eq
    c458:	4619      	moveq	r1, r3
    c45a:	4610      	moveq	r0, r2
    c45c:	bd30      	pop	{r4, r5, pc}
    c45e:	ea91 0f03 	teq	r1, r3
    c462:	bf1e      	ittt	ne
    c464:	2100      	movne	r1, #0
    c466:	2000      	movne	r0, #0
    c468:	bd30      	popne	{r4, r5, pc}
    c46a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c46e:	d105      	bne.n	c47c <__adddf3+0x230>
    c470:	0040      	lsls	r0, r0, #1
    c472:	4149      	adcs	r1, r1
    c474:	bf28      	it	cs
    c476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c47a:	bd30      	pop	{r4, r5, pc}
    c47c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c480:	bf3c      	itt	cc
    c482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c486:	bd30      	popcc	{r4, r5, pc}
    c488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c48c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c494:	f04f 0000 	mov.w	r0, #0
    c498:	bd30      	pop	{r4, r5, pc}
    c49a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c49e:	bf1a      	itte	ne
    c4a0:	4619      	movne	r1, r3
    c4a2:	4610      	movne	r0, r2
    c4a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c4a8:	bf1c      	itt	ne
    c4aa:	460b      	movne	r3, r1
    c4ac:	4602      	movne	r2, r0
    c4ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c4b2:	bf06      	itte	eq
    c4b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c4b8:	ea91 0f03 	teqeq	r1, r3
    c4bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4c0:	bd30      	pop	{r4, r5, pc}
    c4c2:	bf00      	nop

0000c4c4 <__aeabi_ui2d>:
    c4c4:	f090 0f00 	teq	r0, #0
    c4c8:	bf04      	itt	eq
    c4ca:	2100      	moveq	r1, #0
    c4cc:	4770      	bxeq	lr
    c4ce:	b530      	push	{r4, r5, lr}
    c4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d8:	f04f 0500 	mov.w	r5, #0
    c4dc:	f04f 0100 	mov.w	r1, #0
    c4e0:	e750      	b.n	c384 <__adddf3+0x138>
    c4e2:	bf00      	nop

0000c4e4 <__aeabi_i2d>:
    c4e4:	f090 0f00 	teq	r0, #0
    c4e8:	bf04      	itt	eq
    c4ea:	2100      	moveq	r1, #0
    c4ec:	4770      	bxeq	lr
    c4ee:	b530      	push	{r4, r5, lr}
    c4f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4fc:	bf48      	it	mi
    c4fe:	4240      	negmi	r0, r0
    c500:	f04f 0100 	mov.w	r1, #0
    c504:	e73e      	b.n	c384 <__adddf3+0x138>
    c506:	bf00      	nop

0000c508 <__aeabi_f2d>:
    c508:	0042      	lsls	r2, r0, #1
    c50a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c50e:	ea4f 0131 	mov.w	r1, r1, rrx
    c512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c516:	bf1f      	itttt	ne
    c518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c51c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c524:	4770      	bxne	lr
    c526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c52a:	bf08      	it	eq
    c52c:	4770      	bxeq	lr
    c52e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c532:	bf04      	itt	eq
    c534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c538:	4770      	bxeq	lr
    c53a:	b530      	push	{r4, r5, lr}
    c53c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c548:	e71c      	b.n	c384 <__adddf3+0x138>
    c54a:	bf00      	nop

0000c54c <__aeabi_ul2d>:
    c54c:	ea50 0201 	orrs.w	r2, r0, r1
    c550:	bf08      	it	eq
    c552:	4770      	bxeq	lr
    c554:	b530      	push	{r4, r5, lr}
    c556:	f04f 0500 	mov.w	r5, #0
    c55a:	e00a      	b.n	c572 <__aeabi_l2d+0x16>

0000c55c <__aeabi_l2d>:
    c55c:	ea50 0201 	orrs.w	r2, r0, r1
    c560:	bf08      	it	eq
    c562:	4770      	bxeq	lr
    c564:	b530      	push	{r4, r5, lr}
    c566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c56a:	d502      	bpl.n	c572 <__aeabi_l2d+0x16>
    c56c:	4240      	negs	r0, r0
    c56e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c57a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c57e:	f43f aed8 	beq.w	c332 <__adddf3+0xe6>
    c582:	f04f 0203 	mov.w	r2, #3
    c586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c58a:	bf18      	it	ne
    c58c:	3203      	addne	r2, #3
    c58e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c592:	bf18      	it	ne
    c594:	3203      	addne	r2, #3
    c596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c59a:	f1c2 0320 	rsb	r3, r2, #32
    c59e:	fa00 fc03 	lsl.w	ip, r0, r3
    c5a2:	fa20 f002 	lsr.w	r0, r0, r2
    c5a6:	fa01 fe03 	lsl.w	lr, r1, r3
    c5aa:	ea40 000e 	orr.w	r0, r0, lr
    c5ae:	fa21 f102 	lsr.w	r1, r1, r2
    c5b2:	4414      	add	r4, r2
    c5b4:	e6bd      	b.n	c332 <__adddf3+0xe6>
    c5b6:	bf00      	nop

0000c5b8 <__gedf2>:
    c5b8:	f04f 3cff 	mov.w	ip, #4294967295
    c5bc:	e006      	b.n	c5cc <__cmpdf2+0x4>
    c5be:	bf00      	nop

0000c5c0 <__ledf2>:
    c5c0:	f04f 0c01 	mov.w	ip, #1
    c5c4:	e002      	b.n	c5cc <__cmpdf2+0x4>
    c5c6:	bf00      	nop

0000c5c8 <__cmpdf2>:
    c5c8:	f04f 0c01 	mov.w	ip, #1
    c5cc:	f84d cd04 	str.w	ip, [sp, #-4]!
    c5d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c5d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c5d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c5dc:	bf18      	it	ne
    c5de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    c5e2:	d01b      	beq.n	c61c <__cmpdf2+0x54>
    c5e4:	b001      	add	sp, #4
    c5e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    c5ea:	bf0c      	ite	eq
    c5ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    c5f0:	ea91 0f03 	teqne	r1, r3
    c5f4:	bf02      	ittt	eq
    c5f6:	ea90 0f02 	teqeq	r0, r2
    c5fa:	2000      	moveq	r0, #0
    c5fc:	4770      	bxeq	lr
    c5fe:	f110 0f00 	cmn.w	r0, #0
    c602:	ea91 0f03 	teq	r1, r3
    c606:	bf58      	it	pl
    c608:	4299      	cmppl	r1, r3
    c60a:	bf08      	it	eq
    c60c:	4290      	cmpeq	r0, r2
    c60e:	bf2c      	ite	cs
    c610:	17d8      	asrcs	r0, r3, #31
    c612:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    c616:	f040 0001 	orr.w	r0, r0, #1
    c61a:	4770      	bx	lr
    c61c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c624:	d102      	bne.n	c62c <__cmpdf2+0x64>
    c626:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    c62a:	d107      	bne.n	c63c <__cmpdf2+0x74>
    c62c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c630:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c634:	d1d6      	bne.n	c5e4 <__cmpdf2+0x1c>
    c636:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    c63a:	d0d3      	beq.n	c5e4 <__cmpdf2+0x1c>
    c63c:	f85d 0b04 	ldr.w	r0, [sp], #4
    c640:	4770      	bx	lr
    c642:	bf00      	nop

0000c644 <__aeabi_cdrcmple>:
    c644:	4684      	mov	ip, r0
    c646:	4610      	mov	r0, r2
    c648:	4662      	mov	r2, ip
    c64a:	468c      	mov	ip, r1
    c64c:	4619      	mov	r1, r3
    c64e:	4663      	mov	r3, ip
    c650:	e000      	b.n	c654 <__aeabi_cdcmpeq>
    c652:	bf00      	nop

0000c654 <__aeabi_cdcmpeq>:
    c654:	b501      	push	{r0, lr}
    c656:	f7ff ffb7 	bl	c5c8 <__cmpdf2>
    c65a:	2800      	cmp	r0, #0
    c65c:	bf48      	it	mi
    c65e:	f110 0f00 	cmnmi.w	r0, #0
    c662:	bd01      	pop	{r0, pc}

0000c664 <__aeabi_dcmpeq>:
    c664:	f84d ed08 	str.w	lr, [sp, #-8]!
    c668:	f7ff fff4 	bl	c654 <__aeabi_cdcmpeq>
    c66c:	bf0c      	ite	eq
    c66e:	2001      	moveq	r0, #1
    c670:	2000      	movne	r0, #0
    c672:	f85d fb08 	ldr.w	pc, [sp], #8
    c676:	bf00      	nop

0000c678 <__aeabi_dcmplt>:
    c678:	f84d ed08 	str.w	lr, [sp, #-8]!
    c67c:	f7ff ffea 	bl	c654 <__aeabi_cdcmpeq>
    c680:	bf34      	ite	cc
    c682:	2001      	movcc	r0, #1
    c684:	2000      	movcs	r0, #0
    c686:	f85d fb08 	ldr.w	pc, [sp], #8
    c68a:	bf00      	nop

0000c68c <__aeabi_dcmple>:
    c68c:	f84d ed08 	str.w	lr, [sp, #-8]!
    c690:	f7ff ffe0 	bl	c654 <__aeabi_cdcmpeq>
    c694:	bf94      	ite	ls
    c696:	2001      	movls	r0, #1
    c698:	2000      	movhi	r0, #0
    c69a:	f85d fb08 	ldr.w	pc, [sp], #8
    c69e:	bf00      	nop

0000c6a0 <__aeabi_dcmpge>:
    c6a0:	f84d ed08 	str.w	lr, [sp, #-8]!
    c6a4:	f7ff ffce 	bl	c644 <__aeabi_cdrcmple>
    c6a8:	bf94      	ite	ls
    c6aa:	2001      	movls	r0, #1
    c6ac:	2000      	movhi	r0, #0
    c6ae:	f85d fb08 	ldr.w	pc, [sp], #8
    c6b2:	bf00      	nop

0000c6b4 <__aeabi_dcmpgt>:
    c6b4:	f84d ed08 	str.w	lr, [sp, #-8]!
    c6b8:	f7ff ffc4 	bl	c644 <__aeabi_cdrcmple>
    c6bc:	bf34      	ite	cc
    c6be:	2001      	movcc	r0, #1
    c6c0:	2000      	movcs	r0, #0
    c6c2:	f85d fb08 	ldr.w	pc, [sp], #8
    c6c6:	bf00      	nop

0000c6c8 <__aeabi_d2iz>:
    c6c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c6cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c6d0:	d215      	bcs.n	c6fe <__aeabi_d2iz+0x36>
    c6d2:	d511      	bpl.n	c6f8 <__aeabi_d2iz+0x30>
    c6d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    c6d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c6dc:	d912      	bls.n	c704 <__aeabi_d2iz+0x3c>
    c6de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c6e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c6e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c6ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c6ee:	fa23 f002 	lsr.w	r0, r3, r2
    c6f2:	bf18      	it	ne
    c6f4:	4240      	negne	r0, r0
    c6f6:	4770      	bx	lr
    c6f8:	f04f 0000 	mov.w	r0, #0
    c6fc:	4770      	bx	lr
    c6fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c702:	d105      	bne.n	c710 <__aeabi_d2iz+0x48>
    c704:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    c708:	bf08      	it	eq
    c70a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    c70e:	4770      	bx	lr
    c710:	f04f 0000 	mov.w	r0, #0
    c714:	4770      	bx	lr
    c716:	bf00      	nop

0000c718 <__aeabi_d2f>:
    c718:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c71c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c720:	bf24      	itt	cs
    c722:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c726:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c72a:	d90d      	bls.n	c748 <__aeabi_d2f+0x30>
    c72c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c730:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c734:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c738:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c73c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c740:	bf08      	it	eq
    c742:	f020 0001 	biceq.w	r0, r0, #1
    c746:	4770      	bx	lr
    c748:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c74c:	d121      	bne.n	c792 <__aeabi_d2f+0x7a>
    c74e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c752:	bfbc      	itt	lt
    c754:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c758:	4770      	bxlt	lr
    c75a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c75e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c762:	f1c2 0218 	rsb	r2, r2, #24
    c766:	f1c2 0c20 	rsb	ip, r2, #32
    c76a:	fa10 f30c 	lsls.w	r3, r0, ip
    c76e:	fa20 f002 	lsr.w	r0, r0, r2
    c772:	bf18      	it	ne
    c774:	f040 0001 	orrne.w	r0, r0, #1
    c778:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c77c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c780:	fa03 fc0c 	lsl.w	ip, r3, ip
    c784:	ea40 000c 	orr.w	r0, r0, ip
    c788:	fa23 f302 	lsr.w	r3, r3, r2
    c78c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c790:	e7cc      	b.n	c72c <__aeabi_d2f+0x14>
    c792:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c796:	d107      	bne.n	c7a8 <__aeabi_d2f+0x90>
    c798:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c79c:	bf1e      	ittt	ne
    c79e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c7a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c7a6:	4770      	bxne	lr
    c7a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c7ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c7b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c7b4:	4770      	bx	lr
    c7b6:	bf00      	nop

0000c7b8 <__aeabi_ldivmod>:
    c7b8:	b97b      	cbnz	r3, c7da <__aeabi_ldivmod+0x22>
    c7ba:	b972      	cbnz	r2, c7da <__aeabi_ldivmod+0x22>
    c7bc:	2900      	cmp	r1, #0
    c7be:	bfbe      	ittt	lt
    c7c0:	2000      	movlt	r0, #0
    c7c2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    c7c6:	e006      	blt.n	c7d6 <__aeabi_ldivmod+0x1e>
    c7c8:	bf08      	it	eq
    c7ca:	2800      	cmpeq	r0, #0
    c7cc:	bf1c      	itt	ne
    c7ce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    c7d2:	f04f 30ff 	movne.w	r0, #4294967295
    c7d6:	f000 b9b7 	b.w	cb48 <__aeabi_idiv0>
    c7da:	f1ad 0c08 	sub.w	ip, sp, #8
    c7de:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c7e2:	2900      	cmp	r1, #0
    c7e4:	db09      	blt.n	c7fa <__aeabi_ldivmod+0x42>
    c7e6:	2b00      	cmp	r3, #0
    c7e8:	db1a      	blt.n	c820 <__aeabi_ldivmod+0x68>
    c7ea:	f000 f84d 	bl	c888 <__udivmoddi4>
    c7ee:	f8dd e004 	ldr.w	lr, [sp, #4]
    c7f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c7f6:	b004      	add	sp, #16
    c7f8:	4770      	bx	lr
    c7fa:	4240      	negs	r0, r0
    c7fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c800:	2b00      	cmp	r3, #0
    c802:	db1b      	blt.n	c83c <__aeabi_ldivmod+0x84>
    c804:	f000 f840 	bl	c888 <__udivmoddi4>
    c808:	f8dd e004 	ldr.w	lr, [sp, #4]
    c80c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c810:	b004      	add	sp, #16
    c812:	4240      	negs	r0, r0
    c814:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c818:	4252      	negs	r2, r2
    c81a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c81e:	4770      	bx	lr
    c820:	4252      	negs	r2, r2
    c822:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c826:	f000 f82f 	bl	c888 <__udivmoddi4>
    c82a:	f8dd e004 	ldr.w	lr, [sp, #4]
    c82e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c832:	b004      	add	sp, #16
    c834:	4240      	negs	r0, r0
    c836:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c83a:	4770      	bx	lr
    c83c:	4252      	negs	r2, r2
    c83e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c842:	f000 f821 	bl	c888 <__udivmoddi4>
    c846:	f8dd e004 	ldr.w	lr, [sp, #4]
    c84a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c84e:	b004      	add	sp, #16
    c850:	4252      	negs	r2, r2
    c852:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c856:	4770      	bx	lr

0000c858 <__aeabi_uldivmod>:
    c858:	b953      	cbnz	r3, c870 <__aeabi_uldivmod+0x18>
    c85a:	b94a      	cbnz	r2, c870 <__aeabi_uldivmod+0x18>
    c85c:	2900      	cmp	r1, #0
    c85e:	bf08      	it	eq
    c860:	2800      	cmpeq	r0, #0
    c862:	bf1c      	itt	ne
    c864:	f04f 31ff 	movne.w	r1, #4294967295
    c868:	f04f 30ff 	movne.w	r0, #4294967295
    c86c:	f000 b96c 	b.w	cb48 <__aeabi_idiv0>
    c870:	f1ad 0c08 	sub.w	ip, sp, #8
    c874:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c878:	f000 f806 	bl	c888 <__udivmoddi4>
    c87c:	f8dd e004 	ldr.w	lr, [sp, #4]
    c880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c884:	b004      	add	sp, #16
    c886:	4770      	bx	lr

0000c888 <__udivmoddi4>:
    c888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c88c:	9d08      	ldr	r5, [sp, #32]
    c88e:	4604      	mov	r4, r0
    c890:	4688      	mov	r8, r1
    c892:	2b00      	cmp	r3, #0
    c894:	d17d      	bne.n	c992 <__udivmoddi4+0x10a>
    c896:	428a      	cmp	r2, r1
    c898:	4617      	mov	r7, r2
    c89a:	d93f      	bls.n	c91c <__udivmoddi4+0x94>
    c89c:	fab2 f282 	clz	r2, r2
    c8a0:	b142      	cbz	r2, c8b4 <__udivmoddi4+0x2c>
    c8a2:	f1c2 0020 	rsb	r0, r2, #32
    c8a6:	4091      	lsls	r1, r2
    c8a8:	4097      	lsls	r7, r2
    c8aa:	fa24 f000 	lsr.w	r0, r4, r0
    c8ae:	4094      	lsls	r4, r2
    c8b0:	ea40 0801 	orr.w	r8, r0, r1
    c8b4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    c8b8:	0c23      	lsrs	r3, r4, #16
    c8ba:	fa1f fe87 	uxth.w	lr, r7
    c8be:	fbb8 f6fc 	udiv	r6, r8, ip
    c8c2:	fb0c 8116 	mls	r1, ip, r6, r8
    c8c6:	fb06 f00e 	mul.w	r0, r6, lr
    c8ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c8ce:	4298      	cmp	r0, r3
    c8d0:	d905      	bls.n	c8de <__udivmoddi4+0x56>
    c8d2:	18fb      	adds	r3, r7, r3
    c8d4:	d202      	bcs.n	c8dc <__udivmoddi4+0x54>
    c8d6:	4298      	cmp	r0, r3
    c8d8:	f200 8124 	bhi.w	cb24 <__udivmoddi4+0x29c>
    c8dc:	3e01      	subs	r6, #1
    c8de:	1a19      	subs	r1, r3, r0
    c8e0:	b2a3      	uxth	r3, r4
    c8e2:	fbb1 f0fc 	udiv	r0, r1, ip
    c8e6:	fb0c 1110 	mls	r1, ip, r0, r1
    c8ea:	fb00 fe0e 	mul.w	lr, r0, lr
    c8ee:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c8f2:	45a6      	cmp	lr, r4
    c8f4:	d905      	bls.n	c902 <__udivmoddi4+0x7a>
    c8f6:	193c      	adds	r4, r7, r4
    c8f8:	d202      	bcs.n	c900 <__udivmoddi4+0x78>
    c8fa:	45a6      	cmp	lr, r4
    c8fc:	f200 810f 	bhi.w	cb1e <__udivmoddi4+0x296>
    c900:	3801      	subs	r0, #1
    c902:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    c906:	eba4 040e 	sub.w	r4, r4, lr
    c90a:	2600      	movs	r6, #0
    c90c:	b11d      	cbz	r5, c916 <__udivmoddi4+0x8e>
    c90e:	40d4      	lsrs	r4, r2
    c910:	2300      	movs	r3, #0
    c912:	e9c5 4300 	strd	r4, r3, [r5]
    c916:	4631      	mov	r1, r6
    c918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c91c:	b902      	cbnz	r2, c920 <__udivmoddi4+0x98>
    c91e:	deff      	udf	#255	; 0xff
    c920:	fab2 f282 	clz	r2, r2
    c924:	2a00      	cmp	r2, #0
    c926:	d150      	bne.n	c9ca <__udivmoddi4+0x142>
    c928:	1bcb      	subs	r3, r1, r7
    c92a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c92e:	fa1f f887 	uxth.w	r8, r7
    c932:	2601      	movs	r6, #1
    c934:	0c21      	lsrs	r1, r4, #16
    c936:	fbb3 fcfe 	udiv	ip, r3, lr
    c93a:	fb0e 301c 	mls	r0, lr, ip, r3
    c93e:	460b      	mov	r3, r1
    c940:	fb08 f90c 	mul.w	r9, r8, ip
    c944:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c948:	4589      	cmp	r9, r1
    c94a:	d90a      	bls.n	c962 <__udivmoddi4+0xda>
    c94c:	1879      	adds	r1, r7, r1
    c94e:	bf2c      	ite	cs
    c950:	2301      	movcs	r3, #1
    c952:	2300      	movcc	r3, #0
    c954:	4589      	cmp	r9, r1
    c956:	d902      	bls.n	c95e <__udivmoddi4+0xd6>
    c958:	2b00      	cmp	r3, #0
    c95a:	f000 80d9 	beq.w	cb10 <__udivmoddi4+0x288>
    c95e:	f10c 3cff 	add.w	ip, ip, #4294967295
    c962:	eba1 0109 	sub.w	r1, r1, r9
    c966:	b2a3      	uxth	r3, r4
    c968:	fbb1 f0fe 	udiv	r0, r1, lr
    c96c:	fb0e 1110 	mls	r1, lr, r0, r1
    c970:	fb08 f800 	mul.w	r8, r8, r0
    c974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c978:	45a0      	cmp	r8, r4
    c97a:	d905      	bls.n	c988 <__udivmoddi4+0x100>
    c97c:	193c      	adds	r4, r7, r4
    c97e:	d202      	bcs.n	c986 <__udivmoddi4+0xfe>
    c980:	45a0      	cmp	r8, r4
    c982:	f200 80c9 	bhi.w	cb18 <__udivmoddi4+0x290>
    c986:	3801      	subs	r0, #1
    c988:	eba4 0408 	sub.w	r4, r4, r8
    c98c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c990:	e7bc      	b.n	c90c <__udivmoddi4+0x84>
    c992:	428b      	cmp	r3, r1
    c994:	d909      	bls.n	c9aa <__udivmoddi4+0x122>
    c996:	2d00      	cmp	r5, #0
    c998:	f000 80b1 	beq.w	cafe <__udivmoddi4+0x276>
    c99c:	2600      	movs	r6, #0
    c99e:	e9c5 0100 	strd	r0, r1, [r5]
    c9a2:	4630      	mov	r0, r6
    c9a4:	4631      	mov	r1, r6
    c9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c9aa:	fab3 f683 	clz	r6, r3
    c9ae:	2e00      	cmp	r6, #0
    c9b0:	d146      	bne.n	ca40 <__udivmoddi4+0x1b8>
    c9b2:	428b      	cmp	r3, r1
    c9b4:	f0c0 80a6 	bcc.w	cb04 <__udivmoddi4+0x27c>
    c9b8:	4282      	cmp	r2, r0
    c9ba:	f240 80a3 	bls.w	cb04 <__udivmoddi4+0x27c>
    c9be:	4630      	mov	r0, r6
    c9c0:	2d00      	cmp	r5, #0
    c9c2:	d0a8      	beq.n	c916 <__udivmoddi4+0x8e>
    c9c4:	e9c5 4800 	strd	r4, r8, [r5]
    c9c8:	e7a5      	b.n	c916 <__udivmoddi4+0x8e>
    c9ca:	4097      	lsls	r7, r2
    c9cc:	f1c2 0320 	rsb	r3, r2, #32
    c9d0:	fa01 f002 	lsl.w	r0, r1, r2
    c9d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c9d8:	40d9      	lsrs	r1, r3
    c9da:	fa24 f303 	lsr.w	r3, r4, r3
    c9de:	fa1f f887 	uxth.w	r8, r7
    c9e2:	4094      	lsls	r4, r2
    c9e4:	4303      	orrs	r3, r0
    c9e6:	fbb1 f0fe 	udiv	r0, r1, lr
    c9ea:	0c1e      	lsrs	r6, r3, #16
    c9ec:	fb0e 1110 	mls	r1, lr, r0, r1
    c9f0:	fb00 fc08 	mul.w	ip, r0, r8
    c9f4:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    c9f8:	458c      	cmp	ip, r1
    c9fa:	d909      	bls.n	ca10 <__udivmoddi4+0x188>
    c9fc:	1879      	adds	r1, r7, r1
    c9fe:	bf2c      	ite	cs
    ca00:	2601      	movcs	r6, #1
    ca02:	2600      	movcc	r6, #0
    ca04:	458c      	cmp	ip, r1
    ca06:	d902      	bls.n	ca0e <__udivmoddi4+0x186>
    ca08:	2e00      	cmp	r6, #0
    ca0a:	f000 8093 	beq.w	cb34 <__udivmoddi4+0x2ac>
    ca0e:	3801      	subs	r0, #1
    ca10:	eba1 010c 	sub.w	r1, r1, ip
    ca14:	b29b      	uxth	r3, r3
    ca16:	fbb1 f6fe 	udiv	r6, r1, lr
    ca1a:	fb0e 1116 	mls	r1, lr, r6, r1
    ca1e:	fb06 fc08 	mul.w	ip, r6, r8
    ca22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    ca26:	458c      	cmp	ip, r1
    ca28:	d905      	bls.n	ca36 <__udivmoddi4+0x1ae>
    ca2a:	1879      	adds	r1, r7, r1
    ca2c:	d202      	bcs.n	ca34 <__udivmoddi4+0x1ac>
    ca2e:	458c      	cmp	ip, r1
    ca30:	f200 8087 	bhi.w	cb42 <__udivmoddi4+0x2ba>
    ca34:	3e01      	subs	r6, #1
    ca36:	eba1 030c 	sub.w	r3, r1, ip
    ca3a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
    ca3e:	e779      	b.n	c934 <__udivmoddi4+0xac>
    ca40:	f1c6 0720 	rsb	r7, r6, #32
    ca44:	fa03 f406 	lsl.w	r4, r3, r6
    ca48:	fa02 fc06 	lsl.w	ip, r2, r6
    ca4c:	fa01 fe06 	lsl.w	lr, r1, r6
    ca50:	40fa      	lsrs	r2, r7
    ca52:	fa20 f807 	lsr.w	r8, r0, r7
    ca56:	40f9      	lsrs	r1, r7
    ca58:	fa00 f306 	lsl.w	r3, r0, r6
    ca5c:	4322      	orrs	r2, r4
    ca5e:	ea48 040e 	orr.w	r4, r8, lr
    ca62:	ea4f 4812 	mov.w	r8, r2, lsr #16
    ca66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    ca6a:	fa1f f982 	uxth.w	r9, r2
    ca6e:	fbb1 faf8 	udiv	sl, r1, r8
    ca72:	fb08 111a 	mls	r1, r8, sl, r1
    ca76:	fb0a f009 	mul.w	r0, sl, r9
    ca7a:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
    ca7e:	4570      	cmp	r0, lr
    ca80:	d90a      	bls.n	ca98 <__udivmoddi4+0x210>
    ca82:	eb12 0e0e 	adds.w	lr, r2, lr
    ca86:	bf2c      	ite	cs
    ca88:	2101      	movcs	r1, #1
    ca8a:	2100      	movcc	r1, #0
    ca8c:	4570      	cmp	r0, lr
    ca8e:	d901      	bls.n	ca94 <__udivmoddi4+0x20c>
    ca90:	2900      	cmp	r1, #0
    ca92:	d052      	beq.n	cb3a <__udivmoddi4+0x2b2>
    ca94:	f10a 3aff 	add.w	sl, sl, #4294967295
    ca98:	ebae 0e00 	sub.w	lr, lr, r0
    ca9c:	b2a4      	uxth	r4, r4
    ca9e:	fbbe f0f8 	udiv	r0, lr, r8
    caa2:	fb08 ee10 	mls	lr, r8, r0, lr
    caa6:	fb00 f909 	mul.w	r9, r0, r9
    caaa:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
    caae:	45f1      	cmp	r9, lr
    cab0:	d905      	bls.n	cabe <__udivmoddi4+0x236>
    cab2:	eb12 0e0e 	adds.w	lr, r2, lr
    cab6:	d201      	bcs.n	cabc <__udivmoddi4+0x234>
    cab8:	45f1      	cmp	r9, lr
    caba:	d838      	bhi.n	cb2e <__udivmoddi4+0x2a6>
    cabc:	3801      	subs	r0, #1
    cabe:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    cac2:	ebae 0e09 	sub.w	lr, lr, r9
    cac6:	fba0 890c 	umull	r8, r9, r0, ip
    caca:	45ce      	cmp	lr, r9
    cacc:	4641      	mov	r1, r8
    cace:	464c      	mov	r4, r9
    cad0:	d302      	bcc.n	cad8 <__udivmoddi4+0x250>
    cad2:	d106      	bne.n	cae2 <__udivmoddi4+0x25a>
    cad4:	4543      	cmp	r3, r8
    cad6:	d204      	bcs.n	cae2 <__udivmoddi4+0x25a>
    cad8:	3801      	subs	r0, #1
    cada:	ebb8 010c 	subs.w	r1, r8, ip
    cade:	eb69 0402 	sbc.w	r4, r9, r2
    cae2:	b315      	cbz	r5, cb2a <__udivmoddi4+0x2a2>
    cae4:	1a5a      	subs	r2, r3, r1
    cae6:	eb6e 0e04 	sbc.w	lr, lr, r4
    caea:	40f2      	lsrs	r2, r6
    caec:	fa0e f707 	lsl.w	r7, lr, r7
    caf0:	fa2e f306 	lsr.w	r3, lr, r6
    caf4:	2600      	movs	r6, #0
    caf6:	4317      	orrs	r7, r2
    caf8:	e9c5 7300 	strd	r7, r3, [r5]
    cafc:	e70b      	b.n	c916 <__udivmoddi4+0x8e>
    cafe:	462e      	mov	r6, r5
    cb00:	4628      	mov	r0, r5
    cb02:	e708      	b.n	c916 <__udivmoddi4+0x8e>
    cb04:	1a84      	subs	r4, r0, r2
    cb06:	eb61 0103 	sbc.w	r1, r1, r3
    cb0a:	2001      	movs	r0, #1
    cb0c:	4688      	mov	r8, r1
    cb0e:	e757      	b.n	c9c0 <__udivmoddi4+0x138>
    cb10:	f1ac 0c02 	sub.w	ip, ip, #2
    cb14:	4439      	add	r1, r7
    cb16:	e724      	b.n	c962 <__udivmoddi4+0xda>
    cb18:	3802      	subs	r0, #2
    cb1a:	443c      	add	r4, r7
    cb1c:	e734      	b.n	c988 <__udivmoddi4+0x100>
    cb1e:	3802      	subs	r0, #2
    cb20:	443c      	add	r4, r7
    cb22:	e6ee      	b.n	c902 <__udivmoddi4+0x7a>
    cb24:	3e02      	subs	r6, #2
    cb26:	443b      	add	r3, r7
    cb28:	e6d9      	b.n	c8de <__udivmoddi4+0x56>
    cb2a:	462e      	mov	r6, r5
    cb2c:	e6f3      	b.n	c916 <__udivmoddi4+0x8e>
    cb2e:	3802      	subs	r0, #2
    cb30:	4496      	add	lr, r2
    cb32:	e7c4      	b.n	cabe <__udivmoddi4+0x236>
    cb34:	3802      	subs	r0, #2
    cb36:	4439      	add	r1, r7
    cb38:	e76a      	b.n	ca10 <__udivmoddi4+0x188>
    cb3a:	f1aa 0a02 	sub.w	sl, sl, #2
    cb3e:	4496      	add	lr, r2
    cb40:	e7aa      	b.n	ca98 <__udivmoddi4+0x210>
    cb42:	3e02      	subs	r6, #2
    cb44:	4439      	add	r1, r7
    cb46:	e776      	b.n	ca36 <__udivmoddi4+0x1ae>

0000cb48 <__aeabi_idiv0>:
    cb48:	4770      	bx	lr
    cb4a:	bf00      	nop

0000cb4c <memcpy>:
    cb4c:	4684      	mov	ip, r0
    cb4e:	ea41 0300 	orr.w	r3, r1, r0
    cb52:	f013 0303 	ands.w	r3, r3, #3
    cb56:	d149      	bne.n	cbec <memcpy+0xa0>
    cb58:	3a40      	subs	r2, #64	; 0x40
    cb5a:	d323      	bcc.n	cba4 <memcpy+0x58>
    cb5c:	680b      	ldr	r3, [r1, #0]
    cb5e:	6003      	str	r3, [r0, #0]
    cb60:	684b      	ldr	r3, [r1, #4]
    cb62:	6043      	str	r3, [r0, #4]
    cb64:	688b      	ldr	r3, [r1, #8]
    cb66:	6083      	str	r3, [r0, #8]
    cb68:	68cb      	ldr	r3, [r1, #12]
    cb6a:	60c3      	str	r3, [r0, #12]
    cb6c:	690b      	ldr	r3, [r1, #16]
    cb6e:	6103      	str	r3, [r0, #16]
    cb70:	694b      	ldr	r3, [r1, #20]
    cb72:	6143      	str	r3, [r0, #20]
    cb74:	698b      	ldr	r3, [r1, #24]
    cb76:	6183      	str	r3, [r0, #24]
    cb78:	69cb      	ldr	r3, [r1, #28]
    cb7a:	61c3      	str	r3, [r0, #28]
    cb7c:	6a0b      	ldr	r3, [r1, #32]
    cb7e:	6203      	str	r3, [r0, #32]
    cb80:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    cb82:	6243      	str	r3, [r0, #36]	; 0x24
    cb84:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    cb86:	6283      	str	r3, [r0, #40]	; 0x28
    cb88:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    cb8a:	62c3      	str	r3, [r0, #44]	; 0x2c
    cb8c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    cb8e:	6303      	str	r3, [r0, #48]	; 0x30
    cb90:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    cb92:	6343      	str	r3, [r0, #52]	; 0x34
    cb94:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    cb96:	6383      	str	r3, [r0, #56]	; 0x38
    cb98:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    cb9a:	63c3      	str	r3, [r0, #60]	; 0x3c
    cb9c:	3040      	adds	r0, #64	; 0x40
    cb9e:	3140      	adds	r1, #64	; 0x40
    cba0:	3a40      	subs	r2, #64	; 0x40
    cba2:	d2db      	bcs.n	cb5c <memcpy+0x10>
    cba4:	3230      	adds	r2, #48	; 0x30
    cba6:	d30b      	bcc.n	cbc0 <memcpy+0x74>
    cba8:	680b      	ldr	r3, [r1, #0]
    cbaa:	6003      	str	r3, [r0, #0]
    cbac:	684b      	ldr	r3, [r1, #4]
    cbae:	6043      	str	r3, [r0, #4]
    cbb0:	688b      	ldr	r3, [r1, #8]
    cbb2:	6083      	str	r3, [r0, #8]
    cbb4:	68cb      	ldr	r3, [r1, #12]
    cbb6:	60c3      	str	r3, [r0, #12]
    cbb8:	3010      	adds	r0, #16
    cbba:	3110      	adds	r1, #16
    cbbc:	3a10      	subs	r2, #16
    cbbe:	d2f3      	bcs.n	cba8 <memcpy+0x5c>
    cbc0:	320c      	adds	r2, #12
    cbc2:	d305      	bcc.n	cbd0 <memcpy+0x84>
    cbc4:	f851 3b04 	ldr.w	r3, [r1], #4
    cbc8:	f840 3b04 	str.w	r3, [r0], #4
    cbcc:	3a04      	subs	r2, #4
    cbce:	d2f9      	bcs.n	cbc4 <memcpy+0x78>
    cbd0:	3204      	adds	r2, #4
    cbd2:	d008      	beq.n	cbe6 <memcpy+0x9a>
    cbd4:	07d2      	lsls	r2, r2, #31
    cbd6:	bf1c      	itt	ne
    cbd8:	f811 3b01 	ldrbne.w	r3, [r1], #1
    cbdc:	f800 3b01 	strbne.w	r3, [r0], #1
    cbe0:	d301      	bcc.n	cbe6 <memcpy+0x9a>
    cbe2:	880b      	ldrh	r3, [r1, #0]
    cbe4:	8003      	strh	r3, [r0, #0]
    cbe6:	4660      	mov	r0, ip
    cbe8:	4770      	bx	lr
    cbea:	bf00      	nop
    cbec:	2a08      	cmp	r2, #8
    cbee:	d313      	bcc.n	cc18 <memcpy+0xcc>
    cbf0:	078b      	lsls	r3, r1, #30
    cbf2:	d0b1      	beq.n	cb58 <memcpy+0xc>
    cbf4:	f010 0303 	ands.w	r3, r0, #3
    cbf8:	d0ae      	beq.n	cb58 <memcpy+0xc>
    cbfa:	f1c3 0304 	rsb	r3, r3, #4
    cbfe:	1ad2      	subs	r2, r2, r3
    cc00:	07db      	lsls	r3, r3, #31
    cc02:	bf1c      	itt	ne
    cc04:	f811 3b01 	ldrbne.w	r3, [r1], #1
    cc08:	f800 3b01 	strbne.w	r3, [r0], #1
    cc0c:	d3a4      	bcc.n	cb58 <memcpy+0xc>
    cc0e:	f831 3b02 	ldrh.w	r3, [r1], #2
    cc12:	f820 3b02 	strh.w	r3, [r0], #2
    cc16:	e79f      	b.n	cb58 <memcpy+0xc>
    cc18:	3a04      	subs	r2, #4
    cc1a:	d3d9      	bcc.n	cbd0 <memcpy+0x84>
    cc1c:	3a01      	subs	r2, #1
    cc1e:	f811 3b01 	ldrb.w	r3, [r1], #1
    cc22:	f800 3b01 	strb.w	r3, [r0], #1
    cc26:	d2f9      	bcs.n	cc1c <memcpy+0xd0>
    cc28:	780b      	ldrb	r3, [r1, #0]
    cc2a:	7003      	strb	r3, [r0, #0]
    cc2c:	784b      	ldrb	r3, [r1, #1]
    cc2e:	7043      	strb	r3, [r0, #1]
    cc30:	788b      	ldrb	r3, [r1, #2]
    cc32:	7083      	strb	r3, [r0, #2]
    cc34:	4660      	mov	r0, ip
    cc36:	4770      	bx	lr

0000cc38 <strcmp>:
    cc38:	ea80 0c01 	eor.w	ip, r0, r1
    cc3c:	f01c 0f03 	tst.w	ip, #3
    cc40:	d137      	bne.n	ccb2 <strcmp+0x7a>
    cc42:	f010 0c03 	ands.w	ip, r0, #3
    cc46:	f020 0003 	bic.w	r0, r0, #3
    cc4a:	f021 0103 	bic.w	r1, r1, #3
    cc4e:	f850 2b04 	ldr.w	r2, [r0], #4
    cc52:	bf08      	it	eq
    cc54:	f851 3b04 	ldreq.w	r3, [r1], #4
    cc58:	d00e      	beq.n	cc78 <strcmp+0x40>
    cc5a:	f08c 0c03 	eor.w	ip, ip, #3
    cc5e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    cc62:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    cc66:	fa23 fc0c 	lsr.w	ip, r3, ip
    cc6a:	f851 3b04 	ldr.w	r3, [r1], #4
    cc6e:	ea42 020c 	orr.w	r2, r2, ip
    cc72:	ea43 030c 	orr.w	r3, r3, ip
    cc76:	bf00      	nop
    cc78:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    cc7c:	429a      	cmp	r2, r3
    cc7e:	bf01      	itttt	eq
    cc80:	ea2c 0c02 	biceq.w	ip, ip, r2
    cc84:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
    cc88:	f850 2b04 	ldreq.w	r2, [r0], #4
    cc8c:	f851 3b04 	ldreq.w	r3, [r1], #4
    cc90:	d0f2      	beq.n	cc78 <strcmp+0x40>
    cc92:	ea4f 6002 	mov.w	r0, r2, lsl #24
    cc96:	ea4f 2212 	mov.w	r2, r2, lsr #8
    cc9a:	2801      	cmp	r0, #1
    cc9c:	bf28      	it	cs
    cc9e:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
    cca2:	bf08      	it	eq
    cca4:	0a1b      	lsreq	r3, r3, #8
    cca6:	d0f4      	beq.n	cc92 <strcmp+0x5a>
    cca8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    ccac:	0e00      	lsrs	r0, r0, #24
    ccae:	1ac0      	subs	r0, r0, r3
    ccb0:	4770      	bx	lr
    ccb2:	f010 0f03 	tst.w	r0, #3
    ccb6:	d00a      	beq.n	ccce <strcmp+0x96>
    ccb8:	f810 2b01 	ldrb.w	r2, [r0], #1
    ccbc:	f811 3b01 	ldrb.w	r3, [r1], #1
    ccc0:	2a01      	cmp	r2, #1
    ccc2:	bf28      	it	cs
    ccc4:	429a      	cmpcs	r2, r3
    ccc6:	d0f4      	beq.n	ccb2 <strcmp+0x7a>
    ccc8:	eba2 0003 	sub.w	r0, r2, r3
    cccc:	4770      	bx	lr
    ccce:	f84d 5d04 	str.w	r5, [sp, #-4]!
    ccd2:	f850 2b04 	ldr.w	r2, [r0], #4
    ccd6:	f001 0503 	and.w	r5, r1, #3
    ccda:	f021 0103 	bic.w	r1, r1, #3
    ccde:	f851 3b04 	ldr.w	r3, [r1], #4
    cce2:	2d02      	cmp	r5, #2
    cce4:	d026      	beq.n	cd34 <strcmp+0xfc>
    cce6:	d84d      	bhi.n	cd84 <strcmp+0x14c>
    cce8:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
    ccec:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
    ccf0:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    ccf4:	ea2c 0c02 	bic.w	ip, ip, r2
    ccf8:	d10d      	bne.n	cd16 <strcmp+0xde>
    ccfa:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    ccfe:	bf08      	it	eq
    cd00:	f851 3b04 	ldreq.w	r3, [r1], #4
    cd04:	d10a      	bne.n	cd1c <strcmp+0xe4>
    cd06:	ea85 0502 	eor.w	r5, r5, r2
    cd0a:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
    cd0e:	d10c      	bne.n	cd2a <strcmp+0xf2>
    cd10:	f850 2b04 	ldr.w	r2, [r0], #4
    cd14:	e7e8      	b.n	cce8 <strcmp+0xb0>
    cd16:	ea4f 2313 	mov.w	r3, r3, lsr #8
    cd1a:	e05b      	b.n	cdd4 <strcmp+0x19c>
    cd1c:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
    cd20:	d154      	bne.n	cdcc <strcmp+0x194>
    cd22:	780b      	ldrb	r3, [r1, #0]
    cd24:	ea4f 6512 	mov.w	r5, r2, lsr #24
    cd28:	e054      	b.n	cdd4 <strcmp+0x19c>
    cd2a:	ea4f 6512 	mov.w	r5, r2, lsr #24
    cd2e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    cd32:	e04f      	b.n	cdd4 <strcmp+0x19c>
    cd34:	ea4f 4502 	mov.w	r5, r2, lsl #16
    cd38:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    cd3c:	ea4f 4515 	mov.w	r5, r5, lsr #16
    cd40:	ea2c 0c02 	bic.w	ip, ip, r2
    cd44:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
    cd48:	d118      	bne.n	cd7c <strcmp+0x144>
    cd4a:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    cd4e:	bf08      	it	eq
    cd50:	f851 3b04 	ldreq.w	r3, [r1], #4
    cd54:	d107      	bne.n	cd66 <strcmp+0x12e>
    cd56:	ea85 0502 	eor.w	r5, r5, r2
    cd5a:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
    cd5e:	d109      	bne.n	cd74 <strcmp+0x13c>
    cd60:	f850 2b04 	ldr.w	r2, [r0], #4
    cd64:	e7e6      	b.n	cd34 <strcmp+0xfc>
    cd66:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
    cd6a:	d12f      	bne.n	cdcc <strcmp+0x194>
    cd6c:	880b      	ldrh	r3, [r1, #0]
    cd6e:	ea4f 4512 	mov.w	r5, r2, lsr #16
    cd72:	e02f      	b.n	cdd4 <strcmp+0x19c>
    cd74:	ea4f 4303 	mov.w	r3, r3, lsl #16
    cd78:	ea4f 4512 	mov.w	r5, r2, lsr #16
    cd7c:	ea4f 4313 	mov.w	r3, r3, lsr #16
    cd80:	e028      	b.n	cdd4 <strcmp+0x19c>
    cd82:	bf00      	nop
    cd84:	f002 05ff 	and.w	r5, r2, #255	; 0xff
    cd88:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
    cd8c:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    cd90:	ea2c 0c02 	bic.w	ip, ip, r2
    cd94:	d10d      	bne.n	cdb2 <strcmp+0x17a>
    cd96:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    cd9a:	bf08      	it	eq
    cd9c:	f851 3b04 	ldreq.w	r3, [r1], #4
    cda0:	d10a      	bne.n	cdb8 <strcmp+0x180>
    cda2:	ea85 0502 	eor.w	r5, r5, r2
    cda6:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
    cdaa:	d10a      	bne.n	cdc2 <strcmp+0x18a>
    cdac:	f850 2b04 	ldr.w	r2, [r0], #4
    cdb0:	e7e8      	b.n	cd84 <strcmp+0x14c>
    cdb2:	ea4f 6313 	mov.w	r3, r3, lsr #24
    cdb6:	e00d      	b.n	cdd4 <strcmp+0x19c>
    cdb8:	f012 0fff 	tst.w	r2, #255	; 0xff
    cdbc:	d006      	beq.n	cdcc <strcmp+0x194>
    cdbe:	f851 3b04 	ldr.w	r3, [r1], #4
    cdc2:	ea4f 2512 	mov.w	r5, r2, lsr #8
    cdc6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cdca:	e003      	b.n	cdd4 <strcmp+0x19c>
    cdcc:	f04f 0000 	mov.w	r0, #0
    cdd0:	bc20      	pop	{r5}
    cdd2:	4770      	bx	lr
    cdd4:	f005 02ff 	and.w	r2, r5, #255	; 0xff
    cdd8:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    cddc:	2801      	cmp	r0, #1
    cdde:	bf28      	it	cs
    cde0:	4290      	cmpcs	r0, r2
    cde2:	bf04      	itt	eq
    cde4:	0a2d      	lsreq	r5, r5, #8
    cde6:	0a1b      	lsreq	r3, r3, #8
    cde8:	d0f4      	beq.n	cdd4 <strcmp+0x19c>
    cdea:	eba2 0000 	sub.w	r0, r2, r0
    cdee:	bc20      	pop	{r5}
    cdf0:	4770      	bx	lr
    cdf2:	bf00      	nop

0000cdf4 <__aeabi_dmul>:
    cdf4:	b570      	push	{r4, r5, r6, lr}
    cdf6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cdfa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    cdfe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    ce02:	bf1d      	ittte	ne
    ce04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    ce08:	ea94 0f0c 	teqne	r4, ip
    ce0c:	ea95 0f0c 	teqne	r5, ip
    ce10:	f000 f8de 	bleq	cfd0 <__aeabi_dmul+0x1dc>
    ce14:	442c      	add	r4, r5
    ce16:	ea81 0603 	eor.w	r6, r1, r3
    ce1a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    ce1e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    ce22:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    ce26:	bf18      	it	ne
    ce28:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    ce2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ce30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ce34:	d038      	beq.n	cea8 <__aeabi_dmul+0xb4>
    ce36:	fba0 ce02 	umull	ip, lr, r0, r2
    ce3a:	f04f 0500 	mov.w	r5, #0
    ce3e:	fbe1 e502 	umlal	lr, r5, r1, r2
    ce42:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    ce46:	fbe0 e503 	umlal	lr, r5, r0, r3
    ce4a:	f04f 0600 	mov.w	r6, #0
    ce4e:	fbe1 5603 	umlal	r5, r6, r1, r3
    ce52:	f09c 0f00 	teq	ip, #0
    ce56:	bf18      	it	ne
    ce58:	f04e 0e01 	orrne.w	lr, lr, #1
    ce5c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    ce60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    ce64:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    ce68:	d204      	bcs.n	ce74 <__aeabi_dmul+0x80>
    ce6a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    ce6e:	416d      	adcs	r5, r5
    ce70:	eb46 0606 	adc.w	r6, r6, r6
    ce74:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    ce78:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    ce7c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    ce80:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    ce84:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    ce88:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    ce8c:	bf88      	it	hi
    ce8e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    ce92:	d81e      	bhi.n	ced2 <__aeabi_dmul+0xde>
    ce94:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    ce98:	bf08      	it	eq
    ce9a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    ce9e:	f150 0000 	adcs.w	r0, r0, #0
    cea2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    cea6:	bd70      	pop	{r4, r5, r6, pc}
    cea8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    ceac:	ea46 0101 	orr.w	r1, r6, r1
    ceb0:	ea40 0002 	orr.w	r0, r0, r2
    ceb4:	ea81 0103 	eor.w	r1, r1, r3
    ceb8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    cebc:	bfc2      	ittt	gt
    cebe:	ebd4 050c 	rsbsgt	r5, r4, ip
    cec2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    cec6:	bd70      	popgt	{r4, r5, r6, pc}
    cec8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cecc:	f04f 0e00 	mov.w	lr, #0
    ced0:	3c01      	subs	r4, #1
    ced2:	f300 80ab 	bgt.w	d02c <__aeabi_dmul+0x238>
    ced6:	f114 0f36 	cmn.w	r4, #54	; 0x36
    ceda:	bfde      	ittt	le
    cedc:	2000      	movle	r0, #0
    cede:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    cee2:	bd70      	pople	{r4, r5, r6, pc}
    cee4:	f1c4 0400 	rsb	r4, r4, #0
    cee8:	3c20      	subs	r4, #32
    ceea:	da35      	bge.n	cf58 <__aeabi_dmul+0x164>
    ceec:	340c      	adds	r4, #12
    ceee:	dc1b      	bgt.n	cf28 <__aeabi_dmul+0x134>
    cef0:	f104 0414 	add.w	r4, r4, #20
    cef4:	f1c4 0520 	rsb	r5, r4, #32
    cef8:	fa00 f305 	lsl.w	r3, r0, r5
    cefc:	fa20 f004 	lsr.w	r0, r0, r4
    cf00:	fa01 f205 	lsl.w	r2, r1, r5
    cf04:	ea40 0002 	orr.w	r0, r0, r2
    cf08:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    cf0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    cf10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    cf14:	fa21 f604 	lsr.w	r6, r1, r4
    cf18:	eb42 0106 	adc.w	r1, r2, r6
    cf1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cf20:	bf08      	it	eq
    cf22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cf26:	bd70      	pop	{r4, r5, r6, pc}
    cf28:	f1c4 040c 	rsb	r4, r4, #12
    cf2c:	f1c4 0520 	rsb	r5, r4, #32
    cf30:	fa00 f304 	lsl.w	r3, r0, r4
    cf34:	fa20 f005 	lsr.w	r0, r0, r5
    cf38:	fa01 f204 	lsl.w	r2, r1, r4
    cf3c:	ea40 0002 	orr.w	r0, r0, r2
    cf40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cf44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    cf48:	f141 0100 	adc.w	r1, r1, #0
    cf4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cf50:	bf08      	it	eq
    cf52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cf56:	bd70      	pop	{r4, r5, r6, pc}
    cf58:	f1c4 0520 	rsb	r5, r4, #32
    cf5c:	fa00 f205 	lsl.w	r2, r0, r5
    cf60:	ea4e 0e02 	orr.w	lr, lr, r2
    cf64:	fa20 f304 	lsr.w	r3, r0, r4
    cf68:	fa01 f205 	lsl.w	r2, r1, r5
    cf6c:	ea43 0302 	orr.w	r3, r3, r2
    cf70:	fa21 f004 	lsr.w	r0, r1, r4
    cf74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cf78:	fa21 f204 	lsr.w	r2, r1, r4
    cf7c:	ea20 0002 	bic.w	r0, r0, r2
    cf80:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    cf84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cf88:	bf08      	it	eq
    cf8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cf8e:	bd70      	pop	{r4, r5, r6, pc}
    cf90:	f094 0f00 	teq	r4, #0
    cf94:	d10f      	bne.n	cfb6 <__aeabi_dmul+0x1c2>
    cf96:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    cf9a:	0040      	lsls	r0, r0, #1
    cf9c:	eb41 0101 	adc.w	r1, r1, r1
    cfa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cfa4:	bf08      	it	eq
    cfa6:	3c01      	subeq	r4, #1
    cfa8:	d0f7      	beq.n	cf9a <__aeabi_dmul+0x1a6>
    cfaa:	ea41 0106 	orr.w	r1, r1, r6
    cfae:	f095 0f00 	teq	r5, #0
    cfb2:	bf18      	it	ne
    cfb4:	4770      	bxne	lr
    cfb6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    cfba:	0052      	lsls	r2, r2, #1
    cfbc:	eb43 0303 	adc.w	r3, r3, r3
    cfc0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    cfc4:	bf08      	it	eq
    cfc6:	3d01      	subeq	r5, #1
    cfc8:	d0f7      	beq.n	cfba <__aeabi_dmul+0x1c6>
    cfca:	ea43 0306 	orr.w	r3, r3, r6
    cfce:	4770      	bx	lr
    cfd0:	ea94 0f0c 	teq	r4, ip
    cfd4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    cfd8:	bf18      	it	ne
    cfda:	ea95 0f0c 	teqne	r5, ip
    cfde:	d00c      	beq.n	cffa <__aeabi_dmul+0x206>
    cfe0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cfe4:	bf18      	it	ne
    cfe6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cfea:	d1d1      	bne.n	cf90 <__aeabi_dmul+0x19c>
    cfec:	ea81 0103 	eor.w	r1, r1, r3
    cff0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cff4:	f04f 0000 	mov.w	r0, #0
    cff8:	bd70      	pop	{r4, r5, r6, pc}
    cffa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cffe:	bf06      	itte	eq
    d000:	4610      	moveq	r0, r2
    d002:	4619      	moveq	r1, r3
    d004:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d008:	d019      	beq.n	d03e <__aeabi_dmul+0x24a>
    d00a:	ea94 0f0c 	teq	r4, ip
    d00e:	d102      	bne.n	d016 <__aeabi_dmul+0x222>
    d010:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    d014:	d113      	bne.n	d03e <__aeabi_dmul+0x24a>
    d016:	ea95 0f0c 	teq	r5, ip
    d01a:	d105      	bne.n	d028 <__aeabi_dmul+0x234>
    d01c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    d020:	bf1c      	itt	ne
    d022:	4610      	movne	r0, r2
    d024:	4619      	movne	r1, r3
    d026:	d10a      	bne.n	d03e <__aeabi_dmul+0x24a>
    d028:	ea81 0103 	eor.w	r1, r1, r3
    d02c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d030:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d034:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d038:	f04f 0000 	mov.w	r0, #0
    d03c:	bd70      	pop	{r4, r5, r6, pc}
    d03e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d042:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    d046:	bd70      	pop	{r4, r5, r6, pc}

0000d048 <__aeabi_ddiv>:
    d048:	b570      	push	{r4, r5, r6, lr}
    d04a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d04e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    d052:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    d056:	bf1d      	ittte	ne
    d058:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    d05c:	ea94 0f0c 	teqne	r4, ip
    d060:	ea95 0f0c 	teqne	r5, ip
    d064:	f000 f8a7 	bleq	d1b6 <__aeabi_ddiv+0x16e>
    d068:	eba4 0405 	sub.w	r4, r4, r5
    d06c:	ea81 0e03 	eor.w	lr, r1, r3
    d070:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d074:	ea4f 3101 	mov.w	r1, r1, lsl #12
    d078:	f000 8088 	beq.w	d18c <__aeabi_ddiv+0x144>
    d07c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    d080:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d084:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    d088:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    d08c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    d090:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    d094:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    d098:	ea4f 2600 	mov.w	r6, r0, lsl #8
    d09c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    d0a0:	429d      	cmp	r5, r3
    d0a2:	bf08      	it	eq
    d0a4:	4296      	cmpeq	r6, r2
    d0a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    d0aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
    d0ae:	d202      	bcs.n	d0b6 <__aeabi_ddiv+0x6e>
    d0b0:	085b      	lsrs	r3, r3, #1
    d0b2:	ea4f 0232 	mov.w	r2, r2, rrx
    d0b6:	1ab6      	subs	r6, r6, r2
    d0b8:	eb65 0503 	sbc.w	r5, r5, r3
    d0bc:	085b      	lsrs	r3, r3, #1
    d0be:	ea4f 0232 	mov.w	r2, r2, rrx
    d0c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    d0c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    d0ca:	ebb6 0e02 	subs.w	lr, r6, r2
    d0ce:	eb75 0e03 	sbcs.w	lr, r5, r3
    d0d2:	bf22      	ittt	cs
    d0d4:	1ab6      	subcs	r6, r6, r2
    d0d6:	4675      	movcs	r5, lr
    d0d8:	ea40 000c 	orrcs.w	r0, r0, ip
    d0dc:	085b      	lsrs	r3, r3, #1
    d0de:	ea4f 0232 	mov.w	r2, r2, rrx
    d0e2:	ebb6 0e02 	subs.w	lr, r6, r2
    d0e6:	eb75 0e03 	sbcs.w	lr, r5, r3
    d0ea:	bf22      	ittt	cs
    d0ec:	1ab6      	subcs	r6, r6, r2
    d0ee:	4675      	movcs	r5, lr
    d0f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    d0f4:	085b      	lsrs	r3, r3, #1
    d0f6:	ea4f 0232 	mov.w	r2, r2, rrx
    d0fa:	ebb6 0e02 	subs.w	lr, r6, r2
    d0fe:	eb75 0e03 	sbcs.w	lr, r5, r3
    d102:	bf22      	ittt	cs
    d104:	1ab6      	subcs	r6, r6, r2
    d106:	4675      	movcs	r5, lr
    d108:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    d10c:	085b      	lsrs	r3, r3, #1
    d10e:	ea4f 0232 	mov.w	r2, r2, rrx
    d112:	ebb6 0e02 	subs.w	lr, r6, r2
    d116:	eb75 0e03 	sbcs.w	lr, r5, r3
    d11a:	bf22      	ittt	cs
    d11c:	1ab6      	subcs	r6, r6, r2
    d11e:	4675      	movcs	r5, lr
    d120:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    d124:	ea55 0e06 	orrs.w	lr, r5, r6
    d128:	d018      	beq.n	d15c <__aeabi_ddiv+0x114>
    d12a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    d12e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    d132:	ea4f 1606 	mov.w	r6, r6, lsl #4
    d136:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    d13a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    d13e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    d142:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    d146:	d1c0      	bne.n	d0ca <__aeabi_ddiv+0x82>
    d148:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d14c:	d10b      	bne.n	d166 <__aeabi_ddiv+0x11e>
    d14e:	ea41 0100 	orr.w	r1, r1, r0
    d152:	f04f 0000 	mov.w	r0, #0
    d156:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    d15a:	e7b6      	b.n	d0ca <__aeabi_ddiv+0x82>
    d15c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d160:	bf04      	itt	eq
    d162:	4301      	orreq	r1, r0
    d164:	2000      	moveq	r0, #0
    d166:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    d16a:	bf88      	it	hi
    d16c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    d170:	f63f aeaf 	bhi.w	ced2 <__aeabi_dmul+0xde>
    d174:	ebb5 0c03 	subs.w	ip, r5, r3
    d178:	bf04      	itt	eq
    d17a:	ebb6 0c02 	subseq.w	ip, r6, r2
    d17e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    d182:	f150 0000 	adcs.w	r0, r0, #0
    d186:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d18a:	bd70      	pop	{r4, r5, r6, pc}
    d18c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    d190:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    d194:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    d198:	bfc2      	ittt	gt
    d19a:	ebd4 050c 	rsbsgt	r5, r4, ip
    d19e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    d1a2:	bd70      	popgt	{r4, r5, r6, pc}
    d1a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d1a8:	f04f 0e00 	mov.w	lr, #0
    d1ac:	3c01      	subs	r4, #1
    d1ae:	e690      	b.n	ced2 <__aeabi_dmul+0xde>
    d1b0:	ea45 0e06 	orr.w	lr, r5, r6
    d1b4:	e68d      	b.n	ced2 <__aeabi_dmul+0xde>
    d1b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    d1ba:	ea94 0f0c 	teq	r4, ip
    d1be:	bf08      	it	eq
    d1c0:	ea95 0f0c 	teqeq	r5, ip
    d1c4:	f43f af3b 	beq.w	d03e <__aeabi_dmul+0x24a>
    d1c8:	ea94 0f0c 	teq	r4, ip
    d1cc:	d10a      	bne.n	d1e4 <__aeabi_ddiv+0x19c>
    d1ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    d1d2:	f47f af34 	bne.w	d03e <__aeabi_dmul+0x24a>
    d1d6:	ea95 0f0c 	teq	r5, ip
    d1da:	f47f af25 	bne.w	d028 <__aeabi_dmul+0x234>
    d1de:	4610      	mov	r0, r2
    d1e0:	4619      	mov	r1, r3
    d1e2:	e72c      	b.n	d03e <__aeabi_dmul+0x24a>
    d1e4:	ea95 0f0c 	teq	r5, ip
    d1e8:	d106      	bne.n	d1f8 <__aeabi_ddiv+0x1b0>
    d1ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d1ee:	f43f aefd 	beq.w	cfec <__aeabi_dmul+0x1f8>
    d1f2:	4610      	mov	r0, r2
    d1f4:	4619      	mov	r1, r3
    d1f6:	e722      	b.n	d03e <__aeabi_dmul+0x24a>
    d1f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d1fc:	bf18      	it	ne
    d1fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d202:	f47f aec5 	bne.w	cf90 <__aeabi_dmul+0x19c>
    d206:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    d20a:	f47f af0d 	bne.w	d028 <__aeabi_dmul+0x234>
    d20e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    d212:	f47f aeeb 	bne.w	cfec <__aeabi_dmul+0x1f8>
    d216:	e712      	b.n	d03e <__aeabi_dmul+0x24a>

0000d218 <__aeabi_dcmpun>:
    d218:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    d21c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d220:	d102      	bne.n	d228 <__aeabi_dcmpun+0x10>
    d222:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    d226:	d10a      	bne.n	d23e <__aeabi_dcmpun+0x26>
    d228:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    d22c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d230:	d102      	bne.n	d238 <__aeabi_dcmpun+0x20>
    d232:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    d236:	d102      	bne.n	d23e <__aeabi_dcmpun+0x26>
    d238:	f04f 0000 	mov.w	r0, #0
    d23c:	4770      	bx	lr
    d23e:	f04f 0001 	mov.w	r0, #1
    d242:	4770      	bx	lr

0000d244 <__aeabi_d2uiz>:
    d244:	004a      	lsls	r2, r1, #1
    d246:	d211      	bcs.n	d26c <__aeabi_d2uiz+0x28>
    d248:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    d24c:	d211      	bcs.n	d272 <__aeabi_d2uiz+0x2e>
    d24e:	d50d      	bpl.n	d26c <__aeabi_d2uiz+0x28>
    d250:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    d254:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    d258:	d40e      	bmi.n	d278 <__aeabi_d2uiz+0x34>
    d25a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d25e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d262:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    d266:	fa23 f002 	lsr.w	r0, r3, r2
    d26a:	4770      	bx	lr
    d26c:	f04f 0000 	mov.w	r0, #0
    d270:	4770      	bx	lr
    d272:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    d276:	d102      	bne.n	d27e <__aeabi_d2uiz+0x3a>
    d278:	f04f 30ff 	mov.w	r0, #4294967295
    d27c:	4770      	bx	lr
    d27e:	f04f 0000 	mov.w	r0, #0
    d282:	4770      	bx	lr

0000d284 <__aeabi_d2lz>:
    d284:	b538      	push	{r3, r4, r5, lr}
    d286:	2200      	movs	r2, #0
    d288:	2300      	movs	r3, #0
    d28a:	4604      	mov	r4, r0
    d28c:	460d      	mov	r5, r1
    d28e:	f7ff f9f3 	bl	c678 <__aeabi_dcmplt>
    d292:	b928      	cbnz	r0, d2a0 <__aeabi_d2lz+0x1c>
    d294:	4620      	mov	r0, r4
    d296:	4629      	mov	r1, r5
    d298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d29c:	f000 b80a 	b.w	d2b4 <__aeabi_d2ulz>
    d2a0:	4620      	mov	r0, r4
    d2a2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
    d2a6:	f000 f805 	bl	d2b4 <__aeabi_d2ulz>
    d2aa:	4240      	negs	r0, r0
    d2ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d2b0:	bd38      	pop	{r3, r4, r5, pc}
    d2b2:	bf00      	nop

0000d2b4 <__aeabi_d2ulz>:
    d2b4:	b5d0      	push	{r4, r6, r7, lr}
    d2b6:	2200      	movs	r2, #0
    d2b8:	4b0b      	ldr	r3, [pc, #44]	; (d2e8 <__aeabi_d2ulz+0x34>)
    d2ba:	4606      	mov	r6, r0
    d2bc:	460f      	mov	r7, r1
    d2be:	f7ff fd99 	bl	cdf4 <__aeabi_dmul>
    d2c2:	f7ff ffbf 	bl	d244 <__aeabi_d2uiz>
    d2c6:	4604      	mov	r4, r0
    d2c8:	f7ff f8fc 	bl	c4c4 <__aeabi_ui2d>
    d2cc:	2200      	movs	r2, #0
    d2ce:	4b07      	ldr	r3, [pc, #28]	; (d2ec <__aeabi_d2ulz+0x38>)
    d2d0:	f7ff fd90 	bl	cdf4 <__aeabi_dmul>
    d2d4:	4602      	mov	r2, r0
    d2d6:	460b      	mov	r3, r1
    d2d8:	4630      	mov	r0, r6
    d2da:	4639      	mov	r1, r7
    d2dc:	f7fe ffb4 	bl	c248 <__aeabi_dsub>
    d2e0:	f7ff ffb0 	bl	d244 <__aeabi_d2uiz>
    d2e4:	4621      	mov	r1, r4
    d2e6:	bdd0      	pop	{r4, r6, r7, pc}
    d2e8:	3df00000 	.word	0x3df00000
    d2ec:	41f00000 	.word	0x41f00000

0000d2f0 <sntp_query>:

	return res;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
    d2f0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    d2f4:	4604      	mov	r4, r0
    d2f6:	b09a      	sub	sp, #104	; 0x68
    d2f8:	460f      	mov	r7, r1
    d2fa:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
    d2fc:	2100      	movs	r1, #0
    d2fe:	2230      	movs	r2, #48	; 0x30
    d300:	a802      	add	r0, sp, #8
    d302:	f018 febb 	bl	2607c <memset>
	int ret = 0;

	if (!ctx || !time) {
    d306:	2c00      	cmp	r4, #0
    d308:	f000 8087 	beq.w	d41a <sntp_query+0x12a>
    d30c:	2e00      	cmp	r6, #0
    d30e:	f000 8084 	beq.w	d41a <sntp_query+0x12a>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
    d312:	231b      	movs	r3, #27
    d314:	f88d 3008 	strb.w	r3, [sp, #8]
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    d318:	f021 fa66 	bl	2e7e8 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    d31c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d320:	2500      	movs	r5, #0
    d322:	fba0 bc03 	umull	fp, ip, r0, r3
    d326:	fb03 cc01 	mla	ip, r3, r1, ip
    d32a:	ea4f 30db 	mov.w	r0, fp, lsr #15
	return time / MSEC_PER_SEC;
    d32e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d332:	2300      	movs	r3, #0
    d334:	4629      	mov	r1, r5
    d336:	ea40 404c 	orr.w	r0, r0, ip, lsl #17
    d33a:	f7ff fa8d 	bl	c858 <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
    d33e:	4a3c      	ldr	r2, [pc, #240]	; (d430 <sntp_query+0x140>)
    d340:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
    d342:	0a13      	lsrs	r3, r2, #8
    d344:	0211      	lsls	r1, r2, #8
    d346:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    d34a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    d34e:	430b      	orrs	r3, r1
    d350:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    d354:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
    d358:	68e0      	ldr	r0, [r4, #12]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
    d35a:	6122      	str	r2, [r4, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
    d35c:	930c      	str	r3, [sp, #48]	; 0x30
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
    d35e:	2230      	movs	r2, #48	; 0x30
    d360:	462b      	mov	r3, r5
    d362:	e9cd 5500 	strd	r5, r5, [sp]
    d366:	a902      	add	r1, sp, #8
    d368:	f01f fbdf 	bl	2cb2a <z_impl_zsock_sendto>
	if (ret < 0) {
    d36c:	2800      	cmp	r0, #0
    d36e:	db0f      	blt.n	d390 <sntp_query+0xa0>
	struct sntp_pkt buf = { 0 };
    d370:	4629      	mov	r1, r5
    d372:	2230      	movs	r2, #48	; 0x30
    d374:	a80e      	add	r0, sp, #56	; 0x38
    d376:	f018 fe81 	bl	2607c <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
    d37a:	68a1      	ldr	r1, [r4, #8]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
    d37c:	463a      	mov	r2, r7
    d37e:	4620      	mov	r0, r4
    d380:	f006 fbca 	bl	13b18 <z_impl_zsock_poll>
	if (status < 0) {
    d384:	42a8      	cmp	r0, r5
    d386:	da06      	bge.n	d396 <sntp_query+0xa6>
		return -errno;
    d388:	f01f fce3 	bl	2cd52 <__errno>
    d38c:	6800      	ldr	r0, [r0, #0]
    d38e:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
    d390:	b01a      	add	sp, #104	; 0x68
    d392:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
	if (status == 0) {
    d396:	d037      	beq.n	d408 <sntp_query+0x118>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
    d398:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
    d39a:	2230      	movs	r2, #48	; 0x30
    d39c:	462b      	mov	r3, r5
    d39e:	e9cd 5500 	strd	r5, r5, [sp]
    d3a2:	a90e      	add	r1, sp, #56	; 0x38
    d3a4:	f01f fbf4 	bl	2cb90 <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
    d3a8:	2800      	cmp	r0, #0
    d3aa:	dbed      	blt.n	d388 <sntp_query+0x98>
	if (rcvd != sizeof(struct sntp_pkt)) {
    d3ac:	2830      	cmp	r0, #48	; 0x30
    d3ae:	d12e      	bne.n	d40e <sntp_query+0x11e>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
    d3b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d3b2:	6922      	ldr	r2, [r4, #16]
    d3b4:	ba1b      	rev	r3, r3
    d3b6:	429a      	cmp	r2, r3
    d3b8:	d002      	beq.n	d3c0 <sntp_query+0xd0>
		return -EINVAL;
    d3ba:	f06f 0015 	mvn.w	r0, #21
    d3be:	e7e7      	b.n	d390 <sntp_query+0xa0>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
    d3c0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    d3c4:	f003 0307 	and.w	r3, r3, #7
    d3c8:	2b04      	cmp	r3, #4
    d3ca:	d1f6      	bne.n	d3ba <sntp_query+0xca>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
    d3cc:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    d3d0:	b303      	cbz	r3, d414 <sntp_query+0x124>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
    d3d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    d3d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d3d6:	ba1b      	rev	r3, r3
    d3d8:	ba12      	rev	r2, r2
    d3da:	ea53 0102 	orrs.w	r1, r3, r2
    d3de:	d0ec      	beq.n	d3ba <sntp_query+0xca>
	if (ts & 0x80000000) {
    d3e0:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
    d3e2:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
    d3e4:	da0c      	bge.n	d400 <sntp_query+0x110>
		if (ts >= OFFSET_1970_JAN_1) {
    d3e6:	4a13      	ldr	r2, [pc, #76]	; (d434 <sntp_query+0x144>)
    d3e8:	4293      	cmp	r3, r2
    d3ea:	d9e6      	bls.n	d3ba <sntp_query+0xca>
			time->seconds = ts - OFFSET_1970_JAN_1;
    d3ec:	a10c      	add	r1, pc, #48	; (adr r1, d420 <sntp_query+0x130>)
    d3ee:	e9d1 0100 	ldrd	r0, r1, [r1]
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
    d3f2:	18c0      	adds	r0, r0, r3
    d3f4:	f141 0100 	adc.w	r1, r1, #0
    d3f8:	e9c6 0100 	strd	r0, r1, [r6]
	return 0;
    d3fc:	2000      	movs	r0, #0
    d3fe:	e7c7      	b.n	d390 <sntp_query+0xa0>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
    d400:	a109      	add	r1, pc, #36	; (adr r1, d428 <sntp_query+0x138>)
    d402:	e9d1 0100 	ldrd	r0, r1, [r1]
    d406:	e7f4      	b.n	d3f2 <sntp_query+0x102>
		return -ETIMEDOUT;
    d408:	f06f 0073 	mvn.w	r0, #115	; 0x73
    d40c:	e7c0      	b.n	d390 <sntp_query+0xa0>
		return -EMSGSIZE;
    d40e:	f06f 0079 	mvn.w	r0, #121	; 0x79
    d412:	e7bd      	b.n	d390 <sntp_query+0xa0>
		return -EBUSY;
    d414:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
    d418:	e7ba      	b.n	d390 <sntp_query+0xa0>
		return -EFAULT;
    d41a:	f06f 000d 	mvn.w	r0, #13
    d41e:	e7b7      	b.n	d390 <sntp_query+0xa0>
    d420:	7c558180 	.word	0x7c558180
    d424:	ffffffff 	.word	0xffffffff
    d428:	7c558180 	.word	0x7c558180
    d42c:	00000000 	.word	0x00000000
    d430:	83aa7e80 	.word	0x83aa7e80
    d434:	83aa7e7f 	.word	0x83aa7e7f

0000d438 <at_handler>:

	return err;
}

static void at_handler(void *context, const char *response)
{
    d438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d43c:	ed2d 8b02 	vpush	{d8}
	int err;
	bool notify = false;
	enum lte_lc_notif_type notif_type;
	struct lte_lc_evt evt;

	if (response == NULL) {
    d440:	460e      	mov	r6, r1
{
    d442:	b08c      	sub	sp, #48	; 0x30
	if (response == NULL) {
    d444:	b971      	cbnz	r1, d464 <at_handler+0x2c>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    d446:	49b2      	ldr	r1, [pc, #712]	; (d710 <at_handler+0x2d8>)
    d448:	4bb2      	ldr	r3, [pc, #712]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Response buffer is NULL-pointer");
    d44a:	48b3      	ldr	r0, [pc, #716]	; (d718 <at_handler+0x2e0>)
    d44c:	1ac9      	subs	r1, r1, r3
    d44e:	08c9      	lsrs	r1, r1, #3
    d450:	0189      	lsls	r1, r1, #6
    d452:	f041 0101 	orr.w	r1, r1, #1
    d456:	f01f f87b 	bl	2c550 <log_0>
	}

	if (evt_handler && notify) {
		evt_handler(&evt);
	}
}
    d45a:	b00c      	add	sp, #48	; 0x30
    d45c:	ecbd 8b02 	vpop	{d8}
    d460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    d464:	2700      	movs	r7, #0
    d466:	4cad      	ldr	r4, [pc, #692]	; (d71c <at_handler+0x2e4>)
		if (strncmp(at_notifs[i], notif,
    d468:	f854 5b04 	ldr.w	r5, [r4], #4
    d46c:	4628      	mov	r0, r5
    d46e:	f019 fa15 	bl	2689c <strlen>
    d472:	4631      	mov	r1, r6
    d474:	4602      	mov	r2, r0
    d476:	4628      	mov	r0, r5
    d478:	f019 fa3e 	bl	268f8 <strncmp>
    d47c:	4605      	mov	r5, r0
    d47e:	bb60      	cbnz	r0, d4da <at_handler+0xa2>
	switch (notif_type) {
    d480:	2f01      	cmp	r7, #1
			*type = i;
    d482:	b2fb      	uxtb	r3, r7
	switch (notif_type) {
    d484:	f000 8107 	beq.w	d696 <at_handler+0x25e>
    d488:	2b02      	cmp	r3, #2
    d48a:	f000 818d 	beq.w	d7a8 <at_handler+0x370>
	size_t len = sizeof(str_buf) - 1;
    d48e:	f04f 0809 	mov.w	r8, #9
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    d492:	210a      	movs	r1, #10
    d494:	a807      	add	r0, sp, #28
	size_t len = sizeof(str_buf) - 1;
    d496:	f8cd 8008 	str.w	r8, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    d49a:	f020 ff26 	bl	2e2ea <at_params_list_init>
	if (err) {
    d49e:	4604      	mov	r4, r0
    d4a0:	b1f8      	cbz	r0, d4e2 <at_handler+0xaa>
    d4a2:	4a9b      	ldr	r2, [pc, #620]	; (d710 <at_handler+0x2d8>)
    d4a4:	4b9b      	ldr	r3, [pc, #620]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d4a6:	4601      	mov	r1, r0
    d4a8:	1ad2      	subs	r2, r2, r3
    d4aa:	08d2      	lsrs	r2, r2, #3
    d4ac:	0192      	lsls	r2, r2, #6
    d4ae:	489c      	ldr	r0, [pc, #624]	; (d720 <at_handler+0x2e8>)
    d4b0:	f042 0201 	orr.w	r2, r2, #1
    d4b4:	f01f f85b 	bl	2c56e <log_1>
    d4b8:	4b96      	ldr	r3, [pc, #600]	; (d714 <at_handler+0x2dc>)
    d4ba:	4d95      	ldr	r5, [pc, #596]	; (d710 <at_handler+0x2d8>)
			LOG_ERR("Failed to parse notification (error %d): %s",
    d4bc:	4630      	mov	r0, r6
    d4be:	1aed      	subs	r5, r5, r3
    d4c0:	f005 fda8 	bl	13014 <log_strdup>
    d4c4:	08ed      	lsrs	r5, r5, #3
    d4c6:	01ad      	lsls	r5, r5, #6
    d4c8:	f045 0501 	orr.w	r5, r5, #1
    d4cc:	4602      	mov	r2, r0
    d4ce:	462b      	mov	r3, r5
    d4d0:	4621      	mov	r1, r4
    d4d2:	4894      	ldr	r0, [pc, #592]	; (d724 <at_handler+0x2ec>)
    d4d4:	f01f f862 	bl	2c59c <log_2>
			return;
    d4d8:	e7bf      	b.n	d45a <at_handler+0x22>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    d4da:	3701      	adds	r7, #1
    d4dc:	2f03      	cmp	r7, #3
    d4de:	d1c3      	bne.n	d468 <at_handler+0x30>
    d4e0:	e7bb      	b.n	d45a <at_handler+0x22>
	err = at_parser_params_from_str(notification,
    d4e2:	4601      	mov	r1, r0
    d4e4:	aa07      	add	r2, sp, #28
    d4e6:	4630      	mov	r0, r6
    d4e8:	f020 fefc 	bl	2e2e4 <at_parser_params_from_str>
	if (err) {
    d4ec:	4604      	mov	r4, r0
    d4ee:	2800      	cmp	r0, #0
    d4f0:	d05c      	beq.n	d5ac <at_handler+0x174>
    d4f2:	4a87      	ldr	r2, [pc, #540]	; (d710 <at_handler+0x2d8>)
    d4f4:	4b87      	ldr	r3, [pc, #540]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
    d4f6:	4601      	mov	r1, r0
    d4f8:	1ad2      	subs	r2, r2, r3
    d4fa:	08d2      	lsrs	r2, r2, #3
    d4fc:	0192      	lsls	r2, r2, #6
    d4fe:	488a      	ldr	r0, [pc, #552]	; (d728 <at_handler+0x2f0>)
    d500:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not get registration status, error: %d", err);
    d504:	f01f f833 	bl	2c56e <log_1>
	at_params_list_free(&resp_list);
    d508:	a807      	add	r0, sp, #28
    d50a:	f020 ff01 	bl	2e310 <at_params_list_free>
		if (err) {
    d50e:	2c00      	cmp	r4, #0
    d510:	d1d2      	bne.n	d4b8 <at_handler+0x80>
		if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d512:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
    d516:	2b01      	cmp	r3, #1
    d518:	d102      	bne.n	d520 <at_handler+0xe8>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    d51a:	4884      	ldr	r0, [pc, #528]	; (d72c <at_handler+0x2f4>)
    d51c:	f017 f814 	bl	24548 <z_impl_k_sem_give>
		if (!evt_handler) {
    d520:	4c83      	ldr	r4, [pc, #524]	; (d730 <at_handler+0x2f8>)
    d522:	6823      	ldr	r3, [r4, #0]
    d524:	2b00      	cmp	r3, #0
    d526:	d098      	beq.n	d45a <at_handler+0x22>
		if (reg_status != prev_reg_status) {
    d528:	4a82      	ldr	r2, [pc, #520]	; (d734 <at_handler+0x2fc>)
    d52a:	7811      	ldrb	r1, [r2, #0]
    d52c:	42a9      	cmp	r1, r5
    d52e:	d007      	beq.n	d540 <at_handler+0x108>
			prev_reg_status = reg_status;
    d530:	7015      	strb	r5, [r2, #0]
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    d532:	2200      	movs	r2, #0
			evt.nw_reg_status = reg_status;
    d534:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    d538:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			evt_handler(&evt);
    d53c:	a809      	add	r0, sp, #36	; 0x24
    d53e:	4798      	blx	r3
		if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
    d540:	4e7d      	ldr	r6, [pc, #500]	; (d738 <at_handler+0x300>)
    d542:	ad03      	add	r5, sp, #12
    d544:	2208      	movs	r2, #8
    d546:	4631      	mov	r1, r6
    d548:	4628      	mov	r0, r5
    d54a:	f018 fd69 	bl	26020 <memcmp>
    d54e:	b160      	cbz	r0, d56a <at_handler+0x132>
			evt.type = LTE_LC_EVT_CELL_UPDATE;
    d550:	e895 0003 	ldmia.w	r5, {r0, r1}
    d554:	2304      	movs	r3, #4
    d556:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
    d55a:	ab0c      	add	r3, sp, #48	; 0x30
    d55c:	e903 0003 	stmdb	r3, {r0, r1}
    d560:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
    d564:	6823      	ldr	r3, [r4, #0]
    d566:	a809      	add	r0, sp, #36	; 0x24
    d568:	4798      	blx	r3
		if (memcmp(&psm_cfg, &prev_psm_cfg,
    d56a:	4e74      	ldr	r6, [pc, #464]	; (d73c <at_handler+0x304>)
    d56c:	ad05      	add	r5, sp, #20
    d56e:	2208      	movs	r2, #8
    d570:	4631      	mov	r1, r6
    d572:	4628      	mov	r0, r5
    d574:	f018 fd54 	bl	26020 <memcmp>
    d578:	b160      	cbz	r0, d594 <at_handler+0x15c>
			evt.type = LTE_LC_EVT_PSM_UPDATE;
    d57a:	e895 0003 	ldmia.w	r5, {r0, r1}
    d57e:	2301      	movs	r3, #1
    d580:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_psm_cfg, &psm_cfg,
    d584:	ab0c      	add	r3, sp, #48	; 0x30
    d586:	e903 0003 	stmdb	r3, {r0, r1}
    d58a:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
    d58e:	6823      	ldr	r3, [r4, #0]
    d590:	a809      	add	r0, sp, #36	; 0x24
    d592:	4798      	blx	r3
	bool notify = false;
    d594:	2300      	movs	r3, #0
	if (evt_handler && notify) {
    d596:	4a66      	ldr	r2, [pc, #408]	; (d730 <at_handler+0x2f8>)
    d598:	6812      	ldr	r2, [r2, #0]
    d59a:	2a00      	cmp	r2, #0
    d59c:	f43f af5d 	beq.w	d45a <at_handler+0x22>
    d5a0:	2b00      	cmp	r3, #0
    d5a2:	f43f af5a 	beq.w	d45a <at_handler+0x22>
		evt_handler(&evt);
    d5a6:	a809      	add	r0, sp, #36	; 0x24
    d5a8:	4790      	blx	r2
    d5aa:	e756      	b.n	d45a <at_handler+0x22>
	err = at_params_int_get(&resp_list,
    d5ac:	2101      	movs	r1, #1
    d5ae:	aa01      	add	r2, sp, #4
    d5b0:	a807      	add	r0, sp, #28
    d5b2:	f020 ff5b 	bl	2e46c <at_params_int_get>
	if (err) {
    d5b6:	4604      	mov	r4, r0
    d5b8:	b148      	cbz	r0, d5ce <at_handler+0x196>
    d5ba:	4a55      	ldr	r2, [pc, #340]	; (d710 <at_handler+0x2d8>)
    d5bc:	4b55      	ldr	r3, [pc, #340]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Could not get registration status, error: %d", err);
    d5be:	4601      	mov	r1, r0
    d5c0:	1ad2      	subs	r2, r2, r3
    d5c2:	08d2      	lsrs	r2, r2, #3
    d5c4:	0192      	lsls	r2, r2, #6
    d5c6:	485e      	ldr	r0, [pc, #376]	; (d740 <at_handler+0x308>)
    d5c8:	f042 0201 	orr.w	r2, r2, #1
    d5cc:	e79a      	b.n	d504 <at_handler+0xcc>
	*reg_status = status;
    d5ce:	f89d 5004 	ldrb.w	r5, [sp, #4]
	if (*reg_status != LTE_LC_NW_REG_UICC_FAIL) {
    d5d2:	2d5a      	cmp	r5, #90	; 0x5a
    d5d4:	d047      	beq.n	d666 <at_handler+0x22e>
		err = at_params_string_get(&resp_list,
    d5d6:	2102      	movs	r1, #2
    d5d8:	ab02      	add	r3, sp, #8
    d5da:	aa09      	add	r2, sp, #36	; 0x24
    d5dc:	a807      	add	r0, sp, #28
    d5de:	f020 ff5c 	bl	2e49a <at_params_string_get>
		if (err) {
    d5e2:	4607      	mov	r7, r0
    d5e4:	b160      	cbz	r0, d600 <at_handler+0x1c8>
    d5e6:	4a4a      	ldr	r2, [pc, #296]	; (d710 <at_handler+0x2d8>)
    d5e8:	4b4a      	ldr	r3, [pc, #296]	; (d714 <at_handler+0x2dc>)
			LOG_ERR("Could not get tracking area code, error: %d", err);
    d5ea:	4601      	mov	r1, r0
    d5ec:	1ad2      	subs	r2, r2, r3
    d5ee:	08d2      	lsrs	r2, r2, #3
    d5f0:	0192      	lsls	r2, r2, #6
    d5f2:	4854      	ldr	r0, [pc, #336]	; (d744 <at_handler+0x30c>)
    d5f4:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not get cell ID, error: %d", err);
    d5f8:	f01e ffb9 	bl	2c56e <log_1>
			goto clean_exit;
    d5fc:	463c      	mov	r4, r7
    d5fe:	e783      	b.n	d508 <at_handler+0xd0>
		str_buf[len] = '\0';
    d600:	9b02      	ldr	r3, [sp, #8]
    d602:	aa0c      	add	r2, sp, #48	; 0x30
    d604:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
    d606:	4621      	mov	r1, r4
    d608:	2210      	movs	r2, #16
    d60a:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
    d60c:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
    d610:	f019 fd30 	bl	27074 <strtoul>
		err = at_params_string_get(&resp_list,
    d614:	2103      	movs	r1, #3
		cell->tac = strtoul(str_buf, NULL, 16);
    d616:	9004      	str	r0, [sp, #16]
		err = at_params_string_get(&resp_list,
    d618:	ab02      	add	r3, sp, #8
    d61a:	aa09      	add	r2, sp, #36	; 0x24
    d61c:	a807      	add	r0, sp, #28
		len = sizeof(str_buf) - 1;
    d61e:	f8cd 8008 	str.w	r8, [sp, #8]
		err = at_params_string_get(&resp_list,
    d622:	f020 ff3a 	bl	2e49a <at_params_string_get>
		if (err) {
    d626:	4607      	mov	r7, r0
    d628:	b148      	cbz	r0, d63e <at_handler+0x206>
    d62a:	4a39      	ldr	r2, [pc, #228]	; (d710 <at_handler+0x2d8>)
    d62c:	4b39      	ldr	r3, [pc, #228]	; (d714 <at_handler+0x2dc>)
			LOG_ERR("Could not get cell ID, error: %d", err);
    d62e:	4601      	mov	r1, r0
    d630:	1ad2      	subs	r2, r2, r3
    d632:	08d2      	lsrs	r2, r2, #3
    d634:	0192      	lsls	r2, r2, #6
    d636:	4844      	ldr	r0, [pc, #272]	; (d748 <at_handler+0x310>)
    d638:	f042 0201 	orr.w	r2, r2, #1
    d63c:	e7dc      	b.n	d5f8 <at_handler+0x1c0>
		str_buf[len] = '\0';
    d63e:	9b02      	ldr	r3, [sp, #8]
    d640:	aa0c      	add	r2, sp, #48	; 0x30
    d642:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
    d644:	4621      	mov	r1, r4
    d646:	2210      	movs	r2, #16
    d648:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
    d64a:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
    d64e:	f019 fd11 	bl	27074 <strtoul>
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d652:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
    d656:	2b01      	cmp	r3, #1
		cell->id = strtoul(str_buf, NULL, 16);
    d658:	9003      	str	r0, [sp, #12]
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d65a:	d009      	beq.n	d670 <at_handler+0x238>
		psm_cfg->tau = -1;
    d65c:	f04f 33ff 	mov.w	r3, #4294967295
		psm_cfg->active_time = -1;
    d660:	e9cd 3305 	strd	r3, r3, [sp, #20]
    d664:	e750      	b.n	d508 <at_handler+0xd0>
		cell->tac = UINT32_MAX;
    d666:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = UINT32_MAX;
    d66a:	e9cd 3303 	strd	r3, r3, [sp, #12]
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d66e:	e7f5      	b.n	d65c <at_handler+0x224>
		err = parse_psm_cfg(&resp_list, true, psm_cfg);
    d670:	2101      	movs	r1, #1
    d672:	aa05      	add	r2, sp, #20
    d674:	a807      	add	r0, sp, #28
    d676:	f00b fad9 	bl	18c2c <parse_psm_cfg>
		if (err) {
    d67a:	4604      	mov	r4, r0
    d67c:	2800      	cmp	r0, #0
    d67e:	f43f af43 	beq.w	d508 <at_handler+0xd0>
    d682:	4a23      	ldr	r2, [pc, #140]	; (d710 <at_handler+0x2d8>)
    d684:	4b23      	ldr	r3, [pc, #140]	; (d714 <at_handler+0x2dc>)
			LOG_ERR("Failed to parse PSM configuration, error: %d",
    d686:	4601      	mov	r1, r0
    d688:	1ad2      	subs	r2, r2, r3
    d68a:	08d2      	lsrs	r2, r2, #3
    d68c:	0192      	lsls	r2, r2, #6
    d68e:	482f      	ldr	r0, [pc, #188]	; (d74c <at_handler+0x314>)
    d690:	f042 0201 	orr.w	r2, r2, #1
    d694:	e736      	b.n	d504 <at_handler+0xcc>
static int parse_rrc_mode(const char *at_response,
			  enum lte_lc_rrc_mode *mode,
			  size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
    d696:	e9cd 0007 	strd	r0, r0, [sp, #28]

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
    d69a:	2104      	movs	r1, #4
    d69c:	a807      	add	r0, sp, #28
    d69e:	f020 fe24 	bl	2e2ea <at_params_list_init>
	if (err) {
    d6a2:	4604      	mov	r4, r0
    d6a4:	b1b0      	cbz	r0, d6d4 <at_handler+0x29c>
    d6a6:	4a1a      	ldr	r2, [pc, #104]	; (d710 <at_handler+0x2d8>)
    d6a8:	4b1a      	ldr	r3, [pc, #104]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d6aa:	4601      	mov	r1, r0
    d6ac:	1ad2      	subs	r2, r2, r3
    d6ae:	08d2      	lsrs	r2, r2, #3
    d6b0:	0192      	lsls	r2, r2, #6
    d6b2:	481b      	ldr	r0, [pc, #108]	; (d720 <at_handler+0x2e8>)
    d6b4:	f042 0201 	orr.w	r2, r2, #1
    d6b8:	f01e ff59 	bl	2c56e <log_1>
			LOG_ERR("Can't parse signalling mode, error: %d", err);
    d6bc:	4621      	mov	r1, r4
    d6be:	4a14      	ldr	r2, [pc, #80]	; (d710 <at_handler+0x2d8>)
    d6c0:	4b14      	ldr	r3, [pc, #80]	; (d714 <at_handler+0x2dc>)
    d6c2:	4823      	ldr	r0, [pc, #140]	; (d750 <at_handler+0x318>)
    d6c4:	1ad2      	subs	r2, r2, r3
    d6c6:	08d2      	lsrs	r2, r2, #3
    d6c8:	0192      	lsls	r2, r2, #6
    d6ca:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Can't parse eDRX, error: %d", err);
    d6ce:	f01e ff4e 	bl	2c56e <log_1>
			return;
    d6d2:	e6c2      	b.n	d45a <at_handler+0x22>
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    d6d4:	4601      	mov	r1, r0
    d6d6:	aa07      	add	r2, sp, #28
    d6d8:	4630      	mov	r0, r6
    d6da:	f020 fe03 	bl	2e2e4 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    d6de:	4604      	mov	r4, r0
    d6e0:	2800      	cmp	r0, #0
    d6e2:	d039      	beq.n	d758 <at_handler+0x320>
    d6e4:	4a0a      	ldr	r2, [pc, #40]	; (d710 <at_handler+0x2d8>)
    d6e6:	4b0b      	ldr	r3, [pc, #44]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
    d6e8:	4601      	mov	r1, r0
    d6ea:	1ad2      	subs	r2, r2, r3
    d6ec:	08d2      	lsrs	r2, r2, #3
    d6ee:	0192      	lsls	r2, r2, #6
    d6f0:	4818      	ldr	r0, [pc, #96]	; (d754 <at_handler+0x31c>)
    d6f2:	f042 0201 	orr.w	r2, r2, #1
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
	if (err) {
		LOG_ERR("Could not get signalling mode, error: %d", err);
    d6f6:	f01e ff3a 	bl	2c56e <log_1>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
    d6fa:	a807      	add	r0, sp, #28
    d6fc:	f020 fe08 	bl	2e310 <at_params_list_free>
		if (err) {
    d700:	2c00      	cmp	r4, #0
    d702:	d1db      	bne.n	d6bc <at_handler+0x284>
		evt.type = LTE_LC_EVT_RRC_UPDATE;
    d704:	2303      	movs	r3, #3
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    d706:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		notify = true;
    d70a:	2301      	movs	r3, #1
		break;
    d70c:	e743      	b.n	d596 <at_handler+0x15e>
    d70e:	bf00      	nop
    d710:	0002ecc4 	.word	0x0002ecc4
    d714:	0002ec7c 	.word	0x0002ec7c
    d718:	00031d1d 	.word	0x00031d1d
    d71c:	0002f088 	.word	0x0002f088
    d720:	00031d3d 	.word	0x00031d3d
    d724:	00031e3a 	.word	0x00031e3a
    d728:	00031d66 	.word	0x00031d66
    d72c:	20021744 	.word	0x20021744
    d730:	20021740 	.word	0x20021740
    d734:	2002626c 	.word	0x2002626c
    d738:	2002175c 	.word	0x2002175c
    d73c:	20021764 	.word	0x20021764
    d740:	00031d93 	.word	0x00031d93
    d744:	00031dc0 	.word	0x00031dc0
    d748:	00031dec 	.word	0x00031dec
    d74c:	00031e0d 	.word	0x00031e0d
    d750:	00031ed6 	.word	0x00031ed6
    d754:	00031e66 	.word	0x00031e66
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
    d758:	4639      	mov	r1, r7
    d75a:	aa05      	add	r2, sp, #20
    d75c:	a807      	add	r0, sp, #28
    d75e:	f020 fe85 	bl	2e46c <at_params_int_get>
	if (err) {
    d762:	4604      	mov	r4, r0
    d764:	b148      	cbz	r0, d77a <at_handler+0x342>
    d766:	4a82      	ldr	r2, [pc, #520]	; (d970 <at_handler+0x538>)
    d768:	4b82      	ldr	r3, [pc, #520]	; (d974 <at_handler+0x53c>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
    d76a:	4601      	mov	r1, r0
    d76c:	1ad2      	subs	r2, r2, r3
    d76e:	08d2      	lsrs	r2, r2, #3
    d770:	0192      	lsls	r2, r2, #6
    d772:	4881      	ldr	r0, [pc, #516]	; (d978 <at_handler+0x540>)
    d774:	f042 0201 	orr.w	r2, r2, #1
    d778:	e7bd      	b.n	d6f6 <at_handler+0x2be>
	if (temp_mode == 0) {
    d77a:	9905      	ldr	r1, [sp, #20]
    d77c:	b911      	cbnz	r1, d784 <at_handler+0x34c>
		*mode = LTE_LC_RRC_MODE_IDLE;
    d77e:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
    d782:	e7ba      	b.n	d6fa <at_handler+0x2c2>
	} else if (temp_mode == 1) {
    d784:	2901      	cmp	r1, #1
    d786:	d102      	bne.n	d78e <at_handler+0x356>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
    d788:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
    d78c:	e7b5      	b.n	d6fa <at_handler+0x2c2>
    d78e:	4b79      	ldr	r3, [pc, #484]	; (d974 <at_handler+0x53c>)
    d790:	4a77      	ldr	r2, [pc, #476]	; (d970 <at_handler+0x538>)
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
    d792:	487a      	ldr	r0, [pc, #488]	; (d97c <at_handler+0x544>)
    d794:	1ad2      	subs	r2, r2, r3
    d796:	08d2      	lsrs	r2, r2, #3
    d798:	0192      	lsls	r2, r2, #6
    d79a:	f042 0201 	orr.w	r2, r2, #1
    d79e:	f01e fee6 	bl	2c56e <log_1>
		err = -EINVAL;
    d7a2:	f06f 0415 	mvn.w	r4, #21
    d7a6:	e7a8      	b.n	d6fa <at_handler+0x2c2>
{
	int err;
	uint8_t idx;
	struct at_param_list resp_list = {0};
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
    d7a8:	2304      	movs	r3, #4
	switch (sys_mode_current) {
    d7aa:	4d75      	ldr	r5, [pc, #468]	; (d980 <at_handler+0x548>)
	size_t len = sizeof(tmp_buf) - 1;
    d7ac:	9303      	str	r3, [sp, #12]
    d7ae:	782b      	ldrb	r3, [r5, #0]
	struct at_param_list resp_list = {0};
    d7b0:	e9cd 0007 	strd	r0, r0, [sp, #28]
	switch (sys_mode_current) {
    d7b4:	3b01      	subs	r3, #1
    d7b6:	2b04      	cmp	r3, #4
    d7b8:	d804      	bhi.n	d7c4 <at_handler+0x38c>
    d7ba:	e8df f003 	tbb	[pc, r3]
    d7be:	2d19      	.short	0x2d19
    d7c0:	1903      	.short	0x1903
    d7c2:	2d          	.byte	0x2d
    d7c3:	00          	.byte	0x00
    d7c4:	4b6b      	ldr	r3, [pc, #428]	; (d974 <at_handler+0x53c>)
    d7c6:	496a      	ldr	r1, [pc, #424]	; (d970 <at_handler+0x538>)
		LOG_ERR("No LTE connection available in this system mode");
    d7c8:	486e      	ldr	r0, [pc, #440]	; (d984 <at_handler+0x54c>)
    d7ca:	1ac9      	subs	r1, r1, r3
    d7cc:	08c9      	lsrs	r1, r1, #3
    d7ce:	0189      	lsls	r1, r1, #6
    d7d0:	f041 0101 	orr.w	r1, r1, #1
    d7d4:	f01e febc 	bl	2c550 <log_0>
		return -ENOTCONN;
    d7d8:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    d7dc:	4a64      	ldr	r2, [pc, #400]	; (d970 <at_handler+0x538>)
    d7de:	4b65      	ldr	r3, [pc, #404]	; (d974 <at_handler+0x53c>)
			LOG_ERR("Can't parse eDRX, error: %d", err);
    d7e0:	4621      	mov	r1, r4
    d7e2:	1ad2      	subs	r2, r2, r3
    d7e4:	08d2      	lsrs	r2, r2, #3
    d7e6:	0192      	lsls	r2, r2, #6
    d7e8:	4867      	ldr	r0, [pc, #412]	; (d988 <at_handler+0x550>)
    d7ea:	f042 0201 	orr.w	r2, r2, #1
    d7ee:	e76e      	b.n	d6ce <at_handler+0x296>
	switch (sys_mode_current) {
    d7f0:	ed9f 8a66 	vldr	s16, [pc, #408]	; d98c <at_handler+0x554>
	err = get_ptw_multiplier(&ptw_multiplier);
	if (err) {
		return err;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
    d7f4:	2105      	movs	r1, #5
    d7f6:	a807      	add	r0, sp, #28
    d7f8:	f020 fd77 	bl	2e2ea <at_params_list_init>
	if (err) {
    d7fc:	4604      	mov	r4, r0
    d7fe:	b170      	cbz	r0, d81e <at_handler+0x3e6>
    d800:	4b5c      	ldr	r3, [pc, #368]	; (d974 <at_handler+0x53c>)
    d802:	4a5b      	ldr	r2, [pc, #364]	; (d970 <at_handler+0x538>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d804:	4601      	mov	r1, r0
    d806:	1ad2      	subs	r2, r2, r3
    d808:	08d2      	lsrs	r2, r2, #3
    d80a:	0192      	lsls	r2, r2, #6
    d80c:	4860      	ldr	r0, [pc, #384]	; (d990 <at_handler+0x558>)
    d80e:	f042 0201 	orr.w	r2, r2, #1
    d812:	f01e feac 	bl	2c56e <log_1>
		return err;
    d816:	e7e1      	b.n	d7dc <at_handler+0x3a4>
		*ptw_multiplier = 2.56;
    d818:	ed9f 8a5e 	vldr	s16, [pc, #376]	; d994 <at_handler+0x55c>
    d81c:	e7ea      	b.n	d7f4 <at_handler+0x3bc>
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    d81e:	4601      	mov	r1, r0
    d820:	aa07      	add	r2, sp, #28
    d822:	4630      	mov	r0, r6
    d824:	f020 fd5e 	bl	2e2e4 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    d828:	4604      	mov	r4, r0
    d82a:	b188      	cbz	r0, d850 <at_handler+0x418>
    d82c:	4a50      	ldr	r2, [pc, #320]	; (d970 <at_handler+0x538>)
    d82e:	4b51      	ldr	r3, [pc, #324]	; (d974 <at_handler+0x53c>)
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
    d830:	4601      	mov	r1, r0
    d832:	1ad2      	subs	r2, r2, r3
    d834:	08d2      	lsrs	r2, r2, #3
    d836:	0192      	lsls	r2, r2, #6
    d838:	4857      	ldr	r0, [pc, #348]	; (d998 <at_handler+0x560>)
    d83a:	f042 0201 	orr.w	r2, r2, #1
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
				   tmp_buf, &len);
	if (err) {
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    d83e:	f01e fe96 	bl	2c56e <log_1>
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
    d842:	a807      	add	r0, sp, #28
    d844:	f020 fd64 	bl	2e310 <at_params_list_free>
		if (err) {
    d848:	2c00      	cmp	r4, #0
    d84a:	d1c7      	bne.n	d7dc <at_handler+0x3a4>
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    d84c:	2302      	movs	r3, #2
    d84e:	e75a      	b.n	d706 <at_handler+0x2ce>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
    d850:	2103      	movs	r1, #3
    d852:	ab03      	add	r3, sp, #12
    d854:	aa05      	add	r2, sp, #20
    d856:	a807      	add	r0, sp, #28
    d858:	f020 fe1f 	bl	2e49a <at_params_string_get>
	if (err) {
    d85c:	4604      	mov	r4, r0
    d85e:	b148      	cbz	r0, d874 <at_handler+0x43c>
    d860:	4a43      	ldr	r2, [pc, #268]	; (d970 <at_handler+0x538>)
    d862:	4b44      	ldr	r3, [pc, #272]	; (d974 <at_handler+0x53c>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    d864:	4601      	mov	r1, r0
    d866:	1ad2      	subs	r2, r2, r3
    d868:	08d2      	lsrs	r2, r2, #3
    d86a:	0192      	lsls	r2, r2, #6
    d86c:	484b      	ldr	r0, [pc, #300]	; (d99c <at_handler+0x564>)
    d86e:	f042 0201 	orr.w	r2, r2, #1
    d872:	e7e4      	b.n	d83e <at_handler+0x406>
	tmp_buf[len] = '\0';
    d874:	9b03      	ldr	r3, [sp, #12]
    d876:	aa0c      	add	r2, sp, #48	; 0x30
    d878:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
    d87a:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    d87c:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d880:	2202      	movs	r2, #2
    d882:	a805      	add	r0, sp, #20
    d884:	f019 fbf6 	bl	27074 <strtoul>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    d888:	b2c0      	uxtb	r0, r0
    d88a:	280f      	cmp	r0, #15
    d88c:	d844      	bhi.n	d918 <at_handler+0x4e0>
	switch (sys_mode_current) {
    d88e:	782b      	ldrb	r3, [r5, #0]
    d890:	3b01      	subs	r3, #1
    d892:	2b04      	cmp	r3, #4
    d894:	d828      	bhi.n	d8e8 <at_handler+0x4b0>
    d896:	e8df f003 	tbb	[pc, r3]
    d89a:	2503      	.short	0x2503
    d89c:	0327      	.short	0x0327
    d89e:	25          	.byte	0x25
    d89f:	00          	.byte	0x00
		multiplier = edrx_lookup_ltem[idx];
    d8a0:	4b3f      	ldr	r3, [pc, #252]	; (d9a0 <at_handler+0x568>)
		multiplier = edrx_lookup_nbiot[idx];
    d8a2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d8a6:	2800      	cmp	r0, #0
    d8a8:	d034      	beq.n	d914 <at_handler+0x4dc>
    d8aa:	f7fe fe1b 	bl	c4e4 <__aeabi_i2d>
    d8ae:	a32e      	add	r3, pc, #184	; (adr r3, d968 <at_handler+0x530>)
    d8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    d8b4:	f7ff fa9e 	bl	cdf4 <__aeabi_dmul>
    d8b8:	f7fe ff2e 	bl	c718 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
    d8bc:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d8be:	900a      	str	r0, [sp, #40]	; 0x28
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d8c0:	ab03      	add	r3, sp, #12
    d8c2:	aa05      	add	r2, sp, #20
    d8c4:	a807      	add	r0, sp, #28
	len = sizeof(tmp_buf) - 1;
    d8c6:	9103      	str	r1, [sp, #12]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d8c8:	f020 fde7 	bl	2e49a <at_params_string_get>
	if (err) {
    d8cc:	4604      	mov	r4, r0
    d8ce:	b330      	cbz	r0, d91e <at_handler+0x4e6>
    d8d0:	4a27      	ldr	r2, [pc, #156]	; (d970 <at_handler+0x538>)
    d8d2:	4b28      	ldr	r3, [pc, #160]	; (d974 <at_handler+0x53c>)
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
    d8d4:	4601      	mov	r1, r0
    d8d6:	1ad2      	subs	r2, r2, r3
    d8d8:	08d2      	lsrs	r2, r2, #3
    d8da:	0192      	lsls	r2, r2, #6
    d8dc:	4831      	ldr	r0, [pc, #196]	; (d9a4 <at_handler+0x56c>)
    d8de:	f042 0201 	orr.w	r2, r2, #1
    d8e2:	e7ac      	b.n	d83e <at_handler+0x406>
		multiplier = edrx_lookup_nbiot[idx];
    d8e4:	4b30      	ldr	r3, [pc, #192]	; (d9a8 <at_handler+0x570>)
    d8e6:	e7dc      	b.n	d8a2 <at_handler+0x46a>
    d8e8:	4b22      	ldr	r3, [pc, #136]	; (d974 <at_handler+0x53c>)
    d8ea:	4921      	ldr	r1, [pc, #132]	; (d970 <at_handler+0x538>)
		LOG_ERR("No LTE connection available in this system mode");
    d8ec:	4825      	ldr	r0, [pc, #148]	; (d984 <at_handler+0x54c>)
    d8ee:	1ac9      	subs	r1, r1, r3
    d8f0:	08c9      	lsrs	r1, r1, #3
    d8f2:	0189      	lsls	r1, r1, #6
    d8f4:	f041 0101 	orr.w	r1, r1, #1
    d8f8:	f01e fe2a 	bl	2c550 <log_0>
		return -ENOTCONN;
    d8fc:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    d900:	4a1b      	ldr	r2, [pc, #108]	; (d970 <at_handler+0x538>)
    d902:	4b1c      	ldr	r3, [pc, #112]	; (d974 <at_handler+0x53c>)
		LOG_ERR("Failed to get eDRX value, error; %d", err);
    d904:	4621      	mov	r1, r4
    d906:	1ad2      	subs	r2, r2, r3
    d908:	08d2      	lsrs	r2, r2, #3
    d90a:	0192      	lsls	r2, r2, #6
    d90c:	4827      	ldr	r0, [pc, #156]	; (d9ac <at_handler+0x574>)
    d90e:	f042 0201 	orr.w	r2, r2, #1
    d912:	e794      	b.n	d83e <at_handler+0x406>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d914:	4826      	ldr	r0, [pc, #152]	; (d9b0 <at_handler+0x578>)
    d916:	e7d1      	b.n	d8bc <at_handler+0x484>
		return -EINVAL;
    d918:	f06f 0415 	mvn.w	r4, #21
    d91c:	e7f0      	b.n	d900 <at_handler+0x4c8>
	tmp_buf[len] = '\0';
    d91e:	9b03      	ldr	r3, [sp, #12]
    d920:	aa0c      	add	r2, sp, #48	; 0x30
    d922:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
    d924:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    d926:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d92a:	2202      	movs	r2, #2
    d92c:	a805      	add	r0, sp, #20
    d92e:	f019 fba1 	bl	27074 <strtoul>
	if (idx > 15) {
    d932:	b2c1      	uxtb	r1, r0
    d934:	290f      	cmp	r1, #15
    d936:	d90c      	bls.n	d952 <at_handler+0x51a>
    d938:	4b0e      	ldr	r3, [pc, #56]	; (d974 <at_handler+0x53c>)
    d93a:	4a0d      	ldr	r2, [pc, #52]	; (d970 <at_handler+0x538>)
		LOG_ERR("Invalid PTW lookup index: %d", idx);
    d93c:	481d      	ldr	r0, [pc, #116]	; (d9b4 <at_handler+0x57c>)
    d93e:	1ad2      	subs	r2, r2, r3
    d940:	08d2      	lsrs	r2, r2, #3
    d942:	0192      	lsls	r2, r2, #6
    d944:	f042 0201 	orr.w	r2, r2, #1
    d948:	f01e fe11 	bl	2c56e <log_1>
		err = -EINVAL;
    d94c:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
    d950:	e777      	b.n	d842 <at_handler+0x40a>
	idx += 1;
    d952:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
    d954:	b2c0      	uxtb	r0, r0
    d956:	ee07 0a90 	vmov	s15, r0
    d95a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d95e:	ee67 7a88 	vmul.f32	s15, s15, s16
    d962:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
clean_exit:
    d966:	e76c      	b.n	d842 <at_handler+0x40a>
    d968:	47ae147b 	.word	0x47ae147b
    d96c:	40247ae1 	.word	0x40247ae1
    d970:	0002ecc4 	.word	0x0002ecc4
    d974:	0002ec7c 	.word	0x0002ec7c
    d978:	00031e91 	.word	0x00031e91
    d97c:	00031eba 	.word	0x00031eba
    d980:	2002626d 	.word	0x2002626d
    d984:	00031efd 	.word	0x00031efd
    d988:	00031ff1 	.word	0x00031ff1
    d98c:	3fa3d70a 	.word	0x3fa3d70a
    d990:	00031d3d 	.word	0x00031d3d
    d994:	4023d70a 	.word	0x4023d70a
    d998:	00031f2d 	.word	0x00031f2d
    d99c:	00031f59 	.word	0x00031f59
    d9a0:	0002f8fc 	.word	0x0002f8fc
    d9a4:	00031fa9 	.word	0x00031fa9
    d9a8:	0002f91c 	.word	0x0002f91c
    d9ac:	00031f85 	.word	0x00031f85
    d9b0:	40a3d70a 	.word	0x40a3d70a
    d9b4:	00031fd4 	.word	0x00031fd4

0000d9b8 <_strtod_l>:
    d9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9bc:	4c25      	ldr	r4, [pc, #148]	; (da54 <_strtod_l+0x9c>)
    d9be:	460f      	mov	r7, r1
    d9c0:	2500      	movs	r5, #0
    d9c2:	4683      	mov	fp, r0
    d9c4:	6824      	ldr	r4, [r4, #0]
    d9c6:	ed2d 8b02 	vpush	{d8}
    d9ca:	b0a3      	sub	sp, #140	; 0x8c
    d9cc:	4620      	mov	r0, r4
    d9ce:	9408      	str	r4, [sp, #32]
    d9d0:	461c      	mov	r4, r3
    d9d2:	9207      	str	r2, [sp, #28]
    d9d4:	951e      	str	r5, [sp, #120]	; 0x78
    d9d6:	f018 ff61 	bl	2689c <strlen>
    d9da:	2100      	movs	r1, #0
    d9dc:	2200      	movs	r2, #0
    d9de:	463b      	mov	r3, r7
    d9e0:	4680      	mov	r8, r0
    d9e2:	971d      	str	r7, [sp, #116]	; 0x74
    d9e4:	e9cd 1204 	strd	r1, r2, [sp, #16]
    d9e8:	469a      	mov	sl, r3
    d9ea:	f813 6b01 	ldrb.w	r6, [r3], #1
    d9ee:	2e2d      	cmp	r6, #45	; 0x2d
    d9f0:	d832      	bhi.n	da58 <_strtod_l+0xa0>
    d9f2:	e8df f016 	tbh	[pc, r6, lsl #1]
    d9f6:	01e4      	.short	0x01e4
    d9f8:	00310031 	.word	0x00310031
    d9fc:	00310031 	.word	0x00310031
    da00:	00310031 	.word	0x00310031
    da04:	00310031 	.word	0x00310031
    da08:	01f201f2 	.word	0x01f201f2
    da0c:	01f201f2 	.word	0x01f201f2
    da10:	003101f2 	.word	0x003101f2
    da14:	00310031 	.word	0x00310031
    da18:	00310031 	.word	0x00310031
    da1c:	00310031 	.word	0x00310031
    da20:	00310031 	.word	0x00310031
    da24:	00310031 	.word	0x00310031
    da28:	00310031 	.word	0x00310031
    da2c:	00310031 	.word	0x00310031
    da30:	00310031 	.word	0x00310031
    da34:	01f20031 	.word	0x01f20031
    da38:	00310031 	.word	0x00310031
    da3c:	00310031 	.word	0x00310031
    da40:	00310031 	.word	0x00310031
    da44:	00310031 	.word	0x00310031
    da48:	00310031 	.word	0x00310031
    da4c:	00310423 	.word	0x00310423
    da50:	0417      	.short	0x0417
    da52:	bf00      	nop
    da54:	0002f8d8 	.word	0x0002f8d8
    da58:	2300      	movs	r3, #0
    da5a:	930a      	str	r3, [sp, #40]	; 0x28
    da5c:	2e30      	cmp	r6, #48	; 0x30
    da5e:	f000 81d9 	beq.w	de14 <_strtod_l+0x45c>
    da62:	2300      	movs	r3, #0
    da64:	930b      	str	r3, [sp, #44]	; 0x2c
    da66:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    da6a:	2b09      	cmp	r3, #9
    da6c:	f200 8460 	bhi.w	e330 <_strtod_l+0x978>
    da70:	2500      	movs	r5, #0
    da72:	4650      	mov	r0, sl
    da74:	46a9      	mov	r9, r5
    da76:	462c      	mov	r4, r5
    da78:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    da7c:	3001      	adds	r0, #1
    da7e:	eb09 0289 	add.w	r2, r9, r9, lsl #2
    da82:	2c08      	cmp	r4, #8
    da84:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    da88:	901d      	str	r0, [sp, #116]	; 0x74
    da8a:	eb06 0242 	add.w	r2, r6, r2, lsl #1
    da8e:	7806      	ldrb	r6, [r0, #0]
    da90:	bfc8      	it	gt
    da92:	f1a3 0530 	subgt.w	r5, r3, #48	; 0x30
    da96:	f104 0401 	add.w	r4, r4, #1
    da9a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    da9e:	bfd8      	it	le
    daa0:	f1a2 0930 	suble.w	r9, r2, #48	; 0x30
    daa4:	2b09      	cmp	r3, #9
    daa6:	d9e7      	bls.n	da78 <_strtod_l+0xc0>
    daa8:	9908      	ldr	r1, [sp, #32]
    daaa:	4642      	mov	r2, r8
    daac:	f018 ff24 	bl	268f8 <strncmp>
    dab0:	2800      	cmp	r0, #0
    dab2:	f000 82a8 	beq.w	e006 <_strtod_l+0x64e>
    dab6:	f026 0620 	bic.w	r6, r6, #32
    daba:	2e45      	cmp	r6, #69	; 0x45
    dabc:	f000 81be 	beq.w	de3c <_strtod_l+0x484>
    dac0:	2300      	movs	r3, #0
    dac2:	46a0      	mov	r8, r4
    dac4:	930c      	str	r3, [sp, #48]	; 0x30
    dac6:	9308      	str	r3, [sp, #32]
    dac8:	4648      	mov	r0, r9
    daca:	4646      	mov	r6, r8
    dacc:	f7fe fcfa 	bl	c4c4 <__aeabi_ui2d>
    dad0:	4602      	mov	r2, r0
    dad2:	460b      	mov	r3, r1
    dad4:	2c00      	cmp	r4, #0
    dad6:	bf08      	it	eq
    dad8:	4644      	moveq	r4, r8
    dada:	2e10      	cmp	r6, #16
    dadc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    dae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dae2:	bfa8      	it	ge
    dae4:	2610      	movge	r6, #16
    dae6:	9a08      	ldr	r2, [sp, #32]
    dae8:	f1b8 0f09 	cmp.w	r8, #9
    daec:	eba3 0302 	sub.w	r3, r3, r2
    daf0:	930e      	str	r3, [sp, #56]	; 0x38
    daf2:	dd13      	ble.n	db1c <_strtod_l+0x164>
    daf4:	4bc2      	ldr	r3, [pc, #776]	; (de00 <_strtod_l+0x448>)
    daf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    dafa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    dafe:	f7ff f979 	bl	cdf4 <__aeabi_dmul>
    db02:	ec41 0b18 	vmov	d8, r0, r1
    db06:	4628      	mov	r0, r5
    db08:	f7fe fcdc 	bl	c4c4 <__aeabi_ui2d>
    db0c:	4602      	mov	r2, r0
    db0e:	460b      	mov	r3, r1
    db10:	ec51 0b18 	vmov	r0, r1, d8
    db14:	f7fe fb9a 	bl	c24c <__adddf3>
    db18:	e9cd 0104 	strd	r0, r1, [sp, #16]
    db1c:	f1b8 0f0f 	cmp.w	r8, #15
    db20:	f300 8200 	bgt.w	df24 <_strtod_l+0x56c>
    db24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    db26:	2b00      	cmp	r3, #0
    db28:	f000 8449 	beq.w	e3be <_strtod_l+0xa06>
    db2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    db2e:	f340 83c6 	ble.w	e2be <_strtod_l+0x906>
    db32:	2b16      	cmp	r3, #22
    db34:	f340 8567 	ble.w	e606 <_strtod_l+0xc4e>
    db38:	f1c8 0325 	rsb	r3, r8, #37	; 0x25
    db3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    db3e:	4293      	cmp	r3, r2
    db40:	f280 85b5 	bge.w	e6ae <_strtod_l+0xcf6>
    db44:	eba8 0306 	sub.w	r3, r8, r6
    db48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    db4a:	189d      	adds	r5, r3, r2
    db4c:	f015 030f 	ands.w	r3, r5, #15
    db50:	d00a      	beq.n	db68 <_strtod_l+0x1b0>
    db52:	49ab      	ldr	r1, [pc, #684]	; (de00 <_strtod_l+0x448>)
    db54:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    db58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    db5c:	e9d1 0100 	ldrd	r0, r1, [r1]
    db60:	f7ff f948 	bl	cdf4 <__aeabi_dmul>
    db64:	e9cd 0104 	strd	r0, r1, [sp, #16]
    db68:	f035 030f 	bics.w	r3, r5, #15
    db6c:	f040 8380 	bne.w	e270 <_strtod_l+0x8b8>
    db70:	2300      	movs	r3, #0
    db72:	930b      	str	r3, [sp, #44]	; 0x2c
    db74:	4643      	mov	r3, r8
    db76:	4622      	mov	r2, r4
    db78:	4651      	mov	r1, sl
    db7a:	4658      	mov	r0, fp
    db7c:	f8cd 9000 	str.w	r9, [sp]
    db80:	f01d f8fe 	bl	2ad80 <__s2b>
    db84:	9014      	str	r0, [sp, #80]	; 0x50
    db86:	2800      	cmp	r0, #0
    db88:	f000 84ff 	beq.w	e58a <_strtod_l+0xbd2>
    db8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    db8e:	2600      	movs	r6, #0
    db90:	9b08      	ldr	r3, [sp, #32]
    db92:	4637      	mov	r7, r6
    db94:	46b2      	mov	sl, r6
    db96:	1a9b      	subs	r3, r3, r2
    db98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    db9a:	2a00      	cmp	r2, #0
    db9c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    dba0:	bfa8      	it	ge
    dba2:	4633      	movge	r3, r6
    dba4:	9211      	str	r2, [sp, #68]	; 0x44
    dba6:	930f      	str	r3, [sp, #60]	; 0x3c
    dba8:	9c14      	ldr	r4, [sp, #80]	; 0x50
    dbaa:	4658      	mov	r0, fp
    dbac:	6861      	ldr	r1, [r4, #4]
    dbae:	f01d f873 	bl	2ac98 <_Balloc>
    dbb2:	4681      	mov	r9, r0
    dbb4:	2800      	cmp	r0, #0
    dbb6:	f000 8288 	beq.w	e0ca <_strtod_l+0x712>
    dbba:	6922      	ldr	r2, [r4, #16]
    dbbc:	f104 010c 	add.w	r1, r4, #12
    dbc0:	300c      	adds	r0, #12
    dbc2:	3202      	adds	r2, #2
    dbc4:	ed9d 7b04 	vldr	d7, [sp, #16]
    dbc8:	0092      	lsls	r2, r2, #2
    dbca:	ed8d 7b08 	vstr	d7, [sp, #32]
    dbce:	f7fe ffbd 	bl	cb4c <memcpy>
    dbd2:	aa20      	add	r2, sp, #128	; 0x80
    dbd4:	a91f      	add	r1, sp, #124	; 0x7c
    dbd6:	4658      	mov	r0, fp
    dbd8:	ed9d 0b08 	vldr	d0, [sp, #32]
    dbdc:	f01d fc26 	bl	2b42c <__d2b>
    dbe0:	901e      	str	r0, [sp, #120]	; 0x78
    dbe2:	2800      	cmp	r0, #0
    dbe4:	f000 8261 	beq.w	e0aa <_strtod_l+0x6f2>
    dbe8:	2101      	movs	r1, #1
    dbea:	4658      	mov	r0, fp
    dbec:	f01d f968 	bl	2aec0 <__i2b>
    dbf0:	4607      	mov	r7, r0
    dbf2:	2800      	cmp	r0, #0
    dbf4:	f000 8269 	beq.w	e0ca <_strtod_l+0x712>
    dbf8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    dbfa:	2b00      	cmp	r3, #0
    dbfc:	f2c0 8258 	blt.w	e0b0 <_strtod_l+0x6f8>
    dc00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    dc02:	9d11      	ldr	r5, [sp, #68]	; 0x44
    dc04:	189e      	adds	r6, r3, r2
    dc06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    dc08:	9c20      	ldr	r4, [sp, #128]	; 0x80
    dc0a:	1a9b      	subs	r3, r3, r2
    dc0c:	4a7d      	ldr	r2, [pc, #500]	; (de04 <_strtod_l+0x44c>)
    dc0e:	4423      	add	r3, r4
    dc10:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
    dc14:	3b01      	subs	r3, #1
    dc16:	4293      	cmp	r3, r2
    dc18:	f280 820c 	bge.w	e034 <_strtod_l+0x67c>
    dc1c:	1ad2      	subs	r2, r2, r3
    dc1e:	2a1f      	cmp	r2, #31
    dc20:	eba4 0402 	sub.w	r4, r4, r2
    dc24:	f300 827c 	bgt.w	e120 <_strtod_l+0x768>
    dc28:	2301      	movs	r3, #1
    dc2a:	2100      	movs	r1, #0
    dc2c:	4093      	lsls	r3, r2
    dc2e:	9115      	str	r1, [sp, #84]	; 0x54
    dc30:	930c      	str	r3, [sp, #48]	; 0x30
    dc32:	4425      	add	r5, r4
    dc34:	4434      	add	r4, r6
    dc36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dc38:	42a6      	cmp	r6, r4
    dc3a:	441d      	add	r5, r3
    dc3c:	4633      	mov	r3, r6
    dc3e:	bfa8      	it	ge
    dc40:	4623      	movge	r3, r4
    dc42:	42ab      	cmp	r3, r5
    dc44:	bfa8      	it	ge
    dc46:	462b      	movge	r3, r5
    dc48:	2b00      	cmp	r3, #0
    dc4a:	dd02      	ble.n	dc52 <_strtod_l+0x29a>
    dc4c:	1ae4      	subs	r4, r4, r3
    dc4e:	1aed      	subs	r5, r5, r3
    dc50:	1af6      	subs	r6, r6, r3
    dc52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dc54:	2b00      	cmp	r3, #0
    dc56:	f300 8208 	bgt.w	e06a <_strtod_l+0x6b2>
    dc5a:	2c00      	cmp	r4, #0
    dc5c:	f300 821c 	bgt.w	e098 <_strtod_l+0x6e0>
    dc60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dc62:	2b00      	cmp	r3, #0
    dc64:	f300 8228 	bgt.w	e0b8 <_strtod_l+0x700>
    dc68:	2d00      	cmp	r5, #0
    dc6a:	f300 824f 	bgt.w	e10c <_strtod_l+0x754>
    dc6e:	2e00      	cmp	r6, #0
    dc70:	dd08      	ble.n	dc84 <_strtod_l+0x2cc>
    dc72:	4639      	mov	r1, r7
    dc74:	4632      	mov	r2, r6
    dc76:	4658      	mov	r0, fp
    dc78:	f01d fa1e 	bl	2b0b8 <__lshift>
    dc7c:	4607      	mov	r7, r0
    dc7e:	2800      	cmp	r0, #0
    dc80:	f000 8223 	beq.w	e0ca <_strtod_l+0x712>
    dc84:	464a      	mov	r2, r9
    dc86:	991e      	ldr	r1, [sp, #120]	; 0x78
    dc88:	4658      	mov	r0, fp
    dc8a:	f01d fa9b 	bl	2b1c4 <__mdiff>
    dc8e:	4682      	mov	sl, r0
    dc90:	2800      	cmp	r0, #0
    dc92:	f000 821a 	beq.w	e0ca <_strtod_l+0x712>
    dc96:	2300      	movs	r3, #0
    dc98:	68c2      	ldr	r2, [r0, #12]
    dc9a:	4639      	mov	r1, r7
    dc9c:	60c3      	str	r3, [r0, #12]
    dc9e:	9210      	str	r2, [sp, #64]	; 0x40
    dca0:	f01d fa72 	bl	2b188 <__mcmp>
    dca4:	2800      	cmp	r0, #0
    dca6:	f2c0 853c 	blt.w	e722 <_strtod_l+0xd6a>
    dcaa:	f000 84bf 	beq.w	e62c <_strtod_l+0xc74>
    dcae:	4639      	mov	r1, r7
    dcb0:	4650      	mov	r0, sl
    dcb2:	f01d fc17 	bl	2b4e4 <__ratio>
    dcb6:	2200      	movs	r2, #0
    dcb8:	ee10 0a10 	vmov	r0, s0
    dcbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dcc0:	ec55 4b10 	vmov	r4, r5, d0
    dcc4:	4629      	mov	r1, r5
    dcc6:	f7fe fce1 	bl	c68c <__aeabi_dcmple>
    dcca:	2800      	cmp	r0, #0
    dccc:	f000 81b7 	beq.w	e03e <_strtod_l+0x686>
    dcd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dcd2:	2b00      	cmp	r3, #0
    dcd4:	f000 822f 	beq.w	e136 <_strtod_l+0x77e>
    dcd8:	2300      	movs	r3, #0
    dcda:	4c4b      	ldr	r4, [pc, #300]	; (de08 <_strtod_l+0x450>)
    dcdc:	4d4a      	ldr	r5, [pc, #296]	; (de08 <_strtod_l+0x450>)
    dcde:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    dce2:	9b05      	ldr	r3, [sp, #20]
    dce4:	2400      	movs	r4, #0
    dce6:	4698      	mov	r8, r3
    dce8:	4e48      	ldr	r6, [pc, #288]	; (de0c <_strtod_l+0x454>)
    dcea:	4b49      	ldr	r3, [pc, #292]	; (de10 <_strtod_l+0x458>)
    dcec:	ea08 0606 	and.w	r6, r8, r6
    dcf0:	429e      	cmp	r6, r3
    dcf2:	f000 825f 	beq.w	e1b4 <_strtod_l+0x7fc>
    dcf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dcf8:	b323      	cbz	r3, dd44 <_strtod_l+0x38c>
    dcfa:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
    dcfe:	d821      	bhi.n	dd44 <_strtod_l+0x38c>
    dd00:	4620      	mov	r0, r4
    dd02:	4629      	mov	r1, r5
    dd04:	a33c      	add	r3, pc, #240	; (adr r3, ddf8 <_strtod_l+0x440>)
    dd06:	e9d3 2300 	ldrd	r2, r3, [r3]
    dd0a:	f7fe fcbf 	bl	c68c <__aeabi_dcmple>
    dd0e:	b1a0      	cbz	r0, dd3a <_strtod_l+0x382>
    dd10:	4629      	mov	r1, r5
    dd12:	4620      	mov	r0, r4
    dd14:	f7ff fa96 	bl	d244 <__aeabi_d2uiz>
    dd18:	2801      	cmp	r0, #1
    dd1a:	bf38      	it	cc
    dd1c:	2001      	movcc	r0, #1
    dd1e:	f7fe fbd1 	bl	c4c4 <__aeabi_ui2d>
    dd22:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dd24:	4604      	mov	r4, r0
    dd26:	460d      	mov	r5, r1
    dd28:	2b00      	cmp	r3, #0
    dd2a:	f000 829c 	beq.w	e266 <_strtod_l+0x8ae>
    dd2e:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
    dd32:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    dd36:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    dd3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dd3c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
    dd40:	1b9b      	subs	r3, r3, r6
    dd42:	930d      	str	r3, [sp, #52]	; 0x34
    dd44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    dd48:	ed9d 0b08 	vldr	d0, [sp, #32]
    dd4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    dd50:	f01d fad8 	bl	2b304 <__ulp>
    dd54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    dd58:	ec53 2b10 	vmov	r2, r3, d0
    dd5c:	f7ff f84a 	bl	cdf4 <__aeabi_dmul>
    dd60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    dd64:	f7fe fa72 	bl	c24c <__adddf3>
    dd68:	4602      	mov	r2, r0
    dd6a:	460b      	mov	r3, r1
    dd6c:	4688      	mov	r8, r1
    dd6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    dd72:	4b26      	ldr	r3, [pc, #152]	; (de0c <_strtod_l+0x454>)
    dd74:	ea08 0303 	and.w	r3, r8, r3
    dd78:	42b3      	cmp	r3, r6
    dd7a:	d103      	bne.n	dd84 <_strtod_l+0x3cc>
    dd7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dd7e:	2b00      	cmp	r3, #0
    dd80:	f000 82af 	beq.w	e2e2 <_strtod_l+0x92a>
    dd84:	991e      	ldr	r1, [sp, #120]	; 0x78
    dd86:	4658      	mov	r0, fp
    dd88:	f01c ffac 	bl	2ace4 <_Bfree>
    dd8c:	4649      	mov	r1, r9
    dd8e:	4658      	mov	r0, fp
    dd90:	f01c ffa8 	bl	2ace4 <_Bfree>
    dd94:	4639      	mov	r1, r7
    dd96:	4658      	mov	r0, fp
    dd98:	f01c ffa4 	bl	2ace4 <_Bfree>
    dd9c:	4651      	mov	r1, sl
    dd9e:	4658      	mov	r0, fp
    dda0:	f01c ffa0 	bl	2ace4 <_Bfree>
    dda4:	e700      	b.n	dba8 <_strtod_l+0x1f0>
    dda6:	f04f 0c01 	mov.w	ip, #1
    ddaa:	f026 0320 	bic.w	r3, r6, #32
    ddae:	2b45      	cmp	r3, #69	; 0x45
    ddb0:	f040 80b2 	bne.w	df18 <_strtod_l+0x560>
    ddb4:	ea44 0300 	orr.w	r3, r4, r0
    ddb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ddba:	4313      	orrs	r3, r2
    ddbc:	d142      	bne.n	de44 <_strtod_l+0x48c>
    ddbe:	9b07      	ldr	r3, [sp, #28]
    ddc0:	b16b      	cbz	r3, ddde <_strtod_l+0x426>
    ddc2:	f04f 0800 	mov.w	r8, #0
    ddc6:	f04f 0900 	mov.w	r9, #0
    ddca:	601f      	str	r7, [r3, #0]
    ddcc:	ec49 8b10 	vmov	d0, r8, r9
    ddd0:	b023      	add	sp, #140	; 0x8c
    ddd2:	ecbd 8b02 	vpop	{d8}
    ddd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddda:	931d      	str	r3, [sp, #116]	; 0x74
    dddc:	e604      	b.n	d9e8 <_strtod_l+0x30>
    ddde:	f04f 0800 	mov.w	r8, #0
    dde2:	f04f 0900 	mov.w	r9, #0
    dde6:	ec49 8b10 	vmov	d0, r8, r9
    ddea:	b023      	add	sp, #140	; 0x8c
    ddec:	ecbd 8b02 	vpop	{d8}
    ddf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddf4:	f3af 8000 	nop.w
    ddf8:	ffc00000 	.word	0xffc00000
    ddfc:	41dfffff 	.word	0x41dfffff
    de00:	0002edd8 	.word	0x0002edd8
    de04:	fffffc02 	.word	0xfffffc02
    de08:	3ff00000 	.word	0x3ff00000
    de0c:	7ff00000 	.word	0x7ff00000
    de10:	7fe00000 	.word	0x7fe00000
    de14:	f89a 3001 	ldrb.w	r3, [sl, #1]
    de18:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    de1c:	2b58      	cmp	r3, #88	; 0x58
    de1e:	f000 82e3 	beq.w	e3e8 <_strtod_l+0xa30>
    de22:	4653      	mov	r3, sl
    de24:	3301      	adds	r3, #1
    de26:	931d      	str	r3, [sp, #116]	; 0x74
    de28:	781e      	ldrb	r6, [r3, #0]
    de2a:	2e30      	cmp	r6, #48	; 0x30
    de2c:	d0fa      	beq.n	de24 <_strtod_l+0x46c>
    de2e:	469a      	mov	sl, r3
    de30:	2e00      	cmp	r6, #0
    de32:	f000 80d2 	beq.w	dfda <_strtod_l+0x622>
    de36:	2301      	movs	r3, #1
    de38:	930b      	str	r3, [sp, #44]	; 0x2c
    de3a:	e614      	b.n	da66 <_strtod_l+0xae>
    de3c:	2000      	movs	r0, #0
    de3e:	46a6      	mov	lr, r4
    de40:	4684      	mov	ip, r0
    de42:	9008      	str	r0, [sp, #32]
    de44:	9f1d      	ldr	r7, [sp, #116]	; 0x74
    de46:	1c7b      	adds	r3, r7, #1
    de48:	931d      	str	r3, [sp, #116]	; 0x74
    de4a:	787e      	ldrb	r6, [r7, #1]
    de4c:	2e2b      	cmp	r6, #43	; 0x2b
    de4e:	f000 826c 	beq.w	e32a <_strtod_l+0x972>
    de52:	2e2d      	cmp	r6, #45	; 0x2d
    de54:	f000 8194 	beq.w	e180 <_strtod_l+0x7c8>
    de58:	f04f 0800 	mov.w	r8, #0
    de5c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    de60:	2b09      	cmp	r3, #9
    de62:	f200 8193 	bhi.w	e18c <_strtod_l+0x7d4>
    de66:	2e30      	cmp	r6, #48	; 0x30
    de68:	d105      	bne.n	de76 <_strtod_l+0x4be>
    de6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    de6c:	3301      	adds	r3, #1
    de6e:	931d      	str	r3, [sp, #116]	; 0x74
    de70:	781e      	ldrb	r6, [r3, #0]
    de72:	2e30      	cmp	r6, #48	; 0x30
    de74:	d0fa      	beq.n	de6c <_strtod_l+0x4b4>
    de76:	f1a6 0331 	sub.w	r3, r6, #49	; 0x31
    de7a:	2b08      	cmp	r3, #8
    de7c:	d84c      	bhi.n	df18 <_strtod_l+0x560>
    de7e:	991d      	ldr	r1, [sp, #116]	; 0x74
    de80:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    de84:	1c4a      	adds	r2, r1, #1
    de86:	910c      	str	r1, [sp, #48]	; 0x30
    de88:	921d      	str	r2, [sp, #116]	; 0x74
    de8a:	784e      	ldrb	r6, [r1, #1]
    de8c:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
    de90:	2909      	cmp	r1, #9
    de92:	f200 8307 	bhi.w	e4a4 <_strtod_l+0xaec>
    de96:	3201      	adds	r2, #1
    de98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    de9c:	921d      	str	r2, [sp, #116]	; 0x74
    de9e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    dea2:	7816      	ldrb	r6, [r2, #0]
    dea4:	3b30      	subs	r3, #48	; 0x30
    dea6:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
    deaa:	2909      	cmp	r1, #9
    deac:	d9f3      	bls.n	de96 <_strtod_l+0x4de>
    deae:	990c      	ldr	r1, [sp, #48]	; 0x30
    deb0:	1a52      	subs	r2, r2, r1
    deb2:	2a08      	cmp	r2, #8
    deb4:	f340 82f6 	ble.w	e4a4 <_strtod_l+0xaec>
    deb8:	f644 631f 	movw	r3, #19999	; 0x4e1f
    debc:	930c      	str	r3, [sp, #48]	; 0x30
    debe:	f1b8 0f00 	cmp.w	r8, #0
    dec2:	d002      	beq.n	deca <_strtod_l+0x512>
    dec4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dec6:	425b      	negs	r3, r3
    dec8:	930c      	str	r3, [sp, #48]	; 0x30
    deca:	2c00      	cmp	r4, #0
    decc:	f040 82d5 	bne.w	e47a <_strtod_l+0xac2>
    ded0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ded2:	4303      	orrs	r3, r0
    ded4:	f040 8081 	bne.w	dfda <_strtod_l+0x622>
    ded8:	f1bc 0f00 	cmp.w	ip, #0
    dedc:	f47f af6f 	bne.w	ddbe <_strtod_l+0x406>
    dee0:	2e69      	cmp	r6, #105	; 0x69
    dee2:	f000 81d3 	beq.w	e28c <_strtod_l+0x8d4>
    dee6:	dc1a      	bgt.n	df1e <_strtod_l+0x566>
    dee8:	2e49      	cmp	r6, #73	; 0x49
    deea:	f000 81cf 	beq.w	e28c <_strtod_l+0x8d4>
    deee:	2e4e      	cmp	r6, #78	; 0x4e
    def0:	f47f af65 	bne.w	ddbe <_strtod_l+0x406>
    def4:	49a7      	ldr	r1, [pc, #668]	; (e194 <_strtod_l+0x7dc>)
    def6:	a81d      	add	r0, sp, #116	; 0x74
    def8:	f01c fc8e 	bl	2a818 <__match>
    defc:	2800      	cmp	r0, #0
    defe:	f43f af5e 	beq.w	ddbe <_strtod_l+0x406>
    df02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    df04:	781b      	ldrb	r3, [r3, #0]
    df06:	2b28      	cmp	r3, #40	; 0x28
    df08:	f000 83f8 	beq.w	e6fc <_strtod_l+0xd44>
    df0c:	48a2      	ldr	r0, [pc, #648]	; (e198 <_strtod_l+0x7e0>)
    df0e:	f003 fa2f 	bl	11370 <nan>
    df12:	ec59 8b10 	vmov	r8, r9, d0
    df16:	e064      	b.n	dfe2 <_strtod_l+0x62a>
    df18:	2300      	movs	r3, #0
    df1a:	930c      	str	r3, [sp, #48]	; 0x30
    df1c:	e7d5      	b.n	deca <_strtod_l+0x512>
    df1e:	2e6e      	cmp	r6, #110	; 0x6e
    df20:	d0e8      	beq.n	def4 <_strtod_l+0x53c>
    df22:	e74c      	b.n	ddbe <_strtod_l+0x406>
    df24:	eba8 0306 	sub.w	r3, r8, r6
    df28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    df2a:	189d      	adds	r5, r3, r2
    df2c:	2d00      	cmp	r5, #0
    df2e:	f73f ae0d 	bgt.w	db4c <_strtod_l+0x194>
    df32:	f43f ae1d 	beq.w	db70 <_strtod_l+0x1b8>
    df36:	426d      	negs	r5, r5
    df38:	f015 020f 	ands.w	r2, r5, #15
    df3c:	d00a      	beq.n	df54 <_strtod_l+0x59c>
    df3e:	4b97      	ldr	r3, [pc, #604]	; (e19c <_strtod_l+0x7e4>)
    df40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    df44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    df48:	e9d3 2300 	ldrd	r2, r3, [r3]
    df4c:	f7ff f87c 	bl	d048 <__aeabi_ddiv>
    df50:	e9cd 0104 	strd	r0, r1, [sp, #16]
    df54:	112d      	asrs	r5, r5, #4
    df56:	f43f ae0b 	beq.w	db70 <_strtod_l+0x1b8>
    df5a:	2d1f      	cmp	r5, #31
    df5c:	dc3a      	bgt.n	dfd4 <_strtod_l+0x61c>
    df5e:	f015 0310 	ands.w	r3, r5, #16
    df62:	4e8f      	ldr	r6, [pc, #572]	; (e1a0 <_strtod_l+0x7e8>)
    df64:	f04f 0700 	mov.w	r7, #0
    df68:	bf18      	it	ne
    df6a:	236a      	movne	r3, #106	; 0x6a
    df6c:	930b      	str	r3, [sp, #44]	; 0x2c
    df6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    df72:	f015 0f01 	tst.w	r5, #1
    df76:	4610      	mov	r0, r2
    df78:	4619      	mov	r1, r3
    df7a:	d006      	beq.n	df8a <_strtod_l+0x5d2>
    df7c:	2701      	movs	r7, #1
    df7e:	e9d6 2300 	ldrd	r2, r3, [r6]
    df82:	f7fe ff37 	bl	cdf4 <__aeabi_dmul>
    df86:	4602      	mov	r2, r0
    df88:	460b      	mov	r3, r1
    df8a:	106d      	asrs	r5, r5, #1
    df8c:	f106 0608 	add.w	r6, r6, #8
    df90:	d1ef      	bne.n	df72 <_strtod_l+0x5ba>
    df92:	b10f      	cbz	r7, df98 <_strtod_l+0x5e0>
    df94:	e9cd 2304 	strd	r2, r3, [sp, #16]
    df98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    df9a:	b193      	cbz	r3, dfc2 <_strtod_l+0x60a>
    df9c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    dfa0:	f3c2 530a 	ubfx	r3, r2, #20, #11
    dfa4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    dfa8:	2b00      	cmp	r3, #0
    dfaa:	dd0a      	ble.n	dfc2 <_strtod_l+0x60a>
    dfac:	2b1f      	cmp	r3, #31
    dfae:	f340 8450 	ble.w	e852 <_strtod_l+0xe9a>
    dfb2:	2100      	movs	r1, #0
    dfb4:	2b34      	cmp	r3, #52	; 0x34
    dfb6:	9104      	str	r1, [sp, #16]
    dfb8:	f340 8457 	ble.w	e86a <_strtod_l+0xeb2>
    dfbc:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    dfc0:	9305      	str	r3, [sp, #20]
    dfc2:	2200      	movs	r2, #0
    dfc4:	2300      	movs	r3, #0
    dfc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    dfca:	f7fe fb4b 	bl	c664 <__aeabi_dcmpeq>
    dfce:	2800      	cmp	r0, #0
    dfd0:	f43f add0 	beq.w	db74 <_strtod_l+0x1bc>
    dfd4:	2322      	movs	r3, #34	; 0x22
    dfd6:	f8cb 3000 	str.w	r3, [fp]
    dfda:	f04f 0800 	mov.w	r8, #0
    dfde:	f04f 0900 	mov.w	r9, #0
    dfe2:	9a07      	ldr	r2, [sp, #28]
    dfe4:	b10a      	cbz	r2, dfea <_strtod_l+0x632>
    dfe6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    dfe8:	6013      	str	r3, [r2, #0]
    dfea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dfec:	2b00      	cmp	r3, #0
    dfee:	f43f aeed 	beq.w	ddcc <_strtod_l+0x414>
    dff2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
    dff6:	4699      	mov	r9, r3
    dff8:	ec49 8b10 	vmov	d0, r8, r9
    dffc:	b023      	add	sp, #140	; 0x8c
    dffe:	ecbd 8b02 	vpop	{d8}
    e002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e006:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e008:	46a6      	mov	lr, r4
    e00a:	9008      	str	r0, [sp, #32]
    e00c:	eb03 0208 	add.w	r2, r3, r8
    e010:	921d      	str	r2, [sp, #116]	; 0x74
    e012:	f813 6008 	ldrb.w	r6, [r3, r8]
    e016:	f1a6 0230 	sub.w	r2, r6, #48	; 0x30
    e01a:	2a09      	cmp	r2, #9
    e01c:	f63f aec3 	bhi.w	dda6 <_strtod_l+0x3ee>
    e020:	3001      	adds	r0, #1
    e022:	4690      	mov	r8, r2
    e024:	2a00      	cmp	r2, #0
    e026:	f040 81fe 	bne.w	e426 <_strtod_l+0xa6e>
    e02a:	991d      	ldr	r1, [sp, #116]	; 0x74
    e02c:	1c4b      	adds	r3, r1, #1
    e02e:	931d      	str	r3, [sp, #116]	; 0x74
    e030:	784e      	ldrb	r6, [r1, #1]
    e032:	e7f0      	b.n	e016 <_strtod_l+0x65e>
    e034:	2300      	movs	r3, #0
    e036:	9315      	str	r3, [sp, #84]	; 0x54
    e038:	2301      	movs	r3, #1
    e03a:	930c      	str	r3, [sp, #48]	; 0x30
    e03c:	e5f9      	b.n	dc32 <_strtod_l+0x27a>
    e03e:	4620      	mov	r0, r4
    e040:	4629      	mov	r1, r5
    e042:	4b58      	ldr	r3, [pc, #352]	; (e1a4 <_strtod_l+0x7ec>)
    e044:	2200      	movs	r2, #0
    e046:	f7fe fed5 	bl	cdf4 <__aeabi_dmul>
    e04a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e04c:	4604      	mov	r4, r0
    e04e:	460d      	mov	r5, r1
    e050:	2b00      	cmp	r3, #0
    e052:	d16d      	bne.n	e130 <_strtod_l+0x778>
    e054:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    e058:	9012      	str	r0, [sp, #72]	; 0x48
    e05a:	9313      	str	r3, [sp, #76]	; 0x4c
    e05c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    e060:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    e064:	9b05      	ldr	r3, [sp, #20]
    e066:	4698      	mov	r8, r3
    e068:	e63e      	b.n	dce8 <_strtod_l+0x330>
    e06a:	4639      	mov	r1, r7
    e06c:	461a      	mov	r2, r3
    e06e:	4658      	mov	r0, fp
    e070:	f01c ffd2 	bl	2b018 <__pow5mult>
    e074:	4607      	mov	r7, r0
    e076:	b340      	cbz	r0, e0ca <_strtod_l+0x712>
    e078:	4601      	mov	r1, r0
    e07a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    e07c:	4658      	mov	r0, fp
    e07e:	f01c ff29 	bl	2aed4 <__multiply>
    e082:	b310      	cbz	r0, e0ca <_strtod_l+0x712>
    e084:	9010      	str	r0, [sp, #64]	; 0x40
    e086:	4658      	mov	r0, fp
    e088:	991e      	ldr	r1, [sp, #120]	; 0x78
    e08a:	f01c fe2b 	bl	2ace4 <_Bfree>
    e08e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e090:	2c00      	cmp	r4, #0
    e092:	931e      	str	r3, [sp, #120]	; 0x78
    e094:	f77f ade4 	ble.w	dc60 <_strtod_l+0x2a8>
    e098:	4622      	mov	r2, r4
    e09a:	991e      	ldr	r1, [sp, #120]	; 0x78
    e09c:	4658      	mov	r0, fp
    e09e:	f01d f80b 	bl	2b0b8 <__lshift>
    e0a2:	901e      	str	r0, [sp, #120]	; 0x78
    e0a4:	2800      	cmp	r0, #0
    e0a6:	f47f addb 	bne.w	dc60 <_strtod_l+0x2a8>
    e0aa:	4656      	mov	r6, sl
    e0ac:	46ca      	mov	sl, r9
    e0ae:	e00f      	b.n	e0d0 <_strtod_l+0x718>
    e0b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e0b2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    e0b4:	1ad5      	subs	r5, r2, r3
    e0b6:	e5a6      	b.n	dc06 <_strtod_l+0x24e>
    e0b8:	4649      	mov	r1, r9
    e0ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e0bc:	4658      	mov	r0, fp
    e0be:	f01c ffab 	bl	2b018 <__pow5mult>
    e0c2:	4681      	mov	r9, r0
    e0c4:	2800      	cmp	r0, #0
    e0c6:	f47f adcf 	bne.w	dc68 <_strtod_l+0x2b0>
    e0ca:	4656      	mov	r6, sl
    e0cc:	46ca      	mov	sl, r9
    e0ce:	981e      	ldr	r0, [sp, #120]	; 0x78
    e0d0:	4b35      	ldr	r3, [pc, #212]	; (e1a8 <_strtod_l+0x7f0>)
    e0d2:	2200      	movs	r2, #0
    e0d4:	9305      	str	r3, [sp, #20]
    e0d6:	2322      	movs	r3, #34	; 0x22
    e0d8:	9204      	str	r2, [sp, #16]
    e0da:	f8cb 3000 	str.w	r3, [fp]
    e0de:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e0e2:	4601      	mov	r1, r0
    e0e4:	4658      	mov	r0, fp
    e0e6:	f01c fdfd 	bl	2ace4 <_Bfree>
    e0ea:	4651      	mov	r1, sl
    e0ec:	4658      	mov	r0, fp
    e0ee:	f01c fdf9 	bl	2ace4 <_Bfree>
    e0f2:	4639      	mov	r1, r7
    e0f4:	4658      	mov	r0, fp
    e0f6:	f01c fdf5 	bl	2ace4 <_Bfree>
    e0fa:	9914      	ldr	r1, [sp, #80]	; 0x50
    e0fc:	4658      	mov	r0, fp
    e0fe:	f01c fdf1 	bl	2ace4 <_Bfree>
    e102:	4631      	mov	r1, r6
    e104:	4658      	mov	r0, fp
    e106:	f01c fded 	bl	2ace4 <_Bfree>
    e10a:	e76a      	b.n	dfe2 <_strtod_l+0x62a>
    e10c:	4649      	mov	r1, r9
    e10e:	462a      	mov	r2, r5
    e110:	4658      	mov	r0, fp
    e112:	f01c ffd1 	bl	2b0b8 <__lshift>
    e116:	4681      	mov	r9, r0
    e118:	2800      	cmp	r0, #0
    e11a:	f47f ada8 	bne.w	dc6e <_strtod_l+0x2b6>
    e11e:	e7d4      	b.n	e0ca <_strtod_l+0x712>
    e120:	4922      	ldr	r1, [pc, #136]	; (e1ac <_strtod_l+0x7f4>)
    e122:	2201      	movs	r2, #1
    e124:	1acb      	subs	r3, r1, r3
    e126:	920c      	str	r2, [sp, #48]	; 0x30
    e128:	fa02 f303 	lsl.w	r3, r2, r3
    e12c:	9315      	str	r3, [sp, #84]	; 0x54
    e12e:	e580      	b.n	dc32 <_strtod_l+0x27a>
    e130:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    e134:	e792      	b.n	e05c <_strtod_l+0x6a4>
    e136:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e13a:	2900      	cmp	r1, #0
    e13c:	f040 8081 	bne.w	e242 <_strtod_l+0x88a>
    e140:	f3c2 0313 	ubfx	r3, r2, #0, #20
    e144:	4690      	mov	r8, r2
    e146:	2b00      	cmp	r3, #0
    e148:	f040 8081 	bne.w	e24e <_strtod_l+0x896>
    e14c:	2200      	movs	r2, #0
    e14e:	4b18      	ldr	r3, [pc, #96]	; (e1b0 <_strtod_l+0x7f8>)
    e150:	4620      	mov	r0, r4
    e152:	4629      	mov	r1, r5
    e154:	f7fe fa90 	bl	c678 <__aeabi_dcmplt>
    e158:	2800      	cmp	r0, #0
    e15a:	f040 8260 	bne.w	e61e <_strtod_l+0xc66>
    e15e:	4620      	mov	r0, r4
    e160:	4629      	mov	r1, r5
    e162:	4b10      	ldr	r3, [pc, #64]	; (e1a4 <_strtod_l+0x7ec>)
    e164:	2200      	movs	r2, #0
    e166:	f7fe fe45 	bl	cdf4 <__aeabi_dmul>
    e16a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    e16e:	4604      	mov	r4, r0
    e170:	460d      	mov	r5, r1
    e172:	901a      	str	r0, [sp, #104]	; 0x68
    e174:	931b      	str	r3, [sp, #108]	; 0x6c
    e176:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    e17a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    e17e:	e5b3      	b.n	dce8 <_strtod_l+0x330>
    e180:	f04f 0801 	mov.w	r8, #1
    e184:	1cbb      	adds	r3, r7, #2
    e186:	931d      	str	r3, [sp, #116]	; 0x74
    e188:	78be      	ldrb	r6, [r7, #2]
    e18a:	e667      	b.n	de5c <_strtod_l+0x4a4>
    e18c:	2300      	movs	r3, #0
    e18e:	971d      	str	r7, [sp, #116]	; 0x74
    e190:	930c      	str	r3, [sp, #48]	; 0x30
    e192:	e69a      	b.n	deca <_strtod_l+0x512>
    e194:	0002f6e8 	.word	0x0002f6e8
    e198:	0002f5a4 	.word	0x0002f5a4
    e19c:	0002edd8 	.word	0x0002edd8
    e1a0:	0002ed88 	.word	0x0002ed88
    e1a4:	3fe00000 	.word	0x3fe00000
    e1a8:	7ff00000 	.word	0x7ff00000
    e1ac:	fffffbe2 	.word	0xfffffbe2
    e1b0:	3ff00000 	.word	0x3ff00000
    e1b4:	f1a8 7354 	sub.w	r3, r8, #55574528	; 0x3500000
    e1b8:	9305      	str	r3, [sp, #20]
    e1ba:	ed9d 7b04 	vldr	d7, [sp, #16]
    e1be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    e1c2:	eeb0 8a47 	vmov.f32	s16, s14
    e1c6:	eef0 8a67 	vmov.f32	s17, s15
    e1ca:	eeb0 0a47 	vmov.f32	s0, s14
    e1ce:	eef0 0a67 	vmov.f32	s1, s15
    e1d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    e1d6:	f01d f895 	bl	2b304 <__ulp>
    e1da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e1de:	ec53 2b10 	vmov	r2, r3, d0
    e1e2:	f7fe fe07 	bl	cdf4 <__aeabi_dmul>
    e1e6:	ec53 2b18 	vmov	r2, r3, d8
    e1ea:	f7fe f82f 	bl	c24c <__adddf3>
    e1ee:	460a      	mov	r2, r1
    e1f0:	4bb7      	ldr	r3, [pc, #732]	; (e4d0 <_strtod_l+0xb18>)
    e1f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    e1f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    e1fa:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    e1fe:	49b5      	ldr	r1, [pc, #724]	; (e4d4 <_strtod_l+0xb1c>)
    e200:	4011      	ands	r1, r2
    e202:	4299      	cmp	r1, r3
    e204:	d92a      	bls.n	e25c <_strtod_l+0x8a4>
    e206:	4ab4      	ldr	r2, [pc, #720]	; (e4d8 <_strtod_l+0xb20>)
    e208:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    e20c:	4291      	cmp	r1, r2
    e20e:	d103      	bne.n	e218 <_strtod_l+0x860>
    e210:	f1b0 3fff 	cmp.w	r0, #4294967295
    e214:	f43f af59 	beq.w	e0ca <_strtod_l+0x712>
    e218:	f04f 33ff 	mov.w	r3, #4294967295
    e21c:	49ae      	ldr	r1, [pc, #696]	; (e4d8 <_strtod_l+0xb20>)
    e21e:	e9cd 3104 	strd	r3, r1, [sp, #16]
    e222:	e5af      	b.n	dd84 <_strtod_l+0x3cc>
    e224:	2301      	movs	r3, #1
    e226:	930a      	str	r3, [sp, #40]	; 0x28
    e228:	f10a 0301 	add.w	r3, sl, #1
    e22c:	931d      	str	r3, [sp, #116]	; 0x74
    e22e:	f89a 6001 	ldrb.w	r6, [sl, #1]
    e232:	2e00      	cmp	r6, #0
    e234:	f43f adc3 	beq.w	ddbe <_strtod_l+0x406>
    e238:	469a      	mov	sl, r3
    e23a:	e40f      	b.n	da5c <_strtod_l+0xa4>
    e23c:	2300      	movs	r3, #0
    e23e:	930a      	str	r3, [sp, #40]	; 0x28
    e240:	e7f2      	b.n	e228 <_strtod_l+0x870>
    e242:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e246:	2901      	cmp	r1, #1
    e248:	f000 811b 	beq.w	e482 <_strtod_l+0xaca>
    e24c:	4690      	mov	r8, r2
    e24e:	4ca3      	ldr	r4, [pc, #652]	; (e4dc <_strtod_l+0xb24>)
    e250:	2300      	movs	r3, #0
    e252:	4da3      	ldr	r5, [pc, #652]	; (e4e0 <_strtod_l+0xb28>)
    e254:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    e258:	2400      	movs	r4, #0
    e25a:	e545      	b.n	dce8 <_strtod_l+0x330>
    e25c:	f102 7854 	add.w	r8, r2, #55574528	; 0x3500000
    e260:	f8cd 8014 	str.w	r8, [sp, #20]
    e264:	e585      	b.n	dd72 <_strtod_l+0x3ba>
    e266:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    e26a:	9016      	str	r0, [sp, #88]	; 0x58
    e26c:	9317      	str	r3, [sp, #92]	; 0x5c
    e26e:	e560      	b.n	dd32 <_strtod_l+0x37a>
    e270:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
    e274:	f340 813e 	ble.w	e4f4 <_strtod_l+0xb3c>
    e278:	4b96      	ldr	r3, [pc, #600]	; (e4d4 <_strtod_l+0xb1c>)
    e27a:	2200      	movs	r2, #0
    e27c:	9305      	str	r3, [sp, #20]
    e27e:	2322      	movs	r3, #34	; 0x22
    e280:	9204      	str	r2, [sp, #16]
    e282:	f8cb 3000 	str.w	r3, [fp]
    e286:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e28a:	e6aa      	b.n	dfe2 <_strtod_l+0x62a>
    e28c:	4995      	ldr	r1, [pc, #596]	; (e4e4 <_strtod_l+0xb2c>)
    e28e:	a81d      	add	r0, sp, #116	; 0x74
    e290:	f01c fac2 	bl	2a818 <__match>
    e294:	2800      	cmp	r0, #0
    e296:	f43f ad92 	beq.w	ddbe <_strtod_l+0x406>
    e29a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e29c:	a81d      	add	r0, sp, #116	; 0x74
    e29e:	4992      	ldr	r1, [pc, #584]	; (e4e8 <_strtod_l+0xb30>)
    e2a0:	3b01      	subs	r3, #1
    e2a2:	931d      	str	r3, [sp, #116]	; 0x74
    e2a4:	f01c fab8 	bl	2a818 <__match>
    e2a8:	b910      	cbnz	r0, e2b0 <_strtod_l+0x8f8>
    e2aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e2ac:	3301      	adds	r3, #1
    e2ae:	931d      	str	r3, [sp, #116]	; 0x74
    e2b0:	2300      	movs	r3, #0
    e2b2:	4888      	ldr	r0, [pc, #544]	; (e4d4 <_strtod_l+0xb1c>)
    e2b4:	e9cd 3004 	strd	r3, r0, [sp, #16]
    e2b8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e2bc:	e691      	b.n	dfe2 <_strtod_l+0x62a>
    e2be:	3316      	adds	r3, #22
    e2c0:	f6ff ae30 	blt.w	df24 <_strtod_l+0x56c>
    e2c4:	9b08      	ldr	r3, [sp, #32]
    e2c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e2c8:	1a9a      	subs	r2, r3, r2
    e2ca:	4b88      	ldr	r3, [pc, #544]	; (e4ec <_strtod_l+0xb34>)
    e2cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    e2d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    e2d8:	f7fe feb6 	bl	d048 <__aeabi_ddiv>
    e2dc:	4680      	mov	r8, r0
    e2de:	4689      	mov	r9, r1
    e2e0:	e67f      	b.n	dfe2 <_strtod_l+0x62a>
    e2e2:	4620      	mov	r0, r4
    e2e4:	4629      	mov	r1, r5
    e2e6:	f7fe ffcd 	bl	d284 <__aeabi_d2lz>
    e2ea:	f7fe f937 	bl	c55c <__aeabi_l2d>
    e2ee:	460b      	mov	r3, r1
    e2f0:	4602      	mov	r2, r0
    e2f2:	4629      	mov	r1, r5
    e2f4:	4620      	mov	r0, r4
    e2f6:	f7fd ffa7 	bl	c248 <__aeabi_dsub>
    e2fa:	9c04      	ldr	r4, [sp, #16]
    e2fc:	9e10      	ldr	r6, [sp, #64]	; 0x40
    e2fe:	f3c8 0c13 	ubfx	ip, r8, #0, #20
    e302:	460d      	mov	r5, r1
    e304:	4326      	orrs	r6, r4
    e306:	4604      	mov	r4, r0
    e308:	ea56 030c 	orrs.w	r3, r6, ip
    e30c:	d15a      	bne.n	e3c4 <_strtod_l+0xa0c>
    e30e:	a36a      	add	r3, pc, #424	; (adr r3, e4b8 <_strtod_l+0xb00>)
    e310:	e9d3 2300 	ldrd	r2, r3, [r3]
    e314:	f7fe f9b0 	bl	c678 <__aeabi_dcmplt>
    e318:	2800      	cmp	r0, #0
    e31a:	f43f ad33 	beq.w	dd84 <_strtod_l+0x3cc>
    e31e:	4656      	mov	r6, sl
    e320:	981e      	ldr	r0, [sp, #120]	; 0x78
    e322:	46ca      	mov	sl, r9
    e324:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e328:	e6db      	b.n	e0e2 <_strtod_l+0x72a>
    e32a:	f04f 0800 	mov.w	r8, #0
    e32e:	e729      	b.n	e184 <_strtod_l+0x7cc>
    e330:	9908      	ldr	r1, [sp, #32]
    e332:	4642      	mov	r2, r8
    e334:	4650      	mov	r0, sl
    e336:	f018 fadf 	bl	268f8 <strncmp>
    e33a:	4686      	mov	lr, r0
    e33c:	2800      	cmp	r0, #0
    e33e:	f040 82ab 	bne.w	e898 <_strtod_l+0xee0>
    e342:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    e344:	eb02 0308 	add.w	r3, r2, r8
    e348:	931d      	str	r3, [sp, #116]	; 0x74
    e34a:	f812 6008 	ldrb.w	r6, [r2, r8]
    e34e:	2e30      	cmp	r6, #48	; 0x30
    e350:	f040 8157 	bne.w	e602 <_strtod_l+0xc4a>
    e354:	f1c3 0201 	rsb	r2, r3, #1
    e358:	1898      	adds	r0, r3, r2
    e35a:	3301      	adds	r3, #1
    e35c:	931d      	str	r3, [sp, #116]	; 0x74
    e35e:	781e      	ldrb	r6, [r3, #0]
    e360:	2e30      	cmp	r6, #48	; 0x30
    e362:	d0f9      	beq.n	e358 <_strtod_l+0x9a0>
    e364:	f1a6 0331 	sub.w	r3, r6, #49	; 0x31
    e368:	2b08      	cmp	r3, #8
    e36a:	d80f      	bhi.n	e38c <_strtod_l+0x9d4>
    e36c:	991d      	ldr	r1, [sp, #116]	; 0x74
    e36e:	f04f 0900 	mov.w	r9, #0
    e372:	1c43      	adds	r3, r0, #1
    e374:	f1a6 0830 	sub.w	r8, r6, #48	; 0x30
    e378:	468a      	mov	sl, r1
    e37a:	464d      	mov	r5, r9
    e37c:	2401      	movs	r4, #1
    e37e:	9308      	str	r3, [sp, #32]
    e380:	eb09 0989 	add.w	r9, r9, r9, lsl #2
    e384:	2000      	movs	r0, #0
    e386:	eb08 0949 	add.w	r9, r8, r9, lsl #1
    e38a:	e64f      	b.n	e02c <_strtod_l+0x674>
    e38c:	2300      	movs	r3, #0
    e38e:	f04f 0c01 	mov.w	ip, #1
    e392:	461c      	mov	r4, r3
    e394:	4699      	mov	r9, r3
    e396:	461d      	mov	r5, r3
    e398:	9308      	str	r3, [sp, #32]
    e39a:	e506      	b.n	ddaa <_strtod_l+0x3f2>
    e39c:	e9dd 1320 	ldrd	r1, r3, [sp, #128]	; 0x80
    e3a0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    e3a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    e3a6:	9104      	str	r1, [sp, #16]
    e3a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
    e3ac:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    e3b0:	9305      	str	r3, [sp, #20]
    e3b2:	0724      	lsls	r4, r4, #28
    e3b4:	d503      	bpl.n	e3be <_strtod_l+0xa06>
    e3b6:	9b05      	ldr	r3, [sp, #20]
    e3b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e3bc:	9305      	str	r3, [sp, #20]
    e3be:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e3c2:	e60e      	b.n	dfe2 <_strtod_l+0x62a>
    e3c4:	a33e      	add	r3, pc, #248	; (adr r3, e4c0 <_strtod_l+0xb08>)
    e3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3ca:	f7fe f955 	bl	c678 <__aeabi_dcmplt>
    e3ce:	2800      	cmp	r0, #0
    e3d0:	d1a5      	bne.n	e31e <_strtod_l+0x966>
    e3d2:	4620      	mov	r0, r4
    e3d4:	4629      	mov	r1, r5
    e3d6:	a33c      	add	r3, pc, #240	; (adr r3, e4c8 <_strtod_l+0xb10>)
    e3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3dc:	f7fe f96a 	bl	c6b4 <__aeabi_dcmpgt>
    e3e0:	2800      	cmp	r0, #0
    e3e2:	f43f accf 	beq.w	dd84 <_strtod_l+0x3cc>
    e3e6:	e79a      	b.n	e31e <_strtod_l+0x966>
    e3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e3ea:	aa1e      	add	r2, sp, #120	; 0x78
    e3ec:	9402      	str	r4, [sp, #8]
    e3ee:	a91d      	add	r1, sp, #116	; 0x74
    e3f0:	9301      	str	r3, [sp, #4]
    e3f2:	4658      	mov	r0, fp
    e3f4:	9200      	str	r2, [sp, #0]
    e3f6:	ab1f      	add	r3, sp, #124	; 0x7c
    e3f8:	4a3d      	ldr	r2, [pc, #244]	; (e4f0 <_strtod_l+0xb38>)
    e3fa:	f01b ff63 	bl	2a2c4 <__gethex>
    e3fe:	f010 0507 	ands.w	r5, r0, #7
    e402:	4604      	mov	r4, r0
    e404:	f43f ade9 	beq.w	dfda <_strtod_l+0x622>
    e408:	2d06      	cmp	r5, #6
    e40a:	f040 80c8 	bne.w	e59e <_strtod_l+0xbe6>
    e40e:	9a07      	ldr	r2, [sp, #28]
    e410:	f10a 0301 	add.w	r3, sl, #1
    e414:	2a00      	cmp	r2, #0
    e416:	f43f ace2 	beq.w	ddde <_strtod_l+0x426>
    e41a:	f04f 0800 	mov.w	r8, #0
    e41e:	f04f 0900 	mov.w	r9, #0
    e422:	6013      	str	r3, [r2, #0]
    e424:	e4d2      	b.n	ddcc <_strtod_l+0x414>
    e426:	9b08      	ldr	r3, [sp, #32]
    e428:	2801      	cmp	r0, #1
    e42a:	991d      	ldr	r1, [sp, #116]	; 0x74
    e42c:	f104 0601 	add.w	r6, r4, #1
    e430:	4403      	add	r3, r0
    e432:	9308      	str	r3, [sp, #32]
    e434:	f000 822d 	beq.w	e892 <_strtod_l+0xeda>
    e438:	4420      	add	r0, r4
    e43a:	f100 3cff 	add.w	ip, r0, #4294967295
    e43e:	e004      	b.n	e44a <_strtod_l+0xa92>
    e440:	ea4f 0946 	mov.w	r9, r6, lsl #1
    e444:	4563      	cmp	r3, ip
    e446:	461c      	mov	r4, r3
    e448:	d00b      	beq.n	e462 <_strtod_l+0xaaa>
    e44a:	2c08      	cmp	r4, #8
    e44c:	f104 0301 	add.w	r3, r4, #1
    e450:	eb09 0689 	add.w	r6, r9, r9, lsl #2
    e454:	ddf4      	ble.n	e440 <_strtod_l+0xa88>
    e456:	eb05 0485 	add.w	r4, r5, r5, lsl #2
    e45a:	2b10      	cmp	r3, #16
    e45c:	bfd8      	it	le
    e45e:	0065      	lslle	r5, r4, #1
    e460:	e7f0      	b.n	e444 <_strtod_l+0xa8c>
    e462:	4604      	mov	r4, r0
    e464:	2b08      	cmp	r3, #8
    e466:	dd8b      	ble.n	e380 <_strtod_l+0x9c8>
    e468:	2c10      	cmp	r4, #16
    e46a:	f300 8137 	bgt.w	e6dc <_strtod_l+0xd24>
    e46e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    e472:	2000      	movs	r0, #0
    e474:	eb02 0545 	add.w	r5, r2, r5, lsl #1
    e478:	e5d8      	b.n	e02c <_strtod_l+0x674>
    e47a:	46a0      	mov	r8, r4
    e47c:	4674      	mov	r4, lr
    e47e:	f7ff bb23 	b.w	dac8 <_strtod_l+0x110>
    e482:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e486:	4690      	mov	r8, r2
    e488:	2a00      	cmp	r2, #0
    e48a:	f47f aee0 	bne.w	e24e <_strtod_l+0x896>
    e48e:	4656      	mov	r6, sl
    e490:	46ca      	mov	sl, r9
    e492:	2322      	movs	r3, #34	; 0x22
    e494:	981e      	ldr	r0, [sp, #120]	; 0x78
    e496:	f04f 0800 	mov.w	r8, #0
    e49a:	f04f 0900 	mov.w	r9, #0
    e49e:	f8cb 3000 	str.w	r3, [fp]
    e4a2:	e61e      	b.n	e0e2 <_strtod_l+0x72a>
    e4a4:	f644 621f 	movw	r2, #19999	; 0x4e1f
    e4a8:	4293      	cmp	r3, r2
    e4aa:	bfa8      	it	ge
    e4ac:	4613      	movge	r3, r2
    e4ae:	930c      	str	r3, [sp, #48]	; 0x30
    e4b0:	e505      	b.n	debe <_strtod_l+0x506>
    e4b2:	bf00      	nop
    e4b4:	f3af 8000 	nop.w
    e4b8:	94a03595 	.word	0x94a03595
    e4bc:	3fcfffff 	.word	0x3fcfffff
    e4c0:	94a03595 	.word	0x94a03595
    e4c4:	3fdfffff 	.word	0x3fdfffff
    e4c8:	35afe535 	.word	0x35afe535
    e4cc:	3fe00000 	.word	0x3fe00000
    e4d0:	7c9fffff 	.word	0x7c9fffff
    e4d4:	7ff00000 	.word	0x7ff00000
    e4d8:	7fefffff 	.word	0x7fefffff
    e4dc:	bff00000 	.word	0xbff00000
    e4e0:	3ff00000 	.word	0x3ff00000
    e4e4:	0002f6dc 	.word	0x0002f6dc
    e4e8:	0002f6e0 	.word	0x0002f6e0
    e4ec:	0002edd8 	.word	0x0002edd8
    e4f0:	0002f6ec 	.word	0x0002f6ec
    e4f4:	2b10      	cmp	r3, #16
    e4f6:	ea4f 1523 	mov.w	r5, r3, asr #4
    e4fa:	f340 8159 	ble.w	e7b0 <_strtod_l+0xdf8>
    e4fe:	4bb0      	ldr	r3, [pc, #704]	; (e7c0 <_strtod_l+0xe08>)
    e500:	f04f 0c00 	mov.w	ip, #0
    e504:	461e      	mov	r6, r3
    e506:	930b      	str	r3, [sp, #44]	; 0x2c
    e508:	4667      	mov	r7, ip
    e50a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e50e:	f015 0f01 	tst.w	r5, #1
    e512:	4610      	mov	r0, r2
    e514:	4619      	mov	r1, r3
    e516:	ea4f 0565 	mov.w	r5, r5, asr #1
    e51a:	f107 0701 	add.w	r7, r7, #1
    e51e:	d007      	beq.n	e530 <_strtod_l+0xb78>
    e520:	e9d6 2300 	ldrd	r2, r3, [r6]
    e524:	f7fe fc66 	bl	cdf4 <__aeabi_dmul>
    e528:	f04f 0c01 	mov.w	ip, #1
    e52c:	4602      	mov	r2, r0
    e52e:	460b      	mov	r3, r1
    e530:	2d01      	cmp	r5, #1
    e532:	f106 0608 	add.w	r6, r6, #8
    e536:	d1ea      	bne.n	e50e <_strtod_l+0xb56>
    e538:	f1bc 0f00 	cmp.w	ip, #0
    e53c:	d001      	beq.n	e542 <_strtod_l+0xb8a>
    e53e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    e542:	9b05      	ldr	r3, [sp, #20]
    e544:	4d9f      	ldr	r5, [pc, #636]	; (e7c4 <_strtod_l+0xe0c>)
    e546:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    e54a:	4e9f      	ldr	r6, [pc, #636]	; (e7c8 <_strtod_l+0xe10>)
    e54c:	9305      	str	r3, [sp, #20]
    e54e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e550:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
    e554:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e558:	e9d7 0100 	ldrd	r0, r1, [r7]
    e55c:	f7fe fc4a 	bl	cdf4 <__aeabi_dmul>
    e560:	ea01 0305 	and.w	r3, r1, r5
    e564:	460a      	mov	r2, r1
    e566:	42b3      	cmp	r3, r6
    e568:	e9cd 0104 	strd	r0, r1, [sp, #16]
    e56c:	f200 80bf 	bhi.w	e6ee <_strtod_l+0xd36>
    e570:	4996      	ldr	r1, [pc, #600]	; (e7cc <_strtod_l+0xe14>)
    e572:	428b      	cmp	r3, r1
    e574:	f240 80b4 	bls.w	e6e0 <_strtod_l+0xd28>
    e578:	4b95      	ldr	r3, [pc, #596]	; (e7d0 <_strtod_l+0xe18>)
    e57a:	9305      	str	r3, [sp, #20]
    e57c:	2300      	movs	r3, #0
    e57e:	930b      	str	r3, [sp, #44]	; 0x2c
    e580:	f04f 33ff 	mov.w	r3, #4294967295
    e584:	9304      	str	r3, [sp, #16]
    e586:	f7ff baf5 	b.w	db74 <_strtod_l+0x1bc>
    e58a:	4b8e      	ldr	r3, [pc, #568]	; (e7c4 <_strtod_l+0xe0c>)
    e58c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e58e:	9305      	str	r3, [sp, #20]
    e590:	2322      	movs	r3, #34	; 0x22
    e592:	9204      	str	r2, [sp, #16]
    e594:	f8cb 3000 	str.w	r3, [fp]
    e598:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e59c:	e521      	b.n	dfe2 <_strtod_l+0x62a>
    e59e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    e5a0:	b13a      	cbz	r2, e5b2 <_strtod_l+0xbfa>
    e5a2:	2135      	movs	r1, #53	; 0x35
    e5a4:	a820      	add	r0, sp, #128	; 0x80
    e5a6:	f01c ffcd 	bl	2b544 <__copybits>
    e5aa:	4658      	mov	r0, fp
    e5ac:	991e      	ldr	r1, [sp, #120]	; 0x78
    e5ae:	f01c fb99 	bl	2ace4 <_Bfree>
    e5b2:	3d01      	subs	r5, #1
    e5b4:	2d05      	cmp	r5, #5
    e5b6:	f63f aefc 	bhi.w	e3b2 <_strtod_l+0x9fa>
    e5ba:	a301      	add	r3, pc, #4	; (adr r3, e5c0 <_strtod_l+0xc08>)
    e5bc:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    e5c0:	0000e39d 	.word	0x0000e39d
    e5c4:	0000e5f9 	.word	0x0000e5f9
    e5c8:	0000e5ef 	.word	0x0000e5ef
    e5cc:	0000e5e1 	.word	0x0000e5e1
    e5d0:	0000e39d 	.word	0x0000e39d
    e5d4:	0000e5d9 	.word	0x0000e5d9
    e5d8:	2300      	movs	r3, #0
    e5da:	e9cd 3304 	strd	r3, r3, [sp, #16]
    e5de:	e6e8      	b.n	e3b2 <_strtod_l+0x9fa>
    e5e0:	f04f 33ff 	mov.w	r3, #4294967295
    e5e4:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    e5e8:	e9cd 3504 	strd	r3, r5, [sp, #16]
    e5ec:	e6e1      	b.n	e3b2 <_strtod_l+0x9fa>
    e5ee:	2300      	movs	r3, #0
    e5f0:	4e74      	ldr	r6, [pc, #464]	; (e7c4 <_strtod_l+0xe0c>)
    e5f2:	e9cd 3604 	strd	r3, r6, [sp, #16]
    e5f6:	e6dc      	b.n	e3b2 <_strtod_l+0x9fa>
    e5f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
    e5fa:	9304      	str	r3, [sp, #16]
    e5fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
    e5fe:	9305      	str	r3, [sp, #20]
    e600:	e6d7      	b.n	e3b2 <_strtod_l+0x9fa>
    e602:	4670      	mov	r0, lr
    e604:	e6ae      	b.n	e364 <_strtod_l+0x9ac>
    e606:	4973      	ldr	r1, [pc, #460]	; (e7d4 <_strtod_l+0xe1c>)
    e608:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    e60c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e610:	e9d1 0100 	ldrd	r0, r1, [r1]
    e614:	f7fe fbee 	bl	cdf4 <__aeabi_dmul>
    e618:	4680      	mov	r8, r0
    e61a:	4689      	mov	r9, r1
    e61c:	e4e1      	b.n	dfe2 <_strtod_l+0x62a>
    e61e:	ed9f 7b66 	vldr	d7, [pc, #408]	; e7b8 <_strtod_l+0xe00>
    e622:	2400      	movs	r4, #0
    e624:	4d6c      	ldr	r5, [pc, #432]	; (e7d8 <_strtod_l+0xe20>)
    e626:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
    e62a:	e5a4      	b.n	e176 <_strtod_l+0x7be>
    e62c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e62e:	4656      	mov	r6, sl
    e630:	46ca      	mov	sl, r9
    e632:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    e636:	2b00      	cmp	r3, #0
    e638:	f000 80ab 	beq.w	e792 <_strtod_l+0xdda>
    e63c:	4b67      	ldr	r3, [pc, #412]	; (e7dc <_strtod_l+0xe24>)
    e63e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    e642:	f3c5 0113 	ubfx	r1, r5, #0, #20
    e646:	462a      	mov	r2, r5
    e648:	4299      	cmp	r1, r3
    e64a:	f000 80cd 	beq.w	e7e8 <_strtod_l+0xe30>
    e64e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e650:	2b00      	cmp	r3, #0
    e652:	f000 80a7 	beq.w	e7a4 <_strtod_l+0xdec>
    e656:	9a05      	ldr	r2, [sp, #20]
    e658:	4213      	tst	r3, r2
    e65a:	d010      	beq.n	e67e <_strtod_l+0xcc6>
    e65c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e65e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e660:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e664:	2b00      	cmp	r3, #0
    e666:	f000 80e2 	beq.w	e82e <_strtod_l+0xe76>
    e66a:	f018 fbcd 	bl	26e08 <sulp>
    e66e:	4602      	mov	r2, r0
    e670:	460b      	mov	r3, r1
    e672:	4640      	mov	r0, r8
    e674:	4649      	mov	r1, r9
    e676:	f7fd fde9 	bl	c24c <__adddf3>
    e67a:	4680      	mov	r8, r0
    e67c:	4689      	mov	r9, r1
    e67e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e680:	b19b      	cbz	r3, e6aa <_strtod_l+0xcf2>
    e682:	2300      	movs	r3, #0
    e684:	4a56      	ldr	r2, [pc, #344]	; (e7e0 <_strtod_l+0xe28>)
    e686:	4640      	mov	r0, r8
    e688:	4649      	mov	r1, r9
    e68a:	e9cd 3218 	strd	r3, r2, [sp, #96]	; 0x60
    e68e:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    e692:	f7fe fbaf 	bl	cdf4 <__aeabi_dmul>
    e696:	4603      	mov	r3, r0
    e698:	4680      	mov	r8, r0
    e69a:	4689      	mov	r9, r1
    e69c:	430b      	orrs	r3, r1
    e69e:	d104      	bne.n	e6aa <_strtod_l+0xcf2>
    e6a0:	2322      	movs	r3, #34	; 0x22
    e6a2:	981e      	ldr	r0, [sp, #120]	; 0x78
    e6a4:	f8cb 3000 	str.w	r3, [fp]
    e6a8:	e51b      	b.n	e0e2 <_strtod_l+0x72a>
    e6aa:	981e      	ldr	r0, [sp, #120]	; 0x78
    e6ac:	e519      	b.n	e0e2 <_strtod_l+0x72a>
    e6ae:	f1c8 080f 	rsb	r8, r8, #15
    e6b2:	4c48      	ldr	r4, [pc, #288]	; (e7d4 <_strtod_l+0xe1c>)
    e6b4:	eb04 01c8 	add.w	r1, r4, r8, lsl #3
    e6b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e6bc:	e9d1 0100 	ldrd	r0, r1, [r1]
    e6c0:	f7fe fb98 	bl	cdf4 <__aeabi_dmul>
    e6c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e6c6:	eba3 0808 	sub.w	r8, r3, r8
    e6ca:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
    e6ce:	e9d4 2300 	ldrd	r2, r3, [r4]
    e6d2:	f7fe fb8f 	bl	cdf4 <__aeabi_dmul>
    e6d6:	4680      	mov	r8, r0
    e6d8:	4689      	mov	r9, r1
    e6da:	e482      	b.n	dfe2 <_strtod_l+0x62a>
    e6dc:	2000      	movs	r0, #0
    e6de:	e4a5      	b.n	e02c <_strtod_l+0x674>
    e6e0:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    e6e4:	9305      	str	r3, [sp, #20]
    e6e6:	2300      	movs	r3, #0
    e6e8:	930b      	str	r3, [sp, #44]	; 0x2c
    e6ea:	f7ff ba43 	b.w	db74 <_strtod_l+0x1bc>
    e6ee:	2322      	movs	r3, #34	; 0x22
    e6f0:	2200      	movs	r2, #0
    e6f2:	9505      	str	r5, [sp, #20]
    e6f4:	9204      	str	r2, [sp, #16]
    e6f6:	f8cb 3000 	str.w	r3, [fp]
    e6fa:	e660      	b.n	e3be <_strtod_l+0xa06>
    e6fc:	a81d      	add	r0, sp, #116	; 0x74
    e6fe:	aa20      	add	r2, sp, #128	; 0x80
    e700:	4938      	ldr	r1, [pc, #224]	; (e7e4 <_strtod_l+0xe2c>)
    e702:	f01c f8a3 	bl	2a84c <__hexnan>
    e706:	2805      	cmp	r0, #5
    e708:	f47f ac00 	bne.w	df0c <_strtod_l+0x554>
    e70c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    e70e:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    e712:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    e716:	9305      	str	r3, [sp, #20]
    e718:	9b20      	ldr	r3, [sp, #128]	; 0x80
    e71a:	9304      	str	r3, [sp, #16]
    e71c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e720:	e45f      	b.n	dfe2 <_strtod_l+0x62a>
    e722:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e724:	4656      	mov	r6, sl
    e726:	46ca      	mov	sl, r9
    e728:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e72c:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    e730:	4303      	orrs	r3, r0
    e732:	d1a4      	bne.n	e67e <_strtod_l+0xcc6>
    e734:	f3c1 0313 	ubfx	r3, r1, #0, #20
    e738:	460c      	mov	r4, r1
    e73a:	2b00      	cmp	r3, #0
    e73c:	d19f      	bne.n	e67e <_strtod_l+0xcc6>
    e73e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    e742:	0d1b      	lsrs	r3, r3, #20
    e744:	051b      	lsls	r3, r3, #20
    e746:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    e74a:	d998      	bls.n	e67e <_strtod_l+0xcc6>
    e74c:	6973      	ldr	r3, [r6, #20]
    e74e:	b913      	cbnz	r3, e756 <_strtod_l+0xd9e>
    e750:	6933      	ldr	r3, [r6, #16]
    e752:	2b01      	cmp	r3, #1
    e754:	dd93      	ble.n	e67e <_strtod_l+0xcc6>
    e756:	4631      	mov	r1, r6
    e758:	2201      	movs	r2, #1
    e75a:	4658      	mov	r0, fp
    e75c:	f01c fcac 	bl	2b0b8 <__lshift>
    e760:	4639      	mov	r1, r7
    e762:	4606      	mov	r6, r0
    e764:	f01c fd10 	bl	2b188 <__mcmp>
    e768:	2800      	cmp	r0, #0
    e76a:	dd88      	ble.n	e67e <_strtod_l+0xcc6>
    e76c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e76e:	2b00      	cmp	r3, #0
    e770:	f040 8084 	bne.w	e87c <_strtod_l+0xec4>
    e774:	4b13      	ldr	r3, [pc, #76]	; (e7c4 <_strtod_l+0xe0c>)
    e776:	4023      	ands	r3, r4
    e778:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    e77c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    e780:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    e784:	9305      	str	r3, [sp, #20]
    e786:	f04f 33ff 	mov.w	r3, #4294967295
    e78a:	9304      	str	r3, [sp, #16]
    e78c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e790:	e775      	b.n	e67e <_strtod_l+0xcc6>
    e792:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e796:	f3c2 0313 	ubfx	r3, r2, #0, #20
    e79a:	4614      	mov	r4, r2
    e79c:	430b      	orrs	r3, r1
    e79e:	f47f af56 	bne.w	e64e <_strtod_l+0xc96>
    e7a2:	e7e3      	b.n	e76c <_strtod_l+0xdb4>
    e7a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e7a6:	9a04      	ldr	r2, [sp, #16]
    e7a8:	4213      	tst	r3, r2
    e7aa:	f43f af68 	beq.w	e67e <_strtod_l+0xcc6>
    e7ae:	e755      	b.n	e65c <_strtod_l+0xca4>
    e7b0:	4b03      	ldr	r3, [pc, #12]	; (e7c0 <_strtod_l+0xe08>)
    e7b2:	2700      	movs	r7, #0
    e7b4:	930b      	str	r3, [sp, #44]	; 0x2c
    e7b6:	e6c4      	b.n	e542 <_strtod_l+0xb8a>
    e7b8:	00000000 	.word	0x00000000
    e7bc:	bfe00000 	.word	0xbfe00000
    e7c0:	0002edb0 	.word	0x0002edb0
    e7c4:	7ff00000 	.word	0x7ff00000
    e7c8:	7ca00000 	.word	0x7ca00000
    e7cc:	7c900000 	.word	0x7c900000
    e7d0:	7fefffff 	.word	0x7fefffff
    e7d4:	0002edd8 	.word	0x0002edd8
    e7d8:	3fe00000 	.word	0x3fe00000
    e7dc:	000fffff 	.word	0x000fffff
    e7e0:	39500000 	.word	0x39500000
    e7e4:	0002f700 	.word	0x0002f700
    e7e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e7ea:	9904      	ldr	r1, [sp, #16]
    e7ec:	2b00      	cmp	r3, #0
    e7ee:	d039      	beq.n	e864 <_strtod_l+0xeac>
    e7f0:	4b2f      	ldr	r3, [pc, #188]	; (e8b0 <_strtod_l+0xef8>)
    e7f2:	402b      	ands	r3, r5
    e7f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    e7f8:	d834      	bhi.n	e864 <_strtod_l+0xeac>
    e7fa:	0d1b      	lsrs	r3, r3, #20
    e7fc:	f04f 30ff 	mov.w	r0, #4294967295
    e800:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    e804:	fa00 f303 	lsl.w	r3, r0, r3
    e808:	4299      	cmp	r1, r3
    e80a:	f47f af20 	bne.w	e64e <_strtod_l+0xc96>
    e80e:	4b29      	ldr	r3, [pc, #164]	; (e8b4 <_strtod_l+0xefc>)
    e810:	429a      	cmp	r2, r3
    e812:	d102      	bne.n	e81a <_strtod_l+0xe62>
    e814:	3101      	adds	r1, #1
    e816:	f43f ac5a 	beq.w	e0ce <_strtod_l+0x716>
    e81a:	4b25      	ldr	r3, [pc, #148]	; (e8b0 <_strtod_l+0xef8>)
    e81c:	4013      	ands	r3, r2
    e81e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    e822:	9305      	str	r3, [sp, #20]
    e824:	2300      	movs	r3, #0
    e826:	9304      	str	r3, [sp, #16]
    e828:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e82c:	e727      	b.n	e67e <_strtod_l+0xcc6>
    e82e:	f018 faeb 	bl	26e08 <sulp>
    e832:	4602      	mov	r2, r0
    e834:	460b      	mov	r3, r1
    e836:	4640      	mov	r0, r8
    e838:	4649      	mov	r1, r9
    e83a:	f7fd fd05 	bl	c248 <__aeabi_dsub>
    e83e:	2200      	movs	r2, #0
    e840:	2300      	movs	r3, #0
    e842:	4680      	mov	r8, r0
    e844:	4689      	mov	r9, r1
    e846:	f7fd ff0d 	bl	c664 <__aeabi_dcmpeq>
    e84a:	2800      	cmp	r0, #0
    e84c:	f43f af17 	beq.w	e67e <_strtod_l+0xcc6>
    e850:	e61f      	b.n	e492 <_strtod_l+0xada>
    e852:	f04f 32ff 	mov.w	r2, #4294967295
    e856:	fa02 f303 	lsl.w	r3, r2, r3
    e85a:	9a04      	ldr	r2, [sp, #16]
    e85c:	401a      	ands	r2, r3
    e85e:	9204      	str	r2, [sp, #16]
    e860:	f7ff bbaf 	b.w	dfc2 <_strtod_l+0x60a>
    e864:	f04f 33ff 	mov.w	r3, #4294967295
    e868:	e7ce      	b.n	e808 <_strtod_l+0xe50>
    e86a:	3b20      	subs	r3, #32
    e86c:	f04f 31ff 	mov.w	r1, #4294967295
    e870:	fa01 f303 	lsl.w	r3, r1, r3
    e874:	4013      	ands	r3, r2
    e876:	9305      	str	r3, [sp, #20]
    e878:	f7ff bba3 	b.w	dfc2 <_strtod_l+0x60a>
    e87c:	4b0c      	ldr	r3, [pc, #48]	; (e8b0 <_strtod_l+0xef8>)
    e87e:	4023      	ands	r3, r4
    e880:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    e884:	f73f af78 	bgt.w	e778 <_strtod_l+0xdc0>
    e888:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    e88c:	f73f aef9 	bgt.w	e682 <_strtod_l+0xcca>
    e890:	e5ff      	b.n	e492 <_strtod_l+0xada>
    e892:	4623      	mov	r3, r4
    e894:	4634      	mov	r4, r6
    e896:	e5e5      	b.n	e464 <_strtod_l+0xaac>
    e898:	f04f 0e00 	mov.w	lr, #0
    e89c:	4675      	mov	r5, lr
    e89e:	46f1      	mov	r9, lr
    e8a0:	4670      	mov	r0, lr
    e8a2:	4674      	mov	r4, lr
    e8a4:	46f4      	mov	ip, lr
    e8a6:	f8cd e020 	str.w	lr, [sp, #32]
    e8aa:	f7ff ba7e 	b.w	ddaa <_strtod_l+0x3f2>
    e8ae:	bf00      	nop
    e8b0:	7ff00000 	.word	0x7ff00000
    e8b4:	7fefffff 	.word	0x7fefffff

0000e8b8 <_svfprintf_r>:
    e8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8bc:	ed2d 8b08 	vpush	{d8-d11}
    e8c0:	b0d1      	sub	sp, #324	; 0x144
    e8c2:	468b      	mov	fp, r1
    e8c4:	4617      	mov	r7, r2
    e8c6:	4681      	mov	r9, r0
    e8c8:	9309      	str	r3, [sp, #36]	; 0x24
    e8ca:	f01c f8a5 	bl	2aa18 <_localeconv_r>
    e8ce:	6803      	ldr	r3, [r0, #0]
    e8d0:	4618      	mov	r0, r3
    e8d2:	9311      	str	r3, [sp, #68]	; 0x44
    e8d4:	f017 ffe2 	bl	2689c <strlen>
    e8d8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    e8dc:	9010      	str	r0, [sp, #64]	; 0x40
    e8de:	061c      	lsls	r4, r3, #24
    e8e0:	d504      	bpl.n	e8ec <_svfprintf_r+0x34>
    e8e2:	f8db 3010 	ldr.w	r3, [fp, #16]
    e8e6:	2b00      	cmp	r3, #0
    e8e8:	f000 87f2 	beq.w	f8d0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe70>
    e8ec:	2300      	movs	r3, #0
    e8ee:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    e8f2:	ee09 9a10 	vmov	s18, r9
    e8f6:	ee09 ba90 	vmov	s19, fp
    e8fa:	930c      	str	r3, [sp, #48]	; 0x30
    e8fc:	9326      	str	r3, [sp, #152]	; 0x98
    e8fe:	9312      	str	r3, [sp, #72]	; 0x48
    e900:	9314      	str	r3, [sp, #80]	; 0x50
    e902:	9317      	str	r3, [sp, #92]	; 0x5c
    e904:	9305      	str	r3, [sp, #20]
    e906:	9325      	str	r3, [sp, #148]	; 0x94
    e908:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
    e90c:	ed9f 7b9c 	vldr	d7, [pc, #624]	; eb80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x120>
    e910:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    e914:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    e918:	783b      	ldrb	r3, [r7, #0]
    e91a:	463c      	mov	r4, r7
    e91c:	b1e3      	cbz	r3, e958 <_svfprintf_r+0xa0>
    e91e:	2b25      	cmp	r3, #37	; 0x25
    e920:	d01a      	beq.n	e958 <_svfprintf_r+0xa0>
    e922:	4625      	mov	r5, r4
    e924:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    e928:	b10b      	cbz	r3, e92e <_svfprintf_r+0x76>
    e92a:	2b25      	cmp	r3, #37	; 0x25
    e92c:	d1f9      	bne.n	e922 <_svfprintf_r+0x6a>
    e92e:	1be6      	subs	r6, r4, r7
    e930:	d012      	beq.n	e958 <_svfprintf_r+0xa0>
    e932:	f8c8 7000 	str.w	r7, [r8]
    e936:	f8c8 6004 	str.w	r6, [r8, #4]
    e93a:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e93e:	3301      	adds	r3, #1
    e940:	4432      	add	r2, r6
    e942:	2b07      	cmp	r3, #7
    e944:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e948:	f300 810b 	bgt.w	eb62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x102>
    e94c:	f108 0808 	add.w	r8, r8, #8
    e950:	9b05      	ldr	r3, [sp, #20]
    e952:	4433      	add	r3, r6
    e954:	9305      	str	r3, [sp, #20]
    e956:	786b      	ldrb	r3, [r5, #1]
    e958:	2b00      	cmp	r3, #0
    e95a:	f001 819e 	beq.w	fc9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x123a>
    e95e:	2300      	movs	r3, #0
    e960:	1c67      	adds	r7, r4, #1
    e962:	f894 9001 	ldrb.w	r9, [r4, #1]
    e966:	f04f 3aff 	mov.w	sl, #4294967295
    e96a:	242b      	movs	r4, #43	; 0x2b
    e96c:	9306      	str	r3, [sp, #24]
    e96e:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    e972:	9303      	str	r3, [sp, #12]
    e974:	3701      	adds	r7, #1
    e976:	f1a9 0320 	sub.w	r3, r9, #32
    e97a:	2b5a      	cmp	r3, #90	; 0x5a
    e97c:	f200 8104 	bhi.w	eb88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x128>
    e980:	e8df f013 	tbh	[pc, r3, lsl #1]
    e984:	0102006a 	.word	0x0102006a
    e988:	02820102 	.word	0x02820102
    e98c:	01020102 	.word	0x01020102
    e990:	025e0102 	.word	0x025e0102
    e994:	01020102 	.word	0x01020102
    e998:	02380226 	.word	0x02380226
    e99c:	02310102 	.word	0x02310102
    e9a0:	01020244 	.word	0x01020244
    e9a4:	005b023d 	.word	0x005b023d
    e9a8:	005b005b 	.word	0x005b005b
    e9ac:	005b005b 	.word	0x005b005b
    e9b0:	005b005b 	.word	0x005b005b
    e9b4:	005b005b 	.word	0x005b005b
    e9b8:	01020102 	.word	0x01020102
    e9bc:	01020102 	.word	0x01020102
    e9c0:	01020102 	.word	0x01020102
    e9c4:	01890102 	.word	0x01890102
    e9c8:	01f10102 	.word	0x01f10102
    e9cc:	01890079 	.word	0x01890079
    e9d0:	01890189 	.word	0x01890189
    e9d4:	01020102 	.word	0x01020102
    e9d8:	01020102 	.word	0x01020102
    e9dc:	01020299 	.word	0x01020299
    e9e0:	00a70102 	.word	0x00a70102
    e9e4:	01020102 	.word	0x01020102
    e9e8:	02010102 	.word	0x02010102
    e9ec:	02890102 	.word	0x02890102
    e9f0:	01020102 	.word	0x01020102
    e9f4:	01020784 	.word	0x01020784
    e9f8:	01020102 	.word	0x01020102
    e9fc:	01020102 	.word	0x01020102
    ea00:	01020102 	.word	0x01020102
    ea04:	01890102 	.word	0x01890102
    ea08:	01f10102 	.word	0x01f10102
    ea0c:	0189007d 	.word	0x0189007d
    ea10:	01890189 	.word	0x01890189
    ea14:	007d02d4 	.word	0x007d02d4
    ea18:	01020072 	.word	0x01020072
    ea1c:	010202c9 	.word	0x010202c9
    ea20:	00ab02b2 	.word	0x00ab02b2
    ea24:	007202a0 	.word	0x007202a0
    ea28:	02010102 	.word	0x02010102
    ea2c:	0780006f 	.word	0x0780006f
    ea30:	01020102 	.word	0x01020102
    ea34:	0102075f 	.word	0x0102075f
    ea38:	006f      	.short	0x006f
    ea3a:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    ea3e:	2200      	movs	r2, #0
    ea40:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ea44:	f817 9b01 	ldrb.w	r9, [r7], #1
    ea48:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    ea4c:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    ea50:	2b09      	cmp	r3, #9
    ea52:	d9f5      	bls.n	ea40 <_svfprintf_r+0x188>
    ea54:	9206      	str	r2, [sp, #24]
    ea56:	e78e      	b.n	e976 <_svfprintf_r+0xbe>
    ea58:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
    ea5c:	2b00      	cmp	r3, #0
    ea5e:	f000 862b 	beq.w	f6b8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc58>
    ea62:	f897 9000 	ldrb.w	r9, [r7]
    ea66:	e785      	b.n	e974 <_svfprintf_r+0xbc>
    ea68:	9b03      	ldr	r3, [sp, #12]
    ea6a:	f897 9000 	ldrb.w	r9, [r7]
    ea6e:	f043 0320 	orr.w	r3, r3, #32
    ea72:	9303      	str	r3, [sp, #12]
    ea74:	e77e      	b.n	e974 <_svfprintf_r+0xbc>
    ea76:	9b03      	ldr	r3, [sp, #12]
    ea78:	f043 0310 	orr.w	r3, r3, #16
    ea7c:	9303      	str	r3, [sp, #12]
    ea7e:	9b03      	ldr	r3, [sp, #12]
    ea80:	0698      	lsls	r0, r3, #26
    ea82:	f140 815f 	bpl.w	ed44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2e4>
    ea86:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ea88:	3307      	adds	r3, #7
    ea8a:	f023 0307 	bic.w	r3, r3, #7
    ea8e:	4619      	mov	r1, r3
    ea90:	e8f1 2302 	ldrd	r2, r3, [r1], #8
    ea94:	4614      	mov	r4, r2
    ea96:	461d      	mov	r5, r3
    ea98:	9109      	str	r1, [sp, #36]	; 0x24
    ea9a:	2a00      	cmp	r2, #0
    ea9c:	f173 0300 	sbcs.w	r3, r3, #0
    eaa0:	f2c0 85c9 	blt.w	f636 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbd6>
    eaa4:	f1ba 3fff 	cmp.w	sl, #4294967295
    eaa8:	f000 8496 	beq.w	f3d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x978>
    eaac:	9b03      	ldr	r3, [sp, #12]
    eaae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    eab2:	9303      	str	r3, [sp, #12]
    eab4:	f1ba 0f00 	cmp.w	sl, #0
    eab8:	f040 848e 	bne.w	f3d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x978>
    eabc:	ea54 0305 	orrs.w	r3, r4, r5
    eac0:	bf14      	ite	ne
    eac2:	2301      	movne	r3, #1
    eac4:	2300      	moveq	r3, #0
    eac6:	f040 8487 	bne.w	f3d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x978>
    eaca:	469a      	mov	sl, r3
    eacc:	ae50      	add	r6, sp, #320	; 0x140
    eace:	9307      	str	r3, [sp, #28]
    ead0:	e036      	b.n	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    ead2:	9b03      	ldr	r3, [sp, #12]
    ead4:	f043 0310 	orr.w	r3, r3, #16
    ead8:	9303      	str	r3, [sp, #12]
    eada:	9b03      	ldr	r3, [sp, #12]
    eadc:	069d      	lsls	r5, r3, #26
    eade:	f140 8122 	bpl.w	ed26 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c6>
    eae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eae4:	3307      	adds	r3, #7
    eae6:	f023 0307 	bic.w	r3, r3, #7
    eaea:	e8f3 4502 	ldrd	r4, r5, [r3], #8
    eaee:	9309      	str	r3, [sp, #36]	; 0x24
    eaf0:	9b03      	ldr	r3, [sp, #12]
    eaf2:	f423 6b80 	bic.w	fp, r3, #1024	; 0x400
    eaf6:	2300      	movs	r3, #0
    eaf8:	2200      	movs	r2, #0
    eafa:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
    eafe:	f1ba 3fff 	cmp.w	sl, #4294967295
    eb02:	f000 8319 	beq.w	f138 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6d8>
    eb06:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
    eb0a:	9203      	str	r2, [sp, #12]
    eb0c:	ea54 0205 	orrs.w	r2, r4, r5
    eb10:	f040 8310 	bne.w	f134 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6d4>
    eb14:	f1ba 0200 	subs.w	r2, sl, #0
    eb18:	bf18      	it	ne
    eb1a:	2201      	movne	r2, #1
    eb1c:	f1ba 0f00 	cmp.w	sl, #0
    eb20:	f040 8308 	bne.w	f134 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6d4>
    eb24:	2b00      	cmp	r3, #0
    eb26:	f040 8452 	bne.w	f3ce <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x96e>
    eb2a:	f01b 0201 	ands.w	r2, fp, #1
    eb2e:	9207      	str	r2, [sp, #28]
    eb30:	f000 8504 	beq.w	f53c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xadc>
    eb34:	2230      	movs	r2, #48	; 0x30
    eb36:	469a      	mov	sl, r3
    eb38:	f20d 163f 	addw	r6, sp, #319	; 0x13f
    eb3c:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    eb40:	9907      	ldr	r1, [sp, #28]
    eb42:	2300      	movs	r3, #0
    eb44:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    eb48:	4551      	cmp	r1, sl
    eb4a:	9308      	str	r3, [sp, #32]
    eb4c:	930d      	str	r3, [sp, #52]	; 0x34
    eb4e:	bfb8      	it	lt
    eb50:	4651      	movlt	r1, sl
    eb52:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    eb56:	9104      	str	r1, [sp, #16]
    eb58:	b352      	cbz	r2, ebb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x150>
    eb5a:	9b04      	ldr	r3, [sp, #16]
    eb5c:	3301      	adds	r3, #1
    eb5e:	9304      	str	r3, [sp, #16]
    eb60:	e026      	b.n	ebb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x150>
    eb62:	aa24      	add	r2, sp, #144	; 0x90
    eb64:	ee19 1a90 	vmov	r1, s19
    eb68:	ee19 0a10 	vmov	r0, s18
    eb6c:	f01c ffd8 	bl	2bb20 <__ssprint_r>
    eb70:	2800      	cmp	r0, #0
    eb72:	f041 83eb 	bne.w	1034c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x34c>
    eb76:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    eb7a:	e6e9      	b.n	e950 <_svfprintf_r+0x98>
    eb7c:	f3af 8000 	nop.w
	...
    eb88:	f1b9 0f00 	cmp.w	r9, #0
    eb8c:	f001 8085 	beq.w	fc9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x123a>
    eb90:	2201      	movs	r2, #1
    eb92:	2300      	movs	r3, #0
    eb94:	ae37      	add	r6, sp, #220	; 0xdc
    eb96:	f88d 90dc 	strb.w	r9, [sp, #220]	; 0xdc
    eb9a:	4611      	mov	r1, r2
    eb9c:	9204      	str	r2, [sp, #16]
    eb9e:	461a      	mov	r2, r3
    eba0:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    eba4:	9107      	str	r1, [sp, #28]
    eba6:	4692      	mov	sl, r2
    eba8:	9208      	str	r2, [sp, #32]
    ebaa:	920d      	str	r2, [sp, #52]	; 0x34
    ebac:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
    ebb0:	9b03      	ldr	r3, [sp, #12]
    ebb2:	f013 0302 	ands.w	r3, r3, #2
    ebb6:	d002      	beq.n	ebbe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x15e>
    ebb8:	9904      	ldr	r1, [sp, #16]
    ebba:	3102      	adds	r1, #2
    ebbc:	9104      	str	r1, [sp, #16]
    ebbe:	9903      	ldr	r1, [sp, #12]
    ebc0:	f011 0b84 	ands.w	fp, r1, #132	; 0x84
    ebc4:	d105      	bne.n	ebd2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x172>
    ebc6:	9906      	ldr	r1, [sp, #24]
    ebc8:	9804      	ldr	r0, [sp, #16]
    ebca:	1a0d      	subs	r5, r1, r0
    ebcc:	2d00      	cmp	r5, #0
    ebce:	f300 8356 	bgt.w	f27e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x81e>
    ebd2:	9c26      	ldr	r4, [sp, #152]	; 0x98
    ebd4:	b182      	cbz	r2, ebf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x198>
    ebd6:	9a25      	ldr	r2, [sp, #148]	; 0x94
    ebd8:	2101      	movs	r1, #1
    ebda:	3401      	adds	r4, #1
    ebdc:	f10d 0073 	add.w	r0, sp, #115	; 0x73
    ebe0:	440a      	add	r2, r1
    ebe2:	f8c8 1004 	str.w	r1, [r8, #4]
    ebe6:	9426      	str	r4, [sp, #152]	; 0x98
    ebe8:	2a07      	cmp	r2, #7
    ebea:	f8c8 0000 	str.w	r0, [r8]
    ebee:	9225      	str	r2, [sp, #148]	; 0x94
    ebf0:	f300 838f 	bgt.w	f312 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8b2>
    ebf4:	f108 0808 	add.w	r8, r8, #8
    ebf8:	b17b      	cbz	r3, ec1a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ba>
    ebfa:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ebfc:	3402      	adds	r4, #2
    ebfe:	a91d      	add	r1, sp, #116	; 0x74
    ec00:	2202      	movs	r2, #2
    ec02:	3301      	adds	r3, #1
    ec04:	9426      	str	r4, [sp, #152]	; 0x98
    ec06:	f8c8 1000 	str.w	r1, [r8]
    ec0a:	2b07      	cmp	r3, #7
    ec0c:	9325      	str	r3, [sp, #148]	; 0x94
    ec0e:	f8c8 2004 	str.w	r2, [r8, #4]
    ec12:	f300 838e 	bgt.w	f332 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8d2>
    ec16:	f108 0808 	add.w	r8, r8, #8
    ec1a:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
    ec1e:	f000 81f9 	beq.w	f014 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5b4>
    ec22:	9b07      	ldr	r3, [sp, #28]
    ec24:	ebaa 0a03 	sub.w	sl, sl, r3
    ec28:	f1ba 0f00 	cmp.w	sl, #0
    ec2c:	f300 8241 	bgt.w	f0b2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x652>
    ec30:	9b03      	ldr	r3, [sp, #12]
    ec32:	05d8      	lsls	r0, r3, #23
    ec34:	f100 818e 	bmi.w	ef54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4f4>
    ec38:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ec3a:	9a07      	ldr	r2, [sp, #28]
    ec3c:	3301      	adds	r3, #1
    ec3e:	f8c8 6000 	str.w	r6, [r8]
    ec42:	4414      	add	r4, r2
    ec44:	f8c8 2004 	str.w	r2, [r8, #4]
    ec48:	2b07      	cmp	r3, #7
    ec4a:	9325      	str	r3, [sp, #148]	; 0x94
    ec4c:	9426      	str	r4, [sp, #152]	; 0x98
    ec4e:	f300 8309 	bgt.w	f264 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x804>
    ec52:	f108 0808 	add.w	r8, r8, #8
    ec56:	9b03      	ldr	r3, [sp, #12]
    ec58:	0759      	lsls	r1, r3, #29
    ec5a:	d505      	bpl.n	ec68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x208>
    ec5c:	9b06      	ldr	r3, [sp, #24]
    ec5e:	9a04      	ldr	r2, [sp, #16]
    ec60:	1a9d      	subs	r5, r3, r2
    ec62:	2d00      	cmp	r5, #0
    ec64:	f300 8373 	bgt.w	f34e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8ee>
    ec68:	9904      	ldr	r1, [sp, #16]
    ec6a:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    ec6e:	428a      	cmp	r2, r1
    ec70:	bfac      	ite	ge
    ec72:	189b      	addge	r3, r3, r2
    ec74:	185b      	addlt	r3, r3, r1
    ec76:	9305      	str	r3, [sp, #20]
    ec78:	2c00      	cmp	r4, #0
    ec7a:	f040 8297 	bne.w	f1ac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x74c>
    ec7e:	2300      	movs	r3, #0
    ec80:	9325      	str	r3, [sp, #148]	; 0x94
    ec82:	9b08      	ldr	r3, [sp, #32]
    ec84:	b123      	cbz	r3, ec90 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x230>
    ec86:	9908      	ldr	r1, [sp, #32]
    ec88:	ee19 0a10 	vmov	r0, s18
    ec8c:	f01b f826 	bl	29cdc <_free_r>
    ec90:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    ec94:	e640      	b.n	e918 <_svfprintf_r+0x60>
    ec96:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ec98:	f04f 32ff 	mov.w	r2, #4294967295
    ec9c:	3307      	adds	r3, #7
    ec9e:	f023 0307 	bic.w	r3, r3, #7
    eca2:	ecb3 7b02 	vldmia	r3!, {d7}
    eca6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    ecaa:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
    ecae:	9309      	str	r3, [sp, #36]	; 0x24
    ecb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
    ecb4:	ee0a 4a10 	vmov	s20, r4
    ecb8:	ee0a 3a90 	vmov	s21, r3
    ecbc:	4ba1      	ldr	r3, [pc, #644]	; (ef44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e4>)
    ecbe:	eeb0 8a4a 	vmov.f32	s16, s20
    ecc2:	eef0 8a6a 	vmov.f32	s17, s21
    ecc6:	ec51 0b18 	vmov	r0, r1, d8
    ecca:	f7fe faa5 	bl	d218 <__aeabi_dcmpun>
    ecce:	2800      	cmp	r0, #0
    ecd0:	f040 8509 	bne.w	f6e6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc86>
    ecd4:	f04f 32ff 	mov.w	r2, #4294967295
    ecd8:	4b9a      	ldr	r3, [pc, #616]	; (ef44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e4>)
    ecda:	ec51 0b18 	vmov	r0, r1, d8
    ecde:	f7fd fcd5 	bl	c68c <__aeabi_dcmple>
    ece2:	2800      	cmp	r0, #0
    ece4:	f040 84ff 	bne.w	f6e6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc86>
    ece8:	2200      	movs	r2, #0
    ecea:	2300      	movs	r3, #0
    ecec:	4620      	mov	r0, r4
    ecee:	4629      	mov	r1, r5
    ecf0:	f7fd fcc2 	bl	c678 <__aeabi_dcmplt>
    ecf4:	2800      	cmp	r0, #0
    ecf6:	f041 80de 	bne.w	feb6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1456>
    ecfa:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    ecfe:	2103      	movs	r1, #3
    ed00:	4e91      	ldr	r6, [pc, #580]	; (ef48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e8>)
    ed02:	4b92      	ldr	r3, [pc, #584]	; (ef4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4ec>)
    ed04:	9104      	str	r1, [sp, #16]
    ed06:	9c03      	ldr	r4, [sp, #12]
    ed08:	2000      	movs	r0, #0
    ed0a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    ed0e:	bfc8      	it	gt
    ed10:	461e      	movgt	r6, r3
    ed12:	9107      	str	r1, [sp, #28]
    ed14:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    ed18:	4682      	mov	sl, r0
    ed1a:	9008      	str	r0, [sp, #32]
    ed1c:	9403      	str	r4, [sp, #12]
    ed1e:	900d      	str	r0, [sp, #52]	; 0x34
    ed20:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
    ed24:	e718      	b.n	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    ed26:	9b03      	ldr	r3, [sp, #12]
    ed28:	06dc      	lsls	r4, r3, #27
    ed2a:	f100 84d5 	bmi.w	f6d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc78>
    ed2e:	9b03      	ldr	r3, [sp, #12]
    ed30:	0658      	lsls	r0, r3, #25
    ed32:	f140 87ef 	bpl.w	fd14 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12b4>
    ed36:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed38:	2500      	movs	r5, #0
    ed3a:	f853 4b04 	ldr.w	r4, [r3], #4
    ed3e:	b2a4      	uxth	r4, r4
    ed40:	9309      	str	r3, [sp, #36]	; 0x24
    ed42:	e6d5      	b.n	eaf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x90>
    ed44:	9b03      	ldr	r3, [sp, #12]
    ed46:	06d9      	lsls	r1, r3, #27
    ed48:	f100 84bd 	bmi.w	f6c6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc66>
    ed4c:	9b03      	ldr	r3, [sp, #12]
    ed4e:	065a      	lsls	r2, r3, #25
    ed50:	f140 87d2 	bpl.w	fcf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1298>
    ed54:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed56:	f853 4b04 	ldr.w	r4, [r3], #4
    ed5a:	b224      	sxth	r4, r4
    ed5c:	9309      	str	r3, [sp, #36]	; 0x24
    ed5e:	17e5      	asrs	r5, r4, #31
    ed60:	4622      	mov	r2, r4
    ed62:	462b      	mov	r3, r5
    ed64:	e699      	b.n	ea9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a>
    ed66:	2201      	movs	r2, #1
    ed68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed6a:	2100      	movs	r1, #0
    ed6c:	ae37      	add	r6, sp, #220	; 0xdc
    ed6e:	4614      	mov	r4, r2
    ed70:	f853 0b04 	ldr.w	r0, [r3], #4
    ed74:	9204      	str	r2, [sp, #16]
    ed76:	460a      	mov	r2, r1
    ed78:	f88d 1073 	strb.w	r1, [sp, #115]	; 0x73
    ed7c:	9407      	str	r4, [sp, #28]
    ed7e:	f88d 00dc 	strb.w	r0, [sp, #220]	; 0xdc
    ed82:	9309      	str	r3, [sp, #36]	; 0x24
    ed84:	e70f      	b.n	eba6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x146>
    ed86:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ed88:	2500      	movs	r5, #0
    ed8a:	f854 6b04 	ldr.w	r6, [r4], #4
    ed8e:	f88d 5073 	strb.w	r5, [sp, #115]	; 0x73
    ed92:	2e00      	cmp	r6, #0
    ed94:	f000 8791 	beq.w	fcba <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x125a>
    ed98:	f1ba 3fff 	cmp.w	sl, #4294967295
    ed9c:	f000 85a8 	beq.w	f8f0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe90>
    eda0:	4652      	mov	r2, sl
    eda2:	4629      	mov	r1, r5
    eda4:	4630      	mov	r0, r6
    eda6:	f017 f8fd 	bl	25fa4 <memchr>
    edaa:	9008      	str	r0, [sp, #32]
    edac:	2800      	cmp	r0, #0
    edae:	f001 81eb 	beq.w	10188 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x188>
    edb2:	9b08      	ldr	r3, [sp, #32]
    edb4:	46aa      	mov	sl, r5
    edb6:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    edba:	1b9b      	subs	r3, r3, r6
    edbc:	9409      	str	r4, [sp, #36]	; 0x24
    edbe:	9508      	str	r5, [sp, #32]
    edc0:	9307      	str	r3, [sp, #28]
    edc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    edc6:	950d      	str	r5, [sp, #52]	; 0x34
    edc8:	9304      	str	r3, [sp, #16]
    edca:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
    edce:	e6c3      	b.n	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    edd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    edd2:	f853 2b04 	ldr.w	r2, [r3], #4
    edd6:	2a00      	cmp	r2, #0
    edd8:	9206      	str	r2, [sp, #24]
    edda:	f280 845c 	bge.w	f696 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc36>
    edde:	9a06      	ldr	r2, [sp, #24]
    ede0:	9309      	str	r3, [sp, #36]	; 0x24
    ede2:	4252      	negs	r2, r2
    ede4:	9206      	str	r2, [sp, #24]
    ede6:	9b03      	ldr	r3, [sp, #12]
    ede8:	f897 9000 	ldrb.w	r9, [r7]
    edec:	f043 0304 	orr.w	r3, r3, #4
    edf0:	9303      	str	r3, [sp, #12]
    edf2:	e5bf      	b.n	e974 <_svfprintf_r+0xbc>
    edf4:	f897 9000 	ldrb.w	r9, [r7]
    edf8:	f88d 4073 	strb.w	r4, [sp, #115]	; 0x73
    edfc:	e5ba      	b.n	e974 <_svfprintf_r+0xbc>
    edfe:	9b03      	ldr	r3, [sp, #12]
    ee00:	f897 9000 	ldrb.w	r9, [r7]
    ee04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ee08:	9303      	str	r3, [sp, #12]
    ee0a:	e5b3      	b.n	e974 <_svfprintf_r+0xbc>
    ee0c:	463a      	mov	r2, r7
    ee0e:	f812 9b01 	ldrb.w	r9, [r2], #1
    ee12:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    ee16:	f001 82d3 	beq.w	103c0 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3c0>
    ee1a:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    ee1e:	4617      	mov	r7, r2
    ee20:	f04f 0a00 	mov.w	sl, #0
    ee24:	2b09      	cmp	r3, #9
    ee26:	f63f ada6 	bhi.w	e976 <_svfprintf_r+0xbe>
    ee2a:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    ee2e:	f817 9b01 	ldrb.w	r9, [r7], #1
    ee32:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
    ee36:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    ee3a:	2b09      	cmp	r3, #9
    ee3c:	d9f5      	bls.n	ee2a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3ca>
    ee3e:	e59a      	b.n	e976 <_svfprintf_r+0xbe>
    ee40:	ee19 0a10 	vmov	r0, s18
    ee44:	f01b fde8 	bl	2aa18 <_localeconv_r>
    ee48:	6843      	ldr	r3, [r0, #4]
    ee4a:	4618      	mov	r0, r3
    ee4c:	9316      	str	r3, [sp, #88]	; 0x58
    ee4e:	f017 fd25 	bl	2689c <strlen>
    ee52:	4603      	mov	r3, r0
    ee54:	ee19 0a10 	vmov	r0, s18
    ee58:	461d      	mov	r5, r3
    ee5a:	9315      	str	r3, [sp, #84]	; 0x54
    ee5c:	f01b fddc 	bl	2aa18 <_localeconv_r>
    ee60:	6882      	ldr	r2, [r0, #8]
    ee62:	9217      	str	r2, [sp, #92]	; 0x5c
    ee64:	2d00      	cmp	r5, #0
    ee66:	f43f adfc 	beq.w	ea62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
    ee6a:	2a00      	cmp	r2, #0
    ee6c:	f43f adf9 	beq.w	ea62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
    ee70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ee72:	781b      	ldrb	r3, [r3, #0]
    ee74:	2b00      	cmp	r3, #0
    ee76:	f43f adf4 	beq.w	ea62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
    ee7a:	9b03      	ldr	r3, [sp, #12]
    ee7c:	f897 9000 	ldrb.w	r9, [r7]
    ee80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    ee84:	9303      	str	r3, [sp, #12]
    ee86:	e575      	b.n	e974 <_svfprintf_r+0xbc>
    ee88:	9b03      	ldr	r3, [sp, #12]
    ee8a:	f897 9000 	ldrb.w	r9, [r7]
    ee8e:	f043 0301 	orr.w	r3, r3, #1
    ee92:	9303      	str	r3, [sp, #12]
    ee94:	e56e      	b.n	e974 <_svfprintf_r+0xbc>
    ee96:	9b03      	ldr	r3, [sp, #12]
    ee98:	f043 0b10 	orr.w	fp, r3, #16
    ee9c:	f01b 0f20 	tst.w	fp, #32
    eea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    eea2:	f000 83b2 	beq.w	f60a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbaa>
    eea6:	3207      	adds	r2, #7
    eea8:	2301      	movs	r3, #1
    eeaa:	f022 0207 	bic.w	r2, r2, #7
    eeae:	e8f2 4502 	ldrd	r4, r5, [r2], #8
    eeb2:	9209      	str	r2, [sp, #36]	; 0x24
    eeb4:	e620      	b.n	eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    eeb6:	9b03      	ldr	r3, [sp, #12]
    eeb8:	f897 9000 	ldrb.w	r9, [r7]
    eebc:	f043 0308 	orr.w	r3, r3, #8
    eec0:	9303      	str	r3, [sp, #12]
    eec2:	e557      	b.n	e974 <_svfprintf_r+0xbc>
    eec4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    eec6:	f647 0130 	movw	r1, #30768	; 0x7830
    eeca:	9b03      	ldr	r3, [sp, #12]
    eecc:	f04f 0978 	mov.w	r9, #120	; 0x78
    eed0:	f852 4b04 	ldr.w	r4, [r2], #4
    eed4:	2500      	movs	r5, #0
    eed6:	f043 0b02 	orr.w	fp, r3, #2
    eeda:	4b1d      	ldr	r3, [pc, #116]	; (ef50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4f0>)
    eedc:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
    eee0:	9312      	str	r3, [sp, #72]	; 0x48
    eee2:	2302      	movs	r3, #2
    eee4:	9209      	str	r2, [sp, #36]	; 0x24
    eee6:	e607      	b.n	eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    eee8:	9b03      	ldr	r3, [sp, #12]
    eeea:	0699      	lsls	r1, r3, #26
    eeec:	f100 83d8 	bmi.w	f6a0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc40>
    eef0:	9b03      	ldr	r3, [sp, #12]
    eef2:	06da      	lsls	r2, r3, #27
    eef4:	f100 86c9 	bmi.w	fc8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x122a>
    eef8:	9b03      	ldr	r3, [sp, #12]
    eefa:	065b      	lsls	r3, r3, #25
    eefc:	f101 8009 	bmi.w	ff12 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14b2>
    ef00:	9b03      	ldr	r3, [sp, #12]
    ef02:	059e      	lsls	r6, r3, #22
    ef04:	f140 86c1 	bpl.w	fc8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x122a>
    ef08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ef0a:	9905      	ldr	r1, [sp, #20]
    ef0c:	f853 2b04 	ldr.w	r2, [r3], #4
    ef10:	7011      	strb	r1, [r2, #0]
    ef12:	9309      	str	r3, [sp, #36]	; 0x24
    ef14:	e500      	b.n	e918 <_svfprintf_r+0x60>
    ef16:	f897 9000 	ldrb.w	r9, [r7]
    ef1a:	9b03      	ldr	r3, [sp, #12]
    ef1c:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    ef20:	f000 84b7 	beq.w	f892 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe32>
    ef24:	f043 0310 	orr.w	r3, r3, #16
    ef28:	9303      	str	r3, [sp, #12]
    ef2a:	e523      	b.n	e974 <_svfprintf_r+0xbc>
    ef2c:	f897 9000 	ldrb.w	r9, [r7]
    ef30:	9b03      	ldr	r3, [sp, #12]
    ef32:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    ef36:	f000 84b4 	beq.w	f8a2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe42>
    ef3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ef3e:	9303      	str	r3, [sp, #12]
    ef40:	e518      	b.n	e974 <_svfprintf_r+0xbc>
    ef42:	bf00      	nop
    ef44:	7fefffff 	.word	0x7fefffff
    ef48:	0002f714 	.word	0x0002f714
    ef4c:	0002f718 	.word	0x0002f718
    ef50:	0002f724 	.word	0x0002f724
    ef54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    ef58:	f340 8137 	ble.w	f1ca <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x76a>
    ef5c:	2200      	movs	r2, #0
    ef5e:	2300      	movs	r3, #0
    ef60:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    ef64:	f7fd fb7e 	bl	c664 <__aeabi_dcmpeq>
    ef68:	2800      	cmp	r0, #0
    ef6a:	f000 8247 	beq.w	f3fc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x99c>
    ef6e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ef70:	2201      	movs	r2, #1
    ef72:	3401      	adds	r4, #1
    ef74:	49ca      	ldr	r1, [pc, #808]	; (f2a0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x840>)
    ef76:	4413      	add	r3, r2
    ef78:	f8c8 2004 	str.w	r2, [r8, #4]
    ef7c:	9426      	str	r4, [sp, #152]	; 0x98
    ef7e:	2b07      	cmp	r3, #7
    ef80:	f8c8 1000 	str.w	r1, [r8]
    ef84:	9325      	str	r3, [sp, #148]	; 0x94
    ef86:	f300 85fe 	bgt.w	fb86 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1126>
    ef8a:	f108 0808 	add.w	r8, r8, #8
    ef8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    ef90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ef92:	4293      	cmp	r3, r2
    ef94:	f280 837a 	bge.w	f68c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc2c>
    ef98:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ef9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ef9c:	3301      	adds	r3, #1
    ef9e:	9911      	ldr	r1, [sp, #68]	; 0x44
    efa0:	4414      	add	r4, r2
    efa2:	f8c8 2004 	str.w	r2, [r8, #4]
    efa6:	2b07      	cmp	r3, #7
    efa8:	f8c8 1000 	str.w	r1, [r8]
    efac:	9426      	str	r4, [sp, #152]	; 0x98
    efae:	9325      	str	r3, [sp, #148]	; 0x94
    efb0:	f300 847f 	bgt.w	f8b2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe52>
    efb4:	f108 0808 	add.w	r8, r8, #8
    efb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    efba:	1e5e      	subs	r6, r3, #1
    efbc:	2e00      	cmp	r6, #0
    efbe:	f77f ae4a 	ble.w	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
    efc2:	2e10      	cmp	r6, #16
    efc4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    efc6:	f340 85ef 	ble.w	fba8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1148>
    efca:	f04f 0910 	mov.w	r9, #16
    efce:	4db5      	ldr	r5, [pc, #724]	; (f2a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x844>)
    efd0:	ee19 aa10 	vmov	sl, s18
    efd4:	ee19 ba90 	vmov	fp, s19
    efd8:	e003      	b.n	efe2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x582>
    efda:	3e10      	subs	r6, #16
    efdc:	2e10      	cmp	r6, #16
    efde:	f340 85e4 	ble.w	fbaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x114a>
    efe2:	3301      	adds	r3, #1
    efe4:	3410      	adds	r4, #16
    efe6:	f8c8 5000 	str.w	r5, [r8]
    efea:	f108 0808 	add.w	r8, r8, #8
    efee:	2b07      	cmp	r3, #7
    eff0:	f848 9c04 	str.w	r9, [r8, #-4]
    eff4:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    eff8:	ddef      	ble.n	efda <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x57a>
    effa:	aa24      	add	r2, sp, #144	; 0x90
    effc:	4659      	mov	r1, fp
    effe:	4650      	mov	r0, sl
    f000:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f004:	f01c fd8c 	bl	2bb20 <__ssprint_r>
    f008:	2800      	cmp	r0, #0
    f00a:	f041 804e 	bne.w	100aa <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xaa>
    f00e:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
    f012:	e7e2      	b.n	efda <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x57a>
    f014:	9b06      	ldr	r3, [sp, #24]
    f016:	9a04      	ldr	r2, [sp, #16]
    f018:	eba3 0b02 	sub.w	fp, r3, r2
    f01c:	f1bb 0f00 	cmp.w	fp, #0
    f020:	f77f adff 	ble.w	ec22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c2>
    f024:	f1bb 0f10 	cmp.w	fp, #16
    f028:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f02a:	f341 8118 	ble.w	1025e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x25e>
    f02e:	4620      	mov	r0, r4
    f030:	9613      	str	r6, [sp, #76]	; 0x4c
    f032:	2310      	movs	r3, #16
    f034:	4d9b      	ldr	r5, [pc, #620]	; (f2a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x844>)
    f036:	ee19 4a10 	vmov	r4, s18
    f03a:	ee19 6a90 	vmov	r6, s19
    f03e:	e004      	b.n	f04a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5ea>
    f040:	f1ab 0b10 	sub.w	fp, fp, #16
    f044:	f1bb 0f10 	cmp.w	fp, #16
    f048:	dd1d      	ble.n	f086 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x626>
    f04a:	3201      	adds	r2, #1
    f04c:	3010      	adds	r0, #16
    f04e:	f8c8 5000 	str.w	r5, [r8]
    f052:	f108 0808 	add.w	r8, r8, #8
    f056:	2a07      	cmp	r2, #7
    f058:	f848 3c04 	str.w	r3, [r8, #-4]
    f05c:	e9cd 2025 	strd	r2, r0, [sp, #148]	; 0x94
    f060:	ddee      	ble.n	f040 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5e0>
    f062:	aa24      	add	r2, sp, #144	; 0x90
    f064:	4631      	mov	r1, r6
    f066:	4620      	mov	r0, r4
    f068:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f06c:	f01c fd58 	bl	2bb20 <__ssprint_r>
    f070:	2800      	cmp	r0, #0
    f072:	f040 824c 	bne.w	f50e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xaae>
    f076:	f1ab 0b10 	sub.w	fp, fp, #16
    f07a:	2310      	movs	r3, #16
    f07c:	f1bb 0f10 	cmp.w	fp, #16
    f080:	e9dd 2025 	ldrd	r2, r0, [sp, #148]	; 0x94
    f084:	dce1      	bgt.n	f04a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5ea>
    f086:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    f088:	4604      	mov	r4, r0
    f08a:	3201      	adds	r2, #1
    f08c:	445c      	add	r4, fp
    f08e:	f8c8 5000 	str.w	r5, [r8]
    f092:	2a07      	cmp	r2, #7
    f094:	f8c8 b004 	str.w	fp, [r8, #4]
    f098:	e9cd 2425 	strd	r2, r4, [sp, #148]	; 0x94
    f09c:	f300 85d8 	bgt.w	fc50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11f0>
    f0a0:	9b07      	ldr	r3, [sp, #28]
    f0a2:	f108 0808 	add.w	r8, r8, #8
    f0a6:	ebaa 0a03 	sub.w	sl, sl, r3
    f0aa:	f1ba 0f00 	cmp.w	sl, #0
    f0ae:	f77f adbf 	ble.w	ec30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d0>
    f0b2:	f1ba 0f10 	cmp.w	sl, #16
    f0b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f0b8:	f340 8643 	ble.w	fd42 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12e2>
    f0bc:	4622      	mov	r2, r4
    f0be:	9613      	str	r6, [sp, #76]	; 0x4c
    f0c0:	f04f 0b10 	mov.w	fp, #16
    f0c4:	4d77      	ldr	r5, [pc, #476]	; (f2a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x844>)
    f0c6:	ee19 4a10 	vmov	r4, s18
    f0ca:	ee19 6a90 	vmov	r6, s19
    f0ce:	e004      	b.n	f0da <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x67a>
    f0d0:	f1aa 0a10 	sub.w	sl, sl, #16
    f0d4:	f1ba 0f10 	cmp.w	sl, #16
    f0d8:	dd1c      	ble.n	f114 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6b4>
    f0da:	3301      	adds	r3, #1
    f0dc:	3210      	adds	r2, #16
    f0de:	f8c8 5000 	str.w	r5, [r8]
    f0e2:	f108 0808 	add.w	r8, r8, #8
    f0e6:	2b07      	cmp	r3, #7
    f0e8:	f848 bc04 	str.w	fp, [r8, #-4]
    f0ec:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f0f0:	ddee      	ble.n	f0d0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x670>
    f0f2:	aa24      	add	r2, sp, #144	; 0x90
    f0f4:	4631      	mov	r1, r6
    f0f6:	4620      	mov	r0, r4
    f0f8:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f0fc:	f01c fd10 	bl	2bb20 <__ssprint_r>
    f100:	2800      	cmp	r0, #0
    f102:	f040 8204 	bne.w	f50e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xaae>
    f106:	f1aa 0a10 	sub.w	sl, sl, #16
    f10a:	f1ba 0f10 	cmp.w	sl, #16
    f10e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f112:	dce2      	bgt.n	f0da <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x67a>
    f114:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    f116:	4614      	mov	r4, r2
    f118:	3301      	adds	r3, #1
    f11a:	4454      	add	r4, sl
    f11c:	f8c8 5000 	str.w	r5, [r8]
    f120:	2b07      	cmp	r3, #7
    f122:	f8c8 a004 	str.w	sl, [r8, #4]
    f126:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f12a:	f300 825f 	bgt.w	f5ec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb8c>
    f12e:	f108 0808 	add.w	r8, r8, #8
    f132:	e57d      	b.n	ec30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d0>
    f134:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f138:	2b01      	cmp	r3, #1
    f13a:	f000 814f 	beq.w	f3dc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x97c>
    f13e:	2b02      	cmp	r3, #2
    f140:	ae50      	add	r6, sp, #320	; 0x140
    f142:	d114      	bne.n	f16e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x70e>
    f144:	9812      	ldr	r0, [sp, #72]	; 0x48
    f146:	0923      	lsrs	r3, r4, #4
    f148:	f004 010f 	and.w	r1, r4, #15
    f14c:	092a      	lsrs	r2, r5, #4
    f14e:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    f152:	4615      	mov	r5, r2
    f154:	461c      	mov	r4, r3
    f156:	5c43      	ldrb	r3, [r0, r1]
    f158:	f806 3d01 	strb.w	r3, [r6, #-1]!
    f15c:	ea54 0305 	orrs.w	r3, r4, r5
    f160:	d1f1      	bne.n	f146 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6e6>
    f162:	ab50      	add	r3, sp, #320	; 0x140
    f164:	f8cd b00c 	str.w	fp, [sp, #12]
    f168:	1b9b      	subs	r3, r3, r6
    f16a:	9307      	str	r3, [sp, #28]
    f16c:	e4e8      	b.n	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    f16e:	08e2      	lsrs	r2, r4, #3
    f170:	f004 0307 	and.w	r3, r4, #7
    f174:	08e9      	lsrs	r1, r5, #3
    f176:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    f17a:	3330      	adds	r3, #48	; 0x30
    f17c:	460d      	mov	r5, r1
    f17e:	4614      	mov	r4, r2
    f180:	4632      	mov	r2, r6
    f182:	f806 3d01 	strb.w	r3, [r6, #-1]!
    f186:	ea54 0105 	orrs.w	r1, r4, r5
    f18a:	d1f0      	bne.n	f16e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x70e>
    f18c:	2b30      	cmp	r3, #48	; 0x30
    f18e:	d0e8      	beq.n	f162 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x702>
    f190:	f01b 0f01 	tst.w	fp, #1
    f194:	d0e5      	beq.n	f162 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x702>
    f196:	2330      	movs	r3, #48	; 0x30
    f198:	3a02      	subs	r2, #2
    f19a:	f8cd b00c 	str.w	fp, [sp, #12]
    f19e:	f806 3c01 	strb.w	r3, [r6, #-1]
    f1a2:	ab50      	add	r3, sp, #320	; 0x140
    f1a4:	4616      	mov	r6, r2
    f1a6:	1a9b      	subs	r3, r3, r2
    f1a8:	9307      	str	r3, [sp, #28]
    f1aa:	e4c9      	b.n	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    f1ac:	aa24      	add	r2, sp, #144	; 0x90
    f1ae:	ee19 1a90 	vmov	r1, s19
    f1b2:	ee19 0a10 	vmov	r0, s18
    f1b6:	f01c fcb3 	bl	2bb20 <__ssprint_r>
    f1ba:	2800      	cmp	r0, #0
    f1bc:	f43f ad5f 	beq.w	ec7e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x21e>
    f1c0:	ee19 9a10 	vmov	r9, s18
    f1c4:	ee19 ba90 	vmov	fp, s19
    f1c8:	e1a3      	b.n	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
    f1ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f1cc:	2b01      	cmp	r3, #1
    f1ce:	f340 81b9 	ble.w	f544 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xae4>
    f1d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f1d4:	2201      	movs	r2, #1
    f1d6:	3401      	adds	r4, #1
    f1d8:	f8c8 6000 	str.w	r6, [r8]
    f1dc:	4413      	add	r3, r2
    f1de:	f8c8 2004 	str.w	r2, [r8, #4]
    f1e2:	9426      	str	r4, [sp, #152]	; 0x98
    f1e4:	2b07      	cmp	r3, #7
    f1e6:	9325      	str	r3, [sp, #148]	; 0x94
    f1e8:	f300 8241 	bgt.w	f66e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc0e>
    f1ec:	f108 0808 	add.w	r8, r8, #8
    f1f0:	f103 0901 	add.w	r9, r3, #1
    f1f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f1f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f1f8:	4414      	add	r4, r2
    f1fa:	f1b9 0f07 	cmp.w	r9, #7
    f1fe:	f8c8 3000 	str.w	r3, [r8]
    f202:	f8c8 2004 	str.w	r2, [r8, #4]
    f206:	e9cd 9425 	strd	r9, r4, [sp, #148]	; 0x94
    f20a:	f300 8220 	bgt.w	f64e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbee>
    f20e:	f108 0808 	add.w	r8, r8, #8
    f212:	2300      	movs	r3, #0
    f214:	2200      	movs	r2, #0
    f216:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    f21a:	f7fd fa23 	bl	c664 <__aeabi_dcmpeq>
    f21e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f220:	2800      	cmp	r0, #0
    f222:	f040 81b3 	bne.w	f58c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb2c>
    f226:	3b01      	subs	r3, #1
    f228:	f109 0901 	add.w	r9, r9, #1
    f22c:	3601      	adds	r6, #1
    f22e:	441c      	add	r4, r3
    f230:	f1b9 0f07 	cmp.w	r9, #7
    f234:	f8c8 6000 	str.w	r6, [r8]
    f238:	f8c8 3004 	str.w	r3, [r8, #4]
    f23c:	e9cd 9425 	strd	r9, r4, [sp, #148]	; 0x94
    f240:	f300 8194 	bgt.w	f56c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb0c>
    f244:	f108 0808 	add.w	r8, r8, #8
    f248:	9914      	ldr	r1, [sp, #80]	; 0x50
    f24a:	f109 0301 	add.w	r3, r9, #1
    f24e:	aa20      	add	r2, sp, #128	; 0x80
    f250:	440c      	add	r4, r1
    f252:	2b07      	cmp	r3, #7
    f254:	f8c8 1004 	str.w	r1, [r8, #4]
    f258:	f8c8 2000 	str.w	r2, [r8]
    f25c:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f260:	f77f acf7 	ble.w	ec52 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f2>
    f264:	aa24      	add	r2, sp, #144	; 0x90
    f266:	ee19 1a90 	vmov	r1, s19
    f26a:	ee19 0a10 	vmov	r0, s18
    f26e:	f01c fc57 	bl	2bb20 <__ssprint_r>
    f272:	2800      	cmp	r0, #0
    f274:	d1a4      	bne.n	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f276:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f278:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f27c:	e4eb      	b.n	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
    f27e:	2d10      	cmp	r5, #16
    f280:	9926      	ldr	r1, [sp, #152]	; 0x98
    f282:	f340 87a0 	ble.w	101c6 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1c6>
    f286:	9618      	str	r6, [sp, #96]	; 0x60
    f288:	2410      	movs	r4, #16
    f28a:	462e      	mov	r6, r5
    f28c:	9719      	str	r7, [sp, #100]	; 0x64
    f28e:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f290:	4608      	mov	r0, r1
    f292:	ee19 5a10 	vmov	r5, s18
    f296:	ee19 7a90 	vmov	r7, s19
    f29a:	9313      	str	r3, [sp, #76]	; 0x4c
    f29c:	e007      	b.n	f2ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84e>
    f29e:	bf00      	nop
    f2a0:	0002f754 	.word	0x0002f754
    f2a4:	0002f768 	.word	0x0002f768
    f2a8:	3e10      	subs	r6, #16
    f2aa:	2e10      	cmp	r6, #16
    f2ac:	dd1b      	ble.n	f2e6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x886>
    f2ae:	3201      	adds	r2, #1
    f2b0:	3010      	adds	r0, #16
    f2b2:	4bbe      	ldr	r3, [pc, #760]	; (f5ac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4c>)
    f2b4:	f108 0808 	add.w	r8, r8, #8
    f2b8:	2a07      	cmp	r2, #7
    f2ba:	f848 4c04 	str.w	r4, [r8, #-4]
    f2be:	f848 3c08 	str.w	r3, [r8, #-8]
    f2c2:	e9cd 2025 	strd	r2, r0, [sp, #148]	; 0x94
    f2c6:	ddef      	ble.n	f2a8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x848>
    f2c8:	aa24      	add	r2, sp, #144	; 0x90
    f2ca:	4639      	mov	r1, r7
    f2cc:	4628      	mov	r0, r5
    f2ce:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f2d2:	f01c fc25 	bl	2bb20 <__ssprint_r>
    f2d6:	2800      	cmp	r0, #0
    f2d8:	f040 8447 	bne.w	fb6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x110a>
    f2dc:	3e10      	subs	r6, #16
    f2de:	2e10      	cmp	r6, #16
    f2e0:	e9dd 2025 	ldrd	r2, r0, [sp, #148]	; 0x94
    f2e4:	dce3      	bgt.n	f2ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84e>
    f2e6:	4635      	mov	r5, r6
    f2e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f2ea:	9e18      	ldr	r6, [sp, #96]	; 0x60
    f2ec:	4601      	mov	r1, r0
    f2ee:	9f19      	ldr	r7, [sp, #100]	; 0x64
    f2f0:	3201      	adds	r2, #1
    f2f2:	186c      	adds	r4, r5, r1
    f2f4:	49ad      	ldr	r1, [pc, #692]	; (f5ac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4c>)
    f2f6:	2a07      	cmp	r2, #7
    f2f8:	f8c8 5004 	str.w	r5, [r8, #4]
    f2fc:	f8c8 1000 	str.w	r1, [r8]
    f300:	e9cd 2425 	strd	r2, r4, [sp, #148]	; 0x94
    f304:	f300 841e 	bgt.w	fb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10e4>
    f308:	f108 0808 	add.w	r8, r8, #8
    f30c:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    f310:	e460      	b.n	ebd4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x174>
    f312:	aa24      	add	r2, sp, #144	; 0x90
    f314:	ee19 1a90 	vmov	r1, s19
    f318:	ee19 0a10 	vmov	r0, s18
    f31c:	9313      	str	r3, [sp, #76]	; 0x4c
    f31e:	f01c fbff 	bl	2bb20 <__ssprint_r>
    f322:	2800      	cmp	r0, #0
    f324:	f47f af4c 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f328:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f32a:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f32e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f330:	e462      	b.n	ebf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x198>
    f332:	aa24      	add	r2, sp, #144	; 0x90
    f334:	ee19 1a90 	vmov	r1, s19
    f338:	ee19 0a10 	vmov	r0, s18
    f33c:	f01c fbf0 	bl	2bb20 <__ssprint_r>
    f340:	2800      	cmp	r0, #0
    f342:	f47f af3d 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f346:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f348:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f34c:	e465      	b.n	ec1a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ba>
    f34e:	2d10      	cmp	r5, #16
    f350:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f352:	dd24      	ble.n	f39e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x93e>
    f354:	2610      	movs	r6, #16
    f356:	ee19 9a10 	vmov	r9, s18
    f35a:	ee19 aa90 	vmov	sl, s19
    f35e:	e002      	b.n	f366 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x906>
    f360:	3d10      	subs	r5, #16
    f362:	2d10      	cmp	r5, #16
    f364:	dd1b      	ble.n	f39e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x93e>
    f366:	3301      	adds	r3, #1
    f368:	3410      	adds	r4, #16
    f36a:	4a90      	ldr	r2, [pc, #576]	; (f5ac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4c>)
    f36c:	f108 0808 	add.w	r8, r8, #8
    f370:	2b07      	cmp	r3, #7
    f372:	f848 6c04 	str.w	r6, [r8, #-4]
    f376:	f848 2c08 	str.w	r2, [r8, #-8]
    f37a:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f37e:	ddef      	ble.n	f360 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x900>
    f380:	aa24      	add	r2, sp, #144	; 0x90
    f382:	4651      	mov	r1, sl
    f384:	4648      	mov	r0, r9
    f386:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f38a:	f01c fbc9 	bl	2bb20 <__ssprint_r>
    f38e:	2800      	cmp	r0, #0
    f390:	f040 8408 	bne.w	fba4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1144>
    f394:	3d10      	subs	r5, #16
    f396:	2d10      	cmp	r5, #16
    f398:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
    f39c:	dce3      	bgt.n	f366 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x906>
    f39e:	3301      	adds	r3, #1
    f3a0:	442c      	add	r4, r5
    f3a2:	4a82      	ldr	r2, [pc, #520]	; (f5ac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4c>)
    f3a4:	2b07      	cmp	r3, #7
    f3a6:	f8c8 5004 	str.w	r5, [r8, #4]
    f3aa:	f8c8 2000 	str.w	r2, [r8]
    f3ae:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f3b2:	f77f ac59 	ble.w	ec68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x208>
    f3b6:	aa24      	add	r2, sp, #144	; 0x90
    f3b8:	ee19 1a90 	vmov	r1, s19
    f3bc:	ee19 0a10 	vmov	r0, s18
    f3c0:	f01c fbae 	bl	2bb20 <__ssprint_r>
    f3c4:	2800      	cmp	r0, #0
    f3c6:	f47f aefb 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f3ca:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f3cc:	e44c      	b.n	ec68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x208>
    f3ce:	4692      	mov	sl, r2
    f3d0:	ae50      	add	r6, sp, #320	; 0x140
    f3d2:	9207      	str	r2, [sp, #28]
    f3d4:	f7ff bbb4 	b.w	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    f3d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f3dc:	2d00      	cmp	r5, #0
    f3de:	bf08      	it	eq
    f3e0:	2c0a      	cmpeq	r4, #10
    f3e2:	f080 83ef 	bcs.w	fbc4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1164>
    f3e6:	3430      	adds	r4, #48	; 0x30
    f3e8:	2301      	movs	r3, #1
    f3ea:	f20d 163f 	addw	r6, sp, #319	; 0x13f
    f3ee:	f8cd b00c 	str.w	fp, [sp, #12]
    f3f2:	9307      	str	r3, [sp, #28]
    f3f4:	f88d 413f 	strb.w	r4, [sp, #319]	; 0x13f
    f3f8:	f7ff bba2 	b.w	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    f3fc:	991e      	ldr	r1, [sp, #120]	; 0x78
    f3fe:	2900      	cmp	r1, #0
    f400:	f340 836b 	ble.w	fada <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x107a>
    f404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f408:	4293      	cmp	r3, r2
    f40a:	bfa8      	it	ge
    f40c:	4613      	movge	r3, r2
    f40e:	2b00      	cmp	r3, #0
    f410:	461d      	mov	r5, r3
    f412:	dd0d      	ble.n	f430 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9d0>
    f414:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f416:	442c      	add	r4, r5
    f418:	f8c8 6000 	str.w	r6, [r8]
    f41c:	3301      	adds	r3, #1
    f41e:	9426      	str	r4, [sp, #152]	; 0x98
    f420:	f8c8 5004 	str.w	r5, [r8, #4]
    f424:	2b07      	cmp	r3, #7
    f426:	9325      	str	r3, [sp, #148]	; 0x94
    f428:	f300 8630 	bgt.w	1008c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x8c>
    f42c:	f108 0808 	add.w	r8, r8, #8
    f430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f432:	2d00      	cmp	r5, #0
    f434:	bfa8      	it	ge
    f436:	1b5b      	subge	r3, r3, r5
    f438:	2b00      	cmp	r3, #0
    f43a:	4699      	mov	r9, r3
    f43c:	f300 8269 	bgt.w	f912 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xeb2>
    f440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f442:	4433      	add	r3, r6
    f444:	469b      	mov	fp, r3
    f446:	9b03      	ldr	r3, [sp, #12]
    f448:	055b      	lsls	r3, r3, #21
    f44a:	f100 828f 	bmi.w	f96c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf0c>
    f44e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f452:	4293      	cmp	r3, r2
    f454:	db03      	blt.n	f45e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9fe>
    f456:	9a03      	ldr	r2, [sp, #12]
    f458:	07d5      	lsls	r5, r2, #31
    f45a:	f140 8550 	bpl.w	fefe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x149e>
    f45e:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f460:	9910      	ldr	r1, [sp, #64]	; 0x40
    f462:	3201      	adds	r2, #1
    f464:	9811      	ldr	r0, [sp, #68]	; 0x44
    f466:	440c      	add	r4, r1
    f468:	f8c8 1004 	str.w	r1, [r8, #4]
    f46c:	2a07      	cmp	r2, #7
    f46e:	f8c8 0000 	str.w	r0, [r8]
    f472:	9426      	str	r4, [sp, #152]	; 0x98
    f474:	9225      	str	r2, [sp, #148]	; 0x94
    f476:	f300 861e 	bgt.w	100b6 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xb6>
    f47a:	f108 0808 	add.w	r8, r8, #8
    f47e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f480:	4416      	add	r6, r2
    f482:	1ad3      	subs	r3, r2, r3
    f484:	eba6 060b 	sub.w	r6, r6, fp
    f488:	429e      	cmp	r6, r3
    f48a:	bfa8      	it	ge
    f48c:	461e      	movge	r6, r3
    f48e:	2e00      	cmp	r6, #0
    f490:	dd0d      	ble.n	f4ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa4e>
    f492:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f494:	4434      	add	r4, r6
    f496:	f8c8 b000 	str.w	fp, [r8]
    f49a:	3201      	adds	r2, #1
    f49c:	9426      	str	r4, [sp, #152]	; 0x98
    f49e:	f8c8 6004 	str.w	r6, [r8, #4]
    f4a2:	2a07      	cmp	r2, #7
    f4a4:	9225      	str	r2, [sp, #148]	; 0x94
    f4a6:	f300 867c 	bgt.w	101a2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1a2>
    f4aa:	f108 0808 	add.w	r8, r8, #8
    f4ae:	2e00      	cmp	r6, #0
    f4b0:	bfac      	ite	ge
    f4b2:	1b9e      	subge	r6, r3, r6
    f4b4:	461e      	movlt	r6, r3
    f4b6:	2e00      	cmp	r6, #0
    f4b8:	f77f abcd 	ble.w	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
    f4bc:	2e10      	cmp	r6, #16
    f4be:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f4c0:	f340 8372 	ble.w	fba8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1148>
    f4c4:	f04f 0910 	mov.w	r9, #16
    f4c8:	4d39      	ldr	r5, [pc, #228]	; (f5b0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb50>)
    f4ca:	ee19 aa10 	vmov	sl, s18
    f4ce:	ee19 ba90 	vmov	fp, s19
    f4d2:	e003      	b.n	f4dc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa7c>
    f4d4:	3e10      	subs	r6, #16
    f4d6:	2e10      	cmp	r6, #16
    f4d8:	f340 8367 	ble.w	fbaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x114a>
    f4dc:	3301      	adds	r3, #1
    f4de:	3410      	adds	r4, #16
    f4e0:	f8c8 5000 	str.w	r5, [r8]
    f4e4:	f108 0808 	add.w	r8, r8, #8
    f4e8:	2b07      	cmp	r3, #7
    f4ea:	f848 9c04 	str.w	r9, [r8, #-4]
    f4ee:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f4f2:	ddef      	ble.n	f4d4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa74>
    f4f4:	aa24      	add	r2, sp, #144	; 0x90
    f4f6:	4659      	mov	r1, fp
    f4f8:	4650      	mov	r0, sl
    f4fa:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f4fe:	f01c fb0f 	bl	2bb20 <__ssprint_r>
    f502:	2800      	cmp	r0, #0
    f504:	f040 85d1 	bne.w	100aa <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xaa>
    f508:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
    f50c:	e7e2      	b.n	f4d4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa74>
    f50e:	46a1      	mov	r9, r4
    f510:	46b3      	mov	fp, r6
    f512:	9b08      	ldr	r3, [sp, #32]
    f514:	b11b      	cbz	r3, f51e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xabe>
    f516:	9908      	ldr	r1, [sp, #32]
    f518:	4648      	mov	r0, r9
    f51a:	f01a fbdf 	bl	29cdc <_free_r>
    f51e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    f522:	f013 0f40 	tst.w	r3, #64	; 0x40
    f526:	9b05      	ldr	r3, [sp, #20]
    f528:	bf18      	it	ne
    f52a:	f04f 33ff 	movne.w	r3, #4294967295
    f52e:	9305      	str	r3, [sp, #20]
    f530:	9805      	ldr	r0, [sp, #20]
    f532:	b051      	add	sp, #324	; 0x144
    f534:	ecbd 8b08 	vpop	{d8-d11}
    f538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f53c:	469a      	mov	sl, r3
    f53e:	ae50      	add	r6, sp, #320	; 0x140
    f540:	f7ff bafe 	b.w	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    f544:	9b03      	ldr	r3, [sp, #12]
    f546:	07d8      	lsls	r0, r3, #31
    f548:	f53f ae43 	bmi.w	f1d2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x772>
    f54c:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f54e:	2301      	movs	r3, #1
    f550:	3401      	adds	r4, #1
    f552:	f8c8 6000 	str.w	r6, [r8]
    f556:	eb02 0903 	add.w	r9, r2, r3
    f55a:	f8c8 3004 	str.w	r3, [r8, #4]
    f55e:	9426      	str	r4, [sp, #152]	; 0x98
    f560:	f1b9 0f07 	cmp.w	r9, #7
    f564:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
    f568:	f77f ae6c 	ble.w	f244 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e4>
    f56c:	aa24      	add	r2, sp, #144	; 0x90
    f56e:	ee19 1a90 	vmov	r1, s19
    f572:	ee19 0a10 	vmov	r0, s18
    f576:	f01c fad3 	bl	2bb20 <__ssprint_r>
    f57a:	2800      	cmp	r0, #0
    f57c:	f47f ae20 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f580:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f582:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f586:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
    f58a:	e65d      	b.n	f248 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e8>
    f58c:	1e5e      	subs	r6, r3, #1
    f58e:	2e00      	cmp	r6, #0
    f590:	f77f ae5a 	ble.w	f248 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e8>
    f594:	2e10      	cmp	r6, #16
    f596:	4d06      	ldr	r5, [pc, #24]	; (f5b0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb50>)
    f598:	f340 83a0 	ble.w	fcdc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x127c>
    f59c:	464b      	mov	r3, r9
    f59e:	f04f 0a10 	mov.w	sl, #16
    f5a2:	ee19 9a10 	vmov	r9, s18
    f5a6:	ee19 ba90 	vmov	fp, s19
    f5aa:	e007      	b.n	f5bc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb5c>
    f5ac:	0002f758 	.word	0x0002f758
    f5b0:	0002f768 	.word	0x0002f768
    f5b4:	3e10      	subs	r6, #16
    f5b6:	2e10      	cmp	r6, #16
    f5b8:	f340 838f 	ble.w	fcda <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x127a>
    f5bc:	3301      	adds	r3, #1
    f5be:	3410      	adds	r4, #16
    f5c0:	f8c8 5000 	str.w	r5, [r8]
    f5c4:	f108 0808 	add.w	r8, r8, #8
    f5c8:	2b07      	cmp	r3, #7
    f5ca:	f848 ac04 	str.w	sl, [r8, #-4]
    f5ce:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f5d2:	ddef      	ble.n	f5b4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb54>
    f5d4:	aa24      	add	r2, sp, #144	; 0x90
    f5d6:	4659      	mov	r1, fp
    f5d8:	4648      	mov	r0, r9
    f5da:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f5de:	f01c fa9f 	bl	2bb20 <__ssprint_r>
    f5e2:	2800      	cmp	r0, #0
    f5e4:	d195      	bne.n	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
    f5e6:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
    f5ea:	e7e3      	b.n	f5b4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb54>
    f5ec:	aa24      	add	r2, sp, #144	; 0x90
    f5ee:	ee19 1a90 	vmov	r1, s19
    f5f2:	ee19 0a10 	vmov	r0, s18
    f5f6:	f01c fa93 	bl	2bb20 <__ssprint_r>
    f5fa:	2800      	cmp	r0, #0
    f5fc:	f47f ade0 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f600:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f602:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f606:	f7ff bb13 	b.w	ec30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d0>
    f60a:	f852 4b04 	ldr.w	r4, [r2], #4
    f60e:	f01b 0f10 	tst.w	fp, #16
    f612:	f04f 0301 	mov.w	r3, #1
    f616:	9209      	str	r2, [sp, #36]	; 0x24
    f618:	d10a      	bne.n	f630 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbd0>
    f61a:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f61e:	d003      	beq.n	f628 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbc8>
    f620:	b2a4      	uxth	r4, r4
    f622:	2500      	movs	r5, #0
    f624:	f7ff ba68 	b.w	eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    f628:	f41b 7f00 	tst.w	fp, #512	; 0x200
    f62c:	bf18      	it	ne
    f62e:	b2e4      	uxtbne	r4, r4
    f630:	2500      	movs	r5, #0
    f632:	f7ff ba61 	b.w	eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    f636:	222d      	movs	r2, #45	; 0x2d
    f638:	4264      	negs	r4, r4
    f63a:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f63e:	f04f 0301 	mov.w	r3, #1
    f642:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    f646:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
    f64a:	f7ff ba58 	b.w	eafe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9e>
    f64e:	aa24      	add	r2, sp, #144	; 0x90
    f650:	ee19 1a90 	vmov	r1, s19
    f654:	ee19 0a10 	vmov	r0, s18
    f658:	f01c fa62 	bl	2bb20 <__ssprint_r>
    f65c:	2800      	cmp	r0, #0
    f65e:	f47f adaf 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f662:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f664:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f668:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
    f66c:	e5d1      	b.n	f212 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7b2>
    f66e:	aa24      	add	r2, sp, #144	; 0x90
    f670:	ee19 1a90 	vmov	r1, s19
    f674:	ee19 0a10 	vmov	r0, s18
    f678:	f01c fa52 	bl	2bb20 <__ssprint_r>
    f67c:	2800      	cmp	r0, #0
    f67e:	f47f ad9f 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f682:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f684:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f688:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f68a:	e5b1      	b.n	f1f0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x790>
    f68c:	9b03      	ldr	r3, [sp, #12]
    f68e:	07d9      	lsls	r1, r3, #31
    f690:	f57f aae1 	bpl.w	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
    f694:	e480      	b.n	ef98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x538>
    f696:	f897 9000 	ldrb.w	r9, [r7]
    f69a:	9309      	str	r3, [sp, #36]	; 0x24
    f69c:	f7ff b96a 	b.w	e974 <_svfprintf_r+0xbc>
    f6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f6a2:	f853 1b04 	ldr.w	r1, [r3], #4
    f6a6:	9309      	str	r3, [sp, #36]	; 0x24
    f6a8:	9b05      	ldr	r3, [sp, #20]
    f6aa:	17dd      	asrs	r5, r3, #31
    f6ac:	461a      	mov	r2, r3
    f6ae:	462b      	mov	r3, r5
    f6b0:	e9c1 2300 	strd	r2, r3, [r1]
    f6b4:	f7ff b930 	b.w	e918 <_svfprintf_r+0x60>
    f6b8:	2320      	movs	r3, #32
    f6ba:	f897 9000 	ldrb.w	r9, [r7]
    f6be:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    f6c2:	f7ff b957 	b.w	e974 <_svfprintf_r+0xbc>
    f6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f6c8:	f853 4b04 	ldr.w	r4, [r3], #4
    f6cc:	17e5      	asrs	r5, r4, #31
    f6ce:	9309      	str	r3, [sp, #36]	; 0x24
    f6d0:	4622      	mov	r2, r4
    f6d2:	462b      	mov	r3, r5
    f6d4:	f7ff b9e1 	b.w	ea9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a>
    f6d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f6da:	2500      	movs	r5, #0
    f6dc:	f853 4b04 	ldr.w	r4, [r3], #4
    f6e0:	9309      	str	r3, [sp, #36]	; 0x24
    f6e2:	f7ff ba05 	b.w	eaf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x90>
    f6e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    f6ea:	4602      	mov	r2, r0
    f6ec:	460b      	mov	r3, r1
    f6ee:	f7fd fd93 	bl	d218 <__aeabi_dcmpun>
    f6f2:	2800      	cmp	r0, #0
    f6f4:	f040 85e5 	bne.w	102c2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2c2>
    f6f8:	f029 0320 	bic.w	r3, r9, #32
    f6fc:	2b41      	cmp	r3, #65	; 0x41
    f6fe:	9304      	str	r3, [sp, #16]
    f700:	f040 8328 	bne.w	fd54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12f4>
    f704:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    f708:	f04f 0230 	mov.w	r2, #48	; 0x30
    f70c:	bf0c      	ite	eq
    f70e:	2378      	moveq	r3, #120	; 0x78
    f710:	2358      	movne	r3, #88	; 0x58
    f712:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
    f716:	f88d 2074 	strb.w	r2, [sp, #116]	; 0x74
    f71a:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    f71e:	f300 8400 	bgt.w	ff22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14c2>
    f722:	ae37      	add	r6, sp, #220	; 0xdc
    f724:	9008      	str	r0, [sp, #32]
    f726:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
    f72a:	2a00      	cmp	r2, #0
    f72c:	f280 8577 	bge.w	1021e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x21e>
    f730:	232d      	movs	r3, #45	; 0x2d
    f732:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
    f736:	9313      	str	r3, [sp, #76]	; 0x4c
    f738:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
    f73c:	911a      	str	r1, [sp, #104]	; 0x68
    f73e:	931b      	str	r3, [sp, #108]	; 0x6c
    f740:	a81e      	add	r0, sp, #120	; 0x78
    f742:	ed9d 0b1a 	vldr	d0, [sp, #104]	; 0x68
    f746:	f01b ff69 	bl	2b61c <frexp>
    f74a:	2200      	movs	r2, #0
    f74c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    f750:	ec51 0b10 	vmov	r0, r1, d0
    f754:	f7fd fb4e 	bl	cdf4 <__aeabi_dmul>
    f758:	2200      	movs	r2, #0
    f75a:	2300      	movs	r3, #0
    f75c:	4604      	mov	r4, r0
    f75e:	460d      	mov	r5, r1
    f760:	f7fc ff80 	bl	c664 <__aeabi_dcmpeq>
    f764:	b108      	cbz	r0, f76a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd0a>
    f766:	2301      	movs	r3, #1
    f768:	931e      	str	r3, [sp, #120]	; 0x78
    f76a:	4ab9      	ldr	r2, [pc, #740]	; (fa50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff0>)
    f76c:	f10a 3aff 	add.w	sl, sl, #4294967295
    f770:	4bb8      	ldr	r3, [pc, #736]	; (fa54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff4>)
    f772:	46b3      	mov	fp, r6
    f774:	9714      	str	r7, [sp, #80]	; 0x50
    f776:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    f77a:	bf18      	it	ne
    f77c:	461a      	movne	r2, r3
    f77e:	f8cd 801c 	str.w	r8, [sp, #28]
    f782:	4617      	mov	r7, r2
    f784:	920a      	str	r2, [sp, #40]	; 0x28
    f786:	e9cd 960c 	strd	r9, r6, [sp, #48]	; 0x30
    f78a:	e002      	b.n	f792 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd32>
    f78c:	f7fc ff6a 	bl	c664 <__aeabi_dcmpeq>
    f790:	bb18      	cbnz	r0, f7da <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd7a>
    f792:	2200      	movs	r2, #0
    f794:	4bb0      	ldr	r3, [pc, #704]	; (fa58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff8>)
    f796:	4620      	mov	r0, r4
    f798:	4629      	mov	r1, r5
    f79a:	f7fd fb2b 	bl	cdf4 <__aeabi_dmul>
    f79e:	460d      	mov	r5, r1
    f7a0:	4604      	mov	r4, r0
    f7a2:	f7fc ff91 	bl	c6c8 <__aeabi_d2iz>
    f7a6:	4606      	mov	r6, r0
    f7a8:	f7fc fe9c 	bl	c4e4 <__aeabi_i2d>
    f7ac:	4602      	mov	r2, r0
    f7ae:	460b      	mov	r3, r1
    f7b0:	4620      	mov	r0, r4
    f7b2:	4629      	mov	r1, r5
    f7b4:	f7fc fd48 	bl	c248 <__aeabi_dsub>
    f7b8:	f817 c006 	ldrb.w	ip, [r7, r6]
    f7bc:	f1ba 3fff 	cmp.w	sl, #4294967295
    f7c0:	46d8      	mov	r8, fp
    f7c2:	46d1      	mov	r9, sl
    f7c4:	4604      	mov	r4, r0
    f7c6:	460d      	mov	r5, r1
    f7c8:	f04f 0200 	mov.w	r2, #0
    f7cc:	f04f 0300 	mov.w	r3, #0
    f7d0:	f10a 3aff 	add.w	sl, sl, #4294967295
    f7d4:	f80b cb01 	strb.w	ip, [fp], #1
    f7d8:	d1d8      	bne.n	f78c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd2c>
    f7da:	2200      	movs	r2, #0
    f7dc:	4b9f      	ldr	r3, [pc, #636]	; (fa5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xffc>)
    f7de:	4620      	mov	r0, r4
    f7e0:	4629      	mov	r1, r5
    f7e2:	46b2      	mov	sl, r6
    f7e4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    f7e8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    f7ea:	f8dd 801c 	ldr.w	r8, [sp, #28]
    f7ee:	9f14      	ldr	r7, [sp, #80]	; 0x50
    f7f0:	f8cd 901c 	str.w	r9, [sp, #28]
    f7f4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    f7f8:	f7fc ff5c 	bl	c6b4 <__aeabi_dcmpgt>
    f7fc:	2800      	cmp	r0, #0
    f7fe:	f040 858a 	bne.w	10316 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x316>
    f802:	4620      	mov	r0, r4
    f804:	4629      	mov	r1, r5
    f806:	2200      	movs	r2, #0
    f808:	4b94      	ldr	r3, [pc, #592]	; (fa5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xffc>)
    f80a:	f7fc ff2b 	bl	c664 <__aeabi_dcmpeq>
    f80e:	b118      	cbz	r0, f818 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdb8>
    f810:	4653      	mov	r3, sl
    f812:	07db      	lsls	r3, r3, #31
    f814:	f100 857f 	bmi.w	10316 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x316>
    f818:	9b07      	ldr	r3, [sp, #28]
    f81a:	2b00      	cmp	r3, #0
    f81c:	db07      	blt.n	f82e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdce>
    f81e:	9b07      	ldr	r3, [sp, #28]
    f820:	2230      	movs	r2, #48	; 0x30
    f822:	3301      	adds	r3, #1
    f824:	445b      	add	r3, fp
    f826:	f80b 2b01 	strb.w	r2, [fp], #1
    f82a:	455b      	cmp	r3, fp
    f82c:	d1fb      	bne.n	f826 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdc6>
    f82e:	9b03      	ldr	r3, [sp, #12]
    f830:	f043 0302 	orr.w	r3, r3, #2
    f834:	9303      	str	r3, [sp, #12]
    f836:	ebab 0306 	sub.w	r3, fp, r6
    f83a:	930c      	str	r3, [sp, #48]	; 0x30
    f83c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f83e:	930a      	str	r3, [sp, #40]	; 0x28
    f840:	e2d0      	b.n	fde4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1384>
    f842:	4b83      	ldr	r3, [pc, #524]	; (fa50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff0>)
    f844:	9312      	str	r3, [sp, #72]	; 0x48
    f846:	9b03      	ldr	r3, [sp, #12]
    f848:	0699      	lsls	r1, r3, #26
    f84a:	f140 80ea 	bpl.w	fa22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfc2>
    f84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f850:	3307      	adds	r3, #7
    f852:	f023 0307 	bic.w	r3, r3, #7
    f856:	e8f3 4502 	ldrd	r4, r5, [r3], #8
    f85a:	9309      	str	r3, [sp, #36]	; 0x24
    f85c:	ea54 0305 	orrs.w	r3, r4, r5
    f860:	d00a      	beq.n	f878 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe18>
    f862:	9b03      	ldr	r3, [sp, #12]
    f864:	07de      	lsls	r6, r3, #31
    f866:	d507      	bpl.n	f878 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe18>
    f868:	f043 0302 	orr.w	r3, r3, #2
    f86c:	f88d 9075 	strb.w	r9, [sp, #117]	; 0x75
    f870:	9303      	str	r3, [sp, #12]
    f872:	2330      	movs	r3, #48	; 0x30
    f874:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    f878:	9b03      	ldr	r3, [sp, #12]
    f87a:	f423 6b80 	bic.w	fp, r3, #1024	; 0x400
    f87e:	2302      	movs	r3, #2
    f880:	f7ff b93a 	b.w	eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    f884:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f888:	f7ff bb08 	b.w	ee9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x43c>
    f88c:	4b71      	ldr	r3, [pc, #452]	; (fa54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff4>)
    f88e:	9312      	str	r3, [sp, #72]	; 0x48
    f890:	e7d9      	b.n	f846 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xde6>
    f892:	f043 0320 	orr.w	r3, r3, #32
    f896:	f897 9001 	ldrb.w	r9, [r7, #1]
    f89a:	3701      	adds	r7, #1
    f89c:	9303      	str	r3, [sp, #12]
    f89e:	f7ff b869 	b.w	e974 <_svfprintf_r+0xbc>
    f8a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    f8a6:	f897 9001 	ldrb.w	r9, [r7, #1]
    f8aa:	3701      	adds	r7, #1
    f8ac:	9303      	str	r3, [sp, #12]
    f8ae:	f7ff b861 	b.w	e974 <_svfprintf_r+0xbc>
    f8b2:	aa24      	add	r2, sp, #144	; 0x90
    f8b4:	ee19 1a90 	vmov	r1, s19
    f8b8:	ee19 0a10 	vmov	r0, s18
    f8bc:	f01c f930 	bl	2bb20 <__ssprint_r>
    f8c0:	2800      	cmp	r0, #0
    f8c2:	f47f ac7d 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f8c6:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f8c8:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f8cc:	f7ff bb74 	b.w	efb8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x558>
    f8d0:	2140      	movs	r1, #64	; 0x40
    f8d2:	4648      	mov	r0, r9
    f8d4:	f016 f898 	bl	25a08 <_malloc_r>
    f8d8:	f8cb 0000 	str.w	r0, [fp]
    f8dc:	f8cb 0010 	str.w	r0, [fp, #16]
    f8e0:	2800      	cmp	r0, #0
    f8e2:	f000 858d 	beq.w	10400 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x400>
    f8e6:	2340      	movs	r3, #64	; 0x40
    f8e8:	f8cb 3014 	str.w	r3, [fp, #20]
    f8ec:	f7fe bffe 	b.w	e8ec <_svfprintf_r+0x34>
    f8f0:	4630      	mov	r0, r6
    f8f2:	46aa      	mov	sl, r5
    f8f4:	f016 ffd2 	bl	2689c <strlen>
    f8f8:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    f8fc:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    f900:	9007      	str	r0, [sp, #28]
    f902:	950d      	str	r5, [sp, #52]	; 0x34
    f904:	9304      	str	r3, [sp, #16]
    f906:	e9cd 5408 	strd	r5, r4, [sp, #32]
    f90a:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
    f90e:	f7ff b923 	b.w	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    f912:	f1b9 0f10 	cmp.w	r9, #16
    f916:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f918:	f340 8564 	ble.w	103e4 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3e4>
    f91c:	4622      	mov	r2, r4
    f91e:	f04f 0a10 	mov.w	sl, #16
    f922:	4d4f      	ldr	r5, [pc, #316]	; (fa60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1000>)
    f924:	ee19 ba10 	vmov	fp, s18
    f928:	ee19 4a90 	vmov	r4, s19
    f92c:	e005      	b.n	f93a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xeda>
    f92e:	f1a9 0910 	sub.w	r9, r9, #16
    f932:	f1b9 0f10 	cmp.w	r9, #16
    f936:	f340 82c4 	ble.w	fec2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1462>
    f93a:	3301      	adds	r3, #1
    f93c:	3210      	adds	r2, #16
    f93e:	f8c8 5000 	str.w	r5, [r8]
    f942:	f108 0808 	add.w	r8, r8, #8
    f946:	2b07      	cmp	r3, #7
    f948:	f848 ac04 	str.w	sl, [r8, #-4]
    f94c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f950:	dded      	ble.n	f92e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xece>
    f952:	aa24      	add	r2, sp, #144	; 0x90
    f954:	4621      	mov	r1, r4
    f956:	4658      	mov	r0, fp
    f958:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f95c:	f01c f8e0 	bl	2bb20 <__ssprint_r>
    f960:	2800      	cmp	r0, #0
    f962:	f040 847f 	bne.w	10264 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x264>
    f966:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f96a:	e7e0      	b.n	f92e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xece>
    f96c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f96e:	2b00      	cmp	r3, #0
    f970:	dc0a      	bgt.n	f988 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf28>
    f972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f974:	2b00      	cmp	r3, #0
    f976:	dc07      	bgt.n	f988 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf28>
    f978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f97a:	18f3      	adds	r3, r6, r3
    f97c:	9307      	str	r3, [sp, #28]
    f97e:	9b07      	ldr	r3, [sp, #28]
    f980:	459b      	cmp	fp, r3
    f982:	bf28      	it	cs
    f984:	469b      	movcs	fp, r3
    f986:	e562      	b.n	f44e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9ee>
    f988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f98a:	4622      	mov	r2, r4
    f98c:	9613      	str	r6, [sp, #76]	; 0x4c
    f98e:	ee19 9a10 	vmov	r9, s18
    f992:	18f3      	adds	r3, r6, r3
    f994:	9718      	str	r7, [sp, #96]	; 0x60
    f996:	465e      	mov	r6, fp
    f998:	f8df a0c4 	ldr.w	sl, [pc, #196]	; fa60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1000>
    f99c:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    f9a0:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    f9a2:	930a      	str	r3, [sp, #40]	; 0x28
    f9a4:	f1bb 0f00 	cmp.w	fp, #0
    f9a8:	d045      	beq.n	fa36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfd6>
    f9aa:	f10b 3bff 	add.w	fp, fp, #4294967295
    f9ae:	9825      	ldr	r0, [sp, #148]	; 0x94
    f9b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f9b2:	3001      	adds	r0, #1
    f9b4:	9916      	ldr	r1, [sp, #88]	; 0x58
    f9b6:	441a      	add	r2, r3
    f9b8:	f8c8 3004 	str.w	r3, [r8, #4]
    f9bc:	2807      	cmp	r0, #7
    f9be:	f8c8 1000 	str.w	r1, [r8]
    f9c2:	9226      	str	r2, [sp, #152]	; 0x98
    f9c4:	9025      	str	r0, [sp, #148]	; 0x94
    f9c6:	dc7b      	bgt.n	fac0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1060>
    f9c8:	f108 0808 	add.w	r8, r8, #8
    f9cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9ce:	7838      	ldrb	r0, [r7, #0]
    f9d0:	1b9d      	subs	r5, r3, r6
    f9d2:	9307      	str	r3, [sp, #28]
    f9d4:	4285      	cmp	r5, r0
    f9d6:	bfa8      	it	ge
    f9d8:	4605      	movge	r5, r0
    f9da:	2d00      	cmp	r5, #0
    f9dc:	dd0e      	ble.n	f9fc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf9c>
    f9de:	9825      	ldr	r0, [sp, #148]	; 0x94
    f9e0:	442a      	add	r2, r5
    f9e2:	f8c8 6000 	str.w	r6, [r8]
    f9e6:	3001      	adds	r0, #1
    f9e8:	9226      	str	r2, [sp, #152]	; 0x98
    f9ea:	f8c8 5004 	str.w	r5, [r8, #4]
    f9ee:	2807      	cmp	r0, #7
    f9f0:	9025      	str	r0, [sp, #148]	; 0x94
    f9f2:	f300 813c 	bgt.w	fc6e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x120e>
    f9f6:	f108 0808 	add.w	r8, r8, #8
    f9fa:	7838      	ldrb	r0, [r7, #0]
    f9fc:	2d00      	cmp	r5, #0
    f9fe:	bfac      	ite	ge
    fa00:	1b45      	subge	r5, r0, r5
    fa02:	4605      	movlt	r5, r0
    fa04:	2d00      	cmp	r5, #0
    fa06:	dc1b      	bgt.n	fa40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfe0>
    fa08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa0a:	4406      	add	r6, r0
    fa0c:	2b00      	cmp	r3, #0
    fa0e:	dcc9      	bgt.n	f9a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf44>
    fa10:	f1bb 0f00 	cmp.w	fp, #0
    fa14:	dcc6      	bgt.n	f9a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf44>
    fa16:	46b3      	mov	fp, r6
    fa18:	9717      	str	r7, [sp, #92]	; 0x5c
    fa1a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    fa1c:	4614      	mov	r4, r2
    fa1e:	9f18      	ldr	r7, [sp, #96]	; 0x60
    fa20:	e7ad      	b.n	f97e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf1e>
    fa22:	9b03      	ldr	r3, [sp, #12]
    fa24:	06da      	lsls	r2, r3, #27
    fa26:	f140 80a3 	bpl.w	fb70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1110>
    fa2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa2c:	2500      	movs	r5, #0
    fa2e:	f853 4b04 	ldr.w	r4, [r3], #4
    fa32:	9309      	str	r3, [sp, #36]	; 0x24
    fa34:	e712      	b.n	f85c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdfc>
    fa36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa38:	3f01      	subs	r7, #1
    fa3a:	3b01      	subs	r3, #1
    fa3c:	930b      	str	r3, [sp, #44]	; 0x2c
    fa3e:	e7b6      	b.n	f9ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf4e>
    fa40:	2d10      	cmp	r5, #16
    fa42:	9825      	ldr	r0, [sp, #148]	; 0x94
    fa44:	dd2d      	ble.n	faa2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1042>
    fa46:	960d      	str	r6, [sp, #52]	; 0x34
    fa48:	2410      	movs	r4, #16
    fa4a:	ee19 6a90 	vmov	r6, s19
    fa4e:	e00c      	b.n	fa6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x100a>
    fa50:	0002f724 	.word	0x0002f724
    fa54:	0002f738 	.word	0x0002f738
    fa58:	40300000 	.word	0x40300000
    fa5c:	3fe00000 	.word	0x3fe00000
    fa60:	0002f768 	.word	0x0002f768
    fa64:	3d10      	subs	r5, #16
    fa66:	2d10      	cmp	r5, #16
    fa68:	dd1a      	ble.n	faa0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1040>
    fa6a:	3001      	adds	r0, #1
    fa6c:	3210      	adds	r2, #16
    fa6e:	f8c8 a000 	str.w	sl, [r8]
    fa72:	f108 0808 	add.w	r8, r8, #8
    fa76:	2807      	cmp	r0, #7
    fa78:	f848 4c04 	str.w	r4, [r8, #-4]
    fa7c:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    fa80:	ddf0      	ble.n	fa64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1004>
    fa82:	aa24      	add	r2, sp, #144	; 0x90
    fa84:	4631      	mov	r1, r6
    fa86:	4648      	mov	r0, r9
    fa88:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fa8c:	f01c f848 	bl	2bb20 <__ssprint_r>
    fa90:	2800      	cmp	r0, #0
    fa92:	f040 830d 	bne.w	100b0 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xb0>
    fa96:	3d10      	subs	r5, #16
    fa98:	2d10      	cmp	r5, #16
    fa9a:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    fa9e:	dce4      	bgt.n	fa6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x100a>
    faa0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    faa2:	3001      	adds	r0, #1
    faa4:	442a      	add	r2, r5
    faa6:	f8c8 a000 	str.w	sl, [r8]
    faaa:	2807      	cmp	r0, #7
    faac:	f8c8 5004 	str.w	r5, [r8, #4]
    fab0:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    fab4:	f300 8323 	bgt.w	100fe <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xfe>
    fab8:	f108 0808 	add.w	r8, r8, #8
    fabc:	7838      	ldrb	r0, [r7, #0]
    fabe:	e7a3      	b.n	fa08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfa8>
    fac0:	aa24      	add	r2, sp, #144	; 0x90
    fac2:	ee19 1a90 	vmov	r1, s19
    fac6:	4648      	mov	r0, r9
    fac8:	f01c f82a 	bl	2bb20 <__ssprint_r>
    facc:	2800      	cmp	r0, #0
    face:	f47f ab79 	bne.w	f1c4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x764>
    fad2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fad4:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fad8:	e778      	b.n	f9cc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf6c>
    fada:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fadc:	2201      	movs	r2, #1
    fade:	3401      	adds	r4, #1
    fae0:	4899      	ldr	r0, [pc, #612]	; (fd48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12e8>)
    fae2:	4413      	add	r3, r2
    fae4:	f8c8 2004 	str.w	r2, [r8, #4]
    fae8:	9426      	str	r4, [sp, #152]	; 0x98
    faea:	2b07      	cmp	r3, #7
    faec:	f8c8 0000 	str.w	r0, [r8]
    faf0:	9325      	str	r3, [sp, #148]	; 0x94
    faf2:	f300 81f5 	bgt.w	fee0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1480>
    faf6:	f108 0808 	add.w	r8, r8, #8
    fafa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fafc:	430b      	orrs	r3, r1
    fafe:	f000 82ea 	beq.w	100d6 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xd6>
    fb02:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fb04:	9810      	ldr	r0, [sp, #64]	; 0x40
    fb06:	3301      	adds	r3, #1
    fb08:	1902      	adds	r2, r0, r4
    fb0a:	9c11      	ldr	r4, [sp, #68]	; 0x44
    fb0c:	2b07      	cmp	r3, #7
    fb0e:	f8c8 0004 	str.w	r0, [r8, #4]
    fb12:	f8c8 4000 	str.w	r4, [r8]
    fb16:	9226      	str	r2, [sp, #152]	; 0x98
    fb18:	9325      	str	r3, [sp, #148]	; 0x94
    fb1a:	f300 82a7 	bgt.w	1006c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x6c>
    fb1e:	f108 0808 	add.w	r8, r8, #8
    fb22:	2900      	cmp	r1, #0
    fb24:	f2c0 8352 	blt.w	101cc <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1cc>
    fb28:	990c      	ldr	r1, [sp, #48]	; 0x30
    fb2a:	3301      	adds	r3, #1
    fb2c:	f8c8 6000 	str.w	r6, [r8]
    fb30:	188c      	adds	r4, r1, r2
    fb32:	2b07      	cmp	r3, #7
    fb34:	f8c8 1004 	str.w	r1, [r8, #4]
    fb38:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    fb3c:	f77f a889 	ble.w	ec52 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f2>
    fb40:	f7ff bb90 	b.w	f264 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x804>
    fb44:	aa24      	add	r2, sp, #144	; 0x90
    fb46:	ee19 1a90 	vmov	r1, s19
    fb4a:	ee19 0a10 	vmov	r0, s18
    fb4e:	9313      	str	r3, [sp, #76]	; 0x4c
    fb50:	f01b ffe6 	bl	2bb20 <__ssprint_r>
    fb54:	2800      	cmp	r0, #0
    fb56:	f47f ab33 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    fb5a:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    fb5e:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fb62:	9c26      	ldr	r4, [sp, #152]	; 0x98
    fb64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fb66:	f7ff b835 	b.w	ebd4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x174>
    fb6a:	46a9      	mov	r9, r5
    fb6c:	46bb      	mov	fp, r7
    fb6e:	e4d0      	b.n	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
    fb70:	9b03      	ldr	r3, [sp, #12]
    fb72:	065b      	lsls	r3, r3, #25
    fb74:	f140 80da 	bpl.w	fd2c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12cc>
    fb78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb7a:	2500      	movs	r5, #0
    fb7c:	f853 4b04 	ldr.w	r4, [r3], #4
    fb80:	b2a4      	uxth	r4, r4
    fb82:	9309      	str	r3, [sp, #36]	; 0x24
    fb84:	e66a      	b.n	f85c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdfc>
    fb86:	aa24      	add	r2, sp, #144	; 0x90
    fb88:	ee19 1a90 	vmov	r1, s19
    fb8c:	ee19 0a10 	vmov	r0, s18
    fb90:	f01b ffc6 	bl	2bb20 <__ssprint_r>
    fb94:	2800      	cmp	r0, #0
    fb96:	f47f ab13 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    fb9a:	9c26      	ldr	r4, [sp, #152]	; 0x98
    fb9c:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fba0:	f7ff b9f5 	b.w	ef8e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52e>
    fba4:	46d3      	mov	fp, sl
    fba6:	e4b4      	b.n	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
    fba8:	4d68      	ldr	r5, [pc, #416]	; (fd4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12ec>)
    fbaa:	3301      	adds	r3, #1
    fbac:	4434      	add	r4, r6
    fbae:	f8c8 5000 	str.w	r5, [r8]
    fbb2:	2b07      	cmp	r3, #7
    fbb4:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    fbb8:	f8c8 6004 	str.w	r6, [r8, #4]
    fbbc:	f77f a849 	ble.w	ec52 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f2>
    fbc0:	f7ff bb50 	b.w	f264 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x804>
    fbc4:	f40b 6380 	and.w	r3, fp, #1024	; 0x400
    fbc8:	2200      	movs	r2, #0
    fbca:	f8cd 900c 	str.w	r9, [sp, #12]
    fbce:	ae50      	add	r6, sp, #320	; 0x140
    fbd0:	f8cd 8010 	str.w	r8, [sp, #16]
    fbd4:	4691      	mov	r9, r2
    fbd6:	9707      	str	r7, [sp, #28]
    fbd8:	461f      	mov	r7, r3
    fbda:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    fbde:	e007      	b.n	fbf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1190>
    fbe0:	f7fc fe3a 	bl	c858 <__aeabi_uldivmod>
    fbe4:	2d00      	cmp	r5, #0
    fbe6:	bf08      	it	eq
    fbe8:	2c0a      	cmpeq	r4, #10
    fbea:	d321      	bcc.n	fc30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11d0>
    fbec:	4604      	mov	r4, r0
    fbee:	460d      	mov	r5, r1
    fbf0:	220a      	movs	r2, #10
    fbf2:	2300      	movs	r3, #0
    fbf4:	4620      	mov	r0, r4
    fbf6:	4629      	mov	r1, r5
    fbf8:	f7fc fe2e 	bl	c858 <__aeabi_uldivmod>
    fbfc:	4694      	mov	ip, r2
    fbfe:	4620      	mov	r0, r4
    fc00:	4629      	mov	r1, r5
    fc02:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    fc06:	220a      	movs	r2, #10
    fc08:	2300      	movs	r3, #0
    fc0a:	f109 0901 	add.w	r9, r9, #1
    fc0e:	f806 cc01 	strb.w	ip, [r6, #-1]
    fc12:	3e01      	subs	r6, #1
    fc14:	2f00      	cmp	r7, #0
    fc16:	d0e3      	beq.n	fbe0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1180>
    fc18:	f898 c000 	ldrb.w	ip, [r8]
    fc1c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    fc20:	d0de      	beq.n	fbe0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1180>
    fc22:	45cc      	cmp	ip, r9
    fc24:	d1dc      	bne.n	fbe0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1180>
    fc26:	429d      	cmp	r5, r3
    fc28:	bf08      	it	eq
    fc2a:	4294      	cmpeq	r4, r2
    fc2c:	f080 8275 	bcs.w	1011a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x11a>
    fc30:	ab50      	add	r3, sp, #320	; 0x140
    fc32:	9f07      	ldr	r7, [sp, #28]
    fc34:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
    fc38:	1b9b      	subs	r3, r3, r6
    fc3a:	f8dd 900c 	ldr.w	r9, [sp, #12]
    fc3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    fc42:	f8cd b00c 	str.w	fp, [sp, #12]
    fc46:	f8dd 8010 	ldr.w	r8, [sp, #16]
    fc4a:	9307      	str	r3, [sp, #28]
    fc4c:	f7fe bf78 	b.w	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    fc50:	aa24      	add	r2, sp, #144	; 0x90
    fc52:	ee19 1a90 	vmov	r1, s19
    fc56:	ee19 0a10 	vmov	r0, s18
    fc5a:	f01b ff61 	bl	2bb20 <__ssprint_r>
    fc5e:	2800      	cmp	r0, #0
    fc60:	f47f aaae 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    fc64:	9c26      	ldr	r4, [sp, #152]	; 0x98
    fc66:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fc6a:	f7fe bfda 	b.w	ec22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c2>
    fc6e:	aa24      	add	r2, sp, #144	; 0x90
    fc70:	ee19 1a90 	vmov	r1, s19
    fc74:	4648      	mov	r0, r9
    fc76:	f01b ff53 	bl	2bb20 <__ssprint_r>
    fc7a:	2800      	cmp	r0, #0
    fc7c:	f47f aaa2 	bne.w	f1c4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x764>
    fc80:	7838      	ldrb	r0, [r7, #0]
    fc82:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fc86:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fc88:	e6b8      	b.n	f9fc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf9c>
    fc8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fc8c:	9905      	ldr	r1, [sp, #20]
    fc8e:	f853 2b04 	ldr.w	r2, [r3], #4
    fc92:	6011      	str	r1, [r2, #0]
    fc94:	9309      	str	r3, [sp, #36]	; 0x24
    fc96:	f7fe be3f 	b.w	e918 <_svfprintf_r+0x60>
    fc9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    fc9c:	ee19 ba90 	vmov	fp, s19
    fca0:	2b00      	cmp	r3, #0
    fca2:	f43f ac3c 	beq.w	f51e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xabe>
    fca6:	ee19 0a10 	vmov	r0, s18
    fcaa:	aa24      	add	r2, sp, #144	; 0x90
    fcac:	ee19 1a90 	vmov	r1, s19
    fcb0:	f01b ff36 	bl	2bb20 <__ssprint_r>
    fcb4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    fcb8:	e433      	b.n	f522 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xac2>
    fcba:	4653      	mov	r3, sl
    fcbc:	4632      	mov	r2, r6
    fcbe:	46b2      	mov	sl, r6
    fcc0:	960d      	str	r6, [sp, #52]	; 0x34
    fcc2:	2b06      	cmp	r3, #6
    fcc4:	bf28      	it	cs
    fcc6:	2306      	movcs	r3, #6
    fcc8:	e9cd 6408 	strd	r6, r4, [sp, #32]
    fccc:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
    fcd0:	9304      	str	r3, [sp, #16]
    fcd2:	4e1f      	ldr	r6, [pc, #124]	; (fd50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12f0>)
    fcd4:	9307      	str	r3, [sp, #28]
    fcd6:	f7fe bf3f 	b.w	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    fcda:	4699      	mov	r9, r3
    fcdc:	f109 0901 	add.w	r9, r9, #1
    fce0:	4434      	add	r4, r6
    fce2:	f8c8 5000 	str.w	r5, [r8]
    fce6:	f1b9 0f07 	cmp.w	r9, #7
    fcea:	f8c8 6004 	str.w	r6, [r8, #4]
    fcee:	e9cd 9425 	strd	r9, r4, [sp, #148]	; 0x94
    fcf2:	f77f aaa7 	ble.w	f244 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e4>
    fcf6:	e439      	b.n	f56c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb0c>
    fcf8:	9b03      	ldr	r3, [sp, #12]
    fcfa:	f413 7f00 	tst.w	r3, #512	; 0x200
    fcfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd00:	f853 4b04 	ldr.w	r4, [r3], #4
    fd04:	bf18      	it	ne
    fd06:	b264      	sxtbne	r4, r4
    fd08:	9309      	str	r3, [sp, #36]	; 0x24
    fd0a:	17e5      	asrs	r5, r4, #31
    fd0c:	4622      	mov	r2, r4
    fd0e:	462b      	mov	r3, r5
    fd10:	f7fe bec3 	b.w	ea9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a>
    fd14:	9b03      	ldr	r3, [sp, #12]
    fd16:	2500      	movs	r5, #0
    fd18:	f413 7f00 	tst.w	r3, #512	; 0x200
    fd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd1e:	f853 4b04 	ldr.w	r4, [r3], #4
    fd22:	bf18      	it	ne
    fd24:	b2e4      	uxtbne	r4, r4
    fd26:	9309      	str	r3, [sp, #36]	; 0x24
    fd28:	f7fe bee2 	b.w	eaf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x90>
    fd2c:	9b03      	ldr	r3, [sp, #12]
    fd2e:	2500      	movs	r5, #0
    fd30:	f413 7f00 	tst.w	r3, #512	; 0x200
    fd34:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd36:	f853 4b04 	ldr.w	r4, [r3], #4
    fd3a:	bf18      	it	ne
    fd3c:	b2e4      	uxtbne	r4, r4
    fd3e:	9309      	str	r3, [sp, #36]	; 0x24
    fd40:	e58c      	b.n	f85c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdfc>
    fd42:	4d02      	ldr	r5, [pc, #8]	; (fd4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12ec>)
    fd44:	f7ff b9e8 	b.w	f118 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6b8>
    fd48:	0002f754 	.word	0x0002f754
    fd4c:	0002f768 	.word	0x0002f768
    fd50:	0002f74c 	.word	0x0002f74c
    fd54:	f1ba 3fff 	cmp.w	sl, #4294967295
    fd58:	f000 80f0 	beq.w	ff3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14dc>
    fd5c:	f1ba 0f00 	cmp.w	sl, #0
    fd60:	f040 80ee 	bne.w	ff40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14e0>
    fd64:	9b04      	ldr	r3, [sp, #16]
    fd66:	2b47      	cmp	r3, #71	; 0x47
    fd68:	f040 80ea 	bne.w	ff40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14e0>
    fd6c:	9a03      	ldr	r2, [sp, #12]
    fd6e:	f04f 0a01 	mov.w	sl, #1
    fd72:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	; 0x38
    fd76:	f442 7580 	orr.w	r5, r2, #256	; 0x100
    fd7a:	4663      	mov	r3, ip
    fd7c:	2b00      	cmp	r3, #0
    fd7e:	f2c0 82b5 	blt.w	102ec <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2ec>
    fd82:	4654      	mov	r4, sl
    fd84:	9013      	str	r0, [sp, #76]	; 0x4c
    fd86:	ec4c bb1b 	vmov	d11, fp, ip
    fd8a:	a922      	add	r1, sp, #136	; 0x88
    fd8c:	a81f      	add	r0, sp, #124	; 0x7c
    fd8e:	ab1e      	add	r3, sp, #120	; 0x78
    fd90:	eeb0 0a4b 	vmov.f32	s0, s22
    fd94:	eef0 0a6b 	vmov.f32	s1, s23
    fd98:	9101      	str	r1, [sp, #4]
    fd9a:	4622      	mov	r2, r4
    fd9c:	9000      	str	r0, [sp, #0]
    fd9e:	2102      	movs	r1, #2
    fda0:	ee19 0a10 	vmov	r0, s18
    fda4:	f000 fb4c 	bl	10440 <_dtoa_r>
    fda8:	9b04      	ldr	r3, [sp, #16]
    fdaa:	4606      	mov	r6, r0
    fdac:	2b47      	cmp	r3, #71	; 0x47
    fdae:	f040 81de 	bne.w	1016e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x16e>
    fdb2:	9b03      	ldr	r3, [sp, #12]
    fdb4:	07db      	lsls	r3, r3, #31
    fdb6:	f100 81da 	bmi.w	1016e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x16e>
    fdba:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fdbc:	1b9b      	subs	r3, r3, r6
    fdbe:	930c      	str	r3, [sp, #48]	; 0x30
    fdc0:	9b04      	ldr	r3, [sp, #16]
    fdc2:	2b47      	cmp	r3, #71	; 0x47
    fdc4:	f040 810f 	bne.w	ffe6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1586>
    fdc8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    fdca:	4553      	cmp	r3, sl
    fdcc:	930a      	str	r3, [sp, #40]	; 0x28
    fdce:	dc02      	bgt.n	fdd6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1376>
    fdd0:	3303      	adds	r3, #3
    fdd2:	f280 812a 	bge.w	1002a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2a>
    fdd6:	2300      	movs	r3, #0
    fdd8:	f1a9 0902 	sub.w	r9, r9, #2
    fddc:	9308      	str	r3, [sp, #32]
    fdde:	f029 0320 	bic.w	r3, r9, #32
    fde2:	9304      	str	r3, [sp, #16]
    fde4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fde6:	9a04      	ldr	r2, [sp, #16]
    fde8:	3b01      	subs	r3, #1
    fdea:	2a41      	cmp	r2, #65	; 0x41
    fdec:	931e      	str	r3, [sp, #120]	; 0x78
    fdee:	f040 8273 	bne.w	102d8 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2d8>
    fdf2:	f109 020f 	add.w	r2, r9, #15
    fdf6:	b2d2      	uxtb	r2, r2
    fdf8:	2b00      	cmp	r3, #0
    fdfa:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
    fdfe:	f2c0 82c2 	blt.w	10386 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x386>
    fe02:	222b      	movs	r2, #43	; 0x2b
    fe04:	2b09      	cmp	r3, #9
    fe06:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
    fe0a:	f340 82a8 	ble.w	1035e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x35e>
    fe0e:	f10d 0e8f 	add.w	lr, sp, #143	; 0x8f
    fe12:	f8df c624 	ldr.w	ip, [pc, #1572]	; 10438 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x438>
    fe16:	4670      	mov	r0, lr
    fe18:	fb8c 1203 	smull	r1, r2, ip, r3
    fe1c:	17d9      	asrs	r1, r3, #31
    fe1e:	461d      	mov	r5, r3
    fe20:	4604      	mov	r4, r0
    fe22:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
    fe26:	3801      	subs	r0, #1
    fe28:	2d63      	cmp	r5, #99	; 0x63
    fe2a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    fe2e:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
    fe32:	460b      	mov	r3, r1
    fe34:	f102 0230 	add.w	r2, r2, #48	; 0x30
    fe38:	f804 2c01 	strb.w	r2, [r4, #-1]
    fe3c:	dcec      	bgt.n	fe18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13b8>
    fe3e:	3330      	adds	r3, #48	; 0x30
    fe40:	1ea2      	subs	r2, r4, #2
    fe42:	b2db      	uxtb	r3, r3
    fe44:	4596      	cmp	lr, r2
    fe46:	f800 3c01 	strb.w	r3, [r0, #-1]
    fe4a:	f240 82d6 	bls.w	103fa <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3fa>
    fe4e:	f10d 0282 	add.w	r2, sp, #130	; 0x82
    fe52:	e001      	b.n	fe58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13f8>
    fe54:	f810 3b01 	ldrb.w	r3, [r0], #1
    fe58:	4586      	cmp	lr, r0
    fe5a:	f802 3b01 	strb.w	r3, [r2], #1
    fe5e:	d1f9      	bne.n	fe54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13f4>
    fe60:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    fe64:	f10d 0182 	add.w	r1, sp, #130	; 0x82
    fe68:	aa20      	add	r2, sp, #128	; 0x80
    fe6a:	1b1b      	subs	r3, r3, r4
    fe6c:	440b      	add	r3, r1
    fe6e:	1a9b      	subs	r3, r3, r2
    fe70:	9314      	str	r3, [sp, #80]	; 0x50
    fe72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fe74:	9a14      	ldr	r2, [sp, #80]	; 0x50
    fe76:	2b01      	cmp	r3, #1
    fe78:	441a      	add	r2, r3
    fe7a:	9207      	str	r2, [sp, #28]
    fe7c:	f340 827e 	ble.w	1037c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x37c>
    fe80:	9b07      	ldr	r3, [sp, #28]
    fe82:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fe84:	4413      	add	r3, r2
    fe86:	9307      	str	r3, [sp, #28]
    fe88:	9b03      	ldr	r3, [sp, #12]
    fe8a:	2200      	movs	r2, #0
    fe8c:	9907      	ldr	r1, [sp, #28]
    fe8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    fe92:	920d      	str	r2, [sp, #52]	; 0x34
    fe94:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    fe98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    fe9c:	9104      	str	r1, [sp, #16]
    fe9e:	9303      	str	r3, [sp, #12]
    fea0:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
    fea4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fea6:	2b00      	cmp	r3, #0
    fea8:	f040 80d9 	bne.w	1005e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x5e>
    feac:	469a      	mov	sl, r3
    feae:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    feb2:	f7fe be51 	b.w	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    feb6:	232d      	movs	r3, #45	; 0x2d
    feb8:	461a      	mov	r2, r3
    feba:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    febe:	f7fe bf1e 	b.w	ecfe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x29e>
    fec2:	4614      	mov	r4, r2
    fec4:	3301      	adds	r3, #1
    fec6:	444c      	add	r4, r9
    fec8:	f8c8 5000 	str.w	r5, [r8]
    fecc:	2b07      	cmp	r3, #7
    fece:	f8c8 9004 	str.w	r9, [r8, #4]
    fed2:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    fed6:	dc6b      	bgt.n	ffb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1550>
    fed8:	f108 0808 	add.w	r8, r8, #8
    fedc:	f7ff bab0 	b.w	f440 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9e0>
    fee0:	aa24      	add	r2, sp, #144	; 0x90
    fee2:	ee19 1a90 	vmov	r1, s19
    fee6:	ee19 0a10 	vmov	r0, s18
    feea:	f01b fe19 	bl	2bb20 <__ssprint_r>
    feee:	2800      	cmp	r0, #0
    fef0:	f47f a966 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    fef4:	991e      	ldr	r1, [sp, #120]	; 0x78
    fef6:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fefa:	9c26      	ldr	r4, [sp, #152]	; 0x98
    fefc:	e5fd      	b.n	fafa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x109a>
    fefe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ff00:	4416      	add	r6, r2
    ff02:	1ad3      	subs	r3, r2, r3
    ff04:	eba6 060b 	sub.w	r6, r6, fp
    ff08:	429e      	cmp	r6, r3
    ff0a:	bfa8      	it	ge
    ff0c:	461e      	movge	r6, r3
    ff0e:	f7ff bace 	b.w	f4ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa4e>
    ff12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ff14:	9905      	ldr	r1, [sp, #20]
    ff16:	f853 2b04 	ldr.w	r2, [r3], #4
    ff1a:	8011      	strh	r1, [r2, #0]
    ff1c:	9309      	str	r3, [sp, #36]	; 0x24
    ff1e:	f7fe bcfb 	b.w	e918 <_svfprintf_r+0x60>
    ff22:	f10a 0101 	add.w	r1, sl, #1
    ff26:	ee19 0a10 	vmov	r0, s18
    ff2a:	f015 fd6d 	bl	25a08 <_malloc_r>
    ff2e:	4606      	mov	r6, r0
    ff30:	2800      	cmp	r0, #0
    ff32:	f000 8271 	beq.w	10418 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x418>
    ff36:	9008      	str	r0, [sp, #32]
    ff38:	f7ff bbf5 	b.w	f726 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xcc6>
    ff3c:	f04f 0a06 	mov.w	sl, #6
    ff40:	9a03      	ldr	r2, [sp, #12]
    ff42:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    ff46:	f442 7580 	orr.w	r5, r2, #256	; 0x100
    ff4a:	2900      	cmp	r1, #0
    ff4c:	f2c0 81ce 	blt.w	102ec <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2ec>
    ff50:	2300      	movs	r3, #0
    ff52:	ec41 0b1b 	vmov	d11, r0, r1
    ff56:	9313      	str	r3, [sp, #76]	; 0x4c
    ff58:	9b04      	ldr	r3, [sp, #16]
    ff5a:	2b46      	cmp	r3, #70	; 0x46
    ff5c:	f040 80f2 	bne.w	10144 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x144>
    ff60:	a922      	add	r1, sp, #136	; 0x88
    ff62:	a81f      	add	r0, sp, #124	; 0x7c
    ff64:	ab1e      	add	r3, sp, #120	; 0x78
    ff66:	eeb0 0a4b 	vmov.f32	s0, s22
    ff6a:	eef0 0a6b 	vmov.f32	s1, s23
    ff6e:	9101      	str	r1, [sp, #4]
    ff70:	4652      	mov	r2, sl
    ff72:	9000      	str	r0, [sp, #0]
    ff74:	2103      	movs	r1, #3
    ff76:	ee19 0a10 	vmov	r0, s18
    ff7a:	f000 fa61 	bl	10440 <_dtoa_r>
    ff7e:	7803      	ldrb	r3, [r0, #0]
    ff80:	4606      	mov	r6, r0
    ff82:	2b30      	cmp	r3, #48	; 0x30
    ff84:	d108      	bne.n	ff98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1538>
    ff86:	2200      	movs	r2, #0
    ff88:	2300      	movs	r3, #0
    ff8a:	ec51 0b1b 	vmov	r0, r1, d11
    ff8e:	f7fc fb69 	bl	c664 <__aeabi_dcmpeq>
    ff92:	2800      	cmp	r0, #0
    ff94:	f000 821f 	beq.w	103d6 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3d6>
    ff98:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    ff9a:	4453      	add	r3, sl
    ff9c:	18f4      	adds	r4, r6, r3
    ff9e:	2200      	movs	r2, #0
    ffa0:	2300      	movs	r3, #0
    ffa2:	ec51 0b1b 	vmov	r0, r1, d11
    ffa6:	f7fc fb5d 	bl	c664 <__aeabi_dcmpeq>
    ffaa:	b180      	cbz	r0, ffce <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x156e>
    ffac:	4623      	mov	r3, r4
    ffae:	e705      	b.n	fdbc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x135c>
    ffb0:	aa24      	add	r2, sp, #144	; 0x90
    ffb2:	ee19 1a90 	vmov	r1, s19
    ffb6:	ee19 0a10 	vmov	r0, s18
    ffba:	f01b fdb1 	bl	2bb20 <__ssprint_r>
    ffbe:	2800      	cmp	r0, #0
    ffc0:	f47f a8fe 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    ffc4:	9c26      	ldr	r4, [sp, #152]	; 0x98
    ffc6:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    ffca:	f7ff ba39 	b.w	f440 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9e0>
    ffce:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ffd0:	42a3      	cmp	r3, r4
    ffd2:	f4bf aef3 	bcs.w	fdbc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x135c>
    ffd6:	2130      	movs	r1, #48	; 0x30
    ffd8:	1c5a      	adds	r2, r3, #1
    ffda:	9222      	str	r2, [sp, #136]	; 0x88
    ffdc:	7019      	strb	r1, [r3, #0]
    ffde:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ffe0:	429c      	cmp	r4, r3
    ffe2:	d8f9      	bhi.n	ffd8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1578>
    ffe4:	e6ea      	b.n	fdbc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x135c>
    ffe6:	9b04      	ldr	r3, [sp, #16]
    ffe8:	2b46      	cmp	r3, #70	; 0x46
    ffea:	f040 8200 	bne.w	103ee <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3ee>
    ffee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    fff0:	9b03      	ldr	r3, [sp, #12]
    fff2:	2a00      	cmp	r2, #0
    fff4:	920a      	str	r2, [sp, #40]	; 0x28
    fff6:	f003 0301 	and.w	r3, r3, #1
    fffa:	f340 81ce 	ble.w	1039a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x39a>
    fffe:	ea53 030a 	orrs.w	r3, r3, sl
   10002:	f040 816c 	bne.w	102de <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2de>
   10006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10008:	f04f 0966 	mov.w	r9, #102	; 0x66
   1000c:	9307      	str	r3, [sp, #28]
   1000e:	9b03      	ldr	r3, [sp, #12]
   10010:	055a      	lsls	r2, r3, #21
   10012:	f100 812d 	bmi.w	10270 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x270>
   10016:	9b07      	ldr	r3, [sp, #28]
   10018:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1001c:	9304      	str	r3, [sp, #16]
   1001e:	2300      	movs	r3, #0
   10020:	9503      	str	r5, [sp, #12]
   10022:	9308      	str	r3, [sp, #32]
   10024:	930d      	str	r3, [sp, #52]	; 0x34
   10026:	930b      	str	r3, [sp, #44]	; 0x2c
   10028:	e73c      	b.n	fea4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1444>
   1002a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1002c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1002e:	428b      	cmp	r3, r1
   10030:	f2c0 809f 	blt.w	10172 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x172>
   10034:	9a03      	ldr	r2, [sp, #12]
   10036:	07d4      	lsls	r4, r2, #31
   10038:	f140 818e 	bpl.w	10358 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x358>
   1003c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1003e:	4413      	add	r3, r2
   10040:	9307      	str	r3, [sp, #28]
   10042:	9b03      	ldr	r3, [sp, #12]
   10044:	0558      	lsls	r0, r3, #21
   10046:	d503      	bpl.n	10050 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x50>
   10048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1004a:	2b00      	cmp	r3, #0
   1004c:	f300 810e 	bgt.w	1026c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x26c>
   10050:	9b07      	ldr	r3, [sp, #28]
   10052:	f04f 0967 	mov.w	r9, #103	; 0x67
   10056:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1005a:	9304      	str	r3, [sp, #16]
   1005c:	e7df      	b.n	1001e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e>
   1005e:	222d      	movs	r2, #45	; 0x2d
   10060:	f04f 0a00 	mov.w	sl, #0
   10064:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
   10068:	f7fe bd77 	b.w	eb5a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfa>
   1006c:	aa24      	add	r2, sp, #144	; 0x90
   1006e:	ee19 1a90 	vmov	r1, s19
   10072:	ee19 0a10 	vmov	r0, s18
   10076:	f01b fd53 	bl	2bb20 <__ssprint_r>
   1007a:	2800      	cmp	r0, #0
   1007c:	f47f a8a0 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
   10080:	991e      	ldr	r1, [sp, #120]	; 0x78
   10082:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   10086:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1008a:	e54a      	b.n	fb22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c2>
   1008c:	aa24      	add	r2, sp, #144	; 0x90
   1008e:	ee19 1a90 	vmov	r1, s19
   10092:	ee19 0a10 	vmov	r0, s18
   10096:	f01b fd43 	bl	2bb20 <__ssprint_r>
   1009a:	2800      	cmp	r0, #0
   1009c:	f47f a890 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
   100a0:	9c26      	ldr	r4, [sp, #152]	; 0x98
   100a2:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   100a6:	f7ff b9c3 	b.w	f430 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9d0>
   100aa:	46d1      	mov	r9, sl
   100ac:	f7ff ba31 	b.w	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
   100b0:	46b3      	mov	fp, r6
   100b2:	f7ff ba2e 	b.w	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
   100b6:	aa24      	add	r2, sp, #144	; 0x90
   100b8:	ee19 1a90 	vmov	r1, s19
   100bc:	ee19 0a10 	vmov	r0, s18
   100c0:	f01b fd2e 	bl	2bb20 <__ssprint_r>
   100c4:	2800      	cmp	r0, #0
   100c6:	f47f a87b 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
   100ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   100cc:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   100d0:	9c26      	ldr	r4, [sp, #152]	; 0x98
   100d2:	f7ff b9d4 	b.w	f47e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa1e>
   100d6:	9b03      	ldr	r3, [sp, #12]
   100d8:	07da      	lsls	r2, r3, #31
   100da:	f57e adbc 	bpl.w	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
   100de:	9b25      	ldr	r3, [sp, #148]	; 0x94
   100e0:	9910      	ldr	r1, [sp, #64]	; 0x40
   100e2:	3301      	adds	r3, #1
   100e4:	9811      	ldr	r0, [sp, #68]	; 0x44
   100e6:	190a      	adds	r2, r1, r4
   100e8:	f8c8 1004 	str.w	r1, [r8, #4]
   100ec:	2b07      	cmp	r3, #7
   100ee:	f8c8 0000 	str.w	r0, [r8]
   100f2:	9226      	str	r2, [sp, #152]	; 0x98
   100f4:	9325      	str	r3, [sp, #148]	; 0x94
   100f6:	dcb9      	bgt.n	1006c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x6c>
   100f8:	f108 0808 	add.w	r8, r8, #8
   100fc:	e514      	b.n	fb28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c8>
   100fe:	aa24      	add	r2, sp, #144	; 0x90
   10100:	ee19 1a90 	vmov	r1, s19
   10104:	4648      	mov	r0, r9
   10106:	f01b fd0b 	bl	2bb20 <__ssprint_r>
   1010a:	2800      	cmp	r0, #0
   1010c:	f47f a85a 	bne.w	f1c4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x764>
   10110:	7838      	ldrb	r0, [r7, #0]
   10112:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   10116:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10118:	e476      	b.n	fa08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfa8>
   1011a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1011c:	9916      	ldr	r1, [sp, #88]	; 0x58
   1011e:	1af6      	subs	r6, r6, r3
   10120:	461a      	mov	r2, r3
   10122:	4630      	mov	r0, r6
   10124:	f016 fc22 	bl	2696c <strncpy>
   10128:	f898 3001 	ldrb.w	r3, [r8, #1]
   1012c:	b10b      	cbz	r3, 10132 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x132>
   1012e:	f108 0801 	add.w	r8, r8, #1
   10132:	4620      	mov	r0, r4
   10134:	4629      	mov	r1, r5
   10136:	220a      	movs	r2, #10
   10138:	2300      	movs	r3, #0
   1013a:	f04f 0900 	mov.w	r9, #0
   1013e:	f7fc fb8b 	bl	c858 <__aeabi_uldivmod>
   10142:	e553      	b.n	fbec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x118c>
   10144:	2b45      	cmp	r3, #69	; 0x45
   10146:	f040 8156 	bne.w	103f6 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3f6>
   1014a:	a822      	add	r0, sp, #136	; 0x88
   1014c:	a91f      	add	r1, sp, #124	; 0x7c
   1014e:	f10a 0401 	add.w	r4, sl, #1
   10152:	eeb0 0a4b 	vmov.f32	s0, s22
   10156:	eef0 0a6b 	vmov.f32	s1, s23
   1015a:	ab1e      	add	r3, sp, #120	; 0x78
   1015c:	4622      	mov	r2, r4
   1015e:	e9cd 1000 	strd	r1, r0, [sp]
   10162:	2102      	movs	r1, #2
   10164:	ee19 0a10 	vmov	r0, s18
   10168:	f000 f96a 	bl	10440 <_dtoa_r>
   1016c:	4606      	mov	r6, r0
   1016e:	4434      	add	r4, r6
   10170:	e715      	b.n	ff9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x153e>
   10172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10174:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10176:	189a      	adds	r2, r3, r2
   10178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1017a:	2b00      	cmp	r3, #0
   1017c:	9207      	str	r2, [sp, #28]
   1017e:	f340 80c0 	ble.w	10302 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x302>
   10182:	f04f 0967 	mov.w	r9, #103	; 0x67
   10186:	e742      	b.n	1000e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xe>
   10188:	f8cd a010 	str.w	sl, [sp, #16]
   1018c:	f8cd a01c 	str.w	sl, [sp, #28]
   10190:	4682      	mov	sl, r0
   10192:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
   10196:	9409      	str	r4, [sp, #36]	; 0x24
   10198:	900d      	str	r0, [sp, #52]	; 0x34
   1019a:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
   1019e:	f7fe bcdb 	b.w	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
   101a2:	aa24      	add	r2, sp, #144	; 0x90
   101a4:	ee19 1a90 	vmov	r1, s19
   101a8:	ee19 0a10 	vmov	r0, s18
   101ac:	f01b fcb8 	bl	2bb20 <__ssprint_r>
   101b0:	2800      	cmp	r0, #0
   101b2:	f47f a805 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
   101b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   101b8:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   101bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   101be:	9c26      	ldr	r4, [sp, #152]	; 0x98
   101c0:	1ad3      	subs	r3, r2, r3
   101c2:	f7ff b974 	b.w	f4ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa4e>
   101c6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   101c8:	f7ff b892 	b.w	f2f0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x890>
   101cc:	f1c1 0900 	rsb	r9, r1, #0
   101d0:	3110      	adds	r1, #16
   101d2:	4d96      	ldr	r5, [pc, #600]	; (1042c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x42c>)
   101d4:	da29      	bge.n	1022a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x22a>
   101d6:	2410      	movs	r4, #16
   101d8:	ee19 aa10 	vmov	sl, s18
   101dc:	ee19 ba90 	vmov	fp, s19
   101e0:	e004      	b.n	101ec <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1ec>
   101e2:	f1a9 0910 	sub.w	r9, r9, #16
   101e6:	f1b9 0f10 	cmp.w	r9, #16
   101ea:	dd1e      	ble.n	1022a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x22a>
   101ec:	3301      	adds	r3, #1
   101ee:	3210      	adds	r2, #16
   101f0:	f8c8 5000 	str.w	r5, [r8]
   101f4:	f108 0808 	add.w	r8, r8, #8
   101f8:	2b07      	cmp	r3, #7
   101fa:	f848 4c04 	str.w	r4, [r8, #-4]
   101fe:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   10202:	ddee      	ble.n	101e2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e2>
   10204:	aa24      	add	r2, sp, #144	; 0x90
   10206:	4659      	mov	r1, fp
   10208:	4650      	mov	r0, sl
   1020a:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   1020e:	f01b fc87 	bl	2bb20 <__ssprint_r>
   10212:	2800      	cmp	r0, #0
   10214:	f47f af49 	bne.w	100aa <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xaa>
   10218:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1021c:	e7e1      	b.n	101e2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e2>
   1021e:	2300      	movs	r3, #0
   10220:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
   10224:	9313      	str	r3, [sp, #76]	; 0x4c
   10226:	f7ff ba8b 	b.w	f740 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xce0>
   1022a:	3301      	adds	r3, #1
   1022c:	444a      	add	r2, r9
   1022e:	f8c8 5000 	str.w	r5, [r8]
   10232:	2b07      	cmp	r3, #7
   10234:	f8c8 9004 	str.w	r9, [r8, #4]
   10238:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1023c:	f77f af5c 	ble.w	100f8 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xf8>
   10240:	aa24      	add	r2, sp, #144	; 0x90
   10242:	ee19 1a90 	vmov	r1, s19
   10246:	ee19 0a10 	vmov	r0, s18
   1024a:	f01b fc69 	bl	2bb20 <__ssprint_r>
   1024e:	2800      	cmp	r0, #0
   10250:	f47e afb6 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
   10254:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10256:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   1025a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1025c:	e464      	b.n	fb28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c8>
   1025e:	4d73      	ldr	r5, [pc, #460]	; (1042c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x42c>)
   10260:	f7fe bf13 	b.w	f08a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x62a>
   10264:	46d9      	mov	r9, fp
   10266:	46a3      	mov	fp, r4
   10268:	f7ff b953 	b.w	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
   1026c:	f04f 0967 	mov.w	r9, #103	; 0x67
   10270:	9917      	ldr	r1, [sp, #92]	; 0x5c
   10272:	780b      	ldrb	r3, [r1, #0]
   10274:	2bff      	cmp	r3, #255	; 0xff
   10276:	f000 80cb 	beq.w	10410 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x410>
   1027a:	2400      	movs	r4, #0
   1027c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1027e:	4620      	mov	r0, r4
   10280:	e003      	b.n	1028a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x28a>
   10282:	3001      	adds	r0, #1
   10284:	3101      	adds	r1, #1
   10286:	2bff      	cmp	r3, #255	; 0xff
   10288:	d008      	beq.n	1029c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x29c>
   1028a:	4293      	cmp	r3, r2
   1028c:	da06      	bge.n	1029c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x29c>
   1028e:	1ad2      	subs	r2, r2, r3
   10290:	784b      	ldrb	r3, [r1, #1]
   10292:	2b00      	cmp	r3, #0
   10294:	d1f5      	bne.n	10282 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x282>
   10296:	3401      	adds	r4, #1
   10298:	780b      	ldrb	r3, [r1, #0]
   1029a:	e7f4      	b.n	10286 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x286>
   1029c:	920a      	str	r2, [sp, #40]	; 0x28
   1029e:	9117      	str	r1, [sp, #92]	; 0x5c
   102a0:	900b      	str	r0, [sp, #44]	; 0x2c
   102a2:	940d      	str	r4, [sp, #52]	; 0x34
   102a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   102a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   102a8:	9907      	ldr	r1, [sp, #28]
   102aa:	4413      	add	r3, r2
   102ac:	2200      	movs	r2, #0
   102ae:	9503      	str	r5, [sp, #12]
   102b0:	9208      	str	r2, [sp, #32]
   102b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   102b4:	fb02 1303 	mla	r3, r2, r3, r1
   102b8:	9307      	str	r3, [sp, #28]
   102ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   102be:	9304      	str	r3, [sp, #16]
   102c0:	e5f0      	b.n	fea4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1444>
   102c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   102c4:	2b00      	cmp	r3, #0
   102c6:	db63      	blt.n	10390 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x390>
   102c8:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
   102cc:	2103      	movs	r1, #3
   102ce:	4e58      	ldr	r6, [pc, #352]	; (10430 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x430>)
   102d0:	4b58      	ldr	r3, [pc, #352]	; (10434 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x434>)
   102d2:	9104      	str	r1, [sp, #16]
   102d4:	f7fe bd17 	b.w	ed06 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a6>
   102d8:	fa5f f289 	uxtb.w	r2, r9
   102dc:	e58c      	b.n	fdf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1398>
   102de:	9b10      	ldr	r3, [sp, #64]	; 0x40
   102e0:	f04f 0966 	mov.w	r9, #102	; 0x66
   102e4:	18d3      	adds	r3, r2, r3
   102e6:	4453      	add	r3, sl
   102e8:	9307      	str	r3, [sp, #28]
   102ea:	e690      	b.n	1000e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xe>
   102ec:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
   102f0:	232d      	movs	r3, #45	; 0x2d
   102f2:	ee0b 1a10 	vmov	s22, r1
   102f6:	9313      	str	r3, [sp, #76]	; 0x4c
   102f8:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   102fc:	ee0b 3a90 	vmov	s23, r3
   10300:	e62a      	b.n	ff58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14f8>
   10302:	f1c3 0301 	rsb	r3, r3, #1
   10306:	f04f 0967 	mov.w	r9, #103	; 0x67
   1030a:	441a      	add	r2, r3
   1030c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10310:	9207      	str	r2, [sp, #28]
   10312:	9304      	str	r3, [sp, #16]
   10314:	e683      	b.n	1001e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e>
   10316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10318:	9322      	str	r3, [sp, #136]	; 0x88
   1031a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1031c:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   10320:	7bd9      	ldrb	r1, [r3, #15]
   10322:	465b      	mov	r3, fp
   10324:	428a      	cmp	r2, r1
   10326:	d109      	bne.n	1033c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x33c>
   10328:	2030      	movs	r0, #48	; 0x30
   1032a:	f803 0c01 	strb.w	r0, [r3, #-1]
   1032e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10330:	1e5a      	subs	r2, r3, #1
   10332:	9222      	str	r2, [sp, #136]	; 0x88
   10334:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   10338:	4291      	cmp	r1, r2
   1033a:	d0f6      	beq.n	1032a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x32a>
   1033c:	2a39      	cmp	r2, #57	; 0x39
   1033e:	d053      	beq.n	103e8 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3e8>
   10340:	3201      	adds	r2, #1
   10342:	b2d2      	uxtb	r2, r2
   10344:	f803 2c01 	strb.w	r2, [r3, #-1]
   10348:	f7ff ba71 	b.w	f82e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdce>
   1034c:	ee19 ba90 	vmov	fp, s19
   10350:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   10354:	f7ff b8e5 	b.w	f522 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xac2>
   10358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1035a:	9307      	str	r3, [sp, #28]
   1035c:	e671      	b.n	10042 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x42>
   1035e:	9a04      	ldr	r2, [sp, #16]
   10360:	2a41      	cmp	r2, #65	; 0x41
   10362:	d03c      	beq.n	103de <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3de>
   10364:	2130      	movs	r1, #48	; 0x30
   10366:	f10d 0283 	add.w	r2, sp, #131	; 0x83
   1036a:	f88d 1082 	strb.w	r1, [sp, #130]	; 0x82
   1036e:	3330      	adds	r3, #48	; 0x30
   10370:	a920      	add	r1, sp, #128	; 0x80
   10372:	f802 3b01 	strb.w	r3, [r2], #1
   10376:	1a53      	subs	r3, r2, r1
   10378:	9314      	str	r3, [sp, #80]	; 0x50
   1037a:	e57a      	b.n	fe72 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1412>
   1037c:	9b03      	ldr	r3, [sp, #12]
   1037e:	07dd      	lsls	r5, r3, #31
   10380:	f57f ad82 	bpl.w	fe88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1428>
   10384:	e57c      	b.n	fe80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1420>
   10386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10388:	222d      	movs	r2, #45	; 0x2d
   1038a:	f1c3 0301 	rsb	r3, r3, #1
   1038e:	e539      	b.n	fe04 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13a4>
   10390:	232d      	movs	r3, #45	; 0x2d
   10392:	461a      	mov	r2, r3
   10394:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
   10398:	e798      	b.n	102cc <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2cc>
   1039a:	ea53 030a 	orrs.w	r3, r3, sl
   1039e:	d105      	bne.n	103ac <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3ac>
   103a0:	2301      	movs	r3, #1
   103a2:	f04f 0966 	mov.w	r9, #102	; 0x66
   103a6:	9304      	str	r3, [sp, #16]
   103a8:	9307      	str	r3, [sp, #28]
   103aa:	e638      	b.n	1001e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e>
   103ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
   103ae:	f04f 0966 	mov.w	r9, #102	; 0x66
   103b2:	3301      	adds	r3, #1
   103b4:	4453      	add	r3, sl
   103b6:	9307      	str	r3, [sp, #28]
   103b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   103bc:	9304      	str	r3, [sp, #16]
   103be:	e62e      	b.n	1001e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e>
   103c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   103c2:	f897 9001 	ldrb.w	r9, [r7, #1]
   103c6:	4617      	mov	r7, r2
   103c8:	f853 2b04 	ldr.w	r2, [r3], #4
   103cc:	ea42 7ae2 	orr.w	sl, r2, r2, asr #31
   103d0:	9309      	str	r3, [sp, #36]	; 0x24
   103d2:	f7fe bacf 	b.w	e974 <_svfprintf_r+0xbc>
   103d6:	f1ca 0301 	rsb	r3, sl, #1
   103da:	931e      	str	r3, [sp, #120]	; 0x78
   103dc:	e5dd      	b.n	ff9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x153a>
   103de:	f10d 0282 	add.w	r2, sp, #130	; 0x82
   103e2:	e7c4      	b.n	1036e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x36e>
   103e4:	4d11      	ldr	r5, [pc, #68]	; (1042c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x42c>)
   103e6:	e56d      	b.n	fec4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1464>
   103e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   103ea:	7a92      	ldrb	r2, [r2, #10]
   103ec:	e7aa      	b.n	10344 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x344>
   103ee:	2300      	movs	r3, #0
   103f0:	9308      	str	r3, [sp, #32]
   103f2:	f7ff ba23 	b.w	f83c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xddc>
   103f6:	4654      	mov	r4, sl
   103f8:	e4c7      	b.n	fd8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x132a>
   103fa:	2302      	movs	r3, #2
   103fc:	9314      	str	r3, [sp, #80]	; 0x50
   103fe:	e538      	b.n	fe72 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1412>
   10400:	230c      	movs	r3, #12
   10402:	f04f 32ff 	mov.w	r2, #4294967295
   10406:	f8c9 3000 	str.w	r3, [r9]
   1040a:	9205      	str	r2, [sp, #20]
   1040c:	f7ff b890 	b.w	f530 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xad0>
   10410:	2300      	movs	r3, #0
   10412:	930d      	str	r3, [sp, #52]	; 0x34
   10414:	930b      	str	r3, [sp, #44]	; 0x2c
   10416:	e745      	b.n	102a4 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2a4>
   10418:	ee19 ba90 	vmov	fp, s19
   1041c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   10420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10424:	f8ab 300c 	strh.w	r3, [fp, #12]
   10428:	f7ff b87b 	b.w	f522 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xac2>
   1042c:	0002f768 	.word	0x0002f768
   10430:	0002f71c 	.word	0x0002f71c
   10434:	0002f720 	.word	0x0002f720
   10438:	66666667 	.word	0x66666667
   1043c:	00000000 	.word	0x00000000

00010440 <_dtoa_r>:
   10440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10444:	ed2d 8b04 	vpush	{d8-d9}
   10448:	b099      	sub	sp, #100	; 0x64
   1044a:	4604      	mov	r4, r0
   1044c:	9101      	str	r1, [sp, #4]
   1044e:	6c01      	ldr	r1, [r0, #64]	; 0x40
   10450:	9d26      	ldr	r5, [sp, #152]	; 0x98
   10452:	920b      	str	r2, [sp, #44]	; 0x2c
   10454:	9307      	str	r3, [sp, #28]
   10456:	ec57 6b10 	vmov	r6, r7, d0
   1045a:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1045e:	b141      	cbz	r1, 10472 <_dtoa_r+0x32>
   10460:	6c42      	ldr	r2, [r0, #68]	; 0x44
   10462:	2301      	movs	r3, #1
   10464:	4093      	lsls	r3, r2
   10466:	e9c1 2301 	strd	r2, r3, [r1, #4]
   1046a:	f01a fc3b 	bl	2ace4 <_Bfree>
   1046e:	2300      	movs	r3, #0
   10470:	6423      	str	r3, [r4, #64]	; 0x40
   10472:	f1b7 0900 	subs.w	r9, r7, #0
   10476:	f2c0 80b4 	blt.w	105e2 <_dtoa_r+0x1a2>
   1047a:	2300      	movs	r3, #0
   1047c:	602b      	str	r3, [r5, #0]
   1047e:	4b7e      	ldr	r3, [pc, #504]	; (10678 <_dtoa_r+0x238>)
   10480:	ea33 0309 	bics.w	r3, r3, r9
   10484:	f000 80b8 	beq.w	105f8 <_dtoa_r+0x1b8>
   10488:	2200      	movs	r2, #0
   1048a:	2300      	movs	r3, #0
   1048c:	ed9d 7b04 	vldr	d7, [sp, #16]
   10490:	ec51 0b17 	vmov	r0, r1, d7
   10494:	ed8d 7b02 	vstr	d7, [sp, #8]
   10498:	f7fc f8e4 	bl	c664 <__aeabi_dcmpeq>
   1049c:	4680      	mov	r8, r0
   1049e:	b188      	cbz	r0, 104c4 <_dtoa_r+0x84>
   104a0:	2301      	movs	r3, #1
   104a2:	9a07      	ldr	r2, [sp, #28]
   104a4:	6013      	str	r3, [r2, #0]
   104a6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   104a8:	2b00      	cmp	r3, #0
   104aa:	f000 8251 	beq.w	10950 <_dtoa_r+0x510>
   104ae:	4b73      	ldr	r3, [pc, #460]	; (1067c <_dtoa_r+0x23c>)
   104b0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   104b2:	f103 39ff 	add.w	r9, r3, #4294967295
   104b6:	6013      	str	r3, [r2, #0]
   104b8:	4648      	mov	r0, r9
   104ba:	b019      	add	sp, #100	; 0x64
   104bc:	ecbd 8b04 	vpop	{d8-d9}
   104c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   104c4:	ed9d 0b02 	vldr	d0, [sp, #8]
   104c8:	aa16      	add	r2, sp, #88	; 0x58
   104ca:	a917      	add	r1, sp, #92	; 0x5c
   104cc:	4620      	mov	r0, r4
   104ce:	f01a ffad 	bl	2b42c <__d2b>
   104d2:	4682      	mov	sl, r0
   104d4:	ea5f 5519 	movs.w	r5, r9, lsr #20
   104d8:	f040 80a7 	bne.w	1062a <_dtoa_r+0x1ea>
   104dc:	e9dd 8516 	ldrd	r8, r5, [sp, #88]	; 0x58
   104e0:	4445      	add	r5, r8
   104e2:	f205 4032 	addw	r0, r5, #1074	; 0x432
   104e6:	2820      	cmp	r0, #32
   104e8:	f340 823a 	ble.w	10960 <_dtoa_r+0x520>
   104ec:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   104f0:	f205 4012 	addw	r0, r5, #1042	; 0x412
   104f4:	fa09 f903 	lsl.w	r9, r9, r3
   104f8:	fa26 f000 	lsr.w	r0, r6, r0
   104fc:	ea49 0000 	orr.w	r0, r9, r0
   10500:	f7fb ffe0 	bl	c4c4 <__aeabi_ui2d>
   10504:	3d01      	subs	r5, #1
   10506:	2201      	movs	r2, #1
   10508:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   1050c:	9210      	str	r2, [sp, #64]	; 0x40
   1050e:	2200      	movs	r2, #0
   10510:	4b5b      	ldr	r3, [pc, #364]	; (10680 <_dtoa_r+0x240>)
   10512:	f7fb fe99 	bl	c248 <__aeabi_dsub>
   10516:	a352      	add	r3, pc, #328	; (adr r3, 10660 <_dtoa_r+0x220>)
   10518:	e9d3 2300 	ldrd	r2, r3, [r3]
   1051c:	f7fc fc6a 	bl	cdf4 <__aeabi_dmul>
   10520:	a351      	add	r3, pc, #324	; (adr r3, 10668 <_dtoa_r+0x228>)
   10522:	e9d3 2300 	ldrd	r2, r3, [r3]
   10526:	f7fb fe91 	bl	c24c <__adddf3>
   1052a:	4606      	mov	r6, r0
   1052c:	460f      	mov	r7, r1
   1052e:	4628      	mov	r0, r5
   10530:	f7fb ffd8 	bl	c4e4 <__aeabi_i2d>
   10534:	a34e      	add	r3, pc, #312	; (adr r3, 10670 <_dtoa_r+0x230>)
   10536:	e9d3 2300 	ldrd	r2, r3, [r3]
   1053a:	f7fc fc5b 	bl	cdf4 <__aeabi_dmul>
   1053e:	4602      	mov	r2, r0
   10540:	460b      	mov	r3, r1
   10542:	4630      	mov	r0, r6
   10544:	4639      	mov	r1, r7
   10546:	f7fb fe81 	bl	c24c <__adddf3>
   1054a:	4606      	mov	r6, r0
   1054c:	460f      	mov	r7, r1
   1054e:	f7fc f8bb 	bl	c6c8 <__aeabi_d2iz>
   10552:	2200      	movs	r2, #0
   10554:	4683      	mov	fp, r0
   10556:	2300      	movs	r3, #0
   10558:	4630      	mov	r0, r6
   1055a:	4639      	mov	r1, r7
   1055c:	f7fc f88c 	bl	c678 <__aeabi_dcmplt>
   10560:	2800      	cmp	r0, #0
   10562:	f040 81e8 	bne.w	10936 <_dtoa_r+0x4f6>
   10566:	f1bb 0f16 	cmp.w	fp, #22
   1056a:	f200 81d6 	bhi.w	1091a <_dtoa_r+0x4da>
   1056e:	4b45      	ldr	r3, [pc, #276]	; (10684 <_dtoa_r+0x244>)
   10570:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   10574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10578:	e9d3 2300 	ldrd	r2, r3, [r3]
   1057c:	f7fc f87c 	bl	c678 <__aeabi_dcmplt>
   10580:	2800      	cmp	r0, #0
   10582:	f000 8085 	beq.w	10690 <_dtoa_r+0x250>
   10586:	2300      	movs	r3, #0
   10588:	eba8 0505 	sub.w	r5, r8, r5
   1058c:	f10b 3bff 	add.w	fp, fp, #4294967295
   10590:	930f      	str	r3, [sp, #60]	; 0x3c
   10592:	1e6b      	subs	r3, r5, #1
   10594:	9308      	str	r3, [sp, #32]
   10596:	f100 81c8 	bmi.w	1092a <_dtoa_r+0x4ea>
   1059a:	2300      	movs	r3, #0
   1059c:	930c      	str	r3, [sp, #48]	; 0x30
   1059e:	f1bb 0f00 	cmp.w	fp, #0
   105a2:	da7d      	bge.n	106a0 <_dtoa_r+0x260>
   105a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   105a6:	f8cd b018 	str.w	fp, [sp, #24]
   105aa:	eba3 030b 	sub.w	r3, r3, fp
   105ae:	930c      	str	r3, [sp, #48]	; 0x30
   105b0:	f1cb 0300 	rsb	r3, fp, #0
   105b4:	f04f 0b00 	mov.w	fp, #0
   105b8:	930e      	str	r3, [sp, #56]	; 0x38
   105ba:	9b01      	ldr	r3, [sp, #4]
   105bc:	2b09      	cmp	r3, #9
   105be:	d879      	bhi.n	106b4 <_dtoa_r+0x274>
   105c0:	2b05      	cmp	r3, #5
   105c2:	f340 81d2 	ble.w	1096a <_dtoa_r+0x52a>
   105c6:	3b04      	subs	r3, #4
   105c8:	2500      	movs	r5, #0
   105ca:	9301      	str	r3, [sp, #4]
   105cc:	9b01      	ldr	r3, [sp, #4]
   105ce:	3b02      	subs	r3, #2
   105d0:	2b03      	cmp	r3, #3
   105d2:	f200 8563 	bhi.w	1109c <_dtoa_r+0xc5c>
   105d6:	e8df f013 	tbh	[pc, r3, lsl #1]
   105da:	03f3      	.short	0x03f3
   105dc:	03e703f0 	.word	0x03e703f0
   105e0:	03c5      	.short	0x03c5
   105e2:	2301      	movs	r3, #1
   105e4:	f029 4900 	bic.w	r9, r9, #2147483648	; 0x80000000
   105e8:	602b      	str	r3, [r5, #0]
   105ea:	4b23      	ldr	r3, [pc, #140]	; (10678 <_dtoa_r+0x238>)
   105ec:	f8cd 9014 	str.w	r9, [sp, #20]
   105f0:	ea33 0309 	bics.w	r3, r3, r9
   105f4:	f47f af48 	bne.w	10488 <_dtoa_r+0x48>
   105f8:	f242 730f 	movw	r3, #9999	; 0x270f
   105fc:	f3c9 0913 	ubfx	r9, r9, #0, #20
   10600:	9a07      	ldr	r2, [sp, #28]
   10602:	6013      	str	r3, [r2, #0]
   10604:	ea59 0306 	orrs.w	r3, r9, r6
   10608:	d01f      	beq.n	1064a <_dtoa_r+0x20a>
   1060a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1060c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 10688 <_dtoa_r+0x248>
   10610:	2b00      	cmp	r3, #0
   10612:	f43f af51 	beq.w	104b8 <_dtoa_r+0x78>
   10616:	f109 0303 	add.w	r3, r9, #3
   1061a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   1061c:	4648      	mov	r0, r9
   1061e:	6013      	str	r3, [r2, #0]
   10620:	b019      	add	sp, #100	; 0x64
   10622:	ecbd 8b04 	vpop	{d8-d9}
   10626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1062a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1062e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   10632:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   10636:	f3c2 0313 	ubfx	r3, r2, #0, #20
   1063a:	4608      	mov	r0, r1
   1063c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   10640:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   10644:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   10648:	e761      	b.n	1050e <_dtoa_r+0xce>
   1064a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1064c:	f8df 903c 	ldr.w	r9, [pc, #60]	; 1068c <_dtoa_r+0x24c>
   10650:	2b00      	cmp	r3, #0
   10652:	f43f af31 	beq.w	104b8 <_dtoa_r+0x78>
   10656:	f109 0308 	add.w	r3, r9, #8
   1065a:	e7de      	b.n	1061a <_dtoa_r+0x1da>
   1065c:	f3af 8000 	nop.w
   10660:	636f4361 	.word	0x636f4361
   10664:	3fd287a7 	.word	0x3fd287a7
   10668:	8b60c8b3 	.word	0x8b60c8b3
   1066c:	3fc68a28 	.word	0x3fc68a28
   10670:	509f79fb 	.word	0x509f79fb
   10674:	3fd34413 	.word	0x3fd34413
   10678:	7ff00000 	.word	0x7ff00000
   1067c:	0002f755 	.word	0x0002f755
   10680:	3ff80000 	.word	0x3ff80000
   10684:	0002edd8 	.word	0x0002edd8
   10688:	0002f7c4 	.word	0x0002f7c4
   1068c:	0002f7c8 	.word	0x0002f7c8
   10690:	eba8 0505 	sub.w	r5, r8, r5
   10694:	1e6b      	subs	r3, r5, #1
   10696:	9308      	str	r3, [sp, #32]
   10698:	f100 84ee 	bmi.w	11078 <_dtoa_r+0xc38>
   1069c:	900f      	str	r0, [sp, #60]	; 0x3c
   1069e:	900c      	str	r0, [sp, #48]	; 0x30
   106a0:	9b08      	ldr	r3, [sp, #32]
   106a2:	f8cd b018 	str.w	fp, [sp, #24]
   106a6:	445b      	add	r3, fp
   106a8:	9308      	str	r3, [sp, #32]
   106aa:	2300      	movs	r3, #0
   106ac:	930e      	str	r3, [sp, #56]	; 0x38
   106ae:	9b01      	ldr	r3, [sp, #4]
   106b0:	2b09      	cmp	r3, #9
   106b2:	d985      	bls.n	105c0 <_dtoa_r+0x180>
   106b4:	2300      	movs	r3, #0
   106b6:	2201      	movs	r2, #1
   106b8:	461d      	mov	r5, r3
   106ba:	920d      	str	r2, [sp, #52]	; 0x34
   106bc:	f04f 32ff 	mov.w	r2, #4294967295
   106c0:	9301      	str	r3, [sp, #4]
   106c2:	930b      	str	r3, [sp, #44]	; 0x2c
   106c4:	920a      	str	r2, [sp, #40]	; 0x28
   106c6:	2100      	movs	r1, #0
   106c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   106ca:	6461      	str	r1, [r4, #68]	; 0x44
   106cc:	9314      	str	r3, [sp, #80]	; 0x50
   106ce:	4620      	mov	r0, r4
   106d0:	f01a fae2 	bl	2ac98 <_Balloc>
   106d4:	9009      	str	r0, [sp, #36]	; 0x24
   106d6:	6420      	str	r0, [r4, #64]	; 0x40
   106d8:	2d00      	cmp	r5, #0
   106da:	f000 80f2 	beq.w	108c2 <_dtoa_r+0x482>
   106de:	9906      	ldr	r1, [sp, #24]
   106e0:	2900      	cmp	r1, #0
   106e2:	f340 829e 	ble.w	10c22 <_dtoa_r+0x7e2>
   106e6:	4ac8      	ldr	r2, [pc, #800]	; (10a08 <_dtoa_r+0x5c8>)
   106e8:	f001 030f 	and.w	r3, r1, #15
   106ec:	110d      	asrs	r5, r1, #4
   106ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   106f2:	05ca      	lsls	r2, r1, #23
   106f4:	e9d3 6700 	ldrd	r6, r7, [r3]
   106f8:	f140 832b 	bpl.w	10d52 <_dtoa_r+0x912>
   106fc:	4bc3      	ldr	r3, [pc, #780]	; (10a0c <_dtoa_r+0x5cc>)
   106fe:	f005 050f 	and.w	r5, r5, #15
   10702:	f04f 0803 	mov.w	r8, #3
   10706:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1070a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1070e:	f7fc fc9b 	bl	d048 <__aeabi_ddiv>
   10712:	ec41 0b18 	vmov	d8, r0, r1
   10716:	b18d      	cbz	r5, 1073c <_dtoa_r+0x2fc>
   10718:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 10a0c <_dtoa_r+0x5cc>
   1071c:	07eb      	lsls	r3, r5, #31
   1071e:	4630      	mov	r0, r6
   10720:	4639      	mov	r1, r7
   10722:	d507      	bpl.n	10734 <_dtoa_r+0x2f4>
   10724:	f108 0801 	add.w	r8, r8, #1
   10728:	e9d9 2300 	ldrd	r2, r3, [r9]
   1072c:	f7fc fb62 	bl	cdf4 <__aeabi_dmul>
   10730:	4606      	mov	r6, r0
   10732:	460f      	mov	r7, r1
   10734:	106d      	asrs	r5, r5, #1
   10736:	f109 0908 	add.w	r9, r9, #8
   1073a:	d1ef      	bne.n	1071c <_dtoa_r+0x2dc>
   1073c:	4632      	mov	r2, r6
   1073e:	463b      	mov	r3, r7
   10740:	ec51 0b18 	vmov	r0, r1, d8
   10744:	f7fc fc80 	bl	d048 <__aeabi_ddiv>
   10748:	4606      	mov	r6, r0
   1074a:	460f      	mov	r7, r1
   1074c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1074e:	b143      	cbz	r3, 10762 <_dtoa_r+0x322>
   10750:	2200      	movs	r2, #0
   10752:	4baf      	ldr	r3, [pc, #700]	; (10a10 <_dtoa_r+0x5d0>)
   10754:	4630      	mov	r0, r6
   10756:	4639      	mov	r1, r7
   10758:	f7fb ff8e 	bl	c678 <__aeabi_dcmplt>
   1075c:	2800      	cmp	r0, #0
   1075e:	f040 8466 	bne.w	1102e <_dtoa_r+0xbee>
   10762:	4640      	mov	r0, r8
   10764:	f7fb febe 	bl	c4e4 <__aeabi_i2d>
   10768:	4632      	mov	r2, r6
   1076a:	463b      	mov	r3, r7
   1076c:	f7fc fb42 	bl	cdf4 <__aeabi_dmul>
   10770:	4ba8      	ldr	r3, [pc, #672]	; (10a14 <_dtoa_r+0x5d4>)
   10772:	2200      	movs	r2, #0
   10774:	f7fb fd6a 	bl	c24c <__adddf3>
   10778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1077a:	4680      	mov	r8, r0
   1077c:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   10780:	2b00      	cmp	r3, #0
   10782:	f000 8102 	beq.w	1098a <_dtoa_r+0x54a>
   10786:	9b06      	ldr	r3, [sp, #24]
   10788:	9312      	str	r3, [sp, #72]	; 0x48
   1078a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1078c:	9311      	str	r3, [sp, #68]	; 0x44
   1078e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10790:	2b00      	cmp	r3, #0
   10792:	f000 8318 	beq.w	10dc6 <_dtoa_r+0x986>
   10796:	9a11      	ldr	r2, [sp, #68]	; 0x44
   10798:	2000      	movs	r0, #0
   1079a:	4b9b      	ldr	r3, [pc, #620]	; (10a08 <_dtoa_r+0x5c8>)
   1079c:	499e      	ldr	r1, [pc, #632]	; (10a18 <_dtoa_r+0x5d8>)
   1079e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   107a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   107a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   107a8:	f7fc fc4e 	bl	d048 <__aeabi_ddiv>
   107ac:	4642      	mov	r2, r8
   107ae:	464b      	mov	r3, r9
   107b0:	f7fb fd4a 	bl	c248 <__aeabi_dsub>
   107b4:	4680      	mov	r8, r0
   107b6:	4689      	mov	r9, r1
   107b8:	4630      	mov	r0, r6
   107ba:	4639      	mov	r1, r7
   107bc:	f7fb ff84 	bl	c6c8 <__aeabi_d2iz>
   107c0:	ec49 8b18 	vmov	d8, r8, r9
   107c4:	4680      	mov	r8, r0
   107c6:	f7fb fe8d 	bl	c4e4 <__aeabi_i2d>
   107ca:	4602      	mov	r2, r0
   107cc:	460b      	mov	r3, r1
   107ce:	f108 0830 	add.w	r8, r8, #48	; 0x30
   107d2:	4630      	mov	r0, r6
   107d4:	4639      	mov	r1, r7
   107d6:	f7fb fd37 	bl	c248 <__aeabi_dsub>
   107da:	f805 8b01 	strb.w	r8, [r5], #1
   107de:	4606      	mov	r6, r0
   107e0:	460f      	mov	r7, r1
   107e2:	4602      	mov	r2, r0
   107e4:	460b      	mov	r3, r1
   107e6:	ec51 0b18 	vmov	r0, r1, d8
   107ea:	f7fb ff63 	bl	c6b4 <__aeabi_dcmpgt>
   107ee:	2800      	cmp	r0, #0
   107f0:	f040 851a 	bne.w	11228 <_dtoa_r+0xde8>
   107f4:	f04f 0900 	mov.w	r9, #0
   107f8:	ee09 aa10 	vmov	s18, sl
   107fc:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   10800:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   10804:	46cb      	mov	fp, r9
   10806:	ec59 8b18 	vmov	r8, r9, d8
   1080a:	ee08 4a10 	vmov	s16, r4
   1080e:	462c      	mov	r4, r5
   10810:	e024      	b.n	1085c <_dtoa_r+0x41c>
   10812:	45d3      	cmp	fp, sl
   10814:	da4f      	bge.n	108b6 <_dtoa_r+0x476>
   10816:	f7fc faed 	bl	cdf4 <__aeabi_dmul>
   1081a:	2200      	movs	r2, #0
   1081c:	4b7f      	ldr	r3, [pc, #508]	; (10a1c <_dtoa_r+0x5dc>)
   1081e:	4680      	mov	r8, r0
   10820:	4689      	mov	r9, r1
   10822:	4630      	mov	r0, r6
   10824:	4639      	mov	r1, r7
   10826:	f7fc fae5 	bl	cdf4 <__aeabi_dmul>
   1082a:	460f      	mov	r7, r1
   1082c:	4606      	mov	r6, r0
   1082e:	f7fb ff4b 	bl	c6c8 <__aeabi_d2iz>
   10832:	4605      	mov	r5, r0
   10834:	f7fb fe56 	bl	c4e4 <__aeabi_i2d>
   10838:	4602      	mov	r2, r0
   1083a:	460b      	mov	r3, r1
   1083c:	3530      	adds	r5, #48	; 0x30
   1083e:	4630      	mov	r0, r6
   10840:	4639      	mov	r1, r7
   10842:	f7fb fd01 	bl	c248 <__aeabi_dsub>
   10846:	4642      	mov	r2, r8
   10848:	464b      	mov	r3, r9
   1084a:	f804 5b01 	strb.w	r5, [r4], #1
   1084e:	4606      	mov	r6, r0
   10850:	460f      	mov	r7, r1
   10852:	f7fb ff11 	bl	c678 <__aeabi_dcmplt>
   10856:	2800      	cmp	r0, #0
   10858:	f040 84e1 	bne.w	1121e <_dtoa_r+0xdde>
   1085c:	4632      	mov	r2, r6
   1085e:	463b      	mov	r3, r7
   10860:	2000      	movs	r0, #0
   10862:	496b      	ldr	r1, [pc, #428]	; (10a10 <_dtoa_r+0x5d0>)
   10864:	f7fb fcf0 	bl	c248 <__aeabi_dsub>
   10868:	4642      	mov	r2, r8
   1086a:	464b      	mov	r3, r9
   1086c:	f10b 0b01 	add.w	fp, fp, #1
   10870:	f7fb ff02 	bl	c678 <__aeabi_dcmplt>
   10874:	4605      	mov	r5, r0
   10876:	2200      	movs	r2, #0
   10878:	4b68      	ldr	r3, [pc, #416]	; (10a1c <_dtoa_r+0x5dc>)
   1087a:	4640      	mov	r0, r8
   1087c:	4649      	mov	r1, r9
   1087e:	2d00      	cmp	r5, #0
   10880:	d0c7      	beq.n	10812 <_dtoa_r+0x3d2>
   10882:	4625      	mov	r5, r4
   10884:	9909      	ldr	r1, [sp, #36]	; 0x24
   10886:	ee19 aa10 	vmov	sl, s18
   1088a:	ee18 4a10 	vmov	r4, s16
   1088e:	e002      	b.n	10896 <_dtoa_r+0x456>
   10890:	428d      	cmp	r5, r1
   10892:	f000 849c 	beq.w	111ce <_dtoa_r+0xd8e>
   10896:	462a      	mov	r2, r5
   10898:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   1089c:	2b39      	cmp	r3, #57	; 0x39
   1089e:	d0f7      	beq.n	10890 <_dtoa_r+0x450>
   108a0:	3301      	adds	r3, #1
   108a2:	9109      	str	r1, [sp, #36]	; 0x24
   108a4:	b2db      	uxtb	r3, r3
   108a6:	702b      	strb	r3, [r5, #0]
   108a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   108aa:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   108ae:	3301      	adds	r3, #1
   108b0:	9209      	str	r2, [sp, #36]	; 0x24
   108b2:	9306      	str	r3, [sp, #24]
   108b4:	e092      	b.n	109dc <_dtoa_r+0x59c>
   108b6:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   108ba:	ee19 aa10 	vmov	sl, s18
   108be:	ee18 4a10 	vmov	r4, s16
   108c2:	9a06      	ldr	r2, [sp, #24]
   108c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   108c6:	2a0e      	cmp	r2, #14
   108c8:	dc02      	bgt.n	108d0 <_dtoa_r+0x490>
   108ca:	2b00      	cmp	r3, #0
   108cc:	f280 81e4 	bge.w	10c98 <_dtoa_r+0x858>
   108d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   108d2:	2a00      	cmp	r2, #0
   108d4:	f000 80a8 	beq.w	10a28 <_dtoa_r+0x5e8>
   108d8:	9a01      	ldr	r2, [sp, #4]
   108da:	2a01      	cmp	r2, #1
   108dc:	f340 83ce 	ble.w	1107c <_dtoa_r+0xc3c>
   108e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   108e2:	1e5f      	subs	r7, r3, #1
   108e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   108e6:	42bb      	cmp	r3, r7
   108e8:	f280 837a 	bge.w	10fe0 <_dtoa_r+0xba0>
   108ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   108ee:	970e      	str	r7, [sp, #56]	; 0x38
   108f0:	1afb      	subs	r3, r7, r3
   108f2:	2700      	movs	r7, #0
   108f4:	449b      	add	fp, r3
   108f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   108f8:	2b00      	cmp	r3, #0
   108fa:	f2c0 8463 	blt.w	111c4 <_dtoa_r+0xd84>
   108fe:	9a08      	ldr	r2, [sp, #32]
   10900:	4611      	mov	r1, r2
   10902:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10904:	4419      	add	r1, r3
   10906:	4616      	mov	r6, r2
   10908:	441a      	add	r2, r3
   1090a:	9108      	str	r1, [sp, #32]
   1090c:	920c      	str	r2, [sp, #48]	; 0x30
   1090e:	2101      	movs	r1, #1
   10910:	4620      	mov	r0, r4
   10912:	f01a fad5 	bl	2aec0 <__i2b>
   10916:	4605      	mov	r5, r0
   10918:	e089      	b.n	10a2e <_dtoa_r+0x5ee>
   1091a:	2301      	movs	r3, #1
   1091c:	eba8 0505 	sub.w	r5, r8, r5
   10920:	930f      	str	r3, [sp, #60]	; 0x3c
   10922:	1e6b      	subs	r3, r5, #1
   10924:	9308      	str	r3, [sp, #32]
   10926:	f57f ae38 	bpl.w	1059a <_dtoa_r+0x15a>
   1092a:	f1c5 0301 	rsb	r3, r5, #1
   1092e:	930c      	str	r3, [sp, #48]	; 0x30
   10930:	2300      	movs	r3, #0
   10932:	9308      	str	r3, [sp, #32]
   10934:	e633      	b.n	1059e <_dtoa_r+0x15e>
   10936:	4658      	mov	r0, fp
   10938:	f7fb fdd4 	bl	c4e4 <__aeabi_i2d>
   1093c:	4632      	mov	r2, r6
   1093e:	463b      	mov	r3, r7
   10940:	f7fb fe90 	bl	c664 <__aeabi_dcmpeq>
   10944:	2800      	cmp	r0, #0
   10946:	f47f ae0e 	bne.w	10566 <_dtoa_r+0x126>
   1094a:	f10b 3bff 	add.w	fp, fp, #4294967295
   1094e:	e60a      	b.n	10566 <_dtoa_r+0x126>
   10950:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 10a24 <_dtoa_r+0x5e4>
   10954:	4648      	mov	r0, r9
   10956:	b019      	add	sp, #100	; 0x64
   10958:	ecbd 8b04 	vpop	{d8-d9}
   1095c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10960:	f1c0 0020 	rsb	r0, r0, #32
   10964:	fa06 f000 	lsl.w	r0, r6, r0
   10968:	e5ca      	b.n	10500 <_dtoa_r+0xc0>
   1096a:	2501      	movs	r5, #1
   1096c:	e62e      	b.n	105cc <_dtoa_r+0x18c>
   1096e:	4640      	mov	r0, r8
   10970:	f7fb fdb8 	bl	c4e4 <__aeabi_i2d>
   10974:	4632      	mov	r2, r6
   10976:	463b      	mov	r3, r7
   10978:	f7fc fa3c 	bl	cdf4 <__aeabi_dmul>
   1097c:	2200      	movs	r2, #0
   1097e:	4b25      	ldr	r3, [pc, #148]	; (10a14 <_dtoa_r+0x5d4>)
   10980:	f7fb fc64 	bl	c24c <__adddf3>
   10984:	4680      	mov	r8, r0
   10986:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   1098a:	4630      	mov	r0, r6
   1098c:	4639      	mov	r1, r7
   1098e:	2200      	movs	r2, #0
   10990:	4b23      	ldr	r3, [pc, #140]	; (10a20 <_dtoa_r+0x5e0>)
   10992:	f7fb fc59 	bl	c248 <__aeabi_dsub>
   10996:	4642      	mov	r2, r8
   10998:	464b      	mov	r3, r9
   1099a:	4606      	mov	r6, r0
   1099c:	460f      	mov	r7, r1
   1099e:	f7fb fe89 	bl	c6b4 <__aeabi_dcmpgt>
   109a2:	2800      	cmp	r0, #0
   109a4:	f040 8335 	bne.w	11012 <_dtoa_r+0xbd2>
   109a8:	4630      	mov	r0, r6
   109aa:	4639      	mov	r1, r7
   109ac:	4642      	mov	r2, r8
   109ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   109b2:	f7fb fe61 	bl	c678 <__aeabi_dcmplt>
   109b6:	2800      	cmp	r0, #0
   109b8:	d083      	beq.n	108c2 <_dtoa_r+0x482>
   109ba:	2700      	movs	r7, #0
   109bc:	463d      	mov	r5, r7
   109be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   109c0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   109c4:	43de      	mvns	r6, r3
   109c6:	4639      	mov	r1, r7
   109c8:	4620      	mov	r0, r4
   109ca:	f01a f98b 	bl	2ace4 <_Bfree>
   109ce:	1c73      	adds	r3, r6, #1
   109d0:	9306      	str	r3, [sp, #24]
   109d2:	b11d      	cbz	r5, 109dc <_dtoa_r+0x59c>
   109d4:	4629      	mov	r1, r5
   109d6:	4620      	mov	r0, r4
   109d8:	f01a f984 	bl	2ace4 <_Bfree>
   109dc:	4651      	mov	r1, sl
   109de:	4620      	mov	r0, r4
   109e0:	f01a f980 	bl	2ace4 <_Bfree>
   109e4:	2300      	movs	r3, #0
   109e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   109e8:	7013      	strb	r3, [r2, #0]
   109ea:	9b07      	ldr	r3, [sp, #28]
   109ec:	4619      	mov	r1, r3
   109ee:	9b06      	ldr	r3, [sp, #24]
   109f0:	600b      	str	r3, [r1, #0]
   109f2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   109f4:	2b00      	cmp	r3, #0
   109f6:	f43f ad5f 	beq.w	104b8 <_dtoa_r+0x78>
   109fa:	4648      	mov	r0, r9
   109fc:	601a      	str	r2, [r3, #0]
   109fe:	b019      	add	sp, #100	; 0x64
   10a00:	ecbd 8b04 	vpop	{d8-d9}
   10a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a08:	0002edd8 	.word	0x0002edd8
   10a0c:	0002edb0 	.word	0x0002edb0
   10a10:	3ff00000 	.word	0x3ff00000
   10a14:	401c0000 	.word	0x401c0000
   10a18:	3fe00000 	.word	0x3fe00000
   10a1c:	40240000 	.word	0x40240000
   10a20:	40140000 	.word	0x40140000
   10a24:	0002f754 	.word	0x0002f754
   10a28:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   10a2a:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
   10a2e:	2e00      	cmp	r6, #0
   10a30:	dd0c      	ble.n	10a4c <_dtoa_r+0x60c>
   10a32:	9a08      	ldr	r2, [sp, #32]
   10a34:	2a00      	cmp	r2, #0
   10a36:	dd09      	ble.n	10a4c <_dtoa_r+0x60c>
   10a38:	42b2      	cmp	r2, r6
   10a3a:	4613      	mov	r3, r2
   10a3c:	990c      	ldr	r1, [sp, #48]	; 0x30
   10a3e:	bfa8      	it	ge
   10a40:	4633      	movge	r3, r6
   10a42:	1ac9      	subs	r1, r1, r3
   10a44:	1af6      	subs	r6, r6, r3
   10a46:	1ad3      	subs	r3, r2, r3
   10a48:	910c      	str	r1, [sp, #48]	; 0x30
   10a4a:	9308      	str	r3, [sp, #32]
   10a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10a4e:	b143      	cbz	r3, 10a62 <_dtoa_r+0x622>
   10a50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10a52:	2b00      	cmp	r3, #0
   10a54:	d061      	beq.n	10b1a <_dtoa_r+0x6da>
   10a56:	2f00      	cmp	r7, #0
   10a58:	f300 82b0 	bgt.w	10fbc <_dtoa_r+0xb7c>
   10a5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10a5e:	1bda      	subs	r2, r3, r7
   10a60:	d15c      	bne.n	10b1c <_dtoa_r+0x6dc>
   10a62:	2101      	movs	r1, #1
   10a64:	4620      	mov	r0, r4
   10a66:	f01a fa2b 	bl	2aec0 <__i2b>
   10a6a:	f1bb 0f00 	cmp.w	fp, #0
   10a6e:	4607      	mov	r7, r0
   10a70:	f300 8138 	bgt.w	10ce4 <_dtoa_r+0x8a4>
   10a74:	9b01      	ldr	r3, [sp, #4]
   10a76:	2b01      	cmp	r3, #1
   10a78:	f340 82ce 	ble.w	11018 <_dtoa_r+0xbd8>
   10a7c:	f04f 0800 	mov.w	r8, #0
   10a80:	f1bb 0f00 	cmp.w	fp, #0
   10a84:	f040 813a 	bne.w	10cfc <_dtoa_r+0x8bc>
   10a88:	2301      	movs	r3, #1
   10a8a:	9908      	ldr	r1, [sp, #32]
   10a8c:	440b      	add	r3, r1
   10a8e:	f013 031f 	ands.w	r3, r3, #31
   10a92:	d049      	beq.n	10b28 <_dtoa_r+0x6e8>
   10a94:	f1c3 0220 	rsb	r2, r3, #32
   10a98:	2a04      	cmp	r2, #4
   10a9a:	f340 8458 	ble.w	1134e <_dtoa_r+0xf0e>
   10a9e:	f1c3 031c 	rsb	r3, r3, #28
   10aa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10aa4:	4419      	add	r1, r3
   10aa6:	441a      	add	r2, r3
   10aa8:	441e      	add	r6, r3
   10aaa:	920c      	str	r2, [sp, #48]	; 0x30
   10aac:	9108      	str	r1, [sp, #32]
   10aae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10ab0:	2b00      	cmp	r3, #0
   10ab2:	dd05      	ble.n	10ac0 <_dtoa_r+0x680>
   10ab4:	4651      	mov	r1, sl
   10ab6:	461a      	mov	r2, r3
   10ab8:	4620      	mov	r0, r4
   10aba:	f01a fafd 	bl	2b0b8 <__lshift>
   10abe:	4682      	mov	sl, r0
   10ac0:	9b08      	ldr	r3, [sp, #32]
   10ac2:	2b00      	cmp	r3, #0
   10ac4:	dd05      	ble.n	10ad2 <_dtoa_r+0x692>
   10ac6:	4639      	mov	r1, r7
   10ac8:	461a      	mov	r2, r3
   10aca:	4620      	mov	r0, r4
   10acc:	f01a faf4 	bl	2b0b8 <__lshift>
   10ad0:	4607      	mov	r7, r0
   10ad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10ad4:	2b00      	cmp	r3, #0
   10ad6:	f040 811a 	bne.w	10d0e <_dtoa_r+0x8ce>
   10ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10adc:	2b00      	cmp	r3, #0
   10ade:	dc2c      	bgt.n	10b3a <_dtoa_r+0x6fa>
   10ae0:	9b01      	ldr	r3, [sp, #4]
   10ae2:	2b02      	cmp	r3, #2
   10ae4:	dd29      	ble.n	10b3a <_dtoa_r+0x6fa>
   10ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10ae8:	2b00      	cmp	r3, #0
   10aea:	f47f af68 	bne.w	109be <_dtoa_r+0x57e>
   10aee:	4639      	mov	r1, r7
   10af0:	2205      	movs	r2, #5
   10af2:	4620      	mov	r0, r4
   10af4:	f01a f900 	bl	2acf8 <__multadd>
   10af8:	4607      	mov	r7, r0
   10afa:	4650      	mov	r0, sl
   10afc:	4639      	mov	r1, r7
   10afe:	f01a fb43 	bl	2b188 <__mcmp>
   10b02:	2800      	cmp	r0, #0
   10b04:	f77f af5b 	ble.w	109be <_dtoa_r+0x57e>
   10b08:	9809      	ldr	r0, [sp, #36]	; 0x24
   10b0a:	2331      	movs	r3, #49	; 0x31
   10b0c:	9e06      	ldr	r6, [sp, #24]
   10b0e:	4681      	mov	r9, r0
   10b10:	f800 3b01 	strb.w	r3, [r0], #1
   10b14:	3601      	adds	r6, #1
   10b16:	9009      	str	r0, [sp, #36]	; 0x24
   10b18:	e755      	b.n	109c6 <_dtoa_r+0x586>
   10b1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10b1c:	4651      	mov	r1, sl
   10b1e:	4620      	mov	r0, r4
   10b20:	f01a fa7a 	bl	2b018 <__pow5mult>
   10b24:	4682      	mov	sl, r0
   10b26:	e79c      	b.n	10a62 <_dtoa_r+0x622>
   10b28:	231c      	movs	r3, #28
   10b2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10b2c:	441e      	add	r6, r3
   10b2e:	441a      	add	r2, r3
   10b30:	920c      	str	r2, [sp, #48]	; 0x30
   10b32:	9a08      	ldr	r2, [sp, #32]
   10b34:	441a      	add	r2, r3
   10b36:	9208      	str	r2, [sp, #32]
   10b38:	e7b9      	b.n	10aae <_dtoa_r+0x66e>
   10b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10b3c:	2b00      	cmp	r3, #0
   10b3e:	f000 81b8 	beq.w	10eb2 <_dtoa_r+0xa72>
   10b42:	9b06      	ldr	r3, [sp, #24]
   10b44:	3301      	adds	r3, #1
   10b46:	9306      	str	r3, [sp, #24]
   10b48:	2e00      	cmp	r6, #0
   10b4a:	f300 824b 	bgt.w	10fe4 <_dtoa_r+0xba4>
   10b4e:	f1b8 0f00 	cmp.w	r8, #0
   10b52:	f040 8374 	bne.w	1123e <_dtoa_r+0xdfe>
   10b56:	46a9      	mov	r9, r5
   10b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10b5a:	9904      	ldr	r1, [sp, #16]
   10b5c:	1e53      	subs	r3, r2, #1
   10b5e:	4690      	mov	r8, r2
   10b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10b62:	f001 0101 	and.w	r1, r1, #1
   10b66:	441a      	add	r2, r3
   10b68:	9104      	str	r1, [sp, #16]
   10b6a:	920a      	str	r2, [sp, #40]	; 0x28
   10b6c:	4639      	mov	r1, r7
   10b6e:	4650      	mov	r0, sl
   10b70:	f018 fe0a 	bl	29788 <quorem>
   10b74:	4629      	mov	r1, r5
   10b76:	4683      	mov	fp, r0
   10b78:	4650      	mov	r0, sl
   10b7a:	f01a fb05 	bl	2b188 <__mcmp>
   10b7e:	4639      	mov	r1, r7
   10b80:	4606      	mov	r6, r0
   10b82:	464a      	mov	r2, r9
   10b84:	4620      	mov	r0, r4
   10b86:	f01a fb1d 	bl	2b1c4 <__mdiff>
   10b8a:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   10b8e:	4601      	mov	r1, r0
   10b90:	9302      	str	r3, [sp, #8]
   10b92:	68c3      	ldr	r3, [r0, #12]
   10b94:	2b00      	cmp	r3, #0
   10b96:	f040 822c 	bne.w	10ff2 <_dtoa_r+0xbb2>
   10b9a:	9008      	str	r0, [sp, #32]
   10b9c:	4650      	mov	r0, sl
   10b9e:	f01a faf3 	bl	2b188 <__mcmp>
   10ba2:	4603      	mov	r3, r0
   10ba4:	9908      	ldr	r1, [sp, #32]
   10ba6:	4620      	mov	r0, r4
   10ba8:	9308      	str	r3, [sp, #32]
   10baa:	f01a f89b 	bl	2ace4 <_Bfree>
   10bae:	9b01      	ldr	r3, [sp, #4]
   10bb0:	9904      	ldr	r1, [sp, #16]
   10bb2:	461a      	mov	r2, r3
   10bb4:	9b08      	ldr	r3, [sp, #32]
   10bb6:	431a      	orrs	r2, r3
   10bb8:	430a      	orrs	r2, r1
   10bba:	f000 8396 	beq.w	112ea <_dtoa_r+0xeaa>
   10bbe:	2e00      	cmp	r6, #0
   10bc0:	f2c0 8313 	blt.w	111ea <_dtoa_r+0xdaa>
   10bc4:	9a01      	ldr	r2, [sp, #4]
   10bc6:	4316      	orrs	r6, r2
   10bc8:	9a04      	ldr	r2, [sp, #16]
   10bca:	4332      	orrs	r2, r6
   10bcc:	f000 830d 	beq.w	111ea <_dtoa_r+0xdaa>
   10bd0:	2b00      	cmp	r3, #0
   10bd2:	f300 836a 	bgt.w	112aa <_dtoa_r+0xe6a>
   10bd6:	9b02      	ldr	r3, [sp, #8]
   10bd8:	f108 0601 	add.w	r6, r8, #1
   10bdc:	f888 3000 	strb.w	r3, [r8]
   10be0:	46b3      	mov	fp, r6
   10be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10be4:	4543      	cmp	r3, r8
   10be6:	f000 836a 	beq.w	112be <_dtoa_r+0xe7e>
   10bea:	4651      	mov	r1, sl
   10bec:	2300      	movs	r3, #0
   10bee:	220a      	movs	r2, #10
   10bf0:	4620      	mov	r0, r4
   10bf2:	f01a f881 	bl	2acf8 <__multadd>
   10bf6:	454d      	cmp	r5, r9
   10bf8:	4682      	mov	sl, r0
   10bfa:	4629      	mov	r1, r5
   10bfc:	f04f 0300 	mov.w	r3, #0
   10c00:	f04f 020a 	mov.w	r2, #10
   10c04:	4620      	mov	r0, r4
   10c06:	f000 81f9 	beq.w	10ffc <_dtoa_r+0xbbc>
   10c0a:	f01a f875 	bl	2acf8 <__multadd>
   10c0e:	4649      	mov	r1, r9
   10c10:	4605      	mov	r5, r0
   10c12:	2300      	movs	r3, #0
   10c14:	220a      	movs	r2, #10
   10c16:	4620      	mov	r0, r4
   10c18:	f01a f86e 	bl	2acf8 <__multadd>
   10c1c:	46b0      	mov	r8, r6
   10c1e:	4681      	mov	r9, r0
   10c20:	e7a4      	b.n	10b6c <_dtoa_r+0x72c>
   10c22:	f000 81ad 	beq.w	10f80 <_dtoa_r+0xb40>
   10c26:	9b06      	ldr	r3, [sp, #24]
   10c28:	f1c3 0900 	rsb	r9, r3, #0
   10c2c:	4bbe      	ldr	r3, [pc, #760]	; (10f28 <_dtoa_r+0xae8>)
   10c2e:	f009 020f 	and.w	r2, r9, #15
   10c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c3e:	f7fc f8d9 	bl	cdf4 <__aeabi_dmul>
   10c42:	ea5f 1929 	movs.w	r9, r9, asr #4
   10c46:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   10c4a:	f000 836f 	beq.w	1132c <_dtoa_r+0xeec>
   10c4e:	4ab7      	ldr	r2, [pc, #732]	; (10f2c <_dtoa_r+0xaec>)
   10c50:	2300      	movs	r3, #0
   10c52:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   10c56:	f04f 0802 	mov.w	r8, #2
   10c5a:	46ab      	mov	fp, r5
   10c5c:	4606      	mov	r6, r0
   10c5e:	460f      	mov	r7, r1
   10c60:	4615      	mov	r5, r2
   10c62:	f019 0f01 	tst.w	r9, #1
   10c66:	4630      	mov	r0, r6
   10c68:	4639      	mov	r1, r7
   10c6a:	d008      	beq.n	10c7e <_dtoa_r+0x83e>
   10c6c:	f108 0801 	add.w	r8, r8, #1
   10c70:	e9d5 2300 	ldrd	r2, r3, [r5]
   10c74:	f7fc f8be 	bl	cdf4 <__aeabi_dmul>
   10c78:	465b      	mov	r3, fp
   10c7a:	4606      	mov	r6, r0
   10c7c:	460f      	mov	r7, r1
   10c7e:	ea5f 0969 	movs.w	r9, r9, asr #1
   10c82:	f105 0508 	add.w	r5, r5, #8
   10c86:	d1ec      	bne.n	10c62 <_dtoa_r+0x822>
   10c88:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
   10c8c:	2b00      	cmp	r3, #0
   10c8e:	f47f ad5d 	bne.w	1074c <_dtoa_r+0x30c>
   10c92:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
   10c96:	e559      	b.n	1074c <_dtoa_r+0x30c>
   10c98:	4ba3      	ldr	r3, [pc, #652]	; (10f28 <_dtoa_r+0xae8>)
   10c9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10c9e:	ed93 7b00 	vldr	d7, [r3]
   10ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10ca4:	2b00      	cmp	r3, #0
   10ca6:	eeb0 8a47 	vmov.f32	s16, s14
   10caa:	eef0 8a67 	vmov.f32	s17, s15
   10cae:	f280 8211 	bge.w	110d4 <_dtoa_r+0xc94>
   10cb2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   10cb4:	2f00      	cmp	r7, #0
   10cb6:	f300 820d 	bgt.w	110d4 <_dtoa_r+0xc94>
   10cba:	2f00      	cmp	r7, #0
   10cbc:	f47f ae7d 	bne.w	109ba <_dtoa_r+0x57a>
   10cc0:	2200      	movs	r2, #0
   10cc2:	4b9b      	ldr	r3, [pc, #620]	; (10f30 <_dtoa_r+0xaf0>)
   10cc4:	ec51 0b17 	vmov	r0, r1, d7
   10cc8:	f7fc f894 	bl	cdf4 <__aeabi_dmul>
   10ccc:	4602      	mov	r2, r0
   10cce:	460b      	mov	r3, r1
   10cd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10cd4:	f7fb fcda 	bl	c68c <__aeabi_dcmple>
   10cd8:	2800      	cmp	r0, #0
   10cda:	f000 819b 	beq.w	11014 <_dtoa_r+0xbd4>
   10cde:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   10ce0:	463d      	mov	r5, r7
   10ce2:	e66c      	b.n	109be <_dtoa_r+0x57e>
   10ce4:	4601      	mov	r1, r0
   10ce6:	465a      	mov	r2, fp
   10ce8:	4620      	mov	r0, r4
   10cea:	f01a f995 	bl	2b018 <__pow5mult>
   10cee:	9b01      	ldr	r3, [sp, #4]
   10cf0:	4607      	mov	r7, r0
   10cf2:	2b01      	cmp	r3, #1
   10cf4:	f340 814a 	ble.w	10f8c <_dtoa_r+0xb4c>
   10cf8:	f04f 0800 	mov.w	r8, #0
   10cfc:	693b      	ldr	r3, [r7, #16]
   10cfe:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   10d02:	6918      	ldr	r0, [r3, #16]
   10d04:	f01a f88a 	bl	2ae1c <__hi0bits>
   10d08:	f1c0 0320 	rsb	r3, r0, #32
   10d0c:	e6bd      	b.n	10a8a <_dtoa_r+0x64a>
   10d0e:	4639      	mov	r1, r7
   10d10:	4650      	mov	r0, sl
   10d12:	f01a fa39 	bl	2b188 <__mcmp>
   10d16:	2800      	cmp	r0, #0
   10d18:	f6bf aedf 	bge.w	10ada <_dtoa_r+0x69a>
   10d1c:	4651      	mov	r1, sl
   10d1e:	2300      	movs	r3, #0
   10d20:	220a      	movs	r2, #10
   10d22:	4620      	mov	r0, r4
   10d24:	f019 ffe8 	bl	2acf8 <__multadd>
   10d28:	9b06      	ldr	r3, [sp, #24]
   10d2a:	4682      	mov	sl, r0
   10d2c:	f103 39ff 	add.w	r9, r3, #4294967295
   10d30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10d32:	2b00      	cmp	r3, #0
   10d34:	f040 82e2 	bne.w	112fc <_dtoa_r+0xebc>
   10d38:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10d3a:	2b00      	cmp	r3, #0
   10d3c:	f300 82db 	bgt.w	112f6 <_dtoa_r+0xeb6>
   10d40:	9b01      	ldr	r3, [sp, #4]
   10d42:	2b02      	cmp	r3, #2
   10d44:	f340 82d7 	ble.w	112f6 <_dtoa_r+0xeb6>
   10d48:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10d4a:	f8cd 9018 	str.w	r9, [sp, #24]
   10d4e:	930a      	str	r3, [sp, #40]	; 0x28
   10d50:	e6c9      	b.n	10ae6 <_dtoa_r+0x6a6>
   10d52:	ed9d 7b02 	vldr	d7, [sp, #8]
   10d56:	f04f 0802 	mov.w	r8, #2
   10d5a:	eeb0 8a47 	vmov.f32	s16, s14
   10d5e:	eef0 8a67 	vmov.f32	s17, s15
   10d62:	e4d8      	b.n	10716 <_dtoa_r+0x2d6>
   10d64:	2301      	movs	r3, #1
   10d66:	930d      	str	r3, [sp, #52]	; 0x34
   10d68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10d6a:	9a06      	ldr	r2, [sp, #24]
   10d6c:	4413      	add	r3, r2
   10d6e:	9314      	str	r3, [sp, #80]	; 0x50
   10d70:	3301      	adds	r3, #1
   10d72:	2b01      	cmp	r3, #1
   10d74:	461e      	mov	r6, r3
   10d76:	930a      	str	r3, [sp, #40]	; 0x28
   10d78:	bfb8      	it	lt
   10d7a:	2601      	movlt	r6, #1
   10d7c:	2100      	movs	r1, #0
   10d7e:	2e17      	cmp	r6, #23
   10d80:	6461      	str	r1, [r4, #68]	; 0x44
   10d82:	f340 82d6 	ble.w	11332 <_dtoa_r+0xef2>
   10d86:	2201      	movs	r2, #1
   10d88:	2304      	movs	r3, #4
   10d8a:	005b      	lsls	r3, r3, #1
   10d8c:	4611      	mov	r1, r2
   10d8e:	3201      	adds	r2, #1
   10d90:	f103 0014 	add.w	r0, r3, #20
   10d94:	42b0      	cmp	r0, r6
   10d96:	d9f8      	bls.n	10d8a <_dtoa_r+0x94a>
   10d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10d9a:	6461      	str	r1, [r4, #68]	; 0x44
   10d9c:	2b0e      	cmp	r3, #14
   10d9e:	bf8c      	ite	hi
   10da0:	2500      	movhi	r5, #0
   10da2:	f005 0501 	andls.w	r5, r5, #1
   10da6:	e492      	b.n	106ce <_dtoa_r+0x28e>
   10da8:	2301      	movs	r3, #1
   10daa:	930d      	str	r3, [sp, #52]	; 0x34
   10dac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   10dae:	2e00      	cmp	r6, #0
   10db0:	f340 812a 	ble.w	11008 <_dtoa_r+0xbc8>
   10db4:	9614      	str	r6, [sp, #80]	; 0x50
   10db6:	960a      	str	r6, [sp, #40]	; 0x28
   10db8:	e7e0      	b.n	10d7c <_dtoa_r+0x93c>
   10dba:	2300      	movs	r3, #0
   10dbc:	930d      	str	r3, [sp, #52]	; 0x34
   10dbe:	e7d3      	b.n	10d68 <_dtoa_r+0x928>
   10dc0:	2300      	movs	r3, #0
   10dc2:	930d      	str	r3, [sp, #52]	; 0x34
   10dc4:	e7f2      	b.n	10dac <_dtoa_r+0x96c>
   10dc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10dc8:	4642      	mov	r2, r8
   10dca:	4957      	ldr	r1, [pc, #348]	; (10f28 <_dtoa_r+0xae8>)
   10dcc:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10dce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   10dd2:	464b      	mov	r3, r9
   10dd4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   10dd8:	f7fc f80c 	bl	cdf4 <__aeabi_dmul>
   10ddc:	4602      	mov	r2, r0
   10dde:	460b      	mov	r3, r1
   10de0:	4630      	mov	r0, r6
   10de2:	4639      	mov	r1, r7
   10de4:	ec43 2b18 	vmov	d8, r2, r3
   10de8:	f7fb fc6e 	bl	c6c8 <__aeabi_d2iz>
   10dec:	4680      	mov	r8, r0
   10dee:	f7fb fb79 	bl	c4e4 <__aeabi_i2d>
   10df2:	460b      	mov	r3, r1
   10df4:	4602      	mov	r2, r0
   10df6:	4639      	mov	r1, r7
   10df8:	4630      	mov	r0, r6
   10dfa:	f108 0830 	add.w	r8, r8, #48	; 0x30
   10dfe:	f7fb fa23 	bl	c248 <__aeabi_dsub>
   10e02:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10e04:	4606      	mov	r6, r0
   10e06:	460f      	mov	r7, r1
   10e08:	2b01      	cmp	r3, #1
   10e0a:	f805 8b01 	strb.w	r8, [r5], #1
   10e0e:	d022      	beq.n	10e56 <_dtoa_r+0xa16>
   10e10:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10e12:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10e14:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   10e18:	4413      	add	r3, r2
   10e1a:	469b      	mov	fp, r3
   10e1c:	2200      	movs	r2, #0
   10e1e:	4b45      	ldr	r3, [pc, #276]	; (10f34 <_dtoa_r+0xaf4>)
   10e20:	4630      	mov	r0, r6
   10e22:	4639      	mov	r1, r7
   10e24:	f7fb ffe6 	bl	cdf4 <__aeabi_dmul>
   10e28:	4689      	mov	r9, r1
   10e2a:	4680      	mov	r8, r0
   10e2c:	f7fb fc4c 	bl	c6c8 <__aeabi_d2iz>
   10e30:	4607      	mov	r7, r0
   10e32:	f7fb fb57 	bl	c4e4 <__aeabi_i2d>
   10e36:	460b      	mov	r3, r1
   10e38:	4602      	mov	r2, r0
   10e3a:	4649      	mov	r1, r9
   10e3c:	4640      	mov	r0, r8
   10e3e:	f7fb fa03 	bl	c248 <__aeabi_dsub>
   10e42:	f107 0330 	add.w	r3, r7, #48	; 0x30
   10e46:	4606      	mov	r6, r0
   10e48:	460f      	mov	r7, r1
   10e4a:	f805 3b01 	strb.w	r3, [r5], #1
   10e4e:	455d      	cmp	r5, fp
   10e50:	d1e4      	bne.n	10e1c <_dtoa_r+0x9dc>
   10e52:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
   10e56:	2200      	movs	r2, #0
   10e58:	4b37      	ldr	r3, [pc, #220]	; (10f38 <_dtoa_r+0xaf8>)
   10e5a:	ee18 0a10 	vmov	r0, s16
   10e5e:	ec59 8b18 	vmov	r8, r9, d8
   10e62:	4649      	mov	r1, r9
   10e64:	f7fb f9f2 	bl	c24c <__adddf3>
   10e68:	4602      	mov	r2, r0
   10e6a:	460b      	mov	r3, r1
   10e6c:	4630      	mov	r0, r6
   10e6e:	4639      	mov	r1, r7
   10e70:	f7fb fc20 	bl	c6b4 <__aeabi_dcmpgt>
   10e74:	2800      	cmp	r0, #0
   10e76:	f040 81df 	bne.w	11238 <_dtoa_r+0xdf8>
   10e7a:	ee18 2a10 	vmov	r2, s16
   10e7e:	464b      	mov	r3, r9
   10e80:	2000      	movs	r0, #0
   10e82:	492d      	ldr	r1, [pc, #180]	; (10f38 <_dtoa_r+0xaf8>)
   10e84:	f7fb f9e0 	bl	c248 <__aeabi_dsub>
   10e88:	4602      	mov	r2, r0
   10e8a:	460b      	mov	r3, r1
   10e8c:	4630      	mov	r0, r6
   10e8e:	4639      	mov	r1, r7
   10e90:	f7fb fbf2 	bl	c678 <__aeabi_dcmplt>
   10e94:	2800      	cmp	r0, #0
   10e96:	f43f ad14 	beq.w	108c2 <_dtoa_r+0x482>
   10e9a:	462a      	mov	r2, r5
   10e9c:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   10ea0:	2b30      	cmp	r3, #48	; 0x30
   10ea2:	d0fa      	beq.n	10e9a <_dtoa_r+0xa5a>
   10ea4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10ea6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   10eaa:	3301      	adds	r3, #1
   10eac:	9209      	str	r2, [sp, #36]	; 0x24
   10eae:	9306      	str	r3, [sp, #24]
   10eb0:	e594      	b.n	109dc <_dtoa_r+0x59c>
   10eb2:	9b06      	ldr	r3, [sp, #24]
   10eb4:	3301      	adds	r3, #1
   10eb6:	9306      	str	r3, [sp, #24]
   10eb8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   10ebc:	2601      	movs	r6, #1
   10ebe:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   10ec2:	e002      	b.n	10eca <_dtoa_r+0xa8a>
   10ec4:	f019 ff18 	bl	2acf8 <__multadd>
   10ec8:	4682      	mov	sl, r0
   10eca:	4639      	mov	r1, r7
   10ecc:	4650      	mov	r0, sl
   10ece:	f018 fc5b 	bl	29788 <quorem>
   10ed2:	454e      	cmp	r6, r9
   10ed4:	f100 0c30 	add.w	ip, r0, #48	; 0x30
   10ed8:	4651      	mov	r1, sl
   10eda:	f04f 0300 	mov.w	r3, #0
   10ede:	f04f 020a 	mov.w	r2, #10
   10ee2:	4620      	mov	r0, r4
   10ee4:	f106 0601 	add.w	r6, r6, #1
   10ee8:	f808 cb01 	strb.w	ip, [r8], #1
   10eec:	dbea      	blt.n	10ec4 <_dtoa_r+0xa84>
   10eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10ef0:	2600      	movs	r6, #0
   10ef2:	f8cd c008 	str.w	ip, [sp, #8]
   10ef6:	2b00      	cmp	r3, #0
   10ef8:	bfcc      	ite	gt
   10efa:	469b      	movgt	fp, r3
   10efc:	f04f 0b01 	movle.w	fp, #1
   10f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10f02:	449b      	add	fp, r3
   10f04:	4651      	mov	r1, sl
   10f06:	2201      	movs	r2, #1
   10f08:	4620      	mov	r0, r4
   10f0a:	f01a f8d5 	bl	2b0b8 <__lshift>
   10f0e:	4639      	mov	r1, r7
   10f10:	4682      	mov	sl, r0
   10f12:	f01a f939 	bl	2b188 <__mcmp>
   10f16:	2800      	cmp	r0, #0
   10f18:	f340 813d 	ble.w	11196 <_dtoa_r+0xd56>
   10f1c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   10f20:	f10b 3bff 	add.w	fp, fp, #4294967295
   10f24:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10f26:	e00e      	b.n	10f46 <_dtoa_r+0xb06>
   10f28:	0002edd8 	.word	0x0002edd8
   10f2c:	0002edb0 	.word	0x0002edb0
   10f30:	40140000 	.word	0x40140000
   10f34:	40240000 	.word	0x40240000
   10f38:	3fe00000 	.word	0x3fe00000
   10f3c:	455a      	cmp	r2, fp
   10f3e:	f000 8135 	beq.w	111ac <_dtoa_r+0xd6c>
   10f42:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   10f46:	2b39      	cmp	r3, #57	; 0x39
   10f48:	f10b 0801 	add.w	r8, fp, #1
   10f4c:	d0f6      	beq.n	10f3c <_dtoa_r+0xafc>
   10f4e:	3301      	adds	r3, #1
   10f50:	f88b 3000 	strb.w	r3, [fp]
   10f54:	4639      	mov	r1, r7
   10f56:	4620      	mov	r0, r4
   10f58:	f019 fec4 	bl	2ace4 <_Bfree>
   10f5c:	2d00      	cmp	r5, #0
   10f5e:	f000 812c 	beq.w	111ba <_dtoa_r+0xd7a>
   10f62:	2e00      	cmp	r6, #0
   10f64:	f000 81ed 	beq.w	11342 <_dtoa_r+0xf02>
   10f68:	42ae      	cmp	r6, r5
   10f6a:	f000 81ea 	beq.w	11342 <_dtoa_r+0xf02>
   10f6e:	4631      	mov	r1, r6
   10f70:	4620      	mov	r0, r4
   10f72:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   10f76:	f019 feb5 	bl	2ace4 <_Bfree>
   10f7a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   10f7e:	e529      	b.n	109d4 <_dtoa_r+0x594>
   10f80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   10f84:	f04f 0802 	mov.w	r8, #2
   10f88:	f7ff bbe0 	b.w	1074c <_dtoa_r+0x30c>
   10f8c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   10f90:	2900      	cmp	r1, #0
   10f92:	f47f aeb1 	bne.w	10cf8 <_dtoa_r+0x8b8>
   10f96:	f3c2 0313 	ubfx	r3, r2, #0, #20
   10f9a:	2b00      	cmp	r3, #0
   10f9c:	f47f aeac 	bne.w	10cf8 <_dtoa_r+0x8b8>
   10fa0:	4bca      	ldr	r3, [pc, #808]	; (112cc <_dtoa_r+0xe8c>)
   10fa2:	4013      	ands	r3, r2
   10fa4:	2b00      	cmp	r3, #0
   10fa6:	f000 818d 	beq.w	112c4 <_dtoa_r+0xe84>
   10faa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10fac:	f04f 0801 	mov.w	r8, #1
   10fb0:	3301      	adds	r3, #1
   10fb2:	930c      	str	r3, [sp, #48]	; 0x30
   10fb4:	9b08      	ldr	r3, [sp, #32]
   10fb6:	3301      	adds	r3, #1
   10fb8:	9308      	str	r3, [sp, #32]
   10fba:	e561      	b.n	10a80 <_dtoa_r+0x640>
   10fbc:	4629      	mov	r1, r5
   10fbe:	463a      	mov	r2, r7
   10fc0:	4620      	mov	r0, r4
   10fc2:	f01a f829 	bl	2b018 <__pow5mult>
   10fc6:	4605      	mov	r5, r0
   10fc8:	4652      	mov	r2, sl
   10fca:	4620      	mov	r0, r4
   10fcc:	4629      	mov	r1, r5
   10fce:	f019 ff81 	bl	2aed4 <__multiply>
   10fd2:	4680      	mov	r8, r0
   10fd4:	4651      	mov	r1, sl
   10fd6:	4620      	mov	r0, r4
   10fd8:	46c2      	mov	sl, r8
   10fda:	f019 fe83 	bl	2ace4 <_Bfree>
   10fde:	e53d      	b.n	10a5c <_dtoa_r+0x61c>
   10fe0:	1bdf      	subs	r7, r3, r7
   10fe2:	e488      	b.n	108f6 <_dtoa_r+0x4b6>
   10fe4:	4629      	mov	r1, r5
   10fe6:	4632      	mov	r2, r6
   10fe8:	4620      	mov	r0, r4
   10fea:	f01a f865 	bl	2b0b8 <__lshift>
   10fee:	4605      	mov	r5, r0
   10ff0:	e5ad      	b.n	10b4e <_dtoa_r+0x70e>
   10ff2:	4620      	mov	r0, r4
   10ff4:	f019 fe76 	bl	2ace4 <_Bfree>
   10ff8:	2301      	movs	r3, #1
   10ffa:	e5e0      	b.n	10bbe <_dtoa_r+0x77e>
   10ffc:	f019 fe7c 	bl	2acf8 <__multadd>
   11000:	46b0      	mov	r8, r6
   11002:	4605      	mov	r5, r0
   11004:	4681      	mov	r9, r0
   11006:	e5b1      	b.n	10b6c <_dtoa_r+0x72c>
   11008:	2301      	movs	r3, #1
   1100a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   1100e:	f7ff bb5a 	b.w	106c6 <_dtoa_r+0x286>
   11012:	2700      	movs	r7, #0
   11014:	463d      	mov	r5, r7
   11016:	e577      	b.n	10b08 <_dtoa_r+0x6c8>
   11018:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1101c:	2900      	cmp	r1, #0
   1101e:	f47f ad2d 	bne.w	10a7c <_dtoa_r+0x63c>
   11022:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11026:	2b00      	cmp	r3, #0
   11028:	f47f ad28 	bne.w	10a7c <_dtoa_r+0x63c>
   1102c:	e7b8      	b.n	10fa0 <_dtoa_r+0xb60>
   1102e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11030:	2b00      	cmp	r3, #0
   11032:	f43f ac9c 	beq.w	1096e <_dtoa_r+0x52e>
   11036:	9d14      	ldr	r5, [sp, #80]	; 0x50
   11038:	2d00      	cmp	r5, #0
   1103a:	f77f ac42 	ble.w	108c2 <_dtoa_r+0x482>
   1103e:	9b06      	ldr	r3, [sp, #24]
   11040:	2200      	movs	r2, #0
   11042:	4630      	mov	r0, r6
   11044:	4639      	mov	r1, r7
   11046:	3b01      	subs	r3, #1
   11048:	9312      	str	r3, [sp, #72]	; 0x48
   1104a:	4ba1      	ldr	r3, [pc, #644]	; (112d0 <_dtoa_r+0xe90>)
   1104c:	f7fb fed2 	bl	cdf4 <__aeabi_dmul>
   11050:	4606      	mov	r6, r0
   11052:	460f      	mov	r7, r1
   11054:	f108 0001 	add.w	r0, r8, #1
   11058:	f7fb fa44 	bl	c4e4 <__aeabi_i2d>
   1105c:	4632      	mov	r2, r6
   1105e:	463b      	mov	r3, r7
   11060:	f7fb fec8 	bl	cdf4 <__aeabi_dmul>
   11064:	2200      	movs	r2, #0
   11066:	4b9b      	ldr	r3, [pc, #620]	; (112d4 <_dtoa_r+0xe94>)
   11068:	f7fb f8f0 	bl	c24c <__adddf3>
   1106c:	9511      	str	r5, [sp, #68]	; 0x44
   1106e:	4680      	mov	r8, r0
   11070:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   11074:	f7ff bb8b 	b.w	1078e <_dtoa_r+0x34e>
   11078:	900f      	str	r0, [sp, #60]	; 0x3c
   1107a:	e456      	b.n	1092a <_dtoa_r+0x4ea>
   1107c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1107e:	2a00      	cmp	r2, #0
   11080:	f000 80ac 	beq.w	111dc <_dtoa_r+0xd9c>
   11084:	990c      	ldr	r1, [sp, #48]	; 0x30
   11086:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1108a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1108c:	460e      	mov	r6, r1
   1108e:	9a08      	ldr	r2, [sp, #32]
   11090:	441a      	add	r2, r3
   11092:	9208      	str	r2, [sp, #32]
   11094:	460a      	mov	r2, r1
   11096:	441a      	add	r2, r3
   11098:	920c      	str	r2, [sp, #48]	; 0x30
   1109a:	e438      	b.n	1090e <_dtoa_r+0x4ce>
   1109c:	2100      	movs	r1, #0
   1109e:	4620      	mov	r0, r4
   110a0:	6461      	str	r1, [r4, #68]	; 0x44
   110a2:	f019 fdf9 	bl	2ac98 <_Balloc>
   110a6:	9a06      	ldr	r2, [sp, #24]
   110a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   110aa:	2a0e      	cmp	r2, #14
   110ac:	9009      	str	r0, [sp, #36]	; 0x24
   110ae:	6420      	str	r0, [r4, #64]	; 0x40
   110b0:	f300 8153 	bgt.w	1135a <_dtoa_r+0xf1a>
   110b4:	2b00      	cmp	r3, #0
   110b6:	f2c0 8150 	blt.w	1135a <_dtoa_r+0xf1a>
   110ba:	f04f 32ff 	mov.w	r2, #4294967295
   110be:	4b86      	ldr	r3, [pc, #536]	; (112d8 <_dtoa_r+0xe98>)
   110c0:	920a      	str	r2, [sp, #40]	; 0x28
   110c2:	9a06      	ldr	r2, [sp, #24]
   110c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   110c8:	ed93 7b00 	vldr	d7, [r3]
   110cc:	eeb0 8a47 	vmov.f32	s16, s14
   110d0:	eef0 8a67 	vmov.f32	s17, s15
   110d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   110d8:	ec53 2b18 	vmov	r2, r3, d8
   110dc:	4630      	mov	r0, r6
   110de:	4639      	mov	r1, r7
   110e0:	f7fb ffb2 	bl	d048 <__aeabi_ddiv>
   110e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   110e6:	f7fb faef 	bl	c6c8 <__aeabi_d2iz>
   110ea:	4681      	mov	r9, r0
   110ec:	f7fb f9fa 	bl	c4e4 <__aeabi_i2d>
   110f0:	ec53 2b18 	vmov	r2, r3, d8
   110f4:	f7fb fe7e 	bl	cdf4 <__aeabi_dmul>
   110f8:	460b      	mov	r3, r1
   110fa:	4602      	mov	r2, r0
   110fc:	4639      	mov	r1, r7
   110fe:	4630      	mov	r0, r6
   11100:	f7fb f8a2 	bl	c248 <__aeabi_dsub>
   11104:	f109 0330 	add.w	r3, r9, #48	; 0x30
   11108:	f805 3b01 	strb.w	r3, [r5], #1
   1110c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1110e:	2b01      	cmp	r3, #1
   11110:	f000 80ae 	beq.w	11270 <_dtoa_r+0xe30>
   11114:	ee09 aa10 	vmov	s18, sl
   11118:	f04f 0801 	mov.w	r8, #1
   1111c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   11120:	ee09 4a90 	vmov	s19, r4
   11124:	ec5a 9b18 	vmov	r9, sl, d8
   11128:	e017      	b.n	1115a <_dtoa_r+0xd1a>
   1112a:	f7fb ff8d 	bl	d048 <__aeabi_ddiv>
   1112e:	f7fb facb 	bl	c6c8 <__aeabi_d2iz>
   11132:	4604      	mov	r4, r0
   11134:	f7fb f9d6 	bl	c4e4 <__aeabi_i2d>
   11138:	464a      	mov	r2, r9
   1113a:	4653      	mov	r3, sl
   1113c:	f7fb fe5a 	bl	cdf4 <__aeabi_dmul>
   11140:	460b      	mov	r3, r1
   11142:	4602      	mov	r2, r0
   11144:	4639      	mov	r1, r7
   11146:	4630      	mov	r0, r6
   11148:	f7fb f87e 	bl	c248 <__aeabi_dsub>
   1114c:	f104 0330 	add.w	r3, r4, #48	; 0x30
   11150:	45d8      	cmp	r8, fp
   11152:	f805 3b01 	strb.w	r3, [r5], #1
   11156:	f000 8086 	beq.w	11266 <_dtoa_r+0xe26>
   1115a:	2200      	movs	r2, #0
   1115c:	4b5c      	ldr	r3, [pc, #368]	; (112d0 <_dtoa_r+0xe90>)
   1115e:	f7fb fe49 	bl	cdf4 <__aeabi_dmul>
   11162:	2200      	movs	r2, #0
   11164:	2300      	movs	r3, #0
   11166:	4606      	mov	r6, r0
   11168:	460f      	mov	r7, r1
   1116a:	f7fb fa7b 	bl	c664 <__aeabi_dcmpeq>
   1116e:	4604      	mov	r4, r0
   11170:	f108 0801 	add.w	r8, r8, #1
   11174:	464a      	mov	r2, r9
   11176:	4653      	mov	r3, sl
   11178:	4630      	mov	r0, r6
   1117a:	4639      	mov	r1, r7
   1117c:	2c00      	cmp	r4, #0
   1117e:	d0d4      	beq.n	1112a <_dtoa_r+0xcea>
   11180:	ee19 aa10 	vmov	sl, s18
   11184:	ee19 4a90 	vmov	r4, s19
   11188:	9b06      	ldr	r3, [sp, #24]
   1118a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   1118e:	3301      	adds	r3, #1
   11190:	9509      	str	r5, [sp, #36]	; 0x24
   11192:	9306      	str	r3, [sp, #24]
   11194:	e422      	b.n	109dc <_dtoa_r+0x59c>
   11196:	d103      	bne.n	111a0 <_dtoa_r+0xd60>
   11198:	9b02      	ldr	r3, [sp, #8]
   1119a:	07d8      	lsls	r0, r3, #31
   1119c:	f53f aebe 	bmi.w	10f1c <_dtoa_r+0xadc>
   111a0:	46d8      	mov	r8, fp
   111a2:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   111a6:	2b30      	cmp	r3, #48	; 0x30
   111a8:	d0fa      	beq.n	111a0 <_dtoa_r+0xd60>
   111aa:	e6d3      	b.n	10f54 <_dtoa_r+0xb14>
   111ac:	9a06      	ldr	r2, [sp, #24]
   111ae:	2331      	movs	r3, #49	; 0x31
   111b0:	3201      	adds	r2, #1
   111b2:	9206      	str	r2, [sp, #24]
   111b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   111b6:	7013      	strb	r3, [r2, #0]
   111b8:	e6cc      	b.n	10f54 <_dtoa_r+0xb14>
   111ba:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   111be:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   111c2:	e40b      	b.n	109dc <_dtoa_r+0x59c>
   111c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   111c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   111c8:	1a9e      	subs	r6, r3, r2
   111ca:	f7ff bba0 	b.w	1090e <_dtoa_r+0x4ce>
   111ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
   111d0:	9109      	str	r1, [sp, #36]	; 0x24
   111d2:	3301      	adds	r3, #1
   111d4:	9312      	str	r3, [sp, #72]	; 0x48
   111d6:	2331      	movs	r3, #49	; 0x31
   111d8:	f7ff bb65 	b.w	108a6 <_dtoa_r+0x466>
   111dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   111de:	990c      	ldr	r1, [sp, #48]	; 0x30
   111e0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   111e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   111e6:	460e      	mov	r6, r1
   111e8:	e751      	b.n	1108e <_dtoa_r+0xc4e>
   111ea:	2b00      	cmp	r3, #0
   111ec:	dd11      	ble.n	11212 <_dtoa_r+0xdd2>
   111ee:	4651      	mov	r1, sl
   111f0:	2201      	movs	r2, #1
   111f2:	4620      	mov	r0, r4
   111f4:	f019 ff60 	bl	2b0b8 <__lshift>
   111f8:	4639      	mov	r1, r7
   111fa:	4682      	mov	sl, r0
   111fc:	f019 ffc4 	bl	2b188 <__mcmp>
   11200:	2800      	cmp	r0, #0
   11202:	f340 808c 	ble.w	1131e <_dtoa_r+0xede>
   11206:	9b02      	ldr	r3, [sp, #8]
   11208:	2b39      	cmp	r3, #57	; 0x39
   1120a:	d067      	beq.n	112dc <_dtoa_r+0xe9c>
   1120c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   11210:	9302      	str	r3, [sp, #8]
   11212:	9b02      	ldr	r3, [sp, #8]
   11214:	462e      	mov	r6, r5
   11216:	464d      	mov	r5, r9
   11218:	f808 3b01 	strb.w	r3, [r8], #1
   1121c:	e69a      	b.n	10f54 <_dtoa_r+0xb14>
   1121e:	4625      	mov	r5, r4
   11220:	ee19 aa10 	vmov	sl, s18
   11224:	ee18 4a10 	vmov	r4, s16
   11228:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1122a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   1122e:	3301      	adds	r3, #1
   11230:	9509      	str	r5, [sp, #36]	; 0x24
   11232:	9306      	str	r3, [sp, #24]
   11234:	f7ff bbd2 	b.w	109dc <_dtoa_r+0x59c>
   11238:	9909      	ldr	r1, [sp, #36]	; 0x24
   1123a:	f7ff bb2c 	b.w	10896 <_dtoa_r+0x456>
   1123e:	6869      	ldr	r1, [r5, #4]
   11240:	4620      	mov	r0, r4
   11242:	f019 fd29 	bl	2ac98 <_Balloc>
   11246:	692b      	ldr	r3, [r5, #16]
   11248:	4606      	mov	r6, r0
   1124a:	f105 010c 	add.w	r1, r5, #12
   1124e:	3302      	adds	r3, #2
   11250:	300c      	adds	r0, #12
   11252:	009a      	lsls	r2, r3, #2
   11254:	f7fb fc7a 	bl	cb4c <memcpy>
   11258:	4631      	mov	r1, r6
   1125a:	2201      	movs	r2, #1
   1125c:	4620      	mov	r0, r4
   1125e:	f019 ff2b 	bl	2b0b8 <__lshift>
   11262:	4681      	mov	r9, r0
   11264:	e478      	b.n	10b58 <_dtoa_r+0x718>
   11266:	46a1      	mov	r9, r4
   11268:	ee19 aa10 	vmov	sl, s18
   1126c:	ee19 4a90 	vmov	r4, s19
   11270:	4602      	mov	r2, r0
   11272:	460b      	mov	r3, r1
   11274:	f7fa ffea 	bl	c24c <__adddf3>
   11278:	4606      	mov	r6, r0
   1127a:	460f      	mov	r7, r1
   1127c:	ec53 2b18 	vmov	r2, r3, d8
   11280:	f7fb fa18 	bl	c6b4 <__aeabi_dcmpgt>
   11284:	b960      	cbnz	r0, 112a0 <_dtoa_r+0xe60>
   11286:	4630      	mov	r0, r6
   11288:	4639      	mov	r1, r7
   1128a:	ec53 2b18 	vmov	r2, r3, d8
   1128e:	f7fb f9e9 	bl	c664 <__aeabi_dcmpeq>
   11292:	2800      	cmp	r0, #0
   11294:	f43f af78 	beq.w	11188 <_dtoa_r+0xd48>
   11298:	f019 0f01 	tst.w	r9, #1
   1129c:	f43f af74 	beq.w	11188 <_dtoa_r+0xd48>
   112a0:	9b06      	ldr	r3, [sp, #24]
   112a2:	9909      	ldr	r1, [sp, #36]	; 0x24
   112a4:	9312      	str	r3, [sp, #72]	; 0x48
   112a6:	f7ff baf6 	b.w	10896 <_dtoa_r+0x456>
   112aa:	9b02      	ldr	r3, [sp, #8]
   112ac:	2b39      	cmp	r3, #57	; 0x39
   112ae:	d015      	beq.n	112dc <_dtoa_r+0xe9c>
   112b0:	9b02      	ldr	r3, [sp, #8]
   112b2:	462e      	mov	r6, r5
   112b4:	464d      	mov	r5, r9
   112b6:	3301      	adds	r3, #1
   112b8:	f808 3b01 	strb.w	r3, [r8], #1
   112bc:	e64a      	b.n	10f54 <_dtoa_r+0xb14>
   112be:	462e      	mov	r6, r5
   112c0:	464d      	mov	r5, r9
   112c2:	e61f      	b.n	10f04 <_dtoa_r+0xac4>
   112c4:	4698      	mov	r8, r3
   112c6:	f7ff bbdb 	b.w	10a80 <_dtoa_r+0x640>
   112ca:	bf00      	nop
   112cc:	7ff00000 	.word	0x7ff00000
   112d0:	40240000 	.word	0x40240000
   112d4:	401c0000 	.word	0x401c0000
   112d8:	0002edd8 	.word	0x0002edd8
   112dc:	46c3      	mov	fp, r8
   112de:	2339      	movs	r3, #57	; 0x39
   112e0:	462e      	mov	r6, r5
   112e2:	464d      	mov	r5, r9
   112e4:	f80b 3b01 	strb.w	r3, [fp], #1
   112e8:	e61a      	b.n	10f20 <_dtoa_r+0xae0>
   112ea:	9b02      	ldr	r3, [sp, #8]
   112ec:	2b39      	cmp	r3, #57	; 0x39
   112ee:	d0f5      	beq.n	112dc <_dtoa_r+0xe9c>
   112f0:	2e00      	cmp	r6, #0
   112f2:	dc8b      	bgt.n	1120c <_dtoa_r+0xdcc>
   112f4:	e78d      	b.n	11212 <_dtoa_r+0xdd2>
   112f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   112f8:	930a      	str	r3, [sp, #40]	; 0x28
   112fa:	e5dd      	b.n	10eb8 <_dtoa_r+0xa78>
   112fc:	4629      	mov	r1, r5
   112fe:	2300      	movs	r3, #0
   11300:	220a      	movs	r2, #10
   11302:	4620      	mov	r0, r4
   11304:	f019 fcf8 	bl	2acf8 <__multadd>
   11308:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1130a:	4605      	mov	r5, r0
   1130c:	2b00      	cmp	r3, #0
   1130e:	dc03      	bgt.n	11318 <_dtoa_r+0xed8>
   11310:	9b01      	ldr	r3, [sp, #4]
   11312:	2b02      	cmp	r3, #2
   11314:	f73f ad18 	bgt.w	10d48 <_dtoa_r+0x908>
   11318:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1131a:	930a      	str	r3, [sp, #40]	; 0x28
   1131c:	e414      	b.n	10b48 <_dtoa_r+0x708>
   1131e:	f47f af78 	bne.w	11212 <_dtoa_r+0xdd2>
   11322:	9b02      	ldr	r3, [sp, #8]
   11324:	07de      	lsls	r6, r3, #31
   11326:	f57f af74 	bpl.w	11212 <_dtoa_r+0xdd2>
   1132a:	e76c      	b.n	11206 <_dtoa_r+0xdc6>
   1132c:	f04f 0802 	mov.w	r8, #2
   11330:	e4af      	b.n	10c92 <_dtoa_r+0x852>
   11332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11334:	2b0e      	cmp	r3, #14
   11336:	bf8c      	ite	hi
   11338:	2500      	movhi	r5, #0
   1133a:	f005 0501 	andls.w	r5, r5, #1
   1133e:	f7ff b9c6 	b.w	106ce <_dtoa_r+0x28e>
   11342:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   11346:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   1134a:	f7ff bb43 	b.w	109d4 <_dtoa_r+0x594>
   1134e:	f43f abae 	beq.w	10aae <_dtoa_r+0x66e>
   11352:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   11356:	f7ff bbe8 	b.w	10b2a <_dtoa_r+0x6ea>
   1135a:	f04f 32ff 	mov.w	r2, #4294967295
   1135e:	2100      	movs	r1, #0
   11360:	e9cd 210a 	strd	r2, r1, [sp, #40]	; 0x28
   11364:	2101      	movs	r1, #1
   11366:	9214      	str	r2, [sp, #80]	; 0x50
   11368:	910d      	str	r1, [sp, #52]	; 0x34
   1136a:	f7ff bab5 	b.w	108d8 <_dtoa_r+0x498>
   1136e:	bf00      	nop

00011370 <nan>:
   11370:	ed9f 0b01 	vldr	d0, [pc, #4]	; 11378 <nan+0x8>
   11374:	4770      	bx	lr
   11376:	bf00      	nop
   11378:	00000000 	.word	0x00000000
   1137c:	7ff80000 	.word	0x7ff80000

00011380 <data_publish.constprop.0>:
	uint8_t *data, size_t len)
{
	
	struct mqtt_publish_param param;

	param.message.topic.qos = qos;
   11380:	2301      	movs	r3, #1
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
   11382:	b5f0      	push	{r4, r5, r6, r7, lr}
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
   11384:	4d1e      	ldr	r5, [pc, #120]	; (11400 <data_publish.constprop.0+0x80>)
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
   11386:	b08b      	sub	sp, #44	; 0x2c
   11388:	4606      	mov	r6, r0
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
   1138a:	4628      	mov	r0, r5
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
   1138c:	460c      	mov	r4, r1
	param.message.topic.qos = qos;
   1138e:	f88d 3018 	strb.w	r3, [sp, #24]
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
   11392:	9504      	str	r5, [sp, #16]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
   11394:	f015 fa82 	bl	2689c <strlen>
	param.message.payload.data = data;
	param.message.payload.len = len;
   11398:	e9cd 6407 	strd	r6, r4, [sp, #28]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
   1139c:	9005      	str	r0, [sp, #20]
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1139e:	f003 f8a5 	bl	144ec <z_timer_cycle_get_32>
	param.message_id = k_cycle_get_32();
	param.dup_flag = 0;
   113a2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   113a6:	4c17      	ldr	r4, [pc, #92]	; (11404 <data_publish.constprop.0+0x84>)
   113a8:	f023 0303 	bic.w	r3, r3, #3
   113ac:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   113b0:	4b15      	ldr	r3, [pc, #84]	; (11408 <data_publish.constprop.0+0x88>)
	param.message_id = k_cycle_get_32();
   113b2:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
	param.retain_flag = 0;

	//("Publishing: %s", data, len);
	LOG_INF("Publishing: %s", log_strdup(data));
   113b6:	4630      	mov	r0, r6
   113b8:	1ae4      	subs	r4, r4, r3
   113ba:	f001 fe2b 	bl	13014 <log_strdup>
   113be:	08e4      	lsrs	r4, r4, #3
   113c0:	01a4      	lsls	r4, r4, #6
   113c2:	f044 0703 	orr.w	r7, r4, #3
   113c6:	4601      	mov	r1, r0
   113c8:	463a      	mov	r2, r7
   113ca:	4810      	ldr	r0, [pc, #64]	; (1140c <data_publish.constprop.0+0x8c>)
   113cc:	f01b f8cf 	bl	2c56e <log_1>
	LOG_DBG("to topic: %s len: %u",
   113d0:	4628      	mov	r0, r5
   113d2:	f001 fe1f 	bl	13014 <log_strdup>
   113d6:	9003      	str	r0, [sp, #12]
   113d8:	4628      	mov	r0, r5
   113da:	f015 fa5f 	bl	2689c <strlen>
   113de:	f044 0404 	orr.w	r4, r4, #4
   113e2:	4603      	mov	r3, r0
   113e4:	9a03      	ldr	r2, [sp, #12]
   113e6:	490a      	ldr	r1, [pc, #40]	; (11410 <data_publish.constprop.0+0x90>)
   113e8:	480a      	ldr	r0, [pc, #40]	; (11414 <data_publish.constprop.0+0x94>)
   113ea:	f8ad 4000 	strh.w	r4, [sp]
   113ee:	f01b f8ee 	bl	2c5ce <log_3>
		log_strdup(CONFIG_MQTT_PUB_TOPIC),
		(unsigned int)strlen(CONFIG_MQTT_PUB_TOPIC));

	return mqtt_publish(c, &param);
   113f2:	a904      	add	r1, sp, #16
   113f4:	4808      	ldr	r0, [pc, #32]	; (11418 <data_publish.constprop.0+0x98>)
   113f6:	f01c f88d 	bl	2d514 <mqtt_publish>
}
   113fa:	b00b      	add	sp, #44	; 0x2c
   113fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   113fe:	bf00      	nop
   11400:	0002f93c 	.word	0x0002f93c
   11404:	0002ecec 	.word	0x0002ecec
   11408:	0002ec7c 	.word	0x0002ec7c
   1140c:	0002f957 	.word	0x0002f957
   11410:	0003006d 	.word	0x0003006d
   11414:	0002f966 	.word	0x0002f966
   11418:	20021444 	.word	0x20021444

0001141c <k_work_submit_to_queue.constprop.0>:
 * @param work_q Address of workqueue.
 * @param work Address of work item.
 *
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
   1141c:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1141e:	f100 0308 	add.w	r3, r0, #8
   11422:	e8d3 2fef 	ldaex	r2, [r3]
   11426:	f042 0001 	orr.w	r0, r2, #1
   1142a:	e8c3 0fec 	stlex	ip, r0, [r3]
   1142e:	f1bc 0f00 	cmp.w	ip, #0
   11432:	d1f6      	bne.n	11422 <k_work_submit_to_queue.constprop.0+0x6>
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   11434:	07d3      	lsls	r3, r2, #31
   11436:	d402      	bmi.n	1143e <k_work_submit_to_queue.constprop.0+0x22>
		k_queue_append(&work_q->queue, work);
   11438:	4801      	ldr	r0, [pc, #4]	; (11440 <k_work_submit_to_queue.constprop.0+0x24>)
   1143a:	f01d b903 	b.w	2e644 <k_queue_append>
	}
}
   1143e:	4770      	bx	lr
   11440:	20020cd8 	.word	0x20020cd8

00011444 <button_handler>:
*  Can be used to simulate alarm events.
*/

static void button_handler(uint32_t button_states, uint32_t has_changed)
{
	if (has_changed & button_states & DK_BTN1_MSK) {
   11444:	4008      	ands	r0, r1
{
   11446:	b508      	push	{r3, lr}
	if (has_changed & button_states & DK_BTN1_MSK) {
   11448:	07c3      	lsls	r3, r0, #31
   1144a:	d50f      	bpl.n	1146c <button_handler+0x28>
   1144c:	4b08      	ldr	r3, [pc, #32]	; (11470 <button_handler+0x2c>)
   1144e:	4a09      	ldr	r2, [pc, #36]	; (11474 <button_handler+0x30>)
		LOG_DBG("DEV_DBG: button 1 pressed");
   11450:	4809      	ldr	r0, [pc, #36]	; (11478 <button_handler+0x34>)
   11452:	1ad2      	subs	r2, r2, r3
   11454:	08d2      	lsrs	r2, r2, #3
   11456:	0192      	lsls	r2, r2, #6
   11458:	4908      	ldr	r1, [pc, #32]	; (1147c <button_handler+0x38>)
   1145a:	f042 0204 	orr.w	r2, r2, #4
   1145e:	f01b f886 	bl	2c56e <log_1>
	else if (has_changed & button_states & DK_BTN2_MSK) {
	
	}

	return;
}
   11462:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit_to_queue(&app_work_q, &alarm_work);
   11466:	4806      	ldr	r0, [pc, #24]	; (11480 <button_handler+0x3c>)
   11468:	f7ff bfd8 	b.w	1141c <k_work_submit_to_queue.constprop.0>
}
   1146c:	bd08      	pop	{r3, pc}
   1146e:	bf00      	nop
   11470:	0002ec7c 	.word	0x0002ec7c
   11474:	0002ecec 	.word	0x0002ecec
   11478:	0002f97f 	.word	0x0002f97f
   1147c:	0003008b 	.word	0x0003008b
   11480:	20021438 	.word	0x20021438

00011484 <app_timer_handler>:
	}
}

/* @brief triggers every minute. Publish work if one period has passed */ 
void app_timer_handler(struct k_timer *dummy)
{
   11484:	b510      	push	{r4, lr}
	static uint32_t minutes;

	minutes++;
   11486:	4c0a      	ldr	r4, [pc, #40]	; (114b0 <app_timer_handler+0x2c>)
   11488:	490a      	ldr	r1, [pc, #40]	; (114b4 <app_timer_handler+0x30>)
   1148a:	6822      	ldr	r2, [r4, #0]
   1148c:	3201      	adds	r2, #1
   1148e:	6022      	str	r2, [r4, #0]
   11490:	434a      	muls	r2, r1
	/* This shall match the PSM interval*/
	if (minutes % TRANSMISSION_INTERVAL == 0) {
   11492:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
   11496:	d805      	bhi.n	114a4 <app_timer_handler+0x20>
		printk("Timer: fired sample interval\n");
   11498:	4807      	ldr	r0, [pc, #28]	; (114b8 <app_timer_handler+0x34>)
   1149a:	f01a fe0c 	bl	2c0b6 <printk>
		k_work_submit_to_queue(&app_work_q, &periodic_work);
   1149e:	4807      	ldr	r0, [pc, #28]	; (114bc <app_timer_handler+0x38>)
   114a0:	f7ff ffbc 	bl	1141c <k_work_submit_to_queue.constprop.0>
	}
	printk("Elapsed time: %d\n", minutes);
   114a4:	6821      	ldr	r1, [r4, #0]
   114a6:	4806      	ldr	r0, [pc, #24]	; (114c0 <app_timer_handler+0x3c>)
}
   114a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Elapsed time: %d\n", minutes);
   114ac:	f01a be03 	b.w	2c0b6 <printk>
   114b0:	200214b0 	.word	0x200214b0
   114b4:	cccccccd 	.word	0xcccccccd
   114b8:	0002f99d 	.word	0x0002f99d
   114bc:	200214b4 	.word	0x200214b4
   114c0:	0002f9bb 	.word	0x0002f9bb

000114c4 <date_time_handler>:

	k_work_init(&alarm_work, publish_alarm);
	k_work_init(&periodic_work, publish_samples);
}

void date_time_handler(const struct date_time_evt *evt) {
   114c4:	b508      	push	{r3, lr}
   114c6:	7803      	ldrb	r3, [r0, #0]
   114c8:	2b03      	cmp	r3, #3
   114ca:	d831      	bhi.n	11530 <date_time_handler+0x6c>
   114cc:	e8df f003 	tbb	[pc, r3]
   114d0:	261c1202 	.word	0x261c1202
   114d4:	4a17      	ldr	r2, [pc, #92]	; (11534 <date_time_handler+0x70>)
   114d6:	4b18      	ldr	r3, [pc, #96]	; (11538 <date_time_handler+0x74>)

	switch (evt->type)
	{
	case DATE_TIME_OBTAINED_MODEM:
		LOG_DBG("DATE_TIME: got time from modem.\n");
   114d8:	4918      	ldr	r1, [pc, #96]	; (1153c <date_time_handler+0x78>)
   114da:	1ad2      	subs	r2, r2, r3
   114dc:	08d2      	lsrs	r2, r2, #3
   114de:	0192      	lsls	r2, r2, #6
   114e0:	4817      	ldr	r0, [pc, #92]	; (11540 <date_time_handler+0x7c>)
   114e2:	f042 0204 	orr.w	r2, r2, #4
	case DATE_TIME_OBTAINED_EXT:
		LOG_DBG("DATE_TIME: got time from external.\n");
		k_sem_give(&date_time_ok);
		break;
	case DATE_TIME_NOT_OBTAINED:
		LOG_DBG("DATE_TIME: failed to get time.\n");
   114e6:	f01b f842 	bl	2c56e <log_1>
		k_sem_give(&date_time_ok);
		break;
	default:
		break;
	}
}
   114ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   114ee:	4815      	ldr	r0, [pc, #84]	; (11544 <date_time_handler+0x80>)
   114f0:	f013 b82a 	b.w	24548 <z_impl_k_sem_give>
   114f4:	4a0f      	ldr	r2, [pc, #60]	; (11534 <date_time_handler+0x70>)
   114f6:	4b10      	ldr	r3, [pc, #64]	; (11538 <date_time_handler+0x74>)
		LOG_DBG("DATE_TIME: got time from NTP.\n");
   114f8:	4910      	ldr	r1, [pc, #64]	; (1153c <date_time_handler+0x78>)
   114fa:	1ad2      	subs	r2, r2, r3
   114fc:	08d2      	lsrs	r2, r2, #3
   114fe:	0192      	lsls	r2, r2, #6
   11500:	4811      	ldr	r0, [pc, #68]	; (11548 <date_time_handler+0x84>)
   11502:	f042 0204 	orr.w	r2, r2, #4
   11506:	e7ee      	b.n	114e6 <date_time_handler+0x22>
   11508:	4a0a      	ldr	r2, [pc, #40]	; (11534 <date_time_handler+0x70>)
   1150a:	4b0b      	ldr	r3, [pc, #44]	; (11538 <date_time_handler+0x74>)
		LOG_DBG("DATE_TIME: got time from external.\n");
   1150c:	490b      	ldr	r1, [pc, #44]	; (1153c <date_time_handler+0x78>)
   1150e:	1ad2      	subs	r2, r2, r3
   11510:	08d2      	lsrs	r2, r2, #3
   11512:	0192      	lsls	r2, r2, #6
   11514:	480d      	ldr	r0, [pc, #52]	; (1154c <date_time_handler+0x88>)
   11516:	f042 0204 	orr.w	r2, r2, #4
   1151a:	e7e4      	b.n	114e6 <date_time_handler+0x22>
   1151c:	4a05      	ldr	r2, [pc, #20]	; (11534 <date_time_handler+0x70>)
   1151e:	4b06      	ldr	r3, [pc, #24]	; (11538 <date_time_handler+0x74>)
		LOG_DBG("DATE_TIME: failed to get time.\n");
   11520:	4906      	ldr	r1, [pc, #24]	; (1153c <date_time_handler+0x78>)
   11522:	1ad2      	subs	r2, r2, r3
   11524:	08d2      	lsrs	r2, r2, #3
   11526:	0192      	lsls	r2, r2, #6
   11528:	4809      	ldr	r0, [pc, #36]	; (11550 <date_time_handler+0x8c>)
   1152a:	f042 0204 	orr.w	r2, r2, #4
   1152e:	e7da      	b.n	114e6 <date_time_handler+0x22>
}
   11530:	bd08      	pop	{r3, pc}
   11532:	bf00      	nop
   11534:	0002ecec 	.word	0x0002ecec
   11538:	0002ec7c 	.word	0x0002ec7c
   1153c:	000300ca 	.word	0x000300ca
   11540:	0002f9cd 	.word	0x0002f9cd
   11544:	20020c24 	.word	0x20020c24
   11548:	0002f9f2 	.word	0x0002f9f2
   1154c:	0002fa15 	.word	0x0002fa15
   11550:	0002fa3d 	.word	0x0002fa3d

00011554 <mqtt_evt_handler>:
{
   11554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11558:	b089      	sub	sp, #36	; 0x24
   1155a:	4b76      	ldr	r3, [pc, #472]	; (11734 <mqtt_evt_handler+0x1e0>)
   1155c:	4c76      	ldr	r4, [pc, #472]	; (11738 <mqtt_evt_handler+0x1e4>)
   1155e:	4606      	mov	r6, r0
   11560:	1ae4      	subs	r4, r4, r3
   11562:	780b      	ldrb	r3, [r1, #0]
   11564:	08e4      	lsrs	r4, r4, #3
   11566:	460d      	mov	r5, r1
   11568:	af02      	add	r7, sp, #8
   1156a:	01a4      	lsls	r4, r4, #6
   1156c:	2b07      	cmp	r3, #7
   1156e:	f200 80d3 	bhi.w	11718 <mqtt_evt_handler+0x1c4>
   11572:	e8df f003 	tbb	[pc, r3]
   11576:	1f04      	.short	0x1f04
   11578:	d1d1a82e 	.word	0xd1d1a82e
   1157c:	bed1      	.short	0xbed1
		if (evt->result != 0) {
   1157e:	69c9      	ldr	r1, [r1, #28]
   11580:	b129      	cbz	r1, 1158e <mqtt_evt_handler+0x3a>
			LOG_ERR("MQTT connect failed %d", evt->result);
   11582:	486e      	ldr	r0, [pc, #440]	; (1173c <mqtt_evt_handler+0x1e8>)
   11584:	f044 0201 	orr.w	r2, r4, #1
				LOG_ERR("Could not app_disconnect: %d", err);
   11588:	f01a fff1 	bl	2c56e <log_1>
   1158c:	e00e      	b.n	115ac <mqtt_evt_handler+0x58>
   1158e:	486c      	ldr	r0, [pc, #432]	; (11740 <mqtt_evt_handler+0x1ec>)
   11590:	f012 ffda 	bl	24548 <z_impl_k_sem_give>
		LOG_INF("[%s:%d] MQTT client connected!", log_strdup(__func__), __LINE__);
   11594:	486b      	ldr	r0, [pc, #428]	; (11744 <mqtt_evt_handler+0x1f0>)
   11596:	f001 fd3d 	bl	13014 <log_strdup>
   1159a:	f044 0403 	orr.w	r4, r4, #3
   1159e:	4601      	mov	r1, r0
   115a0:	4623      	mov	r3, r4
   115a2:	f44f 7283 	mov.w	r2, #262	; 0x106
   115a6:	4868      	ldr	r0, [pc, #416]	; (11748 <mqtt_evt_handler+0x1f4>)
   115a8:	f01a fff8 	bl	2c59c <log_2>
}
   115ac:	371c      	adds	r7, #28
   115ae:	46bd      	mov	sp, r7
   115b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("[%s:%d] MQTT client disconnected %d", log_strdup(__func__),
   115b4:	4863      	ldr	r0, [pc, #396]	; (11744 <mqtt_evt_handler+0x1f0>)
   115b6:	f001 fd2d 	bl	13014 <log_strdup>
   115ba:	f44f 7286 	mov.w	r2, #268	; 0x10c
   115be:	f044 0403 	orr.w	r4, r4, #3
   115c2:	f8ad 4000 	strh.w	r4, [sp]
   115c6:	4601      	mov	r1, r0
   115c8:	69eb      	ldr	r3, [r5, #28]
   115ca:	4860      	ldr	r0, [pc, #384]	; (1174c <mqtt_evt_handler+0x1f8>)
		LOG_INF("[%s:%d] default: %d", log_strdup(__func__), __LINE__,
   115cc:	f01a ffff 	bl	2c5ce <log_3>
}
   115d0:	e7ec      	b.n	115ac <mqtt_evt_handler+0x58>
		LOG_INF("[%s:%d] MQTT PUBLISH result=%d len=%d", log_strdup(__func__),
   115d2:	485c      	ldr	r0, [pc, #368]	; (11744 <mqtt_evt_handler+0x1f0>)
   115d4:	f001 fd1e 	bl	13014 <log_strdup>
   115d8:	f44f 738a 	mov.w	r3, #276	; 0x114
   115dc:	60fb      	str	r3, [r7, #12]
   115de:	69eb      	ldr	r3, [r5, #28]
   115e0:	f044 0803 	orr.w	r8, r4, #3
   115e4:	613b      	str	r3, [r7, #16]
   115e6:	696b      	ldr	r3, [r5, #20]
   115e8:	2204      	movs	r2, #4
   115ea:	60b8      	str	r0, [r7, #8]
   115ec:	617b      	str	r3, [r7, #20]
   115ee:	4858      	ldr	r0, [pc, #352]	; (11750 <mqtt_evt_handler+0x1fc>)
   115f0:	4643      	mov	r3, r8
   115f2:	f107 0108 	add.w	r1, r7, #8
   115f6:	f01b f809 	bl	2c60c <log_n>
		err = publish_get_payload(c, p->message.payload.len);
   115fa:	696a      	ldr	r2, [r5, #20]
	uint8_t *end = buf + length;
   115fc:	4b55      	ldr	r3, [pc, #340]	; (11754 <mqtt_evt_handler+0x200>)
	if (length > sizeof(payload_buf)) {
   115fe:	2a80      	cmp	r2, #128	; 0x80
	uint8_t *end = buf + length;
   11600:	eb03 0802 	add.w	r8, r3, r2
	if (length > sizeof(payload_buf)) {
   11604:	d85c      	bhi.n	116c0 <mqtt_evt_handler+0x16c>
	uint8_t *buf = payload_buf;
   11606:	469a      	mov	sl, r3
			LOG_ERR("mqtt_read_publish_payload: EAGAIN");
   11608:	f8df 917c 	ldr.w	r9, [pc, #380]	; 11788 <mqtt_evt_handler+0x234>
	return z_impl_zsock_poll(fds, nfds, timeout);
   1160c:	f8df b17c 	ldr.w	fp, [pc, #380]	; 1178c <mqtt_evt_handler+0x238>
	while (buf < end) {
   11610:	45d0      	cmp	r8, sl
   11612:	d820      	bhi.n	11656 <mqtt_evt_handler+0x102>
			data_print("Received: ", payload_buf,
   11614:	696e      	ldr	r6, [r5, #20]
{
   11616:	46e8      	mov	r8, sp
	char buf[len + 1];
   11618:	f106 0308 	add.w	r3, r6, #8
   1161c:	f023 0307 	bic.w	r3, r3, #7
   11620:	ebad 0d03 	sub.w	sp, sp, r3
   11624:	ad02      	add	r5, sp, #8
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11626:	4632      	mov	r2, r6
   11628:	494a      	ldr	r1, [pc, #296]	; (11754 <mqtt_evt_handler+0x200>)
   1162a:	4628      	mov	r0, r5
   1162c:	f7fb fa8e 	bl	cb4c <memcpy>
	buf[len] = 0;
   11630:	2300      	movs	r3, #0
	LOG_INF("%s%s", log_strdup(prefix), log_strdup(buf));
   11632:	4849      	ldr	r0, [pc, #292]	; (11758 <mqtt_evt_handler+0x204>)
	buf[len] = 0;
   11634:	55ab      	strb	r3, [r5, r6]
	LOG_INF("%s%s", log_strdup(prefix), log_strdup(buf));
   11636:	f001 fced 	bl	13014 <log_strdup>
   1163a:	6078      	str	r0, [r7, #4]
   1163c:	4628      	mov	r0, r5
   1163e:	f001 fce9 	bl	13014 <log_strdup>
   11642:	f044 0403 	orr.w	r4, r4, #3
   11646:	4602      	mov	r2, r0
   11648:	4623      	mov	r3, r4
   1164a:	6879      	ldr	r1, [r7, #4]
   1164c:	4843      	ldr	r0, [pc, #268]	; (1175c <mqtt_evt_handler+0x208>)
   1164e:	f01a ffa5 	bl	2c59c <log_2>
   11652:	46c5      	mov	sp, r8
}
   11654:	e7aa      	b.n	115ac <mqtt_evt_handler+0x58>
		int ret = mqtt_read_publish_payload(c, buf, end - buf);
   11656:	4651      	mov	r1, sl
   11658:	4630      	mov	r0, r6
   1165a:	eba8 020a 	sub.w	r2, r8, sl
   1165e:	f01c f865 	bl	2d72c <mqtt_read_publish_payload>
		if (ret < 0) {
   11662:	1e01      	subs	r1, r0, #0
   11664:	da29      	bge.n	116ba <mqtt_evt_handler+0x166>
			if (ret != -EAGAIN) {
   11666:	f111 0f0b 	cmn.w	r1, #11
   1166a:	d10d      	bne.n	11688 <mqtt_evt_handler+0x134>
			LOG_ERR("mqtt_read_publish_payload: EAGAIN");
   1166c:	4648      	mov	r0, r9
   1166e:	f044 0101 	orr.w	r1, r4, #1
   11672:	f01a ff6d 	bl	2c550 <log_0>
   11676:	2101      	movs	r1, #1
   11678:	465a      	mov	r2, fp
   1167a:	4839      	ldr	r0, [pc, #228]	; (11760 <mqtt_evt_handler+0x20c>)
   1167c:	f002 fa4c 	bl	13b18 <z_impl_zsock_poll>
			if (err > 0 && (fds.revents & POLLIN) == POLLIN) {
   11680:	2800      	cmp	r0, #0
   11682:	dc15      	bgt.n	116b0 <mqtt_evt_handler+0x15c>
				return -EIO;
   11684:	f06f 0104 	mvn.w	r1, #4
			LOG_ERR("mqtt_read_publish_payload: Failed! %d", err);
   11688:	f044 0501 	orr.w	r5, r4, #1
   1168c:	462a      	mov	r2, r5
   1168e:	4835      	ldr	r0, [pc, #212]	; (11764 <mqtt_evt_handler+0x210>)
   11690:	f01a ff6d 	bl	2c56e <log_1>
			LOG_INF("Disconnecting MQTT client...");
   11694:	f044 0103 	orr.w	r1, r4, #3
   11698:	4833      	ldr	r0, [pc, #204]	; (11768 <mqtt_evt_handler+0x214>)
   1169a:	f01a ff59 	bl	2c550 <log_0>
			err = mqtt_disconnect(c);
   1169e:	4630      	mov	r0, r6
   116a0:	f01b ff7d 	bl	2d59e <mqtt_disconnect>
			if (err) {
   116a4:	4601      	mov	r1, r0
   116a6:	2800      	cmp	r0, #0
   116a8:	d080      	beq.n	115ac <mqtt_evt_handler+0x58>
				LOG_ERR("Could not app_disconnect: %d", err);
   116aa:	462a      	mov	r2, r5
   116ac:	482f      	ldr	r0, [pc, #188]	; (1176c <mqtt_evt_handler+0x218>)
   116ae:	e76b      	b.n	11588 <mqtt_evt_handler+0x34>
			if (err > 0 && (fds.revents & POLLIN) == POLLIN) {
   116b0:	4b2b      	ldr	r3, [pc, #172]	; (11760 <mqtt_evt_handler+0x20c>)
   116b2:	88da      	ldrh	r2, [r3, #6]
   116b4:	07d3      	lsls	r3, r2, #31
   116b6:	d4ab      	bmi.n	11610 <mqtt_evt_handler+0xbc>
   116b8:	e7e4      	b.n	11684 <mqtt_evt_handler+0x130>
		if (ret == 0) {
   116ba:	d0e3      	beq.n	11684 <mqtt_evt_handler+0x130>
		buf += ret;
   116bc:	448a      	add	sl, r1
   116be:	e7a7      	b.n	11610 <mqtt_evt_handler+0xbc>
		return -EMSGSIZE;
   116c0:	f06f 0179 	mvn.w	r1, #121	; 0x79
   116c4:	e7e0      	b.n	11688 <mqtt_evt_handler+0x134>
		if (evt->result != 0) {
   116c6:	69c9      	ldr	r1, [r1, #28]
   116c8:	b119      	cbz	r1, 116d2 <mqtt_evt_handler+0x17e>
			LOG_ERR("MQTT PUBACK error %d", evt->result);
   116ca:	4829      	ldr	r0, [pc, #164]	; (11770 <mqtt_evt_handler+0x21c>)
   116cc:	f044 0201 	orr.w	r2, r4, #1
   116d0:	e75a      	b.n	11588 <mqtt_evt_handler+0x34>
   116d2:	4828      	ldr	r0, [pc, #160]	; (11774 <mqtt_evt_handler+0x220>)
   116d4:	f012 ff38 	bl	24548 <z_impl_k_sem_give>
		LOG_INF("[%s:%d] PUBACK packet id: %u", log_strdup(__func__), __LINE__,
   116d8:	481a      	ldr	r0, [pc, #104]	; (11744 <mqtt_evt_handler+0x1f0>)
   116da:	f001 fc9b 	bl	13014 <log_strdup>
   116de:	f044 0403 	orr.w	r4, r4, #3
   116e2:	4601      	mov	r1, r0
   116e4:	88ab      	ldrh	r3, [r5, #4]
   116e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
   116ea:	4823      	ldr	r0, [pc, #140]	; (11778 <mqtt_evt_handler+0x224>)
   116ec:	f8ad 4000 	strh.w	r4, [sp]
   116f0:	e76c      	b.n	115cc <mqtt_evt_handler+0x78>
		if (evt->result != 0) {
   116f2:	69c9      	ldr	r1, [r1, #28]
   116f4:	b119      	cbz	r1, 116fe <mqtt_evt_handler+0x1aa>
			LOG_ERR("MQTT SUBACK error %d", evt->result);
   116f6:	4821      	ldr	r0, [pc, #132]	; (1177c <mqtt_evt_handler+0x228>)
   116f8:	f044 0201 	orr.w	r2, r4, #1
   116fc:	e744      	b.n	11588 <mqtt_evt_handler+0x34>
		LOG_INF("[%s:%d] SUBACK packet id: %u", log_strdup(__func__), __LINE__,
   116fe:	4811      	ldr	r0, [pc, #68]	; (11744 <mqtt_evt_handler+0x1f0>)
   11700:	f001 fc88 	bl	13014 <log_strdup>
   11704:	f044 0403 	orr.w	r4, r4, #3
   11708:	4601      	mov	r1, r0
   1170a:	88ab      	ldrh	r3, [r5, #4]
   1170c:	f44f 729b 	mov.w	r2, #310	; 0x136
   11710:	481b      	ldr	r0, [pc, #108]	; (11780 <mqtt_evt_handler+0x22c>)
   11712:	f8ad 4000 	strh.w	r4, [sp]
   11716:	e759      	b.n	115cc <mqtt_evt_handler+0x78>
		LOG_INF("[%s:%d] default: %d", log_strdup(__func__), __LINE__,
   11718:	480a      	ldr	r0, [pc, #40]	; (11744 <mqtt_evt_handler+0x1f0>)
   1171a:	f001 fc7b 	bl	13014 <log_strdup>
   1171e:	f044 0403 	orr.w	r4, r4, #3
   11722:	4601      	mov	r1, r0
   11724:	782b      	ldrb	r3, [r5, #0]
   11726:	f240 123b 	movw	r2, #315	; 0x13b
   1172a:	4816      	ldr	r0, [pc, #88]	; (11784 <mqtt_evt_handler+0x230>)
   1172c:	f8ad 4000 	strh.w	r4, [sp]
   11730:	e74c      	b.n	115cc <mqtt_evt_handler+0x78>
   11732:	bf00      	nop
   11734:	0002ec7c 	.word	0x0002ec7c
   11738:	0002ecec 	.word	0x0002ecec
   1173c:	0002fa61 	.word	0x0002fa61
   11740:	20020c6c 	.word	0x20020c6c
   11744:	0003007a 	.word	0x0003007a
   11748:	0002fa78 	.word	0x0002fa78
   1174c:	0002fa97 	.word	0x0002fa97
   11750:	0002fabb 	.word	0x0002fabb
   11754:	200242ab 	.word	0x200242ab
   11758:	0002fbdb 	.word	0x0002fbdb
   1175c:	0002fbe6 	.word	0x0002fbe6
   11760:	200214a8 	.word	0x200214a8
   11764:	0002fb03 	.word	0x0002fb03
   11768:	0002fb29 	.word	0x0002fb29
   1176c:	0002fb46 	.word	0x0002fb46
   11770:	0002fb63 	.word	0x0002fb63
   11774:	20020c84 	.word	0x20020c84
   11778:	0002fb78 	.word	0x0002fb78
   1177c:	0002fb95 	.word	0x0002fb95
   11780:	0002fbaa 	.word	0x0002fbaa
   11784:	0002fbc7 	.word	0x0002fbc7
   11788:	0002fae1 	.word	0x0002fae1
   1178c:	006ddd00 	.word	0x006ddd00

00011790 <bsd_recoverable_error_handler>:
   11790:	4a05      	ldr	r2, [pc, #20]	; (117a8 <bsd_recoverable_error_handler+0x18>)
   11792:	4b06      	ldr	r3, [pc, #24]	; (117ac <bsd_recoverable_error_handler+0x1c>)
{
   11794:	4601      	mov	r1, r0
   11796:	1ad2      	subs	r2, r2, r3
   11798:	08d2      	lsrs	r2, r2, #3
	LOG_ERR("bsdlib recoverable error: %u", (unsigned int)err);
   1179a:	0192      	lsls	r2, r2, #6
   1179c:	4804      	ldr	r0, [pc, #16]	; (117b0 <bsd_recoverable_error_handler+0x20>)
   1179e:	f042 0201 	orr.w	r2, r2, #1
   117a2:	f01a bee4 	b.w	2c56e <log_1>
   117a6:	bf00      	nop
   117a8:	0002ecec 	.word	0x0002ecec
   117ac:	0002ec7c 	.word	0x0002ec7c
   117b0:	0002fbeb 	.word	0x0002fbeb

000117b4 <modem_trace_enable>:
    port->PIN_CNF[CS_PIN_CFG_TRACE_CLK] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) |
   117b4:	f240 3202 	movw	r2, #770	; 0x302
   117b8:	4b07      	ldr	r3, [pc, #28]	; (117d8 <modem_trace_enable+0x24>)
   117ba:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
    port->PIN_CNF[CS_PIN_CFG_TRACE_DATA0] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) |
   117be:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
    port->PIN_CNF[CS_PIN_CFG_TRACE_DATA1] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) |
   117c2:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
    port->PIN_CNF[CS_PIN_CFG_TRACE_DATA2] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) |
   117c6:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
    port->PIN_CNF[CS_PIN_CFG_TRACE_DATA3] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) |
   117ca:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
    port->DIR = 0xFFFFFFFF;
   117ce:	f04f 32ff 	mov.w	r2, #4294967295
   117d2:	615a      	str	r2, [r3, #20]
}
   117d4:	4770      	bx	lr
   117d6:	bf00      	nop
   117d8:	40842500 	.word	0x40842500

000117dc <timer_init>:
{
   117dc:	b507      	push	{r0, r1, r2, lr}
   117de:	2300      	movs	r3, #0
	compiler_barrier();
   117e0:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
	z_impl_k_timer_start(timer, duration, period);
   117e4:	4803      	ldr	r0, [pc, #12]	; (117f4 <timer_init+0x18>)
   117e6:	e9cd 2300 	strd	r2, r3, [sp]
   117ea:	f013 fceb 	bl	251c4 <z_impl_k_timer_start>
}
   117ee:	b003      	add	sp, #12
   117f0:	f85d fb04 	ldr.w	pc, [sp], #4
   117f4:	20020b18 	.word	0x20020b18

000117f8 <app_connect>:
int app_connect(void) {
   117f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   117fc:	4b34      	ldr	r3, [pc, #208]	; (118d0 <app_connect+0xd8>)
   117fe:	4c35      	ldr	r4, [pc, #212]	; (118d4 <app_connect+0xdc>)
	LOG_INF("Connecting");
   11800:	4835      	ldr	r0, [pc, #212]	; (118d8 <app_connect+0xe0>)
   11802:	1ae4      	subs	r4, r4, r3
   11804:	08e4      	lsrs	r4, r4, #3
   11806:	01a4      	lsls	r4, r4, #6
int app_connect(void) {
   11808:	b0a0      	sub	sp, #128	; 0x80
	LOG_INF("Connecting");
   1180a:	f044 0103 	orr.w	r1, r4, #3
   1180e:	f01a fe9f 	bl	2c550 <log_0>
		LOG_WRN("Failed to establish LTE connection.");
   11812:	4e32      	ldr	r6, [pc, #200]	; (118dc <app_connect+0xe4>)
		LOG_WRN("Will retry in %d seconds.",
   11814:	4f32      	ldr	r7, [pc, #200]	; (118e0 <app_connect+0xe8>)
		LOG_WRN("Failed to establish LTE connection.");
   11816:	f044 0502 	orr.w	r5, r4, #2
	while(lte_lc_connect() != 0) {
   1181a:	f01c fe91 	bl	2e540 <lte_lc_connect>
   1181e:	b990      	cbnz	r0, 11846 <app_connect+0x4e>
	err = mqtt_connect(&client);
   11820:	4e30      	ldr	r6, [pc, #192]	; (118e4 <app_connect+0xec>)
	LOG_INF("LTE: Link connected");
   11822:	f044 0703 	orr.w	r7, r4, #3
   11826:	4639      	mov	r1, r7
   11828:	482f      	ldr	r0, [pc, #188]	; (118e8 <app_connect+0xf0>)
   1182a:	f01a fe91 	bl	2c550 <log_0>
	err = mqtt_connect(&client);
   1182e:	4630      	mov	r0, r6
   11830:	f01b fe2d 	bl	2d48e <mqtt_connect>
	if (err != 0) {
   11834:	4605      	mov	r5, r0
   11836:	b1a8      	cbz	r0, 11864 <app_connect+0x6c>
		LOG_ERR("mqtt_connect %d", err);
   11838:	4601      	mov	r1, r0
   1183a:	482c      	ldr	r0, [pc, #176]	; (118ec <app_connect+0xf4>)
   1183c:	f044 0201 	orr.w	r2, r4, #1
	LOG_INF("RSRP: %s", log_strdup(rsrp_res));
   11840:	f01a fe95 	bl	2c56e <log_1>
	return 0;
   11844:	e01c      	b.n	11880 <app_connect+0x88>
		LOG_WRN("Failed to establish LTE connection.");
   11846:	4629      	mov	r1, r5
   11848:	4630      	mov	r0, r6
   1184a:	f01a fe81 	bl	2c550 <log_0>
		LOG_WRN("Will retry in %d seconds.",
   1184e:	462a      	mov	r2, r5
   11850:	210a      	movs	r1, #10
   11852:	4638      	mov	r0, r7
   11854:	f01a fe8b 	bl	2c56e <log_1>
	return z_impl_k_sleep(timeout);
   11858:	2100      	movs	r1, #0
   1185a:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
   1185e:	f012 fe37 	bl	244d0 <z_impl_k_sleep>
   11862:	e7da      	b.n	1181a <app_connect+0x22>
	if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {
   11864:	f896 8024 	ldrb.w	r8, [r6, #36]	; 0x24
   11868:	f1b8 0f00 	cmp.w	r8, #0
   1186c:	d00c      	beq.n	11888 <app_connect+0x90>
		LOG_ERR("fds_init %d", err);
   1186e:	f06f 0185 	mvn.w	r1, #133	; 0x85
   11872:	481f      	ldr	r0, [pc, #124]	; (118f0 <app_connect+0xf8>)
   11874:	f044 0201 	orr.w	r2, r4, #1
   11878:	f01a fe79 	bl	2c56e <log_1>
		return -ENOTSUP;
   1187c:	f06f 0585 	mvn.w	r5, #133	; 0x85
}
   11880:	4628      	mov	r0, r5
   11882:	b020      	add	sp, #128	; 0x80
   11884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		fds.fd = c->transport.tcp.sock;
   11888:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1188a:	4a1a      	ldr	r2, [pc, #104]	; (118f4 <app_connect+0xfc>)
	app_connected = true;
   1188c:	4e1a      	ldr	r6, [pc, #104]	; (118f8 <app_connect+0x100>)
		fds.fd = c->transport.tcp.sock;
   1188e:	6013      	str	r3, [r2, #0]
	fds.events = POLLIN;
   11890:	2301      	movs	r3, #1
   11892:	8093      	strh	r3, [r2, #4]
	app_connected = true;
   11894:	7033      	strb	r3, [r6, #0]
	return z_impl_k_sem_take(sem, timeout);
   11896:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   1189a:	2300      	movs	r3, #0
   1189c:	4817      	ldr	r0, [pc, #92]	; (118fc <app_connect+0x104>)
   1189e:	f012 fe97 	bl	245d0 <z_impl_k_sem_take>
	if(err) {
   118a2:	4605      	mov	r5, r0
   118a4:	b148      	cbz	r0, 118ba <app_connect+0xc2>
		LOG_ERR("MQTT connection timed out\n");
   118a6:	4816      	ldr	r0, [pc, #88]	; (11900 <app_connect+0x108>)
   118a8:	f044 0101 	orr.w	r1, r4, #1
   118ac:	f01a fe50 	bl	2c550 <log_0>
		return -ENOTCONN;
   118b0:	f06f 057f 	mvn.w	r5, #127	; 0x7f
		app_connected = false;
   118b4:	f886 8000 	strb.w	r8, [r6]
		return -ENOTCONN;
   118b8:	e7e2      	b.n	11880 <app_connect+0x88>
	modem_info_string_get(MODEM_INFO_RSRP, rsrp_res, sizeof(rsrp_res));
   118ba:	2280      	movs	r2, #128	; 0x80
   118bc:	4669      	mov	r1, sp
   118be:	f007 fca1 	bl	19204 <modem_info_string_get>
	LOG_INF("RSRP: %s", log_strdup(rsrp_res));
   118c2:	4668      	mov	r0, sp
   118c4:	f001 fba6 	bl	13014 <log_strdup>
   118c8:	463a      	mov	r2, r7
   118ca:	4601      	mov	r1, r0
   118cc:	480d      	ldr	r0, [pc, #52]	; (11904 <app_connect+0x10c>)
   118ce:	e7b7      	b.n	11840 <app_connect+0x48>
   118d0:	0002ec7c 	.word	0x0002ec7c
   118d4:	0002ecec 	.word	0x0002ecec
   118d8:	0002fc08 	.word	0x0002fc08
   118dc:	0002fc13 	.word	0x0002fc13
   118e0:	0002fc37 	.word	0x0002fc37
   118e4:	20021444 	.word	0x20021444
   118e8:	0002fc51 	.word	0x0002fc51
   118ec:	0002fc65 	.word	0x0002fc65
   118f0:	0002fc75 	.word	0x0002fc75
   118f4:	200214a8 	.word	0x200214a8
   118f8:	200242aa 	.word	0x200242aa
   118fc:	20020c6c 	.word	0x20020c6c
   11900:	0002fc81 	.word	0x0002fc81
   11904:	0002fc9c 	.word	0x0002fc9c

00011908 <app_disconnect>:
void app_disconnect(void) {
   11908:	b538      	push	{r3, r4, r5, lr}
   1190a:	4b1c      	ldr	r3, [pc, #112]	; (1197c <app_disconnect+0x74>)
   1190c:	4c1c      	ldr	r4, [pc, #112]	; (11980 <app_disconnect+0x78>)
	LOG_INF("Disconnecting");
   1190e:	481d      	ldr	r0, [pc, #116]	; (11984 <app_disconnect+0x7c>)
   11910:	1ae4      	subs	r4, r4, r3
   11912:	08e4      	lsrs	r4, r4, #3
   11914:	01a4      	lsls	r4, r4, #6
   11916:	f044 0503 	orr.w	r5, r4, #3
   1191a:	4629      	mov	r1, r5
   1191c:	f01a fe18 	bl	2c550 <log_0>
	if(!app_connected) {
   11920:	4b19      	ldr	r3, [pc, #100]	; (11988 <app_disconnect+0x80>)
   11922:	781a      	ldrb	r2, [r3, #0]
   11924:	b9d2      	cbnz	r2, 1195c <app_disconnect+0x54>
		LOG_INF("Aborting mqtt connection");
   11926:	4819      	ldr	r0, [pc, #100]	; (1198c <app_disconnect+0x84>)
   11928:	4629      	mov	r1, r5
   1192a:	f01a fe11 	bl	2c550 <log_0>
		mqtt_abort(&client);
   1192e:	4818      	ldr	r0, [pc, #96]	; (11990 <app_disconnect+0x88>)
   11930:	f01b fe89 	bl	2d646 <mqtt_abort>
	LOG_INF("MQTT: disconnected");
   11934:	4817      	ldr	r0, [pc, #92]	; (11994 <app_disconnect+0x8c>)
   11936:	f044 0103 	orr.w	r1, r4, #3
   1193a:	f01a fe09 	bl	2c550 <log_0>
	err = lte_lc_offline();
   1193e:	f007 fa05 	bl	18d4c <lte_lc_offline>
	if(err) {
   11942:	b120      	cbz	r0, 1194e <app_disconnect+0x46>
		LOG_ERR("LTE: Offline mode failed\n");
   11944:	4814      	ldr	r0, [pc, #80]	; (11998 <app_disconnect+0x90>)
   11946:	f044 0101 	orr.w	r1, r4, #1
   1194a:	f01a fe01 	bl	2c550 <log_0>
	LOG_INF("LTE: offline");
   1194e:	f044 0103 	orr.w	r1, r4, #3
   11952:	4812      	ldr	r0, [pc, #72]	; (1199c <app_disconnect+0x94>)
}
   11954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LOG_INF("LTE: offline");
   11958:	f01a bdfa 	b.w	2c550 <log_0>
		app_connected = 0;
   1195c:	2200      	movs	r2, #0
		err = mqtt_disconnect(&client);
   1195e:	480c      	ldr	r0, [pc, #48]	; (11990 <app_disconnect+0x88>)
		app_connected = 0;
   11960:	701a      	strb	r2, [r3, #0]
		err = mqtt_disconnect(&client);
   11962:	f01b fe1c 	bl	2d59e <mqtt_disconnect>
		if (err != 0) {
   11966:	4601      	mov	r1, r0
   11968:	2800      	cmp	r0, #0
   1196a:	d0e3      	beq.n	11934 <app_disconnect+0x2c>
			LOG_ERR("mqtt_disconnect %d", err);
   1196c:	f044 0201 	orr.w	r2, r4, #1
   11970:	480b      	ldr	r0, [pc, #44]	; (119a0 <app_disconnect+0x98>)
}
   11972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			LOG_ERR("mqtt_disconnect %d", err);
   11976:	f01a bdfa 	b.w	2c56e <log_1>
   1197a:	bf00      	nop
   1197c:	0002ec7c 	.word	0x0002ec7c
   11980:	0002ecec 	.word	0x0002ecec
   11984:	0002fca5 	.word	0x0002fca5
   11988:	200242aa 	.word	0x200242aa
   1198c:	0002fcb3 	.word	0x0002fcb3
   11990:	20021444 	.word	0x20021444
   11994:	0002fcdf 	.word	0x0002fcdf
   11998:	0002fcf2 	.word	0x0002fcf2
   1199c:	0002fd0c 	.word	0x0002fd0c
   119a0:	0002fccc 	.word	0x0002fccc

000119a4 <init_work>:
	k_work_q_start(&app_work_q, app_stack_area, K_THREAD_STACK_SIZEOF(app_stack_area), WORK_PRIORITY);
   119a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
void init_work(void) {
   119a8:	b508      	push	{r3, lr}
	k_work_q_start(&app_work_q, app_stack_area, K_THREAD_STACK_SIZEOF(app_stack_area), WORK_PRIORITY);
   119aa:	4908      	ldr	r1, [pc, #32]	; (119cc <init_work+0x28>)
   119ac:	2305      	movs	r3, #5
   119ae:	4808      	ldr	r0, [pc, #32]	; (119d0 <init_work+0x2c>)
   119b0:	f013 f810 	bl	249d4 <k_work_q_start>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   119b4:	2300      	movs	r3, #0
   119b6:	4a07      	ldr	r2, [pc, #28]	; (119d4 <init_work+0x30>)
   119b8:	4907      	ldr	r1, [pc, #28]	; (119d8 <init_work+0x34>)
   119ba:	6013      	str	r3, [r2, #0]
   119bc:	e9c2 1301 	strd	r1, r3, [r2, #4]
   119c0:	4a06      	ldr	r2, [pc, #24]	; (119dc <init_work+0x38>)
   119c2:	4907      	ldr	r1, [pc, #28]	; (119e0 <init_work+0x3c>)
   119c4:	6013      	str	r3, [r2, #0]
   119c6:	e9c2 1301 	strd	r1, r3, [r2, #4]
}
   119ca:	bd08      	pop	{r3, pc}
   119cc:	20026410 	.word	0x20026410
   119d0:	20020cd8 	.word	0x20020cd8
   119d4:	20021438 	.word	0x20021438
   119d8:	00011bd5 	.word	0x00011bd5
   119dc:	200214b4 	.word	0x200214b4
   119e0:	00011b11 	.word	0x00011b11

000119e4 <create_message>:

void create_message(struct app_message* destination, enum app_msg_type type, uint8_t *data, size_t len, int64_t *timestamp) {
   119e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   119e8:	b087      	sub	sp, #28
   119ea:	af02      	add	r7, sp, #8
   119ec:	4605      	mov	r5, r0
   119ee:	4689      	mov	r9, r1
   119f0:	4616      	mov	r6, r2
   119f2:	4698      	mov	r8, r3

	cJSON *message;

	message = cJSON_CreateObject();
   119f4:	f004 ff4a 	bl	1688c <cJSON_CreateObject>
   119f8:	4604      	mov	r4, r0
	
	if(type == SENSOR_ALARM) {
   119fa:	f1b9 0f00 	cmp.w	r9, #0
   119fe:	d138      	bne.n	11a72 <create_message+0x8e>
		cJSON_AddStringToObject(message, "type", "alarm");
   11a00:	4a1d      	ldr	r2, [pc, #116]	; (11a78 <create_message+0x94>)
	} else {
		cJSON_AddStringToObject(message, "type", "periodic sample");
   11a02:	491e      	ldr	r1, [pc, #120]	; (11a7c <create_message+0x98>)
   11a04:	f01c f8cc 	bl	2dba0 <cJSON_AddStringToObject>
	}

	char time_str[16];
	snprintf(time_str, 16, "%lld", *timestamp);
   11a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11a0a:	2110      	movs	r1, #16
   11a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11a10:	4638      	mov	r0, r7
   11a12:	e9cd 2300 	strd	r2, r3, [sp]
   11a16:	4a1a      	ldr	r2, [pc, #104]	; (11a80 <create_message+0x9c>)
   11a18:	f014 fda0 	bl	2655c <snprintf>

	char data_str[len];
   11a1c:	f108 0307 	add.w	r3, r8, #7
   11a20:	f023 0307 	bic.w	r3, r3, #7
   11a24:	ebad 0d03 	sub.w	sp, sp, r3
	snprintf(data_str, len, "%s", data);
   11a28:	4641      	mov	r1, r8
   11a2a:	4633      	mov	r3, r6
   11a2c:	4a15      	ldr	r2, [pc, #84]	; (11a84 <create_message+0xa0>)
   11a2e:	a802      	add	r0, sp, #8
   11a30:	f014 fd94 	bl	2655c <snprintf>

	cJSON_AddStringToObject(message, "timestamp", time_str);
   11a34:	463a      	mov	r2, r7
   11a36:	4620      	mov	r0, r4
   11a38:	4913      	ldr	r1, [pc, #76]	; (11a88 <create_message+0xa4>)
   11a3a:	f01c f8b1 	bl	2dba0 <cJSON_AddStringToObject>
	cJSON_AddStringToObject(message, "data", data);
   11a3e:	4632      	mov	r2, r6
   11a40:	4912      	ldr	r1, [pc, #72]	; (11a8c <create_message+0xa8>)
   11a42:	4620      	mov	r0, r4
   11a44:	f01c f8ac 	bl	2dba0 <cJSON_AddStringToObject>

	destination->len = strlen(cJSON_Print(message));
   11a48:	4620      	mov	r0, r4
   11a4a:	f01c f8a6 	bl	2db9a <cJSON_Print>
   11a4e:	f014 ff25 	bl	2689c <strlen>
   11a52:	f8c5 01f4 	str.w	r0, [r5, #500]	; 0x1f4

	strcpy(destination->data, cJSON_Print(message));
   11a56:	4620      	mov	r0, r4
   11a58:	f01c f89f 	bl	2db9a <cJSON_Print>
   11a5c:	4601      	mov	r1, r0
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   11a5e:	4628      	mov	r0, r5
   11a60:	f014 febe 	bl	267e0 <strcpy>

	cJSON_Delete(message);
   11a64:	4620      	mov	r0, r4
   11a66:	f004 fed5 	bl	16814 <cJSON_Delete>
}
   11a6a:	3714      	adds	r7, #20
   11a6c:	46bd      	mov	sp, r7
   11a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cJSON_AddStringToObject(message, "type", "periodic sample");
   11a72:	4a07      	ldr	r2, [pc, #28]	; (11a90 <create_message+0xac>)
   11a74:	e7c5      	b.n	11a02 <create_message+0x1e>
   11a76:	bf00      	nop
   11a78:	0002fd90 	.word	0x0002fd90
   11a7c:	0002fd19 	.word	0x0002fd19
   11a80:	0002fd2e 	.word	0x0002fd2e
   11a84:	00031e63 	.word	0x00031e63
   11a88:	0002fd33 	.word	0x0002fd33
   11a8c:	0002fd3d 	.word	0x0002fd3d
   11a90:	0002fd1e 	.word	0x0002fd1e

00011a94 <publish_samples.part.0>:
void publish_samples(struct k_work *item) {
   11a94:	b510      	push	{r4, lr}
   11a96:	4b18      	ldr	r3, [pc, #96]	; (11af8 <publish_samples.part.0+0x64>)
   11a98:	4a18      	ldr	r2, [pc, #96]	; (11afc <publish_samples.part.0+0x68>)
   11a9a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
   11a9e:	1ad2      	subs	r2, r2, r3
   11aa0:	08d2      	lsrs	r2, r2, #3
	LOG_DBG("Publish Samples");
   11aa2:	0192      	lsls	r2, r2, #6
   11aa4:	f042 0204 	orr.w	r2, r2, #4
   11aa8:	4915      	ldr	r1, [pc, #84]	; (11b00 <publish_samples.part.0+0x6c>)
   11aaa:	4816      	ldr	r0, [pc, #88]	; (11b04 <publish_samples.part.0+0x70>)
   11aac:	f01a fd5f 	bl	2c56e <log_1>
	date_time_now(&curr_time);
   11ab0:	ac02      	add	r4, sp, #8
	dk_set_led(DK_LED2, 0);
   11ab2:	2100      	movs	r1, #0
   11ab4:	2001      	movs	r0, #1
   11ab6:	f006 f86f 	bl	17b98 <dk_set_led>
	date_time_now(&curr_time);
   11aba:	4620      	mov	r0, r4
   11abc:	f007 fe50 	bl	19760 <date_time_now>
	create_message(&message, SENSOR_SAMPLE, testData, sizeof(testData), &curr_time);
   11ac0:	4a11      	ldr	r2, [pc, #68]	; (11b08 <publish_samples.part.0+0x74>)
   11ac2:	9400      	str	r4, [sp, #0]
   11ac4:	2304      	movs	r3, #4
   11ac6:	6812      	ldr	r2, [r2, #0]
   11ac8:	a804      	add	r0, sp, #16
   11aca:	2101      	movs	r1, #1
   11acc:	f7ff ff8a 	bl	119e4 <create_message>
	data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, message.data, message.len);
   11ad0:	9981      	ldr	r1, [sp, #516]	; 0x204
   11ad2:	a804      	add	r0, sp, #16
   11ad4:	f7ff fc54 	bl	11380 <data_publish.constprop.0>
   11ad8:	f04f 32ff 	mov.w	r2, #4294967295
   11adc:	f04f 33ff 	mov.w	r3, #4294967295
   11ae0:	480a      	ldr	r0, [pc, #40]	; (11b0c <publish_samples.part.0+0x78>)
   11ae2:	f012 fd75 	bl	245d0 <z_impl_k_sem_take>
	dk_set_led(DK_LED2, 1);
   11ae6:	2101      	movs	r1, #1
   11ae8:	4608      	mov	r0, r1
   11aea:	f006 f855 	bl	17b98 <dk_set_led>
	app_disconnect();
   11aee:	f7ff ff0b 	bl	11908 <app_disconnect>
}
   11af2:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   11af6:	bd10      	pop	{r4, pc}
   11af8:	0002ec7c 	.word	0x0002ec7c
   11afc:	0002ecec 	.word	0x0002ecec
   11b00:	000300ac 	.word	0x000300ac
   11b04:	0002fd42 	.word	0x0002fd42
   11b08:	20020428 	.word	0x20020428
   11b0c:	20020c84 	.word	0x20020c84

00011b10 <publish_samples>:
void publish_samples(struct k_work *item) {
   11b10:	b508      	push	{r3, lr}
	err = app_connect();
   11b12:	f7ff fe71 	bl	117f8 <app_connect>
	if(err) {
   11b16:	4601      	mov	r1, r0
   11b18:	b168      	cbz	r0, 11b36 <publish_samples+0x26>
   11b1a:	4b09      	ldr	r3, [pc, #36]	; (11b40 <publish_samples+0x30>)
   11b1c:	4a09      	ldr	r2, [pc, #36]	; (11b44 <publish_samples+0x34>)
		LOG_ERR("PUBLISH_SAMPLES: connect failed with error %d", err);
   11b1e:	480a      	ldr	r0, [pc, #40]	; (11b48 <publish_samples+0x38>)
   11b20:	1ad2      	subs	r2, r2, r3
   11b22:	08d2      	lsrs	r2, r2, #3
   11b24:	0192      	lsls	r2, r2, #6
   11b26:	f042 0201 	orr.w	r2, r2, #1
   11b2a:	f01a fd20 	bl	2c56e <log_1>
}
   11b2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		app_disconnect();
   11b32:	f7ff bee9 	b.w	11908 <app_disconnect>
}
   11b36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11b3a:	f7ff bfab 	b.w	11a94 <publish_samples.part.0>
   11b3e:	bf00      	nop
   11b40:	0002ec7c 	.word	0x0002ec7c
   11b44:	0002ecec 	.word	0x0002ecec
   11b48:	0002fd56 	.word	0x0002fd56

00011b4c <publish_alarm.part.0>:
void publish_alarm(struct k_work *item) {	
   11b4c:	b530      	push	{r4, r5, lr}
   11b4e:	4b1a      	ldr	r3, [pc, #104]	; (11bb8 <publish_alarm.part.0+0x6c>)
   11b50:	4c1a      	ldr	r4, [pc, #104]	; (11bbc <publish_alarm.part.0+0x70>)
   11b52:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
   11b56:	1ae4      	subs	r4, r4, r3
   11b58:	08e4      	lsrs	r4, r4, #3
	LOG_DBG("Publish alarm");
   11b5a:	01a4      	lsls	r4, r4, #6
   11b5c:	f044 0204 	orr.w	r2, r4, #4
   11b60:	4917      	ldr	r1, [pc, #92]	; (11bc0 <publish_alarm.part.0+0x74>)
   11b62:	4818      	ldr	r0, [pc, #96]	; (11bc4 <publish_alarm.part.0+0x78>)
   11b64:	f01a fd03 	bl	2c56e <log_1>
	date_time_now(&curr_time);
   11b68:	ad02      	add	r5, sp, #8
	dk_set_led(DK_LED2, 0);
   11b6a:	2100      	movs	r1, #0
   11b6c:	2001      	movs	r0, #1
   11b6e:	f006 f813 	bl	17b98 <dk_set_led>
	date_time_now(&curr_time);
   11b72:	4628      	mov	r0, r5
   11b74:	f007 fdf4 	bl	19760 <date_time_now>
	create_message(&message, SENSOR_ALARM, curr_sample, 1, &curr_time);
   11b78:	2301      	movs	r3, #1
   11b7a:	4a13      	ldr	r2, [pc, #76]	; (11bc8 <publish_alarm.part.0+0x7c>)
   11b7c:	a804      	add	r0, sp, #16
   11b7e:	2100      	movs	r1, #0
   11b80:	9500      	str	r5, [sp, #0]
   11b82:	f7ff ff2f 	bl	119e4 <create_message>
	data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, message.data, message.len);
   11b86:	9981      	ldr	r1, [sp, #516]	; 0x204
   11b88:	a804      	add	r0, sp, #16
   11b8a:	f7ff fbf9 	bl	11380 <data_publish.constprop.0>
   11b8e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   11b92:	2300      	movs	r3, #0
   11b94:	480d      	ldr	r0, [pc, #52]	; (11bcc <publish_alarm.part.0+0x80>)
   11b96:	f012 fd1b 	bl	245d0 <z_impl_k_sem_take>
	if(err) {
   11b9a:	b120      	cbz	r0, 11ba6 <publish_alarm.part.0+0x5a>
		LOG_ERR("MQTT publish acknowledgement timed out\n");
   11b9c:	480c      	ldr	r0, [pc, #48]	; (11bd0 <publish_alarm.part.0+0x84>)
   11b9e:	f044 0101 	orr.w	r1, r4, #1
   11ba2:	f01a fcd5 	bl	2c550 <log_0>
	dk_set_led(DK_LED2, 1);
   11ba6:	2101      	movs	r1, #1
   11ba8:	4608      	mov	r0, r1
   11baa:	f005 fff5 	bl	17b98 <dk_set_led>
	app_disconnect();
   11bae:	f7ff feab 	bl	11908 <app_disconnect>
}
   11bb2:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
   11bb6:	bd30      	pop	{r4, r5, pc}
   11bb8:	0002ec7c 	.word	0x0002ec7c
   11bbc:	0002ecec 	.word	0x0002ecec
   11bc0:	000300bc 	.word	0x000300bc
   11bc4:	0002fd84 	.word	0x0002fd84
   11bc8:	00030d33 	.word	0x00030d33
   11bcc:	20020c84 	.word	0x20020c84
   11bd0:	0002fd96 	.word	0x0002fd96

00011bd4 <publish_alarm>:
void publish_alarm(struct k_work *item) {	
   11bd4:	b508      	push	{r3, lr}
	err = app_connect();
   11bd6:	f7ff fe0f 	bl	117f8 <app_connect>
	if(err) {
   11bda:	4601      	mov	r1, r0
   11bdc:	b168      	cbz	r0, 11bfa <publish_alarm+0x26>
   11bde:	4b09      	ldr	r3, [pc, #36]	; (11c04 <publish_alarm+0x30>)
   11be0:	4a09      	ldr	r2, [pc, #36]	; (11c08 <publish_alarm+0x34>)
		LOG_ERR("PUBLISH_ALARM: connect failed with error %d", err);
   11be2:	480a      	ldr	r0, [pc, #40]	; (11c0c <publish_alarm+0x38>)
   11be4:	1ad2      	subs	r2, r2, r3
   11be6:	08d2      	lsrs	r2, r2, #3
   11be8:	0192      	lsls	r2, r2, #6
   11bea:	f042 0201 	orr.w	r2, r2, #1
   11bee:	f01a fcbe 	bl	2c56e <log_1>
}
   11bf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		app_disconnect();
   11bf6:	f7ff be87 	b.w	11908 <app_disconnect>
}
   11bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11bfe:	f7ff bfa5 	b.w	11b4c <publish_alarm.part.0>
   11c02:	bf00      	nop
   11c04:	0002ec7c 	.word	0x0002ec7c
   11c08:	0002ecec 	.word	0x0002ecec
   11c0c:	0002fdbe 	.word	0x0002fdbe

00011c10 <main>:

/**** Application code - End ****/

void main(void)
{
   11c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11c14:	4b98      	ldr	r3, [pc, #608]	; (11e78 <main+0x268>)
   11c16:	4c99      	ldr	r4, [pc, #612]	; (11e7c <main+0x26c>)
	int err;

    LOG_INF("MQTT sensor application example started");
   11c18:	4899      	ldr	r0, [pc, #612]	; (11e80 <main+0x270>)
   11c1a:	1ae4      	subs	r4, r4, r3
   11c1c:	08e4      	lsrs	r4, r4, #3
   11c1e:	01a4      	lsls	r4, r4, #6
{
   11c20:	b09c      	sub	sp, #112	; 0x70
    LOG_INF("MQTT sensor application example started");
   11c22:	f044 0103 	orr.w	r1, r4, #3
   11c26:	f01a fc93 	bl	2c550 <log_0>

	modem_trace_enable();
   11c2a:	f7ff fdc3 	bl	117b4 <modem_trace_enable>
		LOG_INF("LTE Link Connecting ...");
   11c2e:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 11f00 <main+0x2f0>
			LOG_ERR("LTE link could not be established.");
   11c32:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 11f04 <main+0x2f4>

	while(modem_configure() != 0) {
		LOG_WRN("Failed to establish LTE connection.");
   11c36:	4e93      	ldr	r6, [pc, #588]	; (11e84 <main+0x274>)
		LOG_INF("LTE Link Connecting ...");
   11c38:	f044 0903 	orr.w	r9, r4, #3
   11c3c:	4649      	mov	r1, r9
   11c3e:	4650      	mov	r0, sl
   11c40:	f01a fc86 	bl	2c550 <log_0>
		err = lte_lc_init_and_connect();
   11c44:	f01c fc7f 	bl	2e546 <lte_lc_init_and_connect>
		LOG_INF("LTE Link Connecting ...");
   11c48:	4627      	mov	r7, r4
		if(err) {
   11c4a:	4605      	mov	r5, r0
   11c4c:	b1a8      	cbz	r0, 11c7a <main+0x6a>
			LOG_ERR("LTE link could not be established.");
   11c4e:	4640      	mov	r0, r8
   11c50:	f044 0101 	orr.w	r1, r4, #1
		LOG_WRN("Failed to establish LTE connection.");
   11c54:	f044 0502 	orr.w	r5, r4, #2
			LOG_ERR("LTE link could not be established.");
   11c58:	f01a fc7a 	bl	2c550 <log_0>
		LOG_WRN("Failed to establish LTE connection.");
   11c5c:	4629      	mov	r1, r5
   11c5e:	4630      	mov	r0, r6
   11c60:	f01a fc76 	bl	2c550 <log_0>
		LOG_WRN("Will retry in %d seconds.",
   11c64:	462a      	mov	r2, r5
   11c66:	210a      	movs	r1, #10
   11c68:	4887      	ldr	r0, [pc, #540]	; (11e88 <main+0x278>)
   11c6a:	f01a fc80 	bl	2c56e <log_1>
	return z_impl_k_sleep(timeout);
   11c6e:	2100      	movs	r1, #0
   11c70:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
   11c74:	f012 fc2c 	bl	244d0 <z_impl_k_sleep>
   11c78:	e7de      	b.n	11c38 <main+0x28>
		LOG_INF("LTE Link Connected!");
   11c7a:	4649      	mov	r1, r9
   11c7c:	4883      	ldr	r0, [pc, #524]	; (11e8c <main+0x27c>)
   11c7e:	f01a fc67 	bl	2c550 <log_0>
				CONFIG_APP_CONNECT_RETRY_DELAY);
		k_sleep(K_SECONDS(CONFIG_APP_CONNECT_RETRY_DELAY));
	}
	
	
	date_time_update_async(date_time_handler);
   11c82:	4883      	ldr	r0, [pc, #524]	; (11e90 <main+0x280>)
   11c84:	f007 fd8e 	bl	197a4 <date_time_update_async>
	struct addrinfo hints = {
   11c88:	f04f 0801 	mov.w	r8, #1
	return z_impl_k_sem_take(sem, timeout);
   11c8c:	f04f 33ff 	mov.w	r3, #4294967295
   11c90:	f04f 32ff 	mov.w	r2, #4294967295
   11c94:	487f      	ldr	r0, [pc, #508]	; (11e94 <main+0x284>)
   11c96:	f012 fc9b 	bl	245d0 <z_impl_k_sem_take>
	mqtt_client_init(client);
   11c9a:	487f      	ldr	r0, [pc, #508]	; (11e98 <main+0x288>)
   11c9c:	f01b fbdd 	bl	2d45a <mqtt_client_init>
	struct addrinfo hints = {
   11ca0:	2250      	movs	r2, #80	; 0x50
   11ca2:	4629      	mov	r1, r5
   11ca4:	a808      	add	r0, sp, #32
   11ca6:	f014 f9e9 	bl	2607c <memset>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   11caa:	4629      	mov	r1, r5
   11cac:	487b      	ldr	r0, [pc, #492]	; (11e9c <main+0x28c>)
   11cae:	ab03      	add	r3, sp, #12
   11cb0:	aa08      	add	r2, sp, #32
   11cb2:	e9cd 880a 	strd	r8, r8, [sp, #40]	; 0x28
   11cb6:	f01a fef8 	bl	2caaa <zsock_getaddrinfo>
	if (err) {
   11cba:	4e79      	ldr	r6, [pc, #484]	; (11ea0 <main+0x290>)
   11cbc:	4601      	mov	r1, r0
   11cbe:	2800      	cmp	r0, #0
   11cc0:	d07a      	beq.n	11db8 <main+0x1a8>
		LOG_ERR("ERROR: getaddrinfo failed %d", err);
   11cc2:	4878      	ldr	r0, [pc, #480]	; (11ea4 <main+0x294>)
   11cc4:	ea47 0208 	orr.w	r2, r7, r8
   11cc8:	f01a fc51 	bl	2c56e <log_1>
	client->broker = &broker;
   11ccc:	4d72      	ldr	r5, [pc, #456]	; (11e98 <main+0x288>)
	client->evt_cb = mqtt_evt_handler;
   11cce:	4b76      	ldr	r3, [pc, #472]	; (11ea8 <main+0x298>)
	client->client_id.utf8 = (uint8_t *)CONFIG_MQTT_CLIENT_ID;
   11cd0:	4876      	ldr	r0, [pc, #472]	; (11eac <main+0x29c>)
	client->evt_cb = mqtt_evt_handler;
   11cd2:	64ab      	str	r3, [r5, #72]	; 0x48
	client->broker = &broker;
   11cd4:	636e      	str	r6, [r5, #52]	; 0x34
	client->client_id.utf8 = (uint8_t *)CONFIG_MQTT_CLIENT_ID;
   11cd6:	62e8      	str	r0, [r5, #44]	; 0x2c
	client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
   11cd8:	f014 fde0 	bl	2689c <strlen>
	client->protocol_version = MQTT_VERSION_3_1_1;
   11cdc:	2204      	movs	r2, #4
   11cde:	f885 205e 	strb.w	r2, [r5, #94]	; 0x5e
	client->rx_buf = rx_buffer;
   11ce2:	4a73      	ldr	r2, [pc, #460]	; (11eb0 <main+0x2a0>)
	client->password = NULL;
   11ce4:	2300      	movs	r3, #0
	client->rx_buf = rx_buffer;
   11ce6:	64ea      	str	r2, [r5, #76]	; 0x4c
	client->rx_buf_size = sizeof(rx_buffer);
   11ce8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
	client->tx_buf = tx_buffer;
   11cec:	4971      	ldr	r1, [pc, #452]	; (11eb4 <main+0x2a4>)
	client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
   11cee:	6328      	str	r0, [r5, #48]	; 0x30
	client->tx_buf_size = sizeof(tx_buffer);
   11cf0:	e9c5 1215 	strd	r1, r2, [r5, #84]	; 0x54
	LOG_DBG("Initalizing buttons and leds.");
   11cf4:	4870      	ldr	r0, [pc, #448]	; (11eb8 <main+0x2a8>)
   11cf6:	4971      	ldr	r1, [pc, #452]	; (11ebc <main+0x2ac>)
	client->rx_buf_size = sizeof(rx_buffer);
   11cf8:	652a      	str	r2, [r5, #80]	; 0x50
	LOG_DBG("Initalizing buttons and leds.");
   11cfa:	f044 0204 	orr.w	r2, r4, #4
	client->user_name = NULL;
   11cfe:	e9c5 330e 	strd	r3, r3, [r5, #56]	; 0x38
	client->transport.type = MQTT_TRANSPORT_NON_SECURE;
   11d02:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	LOG_DBG("Initalizing buttons and leds.");
   11d06:	f01a fc32 	bl	2c56e <log_1>
	err = dk_buttons_init(button_handler);
   11d0a:	486d      	ldr	r0, [pc, #436]	; (11ec0 <main+0x2b0>)
   11d0c:	f005 fe8e 	bl	17a2c <dk_buttons_init>
	if (err) {
   11d10:	4601      	mov	r1, r0
   11d12:	b120      	cbz	r0, 11d1e <main+0x10e>
		LOG_ERR("Could not initialize buttons, err code: %d", err);
   11d14:	486b      	ldr	r0, [pc, #428]	; (11ec4 <main+0x2b4>)
   11d16:	f044 0201 	orr.w	r2, r4, #1
   11d1a:	f01a fc28 	bl	2c56e <log_1>
	err = dk_leds_init();
   11d1e:	f005 fe35 	bl	1798c <dk_leds_init>
	if (err) {
   11d22:	4601      	mov	r1, r0
   11d24:	b120      	cbz	r0, 11d30 <main+0x120>
		LOG_ERR("Could not initialize leds, err code: %d", err);
   11d26:	4868      	ldr	r0, [pc, #416]	; (11ec8 <main+0x2b8>)
   11d28:	f044 0201 	orr.w	r2, r4, #1
   11d2c:	f01a fc1f 	bl	2c56e <log_1>
	err = dk_set_leds_state(DK_ALL_LEDS_MSK, DK_NO_LEDS_MSK);
   11d30:	2100      	movs	r1, #0
   11d32:	200f      	movs	r0, #15
   11d34:	f01c faad 	bl	2e292 <dk_set_leds_state>
	if (err) {
   11d38:	4601      	mov	r1, r0
   11d3a:	b120      	cbz	r0, 11d46 <main+0x136>
		LOG_ERR("Could not set leds state, err code: %d", err);
   11d3c:	4863      	ldr	r0, [pc, #396]	; (11ecc <main+0x2bc>)
   11d3e:	f044 0201 	orr.w	r2, r4, #1
   11d42:	f01a fc14 	bl	2c56e <log_1>
	k_sem_take(&date_time_ok,K_FOREVER);

	client_init(&client);

	buttons_leds_init(); /* Button for "alarm simulation" and leds for control */
	timer_init(); /* Periodic sample timer */
   11d46:	f7ff fd49 	bl	117dc <timer_init>
	init_work();  /* Work queue and items for sampling and alarm */
   11d4a:	f7ff fe2b 	bl	119a4 <init_work>
	modem_info_init();
   11d4e:	f007 fb6b 	bl	19428 <modem_info_init>
	
	err = lte_lc_offline();
   11d52:	f006 fffb 	bl	18d4c <lte_lc_offline>
	if(err) {
   11d56:	b120      	cbz	r0, 11d62 <main+0x152>
		LOG_ERR("LTE: Offline mode failed");
   11d58:	485d      	ldr	r0, [pc, #372]	; (11ed0 <main+0x2c0>)
   11d5a:	f044 0101 	orr.w	r1, r4, #1
   11d5e:	f01a fbf7 	bl	2c550 <log_0>
	}


	//Lighting LED1 to indicate that the application entering main loop.
	dk_set_led(DK_LED1, 0);
   11d62:	2100      	movs	r1, #0
   11d64:	4608      	mov	r0, r1
   11d66:	f005 ff17 	bl	17b98 <dk_set_led>

	while (1) {
		if(app_connected) {
   11d6a:	4e5a      	ldr	r6, [pc, #360]	; (11ed4 <main+0x2c4>)
   11d6c:	4d5a      	ldr	r5, [pc, #360]	; (11ed8 <main+0x2c8>)
   11d6e:	7833      	ldrb	r3, [r6, #0]
   11d70:	2b00      	cmp	r3, #0
   11d72:	d07b      	beq.n	11e6c <main+0x25c>
			err = poll(&fds, 1, mqtt_keepalive_time_left(&client));
   11d74:	4848      	ldr	r0, [pc, #288]	; (11e98 <main+0x288>)
   11d76:	f01b fca1 	bl	2d6bc <mqtt_keepalive_time_left>
   11d7a:	4602      	mov	r2, r0
   11d7c:	2101      	movs	r1, #1
   11d7e:	4628      	mov	r0, r5
   11d80:	f001 feca 	bl	13b18 <z_impl_zsock_poll>
			if (err < 0) {
   11d84:	2800      	cmp	r0, #0
   11d86:	da41      	bge.n	11e0c <main+0x1fc>
				printk("ERROR: poll %d\n", errno);
   11d88:	f01a ffe3 	bl	2cd52 <__errno>
   11d8c:	6801      	ldr	r1, [r0, #0]
   11d8e:	4853      	ldr	r0, [pc, #332]	; (11edc <main+0x2cc>)
   11d90:	f01a f991 	bl	2c0b6 <printk>
		{
			k_sleep(K_SECONDS(SAMPLE_INTERVAL));
		}
	}

	LOG_INF("Disconnecting MQTT client...");
   11d94:	f044 0103 	orr.w	r1, r4, #3
   11d98:	4851      	ldr	r0, [pc, #324]	; (11ee0 <main+0x2d0>)
   11d9a:	f01a fbd9 	bl	2c550 <log_0>

	err = mqtt_disconnect(&client);
   11d9e:	483e      	ldr	r0, [pc, #248]	; (11e98 <main+0x288>)
   11da0:	f01b fbfd 	bl	2d59e <mqtt_disconnect>
	if (err) {
   11da4:	4601      	mov	r1, r0
   11da6:	b120      	cbz	r0, 11db2 <main+0x1a2>
		LOG_ERR("Could not disconnect MQTT client. Error: %d", err);
   11da8:	484e      	ldr	r0, [pc, #312]	; (11ee4 <main+0x2d4>)
   11daa:	f044 0201 	orr.w	r2, r4, #1
   11dae:	f01a fbde 	bl	2c56e <log_1>
	}
}
   11db2:	b01c      	add	sp, #112	; 0x70
   11db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	addr = result;
   11db8:	9b03      	ldr	r3, [sp, #12]
	while (addr != NULL) {
   11dba:	b1cb      	cbz	r3, 11df0 <main+0x1e0>
		if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
   11dbc:	6959      	ldr	r1, [r3, #20]
   11dbe:	2908      	cmp	r1, #8
   11dc0:	d11a      	bne.n	11df8 <main+0x1e8>
				->sin_addr.s_addr;
   11dc2:	699b      	ldr	r3, [r3, #24]
			broker4->sin_family = AF_INET;
   11dc4:	f8a6 8000 	strh.w	r8, [r6]
				->sin_addr.s_addr;
   11dc8:	685b      	ldr	r3, [r3, #4]
			broker4->sin_addr.s_addr =
   11dca:	6073      	str	r3, [r6, #4]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
   11dcc:	f645 3307 	movw	r3, #23303	; 0x5b07
   11dd0:	8073      	strh	r3, [r6, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   11dd2:	2310      	movs	r3, #16
   11dd4:	1d31      	adds	r1, r6, #4
   11dd6:	eb0d 0203 	add.w	r2, sp, r3
   11dda:	4640      	mov	r0, r8
   11ddc:	f003 fc12 	bl	15604 <z_impl_net_addr_ntop>
			LOG_INF("IPv4 Address found %s", log_strdup(ipv4_addr));
   11de0:	a804      	add	r0, sp, #16
   11de2:	f001 f917 	bl	13014 <log_strdup>
   11de6:	464a      	mov	r2, r9
   11de8:	4601      	mov	r1, r0
   11dea:	483f      	ldr	r0, [pc, #252]	; (11ee8 <main+0x2d8>)
   11dec:	f01a fbbf 	bl	2c56e <log_1>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   11df0:	9803      	ldr	r0, [sp, #12]
   11df2:	f01a fe5c 	bl	2caae <zsock_freeaddrinfo>
   11df6:	e769      	b.n	11ccc <main+0xbc>
			LOG_WRN("ai_addrlen = %u should be %u or %u",
   11df8:	f047 0702 	orr.w	r7, r7, #2
   11dfc:	2318      	movs	r3, #24
   11dfe:	2208      	movs	r2, #8
   11e00:	483a      	ldr	r0, [pc, #232]	; (11eec <main+0x2dc>)
   11e02:	f8ad 7000 	strh.w	r7, [sp]
   11e06:	f01a fbe2 	bl	2c5ce <log_3>
		break;
   11e0a:	e7f1      	b.n	11df0 <main+0x1e0>
			if(app_connected) { 
   11e0c:	7833      	ldrb	r3, [r6, #0]
   11e0e:	2b00      	cmp	r3, #0
   11e10:	d0ad      	beq.n	11d6e <main+0x15e>
				err = mqtt_live(&client);
   11e12:	4821      	ldr	r0, [pc, #132]	; (11e98 <main+0x288>)
   11e14:	f01b fc2b 	bl	2d66e <mqtt_live>
				if ((err != 0) && (err != -EAGAIN)) {
   11e18:	4601      	mov	r1, r0
   11e1a:	b140      	cbz	r0, 11e2e <main+0x21e>
   11e1c:	f110 0f0b 	cmn.w	r0, #11
   11e20:	d005      	beq.n	11e2e <main+0x21e>
					LOG_ERR("ERROR: mqtt_live %d", err);
   11e22:	4833      	ldr	r0, [pc, #204]	; (11ef0 <main+0x2e0>)
   11e24:	f044 0201 	orr.w	r2, r4, #1
   11e28:	f01a fba1 	bl	2c56e <log_1>
   11e2c:	e7b2      	b.n	11d94 <main+0x184>
				if ((fds.revents & POLLIN) == POLLIN) {
   11e2e:	88eb      	ldrh	r3, [r5, #6]
   11e30:	07d9      	lsls	r1, r3, #31
   11e32:	d50a      	bpl.n	11e4a <main+0x23a>
					err = mqtt_input(&client);
   11e34:	4818      	ldr	r0, [pc, #96]	; (11e98 <main+0x288>)
   11e36:	f01b fc58 	bl	2d6ea <mqtt_input>
					if (err != 0) {
   11e3a:	4601      	mov	r1, r0
   11e3c:	b128      	cbz	r0, 11e4a <main+0x23a>
						LOG_ERR("ERROR: mqtt_input %d", err);
   11e3e:	482d      	ldr	r0, [pc, #180]	; (11ef4 <main+0x2e4>)
   11e40:	f044 0201 	orr.w	r2, r4, #1
   11e44:	f01a fb93 	bl	2c56e <log_1>
						continue;
   11e48:	e791      	b.n	11d6e <main+0x15e>
				if ((fds.revents & POLLERR) == POLLERR) {
   11e4a:	88eb      	ldrh	r3, [r5, #6]
   11e4c:	071a      	lsls	r2, r3, #28
   11e4e:	d505      	bpl.n	11e5c <main+0x24c>
					LOG_ERR("POLLERR");
   11e50:	4829      	ldr	r0, [pc, #164]	; (11ef8 <main+0x2e8>)
   11e52:	f044 0101 	orr.w	r1, r4, #1
   11e56:	f01a fb7b 	bl	2c550 <log_0>
   11e5a:	e79b      	b.n	11d94 <main+0x184>
				if ((fds.revents & POLLNVAL) == POLLNVAL) {
   11e5c:	069b      	lsls	r3, r3, #26
   11e5e:	d586      	bpl.n	11d6e <main+0x15e>
					LOG_ERR("POLLNVAL");
   11e60:	4826      	ldr	r0, [pc, #152]	; (11efc <main+0x2ec>)
   11e62:	f044 0101 	orr.w	r1, r4, #1
   11e66:	f01a fb73 	bl	2c550 <log_0>
					continue;
   11e6a:	e780      	b.n	11d6e <main+0x15e>
	return z_impl_k_sleep(timeout);
   11e6c:	2100      	movs	r1, #0
   11e6e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11e72:	f012 fb2d 	bl	244d0 <z_impl_k_sleep>
   11e76:	e77a      	b.n	11d6e <main+0x15e>
   11e78:	0002ec7c 	.word	0x0002ec7c
   11e7c:	0002ecec 	.word	0x0002ecec
   11e80:	0002fdea 	.word	0x0002fdea
   11e84:	0002fc13 	.word	0x0002fc13
   11e88:	0002fc37 	.word	0x0002fc37
   11e8c:	0002fe4d 	.word	0x0002fe4d
   11e90:	000114c5 	.word	0x000114c5
   11e94:	20020c24 	.word	0x20020c24
   11e98:	20021444 	.word	0x20021444
   11e9c:	0002fe61 	.word	0x0002fe61
   11ea0:	20024288 	.word	0x20024288
   11ea4:	0002fe72 	.word	0x0002fe72
   11ea8:	00011555 	.word	0x00011555
   11eac:	0002fec8 	.word	0x0002fec8
   11eb0:	2002432b 	.word	0x2002432b
   11eb4:	2002451f 	.word	0x2002451f
   11eb8:	0002fed4 	.word	0x0002fed4
   11ebc:	0003009a 	.word	0x0003009a
   11ec0:	00011445 	.word	0x00011445
   11ec4:	0002fef6 	.word	0x0002fef6
   11ec8:	0002ff21 	.word	0x0002ff21
   11ecc:	0002ff49 	.word	0x0002ff49
   11ed0:	0002ff70 	.word	0x0002ff70
   11ed4:	200242aa 	.word	0x200242aa
   11ed8:	200214a8 	.word	0x200214a8
   11edc:	0002ff89 	.word	0x0002ff89
   11ee0:	0002fb29 	.word	0x0002fb29
   11ee4:	0002ffd3 	.word	0x0002ffd3
   11ee8:	0002fe8f 	.word	0x0002fe8f
   11eec:	0002fea5 	.word	0x0002fea5
   11ef0:	0002ff99 	.word	0x0002ff99
   11ef4:	0002ffad 	.word	0x0002ffad
   11ef8:	0002ffc2 	.word	0x0002ffc2
   11efc:	0002ffca 	.word	0x0002ffca
   11f00:	0002fe12 	.word	0x0002fe12
   11f04:	0002fe2a 	.word	0x0002fe2a

00011f08 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   11f08:	2803      	cmp	r0, #3
{
   11f0a:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   11f0c:	d906      	bls.n	11f1c <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   11f0e:	f01a ff20 	bl	2cd52 <__errno>
   11f12:	2309      	movs	r3, #9
   11f14:	6003      	str	r3, [r0, #0]
   11f16:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   11f1a:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11f1c:	220c      	movs	r2, #12
   11f1e:	4b05      	ldr	r3, [pc, #20]	; (11f34 <_check_fd+0x2c>)
   11f20:	fb02 3000 	mla	r0, r2, r0, r3
   11f24:	3008      	adds	r0, #8
   11f26:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   11f2a:	2b00      	cmp	r3, #0
   11f2c:	d0ef      	beq.n	11f0e <_check_fd+0x6>
	return 0;
   11f2e:	2000      	movs	r0, #0
   11f30:	e7f3      	b.n	11f1a <_check_fd+0x12>
   11f32:	bf00      	nop
   11f34:	200214c0 	.word	0x200214c0

00011f38 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   11f38:	b570      	push	{r4, r5, r6, lr}
   11f3a:	4604      	mov	r4, r0
   11f3c:	460d      	mov	r5, r1
   11f3e:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   11f40:	f7ff ffe2 	bl	11f08 <_check_fd>
   11f44:	2800      	cmp	r0, #0
   11f46:	db0a      	blt.n	11f5e <z_get_fd_obj+0x26>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
   11f48:	4a08      	ldr	r2, [pc, #32]	; (11f6c <z_get_fd_obj+0x34>)
   11f4a:	b155      	cbz	r5, 11f62 <z_get_fd_obj+0x2a>
   11f4c:	230c      	movs	r3, #12
   11f4e:	fb03 2304 	mla	r3, r3, r4, r2
   11f52:	685b      	ldr	r3, [r3, #4]
   11f54:	42ab      	cmp	r3, r5
   11f56:	d004      	beq.n	11f62 <z_get_fd_obj+0x2a>
		errno = err;
   11f58:	f01a fefb 	bl	2cd52 <__errno>
   11f5c:	6006      	str	r6, [r0, #0]
		return NULL;
   11f5e:	2000      	movs	r0, #0
   11f60:	e002      	b.n	11f68 <z_get_fd_obj+0x30>
		return NULL;
	}

	return fd_entry->obj;
   11f62:	200c      	movs	r0, #12
   11f64:	4344      	muls	r4, r0
   11f66:	5910      	ldr	r0, [r2, r4]
}
   11f68:	bd70      	pop	{r4, r5, r6, pc}
   11f6a:	bf00      	nop
   11f6c:	200214c0 	.word	0x200214c0

00011f70 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
   11f70:	b538      	push	{r3, r4, r5, lr}
   11f72:	4605      	mov	r5, r0
   11f74:	460c      	mov	r4, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   11f76:	f7ff ffc7 	bl	11f08 <_check_fd>
   11f7a:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
   11f7c:	bfa3      	ittte	ge
   11f7e:	230c      	movge	r3, #12
   11f80:	fb03 f005 	mulge.w	r0, r3, r5
   11f84:	4a03      	ldrge	r2, [pc, #12]	; (11f94 <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
   11f86:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
   11f88:	bfa1      	itttt	ge
   11f8a:	1813      	addge	r3, r2, r0
   11f8c:	685b      	ldrge	r3, [r3, #4]
   11f8e:	6023      	strge	r3, [r4, #0]

	return fd_entry->obj;
   11f90:	5810      	ldrge	r0, [r2, r0]
}
   11f92:	bd38      	pop	{r3, r4, r5, pc}
   11f94:	200214c0 	.word	0x200214c0

00011f98 <z_reserve_fd>:

int z_reserve_fd(void)
{
   11f98:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   11f9a:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   11f9c:	f04f 33ff 	mov.w	r3, #4294967295
   11fa0:	f04f 32ff 	mov.w	r2, #4294967295
   11fa4:	4812      	ldr	r0, [pc, #72]	; (11ff0 <z_reserve_fd+0x58>)
   11fa6:	f010 fe55 	bl	22c54 <z_impl_k_mutex_lock>
   11faa:	4b12      	ldr	r3, [pc, #72]	; (11ff4 <z_reserve_fd+0x5c>)
   11fac:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
   11fb0:	b17a      	cbz	r2, 11fd2 <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   11fb2:	3401      	adds	r4, #1
   11fb4:	2c04      	cmp	r4, #4
   11fb6:	f103 030c 	add.w	r3, r3, #12
   11fba:	d1f7      	bne.n	11fac <z_reserve_fd+0x14>
	errno = ENFILE;
   11fbc:	f01a fec9 	bl	2cd52 <__errno>
   11fc0:	2317      	movs	r3, #23
	return -1;
   11fc2:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   11fc6:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   11fc8:	4809      	ldr	r0, [pc, #36]	; (11ff0 <z_reserve_fd+0x58>)
   11fca:	f010 ff3d 	bl	22e48 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   11fce:	4620      	mov	r0, r4
   11fd0:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11fd2:	e8d3 1fef 	ldaex	r1, [r3]
   11fd6:	3101      	adds	r1, #1
   11fd8:	e8c3 1fe0 	stlex	r0, r1, [r3]
   11fdc:	2800      	cmp	r0, #0
   11fde:	d1f8      	bne.n	11fd2 <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
   11fe0:	230c      	movs	r3, #12
   11fe2:	4363      	muls	r3, r4
   11fe4:	4904      	ldr	r1, [pc, #16]	; (11ff8 <z_reserve_fd+0x60>)
   11fe6:	18c8      	adds	r0, r1, r3
   11fe8:	50ca      	str	r2, [r1, r3]
		fdtable[fd].vtable = NULL;
   11fea:	6042      	str	r2, [r0, #4]
   11fec:	e7ec      	b.n	11fc8 <z_reserve_fd+0x30>
   11fee:	bf00      	nop
   11ff0:	20020b7c 	.word	0x20020b7c
   11ff4:	200214c8 	.word	0x200214c8
   11ff8:	200214c0 	.word	0x200214c0

00011ffc <z_finalize_fd>:
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   11ffc:	230c      	movs	r3, #12
{
   11ffe:	b510      	push	{r4, lr}
	fdtable[fd].obj = obj;
   12000:	4358      	muls	r0, r3
   12002:	4c02      	ldr	r4, [pc, #8]	; (1200c <z_finalize_fd+0x10>)
   12004:	1823      	adds	r3, r4, r0
   12006:	5021      	str	r1, [r4, r0]
	fdtable[fd].vtable = vtable;
   12008:	605a      	str	r2, [r3, #4]
}
   1200a:	bd10      	pop	{r4, pc}
   1200c:	200214c0 	.word	0x200214c0

00012010 <z_free_fd>:
		old_rc = atomic_get(&fdtable[fd].refcount);
   12010:	230c      	movs	r3, #12
   12012:	4a0e      	ldr	r2, [pc, #56]	; (1204c <z_free_fd+0x3c>)

void z_free_fd(int fd)
{
   12014:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   12016:	fb03 2300 	mla	r3, r3, r0, r2
   1201a:	3308      	adds	r3, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1201c:	e8d3 1faf 	lda	r1, [r3]
		if (!old_rc) {
   12020:	b191      	cbz	r1, 12048 <z_free_fd+0x38>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   12022:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12024:	e8d3 5fef 	ldaex	r5, [r3]
   12028:	428d      	cmp	r5, r1
   1202a:	d104      	bne.n	12036 <z_free_fd+0x26>
   1202c:	e8c3 4fec 	stlex	ip, r4, [r3]
   12030:	f1bc 0f00 	cmp.w	ip, #0
   12034:	d1f6      	bne.n	12024 <z_free_fd+0x14>
   12036:	d1f1      	bne.n	1201c <z_free_fd+0xc>
	if (old_rc != 1) {
   12038:	2901      	cmp	r1, #1
   1203a:	d105      	bne.n	12048 <z_free_fd+0x38>
	fdtable[fd].obj = NULL;
   1203c:	230c      	movs	r3, #12
   1203e:	4358      	muls	r0, r3
   12040:	2300      	movs	r3, #0
   12042:	1811      	adds	r1, r2, r0
   12044:	5013      	str	r3, [r2, r0]
	fdtable[fd].vtable = NULL;
   12046:	604b      	str	r3, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   12048:	bd30      	pop	{r4, r5, pc}
   1204a:	bf00      	nop
   1204c:	200214c0 	.word	0x200214c0

00012050 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   12050:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   12052:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
   12054:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   12058:	2b02      	cmp	r3, #2
{
   1205a:	4604      	mov	r4, r0
   1205c:	460e      	mov	r6, r1
	notify->result = res;
   1205e:	6081      	str	r1, [r0, #8]
	switch (method) {
   12060:	d010      	beq.n	12084 <sys_notify_finalize+0x34>
   12062:	2b03      	cmp	r3, #3
   12064:	d004      	beq.n	12070 <sys_notify_finalize+0x20>
   12066:	2b01      	cmp	r3, #1
   12068:	d10f      	bne.n	1208a <sys_notify_finalize+0x3a>
   1206a:	2500      	movs	r5, #0
   1206c:	4628      	mov	r0, r5
   1206e:	e001      	b.n	12074 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   12070:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   12072:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   12074:	2300      	movs	r3, #0
   12076:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   12078:	b110      	cbz	r0, 12080 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   1207a:	4631      	mov	r1, r6
   1207c:	f013 fc02 	bl	25884 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   12080:	4628      	mov	r0, r5
   12082:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = 0;
   12084:	2500      	movs	r5, #0
		sig = notify->method.signal;
   12086:	6800      	ldr	r0, [r0, #0]
		break;
   12088:	e7f4      	b.n	12074 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   1208a:	2345      	movs	r3, #69	; 0x45
   1208c:	4a05      	ldr	r2, [pc, #20]	; (120a4 <sys_notify_finalize+0x54>)
   1208e:	4906      	ldr	r1, [pc, #24]	; (120a8 <sys_notify_finalize+0x58>)
   12090:	4806      	ldr	r0, [pc, #24]	; (120ac <sys_notify_finalize+0x5c>)
   12092:	f01a f810 	bl	2c0b6 <printk>
   12096:	2145      	movs	r1, #69	; 0x45
   12098:	4802      	ldr	r0, [pc, #8]	; (120a4 <sys_notify_finalize+0x54>)
   1209a:	f01a fa29 	bl	2c4f0 <assert_post_action>
	sys_notify_generic_callback rv = 0;
   1209e:	2500      	movs	r5, #0
   120a0:	e7e7      	b.n	12072 <sys_notify_finalize+0x22>
   120a2:	bf00      	nop
   120a4:	000300dc 	.word	0x000300dc
   120a8:	00032bdb 	.word	0x00032bdb
   120ac:	000300ff 	.word	0x000300ff

000120b0 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
   120b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120b4:	b087      	sub	sp, #28
   120b6:	460f      	mov	r7, r1
   120b8:	4619      	mov	r1, r3
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
   120ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
   120bc:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   120be:	2514      	movs	r5, #20
{
   120c0:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
   120c2:	4698      	mov	r8, r3
{
   120c4:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   120c8:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
   120cc:	4c1e      	ldr	r4, [pc, #120]	; (12148 <print_digits+0x98>)
   120ce:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   120d2:	ea50 0301 	orrs.w	r3, r0, r1
   120d6:	d11a      	bne.n	1210e <print_digits+0x5e>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
   120d8:	2d14      	cmp	r5, #20
		buf[i] = '0';
   120da:	bf08      	it	eq
   120dc:	2330      	moveq	r3, #48	; 0x30
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   120de:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
   120e0:	bf18      	it	ne
   120e2:	3501      	addne	r5, #1
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   120e4:	442c      	add	r4, r5
		buf[i] = '0';
   120e6:	bf08      	it	eq
   120e8:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   120ec:	2c15      	cmp	r4, #21
   120ee:	d01b      	beq.n	12128 <print_digits+0x78>
   120f0:	3c15      	subs	r4, #21

	for (/**/; pad > 0 && pad_before; pad--) {
   120f2:	2c00      	cmp	r4, #0
   120f4:	dc1a      	bgt.n	1212c <print_digits+0x7c>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
   120f6:	f81d 0005 	ldrb.w	r0, [sp, r5]
   120fa:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
   120fc:	3501      	adds	r5, #1
		out(buf[i], ctx);
   120fe:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
   12100:	2d15      	cmp	r5, #21
   12102:	d1f8      	bne.n	120f6 <print_digits+0x46>
	}
	for (/**/; pad > 0; pad--) {
   12104:	2c00      	cmp	r4, #0
   12106:	dc19      	bgt.n	1213c <print_digits+0x8c>
		out(pad_char, ctx);
	}
}
   12108:	b007      	add	sp, #28
   1210a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
   1210e:	4642      	mov	r2, r8
   12110:	464b      	mov	r3, r9
   12112:	f7fa fba1 	bl	c858 <__aeabi_uldivmod>
   12116:	4684      	mov	ip, r0
   12118:	460b      	mov	r3, r1
   1211a:	5ca2      	ldrb	r2, [r4, r2]
		num /= base;
   1211c:	4660      	mov	r0, ip
		buf[i] = "0123456789abcdef"[num % base];
   1211e:	f80d 2005 	strb.w	r2, [sp, r5]
		num /= base;
   12122:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   12124:	3d01      	subs	r5, #1
   12126:	e7d4      	b.n	120d2 <print_digits+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   12128:	2400      	movs	r4, #0
	for (/**/; i < DIGITS_BUFLEN; i++) {
   1212a:	e7e4      	b.n	120f6 <print_digits+0x46>
	for (/**/; pad > 0 && pad_before; pad--) {
   1212c:	f1bb 0f00 	cmp.w	fp, #0
   12130:	d0e1      	beq.n	120f6 <print_digits+0x46>
		out(pad_char, ctx);
   12132:	4639      	mov	r1, r7
   12134:	4650      	mov	r0, sl
   12136:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
   12138:	3c01      	subs	r4, #1
   1213a:	e7da      	b.n	120f2 <print_digits+0x42>
		out(pad_char, ctx);
   1213c:	4639      	mov	r1, r7
   1213e:	4650      	mov	r0, sl
   12140:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
   12142:	3c01      	subs	r4, #1
   12144:	e7de      	b.n	12104 <print_digits+0x54>
   12146:	bf00      	nop
   12148:	0003011c 	.word	0x0003011c

0001214c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1214c:	680b      	ldr	r3, [r1, #0]
   1214e:	3301      	adds	r3, #1
   12150:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   12152:	4b01      	ldr	r3, [pc, #4]	; (12158 <char_out+0xc>)
   12154:	681b      	ldr	r3, [r3, #0]
   12156:	4718      	bx	r3
   12158:	2002042c 	.word	0x2002042c

0001215c <__printk_hook_install>:
	_char_out = fn;
   1215c:	4b01      	ldr	r3, [pc, #4]	; (12164 <__printk_hook_install+0x8>)
   1215e:	6018      	str	r0, [r3, #0]
}
   12160:	4770      	bx	lr
   12162:	bf00      	nop
   12164:	2002042c 	.word	0x2002042c

00012168 <z_vprintk>:
{
   12168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   1216c:	2600      	movs	r6, #0
{
   1216e:	4605      	mov	r5, r0
   12170:	468b      	mov	fp, r1
   12172:	461c      	mov	r4, r3
	int min_width = -1;
   12174:	f04f 38ff 	mov.w	r8, #4294967295
	enum pad_type padding = PAD_NONE;
   12178:	4637      	mov	r7, r6
{
   1217a:	b087      	sub	sp, #28
   1217c:	f102 3aff 	add.w	sl, r2, #4294967295
			might_format = 0;
   12180:	f04f 0900 	mov.w	r9, #0
					break;
   12184:	e007      	b.n	12196 <z_vprintk+0x2e>
		if (!might_format) {
   12186:	f1b9 0f00 	cmp.w	r9, #0
   1218a:	d10b      	bne.n	121a4 <z_vprintk+0x3c>
			if (*fmt != '%') {
   1218c:	2825      	cmp	r0, #37	; 0x25
   1218e:	f000 810a 	beq.w	123a6 <z_vprintk+0x23e>
				out((int)*fmt, ctx);
   12192:	4659      	mov	r1, fp
   12194:	47a8      	blx	r5
	while (*fmt) {
   12196:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   1219a:	2800      	cmp	r0, #0
   1219c:	d1f3      	bne.n	12186 <z_vprintk+0x1e>
}
   1219e:	b007      	add	sp, #28
   121a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   121a4:	287a      	cmp	r0, #122	; 0x7a
   121a6:	d80a      	bhi.n	121be <z_vprintk+0x56>
   121a8:	2862      	cmp	r0, #98	; 0x62
   121aa:	d810      	bhi.n	121ce <z_vprintk+0x66>
   121ac:	2830      	cmp	r0, #48	; 0x30
   121ae:	d051      	beq.n	12254 <z_vprintk+0xec>
   121b0:	d844      	bhi.n	1223c <z_vprintk+0xd4>
   121b2:	2825      	cmp	r0, #37	; 0x25
   121b4:	f000 80f5 	beq.w	123a2 <z_vprintk+0x23a>
   121b8:	282d      	cmp	r0, #45	; 0x2d
   121ba:	f000 80fb 	beq.w	123b4 <z_vprintk+0x24c>
					out((int)'%', ctx);
   121be:	4659      	mov	r1, fp
   121c0:	2025      	movs	r0, #37	; 0x25
   121c2:	47a8      	blx	r5
					out((int)*fmt, ctx);
   121c4:	4659      	mov	r1, fp
   121c6:	f89a 0000 	ldrb.w	r0, [sl]
   121ca:	47a8      	blx	r5
   121cc:	e7d8      	b.n	12180 <z_vprintk+0x18>
   121ce:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
   121d2:	2b17      	cmp	r3, #23
   121d4:	d8f3      	bhi.n	121be <z_vprintk+0x56>
   121d6:	a201      	add	r2, pc, #4	; (adr r2, 121dc <z_vprintk+0x74>)
   121d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   121dc:	0001239b 	.word	0x0001239b
   121e0:	0001229d 	.word	0x0001229d
   121e4:	000121bf 	.word	0x000121bf
   121e8:	000121bf 	.word	0x000121bf
   121ec:	000121bf 	.word	0x000121bf
   121f0:	0001227f 	.word	0x0001227f
   121f4:	0001229d 	.word	0x0001229d
   121f8:	000121bf 	.word	0x000121bf
   121fc:	000121bf 	.word	0x000121bf
   12200:	0001227f 	.word	0x0001227f
   12204:	000121bf 	.word	0x000121bf
   12208:	000121bf 	.word	0x000121bf
   1220c:	000121bf 	.word	0x000121bf
   12210:	00012317 	.word	0x00012317
   12214:	000121bf 	.word	0x000121bf
   12218:	000121bf 	.word	0x000121bf
   1221c:	00012363 	.word	0x00012363
   12220:	000121bf 	.word	0x000121bf
   12224:	0001229d 	.word	0x0001229d
   12228:	000121bf 	.word	0x000121bf
   1222c:	000121bf 	.word	0x000121bf
   12230:	00012245 	.word	0x00012245
   12234:	000121bf 	.word	0x000121bf
   12238:	0001227f 	.word	0x0001227f
			switch (*fmt) {
   1223c:	2839      	cmp	r0, #57	; 0x39
   1223e:	d915      	bls.n	1226c <z_vprintk+0x104>
   12240:	2858      	cmp	r0, #88	; 0x58
   12242:	d1bc      	bne.n	121be <z_vprintk+0x56>
				if (*fmt == 'p') {
   12244:	f89a 3000 	ldrb.w	r3, [sl]
   12248:	2b70      	cmp	r3, #112	; 0x70
   1224a:	d16e      	bne.n	1232a <z_vprintk+0x1c2>
					x = va_arg(ap, unsigned int);
   1224c:	2300      	movs	r3, #0
   1224e:	f854 2b04 	ldr.w	r2, [r4], #4
   12252:	e075      	b.n	12340 <z_vprintk+0x1d8>
				if (min_width < 0 && padding == PAD_NONE) {
   12254:	f1b8 0f00 	cmp.w	r8, #0
   12258:	da0b      	bge.n	12272 <z_vprintk+0x10a>
   1225a:	2f00      	cmp	r7, #0
   1225c:	f000 80ac 	beq.w	123b8 <z_vprintk+0x250>
					min_width = *fmt - '0';
   12260:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   12264:	2f00      	cmp	r7, #0
   12266:	bf08      	it	eq
   12268:	2702      	moveq	r7, #2
   1226a:	e794      	b.n	12196 <z_vprintk+0x2e>
				if (min_width < 0) {
   1226c:	f1b8 0f00 	cmp.w	r8, #0
   12270:	dbf6      	blt.n	12260 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   12272:	230a      	movs	r3, #10
   12274:	fb03 0808 	mla	r8, r3, r8, r0
   12278:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   1227c:	e7f2      	b.n	12264 <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
   1227e:	2868      	cmp	r0, #104	; 0x68
   12280:	d103      	bne.n	1228a <z_vprintk+0x122>
   12282:	2e68      	cmp	r6, #104	; 0x68
   12284:	d106      	bne.n	12294 <z_vprintk+0x12c>
					length_mod = 'H';
   12286:	2648      	movs	r6, #72	; 0x48
   12288:	e785      	b.n	12196 <z_vprintk+0x2e>
				} else if (*fmt == 'l' && length_mod == 'l') {
   1228a:	286c      	cmp	r0, #108	; 0x6c
   1228c:	d102      	bne.n	12294 <z_vprintk+0x12c>
   1228e:	2e6c      	cmp	r6, #108	; 0x6c
   12290:	f000 8094 	beq.w	123bc <z_vprintk+0x254>
				} else if (length_mod == 0) {
   12294:	2e00      	cmp	r6, #0
   12296:	d192      	bne.n	121be <z_vprintk+0x56>
   12298:	4606      	mov	r6, r0
   1229a:	e77c      	b.n	12196 <z_vprintk+0x2e>
				if (length_mod == 'z') {
   1229c:	2e7a      	cmp	r6, #122	; 0x7a
   1229e:	d106      	bne.n	122ae <z_vprintk+0x146>
					d = va_arg(ap, long);
   122a0:	46a1      	mov	r9, r4
   122a2:	f859 2b04 	ldr.w	r2, [r9], #4
   122a6:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   122a8:	2875      	cmp	r0, #117	; 0x75
   122aa:	d123      	bne.n	122f4 <z_vprintk+0x18c>
   122ac:	e00f      	b.n	122ce <z_vprintk+0x166>
				} else if (length_mod == 'l') {
   122ae:	2e6c      	cmp	r6, #108	; 0x6c
   122b0:	d0f6      	beq.n	122a0 <z_vprintk+0x138>
				} else if (length_mod == 'L') {
   122b2:	2e4c      	cmp	r6, #76	; 0x4c
   122b4:	d105      	bne.n	122c2 <z_vprintk+0x15a>
					long long lld = va_arg(ap, long long);
   122b6:	3407      	adds	r4, #7
   122b8:	f024 0907 	bic.w	r9, r4, #7
					d = (printk_val_t) lld;
   122bc:	e8f9 2302 	ldrd	r2, r3, [r9], #8
   122c0:	e7f2      	b.n	122a8 <z_vprintk+0x140>
				} else if (*fmt == 'u') {
   122c2:	2875      	cmp	r0, #117	; 0x75
					d = va_arg(ap, unsigned int);
   122c4:	6822      	ldr	r2, [r4, #0]
   122c6:	f104 0904 	add.w	r9, r4, #4
				} else if (*fmt == 'u') {
   122ca:	d112      	bne.n	122f2 <z_vprintk+0x18a>
					d = va_arg(ap, unsigned int);
   122cc:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
   122ce:	1ef8      	subs	r0, r7, #3
   122d0:	bf18      	it	ne
   122d2:	2001      	movne	r0, #1
   122d4:	2f01      	cmp	r7, #1
   122d6:	bf0c      	ite	eq
   122d8:	2430      	moveq	r4, #48	; 0x30
   122da:	2420      	movne	r4, #32
   122dc:	9001      	str	r0, [sp, #4]
   122de:	200a      	movs	r0, #10
   122e0:	e9cd 4802 	strd	r4, r8, [sp, #8]
   122e4:	9000      	str	r0, [sp, #0]
   122e6:	4659      	mov	r1, fp
   122e8:	4628      	mov	r0, r5
   122ea:	f7ff fee1 	bl	120b0 <print_digits>
}
   122ee:	464c      	mov	r4, r9
   122f0:	e746      	b.n	12180 <z_vprintk+0x18>
					d = va_arg(ap, int);
   122f2:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   122f4:	2a00      	cmp	r2, #0
   122f6:	f173 0100 	sbcs.w	r1, r3, #0
   122fa:	dae8      	bge.n	122ce <z_vprintk+0x166>
					out((int)'-', ctx);
   122fc:	4659      	mov	r1, fp
   122fe:	202d      	movs	r0, #45	; 0x2d
   12300:	e9cd 2304 	strd	r2, r3, [sp, #16]
   12304:	47a8      	blx	r5
					d = -d;
   12306:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1230a:	4252      	negs	r2, r2
   1230c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
   12310:	f108 38ff 	add.w	r8, r8, #4294967295
   12314:	e7db      	b.n	122ce <z_vprintk+0x166>
				out('0', ctx);
   12316:	4659      	mov	r1, fp
   12318:	2030      	movs	r0, #48	; 0x30
   1231a:	47a8      	blx	r5
				out('x', ctx);
   1231c:	4659      	mov	r1, fp
   1231e:	2078      	movs	r0, #120	; 0x78
   12320:	47a8      	blx	r5
				min_width = sizeof(void *) * 2;
   12322:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
   12326:	2701      	movs	r7, #1
   12328:	e78c      	b.n	12244 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
   1232a:	2e6c      	cmp	r6, #108	; 0x6c
   1232c:	d08e      	beq.n	1224c <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
   1232e:	2e4c      	cmp	r6, #76	; 0x4c
   12330:	d18c      	bne.n	1224c <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
   12332:	1de3      	adds	r3, r4, #7
   12334:	f023 0307 	bic.w	r3, r3, #7
   12338:	461c      	mov	r4, r3
   1233a:	685b      	ldr	r3, [r3, #4]
   1233c:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
   12340:	1ef8      	subs	r0, r7, #3
   12342:	bf18      	it	ne
   12344:	2001      	movne	r0, #1
   12346:	2f01      	cmp	r7, #1
   12348:	bf0c      	ite	eq
   1234a:	2130      	moveq	r1, #48	; 0x30
   1234c:	2120      	movne	r1, #32
   1234e:	e9cd 1802 	strd	r1, r8, [sp, #8]
   12352:	2110      	movs	r1, #16
   12354:	9001      	str	r0, [sp, #4]
   12356:	9100      	str	r1, [sp, #0]
   12358:	4628      	mov	r0, r5
   1235a:	4659      	mov	r1, fp
   1235c:	f7ff fea8 	bl	120b0 <print_digits>
   12360:	e70e      	b.n	12180 <z_vprintk+0x18>
				char *s = va_arg(ap, char *);
   12362:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
   12366:	4699      	mov	r9, r3
   12368:	464a      	mov	r2, r9
   1236a:	f819 0b01 	ldrb.w	r0, [r9], #1
   1236e:	b978      	cbnz	r0, 12390 <z_vprintk+0x228>
				if (padding == PAD_SPACE_AFTER) {
   12370:	2f03      	cmp	r7, #3
   12372:	d125      	bne.n	123c0 <z_vprintk+0x258>
					int remaining = min_width - (s - start);
   12374:	eba2 0903 	sub.w	r9, r2, r3
   12378:	eba8 0909 	sub.w	r9, r8, r9
					while (remaining-- > 0) {
   1237c:	f1b9 0f00 	cmp.w	r9, #0
   12380:	f77f aefe 	ble.w	12180 <z_vprintk+0x18>
						out(' ', ctx);
   12384:	4659      	mov	r1, fp
   12386:	2020      	movs	r0, #32
   12388:	47a8      	blx	r5
   1238a:	f109 39ff 	add.w	r9, r9, #4294967295
   1238e:	e7f5      	b.n	1237c <z_vprintk+0x214>
					out((int)(*s++), ctx);
   12390:	4659      	mov	r1, fp
   12392:	9304      	str	r3, [sp, #16]
   12394:	47a8      	blx	r5
   12396:	9b04      	ldr	r3, [sp, #16]
   12398:	e7e6      	b.n	12368 <z_vprintk+0x200>
				out(c, ctx);
   1239a:	4659      	mov	r1, fp
   1239c:	f854 0b04 	ldr.w	r0, [r4], #4
   123a0:	e713      	b.n	121ca <z_vprintk+0x62>
				out((int)'%', ctx);
   123a2:	4659      	mov	r1, fp
   123a4:	e711      	b.n	121ca <z_vprintk+0x62>
				length_mod = 0;
   123a6:	464e      	mov	r6, r9
				padding = PAD_NONE;
   123a8:	464f      	mov	r7, r9
				min_width = -1;
   123aa:	f04f 38ff 	mov.w	r8, #4294967295
				might_format = 1;
   123ae:	f04f 0901 	mov.w	r9, #1
   123b2:	e6f0      	b.n	12196 <z_vprintk+0x2e>
			switch (*fmt) {
   123b4:	2703      	movs	r7, #3
   123b6:	e6ee      	b.n	12196 <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
   123b8:	2701      	movs	r7, #1
   123ba:	e6ec      	b.n	12196 <z_vprintk+0x2e>
					length_mod = 'L';
   123bc:	264c      	movs	r6, #76	; 0x4c
   123be:	e6ea      	b.n	12196 <z_vprintk+0x2e>
			might_format = 0;
   123c0:	4681      	mov	r9, r0
   123c2:	e6e8      	b.n	12196 <z_vprintk+0x2e>

000123c4 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   123c4:	b507      	push	{r0, r1, r2, lr}
   123c6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   123c8:	2100      	movs	r1, #0
{
   123ca:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   123cc:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
   123ce:	4803      	ldr	r0, [pc, #12]	; (123dc <vprintk+0x18>)
   123d0:	a901      	add	r1, sp, #4
   123d2:	f7ff fec9 	bl	12168 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   123d6:	b003      	add	sp, #12
   123d8:	f85d fb04 	ldr.w	pc, [sp], #4
   123dc:	0001214d 	.word	0x0001214d

000123e0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   123e0:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   123e2:	2500      	movs	r5, #0
{
   123e4:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   123e6:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   123ea:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   123ec:	a901      	add	r1, sp, #4
   123ee:	4805      	ldr	r0, [pc, #20]	; (12404 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   123f0:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   123f2:	f7ff feb9 	bl	12168 <z_vprintk>

	if (ctx.count < ctx.max) {
   123f6:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   123fa:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   123fc:	bfb8      	it	lt
   123fe:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   12400:	b005      	add	sp, #20
   12402:	bd30      	pop	{r4, r5, pc}
   12404:	0002c091 	.word	0x0002c091

00012408 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1240c:	ed2d 8b02 	vpush	{d8}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12410:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   12414:	b083      	sub	sp, #12
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12416:	f019 0f08 	tst.w	r9, #8
{
   1241a:	4604      	mov	r4, r0
   1241c:	9201      	str	r2, [sp, #4]
	if (processing) {
   1241e:	d024      	beq.n	1246a <process_event+0x62>
		if (evt == EVT_COMPLETE) {
   12420:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12422:	bf0c      	ite	eq
   12424:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   12428:	f049 0920 	orrne.w	r9, r9, #32
   1242c:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   12430:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12432:	4620      	mov	r0, r4
   12434:	f012 fab6 	bl	249a4 <z_spin_unlock_valid>
   12438:	b968      	cbnz	r0, 12456 <process_event+0x4e>
   1243a:	2384      	movs	r3, #132	; 0x84
   1243c:	4aa2      	ldr	r2, [pc, #648]	; (126c8 <process_event+0x2c0>)
   1243e:	49a3      	ldr	r1, [pc, #652]	; (126cc <process_event+0x2c4>)
   12440:	48a3      	ldr	r0, [pc, #652]	; (126d0 <process_event+0x2c8>)
   12442:	f019 fe38 	bl	2c0b6 <printk>
   12446:	4621      	mov	r1, r4
   12448:	48a2      	ldr	r0, [pc, #648]	; (126d4 <process_event+0x2cc>)
   1244a:	f019 fe34 	bl	2c0b6 <printk>
   1244e:	2184      	movs	r1, #132	; 0x84
   12450:	489d      	ldr	r0, [pc, #628]	; (126c8 <process_event+0x2c0>)
   12452:	f01a f84d 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   12456:	9b01      	ldr	r3, [sp, #4]
   12458:	f383 8811 	msr	BASEPRI, r3
   1245c:	f3bf 8f6f 	isb	sy
}
   12460:	b003      	add	sp, #12
   12462:	ecbd 8b02 	vpop	{d8}
   12466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   1246a:	4f9b      	ldr	r7, [pc, #620]	; (126d8 <process_event+0x2d0>)
   1246c:	f8df 8260 	ldr.w	r8, [pc, #608]	; 126d0 <process_event+0x2c8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12470:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   12474:	2902      	cmp	r1, #2
   12476:	d106      	bne.n	12486 <process_event+0x7e>
			evt = process_recheck(mgr);
   12478:	4620      	mov	r0, r4
   1247a:	f019 fe36 	bl	2c0ea <process_recheck>
		if (evt == EVT_NOP) {
   1247e:	2800      	cmp	r0, #0
   12480:	d0d6      	beq.n	12430 <process_event+0x28>
		if (evt == EVT_COMPLETE) {
   12482:	2801      	cmp	r0, #1
   12484:	d16a      	bne.n	1255c <process_event+0x154>
			res = mgr->last_res;
   12486:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1248a:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   1248c:	f1bb 0f00 	cmp.w	fp, #0
   12490:	da1c      	bge.n	124cc <process_event+0xc4>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   12492:	2600      	movs	r6, #0
		*clients = mgr->clients;
   12494:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12496:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   1249a:	e9c4 6600 	strd	r6, r6, [r4]
   1249e:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   124a2:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   124a4:	9600      	str	r6, [sp, #0]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   124a6:	8ba3      	ldrh	r3, [r4, #28]
   124a8:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   124ac:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   124ae:	ee08 2a10 	vmov	s16, r2
				   && !sys_slist_is_empty(&mgr->monitors);
   124b2:	d003      	beq.n	124bc <process_event+0xb4>
		if (do_monitors
   124b4:	68a2      	ldr	r2, [r4, #8]
   124b6:	2a00      	cmp	r2, #0
   124b8:	f040 811e 	bne.w	126f8 <process_event+0x2f0>
		    || !sys_slist_is_empty(&clients)
   124bc:	b91d      	cbnz	r5, 124c6 <process_event+0xbe>
		    || (transit != NULL)) {
   124be:	9a00      	ldr	r2, [sp, #0]
   124c0:	2a00      	cmp	r2, #0
   124c2:	f000 8164 	beq.w	1278e <process_event+0x386>
   124c6:	f04f 0900 	mov.w	r9, #0
   124ca:	e117      	b.n	126fc <process_event+0x2f4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   124cc:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   124d0:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   124d2:	2901      	cmp	r1, #1
   124d4:	d823      	bhi.n	1251e <process_event+0x116>
	list->head = NULL;
   124d6:	2100      	movs	r1, #0
   124d8:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   124dc:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   124de:	6825      	ldr	r5, [r4, #0]
   124e0:	b29b      	uxth	r3, r3
	list->tail = NULL;
   124e2:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   124e6:	d10c      	bne.n	12502 <process_event+0xfa>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   124e8:	428d      	cmp	r5, r1
   124ea:	462a      	mov	r2, r5
   124ec:	bf38      	it	cc
   124ee:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   124f0:	b12a      	cbz	r2, 124fe <process_event+0xf6>
				mgr->refs += 1U;
   124f2:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   124f4:	6812      	ldr	r2, [r2, #0]
   124f6:	3101      	adds	r1, #1
   124f8:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   124fa:	2a00      	cmp	r2, #0
   124fc:	d1f8      	bne.n	124f0 <process_event+0xe8>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   124fe:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
   12502:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   12504:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   12506:	f019 fdf0 	bl	2c0ea <process_recheck>
   1250a:	2800      	cmp	r0, #0
   1250c:	f000 80d7 	beq.w	126be <process_event+0x2b6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12510:	8ba3      	ldrh	r3, [r4, #28]
   12512:	f043 0320 	orr.w	r3, r3, #32
   12516:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   12518:	2300      	movs	r3, #0
   1251a:	9300      	str	r3, [sp, #0]
   1251c:	e7c3      	b.n	124a6 <process_event+0x9e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1251e:	2a04      	cmp	r2, #4
   12520:	d10f      	bne.n	12542 <process_event+0x13a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12522:	f023 0307 	bic.w	r3, r3, #7
   12526:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
   12528:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1252a:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1252c:	f019 fddd 	bl	2c0ea <process_recheck>
   12530:	2800      	cmp	r0, #0
   12532:	f000 80c6 	beq.w	126c2 <process_event+0x2ba>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12536:	f042 0220 	orr.w	r2, r2, #32
   1253a:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   1253c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   1253e:	9500      	str	r5, [sp, #0]
   12540:	e7b1      	b.n	124a6 <process_event+0x9e>
		__ASSERT_NO_MSG(false);
   12542:	4640      	mov	r0, r8
   12544:	f240 1319 	movw	r3, #281	; 0x119
   12548:	463a      	mov	r2, r7
   1254a:	4964      	ldr	r1, [pc, #400]	; (126dc <process_event+0x2d4>)
   1254c:	f019 fdb3 	bl	2c0b6 <printk>
   12550:	f240 1119 	movw	r1, #281	; 0x119
   12554:	4638      	mov	r0, r7
   12556:	f019 ffcb 	bl	2c4f0 <assert_post_action>
   1255a:	e7ef      	b.n	1253c <process_event+0x134>
		} else if (evt == EVT_START) {
   1255c:	2803      	cmp	r0, #3
   1255e:	d135      	bne.n	125cc <process_event+0x1c4>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   12560:	f1b9 0f00 	cmp.w	r9, #0
   12564:	d00b      	beq.n	1257e <process_event+0x176>
   12566:	4640      	mov	r0, r8
   12568:	495d      	ldr	r1, [pc, #372]	; (126e0 <process_event+0x2d8>)
   1256a:	f44f 73aa 	mov.w	r3, #340	; 0x154
   1256e:	463a      	mov	r2, r7
   12570:	f019 fda1 	bl	2c0b6 <printk>
   12574:	f44f 71aa 	mov.w	r1, #340	; 0x154
   12578:	4638      	mov	r0, r7
   1257a:	f019 ffb9 	bl	2c4f0 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1257e:	6823      	ldr	r3, [r4, #0]
   12580:	b95b      	cbnz	r3, 1259a <process_event+0x192>
   12582:	4640      	mov	r0, r8
   12584:	4957      	ldr	r1, [pc, #348]	; (126e4 <process_event+0x2dc>)
   12586:	f240 1355 	movw	r3, #341	; 0x155
   1258a:	463a      	mov	r2, r7
   1258c:	f019 fd93 	bl	2c0b6 <printk>
   12590:	f240 1155 	movw	r1, #341	; 0x155
   12594:	4638      	mov	r0, r7
   12596:	f019 ffab 	bl	2c4f0 <assert_post_action>
			transit = mgr->transitions->start;
   1259a:	6923      	ldr	r3, [r4, #16]
   1259c:	681b      	ldr	r3, [r3, #0]
   1259e:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   125a0:	b95b      	cbnz	r3, 125ba <process_event+0x1b2>
   125a2:	4640      	mov	r0, r8
   125a4:	4950      	ldr	r1, [pc, #320]	; (126e8 <process_event+0x2e0>)
   125a6:	f44f 73ac 	mov.w	r3, #344	; 0x158
   125aa:	463a      	mov	r2, r7
   125ac:	f019 fd83 	bl	2c0b6 <printk>
   125b0:	f44f 71ac 	mov.w	r1, #344	; 0x158
   125b4:	4638      	mov	r0, r7
   125b6:	f019 ff9b 	bl	2c4f0 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   125ba:	8ba3      	ldrh	r3, [r4, #28]
   125bc:	f023 0307 	bic.w	r3, r3, #7
   125c0:	f043 0306 	orr.w	r3, r3, #6
}
   125c4:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   125c6:	83a3      	strh	r3, [r4, #28]
		res = 0;
   125c8:	46ab      	mov	fp, r5
}
   125ca:	e76c      	b.n	124a6 <process_event+0x9e>
		} else if (evt == EVT_STOP) {
   125cc:	2804      	cmp	r0, #4
   125ce:	d132      	bne.n	12636 <process_event+0x22e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   125d0:	f1b9 0f02 	cmp.w	r9, #2
   125d4:	d00b      	beq.n	125ee <process_event+0x1e6>
   125d6:	4640      	mov	r0, r8
   125d8:	4944      	ldr	r1, [pc, #272]	; (126ec <process_event+0x2e4>)
   125da:	f240 135b 	movw	r3, #347	; 0x15b
   125de:	463a      	mov	r2, r7
   125e0:	f019 fd69 	bl	2c0b6 <printk>
   125e4:	f240 115b 	movw	r1, #347	; 0x15b
   125e8:	4638      	mov	r0, r7
   125ea:	f019 ff81 	bl	2c4f0 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   125ee:	8be3      	ldrh	r3, [r4, #30]
   125f0:	b15b      	cbz	r3, 1260a <process_event+0x202>
   125f2:	4640      	mov	r0, r8
   125f4:	493e      	ldr	r1, [pc, #248]	; (126f0 <process_event+0x2e8>)
   125f6:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   125fa:	463a      	mov	r2, r7
   125fc:	f019 fd5b 	bl	2c0b6 <printk>
   12600:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   12604:	4638      	mov	r0, r7
   12606:	f019 ff73 	bl	2c4f0 <assert_post_action>
			transit = mgr->transitions->stop;
   1260a:	6923      	ldr	r3, [r4, #16]
   1260c:	685b      	ldr	r3, [r3, #4]
   1260e:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   12610:	b95b      	cbnz	r3, 1262a <process_event+0x222>
   12612:	4640      	mov	r0, r8
   12614:	4934      	ldr	r1, [pc, #208]	; (126e8 <process_event+0x2e0>)
   12616:	f240 135f 	movw	r3, #351	; 0x15f
   1261a:	463a      	mov	r2, r7
   1261c:	f019 fd4b 	bl	2c0b6 <printk>
   12620:	f240 115f 	movw	r1, #351	; 0x15f
   12624:	4638      	mov	r0, r7
   12626:	f019 ff63 	bl	2c4f0 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1262a:	8ba3      	ldrh	r3, [r4, #28]
   1262c:	f023 0307 	bic.w	r3, r3, #7
   12630:	f043 0304 	orr.w	r3, r3, #4
   12634:	e7c6      	b.n	125c4 <process_event+0x1bc>
		} else if (evt == EVT_RESET) {
   12636:	2805      	cmp	r0, #5
   12638:	d132      	bne.n	126a0 <process_event+0x298>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1263a:	f1b9 0f01 	cmp.w	r9, #1
   1263e:	d00b      	beq.n	12658 <process_event+0x250>
   12640:	4640      	mov	r0, r8
   12642:	492c      	ldr	r1, [pc, #176]	; (126f4 <process_event+0x2ec>)
   12644:	f44f 73b1 	mov.w	r3, #354	; 0x162
   12648:	463a      	mov	r2, r7
   1264a:	f019 fd34 	bl	2c0b6 <printk>
   1264e:	f44f 71b1 	mov.w	r1, #354	; 0x162
   12652:	4638      	mov	r0, r7
   12654:	f019 ff4c 	bl	2c4f0 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   12658:	6823      	ldr	r3, [r4, #0]
   1265a:	b95b      	cbnz	r3, 12674 <process_event+0x26c>
   1265c:	4640      	mov	r0, r8
   1265e:	4921      	ldr	r1, [pc, #132]	; (126e4 <process_event+0x2dc>)
   12660:	f240 1363 	movw	r3, #355	; 0x163
   12664:	463a      	mov	r2, r7
   12666:	f019 fd26 	bl	2c0b6 <printk>
   1266a:	f240 1163 	movw	r1, #355	; 0x163
   1266e:	4638      	mov	r0, r7
   12670:	f019 ff3e 	bl	2c4f0 <assert_post_action>
			transit = mgr->transitions->reset;
   12674:	6923      	ldr	r3, [r4, #16]
   12676:	689b      	ldr	r3, [r3, #8]
   12678:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   1267a:	b95b      	cbnz	r3, 12694 <process_event+0x28c>
   1267c:	4640      	mov	r0, r8
   1267e:	491a      	ldr	r1, [pc, #104]	; (126e8 <process_event+0x2e0>)
   12680:	f44f 73b3 	mov.w	r3, #358	; 0x166
   12684:	463a      	mov	r2, r7
   12686:	f019 fd16 	bl	2c0b6 <printk>
   1268a:	f44f 71b3 	mov.w	r1, #358	; 0x166
   1268e:	4638      	mov	r0, r7
   12690:	f019 ff2e 	bl	2c4f0 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12694:	8ba3      	ldrh	r3, [r4, #28]
   12696:	f023 0307 	bic.w	r3, r3, #7
   1269a:	f043 0305 	orr.w	r3, r3, #5
   1269e:	e791      	b.n	125c4 <process_event+0x1bc>
			__ASSERT_NO_MSG(false);
   126a0:	2500      	movs	r5, #0
   126a2:	f240 1369 	movw	r3, #361	; 0x169
   126a6:	463a      	mov	r2, r7
   126a8:	4640      	mov	r0, r8
   126aa:	490c      	ldr	r1, [pc, #48]	; (126dc <process_event+0x2d4>)
   126ac:	f019 fd03 	bl	2c0b6 <printk>
   126b0:	f240 1169 	movw	r1, #361	; 0x169
   126b4:	4638      	mov	r0, r7
   126b6:	f019 ff1b 	bl	2c4f0 <assert_post_action>
		onoff_transition_fn transit = NULL;
   126ba:	9500      	str	r5, [sp, #0]
   126bc:	e784      	b.n	125c8 <process_event+0x1c0>
   126be:	9000      	str	r0, [sp, #0]
   126c0:	e6f1      	b.n	124a6 <process_event+0x9e>
   126c2:	4605      	mov	r5, r0
   126c4:	e73b      	b.n	1253e <process_event+0x136>
   126c6:	bf00      	nop
   126c8:	000301cf 	.word	0x000301cf
   126cc:	000301f5 	.word	0x000301f5
   126d0:	000300ff 	.word	0x000300ff
   126d4:	0003020c 	.word	0x0003020c
   126d8:	0003012d 	.word	0x0003012d
   126dc:	00032bdb 	.word	0x00032bdb
   126e0:	0003014f 	.word	0x0003014f
   126e4:	0003015a 	.word	0x0003015a
   126e8:	0003017d 	.word	0x0003017d
   126ec:	00030194 	.word	0x00030194
   126f0:	000301aa 	.word	0x000301aa
   126f4:	000301b9 	.word	0x000301b9
				   && !sys_slist_is_empty(&mgr->monitors);
   126f8:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   126fc:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   12700:	f104 0a14 	add.w	sl, r4, #20
   12704:	4650      	mov	r0, sl
			mgr->flags = flags;
   12706:	83a3      	strh	r3, [r4, #28]
   12708:	f012 f94c 	bl	249a4 <z_spin_unlock_valid>
   1270c:	b968      	cbnz	r0, 1272a <process_event+0x322>
   1270e:	2384      	movs	r3, #132	; 0x84
   12710:	4640      	mov	r0, r8
   12712:	4a3a      	ldr	r2, [pc, #232]	; (127fc <process_event+0x3f4>)
   12714:	493a      	ldr	r1, [pc, #232]	; (12800 <process_event+0x3f8>)
   12716:	f019 fcce 	bl	2c0b6 <printk>
   1271a:	4651      	mov	r1, sl
   1271c:	4839      	ldr	r0, [pc, #228]	; (12804 <process_event+0x3fc>)
   1271e:	f019 fcca 	bl	2c0b6 <printk>
   12722:	2184      	movs	r1, #132	; 0x84
   12724:	4835      	ldr	r0, [pc, #212]	; (127fc <process_event+0x3f4>)
   12726:	f019 fee3 	bl	2c4f0 <assert_post_action>
   1272a:	9b01      	ldr	r3, [sp, #4]
   1272c:	f383 8811 	msr	BASEPRI, r3
   12730:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   12734:	f1b9 0f00 	cmp.w	r9, #0
   12738:	d138      	bne.n	127ac <process_event+0x3a4>
	while (!sys_slist_is_empty(list)) {
   1273a:	2d00      	cmp	r5, #0
   1273c:	d14c      	bne.n	127d8 <process_event+0x3d0>
			if (transit != NULL) {
   1273e:	9b00      	ldr	r3, [sp, #0]
   12740:	b113      	cbz	r3, 12748 <process_event+0x340>
				transit(mgr, transition_complete);
   12742:	4620      	mov	r0, r4
   12744:	4930      	ldr	r1, [pc, #192]	; (12808 <process_event+0x400>)
   12746:	4798      	blx	r3
	__asm__ volatile(
   12748:	f04f 0320 	mov.w	r3, #32
   1274c:	f3ef 8b11 	mrs	fp, BASEPRI
   12750:	f383 8811 	msr	BASEPRI, r3
   12754:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12758:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
   1275a:	f8cd b004 	str.w	fp, [sp, #4]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1275e:	f012 f913 	bl	24988 <z_spin_lock_valid>
   12762:	b968      	cbnz	r0, 12780 <process_event+0x378>
   12764:	235c      	movs	r3, #92	; 0x5c
   12766:	4640      	mov	r0, r8
   12768:	4a24      	ldr	r2, [pc, #144]	; (127fc <process_event+0x3f4>)
   1276a:	4928      	ldr	r1, [pc, #160]	; (1280c <process_event+0x404>)
   1276c:	f019 fca3 	bl	2c0b6 <printk>
   12770:	4651      	mov	r1, sl
   12772:	4827      	ldr	r0, [pc, #156]	; (12810 <process_event+0x408>)
   12774:	f019 fc9f 	bl	2c0b6 <printk>
   12778:	215c      	movs	r1, #92	; 0x5c
   1277a:	4820      	ldr	r0, [pc, #128]	; (127fc <process_event+0x3f4>)
   1277c:	f019 feb8 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   12780:	4650      	mov	r0, sl
   12782:	f012 f91f 	bl	249c4 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   12786:	8ba3      	ldrh	r3, [r4, #28]
   12788:	f023 0308 	bic.w	r3, r3, #8
   1278c:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1278e:	8ba3      	ldrh	r3, [r4, #28]
   12790:	06da      	lsls	r2, r3, #27
   12792:	d52a      	bpl.n	127ea <process_event+0x3e2>
			evt = EVT_COMPLETE;
   12794:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12796:	f023 0310 	bic.w	r3, r3, #16
   1279a:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   1279c:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   127a0:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   127a4:	2900      	cmp	r1, #0
   127a6:	f47f ae65 	bne.w	12474 <process_event+0x6c>
out:
   127aa:	e641      	b.n	12430 <process_event+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   127ac:	68a1      	ldr	r1, [r4, #8]
   127ae:	2900      	cmp	r1, #0
   127b0:	d0c3      	beq.n	1273a <process_event+0x332>
	return node->next;
   127b2:	680b      	ldr	r3, [r1, #0]
   127b4:	2b00      	cmp	r3, #0
   127b6:	bf38      	it	cc
   127b8:	2300      	movcc	r3, #0
   127ba:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   127bc:	684b      	ldr	r3, [r1, #4]
   127be:	ee18 2a10 	vmov	r2, s16
   127c2:	461e      	mov	r6, r3
   127c4:	4620      	mov	r0, r4
   127c6:	465b      	mov	r3, fp
   127c8:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   127ca:	f1b9 0f00 	cmp.w	r9, #0
   127ce:	d0b4      	beq.n	1273a <process_event+0x332>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   127d0:	4649      	mov	r1, r9
   127d2:	f8d9 3000 	ldr.w	r3, [r9]
   127d6:	e7ed      	b.n	127b4 <process_event+0x3ac>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   127d8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   127da:	465b      	mov	r3, fp
   127dc:	ee18 2a10 	vmov	r2, s16
   127e0:	4620      	mov	r0, r4
   127e2:	682d      	ldr	r5, [r5, #0]
   127e4:	f019 fc9d 	bl	2c122 <notify_one>
   127e8:	e7a7      	b.n	1273a <process_event+0x332>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   127ea:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   127ee:	bf1e      	ittt	ne
   127f0:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   127f4:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   127f6:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   127f8:	e7d0      	b.n	1279c <process_event+0x394>
   127fa:	bf00      	nop
   127fc:	000301cf 	.word	0x000301cf
   12800:	000301f5 	.word	0x000301f5
   12804:	0003020c 	.word	0x0003020c
   12808:	00012815 	.word	0x00012815
   1280c:	00030221 	.word	0x00030221
   12810:	00030236 	.word	0x00030236

00012814 <transition_complete>:
{
   12814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12816:	4604      	mov	r4, r0
   12818:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   1281a:	f100 0614 	add.w	r6, r0, #20
   1281e:	f04f 0320 	mov.w	r3, #32
   12822:	f3ef 8711 	mrs	r7, BASEPRI
   12826:	f383 8811 	msr	BASEPRI, r3
   1282a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1282e:	4630      	mov	r0, r6
   12830:	f012 f8aa 	bl	24988 <z_spin_lock_valid>
   12834:	b968      	cbnz	r0, 12852 <transition_complete+0x3e>
   12836:	235c      	movs	r3, #92	; 0x5c
   12838:	4a0b      	ldr	r2, [pc, #44]	; (12868 <transition_complete+0x54>)
   1283a:	490c      	ldr	r1, [pc, #48]	; (1286c <transition_complete+0x58>)
   1283c:	480c      	ldr	r0, [pc, #48]	; (12870 <transition_complete+0x5c>)
   1283e:	f019 fc3a 	bl	2c0b6 <printk>
   12842:	4631      	mov	r1, r6
   12844:	480b      	ldr	r0, [pc, #44]	; (12874 <transition_complete+0x60>)
   12846:	f019 fc36 	bl	2c0b6 <printk>
   1284a:	215c      	movs	r1, #92	; 0x5c
   1284c:	4806      	ldr	r0, [pc, #24]	; (12868 <transition_complete+0x54>)
   1284e:	f019 fe4f 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   12852:	4630      	mov	r0, r6
   12854:	f012 f8b6 	bl	249c4 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
   12858:	463a      	mov	r2, r7
   1285a:	4620      	mov	r0, r4
	mgr->last_res = res;
   1285c:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   1285e:	2101      	movs	r1, #1
}
   12860:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   12864:	f7ff bdd0 	b.w	12408 <process_event>
   12868:	000301cf 	.word	0x000301cf
   1286c:	00030221 	.word	0x00030221
   12870:	000300ff 	.word	0x000300ff
   12874:	00030236 	.word	0x00030236

00012878 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   12878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1287c:	4604      	mov	r4, r0
   1287e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   12880:	f019 fc65 	bl	2c14e <validate_args>

	if (rv < 0) {
   12884:	1e05      	subs	r5, r0, #0
   12886:	db5e      	blt.n	12946 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   12888:	f104 0914 	add.w	r9, r4, #20
   1288c:	f04f 0320 	mov.w	r3, #32
   12890:	f3ef 8a11 	mrs	sl, BASEPRI
   12894:	f383 8811 	msr	BASEPRI, r3
   12898:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1289c:	4648      	mov	r0, r9
   1289e:	f012 f873 	bl	24988 <z_spin_lock_valid>
   128a2:	b968      	cbnz	r0, 128c0 <onoff_request+0x48>
   128a4:	235c      	movs	r3, #92	; 0x5c
   128a6:	4a38      	ldr	r2, [pc, #224]	; (12988 <onoff_request+0x110>)
   128a8:	4938      	ldr	r1, [pc, #224]	; (1298c <onoff_request+0x114>)
   128aa:	4839      	ldr	r0, [pc, #228]	; (12990 <onoff_request+0x118>)
   128ac:	f019 fc03 	bl	2c0b6 <printk>
   128b0:	4649      	mov	r1, r9
   128b2:	4838      	ldr	r0, [pc, #224]	; (12994 <onoff_request+0x11c>)
   128b4:	f019 fbff 	bl	2c0b6 <printk>
   128b8:	215c      	movs	r1, #92	; 0x5c
   128ba:	4833      	ldr	r0, [pc, #204]	; (12988 <onoff_request+0x110>)
   128bc:	f019 fe18 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   128c0:	4648      	mov	r0, r9
   128c2:	f012 f87f 	bl	249c4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   128c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   128ca:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   128cc:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   128ce:	428b      	cmp	r3, r1
   128d0:	f002 0607 	and.w	r6, r2, #7
   128d4:	d050      	beq.n	12978 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   128d6:	2e02      	cmp	r6, #2
   128d8:	d124      	bne.n	12924 <onoff_request+0xac>
	rv = state;
   128da:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
   128dc:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
   128e0:	3301      	adds	r3, #1
   128e2:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   128e4:	4648      	mov	r0, r9
   128e6:	f012 f85d 	bl	249a4 <z_spin_unlock_valid>
   128ea:	b968      	cbnz	r0, 12908 <onoff_request+0x90>
   128ec:	2384      	movs	r3, #132	; 0x84
   128ee:	4a26      	ldr	r2, [pc, #152]	; (12988 <onoff_request+0x110>)
   128f0:	4929      	ldr	r1, [pc, #164]	; (12998 <onoff_request+0x120>)
   128f2:	4827      	ldr	r0, [pc, #156]	; (12990 <onoff_request+0x118>)
   128f4:	f019 fbdf 	bl	2c0b6 <printk>
   128f8:	4649      	mov	r1, r9
   128fa:	4828      	ldr	r0, [pc, #160]	; (1299c <onoff_request+0x124>)
   128fc:	f019 fbdb 	bl	2c0b6 <printk>
   12900:	2184      	movs	r1, #132	; 0x84
   12902:	4821      	ldr	r0, [pc, #132]	; (12988 <onoff_request+0x110>)
   12904:	f019 fdf4 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   12908:	f38a 8811 	msr	BASEPRI, sl
   1290c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   12910:	f1b8 0f00 	cmp.w	r8, #0
   12914:	d017      	beq.n	12946 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
   12916:	2300      	movs	r3, #0
   12918:	4632      	mov	r2, r6
   1291a:	4639      	mov	r1, r7
   1291c:	4620      	mov	r0, r4
   1291e:	f019 fc00 	bl	2c122 <notify_one>
   12922:	e010      	b.n	12946 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
   12924:	0793      	lsls	r3, r2, #30
   12926:	d001      	beq.n	1292c <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
   12928:	2e06      	cmp	r6, #6
   1292a:	d10f      	bne.n	1294c <onoff_request+0xd4>
	parent->next = child;
   1292c:	2300      	movs	r3, #0
   1292e:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   12930:	6863      	ldr	r3, [r4, #4]
   12932:	b9f3      	cbnz	r3, 12972 <onoff_request+0xfa>
	list->head = node;
   12934:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   12938:	4635      	mov	r5, r6
   1293a:	b9fe      	cbnz	r6, 1297c <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   1293c:	4652      	mov	r2, sl
   1293e:	2102      	movs	r1, #2
   12940:	4620      	mov	r0, r4
   12942:	f7ff fd61 	bl	12408 <process_event>
		}
	}

	return rv;
}
   12946:	4628      	mov	r0, r5
   12948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   1294c:	2e05      	cmp	r6, #5
   1294e:	d018      	beq.n	12982 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   12950:	2e01      	cmp	r6, #1
   12952:	d00b      	beq.n	1296c <onoff_request+0xf4>
   12954:	4912      	ldr	r1, [pc, #72]	; (129a0 <onoff_request+0x128>)
   12956:	480e      	ldr	r0, [pc, #56]	; (12990 <onoff_request+0x118>)
   12958:	f240 13c5 	movw	r3, #453	; 0x1c5
   1295c:	4a11      	ldr	r2, [pc, #68]	; (129a4 <onoff_request+0x12c>)
   1295e:	f019 fbaa 	bl	2c0b6 <printk>
   12962:	f240 11c5 	movw	r1, #453	; 0x1c5
   12966:	480f      	ldr	r0, [pc, #60]	; (129a4 <onoff_request+0x12c>)
   12968:	f019 fdc2 	bl	2c4f0 <assert_post_action>
		rv = -EIO;
   1296c:	f06f 0504 	mvn.w	r5, #4
   12970:	e004      	b.n	1297c <onoff_request+0x104>
	parent->next = child;
   12972:	601f      	str	r7, [r3, #0]
	list->tail = node;
   12974:	6067      	str	r7, [r4, #4]
}
   12976:	e7df      	b.n	12938 <onoff_request+0xc0>
		rv = -EAGAIN;
   12978:	f06f 050a 	mvn.w	r5, #10
   1297c:	f04f 0800 	mov.w	r8, #0
   12980:	e7b0      	b.n	128e4 <onoff_request+0x6c>
		rv = -ENOTSUP;
   12982:	f06f 0585 	mvn.w	r5, #133	; 0x85
   12986:	e7f9      	b.n	1297c <onoff_request+0x104>
   12988:	000301cf 	.word	0x000301cf
   1298c:	00030221 	.word	0x00030221
   12990:	000300ff 	.word	0x000300ff
   12994:	00030236 	.word	0x00030236
   12998:	000301f5 	.word	0x000301f5
   1299c:	0003020c 	.word	0x0003020c
   129a0:	000301b9 	.word	0x000301b9
   129a4:	0003012d 	.word	0x0003012d

000129a8 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   129a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
   129ac:	f240 746c 	movw	r4, #1900	; 0x76c
   129b0:	2500      	movs	r5, #0
	unsigned int m = tm->tm_mon + 1;
   129b2:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   129b4:	68c2      	ldr	r2, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   129b6:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
   129ba:	1e53      	subs	r3, r2, #1
   129bc:	9301      	str	r3, [sp, #4]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   129be:	6943      	ldr	r3, [r0, #20]
{
   129c0:	4680      	mov	r8, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
   129c2:	18e4      	adds	r4, r4, r3
   129c4:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
   129c8:	f1b9 0f02 	cmp.w	r9, #2
   129cc:	bf8c      	ite	hi
   129ce:	2300      	movhi	r3, #0
   129d0:	2301      	movls	r3, #1
   129d2:	1ae4      	subs	r4, r4, r3
   129d4:	f165 0500 	sbc.w	r5, r5, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   129d8:	2c00      	cmp	r4, #0
   129da:	f175 0300 	sbcs.w	r3, r5, #0
   129de:	da54      	bge.n	12a8a <timeutil_timegm64+0xe2>
   129e0:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   129e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
   129e8:	2300      	movs	r3, #0
   129ea:	1820      	adds	r0, r4, r0
   129ec:	f145 31ff 	adc.w	r1, r5, #4294967295
   129f0:	f7f9 fee2 	bl	c7b8 <__aeabi_ldivmod>
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   129f4:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   129f8:	4a27      	ldr	r2, [pc, #156]	; (12a98 <timeutil_timegm64+0xf0>)
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   129fa:	4603      	mov	r3, r0
	unsigned int yoe = y - era * 400;
   129fc:	fb02 4200 	mla	r2, r2, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   12a00:	e9d8 0400 	ldrd	r0, r4, [r8]
   12a04:	f8d8 8008 	ldr.w	r8, [r8, #8]
   12a08:	17e5      	asrs	r5, r4, #31
   12a0a:	fbcc 4508 	smlal	r4, r5, ip, r8
   12a0e:	fba4 ab0c 	umull	sl, fp, r4, ip
   12a12:	fb0c bb05 	mla	fp, ip, r5, fp
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   12a16:	f1b9 0f02 	cmp.w	r9, #2
   12a1a:	bf8c      	ite	hi
   12a1c:	f06f 0e02 	mvnhi.w	lr, #2
   12a20:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   12a24:	eb1a 0a00 	adds.w	sl, sl, r0
   12a28:	eb4b 7be0 	adc.w	fp, fp, r0, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   12a2c:	f240 106d 	movw	r0, #365	; 0x16d
   12a30:	0894      	lsrs	r4, r2, #2
   12a32:	fb00 4002 	mla	r0, r0, r2, r4
   12a36:	9c01      	ldr	r4, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   12a38:	44f1      	add	r9, lr
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   12a3a:	4420      	add	r0, r4
   12a3c:	2464      	movs	r4, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   12a3e:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   12a42:	fbb2 f4f4 	udiv	r4, r2, r4
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   12a46:	2205      	movs	r2, #5
   12a48:	fb0e fe09 	mul.w	lr, lr, r9
   12a4c:	f10e 0e02 	add.w	lr, lr, #2
   12a50:	fbbe fef2 	udiv	lr, lr, r2
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   12a54:	1b04      	subs	r4, r0, r4
	return era * 146097 + (time_t)doe - 719468;
   12a56:	4811      	ldr	r0, [pc, #68]	; (12a9c <timeutil_timegm64+0xf4>)
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   12a58:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   12a5a:	fba3 2300 	umull	r2, r3, r3, r0
   12a5e:	fb00 3301 	mla	r3, r0, r1, r3
   12a62:	490f      	ldr	r1, [pc, #60]	; (12aa0 <timeutil_timegm64+0xf8>)
   12a64:	1856      	adds	r6, r2, r1
	time += 86400LL * ndays;
   12a66:	490f      	ldr	r1, [pc, #60]	; (12aa4 <timeutil_timegm64+0xfc>)
	return era * 146097 + (time_t)doe - 719468;
   12a68:	f143 37ff 	adc.w	r7, r3, #4294967295
   12a6c:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   12a70:	fba6 2301 	umull	r2, r3, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   12a74:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   12a78:	fb01 3307 	mla	r3, r1, r7, r3

	return time;
}
   12a7c:	eb12 000a 	adds.w	r0, r2, sl
   12a80:	eb43 010b 	adc.w	r1, r3, fp
   12a84:	b003      	add	sp, #12
   12a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   12a8a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   12a8e:	2300      	movs	r3, #0
   12a90:	4620      	mov	r0, r4
   12a92:	4629      	mov	r1, r5
   12a94:	e7ac      	b.n	129f0 <timeutil_timegm64+0x48>
   12a96:	bf00      	nop
   12a98:	fffffe70 	.word	0xfffffe70
   12a9c:	00023ab1 	.word	0x00023ab1
   12aa0:	fff50594 	.word	0xfff50594
   12aa4:	00015180 	.word	0x00015180

00012aa8 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   12aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12aac:	4605      	mov	r5, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
   12aae:	4e17      	ldr	r6, [pc, #92]	; (12b0c <z_work_q_main+0x64>)
   12ab0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 12b14 <z_work_q_main+0x6c>
   12ab4:	f8df 9060 	ldr.w	r9, [pc, #96]	; 12b18 <z_work_q_main+0x70>
	return z_impl_k_queue_get(queue, timeout);
   12ab8:	f04f 32ff 	mov.w	r2, #4294967295
   12abc:	f04f 33ff 	mov.w	r3, #4294967295
   12ac0:	4628      	mov	r0, r5
   12ac2:	f010 fb21 	bl	23108 <z_impl_k_queue_get>
		if (work == NULL) {
   12ac6:	4604      	mov	r4, r0
   12ac8:	2800      	cmp	r0, #0
   12aca:	d0f5      	beq.n	12ab8 <z_work_q_main+0x10>
		handler = work->handler;
   12acc:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
   12ace:	b967      	cbnz	r7, 12aea <z_work_q_main+0x42>
   12ad0:	4641      	mov	r1, r8
   12ad2:	231c      	movs	r3, #28
   12ad4:	4632      	mov	r2, r6
   12ad6:	4648      	mov	r0, r9
   12ad8:	f019 faed 	bl	2c0b6 <printk>
   12adc:	480c      	ldr	r0, [pc, #48]	; (12b10 <z_work_q_main+0x68>)
   12ade:	f019 faea 	bl	2c0b6 <printk>
   12ae2:	211c      	movs	r1, #28
   12ae4:	4630      	mov	r0, r6
   12ae6:	f019 fd03 	bl	2c4f0 <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12aea:	f104 0308 	add.w	r3, r4, #8
   12aee:	e8d3 2fef 	ldaex	r2, [r3]
   12af2:	f022 0101 	bic.w	r1, r2, #1
   12af6:	e8c3 1fe0 	stlex	r0, r1, [r3]
   12afa:	2800      	cmp	r0, #0
   12afc:	d1f7      	bne.n	12aee <z_work_q_main+0x46>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   12afe:	07d3      	lsls	r3, r2, #31
   12b00:	d501      	bpl.n	12b06 <z_work_q_main+0x5e>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   12b02:	4620      	mov	r0, r4
   12b04:	47b8      	blx	r7
	z_impl_k_yield();
   12b06:	f011 fb9b 	bl	24240 <z_impl_k_yield>
   12b0a:	e7d5      	b.n	12ab8 <z_work_q_main+0x10>
   12b0c:	0003024e 	.word	0x0003024e
   12b10:	00030288 	.word	0x00030288
   12b14:	00030271 	.word	0x00030271
   12b18:	000300ff 	.word	0x000300ff

00012b1c <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   12b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   12b1e:	460e      	mov	r6, r1
   12b20:	2900      	cmp	r1, #0
   12b22:	f000 8083 	beq.w	12c2c <sys_heap_free+0x110>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   12b26:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12b28:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   12b2a:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12b2c:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
   12b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   12b32:	bf2c      	ite	cs
   12b34:	2408      	movcs	r4, #8
   12b36:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12b38:	1b0c      	subs	r4, r1, r4
   12b3a:	1b64      	subs	r4, r4, r5
   12b3c:	bf48      	it	mi
   12b3e:	3407      	addmi	r4, #7
   12b40:	10e4      	asrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12b42:	4621      	mov	r1, r4
   12b44:	f019 fb43 	bl	2c1ce <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   12b48:	07c3      	lsls	r3, r0, #31
   12b4a:	d40d      	bmi.n	12b68 <sys_heap_free+0x4c>
   12b4c:	2399      	movs	r3, #153	; 0x99
   12b4e:	4a38      	ldr	r2, [pc, #224]	; (12c30 <sys_heap_free+0x114>)
   12b50:	4938      	ldr	r1, [pc, #224]	; (12c34 <sys_heap_free+0x118>)
   12b52:	4839      	ldr	r0, [pc, #228]	; (12c38 <sys_heap_free+0x11c>)
   12b54:	f019 faaf 	bl	2c0b6 <printk>
   12b58:	4631      	mov	r1, r6
   12b5a:	4838      	ldr	r0, [pc, #224]	; (12c3c <sys_heap_free+0x120>)
   12b5c:	f019 faab 	bl	2c0b6 <printk>
   12b60:	2199      	movs	r1, #153	; 0x99
   12b62:	4833      	ldr	r0, [pc, #204]	; (12c30 <sys_heap_free+0x114>)
   12b64:	f019 fcc4 	bl	2c4f0 <assert_post_action>
	return c + chunk_size(h, c);
   12b68:	4621      	mov	r1, r4
   12b6a:	4628      	mov	r0, r5
   12b6c:	f019 fb45 	bl	2c1fa <chunk_size>
   12b70:	1827      	adds	r7, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
   12b72:	2200      	movs	r2, #0
   12b74:	4639      	mov	r1, r7
   12b76:	4628      	mov	r0, r5
   12b78:	f019 fb29 	bl	2c1ce <chunk_field>
   12b7c:	1a38      	subs	r0, r7, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   12b7e:	4284      	cmp	r4, r0
   12b80:	d00d      	beq.n	12b9e <sys_heap_free+0x82>
   12b82:	23a1      	movs	r3, #161	; 0xa1
   12b84:	4a2a      	ldr	r2, [pc, #168]	; (12c30 <sys_heap_free+0x114>)
   12b86:	492e      	ldr	r1, [pc, #184]	; (12c40 <sys_heap_free+0x124>)
   12b88:	482b      	ldr	r0, [pc, #172]	; (12c38 <sys_heap_free+0x11c>)
   12b8a:	f019 fa94 	bl	2c0b6 <printk>
   12b8e:	4631      	mov	r1, r6
   12b90:	482c      	ldr	r0, [pc, #176]	; (12c44 <sys_heap_free+0x128>)
   12b92:	f019 fa90 	bl	2c0b6 <printk>
   12b96:	21a1      	movs	r1, #161	; 0xa1
   12b98:	4825      	ldr	r0, [pc, #148]	; (12c30 <sys_heap_free+0x114>)
   12b9a:	f019 fca9 	bl	2c4f0 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
   12b9e:	2200      	movs	r2, #0
   12ba0:	4621      	mov	r1, r4
   12ba2:	4628      	mov	r0, r5
   12ba4:	f019 fb2f 	bl	2c206 <set_chunk_used>
	return c + chunk_size(h, c);
   12ba8:	4621      	mov	r1, r4
   12baa:	f019 fb26 	bl	2c1fa <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12bae:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
   12bb0:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12bb2:	4628      	mov	r0, r5
   12bb4:	9101      	str	r1, [sp, #4]
   12bb6:	f019 fb0a 	bl	2c1ce <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   12bba:	f010 0f01 	tst.w	r0, #1
   12bbe:	9901      	ldr	r1, [sp, #4]
   12bc0:	d10b      	bne.n	12bda <sys_heap_free+0xbe>
		free_list_remove(h, right_chunk(h, c));
   12bc2:	4628      	mov	r0, r5
   12bc4:	f019 fbc6 	bl	2c354 <free_list_remove>
	return c + chunk_size(h, c);
   12bc8:	4621      	mov	r1, r4
   12bca:	4628      	mov	r0, r5
   12bcc:	f019 fb15 	bl	2c1fa <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   12bd0:	4621      	mov	r1, r4
   12bd2:	1822      	adds	r2, r4, r0
   12bd4:	4628      	mov	r0, r5
   12bd6:	f019 fb48 	bl	2c26a <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   12bda:	2200      	movs	r2, #0
   12bdc:	4621      	mov	r1, r4
   12bde:	4628      	mov	r0, r5
   12be0:	f019 faf5 	bl	2c1ce <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12be4:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
   12be6:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12be8:	4628      	mov	r0, r5
   12bea:	9101      	str	r1, [sp, #4]
   12bec:	f019 faef 	bl	2c1ce <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   12bf0:	f010 0601 	ands.w	r6, r0, #1
   12bf4:	9901      	ldr	r1, [sp, #4]
   12bf6:	d112      	bne.n	12c1e <sys_heap_free+0x102>
		free_list_remove(h, left_chunk(h, c));
   12bf8:	4628      	mov	r0, r5
   12bfa:	f019 fbab 	bl	2c354 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   12bfe:	4621      	mov	r1, r4
   12c00:	4632      	mov	r2, r6
   12c02:	4628      	mov	r0, r5
   12c04:	f019 fae3 	bl	2c1ce <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   12c08:	4622      	mov	r2, r4
   12c0a:	1a21      	subs	r1, r4, r0
   12c0c:	4628      	mov	r0, r5
   12c0e:	f019 fb2c 	bl	2c26a <merge_chunks>
   12c12:	4621      	mov	r1, r4
   12c14:	4632      	mov	r2, r6
   12c16:	4628      	mov	r0, r5
   12c18:	f019 fad9 	bl	2c1ce <chunk_field>
   12c1c:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   12c1e:	4621      	mov	r1, r4
   12c20:	4628      	mov	r0, r5
	free_chunk(h, c);
}
   12c22:	b003      	add	sp, #12
   12c24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	free_list_add(h, c);
   12c28:	f019 bbee 	b.w	2c408 <free_list_add>
}
   12c2c:	b003      	add	sp, #12
   12c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c30:	000302a3 	.word	0x000302a3
   12c34:	000302c4 	.word	0x000302c4
   12c38:	000300ff 	.word	0x000300ff
   12c3c:	000302d5 	.word	0x000302d5
   12c40:	0003030d 	.word	0x0003030d
   12c44:	00030333 	.word	0x00030333

00012c48 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
   12c48:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   12c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12c4e:	4607      	mov	r7, r0
   12c50:	460d      	mov	r5, r1
   12c52:	4616      	mov	r6, r2
   12c54:	d212      	bcs.n	12c7c <sys_heap_init+0x34>
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   12c56:	2a04      	cmp	r2, #4
   12c58:	d80e      	bhi.n	12c78 <sys_heap_init+0x30>
   12c5a:	4943      	ldr	r1, [pc, #268]	; (12d68 <sys_heap_init+0x120>)
   12c5c:	f44f 7397 	mov.w	r3, #302	; 0x12e
   12c60:	4a42      	ldr	r2, [pc, #264]	; (12d6c <sys_heap_init+0x124>)
   12c62:	4843      	ldr	r0, [pc, #268]	; (12d70 <sys_heap_init+0x128>)
   12c64:	f019 fa27 	bl	2c0b6 <printk>
   12c68:	4842      	ldr	r0, [pc, #264]	; (12d74 <sys_heap_init+0x12c>)
   12c6a:	f019 fa24 	bl	2c0b6 <printk>
   12c6e:	f44f 7197 	mov.w	r1, #302	; 0x12e
   12c72:	483e      	ldr	r0, [pc, #248]	; (12d6c <sys_heap_init+0x124>)
   12c74:	f019 fc3c 	bl	2c4f0 <assert_post_action>
   12c78:	2204      	movs	r2, #4
   12c7a:	e000      	b.n	12c7e <sys_heap_init+0x36>
   12c7c:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
   12c7e:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12c80:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12c82:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12c84:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12c88:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   12c8c:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12c8e:	2d17      	cmp	r5, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   12c90:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12c94:	d80e      	bhi.n	12cb4 <sys_heap_init+0x6c>
   12c96:	4938      	ldr	r1, [pc, #224]	; (12d78 <sys_heap_init+0x130>)
   12c98:	f240 1337 	movw	r3, #311	; 0x137
   12c9c:	4a33      	ldr	r2, [pc, #204]	; (12d6c <sys_heap_init+0x124>)
   12c9e:	4834      	ldr	r0, [pc, #208]	; (12d70 <sys_heap_init+0x128>)
   12ca0:	f019 fa09 	bl	2c0b6 <printk>
   12ca4:	4833      	ldr	r0, [pc, #204]	; (12d74 <sys_heap_init+0x12c>)
   12ca6:	f019 fa06 	bl	2c0b6 <printk>
   12caa:	f240 1137 	movw	r1, #311	; 0x137
   12cae:	482f      	ldr	r0, [pc, #188]	; (12d6c <sys_heap_init+0x124>)
   12cb0:	f019 fc1e 	bl	2c4f0 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   12cb4:	2200      	movs	r2, #0
   12cb6:	2300      	movs	r3, #0
	heap->heap = h;
   12cb8:	603c      	str	r4, [r7, #0]
	h->chunk0_hdr_area = 0;
   12cba:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   12cbe:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   12cc0:	4631      	mov	r1, r6
	h->avail_buckets = 0;
   12cc2:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   12cc4:	4620      	mov	r0, r4
	h->len = buf_sz;
   12cc6:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   12cc8:	f019 fac3 	bl	2c252 <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
   12ccc:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   12cce:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   12cd0:	1c47      	adds	r7, r0, #1
   12cd2:	4620      	mov	r0, r4
   12cd4:	f019 fab3 	bl	2c23e <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   12cd8:	351b      	adds	r5, #27
   12cda:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
   12cdc:	4428      	add	r0, r5
   12cde:	42b0      	cmp	r0, r6
   12ce0:	d30e      	bcc.n	12d00 <sys_heap_init+0xb8>
   12ce2:	4926      	ldr	r1, [pc, #152]	; (12d7c <sys_heap_init+0x134>)
   12ce4:	f240 1343 	movw	r3, #323	; 0x143
   12ce8:	4a20      	ldr	r2, [pc, #128]	; (12d6c <sys_heap_init+0x124>)
   12cea:	4821      	ldr	r0, [pc, #132]	; (12d70 <sys_heap_init+0x128>)
   12cec:	f019 f9e3 	bl	2c0b6 <printk>
   12cf0:	4820      	ldr	r0, [pc, #128]	; (12d74 <sys_heap_init+0x12c>)
   12cf2:	f019 f9e0 	bl	2c0b6 <printk>
   12cf6:	f240 1143 	movw	r1, #323	; 0x143
   12cfa:	481c      	ldr	r0, [pc, #112]	; (12d6c <sys_heap_init+0x124>)
   12cfc:	f019 fbf8 	bl	2c4f0 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
   12d00:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   12d02:	4619      	mov	r1, r3
   12d04:	f104 0210 	add.w	r2, r4, #16
	for (int i = 0; i < nb_buckets; i++) {
   12d08:	42bb      	cmp	r3, r7
   12d0a:	db29      	blt.n	12d60 <sys_heap_init+0x118>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   12d0c:	462a      	mov	r2, r5
   12d0e:	4620      	mov	r0, r4
   12d10:	2100      	movs	r1, #0
   12d12:	f019 fa90 	bl	2c236 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   12d16:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
   12d18:	4620      	mov	r0, r4
   12d1a:	2201      	movs	r2, #1
   12d1c:	2100      	movs	r1, #0
   12d1e:	f019 fa72 	bl	2c206 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   12d22:	463a      	mov	r2, r7
   12d24:	4629      	mov	r1, r5
   12d26:	f019 fa86 	bl	2c236 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   12d2a:	462b      	mov	r3, r5
   12d2c:	4629      	mov	r1, r5
   12d2e:	4620      	mov	r0, r4
   12d30:	2200      	movs	r2, #0
   12d32:	f019 fa57 	bl	2c1e4 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   12d36:	4631      	mov	r1, r6
   12d38:	4620      	mov	r0, r4
   12d3a:	2200      	movs	r2, #0
   12d3c:	f019 fa7b 	bl	2c236 <set_chunk_size>
   12d40:	463b      	mov	r3, r7
   12d42:	4631      	mov	r1, r6
   12d44:	4620      	mov	r0, r4
   12d46:	2200      	movs	r2, #0
   12d48:	f019 fa4c 	bl	2c1e4 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   12d4c:	4631      	mov	r1, r6
   12d4e:	4620      	mov	r0, r4
   12d50:	2201      	movs	r2, #1
   12d52:	f019 fa58 	bl	2c206 <set_chunk_used>

	free_list_add(h, chunk0_size);
   12d56:	4629      	mov	r1, r5
}
   12d58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   12d5c:	f019 bb54 	b.w	2c408 <free_list_add>
		h->buckets[i].next = 0;
   12d60:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   12d64:	3301      	adds	r3, #1
   12d66:	e7cf      	b.n	12d08 <sys_heap_init+0xc0>
   12d68:	0003036f 	.word	0x0003036f
   12d6c:	000302a3 	.word	0x000302a3
   12d70:	000300ff 	.word	0x000300ff
   12d74:	00030390 	.word	0x00030390
   12d78:	000303a9 	.word	0x000303a9
   12d7c:	000303d1 	.word	0x000303d1

00012d80 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   12d80:	f04f 0220 	mov.w	r2, #32
   12d84:	f3ef 8311 	mrs	r3, BASEPRI
   12d88:	f382 8811 	msr	BASEPRI, r2
   12d8c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   12d90:	2101      	movs	r1, #1
   12d92:	4a04      	ldr	r2, [pc, #16]	; (12da4 <nordicsemi_nrf91_init+0x24>)
   12d94:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   12d98:	f383 8811 	msr	BASEPRI, r3
   12d9c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   12da0:	2000      	movs	r0, #0
   12da2:	4770      	bx	lr
   12da4:	40039000 	.word	0x40039000

00012da8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   12da8:	b120      	cbz	r0, 12db4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   12daa:	4b03      	ldr	r3, [pc, #12]	; (12db8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   12dac:	0180      	lsls	r0, r0, #6
   12dae:	f043 0301 	orr.w	r3, r3, #1
   12db2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   12db4:	4770      	bx	lr
   12db6:	bf00      	nop
   12db8:	0002ed80 	.word	0x0002ed80

00012dbc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   12dbc:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   12dbe:	2200      	movs	r2, #0
{
   12dc0:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   12dc2:	490f      	ldr	r1, [pc, #60]	; (12e00 <enable_logger+0x44>)
   12dc4:	480f      	ldr	r0, [pc, #60]	; (12e04 <enable_logger+0x48>)
   12dc6:	f01b fd3a 	bl	2e83e <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12dca:	2200      	movs	r2, #0
   12dcc:	2300      	movs	r3, #0
   12dce:	2400      	movs	r4, #0
   12dd0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12dd4:	230e      	movs	r3, #14
   12dd6:	4d0c      	ldr	r5, [pc, #48]	; (12e08 <enable_logger+0x4c>)
   12dd8:	e9cd 3403 	strd	r3, r4, [sp, #12]
   12ddc:	f44f 7240 	mov.w	r2, #768	; 0x300
   12de0:	4628      	mov	r0, r5
   12de2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12de6:	4b09      	ldr	r3, [pc, #36]	; (12e0c <enable_logger+0x50>)
   12de8:	4909      	ldr	r1, [pc, #36]	; (12e10 <enable_logger+0x54>)
   12dea:	9400      	str	r4, [sp, #0]
   12dec:	f011 fcee 	bl	247cc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   12df0:	4908      	ldr	r1, [pc, #32]	; (12e14 <enable_logger+0x58>)
   12df2:	4628      	mov	r0, r5
   12df4:	f01b fc8b 	bl	2e70e <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   12df8:	4620      	mov	r0, r4
   12dfa:	b009      	add	sp, #36	; 0x24
   12dfc:	bd30      	pop	{r4, r5, pc}
   12dfe:	bf00      	nop
   12e00:	00012e19 	.word	0x00012e19
   12e04:	20020dc0 	.word	0x20020dc0
   12e08:	20020df8 	.word	0x20020df8
   12e0c:	000132cd 	.word	0x000132cd
   12e10:	20027410 	.word	0x20027410
   12e14:	000303fe 	.word	0x000303fe

00012e18 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   12e18:	4801      	ldr	r0, [pc, #4]	; (12e20 <log_process_thread_timer_expiry_fn+0x8>)
   12e1a:	f011 bb95 	b.w	24548 <z_impl_k_sem_give>
   12e1e:	bf00      	nop
   12e20:	20020c54 	.word	0x20020c54

00012e24 <z_log_get_s_mask>:
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   12e24:	2920      	cmp	r1, #32
{
   12e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e28:	4605      	mov	r5, r0
   12e2a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   12e2c:	d909      	bls.n	12e42 <z_log_get_s_mask+0x1e>
   12e2e:	4914      	ldr	r1, [pc, #80]	; (12e80 <z_log_get_s_mask+0x5c>)
   12e30:	4814      	ldr	r0, [pc, #80]	; (12e84 <z_log_get_s_mask+0x60>)
   12e32:	235b      	movs	r3, #91	; 0x5b
   12e34:	4a14      	ldr	r2, [pc, #80]	; (12e88 <z_log_get_s_mask+0x64>)
   12e36:	f019 f93e 	bl	2c0b6 <printk>
   12e3a:	215b      	movs	r1, #91	; 0x5b
   12e3c:	4812      	ldr	r0, [pc, #72]	; (12e88 <z_log_get_s_mask+0x64>)
   12e3e:	f019 fb57 	bl	2c4f0 <assert_post_action>
			arm = false;
   12e42:	2000      	movs	r0, #0
				mask |= BIT(arg);
   12e44:	2701      	movs	r7, #1
			arm = false;
   12e46:	4603      	mov	r3, r0
   12e48:	4602      	mov	r2, r0
		} else if (arm && isalpha((int)curr)) {
   12e4a:	4e10      	ldr	r6, [pc, #64]	; (12e8c <z_log_get_s_mask+0x68>)
	while ((curr = *str++) && arg < nargs) {
   12e4c:	f815 1b01 	ldrb.w	r1, [r5], #1
   12e50:	b109      	cbz	r1, 12e56 <z_log_get_s_mask+0x32>
   12e52:	42a3      	cmp	r3, r4
   12e54:	d300      	bcc.n	12e58 <z_log_get_s_mask+0x34>
}
   12e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (curr == '%') {
   12e58:	2925      	cmp	r1, #37	; 0x25
   12e5a:	d102      	bne.n	12e62 <z_log_get_s_mask+0x3e>
			arm = !arm;
   12e5c:	f082 0201 	eor.w	r2, r2, #1
   12e60:	e7f4      	b.n	12e4c <z_log_get_s_mask+0x28>
		} else if (arm && isalpha((int)curr)) {
   12e62:	2a00      	cmp	r2, #0
   12e64:	d0f2      	beq.n	12e4c <z_log_get_s_mask+0x28>
   12e66:	f811 c006 	ldrb.w	ip, [r1, r6]
   12e6a:	f01c 0f03 	tst.w	ip, #3
   12e6e:	d0ed      	beq.n	12e4c <z_log_get_s_mask+0x28>
			if (curr == 's') {
   12e70:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
   12e72:	bf04      	itt	eq
   12e74:	fa07 f203 	lsleq.w	r2, r7, r3
   12e78:	4310      	orreq	r0, r2
			arg++;
   12e7a:	3301      	adds	r3, #1
			arm = false;
   12e7c:	2200      	movs	r2, #0
   12e7e:	e7e5      	b.n	12e4c <z_log_get_s_mask+0x28>
   12e80:	00030433 	.word	0x00030433
   12e84:	000300ff 	.word	0x000300ff
   12e88:	00030406 	.word	0x00030406
   12e8c:	0002f5d9 	.word	0x0002f5d9

00012e90 <log_core_init>:
{
   12e90:	b508      	push	{r3, lr}
		log_msg_pool_init();
   12e92:	f000 fa95 	bl	133c0 <log_msg_pool_init>
		log_list_init(&list);
   12e96:	4809      	ldr	r0, [pc, #36]	; (12ebc <log_core_init+0x2c>)
   12e98:	f019 fb34 	bl	2c504 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   12e9c:	2304      	movs	r3, #4
   12e9e:	f44f 7284 	mov.w	r2, #264	; 0x108
   12ea2:	4907      	ldr	r1, [pc, #28]	; (12ec0 <log_core_init+0x30>)
   12ea4:	4807      	ldr	r0, [pc, #28]	; (12ec4 <log_core_init+0x34>)
   12ea6:	f01b fb92 	bl	2e5ce <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
   12eaa:	4b07      	ldr	r3, [pc, #28]	; (12ec8 <log_core_init+0x38>)
   12eac:	4a07      	ldr	r2, [pc, #28]	; (12ecc <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
   12eae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   12eb2:	601a      	str	r2, [r3, #0]
}
   12eb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
   12eb8:	f000 bd78 	b.w	139ac <log_output_timestamp_freq_set>
   12ebc:	200214fc 	.word	0x200214fc
   12ec0:	2002a050 	.word	0x2002a050
   12ec4:	20021504 	.word	0x20021504
   12ec8:	20020430 	.word	0x20020430
   12ecc:	0002c549 	.word	0x0002c549

00012ed0 <dropped_notify>:
{
   12ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12ed2:	2500      	movs	r5, #0
   12ed4:	4b0d      	ldr	r3, [pc, #52]	; (12f0c <dropped_notify+0x3c>)
   12ed6:	e8d3 7fef 	ldaex	r7, [r3]
   12eda:	e8c3 5fe2 	stlex	r2, r5, [r3]
   12ede:	2a00      	cmp	r2, #0
   12ee0:	d1f9      	bne.n	12ed6 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   12ee2:	4c0b      	ldr	r4, [pc, #44]	; (12f10 <dropped_notify+0x40>)
   12ee4:	4e0b      	ldr	r6, [pc, #44]	; (12f14 <dropped_notify+0x44>)
   12ee6:	1b36      	subs	r6, r6, r4
   12ee8:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   12eea:	42b5      	cmp	r5, r6
   12eec:	db00      	blt.n	12ef0 <dropped_notify+0x20>
}
   12eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   12ef0:	4620      	mov	r0, r4
   12ef2:	f019 fb1d 	bl	2c530 <log_backend_is_active>
   12ef6:	b128      	cbz	r0, 12f04 <dropped_notify+0x34>
	if (backend->api->dropped != NULL) {
   12ef8:	6823      	ldr	r3, [r4, #0]
   12efa:	68db      	ldr	r3, [r3, #12]
   12efc:	b113      	cbz	r3, 12f04 <dropped_notify+0x34>
		backend->api->dropped(backend, cnt);
   12efe:	4639      	mov	r1, r7
   12f00:	4620      	mov	r0, r4
   12f02:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   12f04:	3501      	adds	r5, #1
   12f06:	3410      	adds	r4, #16
   12f08:	e7ef      	b.n	12eea <dropped_notify+0x1a>
   12f0a:	bf00      	nop
   12f0c:	200214f4 	.word	0x200214f4
   12f10:	0002ed1c 	.word	0x0002ed1c
   12f14:	0002ed2c 	.word	0x0002ed2c

00012f18 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12f18:	4b04      	ldr	r3, [pc, #16]	; (12f2c <log_dropped+0x14>)
   12f1a:	e8d3 2fef 	ldaex	r2, [r3]
   12f1e:	3201      	adds	r2, #1
   12f20:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12f24:	2900      	cmp	r1, #0
   12f26:	d1f8      	bne.n	12f1a <log_dropped+0x2>
}
   12f28:	4770      	bx	lr
   12f2a:	bf00      	nop
   12f2c:	200214f4 	.word	0x200214f4

00012f30 <log_source_name_get>:
   12f30:	4a04      	ldr	r2, [pc, #16]	; (12f44 <log_source_name_get+0x14>)
   12f32:	4b05      	ldr	r3, [pc, #20]	; (12f48 <log_source_name_get+0x18>)
   12f34:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   12f36:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   12f3a:	bf34      	ite	cc
   12f3c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   12f40:	2000      	movcs	r0, #0
}
   12f42:	4770      	bx	lr
   12f44:	0002ec7c 	.word	0x0002ec7c
   12f48:	0002ed1c 	.word	0x0002ed1c

00012f4c <log_backend_enable>:
{
   12f4c:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
   12f4e:	4c10      	ldr	r4, [pc, #64]	; (12f90 <log_backend_enable+0x44>)
{
   12f50:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   12f52:	1b04      	subs	r4, r0, r4
   12f54:	1124      	asrs	r4, r4, #4
   12f56:	3401      	adds	r4, #1
{
   12f58:	460e      	mov	r6, r1
	log_backend_id_set(backend, id);
   12f5a:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   12f5c:	b948      	cbnz	r0, 12f72 <log_backend_enable+0x26>
   12f5e:	490d      	ldr	r1, [pc, #52]	; (12f94 <log_backend_enable+0x48>)
   12f60:	480d      	ldr	r0, [pc, #52]	; (12f98 <log_backend_enable+0x4c>)
   12f62:	23c0      	movs	r3, #192	; 0xc0
   12f64:	4a0d      	ldr	r2, [pc, #52]	; (12f9c <log_backend_enable+0x50>)
   12f66:	f019 f8a6 	bl	2c0b6 <printk>
   12f6a:	21c0      	movs	r1, #192	; 0xc0
   12f6c:	480b      	ldr	r0, [pc, #44]	; (12f9c <log_backend_enable+0x50>)
   12f6e:	f019 fabf 	bl	2c4f0 <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   12f72:	2201      	movs	r2, #1
	backend->cb->id = id;
   12f74:	686b      	ldr	r3, [r5, #4]
   12f76:	711c      	strb	r4, [r3, #4]
	if (!backend_attached) {
   12f78:	4c09      	ldr	r4, [pc, #36]	; (12fa0 <log_backend_enable+0x54>)
	backend->cb->active = true;
   12f7a:	715a      	strb	r2, [r3, #5]
   12f7c:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   12f7e:	601e      	str	r6, [r3, #0]
   12f80:	b912      	cbnz	r2, 12f88 <log_backend_enable+0x3c>
   12f82:	4808      	ldr	r0, [pc, #32]	; (12fa4 <log_backend_enable+0x58>)
   12f84:	f011 fae0 	bl	24548 <z_impl_k_sem_give>
	backend_attached = true;
   12f88:	2301      	movs	r3, #1
   12f8a:	7023      	strb	r3, [r4, #0]
}
   12f8c:	bd70      	pop	{r4, r5, r6, pc}
   12f8e:	bf00      	nop
   12f90:	0002ed1c 	.word	0x0002ed1c
   12f94:	0003047c 	.word	0x0003047c
   12f98:	000300ff 	.word	0x000300ff
   12f9c:	0003044b 	.word	0x0003044b
   12fa0:	20024713 	.word	0x20024713
   12fa4:	20020c54 	.word	0x20020c54

00012fa8 <log_init>:
{
   12fa8:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
   12faa:	4b14      	ldr	r3, [pc, #80]	; (12ffc <log_init+0x54>)
   12fac:	4c14      	ldr	r4, [pc, #80]	; (13000 <log_init+0x58>)
   12fae:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   12fb0:	2b9f      	cmp	r3, #159	; 0x9f
   12fb2:	ea4f 1623 	mov.w	r6, r3, asr #4
   12fb6:	d906      	bls.n	12fc6 <log_init+0x1e>
   12fb8:	f240 210b 	movw	r1, #523	; 0x20b
   12fbc:	4b11      	ldr	r3, [pc, #68]	; (13004 <log_init+0x5c>)
   12fbe:	4a12      	ldr	r2, [pc, #72]	; (13008 <log_init+0x60>)
   12fc0:	4812      	ldr	r0, [pc, #72]	; (1300c <log_init+0x64>)
   12fc2:	f012 fcdb 	bl	2597c <__assert_func>
   12fc6:	4b12      	ldr	r3, [pc, #72]	; (13010 <log_init+0x68>)
   12fc8:	e8d3 5fef 	ldaex	r5, [r3]
   12fcc:	1c6a      	adds	r2, r5, #1
   12fce:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12fd2:	2900      	cmp	r1, #0
   12fd4:	d1f8      	bne.n	12fc8 <log_init+0x20>
	if (atomic_inc(&initialized) != 0) {
   12fd6:	b90d      	cbnz	r5, 12fdc <log_init+0x34>
	for (i = 0; i < log_backend_count_get(); i++) {
   12fd8:	42b5      	cmp	r5, r6
   12fda:	d100      	bne.n	12fde <log_init+0x36>
}
   12fdc:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   12fde:	7b23      	ldrb	r3, [r4, #12]
   12fe0:	b143      	cbz	r3, 12ff4 <log_init+0x4c>
			if (backend->api->init != NULL) {
   12fe2:	6823      	ldr	r3, [r4, #0]
   12fe4:	695b      	ldr	r3, [r3, #20]
   12fe6:	b103      	cbz	r3, 12fea <log_init+0x42>
				backend->api->init();
   12fe8:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   12fea:	2204      	movs	r2, #4
   12fec:	2100      	movs	r1, #0
   12fee:	4620      	mov	r0, r4
   12ff0:	f7ff ffac 	bl	12f4c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   12ff4:	3501      	adds	r5, #1
   12ff6:	3410      	adds	r4, #16
   12ff8:	e7ee      	b.n	12fd8 <log_init+0x30>
   12ffa:	bf00      	nop
   12ffc:	0002ed2c 	.word	0x0002ed2c
   13000:	0002ed1c 	.word	0x0002ed1c
   13004:	00030493 	.word	0x00030493
   13008:	00030541 	.word	0x00030541
   1300c:	00030406 	.word	0x00030406
   13010:	200214f8 	.word	0x200214f8

00013014 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   13014:	4b15      	ldr	r3, [pc, #84]	; (1306c <log_strdup+0x58>)
{
   13016:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   13018:	4298      	cmp	r0, r3
{
   1301a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   1301c:	d302      	bcc.n	13024 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   1301e:	4b14      	ldr	r3, [pc, #80]	; (13070 <log_strdup+0x5c>)
   13020:	4298      	cmp	r0, r3
   13022:	d31d      	bcc.n	13060 <log_strdup+0x4c>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   13024:	2200      	movs	r2, #0
   13026:	2300      	movs	r3, #0
   13028:	4812      	ldr	r0, [pc, #72]	; (13074 <log_strdup+0x60>)
   1302a:	a901      	add	r1, sp, #4
   1302c:	f00f fbf8 	bl	22820 <k_mem_slab_alloc>
	if (err != 0) {
   13030:	4605      	mov	r5, r0
   13032:	b9c0      	cbnz	r0, 13066 <log_strdup+0x52>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13034:	2201      	movs	r2, #1
   13036:	9b01      	ldr	r3, [sp, #4]
   13038:	e8d3 1fef 	ldaex	r1, [r3]
   1303c:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13040:	2800      	cmp	r0, #0
   13042:	d1f9      	bne.n	13038 <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   13044:	9e01      	ldr	r6, [sp, #4]
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   13046:	22ff      	movs	r2, #255	; 0xff
   13048:	1d33      	adds	r3, r6, #4
   1304a:	4618      	mov	r0, r3
   1304c:	4621      	mov	r1, r4
   1304e:	f013 fc8d 	bl	2696c <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   13052:	227e      	movs	r2, #126	; 0x7e
   13054:	4603      	mov	r3, r0
   13056:	f886 2103 	strb.w	r2, [r6, #259]	; 0x103
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   1305a:	f886 5104 	strb.w	r5, [r6, #260]	; 0x104
	return dup->buf;
   1305e:	461c      	mov	r4, r3
}
   13060:	4620      	mov	r0, r4
   13062:	b002      	add	sp, #8
   13064:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
   13066:	4b04      	ldr	r3, [pc, #16]	; (13078 <log_strdup+0x64>)
   13068:	e7f9      	b.n	1305e <log_strdup+0x4a>
   1306a:	bf00      	nop
   1306c:	0002e9c0 	.word	0x0002e9c0
   13070:	00032fa8 	.word	0x00032fa8
   13074:	20021504 	.word	0x20021504
   13078:	000304c6 	.word	0x000304c6

0001307c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   1307c:	b150      	cbz	r0, 13094 <log_is_strdup+0x18>
   1307e:	4b06      	ldr	r3, [pc, #24]	; (13098 <log_is_strdup+0x1c>)
   13080:	4298      	cmp	r0, r3
   13082:	d306      	bcc.n	13092 <log_is_strdup+0x16>
   13084:	f503 6384 	add.w	r3, r3, #1056	; 0x420
   13088:	4298      	cmp	r0, r3
   1308a:	bf2c      	ite	cs
   1308c:	2000      	movcs	r0, #0
   1308e:	2001      	movcc	r0, #1
   13090:	4770      	bx	lr
   13092:	2000      	movs	r0, #0
}
   13094:	4770      	bx	lr
   13096:	bf00      	nop
   13098:	2002a050 	.word	0x2002a050

0001309c <z_impl_log_process>:
	if (!backend_attached && !bypass) {
   1309c:	4b4c      	ldr	r3, [pc, #304]	; (131d0 <z_impl_log_process+0x134>)
{
   1309e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   130a2:	781b      	ldrb	r3, [r3, #0]
{
   130a4:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   130a6:	b903      	cbnz	r3, 130aa <z_impl_log_process+0xe>
   130a8:	b340      	cbz	r0, 130fc <z_impl_log_process+0x60>
	__asm__ volatile(
   130aa:	f04f 0320 	mov.w	r3, #32
   130ae:	f3ef 8611 	mrs	r6, BASEPRI
   130b2:	f383 8811 	msr	BASEPRI, r3
   130b6:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
   130ba:	4846      	ldr	r0, [pc, #280]	; (131d4 <z_impl_log_process+0x138>)
   130bc:	f019 fa32 	bl	2c524 <log_list_head_get>
   130c0:	4605      	mov	r5, r0
	__asm__ volatile(
   130c2:	f386 8811 	msr	BASEPRI, r6
   130c6:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
   130ca:	b158      	cbz	r0, 130e4 <z_impl_log_process+0x48>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   130cc:	4b42      	ldr	r3, [pc, #264]	; (131d8 <z_impl_log_process+0x13c>)
   130ce:	e8d3 2fef 	ldaex	r2, [r3]
   130d2:	3a01      	subs	r2, #1
   130d4:	e8c3 2fe1 	stlex	r1, r2, [r3]
   130d8:	2900      	cmp	r1, #0
   130da:	d1f8      	bne.n	130ce <z_impl_log_process+0x32>
	if (!bypass) {
   130dc:	b194      	cbz	r4, 13104 <z_impl_log_process+0x68>
	log_msg_put(msg);
   130de:	4628      	mov	r0, r5
   130e0:	f019 fb20 	bl	2c724 <log_msg_put>
	if (!bypass && dropped_cnt) {
   130e4:	b924      	cbnz	r4, 130f0 <z_impl_log_process+0x54>
   130e6:	4b3d      	ldr	r3, [pc, #244]	; (131dc <z_impl_log_process+0x140>)
   130e8:	681b      	ldr	r3, [r3, #0]
   130ea:	b10b      	cbz	r3, 130f0 <z_impl_log_process+0x54>
		dropped_notify();
   130ec:	f7ff fef0 	bl	12ed0 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   130f0:	4838      	ldr	r0, [pc, #224]	; (131d4 <z_impl_log_process+0x138>)
   130f2:	f019 fa15 	bl	2c520 <log_list_head_peek>
   130f6:	1e04      	subs	r4, r0, #0
   130f8:	bf18      	it	ne
   130fa:	2401      	movne	r4, #1
}
   130fc:	4620      	mov	r0, r4
   130fe:	b003      	add	sp, #12
   13100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   13104:	4b36      	ldr	r3, [pc, #216]	; (131e0 <z_impl_log_process+0x144>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
   13106:	781b      	ldrb	r3, [r3, #0]
   13108:	b9b3      	cbnz	r3, 13138 <z_impl_log_process+0x9c>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1310a:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   1310c:	07db      	lsls	r3, r3, #31
   1310e:	d413      	bmi.n	13138 <z_impl_log_process+0x9c>
	msg_str = log_msg_str_get(msg);
   13110:	f019 fb17 	bl	2c742 <log_msg_str_get>
   13114:	4681      	mov	r9, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   13116:	4628      	mov	r0, r5
   13118:	f019 fae2 	bl	2c6e0 <log_msg_nargs_get>
   1311c:	4601      	mov	r1, r0
   1311e:	4648      	mov	r0, r9
   13120:	f7ff fe80 	bl	12e24 <z_log_get_s_mask>
   13124:	4607      	mov	r7, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   13126:	4a2f      	ldr	r2, [pc, #188]	; (131e4 <z_impl_log_process+0x148>)
   13128:	4b2f      	ldr	r3, [pc, #188]	; (131e8 <z_impl_log_process+0x14c>)
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   1312a:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1320c <z_impl_log_process+0x170>
   1312e:	1a9b      	subs	r3, r3, r2
   13130:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
   13134:	9201      	str	r2, [sp, #4]
	while (mask) {
   13136:	b937      	cbnz	r7, 13146 <z_impl_log_process+0xaa>
   13138:	4e2c      	ldr	r6, [pc, #176]	; (131ec <z_impl_log_process+0x150>)
   1313a:	4f2d      	ldr	r7, [pc, #180]	; (131f0 <z_impl_log_process+0x154>)
   1313c:	f04f 0800 	mov.w	r8, #0
   13140:	1bbf      	subs	r7, r7, r6
   13142:	113f      	asrs	r7, r7, #4
   13144:	e041      	b.n	131ca <z_impl_log_process+0x12e>
		idx = 31 - __builtin_clz(mask);
   13146:	fab7 f887 	clz	r8, r7
   1314a:	f1c8 081f 	rsb	r8, r8, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   1314e:	4641      	mov	r1, r8
   13150:	4628      	mov	r0, r5
   13152:	f019 fac8 	bl	2c6e6 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   13156:	4b27      	ldr	r3, [pc, #156]	; (131f4 <z_impl_log_process+0x158>)
		str = (const char *)log_msg_arg_get(msg, idx);
   13158:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   1315a:	4298      	cmp	r0, r3
   1315c:	d302      	bcc.n	13164 <z_impl_log_process+0xc8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   1315e:	4b26      	ldr	r3, [pc, #152]	; (131f8 <z_impl_log_process+0x15c>)
   13160:	4298      	cmp	r0, r3
   13162:	d320      	bcc.n	131a6 <z_impl_log_process+0x10a>
   13164:	4610      	mov	r0, r2
   13166:	f7ff ff89 	bl	1307c <log_is_strdup>
   1316a:	b9e0      	cbnz	r0, 131a6 <z_impl_log_process+0x10a>
   1316c:	4b23      	ldr	r3, [pc, #140]	; (131fc <z_impl_log_process+0x160>)
   1316e:	429a      	cmp	r2, r3
   13170:	d019      	beq.n	131a6 <z_impl_log_process+0x10a>
	return msg->hdr.ids.source_id;
   13172:	896b      	ldrh	r3, [r5, #10]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   13174:	4922      	ldr	r1, [pc, #136]	; (13200 <z_impl_log_process+0x164>)
   13176:	f3c3 1389 	ubfx	r3, r3, #6, #10
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   1317a:	455b      	cmp	r3, fp
   1317c:	bf2c      	ite	cs
   1317e:	4606      	movcs	r6, r0
	return __log_const_start[source_id].name;
   13180:	9a01      	ldrcc	r2, [sp, #4]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   13182:	4820      	ldr	r0, [pc, #128]	; (13204 <z_impl_log_process+0x168>)
   13184:	bf38      	it	cc
   13186:	f852 6033 	ldrcc.w	r6, [r2, r3, lsl #3]
   1318a:	23ad      	movs	r3, #173	; 0xad
   1318c:	4652      	mov	r2, sl
   1318e:	f018 ff92 	bl	2c0b6 <printk>
   13192:	4641      	mov	r1, r8
   13194:	481c      	ldr	r0, [pc, #112]	; (13208 <z_impl_log_process+0x16c>)
   13196:	464b      	mov	r3, r9
   13198:	4632      	mov	r2, r6
   1319a:	f018 ff8c 	bl	2c0b6 <printk>
   1319e:	21ad      	movs	r1, #173	; 0xad
   131a0:	4650      	mov	r0, sl
   131a2:	f019 f9a5 	bl	2c4f0 <assert_post_action>
		mask &= ~BIT(idx);
   131a6:	2301      	movs	r3, #1
   131a8:	fa03 f808 	lsl.w	r8, r3, r8
   131ac:	ea27 0708 	bic.w	r7, r7, r8
   131b0:	e7c1      	b.n	13136 <z_impl_log_process+0x9a>
			if (log_backend_is_active(backend) &&
   131b2:	4630      	mov	r0, r6
   131b4:	f019 f9bc 	bl	2c530 <log_backend_is_active>
   131b8:	b120      	cbz	r0, 131c4 <z_impl_log_process+0x128>
	backend->api->put(backend, msg);
   131ba:	6833      	ldr	r3, [r6, #0]
   131bc:	4629      	mov	r1, r5
   131be:	4630      	mov	r0, r6
   131c0:	681b      	ldr	r3, [r3, #0]
   131c2:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   131c4:	f108 0801 	add.w	r8, r8, #1
   131c8:	3610      	adds	r6, #16
   131ca:	45b8      	cmp	r8, r7
   131cc:	dbf1      	blt.n	131b2 <z_impl_log_process+0x116>
   131ce:	e786      	b.n	130de <z_impl_log_process+0x42>
   131d0:	20024713 	.word	0x20024713
   131d4:	200214fc 	.word	0x200214fc
   131d8:	200214f0 	.word	0x200214f0
   131dc:	200214f4 	.word	0x200214f4
   131e0:	20024714 	.word	0x20024714
   131e4:	0002ec7c 	.word	0x0002ec7c
   131e8:	0002ed1c 	.word	0x0002ed1c
   131ec:	0002ed1c 	.word	0x0002ed1c
   131f0:	0002ed2c 	.word	0x0002ed2c
   131f4:	0002e9c0 	.word	0x0002e9c0
   131f8:	00032fa8 	.word	0x00032fa8
   131fc:	000304c6 	.word	0x000304c6
   13200:	00032bdb 	.word	0x00032bdb
   13204:	000300ff 	.word	0x000300ff
   13208:	000304e0 	.word	0x000304e0
   1320c:	00030406 	.word	0x00030406

00013210 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   13210:	4b27      	ldr	r3, [pc, #156]	; (132b0 <msg_finalize+0xa0>)
{
   13212:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
   13214:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   13216:	8141      	strh	r1, [r0, #10]
{
   13218:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   1321a:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1321c:	4d25      	ldr	r5, [pc, #148]	; (132b4 <msg_finalize+0xa4>)
   1321e:	60e0      	str	r0, [r4, #12]
   13220:	e8d5 3fef 	ldaex	r3, [r5]
   13224:	3301      	adds	r3, #1
   13226:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1322a:	2a00      	cmp	r2, #0
   1322c:	d1f8      	bne.n	13220 <msg_finalize+0x10>
	__asm__ volatile(
   1322e:	f04f 0320 	mov.w	r3, #32
   13232:	f3ef 8611 	mrs	r6, BASEPRI
   13236:	f383 8811 	msr	BASEPRI, r3
   1323a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1323e:	481e      	ldr	r0, [pc, #120]	; (132b8 <msg_finalize+0xa8>)
   13240:	4621      	mov	r1, r4
   13242:	f019 f963 	bl	2c50c <log_list_add_tail>
	__asm__ volatile(
   13246:	f386 8811 	msr	BASEPRI, r6
   1324a:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
   1324e:	4b1b      	ldr	r3, [pc, #108]	; (132bc <msg_finalize+0xac>)
   13250:	781b      	ldrb	r3, [r3, #0]
   13252:	b183      	cbz	r3, 13276 <msg_finalize+0x66>
	__asm__ volatile(
   13254:	f04f 0320 	mov.w	r3, #32
   13258:	f3ef 8411 	mrs	r4, BASEPRI
   1325c:	f383 8811 	msr	BASEPRI, r3
   13260:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   13264:	2000      	movs	r0, #0
   13266:	f7ff ff19 	bl	1309c <z_impl_log_process>
	__asm__ volatile(
   1326a:	f384 8811 	msr	BASEPRI, r4
   1326e:	f3bf 8f6f 	isb	sy
}
   13272:	b002      	add	sp, #8
   13274:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   13276:	4a12      	ldr	r2, [pc, #72]	; (132c0 <msg_finalize+0xb0>)
   13278:	682b      	ldr	r3, [r5, #0]
   1327a:	6812      	ldr	r2, [r2, #0]
   1327c:	2a00      	cmp	r2, #0
   1327e:	d0f8      	beq.n	13272 <msg_finalize+0x62>
   13280:	2b01      	cmp	r3, #1
   13282:	d10a      	bne.n	1329a <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
   13284:	2200      	movs	r2, #0
   13286:	2300      	movs	r3, #0
   13288:	480e      	ldr	r0, [pc, #56]	; (132c4 <msg_finalize+0xb4>)
   1328a:	e9cd 2300 	strd	r2, r3, [sp]
   1328e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13292:	2300      	movs	r3, #0
   13294:	f011 ff96 	bl	251c4 <z_impl_k_timer_start>
   13298:	e7eb      	b.n	13272 <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   1329a:	2b0a      	cmp	r3, #10
   1329c:	d1e9      	bne.n	13272 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   1329e:	4809      	ldr	r0, [pc, #36]	; (132c4 <msg_finalize+0xb4>)
   132a0:	f01b fad9 	bl	2e856 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   132a4:	4808      	ldr	r0, [pc, #32]	; (132c8 <msg_finalize+0xb8>)
}
   132a6:	b002      	add	sp, #8
   132a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   132ac:	f011 b94c 	b.w	24548 <z_impl_k_sem_give>
   132b0:	20020430 	.word	0x20020430
   132b4:	200214f0 	.word	0x200214f0
   132b8:	200214fc 	.word	0x200214fc
   132bc:	20024714 	.word	0x20024714
   132c0:	20021520 	.word	0x20021520
   132c4:	20020dc0 	.word	0x20020dc0
   132c8:	20020c54 	.word	0x20020c54

000132cc <log_process_thread_func>:
	return __log_backends_end - __log_backends_start;
   132cc:	4b16      	ldr	r3, [pc, #88]	; (13328 <log_process_thread_func+0x5c>)
   132ce:	4a17      	ldr	r2, [pc, #92]	; (1332c <log_process_thread_func+0x60>)
{
   132d0:	b510      	push	{r4, lr}
   132d2:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   132d4:	2b00      	cmp	r3, #0
   132d6:	dc0b      	bgt.n	132f0 <log_process_thread_func+0x24>
   132d8:	4915      	ldr	r1, [pc, #84]	; (13330 <log_process_thread_func+0x64>)
   132da:	4816      	ldr	r0, [pc, #88]	; (13334 <log_process_thread_func+0x68>)
   132dc:	f240 4399 	movw	r3, #1177	; 0x499
   132e0:	4a15      	ldr	r2, [pc, #84]	; (13338 <log_process_thread_func+0x6c>)
   132e2:	f018 fee8 	bl	2c0b6 <printk>
   132e6:	f240 4199 	movw	r1, #1177	; 0x499
   132ea:	4813      	ldr	r0, [pc, #76]	; (13338 <log_process_thread_func+0x6c>)
   132ec:	f019 f900 	bl	2c4f0 <assert_post_action>
	log_init();
   132f0:	f7ff fe5a 	bl	12fa8 <log_init>
	return z_impl_k_current_get();
   132f4:	f011 f922 	bl	2453c <z_impl_k_current_get>
	proc_tid = process_tid;
   132f8:	4b10      	ldr	r3, [pc, #64]	; (1333c <log_process_thread_func+0x70>)
   132fa:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   132fc:	b130      	cbz	r0, 1330c <log_process_thread_func+0x40>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   132fe:	4b10      	ldr	r3, [pc, #64]	; (13340 <log_process_thread_func+0x74>)
	    process_tid &&
   13300:	681b      	ldr	r3, [r3, #0]
   13302:	2b09      	cmp	r3, #9
   13304:	dd02      	ble.n	1330c <log_process_thread_func+0x40>
	z_impl_k_sem_give(sem);
   13306:	480f      	ldr	r0, [pc, #60]	; (13344 <log_process_thread_func+0x78>)
   13308:	f011 f91e 	bl	24548 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   1330c:	4c0d      	ldr	r4, [pc, #52]	; (13344 <log_process_thread_func+0x78>)
   1330e:	2000      	movs	r0, #0
   13310:	f7ff fec4 	bl	1309c <z_impl_log_process>
		if (log_process(false) == false) {
   13314:	2800      	cmp	r0, #0
   13316:	d1fa      	bne.n	1330e <log_process_thread_func+0x42>
   13318:	f04f 32ff 	mov.w	r2, #4294967295
   1331c:	f04f 33ff 	mov.w	r3, #4294967295
   13320:	4620      	mov	r0, r4
   13322:	f011 f955 	bl	245d0 <z_impl_k_sem_take>
   13326:	e7f2      	b.n	1330e <log_process_thread_func+0x42>
   13328:	0002ed2c 	.word	0x0002ed2c
   1332c:	0002ed1c 	.word	0x0002ed1c
   13330:	00030521 	.word	0x00030521
   13334:	000300ff 	.word	0x000300ff
   13338:	00030406 	.word	0x00030406
   1333c:	20021520 	.word	0x20021520
   13340:	200214f0 	.word	0x200214f0
   13344:	20020c54 	.word	0x20020c54

00013348 <z_impl_log_panic>:
{
   13348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   1334a:	4f0f      	ldr	r7, [pc, #60]	; (13388 <z_impl_log_panic+0x40>)
   1334c:	783d      	ldrb	r5, [r7, #0]
   1334e:	b975      	cbnz	r5, 1336e <z_impl_log_panic+0x26>
	log_init();
   13350:	f7ff fe2a 	bl	12fa8 <log_init>
   13354:	4c0d      	ldr	r4, [pc, #52]	; (1338c <z_impl_log_panic+0x44>)
   13356:	4e0e      	ldr	r6, [pc, #56]	; (13390 <z_impl_log_panic+0x48>)
   13358:	1b36      	subs	r6, r6, r4
   1335a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   1335c:	42b5      	cmp	r5, r6
   1335e:	db07      	blt.n	13370 <z_impl_log_panic+0x28>
   13360:	2000      	movs	r0, #0
   13362:	f7ff fe9b 	bl	1309c <z_impl_log_process>
		while (log_process(false) == true) {
   13366:	2800      	cmp	r0, #0
   13368:	d1fa      	bne.n	13360 <z_impl_log_panic+0x18>
	panic_mode = true;
   1336a:	2301      	movs	r3, #1
   1336c:	703b      	strb	r3, [r7, #0]
}
   1336e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   13370:	4620      	mov	r0, r4
   13372:	f019 f8dd 	bl	2c530 <log_backend_is_active>
   13376:	b118      	cbz	r0, 13380 <z_impl_log_panic+0x38>
	backend->api->panic(backend);
   13378:	6823      	ldr	r3, [r4, #0]
   1337a:	4620      	mov	r0, r4
   1337c:	691b      	ldr	r3, [r3, #16]
   1337e:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   13380:	3501      	adds	r5, #1
   13382:	3410      	adds	r4, #16
   13384:	e7ea      	b.n	1335c <z_impl_log_panic+0x14>
   13386:	bf00      	nop
   13388:	20024714 	.word	0x20024714
   1338c:	0002ed1c 	.word	0x0002ed1c
   13390:	0002ed2c 	.word	0x0002ed2c

00013394 <log_free>:
{
   13394:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   13396:	3804      	subs	r0, #4
   13398:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1339a:	e8d0 3fef 	ldaex	r3, [r0]
   1339e:	1e5a      	subs	r2, r3, #1
   133a0:	e8c0 2fe1 	stlex	r1, r2, [r0]
   133a4:	2900      	cmp	r1, #0
   133a6:	d1f8      	bne.n	1339a <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   133a8:	2b01      	cmp	r3, #1
   133aa:	d103      	bne.n	133b4 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   133ac:	4803      	ldr	r0, [pc, #12]	; (133bc <log_free+0x28>)
   133ae:	a901      	add	r1, sp, #4
   133b0:	f00f faa2 	bl	228f8 <k_mem_slab_free>
}
   133b4:	b003      	add	sp, #12
   133b6:	f85d fb04 	ldr.w	pc, [sp], #4
   133ba:	bf00      	nop
   133bc:	20021504 	.word	0x20021504

000133c0 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   133c0:	2320      	movs	r3, #32
   133c2:	4902      	ldr	r1, [pc, #8]	; (133cc <log_msg_pool_init+0xc>)
   133c4:	461a      	mov	r2, r3
   133c6:	4802      	ldr	r0, [pc, #8]	; (133d0 <log_msg_pool_init+0x10>)
   133c8:	f01b b901 	b.w	2e5ce <k_mem_slab_init>
   133cc:	2002a470 	.word	0x2002a470
   133d0:	20021524 	.word	0x20021524

000133d4 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   133d4:	2300      	movs	r3, #0
{
   133d6:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   133d8:	4d09      	ldr	r5, [pc, #36]	; (13400 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   133da:	9301      	str	r3, [sp, #4]
   133dc:	2001      	movs	r0, #1
   133de:	f7ff fe5d 	bl	1309c <z_impl_log_process>
   133e2:	4604      	mov	r4, r0
			log_dropped();
   133e4:	f7ff fd98 	bl	12f18 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   133e8:	2200      	movs	r2, #0
   133ea:	2300      	movs	r3, #0
   133ec:	4628      	mov	r0, r5
   133ee:	a901      	add	r1, sp, #4
   133f0:	f00f fa16 	bl	22820 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   133f4:	b108      	cbz	r0, 133fa <log_msg_no_space_handle+0x26>
   133f6:	2c00      	cmp	r4, #0
   133f8:	d1f0      	bne.n	133dc <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
   133fa:	9801      	ldr	r0, [sp, #4]
   133fc:	b003      	add	sp, #12
   133fe:	bd30      	pop	{r4, r5, pc}
   13400:	20021524 	.word	0x20021524

00013404 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
   13404:	2300      	movs	r3, #0
{
   13406:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   13408:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
   1340a:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   1340c:	4806      	ldr	r0, [pc, #24]	; (13428 <log_msg_chunk_alloc+0x24>)
   1340e:	2300      	movs	r3, #0
   13410:	a901      	add	r1, sp, #4
   13412:	f00f fa05 	bl	22820 <k_mem_slab_alloc>
	if (err != 0) {
   13416:	b110      	cbz	r0, 1341e <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   13418:	f7ff ffdc 	bl	133d4 <log_msg_no_space_handle>
   1341c:	9001      	str	r0, [sp, #4]
}
   1341e:	9801      	ldr	r0, [sp, #4]
   13420:	b003      	add	sp, #12
   13422:	f85d fb04 	ldr.w	pc, [sp], #4
   13426:	bf00      	nop
   13428:	20021524 	.word	0x20021524

0001342c <msg_free>:
{
   1342c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1342e:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   13430:	7a45      	ldrb	r5, [r0, #9]
{
   13432:	b085      	sub	sp, #20
   13434:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   13436:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
   13438:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   1343c:	d41c      	bmi.n	13478 <msg_free+0x4c>
   1343e:	b1dd      	cbz	r5, 13478 <msg_free+0x4c>
		uint32_t smask = 0;
   13440:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
   13442:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   13444:	4631      	mov	r1, r6
   13446:	9801      	ldr	r0, [sp, #4]
   13448:	f019 f94d 	bl	2c6e6 <log_msg_arg_get>
   1344c:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   1344e:	f7ff fe15 	bl	1307c <log_is_strdup>
   13452:	b170      	cbz	r0, 13472 <msg_free+0x46>
				if (smask == 0) {
   13454:	b934      	cbnz	r4, 13464 <msg_free+0x38>
					smask = z_log_get_s_mask(
   13456:	9b01      	ldr	r3, [sp, #4]
   13458:	4629      	mov	r1, r5
   1345a:	6918      	ldr	r0, [r3, #16]
   1345c:	f7ff fce2 	bl	12e24 <z_log_get_s_mask>
					if (smask == 0) {
   13460:	4604      	mov	r4, r0
   13462:	b148      	cbz	r0, 13478 <msg_free+0x4c>
				if (smask & BIT(i)) {
   13464:	fa24 f306 	lsr.w	r3, r4, r6
   13468:	07d9      	lsls	r1, r3, #31
   1346a:	d502      	bpl.n	13472 <msg_free+0x46>
					log_free(buf);
   1346c:	4638      	mov	r0, r7
   1346e:	f7ff ff91 	bl	13394 <log_free>
		for (i = 0; i < nargs; i++) {
   13472:	3601      	adds	r6, #1
   13474:	42ae      	cmp	r6, r5
   13476:	d3e5      	bcc.n	13444 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
   13478:	9b01      	ldr	r3, [sp, #4]
   1347a:	7a1a      	ldrb	r2, [r3, #8]
   1347c:	0792      	lsls	r2, r2, #30
   1347e:	d504      	bpl.n	1348a <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
   13480:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   13482:	4c08      	ldr	r4, [pc, #32]	; (134a4 <msg_free+0x78>)
   13484:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   13486:	9b03      	ldr	r3, [sp, #12]
   13488:	b92b      	cbnz	r3, 13496 <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   1348a:	4806      	ldr	r0, [pc, #24]	; (134a4 <msg_free+0x78>)
   1348c:	a901      	add	r1, sp, #4
   1348e:	f00f fa33 	bl	228f8 <k_mem_slab_free>
}
   13492:	b005      	add	sp, #20
   13494:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   13496:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   13498:	4620      	mov	r0, r4
   1349a:	a903      	add	r1, sp, #12
   1349c:	f00f fa2c 	bl	228f8 <k_mem_slab_free>
		cont = next;
   134a0:	9503      	str	r5, [sp, #12]
   134a2:	e7f0      	b.n	13486 <msg_free+0x5a>
   134a4:	20021524 	.word	0x20021524

000134a8 <log_msg_create_n>:
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   134a8:	2a0e      	cmp	r2, #14
{
   134aa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134ae:	4681      	mov	r9, r0
   134b0:	4688      	mov	r8, r1
   134b2:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   134b4:	d90b      	bls.n	134ce <log_msg_create_n+0x26>
   134b6:	492d      	ldr	r1, [pc, #180]	; (1356c <log_msg_create_n+0xc4>)
   134b8:	482d      	ldr	r0, [pc, #180]	; (13570 <log_msg_create_n+0xc8>)
   134ba:	f44f 739b 	mov.w	r3, #310	; 0x136
   134be:	4a2d      	ldr	r2, [pc, #180]	; (13574 <log_msg_create_n+0xcc>)
   134c0:	f018 fdf9 	bl	2c0b6 <printk>
   134c4:	f44f 719b 	mov.w	r1, #310	; 0x136
   134c8:	482a      	ldr	r0, [pc, #168]	; (13574 <log_msg_create_n+0xcc>)
   134ca:	f019 f811 	bl	2c4f0 <assert_post_action>
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   134ce:	f7ff ff99 	bl	13404 <log_msg_chunk_alloc>

	if (msg != NULL) {
   134d2:	4604      	mov	r4, r0
   134d4:	b330      	cbz	r0, 13524 <log_msg_create_n+0x7c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   134d6:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   134d8:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   134da:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   134dc:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   134de:	8107      	strh	r7, [r0, #8]
   134e0:	d909      	bls.n	134f6 <log_msg_create_n+0x4e>
	msg->hdr.params.generic.ext = 1;
   134e2:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   134e4:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
   134e8:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   134ea:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   134ee:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   134f0:	f1ba 0f00 	cmp.w	sl, #0
   134f4:	dc0e      	bgt.n	13514 <log_msg_create_n+0x6c>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   134f6:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   134f8:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   134fa:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   134fe:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   13502:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   13504:	d818      	bhi.n	13538 <log_msg_create_n+0x90>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13506:	4641      	mov	r1, r8
   13508:	00aa      	lsls	r2, r5, #2
   1350a:	f104 0014 	add.w	r0, r4, #20
   1350e:	f7f9 fb1d 	bl	cb4c <memcpy>
	while (nargs != 0U) {
   13512:	e007      	b.n	13524 <log_msg_create_n+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   13514:	f7ff ff76 	bl	13404 <log_msg_chunk_alloc>
		if (cont == NULL) {
   13518:	4606      	mov	r6, r0
   1351a:	b930      	cbnz	r0, 1352a <log_msg_create_n+0x82>
			msg_free(msg);
   1351c:	4620      	mov	r0, r4
   1351e:	f7ff ff85 	bl	1342c <msg_free>
			return NULL;
   13522:	4634      	mov	r4, r6
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   13524:	4620      	mov	r0, r4
   13526:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1352a:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1352e:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
   13532:	4683      	mov	fp, r0
		cont->next = NULL;
   13534:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
   13536:	e7db      	b.n	134f0 <log_msg_create_n+0x48>
   13538:	f8d8 3000 	ldr.w	r3, [r8]
	struct log_msg_cont *cont = msg->payload.ext.next;
   1353c:	6967      	ldr	r7, [r4, #20]
   1353e:	61a3      	str	r3, [r4, #24]
   13540:	f8d8 3004 	ldr.w	r3, [r8, #4]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   13544:	3d02      	subs	r5, #2
   13546:	61e3      	str	r3, [r4, #28]
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   13548:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1354c:	2d07      	cmp	r5, #7
   1354e:	462e      	mov	r6, r5
   13550:	bf28      	it	cs
   13552:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   13554:	ea4f 0986 	mov.w	r9, r6, lsl #2
   13558:	4641      	mov	r1, r8
   1355a:	1d38      	adds	r0, r7, #4
   1355c:	464a      	mov	r2, r9
   1355e:	f7f9 faf5 	bl	cb4c <memcpy>
	while (nargs != 0U) {
   13562:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   13564:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   13566:	44c8      	add	r8, r9
	while (nargs != 0U) {
   13568:	d1f0      	bne.n	1354c <log_msg_create_n+0xa4>
   1356a:	e7db      	b.n	13524 <log_msg_create_n+0x7c>
   1356c:	00030576 	.word	0x00030576
   13570:	000300ff 	.word	0x000300ff
   13574:	0003054a 	.word	0x0003054a

00013578 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   13578:	b40e      	push	{r1, r2, r3}
   1357a:	b503      	push	{r0, r1, lr}
   1357c:	ab03      	add	r3, sp, #12
   1357e:	f853 2b04 	ldr.w	r2, [r3], #4
   13582:	4601      	mov	r1, r0
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   13584:	4804      	ldr	r0, [pc, #16]	; (13598 <print_formatted+0x20>)
	va_start(args, fmt);
   13586:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   13588:	f7fe fdee 	bl	12168 <z_vprintk>
#endif
	va_end(args);

	return length;
}
   1358c:	2000      	movs	r0, #0
   1358e:	b002      	add	sp, #8
   13590:	f85d eb04 	ldr.w	lr, [sp], #4
   13594:	b003      	add	sp, #12
   13596:	4770      	bx	lr
   13598:	000137d9 	.word	0x000137d9

0001359c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
   1359c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   135a0:	f011 0402 	ands.w	r4, r1, #2
{
   135a4:	b085      	sub	sp, #20
   135a6:	4606      	mov	r6, r0
   135a8:	4690      	mov	r8, r2
   135aa:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   135ae:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   135b2:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   135b6:	d007      	beq.n	135c8 <prefix_print+0x2c>
	if (!format) {
   135b8:	f011 0f44 	tst.w	r1, #68	; 0x44
   135bc:	d137      	bne.n	1362e <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   135be:	461a      	mov	r2, r3
   135c0:	4932      	ldr	r1, [pc, #200]	; (1368c <prefix_print+0xf0>)
   135c2:	f7ff ffd9 	bl	13578 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   135c6:	4604      	mov	r4, r0
	if (color) {
   135c8:	f1b9 0f00 	cmp.w	r9, #0
   135cc:	d00a      	beq.n	135e4 <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
   135ce:	4b30      	ldr	r3, [pc, #192]	; (13690 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
   135d0:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
   135d2:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
   135d6:	4b2f      	ldr	r3, [pc, #188]	; (13694 <prefix_print+0xf8>)
   135d8:	492f      	ldr	r1, [pc, #188]	; (13698 <prefix_print+0xfc>)
   135da:	2a00      	cmp	r2, #0
   135dc:	bf08      	it	eq
   135de:	461a      	moveq	r2, r3
   135e0:	f7ff ffca 	bl	13578 <print_formatted>
	if (level_on) {
   135e4:	b13d      	cbz	r5, 135f6 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   135e6:	4b2d      	ldr	r3, [pc, #180]	; (1369c <prefix_print+0x100>)
   135e8:	4630      	mov	r0, r6
   135ea:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   135ee:	492c      	ldr	r1, [pc, #176]	; (136a0 <prefix_print+0x104>)
   135f0:	f7ff ffc2 	bl	13578 <print_formatted>
   135f4:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   135f6:	f1b8 0f00 	cmp.w	r8, #0
   135fa:	d044      	beq.n	13686 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   135fc:	2301      	movs	r3, #1
   135fe:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   13602:	4b28      	ldr	r3, [pc, #160]	; (136a4 <prefix_print+0x108>)
   13604:	f017 0f10 	tst.w	r7, #16
   13608:	4f27      	ldr	r7, [pc, #156]	; (136a8 <prefix_print+0x10c>)
   1360a:	bf18      	it	ne
   1360c:	461f      	movne	r7, r3
   1360e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   13612:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   13616:	f7ff fc8b 	bl	12f30 <log_source_name_get>
   1361a:	4639      	mov	r1, r7
   1361c:	4602      	mov	r2, r0
   1361e:	4630      	mov	r0, r6
   13620:	f7ff ffaa 	bl	13578 <print_formatted>
   13624:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
   13626:	4420      	add	r0, r4
   13628:	b005      	add	sp, #20
   1362a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   1362e:	4a1f      	ldr	r2, [pc, #124]	; (136ac <prefix_print+0x110>)
   13630:	6811      	ldr	r1, [r2, #0]
   13632:	b331      	cbz	r1, 13682 <prefix_print+0xe6>
		timestamp /= timestamp_div;
   13634:	4a1e      	ldr	r2, [pc, #120]	; (136b0 <prefix_print+0x114>)
   13636:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   1363a:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   1363c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   13640:	fbb3 f3f4 	udiv	r3, r3, r4
		total_seconds = timestamp / freq;
   13644:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   13648:	fbb4 f2fe 	udiv	r2, r4, lr
   1364c:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   13650:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   13654:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13658:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   1365c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13660:	fb01 441b 	mls	r4, r1, fp, r4
   13664:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   13668:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1366c:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   13670:	e9cd b101 	strd	fp, r1, [sp, #4]
   13674:	fb0a e113 	mls	r1, sl, r3, lr
   13678:	9100      	str	r1, [sp, #0]
   1367a:	490e      	ldr	r1, [pc, #56]	; (136b4 <prefix_print+0x118>)
   1367c:	f7ff ff7c 	bl	13578 <print_formatted>
   13680:	e7a1      	b.n	135c6 <prefix_print+0x2a>
		length = 0;
   13682:	4608      	mov	r0, r1
   13684:	e79f      	b.n	135c6 <prefix_print+0x2a>
	total += print_formatted(log_output,
   13686:	4f08      	ldr	r7, [pc, #32]	; (136a8 <prefix_print+0x10c>)
   13688:	e7c1      	b.n	1360e <prefix_print+0x72>
   1368a:	bf00      	nop
   1368c:	0003058f 	.word	0x0003058f
   13690:	0002eea0 	.word	0x0002eea0
   13694:	00030581 	.word	0x00030581
   13698:	00031e63 	.word	0x00031e63
   1369c:	0002eeb4 	.word	0x0002eeb4
   136a0:	000305b4 	.word	0x000305b4
   136a4:	0003058b 	.word	0x0003058b
   136a8:	00030586 	.word	0x00030586
   136ac:	20021540 	.word	0x20021540
   136b0:	20021544 	.word	0x20021544
   136b4:	00030598 	.word	0x00030598

000136b8 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
   136b8:	b538      	push	{r3, r4, r5, lr}
   136ba:	460c      	mov	r4, r1
	if (color) {
   136bc:	07e1      	lsls	r1, r4, #31
{
   136be:	4605      	mov	r5, r0
	if (color) {
   136c0:	d503      	bpl.n	136ca <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
   136c2:	4a08      	ldr	r2, [pc, #32]	; (136e4 <postfix_print+0x2c>)
   136c4:	4908      	ldr	r1, [pc, #32]	; (136e8 <postfix_print+0x30>)
   136c6:	f7ff ff57 	bl	13578 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   136ca:	06e2      	lsls	r2, r4, #27
   136cc:	d408      	bmi.n	136e0 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   136ce:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   136d0:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   136d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   136d6:	bf4c      	ite	mi
   136d8:	4904      	ldrmi	r1, [pc, #16]	; (136ec <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   136da:	4905      	ldrpl	r1, [pc, #20]	; (136f0 <postfix_print+0x38>)
   136dc:	f7ff bf4c 	b.w	13578 <print_formatted>
}
   136e0:	bd38      	pop	{r3, r4, r5, pc}
   136e2:	bf00      	nop
   136e4:	00030581 	.word	0x00030581
   136e8:	00031e63 	.word	0x00031e63
   136ec:	0003072d 	.word	0x0003072d
   136f0:	00032797 	.word	0x00032797

000136f4 <hexdump_line_print>:
{
   136f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   136f8:	461d      	mov	r5, r3
   136fa:	9b08      	ldr	r3, [sp, #32]
   136fc:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   136fe:	06da      	lsls	r2, r3, #27
{
   13700:	4604      	mov	r4, r0
   13702:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13704:	d405      	bmi.n	13712 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   13706:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   13708:	bf4c      	ite	mi
   1370a:	492b      	ldrmi	r1, [pc, #172]	; (137b8 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   1370c:	492b      	ldrpl	r1, [pc, #172]	; (137bc <hexdump_line_print+0xc8>)
   1370e:	f7ff ff33 	bl	13578 <print_formatted>
{
   13712:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
   13716:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 137c4 <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   1371a:	45a8      	cmp	r8, r5
   1371c:	db2d      	blt.n	1377a <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1371e:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   13720:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 137c8 <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
   13724:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 137cc <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
   13728:	f8df a098 	ldr.w	sl, [pc, #152]	; 137c4 <hexdump_line_print+0xd0>
		if (i < length) {
   1372c:	42bd      	cmp	r5, r7
   1372e:	d232      	bcs.n	13796 <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
   13730:	4649      	mov	r1, r9
   13732:	4620      	mov	r0, r4
   13734:	5d72      	ldrb	r2, [r6, r5]
   13736:	f7ff ff1f 	bl	13578 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1373a:	3501      	adds	r5, #1
   1373c:	2d10      	cmp	r5, #16
   1373e:	d123      	bne.n	13788 <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
   13740:	4620      	mov	r0, r4
   13742:	491f      	ldr	r1, [pc, #124]	; (137c0 <hexdump_line_print+0xcc>)
   13744:	f7ff ff18 	bl	13578 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13748:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   1374a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 137c4 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   1374e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 137d0 <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
   13752:	f8df a080 	ldr.w	sl, [pc, #128]	; 137d4 <hexdump_line_print+0xe0>
		if (i < length) {
   13756:	42af      	cmp	r7, r5
   13758:	d929      	bls.n	137ae <hexdump_line_print+0xba>
			char c = (char)data[i];
   1375a:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   1375c:	4651      	mov	r1, sl
   1375e:	f812 3009 	ldrb.w	r3, [r2, r9]
   13762:	4620      	mov	r0, r4
   13764:	f013 0f97 	tst.w	r3, #151	; 0x97
   13768:	bf08      	it	eq
   1376a:	222e      	moveq	r2, #46	; 0x2e
   1376c:	f7ff ff04 	bl	13578 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13770:	3501      	adds	r5, #1
   13772:	2d10      	cmp	r5, #16
   13774:	d114      	bne.n	137a0 <hexdump_line_print+0xac>
}
   13776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   1377a:	4649      	mov	r1, r9
   1377c:	4620      	mov	r0, r4
   1377e:	f7ff fefb 	bl	13578 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   13782:	f108 0801 	add.w	r8, r8, #1
   13786:	e7c8      	b.n	1371a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   13788:	076a      	lsls	r2, r5, #29
   1378a:	d1cf      	bne.n	1372c <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
   1378c:	4651      	mov	r1, sl
   1378e:	4620      	mov	r0, r4
   13790:	f7ff fef2 	bl	13578 <print_formatted>
   13794:	e7ca      	b.n	1372c <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
   13796:	4641      	mov	r1, r8
   13798:	4620      	mov	r0, r4
   1379a:	f7ff feed 	bl	13578 <print_formatted>
   1379e:	e7cc      	b.n	1373a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   137a0:	076b      	lsls	r3, r5, #29
   137a2:	d1d8      	bne.n	13756 <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   137a4:	4641      	mov	r1, r8
   137a6:	4620      	mov	r0, r4
   137a8:	f7ff fee6 	bl	13578 <print_formatted>
   137ac:	e7d3      	b.n	13756 <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   137ae:	4641      	mov	r1, r8
   137b0:	4620      	mov	r0, r4
   137b2:	f7ff fee1 	bl	13578 <print_formatted>
   137b6:	e7db      	b.n	13770 <hexdump_line_print+0x7c>
   137b8:	0003072d 	.word	0x0003072d
   137bc:	00032797 	.word	0x00032797
   137c0:	000305c4 	.word	0x000305c4
   137c4:	000305c2 	.word	0x000305c2
   137c8:	000305c0 	.word	0x000305c0
   137cc:	000305ba 	.word	0x000305ba
   137d0:	0002f5d9 	.word	0x0002f5d9
   137d4:	000305c6 	.word	0x000305c6

000137d8 <out_func>:
{
   137d8:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   137da:	684b      	ldr	r3, [r1, #4]
{
   137dc:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   137de:	681a      	ldr	r2, [r3, #0]
   137e0:	68cb      	ldr	r3, [r1, #12]
{
   137e2:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   137e4:	429a      	cmp	r2, r3
   137e6:	d102      	bne.n	137ee <out_func+0x16>
		log_output_flush(out_ctx);
   137e8:	4608      	mov	r0, r1
   137ea:	f019 f91d 	bl	2ca28 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   137ee:	6863      	ldr	r3, [r4, #4]
   137f0:	e8d3 2fef 	ldaex	r2, [r3]
   137f4:	1c51      	adds	r1, r2, #1
   137f6:	e8c3 1fe0 	stlex	r0, r1, [r3]
   137fa:	2800      	cmp	r0, #0
   137fc:	d1f8      	bne.n	137f0 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   137fe:	68a3      	ldr	r3, [r4, #8]
   13800:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   13802:	6863      	ldr	r3, [r4, #4]
   13804:	681a      	ldr	r2, [r3, #0]
   13806:	68e3      	ldr	r3, [r4, #12]
   13808:	429a      	cmp	r2, r3
   1380a:	d909      	bls.n	13820 <out_func+0x48>
   1380c:	4905      	ldr	r1, [pc, #20]	; (13824 <out_func+0x4c>)
   1380e:	4806      	ldr	r0, [pc, #24]	; (13828 <out_func+0x50>)
   13810:	2378      	movs	r3, #120	; 0x78
   13812:	4a06      	ldr	r2, [pc, #24]	; (1382c <out_func+0x54>)
   13814:	f018 fc4f 	bl	2c0b6 <printk>
   13818:	2178      	movs	r1, #120	; 0x78
   1381a:	4804      	ldr	r0, [pc, #16]	; (1382c <out_func+0x54>)
   1381c:	f018 fe68 	bl	2c4f0 <assert_post_action>
}
   13820:	2000      	movs	r0, #0
   13822:	bd38      	pop	{r3, r4, r5, pc}
   13824:	000305f8 	.word	0x000305f8
   13828:	000300ff 	.word	0x000300ff
   1382c:	000305c9 	.word	0x000305c9

00013830 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   13830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   13834:	7a8b      	ldrb	r3, [r1, #10]
   13836:	4616      	mov	r6, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   13838:	f013 0707 	ands.w	r7, r3, #7
{
   1383c:	4604      	mov	r4, r0
   1383e:	460d      	mov	r5, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   13840:	7a0a      	ldrb	r2, [r1, #8]
   13842:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   13844:	d020      	beq.n	13888 <log_output_msg_process+0x58>
   13846:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   13848:	8949      	ldrh	r1, [r1, #10]
   1384a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1384e:	f3c1 1189 	ubfx	r1, r1, #6, #10
   13852:	e9cd 7300 	strd	r7, r3, [sp]
   13856:	9102      	str	r1, [sp, #8]
   13858:	68eb      	ldr	r3, [r5, #12]
   1385a:	4631      	mov	r1, r6
   1385c:	f002 0201 	and.w	r2, r2, #1
   13860:	f7ff fe9c 	bl	1359c <prefix_print>
   13864:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   13866:	7a2b      	ldrb	r3, [r5, #8]
   13868:	43db      	mvns	r3, r3
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   1386a:	f013 0801 	ands.w	r8, r3, #1
   1386e:	d00d      	beq.n	1388c <log_output_msg_process+0x5c>
		std_print(msg, log_output);
   13870:	4621      	mov	r1, r4
   13872:	4628      	mov	r0, r5
   13874:	f018 ff7b 	bl	2c76e <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
   13878:	2f00      	cmp	r7, #0
   1387a:	d03c      	beq.n	138f6 <log_output_msg_process+0xc6>
		postfix_print(log_output, flags, level);
   1387c:	463a      	mov	r2, r7
   1387e:	4631      	mov	r1, r6
   13880:	4620      	mov	r0, r4
   13882:	f7ff ff19 	bl	136b8 <postfix_print>
   13886:	e036      	b.n	138f6 <log_output_msg_process+0xc6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   13888:	46b9      	mov	r9, r7
   1388a:	e7ec      	b.n	13866 <log_output_msg_process+0x36>
	} else if (raw_string) {
   1388c:	2f00      	cmp	r7, #0
   1388e:	d138      	bne.n	13902 <log_output_msg_process+0xd2>
	__ASSERT_NO_MSG(log_output->size);
   13890:	68e3      	ldr	r3, [r4, #12]
   13892:	b95b      	cbnz	r3, 138ac <log_output_msg_process+0x7c>
   13894:	492a      	ldr	r1, [pc, #168]	; (13940 <log_output_msg_process+0x110>)
   13896:	482b      	ldr	r0, [pc, #172]	; (13944 <log_output_msg_process+0x114>)
   13898:	f240 13bb 	movw	r3, #443	; 0x1bb
   1389c:	4a2a      	ldr	r2, [pc, #168]	; (13948 <log_output_msg_process+0x118>)
   1389e:	f018 fc0a 	bl	2c0b6 <printk>
   138a2:	f240 11bb 	movw	r1, #443	; 0x1bb
   138a6:	4828      	ldr	r0, [pc, #160]	; (13948 <log_output_msg_process+0x118>)
   138a8:	f018 fe22 	bl	2c4f0 <assert_post_action>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   138ac:	2600      	movs	r6, #0
		length = log_output->size;
   138ae:	68e3      	ldr	r3, [r4, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   138b0:	aa06      	add	r2, sp, #24
		length = log_output->size;
   138b2:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   138b4:	4628      	mov	r0, r5
   138b6:	4633      	mov	r3, r6
   138b8:	68a1      	ldr	r1, [r4, #8]
   138ba:	f018 ff44 	bl	2c746 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
   138be:	9a06      	ldr	r2, [sp, #24]
   138c0:	6863      	ldr	r3, [r4, #4]
   138c2:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   138c4:	b14a      	cbz	r2, 138da <log_output_msg_process+0xaa>
			eol = (log_output->buf[length - 1] == '\n');
   138c6:	68a3      	ldr	r3, [r4, #8]
   138c8:	4413      	add	r3, r2
   138ca:	f813 8c01 	ldrb.w	r8, [r3, #-1]
   138ce:	f1a8 030a 	sub.w	r3, r8, #10
   138d2:	f1d3 0800 	rsbs	r8, r3, #0
   138d6:	eb48 0803 	adc.w	r8, r8, r3
		log_output_flush(log_output);
   138da:	4620      	mov	r0, r4
   138dc:	f019 f8a4 	bl	2ca28 <log_output_flush>
		offset += length;
   138e0:	9b06      	ldr	r3, [sp, #24]
   138e2:	441e      	add	r6, r3
	} while (length > 0);
   138e4:	2b00      	cmp	r3, #0
   138e6:	d1e2      	bne.n	138ae <log_output_msg_process+0x7e>
	if (eol) {
   138e8:	f1b8 0f00 	cmp.w	r8, #0
   138ec:	d003      	beq.n	138f6 <log_output_msg_process+0xc6>
		print_formatted(log_output, "\r");
   138ee:	4620      	mov	r0, r4
   138f0:	4916      	ldr	r1, [pc, #88]	; (1394c <log_output_msg_process+0x11c>)
   138f2:	f7ff fe41 	bl	13578 <print_formatted>
	}

	log_output_flush(log_output);
   138f6:	4620      	mov	r0, r4
   138f8:	f019 f896 	bl	2ca28 <log_output_flush>
}
   138fc:	b00a      	add	sp, #40	; 0x28
   138fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
   13902:	4628      	mov	r0, r5
   13904:	f018 ff1d 	bl	2c742 <log_msg_str_get>
   13908:	4911      	ldr	r1, [pc, #68]	; (13950 <log_output_msg_process+0x120>)
   1390a:	4602      	mov	r2, r0
   1390c:	4620      	mov	r0, r4
   1390e:	f7ff fe33 	bl	13578 <print_formatted>
		length = sizeof(buf);
   13912:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   13916:	aa05      	add	r2, sp, #20
   13918:	4643      	mov	r3, r8
   1391a:	4628      	mov	r0, r5
   1391c:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   1391e:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   13922:	f018 ff10 	bl	2c746 <log_msg_hexdump_data_get>
		if (length) {
   13926:	9a05      	ldr	r2, [sp, #20]
   13928:	2a00      	cmp	r2, #0
   1392a:	d0a7      	beq.n	1387c <log_output_msg_process+0x4c>
			hexdump_line_print(log_output, buf, length,
   1392c:	464b      	mov	r3, r9
   1392e:	4620      	mov	r0, r4
   13930:	9600      	str	r6, [sp, #0]
   13932:	a906      	add	r1, sp, #24
   13934:	f7ff fede 	bl	136f4 <hexdump_line_print>
			offset += length;
   13938:	9b05      	ldr	r3, [sp, #20]
   1393a:	4498      	add	r8, r3
		length = sizeof(buf);
   1393c:	e7eb      	b.n	13916 <log_output_msg_process+0xe6>
   1393e:	bf00      	nop
   13940:	00030628 	.word	0x00030628
   13944:	000300ff 	.word	0x000300ff
   13948:	000305c9 	.word	0x000305c9
   1394c:	00030639 	.word	0x00030639
   13950:	00031e63 	.word	0x00031e63

00013954 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13954:	f242 730f 	movw	r3, #9999	; 0x270f
{
   13958:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1395a:	428b      	cmp	r3, r1
   1395c:	bf28      	it	cs
   1395e:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
   13960:	6805      	ldr	r5, [r0, #0]
{
   13962:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13964:	2105      	movs	r1, #5
   13966:	4668      	mov	r0, sp
   13968:	4a0d      	ldr	r2, [pc, #52]	; (139a0 <log_output_dropped_process+0x4c>)
   1396a:	f018 fbb1 	bl	2c0d0 <snprintk>
   1396e:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   13970:	6863      	ldr	r3, [r4, #4]
   13972:	4628      	mov	r0, r5
   13974:	220b      	movs	r2, #11
   13976:	685b      	ldr	r3, [r3, #4]
   13978:	490a      	ldr	r1, [pc, #40]	; (139a4 <log_output_dropped_process+0x50>)
   1397a:	f018 feeb 	bl	2c754 <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
   1397e:	6863      	ldr	r3, [r4, #4]
   13980:	4632      	mov	r2, r6
   13982:	4669      	mov	r1, sp
   13984:	4628      	mov	r0, r5
   13986:	685b      	ldr	r3, [r3, #4]
   13988:	f018 fee4 	bl	2c754 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   1398c:	6863      	ldr	r3, [r4, #4]
   1398e:	221b      	movs	r2, #27
   13990:	4628      	mov	r0, r5
   13992:	685b      	ldr	r3, [r3, #4]
   13994:	4904      	ldr	r1, [pc, #16]	; (139a8 <log_output_dropped_process+0x54>)
   13996:	f018 fedd 	bl	2c754 <buffer_write>
		     log_output->control_block->ctx);
}
   1399a:	b002      	add	sp, #8
   1399c:	bd70      	pop	{r4, r5, r6, pc}
   1399e:	bf00      	nop
   139a0:	0002fb26 	.word	0x0002fb26
   139a4:	00030677 	.word	0x00030677
   139a8:	0003065b 	.word	0x0003065b

000139ac <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   139ac:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   139ae:	2100      	movs	r1, #0
	timestamp_div = 1U;
   139b0:	4a07      	ldr	r2, [pc, #28]	; (139d0 <log_output_timestamp_freq_set+0x24>)
{
   139b2:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   139b4:	4c07      	ldr	r4, [pc, #28]	; (139d4 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   139b6:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   139b8:	42a0      	cmp	r0, r4
   139ba:	d804      	bhi.n	139c6 <log_output_timestamp_freq_set+0x1a>
   139bc:	b101      	cbz	r1, 139c0 <log_output_timestamp_freq_set+0x14>
   139be:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   139c0:	4b05      	ldr	r3, [pc, #20]	; (139d8 <log_output_timestamp_freq_set+0x2c>)
   139c2:	6018      	str	r0, [r3, #0]
}
   139c4:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   139c6:	2101      	movs	r1, #1
		frequency /= 2U;
   139c8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   139ca:	005b      	lsls	r3, r3, #1
   139cc:	e7f4      	b.n	139b8 <log_output_timestamp_freq_set+0xc>
   139ce:	bf00      	nop
   139d0:	20021544 	.word	0x20021544
   139d4:	000f4240 	.word	0x000f4240
   139d8:	20021540 	.word	0x20021540

000139dc <char_out>:
#include <assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   139dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   139de:	460d      	mov	r5, r1
   139e0:	4604      	mov	r4, r0
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
   139e2:	4f06      	ldr	r7, [pc, #24]	; (139fc <char_out+0x20>)
   139e4:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
   139e6:	42b4      	cmp	r4, r6
   139e8:	d101      	bne.n	139ee <char_out+0x12>
	}

	return length;
}
   139ea:	4628      	mov	r0, r5
   139ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
   139ee:	6838      	ldr	r0, [r7, #0]
   139f0:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   139f4:	6883      	ldr	r3, [r0, #8]
   139f6:	685b      	ldr	r3, [r3, #4]
   139f8:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   139fa:	e7f4      	b.n	139e6 <char_out+0xa>
   139fc:	2002155c 	.word	0x2002155c

00013a00 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   13a00:	4801      	ldr	r0, [pc, #4]	; (13a08 <panic+0x8>)
   13a02:	f019 b811 	b.w	2ca28 <log_output_flush>
   13a06:	bf00      	nop
   13a08:	0002eee0 	.word	0x0002eee0

00013a0c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
   13a0c:	4801      	ldr	r0, [pc, #4]	; (13a14 <dropped+0x8>)
   13a0e:	f7ff bfa1 	b.w	13954 <log_output_dropped_process>
   13a12:	bf00      	nop
   13a14:	0002eee0 	.word	0x0002eee0

00013a18 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
   13a18:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   13a1a:	4806      	ldr	r0, [pc, #24]	; (13a34 <log_backend_uart_init+0x1c>)
   13a1c:	f00e fc08 	bl	22230 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   13a20:	4b05      	ldr	r3, [pc, #20]	; (13a38 <log_backend_uart_init+0x20>)
   13a22:	6018      	str	r0, [r3, #0]
	assert((void *)uart_dev);
   13a24:	b928      	cbnz	r0, 13a32 <log_backend_uart_init+0x1a>
   13a26:	212d      	movs	r1, #45	; 0x2d
   13a28:	4b04      	ldr	r3, [pc, #16]	; (13a3c <log_backend_uart_init+0x24>)
   13a2a:	4a05      	ldr	r2, [pc, #20]	; (13a40 <log_backend_uart_init+0x28>)
   13a2c:	4805      	ldr	r0, [pc, #20]	; (13a44 <log_backend_uart_init+0x2c>)
   13a2e:	f011 ffa5 	bl	2597c <__assert_func>
}
   13a32:	bd08      	pop	{r3, pc}
   13a34:	00030683 	.word	0x00030683
   13a38:	2002155c 	.word	0x2002155c
   13a3c:	0003068a 	.word	0x0003068a
   13a40:	000306e1 	.word	0x000306e1
   13a44:	0003069b 	.word	0x0003069b

00013a48 <put>:
{
   13a48:	b510      	push	{r4, lr}
   13a4a:	460c      	mov	r4, r1
	log_msg_get(msg);
   13a4c:	4608      	mov	r0, r1
   13a4e:	f018 fe3e 	bl	2c6ce <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
   13a52:	4621      	mov	r1, r4
   13a54:	4804      	ldr	r0, [pc, #16]	; (13a68 <put+0x20>)
   13a56:	220f      	movs	r2, #15
   13a58:	f7ff feea 	bl	13830 <log_output_msg_process>
	log_msg_put(msg);
   13a5c:	4620      	mov	r0, r4
}
   13a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13a62:	f018 be5f 	b.w	2c724 <log_msg_put>
   13a66:	bf00      	nop
   13a68:	0002eee0 	.word	0x0002eee0

00013a6c <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
   13a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   13a70:	f8df 909c 	ldr.w	r9, [pc, #156]	; 13b10 <z_impl_zsock_socket+0xa4>
{
   13a74:	4605      	mov	r5, r0
   13a76:	460e      	mov	r6, r1
   13a78:	4617      	mov	r7, r2
   13a7a:	46ca      	mov	sl, r9
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   13a7c:	4c1e      	ldr	r4, [pc, #120]	; (13af8 <z_impl_zsock_socket+0x8c>)
   13a7e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 13b14 <z_impl_zsock_socket+0xa8>
   13a82:	454c      	cmp	r4, r9
   13a84:	d90c      	bls.n	13aa0 <z_impl_zsock_socket+0x34>
   13a86:	491d      	ldr	r1, [pc, #116]	; (13afc <z_impl_zsock_socket+0x90>)
   13a88:	23c0      	movs	r3, #192	; 0xc0
   13a8a:	4642      	mov	r2, r8
   13a8c:	481c      	ldr	r0, [pc, #112]	; (13b00 <z_impl_zsock_socket+0x94>)
   13a8e:	f018 fb12 	bl	2c0b6 <printk>
   13a92:	481c      	ldr	r0, [pc, #112]	; (13b04 <z_impl_zsock_socket+0x98>)
   13a94:	f018 fb0f 	bl	2c0b6 <printk>
   13a98:	21c0      	movs	r1, #192	; 0xc0
   13a9a:	4640      	mov	r0, r8
   13a9c:	f018 fd28 	bl	2c4f0 <assert_post_action>
   13aa0:	4554      	cmp	r4, sl
   13aa2:	d307      	bcc.n	13ab4 <z_impl_zsock_socket+0x48>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   13aa4:	f019 f955 	bl	2cd52 <__errno>
   13aa8:	236a      	movs	r3, #106	; 0x6a
   13aaa:	6003      	str	r3, [r0, #0]
	return -1;
}
   13aac:	f04f 30ff 	mov.w	r0, #4294967295
   13ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sock_family->family != family &&
   13ab4:	6823      	ldr	r3, [r4, #0]
   13ab6:	42ab      	cmp	r3, r5
   13ab8:	d000      	beq.n	13abc <z_impl_zsock_socket+0x50>
   13aba:	b9db      	cbnz	r3, 13af4 <z_impl_zsock_socket+0x88>
		NET_ASSERT(sock_family->is_supported);
   13abc:	6863      	ldr	r3, [r4, #4]
   13abe:	b963      	cbnz	r3, 13ada <z_impl_zsock_socket+0x6e>
   13ac0:	4911      	ldr	r1, [pc, #68]	; (13b08 <z_impl_zsock_socket+0x9c>)
   13ac2:	23c6      	movs	r3, #198	; 0xc6
   13ac4:	4642      	mov	r2, r8
   13ac6:	480e      	ldr	r0, [pc, #56]	; (13b00 <z_impl_zsock_socket+0x94>)
   13ac8:	f018 faf5 	bl	2c0b6 <printk>
   13acc:	480f      	ldr	r0, [pc, #60]	; (13b0c <z_impl_zsock_socket+0xa0>)
   13ace:	f018 faf2 	bl	2c0b6 <printk>
   13ad2:	21c6      	movs	r1, #198	; 0xc6
   13ad4:	4640      	mov	r0, r8
   13ad6:	f018 fd0b 	bl	2c4f0 <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   13ada:	463a      	mov	r2, r7
   13adc:	4631      	mov	r1, r6
   13ade:	4628      	mov	r0, r5
   13ae0:	6863      	ldr	r3, [r4, #4]
   13ae2:	4798      	blx	r3
   13ae4:	b130      	cbz	r0, 13af4 <z_impl_zsock_socket+0x88>
		return sock_family->handler(family, type, proto);
   13ae6:	463a      	mov	r2, r7
   13ae8:	4631      	mov	r1, r6
   13aea:	4628      	mov	r0, r5
   13aec:	68a3      	ldr	r3, [r4, #8]
}
   13aee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sock_family->handler(family, type, proto);
   13af2:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   13af4:	340c      	adds	r4, #12
   13af6:	e7c4      	b.n	13a82 <z_impl_zsock_socket+0x16>
   13af8:	0002ec70 	.word	0x0002ec70
   13afc:	0003077d 	.word	0x0003077d
   13b00:	000300ff 	.word	0x000300ff
   13b04:	000307aa 	.word	0x000307aa
   13b08:	00030763 	.word	0x00030763
   13b0c:	0003072c 	.word	0x0003072c
   13b10:	0002ec7c 	.word	0x0002ec7c
   13b14:	0003072f 	.word	0x0003072f

00013b18 <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   13b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	if (poll_timeout < 0) {
   13b1c:	1e14      	subs	r4, r2, #0
{
   13b1e:	b09b      	sub	sp, #108	; 0x6c
   13b20:	4606      	mov	r6, r0
   13b22:	9103      	str	r1, [sp, #12]
	if (poll_timeout < 0) {
   13b24:	db30      	blt.n	13b88 <z_impl_zsock_poll+0x70>
   13b26:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   13b2a:	f240 30e7 	movw	r0, #999	; 0x3e7
   13b2e:	2100      	movs	r1, #0
   13b30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13b34:	2300      	movs	r3, #0
   13b36:	fbc5 0104 	smlal	r0, r1, r5, r4
   13b3a:	f7f8 fe8d 	bl	c858 <__aeabi_uldivmod>
   13b3e:	4682      	mov	sl, r0
   13b40:	468b      	mov	fp, r1
	void *offl_ctx = NULL;
   13b42:	2500      	movs	r5, #0
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = z_timeout_end_calc(timeout);
   13b44:	4650      	mov	r0, sl
   13b46:	4659      	mov	r1, fp
   13b48:	f01a fe50 	bl	2e7ec <z_timeout_end_calc>

	pev = poll_events;
   13b4c:	ab0b      	add	r3, sp, #44	; 0x2c
   13b4e:	9309      	str	r3, [sp, #36]	; 0x24
	const struct fd_op_vtable *offl_vtable = NULL;
   13b50:	462f      	mov	r7, r5
	for (pfd = fds, i = nfds; i--; pfd++) {
   13b52:	4633      	mov	r3, r6
	bool offload = false;
   13b54:	46a8      	mov	r8, r5
	end = z_timeout_end_calc(timeout);
   13b56:	e9cd 0104 	strd	r0, r1, [sp, #16]
	for (pfd = fds, i = nfds; i--; pfd++) {
   13b5a:	f8dd 900c 	ldr.w	r9, [sp, #12]
   13b5e:	f1b9 0f00 	cmp.w	r9, #0
   13b62:	d118      	bne.n	13b96 <z_impl_zsock_poll+0x7e>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   13b64:	f1b8 0f00 	cmp.w	r8, #0
   13b68:	d049      	beq.n	13bfe <z_impl_zsock_poll+0xe6>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   13b6a:	9b03      	ldr	r3, [sp, #12]
   13b6c:	9401      	str	r4, [sp, #4]
   13b6e:	9300      	str	r3, [sp, #0]
   13b70:	f44f 7282 	mov.w	r2, #260	; 0x104
   13b74:	4633      	mov	r3, r6
   13b76:	4629      	mov	r1, r5
   13b78:	4638      	mov	r0, r7
   13b7a:	f018 ff9a 	bl	2cab2 <z_fdtable_call_ioctl>
   13b7e:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
   13b80:	4620      	mov	r0, r4
   13b82:	b01b      	add	sp, #108	; 0x6c
   13b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_FOREVER;
   13b88:	f04f 3aff 	mov.w	sl, #4294967295
   13b8c:	f04f 3bff 	mov.w	fp, #4294967295
		poll_timeout = SYS_FOREVER_MS;
   13b90:	f04f 34ff 	mov.w	r4, #4294967295
   13b94:	e7d5      	b.n	13b42 <z_impl_zsock_poll+0x2a>
		if (pfd->fd < 0) {
   13b96:	6818      	ldr	r0, [r3, #0]
   13b98:	2800      	cmp	r0, #0
   13b9a:	db2c      	blt.n	13bf6 <z_impl_zsock_poll+0xde>
	ctx = z_get_fd_obj_and_vtable(sock,
   13b9c:	a90a      	add	r1, sp, #40	; 0x28
   13b9e:	9306      	str	r3, [sp, #24]
   13ba0:	f7fe f9e6 	bl	11f70 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   13ba4:	9b06      	ldr	r3, [sp, #24]
   13ba6:	4601      	mov	r1, r0
   13ba8:	b328      	cbz	r0, 13bf6 <z_impl_zsock_poll+0xde>
		result = z_fdtable_call_ioctl(vtable, ctx,
   13baa:	aa1a      	add	r2, sp, #104	; 0x68
   13bac:	9201      	str	r2, [sp, #4]
   13bae:	aa09      	add	r2, sp, #36	; 0x24
   13bb0:	9200      	str	r2, [sp, #0]
   13bb2:	9006      	str	r0, [sp, #24]
   13bb4:	f44f 7281 	mov.w	r2, #258	; 0x102
   13bb8:	980a      	ldr	r0, [sp, #40]	; 0x28
   13bba:	9307      	str	r3, [sp, #28]
   13bbc:	f018 ff79 	bl	2cab2 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   13bc0:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   13bc4:	4602      	mov	r2, r0
		if (result == -EALREADY) {
   13bc6:	9b07      	ldr	r3, [sp, #28]
   13bc8:	d011      	beq.n	13bee <z_impl_zsock_poll+0xd6>
		} else if (result == -EXDEV) {
   13bca:	f110 0f12 	cmn.w	r0, #18
   13bce:	9906      	ldr	r1, [sp, #24]
   13bd0:	d105      	bne.n	13bde <z_impl_zsock_poll+0xc6>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   13bd2:	b90f      	cbnz	r7, 13bd8 <z_impl_zsock_poll+0xc0>
				offl_vtable = vtable;
   13bd4:	460d      	mov	r5, r1
   13bd6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			offload = true;
   13bd8:	f04f 0801 	mov.w	r8, #1
   13bdc:	e00b      	b.n	13bf6 <z_impl_zsock_poll+0xde>
		} else if (result != 0) {
   13bde:	b150      	cbz	r0, 13bf6 <z_impl_zsock_poll+0xde>
   13be0:	9203      	str	r2, [sp, #12]
				errno = -result;
   13be2:	f019 f8b6 	bl	2cd52 <__errno>
   13be6:	9a03      	ldr	r2, [sp, #12]
   13be8:	4252      	negs	r2, r2
   13bea:	6002      	str	r2, [r0, #0]
				return -1;
   13bec:	e03e      	b.n	13c6c <z_impl_zsock_poll+0x154>
			timeout = K_NO_WAIT;
   13bee:	f04f 0a00 	mov.w	sl, #0
   13bf2:	f04f 0b00 	mov.w	fp, #0
	for (pfd = fds, i = nfds; i--; pfd++) {
   13bf6:	3308      	adds	r3, #8
   13bf8:	f109 39ff 	add.w	r9, r9, #4294967295
   13bfc:	e7af      	b.n	13b5e <z_impl_zsock_poll+0x46>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   13bfe:	ea5a 030b 	orrs.w	r3, sl, fp
   13c02:	d016      	beq.n	13c32 <z_impl_zsock_poll+0x11a>
   13c04:	f1bb 3fff 	cmp.w	fp, #4294967295
   13c08:	bf08      	it	eq
   13c0a:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   13c0e:	d010      	beq.n	13c32 <z_impl_zsock_poll+0x11a>
		int64_t remaining = end - z_tick_get();
   13c10:	f011 fa62 	bl	250d8 <z_tick_get>
   13c14:	9b04      	ldr	r3, [sp, #16]
   13c16:	ebb3 0a00 	subs.w	sl, r3, r0
   13c1a:	9b05      	ldr	r3, [sp, #20]
   13c1c:	eb63 0b01 	sbc.w	fp, r3, r1
   13c20:	f1ba 0f00 	cmp.w	sl, #0
   13c24:	f17b 0300 	sbcs.w	r3, fp, #0
   13c28:	bfbc      	itt	lt
   13c2a:	f04f 0a00 	movlt.w	sl, #0
   13c2e:	f04f 0b00 	movlt.w	fp, #0
			pfd->revents = 0;
   13c32:	f04f 0900 	mov.w	r9, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   13c36:	9909      	ldr	r1, [sp, #36]	; 0x24
   13c38:	ac0b      	add	r4, sp, #44	; 0x2c
   13c3a:	4b34      	ldr	r3, [pc, #208]	; (13d0c <z_impl_zsock_poll+0x1f4>)
   13c3c:	1b09      	subs	r1, r1, r4
   13c3e:	1089      	asrs	r1, r1, #2
   13c40:	4359      	muls	r1, r3
	return z_impl_k_poll(events, num_events, timeout);
   13c42:	465b      	mov	r3, fp
   13c44:	4652      	mov	r2, sl
   13c46:	4620      	mov	r0, r4
   13c48:	f011 fd0e 	bl	25668 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   13c4c:	f100 030b 	add.w	r3, r0, #11
   13c50:	2b0b      	cmp	r3, #11
   13c52:	4607      	mov	r7, r0
   13c54:	d806      	bhi.n	13c64 <z_impl_zsock_poll+0x14c>
   13c56:	f640 0581 	movw	r5, #2177	; 0x881
   13c5a:	40dd      	lsrs	r5, r3
   13c5c:	43ed      	mvns	r5, r5
   13c5e:	f015 0501 	ands.w	r5, r5, #1
   13c62:	d006      	beq.n	13c72 <z_impl_zsock_poll+0x15a>
			errno = -ret;
   13c64:	f019 f875 	bl	2cd52 <__errno>
   13c68:	427f      	negs	r7, r7
   13c6a:	6007      	str	r7, [r0, #0]
			return -1;
   13c6c:	f04f 34ff 	mov.w	r4, #4294967295
   13c70:	e786      	b.n	13b80 <z_impl_zsock_poll+0x68>
		pev = poll_events;
   13c72:	9409      	str	r4, [sp, #36]	; 0x24
		for (pfd = fds, i = nfds; i--; pfd++) {
   13c74:	46b0      	mov	r8, r6
		ret = 0;
   13c76:	462c      	mov	r4, r5
		for (pfd = fds, i = nfds; i--; pfd++) {
   13c78:	9f03      	ldr	r7, [sp, #12]
   13c7a:	b9ef      	cbnz	r7, 13cb8 <z_impl_zsock_poll+0x1a0>
		if (retry) {
   13c7c:	2d00      	cmp	r5, #0
   13c7e:	f43f af7f 	beq.w	13b80 <z_impl_zsock_poll+0x68>
			if (ret > 0) {
   13c82:	2c00      	cmp	r4, #0
   13c84:	f73f af7c 	bgt.w	13b80 <z_impl_zsock_poll+0x68>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   13c88:	ea5a 030b 	orrs.w	r3, sl, fp
   13c8c:	f43f af78 	beq.w	13b80 <z_impl_zsock_poll+0x68>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   13c90:	f1bb 3fff 	cmp.w	fp, #4294967295
   13c94:	bf08      	it	eq
   13c96:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   13c9a:	d0cc      	beq.n	13c36 <z_impl_zsock_poll+0x11e>
				int64_t remaining = end - z_tick_get();
   13c9c:	f011 fa1c 	bl	250d8 <z_tick_get>
   13ca0:	9b04      	ldr	r3, [sp, #16]
   13ca2:	ebb3 0a00 	subs.w	sl, r3, r0
   13ca6:	9b05      	ldr	r3, [sp, #20]
   13ca8:	eb63 0b01 	sbc.w	fp, r3, r1
				if (remaining <= 0) {
   13cac:	f1ba 0f01 	cmp.w	sl, #1
   13cb0:	f17b 0300 	sbcs.w	r3, fp, #0
   13cb4:	dabf      	bge.n	13c36 <z_impl_zsock_poll+0x11e>
   13cb6:	e763      	b.n	13b80 <z_impl_zsock_poll+0x68>
			if (pfd->fd < 0) {
   13cb8:	f8d8 0000 	ldr.w	r0, [r8]
			pfd->revents = 0;
   13cbc:	f8a8 9006 	strh.w	r9, [r8, #6]
			if (pfd->fd < 0) {
   13cc0:	2800      	cmp	r0, #0
   13cc2:	db1c      	blt.n	13cfe <z_impl_zsock_poll+0x1e6>
	ctx = z_get_fd_obj_and_vtable(sock,
   13cc4:	a90a      	add	r1, sp, #40	; 0x28
   13cc6:	f7fe f953 	bl	11f70 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   13cca:	4601      	mov	r1, r0
   13ccc:	b920      	cbnz	r0, 13cd8 <z_impl_zsock_poll+0x1c0>
				pfd->revents = ZSOCK_POLLNVAL;
   13cce:	2220      	movs	r2, #32
   13cd0:	f8a8 2006 	strh.w	r2, [r8, #6]
				ret++;
   13cd4:	3401      	adds	r4, #1
   13cd6:	e012      	b.n	13cfe <z_impl_zsock_poll+0x1e6>
			result = z_fdtable_call_ioctl(vtable, ctx,
   13cd8:	ab09      	add	r3, sp, #36	; 0x24
   13cda:	f240 1203 	movw	r2, #259	; 0x103
   13cde:	9300      	str	r3, [sp, #0]
   13ce0:	980a      	ldr	r0, [sp, #40]	; 0x28
   13ce2:	4643      	mov	r3, r8
   13ce4:	f018 fee5 	bl	2cab2 <z_fdtable_call_ioctl>
			if (result == -EAGAIN) {
   13ce8:	f110 0f0b 	cmn.w	r0, #11
			result = z_fdtable_call_ioctl(vtable, ctx,
   13cec:	4602      	mov	r2, r0
			if (result == -EAGAIN) {
   13cee:	d00a      	beq.n	13d06 <z_impl_zsock_poll+0x1ee>
			} else if (result != 0) {
   13cf0:	2800      	cmp	r0, #0
   13cf2:	f47f af75 	bne.w	13be0 <z_impl_zsock_poll+0xc8>
			if (pfd->revents != 0) {
   13cf6:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
   13cfa:	2a00      	cmp	r2, #0
   13cfc:	d1ea      	bne.n	13cd4 <z_impl_zsock_poll+0x1bc>
		for (pfd = fds, i = nfds; i--; pfd++) {
   13cfe:	f108 0808 	add.w	r8, r8, #8
   13d02:	3f01      	subs	r7, #1
   13d04:	e7b9      	b.n	13c7a <z_impl_zsock_poll+0x162>
				retry = true;
   13d06:	2501      	movs	r5, #1
   13d08:	e7f9      	b.n	13cfe <z_impl_zsock_poll+0x1e6>
   13d0a:	bf00      	nop
   13d0c:	cccccccd 	.word	0xcccccccd

00013d10 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   13d10:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   13d12:	4605      	mov	r5, r0
   13d14:	b948      	cbnz	r0, 13d2a <socket_offload_dns_register+0x1a>
   13d16:	490c      	ldr	r1, [pc, #48]	; (13d48 <socket_offload_dns_register+0x38>)
   13d18:	480c      	ldr	r0, [pc, #48]	; (13d4c <socket_offload_dns_register+0x3c>)
   13d1a:	2313      	movs	r3, #19
   13d1c:	4a0c      	ldr	r2, [pc, #48]	; (13d50 <socket_offload_dns_register+0x40>)
   13d1e:	f018 f9ca 	bl	2c0b6 <printk>
   13d22:	2113      	movs	r1, #19
   13d24:	480a      	ldr	r0, [pc, #40]	; (13d50 <socket_offload_dns_register+0x40>)
   13d26:	f018 fbe3 	bl	2c4f0 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   13d2a:	4c0a      	ldr	r4, [pc, #40]	; (13d54 <socket_offload_dns_register+0x44>)
   13d2c:	6822      	ldr	r2, [r4, #0]
   13d2e:	b14a      	cbz	r2, 13d44 <socket_offload_dns_register+0x34>
   13d30:	4909      	ldr	r1, [pc, #36]	; (13d58 <socket_offload_dns_register+0x48>)
   13d32:	4806      	ldr	r0, [pc, #24]	; (13d4c <socket_offload_dns_register+0x3c>)
   13d34:	2314      	movs	r3, #20
   13d36:	4a06      	ldr	r2, [pc, #24]	; (13d50 <socket_offload_dns_register+0x40>)
   13d38:	f018 f9bd 	bl	2c0b6 <printk>
   13d3c:	2114      	movs	r1, #20
   13d3e:	4804      	ldr	r0, [pc, #16]	; (13d50 <socket_offload_dns_register+0x40>)
   13d40:	f018 fbd6 	bl	2c4f0 <assert_post_action>

	dns_offload = ops;
   13d44:	6025      	str	r5, [r4, #0]
}
   13d46:	bd38      	pop	{r3, r4, r5, pc}
   13d48:	0003295b 	.word	0x0003295b
   13d4c:	000300ff 	.word	0x000300ff
   13d50:	000307c9 	.word	0x000307c9
   13d54:	20021560 	.word	0x20021560
   13d58:	00030804 	.word	0x00030804

00013d5c <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   13d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   13d60:	4c13      	ldr	r4, [pc, #76]	; (13db0 <socket_offload_getaddrinfo+0x54>)
{
   13d62:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(dns_offload);
   13d64:	6823      	ldr	r3, [r4, #0]
{
   13d66:	4605      	mov	r5, r0
   13d68:	460e      	mov	r6, r1
   13d6a:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(dns_offload);
   13d6c:	b94b      	cbnz	r3, 13d82 <socket_offload_getaddrinfo+0x26>
   13d6e:	4911      	ldr	r1, [pc, #68]	; (13db4 <socket_offload_getaddrinfo+0x58>)
   13d70:	4811      	ldr	r0, [pc, #68]	; (13db8 <socket_offload_getaddrinfo+0x5c>)
   13d72:	231d      	movs	r3, #29
   13d74:	4a11      	ldr	r2, [pc, #68]	; (13dbc <socket_offload_getaddrinfo+0x60>)
   13d76:	f018 f99e 	bl	2c0b6 <printk>
   13d7a:	211d      	movs	r1, #29
   13d7c:	480f      	ldr	r0, [pc, #60]	; (13dbc <socket_offload_getaddrinfo+0x60>)
   13d7e:	f018 fbb7 	bl	2c4f0 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   13d82:	6823      	ldr	r3, [r4, #0]
   13d84:	681b      	ldr	r3, [r3, #0]
   13d86:	b94b      	cbnz	r3, 13d9c <socket_offload_getaddrinfo+0x40>
   13d88:	490d      	ldr	r1, [pc, #52]	; (13dc0 <socket_offload_getaddrinfo+0x64>)
   13d8a:	480b      	ldr	r0, [pc, #44]	; (13db8 <socket_offload_getaddrinfo+0x5c>)
   13d8c:	231e      	movs	r3, #30
   13d8e:	4a0b      	ldr	r2, [pc, #44]	; (13dbc <socket_offload_getaddrinfo+0x60>)
   13d90:	f018 f991 	bl	2c0b6 <printk>
   13d94:	211e      	movs	r1, #30
   13d96:	4809      	ldr	r0, [pc, #36]	; (13dbc <socket_offload_getaddrinfo+0x60>)
   13d98:	f018 fbaa 	bl	2c4f0 <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   13d9c:	6823      	ldr	r3, [r4, #0]
   13d9e:	463a      	mov	r2, r7
   13da0:	681c      	ldr	r4, [r3, #0]
   13da2:	4631      	mov	r1, r6
   13da4:	4643      	mov	r3, r8
   13da6:	4628      	mov	r0, r5
   13da8:	46a4      	mov	ip, r4
}
   13daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   13dae:	4760      	bx	ip
   13db0:	20021560 	.word	0x20021560
   13db4:	0003081f 	.word	0x0003081f
   13db8:	000300ff 	.word	0x000300ff
   13dbc:	000307c9 	.word	0x000307c9
   13dc0:	0003082b 	.word	0x0003082b

00013dc4 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   13dc4:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   13dc6:	4c10      	ldr	r4, [pc, #64]	; (13e08 <socket_offload_freeaddrinfo+0x44>)
{
   13dc8:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(dns_offload);
   13dca:	6823      	ldr	r3, [r4, #0]
   13dcc:	b94b      	cbnz	r3, 13de2 <socket_offload_freeaddrinfo+0x1e>
   13dce:	490f      	ldr	r1, [pc, #60]	; (13e0c <socket_offload_freeaddrinfo+0x48>)
   13dd0:	480f      	ldr	r0, [pc, #60]	; (13e10 <socket_offload_freeaddrinfo+0x4c>)
   13dd2:	2325      	movs	r3, #37	; 0x25
   13dd4:	4a0f      	ldr	r2, [pc, #60]	; (13e14 <socket_offload_freeaddrinfo+0x50>)
   13dd6:	f018 f96e 	bl	2c0b6 <printk>
   13dda:	2125      	movs	r1, #37	; 0x25
   13ddc:	480d      	ldr	r0, [pc, #52]	; (13e14 <socket_offload_freeaddrinfo+0x50>)
   13dde:	f018 fb87 	bl	2c4f0 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   13de2:	6823      	ldr	r3, [r4, #0]
   13de4:	685b      	ldr	r3, [r3, #4]
   13de6:	b94b      	cbnz	r3, 13dfc <socket_offload_freeaddrinfo+0x38>
   13de8:	490b      	ldr	r1, [pc, #44]	; (13e18 <socket_offload_freeaddrinfo+0x54>)
   13dea:	4809      	ldr	r0, [pc, #36]	; (13e10 <socket_offload_freeaddrinfo+0x4c>)
   13dec:	2326      	movs	r3, #38	; 0x26
   13dee:	4a09      	ldr	r2, [pc, #36]	; (13e14 <socket_offload_freeaddrinfo+0x50>)
   13df0:	f018 f961 	bl	2c0b6 <printk>
   13df4:	2126      	movs	r1, #38	; 0x26
   13df6:	4807      	ldr	r0, [pc, #28]	; (13e14 <socket_offload_freeaddrinfo+0x50>)
   13df8:	f018 fb7a 	bl	2c4f0 <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   13dfc:	6823      	ldr	r3, [r4, #0]
   13dfe:	4628      	mov	r0, r5
}
   13e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   13e04:	685b      	ldr	r3, [r3, #4]
   13e06:	4718      	bx	r3
   13e08:	20021560 	.word	0x20021560
   13e0c:	0003081f 	.word	0x0003081f
   13e10:	000300ff 	.word	0x000300ff
   13e14:	000307c9 	.word	0x000307c9
   13e18:	00030844 	.word	0x00030844

00013e1c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   13e1c:	b508      	push	{r3, lr}
   13e1e:	4806      	ldr	r0, [pc, #24]	; (13e38 <uart_console_init+0x1c>)
   13e20:	f00e fa06 	bl	22230 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   13e24:	4b05      	ldr	r3, [pc, #20]	; (13e3c <uart_console_init+0x20>)
   13e26:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   13e28:	4805      	ldr	r0, [pc, #20]	; (13e40 <uart_console_init+0x24>)
   13e2a:	f001 fa97 	bl	1535c <__stdout_hook_install>
	__printk_hook_install(console_out);
   13e2e:	4804      	ldr	r0, [pc, #16]	; (13e40 <uart_console_init+0x24>)
   13e30:	f7fe f994 	bl	1215c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   13e34:	2000      	movs	r0, #0
   13e36:	bd08      	pop	{r3, pc}
   13e38:	00030683 	.word	0x00030683
   13e3c:	20021564 	.word	0x20021564
   13e40:	00013e45 	.word	0x00013e45

00013e44 <console_out>:
	if ('\n' == c) {
   13e44:	280a      	cmp	r0, #10
{
   13e46:	b538      	push	{r3, r4, r5, lr}
   13e48:	4604      	mov	r4, r0
   13e4a:	4d07      	ldr	r5, [pc, #28]	; (13e68 <console_out+0x24>)
	if ('\n' == c) {
   13e4c:	d104      	bne.n	13e58 <console_out+0x14>
   13e4e:	6828      	ldr	r0, [r5, #0]
   13e50:	6883      	ldr	r3, [r0, #8]
   13e52:	210d      	movs	r1, #13
   13e54:	685b      	ldr	r3, [r3, #4]
   13e56:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   13e58:	6828      	ldr	r0, [r5, #0]
   13e5a:	6883      	ldr	r3, [r0, #8]
   13e5c:	b2e1      	uxtb	r1, r4
   13e5e:	685b      	ldr	r3, [r3, #4]
   13e60:	4798      	blx	r3
}
   13e62:	4620      	mov	r0, r4
   13e64:	bd38      	pop	{r3, r4, r5, pc}
   13e66:	bf00      	nop
   13e68:	20021564 	.word	0x20021564

00013e6c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   13e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   13e70:	4c0e      	ldr	r4, [pc, #56]	; (13eac <onoff_start+0x40>)
{
   13e72:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
   13e74:	1b05      	subs	r5, r0, r4
   13e76:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   13e7a:	250c      	movs	r5, #12
   13e7c:	435d      	muls	r5, r3
   13e7e:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   13e82:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   13e84:	4420      	add	r0, r4
   13e86:	2140      	movs	r1, #64	; 0x40
   13e88:	f018 fe9f 	bl	2cbca <set_starting_state>
	if (err < 0) {
   13e8c:	1e01      	subs	r1, r0, #0
   13e8e:	db08      	blt.n	13ea2 <onoff_start+0x36>
	subdata->cb = data->cb;
   13e90:	4b07      	ldr	r3, [pc, #28]	; (13eb0 <onoff_start+0x44>)
   13e92:	442c      	add	r4, r5
	subdata->user_data = data->user_data;
   13e94:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   13e98:	4b06      	ldr	r3, [pc, #24]	; (13eb4 <onoff_start+0x48>)
   13e9a:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   13e9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   13ea0:	4718      	bx	r3
		notify(mgr, err);
   13ea2:	4638      	mov	r0, r7
   13ea4:	4633      	mov	r3, r6
}
   13ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   13eaa:	4718      	bx	r3
   13eac:	20021578 	.word	0x20021578
   13eb0:	0002cc2d 	.word	0x0002cc2d
   13eb4:	0002ef04 	.word	0x0002ef04

00013eb8 <get_status>:
{
   13eb8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13eba:	b2cc      	uxtb	r4, r1
   13ebc:	2c01      	cmp	r4, #1
{
   13ebe:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13ec0:	d909      	bls.n	13ed6 <get_status+0x1e>
   13ec2:	4909      	ldr	r1, [pc, #36]	; (13ee8 <get_status+0x30>)
   13ec4:	4809      	ldr	r0, [pc, #36]	; (13eec <get_status+0x34>)
   13ec6:	237d      	movs	r3, #125	; 0x7d
   13ec8:	4a09      	ldr	r2, [pc, #36]	; (13ef0 <get_status+0x38>)
   13eca:	f018 f8f4 	bl	2c0b6 <printk>
   13ece:	217d      	movs	r1, #125	; 0x7d
   13ed0:	4807      	ldr	r0, [pc, #28]	; (13ef0 <get_status+0x38>)
   13ed2:	f018 fb0d 	bl	2c4f0 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   13ed6:	210c      	movs	r1, #12
   13ed8:	68eb      	ldr	r3, [r5, #12]
   13eda:	fb04 3401 	mla	r4, r4, r1, r3
   13ede:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   13ee0:	f000 0007 	and.w	r0, r0, #7
   13ee4:	bd38      	pop	{r3, r4, r5, pc}
   13ee6:	bf00      	nop
   13ee8:	000308a1 	.word	0x000308a1
   13eec:	000300ff 	.word	0x000300ff
   13ef0:	00030864 	.word	0x00030864

00013ef4 <stop>:
{
   13ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ef6:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13ef8:	2c01      	cmp	r4, #1
{
   13efa:	4605      	mov	r5, r0
   13efc:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   13efe:	68c7      	ldr	r7, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13f00:	d90b      	bls.n	13f1a <stop+0x26>
   13f02:	4919      	ldr	r1, [pc, #100]	; (13f68 <stop+0x74>)
   13f04:	4819      	ldr	r0, [pc, #100]	; (13f6c <stop+0x78>)
   13f06:	f240 1345 	movw	r3, #325	; 0x145
   13f0a:	4a19      	ldr	r2, [pc, #100]	; (13f70 <stop+0x7c>)
   13f0c:	f018 f8d3 	bl	2c0b6 <printk>
   13f10:	f240 1145 	movw	r1, #325	; 0x145
   13f14:	4816      	ldr	r0, [pc, #88]	; (13f70 <stop+0x7c>)
   13f16:	f018 faeb 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   13f1a:	f04f 0320 	mov.w	r3, #32
   13f1e:	f3ef 8211 	mrs	r2, BASEPRI
   13f22:	f383 8811 	msr	BASEPRI, r3
   13f26:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   13f2a:	230c      	movs	r3, #12
   13f2c:	fb03 7104 	mla	r1, r3, r4, r7
   13f30:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   13f32:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   13f36:	d001      	beq.n	13f3c <stop+0x48>
   13f38:	428e      	cmp	r6, r1
   13f3a:	d111      	bne.n	13f60 <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   13f3c:	2101      	movs	r1, #1
	int err = 0;
   13f3e:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   13f40:	fb03 7304 	mla	r3, r3, r4, r7
   13f44:	6499      	str	r1, [r3, #72]	; 0x48
	__asm__ volatile(
   13f46:	f382 8811 	msr	BASEPRI, r2
   13f4a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   13f4e:	b930      	cbnz	r0, 13f5e <stop+0x6a>
	get_sub_config(dev, type)->stop();
   13f50:	230c      	movs	r3, #12
   13f52:	6869      	ldr	r1, [r5, #4]
   13f54:	fb03 1404 	mla	r4, r3, r4, r1
   13f58:	6863      	ldr	r3, [r4, #4]
   13f5a:	4798      	blx	r3
	return 0;
   13f5c:	2000      	movs	r0, #0
}
   13f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   13f60:	f04f 30ff 	mov.w	r0, #4294967295
   13f64:	e7ef      	b.n	13f46 <stop+0x52>
   13f66:	bf00      	nop
   13f68:	000308a1 	.word	0x000308a1
   13f6c:	000300ff 	.word	0x000300ff
   13f70:	00030864 	.word	0x00030864

00013f74 <onoff_stop>:
{
   13f74:	b570      	push	{r4, r5, r6, lr}
   13f76:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   13f78:	4906      	ldr	r1, [pc, #24]	; (13f94 <onoff_stop+0x20>)
{
   13f7a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   13f7c:	1a41      	subs	r1, r0, r1
	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
   13f7e:	1149      	asrs	r1, r1, #5
   13f80:	2240      	movs	r2, #64	; 0x40
   13f82:	4805      	ldr	r0, [pc, #20]	; (13f98 <onoff_stop+0x24>)
   13f84:	f7ff ffb6 	bl	13ef4 <stop>
	notify(mgr, res);
   13f88:	462b      	mov	r3, r5
	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
   13f8a:	4601      	mov	r1, r0
	notify(mgr, res);
   13f8c:	4620      	mov	r0, r4
}
   13f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   13f92:	4718      	bx	r3
   13f94:	20021578 	.word	0x20021578
   13f98:	20020a60 	.word	0x20020a60

00013f9c <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   13f9c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13f9e:	2200      	movs	r2, #0
   13fa0:	2101      	movs	r1, #1
{
   13fa2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13fa4:	2005      	movs	r0, #5
   13fa6:	f000 fb93 	bl	146d0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   13faa:	2005      	movs	r0, #5
   13fac:	f000 fb72 	bl	14694 <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
   13fb0:	480f      	ldr	r0, [pc, #60]	; (13ff0 <clk_init+0x54>)
   13fb2:	f00d ffc5 	bl	21f40 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   13fb6:	4b0f      	ldr	r3, [pc, #60]	; (13ff4 <clk_init+0x58>)
   13fb8:	4298      	cmp	r0, r3
   13fba:	d115      	bne.n	13fe8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   13fbc:	f00d ffe4 	bl	21f88 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   13fc0:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   13fc2:	490d      	ldr	r1, [pc, #52]	; (13ff8 <clk_init+0x5c>)
   13fc4:	4630      	mov	r0, r6
   13fc6:	f018 f8d1 	bl	2c16c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   13fca:	2800      	cmp	r0, #0
   13fcc:	db0b      	blt.n	13fe6 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13fce:	2501      	movs	r5, #1
   13fd0:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   13fd2:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   13fd4:	4908      	ldr	r1, [pc, #32]	; (13ff8 <clk_init+0x5c>)
   13fd6:	f104 0020 	add.w	r0, r4, #32
   13fda:	f018 f8c7 	bl	2c16c <onoff_manager_init>
		if (err < 0) {
   13fde:	2800      	cmp	r0, #0
   13fe0:	db01      	blt.n	13fe6 <clk_init+0x4a>
	}

	return 0;
   13fe2:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13fe4:	6565      	str	r5, [r4, #84]	; 0x54
}
   13fe6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   13fe8:	f06f 0004 	mvn.w	r0, #4
   13fec:	e7fb      	b.n	13fe6 <clk_init+0x4a>
   13fee:	bf00      	nop
   13ff0:	00014039 	.word	0x00014039
   13ff4:	0bad0000 	.word	0x0bad0000
   13ff8:	0002ef1c 	.word	0x0002ef1c

00013ffc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   13ffc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   13ffe:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   14000:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   14002:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   14004:	434b      	muls	r3, r1
   14006:	480a      	ldr	r0, [pc, #40]	; (14030 <clkstarted_handle.constprop.0+0x34>)
   14008:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1400a:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
   1400c:	e9d4 5210 	ldrd	r5, r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   14010:	4418      	add	r0, r3
	sub_data->cb = NULL;
   14012:	6426      	str	r6, [r4, #64]	; 0x40
	void *user_data = sub_data->user_data;
   14014:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   14016:	f018 fdf6 	bl	2cc06 <set_on_state>
	if (callback) {
   1401a:	b135      	cbz	r5, 1402a <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1401c:	462b      	mov	r3, r5
   1401e:	9a01      	ldr	r2, [sp, #4]
   14020:	4804      	ldr	r0, [pc, #16]	; (14034 <clkstarted_handle.constprop.0+0x38>)
}
   14022:	b002      	add	sp, #8
   14024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   14028:	4718      	bx	r3
}
   1402a:	b002      	add	sp, #8
   1402c:	bd70      	pop	{r4, r5, r6, pc}
   1402e:	bf00      	nop
   14030:	20021578 	.word	0x20021578
   14034:	20020a60 	.word	0x20020a60

00014038 <clock_event_handler>:
	switch (event) {
   14038:	2801      	cmp	r0, #1
{
   1403a:	b508      	push	{r3, lr}
	switch (event) {
   1403c:	d006      	beq.n	1404c <clock_event_handler+0x14>
   1403e:	2803      	cmp	r0, #3
   14040:	d008      	beq.n	14054 <clock_event_handler+0x1c>
   14042:	b9a8      	cbnz	r0, 14070 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   14044:	4b10      	ldr	r3, [pc, #64]	; (14088 <clock_event_handler+0x50>)
   14046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   14048:	075b      	lsls	r3, r3, #29
   1404a:	d11b      	bne.n	14084 <clock_event_handler+0x4c>
}
   1404c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   14050:	f7ff bfd4 	b.w	13ffc <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   14054:	490d      	ldr	r1, [pc, #52]	; (1408c <clock_event_handler+0x54>)
   14056:	f240 2356 	movw	r3, #598	; 0x256
   1405a:	4a0d      	ldr	r2, [pc, #52]	; (14090 <clock_event_handler+0x58>)
   1405c:	480d      	ldr	r0, [pc, #52]	; (14094 <clock_event_handler+0x5c>)
   1405e:	f018 f82a 	bl	2c0b6 <printk>
   14062:	f240 2156 	movw	r1, #598	; 0x256
}
   14066:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   1406a:	4809      	ldr	r0, [pc, #36]	; (14090 <clock_event_handler+0x58>)
   1406c:	f018 ba40 	b.w	2c4f0 <assert_post_action>
   14070:	4906      	ldr	r1, [pc, #24]	; (1408c <clock_event_handler+0x54>)
   14072:	f240 235a 	movw	r3, #602	; 0x25a
   14076:	4a06      	ldr	r2, [pc, #24]	; (14090 <clock_event_handler+0x58>)
   14078:	4806      	ldr	r0, [pc, #24]	; (14094 <clock_event_handler+0x5c>)
   1407a:	f018 f81c 	bl	2c0b6 <printk>
   1407e:	f240 215a 	movw	r1, #602	; 0x25a
   14082:	e7f0      	b.n	14066 <clock_event_handler+0x2e>
}
   14084:	bd08      	pop	{r3, pc}
   14086:	bf00      	nop
   14088:	20021578 	.word	0x20021578
   1408c:	00032bdb 	.word	0x00032bdb
   14090:	00030864 	.word	0x00030864
   14094:	000300ff 	.word	0x000300ff

00014098 <generic_hfclk_start>:
{
   14098:	b508      	push	{r3, lr}
	__asm__ volatile(
   1409a:	f04f 0320 	mov.w	r3, #32
   1409e:	f3ef 8111 	mrs	r1, BASEPRI
   140a2:	f383 8811 	msr	BASEPRI, r3
   140a6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   140aa:	4a11      	ldr	r2, [pc, #68]	; (140f0 <generic_hfclk_start+0x58>)
   140ac:	6813      	ldr	r3, [r2, #0]
   140ae:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   140b2:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   140b6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   140b8:	d00b      	beq.n	140d2 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   140ba:	4a0e      	ldr	r2, [pc, #56]	; (140f4 <generic_hfclk_start+0x5c>)
   140bc:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   140c0:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   140c4:	f013 0301 	ands.w	r3, r3, #1
   140c8:	d003      	beq.n	140d2 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   140ca:	480b      	ldr	r0, [pc, #44]	; (140f8 <generic_hfclk_start+0x60>)
   140cc:	f018 fd9b 	bl	2cc06 <set_on_state>
			already_started = true;
   140d0:	2301      	movs	r3, #1
	__asm__ volatile(
   140d2:	f381 8811 	msr	BASEPRI, r1
   140d6:	f3bf 8f6f 	isb	sy
	if (already_started) {
   140da:	b123      	cbz	r3, 140e6 <generic_hfclk_start+0x4e>
}
   140dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
   140e0:	2000      	movs	r0, #0
   140e2:	f7ff bf8b 	b.w	13ffc <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   140e6:	2001      	movs	r0, #1
}
   140e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   140ec:	f00d bf6c 	b.w	21fc8 <nrfx_clock_start>
   140f0:	200215d0 	.word	0x200215d0
   140f4:	40005000 	.word	0x40005000
   140f8:	200215c0 	.word	0x200215c0

000140fc <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   140fc:	4b07      	ldr	r3, [pc, #28]	; (1411c <generic_hfclk_stop+0x20>)
   140fe:	e8d3 2fef 	ldaex	r2, [r3]
   14102:	f022 0102 	bic.w	r1, r2, #2
   14106:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1410a:	2800      	cmp	r0, #0
   1410c:	d1f7      	bne.n	140fe <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1410e:	07d3      	lsls	r3, r2, #31
   14110:	d402      	bmi.n	14118 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   14112:	2001      	movs	r0, #1
   14114:	f00d bfae 	b.w	22074 <nrfx_clock_stop>
}
   14118:	4770      	bx	lr
   1411a:	bf00      	nop
   1411c:	200215d0 	.word	0x200215d0

00014120 <api_blocking_start>:
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14120:	2300      	movs	r3, #0
   14122:	2201      	movs	r2, #1
{
   14124:	b510      	push	{r4, lr}
   14126:	b08a      	sub	sp, #40	; 0x28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14128:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
   1412c:	9301      	str	r3, [sp, #4]
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1412e:	aa08      	add	r2, sp, #32
	struct clock_control_async_data data = {
   14130:	4b0a      	ldr	r3, [pc, #40]	; (1415c <api_blocking_start+0x3c>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14132:	e9cd 2208 	strd	r2, r2, [sp, #32]
   14136:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
   14138:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1413a:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
   1413e:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
   14142:	f018 fd85 	bl	2cc50 <api_start>
	if (err < 0) {
   14146:	2800      	cmp	r0, #0
   14148:	db05      	blt.n	14156 <api_blocking_start+0x36>
	return z_impl_k_sem_take(sem, timeout);
   1414a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1414e:	2300      	movs	r3, #0
   14150:	4620      	mov	r0, r4
   14152:	f010 fa3d 	bl	245d0 <z_impl_k_sem_take>
}
   14156:	b00a      	add	sp, #40	; 0x28
   14158:	bd10      	pop	{r4, pc}
   1415a:	bf00      	nop
   1415c:	0002cc3f 	.word	0x0002cc3f

00014160 <z_nrf_clock_control_lf_on>:
{
   14160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14164:	2201      	movs	r2, #1
   14166:	4606      	mov	r6, r0
   14168:	4945      	ldr	r1, [pc, #276]	; (14280 <z_nrf_clock_control_lf_on+0x120>)
   1416a:	e8d1 3fef 	ldaex	r3, [r1]
   1416e:	e8c1 2fe0 	stlex	r0, r2, [r1]
   14172:	2800      	cmp	r0, #0
   14174:	d1f9      	bne.n	1416a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   14176:	b9a3      	cbnz	r3, 141a2 <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   14178:	4942      	ldr	r1, [pc, #264]	; (14284 <z_nrf_clock_control_lf_on+0x124>)
		err = onoff_request(mgr, &cli);
   1417a:	4843      	ldr	r0, [pc, #268]	; (14288 <z_nrf_clock_control_lf_on+0x128>)
   1417c:	604b      	str	r3, [r1, #4]
   1417e:	60cb      	str	r3, [r1, #12]
   14180:	608a      	str	r2, [r1, #8]
   14182:	f7fe fb79 	bl	12878 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   14186:	2800      	cmp	r0, #0
   14188:	da0b      	bge.n	141a2 <z_nrf_clock_control_lf_on+0x42>
   1418a:	4940      	ldr	r1, [pc, #256]	; (1428c <z_nrf_clock_control_lf_on+0x12c>)
   1418c:	4840      	ldr	r0, [pc, #256]	; (14290 <z_nrf_clock_control_lf_on+0x130>)
   1418e:	f240 2321 	movw	r3, #545	; 0x221
   14192:	4a40      	ldr	r2, [pc, #256]	; (14294 <z_nrf_clock_control_lf_on+0x134>)
   14194:	f017 ff8f 	bl	2c0b6 <printk>
   14198:	f240 2121 	movw	r1, #545	; 0x221
   1419c:	483d      	ldr	r0, [pc, #244]	; (14294 <z_nrf_clock_control_lf_on+0x134>)
   1419e:	f018 f9a7 	bl	2c4f0 <assert_post_action>
	switch (start_mode) {
   141a2:	b38e      	cbz	r6, 14208 <z_nrf_clock_control_lf_on+0xa8>
   141a4:	1e73      	subs	r3, r6, #1
   141a6:	2b01      	cmp	r3, #1
   141a8:	d855      	bhi.n	14256 <z_nrf_clock_control_lf_on+0xf6>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   141aa:	2e01      	cmp	r6, #1
   141ac:	d106      	bne.n	141bc <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   141ae:	4b3a      	ldr	r3, [pc, #232]	; (14298 <z_nrf_clock_control_lf_on+0x138>)
   141b0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   141b4:	f003 0303 	and.w	r3, r3, #3
   141b8:	2b02      	cmp	r3, #2
   141ba:	d025      	beq.n	14208 <z_nrf_clock_control_lf_on+0xa8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   141bc:	f01a fa9f 	bl	2e6fe <k_is_in_isr>
   141c0:	4604      	mov	r4, r0
   141c2:	b918      	cbnz	r0, 141cc <z_nrf_clock_control_lf_on+0x6c>
	return !z_sys_post_kernel;
   141c4:	4b35      	ldr	r3, [pc, #212]	; (1429c <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
   141c6:	781b      	ldrb	r3, [r3, #0]
   141c8:	2b00      	cmp	r3, #0
   141ca:	d152      	bne.n	14272 <z_nrf_clock_control_lf_on+0x112>
	__asm__ volatile(
   141cc:	f04f 0320 	mov.w	r3, #32
   141d0:	f3ef 8711 	mrs	r7, BASEPRI
   141d4:	f383 8811 	msr	BASEPRI, r3
   141d8:	f3bf 8f6f 	isb	sy
   141dc:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   141de:	4d2e      	ldr	r5, [pc, #184]	; (14298 <z_nrf_clock_control_lf_on+0x138>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   141e0:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 142ac <z_nrf_clock_control_lf_on+0x14c>
   141e4:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   141e6:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   141ea:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   141ee:	03d2      	lsls	r2, r2, #15
   141f0:	d50c      	bpl.n	1420c <z_nrf_clock_control_lf_on+0xac>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   141f2:	f003 0303 	and.w	r3, r3, #3
   141f6:	2b02      	cmp	r3, #2
   141f8:	d001      	beq.n	141fe <z_nrf_clock_control_lf_on+0x9e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   141fa:	2e01      	cmp	r6, #1
   141fc:	d106      	bne.n	1420c <z_nrf_clock_control_lf_on+0xac>
	if (isr_mode) {
   141fe:	b334      	cbz	r4, 1424e <z_nrf_clock_control_lf_on+0xee>
	__asm__ volatile(
   14200:	f387 8811 	msr	BASEPRI, r7
   14204:	f3bf 8f6f 	isb	sy
}
   14208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   1420c:	b1d4      	cbz	r4, 14244 <z_nrf_clock_control_lf_on+0xe4>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1420e:	4638      	mov	r0, r7
   14210:	f000 faf6 	bl	14800 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   14214:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   14218:	b2db      	uxtb	r3, r3
   1421a:	2b01      	cmp	r3, #1
   1421c:	d1e3      	bne.n	141e6 <z_nrf_clock_control_lf_on+0x86>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1421e:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   14222:	2a00      	cmp	r2, #0
   14224:	d0df      	beq.n	141e6 <z_nrf_clock_control_lf_on+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14226:	2200      	movs	r2, #0
   14228:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1422c:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   14230:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14232:	2120      	movs	r1, #32
   14234:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   14238:	4a19      	ldr	r2, [pc, #100]	; (142a0 <z_nrf_clock_control_lf_on+0x140>)
   1423a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1423e:	4a19      	ldr	r2, [pc, #100]	; (142a4 <z_nrf_clock_control_lf_on+0x144>)
   14240:	6013      	str	r3, [r2, #0]
}
   14242:	e7d0      	b.n	141e6 <z_nrf_clock_control_lf_on+0x86>
	return z_impl_k_sleep(timeout);
   14244:	2100      	movs	r1, #0
   14246:	2021      	movs	r0, #33	; 0x21
   14248:	f010 f942 	bl	244d0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1424c:	e7e2      	b.n	14214 <z_nrf_clock_control_lf_on+0xb4>
    p_reg->INTENSET = mask;
   1424e:	2302      	movs	r3, #2
   14250:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   14254:	e7d8      	b.n	14208 <z_nrf_clock_control_lf_on+0xa8>
		__ASSERT_NO_MSG(false);
   14256:	f240 2333 	movw	r3, #563	; 0x233
   1425a:	4913      	ldr	r1, [pc, #76]	; (142a8 <z_nrf_clock_control_lf_on+0x148>)
   1425c:	480c      	ldr	r0, [pc, #48]	; (14290 <z_nrf_clock_control_lf_on+0x130>)
   1425e:	4a0d      	ldr	r2, [pc, #52]	; (14294 <z_nrf_clock_control_lf_on+0x134>)
   14260:	f017 ff29 	bl	2c0b6 <printk>
}
   14264:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   14268:	f240 2133 	movw	r1, #563	; 0x233
   1426c:	4809      	ldr	r0, [pc, #36]	; (14294 <z_nrf_clock_control_lf_on+0x134>)
   1426e:	f018 b93f 	b.w	2c4f0 <assert_post_action>
    p_reg->INTENCLR = mask;
   14272:	2202      	movs	r2, #2
   14274:	4b08      	ldr	r3, [pc, #32]	; (14298 <z_nrf_clock_control_lf_on+0x138>)
	int key = isr_mode ? irq_lock() : 0;
   14276:	4607      	mov	r7, r0
   14278:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1427c:	e7af      	b.n	141de <z_nrf_clock_control_lf_on+0x7e>
   1427e:	bf00      	nop
   14280:	200215d4 	.word	0x200215d4
   14284:	20021568 	.word	0x20021568
   14288:	20021598 	.word	0x20021598
   1428c:	000308c5 	.word	0x000308c5
   14290:	000300ff 	.word	0x000300ff
   14294:	00030864 	.word	0x00030864
   14298:	40005000 	.word	0x40005000
   1429c:	2002627d 	.word	0x2002627d
   142a0:	e000e100 	.word	0xe000e100
   142a4:	40005008 	.word	0x40005008
   142a8:	00032bdb 	.word	0x00032bdb
   142ac:	40005104 	.word	0x40005104

000142b0 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   142b0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   142b2:	4c06      	ldr	r4, [pc, #24]	; (142cc <z_clock_isr+0x1c>)
   142b4:	4906      	ldr	r1, [pc, #24]	; (142d0 <z_clock_isr+0x20>)
   142b6:	4622      	mov	r2, r4
   142b8:	4806      	ldr	r0, [pc, #24]	; (142d4 <z_clock_isr+0x24>)
   142ba:	2317      	movs	r3, #23
   142bc:	f017 fefb 	bl	2c0b6 <printk>
   142c0:	4620      	mov	r0, r4
}
   142c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   142c6:	2117      	movs	r1, #23
   142c8:	f018 b912 	b.w	2c4f0 <assert_post_action>
   142cc:	000308ee 	.word	0x000308ee
   142d0:	00032bdb 	.word	0x00032bdb
   142d4:	000300ff 	.word	0x000300ff

000142d8 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
   142d8:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   142da:	4b08      	ldr	r3, [pc, #32]	; (142fc <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   142dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   142e0:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   142e4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   142e8:	4290      	cmp	r0, r2
   142ea:	d100      	bne.n	142ee <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   142ec:	4770      	bx	lr
   142ee:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   142f2:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   142f4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   142f8:	e7f2      	b.n	142e0 <handle_next_cycle_case+0x8>
   142fa:	bf00      	nop
   142fc:	40015000 	.word	0x40015000

00014300 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14300:	2200      	movs	r2, #0
   14302:	4b07      	ldr	r3, [pc, #28]	; (14320 <rtc_nrf_isr+0x20>)
   14304:	601a      	str	r2, [r3, #0]
   14306:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   14308:	4a06      	ldr	r2, [pc, #24]	; (14324 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
   1430a:	4b07      	ldr	r3, [pc, #28]	; (14328 <rtc_nrf_isr+0x28>)
   1430c:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
   14310:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   14312:	1ac0      	subs	r0, r0, r3
   14314:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   14318:	4403      	add	r3, r0
   1431a:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
   1431c:	f010 be12 	b.w	24f44 <z_clock_announce>
   14320:	40015140 	.word	0x40015140
   14324:	200215d8 	.word	0x200215d8
   14328:	40015000 	.word	0x40015000

0001432c <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
   1432c:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   1432e:	2400      	movs	r4, #0
   14330:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   14334:	4d0e      	ldr	r5, [pc, #56]	; (14370 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14336:	4b0f      	ldr	r3, [pc, #60]	; (14374 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
   14338:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1433c:	601c      	str	r4, [r3, #0]
   1433e:	681b      	ldr	r3, [r3, #0]
   14340:	4b0d      	ldr	r3, [pc, #52]	; (14378 <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
   14342:	2101      	movs	r1, #1
   14344:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   14348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1434c:	4622      	mov	r2, r4
   1434e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   14352:	2015      	movs	r0, #21
   14354:	f000 f9bc 	bl	146d0 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
   14358:	2015      	movs	r0, #21
   1435a:	f000 f99b 	bl	14694 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1435e:	2301      	movs	r3, #1
   14360:	4a06      	ldr	r2, [pc, #24]	; (1437c <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
   14362:	2002      	movs	r0, #2
   14364:	6013      	str	r3, [r2, #0]
   14366:	602b      	str	r3, [r5, #0]
   14368:	f7ff fefa 	bl	14160 <z_nrf_clock_control_lf_on>

	return 0;
}
   1436c:	4620      	mov	r0, r4
   1436e:	bd38      	pop	{r3, r4, r5, pc}
   14370:	40015000 	.word	0x40015000
   14374:	40015140 	.word	0x40015140
   14378:	e000e100 	.word	0xe000e100
   1437c:	40015008 	.word	0x40015008

00014380 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
   14380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
   14382:	4b2d      	ldr	r3, [pc, #180]	; (14438 <z_clock_set_timeout+0xb8>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   14384:	4c2d      	ldr	r4, [pc, #180]	; (1443c <z_clock_set_timeout+0xbc>)
   14386:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
   1438a:	4b2d      	ldr	r3, [pc, #180]	; (14440 <z_clock_set_timeout+0xc0>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1438c:	f1b0 3fff 	cmp.w	r0, #4294967295
   14390:	bf08      	it	eq
   14392:	4620      	moveq	r0, r4
	uint32_t unannounced = counter_sub(counter(), last_count);
   14394:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   14396:	1a52      	subs	r2, r2, r1
   14398:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   1439c:	0212      	lsls	r2, r2, #8
   1439e:	d438      	bmi.n	14412 <z_clock_set_timeout+0x92>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
   143a0:	3801      	subs	r0, #1
   143a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   143a6:	42a0      	cmp	r0, r4
   143a8:	bfa8      	it	ge
   143aa:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   143ac:	3301      	adds	r3, #1
   143ae:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   143b0:	42a0      	cmp	r0, r4
   143b2:	bf94      	ite	ls
   143b4:	180c      	addls	r4, r1, r0
   143b6:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   143b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   143bc:	2600      	movs	r6, #0
    p_reg->INTENCLR = mask;
   143be:	4a1e      	ldr	r2, [pc, #120]	; (14438 <z_clock_set_timeout+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   143c0:	4d20      	ldr	r5, [pc, #128]	; (14444 <z_clock_set_timeout+0xc4>)
    p_reg->INTENCLR = mask;
   143c2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
     return p_reg->COUNTER;
   143c6:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
    return p_reg->CC[ch];
   143ca:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   143ce:	602e      	str	r6, [r5, #0]
	return (a - b) & COUNTER_MAX;
   143d0:	1a5b      	subs	r3, r3, r1
   143d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   143d6:	682f      	ldr	r7, [r5, #0]
	if (counter_sub(prev_val, now) == 1) {
   143d8:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   143da:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   143de:	f8c2 7540 	str.w	r7, [r2, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   143e2:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
   143e6:	d104      	bne.n	143f2 <z_clock_set_timeout+0x72>
	z_impl_k_busy_wait(usec_to_wait);
   143e8:	200f      	movs	r0, #15
   143ea:	f01a f98e 	bl	2e70a <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   143ee:	602e      	str	r6, [r5, #0]
   143f0:	682b      	ldr	r3, [r5, #0]
   143f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   143f6:	4b14      	ldr	r3, [pc, #80]	; (14448 <z_clock_set_timeout+0xc8>)
   143f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   143fc:	4b0e      	ldr	r3, [pc, #56]	; (14438 <z_clock_set_timeout+0xb8>)
   143fe:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   14402:	1a22      	subs	r2, r4, r0
   14404:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
   14408:	2a01      	cmp	r2, #1
   1440a:	d104      	bne.n	14416 <z_clock_set_timeout+0x96>
		handle_next_cycle_case(t);
   1440c:	f7ff ff64 	bl	142d8 <handle_next_cycle_case>
   14410:	e00b      	b.n	1442a <z_clock_set_timeout+0xaa>
		ticks = 0;
   14412:	2000      	movs	r0, #0
   14414:	e7ca      	b.n	143ac <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   14416:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1441a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
   1441e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   14422:	1a24      	subs	r4, r4, r0
   14424:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
   14426:	0223      	lsls	r3, r4, #8
   14428:	d4f0      	bmi.n	1440c <z_clock_set_timeout+0x8c>
    p_reg->INTENSET = mask;
   1442a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1442e:	4b02      	ldr	r3, [pc, #8]	; (14438 <z_clock_set_timeout+0xb8>)
   14430:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
   14434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14436:	bf00      	nop
   14438:	40015000 	.word	0x40015000
   1443c:	007fffff 	.word	0x007fffff
   14440:	200215d8 	.word	0x200215d8
   14444:	40015140 	.word	0x40015140
   14448:	e000e100 	.word	0xe000e100

0001444c <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
   1444c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1444e:	f04f 0320 	mov.w	r3, #32
   14452:	f3ef 8511 	mrs	r5, BASEPRI
   14456:	f383 8811 	msr	BASEPRI, r3
   1445a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1445e:	481a      	ldr	r0, [pc, #104]	; (144c8 <z_clock_elapsed+0x7c>)
   14460:	f010 fa92 	bl	24988 <z_spin_lock_valid>
   14464:	b968      	cbnz	r0, 14482 <z_clock_elapsed+0x36>
   14466:	235c      	movs	r3, #92	; 0x5c
   14468:	4a18      	ldr	r2, [pc, #96]	; (144cc <z_clock_elapsed+0x80>)
   1446a:	4919      	ldr	r1, [pc, #100]	; (144d0 <z_clock_elapsed+0x84>)
   1446c:	4819      	ldr	r0, [pc, #100]	; (144d4 <z_clock_elapsed+0x88>)
   1446e:	f017 fe22 	bl	2c0b6 <printk>
   14472:	4915      	ldr	r1, [pc, #84]	; (144c8 <z_clock_elapsed+0x7c>)
   14474:	4818      	ldr	r0, [pc, #96]	; (144d8 <z_clock_elapsed+0x8c>)
   14476:	f017 fe1e 	bl	2c0b6 <printk>
   1447a:	215c      	movs	r1, #92	; 0x5c
   1447c:	4813      	ldr	r0, [pc, #76]	; (144cc <z_clock_elapsed+0x80>)
   1447e:	f018 f837 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   14482:	4811      	ldr	r0, [pc, #68]	; (144c8 <z_clock_elapsed+0x7c>)
   14484:	f010 fa9e 	bl	249c4 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   14488:	4b14      	ldr	r3, [pc, #80]	; (144dc <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1448a:	480f      	ldr	r0, [pc, #60]	; (144c8 <z_clock_elapsed+0x7c>)
   1448c:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   14490:	4b13      	ldr	r3, [pc, #76]	; (144e0 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
   14492:	681b      	ldr	r3, [r3, #0]
   14494:	1ae4      	subs	r4, r4, r3
   14496:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   1449a:	f010 fa83 	bl	249a4 <z_spin_unlock_valid>
   1449e:	b968      	cbnz	r0, 144bc <z_clock_elapsed+0x70>
   144a0:	2384      	movs	r3, #132	; 0x84
   144a2:	4a0a      	ldr	r2, [pc, #40]	; (144cc <z_clock_elapsed+0x80>)
   144a4:	490f      	ldr	r1, [pc, #60]	; (144e4 <z_clock_elapsed+0x98>)
   144a6:	480b      	ldr	r0, [pc, #44]	; (144d4 <z_clock_elapsed+0x88>)
   144a8:	f017 fe05 	bl	2c0b6 <printk>
   144ac:	4906      	ldr	r1, [pc, #24]	; (144c8 <z_clock_elapsed+0x7c>)
   144ae:	480e      	ldr	r0, [pc, #56]	; (144e8 <z_clock_elapsed+0x9c>)
   144b0:	f017 fe01 	bl	2c0b6 <printk>
   144b4:	2184      	movs	r1, #132	; 0x84
   144b6:	4805      	ldr	r0, [pc, #20]	; (144cc <z_clock_elapsed+0x80>)
   144b8:	f018 f81a 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   144bc:	f385 8811 	msr	BASEPRI, r5
   144c0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   144c4:	4620      	mov	r0, r4
   144c6:	bd38      	pop	{r3, r4, r5, pc}
   144c8:	200215dc 	.word	0x200215dc
   144cc:	000301cf 	.word	0x000301cf
   144d0:	00030221 	.word	0x00030221
   144d4:	000300ff 	.word	0x000300ff
   144d8:	00030236 	.word	0x00030236
   144dc:	40015000 	.word	0x40015000
   144e0:	200215d8 	.word	0x200215d8
   144e4:	000301f5 	.word	0x000301f5
   144e8:	0003020c 	.word	0x0003020c

000144ec <z_timer_cycle_get_32>:

uint32_t z_timer_cycle_get_32(void)
{
   144ec:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   144ee:	f04f 0320 	mov.w	r3, #32
   144f2:	f3ef 8511 	mrs	r5, BASEPRI
   144f6:	f383 8811 	msr	BASEPRI, r3
   144fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   144fe:	481b      	ldr	r0, [pc, #108]	; (1456c <z_timer_cycle_get_32+0x80>)
   14500:	f010 fa42 	bl	24988 <z_spin_lock_valid>
   14504:	b968      	cbnz	r0, 14522 <z_timer_cycle_get_32+0x36>
   14506:	235c      	movs	r3, #92	; 0x5c
   14508:	4a19      	ldr	r2, [pc, #100]	; (14570 <z_timer_cycle_get_32+0x84>)
   1450a:	491a      	ldr	r1, [pc, #104]	; (14574 <z_timer_cycle_get_32+0x88>)
   1450c:	481a      	ldr	r0, [pc, #104]	; (14578 <z_timer_cycle_get_32+0x8c>)
   1450e:	f017 fdd2 	bl	2c0b6 <printk>
   14512:	4916      	ldr	r1, [pc, #88]	; (1456c <z_timer_cycle_get_32+0x80>)
   14514:	4819      	ldr	r0, [pc, #100]	; (1457c <z_timer_cycle_get_32+0x90>)
   14516:	f017 fdce 	bl	2c0b6 <printk>
   1451a:	215c      	movs	r1, #92	; 0x5c
   1451c:	4814      	ldr	r0, [pc, #80]	; (14570 <z_timer_cycle_get_32+0x84>)
   1451e:	f017 ffe7 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   14522:	4812      	ldr	r0, [pc, #72]	; (1456c <z_timer_cycle_get_32+0x80>)
   14524:	f010 fa4e 	bl	249c4 <z_spin_lock_set_owner>
   14528:	4b15      	ldr	r3, [pc, #84]	; (14580 <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1452a:	4810      	ldr	r0, [pc, #64]	; (1456c <z_timer_cycle_get_32+0x80>)
   1452c:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   14530:	4b14      	ldr	r3, [pc, #80]	; (14584 <z_timer_cycle_get_32+0x98>)
   14532:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   14534:	1ae4      	subs	r4, r4, r3
   14536:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   1453a:	441c      	add	r4, r3
   1453c:	f010 fa32 	bl	249a4 <z_spin_unlock_valid>
   14540:	b968      	cbnz	r0, 1455e <z_timer_cycle_get_32+0x72>
   14542:	2384      	movs	r3, #132	; 0x84
   14544:	4a0a      	ldr	r2, [pc, #40]	; (14570 <z_timer_cycle_get_32+0x84>)
   14546:	4910      	ldr	r1, [pc, #64]	; (14588 <z_timer_cycle_get_32+0x9c>)
   14548:	480b      	ldr	r0, [pc, #44]	; (14578 <z_timer_cycle_get_32+0x8c>)
   1454a:	f017 fdb4 	bl	2c0b6 <printk>
   1454e:	4907      	ldr	r1, [pc, #28]	; (1456c <z_timer_cycle_get_32+0x80>)
   14550:	480e      	ldr	r0, [pc, #56]	; (1458c <z_timer_cycle_get_32+0xa0>)
   14552:	f017 fdb0 	bl	2c0b6 <printk>
   14556:	2184      	movs	r1, #132	; 0x84
   14558:	4805      	ldr	r0, [pc, #20]	; (14570 <z_timer_cycle_get_32+0x84>)
   1455a:	f017 ffc9 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   1455e:	f385 8811 	msr	BASEPRI, r5
   14562:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   14566:	4620      	mov	r0, r4
   14568:	bd38      	pop	{r3, r4, r5, pc}
   1456a:	bf00      	nop
   1456c:	200215dc 	.word	0x200215dc
   14570:	000301cf 	.word	0x000301cf
   14574:	00030221 	.word	0x00030221
   14578:	000300ff 	.word	0x000300ff
   1457c:	00030236 	.word	0x00030236
   14580:	40015000 	.word	0x40015000
   14584:	200215d8 	.word	0x200215d8
   14588:	000301f5 	.word	0x000301f5
   1458c:	0003020c 	.word	0x0003020c

00014590 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   14590:	4a09      	ldr	r2, [pc, #36]	; (145b8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   14592:	490a      	ldr	r1, [pc, #40]	; (145bc <arch_swap+0x2c>)
	_current->arch.basepri = key;
   14594:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   14596:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   14598:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   1459a:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1459c:	4908      	ldr	r1, [pc, #32]	; (145c0 <arch_swap+0x30>)
   1459e:	684b      	ldr	r3, [r1, #4]
   145a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   145a4:	604b      	str	r3, [r1, #4]
   145a6:	2300      	movs	r3, #0
   145a8:	f383 8811 	msr	BASEPRI, r3
   145ac:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   145b0:	6893      	ldr	r3, [r2, #8]
}
   145b2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   145b4:	4770      	bx	lr
   145b6:	bf00      	nop
   145b8:	20021dbc 	.word	0x20021dbc
   145bc:	0002f580 	.word	0x0002f580
   145c0:	e000ed00 	.word	0xe000ed00

000145c4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   145c4:	4929      	ldr	r1, [pc, #164]	; (1466c <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   145c6:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   145c8:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   145cc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   145ce:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   145d2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   145d6:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   145da:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   145de:	d004      	beq.n	145ea <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   145e0:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   145e4:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   145e8:	e007      	b.n	145fa <out_fp_endif>

000145ea <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   145ea:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
   145ee:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   145f2:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   145f6:	f050 0004 	orrs.w	r0, r0, #4

000145fa <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   145fa:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   145fe:	2020      	movs	r0, #32
    msr BASEPRI, r0
   14600:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   14604:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   14608:	4f19      	ldr	r7, [pc, #100]	; (14670 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1460a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1460e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   14610:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   14612:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   14614:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   14616:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   14618:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1461a:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   1461e:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   14622:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   14626:	d105      	bne.n	14634 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   14628:	2300      	movs	r3, #0
    vmsr fpscr, r3
   1462a:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   1462e:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   14632:	e005      	b.n	14640 <in_fp_endif>

00014634 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   14634:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   14638:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
   1463c:	ec90 8a10 	vldmia	r0, {s16-s31}

00014640 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   14640:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   14644:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   14648:	f383 8814 	msr	CONTROL, r3
    isb
   1464c:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   14650:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   14654:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   14658:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1465c:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   14660:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   14662:	f018 fb1f 	bl	2cca4 <configure_builtin_stack_guard>
    pop {r2, lr}
   14666:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   1466a:	4770      	bx	lr
    ldr r1, =_kernel
   1466c:	20021dbc 	.word	0x20021dbc
    ldr v4, =_SCS_ICSR
   14670:	e000ed04 	.word	0xe000ed04

00014674 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   14674:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   14678:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1467a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1467e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   14682:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   14684:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   14688:	2902      	cmp	r1, #2
    beq _oops
   1468a:	d0ff      	beq.n	1468c <_oops>

0001468c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1468c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1468e:	f018 fb0d 	bl	2ccac <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   14692:	bd01      	pop	{r0, pc}

00014694 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   14694:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   14696:	2b00      	cmp	r3, #0
   14698:	db08      	blt.n	146ac <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1469a:	2201      	movs	r2, #1
   1469c:	f000 001f 	and.w	r0, r0, #31
   146a0:	fa02 f000 	lsl.w	r0, r2, r0
   146a4:	4a02      	ldr	r2, [pc, #8]	; (146b0 <arch_irq_enable+0x1c>)
   146a6:	095b      	lsrs	r3, r3, #5
   146a8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   146ac:	4770      	bx	lr
   146ae:	bf00      	nop
   146b0:	e000e100 	.word	0xe000e100

000146b4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   146b4:	4b05      	ldr	r3, [pc, #20]	; (146cc <arch_irq_is_enabled+0x18>)
   146b6:	0942      	lsrs	r2, r0, #5
   146b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   146bc:	2301      	movs	r3, #1
   146be:	f000 001f 	and.w	r0, r0, #31
   146c2:	fa03 f000 	lsl.w	r0, r3, r0
}
   146c6:	4010      	ands	r0, r2
   146c8:	4770      	bx	lr
   146ca:	bf00      	nop
   146cc:	e000e100 	.word	0xe000e100

000146d0 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   146d0:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   146d2:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   146d4:	2c07      	cmp	r4, #7
{
   146d6:	4605      	mov	r5, r0
   146d8:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   146da:	d90e      	bls.n	146fa <z_arm_irq_priority_set+0x2a>
   146dc:	235b      	movs	r3, #91	; 0x5b
   146de:	4a10      	ldr	r2, [pc, #64]	; (14720 <z_arm_irq_priority_set+0x50>)
   146e0:	4910      	ldr	r1, [pc, #64]	; (14724 <z_arm_irq_priority_set+0x54>)
   146e2:	4811      	ldr	r0, [pc, #68]	; (14728 <z_arm_irq_priority_set+0x58>)
   146e4:	f017 fce7 	bl	2c0b6 <printk>
   146e8:	4631      	mov	r1, r6
   146ea:	4810      	ldr	r0, [pc, #64]	; (1472c <z_arm_irq_priority_set+0x5c>)
   146ec:	2207      	movs	r2, #7
   146ee:	f017 fce2 	bl	2c0b6 <printk>
   146f2:	215b      	movs	r1, #91	; 0x5b
   146f4:	480a      	ldr	r0, [pc, #40]	; (14720 <z_arm_irq_priority_set+0x50>)
   146f6:	f017 fefb 	bl	2c4f0 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   146fa:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   146fc:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   146fe:	bfac      	ite	ge
   14700:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14704:	4b0a      	ldrlt	r3, [pc, #40]	; (14730 <z_arm_irq_priority_set+0x60>)
   14706:	ea4f 1444 	mov.w	r4, r4, lsl #5
   1470a:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1470c:	bfab      	itete	ge
   1470e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14712:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14716:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1471a:	555c      	strblt	r4, [r3, r5]
}
   1471c:	bd70      	pop	{r4, r5, r6, pc}
   1471e:	bf00      	nop
   14720:	0003092a 	.word	0x0003092a
   14724:	00030960 	.word	0x00030960
   14728:	000300ff 	.word	0x000300ff
   1472c:	0003097b 	.word	0x0003097b
   14730:	e000ed14 	.word	0xe000ed14

00014734 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   14734:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   14736:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   14738:	4b04      	ldr	r3, [pc, #16]	; (1474c <_arch_isr_direct_pm+0x18>)
   1473a:	6a18      	ldr	r0, [r3, #32]
   1473c:	b118      	cbz	r0, 14746 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   1473e:	2200      	movs	r2, #0
   14740:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   14742:	f019 ff1c 	bl	2e57e <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   14746:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   14748:	bd08      	pop	{r3, pc}
   1474a:	bf00      	nop
   1474c:	20021dbc 	.word	0x20021dbc

00014750 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   14750:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   14754:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   14756:	490c      	ldr	r1, [pc, #48]	; (14788 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
   14758:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1475c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   1475e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   14762:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   14766:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   14768:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   1476c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   14770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   14774:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   14778:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1477a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1477c:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   1477e:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
   14780:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   14784:	4770      	bx	lr
   14786:	bf00      	nop
   14788:	0002c1bb 	.word	0x0002c1bb

0001478c <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   1478c:	b508      	push	{r3, lr}
   1478e:	4604      	mov	r4, r0
   14790:	460e      	mov	r6, r1
   14792:	4615      	mov	r5, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   14794:	2300      	movs	r3, #0
   14796:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1479a:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   1479e:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   147a2:	f383 8814 	msr	CONTROL, r3
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   147a6:	f3bf 8f6f 	isb	sy
	z_arm_configure_static_mpu_regions();
   147aa:	f000 fbc3 	bl	14f34 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   147ae:	4b09      	ldr	r3, [pc, #36]	; (147d4 <arch_switch_to_main_thread+0x48>)
   147b0:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   147b2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   147b4:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   147b8:	4628      	mov	r0, r5
   147ba:	f386 8809 	msr	PSP, r6
   147be:	2100      	movs	r1, #0
   147c0:	b663      	cpsie	if
   147c2:	f381 8811 	msr	BASEPRI, r1
   147c6:	f3bf 8f6f 	isb	sy
   147ca:	2200      	movs	r2, #0
   147cc:	2300      	movs	r3, #0
   147ce:	f017 fcf4 	bl	2c1ba <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   147d2:	bf00      	nop
   147d4:	20021dbc 	.word	0x20021dbc

000147d8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   147d8:	4901      	ldr	r1, [pc, #4]	; (147e0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   147da:	2210      	movs	r2, #16
	str	r2, [r1]
   147dc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   147de:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   147e0:	e000ed10 	.word	0xe000ed10

000147e4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   147e4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   147e6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   147e8:	f380 8811 	msr	BASEPRI, r0
	isb
   147ec:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   147f0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   147f4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   147f6:	b662      	cpsie	i
	isb
   147f8:	f3bf 8f6f 	isb	sy

	bx	lr
   147fc:	4770      	bx	lr
   147fe:	bf00      	nop

00014800 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   14800:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   14802:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   14804:	f381 8811 	msr	BASEPRI, r1

	wfe
   14808:	bf20      	wfe

	msr	BASEPRI, r0
   1480a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1480e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   14810:	4770      	bx	lr
   14812:	bf00      	nop

00014814 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14818:	4606      	mov	r6, r0

	if (esf != NULL) {
   1481a:	460d      	mov	r5, r1
{
   1481c:	b08b      	sub	sp, #44	; 0x2c
	if (esf != NULL) {
   1481e:	2900      	cmp	r1, #0
   14820:	d054      	beq.n	148cc <z_arm_fatal_error+0xb8>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   14822:	4b2e      	ldr	r3, [pc, #184]	; (148dc <z_arm_fatal_error+0xc8>)
   14824:	4c2e      	ldr	r4, [pc, #184]	; (148e0 <z_arm_fatal_error+0xcc>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14826:	482f      	ldr	r0, [pc, #188]	; (148e4 <z_arm_fatal_error+0xd0>)
   14828:	1ae4      	subs	r4, r4, r3
   1482a:	08e4      	lsrs	r4, r4, #3
   1482c:	01a4      	lsls	r4, r4, #6
   1482e:	f044 0401 	orr.w	r4, r4, #1
   14832:	f8ad 4000 	strh.w	r4, [sp]
   14836:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   1483a:	6809      	ldr	r1, [r1, #0]
   1483c:	f017 fec7 	bl	2c5ce <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   14840:	f8ad 4000 	strh.w	r4, [sp]
   14844:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   14848:	68e9      	ldr	r1, [r5, #12]
   1484a:	4827      	ldr	r0, [pc, #156]	; (148e8 <z_arm_fatal_error+0xd4>)
   1484c:	f017 febf 	bl	2c5ce <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   14850:	4622      	mov	r2, r4
   14852:	69e9      	ldr	r1, [r5, #28]
   14854:	4825      	ldr	r0, [pc, #148]	; (148ec <z_arm_fatal_error+0xd8>)
   14856:	f017 fe8a 	bl	2c56e <log_1>
	for (int i = 0; i < 16; i += 4) {
   1485a:	46a8      	mov	r8, r5
   1485c:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   1485e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 148f8 <z_arm_fatal_error+0xe4>
   14862:	edd8 7a08 	vldr	s15, [r8, #32]
   14866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1486a:	edcd 7a03 	vstr	s15, [sp, #12]
   1486e:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
   14872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14876:	edcd 7a05 	vstr	s15, [sp, #20]
   1487a:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
   1487e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14882:	edcd 7a07 	vstr	s15, [sp, #28]
   14886:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
   1488a:	2208      	movs	r2, #8
   1488c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14890:	1c7b      	adds	r3, r7, #1
   14892:	9304      	str	r3, [sp, #16]
   14894:	1cbb      	adds	r3, r7, #2
   14896:	9306      	str	r3, [sp, #24]
   14898:	1cfb      	adds	r3, r7, #3
   1489a:	9702      	str	r7, [sp, #8]
   1489c:	9308      	str	r3, [sp, #32]
   1489e:	4648      	mov	r0, r9
   148a0:	4623      	mov	r3, r4
   148a2:	eb0d 0102 	add.w	r1, sp, r2
	for (int i = 0; i < 16; i += 4) {
   148a6:	3704      	adds	r7, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   148a8:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   148ac:	f017 feae 	bl	2c60c <log_n>
	for (int i = 0; i < 16; i += 4) {
   148b0:	2f10      	cmp	r7, #16
   148b2:	f108 0810 	add.w	r8, r8, #16
   148b6:	d1d4      	bne.n	14862 <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   148b8:	4622      	mov	r2, r4
   148ba:	6e29      	ldr	r1, [r5, #96]	; 0x60
   148bc:	480c      	ldr	r0, [pc, #48]	; (148f0 <z_arm_fatal_error+0xdc>)
   148be:	f017 fe56 	bl	2c56e <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   148c2:	4622      	mov	r2, r4
   148c4:	69a9      	ldr	r1, [r5, #24]
   148c6:	480b      	ldr	r0, [pc, #44]	; (148f4 <z_arm_fatal_error+0xe0>)
   148c8:	f017 fe51 	bl	2c56e <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   148cc:	4629      	mov	r1, r5
   148ce:	4630      	mov	r0, r6
   148d0:	f00d fcdc 	bl	2228c <z_fatal_error>
}
   148d4:	b00b      	add	sp, #44	; 0x2c
   148d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   148da:	bf00      	nop
   148dc:	0002ec7c 	.word	0x0002ec7c
   148e0:	0002ecfc 	.word	0x0002ecfc
   148e4:	000309b0 	.word	0x000309b0
   148e8:	000309df 	.word	0x000309df
   148ec:	00030a0e 	.word	0x00030a0e
   148f0:	00030a60 	.word	0x00030a60
   148f4:	00030a6f 	.word	0x00030a6f
   148f8:	00030a1d 	.word	0x00030a1d

000148fc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   148fc:	bf30      	wfi
    b z_SysNmiOnReset
   148fe:	f7ff bffd 	b.w	148fc <z_SysNmiOnReset>
   14902:	bf00      	nop

00014904 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14904:	4a14      	ldr	r2, [pc, #80]	; (14958 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   14906:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14908:	4b14      	ldr	r3, [pc, #80]	; (1495c <z_arm_prep_c+0x58>)
   1490a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1490e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14910:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14914:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   14918:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1491c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   14920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   14924:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14928:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   1492c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   14930:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   14934:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   14938:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1493c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   14940:	2300      	movs	r3, #0
   14942:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   14946:	f00d fd37 	bl	223b8 <z_bss_zero>
	z_data_copy();
   1494a:	f00d fd3f 	bl	223cc <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1494e:	f000 fab9 	bl	14ec4 <z_arm_interrupt_init>
	z_cstart();
   14952:	f00d fd79 	bl	22448 <z_cstart>
   14956:	bf00      	nop
   14958:	0000c000 	.word	0x0000c000
   1495c:	e000ed00 	.word	0xe000ed00

00014960 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   14960:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   14962:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   14964:	4a0b      	ldr	r2, [pc, #44]	; (14994 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   14966:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   14968:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1496a:	bf1e      	ittt	ne
	movne	r1, #0
   1496c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1496e:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   14970:	f019 fe05 	blne	2e57e <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   14974:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   14976:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1497a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1497e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   14982:	4905      	ldr	r1, [pc, #20]	; (14998 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   14984:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   14986:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   14988:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1498a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1498e:	4903      	ldr	r1, [pc, #12]	; (1499c <_isr_wrapper+0x3c>)
	bx r1
   14990:	4708      	bx	r1
   14992:	0000      	.short	0x0000
	ldr r2, =_kernel
   14994:	20021dbc 	.word	0x20021dbc
	ldr r1, =_sw_isr_table
   14998:	0002ea68 	.word	0x0002ea68
	ldr r1, =z_arm_int_exit
   1499c:	00014e85 	.word	0x00014e85

000149a0 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   149a0:	f017 fdae 	bl	2c500 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   149a4:	2020      	movs	r0, #32
    msr BASEPRI, r0
   149a6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   149aa:	4808      	ldr	r0, [pc, #32]	; (149cc <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   149ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   149b0:	1840      	adds	r0, r0, r1
    msr PSP, r0
   149b2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   149b6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   149ba:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   149bc:	4308      	orrs	r0, r1
    msr CONTROL, r0
   149be:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   149c2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   149c6:	f7ff ff9d 	bl	14904 <z_arm_prep_c>
   149ca:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   149cc:	20029450 	.word	0x20029450

000149d0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   149d0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   149d4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   149d8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   149da:	4672      	mov	r2, lr
	bl z_arm_fault
   149dc:	f000 f958 	bl	14c90 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   149e0:	bd01      	pop	{r0, pc}
   149e2:	bf00      	nop

000149e4 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   149e4:	b570      	push	{r4, r5, r6, lr}
   149e6:	4b28      	ldr	r3, [pc, #160]	; (14a88 <usage_fault.isra.0+0xa4>)
   149e8:	4c28      	ldr	r4, [pc, #160]	; (14a8c <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   149ea:	4d29      	ldr	r5, [pc, #164]	; (14a90 <usage_fault.isra.0+0xac>)
   149ec:	1ae4      	subs	r4, r4, r3
   149ee:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   149f0:	01a4      	lsls	r4, r4, #6
   149f2:	f044 0601 	orr.w	r6, r4, #1
   149f6:	4631      	mov	r1, r6
   149f8:	4826      	ldr	r0, [pc, #152]	; (14a94 <usage_fault.isra.0+0xb0>)
   149fa:	f017 fda9 	bl	2c550 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   149fe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14a00:	0193      	lsls	r3, r2, #6
   14a02:	d503      	bpl.n	14a0c <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   14a04:	4631      	mov	r1, r6
   14a06:	4824      	ldr	r0, [pc, #144]	; (14a98 <usage_fault.isra.0+0xb4>)
   14a08:	f017 fda2 	bl	2c550 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   14a0c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14a0e:	01dd      	lsls	r5, r3, #7
   14a10:	d504      	bpl.n	14a1c <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   14a12:	4822      	ldr	r0, [pc, #136]	; (14a9c <usage_fault.isra.0+0xb8>)
   14a14:	f044 0101 	orr.w	r1, r4, #1
   14a18:	f017 fd9a 	bl	2c550 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   14a1c:	4d1c      	ldr	r5, [pc, #112]	; (14a90 <usage_fault.isra.0+0xac>)
   14a1e:	6aae      	ldr	r6, [r5, #40]	; 0x28
   14a20:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   14a24:	d005      	beq.n	14a32 <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   14a26:	481e      	ldr	r0, [pc, #120]	; (14aa0 <usage_fault.isra.0+0xbc>)
   14a28:	f044 0101 	orr.w	r1, r4, #1
   14a2c:	f017 fd90 	bl	2c550 <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   14a30:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   14a32:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14a34:	0318      	lsls	r0, r3, #12
   14a36:	d504      	bpl.n	14a42 <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
   14a38:	481a      	ldr	r0, [pc, #104]	; (14aa4 <usage_fault.isra.0+0xc0>)
   14a3a:	f044 0101 	orr.w	r1, r4, #1
   14a3e:	f017 fd87 	bl	2c550 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   14a42:	4d13      	ldr	r5, [pc, #76]	; (14a90 <usage_fault.isra.0+0xac>)
   14a44:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14a46:	0351      	lsls	r1, r2, #13
   14a48:	d504      	bpl.n	14a54 <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   14a4a:	4817      	ldr	r0, [pc, #92]	; (14aa8 <usage_fault.isra.0+0xc4>)
   14a4c:	f044 0101 	orr.w	r1, r4, #1
   14a50:	f017 fd7e 	bl	2c550 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   14a54:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14a56:	039a      	lsls	r2, r3, #14
   14a58:	d504      	bpl.n	14a64 <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   14a5a:	4814      	ldr	r0, [pc, #80]	; (14aac <usage_fault.isra.0+0xc8>)
   14a5c:	f044 0101 	orr.w	r1, r4, #1
   14a60:	f017 fd76 	bl	2c550 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   14a64:	4d0a      	ldr	r5, [pc, #40]	; (14a90 <usage_fault.isra.0+0xac>)
   14a66:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14a68:	03db      	lsls	r3, r3, #15
   14a6a:	d504      	bpl.n	14a76 <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   14a6c:	4810      	ldr	r0, [pc, #64]	; (14ab0 <usage_fault.isra.0+0xcc>)
   14a6e:	f044 0101 	orr.w	r1, r4, #1
   14a72:	f017 fd6d 	bl	2c550 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   14a76:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   14a78:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   14a7a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   14a7e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   14a82:	62ab      	str	r3, [r5, #40]	; 0x28
}
   14a84:	bd70      	pop	{r4, r5, r6, pc}
   14a86:	bf00      	nop
   14a88:	0002ec7c 	.word	0x0002ec7c
   14a8c:	0002ecfc 	.word	0x0002ecfc
   14a90:	e000ed00 	.word	0xe000ed00
   14a94:	00030a9d 	.word	0x00030a9d
   14a98:	00030ab5 	.word	0x00030ab5
   14a9c:	00030ac8 	.word	0x00030ac8
   14aa0:	00030ae2 	.word	0x00030ae2
   14aa4:	00030b0c 	.word	0x00030b0c
   14aa8:	00030b2a 	.word	0x00030b2a
   14aac:	00030b4f 	.word	0x00030b4f
   14ab0:	00030b69 	.word	0x00030b69

00014ab4 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   14ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ab8:	4b30      	ldr	r3, [pc, #192]	; (14b7c <mem_manage_fault.isra.0+0xc8>)
   14aba:	4c31      	ldr	r4, [pc, #196]	; (14b80 <mem_manage_fault.isra.0+0xcc>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14abc:	4d31      	ldr	r5, [pc, #196]	; (14b84 <mem_manage_fault.isra.0+0xd0>)
   14abe:	1ae4      	subs	r4, r4, r3
   14ac0:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   14ac2:	01a4      	lsls	r4, r4, #6
   14ac4:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   14ac8:	4607      	mov	r7, r0
   14aca:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   14acc:	482e      	ldr	r0, [pc, #184]	; (14b88 <mem_manage_fault.isra.0+0xd4>)
   14ace:	4641      	mov	r1, r8
   14ad0:	f017 fd3e 	bl	2c550 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14ad4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14ad6:	06d1      	lsls	r1, r2, #27
   14ad8:	d503      	bpl.n	14ae2 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   14ada:	4641      	mov	r1, r8
   14adc:	482b      	ldr	r0, [pc, #172]	; (14b8c <mem_manage_fault.isra.0+0xd8>)
   14ade:	f017 fd37 	bl	2c550 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14ae2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14ae4:	071a      	lsls	r2, r3, #28
   14ae6:	d504      	bpl.n	14af2 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   14ae8:	4829      	ldr	r0, [pc, #164]	; (14b90 <mem_manage_fault.isra.0+0xdc>)
   14aea:	f044 0101 	orr.w	r1, r4, #1
   14aee:	f017 fd2f 	bl	2c550 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   14af2:	4d24      	ldr	r5, [pc, #144]	; (14b84 <mem_manage_fault.isra.0+0xd0>)
   14af4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14af6:	079b      	lsls	r3, r3, #30
   14af8:	d512      	bpl.n	14b20 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   14afa:	f044 0801 	orr.w	r8, r4, #1
   14afe:	4641      	mov	r1, r8
   14b00:	4824      	ldr	r0, [pc, #144]	; (14b94 <mem_manage_fault.isra.0+0xe0>)
   14b02:	f017 fd25 	bl	2c550 <log_0>
		mmfar = SCB->MMFAR;
   14b06:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   14b08:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14b0a:	0618      	lsls	r0, r3, #24
   14b0c:	d508      	bpl.n	14b20 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   14b0e:	4642      	mov	r2, r8
   14b10:	4821      	ldr	r0, [pc, #132]	; (14b98 <mem_manage_fault.isra.0+0xe4>)
   14b12:	f017 fd2c 	bl	2c56e <log_1>
			if (from_hard_fault) {
   14b16:	b11f      	cbz	r7, 14b20 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   14b18:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14b1e:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   14b20:	4d18      	ldr	r5, [pc, #96]	; (14b84 <mem_manage_fault.isra.0+0xd0>)
   14b22:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14b24:	07d1      	lsls	r1, r2, #31
   14b26:	d504      	bpl.n	14b32 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   14b28:	481c      	ldr	r0, [pc, #112]	; (14b9c <mem_manage_fault.isra.0+0xe8>)
   14b2a:	f044 0101 	orr.w	r1, r4, #1
   14b2e:	f017 fd0f 	bl	2c550 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14b32:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14b34:	069a      	lsls	r2, r3, #26
   14b36:	d504      	bpl.n	14b42 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   14b38:	4819      	ldr	r0, [pc, #100]	; (14ba0 <mem_manage_fault.isra.0+0xec>)
   14b3a:	f044 0101 	orr.w	r1, r4, #1
   14b3e:	f017 fd07 	bl	2c550 <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   14b42:	4b10      	ldr	r3, [pc, #64]	; (14b84 <mem_manage_fault.isra.0+0xd0>)
   14b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14b46:	06db      	lsls	r3, r3, #27
   14b48:	d50e      	bpl.n	14b68 <mem_manage_fault.isra.0+0xb4>
	__ASSERT(0,
   14b4a:	4916      	ldr	r1, [pc, #88]	; (14ba4 <mem_manage_fault.isra.0+0xf0>)
   14b4c:	f44f 739f 	mov.w	r3, #318	; 0x13e
   14b50:	4a15      	ldr	r2, [pc, #84]	; (14ba8 <mem_manage_fault.isra.0+0xf4>)
   14b52:	4816      	ldr	r0, [pc, #88]	; (14bac <mem_manage_fault.isra.0+0xf8>)
   14b54:	f017 faaf 	bl	2c0b6 <printk>
   14b58:	4815      	ldr	r0, [pc, #84]	; (14bb0 <mem_manage_fault.isra.0+0xfc>)
   14b5a:	f017 faac 	bl	2c0b6 <printk>
   14b5e:	f44f 719f 	mov.w	r1, #318	; 0x13e
   14b62:	4811      	ldr	r0, [pc, #68]	; (14ba8 <mem_manage_fault.isra.0+0xf4>)
   14b64:	f017 fcc4 	bl	2c4f0 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
   14b68:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14b6a:	4a06      	ldr	r2, [pc, #24]	; (14b84 <mem_manage_fault.isra.0+0xd0>)
   14b6c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14b6e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   14b72:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   14b74:	7030      	strb	r0, [r6, #0]
}
   14b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b7a:	bf00      	nop
   14b7c:	0002ec7c 	.word	0x0002ec7c
   14b80:	0002ecfc 	.word	0x0002ecfc
   14b84:	e000ed00 	.word	0xe000ed00
   14b88:	00030b94 	.word	0x00030b94
   14b8c:	00030baa 	.word	0x00030baa
   14b90:	00030bdd 	.word	0x00030bdd
   14b94:	00030bf0 	.word	0x00030bf0
   14b98:	00030c08 	.word	0x00030c08
   14b9c:	00030c1e 	.word	0x00030c1e
   14ba0:	00030c3d 	.word	0x00030c3d
   14ba4:	00032bdb 	.word	0x00032bdb
   14ba8:	00030c6c 	.word	0x00030c6c
   14bac:	000300ff 	.word	0x000300ff
   14bb0:	00030ca6 	.word	0x00030ca6

00014bb4 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14bb8:	4b2a      	ldr	r3, [pc, #168]	; (14c64 <bus_fault.isra.0+0xb0>)
   14bba:	4c2b      	ldr	r4, [pc, #172]	; (14c68 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14bbc:	4d2b      	ldr	r5, [pc, #172]	; (14c6c <bus_fault.isra.0+0xb8>)
   14bbe:	1ae4      	subs	r4, r4, r3
   14bc0:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   14bc2:	01a4      	lsls	r4, r4, #6
   14bc4:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14bc8:	4607      	mov	r7, r0
   14bca:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   14bcc:	4828      	ldr	r0, [pc, #160]	; (14c70 <bus_fault.isra.0+0xbc>)
   14bce:	4641      	mov	r1, r8
   14bd0:	f017 fcbe 	bl	2c550 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14bd4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14bd6:	04d1      	lsls	r1, r2, #19
   14bd8:	d503      	bpl.n	14be2 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   14bda:	4641      	mov	r1, r8
   14bdc:	4825      	ldr	r0, [pc, #148]	; (14c74 <bus_fault.isra.0+0xc0>)
   14bde:	f017 fcb7 	bl	2c550 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   14be2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14be4:	051a      	lsls	r2, r3, #20
   14be6:	d504      	bpl.n	14bf2 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   14be8:	4823      	ldr	r0, [pc, #140]	; (14c78 <bus_fault.isra.0+0xc4>)
   14bea:	f044 0101 	orr.w	r1, r4, #1
   14bee:	f017 fcaf 	bl	2c550 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   14bf2:	4d1e      	ldr	r5, [pc, #120]	; (14c6c <bus_fault.isra.0+0xb8>)
   14bf4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14bf6:	059b      	lsls	r3, r3, #22
   14bf8:	d512      	bpl.n	14c20 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   14bfa:	f044 0801 	orr.w	r8, r4, #1
   14bfe:	4641      	mov	r1, r8
   14c00:	481e      	ldr	r0, [pc, #120]	; (14c7c <bus_fault.isra.0+0xc8>)
   14c02:	f017 fca5 	bl	2c550 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   14c06:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   14c08:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14c0a:	0418      	lsls	r0, r3, #16
   14c0c:	d508      	bpl.n	14c20 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   14c0e:	4642      	mov	r2, r8
   14c10:	481b      	ldr	r0, [pc, #108]	; (14c80 <bus_fault.isra.0+0xcc>)
   14c12:	f017 fcac 	bl	2c56e <log_1>
			if (from_hard_fault) {
   14c16:	b11f      	cbz	r7, 14c20 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   14c18:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14c1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   14c1e:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   14c20:	4d12      	ldr	r5, [pc, #72]	; (14c6c <bus_fault.isra.0+0xb8>)
   14c22:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14c24:	0559      	lsls	r1, r3, #21
   14c26:	d504      	bpl.n	14c32 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   14c28:	4816      	ldr	r0, [pc, #88]	; (14c84 <bus_fault.isra.0+0xd0>)
   14c2a:	f044 0101 	orr.w	r1, r4, #1
   14c2e:	f017 fc8f 	bl	2c550 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   14c32:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14c34:	05da      	lsls	r2, r3, #23
   14c36:	d50d      	bpl.n	14c54 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   14c38:	4813      	ldr	r0, [pc, #76]	; (14c88 <bus_fault.isra.0+0xd4>)
   14c3a:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14c3e:	f017 fc87 	bl	2c550 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   14c42:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14c44:	4a09      	ldr	r2, [pc, #36]	; (14c6c <bus_fault.isra.0+0xb8>)
   14c46:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14c48:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   14c4c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   14c4e:	7030      	strb	r0, [r6, #0]
}
   14c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   14c54:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14c56:	049b      	lsls	r3, r3, #18
   14c58:	d5f3      	bpl.n	14c42 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14c5a:	480c      	ldr	r0, [pc, #48]	; (14c8c <bus_fault.isra.0+0xd8>)
   14c5c:	f044 0101 	orr.w	r1, r4, #1
   14c60:	e7ed      	b.n	14c3e <bus_fault.isra.0+0x8a>
   14c62:	bf00      	nop
   14c64:	0002ec7c 	.word	0x0002ec7c
   14c68:	0002ecfc 	.word	0x0002ecfc
   14c6c:	e000ed00 	.word	0xe000ed00
   14c70:	00030ce0 	.word	0x00030ce0
   14c74:	00030cf6 	.word	0x00030cf6
   14c78:	00030bdd 	.word	0x00030bdd
   14c7c:	00030d07 	.word	0x00030d07
   14c80:	00030d20 	.word	0x00030d20
   14c84:	00030d35 	.word	0x00030d35
   14c88:	00030d50 	.word	0x00030d50
   14c8c:	00030c3d 	.word	0x00030c3d

00014c90 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   14c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14c94:	4b63      	ldr	r3, [pc, #396]	; (14e24 <z_arm_fault+0x194>)
{
   14c96:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14c98:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   14c9c:	460e      	mov	r6, r1
   14c9e:	4614      	mov	r4, r2
   14ca0:	2700      	movs	r7, #0
   14ca2:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14ca4:	f3c8 0508 	ubfx	r5, r8, #0, #9
   14ca8:	f387 8811 	msr	BASEPRI, r7
   14cac:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   14cb0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   14cb4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   14cb8:	d117      	bne.n	14cea <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   14cba:	07d0      	lsls	r0, r2, #31
   14cbc:	d415      	bmi.n	14cea <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   14cbe:	0651      	lsls	r1, r2, #25
   14cc0:	d404      	bmi.n	14ccc <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   14cc2:	0722      	lsls	r2, r4, #28
   14cc4:	d40f      	bmi.n	14ce6 <z_arm_fault+0x56>
			ptr_esf = (z_arch_esf_t *)msp;
   14cc6:	464e      	mov	r6, r9
			*nested_exc = true;
   14cc8:	2701      	movs	r7, #1
   14cca:	e00d      	b.n	14ce8 <z_arm_fault+0x58>
   14ccc:	4956      	ldr	r1, [pc, #344]	; (14e28 <z_arm_fault+0x198>)
   14cce:	4b57      	ldr	r3, [pc, #348]	; (14e2c <z_arm_fault+0x19c>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   14cd0:	4857      	ldr	r0, [pc, #348]	; (14e30 <z_arm_fault+0x1a0>)
   14cd2:	1a5b      	subs	r3, r3, r1
   14cd4:	08db      	lsrs	r3, r3, #3
   14cd6:	019b      	lsls	r3, r3, #6
   14cd8:	f043 0101 	orr.w	r1, r3, #1
   14cdc:	f017 fc38 	bl	2c550 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   14ce0:	f014 0704 	ands.w	r7, r4, #4
   14ce4:	d01e      	beq.n	14d24 <z_arm_fault+0x94>
	*nested_exc = false;
   14ce6:	2700      	movs	r7, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   14ce8:	b97e      	cbnz	r6, 14d0a <z_arm_fault+0x7a>
   14cea:	f240 33bb 	movw	r3, #955	; 0x3bb
   14cee:	4a51      	ldr	r2, [pc, #324]	; (14e34 <z_arm_fault+0x1a4>)
   14cf0:	4951      	ldr	r1, [pc, #324]	; (14e38 <z_arm_fault+0x1a8>)
   14cf2:	4852      	ldr	r0, [pc, #328]	; (14e3c <z_arm_fault+0x1ac>)
   14cf4:	f017 f9df 	bl	2c0b6 <printk>
   14cf8:	4851      	ldr	r0, [pc, #324]	; (14e40 <z_arm_fault+0x1b0>)
   14cfa:	f017 f9dc 	bl	2c0b6 <printk>
   14cfe:	f240 31bb 	movw	r1, #955	; 0x3bb
   14d02:	484c      	ldr	r0, [pc, #304]	; (14e34 <z_arm_fault+0x1a4>)
   14d04:	f017 fbf4 	bl	2c4f0 <assert_post_action>
   14d08:	2600      	movs	r6, #0
	*recoverable = false;
   14d0a:	2300      	movs	r3, #0
   14d0c:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   14d10:	1eeb      	subs	r3, r5, #3
   14d12:	2b09      	cmp	r3, #9
   14d14:	d86c      	bhi.n	14df0 <z_arm_fault+0x160>
   14d16:	e8df f003 	tbb	[pc, r3]
   14d1a:	5a07      	.short	0x5a07
   14d1c:	6b6b3e5e 	.word	0x6b6b3e5e
   14d20:	626b6b6b 	.word	0x626b6b6b
			ptr_esf = (z_arch_esf_t *)msp;
   14d24:	464e      	mov	r6, r9
	if (!alternative_state_exc) {
   14d26:	e7df      	b.n	14ce8 <z_arm_fault+0x58>
	*recoverable = false;
   14d28:	f04f 0800 	mov.w	r8, #0
   14d2c:	4b3e      	ldr	r3, [pc, #248]	; (14e28 <z_arm_fault+0x198>)
   14d2e:	4d3f      	ldr	r5, [pc, #252]	; (14e2c <z_arm_fault+0x19c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   14d30:	4844      	ldr	r0, [pc, #272]	; (14e44 <z_arm_fault+0x1b4>)
   14d32:	1aed      	subs	r5, r5, r3
   14d34:	08ed      	lsrs	r5, r5, #3
   14d36:	01ad      	lsls	r5, r5, #6
   14d38:	f045 0501 	orr.w	r5, r5, #1
   14d3c:	4629      	mov	r1, r5
   14d3e:	f017 fc07 	bl	2c550 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14d42:	4b38      	ldr	r3, [pc, #224]	; (14e24 <z_arm_fault+0x194>)
	*recoverable = false;
   14d44:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14d48:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   14d4a:	f014 0402 	ands.w	r4, r4, #2
   14d4e:	d005      	beq.n	14d5c <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
   14d50:	4629      	mov	r1, r5
   14d52:	483d      	ldr	r0, [pc, #244]	; (14e48 <z_arm_fault+0x1b8>)
	PR_FAULT_INFO(
   14d54:	f017 fbfc 	bl	2c550 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14d58:	2400      	movs	r4, #0
}
   14d5a:	e01f      	b.n	14d9c <z_arm_fault+0x10c>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   14d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14d5e:	005b      	lsls	r3, r3, #1
   14d60:	d51c      	bpl.n	14d9c <z_arm_fault+0x10c>
		PR_EXC("  Fault escalation (see below)");
   14d62:	4629      	mov	r1, r5
   14d64:	4839      	ldr	r0, [pc, #228]	; (14e4c <z_arm_fault+0x1bc>)
   14d66:	f017 fbf3 	bl	2c550 <log_0>
		if (SCB_MMFSR != 0) {
   14d6a:	4b39      	ldr	r3, [pc, #228]	; (14e50 <z_arm_fault+0x1c0>)
   14d6c:	781b      	ldrb	r3, [r3, #0]
   14d6e:	b12b      	cbz	r3, 14d7c <z_arm_fault+0xec>
			reason = mem_manage_fault(esf, 1, recoverable);
   14d70:	2001      	movs	r0, #1
   14d72:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   14d76:	f7ff fe9d 	bl	14ab4 <mem_manage_fault.isra.0>
   14d7a:	e00e      	b.n	14d9a <z_arm_fault+0x10a>
		} else if (SCB_BFSR != 0) {
   14d7c:	4b35      	ldr	r3, [pc, #212]	; (14e54 <z_arm_fault+0x1c4>)
   14d7e:	781b      	ldrb	r3, [r3, #0]
   14d80:	b12b      	cbz	r3, 14d8e <z_arm_fault+0xfe>
			reason = bus_fault(esf, 1, recoverable);
   14d82:	2001      	movs	r0, #1
   14d84:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   14d88:	f7ff ff14 	bl	14bb4 <bus_fault.isra.0>
   14d8c:	e005      	b.n	14d9a <z_arm_fault+0x10a>
		} else if (SCB_UFSR != 0) {
   14d8e:	4b32      	ldr	r3, [pc, #200]	; (14e58 <z_arm_fault+0x1c8>)
   14d90:	881b      	ldrh	r3, [r3, #0]
   14d92:	b29b      	uxth	r3, r3
   14d94:	b113      	cbz	r3, 14d9c <z_arm_fault+0x10c>
			reason = usage_fault(esf);
   14d96:	f7ff fe25 	bl	149e4 <usage_fault.isra.0>
   14d9a:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   14d9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14da0:	b993      	cbnz	r3, 14dc8 <z_arm_fault+0x138>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   14da2:	2268      	movs	r2, #104	; 0x68
   14da4:	4631      	mov	r1, r6
   14da6:	a802      	add	r0, sp, #8
   14da8:	f7f7 fed0 	bl	cb4c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   14dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14dae:	b39f      	cbz	r7, 14e18 <z_arm_fault+0x188>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   14db0:	f3c3 0208 	ubfx	r2, r3, #0, #9
   14db4:	b922      	cbnz	r2, 14dc0 <z_arm_fault+0x130>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   14db6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   14dba:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14dbe:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   14dc0:	4620      	mov	r0, r4
   14dc2:	a902      	add	r1, sp, #8
   14dc4:	f7ff fd26 	bl	14814 <z_arm_fatal_error>
}
   14dc8:	b01d      	add	sp, #116	; 0x74
   14dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   14dce:	2000      	movs	r0, #0
   14dd0:	f10d 0107 	add.w	r1, sp, #7
   14dd4:	e7cf      	b.n	14d76 <z_arm_fault+0xe6>
		reason = bus_fault(esf, 0, recoverable);
   14dd6:	2000      	movs	r0, #0
   14dd8:	f10d 0107 	add.w	r1, sp, #7
   14ddc:	e7d4      	b.n	14d88 <z_arm_fault+0xf8>
   14dde:	4913      	ldr	r1, [pc, #76]	; (14e2c <z_arm_fault+0x19c>)
   14de0:	4b11      	ldr	r3, [pc, #68]	; (14e28 <z_arm_fault+0x198>)
	PR_FAULT_INFO(
   14de2:	481e      	ldr	r0, [pc, #120]	; (14e5c <z_arm_fault+0x1cc>)
   14de4:	1ac9      	subs	r1, r1, r3
   14de6:	08c9      	lsrs	r1, r1, #3
   14de8:	0189      	lsls	r1, r1, #6
   14dea:	f041 0101 	orr.w	r1, r1, #1
   14dee:	e7b1      	b.n	14d54 <z_arm_fault+0xc4>
   14df0:	4a0d      	ldr	r2, [pc, #52]	; (14e28 <z_arm_fault+0x198>)
   14df2:	4b0e      	ldr	r3, [pc, #56]	; (14e2c <z_arm_fault+0x19c>)
	PR_FAULT_INFO("***** %s %d) *****",
   14df4:	481a      	ldr	r0, [pc, #104]	; (14e60 <z_arm_fault+0x1d0>)
   14df6:	1a9b      	subs	r3, r3, r2
   14df8:	08db      	lsrs	r3, r3, #3
   14dfa:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   14dfe:	ea4f 1383 	mov.w	r3, r3, lsl #6
   14e02:	4918      	ldr	r1, [pc, #96]	; (14e64 <z_arm_fault+0x1d4>)
   14e04:	f043 0301 	orr.w	r3, r3, #1
   14e08:	bf18      	it	ne
   14e0a:	4601      	movne	r1, r0
   14e0c:	f1a5 0210 	sub.w	r2, r5, #16
   14e10:	4815      	ldr	r0, [pc, #84]	; (14e68 <z_arm_fault+0x1d8>)
   14e12:	f017 fbc3 	bl	2c59c <log_2>
   14e16:	e79f      	b.n	14d58 <z_arm_fault+0xc8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14e18:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   14e1c:	f023 0301 	bic.w	r3, r3, #1
   14e20:	e7cd      	b.n	14dbe <z_arm_fault+0x12e>
   14e22:	bf00      	nop
   14e24:	e000ed00 	.word	0xe000ed00
   14e28:	0002ec7c 	.word	0x0002ec7c
   14e2c:	0002ecfc 	.word	0x0002ecfc
   14e30:	00030d68 	.word	0x00030d68
   14e34:	00030c6c 	.word	0x00030c6c
   14e38:	00030d8b 	.word	0x00030d8b
   14e3c:	000300ff 	.word	0x000300ff
   14e40:	00030d9e 	.word	0x00030d9e
   14e44:	00030ddc 	.word	0x00030ddc
   14e48:	00030df3 	.word	0x00030df3
   14e4c:	00030e14 	.word	0x00030e14
   14e50:	e000ed28 	.word	0xe000ed28
   14e54:	e000ed29 	.word	0xe000ed29
   14e58:	e000ed2a 	.word	0xe000ed2a
   14e5c:	00030e33 	.word	0x00030e33
   14e60:	00030e7e 	.word	0x00030e7e
   14e64:	00030e69 	.word	0x00030e69
   14e68:	00030e97 	.word	0x00030e97

00014e6c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   14e6c:	4b04      	ldr	r3, [pc, #16]	; (14e80 <z_arm_fault_init+0x14>)
   14e6e:	695a      	ldr	r2, [r3, #20]
   14e70:	f042 0210 	orr.w	r2, r2, #16
   14e74:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   14e76:	695a      	ldr	r2, [r3, #20]
   14e78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   14e7c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   14e7e:	4770      	bx	lr
   14e80:	e000ed00 	.word	0xe000ed00

00014e84 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14e84:	4b04      	ldr	r3, [pc, #16]	; (14e98 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   14e86:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14e88:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   14e8a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14e8c:	d003      	beq.n	14e96 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14e8e:	4903      	ldr	r1, [pc, #12]	; (14e9c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14e94:	600a      	str	r2, [r1, #0]

00014e96 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   14e96:	4770      	bx	lr
	ldr r3, =_kernel
   14e98:	20021dbc 	.word	0x20021dbc
	ldr r1, =_SCS_ICSR
   14e9c:	e000ed04 	.word	0xe000ed04

00014ea0 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   14ea0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14ea4:	4905      	ldr	r1, [pc, #20]	; (14ebc <sys_arch_reboot+0x1c>)
   14ea6:	4b06      	ldr	r3, [pc, #24]	; (14ec0 <sys_arch_reboot+0x20>)
   14ea8:	68ca      	ldr	r2, [r1, #12]
   14eaa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   14eae:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14eb0:	60cb      	str	r3, [r1, #12]
   14eb2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14eb6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14eb8:	e7fd      	b.n	14eb6 <sys_arch_reboot+0x16>
   14eba:	bf00      	nop
   14ebc:	e000ed00 	.word	0xe000ed00
   14ec0:	05fa0004 	.word	0x05fa0004

00014ec4 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   14ec4:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14ec6:	2120      	movs	r1, #32
   14ec8:	4803      	ldr	r0, [pc, #12]	; (14ed8 <z_arm_interrupt_init+0x14>)
   14eca:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   14ecc:	3301      	adds	r3, #1
   14ece:	2b41      	cmp	r3, #65	; 0x41
   14ed0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   14ed4:	d1f9      	bne.n	14eca <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   14ed6:	4770      	bx	lr
   14ed8:	e000e100 	.word	0xe000e100

00014edc <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   14edc:	b510      	push	{r4, lr}
   14ede:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
   14ee0:	f00e feea 	bl	23cb8 <z_thread_single_abort>

	if (_current == thread) {
   14ee4:	4b11      	ldr	r3, [pc, #68]	; (14f2c <z_impl_k_thread_abort+0x50>)
   14ee6:	689b      	ldr	r3, [r3, #8]
   14ee8:	42a3      	cmp	r3, r4
   14eea:	d107      	bne.n	14efc <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14eec:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   14ef0:	b183      	cbz	r3, 14f14 <z_impl_k_thread_abort+0x38>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14ef2:	4a0f      	ldr	r2, [pc, #60]	; (14f30 <z_impl_k_thread_abort+0x54>)
   14ef4:	6853      	ldr	r3, [r2, #4]
   14ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14efa:	6053      	str	r3, [r2, #4]
	__asm__ volatile(
   14efc:	f04f 0320 	mov.w	r3, #32
   14f00:	f3ef 8011 	mrs	r0, BASEPRI
   14f04:	f383 8811 	msr	BASEPRI, r3
   14f08:	f3bf 8f6f 	isb	sy
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   14f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   14f10:	f019 bba6 	b.w	2e660 <z_reschedule_irqlock>
   14f14:	f04f 0320 	mov.w	r3, #32
   14f18:	f3ef 8011 	mrs	r0, BASEPRI
   14f1c:	f383 8811 	msr	BASEPRI, r3
   14f20:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
   14f24:	f7ff fb34 	bl	14590 <arch_swap>
	return ret;
   14f28:	e7e8      	b.n	14efc <z_impl_k_thread_abort+0x20>
   14f2a:	bf00      	nop
   14f2c:	20021dbc 	.word	0x20021dbc
   14f30:	e000ed00 	.word	0xe000ed00

00014f34 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   14f34:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   14f36:	4b0e      	ldr	r3, [pc, #56]	; (14f70 <z_arm_configure_static_mpu_regions+0x3c>)
{
   14f38:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   14f3a:	9302      	str	r3, [sp, #8]
   14f3c:	4b0d      	ldr	r3, [pc, #52]	; (14f74 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14f3e:	4c0e      	ldr	r4, [pc, #56]	; (14f78 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   14f40:	9303      	str	r3, [sp, #12]
   14f42:	4b0e      	ldr	r3, [pc, #56]	; (14f7c <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14f44:	4a0e      	ldr	r2, [pc, #56]	; (14f80 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   14f46:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   14f48:	ab02      	add	r3, sp, #8
   14f4a:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14f4c:	a801      	add	r0, sp, #4
   14f4e:	4623      	mov	r3, r4
   14f50:	2101      	movs	r1, #1
   14f52:	f000 f96d 	bl	15230 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   14f56:	2300      	movs	r3, #0
   14f58:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   14f5a:	4b0a      	ldr	r3, [pc, #40]	; (14f84 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   14f5c:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   14f5e:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   14f60:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   14f62:	9305      	str	r3, [sp, #20]
   14f64:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   14f66:	f000 f989 	bl	1527c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   14f6a:	b008      	add	sp, #32
   14f6c:	bd10      	pop	{r4, pc}
   14f6e:	bf00      	nop
   14f70:	20020000 	.word	0x20020000
   14f74:	00000000 	.word	0x00000000
   14f78:	20040000 	.word	0x20040000
   14f7c:	00010006 	.word	0x00010006
   14f80:	20020000 	.word	0x20020000
   14f84:	20020cd8 	.word	0x20020cd8

00014f88 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   14f88:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   14f8a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   14f8c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   14f8e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   14f92:	f004 031f 	and.w	r3, r4, #31
   14f96:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   14f98:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   14f9a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   14f9c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   14fa0:	4904      	ldr	r1, [pc, #16]	; (14fb4 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   14fa2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   14fa6:	f043 0301 	orr.w	r3, r3, #1
   14faa:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   14fac:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   14fae:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   14fb0:	bd10      	pop	{r4, pc}
   14fb2:	bf00      	nop
   14fb4:	e000ed90 	.word	0xe000ed90

00014fb8 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   14fb8:	b508      	push	{r3, lr}
   14fba:	4a07      	ldr	r2, [pc, #28]	; (14fd8 <region_allocate_and_init.part.0+0x20>)
   14fbc:	4b07      	ldr	r3, [pc, #28]	; (14fdc <region_allocate_and_init.part.0+0x24>)
   14fbe:	4601      	mov	r1, r0
   14fc0:	1ad2      	subs	r2, r2, r3
   14fc2:	08d2      	lsrs	r2, r2, #3
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14fc4:	0192      	lsls	r2, r2, #6
   14fc6:	4806      	ldr	r0, [pc, #24]	; (14fe0 <region_allocate_and_init.part.0+0x28>)
   14fc8:	f042 0201 	orr.w	r2, r2, #1
   14fcc:	f017 facf 	bl	2c56e <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   14fd0:	f06f 0015 	mvn.w	r0, #21
   14fd4:	bd08      	pop	{r3, pc}
   14fd6:	bf00      	nop
   14fd8:	0002ece4 	.word	0x0002ece4
   14fdc:	0002ec7c 	.word	0x0002ec7c
   14fe0:	00030eae 	.word	0x00030eae

00014fe4 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   14fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fe8:	4607      	mov	r7, r0
   14fea:	4688      	mov	r8, r1
   14fec:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   14fee:	2600      	movs	r6, #0
	MPU->RNR = index;
   14ff0:	4d56      	ldr	r5, [pc, #344]	; (1514c <mpu_configure_regions_and_partition.constprop.0+0x168>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   14ff2:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   14ff4:	4546      	cmp	r6, r8
   14ff6:	da35      	bge.n	15064 <mpu_configure_regions_and_partition.constprop.0+0x80>
		if (regions[i]->size == 0U) {
   14ff8:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   14ffc:	f8d3 9004 	ldr.w	r9, [r3, #4]
   15000:	f1b9 0f00 	cmp.w	r9, #0
   15004:	d051      	beq.n	150aa <mpu_configure_regions_and_partition.constprop.0+0xc6>
		&&
   15006:	f1b9 0f1f 	cmp.w	r9, #31
   1500a:	d91e      	bls.n	1504a <mpu_configure_regions_and_partition.constprop.0+0x66>
		&&
   1500c:	f019 0f1f 	tst.w	r9, #31
   15010:	d11b      	bne.n	1504a <mpu_configure_regions_and_partition.constprop.0+0x66>
		((part->start &
   15012:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   15016:	f01a 0f1f 	tst.w	sl, #31
   1501a:	d116      	bne.n	1504a <mpu_configure_regions_and_partition.constprop.0+0x66>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1501c:	4650      	mov	r0, sl
   1501e:	f017 fe71 	bl	2cd04 <arm_cmse_mpu_region_get>
   15022:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   15024:	eb09 000a 	add.w	r0, r9, sl
   15028:	3801      	subs	r0, #1
   1502a:	f017 fe6b 	bl	2cd04 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1502e:	4583      	cmp	fp, r0
   15030:	d01c      	beq.n	1506c <mpu_configure_regions_and_partition.constprop.0+0x88>
	return -EINVAL;
   15032:	f06f 0b15 	mvn.w	fp, #21
   15036:	4a46      	ldr	r2, [pc, #280]	; (15150 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   15038:	4b46      	ldr	r3, [pc, #280]	; (15154 <mpu_configure_regions_and_partition.constprop.0+0x170>)
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   1503a:	4659      	mov	r1, fp
   1503c:	1ad2      	subs	r2, r2, r3
   1503e:	08d2      	lsrs	r2, r2, #3
   15040:	0192      	lsls	r2, r2, #6
   15042:	4845      	ldr	r0, [pc, #276]	; (15158 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   15044:	f042 0201 	orr.w	r2, r2, #1
   15048:	e008      	b.n	1505c <mpu_configure_regions_and_partition.constprop.0+0x78>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1504a:	4631      	mov	r1, r6
   1504c:	4a40      	ldr	r2, [pc, #256]	; (15150 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   1504e:	4b41      	ldr	r3, [pc, #260]	; (15154 <mpu_configure_regions_and_partition.constprop.0+0x170>)
   15050:	4842      	ldr	r0, [pc, #264]	; (1515c <mpu_configure_regions_and_partition.constprop.0+0x178>)
   15052:	1ad2      	subs	r2, r2, r3
   15054:	08d2      	lsrs	r2, r2, #3
   15056:	0192      	lsls	r2, r2, #6
   15058:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   1505c:	f017 fa87 	bl	2c56e <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   15060:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   15064:	4620      	mov	r0, r4
   15066:	b005      	add	sp, #20
   15068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   1506c:	f11b 0f16 	cmn.w	fp, #22
   15070:	d0e1      	beq.n	15036 <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
   15072:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   15074:	455b      	cmp	r3, fp
   15076:	dbde      	blt.n	15036 <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
   15078:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   1507c:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   1507e:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   15082:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   15084:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   15088:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1508c:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   15090:	e9d1 3200 	ldrd	r3, r2, [r1]
   15094:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   15096:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   15098:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   1509c:	d118      	bne.n	150d0 <mpu_configure_regions_and_partition.constprop.0+0xec>
   1509e:	45ca      	cmp	sl, r9
   150a0:	d105      	bne.n	150ae <mpu_configure_regions_and_partition.constprop.0+0xca>
			mpu_configure_region(u_reg_index, regions[i]);
   150a2:	fa5f f08b 	uxtb.w	r0, fp
   150a6:	f017 fe0c 	bl	2ccc2 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   150aa:	3601      	adds	r6, #1
   150ac:	e7a2      	b.n	14ff4 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   150ae:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   150b2:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   150b4:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   150b8:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   150bc:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   150be:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   150c0:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   150c2:	f017 fdfe 	bl	2ccc2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   150c6:	f110 0f16 	cmn.w	r0, #22
   150ca:	d0c9      	beq.n	15060 <mpu_configure_regions_and_partition.constprop.0+0x7c>
			reg_index++;
   150cc:	1c44      	adds	r4, r0, #1
   150ce:	e7ec      	b.n	150aa <mpu_configure_regions_and_partition.constprop.0+0xc6>
	MPU->RNR = index;
   150d0:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   150d4:	692a      	ldr	r2, [r5, #16]
   150d6:	3b01      	subs	r3, #1
   150d8:	f023 031f 	bic.w	r3, r3, #31
   150dc:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   150e0:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   150e2:	45ca      	cmp	sl, r9
   150e4:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   150e6:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   150e8:	d0eb      	beq.n	150c2 <mpu_configure_regions_and_partition.constprop.0+0xde>
				mpu_configure_region(reg_index, regions[i]);
   150ea:	f017 fdea 	bl	2ccc2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   150ee:	f110 0f16 	cmn.w	r0, #22
   150f2:	d0b5      	beq.n	15060 <mpu_configure_regions_and_partition.constprop.0+0x7c>
	MPU->RNR = index;
   150f4:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   150f8:	68ea      	ldr	r2, [r5, #12]
   150fa:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   150fe:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   15102:	f362 0304 	bfi	r3, r2, #0, #5
   15106:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1510a:	692b      	ldr	r3, [r5, #16]
   1510c:	f89d 2008 	ldrb.w	r2, [sp, #8]
   15110:	085b      	lsrs	r3, r3, #1
   15112:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   15116:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1511a:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   1511e:	e9d3 1300 	ldrd	r1, r3, [r3]
   15122:	440b      	add	r3, r1
   15124:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   15126:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   1512a:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   1512c:	4453      	add	r3, sl
   1512e:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
   15132:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i]->start +
   15134:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   15138:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   1513a:	9303      	str	r3, [sp, #12]
   1513c:	d902      	bls.n	15144 <mpu_configure_regions_and_partition.constprop.0+0x160>
   1513e:	f7ff ff3b 	bl	14fb8 <region_allocate_and_init.part.0>
   15142:	e7c0      	b.n	150c6 <mpu_configure_regions_and_partition.constprop.0+0xe2>
	region_init(index, region_conf);
   15144:	4669      	mov	r1, sp
   15146:	f7ff ff1f 	bl	14f88 <region_init>
			if (reg_index == -EINVAL) {
   1514a:	e7bf      	b.n	150cc <mpu_configure_regions_and_partition.constprop.0+0xe8>
   1514c:	e000ed90 	.word	0xe000ed90
   15150:	0002ece4 	.word	0x0002ece4
   15154:	0002ec7c 	.word	0x0002ec7c
   15158:	00030ef7 	.word	0x00030ef7
   1515c:	00030ed4 	.word	0x00030ed4

00015160 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   15160:	2205      	movs	r2, #5
   15162:	4b03      	ldr	r3, [pc, #12]	; (15170 <arm_core_mpu_enable+0x10>)
   15164:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   15166:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1516a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1516e:	4770      	bx	lr
   15170:	e000ed90 	.word	0xe000ed90

00015174 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   15174:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   15178:	2200      	movs	r2, #0
   1517a:	4b01      	ldr	r3, [pc, #4]	; (15180 <arm_core_mpu_disable+0xc>)
   1517c:	605a      	str	r2, [r3, #4]
}
   1517e:	4770      	bx	lr
   15180:	e000ed90 	.word	0xe000ed90

00015184 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   15184:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   15186:	4e20      	ldr	r6, [pc, #128]	; (15208 <arm_mpu_init+0x84>)
   15188:	6835      	ldr	r5, [r6, #0]
   1518a:	2d10      	cmp	r5, #16
   1518c:	d913      	bls.n	151b6 <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   1518e:	f44f 739d 	mov.w	r3, #314	; 0x13a
   15192:	4a1e      	ldr	r2, [pc, #120]	; (1520c <arm_mpu_init+0x88>)
   15194:	491e      	ldr	r1, [pc, #120]	; (15210 <arm_mpu_init+0x8c>)
   15196:	481f      	ldr	r0, [pc, #124]	; (15214 <arm_mpu_init+0x90>)
   15198:	f016 ff8d 	bl	2c0b6 <printk>
   1519c:	2210      	movs	r2, #16
   1519e:	4629      	mov	r1, r5
   151a0:	481d      	ldr	r0, [pc, #116]	; (15218 <arm_mpu_init+0x94>)
   151a2:	f016 ff88 	bl	2c0b6 <printk>
   151a6:	4819      	ldr	r0, [pc, #100]	; (1520c <arm_mpu_init+0x88>)
   151a8:	f44f 719d 	mov.w	r1, #314	; 0x13a
   151ac:	f017 f9a0 	bl	2c4f0 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   151b0:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   151b4:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
   151b6:	f7ff ffdd 	bl	15174 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   151ba:	2000      	movs	r0, #0
	MPU->MAIR0 =
   151bc:	4c17      	ldr	r4, [pc, #92]	; (1521c <arm_mpu_init+0x98>)
   151be:	4a18      	ldr	r2, [pc, #96]	; (15220 <arm_mpu_init+0x9c>)
   151c0:	6322      	str	r2, [r4, #48]	; 0x30
   151c2:	4285      	cmp	r5, r0
   151c4:	d119      	bne.n	151fa <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   151c6:	4b17      	ldr	r3, [pc, #92]	; (15224 <arm_mpu_init+0xa0>)
   151c8:	701d      	strb	r5, [r3, #0]
	arm_core_mpu_enable();
   151ca:	f7ff ffc9 	bl	15160 <arm_core_mpu_enable>
	__ASSERT(
   151ce:	6823      	ldr	r3, [r4, #0]
   151d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   151d4:	2b10      	cmp	r3, #16
   151d6:	d00e      	beq.n	151f6 <arm_mpu_init+0x72>
   151d8:	4913      	ldr	r1, [pc, #76]	; (15228 <arm_mpu_init+0xa4>)
   151da:	f44f 73b0 	mov.w	r3, #352	; 0x160
   151de:	4a0b      	ldr	r2, [pc, #44]	; (1520c <arm_mpu_init+0x88>)
   151e0:	480c      	ldr	r0, [pc, #48]	; (15214 <arm_mpu_init+0x90>)
   151e2:	f016 ff68 	bl	2c0b6 <printk>
   151e6:	4811      	ldr	r0, [pc, #68]	; (1522c <arm_mpu_init+0xa8>)
   151e8:	f016 ff65 	bl	2c0b6 <printk>
   151ec:	f44f 71b0 	mov.w	r1, #352	; 0x160
   151f0:	4806      	ldr	r0, [pc, #24]	; (1520c <arm_mpu_init+0x88>)
   151f2:	f017 f97d 	bl	2c4f0 <assert_post_action>
	return 0;
   151f6:	2000      	movs	r0, #0
   151f8:	e7dc      	b.n	151b4 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   151fa:	6871      	ldr	r1, [r6, #4]
   151fc:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   15200:	f7ff fec2 	bl	14f88 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15204:	3001      	adds	r0, #1
   15206:	e7dc      	b.n	151c2 <arm_mpu_init+0x3e>
   15208:	0002ef28 	.word	0x0002ef28
   1520c:	00030f1a 	.word	0x00030f1a
   15210:	00032bdb 	.word	0x00032bdb
   15214:	000300ff 	.word	0x000300ff
   15218:	00030f5a 	.word	0x00030f5a
   1521c:	e000ed90 	.word	0xe000ed90
   15220:	0044ffaa 	.word	0x0044ffaa
   15224:	20024716 	.word	0x20024716
   15228:	00030f8e 	.word	0x00030f8e
   1522c:	00030fdf 	.word	0x00030fdf

00015230 <arm_core_mpu_configure_static_mpu_regions>:
{
   15230:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   15232:	4d0d      	ldr	r5, [pc, #52]	; (15268 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   15234:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   15236:	782a      	ldrb	r2, [r5, #0]
   15238:	f7ff fed4 	bl	14fe4 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1523c:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1523e:	3016      	adds	r0, #22
   15240:	d111      	bne.n	15266 <arm_core_mpu_configure_static_mpu_regions+0x36>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   15242:	f240 1303 	movw	r3, #259	; 0x103
   15246:	4a09      	ldr	r2, [pc, #36]	; (1526c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   15248:	4909      	ldr	r1, [pc, #36]	; (15270 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   1524a:	480a      	ldr	r0, [pc, #40]	; (15274 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   1524c:	f016 ff33 	bl	2c0b6 <printk>
   15250:	4621      	mov	r1, r4
   15252:	4809      	ldr	r0, [pc, #36]	; (15278 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   15254:	f016 ff2f 	bl	2c0b6 <printk>
}
   15258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1525c:	f240 1103 	movw	r1, #259	; 0x103
   15260:	4802      	ldr	r0, [pc, #8]	; (1526c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   15262:	f017 b945 	b.w	2c4f0 <assert_post_action>
}
   15266:	bd38      	pop	{r3, r4, r5, pc}
   15268:	20024716 	.word	0x20024716
   1526c:	00030f1a 	.word	0x00030f1a
   15270:	00032bdb 	.word	0x00032bdb
   15274:	000300ff 	.word	0x000300ff
   15278:	00031000 	.word	0x00031000

0001527c <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   1527c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15280:	4e2f      	ldr	r6, [pc, #188]	; (15340 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
   15282:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   15284:	4605      	mov	r5, r0
   15286:	f04f 0800 	mov.w	r8, #0
   1528a:	46b3      	mov	fp, r6
	MPU->RNR = index;
   1528c:	4f2d      	ldr	r7, [pc, #180]	; (15344 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1528e:	45c8      	cmp	r8, r9
   15290:	db02      	blt.n	15298 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
   15292:	b003      	add	sp, #12
   15294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   15298:	f8d5 a004 	ldr.w	sl, [r5, #4]
   1529c:	f1ba 0f00 	cmp.w	sl, #0
   152a0:	d049      	beq.n	15336 <arm_core_mpu_mark_areas_for_dynamic_regions+0xba>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   152a2:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   152a4:	4608      	mov	r0, r1
   152a6:	9101      	str	r1, [sp, #4]
   152a8:	f017 fd2c 	bl	2cd04 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   152ac:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   152ae:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   152b0:	eb0a 0001 	add.w	r0, sl, r1
   152b4:	3801      	subs	r0, #1
   152b6:	f017 fd25 	bl	2cd04 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   152ba:	4284      	cmp	r4, r0
   152bc:	f04f 0214 	mov.w	r2, #20
   152c0:	4b21      	ldr	r3, [pc, #132]	; (15348 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   152c2:	d018      	beq.n	152f6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   152c4:	f06f 0315 	mvn.w	r3, #21
   152c8:	fb02 f808 	mul.w	r8, r2, r8
   152cc:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   152d0:	f240 1313 	movw	r3, #275	; 0x113
   152d4:	4a1d      	ldr	r2, [pc, #116]	; (1534c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   152d6:	491e      	ldr	r1, [pc, #120]	; (15350 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   152d8:	481e      	ldr	r0, [pc, #120]	; (15354 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   152da:	f016 feec 	bl	2c0b6 <printk>
   152de:	4649      	mov	r1, r9
   152e0:	481d      	ldr	r0, [pc, #116]	; (15358 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   152e2:	f016 fee8 	bl	2c0b6 <printk>
   152e6:	f240 1113 	movw	r1, #275	; 0x113
   152ea:	4818      	ldr	r0, [pc, #96]	; (1534c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
}
   152ec:	b003      	add	sp, #12
   152ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   152f2:	f017 b8fd 	b.w	2c4f0 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   152f6:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   152fa:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   152fc:	d0e8      	beq.n	152d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   152fe:	7819      	ldrb	r1, [r3, #0]
   15300:	42a1      	cmp	r1, r4
   15302:	dde5      	ble.n	152d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   15304:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   15308:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   1530a:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   1530c:	68fc      	ldr	r4, [r7, #12]
   1530e:	f100 0108 	add.w	r1, r0, #8
   15312:	7b00      	ldrb	r0, [r0, #12]
   15314:	f364 0004 	bfi	r0, r4, #0, #5
   15318:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1531a:	6938      	ldr	r0, [r7, #16]
   1531c:	790c      	ldrb	r4, [r1, #4]
   1531e:	0840      	lsrs	r0, r0, #1
   15320:	f360 1447 	bfi	r4, r0, #5, #3
   15324:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   15326:	68f9      	ldr	r1, [r7, #12]
   15328:	f021 011f 	bic.w	r1, r1, #31
   1532c:	6071      	str	r1, [r6, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   1532e:	6939      	ldr	r1, [r7, #16]
   15330:	f021 011f 	bic.w	r1, r1, #31
   15334:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   15336:	f108 0801 	add.w	r8, r8, #1
   1533a:	3614      	adds	r6, #20
   1533c:	350c      	adds	r5, #12
   1533e:	e7a6      	b.n	1528e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   15340:	200215e0 	.word	0x200215e0
   15344:	e000ed90 	.word	0xe000ed90
   15348:	20024716 	.word	0x20024716
   1534c:	00030f1a 	.word	0x00030f1a
   15350:	00032bdb 	.word	0x00032bdb
   15354:	000300ff 	.word	0x000300ff
   15358:	0003102c 	.word	0x0003102c

0001535c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1535c:	4b01      	ldr	r3, [pc, #4]	; (15364 <__stdout_hook_install+0x8>)
   1535e:	6018      	str	r0, [r3, #0]
}
   15360:	4770      	bx	lr
   15362:	bf00      	nop
   15364:	20020438 	.word	0x20020438

00015368 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   15368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1536a:	4606      	mov	r6, r0
   1536c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   1536e:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   15370:	4f06      	ldr	r7, [pc, #24]	; (1538c <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   15372:	42ac      	cmp	r4, r5
   15374:	da08      	bge.n	15388 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   15376:	683b      	ldr	r3, [r7, #0]
   15378:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1537a:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   1537c:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1537e:	f104 0401 	add.w	r4, r4, #1
   15382:	d001      	beq.n	15388 <z_impl_zephyr_read_stdin+0x20>
   15384:	280d      	cmp	r0, #13
   15386:	d1f4      	bne.n	15372 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   15388:	4620      	mov	r0, r4
   1538a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1538c:	20020434 	.word	0x20020434

00015390 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   15390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15392:	460d      	mov	r5, r1
   15394:	4f09      	ldr	r7, [pc, #36]	; (153bc <z_impl_zephyr_write_stdout+0x2c>)
   15396:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   15398:	f1c0 0401 	rsb	r4, r0, #1
   1539c:	19a3      	adds	r3, r4, r6
   1539e:	429d      	cmp	r5, r3
   153a0:	dc01      	bgt.n	153a6 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   153a2:	4628      	mov	r0, r5
   153a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   153a6:	7873      	ldrb	r3, [r6, #1]
   153a8:	2b0a      	cmp	r3, #10
   153aa:	d102      	bne.n	153b2 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   153ac:	200d      	movs	r0, #13
   153ae:	683b      	ldr	r3, [r7, #0]
   153b0:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   153b2:	683b      	ldr	r3, [r7, #0]
   153b4:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   153b8:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   153ba:	e7ef      	b.n	1539c <z_impl_zephyr_write_stdout+0xc>
   153bc:	20020438 	.word	0x20020438

000153c0 <_exit>:

int _write(int fd, const void *buf, int nbytes)
{
	ARG_UNUSED(fd);

	return z_impl_zephyr_write_stdout(buf, nbytes);
   153c0:	2105      	movs	r1, #5
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   153c2:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   153c4:	4801      	ldr	r0, [pc, #4]	; (153cc <_exit+0xc>)
   153c6:	f7ff ffe3 	bl	15390 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   153ca:	e7fe      	b.n	153ca <_exit+0xa>
   153cc:	0003105b 	.word	0x0003105b

000153d0 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   153d0:	b510      	push	{r4, lr}
   153d2:	4604      	mov	r4, r0
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
   153d4:	f04f 32ff 	mov.w	r2, #4294967295
   153d8:	f04f 33ff 	mov.w	r3, #4294967295
   153dc:	480a      	ldr	r0, [pc, #40]	; (15408 <_sbrk+0x38>)
   153de:	f016 fedd 	bl	2c19c <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   153e2:	490a      	ldr	r1, [pc, #40]	; (1540c <_sbrk+0x3c>)
   153e4:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   153e6:	18e0      	adds	r0, r4, r3
   153e8:	4c09      	ldr	r4, [pc, #36]	; (15410 <_sbrk+0x40>)
   153ea:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   153ee:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   153f2:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   153f4:	bf2e      	itee	cs
   153f6:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   153fa:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   153fc:	6008      	strcc	r0, [r1, #0]
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
   153fe:	4802      	ldr	r0, [pc, #8]	; (15408 <_sbrk+0x38>)
   15400:	f016 fec7 	bl	2c192 <sys_sem_give>

	return ret;
}
   15404:	4620      	mov	r0, r4
   15406:	bd10      	pop	{r4, pc}
   15408:	20020c3c 	.word	0x20020c3c
   1540c:	200215f4 	.word	0x200215f4
   15410:	2002a9b8 	.word	0x2002a9b8

00015414 <__chk_fail>:
	return z_impl_zephyr_write_stdout(buf, nbytes);
   15414:	211d      	movs	r1, #29
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   15416:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   15418:	4804      	ldr	r0, [pc, #16]	; (1542c <__chk_fail+0x18>)
   1541a:	f7ff ffb9 	bl	15390 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   1541e:	4040      	eors	r0, r0
   15420:	f380 8811 	msr	BASEPRI, r0
   15424:	f04f 0003 	mov.w	r0, #3
   15428:	df02      	svc	2
	CODE_UNREACHABLE;
   1542a:	bf00      	nop
   1542c:	00031061 	.word	0x00031061

00015430 <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   15430:	b538      	push	{r3, r4, r5, lr}
   15432:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   15434:	4604      	mov	r4, r0
   15436:	b970      	cbnz	r0, 15456 <net_if_flag_is_set+0x26>
   15438:	490b      	ldr	r1, [pc, #44]	; (15468 <net_if_flag_is_set+0x38>)
   1543a:	f240 2312 	movw	r3, #530	; 0x212
   1543e:	4a0b      	ldr	r2, [pc, #44]	; (1546c <net_if_flag_is_set+0x3c>)
   15440:	480b      	ldr	r0, [pc, #44]	; (15470 <net_if_flag_is_set+0x40>)
   15442:	f016 fe38 	bl	2c0b6 <printk>
   15446:	480b      	ldr	r0, [pc, #44]	; (15474 <net_if_flag_is_set+0x44>)
   15448:	f016 fe35 	bl	2c0b6 <printk>
   1544c:	f240 2112 	movw	r1, #530	; 0x212
   15450:	4806      	ldr	r0, [pc, #24]	; (1546c <net_if_flag_is_set+0x3c>)
   15452:	f017 f84d 	bl	2c4f0 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15456:	6823      	ldr	r3, [r4, #0]
   15458:	330c      	adds	r3, #12
   1545a:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1545e:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   15460:	f000 0001 	and.w	r0, r0, #1
   15464:	bd38      	pop	{r3, r4, r5, pc}
   15466:	bf00      	nop
   15468:	000310be 	.word	0x000310be
   1546c:	00031096 	.word	0x00031096
   15470:	000300ff 	.word	0x000300ff
   15474:	0003072c 	.word	0x0003072c

00015478 <net_if_flag_set.constprop.0>:
static inline void net_if_flag_set(struct net_if *iface,
   15478:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   1547a:	4604      	mov	r4, r0
   1547c:	b970      	cbnz	r0, 1549c <net_if_flag_set.constprop.0+0x24>
   1547e:	490d      	ldr	r1, [pc, #52]	; (154b4 <net_if_flag_set.constprop.0+0x3c>)
   15480:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
   15484:	4a0c      	ldr	r2, [pc, #48]	; (154b8 <net_if_flag_set.constprop.0+0x40>)
   15486:	480d      	ldr	r0, [pc, #52]	; (154bc <net_if_flag_set.constprop.0+0x44>)
   15488:	f016 fe15 	bl	2c0b6 <printk>
   1548c:	480c      	ldr	r0, [pc, #48]	; (154c0 <net_if_flag_set.constprop.0+0x48>)
   1548e:	f016 fe12 	bl	2c0b6 <printk>
   15492:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
   15496:	4808      	ldr	r0, [pc, #32]	; (154b8 <net_if_flag_set.constprop.0+0x40>)
   15498:	f017 f82a 	bl	2c4f0 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1549c:	6823      	ldr	r3, [r4, #0]
   1549e:	330c      	adds	r3, #12
   154a0:	e8d3 2fef 	ldaex	r2, [r3]
   154a4:	f042 0201 	orr.w	r2, r2, #1
   154a8:	e8c3 2fe1 	stlex	r1, r2, [r3]
   154ac:	2900      	cmp	r1, #0
   154ae:	d1f7      	bne.n	154a0 <net_if_flag_set.constprop.0+0x28>
}
   154b0:	bd10      	pop	{r4, pc}
   154b2:	bf00      	nop
   154b4:	000310be 	.word	0x000310be
   154b8:	00031096 	.word	0x00031096
   154bc:	000300ff 	.word	0x000300ff
   154c0:	0003072c 	.word	0x0003072c

000154c4 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   154c4:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   154c6:	2100      	movs	r1, #0
{
   154c8:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   154ca:	f7ff ffb1 	bl	15430 <net_if_flag_is_set>
   154ce:	b928      	cbnz	r0, 154dc <net_if_up+0x18>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   154d0:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   154d2:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   154d4:	7e9b      	ldrb	r3, [r3, #26]
   154d6:	b11b      	cbz	r3, 154e0 <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   154d8:	f7ff ffce 	bl	15478 <net_if_flag_set.constprop.0>
		return 0;
   154dc:	2000      	movs	r0, #0
   154de:	e023      	b.n	15528 <net_if_up+0x64>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   154e0:	f017 fc40 	bl	2cd64 <net_if_l2>
   154e4:	b9c0      	cbnz	r0, 15518 <net_if_up+0x54>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   154e6:	682b      	ldr	r3, [r5, #0]
   154e8:	691b      	ldr	r3, [r3, #16]
   154ea:	b973      	cbnz	r3, 1550a <net_if_up+0x46>
   154ec:	490f      	ldr	r1, [pc, #60]	; (1552c <net_if_up+0x68>)
   154ee:	f640 53fd 	movw	r3, #3581	; 0xdfd
   154f2:	4a0f      	ldr	r2, [pc, #60]	; (15530 <net_if_up+0x6c>)
   154f4:	480f      	ldr	r0, [pc, #60]	; (15534 <net_if_up+0x70>)
   154f6:	f016 fdde 	bl	2c0b6 <printk>
   154fa:	480f      	ldr	r0, [pc, #60]	; (15538 <net_if_up+0x74>)
   154fc:	f016 fddb 	bl	2c0b6 <printk>
   15500:	f640 51fd 	movw	r1, #3581	; 0xdfd
   15504:	480a      	ldr	r0, [pc, #40]	; (15530 <net_if_up+0x6c>)
   15506:	f016 fff3 	bl	2c4f0 <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   1550a:	4628      	mov	r0, r5
   1550c:	f7ff ffb4 	bl	15478 <net_if_flag_set.constprop.0>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   15510:	4628      	mov	r0, r5
   15512:	f017 fc2c 	bl	2cd6e <l2_flags_get>
   15516:	e7e1      	b.n	154dc <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   15518:	6883      	ldr	r3, [r0, #8]
   1551a:	2b00      	cmp	r3, #0
   1551c:	d0e3      	beq.n	154e6 <net_if_up+0x22>
	status = net_if_l2(iface)->enable(iface, true);
   1551e:	2101      	movs	r1, #1
   15520:	4628      	mov	r0, r5
   15522:	4798      	blx	r3
	if (status < 0) {
   15524:	2800      	cmp	r0, #0
   15526:	dade      	bge.n	154e6 <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   15528:	bd38      	pop	{r3, r4, r5, pc}
   1552a:	bf00      	nop
   1552c:	00031108 	.word	0x00031108
   15530:	000310c4 	.word	0x000310c4
   15534:	000300ff 	.word	0x000300ff
   15538:	0003072c 	.word	0x0003072c

0001553c <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   1553c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	NET_DBG("");

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   15540:	4e12      	ldr	r6, [pc, #72]	; (1558c <net_if_init+0x50>)
   15542:	4c13      	ldr	r4, [pc, #76]	; (15590 <net_if_init+0x54>)
   15544:	46b0      	mov	r8, r6
   15546:	4f13      	ldr	r7, [pc, #76]	; (15594 <net_if_init+0x58>)
   15548:	42b4      	cmp	r4, r6
   1554a:	4625      	mov	r5, r4
   1554c:	d90e      	bls.n	1556c <net_if_init+0x30>
   1554e:	4912      	ldr	r1, [pc, #72]	; (15598 <net_if_init+0x5c>)
   15550:	f640 63dc 	movw	r3, #3804	; 0xedc
   15554:	463a      	mov	r2, r7
   15556:	4811      	ldr	r0, [pc, #68]	; (1559c <net_if_init+0x60>)
   15558:	f016 fdad 	bl	2c0b6 <printk>
   1555c:	4810      	ldr	r0, [pc, #64]	; (155a0 <net_if_init+0x64>)
   1555e:	f016 fdaa 	bl	2c0b6 <printk>
   15562:	f640 61dc 	movw	r1, #3804	; 0xedc
   15566:	4638      	mov	r0, r7
   15568:	f016 ffc2 	bl	2c4f0 <assert_post_action>
   1556c:	4544      	cmp	r4, r8
   1556e:	d301      	bcc.n	15574 <net_if_init+0x38>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   15570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return iface->if_dev->dev;
   15574:	682b      	ldr	r3, [r5, #0]
   15576:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   15578:	681b      	ldr	r3, [r3, #0]
   1557a:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   1557c:	2b00      	cmp	r3, #0
   1557e:	d0e3      	beq.n	15548 <net_if_init+0xc>
   15580:	681b      	ldr	r3, [r3, #0]
   15582:	2b00      	cmp	r3, #0
   15584:	d0e0      	beq.n	15548 <net_if_init+0xc>
	api->init(iface);
   15586:	4628      	mov	r0, r5
   15588:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1558a:	e7dd      	b.n	15548 <net_if_init+0xc>
   1558c:	20020cb8 	.word	0x20020cb8
   15590:	20020cb4 	.word	0x20020cb4
   15594:	000310c4 	.word	0x000310c4
   15598:	000310ee 	.word	0x000310ee
   1559c:	000300ff 	.word	0x000300ff
   155a0:	000307aa 	.word	0x000307aa

000155a4 <net_if_post_init>:

void net_if_post_init(void)
{
   155a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   155a6:	4d11      	ldr	r5, [pc, #68]	; (155ec <net_if_post_init+0x48>)
   155a8:	4c11      	ldr	r4, [pc, #68]	; (155f0 <net_if_post_init+0x4c>)
   155aa:	462f      	mov	r7, r5
   155ac:	4e11      	ldr	r6, [pc, #68]	; (155f4 <net_if_post_init+0x50>)
   155ae:	42ac      	cmp	r4, r5
   155b0:	d90e      	bls.n	155d0 <net_if_post_init+0x2c>
   155b2:	4911      	ldr	r1, [pc, #68]	; (155f8 <net_if_post_init+0x54>)
   155b4:	f640 730b 	movw	r3, #3851	; 0xf0b
   155b8:	4632      	mov	r2, r6
   155ba:	4810      	ldr	r0, [pc, #64]	; (155fc <net_if_post_init+0x58>)
   155bc:	f016 fd7b 	bl	2c0b6 <printk>
   155c0:	480f      	ldr	r0, [pc, #60]	; (15600 <net_if_post_init+0x5c>)
   155c2:	f016 fd78 	bl	2c0b6 <printk>
   155c6:	f640 710b 	movw	r1, #3851	; 0xf0b
   155ca:	4630      	mov	r0, r6
   155cc:	f016 ff90 	bl	2c4f0 <assert_post_action>
   155d0:	42bc      	cmp	r4, r7
   155d2:	d300      	bcc.n	155d6 <net_if_post_init+0x32>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   155d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   155d6:	2103      	movs	r1, #3
   155d8:	4620      	mov	r0, r4
   155da:	f7ff ff29 	bl	15430 <net_if_flag_is_set>
   155de:	b910      	cbnz	r0, 155e6 <net_if_post_init+0x42>
			net_if_up(iface);
   155e0:	4620      	mov	r0, r4
   155e2:	f7ff ff6f 	bl	154c4 <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   155e6:	3404      	adds	r4, #4
   155e8:	e7e1      	b.n	155ae <net_if_post_init+0xa>
   155ea:	bf00      	nop
   155ec:	20020cb8 	.word	0x20020cb8
   155f0:	20020cb4 	.word	0x20020cb4
   155f4:	000310c4 	.word	0x000310c4
   155f8:	000310ee 	.word	0x000310ee
   155fc:	000300ff 	.word	0x000300ff
   15600:	000307aa 	.word	0x000307aa

00015604 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   15604:	2300      	movs	r3, #0
{
   15606:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   1560a:	2802      	cmp	r0, #2
{
   1560c:	b089      	sub	sp, #36	; 0x24
   1560e:	4607      	mov	r7, r0
   15610:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   15612:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   15616:	9104      	str	r1, [sp, #16]
	if (family == AF_INET6) {
   15618:	d13e      	bne.n	15698 <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   1561a:	a806      	add	r0, sp, #24
   1561c:	9105      	str	r1, [sp, #20]
   1561e:	4601      	mov	r1, r0
{
   15620:	461a      	mov	r2, r3
   15622:	e006      	b.n	15632 <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   15624:	780c      	ldrb	r4, [r1, #0]
   15626:	3201      	adds	r2, #1
   15628:	3401      	adds	r4, #1
   1562a:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   1562c:	b2d4      	uxtb	r4, r2
   1562e:	2c07      	cmp	r4, #7
   15630:	d804      	bhi.n	1563c <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   15632:	9c04      	ldr	r4, [sp, #16]
   15634:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   15638:	2c00      	cmp	r4, #0
   1563a:	d0f3      	beq.n	15624 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   1563c:	3301      	adds	r3, #1
   1563e:	2b08      	cmp	r3, #8
   15640:	f101 0101 	add.w	r1, r1, #1
   15644:	d1ec      	bne.n	15620 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   15646:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   1564a:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   1564e:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   15650:	f810 2b01 	ldrb.w	r2, [r0], #1
   15654:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   15656:	bf88      	it	hi
   15658:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   1565c:	f103 0301 	add.w	r3, r3, #1
   15660:	b2db      	uxtb	r3, r3
				pos = i;
   15662:	bf88      	it	hi
   15664:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   15666:	2b08      	cmp	r3, #8
   15668:	d1f2      	bne.n	15650 <z_impl_net_addr_ntop+0x4c>
		len = 8;
   1566a:	469b      	mov	fp, r3
   1566c:	f1b9 0f01 	cmp.w	r9, #1
   15670:	f04f 033a 	mov.w	r3, #58	; 0x3a
   15674:	bf08      	it	eq
   15676:	f04f 38ff 	moveq.w	r8, #4294967295
   1567a:	9303      	str	r3, [sp, #12]
	bool needcolon = false;
   1567c:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   1567e:	4634      	mov	r4, r6
   15680:	460d      	mov	r5, r1
   15682:	455d      	cmp	r5, fp
   15684:	db17      	blt.n	156b6 <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   15686:	42b4      	cmp	r4, r6
   15688:	d008      	beq.n	1569c <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   1568a:	2300      	movs	r3, #0
   1568c:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   1568e:	bf0c      	ite	eq
   15690:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   15694:	7023      	strbne	r3, [r4, #0]
   15696:	e002      	b.n	1569e <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   15698:	2801      	cmp	r0, #1
   1569a:	d004      	beq.n	156a6 <z_impl_net_addr_ntop+0xa2>
		return NULL;
   1569c:	2600      	movs	r6, #0
	}

	return dst;
}
   1569e:	4630      	mov	r0, r6
   156a0:	b009      	add	sp, #36	; 0x24
   156a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   156a6:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   156a8:	f04f 0b04 	mov.w	fp, #4
	int8_t pos = -1;
   156ac:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   156b0:	4681      	mov	r9, r0
		delim = '.';
   156b2:	9303      	str	r3, [sp, #12]
   156b4:	e7e2      	b.n	1567c <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   156b6:	f1bb 0f04 	cmp.w	fp, #4
   156ba:	d13b      	bne.n	15734 <z_impl_net_addr_ntop+0x130>
			value = (uint32_t)addr->s4_addr[i];
   156bc:	9b04      	ldr	r3, [sp, #16]
   156be:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   156c0:	b94a      	cbnz	r2, 156d6 <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   156c2:	2330      	movs	r3, #48	; 0x30
   156c4:	4620      	mov	r0, r4
   156c6:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   156ca:	9b03      	ldr	r3, [sp, #12]
   156cc:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   156ce:	3501      	adds	r5, #1
   156d0:	4604      	mov	r4, r0
   156d2:	b2ed      	uxtb	r5, r5
   156d4:	e7d5      	b.n	15682 <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   156d6:	f04f 0e09 	mov.w	lr, #9
   156da:	f04f 0a00 	mov.w	sl, #0
   156de:	e9cd 2401 	strd	r2, r4, [sp, #4]
   156e2:	483a      	ldr	r0, [pc, #232]	; (157cc <z_impl_net_addr_ntop+0x1c8>)
		value = value % divisor;
   156e4:	f8dd c004 	ldr.w	ip, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   156e8:	45f2      	cmp	sl, lr
		value = value % divisor;
   156ea:	fbbc f2f0 	udiv	r2, ip, r0
   156ee:	fb00 c212 	mls	r2, r0, r2, ip
   156f2:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   156f4:	dc01      	bgt.n	156fa <z_impl_net_addr_ntop+0xf6>
   156f6:	4584      	cmp	ip, r0
   156f8:	d308      	bcc.n	1570c <z_impl_net_addr_ntop+0x108>
		temp = value / divisor;
   156fa:	fbbc fcf0 	udiv	ip, ip, r0
			*buf++ = (char) (temp + '0');
   156fe:	46f2      	mov	sl, lr
   15700:	9b02      	ldr	r3, [sp, #8]
   15702:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   15706:	f803 cb01 	strb.w	ip, [r3], #1
   1570a:	9302      	str	r3, [sp, #8]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   1570c:	220a      	movs	r2, #10
   1570e:	f10e 3eff 	add.w	lr, lr, #4294967295
   15712:	f1be 3fff 	cmp.w	lr, #4294967295
   15716:	fbb0 f0f2 	udiv	r0, r0, r2
   1571a:	d1e3      	bne.n	156e4 <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   1571c:	f04f 0200 	mov.w	r2, #0
   15720:	9b02      	ldr	r3, [sp, #8]
   15722:	701a      	strb	r2, [r3, #0]
	return buf - start;
   15724:	1b1b      	subs	r3, r3, r4
			ptr += l;
   15726:	b2da      	uxtb	r2, r3
   15728:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   1572c:	1c58      	adds	r0, r3, #1
   1572e:	9b03      	ldr	r3, [sp, #12]
   15730:	54a3      	strb	r3, [r4, r2]
			continue;
   15732:	e7cc      	b.n	156ce <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   15734:	45a8      	cmp	r8, r5
   15736:	d110      	bne.n	1575a <z_impl_net_addr_ntop+0x156>
			if (needcolon || i == 0U) {
   15738:	b911      	cbnz	r1, 15740 <z_impl_net_addr_ntop+0x13c>
   1573a:	f1b8 0f00 	cmp.w	r8, #0
   1573e:	d102      	bne.n	15746 <z_impl_net_addr_ntop+0x142>
				*ptr++ = ':';
   15740:	233a      	movs	r3, #58	; 0x3a
   15742:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   15746:	233a      	movs	r3, #58	; 0x3a
   15748:	4620      	mov	r0, r4
   1574a:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   1574e:	f109 33ff 	add.w	r3, r9, #4294967295
   15752:	441d      	add	r5, r3
			needcolon = false;
   15754:	2100      	movs	r1, #0
			i += longest - 1U;
   15756:	b2ed      	uxtb	r5, r5
			continue;
   15758:	e7b9      	b.n	156ce <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   1575a:	b111      	cbz	r1, 15762 <z_impl_net_addr_ntop+0x15e>
			*ptr++ = ':';
   1575c:	233a      	movs	r3, #58	; 0x3a
   1575e:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   15762:	9b05      	ldr	r3, [sp, #20]
   15764:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   15768:	0219      	lsls	r1, r3, #8
   1576a:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
		if (bh) {
   1576e:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   15772:	b20a      	sxth	r2, r1
		bh = value >> 8;
   15774:	f3c1 2307 	ubfx	r3, r1, #8, #8
		bl = value & 0xff;
   15778:	fa5f fa81 	uxtb.w	sl, r1
		if (bh) {
   1577c:	d016      	beq.n	157ac <z_impl_net_addr_ntop+0x1a8>
			if (bh > 0x0f) {
   1577e:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   15780:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   15782:	d90b      	bls.n	1579c <z_impl_net_addr_ntop+0x198>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   15784:	2300      	movs	r3, #0
   15786:	2261      	movs	r2, #97	; 0x61
   15788:	4620      	mov	r0, r4
   1578a:	f017 fafd 	bl	2cd88 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   1578e:	2301      	movs	r3, #1
   15790:	2261      	movs	r2, #97	; 0x61
   15792:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   15794:	f017 faf8 	bl	2cd88 <net_byte_to_hex>
		needcolon = true;
   15798:	2101      	movs	r1, #1
   1579a:	e798      	b.n	156ce <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   1579c:	b25b      	sxtb	r3, r3
   1579e:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   157a0:	bf94      	ite	ls
   157a2:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   157a4:	3357      	addhi	r3, #87	; 0x57
   157a6:	1c60      	adds	r0, r4, #1
   157a8:	7023      	strb	r3, [r4, #0]
   157aa:	e7f0      	b.n	1578e <z_impl_net_addr_ntop+0x18a>
		} else if (bl > 0x0f) {
   157ac:	f1ba 0f0f 	cmp.w	sl, #15
   157b0:	d903      	bls.n	157ba <z_impl_net_addr_ntop+0x1b6>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   157b2:	2261      	movs	r2, #97	; 0x61
   157b4:	4651      	mov	r1, sl
   157b6:	4620      	mov	r0, r4
   157b8:	e7ec      	b.n	15794 <z_impl_net_addr_ntop+0x190>
			if (bl < 10) {
   157ba:	b253      	sxtb	r3, r2
   157bc:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   157c0:	bf94      	ite	ls
   157c2:	3330      	addls	r3, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   157c4:	3357      	addhi	r3, #87	; 0x57
   157c6:	1c60      	adds	r0, r4, #1
   157c8:	7023      	strb	r3, [r4, #0]
   157ca:	e7e5      	b.n	15798 <z_impl_net_addr_ntop+0x194>
   157cc:	3b9aca00 	.word	0x3b9aca00

000157d0 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   157d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   157d4:	680d      	ldr	r5, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   157d6:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   157da:	4b3b      	ldr	r3, [pc, #236]	; (158c8 <connect_request_encode+0xf8>)
   157dc:	4a3b      	ldr	r2, [pc, #236]	; (158cc <connect_request_encode+0xfc>)
{
   157de:	4607      	mov	r7, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   157e0:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   157e4:	3505      	adds	r5, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   157e6:	2804      	cmp	r0, #4
   157e8:	bf0c      	ite	eq
   157ea:	4610      	moveq	r0, r2
   157ec:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   157ee:	600d      	str	r5, [r1, #0]
{
   157f0:	4688      	mov	r8, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   157f2:	f017 fbb0 	bl	2cf56 <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   157f6:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (err_code != 0) {
   157fa:	4603      	mov	r3, r0
   157fc:	b938      	cbnz	r0, 1580e <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   157fe:	e9d8 2000 	ldrd	r2, r0, [r8]
   15802:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   15804:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   15808:	d104      	bne.n	15814 <connect_request_encode+0x44>
		return -ENOMEM;
   1580a:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   1580e:	4618      	mov	r0, r3
   15810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   15814:	1c50      	adds	r0, r2, #1
   15816:	f8c8 0000 	str.w	r0, [r8]
   1581a:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1581c:	e9d8 6200 	ldrd	r6, r2, [r8]
   15820:	4296      	cmp	r6, r2
   15822:	d0f2      	beq.n	1580a <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   15824:	1c72      	adds	r2, r6, #1
   15826:	f8c8 2000 	str.w	r2, [r8]
   1582a:	7033      	strb	r3, [r6, #0]
	err_code = pack_uint16(client->keepalive, buf);
   1582c:	4641      	mov	r1, r8
   1582e:	f8b7 005c 	ldrh.w	r0, [r7, #92]	; 0x5c
   15832:	f017 fb7e 	bl	2cf32 <pack_uint16>
	if (err_code != 0) {
   15836:	4603      	mov	r3, r0
   15838:	2800      	cmp	r0, #0
   1583a:	d1e8      	bne.n	1580e <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   1583c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   15840:	f017 fb89 	bl	2cf56 <pack_utf8_str>
	if (err_code != 0) {
   15844:	4603      	mov	r3, r0
   15846:	2800      	cmp	r0, #0
   15848:	d1e1      	bne.n	1580e <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   1584a:	6c38      	ldr	r0, [r7, #64]	; 0x40
	uint8_t connect_flags = client->clean_session << 1;
   1584c:	0064      	lsls	r4, r4, #1
	if (client->will_topic != NULL) {
   1584e:	b1d8      	cbz	r0, 15888 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   15850:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   15854:	f044 0404 	orr.w	r4, r4, #4
		connect_flags |= client->will_retain << 5;
   15858:	f003 0301 	and.w	r3, r3, #1
   1585c:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   15860:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   15862:	4641      	mov	r1, r8
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   15864:	00db      	lsls	r3, r3, #3
   15866:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   1586a:	431c      	orrs	r4, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1586c:	f017 fb73 	bl	2cf56 <pack_utf8_str>
		if (err_code != 0) {
   15870:	4603      	mov	r3, r0
   15872:	2800      	cmp	r0, #0
   15874:	d1cb      	bne.n	1580e <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   15876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
			err_code = pack_utf8_str(client->will_message, buf);
   15878:	4641      	mov	r1, r8
		if (client->will_message != NULL) {
   1587a:	b30b      	cbz	r3, 158c0 <connect_request_encode+0xf0>
			err_code = pack_utf8_str(client->will_message, buf);
   1587c:	4618      	mov	r0, r3
   1587e:	f017 fb6a 	bl	2cf56 <pack_utf8_str>
			if (err_code != 0) {
   15882:	4603      	mov	r3, r0
   15884:	2800      	cmp	r0, #0
   15886:	d1c2      	bne.n	1580e <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   15888:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1588a:	b138      	cbz	r0, 1589c <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   1588c:	4641      	mov	r1, r8
   1588e:	f017 fb62 	bl	2cf56 <pack_utf8_str>
		if (err_code != 0) {
   15892:	4603      	mov	r3, r0
   15894:	2800      	cmp	r0, #0
   15896:	d1ba      	bne.n	1580e <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   15898:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	if (client->password != NULL) {
   1589c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1589e:	b138      	cbz	r0, 158b0 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   158a0:	4641      	mov	r1, r8
   158a2:	f017 fb58 	bl	2cf56 <pack_utf8_str>
		if (err_code != 0) {
   158a6:	4603      	mov	r3, r0
   158a8:	2800      	cmp	r0, #0
   158aa:	d1b0      	bne.n	1580e <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   158ac:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	*connect_flags_pos = connect_flags;
   158b0:	7034      	strb	r4, [r6, #0]
	return mqtt_encode_fixed_header(message_type, start, buf);
   158b2:	4642      	mov	r2, r8
   158b4:	4629      	mov	r1, r5
}
   158b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   158ba:	2010      	movs	r0, #16
   158bc:	f017 bb66 	b.w	2cf8c <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   158c0:	f017 fb37 	bl	2cf32 <pack_uint16>
   158c4:	e7dd      	b.n	15882 <connect_request_encode+0xb2>
   158c6:	bf00      	nop
   158c8:	0002ef50 	.word	0x0002ef50
   158cc:	0002ef58 	.word	0x0002ef58

000158d0 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   158d0:	e9d0 2300 	ldrd	r2, r3, [r0]
   158d4:	1a9b      	subs	r3, r3, r2
   158d6:	2b01      	cmp	r3, #1
   158d8:	bf81      	itttt	hi
   158da:	4b05      	ldrhi	r3, [pc, #20]	; (158f0 <disconnect_encode+0x20>)
   158dc:	881b      	ldrhhi	r3, [r3, #0]
   158de:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   158e0:	6803      	ldrhi	r3, [r0, #0]
   158e2:	bf83      	ittte	hi
   158e4:	3302      	addhi	r3, #2
   158e6:	6043      	strhi	r3, [r0, #4]

	return 0;
   158e8:	2000      	movhi	r0, #0
		return -ENOMEM;
   158ea:	f06f 000b 	mvnls.w	r0, #11
}
   158ee:	4770      	bx	lr
   158f0:	00031139 	.word	0x00031139

000158f4 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   158f4:	e9d0 2300 	ldrd	r2, r3, [r0]
   158f8:	1a9b      	subs	r3, r3, r2
   158fa:	2b01      	cmp	r3, #1
   158fc:	bf81      	itttt	hi
   158fe:	4b05      	ldrhi	r3, [pc, #20]	; (15914 <ping_request_encode+0x20>)
   15900:	881b      	ldrhhi	r3, [r3, #0]
   15902:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   15904:	6803      	ldrhi	r3, [r0, #0]
   15906:	bf83      	ittte	hi
   15908:	3302      	addhi	r3, #2
   1590a:	6043      	strhi	r3, [r0, #4]

	return 0;
   1590c:	2000      	movhi	r0, #0
		return -ENOMEM;
   1590e:	f06f 000b 	mvnls.w	r0, #11
}
   15912:	4770      	bx	lr
   15914:	0003113b 	.word	0x0003113b

00015918 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   15918:	2314      	movs	r3, #20
   1591a:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   1591e:	4353      	muls	r3, r2
   15920:	4a01      	ldr	r2, [pc, #4]	; (15928 <mqtt_transport_connect+0x10>)
   15922:	58d3      	ldr	r3, [r2, r3]
   15924:	4718      	bx	r3
   15926:	bf00      	nop
   15928:	0002ef60 	.word	0x0002ef60

0001592c <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   1592c:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1592e:	2514      	movs	r5, #20
   15930:	4c03      	ldr	r4, [pc, #12]	; (15940 <mqtt_transport_write+0x14>)
   15932:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   15936:	fb05 4303 	mla	r3, r5, r3, r4
							  datalen);
}
   1593a:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1593c:	685b      	ldr	r3, [r3, #4]
   1593e:	4718      	bx	r3
   15940:	0002ef60 	.word	0x0002ef60

00015944 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   15944:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   15946:	2414      	movs	r4, #20
   15948:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1594c:	4a03      	ldr	r2, [pc, #12]	; (1595c <mqtt_transport_write_msg+0x18>)
   1594e:	fb04 2303 	mla	r3, r4, r3, r2
}
   15952:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   15956:	689b      	ldr	r3, [r3, #8]
   15958:	4718      	bx	r3
   1595a:	bf00      	nop
   1595c:	0002ef60 	.word	0x0002ef60

00015960 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   15960:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   15962:	2614      	movs	r6, #20
   15964:	4d04      	ldr	r5, [pc, #16]	; (15978 <mqtt_transport_read+0x18>)
   15966:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   1596a:	fb06 5404 	mla	r4, r6, r4, r5
   1596e:	68e4      	ldr	r4, [r4, #12]
   15970:	46a4      	mov	ip, r4
							 shall_block);
}
   15972:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   15974:	4760      	bx	ip
   15976:	bf00      	nop
   15978:	0002ef60 	.word	0x0002ef60

0001597c <mqtt_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   1597c:	68c2      	ldr	r2, [r0, #12]
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   1597e:	b510      	push	{r4, lr}
   15980:	b142      	cbz	r2, 15994 <mqtt_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   15982:	4b0f      	ldr	r3, [pc, #60]	; (159c0 <mqtt_mutex_unlock+0x44>)
   15984:	6882      	ldr	r2, [r0, #8]
   15986:	689b      	ldr	r3, [r3, #8]
   15988:	429a      	cmp	r2, r3
   1598a:	d115      	bne.n	159b8 <mqtt_mutex_unlock+0x3c>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
	(void)ret;
}
   1598c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_unlock(mutex);
   15990:	f00d ba5a 	b.w	22e48 <z_impl_k_mutex_unlock>
		return -EINVAL;
   15994:	f06f 0415 	mvn.w	r4, #21
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   15998:	2343      	movs	r3, #67	; 0x43
   1599a:	4a0a      	ldr	r2, [pc, #40]	; (159c4 <mqtt_mutex_unlock+0x48>)
   1599c:	490a      	ldr	r1, [pc, #40]	; (159c8 <mqtt_mutex_unlock+0x4c>)
   1599e:	480b      	ldr	r0, [pc, #44]	; (159cc <mqtt_mutex_unlock+0x50>)
   159a0:	f016 fb89 	bl	2c0b6 <printk>
   159a4:	4621      	mov	r1, r4
   159a6:	480a      	ldr	r0, [pc, #40]	; (159d0 <mqtt_mutex_unlock+0x54>)
   159a8:	f016 fb85 	bl	2c0b6 <printk>
}
   159ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   159b0:	2143      	movs	r1, #67	; 0x43
   159b2:	4804      	ldr	r0, [pc, #16]	; (159c4 <mqtt_mutex_unlock+0x48>)
   159b4:	f016 bd9c 	b.w	2c4f0 <assert_post_action>
		return -EPERM;
   159b8:	f04f 34ff 	mov.w	r4, #4294967295
   159bc:	e7ec      	b.n	15998 <mqtt_mutex_unlock+0x1c>
   159be:	bf00      	nop
   159c0:	20021dbc 	.word	0x20021dbc
   159c4:	00031149 	.word	0x00031149
   159c8:	0003117a 	.word	0x0003117a
   159cc:	000300ff 	.word	0x000300ff
   159d0:	00031183 	.word	0x00031183

000159d4 <mqtt_mutex_lock>:
{
   159d4:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   159d6:	f04f 32ff 	mov.w	r2, #4294967295
   159da:	f04f 33ff 	mov.w	r3, #4294967295
   159de:	f00d f939 	bl	22c54 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   159e2:	4604      	mov	r4, r0
   159e4:	b178      	cbz	r0, 15a06 <mqtt_mutex_lock+0x32>
   159e6:	2339      	movs	r3, #57	; 0x39
   159e8:	4a07      	ldr	r2, [pc, #28]	; (15a08 <mqtt_mutex_lock+0x34>)
   159ea:	4908      	ldr	r1, [pc, #32]	; (15a0c <mqtt_mutex_lock+0x38>)
   159ec:	4808      	ldr	r0, [pc, #32]	; (15a10 <mqtt_mutex_lock+0x3c>)
   159ee:	f016 fb62 	bl	2c0b6 <printk>
   159f2:	4621      	mov	r1, r4
   159f4:	4807      	ldr	r0, [pc, #28]	; (15a14 <mqtt_mutex_lock+0x40>)
   159f6:	f016 fb5e 	bl	2c0b6 <printk>
}
   159fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   159fe:	2139      	movs	r1, #57	; 0x39
   15a00:	4801      	ldr	r0, [pc, #4]	; (15a08 <mqtt_mutex_lock+0x34>)
   15a02:	f016 bd75 	b.w	2c4f0 <assert_post_action>
}
   15a06:	bd10      	pop	{r4, pc}
   15a08:	00031149 	.word	0x00031149
   15a0c:	0003117a 	.word	0x0003117a
   15a10:	000300ff 	.word	0x000300ff
   15a14:	000311a5 	.word	0x000311a5

00015a18 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   15a18:	b570      	push	{r4, r5, r6, lr}
   15a1a:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   15a1c:	460c      	mov	r4, r1
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   15a1e:	68c5      	ldr	r5, [r0, #12]
   15a20:	b961      	cbnz	r1, 15a3c <gpio_nrfx_manage_callback+0x24>
   15a22:	4922      	ldr	r1, [pc, #136]	; (15aac <gpio_nrfx_manage_callback+0x94>)
   15a24:	2324      	movs	r3, #36	; 0x24
   15a26:	4a22      	ldr	r2, [pc, #136]	; (15ab0 <gpio_nrfx_manage_callback+0x98>)
   15a28:	4822      	ldr	r0, [pc, #136]	; (15ab4 <gpio_nrfx_manage_callback+0x9c>)
   15a2a:	f016 fb44 	bl	2c0b6 <printk>
   15a2e:	4822      	ldr	r0, [pc, #136]	; (15ab8 <gpio_nrfx_manage_callback+0xa0>)
   15a30:	f016 fb41 	bl	2c0b6 <printk>
   15a34:	2124      	movs	r1, #36	; 0x24
   15a36:	481e      	ldr	r0, [pc, #120]	; (15ab0 <gpio_nrfx_manage_callback+0x98>)
   15a38:	f016 fd5a 	bl	2c4f0 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   15a3c:	6863      	ldr	r3, [r4, #4]
   15a3e:	b963      	cbnz	r3, 15a5a <gpio_nrfx_manage_callback+0x42>
   15a40:	491e      	ldr	r1, [pc, #120]	; (15abc <gpio_nrfx_manage_callback+0xa4>)
   15a42:	2325      	movs	r3, #37	; 0x25
   15a44:	4a1a      	ldr	r2, [pc, #104]	; (15ab0 <gpio_nrfx_manage_callback+0x98>)
   15a46:	481b      	ldr	r0, [pc, #108]	; (15ab4 <gpio_nrfx_manage_callback+0x9c>)
   15a48:	f016 fb35 	bl	2c0b6 <printk>
   15a4c:	481c      	ldr	r0, [pc, #112]	; (15ac0 <gpio_nrfx_manage_callback+0xa8>)
   15a4e:	f016 fb32 	bl	2c0b6 <printk>
   15a52:	2125      	movs	r1, #37	; 0x25
   15a54:	4816      	ldr	r0, [pc, #88]	; (15ab0 <gpio_nrfx_manage_callback+0x98>)
   15a56:	f016 fd4b 	bl	2c4f0 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   15a5a:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   15a5c:	b15b      	cbz	r3, 15a76 <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15a5e:	2200      	movs	r2, #0
   15a60:	429c      	cmp	r4, r3
   15a62:	d113      	bne.n	15a8c <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   15a64:	6823      	ldr	r3, [r4, #0]
   15a66:	b95a      	cbnz	r2, 15a80 <gpio_nrfx_manage_callback+0x68>
   15a68:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   15a6a:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   15a6c:	4294      	cmp	r4, r2
   15a6e:	d100      	bne.n	15a72 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   15a70:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   15a72:	2300      	movs	r3, #0
   15a74:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   15a76:	b976      	cbnz	r6, 15a96 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   15a78:	2000      	movs	r0, #0
				     callback, set);
}
   15a7a:	bd70      	pop	{r4, r5, r6, pc}
   15a7c:	460b      	mov	r3, r1
   15a7e:	e7ef      	b.n	15a60 <gpio_nrfx_manage_callback+0x48>
   15a80:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   15a82:	68ab      	ldr	r3, [r5, #8]
   15a84:	429c      	cmp	r4, r3
	list->tail = node;
   15a86:	bf08      	it	eq
   15a88:	60aa      	streq	r2, [r5, #8]
}
   15a8a:	e7f2      	b.n	15a72 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15a8c:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15a8e:	461a      	mov	r2, r3
   15a90:	2900      	cmp	r1, #0
   15a92:	d1f3      	bne.n	15a7c <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   15a94:	b13e      	cbz	r6, 15aa6 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   15a96:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   15a98:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   15a9a:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   15a9c:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   15a9e:	2800      	cmp	r0, #0
   15aa0:	d1ea      	bne.n	15a78 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   15aa2:	60ac      	str	r4, [r5, #8]
}
   15aa4:	e7e9      	b.n	15a7a <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   15aa6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   15aaa:	e7e6      	b.n	15a7a <gpio_nrfx_manage_callback+0x62>
   15aac:	0003178c 	.word	0x0003178c
   15ab0:	000311c5 	.word	0x000311c5
   15ab4:	000300ff 	.word	0x000300ff
   15ab8:	000311f2 	.word	0x000311f2
   15abc:	00031201 	.word	0x00031201
   15ac0:	00031213 	.word	0x00031213

00015ac4 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15ac4:	6803      	ldr	r3, [r0, #0]
{
   15ac6:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   15ac8:	095a      	lsrs	r2, r3, #5
   15aca:	bf0c      	ite	eq
   15acc:	f04f 32ff 	moveq.w	r2, #4294967295
   15ad0:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   15ad2:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
   15ad6:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15ada:	07db      	lsls	r3, r3, #31
{
   15adc:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15ade:	d40b      	bmi.n	15af8 <nrf_gpio_pin_port_decode+0x34>
   15ae0:	490f      	ldr	r1, [pc, #60]	; (15b20 <nrf_gpio_pin_port_decode+0x5c>)
   15ae2:	4810      	ldr	r0, [pc, #64]	; (15b24 <nrf_gpio_pin_port_decode+0x60>)
   15ae4:	f240 231a 	movw	r3, #538	; 0x21a
   15ae8:	4a0f      	ldr	r2, [pc, #60]	; (15b28 <nrf_gpio_pin_port_decode+0x64>)
   15aea:	f016 fae4 	bl	2c0b6 <printk>
   15aee:	f240 211a 	movw	r1, #538	; 0x21a
   15af2:	480d      	ldr	r0, [pc, #52]	; (15b28 <nrf_gpio_pin_port_decode+0x64>)
   15af4:	f016 fcfc 	bl	2c4f0 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   15af8:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   15afa:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15afe:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   15b00:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15b02:	d00b      	beq.n	15b1c <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   15b04:	4909      	ldr	r1, [pc, #36]	; (15b2c <nrf_gpio_pin_port_decode+0x68>)
   15b06:	4807      	ldr	r0, [pc, #28]	; (15b24 <nrf_gpio_pin_port_decode+0x60>)
   15b08:	f240 231f 	movw	r3, #543	; 0x21f
   15b0c:	4a06      	ldr	r2, [pc, #24]	; (15b28 <nrf_gpio_pin_port_decode+0x64>)
   15b0e:	f016 fad2 	bl	2c0b6 <printk>
   15b12:	f240 211f 	movw	r1, #543	; 0x21f
   15b16:	4804      	ldr	r0, [pc, #16]	; (15b28 <nrf_gpio_pin_port_decode+0x64>)
   15b18:	f016 fcea 	bl	2c4f0 <assert_post_action>
}
   15b1c:	4804      	ldr	r0, [pc, #16]	; (15b30 <nrf_gpio_pin_port_decode+0x6c>)
   15b1e:	bd10      	pop	{r4, pc}
   15b20:	0003125d 	.word	0x0003125d
   15b24:	000300ff 	.word	0x000300ff
   15b28:	0003122a 	.word	0x0003122a
   15b2c:	00032bdb 	.word	0x00032bdb
   15b30:	40842500 	.word	0x40842500

00015b34 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   15b34:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   15b36:	4b09      	ldr	r3, [pc, #36]	; (15b5c <gpio_nrfx_init+0x28>)
   15b38:	781a      	ldrb	r2, [r3, #0]
   15b3a:	b96a      	cbnz	r2, 15b58 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   15b3c:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15b3e:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   15b40:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15b42:	2105      	movs	r1, #5
   15b44:	f7fe fdc4 	bl	146d0 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   15b48:	2031      	movs	r0, #49	; 0x31
   15b4a:	f7fe fda3 	bl	14694 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   15b4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   15b52:	4b03      	ldr	r3, [pc, #12]	; (15b60 <gpio_nrfx_init+0x2c>)
   15b54:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   15b58:	2000      	movs	r0, #0
   15b5a:	bd08      	pop	{r3, pc}
   15b5c:	20024717 	.word	0x20024717
   15b60:	40031000 	.word	0x40031000

00015b64 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15b64:	4b2e      	ldr	r3, [pc, #184]	; (15c20 <gpio_nrfx_config+0xbc>)
{
   15b66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15b68:	4c2e      	ldr	r4, [pc, #184]	; (15c24 <gpio_nrfx_config+0xc0>)
   15b6a:	4013      	ands	r3, r2
   15b6c:	42a3      	cmp	r3, r4
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15b6e:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15b70:	d044      	beq.n	15bfc <gpio_nrfx_config+0x98>
   15b72:	d80e      	bhi.n	15b92 <gpio_nrfx_config+0x2e>
   15b74:	2b06      	cmp	r3, #6
   15b76:	d043      	beq.n	15c00 <gpio_nrfx_config+0x9c>
   15b78:	d806      	bhi.n	15b88 <gpio_nrfx_config+0x24>
   15b7a:	2b00      	cmp	r3, #0
   15b7c:	d040      	beq.n	15c00 <gpio_nrfx_config+0x9c>
   15b7e:	2b02      	cmp	r3, #2
   15b80:	d040      	beq.n	15c04 <gpio_nrfx_config+0xa0>
   15b82:	f06f 0015 	mvn.w	r0, #21
   15b86:	e037      	b.n	15bf8 <gpio_nrfx_config+0x94>
   15b88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   15b8c:	d1f9      	bne.n	15b82 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   15b8e:	2401      	movs	r4, #1
   15b90:	e009      	b.n	15ba6 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15b92:	4c25      	ldr	r4, [pc, #148]	; (15c28 <gpio_nrfx_config+0xc4>)
   15b94:	42a3      	cmp	r3, r4
   15b96:	d037      	beq.n	15c08 <gpio_nrfx_config+0xa4>
   15b98:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   15b9c:	d036      	beq.n	15c0c <gpio_nrfx_config+0xa8>
   15b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   15ba2:	d1ee      	bne.n	15b82 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   15ba4:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   15ba6:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   15ba8:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   15bac:	bf4c      	ite	mi
   15bae:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   15bb0:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   15bb4:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   15bb8:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   15bba:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   15bbe:	d507      	bpl.n	15bd0 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   15bc0:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15bc2:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   15bc6:	d523      	bpl.n	15c10 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   15bc8:	2301      	movs	r3, #1
   15bca:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   15bcc:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   15bd0:	7a03      	ldrb	r3, [r0, #8]
   15bd2:	f001 011f 	and.w	r1, r1, #31
   15bd6:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15bda:	a801      	add	r0, sp, #4
   15bdc:	9101      	str	r1, [sp, #4]
   15bde:	f7ff ff71 	bl	15ac4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15be2:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   15be4:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   15be8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   15bec:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15bf0:	3280      	adds	r2, #128	; 0x80
   15bf2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   15bf6:	2000      	movs	r0, #0
}
   15bf8:	b003      	add	sp, #12
   15bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   15bfc:	2407      	movs	r4, #7
   15bfe:	e7d2      	b.n	15ba6 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15c00:	461c      	mov	r4, r3
   15c02:	e7d0      	b.n	15ba6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   15c04:	2404      	movs	r4, #4
   15c06:	e7ce      	b.n	15ba6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   15c08:	2405      	movs	r4, #5
   15c0a:	e7cc      	b.n	15ba6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   15c0c:	2403      	movs	r4, #3
   15c0e:	e7ca      	b.n	15ba6 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   15c10:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   15c12:	bf42      	ittt	mi
   15c14:	2301      	movmi	r3, #1
   15c16:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   15c18:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   15c1c:	e7d8      	b.n	15bd0 <gpio_nrfx_config+0x6c>
   15c1e:	bf00      	nop
   15c20:	00f00006 	.word	0x00f00006
   15c24:	00100006 	.word	0x00100006
   15c28:	00400002 	.word	0x00400002

00015c2c <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15c2c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   15c30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15c34:	4606      	mov	r6, r0
   15c36:	460d      	mov	r5, r1
   15c38:	4690      	mov	r8, r2
   15c3a:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   15c3c:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   15c3e:	f001 071f 	and.w	r7, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15c42:	f040 80bc 	bne.w	15dbe <gpio_nrfx_pin_interrupt_configure+0x192>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15c46:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15c48:	a801      	add	r0, sp, #4
   15c4a:	7a1b      	ldrb	r3, [r3, #8]
   15c4c:	ea47 1343 	orr.w	r3, r7, r3, lsl #5
   15c50:	9301      	str	r3, [sp, #4]
   15c52:	f7ff ff37 	bl	15ac4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   15c56:	9b01      	ldr	r3, [sp, #4]
   15c58:	3380      	adds	r3, #128	; 0x80
   15c5a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15c5e:	07d8      	lsls	r0, r3, #31
   15c60:	f100 80d2 	bmi.w	15e08 <gpio_nrfx_pin_interrupt_configure+0x1dc>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15c64:	2101      	movs	r1, #1
   15c66:	68e3      	ldr	r3, [r4, #12]
   15c68:	40a9      	lsls	r1, r5
   15c6a:	4319      	orrs	r1, r3
   15c6c:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   15c6e:	2101      	movs	r1, #1
   15c70:	6963      	ldr	r3, [r4, #20]
   15c72:	40a9      	lsls	r1, r5
   15c74:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   15c78:	bf0c      	ite	eq
   15c7a:	430b      	orreq	r3, r1
   15c7c:	438b      	bicne	r3, r1
   15c7e:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   15c80:	69a3      	ldr	r3, [r4, #24]
   15c82:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   15c86:	bf0c      	ite	eq
   15c88:	430b      	orreq	r3, r1
   15c8a:	438b      	bicne	r3, r1
   15c8c:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15c8e:	6923      	ldr	r3, [r4, #16]
   15c90:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   15c94:	bf0c      	ite	eq
   15c96:	4319      	orreq	r1, r3
   15c98:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15c9c:	6873      	ldr	r3, [r6, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15c9e:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15ca0:	7a18      	ldrb	r0, [r3, #8]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15ca2:	2300      	movs	r3, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   15ca4:	f8d6 800c 	ldr.w	r8, [r6, #12]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   15ca8:	4e59      	ldr	r6, [pc, #356]	; (15e10 <gpio_nrfx_pin_interrupt_configure+0x1e4>)
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15caa:	ea47 1740 	orr.w	r7, r7, r0, lsl #5
   15cae:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   15cb2:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15cb4:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   15cb8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   15cbc:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   15cc0:	428f      	cmp	r7, r1
   15cc2:	f040 8087 	bne.w	15dd4 <gpio_nrfx_pin_interrupt_configure+0x1a8>
		    && (intenset & BIT(i))) {
   15cc6:	fa22 f103 	lsr.w	r1, r2, r3
   15cca:	07c9      	lsls	r1, r1, #31
   15ccc:	f140 8082 	bpl.w	15dd4 <gpio_nrfx_pin_interrupt_configure+0x1a8>
			(void)atomic_and(mask, ~BIT(i));
   15cd0:	2201      	movs	r2, #1
   15cd2:	409a      	lsls	r2, r3
   15cd4:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15cd6:	494f      	ldr	r1, [pc, #316]	; (15e14 <gpio_nrfx_pin_interrupt_configure+0x1e8>)
   15cd8:	e8d1 4fef 	ldaex	r4, [r1]
   15cdc:	4004      	ands	r4, r0
   15cde:	e8c1 4fec 	stlex	ip, r4, [r1]
   15ce2:	f1bc 0f00 	cmp.w	ip, #0
   15ce6:	d1f7      	bne.n	15cd8 <gpio_nrfx_pin_interrupt_configure+0xac>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   15ce8:	009b      	lsls	r3, r3, #2
   15cea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15cee:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   15cf2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   15cf6:	f021 0101 	bic.w	r1, r1, #1
   15cfa:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   15cfe:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   15d02:	2100      	movs	r1, #0
   15d04:	4638      	mov	r0, r7
   15d06:	f017 fd34 	bl	2d772 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   15d0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   15d0e:	40eb      	lsrs	r3, r5
   15d10:	f013 0301 	ands.w	r3, r3, #1
   15d14:	d051      	beq.n	15dba <gpio_nrfx_pin_interrupt_configure+0x18e>
		if (data->trig_edge & BIT(pin)) {
   15d16:	f8d8 3014 	ldr.w	r3, [r8, #20]
   15d1a:	40eb      	lsrs	r3, r5
   15d1c:	f013 0401 	ands.w	r4, r3, #1
   15d20:	d065      	beq.n	15dee <gpio_nrfx_pin_interrupt_configure+0x1c2>
			if (data->double_edge & BIT(pin)) {
   15d22:	f8d8 3018 	ldr.w	r3, [r8, #24]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   15d26:	2200      	movs	r2, #0
			if (data->double_edge & BIT(pin)) {
   15d28:	40eb      	lsrs	r3, r5
   15d2a:	07db      	lsls	r3, r3, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   15d2c:	bf48      	it	mi
   15d2e:	2503      	movmi	r5, #3
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   15d30:	f04f 0c01 	mov.w	ip, #1
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   15d34:	bf5f      	itttt	pl
   15d36:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
   15d3a:	fa21 f505 	lsrpl.w	r5, r1, r5
   15d3e:	f005 0501 	andpl.w	r5, r5, #1
   15d42:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15d46:	4933      	ldr	r1, [pc, #204]	; (15e14 <gpio_nrfx_pin_interrupt_configure+0x1e8>)
   15d48:	bf58      	it	pl
   15d4a:	b2ed      	uxtbpl	r5, r5
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   15d4c:	fa0c f402 	lsl.w	r4, ip, r2
   15d50:	e8d1 0fef 	ldaex	r0, [r1]
   15d54:	ea40 0304 	orr.w	r3, r0, r4
   15d58:	e8c1 3fee 	stlex	lr, r3, [r1]
   15d5c:	f1be 0f00 	cmp.w	lr, #0
   15d60:	d1f6      	bne.n	15d50 <gpio_nrfx_pin_interrupt_configure+0x124>
		if ((prev & BIT(channel)) == 0) {
   15d62:	40d0      	lsrs	r0, r2
   15d64:	f010 0301 	ands.w	r3, r0, #1
   15d68:	d139      	bne.n	15dde <gpio_nrfx_pin_interrupt_configure+0x1b2>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15d6a:	0091      	lsls	r1, r2, #2
   15d6c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   15d70:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   15d74:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
			nrf_gpiote_event_t evt =
   15d78:	3240      	adds	r2, #64	; 0x40
   15d7a:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   15d7e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   15d82:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15d86:	023f      	lsls	r7, r7, #8
   15d88:	0092      	lsls	r2, r2, #2
   15d8a:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   15d8e:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   15d92:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15d94:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
    return ((uint32_t)p_reg + event);
   15d98:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   15d9c:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15da0:	4307      	orrs	r7, r0
   15da2:	f8c1 7510 	str.w	r7, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15da6:	6013      	str	r3, [r2, #0]
   15da8:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   15daa:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   15dae:	f042 0201 	orr.w	r2, r2, #1
   15db2:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   15db6:	f8c6 4304 	str.w	r4, [r6, #772]	; 0x304
	int res = 0;
   15dba:	4618      	mov	r0, r3
   15dbc:	e014      	b.n	15de8 <gpio_nrfx_pin_interrupt_configure+0x1bc>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15dbe:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   15dc2:	f47f af4f 	bne.w	15c64 <gpio_nrfx_pin_interrupt_configure+0x38>
   15dc6:	2101      	movs	r1, #1
   15dc8:	fa01 f305 	lsl.w	r3, r1, r5
   15dcc:	68e1      	ldr	r1, [r4, #12]
   15dce:	ea21 0103 	bic.w	r1, r1, r3
   15dd2:	e74b      	b.n	15c6c <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15dd4:	3301      	adds	r3, #1
   15dd6:	2b08      	cmp	r3, #8
   15dd8:	f47f af6c 	bne.w	15cb4 <gpio_nrfx_pin_interrupt_configure+0x88>
   15ddc:	e791      	b.n	15d02 <gpio_nrfx_pin_interrupt_configure+0xd6>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   15dde:	3201      	adds	r2, #1
   15de0:	2a08      	cmp	r2, #8
   15de2:	d1b3      	bne.n	15d4c <gpio_nrfx_pin_interrupt_configure+0x120>
	return -ENODEV;
   15de4:	f06f 0012 	mvn.w	r0, #18
}
   15de8:	b003      	add	sp, #12
   15dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15dee:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15df2:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15df4:	40e9      	lsrs	r1, r5
   15df6:	f001 0101 	and.w	r1, r1, #1
   15dfa:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15dfe:	b2c9      	uxtb	r1, r1
   15e00:	f017 fcb7 	bl	2d772 <nrf_gpio_cfg_sense_set>
	int res = 0;
   15e04:	4620      	mov	r0, r4
   15e06:	e7ef      	b.n	15de8 <gpio_nrfx_pin_interrupt_configure+0x1bc>
		return -ENOTSUP;
   15e08:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15e0c:	e7ec      	b.n	15de8 <gpio_nrfx_pin_interrupt_configure+0x1bc>
   15e0e:	bf00      	nop
   15e10:	40031000 	.word	0x40031000
   15e14:	20021614 	.word	0x20021614

00015e18 <gpiote_event_handler>:
{
   15e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15e1c:	4e4b      	ldr	r6, [pc, #300]	; (15f4c <gpiote_event_handler+0x134>)
   15e1e:	6837      	ldr	r7, [r6, #0]
	if (port_event) {
   15e20:	2f00      	cmp	r7, #0
   15e22:	d050      	beq.n	15ec6 <gpiote_event_handler+0xae>
	uint32_t bit = 1U << pin;
   15e24:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
   15e28:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
   15e2c:	4b48      	ldr	r3, [pc, #288]	; (15f50 <gpiote_event_handler+0x138>)
   15e2e:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   15e30:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   15e34:	430a      	orrs	r2, r1
   15e36:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
   15e3a:	4a46      	ldr	r2, [pc, #280]	; (15f54 <gpiote_event_handler+0x13c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   15e3c:	691b      	ldr	r3, [r3, #16]
   15e3e:	6914      	ldr	r4, [r2, #16]
   15e40:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   15e42:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   15e46:	bb7d      	cbnz	r5, 15ea8 <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15e48:	6035      	str	r5, [r6, #0]
   15e4a:	6833      	ldr	r3, [r6, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   15e4c:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   15e4e:	2501      	movs	r5, #1
   15e50:	461e      	mov	r6, r3
    return p_reg->INTENSET & mask;
   15e52:	4841      	ldr	r0, [pc, #260]	; (15f58 <gpiote_event_handler+0x140>)
   15e54:	4941      	ldr	r1, [pc, #260]	; (15f5c <gpiote_event_handler+0x144>)
   15e56:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   15e5a:	fa05 fc03 	lsl.w	ip, r5, r3
   15e5e:	ea1c 0f02 	tst.w	ip, r2
   15e62:	d00f      	beq.n	15e84 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15e64:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   15e68:	b162      	cbz	r2, 15e84 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15e6a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   15e6e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15e72:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15e76:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   15e7a:	fa05 f202 	lsl.w	r2, r5, r2
   15e7e:	4314      	orrs	r4, r2
   15e80:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15e84:	3301      	adds	r3, #1
   15e86:	2b08      	cmp	r3, #8
   15e88:	d1e5      	bne.n	15e56 <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   15e8a:	b9f4      	cbnz	r4, 15eca <gpiote_event_handler+0xb2>
	if (port_event) {
   15e8c:	b157      	cbz	r7, 15ea4 <gpiote_event_handler+0x8c>
	uint32_t bit = 1U << pin;
   15e8e:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   15e90:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   15e92:	4d2f      	ldr	r5, [pc, #188]	; (15f50 <gpiote_event_handler+0x138>)
   15e94:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   15e96:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   15e9a:	430a      	orrs	r2, r1
   15e9c:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   15ea0:	2c00      	cmp	r4, #0
   15ea2:	d141      	bne.n	15f28 <gpiote_event_handler+0x110>
}
   15ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (level_pins & bit) {
   15ea8:	ea15 0f08 	tst.w	r5, r8
   15eac:	d006      	beq.n	15ebc <gpiote_event_handler+0xa4>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   15eae:	2100      	movs	r1, #0
   15eb0:	f009 001f 	and.w	r0, r9, #31
   15eb4:	f017 fc5d 	bl	2d772 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   15eb8:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   15ebc:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   15ec0:	ea4f 0848 	mov.w	r8, r8, lsl #1
   15ec4:	e7bf      	b.n	15e46 <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   15ec6:	463c      	mov	r4, r7
   15ec8:	e7c0      	b.n	15e4c <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15eca:	4b21      	ldr	r3, [pc, #132]	; (15f50 <gpiote_event_handler+0x138>)
   15ecc:	685d      	ldr	r5, [r3, #4]
   15ece:	2d00      	cmp	r5, #0
   15ed0:	d0dc      	beq.n	15e8c <gpiote_event_handler+0x74>
	return node->next;
   15ed2:	682e      	ldr	r6, [r5, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   15ed4:	f8df 9090 	ldr.w	r9, [pc, #144]	; 15f68 <gpiote_event_handler+0x150>
   15ed8:	2e00      	cmp	r6, #0
   15eda:	bf38      	it	cc
   15edc:	2600      	movcc	r6, #0
			__ASSERT(cb->handler, "No callback handler!");
   15ede:	f8df 808c 	ldr.w	r8, [pc, #140]	; 15f6c <gpiote_event_handler+0x154>
   15ee2:	f8df a08c 	ldr.w	sl, [pc, #140]	; 15f70 <gpiote_event_handler+0x158>
		if (cb->pin_mask & pins) {
   15ee6:	68ab      	ldr	r3, [r5, #8]
   15ee8:	421c      	tst	r4, r3
   15eea:	d014      	beq.n	15f16 <gpiote_event_handler+0xfe>
			__ASSERT(cb->handler, "No callback handler!");
   15eec:	686b      	ldr	r3, [r5, #4]
   15eee:	b963      	cbnz	r3, 15f0a <gpiote_event_handler+0xf2>
   15ef0:	4651      	mov	r1, sl
   15ef2:	2345      	movs	r3, #69	; 0x45
   15ef4:	4642      	mov	r2, r8
   15ef6:	481a      	ldr	r0, [pc, #104]	; (15f60 <gpiote_event_handler+0x148>)
   15ef8:	f016 f8dd 	bl	2c0b6 <printk>
   15efc:	4819      	ldr	r0, [pc, #100]	; (15f64 <gpiote_event_handler+0x14c>)
   15efe:	f016 f8da 	bl	2c0b6 <printk>
   15f02:	2145      	movs	r1, #69	; 0x45
   15f04:	4640      	mov	r0, r8
   15f06:	f016 faf3 	bl	2c4f0 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   15f0a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   15f0e:	4629      	mov	r1, r5
   15f10:	4648      	mov	r0, r9
   15f12:	4022      	ands	r2, r4
   15f14:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15f16:	2e00      	cmp	r6, #0
   15f18:	d0b8      	beq.n	15e8c <gpiote_event_handler+0x74>
   15f1a:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15f1c:	4635      	mov	r5, r6
   15f1e:	2b00      	cmp	r3, #0
   15f20:	bf38      	it	cc
   15f22:	2300      	movcc	r3, #0
   15f24:	461e      	mov	r6, r3
   15f26:	e7de      	b.n	15ee6 <gpiote_event_handler+0xce>
		if (level_pins & bit) {
   15f28:	4226      	tst	r6, r4
   15f2a:	d00c      	beq.n	15f46 <gpiote_event_handler+0x12e>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15f2c:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15f2e:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15f32:	40f9      	lsrs	r1, r7
   15f34:	f001 0101 	and.w	r1, r1, #1
   15f38:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15f3c:	b2c9      	uxtb	r1, r1
   15f3e:	f017 fc18 	bl	2d772 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   15f42:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   15f46:	3701      	adds	r7, #1
		bit <<= 1;
   15f48:	0076      	lsls	r6, r6, #1
   15f4a:	e7a9      	b.n	15ea0 <gpiote_event_handler+0x88>
   15f4c:	4003117c 	.word	0x4003117c
   15f50:	200215f8 	.word	0x200215f8
   15f54:	40842500 	.word	0x40842500
   15f58:	40031000 	.word	0x40031000
   15f5c:	40031100 	.word	0x40031100
   15f60:	000300ff 	.word	0x000300ff
   15f64:	00031213 	.word	0x00031213
   15f68:	20020ab0 	.word	0x20020ab0
   15f6c:	000311c5 	.word	0x000311c5
   15f70:	00031280 	.word	0x00031280

00015f74 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   15f74:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   15f76:	794b      	ldrb	r3, [r1, #5]
   15f78:	2b01      	cmp	r3, #1
   15f7a:	d029      	beq.n	15fd0 <uarte_nrfx_configure+0x5c>
   15f7c:	2b03      	cmp	r3, #3
   15f7e:	d124      	bne.n	15fca <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   15f80:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   15f82:	798b      	ldrb	r3, [r1, #6]
   15f84:	2b03      	cmp	r3, #3
   15f86:	d120      	bne.n	15fca <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   15f88:	79cc      	ldrb	r4, [r1, #7]
   15f8a:	b124      	cbz	r4, 15f96 <uarte_nrfx_configure+0x22>
   15f8c:	2c01      	cmp	r4, #1
   15f8e:	d11c      	bne.n	15fca <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   15f90:	6843      	ldr	r3, [r0, #4]
   15f92:	791b      	ldrb	r3, [r3, #4]
   15f94:	b1cb      	cbz	r3, 15fca <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   15f96:	790a      	ldrb	r2, [r1, #4]
   15f98:	b112      	cbz	r2, 15fa0 <uarte_nrfx_configure+0x2c>
   15f9a:	2a02      	cmp	r2, #2
   15f9c:	d115      	bne.n	15fca <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   15f9e:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   15fa0:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   15fa2:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   15fa4:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   15fa8:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   15faa:	d065      	beq.n	16078 <uarte_nrfx_configure+0x104>
   15fac:	d82d      	bhi.n	1600a <uarte_nrfx_configure+0x96>
   15fae:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15fb2:	d064      	beq.n	1607e <uarte_nrfx_configure+0x10a>
   15fb4:	d816      	bhi.n	15fe4 <uarte_nrfx_configure+0x70>
   15fb6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   15fba:	d062      	beq.n	16082 <uarte_nrfx_configure+0x10e>
   15fbc:	d80a      	bhi.n	15fd4 <uarte_nrfx_configure+0x60>
   15fbe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   15fc2:	d061      	beq.n	16088 <uarte_nrfx_configure+0x114>
   15fc4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   15fc8:	d061      	beq.n	1608e <uarte_nrfx_configure+0x11a>
   15fca:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15fce:	e052      	b.n	16076 <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   15fd0:	2600      	movs	r6, #0
   15fd2:	e7d6      	b.n	15f82 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   15fd4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   15fd8:	d05c      	beq.n	16094 <uarte_nrfx_configure+0x120>
   15fda:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   15fde:	d1f4      	bne.n	15fca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   15fe0:	4b37      	ldr	r3, [pc, #220]	; (160c0 <uarte_nrfx_configure+0x14c>)
   15fe2:	e03c      	b.n	1605e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   15fe4:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   15fe8:	d057      	beq.n	1609a <uarte_nrfx_configure+0x126>
   15fea:	d807      	bhi.n	15ffc <uarte_nrfx_configure+0x88>
   15fec:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   15ff0:	d055      	beq.n	1609e <uarte_nrfx_configure+0x12a>
   15ff2:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   15ff6:	d1e8      	bne.n	15fca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   15ff8:	4b32      	ldr	r3, [pc, #200]	; (160c4 <uarte_nrfx_configure+0x150>)
   15ffa:	e030      	b.n	1605e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   15ffc:	f647 2712 	movw	r7, #31250	; 0x7a12
   16000:	42bb      	cmp	r3, r7
   16002:	d1e2      	bne.n	15fca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   16004:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   16008:	e029      	b.n	1605e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1600a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1600e:	d048      	beq.n	160a2 <uarte_nrfx_configure+0x12e>
   16010:	d813      	bhi.n	1603a <uarte_nrfx_configure+0xc6>
   16012:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   16016:	d047      	beq.n	160a8 <uarte_nrfx_configure+0x134>
   16018:	d809      	bhi.n	1602e <uarte_nrfx_configure+0xba>
   1601a:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1601e:	42bb      	cmp	r3, r7
   16020:	d044      	beq.n	160ac <uarte_nrfx_configure+0x138>
   16022:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   16026:	d1d0      	bne.n	15fca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   16028:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1602c:	e017      	b.n	1605e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1602e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   16032:	d1ca      	bne.n	15fca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   16034:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   16038:	e011      	b.n	1605e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1603a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1603e:	d038      	beq.n	160b2 <uarte_nrfx_configure+0x13e>
   16040:	d808      	bhi.n	16054 <uarte_nrfx_configure+0xe0>
   16042:	4f21      	ldr	r7, [pc, #132]	; (160c8 <uarte_nrfx_configure+0x154>)
   16044:	42bb      	cmp	r3, r7
   16046:	d037      	beq.n	160b8 <uarte_nrfx_configure+0x144>
   16048:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1604c:	d1bd      	bne.n	15fca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1604e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   16052:	e004      	b.n	1605e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   16054:	4f1d      	ldr	r7, [pc, #116]	; (160cc <uarte_nrfx_configure+0x158>)
   16056:	42bb      	cmp	r3, r7
   16058:	d1b7      	bne.n	15fca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1605a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1605e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   16062:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   16064:	4334      	orrs	r4, r6
   16066:	4322      	orrs	r2, r4
   16068:	3304      	adds	r3, #4
   1606a:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1606c:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   16070:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   16074:	2000      	movs	r0, #0
}
   16076:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   16078:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1607c:	e7ef      	b.n	1605e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1607e:	4b14      	ldr	r3, [pc, #80]	; (160d0 <uarte_nrfx_configure+0x15c>)
   16080:	e7ed      	b.n	1605e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   16082:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   16086:	e7ea      	b.n	1605e <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   16088:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1608c:	e7e7      	b.n	1605e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1608e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   16092:	e7e4      	b.n	1605e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   16094:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   16098:	e7e1      	b.n	1605e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1609a:	4b0e      	ldr	r3, [pc, #56]	; (160d4 <uarte_nrfx_configure+0x160>)
   1609c:	e7df      	b.n	1605e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1609e:	4b0e      	ldr	r3, [pc, #56]	; (160d8 <uarte_nrfx_configure+0x164>)
   160a0:	e7dd      	b.n	1605e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   160a2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   160a6:	e7da      	b.n	1605e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   160a8:	4b0c      	ldr	r3, [pc, #48]	; (160dc <uarte_nrfx_configure+0x168>)
   160aa:	e7d8      	b.n	1605e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   160ac:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   160b0:	e7d5      	b.n	1605e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   160b2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   160b6:	e7d2      	b.n	1605e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   160b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   160bc:	e7cf      	b.n	1605e <uarte_nrfx_configure+0xea>
   160be:	bf00      	nop
   160c0:	0013b000 	.word	0x0013b000
   160c4:	004ea000 	.word	0x004ea000
   160c8:	0003d090 	.word	0x0003d090
   160cc:	000f4240 	.word	0x000f4240
   160d0:	00275000 	.word	0x00275000
   160d4:	0075c000 	.word	0x0075c000
   160d8:	003af000 	.word	0x003af000
   160dc:	013a9000 	.word	0x013a9000

000160e0 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   160e0:	6803      	ldr	r3, [r0, #0]
{
   160e2:	b510      	push	{r4, lr}
    switch (port)
   160e4:	095a      	lsrs	r2, r3, #5
   160e6:	bf0c      	ite	eq
   160e8:	f04f 32ff 	moveq.w	r2, #4294967295
   160ec:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   160ee:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   160f2:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   160f6:	07db      	lsls	r3, r3, #31
{
   160f8:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   160fa:	d40b      	bmi.n	16114 <nrf_gpio_pin_port_decode+0x34>
   160fc:	490f      	ldr	r1, [pc, #60]	; (1613c <nrf_gpio_pin_port_decode+0x5c>)
   160fe:	4810      	ldr	r0, [pc, #64]	; (16140 <nrf_gpio_pin_port_decode+0x60>)
   16100:	f240 231a 	movw	r3, #538	; 0x21a
   16104:	4a0f      	ldr	r2, [pc, #60]	; (16144 <nrf_gpio_pin_port_decode+0x64>)
   16106:	f015 ffd6 	bl	2c0b6 <printk>
   1610a:	f240 211a 	movw	r1, #538	; 0x21a
   1610e:	480d      	ldr	r0, [pc, #52]	; (16144 <nrf_gpio_pin_port_decode+0x64>)
   16110:	f016 f9ee 	bl	2c4f0 <assert_post_action>
    uint32_t pin_number = *p_pin;
   16114:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   16116:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1611a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1611c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1611e:	d00b      	beq.n	16138 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   16120:	4909      	ldr	r1, [pc, #36]	; (16148 <nrf_gpio_pin_port_decode+0x68>)
   16122:	4807      	ldr	r0, [pc, #28]	; (16140 <nrf_gpio_pin_port_decode+0x60>)
   16124:	f240 231f 	movw	r3, #543	; 0x21f
   16128:	4a06      	ldr	r2, [pc, #24]	; (16144 <nrf_gpio_pin_port_decode+0x64>)
   1612a:	f015 ffc4 	bl	2c0b6 <printk>
   1612e:	f240 211f 	movw	r1, #543	; 0x21f
   16132:	4804      	ldr	r0, [pc, #16]	; (16144 <nrf_gpio_pin_port_decode+0x64>)
   16134:	f016 f9dc 	bl	2c4f0 <assert_post_action>
}
   16138:	4804      	ldr	r0, [pc, #16]	; (1614c <nrf_gpio_pin_port_decode+0x6c>)
   1613a:	bd10      	pop	{r4, pc}
   1613c:	0003125d 	.word	0x0003125d
   16140:	000300ff 	.word	0x000300ff
   16144:	0003122a 	.word	0x0003122a
   16148:	00032bdb 	.word	0x00032bdb
   1614c:	40842500 	.word	0x40842500

00016150 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   16150:	b530      	push	{r4, r5, lr}
   16152:	b085      	sub	sp, #20
   16154:	466c      	mov	r4, sp
   16156:	4605      	mov	r5, r0
   16158:	4b08      	ldr	r3, [pc, #32]	; (1617c <uarte_1_init+0x2c>)
   1615a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1615c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   16160:	2200      	movs	r2, #0
   16162:	2101      	movs	r1, #1
   16164:	2009      	movs	r0, #9
   16166:	f7fe fab3 	bl	146d0 <z_arm_irq_priority_set>
   1616a:	2009      	movs	r0, #9
   1616c:	f7fe fa92 	bl	14694 <arch_irq_enable>
   16170:	4621      	mov	r1, r4
   16172:	4628      	mov	r0, r5
   16174:	f017 fc29 	bl	2d9ca <uarte_instance_init.constprop.0>
   16178:	b005      	add	sp, #20
   1617a:	bd30      	pop	{r4, r5, pc}
   1617c:	0002ed30 	.word	0x0002ed30

00016180 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   16180:	b530      	push	{r4, r5, lr}
   16182:	b085      	sub	sp, #20
   16184:	466c      	mov	r4, sp
   16186:	4605      	mov	r5, r0
   16188:	4b08      	ldr	r3, [pc, #32]	; (161ac <uarte_0_init+0x2c>)
   1618a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1618c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   16190:	2200      	movs	r2, #0
   16192:	2101      	movs	r1, #1
   16194:	2008      	movs	r0, #8
   16196:	f7fe fa9b 	bl	146d0 <z_arm_irq_priority_set>
   1619a:	2008      	movs	r0, #8
   1619c:	f7fe fa7a 	bl	14694 <arch_irq_enable>
   161a0:	4621      	mov	r1, r4
   161a2:	4628      	mov	r0, r5
   161a4:	f017 fc11 	bl	2d9ca <uarte_instance_init.constprop.0>
   161a8:	b005      	add	sp, #20
   161aa:	bd30      	pop	{r4, r5, pc}
   161ac:	0002ed40 	.word	0x0002ed40

000161b0 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   161b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   161b4:	460e      	mov	r6, r1
   161b6:	4614      	mov	r4, r2
   161b8:	b0a6      	sub	sp, #152	; 0x98
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   161ba:	b948      	cbnz	r0, 161d0 <entropy_cc3xx_rng_get_entropy+0x20>
   161bc:	491c      	ldr	r1, [pc, #112]	; (16230 <entropy_cc3xx_rng_get_entropy+0x80>)
   161be:	481d      	ldr	r0, [pc, #116]	; (16234 <entropy_cc3xx_rng_get_entropy+0x84>)
   161c0:	231f      	movs	r3, #31
   161c2:	4a1d      	ldr	r2, [pc, #116]	; (16238 <entropy_cc3xx_rng_get_entropy+0x88>)
   161c4:	f015 ff77 	bl	2c0b6 <printk>
   161c8:	211f      	movs	r1, #31
   161ca:	481b      	ldr	r0, [pc, #108]	; (16238 <entropy_cc3xx_rng_get_entropy+0x88>)
   161cc:	f016 f990 	bl	2c4f0 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   161d0:	b94e      	cbnz	r6, 161e6 <entropy_cc3xx_rng_get_entropy+0x36>
   161d2:	491a      	ldr	r1, [pc, #104]	; (1623c <entropy_cc3xx_rng_get_entropy+0x8c>)
   161d4:	4817      	ldr	r0, [pc, #92]	; (16234 <entropy_cc3xx_rng_get_entropy+0x84>)
   161d6:	2320      	movs	r3, #32
   161d8:	4a17      	ldr	r2, [pc, #92]	; (16238 <entropy_cc3xx_rng_get_entropy+0x88>)
   161da:	f015 ff6c 	bl	2c0b6 <printk>
   161de:	2120      	movs	r1, #32
   161e0:	4815      	ldr	r0, [pc, #84]	; (16238 <entropy_cc3xx_rng_get_entropy+0x88>)
   161e2:	f016 f985 	bl	2c4f0 <assert_post_action>
{
   161e6:	2700      	movs	r7, #0
   161e8:	f06f 0515 	mvn.w	r5, #21
			       */

	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	while (length > 0) {
   161ec:	b91c      	cbnz	r4, 161f6 <entropy_cc3xx_rng_get_entropy+0x46>
		return -EINVAL;
	}
#endif

	return res;
}
   161ee:	4628      	mov	r0, r5
   161f0:	b026      	add	sp, #152	; 0x98
   161f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = spm_request_random_number(spm_buf, sizeof(spm_buf),
   161f6:	2190      	movs	r1, #144	; 0x90
   161f8:	aa01      	add	r2, sp, #4
   161fa:	a802      	add	r0, sp, #8
   161fc:	f016 fd42 	bl	2cc84 <spm_request_random_number>
		if (res < 0) {
   16200:	1e05      	subs	r5, r0, #0
   16202:	dbf4      	blt.n	161ee <entropy_cc3xx_rng_get_entropy+0x3e>
		if (olen != sizeof(spm_buf)) {
   16204:	9b01      	ldr	r3, [sp, #4]
   16206:	2b90      	cmp	r3, #144	; 0x90
   16208:	d10e      	bne.n	16228 <entropy_cc3xx_rng_get_entropy+0x78>
		to_copy = MIN(length, sizeof(spm_buf));
   1620a:	2c90      	cmp	r4, #144	; 0x90
   1620c:	46a0      	mov	r8, r4
   1620e:	bf28      	it	cs
   16210:	f04f 0890 	movcs.w	r8, #144	; 0x90
   16214:	19f0      	adds	r0, r6, r7
   16216:	4642      	mov	r2, r8
   16218:	a902      	add	r1, sp, #8
		length -= to_copy;
   1621a:	eba4 0408 	sub.w	r4, r4, r8
   1621e:	f7f6 fc95 	bl	cb4c <memcpy>
   16222:	b2a4      	uxth	r4, r4
		offset += to_copy;
   16224:	4447      	add	r7, r8
   16226:	e7e1      	b.n	161ec <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
   16228:	f06f 0515 	mvn.w	r5, #21
   1622c:	e7df      	b.n	161ee <entropy_cc3xx_rng_get_entropy+0x3e>
   1622e:	bf00      	nop
   16230:	000312da 	.word	0x000312da
   16234:	000300ff 	.word	0x000300ff
   16238:	000312aa 	.word	0x000312aa
   1623c:	000312ed 	.word	0x000312ed

00016240 <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
   16240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16244:	4605      	mov	r5, r0
    unsigned char *output_pointer = NULL;
    size_t output_length = 0;
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;

    if (output_buffer == NULL)
   16246:	460f      	mov	r7, r1
{
   16248:	b085      	sub	sp, #20
    if (output_buffer == NULL)
   1624a:	b919      	cbnz	r1, 16254 <print_string_ptr+0x14>
    {
        return false;
   1624c:	2000      	movs	r0, #0
    }
    output[output_length + 1] = '\"';
    output[output_length + 2] = '\0';

    return true;
}
   1624e:	b005      	add	sp, #20
   16250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const char quotes[] = "\"\"";
   16254:	4b4e      	ldr	r3, [pc, #312]	; (16390 <print_string_ptr+0x150>)
   16256:	881a      	ldrh	r2, [r3, #0]
   16258:	789b      	ldrb	r3, [r3, #2]
   1625a:	f8ad 200c 	strh.w	r2, [sp, #12]
   1625e:	f88d 300e 	strb.w	r3, [sp, #14]
    if (input == NULL)
   16262:	b340      	cbz	r0, 162b6 <print_string_ptr+0x76>
   16264:	4601      	mov	r1, r0
    size_t escape_characters = 0;
   16266:	f04f 0b00 	mov.w	fp, #0
   1626a:	2001      	movs	r0, #1
   1626c:	4c49      	ldr	r4, [pc, #292]	; (16394 <print_string_ptr+0x154>)
   1626e:	468a      	mov	sl, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   16270:	f811 3b01 	ldrb.w	r3, [r1], #1
   16274:	bb6b      	cbnz	r3, 162d2 <print_string_ptr+0x92>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   16276:	ebaa 0a05 	sub.w	sl, sl, r5
   1627a:	44da      	add	sl, fp
    output = ensure(output_buffer, output_length + sizeof(quotes));
   1627c:	4638      	mov	r0, r7
   1627e:	f10a 0103 	add.w	r1, sl, #3
   16282:	f017 fc49 	bl	2db18 <ensure>
    if (output == NULL)
   16286:	4606      	mov	r6, r0
   16288:	2800      	cmp	r0, #0
   1628a:	d0df      	beq.n	1624c <print_string_ptr+0xc>
    if (escape_characters == 0)
   1628c:	2322      	movs	r3, #34	; 0x22
   1628e:	1c44      	adds	r4, r0, #1
   16290:	f10a 0901 	add.w	r9, sl, #1
   16294:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   16298:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   1629a:	f1bb 0f00 	cmp.w	fp, #0
   1629e:	d12e      	bne.n	162fe <print_string_ptr+0xbe>
   162a0:	4652      	mov	r2, sl
   162a2:	4629      	mov	r1, r5
   162a4:	4620      	mov	r0, r4
   162a6:	f7f6 fc51 	bl	cb4c <memcpy>
        output[output_length + 1] = '\"';
   162aa:	2322      	movs	r3, #34	; 0x22
   162ac:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   162b0:	f806 b008 	strb.w	fp, [r6, r8]
        return true;
   162b4:	e00b      	b.n	162ce <print_string_ptr+0x8e>
        output = ensure(output_buffer, sizeof(quotes));
   162b6:	2103      	movs	r1, #3
   162b8:	4638      	mov	r0, r7
   162ba:	f017 fc2d 	bl	2db18 <ensure>
        if (output == NULL)
   162be:	2800      	cmp	r0, #0
   162c0:	d0c4      	beq.n	1624c <print_string_ptr+0xc>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   162c2:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   162c6:	a903      	add	r1, sp, #12
   162c8:	1ad2      	subs	r2, r2, r3
   162ca:	f010 fb4f 	bl	2696c <strncpy>
    return true;
   162ce:	2001      	movs	r0, #1
   162d0:	e7bd      	b.n	1624e <print_string_ptr+0xe>
        switch (*input_pointer)
   162d2:	2b22      	cmp	r3, #34	; 0x22
   162d4:	d80b      	bhi.n	162ee <print_string_ptr+0xae>
   162d6:	2b07      	cmp	r3, #7
   162d8:	d90c      	bls.n	162f4 <print_string_ptr+0xb4>
   162da:	f1a3 0208 	sub.w	r2, r3, #8
   162de:	b2d2      	uxtb	r2, r2
   162e0:	fa00 f202 	lsl.w	r2, r0, r2
   162e4:	4222      	tst	r2, r4
   162e6:	d005      	beq.n	162f4 <print_string_ptr+0xb4>
                escape_characters++;
   162e8:	f10b 0b01 	add.w	fp, fp, #1
                break;
   162ec:	e7bf      	b.n	1626e <print_string_ptr+0x2e>
        switch (*input_pointer)
   162ee:	2b5c      	cmp	r3, #92	; 0x5c
   162f0:	d1bd      	bne.n	1626e <print_string_ptr+0x2e>
   162f2:	e7f9      	b.n	162e8 <print_string_ptr+0xa8>
                if (*input_pointer < 32)
   162f4:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   162f6:	bf98      	it	ls
   162f8:	f10b 0b05 	addls.w	fp, fp, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   162fc:	e7b7      	b.n	1626e <print_string_ptr+0x2e>
            *output_pointer++ = '\\';
   162fe:	f04f 0a5c 	mov.w	sl, #92	; 0x5c
                    *output_pointer = 't';
   16302:	f04f 0b74 	mov.w	fp, #116	; 0x74
   16306:	1e6b      	subs	r3, r5, #1
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   16308:	4a23      	ldr	r2, [pc, #140]	; (16398 <print_string_ptr+0x158>)
   1630a:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   1630c:	9901      	ldr	r1, [sp, #4]
   1630e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   16312:	9101      	str	r1, [sp, #4]
   16314:	b92b      	cbnz	r3, 16322 <print_string_ptr+0xe2>
    output[output_length + 1] = '\"';
   16316:	2222      	movs	r2, #34	; 0x22
   16318:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   1631c:	f806 3008 	strb.w	r3, [r6, r8]
   16320:	e7d5      	b.n	162ce <print_string_ptr+0x8e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   16322:	2b1f      	cmp	r3, #31
   16324:	d907      	bls.n	16336 <print_string_ptr+0xf6>
   16326:	2b22      	cmp	r3, #34	; 0x22
   16328:	d005      	beq.n	16336 <print_string_ptr+0xf6>
   1632a:	2b5c      	cmp	r3, #92	; 0x5c
   1632c:	d003      	beq.n	16336 <print_string_ptr+0xf6>
            *output_pointer = *input_pointer;
   1632e:	4620      	mov	r0, r4
   16330:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   16332:	1c44      	adds	r4, r0, #1
   16334:	e7ea      	b.n	1630c <print_string_ptr+0xcc>
            *output_pointer++ = '\\';
   16336:	4620      	mov	r0, r4
            switch (*input_pointer)
   16338:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   1633a:	f800 ab01 	strb.w	sl, [r0], #1
            switch (*input_pointer)
   1633e:	781b      	ldrb	r3, [r3, #0]
   16340:	2b0d      	cmp	r3, #13
   16342:	d80a      	bhi.n	1635a <print_string_ptr+0x11a>
   16344:	2b07      	cmp	r3, #7
   16346:	d919      	bls.n	1637c <print_string_ptr+0x13c>
   16348:	f1a3 0108 	sub.w	r1, r3, #8
   1634c:	2905      	cmp	r1, #5
   1634e:	d815      	bhi.n	1637c <print_string_ptr+0x13c>
   16350:	e8df f001 	tbb	[pc, r1]
   16354:	140d1109 	.word	0x140d1109
   16358:	0f0b      	.short	0x0f0b
   1635a:	2b22      	cmp	r3, #34	; 0x22
   1635c:	d001      	beq.n	16362 <print_string_ptr+0x122>
   1635e:	2b5c      	cmp	r3, #92	; 0x5c
   16360:	d10c      	bne.n	1637c <print_string_ptr+0x13c>
                    *output_pointer = 'b';
   16362:	7063      	strb	r3, [r4, #1]
                    break;
   16364:	e7e5      	b.n	16332 <print_string_ptr+0xf2>
                    *output_pointer = 'b';
   16366:	2362      	movs	r3, #98	; 0x62
   16368:	e7fb      	b.n	16362 <print_string_ptr+0x122>
                    *output_pointer = 'f';
   1636a:	2366      	movs	r3, #102	; 0x66
   1636c:	e7f9      	b.n	16362 <print_string_ptr+0x122>
                    *output_pointer = 'n';
   1636e:	236e      	movs	r3, #110	; 0x6e
   16370:	e7f7      	b.n	16362 <print_string_ptr+0x122>
                    *output_pointer = 'r';
   16372:	2372      	movs	r3, #114	; 0x72
   16374:	e7f5      	b.n	16362 <print_string_ptr+0x122>
                    *output_pointer = 't';
   16376:	f884 b001 	strb.w	fp, [r4, #1]
                    break;
   1637a:	e7da      	b.n	16332 <print_string_ptr+0xf2>
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   1637c:	6839      	ldr	r1, [r7, #0]
   1637e:	687d      	ldr	r5, [r7, #4]
   16380:	1a41      	subs	r1, r0, r1
   16382:	1a69      	subs	r1, r5, r1
   16384:	f010 f8ea 	bl	2655c <snprintf>
                    output_pointer += 4;
   16388:	4a03      	ldr	r2, [pc, #12]	; (16398 <print_string_ptr+0x158>)
   1638a:	1d60      	adds	r0, r4, #5
                    break;
   1638c:	e7d1      	b.n	16332 <print_string_ptr+0xf2>
   1638e:	bf00      	nop
   16390:	00031317 	.word	0x00031317
   16394:	04000037 	.word	0x04000037
   16398:	00031311 	.word	0x00031311

0001639c <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
   1639c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   163a0:	460c      	mov	r4, r1
    unsigned char *output = NULL;

    if ((item == NULL) || (output_buffer == NULL))
   163a2:	4606      	mov	r6, r0
{
   163a4:	b08f      	sub	sp, #60	; 0x3c
    if ((item == NULL) || (output_buffer == NULL))
   163a6:	b908      	cbnz	r0, 163ac <print_value+0x10>
    {
        return false;
    }

    switch ((item->type) & 0xFF)
   163a8:	2500      	movs	r5, #0
   163aa:	e06f      	b.n	1648c <print_value+0xf0>
    if ((item == NULL) || (output_buffer == NULL))
   163ac:	2900      	cmp	r1, #0
   163ae:	d0fb      	beq.n	163a8 <print_value+0xc>
    switch ((item->type) & 0xFF)
   163b0:	7b05      	ldrb	r5, [r0, #12]
   163b2:	2d10      	cmp	r5, #16
   163b4:	f000 80cc 	beq.w	16550 <print_value+0x1b4>
   163b8:	dc18      	bgt.n	163ec <print_value+0x50>
   163ba:	1e6b      	subs	r3, r5, #1
   163bc:	2b07      	cmp	r3, #7
   163be:	d8f3      	bhi.n	163a8 <print_value+0xc>
   163c0:	2b07      	cmp	r3, #7
   163c2:	d8f1      	bhi.n	163a8 <print_value+0xc>
   163c4:	a201      	add	r2, pc, #4	; (adr r2, 163cc <print_value+0x30>)
   163c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   163ca:	bf00      	nop
   163cc:	00016469 	.word	0x00016469
   163d0:	00016495 	.word	0x00016495
   163d4:	000163a9 	.word	0x000163a9
   163d8:	00016441 	.word	0x00016441
   163dc:	000163a9 	.word	0x000163a9
   163e0:	000163a9 	.word	0x000163a9
   163e4:	000163a9 	.word	0x000163a9
   163e8:	00016499 	.word	0x00016499
   163ec:	2d40      	cmp	r5, #64	; 0x40
   163ee:	f000 80dd 	beq.w	165ac <print_value+0x210>
   163f2:	2d80      	cmp	r5, #128	; 0x80
   163f4:	f000 8098 	beq.w	16528 <print_value+0x18c>
   163f8:	2d20      	cmp	r5, #32
   163fa:	d1d5      	bne.n	163a8 <print_value+0xc>

        case cJSON_String:
            return print_string(item, output_buffer);

        case cJSON_Array:
            return print_array(item, output_buffer);
   163fc:	6886      	ldr	r6, [r0, #8]
        return false;
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
   163fe:	2101      	movs	r1, #1
   16400:	4620      	mov	r0, r4
   16402:	f017 fb89 	bl	2db18 <ensure>
    if (output_pointer == NULL)
   16406:	2800      	cmp	r0, #0
   16408:	d0ce      	beq.n	163a8 <print_value+0xc>
    {
        return false;
    }

    *output_pointer = '[';
   1640a:	235b      	movs	r3, #91	; 0x5b
            output_pointer = ensure(output_buffer, length + 1);
            if (output_pointer == NULL)
            {
                return false;
            }
            *output_pointer++ = ',';
   1640c:	272c      	movs	r7, #44	; 0x2c
            if(output_buffer->format)
            {
                *output_pointer++ = ' ';
            }
            *output_pointer = '\0';
   1640e:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   16412:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   16414:	68a3      	ldr	r3, [r4, #8]
   16416:	3301      	adds	r3, #1
   16418:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   1641a:	68e3      	ldr	r3, [r4, #12]
   1641c:	3301      	adds	r3, #1
   1641e:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   16420:	2e00      	cmp	r6, #0
   16422:	f040 809a 	bne.w	1655a <print_value+0x1be>
            output_buffer->offset += length;
        }
        current_element = current_element->next;
    }

    output_pointer = ensure(output_buffer, 2);
   16426:	2102      	movs	r1, #2
   16428:	4620      	mov	r0, r4
   1642a:	f017 fb75 	bl	2db18 <ensure>
    if (output_pointer == NULL)
   1642e:	2800      	cmp	r0, #0
   16430:	d0ba      	beq.n	163a8 <print_value+0xc>
    {
        return false;
    }
    *output_pointer++ = ']';
   16432:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   16434:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   16436:	7003      	strb	r3, [r0, #0]
            *output_pointer++ = '\t';
        }
    }
    *output_pointer++ = '}';
    *output_pointer = '\0';
    output_buffer->depth--;
   16438:	68e3      	ldr	r3, [r4, #12]
   1643a:	3b01      	subs	r3, #1
   1643c:	60e3      	str	r3, [r4, #12]
   1643e:	e011      	b.n	16464 <print_value+0xc8>
            const char buff[] = "null";
   16440:	4ba8      	ldr	r3, [pc, #672]	; (166e4 <print_value+0x348>)
            const char buff[] = "true";
   16442:	6818      	ldr	r0, [r3, #0]
   16444:	791b      	ldrb	r3, [r3, #4]
   16446:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   16448:	2105      	movs	r1, #5
   1644a:	4620      	mov	r0, r4
            const char buff[] = "true";
   1644c:	f88d 3020 	strb.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   16450:	f017 fb62 	bl	2db18 <ensure>
            if (output == NULL)
   16454:	4605      	mov	r5, r0
   16456:	b1c8      	cbz	r0, 1648c <print_value+0xf0>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   16458:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1645c:	a907      	add	r1, sp, #28
   1645e:	1ad2      	subs	r2, r2, r3
   16460:	f010 fa84 	bl	2696c <strncpy>

    return true;
   16464:	2501      	movs	r5, #1
   16466:	e011      	b.n	1648c <print_value+0xf0>
            const char buff[] = "false";
   16468:	4b9f      	ldr	r3, [pc, #636]	; (166e8 <print_value+0x34c>)
            output = ensure(output_buffer, sizeof(buff));
   1646a:	2106      	movs	r1, #6
            const char buff[] = "false";
   1646c:	6818      	ldr	r0, [r3, #0]
   1646e:	889b      	ldrh	r3, [r3, #4]
   16470:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   16472:	4620      	mov	r0, r4
            const char buff[] = "false";
   16474:	f8ad 3020 	strh.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   16478:	f017 fb4e 	bl	2db18 <ensure>
            if (output == NULL)
   1647c:	2800      	cmp	r0, #0
   1647e:	d093      	beq.n	163a8 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   16480:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   16484:	a907      	add	r1, sp, #28
   16486:	1ad2      	subs	r2, r2, r3
   16488:	f010 fa70 	bl	2696c <strncpy>
}
   1648c:	4628      	mov	r0, r5
   1648e:	b00f      	add	sp, #60	; 0x3c
   16490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            const char buff[] = "true";
   16494:	4b95      	ldr	r3, [pc, #596]	; (166ec <print_value+0x350>)
   16496:	e7d4      	b.n	16442 <print_value+0xa6>
    if ((d * 0) != 0)
   16498:	2200      	movs	r2, #0
    double d = item->valuedouble;
   1649a:	e9d0 8906 	ldrd	r8, r9, [r0, #24]
    if ((d * 0) != 0)
   1649e:	2300      	movs	r3, #0
   164a0:	4640      	mov	r0, r8
   164a2:	4649      	mov	r1, r9
   164a4:	f7f6 fca6 	bl	cdf4 <__aeabi_dmul>
   164a8:	2200      	movs	r2, #0
   164aa:	2300      	movs	r3, #0
   164ac:	f7f6 f8da 	bl	c664 <__aeabi_dcmpeq>
   164b0:	ae07      	add	r6, sp, #28
   164b2:	b9b8      	cbnz	r0, 164e4 <print_value+0x148>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   164b4:	4630      	mov	r0, r6
   164b6:	498b      	ldr	r1, [pc, #556]	; (166e4 <print_value+0x348>)
   164b8:	f010 f992 	bl	267e0 <strcpy>
   164bc:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   164be:	4620      	mov	r0, r4
   164c0:	1c69      	adds	r1, r5, #1
   164c2:	f017 fb29 	bl	2db18 <ensure>
    if (output_pointer == NULL)
   164c6:	2800      	cmp	r0, #0
   164c8:	f43f af6e 	beq.w	163a8 <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   164cc:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   164ce:	5cf2      	ldrb	r2, [r6, r3]
        output_pointer[i] = number_buffer[i];
   164d0:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   164d2:	3301      	adds	r3, #1
   164d4:	429d      	cmp	r5, r3
   164d6:	d1fa      	bne.n	164ce <print_value+0x132>
    output_pointer[i] = '\0';
   164d8:	2300      	movs	r3, #0
   164da:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   164dc:	68a0      	ldr	r0, [r4, #8]
   164de:	4428      	add	r0, r5
   164e0:	60a0      	str	r0, [r4, #8]
    return true;
   164e2:	e7bf      	b.n	16464 <print_value+0xc8>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   164e4:	211a      	movs	r1, #26
   164e6:	4a82      	ldr	r2, [pc, #520]	; (166f0 <print_value+0x354>)
   164e8:	4630      	mov	r0, r6
   164ea:	e9cd 8900 	strd	r8, r9, [sp]
   164ee:	f010 f835 	bl	2655c <snprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   164f2:	4980      	ldr	r1, [pc, #512]	; (166f4 <print_value+0x358>)
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   164f4:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   164f6:	aa04      	add	r2, sp, #16
   164f8:	4630      	mov	r0, r6
   164fa:	f010 f893 	bl	26624 <sscanf>
   164fe:	2801      	cmp	r0, #1
   16500:	d106      	bne.n	16510 <print_value+0x174>
   16502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   16506:	4640      	mov	r0, r8
   16508:	4649      	mov	r1, r9
   1650a:	f7f6 f8ab 	bl	c664 <__aeabi_dcmpeq>
   1650e:	b938      	cbnz	r0, 16520 <print_value+0x184>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   16510:	211a      	movs	r1, #26
   16512:	4630      	mov	r0, r6
   16514:	e9cd 8900 	strd	r8, r9, [sp]
   16518:	4a77      	ldr	r2, [pc, #476]	; (166f8 <print_value+0x35c>)
   1651a:	f010 f81f 	bl	2655c <snprintf>
   1651e:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   16520:	2d19      	cmp	r5, #25
   16522:	f73f af41 	bgt.w	163a8 <print_value+0xc>
   16526:	e7ca      	b.n	164be <print_value+0x122>
            if (item->valuestring == NULL)
   16528:	6900      	ldr	r0, [r0, #16]
   1652a:	2800      	cmp	r0, #0
   1652c:	f43f af3c 	beq.w	163a8 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   16530:	f010 f9b4 	bl	2689c <strlen>
   16534:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   16536:	4611      	mov	r1, r2
   16538:	4620      	mov	r0, r4
   1653a:	9203      	str	r2, [sp, #12]
   1653c:	f017 faec 	bl	2db18 <ensure>
            if (output == NULL)
   16540:	2800      	cmp	r0, #0
   16542:	f43f af31 	beq.w	163a8 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16546:	9a03      	ldr	r2, [sp, #12]
   16548:	6931      	ldr	r1, [r6, #16]
   1654a:	f7f6 faff 	bl	cb4c <memcpy>
   1654e:	e789      	b.n	16464 <print_value+0xc8>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   16550:	6900      	ldr	r0, [r0, #16]
   16552:	f7ff fe75 	bl	16240 <print_string_ptr>
   16556:	4605      	mov	r5, r0
            return print_string(item, output_buffer);
   16558:	e798      	b.n	1648c <print_value+0xf0>
        if (!print_value(current_element, output_buffer))
   1655a:	4621      	mov	r1, r4
   1655c:	4630      	mov	r0, r6
   1655e:	f7ff ff1d 	bl	1639c <print_value>
   16562:	2800      	cmp	r0, #0
   16564:	f43f af20 	beq.w	163a8 <print_value+0xc>
        update_offset(output_buffer);
   16568:	4620      	mov	r0, r4
   1656a:	f017 faac 	bl	2dac6 <update_offset>
        if (current_element->next)
   1656e:	6833      	ldr	r3, [r6, #0]
   16570:	b1bb      	cbz	r3, 165a2 <print_value+0x206>
            length = (size_t) (output_buffer->format ? 2 : 1);
   16572:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   16574:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   16576:	2b00      	cmp	r3, #0
   16578:	bf14      	ite	ne
   1657a:	f04f 0902 	movne.w	r9, #2
   1657e:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   16582:	f109 0101 	add.w	r1, r9, #1
   16586:	f017 fac7 	bl	2db18 <ensure>
            if (output_pointer == NULL)
   1658a:	2800      	cmp	r0, #0
   1658c:	f43f af0c 	beq.w	163a8 <print_value+0xc>
            *output_pointer++ = ',';
   16590:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   16592:	6963      	ldr	r3, [r4, #20]
   16594:	b93b      	cbnz	r3, 165a6 <print_value+0x20a>
            *output_pointer++ = ',';
   16596:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   16598:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   1659c:	68a3      	ldr	r3, [r4, #8]
   1659e:	444b      	add	r3, r9
   165a0:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   165a2:	6836      	ldr	r6, [r6, #0]
   165a4:	e73c      	b.n	16420 <print_value+0x84>
                *output_pointer++ = ' ';
   165a6:	1c83      	adds	r3, r0, #2
   165a8:	7045      	strb	r5, [r0, #1]
   165aa:	e7f5      	b.n	16598 <print_value+0x1fc>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   165ac:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   165ae:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   165b0:	2b00      	cmp	r3, #0
   165b2:	bf14      	ite	ne
   165b4:	2702      	movne	r7, #2
   165b6:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   165b8:	4620      	mov	r0, r4
   165ba:	1c79      	adds	r1, r7, #1
   165bc:	f017 faac 	bl	2db18 <ensure>
    if (output_pointer == NULL)
   165c0:	2800      	cmp	r0, #0
   165c2:	f43f aef1 	beq.w	163a8 <print_value+0xc>
    *output_pointer++ = '{';
   165c6:	237b      	movs	r3, #123	; 0x7b
   165c8:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   165ca:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   165cc:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   165ce:	3201      	adds	r2, #1
   165d0:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   165d2:	b10b      	cbz	r3, 165d8 <print_value+0x23c>
        *output_pointer++ = '\n';
   165d4:	230a      	movs	r3, #10
   165d6:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   165d8:	68a3      	ldr	r3, [r4, #8]
                *output_pointer++ = '\t';
   165da:	2609      	movs	r6, #9
    output_buffer->offset += length;
   165dc:	443b      	add	r3, r7
        *output_pointer++ = ':';
   165de:	273a      	movs	r7, #58	; 0x3a
    output_buffer->offset += length;
   165e0:	60a3      	str	r3, [r4, #8]
    while (current_item)
   165e2:	6963      	ldr	r3, [r4, #20]
   165e4:	b995      	cbnz	r5, 1660c <print_value+0x270>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   165e6:	2b00      	cmp	r3, #0
   165e8:	d06f      	beq.n	166ca <print_value+0x32e>
   165ea:	68e1      	ldr	r1, [r4, #12]
   165ec:	3101      	adds	r1, #1
   165ee:	4620      	mov	r0, r4
   165f0:	f017 fa92 	bl	2db18 <ensure>
    if (output_pointer == NULL)
   165f4:	2800      	cmp	r0, #0
   165f6:	f43f aed7 	beq.w	163a8 <print_value+0xc>
    if (output_buffer->format)
   165fa:	6963      	ldr	r3, [r4, #20]
   165fc:	2b00      	cmp	r3, #0
   165fe:	d16e      	bne.n	166de <print_value+0x342>
   16600:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   16602:	227d      	movs	r2, #125	; 0x7d
   16604:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   16606:	2200      	movs	r2, #0
   16608:	705a      	strb	r2, [r3, #1]
   1660a:	e715      	b.n	16438 <print_value+0x9c>
        if (output_buffer->format)
   1660c:	b173      	cbz	r3, 1662c <print_value+0x290>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   1660e:	4620      	mov	r0, r4
   16610:	68e1      	ldr	r1, [r4, #12]
   16612:	f017 fa81 	bl	2db18 <ensure>
            if (output_pointer == NULL)
   16616:	2800      	cmp	r0, #0
   16618:	f43f aec6 	beq.w	163a8 <print_value+0xc>
   1661c:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   1661e:	68e1      	ldr	r1, [r4, #12]
   16620:	1a13      	subs	r3, r2, r0
   16622:	428b      	cmp	r3, r1
   16624:	d34e      	bcc.n	166c4 <print_value+0x328>
            output_buffer->offset += output_buffer->depth;
   16626:	68a3      	ldr	r3, [r4, #8]
   16628:	440b      	add	r3, r1
   1662a:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   1662c:	4621      	mov	r1, r4
   1662e:	6a28      	ldr	r0, [r5, #32]
   16630:	f7ff fe06 	bl	16240 <print_string_ptr>
   16634:	2800      	cmp	r0, #0
   16636:	f43f aeb7 	beq.w	163a8 <print_value+0xc>
        update_offset(output_buffer);
   1663a:	4620      	mov	r0, r4
   1663c:	f017 fa43 	bl	2dac6 <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   16640:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   16642:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   16644:	2b00      	cmp	r3, #0
   16646:	bf14      	ite	ne
   16648:	f04f 0802 	movne.w	r8, #2
   1664c:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   16650:	4641      	mov	r1, r8
   16652:	f017 fa61 	bl	2db18 <ensure>
        if (output_pointer == NULL)
   16656:	2800      	cmp	r0, #0
   16658:	f43f aea6 	beq.w	163a8 <print_value+0xc>
        *output_pointer++ = ':';
   1665c:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   1665e:	6963      	ldr	r3, [r4, #20]
   16660:	b103      	cbz	r3, 16664 <print_value+0x2c8>
            *output_pointer++ = '\t';
   16662:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   16664:	68a3      	ldr	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   16666:	4621      	mov	r1, r4
        output_buffer->offset += length;
   16668:	4443      	add	r3, r8
        if (!print_value(current_item, output_buffer))
   1666a:	4628      	mov	r0, r5
        output_buffer->offset += length;
   1666c:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   1666e:	f7ff fe95 	bl	1639c <print_value>
   16672:	2800      	cmp	r0, #0
   16674:	f43f ae98 	beq.w	163a8 <print_value+0xc>
        update_offset(output_buffer);
   16678:	4620      	mov	r0, r4
   1667a:	f017 fa24 	bl	2dac6 <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   1667e:	682b      	ldr	r3, [r5, #0]
   16680:	6962      	ldr	r2, [r4, #20]
   16682:	3b00      	subs	r3, #0
   16684:	bf18      	it	ne
   16686:	2301      	movne	r3, #1
   16688:	2a00      	cmp	r2, #0
   1668a:	bf0c      	ite	eq
   1668c:	4698      	moveq	r8, r3
   1668e:	f103 0801 	addne.w	r8, r3, #1
        output_pointer = ensure(output_buffer, length + 1);
   16692:	4620      	mov	r0, r4
   16694:	f108 0101 	add.w	r1, r8, #1
   16698:	f017 fa3e 	bl	2db18 <ensure>
        if (output_pointer == NULL)
   1669c:	2800      	cmp	r0, #0
   1669e:	f43f ae83 	beq.w	163a8 <print_value+0xc>
        if (current_item->next)
   166a2:	682b      	ldr	r3, [r5, #0]
   166a4:	b113      	cbz	r3, 166ac <print_value+0x310>
            *output_pointer++ = ',';
   166a6:	232c      	movs	r3, #44	; 0x2c
   166a8:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   166ac:	6963      	ldr	r3, [r4, #20]
   166ae:	b113      	cbz	r3, 166b6 <print_value+0x31a>
            *output_pointer++ = '\n';
   166b0:	230a      	movs	r3, #10
   166b2:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   166b6:	2300      	movs	r3, #0
   166b8:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   166ba:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   166bc:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   166be:	4443      	add	r3, r8
   166c0:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   166c2:	e78e      	b.n	165e2 <print_value+0x246>
                *output_pointer++ = '\t';
   166c4:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   166c8:	e7a9      	b.n	1661e <print_value+0x282>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   166ca:	2102      	movs	r1, #2
   166cc:	e78f      	b.n	165ee <print_value+0x252>
            *output_pointer++ = '\t';
   166ce:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   166d2:	68e2      	ldr	r2, [r4, #12]
   166d4:	1a19      	subs	r1, r3, r0
   166d6:	3a01      	subs	r2, #1
   166d8:	4291      	cmp	r1, r2
   166da:	d3f8      	bcc.n	166ce <print_value+0x332>
   166dc:	e791      	b.n	16602 <print_value+0x266>
   166de:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   166e0:	2509      	movs	r5, #9
   166e2:	e7f6      	b.n	166d2 <print_value+0x336>
   166e4:	0003131a 	.word	0x0003131a
   166e8:	00031331 	.word	0x00031331
   166ec:	00031337 	.word	0x00031337
   166f0:	0003131f 	.word	0x0003131f
   166f4:	00031326 	.word	0x00031326
   166f8:	0003132a 	.word	0x0003132a

000166fc <cJSON_strdup.isra.0.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   166fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   166fe:	4605      	mov	r5, r0
   16700:	b180      	cbz	r0, 16724 <cJSON_strdup.isra.0.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   16702:	f010 f8cb 	bl	2689c <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   16706:	4b08      	ldr	r3, [pc, #32]	; (16728 <cJSON_strdup.isra.0.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   16708:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   1670a:	4610      	mov	r0, r2
   1670c:	681b      	ldr	r3, [r3, #0]
   1670e:	9201      	str	r2, [sp, #4]
   16710:	4798      	blx	r3
    if (copy == NULL)
   16712:	4604      	mov	r4, r0
   16714:	b118      	cbz	r0, 1671e <cJSON_strdup.isra.0.constprop.0+0x22>
   16716:	4629      	mov	r1, r5
   16718:	9a01      	ldr	r2, [sp, #4]
   1671a:	f7f6 fa17 	bl	cb4c <memcpy>
}
   1671e:	4620      	mov	r0, r4
   16720:	b003      	add	sp, #12
   16722:	bd30      	pop	{r4, r5, pc}
        return NULL;
   16724:	4604      	mov	r4, r0
   16726:	e7fa      	b.n	1671e <cJSON_strdup.isra.0.constprop.0+0x22>
   16728:	2002048c 	.word	0x2002048c

0001672c <add_item_to_object.constprop.0>:
#if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   1672c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1672e:	460d      	mov	r5, r1
   16730:	4614      	mov	r4, r2
{
    char *new_key = NULL;
    int new_type = cJSON_Invalid;

    if ((object == NULL) || (string == NULL) || (item == NULL))
   16732:	4607      	mov	r7, r0
   16734:	b1f0      	cbz	r0, 16774 <add_item_to_object.constprop.0+0x48>
   16736:	b1e9      	cbz	r1, 16774 <add_item_to_object.constprop.0+0x48>
   16738:	b1e2      	cbz	r2, 16774 <add_item_to_object.constprop.0+0x48>
    {
        return false;
    }

    if (constant_key)
   1673a:	b193      	cbz	r3, 16762 <add_item_to_object.constprop.0+0x36>
    {
        new_key = (char*)cast_away_const(string);
        new_type = item->type | cJSON_StringIsConst;
   1673c:	68d6      	ldr	r6, [r2, #12]
   1673e:	f446 7600 	orr.w	r6, r6, #512	; 0x200
        }

        new_type = item->type & ~cJSON_StringIsConst;
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   16742:	68e3      	ldr	r3, [r4, #12]
   16744:	059b      	lsls	r3, r3, #22
   16746:	d404      	bmi.n	16752 <add_item_to_object.constprop.0+0x26>
   16748:	6a20      	ldr	r0, [r4, #32]
   1674a:	b110      	cbz	r0, 16752 <add_item_to_object.constprop.0+0x26>
    {
        hooks->deallocate(item->string);
   1674c:	4b0a      	ldr	r3, [pc, #40]	; (16778 <add_item_to_object.constprop.0+0x4c>)
   1674e:	685b      	ldr	r3, [r3, #4]
   16750:	4798      	blx	r3
    }

    item->string = new_key;
    item->type = new_type;

    return add_item_to_array(object, item);
   16752:	4621      	mov	r1, r4
   16754:	4638      	mov	r0, r7
    item->string = new_key;
   16756:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   16758:	60e6      	str	r6, [r4, #12]
}
   1675a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   1675e:	f017 b9bf 	b.w	2dae0 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   16762:	4608      	mov	r0, r1
   16764:	f7ff ffca 	bl	166fc <cJSON_strdup.isra.0.constprop.0>
        if (new_key == NULL)
   16768:	4605      	mov	r5, r0
   1676a:	b118      	cbz	r0, 16774 <add_item_to_object.constprop.0+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   1676c:	68e6      	ldr	r6, [r4, #12]
   1676e:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   16772:	e7e6      	b.n	16742 <add_item_to_object.constprop.0+0x16>
}
   16774:	2000      	movs	r0, #0
   16776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16778:	2002048c 	.word	0x2002048c

0001677c <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   1677c:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   1677e:	4d24      	ldr	r5, [pc, #144]	; (16810 <print.constprop.0+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   16780:	b08b      	sub	sp, #44	; 0x2c
   16782:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   16784:	2224      	movs	r2, #36	; 0x24
   16786:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   16788:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   1678a:	a801      	add	r0, sp, #4
   1678c:	f00f fc76 	bl	2607c <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   16790:	682b      	ldr	r3, [r5, #0]
   16792:	f44f 7080 	mov.w	r0, #256	; 0x100
   16796:	4798      	blx	r3
    buffer->length = default_buffer_size;
   16798:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   1679c:	4603      	mov	r3, r0
    buffer->format = format;
   1679e:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   167a0:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   167a2:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   167a4:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   167a6:	462f      	mov	r7, r5
   167a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   167ac:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   167b0:	b17b      	cbz	r3, 167d2 <print.constprop.0+0x56>
    if (!print_value(item, buffer))
   167b2:	4620      	mov	r0, r4
   167b4:	a901      	add	r1, sp, #4
   167b6:	f7ff fdf1 	bl	1639c <print_value>
   167ba:	b150      	cbz	r0, 167d2 <print.constprop.0+0x56>
    update_offset(buffer);
   167bc:	a801      	add	r0, sp, #4
   167be:	f017 f982 	bl	2dac6 <update_offset>
    if (hooks->reallocate != NULL)
   167c2:	68ae      	ldr	r6, [r5, #8]
   167c4:	9903      	ldr	r1, [sp, #12]
   167c6:	b15e      	cbz	r6, 167e0 <print.constprop.0+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   167c8:	9801      	ldr	r0, [sp, #4]
   167ca:	3101      	adds	r1, #1
   167cc:	47b0      	blx	r6
        if (printed == NULL) {
   167ce:	4604      	mov	r4, r0
   167d0:	b9d0      	cbnz	r0, 16808 <print.constprop.0+0x8c>
    if (buffer->buffer != NULL)
   167d2:	9c01      	ldr	r4, [sp, #4]
   167d4:	b1c4      	cbz	r4, 16808 <print.constprop.0+0x8c>
        hooks->deallocate(buffer->buffer);
   167d6:	4620      	mov	r0, r4
   167d8:	687b      	ldr	r3, [r7, #4]
   167da:	4798      	blx	r3
    return NULL;
   167dc:	2400      	movs	r4, #0
   167de:	e013      	b.n	16808 <print.constprop.0+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   167e0:	682b      	ldr	r3, [r5, #0]
   167e2:	1c48      	adds	r0, r1, #1
   167e4:	4798      	blx	r3
        if (printed == NULL)
   167e6:	4604      	mov	r4, r0
   167e8:	2800      	cmp	r0, #0
   167ea:	d0f2      	beq.n	167d2 <print.constprop.0+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   167ec:	9a03      	ldr	r2, [sp, #12]
   167ee:	9b02      	ldr	r3, [sp, #8]
   167f0:	3201      	adds	r2, #1
   167f2:	429a      	cmp	r2, r3
   167f4:	bf28      	it	cs
   167f6:	461a      	movcs	r2, r3
   167f8:	9901      	ldr	r1, [sp, #4]
   167fa:	f7f6 f9a7 	bl	cb4c <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   167fe:	9b03      	ldr	r3, [sp, #12]
   16800:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   16802:	686b      	ldr	r3, [r5, #4]
   16804:	9801      	ldr	r0, [sp, #4]
   16806:	4798      	blx	r3
}
   16808:	4620      	mov	r0, r4
   1680a:	b00b      	add	sp, #44	; 0x2c
   1680c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1680e:	bf00      	nop
   16810:	2002048c 	.word	0x2002048c

00016814 <cJSON_Delete>:
{
   16814:	b570      	push	{r4, r5, r6, lr}
   16816:	4604      	mov	r4, r0
   16818:	4d0f      	ldr	r5, [pc, #60]	; (16858 <cJSON_Delete+0x44>)
    while (item != NULL)
   1681a:	b904      	cbnz	r4, 1681e <cJSON_Delete+0xa>
}
   1681c:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   1681e:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   16820:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   16822:	05d9      	lsls	r1, r3, #23
   16824:	d403      	bmi.n	1682e <cJSON_Delete+0x1a>
   16826:	68a0      	ldr	r0, [r4, #8]
   16828:	b968      	cbnz	r0, 16846 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   1682a:	6920      	ldr	r0, [r4, #16]
   1682c:	b988      	cbnz	r0, 16852 <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   1682e:	68e3      	ldr	r3, [r4, #12]
   16830:	059b      	lsls	r3, r3, #22
   16832:	d403      	bmi.n	1683c <cJSON_Delete+0x28>
   16834:	6a20      	ldr	r0, [r4, #32]
   16836:	b108      	cbz	r0, 1683c <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   16838:	686b      	ldr	r3, [r5, #4]
   1683a:	4798      	blx	r3
        global_hooks.deallocate(item);
   1683c:	4620      	mov	r0, r4
   1683e:	686b      	ldr	r3, [r5, #4]
   16840:	4798      	blx	r3
        item = next;
   16842:	4634      	mov	r4, r6
   16844:	e7e9      	b.n	1681a <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   16846:	f7ff ffe5 	bl	16814 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   1684a:	68e3      	ldr	r3, [r4, #12]
   1684c:	05da      	lsls	r2, r3, #23
   1684e:	d5ec      	bpl.n	1682a <cJSON_Delete+0x16>
   16850:	e7ed      	b.n	1682e <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   16852:	686b      	ldr	r3, [r5, #4]
   16854:	4798      	blx	r3
   16856:	e7ea      	b.n	1682e <cJSON_Delete+0x1a>
   16858:	2002048c 	.word	0x2002048c

0001685c <cJSON_CreateString>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   1685c:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1685e:	4b0a      	ldr	r3, [pc, #40]	; (16888 <cJSON_CreateString+0x2c>)
{
   16860:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   16862:	6818      	ldr	r0, [r3, #0]
   16864:	f017 f94c 	bl	2db00 <cJSON_New_Item.isra.0>
    if(item)
   16868:	4604      	mov	r4, r0
   1686a:	b158      	cbz	r0, 16884 <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   1686c:	2310      	movs	r3, #16
   1686e:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   16870:	4628      	mov	r0, r5
   16872:	f7ff ff43 	bl	166fc <cJSON_strdup.isra.0.constprop.0>
   16876:	4605      	mov	r5, r0
   16878:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   1687a:	b918      	cbnz	r0, 16884 <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   1687c:	4620      	mov	r0, r4
   1687e:	f7ff ffc9 	bl	16814 <cJSON_Delete>
            return NULL;
   16882:	462c      	mov	r4, r5
        }
    }

    return item;
}
   16884:	4620      	mov	r0, r4
   16886:	bd38      	pop	{r3, r4, r5, pc}
   16888:	2002048c 	.word	0x2002048c

0001688c <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   1688c:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1688e:	4b04      	ldr	r3, [pc, #16]	; (168a0 <cJSON_CreateObject+0x14>)
   16890:	6818      	ldr	r0, [r3, #0]
   16892:	f017 f935 	bl	2db00 <cJSON_New_Item.isra.0>
    if (item)
   16896:	b108      	cbz	r0, 1689c <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   16898:	2340      	movs	r3, #64	; 0x40
   1689a:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   1689c:	bd08      	pop	{r3, pc}
   1689e:	bf00      	nop
   168a0:	2002048c 	.word	0x2002048c

000168a4 <_bsdlib_init>:
extern void ipc_proxy_irq_handler(void);

static int init_ret;

static int _bsdlib_init(const struct device *unused)
{
   168a4:	b530      	push	{r4, r5, lr}
	if (!first_time_init) {
   168a6:	4d1c      	ldr	r5, [pc, #112]	; (16918 <_bsdlib_init+0x74>)
   168a8:	4c1c      	ldr	r4, [pc, #112]	; (1691c <_bsdlib_init+0x78>)
   168aa:	782b      	ldrb	r3, [r5, #0]
{
   168ac:	b085      	sub	sp, #20
	if (!first_time_init) {
   168ae:	b933      	cbnz	r3, 168be <_bsdlib_init+0x1a>
	list->tail = NULL;
   168b0:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   168b4:	481a      	ldr	r0, [pc, #104]	; (16920 <_bsdlib_init+0x7c>)
   168b6:	f017 fea5 	bl	2e604 <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   168ba:	2301      	movs	r3, #1
   168bc:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   168be:	2200      	movs	r2, #0
   168c0:	202a      	movs	r0, #42	; 0x2a
   168c2:	4611      	mov	r1, r2
   168c4:	f7fd ff04 	bl	146d0 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	const bsd_init_params_t init_params = {
   168c8:	4a16      	ldr	r2, [pc, #88]	; (16924 <_bsdlib_init+0x80>)
   168ca:	ab01      	add	r3, sp, #4
   168cc:	ca07      	ldmia	r2, {r0, r1, r2}
   168ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.trace_on = true,
		.bsd_memory_address = BSD_RESERVED_MEMORY_ADDRESS,
		.bsd_memory_size = BSD_RESERVED_MEMORY_SIZE
	};

	init_ret = bsd_init(&init_params);
   168d2:	4618      	mov	r0, r3
   168d4:	f009 fa5c 	bl	1fd90 <bsd_init>
   168d8:	4b13      	ldr	r3, [pc, #76]	; (16928 <_bsdlib_init+0x84>)
   168da:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   168dc:	f04f 32ff 	mov.w	r2, #4294967295
   168e0:	f04f 33ff 	mov.w	r3, #4294967295
   168e4:	480e      	ldr	r0, [pc, #56]	; (16920 <_bsdlib_init+0x7c>)
   168e6:	f00c f9b5 	bl	22c54 <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   168ea:	6820      	ldr	r0, [r4, #0]
   168ec:	b170      	cbz	r0, 1690c <_bsdlib_init+0x68>
	return node->next;
   168ee:	6804      	ldr	r4, [r0, #0]
   168f0:	2c00      	cmp	r4, #0
   168f2:	bf38      	it	cc
   168f4:	2400      	movcc	r4, #0
	z_impl_k_sem_give(sem);
   168f6:	3004      	adds	r0, #4
   168f8:	f00d fe26 	bl	24548 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   168fc:	b134      	cbz	r4, 1690c <_bsdlib_init+0x68>
   168fe:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16900:	4620      	mov	r0, r4
   16902:	2b00      	cmp	r3, #0
   16904:	bf38      	it	cc
   16906:	2300      	movcc	r3, #0
   16908:	461c      	mov	r4, r3
   1690a:	e7f4      	b.n	168f6 <_bsdlib_init+0x52>
	return z_impl_k_mutex_unlock(mutex);
   1690c:	4804      	ldr	r0, [pc, #16]	; (16920 <_bsdlib_init+0x7c>)
   1690e:	f00c fa9b 	bl	22e48 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   16912:	2000      	movs	r0, #0
   16914:	b005      	add	sp, #20
   16916:	bd30      	pop	{r4, r5, pc}
   16918:	20024758 	.word	0x20024758
   1691c:	2002161c 	.word	0x2002161c
   16920:	20021624 	.word	0x20021624
   16924:	0002ed50 	.word	0x0002ed50
   16928:	20021618 	.word	0x20021618

0001692c <bsdlib_shutdown_wait>:

void bsdlib_shutdown_wait(void)
{
   1692c:	b530      	push	{r4, r5, lr}
   1692e:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   16930:	2201      	movs	r2, #1
   16932:	2100      	movs	r1, #0
   16934:	a802      	add	r0, sp, #8
   16936:	f017 fed2 	bl	2e6de <z_impl_k_sem_init>
   1693a:	ad01      	add	r5, sp, #4
	return z_impl_k_mutex_lock(mutex, timeout);
   1693c:	f04f 33ff 	mov.w	r3, #4294967295
   16940:	f04f 32ff 	mov.w	r2, #4294967295
   16944:	481c      	ldr	r0, [pc, #112]	; (169b8 <bsdlib_shutdown_wait+0x8c>)
   16946:	f00c f985 	bl	22c54 <z_impl_k_mutex_lock>
	parent->next = child;
   1694a:	2300      	movs	r3, #0
Z_GENLIST_APPEND(slist, snode)
   1694c:	4c1b      	ldr	r4, [pc, #108]	; (169bc <bsdlib_shutdown_wait+0x90>)
	parent->next = child;
   1694e:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   16950:	6863      	ldr	r3, [r4, #4]
   16952:	bb2b      	cbnz	r3, 169a0 <bsdlib_shutdown_wait+0x74>
	list->head = node;
   16954:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
   16958:	4817      	ldr	r0, [pc, #92]	; (169b8 <bsdlib_shutdown_wait+0x8c>)
   1695a:	f00c fa75 	bl	22e48 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   1695e:	f04f 32ff 	mov.w	r2, #4294967295
   16962:	f04f 33ff 	mov.w	r3, #4294967295
   16966:	a802      	add	r0, sp, #8
   16968:	f00d fe32 	bl	245d0 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   1696c:	f04f 32ff 	mov.w	r2, #4294967295
   16970:	f04f 33ff 	mov.w	r3, #4294967295
   16974:	4810      	ldr	r0, [pc, #64]	; (169b8 <bsdlib_shutdown_wait+0x8c>)
   16976:	f00c f96d 	bl	22c54 <z_impl_k_mutex_lock>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1697a:	2200      	movs	r2, #0
   1697c:	6823      	ldr	r3, [r4, #0]
   1697e:	b153      	cbz	r3, 16996 <bsdlib_shutdown_wait+0x6a>
   16980:	42ab      	cmp	r3, r5
   16982:	d116      	bne.n	169b2 <bsdlib_shutdown_wait+0x86>
Z_GENLIST_REMOVE(slist, snode)
   16984:	9901      	ldr	r1, [sp, #4]
   16986:	b972      	cbnz	r2, 169a6 <bsdlib_shutdown_wait+0x7a>
   16988:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1698a:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1698c:	429a      	cmp	r2, r3
   1698e:	d100      	bne.n	16992 <bsdlib_shutdown_wait+0x66>
	list->tail = node;
   16990:	6061      	str	r1, [r4, #4]
	parent->next = child;
   16992:	2300      	movs	r3, #0
   16994:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   16996:	4808      	ldr	r0, [pc, #32]	; (169b8 <bsdlib_shutdown_wait+0x8c>)
   16998:	f00c fa56 	bl	22e48 <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   1699c:	b009      	add	sp, #36	; 0x24
   1699e:	bd30      	pop	{r4, r5, pc}
   169a0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   169a2:	6065      	str	r5, [r4, #4]
}
   169a4:	e7d8      	b.n	16958 <bsdlib_shutdown_wait+0x2c>
	parent->next = child;
   169a6:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   169a8:	6861      	ldr	r1, [r4, #4]
   169aa:	4299      	cmp	r1, r3
	list->tail = node;
   169ac:	bf08      	it	eq
   169ae:	6062      	streq	r2, [r4, #4]
}
   169b0:	e7ef      	b.n	16992 <bsdlib_shutdown_wait+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   169b2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   169b4:	681b      	ldr	r3, [r3, #0]
   169b6:	e7e2      	b.n	1697e <bsdlib_shutdown_wait+0x52>
   169b8:	20021624 	.word	0x20021624
   169bc:	2002161c 	.word	0x2002161c

000169c0 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   169c0:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   169c2:	4c0d      	ldr	r4, [pc, #52]	; (169f8 <thread_monitor_entry_get+0x38>)
{
   169c4:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   169c6:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   169c8:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   169ca:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   169cc:	4b0b      	ldr	r3, [pc, #44]	; (169fc <thread_monitor_entry_get+0x3c>)
   169ce:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   169d0:	6801      	ldr	r1, [r0, #0]
   169d2:	4291      	cmp	r1, r2
   169d4:	d00e      	beq.n	169f4 <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   169d6:	b151      	cbz	r1, 169ee <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   169d8:	6841      	ldr	r1, [r0, #4]
   169da:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   169dc:	42b1      	cmp	r1, r6
   169de:	bfc4      	itt	gt
   169e0:	4604      	movgt	r4, r0
   169e2:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   169e4:	3d01      	subs	r5, #1
   169e6:	f100 0008 	add.w	r0, r0, #8
   169ea:	d1f1      	bne.n	169d0 <thread_monitor_entry_get+0x10>
   169ec:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   169ee:	3b01      	subs	r3, #1
	new_entry->id = id;
   169f0:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   169f2:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   169f4:	bd70      	pop	{r4, r5, r6, pc}
   169f6:	bf00      	nop
   169f8:	20021644 	.word	0x20021644
   169fc:	20021638 	.word	0x20021638

00016a00 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   16a00:	4668      	mov	r0, sp
   16a02:	f020 0107 	bic.w	r1, r0, #7
   16a06:	468d      	mov	sp, r1
   16a08:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   16a0a:	4b0f      	ldr	r3, [pc, #60]	; (16a48 <rpc_proxy_irq_handler+0x48>)
   16a0c:	e8d3 2fef 	ldaex	r2, [r3]
   16a10:	3201      	adds	r2, #1
   16a12:	e8c3 2fe1 	stlex	r1, r2, [r3]
   16a16:	2900      	cmp	r1, #0
   16a18:	d1f8      	bne.n	16a0c <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   16a1a:	f003 fe1b 	bl	1a654 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   16a1e:	4b0b      	ldr	r3, [pc, #44]	; (16a4c <rpc_proxy_irq_handler+0x4c>)
   16a20:	681c      	ldr	r4, [r3, #0]
   16a22:	2c00      	cmp	r4, #0
   16a24:	bf38      	it	cc
   16a26:	2400      	movcc	r4, #0
   16a28:	b12c      	cbz	r4, 16a36 <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
   16a2a:	1d20      	adds	r0, r4, #4
   16a2c:	f00d fd8c 	bl	24548 <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16a30:	6824      	ldr	r4, [r4, #0]
   16a32:	2c00      	cmp	r4, #0
   16a34:	d1f8      	bne.n	16a28 <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   16a36:	f7fd fe7d 	bl	14734 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   16a3a:	f7fe fa23 	bl	14e84 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   16a3e:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   16a42:	4685      	mov	sp, r0
   16a44:	4770      	bx	lr
   16a46:	bf00      	nop
   16a48:	20021638 	.word	0x20021638
   16a4c:	2002163c 	.word	0x2002163c

00016a50 <bsd_os_timedwait>:
{
   16a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a54:	460c      	mov	r4, r1
   16a56:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   16a58:	f017 fec6 	bl	2e7e8 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   16a5c:	6823      	ldr	r3, [r4, #0]
   16a5e:	4680      	mov	r8, r0
   16a60:	2b00      	cmp	r3, #0
   16a62:	468a      	mov	sl, r1
   16a64:	d103      	bne.n	16a6e <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   16a66:	f00d fbeb 	bl	24240 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   16a6a:	203c      	movs	r0, #60	; 0x3c
   16a6c:	e091      	b.n	16b92 <bsd_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   16a6e:	bfbc      	itt	lt
   16a70:	f04f 33ff 	movlt.w	r3, #4294967295
   16a74:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   16a76:	2201      	movs	r2, #1
   16a78:	2100      	movs	r1, #0
   16a7a:	a802      	add	r0, sp, #8
   16a7c:	f017 fe2f 	bl	2e6de <z_impl_k_sem_init>
   16a80:	ad01      	add	r5, sp, #4
   16a82:	f04f 0320 	mov.w	r3, #32
   16a86:	f3ef 8b11 	mrs	fp, BASEPRI
   16a8a:	f383 8811 	msr	BASEPRI, r3
   16a8e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   16a92:	f00d fd53 	bl	2453c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   16a96:	f7ff ff93 	bl	169c0 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   16a9a:	4947      	ldr	r1, [pc, #284]	; (16bb8 <bsd_os_timedwait+0x168>)
   16a9c:	6843      	ldr	r3, [r0, #4]
   16a9e:	680a      	ldr	r2, [r1, #0]
   16aa0:	4689      	mov	r9, r1
   16aa2:	4293      	cmp	r3, r2
   16aa4:	f04f 0300 	mov.w	r3, #0
   16aa8:	d108      	bne.n	16abc <bsd_os_timedwait+0x6c>
	parent->next = child;
   16aaa:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   16aac:	4b43      	ldr	r3, [pc, #268]	; (16bbc <bsd_os_timedwait+0x16c>)
   16aae:	685a      	ldr	r2, [r3, #4]
   16ab0:	2a00      	cmp	r2, #0
   16ab2:	d171      	bne.n	16b98 <bsd_os_timedwait+0x148>
	list->head = node;
   16ab4:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   16ab8:	2301      	movs	r3, #1
}
   16aba:	e000      	b.n	16abe <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   16abc:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   16abe:	f38b 8811 	msr	BASEPRI, fp
   16ac2:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   16ac6:	2b00      	cmp	r3, #0
   16ac8:	d062      	beq.n	16b90 <bsd_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   16aca:	6823      	ldr	r3, [r4, #0]
   16acc:	1c5a      	adds	r2, r3, #1
   16ace:	d066      	beq.n	16b9e <bsd_os_timedwait+0x14e>
   16ad0:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   16ad4:	f240 30e7 	movw	r0, #999	; 0x3e7
   16ad8:	2100      	movs	r1, #0
   16ada:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   16ade:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16ae2:	2300      	movs	r3, #0
   16ae4:	fbce 010c 	smlal	r0, r1, lr, ip
   16ae8:	f7f5 feb6 	bl	c858 <__aeabi_uldivmod>
   16aec:	4602      	mov	r2, r0
   16aee:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   16af0:	a802      	add	r0, sp, #8
   16af2:	f00d fd6d 	bl	245d0 <z_impl_k_sem_take>
	__asm__ volatile(
   16af6:	f04f 0320 	mov.w	r3, #32
   16afa:	f3ef 8b11 	mrs	fp, BASEPRI
   16afe:	f383 8811 	msr	BASEPRI, r3
   16b02:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16b06:	2000      	movs	r0, #0
   16b08:	4b2c      	ldr	r3, [pc, #176]	; (16bbc <bsd_os_timedwait+0x16c>)
   16b0a:	681a      	ldr	r2, [r3, #0]
   16b0c:	b15a      	cbz	r2, 16b26 <bsd_os_timedwait+0xd6>
   16b0e:	42aa      	cmp	r2, r5
   16b10:	d14f      	bne.n	16bb2 <bsd_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   16b12:	9d01      	ldr	r5, [sp, #4]
   16b14:	2800      	cmp	r0, #0
   16b16:	d146      	bne.n	16ba6 <bsd_os_timedwait+0x156>
   16b18:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   16b1a:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   16b1c:	4291      	cmp	r1, r2
   16b1e:	d100      	bne.n	16b22 <bsd_os_timedwait+0xd2>
	list->tail = node;
   16b20:	605d      	str	r5, [r3, #4]
	parent->next = child;
   16b22:	2300      	movs	r3, #0
   16b24:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   16b26:	f00d fd09 	bl	2453c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   16b2a:	f7ff ff49 	bl	169c0 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   16b2e:	f8d9 3000 	ldr.w	r3, [r9]
   16b32:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   16b34:	f38b 8811 	msr	BASEPRI, fp
   16b38:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   16b3c:	6825      	ldr	r5, [r4, #0]
   16b3e:	1c6b      	adds	r3, r5, #1
   16b40:	d026      	beq.n	16b90 <bsd_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   16b42:	f017 fe51 	bl	2e7e8 <z_impl_k_uptime_ticks>
   16b46:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   16b4a:	468e      	mov	lr, r1
   16b4c:	fba8 890c 	umull	r8, r9, r8, ip
   16b50:	fba0 010c 	umull	r0, r1, r0, ip
   16b54:	fb0c 990a 	mla	r9, ip, sl, r9
   16b58:	fb0c 110e 	mla	r1, ip, lr, r1
   16b5c:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   16b60:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   16b64:	1952      	adds	r2, r2, r5
   16b66:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   16b6a:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   16b6e:	0bc5      	lsrs	r5, r0, #15
   16b70:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   16b74:	1b56      	subs	r6, r2, r5
   16b76:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   16b7a:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   16b7e:	2e00      	cmp	r6, #0
   16b80:	f177 0300 	sbcs.w	r3, r7, #0
   16b84:	bfb8      	it	lt
   16b86:	2600      	movlt	r6, #0
   16b88:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   16b8a:	2e00      	cmp	r6, #0
   16b8c:	f43f af6d 	beq.w	16a6a <bsd_os_timedwait+0x1a>
	return 0;
   16b90:	2000      	movs	r0, #0
}
   16b92:	b009      	add	sp, #36	; 0x24
   16b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b98:	6015      	str	r5, [r2, #0]
	list->tail = node;
   16b9a:	605d      	str	r5, [r3, #4]
   16b9c:	e78c      	b.n	16ab8 <bsd_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   16b9e:	f04f 32ff 	mov.w	r2, #4294967295
   16ba2:	4613      	mov	r3, r2
   16ba4:	e7a4      	b.n	16af0 <bsd_os_timedwait+0xa0>
	parent->next = child;
   16ba6:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   16ba8:	6859      	ldr	r1, [r3, #4]
   16baa:	4291      	cmp	r1, r2
	list->tail = node;
   16bac:	bf08      	it	eq
   16bae:	6058      	streq	r0, [r3, #4]
}
   16bb0:	e7b7      	b.n	16b22 <bsd_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16bb2:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16bb4:	6812      	ldr	r2, [r2, #0]
   16bb6:	e7a9      	b.n	16b0c <bsd_os_timedwait+0xbc>
   16bb8:	20021638 	.word	0x20021638
   16bbc:	2002163c 	.word	0x2002163c

00016bc0 <bsd_os_errno_set>:
	switch (err_code) {
   16bc0:	283c      	cmp	r0, #60	; 0x3c
{
   16bc2:	b510      	push	{r4, lr}
   16bc4:	4604      	mov	r4, r0
	switch (err_code) {
   16bc6:	f300 809f 	bgt.w	16d08 <bsd_os_errno_set+0x148>
   16bca:	2800      	cmp	r0, #0
   16bcc:	dc1e      	bgt.n	16c0c <bsd_os_errno_set+0x4c>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   16bce:	f240 134d 	movw	r3, #333	; 0x14d
   16bd2:	4ab9      	ldr	r2, [pc, #740]	; (16eb8 <bsd_os_errno_set+0x2f8>)
   16bd4:	49b9      	ldr	r1, [pc, #740]	; (16ebc <bsd_os_errno_set+0x2fc>)
   16bd6:	48ba      	ldr	r0, [pc, #744]	; (16ec0 <bsd_os_errno_set+0x300>)
   16bd8:	f015 fa6d 	bl	2c0b6 <printk>
   16bdc:	4621      	mov	r1, r4
   16bde:	48b9      	ldr	r0, [pc, #740]	; (16ec4 <bsd_os_errno_set+0x304>)
   16be0:	f015 fa69 	bl	2c0b6 <printk>
   16be4:	f240 114d 	movw	r1, #333	; 0x14d
   16be8:	48b3      	ldr	r0, [pc, #716]	; (16eb8 <bsd_os_errno_set+0x2f8>)
   16bea:	f015 fc81 	bl	2c4f0 <assert_post_action>
   16bee:	4bb6      	ldr	r3, [pc, #728]	; (16ec8 <bsd_os_errno_set+0x308>)
   16bf0:	4ab6      	ldr	r2, [pc, #728]	; (16ecc <bsd_os_errno_set+0x30c>)
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   16bf2:	4621      	mov	r1, r4
   16bf4:	1ad2      	subs	r2, r2, r3
   16bf6:	08d2      	lsrs	r2, r2, #3
   16bf8:	0192      	lsls	r2, r2, #6
   16bfa:	48b5      	ldr	r0, [pc, #724]	; (16ed0 <bsd_os_errno_set+0x310>)
   16bfc:	f042 0201 	orr.w	r2, r2, #1
   16c00:	f015 fcb5 	bl	2c56e <log_1>
		errno = 0xBAADBAAD;
   16c04:	f016 f8a5 	bl	2cd52 <__errno>
   16c08:	4bb2      	ldr	r3, [pc, #712]	; (16ed4 <bsd_os_errno_set+0x314>)
   16c0a:	e0be      	b.n	16d8a <bsd_os_errno_set+0x1ca>
   16c0c:	1e43      	subs	r3, r0, #1
   16c0e:	2b3b      	cmp	r3, #59	; 0x3b
   16c10:	d8dd      	bhi.n	16bce <bsd_os_errno_set+0xe>
   16c12:	a201      	add	r2, pc, #4	; (adr r2, 16c18 <bsd_os_errno_set+0x58>)
   16c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16c18:	00016d85 	.word	0x00016d85
   16c1c:	00016d8f 	.word	0x00016d8f
   16c20:	00016bcf 	.word	0x00016bcf
   16c24:	00016bcf 	.word	0x00016bcf
   16c28:	00016d97 	.word	0x00016d97
   16c2c:	00016bcf 	.word	0x00016bcf
   16c30:	00016bcf 	.word	0x00016bcf
   16c34:	00016d9f 	.word	0x00016d9f
   16c38:	00016da7 	.word	0x00016da7
   16c3c:	00016bcf 	.word	0x00016bcf
   16c40:	00016bcf 	.word	0x00016bcf
   16c44:	00016daf 	.word	0x00016daf
   16c48:	00016db7 	.word	0x00016db7
   16c4c:	00016dbf 	.word	0x00016dbf
   16c50:	00016bcf 	.word	0x00016bcf
   16c54:	00016bcf 	.word	0x00016bcf
   16c58:	00016bcf 	.word	0x00016bcf
   16c5c:	00016bcf 	.word	0x00016bcf
   16c60:	00016bcf 	.word	0x00016bcf
   16c64:	00016bcf 	.word	0x00016bcf
   16c68:	00016bcf 	.word	0x00016bcf
   16c6c:	00016dc7 	.word	0x00016dc7
   16c70:	00016bcf 	.word	0x00016bcf
   16c74:	00016dcf 	.word	0x00016dcf
   16c78:	00016bcf 	.word	0x00016bcf
   16c7c:	00016bcf 	.word	0x00016bcf
   16c80:	00016bcf 	.word	0x00016bcf
   16c84:	00016bcf 	.word	0x00016bcf
   16c88:	00016bcf 	.word	0x00016bcf
   16c8c:	00016bcf 	.word	0x00016bcf
   16c90:	00016bcf 	.word	0x00016bcf
   16c94:	00016bcf 	.word	0x00016bcf
   16c98:	00016bcf 	.word	0x00016bcf
   16c9c:	00016bcf 	.word	0x00016bcf
   16ca0:	00016dd7 	.word	0x00016dd7
   16ca4:	00016bcf 	.word	0x00016bcf
   16ca8:	00016ddf 	.word	0x00016ddf
   16cac:	00016bcf 	.word	0x00016bcf
   16cb0:	00016bcf 	.word	0x00016bcf
   16cb4:	00016ea7 	.word	0x00016ea7
   16cb8:	00016de7 	.word	0x00016de7
   16cbc:	00016def 	.word	0x00016def
   16cc0:	00016df7 	.word	0x00016df7
   16cc4:	00016dff 	.word	0x00016dff
   16cc8:	00016e07 	.word	0x00016e07
   16ccc:	00016bcf 	.word	0x00016bcf
   16cd0:	00016e0f 	.word	0x00016e0f
   16cd4:	00016e17 	.word	0x00016e17
   16cd8:	00016bcf 	.word	0x00016bcf
   16cdc:	00016e1f 	.word	0x00016e1f
   16ce0:	00016e27 	.word	0x00016e27
   16ce4:	00016e2f 	.word	0x00016e2f
   16ce8:	00016eaf 	.word	0x00016eaf
   16cec:	00016e37 	.word	0x00016e37
   16cf0:	00016bcf 	.word	0x00016bcf
   16cf4:	00016e3f 	.word	0x00016e3f
   16cf8:	00016e47 	.word	0x00016e47
   16cfc:	00016bcf 	.word	0x00016bcf
   16d00:	00016bcf 	.word	0x00016bcf
   16d04:	00016e4f 	.word	0x00016e4f
	switch (err_code) {
   16d08:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   16d0c:	2b18      	cmp	r3, #24
   16d0e:	f63f af5e 	bhi.w	16bce <bsd_os_errno_set+0xe>
   16d12:	2b18      	cmp	r3, #24
   16d14:	f63f af5b 	bhi.w	16bce <bsd_os_errno_set+0xe>
   16d18:	a201      	add	r2, pc, #4	; (adr r2, 16d20 <bsd_os_errno_set+0x160>)
   16d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16d1e:	bf00      	nop
   16d20:	00016e57 	.word	0x00016e57
   16d24:	00016bcf 	.word	0x00016bcf
   16d28:	00016bcf 	.word	0x00016bcf
   16d2c:	00016bcf 	.word	0x00016bcf
   16d30:	00016bcf 	.word	0x00016bcf
   16d34:	00016bcf 	.word	0x00016bcf
   16d38:	00016bcf 	.word	0x00016bcf
   16d3c:	00016e5f 	.word	0x00016e5f
   16d40:	00016bcf 	.word	0x00016bcf
   16d44:	00016e6f 	.word	0x00016e6f
   16d48:	00016e67 	.word	0x00016e67
   16d4c:	00016bcf 	.word	0x00016bcf
   16d50:	00016bcf 	.word	0x00016bcf
   16d54:	00016bcf 	.word	0x00016bcf
   16d58:	00016bcf 	.word	0x00016bcf
   16d5c:	00016bcf 	.word	0x00016bcf
   16d60:	00016bcf 	.word	0x00016bcf
   16d64:	00016bcf 	.word	0x00016bcf
   16d68:	00016bcf 	.word	0x00016bcf
   16d6c:	00016bcf 	.word	0x00016bcf
   16d70:	00016e77 	.word	0x00016e77
   16d74:	00016e7f 	.word	0x00016e7f
   16d78:	00016e89 	.word	0x00016e89
   16d7c:	00016e93 	.word	0x00016e93
   16d80:	00016e9d 	.word	0x00016e9d
		errno = EPERM;
   16d84:	f015 ffe5 	bl	2cd52 <__errno>
   16d88:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   16d8a:	6003      	str	r3, [r0, #0]
}
   16d8c:	bd10      	pop	{r4, pc}
		errno = ENOENT;
   16d8e:	f015 ffe0 	bl	2cd52 <__errno>
   16d92:	2302      	movs	r3, #2
   16d94:	e7f9      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EIO;
   16d96:	f015 ffdc 	bl	2cd52 <__errno>
   16d9a:	2305      	movs	r3, #5
   16d9c:	e7f5      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = ENOEXEC;
   16d9e:	f015 ffd8 	bl	2cd52 <__errno>
   16da2:	2308      	movs	r3, #8
   16da4:	e7f1      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EBADF;
   16da6:	f015 ffd4 	bl	2cd52 <__errno>
   16daa:	2309      	movs	r3, #9
   16dac:	e7ed      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = ENOMEM;
   16dae:	f015 ffd0 	bl	2cd52 <__errno>
   16db2:	230c      	movs	r3, #12
   16db4:	e7e9      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EACCES;
   16db6:	f015 ffcc 	bl	2cd52 <__errno>
   16dba:	230d      	movs	r3, #13
   16dbc:	e7e5      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EFAULT;
   16dbe:	f015 ffc8 	bl	2cd52 <__errno>
   16dc2:	230e      	movs	r3, #14
   16dc4:	e7e1      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EINVAL;
   16dc6:	f015 ffc4 	bl	2cd52 <__errno>
   16dca:	2316      	movs	r3, #22
   16dcc:	e7dd      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EMFILE;
   16dce:	f015 ffc0 	bl	2cd52 <__errno>
   16dd2:	2318      	movs	r3, #24
   16dd4:	e7d9      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EAGAIN;
   16dd6:	f015 ffbc 	bl	2cd52 <__errno>
   16dda:	230b      	movs	r3, #11
   16ddc:	e7d5      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EDOM;
   16dde:	f015 ffb8 	bl	2cd52 <__errno>
   16de2:	2321      	movs	r3, #33	; 0x21
   16de4:	e7d1      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EPROTOTYPE;
   16de6:	f015 ffb4 	bl	2cd52 <__errno>
   16dea:	236b      	movs	r3, #107	; 0x6b
   16dec:	e7cd      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = ENOPROTOOPT;
   16dee:	f015 ffb0 	bl	2cd52 <__errno>
   16df2:	236d      	movs	r3, #109	; 0x6d
   16df4:	e7c9      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EPROTONOSUPPORT;
   16df6:	f015 ffac 	bl	2cd52 <__errno>
   16dfa:	237b      	movs	r3, #123	; 0x7b
   16dfc:	e7c5      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = ESOCKTNOSUPPORT;
   16dfe:	f015 ffa8 	bl	2cd52 <__errno>
   16e02:	237c      	movs	r3, #124	; 0x7c
   16e04:	e7c1      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EOPNOTSUPP;
   16e06:	f015 ffa4 	bl	2cd52 <__errno>
   16e0a:	235f      	movs	r3, #95	; 0x5f
   16e0c:	e7bd      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EAFNOSUPPORT;
   16e0e:	f015 ffa0 	bl	2cd52 <__errno>
   16e12:	236a      	movs	r3, #106	; 0x6a
   16e14:	e7b9      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EADDRINUSE;
   16e16:	f015 ff9c 	bl	2cd52 <__errno>
   16e1a:	2370      	movs	r3, #112	; 0x70
   16e1c:	e7b5      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = ENETDOWN;
   16e1e:	f015 ff98 	bl	2cd52 <__errno>
   16e22:	2373      	movs	r3, #115	; 0x73
   16e24:	e7b1      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = ENETUNREACH;
   16e26:	f015 ff94 	bl	2cd52 <__errno>
   16e2a:	2372      	movs	r3, #114	; 0x72
   16e2c:	e7ad      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = ENETRESET;
   16e2e:	f015 ff90 	bl	2cd52 <__errno>
   16e32:	237e      	movs	r3, #126	; 0x7e
   16e34:	e7a9      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = ECONNRESET;
   16e36:	f015 ff8c 	bl	2cd52 <__errno>
   16e3a:	2368      	movs	r3, #104	; 0x68
   16e3c:	e7a5      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EISCONN;
   16e3e:	f015 ff88 	bl	2cd52 <__errno>
   16e42:	237f      	movs	r3, #127	; 0x7f
   16e44:	e7a1      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = ENOTCONN;
   16e46:	f015 ff84 	bl	2cd52 <__errno>
   16e4a:	2380      	movs	r3, #128	; 0x80
   16e4c:	e79d      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = ETIMEDOUT;
   16e4e:	f015 ff80 	bl	2cd52 <__errno>
   16e52:	2374      	movs	r3, #116	; 0x74
   16e54:	e799      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = ENOBUFS;
   16e56:	f015 ff7c 	bl	2cd52 <__errno>
   16e5a:	2369      	movs	r3, #105	; 0x69
   16e5c:	e795      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EHOSTDOWN;
   16e5e:	f015 ff78 	bl	2cd52 <__errno>
   16e62:	2375      	movs	r3, #117	; 0x75
   16e64:	e791      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EINPROGRESS;
   16e66:	f015 ff74 	bl	2cd52 <__errno>
   16e6a:	2377      	movs	r3, #119	; 0x77
   16e6c:	e78d      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EALREADY;
   16e6e:	f015 ff70 	bl	2cd52 <__errno>
   16e72:	2378      	movs	r3, #120	; 0x78
   16e74:	e789      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = ECANCELED;
   16e76:	f015 ff6c 	bl	2cd52 <__errno>
   16e7a:	238c      	movs	r3, #140	; 0x8c
   16e7c:	e785      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = ENOKEY;
   16e7e:	f015 ff68 	bl	2cd52 <__errno>
   16e82:	f240 73d1 	movw	r3, #2001	; 0x7d1
   16e86:	e780      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EKEYEXPIRED;
   16e88:	f015 ff63 	bl	2cd52 <__errno>
   16e8c:	f240 73d2 	movw	r3, #2002	; 0x7d2
   16e90:	e77b      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EKEYREVOKED;
   16e92:	f015 ff5e 	bl	2cd52 <__errno>
   16e96:	f240 73d3 	movw	r3, #2003	; 0x7d3
   16e9a:	e776      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EKEYREJECTED;
   16e9c:	f015 ff59 	bl	2cd52 <__errno>
   16ea0:	f240 73d4 	movw	r3, #2004	; 0x7d4
   16ea4:	e771      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = EMSGSIZE;
   16ea6:	f015 ff54 	bl	2cd52 <__errno>
   16eaa:	237a      	movs	r3, #122	; 0x7a
   16eac:	e76d      	b.n	16d8a <bsd_os_errno_set+0x1ca>
		errno = ECONNABORTED;
   16eae:	f015 ff50 	bl	2cd52 <__errno>
   16eb2:	2371      	movs	r3, #113	; 0x71
   16eb4:	e769      	b.n	16d8a <bsd_os_errno_set+0x1ca>
   16eb6:	bf00      	nop
   16eb8:	0003133c 	.word	0x0003133c
   16ebc:	00032bdb 	.word	0x00032bdb
   16ec0:	000300ff 	.word	0x000300ff
   16ec4:	00031360 	.word	0x00031360
   16ec8:	0002ec7c 	.word	0x0002ec7c
   16ecc:	0002ec94 	.word	0x0002ec94
   16ed0:	00031387 	.word	0x00031387
   16ed4:	baadbaad 	.word	0xbaadbaad

00016ed8 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   16edc:	4b01      	ldr	r3, [pc, #4]	; (16ee4 <bsd_os_application_irq_set+0xc>)
   16ede:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   16ee2:	4770      	bx	lr
   16ee4:	e000e100 	.word	0xe000e100

00016ee8 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   16eec:	4b01      	ldr	r3, [pc, #4]	; (16ef4 <bsd_os_application_irq_clear+0xc>)
   16eee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   16ef2:	4770      	bx	lr
   16ef4:	e000e100 	.word	0xe000e100

00016ef8 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16ef8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   16efc:	4b01      	ldr	r3, [pc, #4]	; (16f04 <bsd_os_trace_irq_set+0xc>)
   16efe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   16f02:	4770      	bx	lr
   16f04:	e000e100 	.word	0xe000e100

00016f08 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16f08:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   16f0c:	4b01      	ldr	r3, [pc, #4]	; (16f14 <bsd_os_trace_irq_clear+0xc>)
   16f0e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   16f12:	4770      	bx	lr
   16f14:	e000e100 	.word	0xe000e100

00016f18 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   16f18:	b508      	push	{r3, lr}
	list->head = NULL;
   16f1a:	2300      	movs	r3, #0
   16f1c:	4a07      	ldr	r2, [pc, #28]	; (16f3c <bsd_os_init+0x24>)
	list->tail = NULL;
   16f1e:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16f22:	4a07      	ldr	r2, [pc, #28]	; (16f40 <bsd_os_init+0x28>)
   16f24:	e8d2 1fef 	ldaex	r1, [r2]
   16f28:	e8c2 3fe0 	stlex	r0, r3, [r2]
   16f2c:	2800      	cmp	r0, #0
   16f2e:	d1f9      	bne.n	16f24 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   16f30:	f016 fe75 	bl	2dc1e <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   16f34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   16f38:	f016 be66 	b.w	2dc08 <trace_task_create>
   16f3c:	2002163c 	.word	0x2002163c
   16f40:	20021638 	.word	0x20021638

00016f44 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   16f44:	f240 2302 	movw	r3, #514	; 0x202
   16f48:	4298      	cmp	r0, r3
   16f4a:	f000 8087 	beq.w	1705c <z_to_nrf_optname+0x118>
   16f4e:	dc07      	bgt.n	16f60 <z_to_nrf_optname+0x1c>
   16f50:	2801      	cmp	r0, #1
   16f52:	d040      	beq.n	16fd6 <z_to_nrf_optname+0x92>
   16f54:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   16f58:	d034      	beq.n	16fc4 <z_to_nrf_optname+0x80>
   16f5a:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   16f5e:	4770      	bx	lr
	switch (z_in_level) {
   16f60:	f240 2303 	movw	r3, #515	; 0x203
   16f64:	4298      	cmp	r0, r3
   16f66:	d1f8      	bne.n	16f5a <z_to_nrf_optname+0x16>
		switch (z_in_optname) {
   16f68:	3901      	subs	r1, #1
   16f6a:	2913      	cmp	r1, #19
   16f6c:	d8f5      	bhi.n	16f5a <z_to_nrf_optname+0x16>
   16f6e:	a301      	add	r3, pc, #4	; (adr r3, 16f74 <z_to_nrf_optname+0x30>)
   16f70:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   16f74:	0001706b 	.word	0x0001706b
   16f78:	00017045 	.word	0x00017045
   16f7c:	00017049 	.word	0x00017049
   16f80:	00016fe7 	.word	0x00016fe7
   16f84:	0001704d 	.word	0x0001704d
   16f88:	00017051 	.word	0x00017051
   16f8c:	00017055 	.word	0x00017055
   16f90:	00016f5b 	.word	0x00016f5b
   16f94:	00016f5b 	.word	0x00016f5b
   16f98:	00016f5b 	.word	0x00016f5b
   16f9c:	00016f5b 	.word	0x00016f5b
   16fa0:	00016f5b 	.word	0x00016f5b
   16fa4:	00016f5b 	.word	0x00016f5b
   16fa8:	00016f5b 	.word	0x00016f5b
   16fac:	00016f5b 	.word	0x00016f5b
   16fb0:	00016f5b 	.word	0x00016f5b
   16fb4:	00016f5b 	.word	0x00016f5b
   16fb8:	00016f5b 	.word	0x00016f5b
   16fbc:	00016f5b 	.word	0x00016f5b
   16fc0:	00017059 	.word	0x00017059
		switch (z_in_optname) {
   16fc4:	3901      	subs	r1, #1
   16fc6:	2906      	cmp	r1, #6
   16fc8:	d8c7      	bhi.n	16f5a <z_to_nrf_optname+0x16>
   16fca:	e8df f001 	tbb	[pc, r1]
   16fce:	3f3b      	.short	0x3f3b
   16fd0:	4e0c4341 	.word	0x4e0c4341
   16fd4:	3d          	.byte	0x3d
   16fd5:	00          	.byte	0x00
		switch (z_in_optname) {
   16fd6:	2920      	cmp	r1, #32
   16fd8:	dcbf      	bgt.n	16f5a <z_to_nrf_optname+0x16>
   16fda:	2913      	cmp	r1, #19
   16fdc:	dc05      	bgt.n	16fea <z_to_nrf_optname+0xa6>
   16fde:	2902      	cmp	r1, #2
   16fe0:	d028      	beq.n	17034 <z_to_nrf_optname+0xf0>
   16fe2:	2904      	cmp	r1, #4
   16fe4:	d1b9      	bne.n	16f5a <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   16fe6:	2304      	movs	r3, #4
   16fe8:	e040      	b.n	1706c <z_to_nrf_optname+0x128>
   16fea:	3914      	subs	r1, #20
   16fec:	290c      	cmp	r1, #12
   16fee:	d8b4      	bhi.n	16f5a <z_to_nrf_optname+0x16>
   16ff0:	a301      	add	r3, pc, #4	; (adr r3, 16ff8 <z_to_nrf_optname+0xb4>)
   16ff2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   16ff6:	bf00      	nop
   16ff8:	00017059 	.word	0x00017059
   16ffc:	0001702d 	.word	0x0001702d
   17000:	00016f5b 	.word	0x00016f5b
   17004:	00016f5b 	.word	0x00016f5b
   17008:	00016f5b 	.word	0x00016f5b
   1700c:	00017031 	.word	0x00017031
   17010:	00016f5b 	.word	0x00016f5b
   17014:	00016f5b 	.word	0x00016f5b
   17018:	00016f5b 	.word	0x00016f5b
   1701c:	00016f5b 	.word	0x00016f5b
   17020:	00017039 	.word	0x00017039
   17024:	0001703d 	.word	0x0001703d
   17028:	00017041 	.word	0x00017041
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   1702c:	2315      	movs	r3, #21
   1702e:	e01d      	b.n	1706c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   17030:	2319      	movs	r3, #25
   17032:	e01b      	b.n	1706c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   17034:	2328      	movs	r3, #40	; 0x28
   17036:	e019      	b.n	1706c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   17038:	231e      	movs	r3, #30
   1703a:	e017      	b.n	1706c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_IP_ECHO_REPLY;
   1703c:	231f      	movs	r3, #31
   1703e:	e015      	b.n	1706c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_IPV6_ECHO_REPLY;
   17040:	2320      	movs	r3, #32
   17042:	e013      	b.n	1706c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   17044:	2302      	movs	r3, #2
   17046:	e011      	b.n	1706c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   17048:	2303      	movs	r3, #3
   1704a:	e00f      	b.n	1706c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   1704c:	2305      	movs	r3, #5
   1704e:	e00d      	b.n	1706c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   17050:	2306      	movs	r3, #6
   17052:	e00b      	b.n	1706c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   17054:	2307      	movs	r3, #7
   17056:	e009      	b.n	1706c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   17058:	2314      	movs	r3, #20
   1705a:	e007      	b.n	1706c <z_to_nrf_optname+0x128>
		switch (z_in_optname) {
   1705c:	2902      	cmp	r1, #2
   1705e:	d0f1      	beq.n	17044 <z_to_nrf_optname+0x100>
   17060:	2903      	cmp	r1, #3
   17062:	d0f1      	beq.n	17048 <z_to_nrf_optname+0x104>
   17064:	2901      	cmp	r1, #1
   17066:	f47f af78 	bne.w	16f5a <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   1706a:	2301      	movs	r3, #1
	int retval = 0;
   1706c:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   1706e:	6013      	str	r3, [r2, #0]
			break;
   17070:	4770      	bx	lr
   17072:	bf00      	nop

00017074 <nrf91_socket_offload_ioctl>:
static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
	int sd = OBJ_TO_SD(obj);

	switch (request) {
   17074:	f240 1303 	movw	r3, #259	; 0x103
{
   17078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   1707c:	4299      	cmp	r1, r3
{
   1707e:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   17080:	f000 8097 	beq.w	171b2 <nrf91_socket_offload_ioctl+0x13e>
   17084:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   17088:	d005      	beq.n	17096 <nrf91_socket_offload_ioctl+0x22>
   1708a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   1708e:	d171      	bne.n	17174 <nrf91_socket_offload_ioctl+0x100>
	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;
   17090:	f06f 0411 	mvn.w	r4, #17
   17094:	e01d      	b.n	170d2 <nrf91_socket_offload_ioctl+0x5e>
	for (int i = 0; i < nfds; i++) {
   17096:	f04f 0800 	mov.w	r8, #0
		struct zsock_pollfd *fds;
		int nfds;
		int timeout;

		fds = va_arg(args, struct zsock_pollfd *);
		nfds = va_arg(args, int);
   1709a:	e9d2 a900 	ldrd	sl, r9, [r2]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   1709e:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   170a0:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   170a4:	4668      	mov	r0, sp
   170a6:	2240      	movs	r2, #64	; 0x40
   170a8:	f00e ffe8 	bl	2607c <memset>
	for (int i = 0; i < nfds; i++) {
   170ac:	466e      	mov	r6, sp
   170ae:	4655      	mov	r5, sl
   170b0:	4657      	mov	r7, sl
	int retval = 0;
   170b2:	4644      	mov	r4, r8
		tmp[i].events = 0;
   170b4:	4643      	mov	r3, r8
			obj = z_get_fd_obj(fds[i].fd,
   170b6:	4940      	ldr	r1, [pc, #256]	; (171b8 <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   170b8:	45c1      	cmp	r9, r8
   170ba:	dc0e      	bgt.n	170da <nrf91_socket_offload_ioctl+0x66>
	if (retval > 0) {
   170bc:	2c00      	cmp	r4, #0
   170be:	dc08      	bgt.n	170d2 <nrf91_socket_offload_ioctl+0x5e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   170c0:	465a      	mov	r2, fp
   170c2:	4649      	mov	r1, r9
   170c4:	4668      	mov	r0, sp
   170c6:	f009 f957 	bl	20378 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   170ca:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   170cc:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   170ce:	4599      	cmp	r9, r3
   170d0:	dc28      	bgt.n	17124 <nrf91_socket_offload_ioctl+0xb0>
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   170d2:	4620      	mov	r0, r4
   170d4:	b011      	add	sp, #68	; 0x44
   170d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (fds[i].fd < 0) {
   170da:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   170dc:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   170de:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   170e0:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   170e2:	da05      	bge.n	170f0 <nrf91_socket_offload_ioctl+0x7c>
			tmp[i].fd = fds[i].fd;
   170e4:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   170e6:	f108 0801 	add.w	r8, r8, #1
   170ea:	3608      	adds	r6, #8
   170ec:	3708      	adds	r7, #8
   170ee:	e7e3      	b.n	170b8 <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   170f0:	2286      	movs	r2, #134	; 0x86
   170f2:	f7fa ff21 	bl	11f38 <z_get_fd_obj>
			if (obj != NULL) {
   170f6:	2300      	movs	r3, #0
   170f8:	492f      	ldr	r1, [pc, #188]	; (171b8 <nrf91_socket_offload_ioctl+0x144>)
   170fa:	b178      	cbz	r0, 1711c <nrf91_socket_offload_ioctl+0xa8>
				tmp[i].fd = OBJ_TO_SD(obj);
   170fc:	3801      	subs	r0, #1
   170fe:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   17100:	88b8      	ldrh	r0, [r7, #4]
   17102:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   17104:	bf42      	ittt	mi
   17106:	88b2      	ldrhmi	r2, [r6, #4]
   17108:	f042 0201 	orrmi.w	r2, r2, #1
   1710c:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   1710e:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   17110:	bf42      	ittt	mi
   17112:	88b2      	ldrhmi	r2, [r6, #4]
   17114:	f042 0202 	orrmi.w	r2, r2, #2
   17118:	80b2      	strhmi	r2, [r6, #4]
   1711a:	e7e4      	b.n	170e6 <nrf91_socket_offload_ioctl+0x72>
				fds[i].revents = POLLNVAL;
   1711c:	2220      	movs	r2, #32
				retval++;
   1711e:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   17120:	80fa      	strh	r2, [r7, #6]
				retval++;
   17122:	e7ed      	b.n	17100 <nrf91_socket_offload_ioctl+0x8c>
		if (fds[i].fd < 0) {
   17124:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   17128:	2a00      	cmp	r2, #0
   1712a:	db20      	blt.n	1716e <nrf91_socket_offload_ioctl+0xfa>
		if (tmp[i].revents & NRF_POLLIN) {
   1712c:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   17130:	88d2      	ldrh	r2, [r2, #6]
   17132:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   17134:	bf42      	ittt	mi
   17136:	88e9      	ldrhmi	r1, [r5, #6]
   17138:	f041 0101 	orrmi.w	r1, r1, #1
   1713c:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   1713e:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   17140:	bf42      	ittt	mi
   17142:	88e9      	ldrhmi	r1, [r5, #6]
   17144:	f041 0104 	orrmi.w	r1, r1, #4
   17148:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   1714a:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   1714c:	bf42      	ittt	mi
   1714e:	88e9      	ldrhmi	r1, [r5, #6]
   17150:	f041 0108 	orrmi.w	r1, r1, #8
   17154:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   17156:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   17158:	bf42      	ittt	mi
   1715a:	88e9      	ldrhmi	r1, [r5, #6]
   1715c:	f041 0120 	orrmi.w	r1, r1, #32
   17160:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   17162:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   17164:	bf42      	ittt	mi
   17166:	88ea      	ldrhmi	r2, [r5, #6]
   17168:	f042 0210 	orrmi.w	r2, r2, #16
   1716c:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   1716e:	3301      	adds	r3, #1
   17170:	3508      	adds	r5, #8
   17172:	e7ac      	b.n	170ce <nrf91_socket_offload_ioctl+0x5a>
	switch (cmd) {
   17174:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   17176:	f100 30ff 	add.w	r0, r0, #4294967295
	switch (cmd) {
   1717a:	d00b      	beq.n	17194 <nrf91_socket_offload_ioctl+0x120>
   1717c:	2904      	cmp	r1, #4
   1717e:	d111      	bne.n	171a4 <nrf91_socket_offload_ioctl+0x130>
		flags = va_arg(args, int);
   17180:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   17182:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   17186:	d10d      	bne.n	171a4 <nrf91_socket_offload_ioctl+0x130>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   17188:	2101      	movs	r1, #1
   1718a:	1392      	asrs	r2, r2, #14
   1718c:	f009 f8f6 	bl	2037c <nrf_fcntl>
   17190:	4604      	mov	r4, r0
		break;
   17192:	e79e      	b.n	170d2 <nrf91_socket_offload_ioctl+0x5e>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   17194:	2200      	movs	r2, #0
   17196:	2102      	movs	r1, #2
   17198:	f009 f8f0 	bl	2037c <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1719c:	0380      	lsls	r0, r0, #14
   1719e:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   171a2:	e796      	b.n	170d2 <nrf91_socket_offload_ioctl+0x5e>
	errno = EINVAL;
   171a4:	f015 fdd5 	bl	2cd52 <__errno>
   171a8:	2316      	movs	r3, #22
	return retval;
   171aa:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   171ae:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   171b0:	e78f      	b.n	170d2 <nrf91_socket_offload_ioctl+0x5e>
	switch (request) {
   171b2:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   171b6:	e78c      	b.n	170d2 <nrf91_socket_offload_ioctl+0x5e>
   171b8:	0002f010 	.word	0x0002f010

000171bc <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   171bc:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   171be:	4b03      	ldr	r3, [pc, #12]	; (171cc <nrf91_socket_iface_init+0x10>)
   171c0:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   171c2:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   171c4:	4802      	ldr	r0, [pc, #8]	; (171d0 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   171c6:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   171c8:	f7fc bda2 	b.w	13d10 <socket_offload_dns_register>
   171cc:	20021694 	.word	0x20021694
   171d0:	0002f008 	.word	0x0002f008

000171d4 <nrf91_socket_offload_accept>:
{
   171d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   171d8:	b08a      	sub	sp, #40	; 0x28
   171da:	4607      	mov	r7, r0
   171dc:	460c      	mov	r4, r1
   171de:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   171e0:	f7fa feda 	bl	11f98 <z_reserve_fd>
   171e4:	4606      	mov	r6, r0
	if (fd < 0) {
   171e6:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   171e8:	f107 30ff 	add.w	r0, r7, #4294967295
	if (fd < 0) {
   171ec:	da05      	bge.n	171fa <nrf91_socket_offload_accept+0x26>
	return -1;
   171ee:	f04f 36ff 	mov.w	r6, #4294967295
}
   171f2:	4630      	mov	r0, r6
   171f4:	b00a      	add	sp, #40	; 0x28
   171f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   171fa:	b31c      	cbz	r4, 17244 <nrf91_socket_offload_accept+0x70>
   171fc:	b32d      	cbz	r5, 1724a <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   171fe:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   17200:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   17202:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   17204:	bf0c      	ite	eq
   17206:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   17208:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1720a:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   1720c:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   1720e:	4639      	mov	r1, r7
   17210:	f009 f84e 	bl	202b0 <nrf_accept>
	if (new_sd < 0) {
   17214:	f1b0 0800 	subs.w	r8, r0, #0
   17218:	dbe9      	blt.n	171ee <nrf91_socket_offload_accept+0x1a>
	if ((addr != NULL) && (addrlen != NULL)) {
   1721a:	b164      	cbz	r4, 17236 <nrf91_socket_offload_accept+0x62>
   1721c:	b15d      	cbz	r5, 17236 <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   1721e:	687b      	ldr	r3, [r7, #4]
   17220:	2b02      	cmp	r3, #2
   17222:	d115      	bne.n	17250 <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   17224:	2308      	movs	r3, #8
   17226:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   17228:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1722c:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1722e:	2301      	movs	r3, #1
   17230:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   17232:	9b04      	ldr	r3, [sp, #16]
   17234:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   17236:	4630      	mov	r0, r6
   17238:	4a0c      	ldr	r2, [pc, #48]	; (1726c <nrf91_socket_offload_accept+0x98>)
   1723a:	f108 0101 	add.w	r1, r8, #1
   1723e:	f7fa fedd 	bl	11ffc <z_finalize_fd>
	return fd;
   17242:	e7d6      	b.n	171f2 <nrf91_socket_offload_accept+0x1e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   17244:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   17246:	4627      	mov	r7, r4
   17248:	e7e1      	b.n	1720e <nrf91_socket_offload_accept+0x3a>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1724a:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1724c:	462f      	mov	r7, r5
   1724e:	e7de      	b.n	1720e <nrf91_socket_offload_accept+0x3a>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   17250:	2b0a      	cmp	r3, #10
   17252:	d106      	bne.n	17262 <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   17254:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   17256:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   17258:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   1725a:	a901      	add	r1, sp, #4
   1725c:	f016 fddd 	bl	2de1a <nrf_to_z_ipv6>
   17260:	e7e9      	b.n	17236 <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   17262:	4630      	mov	r0, r6
   17264:	f7fa fed4 	bl	12010 <z_free_fd>
   17268:	e7c1      	b.n	171ee <nrf91_socket_offload_accept+0x1a>
   1726a:	bf00      	nop
   1726c:	0002f010 	.word	0x0002f010

00017270 <nrf91_socket_offload_sendmsg>:
{
   17270:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   17274:	4607      	mov	r7, r0
   17276:	4690      	mov	r8, r2
	if (msg == NULL) {
   17278:	460c      	mov	r4, r1
   1727a:	b319      	cbz	r1, 172c4 <nrf91_socket_offload_sendmsg+0x54>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1727c:	2300      	movs	r3, #0
	ssize_t len = 0;
   1727e:	461a      	mov	r2, r3
   17280:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   17282:	4283      	cmp	r3, r0
   17284:	d128      	bne.n	172d8 <nrf91_socket_offload_sendmsg+0x68>
	if (len <= sizeof(buf)) {
   17286:	2a80      	cmp	r2, #128	; 0x80
   17288:	d857      	bhi.n	1733a <nrf91_socket_offload_sendmsg+0xca>
		for (i = 0; i < msg->msg_iovlen; i++) {
   1728a:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   1728c:	f04f 32ff 	mov.w	r2, #4294967295
   17290:	f04f 33ff 	mov.w	r3, #4294967295
   17294:	482a      	ldr	r0, [pc, #168]	; (17340 <nrf91_socket_offload_sendmsg+0xd0>)
   17296:	f00b fcdd 	bl	22c54 <z_impl_k_mutex_lock>
		len = 0;
   1729a:	462e      	mov	r6, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1729c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 17344 <nrf91_socket_offload_sendmsg+0xd4>
		for (i = 0; i < msg->msg_iovlen; i++) {
   172a0:	68e3      	ldr	r3, [r4, #12]
   172a2:	42ab      	cmp	r3, r5
   172a4:	d81f      	bhi.n	172e6 <nrf91_socket_offload_sendmsg+0x76>
		ret = nrf91_socket_offload_sendto(obj, buf, len,
   172a6:	6863      	ldr	r3, [r4, #4]
   172a8:	4632      	mov	r2, r6
   172aa:	9301      	str	r3, [sp, #4]
   172ac:	6823      	ldr	r3, [r4, #0]
   172ae:	4638      	mov	r0, r7
   172b0:	9300      	str	r3, [sp, #0]
   172b2:	4924      	ldr	r1, [pc, #144]	; (17344 <nrf91_socket_offload_sendmsg+0xd4>)
   172b4:	4643      	mov	r3, r8
   172b6:	f016 ff0c 	bl	2e0d2 <nrf91_socket_offload_sendto>
   172ba:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   172bc:	4820      	ldr	r0, [pc, #128]	; (17340 <nrf91_socket_offload_sendmsg+0xd0>)
   172be:	f00b fdc3 	bl	22e48 <z_impl_k_mutex_unlock>
		return ret;
   172c2:	e005      	b.n	172d0 <nrf91_socket_offload_sendmsg+0x60>
		errno = EINVAL;
   172c4:	f015 fd45 	bl	2cd52 <__errno>
   172c8:	2316      	movs	r3, #22
		return -1;
   172ca:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   172ce:	6003      	str	r3, [r0, #0]
}
   172d0:	4628      	mov	r0, r5
   172d2:	b002      	add	sp, #8
   172d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   172d8:	68a1      	ldr	r1, [r4, #8]
   172da:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   172de:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   172e0:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   172e2:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   172e4:	e7cd      	b.n	17282 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   172e6:	68a1      	ldr	r1, [r4, #8]
   172e8:	eb09 0006 	add.w	r0, r9, r6
   172ec:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   172f0:	685a      	ldr	r2, [r3, #4]
   172f2:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   172f6:	f7f5 fc29 	bl	cb4c <memcpy>
			len += msg->msg_iov[i].iov_len;
   172fa:	68a3      	ldr	r3, [r4, #8]
   172fc:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   17300:	4453      	add	r3, sl
   17302:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   17304:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   17306:	441e      	add	r6, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   17308:	e7ca      	b.n	172a0 <nrf91_socket_offload_sendmsg+0x30>
		if (msg->msg_iov[i].iov_len == 0) {
   1730a:	68a1      	ldr	r1, [r4, #8]
   1730c:	eb01 03c6 	add.w	r3, r1, r6, lsl #3
   17310:	685a      	ldr	r2, [r3, #4]
   17312:	b162      	cbz	r2, 1732e <nrf91_socket_offload_sendmsg+0xbe>
		ret = nrf91_socket_offload_sendto(obj, msg->msg_iov[i].iov_base,
   17314:	6863      	ldr	r3, [r4, #4]
   17316:	4638      	mov	r0, r7
   17318:	9301      	str	r3, [sp, #4]
   1731a:	6823      	ldr	r3, [r4, #0]
   1731c:	9300      	str	r3, [sp, #0]
   1731e:	f851 1036 	ldr.w	r1, [r1, r6, lsl #3]
   17322:	4643      	mov	r3, r8
   17324:	f016 fed5 	bl	2e0d2 <nrf91_socket_offload_sendto>
		if (ret < 0) {
   17328:	1e05      	subs	r5, r0, #0
   1732a:	dbd1      	blt.n	172d0 <nrf91_socket_offload_sendmsg+0x60>
		len += ret;
   1732c:	44a9      	add	r9, r5
	for (i = 0; i < msg->msg_iovlen; i++) {
   1732e:	3601      	adds	r6, #1
   17330:	68e3      	ldr	r3, [r4, #12]
   17332:	42b3      	cmp	r3, r6
   17334:	d8e9      	bhi.n	1730a <nrf91_socket_offload_sendmsg+0x9a>
   17336:	464d      	mov	r5, r9
   17338:	e7ca      	b.n	172d0 <nrf91_socket_offload_sendmsg+0x60>
   1733a:	2600      	movs	r6, #0
	len = 0;
   1733c:	46b1      	mov	r9, r6
   1733e:	e7f7      	b.n	17330 <nrf91_socket_offload_sendmsg+0xc0>
   17340:	20020bb8 	.word	0x20020bb8
   17344:	20024759 	.word	0x20024759

00017348 <nrf91_socket_create>:
{
   17348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1734a:	4606      	mov	r6, r0
   1734c:	460d      	mov	r5, r1
   1734e:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   17350:	f7fa fe22 	bl	11f98 <z_reserve_fd>
	if (fd < 0) {
   17354:	1e04      	subs	r4, r0, #0
   17356:	db0d      	blt.n	17374 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   17358:	b2b0      	uxth	r0, r6
   1735a:	f016 fc7b 	bl	2dc54 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1735e:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   17362:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   17364:	d109      	bne.n	1737a <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   17366:	f015 fcf4 	bl	2cd52 <__errno>
   1736a:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   1736c:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   1736e:	4620      	mov	r0, r4
   17370:	f7fa fe4e 	bl	12010 <z_free_fd>
		return -1;
   17374:	f04f 34ff 	mov.w	r4, #4294967295
   17378:	e01b      	b.n	173b2 <nrf91_socket_create+0x6a>
	switch (socktype) {
   1737a:	2d03      	cmp	r5, #3
   1737c:	d003      	beq.n	17386 <nrf91_socket_create+0x3e>
   1737e:	2d04      	cmp	r5, #4
   17380:	bf08      	it	eq
   17382:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   17386:	4638      	mov	r0, r7
   17388:	f016 fc80 	bl	2dc8c <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   1738c:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   17390:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   17392:	d103      	bne.n	1739c <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   17394:	f015 fcdd 	bl	2cd52 <__errno>
   17398:	237b      	movs	r3, #123	; 0x7b
   1739a:	e7e7      	b.n	1736c <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   1739c:	4629      	mov	r1, r5
   1739e:	4630      	mov	r0, r6
   173a0:	f008 ff0c 	bl	201bc <nrf_socket>
	if (sd < 0) {
   173a4:	1e01      	subs	r1, r0, #0
   173a6:	dbe2      	blt.n	1736e <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   173a8:	4620      	mov	r0, r4
   173aa:	4a03      	ldr	r2, [pc, #12]	; (173b8 <nrf91_socket_create+0x70>)
   173ac:	3101      	adds	r1, #1
   173ae:	f7fa fe25 	bl	11ffc <z_finalize_fd>
}
   173b2:	4620      	mov	r0, r4
   173b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   173b6:	bf00      	nop
   173b8:	0002f010 	.word	0x0002f010

000173bc <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   173bc:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   173c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   173c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   173c8:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   173cc:	4605      	mov	r5, r0
   173ce:	460e      	mov	r6, r1
   173d0:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   173d2:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   173d6:	d15f      	bne.n	17498 <z_impl_gpio_pin_interrupt_configure+0xdc>
   173d8:	4937      	ldr	r1, [pc, #220]	; (174b8 <z_impl_gpio_pin_interrupt_configure+0xfc>)
   173da:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   173de:	4a37      	ldr	r2, [pc, #220]	; (174bc <z_impl_gpio_pin_interrupt_configure+0x100>)
   173e0:	4837      	ldr	r0, [pc, #220]	; (174c0 <z_impl_gpio_pin_interrupt_configure+0x104>)
   173e2:	f014 fe68 	bl	2c0b6 <printk>
   173e6:	4837      	ldr	r0, [pc, #220]	; (174c4 <z_impl_gpio_pin_interrupt_configure+0x108>)
   173e8:	f014 fe65 	bl	2c0b6 <printk>
   173ec:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   173f0:	4832      	ldr	r0, [pc, #200]	; (174bc <z_impl_gpio_pin_interrupt_configure+0x100>)
   173f2:	f015 f87d 	bl	2c4f0 <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   173f6:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   173fa:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   173fe:	d10e      	bne.n	1741e <z_impl_gpio_pin_interrupt_configure+0x62>
   17400:	4931      	ldr	r1, [pc, #196]	; (174c8 <z_impl_gpio_pin_interrupt_configure+0x10c>)
   17402:	f240 13f1 	movw	r3, #497	; 0x1f1
   17406:	4a2d      	ldr	r2, [pc, #180]	; (174bc <z_impl_gpio_pin_interrupt_configure+0x100>)
   17408:	482d      	ldr	r0, [pc, #180]	; (174c0 <z_impl_gpio_pin_interrupt_configure+0x104>)
   1740a:	f014 fe54 	bl	2c0b6 <printk>
   1740e:	482f      	ldr	r0, [pc, #188]	; (174cc <z_impl_gpio_pin_interrupt_configure+0x110>)
   17410:	f014 fe51 	bl	2c0b6 <printk>
   17414:	f240 11f1 	movw	r1, #497	; 0x1f1
   17418:	4828      	ldr	r0, [pc, #160]	; (174bc <z_impl_gpio_pin_interrupt_configure+0x100>)
   1741a:	f015 f869 	bl	2c4f0 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1741e:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   17422:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   17426:	d10e      	bne.n	17446 <z_impl_gpio_pin_interrupt_configure+0x8a>
   17428:	4929      	ldr	r1, [pc, #164]	; (174d0 <z_impl_gpio_pin_interrupt_configure+0x114>)
   1742a:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
   1742e:	4a23      	ldr	r2, [pc, #140]	; (174bc <z_impl_gpio_pin_interrupt_configure+0x100>)
   17430:	4823      	ldr	r0, [pc, #140]	; (174c0 <z_impl_gpio_pin_interrupt_configure+0x104>)
   17432:	f014 fe40 	bl	2c0b6 <printk>
   17436:	4827      	ldr	r0, [pc, #156]	; (174d4 <z_impl_gpio_pin_interrupt_configure+0x118>)
   17438:	f014 fe3d 	bl	2c0b6 <printk>
   1743c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   17440:	481e      	ldr	r0, [pc, #120]	; (174bc <z_impl_gpio_pin_interrupt_configure+0x100>)
   17442:	f015 f855 	bl	2c4f0 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   17446:	2701      	movs	r7, #1
   17448:	f8da 3000 	ldr.w	r3, [sl]
   1744c:	40b7      	lsls	r7, r6
   1744e:	421f      	tst	r7, r3
   17450:	d10e      	bne.n	17470 <z_impl_gpio_pin_interrupt_configure+0xb4>
   17452:	4921      	ldr	r1, [pc, #132]	; (174d8 <z_impl_gpio_pin_interrupt_configure+0x11c>)
   17454:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   17458:	4a18      	ldr	r2, [pc, #96]	; (174bc <z_impl_gpio_pin_interrupt_configure+0x100>)
   1745a:	4819      	ldr	r0, [pc, #100]	; (174c0 <z_impl_gpio_pin_interrupt_configure+0x104>)
   1745c:	f014 fe2b 	bl	2c0b6 <printk>
   17460:	481e      	ldr	r0, [pc, #120]	; (174dc <z_impl_gpio_pin_interrupt_configure+0x120>)
   17462:	f014 fe28 	bl	2c0b6 <printk>
   17466:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   1746a:	4814      	ldr	r0, [pc, #80]	; (174bc <z_impl_gpio_pin_interrupt_configure+0x100>)
   1746c:	f015 f840 	bl	2c4f0 <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   17470:	0423      	lsls	r3, r4, #16
   17472:	d505      	bpl.n	17480 <z_impl_gpio_pin_interrupt_configure+0xc4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   17474:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   17478:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1747a:	bf18      	it	ne
   1747c:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   17480:	f8d8 7018 	ldr.w	r7, [r8, #24]
   17484:	4631      	mov	r1, r6
   17486:	4628      	mov	r0, r5
   17488:	46bc      	mov	ip, r7
   1748a:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   1748e:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
   17492:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   17496:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   17498:	2b00      	cmp	r3, #0
   1749a:	d1ac      	bne.n	173f6 <z_impl_gpio_pin_interrupt_configure+0x3a>
   1749c:	4910      	ldr	r1, [pc, #64]	; (174e0 <z_impl_gpio_pin_interrupt_configure+0x124>)
   1749e:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
   174a2:	4a06      	ldr	r2, [pc, #24]	; (174bc <z_impl_gpio_pin_interrupt_configure+0x100>)
   174a4:	4806      	ldr	r0, [pc, #24]	; (174c0 <z_impl_gpio_pin_interrupt_configure+0x104>)
   174a6:	f014 fe06 	bl	2c0b6 <printk>
   174aa:	480e      	ldr	r0, [pc, #56]	; (174e4 <z_impl_gpio_pin_interrupt_configure+0x128>)
   174ac:	f014 fe03 	bl	2c0b6 <printk>
   174b0:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   174b4:	e79c      	b.n	173f0 <z_impl_gpio_pin_interrupt_configure+0x34>
   174b6:	bf00      	nop
   174b8:	000313ea 	.word	0x000313ea
   174bc:	000313c0 	.word	0x000313c0
   174c0:	000300ff 	.word	0x000300ff
   174c4:	0003142b 	.word	0x0003142b
   174c8:	000314ac 	.word	0x000314ac
   174cc:	0003152d 	.word	0x0003152d
   174d0:	00031581 	.word	0x00031581
   174d4:	000315cb 	.word	0x000315cb
   174d8:	00031610 	.word	0x00031610
   174dc:	0003164e 	.word	0x0003164e
   174e0:	00031457 	.word	0x00031457
   174e4:	00031481 	.word	0x00031481

000174e8 <gpio_pin_configure>:
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_configure(const struct device *port,
				     gpio_pin_t pin,
				     gpio_flags_t flags)
{
   174e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
			| GPIO_OUTPUT_INIT_LOGICAL;
	}

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   174ec:	2501      	movs	r5, #1
   174ee:	6843      	ldr	r3, [r0, #4]
   174f0:	408d      	lsls	r5, r1
   174f2:	681b      	ldr	r3, [r3, #0]
{
   174f4:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   174f6:	421d      	tst	r5, r3
{
   174f8:	460e      	mov	r6, r1
   174fa:	4690      	mov	r8, r2
	struct gpio_driver_data *data =
   174fc:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   174fe:	d10e      	bne.n	1751e <gpio_pin_configure+0x36>
   17500:	490d      	ldr	r1, [pc, #52]	; (17538 <gpio_pin_configure+0x50>)
   17502:	f44f 7311 	mov.w	r3, #580	; 0x244
   17506:	4a0d      	ldr	r2, [pc, #52]	; (1753c <gpio_pin_configure+0x54>)
   17508:	480d      	ldr	r0, [pc, #52]	; (17540 <gpio_pin_configure+0x58>)
   1750a:	f014 fdd4 	bl	2c0b6 <printk>
   1750e:	480d      	ldr	r0, [pc, #52]	; (17544 <gpio_pin_configure+0x5c>)
   17510:	f014 fdd1 	bl	2c0b6 <printk>
   17514:	f44f 7111 	mov.w	r1, #580	; 0x244
   17518:	4808      	ldr	r0, [pc, #32]	; (1753c <gpio_pin_configure+0x54>)
   1751a:	f014 ffe9 	bl	2c4f0 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   1751e:	68a3      	ldr	r3, [r4, #8]
   17520:	4642      	mov	r2, r8
   17522:	4631      	mov	r1, r6
   17524:	4620      	mov	r0, r4
   17526:	681b      	ldr	r3, [r3, #0]
   17528:	4798      	blx	r3
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
   1752a:	b918      	cbnz	r0, 17534 <gpio_pin_configure+0x4c>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1752c:	683b      	ldr	r3, [r7, #0]
   1752e:	ea23 0505 	bic.w	r5, r3, r5
   17532:	603d      	str	r5, [r7, #0]
		flags &= ~GPIO_INT_DEBOUNCE;
		ret = z_impl_gpio_pin_interrupt_configure(port, pin, flags);
	}

	return ret;
}
   17534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17538:	00031610 	.word	0x00031610
   1753c:	000313c0 	.word	0x000313c0
   17540:	000300ff 	.word	0x000300ff
   17544:	0003164e 	.word	0x0003164e

00017548 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   17548:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1754a:	2501      	movs	r5, #1
   1754c:	6843      	ldr	r3, [r0, #4]
   1754e:	408d      	lsls	r5, r1
   17550:	681b      	ldr	r3, [r3, #0]
{
   17552:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   17554:	421d      	tst	r5, r3
{
   17556:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   17558:	d10e      	bne.n	17578 <gpio_pin_set_raw+0x30>
   1755a:	490d      	ldr	r1, [pc, #52]	; (17590 <gpio_pin_set_raw+0x48>)
   1755c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
   17560:	4a0c      	ldr	r2, [pc, #48]	; (17594 <gpio_pin_set_raw+0x4c>)
   17562:	480d      	ldr	r0, [pc, #52]	; (17598 <gpio_pin_set_raw+0x50>)
   17564:	f014 fda7 	bl	2c0b6 <printk>
   17568:	480c      	ldr	r0, [pc, #48]	; (1759c <gpio_pin_set_raw+0x54>)
   1756a:	f014 fda4 	bl	2c0b6 <printk>
   1756e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   17572:	4808      	ldr	r0, [pc, #32]	; (17594 <gpio_pin_set_raw+0x4c>)
   17574:	f014 ffbc 	bl	2c4f0 <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   17578:	b136      	cbz	r6, 17588 <gpio_pin_set_raw+0x40>
	return api->port_set_bits_raw(port, pins);
   1757a:	68a3      	ldr	r3, [r4, #8]
   1757c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1757e:	4629      	mov	r1, r5
   17580:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   17582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   17586:	4718      	bx	r3
   17588:	68a3      	ldr	r3, [r4, #8]
   1758a:	691b      	ldr	r3, [r3, #16]
   1758c:	e7f7      	b.n	1757e <gpio_pin_set_raw+0x36>
   1758e:	bf00      	nop
   17590:	00031610 	.word	0x00031610
   17594:	000313c0 	.word	0x000313c0
   17598:	000300ff 	.word	0x000300ff
   1759c:	0003164e 	.word	0x0003164e

000175a0 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   175a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   175a4:	4606      	mov	r6, r0
   175a6:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   175a8:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   175aa:	f8df 805c 	ldr.w	r8, [pc, #92]	; 17608 <dk_set_leds_state.part.0+0x68>
   175ae:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1760c <dk_set_leds_state.part.0+0x6c>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   175b2:	fa26 f204 	lsr.w	r2, r6, r4
   175b6:	fa27 f304 	lsr.w	r3, r7, r4
   175ba:	4313      	orrs	r3, r2
   175bc:	07db      	lsls	r3, r3, #31
   175be:	d518      	bpl.n	175f2 <dk_set_leds_state.part.0+0x52>
			int err = gpio_pin_set_raw(led_devs[i],
   175c0:	43d2      	mvns	r2, r2
   175c2:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   175c6:	7919      	ldrb	r1, [r3, #4]
   175c8:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   175cc:	f002 0201 	and.w	r2, r2, #1
   175d0:	f7ff ffba 	bl	17548 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   175d4:	4605      	mov	r5, r0
   175d6:	b160      	cbz	r0, 175f2 <dk_set_leds_state.part.0+0x52>
   175d8:	4908      	ldr	r1, [pc, #32]	; (175fc <dk_set_leds_state.part.0+0x5c>)
   175da:	4b09      	ldr	r3, [pc, #36]	; (17600 <dk_set_leds_state.part.0+0x60>)
				LOG_ERR("Cannot write LED gpio");
   175dc:	4809      	ldr	r0, [pc, #36]	; (17604 <dk_set_leds_state.part.0+0x64>)
   175de:	1ac9      	subs	r1, r1, r3
   175e0:	08c9      	lsrs	r1, r1, #3
   175e2:	0189      	lsls	r1, r1, #6
   175e4:	f041 0101 	orr.w	r1, r1, #1
   175e8:	f014 ffb2 	bl	2c550 <log_0>
			}
		}
	}

	return 0;
}
   175ec:	4628      	mov	r0, r5
   175ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   175f2:	3401      	adds	r4, #1
   175f4:	2c04      	cmp	r4, #4
   175f6:	d1dc      	bne.n	175b2 <dk_set_leds_state.part.0+0x12>
	return 0;
   175f8:	2500      	movs	r5, #0
   175fa:	e7f7      	b.n	175ec <dk_set_leds_state.part.0+0x4c>
   175fc:	0002ecac 	.word	0x0002ecac
   17600:	0002ec7c 	.word	0x0002ec7c
   17604:	00031660 	.word	0x00031660
   17608:	0002f068 	.word	0x0002f068
   1760c:	200216dc 	.word	0x200216dc

00017610 <button_pressed>:
{
   17610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   17612:	f04f 0320 	mov.w	r3, #32
   17616:	f3ef 8511 	mrs	r5, BASEPRI
   1761a:	f383 8811 	msr	BASEPRI, r3
   1761e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17622:	4830      	ldr	r0, [pc, #192]	; (176e4 <button_pressed+0xd4>)
   17624:	f00d f9b0 	bl	24988 <z_spin_lock_valid>
   17628:	b968      	cbnz	r0, 17646 <button_pressed+0x36>
   1762a:	235c      	movs	r3, #92	; 0x5c
   1762c:	4a2e      	ldr	r2, [pc, #184]	; (176e8 <button_pressed+0xd8>)
   1762e:	492f      	ldr	r1, [pc, #188]	; (176ec <button_pressed+0xdc>)
   17630:	482f      	ldr	r0, [pc, #188]	; (176f0 <button_pressed+0xe0>)
   17632:	f014 fd40 	bl	2c0b6 <printk>
   17636:	492b      	ldr	r1, [pc, #172]	; (176e4 <button_pressed+0xd4>)
   17638:	482e      	ldr	r0, [pc, #184]	; (176f4 <button_pressed+0xe4>)
   1763a:	f014 fd3c 	bl	2c0b6 <printk>
   1763e:	215c      	movs	r1, #92	; 0x5c
   17640:	4829      	ldr	r0, [pc, #164]	; (176e8 <button_pressed+0xd8>)
   17642:	f014 ff55 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   17646:	4827      	ldr	r0, [pc, #156]	; (176e4 <button_pressed+0xd4>)
   17648:	f00d f9bc 	bl	249c4 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1764c:	2400      	movs	r4, #0
   1764e:	4e2a      	ldr	r6, [pc, #168]	; (176f8 <button_pressed+0xe8>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   17650:	4f2a      	ldr	r7, [pc, #168]	; (176fc <button_pressed+0xec>)
   17652:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   17656:	f856 0b04 	ldr.w	r0, [r6], #4
   1765a:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1765c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   17660:	3401      	adds	r4, #1
   17662:	f7ff feab 	bl	173bc <z_impl_gpio_pin_interrupt_configure>
   17666:	2c04      	cmp	r4, #4
   17668:	d00c      	beq.n	17684 <button_pressed+0x74>
   1766a:	2800      	cmp	r0, #0
   1766c:	d0f1      	beq.n	17652 <button_pressed+0x42>
   1766e:	4b24      	ldr	r3, [pc, #144]	; (17700 <button_pressed+0xf0>)
   17670:	4924      	ldr	r1, [pc, #144]	; (17704 <button_pressed+0xf4>)
		LOG_ERR("Cannot disable callbacks");
   17672:	4825      	ldr	r0, [pc, #148]	; (17708 <button_pressed+0xf8>)
   17674:	1ac9      	subs	r1, r1, r3
   17676:	08c9      	lsrs	r1, r1, #3
   17678:	0189      	lsls	r1, r1, #6
   1767a:	f041 0101 	orr.w	r1, r1, #1
   1767e:	f014 ff67 	bl	2c550 <log_0>
   17682:	e001      	b.n	17688 <button_pressed+0x78>
	if (err) {
   17684:	2800      	cmp	r0, #0
   17686:	d1f2      	bne.n	1766e <button_pressed+0x5e>
	switch (state) {
   17688:	4b20      	ldr	r3, [pc, #128]	; (1770c <button_pressed+0xfc>)
   1768a:	781a      	ldrb	r2, [r3, #0]
   1768c:	b9f2      	cbnz	r2, 176cc <button_pressed+0xbc>
		state = STATE_SCANNING;
   1768e:	2201      	movs	r2, #1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   17690:	491f      	ldr	r1, [pc, #124]	; (17710 <button_pressed+0x100>)
   17692:	701a      	strb	r2, [r3, #0]
   17694:	481f      	ldr	r0, [pc, #124]	; (17714 <button_pressed+0x104>)
   17696:	2221      	movs	r2, #33	; 0x21
   17698:	2300      	movs	r3, #0
   1769a:	f00d f9c3 	bl	24a24 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1769e:	4811      	ldr	r0, [pc, #68]	; (176e4 <button_pressed+0xd4>)
   176a0:	f00d f980 	bl	249a4 <z_spin_unlock_valid>
   176a4:	b968      	cbnz	r0, 176c2 <button_pressed+0xb2>
   176a6:	2384      	movs	r3, #132	; 0x84
   176a8:	4a0f      	ldr	r2, [pc, #60]	; (176e8 <button_pressed+0xd8>)
   176aa:	491b      	ldr	r1, [pc, #108]	; (17718 <button_pressed+0x108>)
   176ac:	4810      	ldr	r0, [pc, #64]	; (176f0 <button_pressed+0xe0>)
   176ae:	f014 fd02 	bl	2c0b6 <printk>
   176b2:	490c      	ldr	r1, [pc, #48]	; (176e4 <button_pressed+0xd4>)
   176b4:	4819      	ldr	r0, [pc, #100]	; (1771c <button_pressed+0x10c>)
   176b6:	f014 fcfe 	bl	2c0b6 <printk>
   176ba:	2184      	movs	r1, #132	; 0x84
   176bc:	480a      	ldr	r0, [pc, #40]	; (176e8 <button_pressed+0xd8>)
   176be:	f014 ff17 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   176c2:	f385 8811 	msr	BASEPRI, r5
   176c6:	f3bf 8f6f 	isb	sy
}
   176ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   176cc:	23eb      	movs	r3, #235	; 0xeb
   176ce:	4a14      	ldr	r2, [pc, #80]	; (17720 <button_pressed+0x110>)
   176d0:	4914      	ldr	r1, [pc, #80]	; (17724 <button_pressed+0x114>)
   176d2:	4807      	ldr	r0, [pc, #28]	; (176f0 <button_pressed+0xe0>)
   176d4:	f014 fcef 	bl	2c0b6 <printk>
   176d8:	21eb      	movs	r1, #235	; 0xeb
   176da:	4811      	ldr	r0, [pc, #68]	; (17720 <button_pressed+0x110>)
   176dc:	f014 ff08 	bl	2c4f0 <assert_post_action>
		break;
   176e0:	e7dd      	b.n	1769e <button_pressed+0x8e>
   176e2:	bf00      	nop
   176e4:	200216ec 	.word	0x200216ec
   176e8:	000301cf 	.word	0x000301cf
   176ec:	00030221 	.word	0x00030221
   176f0:	000300ff 	.word	0x000300ff
   176f4:	00030236 	.word	0x00030236
   176f8:	20021698 	.word	0x20021698
   176fc:	0002f048 	.word	0x0002f048
   17700:	0002ec7c 	.word	0x0002ec7c
   17704:	0002ecac 	.word	0x0002ecac
   17708:	00031676 	.word	0x00031676
   1770c:	200247d9 	.word	0x200247d9
   17710:	20020ec0 	.word	0x20020ec0
   17714:	20021348 	.word	0x20021348
   17718:	000301f5 	.word	0x000301f5
   1771c:	0003020c 	.word	0x0003020c
   17720:	0003168f 	.word	0x0003168f
   17724:	00032bdb 	.word	0x00032bdb

00017728 <buttons_scan_fn>:
{
   17728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   1772c:	2400      	movs	r4, #0
   1772e:	4e7b      	ldr	r6, [pc, #492]	; (1791c <buttons_scan_fn+0x1f4>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17730:	4625      	mov	r5, r4
{
   17732:	46b2      	mov	sl, r6
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   17734:	f8df b20c 	ldr.w	fp, [pc, #524]	; 17944 <buttons_scan_fn+0x21c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   17738:	4f79      	ldr	r7, [pc, #484]	; (17920 <buttons_scan_fn+0x1f8>)
   1773a:	f04f 0801 	mov.w	r8, #1
   1773e:	eb0b 03c5 	add.w	r3, fp, r5, lsl #3
   17742:	791b      	ldrb	r3, [r3, #4]
   17744:	f85a 9b04 	ldr.w	r9, [sl], #4
   17748:	fa08 f803 	lsl.w	r8, r8, r3
   1774c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   17750:	681b      	ldr	r3, [r3, #0]
   17752:	ea18 0f03 	tst.w	r8, r3
   17756:	d10e      	bne.n	17776 <buttons_scan_fn+0x4e>
   17758:	4972      	ldr	r1, [pc, #456]	; (17924 <buttons_scan_fn+0x1fc>)
   1775a:	f44f 735e 	mov.w	r3, #888	; 0x378
   1775e:	463a      	mov	r2, r7
   17760:	4871      	ldr	r0, [pc, #452]	; (17928 <buttons_scan_fn+0x200>)
   17762:	f014 fca8 	bl	2c0b6 <printk>
   17766:	4871      	ldr	r0, [pc, #452]	; (1792c <buttons_scan_fn+0x204>)
   17768:	f014 fca5 	bl	2c0b6 <printk>
   1776c:	f44f 715e 	mov.w	r1, #888	; 0x378
   17770:	4638      	mov	r0, r7
   17772:	f014 febd 	bl	2c4f0 <assert_post_action>
	return api->port_get_raw(port, value);
   17776:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1777a:	4648      	mov	r0, r9
   1777c:	685b      	ldr	r3, [r3, #4]
   1777e:	a901      	add	r1, sp, #4
   17780:	4798      	blx	r3
	if (ret == 0) {
   17782:	2800      	cmp	r0, #0
   17784:	d17e      	bne.n	17884 <buttons_scan_fn+0x15c>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   17786:	9b01      	ldr	r3, [sp, #4]
   17788:	ea18 0f03 	tst.w	r8, r3
   1778c:	d003      	beq.n	17796 <buttons_scan_fn+0x6e>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1778e:	3501      	adds	r5, #1
   17790:	2d04      	cmp	r5, #4
   17792:	d1d2      	bne.n	1773a <buttons_scan_fn+0x12>
   17794:	e082      	b.n	1789c <buttons_scan_fn+0x174>
			ret |= 1U << i;
   17796:	2301      	movs	r3, #1
   17798:	40ab      	lsls	r3, r5
   1779a:	431c      	orrs	r4, r3
   1779c:	e7f7      	b.n	1778e <buttons_scan_fn+0x66>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1779e:	3d04      	subs	r5, #4
   177a0:	2d00      	cmp	r5, #0
   177a2:	f000 809e 	beq.w	178e2 <buttons_scan_fn+0x1ba>
			handler->cb(button_state, has_changed);
   177a6:	46aa      	mov	sl, r5
   177a8:	f85a 3b04 	ldr.w	r3, [sl], #4
   177ac:	4641      	mov	r1, r8
   177ae:	4620      	mov	r0, r4
   177b0:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   177b2:	f1ba 0f00 	cmp.w	sl, #0
   177b6:	f000 8094 	beq.w	178e2 <buttons_scan_fn+0x1ba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   177ba:	686d      	ldr	r5, [r5, #4]
	return node->next;
   177bc:	e08e      	b.n	178dc <buttons_scan_fn+0x1b4>
		initial_run = false;
   177be:	2200      	movs	r2, #0
   177c0:	701a      	strb	r2, [r3, #0]
   177c2:	e091      	b.n	178e8 <buttons_scan_fn+0x1c0>
	__asm__ volatile(
   177c4:	f04f 0320 	mov.w	r3, #32
   177c8:	f3ef 8811 	mrs	r8, BASEPRI
   177cc:	f383 8811 	msr	BASEPRI, r3
   177d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   177d4:	4856      	ldr	r0, [pc, #344]	; (17930 <buttons_scan_fn+0x208>)
   177d6:	f00d f8d7 	bl	24988 <z_spin_lock_valid>
   177da:	b968      	cbnz	r0, 177f8 <buttons_scan_fn+0xd0>
   177dc:	235c      	movs	r3, #92	; 0x5c
   177de:	4a55      	ldr	r2, [pc, #340]	; (17934 <buttons_scan_fn+0x20c>)
   177e0:	4955      	ldr	r1, [pc, #340]	; (17938 <buttons_scan_fn+0x210>)
   177e2:	4851      	ldr	r0, [pc, #324]	; (17928 <buttons_scan_fn+0x200>)
   177e4:	f014 fc67 	bl	2c0b6 <printk>
   177e8:	4951      	ldr	r1, [pc, #324]	; (17930 <buttons_scan_fn+0x208>)
   177ea:	4854      	ldr	r0, [pc, #336]	; (1793c <buttons_scan_fn+0x214>)
   177ec:	f014 fc63 	bl	2c0b6 <printk>
   177f0:	215c      	movs	r1, #92	; 0x5c
   177f2:	4850      	ldr	r0, [pc, #320]	; (17934 <buttons_scan_fn+0x20c>)
   177f4:	f014 fe7c 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   177f8:	484d      	ldr	r0, [pc, #308]	; (17930 <buttons_scan_fn+0x208>)
   177fa:	f00d f8e3 	bl	249c4 <z_spin_lock_set_owner>
		switch (state) {
   177fe:	4b50      	ldr	r3, [pc, #320]	; (17940 <buttons_scan_fn+0x218>)
   17800:	781a      	ldrb	r2, [r3, #0]
   17802:	2a01      	cmp	r2, #1
   17804:	d132      	bne.n	1786c <buttons_scan_fn+0x144>
			state = STATE_WAITING;
   17806:	2200      	movs	r2, #0
   17808:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   1780a:	4b4e      	ldr	r3, [pc, #312]	; (17944 <buttons_scan_fn+0x21c>)
   1780c:	f856 0b04 	ldr.w	r0, [r6], #4
   17810:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   17814:	7919      	ldrb	r1, [r3, #4]
   17816:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   1781a:	f7ff fdcf 	bl	173bc <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1781e:	3401      	adds	r4, #1
   17820:	2c04      	cmp	r4, #4
   17822:	4605      	mov	r5, r0
   17824:	d001      	beq.n	1782a <buttons_scan_fn+0x102>
   17826:	2800      	cmp	r0, #0
   17828:	d0ef      	beq.n	1780a <buttons_scan_fn+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1782a:	4841      	ldr	r0, [pc, #260]	; (17930 <buttons_scan_fn+0x208>)
   1782c:	f00d f8ba 	bl	249a4 <z_spin_unlock_valid>
   17830:	b968      	cbnz	r0, 1784e <buttons_scan_fn+0x126>
   17832:	2384      	movs	r3, #132	; 0x84
   17834:	4a3f      	ldr	r2, [pc, #252]	; (17934 <buttons_scan_fn+0x20c>)
   17836:	4944      	ldr	r1, [pc, #272]	; (17948 <buttons_scan_fn+0x220>)
   17838:	483b      	ldr	r0, [pc, #236]	; (17928 <buttons_scan_fn+0x200>)
   1783a:	f014 fc3c 	bl	2c0b6 <printk>
   1783e:	493c      	ldr	r1, [pc, #240]	; (17930 <buttons_scan_fn+0x208>)
   17840:	4842      	ldr	r0, [pc, #264]	; (1794c <buttons_scan_fn+0x224>)
   17842:	f014 fc38 	bl	2c0b6 <printk>
   17846:	2184      	movs	r1, #132	; 0x84
   17848:	483a      	ldr	r0, [pc, #232]	; (17934 <buttons_scan_fn+0x20c>)
   1784a:	f014 fe51 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   1784e:	f388 8811 	msr	BASEPRI, r8
   17852:	f3bf 8f6f 	isb	sy
		if (err) {
   17856:	2d00      	cmp	r5, #0
   17858:	d05c      	beq.n	17914 <buttons_scan_fn+0x1ec>
   1785a:	493d      	ldr	r1, [pc, #244]	; (17950 <buttons_scan_fn+0x228>)
   1785c:	4b3d      	ldr	r3, [pc, #244]	; (17954 <buttons_scan_fn+0x22c>)
			LOG_ERR("Cannot enable callbacks");
   1785e:	483e      	ldr	r0, [pc, #248]	; (17958 <buttons_scan_fn+0x230>)
   17860:	1ac9      	subs	r1, r1, r3
   17862:	08c9      	lsrs	r1, r1, #3
   17864:	0189      	lsls	r1, r1, #6
   17866:	f041 0101 	orr.w	r1, r1, #1
   1786a:	e051      	b.n	17910 <buttons_scan_fn+0x1e8>
			__ASSERT_NO_MSG(false);
   1786c:	23b4      	movs	r3, #180	; 0xb4
   1786e:	4a3b      	ldr	r2, [pc, #236]	; (1795c <buttons_scan_fn+0x234>)
   17870:	493b      	ldr	r1, [pc, #236]	; (17960 <buttons_scan_fn+0x238>)
   17872:	482d      	ldr	r0, [pc, #180]	; (17928 <buttons_scan_fn+0x200>)
   17874:	f014 fc1f 	bl	2c0b6 <printk>
   17878:	21b4      	movs	r1, #180	; 0xb4
   1787a:	4838      	ldr	r0, [pc, #224]	; (1795c <buttons_scan_fn+0x234>)
   1787c:	f014 fe38 	bl	2c4f0 <assert_post_action>
		int err = 0;
   17880:	2500      	movs	r5, #0
			break;
   17882:	e7d2      	b.n	1782a <buttons_scan_fn+0x102>
		if (val < 0) {
   17884:	da83      	bge.n	1778e <buttons_scan_fn+0x66>
   17886:	4b33      	ldr	r3, [pc, #204]	; (17954 <buttons_scan_fn+0x22c>)
   17888:	4931      	ldr	r1, [pc, #196]	; (17950 <buttons_scan_fn+0x228>)
			LOG_ERR("Cannot read gpio pin");
   1788a:	4836      	ldr	r0, [pc, #216]	; (17964 <buttons_scan_fn+0x23c>)
   1788c:	1ac9      	subs	r1, r1, r3
   1788e:	08c9      	lsrs	r1, r1, #3
   17890:	0189      	lsls	r1, r1, #6
   17892:	f041 0101 	orr.w	r1, r1, #1
   17896:	f014 fe5b 	bl	2c550 <log_0>
			return 0;
   1789a:	2400      	movs	r4, #0
   1789c:	4b32      	ldr	r3, [pc, #200]	; (17968 <buttons_scan_fn+0x240>)
   1789e:	e8d3 2fef 	ldaex	r2, [r3]
   178a2:	e8c3 4fe1 	stlex	r1, r4, [r3]
   178a6:	2900      	cmp	r1, #0
   178a8:	d1f9      	bne.n	1789e <buttons_scan_fn+0x176>
	if (!initial_run) {
   178aa:	4b30      	ldr	r3, [pc, #192]	; (1796c <buttons_scan_fn+0x244>)
   178ac:	4f30      	ldr	r7, [pc, #192]	; (17970 <buttons_scan_fn+0x248>)
   178ae:	781a      	ldrb	r2, [r3, #0]
   178b0:	2a00      	cmp	r2, #0
   178b2:	d184      	bne.n	177be <buttons_scan_fn+0x96>
		if (button_scan != last_button_scan) {
   178b4:	6839      	ldr	r1, [r7, #0]
   178b6:	42a1      	cmp	r1, r4
   178b8:	d016      	beq.n	178e8 <buttons_scan_fn+0x1c0>
	if (button_handler_cb != NULL) {
   178ba:	4b2e      	ldr	r3, [pc, #184]	; (17974 <buttons_scan_fn+0x24c>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   178bc:	ea81 0804 	eor.w	r8, r1, r4
	if (button_handler_cb != NULL) {
   178c0:	681b      	ldr	r3, [r3, #0]
   178c2:	b113      	cbz	r3, 178ca <buttons_scan_fn+0x1a2>
		button_handler_cb(button_state, has_changed);
   178c4:	4641      	mov	r1, r8
   178c6:	4620      	mov	r0, r4
   178c8:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   178ca:	f04f 33ff 	mov.w	r3, #4294967295
   178ce:	f04f 32ff 	mov.w	r2, #4294967295
   178d2:	4829      	ldr	r0, [pc, #164]	; (17978 <buttons_scan_fn+0x250>)
   178d4:	f00b f9be 	bl	22c54 <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   178d8:	4b28      	ldr	r3, [pc, #160]	; (1797c <buttons_scan_fn+0x254>)
   178da:	681d      	ldr	r5, [r3, #0]
   178dc:	2d00      	cmp	r5, #0
   178de:	f47f af5e 	bne.w	1779e <buttons_scan_fn+0x76>
	return z_impl_k_mutex_unlock(mutex);
   178e2:	4825      	ldr	r0, [pc, #148]	; (17978 <buttons_scan_fn+0x250>)
   178e4:	f00b fab0 	bl	22e48 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   178e8:	603c      	str	r4, [r7, #0]
	if (button_scan != 0) {
   178ea:	2c00      	cmp	r4, #0
   178ec:	f43f af6a 	beq.w	177c4 <buttons_scan_fn+0x9c>
   178f0:	f44f 72a4 	mov.w	r2, #328	; 0x148
   178f4:	2300      	movs	r3, #0
   178f6:	4922      	ldr	r1, [pc, #136]	; (17980 <buttons_scan_fn+0x258>)
   178f8:	4822      	ldr	r0, [pc, #136]	; (17984 <buttons_scan_fn+0x25c>)
   178fa:	f00d f893 	bl	24a24 <k_delayed_work_submit_to_queue>
		if (err) {
   178fe:	b148      	cbz	r0, 17914 <buttons_scan_fn+0x1ec>
   17900:	4913      	ldr	r1, [pc, #76]	; (17950 <buttons_scan_fn+0x228>)
   17902:	4b14      	ldr	r3, [pc, #80]	; (17954 <buttons_scan_fn+0x22c>)
			LOG_ERR("Cannot add work to workqueue");
   17904:	4820      	ldr	r0, [pc, #128]	; (17988 <buttons_scan_fn+0x260>)
   17906:	1ac9      	subs	r1, r1, r3
   17908:	08c9      	lsrs	r1, r1, #3
   1790a:	0189      	lsls	r1, r1, #6
   1790c:	f041 0101 	orr.w	r1, r1, #1
			LOG_ERR("Cannot enable callbacks");
   17910:	f014 fe1e 	bl	2c550 <log_0>
}
   17914:	b003      	add	sp, #12
   17916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1791a:	bf00      	nop
   1791c:	20021698 	.word	0x20021698
   17920:	000313c0 	.word	0x000313c0
   17924:	00031610 	.word	0x00031610
   17928:	000300ff 	.word	0x000300ff
   1792c:	0003164e 	.word	0x0003164e
   17930:	200216ec 	.word	0x200216ec
   17934:	000301cf 	.word	0x000301cf
   17938:	00030221 	.word	0x00030221
   1793c:	00030236 	.word	0x00030236
   17940:	200247d9 	.word	0x200247d9
   17944:	0002f048 	.word	0x0002f048
   17948:	000301f5 	.word	0x000301f5
   1794c:	0003020c 	.word	0x0003020c
   17950:	0002ecac 	.word	0x0002ecac
   17954:	0002ec7c 	.word	0x0002ec7c
   17958:	000316ff 	.word	0x000316ff
   1795c:	0003168f 	.word	0x0003168f
   17960:	00032bdb 	.word	0x00032bdb
   17964:	000316cd 	.word	0x000316cd
   17968:	200216f0 	.word	0x200216f0
   1796c:	20020a5c 	.word	0x20020a5c
   17970:	200216d4 	.word	0x200216d4
   17974:	200216a8 	.word	0x200216a8
   17978:	200216ac 	.word	0x200216ac
   1797c:	200216c0 	.word	0x200216c0
   17980:	20020ec0 	.word	0x20020ec0
   17984:	20021348 	.word	0x20021348
   17988:	000316e2 	.word	0x000316e2

0001798c <dk_leds_init>:
{
   1798c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1798e:	2600      	movs	r6, #0
   17990:	4d18      	ldr	r5, [pc, #96]	; (179f4 <dk_leds_init+0x68>)
   17992:	4f19      	ldr	r7, [pc, #100]	; (179f8 <dk_leds_init+0x6c>)
		led_devs[i] = device_get_binding(led_pins[i].port);
   17994:	6828      	ldr	r0, [r5, #0]
   17996:	f00a fc4b 	bl	22230 <z_impl_device_get_binding>
   1799a:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
   1799e:	b968      	cbnz	r0, 179bc <dk_leds_init+0x30>
   179a0:	4b16      	ldr	r3, [pc, #88]	; (179fc <dk_leds_init+0x70>)
   179a2:	4917      	ldr	r1, [pc, #92]	; (17a00 <dk_leds_init+0x74>)
			LOG_ERR("Cannot bind gpio device");
   179a4:	4817      	ldr	r0, [pc, #92]	; (17a04 <dk_leds_init+0x78>)
   179a6:	1ac9      	subs	r1, r1, r3
   179a8:	08c9      	lsrs	r1, r1, #3
   179aa:	0189      	lsls	r1, r1, #6
   179ac:	f041 0101 	orr.w	r1, r1, #1
   179b0:	f014 fdce 	bl	2c550 <log_0>
			return -ENODEV;
   179b4:	f06f 0412 	mvn.w	r4, #18
}
   179b8:	4620      	mov	r0, r4
   179ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   179bc:	f44f 7200 	mov.w	r2, #512	; 0x200
   179c0:	7929      	ldrb	r1, [r5, #4]
   179c2:	f7ff fd91 	bl	174e8 <gpio_pin_configure>
		if (err) {
   179c6:	4604      	mov	r4, r0
   179c8:	b150      	cbz	r0, 179e0 <dk_leds_init+0x54>
   179ca:	4b0c      	ldr	r3, [pc, #48]	; (179fc <dk_leds_init+0x70>)
   179cc:	490c      	ldr	r1, [pc, #48]	; (17a00 <dk_leds_init+0x74>)
			LOG_ERR("Cannot configure LED gpio");
   179ce:	480e      	ldr	r0, [pc, #56]	; (17a08 <dk_leds_init+0x7c>)
   179d0:	1ac9      	subs	r1, r1, r3
   179d2:	08c9      	lsrs	r1, r1, #3
   179d4:	0189      	lsls	r1, r1, #6
   179d6:	f041 0101 	orr.w	r1, r1, #1
   179da:	f014 fdb9 	bl	2c550 <log_0>
			return err;
   179de:	e7eb      	b.n	179b8 <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   179e0:	3601      	adds	r6, #1
   179e2:	2e04      	cmp	r6, #4
   179e4:	f105 0508 	add.w	r5, r5, #8
   179e8:	d1d4      	bne.n	17994 <dk_leds_init+0x8>
}
   179ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   179ee:	210f      	movs	r1, #15
   179f0:	f7ff bdd6 	b.w	175a0 <dk_set_leds_state.part.0>
   179f4:	0002f068 	.word	0x0002f068
   179f8:	200216dc 	.word	0x200216dc
   179fc:	0002ec7c 	.word	0x0002ec7c
   17a00:	0002ecac 	.word	0x0002ecac
   17a04:	00031717 	.word	0x00031717
   17a08:	0003172f 	.word	0x0003172f

00017a0c <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17a0c:	4b05      	ldr	r3, [pc, #20]	; (17a24 <dk_read_buttons+0x18>)
   17a0e:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   17a12:	b100      	cbz	r0, 17a16 <dk_read_buttons+0xa>
		*button_state = current_state;
   17a14:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   17a16:	4804      	ldr	r0, [pc, #16]	; (17a28 <dk_read_buttons+0x1c>)
   17a18:	b111      	cbz	r1, 17a20 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   17a1a:	6802      	ldr	r2, [r0, #0]
   17a1c:	405a      	eors	r2, r3
   17a1e:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   17a20:	6003      	str	r3, [r0, #0]
}
   17a22:	4770      	bx	lr
   17a24:	200216f0 	.word	0x200216f0
   17a28:	200216d8 	.word	0x200216d8

00017a2c <dk_buttons_init>:
{
   17a2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   17a30:	4b48      	ldr	r3, [pc, #288]	; (17b54 <dk_buttons_init+0x128>)
   17a32:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   17a34:	4d48      	ldr	r5, [pc, #288]	; (17b58 <dk_buttons_init+0x12c>)
   17a36:	4f49      	ldr	r7, [pc, #292]	; (17b5c <dk_buttons_init+0x130>)
   17a38:	4849      	ldr	r0, [pc, #292]	; (17b60 <dk_buttons_init+0x134>)
   17a3a:	f016 fde3 	bl	2e604 <z_impl_k_mutex_init>
   17a3e:	46b9      	mov	r9, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17a40:	2600      	movs	r6, #0
   17a42:	46a8      	mov	r8, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   17a44:	6828      	ldr	r0, [r5, #0]
   17a46:	f00a fbf3 	bl	22230 <z_impl_device_get_binding>
   17a4a:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   17a4e:	b970      	cbnz	r0, 17a6e <dk_buttons_init+0x42>
   17a50:	4b44      	ldr	r3, [pc, #272]	; (17b64 <dk_buttons_init+0x138>)
   17a52:	4945      	ldr	r1, [pc, #276]	; (17b68 <dk_buttons_init+0x13c>)
			LOG_ERR("Cannot bind gpio device");
   17a54:	4845      	ldr	r0, [pc, #276]	; (17b6c <dk_buttons_init+0x140>)
   17a56:	1ac9      	subs	r1, r1, r3
   17a58:	08c9      	lsrs	r1, r1, #3
   17a5a:	0189      	lsls	r1, r1, #6
   17a5c:	f041 0101 	orr.w	r1, r1, #1
   17a60:	f014 fd76 	bl	2c550 <log_0>
			return -ENODEV;
   17a64:	f06f 0412 	mvn.w	r4, #18
}
   17a68:	4620      	mov	r0, r4
   17a6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   17a6e:	f44f 7288 	mov.w	r2, #272	; 0x110
   17a72:	7929      	ldrb	r1, [r5, #4]
   17a74:	f7ff fd38 	bl	174e8 <gpio_pin_configure>
		if (err) {
   17a78:	4604      	mov	r4, r0
   17a7a:	b150      	cbz	r0, 17a92 <dk_buttons_init+0x66>
   17a7c:	493a      	ldr	r1, [pc, #232]	; (17b68 <dk_buttons_init+0x13c>)
   17a7e:	4b39      	ldr	r3, [pc, #228]	; (17b64 <dk_buttons_init+0x138>)
			LOG_ERR("Cannot configure button gpio");
   17a80:	483b      	ldr	r0, [pc, #236]	; (17b70 <dk_buttons_init+0x144>)
   17a82:	1ac9      	subs	r1, r1, r3
   17a84:	08c9      	lsrs	r1, r1, #3
   17a86:	0189      	lsls	r1, r1, #6
   17a88:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Cannot add work to workqueue");
   17a8c:	f014 fd60 	bl	2c550 <log_0>
		return err;
   17a90:	e7ea      	b.n	17a68 <dk_buttons_init+0x3c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17a92:	3601      	adds	r6, #1
   17a94:	2e04      	cmp	r6, #4
   17a96:	f105 0508 	add.w	r5, r5, #8
   17a9a:	d1d3      	bne.n	17a44 <dk_buttons_init+0x18>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17a9c:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   17a9e:	4681      	mov	r9, r0
		pin_mask |= BIT(button_pins[i].number);
   17aa0:	f04f 0b01 	mov.w	fp, #1
   17aa4:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 17b5c <dk_buttons_init+0x130>
		err = gpio_pin_interrupt_configure(button_devs[i],
   17aa8:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
   17aac:	f85a 0b04 	ldr.w	r0, [sl], #4
   17ab0:	791e      	ldrb	r6, [r3, #4]
   17ab2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   17ab6:	4631      	mov	r1, r6
   17ab8:	f7ff fc80 	bl	173bc <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   17abc:	4604      	mov	r4, r0
   17abe:	b140      	cbz	r0, 17ad2 <dk_buttons_init+0xa6>
   17ac0:	4929      	ldr	r1, [pc, #164]	; (17b68 <dk_buttons_init+0x13c>)
   17ac2:	4b28      	ldr	r3, [pc, #160]	; (17b64 <dk_buttons_init+0x138>)
			LOG_ERR("Cannot disable callbacks()");
   17ac4:	482b      	ldr	r0, [pc, #172]	; (17b74 <dk_buttons_init+0x148>)
   17ac6:	1ac9      	subs	r1, r1, r3
   17ac8:	08c9      	lsrs	r1, r1, #3
   17aca:	0189      	lsls	r1, r1, #6
   17acc:	f041 0101 	orr.w	r1, r1, #1
   17ad0:	e7dc      	b.n	17a8c <dk_buttons_init+0x60>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17ad2:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   17ad4:	fa0b f606 	lsl.w	r6, fp, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17ad8:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   17ada:	ea49 0906 	orr.w	r9, r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17ade:	d1e3      	bne.n	17aa8 <dk_buttons_init+0x7c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17ae0:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   17ae2:	4e25      	ldr	r6, [pc, #148]	; (17b78 <dk_buttons_init+0x14c>)
   17ae4:	4b25      	ldr	r3, [pc, #148]	; (17b7c <dk_buttons_init+0x150>)
	callback->pin_mask = pin_mask;
   17ae6:	e9c6 3901 	strd	r3, r9, [r6, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   17aea:	f857 0b04 	ldr.w	r0, [r7], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   17aee:	6883      	ldr	r3, [r0, #8]
   17af0:	69db      	ldr	r3, [r3, #28]
   17af2:	b16b      	cbz	r3, 17b10 <dk_buttons_init+0xe4>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   17af4:	2201      	movs	r2, #1
   17af6:	4631      	mov	r1, r6
   17af8:	4798      	blx	r3
		if (err) {
   17afa:	4604      	mov	r4, r0
   17afc:	b158      	cbz	r0, 17b16 <dk_buttons_init+0xea>
   17afe:	491a      	ldr	r1, [pc, #104]	; (17b68 <dk_buttons_init+0x13c>)
   17b00:	4b18      	ldr	r3, [pc, #96]	; (17b64 <dk_buttons_init+0x138>)
			LOG_ERR("Cannot add callback");
   17b02:	481f      	ldr	r0, [pc, #124]	; (17b80 <dk_buttons_init+0x154>)
   17b04:	1ac9      	subs	r1, r1, r3
   17b06:	08c9      	lsrs	r1, r1, #3
   17b08:	0189      	lsls	r1, r1, #6
   17b0a:	f041 0101 	orr.w	r1, r1, #1
   17b0e:	e7bd      	b.n	17a8c <dk_buttons_init+0x60>
		return -ENOTSUP;
   17b10:	f06f 0485 	mvn.w	r4, #133	; 0x85
   17b14:	e7f3      	b.n	17afe <dk_buttons_init+0xd2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17b16:	3501      	adds	r5, #1
   17b18:	2d04      	cmp	r5, #4
   17b1a:	d1e6      	bne.n	17aea <dk_buttons_init+0xbe>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   17b1c:	4919      	ldr	r1, [pc, #100]	; (17b84 <dk_buttons_init+0x158>)
   17b1e:	481a      	ldr	r0, [pc, #104]	; (17b88 <dk_buttons_init+0x15c>)
   17b20:	f016 fe56 	bl	2e7d0 <k_delayed_work_init>
	state = STATE_SCANNING;
   17b24:	2201      	movs	r2, #1
   17b26:	4b19      	ldr	r3, [pc, #100]	; (17b8c <dk_buttons_init+0x160>)
   17b28:	4917      	ldr	r1, [pc, #92]	; (17b88 <dk_buttons_init+0x15c>)
   17b2a:	701a      	strb	r2, [r3, #0]
   17b2c:	4818      	ldr	r0, [pc, #96]	; (17b90 <dk_buttons_init+0x164>)
   17b2e:	2200      	movs	r2, #0
   17b30:	2300      	movs	r3, #0
   17b32:	f00c ff77 	bl	24a24 <k_delayed_work_submit_to_queue>
	if (err) {
   17b36:	4604      	mov	r4, r0
   17b38:	b140      	cbz	r0, 17b4c <dk_buttons_init+0x120>
   17b3a:	490b      	ldr	r1, [pc, #44]	; (17b68 <dk_buttons_init+0x13c>)
   17b3c:	4b09      	ldr	r3, [pc, #36]	; (17b64 <dk_buttons_init+0x138>)
		LOG_ERR("Cannot add work to workqueue");
   17b3e:	4815      	ldr	r0, [pc, #84]	; (17b94 <dk_buttons_init+0x168>)
   17b40:	1ac9      	subs	r1, r1, r3
   17b42:	08c9      	lsrs	r1, r1, #3
   17b44:	0189      	lsls	r1, r1, #6
   17b46:	f041 0101 	orr.w	r1, r1, #1
   17b4a:	e79f      	b.n	17a8c <dk_buttons_init+0x60>
	dk_read_buttons(NULL, NULL);
   17b4c:	4601      	mov	r1, r0
   17b4e:	f7ff ff5d 	bl	17a0c <dk_read_buttons>
	return 0;
   17b52:	e789      	b.n	17a68 <dk_buttons_init+0x3c>
   17b54:	200216a8 	.word	0x200216a8
   17b58:	0002f048 	.word	0x0002f048
   17b5c:	20021698 	.word	0x20021698
   17b60:	200216ac 	.word	0x200216ac
   17b64:	0002ec7c 	.word	0x0002ec7c
   17b68:	0002ecac 	.word	0x0002ecac
   17b6c:	00031717 	.word	0x00031717
   17b70:	00031749 	.word	0x00031749
   17b74:	00031766 	.word	0x00031766
   17b78:	200216c8 	.word	0x200216c8
   17b7c:	00017611 	.word	0x00017611
   17b80:	00031781 	.word	0x00031781
   17b84:	00017729 	.word	0x00017729
   17b88:	20020ec0 	.word	0x20020ec0
   17b8c:	200247d9 	.word	0x200247d9
   17b90:	20021348 	.word	0x20021348
   17b94:	000316e2 	.word	0x000316e2

00017b98 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   17b98:	2804      	cmp	r0, #4
{
   17b9a:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
   17b9c:	d90d      	bls.n	17bba <dk_set_led+0x22>
   17b9e:	4b14      	ldr	r3, [pc, #80]	; (17bf0 <dk_set_led+0x58>)
   17ba0:	4914      	ldr	r1, [pc, #80]	; (17bf4 <dk_set_led+0x5c>)
		LOG_ERR("LED index out of the range");
   17ba2:	4815      	ldr	r0, [pc, #84]	; (17bf8 <dk_set_led+0x60>)
   17ba4:	1ac9      	subs	r1, r1, r3
   17ba6:	08c9      	lsrs	r1, r1, #3
   17ba8:	0189      	lsls	r1, r1, #6
   17baa:	f041 0101 	orr.w	r1, r1, #1
   17bae:	f014 fccf 	bl	2c550 <log_0>
		return -EINVAL;
   17bb2:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   17bb6:	4620      	mov	r0, r4
   17bb8:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   17bba:	fab1 f281 	clz	r2, r1
   17bbe:	4b0f      	ldr	r3, [pc, #60]	; (17bfc <dk_set_led+0x64>)
   17bc0:	0952      	lsrs	r2, r2, #5
   17bc2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   17bc6:	7919      	ldrb	r1, [r3, #4]
   17bc8:	4b0d      	ldr	r3, [pc, #52]	; (17c00 <dk_set_led+0x68>)
   17bca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   17bce:	f7ff fcbb 	bl	17548 <gpio_pin_set_raw>
	if (err) {
   17bd2:	4604      	mov	r4, r0
   17bd4:	2800      	cmp	r0, #0
   17bd6:	d0ee      	beq.n	17bb6 <dk_set_led+0x1e>
   17bd8:	4b05      	ldr	r3, [pc, #20]	; (17bf0 <dk_set_led+0x58>)
   17bda:	4906      	ldr	r1, [pc, #24]	; (17bf4 <dk_set_led+0x5c>)
		LOG_ERR("Cannot write LED gpio");
   17bdc:	4809      	ldr	r0, [pc, #36]	; (17c04 <dk_set_led+0x6c>)
   17bde:	1ac9      	subs	r1, r1, r3
   17be0:	08c9      	lsrs	r1, r1, #3
   17be2:	0189      	lsls	r1, r1, #6
   17be4:	f041 0101 	orr.w	r1, r1, #1
   17be8:	f014 fcb2 	bl	2c550 <log_0>
   17bec:	e7e3      	b.n	17bb6 <dk_set_led+0x1e>
   17bee:	bf00      	nop
   17bf0:	0002ec7c 	.word	0x0002ec7c
   17bf4:	0002ecac 	.word	0x0002ecac
   17bf8:	00031795 	.word	0x00031795
   17bfc:	0002f068 	.word	0x0002f068
   17c00:	200216dc 	.word	0x200216dc
   17c04:	00031660 	.word	0x00031660

00017c08 <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   17c08:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   17c0a:	f240 2201 	movw	r2, #513	; 0x201
   17c0e:	2102      	movs	r1, #2
   17c10:	2066      	movs	r0, #102	; 0x66
   17c12:	f7fb ff2b 	bl	13a6c <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   17c16:	4b05      	ldr	r3, [pc, #20]	; (17c2c <open_socket+0x24>)
   17c18:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   17c1a:	3001      	adds	r0, #1
   17c1c:	d104      	bne.n	17c28 <open_socket+0x20>
		return -errno;
   17c1e:	f015 f898 	bl	2cd52 <__errno>
   17c22:	6800      	ldr	r0, [r0, #0]
   17c24:	4240      	negs	r0, r0
	}

	return 0;
}
   17c26:	bd08      	pop	{r3, pc}
	return 0;
   17c28:	2000      	movs	r0, #0
   17c2a:	e7fc      	b.n	17c26 <open_socket+0x1e>
   17c2c:	200216f8 	.word	0x200216f8

00017c30 <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   17c30:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   17c32:	4d18      	ldr	r5, [pc, #96]	; (17c94 <at_cmd_driver_init+0x64>)
{
   17c34:	b089      	sub	sp, #36	; 0x24
	if (initialized) {
   17c36:	782b      	ldrb	r3, [r5, #0]
   17c38:	bb53      	cbnz	r3, 17c90 <at_cmd_driver_init+0x60>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   17c3a:	f7ff ffe5 	bl	17c08 <open_socket>
	if (err) {
   17c3e:	4604      	mov	r4, r0
   17c40:	b168      	cbz	r0, 17c5e <at_cmd_driver_init+0x2e>
   17c42:	4a15      	ldr	r2, [pc, #84]	; (17c98 <at_cmd_driver_init+0x68>)
   17c44:	4b15      	ldr	r3, [pc, #84]	; (17c9c <at_cmd_driver_init+0x6c>)
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   17c46:	4601      	mov	r1, r0
   17c48:	1ad2      	subs	r2, r2, r3
   17c4a:	08d2      	lsrs	r2, r2, #3
   17c4c:	0192      	lsls	r2, r2, #6
   17c4e:	4814      	ldr	r0, [pc, #80]	; (17ca0 <at_cmd_driver_init+0x70>)
   17c50:	f042 0201 	orr.w	r2, r2, #1
   17c54:	f014 fc8b 	bl	2c56e <log_1>

	initialized = true;
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   17c58:	4620      	mov	r0, r4
   17c5a:	b009      	add	sp, #36	; 0x24
   17c5c:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17c5e:	2200      	movs	r2, #0
   17c60:	2300      	movs	r3, #0
   17c62:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17c66:	230a      	movs	r3, #10
   17c68:	e9cd 0000 	strd	r0, r0, [sp]
   17c6c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   17c70:	9004      	str	r0, [sp, #16]
   17c72:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17c76:	4b0b      	ldr	r3, [pc, #44]	; (17ca4 <at_cmd_driver_init+0x74>)
   17c78:	490b      	ldr	r1, [pc, #44]	; (17ca8 <at_cmd_driver_init+0x78>)
   17c7a:	480c      	ldr	r0, [pc, #48]	; (17cac <at_cmd_driver_init+0x7c>)
   17c7c:	f00c fda6 	bl	247cc <z_impl_k_thread_create>
	socket_tid = k_thread_create(&socket_thread, socket_thread_stack,
   17c80:	4b0b      	ldr	r3, [pc, #44]	; (17cb0 <at_cmd_driver_init+0x80>)
   17c82:	6018      	str	r0, [r3, #0]
	return z_impl_k_thread_name_set(thread_id, value);
   17c84:	490b      	ldr	r1, [pc, #44]	; (17cb4 <at_cmd_driver_init+0x84>)
   17c86:	f016 fd42 	bl	2e70e <z_impl_k_thread_name_set>
	initialized = true;
   17c8a:	2301      	movs	r3, #1
   17c8c:	702b      	strb	r3, [r5, #0]
	return 0;
   17c8e:	e7e3      	b.n	17c58 <at_cmd_driver_init+0x28>
		return 0;
   17c90:	2400      	movs	r4, #0
   17c92:	e7e1      	b.n	17c58 <at_cmd_driver_init+0x28>
   17c94:	20025266 	.word	0x20025266
   17c98:	0002ec7c 	.word	0x0002ec7c
   17c9c:	0002ec7c 	.word	0x0002ec7c
   17ca0:	000317c4 	.word	0x000317c4
   17ca4:	00017dd9 	.word	0x00017dd9
   17ca8:	20027710 	.word	0x20027710
   17cac:	20020ef0 	.word	0x20020ef0
   17cb0:	20021720 	.word	0x20021720
   17cb4:	000317e6 	.word	0x000317e6

00017cb8 <complete_cmd>:
{
   17cb8:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   17cba:	4c08      	ldr	r4, [pc, #32]	; (17cdc <complete_cmd+0x24>)
   17cbc:	f04f 32ff 	mov.w	r2, #4294967295
   17cc0:	f04f 33ff 	mov.w	r3, #4294967295
   17cc4:	4620      	mov	r0, r4
   17cc6:	f00a ffc5 	bl	22c54 <z_impl_k_mutex_lock>
	current_cmd.cmd = NULL;
   17cca:	2200      	movs	r2, #0
   17ccc:	4b04      	ldr	r3, [pc, #16]	; (17ce0 <complete_cmd+0x28>)
   17cce:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   17cd0:	4620      	mov	r0, r4
}
   17cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17cd6:	f00b b8b7 	b.w	22e48 <z_impl_k_mutex_unlock>
   17cda:	bf00      	nop
   17cdc:	20020b68 	.word	0x20020b68
   17ce0:	200216fc 	.word	0x200216fc

00017ce4 <load_cmd_and_write>:
{
   17ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17ce8:	b086      	sub	sp, #24
		if (current_cmd.cmd != NULL ||
   17cea:	4e32      	ldr	r6, [pc, #200]	; (17db4 <load_cmd_and_write+0xd0>)
	return z_impl_k_mutex_lock(mutex, timeout);
   17cec:	f04f 33ff 	mov.w	r3, #4294967295
   17cf0:	4637      	mov	r7, r6
   17cf2:	f04f 32ff 	mov.w	r2, #4294967295
   17cf6:	4830      	ldr	r0, [pc, #192]	; (17db8 <load_cmd_and_write+0xd4>)
   17cf8:	f00a ffac 	bl	22c54 <z_impl_k_mutex_lock>
   17cfc:	4d2f      	ldr	r5, [pc, #188]	; (17dbc <load_cmd_and_write+0xd8>)
   17cfe:	4b30      	ldr	r3, [pc, #192]	; (17dc0 <load_cmd_and_write+0xdc>)
	return z_impl_k_msgq_get(msgq, data, timeout);
   17d00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 17dd4 <load_cmd_and_write+0xf0>
   17d04:	1aed      	subs	r5, r5, r3
   17d06:	08ed      	lsrs	r5, r5, #3
   17d08:	6833      	ldr	r3, [r6, #0]
   17d0a:	2b00      	cmp	r3, #0
   17d0c:	d14b      	bne.n	17da6 <load_cmd_and_write+0xc2>
   17d0e:	2200      	movs	r2, #0
   17d10:	2300      	movs	r3, #0
   17d12:	4631      	mov	r1, r6
   17d14:	4640      	mov	r0, r8
   17d16:	f00a feef 	bl	22af8 <z_impl_k_msgq_get>
   17d1a:	4604      	mov	r4, r0
   17d1c:	2800      	cmp	r0, #0
   17d1e:	d142      	bne.n	17da6 <load_cmd_and_write+0xc2>
		ret = at_write(current_cmd.cmd);
   17d20:	6831      	ldr	r1, [r6, #0]
	int bytes_to_send = strlen(cmd);
   17d22:	4608      	mov	r0, r1
   17d24:	9103      	str	r1, [sp, #12]
   17d26:	f00e fdb9 	bl	2689c <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   17d2a:	4b26      	ldr	r3, [pc, #152]	; (17dc4 <load_cmd_and_write+0xe0>)
	int bytes_to_send = strlen(cmd);
   17d2c:	4602      	mov	r2, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   17d2e:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   17d30:	9903      	ldr	r1, [sp, #12]
   17d32:	4623      	mov	r3, r4
   17d34:	e9cd 4400 	strd	r4, r4, [sp]
   17d38:	9202      	str	r2, [sp, #8]
   17d3a:	f014 fef6 	bl	2cb2a <z_impl_zsock_sendto>
   17d3e:	4601      	mov	r1, r0
	if (bytes_sent == -1) {
   17d40:	1c48      	adds	r0, r1, #1
   17d42:	9a02      	ldr	r2, [sp, #8]
   17d44:	d126      	bne.n	17d94 <load_cmd_and_write+0xb0>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   17d46:	f015 f804 	bl	2cd52 <__errno>
   17d4a:	01ac      	lsls	r4, r5, #6
   17d4c:	f044 0401 	orr.w	r4, r4, #1
   17d50:	4622      	mov	r2, r4
   17d52:	6801      	ldr	r1, [r0, #0]
   17d54:	481c      	ldr	r0, [pc, #112]	; (17dc8 <load_cmd_and_write+0xe4>)
   17d56:	f014 fc0a 	bl	2c56e <log_1>
		return -errno;
   17d5a:	f014 fffa 	bl	2cd52 <__errno>
   17d5e:	6804      	ldr	r4, [r0, #0]
   17d60:	4264      	negs	r4, r4
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   17d62:	7c3b      	ldrb	r3, [r7, #16]
   17d64:	07da      	lsls	r2, r3, #31
   17d66:	d502      	bpl.n	17d6e <load_cmd_and_write+0x8a>
			k_free(current_cmd.cmd);
   17d68:	6838      	ldr	r0, [r7, #0]
   17d6a:	f016 fe08 	bl	2e97e <k_free>
		if (ret != 0) {
   17d6e:	b1d4      	cbz	r4, 17da6 <load_cmd_and_write+0xc2>
			resp.state = AT_CMD_ERROR_WRITE;
   17d70:	2305      	movs	r3, #5
   17d72:	f88d 3014 	strb.w	r3, [sp, #20]
			if (current_cmd.flags & AT_CMD_SYNC) {
   17d76:	7c3b      	ldrb	r3, [r7, #16]
			resp.code = ret;
   17d78:	9404      	str	r4, [sp, #16]
			if (current_cmd.flags & AT_CMD_SYNC) {
   17d7a:	079b      	lsls	r3, r3, #30
   17d7c:	d507      	bpl.n	17d8e <load_cmd_and_write+0xaa>
	return z_impl_k_msgq_put(msgq, data, timeout);
   17d7e:	f04f 32ff 	mov.w	r2, #4294967295
   17d82:	f04f 33ff 	mov.w	r3, #4294967295
   17d86:	4811      	ldr	r0, [pc, #68]	; (17dcc <load_cmd_and_write+0xe8>)
   17d88:	a904      	add	r1, sp, #16
   17d8a:	f00a fe13 	bl	229b4 <z_impl_k_msgq_put>
			complete_cmd();
   17d8e:	f7ff ff93 	bl	17cb8 <complete_cmd>
	} while (ret != 0);
   17d92:	e7b9      	b.n	17d08 <load_cmd_and_write+0x24>
	if (bytes_sent != bytes_to_send) {
   17d94:	428a      	cmp	r2, r1
   17d96:	d0e4      	beq.n	17d62 <load_cmd_and_write+0x7e>
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   17d98:	01ab      	lsls	r3, r5, #6
   17d9a:	480d      	ldr	r0, [pc, #52]	; (17dd0 <load_cmd_and_write+0xec>)
   17d9c:	f043 0302 	orr.w	r3, r3, #2
   17da0:	f014 fbfc 	bl	2c59c <log_2>
   17da4:	e7dd      	b.n	17d62 <load_cmd_and_write+0x7e>
	return z_impl_k_mutex_unlock(mutex);
   17da6:	4804      	ldr	r0, [pc, #16]	; (17db8 <load_cmd_and_write+0xd4>)
   17da8:	f00b f84e 	bl	22e48 <z_impl_k_mutex_unlock>
}
   17dac:	b006      	add	sp, #24
   17dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17db2:	bf00      	nop
   17db4:	200216fc 	.word	0x200216fc
   17db8:	20020b68 	.word	0x20020b68
   17dbc:	0002ec7c 	.word	0x0002ec7c
   17dc0:	0002ec7c 	.word	0x0002ec7c
   17dc4:	200216f8 	.word	0x200216f8
   17dc8:	000317fb 	.word	0x000317fb
   17dcc:	20020bf8 	.word	0x20020bf8
   17dd0:	0003181e 	.word	0x0003181e
   17dd4:	20020bcc 	.word	0x20020bcc

00017dd8 <socket_thread_fn>:
{
   17dd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   17ddc:	f8df 9260 	ldr.w	r9, [pc, #608]	; 18040 <socket_thread_fn+0x268>
   17de0:	4f83      	ldr	r7, [pc, #524]	; (17ff0 <socket_thread_fn+0x218>)
   17de2:	46ca      	mov	sl, r9
   17de4:	4b83      	ldr	r3, [pc, #524]	; (17ff4 <socket_thread_fn+0x21c>)
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   17de6:	4e84      	ldr	r6, [pc, #528]	; (17ff8 <socket_thread_fn+0x220>)
   17de8:	1aff      	subs	r7, r7, r3
   17dea:	08ff      	lsrs	r7, r7, #3
		load_cmd_and_write();
   17dec:	f7ff ff7a 	bl	17ce4 <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   17df0:	f8d9 0000 	ldr.w	r0, [r9]
   17df4:	2500      	movs	r5, #0
   17df6:	f640 228c 	movw	r2, #2700	; 0xa8c
   17dfa:	462b      	mov	r3, r5
   17dfc:	e9cd 5500 	strd	r5, r5, [sp]
   17e00:	497d      	ldr	r1, [pc, #500]	; (17ff8 <socket_thread_fn+0x220>)
   17e02:	f014 fec5 	bl	2cb90 <z_impl_zsock_recvfrom>
		ret.code  = 0;
   17e06:	4c7d      	ldr	r4, [pc, #500]	; (17ffc <socket_thread_fn+0x224>)
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   17e08:	f8df b238 	ldr.w	fp, [pc, #568]	; 18044 <socket_thread_fn+0x26c>
		if (bytes_read < 0) {
   17e0c:	42a8      	cmp	r0, r5
   17e0e:	4680      	mov	r8, r0
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   17e10:	f8cb 0000 	str.w	r0, [fp]
		ret.code  = 0;
   17e14:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   17e16:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   17e18:	da6a      	bge.n	17ef0 <socket_thread_fn+0x118>
			if (errno == EHOSTDOWN) {
   17e1a:	f014 ff9a 	bl	2cd52 <__errno>
   17e1e:	6803      	ldr	r3, [r0, #0]
   17e20:	2b75      	cmp	r3, #117	; 0x75
   17e22:	d122      	bne.n	17e6a <socket_thread_fn+0x92>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17e24:	2301      	movs	r3, #1
   17e26:	4c76      	ldr	r4, [pc, #472]	; (18000 <socket_thread_fn+0x228>)
   17e28:	e8d4 2fef 	ldaex	r2, [r4]
   17e2c:	e8c4 3fe1 	stlex	r1, r3, [r4]
   17e30:	2900      	cmp	r1, #0
   17e32:	d1f9      	bne.n	17e28 <socket_thread_fn+0x50>
				close(common_socket_fd);
   17e34:	f8d9 0000 	ldr.w	r0, [r9]
	return z_impl_zsock_close(sock);
   17e38:	f014 fe4a 	bl	2cad0 <z_impl_zsock_close>
				bsdlib_shutdown_wait();
   17e3c:	f7fe fd76 	bl	1692c <bsdlib_shutdown_wait>
   17e40:	e8d4 3fef 	ldaex	r3, [r4]
   17e44:	e8c4 5fe2 	stlex	r2, r5, [r4]
   17e48:	2a00      	cmp	r2, #0
   17e4a:	d1f9      	bne.n	17e40 <socket_thread_fn+0x68>
				if (open_socket() != 0) {
   17e4c:	f7ff fedc 	bl	17c08 <open_socket>
   17e50:	2800      	cmp	r0, #0
   17e52:	d0cb      	beq.n	17dec <socket_thread_fn+0x14>
					LOG_ERR("Failed to open AT socket "
   17e54:	f014 ff7d 	bl	2cd52 <__errno>
   17e58:	01bc      	lsls	r4, r7, #6
   17e5a:	f044 0401 	orr.w	r4, r4, #1
   17e5e:	6801      	ldr	r1, [r0, #0]
   17e60:	4622      	mov	r2, r4
   17e62:	4868      	ldr	r0, [pc, #416]	; (18004 <socket_thread_fn+0x22c>)
   17e64:	f014 fb83 	bl	2c56e <log_1>
   17e68:	e7c0      	b.n	17dec <socket_thread_fn+0x14>
				LOG_ERR("AT socket recv failed with err %d",
   17e6a:	01bd      	lsls	r5, r7, #6
   17e6c:	f8db 1000 	ldr.w	r1, [fp]
   17e70:	4865      	ldr	r0, [pc, #404]	; (18008 <socket_thread_fn+0x230>)
   17e72:	f045 0201 	orr.w	r2, r5, #1
   17e76:	f014 fb7a 	bl	2c56e <log_1>
			if ((close(common_socket_fd) == 0) &&
   17e7a:	f8d9 0000 	ldr.w	r0, [r9]
   17e7e:	f014 fe27 	bl	2cad0 <z_impl_zsock_close>
   17e82:	bb28      	cbnz	r0, 17ed0 <socket_thread_fn+0xf8>
			    (open_socket() == 0)) {
   17e84:	f7ff fec0 	bl	17c08 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   17e88:	bb10      	cbnz	r0, 17ed0 <socket_thread_fn+0xf8>
				LOG_INF("AT socket recovered");
   17e8a:	4860      	ldr	r0, [pc, #384]	; (1800c <socket_thread_fn+0x234>)
   17e8c:	f045 0103 	orr.w	r1, r5, #3
   17e90:	f014 fb5e 	bl	2c550 <log_0>
				ret.state = AT_CMD_ERROR_READ;
   17e94:	2306      	movs	r3, #6
   17e96:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   17e98:	f014 ff5b 	bl	2cd52 <__errno>
   17e9c:	6803      	ldr	r3, [r0, #0]
   17e9e:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   17ea0:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   17ea2:	4b5b      	ldr	r3, [pc, #364]	; (18010 <socket_thread_fn+0x238>)
   17ea4:	681a      	ldr	r2, [r3, #0]
   17ea6:	b16a      	cbz	r2, 17ec4 <socket_thread_fn+0xec>
   17ea8:	7c1b      	ldrb	r3, [r3, #16]
   17eaa:	079b      	lsls	r3, r3, #30
   17eac:	d50a      	bpl.n	17ec4 <socket_thread_fn+0xec>
		    current_cmd.flags & AT_CMD_SYNC &&
   17eae:	7923      	ldrb	r3, [r4, #4]
   17eb0:	2b07      	cmp	r3, #7
   17eb2:	d09b      	beq.n	17dec <socket_thread_fn+0x14>
	return z_impl_k_msgq_put(msgq, data, timeout);
   17eb4:	f04f 32ff 	mov.w	r2, #4294967295
   17eb8:	f04f 33ff 	mov.w	r3, #4294967295
   17ebc:	494f      	ldr	r1, [pc, #316]	; (17ffc <socket_thread_fn+0x224>)
   17ebe:	4855      	ldr	r0, [pc, #340]	; (18014 <socket_thread_fn+0x23c>)
   17ec0:	f00a fd78 	bl	229b4 <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   17ec4:	7923      	ldrb	r3, [r4, #4]
   17ec6:	2b07      	cmp	r3, #7
   17ec8:	d090      	beq.n	17dec <socket_thread_fn+0x14>
			complete_cmd();
   17eca:	f7ff fef5 	bl	17cb8 <complete_cmd>
   17ece:	e78d      	b.n	17dec <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   17ed0:	f014 ff3f 	bl	2cd52 <__errno>
   17ed4:	f045 0501 	orr.w	r5, r5, #1
   17ed8:	6801      	ldr	r1, [r0, #0]
   17eda:	462a      	mov	r2, r5
   17edc:	484e      	ldr	r0, [pc, #312]	; (18018 <socket_thread_fn+0x240>)
   17ede:	f014 fb46 	bl	2c56e <log_1>
			close(common_socket_fd);
   17ee2:	f8da 0000 	ldr.w	r0, [sl]
}
   17ee6:	b003      	add	sp, #12
   17ee8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17eec:	f014 bdf0 	b.w	2cad0 <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   17ef0:	d10a      	bne.n	17f08 <socket_thread_fn+0x130>
			LOG_ERR("AT message empty");
   17ef2:	01b9      	lsls	r1, r7, #6
   17ef4:	4849      	ldr	r0, [pc, #292]	; (1801c <socket_thread_fn+0x244>)
   17ef6:	f041 0101 	orr.w	r1, r1, #1
   17efa:	f014 fb29 	bl	2c550 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   17efe:	2306      	movs	r3, #6
   17f00:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   17f02:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   17f06:	e7cb      	b.n	17ea0 <socket_thread_fn+0xc8>
		} else if (buf[bytes_read - 1] != '\0') {
   17f08:	1833      	adds	r3, r6, r0
   17f0a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   17f0e:	b153      	cbz	r3, 17f26 <socket_thread_fn+0x14e>
			LOG_ERR("AT message too large for reception buffer or "
   17f10:	01b9      	lsls	r1, r7, #6
   17f12:	4843      	ldr	r0, [pc, #268]	; (18020 <socket_thread_fn+0x248>)
   17f14:	f041 0101 	orr.w	r1, r1, #1
   17f18:	f014 fb1a 	bl	2c550 <log_0>
			ret.state = AT_CMD_ERROR_READ;
   17f1c:	2306      	movs	r3, #6
   17f1e:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   17f20:	f06f 0368 	mvn.w	r3, #104	; 0x68
   17f24:	e7bc      	b.n	17ea0 <socket_thread_fn+0xc8>
	ret->state = AT_CMD_NOTIFICATION;
   17f26:	2307      	movs	r3, #7
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   17f28:	1f45      	subs	r5, r0, #5
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   17f2a:	483e      	ldr	r0, [pc, #248]	; (18024 <socket_thread_fn+0x24c>)
	ret->state = AT_CMD_NOTIFICATION;
   17f2c:	7123      	strb	r3, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   17f2e:	f00e fcb5 	bl	2689c <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   17f32:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   17f34:	4602      	mov	r2, r0
   17f36:	493b      	ldr	r1, [pc, #236]	; (18024 <socket_thread_fn+0x24c>)
   17f38:	4628      	mov	r0, r5
   17f3a:	f00e fcdd 	bl	268f8 <strncmp>
		if (match) {
   17f3e:	b9c0      	cbnz	r0, 17f72 <socket_thread_fn+0x19a>
			ret->state = AT_CMD_OK;
   17f40:	7120      	strb	r0, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   17f42:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   17f44:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   17f46:	1baa      	subs	r2, r5, r6
		buf[new_len++] = '\0';
   17f48:	3201      	adds	r2, #1
   17f4a:	702b      	strb	r3, [r5, #0]
		if (current_cmd.cmd != NULL &&
   17f4c:	4d30      	ldr	r5, [pc, #192]	; (18010 <socket_thread_fn+0x238>)
   17f4e:	682b      	ldr	r3, [r5, #0]
   17f50:	2b00      	cmp	r3, #0
   17f52:	d043      	beq.n	17fdc <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   17f54:	6868      	ldr	r0, [r5, #4]
		if (current_cmd.cmd != NULL &&
   17f56:	2800      	cmp	r0, #0
   17f58:	d040      	beq.n	17fdc <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   17f5a:	7923      	ldrb	r3, [r4, #4]
   17f5c:	2b07      	cmp	r3, #7
   17f5e:	d12e      	bne.n	17fbe <socket_thread_fn+0x1e6>
		    notification_handler != NULL) {
   17f60:	4b31      	ldr	r3, [pc, #196]	; (18028 <socket_thread_fn+0x250>)
   17f62:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   17f64:	b913      	cbnz	r3, 17f6c <socket_thread_fn+0x194>
		} else if (current_cmd.callback != NULL) {
   17f66:	68ab      	ldr	r3, [r5, #8]
   17f68:	2b00      	cmp	r3, #0
   17f6a:	d09a      	beq.n	17ea2 <socket_thread_fn+0xca>
			current_cmd.callback(buf);
   17f6c:	4630      	mov	r0, r6
   17f6e:	4798      	blx	r3
   17f70:	e797      	b.n	17ea2 <socket_thread_fn+0xca>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   17f72:	4630      	mov	r0, r6
   17f74:	492d      	ldr	r1, [pc, #180]	; (1802c <socket_thread_fn+0x254>)
   17f76:	f00e fe8b 	bl	26c90 <strstr>
		if (tmpstr) {
   17f7a:	4605      	mov	r5, r0
   17f7c:	b128      	cbz	r0, 17f8a <socket_thread_fn+0x1b2>
			ret->state = AT_CMD_ERROR_CMS;
   17f7e:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   17f80:	482b      	ldr	r0, [pc, #172]	; (18030 <socket_thread_fn+0x258>)
			ret->state = AT_CMD_ERROR_CMS;
   17f82:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   17f84:	f00d fd18 	bl	259b8 <atoi>
   17f88:	e7db      	b.n	17f42 <socket_thread_fn+0x16a>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   17f8a:	4630      	mov	r0, r6
   17f8c:	4929      	ldr	r1, [pc, #164]	; (18034 <socket_thread_fn+0x25c>)
   17f8e:	f00e fe7f 	bl	26c90 <strstr>
		if (tmpstr) {
   17f92:	4605      	mov	r5, r0
   17f94:	b108      	cbz	r0, 17f9a <socket_thread_fn+0x1c2>
			ret->state = AT_CMD_ERROR_CME;
   17f96:	2303      	movs	r3, #3
   17f98:	e7f2      	b.n	17f80 <socket_thread_fn+0x1a8>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   17f9a:	4827      	ldr	r0, [pc, #156]	; (18038 <socket_thread_fn+0x260>)
   17f9c:	f00e fc7e 	bl	2689c <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   17fa0:	f1a8 0508 	sub.w	r5, r8, #8
   17fa4:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   17fa6:	4602      	mov	r2, r0
   17fa8:	4923      	ldr	r1, [pc, #140]	; (18038 <socket_thread_fn+0x260>)
   17faa:	4628      	mov	r0, r5
   17fac:	f00e fca4 	bl	268f8 <strncmp>
		if (match) {
   17fb0:	b9c0      	cbnz	r0, 17fe4 <socket_thread_fn+0x20c>
			ret->state = AT_CMD_ERROR;
   17fb2:	2301      	movs	r3, #1
   17fb4:	7123      	strb	r3, [r4, #4]
			ret->code  = -ENOEXEC;
   17fb6:	f06f 0307 	mvn.w	r3, #7
   17fba:	6023      	str	r3, [r4, #0]
			break;
   17fbc:	e7c2      	b.n	17f44 <socket_thread_fn+0x16c>
			if (current_cmd.resp_size < payload_len) {
   17fbe:	68eb      	ldr	r3, [r5, #12]
   17fc0:	429a      	cmp	r2, r3
   17fc2:	d908      	bls.n	17fd6 <socket_thread_fn+0x1fe>
				LOG_ERR("Response buffer not large enough");
   17fc4:	01b9      	lsls	r1, r7, #6
   17fc6:	481d      	ldr	r0, [pc, #116]	; (1803c <socket_thread_fn+0x264>)
   17fc8:	f041 0101 	orr.w	r1, r1, #1
   17fcc:	f014 fac0 	bl	2c550 <log_0>
				ret.code  = -EMSGSIZE;
   17fd0:	f06f 0379 	mvn.w	r3, #121	; 0x79
   17fd4:	e764      	b.n	17ea0 <socket_thread_fn+0xc8>
   17fd6:	4631      	mov	r1, r6
   17fd8:	f7f4 fdb8 	bl	cb4c <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   17fdc:	7923      	ldrb	r3, [r4, #4]
   17fde:	2b07      	cmp	r3, #7
   17fe0:	d1c1      	bne.n	17f66 <socket_thread_fn+0x18e>
   17fe2:	e7bd      	b.n	17f60 <socket_thread_fn+0x188>
		new_len = strlen(buf) + 1;
   17fe4:	4630      	mov	r0, r6
   17fe6:	f00e fc59 	bl	2689c <strlen>
   17fea:	1c42      	adds	r2, r0, #1
   17fec:	e7ae      	b.n	17f4c <socket_thread_fn+0x174>
   17fee:	bf00      	nop
   17ff0:	0002ec7c 	.word	0x0002ec7c
   17ff4:	0002ec7c 	.word	0x0002ec7c
   17ff8:	200247da 	.word	0x200247da
   17ffc:	20021714 	.word	0x20021714
   18000:	2002171c 	.word	0x2002171c
   18004:	00031850 	.word	0x00031850
   18008:	00031884 	.word	0x00031884
   1800c:	000318a6 	.word	0x000318a6
   18010:	200216fc 	.word	0x200216fc
   18014:	20020bf8 	.word	0x20020bf8
   18018:	000318ba 	.word	0x000318ba
   1801c:	000318f1 	.word	0x000318f1
   18020:	00031902 	.word	0x00031902
   18024:	0003194d 	.word	0x0003194d
   18028:	20021710 	.word	0x20021710
   1802c:	00031952 	.word	0x00031952
   18030:	200247e5 	.word	0x200247e5
   18034:	0003195e 	.word	0x0003195e
   18038:	0003196a 	.word	0x0003196a
   1803c:	00031972 	.word	0x00031972
   18040:	200216f8 	.word	0x200216f8
   18044:	200216f4 	.word	0x200216f4

00018048 <at_cmd_write>:
{
   18048:	b5f0      	push	{r4, r5, r6, r7, lr}
   1804a:	4605      	mov	r5, r0
   1804c:	460f      	mov	r7, r1
   1804e:	4616      	mov	r6, r2
   18050:	461c      	mov	r4, r3
   18052:	b089      	sub	sp, #36	; 0x24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18054:	4b3c      	ldr	r3, [pc, #240]	; (18148 <at_cmd_write+0x100>)
   18056:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   1805a:	2b01      	cmp	r3, #1
   1805c:	d071      	beq.n	18142 <at_cmd_write+0xfa>
	return z_impl_k_current_get();
   1805e:	f00c fa6d 	bl	2453c <z_impl_k_current_get>
	__ASSERT(k_current_get() != socket_tid,
   18062:	4b3a      	ldr	r3, [pc, #232]	; (1814c <at_cmd_write+0x104>)
   18064:	681b      	ldr	r3, [r3, #0]
   18066:	4283      	cmp	r3, r0
   18068:	d10e      	bne.n	18088 <at_cmd_write+0x40>
   1806a:	4939      	ldr	r1, [pc, #228]	; (18150 <at_cmd_write+0x108>)
   1806c:	f44f 73c1 	mov.w	r3, #386	; 0x182
   18070:	4a38      	ldr	r2, [pc, #224]	; (18154 <at_cmd_write+0x10c>)
   18072:	4839      	ldr	r0, [pc, #228]	; (18158 <at_cmd_write+0x110>)
   18074:	f014 f81f 	bl	2c0b6 <printk>
   18078:	4838      	ldr	r0, [pc, #224]	; (1815c <at_cmd_write+0x114>)
   1807a:	f014 f81c 	bl	2c0b6 <printk>
   1807e:	f44f 71c1 	mov.w	r1, #386	; 0x182
   18082:	4834      	ldr	r0, [pc, #208]	; (18154 <at_cmd_write+0x10c>)
   18084:	f014 fa34 	bl	2c4f0 <assert_post_action>
	if (cmd == NULL) {
   18088:	b165      	cbz	r5, 180a4 <at_cmd_write+0x5c>
   1808a:	1e6a      	subs	r2, r5, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   1808c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   18090:	b9d3      	cbnz	r3, 180c8 <at_cmd_write+0x80>
   18092:	4933      	ldr	r1, [pc, #204]	; (18160 <at_cmd_write+0x118>)
   18094:	4b33      	ldr	r3, [pc, #204]	; (18164 <at_cmd_write+0x11c>)
		LOG_ERR("Invalid command");
   18096:	4834      	ldr	r0, [pc, #208]	; (18168 <at_cmd_write+0x120>)
   18098:	1ac9      	subs	r1, r1, r3
   1809a:	08c9      	lsrs	r1, r1, #3
   1809c:	0189      	lsls	r1, r1, #6
   1809e:	f041 0101 	orr.w	r1, r1, #1
   180a2:	e007      	b.n	180b4 <at_cmd_write+0x6c>
   180a4:	492e      	ldr	r1, [pc, #184]	; (18160 <at_cmd_write+0x118>)
   180a6:	4b2f      	ldr	r3, [pc, #188]	; (18164 <at_cmd_write+0x11c>)
		LOG_ERR("cmd is NULL");
   180a8:	4830      	ldr	r0, [pc, #192]	; (1816c <at_cmd_write+0x124>)
   180aa:	1ac9      	subs	r1, r1, r3
   180ac:	08c9      	lsrs	r1, r1, #3
   180ae:	0189      	lsls	r1, r1, #6
   180b0:	f041 0101 	orr.w	r1, r1, #1
   180b4:	f014 fa4c 	bl	2c550 <log_0>
		if (state) {
   180b8:	b91c      	cbnz	r4, 180c2 <at_cmd_write+0x7a>
		return -EINVAL;
   180ba:	f06f 0015 	mvn.w	r0, #21
}
   180be:	b009      	add	sp, #36	; 0x24
   180c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*state = AT_CMD_ERROR_QUEUE;
   180c2:	2304      	movs	r3, #4
   180c4:	7023      	strb	r3, [r4, #0]
   180c6:	e7f8      	b.n	180ba <at_cmd_write+0x72>
		if (*c > ' ') {
   180c8:	2b20      	cmp	r3, #32
   180ca:	d9df      	bls.n	1808c <at_cmd_write+0x44>
	command.callback = NULL;
   180cc:	2300      	movs	r3, #0
   180ce:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   180d0:	2302      	movs	r3, #2
	command.resp = buf;
   180d2:	e9cd 5703 	strd	r5, r7, [sp, #12]
	command.resp_size = buf_len;
   180d6:	9606      	str	r6, [sp, #24]
	command.flags = AT_CMD_SYNC;
   180d8:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   180dc:	f04f 32ff 	mov.w	r2, #4294967295
   180e0:	f04f 33ff 	mov.w	r3, #4294967295
   180e4:	4822      	ldr	r0, [pc, #136]	; (18170 <at_cmd_write+0x128>)
   180e6:	f00a fdb5 	bl	22c54 <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   180ea:	f04f 32ff 	mov.w	r2, #4294967295
   180ee:	a903      	add	r1, sp, #12
   180f0:	f04f 33ff 	mov.w	r3, #4294967295
   180f4:	481f      	ldr	r0, [pc, #124]	; (18174 <at_cmd_write+0x12c>)
   180f6:	f00a fc5d 	bl	229b4 <z_impl_k_msgq_put>
   180fa:	4601      	mov	r1, r0
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   180fc:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   180fe:	b170      	cbz	r0, 1811e <at_cmd_write+0xd6>
   18100:	4a17      	ldr	r2, [pc, #92]	; (18160 <at_cmd_write+0x118>)
   18102:	4b18      	ldr	r3, [pc, #96]	; (18164 <at_cmd_write+0x11c>)
		LOG_ERR("Could not enqueue cmd, error %d", ret.code);
   18104:	481c      	ldr	r0, [pc, #112]	; (18178 <at_cmd_write+0x130>)
   18106:	1ad2      	subs	r2, r2, r3
   18108:	08d2      	lsrs	r2, r2, #3
   1810a:	0192      	lsls	r2, r2, #6
   1810c:	f042 0201 	orr.w	r2, r2, #1
   18110:	f014 fa2d 	bl	2c56e <log_1>
		if (state) {
   18114:	b10c      	cbz	r4, 1811a <at_cmd_write+0xd2>
			*state = AT_CMD_ERROR_QUEUE;
   18116:	2304      	movs	r3, #4
		*state = ret.state;
   18118:	7023      	strb	r3, [r4, #0]
	return ret.code;
   1811a:	9801      	ldr	r0, [sp, #4]
   1811c:	e7cf      	b.n	180be <at_cmd_write+0x76>
	load_cmd_and_write();
   1811e:	f7ff fde1 	bl	17ce4 <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   18122:	f04f 32ff 	mov.w	r2, #4294967295
   18126:	f04f 33ff 	mov.w	r3, #4294967295
   1812a:	a901      	add	r1, sp, #4
   1812c:	4813      	ldr	r0, [pc, #76]	; (1817c <at_cmd_write+0x134>)
   1812e:	f00a fce3 	bl	22af8 <z_impl_k_msgq_get>
	return z_impl_k_mutex_unlock(mutex);
   18132:	480f      	ldr	r0, [pc, #60]	; (18170 <at_cmd_write+0x128>)
   18134:	f00a fe88 	bl	22e48 <z_impl_k_mutex_unlock>
	if (state) {
   18138:	2c00      	cmp	r4, #0
   1813a:	d0ee      	beq.n	1811a <at_cmd_write+0xd2>
		*state = ret.state;
   1813c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   18140:	e7ea      	b.n	18118 <at_cmd_write+0xd0>
		return -EHOSTDOWN;
   18142:	f06f 0074 	mvn.w	r0, #116	; 0x74
   18146:	e7ba      	b.n	180be <at_cmd_write+0x76>
   18148:	2002171c 	.word	0x2002171c
   1814c:	20021720 	.word	0x20021720
   18150:	000319d3 	.word	0x000319d3
   18154:	000319af 	.word	0x000319af
   18158:	000300ff 	.word	0x000300ff
   1815c:	000319f1 	.word	0x000319f1
   18160:	0002ec7c 	.word	0x0002ec7c
   18164:	0002ec7c 	.word	0x0002ec7c
   18168:	0003199f 	.word	0x0003199f
   1816c:	00031993 	.word	0x00031993
   18170:	20020ba4 	.word	0x20020ba4
   18174:	20020bcc 	.word	0x20020bcc
   18178:	00031a21 	.word	0x00031a21
   1817c:	20020bf8 	.word	0x20020bf8

00018180 <at_cmd_set_notification_handler>:
{
   18180:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   18182:	4c09      	ldr	r4, [pc, #36]	; (181a8 <at_cmd_set_notification_handler+0x28>)
{
   18184:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   18186:	6821      	ldr	r1, [r4, #0]
   18188:	b159      	cbz	r1, 181a2 <at_cmd_set_notification_handler+0x22>
   1818a:	4281      	cmp	r1, r0
   1818c:	d009      	beq.n	181a2 <at_cmd_set_notification_handler+0x22>
   1818e:	4a07      	ldr	r2, [pc, #28]	; (181ac <at_cmd_set_notification_handler+0x2c>)
   18190:	4b07      	ldr	r3, [pc, #28]	; (181b0 <at_cmd_set_notification_handler+0x30>)
		LOG_WRN("Forgetting prior notification handler %p",
   18192:	4808      	ldr	r0, [pc, #32]	; (181b4 <at_cmd_set_notification_handler+0x34>)
   18194:	1ad2      	subs	r2, r2, r3
   18196:	08d2      	lsrs	r2, r2, #3
   18198:	0192      	lsls	r2, r2, #6
   1819a:	f042 0202 	orr.w	r2, r2, #2
   1819e:	f014 f9e6 	bl	2c56e <log_1>
	notification_handler = handler;
   181a2:	6025      	str	r5, [r4, #0]
}
   181a4:	bd38      	pop	{r3, r4, r5, pc}
   181a6:	bf00      	nop
   181a8:	20021710 	.word	0x20021710
   181ac:	0002ec7c 	.word	0x0002ec7c
   181b0:	0002ec7c 	.word	0x0002ec7c
   181b4:	00031a41 	.word	0x00031a41

000181b8 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   181b8:	4b0f      	ldr	r3, [pc, #60]	; (181f8 <find_node+0x40>)
{
   181ba:	b570      	push	{r4, r5, r6, lr}
   181bc:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   181be:	6818      	ldr	r0, [r3, #0]
   181c0:	b170      	cbz	r0, 181e0 <find_node+0x28>
   181c2:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   181c4:	4603      	mov	r3, r0
   181c6:	2d00      	cmp	r5, #0
   181c8:	4628      	mov	r0, r5
   181ca:	bf38      	it	cc
   181cc:	2000      	movcc	r0, #0
   181ce:	2500      	movs	r5, #0
		if (curr->ctx == ctx && curr->handler == handler) {
   181d0:	685e      	ldr	r6, [r3, #4]
   181d2:	428e      	cmp	r6, r1
   181d4:	d105      	bne.n	181e2 <find_node+0x2a>
   181d6:	689e      	ldr	r6, [r3, #8]
   181d8:	4296      	cmp	r6, r2
   181da:	d102      	bne.n	181e2 <find_node+0x2a>
			*prev_out = prev;
			return curr;
   181dc:	4618      	mov	r0, r3
			*prev_out = prev;
   181de:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   181e0:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   181e2:	2800      	cmp	r0, #0
   181e4:	d0fc      	beq.n	181e0 <find_node+0x28>
	return node->next;
   181e6:	6806      	ldr	r6, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   181e8:	461d      	mov	r5, r3
   181ea:	2e00      	cmp	r6, #0
   181ec:	4603      	mov	r3, r0
   181ee:	4630      	mov	r0, r6
   181f0:	bf38      	it	cc
   181f2:	2000      	movcc	r0, #0
   181f4:	e7ec      	b.n	181d0 <find_node+0x18>
   181f6:	bf00      	nop
   181f8:	20021724 	.word	0x20021724

000181fc <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   181fc:	4a0c      	ldr	r2, [pc, #48]	; (18230 <module_init+0x34>)
{
   181fe:	b508      	push	{r3, lr}
	if (initialized) {
   18200:	7813      	ldrb	r3, [r2, #0]
   18202:	b15b      	cbz	r3, 1821c <module_init+0x20>
   18204:	490b      	ldr	r1, [pc, #44]	; (18234 <module_init+0x38>)
   18206:	4b0c      	ldr	r3, [pc, #48]	; (18238 <module_init+0x3c>)
		LOG_WRN("Already initialized. Nothing to do");
   18208:	480c      	ldr	r0, [pc, #48]	; (1823c <module_init+0x40>)
   1820a:	1ac9      	subs	r1, r1, r3
   1820c:	08c9      	lsrs	r1, r1, #3
   1820e:	0189      	lsls	r1, r1, #6
   18210:	f041 0102 	orr.w	r1, r1, #2
   18214:	f014 f99c 	bl	2c550 <log_0>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   18218:	2000      	movs	r0, #0
   1821a:	bd08      	pop	{r3, pc}
	initialized = true;
   1821c:	2101      	movs	r1, #1
   1821e:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   18220:	4a07      	ldr	r2, [pc, #28]	; (18240 <module_init+0x44>)
	at_cmd_set_notification_handler(notif_dispatch);
   18222:	4808      	ldr	r0, [pc, #32]	; (18244 <module_init+0x48>)
	list->tail = NULL;
   18224:	e9c2 3300 	strd	r3, r3, [r2]
   18228:	f7ff ffaa 	bl	18180 <at_cmd_set_notification_handler>
	return 0;
   1822c:	e7f4      	b.n	18218 <module_init+0x1c>
   1822e:	bf00      	nop
   18230:	20025267 	.word	0x20025267
   18234:	0002ec8c 	.word	0x0002ec8c
   18238:	0002ec7c 	.word	0x0002ec7c
   1823c:	00031a71 	.word	0x00031a71
   18240:	20021724 	.word	0x20021724
   18244:	00018255 	.word	0x00018255

00018248 <k_mutex_unlock.constprop.0>:
   18248:	4801      	ldr	r0, [pc, #4]	; (18250 <k_mutex_unlock.constprop.0+0x8>)
   1824a:	f00a bdfd 	b.w	22e48 <z_impl_k_mutex_unlock>
   1824e:	bf00      	nop
   18250:	20020b90 	.word	0x20020b90

00018254 <notif_dispatch>:
{
   18254:	b538      	push	{r3, r4, r5, lr}
   18256:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   18258:	f04f 33ff 	mov.w	r3, #4294967295
   1825c:	f04f 32ff 	mov.w	r2, #4294967295
   18260:	480d      	ldr	r0, [pc, #52]	; (18298 <notif_dispatch+0x44>)
   18262:	f00a fcf7 	bl	22c54 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   18266:	4b0d      	ldr	r3, [pc, #52]	; (1829c <notif_dispatch+0x48>)
   18268:	681b      	ldr	r3, [r3, #0]
   1826a:	b91b      	cbnz	r3, 18274 <notif_dispatch+0x20>
}
   1826c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   18270:	f7ff bfea 	b.w	18248 <k_mutex_unlock.constprop.0>
	return node->next;
   18274:	681c      	ldr	r4, [r3, #0]
   18276:	2c00      	cmp	r4, #0
   18278:	bf38      	it	cc
   1827a:	2400      	movcc	r4, #0
		curr->handler(curr->ctx, response);
   1827c:	4629      	mov	r1, r5
   1827e:	689a      	ldr	r2, [r3, #8]
   18280:	6858      	ldr	r0, [r3, #4]
   18282:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   18284:	2c00      	cmp	r4, #0
   18286:	d0f1      	beq.n	1826c <notif_dispatch+0x18>
   18288:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1828a:	4623      	mov	r3, r4
   1828c:	2a00      	cmp	r2, #0
   1828e:	bf38      	it	cc
   18290:	2200      	movcc	r2, #0
   18292:	4614      	mov	r4, r2
   18294:	e7f2      	b.n	1827c <notif_dispatch+0x28>
   18296:	bf00      	nop
   18298:	20020b90 	.word	0x20020b90
   1829c:	20021724 	.word	0x20021724

000182a0 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   182a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   182a2:	4606      	mov	r6, r0
	if (handler == NULL) {
   182a4:	460d      	mov	r5, r1
   182a6:	b979      	cbnz	r1, 182c8 <at_notif_register_handler+0x28>
   182a8:	4a1d      	ldr	r2, [pc, #116]	; (18320 <at_notif_register_handler+0x80>)
   182aa:	4b1e      	ldr	r3, [pc, #120]	; (18324 <at_notif_register_handler+0x84>)
   182ac:	1a9b      	subs	r3, r3, r2
   182ae:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   182b0:	019b      	lsls	r3, r3, #6
   182b2:	460a      	mov	r2, r1
   182b4:	f043 0301 	orr.w	r3, r3, #1
   182b8:	4601      	mov	r1, r0
   182ba:	481b      	ldr	r0, [pc, #108]	; (18328 <at_notif_register_handler+0x88>)
   182bc:	f014 f96e 	bl	2c59c <log_2>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   182c0:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   182c4:	b002      	add	sp, #8
   182c6:	bd70      	pop	{r4, r5, r6, pc}
   182c8:	f04f 32ff 	mov.w	r2, #4294967295
   182cc:	f04f 33ff 	mov.w	r3, #4294967295
   182d0:	4816      	ldr	r0, [pc, #88]	; (1832c <at_notif_register_handler+0x8c>)
   182d2:	f00a fcbf 	bl	22c54 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   182d6:	462a      	mov	r2, r5
   182d8:	4631      	mov	r1, r6
   182da:	a801      	add	r0, sp, #4
   182dc:	f7ff ff6c 	bl	181b8 <find_node>
   182e0:	4604      	mov	r4, r0
   182e2:	b118      	cbz	r0, 182ec <at_notif_register_handler+0x4c>
		k_mutex_unlock(&list_mtx);
   182e4:	f7ff ffb0 	bl	18248 <k_mutex_unlock.constprop.0>
		return 0;
   182e8:	2000      	movs	r0, #0
   182ea:	e7eb      	b.n	182c4 <at_notif_register_handler+0x24>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   182ec:	200c      	movs	r0, #12
   182ee:	f00d fb25 	bl	2593c <k_malloc>
   182f2:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   182f4:	b920      	cbnz	r0, 18300 <at_notif_register_handler+0x60>
		k_mutex_unlock(&list_mtx);
   182f6:	f7ff ffa7 	bl	18248 <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   182fa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   182fe:	e7e1      	b.n	182c4 <at_notif_register_handler+0x24>
__ssp_bos_icheck3(memset, void *, int)
   18300:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   18302:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   18304:	4a0a      	ldr	r2, [pc, #40]	; (18330 <at_notif_register_handler+0x90>)
   18306:	6044      	str	r4, [r0, #4]
   18308:	6084      	str	r4, [r0, #8]
	parent->next = child;
   1830a:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   1830c:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   1830e:	e9c3 6501 	strd	r6, r5, [r3, #4]
   18312:	b911      	cbnz	r1, 1831a <at_notif_register_handler+0x7a>
	list->head = node;
   18314:	e9c2 3300 	strd	r3, r3, [r2]
}
   18318:	e7e4      	b.n	182e4 <at_notif_register_handler+0x44>
	parent->next = child;
   1831a:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1831c:	6053      	str	r3, [r2, #4]
}
   1831e:	e7e1      	b.n	182e4 <at_notif_register_handler+0x44>
   18320:	0002ec7c 	.word	0x0002ec7c
   18324:	0002ec8c 	.word	0x0002ec8c
   18328:	00031a94 	.word	0x00031a94
   1832c:	20020b90 	.word	0x20020b90
   18330:	20021724 	.word	0x20021724

00018334 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   18334:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   18336:	4d05      	ldr	r5, [pc, #20]	; (1834c <write_uart_string+0x18>)
   18338:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   1833a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   1833e:	b901      	cbnz	r1, 18342 <write_uart_string+0xe>
	}
}
   18340:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   18342:	6828      	ldr	r0, [r5, #0]
   18344:	6883      	ldr	r3, [r0, #8]
   18346:	685b      	ldr	r3, [r3, #4]
   18348:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   1834a:	e7f6      	b.n	1833a <write_uart_string+0x6>
   1834c:	2002173c 	.word	0x2002173c

00018350 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   18350:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   18352:	4921      	ldr	r1, [pc, #132]	; (183d8 <cmd_send+0x88>)
{
   18354:	b08b      	sub	sp, #44	; 0x2c
	err = at_cmd_write(at_buf, at_buf,
   18356:	4608      	mov	r0, r1
   18358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1835c:	f10d 030b 	add.w	r3, sp, #11
   18360:	f7ff fe72 	bl	18048 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   18364:	1e01      	subs	r1, r0, #0
   18366:	da0e      	bge.n	18386 <cmd_send+0x36>
   18368:	4b1c      	ldr	r3, [pc, #112]	; (183dc <cmd_send+0x8c>)
   1836a:	4a1d      	ldr	r2, [pc, #116]	; (183e0 <cmd_send+0x90>)
		LOG_ERR("Error while processing AT command: %d", err);
   1836c:	481d      	ldr	r0, [pc, #116]	; (183e4 <cmd_send+0x94>)
   1836e:	1ad2      	subs	r2, r2, r3
   18370:	08d2      	lsrs	r2, r2, #3
   18372:	0192      	lsls	r2, r2, #6
   18374:	f042 0201 	orr.w	r2, r2, #1
   18378:	f014 f8f9 	bl	2c56e <log_1>
		state = AT_CMD_ERROR;
   1837c:	2301      	movs	r3, #1
   1837e:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   18382:	4819      	ldr	r0, [pc, #100]	; (183e8 <cmd_send+0x98>)
   18384:	e012      	b.n	183ac <cmd_send+0x5c>
	switch (state) {
   18386:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1838a:	2b03      	cmp	r3, #3
   1838c:	d810      	bhi.n	183b0 <cmd_send+0x60>
   1838e:	a201      	add	r2, pc, #4	; (adr r2, 18394 <cmd_send+0x44>)
   18390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18394:	000183a5 	.word	0x000183a5
   18398:	00018383 	.word	0x00018383
   1839c:	000183bf 	.word	0x000183bf
   183a0:	000183d1 	.word	0x000183d1
		write_uart_string(at_buf);
   183a4:	480c      	ldr	r0, [pc, #48]	; (183d8 <cmd_send+0x88>)
   183a6:	f7ff ffc5 	bl	18334 <write_uart_string>
		write_uart_string(OK_STR);
   183aa:	4810      	ldr	r0, [pc, #64]	; (183ec <cmd_send+0x9c>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   183ac:	f7ff ffc2 	bl	18334 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   183b0:	4b0f      	ldr	r3, [pc, #60]	; (183f0 <cmd_send+0xa0>)
   183b2:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   183b4:	f015 ff77 	bl	2e2a6 <z_impl_uart_irq_rx_enable>
}
   183b8:	b00b      	add	sp, #44	; 0x2c
   183ba:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   183be:	4b0d      	ldr	r3, [pc, #52]	; (183f4 <cmd_send+0xa4>)
   183c0:	9100      	str	r1, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   183c2:	2219      	movs	r2, #25
   183c4:	2100      	movs	r1, #0
   183c6:	a803      	add	r0, sp, #12
   183c8:	f00e f90c 	bl	265e4 <__sprintf_chk>
		write_uart_string(str);
   183cc:	a803      	add	r0, sp, #12
   183ce:	e7ed      	b.n	183ac <cmd_send+0x5c>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   183d0:	4b09      	ldr	r3, [pc, #36]	; (183f8 <cmd_send+0xa8>)
   183d2:	9100      	str	r1, [sp, #0]
   183d4:	e7f5      	b.n	183c2 <cmd_send+0x72>
   183d6:	bf00      	nop
   183d8:	20025268 	.word	0x20025268
   183dc:	0002ec7c 	.word	0x0002ec7c
   183e0:	0002ec84 	.word	0x0002ec84
   183e4:	00031ace 	.word	0x00031ace
   183e8:	0003196a 	.word	0x0003196a
   183ec:	0003194d 	.word	0x0003194d
   183f0:	2002173c 	.word	0x2002173c
   183f4:	00031af4 	.word	0x00031af4
   183f8:	00031b05 	.word	0x00031b05

000183fc <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   183fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18400:	4604      	mov	r4, r0
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update) {
   18402:	6883      	ldr	r3, [r0, #8]
   18404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   18406:	b103      	cbz	r3, 1840a <isr+0xe>
		return api->irq_update(dev);
   18408:	4798      	blx	r3
	if (api->irq_rx_ready) {
   1840a:	68a3      	ldr	r3, [r4, #8]
   1840c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1840e:	b1bb      	cbz	r3, 18440 <isr+0x44>
		return api->irq_rx_ready(dev);
   18410:	4620      	mov	r0, r4
   18412:	4798      	blx	r3

	uint8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   18414:	b1a0      	cbz	r0, 18440 <isr+0x44>
   18416:	f8df 8140 	ldr.w	r8, [pc, #320]	; 18558 <isr+0x15c>
   1841a:	4e44      	ldr	r6, [pc, #272]	; (1852c <isr+0x130>)
   1841c:	4647      	mov	r7, r8
   1841e:	4b44      	ldr	r3, [pc, #272]	; (18530 <isr+0x134>)
		if (at_cmd_len > 0) {
   18420:	4d44      	ldr	r5, [pc, #272]	; (18534 <isr+0x138>)
   18422:	1af6      	subs	r6, r6, r3
   18424:	08f6      	lsrs	r6, r6, #3
   18426:	e8d8 3faf 	lda	r3, [r8]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   1842a:	07db      	lsls	r3, r3, #31
   1842c:	d408      	bmi.n	18440 <isr+0x44>
	if (api->fifo_read) {
   1842e:	68a3      	ldr	r3, [r4, #8]
   18430:	699b      	ldr	r3, [r3, #24]
   18432:	b12b      	cbz	r3, 18440 <isr+0x44>
		return api->fifo_read(dev, rx_data, size);
   18434:	2201      	movs	r2, #1
   18436:	4620      	mov	r0, r4
   18438:	f10d 0107 	add.w	r1, sp, #7
   1843c:	4798      	blx	r3
   1843e:	b910      	cbnz	r0, 18446 <isr+0x4a>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   18440:	b002      	add	sp, #8
   18442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uart_rx_handler(character);
   18446:	f89d 1007 	ldrb.w	r1, [sp, #7]
	switch (character) {
   1844a:	2908      	cmp	r1, #8
   1844c:	d001      	beq.n	18452 <isr+0x56>
   1844e:	297f      	cmp	r1, #127	; 0x7f
   18450:	d105      	bne.n	1845e <isr+0x62>
		if (at_cmd_len > 0) {
   18452:	682b      	ldr	r3, [r5, #0]
   18454:	2b00      	cmp	r3, #0
   18456:	d0e6      	beq.n	18426 <isr+0x2a>
			at_cmd_len--;
   18458:	3b01      	subs	r3, #1
   1845a:	602b      	str	r3, [r5, #0]
   1845c:	e7e3      	b.n	18426 <isr+0x2a>
	if (!inside_quotes) {
   1845e:	4836      	ldr	r0, [pc, #216]	; (18538 <isr+0x13c>)
   18460:	7803      	ldrb	r3, [r0, #0]
   18462:	b993      	cbnz	r3, 1848a <isr+0x8e>
		switch (character) {
   18464:	290a      	cmp	r1, #10
   18466:	d01e      	beq.n	184a6 <isr+0xaa>
   18468:	290d      	cmp	r1, #13
   1846a:	d00a      	beq.n	18482 <isr+0x86>
   1846c:	b969      	cbnz	r1, 1848a <isr+0x8e>
			if (term_mode == MODE_NULL_TERM) {
   1846e:	4b33      	ldr	r3, [pc, #204]	; (1853c <isr+0x140>)
   18470:	781b      	ldrb	r3, [r3, #0]
   18472:	b3a3      	cbz	r3, 184de <isr+0xe2>
			LOG_WRN("Ignored null; would terminate string early.");
   18474:	01b1      	lsls	r1, r6, #6
   18476:	4832      	ldr	r0, [pc, #200]	; (18540 <isr+0x144>)
   18478:	f041 0102 	orr.w	r1, r1, #2
   1847c:	f014 f868 	bl	2c550 <log_0>
			return;
   18480:	e7d1      	b.n	18426 <isr+0x2a>
			if (term_mode == MODE_CR) {
   18482:	4a2e      	ldr	r2, [pc, #184]	; (1853c <isr+0x140>)
   18484:	7812      	ldrb	r2, [r2, #0]
   18486:	2a01      	cmp	r2, #1
			    at_cmd_len > 0 &&
   18488:	d029      	beq.n	184de <isr+0xe2>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   1848a:	f8d5 c000 	ldr.w	ip, [r5]
   1848e:	f10c 0201 	add.w	r2, ip, #1
   18492:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   18496:	d317      	bcc.n	184c8 <isr+0xcc>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   18498:	01b2      	lsls	r2, r6, #6
   1849a:	482a      	ldr	r0, [pc, #168]	; (18544 <isr+0x148>)
   1849c:	f042 0201 	orr.w	r2, r2, #1
   184a0:	f014 f865 	bl	2c56e <log_1>
		return;
   184a4:	e7bf      	b.n	18426 <isr+0x2a>
			if (term_mode == MODE_LF) {
   184a6:	4a25      	ldr	r2, [pc, #148]	; (1853c <isr+0x140>)
   184a8:	7812      	ldrb	r2, [r2, #0]
   184aa:	2a02      	cmp	r2, #2
   184ac:	d017      	beq.n	184de <isr+0xe2>
			if (term_mode == MODE_CR_LF &&
   184ae:	2a03      	cmp	r2, #3
   184b0:	d1eb      	bne.n	1848a <isr+0x8e>
   184b2:	f8d5 c000 	ldr.w	ip, [r5]
   184b6:	f1bc 0f00 	cmp.w	ip, #0
   184ba:	d0e6      	beq.n	1848a <isr+0x8e>
			    at_buf[at_cmd_len - 1] == '\r') {
   184bc:	4a22      	ldr	r2, [pc, #136]	; (18548 <isr+0x14c>)
   184be:	4462      	add	r2, ip
			    at_cmd_len > 0 &&
   184c0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   184c4:	2a0d      	cmp	r2, #13
   184c6:	e7df      	b.n	18488 <isr+0x8c>
	at_buf[at_cmd_len] = character;
   184c8:	f8df e07c 	ldr.w	lr, [pc, #124]	; 18548 <isr+0x14c>
	if (character == '"') {
   184cc:	2922      	cmp	r1, #34	; 0x22
	at_buf[at_cmd_len] = character;
   184ce:	f80e 100c 	strb.w	r1, [lr, ip]
	at_cmd_len++;
   184d2:	602a      	str	r2, [r5, #0]
	if (character == '"') {
   184d4:	d1a7      	bne.n	18426 <isr+0x2a>
	if (!inside_quotes) {
   184d6:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   184da:	7003      	strb	r3, [r0, #0]
   184dc:	e7a3      	b.n	18426 <isr+0x2a>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   184de:	2200      	movs	r2, #0
   184e0:	6829      	ldr	r1, [r5, #0]
   184e2:	4b19      	ldr	r3, [pc, #100]	; (18548 <isr+0x14c>)
	inside_quotes = false;
   184e4:	7002      	strb	r2, [r0, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   184e6:	545a      	strb	r2, [r3, r1]
	at_cmd_len = 0;
   184e8:	4619      	mov	r1, r3
   184ea:	602a      	str	r2, [r5, #0]
		if (*c > ' ') {
   184ec:	f813 2b01 	ldrb.w	r2, [r3], #1
   184f0:	2a20      	cmp	r2, #32
   184f2:	d802      	bhi.n	184fa <isr+0xfe>
		} else if (*c == '\0') {
   184f4:	2a00      	cmp	r2, #0
   184f6:	d1f9      	bne.n	184ec <isr+0xf0>
   184f8:	e795      	b.n	18426 <isr+0x2a>
	if (at_buf[0]) {
   184fa:	780b      	ldrb	r3, [r1, #0]
   184fc:	2b00      	cmp	r3, #0
   184fe:	d092      	beq.n	18426 <isr+0x2a>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   18500:	4b12      	ldr	r3, [pc, #72]	; (1854c <isr+0x150>)
   18502:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   18504:	6883      	ldr	r3, [r0, #8]
   18506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18508:	b103      	cbz	r3, 1850c <isr+0x110>
		api->irq_rx_disable(dev);
   1850a:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1850c:	e8d7 3fef 	ldaex	r3, [r7]
   18510:	f043 0201 	orr.w	r2, r3, #1
   18514:	e8c7 2fe1 	stlex	r1, r2, [r7]
   18518:	2900      	cmp	r1, #0
   1851a:	d1f7      	bne.n	1850c <isr+0x110>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1851c:	07da      	lsls	r2, r3, #31
   1851e:	d482      	bmi.n	18426 <isr+0x2a>
		k_queue_append(&work_q->queue, work);
   18520:	490b      	ldr	r1, [pc, #44]	; (18550 <isr+0x154>)
   18522:	480c      	ldr	r0, [pc, #48]	; (18554 <isr+0x158>)
   18524:	f016 f88e 	bl	2e644 <k_queue_append>
   18528:	e77d      	b.n	18426 <isr+0x2a>
   1852a:	bf00      	nop
   1852c:	0002ec84 	.word	0x0002ec84
   18530:	0002ec7c 	.word	0x0002ec7c
   18534:	2002172c 	.word	0x2002172c
   18538:	20026268 	.word	0x20026268
   1853c:	20026269 	.word	0x20026269
   18540:	00031b16 	.word	0x00031b16
   18544:	00031b42 	.word	0x00031b42
   18548:	20025268 	.word	0x20025268
   1854c:	2002173c 	.word	0x2002173c
   18550:	20021730 	.word	0x20021730
   18554:	20020fb8 	.word	0x20020fb8
   18558:	20021738 	.word	0x20021738

0001855c <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(const struct device *arg)
{
   1855c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   18560:	2201      	movs	r2, #1
   18562:	4b49      	ldr	r3, [pc, #292]	; (18688 <at_host_init+0x12c>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   18564:	2000      	movs	r0, #0
   18566:	4949      	ldr	r1, [pc, #292]	; (1868c <at_host_init+0x130>)
		term_mode = mode;
   18568:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   1856a:	f7ff fe99 	bl	182a0 <at_notif_register_handler>
	if (err != 0) {
   1856e:	4c48      	ldr	r4, [pc, #288]	; (18690 <at_host_init+0x134>)
   18570:	4a48      	ldr	r2, [pc, #288]	; (18694 <at_host_init+0x138>)
   18572:	4606      	mov	r6, r0
   18574:	1aa4      	subs	r4, r4, r2
   18576:	08e4      	lsrs	r4, r4, #3
   18578:	b150      	cbz	r0, 18590 <at_host_init+0x34>
		LOG_ERR("Can't register handler err=%d", err);
   1857a:	01a2      	lsls	r2, r4, #6
   1857c:	4601      	mov	r1, r0
   1857e:	f042 0201 	orr.w	r2, r2, #1
   18582:	4845      	ldr	r0, [pc, #276]	; (18698 <at_host_init+0x13c>)
   18584:	f013 fff3 	bl	2c56e <log_1>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   18588:	4630      	mov	r0, r6
   1858a:	b003      	add	sp, #12
   1858c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18590:	4842      	ldr	r0, [pc, #264]	; (1869c <at_host_init+0x140>)
   18592:	f009 fe4d 	bl	22230 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   18596:	4d42      	ldr	r5, [pc, #264]	; (186a0 <at_host_init+0x144>)
   18598:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   1859a:	b988      	cbnz	r0, 185c0 <at_host_init+0x64>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   1859c:	01a2      	lsls	r2, r4, #6
   1859e:	493f      	ldr	r1, [pc, #252]	; (1869c <at_host_init+0x140>)
   185a0:	4840      	ldr	r0, [pc, #256]	; (186a4 <at_host_init+0x148>)
   185a2:	f042 0201 	orr.w	r2, r2, #1
   185a6:	f013 ffe2 	bl	2c56e <log_1>
		return -EINVAL;
   185aa:	f06f 0115 	mvn.w	r1, #21
		LOG_ERR("UART could not be initialized: %d", err);
   185ae:	01a2      	lsls	r2, r4, #6
   185b0:	483d      	ldr	r0, [pc, #244]	; (186a8 <at_host_init+0x14c>)
   185b2:	f042 0201 	orr.w	r2, r2, #1
   185b6:	f013 ffda 	bl	2c56e <log_1>
		return -EFAULT;
   185ba:	f06f 060d 	mvn.w	r6, #13
   185be:	e7e3      	b.n	18588 <at_host_init+0x2c>
	return z_impl_k_uptime_ticks();
   185c0:	f016 f912 	bl	2e7e8 <z_impl_k_uptime_ticks>
   185c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   185c8:	460a      	mov	r2, r1
   185ca:	fba0 0103 	umull	r0, r1, r0, r3
   185ce:	fb03 1102 	mla	r1, r3, r2, r1
   185d2:	ea4f 38d0 	mov.w	r8, r0, lsr #15
   185d6:	ea4f 1984 	mov.w	r9, r4, lsl #6
			LOG_INF("UART check failed: %d. "
   185da:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 186c4 <at_host_init+0x168>
   185de:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   185e2:	f049 0a03 	orr.w	sl, r9, #3
		err = uart_err_check(uart_dev);
   185e6:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   185e8:	6883      	ldr	r3, [r0, #8]
   185ea:	689b      	ldr	r3, [r3, #8]
   185ec:	b393      	cbz	r3, 18654 <at_host_init+0xf8>
		return api->err_check(dev);
   185ee:	4798      	blx	r3
		if (err) {
   185f0:	4607      	mov	r7, r0
   185f2:	b378      	cbz	r0, 18654 <at_host_init+0xf8>
   185f4:	f016 f8f8 	bl	2e7e8 <z_impl_k_uptime_ticks>
   185f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   185fc:	460a      	mov	r2, r1
   185fe:	fba0 0103 	umull	r0, r1, r0, r3
   18602:	fb03 1102 	mla	r1, r3, r2, r1
   18606:	0bc3      	lsrs	r3, r0, #15
   18608:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			if (k_uptime_get_32() - start_time >
   1860c:	eba3 0308 	sub.w	r3, r3, r8
   18610:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   18614:	d908      	bls.n	18628 <at_host_init+0xcc>
				LOG_ERR("UART check failed: %d. "
   18616:	4639      	mov	r1, r7
   18618:	4824      	ldr	r0, [pc, #144]	; (186ac <at_host_init+0x150>)
   1861a:	f049 0201 	orr.w	r2, r9, #1
   1861e:	f013 ffa6 	bl	2c56e <log_1>
				return -EIO;
   18622:	f06f 0104 	mvn.w	r1, #4
   18626:	e7c2      	b.n	185ae <at_host_init+0x52>
			LOG_INF("UART check failed: %d. "
   18628:	4652      	mov	r2, sl
   1862a:	4639      	mov	r1, r7
   1862c:	4658      	mov	r0, fp
   1862e:	f013 ff9e 	bl	2c56e <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   18632:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   18634:	6883      	ldr	r3, [r0, #8]
   18636:	699b      	ldr	r3, [r3, #24]
   18638:	b92b      	cbnz	r3, 18646 <at_host_init+0xea>
	return z_impl_k_sleep(timeout);
   1863a:	2100      	movs	r1, #0
   1863c:	f44f 70a4 	mov.w	r0, #328	; 0x148
   18640:	f00b ff46 	bl	244d0 <z_impl_k_sleep>
	} while (err);
   18644:	e7cf      	b.n	185e6 <at_host_init+0x8a>
		return api->fifo_read(dev, rx_data, size);
   18646:	2201      	movs	r2, #1
   18648:	f10d 0107 	add.w	r1, sp, #7
   1864c:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   1864e:	2800      	cmp	r0, #0
   18650:	d1ef      	bne.n	18632 <at_host_init+0xd6>
   18652:	e7f2      	b.n	1863a <at_host_init+0xde>
	uart_irq_callback_set(uart_dev, isr);
   18654:	6828      	ldr	r0, [r5, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   18656:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   18658:	b123      	cbz	r3, 18664 <at_host_init+0x108>
   1865a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1865c:	b113      	cbz	r3, 18664 <at_host_init+0x108>
		api->irq_callback_set(dev, cb, user_data);
   1865e:	2200      	movs	r2, #0
   18660:	4913      	ldr	r1, [pc, #76]	; (186b0 <at_host_init+0x154>)
   18662:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   18664:	2200      	movs	r2, #0
   18666:	4b13      	ldr	r3, [pc, #76]	; (186b4 <at_host_init+0x158>)
   18668:	4913      	ldr	r1, [pc, #76]	; (186b8 <at_host_init+0x15c>)
   1866a:	601a      	str	r2, [r3, #0]
   1866c:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   18670:	4812      	ldr	r0, [pc, #72]	; (186bc <at_host_init+0x160>)
   18672:	230a      	movs	r3, #10
   18674:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18678:	4911      	ldr	r1, [pc, #68]	; (186c0 <at_host_init+0x164>)
   1867a:	f00c f9ab 	bl	249d4 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   1867e:	6828      	ldr	r0, [r5, #0]
   18680:	f015 fe11 	bl	2e2a6 <z_impl_uart_irq_rx_enable>
	return err;
   18684:	e780      	b.n	18588 <at_host_init+0x2c>
   18686:	bf00      	nop
   18688:	20026269 	.word	0x20026269
   1868c:	0002e2b1 	.word	0x0002e2b1
   18690:	0002ec84 	.word	0x0002ec84
   18694:	0002ec7c 	.word	0x0002ec7c
   18698:	00031b62 	.word	0x00031b62
   1869c:	00030683 	.word	0x00030683
   186a0:	2002173c 	.word	0x2002173c
   186a4:	00031b80 	.word	0x00031b80
   186a8:	00031bfb 	.word	0x00031bfb
   186ac:	00031b90 	.word	0x00031b90
   186b0:	000183fd 	.word	0x000183fd
   186b4:	20021730 	.word	0x20021730
   186b8:	00018351 	.word	0x00018351
   186bc:	20020fb8 	.word	0x20020fb8
   186c0:	20027b10 	.word	0x20027b10
   186c4:	00031bc6 	.word	0x00031bc6

000186c8 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   186c8:	4b06      	ldr	r3, [pc, #24]	; (186e4 <is_valid_notification_char+0x1c>)
   186ca:	5cc3      	ldrb	r3, [r0, r3]
   186cc:	f003 0303 	and.w	r3, r3, #3
   186d0:	2b02      	cmp	r3, #2
   186d2:	bf08      	it	eq
   186d4:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   186d6:	3841      	subs	r0, #65	; 0x41
   186d8:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   186da:	2819      	cmp	r0, #25
   186dc:	bf8c      	ite	hi
   186de:	2000      	movhi	r0, #0
   186e0:	2001      	movls	r0, #1
   186e2:	4770      	bx	lr
   186e4:	0002f5d9 	.word	0x0002f5d9

000186e8 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   186e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   186ec:	6805      	ldr	r5, [r0, #0]
{
   186ee:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   186f0:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   186f2:	782b      	ldrb	r3, [r5, #0]
{
   186f4:	4680      	mov	r8, r0
   186f6:	460f      	mov	r7, r1
   186f8:	4616      	mov	r6, r2
   186fa:	2b00      	cmp	r3, #0
   186fc:	f000 80c8 	beq.w	18890 <at_parse_process_element+0x1a8>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   18700:	4b65      	ldr	r3, [pc, #404]	; (18898 <at_parse_process_element+0x1b0>)
   18702:	781c      	ldrb	r4, [r3, #0]
   18704:	2c06      	cmp	r4, #6
   18706:	d110      	bne.n	1872a <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   18708:	1c6b      	adds	r3, r5, #1
   1870a:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   1870c:	9a00      	ldr	r2, [sp, #0]
   1870e:	7810      	ldrb	r0, [r2, #0]
   18710:	f7ff ffda 	bl	186c8 <is_valid_notification_char>
   18714:	b930      	cbnz	r0, 18724 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   18716:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   18718:	462a      	mov	r2, r5
   1871a:	4639      	mov	r1, r7
   1871c:	4630      	mov	r0, r6
   1871e:	f015 fe43 	bl	2e3a8 <at_params_string_put>
   18722:	e01b      	b.n	1875c <at_parse_process_element+0x74>
			tmpstr++;
   18724:	3201      	adds	r2, #1
   18726:	9200      	str	r2, [sp, #0]
   18728:	e7f0      	b.n	1870c <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   1872a:	2c07      	cmp	r4, #7
   1872c:	d124      	bne.n	18778 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   1872e:	4668      	mov	r0, sp
   18730:	f015 fdca 	bl	2e2c8 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   18734:	9a00      	ldr	r2, [sp, #0]
   18736:	7810      	ldrb	r0, [r2, #0]
   18738:	f7ff ffc6 	bl	186c8 <is_valid_notification_char>
   1873c:	b9a8      	cbnz	r0, 1876a <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   1873e:	1b53      	subs	r3, r2, r5
   18740:	4639      	mov	r1, r7
   18742:	462a      	mov	r2, r5
   18744:	4630      	mov	r0, r6
   18746:	f015 fe2f 	bl	2e3a8 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   1874a:	9b00      	ldr	r3, [sp, #0]
   1874c:	781a      	ldrb	r2, [r3, #0]
   1874e:	2a3d      	cmp	r2, #61	; 0x3d
   18750:	d10e      	bne.n	18770 <at_parse_process_element+0x88>
   18752:	785a      	ldrb	r2, [r3, #1]
   18754:	2a3f      	cmp	r2, #63	; 0x3f
   18756:	d101      	bne.n	1875c <at_parse_process_element+0x74>
			tmpstr += 2;
   18758:	3302      	adds	r3, #2
			tmpstr++;
   1875a:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   1875c:	2000      	movs	r0, #0
	*str = tmpstr;
   1875e:	9b00      	ldr	r3, [sp, #0]
   18760:	f8c8 3000 	str.w	r3, [r8]
}
   18764:	b023      	add	sp, #140	; 0x8c
   18766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   1876a:	3201      	adds	r2, #1
   1876c:	9200      	str	r2, [sp, #0]
   1876e:	e7e1      	b.n	18734 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   18770:	2a3f      	cmp	r2, #63	; 0x3f
   18772:	d1f3      	bne.n	1875c <at_parse_process_element+0x74>
			tmpstr++;
   18774:	3301      	adds	r3, #1
   18776:	e7f0      	b.n	1875a <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   18778:	2c08      	cmp	r4, #8
   1877a:	d103      	bne.n	18784 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   1877c:	4610      	mov	r0, r2
   1877e:	f015 fdea 	bl	2e356 <at_params_empty_put>
   18782:	e7eb      	b.n	1875c <at_parse_process_element+0x74>
	} else if (state == STRING) {
   18784:	2c02      	cmp	r4, #2
   18786:	d111      	bne.n	187ac <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   18788:	9a00      	ldr	r2, [sp, #0]
   1878a:	7811      	ldrb	r1, [r2, #0]
   1878c:	4608      	mov	r0, r1
   1878e:	f015 fd92 	bl	2e2b6 <is_lfcr>
   18792:	b918      	cbnz	r0, 1879c <at_parse_process_element+0xb4>
   18794:	b111      	cbz	r1, 1879c <at_parse_process_element+0xb4>
			tmpstr++;
   18796:	3201      	adds	r2, #1
   18798:	9200      	str	r2, [sp, #0]
   1879a:	e7f5      	b.n	18788 <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   1879c:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   1879e:	462a      	mov	r2, r5
   187a0:	4639      	mov	r1, r7
   187a2:	4630      	mov	r0, r6
   187a4:	f015 fe00 	bl	2e3a8 <at_params_string_put>
		tmpstr++;
   187a8:	9b00      	ldr	r3, [sp, #0]
   187aa:	e7e3      	b.n	18774 <at_parse_process_element+0x8c>
	} else if (state == QUOTED_STRING) {
   187ac:	2c03      	cmp	r4, #3
   187ae:	d109      	bne.n	187c4 <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   187b0:	9b00      	ldr	r3, [sp, #0]
   187b2:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   187b4:	2a22      	cmp	r2, #34	; 0x22
   187b6:	d003      	beq.n	187c0 <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   187b8:	b112      	cbz	r2, 187c0 <at_parse_process_element+0xd8>
			tmpstr++;
   187ba:	3301      	adds	r3, #1
   187bc:	9300      	str	r3, [sp, #0]
   187be:	e7f7      	b.n	187b0 <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   187c0:	1b5b      	subs	r3, r3, r5
   187c2:	e7ec      	b.n	1879e <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   187c4:	2c01      	cmp	r4, #1
   187c6:	d13c      	bne.n	18842 <at_parse_process_element+0x15a>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   187c8:	4628      	mov	r0, r5
   187ca:	220a      	movs	r2, #10
   187cc:	a901      	add	r1, sp, #4
   187ce:	f00e fc51 	bl	27074 <strtoul>
		tmpstr = next;
   187d2:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   187d4:	4d31      	ldr	r5, [pc, #196]	; (1889c <at_parse_process_element+0x1b4>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   187d6:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   187d8:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   187da:	9800      	ldr	r0, [sp, #0]
   187dc:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   187de:	2b29      	cmp	r3, #41	; 0x29
   187e0:	d028      	beq.n	18834 <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   187e2:	b33b      	cbz	r3, 18834 <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   187e4:	3b2c      	subs	r3, #44	; 0x2c
   187e6:	b2db      	uxtb	r3, r3
   187e8:	3001      	adds	r0, #1
   187ea:	2b11      	cmp	r3, #17
				tmparray[i++] =
   187ec:	9000      	str	r0, [sp, #0]
   187ee:	d803      	bhi.n	187f8 <at_parse_process_element+0x110>
   187f0:	fa25 f303 	lsr.w	r3, r5, r3
   187f4:	07db      	lsls	r3, r3, #31
   187f6:	d408      	bmi.n	1880a <at_parse_process_element+0x122>
				tmpstr++;
   187f8:	46a1      	mov	r9, r4
   187fa:	e004      	b.n	18806 <at_parse_process_element+0x11e>
					tmpstr = next;
   187fc:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   187fe:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   18802:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   18804:	d015      	beq.n	18832 <at_parse_process_element+0x14a>
				tmpstr++;
   18806:	464c      	mov	r4, r9
   18808:	e7e7      	b.n	187da <at_parse_process_element+0xf2>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   1880a:	220a      	movs	r2, #10
   1880c:	a901      	add	r1, sp, #4
   1880e:	f00e fc31 	bl	27074 <strtoul>
				tmparray[i++] =
   18812:	ab22      	add	r3, sp, #136	; 0x88
   18814:	f104 0901 	add.w	r9, r4, #1
   18818:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1881c:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   18820:	9800      	ldr	r0, [sp, #0]
   18822:	f00e f83b 	bl	2689c <strlen>
   18826:	4604      	mov	r4, r0
   18828:	9801      	ldr	r0, [sp, #4]
   1882a:	f00e f837 	bl	2689c <strlen>
   1882e:	4284      	cmp	r4, r0
   18830:	d1e4      	bne.n	187fc <at_parse_process_element+0x114>
   18832:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   18834:	4639      	mov	r1, r7
   18836:	4630      	mov	r0, r6
   18838:	00a3      	lsls	r3, r4, #2
   1883a:	aa02      	add	r2, sp, #8
   1883c:	f015 fdda 	bl	2e3f4 <at_params_array_put>
   18840:	e7b2      	b.n	187a8 <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   18842:	2c04      	cmp	r4, #4
   18844:	d115      	bne.n	18872 <at_parse_process_element+0x18a>
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   18846:	220a      	movs	r2, #10
   18848:	4628      	mov	r0, r5
   1884a:	a902      	add	r1, sp, #8
   1884c:	f00e fc12 	bl	27074 <strtoul>
		tmpstr = next;
   18850:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   18852:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   18856:	4602      	mov	r2, r0
		tmpstr = next;
   18858:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   1885a:	da05      	bge.n	18868 <at_parse_process_element+0x180>
			at_params_short_put(list, index, (uint16_t)value);
   1885c:	b282      	uxth	r2, r0
   1885e:	4639      	mov	r1, r7
   18860:	4630      	mov	r0, r6
   18862:	f015 fd63 	bl	2e32c <at_params_short_put>
   18866:	e779      	b.n	1875c <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   18868:	4639      	mov	r1, r7
   1886a:	4630      	mov	r0, r6
   1886c:	f015 fd87 	bl	2e37e <at_params_int_put>
   18870:	e774      	b.n	1875c <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   18872:	2c05      	cmp	r4, #5
   18874:	f47f af72 	bne.w	1875c <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   18878:	4909      	ldr	r1, [pc, #36]	; (188a0 <at_parse_process_element+0x1b8>)
   1887a:	9b00      	ldr	r3, [sp, #0]
   1887c:	781a      	ldrb	r2, [r3, #0]
   1887e:	5c52      	ldrb	r2, [r2, r1]
   18880:	f012 0f44 	tst.w	r2, #68	; 0x44
   18884:	d101      	bne.n	1888a <at_parse_process_element+0x1a2>
		at_params_string_put(list, index, start_ptr,
   18886:	1b5b      	subs	r3, r3, r5
   18888:	e746      	b.n	18718 <at_parse_process_element+0x30>
			tmpstr++;
   1888a:	3301      	adds	r3, #1
   1888c:	9300      	str	r3, [sp, #0]
   1888e:	e7f4      	b.n	1887a <at_parse_process_element+0x192>
		return -1;
   18890:	f04f 30ff 	mov.w	r0, #4294967295
   18894:	e766      	b.n	18764 <at_parse_process_element+0x7c>
   18896:	bf00      	nop
   18898:	2002626a 	.word	0x2002626a
   1889c:	00024001 	.word	0x00024001
   188a0:	0002f5d9 	.word	0x0002f5d9

000188a4 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   188a4:	b510      	push	{r4, lr}
   188a6:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   188a8:	f00d fff8 	bl	2689c <strlen>
   188ac:	2801      	cmp	r0, #1
   188ae:	d922      	bls.n	188f6 <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   188b0:	7821      	ldrb	r1, [r4, #0]
   188b2:	4b13      	ldr	r3, [pc, #76]	; (18900 <is_command+0x5c>)
   188b4:	5cca      	ldrb	r2, [r1, r3]
   188b6:	f002 0203 	and.w	r2, r2, #3
   188ba:	2a02      	cmp	r2, #2
   188bc:	bf08      	it	eq
   188be:	3920      	subeq	r1, #32
   188c0:	2941      	cmp	r1, #65	; 0x41
   188c2:	461a      	mov	r2, r3
   188c4:	d117      	bne.n	188f6 <is_command+0x52>
   188c6:	7863      	ldrb	r3, [r4, #1]
   188c8:	5cd2      	ldrb	r2, [r2, r3]
   188ca:	f002 0203 	and.w	r2, r2, #3
   188ce:	2a02      	cmp	r2, #2
   188d0:	bf08      	it	eq
   188d2:	3b20      	subeq	r3, #32
   188d4:	2b54      	cmp	r3, #84	; 0x54
   188d6:	d10e      	bne.n	188f6 <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   188d8:	78a2      	ldrb	r2, [r4, #2]
   188da:	2a25      	cmp	r2, #37	; 0x25
   188dc:	d00d      	beq.n	188fa <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   188de:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   188e2:	2b23      	cmp	r3, #35	; 0x23
   188e4:	d009      	beq.n	188fa <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   188e6:	4610      	mov	r0, r2
   188e8:	f015 fce5 	bl	2e2b6 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   188ec:	b910      	cbnz	r0, 188f4 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   188ee:	fab2 f082 	clz	r0, r2
   188f2:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   188f4:	bd10      	pop	{r4, pc}
		return false;
   188f6:	2000      	movs	r0, #0
   188f8:	e7fc      	b.n	188f4 <is_command+0x50>
		return true;
   188fa:	2001      	movs	r0, #1
   188fc:	e7fa      	b.n	188f4 <is_command+0x50>
   188fe:	bf00      	nop
   18900:	0002f5d9 	.word	0x0002f5d9

00018904 <at_parse_detect_type>:
{
   18904:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   18906:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   18908:	2900      	cmp	r1, #0
{
   1890a:	4605      	mov	r5, r0
   1890c:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   1890e:	d141      	bne.n	18994 <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   18910:	2a2b      	cmp	r2, #43	; 0x2b
   18912:	4e29      	ldr	r6, [pc, #164]	; (189b8 <at_parse_detect_type+0xb4>)
   18914:	d001      	beq.n	1891a <at_parse_detect_type+0x16>
   18916:	2a25      	cmp	r2, #37	; 0x25
   18918:	d104      	bne.n	18924 <at_parse_detect_type+0x20>
	state = new_state;
   1891a:	2306      	movs	r3, #6
   1891c:	7033      	strb	r3, [r6, #0]
	return 0;
   1891e:	2000      	movs	r0, #0
	*str = tmpstr;
   18920:	602c      	str	r4, [r5, #0]
}
   18922:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   18924:	4620      	mov	r0, r4
   18926:	f7ff ffbd 	bl	188a4 <is_command>
   1892a:	b388      	cbz	r0, 18990 <at_parse_detect_type+0x8c>
	state = new_state;
   1892c:	2307      	movs	r3, #7
   1892e:	e7f5      	b.n	1891c <at_parse_detect_type+0x18>
	if (chr == '"') {
   18930:	2a22      	cmp	r2, #34	; 0x22
   18932:	d006      	beq.n	18942 <at_parse_detect_type+0x3e>
	if (chr == '(') {
   18934:	2a28      	cmp	r2, #40	; 0x28
   18936:	d109      	bne.n	1894c <at_parse_detect_type+0x48>
   18938:	2201      	movs	r2, #1
   1893a:	4b1f      	ldr	r3, [pc, #124]	; (189b8 <at_parse_detect_type+0xb4>)
		tmpstr++;
   1893c:	4414      	add	r4, r2
	state = new_state;
   1893e:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   18940:	e7ed      	b.n	1891e <at_parse_detect_type+0x1a>
	state = new_state;
   18942:	2203      	movs	r2, #3
   18944:	4b1c      	ldr	r3, [pc, #112]	; (189b8 <at_parse_detect_type+0xb4>)
		tmpstr++;
   18946:	3401      	adds	r4, #1
	state = new_state;
   18948:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1894a:	e7e8      	b.n	1891e <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   1894c:	4610      	mov	r0, r2
   1894e:	f015 fcb2 	bl	2e2b6 <is_lfcr>
   18952:	b170      	cbz	r0, 18972 <at_parse_detect_type+0x6e>
   18954:	4918      	ldr	r1, [pc, #96]	; (189b8 <at_parse_detect_type+0xb4>)
   18956:	7808      	ldrb	r0, [r1, #0]
   18958:	2804      	cmp	r0, #4
   1895a:	d108      	bne.n	1896e <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   1895c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   18960:	f015 fca9 	bl	2e2b6 <is_lfcr>
   18964:	2800      	cmp	r0, #0
   18966:	d1f9      	bne.n	1895c <at_parse_detect_type+0x58>
	state = new_state;
   18968:	2305      	movs	r3, #5
   1896a:	700b      	strb	r3, [r1, #0]
}
   1896c:	e7d7      	b.n	1891e <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   1896e:	2808      	cmp	r0, #8
   18970:	d0d5      	beq.n	1891e <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   18972:	3a2c      	subs	r2, #44	; 0x2c
   18974:	b2d2      	uxtb	r2, r2
   18976:	2a11      	cmp	r2, #17
   18978:	d807      	bhi.n	1898a <at_parse_detect_type+0x86>
   1897a:	4b10      	ldr	r3, [pc, #64]	; (189bc <at_parse_detect_type+0xb8>)
   1897c:	fa23 f202 	lsr.w	r2, r3, r2
   18980:	07d3      	lsls	r3, r2, #31
   18982:	d502      	bpl.n	1898a <at_parse_detect_type+0x86>
	state = new_state;
   18984:	2208      	movs	r2, #8
   18986:	4b0c      	ldr	r3, [pc, #48]	; (189b8 <at_parse_detect_type+0xb4>)
   18988:	e013      	b.n	189b2 <at_parse_detect_type+0xae>
		return -1;
   1898a:	f04f 30ff 	mov.w	r0, #4294967295
   1898e:	e7c8      	b.n	18922 <at_parse_detect_type+0x1e>
	state = new_state;
   18990:	2302      	movs	r3, #2
   18992:	e7c3      	b.n	1891c <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   18994:	dd03      	ble.n	1899e <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   18996:	2a2b      	cmp	r2, #43	; 0x2b
   18998:	d0f7      	beq.n	1898a <at_parse_detect_type+0x86>
   1899a:	2a25      	cmp	r2, #37	; 0x25
   1899c:	d0f5      	beq.n	1898a <at_parse_detect_type+0x86>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   1899e:	4b08      	ldr	r3, [pc, #32]	; (189c0 <at_parse_detect_type+0xbc>)
   189a0:	5cd3      	ldrb	r3, [r2, r3]
   189a2:	0759      	lsls	r1, r3, #29
   189a4:	d403      	bmi.n	189ae <at_parse_detect_type+0xaa>
   189a6:	2a2d      	cmp	r2, #45	; 0x2d
   189a8:	d001      	beq.n	189ae <at_parse_detect_type+0xaa>
   189aa:	2a2b      	cmp	r2, #43	; 0x2b
   189ac:	d1c0      	bne.n	18930 <at_parse_detect_type+0x2c>
	state = new_state;
   189ae:	2204      	movs	r2, #4
   189b0:	4b01      	ldr	r3, [pc, #4]	; (189b8 <at_parse_detect_type+0xb4>)
   189b2:	701a      	strb	r2, [r3, #0]
}
   189b4:	e7b3      	b.n	1891e <at_parse_detect_type+0x1a>
   189b6:	bf00      	nop
   189b8:	2002626a 	.word	0x2002626a
   189bc:	00024001 	.word	0x00024001
   189c0:	0002f5d9 	.word	0x0002f5d9

000189c4 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   189c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189c8:	4688      	mov	r8, r1
   189ca:	4616      	mov	r6, r2
   189cc:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   189ce:	4604      	mov	r4, r0
   189d0:	2800      	cmp	r0, #0
   189d2:	d07e      	beq.n	18ad2 <at_parser_max_params_from_str+0x10e>
   189d4:	2a00      	cmp	r2, #0
   189d6:	d07c      	beq.n	18ad2 <at_parser_max_params_from_str+0x10e>
   189d8:	6853      	ldr	r3, [r2, #4]
   189da:	2b00      	cmp	r3, #0
   189dc:	d079      	beq.n	18ad2 <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   189de:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   189e0:	4610      	mov	r0, r2
   189e2:	f000 f8eb 	bl	18bbc <at_params_list_clear>
	const char *str = *at_params_str;
   189e6:	9401      	str	r4, [sp, #4]
	int index = 0;
   189e8:	462c      	mov	r4, r5

	max_params_count = MIN(max_params_count, list->param_count);
   189ea:	6833      	ldr	r3, [r6, #0]
		if (isspace((int)*str)) {
   189ec:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 18adc <at_parser_max_params_from_str+0x118>
	max_params_count = MIN(max_params_count, list->param_count);
   189f0:	429f      	cmp	r7, r3
   189f2:	bf28      	it	cs
   189f4:	461f      	movcs	r7, r3
	state = IDLE;
   189f6:	4b38      	ldr	r3, [pc, #224]	; (18ad8 <at_parser_max_params_from_str+0x114>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   189f8:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 18ae0 <at_parser_max_params_from_str+0x11c>
   189fc:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   189fe:	9b01      	ldr	r3, [sp, #4]
   18a00:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18a02:	2a00      	cmp	r2, #0
   18a04:	d04b      	beq.n	18a9e <at_parser_max_params_from_str+0xda>
   18a06:	42a7      	cmp	r7, r4
   18a08:	d949      	bls.n	18a9e <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   18a0a:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   18a0e:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   18a10:	0711      	lsls	r1, r2, #28
			str++;
   18a12:	bf48      	it	mi
   18a14:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   18a16:	4621      	mov	r1, r4
			str++;
   18a18:	bf48      	it	mi
   18a1a:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   18a1c:	f7ff ff72 	bl	18904 <at_parse_detect_type>
   18a20:	1c42      	adds	r2, r0, #1
   18a22:	d03c      	beq.n	18a9e <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   18a24:	4632      	mov	r2, r6
   18a26:	4621      	mov	r1, r4
   18a28:	a801      	add	r0, sp, #4
   18a2a:	f7ff fe5d 	bl	186e8 <at_parse_process_element>
   18a2e:	1c43      	adds	r3, r0, #1
   18a30:	d035      	beq.n	18a9e <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   18a32:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   18a34:	781a      	ldrb	r2, [r3, #0]
   18a36:	3a2c      	subs	r2, #44	; 0x2c
   18a38:	b2d2      	uxtb	r2, r2
   18a3a:	2a11      	cmp	r2, #17
   18a3c:	d81a      	bhi.n	18a74 <at_parser_max_params_from_str+0xb0>
   18a3e:	fa2a f202 	lsr.w	r2, sl, r2
   18a42:	07d1      	lsls	r1, r2, #31
   18a44:	d516      	bpl.n	18a74 <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   18a46:	7858      	ldrb	r0, [r3, #1]
   18a48:	f015 fc35 	bl	2e2b6 <is_lfcr>
   18a4c:	b178      	cbz	r0, 18a6e <at_parser_max_params_from_str+0xaa>
				index++;
   18a4e:	3401      	adds	r4, #1
				if (index == max_params) {
   18a50:	42bc      	cmp	r4, r7
   18a52:	d039      	beq.n	18ac8 <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   18a54:	4621      	mov	r1, r4
   18a56:	a801      	add	r0, sp, #4
   18a58:	f7ff ff54 	bl	18904 <at_parse_detect_type>
   18a5c:	1c42      	adds	r2, r0, #1
   18a5e:	d01e      	beq.n	18a9e <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   18a60:	4632      	mov	r2, r6
   18a62:	4621      	mov	r1, r4
   18a64:	a801      	add	r0, sp, #4
   18a66:	f7ff fe3f 	bl	186e8 <at_parse_process_element>
   18a6a:	1c43      	adds	r3, r0, #1
   18a6c:	d017      	beq.n	18a9e <at_parser_max_params_from_str+0xda>
			str++;
   18a6e:	9b01      	ldr	r3, [sp, #4]
   18a70:	3301      	adds	r3, #1
   18a72:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   18a74:	9a01      	ldr	r2, [sp, #4]
   18a76:	7810      	ldrb	r0, [r2, #0]
   18a78:	f015 fc1d 	bl	2e2b6 <is_lfcr>
   18a7c:	b1f8      	cbz	r0, 18abe <at_parser_max_params_from_str+0xfa>
   18a7e:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   18a80:	7811      	ldrb	r1, [r2, #0]
   18a82:	4693      	mov	fp, r2
   18a84:	4608      	mov	r0, r1
   18a86:	3201      	adds	r2, #1
   18a88:	f015 fc15 	bl	2e2b6 <is_lfcr>
   18a8c:	2800      	cmp	r0, #0
   18a8e:	d1f7      	bne.n	18a80 <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18a90:	b119      	cbz	r1, 18a9a <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   18a92:	292b      	cmp	r1, #43	; 0x2b
   18a94:	d001      	beq.n	18a9a <at_parser_max_params_from_str+0xd6>
   18a96:	2925      	cmp	r1, #37	; 0x25
   18a98:	d111      	bne.n	18abe <at_parser_max_params_from_str+0xfa>
				str += i;
   18a9a:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   18a9e:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   18aa0:	b9a5      	cbnz	r5, 18acc <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18aa2:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   18aa4:	2a00      	cmp	r2, #0
   18aa6:	bf0c      	ite	eq
   18aa8:	2000      	moveq	r0, #0
   18aaa:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   18aae:	f1b8 0f00 	cmp.w	r8, #0
   18ab2:	d001      	beq.n	18ab8 <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   18ab4:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   18ab8:	b003      	add	sp, #12
   18aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   18abe:	3401      	adds	r4, #1
			oversized = true;
   18ac0:	42bc      	cmp	r4, r7
   18ac2:	bf08      	it	eq
   18ac4:	2501      	moveq	r5, #1
   18ac6:	e79a      	b.n	189fe <at_parser_max_params_from_str+0x3a>
					oversized = true;
   18ac8:	4605      	mov	r5, r0
   18aca:	e7e8      	b.n	18a9e <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   18acc:	f06f 0006 	mvn.w	r0, #6
   18ad0:	e7ed      	b.n	18aae <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   18ad2:	f06f 0015 	mvn.w	r0, #21
   18ad6:	e7ef      	b.n	18ab8 <at_parser_max_params_from_str+0xf4>
   18ad8:	2002626a 	.word	0x2002626a
   18adc:	0002f5d9 	.word	0x0002f5d9
   18ae0:	00024001 	.word	0x00024001

00018ae4 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   18ae4:	b538      	push	{r3, r4, r5, lr}
   18ae6:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   18ae8:	4605      	mov	r5, r0
   18aea:	b960      	cbnz	r0, 18b06 <at_params_get+0x22>
   18aec:	490a      	ldr	r1, [pc, #40]	; (18b18 <at_params_get+0x34>)
   18aee:	232b      	movs	r3, #43	; 0x2b
   18af0:	4a0a      	ldr	r2, [pc, #40]	; (18b1c <at_params_get+0x38>)
   18af2:	480b      	ldr	r0, [pc, #44]	; (18b20 <at_params_get+0x3c>)
   18af4:	f013 fadf 	bl	2c0b6 <printk>
   18af8:	480a      	ldr	r0, [pc, #40]	; (18b24 <at_params_get+0x40>)
   18afa:	f013 fadc 	bl	2c0b6 <printk>
   18afe:	212b      	movs	r1, #43	; 0x2b
   18b00:	4806      	ldr	r0, [pc, #24]	; (18b1c <at_params_get+0x38>)
   18b02:	f013 fcf5 	bl	2c4f0 <assert_post_action>

	if (index >= list->param_count) {
   18b06:	682b      	ldr	r3, [r5, #0]
   18b08:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   18b0a:	bf85      	ittet	hi
   18b0c:	210c      	movhi	r1, #12
   18b0e:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   18b10:	2000      	movls	r0, #0
	return &param[index];
   18b12:	fb01 0004 	mlahi	r0, r1, r4, r0
}
   18b16:	bd38      	pop	{r3, r4, r5, pc}
   18b18:	00031c53 	.word	0x00031c53
   18b1c:	00031c25 	.word	0x00031c25
   18b20:	000300ff 	.word	0x000300ff
   18b24:	00031c67 	.word	0x00031c67

00018b28 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   18b28:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   18b2a:	4604      	mov	r4, r0
   18b2c:	b960      	cbnz	r0, 18b48 <at_param_size+0x20>
   18b2e:	490e      	ldr	r1, [pc, #56]	; (18b68 <at_param_size+0x40>)
   18b30:	2339      	movs	r3, #57	; 0x39
   18b32:	4a0e      	ldr	r2, [pc, #56]	; (18b6c <at_param_size+0x44>)
   18b34:	480e      	ldr	r0, [pc, #56]	; (18b70 <at_param_size+0x48>)
   18b36:	f013 fabe 	bl	2c0b6 <printk>
   18b3a:	480e      	ldr	r0, [pc, #56]	; (18b74 <at_param_size+0x4c>)
   18b3c:	f013 fabb 	bl	2c0b6 <printk>
   18b40:	2139      	movs	r1, #57	; 0x39
   18b42:	480a      	ldr	r0, [pc, #40]	; (18b6c <at_param_size+0x44>)
   18b44:	f013 fcd4 	bl	2c4f0 <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   18b48:	7823      	ldrb	r3, [r4, #0]
   18b4a:	2b01      	cmp	r3, #1
   18b4c:	d006      	beq.n	18b5c <at_param_size+0x34>
		return sizeof(uint16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   18b4e:	2b02      	cmp	r3, #2
   18b50:	d006      	beq.n	18b60 <at_param_size+0x38>
		return sizeof(uint32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   18b52:	3b03      	subs	r3, #3
   18b54:	2b01      	cmp	r3, #1
   18b56:	d805      	bhi.n	18b64 <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   18b58:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   18b5a:	bd10      	pop	{r4, pc}
		return sizeof(uint16_t);
   18b5c:	2002      	movs	r0, #2
   18b5e:	e7fc      	b.n	18b5a <at_param_size+0x32>
		return sizeof(uint32_t);
   18b60:	2004      	movs	r0, #4
   18b62:	e7fa      	b.n	18b5a <at_param_size+0x32>
	return 0;
   18b64:	2000      	movs	r0, #0
   18b66:	e7f8      	b.n	18b5a <at_param_size+0x32>
   18b68:	00031c88 	.word	0x00031c88
   18b6c:	00031c25 	.word	0x00031c25
   18b70:	000300ff 	.word	0x000300ff
   18b74:	00031c9d 	.word	0x00031c9d

00018b78 <at_param_clear>:
{
   18b78:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   18b7a:	4604      	mov	r4, r0
   18b7c:	b960      	cbnz	r0, 18b98 <at_param_clear+0x20>
   18b7e:	490b      	ldr	r1, [pc, #44]	; (18bac <at_param_clear+0x34>)
   18b80:	231d      	movs	r3, #29
   18b82:	4a0b      	ldr	r2, [pc, #44]	; (18bb0 <at_param_clear+0x38>)
   18b84:	480b      	ldr	r0, [pc, #44]	; (18bb4 <at_param_clear+0x3c>)
   18b86:	f013 fa96 	bl	2c0b6 <printk>
   18b8a:	480b      	ldr	r0, [pc, #44]	; (18bb8 <at_param_clear+0x40>)
   18b8c:	f013 fa93 	bl	2c0b6 <printk>
   18b90:	211d      	movs	r1, #29
   18b92:	4807      	ldr	r0, [pc, #28]	; (18bb0 <at_param_clear+0x38>)
   18b94:	f013 fcac 	bl	2c4f0 <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   18b98:	7823      	ldrb	r3, [r4, #0]
   18b9a:	3b03      	subs	r3, #3
   18b9c:	2b01      	cmp	r3, #1
   18b9e:	d802      	bhi.n	18ba6 <at_param_clear+0x2e>
		k_free(param->value.str_val);
   18ba0:	68a0      	ldr	r0, [r4, #8]
   18ba2:	f015 feec 	bl	2e97e <k_free>
	param->value.int_val = 0;
   18ba6:	2300      	movs	r3, #0
   18ba8:	60a3      	str	r3, [r4, #8]
}
   18baa:	bd10      	pop	{r4, pc}
   18bac:	00031c88 	.word	0x00031c88
   18bb0:	00031c25 	.word	0x00031c25
   18bb4:	000300ff 	.word	0x000300ff
   18bb8:	00031c9d 	.word	0x00031c9d

00018bbc <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   18bbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (list == NULL || list->params == NULL) {
   18bc0:	4604      	mov	r4, r0
   18bc2:	b158      	cbz	r0, 18bdc <at_params_list_clear+0x20>
   18bc4:	6843      	ldr	r3, [r0, #4]
   18bc6:	b14b      	cbz	r3, 18bdc <at_params_list_clear+0x20>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   18bc8:	2500      	movs	r5, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   18bca:	f8df b054 	ldr.w	fp, [pc, #84]	; 18c20 <at_params_list_clear+0x64>
   18bce:	f8df 9054 	ldr.w	r9, [pc, #84]	; 18c24 <at_params_list_clear+0x68>
   18bd2:	f8df a054 	ldr.w	sl, [pc, #84]	; 18c28 <at_params_list_clear+0x6c>
	for (size_t i = 0; i < list->param_count; ++i) {
   18bd6:	6823      	ldr	r3, [r4, #0]
   18bd8:	429d      	cmp	r5, r3
   18bda:	d301      	bcc.n	18be0 <at_params_list_clear+0x24>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   18bdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		at_param_clear(&params[i]);
   18be0:	270c      	movs	r7, #12
   18be2:	436f      	muls	r7, r5
   18be4:	f8d4 8004 	ldr.w	r8, [r4, #4]
   18be8:	eb08 0607 	add.w	r6, r8, r7
   18bec:	4630      	mov	r0, r6
   18bee:	f7ff ffc3 	bl	18b78 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   18bf2:	b966      	cbnz	r6, 18c0e <at_params_list_clear+0x52>
   18bf4:	4649      	mov	r1, r9
   18bf6:	2314      	movs	r3, #20
   18bf8:	465a      	mov	r2, fp
   18bfa:	4650      	mov	r0, sl
   18bfc:	f013 fa5b 	bl	2c0b6 <printk>
   18c00:	4806      	ldr	r0, [pc, #24]	; (18c1c <at_params_list_clear+0x60>)
   18c02:	f013 fa58 	bl	2c0b6 <printk>
   18c06:	2114      	movs	r1, #20
   18c08:	4658      	mov	r0, fp
   18c0a:	f013 fc71 	bl	2c4f0 <assert_post_action>
   18c0e:	2300      	movs	r3, #0
	for (size_t i = 0; i < list->param_count; ++i) {
   18c10:	3501      	adds	r5, #1
   18c12:	f848 3007 	str.w	r3, [r8, r7]
   18c16:	6073      	str	r3, [r6, #4]
   18c18:	60b3      	str	r3, [r6, #8]
   18c1a:	e7dc      	b.n	18bd6 <at_params_list_clear+0x1a>
   18c1c:	00031c9d 	.word	0x00031c9d
   18c20:	00031c25 	.word	0x00031c25
   18c24:	00031c88 	.word	0x00031c88
   18c28:	000300ff 	.word	0x000300ff

00018c2c <parse_psm_cfg>:
	char timer_str[9] = {0};
   18c2c:	2300      	movs	r3, #0
{
   18c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c30:	b089      	sub	sp, #36	; 0x24
	char timer_str[9] = {0};
   18c32:	e9cd 3305 	strd	r3, r3, [sp, #20]
   18c36:	f88d 301c 	strb.w	r3, [sp, #28]
	char unit_str[4] = {0};
   18c3a:	9303      	str	r3, [sp, #12]
	size_t timer_str_len = sizeof(timer_str) - 1;
   18c3c:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   18c3e:	2900      	cmp	r1, #0
	err = at_params_string_get(at_params,
   18c40:	bf14      	ite	ne
   18c42:	2108      	movne	r1, #8
   18c44:	2109      	moveq	r1, #9
	size_t timer_str_len = sizeof(timer_str) - 1;
   18c46:	9304      	str	r3, [sp, #16]
{
   18c48:	4615      	mov	r5, r2
	err = at_params_string_get(at_params,
   18c4a:	ab04      	add	r3, sp, #16
   18c4c:	aa05      	add	r2, sp, #20
{
   18c4e:	4606      	mov	r6, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   18c50:	bf14      	ite	ne
   18c52:	2707      	movne	r7, #7
   18c54:	2708      	moveq	r7, #8
	err = at_params_string_get(at_params,
   18c56:	f015 fc20 	bl	2e49a <at_params_string_get>
	if (err) {
   18c5a:	4601      	mov	r1, r0
   18c5c:	b170      	cbz	r0, 18c7c <parse_psm_cfg+0x50>
   18c5e:	4b34      	ldr	r3, [pc, #208]	; (18d30 <parse_psm_cfg+0x104>)
   18c60:	4a34      	ldr	r2, [pc, #208]	; (18d34 <parse_psm_cfg+0x108>)
		LOG_ERR("Could not get TAU, error: %d", err);
   18c62:	4835      	ldr	r0, [pc, #212]	; (18d38 <parse_psm_cfg+0x10c>)
   18c64:	1ad2      	subs	r2, r2, r3
   18c66:	08d2      	lsrs	r2, r2, #3
   18c68:	0192      	lsls	r2, r2, #6
   18c6a:	f042 0201 	orr.w	r2, r2, #1
   18c6e:	9101      	str	r1, [sp, #4]
   18c70:	f013 fc7d 	bl	2c56e <log_1>
		return err;
   18c74:	9901      	ldr	r1, [sp, #4]
}
   18c76:	4608      	mov	r0, r1
   18c78:	b009      	add	sp, #36	; 0x24
   18c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(unit_str, timer_str, unit_str_len);
   18c7c:	9b05      	ldr	r3, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   18c7e:	9001      	str	r0, [sp, #4]
	memcpy(unit_str, timer_str, unit_str_len);
   18c80:	f8ad 300c 	strh.w	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   18c84:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   18c86:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   18c88:	a803      	add	r0, sp, #12
	memcpy(unit_str, timer_str, unit_str_len);
   18c8a:	f88d 300e 	strb.w	r3, [sp, #14]
	lut_idx = strtoul(unit_str, NULL, 2);
   18c8e:	f00e f9f1 	bl	27074 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   18c92:	2807      	cmp	r0, #7
   18c94:	9901      	ldr	r1, [sp, #4]
   18c96:	d90c      	bls.n	18cb2 <parse_psm_cfg+0x86>
   18c98:	4926      	ldr	r1, [pc, #152]	; (18d34 <parse_psm_cfg+0x108>)
   18c9a:	4b25      	ldr	r3, [pc, #148]	; (18d30 <parse_psm_cfg+0x104>)
		LOG_ERR("Unable to parse periodic TAU string");
   18c9c:	4827      	ldr	r0, [pc, #156]	; (18d3c <parse_psm_cfg+0x110>)
   18c9e:	1ac9      	subs	r1, r1, r3
   18ca0:	08c9      	lsrs	r1, r1, #3
   18ca2:	0189      	lsls	r1, r1, #6
   18ca4:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Unable to parse active time string");
   18ca8:	f013 fc52 	bl	2c550 <log_0>
		return err;
   18cac:	f06f 0115 	mvn.w	r1, #21
   18cb0:	e7e1      	b.n	18c76 <parse_psm_cfg+0x4a>
	timer_unit = t3412_lookup[lut_idx];
   18cb2:	4b23      	ldr	r3, [pc, #140]	; (18d40 <parse_psm_cfg+0x114>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   18cb4:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   18cb6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   18cba:	f10d 0017 	add.w	r0, sp, #23
   18cbe:	f00e f9d9 	bl	27074 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   18cc2:	b30c      	cbz	r4, 18d08 <parse_psm_cfg+0xdc>
   18cc4:	4344      	muls	r4, r0
	err = at_params_string_get(at_params,
   18cc6:	4639      	mov	r1, r7
   18cc8:	4630      	mov	r0, r6
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   18cca:	602c      	str	r4, [r5, #0]
	err = at_params_string_get(at_params,
   18ccc:	ab04      	add	r3, sp, #16
   18cce:	aa05      	add	r2, sp, #20
   18cd0:	f015 fbe3 	bl	2e49a <at_params_string_get>
	if (err) {
   18cd4:	4601      	mov	r1, r0
   18cd6:	2800      	cmp	r0, #0
   18cd8:	d1c1      	bne.n	18c5e <parse_psm_cfg+0x32>
	memcpy(unit_str, timer_str, unit_str_len);
   18cda:	9b05      	ldr	r3, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   18cdc:	9001      	str	r0, [sp, #4]
	memcpy(unit_str, timer_str, unit_str_len);
   18cde:	f8ad 300c 	strh.w	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   18ce2:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   18ce4:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   18ce6:	a803      	add	r0, sp, #12
	memcpy(unit_str, timer_str, unit_str_len);
   18ce8:	f88d 300e 	strb.w	r3, [sp, #14]
	lut_idx = strtoul(unit_str, NULL, 2);
   18cec:	f00e f9c2 	bl	27074 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   18cf0:	2807      	cmp	r0, #7
   18cf2:	9901      	ldr	r1, [sp, #4]
   18cf4:	d90b      	bls.n	18d0e <parse_psm_cfg+0xe2>
   18cf6:	490f      	ldr	r1, [pc, #60]	; (18d34 <parse_psm_cfg+0x108>)
   18cf8:	4b0d      	ldr	r3, [pc, #52]	; (18d30 <parse_psm_cfg+0x104>)
		LOG_ERR("Unable to parse active time string");
   18cfa:	4812      	ldr	r0, [pc, #72]	; (18d44 <parse_psm_cfg+0x118>)
   18cfc:	1ac9      	subs	r1, r1, r3
   18cfe:	08c9      	lsrs	r1, r1, #3
   18d00:	0189      	lsls	r1, r1, #6
   18d02:	f041 0101 	orr.w	r1, r1, #1
   18d06:	e7cf      	b.n	18ca8 <parse_psm_cfg+0x7c>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   18d08:	f04f 34ff 	mov.w	r4, #4294967295
   18d0c:	e7db      	b.n	18cc6 <parse_psm_cfg+0x9a>
	timer_unit = t3324_lookup[lut_idx];
   18d0e:	4b0e      	ldr	r3, [pc, #56]	; (18d48 <parse_psm_cfg+0x11c>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   18d10:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   18d12:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   18d16:	f10d 0017 	add.w	r0, sp, #23
   18d1a:	9101      	str	r1, [sp, #4]
   18d1c:	f00e f9aa 	bl	27074 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   18d20:	9901      	ldr	r1, [sp, #4]
   18d22:	b114      	cbz	r4, 18d2a <parse_psm_cfg+0xfe>
   18d24:	4360      	muls	r0, r4
   18d26:	6068      	str	r0, [r5, #4]
	return 0;
   18d28:	e7a5      	b.n	18c76 <parse_psm_cfg+0x4a>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   18d2a:	f04f 30ff 	mov.w	r0, #4294967295
   18d2e:	e7fa      	b.n	18d26 <parse_psm_cfg+0xfa>
   18d30:	0002ec7c 	.word	0x0002ec7c
   18d34:	0002ecc4 	.word	0x0002ecc4
   18d38:	00031cb9 	.word	0x00031cb9
   18d3c:	00031cd6 	.word	0x00031cd6
   18d40:	0002f0cc 	.word	0x0002f0cc
   18d44:	00031cfa 	.word	0x00031cfa
   18d48:	0002f0ac 	.word	0x0002f0ac

00018d4c <lte_lc_offline>:
{
   18d4c:	b508      	push	{r3, lr}
	if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   18d4e:	2300      	movs	r3, #0
   18d50:	4804      	ldr	r0, [pc, #16]	; (18d64 <lte_lc_offline+0x18>)
   18d52:	461a      	mov	r2, r3
   18d54:	4619      	mov	r1, r3
   18d56:	f7ff f977 	bl	18048 <at_cmd_write>
   18d5a:	2800      	cmp	r0, #0
}
   18d5c:	bf18      	it	ne
   18d5e:	f06f 0004 	mvnne.w	r0, #4
   18d62:	bd08      	pop	{r3, pc}
   18d64:	000323f4 	.word	0x000323f4

00018d68 <lte_lc_normal>:
{
   18d68:	b508      	push	{r3, lr}
	if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   18d6a:	2300      	movs	r3, #0
   18d6c:	4804      	ldr	r0, [pc, #16]	; (18d80 <lte_lc_normal+0x18>)
   18d6e:	461a      	mov	r2, r3
   18d70:	4619      	mov	r1, r3
   18d72:	f7ff f969 	bl	18048 <at_cmd_write>
   18d76:	2800      	cmp	r0, #0
}
   18d78:	bf18      	it	ne
   18d7a:	f06f 0004 	mvnne.w	r0, #4
   18d7e:	bd08      	pop	{r3, pc}
   18d80:	000323ea 	.word	0x000323ea

00018d84 <lte_lc_system_mode_set>:

	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode)
{
   18d84:	b530      	push	{r4, r5, lr}
	int err, len;
	char cmd[50];

	switch (mode) {
   18d86:	4605      	mov	r5, r0
{
   18d88:	b08f      	sub	sp, #60	; 0x3c
	switch (mode) {
   18d8a:	2800      	cmp	r0, #0
   18d8c:	d040      	beq.n	18e10 <lte_lc_system_mode_set+0x8c>
   18d8e:	1e43      	subs	r3, r0, #1
   18d90:	2b04      	cmp	r3, #4
   18d92:	d90e      	bls.n	18db2 <lte_lc_system_mode_set+0x2e>
   18d94:	4b1f      	ldr	r3, [pc, #124]	; (18e14 <lte_lc_system_mode_set+0x90>)
   18d96:	4920      	ldr	r1, [pc, #128]	; (18e18 <lte_lc_system_mode_set+0x94>)
	case LTE_LC_SYSTEM_MODE_NBIOT:
	case LTE_LC_SYSTEM_MODE_NBIOT_GPS:
	case LTE_LC_SYSTEM_MODE_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested");
   18d98:	4820      	ldr	r0, [pc, #128]	; (18e1c <lte_lc_system_mode_set+0x98>)
   18d9a:	1ac9      	subs	r1, r1, r3
   18d9c:	08c9      	lsrs	r1, r1, #3
   18d9e:	0189      	lsls	r1, r1, #6
   18da0:	f041 0101 	orr.w	r1, r1, #1
   18da4:	f013 fbd4 	bl	2c550 <log_0>
		return -EINVAL;
   18da8:	f06f 0415 	mvn.w	r4, #21

	sys_mode_current = mode;
	sys_mode_target = mode;

	return err;
}
   18dac:	4620      	mov	r0, r4
   18dae:	b00f      	add	sp, #60	; 0x3c
   18db0:	bd30      	pop	{r4, r5, pc}
	len = snprintk(cmd, sizeof(cmd), "AT%%XSYSTEMMODE=%s",
   18db2:	4b1b      	ldr	r3, [pc, #108]	; (18e20 <lte_lc_system_mode_set+0x9c>)
   18db4:	2132      	movs	r1, #50	; 0x32
   18db6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   18dba:	4a1a      	ldr	r2, [pc, #104]	; (18e24 <lte_lc_system_mode_set+0xa0>)
   18dbc:	a801      	add	r0, sp, #4
   18dbe:	f013 f987 	bl	2c0d0 <snprintk>
	if (len < 0) {
   18dc2:	2800      	cmp	r0, #0
   18dc4:	da0c      	bge.n	18de0 <lte_lc_system_mode_set+0x5c>
   18dc6:	4b13      	ldr	r3, [pc, #76]	; (18e14 <lte_lc_system_mode_set+0x90>)
   18dc8:	4913      	ldr	r1, [pc, #76]	; (18e18 <lte_lc_system_mode_set+0x94>)
		LOG_ERR("Could not construct system mode command");
   18dca:	4817      	ldr	r0, [pc, #92]	; (18e28 <lte_lc_system_mode_set+0xa4>)
   18dcc:	1ac9      	subs	r1, r1, r3
   18dce:	08c9      	lsrs	r1, r1, #3
   18dd0:	0189      	lsls	r1, r1, #6
   18dd2:	f041 0101 	orr.w	r1, r1, #1
   18dd6:	f013 fbbb 	bl	2c550 <log_0>
		return -EFAULT;
   18dda:	f06f 040d 	mvn.w	r4, #13
   18dde:	e7e5      	b.n	18dac <lte_lc_system_mode_set+0x28>
	err = at_cmd_write(cmd, NULL, 0, NULL);
   18de0:	2300      	movs	r3, #0
   18de2:	a801      	add	r0, sp, #4
   18de4:	461a      	mov	r2, r3
   18de6:	4619      	mov	r1, r3
   18de8:	f7ff f92e 	bl	18048 <at_cmd_write>
	if (err) {
   18dec:	4604      	mov	r4, r0
   18dee:	b150      	cbz	r0, 18e06 <lte_lc_system_mode_set+0x82>
   18df0:	4a09      	ldr	r2, [pc, #36]	; (18e18 <lte_lc_system_mode_set+0x94>)
   18df2:	4b08      	ldr	r3, [pc, #32]	; (18e14 <lte_lc_system_mode_set+0x90>)
		LOG_ERR("Could not send AT command, error: %d", err);
   18df4:	4601      	mov	r1, r0
   18df6:	1ad2      	subs	r2, r2, r3
   18df8:	08d2      	lsrs	r2, r2, #3
   18dfa:	0192      	lsls	r2, r2, #6
   18dfc:	480b      	ldr	r0, [pc, #44]	; (18e2c <lte_lc_system_mode_set+0xa8>)
   18dfe:	f042 0201 	orr.w	r2, r2, #1
   18e02:	f013 fbb4 	bl	2c56e <log_1>
	sys_mode_current = mode;
   18e06:	4b0a      	ldr	r3, [pc, #40]	; (18e30 <lte_lc_system_mode_set+0xac>)
   18e08:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   18e0a:	4b0a      	ldr	r3, [pc, #40]	; (18e34 <lte_lc_system_mode_set+0xb0>)
   18e0c:	701d      	strb	r5, [r3, #0]
	return err;
   18e0e:	e7cd      	b.n	18dac <lte_lc_system_mode_set+0x28>
	switch (mode) {
   18e10:	4604      	mov	r4, r0
   18e12:	e7cb      	b.n	18dac <lte_lc_system_mode_set+0x28>
   18e14:	0002ec7c 	.word	0x0002ec7c
   18e18:	0002ecc4 	.word	0x0002ecc4
   18e1c:	000320b9 	.word	0x000320b9
   18e20:	0002f094 	.word	0x0002f094
   18e24:	000320d7 	.word	0x000320d7
   18e28:	000320ea 	.word	0x000320ea
   18e2c:	00032112 	.word	0x00032112
   18e30:	2002626d 	.word	0x2002626d
   18e34:	20020a5d 	.word	0x20020a5d

00018e38 <w_lte_lc_connect>:
{
   18e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!is_initialized) {
   18e3c:	4b23      	ldr	r3, [pc, #140]	; (18ecc <w_lte_lc_connect+0x94>)
   18e3e:	4c24      	ldr	r4, [pc, #144]	; (18ed0 <w_lte_lc_connect+0x98>)
   18e40:	4924      	ldr	r1, [pc, #144]	; (18ed4 <w_lte_lc_connect+0x9c>)
   18e42:	781b      	ldrb	r3, [r3, #0]
   18e44:	1a64      	subs	r4, r4, r1
{
   18e46:	4605      	mov	r5, r0
   18e48:	08e4      	lsrs	r4, r4, #3
	if (!is_initialized) {
   18e4a:	b94b      	cbnz	r3, 18e60 <w_lte_lc_connect+0x28>
		LOG_ERR("The LTE link controller is not initialized");
   18e4c:	01a1      	lsls	r1, r4, #6
   18e4e:	4822      	ldr	r0, [pc, #136]	; (18ed8 <w_lte_lc_connect+0xa0>)
   18e50:	f041 0101 	orr.w	r1, r1, #1
   18e54:	f013 fb7c 	bl	2c550 <log_0>
		return -EPERM;
   18e58:	f04f 30ff 	mov.w	r0, #4294967295
}
   18e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   18e60:	2201      	movs	r2, #1
   18e62:	2100      	movs	r1, #0
   18e64:	481d      	ldr	r0, [pc, #116]	; (18edc <w_lte_lc_connect+0xa4>)
   18e66:	f015 fc3a 	bl	2e6de <z_impl_k_sem_init>
		err = lte_lc_system_mode_set(sys_mode_target);
   18e6a:	4e1d      	ldr	r6, [pc, #116]	; (18ee0 <w_lte_lc_connect+0xa8>)
	return z_impl_k_sem_take(sem, timeout);
   18e6c:	4f1b      	ldr	r7, [pc, #108]	; (18edc <w_lte_lc_connect+0xa4>)
			LOG_INF("Network connection attempt timed out");
   18e6e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 18ee8 <w_lte_lc_connect+0xb0>
		err = lte_lc_system_mode_set(sys_mode_target);
   18e72:	7830      	ldrb	r0, [r6, #0]
   18e74:	f7ff ff86 	bl	18d84 <lte_lc_system_mode_set>
		if (err) {
   18e78:	2800      	cmp	r0, #0
   18e7a:	d1ef      	bne.n	18e5c <w_lte_lc_connect+0x24>
		err = lte_lc_normal();
   18e7c:	f7ff ff74 	bl	18d68 <lte_lc_normal>
		if (err || !blocking) {
   18e80:	2800      	cmp	r0, #0
   18e82:	d1eb      	bne.n	18e5c <w_lte_lc_connect+0x24>
   18e84:	2d00      	cmp	r5, #0
   18e86:	d0e9      	beq.n	18e5c <w_lte_lc_connect+0x24>
   18e88:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   18e8c:	2300      	movs	r3, #0
   18e8e:	4638      	mov	r0, r7
   18e90:	f00b fb9e 	bl	245d0 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   18e94:	f110 0f0b 	cmn.w	r0, #11
   18e98:	d1e0      	bne.n	18e5c <w_lte_lc_connect+0x24>
			LOG_INF("Network connection attempt timed out");
   18e9a:	ea4f 1984 	mov.w	r9, r4, lsl #6
   18e9e:	f049 0903 	orr.w	r9, r9, #3
   18ea2:	4649      	mov	r1, r9
   18ea4:	4640      	mov	r0, r8
   18ea6:	f013 fb53 	bl	2c550 <log_0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   18eaa:	7833      	ldrb	r3, [r6, #0]
   18eac:	2b01      	cmp	r3, #1
   18eae:	d10a      	bne.n	18ec6 <w_lte_lc_connect+0x8e>
				sys_mode_target = sys_mode_fallback;
   18eb0:	2302      	movs	r3, #2
   18eb2:	7033      	strb	r3, [r6, #0]
				err = lte_lc_offline();
   18eb4:	f7ff ff4a 	bl	18d4c <lte_lc_offline>
				if (err) {
   18eb8:	2800      	cmp	r0, #0
   18eba:	d1cf      	bne.n	18e5c <w_lte_lc_connect+0x24>
				LOG_INF("Using fallback network mode");
   18ebc:	4649      	mov	r1, r9
   18ebe:	4809      	ldr	r0, [pc, #36]	; (18ee4 <w_lte_lc_connect+0xac>)
   18ec0:	f013 fb46 	bl	2c550 <log_0>
	} while (retry);
   18ec4:	e7d5      	b.n	18e72 <w_lte_lc_connect+0x3a>
				err = -ETIMEDOUT;
   18ec6:	f06f 0073 	mvn.w	r0, #115	; 0x73
   18eca:	e7c7      	b.n	18e5c <w_lte_lc_connect+0x24>
   18ecc:	2002626b 	.word	0x2002626b
   18ed0:	0002ecc4 	.word	0x0002ecc4
   18ed4:	0002ec7c 	.word	0x0002ec7c
   18ed8:	00032137 	.word	0x00032137
   18edc:	20021744 	.word	0x20021744
   18ee0:	20020a5d 	.word	0x20020a5d
   18ee4:	00032187 	.word	0x00032187
   18ee8:	00032162 	.word	0x00032162

00018eec <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode)
{
   18eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, bitmask = 0;
	struct at_param_list resp_list = {0};
   18ef0:	2400      	movs	r4, #0
{
   18ef2:	b090      	sub	sp, #64	; 0x40
   18ef4:	4605      	mov	r5, r0
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   18ef6:	221a      	movs	r2, #26
   18ef8:	4621      	mov	r1, r4
   18efa:	a809      	add	r0, sp, #36	; 0x24
	struct at_param_list resp_list = {0};
   18efc:	e9cd 4402 	strd	r4, r4, [sp, #8]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   18f00:	9408      	str	r4, [sp, #32]
   18f02:	f00d f8bb 	bl	2607c <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   18f06:	230d      	movs	r3, #13
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   18f08:	e9cd 4404 	strd	r4, r4, [sp, #16]
   18f0c:	9406      	str	r4, [sp, #24]
   18f0e:	f88d 401c 	strb.w	r4, [sp, #28]
	size_t response_prefix_len = sizeof(response_prefix);
   18f12:	9300      	str	r3, [sp, #0]

	if (mode == NULL) {
   18f14:	2d00      	cmp	r5, #0
   18f16:	f000 80ad 	beq.w	19074 <lte_lc_system_mode_get+0x188>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   18f1a:	4623      	mov	r3, r4
   18f1c:	221e      	movs	r2, #30
   18f1e:	4857      	ldr	r0, [pc, #348]	; (1907c <lte_lc_system_mode_get+0x190>)
   18f20:	a908      	add	r1, sp, #32
   18f22:	f7ff f891 	bl	18048 <at_cmd_write>
			   NULL);
	if (err) {
   18f26:	4604      	mov	r4, r0
   18f28:	b168      	cbz	r0, 18f46 <lte_lc_system_mode_get+0x5a>
   18f2a:	4955      	ldr	r1, [pc, #340]	; (19080 <lte_lc_system_mode_get+0x194>)
   18f2c:	4b55      	ldr	r3, [pc, #340]	; (19084 <lte_lc_system_mode_get+0x198>)
		LOG_ERR("Could not send AT command");
   18f2e:	4856      	ldr	r0, [pc, #344]	; (19088 <lte_lc_system_mode_get+0x19c>)
   18f30:	1ac9      	subs	r1, r1, r3
   18f32:	08c9      	lsrs	r1, r1, #3
   18f34:	0189      	lsls	r1, r1, #6
   18f36:	f041 0101 	orr.w	r1, r1, #1
   18f3a:	f013 fb09 	bl	2c550 <log_0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   18f3e:	4620      	mov	r0, r4
   18f40:	b010      	add	sp, #64	; 0x40
   18f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   18f46:	2105      	movs	r1, #5
   18f48:	a802      	add	r0, sp, #8
   18f4a:	f015 f9ce 	bl	2e2ea <at_params_list_init>
	if (err) {
   18f4e:	4604      	mov	r4, r0
   18f50:	b158      	cbz	r0, 18f6a <lte_lc_system_mode_get+0x7e>
   18f52:	4b4c      	ldr	r3, [pc, #304]	; (19084 <lte_lc_system_mode_get+0x198>)
   18f54:	4a4a      	ldr	r2, [pc, #296]	; (19080 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Could init AT params list, error: %d", err);
   18f56:	4601      	mov	r1, r0
   18f58:	1ad2      	subs	r2, r2, r3
   18f5a:	08d2      	lsrs	r2, r2, #3
   18f5c:	0192      	lsls	r2, r2, #6
   18f5e:	484b      	ldr	r0, [pc, #300]	; (1908c <lte_lc_system_mode_get+0x1a0>)
   18f60:	f042 0201 	orr.w	r2, r2, #1
   18f64:	f013 fb03 	bl	2c56e <log_1>
		return err;
   18f68:	e7e9      	b.n	18f3e <lte_lc_system_mode_get+0x52>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   18f6a:	4601      	mov	r1, r0
   18f6c:	2305      	movs	r3, #5
   18f6e:	aa02      	add	r2, sp, #8
   18f70:	a808      	add	r0, sp, #32
   18f72:	f7ff fd27 	bl	189c4 <at_parser_max_params_from_str>
	if (err) {
   18f76:	4604      	mov	r4, r0
   18f78:	b158      	cbz	r0, 18f92 <lte_lc_system_mode_get+0xa6>
   18f7a:	4a41      	ldr	r2, [pc, #260]	; (19080 <lte_lc_system_mode_get+0x194>)
   18f7c:	4b41      	ldr	r3, [pc, #260]	; (19084 <lte_lc_system_mode_get+0x198>)
		LOG_ERR("Could not parse AT response, error: %d", err);
   18f7e:	4601      	mov	r1, r0
   18f80:	1ad2      	subs	r2, r2, r3
   18f82:	08d2      	lsrs	r2, r2, #3
   18f84:	0192      	lsls	r2, r2, #6
   18f86:	4842      	ldr	r0, [pc, #264]	; (19090 <lte_lc_system_mode_get+0x1a4>)
   18f88:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   18f8c:	f013 faef 	bl	2c56e <log_1>
			goto clean_exit;
   18f90:	e013      	b.n	18fba <lte_lc_system_mode_get+0xce>
	err = at_params_string_get(&resp_list,
   18f92:	4601      	mov	r1, r0
   18f94:	466b      	mov	r3, sp
   18f96:	aa04      	add	r2, sp, #16
   18f98:	a802      	add	r0, sp, #8
   18f9a:	f015 fa7e 	bl	2e49a <at_params_string_get>
	if (err) {
   18f9e:	4606      	mov	r6, r0
   18fa0:	b178      	cbz	r0, 18fc2 <lte_lc_system_mode_get+0xd6>
   18fa2:	4b38      	ldr	r3, [pc, #224]	; (19084 <lte_lc_system_mode_get+0x198>)
   18fa4:	4a36      	ldr	r2, [pc, #216]	; (19080 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   18fa6:	4601      	mov	r1, r0
   18fa8:	1ad2      	subs	r2, r2, r3
   18faa:	08d2      	lsrs	r2, r2, #3
   18fac:	0192      	lsls	r2, r2, #6
   18fae:	4839      	ldr	r0, [pc, #228]	; (19094 <lte_lc_system_mode_get+0x1a8>)
   18fb0:	f042 0201 	orr.w	r2, r2, #1
   18fb4:	f013 fadb 	bl	2c56e <log_1>
		goto clean_exit;
   18fb8:	4634      	mov	r4, r6
	at_params_list_free(&resp_list);
   18fba:	a802      	add	r0, sp, #8
   18fbc:	f015 f9a8 	bl	2e310 <at_params_list_free>
	return err;
   18fc0:	e7bd      	b.n	18f3e <lte_lc_system_mode_get+0x52>
	if (!response_is_valid(response_prefix, response_prefix_len,
   18fc2:	4a35      	ldr	r2, [pc, #212]	; (19098 <lte_lc_system_mode_get+0x1ac>)
   18fc4:	9900      	ldr	r1, [sp, #0]
   18fc6:	a804      	add	r0, sp, #16
   18fc8:	f015 faa5 	bl	2e516 <response_is_valid>
   18fcc:	b960      	cbnz	r0, 18fe8 <lte_lc_system_mode_get+0xfc>
   18fce:	4b2d      	ldr	r3, [pc, #180]	; (19084 <lte_lc_system_mode_get+0x198>)
   18fd0:	492b      	ldr	r1, [pc, #172]	; (19080 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Invalid XSYSTEMMODE response");
   18fd2:	4832      	ldr	r0, [pc, #200]	; (1909c <lte_lc_system_mode_get+0x1b0>)
   18fd4:	1ac9      	subs	r1, r1, r3
   18fd6:	08c9      	lsrs	r1, r1, #3
   18fd8:	0189      	lsls	r1, r1, #6
   18fda:	f041 0101 	orr.w	r1, r1, #1
   18fde:	f013 fab7 	bl	2c550 <log_0>
		err = -EIO;
   18fe2:	f06f 0404 	mvn.w	r4, #4
		goto clean_exit;
   18fe6:	e7e8      	b.n	18fba <lte_lc_system_mode_get+0xce>
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   18fe8:	2701      	movs	r7, #1
		bitmask = param ? bitmask | BIT(i) : bitmask;
   18fea:	46b8      	mov	r8, r7
		err = at_params_int_get(&resp_list, i, &param);
   18fec:	4639      	mov	r1, r7
   18fee:	aa01      	add	r2, sp, #4
   18ff0:	a802      	add	r0, sp, #8
   18ff2:	f015 fa3b 	bl	2e46c <at_params_int_get>
		if (err) {
   18ff6:	4604      	mov	r4, r0
   18ff8:	b148      	cbz	r0, 1900e <lte_lc_system_mode_get+0x122>
   18ffa:	4a21      	ldr	r2, [pc, #132]	; (19080 <lte_lc_system_mode_get+0x194>)
   18ffc:	4b21      	ldr	r3, [pc, #132]	; (19084 <lte_lc_system_mode_get+0x198>)
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   18ffe:	4601      	mov	r1, r0
   19000:	1ad2      	subs	r2, r2, r3
   19002:	08d2      	lsrs	r2, r2, #3
   19004:	0192      	lsls	r2, r2, #6
   19006:	4826      	ldr	r0, [pc, #152]	; (190a0 <lte_lc_system_mode_get+0x1b4>)
   19008:	f042 0201 	orr.w	r2, r2, #1
   1900c:	e7be      	b.n	18f8c <lte_lc_system_mode_get+0xa0>
		bitmask = param ? bitmask | BIT(i) : bitmask;
   1900e:	9b01      	ldr	r3, [sp, #4]
   19010:	b113      	cbz	r3, 19018 <lte_lc_system_mode_get+0x12c>
   19012:	fa08 f307 	lsl.w	r3, r8, r7
   19016:	431e      	orrs	r6, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   19018:	3701      	adds	r7, #1
   1901a:	2f05      	cmp	r7, #5
   1901c:	d1e6      	bne.n	18fec <lte_lc_system_mode_get+0x100>
	switch (bitmask) {
   1901e:	2e0c      	cmp	r6, #12
   19020:	d81b      	bhi.n	1905a <lte_lc_system_mode_get+0x16e>
   19022:	e8df f006 	tbb	[pc, r6]
   19026:	1a07      	.short	0x1a07
   19028:	1a121a10 	.word	0x1a121a10
   1902c:	1a141a1a 	.word	0x1a141a1a
   19030:	1a16      	.short	0x1a16
   19032:	18          	.byte	0x18
   19033:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   19034:	2300      	movs	r3, #0
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   19036:	702b      	strb	r3, [r5, #0]
	if (sys_mode_current != *mode) {
   19038:	4b1a      	ldr	r3, [pc, #104]	; (190a4 <lte_lc_system_mode_get+0x1b8>)
   1903a:	782a      	ldrb	r2, [r5, #0]
   1903c:	7819      	ldrb	r1, [r3, #0]
   1903e:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   19040:	bf18      	it	ne
   19042:	701a      	strbne	r2, [r3, #0]
   19044:	e7b9      	b.n	18fba <lte_lc_system_mode_get+0xce>
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   19046:	2301      	movs	r3, #1
   19048:	e7f5      	b.n	19036 <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   1904a:	2302      	movs	r3, #2
   1904c:	e7f3      	b.n	19036 <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   1904e:	2303      	movs	r3, #3
   19050:	e7f1      	b.n	19036 <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   19052:	2304      	movs	r3, #4
   19054:	e7ef      	b.n	19036 <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   19056:	2305      	movs	r3, #5
   19058:	e7ed      	b.n	19036 <lte_lc_system_mode_get+0x14a>
   1905a:	4b0a      	ldr	r3, [pc, #40]	; (19084 <lte_lc_system_mode_get+0x198>)
   1905c:	4908      	ldr	r1, [pc, #32]	; (19080 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Invalid system mode, assuming parsing error");
   1905e:	4812      	ldr	r0, [pc, #72]	; (190a8 <lte_lc_system_mode_get+0x1bc>)
   19060:	1ac9      	subs	r1, r1, r3
   19062:	08c9      	lsrs	r1, r1, #3
   19064:	0189      	lsls	r1, r1, #6
   19066:	f041 0101 	orr.w	r1, r1, #1
   1906a:	f013 fa71 	bl	2c550 <log_0>
		err = -EFAULT;
   1906e:	f06f 040d 	mvn.w	r4, #13
		goto clean_exit;
   19072:	e7a2      	b.n	18fba <lte_lc_system_mode_get+0xce>
		return -EINVAL;
   19074:	f06f 0415 	mvn.w	r4, #21
   19078:	e761      	b.n	18f3e <lte_lc_system_mode_get+0x52>
   1907a:	bf00      	nop
   1907c:	000321a3 	.word	0x000321a3
   19080:	0002ecc4 	.word	0x0002ecc4
   19084:	0002ec7c 	.word	0x0002ec7c
   19088:	000321b3 	.word	0x000321b3
   1908c:	000321cd 	.word	0x000321cd
   19090:	000321f2 	.word	0x000321f2
   19094:	00032034 	.word	0x00032034
   19098:	00032219 	.word	0x00032219
   1909c:	00032226 	.word	0x00032226
   190a0:	00032243 	.word	0x00032243
   190a4:	2002626d 	.word	0x2002626d
   190a8:	0003226b 	.word	0x0003226b

000190ac <w_lte_lc_init>:
{
   190ac:	b570      	push	{r4, r5, r6, lr}
	if (is_initialized) {
   190ae:	4e3a      	ldr	r6, [pc, #232]	; (19198 <w_lte_lc_init+0xec>)
{
   190b0:	b08e      	sub	sp, #56	; 0x38
	if (is_initialized) {
   190b2:	7833      	ldrb	r3, [r6, #0]
   190b4:	2b00      	cmp	r3, #0
   190b6:	d168      	bne.n	1918a <w_lte_lc_init+0xde>
	err = lte_lc_system_mode_get(&sys_mode_current);
   190b8:	4d38      	ldr	r5, [pc, #224]	; (1919c <w_lte_lc_init+0xf0>)
   190ba:	4628      	mov	r0, r5
   190bc:	f7ff ff16 	bl	18eec <lte_lc_system_mode_get>
	if (err) {
   190c0:	4604      	mov	r4, r0
   190c2:	b168      	cbz	r0, 190e0 <w_lte_lc_init+0x34>
   190c4:	4a36      	ldr	r2, [pc, #216]	; (191a0 <w_lte_lc_init+0xf4>)
   190c6:	4b37      	ldr	r3, [pc, #220]	; (191a4 <w_lte_lc_init+0xf8>)
		LOG_ERR("Could not get current system mode, error: %d", err);
   190c8:	4601      	mov	r1, r0
   190ca:	1ad2      	subs	r2, r2, r3
   190cc:	08d2      	lsrs	r2, r2, #3
   190ce:	0192      	lsls	r2, r2, #6
   190d0:	4835      	ldr	r0, [pc, #212]	; (191a8 <w_lte_lc_init+0xfc>)
   190d2:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Can't register AT handler, error: %d", err);
   190d6:	f013 fa4a 	bl	2c56e <log_1>
}
   190da:	4620      	mov	r0, r4
   190dc:	b00e      	add	sp, #56	; 0x38
   190de:	bd70      	pop	{r4, r5, r6, pc}
	err = at_notif_register_handler(NULL, at_handler);
   190e0:	4932      	ldr	r1, [pc, #200]	; (191ac <w_lte_lc_init+0x100>)
   190e2:	f7ff f8dd 	bl	182a0 <at_notif_register_handler>
	if (err) {
   190e6:	4604      	mov	r4, r0
   190e8:	b148      	cbz	r0, 190fe <w_lte_lc_init+0x52>
   190ea:	4a2d      	ldr	r2, [pc, #180]	; (191a0 <w_lte_lc_init+0xf4>)
   190ec:	4b2d      	ldr	r3, [pc, #180]	; (191a4 <w_lte_lc_init+0xf8>)
		LOG_ERR("Can't register AT handler, error: %d", err);
   190ee:	4601      	mov	r1, r0
   190f0:	1ad2      	subs	r2, r2, r3
   190f2:	08d2      	lsrs	r2, r2, #3
   190f4:	0192      	lsls	r2, r2, #6
   190f6:	482e      	ldr	r0, [pc, #184]	; (191b0 <w_lte_lc_init+0x104>)
   190f8:	f042 0201 	orr.w	r2, r2, #1
   190fc:	e7eb      	b.n	190d6 <w_lte_lc_init+0x2a>
	if (sys_mode_current != sys_mode_target) {
   190fe:	4b2d      	ldr	r3, [pc, #180]	; (191b4 <w_lte_lc_init+0x108>)
   19100:	7818      	ldrb	r0, [r3, #0]
   19102:	782b      	ldrb	r3, [r5, #0]
   19104:	4283      	cmp	r3, r0
   19106:	d00d      	beq.n	19124 <w_lte_lc_init+0x78>
		err = lte_lc_system_mode_set(sys_mode_target);
   19108:	f7ff fe3c 	bl	18d84 <lte_lc_system_mode_set>
		if (err) {
   1910c:	4604      	mov	r4, r0
   1910e:	b148      	cbz	r0, 19124 <w_lte_lc_init+0x78>
   19110:	4a23      	ldr	r2, [pc, #140]	; (191a0 <w_lte_lc_init+0xf4>)
   19112:	4b24      	ldr	r3, [pc, #144]	; (191a4 <w_lte_lc_init+0xf8>)
			LOG_ERR("Could not set system mode, error: %d", err);
   19114:	4601      	mov	r1, r0
   19116:	1ad2      	subs	r2, r2, r3
   19118:	08d2      	lsrs	r2, r2, #3
   1911a:	0192      	lsls	r2, r2, #6
   1911c:	4826      	ldr	r0, [pc, #152]	; (191b8 <w_lte_lc_init+0x10c>)
   1911e:	f042 0201 	orr.w	r2, r2, #1
   19122:	e7d8      	b.n	190d6 <w_lte_lc_init+0x2a>
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   19124:	2300      	movs	r3, #0
   19126:	4825      	ldr	r0, [pc, #148]	; (191bc <w_lte_lc_init+0x110>)
   19128:	461a      	mov	r2, r3
   1912a:	4619      	mov	r1, r3
   1912c:	f7fe ff8c 	bl	18048 <at_cmd_write>
   19130:	4604      	mov	r4, r0
   19132:	bb68      	cbnz	r0, 19190 <w_lte_lc_init+0xe4>
	err = at_cmd_write(cscon, NULL, 0, NULL);
   19134:	4602      	mov	r2, r0
   19136:	4603      	mov	r3, r0
   19138:	4601      	mov	r1, r0
   1913a:	4821      	ldr	r0, [pc, #132]	; (191c0 <w_lte_lc_init+0x114>)
   1913c:	f7fe ff84 	bl	18048 <at_cmd_write>
	if (err) {
   19140:	4602      	mov	r2, r0
   19142:	b1f8      	cbz	r0, 19184 <w_lte_lc_init+0xd8>
   19144:	4b17      	ldr	r3, [pc, #92]	; (191a4 <w_lte_lc_init+0xf8>)
   19146:	4d16      	ldr	r5, [pc, #88]	; (191a0 <w_lte_lc_init+0xf4>)
		LOG_WRN("%s failed (%d), RRC notifications are not enabled",
   19148:	491d      	ldr	r1, [pc, #116]	; (191c0 <w_lte_lc_init+0x114>)
   1914a:	1aed      	subs	r5, r5, r3
   1914c:	08ed      	lsrs	r5, r5, #3
   1914e:	01ad      	lsls	r5, r5, #6
   19150:	f045 0502 	orr.w	r5, r5, #2
   19154:	462b      	mov	r3, r5
   19156:	481b      	ldr	r0, [pc, #108]	; (191c4 <w_lte_lc_init+0x118>)
   19158:	f013 fa20 	bl	2c59c <log_2>
		LOG_WRN("%s is supported in nRF9160 modem >= v1.1.0", cscon);
   1915c:	462a      	mov	r2, r5
   1915e:	4918      	ldr	r1, [pc, #96]	; (191c0 <w_lte_lc_init+0x114>)
   19160:	4819      	ldr	r0, [pc, #100]	; (191c8 <w_lte_lc_init+0x11c>)
   19162:	f013 fa04 	bl	2c56e <log_1>
		err = at_cmd_write("AT+CGMR", buf, sizeof(buf), NULL);
   19166:	4623      	mov	r3, r4
   19168:	2232      	movs	r2, #50	; 0x32
   1916a:	4818      	ldr	r0, [pc, #96]	; (191cc <w_lte_lc_init+0x120>)
   1916c:	a901      	add	r1, sp, #4
   1916e:	f7fe ff6b 	bl	18048 <at_cmd_write>
		if (err == 0) {
   19172:	b938      	cbnz	r0, 19184 <w_lte_lc_init+0xd8>
			LOG_WRN("Current modem firmware version: %s",
   19174:	a801      	add	r0, sp, #4
   19176:	f7f9 ff4d 	bl	13014 <log_strdup>
   1917a:	462a      	mov	r2, r5
   1917c:	4601      	mov	r1, r0
   1917e:	4814      	ldr	r0, [pc, #80]	; (191d0 <w_lte_lc_init+0x124>)
   19180:	f013 f9f5 	bl	2c56e <log_1>
	is_initialized = true;
   19184:	2301      	movs	r3, #1
   19186:	7033      	strb	r3, [r6, #0]
	return 0;
   19188:	e7a7      	b.n	190da <w_lte_lc_init+0x2e>
		return -EALREADY;
   1918a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1918e:	e7a4      	b.n	190da <w_lte_lc_init+0x2e>
		return -EIO;
   19190:	f06f 0404 	mvn.w	r4, #4
   19194:	e7a1      	b.n	190da <w_lte_lc_init+0x2e>
   19196:	bf00      	nop
   19198:	2002626b 	.word	0x2002626b
   1919c:	2002626d 	.word	0x2002626d
   191a0:	0002ecc4 	.word	0x0002ecc4
   191a4:	0002ec7c 	.word	0x0002ec7c
   191a8:	00032297 	.word	0x00032297
   191ac:	0000d439 	.word	0x0000d439
   191b0:	000322c4 	.word	0x000322c4
   191b4:	20020a5d 	.word	0x20020a5d
   191b8:	000322e9 	.word	0x000322e9
   191bc:	000323d4 	.word	0x000323d4
   191c0:	000323df 	.word	0x000323df
   191c4:	0003230e 	.word	0x0003230e
   191c8:	00032340 	.word	0x00032340
   191cc:	0003236b 	.word	0x0003236b
   191d0:	00032373 	.word	0x00032373

000191d4 <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   191d4:	b510      	push	{r4, lr}
   191d6:	4604      	mov	r4, r0
			    const char *buf)
{
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   191d8:	4a09      	ldr	r2, [pc, #36]	; (19200 <modem_info_parse.isra.0+0x2c>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   191da:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   191dc:	7823      	ldrb	r3, [r4, #0]
   191de:	2100      	movs	r1, #0
   191e0:	f7ff fbf0 	bl	189c4 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   191e4:	f110 0f0b 	cmn.w	r0, #11
   191e8:	d000      	beq.n	191ec <modem_info_parse.isra.0+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   191ea:	b940      	cbnz	r0, 191fe <modem_info_parse.isra.0+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   191ec:	4804      	ldr	r0, [pc, #16]	; (19200 <modem_info_parse.isra.0+0x2c>)
   191ee:	f015 f97b 	bl	2e4e8 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   191f2:	7823      	ldrb	r3, [r4, #0]
		return -EAGAIN;
   191f4:	4298      	cmp	r0, r3
   191f6:	bf94      	ite	ls
   191f8:	2000      	movls	r0, #0
   191fa:	f06f 000a 	mvnhi.w	r0, #10
	}

	return err;
}
   191fe:	bd10      	pop	{r4, pc}
   19200:	2002176c 	.word	0x2002176c

00019204 <modem_info_string_get>:
	return sizeof(uint16_t);
}

int modem_info_string_get(enum modem_info info, char *buf,
				  const size_t buf_size)
{
   19204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int err;
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   19208:	2500      	movs	r5, #0
{
   1920a:	460e      	mov	r6, r1
   1920c:	b0a5      	sub	sp, #148	; 0x94
   1920e:	4680      	mov	r8, r0
   19210:	4691      	mov	r9, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   19212:	4629      	mov	r1, r5
   19214:	227c      	movs	r2, #124	; 0x7c
   19216:	a805      	add	r0, sp, #20
   19218:	9504      	str	r5, [sp, #16]
   1921a:	f00c ff2f 	bl	2607c <memset>
	/* length of each parsed IP address line */
	size_t ip_str_len = 0;
	/* tracks length of buf when parsing multiple IP addresses */
	size_t out_buf_len = 0;
	/* return value indicating length of the string written to buf */
	size_t len = 0;
   1921e:	9503      	str	r5, [sp, #12]

	if ((buf == NULL) || (buf_size == 0)) {
   19220:	2e00      	cmp	r6, #0
   19222:	f000 80e4 	beq.w	193ee <modem_info_string_get+0x1ea>
   19226:	f1b9 0f00 	cmp.w	r9, #0
   1922a:	f000 80e0 	beq.w	193ee <modem_info_string_get+0x1ea>
		return -EINVAL;
	}

	err = at_cmd_write(modem_data[info]->cmd,
   1922e:	4b74      	ldr	r3, [pc, #464]	; (19400 <modem_info_string_get+0x1fc>)
   19230:	2280      	movs	r2, #128	; 0x80
   19232:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
   19236:	a904      	add	r1, sp, #16
   19238:	462b      	mov	r3, r5
   1923a:	f8da 0000 	ldr.w	r0, [sl]
   1923e:	f7fe ff03 	bl	18048 <at_cmd_write>
			  NULL);

	/* modem_info does not yet support array objects, so here we handle
	 * the supported bands independently as a string
	 */
	if (info == MODEM_INFO_SUP_BAND) {
   19242:	f1b8 0f02 	cmp.w	r8, #2
	err = at_cmd_write(modem_data[info]->cmd,
   19246:	4604      	mov	r4, r0
	if (info == MODEM_INFO_SUP_BAND) {
   19248:	d10c      	bne.n	19264 <modem_info_string_get+0x60>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1924a:	f10d 0119 	add.w	r1, sp, #25
   1924e:	4630      	mov	r0, r6
   19250:	f00d fac6 	bl	267e0 <strcpy>
		strcpy(buf, recv_buf + sizeof("%XCBAND: ") - 1);
		return strlen(buf);
   19254:	4630      	mov	r0, r6
   19256:	f00d fb21 	bl	2689c <strlen>
   1925a:	4601      	mov	r1, r0
			len = out_buf_len;
		}
	}

	return len <= 0 ? -ENOTSUP : len;
}
   1925c:	4608      	mov	r0, r1
   1925e:	b025      	add	sp, #148	; 0x94
   19260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (info == MODEM_INFO_IP_ADDRESS) {
   19264:	f1b8 0f09 	cmp.w	r8, #9
   19268:	d038      	beq.n	192dc <modem_info_string_get+0xd8>
	if (err != 0) {
   1926a:	2c00      	cmp	r4, #0
   1926c:	f040 80c2 	bne.w	193f4 <modem_info_string_get+0x1f0>
	size_t ip_str_len = 0;
   19270:	4627      	mov	r7, r4
		err = at_params_string_get(&m_param_list,
   19272:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 19424 <modem_info_string_get+0x220>
	size_t cmd_rsp_idx = 0;
   19276:	9400      	str	r4, [sp, #0]
	if (info == MODEM_INFO_IP_ADDRESS) {
   19278:	9a00      	ldr	r2, [sp, #0]
   1927a:	ab04      	add	r3, sp, #16
   1927c:	f1b8 0f09 	cmp.w	r8, #9
   19280:	4413      	add	r3, r2
   19282:	d10f      	bne.n	192a4 <modem_info_string_get+0xa0>
		ip_str_end = strstr(&recv_buf[cmd_rsp_idx], AT_CMD_RSP_DELIM);
   19284:	4618      	mov	r0, r3
   19286:	495f      	ldr	r1, [pc, #380]	; (19404 <modem_info_string_get+0x200>)
   19288:	9301      	str	r3, [sp, #4]
   1928a:	f00d fd01 	bl	26c90 <strstr>
		if (ip_str_end == NULL) {
   1928e:	2800      	cmp	r0, #0
   19290:	f000 80b3 	beq.w	193fa <modem_info_string_get+0x1f6>
		recv_buf[++ip_str_len] = 0;
   19294:	2100      	movs	r1, #0
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   19296:	9b01      	ldr	r3, [sp, #4]
		recv_buf[++ip_str_len] = 0;
   19298:	aa24      	add	r2, sp, #144	; 0x90
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   1929a:	1ac0      	subs	r0, r0, r3
		recv_buf[++ip_str_len] = 0;
   1929c:	1c47      	adds	r7, r0, #1
   1929e:	443a      	add	r2, r7
   192a0:	f802 1c80 	strb.w	r1, [r2, #-128]
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_rsp_idx]);
   192a4:	4619      	mov	r1, r3
   192a6:	f10a 0009 	add.w	r0, sl, #9
   192aa:	f7ff ff93 	bl	191d4 <modem_info_parse.isra.0>
	if (err) {
   192ae:	4601      	mov	r1, r0
   192b0:	b1b8      	cbz	r0, 192e2 <modem_info_string_get+0xde>
   192b2:	4a55      	ldr	r2, [pc, #340]	; (19408 <modem_info_string_get+0x204>)
   192b4:	4b55      	ldr	r3, [pc, #340]	; (1940c <modem_info_string_get+0x208>)
		LOG_ERR("Unable to parse data: %d", err);
   192b6:	9000      	str	r0, [sp, #0]
   192b8:	1ad2      	subs	r2, r2, r3
   192ba:	08d2      	lsrs	r2, r2, #3
   192bc:	0192      	lsls	r2, r2, #6
   192be:	4854      	ldr	r0, [pc, #336]	; (19410 <modem_info_string_get+0x20c>)
   192c0:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Unable to obtain short: %d", err);
   192c4:	f013 f953 	bl	2c56e <log_1>
			return err;
   192c8:	9900      	ldr	r1, [sp, #0]
   192ca:	e7c7      	b.n	1925c <modem_info_string_get+0x58>
			++ip_str_end;
   192cc:	3001      	adds	r0, #1
			++ip_cnt;
   192ce:	3501      	adds	r5, #1
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   192d0:	4639      	mov	r1, r7
   192d2:	f00d fcdd 	bl	26c90 <strstr>
   192d6:	2800      	cmp	r0, #0
   192d8:	d1f8      	bne.n	192cc <modem_info_string_get+0xc8>
   192da:	e7c6      	b.n	1926a <modem_info_string_get+0x66>
   192dc:	4f49      	ldr	r7, [pc, #292]	; (19404 <modem_info_string_get+0x200>)
	char *ip_str_end = recv_buf;
   192de:	a804      	add	r0, sp, #16
   192e0:	e7f6      	b.n	192d0 <modem_info_string_get+0xcc>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   192e2:	f89a 300a 	ldrb.w	r3, [sl, #10]
   192e6:	2b01      	cmp	r3, #1
   192e8:	d11e      	bne.n	19328 <modem_info_string_get+0x124>
		err = at_params_short_get(&m_param_list,
   192ea:	f89a 1008 	ldrb.w	r1, [sl, #8]
   192ee:	4658      	mov	r0, fp
   192f0:	f10d 020a 	add.w	r2, sp, #10
   192f4:	f015 f8a4 	bl	2e440 <at_params_short_get>
		if (err) {
   192f8:	4601      	mov	r1, r0
   192fa:	b148      	cbz	r0, 19310 <modem_info_string_get+0x10c>
   192fc:	4a42      	ldr	r2, [pc, #264]	; (19408 <modem_info_string_get+0x204>)
   192fe:	4b43      	ldr	r3, [pc, #268]	; (1940c <modem_info_string_get+0x208>)
			LOG_ERR("Unable to obtain short: %d", err);
   19300:	9000      	str	r0, [sp, #0]
   19302:	1ad2      	subs	r2, r2, r3
   19304:	08d2      	lsrs	r2, r2, #3
   19306:	0192      	lsls	r2, r2, #6
   19308:	4842      	ldr	r0, [pc, #264]	; (19414 <modem_info_string_get+0x210>)
   1930a:	f042 0201 	orr.w	r2, r2, #1
   1930e:	e7d9      	b.n	192c4 <modem_info_string_get+0xc0>
		err = snprintf(buf, buf_size, "%d", param_value);
   19310:	4649      	mov	r1, r9
   19312:	4630      	mov	r0, r6
   19314:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   19318:	4a3f      	ldr	r2, [pc, #252]	; (19418 <modem_info_string_get+0x214>)
   1931a:	f00d f91f 	bl	2655c <snprintf>
		if ((err <= 0) || (err > buf_size)) {
   1931e:	4548      	cmp	r0, r9
   19320:	d915      	bls.n	1934e <modem_info_string_get+0x14a>
			return -EMSGSIZE;
   19322:	f06f 0179 	mvn.w	r1, #121	; 0x79
   19326:	e799      	b.n	1925c <modem_info_string_get+0x58>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   19328:	2b03      	cmp	r3, #3
   1932a:	d110      	bne.n	1934e <modem_info_string_get+0x14a>
		len = buf_size - out_buf_len;
   1932c:	eba9 0304 	sub.w	r3, r9, r4
		err = at_params_string_get(&m_param_list,
   19330:	f89a 1008 	ldrb.w	r1, [sl, #8]
		len = buf_size - out_buf_len;
   19334:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list,
   19336:	4658      	mov	r0, fp
   19338:	ab03      	add	r3, sp, #12
   1933a:	1932      	adds	r2, r6, r4
   1933c:	f015 f8ad 	bl	2e49a <at_params_string_get>
		if (err != 0) {
   19340:	4601      	mov	r1, r0
   19342:	2800      	cmp	r0, #0
   19344:	d18a      	bne.n	1925c <modem_info_string_get+0x58>
		} else if (len >= buf_size) {
   19346:	9b03      	ldr	r3, [sp, #12]
   19348:	454b      	cmp	r3, r9
   1934a:	d2ea      	bcs.n	19322 <modem_info_string_get+0x11e>
		buf[len] = 0;
   1934c:	54f0      	strb	r0, [r6, r3]
	if (info == MODEM_INFO_ICCID) {
   1934e:	f1b8 0f0e 	cmp.w	r8, #14
   19352:	d121      	bne.n	19398 <modem_info_string_get+0x194>
   19354:	4634      	mov	r4, r6
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   19356:	4630      	mov	r0, r6
   19358:	f00d faa0 	bl	2689c <strlen>
   1935c:	1ca3      	adds	r3, r4, #2
   1935e:	1ba4      	subs	r4, r4, r6
   19360:	42a0      	cmp	r0, r4
   19362:	d80f      	bhi.n	19384 <modem_info_string_get+0x180>
		if ((len == ICCID_LEN) &&
   19364:	9b03      	ldr	r3, [sp, #12]
   19366:	2b14      	cmp	r3, #20
   19368:	d106      	bne.n	19378 <modem_info_string_get+0x174>
   1936a:	7cf3      	ldrb	r3, [r6, #19]
   1936c:	2b46      	cmp	r3, #70	; 0x46
   1936e:	d103      	bne.n	19378 <modem_info_string_get+0x174>
			buf[len - 1] = '\0';
   19370:	2300      	movs	r3, #0
   19372:	74f3      	strb	r3, [r6, #19]
			--len;
   19374:	2313      	movs	r3, #19
   19376:	9303      	str	r3, [sp, #12]
	return len <= 0 ? -ENOTSUP : len;
   19378:	9903      	ldr	r1, [sp, #12]
   1937a:	2900      	cmp	r1, #0
   1937c:	bf08      	it	eq
   1937e:	f06f 0185 	mvneq.w	r1, #133	; 0x85
   19382:	e76b      	b.n	1925c <modem_info_string_get+0x58>
		current_char = buf[i];
   19384:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   19388:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   1938c:	461c      	mov	r4, r3
		buf[i] = next_char;
   1938e:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   19392:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   19396:	e7de      	b.n	19356 <modem_info_string_get+0x152>
	if ((info == MODEM_INFO_IP_ADDRESS) && (ip_cnt > 0)) {
   19398:	f1b8 0f09 	cmp.w	r8, #9
   1939c:	d1ec      	bne.n	19378 <modem_info_string_get+0x174>
   1939e:	2d00      	cmp	r5, #0
   193a0:	ddea      	ble.n	19378 <modem_info_string_get+0x174>
		char *ip_v6_str = strstr(&buf[out_buf_len], " ");
   193a2:	1933      	adds	r3, r6, r4
   193a4:	4618      	mov	r0, r3
   193a6:	491d      	ldr	r1, [pc, #116]	; (1941c <modem_info_string_get+0x218>)
   193a8:	9301      	str	r3, [sp, #4]
   193aa:	f00d fc71 	bl	26c90 <strstr>
		if (ip_v6_str) {
   193ae:	b130      	cbz	r0, 193be <modem_info_string_get+0x1ba>
			*ip_v6_str = 0;
   193b0:	2200      	movs	r2, #0
			len = strlen(&buf[out_buf_len]);
   193b2:	9b01      	ldr	r3, [sp, #4]
			*ip_v6_str = 0;
   193b4:	7002      	strb	r2, [r0, #0]
			len = strlen(&buf[out_buf_len]);
   193b6:	4618      	mov	r0, r3
   193b8:	f00d fa70 	bl	2689c <strlen>
   193bc:	9003      	str	r0, [sp, #12]
		out_buf_len += len;
   193be:	9b03      	ldr	r3, [sp, #12]
		if (ip_cnt > 1) {
   193c0:	2d01      	cmp	r5, #1
		out_buf_len += len;
   193c2:	441c      	add	r4, r3
		if (ip_cnt > 1) {
   193c4:	d00e      	beq.n	193e4 <modem_info_string_get+0x1e0>
			err = snprintf(&buf[out_buf_len],
   193c6:	eba9 0104 	sub.w	r1, r9, r4
   193ca:	4a15      	ldr	r2, [pc, #84]	; (19420 <modem_info_string_get+0x21c>)
   193cc:	1930      	adds	r0, r6, r4
   193ce:	9100      	str	r1, [sp, #0]
   193d0:	f00d f8c4 	bl	2655c <snprintf>
			if ((err <= 0) || (err > (buf_size - out_buf_len))) {
   193d4:	2800      	cmp	r0, #0
   193d6:	dda4      	ble.n	19322 <modem_info_string_get+0x11e>
   193d8:	9900      	ldr	r1, [sp, #0]
   193da:	4281      	cmp	r1, r0
   193dc:	d3a1      	bcc.n	19322 <modem_info_string_get+0x11e>
			cmd_rsp_idx = ip_str_len + 1;
   193de:	1c7b      	adds	r3, r7, #1
			out_buf_len += IP_ADDR_SEPARATOR_LEN;
   193e0:	3402      	adds	r4, #2
			cmd_rsp_idx = ip_str_len + 1;
   193e2:	9300      	str	r3, [sp, #0]
		if (--ip_cnt) {
   193e4:	3d01      	subs	r5, #1
   193e6:	f47f af47 	bne.w	19278 <modem_info_string_get+0x74>
			len = out_buf_len;
   193ea:	9403      	str	r4, [sp, #12]
   193ec:	e7c4      	b.n	19378 <modem_info_string_get+0x174>
		return -EINVAL;
   193ee:	f06f 0115 	mvn.w	r1, #21
   193f2:	e733      	b.n	1925c <modem_info_string_get+0x58>
		return -EIO;
   193f4:	f06f 0104 	mvn.w	r1, #4
   193f8:	e730      	b.n	1925c <modem_info_string_get+0x58>
			return -EFAULT;
   193fa:	f06f 010d 	mvn.w	r1, #13
   193fe:	e72d      	b.n	1925c <modem_info_string_get+0x58>
   19400:	0002f1b8 	.word	0x0002f1b8
   19404:	00032797 	.word	0x00032797
   19408:	0002eccc 	.word	0x0002eccc
   1940c:	0002ec7c 	.word	0x0002ec7c
   19410:	00032554 	.word	0x00032554
   19414:	0003256d 	.word	0x0003256d
   19418:	0002fb26 	.word	0x0002fb26
   1941c:	000305c2 	.word	0x000305c2
   19420:	00032588 	.word	0x00032588
   19424:	2002176c 	.word	0x2002176c

00019428 <modem_info_init>:
}

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   19428:	210a      	movs	r1, #10
   1942a:	4801      	ldr	r0, [pc, #4]	; (19430 <modem_info_init+0x8>)
   1942c:	f014 bf5d 	b.w	2e2ea <at_params_list_init>
   19430:	2002176c 	.word	0x2002176c

00019434 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   19434:	b508      	push	{r3, lr}
	z_impl_log_panic();
   19436:	f7f9 ff87 	bl	13348 <z_impl_log_panic>
   1943a:	4b06      	ldr	r3, [pc, #24]	; (19454 <k_sys_fatal_error_handler+0x20>)
   1943c:	4906      	ldr	r1, [pc, #24]	; (19458 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   1943e:	4807      	ldr	r0, [pc, #28]	; (1945c <k_sys_fatal_error_handler+0x28>)
   19440:	1ac9      	subs	r1, r1, r3
   19442:	08c9      	lsrs	r1, r1, #3
   19444:	0189      	lsls	r1, r1, #6
   19446:	f041 0101 	orr.w	r1, r1, #1
   1944a:	f013 f881 	bl	2c550 <log_0>
	sys_arch_reboot(0);
   1944e:	2000      	movs	r0, #0
   19450:	f7fb fd26 	bl	14ea0 <sys_arch_reboot>

	CODE_UNREACHABLE;
   19454:	0002ec7c 	.word	0x0002ec7c
   19458:	0002ecb4 	.word	0x0002ecb4
   1945c:	000325ad 	.word	0x000325ad

00019460 <date_time_notify_event.constprop.0>:

static void date_time_notify_event(const struct date_time_evt *evt)
{
	__ASSERT(evt != NULL, "Library event not found");

	if (app_evt_handler != NULL) {
   19460:	4b02      	ldr	r3, [pc, #8]	; (1946c <date_time_notify_event.constprop.0+0xc>)
   19462:	681b      	ldr	r3, [r3, #0]
   19464:	b10b      	cbz	r3, 1946a <date_time_notify_event.constprop.0+0xa>
		app_evt_handler(evt);
   19466:	4802      	ldr	r0, [pc, #8]	; (19470 <date_time_notify_event.constprop.0+0x10>)
   19468:	4718      	bx	r3
	}
}
   1946a:	4770      	bx	lr
   1946c:	20021774 	.word	0x20021774
   19470:	2002626e 	.word	0x2002626e

00019474 <new_date_time_get>:

	return 0;
}

static void new_date_time_get(void)
{
   19474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (time_aux.last_date_time_update == 0 ||
   19478:	4e72      	ldr	r6, [pc, #456]	; (19644 <new_date_time_get+0x1d0>)
   1947a:	4c73      	ldr	r4, [pc, #460]	; (19648 <new_date_time_get+0x1d4>)
   1947c:	4637      	mov	r7, r6
   1947e:	4b73      	ldr	r3, [pc, #460]	; (1964c <new_date_time_get+0x1d8>)
{
   19480:	b095      	sub	sp, #84	; 0x54
   19482:	1ae4      	subs	r4, r4, r3
   19484:	08e4      	lsrs	r4, r4, #3
   19486:	f04f 33ff 	mov.w	r3, #4294967295
   1948a:	f04f 32ff 	mov.w	r2, #4294967295
   1948e:	4870      	ldr	r0, [pc, #448]	; (19650 <new_date_time_get+0x1dc>)
   19490:	f00b f89e 	bl	245d0 <z_impl_k_sem_take>
	if (time_aux.last_date_time_update == 0 ||
   19494:	68b3      	ldr	r3, [r6, #8]
   19496:	b18b      	cbz	r3, 194bc <new_date_time_get+0x48>
   19498:	e9d6 2300 	ldrd	r2, r3, [r6]
   1949c:	4313      	orrs	r3, r2
   1949e:	d00d      	beq.n	194bc <new_date_time_get+0x48>
	if ((k_uptime_get() - time_aux.last_date_time_update) >
   194a0:	f015 f85c 	bl	2e55c <k_uptime_get>
   194a4:	68b3      	ldr	r3, [r6, #8]
   194a6:	1ac0      	subs	r0, r0, r3
   194a8:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
   194ac:	2801      	cmp	r0, #1
   194ae:	f171 0300 	sbcs.w	r3, r1, #0
   194b2:	da03      	bge.n	194bc <new_date_time_get+0x48>
		LOG_DBG("Updating date time UTC...");

		err = current_time_check();
		if (err == 0) {
			LOG_DBG("Time successfully obtained");
			initial_valid_time = true;
   194b4:	2201      	movs	r2, #1
   194b6:	4b67      	ldr	r3, [pc, #412]	; (19654 <new_date_time_get+0x1e0>)

		LOG_DBG("Not getting time from NTP server");
#endif
		LOG_DBG("Not getting time from any time source");

		evt.type = DATE_TIME_NOT_OBTAINED;
   194b8:	701a      	strb	r2, [r3, #0]
   194ba:	e05a      	b.n	19572 <new_date_time_get+0xfe>
	err = at_cmd_write(AT_CMD_MODEM_DATE_TIME, buf, sizeof(buf), NULL);
   194bc:	2300      	movs	r3, #0
   194be:	2221      	movs	r2, #33	; 0x21
   194c0:	4865      	ldr	r0, [pc, #404]	; (19658 <new_date_time_get+0x1e4>)
   194c2:	a902      	add	r1, sp, #8
   194c4:	f7fe fdc0 	bl	18048 <at_cmd_write>
	if (err) {
   194c8:	2800      	cmp	r0, #0
   194ca:	d155      	bne.n	19578 <new_date_time_get+0x104>
	buf[AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN - 4] = '\0';
   194cc:	2520      	movs	r5, #32
   194ce:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   194d2:	f244 0109 	movw	r1, #16393	; 0x4009
			buf[i] = ' ';
   194d6:	4628      	mov	r0, r5
   194d8:	aa02      	add	r2, sp, #8
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   194da:	f812 3b01 	ldrb.w	r3, [r2], #1
   194de:	3b2c      	subs	r3, #44	; 0x2c
   194e0:	b2db      	uxtb	r3, r3
   194e2:	2b0e      	cmp	r3, #14
   194e4:	d805      	bhi.n	194f2 <new_date_time_get+0x7e>
   194e6:	fa21 f303 	lsr.w	r3, r1, r3
   194ea:	07db      	lsls	r3, r3, #31
			buf[i] = ' ';
   194ec:	bf48      	it	mi
   194ee:	f802 0c01 	strbmi.w	r0, [r2, #-1]
	for (int i = 0; i < AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN; i++) {
   194f2:	3d01      	subs	r5, #1
   194f4:	d1f1      	bne.n	194da <new_date_time_get+0x66>
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   194f6:	220a      	movs	r2, #10
	char *ptr_index = &buf[8];
   194f8:	a804      	add	r0, sp, #16
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   194fa:	a901      	add	r1, sp, #4
	char *ptr_index = &buf[8];
   194fc:	9001      	str	r0, [sp, #4]
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   194fe:	f00d fd21 	bl	26f44 <strtol>
   19502:	3064      	adds	r0, #100	; 0x64
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   19504:	220a      	movs	r2, #10
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   19506:	9010      	str	r0, [sp, #64]	; 0x40
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   19508:	a901      	add	r1, sp, #4
   1950a:	9801      	ldr	r0, [sp, #4]
   1950c:	f00d fd1a 	bl	26f44 <strtol>
   19510:	3801      	subs	r0, #1
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   19512:	220a      	movs	r2, #10
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   19514:	900f      	str	r0, [sp, #60]	; 0x3c
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   19516:	a901      	add	r1, sp, #4
   19518:	9801      	ldr	r0, [sp, #4]
   1951a:	f00d fd13 	bl	26f44 <strtol>
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   1951e:	220a      	movs	r2, #10
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   19520:	900e      	str	r0, [sp, #56]	; 0x38
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   19522:	a901      	add	r1, sp, #4
   19524:	9801      	ldr	r0, [sp, #4]
   19526:	f00d fd0d 	bl	26f44 <strtol>
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   1952a:	220a      	movs	r2, #10
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   1952c:	900d      	str	r0, [sp, #52]	; 0x34
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   1952e:	a901      	add	r1, sp, #4
   19530:	9801      	ldr	r0, [sp, #4]
   19532:	f00d fd07 	bl	26f44 <strtol>
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   19536:	220a      	movs	r2, #10
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   19538:	900c      	str	r0, [sp, #48]	; 0x30
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   1953a:	a901      	add	r1, sp, #4
   1953c:	9801      	ldr	r0, [sp, #4]
   1953e:	f00d fd01 	bl	26f44 <strtol>
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   19542:	9b10      	ldr	r3, [sp, #64]	; 0x40
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   19544:	900b      	str	r0, [sp, #44]	; 0x2c
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   19546:	2b73      	cmp	r3, #115	; 0x73
   19548:	d016      	beq.n	19578 <new_date_time_get+0x104>
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(&date_time) * 1000;
   1954a:	a80b      	add	r0, sp, #44	; 0x2c
   1954c:	f7f9 fa2c 	bl	129a8 <timeutil_timegm64>
   19550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19554:	460a      	mov	r2, r1
   19556:	fba0 0103 	umull	r0, r1, r0, r3
   1955a:	fb03 1102 	mla	r1, r3, r2, r1
   1955e:	e9c7 0100 	strd	r0, r1, [r7]
	time_aux.last_date_time_update = k_uptime_get();
   19562:	f014 fffb 	bl	2e55c <k_uptime_get>
			initial_valid_time = true;
   19566:	2201      	movs	r2, #1
   19568:	4b3a      	ldr	r3, [pc, #232]	; (19654 <new_date_time_get+0x1e0>)
	time_aux.last_date_time_update = k_uptime_get();
   1956a:	60b8      	str	r0, [r7, #8]
			initial_valid_time = true;
   1956c:	701a      	strb	r2, [r3, #0]
			evt.type = DATE_TIME_OBTAINED_MODEM;
   1956e:	4b3b      	ldr	r3, [pc, #236]	; (1965c <new_date_time_get+0x1e8>)
   19570:	701d      	strb	r5, [r3, #0]
		date_time_notify_event(&evt);
   19572:	f7ff ff75 	bl	19460 <date_time_notify_event.constprop.0>
   19576:	e786      	b.n	19486 <new_date_time_get+0x12>
		if (err == 0) {
   19578:	f04f 0900 	mov.w	r9, #0
   1957c:	4d38      	ldr	r5, [pc, #224]	; (19660 <new_date_time_get+0x1ec>)
	hints.ai_family = AF_INET;
   1957e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1967c <new_date_time_get+0x208>
	err = sntp_query(&sntp_ctx, timeout, time);
   19582:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 19674 <new_date_time_get+0x200>
	hints.ai_socktype = SOCK_DGRAM;
   19586:	2302      	movs	r3, #2
   19588:	2201      	movs	r2, #1
   1958a:	e9c8 2302 	strd	r2, r3, [r8, #8]
	hints.ai_protocol = 0;
   1958e:	2300      	movs	r3, #0
   19590:	f8c8 3010 	str.w	r3, [r8, #16]
	if (server->addr == NULL) {
   19594:	686b      	ldr	r3, [r5, #4]
   19596:	b9eb      	cbnz	r3, 195d4 <new_date_time_get+0x160>
	return zsock_getaddrinfo(host, service, hints, res);
   19598:	4932      	ldr	r1, [pc, #200]	; (19664 <new_date_time_get+0x1f0>)
   1959a:	4642      	mov	r2, r8
   1959c:	6828      	ldr	r0, [r5, #0]
   1959e:	1d2b      	adds	r3, r5, #4
   195a0:	f013 fa83 	bl	2caaa <zsock_getaddrinfo>
		if (err) {
   195a4:	4601      	mov	r1, r0
   195a6:	b1a8      	cbz	r0, 195d4 <new_date_time_get+0x160>
			LOG_WRN("getaddrinfo, error: %d", err);
   195a8:	01a2      	lsls	r2, r4, #6
   195aa:	482f      	ldr	r0, [pc, #188]	; (19668 <new_date_time_get+0x1f4>)
   195ac:	f042 0202 	orr.w	r2, r2, #2
   195b0:	f012 ffdd 	bl	2c56e <log_1>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   195b4:	f109 0901 	add.w	r9, r9, #1
   195b8:	f1b9 0f05 	cmp.w	r9, #5
   195bc:	f105 0508 	add.w	r5, r5, #8
   195c0:	d1e1      	bne.n	19586 <new_date_time_get+0x112>
	LOG_WRN("Not getting time from any NTP server");
   195c2:	01a1      	lsls	r1, r4, #6
   195c4:	4829      	ldr	r0, [pc, #164]	; (1966c <new_date_time_get+0x1f8>)
   195c6:	f041 0102 	orr.w	r1, r1, #2
   195ca:	f012 ffc1 	bl	2c550 <log_0>
		evt.type = DATE_TIME_NOT_OBTAINED;
   195ce:	2203      	movs	r2, #3
   195d0:	4b22      	ldr	r3, [pc, #136]	; (1965c <new_date_time_get+0x1e8>)
   195d2:	e771      	b.n	194b8 <new_date_time_get+0x44>
	err = sntp_init(&sntp_ctx, server->addr->ai_addr,
   195d4:	686b      	ldr	r3, [r5, #4]
   195d6:	a80b      	add	r0, sp, #44	; 0x2c
   195d8:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   195dc:	f013 fa31 	bl	2ca42 <sntp_init>
	if (err) {
   195e0:	4682      	mov	sl, r0
   195e2:	b300      	cbz	r0, 19626 <new_date_time_get+0x1b2>
		LOG_WRN("sntp_init, error: %d", err);
   195e4:	4601      	mov	r1, r0
   195e6:	01a2      	lsls	r2, r4, #6
   195e8:	4821      	ldr	r0, [pc, #132]	; (19670 <new_date_time_get+0x1fc>)
   195ea:	f042 0202 	orr.w	r2, r2, #2
		LOG_WRN("sntp_query, error: %d", err);
   195ee:	f012 ffbe 	bl	2c56e <log_1>
	sntp_close(&sntp_ctx);
   195f2:	a80b      	add	r0, sp, #44	; 0x2c
   195f4:	f013 fa54 	bl	2caa0 <sntp_close>
		if (err) {
   195f8:	f1ba 0f00 	cmp.w	sl, #0
   195fc:	d1da      	bne.n	195b4 <new_date_time_get+0x140>
		time_aux.date_time_utc = (int64_t)sntp_time.seconds * 1000;
   195fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   19602:	4b1c      	ldr	r3, [pc, #112]	; (19674 <new_date_time_get+0x200>)
   19604:	681a      	ldr	r2, [r3, #0]
   19606:	6858      	ldr	r0, [r3, #4]
   19608:	fba2 2301 	umull	r2, r3, r2, r1
   1960c:	fb01 3300 	mla	r3, r1, r0, r3
   19610:	e9c7 2300 	strd	r2, r3, [r7]
		time_aux.last_date_time_update = k_uptime_get();
   19614:	f014 ffa2 	bl	2e55c <k_uptime_get>
			initial_valid_time = true;
   19618:	2301      	movs	r3, #1
   1961a:	4a0e      	ldr	r2, [pc, #56]	; (19654 <new_date_time_get+0x1e0>)
		time_aux.last_date_time_update = k_uptime_get();
   1961c:	60b8      	str	r0, [r7, #8]
			initial_valid_time = true;
   1961e:	7013      	strb	r3, [r2, #0]
			evt.type = DATE_TIME_OBTAINED_NTP;
   19620:	4a0e      	ldr	r2, [pc, #56]	; (1965c <new_date_time_get+0x1e8>)
   19622:	7013      	strb	r3, [r2, #0]
			date_time_notify_event(&evt);
   19624:	e7a5      	b.n	19572 <new_date_time_get+0xfe>
	err = sntp_query(&sntp_ctx, timeout, time);
   19626:	465a      	mov	r2, fp
   19628:	f241 3188 	movw	r1, #5000	; 0x1388
   1962c:	a80b      	add	r0, sp, #44	; 0x2c
   1962e:	f7f3 fe5f 	bl	d2f0 <sntp_query>
	if (err) {
   19632:	4682      	mov	sl, r0
   19634:	2800      	cmp	r0, #0
   19636:	d0dc      	beq.n	195f2 <new_date_time_get+0x17e>
		LOG_WRN("sntp_query, error: %d", err);
   19638:	01a2      	lsls	r2, r4, #6
   1963a:	4601      	mov	r1, r0
   1963c:	f042 0202 	orr.w	r2, r2, #2
   19640:	480d      	ldr	r0, [pc, #52]	; (19678 <new_date_time_get+0x204>)
   19642:	e7d4      	b.n	195ee <new_date_time_get+0x17a>
   19644:	20021178 	.word	0x20021178
   19648:	0002eca4 	.word	0x0002eca4
   1964c:	0002ec7c 	.word	0x0002ec7c
   19650:	20020c9c 	.word	0x20020c9c
   19654:	2002626f 	.word	0x2002626f
   19658:	0003241b 	.word	0x0003241b
   1965c:	2002626e 	.word	0x2002626e
   19660:	2002049c 	.word	0x2002049c
   19664:	000325ca 	.word	0x000325ca
   19668:	000325ce 	.word	0x000325ce
   1966c:	00032610 	.word	0x00032610
   19670:	000325e5 	.word	0x000325e5
   19674:	20021168 	.word	0x20021168
   19678:	000325fa 	.word	0x000325fa
   1967c:	20021778 	.word	0x20021778

00019680 <date_time_init>:
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
	}
}

static int date_time_init(const struct device *unused)
{
   19680:	b510      	push	{r4, lr}
	k_delayed_work_init(&time_work, date_time_handler);
   19682:	4c06      	ldr	r4, [pc, #24]	; (1969c <date_time_init+0x1c>)
   19684:	4906      	ldr	r1, [pc, #24]	; (196a0 <date_time_init+0x20>)
   19686:	4620      	mov	r0, r4
   19688:	f015 f8a2 	bl	2e7d0 <k_delayed_work_init>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1968c:	2200      	movs	r2, #0
   1968e:	2300      	movs	r3, #0
   19690:	4621      	mov	r1, r4
   19692:	4804      	ldr	r0, [pc, #16]	; (196a4 <date_time_init+0x24>)
   19694:	f00b f9c6 	bl	24a24 <k_delayed_work_submit_to_queue>
	k_delayed_work_submit(&time_work,
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));

	return 0;
}
   19698:	2000      	movs	r0, #0
   1969a:	bd10      	pop	{r4, pc}
   1969c:	20021188 	.word	0x20021188
   196a0:	0002e55b 	.word	0x0002e55b
   196a4:	20021348 	.word	0x20021348

000196a8 <date_time_uptime_to_unix_time_ms>:

	return 0;
}

int date_time_uptime_to_unix_time_ms(int64_t *uptime)
{
   196a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t uptime_prev = *uptime;
   196ac:	6803      	ldr	r3, [r0, #0]
{
   196ae:	4604      	mov	r4, r0
	int64_t uptime_prev = *uptime;
   196b0:	9300      	str	r3, [sp, #0]
   196b2:	6843      	ldr	r3, [r0, #4]
   196b4:	9301      	str	r3, [sp, #4]

	if (!initial_valid_time) {
   196b6:	4b23      	ldr	r3, [pc, #140]	; (19744 <date_time_uptime_to_unix_time_ms+0x9c>)
   196b8:	781b      	ldrb	r3, [r3, #0]
   196ba:	b973      	cbnz	r3, 196da <date_time_uptime_to_unix_time_ms+0x32>
   196bc:	4b22      	ldr	r3, [pc, #136]	; (19748 <date_time_uptime_to_unix_time_ms+0xa0>)
   196be:	4923      	ldr	r1, [pc, #140]	; (1974c <date_time_uptime_to_unix_time_ms+0xa4>)
		LOG_WRN("Valid time not currently available");
   196c0:	4823      	ldr	r0, [pc, #140]	; (19750 <date_time_uptime_to_unix_time_ms+0xa8>)
   196c2:	1ac9      	subs	r1, r1, r3
   196c4:	08c9      	lsrs	r1, r1, #3
   196c6:	0189      	lsls	r1, r1, #6
   196c8:	f041 0102 	orr.w	r1, r1, #2
   196cc:	f012 ff40 	bl	2c550 <log_0>
		return -ENODATA;
   196d0:	f06f 003c 	mvn.w	r0, #60	; 0x3c
		*uptime = uptime_prev;
		return -EINVAL;
	}

	return 0;
}
   196d4:	b003      	add	sp, #12
   196d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*uptime += time_aux.date_time_utc - time_aux.last_date_time_update;
   196da:	4d1e      	ldr	r5, [pc, #120]	; (19754 <date_time_uptime_to_unix_time_ms+0xac>)
   196dc:	68a9      	ldr	r1, [r5, #8]
   196de:	e9d5 6700 	ldrd	r6, r7, [r5]
   196e2:	1a72      	subs	r2, r6, r1
   196e4:	eb67 73e1 	sbc.w	r3, r7, r1, asr #31
   196e8:	9900      	ldr	r1, [sp, #0]
   196ea:	eb12 0801 	adds.w	r8, r2, r1
   196ee:	9901      	ldr	r1, [sp, #4]
   196f0:	eb43 0901 	adc.w	r9, r3, r1
   196f4:	e9c0 8900 	strd	r8, r9, [r0]
	    (k_uptime_get() - time_aux.last_date_time_update)) {
   196f8:	f014 ff30 	bl	2e55c <k_uptime_get>
   196fc:	68ab      	ldr	r3, [r5, #8]
	if (*uptime > time_aux.date_time_utc +
   196fe:	1af6      	subs	r6, r6, r3
   19700:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
   19704:	eb16 0a00 	adds.w	sl, r6, r0
   19708:	eb47 0b01 	adc.w	fp, r7, r1
   1970c:	45c2      	cmp	sl, r8
   1970e:	eb7b 0309 	sbcs.w	r3, fp, r9
   19712:	da15      	bge.n	19740 <date_time_uptime_to_unix_time_ms+0x98>
   19714:	4b0c      	ldr	r3, [pc, #48]	; (19748 <date_time_uptime_to_unix_time_ms+0xa0>)
   19716:	4d0d      	ldr	r5, [pc, #52]	; (1974c <date_time_uptime_to_unix_time_ms+0xa4>)
		LOG_WRN("Uptime to large or previously converted");
   19718:	480f      	ldr	r0, [pc, #60]	; (19758 <date_time_uptime_to_unix_time_ms+0xb0>)
   1971a:	1aed      	subs	r5, r5, r3
   1971c:	08ed      	lsrs	r5, r5, #3
   1971e:	01ad      	lsls	r5, r5, #6
   19720:	f045 0502 	orr.w	r5, r5, #2
   19724:	4629      	mov	r1, r5
   19726:	f012 ff13 	bl	2c550 <log_0>
		LOG_WRN("Clear variable or set a new uptime");
   1972a:	480c      	ldr	r0, [pc, #48]	; (1975c <date_time_uptime_to_unix_time_ms+0xb4>)
   1972c:	4629      	mov	r1, r5
   1972e:	f012 ff0f 	bl	2c550 <log_0>
		*uptime = uptime_prev;
   19732:	9b00      	ldr	r3, [sp, #0]
		return -EINVAL;
   19734:	f06f 0015 	mvn.w	r0, #21
		*uptime = uptime_prev;
   19738:	6023      	str	r3, [r4, #0]
   1973a:	9b01      	ldr	r3, [sp, #4]
   1973c:	6063      	str	r3, [r4, #4]
		return -EINVAL;
   1973e:	e7c9      	b.n	196d4 <date_time_uptime_to_unix_time_ms+0x2c>
	return 0;
   19740:	2000      	movs	r0, #0
   19742:	e7c7      	b.n	196d4 <date_time_uptime_to_unix_time_ms+0x2c>
   19744:	2002626f 	.word	0x2002626f
   19748:	0002ec7c 	.word	0x0002ec7c
   1974c:	0002eca4 	.word	0x0002eca4
   19750:	00032635 	.word	0x00032635
   19754:	20021178 	.word	0x20021178
   19758:	00032658 	.word	0x00032658
   1975c:	00032680 	.word	0x00032680

00019760 <date_time_now>:

int date_time_now(int64_t *unix_time_ms)
{
   19760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;
	int64_t unix_time_ms_prev = *unix_time_ms;
   19762:	e9d0 4500 	ldrd	r4, r5, [r0]
{
   19766:	4606      	mov	r6, r0

	*unix_time_ms = k_uptime_get();
   19768:	f014 fef8 	bl	2e55c <k_uptime_get>
   1976c:	e9c6 0100 	strd	r0, r1, [r6]

	err = date_time_uptime_to_unix_time_ms(unix_time_ms);
   19770:	4630      	mov	r0, r6
   19772:	f7ff ff99 	bl	196a8 <date_time_uptime_to_unix_time_ms>
	if (err) {
   19776:	4607      	mov	r7, r0
   19778:	b160      	cbz	r0, 19794 <date_time_now+0x34>
   1977a:	4b07      	ldr	r3, [pc, #28]	; (19798 <date_time_now+0x38>)
   1977c:	4a07      	ldr	r2, [pc, #28]	; (1979c <date_time_now+0x3c>)
		LOG_WRN("date_time_uptime_to_unix_time_ms, error: %d", err);
   1977e:	4601      	mov	r1, r0
   19780:	1ad2      	subs	r2, r2, r3
   19782:	08d2      	lsrs	r2, r2, #3
   19784:	0192      	lsls	r2, r2, #6
   19786:	4806      	ldr	r0, [pc, #24]	; (197a0 <date_time_now+0x40>)
   19788:	f042 0202 	orr.w	r2, r2, #2
   1978c:	f012 feef 	bl	2c56e <log_1>
		*unix_time_ms = unix_time_ms_prev;
   19790:	e9c6 4500 	strd	r4, r5, [r6]
	}

	return err;
}
   19794:	4638      	mov	r0, r7
   19796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19798:	0002ec7c 	.word	0x0002ec7c
   1979c:	0002eca4 	.word	0x0002eca4
   197a0:	000326a3 	.word	0x000326a3

000197a4 <date_time_update_async>:

	app_evt_handler = evt_handler;
}

int date_time_update_async(date_time_evt_handler_t evt_handler)
{
   197a4:	b508      	push	{r3, lr}
	if (evt_handler) {
   197a6:	b108      	cbz	r0, 197ac <date_time_update_async+0x8>
		app_evt_handler = evt_handler;
   197a8:	4b03      	ldr	r3, [pc, #12]	; (197b8 <date_time_update_async+0x14>)
   197aa:	6018      	str	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   197ac:	4803      	ldr	r0, [pc, #12]	; (197bc <date_time_update_async+0x18>)
   197ae:	f00a fecb 	bl	24548 <z_impl_k_sem_give>
	}

	k_sem_give(&time_fetch_sem);

	return 0;
}
   197b2:	2000      	movs	r0, #0
   197b4:	bd08      	pop	{r3, pc}
   197b6:	bf00      	nop
   197b8:	20021774 	.word	0x20021774
   197bc:	20020c9c 	.word	0x20020c9c

000197c0 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   197c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   197c4:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   197c6:	4c21      	ldr	r4, [pc, #132]	; (1984c <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   197c8:	4e21      	ldr	r6, [pc, #132]	; (19850 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   197ca:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   197ce:	f8df 9088 	ldr.w	r9, [pc, #136]	; 19858 <check_ext_api_requests+0x98>
{
   197d2:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   197d4:	45a8      	cmp	r8, r5
   197d6:	d803      	bhi.n	197e0 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   197d8:	2000      	movs	r0, #0
   197da:	b005      	add	sp, #20
   197dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   197e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   197e2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   197e6:	681f      	ldr	r7, [r3, #0]
   197e8:	ab01      	add	r3, sp, #4
   197ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   197ee:	220c      	movs	r2, #12
   197f0:	4619      	mov	r1, r3
   197f2:	4638      	mov	r0, r7
   197f4:	f00c fc14 	bl	26020 <memcmp>
   197f8:	b990      	cbnz	r0, 19820 <check_ext_api_requests+0x60>
   197fa:	b18f      	cbz	r7, 19820 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   197fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   197fe:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   19800:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   19802:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   19804:	4291      	cmp	r1, r2
   19806:	d10b      	bne.n	19820 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   19808:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   1980a:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   1980c:	4291      	cmp	r1, r2
   1980e:	d807      	bhi.n	19820 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   19810:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   19812:	4291      	cmp	r1, r2
   19814:	d904      	bls.n	19820 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   19816:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   19818:	695b      	ldr	r3, [r3, #20]
   1981a:	ea32 0303 	bics.w	r3, r2, r3
   1981e:	d00a      	beq.n	19836 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   19820:	6a27      	ldr	r7, [r4, #32]
   19822:	b167      	cbz	r7, 1983e <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   19824:	480b      	ldr	r0, [pc, #44]	; (19854 <check_ext_api_requests+0x94>)
   19826:	f012 fc46 	bl	2c0b6 <printk>
			k_panic();
   1982a:	4040      	eors	r0, r0
   1982c:	f380 8811 	msr	BASEPRI, r0
   19830:	f04f 0004 	mov.w	r0, #4
   19834:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   19836:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   19838:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   1983a:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1983c:	e7ca      	b.n	197d4 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   1983e:	4648      	mov	r0, r9
   19840:	f012 fc39 	bl	2c0b6 <printk>
			*ext_api_req->ext_api = NULL;
   19844:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19846:	601f      	str	r7, [r3, #0]
   19848:	e7f5      	b.n	19836 <check_ext_api_requests+0x76>
   1984a:	bf00      	nop
   1984c:	0000c23c 	.word	0x0000c23c
   19850:	0002ed5c 	.word	0x0002ed5c
   19854:	0003273e 	.word	0x0003273e
   19858:	00032767 	.word	0x00032767

0001985c <packet_free_cb>:
   1985c:	b510      	push	{r4, lr}
   1985e:	4604      	mov	r4, r0
   19860:	6800      	ldr	r0, [r0, #0]
   19862:	f004 fef7 	bl	1e654 <rpc_logobj_client_data_free>
   19866:	68a0      	ldr	r0, [r4, #8]
   19868:	b118      	cbz	r0, 19872 <packet_free_cb+0x16>
   1986a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1986e:	f007 bced 	b.w	2124c <nrf_free>
   19872:	bd10      	pop	{r4, pc}

00019874 <logobj_event_handler>:
   19874:	b530      	push	{r4, r5, lr}
   19876:	4b3b      	ldr	r3, [pc, #236]	; (19964 <logobj_event_handler+0xf0>)
   19878:	b085      	sub	sp, #20
   1987a:	681d      	ldr	r5, [r3, #0]
   1987c:	2d00      	cmp	r5, #0
   1987e:	d04c      	beq.n	1991a <logobj_event_handler+0xa6>
   19880:	f248 0302 	movw	r3, #32770	; 0x8002
   19884:	4299      	cmp	r1, r3
   19886:	d053      	beq.n	19930 <logobj_event_handler+0xbc>
   19888:	d91c      	bls.n	198c4 <logobj_event_handler+0x50>
   1988a:	f248 0303 	movw	r3, #32771	; 0x8003
   1988e:	4299      	cmp	r1, r3
   19890:	d05a      	beq.n	19948 <logobj_event_handler+0xd4>
   19892:	f249 0301 	movw	r3, #36865	; 0x9001
   19896:	4299      	cmp	r1, r3
   19898:	d147      	bne.n	1992a <logobj_event_handler+0xb6>
   1989a:	2400      	movs	r4, #0
   1989c:	6843      	ldr	r3, [r0, #4]
   1989e:	6802      	ldr	r2, [r0, #0]
   198a0:	e9cd 4402 	strd	r4, r4, [sp, #8]
   198a4:	e9cd 2300 	strd	r2, r3, [sp]
   198a8:	69e8      	ldr	r0, [r5, #28]
   198aa:	4669      	mov	r1, sp
   198ac:	6803      	ldr	r3, [r0, #0]
   198ae:	685b      	ldr	r3, [r3, #4]
   198b0:	4798      	blx	r3
   198b2:	3001      	adds	r0, #1
   198b4:	d04e      	beq.n	19954 <logobj_event_handler+0xe0>
   198b6:	4620      	mov	r0, r4
   198b8:	682b      	ldr	r3, [r5, #0]
   198ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   198be:	602b      	str	r3, [r5, #0]
   198c0:	b005      	add	sp, #20
   198c2:	bd30      	pop	{r4, r5, pc}
   198c4:	f248 0301 	movw	r3, #32769	; 0x8001
   198c8:	4299      	cmp	r1, r3
   198ca:	d12e      	bne.n	1992a <logobj_event_handler+0xb6>
   198cc:	68c3      	ldr	r3, [r0, #12]
   198ce:	2b00      	cmp	r3, #0
   198d0:	d135      	bne.n	1993e <logobj_event_handler+0xca>
   198d2:	6828      	ldr	r0, [r5, #0]
   198d4:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   198d8:	d03e      	beq.n	19958 <logobj_event_handler+0xe4>
   198da:	682b      	ldr	r3, [r5, #0]
   198dc:	b29b      	uxth	r3, r3
   198de:	2b01      	cmp	r3, #1
   198e0:	d105      	bne.n	198ee <logobj_event_handler+0x7a>
   198e2:	682b      	ldr	r3, [r5, #0]
   198e4:	0c1b      	lsrs	r3, r3, #16
   198e6:	041b      	lsls	r3, r3, #16
   198e8:	f043 0302 	orr.w	r3, r3, #2
   198ec:	602b      	str	r3, [r5, #0]
   198ee:	4b1e      	ldr	r3, [pc, #120]	; (19968 <logobj_event_handler+0xf4>)
   198f0:	781a      	ldrb	r2, [r3, #0]
   198f2:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   198f6:	2a00      	cmp	r2, #0
   198f8:	d031      	beq.n	1995e <logobj_event_handler+0xea>
   198fa:	4a1c      	ldr	r2, [pc, #112]	; (1996c <logobj_event_handler+0xf8>)
   198fc:	7811      	ldrb	r1, [r2, #0]
   198fe:	b909      	cbnz	r1, 19904 <logobj_event_handler+0x90>
   19900:	2101      	movs	r1, #1
   19902:	7011      	strb	r1, [r2, #0]
   19904:	2000      	movs	r0, #0
   19906:	7018      	strb	r0, [r3, #0]
   19908:	682b      	ldr	r3, [r5, #0]
   1990a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1990e:	602b      	str	r3, [r5, #0]
   19910:	682b      	ldr	r3, [r5, #0]
   19912:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   19916:	602b      	str	r3, [r5, #0]
   19918:	e7d2      	b.n	198c0 <logobj_event_handler+0x4c>
   1991a:	6800      	ldr	r0, [r0, #0]
   1991c:	2800      	cmp	r0, #0
   1991e:	d0cf      	beq.n	198c0 <logobj_event_handler+0x4c>
   19920:	f004 fe98 	bl	1e654 <rpc_logobj_client_data_free>
   19924:	4628      	mov	r0, r5
   19926:	b005      	add	sp, #20
   19928:	bd30      	pop	{r4, r5, pc}
   1992a:	2000      	movs	r0, #0
   1992c:	b005      	add	sp, #20
   1992e:	bd30      	pop	{r4, r5, pc}
   19930:	682b      	ldr	r3, [r5, #0]
   19932:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   19936:	d00b      	beq.n	19950 <logobj_event_handler+0xdc>
   19938:	68c0      	ldr	r0, [r0, #12]
   1993a:	2800      	cmp	r0, #0
   1993c:	d0e4      	beq.n	19908 <logobj_event_handler+0x94>
   1993e:	230e      	movs	r3, #14
   19940:	2000      	movs	r0, #0
   19942:	606b      	str	r3, [r5, #4]
   19944:	b005      	add	sp, #20
   19946:	bd30      	pop	{r4, r5, pc}
   19948:	68c3      	ldr	r3, [r0, #12]
   1994a:	2b01      	cmp	r3, #1
   1994c:	d1a5      	bne.n	1989a <logobj_event_handler+0x26>
   1994e:	e7f6      	b.n	1993e <logobj_event_handler+0xca>
   19950:	4618      	mov	r0, r3
   19952:	e7b5      	b.n	198c0 <logobj_event_handler+0x4c>
   19954:	2002      	movs	r0, #2
   19956:	e7b3      	b.n	198c0 <logobj_event_handler+0x4c>
   19958:	230e      	movs	r3, #14
   1995a:	606b      	str	r3, [r5, #4]
   1995c:	e7b0      	b.n	198c0 <logobj_event_handler+0x4c>
   1995e:	4a03      	ldr	r2, [pc, #12]	; (1996c <logobj_event_handler+0xf8>)
   19960:	7011      	strb	r1, [r2, #0]
   19962:	e7cf      	b.n	19904 <logobj_event_handler+0x90>
   19964:	200217cc 	.word	0x200217cc
   19968:	20026270 	.word	0x20026270
   1996c:	20026271 	.word	0x20026271

00019970 <logobj_interface_init>:
   19970:	2300      	movs	r3, #0
   19972:	b510      	push	{r4, lr}
   19974:	4808      	ldr	r0, [pc, #32]	; (19998 <logobj_interface_init+0x28>)
   19976:	4c09      	ldr	r4, [pc, #36]	; (1999c <logobj_interface_init+0x2c>)
   19978:	4909      	ldr	r1, [pc, #36]	; (199a0 <logobj_interface_init+0x30>)
   1997a:	4a0a      	ldr	r2, [pc, #40]	; (199a4 <logobj_interface_init+0x34>)
   1997c:	7023      	strb	r3, [r4, #0]
   1997e:	6003      	str	r3, [r0, #0]
   19980:	700b      	strb	r3, [r1, #0]
   19982:	6013      	str	r3, [r2, #0]
   19984:	f004 fe2a 	bl	1e5dc <rpc_logobj_client_init>
   19988:	b918      	cbnz	r0, 19992 <logobj_interface_init+0x22>
   1998a:	2201      	movs	r2, #1
   1998c:	4b06      	ldr	r3, [pc, #24]	; (199a8 <logobj_interface_init+0x38>)
   1998e:	701a      	strb	r2, [r3, #0]
   19990:	bd10      	pop	{r4, pc}
   19992:	f04f 30ff 	mov.w	r0, #4294967295
   19996:	bd10      	pop	{r4, pc}
   19998:	200217cc 	.word	0x200217cc
   1999c:	20026271 	.word	0x20026271
   199a0:	20026270 	.word	0x20026270
   199a4:	200217c8 	.word	0x200217c8
   199a8:	20026272 	.word	0x20026272

000199ac <logobj_interface_open>:
   199ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   199b0:	2400      	movs	r4, #0
   199b2:	4b5b      	ldr	r3, [pc, #364]	; (19b20 <logobj_interface_open+0x174>)
   199b4:	b084      	sub	sp, #16
   199b6:	781b      	ldrb	r3, [r3, #0]
   199b8:	9401      	str	r4, [sp, #4]
   199ba:	2b00      	cmp	r3, #0
   199bc:	f000 809f 	beq.w	19afe <logobj_interface_open+0x152>
   199c0:	2866      	cmp	r0, #102	; 0x66
   199c2:	4680      	mov	r8, r0
   199c4:	f040 808f 	bne.w	19ae6 <logobj_interface_open+0x13a>
   199c8:	2902      	cmp	r1, #2
   199ca:	4689      	mov	r9, r1
   199cc:	f040 808b 	bne.w	19ae6 <logobj_interface_open+0x13a>
   199d0:	f240 2305 	movw	r3, #517	; 0x205
   199d4:	429a      	cmp	r2, r3
   199d6:	4692      	mov	sl, r2
   199d8:	f040 8085 	bne.w	19ae6 <logobj_interface_open+0x13a>
   199dc:	4f51      	ldr	r7, [pc, #324]	; (19b24 <logobj_interface_open+0x178>)
   199de:	683d      	ldr	r5, [r7, #0]
   199e0:	2d00      	cmp	r5, #0
   199e2:	f040 8086 	bne.w	19af2 <logobj_interface_open+0x146>
   199e6:	4a50      	ldr	r2, [pc, #320]	; (19b28 <logobj_interface_open+0x17c>)
   199e8:	a801      	add	r0, sp, #4
   199ea:	f008 f807 	bl	219fc <interface_socket_allocate>
   199ee:	9b01      	ldr	r3, [sp, #4]
   199f0:	4606      	mov	r6, r0
   199f2:	2b00      	cmp	r3, #0
   199f4:	f000 808d 	beq.w	19b12 <logobj_interface_open+0x166>
   199f8:	4629      	mov	r1, r5
   199fa:	2204      	movs	r2, #4
   199fc:	484b      	ldr	r0, [pc, #300]	; (19b2c <logobj_interface_open+0x180>)
   199fe:	603b      	str	r3, [r7, #0]
   19a00:	f00c fb3c 	bl	2607c <memset>
   19a04:	9c01      	ldr	r4, [sp, #4]
   19a06:	4629      	mov	r1, r5
   19a08:	e9c4 8903 	strd	r8, r9, [r4, #12]
   19a0c:	f8c4 a014 	str.w	sl, [r4, #20]
   19a10:	a802      	add	r0, sp, #8
   19a12:	f004 fde9 	bl	1e5e8 <rpc_logobj_client_request_alloc>
   19a16:	2800      	cmp	r0, #0
   19a18:	d142      	bne.n	19aa0 <logobj_interface_open+0xf4>
   19a1a:	2201      	movs	r2, #1
   19a1c:	2104      	movs	r1, #4
   19a1e:	9b02      	ldr	r3, [sp, #8]
   19a20:	4d43      	ldr	r5, [pc, #268]	; (19b30 <logobj_interface_open+0x184>)
   19a22:	7358      	strb	r0, [r3, #13]
   19a24:	7398      	strb	r0, [r3, #14]
   19a26:	73d8      	strb	r0, [r3, #15]
   19a28:	7258      	strb	r0, [r3, #9]
   19a2a:	7298      	strb	r0, [r3, #10]
   19a2c:	72d8      	strb	r0, [r3, #11]
   19a2e:	7219      	strb	r1, [r3, #8]
   19a30:	702a      	strb	r2, [r5, #0]
   19a32:	731a      	strb	r2, [r3, #12]
   19a34:	6822      	ldr	r2, [r4, #0]
   19a36:	4618      	mov	r0, r3
   19a38:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   19a3c:	6022      	str	r2, [r4, #0]
   19a3e:	f247 0101 	movw	r1, #28673	; 0x7001
   19a42:	f004 fde9 	bl	1e618 <rpc_logobj_client_request_send>
   19a46:	bb68      	cbnz	r0, 19aa4 <logobj_interface_open+0xf8>
   19a48:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19a4a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   19a4e:	2900      	cmp	r1, #0
   19a50:	bf08      	it	eq
   19a52:	f04f 31ff 	moveq.w	r1, #4294967295
   19a56:	ab04      	add	r3, sp, #16
   19a58:	f843 1d04 	str.w	r1, [r3, #-4]!
   19a5c:	4630      	mov	r0, r6
   19a5e:	4611      	mov	r1, r2
   19a60:	f008 f87e 	bl	21b60 <interface_socket_wait>
   19a64:	4604      	mov	r4, r0
   19a66:	b310      	cbz	r0, 19aae <logobj_interface_open+0x102>
   19a68:	9a01      	ldr	r2, [sp, #4]
   19a6a:	2e00      	cmp	r6, #0
   19a6c:	6813      	ldr	r3, [r2, #0]
   19a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19a72:	6013      	str	r3, [r2, #0]
   19a74:	9a01      	ldr	r2, [sp, #4]
   19a76:	6813      	ldr	r3, [r2, #0]
   19a78:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19a7c:	6013      	str	r3, [r2, #0]
   19a7e:	9a01      	ldr	r2, [sp, #4]
   19a80:	6813      	ldr	r3, [r2, #0]
   19a82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   19a86:	6013      	str	r3, [r2, #0]
   19a88:	da3f      	bge.n	19b0a <logobj_interface_open+0x15e>
   19a8a:	2300      	movs	r3, #0
   19a8c:	4620      	mov	r0, r4
   19a8e:	603b      	str	r3, [r7, #0]
   19a90:	f04f 36ff 	mov.w	r6, #4294967295
   19a94:	f7fd f894 	bl	16bc0 <bsd_os_errno_set>
   19a98:	4630      	mov	r0, r6
   19a9a:	b004      	add	sp, #16
   19a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19aa0:	240c      	movs	r4, #12
   19aa2:	e7e1      	b.n	19a68 <logobj_interface_open+0xbc>
   19aa4:	9802      	ldr	r0, [sp, #8]
   19aa6:	f004 fdcd 	bl	1e644 <rpc_logobj_client_message_free>
   19aaa:	2405      	movs	r4, #5
   19aac:	e7dc      	b.n	19a68 <logobj_interface_open+0xbc>
   19aae:	4630      	mov	r0, r6
   19ab0:	f008 f8ca 	bl	21c48 <interface_socket_from_handle_get>
   19ab4:	b120      	cbz	r0, 19ac0 <logobj_interface_open+0x114>
   19ab6:	6844      	ldr	r4, [r0, #4]
   19ab8:	b114      	cbz	r4, 19ac0 <logobj_interface_open+0x114>
   19aba:	2300      	movs	r3, #0
   19abc:	6043      	str	r3, [r0, #4]
   19abe:	e7d3      	b.n	19a68 <logobj_interface_open+0xbc>
   19ac0:	4630      	mov	r0, r6
   19ac2:	9a01      	ldr	r2, [sp, #4]
   19ac4:	6813      	ldr	r3, [r2, #0]
   19ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19aca:	6013      	str	r3, [r2, #0]
   19acc:	9a01      	ldr	r2, [sp, #4]
   19ace:	6813      	ldr	r3, [r2, #0]
   19ad0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19ad4:	6013      	str	r3, [r2, #0]
   19ad6:	9a01      	ldr	r2, [sp, #4]
   19ad8:	6813      	ldr	r3, [r2, #0]
   19ada:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   19ade:	6013      	str	r3, [r2, #0]
   19ae0:	b004      	add	sp, #16
   19ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19ae6:	2016      	movs	r0, #22
   19ae8:	f7fd f86a 	bl	16bc0 <bsd_os_errno_set>
   19aec:	f04f 36ff 	mov.w	r6, #4294967295
   19af0:	e7d2      	b.n	19a98 <logobj_interface_open+0xec>
   19af2:	2001      	movs	r0, #1
   19af4:	f7fd f864 	bl	16bc0 <bsd_os_errno_set>
   19af8:	f04f 36ff 	mov.w	r6, #4294967295
   19afc:	e7cc      	b.n	19a98 <logobj_interface_open+0xec>
   19afe:	2070      	movs	r0, #112	; 0x70
   19b00:	f7fd f85e 	bl	16bc0 <bsd_os_errno_set>
   19b04:	f04f 36ff 	mov.w	r6, #4294967295
   19b08:	e7c6      	b.n	19a98 <logobj_interface_open+0xec>
   19b0a:	4630      	mov	r0, r6
   19b0c:	f007 ffda 	bl	21ac4 <interface_socket_free>
   19b10:	e7bb      	b.n	19a8a <logobj_interface_open+0xde>
   19b12:	2018      	movs	r0, #24
   19b14:	f7fd f854 	bl	16bc0 <bsd_os_errno_set>
   19b18:	f04f 36ff 	mov.w	r6, #4294967295
   19b1c:	e7bc      	b.n	19a98 <logobj_interface_open+0xec>
   19b1e:	bf00      	nop
   19b20:	20026272 	.word	0x20026272
   19b24:	200217cc 	.word	0x200217cc
   19b28:	0001985d 	.word	0x0001985d
   19b2c:	200217c8 	.word	0x200217c8
   19b30:	20026270 	.word	0x20026270

00019b34 <logobj_interface_read>:
   19b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19b38:	b087      	sub	sp, #28
   19b3a:	2900      	cmp	r1, #0
   19b3c:	d06b      	beq.n	19c16 <logobj_interface_read+0xe2>
   19b3e:	2a00      	cmp	r2, #0
   19b40:	4617      	mov	r7, r2
   19b42:	dd68      	ble.n	19c16 <logobj_interface_read+0xe2>
   19b44:	461d      	mov	r5, r3
   19b46:	4680      	mov	r8, r0
   19b48:	460e      	mov	r6, r1
   19b4a:	f008 f87d 	bl	21c48 <interface_socket_from_handle_get>
   19b4e:	4604      	mov	r4, r0
   19b50:	2800      	cmp	r0, #0
   19b52:	d066      	beq.n	19c22 <logobj_interface_read+0xee>
   19b54:	bb4d      	cbnz	r5, 19baa <logobj_interface_read+0x76>
   19b56:	69e0      	ldr	r0, [r4, #28]
   19b58:	07aa      	lsls	r2, r5, #30
   19b5a:	6803      	ldr	r3, [r0, #0]
   19b5c:	68db      	ldr	r3, [r3, #12]
   19b5e:	d52d      	bpl.n	19bbc <logobj_interface_read+0x88>
   19b60:	4798      	blx	r3
   19b62:	3001      	adds	r0, #1
   19b64:	d047      	beq.n	19bf6 <logobj_interface_read+0xc2>
   19b66:	6823      	ldr	r3, [r4, #0]
   19b68:	69e0      	ldr	r0, [r4, #28]
   19b6a:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   19b6e:	d044      	beq.n	19bfa <logobj_interface_read+0xc6>
   19b70:	2100      	movs	r1, #0
   19b72:	6823      	ldr	r3, [r4, #0]
   19b74:	462a      	mov	r2, r5
   19b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   19b7a:	6023      	str	r3, [r4, #0]
   19b7c:	e9cd 1104 	strd	r1, r1, [sp, #16]
   19b80:	e9cd 6702 	strd	r6, r7, [sp, #8]
   19b84:	6803      	ldr	r3, [r0, #0]
   19b86:	a902      	add	r1, sp, #8
   19b88:	689b      	ldr	r3, [r3, #8]
   19b8a:	4798      	blx	r3
   19b8c:	4605      	mov	r5, r0
   19b8e:	69e0      	ldr	r0, [r4, #28]
   19b90:	6803      	ldr	r3, [r0, #0]
   19b92:	68db      	ldr	r3, [r3, #12]
   19b94:	4798      	blx	r3
   19b96:	3001      	adds	r0, #1
   19b98:	d003      	beq.n	19ba2 <logobj_interface_read+0x6e>
   19b9a:	6823      	ldr	r3, [r4, #0]
   19b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19ba0:	6023      	str	r3, [r4, #0]
   19ba2:	4628      	mov	r0, r5
   19ba4:	b007      	add	sp, #28
   19ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19baa:	f015 0f2a 	tst.w	r5, #42	; 0x2a
   19bae:	d1d2      	bne.n	19b56 <logobj_interface_read+0x22>
   19bb0:	202d      	movs	r0, #45	; 0x2d
   19bb2:	f7fd f805 	bl	16bc0 <bsd_os_errno_set>
   19bb6:	f04f 35ff 	mov.w	r5, #4294967295
   19bba:	e7f2      	b.n	19ba2 <logobj_interface_read+0x6e>
   19bbc:	6822      	ldr	r2, [r4, #0]
   19bbe:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   19bc2:	d1cd      	bne.n	19b60 <logobj_interface_read+0x2c>
   19bc4:	4798      	blx	r3
   19bc6:	1c43      	adds	r3, r0, #1
   19bc8:	d1cd      	bne.n	19b66 <logobj_interface_read+0x32>
   19bca:	6a22      	ldr	r2, [r4, #32]
   19bcc:	ab06      	add	r3, sp, #24
   19bce:	2a00      	cmp	r2, #0
   19bd0:	bf18      	it	ne
   19bd2:	4610      	movne	r0, r2
   19bd4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19bd8:	f843 0d14 	str.w	r0, [r3, #-20]!
   19bdc:	4611      	mov	r1, r2
   19bde:	4640      	mov	r0, r8
   19be0:	f007 ffbe 	bl	21b60 <interface_socket_wait>
   19be4:	b158      	cbz	r0, 19bfe <logobj_interface_read+0xca>
   19be6:	f04f 35ff 	mov.w	r5, #4294967295
   19bea:	f7fc ffe9 	bl	16bc0 <bsd_os_errno_set>
   19bee:	4628      	mov	r0, r5
   19bf0:	b007      	add	sp, #28
   19bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19bf6:	2023      	movs	r0, #35	; 0x23
   19bf8:	e7f5      	b.n	19be6 <logobj_interface_read+0xb2>
   19bfa:	461d      	mov	r5, r3
   19bfc:	e7c8      	b.n	19b90 <logobj_interface_read+0x5c>
   19bfe:	4640      	mov	r0, r8
   19c00:	f008 f822 	bl	21c48 <interface_socket_from_handle_get>
   19c04:	4603      	mov	r3, r0
   19c06:	2800      	cmp	r0, #0
   19c08:	d0ad      	beq.n	19b66 <logobj_interface_read+0x32>
   19c0a:	6840      	ldr	r0, [r0, #4]
   19c0c:	2800      	cmp	r0, #0
   19c0e:	d0aa      	beq.n	19b66 <logobj_interface_read+0x32>
   19c10:	f8c3 9004 	str.w	r9, [r3, #4]
   19c14:	e7e7      	b.n	19be6 <logobj_interface_read+0xb2>
   19c16:	2016      	movs	r0, #22
   19c18:	f7fc ffd2 	bl	16bc0 <bsd_os_errno_set>
   19c1c:	f04f 35ff 	mov.w	r5, #4294967295
   19c20:	e7bf      	b.n	19ba2 <logobj_interface_read+0x6e>
   19c22:	2009      	movs	r0, #9
   19c24:	f7fc ffcc 	bl	16bc0 <bsd_os_errno_set>
   19c28:	f04f 35ff 	mov.w	r5, #4294967295
   19c2c:	e7b9      	b.n	19ba2 <logobj_interface_read+0x6e>
   19c2e:	bf00      	nop

00019c30 <logobj_interface_write>:
   19c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c34:	b082      	sub	sp, #8
   19c36:	2900      	cmp	r1, #0
   19c38:	d06b      	beq.n	19d12 <logobj_interface_write+0xe2>
   19c3a:	2a04      	cmp	r2, #4
   19c3c:	d169      	bne.n	19d12 <logobj_interface_write+0xe2>
   19c3e:	461f      	mov	r7, r3
   19c40:	4606      	mov	r6, r0
   19c42:	460d      	mov	r5, r1
   19c44:	f008 f800 	bl	21c48 <interface_socket_from_handle_get>
   19c48:	4604      	mov	r4, r0
   19c4a:	2800      	cmp	r0, #0
   19c4c:	d074      	beq.n	19d38 <logobj_interface_write+0x108>
   19c4e:	b1e7      	cbz	r7, 19c8a <logobj_interface_write+0x5a>
   19c50:	07b8      	lsls	r0, r7, #30
   19c52:	d56b      	bpl.n	19d2c <logobj_interface_write+0xfc>
   19c54:	6823      	ldr	r3, [r4, #0]
   19c56:	039b      	lsls	r3, r3, #14
   19c58:	d564      	bpl.n	19d24 <logobj_interface_write+0xf4>
   19c5a:	2700      	movs	r7, #0
   19c5c:	6823      	ldr	r3, [r4, #0]
   19c5e:	2100      	movs	r1, #0
   19c60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   19c64:	6023      	str	r3, [r4, #0]
   19c66:	4668      	mov	r0, sp
   19c68:	f8d5 8000 	ldr.w	r8, [r5]
   19c6c:	f004 fcbc 	bl	1e5e8 <rpc_logobj_client_request_alloc>
   19c70:	b198      	cbz	r0, 19c9a <logobj_interface_write+0x6a>
   19c72:	200c      	movs	r0, #12
   19c74:	6823      	ldr	r3, [r4, #0]
   19c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19c7a:	6023      	str	r3, [r4, #0]
   19c7c:	f7fc ffa0 	bl	16bc0 <bsd_os_errno_set>
   19c80:	f04f 30ff 	mov.w	r0, #4294967295
   19c84:	b002      	add	sp, #8
   19c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19c8a:	6803      	ldr	r3, [r0, #0]
   19c8c:	00d9      	lsls	r1, r3, #3
   19c8e:	d4e1      	bmi.n	19c54 <logobj_interface_write+0x24>
   19c90:	6803      	ldr	r3, [r0, #0]
   19c92:	039a      	lsls	r2, r3, #14
   19c94:	d548      	bpl.n	19d28 <logobj_interface_write+0xf8>
   19c96:	2701      	movs	r7, #1
   19c98:	e7e0      	b.n	19c5c <logobj_interface_write+0x2c>
   19c9a:	2504      	movs	r5, #4
   19c9c:	9b00      	ldr	r3, [sp, #0]
   19c9e:	f247 0103 	movw	r1, #28675	; 0x7003
   19ca2:	f8c3 800c 	str.w	r8, [r3, #12]
   19ca6:	7258      	strb	r0, [r3, #9]
   19ca8:	7298      	strb	r0, [r3, #10]
   19caa:	72d8      	strb	r0, [r3, #11]
   19cac:	721d      	strb	r5, [r3, #8]
   19cae:	4618      	mov	r0, r3
   19cb0:	f004 fcb2 	bl	1e618 <rpc_logobj_client_request_send>
   19cb4:	4680      	mov	r8, r0
   19cb6:	bb18      	cbnz	r0, 19d00 <logobj_interface_write+0xd0>
   19cb8:	b1d7      	cbz	r7, 19cf0 <logobj_interface_write+0xc0>
   19cba:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19cbc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19cc0:	2900      	cmp	r1, #0
   19cc2:	bf08      	it	eq
   19cc4:	f04f 31ff 	moveq.w	r1, #4294967295
   19cc8:	ab02      	add	r3, sp, #8
   19cca:	f843 1d04 	str.w	r1, [r3, #-4]!
   19cce:	4630      	mov	r0, r6
   19cd0:	4611      	mov	r1, r2
   19cd2:	f007 ff45 	bl	21b60 <interface_socket_wait>
   19cd6:	b120      	cbz	r0, 19ce2 <logobj_interface_write+0xb2>
   19cd8:	6823      	ldr	r3, [r4, #0]
   19cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19cde:	6023      	str	r3, [r4, #0]
   19ce0:	e7cc      	b.n	19c7c <logobj_interface_write+0x4c>
   19ce2:	4630      	mov	r0, r6
   19ce4:	f007 ffb0 	bl	21c48 <interface_socket_from_handle_get>
   19ce8:	4603      	mov	r3, r0
   19cea:	b108      	cbz	r0, 19cf0 <logobj_interface_write+0xc0>
   19cec:	6840      	ldr	r0, [r0, #4]
   19cee:	b9b0      	cbnz	r0, 19d1e <logobj_interface_write+0xee>
   19cf0:	4628      	mov	r0, r5
   19cf2:	6823      	ldr	r3, [r4, #0]
   19cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19cf8:	6023      	str	r3, [r4, #0]
   19cfa:	b002      	add	sp, #8
   19cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19d00:	9800      	ldr	r0, [sp, #0]
   19d02:	f004 fc9f 	bl	1e644 <rpc_logobj_client_message_free>
   19d06:	6823      	ldr	r3, [r4, #0]
   19d08:	2005      	movs	r0, #5
   19d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19d0e:	6023      	str	r3, [r4, #0]
   19d10:	e7b4      	b.n	19c7c <logobj_interface_write+0x4c>
   19d12:	2016      	movs	r0, #22
   19d14:	f7fc ff54 	bl	16bc0 <bsd_os_errno_set>
   19d18:	f04f 30ff 	mov.w	r0, #4294967295
   19d1c:	e7b2      	b.n	19c84 <logobj_interface_write+0x54>
   19d1e:	f8c3 8004 	str.w	r8, [r3, #4]
   19d22:	e7d9      	b.n	19cd8 <logobj_interface_write+0xa8>
   19d24:	2073      	movs	r0, #115	; 0x73
   19d26:	e7a9      	b.n	19c7c <logobj_interface_write+0x4c>
   19d28:	2009      	movs	r0, #9
   19d2a:	e7a7      	b.n	19c7c <logobj_interface_write+0x4c>
   19d2c:	202d      	movs	r0, #45	; 0x2d
   19d2e:	f7fc ff47 	bl	16bc0 <bsd_os_errno_set>
   19d32:	f04f 30ff 	mov.w	r0, #4294967295
   19d36:	e7a5      	b.n	19c84 <logobj_interface_write+0x54>
   19d38:	2009      	movs	r0, #9
   19d3a:	f7fc ff41 	bl	16bc0 <bsd_os_errno_set>
   19d3e:	f04f 30ff 	mov.w	r0, #4294967295
   19d42:	e79f      	b.n	19c84 <logobj_interface_write+0x54>

00019d44 <logobj_interface_setopt>:
   19d44:	b5f0      	push	{r4, r5, r6, r7, lr}
   19d46:	2901      	cmp	r1, #1
   19d48:	b085      	sub	sp, #20
   19d4a:	d06d      	beq.n	19e28 <logobj_interface_setopt+0xe4>
   19d4c:	461e      	mov	r6, r3
   19d4e:	f240 2305 	movw	r3, #517	; 0x205
   19d52:	4299      	cmp	r1, r3
   19d54:	f040 80a0 	bne.w	19e98 <logobj_interface_setopt+0x154>
   19d58:	4607      	mov	r7, r0
   19d5a:	4615      	mov	r5, r2
   19d5c:	f007 ff74 	bl	21c48 <interface_socket_from_handle_get>
   19d60:	4604      	mov	r4, r0
   19d62:	2800      	cmp	r0, #0
   19d64:	f000 80c3 	beq.w	19eee <logobj_interface_setopt+0x1aa>
   19d68:	2d01      	cmp	r5, #1
   19d6a:	d019      	beq.n	19da0 <logobj_interface_setopt+0x5c>
   19d6c:	2d02      	cmp	r5, #2
   19d6e:	d010      	beq.n	19d92 <logobj_interface_setopt+0x4e>
   19d70:	252a      	movs	r5, #42	; 0x2a
   19d72:	6803      	ldr	r3, [r0, #0]
   19d74:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19d78:	6023      	str	r3, [r4, #0]
   19d7a:	6823      	ldr	r3, [r4, #0]
   19d7c:	4628      	mov	r0, r5
   19d7e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   19d82:	6023      	str	r3, [r4, #0]
   19d84:	f7fc ff1c 	bl	16bc0 <bsd_os_errno_set>
   19d88:	f04f 35ff 	mov.w	r5, #4294967295
   19d8c:	4628      	mov	r0, r5
   19d8e:	b005      	add	sp, #20
   19d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19d92:	b116      	cbz	r6, 19d9a <logobj_interface_setopt+0x56>
   19d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19d96:	2b01      	cmp	r3, #1
   19d98:	d04e      	beq.n	19e38 <logobj_interface_setopt+0xf4>
   19d9a:	6823      	ldr	r3, [r4, #0]
   19d9c:	2516      	movs	r5, #22
   19d9e:	e7e9      	b.n	19d74 <logobj_interface_setopt+0x30>
   19da0:	2e00      	cmp	r6, #0
   19da2:	d0fa      	beq.n	19d9a <logobj_interface_setopt+0x56>
   19da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19da6:	2b04      	cmp	r3, #4
   19da8:	d1f7      	bne.n	19d9a <logobj_interface_setopt+0x56>
   19daa:	2100      	movs	r1, #0
   19dac:	a803      	add	r0, sp, #12
   19dae:	f004 fc1b 	bl	1e5e8 <rpc_logobj_client_request_alloc>
   19db2:	4605      	mov	r5, r0
   19db4:	2800      	cmp	r0, #0
   19db6:	d175      	bne.n	19ea4 <logobj_interface_setopt+0x160>
   19db8:	9803      	ldr	r0, [sp, #12]
   19dba:	2208      	movs	r2, #8
   19dbc:	4629      	mov	r1, r5
   19dbe:	300c      	adds	r0, #12
   19dc0:	f00c f95c 	bl	2607c <memset>
   19dc4:	9803      	ldr	r0, [sp, #12]
   19dc6:	4631      	mov	r1, r6
   19dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19dca:	300c      	adds	r0, #12
   19dcc:	f7f2 febe 	bl	cb4c <memcpy>
   19dd0:	2308      	movs	r3, #8
   19dd2:	9803      	ldr	r0, [sp, #12]
   19dd4:	f247 0102 	movw	r1, #28674	; 0x7002
   19dd8:	7203      	strb	r3, [r0, #8]
   19dda:	7245      	strb	r5, [r0, #9]
   19ddc:	7285      	strb	r5, [r0, #10]
   19dde:	72c5      	strb	r5, [r0, #11]
   19de0:	6823      	ldr	r3, [r4, #0]
   19de2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   19de6:	6023      	str	r3, [r4, #0]
   19de8:	f004 fc16 	bl	1e618 <rpc_logobj_client_request_send>
   19dec:	2800      	cmp	r0, #0
   19dee:	d178      	bne.n	19ee2 <logobj_interface_setopt+0x19e>
   19df0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19df2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   19df6:	2900      	cmp	r1, #0
   19df8:	bf08      	it	eq
   19dfa:	f04f 31ff 	moveq.w	r1, #4294967295
   19dfe:	ab04      	add	r3, sp, #16
   19e00:	f843 1d08 	str.w	r1, [r3, #-8]!
   19e04:	4638      	mov	r0, r7
   19e06:	4611      	mov	r1, r2
   19e08:	f007 feaa 	bl	21b60 <interface_socket_wait>
   19e0c:	4605      	mov	r5, r0
   19e0e:	2800      	cmp	r0, #0
   19e10:	d140      	bne.n	19e94 <logobj_interface_setopt+0x150>
   19e12:	4638      	mov	r0, r7
   19e14:	f007 ff18 	bl	21c48 <interface_socket_from_handle_get>
   19e18:	2800      	cmp	r0, #0
   19e1a:	d04e      	beq.n	19eba <logobj_interface_setopt+0x176>
   19e1c:	6843      	ldr	r3, [r0, #4]
   19e1e:	2b00      	cmp	r3, #0
   19e20:	d04b      	beq.n	19eba <logobj_interface_setopt+0x176>
   19e22:	6045      	str	r5, [r0, #4]
   19e24:	461d      	mov	r5, r3
   19e26:	e035      	b.n	19e94 <logobj_interface_setopt+0x150>
   19e28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   19e2a:	9400      	str	r4, [sp, #0]
   19e2c:	f007 ff34 	bl	21c98 <interface_socket_setopt>
   19e30:	4605      	mov	r5, r0
   19e32:	4628      	mov	r0, r5
   19e34:	b005      	add	sp, #20
   19e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e38:	2100      	movs	r1, #0
   19e3a:	a802      	add	r0, sp, #8
   19e3c:	7835      	ldrb	r5, [r6, #0]
   19e3e:	f004 fbd3 	bl	1e5e8 <rpc_logobj_client_request_alloc>
   19e42:	bb78      	cbnz	r0, 19ea4 <logobj_interface_setopt+0x160>
   19e44:	2d01      	cmp	r5, #1
   19e46:	bf08      	it	eq
   19e48:	4b2c      	ldreq	r3, [pc, #176]	; (19efc <logobj_interface_setopt+0x1b8>)
   19e4a:	f04f 0204 	mov.w	r2, #4
   19e4e:	bf08      	it	eq
   19e50:	701d      	strbeq	r5, [r3, #0]
   19e52:	2300      	movs	r3, #0
   19e54:	9802      	ldr	r0, [sp, #8]
   19e56:	f247 0101 	movw	r1, #28673	; 0x7001
   19e5a:	7243      	strb	r3, [r0, #9]
   19e5c:	60c5      	str	r5, [r0, #12]
   19e5e:	7283      	strb	r3, [r0, #10]
   19e60:	72c3      	strb	r3, [r0, #11]
   19e62:	7202      	strb	r2, [r0, #8]
   19e64:	6823      	ldr	r3, [r4, #0]
   19e66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   19e6a:	6023      	str	r3, [r4, #0]
   19e6c:	f004 fbd4 	bl	1e618 <rpc_logobj_client_request_send>
   19e70:	4606      	mov	r6, r0
   19e72:	bb80      	cbnz	r0, 19ed6 <logobj_interface_setopt+0x192>
   19e74:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19e76:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   19e7a:	2900      	cmp	r1, #0
   19e7c:	bf08      	it	eq
   19e7e:	f04f 31ff 	moveq.w	r1, #4294967295
   19e82:	ab04      	add	r3, sp, #16
   19e84:	f843 1d04 	str.w	r1, [r3, #-4]!
   19e88:	4638      	mov	r0, r7
   19e8a:	4611      	mov	r1, r2
   19e8c:	f007 fe68 	bl	21b60 <interface_socket_wait>
   19e90:	4605      	mov	r5, r0
   19e92:	b150      	cbz	r0, 19eaa <logobj_interface_setopt+0x166>
   19e94:	6823      	ldr	r3, [r4, #0]
   19e96:	e76d      	b.n	19d74 <logobj_interface_setopt+0x30>
   19e98:	202a      	movs	r0, #42	; 0x2a
   19e9a:	f7fc fe91 	bl	16bc0 <bsd_os_errno_set>
   19e9e:	f04f 35ff 	mov.w	r5, #4294967295
   19ea2:	e773      	b.n	19d8c <logobj_interface_setopt+0x48>
   19ea4:	6823      	ldr	r3, [r4, #0]
   19ea6:	250c      	movs	r5, #12
   19ea8:	e764      	b.n	19d74 <logobj_interface_setopt+0x30>
   19eaa:	4638      	mov	r0, r7
   19eac:	f007 fecc 	bl	21c48 <interface_socket_from_handle_get>
   19eb0:	b140      	cbz	r0, 19ec4 <logobj_interface_setopt+0x180>
   19eb2:	6845      	ldr	r5, [r0, #4]
   19eb4:	b135      	cbz	r5, 19ec4 <logobj_interface_setopt+0x180>
   19eb6:	6046      	str	r6, [r0, #4]
   19eb8:	e7ec      	b.n	19e94 <logobj_interface_setopt+0x150>
   19eba:	4631      	mov	r1, r6
   19ebc:	2204      	movs	r2, #4
   19ebe:	4810      	ldr	r0, [pc, #64]	; (19f00 <logobj_interface_setopt+0x1bc>)
   19ec0:	f7f2 fe44 	bl	cb4c <memcpy>
   19ec4:	6823      	ldr	r3, [r4, #0]
   19ec6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19eca:	6023      	str	r3, [r4, #0]
   19ecc:	6823      	ldr	r3, [r4, #0]
   19ece:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   19ed2:	6023      	str	r3, [r4, #0]
   19ed4:	e75a      	b.n	19d8c <logobj_interface_setopt+0x48>
   19ed6:	9802      	ldr	r0, [sp, #8]
   19ed8:	f004 fbb4 	bl	1e644 <rpc_logobj_client_message_free>
   19edc:	2505      	movs	r5, #5
   19ede:	6823      	ldr	r3, [r4, #0]
   19ee0:	e748      	b.n	19d74 <logobj_interface_setopt+0x30>
   19ee2:	9803      	ldr	r0, [sp, #12]
   19ee4:	f004 fbae 	bl	1e644 <rpc_logobj_client_message_free>
   19ee8:	2505      	movs	r5, #5
   19eea:	6823      	ldr	r3, [r4, #0]
   19eec:	e742      	b.n	19d74 <logobj_interface_setopt+0x30>
   19eee:	2009      	movs	r0, #9
   19ef0:	f7fc fe66 	bl	16bc0 <bsd_os_errno_set>
   19ef4:	f04f 35ff 	mov.w	r5, #4294967295
   19ef8:	e748      	b.n	19d8c <logobj_interface_setopt+0x48>
   19efa:	bf00      	nop
   19efc:	20026270 	.word	0x20026270
   19f00:	200217c8 	.word	0x200217c8

00019f04 <logobj_interface_getopt>:
   19f04:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f06:	2901      	cmp	r1, #1
   19f08:	b083      	sub	sp, #12
   19f0a:	9e08      	ldr	r6, [sp, #32]
   19f0c:	d030      	beq.n	19f70 <logobj_interface_getopt+0x6c>
   19f0e:	461f      	mov	r7, r3
   19f10:	f240 2305 	movw	r3, #517	; 0x205
   19f14:	4299      	cmp	r1, r3
   19f16:	d134      	bne.n	19f82 <logobj_interface_getopt+0x7e>
   19f18:	4615      	mov	r5, r2
   19f1a:	f007 fe95 	bl	21c48 <interface_socket_from_handle_get>
   19f1e:	2800      	cmp	r0, #0
   19f20:	d037      	beq.n	19f92 <logobj_interface_getopt+0x8e>
   19f22:	2d01      	cmp	r5, #1
   19f24:	d015      	beq.n	19f52 <logobj_interface_getopt+0x4e>
   19f26:	2d02      	cmp	r5, #2
   19f28:	d10b      	bne.n	19f42 <logobj_interface_getopt+0x3e>
   19f2a:	b387      	cbz	r7, 19f8e <logobj_interface_getopt+0x8a>
   19f2c:	6833      	ldr	r3, [r6, #0]
   19f2e:	b373      	cbz	r3, 19f8e <logobj_interface_getopt+0x8a>
   19f30:	2300      	movs	r3, #0
   19f32:	2201      	movs	r2, #1
   19f34:	4618      	mov	r0, r3
   19f36:	491a      	ldr	r1, [pc, #104]	; (19fa0 <logobj_interface_getopt+0x9c>)
   19f38:	7809      	ldrb	r1, [r1, #0]
   19f3a:	7039      	strb	r1, [r7, #0]
   19f3c:	6032      	str	r2, [r6, #0]
   19f3e:	b003      	add	sp, #12
   19f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f42:	2009      	movs	r0, #9
   19f44:	f7fc fe3c 	bl	16bc0 <bsd_os_errno_set>
   19f48:	f04f 33ff 	mov.w	r3, #4294967295
   19f4c:	4618      	mov	r0, r3
   19f4e:	b003      	add	sp, #12
   19f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f52:	b1e7      	cbz	r7, 19f8e <logobj_interface_getopt+0x8a>
   19f54:	6833      	ldr	r3, [r6, #0]
   19f56:	2b03      	cmp	r3, #3
   19f58:	d919      	bls.n	19f8e <logobj_interface_getopt+0x8a>
   19f5a:	4638      	mov	r0, r7
   19f5c:	2204      	movs	r2, #4
   19f5e:	4911      	ldr	r1, [pc, #68]	; (19fa4 <logobj_interface_getopt+0xa0>)
   19f60:	f7f2 fdf4 	bl	cb4c <memcpy>
   19f64:	2300      	movs	r3, #0
   19f66:	2204      	movs	r2, #4
   19f68:	4618      	mov	r0, r3
   19f6a:	6032      	str	r2, [r6, #0]
   19f6c:	b003      	add	sp, #12
   19f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f70:	9600      	str	r6, [sp, #0]
   19f72:	f007 fed7 	bl	21d24 <interface_socket_getopt>
   19f76:	4603      	mov	r3, r0
   19f78:	2800      	cmp	r0, #0
   19f7a:	d1e3      	bne.n	19f44 <logobj_interface_getopt+0x40>
   19f7c:	4618      	mov	r0, r3
   19f7e:	b003      	add	sp, #12
   19f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f82:	202a      	movs	r0, #42	; 0x2a
   19f84:	f7fc fe1c 	bl	16bc0 <bsd_os_errno_set>
   19f88:	f04f 33ff 	mov.w	r3, #4294967295
   19f8c:	e7de      	b.n	19f4c <logobj_interface_getopt+0x48>
   19f8e:	2016      	movs	r0, #22
   19f90:	e7d8      	b.n	19f44 <logobj_interface_getopt+0x40>
   19f92:	2009      	movs	r0, #9
   19f94:	f7fc fe14 	bl	16bc0 <bsd_os_errno_set>
   19f98:	f04f 33ff 	mov.w	r3, #4294967295
   19f9c:	e7d6      	b.n	19f4c <logobj_interface_getopt+0x48>
   19f9e:	bf00      	nop
   19fa0:	20026271 	.word	0x20026271
   19fa4:	200217c8 	.word	0x200217c8

00019fa8 <logobj_interface_close>:
   19fa8:	b510      	push	{r4, lr}
   19faa:	4604      	mov	r4, r0
   19fac:	f007 fe4c 	bl	21c48 <interface_socket_from_handle_get>
   19fb0:	b138      	cbz	r0, 19fc2 <logobj_interface_close+0x1a>
   19fb2:	4620      	mov	r0, r4
   19fb4:	f007 fd86 	bl	21ac4 <interface_socket_free>
   19fb8:	2300      	movs	r3, #0
   19fba:	4a05      	ldr	r2, [pc, #20]	; (19fd0 <logobj_interface_close+0x28>)
   19fbc:	4618      	mov	r0, r3
   19fbe:	6013      	str	r3, [r2, #0]
   19fc0:	bd10      	pop	{r4, pc}
   19fc2:	2009      	movs	r0, #9
   19fc4:	f7fc fdfc 	bl	16bc0 <bsd_os_errno_set>
   19fc8:	f04f 30ff 	mov.w	r0, #4294967295
   19fcc:	bd10      	pop	{r4, pc}
   19fce:	bf00      	nop
   19fd0:	200217cc 	.word	0x200217cc

00019fd4 <rpc_transport_send>:
   19fd4:	f000 bed8 	b.w	1ad88 <rpc_transport_ipc_send>

00019fd8 <rpc_transport_rpc_alloc>:
   19fd8:	f000 bf58 	b.w	1ae8c <rpc_transport_ipc_tx_rpc_data_alloc>

00019fdc <rpc_transport_data_alloc>:
   19fdc:	f000 bfbe 	b.w	1af5c <rpc_transport_ipc_tx_data_alloc>

00019fe0 <rpc_transport_rpc_free>:
   19fe0:	f000 bdb6 	b.w	1ab50 <rpc_transport_ipc_msg_free>

00019fe4 <rpc_transport_data_free>:
   19fe4:	f000 ba64 	b.w	1a4b0 <rpc_transport_ipc_data_free>

00019fe8 <ipc_trace_init>:
   19fe8:	4b01      	ldr	r3, [pc, #4]	; (19ff0 <ipc_trace_init+0x8>)
   19fea:	6018      	str	r0, [r3, #0]
   19fec:	4770      	bx	lr
   19fee:	bf00      	nop
   19ff0:	200217dc 	.word	0x200217dc

00019ff4 <bsd_os_trace_irq_handler>:
   19ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
   19ff6:	4b6e      	ldr	r3, [pc, #440]	; (1a1b0 <bsd_os_trace_irq_handler+0x1bc>)
   19ff8:	b083      	sub	sp, #12
   19ffa:	781b      	ldrb	r3, [r3, #0]
   19ffc:	2b00      	cmp	r3, #0
   19ffe:	f000 80d3 	beq.w	1a1a8 <bsd_os_trace_irq_handler+0x1b4>
   1a002:	4b6c      	ldr	r3, [pc, #432]	; (1a1b4 <bsd_os_trace_irq_handler+0x1c0>)
   1a004:	681c      	ldr	r4, [r3, #0]
   1a006:	b124      	cbz	r4, 1a012 <bsd_os_trace_irq_handler+0x1e>
   1a008:	68a3      	ldr	r3, [r4, #8]
   1a00a:	6862      	ldr	r2, [r4, #4]
   1a00c:	4293      	cmp	r3, r2
   1a00e:	f040 808c 	bne.w	1a12a <bsd_os_trace_irq_handler+0x136>
   1a012:	4b69      	ldr	r3, [pc, #420]	; (1a1b8 <bsd_os_trace_irq_handler+0x1c4>)
   1a014:	681c      	ldr	r4, [r3, #0]
   1a016:	b11c      	cbz	r4, 1a020 <bsd_os_trace_irq_handler+0x2c>
   1a018:	68a3      	ldr	r3, [r4, #8]
   1a01a:	6862      	ldr	r2, [r4, #4]
   1a01c:	4293      	cmp	r3, r2
   1a01e:	d146      	bne.n	1a0ae <bsd_os_trace_irq_handler+0xba>
   1a020:	4b66      	ldr	r3, [pc, #408]	; (1a1bc <bsd_os_trace_irq_handler+0x1c8>)
   1a022:	681c      	ldr	r4, [r3, #0]
   1a024:	b11c      	cbz	r4, 1a02e <bsd_os_trace_irq_handler+0x3a>
   1a026:	68a3      	ldr	r3, [r4, #8]
   1a028:	6862      	ldr	r2, [r4, #4]
   1a02a:	4293      	cmp	r3, r2
   1a02c:	d101      	bne.n	1a032 <bsd_os_trace_irq_handler+0x3e>
   1a02e:	b003      	add	sp, #12
   1a030:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a032:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a036:	f8ad 2000 	strh.w	r2, [sp]
   1a03a:	7822      	ldrb	r2, [r4, #0]
   1a03c:	466e      	mov	r6, sp
   1a03e:	f88d 2004 	strb.w	r2, [sp, #4]
   1a042:	6862      	ldr	r2, [r4, #4]
   1a044:	2105      	movs	r1, #5
   1a046:	4293      	cmp	r3, r2
   1a048:	bf2a      	itet	cs
   1a04a:	6927      	ldrcs	r7, [r4, #16]
   1a04c:	1ad7      	subcc	r7, r2, r3
   1a04e:	1aff      	subcs	r7, r7, r3
   1a050:	4293      	cmp	r3, r2
   1a052:	bf94      	ite	ls
   1a054:	2500      	movls	r5, #0
   1a056:	68e5      	ldrhi	r5, [r4, #12]
   1a058:	b2bf      	uxth	r7, r7
   1a05a:	bf88      	it	hi
   1a05c:	1b52      	subhi	r2, r2, r5
   1a05e:	4630      	mov	r0, r6
   1a060:	bf88      	it	hi
   1a062:	b295      	uxthhi	r5, r2
   1a064:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a068:	f013 fde4 	bl	2dc34 <bsd_os_trace_put>
   1a06c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a070:	68a0      	ldr	r0, [r4, #8]
   1a072:	f013 fddf 	bl	2dc34 <bsd_os_trace_put>
   1a076:	68a3      	ldr	r3, [r4, #8]
   1a078:	6922      	ldr	r2, [r4, #16]
   1a07a:	441f      	add	r7, r3
   1a07c:	4297      	cmp	r7, r2
   1a07e:	bf08      	it	eq
   1a080:	68e3      	ldreq	r3, [r4, #12]
   1a082:	60a7      	str	r7, [r4, #8]
   1a084:	bf08      	it	eq
   1a086:	60a3      	streq	r3, [r4, #8]
   1a088:	2d00      	cmp	r5, #0
   1a08a:	d0d0      	beq.n	1a02e <bsd_os_trace_irq_handler+0x3a>
   1a08c:	2105      	movs	r1, #5
   1a08e:	4630      	mov	r0, r6
   1a090:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a094:	f013 fdce 	bl	2dc34 <bsd_os_trace_put>
   1a098:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a09c:	68e0      	ldr	r0, [r4, #12]
   1a09e:	f013 fdc9 	bl	2dc34 <bsd_os_trace_put>
   1a0a2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a0a6:	68e3      	ldr	r3, [r4, #12]
   1a0a8:	4413      	add	r3, r2
   1a0aa:	60a3      	str	r3, [r4, #8]
   1a0ac:	e7bf      	b.n	1a02e <bsd_os_trace_irq_handler+0x3a>
   1a0ae:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a0b2:	f8ad 2000 	strh.w	r2, [sp]
   1a0b6:	7822      	ldrb	r2, [r4, #0]
   1a0b8:	466e      	mov	r6, sp
   1a0ba:	f88d 2004 	strb.w	r2, [sp, #4]
   1a0be:	6862      	ldr	r2, [r4, #4]
   1a0c0:	2105      	movs	r1, #5
   1a0c2:	4293      	cmp	r3, r2
   1a0c4:	bf2a      	itet	cs
   1a0c6:	6927      	ldrcs	r7, [r4, #16]
   1a0c8:	1ad7      	subcc	r7, r2, r3
   1a0ca:	1aff      	subcs	r7, r7, r3
   1a0cc:	4293      	cmp	r3, r2
   1a0ce:	bf94      	ite	ls
   1a0d0:	2500      	movls	r5, #0
   1a0d2:	68e5      	ldrhi	r5, [r4, #12]
   1a0d4:	b2bf      	uxth	r7, r7
   1a0d6:	bf88      	it	hi
   1a0d8:	1b52      	subhi	r2, r2, r5
   1a0da:	4630      	mov	r0, r6
   1a0dc:	bf88      	it	hi
   1a0de:	b295      	uxthhi	r5, r2
   1a0e0:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a0e4:	f013 fda6 	bl	2dc34 <bsd_os_trace_put>
   1a0e8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a0ec:	68a0      	ldr	r0, [r4, #8]
   1a0ee:	f013 fda1 	bl	2dc34 <bsd_os_trace_put>
   1a0f2:	68a3      	ldr	r3, [r4, #8]
   1a0f4:	6922      	ldr	r2, [r4, #16]
   1a0f6:	441f      	add	r7, r3
   1a0f8:	4297      	cmp	r7, r2
   1a0fa:	bf08      	it	eq
   1a0fc:	68e3      	ldreq	r3, [r4, #12]
   1a0fe:	60a7      	str	r7, [r4, #8]
   1a100:	bf08      	it	eq
   1a102:	60a3      	streq	r3, [r4, #8]
   1a104:	2d00      	cmp	r5, #0
   1a106:	d08b      	beq.n	1a020 <bsd_os_trace_irq_handler+0x2c>
   1a108:	2105      	movs	r1, #5
   1a10a:	4630      	mov	r0, r6
   1a10c:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a110:	f013 fd90 	bl	2dc34 <bsd_os_trace_put>
   1a114:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a118:	68e0      	ldr	r0, [r4, #12]
   1a11a:	f013 fd8b 	bl	2dc34 <bsd_os_trace_put>
   1a11e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a122:	68e3      	ldr	r3, [r4, #12]
   1a124:	4413      	add	r3, r2
   1a126:	60a3      	str	r3, [r4, #8]
   1a128:	e77a      	b.n	1a020 <bsd_os_trace_irq_handler+0x2c>
   1a12a:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a12e:	f8ad 2000 	strh.w	r2, [sp]
   1a132:	7822      	ldrb	r2, [r4, #0]
   1a134:	466e      	mov	r6, sp
   1a136:	f88d 2004 	strb.w	r2, [sp, #4]
   1a13a:	6862      	ldr	r2, [r4, #4]
   1a13c:	2105      	movs	r1, #5
   1a13e:	4293      	cmp	r3, r2
   1a140:	bf2a      	itet	cs
   1a142:	6927      	ldrcs	r7, [r4, #16]
   1a144:	1ad7      	subcc	r7, r2, r3
   1a146:	1aff      	subcs	r7, r7, r3
   1a148:	4293      	cmp	r3, r2
   1a14a:	bf94      	ite	ls
   1a14c:	2500      	movls	r5, #0
   1a14e:	68e5      	ldrhi	r5, [r4, #12]
   1a150:	b2bf      	uxth	r7, r7
   1a152:	bf88      	it	hi
   1a154:	1b52      	subhi	r2, r2, r5
   1a156:	4630      	mov	r0, r6
   1a158:	bf88      	it	hi
   1a15a:	b295      	uxthhi	r5, r2
   1a15c:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a160:	f013 fd68 	bl	2dc34 <bsd_os_trace_put>
   1a164:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a168:	68a0      	ldr	r0, [r4, #8]
   1a16a:	f013 fd63 	bl	2dc34 <bsd_os_trace_put>
   1a16e:	68a3      	ldr	r3, [r4, #8]
   1a170:	6922      	ldr	r2, [r4, #16]
   1a172:	441f      	add	r7, r3
   1a174:	4297      	cmp	r7, r2
   1a176:	bf08      	it	eq
   1a178:	68e3      	ldreq	r3, [r4, #12]
   1a17a:	60a7      	str	r7, [r4, #8]
   1a17c:	bf08      	it	eq
   1a17e:	60a3      	streq	r3, [r4, #8]
   1a180:	2d00      	cmp	r5, #0
   1a182:	f43f af46 	beq.w	1a012 <bsd_os_trace_irq_handler+0x1e>
   1a186:	2105      	movs	r1, #5
   1a188:	4630      	mov	r0, r6
   1a18a:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a18e:	f013 fd51 	bl	2dc34 <bsd_os_trace_put>
   1a192:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a196:	68e0      	ldr	r0, [r4, #12]
   1a198:	f013 fd4c 	bl	2dc34 <bsd_os_trace_put>
   1a19c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a1a0:	68e3      	ldr	r3, [r4, #12]
   1a1a2:	4413      	add	r3, r2
   1a1a4:	60a3      	str	r3, [r4, #8]
   1a1a6:	e734      	b.n	1a012 <bsd_os_trace_irq_handler+0x1e>
   1a1a8:	f7fc feae 	bl	16f08 <bsd_os_trace_irq_clear>
   1a1ac:	e729      	b.n	1a002 <bsd_os_trace_irq_handler+0xe>
   1a1ae:	bf00      	nop
   1a1b0:	20026273 	.word	0x20026273
   1a1b4:	200217d8 	.word	0x200217d8
   1a1b8:	200217d0 	.word	0x200217d0
   1a1bc:	200217d4 	.word	0x200217d4

0001a1c0 <ipc_trace_handle>:
   1a1c0:	2200      	movs	r2, #0
   1a1c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1c6:	4bb2      	ldr	r3, [pc, #712]	; (1a490 <ipc_trace_handle+0x2d0>)
   1a1c8:	b083      	sub	sp, #12
   1a1ca:	681b      	ldr	r3, [r3, #0]
   1a1cc:	6919      	ldr	r1, [r3, #16]
   1a1ce:	695c      	ldr	r4, [r3, #20]
   1a1d0:	7c18      	ldrb	r0, [r3, #16]
   1a1d2:	741a      	strb	r2, [r3, #16]
   1a1d4:	7c58      	ldrb	r0, [r3, #17]
   1a1d6:	745a      	strb	r2, [r3, #17]
   1a1d8:	7c98      	ldrb	r0, [r3, #18]
   1a1da:	749a      	strb	r2, [r3, #18]
   1a1dc:	7cd8      	ldrb	r0, [r3, #19]
   1a1de:	74da      	strb	r2, [r3, #19]
   1a1e0:	7d18      	ldrb	r0, [r3, #20]
   1a1e2:	751a      	strb	r2, [r3, #20]
   1a1e4:	7d58      	ldrb	r0, [r3, #21]
   1a1e6:	755a      	strb	r2, [r3, #21]
   1a1e8:	7d98      	ldrb	r0, [r3, #22]
   1a1ea:	759a      	strb	r2, [r3, #22]
   1a1ec:	7dd8      	ldrb	r0, [r3, #23]
   1a1ee:	75da      	strb	r2, [r3, #23]
   1a1f0:	b1a9      	cbz	r1, 1a21e <ipc_trace_handle+0x5e>
   1a1f2:	3901      	subs	r1, #1
   1a1f4:	2903      	cmp	r1, #3
   1a1f6:	d812      	bhi.n	1a21e <ipc_trace_handle+0x5e>
   1a1f8:	e8df f001 	tbb	[pc, r1]
   1a1fc:	1402a97c 	.word	0x1402a97c
   1a200:	2501      	movs	r5, #1
   1a202:	2003      	movs	r0, #3
   1a204:	2200      	movs	r2, #0
   1a206:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1a20a:	4ca2      	ldr	r4, [pc, #648]	; (1a494 <ipc_trace_handle+0x2d4>)
   1a20c:	7025      	strb	r5, [r4, #0]
   1a20e:	7a1c      	ldrb	r4, [r3, #8]
   1a210:	7218      	strb	r0, [r3, #8]
   1a212:	7a58      	ldrb	r0, [r3, #9]
   1a214:	725a      	strb	r2, [r3, #9]
   1a216:	7a98      	ldrb	r0, [r3, #10]
   1a218:	729a      	strb	r2, [r3, #10]
   1a21a:	7ada      	ldrb	r2, [r3, #11]
   1a21c:	72d9      	strb	r1, [r3, #11]
   1a21e:	b003      	add	sp, #12
   1a220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a224:	2104      	movs	r1, #4
   1a226:	2200      	movs	r2, #0
   1a228:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   1a22c:	7a1c      	ldrb	r4, [r3, #8]
   1a22e:	7219      	strb	r1, [r3, #8]
   1a230:	7a59      	ldrb	r1, [r3, #9]
   1a232:	725a      	strb	r2, [r3, #9]
   1a234:	4997      	ldr	r1, [pc, #604]	; (1a494 <ipc_trace_handle+0x2d4>)
   1a236:	7a9c      	ldrb	r4, [r3, #10]
   1a238:	729a      	strb	r2, [r3, #10]
   1a23a:	7adc      	ldrb	r4, [r3, #11]
   1a23c:	72d8      	strb	r0, [r3, #11]
   1a23e:	700a      	strb	r2, [r1, #0]
   1a240:	780b      	ldrb	r3, [r1, #0]
   1a242:	2b00      	cmp	r3, #0
   1a244:	f000 809f 	beq.w	1a386 <ipc_trace_handle+0x1c6>
   1a248:	4b93      	ldr	r3, [pc, #588]	; (1a498 <ipc_trace_handle+0x2d8>)
   1a24a:	681c      	ldr	r4, [r3, #0]
   1a24c:	b124      	cbz	r4, 1a258 <ipc_trace_handle+0x98>
   1a24e:	68a3      	ldr	r3, [r4, #8]
   1a250:	6862      	ldr	r2, [r4, #4]
   1a252:	4293      	cmp	r3, r2
   1a254:	f040 80d9 	bne.w	1a40a <ipc_trace_handle+0x24a>
   1a258:	4b90      	ldr	r3, [pc, #576]	; (1a49c <ipc_trace_handle+0x2dc>)
   1a25a:	681c      	ldr	r4, [r3, #0]
   1a25c:	b124      	cbz	r4, 1a268 <ipc_trace_handle+0xa8>
   1a25e:	68a3      	ldr	r3, [r4, #8]
   1a260:	6862      	ldr	r2, [r4, #4]
   1a262:	4293      	cmp	r3, r2
   1a264:	f040 8092 	bne.w	1a38c <ipc_trace_handle+0x1cc>
   1a268:	4b8d      	ldr	r3, [pc, #564]	; (1a4a0 <ipc_trace_handle+0x2e0>)
   1a26a:	681c      	ldr	r4, [r3, #0]
   1a26c:	2c00      	cmp	r4, #0
   1a26e:	d0d6      	beq.n	1a21e <ipc_trace_handle+0x5e>
   1a270:	68a3      	ldr	r3, [r4, #8]
   1a272:	6862      	ldr	r2, [r4, #4]
   1a274:	4293      	cmp	r3, r2
   1a276:	d0d2      	beq.n	1a21e <ipc_trace_handle+0x5e>
   1a278:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a27c:	f8ad 2000 	strh.w	r2, [sp]
   1a280:	7822      	ldrb	r2, [r4, #0]
   1a282:	466e      	mov	r6, sp
   1a284:	f88d 2004 	strb.w	r2, [sp, #4]
   1a288:	6862      	ldr	r2, [r4, #4]
   1a28a:	2105      	movs	r1, #5
   1a28c:	4293      	cmp	r3, r2
   1a28e:	bf2a      	itet	cs
   1a290:	6927      	ldrcs	r7, [r4, #16]
   1a292:	1ad7      	subcc	r7, r2, r3
   1a294:	1aff      	subcs	r7, r7, r3
   1a296:	4293      	cmp	r3, r2
   1a298:	bf94      	ite	ls
   1a29a:	2500      	movls	r5, #0
   1a29c:	68e5      	ldrhi	r5, [r4, #12]
   1a29e:	b2bf      	uxth	r7, r7
   1a2a0:	bf88      	it	hi
   1a2a2:	1b52      	subhi	r2, r2, r5
   1a2a4:	4630      	mov	r0, r6
   1a2a6:	bf88      	it	hi
   1a2a8:	b295      	uxthhi	r5, r2
   1a2aa:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a2ae:	f013 fcc1 	bl	2dc34 <bsd_os_trace_put>
   1a2b2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a2b6:	68a0      	ldr	r0, [r4, #8]
   1a2b8:	f013 fcbc 	bl	2dc34 <bsd_os_trace_put>
   1a2bc:	68a3      	ldr	r3, [r4, #8]
   1a2be:	6922      	ldr	r2, [r4, #16]
   1a2c0:	441f      	add	r7, r3
   1a2c2:	4297      	cmp	r7, r2
   1a2c4:	bf08      	it	eq
   1a2c6:	68e3      	ldreq	r3, [r4, #12]
   1a2c8:	60a7      	str	r7, [r4, #8]
   1a2ca:	bf08      	it	eq
   1a2cc:	60a3      	streq	r3, [r4, #8]
   1a2ce:	2d00      	cmp	r5, #0
   1a2d0:	d0a5      	beq.n	1a21e <ipc_trace_handle+0x5e>
   1a2d2:	2105      	movs	r1, #5
   1a2d4:	4630      	mov	r0, r6
   1a2d6:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a2da:	f013 fcab 	bl	2dc34 <bsd_os_trace_put>
   1a2de:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a2e2:	68e0      	ldr	r0, [r4, #12]
   1a2e4:	f013 fca6 	bl	2dc34 <bsd_os_trace_put>
   1a2e8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a2ec:	68e3      	ldr	r3, [r4, #12]
   1a2ee:	4413      	add	r3, r2
   1a2f0:	60a3      	str	r3, [r4, #8]
   1a2f2:	e794      	b.n	1a21e <ipc_trace_handle+0x5e>
   1a2f4:	4a67      	ldr	r2, [pc, #412]	; (1a494 <ipc_trace_handle+0x2d4>)
   1a2f6:	7811      	ldrb	r1, [r2, #0]
   1a2f8:	b109      	cbz	r1, 1a2fe <ipc_trace_handle+0x13e>
   1a2fa:	2100      	movs	r1, #0
   1a2fc:	7011      	strb	r1, [r2, #0]
   1a2fe:	68a5      	ldr	r5, [r4, #8]
   1a300:	2d00      	cmp	r5, #0
   1a302:	d03b      	beq.n	1a37c <ipc_trace_handle+0x1bc>
   1a304:	f04f 0c00 	mov.w	ip, #0
   1a308:	f8df a190 	ldr.w	sl, [pc, #400]	; 1a49c <ipc_trace_handle+0x2dc>
   1a30c:	f8df b188 	ldr.w	fp, [pc, #392]	; 1a498 <ipc_trace_handle+0x2d8>
   1a310:	4963      	ldr	r1, [pc, #396]	; (1a4a0 <ipc_trace_handle+0x2e0>)
   1a312:	46e1      	mov	r9, ip
   1a314:	4666      	mov	r6, ip
   1a316:	4662      	mov	r2, ip
   1a318:	f8d1 e000 	ldr.w	lr, [r1]
   1a31c:	f8da 8000 	ldr.w	r8, [sl]
   1a320:	f8db 7000 	ldr.w	r7, [fp]
   1a324:	e008      	b.n	1a338 <ipc_trace_handle+0x178>
   1a326:	2963      	cmp	r1, #99	; 0x63
   1a328:	d016      	beq.n	1a358 <ipc_trace_handle+0x198>
   1a32a:	2961      	cmp	r1, #97	; 0x61
   1a32c:	bf04      	itt	eq
   1a32e:	4607      	moveq	r7, r0
   1a330:	2601      	moveq	r6, #1
   1a332:	3201      	adds	r2, #1
   1a334:	42aa      	cmp	r2, r5
   1a336:	d013      	beq.n	1a360 <ipc_trace_handle+0x1a0>
   1a338:	1c91      	adds	r1, r2, #2
   1a33a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1a33e:	6848      	ldr	r0, [r1, #4]
   1a340:	7801      	ldrb	r1, [r0, #0]
   1a342:	2962      	cmp	r1, #98	; 0x62
   1a344:	d1ef      	bne.n	1a326 <ipc_trace_handle+0x166>
   1a346:	4680      	mov	r8, r0
   1a348:	f04f 0901 	mov.w	r9, #1
   1a34c:	e7f1      	b.n	1a332 <ipc_trace_handle+0x172>
   1a34e:	f7fc fdd3 	bl	16ef8 <bsd_os_trace_irq_set>
   1a352:	b003      	add	sp, #12
   1a354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a358:	4686      	mov	lr, r0
   1a35a:	f04f 0c01 	mov.w	ip, #1
   1a35e:	e7e8      	b.n	1a332 <ipc_trace_handle+0x172>
   1a360:	2e00      	cmp	r6, #0
   1a362:	f040 8091 	bne.w	1a488 <ipc_trace_handle+0x2c8>
   1a366:	f1b9 0f00 	cmp.w	r9, #0
   1a36a:	d001      	beq.n	1a370 <ipc_trace_handle+0x1b0>
   1a36c:	f8ca 8000 	str.w	r8, [sl]
   1a370:	f1bc 0f00 	cmp.w	ip, #0
   1a374:	d002      	beq.n	1a37c <ipc_trace_handle+0x1bc>
   1a376:	4a4a      	ldr	r2, [pc, #296]	; (1a4a0 <ipc_trace_handle+0x2e0>)
   1a378:	f8c2 e000 	str.w	lr, [r2]
   1a37c:	2001      	movs	r0, #1
   1a37e:	2200      	movs	r2, #0
   1a380:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1a384:	e743      	b.n	1a20e <ipc_trace_handle+0x4e>
   1a386:	f7fc fdbf 	bl	16f08 <bsd_os_trace_irq_clear>
   1a38a:	e75d      	b.n	1a248 <ipc_trace_handle+0x88>
   1a38c:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a390:	f8ad 2000 	strh.w	r2, [sp]
   1a394:	7822      	ldrb	r2, [r4, #0]
   1a396:	466e      	mov	r6, sp
   1a398:	f88d 2004 	strb.w	r2, [sp, #4]
   1a39c:	6862      	ldr	r2, [r4, #4]
   1a39e:	2105      	movs	r1, #5
   1a3a0:	4293      	cmp	r3, r2
   1a3a2:	bf2a      	itet	cs
   1a3a4:	6927      	ldrcs	r7, [r4, #16]
   1a3a6:	1ad7      	subcc	r7, r2, r3
   1a3a8:	1aff      	subcs	r7, r7, r3
   1a3aa:	4293      	cmp	r3, r2
   1a3ac:	bf94      	ite	ls
   1a3ae:	2500      	movls	r5, #0
   1a3b0:	68e5      	ldrhi	r5, [r4, #12]
   1a3b2:	b2bf      	uxth	r7, r7
   1a3b4:	bf88      	it	hi
   1a3b6:	1b52      	subhi	r2, r2, r5
   1a3b8:	4630      	mov	r0, r6
   1a3ba:	bf88      	it	hi
   1a3bc:	b295      	uxthhi	r5, r2
   1a3be:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a3c2:	f013 fc37 	bl	2dc34 <bsd_os_trace_put>
   1a3c6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a3ca:	68a0      	ldr	r0, [r4, #8]
   1a3cc:	f013 fc32 	bl	2dc34 <bsd_os_trace_put>
   1a3d0:	68a3      	ldr	r3, [r4, #8]
   1a3d2:	6922      	ldr	r2, [r4, #16]
   1a3d4:	441f      	add	r7, r3
   1a3d6:	4297      	cmp	r7, r2
   1a3d8:	bf08      	it	eq
   1a3da:	68e3      	ldreq	r3, [r4, #12]
   1a3dc:	60a7      	str	r7, [r4, #8]
   1a3de:	bf08      	it	eq
   1a3e0:	60a3      	streq	r3, [r4, #8]
   1a3e2:	2d00      	cmp	r5, #0
   1a3e4:	f43f af40 	beq.w	1a268 <ipc_trace_handle+0xa8>
   1a3e8:	2105      	movs	r1, #5
   1a3ea:	4630      	mov	r0, r6
   1a3ec:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a3f0:	f013 fc20 	bl	2dc34 <bsd_os_trace_put>
   1a3f4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a3f8:	68e0      	ldr	r0, [r4, #12]
   1a3fa:	f013 fc1b 	bl	2dc34 <bsd_os_trace_put>
   1a3fe:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a402:	68e3      	ldr	r3, [r4, #12]
   1a404:	4413      	add	r3, r2
   1a406:	60a3      	str	r3, [r4, #8]
   1a408:	e72e      	b.n	1a268 <ipc_trace_handle+0xa8>
   1a40a:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a40e:	f8ad 2000 	strh.w	r2, [sp]
   1a412:	7822      	ldrb	r2, [r4, #0]
   1a414:	466e      	mov	r6, sp
   1a416:	f88d 2004 	strb.w	r2, [sp, #4]
   1a41a:	6862      	ldr	r2, [r4, #4]
   1a41c:	2105      	movs	r1, #5
   1a41e:	4293      	cmp	r3, r2
   1a420:	bf2a      	itet	cs
   1a422:	6927      	ldrcs	r7, [r4, #16]
   1a424:	1ad7      	subcc	r7, r2, r3
   1a426:	1aff      	subcs	r7, r7, r3
   1a428:	4293      	cmp	r3, r2
   1a42a:	bf94      	ite	ls
   1a42c:	2500      	movls	r5, #0
   1a42e:	68e5      	ldrhi	r5, [r4, #12]
   1a430:	b2bf      	uxth	r7, r7
   1a432:	bf88      	it	hi
   1a434:	1b52      	subhi	r2, r2, r5
   1a436:	4630      	mov	r0, r6
   1a438:	bf88      	it	hi
   1a43a:	b295      	uxthhi	r5, r2
   1a43c:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a440:	f013 fbf8 	bl	2dc34 <bsd_os_trace_put>
   1a444:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a448:	68a0      	ldr	r0, [r4, #8]
   1a44a:	f013 fbf3 	bl	2dc34 <bsd_os_trace_put>
   1a44e:	68a3      	ldr	r3, [r4, #8]
   1a450:	6922      	ldr	r2, [r4, #16]
   1a452:	441f      	add	r7, r3
   1a454:	4297      	cmp	r7, r2
   1a456:	bf08      	it	eq
   1a458:	68e3      	ldreq	r3, [r4, #12]
   1a45a:	60a7      	str	r7, [r4, #8]
   1a45c:	bf08      	it	eq
   1a45e:	60a3      	streq	r3, [r4, #8]
   1a460:	2d00      	cmp	r5, #0
   1a462:	f43f aef9 	beq.w	1a258 <ipc_trace_handle+0x98>
   1a466:	2105      	movs	r1, #5
   1a468:	4630      	mov	r0, r6
   1a46a:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a46e:	f013 fbe1 	bl	2dc34 <bsd_os_trace_put>
   1a472:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a476:	68e0      	ldr	r0, [r4, #12]
   1a478:	f013 fbdc 	bl	2dc34 <bsd_os_trace_put>
   1a47c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a480:	68e3      	ldr	r3, [r4, #12]
   1a482:	4413      	add	r3, r2
   1a484:	60a3      	str	r3, [r4, #8]
   1a486:	e6e7      	b.n	1a258 <ipc_trace_handle+0x98>
   1a488:	f8cb 7000 	str.w	r7, [fp]
   1a48c:	e76b      	b.n	1a366 <ipc_trace_handle+0x1a6>
   1a48e:	bf00      	nop
   1a490:	200217dc 	.word	0x200217dc
   1a494:	20026273 	.word	0x20026273
   1a498:	200217d8 	.word	0x200217d8
   1a49c:	200217d0 	.word	0x200217d0
   1a4a0:	200217d4 	.word	0x200217d4

0001a4a4 <rpc_trace_coredump_in_progress>:
   1a4a4:	4b01      	ldr	r3, [pc, #4]	; (1a4ac <rpc_trace_coredump_in_progress+0x8>)
   1a4a6:	7818      	ldrb	r0, [r3, #0]
   1a4a8:	4770      	bx	lr
   1a4aa:	bf00      	nop
   1a4ac:	20026273 	.word	0x20026273

0001a4b0 <rpc_transport_ipc_data_free>:
   1a4b0:	b510      	push	{r4, lr}
   1a4b2:	4b0e      	ldr	r3, [pc, #56]	; (1a4ec <rpc_transport_ipc_data_free+0x3c>)
   1a4b4:	4604      	mov	r4, r0
   1a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a4ba:	4413      	add	r3, r2
   1a4bc:	4298      	cmp	r0, r3
   1a4be:	d20d      	bcs.n	1a4dc <rpc_transport_ipc_data_free+0x2c>
   1a4c0:	4282      	cmp	r2, r0
   1a4c2:	d80b      	bhi.n	1a4dc <rpc_transport_ipc_data_free+0x2c>
   1a4c4:	f000 fd1a 	bl	1aefc <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   1a4c8:	b158      	cbz	r0, 1a4e2 <rpc_transport_ipc_data_free+0x32>
   1a4ca:	4a09      	ldr	r2, [pc, #36]	; (1a4f0 <rpc_transport_ipc_data_free+0x40>)
   1a4cc:	6084      	str	r4, [r0, #8]
   1a4ce:	6002      	str	r2, [r0, #0]
   1a4d0:	f7ff fd80 	bl	19fd4 <rpc_transport_send>
   1a4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a4d8:	f7fc bcfe 	b.w	16ed8 <bsd_os_application_irq_set>
   1a4dc:	4620      	mov	r0, r4
   1a4de:	f006 ff7b 	bl	213d8 <nrf_shared_free>
   1a4e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a4e6:	f7fc bcf7 	b.w	16ed8 <bsd_os_application_irq_set>
   1a4ea:	bf00      	nop
   1a4ec:	200217e0 	.word	0x200217e0
   1a4f0:	00020001 	.word	0x00020001

0001a4f4 <rpc_transport_ipc_init>:
   1a4f4:	b188      	cbz	r0, 1a51a <rpc_transport_ipc_init+0x26>
   1a4f6:	b510      	push	{r4, lr}
   1a4f8:	b082      	sub	sp, #8
   1a4fa:	aa01      	add	r2, sp, #4
   1a4fc:	4669      	mov	r1, sp
   1a4fe:	4604      	mov	r4, r0
   1a500:	f000 fb58 	bl	1abb4 <rpc_transport_ipc_tx_init>
   1a504:	4602      	mov	r2, r0
   1a506:	b148      	cbz	r0, 1a51c <rpc_transport_ipc_init+0x28>
   1a508:	4b12      	ldr	r3, [pc, #72]	; (1a554 <rpc_transport_ipc_init+0x60>)
   1a50a:	3428      	adds	r4, #40	; 0x28
   1a50c:	e894 0003 	ldmia.w	r4, {r0, r1}
   1a510:	e883 0003 	stmia.w	r3, {r0, r1}
   1a514:	4610      	mov	r0, r2
   1a516:	b002      	add	sp, #8
   1a518:	bd10      	pop	{r4, pc}
   1a51a:	e7fe      	b.n	1a51a <rpc_transport_ipc_init+0x26>
   1a51c:	e9dd 1200 	ldrd	r1, r2, [sp]
   1a520:	4620      	mov	r0, r4
   1a522:	f000 f9ef 	bl	1a904 <rpc_transport_ipc_rx_init>
   1a526:	4602      	mov	r2, r0
   1a528:	4b0a      	ldr	r3, [pc, #40]	; (1a554 <rpc_transport_ipc_init+0x60>)
   1a52a:	f104 0128 	add.w	r1, r4, #40	; 0x28
   1a52e:	c903      	ldmia	r1, {r0, r1}
   1a530:	e883 0003 	stmia.w	r3, {r0, r1}
   1a534:	2a00      	cmp	r2, #0
   1a536:	d1ed      	bne.n	1a514 <rpc_transport_ipc_init+0x20>
   1a538:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1a53c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1a53e:	4906      	ldr	r1, [pc, #24]	; (1a558 <rpc_transport_ipc_init+0x64>)
   1a540:	015b      	lsls	r3, r3, #5
   1a542:	b2db      	uxtb	r3, r3
   1a544:	f881 332a 	strb.w	r3, [r1, #810]	; 0x32a
   1a548:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   1a54c:	6048      	str	r0, [r1, #4]
   1a54e:	4610      	mov	r0, r2
   1a550:	b002      	add	sp, #8
   1a552:	bd10      	pop	{r4, pc}
   1a554:	200217e0 	.word	0x200217e0
   1a558:	e000e100 	.word	0xe000e100

0001a55c <rpc_transport_ipc_shutdown>:
   1a55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a560:	b08c      	sub	sp, #48	; 0x30
   1a562:	f000 fd05 	bl	1af70 <rpc_transport_ipc_tx_suspend>
   1a566:	2200      	movs	r2, #0
   1a568:	2010      	movs	r0, #16
   1a56a:	4b31      	ldr	r3, [pc, #196]	; (1a630 <rpc_transport_ipc_shutdown+0xd4>)
   1a56c:	f04f 0c01 	mov.w	ip, #1
   1a570:	4c30      	ldr	r4, [pc, #192]	; (1a634 <rpc_transport_ipc_shutdown+0xd8>)
   1a572:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   1a576:	6821      	ldr	r1, [r4, #0]
   1a578:	2704      	movs	r7, #4
   1a57a:	910a      	str	r1, [sp, #40]	; 0x28
   1a57c:	492e      	ldr	r1, [pc, #184]	; (1a638 <rpc_transport_ipc_shutdown+0xdc>)
   1a57e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1a580:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1a584:	680d      	ldr	r5, [r1, #0]
   1a586:	950b      	str	r5, [sp, #44]	; 0x2c
   1a588:	4d2c      	ldr	r5, [pc, #176]	; (1a63c <rpc_transport_ipc_shutdown+0xe0>)
   1a58a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1a58c:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   1a590:	682d      	ldr	r5, [r5, #0]
   1a592:	2640      	movs	r6, #64	; 0x40
   1a594:	9509      	str	r5, [sp, #36]	; 0x24
   1a596:	4d2a      	ldr	r5, [pc, #168]	; (1a640 <rpc_transport_ipc_shutdown+0xe4>)
   1a598:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   1a59c:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   1a5a0:	f8d5 e000 	ldr.w	lr, [r5]
   1a5a4:	2580      	movs	r5, #128	; 0x80
   1a5a6:	f8cd e020 	str.w	lr, [sp, #32]
   1a5aa:	f8dd e020 	ldr.w	lr, [sp, #32]
   1a5ae:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   1a5b2:	f8d4 e000 	ldr.w	lr, [r4]
   1a5b6:	2405      	movs	r4, #5
   1a5b8:	f8cd e01c 	str.w	lr, [sp, #28]
   1a5bc:	f8df e08c 	ldr.w	lr, [pc, #140]	; 1a64c <rpc_transport_ipc_shutdown+0xf0>
   1a5c0:	f8dd 801c 	ldr.w	r8, [sp, #28]
   1a5c4:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   1a5c8:	f8de e000 	ldr.w	lr, [lr]
   1a5cc:	f8cd e018 	str.w	lr, [sp, #24]
   1a5d0:	f8df e07c 	ldr.w	lr, [pc, #124]	; 1a650 <rpc_transport_ipc_shutdown+0xf4>
   1a5d4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1a5d8:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   1a5dc:	f8de e000 	ldr.w	lr, [lr]
   1a5e0:	f8cd e014 	str.w	lr, [sp, #20]
   1a5e4:	f8dd e014 	ldr.w	lr, [sp, #20]
   1a5e8:	f8c3 c308 	str.w	ip, [r3, #776]	; 0x308
   1a5ec:	f8d1 c000 	ldr.w	ip, [r1]
   1a5f0:	f8cd c010 	str.w	ip, [sp, #16]
   1a5f4:	f8dd c010 	ldr.w	ip, [sp, #16]
   1a5f8:	f8c3 7308 	str.w	r7, [r3, #776]	; 0x308
   1a5fc:	680f      	ldr	r7, [r1, #0]
   1a5fe:	9703      	str	r7, [sp, #12]
   1a600:	9f03      	ldr	r7, [sp, #12]
   1a602:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1a606:	6808      	ldr	r0, [r1, #0]
   1a608:	9002      	str	r0, [sp, #8]
   1a60a:	9802      	ldr	r0, [sp, #8]
   1a60c:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   1a610:	680e      	ldr	r6, [r1, #0]
   1a612:	480c      	ldr	r0, [pc, #48]	; (1a644 <rpc_transport_ipc_shutdown+0xe8>)
   1a614:	9601      	str	r6, [sp, #4]
   1a616:	9e01      	ldr	r6, [sp, #4]
   1a618:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   1a61c:	6809      	ldr	r1, [r1, #0]
   1a61e:	4b0a      	ldr	r3, [pc, #40]	; (1a648 <rpc_transport_ipc_shutdown+0xec>)
   1a620:	9100      	str	r1, [sp, #0]
   1a622:	9900      	ldr	r1, [sp, #0]
   1a624:	8002      	strh	r2, [r0, #0]
   1a626:	601c      	str	r4, [r3, #0]
   1a628:	b00c      	add	sp, #48	; 0x30
   1a62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a62e:	bf00      	nop
   1a630:	4002a000 	.word	0x4002a000
   1a634:	4002a5a0 	.word	0x4002a5a0
   1a638:	4002a308 	.word	0x4002a308
   1a63c:	4002a590 	.word	0x4002a590
   1a640:	4002a598 	.word	0x4002a598
   1a644:	200242a0 	.word	0x200242a0
   1a648:	200217f8 	.word	0x200217f8
   1a64c:	4002a5a8 	.word	0x4002a5a8
   1a650:	4002a5ac 	.word	0x4002a5ac

0001a654 <bsd_os_application_irq_handler>:
   1a654:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a658:	f7fc fc46 	bl	16ee8 <bsd_os_application_irq_clear>
   1a65c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 1a734 <bsd_os_application_irq_handler+0xe0>
   1a660:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 1a738 <bsd_os_application_irq_handler+0xe4>
   1a664:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 1a73c <bsd_os_application_irq_handler+0xe8>
   1a668:	f108 0908 	add.w	r9, r8, #8
   1a66c:	f858 7b04 	ldr.w	r7, [r8], #4
   1a670:	6839      	ldr	r1, [r7, #0]
   1a672:	b361      	cbz	r1, 1a6ce <bsd_os_application_irq_handler+0x7a>
   1a674:	2400      	movs	r4, #0
   1a676:	e002      	b.n	1a67e <bsd_os_application_irq_handler+0x2a>
   1a678:	3401      	adds	r4, #1
   1a67a:	428c      	cmp	r4, r1
   1a67c:	d227      	bcs.n	1a6ce <bsd_os_application_irq_handler+0x7a>
   1a67e:	00e6      	lsls	r6, r4, #3
   1a680:	19bd      	adds	r5, r7, r6
   1a682:	68aa      	ldr	r2, [r5, #8]
   1a684:	2a00      	cmp	r2, #0
   1a686:	d0f7      	beq.n	1a678 <bsd_os_application_irq_handler+0x24>
   1a688:	686a      	ldr	r2, [r5, #4]
   1a68a:	b2d2      	uxtb	r2, r2
   1a68c:	2a01      	cmp	r2, #1
   1a68e:	d1f3      	bne.n	1a678 <bsd_os_application_irq_handler+0x24>
   1a690:	6868      	ldr	r0, [r5, #4]
   1a692:	f8bb 2000 	ldrh.w	r2, [fp]
   1a696:	ebb2 4f10 	cmp.w	r2, r0, lsr #16
   1a69a:	d1ed      	bne.n	1a678 <bsd_os_application_irq_handler+0x24>
   1a69c:	68a8      	ldr	r0, [r5, #8]
   1a69e:	6841      	ldr	r1, [r0, #4]
   1a6a0:	b2c9      	uxtb	r1, r1
   1a6a2:	2902      	cmp	r1, #2
   1a6a4:	d02c      	beq.n	1a700 <bsd_os_application_irq_handler+0xac>
   1a6a6:	2901      	cmp	r1, #1
   1a6a8:	d015      	beq.n	1a6d6 <bsd_os_application_irq_handler+0x82>
   1a6aa:	3604      	adds	r6, #4
   1a6ac:	59b9      	ldr	r1, [r7, r6]
   1a6ae:	3201      	adds	r2, #1
   1a6b0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   1a6b4:	f041 0103 	orr.w	r1, r1, #3
   1a6b8:	51b9      	str	r1, [r7, r6]
   1a6ba:	f8ab 2000 	strh.w	r2, [fp]
   1a6be:	f7fc fc0b 	bl	16ed8 <bsd_os_application_irq_set>
   1a6c2:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1a6c6:	3401      	adds	r4, #1
   1a6c8:	6839      	ldr	r1, [r7, #0]
   1a6ca:	428c      	cmp	r4, r1
   1a6cc:	d3d7      	bcc.n	1a67e <bsd_os_application_irq_handler+0x2a>
   1a6ce:	45c1      	cmp	r9, r8
   1a6d0:	d1cc      	bne.n	1a66c <bsd_os_application_irq_handler+0x18>
   1a6d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6d6:	6801      	ldr	r1, [r0, #0]
   1a6d8:	0c09      	lsrs	r1, r1, #16
   1a6da:	f002 ff45 	bl	1d568 <rpc_handle_ctrl_message>
   1a6de:	2801      	cmp	r0, #1
   1a6e0:	d014      	beq.n	1a70c <bsd_os_application_irq_handler+0xb8>
   1a6e2:	d310      	bcc.n	1a706 <bsd_os_application_irq_handler+0xb2>
   1a6e4:	2802      	cmp	r0, #2
   1a6e6:	d007      	beq.n	1a6f8 <bsd_os_application_irq_handler+0xa4>
   1a6e8:	2203      	movs	r2, #3
   1a6ea:	4b11      	ldr	r3, [pc, #68]	; (1a730 <bsd_os_application_irq_handler+0xdc>)
   1a6ec:	4610      	mov	r0, r2
   1a6ee:	f8ca 2000 	str.w	r2, [sl]
   1a6f2:	601a      	str	r2, [r3, #0]
   1a6f4:	f005 fb6c 	bl	1fdd0 <rpc_transport_ipc_fault_handler>
   1a6f8:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1a6fc:	6839      	ldr	r1, [r7, #0]
   1a6fe:	e7bb      	b.n	1a678 <bsd_os_application_irq_handler+0x24>
   1a700:	f002 ff4a 	bl	1d598 <rpc_handle_data_message>
   1a704:	e7eb      	b.n	1a6de <bsd_os_application_irq_handler+0x8a>
   1a706:	f8bb 2000 	ldrh.w	r2, [fp]
   1a70a:	e7ce      	b.n	1a6aa <bsd_os_application_irq_handler+0x56>
   1a70c:	686a      	ldr	r2, [r5, #4]
   1a70e:	f8bb 1000 	ldrh.w	r1, [fp]
   1a712:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1a716:	f042 0202 	orr.w	r2, r2, #2
   1a71a:	606a      	str	r2, [r5, #4]
   1a71c:	1c4a      	adds	r2, r1, #1
   1a71e:	f8ab 2000 	strh.w	r2, [fp]
   1a722:	f7fc fbd9 	bl	16ed8 <bsd_os_application_irq_set>
   1a726:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1a72a:	6839      	ldr	r1, [r7, #0]
   1a72c:	e7a4      	b.n	1a678 <bsd_os_application_irq_handler+0x24>
   1a72e:	bf00      	nop
   1a730:	200217e8 	.word	0x200217e8
   1a734:	200217f0 	.word	0x200217f0
   1a738:	200242a0 	.word	0x200242a0
   1a73c:	200217f8 	.word	0x200217f8

0001a740 <IPC_IRQHandler>:
   1a740:	b570      	push	{r4, r5, r6, lr}
   1a742:	f44f 6680 	mov.w	r6, #1024	; 0x400
   1a746:	4d62      	ldr	r5, [pc, #392]	; (1a8d0 <IPC_IRQHandler+0x190>)
   1a748:	4c62      	ldr	r4, [pc, #392]	; (1a8d4 <IPC_IRQHandler+0x194>)
   1a74a:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
   1a74e:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   1a752:	b086      	sub	sp, #24
   1a754:	061b      	lsls	r3, r3, #24
   1a756:	d50b      	bpl.n	1a770 <IPC_IRQHandler+0x30>
   1a758:	f7ff fd32 	bl	1a1c0 <ipc_trace_handle>
   1a75c:	f7ff fea2 	bl	1a4a4 <rpc_trace_coredump_in_progress>
   1a760:	2800      	cmp	r0, #0
   1a762:	d151      	bne.n	1a808 <IPC_IRQHandler+0xc8>
   1a764:	4b5c      	ldr	r3, [pc, #368]	; (1a8d8 <IPC_IRQHandler+0x198>)
   1a766:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   1a76a:	681b      	ldr	r3, [r3, #0]
   1a76c:	9301      	str	r3, [sp, #4]
   1a76e:	9b01      	ldr	r3, [sp, #4]
   1a770:	4b58      	ldr	r3, [pc, #352]	; (1a8d4 <IPC_IRQHandler+0x194>)
   1a772:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1a776:	f012 0201 	ands.w	r2, r2, #1
   1a77a:	d11c      	bne.n	1a7b6 <IPC_IRQHandler+0x76>
   1a77c:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   1a780:	f011 0140 	ands.w	r1, r1, #64	; 0x40
   1a784:	d145      	bne.n	1a812 <IPC_IRQHandler+0xd2>
   1a786:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1a78a:	0750      	lsls	r0, r2, #29
   1a78c:	d50c      	bpl.n	1a7a8 <IPC_IRQHandler+0x68>
   1a78e:	4a53      	ldr	r2, [pc, #332]	; (1a8dc <IPC_IRQHandler+0x19c>)
   1a790:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1a794:	6812      	ldr	r2, [r2, #0]
   1a796:	4b52      	ldr	r3, [pc, #328]	; (1a8e0 <IPC_IRQHandler+0x1a0>)
   1a798:	9204      	str	r2, [sp, #16]
   1a79a:	9a04      	ldr	r2, [sp, #16]
   1a79c:	681a      	ldr	r2, [r3, #0]
   1a79e:	2a02      	cmp	r2, #2
   1a7a0:	d079      	beq.n	1a896 <IPC_IRQHandler+0x156>
   1a7a2:	681a      	ldr	r2, [r3, #0]
   1a7a4:	2a01      	cmp	r2, #1
   1a7a6:	d05b      	beq.n	1a860 <IPC_IRQHandler+0x120>
   1a7a8:	4b4a      	ldr	r3, [pc, #296]	; (1a8d4 <IPC_IRQHandler+0x194>)
   1a7aa:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1a7ae:	06d2      	lsls	r2, r2, #27
   1a7b0:	d41e      	bmi.n	1a7f0 <IPC_IRQHandler+0xb0>
   1a7b2:	b006      	add	sp, #24
   1a7b4:	bd70      	pop	{r4, r5, r6, pc}
   1a7b6:	2000      	movs	r0, #0
   1a7b8:	f248 0202 	movw	r2, #32770	; 0x8002
   1a7bc:	4949      	ldr	r1, [pc, #292]	; (1a8e4 <IPC_IRQHandler+0x1a4>)
   1a7be:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1a7c2:	6809      	ldr	r1, [r1, #0]
   1a7c4:	9102      	str	r1, [sp, #8]
   1a7c6:	9902      	ldr	r1, [sp, #8]
   1a7c8:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   1a7cc:	4293      	cmp	r3, r2
   1a7ce:	d06b      	beq.n	1a8a8 <IPC_IRQHandler+0x168>
   1a7d0:	d82a      	bhi.n	1a828 <IPC_IRQHandler+0xe8>
   1a7d2:	2b00      	cmp	r3, #0
   1a7d4:	d062      	beq.n	1a89c <IPC_IRQHandler+0x15c>
   1a7d6:	2b02      	cmp	r3, #2
   1a7d8:	d937      	bls.n	1a84a <IPC_IRQHandler+0x10a>
   1a7da:	f248 0201 	movw	r2, #32769	; 0x8001
   1a7de:	4293      	cmp	r3, r2
   1a7e0:	d15c      	bne.n	1a89c <IPC_IRQHandler+0x15c>
   1a7e2:	2003      	movs	r0, #3
   1a7e4:	2207      	movs	r2, #7
   1a7e6:	493e      	ldr	r1, [pc, #248]	; (1a8e0 <IPC_IRQHandler+0x1a0>)
   1a7e8:	4b3f      	ldr	r3, [pc, #252]	; (1a8e8 <IPC_IRQHandler+0x1a8>)
   1a7ea:	6008      	str	r0, [r1, #0]
   1a7ec:	601a      	str	r2, [r3, #0]
   1a7ee:	e7e0      	b.n	1a7b2 <IPC_IRQHandler+0x72>
   1a7f0:	2100      	movs	r1, #0
   1a7f2:	4a3e      	ldr	r2, [pc, #248]	; (1a8ec <IPC_IRQHandler+0x1ac>)
   1a7f4:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
   1a7f8:	6813      	ldr	r3, [r2, #0]
   1a7fa:	9305      	str	r3, [sp, #20]
   1a7fc:	9b05      	ldr	r3, [sp, #20]
   1a7fe:	b006      	add	sp, #24
   1a800:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a804:	f7fc bb68 	b.w	16ed8 <bsd_os_application_irq_set>
   1a808:	23e0      	movs	r3, #224	; 0xe0
   1a80a:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   1a80e:	606e      	str	r6, [r5, #4]
   1a810:	e7cf      	b.n	1a7b2 <IPC_IRQHandler+0x72>
   1a812:	4937      	ldr	r1, [pc, #220]	; (1a8f0 <IPC_IRQHandler+0x1b0>)
   1a814:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   1a818:	680b      	ldr	r3, [r1, #0]
   1a81a:	9303      	str	r3, [sp, #12]
   1a81c:	9b03      	ldr	r3, [sp, #12]
   1a81e:	b006      	add	sp, #24
   1a820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a824:	f7ff be9a 	b.w	1a55c <rpc_transport_ipc_shutdown>
   1a828:	4a32      	ldr	r2, [pc, #200]	; (1a8f4 <IPC_IRQHandler+0x1b4>)
   1a82a:	4293      	cmp	r3, r2
   1a82c:	d82a      	bhi.n	1a884 <IPC_IRQHandler+0x144>
   1a82e:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   1a832:	d82a      	bhi.n	1a88a <IPC_IRQHandler+0x14a>
   1a834:	f248 0203 	movw	r2, #32771	; 0x8003
   1a838:	4293      	cmp	r3, r2
   1a83a:	d12f      	bne.n	1a89c <IPC_IRQHandler+0x15c>
   1a83c:	2003      	movs	r0, #3
   1a83e:	2204      	movs	r2, #4
   1a840:	4927      	ldr	r1, [pc, #156]	; (1a8e0 <IPC_IRQHandler+0x1a0>)
   1a842:	4b29      	ldr	r3, [pc, #164]	; (1a8e8 <IPC_IRQHandler+0x1a8>)
   1a844:	6008      	str	r0, [r1, #0]
   1a846:	601a      	str	r2, [r3, #0]
   1a848:	e7b3      	b.n	1a7b2 <IPC_IRQHandler+0x72>
   1a84a:	2303      	movs	r3, #3
   1a84c:	4618      	mov	r0, r3
   1a84e:	4924      	ldr	r1, [pc, #144]	; (1a8e0 <IPC_IRQHandler+0x1a0>)
   1a850:	4a25      	ldr	r2, [pc, #148]	; (1a8e8 <IPC_IRQHandler+0x1a8>)
   1a852:	600b      	str	r3, [r1, #0]
   1a854:	6013      	str	r3, [r2, #0]
   1a856:	b006      	add	sp, #24
   1a858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a85c:	f005 bab8 	b.w	1fdd0 <rpc_transport_ipc_fault_handler>
   1a860:	4a25      	ldr	r2, [pc, #148]	; (1a8f8 <IPC_IRQHandler+0x1b8>)
   1a862:	4826      	ldr	r0, [pc, #152]	; (1a8fc <IPC_IRQHandler+0x1bc>)
   1a864:	6811      	ldr	r1, [r2, #0]
   1a866:	688a      	ldr	r2, [r1, #8]
   1a868:	6002      	str	r2, [r0, #0]
   1a86a:	6849      	ldr	r1, [r1, #4]
   1a86c:	6041      	str	r1, [r0, #4]
   1a86e:	b312      	cbz	r2, 1a8b6 <IPC_IRQHandler+0x176>
   1a870:	b309      	cbz	r1, 1a8b6 <IPC_IRQHandler+0x176>
   1a872:	6812      	ldr	r2, [r2, #0]
   1a874:	2a10      	cmp	r2, #16
   1a876:	d824      	bhi.n	1a8c2 <IPC_IRQHandler+0x182>
   1a878:	680a      	ldr	r2, [r1, #0]
   1a87a:	2a10      	cmp	r2, #16
   1a87c:	d821      	bhi.n	1a8c2 <IPC_IRQHandler+0x182>
   1a87e:	2202      	movs	r2, #2
   1a880:	601a      	str	r2, [r3, #0]
   1a882:	e791      	b.n	1a7a8 <IPC_IRQHandler+0x68>
   1a884:	4a1e      	ldr	r2, [pc, #120]	; (1a900 <IPC_IRQHandler+0x1c0>)
   1a886:	4293      	cmp	r3, r2
   1a888:	d108      	bne.n	1a89c <IPC_IRQHandler+0x15c>
   1a88a:	2003      	movs	r0, #3
   1a88c:	4914      	ldr	r1, [pc, #80]	; (1a8e0 <IPC_IRQHandler+0x1a0>)
   1a88e:	4a16      	ldr	r2, [pc, #88]	; (1a8e8 <IPC_IRQHandler+0x1a8>)
   1a890:	6008      	str	r0, [r1, #0]
   1a892:	6013      	str	r3, [r2, #0]
   1a894:	e78d      	b.n	1a7b2 <IPC_IRQHandler+0x72>
   1a896:	f7fc fb1f 	bl	16ed8 <bsd_os_application_irq_set>
   1a89a:	e785      	b.n	1a7a8 <IPC_IRQHandler+0x68>
   1a89c:	2303      	movs	r3, #3
   1a89e:	4910      	ldr	r1, [pc, #64]	; (1a8e0 <IPC_IRQHandler+0x1a0>)
   1a8a0:	4a11      	ldr	r2, [pc, #68]	; (1a8e8 <IPC_IRQHandler+0x1a8>)
   1a8a2:	600b      	str	r3, [r1, #0]
   1a8a4:	6013      	str	r3, [r2, #0]
   1a8a6:	e784      	b.n	1a7b2 <IPC_IRQHandler+0x72>
   1a8a8:	2003      	movs	r0, #3
   1a8aa:	2206      	movs	r2, #6
   1a8ac:	490c      	ldr	r1, [pc, #48]	; (1a8e0 <IPC_IRQHandler+0x1a0>)
   1a8ae:	4b0e      	ldr	r3, [pc, #56]	; (1a8e8 <IPC_IRQHandler+0x1a8>)
   1a8b0:	6008      	str	r0, [r1, #0]
   1a8b2:	601a      	str	r2, [r3, #0]
   1a8b4:	e77d      	b.n	1a7b2 <IPC_IRQHandler+0x72>
   1a8b6:	2003      	movs	r0, #3
   1a8b8:	2110      	movs	r1, #16
   1a8ba:	4a0b      	ldr	r2, [pc, #44]	; (1a8e8 <IPC_IRQHandler+0x1a8>)
   1a8bc:	6018      	str	r0, [r3, #0]
   1a8be:	6011      	str	r1, [r2, #0]
   1a8c0:	e772      	b.n	1a7a8 <IPC_IRQHandler+0x68>
   1a8c2:	2003      	movs	r0, #3
   1a8c4:	f24c 0106 	movw	r1, #49158	; 0xc006
   1a8c8:	4a07      	ldr	r2, [pc, #28]	; (1a8e8 <IPC_IRQHandler+0x1a8>)
   1a8ca:	6018      	str	r0, [r3, #0]
   1a8cc:	6011      	str	r1, [r2, #0]
   1a8ce:	e76b      	b.n	1a7a8 <IPC_IRQHandler+0x68>
   1a8d0:	e000e100 	.word	0xe000e100
   1a8d4:	4002a000 	.word	0x4002a000
   1a8d8:	4002a11c 	.word	0x4002a11c
   1a8dc:	4002a108 	.word	0x4002a108
   1a8e0:	200217f8 	.word	0x200217f8
   1a8e4:	4002a100 	.word	0x4002a100
   1a8e8:	200217e8 	.word	0x200217e8
   1a8ec:	4002a110 	.word	0x4002a110
   1a8f0:	4002a118 	.word	0x4002a118
   1a8f4:	04400004 	.word	0x04400004
   1a8f8:	200217fc 	.word	0x200217fc
   1a8fc:	200217f0 	.word	0x200217f0
   1a900:	05500001 	.word	0x05500001

0001a904 <rpc_transport_ipc_rx_init>:
   1a904:	2800      	cmp	r0, #0
   1a906:	f000 8109 	beq.w	1ab1c <rpc_transport_ipc_rx_init+0x218>
   1a90a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a90e:	6805      	ldr	r5, [r0, #0]
   1a910:	b097      	sub	sp, #92	; 0x5c
   1a912:	2d00      	cmp	r5, #0
   1a914:	f000 80f8 	beq.w	1ab08 <rpc_transport_ipc_rx_init+0x204>
   1a918:	6883      	ldr	r3, [r0, #8]
   1a91a:	2b00      	cmp	r3, #0
   1a91c:	f000 80f4 	beq.w	1ab08 <rpc_transport_ipc_rx_init+0x204>
   1a920:	6906      	ldr	r6, [r0, #16]
   1a922:	2e00      	cmp	r6, #0
   1a924:	f000 80f0 	beq.w	1ab08 <rpc_transport_ipc_rx_init+0x204>
   1a928:	6a84      	ldr	r4, [r0, #40]	; 0x28
   1a92a:	2c00      	cmp	r4, #0
   1a92c:	f000 80ec 	beq.w	1ab08 <rpc_transport_ipc_rx_init+0x204>
   1a930:	6844      	ldr	r4, [r0, #4]
   1a932:	2c1b      	cmp	r4, #27
   1a934:	f240 80ed 	bls.w	1ab12 <rpc_transport_ipc_rx_init+0x20e>
   1a938:	68c4      	ldr	r4, [r0, #12]
   1a93a:	2c0b      	cmp	r4, #11
   1a93c:	f240 80e9 	bls.w	1ab12 <rpc_transport_ipc_rx_init+0x20e>
   1a940:	f8d0 e014 	ldr.w	lr, [r0, #20]
   1a944:	f1be 0f17 	cmp.w	lr, #23
   1a948:	f240 80e3 	bls.w	1ab12 <rpc_transport_ipc_rx_init+0x20e>
   1a94c:	4604      	mov	r4, r0
   1a94e:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 1ab44 <rpc_transport_ipc_rx_init+0x240>
   1a952:	6ba7      	ldr	r7, [r4, #56]	; 0x38
   1a954:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 1ab48 <rpc_transport_ipc_rx_init+0x244>
   1a958:	4690      	mov	r8, r2
   1a95a:	9101      	str	r1, [sp, #4]
   1a95c:	4672      	mov	r2, lr
   1a95e:	2100      	movs	r1, #0
   1a960:	4630      	mov	r0, r6
   1a962:	f8ca 7000 	str.w	r7, [sl]
   1a966:	f8cb 3000 	str.w	r3, [fp]
   1a96a:	f00b fb87 	bl	2607c <memset>
   1a96e:	69e3      	ldr	r3, [r4, #28]
   1a970:	4630      	mov	r0, r6
   1a972:	6033      	str	r3, [r6, #0]
   1a974:	69a3      	ldr	r3, [r4, #24]
   1a976:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 1ab4c <rpc_transport_ipc_rx_init+0x248>
   1a97a:	6073      	str	r3, [r6, #4]
   1a97c:	f7ff fb34 	bl	19fe8 <ipc_trace_init>
   1a980:	2200      	movs	r2, #0
   1a982:	2001      	movs	r0, #1
   1a984:	4b67      	ldr	r3, [pc, #412]	; (1ab24 <rpc_transport_ipc_rx_init+0x220>)
   1a986:	4968      	ldr	r1, [pc, #416]	; (1ab28 <rpc_transport_ipc_rx_init+0x224>)
   1a988:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   1a98c:	6809      	ldr	r1, [r1, #0]
   1a98e:	f04f 0c80 	mov.w	ip, #128	; 0x80
   1a992:	9106      	str	r1, [sp, #24]
   1a994:	4965      	ldr	r1, [pc, #404]	; (1ab2c <rpc_transport_ipc_rx_init+0x228>)
   1a996:	f8dd e018 	ldr.w	lr, [sp, #24]
   1a99a:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   1a99e:	6809      	ldr	r1, [r1, #0]
   1a9a0:	702a      	strb	r2, [r5, #0]
   1a9a2:	9105      	str	r1, [sp, #20]
   1a9a4:	706a      	strb	r2, [r5, #1]
   1a9a6:	70ea      	strb	r2, [r5, #3]
   1a9a8:	70a8      	strb	r0, [r5, #2]
   1a9aa:	9905      	ldr	r1, [sp, #20]
   1a9ac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1a9ae:	f8db e000 	ldr.w	lr, [fp]
   1a9b2:	6069      	str	r1, [r5, #4]
   1a9b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1a9b6:	61ae      	str	r6, [r5, #24]
   1a9b8:	60a9      	str	r1, [r5, #8]
   1a9ba:	9901      	ldr	r1, [sp, #4]
   1a9bc:	f8c5 e014 	str.w	lr, [r5, #20]
   1a9c0:	6129      	str	r1, [r5, #16]
   1a9c2:	495b      	ldr	r1, [pc, #364]	; (1ab30 <rpc_transport_ipc_rx_init+0x22c>)
   1a9c4:	f8c5 800c 	str.w	r8, [r5, #12]
   1a9c8:	f8c3 0590 	str.w	r0, [r3, #1424]	; 0x590
   1a9cc:	680c      	ldr	r4, [r1, #0]
   1a9ce:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   1a9d2:	9407      	str	r4, [sp, #28]
   1a9d4:	9c07      	ldr	r4, [sp, #28]
   1a9d6:	2404      	movs	r4, #4
   1a9d8:	f8c3 4598 	str.w	r4, [r3, #1432]	; 0x598
   1a9dc:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   1a9e0:	4f54      	ldr	r7, [pc, #336]	; (1ab34 <rpc_transport_ipc_rx_init+0x230>)
   1a9e2:	9408      	str	r4, [sp, #32]
   1a9e4:	9c08      	ldr	r4, [sp, #32]
   1a9e6:	2410      	movs	r4, #16
   1a9e8:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   1a9ec:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   1a9f0:	9409      	str	r4, [sp, #36]	; 0x24
   1a9f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1a9f4:	2440      	movs	r4, #64	; 0x40
   1a9f6:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   1a9fa:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   1a9fe:	940a      	str	r4, [sp, #40]	; 0x28
   1aa00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1aa02:	f8c3 c5ac 	str.w	ip, [r3, #1452]	; 0x5ac
   1aa06:	f8d1 44ac 	ldr.w	r4, [r1, #1196]	; 0x4ac
   1aa0a:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   1aa0e:	940b      	str	r4, [sp, #44]	; 0x2c
   1aa10:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1aa12:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1aa16:	680c      	ldr	r4, [r1, #0]
   1aa18:	940c      	str	r4, [sp, #48]	; 0x30
   1aa1a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1aa1c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1aa20:	688c      	ldr	r4, [r1, #8]
   1aa22:	940d      	str	r4, [sp, #52]	; 0x34
   1aa24:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1aa26:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1aa2a:	690c      	ldr	r4, [r1, #16]
   1aa2c:	940e      	str	r4, [sp, #56]	; 0x38
   1aa2e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1aa30:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   1aa34:	698c      	ldr	r4, [r1, #24]
   1aa36:	940f      	str	r4, [sp, #60]	; 0x3c
   1aa38:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1aa3a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   1aa3e:	69cc      	ldr	r4, [r1, #28]
   1aa40:	f501 7101 	add.w	r1, r1, #516	; 0x204
   1aa44:	9410      	str	r4, [sp, #64]	; 0x40
   1aa46:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1aa48:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   1aa4c:	4304      	orrs	r4, r0
   1aa4e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1aa52:	680d      	ldr	r5, [r1, #0]
   1aa54:	4c38      	ldr	r4, [pc, #224]	; (1ab38 <rpc_transport_ipc_rx_init+0x234>)
   1aa56:	9511      	str	r5, [sp, #68]	; 0x44
   1aa58:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1aa5a:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   1aa5e:	4d37      	ldr	r5, [pc, #220]	; (1ab3c <rpc_transport_ipc_rx_init+0x238>)
   1aa60:	f046 0604 	orr.w	r6, r6, #4
   1aa64:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   1aa68:	680e      	ldr	r6, [r1, #0]
   1aa6a:	9612      	str	r6, [sp, #72]	; 0x48
   1aa6c:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1aa6e:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   1aa72:	f046 0610 	orr.w	r6, r6, #16
   1aa76:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   1aa7a:	680e      	ldr	r6, [r1, #0]
   1aa7c:	9613      	str	r6, [sp, #76]	; 0x4c
   1aa7e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   1aa80:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   1aa84:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   1aa88:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   1aa8c:	680e      	ldr	r6, [r1, #0]
   1aa8e:	9614      	str	r6, [sp, #80]	; 0x50
   1aa90:	9e14      	ldr	r6, [sp, #80]	; 0x50
   1aa92:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   1aa96:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   1aa9a:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   1aa9e:	f8da 3000 	ldr.w	r3, [sl]
   1aaa2:	6809      	ldr	r1, [r1, #0]
   1aaa4:	015b      	lsls	r3, r3, #5
   1aaa6:	9115      	str	r1, [sp, #84]	; 0x54
   1aaa8:	b2db      	uxtb	r3, r3
   1aaaa:	9915      	ldr	r1, [sp, #84]	; 0x54
   1aaac:	6022      	str	r2, [r4, #0]
   1aaae:	f8c9 0000 	str.w	r0, [r9]
   1aab2:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   1aab6:	f8c5 c184 	str.w	ip, [r5, #388]	; 0x184
   1aaba:	f8c5 c004 	str.w	ip, [r5, #4]
   1aabe:	9204      	str	r2, [sp, #16]
   1aac0:	f8c7 2610 	str.w	r2, [r7, #1552]	; 0x610
   1aac4:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
   1aac8:	9304      	str	r3, [sp, #16]
   1aaca:	9b04      	ldr	r3, [sp, #16]
   1aacc:	f8d9 3000 	ldr.w	r3, [r9]
   1aad0:	4283      	cmp	r3, r0
   1aad2:	d10f      	bne.n	1aaf4 <rpc_transport_ipc_rx_init+0x1f0>
   1aad4:	2614      	movs	r6, #20
   1aad6:	4d1a      	ldr	r5, [pc, #104]	; (1ab40 <rpc_transport_ipc_rx_init+0x23c>)
   1aad8:	e000      	b.n	1aadc <rpc_transport_ipc_rx_init+0x1d8>
   1aada:	b15d      	cbz	r5, 1aaf4 <rpc_transport_ipc_rx_init+0x1f0>
   1aadc:	a903      	add	r1, sp, #12
   1aade:	2000      	movs	r0, #0
   1aae0:	9603      	str	r6, [sp, #12]
   1aae2:	f7fb ffb5 	bl	16a50 <bsd_os_timedwait>
   1aae6:	9b03      	ldr	r3, [sp, #12]
   1aae8:	f8d9 2000 	ldr.w	r2, [r9]
   1aaec:	3b14      	subs	r3, #20
   1aaee:	2a01      	cmp	r2, #1
   1aaf0:	441d      	add	r5, r3
   1aaf2:	d0f2      	beq.n	1aada <rpc_transport_ipc_rx_init+0x1d6>
   1aaf4:	f8d9 3000 	ldr.w	r3, [r9]
   1aaf8:	2b01      	cmp	r3, #1
   1aafa:	bf0a      	itet	eq
   1aafc:	200d      	moveq	r0, #13
   1aafe:	6820      	ldrne	r0, [r4, #0]
   1ab00:	6020      	streq	r0, [r4, #0]
   1ab02:	b017      	add	sp, #92	; 0x5c
   1ab04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab08:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1ab0c:	b017      	add	sp, #92	; 0x5c
   1ab0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab12:	f24c 0009 	movw	r0, #49161	; 0xc009
   1ab16:	b017      	add	sp, #92	; 0x5c
   1ab18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab1c:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1ab20:	4770      	bx	lr
   1ab22:	bf00      	nop
   1ab24:	4002a000 	.word	0x4002a000
   1ab28:	4002a610 	.word	0x4002a610
   1ab2c:	4002a614 	.word	0x4002a614
   1ab30:	4002a590 	.word	0x4002a590
   1ab34:	40005000 	.word	0x40005000
   1ab38:	200217e8 	.word	0x200217e8
   1ab3c:	e000e100 	.word	0xe000e100
   1ab40:	000249f0 	.word	0x000249f0
   1ab44:	200217ec 	.word	0x200217ec
   1ab48:	200217fc 	.word	0x200217fc
   1ab4c:	200217f8 	.word	0x200217f8

0001ab50 <rpc_transport_ipc_msg_free>:
   1ab50:	b470      	push	{r4, r5, r6}
   1ab52:	4e17      	ldr	r6, [pc, #92]	; (1abb0 <rpc_transport_ipc_msg_free+0x60>)
   1ab54:	6831      	ldr	r1, [r6, #0]
   1ab56:	680d      	ldr	r5, [r1, #0]
   1ab58:	b1ad      	cbz	r5, 1ab86 <rpc_transport_ipc_msg_free+0x36>
   1ab5a:	688b      	ldr	r3, [r1, #8]
   1ab5c:	4283      	cmp	r3, r0
   1ab5e:	d024      	beq.n	1abaa <rpc_transport_ipc_msg_free+0x5a>
   1ab60:	2300      	movs	r3, #0
   1ab62:	3301      	adds	r3, #1
   1ab64:	00da      	lsls	r2, r3, #3
   1ab66:	429d      	cmp	r5, r3
   1ab68:	eb01 0402 	add.w	r4, r1, r2
   1ab6c:	d00b      	beq.n	1ab86 <rpc_transport_ipc_msg_free+0x36>
   1ab6e:	68a4      	ldr	r4, [r4, #8]
   1ab70:	42a0      	cmp	r0, r4
   1ab72:	d1f6      	bne.n	1ab62 <rpc_transport_ipc_msg_free+0x12>
   1ab74:	3204      	adds	r2, #4
   1ab76:	588b      	ldr	r3, [r1, r2]
   1ab78:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1ab7c:	f043 0303 	orr.w	r3, r3, #3
   1ab80:	508b      	str	r3, [r1, r2]
   1ab82:	bc70      	pop	{r4, r5, r6}
   1ab84:	4770      	bx	lr
   1ab86:	6871      	ldr	r1, [r6, #4]
   1ab88:	680d      	ldr	r5, [r1, #0]
   1ab8a:	2d00      	cmp	r5, #0
   1ab8c:	d0f9      	beq.n	1ab82 <rpc_transport_ipc_msg_free+0x32>
   1ab8e:	688b      	ldr	r3, [r1, #8]
   1ab90:	4283      	cmp	r3, r0
   1ab92:	d00a      	beq.n	1abaa <rpc_transport_ipc_msg_free+0x5a>
   1ab94:	2300      	movs	r3, #0
   1ab96:	3301      	adds	r3, #1
   1ab98:	00da      	lsls	r2, r3, #3
   1ab9a:	429d      	cmp	r5, r3
   1ab9c:	eb01 0402 	add.w	r4, r1, r2
   1aba0:	d0ef      	beq.n	1ab82 <rpc_transport_ipc_msg_free+0x32>
   1aba2:	68a4      	ldr	r4, [r4, #8]
   1aba4:	42a0      	cmp	r0, r4
   1aba6:	d1f6      	bne.n	1ab96 <rpc_transport_ipc_msg_free+0x46>
   1aba8:	e7e4      	b.n	1ab74 <rpc_transport_ipc_msg_free+0x24>
   1abaa:	2204      	movs	r2, #4
   1abac:	e7e3      	b.n	1ab76 <rpc_transport_ipc_msg_free+0x26>
   1abae:	bf00      	nop
   1abb0:	200217f0 	.word	0x200217f0

0001abb4 <rpc_transport_ipc_tx_init>:
   1abb4:	2800      	cmp	r0, #0
   1abb6:	f000 80b8 	beq.w	1ad2a <rpc_transport_ipc_tx_init+0x176>
   1abba:	2900      	cmp	r1, #0
   1abbc:	f000 80b5 	beq.w	1ad2a <rpc_transport_ipc_tx_init+0x176>
   1abc0:	2a00      	cmp	r2, #0
   1abc2:	f000 80b2 	beq.w	1ad2a <rpc_transport_ipc_tx_init+0x176>
   1abc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1abca:	6a04      	ldr	r4, [r0, #32]
   1abcc:	b085      	sub	sp, #20
   1abce:	2c00      	cmp	r4, #0
   1abd0:	f000 80a6 	beq.w	1ad20 <rpc_transport_ipc_tx_init+0x16c>
   1abd4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1abd6:	2800      	cmp	r0, #0
   1abd8:	f000 80a2 	beq.w	1ad20 <rpc_transport_ipc_tx_init+0x16c>
   1abdc:	f642 4587 	movw	r5, #11399	; 0x2c87
   1abe0:	f04f 0a00 	mov.w	sl, #0
   1abe4:	4e55      	ldr	r6, [pc, #340]	; (1ad3c <rpc_transport_ipc_tx_init+0x188>)
   1abe6:	42a8      	cmp	r0, r5
   1abe8:	f886 a000 	strb.w	sl, [r6]
   1abec:	f240 80a0 	bls.w	1ad30 <rpc_transport_ipc_tx_init+0x17c>
   1abf0:	2708      	movs	r7, #8
   1abf2:	f8df 9180 	ldr.w	r9, [pc, #384]	; 1ad74 <rpc_transport_ipc_tx_init+0x1c0>
   1abf6:	4620      	mov	r0, r4
   1abf8:	4616      	mov	r6, r2
   1abfa:	460d      	mov	r5, r1
   1abfc:	2244      	movs	r2, #68	; 0x44
   1abfe:	4651      	mov	r1, sl
   1ac00:	f8c9 4000 	str.w	r4, [r9]
   1ac04:	f00b fa3a 	bl	2607c <memset>
   1ac08:	f8d9 2000 	ldr.w	r2, [r9]
   1ac0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1ac10:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1ad78 <rpc_transport_ipc_tx_init+0x1c4>
   1ac14:	f882 a001 	strb.w	sl, [r2, #1]
   1ac18:	f882 a002 	strb.w	sl, [r2, #2]
   1ac1c:	f882 a003 	strb.w	sl, [r2, #3]
   1ac20:	7017      	strb	r7, [r2, #0]
   1ac22:	4618      	mov	r0, r3
   1ac24:	2244      	movs	r2, #68	; 0x44
   1ac26:	4651      	mov	r1, sl
   1ac28:	f8c8 3000 	str.w	r3, [r8]
   1ac2c:	f00b fa26 	bl	2607c <memset>
   1ac30:	f8d8 2000 	ldr.w	r2, [r8]
   1ac34:	f104 0388 	add.w	r3, r4, #136	; 0x88
   1ac38:	f8df b140 	ldr.w	fp, [pc, #320]	; 1ad7c <rpc_transport_ipc_tx_init+0x1c8>
   1ac3c:	7017      	strb	r7, [r2, #0]
   1ac3e:	f882 a001 	strb.w	sl, [r2, #1]
   1ac42:	f882 a002 	strb.w	sl, [r2, #2]
   1ac46:	f882 a003 	strb.w	sl, [r2, #3]
   1ac4a:	4618      	mov	r0, r3
   1ac4c:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ac50:	4651      	mov	r1, sl
   1ac52:	f8cb 3000 	str.w	r3, [fp]
   1ac56:	f00b fa11 	bl	2607c <memset>
   1ac5a:	4b39      	ldr	r3, [pc, #228]	; (1ad40 <rpc_transport_ipc_tx_init+0x18c>)
   1ac5c:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   1ac60:	f8c3 c000 	str.w	ip, [r3]
   1ac64:	4651      	mov	r1, sl
   1ac66:	4660      	mov	r0, ip
   1ac68:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ac6c:	f00b fa06 	bl	2607c <memset>
   1ac70:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   1ac74:	2106      	movs	r1, #6
   1ac76:	f04f 0e01 	mov.w	lr, #1
   1ac7a:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   1ac7e:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   1ac82:	4b30      	ldr	r3, [pc, #192]	; (1ad44 <rpc_transport_ipc_tx_init+0x190>)
   1ac84:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   1ac88:	605c      	str	r4, [r3, #4]
   1ac8a:	4c2f      	ldr	r4, [pc, #188]	; (1ad48 <rpc_transport_ipc_tx_init+0x194>)
   1ac8c:	f8c3 c008 	str.w	ip, [r3, #8]
   1ac90:	8199      	strh	r1, [r3, #12]
   1ac92:	f8a3 e000 	strh.w	lr, [r3]
   1ac96:	4619      	mov	r1, r3
   1ac98:	611c      	str	r4, [r3, #16]
   1ac9a:	4b2c      	ldr	r3, [pc, #176]	; (1ad4c <rpc_transport_ipc_tx_init+0x198>)
   1ac9c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 1ad80 <rpc_transport_ipc_tx_init+0x1cc>
   1aca0:	6120      	str	r0, [r4, #16]
   1aca2:	482b      	ldr	r0, [pc, #172]	; (1ad50 <rpc_transport_ipc_tx_init+0x19c>)
   1aca4:	6063      	str	r3, [r4, #4]
   1aca6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   1acaa:	60a0      	str	r0, [r4, #8]
   1acac:	f8c4 c000 	str.w	ip, [r4]
   1acb0:	4828      	ldr	r0, [pc, #160]	; (1ad54 <rpc_transport_ipc_tx_init+0x1a0>)
   1acb2:	60e3      	str	r3, [r4, #12]
   1acb4:	6162      	str	r2, [r4, #20]
   1acb6:	f006 f9a5 	bl	21004 <nrf_mem_register>
   1acba:	2800      	cmp	r0, #0
   1acbc:	d132      	bne.n	1ad24 <rpc_transport_ipc_tx_init+0x170>
   1acbe:	f04f 0c02 	mov.w	ip, #2
   1acc2:	2420      	movs	r4, #32
   1acc4:	f8d9 1000 	ldr.w	r1, [r9]
   1acc8:	f8db 2000 	ldr.w	r2, [fp]
   1accc:	6029      	str	r1, [r5, #0]
   1acce:	4b1c      	ldr	r3, [pc, #112]	; (1ad40 <rpc_transport_ipc_tx_init+0x18c>)
   1acd0:	f8d8 1000 	ldr.w	r1, [r8]
   1acd4:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 1ad84 <rpc_transport_ipc_tx_init+0x1d0>
   1acd8:	4d1f      	ldr	r5, [pc, #124]	; (1ad58 <rpc_transport_ipc_tx_init+0x1a4>)
   1acda:	6031      	str	r1, [r6, #0]
   1acdc:	f8ce 2000 	str.w	r2, [lr]
   1ace0:	681b      	ldr	r3, [r3, #0]
   1ace2:	491e      	ldr	r1, [pc, #120]	; (1ad5c <rpc_transport_ipc_tx_init+0x1a8>)
   1ace4:	f502 7200 	add.w	r2, r2, #512	; 0x200
   1ace8:	602a      	str	r2, [r5, #0]
   1acea:	4e1d      	ldr	r6, [pc, #116]	; (1ad60 <rpc_transport_ipc_tx_init+0x1ac>)
   1acec:	4a1d      	ldr	r2, [pc, #116]	; (1ad64 <rpc_transport_ipc_tx_init+0x1b0>)
   1acee:	4d1e      	ldr	r5, [pc, #120]	; (1ad68 <rpc_transport_ipc_tx_init+0x1b4>)
   1acf0:	600b      	str	r3, [r1, #0]
   1acf2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1acf6:	491d      	ldr	r1, [pc, #116]	; (1ad6c <rpc_transport_ipc_tx_init+0x1b8>)
   1acf8:	6033      	str	r3, [r6, #0]
   1acfa:	8028      	strh	r0, [r5, #0]
   1acfc:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   1ad00:	6809      	ldr	r1, [r1, #0]
   1ad02:	4b1b      	ldr	r3, [pc, #108]	; (1ad70 <rpc_transport_ipc_tx_init+0x1bc>)
   1ad04:	9103      	str	r1, [sp, #12]
   1ad06:	9903      	ldr	r1, [sp, #12]
   1ad08:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   1ad0c:	6819      	ldr	r1, [r3, #0]
   1ad0e:	443b      	add	r3, r7
   1ad10:	9102      	str	r1, [sp, #8]
   1ad12:	9902      	ldr	r1, [sp, #8]
   1ad14:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   1ad18:	681b      	ldr	r3, [r3, #0]
   1ad1a:	9301      	str	r3, [sp, #4]
   1ad1c:	9b01      	ldr	r3, [sp, #4]
   1ad1e:	e001      	b.n	1ad24 <rpc_transport_ipc_tx_init+0x170>
   1ad20:	f24c 0007 	movw	r0, #49159	; 0xc007
   1ad24:	b005      	add	sp, #20
   1ad26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad2a:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1ad2e:	4770      	bx	lr
   1ad30:	f24c 0004 	movw	r0, #49156	; 0xc004
   1ad34:	b005      	add	sp, #20
   1ad36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad3a:	bf00      	nop
   1ad3c:	20026274 	.word	0x20026274
   1ad40:	20021828 	.word	0x20021828
   1ad44:	20021814 	.word	0x20021814
   1ad48:	20021838 	.word	0x20021838
   1ad4c:	00040080 	.word	0x00040080
   1ad50:	00040100 	.word	0x00040100
   1ad54:	20021800 	.word	0x20021800
   1ad58:	2002180c 	.word	0x2002180c
   1ad5c:	20021808 	.word	0x20021808
   1ad60:	20021804 	.word	0x20021804
   1ad64:	4002a000 	.word	0x4002a000
   1ad68:	200242a2 	.word	0x200242a2
   1ad6c:	4002a514 	.word	0x4002a514
   1ad70:	4002a51c 	.word	0x4002a51c
   1ad74:	20021834 	.word	0x20021834
   1ad78:	2002182c 	.word	0x2002182c
   1ad7c:	20021830 	.word	0x20021830
   1ad80:	00080040 	.word	0x00080040
   1ad84:	20021810 	.word	0x20021810

0001ad88 <rpc_transport_ipc_send>:
   1ad88:	2800      	cmp	r0, #0
   1ad8a:	d061      	beq.n	1ae50 <rpc_transport_ipc_send+0xc8>
   1ad8c:	b4f0      	push	{r4, r5, r6, r7}
   1ad8e:	4b34      	ldr	r3, [pc, #208]	; (1ae60 <rpc_transport_ipc_send+0xd8>)
   1ad90:	b082      	sub	sp, #8
   1ad92:	681a      	ldr	r2, [r3, #0]
   1ad94:	4b33      	ldr	r3, [pc, #204]	; (1ae64 <rpc_transport_ipc_send+0xdc>)
   1ad96:	4282      	cmp	r2, r0
   1ad98:	d81e      	bhi.n	1add8 <rpc_transport_ipc_send+0x50>
   1ad9a:	681b      	ldr	r3, [r3, #0]
   1ad9c:	4932      	ldr	r1, [pc, #200]	; (1ae68 <rpc_transport_ipc_send+0xe0>)
   1ad9e:	4283      	cmp	r3, r0
   1ada0:	6809      	ldr	r1, [r1, #0]
   1ada2:	d803      	bhi.n	1adac <rpc_transport_ipc_send+0x24>
   1ada4:	4c31      	ldr	r4, [pc, #196]	; (1ae6c <rpc_transport_ipc_send+0xe4>)
   1ada6:	6824      	ldr	r4, [r4, #0]
   1ada8:	4284      	cmp	r4, r0
   1adaa:	d849      	bhi.n	1ae40 <rpc_transport_ipc_send+0xb8>
   1adac:	4281      	cmp	r1, r0
   1adae:	d90e      	bls.n	1adce <rpc_transport_ipc_send+0x46>
   1adb0:	4b2f      	ldr	r3, [pc, #188]	; (1ae70 <rpc_transport_ipc_send+0xe8>)
   1adb2:	781b      	ldrb	r3, [r3, #0]
   1adb4:	2b00      	cmp	r3, #0
   1adb6:	d14e      	bne.n	1ae56 <rpc_transport_ipc_send+0xce>
   1adb8:	1a83      	subs	r3, r0, r2
   1adba:	492e      	ldr	r1, [pc, #184]	; (1ae74 <rpc_transport_ipc_send+0xec>)
   1adbc:	099f      	lsrs	r7, r3, #6
   1adbe:	069b      	lsls	r3, r3, #26
   1adc0:	680a      	ldr	r2, [r1, #0]
   1adc2:	4d2d      	ldr	r5, [pc, #180]	; (1ae78 <rpc_transport_ipc_send+0xf0>)
   1adc4:	f04f 0403 	mov.w	r4, #3
   1adc8:	f04f 0602 	mov.w	r6, #2
   1adcc:	d014      	beq.n	1adf8 <rpc_transport_ipc_send+0x70>
   1adce:	f24c 0010 	movw	r0, #49168	; 0xc010
   1add2:	b002      	add	sp, #8
   1add4:	bcf0      	pop	{r4, r5, r6, r7}
   1add6:	4770      	bx	lr
   1add8:	681b      	ldr	r3, [r3, #0]
   1adda:	4298      	cmp	r0, r3
   1addc:	d3f7      	bcc.n	1adce <rpc_transport_ipc_send+0x46>
   1adde:	4a23      	ldr	r2, [pc, #140]	; (1ae6c <rpc_transport_ipc_send+0xe4>)
   1ade0:	6812      	ldr	r2, [r2, #0]
   1ade2:	4290      	cmp	r0, r2
   1ade4:	d2f3      	bcs.n	1adce <rpc_transport_ipc_send+0x46>
   1ade6:	2401      	movs	r4, #1
   1ade8:	1ac3      	subs	r3, r0, r3
   1adea:	4a24      	ldr	r2, [pc, #144]	; (1ae7c <rpc_transport_ipc_send+0xf4>)
   1adec:	099f      	lsrs	r7, r3, #6
   1adee:	069b      	lsls	r3, r3, #26
   1adf0:	4626      	mov	r6, r4
   1adf2:	6812      	ldr	r2, [r2, #0]
   1adf4:	4d22      	ldr	r5, [pc, #136]	; (1ae80 <rpc_transport_ipc_send+0xf8>)
   1adf6:	d1ea      	bne.n	1adce <rpc_transport_ipc_send+0x46>
   1adf8:	6841      	ldr	r1, [r0, #4]
   1adfa:	b2c9      	uxtb	r1, r1
   1adfc:	428e      	cmp	r6, r1
   1adfe:	d122      	bne.n	1ae46 <rpc_transport_ipc_send+0xbe>
   1ae00:	2020      	movs	r0, #32
   1ae02:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
   1ae06:	491f      	ldr	r1, [pc, #124]	; (1ae84 <rpc_transport_ipc_send+0xfc>)
   1ae08:	685a      	ldr	r2, [r3, #4]
   1ae0a:	880e      	ldrh	r6, [r1, #0]
   1ae0c:	b292      	uxth	r2, r2
   1ae0e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   1ae12:	605a      	str	r2, [r3, #4]
   1ae14:	685a      	ldr	r2, [r3, #4]
   1ae16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1ae1a:	f042 0201 	orr.w	r2, r2, #1
   1ae1e:	605a      	str	r2, [r3, #4]
   1ae20:	bf00      	nop
   1ae22:	3801      	subs	r0, #1
   1ae24:	d1fc      	bne.n	1ae20 <rpc_transport_ipc_send+0x98>
   1ae26:	2201      	movs	r2, #1
   1ae28:	4b17      	ldr	r3, [pc, #92]	; (1ae88 <rpc_transport_ipc_send+0x100>)
   1ae2a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1ae2e:	682a      	ldr	r2, [r5, #0]
   1ae30:	880b      	ldrh	r3, [r1, #0]
   1ae32:	9201      	str	r2, [sp, #4]
   1ae34:	9a01      	ldr	r2, [sp, #4]
   1ae36:	3301      	adds	r3, #1
   1ae38:	800b      	strh	r3, [r1, #0]
   1ae3a:	b002      	add	sp, #8
   1ae3c:	bcf0      	pop	{r4, r5, r6, r7}
   1ae3e:	4770      	bx	lr
   1ae40:	4281      	cmp	r1, r0
   1ae42:	d9d0      	bls.n	1ade6 <rpc_transport_ipc_send+0x5e>
   1ae44:	e7b4      	b.n	1adb0 <rpc_transport_ipc_send+0x28>
   1ae46:	f24c 0007 	movw	r0, #49159	; 0xc007
   1ae4a:	b002      	add	sp, #8
   1ae4c:	bcf0      	pop	{r4, r5, r6, r7}
   1ae4e:	4770      	bx	lr
   1ae50:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1ae54:	4770      	bx	lr
   1ae56:	f24c 000f 	movw	r0, #49167	; 0xc00f
   1ae5a:	b002      	add	sp, #8
   1ae5c:	bcf0      	pop	{r4, r5, r6, r7}
   1ae5e:	4770      	bx	lr
   1ae60:	20021810 	.word	0x20021810
   1ae64:	20021808 	.word	0x20021808
   1ae68:	2002180c 	.word	0x2002180c
   1ae6c:	20021804 	.word	0x20021804
   1ae70:	20026274 	.word	0x20026274
   1ae74:	20021834 	.word	0x20021834
   1ae78:	4002a00c 	.word	0x4002a00c
   1ae7c:	2002182c 	.word	0x2002182c
   1ae80:	4002a004 	.word	0x4002a004
   1ae84:	200242a2 	.word	0x200242a2
   1ae88:	4002a000 	.word	0x4002a000

0001ae8c <rpc_transport_ipc_tx_rpc_data_alloc>:
   1ae8c:	4b18      	ldr	r3, [pc, #96]	; (1aef0 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   1ae8e:	781b      	ldrb	r3, [r3, #0]
   1ae90:	bb63      	cbnz	r3, 1aeec <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   1ae92:	b4f0      	push	{r4, r5, r6, r7}
   1ae94:	4a17      	ldr	r2, [pc, #92]	; (1aef4 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   1ae96:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1ae9a:	6814      	ldr	r4, [r2, #0]
   1ae9c:	4b16      	ldr	r3, [pc, #88]	; (1aef8 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   1ae9e:	6825      	ldr	r5, [r4, #0]
   1aea0:	681e      	ldr	r6, [r3, #0]
   1aea2:	b1a5      	cbz	r5, 1aece <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   1aea4:	4607      	mov	r7, r0
   1aea6:	00c1      	lsls	r1, r0, #3
   1aea8:	1863      	adds	r3, r4, r1
   1aeaa:	685a      	ldr	r2, [r3, #4]
   1aeac:	b2d2      	uxtb	r2, r2
   1aeae:	2a03      	cmp	r2, #3
   1aeb0:	d104      	bne.n	1aebc <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   1aeb2:	609f      	str	r7, [r3, #8]
   1aeb4:	685a      	ldr	r2, [r3, #4]
   1aeb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1aeba:	605a      	str	r2, [r3, #4]
   1aebc:	685a      	ldr	r2, [r3, #4]
   1aebe:	f012 0fff 	tst.w	r2, #255	; 0xff
   1aec2:	d101      	bne.n	1aec8 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   1aec4:	689b      	ldr	r3, [r3, #8]
   1aec6:	b12b      	cbz	r3, 1aed4 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   1aec8:	3001      	adds	r0, #1
   1aeca:	42a8      	cmp	r0, r5
   1aecc:	d1eb      	bne.n	1aea6 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   1aece:	2000      	movs	r0, #0
   1aed0:	bcf0      	pop	{r4, r5, r6, r7}
   1aed2:	4770      	bx	lr
   1aed4:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   1aed8:	4421      	add	r1, r4
   1aeda:	6088      	str	r0, [r1, #8]
   1aedc:	6843      	ldr	r3, [r0, #4]
   1aede:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1aee2:	f043 0302 	orr.w	r3, r3, #2
   1aee6:	6043      	str	r3, [r0, #4]
   1aee8:	bcf0      	pop	{r4, r5, r6, r7}
   1aeea:	4770      	bx	lr
   1aeec:	2000      	movs	r0, #0
   1aeee:	4770      	bx	lr
   1aef0:	20026274 	.word	0x20026274
   1aef4:	20021834 	.word	0x20021834
   1aef8:	20021830 	.word	0x20021830

0001aefc <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   1aefc:	b4f0      	push	{r4, r5, r6, r7}
   1aefe:	4a15      	ldr	r2, [pc, #84]	; (1af54 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   1af00:	4b15      	ldr	r3, [pc, #84]	; (1af58 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   1af02:	6814      	ldr	r4, [r2, #0]
   1af04:	681e      	ldr	r6, [r3, #0]
   1af06:	6825      	ldr	r5, [r4, #0]
   1af08:	b1ad      	cbz	r5, 1af36 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   1af0a:	2000      	movs	r0, #0
   1af0c:	4607      	mov	r7, r0
   1af0e:	00c1      	lsls	r1, r0, #3
   1af10:	1863      	adds	r3, r4, r1
   1af12:	685a      	ldr	r2, [r3, #4]
   1af14:	b2d2      	uxtb	r2, r2
   1af16:	2a03      	cmp	r2, #3
   1af18:	d104      	bne.n	1af24 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   1af1a:	609f      	str	r7, [r3, #8]
   1af1c:	685a      	ldr	r2, [r3, #4]
   1af1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1af22:	605a      	str	r2, [r3, #4]
   1af24:	685a      	ldr	r2, [r3, #4]
   1af26:	f012 0fff 	tst.w	r2, #255	; 0xff
   1af2a:	d101      	bne.n	1af30 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   1af2c:	689b      	ldr	r3, [r3, #8]
   1af2e:	b12b      	cbz	r3, 1af3c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   1af30:	3001      	adds	r0, #1
   1af32:	4285      	cmp	r5, r0
   1af34:	d1eb      	bne.n	1af0e <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   1af36:	2000      	movs	r0, #0
   1af38:	bcf0      	pop	{r4, r5, r6, r7}
   1af3a:	4770      	bx	lr
   1af3c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   1af40:	4421      	add	r1, r4
   1af42:	6088      	str	r0, [r1, #8]
   1af44:	6843      	ldr	r3, [r0, #4]
   1af46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1af4a:	f043 0301 	orr.w	r3, r3, #1
   1af4e:	6043      	str	r3, [r0, #4]
   1af50:	bcf0      	pop	{r4, r5, r6, r7}
   1af52:	4770      	bx	lr
   1af54:	2002182c 	.word	0x2002182c
   1af58:	20021828 	.word	0x20021828

0001af5c <rpc_transport_ipc_tx_data_alloc>:
   1af5c:	4b03      	ldr	r3, [pc, #12]	; (1af6c <rpc_transport_ipc_tx_data_alloc+0x10>)
   1af5e:	781b      	ldrb	r3, [r3, #0]
   1af60:	b90b      	cbnz	r3, 1af66 <rpc_transport_ipc_tx_data_alloc+0xa>
   1af62:	f006 ba2f 	b.w	213c4 <nrf_shared_malloc>
   1af66:	2000      	movs	r0, #0
   1af68:	4770      	bx	lr
   1af6a:	bf00      	nop
   1af6c:	20026274 	.word	0x20026274

0001af70 <rpc_transport_ipc_tx_suspend>:
   1af70:	2201      	movs	r2, #1
   1af72:	4b01      	ldr	r3, [pc, #4]	; (1af78 <rpc_transport_ipc_tx_suspend+0x8>)
   1af74:	701a      	strb	r2, [r3, #0]
   1af76:	4770      	bx	lr
   1af78:	20026274 	.word	0x20026274

0001af7c <secure_client_socket>:
   1af7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1af80:	f04f 3cff 	mov.w	ip, #4294967295
   1af84:	460c      	mov	r4, r1
   1af86:	680b      	ldr	r3, [r1, #0]
   1af88:	4f45      	ldr	r7, [pc, #276]	; (1b0a0 <secure_client_socket+0x124>)
   1af8a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1af8e:	600b      	str	r3, [r1, #0]
   1af90:	680b      	ldr	r3, [r1, #0]
   1af92:	00c6      	lsls	r6, r0, #3
   1af94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1af98:	600b      	str	r3, [r1, #0]
   1af9a:	eb07 0a06 	add.w	sl, r7, r6
   1af9e:	b084      	sub	sp, #16
   1afa0:	f8da 3004 	ldr.w	r3, [sl, #4]
   1afa4:	6989      	ldr	r1, [r1, #24]
   1afa6:	f247 0281 	movw	r2, #28801	; 0x7081
   1afaa:	4605      	mov	r5, r0
   1afac:	f8d4 8000 	ldr.w	r8, [r4]
   1afb0:	e9cd cc02 	strd	ip, ip, [sp, #8]
   1afb4:	f000 fd76 	bl	1baa4 <ip_interface_request_create>
   1afb8:	2800      	cmp	r0, #0
   1afba:	d06c      	beq.n	1b096 <secure_client_socket+0x11a>
   1afbc:	f8da 2004 	ldr.w	r2, [sl, #4]
   1afc0:	4681      	mov	r9, r0
   1afc2:	2a00      	cmp	r2, #0
   1afc4:	d15c      	bne.n	1b080 <secure_client_socket+0x104>
   1afc6:	4b37      	ldr	r3, [pc, #220]	; (1b0a4 <secure_client_socket+0x128>)
   1afc8:	1971      	adds	r1, r6, r5
   1afca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1afce:	2224      	movs	r2, #36	; 0x24
   1afd0:	f109 0014 	add.w	r0, r9, #20
   1afd4:	f7f1 fdba 	bl	cb4c <memcpy>
   1afd8:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1afdc:	4649      	mov	r1, r9
   1afde:	3324      	adds	r3, #36	; 0x24
   1afe0:	f8c9 3008 	str.w	r3, [r9, #8]
   1afe4:	6822      	ldr	r2, [r4, #0]
   1afe6:	4643      	mov	r3, r8
   1afe8:	0c12      	lsrs	r2, r2, #16
   1afea:	0412      	lsls	r2, r2, #16
   1afec:	f042 020a 	orr.w	r2, r2, #10
   1aff0:	6022      	str	r2, [r4, #0]
   1aff2:	4620      	mov	r0, r4
   1aff4:	f247 0281 	movw	r2, #28801	; 0x7081
   1aff8:	f000 fd74 	bl	1bae4 <ip_interface_request_send>
   1affc:	4603      	mov	r3, r0
   1affe:	b968      	cbnz	r0, 1b01c <secure_client_socket+0xa0>
   1b000:	6823      	ldr	r3, [r4, #0]
   1b002:	00db      	lsls	r3, r3, #3
   1b004:	d40e      	bmi.n	1b024 <secure_client_socket+0xa8>
   1b006:	ab03      	add	r3, sp, #12
   1b008:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b00c:	210b      	movs	r1, #11
   1b00e:	4628      	mov	r0, r5
   1b010:	f000 fd7c 	bl	1bb0c <ip_interface_wait>
   1b014:	4603      	mov	r3, r0
   1b016:	b150      	cbz	r0, 1b02e <secure_client_socket+0xb2>
   1b018:	f8c4 8000 	str.w	r8, [r4]
   1b01c:	4618      	mov	r0, r3
   1b01e:	b004      	add	sp, #16
   1b020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b024:	2373      	movs	r3, #115	; 0x73
   1b026:	4618      	mov	r0, r3
   1b028:	b004      	add	sp, #16
   1b02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b02e:	220c      	movs	r2, #12
   1b030:	ab02      	add	r3, sp, #8
   1b032:	4611      	mov	r1, r2
   1b034:	4628      	mov	r0, r5
   1b036:	f000 fd69 	bl	1bb0c <ip_interface_wait>
   1b03a:	4603      	mov	r3, r0
   1b03c:	bb30      	cbnz	r0, 1b08c <secure_client_socket+0x110>
   1b03e:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   1b042:	b138      	cbz	r0, 1b054 <secure_client_socket+0xd8>
   1b044:	9301      	str	r3, [sp, #4]
   1b046:	f006 f901 	bl	2124c <nrf_free>
   1b04a:	9b01      	ldr	r3, [sp, #4]
   1b04c:	443e      	add	r6, r7
   1b04e:	6073      	str	r3, [r6, #4]
   1b050:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   1b054:	4618      	mov	r0, r3
   1b056:	6822      	ldr	r2, [r4, #0]
   1b058:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   1b05c:	6022      	str	r2, [r4, #0]
   1b05e:	6822      	ldr	r2, [r4, #0]
   1b060:	0c12      	lsrs	r2, r2, #16
   1b062:	0412      	lsls	r2, r2, #16
   1b064:	f042 020c 	orr.w	r2, r2, #12
   1b068:	6022      	str	r2, [r4, #0]
   1b06a:	6822      	ldr	r2, [r4, #0]
   1b06c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1b070:	6022      	str	r2, [r4, #0]
   1b072:	6822      	ldr	r2, [r4, #0]
   1b074:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1b078:	6022      	str	r2, [r4, #0]
   1b07a:	b004      	add	sp, #16
   1b07c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b080:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   1b084:	6800      	ldr	r0, [r0, #0]
   1b086:	f7f1 fd61 	bl	cb4c <memcpy>
   1b08a:	e79c      	b.n	1afc6 <secure_client_socket+0x4a>
   1b08c:	2b73      	cmp	r3, #115	; 0x73
   1b08e:	d0c5      	beq.n	1b01c <secure_client_socket+0xa0>
   1b090:	f8c4 8000 	str.w	r8, [r4]
   1b094:	e7c2      	b.n	1b01c <secure_client_socket+0xa0>
   1b096:	230c      	movs	r3, #12
   1b098:	4618      	mov	r0, r3
   1b09a:	b004      	add	sp, #16
   1b09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b0a0:	20021994 	.word	0x20021994
   1b0a4:	20021850 	.word	0x20021850

0001b0a8 <tls_interface_init>:
   1b0a8:	2201      	movs	r2, #1
   1b0aa:	4b02      	ldr	r3, [pc, #8]	; (1b0b4 <tls_interface_init+0xc>)
   1b0ac:	2000      	movs	r0, #0
   1b0ae:	701a      	strb	r2, [r3, #0]
   1b0b0:	4770      	bx	lr
   1b0b2:	bf00      	nop
   1b0b4:	20026275 	.word	0x20026275

0001b0b8 <tls_interface_open>:
   1b0b8:	b538      	push	{r3, r4, r5, lr}
   1b0ba:	4b23      	ldr	r3, [pc, #140]	; (1b148 <tls_interface_open+0x90>)
   1b0bc:	781b      	ldrb	r3, [r3, #0]
   1b0be:	2b00      	cmp	r3, #0
   1b0c0:	d03c      	beq.n	1b13c <tls_interface_open+0x84>
   1b0c2:	1e4b      	subs	r3, r1, #1
   1b0c4:	2b01      	cmp	r3, #1
   1b0c6:	d808      	bhi.n	1b0da <tls_interface_open+0x22>
   1b0c8:	4614      	mov	r4, r2
   1b0ca:	b162      	cbz	r2, 1b0e6 <tls_interface_open+0x2e>
   1b0cc:	2901      	cmp	r1, #1
   1b0ce:	d02d      	beq.n	1b12c <tls_interface_open+0x74>
   1b0d0:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1b0d4:	bf08      	it	eq
   1b0d6:	2202      	moveq	r2, #2
   1b0d8:	d00d      	beq.n	1b0f6 <tls_interface_open+0x3e>
   1b0da:	2029      	movs	r0, #41	; 0x29
   1b0dc:	f7fb fd70 	bl	16bc0 <bsd_os_errno_set>
   1b0e0:	f04f 35ff 	mov.w	r5, #4294967295
   1b0e4:	e020      	b.n	1b128 <tls_interface_open+0x70>
   1b0e6:	2901      	cmp	r1, #1
   1b0e8:	bf0b      	itete	eq
   1b0ea:	2201      	moveq	r2, #1
   1b0ec:	2202      	movne	r2, #2
   1b0ee:	f44f 7482 	moveq.w	r4, #260	; 0x104
   1b0f2:	f44f 7487 	movne.w	r4, #270	; 0x10e
   1b0f6:	f000 fd3b 	bl	1bb70 <ip_interface_open>
   1b0fa:	1e05      	subs	r5, r0, #0
   1b0fc:	db1b      	blt.n	1b136 <tls_interface_open+0x7e>
   1b0fe:	4b13      	ldr	r3, [pc, #76]	; (1b14c <tls_interface_open+0x94>)
   1b100:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   1b104:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1b108:	2224      	movs	r2, #36	; 0x24
   1b10a:	4911      	ldr	r1, [pc, #68]	; (1b150 <tls_interface_open+0x98>)
   1b10c:	f7f1 fd1e 	bl	cb4c <memcpy>
   1b110:	4628      	mov	r0, r5
   1b112:	f006 fd99 	bl	21c48 <interface_socket_from_handle_get>
   1b116:	6803      	ldr	r3, [r0, #0]
   1b118:	6144      	str	r4, [r0, #20]
   1b11a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1b11e:	6003      	str	r3, [r0, #0]
   1b120:	6803      	ldr	r3, [r0, #0]
   1b122:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1b126:	6003      	str	r3, [r0, #0]
   1b128:	4628      	mov	r0, r5
   1b12a:	bd38      	pop	{r3, r4, r5, pc}
   1b12c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1b130:	d1d3      	bne.n	1b0da <tls_interface_open+0x22>
   1b132:	460a      	mov	r2, r1
   1b134:	e7df      	b.n	1b0f6 <tls_interface_open+0x3e>
   1b136:	f04f 35ff 	mov.w	r5, #4294967295
   1b13a:	e7f5      	b.n	1b128 <tls_interface_open+0x70>
   1b13c:	2070      	movs	r0, #112	; 0x70
   1b13e:	f7fb fd3f 	bl	16bc0 <bsd_os_errno_set>
   1b142:	f04f 35ff 	mov.w	r5, #4294967295
   1b146:	e7ef      	b.n	1b128 <tls_interface_open+0x70>
   1b148:	20026275 	.word	0x20026275
   1b14c:	20021850 	.word	0x20021850
   1b150:	0002f24c 	.word	0x0002f24c

0001b154 <tls_interface_close>:
   1b154:	b538      	push	{r3, r4, r5, lr}
   1b156:	4604      	mov	r4, r0
   1b158:	f006 fd76 	bl	21c48 <interface_socket_from_handle_get>
   1b15c:	b180      	cbz	r0, 1b180 <tls_interface_close+0x2c>
   1b15e:	4d0b      	ldr	r5, [pc, #44]	; (1b18c <tls_interface_close+0x38>)
   1b160:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   1b164:	b138      	cbz	r0, 1b176 <tls_interface_close+0x22>
   1b166:	f006 f871 	bl	2124c <nrf_free>
   1b16a:	2300      	movs	r3, #0
   1b16c:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   1b170:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   1b174:	6053      	str	r3, [r2, #4]
   1b176:	4620      	mov	r0, r4
   1b178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b17c:	f000 bdbe 	b.w	1bcfc <ip_interface_close>
   1b180:	2009      	movs	r0, #9
   1b182:	f7fb fd1d 	bl	16bc0 <bsd_os_errno_set>
   1b186:	f04f 30ff 	mov.w	r0, #4294967295
   1b18a:	bd38      	pop	{r3, r4, r5, pc}
   1b18c:	20021994 	.word	0x20021994

0001b190 <tls_interface_sendto>:
   1b190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b194:	b087      	sub	sp, #28
   1b196:	9103      	str	r1, [sp, #12]
   1b198:	4616      	mov	r6, r2
   1b19a:	469b      	mov	fp, r3
   1b19c:	4682      	mov	sl, r0
   1b19e:	f006 fd53 	bl	21c48 <interface_socket_from_handle_get>
   1b1a2:	2800      	cmp	r0, #0
   1b1a4:	f000 8082 	beq.w	1b2ac <tls_interface_sendto+0x11c>
   1b1a8:	2400      	movs	r4, #0
   1b1aa:	f01b 0f02 	tst.w	fp, #2
   1b1ae:	bf08      	it	eq
   1b1b0:	6807      	ldreq	r7, [r0, #0]
   1b1b2:	4a40      	ldr	r2, [pc, #256]	; (1b2b4 <tls_interface_sendto+0x124>)
   1b1b4:	bf08      	it	eq
   1b1b6:	f087 5780 	eoreq.w	r7, r7, #268435456	; 0x10000000
   1b1ba:	eb0a 09ca 	add.w	r9, sl, sl, lsl #3
   1b1be:	4605      	mov	r5, r0
   1b1c0:	bf0c      	ite	eq
   1b1c2:	f3c7 7700 	ubfxeq	r7, r7, #28, #1
   1b1c6:	2700      	movne	r7, #0
   1b1c8:	46a0      	mov	r8, r4
   1b1ca:	f04f 33ff 	mov.w	r3, #4294967295
   1b1ce:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   1b1d2:	e00f      	b.n	1b1f4 <tls_interface_sendto+0x64>
   1b1d4:	f899 2000 	ldrb.w	r2, [r9]
   1b1d8:	2a02      	cmp	r2, #2
   1b1da:	d061      	beq.n	1b2a0 <tls_interface_sendto+0x110>
   1b1dc:	692a      	ldr	r2, [r5, #16]
   1b1de:	2a01      	cmp	r2, #1
   1b1e0:	d061      	beq.n	1b2a6 <tls_interface_sendto+0x116>
   1b1e2:	2b00      	cmp	r3, #0
   1b1e4:	db30      	blt.n	1b248 <tls_interface_sendto+0xb8>
   1b1e6:	f1b8 0f00 	cmp.w	r8, #0
   1b1ea:	dc18      	bgt.n	1b21e <tls_interface_sendto+0x8e>
   1b1ec:	441c      	add	r4, r3
   1b1ee:	b1df      	cbz	r7, 1b228 <tls_interface_sendto+0x98>
   1b1f0:	42a6      	cmp	r6, r4
   1b1f2:	dd19      	ble.n	1b228 <tls_interface_sendto+0x98>
   1b1f4:	6829      	ldr	r1, [r5, #0]
   1b1f6:	1b32      	subs	r2, r6, r4
   1b1f8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   1b1fc:	b289      	uxth	r1, r1
   1b1fe:	bfa8      	it	ge
   1b200:	f44f 6200 	movge.w	r2, #2048	; 0x800
   1b204:	290c      	cmp	r1, #12
   1b206:	d013      	beq.n	1b230 <tls_interface_sendto+0xa0>
   1b208:	6829      	ldr	r1, [r5, #0]
   1b20a:	b289      	uxth	r1, r1
   1b20c:	290b      	cmp	r1, #11
   1b20e:	d0e1      	beq.n	1b1d4 <tls_interface_sendto+0x44>
   1b210:	6929      	ldr	r1, [r5, #16]
   1b212:	2901      	cmp	r1, #1
   1b214:	d024      	beq.n	1b260 <tls_interface_sendto+0xd0>
   1b216:	2902      	cmp	r1, #2
   1b218:	d01a      	beq.n	1b250 <tls_interface_sendto+0xc0>
   1b21a:	f04f 0839 	mov.w	r8, #57	; 0x39
   1b21e:	4640      	mov	r0, r8
   1b220:	f7fb fcce 	bl	16bc0 <bsd_os_errno_set>
   1b224:	f04f 34ff 	mov.w	r4, #4294967295
   1b228:	4620      	mov	r0, r4
   1b22a:	b007      	add	sp, #28
   1b22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b230:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b232:	9903      	ldr	r1, [sp, #12]
   1b234:	9301      	str	r3, [sp, #4]
   1b236:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b238:	4421      	add	r1, r4
   1b23a:	9300      	str	r3, [sp, #0]
   1b23c:	4650      	mov	r0, sl
   1b23e:	465b      	mov	r3, fp
   1b240:	f000 fdce 	bl	1bde0 <ip_interface_sendto>
   1b244:	1e03      	subs	r3, r0, #0
   1b246:	dad1      	bge.n	1b1ec <tls_interface_sendto+0x5c>
   1b248:	f1b8 0f00 	cmp.w	r8, #0
   1b24c:	ddea      	ble.n	1b224 <tls_interface_sendto+0x94>
   1b24e:	e7e6      	b.n	1b21e <tls_interface_sendto+0x8e>
   1b250:	6829      	ldr	r1, [r5, #0]
   1b252:	b289      	uxth	r1, r1
   1b254:	2902      	cmp	r1, #2
   1b256:	d007      	beq.n	1b268 <tls_interface_sendto+0xd8>
   1b258:	6829      	ldr	r1, [r5, #0]
   1b25a:	b289      	uxth	r1, r1
   1b25c:	2904      	cmp	r1, #4
   1b25e:	d003      	beq.n	1b268 <tls_interface_sendto+0xd8>
   1b260:	6829      	ldr	r1, [r5, #0]
   1b262:	b289      	uxth	r1, r1
   1b264:	2905      	cmp	r1, #5
   1b266:	d1d8      	bne.n	1b21a <tls_interface_sendto+0x8a>
   1b268:	f899 1000 	ldrb.w	r1, [r9]
   1b26c:	2902      	cmp	r1, #2
   1b26e:	d1b8      	bne.n	1b1e2 <tls_interface_sendto+0x52>
   1b270:	4629      	mov	r1, r5
   1b272:	4650      	mov	r0, sl
   1b274:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1b278:	f7ff fe80 	bl	1af7c <secure_client_socket>
   1b27c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b280:	4680      	mov	r8, r0
   1b282:	2800      	cmp	r0, #0
   1b284:	d1ad      	bne.n	1b1e2 <tls_interface_sendto+0x52>
   1b286:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b288:	9903      	ldr	r1, [sp, #12]
   1b28a:	9301      	str	r3, [sp, #4]
   1b28c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b28e:	4421      	add	r1, r4
   1b290:	9300      	str	r3, [sp, #0]
   1b292:	4650      	mov	r0, sl
   1b294:	465b      	mov	r3, fp
   1b296:	f000 fda3 	bl	1bde0 <ip_interface_sendto>
   1b29a:	1e03      	subs	r3, r0, #0
   1b29c:	daa6      	bge.n	1b1ec <tls_interface_sendto+0x5c>
   1b29e:	e7c1      	b.n	1b224 <tls_interface_sendto+0x94>
   1b2a0:	f04f 0823 	mov.w	r8, #35	; 0x23
   1b2a4:	e7bb      	b.n	1b21e <tls_interface_sendto+0x8e>
   1b2a6:	f04f 082a 	mov.w	r8, #42	; 0x2a
   1b2aa:	e7b8      	b.n	1b21e <tls_interface_sendto+0x8e>
   1b2ac:	f04f 0809 	mov.w	r8, #9
   1b2b0:	e7b5      	b.n	1b21e <tls_interface_sendto+0x8e>
   1b2b2:	bf00      	nop
   1b2b4:	20021850 	.word	0x20021850

0001b2b8 <tls_interface_recvfrom>:
   1b2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b2bc:	460d      	mov	r5, r1
   1b2be:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1b2c2:	4616      	mov	r6, r2
   1b2c4:	461f      	mov	r7, r3
   1b2c6:	4604      	mov	r4, r0
   1b2c8:	f006 fcbe 	bl	21c48 <interface_socket_from_handle_get>
   1b2cc:	2800      	cmp	r0, #0
   1b2ce:	d038      	beq.n	1b342 <tls_interface_recvfrom+0x8a>
   1b2d0:	6803      	ldr	r3, [r0, #0]
   1b2d2:	b29b      	uxth	r3, r3
   1b2d4:	2b0c      	cmp	r3, #12
   1b2d6:	d00f      	beq.n	1b2f8 <tls_interface_recvfrom+0x40>
   1b2d8:	6803      	ldr	r3, [r0, #0]
   1b2da:	b29b      	uxth	r3, r3
   1b2dc:	2b0d      	cmp	r3, #13
   1b2de:	d00b      	beq.n	1b2f8 <tls_interface_recvfrom+0x40>
   1b2e0:	6903      	ldr	r3, [r0, #16]
   1b2e2:	2b01      	cmp	r3, #1
   1b2e4:	d01a      	beq.n	1b31c <tls_interface_recvfrom+0x64>
   1b2e6:	2b02      	cmp	r3, #2
   1b2e8:	d010      	beq.n	1b30c <tls_interface_recvfrom+0x54>
   1b2ea:	2023      	movs	r0, #35	; 0x23
   1b2ec:	f7fb fc68 	bl	16bc0 <bsd_os_errno_set>
   1b2f0:	f04f 30ff 	mov.w	r0, #4294967295
   1b2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b2f8:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1b2fc:	463b      	mov	r3, r7
   1b2fe:	4632      	mov	r2, r6
   1b300:	4629      	mov	r1, r5
   1b302:	4620      	mov	r0, r4
   1b304:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b308:	f000 bee6 	b.w	1c0d8 <ip_interface_recvfrom>
   1b30c:	6803      	ldr	r3, [r0, #0]
   1b30e:	b29b      	uxth	r3, r3
   1b310:	2b02      	cmp	r3, #2
   1b312:	d007      	beq.n	1b324 <tls_interface_recvfrom+0x6c>
   1b314:	6803      	ldr	r3, [r0, #0]
   1b316:	b29b      	uxth	r3, r3
   1b318:	2b04      	cmp	r3, #4
   1b31a:	d003      	beq.n	1b324 <tls_interface_recvfrom+0x6c>
   1b31c:	6803      	ldr	r3, [r0, #0]
   1b31e:	b29b      	uxth	r3, r3
   1b320:	2b05      	cmp	r3, #5
   1b322:	d1e2      	bne.n	1b2ea <tls_interface_recvfrom+0x32>
   1b324:	4b08      	ldr	r3, [pc, #32]	; (1b348 <tls_interface_recvfrom+0x90>)
   1b326:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1b32a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1b32e:	2b02      	cmp	r3, #2
   1b330:	d1db      	bne.n	1b2ea <tls_interface_recvfrom+0x32>
   1b332:	4601      	mov	r1, r0
   1b334:	4620      	mov	r0, r4
   1b336:	f7ff fe21 	bl	1af7c <secure_client_socket>
   1b33a:	2800      	cmp	r0, #0
   1b33c:	d0dc      	beq.n	1b2f8 <tls_interface_recvfrom+0x40>
   1b33e:	dcd5      	bgt.n	1b2ec <tls_interface_recvfrom+0x34>
   1b340:	e7d6      	b.n	1b2f0 <tls_interface_recvfrom+0x38>
   1b342:	2009      	movs	r0, #9
   1b344:	e7d2      	b.n	1b2ec <tls_interface_recvfrom+0x34>
   1b346:	bf00      	nop
   1b348:	20021850 	.word	0x20021850

0001b34c <tls_interface_bind>:
   1b34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b350:	b082      	sub	sp, #8
   1b352:	460e      	mov	r6, r1
   1b354:	4617      	mov	r7, r2
   1b356:	4605      	mov	r5, r0
   1b358:	f006 fc76 	bl	21c48 <interface_socket_from_handle_get>
   1b35c:	2800      	cmp	r0, #0
   1b35e:	d069      	beq.n	1b434 <tls_interface_bind+0xe8>
   1b360:	6803      	ldr	r3, [r0, #0]
   1b362:	4604      	mov	r4, r0
   1b364:	b29b      	uxth	r3, r3
   1b366:	2b02      	cmp	r3, #2
   1b368:	d158      	bne.n	1b41c <tls_interface_bind+0xd0>
   1b36a:	463a      	mov	r2, r7
   1b36c:	4631      	mov	r1, r6
   1b36e:	4628      	mov	r0, r5
   1b370:	f001 f9c2 	bl	1c6f8 <ip_interface_bind>
   1b374:	2800      	cmp	r0, #0
   1b376:	d148      	bne.n	1b40a <tls_interface_bind+0xbe>
   1b378:	00ee      	lsls	r6, r5, #3
   1b37a:	4f2f      	ldr	r7, [pc, #188]	; (1b438 <tls_interface_bind+0xec>)
   1b37c:	1973      	adds	r3, r6, r5
   1b37e:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   1b382:	2b01      	cmp	r3, #1
   1b384:	d002      	beq.n	1b38c <tls_interface_bind+0x40>
   1b386:	b002      	add	sp, #8
   1b388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b38c:	f04f 3cff 	mov.w	ip, #4294967295
   1b390:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 1b43c <tls_interface_bind+0xf0>
   1b394:	f247 0281 	movw	r2, #28801	; 0x7081
   1b398:	eb0a 0906 	add.w	r9, sl, r6
   1b39c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b3a0:	69a1      	ldr	r1, [r4, #24]
   1b3a2:	4628      	mov	r0, r5
   1b3a4:	f8cd c004 	str.w	ip, [sp, #4]
   1b3a8:	f000 fb7c 	bl	1baa4 <ip_interface_request_create>
   1b3ac:	4680      	mov	r8, r0
   1b3ae:	2800      	cmp	r0, #0
   1b3b0:	d03e      	beq.n	1b430 <tls_interface_bind+0xe4>
   1b3b2:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1b3b6:	bbaa      	cbnz	r2, 1b424 <tls_interface_bind+0xd8>
   1b3b8:	1971      	adds	r1, r6, r5
   1b3ba:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   1b3be:	2224      	movs	r2, #36	; 0x24
   1b3c0:	f108 0014 	add.w	r0, r8, #20
   1b3c4:	f7f1 fbc2 	bl	cb4c <memcpy>
   1b3c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1b3cc:	4641      	mov	r1, r8
   1b3ce:	3324      	adds	r3, #36	; 0x24
   1b3d0:	f8c8 3008 	str.w	r3, [r8, #8]
   1b3d4:	6822      	ldr	r2, [r4, #0]
   1b3d6:	2304      	movs	r3, #4
   1b3d8:	0c12      	lsrs	r2, r2, #16
   1b3da:	0412      	lsls	r2, r2, #16
   1b3dc:	f042 020a 	orr.w	r2, r2, #10
   1b3e0:	6022      	str	r2, [r4, #0]
   1b3e2:	4620      	mov	r0, r4
   1b3e4:	f247 0281 	movw	r2, #28801	; 0x7081
   1b3e8:	f000 fb7c 	bl	1bae4 <ip_interface_request_send>
   1b3ec:	b968      	cbnz	r0, 1b40a <tls_interface_bind+0xbe>
   1b3ee:	6823      	ldr	r3, [r4, #0]
   1b3f0:	00db      	lsls	r3, r3, #3
   1b3f2:	d415      	bmi.n	1b420 <tls_interface_bind+0xd4>
   1b3f4:	4628      	mov	r0, r5
   1b3f6:	ab01      	add	r3, sp, #4
   1b3f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b3fc:	210b      	movs	r1, #11
   1b3fe:	f000 fb85 	bl	1bb0c <ip_interface_wait>
   1b402:	2800      	cmp	r0, #0
   1b404:	d0bf      	beq.n	1b386 <tls_interface_bind+0x3a>
   1b406:	2304      	movs	r3, #4
   1b408:	6023      	str	r3, [r4, #0]
   1b40a:	2800      	cmp	r0, #0
   1b40c:	ddbb      	ble.n	1b386 <tls_interface_bind+0x3a>
   1b40e:	f7fb fbd7 	bl	16bc0 <bsd_os_errno_set>
   1b412:	f04f 30ff 	mov.w	r0, #4294967295
   1b416:	b002      	add	sp, #8
   1b418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b41c:	202d      	movs	r0, #45	; 0x2d
   1b41e:	e7f6      	b.n	1b40e <tls_interface_bind+0xc2>
   1b420:	2073      	movs	r0, #115	; 0x73
   1b422:	e7f4      	b.n	1b40e <tls_interface_bind+0xc2>
   1b424:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   1b428:	6800      	ldr	r0, [r0, #0]
   1b42a:	f7f1 fb8f 	bl	cb4c <memcpy>
   1b42e:	e7c3      	b.n	1b3b8 <tls_interface_bind+0x6c>
   1b430:	200c      	movs	r0, #12
   1b432:	e7ec      	b.n	1b40e <tls_interface_bind+0xc2>
   1b434:	2009      	movs	r0, #9
   1b436:	e7ea      	b.n	1b40e <tls_interface_bind+0xc2>
   1b438:	20021850 	.word	0x20021850
   1b43c:	20021994 	.word	0x20021994

0001b440 <tls_interface_connect>:
   1b440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b442:	460e      	mov	r6, r1
   1b444:	4617      	mov	r7, r2
   1b446:	4604      	mov	r4, r0
   1b448:	f006 fbfe 	bl	21c48 <interface_socket_from_handle_get>
   1b44c:	b1e8      	cbz	r0, 1b48a <tls_interface_connect+0x4a>
   1b44e:	4b13      	ldr	r3, [pc, #76]	; (1b49c <tls_interface_connect+0x5c>)
   1b450:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1b454:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1b458:	2b02      	cmp	r3, #2
   1b45a:	d11c      	bne.n	1b496 <tls_interface_connect+0x56>
   1b45c:	6803      	ldr	r3, [r0, #0]
   1b45e:	4605      	mov	r5, r0
   1b460:	b29b      	uxth	r3, r3
   1b462:	2b02      	cmp	r3, #2
   1b464:	d003      	beq.n	1b46e <tls_interface_connect+0x2e>
   1b466:	6803      	ldr	r3, [r0, #0]
   1b468:	b29b      	uxth	r3, r3
   1b46a:	2b04      	cmp	r3, #4
   1b46c:	d113      	bne.n	1b496 <tls_interface_connect+0x56>
   1b46e:	463a      	mov	r2, r7
   1b470:	4631      	mov	r1, r6
   1b472:	4620      	mov	r0, r4
   1b474:	f000 ff58 	bl	1c328 <ip_interface_connect>
   1b478:	b110      	cbz	r0, 1b480 <tls_interface_connect+0x40>
   1b47a:	2800      	cmp	r0, #0
   1b47c:	dc06      	bgt.n	1b48c <tls_interface_connect+0x4c>
   1b47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b480:	4629      	mov	r1, r5
   1b482:	4620      	mov	r0, r4
   1b484:	f7ff fd7a 	bl	1af7c <secure_client_socket>
   1b488:	e7f7      	b.n	1b47a <tls_interface_connect+0x3a>
   1b48a:	2009      	movs	r0, #9
   1b48c:	f7fb fb98 	bl	16bc0 <bsd_os_errno_set>
   1b490:	f04f 30ff 	mov.w	r0, #4294967295
   1b494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b496:	202d      	movs	r0, #45	; 0x2d
   1b498:	e7f8      	b.n	1b48c <tls_interface_connect+0x4c>
   1b49a:	bf00      	nop
   1b49c:	20021850 	.word	0x20021850

0001b4a0 <tls_interface_listen>:
   1b4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4a4:	b085      	sub	sp, #20
   1b4a6:	4689      	mov	r9, r1
   1b4a8:	4605      	mov	r5, r0
   1b4aa:	f006 fbcd 	bl	21c48 <interface_socket_from_handle_get>
   1b4ae:	2800      	cmp	r0, #0
   1b4b0:	f000 8084 	beq.w	1b5bc <tls_interface_listen+0x11c>
   1b4b4:	6803      	ldr	r3, [r0, #0]
   1b4b6:	4604      	mov	r4, r0
   1b4b8:	00da      	lsls	r2, r3, #3
   1b4ba:	d47d      	bmi.n	1b5b8 <tls_interface_listen+0x118>
   1b4bc:	6903      	ldr	r3, [r0, #16]
   1b4be:	2b01      	cmp	r3, #1
   1b4c0:	d17a      	bne.n	1b5b8 <tls_interface_listen+0x118>
   1b4c2:	6803      	ldr	r3, [r0, #0]
   1b4c4:	b29b      	uxth	r3, r3
   1b4c6:	2b04      	cmp	r3, #4
   1b4c8:	d05d      	beq.n	1b586 <tls_interface_listen+0xe6>
   1b4ca:	6823      	ldr	r3, [r4, #0]
   1b4cc:	b29b      	uxth	r3, r3
   1b4ce:	2b0b      	cmp	r3, #11
   1b4d0:	d172      	bne.n	1b5b8 <tls_interface_listen+0x118>
   1b4d2:	4a3b      	ldr	r2, [pc, #236]	; (1b5c0 <tls_interface_listen+0x120>)
   1b4d4:	00ee      	lsls	r6, r5, #3
   1b4d6:	1973      	adds	r3, r6, r5
   1b4d8:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1b4dc:	9201      	str	r2, [sp, #4]
   1b4de:	2b01      	cmp	r3, #1
   1b4e0:	d16a      	bne.n	1b5b8 <tls_interface_listen+0x118>
   1b4e2:	2201      	movs	r2, #1
   1b4e4:	9901      	ldr	r1, [sp, #4]
   1b4e6:	1973      	adds	r3, r6, r5
   1b4e8:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
   1b4ec:	6823      	ldr	r3, [r4, #0]
   1b4ee:	2b0b      	cmp	r3, #11
   1b4f0:	d040      	beq.n	1b574 <tls_interface_listen+0xd4>
   1b4f2:	f04f 3cff 	mov.w	ip, #4294967295
   1b4f6:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 1b5c4 <tls_interface_listen+0x124>
   1b4fa:	f247 0281 	movw	r2, #28801	; 0x7081
   1b4fe:	eb0a 0806 	add.w	r8, sl, r6
   1b502:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b506:	69a1      	ldr	r1, [r4, #24]
   1b508:	4628      	mov	r0, r5
   1b50a:	6827      	ldr	r7, [r4, #0]
   1b50c:	f8cd c00c 	str.w	ip, [sp, #12]
   1b510:	f000 fac8 	bl	1baa4 <ip_interface_request_create>
   1b514:	4683      	mov	fp, r0
   1b516:	2800      	cmp	r0, #0
   1b518:	d046      	beq.n	1b5a8 <tls_interface_listen+0x108>
   1b51a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1b51e:	2a00      	cmp	r2, #0
   1b520:	d144      	bne.n	1b5ac <tls_interface_listen+0x10c>
   1b522:	9b01      	ldr	r3, [sp, #4]
   1b524:	1971      	adds	r1, r6, r5
   1b526:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1b52a:	2224      	movs	r2, #36	; 0x24
   1b52c:	f10b 0014 	add.w	r0, fp, #20
   1b530:	f7f1 fb0c 	bl	cb4c <memcpy>
   1b534:	f8db 2008 	ldr.w	r2, [fp, #8]
   1b538:	4659      	mov	r1, fp
   1b53a:	3224      	adds	r2, #36	; 0x24
   1b53c:	f8cb 2008 	str.w	r2, [fp, #8]
   1b540:	6822      	ldr	r2, [r4, #0]
   1b542:	463b      	mov	r3, r7
   1b544:	0c12      	lsrs	r2, r2, #16
   1b546:	0412      	lsls	r2, r2, #16
   1b548:	f042 020a 	orr.w	r2, r2, #10
   1b54c:	6022      	str	r2, [r4, #0]
   1b54e:	4620      	mov	r0, r4
   1b550:	f247 0281 	movw	r2, #28801	; 0x7081
   1b554:	f000 fac6 	bl	1bae4 <ip_interface_request_send>
   1b558:	b980      	cbnz	r0, 1b57c <tls_interface_listen+0xdc>
   1b55a:	6823      	ldr	r3, [r4, #0]
   1b55c:	00db      	lsls	r3, r3, #3
   1b55e:	d41b      	bmi.n	1b598 <tls_interface_listen+0xf8>
   1b560:	ab03      	add	r3, sp, #12
   1b562:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b566:	210b      	movs	r1, #11
   1b568:	4628      	mov	r0, r5
   1b56a:	f000 facf 	bl	1bb0c <ip_interface_wait>
   1b56e:	b108      	cbz	r0, 1b574 <tls_interface_listen+0xd4>
   1b570:	6027      	str	r7, [r4, #0]
   1b572:	e003      	b.n	1b57c <tls_interface_listen+0xdc>
   1b574:	4649      	mov	r1, r9
   1b576:	4628      	mov	r0, r5
   1b578:	f001 f960 	bl	1c83c <ip_interface_listen>
   1b57c:	2800      	cmp	r0, #0
   1b57e:	dc0c      	bgt.n	1b59a <tls_interface_listen+0xfa>
   1b580:	b005      	add	sp, #20
   1b582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b586:	4a0e      	ldr	r2, [pc, #56]	; (1b5c0 <tls_interface_listen+0x120>)
   1b588:	00ee      	lsls	r6, r5, #3
   1b58a:	1973      	adds	r3, r6, r5
   1b58c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1b590:	9201      	str	r2, [sp, #4]
   1b592:	2b02      	cmp	r3, #2
   1b594:	d199      	bne.n	1b4ca <tls_interface_listen+0x2a>
   1b596:	e7a4      	b.n	1b4e2 <tls_interface_listen+0x42>
   1b598:	2073      	movs	r0, #115	; 0x73
   1b59a:	f7fb fb11 	bl	16bc0 <bsd_os_errno_set>
   1b59e:	f04f 30ff 	mov.w	r0, #4294967295
   1b5a2:	b005      	add	sp, #20
   1b5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5a8:	200c      	movs	r0, #12
   1b5aa:	e7f6      	b.n	1b59a <tls_interface_listen+0xfa>
   1b5ac:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   1b5b0:	6800      	ldr	r0, [r0, #0]
   1b5b2:	f7f1 facb 	bl	cb4c <memcpy>
   1b5b6:	e7b4      	b.n	1b522 <tls_interface_listen+0x82>
   1b5b8:	202d      	movs	r0, #45	; 0x2d
   1b5ba:	e7ee      	b.n	1b59a <tls_interface_listen+0xfa>
   1b5bc:	2009      	movs	r0, #9
   1b5be:	e7ec      	b.n	1b59a <tls_interface_listen+0xfa>
   1b5c0:	20021850 	.word	0x20021850
   1b5c4:	20021994 	.word	0x20021994

0001b5c8 <tls_interface_accept>:
   1b5c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b5cc:	b083      	sub	sp, #12
   1b5ce:	460f      	mov	r7, r1
   1b5d0:	4690      	mov	r8, r2
   1b5d2:	4699      	mov	r9, r3
   1b5d4:	4606      	mov	r6, r0
   1b5d6:	f04f 34ff 	mov.w	r4, #4294967295
   1b5da:	f006 fb35 	bl	21c48 <interface_socket_from_handle_get>
   1b5de:	9401      	str	r4, [sp, #4]
   1b5e0:	2800      	cmp	r0, #0
   1b5e2:	d048      	beq.n	1b676 <tls_interface_accept+0xae>
   1b5e4:	6805      	ldr	r5, [r0, #0]
   1b5e6:	b2ad      	uxth	r5, r5
   1b5e8:	2d07      	cmp	r5, #7
   1b5ea:	d144      	bne.n	1b676 <tls_interface_accept+0xae>
   1b5ec:	6803      	ldr	r3, [r0, #0]
   1b5ee:	00db      	lsls	r3, r3, #3
   1b5f0:	d443      	bmi.n	1b67a <tls_interface_accept+0xb2>
   1b5f2:	464b      	mov	r3, r9
   1b5f4:	4642      	mov	r2, r8
   1b5f6:	4639      	mov	r1, r7
   1b5f8:	4630      	mov	r0, r6
   1b5fa:	f001 f99b 	bl	1c934 <ip_interface_accept>
   1b5fe:	1e04      	subs	r4, r0, #0
   1b600:	da08      	bge.n	1b614 <tls_interface_accept+0x4c>
   1b602:	4620      	mov	r0, r4
   1b604:	f7fb fadc 	bl	16bc0 <bsd_os_errno_set>
   1b608:	f04f 34ff 	mov.w	r4, #4294967295
   1b60c:	4620      	mov	r0, r4
   1b60e:	b003      	add	sp, #12
   1b610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b614:	f006 fb18 	bl	21c48 <interface_socket_from_handle_get>
   1b618:	6803      	ldr	r3, [r0, #0]
   1b61a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1b684 <tls_interface_accept+0xbc>
   1b61e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1b622:	6003      	str	r3, [r0, #0]
   1b624:	6803      	ldr	r3, [r0, #0]
   1b626:	eb04 07c4 	add.w	r7, r4, r4, lsl #3
   1b62a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1b62e:	00bf      	lsls	r7, r7, #2
   1b630:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1b634:	4605      	mov	r5, r0
   1b636:	6003      	str	r3, [r0, #0]
   1b638:	eb08 0186 	add.w	r1, r8, r6, lsl #2
   1b63c:	2224      	movs	r2, #36	; 0x24
   1b63e:	eb08 0007 	add.w	r0, r8, r7
   1b642:	f7f1 fa83 	bl	cb4c <memcpy>
   1b646:	2302      	movs	r3, #2
   1b648:	f808 3007 	strb.w	r3, [r8, r7]
   1b64c:	682a      	ldr	r2, [r5, #0]
   1b64e:	ab01      	add	r3, sp, #4
   1b650:	0c12      	lsrs	r2, r2, #16
   1b652:	0412      	lsls	r2, r2, #16
   1b654:	f042 020b 	orr.w	r2, r2, #11
   1b658:	602a      	str	r2, [r5, #0]
   1b65a:	210c      	movs	r1, #12
   1b65c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b660:	4620      	mov	r0, r4
   1b662:	f000 fa53 	bl	1bb0c <ip_interface_wait>
   1b666:	4605      	mov	r5, r0
   1b668:	2800      	cmp	r0, #0
   1b66a:	d0cf      	beq.n	1b60c <tls_interface_accept+0x44>
   1b66c:	4620      	mov	r0, r4
   1b66e:	f000 fb45 	bl	1bcfc <ip_interface_close>
   1b672:	462c      	mov	r4, r5
   1b674:	e7c5      	b.n	1b602 <tls_interface_accept+0x3a>
   1b676:	2409      	movs	r4, #9
   1b678:	e7c3      	b.n	1b602 <tls_interface_accept+0x3a>
   1b67a:	202d      	movs	r0, #45	; 0x2d
   1b67c:	f7fb faa0 	bl	16bc0 <bsd_os_errno_set>
   1b680:	e7c4      	b.n	1b60c <tls_interface_accept+0x44>
   1b682:	bf00      	nop
   1b684:	20021850 	.word	0x20021850

0001b688 <tls_interface_setopt>:
   1b688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b68c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1b690:	b082      	sub	sp, #8
   1b692:	9e08      	ldr	r6, [sp, #32]
   1b694:	d120      	bne.n	1b6d8 <tls_interface_setopt+0x50>
   1b696:	4698      	mov	r8, r3
   1b698:	4617      	mov	r7, r2
   1b69a:	4605      	mov	r5, r0
   1b69c:	2b00      	cmp	r3, #0
   1b69e:	f000 80a0 	beq.w	1b7e2 <tls_interface_setopt+0x15a>
   1b6a2:	f006 fad1 	bl	21c48 <interface_socket_from_handle_get>
   1b6a6:	2800      	cmp	r0, #0
   1b6a8:	f000 8097 	beq.w	1b7da <tls_interface_setopt+0x152>
   1b6ac:	6804      	ldr	r4, [r0, #0]
   1b6ae:	b2a4      	uxth	r4, r4
   1b6b0:	2c02      	cmp	r4, #2
   1b6b2:	d008      	beq.n	1b6c6 <tls_interface_setopt+0x3e>
   1b6b4:	6803      	ldr	r3, [r0, #0]
   1b6b6:	b29b      	uxth	r3, r3
   1b6b8:	2b04      	cmp	r3, #4
   1b6ba:	d004      	beq.n	1b6c6 <tls_interface_setopt+0x3e>
   1b6bc:	6803      	ldr	r3, [r0, #0]
   1b6be:	b29b      	uxth	r3, r3
   1b6c0:	2b05      	cmp	r3, #5
   1b6c2:	f040 808a 	bne.w	1b7da <tls_interface_setopt+0x152>
   1b6c6:	1e7a      	subs	r2, r7, #1
   1b6c8:	2a05      	cmp	r2, #5
   1b6ca:	f200 8090 	bhi.w	1b7ee <tls_interface_setopt+0x166>
   1b6ce:	e8df f002 	tbb	[pc, r2]
   1b6d2:	2718      	.short	0x2718
   1b6d4:	08594b3c 	.word	0x08594b3c
   1b6d8:	b002      	add	sp, #8
   1b6da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b6de:	f001 ba6b 	b.w	1cbb8 <ip_interface_setopt>
   1b6e2:	4601      	mov	r1, r0
   1b6e4:	e9cd 8600 	strd	r8, r6, [sp]
   1b6e8:	4628      	mov	r0, r5
   1b6ea:	f247 0301 	movw	r3, #28673	; 0x7001
   1b6ee:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b6f2:	f000 ff8b 	bl	1c60c <ip_interface_socketoption_send>
   1b6f6:	2800      	cmp	r0, #0
   1b6f8:	d161      	bne.n	1b7be <tls_interface_setopt+0x136>
   1b6fa:	2000      	movs	r0, #0
   1b6fc:	b002      	add	sp, #8
   1b6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b702:	2e04      	cmp	r6, #4
   1b704:	d15a      	bne.n	1b7bc <tls_interface_setopt+0x134>
   1b706:	f8d8 0000 	ldr.w	r0, [r8]
   1b70a:	2800      	cmp	r0, #0
   1b70c:	d05e      	beq.n	1b7cc <tls_interface_setopt+0x144>
   1b70e:	2801      	cmp	r0, #1
   1b710:	d154      	bne.n	1b7bc <tls_interface_setopt+0x134>
   1b712:	4b38      	ldr	r3, [pc, #224]	; (1b7f4 <tls_interface_setopt+0x16c>)
   1b714:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b718:	f803 0024 	strb.w	r0, [r3, r4, lsl #2]
   1b71c:	2000      	movs	r0, #0
   1b71e:	e7ed      	b.n	1b6fc <tls_interface_setopt+0x74>
   1b720:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   1b724:	d04a      	beq.n	1b7bc <tls_interface_setopt+0x134>
   1b726:	f016 0703 	ands.w	r7, r6, #3
   1b72a:	d147      	bne.n	1b7bc <tls_interface_setopt+0x134>
   1b72c:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b730:	00a4      	lsls	r4, r4, #2
   1b732:	4b30      	ldr	r3, [pc, #192]	; (1b7f4 <tls_interface_setopt+0x16c>)
   1b734:	1d20      	adds	r0, r4, #4
   1b736:	4418      	add	r0, r3
   1b738:	4423      	add	r3, r4
   1b73a:	4632      	mov	r2, r6
   1b73c:	4641      	mov	r1, r8
   1b73e:	f883 c003 	strb.w	ip, [r3, #3]
   1b742:	f7f1 fa03 	bl	cb4c <memcpy>
   1b746:	4638      	mov	r0, r7
   1b748:	e7d8      	b.n	1b6fc <tls_interface_setopt+0x74>
   1b74a:	2e01      	cmp	r6, #1
   1b74c:	d136      	bne.n	1b7bc <tls_interface_setopt+0x134>
   1b74e:	f898 2000 	ldrb.w	r2, [r8]
   1b752:	4b28      	ldr	r3, [pc, #160]	; (1b7f4 <tls_interface_setopt+0x16c>)
   1b754:	3200      	adds	r2, #0
   1b756:	bf18      	it	ne
   1b758:	2201      	movne	r2, #1
   1b75a:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b75e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1b762:	7062      	strb	r2, [r4, #1]
   1b764:	2000      	movs	r0, #0
   1b766:	e7c9      	b.n	1b6fc <tls_interface_setopt+0x74>
   1b768:	2e04      	cmp	r6, #4
   1b76a:	d127      	bne.n	1b7bc <tls_interface_setopt+0x134>
   1b76c:	f8d8 2000 	ldr.w	r2, [r8]
   1b770:	2a02      	cmp	r2, #2
   1b772:	d823      	bhi.n	1b7bc <tls_interface_setopt+0x134>
   1b774:	4b1f      	ldr	r3, [pc, #124]	; (1b7f4 <tls_interface_setopt+0x16c>)
   1b776:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b77a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1b77e:	70a2      	strb	r2, [r4, #2]
   1b780:	2000      	movs	r0, #0
   1b782:	e7bb      	b.n	1b6fc <tls_interface_setopt+0x74>
   1b784:	4c1c      	ldr	r4, [pc, #112]	; (1b7f8 <tls_interface_setopt+0x170>)
   1b786:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   1b78a:	b138      	cbz	r0, 1b79c <tls_interface_setopt+0x114>
   1b78c:	f005 fd5e 	bl	2124c <nrf_free>
   1b790:	2200      	movs	r2, #0
   1b792:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   1b796:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   1b79a:	605a      	str	r2, [r3, #4]
   1b79c:	2e00      	cmp	r6, #0
   1b79e:	d0ac      	beq.n	1b6fa <tls_interface_setopt+0x72>
   1b7a0:	4630      	mov	r0, r6
   1b7a2:	f005 fd49 	bl	21238 <nrf_malloc>
   1b7a6:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   1b7aa:	b1c0      	cbz	r0, 1b7de <tls_interface_setopt+0x156>
   1b7ac:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1b7b0:	4632      	mov	r2, r6
   1b7b2:	4641      	mov	r1, r8
   1b7b4:	6066      	str	r6, [r4, #4]
   1b7b6:	f7f1 f9c9 	bl	cb4c <memcpy>
   1b7ba:	e79e      	b.n	1b6fa <tls_interface_setopt+0x72>
   1b7bc:	2016      	movs	r0, #22
   1b7be:	f7fb f9ff 	bl	16bc0 <bsd_os_errno_set>
   1b7c2:	f04f 30ff 	mov.w	r0, #4294967295
   1b7c6:	b002      	add	sp, #8
   1b7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b7cc:	2202      	movs	r2, #2
   1b7ce:	4b09      	ldr	r3, [pc, #36]	; (1b7f4 <tls_interface_setopt+0x16c>)
   1b7d0:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b7d4:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
   1b7d8:	e790      	b.n	1b6fc <tls_interface_setopt+0x74>
   1b7da:	2009      	movs	r0, #9
   1b7dc:	e7ef      	b.n	1b7be <tls_interface_setopt+0x136>
   1b7de:	200c      	movs	r0, #12
   1b7e0:	e7ed      	b.n	1b7be <tls_interface_setopt+0x136>
   1b7e2:	200e      	movs	r0, #14
   1b7e4:	f7fb f9ec 	bl	16bc0 <bsd_os_errno_set>
   1b7e8:	f04f 30ff 	mov.w	r0, #4294967295
   1b7ec:	e786      	b.n	1b6fc <tls_interface_setopt+0x74>
   1b7ee:	202a      	movs	r0, #42	; 0x2a
   1b7f0:	e7e5      	b.n	1b7be <tls_interface_setopt+0x136>
   1b7f2:	bf00      	nop
   1b7f4:	20021850 	.word	0x20021850
   1b7f8:	20021994 	.word	0x20021994

0001b7fc <tls_interface_getopt>:
   1b7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b7fe:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1b802:	b083      	sub	sp, #12
   1b804:	9f08      	ldr	r7, [sp, #32]
   1b806:	d112      	bne.n	1b82e <tls_interface_getopt+0x32>
   1b808:	461d      	mov	r5, r3
   1b80a:	b16b      	cbz	r3, 1b828 <tls_interface_getopt+0x2c>
   1b80c:	b167      	cbz	r7, 1b828 <tls_interface_getopt+0x2c>
   1b80e:	4606      	mov	r6, r0
   1b810:	4614      	mov	r4, r2
   1b812:	f006 fa19 	bl	21c48 <interface_socket_from_handle_get>
   1b816:	b178      	cbz	r0, 1b838 <tls_interface_getopt+0x3c>
   1b818:	3c01      	subs	r4, #1
   1b81a:	2c05      	cmp	r4, #5
   1b81c:	d859      	bhi.n	1b8d2 <tls_interface_getopt+0xd6>
   1b81e:	e8df f004 	tbb	[pc, r4]
   1b822:	2818      	.short	0x2818
   1b824:	0d584c40 	.word	0x0d584c40
   1b828:	200e      	movs	r0, #14
   1b82a:	b003      	add	sp, #12
   1b82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b82e:	b003      	add	sp, #12
   1b830:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1b834:	f001 ba62 	b.w	1ccfc <ip_interface_getopt>
   1b838:	2009      	movs	r0, #9
   1b83a:	e7f6      	b.n	1b82a <tls_interface_getopt+0x2e>
   1b83c:	4601      	mov	r1, r0
   1b83e:	e9cd 5700 	strd	r5, r7, [sp]
   1b842:	4630      	mov	r0, r6
   1b844:	f247 0301 	movw	r3, #28673	; 0x7001
   1b848:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b84c:	f000 fe2e 	bl	1c4ac <ip_interface_socketoption_get>
   1b850:	e7eb      	b.n	1b82a <tls_interface_getopt+0x2e>
   1b852:	683b      	ldr	r3, [r7, #0]
   1b854:	2b04      	cmp	r3, #4
   1b856:	d13e      	bne.n	1b8d6 <tls_interface_getopt+0xda>
   1b858:	4b22      	ldr	r3, [pc, #136]	; (1b8e4 <tls_interface_getopt+0xe8>)
   1b85a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1b85e:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   1b862:	2000      	movs	r0, #0
   1b864:	f1a3 0301 	sub.w	r3, r3, #1
   1b868:	fab3 f383 	clz	r3, r3
   1b86c:	095b      	lsrs	r3, r3, #5
   1b86e:	602b      	str	r3, [r5, #0]
   1b870:	e7db      	b.n	1b82a <tls_interface_getopt+0x2e>
   1b872:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1b876:	491b      	ldr	r1, [pc, #108]	; (1b8e4 <tls_interface_getopt+0xe8>)
   1b878:	683b      	ldr	r3, [r7, #0]
   1b87a:	00b6      	lsls	r6, r6, #2
   1b87c:	198a      	adds	r2, r1, r6
   1b87e:	f013 0403 	ands.w	r4, r3, #3
   1b882:	78d0      	ldrb	r0, [r2, #3]
   1b884:	d129      	bne.n	1b8da <tls_interface_getopt+0xde>
   1b886:	089b      	lsrs	r3, r3, #2
   1b888:	4283      	cmp	r3, r0
   1b88a:	bf28      	it	cs
   1b88c:	4603      	movcs	r3, r0
   1b88e:	009a      	lsls	r2, r3, #2
   1b890:	b31b      	cbz	r3, 1b8da <tls_interface_getopt+0xde>
   1b892:	3604      	adds	r6, #4
   1b894:	4431      	add	r1, r6
   1b896:	603a      	str	r2, [r7, #0]
   1b898:	4628      	mov	r0, r5
   1b89a:	f7f1 f957 	bl	cb4c <memcpy>
   1b89e:	4620      	mov	r0, r4
   1b8a0:	e7c3      	b.n	1b82a <tls_interface_getopt+0x2e>
   1b8a2:	683b      	ldr	r3, [r7, #0]
   1b8a4:	2b01      	cmp	r3, #1
   1b8a6:	d116      	bne.n	1b8d6 <tls_interface_getopt+0xda>
   1b8a8:	4b0e      	ldr	r3, [pc, #56]	; (1b8e4 <tls_interface_getopt+0xe8>)
   1b8aa:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1b8ae:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1b8b2:	7873      	ldrb	r3, [r6, #1]
   1b8b4:	2000      	movs	r0, #0
   1b8b6:	702b      	strb	r3, [r5, #0]
   1b8b8:	e7b7      	b.n	1b82a <tls_interface_getopt+0x2e>
   1b8ba:	683b      	ldr	r3, [r7, #0]
   1b8bc:	2b04      	cmp	r3, #4
   1b8be:	d10a      	bne.n	1b8d6 <tls_interface_getopt+0xda>
   1b8c0:	4b08      	ldr	r3, [pc, #32]	; (1b8e4 <tls_interface_getopt+0xe8>)
   1b8c2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1b8c6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1b8ca:	78b3      	ldrb	r3, [r6, #2]
   1b8cc:	2000      	movs	r0, #0
   1b8ce:	602b      	str	r3, [r5, #0]
   1b8d0:	e7ab      	b.n	1b82a <tls_interface_getopt+0x2e>
   1b8d2:	202a      	movs	r0, #42	; 0x2a
   1b8d4:	e7a9      	b.n	1b82a <tls_interface_getopt+0x2e>
   1b8d6:	2016      	movs	r0, #22
   1b8d8:	e7a7      	b.n	1b82a <tls_interface_getopt+0x2e>
   1b8da:	2800      	cmp	r0, #0
   1b8dc:	d1fb      	bne.n	1b8d6 <tls_interface_getopt+0xda>
   1b8de:	6038      	str	r0, [r7, #0]
   1b8e0:	e7a3      	b.n	1b82a <tls_interface_getopt+0x2e>
   1b8e2:	bf00      	nop
   1b8e4:	20021850 	.word	0x20021850

0001b8e8 <tls_rpc_ip_event_handler>:
   1b8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b8ea:	f248 0581 	movw	r5, #32897	; 0x8081
   1b8ee:	42ab      	cmp	r3, r5
   1b8f0:	460c      	mov	r4, r1
   1b8f2:	d044      	beq.n	1b97e <tls_rpc_ip_event_handler+0x96>
   1b8f4:	f249 0182 	movw	r1, #36994	; 0x9082
   1b8f8:	428b      	cmp	r3, r1
   1b8fa:	4606      	mov	r6, r0
   1b8fc:	d02d      	beq.n	1b95a <tls_rpc_ip_event_handler+0x72>
   1b8fe:	f248 0102 	movw	r1, #32770	; 0x8002
   1b902:	428b      	cmp	r3, r1
   1b904:	d001      	beq.n	1b90a <tls_rpc_ip_event_handler+0x22>
   1b906:	2001      	movs	r0, #1
   1b908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b90a:	2c00      	cmp	r4, #0
   1b90c:	d0fb      	beq.n	1b906 <tls_rpc_ip_event_handler+0x1e>
   1b90e:	6963      	ldr	r3, [r4, #20]
   1b910:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1b914:	d002      	beq.n	1b91c <tls_rpc_ip_event_handler+0x34>
   1b916:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1b91a:	d1f4      	bne.n	1b906 <tls_rpc_ip_event_handler+0x1e>
   1b91c:	6823      	ldr	r3, [r4, #0]
   1b91e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1b922:	6023      	str	r3, [r4, #0]
   1b924:	6955      	ldr	r5, [r2, #20]
   1b926:	bb05      	cbnz	r5, 1b96a <tls_rpc_ip_event_handler+0x82>
   1b928:	6823      	ldr	r3, [r4, #0]
   1b92a:	0c1b      	lsrs	r3, r3, #16
   1b92c:	041b      	lsls	r3, r3, #16
   1b92e:	f043 0305 	orr.w	r3, r3, #5
   1b932:	6023      	str	r3, [r4, #0]
   1b934:	6823      	ldr	r3, [r4, #0]
   1b936:	00db      	lsls	r3, r3, #3
   1b938:	d50d      	bpl.n	1b956 <tls_rpc_ip_event_handler+0x6e>
   1b93a:	4b2a      	ldr	r3, [pc, #168]	; (1b9e4 <tls_rpc_ip_event_handler+0xfc>)
   1b93c:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   1b940:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1b944:	2b02      	cmp	r3, #2
   1b946:	d106      	bne.n	1b956 <tls_rpc_ip_event_handler+0x6e>
   1b948:	4630      	mov	r0, r6
   1b94a:	4621      	mov	r1, r4
   1b94c:	f7ff fb16 	bl	1af7c <secure_client_socket>
   1b950:	b108      	cbz	r0, 1b956 <tls_rpc_ip_event_handler+0x6e>
   1b952:	2873      	cmp	r0, #115	; 0x73
   1b954:	d10c      	bne.n	1b970 <tls_rpc_ip_event_handler+0x88>
   1b956:	2000      	movs	r0, #0
   1b958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b95a:	2c00      	cmp	r4, #0
   1b95c:	d0fb      	beq.n	1b956 <tls_rpc_ip_event_handler+0x6e>
   1b95e:	6823      	ldr	r3, [r4, #0]
   1b960:	b29b      	uxth	r3, r3
   1b962:	2b0b      	cmp	r3, #11
   1b964:	d1f7      	bne.n	1b956 <tls_rpc_ip_event_handler+0x6e>
   1b966:	6915      	ldr	r5, [r2, #16]
   1b968:	b1cd      	cbz	r5, 1b99e <tls_rpc_ip_event_handler+0xb6>
   1b96a:	4628      	mov	r0, r5
   1b96c:	f000 f890 	bl	1ba90 <rpc_error_to_nrf_bsd_error>
   1b970:	6060      	str	r0, [r4, #4]
   1b972:	6823      	ldr	r3, [r4, #0]
   1b974:	2000      	movs	r0, #0
   1b976:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1b97a:	6023      	str	r3, [r4, #0]
   1b97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b97e:	2900      	cmp	r1, #0
   1b980:	d0e9      	beq.n	1b956 <tls_rpc_ip_event_handler+0x6e>
   1b982:	680b      	ldr	r3, [r1, #0]
   1b984:	b29b      	uxth	r3, r3
   1b986:	2b0a      	cmp	r3, #10
   1b988:	d1e5      	bne.n	1b956 <tls_rpc_ip_event_handler+0x6e>
   1b98a:	6950      	ldr	r0, [r2, #20]
   1b98c:	2800      	cmp	r0, #0
   1b98e:	d1ed      	bne.n	1b96c <tls_rpc_ip_event_handler+0x84>
   1b990:	680b      	ldr	r3, [r1, #0]
   1b992:	0c1b      	lsrs	r3, r3, #16
   1b994:	041b      	lsls	r3, r3, #16
   1b996:	f043 030b 	orr.w	r3, r3, #11
   1b99a:	600b      	str	r3, [r1, #0]
   1b99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b99e:	6823      	ldr	r3, [r4, #0]
   1b9a0:	4f11      	ldr	r7, [pc, #68]	; (1b9e8 <tls_rpc_ip_event_handler+0x100>)
   1b9a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   1b9a6:	6023      	str	r3, [r4, #0]
   1b9a8:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   1b9ac:	b130      	cbz	r0, 1b9bc <tls_rpc_ip_event_handler+0xd4>
   1b9ae:	f005 fc4d 	bl	2124c <nrf_free>
   1b9b2:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   1b9b6:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   1b9ba:	605d      	str	r5, [r3, #4]
   1b9bc:	6823      	ldr	r3, [r4, #0]
   1b9be:	2000      	movs	r0, #0
   1b9c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   1b9c4:	6023      	str	r3, [r4, #0]
   1b9c6:	6823      	ldr	r3, [r4, #0]
   1b9c8:	0c1b      	lsrs	r3, r3, #16
   1b9ca:	041b      	lsls	r3, r3, #16
   1b9cc:	f043 030c 	orr.w	r3, r3, #12
   1b9d0:	6023      	str	r3, [r4, #0]
   1b9d2:	6823      	ldr	r3, [r4, #0]
   1b9d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b9d8:	6023      	str	r3, [r4, #0]
   1b9da:	6823      	ldr	r3, [r4, #0]
   1b9dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1b9e0:	6023      	str	r3, [r4, #0]
   1b9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b9e4:	20021850 	.word	0x20021850
   1b9e8:	20021994 	.word	0x20021994

0001b9ec <ip_client_event_handler>:
   1b9ec:	f850 1b08 	ldr.w	r1, [r0], #8
   1b9f0:	0c09      	lsrs	r1, r1, #16
   1b9f2:	f001 bb23 	b.w	1d03c <rpc_ip_event_handler>
   1b9f6:	bf00      	nop

0001b9f8 <rpc_ip_client_init>:
   1b9f8:	4801      	ldr	r0, [pc, #4]	; (1ba00 <rpc_ip_client_init+0x8>)
   1b9fa:	f001 be21 	b.w	1d640 <rpc_client_register>
   1b9fe:	bf00      	nop
   1ba00:	0002f270 	.word	0x0002f270

0001ba04 <rpc_ip_client_request_alloc>:
   1ba04:	2300      	movs	r3, #0
   1ba06:	b510      	push	{r4, lr}
   1ba08:	b082      	sub	sp, #8
   1ba0a:	9301      	str	r3, [sp, #4]
   1ba0c:	b158      	cbz	r0, 1ba26 <rpc_ip_client_request_alloc+0x22>
   1ba0e:	4604      	mov	r4, r0
   1ba10:	aa01      	add	r2, sp, #4
   1ba12:	2004      	movs	r0, #4
   1ba14:	f001 fe8e 	bl	1d734 <rpc_message_alloc>
   1ba18:	b918      	cbnz	r0, 1ba22 <rpc_ip_client_request_alloc+0x1e>
   1ba1a:	9b01      	ldr	r3, [sp, #4]
   1ba1c:	b10b      	cbz	r3, 1ba22 <rpc_ip_client_request_alloc+0x1e>
   1ba1e:	3308      	adds	r3, #8
   1ba20:	6023      	str	r3, [r4, #0]
   1ba22:	b002      	add	sp, #8
   1ba24:	bd10      	pop	{r4, pc}
   1ba26:	2007      	movs	r0, #7
   1ba28:	b002      	add	sp, #8
   1ba2a:	bd10      	pop	{r4, pc}

0001ba2c <rpc_ip_client_request_send>:
   1ba2c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1ba30:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   1ba34:	d10b      	bne.n	1ba4e <rpc_ip_client_request_send+0x22>
   1ba36:	b160      	cbz	r0, 1ba52 <rpc_ip_client_request_send+0x26>
   1ba38:	4603      	mov	r3, r0
   1ba3a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1ba3e:	2004      	movs	r0, #4
   1ba40:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1ba44:	f843 1d08 	str.w	r1, [r3, #-8]!
   1ba48:	4619      	mov	r1, r3
   1ba4a:	f001 be63 	b.w	1d714 <rpc_message_send>
   1ba4e:	200f      	movs	r0, #15
   1ba50:	4770      	bx	lr
   1ba52:	2007      	movs	r0, #7
   1ba54:	4770      	bx	lr
   1ba56:	bf00      	nop

0001ba58 <rpc_ip_client_message_free>:
   1ba58:	b120      	cbz	r0, 1ba64 <rpc_ip_client_message_free+0xc>
   1ba5a:	f1a0 0108 	sub.w	r1, r0, #8
   1ba5e:	2004      	movs	r0, #4
   1ba60:	f001 be94 	b.w	1d78c <rpc_message_free>
   1ba64:	2007      	movs	r0, #7
   1ba66:	4770      	bx	lr

0001ba68 <rpc_ip_client_data_free>:
   1ba68:	b118      	cbz	r0, 1ba72 <rpc_ip_client_data_free+0xa>
   1ba6a:	4601      	mov	r1, r0
   1ba6c:	2004      	movs	r0, #4
   1ba6e:	f001 be99 	b.w	1d7a4 <rpc_message_data_free>
   1ba72:	2007      	movs	r0, #7
   1ba74:	4770      	bx	lr
   1ba76:	bf00      	nop

0001ba78 <ip_recvd_packet_free_cb>:
   1ba78:	b510      	push	{r4, lr}
   1ba7a:	4604      	mov	r4, r0
   1ba7c:	6800      	ldr	r0, [r0, #0]
   1ba7e:	f7ff fff3 	bl	1ba68 <rpc_ip_client_data_free>
   1ba82:	68a0      	ldr	r0, [r4, #8]
   1ba84:	b118      	cbz	r0, 1ba8e <ip_recvd_packet_free_cb+0x16>
   1ba86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ba8a:	f005 bbdf 	b.w	2124c <nrf_free>
   1ba8e:	bd10      	pop	{r4, pc}

0001ba90 <rpc_error_to_nrf_bsd_error>:
   1ba90:	2810      	cmp	r0, #16
   1ba92:	bf9a      	itte	ls
   1ba94:	4b02      	ldrls	r3, [pc, #8]	; (1baa0 <rpc_error_to_nrf_bsd_error+0x10>)
   1ba96:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   1ba9a:	202d      	movhi	r0, #45	; 0x2d
   1ba9c:	4770      	bx	lr
   1ba9e:	bf00      	nop
   1baa0:	0002f280 	.word	0x0002f280

0001baa4 <ip_interface_request_create>:
   1baa4:	b570      	push	{r4, r5, r6, lr}
   1baa6:	2500      	movs	r5, #0
   1baa8:	b082      	sub	sp, #8
   1baaa:	ac02      	add	r4, sp, #8
   1baac:	f844 5d04 	str.w	r5, [r4, #-4]!
   1bab0:	4606      	mov	r6, r0
   1bab2:	460d      	mov	r5, r1
   1bab4:	4620      	mov	r0, r4
   1bab6:	4619      	mov	r1, r3
   1bab8:	4614      	mov	r4, r2
   1baba:	f7ff ffa3 	bl	1ba04 <rpc_ip_client_request_alloc>
   1babe:	b960      	cbnz	r0, 1bada <ip_interface_request_create+0x36>
   1bac0:	9b01      	ldr	r3, [sp, #4]
   1bac2:	2208      	movs	r2, #8
   1bac4:	7258      	strb	r0, [r3, #9]
   1bac6:	7298      	strb	r0, [r3, #10]
   1bac8:	72d8      	strb	r0, [r3, #11]
   1baca:	4618      	mov	r0, r3
   1bacc:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   1bad0:	60dc      	str	r4, [r3, #12]
   1bad2:	611d      	str	r5, [r3, #16]
   1bad4:	721a      	strb	r2, [r3, #8]
   1bad6:	b002      	add	sp, #8
   1bad8:	bd70      	pop	{r4, r5, r6, pc}
   1bada:	9b01      	ldr	r3, [sp, #4]
   1badc:	4618      	mov	r0, r3
   1bade:	b002      	add	sp, #8
   1bae0:	bd70      	pop	{r4, r5, r6, pc}
   1bae2:	bf00      	nop

0001bae4 <ip_interface_request_send>:
   1bae4:	b570      	push	{r4, r5, r6, lr}
   1bae6:	460c      	mov	r4, r1
   1bae8:	4605      	mov	r5, r0
   1baea:	4611      	mov	r1, r2
   1baec:	4620      	mov	r0, r4
   1baee:	461e      	mov	r6, r3
   1baf0:	f7ff ff9c 	bl	1ba2c <rpc_ip_client_request_send>
   1baf4:	b900      	cbnz	r0, 1baf8 <ip_interface_request_send+0x14>
   1baf6:	bd70      	pop	{r4, r5, r6, pc}
   1baf8:	6820      	ldr	r0, [r4, #0]
   1bafa:	b108      	cbz	r0, 1bb00 <ip_interface_request_send+0x1c>
   1bafc:	f7ff ffb4 	bl	1ba68 <rpc_ip_client_data_free>
   1bb00:	4620      	mov	r0, r4
   1bb02:	f7ff ffa9 	bl	1ba58 <rpc_ip_client_message_free>
   1bb06:	602e      	str	r6, [r5, #0]
   1bb08:	2023      	movs	r0, #35	; 0x23
   1bb0a:	bd70      	pop	{r4, r5, r6, pc}

0001bb0c <ip_interface_wait>:
   1bb0c:	b538      	push	{r3, r4, r5, lr}
   1bb0e:	4605      	mov	r5, r0
   1bb10:	f006 f826 	bl	21b60 <interface_socket_wait>
   1bb14:	4604      	mov	r4, r0
   1bb16:	b108      	cbz	r0, 1bb1c <ip_interface_wait+0x10>
   1bb18:	4620      	mov	r0, r4
   1bb1a:	bd38      	pop	{r3, r4, r5, pc}
   1bb1c:	4628      	mov	r0, r5
   1bb1e:	f006 f893 	bl	21c48 <interface_socket_from_handle_get>
   1bb22:	2800      	cmp	r0, #0
   1bb24:	d0f8      	beq.n	1bb18 <ip_interface_wait+0xc>
   1bb26:	6844      	ldr	r4, [r0, #4]
   1bb28:	2c00      	cmp	r4, #0
   1bb2a:	d0f5      	beq.n	1bb18 <ip_interface_wait+0xc>
   1bb2c:	2300      	movs	r3, #0
   1bb2e:	6043      	str	r3, [r0, #4]
   1bb30:	4620      	mov	r0, r4
   1bb32:	bd38      	pop	{r3, r4, r5, pc}

0001bb34 <ip_interface_init>:
   1bb34:	b538      	push	{r3, r4, r5, lr}
   1bb36:	2300      	movs	r3, #0
   1bb38:	4d09      	ldr	r5, [pc, #36]	; (1bb60 <ip_interface_init+0x2c>)
   1bb3a:	4c0a      	ldr	r4, [pc, #40]	; (1bb64 <ip_interface_init+0x30>)
   1bb3c:	4619      	mov	r1, r3
   1bb3e:	2224      	movs	r2, #36	; 0x24
   1bb40:	4809      	ldr	r0, [pc, #36]	; (1bb68 <ip_interface_init+0x34>)
   1bb42:	602b      	str	r3, [r5, #0]
   1bb44:	6023      	str	r3, [r4, #0]
   1bb46:	f00a fa99 	bl	2607c <memset>
   1bb4a:	f7ff ff55 	bl	1b9f8 <rpc_ip_client_init>
   1bb4e:	b918      	cbnz	r0, 1bb58 <ip_interface_init+0x24>
   1bb50:	2201      	movs	r2, #1
   1bb52:	4b06      	ldr	r3, [pc, #24]	; (1bb6c <ip_interface_init+0x38>)
   1bb54:	701a      	strb	r2, [r3, #0]
   1bb56:	bd38      	pop	{r3, r4, r5, pc}
   1bb58:	f04f 30ff 	mov.w	r0, #4294967295
   1bb5c:	bd38      	pop	{r3, r4, r5, pc}
   1bb5e:	bf00      	nop
   1bb60:	200219e4 	.word	0x200219e4
   1bb64:	200219e0 	.word	0x200219e0
   1bb68:	200219e8 	.word	0x200219e8
   1bb6c:	20026276 	.word	0x20026276

0001bb70 <ip_interface_open>:
   1bb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb74:	2500      	movs	r5, #0
   1bb76:	f04f 37ff 	mov.w	r7, #4294967295
   1bb7a:	4c5e      	ldr	r4, [pc, #376]	; (1bcf4 <ip_interface_open+0x184>)
   1bb7c:	4606      	mov	r6, r0
   1bb7e:	7820      	ldrb	r0, [r4, #0]
   1bb80:	b084      	sub	sp, #16
   1bb82:	e9cd 5701 	strd	r5, r7, [sp, #4]
   1bb86:	2800      	cmp	r0, #0
   1bb88:	f000 80b0 	beq.w	1bcec <ip_interface_open+0x17c>
   1bb8c:	4690      	mov	r8, r2
   1bb8e:	f026 0208 	bic.w	r2, r6, #8
   1bb92:	2a02      	cmp	r2, #2
   1bb94:	460c      	mov	r4, r1
   1bb96:	d002      	beq.n	1bb9e <ip_interface_open+0x2e>
   1bb98:	2e05      	cmp	r6, #5
   1bb9a:	f040 808d 	bne.w	1bcb8 <ip_interface_open+0x148>
   1bb9e:	1e63      	subs	r3, r4, #1
   1bba0:	2b02      	cmp	r3, #2
   1bba2:	f200 809d 	bhi.w	1bce0 <ip_interface_open+0x170>
   1bba6:	f1b8 0f00 	cmp.w	r8, #0
   1bbaa:	d159      	bne.n	1bc60 <ip_interface_open+0xf0>
   1bbac:	2c01      	cmp	r4, #1
   1bbae:	d06f      	beq.n	1bc90 <ip_interface_open+0x120>
   1bbb0:	2c03      	cmp	r4, #3
   1bbb2:	bf18      	it	ne
   1bbb4:	f04f 0802 	movne.w	r8, #2
   1bbb8:	4a4f      	ldr	r2, [pc, #316]	; (1bcf8 <ip_interface_open+0x188>)
   1bbba:	4621      	mov	r1, r4
   1bbbc:	a801      	add	r0, sp, #4
   1bbbe:	f005 ff1d 	bl	219fc <interface_socket_allocate>
   1bbc2:	9b01      	ldr	r3, [sp, #4]
   1bbc4:	4607      	mov	r7, r0
   1bbc6:	2b00      	cmp	r3, #0
   1bbc8:	d060      	beq.n	1bc8c <ip_interface_open+0x11c>
   1bbca:	2100      	movs	r1, #0
   1bbcc:	a804      	add	r0, sp, #16
   1bbce:	f840 1d04 	str.w	r1, [r0, #-4]!
   1bbd2:	e9c3 6403 	strd	r6, r4, [r3, #12]
   1bbd6:	f8c3 8014 	str.w	r8, [r3, #20]
   1bbda:	f7ff ff13 	bl	1ba04 <rpc_ip_client_request_alloc>
   1bbde:	2800      	cmp	r0, #0
   1bbe0:	d151      	bne.n	1bc86 <ip_interface_open+0x116>
   1bbe2:	f247 0201 	movw	r2, #28673	; 0x7001
   1bbe6:	f04f 33ff 	mov.w	r3, #4294967295
   1bbea:	2108      	movs	r1, #8
   1bbec:	9d03      	ldr	r5, [sp, #12]
   1bbee:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   1bbf2:	60ea      	str	r2, [r5, #12]
   1bbf4:	7268      	strb	r0, [r5, #9]
   1bbf6:	72a8      	strb	r0, [r5, #10]
   1bbf8:	72e8      	strb	r0, [r5, #11]
   1bbfa:	7229      	strb	r1, [r5, #8]
   1bbfc:	742b      	strb	r3, [r5, #16]
   1bbfe:	746b      	strb	r3, [r5, #17]
   1bc00:	74ab      	strb	r3, [r5, #18]
   1bc02:	74eb      	strb	r3, [r5, #19]
   1bc04:	68ab      	ldr	r3, [r5, #8]
   1bc06:	2e05      	cmp	r6, #5
   1bc08:	f103 030c 	add.w	r3, r3, #12
   1bc0c:	60ab      	str	r3, [r5, #8]
   1bc0e:	d003      	beq.n	1bc18 <ip_interface_open+0xa8>
   1bc10:	2e0a      	cmp	r6, #10
   1bc12:	bf14      	ite	ne
   1bc14:	2601      	movne	r6, #1
   1bc16:	2602      	moveq	r6, #2
   1bc18:	616e      	str	r6, [r5, #20]
   1bc1a:	f8c5 801c 	str.w	r8, [r5, #28]
   1bc1e:	61ac      	str	r4, [r5, #24]
   1bc20:	f247 0101 	movw	r1, #28673	; 0x7001
   1bc24:	4628      	mov	r0, r5
   1bc26:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1bc2a:	f7ff feff 	bl	1ba2c <rpc_ip_client_request_send>
   1bc2e:	4606      	mov	r6, r0
   1bc30:	b380      	cbz	r0, 1bc94 <ip_interface_open+0x124>
   1bc32:	6828      	ldr	r0, [r5, #0]
   1bc34:	b108      	cbz	r0, 1bc3a <ip_interface_open+0xca>
   1bc36:	f7ff ff17 	bl	1ba68 <rpc_ip_client_data_free>
   1bc3a:	4628      	mov	r0, r5
   1bc3c:	f7ff ff0c 	bl	1ba58 <rpc_ip_client_message_free>
   1bc40:	2301      	movs	r3, #1
   1bc42:	2523      	movs	r5, #35	; 0x23
   1bc44:	f8c8 3000 	str.w	r3, [r8]
   1bc48:	4638      	mov	r0, r7
   1bc4a:	f005 ff3b 	bl	21ac4 <interface_socket_free>
   1bc4e:	4628      	mov	r0, r5
   1bc50:	f7fa ffb6 	bl	16bc0 <bsd_os_errno_set>
   1bc54:	f04f 37ff 	mov.w	r7, #4294967295
   1bc58:	4638      	mov	r0, r7
   1bc5a:	b004      	add	sp, #16
   1bc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bc60:	2c01      	cmp	r4, #1
   1bc62:	d00a      	beq.n	1bc7a <ip_interface_open+0x10a>
   1bc64:	2c02      	cmp	r4, #2
   1bc66:	d10b      	bne.n	1bc80 <ip_interface_open+0x110>
   1bc68:	f1b8 0f02 	cmp.w	r8, #2
   1bc6c:	d0a4      	beq.n	1bbb8 <ip_interface_open+0x48>
   1bc6e:	2029      	movs	r0, #41	; 0x29
   1bc70:	f7fa ffa6 	bl	16bc0 <bsd_os_errno_set>
   1bc74:	f04f 37ff 	mov.w	r7, #4294967295
   1bc78:	e7ee      	b.n	1bc58 <ip_interface_open+0xe8>
   1bc7a:	f1b8 0f01 	cmp.w	r8, #1
   1bc7e:	d1f6      	bne.n	1bc6e <ip_interface_open+0xfe>
   1bc80:	f04f 0802 	mov.w	r8, #2
   1bc84:	e798      	b.n	1bbb8 <ip_interface_open+0x48>
   1bc86:	9d03      	ldr	r5, [sp, #12]
   1bc88:	2d00      	cmp	r5, #0
   1bc8a:	d1bb      	bne.n	1bc04 <ip_interface_open+0x94>
   1bc8c:	2569      	movs	r5, #105	; 0x69
   1bc8e:	e7db      	b.n	1bc48 <ip_interface_open+0xd8>
   1bc90:	46a0      	mov	r8, r4
   1bc92:	e791      	b.n	1bbb8 <ip_interface_open+0x48>
   1bc94:	ab02      	add	r3, sp, #8
   1bc96:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1bc9a:	2102      	movs	r1, #2
   1bc9c:	4638      	mov	r0, r7
   1bc9e:	f005 ff5f 	bl	21b60 <interface_socket_wait>
   1bca2:	4605      	mov	r5, r0
   1bca4:	2800      	cmp	r0, #0
   1bca6:	d1cf      	bne.n	1bc48 <ip_interface_open+0xd8>
   1bca8:	4638      	mov	r0, r7
   1bcaa:	f005 ffcd 	bl	21c48 <interface_socket_from_handle_get>
   1bcae:	b138      	cbz	r0, 1bcc0 <ip_interface_open+0x150>
   1bcb0:	6845      	ldr	r5, [r0, #4]
   1bcb2:	b12d      	cbz	r5, 1bcc0 <ip_interface_open+0x150>
   1bcb4:	6046      	str	r6, [r0, #4]
   1bcb6:	e7c7      	b.n	1bc48 <ip_interface_open+0xd8>
   1bcb8:	202f      	movs	r0, #47	; 0x2f
   1bcba:	f7fa ff81 	bl	16bc0 <bsd_os_errno_set>
   1bcbe:	e7cb      	b.n	1bc58 <ip_interface_open+0xe8>
   1bcc0:	3c02      	subs	r4, #2
   1bcc2:	2c01      	cmp	r4, #1
   1bcc4:	d8c8      	bhi.n	1bc58 <ip_interface_open+0xe8>
   1bcc6:	4638      	mov	r0, r7
   1bcc8:	9b01      	ldr	r3, [sp, #4]
   1bcca:	681a      	ldr	r2, [r3, #0]
   1bccc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1bcd0:	601a      	str	r2, [r3, #0]
   1bcd2:	681a      	ldr	r2, [r3, #0]
   1bcd4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1bcd8:	601a      	str	r2, [r3, #0]
   1bcda:	b004      	add	sp, #16
   1bcdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bce0:	2016      	movs	r0, #22
   1bce2:	f7fa ff6d 	bl	16bc0 <bsd_os_errno_set>
   1bce6:	f04f 37ff 	mov.w	r7, #4294967295
   1bcea:	e7b5      	b.n	1bc58 <ip_interface_open+0xe8>
   1bcec:	2070      	movs	r0, #112	; 0x70
   1bcee:	f7fa ff67 	bl	16bc0 <bsd_os_errno_set>
   1bcf2:	e7b1      	b.n	1bc58 <ip_interface_open+0xe8>
   1bcf4:	20026276 	.word	0x20026276
   1bcf8:	0001ba79 	.word	0x0001ba79

0001bcfc <ip_interface_close>:
   1bcfc:	f04f 33ff 	mov.w	r3, #4294967295
   1bd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd04:	b082      	sub	sp, #8
   1bd06:	4606      	mov	r6, r0
   1bd08:	9300      	str	r3, [sp, #0]
   1bd0a:	f005 ff9d 	bl	21c48 <interface_socket_from_handle_get>
   1bd0e:	2800      	cmp	r0, #0
   1bd10:	d062      	beq.n	1bdd8 <ip_interface_close+0xdc>
   1bd12:	4604      	mov	r4, r0
   1bd14:	2100      	movs	r1, #0
   1bd16:	a802      	add	r0, sp, #8
   1bd18:	6827      	ldr	r7, [r4, #0]
   1bd1a:	f840 1d04 	str.w	r1, [r0, #-4]!
   1bd1e:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1bd22:	f7ff fe6f 	bl	1ba04 <rpc_ip_client_request_alloc>
   1bd26:	2800      	cmp	r0, #0
   1bd28:	d139      	bne.n	1bd9e <ip_interface_close+0xa2>
   1bd2a:	f247 0309 	movw	r3, #28681	; 0x7009
   1bd2e:	2208      	movs	r2, #8
   1bd30:	9d01      	ldr	r5, [sp, #4]
   1bd32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1bd36:	60eb      	str	r3, [r5, #12]
   1bd38:	f8c5 8010 	str.w	r8, [r5, #16]
   1bd3c:	7268      	strb	r0, [r5, #9]
   1bd3e:	72a8      	strb	r0, [r5, #10]
   1bd40:	72e8      	strb	r0, [r5, #11]
   1bd42:	722a      	strb	r2, [r5, #8]
   1bd44:	6823      	ldr	r3, [r4, #0]
   1bd46:	f247 0109 	movw	r1, #28681	; 0x7009
   1bd4a:	0c1b      	lsrs	r3, r3, #16
   1bd4c:	041b      	lsls	r3, r3, #16
   1bd4e:	f043 030d 	orr.w	r3, r3, #13
   1bd52:	6023      	str	r3, [r4, #0]
   1bd54:	6823      	ldr	r3, [r4, #0]
   1bd56:	4628      	mov	r0, r5
   1bd58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1bd5c:	6023      	str	r3, [r4, #0]
   1bd5e:	6823      	ldr	r3, [r4, #0]
   1bd60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1bd64:	6023      	str	r3, [r4, #0]
   1bd66:	f7ff fe61 	bl	1ba2c <rpc_ip_client_request_send>
   1bd6a:	bb38      	cbnz	r0, 1bdbc <ip_interface_close+0xc0>
   1bd6c:	466b      	mov	r3, sp
   1bd6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1bd72:	210e      	movs	r1, #14
   1bd74:	4630      	mov	r0, r6
   1bd76:	f005 fef3 	bl	21b60 <interface_socket_wait>
   1bd7a:	4604      	mov	r4, r0
   1bd7c:	b1a0      	cbz	r0, 1bda8 <ip_interface_close+0xac>
   1bd7e:	4c17      	ldr	r4, [pc, #92]	; (1bddc <ip_interface_close+0xe0>)
   1bd80:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   1bd84:	b120      	cbz	r0, 1bd90 <ip_interface_close+0x94>
   1bd86:	f7ff fe67 	bl	1ba58 <rpc_ip_client_message_free>
   1bd8a:	2300      	movs	r3, #0
   1bd8c:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   1bd90:	4630      	mov	r0, r6
   1bd92:	f005 fe97 	bl	21ac4 <interface_socket_free>
   1bd96:	2000      	movs	r0, #0
   1bd98:	b002      	add	sp, #8
   1bd9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bd9e:	9d01      	ldr	r5, [sp, #4]
   1bda0:	200c      	movs	r0, #12
   1bda2:	2d00      	cmp	r5, #0
   1bda4:	d1ce      	bne.n	1bd44 <ip_interface_close+0x48>
   1bda6:	e012      	b.n	1bdce <ip_interface_close+0xd2>
   1bda8:	4630      	mov	r0, r6
   1bdaa:	f005 ff4d 	bl	21c48 <interface_socket_from_handle_get>
   1bdae:	2800      	cmp	r0, #0
   1bdb0:	d0e5      	beq.n	1bd7e <ip_interface_close+0x82>
   1bdb2:	6843      	ldr	r3, [r0, #4]
   1bdb4:	2b00      	cmp	r3, #0
   1bdb6:	d0e2      	beq.n	1bd7e <ip_interface_close+0x82>
   1bdb8:	6044      	str	r4, [r0, #4]
   1bdba:	e7e0      	b.n	1bd7e <ip_interface_close+0x82>
   1bdbc:	6828      	ldr	r0, [r5, #0]
   1bdbe:	b108      	cbz	r0, 1bdc4 <ip_interface_close+0xc8>
   1bdc0:	f7ff fe52 	bl	1ba68 <rpc_ip_client_data_free>
   1bdc4:	4628      	mov	r0, r5
   1bdc6:	f7ff fe47 	bl	1ba58 <rpc_ip_client_message_free>
   1bdca:	2023      	movs	r0, #35	; 0x23
   1bdcc:	6027      	str	r7, [r4, #0]
   1bdce:	f7fa fef7 	bl	16bc0 <bsd_os_errno_set>
   1bdd2:	f04f 30ff 	mov.w	r0, #4294967295
   1bdd6:	e7df      	b.n	1bd98 <ip_interface_close+0x9c>
   1bdd8:	2009      	movs	r0, #9
   1bdda:	e7f8      	b.n	1bdce <ip_interface_close+0xd2>
   1bddc:	200219e8 	.word	0x200219e8

0001bde0 <ip_interface_sendto>:
   1bde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bde4:	2400      	movs	r4, #0
   1bde6:	b08b      	sub	sp, #44	; 0x2c
   1bde8:	9102      	str	r1, [sp, #8]
   1bdea:	4615      	mov	r5, r2
   1bdec:	4699      	mov	r9, r3
   1bdee:	9407      	str	r4, [sp, #28]
   1bdf0:	4607      	mov	r7, r0
   1bdf2:	9e14      	ldr	r6, [sp, #80]	; 0x50
   1bdf4:	f005 ff28 	bl	21c48 <interface_socket_from_handle_get>
   1bdf8:	2800      	cmp	r0, #0
   1bdfa:	f000 8163 	beq.w	1c0c4 <ip_interface_sendto+0x2e4>
   1bdfe:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1be02:	f300 8150 	bgt.w	1c0a6 <ip_interface_sendto+0x2c6>
   1be06:	6903      	ldr	r3, [r0, #16]
   1be08:	4604      	mov	r4, r0
   1be0a:	2b01      	cmp	r3, #1
   1be0c:	f000 8109 	beq.w	1c022 <ip_interface_sendto+0x242>
   1be10:	6822      	ldr	r2, [r4, #0]
   1be12:	0391      	lsls	r1, r2, #14
   1be14:	d569      	bpl.n	1beea <ip_interface_sendto+0x10a>
   1be16:	f1b9 0f00 	cmp.w	r9, #0
   1be1a:	f000 8112 	beq.w	1c042 <ip_interface_sendto+0x262>
   1be1e:	f019 0f02 	tst.w	r9, #2
   1be22:	f000 814a 	beq.w	1c0ba <ip_interface_sendto+0x2da>
   1be26:	2300      	movs	r3, #0
   1be28:	9303      	str	r3, [sp, #12]
   1be2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1be2c:	f247 0806 	movw	r8, #28678	; 0x7006
   1be30:	2b00      	cmp	r3, #0
   1be32:	bf08      	it	eq
   1be34:	f04f 33ff 	moveq.w	r3, #4294967295
   1be38:	f04f 0b0c 	mov.w	fp, #12
   1be3c:	4aa5      	ldr	r2, [pc, #660]	; (1c0d4 <ip_interface_sendto+0x2f4>)
   1be3e:	9308      	str	r3, [sp, #32]
   1be40:	043b      	lsls	r3, r7, #16
   1be42:	9200      	str	r2, [sp, #0]
   1be44:	9304      	str	r3, [sp, #16]
   1be46:	4629      	mov	r1, r5
   1be48:	a807      	add	r0, sp, #28
   1be4a:	f7ff fddb 	bl	1ba04 <rpc_ip_client_request_alloc>
   1be4e:	2804      	cmp	r0, #4
   1be50:	d05e      	beq.n	1bf10 <ip_interface_sendto+0x130>
   1be52:	2800      	cmp	r0, #0
   1be54:	f040 813b 	bne.w	1c0ce <ip_interface_sendto+0x2ee>
   1be58:	9b07      	ldr	r3, [sp, #28]
   1be5a:	f883 b008 	strb.w	fp, [r3, #8]
   1be5e:	7258      	strb	r0, [r3, #9]
   1be60:	7298      	strb	r0, [r3, #10]
   1be62:	72d8      	strb	r0, [r3, #11]
   1be64:	2e00      	cmp	r6, #0
   1be66:	d06b      	beq.n	1bf40 <ip_interface_sendto+0x160>
   1be68:	68e2      	ldr	r2, [r4, #12]
   1be6a:	6871      	ldr	r1, [r6, #4]
   1be6c:	428a      	cmp	r2, r1
   1be6e:	f040 80a8 	bne.w	1bfc2 <ip_interface_sendto+0x1e2>
   1be72:	7831      	ldrb	r1, [r6, #0]
   1be74:	9815      	ldr	r0, [sp, #84]	; 0x54
   1be76:	4288      	cmp	r0, r1
   1be78:	d10a      	bne.n	1be90 <ip_interface_sendto+0xb0>
   1be7a:	2a02      	cmp	r2, #2
   1be7c:	f103 001c 	add.w	r0, r3, #28
   1be80:	f000 80ff 	beq.w	1c082 <ip_interface_sendto+0x2a2>
   1be84:	2a0a      	cmp	r2, #10
   1be86:	d103      	bne.n	1be90 <ip_interface_sendto+0xb0>
   1be88:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1be8a:	2a24      	cmp	r2, #36	; 0x24
   1be8c:	f000 80e6 	beq.w	1c05c <ip_interface_sendto+0x27c>
   1be90:	f04f 0a16 	mov.w	sl, #22
   1be94:	6818      	ldr	r0, [r3, #0]
   1be96:	b110      	cbz	r0, 1be9e <ip_interface_sendto+0xbe>
   1be98:	f7ff fde6 	bl	1ba68 <rpc_ip_client_data_free>
   1be9c:	9b07      	ldr	r3, [sp, #28]
   1be9e:	4618      	mov	r0, r3
   1bea0:	f7ff fdda 	bl	1ba58 <rpc_ip_client_message_free>
   1bea4:	6823      	ldr	r3, [r4, #0]
   1bea6:	0318      	lsls	r0, r3, #12
   1bea8:	d40b      	bmi.n	1bec2 <ip_interface_sendto+0xe2>
   1beaa:	6823      	ldr	r3, [r4, #0]
   1beac:	b29b      	uxth	r3, r3
   1beae:	2b0d      	cmp	r3, #13
   1beb0:	d007      	beq.n	1bec2 <ip_interface_sendto+0xe2>
   1beb2:	6823      	ldr	r3, [r4, #0]
   1beb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1beb8:	6023      	str	r3, [r4, #0]
   1beba:	6823      	ldr	r3, [r4, #0]
   1bebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1bec0:	6023      	str	r3, [r4, #0]
   1bec2:	f1ba 0f00 	cmp.w	sl, #0
   1bec6:	f040 80b3 	bne.w	1c030 <ip_interface_sendto+0x250>
   1beca:	6823      	ldr	r3, [r4, #0]
   1becc:	0119      	lsls	r1, r3, #4
   1bece:	d57b      	bpl.n	1bfc8 <ip_interface_sendto+0x1e8>
   1bed0:	6823      	ldr	r3, [r4, #0]
   1bed2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   1bed6:	6023      	str	r3, [r4, #0]
   1bed8:	9b00      	ldr	r3, [sp, #0]
   1beda:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1bede:	2800      	cmp	r0, #0
   1bee0:	d176      	bne.n	1bfd0 <ip_interface_sendto+0x1f0>
   1bee2:	4628      	mov	r0, r5
   1bee4:	b00b      	add	sp, #44	; 0x2c
   1bee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1beea:	6822      	ldr	r2, [r4, #0]
   1beec:	0092      	lsls	r2, r2, #2
   1beee:	d406      	bmi.n	1befe <ip_interface_sendto+0x11e>
   1bef0:	2b01      	cmp	r3, #1
   1bef2:	f000 80ad 	beq.w	1c050 <ip_interface_sendto+0x270>
   1bef6:	6823      	ldr	r3, [r4, #0]
   1bef8:	031b      	lsls	r3, r3, #12
   1befa:	f140 80cf 	bpl.w	1c09c <ip_interface_sendto+0x2bc>
   1befe:	6823      	ldr	r3, [r4, #0]
   1bf00:	031e      	lsls	r6, r3, #12
   1bf02:	f140 80d5 	bpl.w	1c0b0 <ip_interface_sendto+0x2d0>
   1bf06:	4b73      	ldr	r3, [pc, #460]	; (1c0d4 <ip_interface_sendto+0x2f4>)
   1bf08:	f8d4 a008 	ldr.w	sl, [r4, #8]
   1bf0c:	9300      	str	r3, [sp, #0]
   1bf0e:	e7d8      	b.n	1bec2 <ip_interface_sendto+0xe2>
   1bf10:	9b03      	ldr	r3, [sp, #12]
   1bf12:	2b00      	cmp	r3, #0
   1bf14:	d052      	beq.n	1bfbc <ip_interface_sendto+0x1dc>
   1bf16:	9b08      	ldr	r3, [sp, #32]
   1bf18:	3301      	adds	r3, #1
   1bf1a:	d094      	beq.n	1be46 <ip_interface_sendto+0x66>
   1bf1c:	230a      	movs	r3, #10
   1bf1e:	a90a      	add	r1, sp, #40	; 0x28
   1bf20:	f841 3d04 	str.w	r3, [r1, #-4]!
   1bf24:	2000      	movs	r0, #0
   1bf26:	f7fa fd93 	bl	16a50 <bsd_os_timedwait>
   1bf2a:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   1bf2e:	f1c2 020a 	rsb	r2, r2, #10
   1bf32:	1a9b      	subs	r3, r3, r2
   1bf34:	2b00      	cmp	r3, #0
   1bf36:	9308      	str	r3, [sp, #32]
   1bf38:	dc85      	bgt.n	1be46 <ip_interface_sendto+0x66>
   1bf3a:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
   1bf3e:	e7b1      	b.n	1bea4 <ip_interface_sendto+0xc4>
   1bf40:	4642      	mov	r2, r8
   1bf42:	f8c3 9014 	str.w	r9, [r3, #20]
   1bf46:	69a1      	ldr	r1, [r4, #24]
   1bf48:	9804      	ldr	r0, [sp, #16]
   1bf4a:	6119      	str	r1, [r3, #16]
   1bf4c:	9902      	ldr	r1, [sp, #8]
   1bf4e:	4302      	orrs	r2, r0
   1bf50:	60da      	str	r2, [r3, #12]
   1bf52:	605d      	str	r5, [r3, #4]
   1bf54:	b119      	cbz	r1, 1bf5e <ip_interface_sendto+0x17e>
   1bf56:	6818      	ldr	r0, [r3, #0]
   1bf58:	462a      	mov	r2, r5
   1bf5a:	f7f0 fdf7 	bl	cb4c <memcpy>
   1bf5e:	6823      	ldr	r3, [r4, #0]
   1bf60:	4641      	mov	r1, r8
   1bf62:	9305      	str	r3, [sp, #20]
   1bf64:	6823      	ldr	r3, [r4, #0]
   1bf66:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1bf6a:	6023      	str	r3, [r4, #0]
   1bf6c:	6823      	ldr	r3, [r4, #0]
   1bf6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1bf72:	6023      	str	r3, [r4, #0]
   1bf74:	9b07      	ldr	r3, [sp, #28]
   1bf76:	4618      	mov	r0, r3
   1bf78:	9301      	str	r3, [sp, #4]
   1bf7a:	f7ff fd57 	bl	1ba2c <rpc_ip_client_request_send>
   1bf7e:	9b01      	ldr	r3, [sp, #4]
   1bf80:	4682      	mov	sl, r0
   1bf82:	bb78      	cbnz	r0, 1bfe4 <ip_interface_sendto+0x204>
   1bf84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1bf88:	ab08      	add	r3, sp, #32
   1bf8a:	4611      	mov	r1, r2
   1bf8c:	4638      	mov	r0, r7
   1bf8e:	f005 fde7 	bl	21b60 <interface_socket_wait>
   1bf92:	4603      	mov	r3, r0
   1bf94:	b398      	cbz	r0, 1bffe <ip_interface_sendto+0x21e>
   1bf96:	6822      	ldr	r2, [r4, #0]
   1bf98:	0312      	lsls	r2, r2, #12
   1bf9a:	d43f      	bmi.n	1c01c <ip_interface_sendto+0x23c>
   1bf9c:	2b3c      	cmp	r3, #60	; 0x3c
   1bf9e:	d001      	beq.n	1bfa4 <ip_interface_sendto+0x1c4>
   1bfa0:	2b0c      	cmp	r3, #12
   1bfa2:	d001      	beq.n	1bfa8 <ip_interface_sendto+0x1c8>
   1bfa4:	469a      	mov	sl, r3
   1bfa6:	e77d      	b.n	1bea4 <ip_interface_sendto+0xc4>
   1bfa8:	9b00      	ldr	r3, [sp, #0]
   1bfaa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1bfae:	b108      	cbz	r0, 1bfb4 <ip_interface_sendto+0x1d4>
   1bfb0:	f7ff fd52 	bl	1ba58 <rpc_ip_client_message_free>
   1bfb4:	9b03      	ldr	r3, [sp, #12]
   1bfb6:	2b00      	cmp	r3, #0
   1bfb8:	f47f af45 	bne.w	1be46 <ip_interface_sendto+0x66>
   1bfbc:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1bfc0:	e770      	b.n	1bea4 <ip_interface_sendto+0xc4>
   1bfc2:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   1bfc6:	e765      	b.n	1be94 <ip_interface_sendto+0xb4>
   1bfc8:	9b00      	ldr	r3, [sp, #0]
   1bfca:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1bfce:	6985      	ldr	r5, [r0, #24]
   1bfd0:	f7ff fd42 	bl	1ba58 <rpc_ip_client_message_free>
   1bfd4:	2300      	movs	r3, #0
   1bfd6:	4628      	mov	r0, r5
   1bfd8:	9a00      	ldr	r2, [sp, #0]
   1bfda:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   1bfde:	b00b      	add	sp, #44	; 0x2c
   1bfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfe4:	6818      	ldr	r0, [r3, #0]
   1bfe6:	469a      	mov	sl, r3
   1bfe8:	b108      	cbz	r0, 1bfee <ip_interface_sendto+0x20e>
   1bfea:	f7ff fd3d 	bl	1ba68 <rpc_ip_client_data_free>
   1bfee:	4650      	mov	r0, sl
   1bff0:	f7ff fd32 	bl	1ba58 <rpc_ip_client_message_free>
   1bff4:	9b05      	ldr	r3, [sp, #20]
   1bff6:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1bffa:	6023      	str	r3, [r4, #0]
   1bffc:	e752      	b.n	1bea4 <ip_interface_sendto+0xc4>
   1bffe:	9001      	str	r0, [sp, #4]
   1c000:	4638      	mov	r0, r7
   1c002:	f005 fe21 	bl	21c48 <interface_socket_from_handle_get>
   1c006:	9b01      	ldr	r3, [sp, #4]
   1c008:	2800      	cmp	r0, #0
   1c00a:	d0cb      	beq.n	1bfa4 <ip_interface_sendto+0x1c4>
   1c00c:	6843      	ldr	r3, [r0, #4]
   1c00e:	2b00      	cmp	r3, #0
   1c010:	d0c8      	beq.n	1bfa4 <ip_interface_sendto+0x1c4>
   1c012:	f8c0 a004 	str.w	sl, [r0, #4]
   1c016:	6822      	ldr	r2, [r4, #0]
   1c018:	0312      	lsls	r2, r2, #12
   1c01a:	d5bf      	bpl.n	1bf9c <ip_interface_sendto+0x1bc>
   1c01c:	f8d4 a008 	ldr.w	sl, [r4, #8]
   1c020:	e740      	b.n	1bea4 <ip_interface_sendto+0xc4>
   1c022:	2e00      	cmp	r6, #0
   1c024:	f43f aef4 	beq.w	1be10 <ip_interface_sendto+0x30>
   1c028:	f04f 0a38 	mov.w	sl, #56	; 0x38
   1c02c:	4b29      	ldr	r3, [pc, #164]	; (1c0d4 <ip_interface_sendto+0x2f4>)
   1c02e:	9300      	str	r3, [sp, #0]
   1c030:	4650      	mov	r0, sl
   1c032:	f7fa fdc5 	bl	16bc0 <bsd_os_errno_set>
   1c036:	9b00      	ldr	r3, [sp, #0]
   1c038:	f04f 35ff 	mov.w	r5, #4294967295
   1c03c:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1c040:	e74d      	b.n	1bede <ip_interface_sendto+0xfe>
   1c042:	6823      	ldr	r3, [r4, #0]
   1c044:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   1c048:	f3c3 7300 	ubfx	r3, r3, #28, #1
   1c04c:	9303      	str	r3, [sp, #12]
   1c04e:	e6ec      	b.n	1be2a <ip_interface_sendto+0x4a>
   1c050:	6823      	ldr	r3, [r4, #0]
   1c052:	b29b      	uxth	r3, r3
   1c054:	2b05      	cmp	r3, #5
   1c056:	f47f af52 	bne.w	1befe <ip_interface_sendto+0x11e>
   1c05a:	e74c      	b.n	1bef6 <ip_interface_sendto+0x116>
   1c05c:	2210      	movs	r2, #16
   1c05e:	8931      	ldrh	r1, [r6, #8]
   1c060:	835a      	strh	r2, [r3, #26]
   1c062:	8319      	strh	r1, [r3, #24]
   1c064:	18b1      	adds	r1, r6, r2
   1c066:	f7f0 fd71 	bl	cb4c <memcpy>
   1c06a:	f247 0207 	movw	r2, #28679	; 0x7007
   1c06e:	9b07      	ldr	r3, [sp, #28]
   1c070:	4690      	mov	r8, r2
   1c072:	6899      	ldr	r1, [r3, #8]
   1c074:	8b58      	ldrh	r0, [r3, #26]
   1c076:	3104      	adds	r1, #4
   1c078:	4401      	add	r1, r0
   1c07a:	f8c3 9014 	str.w	r9, [r3, #20]
   1c07e:	6099      	str	r1, [r3, #8]
   1c080:	e761      	b.n	1bf46 <ip_interface_sendto+0x166>
   1c082:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1c084:	2a10      	cmp	r2, #16
   1c086:	f47f af03 	bne.w	1be90 <ip_interface_sendto+0xb0>
   1c08a:	2204      	movs	r2, #4
   1c08c:	8931      	ldrh	r1, [r6, #8]
   1c08e:	835a      	strh	r2, [r3, #26]
   1c090:	8319      	strh	r1, [r3, #24]
   1c092:	f106 010c 	add.w	r1, r6, #12
   1c096:	f7f0 fd59 	bl	cb4c <memcpy>
   1c09a:	e7e6      	b.n	1c06a <ip_interface_sendto+0x28a>
   1c09c:	4b0d      	ldr	r3, [pc, #52]	; (1c0d4 <ip_interface_sendto+0x2f4>)
   1c09e:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1c0a2:	9300      	str	r3, [sp, #0]
   1c0a4:	e7c4      	b.n	1c030 <ip_interface_sendto+0x250>
   1c0a6:	4b0b      	ldr	r3, [pc, #44]	; (1c0d4 <ip_interface_sendto+0x2f4>)
   1c0a8:	f04f 0a28 	mov.w	sl, #40	; 0x28
   1c0ac:	9300      	str	r3, [sp, #0]
   1c0ae:	e7bf      	b.n	1c030 <ip_interface_sendto+0x250>
   1c0b0:	4b08      	ldr	r3, [pc, #32]	; (1c0d4 <ip_interface_sendto+0x2f4>)
   1c0b2:	f04f 0a39 	mov.w	sl, #57	; 0x39
   1c0b6:	9300      	str	r3, [sp, #0]
   1c0b8:	e7ba      	b.n	1c030 <ip_interface_sendto+0x250>
   1c0ba:	4b06      	ldr	r3, [pc, #24]	; (1c0d4 <ip_interface_sendto+0x2f4>)
   1c0bc:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   1c0c0:	9300      	str	r3, [sp, #0]
   1c0c2:	e7b5      	b.n	1c030 <ip_interface_sendto+0x250>
   1c0c4:	4b03      	ldr	r3, [pc, #12]	; (1c0d4 <ip_interface_sendto+0x2f4>)
   1c0c6:	f04f 0a09 	mov.w	sl, #9
   1c0ca:	9300      	str	r3, [sp, #0]
   1c0cc:	e7b0      	b.n	1c030 <ip_interface_sendto+0x250>
   1c0ce:	f04f 0a0c 	mov.w	sl, #12
   1c0d2:	e6e7      	b.n	1bea4 <ip_interface_sendto+0xc4>
   1c0d4:	200219e8 	.word	0x200219e8

0001c0d8 <ip_interface_recvfrom>:
   1c0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0dc:	b087      	sub	sp, #28
   1c0de:	2a00      	cmp	r2, #0
   1c0e0:	f000 8112 	beq.w	1c308 <ip_interface_recvfrom+0x230>
   1c0e4:	4680      	mov	r8, r0
   1c0e6:	468b      	mov	fp, r1
   1c0e8:	469a      	mov	sl, r3
   1c0ea:	4691      	mov	r9, r2
   1c0ec:	b11b      	cbz	r3, 1c0f6 <ip_interface_recvfrom+0x1e>
   1c0ee:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   1c0f2:	f000 8107 	beq.w	1c304 <ip_interface_recvfrom+0x22c>
   1c0f6:	4640      	mov	r0, r8
   1c0f8:	f005 fda6 	bl	21c48 <interface_socket_from_handle_get>
   1c0fc:	4604      	mov	r4, r0
   1c0fe:	2800      	cmp	r0, #0
   1c100:	f000 8104 	beq.w	1c30c <ip_interface_recvfrom+0x234>
   1c104:	6803      	ldr	r3, [r0, #0]
   1c106:	02db      	lsls	r3, r3, #11
   1c108:	d562      	bpl.n	1c1d0 <ip_interface_recvfrom+0xf8>
   1c10a:	f01a 0f02 	tst.w	sl, #2
   1c10e:	bf18      	it	ne
   1c110:	2600      	movne	r6, #0
   1c112:	f04f 35ff 	mov.w	r5, #4294967295
   1c116:	bf08      	it	eq
   1c118:	6806      	ldreq	r6, [r0, #0]
   1c11a:	f00a 0310 	and.w	r3, sl, #16
   1c11e:	bf04      	itt	eq
   1c120:	f086 5680 	eoreq.w	r6, r6, #268435456	; 0x10000000
   1c124:	f3c6 7600 	ubfxeq	r6, r6, #28, #1
   1c128:	9301      	str	r3, [sp, #4]
   1c12a:	6823      	ldr	r3, [r4, #0]
   1c12c:	03df      	lsls	r7, r3, #15
   1c12e:	d567      	bpl.n	1c200 <ip_interface_recvfrom+0x128>
   1c130:	6823      	ldr	r3, [r4, #0]
   1c132:	69e0      	ldr	r0, [r4, #28]
   1c134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1c138:	6023      	str	r3, [r4, #0]
   1c13a:	6803      	ldr	r3, [r0, #0]
   1c13c:	68db      	ldr	r3, [r3, #12]
   1c13e:	4798      	blx	r3
   1c140:	4605      	mov	r5, r0
   1c142:	3001      	adds	r0, #1
   1c144:	d07d      	beq.n	1c242 <ip_interface_recvfrom+0x16a>
   1c146:	45a9      	cmp	r9, r5
   1c148:	dd03      	ble.n	1c152 <ip_interface_recvfrom+0x7a>
   1c14a:	6923      	ldr	r3, [r4, #16]
   1c14c:	2b01      	cmp	r3, #1
   1c14e:	f000 80a3 	beq.w	1c298 <ip_interface_recvfrom+0x1c0>
   1c152:	f04f 0800 	mov.w	r8, #0
   1c156:	af02      	add	r7, sp, #8
   1c158:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1c15a:	b103      	cbz	r3, 1c15e <ip_interface_recvfrom+0x86>
   1c15c:	681b      	ldr	r3, [r3, #0]
   1c15e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c160:	e9cd b902 	strd	fp, r9, [sp, #8]
   1c164:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1c168:	69e0      	ldr	r0, [r4, #28]
   1c16a:	4639      	mov	r1, r7
   1c16c:	6803      	ldr	r3, [r0, #0]
   1c16e:	4652      	mov	r2, sl
   1c170:	689b      	ldr	r3, [r3, #8]
   1c172:	4798      	blx	r3
   1c174:	4605      	mov	r5, r0
   1c176:	69e0      	ldr	r0, [r4, #28]
   1c178:	1c6b      	adds	r3, r5, #1
   1c17a:	6803      	ldr	r3, [r0, #0]
   1c17c:	bf18      	it	ne
   1c17e:	2701      	movne	r7, #1
   1c180:	68db      	ldr	r3, [r3, #12]
   1c182:	bf0a      	itet	eq
   1c184:	2700      	moveq	r7, #0
   1c186:	2600      	movne	r6, #0
   1c188:	2623      	moveq	r6, #35	; 0x23
   1c18a:	4798      	blx	r3
   1c18c:	3001      	adds	r0, #1
   1c18e:	d132      	bne.n	1c1f6 <ip_interface_recvfrom+0x11e>
   1c190:	f1b8 0f00 	cmp.w	r8, #0
   1c194:	f000 80b0 	beq.w	1c2f8 <ip_interface_recvfrom+0x220>
   1c198:	2f00      	cmp	r7, #0
   1c19a:	f000 80a1 	beq.w	1c2e0 <ip_interface_recvfrom+0x208>
   1c19e:	6823      	ldr	r3, [r4, #0]
   1c1a0:	0318      	lsls	r0, r3, #12
   1c1a2:	d506      	bpl.n	1c1b2 <ip_interface_recvfrom+0xda>
   1c1a4:	6823      	ldr	r3, [r4, #0]
   1c1a6:	b29b      	uxth	r3, r3
   1c1a8:	2b0d      	cmp	r3, #13
   1c1aa:	d002      	beq.n	1c1b2 <ip_interface_recvfrom+0xda>
   1c1ac:	6923      	ldr	r3, [r4, #16]
   1c1ae:	2b01      	cmp	r3, #1
   1c1b0:	d021      	beq.n	1c1f6 <ip_interface_recvfrom+0x11e>
   1c1b2:	6823      	ldr	r3, [r4, #0]
   1c1b4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1c1b8:	6823      	ldr	r3, [r4, #0]
   1c1ba:	f040 80a9 	bne.w	1c310 <ip_interface_recvfrom+0x238>
   1c1be:	0319      	lsls	r1, r3, #12
   1c1c0:	d473      	bmi.n	1c2aa <ip_interface_recvfrom+0x1d2>
   1c1c2:	2e00      	cmp	r6, #0
   1c1c4:	f040 8086 	bne.w	1c2d4 <ip_interface_recvfrom+0x1fc>
   1c1c8:	4628      	mov	r0, r5
   1c1ca:	b007      	add	sp, #28
   1c1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1d0:	6803      	ldr	r3, [r0, #0]
   1c1d2:	b29b      	uxth	r3, r3
   1c1d4:	2b06      	cmp	r3, #6
   1c1d6:	d071      	beq.n	1c2bc <ip_interface_recvfrom+0x1e4>
   1c1d8:	6803      	ldr	r3, [r0, #0]
   1c1da:	b29b      	uxth	r3, r3
   1c1dc:	2b07      	cmp	r3, #7
   1c1de:	bf0c      	ite	eq
   1c1e0:	2609      	moveq	r6, #9
   1c1e2:	2639      	movne	r6, #57	; 0x39
   1c1e4:	69e0      	ldr	r0, [r4, #28]
   1c1e6:	6803      	ldr	r3, [r0, #0]
   1c1e8:	68db      	ldr	r3, [r3, #12]
   1c1ea:	4798      	blx	r3
   1c1ec:	1c43      	adds	r3, r0, #1
   1c1ee:	4605      	mov	r5, r0
   1c1f0:	d0df      	beq.n	1c1b2 <ip_interface_recvfrom+0xda>
   1c1f2:	f04f 35ff 	mov.w	r5, #4294967295
   1c1f6:	6823      	ldr	r3, [r4, #0]
   1c1f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1c1fc:	6023      	str	r3, [r4, #0]
   1c1fe:	e7e0      	b.n	1c1c2 <ip_interface_recvfrom+0xea>
   1c200:	2e00      	cmp	r6, #0
   1c202:	d07d      	beq.n	1c300 <ip_interface_recvfrom+0x228>
   1c204:	6a26      	ldr	r6, [r4, #32]
   1c206:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c20a:	2e00      	cmp	r6, #0
   1c20c:	bf08      	it	eq
   1c20e:	f04f 36ff 	moveq.w	r6, #4294967295
   1c212:	af02      	add	r7, sp, #8
   1c214:	463b      	mov	r3, r7
   1c216:	4611      	mov	r1, r2
   1c218:	4640      	mov	r0, r8
   1c21a:	9602      	str	r6, [sp, #8]
   1c21c:	f005 fca0 	bl	21b60 <interface_socket_wait>
   1c220:	4606      	mov	r6, r0
   1c222:	b350      	cbz	r0, 1c27a <ip_interface_recvfrom+0x1a2>
   1c224:	6823      	ldr	r3, [r4, #0]
   1c226:	031a      	lsls	r2, r3, #12
   1c228:	d532      	bpl.n	1c290 <ip_interface_recvfrom+0x1b8>
   1c22a:	6823      	ldr	r3, [r4, #0]
   1c22c:	b29b      	uxth	r3, r3
   1c22e:	2b0d      	cmp	r3, #13
   1c230:	d02e      	beq.n	1c290 <ip_interface_recvfrom+0x1b8>
   1c232:	6923      	ldr	r3, [r4, #16]
   1c234:	f1a3 0801 	sub.w	r8, r3, #1
   1c238:	fab8 f888 	clz	r8, r8
   1c23c:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1c240:	e78a      	b.n	1c158 <ip_interface_recvfrom+0x80>
   1c242:	6823      	ldr	r3, [r4, #0]
   1c244:	031a      	lsls	r2, r3, #12
   1c246:	d5db      	bpl.n	1c200 <ip_interface_recvfrom+0x128>
   1c248:	6823      	ldr	r3, [r4, #0]
   1c24a:	b29b      	uxth	r3, r3
   1c24c:	2b0d      	cmp	r3, #13
   1c24e:	d0d7      	beq.n	1c200 <ip_interface_recvfrom+0x128>
   1c250:	6923      	ldr	r3, [r4, #16]
   1c252:	69e0      	ldr	r0, [r4, #28]
   1c254:	2b01      	cmp	r3, #1
   1c256:	d033      	beq.n	1c2c0 <ip_interface_recvfrom+0x1e8>
   1c258:	2639      	movs	r6, #57	; 0x39
   1c25a:	6823      	ldr	r3, [r4, #0]
   1c25c:	0c1b      	lsrs	r3, r3, #16
   1c25e:	041b      	lsls	r3, r3, #16
   1c260:	f043 030d 	orr.w	r3, r3, #13
   1c264:	6023      	str	r3, [r4, #0]
   1c266:	6823      	ldr	r3, [r4, #0]
   1c268:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1c26c:	6023      	str	r3, [r4, #0]
   1c26e:	6803      	ldr	r3, [r0, #0]
   1c270:	68db      	ldr	r3, [r3, #12]
   1c272:	4798      	blx	r3
   1c274:	3001      	adds	r0, #1
   1c276:	d1be      	bne.n	1c1f6 <ip_interface_recvfrom+0x11e>
   1c278:	e79b      	b.n	1c1b2 <ip_interface_recvfrom+0xda>
   1c27a:	4640      	mov	r0, r8
   1c27c:	f005 fce4 	bl	21c48 <interface_socket_from_handle_get>
   1c280:	b140      	cbz	r0, 1c294 <ip_interface_recvfrom+0x1bc>
   1c282:	6846      	ldr	r6, [r0, #4]
   1c284:	b136      	cbz	r6, 1c294 <ip_interface_recvfrom+0x1bc>
   1c286:	2300      	movs	r3, #0
   1c288:	6043      	str	r3, [r0, #4]
   1c28a:	6823      	ldr	r3, [r4, #0]
   1c28c:	031a      	lsls	r2, r3, #12
   1c28e:	d4cc      	bmi.n	1c22a <ip_interface_recvfrom+0x152>
   1c290:	69e0      	ldr	r0, [r4, #28]
   1c292:	e7ec      	b.n	1c26e <ip_interface_recvfrom+0x196>
   1c294:	2601      	movs	r6, #1
   1c296:	e748      	b.n	1c12a <ip_interface_recvfrom+0x52>
   1c298:	9b01      	ldr	r3, [sp, #4]
   1c29a:	b11b      	cbz	r3, 1c2a4 <ip_interface_recvfrom+0x1cc>
   1c29c:	6823      	ldr	r3, [r4, #0]
   1c29e:	00d9      	lsls	r1, r3, #3
   1c2a0:	d5b0      	bpl.n	1c204 <ip_interface_recvfrom+0x12c>
   1c2a2:	e756      	b.n	1c152 <ip_interface_recvfrom+0x7a>
   1c2a4:	4698      	mov	r8, r3
   1c2a6:	af02      	add	r7, sp, #8
   1c2a8:	e756      	b.n	1c158 <ip_interface_recvfrom+0x80>
   1c2aa:	6823      	ldr	r3, [r4, #0]
   1c2ac:	b29b      	uxth	r3, r3
   1c2ae:	2b0d      	cmp	r3, #13
   1c2b0:	d187      	bne.n	1c1c2 <ip_interface_recvfrom+0xea>
   1c2b2:	68a3      	ldr	r3, [r4, #8]
   1c2b4:	2b00      	cmp	r3, #0
   1c2b6:	d084      	beq.n	1c1c2 <ip_interface_recvfrom+0xea>
   1c2b8:	68a6      	ldr	r6, [r4, #8]
   1c2ba:	e782      	b.n	1c1c2 <ip_interface_recvfrom+0xea>
   1c2bc:	2609      	movs	r6, #9
   1c2be:	e791      	b.n	1c1e4 <ip_interface_recvfrom+0x10c>
   1c2c0:	6803      	ldr	r3, [r0, #0]
   1c2c2:	68db      	ldr	r3, [r3, #12]
   1c2c4:	4798      	blx	r3
   1c2c6:	3001      	adds	r0, #1
   1c2c8:	d00a      	beq.n	1c2e0 <ip_interface_recvfrom+0x208>
   1c2ca:	2623      	movs	r6, #35	; 0x23
   1c2cc:	6823      	ldr	r3, [r4, #0]
   1c2ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1c2d2:	6023      	str	r3, [r4, #0]
   1c2d4:	4630      	mov	r0, r6
   1c2d6:	f7fa fc73 	bl	16bc0 <bsd_os_errno_set>
   1c2da:	f04f 35ff 	mov.w	r5, #4294967295
   1c2de:	e773      	b.n	1c1c8 <ip_interface_recvfrom+0xf0>
   1c2e0:	6823      	ldr	r3, [r4, #0]
   1c2e2:	2500      	movs	r5, #0
   1c2e4:	0c1b      	lsrs	r3, r3, #16
   1c2e6:	041b      	lsls	r3, r3, #16
   1c2e8:	f043 030d 	orr.w	r3, r3, #13
   1c2ec:	6023      	str	r3, [r4, #0]
   1c2ee:	6823      	ldr	r3, [r4, #0]
   1c2f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1c2f4:	6023      	str	r3, [r4, #0]
   1c2f6:	e767      	b.n	1c1c8 <ip_interface_recvfrom+0xf0>
   1c2f8:	2f00      	cmp	r7, #0
   1c2fa:	f47f af50 	bne.w	1c19e <ip_interface_recvfrom+0xc6>
   1c2fe:	e758      	b.n	1c1b2 <ip_interface_recvfrom+0xda>
   1c300:	2623      	movs	r6, #35	; 0x23
   1c302:	e7c5      	b.n	1c290 <ip_interface_recvfrom+0x1b8>
   1c304:	262d      	movs	r6, #45	; 0x2d
   1c306:	e7e5      	b.n	1c2d4 <ip_interface_recvfrom+0x1fc>
   1c308:	2616      	movs	r6, #22
   1c30a:	e7e3      	b.n	1c2d4 <ip_interface_recvfrom+0x1fc>
   1c30c:	2609      	movs	r6, #9
   1c30e:	e7e1      	b.n	1c2d4 <ip_interface_recvfrom+0x1fc>
   1c310:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   1c314:	6023      	str	r3, [r4, #0]
   1c316:	6823      	ldr	r3, [r4, #0]
   1c318:	2669      	movs	r6, #105	; 0x69
   1c31a:	0c1b      	lsrs	r3, r3, #16
   1c31c:	041b      	lsls	r3, r3, #16
   1c31e:	f043 030d 	orr.w	r3, r3, #13
   1c322:	6023      	str	r3, [r4, #0]
   1c324:	e7d6      	b.n	1c2d4 <ip_interface_recvfrom+0x1fc>
   1c326:	bf00      	nop

0001c328 <ip_interface_connect>:
   1c328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c32c:	b082      	sub	sp, #8
   1c32e:	2900      	cmp	r1, #0
   1c330:	d04b      	beq.n	1c3ca <ip_interface_connect+0xa2>
   1c332:	4617      	mov	r7, r2
   1c334:	2a00      	cmp	r2, #0
   1c336:	d048      	beq.n	1c3ca <ip_interface_connect+0xa2>
   1c338:	4680      	mov	r8, r0
   1c33a:	4689      	mov	r9, r1
   1c33c:	f005 fc84 	bl	21c48 <interface_socket_from_handle_get>
   1c340:	4605      	mov	r5, r0
   1c342:	2800      	cmp	r0, #0
   1c344:	f000 80af 	beq.w	1c4a6 <ip_interface_connect+0x17e>
   1c348:	6803      	ldr	r3, [r0, #0]
   1c34a:	b29b      	uxth	r3, r3
   1c34c:	2b02      	cmp	r3, #2
   1c34e:	d004      	beq.n	1c35a <ip_interface_connect+0x32>
   1c350:	6803      	ldr	r3, [r0, #0]
   1c352:	b29b      	uxth	r3, r3
   1c354:	2b04      	cmp	r3, #4
   1c356:	f040 809d 	bne.w	1c494 <ip_interface_connect+0x16c>
   1c35a:	6829      	ldr	r1, [r5, #0]
   1c35c:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   1c360:	f040 8089 	bne.w	1c476 <ip_interface_connect+0x14e>
   1c364:	ae02      	add	r6, sp, #8
   1c366:	f8d5 a018 	ldr.w	sl, [r5, #24]
   1c36a:	f846 1d04 	str.w	r1, [r6, #-4]!
   1c36e:	4630      	mov	r0, r6
   1c370:	f7ff fb48 	bl	1ba04 <rpc_ip_client_request_alloc>
   1c374:	bb98      	cbnz	r0, 1c3de <ip_interface_connect+0xb6>
   1c376:	2108      	movs	r1, #8
   1c378:	ea4f 4208 	mov.w	r2, r8, lsl #16
   1c37c:	9c01      	ldr	r4, [sp, #4]
   1c37e:	f442 43e0 	orr.w	r3, r2, #28672	; 0x7000
   1c382:	f043 0302 	orr.w	r3, r3, #2
   1c386:	60e3      	str	r3, [r4, #12]
   1c388:	f8c4 a010 	str.w	sl, [r4, #16]
   1c38c:	7260      	strb	r0, [r4, #9]
   1c38e:	72a0      	strb	r0, [r4, #10]
   1c390:	72e0      	strb	r0, [r4, #11]
   1c392:	7221      	strb	r1, [r4, #8]
   1c394:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
   1c398:	f042 0202 	orr.w	r2, r2, #2
   1c39c:	60e2      	str	r2, [r4, #12]
   1c39e:	68a3      	ldr	r3, [r4, #8]
   1c3a0:	69aa      	ldr	r2, [r5, #24]
   1c3a2:	3304      	adds	r3, #4
   1c3a4:	6122      	str	r2, [r4, #16]
   1c3a6:	60a3      	str	r3, [r4, #8]
   1c3a8:	68eb      	ldr	r3, [r5, #12]
   1c3aa:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1c3ae:	4293      	cmp	r3, r2
   1c3b0:	d11b      	bne.n	1c3ea <ip_interface_connect+0xc2>
   1c3b2:	f899 2000 	ldrb.w	r2, [r9]
   1c3b6:	4297      	cmp	r7, r2
   1c3b8:	d107      	bne.n	1c3ca <ip_interface_connect+0xa2>
   1c3ba:	2b02      	cmp	r3, #2
   1c3bc:	f104 0018 	add.w	r0, r4, #24
   1c3c0:	d015      	beq.n	1c3ee <ip_interface_connect+0xc6>
   1c3c2:	2b0a      	cmp	r3, #10
   1c3c4:	d101      	bne.n	1c3ca <ip_interface_connect+0xa2>
   1c3c6:	2f24      	cmp	r7, #36	; 0x24
   1c3c8:	d01d      	beq.n	1c406 <ip_interface_connect+0xde>
   1c3ca:	2416      	movs	r4, #22
   1c3cc:	4620      	mov	r0, r4
   1c3ce:	f7fa fbf7 	bl	16bc0 <bsd_os_errno_set>
   1c3d2:	f04f 34ff 	mov.w	r4, #4294967295
   1c3d6:	4620      	mov	r0, r4
   1c3d8:	b002      	add	sp, #8
   1c3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c3de:	9c01      	ldr	r4, [sp, #4]
   1c3e0:	2c00      	cmp	r4, #0
   1c3e2:	d05e      	beq.n	1c4a2 <ip_interface_connect+0x17a>
   1c3e4:	ea4f 4208 	mov.w	r2, r8, lsl #16
   1c3e8:	e7d4      	b.n	1c394 <ip_interface_connect+0x6c>
   1c3ea:	242f      	movs	r4, #47	; 0x2f
   1c3ec:	e7ee      	b.n	1c3cc <ip_interface_connect+0xa4>
   1c3ee:	2f10      	cmp	r7, #16
   1c3f0:	d1eb      	bne.n	1c3ca <ip_interface_connect+0xa2>
   1c3f2:	2204      	movs	r2, #4
   1c3f4:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   1c3f8:	f109 010c 	add.w	r1, r9, #12
   1c3fc:	82e2      	strh	r2, [r4, #22]
   1c3fe:	82a3      	strh	r3, [r4, #20]
   1c400:	f7f0 fba4 	bl	cb4c <memcpy>
   1c404:	e008      	b.n	1c418 <ip_interface_connect+0xf0>
   1c406:	2210      	movs	r2, #16
   1c408:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   1c40c:	eb09 0102 	add.w	r1, r9, r2
   1c410:	82e2      	strh	r2, [r4, #22]
   1c412:	82a3      	strh	r3, [r4, #20]
   1c414:	f7f0 fb9a 	bl	cb4c <memcpy>
   1c418:	68a3      	ldr	r3, [r4, #8]
   1c41a:	8ae2      	ldrh	r2, [r4, #22]
   1c41c:	f247 0102 	movw	r1, #28674	; 0x7002
   1c420:	4413      	add	r3, r2
   1c422:	60a3      	str	r3, [r4, #8]
   1c424:	682f      	ldr	r7, [r5, #0]
   1c426:	682b      	ldr	r3, [r5, #0]
   1c428:	4620      	mov	r0, r4
   1c42a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1c42e:	602b      	str	r3, [r5, #0]
   1c430:	f7ff fafc 	bl	1ba2c <rpc_ip_client_request_send>
   1c434:	b9a8      	cbnz	r0, 1c462 <ip_interface_connect+0x13a>
   1c436:	682b      	ldr	r3, [r5, #0]
   1c438:	00db      	lsls	r3, r3, #3
   1c43a:	d429      	bmi.n	1c490 <ip_interface_connect+0x168>
   1c43c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   1c43e:	4633      	mov	r3, r6
   1c440:	2c00      	cmp	r4, #0
   1c442:	bf08      	it	eq
   1c444:	f04f 34ff 	moveq.w	r4, #4294967295
   1c448:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c44c:	2105      	movs	r1, #5
   1c44e:	4640      	mov	r0, r8
   1c450:	9401      	str	r4, [sp, #4]
   1c452:	f005 fb85 	bl	21b60 <interface_socket_wait>
   1c456:	4604      	mov	r4, r0
   1c458:	b178      	cbz	r0, 1c47a <ip_interface_connect+0x152>
   1c45a:	2c73      	cmp	r4, #115	; 0x73
   1c45c:	d0b6      	beq.n	1c3cc <ip_interface_connect+0xa4>
   1c45e:	602f      	str	r7, [r5, #0]
   1c460:	e7b4      	b.n	1c3cc <ip_interface_connect+0xa4>
   1c462:	6820      	ldr	r0, [r4, #0]
   1c464:	b108      	cbz	r0, 1c46a <ip_interface_connect+0x142>
   1c466:	f7ff faff 	bl	1ba68 <rpc_ip_client_data_free>
   1c46a:	4620      	mov	r0, r4
   1c46c:	f7ff faf4 	bl	1ba58 <rpc_ip_client_message_free>
   1c470:	2423      	movs	r4, #35	; 0x23
   1c472:	602f      	str	r7, [r5, #0]
   1c474:	e7aa      	b.n	1c3cc <ip_interface_connect+0xa4>
   1c476:	2472      	movs	r4, #114	; 0x72
   1c478:	e7a8      	b.n	1c3cc <ip_interface_connect+0xa4>
   1c47a:	4640      	mov	r0, r8
   1c47c:	f005 fbe4 	bl	21c48 <interface_socket_from_handle_get>
   1c480:	2800      	cmp	r0, #0
   1c482:	d0a8      	beq.n	1c3d6 <ip_interface_connect+0xae>
   1c484:	6843      	ldr	r3, [r0, #4]
   1c486:	2b00      	cmp	r3, #0
   1c488:	d0a5      	beq.n	1c3d6 <ip_interface_connect+0xae>
   1c48a:	6044      	str	r4, [r0, #4]
   1c48c:	461c      	mov	r4, r3
   1c48e:	e7e4      	b.n	1c45a <ip_interface_connect+0x132>
   1c490:	2473      	movs	r4, #115	; 0x73
   1c492:	e79b      	b.n	1c3cc <ip_interface_connect+0xa4>
   1c494:	6803      	ldr	r3, [r0, #0]
   1c496:	b29b      	uxth	r3, r3
   1c498:	2b05      	cmp	r3, #5
   1c49a:	bf14      	ite	ne
   1c49c:	2409      	movne	r4, #9
   1c49e:	2438      	moveq	r4, #56	; 0x38
   1c4a0:	e794      	b.n	1c3cc <ip_interface_connect+0xa4>
   1c4a2:	240c      	movs	r4, #12
   1c4a4:	e792      	b.n	1c3cc <ip_interface_connect+0xa4>
   1c4a6:	2409      	movs	r4, #9
   1c4a8:	e790      	b.n	1c3cc <ip_interface_connect+0xa4>
   1c4aa:	bf00      	nop

0001c4ac <ip_interface_socketoption_get>:
   1c4ac:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   1c4b0:	f04f 34ff 	mov.w	r4, #4294967295
   1c4b4:	b082      	sub	sp, #8
   1c4b6:	9400      	str	r4, [sp, #0]
   1c4b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1c4ba:	2c00      	cmp	r4, #0
   1c4bc:	d05b      	beq.n	1c576 <ip_interface_socketoption_get+0xca>
   1c4be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1c4c0:	6824      	ldr	r4, [r4, #0]
   1c4c2:	2c00      	cmp	r4, #0
   1c4c4:	d057      	beq.n	1c576 <ip_interface_socketoption_get+0xca>
   1c4c6:	680c      	ldr	r4, [r1, #0]
   1c4c8:	0266      	lsls	r6, r4, #9
   1c4ca:	d44f      	bmi.n	1c56c <ip_interface_socketoption_get+0xc0>
   1c4cc:	680c      	ldr	r4, [r1, #0]
   1c4ce:	0225      	lsls	r5, r4, #8
   1c4d0:	d44c      	bmi.n	1c56c <ip_interface_socketoption_get+0xc0>
   1c4d2:	680c      	ldr	r4, [r1, #0]
   1c4d4:	01e4      	lsls	r4, r4, #7
   1c4d6:	d449      	bmi.n	1c56c <ip_interface_socketoption_get+0xc0>
   1c4d8:	680c      	ldr	r4, [r1, #0]
   1c4da:	f014 7c00 	ands.w	ip, r4, #33554432	; 0x2000000
   1c4de:	d145      	bne.n	1c56c <ip_interface_socketoption_get+0xc0>
   1c4e0:	460c      	mov	r4, r1
   1c4e2:	680e      	ldr	r6, [r1, #0]
   1c4e4:	461f      	mov	r7, r3
   1c4e6:	680b      	ldr	r3, [r1, #0]
   1c4e8:	4681      	mov	r9, r0
   1c4ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1c4ee:	600b      	str	r3, [r1, #0]
   1c4f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c4f2:	a802      	add	r0, sp, #8
   1c4f4:	f840 cd04 	str.w	ip, [r0, #-4]!
   1c4f8:	6819      	ldr	r1, [r3, #0]
   1c4fa:	4615      	mov	r5, r2
   1c4fc:	f8d4 b018 	ldr.w	fp, [r4, #24]
   1c500:	f7ff fa80 	bl	1ba04 <rpc_ip_client_request_alloc>
   1c504:	2800      	cmp	r0, #0
   1c506:	d146      	bne.n	1c596 <ip_interface_socketoption_get+0xea>
   1c508:	f247 0304 	movw	r3, #28676	; 0x7004
   1c50c:	2208      	movs	r2, #8
   1c50e:	f8dd a004 	ldr.w	sl, [sp, #4]
   1c512:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   1c516:	f8ca 300c 	str.w	r3, [sl, #12]
   1c51a:	f8ca b010 	str.w	fp, [sl, #16]
   1c51e:	f88a 0009 	strb.w	r0, [sl, #9]
   1c522:	f88a 000a 	strb.w	r0, [sl, #10]
   1c526:	f88a 000b 	strb.w	r0, [sl, #11]
   1c52a:	f88a 2008 	strb.w	r2, [sl, #8]
   1c52e:	f8da 3008 	ldr.w	r3, [sl, #8]
   1c532:	f8ca 7018 	str.w	r7, [sl, #24]
   1c536:	3308      	adds	r3, #8
   1c538:	f8ca 5014 	str.w	r5, [sl, #20]
   1c53c:	f8ca 3008 	str.w	r3, [sl, #8]
   1c540:	f247 0104 	movw	r1, #28676	; 0x7004
   1c544:	4650      	mov	r0, sl
   1c546:	f8da 7000 	ldr.w	r7, [sl]
   1c54a:	f7ff fa6f 	bl	1ba2c <rpc_ip_client_request_send>
   1c54e:	b9b8      	cbnz	r0, 1c580 <ip_interface_socketoption_get+0xd4>
   1c550:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   1c554:	466b      	mov	r3, sp
   1c556:	4611      	mov	r1, r2
   1c558:	4648      	mov	r0, r9
   1c55a:	f005 fb01 	bl	21b60 <interface_socket_wait>
   1c55e:	4605      	mov	r5, r0
   1c560:	b300      	cbz	r0, 1c5a4 <ip_interface_socketoption_get+0xf8>
   1c562:	4638      	mov	r0, r7
   1c564:	f7ff fa80 	bl	1ba68 <rpc_ip_client_data_free>
   1c568:	6026      	str	r6, [r4, #0]
   1c56a:	e000      	b.n	1c56e <ip_interface_socketoption_get+0xc2>
   1c56c:	2523      	movs	r5, #35	; 0x23
   1c56e:	4628      	mov	r0, r5
   1c570:	b002      	add	sp, #8
   1c572:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   1c576:	2516      	movs	r5, #22
   1c578:	4628      	mov	r0, r5
   1c57a:	b002      	add	sp, #8
   1c57c:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   1c580:	f8da 0000 	ldr.w	r0, [sl]
   1c584:	b108      	cbz	r0, 1c58a <ip_interface_socketoption_get+0xde>
   1c586:	f7ff fa6f 	bl	1ba68 <rpc_ip_client_data_free>
   1c58a:	4650      	mov	r0, sl
   1c58c:	f7ff fa64 	bl	1ba58 <rpc_ip_client_message_free>
   1c590:	2523      	movs	r5, #35	; 0x23
   1c592:	6026      	str	r6, [r4, #0]
   1c594:	e7e5      	b.n	1c562 <ip_interface_socketoption_get+0xb6>
   1c596:	f8dd a004 	ldr.w	sl, [sp, #4]
   1c59a:	f1ba 0f00 	cmp.w	sl, #0
   1c59e:	d1c6      	bne.n	1c52e <ip_interface_socketoption_get+0x82>
   1c5a0:	250c      	movs	r5, #12
   1c5a2:	e7e1      	b.n	1c568 <ip_interface_socketoption_get+0xbc>
   1c5a4:	4648      	mov	r0, r9
   1c5a6:	f005 fb4f 	bl	21c48 <interface_socket_from_handle_get>
   1c5aa:	b120      	cbz	r0, 1c5b6 <ip_interface_socketoption_get+0x10a>
   1c5ac:	6843      	ldr	r3, [r0, #4]
   1c5ae:	b113      	cbz	r3, 1c5b6 <ip_interface_socketoption_get+0x10a>
   1c5b0:	6045      	str	r5, [r0, #4]
   1c5b2:	461d      	mov	r5, r3
   1c5b4:	e7d5      	b.n	1c562 <ip_interface_socketoption_get+0xb6>
   1c5b6:	f8df b050 	ldr.w	fp, [pc, #80]	; 1c608 <ip_interface_socketoption_get+0x15c>
   1c5ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c5bc:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   1c5c0:	681b      	ldr	r3, [r3, #0]
   1c5c2:	b1b0      	cbz	r0, 1c5f2 <ip_interface_socketoption_get+0x146>
   1c5c4:	6842      	ldr	r2, [r0, #4]
   1c5c6:	429a      	cmp	r2, r3
   1c5c8:	d811      	bhi.n	1c5ee <ip_interface_socketoption_get+0x142>
   1c5ca:	6801      	ldr	r1, [r0, #0]
   1c5cc:	b179      	cbz	r1, 1c5ee <ip_interface_socketoption_get+0x142>
   1c5ce:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c5d0:	f7f0 fabc 	bl	cb4c <memcpy>
   1c5d4:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
   1c5d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c5da:	685b      	ldr	r3, [r3, #4]
   1c5dc:	6013      	str	r3, [r2, #0]
   1c5de:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   1c5e2:	f7ff fa39 	bl	1ba58 <rpc_ip_client_message_free>
   1c5e6:	2300      	movs	r3, #0
   1c5e8:	f84b 3029 	str.w	r3, [fp, r9, lsl #2]
   1c5ec:	e7b9      	b.n	1c562 <ip_interface_socketoption_get+0xb6>
   1c5ee:	2516      	movs	r5, #22
   1c5f0:	e7f7      	b.n	1c5e2 <ip_interface_socketoption_get+0x136>
   1c5f2:	461a      	mov	r2, r3
   1c5f4:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c5f6:	4639      	mov	r1, r7
   1c5f8:	f7f0 faa8 	bl	cb4c <memcpy>
   1c5fc:	f8da 3004 	ldr.w	r3, [sl, #4]
   1c600:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c602:	6013      	str	r3, [r2, #0]
   1c604:	e7ad      	b.n	1c562 <ip_interface_socketoption_get+0xb6>
   1c606:	bf00      	nop
   1c608:	200219e8 	.word	0x200219e8

0001c60c <ip_interface_socketoption_send>:
   1c60c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c610:	f04f 35ff 	mov.w	r5, #4294967295
   1c614:	680c      	ldr	r4, [r1, #0]
   1c616:	b082      	sub	sp, #8
   1c618:	0266      	lsls	r6, r4, #9
   1c61a:	9500      	str	r5, [sp, #0]
   1c61c:	d44d      	bmi.n	1c6ba <ip_interface_socketoption_send+0xae>
   1c61e:	680c      	ldr	r4, [r1, #0]
   1c620:	0225      	lsls	r5, r4, #8
   1c622:	d44a      	bmi.n	1c6ba <ip_interface_socketoption_send+0xae>
   1c624:	680c      	ldr	r4, [r1, #0]
   1c626:	01e4      	lsls	r4, r4, #7
   1c628:	d447      	bmi.n	1c6ba <ip_interface_socketoption_send+0xae>
   1c62a:	680c      	ldr	r4, [r1, #0]
   1c62c:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
   1c630:	d143      	bne.n	1c6ba <ip_interface_socketoption_send+0xae>
   1c632:	4688      	mov	r8, r1
   1c634:	f8d1 9000 	ldr.w	r9, [r1]
   1c638:	461f      	mov	r7, r3
   1c63a:	680b      	ldr	r3, [r1, #0]
   1c63c:	4605      	mov	r5, r0
   1c63e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1c642:	a802      	add	r0, sp, #8
   1c644:	600b      	str	r3, [r1, #0]
   1c646:	f840 4d04 	str.w	r4, [r0, #-4]!
   1c64a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c64c:	4616      	mov	r6, r2
   1c64e:	f8d8 a018 	ldr.w	sl, [r8, #24]
   1c652:	f7ff f9d7 	bl	1ba04 <rpc_ip_client_request_alloc>
   1c656:	bba8      	cbnz	r0, 1c6c4 <ip_interface_socketoption_send+0xb8>
   1c658:	f247 0303 	movw	r3, #28675	; 0x7003
   1c65c:	2208      	movs	r2, #8
   1c65e:	9c01      	ldr	r4, [sp, #4]
   1c660:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   1c664:	60e3      	str	r3, [r4, #12]
   1c666:	f8c4 a010 	str.w	sl, [r4, #16]
   1c66a:	7260      	strb	r0, [r4, #9]
   1c66c:	72a0      	strb	r0, [r4, #10]
   1c66e:	72e0      	strb	r0, [r4, #11]
   1c670:	7222      	strb	r2, [r4, #8]
   1c672:	68a3      	ldr	r3, [r4, #8]
   1c674:	6166      	str	r6, [r4, #20]
   1c676:	3308      	adds	r3, #8
   1c678:	60a3      	str	r3, [r4, #8]
   1c67a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c67c:	61a7      	str	r7, [r4, #24]
   1c67e:	b133      	cbz	r3, 1c68e <ip_interface_socketoption_send+0x82>
   1c680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c682:	b123      	cbz	r3, 1c68e <ip_interface_socketoption_send+0x82>
   1c684:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c686:	4619      	mov	r1, r3
   1c688:	6820      	ldr	r0, [r4, #0]
   1c68a:	f7f0 fa5f 	bl	cb4c <memcpy>
   1c68e:	f247 0103 	movw	r1, #28675	; 0x7003
   1c692:	4620      	mov	r0, r4
   1c694:	f7ff f9ca 	bl	1ba2c <rpc_ip_client_request_send>
   1c698:	4606      	mov	r6, r0
   1c69a:	b9c0      	cbnz	r0, 1c6ce <ip_interface_socketoption_send+0xc2>
   1c69c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1c6a0:	466b      	mov	r3, sp
   1c6a2:	4611      	mov	r1, r2
   1c6a4:	4628      	mov	r0, r5
   1c6a6:	f005 fa5b 	bl	21b60 <interface_socket_wait>
   1c6aa:	4604      	mov	r4, r0
   1c6ac:	b1d0      	cbz	r0, 1c6e4 <ip_interface_socketoption_send+0xd8>
   1c6ae:	4620      	mov	r0, r4
   1c6b0:	f8c8 9000 	str.w	r9, [r8]
   1c6b4:	b002      	add	sp, #8
   1c6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c6ba:	2423      	movs	r4, #35	; 0x23
   1c6bc:	4620      	mov	r0, r4
   1c6be:	b002      	add	sp, #8
   1c6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c6c4:	9c01      	ldr	r4, [sp, #4]
   1c6c6:	2c00      	cmp	r4, #0
   1c6c8:	d1d3      	bne.n	1c672 <ip_interface_socketoption_send+0x66>
   1c6ca:	240c      	movs	r4, #12
   1c6cc:	e7ef      	b.n	1c6ae <ip_interface_socketoption_send+0xa2>
   1c6ce:	6820      	ldr	r0, [r4, #0]
   1c6d0:	b108      	cbz	r0, 1c6d6 <ip_interface_socketoption_send+0xca>
   1c6d2:	f7ff f9c9 	bl	1ba68 <rpc_ip_client_data_free>
   1c6d6:	4620      	mov	r0, r4
   1c6d8:	f7ff f9be 	bl	1ba58 <rpc_ip_client_message_free>
   1c6dc:	2423      	movs	r4, #35	; 0x23
   1c6de:	f8c8 9000 	str.w	r9, [r8]
   1c6e2:	e7e4      	b.n	1c6ae <ip_interface_socketoption_send+0xa2>
   1c6e4:	4628      	mov	r0, r5
   1c6e6:	f005 faaf 	bl	21c48 <interface_socket_from_handle_get>
   1c6ea:	2800      	cmp	r0, #0
   1c6ec:	d0df      	beq.n	1c6ae <ip_interface_socketoption_send+0xa2>
   1c6ee:	6844      	ldr	r4, [r0, #4]
   1c6f0:	2c00      	cmp	r4, #0
   1c6f2:	d0dc      	beq.n	1c6ae <ip_interface_socketoption_send+0xa2>
   1c6f4:	6046      	str	r6, [r0, #4]
   1c6f6:	e7da      	b.n	1c6ae <ip_interface_socketoption_send+0xa2>

0001c6f8 <ip_interface_bind>:
   1c6f8:	f04f 33ff 	mov.w	r3, #4294967295
   1c6fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c700:	b083      	sub	sp, #12
   1c702:	9300      	str	r3, [sp, #0]
   1c704:	b3b1      	cbz	r1, 1c774 <ip_interface_bind+0x7c>
   1c706:	4616      	mov	r6, r2
   1c708:	b3a2      	cbz	r2, 1c774 <ip_interface_bind+0x7c>
   1c70a:	4607      	mov	r7, r0
   1c70c:	4688      	mov	r8, r1
   1c70e:	f005 fa9b 	bl	21c48 <interface_socket_from_handle_get>
   1c712:	4605      	mov	r5, r0
   1c714:	2800      	cmp	r0, #0
   1c716:	d04a      	beq.n	1c7ae <ip_interface_bind+0xb6>
   1c718:	6803      	ldr	r3, [r0, #0]
   1c71a:	b29b      	uxth	r3, r3
   1c71c:	2b02      	cmp	r3, #2
   1c71e:	d146      	bne.n	1c7ae <ip_interface_bind+0xb6>
   1c720:	2100      	movs	r1, #0
   1c722:	a802      	add	r0, sp, #8
   1c724:	f840 1d04 	str.w	r1, [r0, #-4]!
   1c728:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1c72c:	f7ff f96a 	bl	1ba04 <rpc_ip_client_request_alloc>
   1c730:	bb50      	cbnz	r0, 1c788 <ip_interface_bind+0x90>
   1c732:	f247 0305 	movw	r3, #28677	; 0x7005
   1c736:	2208      	movs	r2, #8
   1c738:	9c01      	ldr	r4, [sp, #4]
   1c73a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   1c73e:	60e3      	str	r3, [r4, #12]
   1c740:	f8c4 9010 	str.w	r9, [r4, #16]
   1c744:	7260      	strb	r0, [r4, #9]
   1c746:	72a0      	strb	r0, [r4, #10]
   1c748:	72e0      	strb	r0, [r4, #11]
   1c74a:	7222      	strb	r2, [r4, #8]
   1c74c:	68a3      	ldr	r3, [r4, #8]
   1c74e:	3304      	adds	r3, #4
   1c750:	60a3      	str	r3, [r4, #8]
   1c752:	68eb      	ldr	r3, [r5, #12]
   1c754:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1c758:	4293      	cmp	r3, r2
   1c75a:	d11a      	bne.n	1c792 <ip_interface_bind+0x9a>
   1c75c:	f898 2000 	ldrb.w	r2, [r8]
   1c760:	4296      	cmp	r6, r2
   1c762:	d107      	bne.n	1c774 <ip_interface_bind+0x7c>
   1c764:	2b02      	cmp	r3, #2
   1c766:	f104 0018 	add.w	r0, r4, #24
   1c76a:	d014      	beq.n	1c796 <ip_interface_bind+0x9e>
   1c76c:	2b0a      	cmp	r3, #10
   1c76e:	d101      	bne.n	1c774 <ip_interface_bind+0x7c>
   1c770:	2e24      	cmp	r6, #36	; 0x24
   1c772:	d01e      	beq.n	1c7b2 <ip_interface_bind+0xba>
   1c774:	2416      	movs	r4, #22
   1c776:	4620      	mov	r0, r4
   1c778:	f7fa fa22 	bl	16bc0 <bsd_os_errno_set>
   1c77c:	f04f 34ff 	mov.w	r4, #4294967295
   1c780:	4620      	mov	r0, r4
   1c782:	b003      	add	sp, #12
   1c784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c788:	9c01      	ldr	r4, [sp, #4]
   1c78a:	2c00      	cmp	r4, #0
   1c78c:	d1de      	bne.n	1c74c <ip_interface_bind+0x54>
   1c78e:	240c      	movs	r4, #12
   1c790:	e7f1      	b.n	1c776 <ip_interface_bind+0x7e>
   1c792:	242f      	movs	r4, #47	; 0x2f
   1c794:	e7ef      	b.n	1c776 <ip_interface_bind+0x7e>
   1c796:	2e10      	cmp	r6, #16
   1c798:	d1ec      	bne.n	1c774 <ip_interface_bind+0x7c>
   1c79a:	2204      	movs	r2, #4
   1c79c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1c7a0:	f108 010c 	add.w	r1, r8, #12
   1c7a4:	82e2      	strh	r2, [r4, #22]
   1c7a6:	82a3      	strh	r3, [r4, #20]
   1c7a8:	f7f0 f9d0 	bl	cb4c <memcpy>
   1c7ac:	e00a      	b.n	1c7c4 <ip_interface_bind+0xcc>
   1c7ae:	2409      	movs	r4, #9
   1c7b0:	e7e1      	b.n	1c776 <ip_interface_bind+0x7e>
   1c7b2:	2210      	movs	r2, #16
   1c7b4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1c7b8:	eb08 0102 	add.w	r1, r8, r2
   1c7bc:	82e2      	strh	r2, [r4, #22]
   1c7be:	82a3      	strh	r3, [r4, #20]
   1c7c0:	f7f0 f9c4 	bl	cb4c <memcpy>
   1c7c4:	68a3      	ldr	r3, [r4, #8]
   1c7c6:	8ae2      	ldrh	r2, [r4, #22]
   1c7c8:	f247 0105 	movw	r1, #28677	; 0x7005
   1c7cc:	4413      	add	r3, r2
   1c7ce:	60a3      	str	r3, [r4, #8]
   1c7d0:	682b      	ldr	r3, [r5, #0]
   1c7d2:	4620      	mov	r0, r4
   1c7d4:	0c1b      	lsrs	r3, r3, #16
   1c7d6:	041b      	lsls	r3, r3, #16
   1c7d8:	f043 0303 	orr.w	r3, r3, #3
   1c7dc:	602b      	str	r3, [r5, #0]
   1c7de:	682e      	ldr	r6, [r5, #0]
   1c7e0:	f7ff f924 	bl	1ba2c <rpc_ip_client_request_send>
   1c7e4:	4680      	mov	r8, r0
   1c7e6:	b978      	cbnz	r0, 1c808 <ip_interface_bind+0x110>
   1c7e8:	466b      	mov	r3, sp
   1c7ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c7ee:	2104      	movs	r1, #4
   1c7f0:	4638      	mov	r0, r7
   1c7f2:	f005 f9b5 	bl	21b60 <interface_socket_wait>
   1c7f6:	4604      	mov	r4, r0
   1c7f8:	b1a0      	cbz	r0, 1c824 <ip_interface_bind+0x12c>
   1c7fa:	682b      	ldr	r3, [r5, #0]
   1c7fc:	0c1b      	lsrs	r3, r3, #16
   1c7fe:	041b      	lsls	r3, r3, #16
   1c800:	f043 0302 	orr.w	r3, r3, #2
   1c804:	602b      	str	r3, [r5, #0]
   1c806:	e7b6      	b.n	1c776 <ip_interface_bind+0x7e>
   1c808:	6820      	ldr	r0, [r4, #0]
   1c80a:	b108      	cbz	r0, 1c810 <ip_interface_bind+0x118>
   1c80c:	f7ff f92c 	bl	1ba68 <rpc_ip_client_data_free>
   1c810:	0c36      	lsrs	r6, r6, #16
   1c812:	0436      	lsls	r6, r6, #16
   1c814:	4620      	mov	r0, r4
   1c816:	f046 0602 	orr.w	r6, r6, #2
   1c81a:	f7ff f91d 	bl	1ba58 <rpc_ip_client_message_free>
   1c81e:	2423      	movs	r4, #35	; 0x23
   1c820:	602e      	str	r6, [r5, #0]
   1c822:	e7a8      	b.n	1c776 <ip_interface_bind+0x7e>
   1c824:	4638      	mov	r0, r7
   1c826:	f005 fa0f 	bl	21c48 <interface_socket_from_handle_get>
   1c82a:	2800      	cmp	r0, #0
   1c82c:	d0a8      	beq.n	1c780 <ip_interface_bind+0x88>
   1c82e:	6844      	ldr	r4, [r0, #4]
   1c830:	2c00      	cmp	r4, #0
   1c832:	d0a5      	beq.n	1c780 <ip_interface_bind+0x88>
   1c834:	f8c0 8004 	str.w	r8, [r0, #4]
   1c838:	e7df      	b.n	1c7fa <ip_interface_bind+0x102>
   1c83a:	bf00      	nop

0001c83c <ip_interface_listen>:
   1c83c:	f04f 33ff 	mov.w	r3, #4294967295
   1c840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c844:	b082      	sub	sp, #8
   1c846:	4606      	mov	r6, r0
   1c848:	9300      	str	r3, [sp, #0]
   1c84a:	f005 f9fd 	bl	21c48 <interface_socket_from_handle_get>
   1c84e:	2800      	cmp	r0, #0
   1c850:	d06c      	beq.n	1c92c <ip_interface_listen+0xf0>
   1c852:	6803      	ldr	r3, [r0, #0]
   1c854:	4604      	mov	r4, r0
   1c856:	b29b      	uxth	r3, r3
   1c858:	2b04      	cmp	r3, #4
   1c85a:	d003      	beq.n	1c864 <ip_interface_listen+0x28>
   1c85c:	6803      	ldr	r3, [r0, #0]
   1c85e:	b29b      	uxth	r3, r3
   1c860:	2b0b      	cmp	r3, #11
   1c862:	d163      	bne.n	1c92c <ip_interface_listen+0xf0>
   1c864:	2100      	movs	r1, #0
   1c866:	4a32      	ldr	r2, [pc, #200]	; (1c930 <ip_interface_listen+0xf4>)
   1c868:	4630      	mov	r0, r6
   1c86a:	f005 f941 	bl	21af0 <interface_socket_packet_handler_update>
   1c86e:	4601      	mov	r1, r0
   1c870:	2800      	cmp	r0, #0
   1c872:	d159      	bne.n	1c928 <ip_interface_listen+0xec>
   1c874:	a802      	add	r0, sp, #8
   1c876:	f840 1d04 	str.w	r1, [r0, #-4]!
   1c87a:	69a7      	ldr	r7, [r4, #24]
   1c87c:	f7ff f8c2 	bl	1ba04 <rpc_ip_client_request_alloc>
   1c880:	bba0      	cbnz	r0, 1c8ec <ip_interface_listen+0xb0>
   1c882:	f247 0308 	movw	r3, #28680	; 0x7008
   1c886:	2208      	movs	r2, #8
   1c888:	9d01      	ldr	r5, [sp, #4]
   1c88a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1c88e:	60eb      	str	r3, [r5, #12]
   1c890:	612f      	str	r7, [r5, #16]
   1c892:	7268      	strb	r0, [r5, #9]
   1c894:	72a8      	strb	r0, [r5, #10]
   1c896:	72e8      	strb	r0, [r5, #11]
   1c898:	722a      	strb	r2, [r5, #8]
   1c89a:	68ab      	ldr	r3, [r5, #8]
   1c89c:	f247 0108 	movw	r1, #28680	; 0x7008
   1c8a0:	3304      	adds	r3, #4
   1c8a2:	60ab      	str	r3, [r5, #8]
   1c8a4:	6823      	ldr	r3, [r4, #0]
   1c8a6:	4628      	mov	r0, r5
   1c8a8:	0c1b      	lsrs	r3, r3, #16
   1c8aa:	041b      	lsls	r3, r3, #16
   1c8ac:	f043 0306 	orr.w	r3, r3, #6
   1c8b0:	6023      	str	r3, [r4, #0]
   1c8b2:	6827      	ldr	r7, [r4, #0]
   1c8b4:	f7ff f8ba 	bl	1ba2c <rpc_ip_client_request_send>
   1c8b8:	4680      	mov	r8, r0
   1c8ba:	b9e0      	cbnz	r0, 1c8f6 <ip_interface_listen+0xba>
   1c8bc:	466b      	mov	r3, sp
   1c8be:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c8c2:	2107      	movs	r1, #7
   1c8c4:	4630      	mov	r0, r6
   1c8c6:	f005 f94b 	bl	21b60 <interface_socket_wait>
   1c8ca:	4605      	mov	r5, r0
   1c8cc:	b308      	cbz	r0, 1c912 <ip_interface_listen+0xd6>
   1c8ce:	6823      	ldr	r3, [r4, #0]
   1c8d0:	0c1b      	lsrs	r3, r3, #16
   1c8d2:	041b      	lsls	r3, r3, #16
   1c8d4:	f043 0304 	orr.w	r3, r3, #4
   1c8d8:	6023      	str	r3, [r4, #0]
   1c8da:	4628      	mov	r0, r5
   1c8dc:	f7fa f970 	bl	16bc0 <bsd_os_errno_set>
   1c8e0:	f04f 35ff 	mov.w	r5, #4294967295
   1c8e4:	4628      	mov	r0, r5
   1c8e6:	b002      	add	sp, #8
   1c8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c8ec:	9d01      	ldr	r5, [sp, #4]
   1c8ee:	2d00      	cmp	r5, #0
   1c8f0:	d1d3      	bne.n	1c89a <ip_interface_listen+0x5e>
   1c8f2:	250c      	movs	r5, #12
   1c8f4:	e7f1      	b.n	1c8da <ip_interface_listen+0x9e>
   1c8f6:	6828      	ldr	r0, [r5, #0]
   1c8f8:	b108      	cbz	r0, 1c8fe <ip_interface_listen+0xc2>
   1c8fa:	f7ff f8b5 	bl	1ba68 <rpc_ip_client_data_free>
   1c8fe:	0c3f      	lsrs	r7, r7, #16
   1c900:	043f      	lsls	r7, r7, #16
   1c902:	4628      	mov	r0, r5
   1c904:	f047 0704 	orr.w	r7, r7, #4
   1c908:	f7ff f8a6 	bl	1ba58 <rpc_ip_client_message_free>
   1c90c:	2523      	movs	r5, #35	; 0x23
   1c90e:	6027      	str	r7, [r4, #0]
   1c910:	e7e3      	b.n	1c8da <ip_interface_listen+0x9e>
   1c912:	4630      	mov	r0, r6
   1c914:	f005 f998 	bl	21c48 <interface_socket_from_handle_get>
   1c918:	2800      	cmp	r0, #0
   1c91a:	d0e3      	beq.n	1c8e4 <ip_interface_listen+0xa8>
   1c91c:	6845      	ldr	r5, [r0, #4]
   1c91e:	2d00      	cmp	r5, #0
   1c920:	d0e0      	beq.n	1c8e4 <ip_interface_listen+0xa8>
   1c922:	f8c0 8004 	str.w	r8, [r0, #4]
   1c926:	e7d2      	b.n	1c8ce <ip_interface_listen+0x92>
   1c928:	2523      	movs	r5, #35	; 0x23
   1c92a:	e7d6      	b.n	1c8da <ip_interface_listen+0x9e>
   1c92c:	2509      	movs	r5, #9
   1c92e:	e7d4      	b.n	1c8da <ip_interface_listen+0x9e>
   1c930:	0001ba79 	.word	0x0001ba79

0001c934 <ip_interface_accept>:
   1c934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c938:	f04f 33ff 	mov.w	r3, #4294967295
   1c93c:	2500      	movs	r5, #0
   1c93e:	b087      	sub	sp, #28
   1c940:	460f      	mov	r7, r1
   1c942:	4690      	mov	r8, r2
   1c944:	e9cd 5303 	strd	r5, r3, [sp, #12]
   1c948:	4606      	mov	r6, r0
   1c94a:	f005 f97d 	bl	21c48 <interface_socket_from_handle_get>
   1c94e:	4604      	mov	r4, r0
   1c950:	2800      	cmp	r0, #0
   1c952:	f000 8123 	beq.w	1cb9c <ip_interface_accept+0x268>
   1c956:	6803      	ldr	r3, [r0, #0]
   1c958:	b29b      	uxth	r3, r3
   1c95a:	2b07      	cmp	r3, #7
   1c95c:	d10a      	bne.n	1c974 <ip_interface_accept+0x40>
   1c95e:	6803      	ldr	r3, [r0, #0]
   1c960:	6805      	ldr	r5, [r0, #0]
   1c962:	00db      	lsls	r3, r3, #3
   1c964:	d416      	bmi.n	1c994 <ip_interface_accept+0x60>
   1c966:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1c96a:	d019      	beq.n	1c9a0 <ip_interface_accept+0x6c>
   1c96c:	6805      	ldr	r5, [r0, #0]
   1c96e:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1c972:	d124      	bne.n	1c9be <ip_interface_accept+0x8a>
   1c974:	f04f 0909 	mov.w	r9, #9
   1c978:	9b03      	ldr	r3, [sp, #12]
   1c97a:	b113      	cbz	r3, 1c982 <ip_interface_accept+0x4e>
   1c97c:	4628      	mov	r0, r5
   1c97e:	f005 f8a1 	bl	21ac4 <interface_socket_free>
   1c982:	4648      	mov	r0, r9
   1c984:	f04f 39ff 	mov.w	r9, #4294967295
   1c988:	f7fa f91a 	bl	16bc0 <bsd_os_errno_set>
   1c98c:	4648      	mov	r0, r9
   1c98e:	b007      	add	sp, #28
   1c990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c994:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1c998:	d170      	bne.n	1ca7c <ip_interface_accept+0x148>
   1c99a:	f04f 0923 	mov.w	r9, #35	; 0x23
   1c99e:	e7eb      	b.n	1c978 <ip_interface_accept+0x44>
   1c9a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c9a4:	ab04      	add	r3, sp, #16
   1c9a6:	4611      	mov	r1, r2
   1c9a8:	4630      	mov	r0, r6
   1c9aa:	f005 f8d9 	bl	21b60 <interface_socket_wait>
   1c9ae:	4681      	mov	r9, r0
   1c9b0:	2800      	cmp	r0, #0
   1c9b2:	f000 8082 	beq.w	1caba <ip_interface_accept+0x186>
   1c9b6:	6825      	ldr	r5, [r4, #0]
   1c9b8:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1c9bc:	d0dc      	beq.n	1c978 <ip_interface_accept+0x44>
   1c9be:	f04f 30ff 	mov.w	r0, #4294967295
   1c9c2:	2300      	movs	r3, #0
   1c9c4:	e9cd 0300 	strd	r0, r3, [sp]
   1c9c8:	4a78      	ldr	r2, [pc, #480]	; (1cbac <ip_interface_accept+0x278>)
   1c9ca:	6921      	ldr	r1, [r4, #16]
   1c9cc:	a803      	add	r0, sp, #12
   1c9ce:	f005 f815 	bl	219fc <interface_socket_allocate>
   1c9d2:	9b03      	ldr	r3, [sp, #12]
   1c9d4:	4605      	mov	r5, r0
   1c9d6:	2b00      	cmp	r3, #0
   1c9d8:	f000 80e4 	beq.w	1cba4 <ip_interface_accept+0x270>
   1c9dc:	2100      	movs	r1, #0
   1c9de:	6962      	ldr	r2, [r4, #20]
   1c9e0:	a806      	add	r0, sp, #24
   1c9e2:	615a      	str	r2, [r3, #20]
   1c9e4:	68e2      	ldr	r2, [r4, #12]
   1c9e6:	f840 1d04 	str.w	r1, [r0, #-4]!
   1c9ea:	60da      	str	r2, [r3, #12]
   1c9ec:	6922      	ldr	r2, [r4, #16]
   1c9ee:	611a      	str	r2, [r3, #16]
   1c9f0:	f8d4 9018 	ldr.w	r9, [r4, #24]
   1c9f4:	f7ff f806 	bl	1ba04 <rpc_ip_client_request_alloc>
   1c9f8:	2800      	cmp	r0, #0
   1c9fa:	d146      	bne.n	1ca8a <ip_interface_accept+0x156>
   1c9fc:	f247 030c 	movw	r3, #28684	; 0x700c
   1ca00:	2108      	movs	r1, #8
   1ca02:	f8dd b014 	ldr.w	fp, [sp, #20]
   1ca06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1ca0a:	f8cb 300c 	str.w	r3, [fp, #12]
   1ca0e:	f8cb 9010 	str.w	r9, [fp, #16]
   1ca12:	f88b 0009 	strb.w	r0, [fp, #9]
   1ca16:	f88b 000a 	strb.w	r0, [fp, #10]
   1ca1a:	f88b 000b 	strb.w	r0, [fp, #11]
   1ca1e:	f88b 1008 	strb.w	r1, [fp, #8]
   1ca22:	6823      	ldr	r3, [r4, #0]
   1ca24:	f247 010c 	movw	r1, #28684	; 0x700c
   1ca28:	0c1b      	lsrs	r3, r3, #16
   1ca2a:	041b      	lsls	r3, r3, #16
   1ca2c:	f043 0308 	orr.w	r3, r3, #8
   1ca30:	6023      	str	r3, [r4, #0]
   1ca32:	4658      	mov	r0, fp
   1ca34:	f8d4 9000 	ldr.w	r9, [r4]
   1ca38:	f7fe fff8 	bl	1ba2c <rpc_ip_client_request_send>
   1ca3c:	4682      	mov	sl, r0
   1ca3e:	bb60      	cbnz	r0, 1ca9a <ip_interface_accept+0x166>
   1ca40:	6822      	ldr	r2, [r4, #0]
   1ca42:	9900      	ldr	r1, [sp, #0]
   1ca44:	ab04      	add	r3, sp, #16
   1ca46:	400a      	ands	r2, r1
   1ca48:	6022      	str	r2, [r4, #0]
   1ca4a:	2109      	movs	r1, #9
   1ca4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ca50:	4630      	mov	r0, r6
   1ca52:	f005 f885 	bl	21b60 <interface_socket_wait>
   1ca56:	4681      	mov	r9, r0
   1ca58:	2800      	cmp	r0, #0
   1ca5a:	f000 808d 	beq.w	1cb78 <ip_interface_accept+0x244>
   1ca5e:	6823      	ldr	r3, [r4, #0]
   1ca60:	9a01      	ldr	r2, [sp, #4]
   1ca62:	431a      	orrs	r2, r3
   1ca64:	6022      	str	r2, [r4, #0]
   1ca66:	6823      	ldr	r3, [r4, #0]
   1ca68:	0c1b      	lsrs	r3, r3, #16
   1ca6a:	041b      	lsls	r3, r3, #16
   1ca6c:	f043 0307 	orr.w	r3, r3, #7
   1ca70:	6023      	str	r3, [r4, #0]
   1ca72:	6823      	ldr	r3, [r4, #0]
   1ca74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1ca78:	6023      	str	r3, [r4, #0]
   1ca7a:	e77d      	b.n	1c978 <ip_interface_accept+0x44>
   1ca7c:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   1ca80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ca84:	e9cd 2300 	strd	r2, r3, [sp]
   1ca88:	e79e      	b.n	1c9c8 <ip_interface_accept+0x94>
   1ca8a:	f8dd b014 	ldr.w	fp, [sp, #20]
   1ca8e:	f04f 090c 	mov.w	r9, #12
   1ca92:	f1bb 0f00 	cmp.w	fp, #0
   1ca96:	d1c4      	bne.n	1ca22 <ip_interface_accept+0xee>
   1ca98:	e76e      	b.n	1c978 <ip_interface_accept+0x44>
   1ca9a:	f8db 0000 	ldr.w	r0, [fp]
   1ca9e:	b108      	cbz	r0, 1caa4 <ip_interface_accept+0x170>
   1caa0:	f7fe ffe2 	bl	1ba68 <rpc_ip_client_data_free>
   1caa4:	ea4f 4919 	mov.w	r9, r9, lsr #16
   1caa8:	4658      	mov	r0, fp
   1caaa:	ea4f 4909 	mov.w	r9, r9, lsl #16
   1caae:	f7fe ffd3 	bl	1ba58 <rpc_ip_client_message_free>
   1cab2:	f049 0307 	orr.w	r3, r9, #7
   1cab6:	6023      	str	r3, [r4, #0]
   1cab8:	e76f      	b.n	1c99a <ip_interface_accept+0x66>
   1caba:	4630      	mov	r0, r6
   1cabc:	f005 f8c4 	bl	21c48 <interface_socket_from_handle_get>
   1cac0:	b130      	cbz	r0, 1cad0 <ip_interface_accept+0x19c>
   1cac2:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1cac6:	f1b9 0f00 	cmp.w	r9, #0
   1caca:	d001      	beq.n	1cad0 <ip_interface_accept+0x19c>
   1cacc:	6045      	str	r5, [r0, #4]
   1cace:	e772      	b.n	1c9b6 <ip_interface_accept+0x82>
   1cad0:	6823      	ldr	r3, [r4, #0]
   1cad2:	03d9      	lsls	r1, r3, #15
   1cad4:	f53f af73 	bmi.w	1c9be <ip_interface_accept+0x8a>
   1cad8:	4d35      	ldr	r5, [pc, #212]	; (1cbb0 <ip_interface_accept+0x27c>)
   1cada:	9903      	ldr	r1, [sp, #12]
   1cadc:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1cae0:	699b      	ldr	r3, [r3, #24]
   1cae2:	618b      	str	r3, [r1, #24]
   1cae4:	b147      	cbz	r7, 1caf8 <ip_interface_accept+0x1c4>
   1cae6:	68cb      	ldr	r3, [r1, #12]
   1cae8:	2b0a      	cmp	r3, #10
   1caea:	d028      	beq.n	1cb3e <ip_interface_accept+0x20a>
   1caec:	2b02      	cmp	r3, #2
   1caee:	d103      	bne.n	1caf8 <ip_interface_accept+0x1c4>
   1caf0:	f8d8 2000 	ldr.w	r2, [r8]
   1caf4:	2a10      	cmp	r2, #16
   1caf6:	d036      	beq.n	1cb66 <ip_interface_accept+0x232>
   1caf8:	680a      	ldr	r2, [r1, #0]
   1cafa:	482e      	ldr	r0, [pc, #184]	; (1cbb4 <ip_interface_accept+0x280>)
   1cafc:	4002      	ands	r2, r0
   1cafe:	f042 0205 	orr.w	r2, r2, #5
   1cb02:	600a      	str	r2, [r1, #0]
   1cb04:	9a03      	ldr	r2, [sp, #12]
   1cb06:	6811      	ldr	r1, [r2, #0]
   1cb08:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   1cb0c:	6011      	str	r1, [r2, #0]
   1cb0e:	6811      	ldr	r1, [r2, #0]
   1cb10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cb14:	6011      	str	r1, [r2, #0]
   1cb16:	6823      	ldr	r3, [r4, #0]
   1cb18:	4003      	ands	r3, r0
   1cb1a:	f043 0307 	orr.w	r3, r3, #7
   1cb1e:	6023      	str	r3, [r4, #0]
   1cb20:	6823      	ldr	r3, [r4, #0]
   1cb22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1cb26:	6023      	str	r3, [r4, #0]
   1cb28:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   1cb2c:	f7fe ff94 	bl	1ba58 <rpc_ip_client_message_free>
   1cb30:	2300      	movs	r3, #0
   1cb32:	4648      	mov	r0, r9
   1cb34:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   1cb38:	b007      	add	sp, #28
   1cb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb3e:	f8d8 2000 	ldr.w	r2, [r8]
   1cb42:	2a24      	cmp	r2, #36	; 0x24
   1cb44:	d1d8      	bne.n	1caf8 <ip_interface_accept+0x1c4>
   1cb46:	703a      	strb	r2, [r7, #0]
   1cb48:	2210      	movs	r2, #16
   1cb4a:	607b      	str	r3, [r7, #4]
   1cb4c:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1cb50:	f107 0010 	add.w	r0, r7, #16
   1cb54:	8b9b      	ldrh	r3, [r3, #28]
   1cb56:	813b      	strh	r3, [r7, #8]
   1cb58:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   1cb5c:	3120      	adds	r1, #32
   1cb5e:	f7ef fff5 	bl	cb4c <memcpy>
   1cb62:	9903      	ldr	r1, [sp, #12]
   1cb64:	e7c8      	b.n	1caf8 <ip_interface_accept+0x1c4>
   1cb66:	703a      	strb	r2, [r7, #0]
   1cb68:	607b      	str	r3, [r7, #4]
   1cb6a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1cb6e:	f107 000c 	add.w	r0, r7, #12
   1cb72:	8b9b      	ldrh	r3, [r3, #28]
   1cb74:	2204      	movs	r2, #4
   1cb76:	e7ee      	b.n	1cb56 <ip_interface_accept+0x222>
   1cb78:	4630      	mov	r0, r6
   1cb7a:	f005 f865 	bl	21c48 <interface_socket_from_handle_get>
   1cb7e:	b138      	cbz	r0, 1cb90 <ip_interface_accept+0x25c>
   1cb80:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1cb84:	f1b9 0f00 	cmp.w	r9, #0
   1cb88:	d002      	beq.n	1cb90 <ip_interface_accept+0x25c>
   1cb8a:	f8c0 a004 	str.w	sl, [r0, #4]
   1cb8e:	e766      	b.n	1ca5e <ip_interface_accept+0x12a>
   1cb90:	6823      	ldr	r3, [r4, #0]
   1cb92:	9a01      	ldr	r2, [sp, #4]
   1cb94:	46a9      	mov	r9, r5
   1cb96:	4313      	orrs	r3, r2
   1cb98:	6023      	str	r3, [r4, #0]
   1cb9a:	e79d      	b.n	1cad8 <ip_interface_accept+0x1a4>
   1cb9c:	4605      	mov	r5, r0
   1cb9e:	f04f 0909 	mov.w	r9, #9
   1cba2:	e6e9      	b.n	1c978 <ip_interface_accept+0x44>
   1cba4:	f04f 090c 	mov.w	r9, #12
   1cba8:	e6eb      	b.n	1c982 <ip_interface_accept+0x4e>
   1cbaa:	bf00      	nop
   1cbac:	0001ba79 	.word	0x0001ba79
   1cbb0:	200219e8 	.word	0x200219e8
   1cbb4:	ffff0000 	.word	0xffff0000

0001cbb8 <ip_interface_setopt>:
   1cbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cbbc:	2901      	cmp	r1, #1
   1cbbe:	b084      	sub	sp, #16
   1cbc0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1cbc2:	f040 808a 	bne.w	1ccda <ip_interface_setopt+0x122>
   1cbc6:	4617      	mov	r7, r2
   1cbc8:	461d      	mov	r5, r3
   1cbca:	4680      	mov	r8, r0
   1cbcc:	f005 f83c 	bl	21c48 <interface_socket_from_handle_get>
   1cbd0:	4604      	mov	r4, r0
   1cbd2:	2800      	cmp	r0, #0
   1cbd4:	f000 808d 	beq.w	1ccf2 <ip_interface_setopt+0x13a>
   1cbd8:	f1a7 0119 	sub.w	r1, r7, #25
   1cbdc:	290f      	cmp	r1, #15
   1cbde:	d872      	bhi.n	1ccc6 <ip_interface_setopt+0x10e>
   1cbe0:	e8df f001 	tbb	[pc, r1]
   1cbe4:	7171711a 	.word	0x7171711a
   1cbe8:	61514071 	.word	0x61514071
   1cbec:	71717171 	.word	0x71717171
   1cbf0:	08717171 	.word	0x08717171
   1cbf4:	2e04      	cmp	r6, #4
   1cbf6:	d176      	bne.n	1cce6 <ip_interface_setopt+0x12e>
   1cbf8:	2d00      	cmp	r5, #0
   1cbfa:	d074      	beq.n	1cce6 <ip_interface_setopt+0x12e>
   1cbfc:	4601      	mov	r1, r0
   1cbfe:	e9cd 5600 	strd	r5, r6, [sp]
   1cc02:	4640      	mov	r0, r8
   1cc04:	f241 0304 	movw	r3, #4100	; 0x1004
   1cc08:	2208      	movs	r2, #8
   1cc0a:	f7ff fcff 	bl	1c60c <ip_interface_socketoption_send>
   1cc0e:	bb20      	cbnz	r0, 1cc5a <ip_interface_setopt+0xa2>
   1cc10:	2000      	movs	r0, #0
   1cc12:	b004      	add	sp, #16
   1cc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cc18:	2d00      	cmp	r5, #0
   1cc1a:	d06c      	beq.n	1ccf6 <ip_interface_setopt+0x13e>
   1cc1c:	4628      	mov	r0, r5
   1cc1e:	f009 fe3d 	bl	2689c <strlen>
   1cc22:	42b0      	cmp	r0, r6
   1cc24:	d167      	bne.n	1ccf6 <ip_interface_setopt+0x13e>
   1cc26:	6823      	ldr	r3, [r4, #0]
   1cc28:	b29b      	uxth	r3, r3
   1cc2a:	2b02      	cmp	r3, #2
   1cc2c:	d161      	bne.n	1ccf2 <ip_interface_setopt+0x13a>
   1cc2e:	4629      	mov	r1, r5
   1cc30:	68e0      	ldr	r0, [r4, #12]
   1cc32:	f002 fdc1 	bl	1f7b8 <pdn_interface_pdn_id_get>
   1cc36:	9003      	str	r0, [sp, #12]
   1cc38:	3001      	adds	r0, #1
   1cc3a:	bf08      	it	eq
   1cc3c:	2016      	moveq	r0, #22
   1cc3e:	d00c      	beq.n	1cc5a <ip_interface_setopt+0xa2>
   1cc40:	2204      	movs	r2, #4
   1cc42:	ab03      	add	r3, sp, #12
   1cc44:	e9cd 3200 	strd	r3, r2, [sp]
   1cc48:	4621      	mov	r1, r4
   1cc4a:	4640      	mov	r0, r8
   1cc4c:	f243 0310 	movw	r3, #12304	; 0x3010
   1cc50:	2208      	movs	r2, #8
   1cc52:	f7ff fcdb 	bl	1c60c <ip_interface_socketoption_send>
   1cc56:	2800      	cmp	r0, #0
   1cc58:	d0da      	beq.n	1cc10 <ip_interface_setopt+0x58>
   1cc5a:	f7f9 ffb1 	bl	16bc0 <bsd_os_errno_set>
   1cc5e:	f04f 30ff 	mov.w	r0, #4294967295
   1cc62:	e7d6      	b.n	1cc12 <ip_interface_setopt+0x5a>
   1cc64:	2e04      	cmp	r6, #4
   1cc66:	d13e      	bne.n	1cce6 <ip_interface_setopt+0x12e>
   1cc68:	2d00      	cmp	r5, #0
   1cc6a:	d03c      	beq.n	1cce6 <ip_interface_setopt+0x12e>
   1cc6c:	4601      	mov	r1, r0
   1cc6e:	e9cd 5600 	strd	r5, r6, [sp]
   1cc72:	4640      	mov	r0, r8
   1cc74:	f248 0301 	movw	r3, #32769	; 0x8001
   1cc78:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cc7c:	f7ff fcc6 	bl	1c60c <ip_interface_socketoption_send>
   1cc80:	2800      	cmp	r0, #0
   1cc82:	d0c5      	beq.n	1cc10 <ip_interface_setopt+0x58>
   1cc84:	e7e9      	b.n	1cc5a <ip_interface_setopt+0xa2>
   1cc86:	2e04      	cmp	r6, #4
   1cc88:	d12d      	bne.n	1cce6 <ip_interface_setopt+0x12e>
   1cc8a:	b365      	cbz	r5, 1cce6 <ip_interface_setopt+0x12e>
   1cc8c:	4601      	mov	r1, r0
   1cc8e:	e9cd 5600 	strd	r5, r6, [sp]
   1cc92:	4640      	mov	r0, r8
   1cc94:	f244 0310 	movw	r3, #16400	; 0x4010
   1cc98:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cc9c:	f7ff fcb6 	bl	1c60c <ip_interface_socketoption_send>
   1cca0:	2800      	cmp	r0, #0
   1cca2:	d0b5      	beq.n	1cc10 <ip_interface_setopt+0x58>
   1cca4:	e7d9      	b.n	1cc5a <ip_interface_setopt+0xa2>
   1cca6:	2e04      	cmp	r6, #4
   1cca8:	d11d      	bne.n	1cce6 <ip_interface_setopt+0x12e>
   1ccaa:	b1e5      	cbz	r5, 1cce6 <ip_interface_setopt+0x12e>
   1ccac:	4601      	mov	r1, r0
   1ccae:	e9cd 5600 	strd	r5, r6, [sp]
   1ccb2:	4640      	mov	r0, r8
   1ccb4:	f246 0310 	movw	r3, #24592	; 0x6010
   1ccb8:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ccbc:	f7ff fca6 	bl	1c60c <ip_interface_socketoption_send>
   1ccc0:	2800      	cmp	r0, #0
   1ccc2:	d0a5      	beq.n	1cc10 <ip_interface_setopt+0x58>
   1ccc4:	e7c9      	b.n	1cc5a <ip_interface_setopt+0xa2>
   1ccc6:	9600      	str	r6, [sp, #0]
   1ccc8:	462b      	mov	r3, r5
   1ccca:	463a      	mov	r2, r7
   1cccc:	4640      	mov	r0, r8
   1ccce:	2101      	movs	r1, #1
   1ccd0:	f004 ffe2 	bl	21c98 <interface_socket_setopt>
   1ccd4:	b004      	add	sp, #16
   1ccd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ccda:	202a      	movs	r0, #42	; 0x2a
   1ccdc:	f7f9 ff70 	bl	16bc0 <bsd_os_errno_set>
   1cce0:	f04f 30ff 	mov.w	r0, #4294967295
   1cce4:	e795      	b.n	1cc12 <ip_interface_setopt+0x5a>
   1cce6:	2016      	movs	r0, #22
   1cce8:	f7f9 ff6a 	bl	16bc0 <bsd_os_errno_set>
   1ccec:	f04f 30ff 	mov.w	r0, #4294967295
   1ccf0:	e78f      	b.n	1cc12 <ip_interface_setopt+0x5a>
   1ccf2:	2009      	movs	r0, #9
   1ccf4:	e7b1      	b.n	1cc5a <ip_interface_setopt+0xa2>
   1ccf6:	200e      	movs	r0, #14
   1ccf8:	e7af      	b.n	1cc5a <ip_interface_setopt+0xa2>
   1ccfa:	bf00      	nop

0001ccfc <ip_interface_getopt>:
   1ccfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cd00:	2901      	cmp	r1, #1
   1cd02:	b082      	sub	sp, #8
   1cd04:	9c08      	ldr	r4, [sp, #32]
   1cd06:	d173      	bne.n	1cdf0 <ip_interface_getopt+0xf4>
   1cd08:	4617      	mov	r7, r2
   1cd0a:	461e      	mov	r6, r3
   1cd0c:	4680      	mov	r8, r0
   1cd0e:	f004 ff9b 	bl	21c48 <interface_socket_from_handle_get>
   1cd12:	2800      	cmp	r0, #0
   1cd14:	d072      	beq.n	1cdfc <ip_interface_getopt+0x100>
   1cd16:	f1a7 051e 	sub.w	r5, r7, #30
   1cd1a:	2d0a      	cmp	r5, #10
   1cd1c:	d858      	bhi.n	1cdd0 <ip_interface_getopt+0xd4>
   1cd1e:	e8df f005 	tbb	[pc, r5]
   1cd22:	331b      	.short	0x331b
   1cd24:	57575745 	.word	0x57575745
   1cd28:	57575757 	.word	0x57575757
   1cd2c:	06          	.byte	0x06
   1cd2d:	00          	.byte	0x00
   1cd2e:	2c00      	cmp	r4, #0
   1cd30:	d058      	beq.n	1cde4 <ip_interface_getopt+0xe8>
   1cd32:	6823      	ldr	r3, [r4, #0]
   1cd34:	2b04      	cmp	r3, #4
   1cd36:	d155      	bne.n	1cde4 <ip_interface_getopt+0xe8>
   1cd38:	2e00      	cmp	r6, #0
   1cd3a:	d053      	beq.n	1cde4 <ip_interface_getopt+0xe8>
   1cd3c:	4601      	mov	r1, r0
   1cd3e:	e9cd 6400 	strd	r6, r4, [sp]
   1cd42:	4640      	mov	r0, r8
   1cd44:	f241 0304 	movw	r3, #4100	; 0x1004
   1cd48:	2208      	movs	r2, #8
   1cd4a:	f7ff fbaf 	bl	1c4ac <ip_interface_socketoption_get>
   1cd4e:	b9b0      	cbnz	r0, 1cd7e <ip_interface_getopt+0x82>
   1cd50:	2000      	movs	r0, #0
   1cd52:	b002      	add	sp, #8
   1cd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cd58:	2c00      	cmp	r4, #0
   1cd5a:	d043      	beq.n	1cde4 <ip_interface_getopt+0xe8>
   1cd5c:	6823      	ldr	r3, [r4, #0]
   1cd5e:	2b04      	cmp	r3, #4
   1cd60:	d140      	bne.n	1cde4 <ip_interface_getopt+0xe8>
   1cd62:	2e00      	cmp	r6, #0
   1cd64:	d03e      	beq.n	1cde4 <ip_interface_getopt+0xe8>
   1cd66:	4601      	mov	r1, r0
   1cd68:	e9cd 6400 	strd	r6, r4, [sp]
   1cd6c:	4640      	mov	r0, r8
   1cd6e:	f248 0301 	movw	r3, #32769	; 0x8001
   1cd72:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cd76:	f7ff fb99 	bl	1c4ac <ip_interface_socketoption_get>
   1cd7a:	2800      	cmp	r0, #0
   1cd7c:	d0e8      	beq.n	1cd50 <ip_interface_getopt+0x54>
   1cd7e:	f7f9 ff1f 	bl	16bc0 <bsd_os_errno_set>
   1cd82:	f04f 30ff 	mov.w	r0, #4294967295
   1cd86:	e7e4      	b.n	1cd52 <ip_interface_getopt+0x56>
   1cd88:	b364      	cbz	r4, 1cde4 <ip_interface_getopt+0xe8>
   1cd8a:	6823      	ldr	r3, [r4, #0]
   1cd8c:	2b04      	cmp	r3, #4
   1cd8e:	d129      	bne.n	1cde4 <ip_interface_getopt+0xe8>
   1cd90:	b346      	cbz	r6, 1cde4 <ip_interface_getopt+0xe8>
   1cd92:	4601      	mov	r1, r0
   1cd94:	e9cd 6400 	strd	r6, r4, [sp]
   1cd98:	4640      	mov	r0, r8
   1cd9a:	f244 0310 	movw	r3, #16400	; 0x4010
   1cd9e:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cda2:	f7ff fb83 	bl	1c4ac <ip_interface_socketoption_get>
   1cda6:	2800      	cmp	r0, #0
   1cda8:	d0d2      	beq.n	1cd50 <ip_interface_getopt+0x54>
   1cdaa:	e7e8      	b.n	1cd7e <ip_interface_getopt+0x82>
   1cdac:	b1d4      	cbz	r4, 1cde4 <ip_interface_getopt+0xe8>
   1cdae:	6823      	ldr	r3, [r4, #0]
   1cdb0:	2b04      	cmp	r3, #4
   1cdb2:	d117      	bne.n	1cde4 <ip_interface_getopt+0xe8>
   1cdb4:	b1b6      	cbz	r6, 1cde4 <ip_interface_getopt+0xe8>
   1cdb6:	4601      	mov	r1, r0
   1cdb8:	e9cd 6400 	strd	r6, r4, [sp]
   1cdbc:	4640      	mov	r0, r8
   1cdbe:	f246 0310 	movw	r3, #24592	; 0x6010
   1cdc2:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cdc6:	f7ff fb71 	bl	1c4ac <ip_interface_socketoption_get>
   1cdca:	2800      	cmp	r0, #0
   1cdcc:	d0c0      	beq.n	1cd50 <ip_interface_getopt+0x54>
   1cdce:	e7d6      	b.n	1cd7e <ip_interface_getopt+0x82>
   1cdd0:	4633      	mov	r3, r6
   1cdd2:	463a      	mov	r2, r7
   1cdd4:	4640      	mov	r0, r8
   1cdd6:	2101      	movs	r1, #1
   1cdd8:	9408      	str	r4, [sp, #32]
   1cdda:	b002      	add	sp, #8
   1cddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cde0:	f004 bfa0 	b.w	21d24 <interface_socket_getopt>
   1cde4:	2016      	movs	r0, #22
   1cde6:	f7f9 feeb 	bl	16bc0 <bsd_os_errno_set>
   1cdea:	f04f 30ff 	mov.w	r0, #4294967295
   1cdee:	e7b0      	b.n	1cd52 <ip_interface_getopt+0x56>
   1cdf0:	202a      	movs	r0, #42	; 0x2a
   1cdf2:	f7f9 fee5 	bl	16bc0 <bsd_os_errno_set>
   1cdf6:	f04f 30ff 	mov.w	r0, #4294967295
   1cdfa:	e7aa      	b.n	1cd52 <ip_interface_getopt+0x56>
   1cdfc:	2009      	movs	r0, #9
   1cdfe:	f7f9 fedf 	bl	16bc0 <bsd_os_errno_set>
   1ce02:	f04f 30ff 	mov.w	r0, #4294967295
   1ce06:	e7a4      	b.n	1cd52 <ip_interface_getopt+0x56>

0001ce08 <ip_interface_getaddrinfo>:
   1ce08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce0c:	f04f 0c00 	mov.w	ip, #0
   1ce10:	2401      	movs	r4, #1
   1ce12:	4e75      	ldr	r6, [pc, #468]	; (1cfe8 <ip_interface_getaddrinfo+0x1e0>)
   1ce14:	4d75      	ldr	r5, [pc, #468]	; (1cfec <ip_interface_getaddrinfo+0x1e4>)
   1ce16:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 1cffc <ip_interface_getaddrinfo+0x1f4>
   1ce1a:	4f75      	ldr	r7, [pc, #468]	; (1cff0 <ip_interface_getaddrinfo+0x1e8>)
   1ce1c:	7836      	ldrb	r6, [r6, #0]
   1ce1e:	b085      	sub	sp, #20
   1ce20:	f8a5 c000 	strh.w	ip, [r5]
   1ce24:	f8c8 4000 	str.w	r4, [r8]
   1ce28:	603c      	str	r4, [r7, #0]
   1ce2a:	2e00      	cmp	r6, #0
   1ce2c:	d05b      	beq.n	1cee6 <ip_interface_getaddrinfo+0xde>
   1ce2e:	9301      	str	r3, [sp, #4]
   1ce30:	4614      	mov	r4, r2
   1ce32:	460b      	mov	r3, r1
   1ce34:	4606      	mov	r6, r0
   1ce36:	b171      	cbz	r1, 1ce56 <ip_interface_getaddrinfo+0x4e>
   1ce38:	4618      	mov	r0, r3
   1ce3a:	220a      	movs	r2, #10
   1ce3c:	4661      	mov	r1, ip
   1ce3e:	f00a f881 	bl	26f44 <strtol>
   1ce42:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   1ce46:	1e42      	subs	r2, r0, #1
   1ce48:	429a      	cmp	r2, r3
   1ce4a:	f200 8097 	bhi.w	1cf7c <ip_interface_getaddrinfo+0x174>
   1ce4e:	0203      	lsls	r3, r0, #8
   1ce50:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   1ce54:	8028      	strh	r0, [r5, #0]
   1ce56:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 1d000 <ip_interface_getaddrinfo+0x1f8>
   1ce5a:	f8da 3000 	ldr.w	r3, [sl]
   1ce5e:	2b00      	cmp	r3, #0
   1ce60:	d145      	bne.n	1ceee <ip_interface_getaddrinfo+0xe6>
   1ce62:	4a64      	ldr	r2, [pc, #400]	; (1cff4 <ip_interface_getaddrinfo+0x1ec>)
   1ce64:	6013      	str	r3, [r2, #0]
   1ce66:	4a64      	ldr	r2, [pc, #400]	; (1cff8 <ip_interface_getaddrinfo+0x1f0>)
   1ce68:	6013      	str	r3, [r2, #0]
   1ce6a:	2e00      	cmp	r6, #0
   1ce6c:	d07a      	beq.n	1cf64 <ip_interface_getaddrinfo+0x15c>
   1ce6e:	4630      	mov	r0, r6
   1ce70:	f009 fd14 	bl	2689c <strlen>
   1ce74:	4683      	mov	fp, r0
   1ce76:	b144      	cbz	r4, 1ce8a <ip_interface_getaddrinfo+0x82>
   1ce78:	69e2      	ldr	r2, [r4, #28]
   1ce7a:	b132      	cbz	r2, 1ce8a <ip_interface_getaddrinfo+0x82>
   1ce7c:	6851      	ldr	r1, [r2, #4]
   1ce7e:	2966      	cmp	r1, #102	; 0x66
   1ce80:	d103      	bne.n	1ce8a <ip_interface_getaddrinfo+0x82>
   1ce82:	6891      	ldr	r1, [r2, #8]
   1ce84:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1ce88:	d07e      	beq.n	1cf88 <ip_interface_getaddrinfo+0x180>
   1ce8a:	f04f 32ff 	mov.w	r2, #4294967295
   1ce8e:	2100      	movs	r1, #0
   1ce90:	f10d 0910 	add.w	r9, sp, #16
   1ce94:	f849 1d04 	str.w	r1, [r9, #-4]!
   1ce98:	4648      	mov	r0, r9
   1ce9a:	4659      	mov	r1, fp
   1ce9c:	9200      	str	r2, [sp, #0]
   1ce9e:	f7fe fdb1 	bl	1ba04 <rpc_ip_client_request_alloc>
   1cea2:	9a00      	ldr	r2, [sp, #0]
   1cea4:	2800      	cmp	r0, #0
   1cea6:	d15f      	bne.n	1cf68 <ip_interface_getaddrinfo+0x160>
   1cea8:	f247 010d 	movw	r1, #28685	; 0x700d
   1ceac:	f04f 0c08 	mov.w	ip, #8
   1ceb0:	9d03      	ldr	r5, [sp, #12]
   1ceb2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1ceb6:	60e9      	str	r1, [r5, #12]
   1ceb8:	612a      	str	r2, [r5, #16]
   1ceba:	7268      	strb	r0, [r5, #9]
   1cebc:	72a8      	strb	r0, [r5, #10]
   1cebe:	72e8      	strb	r0, [r5, #11]
   1cec0:	f885 c008 	strb.w	ip, [r5, #8]
   1cec4:	2c00      	cmp	r4, #0
   1cec6:	d076      	beq.n	1cfb6 <ip_interface_getaddrinfo+0x1ae>
   1cec8:	6862      	ldr	r2, [r4, #4]
   1ceca:	f022 0108 	bic.w	r1, r2, #8
   1cece:	2902      	cmp	r1, #2
   1ced0:	d011      	beq.n	1cef6 <ip_interface_getaddrinfo+0xee>
   1ced2:	2a05      	cmp	r2, #5
   1ced4:	d176      	bne.n	1cfc4 <ip_interface_getaddrinfo+0x1bc>
   1ced6:	68a1      	ldr	r1, [r4, #8]
   1ced8:	2902      	cmp	r1, #2
   1ceda:	6039      	str	r1, [r7, #0]
   1cedc:	d115      	bne.n	1cf0a <ip_interface_getaddrinfo+0x102>
   1cede:	2102      	movs	r1, #2
   1cee0:	f8c8 1000 	str.w	r1, [r8]
   1cee4:	e00b      	b.n	1cefe <ip_interface_getaddrinfo+0xf6>
   1cee6:	2070      	movs	r0, #112	; 0x70
   1cee8:	b005      	add	sp, #20
   1ceea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ceee:	2073      	movs	r0, #115	; 0x73
   1cef0:	b005      	add	sp, #20
   1cef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cef6:	68a1      	ldr	r1, [r4, #8]
   1cef8:	2902      	cmp	r1, #2
   1cefa:	6039      	str	r1, [r7, #0]
   1cefc:	d0ef      	beq.n	1cede <ip_interface_getaddrinfo+0xd6>
   1cefe:	2a05      	cmp	r2, #5
   1cf00:	d003      	beq.n	1cf0a <ip_interface_getaddrinfo+0x102>
   1cf02:	2a0a      	cmp	r2, #10
   1cf04:	bf14      	ite	ne
   1cf06:	2201      	movne	r2, #1
   1cf08:	2202      	moveq	r2, #2
   1cf0a:	61aa      	str	r2, [r5, #24]
   1cf0c:	68e2      	ldr	r2, [r4, #12]
   1cf0e:	622a      	str	r2, [r5, #32]
   1cf10:	68a2      	ldr	r2, [r4, #8]
   1cf12:	61ea      	str	r2, [r5, #28]
   1cf14:	6822      	ldr	r2, [r4, #0]
   1cf16:	616a      	str	r2, [r5, #20]
   1cf18:	68aa      	ldr	r2, [r5, #8]
   1cf1a:	3210      	adds	r2, #16
   1cf1c:	60aa      	str	r2, [r5, #8]
   1cf1e:	b12e      	cbz	r6, 1cf2c <ip_interface_getaddrinfo+0x124>
   1cf20:	6828      	ldr	r0, [r5, #0]
   1cf22:	b118      	cbz	r0, 1cf2c <ip_interface_getaddrinfo+0x124>
   1cf24:	465a      	mov	r2, fp
   1cf26:	4631      	mov	r1, r6
   1cf28:	f7ef fe10 	bl	cb4c <memcpy>
   1cf2c:	2301      	movs	r3, #1
   1cf2e:	f247 010d 	movw	r1, #28685	; 0x700d
   1cf32:	4628      	mov	r0, r5
   1cf34:	f8ca 3000 	str.w	r3, [sl]
   1cf38:	f7fe fd78 	bl	1ba2c <rpc_ip_client_request_send>
   1cf3c:	bb10      	cbnz	r0, 1cf84 <ip_interface_getaddrinfo+0x17c>
   1cf3e:	f04f 33ff 	mov.w	r3, #4294967295
   1cf42:	9303      	str	r3, [sp, #12]
   1cf44:	4649      	mov	r1, r9
   1cf46:	4628      	mov	r0, r5
   1cf48:	f7f9 fd82 	bl	16a50 <bsd_os_timedwait>
   1cf4c:	f8da 3000 	ldr.w	r3, [sl]
   1cf50:	2b01      	cmp	r3, #1
   1cf52:	d0f7      	beq.n	1cf44 <ip_interface_getaddrinfo+0x13c>
   1cf54:	4b28      	ldr	r3, [pc, #160]	; (1cff8 <ip_interface_getaddrinfo+0x1f0>)
   1cf56:	6818      	ldr	r0, [r3, #0]
   1cf58:	bb40      	cbnz	r0, 1cfac <ip_interface_getaddrinfo+0x1a4>
   1cf5a:	4b26      	ldr	r3, [pc, #152]	; (1cff4 <ip_interface_getaddrinfo+0x1ec>)
   1cf5c:	9a01      	ldr	r2, [sp, #4]
   1cf5e:	681b      	ldr	r3, [r3, #0]
   1cf60:	6013      	str	r3, [r2, #0]
   1cf62:	e7c1      	b.n	1cee8 <ip_interface_getaddrinfo+0xe0>
   1cf64:	46b3      	mov	fp, r6
   1cf66:	e786      	b.n	1ce76 <ip_interface_getaddrinfo+0x6e>
   1cf68:	9d03      	ldr	r5, [sp, #12]
   1cf6a:	2d00      	cmp	r5, #0
   1cf6c:	d1aa      	bne.n	1cec4 <ip_interface_getaddrinfo+0xbc>
   1cf6e:	200c      	movs	r0, #12
   1cf70:	2300      	movs	r3, #0
   1cf72:	f8ca 3000 	str.w	r3, [sl]
   1cf76:	b005      	add	sp, #20
   1cf78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf7c:	2016      	movs	r0, #22
   1cf7e:	b005      	add	sp, #20
   1cf80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf84:	2023      	movs	r0, #35	; 0x23
   1cf86:	e7f3      	b.n	1cf70 <ip_interface_getaddrinfo+0x168>
   1cf88:	f240 2002 	movw	r0, #514	; 0x202
   1cf8c:	68d1      	ldr	r1, [r2, #12]
   1cf8e:	4281      	cmp	r1, r0
   1cf90:	f47f af7b 	bne.w	1ce8a <ip_interface_getaddrinfo+0x82>
   1cf94:	6991      	ldr	r1, [r2, #24]
   1cf96:	2900      	cmp	r1, #0
   1cf98:	f43f af77 	beq.w	1ce8a <ip_interface_getaddrinfo+0x82>
   1cf9c:	6860      	ldr	r0, [r4, #4]
   1cf9e:	f002 fc0b 	bl	1f7b8 <pdn_interface_pdn_id_get>
   1cfa2:	1c43      	adds	r3, r0, #1
   1cfa4:	f43f af71 	beq.w	1ce8a <ip_interface_getaddrinfo+0x82>
   1cfa8:	4602      	mov	r2, r0
   1cfaa:	e770      	b.n	1ce8e <ip_interface_getaddrinfo+0x86>
   1cfac:	4b12      	ldr	r3, [pc, #72]	; (1cff8 <ip_interface_getaddrinfo+0x1f0>)
   1cfae:	6818      	ldr	r0, [r3, #0]
   1cfb0:	2800      	cmp	r0, #0
   1cfb2:	d099      	beq.n	1cee8 <ip_interface_getaddrinfo+0xe0>
   1cfb4:	e7dc      	b.n	1cf70 <ip_interface_getaddrinfo+0x168>
   1cfb6:	4621      	mov	r1, r4
   1cfb8:	2210      	movs	r2, #16
   1cfba:	f105 0014 	add.w	r0, r5, #20
   1cfbe:	f009 f85d 	bl	2607c <memset>
   1cfc2:	e7a9      	b.n	1cf18 <ip_interface_getaddrinfo+0x110>
   1cfc4:	202f      	movs	r0, #47	; 0x2f
   1cfc6:	f7f9 fdfb 	bl	16bc0 <bsd_os_errno_set>
   1cfca:	68aa      	ldr	r2, [r5, #8]
   1cfcc:	3210      	adds	r2, #16
   1cfce:	60aa      	str	r2, [r5, #8]
   1cfd0:	b916      	cbnz	r6, 1cfd8 <ip_interface_getaddrinfo+0x1d0>
   1cfd2:	f04f 30ff 	mov.w	r0, #4294967295
   1cfd6:	e7cb      	b.n	1cf70 <ip_interface_getaddrinfo+0x168>
   1cfd8:	6828      	ldr	r0, [r5, #0]
   1cfda:	2800      	cmp	r0, #0
   1cfdc:	d0f9      	beq.n	1cfd2 <ip_interface_getaddrinfo+0x1ca>
   1cfde:	465a      	mov	r2, fp
   1cfe0:	4631      	mov	r1, r6
   1cfe2:	f7ef fdb3 	bl	cb4c <memcpy>
   1cfe6:	e7f4      	b.n	1cfd2 <ip_interface_getaddrinfo+0x1ca>
   1cfe8:	20026276 	.word	0x20026276
   1cfec:	200242a4 	.word	0x200242a4
   1cff0:	200219d8 	.word	0x200219d8
   1cff4:	200219e4 	.word	0x200219e4
   1cff8:	200219dc 	.word	0x200219dc
   1cffc:	200219d4 	.word	0x200219d4
   1d000:	200219e0 	.word	0x200219e0

0001d004 <ip_interface_freeaddrinfo>:
   1d004:	b538      	push	{r3, r4, r5, lr}
   1d006:	4d0b      	ldr	r5, [pc, #44]	; (1d034 <ip_interface_freeaddrinfo+0x30>)
   1d008:	682b      	ldr	r3, [r5, #0]
   1d00a:	2b02      	cmp	r3, #2
   1d00c:	d000      	beq.n	1d010 <ip_interface_freeaddrinfo+0xc>
   1d00e:	bd38      	pop	{r3, r4, r5, pc}
   1d010:	b150      	cbz	r0, 1d028 <ip_interface_freeaddrinfo+0x24>
   1d012:	4604      	mov	r4, r0
   1d014:	6940      	ldr	r0, [r0, #20]
   1d016:	f004 f919 	bl	2124c <nrf_free>
   1d01a:	69a0      	ldr	r0, [r4, #24]
   1d01c:	b108      	cbz	r0, 1d022 <ip_interface_freeaddrinfo+0x1e>
   1d01e:	f004 f915 	bl	2124c <nrf_free>
   1d022:	4620      	mov	r0, r4
   1d024:	f004 f912 	bl	2124c <nrf_free>
   1d028:	2300      	movs	r3, #0
   1d02a:	4a03      	ldr	r2, [pc, #12]	; (1d038 <ip_interface_freeaddrinfo+0x34>)
   1d02c:	602b      	str	r3, [r5, #0]
   1d02e:	6013      	str	r3, [r2, #0]
   1d030:	bd38      	pop	{r3, r4, r5, pc}
   1d032:	bf00      	nop
   1d034:	200219e0 	.word	0x200219e0
   1d038:	200219dc 	.word	0x200219dc

0001d03c <rpc_ip_event_handler>:
   1d03c:	f248 030d 	movw	r3, #32781	; 0x800d
   1d040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d044:	4299      	cmp	r1, r3
   1d046:	b089      	sub	sp, #36	; 0x24
   1d048:	4604      	mov	r4, r0
   1d04a:	d05c      	beq.n	1d106 <rpc_ip_event_handler+0xca>
   1d04c:	f248 030f 	movw	r3, #32783	; 0x800f
   1d050:	4299      	cmp	r1, r3
   1d052:	460d      	mov	r5, r1
   1d054:	d045      	beq.n	1d0e2 <rpc_ip_event_handler+0xa6>
   1d056:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   1d05a:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   1d05e:	68c0      	ldr	r0, [r0, #12]
   1d060:	d075      	beq.n	1d14e <rpc_ip_event_handler+0x112>
   1d062:	0c06      	lsrs	r6, r0, #16
   1d064:	4630      	mov	r0, r6
   1d066:	f004 fdef 	bl	21c48 <interface_socket_from_handle_get>
   1d06a:	4607      	mov	r7, r0
   1d06c:	2800      	cmp	r0, #0
   1d06e:	d059      	beq.n	1d124 <rpc_ip_event_handler+0xe8>
   1d070:	4601      	mov	r1, r0
   1d072:	462b      	mov	r3, r5
   1d074:	4622      	mov	r2, r4
   1d076:	4630      	mov	r0, r6
   1d078:	f7fe fc36 	bl	1b8e8 <tls_rpc_ip_event_handler>
   1d07c:	2800      	cmp	r0, #0
   1d07e:	d04d      	beq.n	1d11c <rpc_ip_event_handler+0xe0>
   1d080:	f248 0307 	movw	r3, #32775	; 0x8007
   1d084:	429d      	cmp	r5, r3
   1d086:	d866      	bhi.n	1d156 <rpc_ip_event_handler+0x11a>
   1d088:	f248 0306 	movw	r3, #32774	; 0x8006
   1d08c:	429d      	cmp	r5, r3
   1d08e:	f080 81e7 	bcs.w	1d460 <rpc_ip_event_handler+0x424>
   1d092:	f248 0303 	movw	r3, #32771	; 0x8003
   1d096:	429d      	cmp	r5, r3
   1d098:	f000 81c5 	beq.w	1d426 <rpc_ip_event_handler+0x3ea>
   1d09c:	f200 811b 	bhi.w	1d2d6 <rpc_ip_event_handler+0x29a>
   1d0a0:	f248 0301 	movw	r3, #32769	; 0x8001
   1d0a4:	429d      	cmp	r5, r3
   1d0a6:	f000 8154 	beq.w	1d352 <rpc_ip_event_handler+0x316>
   1d0aa:	f248 0302 	movw	r3, #32770	; 0x8002
   1d0ae:	429d      	cmp	r5, r3
   1d0b0:	d138      	bne.n	1d124 <rpc_ip_event_handler+0xe8>
   1d0b2:	683b      	ldr	r3, [r7, #0]
   1d0b4:	0098      	lsls	r0, r3, #2
   1d0b6:	d531      	bpl.n	1d11c <rpc_ip_event_handler+0xe0>
   1d0b8:	683b      	ldr	r3, [r7, #0]
   1d0ba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1d0be:	603b      	str	r3, [r7, #0]
   1d0c0:	6963      	ldr	r3, [r4, #20]
   1d0c2:	2b00      	cmp	r3, #0
   1d0c4:	f000 81ea 	beq.w	1d49c <rpc_ip_event_handler+0x460>
   1d0c8:	2b10      	cmp	r3, #16
   1d0ca:	bf8e      	itee	hi
   1d0cc:	232d      	movhi	r3, #45	; 0x2d
   1d0ce:	4ab9      	ldrls	r2, [pc, #740]	; (1d3b4 <rpc_ip_event_handler+0x378>)
   1d0d0:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1d0d4:	607b      	str	r3, [r7, #4]
   1d0d6:	683b      	ldr	r3, [r7, #0]
   1d0d8:	2000      	movs	r0, #0
   1d0da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1d0de:	603b      	str	r3, [r7, #0]
   1d0e0:	e00e      	b.n	1d100 <rpc_ip_event_handler+0xc4>
   1d0e2:	6943      	ldr	r3, [r0, #20]
   1d0e4:	2001      	movs	r0, #1
   1d0e6:	2b10      	cmp	r3, #16
   1d0e8:	49b3      	ldr	r1, [pc, #716]	; (1d3b8 <rpc_ip_event_handler+0x37c>)
   1d0ea:	bf88      	it	hi
   1d0ec:	222d      	movhi	r2, #45	; 0x2d
   1d0ee:	7008      	strb	r0, [r1, #0]
   1d0f0:	f04f 0000 	mov.w	r0, #0
   1d0f4:	bf9c      	itt	ls
   1d0f6:	4aaf      	ldrls	r2, [pc, #700]	; (1d3b4 <rpc_ip_event_handler+0x378>)
   1d0f8:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   1d0fc:	4baf      	ldr	r3, [pc, #700]	; (1d3bc <rpc_ip_event_handler+0x380>)
   1d0fe:	601a      	str	r2, [r3, #0]
   1d100:	b009      	add	sp, #36	; 0x24
   1d102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d106:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 1d3d0 <rpc_ip_event_handler+0x394>
   1d10a:	6807      	ldr	r7, [r0, #0]
   1d10c:	f8da 2000 	ldr.w	r2, [sl]
   1d110:	2a01      	cmp	r2, #1
   1d112:	d00b      	beq.n	1d12c <rpc_ip_event_handler+0xf0>
   1d114:	b117      	cbz	r7, 1d11c <rpc_ip_event_handler+0xe0>
   1d116:	4638      	mov	r0, r7
   1d118:	f7fe fca6 	bl	1ba68 <rpc_ip_client_data_free>
   1d11c:	2000      	movs	r0, #0
   1d11e:	b009      	add	sp, #36	; 0x24
   1d120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d124:	6820      	ldr	r0, [r4, #0]
   1d126:	2800      	cmp	r0, #0
   1d128:	d1f6      	bne.n	1d118 <rpc_ip_event_handler+0xdc>
   1d12a:	e7f7      	b.n	1d11c <rpc_ip_event_handler+0xe0>
   1d12c:	6942      	ldr	r2, [r0, #20]
   1d12e:	2a00      	cmp	r2, #0
   1d130:	d045      	beq.n	1d1be <rpc_ip_event_handler+0x182>
   1d132:	2a10      	cmp	r2, #16
   1d134:	bf8e      	itee	hi
   1d136:	222d      	movhi	r2, #45	; 0x2d
   1d138:	499e      	ldrls	r1, [pc, #632]	; (1d3b4 <rpc_ip_event_handler+0x378>)
   1d13a:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   1d13e:	49a0      	ldr	r1, [pc, #640]	; (1d3c0 <rpc_ip_event_handler+0x384>)
   1d140:	600a      	str	r2, [r1, #0]
   1d142:	2202      	movs	r2, #2
   1d144:	f8ca 2000 	str.w	r2, [sl]
   1d148:	2f00      	cmp	r7, #0
   1d14a:	d1e4      	bne.n	1d116 <rpc_ip_event_handler+0xda>
   1d14c:	e7e6      	b.n	1d11c <rpc_ip_event_handler+0xe0>
   1d14e:	f004 fd29 	bl	21ba4 <interface_from_internal_id_search>
   1d152:	4606      	mov	r6, r0
   1d154:	e786      	b.n	1d064 <rpc_ip_event_handler+0x28>
   1d156:	f248 030c 	movw	r3, #32780	; 0x800c
   1d15a:	429d      	cmp	r5, r3
   1d15c:	f000 813c 	beq.w	1d3d8 <rpc_ip_event_handler+0x39c>
   1d160:	f240 80d5 	bls.w	1d30e <rpc_ip_event_handler+0x2d2>
   1d164:	f249 0302 	movw	r3, #36866	; 0x9002
   1d168:	429d      	cmp	r5, r3
   1d16a:	f000 811d 	beq.w	1d3a8 <rpc_ip_event_handler+0x36c>
   1d16e:	f249 0303 	movw	r3, #36867	; 0x9003
   1d172:	429d      	cmp	r5, r3
   1d174:	f000 80f9 	beq.w	1d36a <rpc_ip_event_handler+0x32e>
   1d178:	f249 0301 	movw	r3, #36865	; 0x9001
   1d17c:	429d      	cmp	r5, r3
   1d17e:	d1d1      	bne.n	1d124 <rpc_ip_event_handler+0xe8>
   1d180:	683d      	ldr	r5, [r7, #0]
   1d182:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   1d186:	f000 8184 	beq.w	1d492 <rpc_ip_event_handler+0x456>
   1d18a:	68a3      	ldr	r3, [r4, #8]
   1d18c:	2b04      	cmp	r3, #4
   1d18e:	f200 81af 	bhi.w	1d4f0 <rpc_ip_event_handler+0x4b4>
   1d192:	2500      	movs	r5, #0
   1d194:	462e      	mov	r6, r5
   1d196:	6821      	ldr	r1, [r4, #0]
   1d198:	6862      	ldr	r2, [r4, #4]
   1d19a:	e9cd 6506 	strd	r6, r5, [sp, #24]
   1d19e:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1d1a2:	69f8      	ldr	r0, [r7, #28]
   1d1a4:	a904      	add	r1, sp, #16
   1d1a6:	6803      	ldr	r3, [r0, #0]
   1d1a8:	685b      	ldr	r3, [r3, #4]
   1d1aa:	4798      	blx	r3
   1d1ac:	3001      	adds	r0, #1
   1d1ae:	f000 818e 	beq.w	1d4ce <rpc_ip_event_handler+0x492>
   1d1b2:	683b      	ldr	r3, [r7, #0]
   1d1b4:	2000      	movs	r0, #0
   1d1b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1d1ba:	603b      	str	r3, [r7, #0]
   1d1bc:	e7a0      	b.n	1d100 <rpc_ip_event_handler+0xc4>
   1d1be:	6985      	ldr	r5, [r0, #24]
   1d1c0:	016b      	lsls	r3, r5, #5
   1d1c2:	4618      	mov	r0, r3
   1d1c4:	9303      	str	r3, [sp, #12]
   1d1c6:	f004 f837 	bl	21238 <nrf_malloc>
   1d1ca:	9002      	str	r0, [sp, #8]
   1d1cc:	2800      	cmp	r0, #0
   1d1ce:	d078      	beq.n	1d2c2 <rpc_ip_event_handler+0x286>
   1d1d0:	00ee      	lsls	r6, r5, #3
   1d1d2:	1970      	adds	r0, r6, r5
   1d1d4:	0080      	lsls	r0, r0, #2
   1d1d6:	f004 f82f 	bl	21238 <nrf_malloc>
   1d1da:	2800      	cmp	r0, #0
   1d1dc:	d073      	beq.n	1d2c6 <rpc_ip_event_handler+0x28a>
   1d1de:	2d00      	cmp	r5, #0
   1d1e0:	d074      	beq.n	1d2cc <rpc_ip_event_handler+0x290>
   1d1e2:	3610      	adds	r6, #16
   1d1e4:	1983      	adds	r3, r0, r6
   1d1e6:	9301      	str	r3, [sp, #4]
   1d1e8:	9b02      	ldr	r3, [sp, #8]
   1d1ea:	2204      	movs	r2, #4
   1d1ec:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 1d3d4 <rpc_ip_event_handler+0x398>
   1d1f0:	f100 0810 	add.w	r8, r0, #16
   1d1f4:	f103 0520 	add.w	r5, r3, #32
   1d1f8:	e013      	b.n	1d222 <rpc_ip_event_handler+0x1e6>
   1d1fa:	464a      	mov	r2, r9
   1d1fc:	f7ef fca6 	bl	cb4c <memcpy>
   1d200:	2100      	movs	r1, #0
   1d202:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1d206:	f108 0808 	add.w	r8, r8, #8
   1d20a:	eb09 0206 	add.w	r2, r9, r6
   1d20e:	f803 1009 	strb.w	r1, [r3, r9]
   1d212:	9b01      	ldr	r3, [sp, #4]
   1d214:	f845 5c04 	str.w	r5, [r5, #-4]
   1d218:	4598      	cmp	r8, r3
   1d21a:	f105 0520 	add.w	r5, r5, #32
   1d21e:	f000 8090 	beq.w	1d342 <rpc_ip_event_handler+0x306>
   1d222:	58bb      	ldr	r3, [r7, r2]
   1d224:	18b9      	adds	r1, r7, r2
   1d226:	f845 3c20 	str.w	r3, [r5, #-32]
   1d22a:	684b      	ldr	r3, [r1, #4]
   1d22c:	f8db 0000 	ldr.w	r0, [fp]
   1d230:	2b02      	cmp	r3, #2
   1d232:	bf14      	ite	ne
   1d234:	2602      	movne	r6, #2
   1d236:	260a      	moveq	r6, #10
   1d238:	4b62      	ldr	r3, [pc, #392]	; (1d3c4 <rpc_ip_event_handler+0x388>)
   1d23a:	e945 6007 	strd	r6, r0, [r5, #-28]
   1d23e:	681b      	ldr	r3, [r3, #0]
   1d240:	f102 0614 	add.w	r6, r2, #20
   1d244:	f845 3c14 	str.w	r3, [r5, #-20]
   1d248:	8a08      	ldrh	r0, [r1, #16]
   1d24a:	f1a8 0310 	sub.w	r3, r8, #16
   1d24e:	f845 0c10 	str.w	r0, [r5, #-16]
   1d252:	f8b1 9012 	ldrh.w	r9, [r1, #18]
   1d256:	f845 3c0c 	str.w	r3, [r5, #-12]
   1d25a:	4b5b      	ldr	r3, [pc, #364]	; (1d3c8 <rpc_ip_event_handler+0x38c>)
   1d25c:	2804      	cmp	r0, #4
   1d25e:	eb07 0106 	add.w	r1, r7, r6
   1d262:	881b      	ldrh	r3, [r3, #0]
   1d264:	d01e      	beq.n	1d2a4 <rpc_ip_event_handler+0x268>
   1d266:	220a      	movs	r2, #10
   1d268:	f848 2c0c 	str.w	r2, [r8, #-12]
   1d26c:	f04f 0224 	mov.w	r2, #36	; 0x24
   1d270:	f828 3c08 	strh.w	r3, [r8, #-8]
   1d274:	f808 2c10 	strb.w	r2, [r8, #-16]
   1d278:	f855 2c10 	ldr.w	r2, [r5, #-16]
   1d27c:	4640      	mov	r0, r8
   1d27e:	f7ef fc65 	bl	cb4c <memcpy>
   1d282:	f855 3c10 	ldr.w	r3, [r5, #-16]
   1d286:	f109 0001 	add.w	r0, r9, #1
   1d28a:	441e      	add	r6, r3
   1d28c:	f003 ffd4 	bl	21238 <nrf_malloc>
   1d290:	19b9      	adds	r1, r7, r6
   1d292:	eb09 0206 	add.w	r2, r9, r6
   1d296:	f845 0c08 	str.w	r0, [r5, #-8]
   1d29a:	2800      	cmp	r0, #0
   1d29c:	d1ad      	bne.n	1d1fa <rpc_ip_event_handler+0x1be>
   1d29e:	f108 0808 	add.w	r8, r8, #8
   1d2a2:	e7b6      	b.n	1d212 <rpc_ip_event_handler+0x1d6>
   1d2a4:	2210      	movs	r2, #16
   1d2a6:	2002      	movs	r0, #2
   1d2a8:	f828 3c08 	strh.w	r3, [r8, #-8]
   1d2ac:	f848 0c0c 	str.w	r0, [r8, #-12]
   1d2b0:	f808 2c10 	strb.w	r2, [r8, #-16]
   1d2b4:	f855 2c10 	ldr.w	r2, [r5, #-16]
   1d2b8:	f1a8 0004 	sub.w	r0, r8, #4
   1d2bc:	f7ef fc46 	bl	cb4c <memcpy>
   1d2c0:	e7df      	b.n	1d282 <rpc_ip_event_handler+0x246>
   1d2c2:	f003 ffc3 	bl	2124c <nrf_free>
   1d2c6:	210c      	movs	r1, #12
   1d2c8:	4a3d      	ldr	r2, [pc, #244]	; (1d3c0 <rpc_ip_event_handler+0x384>)
   1d2ca:	6011      	str	r1, [r2, #0]
   1d2cc:	9b02      	ldr	r3, [sp, #8]
   1d2ce:	4a3f      	ldr	r2, [pc, #252]	; (1d3cc <rpc_ip_event_handler+0x390>)
   1d2d0:	6827      	ldr	r7, [r4, #0]
   1d2d2:	6013      	str	r3, [r2, #0]
   1d2d4:	e735      	b.n	1d142 <rpc_ip_event_handler+0x106>
   1d2d6:	f248 0304 	movw	r3, #32772	; 0x8004
   1d2da:	429d      	cmp	r5, r3
   1d2dc:	f000 808f 	beq.w	1d3fe <rpc_ip_event_handler+0x3c2>
   1d2e0:	f248 0305 	movw	r3, #32773	; 0x8005
   1d2e4:	429d      	cmp	r5, r3
   1d2e6:	f47f af1d 	bne.w	1d124 <rpc_ip_event_handler+0xe8>
   1d2ea:	683b      	ldr	r3, [r7, #0]
   1d2ec:	b29b      	uxth	r3, r3
   1d2ee:	2b03      	cmp	r3, #3
   1d2f0:	f47f af14 	bne.w	1d11c <rpc_ip_event_handler+0xe0>
   1d2f4:	6963      	ldr	r3, [r4, #20]
   1d2f6:	2b00      	cmp	r3, #0
   1d2f8:	f000 80eb 	beq.w	1d4d2 <rpc_ip_event_handler+0x496>
   1d2fc:	2b10      	cmp	r3, #16
   1d2fe:	f200 80bd 	bhi.w	1d47c <rpc_ip_event_handler+0x440>
   1d302:	4a2c      	ldr	r2, [pc, #176]	; (1d3b4 <rpc_ip_event_handler+0x378>)
   1d304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1d308:	607b      	str	r3, [r7, #4]
   1d30a:	2000      	movs	r0, #0
   1d30c:	e6f8      	b.n	1d100 <rpc_ip_event_handler+0xc4>
   1d30e:	f248 0308 	movw	r3, #32776	; 0x8008
   1d312:	429d      	cmp	r5, r3
   1d314:	f000 8094 	beq.w	1d440 <rpc_ip_event_handler+0x404>
   1d318:	f248 0309 	movw	r3, #32777	; 0x8009
   1d31c:	429d      	cmp	r5, r3
   1d31e:	f47f af01 	bne.w	1d124 <rpc_ip_event_handler+0xe8>
   1d322:	683b      	ldr	r3, [r7, #0]
   1d324:	b29b      	uxth	r3, r3
   1d326:	2b0d      	cmp	r3, #13
   1d328:	f47f aef8 	bne.w	1d11c <rpc_ip_event_handler+0xe0>
   1d32c:	6960      	ldr	r0, [r4, #20]
   1d32e:	2800      	cmp	r0, #0
   1d330:	f000 80d7 	beq.w	1d4e2 <rpc_ip_event_handler+0x4a6>
   1d334:	2810      	cmp	r0, #16
   1d336:	f200 80a1 	bhi.w	1d47c <rpc_ip_event_handler+0x440>
   1d33a:	4b1e      	ldr	r3, [pc, #120]	; (1d3b4 <rpc_ip_event_handler+0x378>)
   1d33c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1d340:	e7e2      	b.n	1d308 <rpc_ip_event_handler+0x2cc>
   1d342:	2100      	movs	r1, #0
   1d344:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   1d348:	4403      	add	r3, r0
   1d34a:	f843 1c04 	str.w	r1, [r3, #-4]
   1d34e:	4603      	mov	r3, r0
   1d350:	e7bd      	b.n	1d2ce <rpc_ip_event_handler+0x292>
   1d352:	683b      	ldr	r3, [r7, #0]
   1d354:	2b01      	cmp	r3, #1
   1d356:	f47f aee1 	bne.w	1d11c <rpc_ip_event_handler+0xe0>
   1d35a:	6960      	ldr	r0, [r4, #20]
   1d35c:	2800      	cmp	r0, #0
   1d35e:	d1e9      	bne.n	1d334 <rpc_ip_event_handler+0x2f8>
   1d360:	2302      	movs	r3, #2
   1d362:	603b      	str	r3, [r7, #0]
   1d364:	69a3      	ldr	r3, [r4, #24]
   1d366:	61bb      	str	r3, [r7, #24]
   1d368:	e6ca      	b.n	1d100 <rpc_ip_event_handler+0xc4>
   1d36a:	683b      	ldr	r3, [r7, #0]
   1d36c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1d370:	603b      	str	r3, [r7, #0]
   1d372:	683b      	ldr	r3, [r7, #0]
   1d374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1d378:	603b      	str	r3, [r7, #0]
   1d37a:	683b      	ldr	r3, [r7, #0]
   1d37c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1d380:	603b      	str	r3, [r7, #0]
   1d382:	683b      	ldr	r3, [r7, #0]
   1d384:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1d388:	603b      	str	r3, [r7, #0]
   1d38a:	6923      	ldr	r3, [r4, #16]
   1d38c:	2b6c      	cmp	r3, #108	; 0x6c
   1d38e:	d077      	beq.n	1d480 <rpc_ip_event_handler+0x444>
   1d390:	2b10      	cmp	r3, #16
   1d392:	bf8c      	ite	hi
   1d394:	232d      	movhi	r3, #45	; 0x2d
   1d396:	4a07      	ldrls	r2, [pc, #28]	; (1d3b4 <rpc_ip_event_handler+0x378>)
   1d398:	f04f 0000 	mov.w	r0, #0
   1d39c:	bf98      	it	ls
   1d39e:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1d3a2:	607b      	str	r3, [r7, #4]
   1d3a4:	60bb      	str	r3, [r7, #8]
   1d3a6:	e6ab      	b.n	1d100 <rpc_ip_event_handler+0xc4>
   1d3a8:	683b      	ldr	r3, [r7, #0]
   1d3aa:	b29b      	uxth	r3, r3
   1d3ac:	2b07      	cmp	r3, #7
   1d3ae:	f47f aeb5 	bne.w	1d11c <rpc_ip_event_handler+0xe0>
   1d3b2:	e6fe      	b.n	1d1b2 <rpc_ip_event_handler+0x176>
   1d3b4:	0002f280 	.word	0x0002f280
   1d3b8:	20026277 	.word	0x20026277
   1d3bc:	20021a0c 	.word	0x20021a0c
   1d3c0:	200219dc 	.word	0x200219dc
   1d3c4:	200219d4 	.word	0x200219d4
   1d3c8:	200242a4 	.word	0x200242a4
   1d3cc:	200219e4 	.word	0x200219e4
   1d3d0:	200219e0 	.word	0x200219e0
   1d3d4:	200219d8 	.word	0x200219d8
   1d3d8:	683b      	ldr	r3, [r7, #0]
   1d3da:	b29b      	uxth	r3, r3
   1d3dc:	2b08      	cmp	r3, #8
   1d3de:	f47f ae9d 	bne.w	1d11c <rpc_ip_event_handler+0xe0>
   1d3e2:	6963      	ldr	r3, [r4, #20]
   1d3e4:	2b00      	cmp	r3, #0
   1d3e6:	d189      	bne.n	1d2fc <rpc_ip_event_handler+0x2c0>
   1d3e8:	4b5e      	ldr	r3, [pc, #376]	; (1d564 <rpc_ip_event_handler+0x528>)
   1d3ea:	2001      	movs	r0, #1
   1d3ec:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   1d3f0:	683b      	ldr	r3, [r7, #0]
   1d3f2:	0c1b      	lsrs	r3, r3, #16
   1d3f4:	041b      	lsls	r3, r3, #16
   1d3f6:	f043 0309 	orr.w	r3, r3, #9
   1d3fa:	603b      	str	r3, [r7, #0]
   1d3fc:	e680      	b.n	1d100 <rpc_ip_event_handler+0xc4>
   1d3fe:	683b      	ldr	r3, [r7, #0]
   1d400:	01db      	lsls	r3, r3, #7
   1d402:	f57f ae8b 	bpl.w	1d11c <rpc_ip_event_handler+0xe0>
   1d406:	6963      	ldr	r3, [r4, #20]
   1d408:	2b00      	cmp	r3, #0
   1d40a:	f47f af77 	bne.w	1d2fc <rpc_ip_event_handler+0x2c0>
   1d40e:	6823      	ldr	r3, [r4, #0]
   1d410:	2b00      	cmp	r3, #0
   1d412:	d071      	beq.n	1d4f8 <rpc_ip_event_handler+0x4bc>
   1d414:	2001      	movs	r0, #1
   1d416:	4b53      	ldr	r3, [pc, #332]	; (1d564 <rpc_ip_event_handler+0x528>)
   1d418:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   1d41c:	683b      	ldr	r3, [r7, #0]
   1d41e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1d422:	603b      	str	r3, [r7, #0]
   1d424:	e66c      	b.n	1d100 <rpc_ip_event_handler+0xc4>
   1d426:	683b      	ldr	r3, [r7, #0]
   1d428:	025a      	lsls	r2, r3, #9
   1d42a:	f57f ae77 	bpl.w	1d11c <rpc_ip_event_handler+0xe0>
   1d42e:	6960      	ldr	r0, [r4, #20]
   1d430:	2800      	cmp	r0, #0
   1d432:	f47f af7f 	bne.w	1d334 <rpc_ip_event_handler+0x2f8>
   1d436:	683b      	ldr	r3, [r7, #0]
   1d438:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1d43c:	603b      	str	r3, [r7, #0]
   1d43e:	e65f      	b.n	1d100 <rpc_ip_event_handler+0xc4>
   1d440:	683b      	ldr	r3, [r7, #0]
   1d442:	b29b      	uxth	r3, r3
   1d444:	2b06      	cmp	r3, #6
   1d446:	f47f ae69 	bne.w	1d11c <rpc_ip_event_handler+0xe0>
   1d44a:	6960      	ldr	r0, [r4, #20]
   1d44c:	2800      	cmp	r0, #0
   1d44e:	f47f af71 	bne.w	1d334 <rpc_ip_event_handler+0x2f8>
   1d452:	683b      	ldr	r3, [r7, #0]
   1d454:	0c1b      	lsrs	r3, r3, #16
   1d456:	041b      	lsls	r3, r3, #16
   1d458:	f043 0307 	orr.w	r3, r3, #7
   1d45c:	603b      	str	r3, [r7, #0]
   1d45e:	e64f      	b.n	1d100 <rpc_ip_event_handler+0xc4>
   1d460:	683b      	ldr	r3, [r7, #0]
   1d462:	0299      	lsls	r1, r3, #10
   1d464:	f57f ae5a 	bpl.w	1d11c <rpc_ip_event_handler+0xe0>
   1d468:	6963      	ldr	r3, [r4, #20]
   1d46a:	b33b      	cbz	r3, 1d4bc <rpc_ip_event_handler+0x480>
   1d46c:	2b6b      	cmp	r3, #107	; 0x6b
   1d46e:	f47f ae2b 	bne.w	1d0c8 <rpc_ip_event_handler+0x8c>
   1d472:	693b      	ldr	r3, [r7, #16]
   1d474:	2b01      	cmp	r3, #1
   1d476:	d041      	beq.n	1d4fc <rpc_ip_event_handler+0x4c0>
   1d478:	230c      	movs	r3, #12
   1d47a:	e62b      	b.n	1d0d4 <rpc_ip_event_handler+0x98>
   1d47c:	232d      	movs	r3, #45	; 0x2d
   1d47e:	e743      	b.n	1d308 <rpc_ip_event_handler+0x2cc>
   1d480:	2239      	movs	r2, #57	; 0x39
   1d482:	683b      	ldr	r3, [r7, #0]
   1d484:	2000      	movs	r0, #0
   1d486:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   1d48a:	603b      	str	r3, [r7, #0]
   1d48c:	607a      	str	r2, [r7, #4]
   1d48e:	60ba      	str	r2, [r7, #8]
   1d490:	e636      	b.n	1d100 <rpc_ip_event_handler+0xc4>
   1d492:	6820      	ldr	r0, [r4, #0]
   1d494:	f7fe fae8 	bl	1ba68 <rpc_ip_client_data_free>
   1d498:	4628      	mov	r0, r5
   1d49a:	e631      	b.n	1d100 <rpc_ip_event_handler+0xc4>
   1d49c:	683b      	ldr	r3, [r7, #0]
   1d49e:	2000      	movs	r0, #0
   1d4a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1d4a4:	603b      	str	r3, [r7, #0]
   1d4a6:	683b      	ldr	r3, [r7, #0]
   1d4a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1d4ac:	603b      	str	r3, [r7, #0]
   1d4ae:	683b      	ldr	r3, [r7, #0]
   1d4b0:	0c1b      	lsrs	r3, r3, #16
   1d4b2:	041b      	lsls	r3, r3, #16
   1d4b4:	f043 0305 	orr.w	r3, r3, #5
   1d4b8:	603b      	str	r3, [r7, #0]
   1d4ba:	e621      	b.n	1d100 <rpc_ip_event_handler+0xc4>
   1d4bc:	683b      	ldr	r3, [r7, #0]
   1d4be:	4a29      	ldr	r2, [pc, #164]	; (1d564 <rpc_ip_event_handler+0x528>)
   1d4c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1d4c4:	603b      	str	r3, [r7, #0]
   1d4c6:	2001      	movs	r0, #1
   1d4c8:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
   1d4cc:	e618      	b.n	1d100 <rpc_ip_event_handler+0xc4>
   1d4ce:	2002      	movs	r0, #2
   1d4d0:	e616      	b.n	1d100 <rpc_ip_event_handler+0xc4>
   1d4d2:	683b      	ldr	r3, [r7, #0]
   1d4d4:	2000      	movs	r0, #0
   1d4d6:	0c1b      	lsrs	r3, r3, #16
   1d4d8:	041b      	lsls	r3, r3, #16
   1d4da:	f043 0304 	orr.w	r3, r3, #4
   1d4de:	603b      	str	r3, [r7, #0]
   1d4e0:	e60e      	b.n	1d100 <rpc_ip_event_handler+0xc4>
   1d4e2:	683b      	ldr	r3, [r7, #0]
   1d4e4:	0c1b      	lsrs	r3, r3, #16
   1d4e6:	041b      	lsls	r3, r3, #16
   1d4e8:	f043 030e 	orr.w	r3, r3, #14
   1d4ec:	603b      	str	r3, [r7, #0]
   1d4ee:	e607      	b.n	1d100 <rpc_ip_event_handler+0xc4>
   1d4f0:	8a65      	ldrh	r5, [r4, #18]
   1d4f2:	b95d      	cbnz	r5, 1d50c <rpc_ip_event_handler+0x4d0>
   1d4f4:	462e      	mov	r6, r5
   1d4f6:	e64e      	b.n	1d196 <rpc_ip_event_handler+0x15a>
   1d4f8:	2000      	movs	r0, #0
   1d4fa:	e78f      	b.n	1d41c <rpc_ip_event_handler+0x3e0>
   1d4fc:	220c      	movs	r2, #12
   1d4fe:	683b      	ldr	r3, [r7, #0]
   1d500:	2000      	movs	r0, #0
   1d502:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   1d506:	603b      	str	r3, [r7, #0]
   1d508:	607a      	str	r2, [r7, #4]
   1d50a:	e5f9      	b.n	1d100 <rpc_ip_event_handler+0xc4>
   1d50c:	2024      	movs	r0, #36	; 0x24
   1d50e:	f003 fe93 	bl	21238 <nrf_malloc>
   1d512:	4606      	mov	r6, r0
   1d514:	2800      	cmp	r0, #0
   1d516:	d0da      	beq.n	1d4ce <rpc_ip_event_handler+0x492>
   1d518:	8a62      	ldrh	r2, [r4, #18]
   1d51a:	2a10      	cmp	r2, #16
   1d51c:	d009      	beq.n	1d532 <rpc_ip_event_handler+0x4f6>
   1d51e:	2a04      	cmp	r2, #4
   1d520:	d013      	beq.n	1d54a <rpc_ip_event_handler+0x50e>
   1d522:	6820      	ldr	r0, [r4, #0]
   1d524:	f7fe faa0 	bl	1ba68 <rpc_ip_client_data_free>
   1d528:	4630      	mov	r0, r6
   1d52a:	f003 fe8f 	bl	2124c <nrf_free>
   1d52e:	2000      	movs	r0, #0
   1d530:	e5e6      	b.n	1d100 <rpc_ip_event_handler+0xc4>
   1d532:	230a      	movs	r3, #10
   1d534:	2524      	movs	r5, #36	; 0x24
   1d536:	6043      	str	r3, [r0, #4]
   1d538:	7005      	strb	r5, [r0, #0]
   1d53a:	8a23      	ldrh	r3, [r4, #16]
   1d53c:	f104 0114 	add.w	r1, r4, #20
   1d540:	8103      	strh	r3, [r0, #8]
   1d542:	3010      	adds	r0, #16
   1d544:	f7ef fb02 	bl	cb4c <memcpy>
   1d548:	e625      	b.n	1d196 <rpc_ip_event_handler+0x15a>
   1d54a:	2302      	movs	r3, #2
   1d54c:	2510      	movs	r5, #16
   1d54e:	6043      	str	r3, [r0, #4]
   1d550:	7005      	strb	r5, [r0, #0]
   1d552:	8a23      	ldrh	r3, [r4, #16]
   1d554:	f104 0114 	add.w	r1, r4, #20
   1d558:	8103      	strh	r3, [r0, #8]
   1d55a:	300c      	adds	r0, #12
   1d55c:	f7ef faf6 	bl	cb4c <memcpy>
   1d560:	e619      	b.n	1d196 <rpc_ip_event_handler+0x15a>
   1d562:	bf00      	nop
   1d564:	200219e8 	.word	0x200219e8

0001d568 <rpc_handle_ctrl_message>:
   1d568:	2902      	cmp	r1, #2
   1d56a:	b510      	push	{r4, lr}
   1d56c:	4604      	mov	r4, r0
   1d56e:	d00c      	beq.n	1d58a <rpc_handle_ctrl_message+0x22>
   1d570:	2904      	cmp	r1, #4
   1d572:	d008      	beq.n	1d586 <rpc_handle_ctrl_message+0x1e>
   1d574:	2901      	cmp	r1, #1
   1d576:	d006      	beq.n	1d586 <rpc_handle_ctrl_message+0x1e>
   1d578:	6880      	ldr	r0, [r0, #8]
   1d57a:	b108      	cbz	r0, 1d580 <rpc_handle_ctrl_message+0x18>
   1d57c:	f7fc fd32 	bl	19fe4 <rpc_transport_data_free>
   1d580:	4620      	mov	r0, r4
   1d582:	f7fc fd2d 	bl	19fe0 <rpc_transport_rpc_free>
   1d586:	2000      	movs	r0, #0
   1d588:	bd10      	pop	{r4, pc}
   1d58a:	6880      	ldr	r0, [r0, #8]
   1d58c:	2800      	cmp	r0, #0
   1d58e:	d0fa      	beq.n	1d586 <rpc_handle_ctrl_message+0x1e>
   1d590:	f7fc fd28 	bl	19fe4 <rpc_transport_data_free>
   1d594:	2000      	movs	r0, #0
   1d596:	bd10      	pop	{r4, pc}

0001d598 <rpc_handle_data_message>:
   1d598:	4b23      	ldr	r3, [pc, #140]	; (1d628 <rpc_handle_data_message+0x90>)
   1d59a:	6802      	ldr	r2, [r0, #0]
   1d59c:	8819      	ldrh	r1, [r3, #0]
   1d59e:	b292      	uxth	r2, r2
   1d5a0:	4291      	cmp	r1, r2
   1d5a2:	d027      	beq.n	1d5f4 <rpc_handle_data_message+0x5c>
   1d5a4:	8a19      	ldrh	r1, [r3, #16]
   1d5a6:	4291      	cmp	r1, r2
   1d5a8:	d02a      	beq.n	1d600 <rpc_handle_data_message+0x68>
   1d5aa:	8c19      	ldrh	r1, [r3, #32]
   1d5ac:	4291      	cmp	r1, r2
   1d5ae:	d02b      	beq.n	1d608 <rpc_handle_data_message+0x70>
   1d5b0:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   1d5b2:	4291      	cmp	r1, r2
   1d5b4:	d02a      	beq.n	1d60c <rpc_handle_data_message+0x74>
   1d5b6:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
   1d5ba:	4291      	cmp	r1, r2
   1d5bc:	d028      	beq.n	1d610 <rpc_handle_data_message+0x78>
   1d5be:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
   1d5c2:	4291      	cmp	r1, r2
   1d5c4:	d026      	beq.n	1d614 <rpc_handle_data_message+0x7c>
   1d5c6:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
   1d5ca:	4291      	cmp	r1, r2
   1d5cc:	d026      	beq.n	1d61c <rpc_handle_data_message+0x84>
   1d5ce:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   1d5d2:	4291      	cmp	r1, r2
   1d5d4:	d024      	beq.n	1d620 <rpc_handle_data_message+0x88>
   1d5d6:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
   1d5da:	4291      	cmp	r1, r2
   1d5dc:	d01c      	beq.n	1d618 <rpc_handle_data_message+0x80>
   1d5de:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
   1d5e2:	4291      	cmp	r1, r2
   1d5e4:	d01e      	beq.n	1d624 <rpc_handle_data_message+0x8c>
   1d5e6:	6880      	ldr	r0, [r0, #8]
   1d5e8:	b160      	cbz	r0, 1d604 <rpc_handle_data_message+0x6c>
   1d5ea:	b510      	push	{r4, lr}
   1d5ec:	f7fc fcfa 	bl	19fe4 <rpc_transport_data_free>
   1d5f0:	2000      	movs	r0, #0
   1d5f2:	bd10      	pop	{r4, pc}
   1d5f4:	2200      	movs	r2, #0
   1d5f6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1d5fa:	685a      	ldr	r2, [r3, #4]
   1d5fc:	68d9      	ldr	r1, [r3, #12]
   1d5fe:	4710      	bx	r2
   1d600:	2201      	movs	r2, #1
   1d602:	e7f8      	b.n	1d5f6 <rpc_handle_data_message+0x5e>
   1d604:	2000      	movs	r0, #0
   1d606:	4770      	bx	lr
   1d608:	2202      	movs	r2, #2
   1d60a:	e7f4      	b.n	1d5f6 <rpc_handle_data_message+0x5e>
   1d60c:	2203      	movs	r2, #3
   1d60e:	e7f2      	b.n	1d5f6 <rpc_handle_data_message+0x5e>
   1d610:	2204      	movs	r2, #4
   1d612:	e7f0      	b.n	1d5f6 <rpc_handle_data_message+0x5e>
   1d614:	2205      	movs	r2, #5
   1d616:	e7ee      	b.n	1d5f6 <rpc_handle_data_message+0x5e>
   1d618:	2208      	movs	r2, #8
   1d61a:	e7ec      	b.n	1d5f6 <rpc_handle_data_message+0x5e>
   1d61c:	2206      	movs	r2, #6
   1d61e:	e7ea      	b.n	1d5f6 <rpc_handle_data_message+0x5e>
   1d620:	2207      	movs	r2, #7
   1d622:	e7e8      	b.n	1d5f6 <rpc_handle_data_message+0x5e>
   1d624:	2209      	movs	r2, #9
   1d626:	e7e6      	b.n	1d5f6 <rpc_handle_data_message+0x5e>
   1d628:	20021a10 	.word	0x20021a10

0001d62c <rpc_framework_init>:
   1d62c:	b508      	push	{r3, lr}
   1d62e:	22a0      	movs	r2, #160	; 0xa0
   1d630:	2100      	movs	r1, #0
   1d632:	4802      	ldr	r0, [pc, #8]	; (1d63c <rpc_framework_init+0x10>)
   1d634:	f008 fd22 	bl	2607c <memset>
   1d638:	2000      	movs	r0, #0
   1d63a:	bd08      	pop	{r3, pc}
   1d63c:	20021a10 	.word	0x20021a10

0001d640 <rpc_client_register>:
   1d640:	8803      	ldrh	r3, [r0, #0]
   1d642:	2b00      	cmp	r3, #0
   1d644:	d045      	beq.n	1d6d2 <rpc_client_register+0x92>
   1d646:	6842      	ldr	r2, [r0, #4]
   1d648:	4601      	mov	r1, r0
   1d64a:	2a00      	cmp	r2, #0
   1d64c:	d050      	beq.n	1d6f0 <rpc_client_register+0xb0>
   1d64e:	4a30      	ldr	r2, [pc, #192]	; (1d710 <rpc_client_register+0xd0>)
   1d650:	8810      	ldrh	r0, [r2, #0]
   1d652:	4283      	cmp	r3, r0
   1d654:	d03d      	beq.n	1d6d2 <rpc_client_register+0x92>
   1d656:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d65a:	8a14      	ldrh	r4, [r2, #16]
   1d65c:	42a3      	cmp	r3, r4
   1d65e:	d035      	beq.n	1d6cc <rpc_client_register+0x8c>
   1d660:	8c15      	ldrh	r5, [r2, #32]
   1d662:	42ab      	cmp	r3, r5
   1d664:	d032      	beq.n	1d6cc <rpc_client_register+0x8c>
   1d666:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   1d668:	42b3      	cmp	r3, r6
   1d66a:	d02f      	beq.n	1d6cc <rpc_client_register+0x8c>
   1d66c:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   1d670:	42bb      	cmp	r3, r7
   1d672:	d02b      	beq.n	1d6cc <rpc_client_register+0x8c>
   1d674:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   1d678:	4563      	cmp	r3, ip
   1d67a:	d027      	beq.n	1d6cc <rpc_client_register+0x8c>
   1d67c:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   1d680:	4573      	cmp	r3, lr
   1d682:	d023      	beq.n	1d6cc <rpc_client_register+0x8c>
   1d684:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   1d688:	4543      	cmp	r3, r8
   1d68a:	d01f      	beq.n	1d6cc <rpc_client_register+0x8c>
   1d68c:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   1d690:	454b      	cmp	r3, r9
   1d692:	d01b      	beq.n	1d6cc <rpc_client_register+0x8c>
   1d694:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   1d698:	4553      	cmp	r3, sl
   1d69a:	d017      	beq.n	1d6cc <rpc_client_register+0x8c>
   1d69c:	b1e0      	cbz	r0, 1d6d8 <rpc_client_register+0x98>
   1d69e:	b35c      	cbz	r4, 1d6f8 <rpc_client_register+0xb8>
   1d6a0:	b365      	cbz	r5, 1d6fc <rpc_client_register+0xbc>
   1d6a2:	b36e      	cbz	r6, 1d700 <rpc_client_register+0xc0>
   1d6a4:	b377      	cbz	r7, 1d704 <rpc_client_register+0xc4>
   1d6a6:	f1bc 0f00 	cmp.w	ip, #0
   1d6aa:	d02d      	beq.n	1d708 <rpc_client_register+0xc8>
   1d6ac:	f1be 0f00 	cmp.w	lr, #0
   1d6b0:	d020      	beq.n	1d6f4 <rpc_client_register+0xb4>
   1d6b2:	f1b8 0f00 	cmp.w	r8, #0
   1d6b6:	d029      	beq.n	1d70c <rpc_client_register+0xcc>
   1d6b8:	f1b9 0f00 	cmp.w	r9, #0
   1d6bc:	d00b      	beq.n	1d6d6 <rpc_client_register+0x96>
   1d6be:	2009      	movs	r0, #9
   1d6c0:	f1ba 0f00 	cmp.w	sl, #0
   1d6c4:	d008      	beq.n	1d6d8 <rpc_client_register+0x98>
   1d6c6:	2004      	movs	r0, #4
   1d6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d6cc:	2007      	movs	r0, #7
   1d6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d6d2:	2007      	movs	r0, #7
   1d6d4:	4770      	bx	lr
   1d6d6:	2008      	movs	r0, #8
   1d6d8:	0100      	lsls	r0, r0, #4
   1d6da:	5213      	strh	r3, [r2, r0]
   1d6dc:	684b      	ldr	r3, [r1, #4]
   1d6de:	4402      	add	r2, r0
   1d6e0:	6053      	str	r3, [r2, #4]
   1d6e2:	688b      	ldr	r3, [r1, #8]
   1d6e4:	2000      	movs	r0, #0
   1d6e6:	6093      	str	r3, [r2, #8]
   1d6e8:	68cb      	ldr	r3, [r1, #12]
   1d6ea:	60d3      	str	r3, [r2, #12]
   1d6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d6f0:	200e      	movs	r0, #14
   1d6f2:	4770      	bx	lr
   1d6f4:	2006      	movs	r0, #6
   1d6f6:	e7ef      	b.n	1d6d8 <rpc_client_register+0x98>
   1d6f8:	2001      	movs	r0, #1
   1d6fa:	e7ed      	b.n	1d6d8 <rpc_client_register+0x98>
   1d6fc:	2002      	movs	r0, #2
   1d6fe:	e7eb      	b.n	1d6d8 <rpc_client_register+0x98>
   1d700:	2003      	movs	r0, #3
   1d702:	e7e9      	b.n	1d6d8 <rpc_client_register+0x98>
   1d704:	2004      	movs	r0, #4
   1d706:	e7e7      	b.n	1d6d8 <rpc_client_register+0x98>
   1d708:	2005      	movs	r0, #5
   1d70a:	e7e5      	b.n	1d6d8 <rpc_client_register+0x98>
   1d70c:	2007      	movs	r0, #7
   1d70e:	e7e3      	b.n	1d6d8 <rpc_client_register+0x98>
   1d710:	20021a10 	.word	0x20021a10

0001d714 <rpc_message_send>:
   1d714:	b150      	cbz	r0, 1d72c <rpc_message_send+0x18>
   1d716:	b159      	cbz	r1, 1d730 <rpc_message_send+0x1c>
   1d718:	684b      	ldr	r3, [r1, #4]
   1d71a:	8008      	strh	r0, [r1, #0]
   1d71c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1d720:	f043 0302 	orr.w	r3, r3, #2
   1d724:	604b      	str	r3, [r1, #4]
   1d726:	4608      	mov	r0, r1
   1d728:	f7fc bc54 	b.w	19fd4 <rpc_transport_send>
   1d72c:	2007      	movs	r0, #7
   1d72e:	4770      	bx	lr
   1d730:	200e      	movs	r0, #14
   1d732:	4770      	bx	lr

0001d734 <rpc_message_alloc>:
   1d734:	b342      	cbz	r2, 1d788 <rpc_message_alloc+0x54>
   1d736:	b328      	cbz	r0, 1d784 <rpc_message_alloc+0x50>
   1d738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d73a:	2300      	movs	r3, #0
   1d73c:	4616      	mov	r6, r2
   1d73e:	460c      	mov	r4, r1
   1d740:	4605      	mov	r5, r0
   1d742:	6013      	str	r3, [r2, #0]
   1d744:	b171      	cbz	r1, 1d764 <rpc_message_alloc+0x30>
   1d746:	4608      	mov	r0, r1
   1d748:	f7fc fc48 	bl	19fdc <rpc_transport_data_alloc>
   1d74c:	4607      	mov	r7, r0
   1d74e:	b1b8      	cbz	r0, 1d780 <rpc_message_alloc+0x4c>
   1d750:	f7fc fc42 	bl	19fd8 <rpc_transport_rpc_alloc>
   1d754:	4603      	mov	r3, r0
   1d756:	b180      	cbz	r0, 1d77a <rpc_message_alloc+0x46>
   1d758:	2000      	movs	r0, #0
   1d75a:	60dc      	str	r4, [r3, #12]
   1d75c:	609f      	str	r7, [r3, #8]
   1d75e:	801d      	strh	r5, [r3, #0]
   1d760:	6033      	str	r3, [r6, #0]
   1d762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d764:	f7fc fc38 	bl	19fd8 <rpc_transport_rpc_alloc>
   1d768:	4603      	mov	r3, r0
   1d76a:	b148      	cbz	r0, 1d780 <rpc_message_alloc+0x4c>
   1d76c:	4627      	mov	r7, r4
   1d76e:	60dc      	str	r4, [r3, #12]
   1d770:	609f      	str	r7, [r3, #8]
   1d772:	801d      	strh	r5, [r3, #0]
   1d774:	2000      	movs	r0, #0
   1d776:	6033      	str	r3, [r6, #0]
   1d778:	e7f3      	b.n	1d762 <rpc_message_alloc+0x2e>
   1d77a:	4638      	mov	r0, r7
   1d77c:	f7fc fc32 	bl	19fe4 <rpc_transport_data_free>
   1d780:	2004      	movs	r0, #4
   1d782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d784:	2007      	movs	r0, #7
   1d786:	4770      	bx	lr
   1d788:	200e      	movs	r0, #14
   1d78a:	4770      	bx	lr

0001d78c <rpc_message_free>:
   1d78c:	b130      	cbz	r0, 1d79c <rpc_message_free+0x10>
   1d78e:	b139      	cbz	r1, 1d7a0 <rpc_message_free+0x14>
   1d790:	b508      	push	{r3, lr}
   1d792:	4608      	mov	r0, r1
   1d794:	f7fc fc24 	bl	19fe0 <rpc_transport_rpc_free>
   1d798:	2000      	movs	r0, #0
   1d79a:	bd08      	pop	{r3, pc}
   1d79c:	2007      	movs	r0, #7
   1d79e:	4770      	bx	lr
   1d7a0:	200e      	movs	r0, #14
   1d7a2:	4770      	bx	lr

0001d7a4 <rpc_message_data_free>:
   1d7a4:	b130      	cbz	r0, 1d7b4 <rpc_message_data_free+0x10>
   1d7a6:	b139      	cbz	r1, 1d7b8 <rpc_message_data_free+0x14>
   1d7a8:	b508      	push	{r3, lr}
   1d7aa:	4608      	mov	r0, r1
   1d7ac:	f7fc fc1a 	bl	19fe4 <rpc_transport_data_free>
   1d7b0:	2000      	movs	r0, #0
   1d7b2:	bd08      	pop	{r3, pc}
   1d7b4:	2007      	movs	r0, #7
   1d7b6:	4770      	bx	lr
   1d7b8:	200e      	movs	r0, #14
   1d7ba:	4770      	bx	lr

0001d7bc <packet_free_cb>:
   1d7bc:	b510      	push	{r4, lr}
   1d7be:	4604      	mov	r4, r0
   1d7c0:	b118      	cbz	r0, 1d7ca <packet_free_cb+0xe>
   1d7c2:	6800      	ldr	r0, [r0, #0]
   1d7c4:	b108      	cbz	r0, 1d7ca <packet_free_cb+0xe>
   1d7c6:	f002 ff53 	bl	20670 <rpc_gnss_client_data_free>
   1d7ca:	68a0      	ldr	r0, [r4, #8]
   1d7cc:	b118      	cbz	r0, 1d7d6 <packet_free_cb+0x1a>
   1d7ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d7d2:	f003 bd3b 	b.w	2124c <nrf_free>
   1d7d6:	bd10      	pop	{r4, pc}

0001d7d8 <rpc_gnss_event_handler>:
   1d7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d7da:	4b64      	ldr	r3, [pc, #400]	; (1d96c <rpc_gnss_event_handler+0x194>)
   1d7dc:	4606      	mov	r6, r0
   1d7de:	6800      	ldr	r0, [r0, #0]
   1d7e0:	881b      	ldrh	r3, [r3, #0]
   1d7e2:	6802      	ldr	r2, [r0, #0]
   1d7e4:	b085      	sub	sp, #20
   1d7e6:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   1d7ea:	460d      	mov	r5, r1
   1d7ec:	d037      	beq.n	1d85e <rpc_gnss_event_handler+0x86>
   1d7ee:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   1d7f2:	33ff      	adds	r3, #255	; 0xff
   1d7f4:	b29b      	uxth	r3, r3
   1d7f6:	2b02      	cmp	r3, #2
   1d7f8:	d811      	bhi.n	1d81e <rpc_gnss_event_handler+0x46>
   1d7fa:	4c5d      	ldr	r4, [pc, #372]	; (1d970 <rpc_gnss_event_handler+0x198>)
   1d7fc:	6823      	ldr	r3, [r4, #0]
   1d7fe:	075a      	lsls	r2, r3, #29
   1d800:	d410      	bmi.n	1d824 <rpc_gnss_event_handler+0x4c>
   1d802:	6823      	ldr	r3, [r4, #0]
   1d804:	079b      	lsls	r3, r3, #30
   1d806:	d503      	bpl.n	1d810 <rpc_gnss_event_handler+0x38>
   1d808:	f244 0303 	movw	r3, #16387	; 0x4003
   1d80c:	429d      	cmp	r5, r3
   1d80e:	d009      	beq.n	1d824 <rpc_gnss_event_handler+0x4c>
   1d810:	6830      	ldr	r0, [r6, #0]
   1d812:	b120      	cbz	r0, 1d81e <rpc_gnss_event_handler+0x46>
   1d814:	f002 ff2c 	bl	20670 <rpc_gnss_client_data_free>
   1d818:	2200      	movs	r2, #0
   1d81a:	4b56      	ldr	r3, [pc, #344]	; (1d974 <rpc_gnss_event_handler+0x19c>)
   1d81c:	601a      	str	r2, [r3, #0]
   1d81e:	2000      	movs	r0, #0
   1d820:	b005      	add	sp, #20
   1d822:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d824:	2002      	movs	r0, #2
   1d826:	f003 fd07 	bl	21238 <nrf_malloc>
   1d82a:	4607      	mov	r7, r0
   1d82c:	2800      	cmp	r0, #0
   1d82e:	f000 8094 	beq.w	1d95a <rpc_gnss_event_handler+0x182>
   1d832:	2302      	movs	r3, #2
   1d834:	8005      	strh	r5, [r0, #0]
   1d836:	6831      	ldr	r1, [r6, #0]
   1d838:	6872      	ldr	r2, [r6, #4]
   1d83a:	484f      	ldr	r0, [pc, #316]	; (1d978 <rpc_gnss_event_handler+0x1a0>)
   1d83c:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   1d840:	6800      	ldr	r0, [r0, #0]
   1d842:	9303      	str	r3, [sp, #12]
   1d844:	6803      	ldr	r3, [r0, #0]
   1d846:	4669      	mov	r1, sp
   1d848:	685b      	ldr	r3, [r3, #4]
   1d84a:	4798      	blx	r3
   1d84c:	3001      	adds	r0, #1
   1d84e:	d071      	beq.n	1d934 <rpc_gnss_event_handler+0x15c>
   1d850:	2000      	movs	r0, #0
   1d852:	6823      	ldr	r3, [r4, #0]
   1d854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1d858:	6023      	str	r3, [r4, #0]
   1d85a:	b005      	add	sp, #20
   1d85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d85e:	4c44      	ldr	r4, [pc, #272]	; (1d970 <rpc_gnss_event_handler+0x198>)
   1d860:	4f44      	ldr	r7, [pc, #272]	; (1d974 <rpc_gnss_event_handler+0x19c>)
   1d862:	6823      	ldr	r3, [r4, #0]
   1d864:	6038      	str	r0, [r7, #0]
   1d866:	01d9      	lsls	r1, r3, #7
   1d868:	d523      	bpl.n	1d8b2 <rpc_gnss_event_handler+0xda>
   1d86a:	f242 1302 	movw	r3, #8450	; 0x2102
   1d86e:	429d      	cmp	r5, r3
   1d870:	d11f      	bne.n	1d8b2 <rpc_gnss_event_handler+0xda>
   1d872:	6843      	ldr	r3, [r0, #4]
   1d874:	b91b      	cbnz	r3, 1d87e <rpc_gnss_event_handler+0xa6>
   1d876:	6823      	ldr	r3, [r4, #0]
   1d878:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1d87c:	6023      	str	r3, [r4, #0]
   1d87e:	6823      	ldr	r3, [r4, #0]
   1d880:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1d884:	6023      	str	r3, [r4, #0]
   1d886:	6823      	ldr	r3, [r4, #0]
   1d888:	025a      	lsls	r2, r3, #9
   1d88a:	d430      	bmi.n	1d8ee <rpc_gnss_event_handler+0x116>
   1d88c:	f242 0305 	movw	r3, #8197	; 0x2005
   1d890:	429d      	cmp	r5, r3
   1d892:	d12c      	bne.n	1d8ee <rpc_gnss_event_handler+0x116>
   1d894:	6823      	ldr	r3, [r4, #0]
   1d896:	0299      	lsls	r1, r3, #10
   1d898:	d529      	bpl.n	1d8ee <rpc_gnss_event_handler+0x116>
   1d89a:	6843      	ldr	r3, [r0, #4]
   1d89c:	2b00      	cmp	r3, #0
   1d89e:	d157      	bne.n	1d950 <rpc_gnss_event_handler+0x178>
   1d8a0:	6823      	ldr	r3, [r4, #0]
   1d8a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1d8a6:	6023      	str	r3, [r4, #0]
   1d8a8:	6823      	ldr	r3, [r4, #0]
   1d8aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1d8ae:	6023      	str	r3, [r4, #0]
   1d8b0:	e01d      	b.n	1d8ee <rpc_gnss_event_handler+0x116>
   1d8b2:	6823      	ldr	r3, [r4, #0]
   1d8b4:	025b      	lsls	r3, r3, #9
   1d8b6:	d50e      	bpl.n	1d8d6 <rpc_gnss_event_handler+0xfe>
   1d8b8:	f242 1303 	movw	r3, #8451	; 0x2103
   1d8bc:	429d      	cmp	r5, r3
   1d8be:	d10a      	bne.n	1d8d6 <rpc_gnss_event_handler+0xfe>
   1d8c0:	6843      	ldr	r3, [r0, #4]
   1d8c2:	b91b      	cbnz	r3, 1d8cc <rpc_gnss_event_handler+0xf4>
   1d8c4:	6823      	ldr	r3, [r4, #0]
   1d8c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1d8ca:	6023      	str	r3, [r4, #0]
   1d8cc:	6823      	ldr	r3, [r4, #0]
   1d8ce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1d8d2:	6023      	str	r3, [r4, #0]
   1d8d4:	e00b      	b.n	1d8ee <rpc_gnss_event_handler+0x116>
   1d8d6:	f242 0301 	movw	r3, #8193	; 0x2001
   1d8da:	429d      	cmp	r5, r3
   1d8dc:	d10c      	bne.n	1d8f8 <rpc_gnss_event_handler+0x120>
   1d8de:	6843      	ldr	r3, [r0, #4]
   1d8e0:	b92b      	cbnz	r3, 1d8ee <rpc_gnss_event_handler+0x116>
   1d8e2:	6823      	ldr	r3, [r4, #0]
   1d8e4:	0c1b      	lsrs	r3, r3, #16
   1d8e6:	041b      	lsls	r3, r3, #16
   1d8e8:	f043 0302 	orr.w	r3, r3, #2
   1d8ec:	6023      	str	r3, [r4, #0]
   1d8ee:	f002 febf 	bl	20670 <rpc_gnss_client_data_free>
   1d8f2:	2300      	movs	r3, #0
   1d8f4:	603b      	str	r3, [r7, #0]
   1d8f6:	e77a      	b.n	1d7ee <rpc_gnss_event_handler+0x16>
   1d8f8:	f242 0304 	movw	r3, #8196	; 0x2004
   1d8fc:	429d      	cmp	r5, r3
   1d8fe:	d1c5      	bne.n	1d88c <rpc_gnss_event_handler+0xb4>
   1d900:	6843      	ldr	r3, [r0, #4]
   1d902:	b993      	cbnz	r3, 1d92a <rpc_gnss_event_handler+0x152>
   1d904:	6823      	ldr	r3, [r4, #0]
   1d906:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1d90a:	6023      	str	r3, [r4, #0]
   1d90c:	6823      	ldr	r3, [r4, #0]
   1d90e:	b29b      	uxth	r3, r3
   1d910:	2b03      	cmp	r3, #3
   1d912:	6823      	ldr	r3, [r4, #0]
   1d914:	d016      	beq.n	1d944 <rpc_gnss_event_handler+0x16c>
   1d916:	b29b      	uxth	r3, r3
   1d918:	2b04      	cmp	r3, #4
   1d91a:	d1d7      	bne.n	1d8cc <rpc_gnss_event_handler+0xf4>
   1d91c:	6823      	ldr	r3, [r4, #0]
   1d91e:	0c1b      	lsrs	r3, r3, #16
   1d920:	041b      	lsls	r3, r3, #16
   1d922:	f043 0302 	orr.w	r3, r3, #2
   1d926:	6023      	str	r3, [r4, #0]
   1d928:	e7d0      	b.n	1d8cc <rpc_gnss_event_handler+0xf4>
   1d92a:	6823      	ldr	r3, [r4, #0]
   1d92c:	b29b      	uxth	r3, r3
   1d92e:	2b03      	cmp	r3, #3
   1d930:	d1cc      	bne.n	1d8cc <rpc_gnss_event_handler+0xf4>
   1d932:	e7f3      	b.n	1d91c <rpc_gnss_event_handler+0x144>
   1d934:	4638      	mov	r0, r7
   1d936:	f003 fc89 	bl	2124c <nrf_free>
   1d93a:	6830      	ldr	r0, [r6, #0]
   1d93c:	2800      	cmp	r0, #0
   1d93e:	f47f af69 	bne.w	1d814 <rpc_gnss_event_handler+0x3c>
   1d942:	e76c      	b.n	1d81e <rpc_gnss_event_handler+0x46>
   1d944:	0c1b      	lsrs	r3, r3, #16
   1d946:	041b      	lsls	r3, r3, #16
   1d948:	f043 0304 	orr.w	r3, r3, #4
   1d94c:	6023      	str	r3, [r4, #0]
   1d94e:	e7bd      	b.n	1d8cc <rpc_gnss_event_handler+0xf4>
   1d950:	6823      	ldr	r3, [r4, #0]
   1d952:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1d956:	6023      	str	r3, [r4, #0]
   1d958:	e7c9      	b.n	1d8ee <rpc_gnss_event_handler+0x116>
   1d95a:	6830      	ldr	r0, [r6, #0]
   1d95c:	2800      	cmp	r0, #0
   1d95e:	f43f af5e 	beq.w	1d81e <rpc_gnss_event_handler+0x46>
   1d962:	f002 fe85 	bl	20670 <rpc_gnss_client_data_free>
   1d966:	4b03      	ldr	r3, [pc, #12]	; (1d974 <rpc_gnss_event_handler+0x19c>)
   1d968:	601f      	str	r7, [r3, #0]
   1d96a:	e758      	b.n	1d81e <rpc_gnss_event_handler+0x46>
   1d96c:	200242a6 	.word	0x200242a6
   1d970:	20021ab0 	.word	0x20021ab0
   1d974:	20021ab4 	.word	0x20021ab4
   1d978:	20021ab8 	.word	0x20021ab8

0001d97c <gnss_interface_write>:
   1d97c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d980:	4a74      	ldr	r2, [pc, #464]	; (1db54 <gnss_interface_write+0x1d8>)
   1d982:	b09f      	sub	sp, #124	; 0x7c
   1d984:	4290      	cmp	r0, r2
   1d986:	9d26      	ldr	r5, [sp, #152]	; 0x98
   1d988:	f040 80d7 	bne.w	1db3a <gnss_interface_write+0x1be>
   1d98c:	2900      	cmp	r1, #0
   1d98e:	f000 80c6 	beq.w	1db1e <gnss_interface_write+0x1a2>
   1d992:	2d00      	cmp	r5, #0
   1d994:	f000 80c3 	beq.w	1db1e <gnss_interface_write+0x1a2>
   1d998:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   1d99a:	2a02      	cmp	r2, #2
   1d99c:	f040 80bf 	bne.w	1db1e <gnss_interface_write+0x1a2>
   1d9a0:	4c6d      	ldr	r4, [pc, #436]	; (1db58 <gnss_interface_write+0x1dc>)
   1d9a2:	6822      	ldr	r2, [r4, #0]
   1d9a4:	b292      	uxth	r2, r2
   1d9a6:	2a02      	cmp	r2, #2
   1d9a8:	d004      	beq.n	1d9b4 <gnss_interface_write+0x38>
   1d9aa:	6822      	ldr	r2, [r4, #0]
   1d9ac:	b292      	uxth	r2, r2
   1d9ae:	2a04      	cmp	r2, #4
   1d9b0:	f040 80bd 	bne.w	1db2e <gnss_interface_write+0x1b2>
   1d9b4:	2b00      	cmp	r3, #0
   1d9b6:	f040 80c6 	bne.w	1db46 <gnss_interface_write+0x1ca>
   1d9ba:	6822      	ldr	r2, [r4, #0]
   1d9bc:	0390      	lsls	r0, r2, #14
   1d9be:	d512      	bpl.n	1d9e6 <gnss_interface_write+0x6a>
   1d9c0:	6822      	ldr	r2, [r4, #0]
   1d9c2:	882b      	ldrh	r3, [r5, #0]
   1d9c4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   1d9c8:	6022      	str	r2, [r4, #0]
   1d9ca:	6822      	ldr	r2, [r4, #0]
   1d9cc:	3b01      	subs	r3, #1
   1d9ce:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   1d9d2:	6022      	str	r2, [r4, #0]
   1d9d4:	2b07      	cmp	r3, #7
   1d9d6:	f200 80a2 	bhi.w	1db1e <gnss_interface_write+0x1a2>
   1d9da:	e8df f003 	tbb	[pc, r3]
   1d9de:	7d82      	.short	0x7d82
   1d9e0:	646e7378 	.word	0x646e7378
   1d9e4:	0869      	.short	0x0869
   1d9e6:	2000      	movs	r0, #0
   1d9e8:	b01f      	add	sp, #124	; 0x7c
   1d9ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d9ee:	4608      	mov	r0, r1
   1d9f0:	a902      	add	r1, sp, #8
   1d9f2:	f002 fdf1 	bl	205d8 <rpc_gnss_serialize_integrity>
   1d9f6:	2172      	movs	r1, #114	; 0x72
   1d9f8:	4668      	mov	r0, sp
   1d9fa:	f002 fe07 	bl	2060c <rpc_gnss_client_request_alloc>
   1d9fe:	4605      	mov	r5, r0
   1da00:	9800      	ldr	r0, [sp, #0]
   1da02:	2d00      	cmp	r5, #0
   1da04:	d172      	bne.n	1daec <gnss_interface_write+0x170>
   1da06:	2800      	cmp	r0, #0
   1da08:	d077      	beq.n	1dafa <gnss_interface_write+0x17e>
   1da0a:	f241 0605 	movw	r6, #4101	; 0x1005
   1da0e:	f04f 0c49 	mov.w	ip, #73	; 0x49
   1da12:	2272      	movs	r2, #114	; 0x72
   1da14:	f04f 0e76 	mov.w	lr, #118	; 0x76
   1da18:	f04f 0943 	mov.w	r9, #67	; 0x43
   1da1c:	f04f 0854 	mov.w	r8, #84	; 0x54
   1da20:	4f4e      	ldr	r7, [pc, #312]	; (1db5c <gnss_interface_write+0x1e0>)
   1da22:	a91e      	add	r1, sp, #120	; 0x78
   1da24:	883b      	ldrh	r3, [r7, #0]
   1da26:	f880 c00f 	strb.w	ip, [r0, #15]
   1da2a:	3301      	adds	r3, #1
   1da2c:	b29b      	uxth	r3, r3
   1da2e:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   1da32:	f841 cd74 	str.w	ip, [r1, #-116]!
   1da36:	7145      	strb	r5, [r0, #5]
   1da38:	7185      	strb	r5, [r0, #6]
   1da3a:	71c5      	strb	r5, [r0, #7]
   1da3c:	7205      	strb	r5, [r0, #8]
   1da3e:	7245      	strb	r5, [r0, #9]
   1da40:	7285      	strb	r5, [r0, #10]
   1da42:	72c5      	strb	r5, [r0, #11]
   1da44:	7102      	strb	r2, [r0, #4]
   1da46:	f880 900c 	strb.w	r9, [r0, #12]
   1da4a:	f880 800d 	strb.w	r8, [r0, #13]
   1da4e:	f880 e00e 	strb.w	lr, [r0, #14]
   1da52:	6800      	ldr	r0, [r0, #0]
   1da54:	803b      	strh	r3, [r7, #0]
   1da56:	f7ef f879 	bl	cb4c <memcpy>
   1da5a:	4b41      	ldr	r3, [pc, #260]	; (1db60 <gnss_interface_write+0x1e4>)
   1da5c:	4631      	mov	r1, r6
   1da5e:	9800      	ldr	r0, [sp, #0]
   1da60:	601d      	str	r5, [r3, #0]
   1da62:	f002 fde7 	bl	20634 <rpc_gnss_client_request_send>
   1da66:	2800      	cmp	r0, #0
   1da68:	d14e      	bne.n	1db08 <gnss_interface_write+0x18c>
   1da6a:	6823      	ldr	r3, [r4, #0]
   1da6c:	0299      	lsls	r1, r3, #10
   1da6e:	d50b      	bpl.n	1da88 <gnss_interface_write+0x10c>
   1da70:	4e3c      	ldr	r6, [pc, #240]	; (1db64 <gnss_interface_write+0x1e8>)
   1da72:	4d38      	ldr	r5, [pc, #224]	; (1db54 <gnss_interface_write+0x1d8>)
   1da74:	e000      	b.n	1da78 <gnss_interface_write+0xfc>
   1da76:	b978      	cbnz	r0, 1da98 <gnss_interface_write+0x11c>
   1da78:	4631      	mov	r1, r6
   1da7a:	4628      	mov	r0, r5
   1da7c:	f7f8 ffe8 	bl	16a50 <bsd_os_timedwait>
   1da80:	6823      	ldr	r3, [r4, #0]
   1da82:	029a      	lsls	r2, r3, #10
   1da84:	d4f7      	bmi.n	1da76 <gnss_interface_write+0xfa>
   1da86:	b938      	cbnz	r0, 1da98 <gnss_interface_write+0x11c>
   1da88:	6823      	ldr	r3, [r4, #0]
   1da8a:	039b      	lsls	r3, r3, #14
   1da8c:	d4ab      	bmi.n	1d9e6 <gnss_interface_write+0x6a>
   1da8e:	2005      	movs	r0, #5
   1da90:	6823      	ldr	r3, [r4, #0]
   1da92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1da96:	6023      	str	r3, [r4, #0]
   1da98:	f7f9 f892 	bl	16bc0 <bsd_os_errno_set>
   1da9c:	f04f 30ff 	mov.w	r0, #4294967295
   1daa0:	b01f      	add	sp, #124	; 0x7c
   1daa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1daa6:	4608      	mov	r0, r1
   1daa8:	a902      	add	r1, sp, #8
   1daaa:	f002 fd4d 	bl	20548 <rpc_gnss_serialize_time_and_sv_tow>
   1daae:	e7a2      	b.n	1d9f6 <gnss_interface_write+0x7a>
   1dab0:	4608      	mov	r0, r1
   1dab2:	a902      	add	r1, sp, #8
   1dab4:	f002 fd70 	bl	20598 <rpc_gnss_serialize_location>
   1dab8:	e79d      	b.n	1d9f6 <gnss_interface_write+0x7a>
   1daba:	4608      	mov	r0, r1
   1dabc:	a902      	add	r1, sp, #8
   1dabe:	f002 fd29 	bl	20514 <rpc_gnss_serialize_nequick>
   1dac2:	e798      	b.n	1d9f6 <gnss_interface_write+0x7a>
   1dac4:	4608      	mov	r0, r1
   1dac6:	a902      	add	r1, sp, #8
   1dac8:	f002 fd00 	bl	204cc <rpc_gnss_serialize_klob>
   1dacc:	e793      	b.n	1d9f6 <gnss_interface_write+0x7a>
   1dace:	4608      	mov	r0, r1
   1dad0:	a902      	add	r1, sp, #8
   1dad2:	f002 fcc9 	bl	20468 <rpc_gnss_serialize_alm>
   1dad6:	e78e      	b.n	1d9f6 <gnss_interface_write+0x7a>
   1dad8:	4608      	mov	r0, r1
   1dada:	a902      	add	r1, sp, #8
   1dadc:	f002 fc72 	bl	203c4 <rpc_gnss_serialize_ephe>
   1dae0:	e789      	b.n	1d9f6 <gnss_interface_write+0x7a>
   1dae2:	4608      	mov	r0, r1
   1dae4:	a902      	add	r1, sp, #8
   1dae6:	f002 fc4b 	bl	20380 <rpc_gnss_serialize_utc>
   1daea:	e784      	b.n	1d9f6 <gnss_interface_write+0x7a>
   1daec:	b128      	cbz	r0, 1dafa <gnss_interface_write+0x17e>
   1daee:	6803      	ldr	r3, [r0, #0]
   1daf0:	b11b      	cbz	r3, 1dafa <gnss_interface_write+0x17e>
   1daf2:	4618      	mov	r0, r3
   1daf4:	f002 fdbc 	bl	20670 <rpc_gnss_client_data_free>
   1daf8:	9800      	ldr	r0, [sp, #0]
   1dafa:	f002 fdb1 	bl	20660 <rpc_gnss_client_message_free>
   1dafe:	2023      	movs	r0, #35	; 0x23
   1db00:	f7f9 f85e 	bl	16bc0 <bsd_os_errno_set>
   1db04:	f04f 30ff 	mov.w	r0, #4294967295
   1db08:	6823      	ldr	r3, [r4, #0]
   1db0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1db0e:	6023      	str	r3, [r4, #0]
   1db10:	6823      	ldr	r3, [r4, #0]
   1db12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1db16:	6023      	str	r3, [r4, #0]
   1db18:	b01f      	add	sp, #124	; 0x7c
   1db1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1db1e:	2016      	movs	r0, #22
   1db20:	f7f9 f84e 	bl	16bc0 <bsd_os_errno_set>
   1db24:	f04f 30ff 	mov.w	r0, #4294967295
   1db28:	b01f      	add	sp, #124	; 0x7c
   1db2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1db2e:	2039      	movs	r0, #57	; 0x39
   1db30:	f7f9 f846 	bl	16bc0 <bsd_os_errno_set>
   1db34:	f04f 30ff 	mov.w	r0, #4294967295
   1db38:	e756      	b.n	1d9e8 <gnss_interface_write+0x6c>
   1db3a:	2009      	movs	r0, #9
   1db3c:	f7f9 f840 	bl	16bc0 <bsd_os_errno_set>
   1db40:	f04f 30ff 	mov.w	r0, #4294967295
   1db44:	e750      	b.n	1d9e8 <gnss_interface_write+0x6c>
   1db46:	202d      	movs	r0, #45	; 0x2d
   1db48:	f7f9 f83a 	bl	16bc0 <bsd_os_errno_set>
   1db4c:	f04f 30ff 	mov.w	r0, #4294967295
   1db50:	e74a      	b.n	1d9e8 <gnss_interface_write+0x6c>
   1db52:	bf00      	nop
   1db54:	49765443 	.word	0x49765443
   1db58:	20021ab0 	.word	0x20021ab0
   1db5c:	200242a6 	.word	0x200242a6
   1db60:	20021ab4 	.word	0x20021ab4
   1db64:	200204c4 	.word	0x200204c4

0001db68 <gnss_interface_read>:
   1db68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db6c:	4c55      	ldr	r4, [pc, #340]	; (1dcc4 <gnss_interface_read+0x15c>)
   1db6e:	b0b7      	sub	sp, #220	; 0xdc
   1db70:	42a0      	cmp	r0, r4
   1db72:	f040 81fa 	bne.w	1df6a <gnss_interface_read+0x402>
   1db76:	460e      	mov	r6, r1
   1db78:	2900      	cmp	r1, #0
   1db7a:	f000 81f0 	beq.w	1df5e <gnss_interface_read+0x3f6>
   1db7e:	2ad7      	cmp	r2, #215	; 0xd7
   1db80:	f240 81ed 	bls.w	1df5e <gnss_interface_read+0x3f6>
   1db84:	4d50      	ldr	r5, [pc, #320]	; (1dcc8 <gnss_interface_read+0x160>)
   1db86:	469a      	mov	sl, r3
   1db88:	682b      	ldr	r3, [r5, #0]
   1db8a:	b29b      	uxth	r3, r3
   1db8c:	2b04      	cmp	r3, #4
   1db8e:	d004      	beq.n	1db9a <gnss_interface_read+0x32>
   1db90:	682b      	ldr	r3, [r5, #0]
   1db92:	b29b      	uxth	r3, r3
   1db94:	2b02      	cmp	r3, #2
   1db96:	f040 81dc 	bne.w	1df52 <gnss_interface_read+0x3ea>
   1db9a:	f1ba 0f00 	cmp.w	sl, #0
   1db9e:	d178      	bne.n	1dc92 <gnss_interface_read+0x12a>
   1dba0:	2102      	movs	r1, #2
   1dba2:	20b6      	movs	r0, #182	; 0xb6
   1dba4:	2400      	movs	r4, #0
   1dba6:	682b      	ldr	r3, [r5, #0]
   1dba8:	f10d 020e 	add.w	r2, sp, #14
   1dbac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1dbb0:	602b      	str	r3, [r5, #0]
   1dbb2:	ab08      	add	r3, sp, #32
   1dbb4:	9304      	str	r3, [sp, #16]
   1dbb6:	f8df b118 	ldr.w	fp, [pc, #280]	; 1dcd0 <gnss_interface_read+0x168>
   1dbba:	ea0a 0301 	and.w	r3, sl, r1
   1dbbe:	4f43      	ldr	r7, [pc, #268]	; (1dccc <gnss_interface_read+0x164>)
   1dbc0:	f8df 9110 	ldr.w	r9, [pc, #272]	; 1dcd4 <gnss_interface_read+0x16c>
   1dbc4:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1dcc4 <gnss_interface_read+0x15c>
   1dbc8:	9005      	str	r0, [sp, #20]
   1dbca:	9107      	str	r1, [sp, #28]
   1dbcc:	9206      	str	r2, [sp, #24]
   1dbce:	9301      	str	r3, [sp, #4]
   1dbd0:	f8db 0000 	ldr.w	r0, [fp]
   1dbd4:	4652      	mov	r2, sl
   1dbd6:	6803      	ldr	r3, [r0, #0]
   1dbd8:	a904      	add	r1, sp, #16
   1dbda:	689b      	ldr	r3, [r3, #8]
   1dbdc:	4798      	blx	r3
   1dbde:	2800      	cmp	r0, #0
   1dbe0:	da2a      	bge.n	1dc38 <gnss_interface_read+0xd0>
   1dbe2:	9b01      	ldr	r3, [sp, #4]
   1dbe4:	b15b      	cbz	r3, 1dbfe <gnss_interface_read+0x96>
   1dbe6:	1c42      	adds	r2, r0, #1
   1dbe8:	4603      	mov	r3, r0
   1dbea:	d125      	bne.n	1dc38 <gnss_interface_read+0xd0>
   1dbec:	b9dc      	cbnz	r4, 1dc26 <gnss_interface_read+0xbe>
   1dbee:	2023      	movs	r0, #35	; 0x23
   1dbf0:	461c      	mov	r4, r3
   1dbf2:	f7f8 ffe5 	bl	16bc0 <bsd_os_errno_set>
   1dbf6:	4620      	mov	r0, r4
   1dbf8:	b037      	add	sp, #220	; 0xdc
   1dbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbfe:	682a      	ldr	r2, [r5, #0]
   1dc00:	783b      	ldrb	r3, [r7, #0]
   1dc02:	03d1      	lsls	r1, r2, #15
   1dc04:	d40c      	bmi.n	1dc20 <gnss_interface_read+0xb8>
   1dc06:	b95c      	cbnz	r4, 1dc20 <gnss_interface_read+0xb8>
   1dc08:	b163      	cbz	r3, 1dc24 <gnss_interface_read+0xbc>
   1dc0a:	4649      	mov	r1, r9
   1dc0c:	4640      	mov	r0, r8
   1dc0e:	f7f8 ff1f 	bl	16a50 <bsd_os_timedwait>
   1dc12:	682b      	ldr	r3, [r5, #0]
   1dc14:	03db      	lsls	r3, r3, #15
   1dc16:	d437      	bmi.n	1dc88 <gnss_interface_read+0x120>
   1dc18:	783b      	ldrb	r3, [r7, #0]
   1dc1a:	2800      	cmp	r0, #0
   1dc1c:	d0f4      	beq.n	1dc08 <gnss_interface_read+0xa0>
   1dc1e:	4604      	mov	r4, r0
   1dc20:	2b00      	cmp	r3, #0
   1dc22:	d1d5      	bne.n	1dbd0 <gnss_interface_read+0x68>
   1dc24:	2470      	movs	r4, #112	; 0x70
   1dc26:	4620      	mov	r0, r4
   1dc28:	f04f 34ff 	mov.w	r4, #4294967295
   1dc2c:	f7f8 ffc8 	bl	16bc0 <bsd_os_errno_set>
   1dc30:	4620      	mov	r0, r4
   1dc32:	b037      	add	sp, #220	; 0xdc
   1dc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc38:	f244 0202 	movw	r2, #16386	; 0x4002
   1dc3c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1dc40:	4293      	cmp	r3, r2
   1dc42:	d02f      	beq.n	1dca4 <gnss_interface_read+0x13c>
   1dc44:	f244 0201 	movw	r2, #16385	; 0x4001
   1dc48:	4293      	cmp	r3, r2
   1dc4a:	d045      	beq.n	1dcd8 <gnss_interface_read+0x170>
   1dc4c:	f244 0203 	movw	r2, #16387	; 0x4003
   1dc50:	4293      	cmp	r3, r2
   1dc52:	f040 8184 	bne.w	1df5e <gnss_interface_read+0x3f6>
   1dc56:	2203      	movs	r2, #3
   1dc58:	2414      	movs	r4, #20
   1dc5a:	9b08      	ldr	r3, [sp, #32]
   1dc5c:	7032      	strb	r2, [r6, #0]
   1dc5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1dc60:	60b3      	str	r3, [r6, #8]
   1dc62:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1dc66:	e9c6 2303 	strd	r2, r3, [r6, #12]
   1dc6a:	f8db 0000 	ldr.w	r0, [fp]
   1dc6e:	6803      	ldr	r3, [r0, #0]
   1dc70:	68db      	ldr	r3, [r3, #12]
   1dc72:	4798      	blx	r3
   1dc74:	2800      	cmp	r0, #0
   1dc76:	ddbe      	ble.n	1dbf6 <gnss_interface_read+0x8e>
   1dc78:	4620      	mov	r0, r4
   1dc7a:	682b      	ldr	r3, [r5, #0]
   1dc7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1dc80:	602b      	str	r3, [r5, #0]
   1dc82:	b037      	add	sp, #220	; 0xdc
   1dc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc88:	783b      	ldrb	r3, [r7, #0]
   1dc8a:	4604      	mov	r4, r0
   1dc8c:	2b00      	cmp	r3, #0
   1dc8e:	d19f      	bne.n	1dbd0 <gnss_interface_read+0x68>
   1dc90:	e7c8      	b.n	1dc24 <gnss_interface_read+0xbc>
   1dc92:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   1dc96:	d183      	bne.n	1dba0 <gnss_interface_read+0x38>
   1dc98:	202d      	movs	r0, #45	; 0x2d
   1dc9a:	f7f8 ff91 	bl	16bc0 <bsd_os_errno_set>
   1dc9e:	f04f 34ff 	mov.w	r4, #4294967295
   1dca2:	e7a8      	b.n	1dbf6 <gnss_interface_read+0x8e>
   1dca4:	a808      	add	r0, sp, #32
   1dca6:	f008 fdf9 	bl	2689c <strlen>
   1dcaa:	2302      	movs	r3, #2
   1dcac:	1c44      	adds	r4, r0, #1
   1dcae:	b2a4      	uxth	r4, r4
   1dcb0:	f806 3b08 	strb.w	r3, [r6], #8
   1dcb4:	4622      	mov	r2, r4
   1dcb6:	a908      	add	r1, sp, #32
   1dcb8:	4630      	mov	r0, r6
   1dcba:	f7ee ff47 	bl	cb4c <memcpy>
   1dcbe:	3408      	adds	r4, #8
   1dcc0:	e7d3      	b.n	1dc6a <gnss_interface_read+0x102>
   1dcc2:	bf00      	nop
   1dcc4:	49765443 	.word	0x49765443
   1dcc8:	20021ab0 	.word	0x20021ab0
   1dccc:	20026278 	.word	0x20026278
   1dcd0:	20021ab8 	.word	0x20021ab8
   1dcd4:	200204c4 	.word	0x200204c4
   1dcd8:	2401      	movs	r4, #1
   1dcda:	a809      	add	r0, sp, #36	; 0x24
   1dcdc:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   1dcde:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1dce2:	e9c6 2304 	strd	r2, r3, [r6, #16]
   1dce6:	990d      	ldr	r1, [sp, #52]	; 0x34
   1dce8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1dcea:	7034      	strb	r4, [r6, #0]
   1dcec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1dcee:	61b1      	str	r1, [r6, #24]
   1dcf0:	9910      	ldr	r1, [sp, #64]	; 0x40
   1dcf2:	61f2      	str	r2, [r6, #28]
   1dcf4:	6233      	str	r3, [r6, #32]
   1dcf6:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   1dcfa:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   1dcfe:	6271      	str	r1, [r6, #36]	; 0x24
   1dd00:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   1dd04:	f886 2044 	strb.w	r2, [r6, #68]	; 0x44
   1dd08:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   1dd0c:	6373      	str	r3, [r6, #52]	; 0x34
   1dd0e:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   1dd12:	63b1      	str	r1, [r6, #56]	; 0x38
   1dd14:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   1dd18:	63f2      	str	r2, [r6, #60]	; 0x3c
   1dd1a:	6433      	str	r3, [r6, #64]	; 0x40
   1dd1c:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   1dd20:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1dd24:	8531      	strh	r1, [r6, #40]	; 0x28
   1dd26:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
   1dd2a:	f8c6 202a 	str.w	r2, [r6, #42]	; 0x2a
   1dd2e:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1dd32:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   1dd36:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1dd38:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   1dd3c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   1dd40:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   1dd44:	f3c3 210f 	ubfx	r1, r3, #8, #16
   1dd48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1dd4a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   1dd4e:	8630      	strh	r0, [r6, #48]	; 0x30
   1dd50:	f8a6 104a 	strh.w	r1, [r6, #74]	; 0x4a
   1dd54:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   1dd58:	f3c3 230f 	ubfx	r3, r3, #8, #16
   1dd5c:	f8a6 2056 	strh.w	r2, [r6, #86]	; 0x56
   1dd60:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   1dd64:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
   1dd68:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   1dd6c:	f8a6 1046 	strh.w	r1, [r6, #70]	; 0x46
   1dd70:	f886 2048 	strb.w	r2, [r6, #72]	; 0x48
   1dd74:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   1dd78:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1dd7c:	64f3      	str	r3, [r6, #76]	; 0x4c
   1dd7e:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   1dd82:	f886 1050 	strb.w	r1, [r6, #80]	; 0x50
   1dd86:	f8a6 2052 	strh.w	r2, [r6, #82]	; 0x52
   1dd8a:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
   1dd8e:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   1dd92:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   1dd96:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   1dd9a:	65b1      	str	r1, [r6, #88]	; 0x58
   1dd9c:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
   1dda0:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   1dda4:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   1dda8:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
   1ddac:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   1ddb0:	f886 1060 	strb.w	r1, [r6, #96]	; 0x60
   1ddb4:	6672      	str	r2, [r6, #100]	; 0x64
   1ddb6:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
   1ddba:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   1ddbe:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   1ddc2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1ddc4:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   1ddc8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1ddcc:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   1ddd0:	f3c2 220f 	ubfx	r2, r2, #8, #16
   1ddd4:	f8a6 106e 	strh.w	r1, [r6, #110]	; 0x6e
   1ddd8:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   1dddc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1dde0:	f8a6 207a 	strh.w	r2, [r6, #122]	; 0x7a
   1dde4:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   1dde8:	f8a6 3086 	strh.w	r3, [r6, #134]	; 0x86
   1ddec:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   1ddf0:	f8a6 106a 	strh.w	r1, [r6, #106]	; 0x6a
   1ddf4:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
   1ddf8:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   1ddfc:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   1de00:	6733      	str	r3, [r6, #112]	; 0x70
   1de02:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   1de06:	f886 1074 	strb.w	r1, [r6, #116]	; 0x74
   1de0a:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
   1de0e:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
   1de12:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   1de16:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   1de1a:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   1de1e:	67f1      	str	r1, [r6, #124]	; 0x7c
   1de20:	f886 2080 	strb.w	r2, [r6, #128]	; 0x80
   1de24:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   1de28:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   1de2c:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
   1de30:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   1de34:	f886 1084 	strb.w	r1, [r6, #132]	; 0x84
   1de38:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
   1de3c:	f886 308c 	strb.w	r3, [r6, #140]	; 0x8c
   1de40:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   1de44:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1de46:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   1de4a:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   1de4e:	f3c3 210f 	ubfx	r1, r3, #8, #16
   1de52:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1de54:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   1de58:	f8a6 1092 	strh.w	r1, [r6, #146]	; 0x92
   1de5c:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   1de60:	f8a6 209e 	strh.w	r2, [r6, #158]	; 0x9e
   1de64:	f3c3 230f 	ubfx	r3, r3, #8, #16
   1de68:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   1de6c:	f8a6 008e 	strh.w	r0, [r6, #142]	; 0x8e
   1de70:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
   1de74:	f886 1090 	strb.w	r1, [r6, #144]	; 0x90
   1de78:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   1de7c:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   1de80:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
   1de84:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   1de88:	f886 3098 	strb.w	r3, [r6, #152]	; 0x98
   1de8c:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   1de90:	f8a6 109a 	strh.w	r1, [r6, #154]	; 0x9a
   1de94:	f886 209c 	strb.w	r2, [r6, #156]	; 0x9c
   1de98:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   1de9c:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   1dea0:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
   1dea4:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   1dea8:	f886 10a4 	strb.w	r1, [r6, #164]	; 0xa4
   1deac:	f8a6 20a6 	strh.w	r2, [r6, #166]	; 0xa6
   1deb0:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   1deb4:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   1deb8:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   1debc:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   1dec0:	f8c6 10ac 	str.w	r1, [r6, #172]	; 0xac
   1dec4:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
   1dec8:	f8a6 30b2 	strh.w	r3, [r6, #178]	; 0xb2
   1decc:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   1ded0:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   1ded4:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   1ded8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   1deda:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1dede:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   1dee2:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   1dee6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1deea:	f3c2 220f 	ubfx	r2, r2, #8, #16
   1deee:	f8a6 10b6 	strh.w	r1, [r6, #182]	; 0xb6
   1def2:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
   1def6:	f886 40b4 	strb.w	r4, [r6, #180]	; 0xb4
   1defa:	f8a6 20c2 	strh.w	r2, [r6, #194]	; 0xc2
   1defe:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   1df02:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   1df06:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   1df0a:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   1df0e:	f886 10bc 	strb.w	r1, [r6, #188]	; 0xbc
   1df12:	f8a6 20be 	strh.w	r2, [r6, #190]	; 0xbe
   1df16:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
   1df1a:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
   1df1e:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   1df22:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   1df26:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   1df2a:	f8c6 10c4 	str.w	r1, [r6, #196]	; 0xc4
   1df2e:	f886 20c8 	strb.w	r2, [r6, #200]	; 0xc8
   1df32:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   1df36:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   1df3a:	f8a6 30ca 	strh.w	r3, [r6, #202]	; 0xca
   1df3e:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   1df42:	f886 10cc 	strb.w	r1, [r6, #204]	; 0xcc
   1df46:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
   1df4a:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
   1df4e:	24d8      	movs	r4, #216	; 0xd8
   1df50:	e68b      	b.n	1dc6a <gnss_interface_read+0x102>
   1df52:	2039      	movs	r0, #57	; 0x39
   1df54:	f7f8 fe34 	bl	16bc0 <bsd_os_errno_set>
   1df58:	f04f 34ff 	mov.w	r4, #4294967295
   1df5c:	e64b      	b.n	1dbf6 <gnss_interface_read+0x8e>
   1df5e:	2016      	movs	r0, #22
   1df60:	f7f8 fe2e 	bl	16bc0 <bsd_os_errno_set>
   1df64:	f04f 34ff 	mov.w	r4, #4294967295
   1df68:	e645      	b.n	1dbf6 <gnss_interface_read+0x8e>
   1df6a:	2009      	movs	r0, #9
   1df6c:	f7f8 fe28 	bl	16bc0 <bsd_os_errno_set>
   1df70:	f04f 34ff 	mov.w	r4, #4294967295
   1df74:	e63f      	b.n	1dbf6 <gnss_interface_read+0x8e>
   1df76:	bf00      	nop

0001df78 <gnss_interface_setopt>:
   1df78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df7c:	4db9      	ldr	r5, [pc, #740]	; (1e264 <gnss_interface_setopt+0x2ec>)
   1df7e:	b087      	sub	sp, #28
   1df80:	682c      	ldr	r4, [r5, #0]
   1df82:	4690      	mov	r8, r2
   1df84:	b2a4      	uxth	r4, r4
   1df86:	2c02      	cmp	r4, #2
   1df88:	d00c      	beq.n	1dfa4 <gnss_interface_setopt+0x2c>
   1df8a:	2a08      	cmp	r2, #8
   1df8c:	d00a      	beq.n	1dfa4 <gnss_interface_setopt+0x2c>
   1df8e:	3a0a      	subs	r2, #10
   1df90:	2a01      	cmp	r2, #1
   1df92:	d907      	bls.n	1dfa4 <gnss_interface_setopt+0x2c>
   1df94:	200e      	movs	r0, #14
   1df96:	f7f8 fe13 	bl	16bc0 <bsd_os_errno_set>
   1df9a:	f04f 30ff 	mov.w	r0, #4294967295
   1df9e:	b007      	add	sp, #28
   1dfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dfa4:	682a      	ldr	r2, [r5, #0]
   1dfa6:	0252      	lsls	r2, r2, #9
   1dfa8:	f100 8155 	bmi.w	1e256 <gnss_interface_setopt+0x2de>
   1dfac:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1dfb0:	f040 8145 	bne.w	1e23e <gnss_interface_setopt+0x2c6>
   1dfb4:	4aac      	ldr	r2, [pc, #688]	; (1e268 <gnss_interface_setopt+0x2f0>)
   1dfb6:	4290      	cmp	r0, r2
   1dfb8:	f040 8147 	bne.w	1e24a <gnss_interface_setopt+0x2d2>
   1dfbc:	f1a8 020a 	sub.w	r2, r8, #10
   1dfc0:	2a01      	cmp	r2, #1
   1dfc2:	d902      	bls.n	1dfca <gnss_interface_setopt+0x52>
   1dfc4:	2b00      	cmp	r3, #0
   1dfc6:	f000 811e 	beq.w	1e206 <gnss_interface_setopt+0x28e>
   1dfca:	f108 32ff 	add.w	r2, r8, #4294967295
   1dfce:	2a0a      	cmp	r2, #10
   1dfd0:	f200 8119 	bhi.w	1e206 <gnss_interface_setopt+0x28e>
   1dfd4:	e8df f012 	tbh	[pc, r2, lsl #1]
   1dfd8:	00950088 	.word	0x00950088
   1dfdc:	00ab00a1 	.word	0x00ab00a1
   1dfe0:	00c200b7 	.word	0x00c200b7
   1dfe4:	00e600ce 	.word	0x00e600ce
   1dfe8:	010800fc 	.word	0x010800fc
   1dfec:	000b      	.short	0x000b
   1dfee:	682b      	ldr	r3, [r5, #0]
   1dff0:	b29b      	uxth	r3, r3
   1dff2:	2b04      	cmp	r3, #4
   1dff4:	d1ce      	bne.n	1df94 <gnss_interface_setopt+0x1c>
   1dff6:	2203      	movs	r2, #3
   1dff8:	f241 0604 	movw	r6, #4100	; 0x1004
   1dffc:	2300      	movs	r3, #0
   1dffe:	4637      	mov	r7, r6
   1e000:	f88d 2008 	strb.w	r2, [sp, #8]
   1e004:	f88d 3009 	strb.w	r3, [sp, #9]
   1e008:	f88d 300a 	strb.w	r3, [sp, #10]
   1e00c:	f88d 300b 	strb.w	r3, [sp, #11]
   1e010:	f88d 300c 	strb.w	r3, [sp, #12]
   1e014:	682b      	ldr	r3, [r5, #0]
   1e016:	2112      	movs	r1, #18
   1e018:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1e01c:	4668      	mov	r0, sp
   1e01e:	602b      	str	r3, [r5, #0]
   1e020:	f002 faf4 	bl	2060c <rpc_gnss_client_request_alloc>
   1e024:	4604      	mov	r4, r0
   1e026:	9800      	ldr	r0, [sp, #0]
   1e028:	2c00      	cmp	r4, #0
   1e02a:	f040 80f2 	bne.w	1e212 <gnss_interface_setopt+0x29a>
   1e02e:	2800      	cmp	r0, #0
   1e030:	f000 80f6 	beq.w	1e220 <gnss_interface_setopt+0x2a8>
   1e034:	2212      	movs	r2, #18
   1e036:	f04f 0976 	mov.w	r9, #118	; 0x76
   1e03a:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1e03e:	f04f 0b43 	mov.w	fp, #67	; 0x43
   1e042:	f04f 0a54 	mov.w	sl, #84	; 0x54
   1e046:	f8df c22c 	ldr.w	ip, [pc, #556]	; 1e274 <gnss_interface_setopt+0x2fc>
   1e04a:	a906      	add	r1, sp, #24
   1e04c:	f8bc 3000 	ldrh.w	r3, [ip]
   1e050:	f880 900e 	strb.w	r9, [r0, #14]
   1e054:	3301      	adds	r3, #1
   1e056:	b29b      	uxth	r3, r3
   1e058:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   1e05c:	f841 6d14 	str.w	r6, [r1, #-20]!
   1e060:	7144      	strb	r4, [r0, #5]
   1e062:	7184      	strb	r4, [r0, #6]
   1e064:	71c4      	strb	r4, [r0, #7]
   1e066:	7204      	strb	r4, [r0, #8]
   1e068:	7244      	strb	r4, [r0, #9]
   1e06a:	7284      	strb	r4, [r0, #10]
   1e06c:	72c4      	strb	r4, [r0, #11]
   1e06e:	7102      	strb	r2, [r0, #4]
   1e070:	f880 b00c 	strb.w	fp, [r0, #12]
   1e074:	f880 a00d 	strb.w	sl, [r0, #13]
   1e078:	f880 e00f 	strb.w	lr, [r0, #15]
   1e07c:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 1e278 <gnss_interface_setopt+0x300>
   1e080:	6800      	ldr	r0, [r0, #0]
   1e082:	f8ac 3000 	strh.w	r3, [ip]
   1e086:	f7ee fd61 	bl	cb4c <memcpy>
   1e08a:	4639      	mov	r1, r7
   1e08c:	9800      	ldr	r0, [sp, #0]
   1e08e:	f8c9 4000 	str.w	r4, [r9]
   1e092:	f002 facf 	bl	20634 <rpc_gnss_client_request_send>
   1e096:	2800      	cmp	r0, #0
   1e098:	f040 80c7 	bne.w	1e22a <gnss_interface_setopt+0x2b2>
   1e09c:	4f73      	ldr	r7, [pc, #460]	; (1e26c <gnss_interface_setopt+0x2f4>)
   1e09e:	4e72      	ldr	r6, [pc, #456]	; (1e268 <gnss_interface_setopt+0x2f0>)
   1e0a0:	4639      	mov	r1, r7
   1e0a2:	4630      	mov	r0, r6
   1e0a4:	f7f8 fcd4 	bl	16a50 <bsd_os_timedwait>
   1e0a8:	682c      	ldr	r4, [r5, #0]
   1e0aa:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   1e0ae:	d1f7      	bne.n	1e0a0 <gnss_interface_setopt+0x128>
   1e0b0:	f8d9 0000 	ldr.w	r0, [r9]
   1e0b4:	b118      	cbz	r0, 1e0be <gnss_interface_setopt+0x146>
   1e0b6:	f002 fadb 	bl	20670 <rpc_gnss_client_data_free>
   1e0ba:	f8c9 4000 	str.w	r4, [r9]
   1e0be:	682b      	ldr	r3, [r5, #0]
   1e0c0:	021b      	lsls	r3, r3, #8
   1e0c2:	f140 8098 	bpl.w	1e1f6 <gnss_interface_setopt+0x27e>
   1e0c6:	f1b8 0f08 	cmp.w	r8, #8
   1e0ca:	f040 809a 	bne.w	1e202 <gnss_interface_setopt+0x28a>
   1e0ce:	4b68      	ldr	r3, [pc, #416]	; (1e270 <gnss_interface_setopt+0x2f8>)
   1e0d0:	6818      	ldr	r0, [r3, #0]
   1e0d2:	6803      	ldr	r3, [r0, #0]
   1e0d4:	691b      	ldr	r3, [r3, #16]
   1e0d6:	4798      	blx	r3
   1e0d8:	2000      	movs	r0, #0
   1e0da:	682b      	ldr	r3, [r5, #0]
   1e0dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1e0e0:	602b      	str	r3, [r5, #0]
   1e0e2:	b007      	add	sp, #28
   1e0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e0ea:	2a02      	cmp	r2, #2
   1e0ec:	f040 808b 	bne.w	1e206 <gnss_interface_setopt+0x28e>
   1e0f0:	2208      	movs	r2, #8
   1e0f2:	f241 1603 	movw	r6, #4355	; 0x1103
   1e0f6:	881b      	ldrh	r3, [r3, #0]
   1e0f8:	9202      	str	r2, [sp, #8]
   1e0fa:	f8ad 300f 	strh.w	r3, [sp, #15]
   1e0fe:	4637      	mov	r7, r6
   1e100:	e788      	b.n	1e014 <gnss_interface_setopt+0x9c>
   1e102:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e104:	2a02      	cmp	r2, #2
   1e106:	d17e      	bne.n	1e206 <gnss_interface_setopt+0x28e>
   1e108:	2210      	movs	r2, #16
   1e10a:	f241 1603 	movw	r6, #4355	; 0x1103
   1e10e:	881b      	ldrh	r3, [r3, #0]
   1e110:	9202      	str	r2, [sp, #8]
   1e112:	f8ad 3011 	strh.w	r3, [sp, #17]
   1e116:	4637      	mov	r7, r6
   1e118:	e77c      	b.n	1e014 <gnss_interface_setopt+0x9c>
   1e11a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e11c:	2a01      	cmp	r2, #1
   1e11e:	d172      	bne.n	1e206 <gnss_interface_setopt+0x28e>
   1e120:	781b      	ldrb	r3, [r3, #0]
   1e122:	2b01      	cmp	r3, #1
   1e124:	d16f      	bne.n	1e206 <gnss_interface_setopt+0x28e>
   1e126:	f241 1603 	movw	r6, #4355	; 0x1103
   1e12a:	4637      	mov	r7, r6
   1e12c:	e772      	b.n	1e014 <gnss_interface_setopt+0x9c>
   1e12e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e130:	2a02      	cmp	r2, #2
   1e132:	d168      	bne.n	1e206 <gnss_interface_setopt+0x28e>
   1e134:	2220      	movs	r2, #32
   1e136:	f241 1603 	movw	r6, #4355	; 0x1103
   1e13a:	881b      	ldrh	r3, [r3, #0]
   1e13c:	9202      	str	r2, [sp, #8]
   1e13e:	f8ad 3013 	strh.w	r3, [sp, #19]
   1e142:	4637      	mov	r7, r6
   1e144:	e766      	b.n	1e014 <gnss_interface_setopt+0x9c>
   1e146:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e148:	2a01      	cmp	r2, #1
   1e14a:	d15c      	bne.n	1e206 <gnss_interface_setopt+0x28e>
   1e14c:	f241 1603 	movw	r6, #4355	; 0x1103
   1e150:	781b      	ldrb	r3, [r3, #0]
   1e152:	9202      	str	r2, [sp, #8]
   1e154:	f88d 300c 	strb.w	r3, [sp, #12]
   1e158:	4637      	mov	r7, r6
   1e15a:	e75b      	b.n	1e014 <gnss_interface_setopt+0x9c>
   1e15c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e15e:	2a01      	cmp	r2, #1
   1e160:	d151      	bne.n	1e206 <gnss_interface_setopt+0x28e>
   1e162:	2202      	movs	r2, #2
   1e164:	f241 1603 	movw	r6, #4355	; 0x1103
   1e168:	781b      	ldrb	r3, [r3, #0]
   1e16a:	9202      	str	r2, [sp, #8]
   1e16c:	f88d 300d 	strb.w	r3, [sp, #13]
   1e170:	4637      	mov	r7, r6
   1e172:	e74f      	b.n	1e014 <gnss_interface_setopt+0x9c>
   1e174:	682a      	ldr	r2, [r5, #0]
   1e176:	b292      	uxth	r2, r2
   1e178:	2a02      	cmp	r2, #2
   1e17a:	f47f af0b 	bne.w	1df94 <gnss_interface_setopt+0x1c>
   1e17e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e180:	2a04      	cmp	r2, #4
   1e182:	d140      	bne.n	1e206 <gnss_interface_setopt+0x28e>
   1e184:	2101      	movs	r1, #1
   1e186:	f241 0604 	movw	r6, #4100	; 0x1004
   1e18a:	682a      	ldr	r2, [r5, #0]
   1e18c:	6818      	ldr	r0, [r3, #0]
   1e18e:	0c13      	lsrs	r3, r2, #16
   1e190:	041b      	lsls	r3, r3, #16
   1e192:	f043 0303 	orr.w	r3, r3, #3
   1e196:	f8cd 0009 	str.w	r0, [sp, #9]
   1e19a:	602b      	str	r3, [r5, #0]
   1e19c:	f88d 1008 	strb.w	r1, [sp, #8]
   1e1a0:	4637      	mov	r7, r6
   1e1a2:	e737      	b.n	1e014 <gnss_interface_setopt+0x9c>
   1e1a4:	682a      	ldr	r2, [r5, #0]
   1e1a6:	b292      	uxth	r2, r2
   1e1a8:	2a04      	cmp	r2, #4
   1e1aa:	d004      	beq.n	1e1b6 <gnss_interface_setopt+0x23e>
   1e1ac:	682a      	ldr	r2, [r5, #0]
   1e1ae:	b292      	uxth	r2, r2
   1e1b0:	2a02      	cmp	r2, #2
   1e1b2:	f47f aeef 	bne.w	1df94 <gnss_interface_setopt+0x1c>
   1e1b6:	2200      	movs	r2, #0
   1e1b8:	f88d 2008 	strb.w	r2, [sp, #8]
   1e1bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e1be:	2a04      	cmp	r2, #4
   1e1c0:	d121      	bne.n	1e206 <gnss_interface_setopt+0x28e>
   1e1c2:	f241 0604 	movw	r6, #4100	; 0x1004
   1e1c6:	681b      	ldr	r3, [r3, #0]
   1e1c8:	4637      	mov	r7, r6
   1e1ca:	f8cd 3009 	str.w	r3, [sp, #9]
   1e1ce:	e721      	b.n	1e014 <gnss_interface_setopt+0x9c>
   1e1d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e1d2:	2a01      	cmp	r2, #1
   1e1d4:	d117      	bne.n	1e206 <gnss_interface_setopt+0x28e>
   1e1d6:	2240      	movs	r2, #64	; 0x40
   1e1d8:	f241 1603 	movw	r6, #4355	; 0x1103
   1e1dc:	781b      	ldrb	r3, [r3, #0]
   1e1de:	9202      	str	r2, [sp, #8]
   1e1e0:	f88d 3015 	strb.w	r3, [sp, #21]
   1e1e4:	4637      	mov	r7, r6
   1e1e6:	e715      	b.n	1e014 <gnss_interface_setopt+0x9c>
   1e1e8:	682b      	ldr	r3, [r5, #0]
   1e1ea:	b29b      	uxth	r3, r3
   1e1ec:	2b04      	cmp	r3, #4
   1e1ee:	f47f aed1 	bne.w	1df94 <gnss_interface_setopt+0x1c>
   1e1f2:	2202      	movs	r2, #2
   1e1f4:	e700      	b.n	1dff8 <gnss_interface_setopt+0x80>
   1e1f6:	200e      	movs	r0, #14
   1e1f8:	f7f8 fce2 	bl	16bc0 <bsd_os_errno_set>
   1e1fc:	f04f 30ff 	mov.w	r0, #4294967295
   1e200:	e76b      	b.n	1e0da <gnss_interface_setopt+0x162>
   1e202:	2000      	movs	r0, #0
   1e204:	e769      	b.n	1e0da <gnss_interface_setopt+0x162>
   1e206:	2016      	movs	r0, #22
   1e208:	f7f8 fcda 	bl	16bc0 <bsd_os_errno_set>
   1e20c:	f04f 30ff 	mov.w	r0, #4294967295
   1e210:	e6c5      	b.n	1df9e <gnss_interface_setopt+0x26>
   1e212:	b128      	cbz	r0, 1e220 <gnss_interface_setopt+0x2a8>
   1e214:	6803      	ldr	r3, [r0, #0]
   1e216:	b11b      	cbz	r3, 1e220 <gnss_interface_setopt+0x2a8>
   1e218:	4618      	mov	r0, r3
   1e21a:	f002 fa29 	bl	20670 <rpc_gnss_client_data_free>
   1e21e:	9800      	ldr	r0, [sp, #0]
   1e220:	f002 fa1e 	bl	20660 <rpc_gnss_client_message_free>
   1e224:	2023      	movs	r0, #35	; 0x23
   1e226:	f7f8 fccb 	bl	16bc0 <bsd_os_errno_set>
   1e22a:	682b      	ldr	r3, [r5, #0]
   1e22c:	200e      	movs	r0, #14
   1e22e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1e232:	602b      	str	r3, [r5, #0]
   1e234:	f7f8 fcc4 	bl	16bc0 <bsd_os_errno_set>
   1e238:	f04f 30ff 	mov.w	r0, #4294967295
   1e23c:	e6af      	b.n	1df9e <gnss_interface_setopt+0x26>
   1e23e:	202a      	movs	r0, #42	; 0x2a
   1e240:	f7f8 fcbe 	bl	16bc0 <bsd_os_errno_set>
   1e244:	f04f 30ff 	mov.w	r0, #4294967295
   1e248:	e6a9      	b.n	1df9e <gnss_interface_setopt+0x26>
   1e24a:	2009      	movs	r0, #9
   1e24c:	f7f8 fcb8 	bl	16bc0 <bsd_os_errno_set>
   1e250:	f04f 30ff 	mov.w	r0, #4294967295
   1e254:	e6a3      	b.n	1df9e <gnss_interface_setopt+0x26>
   1e256:	2073      	movs	r0, #115	; 0x73
   1e258:	f7f8 fcb2 	bl	16bc0 <bsd_os_errno_set>
   1e25c:	f04f 30ff 	mov.w	r0, #4294967295
   1e260:	e69d      	b.n	1df9e <gnss_interface_setopt+0x26>
   1e262:	bf00      	nop
   1e264:	20021ab0 	.word	0x20021ab0
   1e268:	49765443 	.word	0x49765443
   1e26c:	200204c4 	.word	0x200204c4
   1e270:	20021ab8 	.word	0x20021ab8
   1e274:	200242a6 	.word	0x200242a6
   1e278:	20021ab4 	.word	0x20021ab4

0001e27c <gnss_interface_getopt>:
   1e27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e280:	4c81      	ldr	r4, [pc, #516]	; (1e488 <gnss_interface_getopt+0x20c>)
   1e282:	b087      	sub	sp, #28
   1e284:	6825      	ldr	r5, [r4, #0]
   1e286:	4698      	mov	r8, r3
   1e288:	b2ad      	uxth	r5, r5
   1e28a:	2d02      	cmp	r5, #2
   1e28c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e28e:	f040 80dd 	bne.w	1e44c <gnss_interface_getopt+0x1d0>
   1e292:	6825      	ldr	r5, [r4, #0]
   1e294:	03ee      	lsls	r6, r5, #15
   1e296:	f100 80eb 	bmi.w	1e470 <gnss_interface_getopt+0x1f4>
   1e29a:	6825      	ldr	r5, [r4, #0]
   1e29c:	01ed      	lsls	r5, r5, #7
   1e29e:	f100 80ed 	bmi.w	1e47c <gnss_interface_getopt+0x200>
   1e2a2:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1e2a6:	f040 80d7 	bne.w	1e458 <gnss_interface_getopt+0x1dc>
   1e2aa:	4978      	ldr	r1, [pc, #480]	; (1e48c <gnss_interface_getopt+0x210>)
   1e2ac:	4288      	cmp	r0, r1
   1e2ae:	f040 80d9 	bne.w	1e464 <gnss_interface_getopt+0x1e8>
   1e2b2:	f1b8 0f00 	cmp.w	r8, #0
   1e2b6:	d00b      	beq.n	1e2d0 <gnss_interface_getopt+0x54>
   1e2b8:	b153      	cbz	r3, 1e2d0 <gnss_interface_getopt+0x54>
   1e2ba:	1e57      	subs	r7, r2, #1
   1e2bc:	2f05      	cmp	r7, #5
   1e2be:	d807      	bhi.n	1e2d0 <gnss_interface_getopt+0x54>
   1e2c0:	e8df f007 	tbb	[pc, r7]
   1e2c4:	0f030f0f 	.word	0x0f030f0f
   1e2c8:	0303      	.short	0x0303
   1e2ca:	681b      	ldr	r3, [r3, #0]
   1e2cc:	2b01      	cmp	r3, #1
   1e2ce:	d00b      	beq.n	1e2e8 <gnss_interface_getopt+0x6c>
   1e2d0:	2016      	movs	r0, #22
   1e2d2:	f7f8 fc75 	bl	16bc0 <bsd_os_errno_set>
   1e2d6:	f04f 35ff 	mov.w	r5, #4294967295
   1e2da:	4628      	mov	r0, r5
   1e2dc:	b007      	add	sp, #28
   1e2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e2e2:	681b      	ldr	r3, [r3, #0]
   1e2e4:	2b02      	cmp	r3, #2
   1e2e6:	d1f3      	bne.n	1e2d0 <gnss_interface_getopt+0x54>
   1e2e8:	6823      	ldr	r3, [r4, #0]
   1e2ea:	2212      	movs	r2, #18
   1e2ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1e2f0:	2100      	movs	r1, #0
   1e2f2:	a801      	add	r0, sp, #4
   1e2f4:	6023      	str	r3, [r4, #0]
   1e2f6:	f007 fec1 	bl	2607c <memset>
   1e2fa:	2112      	movs	r1, #18
   1e2fc:	4668      	mov	r0, sp
   1e2fe:	f002 f985 	bl	2060c <rpc_gnss_client_request_alloc>
   1e302:	4605      	mov	r5, r0
   1e304:	9800      	ldr	r0, [sp, #0]
   1e306:	2d00      	cmp	r5, #0
   1e308:	f040 808a 	bne.w	1e420 <gnss_interface_getopt+0x1a4>
   1e30c:	2800      	cmp	r0, #0
   1e30e:	f000 808e 	beq.w	1e42e <gnss_interface_getopt+0x1b2>
   1e312:	f241 1602 	movw	r6, #4354	; 0x1102
   1e316:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1e31a:	2212      	movs	r2, #18
   1e31c:	f04f 0976 	mov.w	r9, #118	; 0x76
   1e320:	f04f 0b43 	mov.w	fp, #67	; 0x43
   1e324:	f04f 0a54 	mov.w	sl, #84	; 0x54
   1e328:	f8df c168 	ldr.w	ip, [pc, #360]	; 1e494 <gnss_interface_getopt+0x218>
   1e32c:	f880 e00f 	strb.w	lr, [r0, #15]
   1e330:	f8bc 3000 	ldrh.w	r3, [ip]
   1e334:	f880 900e 	strb.w	r9, [r0, #14]
   1e338:	3301      	adds	r3, #1
   1e33a:	b29b      	uxth	r3, r3
   1e33c:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   1e340:	f8cd e004 	str.w	lr, [sp, #4]
   1e344:	7145      	strb	r5, [r0, #5]
   1e346:	7185      	strb	r5, [r0, #6]
   1e348:	71c5      	strb	r5, [r0, #7]
   1e34a:	7205      	strb	r5, [r0, #8]
   1e34c:	7245      	strb	r5, [r0, #9]
   1e34e:	7285      	strb	r5, [r0, #10]
   1e350:	72c5      	strb	r5, [r0, #11]
   1e352:	a901      	add	r1, sp, #4
   1e354:	7102      	strb	r2, [r0, #4]
   1e356:	f880 b00c 	strb.w	fp, [r0, #12]
   1e35a:	f880 a00d 	strb.w	sl, [r0, #13]
   1e35e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 1e498 <gnss_interface_getopt+0x21c>
   1e362:	6800      	ldr	r0, [r0, #0]
   1e364:	f8ac 3000 	strh.w	r3, [ip]
   1e368:	f7ee fbf0 	bl	cb4c <memcpy>
   1e36c:	4631      	mov	r1, r6
   1e36e:	9800      	ldr	r0, [sp, #0]
   1e370:	f8c9 5000 	str.w	r5, [r9]
   1e374:	f002 f95e 	bl	20634 <rpc_gnss_client_request_send>
   1e378:	2800      	cmp	r0, #0
   1e37a:	d15d      	bne.n	1e438 <gnss_interface_getopt+0x1bc>
   1e37c:	4e44      	ldr	r6, [pc, #272]	; (1e490 <gnss_interface_getopt+0x214>)
   1e37e:	4d43      	ldr	r5, [pc, #268]	; (1e48c <gnss_interface_getopt+0x210>)
   1e380:	4631      	mov	r1, r6
   1e382:	4628      	mov	r0, r5
   1e384:	f7f8 fb64 	bl	16a50 <bsd_os_timedwait>
   1e388:	6823      	ldr	r3, [r4, #0]
   1e38a:	01db      	lsls	r3, r3, #7
   1e38c:	d4f8      	bmi.n	1e380 <gnss_interface_getopt+0x104>
   1e38e:	f8d9 0000 	ldr.w	r0, [r9]
   1e392:	b1d8      	cbz	r0, 1e3cc <gnss_interface_getopt+0x150>
   1e394:	6825      	ldr	r5, [r4, #0]
   1e396:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   1e39a:	d00f      	beq.n	1e3bc <gnss_interface_getopt+0x140>
   1e39c:	2f05      	cmp	r7, #5
   1e39e:	d837      	bhi.n	1e410 <gnss_interface_getopt+0x194>
   1e3a0:	e8df f007 	tbb	[pc, r7]
   1e3a4:	2b26201a 	.word	0x2b26201a
   1e3a8:	0331      	.short	0x0331
   1e3aa:	2500      	movs	r5, #0
   1e3ac:	7b43      	ldrb	r3, [r0, #13]
   1e3ae:	f888 3000 	strb.w	r3, [r8]
   1e3b2:	f002 f95d 	bl	20670 <rpc_gnss_client_data_free>
   1e3b6:	2300      	movs	r3, #0
   1e3b8:	f8c9 3000 	str.w	r3, [r9]
   1e3bc:	6823      	ldr	r3, [r4, #0]
   1e3be:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1e3c2:	6023      	str	r3, [r4, #0]
   1e3c4:	4628      	mov	r0, r5
   1e3c6:	b007      	add	sp, #28
   1e3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3cc:	6823      	ldr	r3, [r4, #0]
   1e3ce:	4605      	mov	r5, r0
   1e3d0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1e3d4:	6023      	str	r3, [r4, #0]
   1e3d6:	e7f5      	b.n	1e3c4 <gnss_interface_getopt+0x148>
   1e3d8:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   1e3dc:	2500      	movs	r5, #0
   1e3de:	f8a8 3000 	strh.w	r3, [r8]
   1e3e2:	e7e6      	b.n	1e3b2 <gnss_interface_getopt+0x136>
   1e3e4:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   1e3e8:	2500      	movs	r5, #0
   1e3ea:	f8a8 3000 	strh.w	r3, [r8]
   1e3ee:	e7e0      	b.n	1e3b2 <gnss_interface_getopt+0x136>
   1e3f0:	7b83      	ldrb	r3, [r0, #14]
   1e3f2:	2500      	movs	r5, #0
   1e3f4:	f888 3000 	strb.w	r3, [r8]
   1e3f8:	e7db      	b.n	1e3b2 <gnss_interface_getopt+0x136>
   1e3fa:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   1e3fe:	2500      	movs	r5, #0
   1e400:	f8a8 3000 	strh.w	r3, [r8]
   1e404:	e7d5      	b.n	1e3b2 <gnss_interface_getopt+0x136>
   1e406:	7b03      	ldrb	r3, [r0, #12]
   1e408:	2500      	movs	r5, #0
   1e40a:	f888 3000 	strb.w	r3, [r8]
   1e40e:	e7d0      	b.n	1e3b2 <gnss_interface_getopt+0x136>
   1e410:	2016      	movs	r0, #22
   1e412:	f7f8 fbd5 	bl	16bc0 <bsd_os_errno_set>
   1e416:	f04f 35ff 	mov.w	r5, #4294967295
   1e41a:	f8d9 0000 	ldr.w	r0, [r9]
   1e41e:	e7c8      	b.n	1e3b2 <gnss_interface_getopt+0x136>
   1e420:	b128      	cbz	r0, 1e42e <gnss_interface_getopt+0x1b2>
   1e422:	6803      	ldr	r3, [r0, #0]
   1e424:	b11b      	cbz	r3, 1e42e <gnss_interface_getopt+0x1b2>
   1e426:	4618      	mov	r0, r3
   1e428:	f002 f922 	bl	20670 <rpc_gnss_client_data_free>
   1e42c:	9800      	ldr	r0, [sp, #0]
   1e42e:	f002 f917 	bl	20660 <rpc_gnss_client_message_free>
   1e432:	2023      	movs	r0, #35	; 0x23
   1e434:	f7f8 fbc4 	bl	16bc0 <bsd_os_errno_set>
   1e438:	6823      	ldr	r3, [r4, #0]
   1e43a:	200e      	movs	r0, #14
   1e43c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1e440:	6023      	str	r3, [r4, #0]
   1e442:	f04f 35ff 	mov.w	r5, #4294967295
   1e446:	f7f8 fbbb 	bl	16bc0 <bsd_os_errno_set>
   1e44a:	e746      	b.n	1e2da <gnss_interface_getopt+0x5e>
   1e44c:	200e      	movs	r0, #14
   1e44e:	f7f8 fbb7 	bl	16bc0 <bsd_os_errno_set>
   1e452:	f04f 35ff 	mov.w	r5, #4294967295
   1e456:	e740      	b.n	1e2da <gnss_interface_getopt+0x5e>
   1e458:	202a      	movs	r0, #42	; 0x2a
   1e45a:	f7f8 fbb1 	bl	16bc0 <bsd_os_errno_set>
   1e45e:	f04f 35ff 	mov.w	r5, #4294967295
   1e462:	e73a      	b.n	1e2da <gnss_interface_getopt+0x5e>
   1e464:	2009      	movs	r0, #9
   1e466:	f7f8 fbab 	bl	16bc0 <bsd_os_errno_set>
   1e46a:	f04f 35ff 	mov.w	r5, #4294967295
   1e46e:	e734      	b.n	1e2da <gnss_interface_getopt+0x5e>
   1e470:	2005      	movs	r0, #5
   1e472:	f7f8 fba5 	bl	16bc0 <bsd_os_errno_set>
   1e476:	f04f 35ff 	mov.w	r5, #4294967295
   1e47a:	e72e      	b.n	1e2da <gnss_interface_getopt+0x5e>
   1e47c:	2073      	movs	r0, #115	; 0x73
   1e47e:	f7f8 fb9f 	bl	16bc0 <bsd_os_errno_set>
   1e482:	f04f 35ff 	mov.w	r5, #4294967295
   1e486:	e728      	b.n	1e2da <gnss_interface_getopt+0x5e>
   1e488:	20021ab0 	.word	0x20021ab0
   1e48c:	49765443 	.word	0x49765443
   1e490:	200204c4 	.word	0x200204c4
   1e494:	200242a6 	.word	0x200242a6
   1e498:	20021ab4 	.word	0x20021ab4

0001e49c <gnss_interface_init>:
   1e49c:	2100      	movs	r1, #0
   1e49e:	b538      	push	{r3, r4, r5, lr}
   1e4a0:	4c0a      	ldr	r4, [pc, #40]	; (1e4cc <gnss_interface_init+0x30>)
   1e4a2:	4d0b      	ldr	r5, [pc, #44]	; (1e4d0 <gnss_interface_init+0x34>)
   1e4a4:	6822      	ldr	r2, [r4, #0]
   1e4a6:	480b      	ldr	r0, [pc, #44]	; (1e4d4 <gnss_interface_init+0x38>)
   1e4a8:	4b0b      	ldr	r3, [pc, #44]	; (1e4d8 <gnss_interface_init+0x3c>)
   1e4aa:	402a      	ands	r2, r5
   1e4ac:	6022      	str	r2, [r4, #0]
   1e4ae:	8001      	strh	r1, [r0, #0]
   1e4b0:	6019      	str	r1, [r3, #0]
   1e4b2:	f002 f8a5 	bl	20600 <rpc_gnss_client_init>
   1e4b6:	b938      	cbnz	r0, 1e4c8 <gnss_interface_init+0x2c>
   1e4b8:	2101      	movs	r1, #1
   1e4ba:	6823      	ldr	r3, [r4, #0]
   1e4bc:	4a07      	ldr	r2, [pc, #28]	; (1e4dc <gnss_interface_init+0x40>)
   1e4be:	402b      	ands	r3, r5
   1e4c0:	430b      	orrs	r3, r1
   1e4c2:	7011      	strb	r1, [r2, #0]
   1e4c4:	6023      	str	r3, [r4, #0]
   1e4c6:	bd38      	pop	{r3, r4, r5, pc}
   1e4c8:	2003      	movs	r0, #3
   1e4ca:	bd38      	pop	{r3, r4, r5, pc}
   1e4cc:	20021ab0 	.word	0x20021ab0
   1e4d0:	ffff0000 	.word	0xffff0000
   1e4d4:	200242a6 	.word	0x200242a6
   1e4d8:	20021ab4 	.word	0x20021ab4
   1e4dc:	20026278 	.word	0x20026278

0001e4e0 <gnss_interface_open>:
   1e4e0:	b510      	push	{r4, lr}
   1e4e2:	4b1c      	ldr	r3, [pc, #112]	; (1e554 <gnss_interface_open+0x74>)
   1e4e4:	781b      	ldrb	r3, [r3, #0]
   1e4e6:	b34b      	cbz	r3, 1e53c <gnss_interface_open+0x5c>
   1e4e8:	2902      	cmp	r1, #2
   1e4ea:	d121      	bne.n	1e530 <gnss_interface_open+0x50>
   1e4ec:	4c1a      	ldr	r4, [pc, #104]	; (1e558 <gnss_interface_open+0x78>)
   1e4ee:	6823      	ldr	r3, [r4, #0]
   1e4f0:	b29b      	uxth	r3, r3
   1e4f2:	2b01      	cmp	r3, #1
   1e4f4:	d116      	bne.n	1e524 <gnss_interface_open+0x44>
   1e4f6:	6823      	ldr	r3, [r4, #0]
   1e4f8:	4608      	mov	r0, r1
   1e4fa:	0c1b      	lsrs	r3, r3, #16
   1e4fc:	041b      	lsls	r3, r3, #16
   1e4fe:	f043 0302 	orr.w	r3, r3, #2
   1e502:	2200      	movs	r2, #0
   1e504:	4915      	ldr	r1, [pc, #84]	; (1e55c <gnss_interface_open+0x7c>)
   1e506:	6023      	str	r3, [r4, #0]
   1e508:	f002 f99c 	bl	20844 <packet_handler_create>
   1e50c:	4a14      	ldr	r2, [pc, #80]	; (1e560 <gnss_interface_open+0x80>)
   1e50e:	6010      	str	r0, [r2, #0]
   1e510:	b1d0      	cbz	r0, 1e548 <gnss_interface_open+0x68>
   1e512:	6823      	ldr	r3, [r4, #0]
   1e514:	6802      	ldr	r2, [r0, #0]
   1e516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1e51a:	6812      	ldr	r2, [r2, #0]
   1e51c:	6023      	str	r3, [r4, #0]
   1e51e:	4790      	blx	r2
   1e520:	4810      	ldr	r0, [pc, #64]	; (1e564 <gnss_interface_open+0x84>)
   1e522:	bd10      	pop	{r4, pc}
   1e524:	2005      	movs	r0, #5
   1e526:	f7f8 fb4b 	bl	16bc0 <bsd_os_errno_set>
   1e52a:	f04f 30ff 	mov.w	r0, #4294967295
   1e52e:	bd10      	pop	{r4, pc}
   1e530:	2029      	movs	r0, #41	; 0x29
   1e532:	f7f8 fb45 	bl	16bc0 <bsd_os_errno_set>
   1e536:	f04f 30ff 	mov.w	r0, #4294967295
   1e53a:	bd10      	pop	{r4, pc}
   1e53c:	2070      	movs	r0, #112	; 0x70
   1e53e:	f7f8 fb3f 	bl	16bc0 <bsd_os_errno_set>
   1e542:	f04f 30ff 	mov.w	r0, #4294967295
   1e546:	bd10      	pop	{r4, pc}
   1e548:	200e      	movs	r0, #14
   1e54a:	f7f8 fb39 	bl	16bc0 <bsd_os_errno_set>
   1e54e:	f04f 30ff 	mov.w	r0, #4294967295
   1e552:	bd10      	pop	{r4, pc}
   1e554:	20026278 	.word	0x20026278
   1e558:	20021ab0 	.word	0x20021ab0
   1e55c:	0001d7bd 	.word	0x0001d7bd
   1e560:	20021ab8 	.word	0x20021ab8
   1e564:	49765443 	.word	0x49765443

0001e568 <gnss_interface_close>:
   1e568:	b530      	push	{r4, r5, lr}
   1e56a:	4b15      	ldr	r3, [pc, #84]	; (1e5c0 <gnss_interface_close+0x58>)
   1e56c:	b085      	sub	sp, #20
   1e56e:	4298      	cmp	r0, r3
   1e570:	d11f      	bne.n	1e5b2 <gnss_interface_close+0x4a>
   1e572:	4c14      	ldr	r4, [pc, #80]	; (1e5c4 <gnss_interface_close+0x5c>)
   1e574:	6822      	ldr	r2, [r4, #0]
   1e576:	b292      	uxth	r2, r2
   1e578:	2a04      	cmp	r2, #4
   1e57a:	d00f      	beq.n	1e59c <gnss_interface_close+0x34>
   1e57c:	4d12      	ldr	r5, [pc, #72]	; (1e5c8 <gnss_interface_close+0x60>)
   1e57e:	6828      	ldr	r0, [r5, #0]
   1e580:	b118      	cbz	r0, 1e58a <gnss_interface_close+0x22>
   1e582:	f002 f97f 	bl	20884 <packet_handler_delete>
   1e586:	2300      	movs	r3, #0
   1e588:	602b      	str	r3, [r5, #0]
   1e58a:	2000      	movs	r0, #0
   1e58c:	6823      	ldr	r3, [r4, #0]
   1e58e:	0c1b      	lsrs	r3, r3, #16
   1e590:	041b      	lsls	r3, r3, #16
   1e592:	f043 0301 	orr.w	r3, r3, #1
   1e596:	6023      	str	r3, [r4, #0]
   1e598:	b005      	add	sp, #20
   1e59a:	bd30      	pop	{r4, r5, pc}
   1e59c:	2100      	movs	r1, #0
   1e59e:	ab04      	add	r3, sp, #16
   1e5a0:	f843 1d04 	str.w	r1, [r3, #-4]!
   1e5a4:	9200      	str	r2, [sp, #0]
   1e5a6:	f44f 7101 	mov.w	r1, #516	; 0x204
   1e5aa:	2208      	movs	r2, #8
   1e5ac:	f001 fea8 	bl	20300 <nrf_setsockopt>
   1e5b0:	e7e4      	b.n	1e57c <gnss_interface_close+0x14>
   1e5b2:	2009      	movs	r0, #9
   1e5b4:	f7f8 fb04 	bl	16bc0 <bsd_os_errno_set>
   1e5b8:	f04f 30ff 	mov.w	r0, #4294967295
   1e5bc:	e7ec      	b.n	1e598 <gnss_interface_close+0x30>
   1e5be:	bf00      	nop
   1e5c0:	49765443 	.word	0x49765443
   1e5c4:	20021ab0 	.word	0x20021ab0
   1e5c8:	20021ab8 	.word	0x20021ab8

0001e5cc <rpc_logobj_client_evt_handler>:
   1e5cc:	b120      	cbz	r0, 1e5d8 <rpc_logobj_client_evt_handler+0xc>
   1e5ce:	f850 1b08 	ldr.w	r1, [r0], #8
   1e5d2:	0c09      	lsrs	r1, r1, #16
   1e5d4:	f7fb b94e 	b.w	19874 <logobj_event_handler>
   1e5d8:	4770      	bx	lr
   1e5da:	bf00      	nop

0001e5dc <rpc_logobj_client_init>:
   1e5dc:	4801      	ldr	r0, [pc, #4]	; (1e5e4 <rpc_logobj_client_init+0x8>)
   1e5de:	f7ff b82f 	b.w	1d640 <rpc_client_register>
   1e5e2:	bf00      	nop
   1e5e4:	0002f2c4 	.word	0x0002f2c4

0001e5e8 <rpc_logobj_client_request_alloc>:
   1e5e8:	2300      	movs	r3, #0
   1e5ea:	b510      	push	{r4, lr}
   1e5ec:	b082      	sub	sp, #8
   1e5ee:	9301      	str	r3, [sp, #4]
   1e5f0:	b961      	cbnz	r1, 1e60c <rpc_logobj_client_request_alloc+0x24>
   1e5f2:	b170      	cbz	r0, 1e612 <rpc_logobj_client_request_alloc+0x2a>
   1e5f4:	4604      	mov	r4, r0
   1e5f6:	aa01      	add	r2, sp, #4
   1e5f8:	2009      	movs	r0, #9
   1e5fa:	f7ff f89b 	bl	1d734 <rpc_message_alloc>
   1e5fe:	b918      	cbnz	r0, 1e608 <rpc_logobj_client_request_alloc+0x20>
   1e600:	9b01      	ldr	r3, [sp, #4]
   1e602:	b10b      	cbz	r3, 1e608 <rpc_logobj_client_request_alloc+0x20>
   1e604:	3308      	adds	r3, #8
   1e606:	6023      	str	r3, [r4, #0]
   1e608:	b002      	add	sp, #8
   1e60a:	bd10      	pop	{r4, pc}
   1e60c:	200f      	movs	r0, #15
   1e60e:	b002      	add	sp, #8
   1e610:	bd10      	pop	{r4, pc}
   1e612:	200e      	movs	r0, #14
   1e614:	b002      	add	sp, #8
   1e616:	bd10      	pop	{r4, pc}

0001e618 <rpc_logobj_client_request_send>:
   1e618:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1e61c:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   1e620:	d10b      	bne.n	1e63a <rpc_logobj_client_request_send+0x22>
   1e622:	b160      	cbz	r0, 1e63e <rpc_logobj_client_request_send+0x26>
   1e624:	4603      	mov	r3, r0
   1e626:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1e62a:	2009      	movs	r0, #9
   1e62c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1e630:	f843 1d08 	str.w	r1, [r3, #-8]!
   1e634:	4619      	mov	r1, r3
   1e636:	f7ff b86d 	b.w	1d714 <rpc_message_send>
   1e63a:	200f      	movs	r0, #15
   1e63c:	4770      	bx	lr
   1e63e:	200e      	movs	r0, #14
   1e640:	4770      	bx	lr
   1e642:	bf00      	nop

0001e644 <rpc_logobj_client_message_free>:
   1e644:	b120      	cbz	r0, 1e650 <rpc_logobj_client_message_free+0xc>
   1e646:	f1a0 0108 	sub.w	r1, r0, #8
   1e64a:	2009      	movs	r0, #9
   1e64c:	f7ff b89e 	b.w	1d78c <rpc_message_free>
   1e650:	200e      	movs	r0, #14
   1e652:	4770      	bx	lr

0001e654 <rpc_logobj_client_data_free>:
   1e654:	b118      	cbz	r0, 1e65e <rpc_logobj_client_data_free+0xa>
   1e656:	4601      	mov	r1, r0
   1e658:	2009      	movs	r0, #9
   1e65a:	f7ff b8a3 	b.w	1d7a4 <rpc_message_data_free>
   1e65e:	200e      	movs	r0, #14
   1e660:	4770      	bx	lr
   1e662:	bf00      	nop

0001e664 <dfu_client_event_handler>:
   1e664:	f850 1b08 	ldr.w	r1, [r0], #8
   1e668:	0c09      	lsrs	r1, r1, #16
   1e66a:	f002 bec1 	b.w	213f0 <rpc_dfu_event_handler>
   1e66e:	bf00      	nop

0001e670 <rpc_dfu_client_init>:
   1e670:	4801      	ldr	r0, [pc, #4]	; (1e678 <rpc_dfu_client_init+0x8>)
   1e672:	f7fe bfe5 	b.w	1d640 <rpc_client_register>
   1e676:	bf00      	nop
   1e678:	0002f2d4 	.word	0x0002f2d4

0001e67c <rpc_dfu_client_request_alloc>:
   1e67c:	2300      	movs	r3, #0
   1e67e:	b510      	push	{r4, lr}
   1e680:	b082      	sub	sp, #8
   1e682:	9301      	str	r3, [sp, #4]
   1e684:	b158      	cbz	r0, 1e69e <rpc_dfu_client_request_alloc+0x22>
   1e686:	4604      	mov	r4, r0
   1e688:	aa01      	add	r2, sp, #4
   1e68a:	2006      	movs	r0, #6
   1e68c:	f7ff f852 	bl	1d734 <rpc_message_alloc>
   1e690:	b918      	cbnz	r0, 1e69a <rpc_dfu_client_request_alloc+0x1e>
   1e692:	9b01      	ldr	r3, [sp, #4]
   1e694:	b10b      	cbz	r3, 1e69a <rpc_dfu_client_request_alloc+0x1e>
   1e696:	3308      	adds	r3, #8
   1e698:	6023      	str	r3, [r4, #0]
   1e69a:	b002      	add	sp, #8
   1e69c:	bd10      	pop	{r4, pc}
   1e69e:	2007      	movs	r0, #7
   1e6a0:	b002      	add	sp, #8
   1e6a2:	bd10      	pop	{r4, pc}

0001e6a4 <rpc_dfu_client_request_send>:
   1e6a4:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   1e6a8:	d10b      	bne.n	1e6c2 <rpc_dfu_client_request_send+0x1e>
   1e6aa:	b160      	cbz	r0, 1e6c6 <rpc_dfu_client_request_send+0x22>
   1e6ac:	4603      	mov	r3, r0
   1e6ae:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1e6b2:	2006      	movs	r0, #6
   1e6b4:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1e6b8:	f843 1d08 	str.w	r1, [r3, #-8]!
   1e6bc:	4619      	mov	r1, r3
   1e6be:	f7ff b829 	b.w	1d714 <rpc_message_send>
   1e6c2:	200f      	movs	r0, #15
   1e6c4:	4770      	bx	lr
   1e6c6:	2007      	movs	r0, #7
   1e6c8:	4770      	bx	lr
   1e6ca:	bf00      	nop

0001e6cc <rpc_dfu_client_message_free>:
   1e6cc:	b120      	cbz	r0, 1e6d8 <rpc_dfu_client_message_free+0xc>
   1e6ce:	f1a0 0108 	sub.w	r1, r0, #8
   1e6d2:	2006      	movs	r0, #6
   1e6d4:	f7ff b85a 	b.w	1d78c <rpc_message_free>
   1e6d8:	2007      	movs	r0, #7
   1e6da:	4770      	bx	lr

0001e6dc <rpc_dfu_client_data_free>:
   1e6dc:	b118      	cbz	r0, 1e6e6 <rpc_dfu_client_data_free+0xa>
   1e6de:	4601      	mov	r1, r0
   1e6e0:	2006      	movs	r0, #6
   1e6e2:	f7ff b85f 	b.w	1d7a4 <rpc_message_data_free>
   1e6e6:	2007      	movs	r0, #7
   1e6e8:	4770      	bx	lr
   1e6ea:	bf00      	nop

0001e6ec <packet_free_cb>:
   1e6ec:	6800      	ldr	r0, [r0, #0]
   1e6ee:	f003 bbd9 	b.w	21ea4 <rpc_at_client_data_free>
   1e6f2:	bf00      	nop

0001e6f4 <at_interface_write>:
   1e6f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e6f8:	b083      	sub	sp, #12
   1e6fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1e6fc:	2c00      	cmp	r4, #0
   1e6fe:	d16c      	bne.n	1e7da <at_interface_write+0xe6>
   1e700:	4688      	mov	r8, r1
   1e702:	4615      	mov	r5, r2
   1e704:	461e      	mov	r6, r3
   1e706:	4607      	mov	r7, r0
   1e708:	f003 fa9e 	bl	21c48 <interface_socket_from_handle_get>
   1e70c:	4604      	mov	r4, r0
   1e70e:	2e00      	cmp	r6, #0
   1e710:	d137      	bne.n	1e782 <at_interface_write+0x8e>
   1e712:	2800      	cmp	r0, #0
   1e714:	d067      	beq.n	1e7e6 <at_interface_write+0xf2>
   1e716:	6803      	ldr	r3, [r0, #0]
   1e718:	039b      	lsls	r3, r3, #14
   1e71a:	d564      	bpl.n	1e7e6 <at_interface_write+0xf2>
   1e71c:	6803      	ldr	r3, [r0, #0]
   1e71e:	4629      	mov	r1, r5
   1e720:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1e724:	6003      	str	r3, [r0, #0]
   1e726:	6803      	ldr	r3, [r0, #0]
   1e728:	4668      	mov	r0, sp
   1e72a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1e72e:	6023      	str	r3, [r4, #0]
   1e730:	f003 fb8e 	bl	21e50 <rpc_at_client_request_alloc>
   1e734:	4606      	mov	r6, r0
   1e736:	4638      	mov	r0, r7
   1e738:	f003 fa86 	bl	21c48 <interface_socket_from_handle_get>
   1e73c:	4681      	mov	r9, r0
   1e73e:	bb56      	cbnz	r6, 1e796 <at_interface_write+0xa2>
   1e740:	2304      	movs	r3, #4
   1e742:	9800      	ldr	r0, [sp, #0]
   1e744:	7203      	strb	r3, [r0, #8]
   1e746:	7246      	strb	r6, [r0, #9]
   1e748:	7286      	strb	r6, [r0, #10]
   1e74a:	72c6      	strb	r6, [r0, #11]
   1e74c:	60c7      	str	r7, [r0, #12]
   1e74e:	bb25      	cbnz	r5, 1e79a <at_interface_write+0xa6>
   1e750:	2101      	movs	r1, #1
   1e752:	f003 fb91 	bl	21e78 <rpc_at_client_request_send>
   1e756:	bb78      	cbnz	r0, 1e7b8 <at_interface_write+0xc4>
   1e758:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
   1e75c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1e760:	2900      	cmp	r1, #0
   1e762:	bf08      	it	eq
   1e764:	f04f 31ff 	moveq.w	r1, #4294967295
   1e768:	ab02      	add	r3, sp, #8
   1e76a:	f843 1d04 	str.w	r1, [r3, #-4]!
   1e76e:	4638      	mov	r0, r7
   1e770:	4611      	mov	r1, r2
   1e772:	f003 f9f5 	bl	21b60 <interface_socket_wait>
   1e776:	b320      	cbz	r0, 1e7c2 <at_interface_write+0xce>
   1e778:	6823      	ldr	r3, [r4, #0]
   1e77a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1e77e:	6023      	str	r3, [r4, #0]
   1e780:	e002      	b.n	1e788 <at_interface_write+0x94>
   1e782:	b390      	cbz	r0, 1e7ea <at_interface_write+0xf6>
   1e784:	6803      	ldr	r3, [r0, #0]
   1e786:	202d      	movs	r0, #45	; 0x2d
   1e788:	f7f8 fa1a 	bl	16bc0 <bsd_os_errno_set>
   1e78c:	f04f 30ff 	mov.w	r0, #4294967295
   1e790:	b003      	add	sp, #12
   1e792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e796:	200c      	movs	r0, #12
   1e798:	e7ee      	b.n	1e778 <at_interface_write+0x84>
   1e79a:	4641      	mov	r1, r8
   1e79c:	6800      	ldr	r0, [r0, #0]
   1e79e:	462a      	mov	r2, r5
   1e7a0:	f7ee f9d4 	bl	cb4c <memcpy>
   1e7a4:	2101      	movs	r1, #1
   1e7a6:	9800      	ldr	r0, [sp, #0]
   1e7a8:	f003 fb66 	bl	21e78 <rpc_at_client_request_send>
   1e7ac:	2800      	cmp	r0, #0
   1e7ae:	d0d3      	beq.n	1e758 <at_interface_write+0x64>
   1e7b0:	9b00      	ldr	r3, [sp, #0]
   1e7b2:	6818      	ldr	r0, [r3, #0]
   1e7b4:	f003 fb76 	bl	21ea4 <rpc_at_client_data_free>
   1e7b8:	9800      	ldr	r0, [sp, #0]
   1e7ba:	f003 fb6b 	bl	21e94 <rpc_at_client_message_free>
   1e7be:	2023      	movs	r0, #35	; 0x23
   1e7c0:	e7da      	b.n	1e778 <at_interface_write+0x84>
   1e7c2:	4638      	mov	r0, r7
   1e7c4:	f003 fa40 	bl	21c48 <interface_socket_from_handle_get>
   1e7c8:	4603      	mov	r3, r0
   1e7ca:	b120      	cbz	r0, 1e7d6 <at_interface_write+0xe2>
   1e7cc:	6840      	ldr	r0, [r0, #4]
   1e7ce:	b110      	cbz	r0, 1e7d6 <at_interface_write+0xe2>
   1e7d0:	2200      	movs	r2, #0
   1e7d2:	605a      	str	r2, [r3, #4]
   1e7d4:	e7d0      	b.n	1e778 <at_interface_write+0x84>
   1e7d6:	4628      	mov	r0, r5
   1e7d8:	e7da      	b.n	1e790 <at_interface_write+0x9c>
   1e7da:	2038      	movs	r0, #56	; 0x38
   1e7dc:	f7f8 f9f0 	bl	16bc0 <bsd_os_errno_set>
   1e7e0:	f04f 30ff 	mov.w	r0, #4294967295
   1e7e4:	e7d4      	b.n	1e790 <at_interface_write+0x9c>
   1e7e6:	2016      	movs	r0, #22
   1e7e8:	e7ce      	b.n	1e788 <at_interface_write+0x94>
   1e7ea:	202d      	movs	r0, #45	; 0x2d
   1e7ec:	e7cc      	b.n	1e788 <at_interface_write+0x94>
   1e7ee:	bf00      	nop

0001e7f0 <at_interface_init>:
   1e7f0:	b508      	push	{r3, lr}
   1e7f2:	f003 fb27 	bl	21e44 <rpc_at_client_init>
   1e7f6:	b910      	cbnz	r0, 1e7fe <at_interface_init+0xe>
   1e7f8:	2201      	movs	r2, #1
   1e7fa:	4b01      	ldr	r3, [pc, #4]	; (1e800 <at_interface_init+0x10>)
   1e7fc:	701a      	strb	r2, [r3, #0]
   1e7fe:	bd08      	pop	{r3, pc}
   1e800:	20026279 	.word	0x20026279

0001e804 <at_interface_open>:
   1e804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e808:	2600      	movs	r6, #0
   1e80a:	4b34      	ldr	r3, [pc, #208]	; (1e8dc <at_interface_open+0xd8>)
   1e80c:	b084      	sub	sp, #16
   1e80e:	781b      	ldrb	r3, [r3, #0]
   1e810:	9601      	str	r6, [sp, #4]
   1e812:	2b00      	cmp	r3, #0
   1e814:	d05c      	beq.n	1e8d0 <at_interface_open+0xcc>
   1e816:	2902      	cmp	r1, #2
   1e818:	460d      	mov	r5, r1
   1e81a:	d153      	bne.n	1e8c4 <at_interface_open+0xc0>
   1e81c:	4680      	mov	r8, r0
   1e81e:	4617      	mov	r7, r2
   1e820:	a801      	add	r0, sp, #4
   1e822:	4a2f      	ldr	r2, [pc, #188]	; (1e8e0 <at_interface_open+0xdc>)
   1e824:	f003 f8ea 	bl	219fc <interface_socket_allocate>
   1e828:	9b01      	ldr	r3, [sp, #4]
   1e82a:	4604      	mov	r4, r0
   1e82c:	b3c3      	cbz	r3, 1e8a0 <at_interface_open+0x9c>
   1e82e:	615f      	str	r7, [r3, #20]
   1e830:	4631      	mov	r1, r6
   1e832:	e9c3 8503 	strd	r8, r5, [r3, #12]
   1e836:	a802      	add	r0, sp, #8
   1e838:	f003 fb0a 	bl	21e50 <rpc_at_client_request_alloc>
   1e83c:	4606      	mov	r6, r0
   1e83e:	4620      	mov	r0, r4
   1e840:	f003 fa02 	bl	21c48 <interface_socket_from_handle_get>
   1e844:	4607      	mov	r7, r0
   1e846:	bb16      	cbnz	r6, 1e88e <at_interface_open+0x8a>
   1e848:	2304      	movs	r3, #4
   1e84a:	9802      	ldr	r0, [sp, #8]
   1e84c:	2105      	movs	r1, #5
   1e84e:	7246      	strb	r6, [r0, #9]
   1e850:	7286      	strb	r6, [r0, #10]
   1e852:	72c6      	strb	r6, [r0, #11]
   1e854:	7203      	strb	r3, [r0, #8]
   1e856:	60c4      	str	r4, [r0, #12]
   1e858:	f003 fb0e 	bl	21e78 <rpc_at_client_request_send>
   1e85c:	4606      	mov	r6, r0
   1e85e:	bb60      	cbnz	r0, 1e8ba <at_interface_open+0xb6>
   1e860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e862:	ab04      	add	r3, sp, #16
   1e864:	2a00      	cmp	r2, #0
   1e866:	bf08      	it	eq
   1e868:	f04f 32ff 	moveq.w	r2, #4294967295
   1e86c:	4629      	mov	r1, r5
   1e86e:	f843 2d04 	str.w	r2, [r3, #-4]!
   1e872:	4620      	mov	r0, r4
   1e874:	462a      	mov	r2, r5
   1e876:	f003 f973 	bl	21b60 <interface_socket_wait>
   1e87a:	4605      	mov	r5, r0
   1e87c:	b940      	cbnz	r0, 1e890 <at_interface_open+0x8c>
   1e87e:	4620      	mov	r0, r4
   1e880:	f003 f9e2 	bl	21c48 <interface_socket_from_handle_get>
   1e884:	b180      	cbz	r0, 1e8a8 <at_interface_open+0xa4>
   1e886:	6845      	ldr	r5, [r0, #4]
   1e888:	b175      	cbz	r5, 1e8a8 <at_interface_open+0xa4>
   1e88a:	6046      	str	r6, [r0, #4]
   1e88c:	e000      	b.n	1e890 <at_interface_open+0x8c>
   1e88e:	250c      	movs	r5, #12
   1e890:	4620      	mov	r0, r4
   1e892:	f003 f917 	bl	21ac4 <interface_socket_free>
   1e896:	4628      	mov	r0, r5
   1e898:	f7f8 f992 	bl	16bc0 <bsd_os_errno_set>
   1e89c:	f04f 34ff 	mov.w	r4, #4294967295
   1e8a0:	4620      	mov	r0, r4
   1e8a2:	b004      	add	sp, #16
   1e8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e8a8:	4620      	mov	r0, r4
   1e8aa:	9a01      	ldr	r2, [sp, #4]
   1e8ac:	6813      	ldr	r3, [r2, #0]
   1e8ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1e8b2:	6013      	str	r3, [r2, #0]
   1e8b4:	b004      	add	sp, #16
   1e8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e8ba:	9802      	ldr	r0, [sp, #8]
   1e8bc:	f003 faea 	bl	21e94 <rpc_at_client_message_free>
   1e8c0:	2523      	movs	r5, #35	; 0x23
   1e8c2:	e7e5      	b.n	1e890 <at_interface_open+0x8c>
   1e8c4:	2029      	movs	r0, #41	; 0x29
   1e8c6:	f7f8 f97b 	bl	16bc0 <bsd_os_errno_set>
   1e8ca:	f04f 34ff 	mov.w	r4, #4294967295
   1e8ce:	e7e7      	b.n	1e8a0 <at_interface_open+0x9c>
   1e8d0:	2070      	movs	r0, #112	; 0x70
   1e8d2:	f7f8 f975 	bl	16bc0 <bsd_os_errno_set>
   1e8d6:	f04f 34ff 	mov.w	r4, #4294967295
   1e8da:	e7e1      	b.n	1e8a0 <at_interface_open+0x9c>
   1e8dc:	20026279 	.word	0x20026279
   1e8e0:	0001e6ed 	.word	0x0001e6ed

0001e8e4 <at_interface_close>:
   1e8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e8e8:	b082      	sub	sp, #8
   1e8ea:	4606      	mov	r6, r0
   1e8ec:	f003 f9ac 	bl	21c48 <interface_socket_from_handle_get>
   1e8f0:	2800      	cmp	r0, #0
   1e8f2:	d051      	beq.n	1e998 <at_interface_close+0xb4>
   1e8f4:	230d      	movs	r3, #13
   1e8f6:	6807      	ldr	r7, [r0, #0]
   1e8f8:	6003      	str	r3, [r0, #0]
   1e8fa:	6803      	ldr	r3, [r0, #0]
   1e8fc:	4604      	mov	r4, r0
   1e8fe:	039b      	lsls	r3, r3, #14
   1e900:	d42e      	bmi.n	1e960 <at_interface_close+0x7c>
   1e902:	2100      	movs	r1, #0
   1e904:	4668      	mov	r0, sp
   1e906:	f003 faa3 	bl	21e50 <rpc_at_client_request_alloc>
   1e90a:	4605      	mov	r5, r0
   1e90c:	4630      	mov	r0, r6
   1e90e:	f003 f99b 	bl	21c48 <interface_socket_from_handle_get>
   1e912:	4680      	mov	r8, r0
   1e914:	bb75      	cbnz	r5, 1e974 <at_interface_close+0x90>
   1e916:	2304      	movs	r3, #4
   1e918:	9800      	ldr	r0, [sp, #0]
   1e91a:	2106      	movs	r1, #6
   1e91c:	7203      	strb	r3, [r0, #8]
   1e91e:	7245      	strb	r5, [r0, #9]
   1e920:	7285      	strb	r5, [r0, #10]
   1e922:	72c5      	strb	r5, [r0, #11]
   1e924:	60c6      	str	r6, [r0, #12]
   1e926:	f003 faa7 	bl	21e78 <rpc_at_client_request_send>
   1e92a:	b9f0      	cbnz	r0, 1e96a <at_interface_close+0x86>
   1e92c:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   1e930:	220e      	movs	r2, #14
   1e932:	2900      	cmp	r1, #0
   1e934:	bf08      	it	eq
   1e936:	f04f 31ff 	moveq.w	r1, #4294967295
   1e93a:	ab02      	add	r3, sp, #8
   1e93c:	f843 1d04 	str.w	r1, [r3, #-4]!
   1e940:	4630      	mov	r0, r6
   1e942:	4611      	mov	r1, r2
   1e944:	f003 f90c 	bl	21b60 <interface_socket_wait>
   1e948:	4605      	mov	r5, r0
   1e94a:	b1a8      	cbz	r0, 1e978 <at_interface_close+0x94>
   1e94c:	6027      	str	r7, [r4, #0]
   1e94e:	4628      	mov	r0, r5
   1e950:	f04f 35ff 	mov.w	r5, #4294967295
   1e954:	f7f8 f934 	bl	16bc0 <bsd_os_errno_set>
   1e958:	4628      	mov	r0, r5
   1e95a:	b002      	add	sp, #8
   1e95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e960:	6803      	ldr	r3, [r0, #0]
   1e962:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1e966:	6003      	str	r3, [r0, #0]
   1e968:	e7cb      	b.n	1e902 <at_interface_close+0x1e>
   1e96a:	9800      	ldr	r0, [sp, #0]
   1e96c:	f003 fa92 	bl	21e94 <rpc_at_client_message_free>
   1e970:	2523      	movs	r5, #35	; 0x23
   1e972:	e7eb      	b.n	1e94c <at_interface_close+0x68>
   1e974:	250c      	movs	r5, #12
   1e976:	e7e9      	b.n	1e94c <at_interface_close+0x68>
   1e978:	4630      	mov	r0, r6
   1e97a:	f003 f965 	bl	21c48 <interface_socket_from_handle_get>
   1e97e:	b120      	cbz	r0, 1e98a <at_interface_close+0xa6>
   1e980:	6843      	ldr	r3, [r0, #4]
   1e982:	b113      	cbz	r3, 1e98a <at_interface_close+0xa6>
   1e984:	6045      	str	r5, [r0, #4]
   1e986:	461d      	mov	r5, r3
   1e988:	e7e0      	b.n	1e94c <at_interface_close+0x68>
   1e98a:	4630      	mov	r0, r6
   1e98c:	f003 f89a 	bl	21ac4 <interface_socket_free>
   1e990:	4628      	mov	r0, r5
   1e992:	b002      	add	sp, #8
   1e994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e998:	2516      	movs	r5, #22
   1e99a:	e7d8      	b.n	1e94e <at_interface_close+0x6a>

0001e99c <at_interface_read>:
   1e99c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e9a0:	b087      	sub	sp, #28
   1e9a2:	4688      	mov	r8, r1
   1e9a4:	4615      	mov	r5, r2
   1e9a6:	461e      	mov	r6, r3
   1e9a8:	4607      	mov	r7, r0
   1e9aa:	f003 f94d 	bl	21c48 <interface_socket_from_handle_get>
   1e9ae:	2800      	cmp	r0, #0
   1e9b0:	f000 8084 	beq.w	1eabc <at_interface_read+0x120>
   1e9b4:	2300      	movs	r3, #0
   1e9b6:	4604      	mov	r4, r0
   1e9b8:	e9cd 8502 	strd	r8, r5, [sp, #8]
   1e9bc:	e9cd 3304 	strd	r3, r3, [sp, #16]
   1e9c0:	2e00      	cmp	r6, #0
   1e9c2:	d12d      	bne.n	1ea20 <at_interface_read+0x84>
   1e9c4:	f016 0502 	ands.w	r5, r6, #2
   1e9c8:	d148      	bne.n	1ea5c <at_interface_read+0xc0>
   1e9ca:	46a8      	mov	r8, r5
   1e9cc:	6823      	ldr	r3, [r4, #0]
   1e9ce:	69e0      	ldr	r0, [r4, #28]
   1e9d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1e9d4:	6023      	str	r3, [r4, #0]
   1e9d6:	6803      	ldr	r3, [r0, #0]
   1e9d8:	4632      	mov	r2, r6
   1e9da:	689b      	ldr	r3, [r3, #8]
   1e9dc:	a902      	add	r1, sp, #8
   1e9de:	4798      	blx	r3
   1e9e0:	f1b0 0900 	subs.w	r9, r0, #0
   1e9e4:	da2a      	bge.n	1ea3c <at_interface_read+0xa0>
   1e9e6:	2d00      	cmp	r5, #0
   1e9e8:	d15e      	bne.n	1eaa8 <at_interface_read+0x10c>
   1e9ea:	6a25      	ldr	r5, [r4, #32]
   1e9ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e9f0:	2d00      	cmp	r5, #0
   1e9f2:	bf08      	it	eq
   1e9f4:	f04f 35ff 	moveq.w	r5, #4294967295
   1e9f8:	4611      	mov	r1, r2
   1e9fa:	ab01      	add	r3, sp, #4
   1e9fc:	4638      	mov	r0, r7
   1e9fe:	9501      	str	r5, [sp, #4]
   1ea00:	f003 f8ae 	bl	21b60 <interface_socket_wait>
   1ea04:	4605      	mov	r5, r0
   1ea06:	2800      	cmp	r0, #0
   1ea08:	d1e0      	bne.n	1e9cc <at_interface_read+0x30>
   1ea0a:	4638      	mov	r0, r7
   1ea0c:	f003 f91c 	bl	21c48 <interface_socket_from_handle_get>
   1ea10:	2800      	cmp	r0, #0
   1ea12:	d0db      	beq.n	1e9cc <at_interface_read+0x30>
   1ea14:	6845      	ldr	r5, [r0, #4]
   1ea16:	2d00      	cmp	r5, #0
   1ea18:	d0d8      	beq.n	1e9cc <at_interface_read+0x30>
   1ea1a:	f8c0 8004 	str.w	r8, [r0, #4]
   1ea1e:	e7d5      	b.n	1e9cc <at_interface_read+0x30>
   1ea20:	f016 0f2a 	tst.w	r6, #42	; 0x2a
   1ea24:	d1ce      	bne.n	1e9c4 <at_interface_read+0x28>
   1ea26:	252d      	movs	r5, #45	; 0x2d
   1ea28:	f04f 39ff 	mov.w	r9, #4294967295
   1ea2c:	4628      	mov	r0, r5
   1ea2e:	f7f8 f8c7 	bl	16bc0 <bsd_os_errno_set>
   1ea32:	4648      	mov	r0, r9
   1ea34:	b007      	add	sp, #28
   1ea36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ea3a:	2500      	movs	r5, #0
   1ea3c:	69e0      	ldr	r0, [r4, #28]
   1ea3e:	6803      	ldr	r3, [r0, #0]
   1ea40:	68db      	ldr	r3, [r3, #12]
   1ea42:	4798      	blx	r3
   1ea44:	3001      	adds	r0, #1
   1ea46:	d003      	beq.n	1ea50 <at_interface_read+0xb4>
   1ea48:	6823      	ldr	r3, [r4, #0]
   1ea4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1ea4e:	6023      	str	r3, [r4, #0]
   1ea50:	2d00      	cmp	r5, #0
   1ea52:	d1eb      	bne.n	1ea2c <at_interface_read+0x90>
   1ea54:	4648      	mov	r0, r9
   1ea56:	b007      	add	sp, #28
   1ea58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ea5c:	6823      	ldr	r3, [r4, #0]
   1ea5e:	69e0      	ldr	r0, [r4, #28]
   1ea60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1ea64:	6023      	str	r3, [r4, #0]
   1ea66:	6803      	ldr	r3, [r0, #0]
   1ea68:	4632      	mov	r2, r6
   1ea6a:	689b      	ldr	r3, [r3, #8]
   1ea6c:	a902      	add	r1, sp, #8
   1ea6e:	4798      	blx	r3
   1ea70:	f1b0 0900 	subs.w	r9, r0, #0
   1ea74:	dae1      	bge.n	1ea3a <at_interface_read+0x9e>
   1ea76:	69e0      	ldr	r0, [r4, #28]
   1ea78:	f1b9 3fff 	cmp.w	r9, #4294967295
   1ea7c:	6803      	ldr	r3, [r0, #0]
   1ea7e:	68db      	ldr	r3, [r3, #12]
   1ea80:	d10a      	bne.n	1ea98 <at_interface_read+0xfc>
   1ea82:	2523      	movs	r5, #35	; 0x23
   1ea84:	4798      	blx	r3
   1ea86:	3001      	adds	r0, #1
   1ea88:	d0ce      	beq.n	1ea28 <at_interface_read+0x8c>
   1ea8a:	6823      	ldr	r3, [r4, #0]
   1ea8c:	f04f 39ff 	mov.w	r9, #4294967295
   1ea90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1ea94:	6023      	str	r3, [r4, #0]
   1ea96:	e7db      	b.n	1ea50 <at_interface_read+0xb4>
   1ea98:	4798      	blx	r3
   1ea9a:	3001      	adds	r0, #1
   1ea9c:	d0c9      	beq.n	1ea32 <at_interface_read+0x96>
   1ea9e:	6823      	ldr	r3, [r4, #0]
   1eaa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1eaa4:	6023      	str	r3, [r4, #0]
   1eaa6:	e7c4      	b.n	1ea32 <at_interface_read+0x96>
   1eaa8:	69e0      	ldr	r0, [r4, #28]
   1eaaa:	f1b9 3fff 	cmp.w	r9, #4294967295
   1eaae:	6803      	ldr	r3, [r0, #0]
   1eab0:	68db      	ldr	r3, [r3, #12]
   1eab2:	d0e7      	beq.n	1ea84 <at_interface_read+0xe8>
   1eab4:	4798      	blx	r3
   1eab6:	3001      	adds	r0, #1
   1eab8:	d1c6      	bne.n	1ea48 <at_interface_read+0xac>
   1eaba:	e7b7      	b.n	1ea2c <at_interface_read+0x90>
   1eabc:	2516      	movs	r5, #22
   1eabe:	e7b3      	b.n	1ea28 <at_interface_read+0x8c>

0001eac0 <at_interface_getopt>:
   1eac0:	f003 b930 	b.w	21d24 <interface_socket_getopt>

0001eac4 <at_interface_setopt>:
   1eac4:	f003 b8e8 	b.w	21c98 <interface_socket_setopt>

0001eac8 <rpc_at_event_handler>:
   1eac8:	b570      	push	{r4, r5, r6, lr}
   1eaca:	4606      	mov	r6, r0
   1eacc:	b084      	sub	sp, #16
   1eace:	68c0      	ldr	r0, [r0, #12]
   1ead0:	460d      	mov	r5, r1
   1ead2:	f003 f8b9 	bl	21c48 <interface_socket_from_handle_get>
   1ead6:	4604      	mov	r4, r0
   1ead8:	b348      	cbz	r0, 1eb2e <rpc_at_event_handler+0x66>
   1eada:	6803      	ldr	r3, [r0, #0]
   1eadc:	b29b      	uxth	r3, r3
   1eade:	2b01      	cmp	r3, #1
   1eae0:	d01f      	beq.n	1eb22 <rpc_at_event_handler+0x5a>
   1eae2:	6803      	ldr	r3, [r0, #0]
   1eae4:	b29b      	uxth	r3, r3
   1eae6:	2b0d      	cmp	r3, #13
   1eae8:	d029      	beq.n	1eb3e <rpc_at_event_handler+0x76>
   1eaea:	6803      	ldr	r3, [r0, #0]
   1eaec:	b29b      	uxth	r3, r3
   1eaee:	2b02      	cmp	r3, #2
   1eaf0:	d02d      	beq.n	1eb4e <rpc_at_event_handler+0x86>
   1eaf2:	3d03      	subs	r5, #3
   1eaf4:	2d01      	cmp	r5, #1
   1eaf6:	d817      	bhi.n	1eb28 <rpc_at_event_handler+0x60>
   1eaf8:	2500      	movs	r5, #0
   1eafa:	6873      	ldr	r3, [r6, #4]
   1eafc:	6832      	ldr	r2, [r6, #0]
   1eafe:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1eb02:	e9cd 2300 	strd	r2, r3, [sp]
   1eb06:	69e0      	ldr	r0, [r4, #28]
   1eb08:	4669      	mov	r1, sp
   1eb0a:	6803      	ldr	r3, [r0, #0]
   1eb0c:	685b      	ldr	r3, [r3, #4]
   1eb0e:	4798      	blx	r3
   1eb10:	3001      	adds	r0, #1
   1eb12:	d019      	beq.n	1eb48 <rpc_at_event_handler+0x80>
   1eb14:	4628      	mov	r0, r5
   1eb16:	6823      	ldr	r3, [r4, #0]
   1eb18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1eb1c:	6023      	str	r3, [r4, #0]
   1eb1e:	b004      	add	sp, #16
   1eb20:	bd70      	pop	{r4, r5, r6, pc}
   1eb22:	2d02      	cmp	r5, #2
   1eb24:	d1e5      	bne.n	1eaf2 <rpc_at_event_handler+0x2a>
   1eb26:	6005      	str	r5, [r0, #0]
   1eb28:	2000      	movs	r0, #0
   1eb2a:	b004      	add	sp, #16
   1eb2c:	bd70      	pop	{r4, r5, r6, pc}
   1eb2e:	6830      	ldr	r0, [r6, #0]
   1eb30:	2800      	cmp	r0, #0
   1eb32:	d0f9      	beq.n	1eb28 <rpc_at_event_handler+0x60>
   1eb34:	f003 f9b6 	bl	21ea4 <rpc_at_client_data_free>
   1eb38:	4620      	mov	r0, r4
   1eb3a:	b004      	add	sp, #16
   1eb3c:	bd70      	pop	{r4, r5, r6, pc}
   1eb3e:	2d02      	cmp	r5, #2
   1eb40:	d1d7      	bne.n	1eaf2 <rpc_at_event_handler+0x2a>
   1eb42:	230e      	movs	r3, #14
   1eb44:	6003      	str	r3, [r0, #0]
   1eb46:	e7ef      	b.n	1eb28 <rpc_at_event_handler+0x60>
   1eb48:	2002      	movs	r0, #2
   1eb4a:	b004      	add	sp, #16
   1eb4c:	bd70      	pop	{r4, r5, r6, pc}
   1eb4e:	6803      	ldr	r3, [r0, #0]
   1eb50:	029b      	lsls	r3, r3, #10
   1eb52:	d5ce      	bpl.n	1eaf2 <rpc_at_event_handler+0x2a>
   1eb54:	2d02      	cmp	r5, #2
   1eb56:	d1cc      	bne.n	1eaf2 <rpc_at_event_handler+0x2a>
   1eb58:	6803      	ldr	r3, [r0, #0]
   1eb5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1eb5e:	6003      	str	r3, [r0, #0]
   1eb60:	6803      	ldr	r3, [r0, #0]
   1eb62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1eb66:	6003      	str	r3, [r0, #0]
   1eb68:	e7de      	b.n	1eb28 <rpc_at_event_handler+0x60>
   1eb6a:	bf00      	nop

0001eb6c <ok_rsp_parser>:
   1eb6c:	2000      	movs	r0, #0
   1eb6e:	4770      	bx	lr

0001eb70 <pdn_state_get_parser>:
   1eb70:	2200      	movs	r2, #0
   1eb72:	b570      	push	{r4, r5, r6, lr}
   1eb74:	780b      	ldrb	r3, [r1, #0]
   1eb76:	b084      	sub	sp, #16
   1eb78:	460e      	mov	r6, r1
   1eb7a:	e9cd 2200 	strd	r2, r2, [sp]
   1eb7e:	e9cd 2202 	strd	r2, r2, [sp, #8]
   1eb82:	b323      	cbz	r3, 1ebce <pdn_state_get_parser+0x5e>
   1eb84:	460c      	mov	r4, r1
   1eb86:	2b20      	cmp	r3, #32
   1eb88:	460d      	mov	r5, r1
   1eb8a:	d01b      	beq.n	1ebc4 <pdn_state_get_parser+0x54>
   1eb8c:	700b      	strb	r3, [r1, #0]
   1eb8e:	3201      	adds	r2, #1
   1eb90:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1eb94:	18b1      	adds	r1, r6, r2
   1eb96:	460d      	mov	r5, r1
   1eb98:	2b00      	cmp	r3, #0
   1eb9a:	d1f4      	bne.n	1eb86 <pdn_state_get_parser+0x16>
   1eb9c:	2200      	movs	r2, #0
   1eb9e:	4b0d      	ldr	r3, [pc, #52]	; (1ebd4 <pdn_state_get_parser+0x64>)
   1eba0:	702a      	strb	r2, [r5, #0]
   1eba2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1eba6:	4a0c      	ldr	r2, [pc, #48]	; (1ebd8 <pdn_state_get_parser+0x68>)
   1eba8:	681b      	ldr	r3, [r3, #0]
   1ebaa:	2110      	movs	r1, #16
   1ebac:	4668      	mov	r0, sp
   1ebae:	f007 fcd5 	bl	2655c <snprintf>
   1ebb2:	4669      	mov	r1, sp
   1ebb4:	4630      	mov	r0, r6
   1ebb6:	f008 f86b 	bl	26c90 <strstr>
   1ebba:	3000      	adds	r0, #0
   1ebbc:	bf18      	it	ne
   1ebbe:	2001      	movne	r0, #1
   1ebc0:	b004      	add	sp, #16
   1ebc2:	bd70      	pop	{r4, r5, r6, pc}
   1ebc4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1ebc8:	2b00      	cmp	r3, #0
   1ebca:	d1dc      	bne.n	1eb86 <pdn_state_get_parser+0x16>
   1ebcc:	e7e6      	b.n	1eb9c <pdn_state_get_parser+0x2c>
   1ebce:	460d      	mov	r5, r1
   1ebd0:	e7e4      	b.n	1eb9c <pdn_state_get_parser+0x2c>
   1ebd2:	bf00      	nop
   1ebd4:	20021bc0 	.word	0x20021bc0
   1ebd8:	0002f3a0 	.word	0x0002f3a0

0001ebdc <pdn_id_get_parser>:
   1ebdc:	b570      	push	{r4, r5, r6, lr}
   1ebde:	780b      	ldrb	r3, [r1, #0]
   1ebe0:	4606      	mov	r6, r0
   1ebe2:	b313      	cbz	r3, 1ec2a <pdn_id_get_parser+0x4e>
   1ebe4:	4608      	mov	r0, r1
   1ebe6:	2400      	movs	r4, #0
   1ebe8:	460a      	mov	r2, r1
   1ebea:	2b20      	cmp	r3, #32
   1ebec:	4615      	mov	r5, r2
   1ebee:	d017      	beq.n	1ec20 <pdn_id_get_parser+0x44>
   1ebf0:	7013      	strb	r3, [r2, #0]
   1ebf2:	3401      	adds	r4, #1
   1ebf4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1ebf8:	190a      	adds	r2, r1, r4
   1ebfa:	4615      	mov	r5, r2
   1ebfc:	2b00      	cmp	r3, #0
   1ebfe:	d1f4      	bne.n	1ebea <pdn_id_get_parser+0xe>
   1ec00:	2300      	movs	r3, #0
   1ec02:	4608      	mov	r0, r1
   1ec04:	702b      	strb	r3, [r5, #0]
   1ec06:	213a      	movs	r1, #58	; 0x3a
   1ec08:	f007 fd82 	bl	26710 <strchr>
   1ec0c:	b130      	cbz	r0, 1ec1c <pdn_id_get_parser+0x40>
   1ec0e:	3001      	adds	r0, #1
   1ec10:	f006 fed2 	bl	259b8 <atoi>
   1ec14:	4b06      	ldr	r3, [pc, #24]	; (1ec30 <pdn_id_get_parser+0x54>)
   1ec16:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   1ec1a:	6058      	str	r0, [r3, #4]
   1ec1c:	2000      	movs	r0, #0
   1ec1e:	bd70      	pop	{r4, r5, r6, pc}
   1ec20:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1ec24:	2b00      	cmp	r3, #0
   1ec26:	d1e0      	bne.n	1ebea <pdn_id_get_parser+0xe>
   1ec28:	e7ea      	b.n	1ec00 <pdn_id_get_parser+0x24>
   1ec2a:	460d      	mov	r5, r1
   1ec2c:	e7e8      	b.n	1ec00 <pdn_id_get_parser+0x24>
   1ec2e:	bf00      	nop
   1ec30:	20021bc0 	.word	0x20021bc0

0001ec34 <context_create_parser>:
   1ec34:	b570      	push	{r4, r5, r6, lr}
   1ec36:	780b      	ldrb	r3, [r1, #0]
   1ec38:	4606      	mov	r6, r0
   1ec3a:	b313      	cbz	r3, 1ec82 <context_create_parser+0x4e>
   1ec3c:	4608      	mov	r0, r1
   1ec3e:	2400      	movs	r4, #0
   1ec40:	460a      	mov	r2, r1
   1ec42:	2b20      	cmp	r3, #32
   1ec44:	4615      	mov	r5, r2
   1ec46:	d017      	beq.n	1ec78 <context_create_parser+0x44>
   1ec48:	7013      	strb	r3, [r2, #0]
   1ec4a:	3401      	adds	r4, #1
   1ec4c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1ec50:	190a      	adds	r2, r1, r4
   1ec52:	4615      	mov	r5, r2
   1ec54:	2b00      	cmp	r3, #0
   1ec56:	d1f4      	bne.n	1ec42 <context_create_parser+0xe>
   1ec58:	2300      	movs	r3, #0
   1ec5a:	4608      	mov	r0, r1
   1ec5c:	702b      	strb	r3, [r5, #0]
   1ec5e:	213a      	movs	r1, #58	; 0x3a
   1ec60:	f007 fd56 	bl	26710 <strchr>
   1ec64:	b130      	cbz	r0, 1ec74 <context_create_parser+0x40>
   1ec66:	4b08      	ldr	r3, [pc, #32]	; (1ec88 <context_create_parser+0x54>)
   1ec68:	3001      	adds	r0, #1
   1ec6a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   1ec6e:	f006 fea3 	bl	259b8 <atoi>
   1ec72:	6020      	str	r0, [r4, #0]
   1ec74:	2000      	movs	r0, #0
   1ec76:	bd70      	pop	{r4, r5, r6, pc}
   1ec78:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1ec7c:	2b00      	cmp	r3, #0
   1ec7e:	d1e0      	bne.n	1ec42 <context_create_parser+0xe>
   1ec80:	e7ea      	b.n	1ec58 <context_create_parser+0x24>
   1ec82:	460d      	mov	r5, r1
   1ec84:	e7e8      	b.n	1ec58 <context_create_parser+0x24>
   1ec86:	bf00      	nop
   1ec88:	20021bc0 	.word	0x20021bc0

0001ec8c <pdn_interface_init>:
   1ec8c:	f04f 33ff 	mov.w	r3, #4294967295
   1ec90:	b510      	push	{r4, lr}
   1ec92:	4c0b      	ldr	r4, [pc, #44]	; (1ecc0 <pdn_interface_init+0x34>)
   1ec94:	2228      	movs	r2, #40	; 0x28
   1ec96:	2100      	movs	r1, #0
   1ec98:	480a      	ldr	r0, [pc, #40]	; (1ecc4 <pdn_interface_init+0x38>)
   1ec9a:	6023      	str	r3, [r4, #0]
   1ec9c:	f007 f9ee 	bl	2607c <memset>
   1eca0:	f240 2201 	movw	r2, #513	; 0x201
   1eca4:	2102      	movs	r1, #2
   1eca6:	2066      	movs	r0, #102	; 0x66
   1eca8:	f7ff fdac 	bl	1e804 <at_interface_open>
   1ecac:	2800      	cmp	r0, #0
   1ecae:	6020      	str	r0, [r4, #0]
   1ecb0:	db04      	blt.n	1ecbc <pdn_interface_init+0x30>
   1ecb2:	2201      	movs	r2, #1
   1ecb4:	4b04      	ldr	r3, [pc, #16]	; (1ecc8 <pdn_interface_init+0x3c>)
   1ecb6:	2000      	movs	r0, #0
   1ecb8:	701a      	strb	r2, [r3, #0]
   1ecba:	bd10      	pop	{r4, pc}
   1ecbc:	2003      	movs	r0, #3
   1ecbe:	bd10      	pop	{r4, pc}
   1ecc0:	20021abc 	.word	0x20021abc
   1ecc4:	20021bc0 	.word	0x20021bc0
   1ecc8:	2002627a 	.word	0x2002627a

0001eccc <pdn_interface_open>:
   1eccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ecd0:	4b68      	ldr	r3, [pc, #416]	; (1ee74 <pdn_interface_open+0x1a8>)
   1ecd2:	b083      	sub	sp, #12
   1ecd4:	781b      	ldrb	r3, [r3, #0]
   1ecd6:	2b00      	cmp	r3, #0
   1ecd8:	f000 80c5 	beq.w	1ee66 <pdn_interface_open+0x19a>
   1ecdc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1ece0:	f040 80b0 	bne.w	1ee44 <pdn_interface_open+0x178>
   1ece4:	4c64      	ldr	r4, [pc, #400]	; (1ee78 <pdn_interface_open+0x1ac>)
   1ece6:	6825      	ldr	r5, [r4, #0]
   1ece8:	b34d      	cbz	r5, 1ed3e <pdn_interface_open+0x72>
   1ecea:	6863      	ldr	r3, [r4, #4]
   1ecec:	2b00      	cmp	r3, #0
   1ecee:	f000 809b 	beq.w	1ee28 <pdn_interface_open+0x15c>
   1ecf2:	68a3      	ldr	r3, [r4, #8]
   1ecf4:	2b00      	cmp	r3, #0
   1ecf6:	f000 8099 	beq.w	1ee2c <pdn_interface_open+0x160>
   1ecfa:	68e3      	ldr	r3, [r4, #12]
   1ecfc:	2b00      	cmp	r3, #0
   1ecfe:	f000 8097 	beq.w	1ee30 <pdn_interface_open+0x164>
   1ed02:	6923      	ldr	r3, [r4, #16]
   1ed04:	2b00      	cmp	r3, #0
   1ed06:	f000 8095 	beq.w	1ee34 <pdn_interface_open+0x168>
   1ed0a:	6963      	ldr	r3, [r4, #20]
   1ed0c:	2b00      	cmp	r3, #0
   1ed0e:	f000 8093 	beq.w	1ee38 <pdn_interface_open+0x16c>
   1ed12:	69a3      	ldr	r3, [r4, #24]
   1ed14:	2b00      	cmp	r3, #0
   1ed16:	f000 8091 	beq.w	1ee3c <pdn_interface_open+0x170>
   1ed1a:	69e3      	ldr	r3, [r4, #28]
   1ed1c:	2b00      	cmp	r3, #0
   1ed1e:	f000 808f 	beq.w	1ee40 <pdn_interface_open+0x174>
   1ed22:	6a23      	ldr	r3, [r4, #32]
   1ed24:	b153      	cbz	r3, 1ed3c <pdn_interface_open+0x70>
   1ed26:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ed28:	2509      	movs	r5, #9
   1ed2a:	b143      	cbz	r3, 1ed3e <pdn_interface_open+0x72>
   1ed2c:	200c      	movs	r0, #12
   1ed2e:	f7f7 ff47 	bl	16bc0 <bsd_os_errno_set>
   1ed32:	f04f 30ff 	mov.w	r0, #4294967295
   1ed36:	b003      	add	sp, #12
   1ed38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ed3c:	2508      	movs	r5, #8
   1ed3e:	2020      	movs	r0, #32
   1ed40:	f002 fa7a 	bl	21238 <nrf_malloc>
   1ed44:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   1ed48:	2800      	cmp	r0, #0
   1ed4a:	d0ef      	beq.n	1ed2c <pdn_interface_open+0x60>
   1ed4c:	2220      	movs	r2, #32
   1ed4e:	2100      	movs	r1, #0
   1ed50:	f007 f994 	bl	2607c <memset>
   1ed54:	2101      	movs	r1, #1
   1ed56:	2003      	movs	r0, #3
   1ed58:	f04f 37ff 	mov.w	r7, #4294967295
   1ed5c:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   1ed60:	4b46      	ldr	r3, [pc, #280]	; (1ee7c <pdn_interface_open+0x1b0>)
   1ed62:	6091      	str	r1, [r2, #8]
   1ed64:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
   1ed68:	4a45      	ldr	r2, [pc, #276]	; (1ee80 <pdn_interface_open+0x1b4>)
   1ed6a:	60c8      	str	r0, [r1, #12]
   1ed6c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1ed70:	f44f 7180 	mov.w	r1, #256	; 0x100
   1ed74:	6047      	str	r7, [r0, #4]
   1ed76:	f8df 8118 	ldr.w	r8, [pc, #280]	; 1ee90 <pdn_interface_open+0x1c4>
   1ed7a:	4842      	ldr	r0, [pc, #264]	; (1ee84 <pdn_interface_open+0x1b8>)
   1ed7c:	f007 fbee 	bl	2655c <snprintf>
   1ed80:	4840      	ldr	r0, [pc, #256]	; (1ee84 <pdn_interface_open+0x1b8>)
   1ed82:	f8d8 9000 	ldr.w	r9, [r8]
   1ed86:	2600      	movs	r6, #0
   1ed88:	f007 fd88 	bl	2689c <strlen>
   1ed8c:	4633      	mov	r3, r6
   1ed8e:	4602      	mov	r2, r0
   1ed90:	493c      	ldr	r1, [pc, #240]	; (1ee84 <pdn_interface_open+0x1b8>)
   1ed92:	4648      	mov	r0, r9
   1ed94:	9601      	str	r6, [sp, #4]
   1ed96:	9600      	str	r6, [sp, #0]
   1ed98:	f7ff fcac 	bl	1e6f4 <at_interface_write>
   1ed9c:	4681      	mov	r9, r0
   1ed9e:	4839      	ldr	r0, [pc, #228]	; (1ee84 <pdn_interface_open+0x1b8>)
   1eda0:	f007 fd7c 	bl	2689c <strlen>
   1eda4:	4548      	cmp	r0, r9
   1eda6:	d153      	bne.n	1ee50 <pdn_interface_open+0x184>
   1eda8:	4633      	mov	r3, r6
   1edaa:	e9cd 6600 	strd	r6, r6, [sp]
   1edae:	f44f 7280 	mov.w	r2, #256	; 0x100
   1edb2:	4934      	ldr	r1, [pc, #208]	; (1ee84 <pdn_interface_open+0x1b8>)
   1edb4:	f8d8 0000 	ldr.w	r0, [r8]
   1edb8:	f7ff fdf0 	bl	1e99c <at_interface_read>
   1edbc:	4606      	mov	r6, r0
   1edbe:	4832      	ldr	r0, [pc, #200]	; (1ee88 <pdn_interface_open+0x1bc>)
   1edc0:	f007 fd6c 	bl	2689c <strlen>
   1edc4:	4286      	cmp	r6, r0
   1edc6:	db15      	blt.n	1edf4 <pdn_interface_open+0x128>
   1edc8:	4602      	mov	r2, r0
   1edca:	492e      	ldr	r1, [pc, #184]	; (1ee84 <pdn_interface_open+0x1b8>)
   1edcc:	482e      	ldr	r0, [pc, #184]	; (1ee88 <pdn_interface_open+0x1bc>)
   1edce:	f007 fd93 	bl	268f8 <strncmp>
   1edd2:	b978      	cbnz	r0, 1edf4 <pdn_interface_open+0x128>
   1edd4:	492b      	ldr	r1, [pc, #172]	; (1ee84 <pdn_interface_open+0x1b8>)
   1edd6:	4628      	mov	r0, r5
   1edd8:	f7ff ff2c 	bl	1ec34 <context_create_parser>
   1eddc:	b9b0      	cbnz	r0, 1ee0c <pdn_interface_open+0x140>
   1edde:	2202      	movs	r2, #2
   1ede0:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1ede4:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   1ede8:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   1edec:	609a      	str	r2, [r3, #8]
   1edee:	b003      	add	sp, #12
   1edf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1edf4:	4825      	ldr	r0, [pc, #148]	; (1ee8c <pdn_interface_open+0x1c0>)
   1edf6:	f007 fd51 	bl	2689c <strlen>
   1edfa:	4922      	ldr	r1, [pc, #136]	; (1ee84 <pdn_interface_open+0x1b8>)
   1edfc:	4602      	mov	r2, r0
   1edfe:	4823      	ldr	r0, [pc, #140]	; (1ee8c <pdn_interface_open+0x1c0>)
   1ee00:	f007 fd7a 	bl	268f8 <strncmp>
   1ee04:	b960      	cbnz	r0, 1ee20 <pdn_interface_open+0x154>
   1ee06:	2008      	movs	r0, #8
   1ee08:	f7f7 feda 	bl	16bc0 <bsd_os_errno_set>
   1ee0c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1ee10:	f002 fa1c 	bl	2124c <nrf_free>
   1ee14:	2300      	movs	r3, #0
   1ee16:	f04f 30ff 	mov.w	r0, #4294967295
   1ee1a:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   1ee1e:	e78a      	b.n	1ed36 <pdn_interface_open+0x6a>
   1ee20:	2005      	movs	r0, #5
   1ee22:	f7f7 fecd 	bl	16bc0 <bsd_os_errno_set>
   1ee26:	e7f1      	b.n	1ee0c <pdn_interface_open+0x140>
   1ee28:	2501      	movs	r5, #1
   1ee2a:	e788      	b.n	1ed3e <pdn_interface_open+0x72>
   1ee2c:	2502      	movs	r5, #2
   1ee2e:	e786      	b.n	1ed3e <pdn_interface_open+0x72>
   1ee30:	2503      	movs	r5, #3
   1ee32:	e784      	b.n	1ed3e <pdn_interface_open+0x72>
   1ee34:	2504      	movs	r5, #4
   1ee36:	e782      	b.n	1ed3e <pdn_interface_open+0x72>
   1ee38:	2505      	movs	r5, #5
   1ee3a:	e780      	b.n	1ed3e <pdn_interface_open+0x72>
   1ee3c:	2506      	movs	r5, #6
   1ee3e:	e77e      	b.n	1ed3e <pdn_interface_open+0x72>
   1ee40:	2507      	movs	r5, #7
   1ee42:	e77c      	b.n	1ed3e <pdn_interface_open+0x72>
   1ee44:	2029      	movs	r0, #41	; 0x29
   1ee46:	f7f7 febb 	bl	16bc0 <bsd_os_errno_set>
   1ee4a:	f04f 30ff 	mov.w	r0, #4294967295
   1ee4e:	e772      	b.n	1ed36 <pdn_interface_open+0x6a>
   1ee50:	2005      	movs	r0, #5
   1ee52:	f7f7 feb5 	bl	16bc0 <bsd_os_errno_set>
   1ee56:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1ee5a:	f002 f9f7 	bl	2124c <nrf_free>
   1ee5e:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   1ee62:	4638      	mov	r0, r7
   1ee64:	e767      	b.n	1ed36 <pdn_interface_open+0x6a>
   1ee66:	2070      	movs	r0, #112	; 0x70
   1ee68:	f7f7 feaa 	bl	16bc0 <bsd_os_errno_set>
   1ee6c:	f04f 30ff 	mov.w	r0, #4294967295
   1ee70:	e761      	b.n	1ed36 <pdn_interface_open+0x6a>
   1ee72:	bf00      	nop
   1ee74:	2002627a 	.word	0x2002627a
   1ee78:	20021bc0 	.word	0x20021bc0
   1ee7c:	0002f37c 	.word	0x0002f37c
   1ee80:	0002f388 	.word	0x0002f388
   1ee84:	20021ac0 	.word	0x20021ac0
   1ee88:	0002f38c 	.word	0x0002f38c
   1ee8c:	0002f398 	.word	0x0002f398
   1ee90:	20021abc 	.word	0x20021abc

0001ee94 <pdn_interface_connect>:
   1ee94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee98:	b085      	sub	sp, #20
   1ee9a:	2900      	cmp	r1, #0
   1ee9c:	f000 81f3 	beq.w	1f286 <pdn_interface_connect+0x3f2>
   1eea0:	2a64      	cmp	r2, #100	; 0x64
   1eea2:	4690      	mov	r8, r2
   1eea4:	f200 81ef 	bhi.w	1f286 <pdn_interface_connect+0x3f2>
   1eea8:	0c03      	lsrs	r3, r0, #16
   1eeaa:	4ab1      	ldr	r2, [pc, #708]	; (1f170 <pdn_interface_connect+0x2dc>)
   1eeac:	041b      	lsls	r3, r3, #16
   1eeae:	4293      	cmp	r3, r2
   1eeb0:	f040 8154 	bne.w	1f15c <pdn_interface_connect+0x2c8>
   1eeb4:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1eeb8:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1eebc:	2c09      	cmp	r4, #9
   1eebe:	f300 814d 	bgt.w	1f15c <pdn_interface_connect+0x2c8>
   1eec2:	4fac      	ldr	r7, [pc, #688]	; (1f174 <pdn_interface_connect+0x2e0>)
   1eec4:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1eec8:	2b00      	cmp	r3, #0
   1eeca:	f000 8147 	beq.w	1f15c <pdn_interface_connect+0x2c8>
   1eece:	689a      	ldr	r2, [r3, #8]
   1eed0:	2a00      	cmp	r2, #0
   1eed2:	f000 8143 	beq.w	1f15c <pdn_interface_connect+0x2c8>
   1eed6:	689b      	ldr	r3, [r3, #8]
   1eed8:	2b02      	cmp	r3, #2
   1eeda:	f040 813f 	bne.w	1f15c <pdn_interface_connect+0x2c8>
   1eede:	4da6      	ldr	r5, [pc, #664]	; (1f178 <pdn_interface_connect+0x2e4>)
   1eee0:	4ba6      	ldr	r3, [pc, #664]	; (1f17c <pdn_interface_connect+0x2e8>)
   1eee2:	4aa7      	ldr	r2, [pc, #668]	; (1f180 <pdn_interface_connect+0x2ec>)
   1eee4:	4689      	mov	r9, r1
   1eee6:	4628      	mov	r0, r5
   1eee8:	f44f 7180 	mov.w	r1, #256	; 0x100
   1eeec:	f007 fb36 	bl	2655c <snprintf>
   1eef0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1eef4:	4606      	mov	r6, r0
   1eef6:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1eefa:	681b      	ldr	r3, [r3, #0]
   1eefc:	4aa1      	ldr	r2, [pc, #644]	; (1f184 <pdn_interface_connect+0x2f0>)
   1eefe:	1828      	adds	r0, r5, r0
   1ef00:	f007 fb2c 	bl	2655c <snprintf>
   1ef04:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1ef08:	4406      	add	r6, r0
   1ef0a:	68db      	ldr	r3, [r3, #12]
   1ef0c:	f003 0203 	and.w	r2, r3, #3
   1ef10:	2a03      	cmp	r2, #3
   1ef12:	f000 811a 	beq.w	1f14a <pdn_interface_connect+0x2b6>
   1ef16:	079b      	lsls	r3, r3, #30
   1ef18:	bf4c      	ite	mi
   1ef1a:	4b9b      	ldrmi	r3, [pc, #620]	; (1f188 <pdn_interface_connect+0x2f4>)
   1ef1c:	4b9b      	ldrpl	r3, [pc, #620]	; (1f18c <pdn_interface_connect+0x2f8>)
   1ef1e:	19a8      	adds	r0, r5, r6
   1ef20:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   1ef24:	4a9a      	ldr	r2, [pc, #616]	; (1f190 <pdn_interface_connect+0x2fc>)
   1ef26:	f007 fb19 	bl	2655c <snprintf>
   1ef2a:	1833      	adds	r3, r6, r0
   1ef2c:	eb08 0203 	add.w	r2, r8, r3
   1ef30:	2afd      	cmp	r2, #253	; 0xfd
   1ef32:	f300 81a5 	bgt.w	1f280 <pdn_interface_connect+0x3ec>
   1ef36:	2122      	movs	r1, #34	; 0x22
   1ef38:	1c5e      	adds	r6, r3, #1
   1ef3a:	54e9      	strb	r1, [r5, r3]
   1ef3c:	4642      	mov	r2, r8
   1ef3e:	19a8      	adds	r0, r5, r6
   1ef40:	4649      	mov	r1, r9
   1ef42:	f007 fd13 	bl	2696c <strncpy>
   1ef46:	eb08 0306 	add.w	r3, r8, r6
   1ef4a:	18ea      	adds	r2, r5, r3
   1ef4c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   1ef50:	b902      	cbnz	r2, 1ef54 <pdn_interface_connect+0xc0>
   1ef52:	3b01      	subs	r3, #1
   1ef54:	2600      	movs	r6, #0
   1ef56:	2122      	movs	r1, #34	; 0x22
   1ef58:	18ea      	adds	r2, r5, r3
   1ef5a:	f8df a254 	ldr.w	sl, [pc, #596]	; 1f1b0 <pdn_interface_connect+0x31c>
   1ef5e:	54e9      	strb	r1, [r5, r3]
   1ef60:	4885      	ldr	r0, [pc, #532]	; (1f178 <pdn_interface_connect+0x2e4>)
   1ef62:	7056      	strb	r6, [r2, #1]
   1ef64:	f8da b000 	ldr.w	fp, [sl]
   1ef68:	f007 fc98 	bl	2689c <strlen>
   1ef6c:	4633      	mov	r3, r6
   1ef6e:	4602      	mov	r2, r0
   1ef70:	4981      	ldr	r1, [pc, #516]	; (1f178 <pdn_interface_connect+0x2e4>)
   1ef72:	4658      	mov	r0, fp
   1ef74:	9601      	str	r6, [sp, #4]
   1ef76:	9600      	str	r6, [sp, #0]
   1ef78:	f7ff fbbc 	bl	1e6f4 <at_interface_write>
   1ef7c:	4683      	mov	fp, r0
   1ef7e:	487e      	ldr	r0, [pc, #504]	; (1f178 <pdn_interface_connect+0x2e4>)
   1ef80:	f007 fc8c 	bl	2689c <strlen>
   1ef84:	4558      	cmp	r0, fp
   1ef86:	d008      	beq.n	1ef9a <pdn_interface_connect+0x106>
   1ef88:	2005      	movs	r0, #5
   1ef8a:	f7f7 fe19 	bl	16bc0 <bsd_os_errno_set>
   1ef8e:	f04f 3bff 	mov.w	fp, #4294967295
   1ef92:	4658      	mov	r0, fp
   1ef94:	b005      	add	sp, #20
   1ef96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef9a:	4633      	mov	r3, r6
   1ef9c:	e9cd 6600 	strd	r6, r6, [sp]
   1efa0:	f44f 7280 	mov.w	r2, #256	; 0x100
   1efa4:	4974      	ldr	r1, [pc, #464]	; (1f178 <pdn_interface_connect+0x2e4>)
   1efa6:	f8da 0000 	ldr.w	r0, [sl]
   1efaa:	f7ff fcf7 	bl	1e99c <at_interface_read>
   1efae:	4606      	mov	r6, r0
   1efb0:	4878      	ldr	r0, [pc, #480]	; (1f194 <pdn_interface_connect+0x300>)
   1efb2:	f007 fc73 	bl	2689c <strlen>
   1efb6:	4286      	cmp	r6, r0
   1efb8:	da0f      	bge.n	1efda <pdn_interface_connect+0x146>
   1efba:	4877      	ldr	r0, [pc, #476]	; (1f198 <pdn_interface_connect+0x304>)
   1efbc:	f007 fc6e 	bl	2689c <strlen>
   1efc0:	496d      	ldr	r1, [pc, #436]	; (1f178 <pdn_interface_connect+0x2e4>)
   1efc2:	4602      	mov	r2, r0
   1efc4:	4874      	ldr	r0, [pc, #464]	; (1f198 <pdn_interface_connect+0x304>)
   1efc6:	f007 fc97 	bl	268f8 <strncmp>
   1efca:	2800      	cmp	r0, #0
   1efcc:	d1dc      	bne.n	1ef88 <pdn_interface_connect+0xf4>
   1efce:	2008      	movs	r0, #8
   1efd0:	f7f7 fdf6 	bl	16bc0 <bsd_os_errno_set>
   1efd4:	f04f 3bff 	mov.w	fp, #4294967295
   1efd8:	e7db      	b.n	1ef92 <pdn_interface_connect+0xfe>
   1efda:	4602      	mov	r2, r0
   1efdc:	4966      	ldr	r1, [pc, #408]	; (1f178 <pdn_interface_connect+0x2e4>)
   1efde:	486d      	ldr	r0, [pc, #436]	; (1f194 <pdn_interface_connect+0x300>)
   1efe0:	f007 fc8a 	bl	268f8 <strncmp>
   1efe4:	2800      	cmp	r0, #0
   1efe6:	d1e8      	bne.n	1efba <pdn_interface_connect+0x126>
   1efe8:	4963      	ldr	r1, [pc, #396]	; (1f178 <pdn_interface_connect+0x2e4>)
   1efea:	4620      	mov	r0, r4
   1efec:	f7ff fdbe 	bl	1eb6c <ok_rsp_parser>
   1eff0:	4683      	mov	fp, r0
   1eff2:	2800      	cmp	r0, #0
   1eff4:	d1cd      	bne.n	1ef92 <pdn_interface_connect+0xfe>
   1eff6:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1effa:	7c1b      	ldrb	r3, [r3, #16]
   1effc:	2b00      	cmp	r3, #0
   1effe:	f040 80d9 	bne.w	1f1b4 <pdn_interface_connect+0x320>
   1f002:	4b66      	ldr	r3, [pc, #408]	; (1f19c <pdn_interface_connect+0x308>)
   1f004:	4a5e      	ldr	r2, [pc, #376]	; (1f180 <pdn_interface_connect+0x2ec>)
   1f006:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f00a:	485b      	ldr	r0, [pc, #364]	; (1f178 <pdn_interface_connect+0x2e4>)
   1f00c:	f007 faa6 	bl	2655c <snprintf>
   1f010:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f014:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1f018:	4a61      	ldr	r2, [pc, #388]	; (1f1a0 <pdn_interface_connect+0x30c>)
   1f01a:	681b      	ldr	r3, [r3, #0]
   1f01c:	4428      	add	r0, r5
   1f01e:	f007 fa9d 	bl	2655c <snprintf>
   1f022:	f8da 3000 	ldr.w	r3, [sl]
   1f026:	4854      	ldr	r0, [pc, #336]	; (1f178 <pdn_interface_connect+0x2e4>)
   1f028:	2600      	movs	r6, #0
   1f02a:	9303      	str	r3, [sp, #12]
   1f02c:	f007 fc36 	bl	2689c <strlen>
   1f030:	9b03      	ldr	r3, [sp, #12]
   1f032:	4602      	mov	r2, r0
   1f034:	4950      	ldr	r1, [pc, #320]	; (1f178 <pdn_interface_connect+0x2e4>)
   1f036:	4618      	mov	r0, r3
   1f038:	9601      	str	r6, [sp, #4]
   1f03a:	4633      	mov	r3, r6
   1f03c:	9600      	str	r6, [sp, #0]
   1f03e:	f7ff fb59 	bl	1e6f4 <at_interface_write>
   1f042:	9003      	str	r0, [sp, #12]
   1f044:	484c      	ldr	r0, [pc, #304]	; (1f178 <pdn_interface_connect+0x2e4>)
   1f046:	f007 fc29 	bl	2689c <strlen>
   1f04a:	9b03      	ldr	r3, [sp, #12]
   1f04c:	4298      	cmp	r0, r3
   1f04e:	d19b      	bne.n	1ef88 <pdn_interface_connect+0xf4>
   1f050:	4633      	mov	r3, r6
   1f052:	e9cd 6600 	strd	r6, r6, [sp]
   1f056:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f05a:	4947      	ldr	r1, [pc, #284]	; (1f178 <pdn_interface_connect+0x2e4>)
   1f05c:	f8da 0000 	ldr.w	r0, [sl]
   1f060:	f7ff fc9c 	bl	1e99c <at_interface_read>
   1f064:	4606      	mov	r6, r0
   1f066:	484b      	ldr	r0, [pc, #300]	; (1f194 <pdn_interface_connect+0x300>)
   1f068:	f007 fc18 	bl	2689c <strlen>
   1f06c:	4286      	cmp	r6, r0
   1f06e:	dba4      	blt.n	1efba <pdn_interface_connect+0x126>
   1f070:	4602      	mov	r2, r0
   1f072:	4941      	ldr	r1, [pc, #260]	; (1f178 <pdn_interface_connect+0x2e4>)
   1f074:	4847      	ldr	r0, [pc, #284]	; (1f194 <pdn_interface_connect+0x300>)
   1f076:	f007 fc3f 	bl	268f8 <strncmp>
   1f07a:	4606      	mov	r6, r0
   1f07c:	2800      	cmp	r0, #0
   1f07e:	d19c      	bne.n	1efba <pdn_interface_connect+0x126>
   1f080:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   1f084:	f108 0320 	add.w	r3, r8, #32
   1f088:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   1f08c:	4413      	add	r3, r2
   1f08e:	4419      	add	r1, r3
   1f090:	f002 f8e8 	bl	21264 <nrf_realloc>
   1f094:	2800      	cmp	r0, #0
   1f096:	f000 80fc 	beq.w	1f292 <pdn_interface_connect+0x3fe>
   1f09a:	2303      	movs	r3, #3
   1f09c:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   1f0a0:	6083      	str	r3, [r0, #8]
   1f0a2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f0a6:	4649      	mov	r1, r9
   1f0a8:	f8c3 801c 	str.w	r8, [r3, #28]
   1f0ac:	f857 c024 	ldr.w	ip, [r7, r4, lsl #2]
   1f0b0:	4642      	mov	r2, r8
   1f0b2:	e9dc 0305 	ldrd	r0, r3, [ip, #20]
   1f0b6:	4418      	add	r0, r3
   1f0b8:	4603      	mov	r3, r0
   1f0ba:	3320      	adds	r3, #32
   1f0bc:	eb0c 0003 	add.w	r0, ip, r3
   1f0c0:	f7ed fd44 	bl	cb4c <memcpy>
   1f0c4:	4b37      	ldr	r3, [pc, #220]	; (1f1a4 <pdn_interface_connect+0x310>)
   1f0c6:	4a2e      	ldr	r2, [pc, #184]	; (1f180 <pdn_interface_connect+0x2ec>)
   1f0c8:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f0cc:	482a      	ldr	r0, [pc, #168]	; (1f178 <pdn_interface_connect+0x2e4>)
   1f0ce:	f007 fa45 	bl	2655c <snprintf>
   1f0d2:	4601      	mov	r1, r0
   1f0d4:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f0d8:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   1f0dc:	681b      	ldr	r3, [r3, #0]
   1f0de:	4a30      	ldr	r2, [pc, #192]	; (1f1a0 <pdn_interface_connect+0x30c>)
   1f0e0:	1828      	adds	r0, r5, r0
   1f0e2:	f007 fa3b 	bl	2655c <snprintf>
   1f0e6:	4824      	ldr	r0, [pc, #144]	; (1f178 <pdn_interface_connect+0x2e4>)
   1f0e8:	f8da 5000 	ldr.w	r5, [sl]
   1f0ec:	f007 fbd6 	bl	2689c <strlen>
   1f0f0:	4633      	mov	r3, r6
   1f0f2:	4602      	mov	r2, r0
   1f0f4:	4920      	ldr	r1, [pc, #128]	; (1f178 <pdn_interface_connect+0x2e4>)
   1f0f6:	4628      	mov	r0, r5
   1f0f8:	9601      	str	r6, [sp, #4]
   1f0fa:	9600      	str	r6, [sp, #0]
   1f0fc:	f7ff fafa 	bl	1e6f4 <at_interface_write>
   1f100:	4605      	mov	r5, r0
   1f102:	481d      	ldr	r0, [pc, #116]	; (1f178 <pdn_interface_connect+0x2e4>)
   1f104:	f007 fbca 	bl	2689c <strlen>
   1f108:	42a8      	cmp	r0, r5
   1f10a:	f040 80d2 	bne.w	1f2b2 <pdn_interface_connect+0x41e>
   1f10e:	4633      	mov	r3, r6
   1f110:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f114:	4918      	ldr	r1, [pc, #96]	; (1f178 <pdn_interface_connect+0x2e4>)
   1f116:	f8da 0000 	ldr.w	r0, [sl]
   1f11a:	e9cd 6600 	strd	r6, r6, [sp]
   1f11e:	f7ff fc3d 	bl	1e99c <at_interface_read>
   1f122:	4605      	mov	r5, r0
   1f124:	4820      	ldr	r0, [pc, #128]	; (1f1a8 <pdn_interface_connect+0x314>)
   1f126:	f007 fbb9 	bl	2689c <strlen>
   1f12a:	4285      	cmp	r5, r0
   1f12c:	f2c0 80b4 	blt.w	1f298 <pdn_interface_connect+0x404>
   1f130:	4602      	mov	r2, r0
   1f132:	4911      	ldr	r1, [pc, #68]	; (1f178 <pdn_interface_connect+0x2e4>)
   1f134:	481c      	ldr	r0, [pc, #112]	; (1f1a8 <pdn_interface_connect+0x314>)
   1f136:	f007 fbdf 	bl	268f8 <strncmp>
   1f13a:	2800      	cmp	r0, #0
   1f13c:	f040 80ac 	bne.w	1f298 <pdn_interface_connect+0x404>
   1f140:	4620      	mov	r0, r4
   1f142:	490d      	ldr	r1, [pc, #52]	; (1f178 <pdn_interface_connect+0x2e4>)
   1f144:	f7ff fd4a 	bl	1ebdc <pdn_id_get_parser>
   1f148:	e723      	b.n	1ef92 <pdn_interface_connect+0xfe>
   1f14a:	4b18      	ldr	r3, [pc, #96]	; (1f1ac <pdn_interface_connect+0x318>)
   1f14c:	4a10      	ldr	r2, [pc, #64]	; (1f190 <pdn_interface_connect+0x2fc>)
   1f14e:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   1f152:	19a8      	adds	r0, r5, r6
   1f154:	f007 fa02 	bl	2655c <snprintf>
   1f158:	1833      	adds	r3, r6, r0
   1f15a:	e6e7      	b.n	1ef2c <pdn_interface_connect+0x98>
   1f15c:	f04f 3bff 	mov.w	fp, #4294967295
   1f160:	2009      	movs	r0, #9
   1f162:	f7f7 fd2d 	bl	16bc0 <bsd_os_errno_set>
   1f166:	4658      	mov	r0, fp
   1f168:	b005      	add	sp, #20
   1f16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f16e:	bf00      	nop
   1f170:	789a0000 	.word	0x789a0000
   1f174:	20021bc0 	.word	0x20021bc0
   1f178:	20021ac0 	.word	0x20021ac0
   1f17c:	0002f2f0 	.word	0x0002f2f0
   1f180:	0002f388 	.word	0x0002f388
   1f184:	0002f2fc 	.word	0x0002f2fc
   1f188:	0002f310 	.word	0x0002f310
   1f18c:	0002f318 	.word	0x0002f318
   1f190:	0002f308 	.word	0x0002f308
   1f194:	0002f31c 	.word	0x0002f31c
   1f198:	0002f398 	.word	0x0002f398
   1f19c:	0002f33c 	.word	0x0002f33c
   1f1a0:	0002f348 	.word	0x0002f348
   1f1a4:	0002f34c 	.word	0x0002f34c
   1f1a8:	0002f35c 	.word	0x0002f35c
   1f1ac:	0002f300 	.word	0x0002f300
   1f1b0:	20021abc 	.word	0x20021abc
   1f1b4:	4b41      	ldr	r3, [pc, #260]	; (1f2bc <pdn_interface_connect+0x428>)
   1f1b6:	4a42      	ldr	r2, [pc, #264]	; (1f2c0 <pdn_interface_connect+0x42c>)
   1f1b8:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f1bc:	4841      	ldr	r0, [pc, #260]	; (1f2c4 <pdn_interface_connect+0x430>)
   1f1be:	f007 f9cd 	bl	2655c <snprintf>
   1f1c2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f1c6:	4a40      	ldr	r2, [pc, #256]	; (1f2c8 <pdn_interface_connect+0x434>)
   1f1c8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1f1cc:	4606      	mov	r6, r0
   1f1ce:	681b      	ldr	r3, [r3, #0]
   1f1d0:	1828      	adds	r0, r5, r0
   1f1d2:	f007 f9c3 	bl	2655c <snprintf>
   1f1d6:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f1da:	4406      	add	r6, r0
   1f1dc:	7c1b      	ldrb	r3, [r3, #16]
   1f1de:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   1f1e2:	2b01      	cmp	r3, #1
   1f1e4:	bf0c      	ite	eq
   1f1e6:	4a39      	ldreq	r2, [pc, #228]	; (1f2cc <pdn_interface_connect+0x438>)
   1f1e8:	4a39      	ldrne	r2, [pc, #228]	; (1f2d0 <pdn_interface_connect+0x43c>)
   1f1ea:	19a8      	adds	r0, r5, r6
   1f1ec:	f007 f9b6 	bl	2655c <snprintf>
   1f1f0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f1f4:	4406      	add	r6, r0
   1f1f6:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   1f1fa:	4a36      	ldr	r2, [pc, #216]	; (1f2d4 <pdn_interface_connect+0x440>)
   1f1fc:	3320      	adds	r3, #32
   1f1fe:	19a8      	adds	r0, r5, r6
   1f200:	f007 f9ac 	bl	2655c <snprintf>
   1f204:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f208:	4430      	add	r0, r6
   1f20a:	695a      	ldr	r2, [r3, #20]
   1f20c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1f210:	3220      	adds	r2, #32
   1f212:	4413      	add	r3, r2
   1f214:	4428      	add	r0, r5
   1f216:	4a30      	ldr	r2, [pc, #192]	; (1f2d8 <pdn_interface_connect+0x444>)
   1f218:	f007 f9a0 	bl	2655c <snprintf>
   1f21c:	f8da 3000 	ldr.w	r3, [sl]
   1f220:	4828      	ldr	r0, [pc, #160]	; (1f2c4 <pdn_interface_connect+0x430>)
   1f222:	2600      	movs	r6, #0
   1f224:	9303      	str	r3, [sp, #12]
   1f226:	f007 fb39 	bl	2689c <strlen>
   1f22a:	9b03      	ldr	r3, [sp, #12]
   1f22c:	4602      	mov	r2, r0
   1f22e:	4925      	ldr	r1, [pc, #148]	; (1f2c4 <pdn_interface_connect+0x430>)
   1f230:	4618      	mov	r0, r3
   1f232:	9601      	str	r6, [sp, #4]
   1f234:	4633      	mov	r3, r6
   1f236:	9600      	str	r6, [sp, #0]
   1f238:	f7ff fa5c 	bl	1e6f4 <at_interface_write>
   1f23c:	9003      	str	r0, [sp, #12]
   1f23e:	4821      	ldr	r0, [pc, #132]	; (1f2c4 <pdn_interface_connect+0x430>)
   1f240:	f007 fb2c 	bl	2689c <strlen>
   1f244:	9b03      	ldr	r3, [sp, #12]
   1f246:	4298      	cmp	r0, r3
   1f248:	f47f ae9e 	bne.w	1ef88 <pdn_interface_connect+0xf4>
   1f24c:	4633      	mov	r3, r6
   1f24e:	e9cd 6600 	strd	r6, r6, [sp]
   1f252:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f256:	491b      	ldr	r1, [pc, #108]	; (1f2c4 <pdn_interface_connect+0x430>)
   1f258:	f8da 0000 	ldr.w	r0, [sl]
   1f25c:	f7ff fb9e 	bl	1e99c <at_interface_read>
   1f260:	4606      	mov	r6, r0
   1f262:	481e      	ldr	r0, [pc, #120]	; (1f2dc <pdn_interface_connect+0x448>)
   1f264:	f007 fb1a 	bl	2689c <strlen>
   1f268:	4286      	cmp	r6, r0
   1f26a:	f6ff aea6 	blt.w	1efba <pdn_interface_connect+0x126>
   1f26e:	4602      	mov	r2, r0
   1f270:	4914      	ldr	r1, [pc, #80]	; (1f2c4 <pdn_interface_connect+0x430>)
   1f272:	481a      	ldr	r0, [pc, #104]	; (1f2dc <pdn_interface_connect+0x448>)
   1f274:	f007 fb40 	bl	268f8 <strncmp>
   1f278:	2800      	cmp	r0, #0
   1f27a:	f43f aec2 	beq.w	1f002 <pdn_interface_connect+0x16e>
   1f27e:	e69c      	b.n	1efba <pdn_interface_connect+0x126>
   1f280:	f04f 3bff 	mov.w	fp, #4294967295
   1f284:	e685      	b.n	1ef92 <pdn_interface_connect+0xfe>
   1f286:	2016      	movs	r0, #22
   1f288:	f7f7 fc9a 	bl	16bc0 <bsd_os_errno_set>
   1f28c:	f04f 3bff 	mov.w	fp, #4294967295
   1f290:	e67f      	b.n	1ef92 <pdn_interface_connect+0xfe>
   1f292:	f04f 0b0c 	mov.w	fp, #12
   1f296:	e67c      	b.n	1ef92 <pdn_interface_connect+0xfe>
   1f298:	4811      	ldr	r0, [pc, #68]	; (1f2e0 <pdn_interface_connect+0x44c>)
   1f29a:	f007 faff 	bl	2689c <strlen>
   1f29e:	4909      	ldr	r1, [pc, #36]	; (1f2c4 <pdn_interface_connect+0x430>)
   1f2a0:	4602      	mov	r2, r0
   1f2a2:	480f      	ldr	r0, [pc, #60]	; (1f2e0 <pdn_interface_connect+0x44c>)
   1f2a4:	f007 fb28 	bl	268f8 <strncmp>
   1f2a8:	b918      	cbnz	r0, 1f2b2 <pdn_interface_connect+0x41e>
   1f2aa:	2008      	movs	r0, #8
   1f2ac:	f7f7 fc88 	bl	16bc0 <bsd_os_errno_set>
   1f2b0:	e66f      	b.n	1ef92 <pdn_interface_connect+0xfe>
   1f2b2:	2005      	movs	r0, #5
   1f2b4:	f7f7 fc84 	bl	16bc0 <bsd_os_errno_set>
   1f2b8:	e66b      	b.n	1ef92 <pdn_interface_connect+0xfe>
   1f2ba:	bf00      	nop
   1f2bc:	0002f320 	.word	0x0002f320
   1f2c0:	0002f388 	.word	0x0002f388
   1f2c4:	20021ac0 	.word	0x20021ac0
   1f2c8:	0002f2fc 	.word	0x0002f2fc
   1f2cc:	0002f32c 	.word	0x0002f32c
   1f2d0:	0002f330 	.word	0x0002f330
   1f2d4:	0002f308 	.word	0x0002f308
   1f2d8:	0002f334 	.word	0x0002f334
   1f2dc:	0002f31c 	.word	0x0002f31c
   1f2e0:	0002f398 	.word	0x0002f398

0001f2e4 <pdn_interface_close>:
   1f2e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f2e8:	4a6c      	ldr	r2, [pc, #432]	; (1f49c <__kernel_ram_size+0x174>)
   1f2ea:	0c03      	lsrs	r3, r0, #16
   1f2ec:	041b      	lsls	r3, r3, #16
   1f2ee:	4293      	cmp	r3, r2
   1f2f0:	b083      	sub	sp, #12
   1f2f2:	f040 80ae 	bne.w	1f452 <__kernel_ram_size+0x12a>
   1f2f6:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1f2fa:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1f2fe:	2c09      	cmp	r4, #9
   1f300:	f300 80a7 	bgt.w	1f452 <__kernel_ram_size+0x12a>
   1f304:	4d66      	ldr	r5, [pc, #408]	; (1f4a0 <__kernel_ram_size+0x178>)
   1f306:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1f30a:	2800      	cmp	r0, #0
   1f30c:	f000 80a1 	beq.w	1f452 <__kernel_ram_size+0x12a>
   1f310:	6883      	ldr	r3, [r0, #8]
   1f312:	2b00      	cmp	r3, #0
   1f314:	f000 809d 	beq.w	1f452 <__kernel_ram_size+0x12a>
   1f318:	6883      	ldr	r3, [r0, #8]
   1f31a:	2b03      	cmp	r3, #3
   1f31c:	d00b      	beq.n	1f336 <__kernel_ram_size+0xe>
   1f31e:	6883      	ldr	r3, [r0, #8]
   1f320:	2b02      	cmp	r3, #2
   1f322:	d056      	beq.n	1f3d2 <__kernel_ram_size+0xaa>
   1f324:	f001 ff92 	bl	2124c <nrf_free>
   1f328:	2300      	movs	r3, #0
   1f32a:	4618      	mov	r0, r3
   1f32c:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   1f330:	b003      	add	sp, #12
   1f332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f336:	4e5b      	ldr	r6, [pc, #364]	; (1f4a4 <__kernel_ram_size+0x17c>)
   1f338:	4b5b      	ldr	r3, [pc, #364]	; (1f4a8 <__kernel_ram_size+0x180>)
   1f33a:	4a5c      	ldr	r2, [pc, #368]	; (1f4ac <__kernel_ram_size+0x184>)
   1f33c:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f340:	4630      	mov	r0, r6
   1f342:	f007 f90b 	bl	2655c <snprintf>
   1f346:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1f34a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1f34e:	681b      	ldr	r3, [r3, #0]
   1f350:	4a57      	ldr	r2, [pc, #348]	; (1f4b0 <__kernel_ram_size+0x188>)
   1f352:	4430      	add	r0, r6
   1f354:	f8df 8168 	ldr.w	r8, [pc, #360]	; 1f4c0 <__kernel_ram_size+0x198>
   1f358:	f007 f900 	bl	2655c <snprintf>
   1f35c:	4630      	mov	r0, r6
   1f35e:	f8d8 9000 	ldr.w	r9, [r8]
   1f362:	2700      	movs	r7, #0
   1f364:	f007 fa9a 	bl	2689c <strlen>
   1f368:	4631      	mov	r1, r6
   1f36a:	4602      	mov	r2, r0
   1f36c:	463b      	mov	r3, r7
   1f36e:	4648      	mov	r0, r9
   1f370:	9701      	str	r7, [sp, #4]
   1f372:	9700      	str	r7, [sp, #0]
   1f374:	f7ff f9be 	bl	1e6f4 <at_interface_write>
   1f378:	4681      	mov	r9, r0
   1f37a:	4630      	mov	r0, r6
   1f37c:	f007 fa8e 	bl	2689c <strlen>
   1f380:	4548      	cmp	r0, r9
   1f382:	f040 8083 	bne.w	1f48c <__kernel_ram_size+0x164>
   1f386:	463b      	mov	r3, r7
   1f388:	e9cd 7700 	strd	r7, r7, [sp]
   1f38c:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f390:	4631      	mov	r1, r6
   1f392:	f8d8 0000 	ldr.w	r0, [r8]
   1f396:	f7ff fb01 	bl	1e99c <at_interface_read>
   1f39a:	4607      	mov	r7, r0
   1f39c:	4845      	ldr	r0, [pc, #276]	; (1f4b4 <__kernel_ram_size+0x18c>)
   1f39e:	f007 fa7d 	bl	2689c <strlen>
   1f3a2:	4287      	cmp	r7, r0
   1f3a4:	da5b      	bge.n	1f45e <__kernel_ram_size+0x136>
   1f3a6:	4844      	ldr	r0, [pc, #272]	; (1f4b8 <__kernel_ram_size+0x190>)
   1f3a8:	f007 fa78 	bl	2689c <strlen>
   1f3ac:	493d      	ldr	r1, [pc, #244]	; (1f4a4 <__kernel_ram_size+0x17c>)
   1f3ae:	4602      	mov	r2, r0
   1f3b0:	4841      	ldr	r0, [pc, #260]	; (1f4b8 <__kernel_ram_size+0x190>)
   1f3b2:	f007 faa1 	bl	268f8 <strncmp>
   1f3b6:	2800      	cmp	r0, #0
   1f3b8:	d168      	bne.n	1f48c <__kernel_ram_size+0x164>
   1f3ba:	2008      	movs	r0, #8
   1f3bc:	f7f7 fc00 	bl	16bc0 <bsd_os_errno_set>
   1f3c0:	2202      	movs	r2, #2
   1f3c2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1f3c6:	609a      	str	r2, [r3, #8]
   1f3c8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1f3cc:	6883      	ldr	r3, [r0, #8]
   1f3ce:	2b02      	cmp	r3, #2
   1f3d0:	d1a8      	bne.n	1f324 <pdn_interface_close+0x40>
   1f3d2:	4e34      	ldr	r6, [pc, #208]	; (1f4a4 <__kernel_ram_size+0x17c>)
   1f3d4:	4b39      	ldr	r3, [pc, #228]	; (1f4bc <__kernel_ram_size+0x194>)
   1f3d6:	4a35      	ldr	r2, [pc, #212]	; (1f4ac <__kernel_ram_size+0x184>)
   1f3d8:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f3dc:	4630      	mov	r0, r6
   1f3de:	f007 f8bd 	bl	2655c <snprintf>
   1f3e2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1f3e6:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1f3ea:	681b      	ldr	r3, [r3, #0]
   1f3ec:	4a30      	ldr	r2, [pc, #192]	; (1f4b0 <__kernel_ram_size+0x188>)
   1f3ee:	4430      	add	r0, r6
   1f3f0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 1f4c0 <__kernel_ram_size+0x198>
   1f3f4:	f007 f8b2 	bl	2655c <snprintf>
   1f3f8:	4630      	mov	r0, r6
   1f3fa:	f8d8 9000 	ldr.w	r9, [r8]
   1f3fe:	2700      	movs	r7, #0
   1f400:	f007 fa4c 	bl	2689c <strlen>
   1f404:	4631      	mov	r1, r6
   1f406:	4602      	mov	r2, r0
   1f408:	463b      	mov	r3, r7
   1f40a:	4648      	mov	r0, r9
   1f40c:	9701      	str	r7, [sp, #4]
   1f40e:	9700      	str	r7, [sp, #0]
   1f410:	f7ff f970 	bl	1e6f4 <at_interface_write>
   1f414:	4681      	mov	r9, r0
   1f416:	4630      	mov	r0, r6
   1f418:	f007 fa40 	bl	2689c <strlen>
   1f41c:	4548      	cmp	r0, r9
   1f41e:	d139      	bne.n	1f494 <__kernel_ram_size+0x16c>
   1f420:	463b      	mov	r3, r7
   1f422:	e9cd 7700 	strd	r7, r7, [sp]
   1f426:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f42a:	4631      	mov	r1, r6
   1f42c:	f8d8 0000 	ldr.w	r0, [r8]
   1f430:	f7ff fab4 	bl	1e99c <at_interface_read>
   1f434:	4607      	mov	r7, r0
   1f436:	481f      	ldr	r0, [pc, #124]	; (1f4b4 <__kernel_ram_size+0x18c>)
   1f438:	f007 fa30 	bl	2689c <strlen>
   1f43c:	4287      	cmp	r7, r0
   1f43e:	db16      	blt.n	1f46e <__kernel_ram_size+0x146>
   1f440:	4602      	mov	r2, r0
   1f442:	4631      	mov	r1, r6
   1f444:	481b      	ldr	r0, [pc, #108]	; (1f4b4 <__kernel_ram_size+0x18c>)
   1f446:	f007 fa57 	bl	268f8 <strncmp>
   1f44a:	b980      	cbnz	r0, 1f46e <__kernel_ram_size+0x146>
   1f44c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1f450:	e768      	b.n	1f324 <pdn_interface_close+0x40>
   1f452:	2009      	movs	r0, #9
   1f454:	f7f7 fbb4 	bl	16bc0 <bsd_os_errno_set>
   1f458:	f04f 30ff 	mov.w	r0, #4294967295
   1f45c:	e768      	b.n	1f330 <__kernel_ram_size+0x8>
   1f45e:	4602      	mov	r2, r0
   1f460:	4631      	mov	r1, r6
   1f462:	4814      	ldr	r0, [pc, #80]	; (1f4b4 <__kernel_ram_size+0x18c>)
   1f464:	f007 fa48 	bl	268f8 <strncmp>
   1f468:	2800      	cmp	r0, #0
   1f46a:	d0a9      	beq.n	1f3c0 <__kernel_ram_size+0x98>
   1f46c:	e79b      	b.n	1f3a6 <__kernel_ram_size+0x7e>
   1f46e:	4812      	ldr	r0, [pc, #72]	; (1f4b8 <__kernel_ram_size+0x190>)
   1f470:	f007 fa14 	bl	2689c <strlen>
   1f474:	490b      	ldr	r1, [pc, #44]	; (1f4a4 <__kernel_ram_size+0x17c>)
   1f476:	4602      	mov	r2, r0
   1f478:	480f      	ldr	r0, [pc, #60]	; (1f4b8 <__kernel_ram_size+0x190>)
   1f47a:	f007 fa3d 	bl	268f8 <strncmp>
   1f47e:	b948      	cbnz	r0, 1f494 <__kernel_ram_size+0x16c>
   1f480:	2008      	movs	r0, #8
   1f482:	f7f7 fb9d 	bl	16bc0 <bsd_os_errno_set>
   1f486:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1f48a:	e74b      	b.n	1f324 <pdn_interface_close+0x40>
   1f48c:	2005      	movs	r0, #5
   1f48e:	f7f7 fb97 	bl	16bc0 <bsd_os_errno_set>
   1f492:	e795      	b.n	1f3c0 <__kernel_ram_size+0x98>
   1f494:	2005      	movs	r0, #5
   1f496:	f7f7 fb93 	bl	16bc0 <bsd_os_errno_set>
   1f49a:	e7d7      	b.n	1f44c <__kernel_ram_size+0x124>
   1f49c:	789a0000 	.word	0x789a0000
   1f4a0:	20021bc0 	.word	0x20021bc0
   1f4a4:	20021ac0 	.word	0x20021ac0
   1f4a8:	0002f2e4 	.word	0x0002f2e4
   1f4ac:	0002f388 	.word	0x0002f388
   1f4b0:	0002f348 	.word	0x0002f348
   1f4b4:	0002f31c 	.word	0x0002f31c
   1f4b8:	0002f398 	.word	0x0002f398
   1f4bc:	0002f2f0 	.word	0x0002f2f0
   1f4c0:	20021abc 	.word	0x20021abc

0001f4c4 <pdn_interface_setopt>:
   1f4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f4c6:	f240 2402 	movw	r4, #514	; 0x202
   1f4ca:	42a1      	cmp	r1, r4
   1f4cc:	9e06      	ldr	r6, [sp, #24]
   1f4ce:	f040 8090 	bne.w	1f5f2 <pdn_interface_setopt+0x12e>
   1f4d2:	461d      	mov	r5, r3
   1f4d4:	2b00      	cmp	r3, #0
   1f4d6:	f000 808c 	beq.w	1f5f2 <pdn_interface_setopt+0x12e>
   1f4da:	2e00      	cmp	r6, #0
   1f4dc:	f000 8089 	beq.w	1f5f2 <pdn_interface_setopt+0x12e>
   1f4e0:	0c03      	lsrs	r3, r0, #16
   1f4e2:	494d      	ldr	r1, [pc, #308]	; (1f618 <pdn_interface_setopt+0x154>)
   1f4e4:	041b      	lsls	r3, r3, #16
   1f4e6:	428b      	cmp	r3, r1
   1f4e8:	d005      	beq.n	1f4f6 <pdn_interface_setopt+0x32>
   1f4ea:	2009      	movs	r0, #9
   1f4ec:	f7f7 fb68 	bl	16bc0 <bsd_os_errno_set>
   1f4f0:	f04f 30ff 	mov.w	r0, #4294967295
   1f4f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f4f6:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1f4fa:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1f4fe:	2c09      	cmp	r4, #9
   1f500:	dcf3      	bgt.n	1f4ea <pdn_interface_setopt+0x26>
   1f502:	4f46      	ldr	r7, [pc, #280]	; (1f61c <pdn_interface_setopt+0x158>)
   1f504:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f508:	2b00      	cmp	r3, #0
   1f50a:	d0ee      	beq.n	1f4ea <pdn_interface_setopt+0x26>
   1f50c:	6899      	ldr	r1, [r3, #8]
   1f50e:	2900      	cmp	r1, #0
   1f510:	d0eb      	beq.n	1f4ea <pdn_interface_setopt+0x26>
   1f512:	2a01      	cmp	r2, #1
   1f514:	d049      	beq.n	1f5aa <pdn_interface_setopt+0xe6>
   1f516:	2a04      	cmp	r2, #4
   1f518:	d145      	bne.n	1f5a6 <pdn_interface_setopt+0xe2>
   1f51a:	689a      	ldr	r2, [r3, #8]
   1f51c:	2a00      	cmp	r2, #0
   1f51e:	d04c      	beq.n	1f5ba <pdn_interface_setopt+0xf6>
   1f520:	689a      	ldr	r2, [r3, #8]
   1f522:	2a03      	cmp	r2, #3
   1f524:	d049      	beq.n	1f5ba <pdn_interface_setopt+0xf6>
   1f526:	689b      	ldr	r3, [r3, #8]
   1f528:	2b04      	cmp	r3, #4
   1f52a:	d046      	beq.n	1f5ba <pdn_interface_setopt+0xf6>
   1f52c:	4628      	mov	r0, r5
   1f52e:	f007 f9b5 	bl	2689c <strlen>
   1f532:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f536:	3001      	adds	r0, #1
   1f538:	f105 0664 	add.w	r6, r5, #100	; 0x64
   1f53c:	6158      	str	r0, [r3, #20]
   1f53e:	4630      	mov	r0, r6
   1f540:	f007 f9ac 	bl	2689c <strlen>
   1f544:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f548:	3001      	adds	r0, #1
   1f54a:	6198      	str	r0, [r3, #24]
   1f54c:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
   1f550:	3b01      	subs	r3, #1
   1f552:	2b01      	cmp	r3, #1
   1f554:	d84b      	bhi.n	1f5ee <pdn_interface_setopt+0x12a>
   1f556:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   1f55a:	6943      	ldr	r3, [r0, #20]
   1f55c:	2b63      	cmp	r3, #99	; 0x63
   1f55e:	dc46      	bgt.n	1f5ee <pdn_interface_setopt+0x12a>
   1f560:	6982      	ldr	r2, [r0, #24]
   1f562:	2a63      	cmp	r2, #99	; 0x63
   1f564:	dc43      	bgt.n	1f5ee <pdn_interface_setopt+0x12a>
   1f566:	4413      	add	r3, r2
   1f568:	f103 0120 	add.w	r1, r3, #32
   1f56c:	f001 fe7a 	bl	21264 <nrf_realloc>
   1f570:	4603      	mov	r3, r0
   1f572:	2800      	cmp	r0, #0
   1f574:	d048      	beq.n	1f608 <pdn_interface_setopt+0x144>
   1f576:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   1f57a:	6941      	ldr	r1, [r0, #20]
   1f57c:	462b      	mov	r3, r5
   1f57e:	4a28      	ldr	r2, [pc, #160]	; (1f620 <pdn_interface_setopt+0x15c>)
   1f580:	3020      	adds	r0, #32
   1f582:	f006 ffeb 	bl	2655c <snprintf>
   1f586:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   1f58a:	3021      	adds	r0, #33	; 0x21
   1f58c:	4633      	mov	r3, r6
   1f58e:	6991      	ldr	r1, [r2, #24]
   1f590:	4410      	add	r0, r2
   1f592:	4a23      	ldr	r2, [pc, #140]	; (1f620 <pdn_interface_setopt+0x15c>)
   1f594:	f006 ffe2 	bl	2655c <snprintf>
   1f598:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f59c:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
   1f5a0:	2000      	movs	r0, #0
   1f5a2:	741a      	strb	r2, [r3, #16]
   1f5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f5a6:	202d      	movs	r0, #45	; 0x2d
   1f5a8:	e7a0      	b.n	1f4ec <pdn_interface_setopt+0x28>
   1f5aa:	689a      	ldr	r2, [r3, #8]
   1f5ac:	b12a      	cbz	r2, 1f5ba <pdn_interface_setopt+0xf6>
   1f5ae:	689a      	ldr	r2, [r3, #8]
   1f5b0:	2a03      	cmp	r2, #3
   1f5b2:	d002      	beq.n	1f5ba <pdn_interface_setopt+0xf6>
   1f5b4:	689a      	ldr	r2, [r3, #8]
   1f5b6:	2a04      	cmp	r2, #4
   1f5b8:	d101      	bne.n	1f5be <pdn_interface_setopt+0xfa>
   1f5ba:	200e      	movs	r0, #14
   1f5bc:	e796      	b.n	1f4ec <pdn_interface_setopt+0x28>
   1f5be:	08b2      	lsrs	r2, r6, #2
   1f5c0:	1e51      	subs	r1, r2, #1
   1f5c2:	2901      	cmp	r1, #1
   1f5c4:	d813      	bhi.n	1f5ee <pdn_interface_setopt+0x12a>
   1f5c6:	07b1      	lsls	r1, r6, #30
   1f5c8:	d111      	bne.n	1f5ee <pdn_interface_setopt+0x12a>
   1f5ca:	6829      	ldr	r1, [r5, #0]
   1f5cc:	2902      	cmp	r1, #2
   1f5ce:	d016      	beq.n	1f5fe <pdn_interface_setopt+0x13a>
   1f5d0:	290a      	cmp	r1, #10
   1f5d2:	d10c      	bne.n	1f5ee <pdn_interface_setopt+0x12a>
   1f5d4:	2102      	movs	r1, #2
   1f5d6:	2a02      	cmp	r2, #2
   1f5d8:	d106      	bne.n	1f5e8 <pdn_interface_setopt+0x124>
   1f5da:	686a      	ldr	r2, [r5, #4]
   1f5dc:	2a02      	cmp	r2, #2
   1f5de:	d010      	beq.n	1f602 <pdn_interface_setopt+0x13e>
   1f5e0:	2a0a      	cmp	r2, #10
   1f5e2:	d104      	bne.n	1f5ee <pdn_interface_setopt+0x12a>
   1f5e4:	f041 0102 	orr.w	r1, r1, #2
   1f5e8:	60d9      	str	r1, [r3, #12]
   1f5ea:	2000      	movs	r0, #0
   1f5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f5ee:	2016      	movs	r0, #22
   1f5f0:	e77c      	b.n	1f4ec <pdn_interface_setopt+0x28>
   1f5f2:	2016      	movs	r0, #22
   1f5f4:	f7f7 fae4 	bl	16bc0 <bsd_os_errno_set>
   1f5f8:	f04f 30ff 	mov.w	r0, #4294967295
   1f5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f5fe:	2101      	movs	r1, #1
   1f600:	e7e9      	b.n	1f5d6 <pdn_interface_setopt+0x112>
   1f602:	f041 0101 	orr.w	r1, r1, #1
   1f606:	e7ef      	b.n	1f5e8 <pdn_interface_setopt+0x124>
   1f608:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   1f60c:	200c      	movs	r0, #12
   1f60e:	6153      	str	r3, [r2, #20]
   1f610:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   1f614:	6193      	str	r3, [r2, #24]
   1f616:	e769      	b.n	1f4ec <pdn_interface_setopt+0x28>
   1f618:	789a0000 	.word	0x789a0000
   1f61c:	20021bc0 	.word	0x20021bc0
   1f620:	0002f388 	.word	0x0002f388

0001f624 <pdn_interface_getopt>:
   1f624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f628:	f240 2402 	movw	r4, #514	; 0x202
   1f62c:	b083      	sub	sp, #12
   1f62e:	42a1      	cmp	r1, r4
   1f630:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1f632:	f040 808f 	bne.w	1f754 <pdn_interface_getopt+0x130>
   1f636:	461e      	mov	r6, r3
   1f638:	2b00      	cmp	r3, #0
   1f63a:	f000 808b 	beq.w	1f754 <pdn_interface_getopt+0x130>
   1f63e:	2d00      	cmp	r5, #0
   1f640:	f000 8088 	beq.w	1f754 <pdn_interface_getopt+0x130>
   1f644:	0c03      	lsrs	r3, r0, #16
   1f646:	4954      	ldr	r1, [pc, #336]	; (1f798 <pdn_interface_getopt+0x174>)
   1f648:	041b      	lsls	r3, r3, #16
   1f64a:	428b      	cmp	r3, r1
   1f64c:	f040 8084 	bne.w	1f758 <pdn_interface_getopt+0x134>
   1f650:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1f654:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1f658:	2c09      	cmp	r4, #9
   1f65a:	dc7d      	bgt.n	1f758 <pdn_interface_getopt+0x134>
   1f65c:	4b4f      	ldr	r3, [pc, #316]	; (1f79c <pdn_interface_getopt+0x178>)
   1f65e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1f662:	2b00      	cmp	r3, #0
   1f664:	d078      	beq.n	1f758 <pdn_interface_getopt+0x134>
   1f666:	6899      	ldr	r1, [r3, #8]
   1f668:	2900      	cmp	r1, #0
   1f66a:	d075      	beq.n	1f758 <pdn_interface_getopt+0x134>
   1f66c:	2a02      	cmp	r2, #2
   1f66e:	d04e      	beq.n	1f70e <pdn_interface_getopt+0xea>
   1f670:	2a03      	cmp	r2, #3
   1f672:	d009      	beq.n	1f688 <pdn_interface_getopt+0x64>
   1f674:	2a01      	cmp	r2, #1
   1f676:	d054      	beq.n	1f722 <pdn_interface_getopt+0xfe>
   1f678:	202d      	movs	r0, #45	; 0x2d
   1f67a:	f7f7 faa1 	bl	16bc0 <bsd_os_errno_set>
   1f67e:	f04f 30ff 	mov.w	r0, #4294967295
   1f682:	b003      	add	sp, #12
   1f684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f688:	682b      	ldr	r3, [r5, #0]
   1f68a:	2b00      	cmp	r3, #0
   1f68c:	d062      	beq.n	1f754 <pdn_interface_getopt+0x130>
   1f68e:	4b44      	ldr	r3, [pc, #272]	; (1f7a0 <pdn_interface_getopt+0x17c>)
   1f690:	4a44      	ldr	r2, [pc, #272]	; (1f7a4 <pdn_interface_getopt+0x180>)
   1f692:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f696:	4844      	ldr	r0, [pc, #272]	; (1f7a8 <pdn_interface_getopt+0x184>)
   1f698:	f8df 8118 	ldr.w	r8, [pc, #280]	; 1f7b4 <pdn_interface_getopt+0x190>
   1f69c:	f006 ff5e 	bl	2655c <snprintf>
   1f6a0:	4841      	ldr	r0, [pc, #260]	; (1f7a8 <pdn_interface_getopt+0x184>)
   1f6a2:	f8d8 9000 	ldr.w	r9, [r8]
   1f6a6:	2700      	movs	r7, #0
   1f6a8:	f007 f8f8 	bl	2689c <strlen>
   1f6ac:	463b      	mov	r3, r7
   1f6ae:	4602      	mov	r2, r0
   1f6b0:	493d      	ldr	r1, [pc, #244]	; (1f7a8 <pdn_interface_getopt+0x184>)
   1f6b2:	4648      	mov	r0, r9
   1f6b4:	9701      	str	r7, [sp, #4]
   1f6b6:	9700      	str	r7, [sp, #0]
   1f6b8:	f7ff f81c 	bl	1e6f4 <at_interface_write>
   1f6bc:	4681      	mov	r9, r0
   1f6be:	483a      	ldr	r0, [pc, #232]	; (1f7a8 <pdn_interface_getopt+0x184>)
   1f6c0:	f007 f8ec 	bl	2689c <strlen>
   1f6c4:	4548      	cmp	r0, r9
   1f6c6:	d161      	bne.n	1f78c <pdn_interface_getopt+0x168>
   1f6c8:	463b      	mov	r3, r7
   1f6ca:	e9cd 7700 	strd	r7, r7, [sp]
   1f6ce:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f6d2:	4935      	ldr	r1, [pc, #212]	; (1f7a8 <pdn_interface_getopt+0x184>)
   1f6d4:	f8d8 0000 	ldr.w	r0, [r8]
   1f6d8:	f7ff f960 	bl	1e99c <at_interface_read>
   1f6dc:	4607      	mov	r7, r0
   1f6de:	4833      	ldr	r0, [pc, #204]	; (1f7ac <pdn_interface_getopt+0x188>)
   1f6e0:	f007 f8dc 	bl	2689c <strlen>
   1f6e4:	4287      	cmp	r7, r0
   1f6e6:	db3d      	blt.n	1f764 <pdn_interface_getopt+0x140>
   1f6e8:	4602      	mov	r2, r0
   1f6ea:	492f      	ldr	r1, [pc, #188]	; (1f7a8 <pdn_interface_getopt+0x184>)
   1f6ec:	482f      	ldr	r0, [pc, #188]	; (1f7ac <pdn_interface_getopt+0x188>)
   1f6ee:	f007 f903 	bl	268f8 <strncmp>
   1f6f2:	4607      	mov	r7, r0
   1f6f4:	2800      	cmp	r0, #0
   1f6f6:	d135      	bne.n	1f764 <pdn_interface_getopt+0x140>
   1f6f8:	4620      	mov	r0, r4
   1f6fa:	492b      	ldr	r1, [pc, #172]	; (1f7a8 <pdn_interface_getopt+0x184>)
   1f6fc:	f7ff fa38 	bl	1eb70 <pdn_state_get_parser>
   1f700:	2800      	cmp	r0, #0
   1f702:	dbba      	blt.n	1f67a <pdn_interface_getopt+0x56>
   1f704:	2301      	movs	r3, #1
   1f706:	7030      	strb	r0, [r6, #0]
   1f708:	4638      	mov	r0, r7
   1f70a:	602b      	str	r3, [r5, #0]
   1f70c:	e7b9      	b.n	1f682 <pdn_interface_getopt+0x5e>
   1f70e:	682a      	ldr	r2, [r5, #0]
   1f710:	b302      	cbz	r2, 1f754 <pdn_interface_getopt+0x130>
   1f712:	2201      	movs	r2, #1
   1f714:	2000      	movs	r0, #0
   1f716:	681b      	ldr	r3, [r3, #0]
   1f718:	7033      	strb	r3, [r6, #0]
   1f71a:	602a      	str	r2, [r5, #0]
   1f71c:	b003      	add	sp, #12
   1f71e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f722:	689a      	ldr	r2, [r3, #8]
   1f724:	b1a2      	cbz	r2, 1f750 <pdn_interface_getopt+0x12c>
   1f726:	689a      	ldr	r2, [r3, #8]
   1f728:	2a04      	cmp	r2, #4
   1f72a:	d011      	beq.n	1f750 <pdn_interface_getopt+0x12c>
   1f72c:	682a      	ldr	r2, [r5, #0]
   1f72e:	2a07      	cmp	r2, #7
   1f730:	d910      	bls.n	1f754 <pdn_interface_getopt+0x130>
   1f732:	f012 0203 	ands.w	r2, r2, #3
   1f736:	d10d      	bne.n	1f754 <pdn_interface_getopt+0x130>
   1f738:	68db      	ldr	r3, [r3, #12]
   1f73a:	0799      	lsls	r1, r3, #30
   1f73c:	d421      	bmi.n	1f782 <pdn_interface_getopt+0x15e>
   1f73e:	2104      	movs	r1, #4
   1f740:	07db      	lsls	r3, r3, #31
   1f742:	d502      	bpl.n	1f74a <pdn_interface_getopt+0x126>
   1f744:	2302      	movs	r3, #2
   1f746:	50b3      	str	r3, [r6, r2]
   1f748:	460a      	mov	r2, r1
   1f74a:	602a      	str	r2, [r5, #0]
   1f74c:	2000      	movs	r0, #0
   1f74e:	e798      	b.n	1f682 <pdn_interface_getopt+0x5e>
   1f750:	200e      	movs	r0, #14
   1f752:	e792      	b.n	1f67a <pdn_interface_getopt+0x56>
   1f754:	2016      	movs	r0, #22
   1f756:	e790      	b.n	1f67a <pdn_interface_getopt+0x56>
   1f758:	2009      	movs	r0, #9
   1f75a:	f7f7 fa31 	bl	16bc0 <bsd_os_errno_set>
   1f75e:	f04f 30ff 	mov.w	r0, #4294967295
   1f762:	e78e      	b.n	1f682 <pdn_interface_getopt+0x5e>
   1f764:	4812      	ldr	r0, [pc, #72]	; (1f7b0 <pdn_interface_getopt+0x18c>)
   1f766:	f007 f899 	bl	2689c <strlen>
   1f76a:	490f      	ldr	r1, [pc, #60]	; (1f7a8 <pdn_interface_getopt+0x184>)
   1f76c:	4602      	mov	r2, r0
   1f76e:	4810      	ldr	r0, [pc, #64]	; (1f7b0 <pdn_interface_getopt+0x18c>)
   1f770:	f007 f8c2 	bl	268f8 <strncmp>
   1f774:	b950      	cbnz	r0, 1f78c <pdn_interface_getopt+0x168>
   1f776:	2008      	movs	r0, #8
   1f778:	f7f7 fa22 	bl	16bc0 <bsd_os_errno_set>
   1f77c:	f04f 30ff 	mov.w	r0, #4294967295
   1f780:	e77b      	b.n	1f67a <pdn_interface_getopt+0x56>
   1f782:	220a      	movs	r2, #10
   1f784:	2108      	movs	r1, #8
   1f786:	6032      	str	r2, [r6, #0]
   1f788:	2204      	movs	r2, #4
   1f78a:	e7d9      	b.n	1f740 <pdn_interface_getopt+0x11c>
   1f78c:	2005      	movs	r0, #5
   1f78e:	f7f7 fa17 	bl	16bc0 <bsd_os_errno_set>
   1f792:	f04f 30ff 	mov.w	r0, #4294967295
   1f796:	e770      	b.n	1f67a <pdn_interface_getopt+0x56>
   1f798:	789a0000 	.word	0x789a0000
   1f79c:	20021bc0 	.word	0x20021bc0
   1f7a0:	0002f368 	.word	0x0002f368
   1f7a4:	0002f388 	.word	0x0002f388
   1f7a8:	20021ac0 	.word	0x20021ac0
   1f7ac:	0002f374 	.word	0x0002f374
   1f7b0:	0002f398 	.word	0x0002f398
   1f7b4:	20021abc 	.word	0x20021abc

0001f7b8 <pdn_interface_pdn_id_get>:
   1f7b8:	2900      	cmp	r1, #0
   1f7ba:	f000 82ba 	beq.w	1fd32 <pdn_interface_pdn_id_get+0x57a>
   1f7be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f7c2:	2802      	cmp	r0, #2
   1f7c4:	b083      	sub	sp, #12
   1f7c6:	460e      	mov	r6, r1
   1f7c8:	d067      	beq.n	1f89a <pdn_interface_pdn_id_get+0xe2>
   1f7ca:	280a      	cmp	r0, #10
   1f7cc:	d040      	beq.n	1f850 <pdn_interface_pdn_id_get+0x98>
   1f7ce:	4cae      	ldr	r4, [pc, #696]	; (1fa88 <pdn_interface_pdn_id_get+0x2d0>)
   1f7d0:	6823      	ldr	r3, [r4, #0]
   1f7d2:	b11b      	cbz	r3, 1f7dc <pdn_interface_pdn_id_get+0x24>
   1f7d4:	689b      	ldr	r3, [r3, #8]
   1f7d6:	2b03      	cmp	r3, #3
   1f7d8:	f000 80fc 	beq.w	1f9d4 <pdn_interface_pdn_id_get+0x21c>
   1f7dc:	6863      	ldr	r3, [r4, #4]
   1f7de:	b11b      	cbz	r3, 1f7e8 <pdn_interface_pdn_id_get+0x30>
   1f7e0:	689b      	ldr	r3, [r3, #8]
   1f7e2:	2b03      	cmp	r3, #3
   1f7e4:	f000 80e4 	beq.w	1f9b0 <pdn_interface_pdn_id_get+0x1f8>
   1f7e8:	68a3      	ldr	r3, [r4, #8]
   1f7ea:	b11b      	cbz	r3, 1f7f4 <pdn_interface_pdn_id_get+0x3c>
   1f7ec:	689b      	ldr	r3, [r3, #8]
   1f7ee:	2b03      	cmp	r3, #3
   1f7f0:	f000 80cc 	beq.w	1f98c <pdn_interface_pdn_id_get+0x1d4>
   1f7f4:	68e3      	ldr	r3, [r4, #12]
   1f7f6:	b11b      	cbz	r3, 1f800 <pdn_interface_pdn_id_get+0x48>
   1f7f8:	689b      	ldr	r3, [r3, #8]
   1f7fa:	2b03      	cmp	r3, #3
   1f7fc:	f000 80b4 	beq.w	1f968 <pdn_interface_pdn_id_get+0x1b0>
   1f800:	6923      	ldr	r3, [r4, #16]
   1f802:	b11b      	cbz	r3, 1f80c <pdn_interface_pdn_id_get+0x54>
   1f804:	689b      	ldr	r3, [r3, #8]
   1f806:	2b03      	cmp	r3, #3
   1f808:	f000 80f5 	beq.w	1f9f6 <pdn_interface_pdn_id_get+0x23e>
   1f80c:	6963      	ldr	r3, [r4, #20]
   1f80e:	b11b      	cbz	r3, 1f818 <pdn_interface_pdn_id_get+0x60>
   1f810:	689b      	ldr	r3, [r3, #8]
   1f812:	2b03      	cmp	r3, #3
   1f814:	f000 813c 	beq.w	1fa90 <pdn_interface_pdn_id_get+0x2d8>
   1f818:	69a3      	ldr	r3, [r4, #24]
   1f81a:	b11b      	cbz	r3, 1f824 <pdn_interface_pdn_id_get+0x6c>
   1f81c:	689b      	ldr	r3, [r3, #8]
   1f81e:	2b03      	cmp	r3, #3
   1f820:	f000 811f 	beq.w	1fa62 <pdn_interface_pdn_id_get+0x2aa>
   1f824:	69e3      	ldr	r3, [r4, #28]
   1f826:	b11b      	cbz	r3, 1f830 <pdn_interface_pdn_id_get+0x78>
   1f828:	689b      	ldr	r3, [r3, #8]
   1f82a:	2b03      	cmp	r3, #3
   1f82c:	f000 8107 	beq.w	1fa3e <pdn_interface_pdn_id_get+0x286>
   1f830:	6a23      	ldr	r3, [r4, #32]
   1f832:	b11b      	cbz	r3, 1f83c <pdn_interface_pdn_id_get+0x84>
   1f834:	689b      	ldr	r3, [r3, #8]
   1f836:	2b03      	cmp	r3, #3
   1f838:	f000 80ef 	beq.w	1fa1a <pdn_interface_pdn_id_get+0x262>
   1f83c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f83e:	b113      	cbz	r3, 1f846 <pdn_interface_pdn_id_get+0x8e>
   1f840:	689b      	ldr	r3, [r3, #8]
   1f842:	2b03      	cmp	r3, #3
   1f844:	d07e      	beq.n	1f944 <pdn_interface_pdn_id_get+0x18c>
   1f846:	f04f 30ff 	mov.w	r0, #4294967295
   1f84a:	b003      	add	sp, #12
   1f84c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f850:	2500      	movs	r5, #0
   1f852:	4c8e      	ldr	r4, [pc, #568]	; (1fa8c <pdn_interface_pdn_id_get+0x2d4>)
   1f854:	e002      	b.n	1f85c <pdn_interface_pdn_id_get+0xa4>
   1f856:	3501      	adds	r5, #1
   1f858:	2d0a      	cmp	r5, #10
   1f85a:	d0f4      	beq.n	1f846 <pdn_interface_pdn_id_get+0x8e>
   1f85c:	f854 3f04 	ldr.w	r3, [r4, #4]!
   1f860:	2b00      	cmp	r3, #0
   1f862:	d0f8      	beq.n	1f856 <pdn_interface_pdn_id_get+0x9e>
   1f864:	689b      	ldr	r3, [r3, #8]
   1f866:	2b03      	cmp	r3, #3
   1f868:	d1f5      	bne.n	1f856 <pdn_interface_pdn_id_get+0x9e>
   1f86a:	4630      	mov	r0, r6
   1f86c:	f007 f816 	bl	2689c <strlen>
   1f870:	6823      	ldr	r3, [r4, #0]
   1f872:	69da      	ldr	r2, [r3, #28]
   1f874:	4290      	cmp	r0, r2
   1f876:	d1ee      	bne.n	1f856 <pdn_interface_pdn_id_get+0x9e>
   1f878:	e9d3 1705 	ldrd	r1, r7, [r3, #20]
   1f87c:	4439      	add	r1, r7
   1f87e:	3120      	adds	r1, #32
   1f880:	4602      	mov	r2, r0
   1f882:	4419      	add	r1, r3
   1f884:	4630      	mov	r0, r6
   1f886:	f007 f837 	bl	268f8 <strncmp>
   1f88a:	2800      	cmp	r0, #0
   1f88c:	d1e3      	bne.n	1f856 <pdn_interface_pdn_id_get+0x9e>
   1f88e:	6823      	ldr	r3, [r4, #0]
   1f890:	68da      	ldr	r2, [r3, #12]
   1f892:	0792      	lsls	r2, r2, #30
   1f894:	f100 8128 	bmi.w	1fae8 <pdn_interface_pdn_id_get+0x330>
   1f898:	e7dd      	b.n	1f856 <pdn_interface_pdn_id_get+0x9e>
   1f89a:	4c7b      	ldr	r4, [pc, #492]	; (1fa88 <pdn_interface_pdn_id_get+0x2d0>)
   1f89c:	6823      	ldr	r3, [r4, #0]
   1f89e:	b11b      	cbz	r3, 1f8a8 <pdn_interface_pdn_id_get+0xf0>
   1f8a0:	689b      	ldr	r3, [r3, #8]
   1f8a2:	2b03      	cmp	r3, #3
   1f8a4:	f000 822a 	beq.w	1fcfc <pdn_interface_pdn_id_get+0x544>
   1f8a8:	6863      	ldr	r3, [r4, #4]
   1f8aa:	b11b      	cbz	r3, 1f8b4 <pdn_interface_pdn_id_get+0xfc>
   1f8ac:	689b      	ldr	r3, [r3, #8]
   1f8ae:	2b03      	cmp	r3, #3
   1f8b0:	f000 8209 	beq.w	1fcc6 <pdn_interface_pdn_id_get+0x50e>
   1f8b4:	68a3      	ldr	r3, [r4, #8]
   1f8b6:	b11b      	cbz	r3, 1f8c0 <pdn_interface_pdn_id_get+0x108>
   1f8b8:	689b      	ldr	r3, [r3, #8]
   1f8ba:	2b03      	cmp	r3, #3
   1f8bc:	f000 81b3 	beq.w	1fc26 <pdn_interface_pdn_id_get+0x46e>
   1f8c0:	68e3      	ldr	r3, [r4, #12]
   1f8c2:	b11b      	cbz	r3, 1f8cc <pdn_interface_pdn_id_get+0x114>
   1f8c4:	689d      	ldr	r5, [r3, #8]
   1f8c6:	2d03      	cmp	r5, #3
   1f8c8:	f000 81c8 	beq.w	1fc5c <pdn_interface_pdn_id_get+0x4a4>
   1f8cc:	6923      	ldr	r3, [r4, #16]
   1f8ce:	b11b      	cbz	r3, 1f8d8 <pdn_interface_pdn_id_get+0x120>
   1f8d0:	689b      	ldr	r3, [r3, #8]
   1f8d2:	2b03      	cmp	r3, #3
   1f8d4:	f000 80ee 	beq.w	1fab4 <pdn_interface_pdn_id_get+0x2fc>
   1f8d8:	6963      	ldr	r3, [r4, #20]
   1f8da:	b11b      	cbz	r3, 1f8e4 <pdn_interface_pdn_id_get+0x12c>
   1f8dc:	689b      	ldr	r3, [r3, #8]
   1f8de:	2b03      	cmp	r3, #3
   1f8e0:	f000 8150 	beq.w	1fb84 <pdn_interface_pdn_id_get+0x3cc>
   1f8e4:	69a3      	ldr	r3, [r4, #24]
   1f8e6:	b11b      	cbz	r3, 1f8f0 <pdn_interface_pdn_id_get+0x138>
   1f8e8:	689b      	ldr	r3, [r3, #8]
   1f8ea:	2b03      	cmp	r3, #3
   1f8ec:	f000 8165 	beq.w	1fbba <pdn_interface_pdn_id_get+0x402>
   1f8f0:	69e3      	ldr	r3, [r4, #28]
   1f8f2:	b11b      	cbz	r3, 1f8fc <pdn_interface_pdn_id_get+0x144>
   1f8f4:	689b      	ldr	r3, [r3, #8]
   1f8f6:	2b03      	cmp	r3, #3
   1f8f8:	f000 817a 	beq.w	1fbf0 <pdn_interface_pdn_id_get+0x438>
   1f8fc:	6a23      	ldr	r3, [r4, #32]
   1f8fe:	b11b      	cbz	r3, 1f908 <pdn_interface_pdn_id_get+0x150>
   1f900:	689b      	ldr	r3, [r3, #8]
   1f902:	2b03      	cmp	r3, #3
   1f904:	f000 81c4 	beq.w	1fc90 <pdn_interface_pdn_id_get+0x4d8>
   1f908:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f90a:	2b00      	cmp	r3, #0
   1f90c:	d09b      	beq.n	1f846 <pdn_interface_pdn_id_get+0x8e>
   1f90e:	689b      	ldr	r3, [r3, #8]
   1f910:	2b03      	cmp	r3, #3
   1f912:	d198      	bne.n	1f846 <pdn_interface_pdn_id_get+0x8e>
   1f914:	4630      	mov	r0, r6
   1f916:	f006 ffc1 	bl	2689c <strlen>
   1f91a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f91c:	69da      	ldr	r2, [r3, #28]
   1f91e:	4290      	cmp	r0, r2
   1f920:	d191      	bne.n	1f846 <pdn_interface_pdn_id_get+0x8e>
   1f922:	e9d3 5105 	ldrd	r5, r1, [r3, #20]
   1f926:	4429      	add	r1, r5
   1f928:	3120      	adds	r1, #32
   1f92a:	4602      	mov	r2, r0
   1f92c:	4419      	add	r1, r3
   1f92e:	4630      	mov	r0, r6
   1f930:	f006 ffe2 	bl	268f8 <strncmp>
   1f934:	2800      	cmp	r0, #0
   1f936:	d186      	bne.n	1f846 <pdn_interface_pdn_id_get+0x8e>
   1f938:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f93a:	68da      	ldr	r2, [r3, #12]
   1f93c:	07d2      	lsls	r2, r2, #31
   1f93e:	d582      	bpl.n	1f846 <pdn_interface_pdn_id_get+0x8e>
   1f940:	2509      	movs	r5, #9
   1f942:	e0d1      	b.n	1fae8 <pdn_interface_pdn_id_get+0x330>
   1f944:	4630      	mov	r0, r6
   1f946:	f006 ffa9 	bl	2689c <strlen>
   1f94a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f94c:	69da      	ldr	r2, [r3, #28]
   1f94e:	4290      	cmp	r0, r2
   1f950:	f47f af79 	bne.w	1f846 <pdn_interface_pdn_id_get+0x8e>
   1f954:	e9d3 1405 	ldrd	r1, r4, [r3, #20]
   1f958:	4421      	add	r1, r4
   1f95a:	3120      	adds	r1, #32
   1f95c:	4602      	mov	r2, r0
   1f95e:	4419      	add	r1, r3
   1f960:	4630      	mov	r0, r6
   1f962:	f006 ffc9 	bl	268f8 <strncmp>
   1f966:	e76e      	b.n	1f846 <pdn_interface_pdn_id_get+0x8e>
   1f968:	4630      	mov	r0, r6
   1f96a:	f006 ff97 	bl	2689c <strlen>
   1f96e:	68e3      	ldr	r3, [r4, #12]
   1f970:	69da      	ldr	r2, [r3, #28]
   1f972:	4290      	cmp	r0, r2
   1f974:	f47f af44 	bne.w	1f800 <pdn_interface_pdn_id_get+0x48>
   1f978:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1f97c:	4429      	add	r1, r5
   1f97e:	3120      	adds	r1, #32
   1f980:	4602      	mov	r2, r0
   1f982:	4419      	add	r1, r3
   1f984:	4630      	mov	r0, r6
   1f986:	f006 ffb7 	bl	268f8 <strncmp>
   1f98a:	e739      	b.n	1f800 <pdn_interface_pdn_id_get+0x48>
   1f98c:	4630      	mov	r0, r6
   1f98e:	f006 ff85 	bl	2689c <strlen>
   1f992:	68a3      	ldr	r3, [r4, #8]
   1f994:	69da      	ldr	r2, [r3, #28]
   1f996:	4290      	cmp	r0, r2
   1f998:	f47f af2c 	bne.w	1f7f4 <pdn_interface_pdn_id_get+0x3c>
   1f99c:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1f9a0:	4429      	add	r1, r5
   1f9a2:	3120      	adds	r1, #32
   1f9a4:	4602      	mov	r2, r0
   1f9a6:	4419      	add	r1, r3
   1f9a8:	4630      	mov	r0, r6
   1f9aa:	f006 ffa5 	bl	268f8 <strncmp>
   1f9ae:	e721      	b.n	1f7f4 <pdn_interface_pdn_id_get+0x3c>
   1f9b0:	4630      	mov	r0, r6
   1f9b2:	f006 ff73 	bl	2689c <strlen>
   1f9b6:	6863      	ldr	r3, [r4, #4]
   1f9b8:	69da      	ldr	r2, [r3, #28]
   1f9ba:	4290      	cmp	r0, r2
   1f9bc:	f47f af14 	bne.w	1f7e8 <pdn_interface_pdn_id_get+0x30>
   1f9c0:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1f9c4:	4429      	add	r1, r5
   1f9c6:	3120      	adds	r1, #32
   1f9c8:	4602      	mov	r2, r0
   1f9ca:	4419      	add	r1, r3
   1f9cc:	4630      	mov	r0, r6
   1f9ce:	f006 ff93 	bl	268f8 <strncmp>
   1f9d2:	e709      	b.n	1f7e8 <pdn_interface_pdn_id_get+0x30>
   1f9d4:	4608      	mov	r0, r1
   1f9d6:	f006 ff61 	bl	2689c <strlen>
   1f9da:	6823      	ldr	r3, [r4, #0]
   1f9dc:	69da      	ldr	r2, [r3, #28]
   1f9de:	4282      	cmp	r2, r0
   1f9e0:	f47f aefc 	bne.w	1f7dc <pdn_interface_pdn_id_get+0x24>
   1f9e4:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1f9e8:	4401      	add	r1, r0
   1f9ea:	3120      	adds	r1, #32
   1f9ec:	4419      	add	r1, r3
   1f9ee:	4630      	mov	r0, r6
   1f9f0:	f006 ff82 	bl	268f8 <strncmp>
   1f9f4:	e6f2      	b.n	1f7dc <pdn_interface_pdn_id_get+0x24>
   1f9f6:	4630      	mov	r0, r6
   1f9f8:	f006 ff50 	bl	2689c <strlen>
   1f9fc:	6923      	ldr	r3, [r4, #16]
   1f9fe:	69da      	ldr	r2, [r3, #28]
   1fa00:	4290      	cmp	r0, r2
   1fa02:	f47f af03 	bne.w	1f80c <pdn_interface_pdn_id_get+0x54>
   1fa06:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fa0a:	4429      	add	r1, r5
   1fa0c:	3120      	adds	r1, #32
   1fa0e:	4602      	mov	r2, r0
   1fa10:	4419      	add	r1, r3
   1fa12:	4630      	mov	r0, r6
   1fa14:	f006 ff70 	bl	268f8 <strncmp>
   1fa18:	e6f8      	b.n	1f80c <pdn_interface_pdn_id_get+0x54>
   1fa1a:	4630      	mov	r0, r6
   1fa1c:	f006 ff3e 	bl	2689c <strlen>
   1fa20:	6a23      	ldr	r3, [r4, #32]
   1fa22:	69da      	ldr	r2, [r3, #28]
   1fa24:	4290      	cmp	r0, r2
   1fa26:	f47f af09 	bne.w	1f83c <pdn_interface_pdn_id_get+0x84>
   1fa2a:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fa2e:	4429      	add	r1, r5
   1fa30:	3120      	adds	r1, #32
   1fa32:	4602      	mov	r2, r0
   1fa34:	4419      	add	r1, r3
   1fa36:	4630      	mov	r0, r6
   1fa38:	f006 ff5e 	bl	268f8 <strncmp>
   1fa3c:	e6fe      	b.n	1f83c <pdn_interface_pdn_id_get+0x84>
   1fa3e:	4630      	mov	r0, r6
   1fa40:	f006 ff2c 	bl	2689c <strlen>
   1fa44:	69e3      	ldr	r3, [r4, #28]
   1fa46:	69da      	ldr	r2, [r3, #28]
   1fa48:	4290      	cmp	r0, r2
   1fa4a:	f47f aef1 	bne.w	1f830 <pdn_interface_pdn_id_get+0x78>
   1fa4e:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fa52:	4429      	add	r1, r5
   1fa54:	3120      	adds	r1, #32
   1fa56:	4602      	mov	r2, r0
   1fa58:	4419      	add	r1, r3
   1fa5a:	4630      	mov	r0, r6
   1fa5c:	f006 ff4c 	bl	268f8 <strncmp>
   1fa60:	e6e6      	b.n	1f830 <pdn_interface_pdn_id_get+0x78>
   1fa62:	4630      	mov	r0, r6
   1fa64:	f006 ff1a 	bl	2689c <strlen>
   1fa68:	69a3      	ldr	r3, [r4, #24]
   1fa6a:	69da      	ldr	r2, [r3, #28]
   1fa6c:	4290      	cmp	r0, r2
   1fa6e:	f47f aed9 	bne.w	1f824 <pdn_interface_pdn_id_get+0x6c>
   1fa72:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fa76:	4429      	add	r1, r5
   1fa78:	3120      	adds	r1, #32
   1fa7a:	4602      	mov	r2, r0
   1fa7c:	4419      	add	r1, r3
   1fa7e:	4630      	mov	r0, r6
   1fa80:	f006 ff3a 	bl	268f8 <strncmp>
   1fa84:	e6ce      	b.n	1f824 <pdn_interface_pdn_id_get+0x6c>
   1fa86:	bf00      	nop
   1fa88:	20021bc0 	.word	0x20021bc0
   1fa8c:	20021bbc 	.word	0x20021bbc
   1fa90:	4630      	mov	r0, r6
   1fa92:	f006 ff03 	bl	2689c <strlen>
   1fa96:	6963      	ldr	r3, [r4, #20]
   1fa98:	69da      	ldr	r2, [r3, #28]
   1fa9a:	4290      	cmp	r0, r2
   1fa9c:	f47f aebc 	bne.w	1f818 <pdn_interface_pdn_id_get+0x60>
   1faa0:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1faa4:	4429      	add	r1, r5
   1faa6:	3120      	adds	r1, #32
   1faa8:	4602      	mov	r2, r0
   1faaa:	4419      	add	r1, r3
   1faac:	4630      	mov	r0, r6
   1faae:	f006 ff23 	bl	268f8 <strncmp>
   1fab2:	e6b1      	b.n	1f818 <pdn_interface_pdn_id_get+0x60>
   1fab4:	4630      	mov	r0, r6
   1fab6:	f006 fef1 	bl	2689c <strlen>
   1faba:	6923      	ldr	r3, [r4, #16]
   1fabc:	69da      	ldr	r2, [r3, #28]
   1fabe:	4290      	cmp	r0, r2
   1fac0:	f47f af0a 	bne.w	1f8d8 <pdn_interface_pdn_id_get+0x120>
   1fac4:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fac8:	4429      	add	r1, r5
   1faca:	3120      	adds	r1, #32
   1facc:	4602      	mov	r2, r0
   1face:	4419      	add	r1, r3
   1fad0:	4630      	mov	r0, r6
   1fad2:	f006 ff11 	bl	268f8 <strncmp>
   1fad6:	2800      	cmp	r0, #0
   1fad8:	f47f aefe 	bne.w	1f8d8 <pdn_interface_pdn_id_get+0x120>
   1fadc:	6923      	ldr	r3, [r4, #16]
   1fade:	68da      	ldr	r2, [r3, #12]
   1fae0:	07d2      	lsls	r2, r2, #31
   1fae2:	f57f aef9 	bpl.w	1f8d8 <pdn_interface_pdn_id_get+0x120>
   1fae6:	2504      	movs	r5, #4
   1fae8:	6858      	ldr	r0, [r3, #4]
   1faea:	1c43      	adds	r3, r0, #1
   1faec:	f47f aead 	bne.w	1f84a <pdn_interface_pdn_id_get+0x92>
   1faf0:	4e9d      	ldr	r6, [pc, #628]	; (1fd68 <pdn_interface_pdn_id_get+0x5b0>)
   1faf2:	4b9e      	ldr	r3, [pc, #632]	; (1fd6c <pdn_interface_pdn_id_get+0x5b4>)
   1faf4:	4a9e      	ldr	r2, [pc, #632]	; (1fd70 <pdn_interface_pdn_id_get+0x5b8>)
   1faf6:	f44f 7180 	mov.w	r1, #256	; 0x100
   1fafa:	4630      	mov	r0, r6
   1fafc:	f006 fd2e 	bl	2655c <snprintf>
   1fb00:	4c9c      	ldr	r4, [pc, #624]	; (1fd74 <pdn_interface_pdn_id_get+0x5bc>)
   1fb02:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1fb06:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1fb0a:	4a9b      	ldr	r2, [pc, #620]	; (1fd78 <pdn_interface_pdn_id_get+0x5c0>)
   1fb0c:	681b      	ldr	r3, [r3, #0]
   1fb0e:	4430      	add	r0, r6
   1fb10:	f8df 8270 	ldr.w	r8, [pc, #624]	; 1fd84 <pdn_interface_pdn_id_get+0x5cc>
   1fb14:	f006 fd22 	bl	2655c <snprintf>
   1fb18:	4630      	mov	r0, r6
   1fb1a:	f8d8 9000 	ldr.w	r9, [r8]
   1fb1e:	2700      	movs	r7, #0
   1fb20:	f006 febc 	bl	2689c <strlen>
   1fb24:	4631      	mov	r1, r6
   1fb26:	4602      	mov	r2, r0
   1fb28:	463b      	mov	r3, r7
   1fb2a:	4648      	mov	r0, r9
   1fb2c:	9701      	str	r7, [sp, #4]
   1fb2e:	9700      	str	r7, [sp, #0]
   1fb30:	f7fe fde0 	bl	1e6f4 <at_interface_write>
   1fb34:	4681      	mov	r9, r0
   1fb36:	4630      	mov	r0, r6
   1fb38:	f006 feb0 	bl	2689c <strlen>
   1fb3c:	4548      	cmp	r0, r9
   1fb3e:	f040 810b 	bne.w	1fd58 <pdn_interface_pdn_id_get+0x5a0>
   1fb42:	463b      	mov	r3, r7
   1fb44:	f44f 7280 	mov.w	r2, #256	; 0x100
   1fb48:	e9cd 7700 	strd	r7, r7, [sp]
   1fb4c:	4631      	mov	r1, r6
   1fb4e:	f8d8 0000 	ldr.w	r0, [r8]
   1fb52:	f7fe ff23 	bl	1e99c <at_interface_read>
   1fb56:	4607      	mov	r7, r0
   1fb58:	4888      	ldr	r0, [pc, #544]	; (1fd7c <pdn_interface_pdn_id_get+0x5c4>)
   1fb5a:	f006 fe9f 	bl	2689c <strlen>
   1fb5e:	4287      	cmp	r7, r0
   1fb60:	4602      	mov	r2, r0
   1fb62:	f2c0 80e9 	blt.w	1fd38 <pdn_interface_pdn_id_get+0x580>
   1fb66:	4631      	mov	r1, r6
   1fb68:	4884      	ldr	r0, [pc, #528]	; (1fd7c <pdn_interface_pdn_id_get+0x5c4>)
   1fb6a:	f006 fec5 	bl	268f8 <strncmp>
   1fb6e:	2800      	cmp	r0, #0
   1fb70:	f040 80e2 	bne.w	1fd38 <pdn_interface_pdn_id_get+0x580>
   1fb74:	4631      	mov	r1, r6
   1fb76:	4628      	mov	r0, r5
   1fb78:	f7ff f830 	bl	1ebdc <pdn_id_get_parser>
   1fb7c:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1fb80:	6858      	ldr	r0, [r3, #4]
   1fb82:	e662      	b.n	1f84a <pdn_interface_pdn_id_get+0x92>
   1fb84:	4630      	mov	r0, r6
   1fb86:	f006 fe89 	bl	2689c <strlen>
   1fb8a:	6963      	ldr	r3, [r4, #20]
   1fb8c:	69da      	ldr	r2, [r3, #28]
   1fb8e:	4290      	cmp	r0, r2
   1fb90:	f47f aea8 	bne.w	1f8e4 <pdn_interface_pdn_id_get+0x12c>
   1fb94:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fb98:	4429      	add	r1, r5
   1fb9a:	3120      	adds	r1, #32
   1fb9c:	4602      	mov	r2, r0
   1fb9e:	4419      	add	r1, r3
   1fba0:	4630      	mov	r0, r6
   1fba2:	f006 fea9 	bl	268f8 <strncmp>
   1fba6:	2800      	cmp	r0, #0
   1fba8:	f47f ae9c 	bne.w	1f8e4 <pdn_interface_pdn_id_get+0x12c>
   1fbac:	6963      	ldr	r3, [r4, #20]
   1fbae:	68da      	ldr	r2, [r3, #12]
   1fbb0:	07d7      	lsls	r7, r2, #31
   1fbb2:	f57f ae97 	bpl.w	1f8e4 <pdn_interface_pdn_id_get+0x12c>
   1fbb6:	2505      	movs	r5, #5
   1fbb8:	e796      	b.n	1fae8 <pdn_interface_pdn_id_get+0x330>
   1fbba:	4630      	mov	r0, r6
   1fbbc:	f006 fe6e 	bl	2689c <strlen>
   1fbc0:	69a3      	ldr	r3, [r4, #24]
   1fbc2:	69da      	ldr	r2, [r3, #28]
   1fbc4:	4290      	cmp	r0, r2
   1fbc6:	f47f ae93 	bne.w	1f8f0 <pdn_interface_pdn_id_get+0x138>
   1fbca:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fbce:	4429      	add	r1, r5
   1fbd0:	3120      	adds	r1, #32
   1fbd2:	4602      	mov	r2, r0
   1fbd4:	4419      	add	r1, r3
   1fbd6:	4630      	mov	r0, r6
   1fbd8:	f006 fe8e 	bl	268f8 <strncmp>
   1fbdc:	2800      	cmp	r0, #0
   1fbde:	f47f ae87 	bne.w	1f8f0 <pdn_interface_pdn_id_get+0x138>
   1fbe2:	69a3      	ldr	r3, [r4, #24]
   1fbe4:	68da      	ldr	r2, [r3, #12]
   1fbe6:	07d5      	lsls	r5, r2, #31
   1fbe8:	f57f ae82 	bpl.w	1f8f0 <pdn_interface_pdn_id_get+0x138>
   1fbec:	2506      	movs	r5, #6
   1fbee:	e77b      	b.n	1fae8 <pdn_interface_pdn_id_get+0x330>
   1fbf0:	4630      	mov	r0, r6
   1fbf2:	f006 fe53 	bl	2689c <strlen>
   1fbf6:	69e3      	ldr	r3, [r4, #28]
   1fbf8:	69da      	ldr	r2, [r3, #28]
   1fbfa:	4290      	cmp	r0, r2
   1fbfc:	f47f ae7e 	bne.w	1f8fc <pdn_interface_pdn_id_get+0x144>
   1fc00:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fc04:	4429      	add	r1, r5
   1fc06:	3120      	adds	r1, #32
   1fc08:	4602      	mov	r2, r0
   1fc0a:	4419      	add	r1, r3
   1fc0c:	4630      	mov	r0, r6
   1fc0e:	f006 fe73 	bl	268f8 <strncmp>
   1fc12:	2800      	cmp	r0, #0
   1fc14:	f47f ae72 	bne.w	1f8fc <pdn_interface_pdn_id_get+0x144>
   1fc18:	69e3      	ldr	r3, [r4, #28]
   1fc1a:	68da      	ldr	r2, [r3, #12]
   1fc1c:	07d0      	lsls	r0, r2, #31
   1fc1e:	f57f ae6d 	bpl.w	1f8fc <pdn_interface_pdn_id_get+0x144>
   1fc22:	2507      	movs	r5, #7
   1fc24:	e760      	b.n	1fae8 <pdn_interface_pdn_id_get+0x330>
   1fc26:	4630      	mov	r0, r6
   1fc28:	f006 fe38 	bl	2689c <strlen>
   1fc2c:	68a3      	ldr	r3, [r4, #8]
   1fc2e:	69da      	ldr	r2, [r3, #28]
   1fc30:	4290      	cmp	r0, r2
   1fc32:	f47f ae45 	bne.w	1f8c0 <pdn_interface_pdn_id_get+0x108>
   1fc36:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fc3a:	4429      	add	r1, r5
   1fc3c:	3120      	adds	r1, #32
   1fc3e:	4602      	mov	r2, r0
   1fc40:	4419      	add	r1, r3
   1fc42:	4630      	mov	r0, r6
   1fc44:	f006 fe58 	bl	268f8 <strncmp>
   1fc48:	2800      	cmp	r0, #0
   1fc4a:	f47f ae39 	bne.w	1f8c0 <pdn_interface_pdn_id_get+0x108>
   1fc4e:	68a3      	ldr	r3, [r4, #8]
   1fc50:	68da      	ldr	r2, [r3, #12]
   1fc52:	07d0      	lsls	r0, r2, #31
   1fc54:	f57f ae34 	bpl.w	1f8c0 <pdn_interface_pdn_id_get+0x108>
   1fc58:	2502      	movs	r5, #2
   1fc5a:	e745      	b.n	1fae8 <pdn_interface_pdn_id_get+0x330>
   1fc5c:	4630      	mov	r0, r6
   1fc5e:	f006 fe1d 	bl	2689c <strlen>
   1fc62:	68e3      	ldr	r3, [r4, #12]
   1fc64:	69da      	ldr	r2, [r3, #28]
   1fc66:	4290      	cmp	r0, r2
   1fc68:	f47f ae30 	bne.w	1f8cc <pdn_interface_pdn_id_get+0x114>
   1fc6c:	e9d3 1705 	ldrd	r1, r7, [r3, #20]
   1fc70:	4439      	add	r1, r7
   1fc72:	3120      	adds	r1, #32
   1fc74:	4602      	mov	r2, r0
   1fc76:	4419      	add	r1, r3
   1fc78:	4630      	mov	r0, r6
   1fc7a:	f006 fe3d 	bl	268f8 <strncmp>
   1fc7e:	2800      	cmp	r0, #0
   1fc80:	f47f ae24 	bne.w	1f8cc <pdn_interface_pdn_id_get+0x114>
   1fc84:	68e3      	ldr	r3, [r4, #12]
   1fc86:	68da      	ldr	r2, [r3, #12]
   1fc88:	07d1      	lsls	r1, r2, #31
   1fc8a:	f53f af2d 	bmi.w	1fae8 <pdn_interface_pdn_id_get+0x330>
   1fc8e:	e61d      	b.n	1f8cc <pdn_interface_pdn_id_get+0x114>
   1fc90:	4630      	mov	r0, r6
   1fc92:	f006 fe03 	bl	2689c <strlen>
   1fc96:	6a23      	ldr	r3, [r4, #32]
   1fc98:	69da      	ldr	r2, [r3, #28]
   1fc9a:	4290      	cmp	r0, r2
   1fc9c:	f47f ae34 	bne.w	1f908 <pdn_interface_pdn_id_get+0x150>
   1fca0:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fca4:	4429      	add	r1, r5
   1fca6:	3120      	adds	r1, #32
   1fca8:	4602      	mov	r2, r0
   1fcaa:	4419      	add	r1, r3
   1fcac:	4630      	mov	r0, r6
   1fcae:	f006 fe23 	bl	268f8 <strncmp>
   1fcb2:	2800      	cmp	r0, #0
   1fcb4:	f47f ae28 	bne.w	1f908 <pdn_interface_pdn_id_get+0x150>
   1fcb8:	6a23      	ldr	r3, [r4, #32]
   1fcba:	68da      	ldr	r2, [r3, #12]
   1fcbc:	07d1      	lsls	r1, r2, #31
   1fcbe:	f57f ae23 	bpl.w	1f908 <pdn_interface_pdn_id_get+0x150>
   1fcc2:	2508      	movs	r5, #8
   1fcc4:	e710      	b.n	1fae8 <pdn_interface_pdn_id_get+0x330>
   1fcc6:	4630      	mov	r0, r6
   1fcc8:	f006 fde8 	bl	2689c <strlen>
   1fccc:	6863      	ldr	r3, [r4, #4]
   1fcce:	69da      	ldr	r2, [r3, #28]
   1fcd0:	4290      	cmp	r0, r2
   1fcd2:	f47f adef 	bne.w	1f8b4 <pdn_interface_pdn_id_get+0xfc>
   1fcd6:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fcda:	4429      	add	r1, r5
   1fcdc:	3120      	adds	r1, #32
   1fcde:	4602      	mov	r2, r0
   1fce0:	4419      	add	r1, r3
   1fce2:	4630      	mov	r0, r6
   1fce4:	f006 fe08 	bl	268f8 <strncmp>
   1fce8:	2800      	cmp	r0, #0
   1fcea:	f47f ade3 	bne.w	1f8b4 <pdn_interface_pdn_id_get+0xfc>
   1fcee:	6863      	ldr	r3, [r4, #4]
   1fcf0:	68da      	ldr	r2, [r3, #12]
   1fcf2:	07d5      	lsls	r5, r2, #31
   1fcf4:	f57f adde 	bpl.w	1f8b4 <pdn_interface_pdn_id_get+0xfc>
   1fcf8:	2501      	movs	r5, #1
   1fcfa:	e6f5      	b.n	1fae8 <pdn_interface_pdn_id_get+0x330>
   1fcfc:	4608      	mov	r0, r1
   1fcfe:	f006 fdcd 	bl	2689c <strlen>
   1fd02:	6823      	ldr	r3, [r4, #0]
   1fd04:	69da      	ldr	r2, [r3, #28]
   1fd06:	4290      	cmp	r0, r2
   1fd08:	f47f adce 	bne.w	1f8a8 <pdn_interface_pdn_id_get+0xf0>
   1fd0c:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fd10:	4429      	add	r1, r5
   1fd12:	3120      	adds	r1, #32
   1fd14:	4602      	mov	r2, r0
   1fd16:	4419      	add	r1, r3
   1fd18:	4630      	mov	r0, r6
   1fd1a:	f006 fded 	bl	268f8 <strncmp>
   1fd1e:	4605      	mov	r5, r0
   1fd20:	2800      	cmp	r0, #0
   1fd22:	f47f adc1 	bne.w	1f8a8 <pdn_interface_pdn_id_get+0xf0>
   1fd26:	6823      	ldr	r3, [r4, #0]
   1fd28:	68da      	ldr	r2, [r3, #12]
   1fd2a:	07d7      	lsls	r7, r2, #31
   1fd2c:	f53f aedc 	bmi.w	1fae8 <pdn_interface_pdn_id_get+0x330>
   1fd30:	e5ba      	b.n	1f8a8 <pdn_interface_pdn_id_get+0xf0>
   1fd32:	f04f 30ff 	mov.w	r0, #4294967295
   1fd36:	4770      	bx	lr
   1fd38:	4811      	ldr	r0, [pc, #68]	; (1fd80 <pdn_interface_pdn_id_get+0x5c8>)
   1fd3a:	f006 fdaf 	bl	2689c <strlen>
   1fd3e:	490a      	ldr	r1, [pc, #40]	; (1fd68 <pdn_interface_pdn_id_get+0x5b0>)
   1fd40:	4602      	mov	r2, r0
   1fd42:	480f      	ldr	r0, [pc, #60]	; (1fd80 <pdn_interface_pdn_id_get+0x5c8>)
   1fd44:	f006 fdd8 	bl	268f8 <strncmp>
   1fd48:	b930      	cbnz	r0, 1fd58 <pdn_interface_pdn_id_get+0x5a0>
   1fd4a:	2008      	movs	r0, #8
   1fd4c:	f7f6 ff38 	bl	16bc0 <bsd_os_errno_set>
   1fd50:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1fd54:	6858      	ldr	r0, [r3, #4]
   1fd56:	e578      	b.n	1f84a <pdn_interface_pdn_id_get+0x92>
   1fd58:	2005      	movs	r0, #5
   1fd5a:	f7f6 ff31 	bl	16bc0 <bsd_os_errno_set>
   1fd5e:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1fd62:	6858      	ldr	r0, [r3, #4]
   1fd64:	e571      	b.n	1f84a <pdn_interface_pdn_id_get+0x92>
   1fd66:	bf00      	nop
   1fd68:	20021ac0 	.word	0x20021ac0
   1fd6c:	0002f34c 	.word	0x0002f34c
   1fd70:	0002f388 	.word	0x0002f388
   1fd74:	20021bc0 	.word	0x20021bc0
   1fd78:	0002f348 	.word	0x0002f348
   1fd7c:	0002f35c 	.word	0x0002f35c
   1fd80:	0002f398 	.word	0x0002f398
   1fd84:	20021abc 	.word	0x20021abc

0001fd88 <bsd_platform_error_handler>:
   1fd88:	b508      	push	{r3, lr}
   1fd8a:	f7f1 fd01 	bl	11790 <bsd_recoverable_error_handler>
   1fd8e:	bd08      	pop	{r3, pc}

0001fd90 <bsd_init>:
   1fd90:	b160      	cbz	r0, 1fdac <bsd_init+0x1c>
   1fd92:	b510      	push	{r4, lr}
   1fd94:	4c07      	ldr	r4, [pc, #28]	; (1fdb4 <bsd_init+0x24>)
   1fd96:	7823      	ldrb	r3, [r4, #0]
   1fd98:	b92b      	cbnz	r3, 1fda6 <bsd_init+0x16>
   1fd9a:	f000 f81b 	bl	1fdd4 <bsd_platform_init>
   1fd9e:	b908      	cbnz	r0, 1fda4 <bsd_init+0x14>
   1fda0:	2301      	movs	r3, #1
   1fda2:	7023      	strb	r3, [r4, #0]
   1fda4:	bd10      	pop	{r4, pc}
   1fda6:	f04f 30ff 	mov.w	r0, #4294967295
   1fdaa:	bd10      	pop	{r4, pc}
   1fdac:	f04f 30ff 	mov.w	r0, #4294967295
   1fdb0:	4770      	bx	lr
   1fdb2:	bf00      	nop
   1fdb4:	2002627b 	.word	0x2002627b

0001fdb8 <unimplemented_method>:
   1fdb8:	b40f      	push	{r0, r1, r2, r3}
   1fdba:	b508      	push	{r3, lr}
   1fdbc:	202d      	movs	r0, #45	; 0x2d
   1fdbe:	f7f6 feff 	bl	16bc0 <bsd_os_errno_set>
   1fdc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1fdc6:	f04f 30ff 	mov.w	r0, #4294967295
   1fdca:	b004      	add	sp, #16
   1fdcc:	4770      	bx	lr
   1fdce:	bf00      	nop

0001fdd0 <rpc_transport_ipc_fault_handler>:
   1fdd0:	f7ff bfda 	b.w	1fd88 <bsd_platform_error_handler>

0001fdd4 <bsd_platform_init>:
   1fdd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fdd6:	f04f 0c00 	mov.w	ip, #0
   1fdda:	f247 0660 	movw	r6, #28768	; 0x7060
   1fdde:	f24b 0260 	movw	r2, #45152	; 0xb060
   1fde2:	6843      	ldr	r3, [r0, #4]
   1fde4:	4d3a      	ldr	r5, [pc, #232]	; (1fed0 <bsd_platform_init+0xfc>)
   1fde6:	4607      	mov	r7, r0
   1fde8:	602b      	str	r3, [r5, #0]
   1fdea:	7801      	ldrb	r1, [r0, #0]
   1fdec:	2006      	movs	r0, #6
   1fdee:	4561      	cmp	r1, ip
   1fdf0:	bf08      	it	eq
   1fdf2:	4632      	moveq	r2, r6
   1fdf4:	4413      	add	r3, r2
   1fdf6:	4c37      	ldr	r4, [pc, #220]	; (1fed4 <bsd_platform_init+0x100>)
   1fdf8:	60ab      	str	r3, [r5, #8]
   1fdfa:	68b9      	ldr	r1, [r7, #8]
   1fdfc:	6063      	str	r3, [r4, #4]
   1fdfe:	4b36      	ldr	r3, [pc, #216]	; (1fed8 <bsd_platform_init+0x104>)
   1fe00:	b093      	sub	sp, #76	; 0x4c
   1fe02:	606a      	str	r2, [r5, #4]
   1fe04:	f8a4 c000 	strh.w	ip, [r4]
   1fe08:	1a8a      	subs	r2, r1, r2
   1fe0a:	60ea      	str	r2, [r5, #12]
   1fe0c:	60a2      	str	r2, [r4, #8]
   1fe0e:	81a0      	strh	r0, [r4, #12]
   1fe10:	6123      	str	r3, [r4, #16]
   1fe12:	f001 f883 	bl	20f1c <nrf_mem_init>
   1fe16:	2800      	cmp	r0, #0
   1fe18:	d156      	bne.n	1fec8 <bsd_platform_init+0xf4>
   1fe1a:	4621      	mov	r1, r4
   1fe1c:	a801      	add	r0, sp, #4
   1fe1e:	f001 f8f1 	bl	21004 <nrf_mem_register>
   1fe22:	2800      	cmp	r0, #0
   1fe24:	d150      	bne.n	1fec8 <bsd_platform_init+0xf4>
   1fe26:	f7f7 f877 	bl	16f18 <bsd_os_init>
   1fe2a:	f7fd fbff 	bl	1d62c <rpc_framework_init>
   1fe2e:	2800      	cmp	r0, #0
   1fe30:	d14a      	bne.n	1fec8 <bsd_platform_init+0xf4>
   1fe32:	783a      	ldrb	r2, [r7, #0]
   1fe34:	682b      	ldr	r3, [r5, #0]
   1fe36:	bb32      	cbnz	r2, 1fe86 <bsd_platform_init+0xb2>
   1fe38:	4606      	mov	r6, r0
   1fe3a:	2220      	movs	r2, #32
   1fe3c:	2408      	movs	r4, #8
   1fe3e:	2500      	movs	r5, #0
   1fe40:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   1fe44:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   1fe48:	f503 5141 	add.w	r1, r3, #12352	; 0x3040
   1fe4c:	4411      	add	r1, r2
   1fe4e:	9302      	str	r3, [sp, #8]
   1fe50:	e9cd 6008 	strd	r6, r0, [sp, #32]
   1fe54:	910c      	str	r1, [sp, #48]	; 0x30
   1fe56:	9203      	str	r2, [sp, #12]
   1fe58:	f103 0140 	add.w	r1, r3, #64	; 0x40
   1fe5c:	9205      	str	r2, [sp, #20]
   1fe5e:	9207      	str	r2, [sp, #28]
   1fe60:	eb0d 0004 	add.w	r0, sp, r4
   1fe64:	189a      	adds	r2, r3, r2
   1fe66:	3360      	adds	r3, #96	; 0x60
   1fe68:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   1fe6c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   1fe70:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
   1fe74:	940f      	str	r4, [sp, #60]	; 0x3c
   1fe76:	9104      	str	r1, [sp, #16]
   1fe78:	9206      	str	r2, [sp, #24]
   1fe7a:	930a      	str	r3, [sp, #40]	; 0x28
   1fe7c:	f7fa fb3a 	bl	1a4f4 <rpc_transport_ipc_init>
   1fe80:	b128      	cbz	r0, 1fe8e <bsd_platform_init+0xba>
   1fe82:	b013      	add	sp, #76	; 0x4c
   1fe84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fe86:	441e      	add	r6, r3
   1fe88:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   1fe8c:	e7d5      	b.n	1fe3a <bsd_platform_init+0x66>
   1fe8e:	f001 fda9 	bl	219e4 <interface_init>
   1fe92:	b9c8      	cbnz	r0, 1fec8 <bsd_platform_init+0xf4>
   1fe94:	f7fe fcac 	bl	1e7f0 <at_interface_init>
   1fe98:	b9b0      	cbnz	r0, 1fec8 <bsd_platform_init+0xf4>
   1fe9a:	f7fb fe4b 	bl	1bb34 <ip_interface_init>
   1fe9e:	b998      	cbnz	r0, 1fec8 <bsd_platform_init+0xf4>
   1fea0:	f7fb f902 	bl	1b0a8 <tls_interface_init>
   1fea4:	b980      	cbnz	r0, 1fec8 <bsd_platform_init+0xf4>
   1fea6:	f001 fab9 	bl	2141c <mfu_interface_init>
   1feaa:	b968      	cbnz	r0, 1fec8 <bsd_platform_init+0xf4>
   1feac:	f7fe feee 	bl	1ec8c <pdn_interface_init>
   1feb0:	b950      	cbnz	r0, 1fec8 <bsd_platform_init+0xf4>
   1feb2:	f7fe faf3 	bl	1e49c <gnss_interface_init>
   1feb6:	b938      	cbnz	r0, 1fec8 <bsd_platform_init+0xf4>
   1feb8:	f7f9 fd5a 	bl	19970 <logobj_interface_init>
   1febc:	1b40      	subs	r0, r0, r5
   1febe:	bf18      	it	ne
   1fec0:	2001      	movne	r0, #1
   1fec2:	4240      	negs	r0, r0
   1fec4:	b013      	add	sp, #76	; 0x4c
   1fec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fec8:	f04f 30ff 	mov.w	r0, #4294967295
   1fecc:	b013      	add	sp, #76	; 0x4c
   1fece:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fed0:	20021bfc 	.word	0x20021bfc
   1fed4:	20021be8 	.word	0x20021be8
   1fed8:	0002f4ec 	.word	0x0002f4ec

0001fedc <bsd_platform_af_method_table_get>:
   1fedc:	2805      	cmp	r0, #5
   1fede:	d02a      	beq.n	1ff36 <bsd_platform_af_method_table_get+0x5a>
   1fee0:	b508      	push	{r3, lr}
   1fee2:	d914      	bls.n	1ff0e <bsd_platform_af_method_table_get+0x32>
   1fee4:	280a      	cmp	r0, #10
   1fee6:	d016      	beq.n	1ff16 <bsd_platform_af_method_table_get+0x3a>
   1fee8:	2866      	cmp	r0, #102	; 0x66
   1feea:	d11f      	bne.n	1ff2c <bsd_platform_af_method_table_get+0x50>
   1feec:	f240 2302 	movw	r3, #514	; 0x202
   1fef0:	429a      	cmp	r2, r3
   1fef2:	d035      	beq.n	1ff60 <bsd_platform_af_method_table_get+0x84>
   1fef4:	f240 2305 	movw	r3, #517	; 0x205
   1fef8:	429a      	cmp	r2, r3
   1fefa:	d035      	beq.n	1ff68 <bsd_platform_af_method_table_get+0x8c>
   1fefc:	f240 2301 	movw	r3, #513	; 0x201
   1ff00:	429a      	cmp	r2, r3
   1ff02:	d02f      	beq.n	1ff64 <bsd_platform_af_method_table_get+0x88>
   1ff04:	202b      	movs	r0, #43	; 0x2b
   1ff06:	f7f6 fe5b 	bl	16bc0 <bsd_os_errno_set>
   1ff0a:	2000      	movs	r0, #0
   1ff0c:	bd08      	pop	{r3, pc}
   1ff0e:	2801      	cmp	r0, #1
   1ff10:	d016      	beq.n	1ff40 <bsd_platform_af_method_table_get+0x64>
   1ff12:	2802      	cmp	r0, #2
   1ff14:	d10a      	bne.n	1ff2c <bsd_platform_af_method_table_get+0x50>
   1ff16:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   1ff1a:	d21a      	bcs.n	1ff52 <bsd_platform_af_method_table_get+0x76>
   1ff1c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1ff20:	d21a      	bcs.n	1ff58 <bsd_platform_af_method_table_get+0x7c>
   1ff22:	3a01      	subs	r2, #1
   1ff24:	2a01      	cmp	r2, #1
   1ff26:	d8ed      	bhi.n	1ff04 <bsd_platform_af_method_table_get+0x28>
   1ff28:	4810      	ldr	r0, [pc, #64]	; (1ff6c <bsd_platform_af_method_table_get+0x90>)
   1ff2a:	bd08      	pop	{r3, pc}
   1ff2c:	2016      	movs	r0, #22
   1ff2e:	f7f6 fe47 	bl	16bc0 <bsd_os_errno_set>
   1ff32:	2000      	movs	r0, #0
   1ff34:	bd08      	pop	{r3, pc}
   1ff36:	2903      	cmp	r1, #3
   1ff38:	480d      	ldr	r0, [pc, #52]	; (1ff70 <bsd_platform_af_method_table_get+0x94>)
   1ff3a:	bf18      	it	ne
   1ff3c:	2000      	movne	r0, #0
   1ff3e:	4770      	bx	lr
   1ff40:	f240 2303 	movw	r3, #515	; 0x203
   1ff44:	429a      	cmp	r2, r3
   1ff46:	d009      	beq.n	1ff5c <bsd_platform_af_method_table_get+0x80>
   1ff48:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1ff4c:	d1da      	bne.n	1ff04 <bsd_platform_af_method_table_get+0x28>
   1ff4e:	4809      	ldr	r0, [pc, #36]	; (1ff74 <bsd_platform_af_method_table_get+0x98>)
   1ff50:	bd08      	pop	{r3, pc}
   1ff52:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1ff56:	d1d5      	bne.n	1ff04 <bsd_platform_af_method_table_get+0x28>
   1ff58:	4807      	ldr	r0, [pc, #28]	; (1ff78 <bsd_platform_af_method_table_get+0x9c>)
   1ff5a:	bd08      	pop	{r3, pc}
   1ff5c:	4807      	ldr	r0, [pc, #28]	; (1ff7c <bsd_platform_af_method_table_get+0xa0>)
   1ff5e:	bd08      	pop	{r3, pc}
   1ff60:	4807      	ldr	r0, [pc, #28]	; (1ff80 <bsd_platform_af_method_table_get+0xa4>)
   1ff62:	bd08      	pop	{r3, pc}
   1ff64:	4807      	ldr	r0, [pc, #28]	; (1ff84 <bsd_platform_af_method_table_get+0xa8>)
   1ff66:	bd08      	pop	{r3, pc}
   1ff68:	4807      	ldr	r0, [pc, #28]	; (1ff88 <bsd_platform_af_method_table_get+0xac>)
   1ff6a:	bd08      	pop	{r3, pc}
   1ff6c:	0002f3d4 	.word	0x0002f3d4
   1ff70:	0002f4c4 	.word	0x0002f4c4
   1ff74:	0002f474 	.word	0x0002f474
   1ff78:	0002f3fc 	.word	0x0002f3fc
   1ff7c:	0002f424 	.word	0x0002f424
   1ff80:	0002f44c 	.word	0x0002f44c
   1ff84:	0002f3ac 	.word	0x0002f3ac
   1ff88:	0002f49c 	.word	0x0002f49c

0001ff8c <bsd_platform_fd_method_table_get>:
   1ff8c:	b538      	push	{r3, r4, r5, lr}
   1ff8e:	4605      	mov	r5, r0
   1ff90:	f001 fe5a 	bl	21c48 <interface_socket_from_handle_get>
   1ff94:	4604      	mov	r4, r0
   1ff96:	b960      	cbnz	r0, 1ffb2 <bsd_platform_fd_method_table_get+0x26>
   1ff98:	4b2c      	ldr	r3, [pc, #176]	; (2004c <bsd_platform_fd_method_table_get+0xc0>)
   1ff9a:	429d      	cmp	r5, r3
   1ff9c:	d02f      	beq.n	1fffe <bsd_platform_fd_method_table_get+0x72>
   1ff9e:	0c2b      	lsrs	r3, r5, #16
   1ffa0:	4a2b      	ldr	r2, [pc, #172]	; (20050 <bsd_platform_fd_method_table_get+0xc4>)
   1ffa2:	041b      	lsls	r3, r3, #16
   1ffa4:	4293      	cmp	r3, r2
   1ffa6:	d03d      	beq.n	20024 <bsd_platform_fd_method_table_get+0x98>
   1ffa8:	4b2a      	ldr	r3, [pc, #168]	; (20054 <bsd_platform_fd_method_table_get+0xc8>)
   1ffaa:	429d      	cmp	r5, r3
   1ffac:	d149      	bne.n	20042 <bsd_platform_fd_method_table_get+0xb6>
   1ffae:	482a      	ldr	r0, [pc, #168]	; (20058 <bsd_platform_fd_method_table_get+0xcc>)
   1ffb0:	bd38      	pop	{r3, r4, r5, pc}
   1ffb2:	68c3      	ldr	r3, [r0, #12]
   1ffb4:	6942      	ldr	r2, [r0, #20]
   1ffb6:	2b05      	cmp	r3, #5
   1ffb8:	d036      	beq.n	20028 <bsd_platform_fd_method_table_get+0x9c>
   1ffba:	d911      	bls.n	1ffe0 <bsd_platform_fd_method_table_get+0x54>
   1ffbc:	2b0a      	cmp	r3, #10
   1ffbe:	d013      	beq.n	1ffe8 <bsd_platform_fd_method_table_get+0x5c>
   1ffc0:	2b66      	cmp	r3, #102	; 0x66
   1ffc2:	d11e      	bne.n	20002 <bsd_platform_fd_method_table_get+0x76>
   1ffc4:	f240 2302 	movw	r3, #514	; 0x202
   1ffc8:	429a      	cmp	r2, r3
   1ffca:	d02b      	beq.n	20024 <bsd_platform_fd_method_table_get+0x98>
   1ffcc:	f240 2305 	movw	r3, #517	; 0x205
   1ffd0:	429a      	cmp	r2, r3
   1ffd2:	d02f      	beq.n	20034 <bsd_platform_fd_method_table_get+0xa8>
   1ffd4:	f240 2301 	movw	r3, #513	; 0x201
   1ffd8:	429a      	cmp	r2, r3
   1ffda:	d11e      	bne.n	2001a <bsd_platform_fd_method_table_get+0x8e>
   1ffdc:	481f      	ldr	r0, [pc, #124]	; (2005c <bsd_platform_fd_method_table_get+0xd0>)
   1ffde:	bd38      	pop	{r3, r4, r5, pc}
   1ffe0:	2b01      	cmp	r3, #1
   1ffe2:	d013      	beq.n	2000c <bsd_platform_fd_method_table_get+0x80>
   1ffe4:	2b02      	cmp	r3, #2
   1ffe6:	d10c      	bne.n	20002 <bsd_platform_fd_method_table_get+0x76>
   1ffe8:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   1ffec:	d224      	bcs.n	20038 <bsd_platform_fd_method_table_get+0xac>
   1ffee:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1fff2:	d224      	bcs.n	2003e <bsd_platform_fd_method_table_get+0xb2>
   1fff4:	3a01      	subs	r2, #1
   1fff6:	2a01      	cmp	r2, #1
   1fff8:	d80f      	bhi.n	2001a <bsd_platform_fd_method_table_get+0x8e>
   1fffa:	4819      	ldr	r0, [pc, #100]	; (20060 <bsd_platform_fd_method_table_get+0xd4>)
   1fffc:	bd38      	pop	{r3, r4, r5, pc}
   1fffe:	4819      	ldr	r0, [pc, #100]	; (20064 <bsd_platform_fd_method_table_get+0xd8>)
   20000:	bd38      	pop	{r3, r4, r5, pc}
   20002:	2016      	movs	r0, #22
   20004:	f7f6 fddc 	bl	16bc0 <bsd_os_errno_set>
   20008:	2000      	movs	r0, #0
   2000a:	bd38      	pop	{r3, r4, r5, pc}
   2000c:	f240 2303 	movw	r3, #515	; 0x203
   20010:	429a      	cmp	r2, r3
   20012:	d0f4      	beq.n	1fffe <bsd_platform_fd_method_table_get+0x72>
   20014:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   20018:	d0c9      	beq.n	1ffae <bsd_platform_fd_method_table_get+0x22>
   2001a:	202b      	movs	r0, #43	; 0x2b
   2001c:	f7f6 fdd0 	bl	16bc0 <bsd_os_errno_set>
   20020:	2000      	movs	r0, #0
   20022:	bd38      	pop	{r3, r4, r5, pc}
   20024:	4810      	ldr	r0, [pc, #64]	; (20068 <bsd_platform_fd_method_table_get+0xdc>)
   20026:	bd38      	pop	{r3, r4, r5, pc}
   20028:	6903      	ldr	r3, [r0, #16]
   2002a:	4810      	ldr	r0, [pc, #64]	; (2006c <bsd_platform_fd_method_table_get+0xe0>)
   2002c:	2b03      	cmp	r3, #3
   2002e:	bf18      	it	ne
   20030:	2000      	movne	r0, #0
   20032:	bd38      	pop	{r3, r4, r5, pc}
   20034:	480e      	ldr	r0, [pc, #56]	; (20070 <bsd_platform_fd_method_table_get+0xe4>)
   20036:	bd38      	pop	{r3, r4, r5, pc}
   20038:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   2003c:	d1ed      	bne.n	2001a <bsd_platform_fd_method_table_get+0x8e>
   2003e:	480d      	ldr	r0, [pc, #52]	; (20074 <bsd_platform_fd_method_table_get+0xe8>)
   20040:	bd38      	pop	{r3, r4, r5, pc}
   20042:	2009      	movs	r0, #9
   20044:	f7f6 fdbc 	bl	16bc0 <bsd_os_errno_set>
   20048:	4620      	mov	r0, r4
   2004a:	bd38      	pop	{r3, r4, r5, pc}
   2004c:	49765432 	.word	0x49765432
   20050:	789a0000 	.word	0x789a0000
   20054:	49765443 	.word	0x49765443
   20058:	0002f474 	.word	0x0002f474
   2005c:	0002f3ac 	.word	0x0002f3ac
   20060:	0002f3d4 	.word	0x0002f3d4
   20064:	0002f424 	.word	0x0002f424
   20068:	0002f44c 	.word	0x0002f44c
   2006c:	0002f4c4 	.word	0x0002f4c4
   20070:	0002f49c 	.word	0x0002f49c
   20074:	0002f3fc 	.word	0x0002f3fc

00020078 <bsd_platform_getaddrinfo>:
   20078:	f7fc bec6 	b.w	1ce08 <ip_interface_getaddrinfo>

0002007c <bsd_platform_freeaddrinfo>:
   2007c:	f7fc bfc2 	b.w	1d004 <ip_interface_freeaddrinfo>

00020080 <bsd_platform_poll>:
   20080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20084:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   20088:	b083      	sub	sp, #12
   2008a:	9200      	str	r2, [sp, #0]
   2008c:	2800      	cmp	r0, #0
   2008e:	d048      	beq.n	20122 <bsd_platform_poll+0xa2>
   20090:	1e4b      	subs	r3, r1, #1
   20092:	2b08      	cmp	r3, #8
   20094:	d845      	bhi.n	20122 <bsd_platform_poll+0xa2>
   20096:	4680      	mov	r8, r0
   20098:	4605      	mov	r5, r0
   2009a:	2400      	movs	r4, #0
   2009c:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   200a0:	88ab      	ldrh	r3, [r5, #4]
   200a2:	6828      	ldr	r0, [r5, #0]
   200a4:	f003 0303 	and.w	r3, r3, #3
   200a8:	a901      	add	r1, sp, #4
   200aa:	f043 061c 	orr.w	r6, r3, #28
   200ae:	f001 fdd9 	bl	21c64 <interface_socket_event_get>
   200b2:	9b01      	ldr	r3, [sp, #4]
   200b4:	3508      	adds	r5, #8
   200b6:	4033      	ands	r3, r6
   200b8:	f825 3c02 	strh.w	r3, [r5, #-2]
   200bc:	b103      	cbz	r3, 200c0 <bsd_platform_poll+0x40>
   200be:	3401      	adds	r4, #1
   200c0:	42af      	cmp	r7, r5
   200c2:	d1ed      	bne.n	200a0 <bsd_platform_poll+0x20>
   200c4:	bb9c      	cbnz	r4, 2012e <bsd_platform_poll+0xae>
   200c6:	4669      	mov	r1, sp
   200c8:	4640      	mov	r0, r8
   200ca:	f7f6 fcc1 	bl	16a50 <bsd_os_timedwait>
   200ce:	4607      	mov	r7, r0
   200d0:	b108      	cbz	r0, 200d6 <bsd_platform_poll+0x56>
   200d2:	283c      	cmp	r0, #60	; 0x3c
   200d4:	d11d      	bne.n	20112 <bsd_platform_poll+0x92>
   200d6:	46c1      	mov	r9, r8
   200d8:	2600      	movs	r6, #0
   200da:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   200de:	f8d9 0000 	ldr.w	r0, [r9]
   200e2:	f003 0303 	and.w	r3, r3, #3
   200e6:	a901      	add	r1, sp, #4
   200e8:	f043 041c 	orr.w	r4, r3, #28
   200ec:	f001 fdba 	bl	21c64 <interface_socket_event_get>
   200f0:	9b01      	ldr	r3, [sp, #4]
   200f2:	f109 0908 	add.w	r9, r9, #8
   200f6:	4023      	ands	r3, r4
   200f8:	f829 3c02 	strh.w	r3, [r9, #-2]
   200fc:	b103      	cbz	r3, 20100 <bsd_platform_poll+0x80>
   200fe:	3601      	adds	r6, #1
   20100:	454d      	cmp	r5, r9
   20102:	d1ea      	bne.n	200da <bsd_platform_poll+0x5a>
   20104:	b90e      	cbnz	r6, 2010a <bsd_platform_poll+0x8a>
   20106:	2f00      	cmp	r7, #0
   20108:	d0dd      	beq.n	200c6 <bsd_platform_poll+0x46>
   2010a:	4630      	mov	r0, r6
   2010c:	b003      	add	sp, #12
   2010e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20112:	2023      	movs	r0, #35	; 0x23
   20114:	f7f6 fd54 	bl	16bc0 <bsd_os_errno_set>
   20118:	f04f 30ff 	mov.w	r0, #4294967295
   2011c:	b003      	add	sp, #12
   2011e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20122:	2016      	movs	r0, #22
   20124:	f7f6 fd4c 	bl	16bc0 <bsd_os_errno_set>
   20128:	f04f 30ff 	mov.w	r0, #4294967295
   2012c:	e7ee      	b.n	2010c <bsd_platform_poll+0x8c>
   2012e:	4620      	mov	r0, r4
   20130:	e7ec      	b.n	2010c <bsd_platform_poll+0x8c>
   20132:	bf00      	nop

00020134 <bsd_platform_fcntl>:
   20134:	b508      	push	{r3, lr}
   20136:	4b06      	ldr	r3, [pc, #24]	; (20150 <bsd_platform_fcntl+0x1c>)
   20138:	4298      	cmp	r0, r3
   2013a:	d003      	beq.n	20144 <bsd_platform_fcntl+0x10>
   2013c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   20140:	f001 be3a 	b.w	21db8 <interface_socket_fcntl>
   20144:	202d      	movs	r0, #45	; 0x2d
   20146:	f7f6 fd3b 	bl	16bc0 <bsd_os_errno_set>
   2014a:	f04f 30ff 	mov.w	r0, #4294967295
   2014e:	bd08      	pop	{r3, pc}
   20150:	49765432 	.word	0x49765432

00020154 <linked_list_init>:
   20154:	b128      	cbz	r0, 20162 <linked_list_init+0xe>
   20156:	2300      	movs	r3, #0
   20158:	6003      	str	r3, [r0, #0]
   2015a:	e9c0 3301 	strd	r3, r3, [r0, #4]
   2015e:	4618      	mov	r0, r3
   20160:	4770      	bx	lr
   20162:	2007      	movs	r0, #7
   20164:	4770      	bx	lr
   20166:	bf00      	nop

00020168 <linked_list_push>:
   20168:	6802      	ldr	r2, [r0, #0]
   2016a:	4603      	mov	r3, r0
   2016c:	3201      	adds	r2, #1
   2016e:	d00e      	beq.n	2018e <linked_list_push+0x26>
   20170:	2200      	movs	r2, #0
   20172:	600a      	str	r2, [r1, #0]
   20174:	6802      	ldr	r2, [r0, #0]
   20176:	b13a      	cbz	r2, 20188 <linked_list_push+0x20>
   20178:	6882      	ldr	r2, [r0, #8]
   2017a:	6011      	str	r1, [r2, #0]
   2017c:	6081      	str	r1, [r0, #8]
   2017e:	681a      	ldr	r2, [r3, #0]
   20180:	2000      	movs	r0, #0
   20182:	3201      	adds	r2, #1
   20184:	601a      	str	r2, [r3, #0]
   20186:	4770      	bx	lr
   20188:	e9c0 1101 	strd	r1, r1, [r0, #4]
   2018c:	e7f7      	b.n	2017e <linked_list_push+0x16>
   2018e:	2004      	movs	r0, #4
   20190:	4770      	bx	lr
   20192:	bf00      	nop

00020194 <linked_list_pop>:
   20194:	4603      	mov	r3, r0
   20196:	6800      	ldr	r0, [r0, #0]
   20198:	b128      	cbz	r0, 201a6 <linked_list_pop+0x12>
   2019a:	6858      	ldr	r0, [r3, #4]
   2019c:	681a      	ldr	r2, [r3, #0]
   2019e:	6801      	ldr	r1, [r0, #0]
   201a0:	3a01      	subs	r2, #1
   201a2:	6059      	str	r1, [r3, #4]
   201a4:	601a      	str	r2, [r3, #0]
   201a6:	4770      	bx	lr

000201a8 <linked_list_peek>:
   201a8:	6803      	ldr	r3, [r0, #0]
   201aa:	b10b      	cbz	r3, 201b0 <linked_list_peek+0x8>
   201ac:	6840      	ldr	r0, [r0, #4]
   201ae:	4770      	bx	lr
   201b0:	4618      	mov	r0, r3
   201b2:	4770      	bx	lr

000201b4 <linked_list_size_get>:
   201b4:	6800      	ldr	r0, [r0, #0]
   201b6:	4770      	bx	lr

000201b8 <linked_list_get_next>:
   201b8:	6800      	ldr	r0, [r0, #0]
   201ba:	4770      	bx	lr

000201bc <nrf_socket>:
   201bc:	b570      	push	{r4, r5, r6, lr}
   201be:	4604      	mov	r4, r0
   201c0:	460d      	mov	r5, r1
   201c2:	4616      	mov	r6, r2
   201c4:	f7ff fe8a 	bl	1fedc <bsd_platform_af_method_table_get>
   201c8:	b130      	cbz	r0, 201d8 <nrf_socket+0x1c>
   201ca:	6803      	ldr	r3, [r0, #0]
   201cc:	4632      	mov	r2, r6
   201ce:	4629      	mov	r1, r5
   201d0:	4620      	mov	r0, r4
   201d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   201d6:	4718      	bx	r3
   201d8:	f04f 30ff 	mov.w	r0, #4294967295
   201dc:	bd70      	pop	{r4, r5, r6, pc}
   201de:	bf00      	nop

000201e0 <nrf_close>:
   201e0:	b510      	push	{r4, lr}
   201e2:	4604      	mov	r4, r0
   201e4:	f7ff fed2 	bl	1ff8c <bsd_platform_fd_method_table_get>
   201e8:	b120      	cbz	r0, 201f4 <nrf_close+0x14>
   201ea:	6843      	ldr	r3, [r0, #4]
   201ec:	4620      	mov	r0, r4
   201ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   201f2:	4718      	bx	r3
   201f4:	f04f 30ff 	mov.w	r0, #4294967295
   201f8:	bd10      	pop	{r4, pc}
   201fa:	bf00      	nop

000201fc <nrf_sendto>:
   201fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20200:	460d      	mov	r5, r1
   20202:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   20206:	4616      	mov	r6, r2
   20208:	461f      	mov	r7, r3
   2020a:	4604      	mov	r4, r0
   2020c:	f7ff febe 	bl	1ff8c <bsd_platform_fd_method_table_get>
   20210:	b158      	cbz	r0, 2022a <nrf_sendto+0x2e>
   20212:	e9cd 8908 	strd	r8, r9, [sp, #32]
   20216:	f8d0 e008 	ldr.w	lr, [r0, #8]
   2021a:	463b      	mov	r3, r7
   2021c:	4632      	mov	r2, r6
   2021e:	4629      	mov	r1, r5
   20220:	4620      	mov	r0, r4
   20222:	46f4      	mov	ip, lr
   20224:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20228:	4760      	bx	ip
   2022a:	f04f 30ff 	mov.w	r0, #4294967295
   2022e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20232:	bf00      	nop

00020234 <nrf_recvfrom>:
   20234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20238:	460d      	mov	r5, r1
   2023a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2023e:	4616      	mov	r6, r2
   20240:	461f      	mov	r7, r3
   20242:	4604      	mov	r4, r0
   20244:	f7ff fea2 	bl	1ff8c <bsd_platform_fd_method_table_get>
   20248:	b158      	cbz	r0, 20262 <nrf_recvfrom+0x2e>
   2024a:	e9cd 8908 	strd	r8, r9, [sp, #32]
   2024e:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   20252:	463b      	mov	r3, r7
   20254:	4632      	mov	r2, r6
   20256:	4629      	mov	r1, r5
   20258:	4620      	mov	r0, r4
   2025a:	46f4      	mov	ip, lr
   2025c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20260:	4760      	bx	ip
   20262:	f04f 30ff 	mov.w	r0, #4294967295
   20266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2026a:	bf00      	nop

0002026c <nrf_connect>:
   2026c:	b570      	push	{r4, r5, r6, lr}
   2026e:	460d      	mov	r5, r1
   20270:	4616      	mov	r6, r2
   20272:	4604      	mov	r4, r0
   20274:	f7ff fe8a 	bl	1ff8c <bsd_platform_fd_method_table_get>
   20278:	b130      	cbz	r0, 20288 <nrf_connect+0x1c>
   2027a:	6943      	ldr	r3, [r0, #20]
   2027c:	4632      	mov	r2, r6
   2027e:	4629      	mov	r1, r5
   20280:	4620      	mov	r0, r4
   20282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20286:	4718      	bx	r3
   20288:	f04f 30ff 	mov.w	r0, #4294967295
   2028c:	bd70      	pop	{r4, r5, r6, pc}
   2028e:	bf00      	nop

00020290 <nrf_listen>:
   20290:	b570      	push	{r4, r5, r6, lr}
   20292:	460d      	mov	r5, r1
   20294:	4604      	mov	r4, r0
   20296:	f7ff fe79 	bl	1ff8c <bsd_platform_fd_method_table_get>
   2029a:	b128      	cbz	r0, 202a8 <nrf_listen+0x18>
   2029c:	6983      	ldr	r3, [r0, #24]
   2029e:	4629      	mov	r1, r5
   202a0:	4620      	mov	r0, r4
   202a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   202a6:	4718      	bx	r3
   202a8:	f04f 30ff 	mov.w	r0, #4294967295
   202ac:	bd70      	pop	{r4, r5, r6, pc}
   202ae:	bf00      	nop

000202b0 <nrf_accept>:
   202b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   202b4:	460d      	mov	r5, r1
   202b6:	4616      	mov	r6, r2
   202b8:	4604      	mov	r4, r0
   202ba:	f7ff fe67 	bl	1ff8c <bsd_platform_fd_method_table_get>
   202be:	b140      	cbz	r0, 202d2 <nrf_accept+0x22>
   202c0:	69c7      	ldr	r7, [r0, #28]
   202c2:	4632      	mov	r2, r6
   202c4:	4629      	mov	r1, r5
   202c6:	4620      	mov	r0, r4
   202c8:	46bc      	mov	ip, r7
   202ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   202ce:	2300      	movs	r3, #0
   202d0:	4760      	bx	ip
   202d2:	f04f 30ff 	mov.w	r0, #4294967295
   202d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   202da:	bf00      	nop

000202dc <nrf_bind>:
   202dc:	b570      	push	{r4, r5, r6, lr}
   202de:	460d      	mov	r5, r1
   202e0:	4616      	mov	r6, r2
   202e2:	4604      	mov	r4, r0
   202e4:	f7ff fe52 	bl	1ff8c <bsd_platform_fd_method_table_get>
   202e8:	b130      	cbz	r0, 202f8 <nrf_bind+0x1c>
   202ea:	6903      	ldr	r3, [r0, #16]
   202ec:	4632      	mov	r2, r6
   202ee:	4629      	mov	r1, r5
   202f0:	4620      	mov	r0, r4
   202f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   202f6:	4718      	bx	r3
   202f8:	f04f 30ff 	mov.w	r0, #4294967295
   202fc:	bd70      	pop	{r4, r5, r6, pc}
   202fe:	bf00      	nop

00020300 <nrf_setsockopt>:
   20300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20304:	f8dd 8018 	ldr.w	r8, [sp, #24]
   20308:	460d      	mov	r5, r1
   2030a:	4616      	mov	r6, r2
   2030c:	461f      	mov	r7, r3
   2030e:	4604      	mov	r4, r0
   20310:	f7ff fe3c 	bl	1ff8c <bsd_platform_fd_method_table_get>
   20314:	b158      	cbz	r0, 2032e <nrf_setsockopt+0x2e>
   20316:	f8cd 8018 	str.w	r8, [sp, #24]
   2031a:	f8d0 e020 	ldr.w	lr, [r0, #32]
   2031e:	463b      	mov	r3, r7
   20320:	4632      	mov	r2, r6
   20322:	4629      	mov	r1, r5
   20324:	4620      	mov	r0, r4
   20326:	46f4      	mov	ip, lr
   20328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2032c:	4760      	bx	ip
   2032e:	f04f 30ff 	mov.w	r0, #4294967295
   20332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20336:	bf00      	nop

00020338 <nrf_getsockopt>:
   20338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2033c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   20340:	460d      	mov	r5, r1
   20342:	4616      	mov	r6, r2
   20344:	461f      	mov	r7, r3
   20346:	4604      	mov	r4, r0
   20348:	f7ff fe20 	bl	1ff8c <bsd_platform_fd_method_table_get>
   2034c:	b158      	cbz	r0, 20366 <nrf_getsockopt+0x2e>
   2034e:	f8cd 8018 	str.w	r8, [sp, #24]
   20352:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   20356:	463b      	mov	r3, r7
   20358:	4632      	mov	r2, r6
   2035a:	4629      	mov	r1, r5
   2035c:	4620      	mov	r0, r4
   2035e:	46f4      	mov	ip, lr
   20360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20364:	4760      	bx	ip
   20366:	f04f 30ff 	mov.w	r0, #4294967295
   2036a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2036e:	bf00      	nop

00020370 <nrf_getaddrinfo>:
   20370:	f7ff be82 	b.w	20078 <bsd_platform_getaddrinfo>

00020374 <nrf_freeaddrinfo>:
   20374:	f7ff be82 	b.w	2007c <bsd_platform_freeaddrinfo>

00020378 <nrf_poll>:
   20378:	f7ff be82 	b.w	20080 <bsd_platform_poll>

0002037c <nrf_fcntl>:
   2037c:	f7ff beda 	b.w	20134 <bsd_platform_fcntl>

00020380 <rpc_gnss_serialize_utc>:
   20380:	4603      	mov	r3, r0
   20382:	b1d8      	cbz	r0, 203bc <rpc_gnss_serialize_utc+0x3c>
   20384:	b1d1      	cbz	r1, 203bc <rpc_gnss_serialize_utc+0x3c>
   20386:	2000      	movs	r0, #0
   20388:	2201      	movs	r2, #1
   2038a:	7048      	strb	r0, [r1, #1]
   2038c:	700a      	strb	r2, [r1, #0]
   2038e:	685a      	ldr	r2, [r3, #4]
   20390:	2010      	movs	r0, #16
   20392:	f8c1 2006 	str.w	r2, [r1, #6]
   20396:	681a      	ldr	r2, [r3, #0]
   20398:	f8c1 2002 	str.w	r2, [r1, #2]
   2039c:	f993 200a 	ldrsb.w	r2, [r3, #10]
   203a0:	730a      	strb	r2, [r1, #12]
   203a2:	f993 200d 	ldrsb.w	r2, [r3, #13]
   203a6:	73ca      	strb	r2, [r1, #15]
   203a8:	f993 200c 	ldrsb.w	r2, [r3, #12]
   203ac:	738a      	strb	r2, [r1, #14]
   203ae:	7a1a      	ldrb	r2, [r3, #8]
   203b0:	728a      	strb	r2, [r1, #10]
   203b2:	7ada      	ldrb	r2, [r3, #11]
   203b4:	734a      	strb	r2, [r1, #13]
   203b6:	7a5b      	ldrb	r3, [r3, #9]
   203b8:	72cb      	strb	r3, [r1, #11]
   203ba:	4770      	bx	lr
   203bc:	f04f 30ff 	mov.w	r0, #4294967295
   203c0:	4770      	bx	lr
   203c2:	bf00      	nop

000203c4 <rpc_gnss_serialize_ephe>:
   203c4:	4603      	mov	r3, r0
   203c6:	2800      	cmp	r0, #0
   203c8:	d04b      	beq.n	20462 <rpc_gnss_serialize_ephe+0x9e>
   203ca:	2900      	cmp	r1, #0
   203cc:	d049      	beq.n	20462 <rpc_gnss_serialize_ephe+0x9e>
   203ce:	2000      	movs	r0, #0
   203d0:	2202      	movs	r2, #2
   203d2:	7048      	strb	r0, [r1, #1]
   203d4:	700a      	strb	r2, [r1, #0]
   203d6:	68da      	ldr	r2, [r3, #12]
   203d8:	2040      	movs	r0, #64	; 0x40
   203da:	f8c1 200b 	str.w	r2, [r1, #11]
   203de:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   203e2:	f8a1 2009 	strh.w	r2, [r1, #9]
   203e6:	f993 2006 	ldrsb.w	r2, [r3, #6]
   203ea:	720a      	strb	r2, [r1, #8]
   203ec:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   203f0:	878a      	strh	r2, [r1, #60]	; 0x3c
   203f2:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   203f6:	86ca      	strh	r2, [r1, #54]	; 0x36
   203f8:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   203fc:	874a      	strh	r2, [r1, #58]	; 0x3a
   203fe:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   20402:	868a      	strh	r2, [r1, #52]	; 0x34
   20404:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   20408:	87ca      	strh	r2, [r1, #62]	; 0x3e
   2040a:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   2040e:	870a      	strh	r2, [r1, #56]	; 0x38
   20410:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   20414:	830a      	strh	r2, [r1, #24]
   20416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   20418:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   2041c:	7c9a      	ldrb	r2, [r3, #18]
   2041e:	744a      	strb	r2, [r1, #17]
   20420:	785a      	ldrb	r2, [r3, #1]
   20422:	70ca      	strb	r2, [r1, #3]
   20424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   20426:	62ca      	str	r2, [r1, #44]	; 0x2c
   20428:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   2042c:	84ca      	strh	r2, [r1, #38]	; 0x26
   2042e:	885a      	ldrh	r2, [r3, #2]
   20430:	808a      	strh	r2, [r1, #4]
   20432:	6a1a      	ldr	r2, [r3, #32]
   20434:	f8c1 201a 	str.w	r2, [r1, #26]
   20438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2043a:	630a      	str	r2, [r1, #48]	; 0x30
   2043c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2043e:	f8c1 201e 	str.w	r2, [r1, #30]
   20442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   20444:	628a      	str	r2, [r1, #40]	; 0x28
   20446:	781a      	ldrb	r2, [r3, #0]
   20448:	708a      	strb	r2, [r1, #2]
   2044a:	f993 2010 	ldrsb.w	r2, [r3, #16]
   2044e:	73ca      	strb	r2, [r1, #15]
   20450:	889a      	ldrh	r2, [r3, #4]
   20452:	80ca      	strh	r2, [r1, #6]
   20454:	8a9a      	ldrh	r2, [r3, #20]
   20456:	824a      	strh	r2, [r1, #18]
   20458:	7c5a      	ldrb	r2, [r3, #17]
   2045a:	740a      	strb	r2, [r1, #16]
   2045c:	699b      	ldr	r3, [r3, #24]
   2045e:	614b      	str	r3, [r1, #20]
   20460:	4770      	bx	lr
   20462:	f04f 30ff 	mov.w	r0, #4294967295
   20466:	4770      	bx	lr

00020468 <rpc_gnss_serialize_alm>:
   20468:	4603      	mov	r3, r0
   2046a:	b360      	cbz	r0, 204c6 <rpc_gnss_serialize_alm+0x5e>
   2046c:	b359      	cbz	r1, 204c6 <rpc_gnss_serialize_alm+0x5e>
   2046e:	2000      	movs	r0, #0
   20470:	2203      	movs	r2, #3
   20472:	7048      	strb	r0, [r1, #1]
   20474:	700a      	strb	r2, [r1, #0]
   20476:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   2047a:	2021      	movs	r0, #33	; 0x21
   2047c:	f8a1 201d 	strh.w	r2, [r1, #29]
   20480:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   20484:	f8a1 201f 	strh.w	r2, [r1, #31]
   20488:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   2048c:	810a      	strh	r2, [r1, #8]
   2048e:	889a      	ldrh	r2, [r3, #4]
   20490:	80ca      	strh	r2, [r1, #6]
   20492:	78da      	ldrb	r2, [r3, #3]
   20494:	714a      	strb	r2, [r1, #5]
   20496:	699a      	ldr	r2, [r3, #24]
   20498:	f8c1 2019 	str.w	r2, [r1, #25]
   2049c:	691a      	ldr	r2, [r3, #16]
   2049e:	f8c1 2011 	str.w	r2, [r1, #17]
   204a2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   204a6:	814a      	strh	r2, [r1, #10]
   204a8:	68da      	ldr	r2, [r3, #12]
   204aa:	f8c1 200d 	str.w	r2, [r1, #13]
   204ae:	7a9a      	ldrb	r2, [r3, #10]
   204b0:	730a      	strb	r2, [r1, #12]
   204b2:	781a      	ldrb	r2, [r3, #0]
   204b4:	708a      	strb	r2, [r1, #2]
   204b6:	789a      	ldrb	r2, [r3, #2]
   204b8:	710a      	strb	r2, [r1, #4]
   204ba:	695a      	ldr	r2, [r3, #20]
   204bc:	f8c1 2015 	str.w	r2, [r1, #21]
   204c0:	785b      	ldrb	r3, [r3, #1]
   204c2:	70cb      	strb	r3, [r1, #3]
   204c4:	4770      	bx	lr
   204c6:	f04f 30ff 	mov.w	r0, #4294967295
   204ca:	4770      	bx	lr

000204cc <rpc_gnss_serialize_klob>:
   204cc:	4603      	mov	r3, r0
   204ce:	b1f0      	cbz	r0, 2050e <rpc_gnss_serialize_klob+0x42>
   204d0:	b1e9      	cbz	r1, 2050e <rpc_gnss_serialize_klob+0x42>
   204d2:	2000      	movs	r0, #0
   204d4:	2204      	movs	r2, #4
   204d6:	7048      	strb	r0, [r1, #1]
   204d8:	700a      	strb	r2, [r1, #0]
   204da:	f993 2000 	ldrsb.w	r2, [r3]
   204de:	200a      	movs	r0, #10
   204e0:	708a      	strb	r2, [r1, #2]
   204e2:	f993 2001 	ldrsb.w	r2, [r3, #1]
   204e6:	70ca      	strb	r2, [r1, #3]
   204e8:	f993 2002 	ldrsb.w	r2, [r3, #2]
   204ec:	710a      	strb	r2, [r1, #4]
   204ee:	f993 2003 	ldrsb.w	r2, [r3, #3]
   204f2:	714a      	strb	r2, [r1, #5]
   204f4:	f993 2004 	ldrsb.w	r2, [r3, #4]
   204f8:	718a      	strb	r2, [r1, #6]
   204fa:	f993 2005 	ldrsb.w	r2, [r3, #5]
   204fe:	71ca      	strb	r2, [r1, #7]
   20500:	f993 2006 	ldrsb.w	r2, [r3, #6]
   20504:	720a      	strb	r2, [r1, #8]
   20506:	f993 3007 	ldrsb.w	r3, [r3, #7]
   2050a:	724b      	strb	r3, [r1, #9]
   2050c:	4770      	bx	lr
   2050e:	f04f 30ff 	mov.w	r0, #4294967295
   20512:	4770      	bx	lr

00020514 <rpc_gnss_serialize_nequick>:
   20514:	4603      	mov	r3, r0
   20516:	b198      	cbz	r0, 20540 <rpc_gnss_serialize_nequick+0x2c>
   20518:	b191      	cbz	r1, 20540 <rpc_gnss_serialize_nequick+0x2c>
   2051a:	2000      	movs	r0, #0
   2051c:	2205      	movs	r2, #5
   2051e:	7048      	strb	r0, [r1, #1]
   20520:	700a      	strb	r2, [r1, #0]
   20522:	f9b3 2000 	ldrsh.w	r2, [r3]
   20526:	200a      	movs	r0, #10
   20528:	804a      	strh	r2, [r1, #2]
   2052a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   2052e:	808a      	strh	r2, [r1, #4]
   20530:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   20534:	80ca      	strh	r2, [r1, #6]
   20536:	799a      	ldrb	r2, [r3, #6]
   20538:	720a      	strb	r2, [r1, #8]
   2053a:	79db      	ldrb	r3, [r3, #7]
   2053c:	724b      	strb	r3, [r1, #9]
   2053e:	4770      	bx	lr
   20540:	f04f 30ff 	mov.w	r0, #4294967295
   20544:	4770      	bx	lr
   20546:	bf00      	nop

00020548 <rpc_gnss_serialize_time_and_sv_tow>:
   20548:	b310      	cbz	r0, 20590 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   2054a:	b309      	cbz	r1, 20590 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   2054c:	b470      	push	{r4, r5, r6}
   2054e:	2500      	movs	r5, #0
   20550:	2606      	movs	r6, #6
   20552:	460c      	mov	r4, r1
   20554:	704d      	strb	r5, [r1, #1]
   20556:	700e      	strb	r6, [r1, #0]
   20558:	462b      	mov	r3, r5
   2055a:	8805      	ldrh	r5, [r0, #0]
   2055c:	4602      	mov	r2, r0
   2055e:	804d      	strh	r5, [r1, #2]
   20560:	68c5      	ldr	r5, [r0, #12]
   20562:	f8c1 500a 	str.w	r5, [r1, #10]
   20566:	8905      	ldrh	r5, [r0, #8]
   20568:	810d      	strh	r5, [r1, #8]
   2056a:	6840      	ldr	r0, [r0, #4]
   2056c:	6048      	str	r0, [r1, #4]
   2056e:	8a15      	ldrh	r5, [r2, #16]
   20570:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   20574:	4408      	add	r0, r1
   20576:	81c5      	strh	r5, [r0, #14]
   20578:	7c90      	ldrb	r0, [r2, #18]
   2057a:	3301      	adds	r3, #1
   2057c:	2b20      	cmp	r3, #32
   2057e:	7420      	strb	r0, [r4, #16]
   20580:	f102 0204 	add.w	r2, r2, #4
   20584:	f104 0403 	add.w	r4, r4, #3
   20588:	d1f1      	bne.n	2056e <rpc_gnss_serialize_time_and_sv_tow+0x26>
   2058a:	206e      	movs	r0, #110	; 0x6e
   2058c:	bc70      	pop	{r4, r5, r6}
   2058e:	4770      	bx	lr
   20590:	f04f 30ff 	mov.w	r0, #4294967295
   20594:	4770      	bx	lr
   20596:	bf00      	nop

00020598 <rpc_gnss_serialize_location>:
   20598:	4603      	mov	r3, r0
   2059a:	b1c8      	cbz	r0, 205d0 <rpc_gnss_serialize_location+0x38>
   2059c:	b1c1      	cbz	r1, 205d0 <rpc_gnss_serialize_location+0x38>
   2059e:	2000      	movs	r0, #0
   205a0:	2207      	movs	r2, #7
   205a2:	7048      	strb	r0, [r1, #1]
   205a4:	700a      	strb	r2, [r1, #0]
   205a6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   205aa:	2011      	movs	r0, #17
   205ac:	814a      	strh	r2, [r1, #10]
   205ae:	7b9a      	ldrb	r2, [r3, #14]
   205b0:	740a      	strb	r2, [r1, #16]
   205b2:	681a      	ldr	r2, [r3, #0]
   205b4:	f8c1 2002 	str.w	r2, [r1, #2]
   205b8:	685a      	ldr	r2, [r3, #4]
   205ba:	f8c1 2006 	str.w	r2, [r1, #6]
   205be:	7b1a      	ldrb	r2, [r3, #12]
   205c0:	738a      	strb	r2, [r1, #14]
   205c2:	7b5a      	ldrb	r2, [r3, #13]
   205c4:	73ca      	strb	r2, [r1, #15]
   205c6:	7a9a      	ldrb	r2, [r3, #10]
   205c8:	730a      	strb	r2, [r1, #12]
   205ca:	7adb      	ldrb	r3, [r3, #11]
   205cc:	734b      	strb	r3, [r1, #13]
   205ce:	4770      	bx	lr
   205d0:	f04f 30ff 	mov.w	r0, #4294967295
   205d4:	4770      	bx	lr
   205d6:	bf00      	nop

000205d8 <rpc_gnss_serialize_integrity>:
   205d8:	b148      	cbz	r0, 205ee <rpc_gnss_serialize_integrity+0x16>
   205da:	b141      	cbz	r1, 205ee <rpc_gnss_serialize_integrity+0x16>
   205dc:	2200      	movs	r2, #0
   205de:	2308      	movs	r3, #8
   205e0:	704a      	strb	r2, [r1, #1]
   205e2:	700b      	strb	r3, [r1, #0]
   205e4:	6803      	ldr	r3, [r0, #0]
   205e6:	2006      	movs	r0, #6
   205e8:	f8c1 3002 	str.w	r3, [r1, #2]
   205ec:	4770      	bx	lr
   205ee:	f04f 30ff 	mov.w	r0, #4294967295
   205f2:	4770      	bx	lr

000205f4 <gnss_client_event_handler>:
   205f4:	f850 1b08 	ldr.w	r1, [r0], #8
   205f8:	0c09      	lsrs	r1, r1, #16
   205fa:	f7fd b8ed 	b.w	1d7d8 <rpc_gnss_event_handler>
   205fe:	bf00      	nop

00020600 <rpc_gnss_client_init>:
   20600:	4801      	ldr	r0, [pc, #4]	; (20608 <rpc_gnss_client_init+0x8>)
   20602:	f7fd b81d 	b.w	1d640 <rpc_client_register>
   20606:	bf00      	nop
   20608:	0002f504 	.word	0x0002f504

0002060c <rpc_gnss_client_request_alloc>:
   2060c:	2300      	movs	r3, #0
   2060e:	b510      	push	{r4, lr}
   20610:	b082      	sub	sp, #8
   20612:	9301      	str	r3, [sp, #4]
   20614:	b158      	cbz	r0, 2062e <rpc_gnss_client_request_alloc+0x22>
   20616:	4604      	mov	r4, r0
   20618:	aa01      	add	r2, sp, #4
   2061a:	2007      	movs	r0, #7
   2061c:	f7fd f88a 	bl	1d734 <rpc_message_alloc>
   20620:	b918      	cbnz	r0, 2062a <rpc_gnss_client_request_alloc+0x1e>
   20622:	9b01      	ldr	r3, [sp, #4]
   20624:	b10b      	cbz	r3, 2062a <rpc_gnss_client_request_alloc+0x1e>
   20626:	3308      	adds	r3, #8
   20628:	6023      	str	r3, [r4, #0]
   2062a:	b002      	add	sp, #8
   2062c:	bd10      	pop	{r4, pc}
   2062e:	2007      	movs	r0, #7
   20630:	b002      	add	sp, #8
   20632:	bd10      	pop	{r4, pc}

00020634 <rpc_gnss_client_request_send>:
   20634:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   20638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2063c:	d10b      	bne.n	20656 <rpc_gnss_client_request_send+0x22>
   2063e:	b160      	cbz	r0, 2065a <rpc_gnss_client_request_send+0x26>
   20640:	4603      	mov	r3, r0
   20642:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   20646:	2007      	movs	r0, #7
   20648:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2064c:	f843 1d08 	str.w	r1, [r3, #-8]!
   20650:	4619      	mov	r1, r3
   20652:	f7fd b85f 	b.w	1d714 <rpc_message_send>
   20656:	200f      	movs	r0, #15
   20658:	4770      	bx	lr
   2065a:	2007      	movs	r0, #7
   2065c:	4770      	bx	lr
   2065e:	bf00      	nop

00020660 <rpc_gnss_client_message_free>:
   20660:	b120      	cbz	r0, 2066c <rpc_gnss_client_message_free+0xc>
   20662:	f1a0 0108 	sub.w	r1, r0, #8
   20666:	2007      	movs	r0, #7
   20668:	f7fd b890 	b.w	1d78c <rpc_message_free>
   2066c:	2007      	movs	r0, #7
   2066e:	4770      	bx	lr

00020670 <rpc_gnss_client_data_free>:
   20670:	b118      	cbz	r0, 2067a <rpc_gnss_client_data_free+0xa>
   20672:	4601      	mov	r1, r0
   20674:	2007      	movs	r0, #7
   20676:	f7fd b895 	b.w	1d7a4 <rpc_message_data_free>
   2067a:	2007      	movs	r0, #7
   2067c:	4770      	bx	lr
   2067e:	bf00      	nop

00020680 <datagram_handler_init>:
   20680:	b510      	push	{r4, lr}
   20682:	4604      	mov	r4, r0
   20684:	200c      	movs	r0, #12
   20686:	f000 fdd7 	bl	21238 <nrf_malloc>
   2068a:	60e0      	str	r0, [r4, #12]
   2068c:	b118      	cbz	r0, 20696 <datagram_handler_init+0x16>
   2068e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20692:	f7ff bd5f 	b.w	20154 <linked_list_init>
   20696:	2004      	movs	r0, #4
   20698:	bd10      	pop	{r4, pc}
   2069a:	bf00      	nop

0002069c <datagram_handler_put>:
   2069c:	b570      	push	{r4, r5, r6, lr}
   2069e:	4606      	mov	r6, r0
   206a0:	2014      	movs	r0, #20
   206a2:	460d      	mov	r5, r1
   206a4:	f000 fdc8 	bl	21238 <nrf_malloc>
   206a8:	b178      	cbz	r0, 206ca <datagram_handler_put+0x2e>
   206aa:	682b      	ldr	r3, [r5, #0]
   206ac:	4604      	mov	r4, r0
   206ae:	6043      	str	r3, [r0, #4]
   206b0:	686b      	ldr	r3, [r5, #4]
   206b2:	4601      	mov	r1, r0
   206b4:	6083      	str	r3, [r0, #8]
   206b6:	68eb      	ldr	r3, [r5, #12]
   206b8:	60c3      	str	r3, [r0, #12]
   206ba:	68ab      	ldr	r3, [r5, #8]
   206bc:	6103      	str	r3, [r0, #16]
   206be:	68f0      	ldr	r0, [r6, #12]
   206c0:	f7ff fd52 	bl	20168 <linked_list_push>
   206c4:	b920      	cbnz	r0, 206d0 <datagram_handler_put+0x34>
   206c6:	6868      	ldr	r0, [r5, #4]
   206c8:	bd70      	pop	{r4, r5, r6, pc}
   206ca:	f04f 30ff 	mov.w	r0, #4294967295
   206ce:	bd70      	pop	{r4, r5, r6, pc}
   206d0:	4620      	mov	r0, r4
   206d2:	f000 fdbb 	bl	2124c <nrf_free>
   206d6:	f04f 30ff 	mov.w	r0, #4294967295
   206da:	bd70      	pop	{r4, r5, r6, pc}

000206dc <datagram_handler_get>:
   206dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   206e0:	4607      	mov	r7, r0
   206e2:	b084      	sub	sp, #16
   206e4:	68c0      	ldr	r0, [r0, #12]
   206e6:	460c      	mov	r4, r1
   206e8:	4616      	mov	r6, r2
   206ea:	f7ff fd5d 	bl	201a8 <linked_list_peek>
   206ee:	2800      	cmp	r0, #0
   206f0:	d03b      	beq.n	2076a <datagram_handler_get+0x8e>
   206f2:	6882      	ldr	r2, [r0, #8]
   206f4:	4605      	mov	r5, r0
   206f6:	e9d4 0300 	ldrd	r0, r3, [r4]
   206fa:	429a      	cmp	r2, r3
   206fc:	bf28      	it	cs
   206fe:	461a      	movcs	r2, r3
   20700:	6062      	str	r2, [r4, #4]
   20702:	b110      	cbz	r0, 2070a <datagram_handler_get+0x2e>
   20704:	6869      	ldr	r1, [r5, #4]
   20706:	f7ec fa21 	bl	cb4c <memcpy>
   2070a:	68a0      	ldr	r0, [r4, #8]
   2070c:	b118      	cbz	r0, 20716 <datagram_handler_get+0x3a>
   2070e:	692b      	ldr	r3, [r5, #16]
   20710:	b10b      	cbz	r3, 20716 <datagram_handler_get+0x3a>
   20712:	68ea      	ldr	r2, [r5, #12]
   20714:	bb02      	cbnz	r2, 20758 <datagram_handler_get+0x7c>
   20716:	2300      	movs	r3, #0
   20718:	60e3      	str	r3, [r4, #12]
   2071a:	0732      	lsls	r2, r6, #28
   2071c:	d506      	bpl.n	2072c <datagram_handler_get+0x50>
   2071e:	06b3      	lsls	r3, r6, #26
   20720:	bf4c      	ite	mi
   20722:	68a8      	ldrmi	r0, [r5, #8]
   20724:	6860      	ldrpl	r0, [r4, #4]
   20726:	b004      	add	sp, #16
   20728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2072c:	68f8      	ldr	r0, [r7, #12]
   2072e:	f7ff fd31 	bl	20194 <linked_list_pop>
   20732:	4680      	mov	r8, r0
   20734:	2800      	cmp	r0, #0
   20736:	d0f2      	beq.n	2071e <datagram_handler_get+0x42>
   20738:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   2073c:	6902      	ldr	r2, [r0, #16]
   2073e:	9300      	str	r3, [sp, #0]
   20740:	68c3      	ldr	r3, [r0, #12]
   20742:	e9cd 1201 	strd	r1, r2, [sp, #4]
   20746:	9303      	str	r3, [sp, #12]
   20748:	4668      	mov	r0, sp
   2074a:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
   2074e:	4798      	blx	r3
   20750:	4640      	mov	r0, r8
   20752:	f000 fd7b 	bl	2124c <nrf_free>
   20756:	e7e2      	b.n	2071e <datagram_handler_get+0x42>
   20758:	68e3      	ldr	r3, [r4, #12]
   2075a:	429a      	cmp	r2, r3
   2075c:	bf28      	it	cs
   2075e:	461a      	movcs	r2, r3
   20760:	60e2      	str	r2, [r4, #12]
   20762:	6929      	ldr	r1, [r5, #16]
   20764:	f7ec f9f2 	bl	cb4c <memcpy>
   20768:	e7d7      	b.n	2071a <datagram_handler_get+0x3e>
   2076a:	f04f 30ff 	mov.w	r0, #4294967295
   2076e:	e7da      	b.n	20726 <datagram_handler_get+0x4a>

00020770 <datagram_handler_available>:
   20770:	b508      	push	{r3, lr}
   20772:	68c0      	ldr	r0, [r0, #12]
   20774:	f7ff fd18 	bl	201a8 <linked_list_peek>
   20778:	b108      	cbz	r0, 2077e <datagram_handler_available+0xe>
   2077a:	6880      	ldr	r0, [r0, #8]
   2077c:	bd08      	pop	{r3, pc}
   2077e:	f04f 30ff 	mov.w	r0, #4294967295
   20782:	bd08      	pop	{r3, pc}

00020784 <datagram_handler_flush>:
   20784:	b530      	push	{r4, r5, lr}
   20786:	4605      	mov	r5, r0
   20788:	68c0      	ldr	r0, [r0, #12]
   2078a:	b085      	sub	sp, #20
   2078c:	b9a8      	cbnz	r0, 207ba <datagram_handler_flush+0x36>
   2078e:	e01a      	b.n	207c6 <datagram_handler_flush+0x42>
   20790:	68e8      	ldr	r0, [r5, #12]
   20792:	f7ff fcff 	bl	20194 <linked_list_pop>
   20796:	4604      	mov	r4, r0
   20798:	b170      	cbz	r0, 207b8 <datagram_handler_flush+0x34>
   2079a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   2079e:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   207a2:	e9cd 0100 	strd	r0, r1, [sp]
   207a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   207aa:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   207ae:	4668      	mov	r0, sp
   207b0:	4798      	blx	r3
   207b2:	4620      	mov	r0, r4
   207b4:	f000 fd4a 	bl	2124c <nrf_free>
   207b8:	68e8      	ldr	r0, [r5, #12]
   207ba:	f7ff fcfb 	bl	201b4 <linked_list_size_get>
   207be:	2800      	cmp	r0, #0
   207c0:	d1e6      	bne.n	20790 <datagram_handler_flush+0xc>
   207c2:	b005      	add	sp, #20
   207c4:	bd30      	pop	{r4, r5, pc}
   207c6:	2008      	movs	r0, #8
   207c8:	b005      	add	sp, #20
   207ca:	bd30      	pop	{r4, r5, pc}

000207cc <datagram_handler_free>:
   207cc:	b530      	push	{r4, r5, lr}
   207ce:	4605      	mov	r5, r0
   207d0:	68c0      	ldr	r0, [r0, #12]
   207d2:	b085      	sub	sp, #20
   207d4:	b9a0      	cbnz	r0, 20800 <datagram_handler_free+0x34>
   207d6:	e01c      	b.n	20812 <datagram_handler_free+0x46>
   207d8:	f7ff fcdc 	bl	20194 <linked_list_pop>
   207dc:	4604      	mov	r4, r0
   207de:	b170      	cbz	r0, 207fe <datagram_handler_free+0x32>
   207e0:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   207e4:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   207e8:	e9cd 0100 	strd	r0, r1, [sp]
   207ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
   207f0:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   207f4:	4668      	mov	r0, sp
   207f6:	4798      	blx	r3
   207f8:	4620      	mov	r0, r4
   207fa:	f000 fd27 	bl	2124c <nrf_free>
   207fe:	68e8      	ldr	r0, [r5, #12]
   20800:	f7ff fcd8 	bl	201b4 <linked_list_size_get>
   20804:	4604      	mov	r4, r0
   20806:	68e8      	ldr	r0, [r5, #12]
   20808:	2c00      	cmp	r4, #0
   2080a:	d1e5      	bne.n	207d8 <datagram_handler_free+0xc>
   2080c:	f000 fd1e 	bl	2124c <nrf_free>
   20810:	60ec      	str	r4, [r5, #12]
   20812:	b005      	add	sp, #20
   20814:	bd30      	pop	{r4, r5, pc}
   20816:	bf00      	nop

00020818 <null_handler_init>:
   20818:	2000      	movs	r0, #0
   2081a:	4770      	bx	lr

0002081c <null_handler_put>:
   2081c:	b510      	push	{r4, lr}
   2081e:	460c      	mov	r4, r1
   20820:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   20824:	4620      	mov	r0, r4
   20826:	4798      	blx	r3
   20828:	6860      	ldr	r0, [r4, #4]
   2082a:	bd10      	pop	{r4, pc}

0002082c <null_handler_get>:
   2082c:	f04f 30ff 	mov.w	r0, #4294967295
   20830:	4770      	bx	lr
   20832:	bf00      	nop

00020834 <null_handler_available>:
   20834:	f04f 30ff 	mov.w	r0, #4294967295
   20838:	4770      	bx	lr
   2083a:	bf00      	nop

0002083c <null_handler_flush>:
   2083c:	2000      	movs	r0, #0
   2083e:	4770      	bx	lr

00020840 <null_handler_free>:
   20840:	4770      	bx	lr
   20842:	bf00      	nop

00020844 <packet_handler_create>:
   20844:	2801      	cmp	r0, #1
   20846:	b538      	push	{r3, r4, r5, lr}
   20848:	460d      	mov	r5, r1
   2084a:	4614      	mov	r4, r2
   2084c:	d00d      	beq.n	2086a <packet_handler_create+0x26>
   2084e:	db11      	blt.n	20874 <packet_handler_create+0x30>
   20850:	2803      	cmp	r0, #3
   20852:	dc0f      	bgt.n	20874 <packet_handler_create+0x30>
   20854:	2010      	movs	r0, #16
   20856:	f000 fcef 	bl	21238 <nrf_malloc>
   2085a:	2218      	movs	r2, #24
   2085c:	b120      	cbz	r0, 20868 <packet_handler_create+0x24>
   2085e:	4b08      	ldr	r3, [pc, #32]	; (20880 <packet_handler_create+0x3c>)
   20860:	6045      	str	r5, [r0, #4]
   20862:	4413      	add	r3, r2
   20864:	6084      	str	r4, [r0, #8]
   20866:	6003      	str	r3, [r0, #0]
   20868:	bd38      	pop	{r3, r4, r5, pc}
   2086a:	2014      	movs	r0, #20
   2086c:	f000 fce4 	bl	21238 <nrf_malloc>
   20870:	2230      	movs	r2, #48	; 0x30
   20872:	e7f3      	b.n	2085c <packet_handler_create+0x18>
   20874:	200c      	movs	r0, #12
   20876:	f000 fcdf 	bl	21238 <nrf_malloc>
   2087a:	2200      	movs	r2, #0
   2087c:	e7ee      	b.n	2085c <packet_handler_create+0x18>
   2087e:	bf00      	nop
   20880:	0002f514 	.word	0x0002f514

00020884 <packet_handler_delete>:
   20884:	b510      	push	{r4, lr}
   20886:	4604      	mov	r4, r0
   20888:	6803      	ldr	r3, [r0, #0]
   2088a:	691b      	ldr	r3, [r3, #16]
   2088c:	4798      	blx	r3
   2088e:	6823      	ldr	r3, [r4, #0]
   20890:	4620      	mov	r0, r4
   20892:	695b      	ldr	r3, [r3, #20]
   20894:	4798      	blx	r3
   20896:	4620      	mov	r0, r4
   20898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2089c:	f000 bcd6 	b.w	2124c <nrf_free>

000208a0 <stream_handler_init>:
   208a0:	b510      	push	{r4, lr}
   208a2:	4604      	mov	r4, r0
   208a4:	200c      	movs	r0, #12
   208a6:	f000 fcc7 	bl	21238 <nrf_malloc>
   208aa:	60e0      	str	r0, [r4, #12]
   208ac:	b128      	cbz	r0, 208ba <stream_handler_init+0x1a>
   208ae:	2300      	movs	r3, #0
   208b0:	6123      	str	r3, [r4, #16]
   208b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   208b6:	f7ff bc4d 	b.w	20154 <linked_list_init>
   208ba:	2004      	movs	r0, #4
   208bc:	bd10      	pop	{r4, pc}
   208be:	bf00      	nop

000208c0 <stream_handler_put>:
   208c0:	b570      	push	{r4, r5, r6, lr}
   208c2:	4606      	mov	r6, r0
   208c4:	2014      	movs	r0, #20
   208c6:	460d      	mov	r5, r1
   208c8:	f000 fcb6 	bl	21238 <nrf_malloc>
   208cc:	b178      	cbz	r0, 208ee <stream_handler_put+0x2e>
   208ce:	682b      	ldr	r3, [r5, #0]
   208d0:	4604      	mov	r4, r0
   208d2:	6043      	str	r3, [r0, #4]
   208d4:	686b      	ldr	r3, [r5, #4]
   208d6:	4601      	mov	r1, r0
   208d8:	6083      	str	r3, [r0, #8]
   208da:	68eb      	ldr	r3, [r5, #12]
   208dc:	60c3      	str	r3, [r0, #12]
   208de:	68ab      	ldr	r3, [r5, #8]
   208e0:	6103      	str	r3, [r0, #16]
   208e2:	68f0      	ldr	r0, [r6, #12]
   208e4:	f7ff fc40 	bl	20168 <linked_list_push>
   208e8:	b920      	cbnz	r0, 208f4 <stream_handler_put+0x34>
   208ea:	6868      	ldr	r0, [r5, #4]
   208ec:	bd70      	pop	{r4, r5, r6, pc}
   208ee:	f04f 30ff 	mov.w	r0, #4294967295
   208f2:	bd70      	pop	{r4, r5, r6, pc}
   208f4:	4620      	mov	r0, r4
   208f6:	f000 fca9 	bl	2124c <nrf_free>
   208fa:	f04f 30ff 	mov.w	r0, #4294967295
   208fe:	bd70      	pop	{r4, r5, r6, pc}

00020900 <stream_handler_get>:
   20900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20904:	4682      	mov	sl, r0
   20906:	b089      	sub	sp, #36	; 0x24
   20908:	68c0      	ldr	r0, [r0, #12]
   2090a:	4689      	mov	r9, r1
   2090c:	4693      	mov	fp, r2
   2090e:	f7ff fc4b 	bl	201a8 <linked_list_peek>
   20912:	2800      	cmp	r0, #0
   20914:	d071      	beq.n	209fa <stream_handler_get+0xfa>
   20916:	4605      	mov	r5, r0
   20918:	f8d9 0008 	ldr.w	r0, [r9, #8]
   2091c:	b120      	cbz	r0, 20928 <stream_handler_get+0x28>
   2091e:	692b      	ldr	r3, [r5, #16]
   20920:	b113      	cbz	r3, 20928 <stream_handler_get+0x28>
   20922:	68ea      	ldr	r2, [r5, #12]
   20924:	2a00      	cmp	r2, #0
   20926:	d15d      	bne.n	209e4 <stream_handler_get+0xe4>
   20928:	2300      	movs	r3, #0
   2092a:	f8c9 300c 	str.w	r3, [r9, #12]
   2092e:	f8d9 2000 	ldr.w	r2, [r9]
   20932:	f8d9 8004 	ldr.w	r8, [r9, #4]
   20936:	f8da 1010 	ldr.w	r1, [sl, #16]
   2093a:	9203      	str	r2, [sp, #12]
   2093c:	f1b8 0f00 	cmp.w	r8, #0
   20940:	d030      	beq.n	209a4 <stream_handler_get+0xa4>
   20942:	2400      	movs	r4, #0
   20944:	f00b 0320 	and.w	r3, fp, #32
   20948:	9301      	str	r3, [sp, #4]
   2094a:	f00b 0b08 	and.w	fp, fp, #8
   2094e:	68ae      	ldr	r6, [r5, #8]
   20950:	eba8 0304 	sub.w	r3, r8, r4
   20954:	1a76      	subs	r6, r6, r1
   20956:	429e      	cmp	r6, r3
   20958:	4637      	mov	r7, r6
   2095a:	bf28      	it	cs
   2095c:	461f      	movcs	r7, r3
   2095e:	b10a      	cbz	r2, 20964 <stream_handler_get+0x64>
   20960:	9a01      	ldr	r2, [sp, #4]
   20962:	b1aa      	cbz	r2, 20990 <stream_handler_get+0x90>
   20964:	f1bb 0f00 	cmp.w	fp, #0
   20968:	d106      	bne.n	20978 <stream_handler_get+0x78>
   2096a:	429e      	cmp	r6, r3
   2096c:	d921      	bls.n	209b2 <stream_handler_get+0xb2>
   2096e:	f8da 3010 	ldr.w	r3, [sl, #16]
   20972:	443b      	add	r3, r7
   20974:	f8ca 3010 	str.w	r3, [sl, #16]
   20978:	4628      	mov	r0, r5
   2097a:	f7ff fc1d 	bl	201b8 <linked_list_get_next>
   2097e:	443c      	add	r4, r7
   20980:	4605      	mov	r5, r0
   20982:	b180      	cbz	r0, 209a6 <stream_handler_get+0xa6>
   20984:	45a0      	cmp	r8, r4
   20986:	d90e      	bls.n	209a6 <stream_handler_get+0xa6>
   20988:	f8d9 2000 	ldr.w	r2, [r9]
   2098c:	2100      	movs	r1, #0
   2098e:	e7de      	b.n	2094e <stream_handler_get+0x4e>
   20990:	6868      	ldr	r0, [r5, #4]
   20992:	9302      	str	r3, [sp, #8]
   20994:	9b03      	ldr	r3, [sp, #12]
   20996:	4401      	add	r1, r0
   20998:	463a      	mov	r2, r7
   2099a:	1918      	adds	r0, r3, r4
   2099c:	f7ec f8d6 	bl	cb4c <memcpy>
   209a0:	9b02      	ldr	r3, [sp, #8]
   209a2:	e7df      	b.n	20964 <stream_handler_get+0x64>
   209a4:	4644      	mov	r4, r8
   209a6:	4620      	mov	r0, r4
   209a8:	f8c9 4004 	str.w	r4, [r9, #4]
   209ac:	b009      	add	sp, #36	; 0x24
   209ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209b2:	f8da 000c 	ldr.w	r0, [sl, #12]
   209b6:	f7ff fbed 	bl	20194 <linked_list_pop>
   209ba:	4606      	mov	r6, r0
   209bc:	b170      	cbz	r0, 209dc <stream_handler_get+0xdc>
   209be:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   209c2:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   209c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
   209ca:	e9cd 1006 	strd	r1, r0, [sp, #24]
   209ce:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   209d2:	a804      	add	r0, sp, #16
   209d4:	4798      	blx	r3
   209d6:	4630      	mov	r0, r6
   209d8:	f000 fc38 	bl	2124c <nrf_free>
   209dc:	2300      	movs	r3, #0
   209de:	f8ca 3010 	str.w	r3, [sl, #16]
   209e2:	e7c9      	b.n	20978 <stream_handler_get+0x78>
   209e4:	f8d9 300c 	ldr.w	r3, [r9, #12]
   209e8:	429a      	cmp	r2, r3
   209ea:	bf28      	it	cs
   209ec:	461a      	movcs	r2, r3
   209ee:	f8c9 200c 	str.w	r2, [r9, #12]
   209f2:	6929      	ldr	r1, [r5, #16]
   209f4:	f7ec f8aa 	bl	cb4c <memcpy>
   209f8:	e799      	b.n	2092e <stream_handler_get+0x2e>
   209fa:	f04f 30ff 	mov.w	r0, #4294967295
   209fe:	e7d5      	b.n	209ac <stream_handler_get+0xac>

00020a00 <stream_handler_available>:
   20a00:	b510      	push	{r4, lr}
   20a02:	4604      	mov	r4, r0
   20a04:	68c0      	ldr	r0, [r0, #12]
   20a06:	f7ff fbcf 	bl	201a8 <linked_list_peek>
   20a0a:	b150      	cbz	r0, 20a22 <stream_handler_available+0x22>
   20a0c:	6924      	ldr	r4, [r4, #16]
   20a0e:	4264      	negs	r4, r4
   20a10:	6883      	ldr	r3, [r0, #8]
   20a12:	441c      	add	r4, r3
   20a14:	f7ff fbd0 	bl	201b8 <linked_list_get_next>
   20a18:	2800      	cmp	r0, #0
   20a1a:	d1f9      	bne.n	20a10 <stream_handler_available+0x10>
   20a1c:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   20a20:	bd10      	pop	{r4, pc}
   20a22:	f04f 30ff 	mov.w	r0, #4294967295
   20a26:	bd10      	pop	{r4, pc}

00020a28 <stream_handler_flush>:
   20a28:	b530      	push	{r4, r5, lr}
   20a2a:	4605      	mov	r5, r0
   20a2c:	68c0      	ldr	r0, [r0, #12]
   20a2e:	b085      	sub	sp, #20
   20a30:	b9a8      	cbnz	r0, 20a5e <stream_handler_flush+0x36>
   20a32:	e01a      	b.n	20a6a <stream_handler_flush+0x42>
   20a34:	68e8      	ldr	r0, [r5, #12]
   20a36:	f7ff fbad 	bl	20194 <linked_list_pop>
   20a3a:	4604      	mov	r4, r0
   20a3c:	b170      	cbz	r0, 20a5c <stream_handler_flush+0x34>
   20a3e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   20a42:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   20a46:	e9cd 0100 	strd	r0, r1, [sp]
   20a4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   20a4e:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   20a52:	4668      	mov	r0, sp
   20a54:	4798      	blx	r3
   20a56:	4620      	mov	r0, r4
   20a58:	f000 fbf8 	bl	2124c <nrf_free>
   20a5c:	68e8      	ldr	r0, [r5, #12]
   20a5e:	f7ff fba9 	bl	201b4 <linked_list_size_get>
   20a62:	2800      	cmp	r0, #0
   20a64:	d1e6      	bne.n	20a34 <stream_handler_flush+0xc>
   20a66:	b005      	add	sp, #20
   20a68:	bd30      	pop	{r4, r5, pc}
   20a6a:	2008      	movs	r0, #8
   20a6c:	b005      	add	sp, #20
   20a6e:	bd30      	pop	{r4, r5, pc}

00020a70 <stream_handler_free>:
   20a70:	b530      	push	{r4, r5, lr}
   20a72:	4605      	mov	r5, r0
   20a74:	68c0      	ldr	r0, [r0, #12]
   20a76:	b085      	sub	sp, #20
   20a78:	b9a0      	cbnz	r0, 20aa4 <stream_handler_free+0x34>
   20a7a:	e01c      	b.n	20ab6 <stream_handler_free+0x46>
   20a7c:	f7ff fb8a 	bl	20194 <linked_list_pop>
   20a80:	4604      	mov	r4, r0
   20a82:	b170      	cbz	r0, 20aa2 <stream_handler_free+0x32>
   20a84:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   20a88:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   20a8c:	e9cd 0100 	strd	r0, r1, [sp]
   20a90:	e9cd 2302 	strd	r2, r3, [sp, #8]
   20a94:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   20a98:	4668      	mov	r0, sp
   20a9a:	4798      	blx	r3
   20a9c:	4620      	mov	r0, r4
   20a9e:	f000 fbd5 	bl	2124c <nrf_free>
   20aa2:	68e8      	ldr	r0, [r5, #12]
   20aa4:	f7ff fb86 	bl	201b4 <linked_list_size_get>
   20aa8:	4604      	mov	r4, r0
   20aaa:	68e8      	ldr	r0, [r5, #12]
   20aac:	2c00      	cmp	r4, #0
   20aae:	d1e5      	bne.n	20a7c <stream_handler_free+0xc>
   20ab0:	f000 fbcc 	bl	2124c <nrf_free>
   20ab4:	60ec      	str	r4, [r5, #12]
   20ab6:	b005      	add	sp, #20
   20ab8:	bd30      	pop	{r4, r5, pc}
   20aba:	bf00      	nop

00020abc <mem_free>:
   20abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ac0:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 20b90 <mem_free+0xd4>
   20ac4:	b083      	sub	sp, #12
   20ac6:	9000      	str	r0, [sp, #0]
   20ac8:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   20acc:	f8dc 3008 	ldr.w	r3, [ip, #8]
   20ad0:	b12b      	cbz	r3, 20ade <mem_free+0x22>
   20ad2:	f8dc 2000 	ldr.w	r2, [ip]
   20ad6:	9c00      	ldr	r4, [sp, #0]
   20ad8:	7810      	ldrb	r0, [r2, #0]
   20ada:	42a0      	cmp	r0, r4
   20adc:	d006      	beq.n	20aec <mem_free+0x30>
   20ade:	f10c 0c0c 	add.w	ip, ip, #12
   20ae2:	45e3      	cmp	fp, ip
   20ae4:	d1f2      	bne.n	20acc <mem_free+0x10>
   20ae6:	b003      	add	sp, #12
   20ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20aec:	f8dc a004 	ldr.w	sl, [ip, #4]
   20af0:	eb03 080a 	add.w	r8, r3, sl
   20af4:	45c2      	cmp	sl, r8
   20af6:	d2f2      	bcs.n	20ade <mem_free+0x22>
   20af8:	6853      	ldr	r3, [r2, #4]
   20afa:	f8cd c004 	str.w	ip, [sp, #4]
   20afe:	46d6      	mov	lr, sl
   20b00:	469c      	mov	ip, r3
   20b02:	f8d2 9010 	ldr.w	r9, [r2, #16]
   20b06:	8997      	ldrh	r7, [r2, #12]
   20b08:	ebae 000a 	sub.w	r0, lr, sl
   20b0c:	b3df      	cbz	r7, 20b86 <mem_free+0xca>
   20b0e:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   20b12:	4290      	cmp	r0, r2
   20b14:	d31c      	bcc.n	20b50 <mem_free+0x94>
   20b16:	4665      	mov	r5, ip
   20b18:	2400      	movs	r4, #0
   20b1a:	f109 0304 	add.w	r3, r9, #4
   20b1e:	e003      	b.n	20b28 <mem_free+0x6c>
   20b20:	885a      	ldrh	r2, [r3, #2]
   20b22:	3304      	adds	r3, #4
   20b24:	4282      	cmp	r2, r0
   20b26:	d815      	bhi.n	20b54 <mem_free+0x98>
   20b28:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   20b2c:	3401      	adds	r4, #1
   20b2e:	42a7      	cmp	r7, r4
   20b30:	fb02 5506 	mla	r5, r2, r6, r5
   20b34:	eba0 0002 	sub.w	r0, r0, r2
   20b38:	461e      	mov	r6, r3
   20b3a:	d1f1      	bne.n	20b20 <mem_free+0x64>
   20b3c:	2000      	movs	r0, #0
   20b3e:	4281      	cmp	r1, r0
   20b40:	d00d      	beq.n	20b5e <mem_free+0xa2>
   20b42:	f10e 0e01 	add.w	lr, lr, #1
   20b46:	45f0      	cmp	r8, lr
   20b48:	d1de      	bne.n	20b08 <mem_free+0x4c>
   20b4a:	f8dd c004 	ldr.w	ip, [sp, #4]
   20b4e:	e7c6      	b.n	20ade <mem_free+0x22>
   20b50:	4665      	mov	r5, ip
   20b52:	464e      	mov	r6, r9
   20b54:	8833      	ldrh	r3, [r6, #0]
   20b56:	fb00 5003 	mla	r0, r0, r3, r5
   20b5a:	4281      	cmp	r1, r0
   20b5c:	d1f1      	bne.n	20b42 <mem_free+0x86>
   20b5e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   20b62:	f8dd c004 	ldr.w	ip, [sp, #4]
   20b66:	d0ba      	beq.n	20ade <mem_free+0x22>
   20b68:	2301      	movs	r3, #1
   20b6a:	4a08      	ldr	r2, [pc, #32]	; (20b8c <mem_free+0xd0>)
   20b6c:	ea4f 115e 	mov.w	r1, lr, lsr #5
   20b70:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   20b74:	f00e 0e1f 	and.w	lr, lr, #31
   20b78:	fa03 fe0e 	lsl.w	lr, r3, lr
   20b7c:	ea4e 0000 	orr.w	r0, lr, r0
   20b80:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   20b84:	e7af      	b.n	20ae6 <mem_free+0x2a>
   20b86:	4638      	mov	r0, r7
   20b88:	e7d9      	b.n	20b3e <mem_free+0x82>
   20b8a:	bf00      	nop
   20b8c:	20021c0c 	.word	0x20021c0c
   20b90:	20021c50 	.word	0x20021c50

00020b94 <mem_alloc.constprop.5>:
   20b94:	2800      	cmp	r0, #0
   20b96:	d050      	beq.n	20c3a <mem_alloc.constprop.5+0xa6>
   20b98:	4b6d      	ldr	r3, [pc, #436]	; (20d50 <mem_alloc.constprop.5+0x1bc>)
   20b9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   20b9e:	4290      	cmp	r0, r2
   20ba0:	d84b      	bhi.n	20c3a <mem_alloc.constprop.5+0xa6>
   20ba2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ba6:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   20baa:	b083      	sub	sp, #12
   20bac:	f1bb 0f00 	cmp.w	fp, #0
   20bb0:	d054      	beq.n	20c5c <mem_alloc.constprop.5+0xc8>
   20bb2:	f10b 32ff 	add.w	r2, fp, #4294967295
   20bb6:	4691      	mov	r9, r2
   20bb8:	2600      	movs	r6, #0
   20bba:	f04f 0812 	mov.w	r8, #18
   20bbe:	4f65      	ldr	r7, [pc, #404]	; (20d54 <mem_alloc.constprop.5+0x1c0>)
   20bc0:	9201      	str	r2, [sp, #4]
   20bc2:	f10b 0e11 	add.w	lr, fp, #17
   20bc6:	eb06 0209 	add.w	r2, r6, r9
   20bca:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   20bce:	3201      	adds	r2, #1
   20bd0:	0852      	lsrs	r2, r2, #1
   20bd2:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   20bd6:	f102 0112 	add.w	r1, r2, #18
   20bda:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   20bde:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   20be2:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   20be6:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   20bea:	f8dc c004 	ldr.w	ip, [ip, #4]
   20bee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   20bf2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   20bf6:	f8da a010 	ldr.w	sl, [sl, #16]
   20bfa:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   20bfe:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   20c02:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   20c06:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   20c0a:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   20c0e:	6849      	ldr	r1, [r1, #4]
   20c10:	692d      	ldr	r5, [r5, #16]
   20c12:	6924      	ldr	r4, [r4, #16]
   20c14:	f8dc c004 	ldr.w	ip, [ip, #4]
   20c18:	4550      	cmp	r0, sl
   20c1a:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   20c1e:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   20c22:	d915      	bls.n	20c50 <mem_alloc.constprop.5+0xbc>
   20c24:	4288      	cmp	r0, r1
   20c26:	d211      	bcs.n	20c4c <mem_alloc.constprop.5+0xb8>
   20c28:	42a8      	cmp	r0, r5
   20c2a:	d908      	bls.n	20c3e <mem_alloc.constprop.5+0xaa>
   20c2c:	1c56      	adds	r6, r2, #1
   20c2e:	45b1      	cmp	r9, r6
   20c30:	f0c0 8087 	bcc.w	20d42 <mem_alloc.constprop.5+0x1ae>
   20c34:	f102 0813 	add.w	r8, r2, #19
   20c38:	e7c5      	b.n	20bc6 <mem_alloc.constprop.5+0x32>
   20c3a:	2000      	movs	r0, #0
   20c3c:	4770      	bx	lr
   20c3e:	f102 39ff 	add.w	r9, r2, #4294967295
   20c42:	454e      	cmp	r6, r9
   20c44:	d87d      	bhi.n	20d42 <mem_alloc.constprop.5+0x1ae>
   20c46:	f102 0e11 	add.w	lr, r2, #17
   20c4a:	e7bc      	b.n	20bc6 <mem_alloc.constprop.5+0x32>
   20c4c:	f109 0601 	add.w	r6, r9, #1
   20c50:	45b3      	cmp	fp, r6
   20c52:	d007      	beq.n	20c64 <mem_alloc.constprop.5+0xd0>
   20c54:	2e10      	cmp	r6, #16
   20c56:	d001      	beq.n	20c5c <mem_alloc.constprop.5+0xc8>
   20c58:	45b3      	cmp	fp, r6
   20c5a:	d808      	bhi.n	20c6e <mem_alloc.constprop.5+0xda>
   20c5c:	2000      	movs	r0, #0
   20c5e:	b003      	add	sp, #12
   20c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c64:	9a01      	ldr	r2, [sp, #4]
   20c66:	2a10      	cmp	r2, #16
   20c68:	bf18      	it	ne
   20c6a:	4616      	movne	r6, r2
   20c6c:	d0f6      	beq.n	20c5c <mem_alloc.constprop.5+0xc8>
   20c6e:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 20d58 <mem_alloc.constprop.5+0x1c4>
   20c72:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   20c76:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   20c7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   20c7e:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   20c82:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   20c86:	f8d2 e004 	ldr.w	lr, [r2, #4]
   20c8a:	691d      	ldr	r5, [r3, #16]
   20c8c:	2c00      	cmp	r4, #0
   20c8e:	d056      	beq.n	20d3e <mem_alloc.constprop.5+0x1aa>
   20c90:	462a      	mov	r2, r5
   20c92:	4670      	mov	r0, lr
   20c94:	00a4      	lsls	r4, r4, #2
   20c96:	eb05 0904 	add.w	r9, r5, r4
   20c9a:	8851      	ldrh	r1, [r2, #2]
   20c9c:	3204      	adds	r2, #4
   20c9e:	4591      	cmp	r9, r2
   20ca0:	4408      	add	r0, r1
   20ca2:	d1fa      	bne.n	20c9a <mem_alloc.constprop.5+0x106>
   20ca4:	1929      	adds	r1, r5, r4
   20ca6:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   20caa:	4482      	add	sl, r0
   20cac:	4582      	cmp	sl, r0
   20cae:	d918      	bls.n	20ce2 <mem_alloc.constprop.5+0x14e>
   20cb0:	0941      	lsrs	r1, r0, #5
   20cb2:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   20cb6:	f000 041f 	and.w	r4, r0, #31
   20cba:	fa22 f904 	lsr.w	r9, r2, r4
   20cbe:	f019 0f01 	tst.w	r9, #1
   20cc2:	d007      	beq.n	20cd4 <mem_alloc.constprop.5+0x140>
   20cc4:	e013      	b.n	20cee <mem_alloc.constprop.5+0x15a>
   20cc6:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   20cca:	fa22 f904 	lsr.w	r9, r2, r4
   20cce:	f019 0f01 	tst.w	r9, #1
   20cd2:	d10c      	bne.n	20cee <mem_alloc.constprop.5+0x15a>
   20cd4:	3001      	adds	r0, #1
   20cd6:	4582      	cmp	sl, r0
   20cd8:	ea4f 1150 	mov.w	r1, r0, lsr #5
   20cdc:	f000 041f 	and.w	r4, r0, #31
   20ce0:	d1f1      	bne.n	20cc6 <mem_alloc.constprop.5+0x132>
   20ce2:	3601      	adds	r6, #1
   20ce4:	455e      	cmp	r6, fp
   20ce6:	f108 0808 	add.w	r8, r8, #8
   20cea:	d3c4      	bcc.n	20c76 <mem_alloc.constprop.5+0xe2>
   20cec:	e7b6      	b.n	20c5c <mem_alloc.constprop.5+0xc8>
   20cee:	2601      	movs	r6, #1
   20cf0:	fa06 f404 	lsl.w	r4, r6, r4
   20cf4:	899e      	ldrh	r6, [r3, #12]
   20cf6:	ea22 0204 	bic.w	r2, r2, r4
   20cfa:	eba0 000e 	sub.w	r0, r0, lr
   20cfe:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   20d02:	685c      	ldr	r4, [r3, #4]
   20d04:	2e00      	cmp	r6, #0
   20d06:	d0a9      	beq.n	20c5c <mem_alloc.constprop.5+0xc8>
   20d08:	886a      	ldrh	r2, [r5, #2]
   20d0a:	4282      	cmp	r2, r0
   20d0c:	d811      	bhi.n	20d32 <mem_alloc.constprop.5+0x19e>
   20d0e:	2100      	movs	r1, #0
   20d10:	1d2b      	adds	r3, r5, #4
   20d12:	e003      	b.n	20d1c <mem_alloc.constprop.5+0x188>
   20d14:	885a      	ldrh	r2, [r3, #2]
   20d16:	3304      	adds	r3, #4
   20d18:	4282      	cmp	r2, r0
   20d1a:	d80a      	bhi.n	20d32 <mem_alloc.constprop.5+0x19e>
   20d1c:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   20d20:	3101      	adds	r1, #1
   20d22:	428e      	cmp	r6, r1
   20d24:	fb02 4405 	mla	r4, r2, r5, r4
   20d28:	eba0 0002 	sub.w	r0, r0, r2
   20d2c:	461d      	mov	r5, r3
   20d2e:	d1f1      	bne.n	20d14 <mem_alloc.constprop.5+0x180>
   20d30:	e794      	b.n	20c5c <mem_alloc.constprop.5+0xc8>
   20d32:	882b      	ldrh	r3, [r5, #0]
   20d34:	fb00 4003 	mla	r0, r0, r3, r4
   20d38:	b003      	add	sp, #12
   20d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20d3e:	4670      	mov	r0, lr
   20d40:	e7b0      	b.n	20ca4 <mem_alloc.constprop.5+0x110>
   20d42:	f1bb 0f10 	cmp.w	fp, #16
   20d46:	bf08      	it	eq
   20d48:	260f      	moveq	r6, #15
   20d4a:	d090      	beq.n	20c6e <mem_alloc.constprop.5+0xda>
   20d4c:	e786      	b.n	20c5c <mem_alloc.constprop.5+0xc8>
   20d4e:	bf00      	nop
   20d50:	20021c8c 	.word	0x20021c8c
   20d54:	20021c50 	.word	0x20021c50
   20d58:	20021c0c 	.word	0x20021c0c

00020d5c <mem_alloc.constprop.4>:
   20d5c:	2800      	cmp	r0, #0
   20d5e:	d04c      	beq.n	20dfa <mem_alloc.constprop.4+0x9e>
   20d60:	4b6b      	ldr	r3, [pc, #428]	; (20f10 <mem_alloc.constprop.4+0x1b4>)
   20d62:	681a      	ldr	r2, [r3, #0]
   20d64:	4290      	cmp	r0, r2
   20d66:	d848      	bhi.n	20dfa <mem_alloc.constprop.4+0x9e>
   20d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d6c:	685f      	ldr	r7, [r3, #4]
   20d6e:	b083      	sub	sp, #12
   20d70:	9700      	str	r7, [sp, #0]
   20d72:	2f00      	cmp	r7, #0
   20d74:	d051      	beq.n	20e1a <mem_alloc.constprop.4+0xbe>
   20d76:	1e7a      	subs	r2, r7, #1
   20d78:	4696      	mov	lr, r2
   20d7a:	2100      	movs	r1, #0
   20d7c:	f04f 0c01 	mov.w	ip, #1
   20d80:	4c64      	ldr	r4, [pc, #400]	; (20f14 <mem_alloc.constprop.4+0x1b8>)
   20d82:	9201      	str	r2, [sp, #4]
   20d84:	eb01 020e 	add.w	r2, r1, lr
   20d88:	3201      	adds	r2, #1
   20d8a:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   20d8e:	0852      	lsrs	r2, r2, #1
   20d90:	f102 0801 	add.w	r8, r2, #1
   20d94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   20d98:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   20d9c:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   20da0:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   20da4:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   20da8:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   20dac:	f8d9 9004 	ldr.w	r9, [r9, #4]
   20db0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   20db4:	f8da a010 	ldr.w	sl, [sl, #16]
   20db8:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   20dbc:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   20dc0:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   20dc4:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   20dc8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   20dcc:	6936      	ldr	r6, [r6, #16]
   20dce:	f8db b004 	ldr.w	fp, [fp, #4]
   20dd2:	692d      	ldr	r5, [r5, #16]
   20dd4:	f8d9 9004 	ldr.w	r9, [r9, #4]
   20dd8:	4550      	cmp	r0, sl
   20dda:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   20dde:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   20de2:	d913      	bls.n	20e0c <mem_alloc.constprop.4+0xb0>
   20de4:	42a8      	cmp	r0, r5
   20de6:	d210      	bcs.n	20e0a <mem_alloc.constprop.4+0xae>
   20de8:	42b0      	cmp	r0, r6
   20dea:	d908      	bls.n	20dfe <mem_alloc.constprop.4+0xa2>
   20dec:	45c6      	cmp	lr, r8
   20dee:	4641      	mov	r1, r8
   20df0:	f0c0 8087 	bcc.w	20f02 <mem_alloc.constprop.4+0x1a6>
   20df4:	f108 0c01 	add.w	ip, r8, #1
   20df8:	e7c4      	b.n	20d84 <mem_alloc.constprop.4+0x28>
   20dfa:	2000      	movs	r0, #0
   20dfc:	4770      	bx	lr
   20dfe:	f102 3eff 	add.w	lr, r2, #4294967295
   20e02:	4571      	cmp	r1, lr
   20e04:	d87d      	bhi.n	20f02 <mem_alloc.constprop.4+0x1a6>
   20e06:	4617      	mov	r7, r2
   20e08:	e7bc      	b.n	20d84 <mem_alloc.constprop.4+0x28>
   20e0a:	4639      	mov	r1, r7
   20e0c:	9a00      	ldr	r2, [sp, #0]
   20e0e:	428a      	cmp	r2, r1
   20e10:	d007      	beq.n	20e22 <mem_alloc.constprop.4+0xc6>
   20e12:	2910      	cmp	r1, #16
   20e14:	d001      	beq.n	20e1a <mem_alloc.constprop.4+0xbe>
   20e16:	428a      	cmp	r2, r1
   20e18:	d808      	bhi.n	20e2c <mem_alloc.constprop.4+0xd0>
   20e1a:	2000      	movs	r0, #0
   20e1c:	b003      	add	sp, #12
   20e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e22:	9a01      	ldr	r2, [sp, #4]
   20e24:	2a10      	cmp	r2, #16
   20e26:	bf18      	it	ne
   20e28:	4611      	movne	r1, r2
   20e2a:	d0f6      	beq.n	20e1a <mem_alloc.constprop.4+0xbe>
   20e2c:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 20f18 <mem_alloc.constprop.4+0x1bc>
   20e30:	f8dd 9000 	ldr.w	r9, [sp]
   20e34:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   20e38:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   20e3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   20e40:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   20e44:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   20e48:	f8d2 e004 	ldr.w	lr, [r2, #4]
   20e4c:	691f      	ldr	r7, [r3, #16]
   20e4e:	2e00      	cmp	r6, #0
   20e50:	d055      	beq.n	20efe <mem_alloc.constprop.4+0x1a2>
   20e52:	463a      	mov	r2, r7
   20e54:	4670      	mov	r0, lr
   20e56:	00b6      	lsls	r6, r6, #2
   20e58:	eb07 0a06 	add.w	sl, r7, r6
   20e5c:	8855      	ldrh	r5, [r2, #2]
   20e5e:	3204      	adds	r2, #4
   20e60:	4592      	cmp	sl, r2
   20e62:	4428      	add	r0, r5
   20e64:	d1fa      	bne.n	20e5c <mem_alloc.constprop.4+0x100>
   20e66:	19bd      	adds	r5, r7, r6
   20e68:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   20e6c:	4483      	add	fp, r0
   20e6e:	4583      	cmp	fp, r0
   20e70:	d918      	bls.n	20ea4 <mem_alloc.constprop.4+0x148>
   20e72:	0945      	lsrs	r5, r0, #5
   20e74:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   20e78:	f000 061f 	and.w	r6, r0, #31
   20e7c:	fa22 fa06 	lsr.w	sl, r2, r6
   20e80:	f01a 0f01 	tst.w	sl, #1
   20e84:	d007      	beq.n	20e96 <mem_alloc.constprop.4+0x13a>
   20e86:	e013      	b.n	20eb0 <mem_alloc.constprop.4+0x154>
   20e88:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   20e8c:	fa22 fa06 	lsr.w	sl, r2, r6
   20e90:	f01a 0f01 	tst.w	sl, #1
   20e94:	d10c      	bne.n	20eb0 <mem_alloc.constprop.4+0x154>
   20e96:	3001      	adds	r0, #1
   20e98:	4583      	cmp	fp, r0
   20e9a:	ea4f 1550 	mov.w	r5, r0, lsr #5
   20e9e:	f000 061f 	and.w	r6, r0, #31
   20ea2:	d1f1      	bne.n	20e88 <mem_alloc.constprop.4+0x12c>
   20ea4:	3101      	adds	r1, #1
   20ea6:	4549      	cmp	r1, r9
   20ea8:	f108 0808 	add.w	r8, r8, #8
   20eac:	d3c4      	bcc.n	20e38 <mem_alloc.constprop.4+0xdc>
   20eae:	e7b4      	b.n	20e1a <mem_alloc.constprop.4+0xbe>
   20eb0:	2101      	movs	r1, #1
   20eb2:	40b1      	lsls	r1, r6
   20eb4:	899e      	ldrh	r6, [r3, #12]
   20eb6:	ea22 0201 	bic.w	r2, r2, r1
   20eba:	eba0 000e 	sub.w	r0, r0, lr
   20ebe:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   20ec2:	685c      	ldr	r4, [r3, #4]
   20ec4:	2e00      	cmp	r6, #0
   20ec6:	d0a8      	beq.n	20e1a <mem_alloc.constprop.4+0xbe>
   20ec8:	887a      	ldrh	r2, [r7, #2]
   20eca:	4282      	cmp	r2, r0
   20ecc:	d811      	bhi.n	20ef2 <mem_alloc.constprop.4+0x196>
   20ece:	2100      	movs	r1, #0
   20ed0:	1d3b      	adds	r3, r7, #4
   20ed2:	e003      	b.n	20edc <mem_alloc.constprop.4+0x180>
   20ed4:	885a      	ldrh	r2, [r3, #2]
   20ed6:	3304      	adds	r3, #4
   20ed8:	4282      	cmp	r2, r0
   20eda:	d80a      	bhi.n	20ef2 <mem_alloc.constprop.4+0x196>
   20edc:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   20ee0:	3101      	adds	r1, #1
   20ee2:	428e      	cmp	r6, r1
   20ee4:	eba0 0002 	sub.w	r0, r0, r2
   20ee8:	fb02 4405 	mla	r4, r2, r5, r4
   20eec:	461f      	mov	r7, r3
   20eee:	d1f1      	bne.n	20ed4 <mem_alloc.constprop.4+0x178>
   20ef0:	e793      	b.n	20e1a <mem_alloc.constprop.4+0xbe>
   20ef2:	883b      	ldrh	r3, [r7, #0]
   20ef4:	fb00 4003 	mla	r0, r0, r3, r4
   20ef8:	b003      	add	sp, #12
   20efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20efe:	4670      	mov	r0, lr
   20f00:	e7b1      	b.n	20e66 <mem_alloc.constprop.4+0x10a>
   20f02:	9a00      	ldr	r2, [sp, #0]
   20f04:	2a10      	cmp	r2, #16
   20f06:	bf08      	it	eq
   20f08:	210f      	moveq	r1, #15
   20f0a:	d08f      	beq.n	20e2c <mem_alloc.constprop.4+0xd0>
   20f0c:	e785      	b.n	20e1a <mem_alloc.constprop.4+0xbe>
   20f0e:	bf00      	nop
   20f10:	20021c8c 	.word	0x20021c8c
   20f14:	20021c50 	.word	0x20021c50
   20f18:	20021c0c 	.word	0x20021c0c

00020f1c <nrf_mem_init>:
   20f1c:	b570      	push	{r4, r5, r6, lr}
   20f1e:	2200      	movs	r2, #0
   20f20:	2501      	movs	r5, #1
   20f22:	4833      	ldr	r0, [pc, #204]	; (20ff0 <nrf_mem_init+0xd4>)
   20f24:	0951      	lsrs	r1, r2, #5
   20f26:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   20f2a:	f002 031f 	and.w	r3, r2, #31
   20f2e:	fa05 f303 	lsl.w	r3, r5, r3
   20f32:	3201      	adds	r2, #1
   20f34:	4323      	orrs	r3, r4
   20f36:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   20f3a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   20f3e:	d1f1      	bne.n	20f24 <nrf_mem_init+0x8>
   20f40:	2400      	movs	r4, #0
   20f42:	4b2c      	ldr	r3, [pc, #176]	; (20ff4 <nrf_mem_init+0xd8>)
   20f44:	4621      	mov	r1, r4
   20f46:	223c      	movs	r2, #60	; 0x3c
   20f48:	482b      	ldr	r0, [pc, #172]	; (20ff8 <nrf_mem_init+0xdc>)
   20f4a:	601c      	str	r4, [r3, #0]
   20f4c:	f005 f896 	bl	2607c <memset>
   20f50:	2110      	movs	r1, #16
   20f52:	2205      	movs	r2, #5
   20f54:	4b29      	ldr	r3, [pc, #164]	; (20ffc <nrf_mem_init+0xe0>)
   20f56:	4e2a      	ldr	r6, [pc, #168]	; (21000 <nrf_mem_init+0xe4>)
   20f58:	e9c3 4400 	strd	r4, r4, [r3]
   20f5c:	60d9      	str	r1, [r3, #12]
   20f5e:	6159      	str	r1, [r3, #20]
   20f60:	61d9      	str	r1, [r3, #28]
   20f62:	6259      	str	r1, [r3, #36]	; 0x24
   20f64:	62d9      	str	r1, [r3, #44]	; 0x2c
   20f66:	6359      	str	r1, [r3, #52]	; 0x34
   20f68:	63d9      	str	r1, [r3, #60]	; 0x3c
   20f6a:	6459      	str	r1, [r3, #68]	; 0x44
   20f6c:	64d9      	str	r1, [r3, #76]	; 0x4c
   20f6e:	6559      	str	r1, [r3, #84]	; 0x54
   20f70:	65d9      	str	r1, [r3, #92]	; 0x5c
   20f72:	6659      	str	r1, [r3, #100]	; 0x64
   20f74:	66d9      	str	r1, [r3, #108]	; 0x6c
   20f76:	6759      	str	r1, [r3, #116]	; 0x74
   20f78:	67d9      	str	r1, [r3, #124]	; 0x7c
   20f7a:	609a      	str	r2, [r3, #8]
   20f7c:	611a      	str	r2, [r3, #16]
   20f7e:	619a      	str	r2, [r3, #24]
   20f80:	621a      	str	r2, [r3, #32]
   20f82:	629a      	str	r2, [r3, #40]	; 0x28
   20f84:	631a      	str	r2, [r3, #48]	; 0x30
   20f86:	639a      	str	r2, [r3, #56]	; 0x38
   20f88:	641a      	str	r2, [r3, #64]	; 0x40
   20f8a:	649a      	str	r2, [r3, #72]	; 0x48
   20f8c:	651a      	str	r2, [r3, #80]	; 0x50
   20f8e:	659a      	str	r2, [r3, #88]	; 0x58
   20f90:	661a      	str	r2, [r3, #96]	; 0x60
   20f92:	669a      	str	r2, [r3, #104]	; 0x68
   20f94:	671a      	str	r2, [r3, #112]	; 0x70
   20f96:	679a      	str	r2, [r3, #120]	; 0x78
   20f98:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   20f9c:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   20fa0:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   20fa4:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   20fa8:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   20fac:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   20fb0:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   20fb4:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   20fb8:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   20fbc:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   20fc0:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   20fc4:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   20fc8:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   20fcc:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   20fd0:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   20fd4:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   20fd8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   20fdc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   20fe0:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   20fe4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   20fe8:	4620      	mov	r0, r4
   20fea:	7035      	strb	r5, [r6, #0]
   20fec:	bd70      	pop	{r4, r5, r6, pc}
   20fee:	bf00      	nop
   20ff0:	20021c0c 	.word	0x20021c0c
   20ff4:	20021c4c 	.word	0x20021c4c
   20ff8:	20021c50 	.word	0x20021c50
   20ffc:	20021c8c 	.word	0x20021c8c
   21000:	2002627c 	.word	0x2002627c

00021004 <nrf_mem_register>:
   21004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21008:	4b87      	ldr	r3, [pc, #540]	; (21228 <nrf_mem_register+0x224>)
   2100a:	b087      	sub	sp, #28
   2100c:	781b      	ldrb	r3, [r3, #0]
   2100e:	2b00      	cmp	r3, #0
   21010:	f000 808c 	beq.w	2112c <nrf_mem_register+0x128>
   21014:	b328      	cbz	r0, 21062 <nrf_mem_register+0x5e>
   21016:	b321      	cbz	r1, 21062 <nrf_mem_register+0x5e>
   21018:	780b      	ldrb	r3, [r1, #0]
   2101a:	f8df 8218 	ldr.w	r8, [pc, #536]	; 21234 <nrf_mem_register+0x230>
   2101e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   21022:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   21026:	685b      	ldr	r3, [r3, #4]
   21028:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   2102c:	4463      	add	r3, ip
   2102e:	2b10      	cmp	r3, #16
   21030:	d811      	bhi.n	21056 <nrf_mem_register+0x52>
   21032:	f04f 0a00 	mov.w	sl, #0
   21036:	4689      	mov	r9, r1
   21038:	4b7c      	ldr	r3, [pc, #496]	; (2122c <nrf_mem_register+0x228>)
   2103a:	4f7d      	ldr	r7, [pc, #500]	; (21230 <nrf_mem_register+0x22c>)
   2103c:	681b      	ldr	r3, [r3, #0]
   2103e:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   21042:	9300      	str	r3, [sp, #0]
   21044:	68b9      	ldr	r1, [r7, #8]
   21046:	b191      	cbz	r1, 2106e <nrf_mem_register+0x6a>
   21048:	f10a 0a01 	add.w	sl, sl, #1
   2104c:	f1ba 0f05 	cmp.w	sl, #5
   21050:	f107 070c 	add.w	r7, r7, #12
   21054:	d1f6      	bne.n	21044 <nrf_mem_register+0x40>
   21056:	f248 1b07 	movw	fp, #33031	; 0x8107
   2105a:	4658      	mov	r0, fp
   2105c:	b007      	add	sp, #28
   2105e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21062:	f248 1b0e 	movw	fp, #33038	; 0x810e
   21066:	4658      	mov	r0, fp
   21068:	b007      	add	sp, #28
   2106a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2106e:	f1bc 0f00 	cmp.w	ip, #0
   21072:	d061      	beq.n	21138 <nrf_mem_register+0x134>
   21074:	460d      	mov	r5, r1
   21076:	460c      	mov	r4, r1
   21078:	f8d9 3010 	ldr.w	r3, [r9, #16]
   2107c:	eb0e 0b03 	add.w	fp, lr, r3
   21080:	885a      	ldrh	r2, [r3, #2]
   21082:	f833 6b04 	ldrh.w	r6, [r3], #4
   21086:	4415      	add	r5, r2
   21088:	459b      	cmp	fp, r3
   2108a:	fb02 4406 	mla	r4, r2, r6, r4
   2108e:	d1f7      	bne.n	21080 <nrf_mem_register+0x7c>
   21090:	f8d9 3008 	ldr.w	r3, [r9, #8]
   21094:	42a3      	cmp	r3, r4
   21096:	d3d7      	bcc.n	21048 <nrf_mem_register+0x44>
   21098:	9b00      	ldr	r3, [sp, #0]
   2109a:	442b      	add	r3, r5
   2109c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   210a0:	d2d2      	bcs.n	21048 <nrf_mem_register+0x44>
   210a2:	4c63      	ldr	r4, [pc, #396]	; (21230 <nrf_mem_register+0x22c>)
   210a4:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   210a8:	0092      	lsls	r2, r2, #2
   210aa:	f8c0 a000 	str.w	sl, [r0]
   210ae:	18a0      	adds	r0, r4, r2
   210b0:	f844 9002 	str.w	r9, [r4, r2]
   210b4:	9a00      	ldr	r2, [sp, #0]
   210b6:	468b      	mov	fp, r1
   210b8:	e9c0 2501 	strd	r2, r5, [r0, #4]
   210bc:	f899 2001 	ldrb.w	r2, [r9, #1]
   210c0:	485a      	ldr	r0, [pc, #360]	; (2122c <nrf_mem_register+0x228>)
   210c2:	2a01      	cmp	r2, #1
   210c4:	6003      	str	r3, [r0, #0]
   210c6:	d0c8      	beq.n	2105a <nrf_mem_register+0x56>
   210c8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   210cc:	2b00      	cmp	r3, #0
   210ce:	d0c4      	beq.n	2105a <nrf_mem_register+0x56>
   210d0:	2500      	movs	r5, #0
   210d2:	f8cd 9004 	str.w	r9, [sp, #4]
   210d6:	f8cd a00c 	str.w	sl, [sp, #12]
   210da:	f8cd b014 	str.w	fp, [sp, #20]
   210de:	9b01      	ldr	r3, [sp, #4]
   210e0:	781f      	ldrb	r7, [r3, #0]
   210e2:	691a      	ldr	r2, [r3, #16]
   210e4:	013b      	lsls	r3, r7, #4
   210e6:	eb03 0907 	add.w	r9, r3, r7
   210ea:	9300      	str	r3, [sp, #0]
   210ec:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   210f0:	6859      	ldr	r1, [r3, #4]
   210f2:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   210f6:	9102      	str	r1, [sp, #8]
   210f8:	bb39      	cbnz	r1, 2114a <nrf_mem_register+0x146>
   210fa:	9a03      	ldr	r2, [sp, #12]
   210fc:	60dd      	str	r5, [r3, #12]
   210fe:	609a      	str	r2, [r3, #8]
   21100:	9b00      	ldr	r3, [sp, #0]
   21102:	443b      	add	r3, r7
   21104:	461f      	mov	r7, r3
   21106:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   2110a:	684b      	ldr	r3, [r1, #4]
   2110c:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   21110:	3301      	adds	r3, #1
   21112:	4294      	cmp	r4, r2
   21114:	604b      	str	r3, [r1, #4]
   21116:	d912      	bls.n	2113e <nrf_mem_register+0x13a>
   21118:	9b01      	ldr	r3, [sp, #4]
   2111a:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   2111e:	899b      	ldrh	r3, [r3, #12]
   21120:	3501      	adds	r5, #1
   21122:	429d      	cmp	r5, r3
   21124:	d3db      	bcc.n	210de <nrf_mem_register+0xda>
   21126:	f8dd b014 	ldr.w	fp, [sp, #20]
   2112a:	e796      	b.n	2105a <nrf_mem_register+0x56>
   2112c:	f248 1b08 	movw	fp, #33032	; 0x8108
   21130:	4658      	mov	r0, fp
   21132:	b007      	add	sp, #28
   21134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21138:	9b00      	ldr	r3, [sp, #0]
   2113a:	4665      	mov	r5, ip
   2113c:	e7ae      	b.n	2109c <nrf_mem_register+0x98>
   2113e:	9b01      	ldr	r3, [sp, #4]
   21140:	3501      	adds	r5, #1
   21142:	899b      	ldrh	r3, [r3, #12]
   21144:	42ab      	cmp	r3, r5
   21146:	d8ca      	bhi.n	210de <nrf_mem_register+0xda>
   21148:	e7ed      	b.n	21126 <nrf_mem_register+0x122>
   2114a:	2600      	movs	r6, #0
   2114c:	f101 3aff 	add.w	sl, r1, #4294967295
   21150:	9504      	str	r5, [sp, #16]
   21152:	eb06 000a 	add.w	r0, r6, sl
   21156:	eb09 0206 	add.w	r2, r9, r6
   2115a:	3201      	adds	r2, #1
   2115c:	3001      	adds	r0, #1
   2115e:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   21162:	0840      	lsrs	r0, r0, #1
   21164:	4d32      	ldr	r5, [pc, #200]	; (21230 <nrf_mem_register+0x22c>)
   21166:	eb09 0100 	add.w	r1, r9, r0
   2116a:	eb09 030a 	add.w	r3, r9, sl
   2116e:	3101      	adds	r1, #1
   21170:	3301      	adds	r3, #1
   21172:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   21176:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   2117a:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   2117e:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   21182:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   21186:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   2118a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   2118e:	f8db b010 	ldr.w	fp, [fp, #16]
   21192:	6852      	ldr	r2, [r2, #4]
   21194:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   21198:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   2119c:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   211a0:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   211a4:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   211a8:	f8de e010 	ldr.w	lr, [lr, #16]
   211ac:	6849      	ldr	r1, [r1, #4]
   211ae:	f8dc c010 	ldr.w	ip, [ip, #16]
   211b2:	685b      	ldr	r3, [r3, #4]
   211b4:	4294      	cmp	r4, r2
   211b6:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   211ba:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   211be:	d92d      	bls.n	2121c <nrf_mem_register+0x218>
   211c0:	429c      	cmp	r4, r3
   211c2:	d22d      	bcs.n	21220 <nrf_mem_register+0x21c>
   211c4:	428c      	cmp	r4, r1
   211c6:	d924      	bls.n	21212 <nrf_mem_register+0x20e>
   211c8:	1c46      	adds	r6, r0, #1
   211ca:	45b2      	cmp	sl, r6
   211cc:	d2c1      	bcs.n	21152 <nrf_mem_register+0x14e>
   211ce:	2610      	movs	r6, #16
   211d0:	9d04      	ldr	r5, [sp, #16]
   211d2:	9a02      	ldr	r2, [sp, #8]
   211d4:	42b2      	cmp	r2, r6
   211d6:	d911      	bls.n	211fc <nrf_mem_register+0x1f8>
   211d8:	9b00      	ldr	r3, [sp, #0]
   211da:	443b      	add	r3, r7
   211dc:	441a      	add	r2, r3
   211de:	4433      	add	r3, r6
   211e0:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   211e4:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   211e8:	2208      	movs	r2, #8
   211ea:	4651      	mov	r1, sl
   211ec:	eb0a 0002 	add.w	r0, sl, r2
   211f0:	f1aa 0a08 	sub.w	sl, sl, #8
   211f4:	f7eb fcaa 	bl	cb4c <memcpy>
   211f8:	45d1      	cmp	r9, sl
   211fa:	d1f5      	bne.n	211e8 <nrf_mem_register+0x1e4>
   211fc:	9b00      	ldr	r3, [sp, #0]
   211fe:	9903      	ldr	r1, [sp, #12]
   21200:	443b      	add	r3, r7
   21202:	4433      	add	r3, r6
   21204:	3301      	adds	r3, #1
   21206:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   2120a:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   2120e:	6055      	str	r5, [r2, #4]
   21210:	e776      	b.n	21100 <nrf_mem_register+0xfc>
   21212:	f100 3aff 	add.w	sl, r0, #4294967295
   21216:	4556      	cmp	r6, sl
   21218:	d99b      	bls.n	21152 <nrf_mem_register+0x14e>
   2121a:	e7d8      	b.n	211ce <nrf_mem_register+0x1ca>
   2121c:	9d04      	ldr	r5, [sp, #16]
   2121e:	e7d8      	b.n	211d2 <nrf_mem_register+0x1ce>
   21220:	9d04      	ldr	r5, [sp, #16]
   21222:	f10a 0601 	add.w	r6, sl, #1
   21226:	e7d4      	b.n	211d2 <nrf_mem_register+0x1ce>
   21228:	2002627c 	.word	0x2002627c
   2122c:	20021c4c 	.word	0x20021c4c
   21230:	20021c50 	.word	0x20021c50
   21234:	20021c8c 	.word	0x20021c8c

00021238 <nrf_malloc>:
   21238:	4b03      	ldr	r3, [pc, #12]	; (21248 <nrf_malloc+0x10>)
   2123a:	781b      	ldrb	r3, [r3, #0]
   2123c:	b10b      	cbz	r3, 21242 <nrf_malloc+0xa>
   2123e:	f7ff bd8d 	b.w	20d5c <mem_alloc.constprop.4>
   21242:	4618      	mov	r0, r3
   21244:	4770      	bx	lr
   21246:	bf00      	nop
   21248:	2002627c 	.word	0x2002627c

0002124c <nrf_free>:
   2124c:	4b04      	ldr	r3, [pc, #16]	; (21260 <nrf_free+0x14>)
   2124e:	781b      	ldrb	r3, [r3, #0]
   21250:	b123      	cbz	r3, 2125c <nrf_free+0x10>
   21252:	b118      	cbz	r0, 2125c <nrf_free+0x10>
   21254:	4601      	mov	r1, r0
   21256:	2000      	movs	r0, #0
   21258:	f7ff bc30 	b.w	20abc <mem_free>
   2125c:	4770      	bx	lr
   2125e:	bf00      	nop
   21260:	2002627c 	.word	0x2002627c

00021264 <nrf_realloc>:
   21264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21268:	4b52      	ldr	r3, [pc, #328]	; (213b4 <nrf_realloc+0x150>)
   2126a:	b087      	sub	sp, #28
   2126c:	781b      	ldrb	r3, [r3, #0]
   2126e:	b173      	cbz	r3, 2128e <nrf_realloc+0x2a>
   21270:	b168      	cbz	r0, 2128e <nrf_realloc+0x2a>
   21272:	e9cd 0101 	strd	r0, r1, [sp, #4]
   21276:	f8df a148 	ldr.w	sl, [pc, #328]	; 213c0 <nrf_realloc+0x15c>
   2127a:	f8da 3000 	ldr.w	r3, [sl]
   2127e:	b10b      	cbz	r3, 21284 <nrf_realloc+0x20>
   21280:	781a      	ldrb	r2, [r3, #0]
   21282:	b14a      	cbz	r2, 21298 <nrf_realloc+0x34>
   21284:	4b4c      	ldr	r3, [pc, #304]	; (213b8 <nrf_realloc+0x154>)
   21286:	f10a 0a0c 	add.w	sl, sl, #12
   2128a:	4553      	cmp	r3, sl
   2128c:	d1f5      	bne.n	2127a <nrf_realloc+0x16>
   2128e:	2400      	movs	r4, #0
   21290:	4620      	mov	r0, r4
   21292:	b007      	add	sp, #28
   21294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21298:	e9da 9201 	ldrd	r9, r2, [sl, #4]
   2129c:	444a      	add	r2, r9
   2129e:	4591      	cmp	r9, r2
   212a0:	9200      	str	r2, [sp, #0]
   212a2:	d2ef      	bcs.n	21284 <nrf_realloc+0x20>
   212a4:	685a      	ldr	r2, [r3, #4]
   212a6:	f8cd a00c 	str.w	sl, [sp, #12]
   212aa:	46cb      	mov	fp, r9
   212ac:	4692      	mov	sl, r2
   212ae:	f8d3 8010 	ldr.w	r8, [r3, #16]
   212b2:	899f      	ldrh	r7, [r3, #12]
   212b4:	ebab 0e09 	sub.w	lr, fp, r9
   212b8:	b1d7      	cbz	r7, 212f0 <nrf_realloc+0x8c>
   212ba:	f8b8 c002 	ldrh.w	ip, [r8, #2]
   212be:	45e6      	cmp	lr, ip
   212c0:	4662      	mov	r2, ip
   212c2:	d31d      	bcc.n	21300 <nrf_realloc+0x9c>
   212c4:	4654      	mov	r4, sl
   212c6:	4671      	mov	r1, lr
   212c8:	4665      	mov	r5, ip
   212ca:	2000      	movs	r0, #0
   212cc:	f108 0304 	add.w	r3, r8, #4
   212d0:	e004      	b.n	212dc <nrf_realloc+0x78>
   212d2:	885a      	ldrh	r2, [r3, #2]
   212d4:	3304      	adds	r3, #4
   212d6:	428a      	cmp	r2, r1
   212d8:	4615      	mov	r5, r2
   212da:	d814      	bhi.n	21306 <nrf_realloc+0xa2>
   212dc:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   212e0:	3001      	adds	r0, #1
   212e2:	4287      	cmp	r7, r0
   212e4:	fb02 4406 	mla	r4, r2, r6, r4
   212e8:	eba1 0105 	sub.w	r1, r1, r5
   212ec:	461e      	mov	r6, r3
   212ee:	d1f0      	bne.n	212d2 <nrf_realloc+0x6e>
   212f0:	9b00      	ldr	r3, [sp, #0]
   212f2:	f10b 0b01 	add.w	fp, fp, #1
   212f6:	455b      	cmp	r3, fp
   212f8:	d1dc      	bne.n	212b4 <nrf_realloc+0x50>
   212fa:	f8dd a00c 	ldr.w	sl, [sp, #12]
   212fe:	e7c1      	b.n	21284 <nrf_realloc+0x20>
   21300:	4654      	mov	r4, sl
   21302:	4671      	mov	r1, lr
   21304:	4646      	mov	r6, r8
   21306:	8833      	ldrh	r3, [r6, #0]
   21308:	fb01 4103 	mla	r1, r1, r3, r4
   2130c:	9b01      	ldr	r3, [sp, #4]
   2130e:	428b      	cmp	r3, r1
   21310:	d1ee      	bne.n	212f0 <nrf_realloc+0x8c>
   21312:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
   21316:	f8dd a00c 	ldr.w	sl, [sp, #12]
   2131a:	d0b3      	beq.n	21284 <nrf_realloc+0x20>
   2131c:	45e6      	cmp	lr, ip
   2131e:	d334      	bcc.n	2138a <nrf_realloc+0x126>
   21320:	2200      	movs	r2, #0
   21322:	f108 0304 	add.w	r3, r8, #4
   21326:	e006      	b.n	21336 <nrf_realloc+0xd2>
   21328:	f8b3 c002 	ldrh.w	ip, [r3, #2]
   2132c:	4698      	mov	r8, r3
   2132e:	45f4      	cmp	ip, lr
   21330:	f103 0304 	add.w	r3, r3, #4
   21334:	d829      	bhi.n	2138a <nrf_realloc+0x126>
   21336:	3201      	adds	r2, #1
   21338:	42ba      	cmp	r2, r7
   2133a:	ebae 0e0c 	sub.w	lr, lr, ip
   2133e:	d1f3      	bne.n	21328 <nrf_realloc+0xc4>
   21340:	2300      	movs	r3, #0
   21342:	9a02      	ldr	r2, [sp, #8]
   21344:	429a      	cmp	r2, r3
   21346:	d923      	bls.n	21390 <nrf_realloc+0x12c>
   21348:	4610      	mov	r0, r2
   2134a:	f7ff fd07 	bl	20d5c <mem_alloc.constprop.4>
   2134e:	4604      	mov	r4, r0
   21350:	2800      	cmp	r0, #0
   21352:	d097      	beq.n	21284 <nrf_realloc+0x20>
   21354:	e9dd 1501 	ldrd	r1, r5, [sp, #4]
   21358:	462a      	mov	r2, r5
   2135a:	f7eb fbf7 	bl	cb4c <memcpy>
   2135e:	462b      	mov	r3, r5
   21360:	2201      	movs	r2, #1
   21362:	3303      	adds	r3, #3
   21364:	4915      	ldr	r1, [pc, #84]	; (213bc <nrf_realloc+0x158>)
   21366:	4423      	add	r3, r4
   21368:	f023 0303 	bic.w	r3, r3, #3
   2136c:	ea4f 105b 	mov.w	r0, fp, lsr #5
   21370:	681e      	ldr	r6, [r3, #0]
   21372:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
   21376:	f00b 031f 	and.w	r3, fp, #31
   2137a:	fa02 f303 	lsl.w	r3, r2, r3
   2137e:	9605      	str	r6, [sp, #20]
   21380:	432b      	orrs	r3, r5
   21382:	9a05      	ldr	r2, [sp, #20]
   21384:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   21388:	e782      	b.n	21290 <nrf_realloc+0x2c>
   2138a:	f8b8 3000 	ldrh.w	r3, [r8]
   2138e:	e7d8      	b.n	21342 <nrf_realloc+0xde>
   21390:	4615      	mov	r5, r2
   21392:	b96a      	cbnz	r2, 213b0 <nrf_realloc+0x14c>
   21394:	2301      	movs	r3, #1
   21396:	4a09      	ldr	r2, [pc, #36]	; (213bc <nrf_realloc+0x158>)
   21398:	ea4f 115b 	mov.w	r1, fp, lsr #5
   2139c:	f00b 041f 	and.w	r4, fp, #31
   213a0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   213a4:	40a3      	lsls	r3, r4
   213a6:	4303      	orrs	r3, r0
   213a8:	462c      	mov	r4, r5
   213aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   213ae:	e76f      	b.n	21290 <nrf_realloc+0x2c>
   213b0:	9c01      	ldr	r4, [sp, #4]
   213b2:	e76d      	b.n	21290 <nrf_realloc+0x2c>
   213b4:	2002627c 	.word	0x2002627c
   213b8:	20021c8c 	.word	0x20021c8c
   213bc:	20021c0c 	.word	0x20021c0c
   213c0:	20021c50 	.word	0x20021c50

000213c4 <nrf_shared_malloc>:
   213c4:	4b03      	ldr	r3, [pc, #12]	; (213d4 <nrf_shared_malloc+0x10>)
   213c6:	781b      	ldrb	r3, [r3, #0]
   213c8:	b10b      	cbz	r3, 213ce <nrf_shared_malloc+0xa>
   213ca:	f7ff bbe3 	b.w	20b94 <mem_alloc.constprop.5>
   213ce:	4618      	mov	r0, r3
   213d0:	4770      	bx	lr
   213d2:	bf00      	nop
   213d4:	2002627c 	.word	0x2002627c

000213d8 <nrf_shared_free>:
   213d8:	4b04      	ldr	r3, [pc, #16]	; (213ec <nrf_shared_free+0x14>)
   213da:	781b      	ldrb	r3, [r3, #0]
   213dc:	b123      	cbz	r3, 213e8 <nrf_shared_free+0x10>
   213de:	b118      	cbz	r0, 213e8 <nrf_shared_free+0x10>
   213e0:	4601      	mov	r1, r0
   213e2:	2001      	movs	r0, #1
   213e4:	f7ff bb6a 	b.w	20abc <mem_free>
   213e8:	4770      	bx	lr
   213ea:	bf00      	nop
   213ec:	2002627c 	.word	0x2002627c

000213f0 <rpc_dfu_event_handler>:
   213f0:	b508      	push	{r3, lr}
   213f2:	4a08      	ldr	r2, [pc, #32]	; (21414 <rpc_dfu_event_handler+0x24>)
   213f4:	68c1      	ldr	r1, [r0, #12]
   213f6:	8812      	ldrh	r2, [r2, #0]
   213f8:	4603      	mov	r3, r0
   213fa:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   213fe:	d005      	beq.n	2140c <rpc_dfu_event_handler+0x1c>
   21400:	6800      	ldr	r0, [r0, #0]
   21402:	b110      	cbz	r0, 2140a <rpc_dfu_event_handler+0x1a>
   21404:	f7fd f96a 	bl	1e6dc <rpc_dfu_client_data_free>
   21408:	2000      	movs	r0, #0
   2140a:	bd08      	pop	{r3, pc}
   2140c:	4a02      	ldr	r2, [pc, #8]	; (21418 <rpc_dfu_event_handler+0x28>)
   2140e:	2001      	movs	r0, #1
   21410:	6013      	str	r3, [r2, #0]
   21412:	bd08      	pop	{r3, pc}
   21414:	200242a8 	.word	0x200242a8
   21418:	20021da8 	.word	0x20021da8

0002141c <mfu_interface_init>:
   2141c:	2300      	movs	r3, #0
   2141e:	b510      	push	{r4, lr}
   21420:	4808      	ldr	r0, [pc, #32]	; (21444 <mfu_interface_init+0x28>)
   21422:	4909      	ldr	r1, [pc, #36]	; (21448 <mfu_interface_init+0x2c>)
   21424:	4a09      	ldr	r2, [pc, #36]	; (2144c <mfu_interface_init+0x30>)
   21426:	4c0a      	ldr	r4, [pc, #40]	; (21450 <mfu_interface_init+0x34>)
   21428:	8003      	strh	r3, [r0, #0]
   2142a:	600b      	str	r3, [r1, #0]
   2142c:	6013      	str	r3, [r2, #0]
   2142e:	6023      	str	r3, [r4, #0]
   21430:	f7fd f91e 	bl	1e670 <rpc_dfu_client_init>
   21434:	b910      	cbnz	r0, 2143c <mfu_interface_init+0x20>
   21436:	2301      	movs	r3, #1
   21438:	6023      	str	r3, [r4, #0]
   2143a:	bd10      	pop	{r4, pc}
   2143c:	f04f 30ff 	mov.w	r0, #4294967295
   21440:	bd10      	pop	{r4, pc}
   21442:	bf00      	nop
   21444:	200242a8 	.word	0x200242a8
   21448:	20021da8 	.word	0x20021da8
   2144c:	20021da4 	.word	0x20021da4
   21450:	20021d9c 	.word	0x20021d9c

00021454 <mfu_interface_open>:
   21454:	b508      	push	{r3, lr}
   21456:	4b07      	ldr	r3, [pc, #28]	; (21474 <mfu_interface_open+0x20>)
   21458:	681a      	ldr	r2, [r3, #0]
   2145a:	2a01      	cmp	r2, #1
   2145c:	d103      	bne.n	21466 <mfu_interface_open+0x12>
   2145e:	2202      	movs	r2, #2
   21460:	601a      	str	r2, [r3, #0]
   21462:	4805      	ldr	r0, [pc, #20]	; (21478 <mfu_interface_open+0x24>)
   21464:	bd08      	pop	{r3, pc}
   21466:	2001      	movs	r0, #1
   21468:	f7f5 fbaa 	bl	16bc0 <bsd_os_errno_set>
   2146c:	f04f 30ff 	mov.w	r0, #4294967295
   21470:	bd08      	pop	{r3, pc}
   21472:	bf00      	nop
   21474:	20021d9c 	.word	0x20021d9c
   21478:	49765432 	.word	0x49765432

0002147c <mfu_interface_close>:
   2147c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2147e:	4c32      	ldr	r4, [pc, #200]	; (21548 <mfu_interface_close+0xcc>)
   21480:	b083      	sub	sp, #12
   21482:	6823      	ldr	r3, [r4, #0]
   21484:	1e9a      	subs	r2, r3, #2
   21486:	2a01      	cmp	r2, #1
   21488:	d857      	bhi.n	2153a <mfu_interface_close+0xbe>
   2148a:	2b03      	cmp	r3, #3
   2148c:	d004      	beq.n	21498 <mfu_interface_close+0x1c>
   2148e:	2301      	movs	r3, #1
   21490:	2000      	movs	r0, #0
   21492:	6023      	str	r3, [r4, #0]
   21494:	b003      	add	sp, #12
   21496:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21498:	2100      	movs	r1, #0
   2149a:	4668      	mov	r0, sp
   2149c:	f7fd f8ee 	bl	1e67c <rpc_dfu_client_request_alloc>
   214a0:	4603      	mov	r3, r0
   214a2:	2800      	cmp	r0, #0
   214a4:	d13d      	bne.n	21522 <mfu_interface_close+0xa6>
   214a6:	2104      	movs	r1, #4
   214a8:	4e28      	ldr	r6, [pc, #160]	; (2154c <mfu_interface_close+0xd0>)
   214aa:	9800      	ldr	r0, [sp, #0]
   214ac:	8832      	ldrh	r2, [r6, #0]
   214ae:	7201      	strb	r1, [r0, #8]
   214b0:	3201      	adds	r2, #1
   214b2:	b292      	uxth	r2, r2
   214b4:	0411      	lsls	r1, r2, #16
   214b6:	f041 0106 	orr.w	r1, r1, #6
   214ba:	4d25      	ldr	r5, [pc, #148]	; (21550 <mfu_interface_close+0xd4>)
   214bc:	60c1      	str	r1, [r0, #12]
   214be:	7103      	strb	r3, [r0, #4]
   214c0:	7143      	strb	r3, [r0, #5]
   214c2:	7183      	strb	r3, [r0, #6]
   214c4:	71c3      	strb	r3, [r0, #7]
   214c6:	7243      	strb	r3, [r0, #9]
   214c8:	7283      	strb	r3, [r0, #10]
   214ca:	72c3      	strb	r3, [r0, #11]
   214cc:	2106      	movs	r1, #6
   214ce:	8032      	strh	r2, [r6, #0]
   214d0:	602b      	str	r3, [r5, #0]
   214d2:	f7fd f8e7 	bl	1e6a4 <rpc_dfu_client_request_send>
   214d6:	b9d8      	cbnz	r0, 21510 <mfu_interface_close+0x94>
   214d8:	f04f 33ff 	mov.w	r3, #4294967295
   214dc:	ae02      	add	r6, sp, #8
   214de:	4627      	mov	r7, r4
   214e0:	f846 3d04 	str.w	r3, [r6, #-4]!
   214e4:	e004      	b.n	214f0 <mfu_interface_close+0x74>
   214e6:	4631      	mov	r1, r6
   214e8:	4638      	mov	r0, r7
   214ea:	f7f5 fab1 	bl	16a50 <bsd_os_timedwait>
   214ee:	b9f0      	cbnz	r0, 2152e <mfu_interface_close+0xb2>
   214f0:	6828      	ldr	r0, [r5, #0]
   214f2:	2800      	cmp	r0, #0
   214f4:	d0f7      	beq.n	214e6 <mfu_interface_close+0x6a>
   214f6:	6905      	ldr	r5, [r0, #16]
   214f8:	f7fd f8e8 	bl	1e6cc <rpc_dfu_client_message_free>
   214fc:	2d00      	cmp	r5, #0
   214fe:	d0c6      	beq.n	2148e <mfu_interface_close+0x12>
   21500:	4b14      	ldr	r3, [pc, #80]	; (21554 <mfu_interface_close+0xd8>)
   21502:	2008      	movs	r0, #8
   21504:	601d      	str	r5, [r3, #0]
   21506:	f7f5 fb5b 	bl	16bc0 <bsd_os_errno_set>
   2150a:	f04f 30ff 	mov.w	r0, #4294967295
   2150e:	e7c1      	b.n	21494 <mfu_interface_close+0x18>
   21510:	9800      	ldr	r0, [sp, #0]
   21512:	6803      	ldr	r3, [r0, #0]
   21514:	b11b      	cbz	r3, 2151e <mfu_interface_close+0xa2>
   21516:	4618      	mov	r0, r3
   21518:	f7fd f8e0 	bl	1e6dc <rpc_dfu_client_data_free>
   2151c:	9800      	ldr	r0, [sp, #0]
   2151e:	f7fd f8d5 	bl	1e6cc <rpc_dfu_client_message_free>
   21522:	200c      	movs	r0, #12
   21524:	f7f5 fb4c 	bl	16bc0 <bsd_os_errno_set>
   21528:	f04f 30ff 	mov.w	r0, #4294967295
   2152c:	e7b2      	b.n	21494 <mfu_interface_close+0x18>
   2152e:	203c      	movs	r0, #60	; 0x3c
   21530:	f7f5 fb46 	bl	16bc0 <bsd_os_errno_set>
   21534:	f04f 30ff 	mov.w	r0, #4294967295
   21538:	e7ac      	b.n	21494 <mfu_interface_close+0x18>
   2153a:	2001      	movs	r0, #1
   2153c:	f7f5 fb40 	bl	16bc0 <bsd_os_errno_set>
   21540:	f04f 30ff 	mov.w	r0, #4294967295
   21544:	e7a6      	b.n	21494 <mfu_interface_close+0x18>
   21546:	bf00      	nop
   21548:	20021d9c 	.word	0x20021d9c
   2154c:	200242a8 	.word	0x200242a8
   21550:	20021da8 	.word	0x20021da8
   21554:	20021da0 	.word	0x20021da0

00021558 <mfu_interface_sendto>:
   21558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2155c:	4e64      	ldr	r6, [pc, #400]	; (216f0 <mfu_interface_sendto+0x198>)
   2155e:	460f      	mov	r7, r1
   21560:	6831      	ldr	r1, [r6, #0]
   21562:	4615      	mov	r5, r2
   21564:	1e8a      	subs	r2, r1, #2
   21566:	2a01      	cmp	r2, #1
   21568:	b082      	sub	sp, #8
   2156a:	f200 80b4 	bhi.w	216d6 <mfu_interface_sendto+0x17e>
   2156e:	2f00      	cmp	r7, #0
   21570:	f000 80a5 	beq.w	216be <mfu_interface_sendto+0x166>
   21574:	2d00      	cmp	r5, #0
   21576:	f000 80a2 	beq.w	216be <mfu_interface_sendto+0x166>
   2157a:	2b00      	cmp	r3, #0
   2157c:	f040 80b1 	bne.w	216e2 <mfu_interface_sendto+0x18a>
   21580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21582:	2b00      	cmp	r3, #0
   21584:	f040 80a1 	bne.w	216ca <mfu_interface_sendto+0x172>
   21588:	2902      	cmp	r1, #2
   2158a:	d04f      	beq.n	2162c <mfu_interface_sendto+0xd4>
   2158c:	46e8      	mov	r8, sp
   2158e:	4640      	mov	r0, r8
   21590:	4629      	mov	r1, r5
   21592:	f7fd f873 	bl	1e67c <rpc_dfu_client_request_alloc>
   21596:	4606      	mov	r6, r0
   21598:	b140      	cbz	r0, 215ac <mfu_interface_sendto+0x54>
   2159a:	200c      	movs	r0, #12
   2159c:	f7f5 fb10 	bl	16bc0 <bsd_os_errno_set>
   215a0:	f04f 35ff 	mov.w	r5, #4294967295
   215a4:	4628      	mov	r0, r5
   215a6:	b002      	add	sp, #8
   215a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   215ac:	9b00      	ldr	r3, [sp, #0]
   215ae:	4639      	mov	r1, r7
   215b0:	6818      	ldr	r0, [r3, #0]
   215b2:	462a      	mov	r2, r5
   215b4:	f7eb faca 	bl	cb4c <memcpy>
   215b8:	2104      	movs	r1, #4
   215ba:	4c4e      	ldr	r4, [pc, #312]	; (216f4 <mfu_interface_sendto+0x19c>)
   215bc:	9800      	ldr	r0, [sp, #0]
   215be:	8823      	ldrh	r3, [r4, #0]
   215c0:	6045      	str	r5, [r0, #4]
   215c2:	3301      	adds	r3, #1
   215c4:	b29b      	uxth	r3, r3
   215c6:	041a      	lsls	r2, r3, #16
   215c8:	8023      	strh	r3, [r4, #0]
   215ca:	430a      	orrs	r2, r1
   215cc:	4c4a      	ldr	r4, [pc, #296]	; (216f8 <mfu_interface_sendto+0x1a0>)
   215ce:	60c2      	str	r2, [r0, #12]
   215d0:	7246      	strb	r6, [r0, #9]
   215d2:	7286      	strb	r6, [r0, #10]
   215d4:	72c6      	strb	r6, [r0, #11]
   215d6:	7201      	strb	r1, [r0, #8]
   215d8:	6026      	str	r6, [r4, #0]
   215da:	f7fd f863 	bl	1e6a4 <rpc_dfu_client_request_send>
   215de:	2800      	cmp	r0, #0
   215e0:	d163      	bne.n	216aa <mfu_interface_sendto+0x152>
   215e2:	f04f 33ff 	mov.w	r3, #4294967295
   215e6:	ae02      	add	r6, sp, #8
   215e8:	4f41      	ldr	r7, [pc, #260]	; (216f0 <mfu_interface_sendto+0x198>)
   215ea:	f846 3d04 	str.w	r3, [r6, #-4]!
   215ee:	e004      	b.n	215fa <mfu_interface_sendto+0xa2>
   215f0:	4631      	mov	r1, r6
   215f2:	4638      	mov	r0, r7
   215f4:	f7f5 fa2c 	bl	16a50 <bsd_os_timedwait>
   215f8:	b978      	cbnz	r0, 2161a <mfu_interface_sendto+0xc2>
   215fa:	6820      	ldr	r0, [r4, #0]
   215fc:	2800      	cmp	r0, #0
   215fe:	d0f7      	beq.n	215f0 <mfu_interface_sendto+0x98>
   21600:	6904      	ldr	r4, [r0, #16]
   21602:	f7fd f863 	bl	1e6cc <rpc_dfu_client_message_free>
   21606:	2c00      	cmp	r4, #0
   21608:	d0cc      	beq.n	215a4 <mfu_interface_sendto+0x4c>
   2160a:	4b3c      	ldr	r3, [pc, #240]	; (216fc <mfu_interface_sendto+0x1a4>)
   2160c:	2008      	movs	r0, #8
   2160e:	601c      	str	r4, [r3, #0]
   21610:	f04f 35ff 	mov.w	r5, #4294967295
   21614:	f7f5 fad4 	bl	16bc0 <bsd_os_errno_set>
   21618:	e7c4      	b.n	215a4 <mfu_interface_sendto+0x4c>
   2161a:	f04f 35ff 	mov.w	r5, #4294967295
   2161e:	203c      	movs	r0, #60	; 0x3c
   21620:	f7f5 face 	bl	16bc0 <bsd_os_errno_set>
   21624:	4628      	mov	r0, r5
   21626:	b002      	add	sp, #8
   21628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2162c:	46e8      	mov	r8, sp
   2162e:	4619      	mov	r1, r3
   21630:	4640      	mov	r0, r8
   21632:	f7fd f823 	bl	1e67c <rpc_dfu_client_request_alloc>
   21636:	4602      	mov	r2, r0
   21638:	2800      	cmp	r0, #0
   2163a:	d1ae      	bne.n	2159a <mfu_interface_sendto+0x42>
   2163c:	f04f 0c08 	mov.w	ip, #8
   21640:	492c      	ldr	r1, [pc, #176]	; (216f4 <mfu_interface_sendto+0x19c>)
   21642:	482f      	ldr	r0, [pc, #188]	; (21700 <mfu_interface_sendto+0x1a8>)
   21644:	880b      	ldrh	r3, [r1, #0]
   21646:	6804      	ldr	r4, [r0, #0]
   21648:	3301      	adds	r3, #1
   2164a:	9800      	ldr	r0, [sp, #0]
   2164c:	b29b      	uxth	r3, r3
   2164e:	800b      	strh	r3, [r1, #0]
   21650:	041b      	lsls	r3, r3, #16
   21652:	f043 0303 	orr.w	r3, r3, #3
   21656:	6104      	str	r4, [r0, #16]
   21658:	4c27      	ldr	r4, [pc, #156]	; (216f8 <mfu_interface_sendto+0x1a0>)
   2165a:	60c3      	str	r3, [r0, #12]
   2165c:	7102      	strb	r2, [r0, #4]
   2165e:	7142      	strb	r2, [r0, #5]
   21660:	7182      	strb	r2, [r0, #6]
   21662:	71c2      	strb	r2, [r0, #7]
   21664:	7242      	strb	r2, [r0, #9]
   21666:	7282      	strb	r2, [r0, #10]
   21668:	72c2      	strb	r2, [r0, #11]
   2166a:	f880 c008 	strb.w	ip, [r0, #8]
   2166e:	2103      	movs	r1, #3
   21670:	6022      	str	r2, [r4, #0]
   21672:	f7fd f817 	bl	1e6a4 <rpc_dfu_client_request_send>
   21676:	b9c0      	cbnz	r0, 216aa <mfu_interface_sendto+0x152>
   21678:	f04f 33ff 	mov.w	r3, #4294967295
   2167c:	f10d 0908 	add.w	r9, sp, #8
   21680:	f849 3d04 	str.w	r3, [r9, #-4]!
   21684:	46b2      	mov	sl, r6
   21686:	e005      	b.n	21694 <mfu_interface_sendto+0x13c>
   21688:	4649      	mov	r1, r9
   2168a:	4650      	mov	r0, sl
   2168c:	f7f5 f9e0 	bl	16a50 <bsd_os_timedwait>
   21690:	2800      	cmp	r0, #0
   21692:	d1c2      	bne.n	2161a <mfu_interface_sendto+0xc2>
   21694:	6820      	ldr	r0, [r4, #0]
   21696:	2800      	cmp	r0, #0
   21698:	d0f6      	beq.n	21688 <mfu_interface_sendto+0x130>
   2169a:	6904      	ldr	r4, [r0, #16]
   2169c:	f7fd f816 	bl	1e6cc <rpc_dfu_client_message_free>
   216a0:	2c00      	cmp	r4, #0
   216a2:	d1b2      	bne.n	2160a <mfu_interface_sendto+0xb2>
   216a4:	2303      	movs	r3, #3
   216a6:	6033      	str	r3, [r6, #0]
   216a8:	e771      	b.n	2158e <mfu_interface_sendto+0x36>
   216aa:	9800      	ldr	r0, [sp, #0]
   216ac:	6803      	ldr	r3, [r0, #0]
   216ae:	b11b      	cbz	r3, 216b8 <mfu_interface_sendto+0x160>
   216b0:	4618      	mov	r0, r3
   216b2:	f7fd f813 	bl	1e6dc <rpc_dfu_client_data_free>
   216b6:	9800      	ldr	r0, [sp, #0]
   216b8:	f7fd f808 	bl	1e6cc <rpc_dfu_client_message_free>
   216bc:	e76d      	b.n	2159a <mfu_interface_sendto+0x42>
   216be:	2016      	movs	r0, #22
   216c0:	f7f5 fa7e 	bl	16bc0 <bsd_os_errno_set>
   216c4:	f04f 35ff 	mov.w	r5, #4294967295
   216c8:	e76c      	b.n	215a4 <mfu_interface_sendto+0x4c>
   216ca:	2038      	movs	r0, #56	; 0x38
   216cc:	f7f5 fa78 	bl	16bc0 <bsd_os_errno_set>
   216d0:	f04f 35ff 	mov.w	r5, #4294967295
   216d4:	e766      	b.n	215a4 <mfu_interface_sendto+0x4c>
   216d6:	2001      	movs	r0, #1
   216d8:	f7f5 fa72 	bl	16bc0 <bsd_os_errno_set>
   216dc:	f04f 35ff 	mov.w	r5, #4294967295
   216e0:	e760      	b.n	215a4 <mfu_interface_sendto+0x4c>
   216e2:	202d      	movs	r0, #45	; 0x2d
   216e4:	f7f5 fa6c 	bl	16bc0 <bsd_os_errno_set>
   216e8:	f04f 35ff 	mov.w	r5, #4294967295
   216ec:	e75a      	b.n	215a4 <mfu_interface_sendto+0x4c>
   216ee:	bf00      	nop
   216f0:	20021d9c 	.word	0x20021d9c
   216f4:	200242a8 	.word	0x200242a8
   216f8:	20021da8 	.word	0x20021da8
   216fc:	20021da0 	.word	0x20021da0
   21700:	20021da4 	.word	0x20021da4

00021704 <mfu_interface_setopt>:
   21704:	b5f0      	push	{r4, r5, r6, r7, lr}
   21706:	4846      	ldr	r0, [pc, #280]	; (21820 <mfu_interface_setopt+0x11c>)
   21708:	b083      	sub	sp, #12
   2170a:	6800      	ldr	r0, [r0, #0]
   2170c:	3802      	subs	r0, #2
   2170e:	2801      	cmp	r0, #1
   21710:	d877      	bhi.n	21802 <mfu_interface_setopt+0xfe>
   21712:	f240 2003 	movw	r0, #515	; 0x203
   21716:	4281      	cmp	r1, r0
   21718:	d16d      	bne.n	217f6 <mfu_interface_setopt+0xf2>
   2171a:	3a04      	subs	r2, #4
   2171c:	2a03      	cmp	r2, #3
   2171e:	d85c      	bhi.n	217da <mfu_interface_setopt+0xd6>
   21720:	e8df f002 	tbb	[pc, r2]
   21724:	514e024b 	.word	0x514e024b
   21728:	2407      	movs	r4, #7
   2172a:	4625      	mov	r5, r4
   2172c:	2100      	movs	r1, #0
   2172e:	4668      	mov	r0, sp
   21730:	f7fc ffa4 	bl	1e67c <rpc_dfu_client_request_alloc>
   21734:	4603      	mov	r3, r0
   21736:	2800      	cmp	r0, #0
   21738:	d138      	bne.n	217ac <mfu_interface_setopt+0xa8>
   2173a:	2704      	movs	r7, #4
   2173c:	4e39      	ldr	r6, [pc, #228]	; (21824 <mfu_interface_setopt+0x120>)
   2173e:	9800      	ldr	r0, [sp, #0]
   21740:	8832      	ldrh	r2, [r6, #0]
   21742:	4629      	mov	r1, r5
   21744:	3201      	adds	r2, #1
   21746:	b292      	uxth	r2, r2
   21748:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   2174c:	4c36      	ldr	r4, [pc, #216]	; (21828 <mfu_interface_setopt+0x124>)
   2174e:	60c5      	str	r5, [r0, #12]
   21750:	7103      	strb	r3, [r0, #4]
   21752:	7143      	strb	r3, [r0, #5]
   21754:	7183      	strb	r3, [r0, #6]
   21756:	71c3      	strb	r3, [r0, #7]
   21758:	7243      	strb	r3, [r0, #9]
   2175a:	7283      	strb	r3, [r0, #10]
   2175c:	72c3      	strb	r3, [r0, #11]
   2175e:	7207      	strb	r7, [r0, #8]
   21760:	8032      	strh	r2, [r6, #0]
   21762:	6023      	str	r3, [r4, #0]
   21764:	f7fc ff9e 	bl	1e6a4 <rpc_dfu_client_request_send>
   21768:	b9b8      	cbnz	r0, 2179a <mfu_interface_setopt+0x96>
   2176a:	f04f 33ff 	mov.w	r3, #4294967295
   2176e:	ad02      	add	r5, sp, #8
   21770:	4e2b      	ldr	r6, [pc, #172]	; (21820 <mfu_interface_setopt+0x11c>)
   21772:	f845 3d04 	str.w	r3, [r5, #-4]!
   21776:	e005      	b.n	21784 <mfu_interface_setopt+0x80>
   21778:	4629      	mov	r1, r5
   2177a:	4630      	mov	r0, r6
   2177c:	f7f5 f968 	bl	16a50 <bsd_os_timedwait>
   21780:	2800      	cmp	r0, #0
   21782:	d131      	bne.n	217e8 <mfu_interface_setopt+0xe4>
   21784:	6820      	ldr	r0, [r4, #0]
   21786:	2800      	cmp	r0, #0
   21788:	d0f6      	beq.n	21778 <mfu_interface_setopt+0x74>
   2178a:	6904      	ldr	r4, [r0, #16]
   2178c:	f7fc ff9e 	bl	1e6cc <rpc_dfu_client_message_free>
   21790:	2c00      	cmp	r4, #0
   21792:	d13c      	bne.n	2180e <mfu_interface_setopt+0x10a>
   21794:	4620      	mov	r0, r4
   21796:	b003      	add	sp, #12
   21798:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2179a:	9800      	ldr	r0, [sp, #0]
   2179c:	6803      	ldr	r3, [r0, #0]
   2179e:	b11b      	cbz	r3, 217a8 <mfu_interface_setopt+0xa4>
   217a0:	4618      	mov	r0, r3
   217a2:	f7fc ff9b 	bl	1e6dc <rpc_dfu_client_data_free>
   217a6:	9800      	ldr	r0, [sp, #0]
   217a8:	f7fc ff90 	bl	1e6cc <rpc_dfu_client_message_free>
   217ac:	200c      	movs	r0, #12
   217ae:	f7f5 fa07 	bl	16bc0 <bsd_os_errno_set>
   217b2:	f04f 30ff 	mov.w	r0, #4294967295
   217b6:	b003      	add	sp, #12
   217b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   217ba:	2405      	movs	r4, #5
   217bc:	4625      	mov	r5, r4
   217be:	e7b5      	b.n	2172c <mfu_interface_setopt+0x28>
   217c0:	2408      	movs	r4, #8
   217c2:	4625      	mov	r5, r4
   217c4:	e7b2      	b.n	2172c <mfu_interface_setopt+0x28>
   217c6:	b1b3      	cbz	r3, 217f6 <mfu_interface_setopt+0xf2>
   217c8:	9a08      	ldr	r2, [sp, #32]
   217ca:	2a04      	cmp	r2, #4
   217cc:	d113      	bne.n	217f6 <mfu_interface_setopt+0xf2>
   217ce:	2000      	movs	r0, #0
   217d0:	681a      	ldr	r2, [r3, #0]
   217d2:	4b16      	ldr	r3, [pc, #88]	; (2182c <mfu_interface_setopt+0x128>)
   217d4:	601a      	str	r2, [r3, #0]
   217d6:	b003      	add	sp, #12
   217d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   217da:	202a      	movs	r0, #42	; 0x2a
   217dc:	f7f5 f9f0 	bl	16bc0 <bsd_os_errno_set>
   217e0:	f04f 30ff 	mov.w	r0, #4294967295
   217e4:	b003      	add	sp, #12
   217e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   217e8:	203c      	movs	r0, #60	; 0x3c
   217ea:	f7f5 f9e9 	bl	16bc0 <bsd_os_errno_set>
   217ee:	f04f 30ff 	mov.w	r0, #4294967295
   217f2:	b003      	add	sp, #12
   217f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   217f6:	2016      	movs	r0, #22
   217f8:	f7f5 f9e2 	bl	16bc0 <bsd_os_errno_set>
   217fc:	f04f 30ff 	mov.w	r0, #4294967295
   21800:	e7c9      	b.n	21796 <mfu_interface_setopt+0x92>
   21802:	2001      	movs	r0, #1
   21804:	f7f5 f9dc 	bl	16bc0 <bsd_os_errno_set>
   21808:	f04f 30ff 	mov.w	r0, #4294967295
   2180c:	e7c3      	b.n	21796 <mfu_interface_setopt+0x92>
   2180e:	4b08      	ldr	r3, [pc, #32]	; (21830 <mfu_interface_setopt+0x12c>)
   21810:	2008      	movs	r0, #8
   21812:	601c      	str	r4, [r3, #0]
   21814:	f7f5 f9d4 	bl	16bc0 <bsd_os_errno_set>
   21818:	f04f 30ff 	mov.w	r0, #4294967295
   2181c:	e7bb      	b.n	21796 <mfu_interface_setopt+0x92>
   2181e:	bf00      	nop
   21820:	20021d9c 	.word	0x20021d9c
   21824:	200242a8 	.word	0x200242a8
   21828:	20021da8 	.word	0x20021da8
   2182c:	20021da4 	.word	0x20021da4
   21830:	20021da0 	.word	0x20021da0

00021834 <mfu_interface_getopt>:
   21834:	f240 2003 	movw	r0, #515	; 0x203
   21838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2183c:	4281      	cmp	r1, r0
   2183e:	b082      	sub	sp, #8
   21840:	9e08      	ldr	r6, [sp, #32]
   21842:	f040 80ae 	bne.w	219a2 <mfu_interface_getopt+0x16e>
   21846:	461d      	mov	r5, r3
   21848:	2b00      	cmp	r3, #0
   2184a:	f000 80aa 	beq.w	219a2 <mfu_interface_getopt+0x16e>
   2184e:	2e00      	cmp	r6, #0
   21850:	f000 80a7 	beq.w	219a2 <mfu_interface_getopt+0x16e>
   21854:	4b5e      	ldr	r3, [pc, #376]	; (219d0 <mfu_interface_getopt+0x19c>)
   21856:	681b      	ldr	r3, [r3, #0]
   21858:	3b02      	subs	r3, #2
   2185a:	2b01      	cmp	r3, #1
   2185c:	f200 80a7 	bhi.w	219ae <mfu_interface_getopt+0x17a>
   21860:	3a01      	subs	r2, #1
   21862:	2a13      	cmp	r2, #19
   21864:	d879      	bhi.n	2195a <mfu_interface_getopt+0x126>
   21866:	e8df f002 	tbb	[pc, r2]
   2186a:	5f17      	.short	0x5f17
   2186c:	78787878 	.word	0x78787878
   21870:	78787872 	.word	0x78787872
   21874:	78787878 	.word	0x78787878
   21878:	78787878 	.word	0x78787878
   2187c:	0a78      	.short	0x0a78
   2187e:	6833      	ldr	r3, [r6, #0]
   21880:	2b04      	cmp	r3, #4
   21882:	f040 808e 	bne.w	219a2 <mfu_interface_getopt+0x16e>
   21886:	2200      	movs	r2, #0
   21888:	4610      	mov	r0, r2
   2188a:	4b52      	ldr	r3, [pc, #328]	; (219d4 <mfu_interface_getopt+0x1a0>)
   2188c:	6819      	ldr	r1, [r3, #0]
   2188e:	601a      	str	r2, [r3, #0]
   21890:	6029      	str	r1, [r5, #0]
   21892:	b002      	add	sp, #8
   21894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21898:	6833      	ldr	r3, [r6, #0]
   2189a:	2b24      	cmp	r3, #36	; 0x24
   2189c:	f040 8081 	bne.w	219a2 <mfu_interface_getopt+0x16e>
   218a0:	2401      	movs	r4, #1
   218a2:	46a0      	mov	r8, r4
   218a4:	2100      	movs	r1, #0
   218a6:	4668      	mov	r0, sp
   218a8:	f7fc fee8 	bl	1e67c <rpc_dfu_client_request_alloc>
   218ac:	2800      	cmp	r0, #0
   218ae:	d146      	bne.n	2193e <mfu_interface_getopt+0x10a>
   218b0:	4949      	ldr	r1, [pc, #292]	; (219d8 <mfu_interface_getopt+0x1a4>)
   218b2:	9b00      	ldr	r3, [sp, #0]
   218b4:	880a      	ldrh	r2, [r1, #0]
   218b6:	f1b8 0f03 	cmp.w	r8, #3
   218ba:	f102 0201 	add.w	r2, r2, #1
   218be:	b292      	uxth	r2, r2
   218c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   218c4:	7118      	strb	r0, [r3, #4]
   218c6:	800a      	strh	r2, [r1, #0]
   218c8:	60dc      	str	r4, [r3, #12]
   218ca:	7158      	strb	r0, [r3, #5]
   218cc:	7198      	strb	r0, [r3, #6]
   218ce:	71d8      	strb	r0, [r3, #7]
   218d0:	d04b      	beq.n	2196a <mfu_interface_getopt+0x136>
   218d2:	2104      	movs	r1, #4
   218d4:	2200      	movs	r2, #0
   218d6:	4f41      	ldr	r7, [pc, #260]	; (219dc <mfu_interface_getopt+0x1a8>)
   218d8:	6099      	str	r1, [r3, #8]
   218da:	4618      	mov	r0, r3
   218dc:	4641      	mov	r1, r8
   218de:	603a      	str	r2, [r7, #0]
   218e0:	f7fc fee0 	bl	1e6a4 <rpc_dfu_client_request_send>
   218e4:	2800      	cmp	r0, #0
   218e6:	d14d      	bne.n	21984 <mfu_interface_getopt+0x150>
   218e8:	f04f 33ff 	mov.w	r3, #4294967295
   218ec:	ac02      	add	r4, sp, #8
   218ee:	f844 3d04 	str.w	r3, [r4, #-4]!
   218f2:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 219d0 <mfu_interface_getopt+0x19c>
   218f6:	e005      	b.n	21904 <mfu_interface_getopt+0xd0>
   218f8:	4621      	mov	r1, r4
   218fa:	4640      	mov	r0, r8
   218fc:	f7f5 f8a8 	bl	16a50 <bsd_os_timedwait>
   21900:	2800      	cmp	r0, #0
   21902:	d137      	bne.n	21974 <mfu_interface_getopt+0x140>
   21904:	6839      	ldr	r1, [r7, #0]
   21906:	2900      	cmp	r1, #0
   21908:	d0f6      	beq.n	218f8 <mfu_interface_getopt+0xc4>
   2190a:	690c      	ldr	r4, [r1, #16]
   2190c:	2c00      	cmp	r4, #0
   2190e:	d154      	bne.n	219ba <mfu_interface_getopt+0x186>
   21910:	6832      	ldr	r2, [r6, #0]
   21912:	3114      	adds	r1, #20
   21914:	4628      	mov	r0, r5
   21916:	f7eb f919 	bl	cb4c <memcpy>
   2191a:	6838      	ldr	r0, [r7, #0]
   2191c:	f7fc fed6 	bl	1e6cc <rpc_dfu_client_message_free>
   21920:	4620      	mov	r0, r4
   21922:	b002      	add	sp, #8
   21924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21928:	6833      	ldr	r3, [r6, #0]
   2192a:	2b04      	cmp	r3, #4
   2192c:	d139      	bne.n	219a2 <mfu_interface_getopt+0x16e>
   2192e:	2402      	movs	r4, #2
   21930:	2100      	movs	r1, #0
   21932:	4668      	mov	r0, sp
   21934:	46a0      	mov	r8, r4
   21936:	f7fc fea1 	bl	1e67c <rpc_dfu_client_request_alloc>
   2193a:	2800      	cmp	r0, #0
   2193c:	d0b8      	beq.n	218b0 <mfu_interface_getopt+0x7c>
   2193e:	200c      	movs	r0, #12
   21940:	f7f5 f93e 	bl	16bc0 <bsd_os_errno_set>
   21944:	f04f 30ff 	mov.w	r0, #4294967295
   21948:	b002      	add	sp, #8
   2194a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2194e:	6833      	ldr	r3, [r6, #0]
   21950:	2b04      	cmp	r3, #4
   21952:	d126      	bne.n	219a2 <mfu_interface_getopt+0x16e>
   21954:	2409      	movs	r4, #9
   21956:	46a0      	mov	r8, r4
   21958:	e7a4      	b.n	218a4 <mfu_interface_getopt+0x70>
   2195a:	202a      	movs	r0, #42	; 0x2a
   2195c:	f7f5 f930 	bl	16bc0 <bsd_os_errno_set>
   21960:	f04f 30ff 	mov.w	r0, #4294967295
   21964:	b002      	add	sp, #8
   21966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2196a:	4a1d      	ldr	r2, [pc, #116]	; (219e0 <mfu_interface_getopt+0x1ac>)
   2196c:	2108      	movs	r1, #8
   2196e:	6812      	ldr	r2, [r2, #0]
   21970:	611a      	str	r2, [r3, #16]
   21972:	e7af      	b.n	218d4 <mfu_interface_getopt+0xa0>
   21974:	203c      	movs	r0, #60	; 0x3c
   21976:	f7f5 f923 	bl	16bc0 <bsd_os_errno_set>
   2197a:	f04f 30ff 	mov.w	r0, #4294967295
   2197e:	b002      	add	sp, #8
   21980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21984:	9800      	ldr	r0, [sp, #0]
   21986:	6803      	ldr	r3, [r0, #0]
   21988:	b11b      	cbz	r3, 21992 <mfu_interface_getopt+0x15e>
   2198a:	4618      	mov	r0, r3
   2198c:	f7fc fea6 	bl	1e6dc <rpc_dfu_client_data_free>
   21990:	9800      	ldr	r0, [sp, #0]
   21992:	f7fc fe9b 	bl	1e6cc <rpc_dfu_client_message_free>
   21996:	200c      	movs	r0, #12
   21998:	f7f5 f912 	bl	16bc0 <bsd_os_errno_set>
   2199c:	f04f 30ff 	mov.w	r0, #4294967295
   219a0:	e7d2      	b.n	21948 <mfu_interface_getopt+0x114>
   219a2:	2016      	movs	r0, #22
   219a4:	f7f5 f90c 	bl	16bc0 <bsd_os_errno_set>
   219a8:	f04f 30ff 	mov.w	r0, #4294967295
   219ac:	e771      	b.n	21892 <mfu_interface_getopt+0x5e>
   219ae:	2001      	movs	r0, #1
   219b0:	f7f5 f906 	bl	16bc0 <bsd_os_errno_set>
   219b4:	f04f 30ff 	mov.w	r0, #4294967295
   219b8:	e76b      	b.n	21892 <mfu_interface_getopt+0x5e>
   219ba:	4b06      	ldr	r3, [pc, #24]	; (219d4 <mfu_interface_getopt+0x1a0>)
   219bc:	2008      	movs	r0, #8
   219be:	601c      	str	r4, [r3, #0]
   219c0:	f7f5 f8fe 	bl	16bc0 <bsd_os_errno_set>
   219c4:	6838      	ldr	r0, [r7, #0]
   219c6:	f7fc fe81 	bl	1e6cc <rpc_dfu_client_message_free>
   219ca:	f04f 30ff 	mov.w	r0, #4294967295
   219ce:	e760      	b.n	21892 <mfu_interface_getopt+0x5e>
   219d0:	20021d9c 	.word	0x20021d9c
   219d4:	20021da0 	.word	0x20021da0
   219d8:	200242a8 	.word	0x200242a8
   219dc:	20021da8 	.word	0x20021da8
   219e0:	20021da4 	.word	0x20021da4

000219e4 <interface_init>:
   219e4:	b508      	push	{r3, lr}
   219e6:	f44f 72b4 	mov.w	r2, #360	; 0x168
   219ea:	2100      	movs	r1, #0
   219ec:	4802      	ldr	r0, [pc, #8]	; (219f8 <interface_init+0x14>)
   219ee:	f004 fb45 	bl	2607c <memset>
   219f2:	2000      	movs	r0, #0
   219f4:	bd08      	pop	{r3, pc}
   219f6:	bf00      	nop
   219f8:	20026280 	.word	0x20026280

000219fc <interface_socket_allocate>:
   219fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   219fe:	4b30      	ldr	r3, [pc, #192]	; (21ac0 <interface_socket_allocate+0xc4>)
   21a00:	4606      	mov	r6, r0
   21a02:	681d      	ldr	r5, [r3, #0]
   21a04:	4608      	mov	r0, r1
   21a06:	b31d      	cbz	r5, 21a50 <interface_socket_allocate+0x54>
   21a08:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   21a0a:	2c00      	cmp	r4, #0
   21a0c:	d04a      	beq.n	21aa4 <interface_socket_allocate+0xa8>
   21a0e:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   21a10:	2c00      	cmp	r4, #0
   21a12:	d049      	beq.n	21aa8 <interface_socket_allocate+0xac>
   21a14:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   21a16:	2c00      	cmp	r4, #0
   21a18:	d048      	beq.n	21aac <interface_socket_allocate+0xb0>
   21a1a:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   21a1e:	2900      	cmp	r1, #0
   21a20:	d046      	beq.n	21ab0 <interface_socket_allocate+0xb4>
   21a22:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   21a26:	b191      	cbz	r1, 21a4e <interface_socket_allocate+0x52>
   21a28:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
   21a2c:	2900      	cmp	r1, #0
   21a2e:	d043      	beq.n	21ab8 <interface_socket_allocate+0xbc>
   21a30:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
   21a34:	2900      	cmp	r1, #0
   21a36:	d041      	beq.n	21abc <interface_socket_allocate+0xc0>
   21a38:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   21a3c:	2900      	cmp	r1, #0
   21a3e:	d039      	beq.n	21ab4 <interface_socket_allocate+0xb8>
   21a40:	f04f 35ff 	mov.w	r5, #4294967295
   21a44:	2069      	movs	r0, #105	; 0x69
   21a46:	f7f5 f8bb 	bl	16bc0 <bsd_os_errno_set>
   21a4a:	4628      	mov	r0, r5
   21a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21a4e:	2505      	movs	r5, #5
   21a50:	f04f 0c01 	mov.w	ip, #1
   21a54:	f04f 37ff 	mov.w	r7, #4294967295
   21a58:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   21a5c:	00e4      	lsls	r4, r4, #3
   21a5e:	f843 c004 	str.w	ip, [r3, r4]
   21a62:	441c      	add	r4, r3
   21a64:	4611      	mov	r1, r2
   21a66:	61a7      	str	r7, [r4, #24]
   21a68:	4622      	mov	r2, r4
   21a6a:	f7fe feeb 	bl	20844 <packet_handler_create>
   21a6e:	4603      	mov	r3, r0
   21a70:	61e0      	str	r0, [r4, #28]
   21a72:	b158      	cbz	r0, 21a8c <interface_socket_allocate+0x90>
   21a74:	681b      	ldr	r3, [r3, #0]
   21a76:	681b      	ldr	r3, [r3, #0]
   21a78:	4798      	blx	r3
   21a7a:	b910      	cbnz	r0, 21a82 <interface_socket_allocate+0x86>
   21a7c:	6034      	str	r4, [r6, #0]
   21a7e:	4628      	mov	r0, r5
   21a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21a82:	69e0      	ldr	r0, [r4, #28]
   21a84:	f7fe fefe 	bl	20884 <packet_handler_delete>
   21a88:	2300      	movs	r3, #0
   21a8a:	61e3      	str	r3, [r4, #28]
   21a8c:	f04f 35ff 	mov.w	r5, #4294967295
   21a90:	2228      	movs	r2, #40	; 0x28
   21a92:	2100      	movs	r1, #0
   21a94:	4620      	mov	r0, r4
   21a96:	f004 faf1 	bl	2607c <memset>
   21a9a:	200c      	movs	r0, #12
   21a9c:	f7f5 f890 	bl	16bc0 <bsd_os_errno_set>
   21aa0:	4628      	mov	r0, r5
   21aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21aa4:	2501      	movs	r5, #1
   21aa6:	e7d3      	b.n	21a50 <interface_socket_allocate+0x54>
   21aa8:	2502      	movs	r5, #2
   21aaa:	e7d1      	b.n	21a50 <interface_socket_allocate+0x54>
   21aac:	2503      	movs	r5, #3
   21aae:	e7cf      	b.n	21a50 <interface_socket_allocate+0x54>
   21ab0:	2504      	movs	r5, #4
   21ab2:	e7cd      	b.n	21a50 <interface_socket_allocate+0x54>
   21ab4:	2508      	movs	r5, #8
   21ab6:	e7cb      	b.n	21a50 <interface_socket_allocate+0x54>
   21ab8:	2506      	movs	r5, #6
   21aba:	e7c9      	b.n	21a50 <interface_socket_allocate+0x54>
   21abc:	2507      	movs	r5, #7
   21abe:	e7c7      	b.n	21a50 <interface_socket_allocate+0x54>
   21ac0:	20026280 	.word	0x20026280

00021ac4 <interface_socket_free>:
   21ac4:	2808      	cmp	r0, #8
   21ac6:	d900      	bls.n	21aca <interface_socket_free+0x6>
   21ac8:	4770      	bx	lr
   21aca:	b510      	push	{r4, lr}
   21acc:	4c07      	ldr	r4, [pc, #28]	; (21aec <interface_socket_free+0x28>)
   21ace:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21ad2:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   21ad6:	69e0      	ldr	r0, [r4, #28]
   21ad8:	b108      	cbz	r0, 21ade <interface_socket_free+0x1a>
   21ada:	f7fe fed3 	bl	20884 <packet_handler_delete>
   21ade:	4620      	mov	r0, r4
   21ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21ae4:	2228      	movs	r2, #40	; 0x28
   21ae6:	2100      	movs	r1, #0
   21ae8:	f004 bac8 	b.w	2607c <memset>
   21aec:	20026280 	.word	0x20026280

00021af0 <interface_socket_packet_handler_update>:
   21af0:	2808      	cmp	r0, #8
   21af2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21af6:	d81e      	bhi.n	21b36 <interface_socket_packet_handler_update+0x46>
   21af8:	ea4f 0880 	mov.w	r8, r0, lsl #2
   21afc:	4e17      	ldr	r6, [pc, #92]	; (21b5c <interface_socket_packet_handler_update+0x6c>)
   21afe:	eb08 0300 	add.w	r3, r8, r0
   21b02:	00db      	lsls	r3, r3, #3
   21b04:	58f4      	ldr	r4, [r6, r3]
   21b06:	18f5      	adds	r5, r6, r3
   21b08:	b1ac      	cbz	r4, 21b36 <interface_socket_packet_handler_update+0x46>
   21b0a:	460b      	mov	r3, r1
   21b0c:	4604      	mov	r4, r0
   21b0e:	4611      	mov	r1, r2
   21b10:	4618      	mov	r0, r3
   21b12:	462a      	mov	r2, r5
   21b14:	f8d5 901c 	ldr.w	r9, [r5, #28]
   21b18:	f7fe fe94 	bl	20844 <packet_handler_create>
   21b1c:	61e8      	str	r0, [r5, #28]
   21b1e:	b1d0      	cbz	r0, 21b56 <interface_socket_packet_handler_update+0x66>
   21b20:	6803      	ldr	r3, [r0, #0]
   21b22:	681b      	ldr	r3, [r3, #0]
   21b24:	4798      	blx	r3
   21b26:	4607      	mov	r7, r0
   21b28:	b948      	cbnz	r0, 21b3e <interface_socket_packet_handler_update+0x4e>
   21b2a:	4648      	mov	r0, r9
   21b2c:	f7fe feaa 	bl	20884 <packet_handler_delete>
   21b30:	4638      	mov	r0, r7
   21b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21b36:	2705      	movs	r7, #5
   21b38:	4638      	mov	r0, r7
   21b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21b3e:	69e8      	ldr	r0, [r5, #28]
   21b40:	f7fe fea0 	bl	20884 <packet_handler_delete>
   21b44:	eb08 0004 	add.w	r0, r8, r4
   21b48:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
   21b4c:	f8c6 901c 	str.w	r9, [r6, #28]
   21b50:	4638      	mov	r0, r7
   21b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21b56:	2704      	movs	r7, #4
   21b58:	e7f4      	b.n	21b44 <interface_socket_packet_handler_update+0x54>
   21b5a:	bf00      	nop
   21b5c:	20026280 	.word	0x20026280

00021b60 <interface_socket_wait>:
   21b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21b64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21b68:	4c0d      	ldr	r4, [pc, #52]	; (21ba0 <interface_socket_wait+0x40>)
   21b6a:	00c0      	lsls	r0, r0, #3
   21b6c:	5825      	ldr	r5, [r4, r0]
   21b6e:	4404      	add	r4, r0
   21b70:	4015      	ands	r5, r2
   21b72:	428d      	cmp	r5, r1
   21b74:	d011      	beq.n	21b9a <interface_socket_wait+0x3a>
   21b76:	6860      	ldr	r0, [r4, #4]
   21b78:	b978      	cbnz	r0, 21b9a <interface_socket_wait+0x3a>
   21b7a:	4698      	mov	r8, r3
   21b7c:	460f      	mov	r7, r1
   21b7e:	4616      	mov	r6, r2
   21b80:	4625      	mov	r5, r4
   21b82:	e006      	b.n	21b92 <interface_socket_wait+0x32>
   21b84:	686b      	ldr	r3, [r5, #4]
   21b86:	b943      	cbnz	r3, 21b9a <interface_socket_wait+0x3a>
   21b88:	4641      	mov	r1, r8
   21b8a:	4620      	mov	r0, r4
   21b8c:	f7f4 ff60 	bl	16a50 <bsd_os_timedwait>
   21b90:	b920      	cbnz	r0, 21b9c <interface_socket_wait+0x3c>
   21b92:	6828      	ldr	r0, [r5, #0]
   21b94:	4030      	ands	r0, r6
   21b96:	42b8      	cmp	r0, r7
   21b98:	d1f4      	bne.n	21b84 <interface_socket_wait+0x24>
   21b9a:	2000      	movs	r0, #0
   21b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21ba0:	20026280 	.word	0x20026280

00021ba4 <interface_from_internal_id_search>:
   21ba4:	4b27      	ldr	r3, [pc, #156]	; (21c44 <interface_from_internal_id_search+0xa0>)
   21ba6:	681a      	ldr	r2, [r3, #0]
   21ba8:	b112      	cbz	r2, 21bb0 <interface_from_internal_id_search+0xc>
   21baa:	699a      	ldr	r2, [r3, #24]
   21bac:	4282      	cmp	r2, r0
   21bae:	d039      	beq.n	21c24 <interface_from_internal_id_search+0x80>
   21bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   21bb2:	b112      	cbz	r2, 21bba <interface_from_internal_id_search+0x16>
   21bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   21bb6:	4282      	cmp	r2, r0
   21bb8:	d036      	beq.n	21c28 <interface_from_internal_id_search+0x84>
   21bba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   21bbc:	b112      	cbz	r2, 21bc4 <interface_from_internal_id_search+0x20>
   21bbe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   21bc0:	4282      	cmp	r2, r0
   21bc2:	d033      	beq.n	21c2c <interface_from_internal_id_search+0x88>
   21bc4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   21bc6:	b11a      	cbz	r2, 21bd0 <interface_from_internal_id_search+0x2c>
   21bc8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   21bcc:	4282      	cmp	r2, r0
   21bce:	d02f      	beq.n	21c30 <interface_from_internal_id_search+0x8c>
   21bd0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   21bd4:	b11a      	cbz	r2, 21bde <interface_from_internal_id_search+0x3a>
   21bd6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   21bda:	4282      	cmp	r2, r0
   21bdc:	d02a      	beq.n	21c34 <interface_from_internal_id_search+0x90>
   21bde:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   21be2:	b11a      	cbz	r2, 21bec <interface_from_internal_id_search+0x48>
   21be4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   21be8:	4282      	cmp	r2, r0
   21bea:	d025      	beq.n	21c38 <interface_from_internal_id_search+0x94>
   21bec:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   21bf0:	b11a      	cbz	r2, 21bfa <interface_from_internal_id_search+0x56>
   21bf2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   21bf6:	4282      	cmp	r2, r0
   21bf8:	d020      	beq.n	21c3c <interface_from_internal_id_search+0x98>
   21bfa:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   21bfe:	b11a      	cbz	r2, 21c08 <interface_from_internal_id_search+0x64>
   21c00:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   21c04:	4282      	cmp	r2, r0
   21c06:	d01b      	beq.n	21c40 <interface_from_internal_id_search+0x9c>
   21c08:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   21c0c:	b13a      	cbz	r2, 21c1e <interface_from_internal_id_search+0x7a>
   21c0e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   21c12:	4283      	cmp	r3, r0
   21c14:	bf14      	ite	ne
   21c16:	f04f 30ff 	movne.w	r0, #4294967295
   21c1a:	2008      	moveq	r0, #8
   21c1c:	4770      	bx	lr
   21c1e:	f04f 30ff 	mov.w	r0, #4294967295
   21c22:	4770      	bx	lr
   21c24:	2000      	movs	r0, #0
   21c26:	4770      	bx	lr
   21c28:	2001      	movs	r0, #1
   21c2a:	4770      	bx	lr
   21c2c:	2002      	movs	r0, #2
   21c2e:	4770      	bx	lr
   21c30:	2003      	movs	r0, #3
   21c32:	4770      	bx	lr
   21c34:	2004      	movs	r0, #4
   21c36:	4770      	bx	lr
   21c38:	2005      	movs	r0, #5
   21c3a:	4770      	bx	lr
   21c3c:	2006      	movs	r0, #6
   21c3e:	4770      	bx	lr
   21c40:	2007      	movs	r0, #7
   21c42:	4770      	bx	lr
   21c44:	20026280 	.word	0x20026280

00021c48 <interface_socket_from_handle_get>:
   21c48:	2808      	cmp	r0, #8
   21c4a:	d807      	bhi.n	21c5c <interface_socket_from_handle_get+0x14>
   21c4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21c50:	4b03      	ldr	r3, [pc, #12]	; (21c60 <interface_socket_from_handle_get+0x18>)
   21c52:	00c0      	lsls	r0, r0, #3
   21c54:	581a      	ldr	r2, [r3, r0]
   21c56:	b10a      	cbz	r2, 21c5c <interface_socket_from_handle_get+0x14>
   21c58:	4418      	add	r0, r3
   21c5a:	4770      	bx	lr
   21c5c:	2000      	movs	r0, #0
   21c5e:	4770      	bx	lr
   21c60:	20026280 	.word	0x20026280

00021c64 <interface_socket_event_get>:
   21c64:	b119      	cbz	r1, 21c6e <interface_socket_event_get+0xa>
   21c66:	2808      	cmp	r0, #8
   21c68:	d902      	bls.n	21c70 <interface_socket_event_get+0xc>
   21c6a:	2310      	movs	r3, #16
   21c6c:	600b      	str	r3, [r1, #0]
   21c6e:	4770      	bx	lr
   21c70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21c74:	4b07      	ldr	r3, [pc, #28]	; (21c94 <interface_socket_event_get+0x30>)
   21c76:	00c0      	lsls	r0, r0, #3
   21c78:	581a      	ldr	r2, [r3, r0]
   21c7a:	2a00      	cmp	r2, #0
   21c7c:	d0f5      	beq.n	21c6a <interface_socket_event_get+0x6>
   21c7e:	581b      	ldr	r3, [r3, r0]
   21c80:	0c1b      	lsrs	r3, r3, #16
   21c82:	f003 020a 	and.w	r2, r3, #10
   21c86:	2a0a      	cmp	r2, #10
   21c88:	bf14      	ite	ne
   21c8a:	f003 030f 	andne.w	r3, r3, #15
   21c8e:	f003 030d 	andeq.w	r3, r3, #13
   21c92:	e7eb      	b.n	21c6c <interface_socket_event_get+0x8>
   21c94:	20026280 	.word	0x20026280

00021c98 <interface_socket_setopt>:
   21c98:	2808      	cmp	r0, #8
   21c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21c9c:	d82c      	bhi.n	21cf8 <interface_socket_setopt+0x60>
   21c9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21ca2:	4e1e      	ldr	r6, [pc, #120]	; (21d1c <interface_socket_setopt+0x84>)
   21ca4:	00c0      	lsls	r0, r0, #3
   21ca6:	5834      	ldr	r4, [r6, r0]
   21ca8:	b334      	cbz	r4, 21cf8 <interface_socket_setopt+0x60>
   21caa:	2901      	cmp	r1, #1
   21cac:	d11e      	bne.n	21cec <interface_socket_setopt+0x54>
   21cae:	f1a2 0114 	sub.w	r1, r2, #20
   21cb2:	2901      	cmp	r1, #1
   21cb4:	d81a      	bhi.n	21cec <interface_socket_setopt+0x54>
   21cb6:	9906      	ldr	r1, [sp, #24]
   21cb8:	2908      	cmp	r1, #8
   21cba:	d123      	bne.n	21d04 <interface_socket_setopt+0x6c>
   21cbc:	b313      	cbz	r3, 21d04 <interface_socket_setopt+0x6c>
   21cbe:	6859      	ldr	r1, [r3, #4]
   21cc0:	4c17      	ldr	r4, [pc, #92]	; (21d20 <interface_socket_setopt+0x88>)
   21cc2:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   21cc6:	fba4 4101 	umull	r4, r1, r4, r1
   21cca:	0989      	lsrs	r1, r1, #6
   21ccc:	460c      	mov	r4, r1
   21cce:	2500      	movs	r5, #0
   21cd0:	681b      	ldr	r3, [r3, #0]
   21cd2:	fbe7 4503 	umlal	r4, r5, r7, r3
   21cd6:	2d01      	cmp	r5, #1
   21cd8:	bf08      	it	eq
   21cda:	2c00      	cmpeq	r4, #0
   21cdc:	d218      	bcs.n	21d10 <interface_socket_setopt+0x78>
   21cde:	4430      	add	r0, r6
   21ce0:	2a14      	cmp	r2, #20
   21ce2:	bf0c      	ite	eq
   21ce4:	6204      	streq	r4, [r0, #32]
   21ce6:	6244      	strne	r4, [r0, #36]	; 0x24
   21ce8:	2000      	movs	r0, #0
   21cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21cec:	202a      	movs	r0, #42	; 0x2a
   21cee:	f7f4 ff67 	bl	16bc0 <bsd_os_errno_set>
   21cf2:	f04f 30ff 	mov.w	r0, #4294967295
   21cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21cf8:	2009      	movs	r0, #9
   21cfa:	f7f4 ff61 	bl	16bc0 <bsd_os_errno_set>
   21cfe:	f04f 30ff 	mov.w	r0, #4294967295
   21d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d04:	2016      	movs	r0, #22
   21d06:	f7f4 ff5b 	bl	16bc0 <bsd_os_errno_set>
   21d0a:	f04f 30ff 	mov.w	r0, #4294967295
   21d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d10:	2025      	movs	r0, #37	; 0x25
   21d12:	f7f4 ff55 	bl	16bc0 <bsd_os_errno_set>
   21d16:	f04f 30ff 	mov.w	r0, #4294967295
   21d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d1c:	20026280 	.word	0x20026280
   21d20:	10624dd3 	.word	0x10624dd3

00021d24 <interface_socket_getopt>:
   21d24:	b570      	push	{r4, r5, r6, lr}
   21d26:	2808      	cmp	r0, #8
   21d28:	9d04      	ldr	r5, [sp, #16]
   21d2a:	d835      	bhi.n	21d98 <interface_socket_getopt+0x74>
   21d2c:	4c20      	ldr	r4, [pc, #128]	; (21db0 <interface_socket_getopt+0x8c>)
   21d2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21d32:	00c0      	lsls	r0, r0, #3
   21d34:	5826      	ldr	r6, [r4, r0]
   21d36:	4404      	add	r4, r0
   21d38:	b376      	cbz	r6, 21d98 <interface_socket_getopt+0x74>
   21d3a:	2901      	cmp	r1, #1
   21d3c:	d132      	bne.n	21da4 <interface_socket_getopt+0x80>
   21d3e:	b32b      	cbz	r3, 21d8c <interface_socket_getopt+0x68>
   21d40:	b325      	cbz	r5, 21d8c <interface_socket_getopt+0x68>
   21d42:	2a04      	cmp	r2, #4
   21d44:	d019      	beq.n	21d7a <interface_socket_getopt+0x56>
   21d46:	f1a2 0114 	sub.w	r1, r2, #20
   21d4a:	2901      	cmp	r1, #1
   21d4c:	d82a      	bhi.n	21da4 <interface_socket_getopt+0x80>
   21d4e:	6829      	ldr	r1, [r5, #0]
   21d50:	2908      	cmp	r1, #8
   21d52:	d11b      	bne.n	21d8c <interface_socket_getopt+0x68>
   21d54:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   21d58:	2a14      	cmp	r2, #20
   21d5a:	bf18      	it	ne
   21d5c:	4601      	movne	r1, r0
   21d5e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   21d62:	4a14      	ldr	r2, [pc, #80]	; (21db4 <interface_socket_getopt+0x90>)
   21d64:	2000      	movs	r0, #0
   21d66:	fba2 5201 	umull	r5, r2, r2, r1
   21d6a:	0992      	lsrs	r2, r2, #6
   21d6c:	fb04 1112 	mls	r1, r4, r2, r1
   21d70:	fb04 f101 	mul.w	r1, r4, r1
   21d74:	e9c3 2100 	strd	r2, r1, [r3]
   21d78:	bd70      	pop	{r4, r5, r6, pc}
   21d7a:	682a      	ldr	r2, [r5, #0]
   21d7c:	2a04      	cmp	r2, #4
   21d7e:	d105      	bne.n	21d8c <interface_socket_getopt+0x68>
   21d80:	2200      	movs	r2, #0
   21d82:	6861      	ldr	r1, [r4, #4]
   21d84:	4610      	mov	r0, r2
   21d86:	6019      	str	r1, [r3, #0]
   21d88:	6062      	str	r2, [r4, #4]
   21d8a:	bd70      	pop	{r4, r5, r6, pc}
   21d8c:	2016      	movs	r0, #22
   21d8e:	f7f4 ff17 	bl	16bc0 <bsd_os_errno_set>
   21d92:	f04f 30ff 	mov.w	r0, #4294967295
   21d96:	bd70      	pop	{r4, r5, r6, pc}
   21d98:	2009      	movs	r0, #9
   21d9a:	f7f4 ff11 	bl	16bc0 <bsd_os_errno_set>
   21d9e:	f04f 30ff 	mov.w	r0, #4294967295
   21da2:	bd70      	pop	{r4, r5, r6, pc}
   21da4:	202a      	movs	r0, #42	; 0x2a
   21da6:	f7f4 ff0b 	bl	16bc0 <bsd_os_errno_set>
   21daa:	f04f 30ff 	mov.w	r0, #4294967295
   21dae:	bd70      	pop	{r4, r5, r6, pc}
   21db0:	20026280 	.word	0x20026280
   21db4:	10624dd3 	.word	0x10624dd3

00021db8 <interface_socket_fcntl>:
   21db8:	2808      	cmp	r0, #8
   21dba:	b510      	push	{r4, lr}
   21dbc:	d826      	bhi.n	21e0c <interface_socket_fcntl+0x54>
   21dbe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21dc2:	4c1b      	ldr	r4, [pc, #108]	; (21e30 <interface_socket_fcntl+0x78>)
   21dc4:	00c3      	lsls	r3, r0, #3
   21dc6:	58e0      	ldr	r0, [r4, r3]
   21dc8:	b300      	cbz	r0, 21e0c <interface_socket_fcntl+0x54>
   21dca:	2901      	cmp	r1, #1
   21dcc:	d005      	beq.n	21dda <interface_socket_fcntl+0x22>
   21dce:	2902      	cmp	r1, #2
   21dd0:	d122      	bne.n	21e18 <interface_socket_fcntl+0x60>
   21dd2:	58e0      	ldr	r0, [r4, r3]
   21dd4:	f3c0 7000 	ubfx	r0, r0, #28, #1
   21dd8:	bd10      	pop	{r4, pc}
   21dda:	07d2      	lsls	r2, r2, #31
   21ddc:	d410      	bmi.n	21e00 <interface_socket_fcntl+0x48>
   21dde:	58e0      	ldr	r0, [r4, r3]
   21de0:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
   21de4:	d11e      	bne.n	21e24 <interface_socket_fcntl+0x6c>
   21de6:	58e2      	ldr	r2, [r4, r3]
   21de8:	b292      	uxth	r2, r2
   21dea:	2a0a      	cmp	r2, #10
   21dec:	d01a      	beq.n	21e24 <interface_socket_fcntl+0x6c>
   21dee:	58e2      	ldr	r2, [r4, r3]
   21df0:	b292      	uxth	r2, r2
   21df2:	2a0b      	cmp	r2, #11
   21df4:	d016      	beq.n	21e24 <interface_socket_fcntl+0x6c>
   21df6:	58e2      	ldr	r2, [r4, r3]
   21df8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   21dfc:	50e2      	str	r2, [r4, r3]
   21dfe:	bd10      	pop	{r4, pc}
   21e00:	58e2      	ldr	r2, [r4, r3]
   21e02:	2000      	movs	r0, #0
   21e04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   21e08:	50e2      	str	r2, [r4, r3]
   21e0a:	bd10      	pop	{r4, pc}
   21e0c:	2009      	movs	r0, #9
   21e0e:	f7f4 fed7 	bl	16bc0 <bsd_os_errno_set>
   21e12:	f04f 30ff 	mov.w	r0, #4294967295
   21e16:	bd10      	pop	{r4, pc}
   21e18:	2016      	movs	r0, #22
   21e1a:	f7f4 fed1 	bl	16bc0 <bsd_os_errno_set>
   21e1e:	f04f 30ff 	mov.w	r0, #4294967295
   21e22:	bd10      	pop	{r4, pc}
   21e24:	2023      	movs	r0, #35	; 0x23
   21e26:	f7f4 fecb 	bl	16bc0 <bsd_os_errno_set>
   21e2a:	f04f 30ff 	mov.w	r0, #4294967295
   21e2e:	bd10      	pop	{r4, pc}
   21e30:	20026280 	.word	0x20026280

00021e34 <at_client_evt_handler>:
   21e34:	b120      	cbz	r0, 21e40 <at_client_evt_handler+0xc>
   21e36:	f850 1b08 	ldr.w	r1, [r0], #8
   21e3a:	0c09      	lsrs	r1, r1, #16
   21e3c:	f7fc be44 	b.w	1eac8 <rpc_at_event_handler>
   21e40:	4770      	bx	lr
   21e42:	bf00      	nop

00021e44 <rpc_at_client_init>:
   21e44:	4801      	ldr	r0, [pc, #4]	; (21e4c <rpc_at_client_init+0x8>)
   21e46:	f7fb bbfb 	b.w	1d640 <rpc_client_register>
   21e4a:	bf00      	nop
   21e4c:	0002f55c 	.word	0x0002f55c

00021e50 <rpc_at_client_request_alloc>:
   21e50:	b180      	cbz	r0, 21e74 <rpc_at_client_request_alloc+0x24>
   21e52:	2300      	movs	r3, #0
   21e54:	b510      	push	{r4, lr}
   21e56:	b082      	sub	sp, #8
   21e58:	aa02      	add	r2, sp, #8
   21e5a:	4604      	mov	r4, r0
   21e5c:	f842 3d04 	str.w	r3, [r2, #-4]!
   21e60:	2003      	movs	r0, #3
   21e62:	f7fb fc67 	bl	1d734 <rpc_message_alloc>
   21e66:	b918      	cbnz	r0, 21e70 <rpc_at_client_request_alloc+0x20>
   21e68:	9b01      	ldr	r3, [sp, #4]
   21e6a:	b10b      	cbz	r3, 21e70 <rpc_at_client_request_alloc+0x20>
   21e6c:	3308      	adds	r3, #8
   21e6e:	6023      	str	r3, [r4, #0]
   21e70:	b002      	add	sp, #8
   21e72:	bd10      	pop	{r4, pc}
   21e74:	200e      	movs	r0, #14
   21e76:	4770      	bx	lr

00021e78 <rpc_at_client_request_send>:
   21e78:	b150      	cbz	r0, 21e90 <rpc_at_client_request_send+0x18>
   21e7a:	4603      	mov	r3, r0
   21e7c:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   21e80:	2003      	movs	r0, #3
   21e82:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   21e86:	f843 1d08 	str.w	r1, [r3, #-8]!
   21e8a:	4619      	mov	r1, r3
   21e8c:	f7fb bc42 	b.w	1d714 <rpc_message_send>
   21e90:	200e      	movs	r0, #14
   21e92:	4770      	bx	lr

00021e94 <rpc_at_client_message_free>:
   21e94:	b120      	cbz	r0, 21ea0 <rpc_at_client_message_free+0xc>
   21e96:	f1a0 0108 	sub.w	r1, r0, #8
   21e9a:	2003      	movs	r0, #3
   21e9c:	f7fb bc76 	b.w	1d78c <rpc_message_free>
   21ea0:	200e      	movs	r0, #14
   21ea2:	4770      	bx	lr

00021ea4 <rpc_at_client_data_free>:
   21ea4:	b118      	cbz	r0, 21eae <rpc_at_client_data_free+0xa>
   21ea6:	4601      	mov	r1, r0
   21ea8:	2003      	movs	r0, #3
   21eaa:	f7fb bc7b 	b.w	1d7a4 <rpc_message_data_free>
   21eae:	200e      	movs	r0, #14
   21eb0:	4770      	bx	lr
   21eb2:	bf00      	nop

00021eb4 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   21eb4:	4a07      	ldr	r2, [pc, #28]	; (21ed4 <SystemInit+0x20>)
   21eb6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   21eba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   21ebe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   21ec2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   21ec6:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   21eca:	4b03      	ldr	r3, [pc, #12]	; (21ed8 <SystemInit+0x24>)
   21ecc:	4a03      	ldr	r2, [pc, #12]	; (21edc <SystemInit+0x28>)
   21ece:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   21ed0:	4770      	bx	lr
   21ed2:	bf00      	nop
   21ed4:	e000ed00 	.word	0xe000ed00
   21ed8:	200204c8 	.word	0x200204c8
   21edc:	03d09000 	.word	0x03d09000

00021ee0 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
   21ee0:	b508      	push	{r3, lr}
    switch (domain)
   21ee2:	b178      	cbz	r0, 21f04 <nrf_clock_is_running.constprop.0+0x24>
   21ee4:	2801      	cmp	r0, #1
   21ee6:	d019      	beq.n	21f1c <nrf_clock_is_running.constprop.0+0x3c>
            NRFX_ASSERT(0);
   21ee8:	f240 3342 	movw	r3, #834	; 0x342
   21eec:	4a10      	ldr	r2, [pc, #64]	; (21f30 <nrf_clock_is_running.constprop.0+0x50>)
   21eee:	4911      	ldr	r1, [pc, #68]	; (21f34 <nrf_clock_is_running.constprop.0+0x54>)
   21ef0:	4811      	ldr	r0, [pc, #68]	; (21f38 <nrf_clock_is_running.constprop.0+0x58>)
   21ef2:	f00a f8e0 	bl	2c0b6 <printk>
   21ef6:	480e      	ldr	r0, [pc, #56]	; (21f30 <nrf_clock_is_running.constprop.0+0x50>)
   21ef8:	f240 3142 	movw	r1, #834	; 0x342
   21efc:	f00a faf8 	bl	2c4f0 <assert_post_action>
            return false;
   21f00:	2000      	movs	r0, #0
   21f02:	e00a      	b.n	21f1a <nrf_clock_is_running.constprop.0+0x3a>
            if (p_clk_src != NULL)
   21f04:	4a0d      	ldr	r2, [pc, #52]	; (21f3c <nrf_clock_is_running.constprop.0+0x5c>)
   21f06:	b121      	cbz	r1, 21f12 <nrf_clock_is_running.constprop.0+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   21f08:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   21f0c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   21f10:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   21f12:	f8d2 0418 	ldr.w	r0, [r2, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   21f16:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
   21f1a:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
   21f1c:	4a07      	ldr	r2, [pc, #28]	; (21f3c <nrf_clock_is_running.constprop.0+0x5c>)
   21f1e:	b121      	cbz	r1, 21f2a <nrf_clock_is_running.constprop.0+0x4a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   21f20:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
   21f24:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   21f28:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   21f2a:	f8d2 040c 	ldr.w	r0, [r2, #1036]	; 0x40c
   21f2e:	e7f2      	b.n	21f16 <nrf_clock_is_running.constprop.0+0x36>
   21f30:	0003279a 	.word	0x0003279a
   21f34:	00032bdb 	.word	0x00032bdb
   21f38:	000300ff 	.word	0x000300ff
   21f3c:	40005000 	.word	0x40005000

00021f40 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   21f40:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   21f42:	4604      	mov	r4, r0
   21f44:	b948      	cbnz	r0, 21f5a <nrfx_clock_init+0x1a>
   21f46:	490a      	ldr	r1, [pc, #40]	; (21f70 <nrfx_clock_init+0x30>)
   21f48:	480a      	ldr	r0, [pc, #40]	; (21f74 <nrfx_clock_init+0x34>)
   21f4a:	23b3      	movs	r3, #179	; 0xb3
   21f4c:	4a0a      	ldr	r2, [pc, #40]	; (21f78 <nrfx_clock_init+0x38>)
   21f4e:	f00a f8b2 	bl	2c0b6 <printk>
   21f52:	21b3      	movs	r1, #179	; 0xb3
   21f54:	4808      	ldr	r0, [pc, #32]	; (21f78 <nrfx_clock_init+0x38>)
   21f56:	f00a facb 	bl	2c4f0 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   21f5a:	4b08      	ldr	r3, [pc, #32]	; (21f7c <nrfx_clock_init+0x3c>)
   21f5c:	791a      	ldrb	r2, [r3, #4]
   21f5e:	b922      	cbnz	r2, 21f6a <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   21f60:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   21f62:	4807      	ldr	r0, [pc, #28]	; (21f80 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
   21f64:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   21f66:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   21f68:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   21f6a:	4806      	ldr	r0, [pc, #24]	; (21f84 <nrfx_clock_init+0x44>)
    return err_code;
   21f6c:	e7fc      	b.n	21f68 <nrfx_clock_init+0x28>
   21f6e:	bf00      	nop
   21f70:	0003280b 	.word	0x0003280b
   21f74:	000300ff 	.word	0x000300ff
   21f78:	000327ce 	.word	0x000327ce
   21f7c:	20021dac 	.word	0x20021dac
   21f80:	0bad0000 	.word	0x0bad0000
   21f84:	0bad000c 	.word	0x0bad000c

00021f88 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   21f88:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21f8a:	4b0b      	ldr	r3, [pc, #44]	; (21fb8 <nrfx_clock_enable+0x30>)
   21f8c:	791b      	ldrb	r3, [r3, #4]
   21f8e:	b94b      	cbnz	r3, 21fa4 <nrfx_clock_enable+0x1c>
   21f90:	490a      	ldr	r1, [pc, #40]	; (21fbc <nrfx_clock_enable+0x34>)
   21f92:	480b      	ldr	r0, [pc, #44]	; (21fc0 <nrfx_clock_enable+0x38>)
   21f94:	23cc      	movs	r3, #204	; 0xcc
   21f96:	4a0b      	ldr	r2, [pc, #44]	; (21fc4 <nrfx_clock_enable+0x3c>)
   21f98:	f00a f88d 	bl	2c0b6 <printk>
   21f9c:	21cc      	movs	r1, #204	; 0xcc
   21f9e:	4809      	ldr	r0, [pc, #36]	; (21fc4 <nrfx_clock_enable+0x3c>)
   21fa0:	f00a faa6 	bl	2c4f0 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   21fa4:	2005      	movs	r0, #5
   21fa6:	f7f2 fb85 	bl	146b4 <arch_irq_is_enabled>
   21faa:	b920      	cbnz	r0, 21fb6 <nrfx_clock_enable+0x2e>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   21fac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   21fb0:	2005      	movs	r0, #5
   21fb2:	f7f2 bb6f 	b.w	14694 <arch_irq_enable>
   21fb6:	bd08      	pop	{r3, pc}
   21fb8:	20021dac 	.word	0x20021dac
   21fbc:	00032819 	.word	0x00032819
   21fc0:	000300ff 	.word	0x000300ff
   21fc4:	000327ce 	.word	0x000327ce

00021fc8 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21fc8:	4b22      	ldr	r3, [pc, #136]	; (22054 <nrfx_clock_start+0x8c>)
{
   21fca:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21fcc:	791b      	ldrb	r3, [r3, #4]
{
   21fce:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21fd0:	b95b      	cbnz	r3, 21fea <nrfx_clock_start+0x22>
   21fd2:	4921      	ldr	r1, [pc, #132]	; (22058 <nrfx_clock_start+0x90>)
   21fd4:	4821      	ldr	r0, [pc, #132]	; (2205c <nrfx_clock_start+0x94>)
   21fd6:	f44f 7384 	mov.w	r3, #264	; 0x108
   21fda:	4a21      	ldr	r2, [pc, #132]	; (22060 <nrfx_clock_start+0x98>)
   21fdc:	f00a f86b 	bl	2c0b6 <printk>
   21fe0:	f44f 7184 	mov.w	r1, #264	; 0x108
   21fe4:	481e      	ldr	r0, [pc, #120]	; (22060 <nrfx_clock_start+0x98>)
   21fe6:	f00a fa83 	bl	2c4f0 <assert_post_action>
    switch (domain)
   21fea:	b174      	cbz	r4, 2200a <nrfx_clock_start+0x42>
   21fec:	2c01      	cmp	r4, #1
   21fee:	d027      	beq.n	22040 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   21ff0:	f44f 739d 	mov.w	r3, #314	; 0x13a
   21ff4:	4a1a      	ldr	r2, [pc, #104]	; (22060 <nrfx_clock_start+0x98>)
   21ff6:	491b      	ldr	r1, [pc, #108]	; (22064 <nrfx_clock_start+0x9c>)
   21ff8:	4818      	ldr	r0, [pc, #96]	; (2205c <nrfx_clock_start+0x94>)
   21ffa:	f00a f85c 	bl	2c0b6 <printk>
   21ffe:	f44f 719d 	mov.w	r1, #314	; 0x13a
   22002:	4817      	ldr	r0, [pc, #92]	; (22060 <nrfx_clock_start+0x98>)
   22004:	f00a fa74 	bl	2c4f0 <assert_post_action>
            break;
    }
}
   22008:	e016      	b.n	22038 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   2200a:	4620      	mov	r0, r4
   2200c:	f10d 0107 	add.w	r1, sp, #7
   22010:	f7ff ff66 	bl	21ee0 <nrf_clock_is_running.constprop.0>
   22014:	4b14      	ldr	r3, [pc, #80]	; (22068 <nrfx_clock_start+0xa0>)
   22016:	b188      	cbz	r0, 2203c <nrfx_clock_start+0x74>
   22018:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2201c:	2a02      	cmp	r2, #2
   2201e:	d10d      	bne.n	2203c <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
   22020:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22024:	2200      	movs	r2, #0
   22026:	4b11      	ldr	r3, [pc, #68]	; (2206c <nrfx_clock_start+0xa4>)
   22028:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   2202a:	2202      	movs	r2, #2
   2202c:	681b      	ldr	r3, [r3, #0]
   2202e:	4b0e      	ldr	r3, [pc, #56]	; (22068 <nrfx_clock_start+0xa0>)
   22030:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22034:	2201      	movs	r2, #1
   22036:	609a      	str	r2, [r3, #8]
}
   22038:	b002      	add	sp, #8
   2203a:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   2203c:	2201      	movs	r2, #1
   2203e:	e7ef      	b.n	22020 <nrfx_clock_start+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22040:	2200      	movs	r2, #0
   22042:	4b0b      	ldr	r3, [pc, #44]	; (22070 <nrfx_clock_start+0xa8>)
   22044:	601a      	str	r2, [r3, #0]
   22046:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   22048:	4b07      	ldr	r3, [pc, #28]	; (22068 <nrfx_clock_start+0xa0>)
   2204a:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2204e:	601c      	str	r4, [r3, #0]
}
   22050:	e7f2      	b.n	22038 <nrfx_clock_start+0x70>
   22052:	bf00      	nop
   22054:	20021dac 	.word	0x20021dac
   22058:	00032819 	.word	0x00032819
   2205c:	000300ff 	.word	0x000300ff
   22060:	000327ce 	.word	0x000327ce
   22064:	00032bdb 	.word	0x00032bdb
   22068:	40005000 	.word	0x40005000
   2206c:	40005104 	.word	0x40005104
   22070:	40005100 	.word	0x40005100

00022074 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   22074:	4b2d      	ldr	r3, [pc, #180]	; (2212c <nrfx_clock_stop+0xb8>)
{
   22076:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   22078:	791b      	ldrb	r3, [r3, #4]
{
   2207a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2207c:	b95b      	cbnz	r3, 22096 <nrfx_clock_stop+0x22>
   2207e:	492c      	ldr	r1, [pc, #176]	; (22130 <nrfx_clock_stop+0xbc>)
   22080:	482c      	ldr	r0, [pc, #176]	; (22134 <nrfx_clock_stop+0xc0>)
   22082:	f240 1341 	movw	r3, #321	; 0x141
   22086:	4a2c      	ldr	r2, [pc, #176]	; (22138 <nrfx_clock_stop+0xc4>)
   22088:	f00a f815 	bl	2c0b6 <printk>
   2208c:	f240 1141 	movw	r1, #321	; 0x141
   22090:	4829      	ldr	r0, [pc, #164]	; (22138 <nrfx_clock_stop+0xc4>)
   22092:	f00a fa2d 	bl	2c4f0 <assert_post_action>
    switch (domain)
   22096:	b17c      	cbz	r4, 220b8 <nrfx_clock_stop+0x44>
   22098:	2c01      	cmp	r4, #1
   2209a:	d027      	beq.n	220ec <nrfx_clock_stop+0x78>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   2209c:	4927      	ldr	r1, [pc, #156]	; (2213c <nrfx_clock_stop+0xc8>)
   2209e:	4825      	ldr	r0, [pc, #148]	; (22134 <nrfx_clock_stop+0xc0>)
   220a0:	f240 135d 	movw	r3, #349	; 0x15d
   220a4:	4a24      	ldr	r2, [pc, #144]	; (22138 <nrfx_clock_stop+0xc4>)
   220a6:	f00a f806 	bl	2c0b6 <printk>
   220aa:	f240 115d 	movw	r1, #349	; 0x15d
   220ae:	4822      	ldr	r0, [pc, #136]	; (22138 <nrfx_clock_stop+0xc4>)
   220b0:	f00a fa1e 	bl	2c4f0 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   220b4:	b002      	add	sp, #8
   220b6:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   220b8:	2202      	movs	r2, #2
   220ba:	4b21      	ldr	r3, [pc, #132]	; (22140 <nrfx_clock_stop+0xcc>)
   220bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   220c0:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   220c2:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   220c6:	f242 7410 	movw	r4, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   220ca:	f503 7382 	add.w	r3, r3, #260	; 0x104
   220ce:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   220d0:	4b1c      	ldr	r3, [pc, #112]	; (22144 <nrfx_clock_stop+0xd0>)
   220d2:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   220d4:	2100      	movs	r1, #0
   220d6:	4608      	mov	r0, r1
   220d8:	f7ff ff02 	bl	21ee0 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   220dc:	2800      	cmp	r0, #0
   220de:	d0e9      	beq.n	220b4 <nrfx_clock_stop+0x40>
   220e0:	2001      	movs	r0, #1
   220e2:	f00c fa4a 	bl	2e57a <nrfx_busy_wait>
   220e6:	3c01      	subs	r4, #1
   220e8:	d1f4      	bne.n	220d4 <nrfx_clock_stop+0x60>
   220ea:	e7e3      	b.n	220b4 <nrfx_clock_stop+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   220ec:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   220ee:	4b14      	ldr	r3, [pc, #80]	; (22140 <nrfx_clock_stop+0xcc>)
   220f0:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   220f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   220f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
   220fc:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   220fe:	4b12      	ldr	r3, [pc, #72]	; (22148 <nrfx_clock_stop+0xd4>)
   22100:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   22102:	f88d 4007 	strb.w	r4, [sp, #7]
   22106:	f242 7410 	movw	r4, #10000	; 0x2710
   2210a:	2001      	movs	r0, #1
   2210c:	f10d 0107 	add.w	r1, sp, #7
   22110:	f7ff fee6 	bl	21ee0 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   22114:	2800      	cmp	r0, #0
   22116:	d0cd      	beq.n	220b4 <nrfx_clock_stop+0x40>
   22118:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2211c:	2801      	cmp	r0, #1
   2211e:	d1c9      	bne.n	220b4 <nrfx_clock_stop+0x40>
   22120:	f00c fa2b 	bl	2e57a <nrfx_busy_wait>
   22124:	3c01      	subs	r4, #1
   22126:	d1f0      	bne.n	2210a <nrfx_clock_stop+0x96>
   22128:	e7c4      	b.n	220b4 <nrfx_clock_stop+0x40>
   2212a:	bf00      	nop
   2212c:	20021dac 	.word	0x20021dac
   22130:	00032819 	.word	0x00032819
   22134:	000300ff 	.word	0x000300ff
   22138:	000327ce 	.word	0x000327ce
   2213c:	00032bdb 	.word	0x00032bdb
   22140:	40005000 	.word	0x40005000
   22144:	4000500c 	.word	0x4000500c
   22148:	40005004 	.word	0x40005004

0002214c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2214c:	4b15      	ldr	r3, [pc, #84]	; (221a4 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   2214e:	b507      	push	{r0, r1, r2, lr}
   22150:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   22152:	b14a      	cbz	r2, 22168 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22154:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   22156:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22158:	6018      	str	r0, [r3, #0]
   2215a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2215c:	4b12      	ldr	r3, [pc, #72]	; (221a8 <nrfx_power_clock_irq_handler+0x5c>)
   2215e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   22162:	4b12      	ldr	r3, [pc, #72]	; (221ac <nrfx_power_clock_irq_handler+0x60>)
   22164:	681b      	ldr	r3, [r3, #0]
   22166:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   22168:	4b11      	ldr	r3, [pc, #68]	; (221b0 <nrfx_power_clock_irq_handler+0x64>)
   2216a:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   2216c:	b17a      	cbz	r2, 2218e <nrfx_power_clock_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2216e:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   22170:	f10d 0107 	add.w	r1, sp, #7
   22174:	6018      	str	r0, [r3, #0]
   22176:	681b      	ldr	r3, [r3, #0]
   22178:	f7ff feb2 	bl	21ee0 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   2217c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   22180:	2202      	movs	r2, #2
   22182:	2901      	cmp	r1, #1
   22184:	4b08      	ldr	r3, [pc, #32]	; (221a8 <nrfx_power_clock_irq_handler+0x5c>)
   22186:	d105      	bne.n	22194 <nrfx_power_clock_irq_handler+0x48>
    p_reg->LFCLKSRC = (uint32_t)(source);
   22188:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2218c:	6099      	str	r1, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   2218e:	b003      	add	sp, #12
   22190:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
   22194:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   22198:	4b04      	ldr	r3, [pc, #16]	; (221ac <nrfx_power_clock_irq_handler+0x60>)
   2219a:	2001      	movs	r0, #1
   2219c:	681b      	ldr	r3, [r3, #0]
   2219e:	4798      	blx	r3
}
   221a0:	e7f5      	b.n	2218e <nrfx_power_clock_irq_handler+0x42>
   221a2:	bf00      	nop
   221a4:	40005100 	.word	0x40005100
   221a8:	40005000 	.word	0x40005000
   221ac:	20021dac 	.word	0x20021dac
   221b0:	40005104 	.word	0x40005104

000221b4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   221b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   221b6:	4b10      	ldr	r3, [pc, #64]	; (221f8 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   221b8:	4f10      	ldr	r7, [pc, #64]	; (221fc <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   221ba:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   221be:	3001      	adds	r0, #1
   221c0:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   221c4:	42ae      	cmp	r6, r5
   221c6:	d800      	bhi.n	221ca <z_sys_init_run_level+0x16>
		}
	}
}
   221c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   221ca:	e9d5 3400 	ldrd	r3, r4, [r5]
   221ce:	4620      	mov	r0, r4
   221d0:	4798      	blx	r3
   221d2:	b170      	cbz	r0, 221f2 <z_sys_init_run_level+0x3e>
   221d4:	b16c      	cbz	r4, 221f2 <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   221d6:	2301      	movs	r3, #1
				(dev - __device_start));
   221d8:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   221da:	4a09      	ldr	r2, [pc, #36]	; (22200 <z_sys_init_run_level+0x4c>)
   221dc:	1124      	asrs	r4, r4, #4
   221de:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   221e0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   221e4:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   221e8:	fa03 f404 	lsl.w	r4, r3, r4
   221ec:	4304      	orrs	r4, r0
   221ee:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   221f2:	3508      	adds	r5, #8
   221f4:	e7e6      	b.n	221c4 <z_sys_init_run_level+0x10>
   221f6:	bf00      	nop
   221f8:	0002f56c 	.word	0x0002f56c
   221fc:	20020a60 	.word	0x20020a60
   22200:	20020ae0 	.word	0x20020ae0

00022204 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   22204:	4b08      	ldr	r3, [pc, #32]	; (22228 <z_device_ready+0x24>)
   22206:	1ac0      	subs	r0, r0, r3
   22208:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   2220a:	4b08      	ldr	r3, [pc, #32]	; (2222c <z_device_ready+0x28>)
   2220c:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   2220e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   22212:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   22214:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   22218:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   2221c:	4210      	tst	r0, r2
}
   2221e:	bf0c      	ite	eq
   22220:	4618      	moveq	r0, r3
   22222:	2000      	movne	r0, #0
   22224:	4770      	bx	lr
   22226:	bf00      	nop
   22228:	20020a60 	.word	0x20020a60
   2222c:	20020ae0 	.word	0x20020ae0

00022230 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   22230:	4911      	ldr	r1, [pc, #68]	; (22278 <z_impl_device_get_binding+0x48>)
{
   22232:	b570      	push	{r4, r5, r6, lr}
   22234:	4605      	mov	r5, r0
   22236:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   22238:	4c10      	ldr	r4, [pc, #64]	; (2227c <z_impl_device_get_binding+0x4c>)
   2223a:	428c      	cmp	r4, r1
   2223c:	d104      	bne.n	22248 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   2223e:	4c0f      	ldr	r4, [pc, #60]	; (2227c <z_impl_device_get_binding+0x4c>)
   22240:	42b4      	cmp	r4, r6
   22242:	d10a      	bne.n	2225a <z_impl_device_get_binding+0x2a>
	return NULL;
   22244:	2400      	movs	r4, #0
   22246:	e014      	b.n	22272 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   22248:	4620      	mov	r0, r4
   2224a:	f7ff ffdb 	bl	22204 <z_device_ready>
   2224e:	b110      	cbz	r0, 22256 <z_impl_device_get_binding+0x26>
   22250:	6823      	ldr	r3, [r4, #0]
   22252:	42ab      	cmp	r3, r5
   22254:	d00d      	beq.n	22272 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   22256:	3410      	adds	r4, #16
   22258:	e7ef      	b.n	2223a <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   2225a:	4620      	mov	r0, r4
   2225c:	f7ff ffd2 	bl	22204 <z_device_ready>
   22260:	b908      	cbnz	r0, 22266 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   22262:	3410      	adds	r4, #16
   22264:	e7ec      	b.n	22240 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   22266:	4628      	mov	r0, r5
   22268:	6821      	ldr	r1, [r4, #0]
   2226a:	f7ea fce5 	bl	cc38 <strcmp>
   2226e:	2800      	cmp	r0, #0
   22270:	d1f7      	bne.n	22262 <z_impl_device_get_binding+0x32>
}
   22272:	4620      	mov	r0, r4
   22274:	bd70      	pop	{r4, r5, r6, pc}
   22276:	bf00      	nop
   22278:	20020ae0 	.word	0x20020ae0
   2227c:	20020a60 	.word	0x20020a60

00022280 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   22280:	4b01      	ldr	r3, [pc, #4]	; (22288 <z_impl_z_errno+0x8>)
   22282:	6898      	ldr	r0, [r3, #8]
}
   22284:	3064      	adds	r0, #100	; 0x64
   22286:	4770      	bx	lr
   22288:	20021dbc 	.word	0x20021dbc

0002228c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2228c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22290:	4605      	mov	r5, r0
   22292:	460f      	mov	r7, r1
	__asm__ volatile(
   22294:	f04f 0320 	mov.w	r3, #32
   22298:	f3ef 8811 	mrs	r8, BASEPRI
   2229c:	f383 8811 	msr	BASEPRI, r3
   222a0:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   222a4:	f002 f94a 	bl	2453c <z_impl_k_current_get>
   222a8:	4c2a      	ldr	r4, [pc, #168]	; (22354 <z_fatal_error+0xc8>)
   222aa:	4b2b      	ldr	r3, [pc, #172]	; (22358 <z_fatal_error+0xcc>)
   222ac:	2d04      	cmp	r5, #4
   222ae:	eba4 0403 	sub.w	r4, r4, r3
   222b2:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   222b6:	bf98      	it	ls
   222b8:	4a28      	ldrls	r2, [pc, #160]	; (2235c <z_fatal_error+0xd0>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   222ba:	ea4f 1484 	mov.w	r4, r4, lsl #6
   222be:	f044 0301 	orr.w	r3, r4, #1
   222c2:	4606      	mov	r6, r0
	switch (reason) {
   222c4:	bf94      	ite	ls
   222c6:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   222ca:	4a25      	ldrhi	r2, [pc, #148]	; (22360 <z_fatal_error+0xd4>)
   222cc:	f8ad 3000 	strh.w	r3, [sp]
   222d0:	4629      	mov	r1, r5
   222d2:	2300      	movs	r3, #0
   222d4:	4823      	ldr	r0, [pc, #140]	; (22364 <z_fatal_error+0xd8>)
   222d6:	f00a f97a 	bl	2c5ce <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   222da:	b147      	cbz	r7, 222ee <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   222dc:	69fb      	ldr	r3, [r7, #28]
   222de:	f3c3 0308 	ubfx	r3, r3, #0, #9
   222e2:	b123      	cbz	r3, 222ee <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   222e4:	4820      	ldr	r0, [pc, #128]	; (22368 <z_fatal_error+0xdc>)
   222e6:	f044 0101 	orr.w	r1, r4, #1
   222ea:	f00a f931 	bl	2c550 <log_0>
	const char *thread_name = k_thread_name_get(thread);
   222ee:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   222f0:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   222f4:	f00c fa0e 	bl	2e714 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   222f8:	b348      	cbz	r0, 2234e <z_fatal_error+0xc2>
   222fa:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   222fc:	4b1b      	ldr	r3, [pc, #108]	; (2236c <z_fatal_error+0xe0>)
   222fe:	2a00      	cmp	r2, #0
   22300:	bf08      	it	eq
   22302:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   22304:	f7f0 fe86 	bl	13014 <log_strdup>
   22308:	4623      	mov	r3, r4
   2230a:	4602      	mov	r2, r0
   2230c:	4631      	mov	r1, r6
   2230e:	4818      	ldr	r0, [pc, #96]	; (22370 <z_fatal_error+0xe4>)
   22310:	f00a f944 	bl	2c59c <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   22314:	4639      	mov	r1, r7
   22316:	4628      	mov	r0, r5
   22318:	f7f7 f88c 	bl	19434 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   2231c:	2d04      	cmp	r5, #4
   2231e:	d10c      	bne.n	2233a <z_fatal_error+0xae>
   22320:	4914      	ldr	r1, [pc, #80]	; (22374 <z_fatal_error+0xe8>)
   22322:	238e      	movs	r3, #142	; 0x8e
   22324:	4a14      	ldr	r2, [pc, #80]	; (22378 <z_fatal_error+0xec>)
   22326:	4815      	ldr	r0, [pc, #84]	; (2237c <z_fatal_error+0xf0>)
   22328:	f009 fec5 	bl	2c0b6 <printk>
   2232c:	4814      	ldr	r0, [pc, #80]	; (22380 <z_fatal_error+0xf4>)
   2232e:	f009 fec2 	bl	2c0b6 <printk>
   22332:	218e      	movs	r1, #142	; 0x8e
   22334:	4810      	ldr	r0, [pc, #64]	; (22378 <z_fatal_error+0xec>)
   22336:	f00a f8db 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   2233a:	f388 8811 	msr	BASEPRI, r8
   2233e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   22342:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   22344:	b002      	add	sp, #8
   22346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2234a:	f7f2 bdc7 	b.w	14edc <z_impl_k_thread_abort>
		thread_name = "unknown";
   2234e:	4807      	ldr	r0, [pc, #28]	; (2236c <z_fatal_error+0xe0>)
   22350:	e7d8      	b.n	22304 <z_fatal_error+0x78>
   22352:	bf00      	nop
   22354:	0002ecfc 	.word	0x0002ecfc
   22358:	0002ec7c 	.word	0x0002ec7c
   2235c:	0002f584 	.word	0x0002f584
   22360:	00032837 	.word	0x00032837
   22364:	0003284d 	.word	0x0003284d
   22368:	00032875 	.word	0x00032875
   2236c:	00032845 	.word	0x00032845
   22370:	00032896 	.word	0x00032896
   22374:	000328d0 	.word	0x000328d0
   22378:	000328ae 	.word	0x000328ae
   2237c:	000300ff 	.word	0x000300ff
   22380:	000328ed 	.word	0x000328ed

00022384 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   22384:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   22386:	4d0b      	ldr	r5, [pc, #44]	; (223b4 <idle+0x30>)
	__asm__ volatile(
   22388:	f04f 0220 	mov.w	r2, #32
   2238c:	f3ef 8311 	mrs	r3, BASEPRI
   22390:	f382 8811 	msr	BASEPRI, r2
   22394:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   22398:	f002 fd3c 	bl	24e14 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   2239c:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
   2239e:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   223a0:	2802      	cmp	r0, #2
   223a2:	bfd8      	it	le
   223a4:	4608      	movle	r0, r1
   223a6:	f002 fd7d 	bl	24ea4 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   223aa:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   223ac:	f7f2 fa1a 	bl	147e4 <arch_cpu_idle>
}
   223b0:	e7ea      	b.n	22388 <idle+0x4>
   223b2:	bf00      	nop
   223b4:	20021dbc 	.word	0x20021dbc

000223b8 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   223b8:	4802      	ldr	r0, [pc, #8]	; (223c4 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   223ba:	4a03      	ldr	r2, [pc, #12]	; (223c8 <z_bss_zero+0x10>)
   223bc:	2100      	movs	r1, #0
   223be:	1a12      	subs	r2, r2, r0
   223c0:	f003 be5c 	b.w	2607c <memset>
   223c4:	20020cd8 	.word	0x20020cd8
   223c8:	20026410 	.word	0x20026410

000223cc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   223cc:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   223ce:	4806      	ldr	r0, [pc, #24]	; (223e8 <z_data_copy+0x1c>)
   223d0:	4a06      	ldr	r2, [pc, #24]	; (223ec <z_data_copy+0x20>)
   223d2:	4907      	ldr	r1, [pc, #28]	; (223f0 <z_data_copy+0x24>)
   223d4:	1a12      	subs	r2, r2, r0
   223d6:	f7ea fbb9 	bl	cb4c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   223da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   223de:	4a05      	ldr	r2, [pc, #20]	; (223f4 <z_data_copy+0x28>)
   223e0:	4905      	ldr	r1, [pc, #20]	; (223f8 <z_data_copy+0x2c>)
   223e2:	4806      	ldr	r0, [pc, #24]	; (223fc <z_data_copy+0x30>)
   223e4:	f7ea bbb2 	b.w	cb4c <memcpy>
   223e8:	20020000 	.word	0x20020000
   223ec:	20020cd4 	.word	0x20020cd4
   223f0:	00032fa8 	.word	0x00032fa8
   223f4:	00000000 	.word	0x00000000
   223f8:	00032fa8 	.word	0x00032fa8
   223fc:	20020000 	.word	0x20020000

00022400 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   22400:	2201      	movs	r2, #1
{
   22402:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   22404:	4b0b      	ldr	r3, [pc, #44]	; (22434 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   22406:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   22408:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2240a:	f7ff fed3 	bl	221b4 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   2240e:	4a0a      	ldr	r2, [pc, #40]	; (22438 <bg_thread_main+0x38>)
   22410:	490a      	ldr	r1, [pc, #40]	; (2243c <bg_thread_main+0x3c>)
   22412:	480b      	ldr	r0, [pc, #44]	; (22440 <bg_thread_main+0x40>)
   22414:	f009 fe4f 	bl	2c0b6 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   22418:	2003      	movs	r0, #3
   2241a:	f7ff fecb 	bl	221b4 <z_sys_init_run_level>

	z_init_static_threads();
   2241e:	f002 fa23 	bl	24868 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   22422:	f7ef fbf5 	bl	11c10 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   22426:	4a07      	ldr	r2, [pc, #28]	; (22444 <bg_thread_main+0x44>)
   22428:	7b13      	ldrb	r3, [r2, #12]
   2242a:	f023 0301 	bic.w	r3, r3, #1
   2242e:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   22430:	bd08      	pop	{r3, pc}
   22432:	bf00      	nop
   22434:	2002627d 	.word	0x2002627d
   22438:	0003072e 	.word	0x0003072e
   2243c:	0003296c 	.word	0x0003296c
   22440:	00032978 	.word	0x00032978
   22444:	20021280 	.word	0x20021280

00022448 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   22448:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   2244c:	b0b9      	sub	sp, #228	; 0xe4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   2244e:	f7f0 fd1f 	bl	12e90 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   22452:	4b34      	ldr	r3, [pc, #208]	; (22524 <z_cstart+0xdc>)
	uint32_t msp =
   22454:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   22458:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   2245c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22460:	2400      	movs	r4, #0
   22462:	23e0      	movs	r3, #224	; 0xe0
   22464:	4d30      	ldr	r5, [pc, #192]	; (22528 <z_cstart+0xe0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   22466:	f04f 0b01 	mov.w	fp, #1
   2246a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   2246e:	77ec      	strb	r4, [r5, #31]
   22470:	762c      	strb	r4, [r5, #24]
   22472:	766c      	strb	r4, [r5, #25]
   22474:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   22476:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   22478:	4e2c      	ldr	r6, [pc, #176]	; (2252c <z_cstart+0xe4>)
   2247a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2247e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   22480:	f7f2 fcf4 	bl	14e6c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   22484:	f7f2 f9a8 	bl	147d8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   22488:	f04f 33ff 	mov.w	r3, #4294967295
   2248c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2248e:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   22490:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   22494:	4d26      	ldr	r5, [pc, #152]	; (22530 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   22496:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   2249a:	ab06      	add	r3, sp, #24
   2249c:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2249e:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   224a0:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   224a4:	f7ff fe86 	bl	221b4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   224a8:	2001      	movs	r0, #1
   224aa:	f7ff fe83 	bl	221b4 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   224ae:	f8df a098 	ldr.w	sl, [pc, #152]	; 22548 <z_cstart+0x100>
	z_sched_init();
   224b2:	f001 feb9 	bl	24228 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   224b6:	4b1f      	ldr	r3, [pc, #124]	; (22534 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   224b8:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   224ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   224be:	491e      	ldr	r1, [pc, #120]	; (22538 <z_cstart+0xf0>)
   224c0:	9305      	str	r3, [sp, #20]
   224c2:	4630      	mov	r0, r6
   224c4:	4653      	mov	r3, sl
   224c6:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   224ca:	e9cd 4401 	strd	r4, r4, [sp, #4]
   224ce:	9400      	str	r4, [sp, #0]
   224d0:	f002 f920 	bl	24714 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   224d4:	7b73      	ldrb	r3, [r6, #13]
   224d6:	4680      	mov	r8, r0
   224d8:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   224dc:	4630      	mov	r0, r6
   224de:	7373      	strb	r3, [r6, #13]
   224e0:	f001 f9c4 	bl	2386c <z_ready_thread>
	z_setup_new_thread(thread, stack,
   224e4:	230f      	movs	r3, #15
   224e6:	4f15      	ldr	r7, [pc, #84]	; (2253c <z_cstart+0xf4>)
   224e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   224ec:	e9cd 4302 	strd	r4, r3, [sp, #8]
   224f0:	4913      	ldr	r1, [pc, #76]	; (22540 <z_cstart+0xf8>)
   224f2:	4b14      	ldr	r3, [pc, #80]	; (22544 <z_cstart+0xfc>)
   224f4:	4638      	mov	r0, r7
   224f6:	e9cd b404 	strd	fp, r4, [sp, #16]
   224fa:	e9cd 4400 	strd	r4, r4, [sp]
   224fe:	f002 f909 	bl	24714 <z_setup_new_thread>
   22502:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   22504:	4652      	mov	r2, sl
   22506:	f023 0304 	bic.w	r3, r3, #4
   2250a:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   2250c:	f105 0318 	add.w	r3, r5, #24
   22510:	4641      	mov	r1, r8
   22512:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   22514:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   22518:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   2251a:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   2251c:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   22520:	f7f2 f934 	bl	1478c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   22524:	20029450 	.word	0x20029450
   22528:	e000ed00 	.word	0xe000ed00
   2252c:	20021280 	.word	0x20021280
   22530:	20021dbc 	.word	0x20021dbc
   22534:	0003299f 	.word	0x0003299f
   22538:	20028310 	.word	0x20028310
   2253c:	200211b8 	.word	0x200211b8
   22540:	20029310 	.word	0x20029310
   22544:	00022385 	.word	0x00022385
   22548:	00022401 	.word	0x00022401

0002254c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   2254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   2254e:	4d0f      	ldr	r5, [pc, #60]	; (2258c <statics_init+0x40>)
   22550:	4c0f      	ldr	r4, [pc, #60]	; (22590 <statics_init+0x44>)
   22552:	462f      	mov	r7, r5
   22554:	4e0f      	ldr	r6, [pc, #60]	; (22594 <statics_init+0x48>)
   22556:	42ac      	cmp	r4, r5
   22558:	d90c      	bls.n	22574 <statics_init+0x28>
   2255a:	490f      	ldr	r1, [pc, #60]	; (22598 <statics_init+0x4c>)
   2255c:	2315      	movs	r3, #21
   2255e:	4632      	mov	r2, r6
   22560:	480e      	ldr	r0, [pc, #56]	; (2259c <statics_init+0x50>)
   22562:	f009 fda8 	bl	2c0b6 <printk>
   22566:	480e      	ldr	r0, [pc, #56]	; (225a0 <statics_init+0x54>)
   22568:	f009 fda5 	bl	2c0b6 <printk>
   2256c:	2115      	movs	r1, #21
   2256e:	4630      	mov	r0, r6
   22570:	f009 ffbe 	bl	2c4f0 <assert_post_action>
   22574:	42bc      	cmp	r4, r7
   22576:	d301      	bcc.n	2257c <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   22578:	2000      	movs	r0, #0
   2257a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   2257c:	4620      	mov	r0, r4
   2257e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   22582:	f00b fffe 	bl	2e582 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   22586:	3418      	adds	r4, #24
   22588:	e7e5      	b.n	22556 <statics_init+0xa>
   2258a:	bf00      	nop
   2258c:	20020b68 	.word	0x20020b68
   22590:	20020b50 	.word	0x20020b50
   22594:	000329a7 	.word	0x000329a7
   22598:	000329c9 	.word	0x000329c9
   2259c:	000300ff 	.word	0x000300ff
   225a0:	000307aa 	.word	0x000307aa

000225a4 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   225a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   225a8:	4606      	mov	r6, r0
   225aa:	b087      	sub	sp, #28
   225ac:	468a      	mov	sl, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   225ae:	4610      	mov	r0, r2
   225b0:	4619      	mov	r1, r3
{
   225b2:	4690      	mov	r8, r2
   225b4:	4699      	mov	r9, r3
	int64_t now, end = z_timeout_end_calc(timeout);
   225b6:	f00c f919 	bl	2e7ec <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   225ba:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   225be:	e9cd 0104 	strd	r0, r1, [sp, #16]
   225c2:	f04f 0320 	mov.w	r3, #32
   225c6:	f3ef 8511 	mrs	r5, BASEPRI
   225ca:	f383 8811 	msr	BASEPRI, r3
   225ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   225d2:	4620      	mov	r0, r4
   225d4:	f002 f9d8 	bl	24988 <z_spin_lock_valid>
   225d8:	b968      	cbnz	r0, 225f6 <k_heap_alloc+0x52>
   225da:	235c      	movs	r3, #92	; 0x5c
   225dc:	4a3f      	ldr	r2, [pc, #252]	; (226dc <k_heap_alloc+0x138>)
   225de:	4940      	ldr	r1, [pc, #256]	; (226e0 <k_heap_alloc+0x13c>)
   225e0:	4840      	ldr	r0, [pc, #256]	; (226e4 <k_heap_alloc+0x140>)
   225e2:	f009 fd68 	bl	2c0b6 <printk>
   225e6:	4621      	mov	r1, r4
   225e8:	483f      	ldr	r0, [pc, #252]	; (226e8 <k_heap_alloc+0x144>)
   225ea:	f009 fd64 	bl	2c0b6 <printk>
   225ee:	215c      	movs	r1, #92	; 0x5c
   225f0:	483a      	ldr	r0, [pc, #232]	; (226dc <k_heap_alloc+0x138>)
   225f2:	f009 ff7d 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   225f6:	4620      	mov	r0, r4
   225f8:	f002 f9e4 	bl	249c4 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   225fc:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   22600:	b17b      	cbz	r3, 22622 <k_heap_alloc+0x7e>
   22602:	ea58 0309 	orrs.w	r3, r8, r9
   22606:	d00c      	beq.n	22622 <k_heap_alloc+0x7e>
   22608:	4938      	ldr	r1, [pc, #224]	; (226ec <k_heap_alloc+0x148>)
   2260a:	2323      	movs	r3, #35	; 0x23
   2260c:	4a38      	ldr	r2, [pc, #224]	; (226f0 <k_heap_alloc+0x14c>)
   2260e:	4835      	ldr	r0, [pc, #212]	; (226e4 <k_heap_alloc+0x140>)
   22610:	f009 fd51 	bl	2c0b6 <printk>
   22614:	4837      	ldr	r0, [pc, #220]	; (226f4 <k_heap_alloc+0x150>)
   22616:	f009 fd4e 	bl	2c0b6 <printk>
   2261a:	2123      	movs	r1, #35	; 0x23
   2261c:	4834      	ldr	r0, [pc, #208]	; (226f0 <k_heap_alloc+0x14c>)
   2261e:	f009 ff67 	bl	2c4f0 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22622:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 226dc <k_heap_alloc+0x138>
   22626:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 226e0 <k_heap_alloc+0x13c>
   2262a:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 226e4 <k_heap_alloc+0x140>

	while (ret == NULL) {
		ret = sys_heap_alloc(&h->heap, bytes);
   2262e:	4651      	mov	r1, sl
   22630:	4630      	mov	r0, r6
   22632:	f009 ff2e 	bl	2c492 <sys_heap_alloc>
   22636:	4607      	mov	r7, r0

		now = z_tick_get();
   22638:	f002 fd4e 	bl	250d8 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   2263c:	b1cf      	cbz	r7, 22672 <k_heap_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2263e:	4620      	mov	r0, r4
   22640:	f002 f9b0 	bl	249a4 <z_spin_unlock_valid>
   22644:	b968      	cbnz	r0, 22662 <k_heap_alloc+0xbe>
   22646:	2384      	movs	r3, #132	; 0x84
   22648:	4a24      	ldr	r2, [pc, #144]	; (226dc <k_heap_alloc+0x138>)
   2264a:	492b      	ldr	r1, [pc, #172]	; (226f8 <k_heap_alloc+0x154>)
   2264c:	4825      	ldr	r0, [pc, #148]	; (226e4 <k_heap_alloc+0x140>)
   2264e:	f009 fd32 	bl	2c0b6 <printk>
   22652:	4621      	mov	r1, r4
   22654:	4829      	ldr	r0, [pc, #164]	; (226fc <k_heap_alloc+0x158>)
   22656:	f009 fd2e 	bl	2c0b6 <printk>
   2265a:	2184      	movs	r1, #132	; 0x84
   2265c:	481f      	ldr	r0, [pc, #124]	; (226dc <k_heap_alloc+0x138>)
   2265e:	f009 ff47 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   22662:	f385 8811 	msr	BASEPRI, r5
   22666:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2266a:	4638      	mov	r0, r7
   2266c:	b007      	add	sp, #28
   2266e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   22672:	9b04      	ldr	r3, [sp, #16]
   22674:	1a1b      	subs	r3, r3, r0
   22676:	9302      	str	r3, [sp, #8]
   22678:	9b05      	ldr	r3, [sp, #20]
   2267a:	eb63 0301 	sbc.w	r3, r3, r1
   2267e:	9303      	str	r3, [sp, #12]
   22680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22684:	2a01      	cmp	r2, #1
   22686:	f173 0300 	sbcs.w	r3, r3, #0
   2268a:	dbd8      	blt.n	2263e <k_heap_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2268c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22690:	4629      	mov	r1, r5
   22692:	e9cd 2300 	strd	r2, r3, [sp]
   22696:	4620      	mov	r0, r4
   22698:	f106 020c 	add.w	r2, r6, #12
   2269c:	f001 fc78 	bl	23f90 <z_pend_curr>
	__asm__ volatile(
   226a0:	f04f 0320 	mov.w	r3, #32
   226a4:	f3ef 8511 	mrs	r5, BASEPRI
   226a8:	f383 8811 	msr	BASEPRI, r3
   226ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   226b0:	4620      	mov	r0, r4
   226b2:	f002 f969 	bl	24988 <z_spin_lock_valid>
   226b6:	b968      	cbnz	r0, 226d4 <k_heap_alloc+0x130>
   226b8:	235c      	movs	r3, #92	; 0x5c
   226ba:	4642      	mov	r2, r8
   226bc:	4649      	mov	r1, r9
   226be:	4658      	mov	r0, fp
   226c0:	f009 fcf9 	bl	2c0b6 <printk>
   226c4:	4621      	mov	r1, r4
   226c6:	4808      	ldr	r0, [pc, #32]	; (226e8 <k_heap_alloc+0x144>)
   226c8:	f009 fcf5 	bl	2c0b6 <printk>
   226cc:	215c      	movs	r1, #92	; 0x5c
   226ce:	4640      	mov	r0, r8
   226d0:	f009 ff0e 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   226d4:	4620      	mov	r0, r4
   226d6:	f002 f975 	bl	249c4 <z_spin_lock_set_owner>
	return k;
   226da:	e7a8      	b.n	2262e <k_heap_alloc+0x8a>
   226dc:	000301cf 	.word	0x000301cf
   226e0:	00030221 	.word	0x00030221
   226e4:	000300ff 	.word	0x000300ff
   226e8:	00030236 	.word	0x00030236
   226ec:	000329df 	.word	0x000329df
   226f0:	000329a7 	.word	0x000329a7
   226f4:	0003072c 	.word	0x0003072c
   226f8:	000301f5 	.word	0x000301f5
   226fc:	0003020c 	.word	0x0003020c

00022700 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   22700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22702:	4605      	mov	r5, r0
   22704:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   22706:	f100 0414 	add.w	r4, r0, #20
   2270a:	f04f 0320 	mov.w	r3, #32
   2270e:	f3ef 8711 	mrs	r7, BASEPRI
   22712:	f383 8811 	msr	BASEPRI, r3
   22716:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2271a:	4620      	mov	r0, r4
   2271c:	f002 f934 	bl	24988 <z_spin_lock_valid>
   22720:	b968      	cbnz	r0, 2273e <k_heap_free+0x3e>
   22722:	235c      	movs	r3, #92	; 0x5c
   22724:	4a1a      	ldr	r2, [pc, #104]	; (22790 <k_heap_free+0x90>)
   22726:	491b      	ldr	r1, [pc, #108]	; (22794 <k_heap_free+0x94>)
   22728:	481b      	ldr	r0, [pc, #108]	; (22798 <k_heap_free+0x98>)
   2272a:	f009 fcc4 	bl	2c0b6 <printk>
   2272e:	4621      	mov	r1, r4
   22730:	481a      	ldr	r0, [pc, #104]	; (2279c <k_heap_free+0x9c>)
   22732:	f009 fcc0 	bl	2c0b6 <printk>
   22736:	215c      	movs	r1, #92	; 0x5c
   22738:	4815      	ldr	r0, [pc, #84]	; (22790 <k_heap_free+0x90>)
   2273a:	f009 fed9 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   2273e:	4620      	mov	r0, r4
   22740:	f002 f940 	bl	249c4 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   22744:	4628      	mov	r0, r5
   22746:	4631      	mov	r1, r6
   22748:	f7f0 f9e8 	bl	12b1c <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   2274c:	f105 000c 	add.w	r0, r5, #12
   22750:	f00b ffb5 	bl	2e6be <z_unpend_all>
   22754:	b128      	cbz	r0, 22762 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   22756:	4639      	mov	r1, r7
   22758:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2275a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   2275e:	f000 be61 	b.w	23424 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22762:	4620      	mov	r0, r4
   22764:	f002 f91e 	bl	249a4 <z_spin_unlock_valid>
   22768:	b968      	cbnz	r0, 22786 <k_heap_free+0x86>
   2276a:	2384      	movs	r3, #132	; 0x84
   2276c:	4a08      	ldr	r2, [pc, #32]	; (22790 <k_heap_free+0x90>)
   2276e:	490c      	ldr	r1, [pc, #48]	; (227a0 <k_heap_free+0xa0>)
   22770:	4809      	ldr	r0, [pc, #36]	; (22798 <k_heap_free+0x98>)
   22772:	f009 fca0 	bl	2c0b6 <printk>
   22776:	4621      	mov	r1, r4
   22778:	480a      	ldr	r0, [pc, #40]	; (227a4 <k_heap_free+0xa4>)
   2277a:	f009 fc9c 	bl	2c0b6 <printk>
   2277e:	2184      	movs	r1, #132	; 0x84
   22780:	4803      	ldr	r0, [pc, #12]	; (22790 <k_heap_free+0x90>)
   22782:	f009 feb5 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   22786:	f387 8811 	msr	BASEPRI, r7
   2278a:	f3bf 8f6f 	isb	sy
}
   2278e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22790:	000301cf 	.word	0x000301cf
   22794:	00030221 	.word	0x00030221
   22798:	000300ff 	.word	0x000300ff
   2279c:	00030236 	.word	0x00030236
   227a0:	000301f5 	.word	0x000301f5
   227a4:	0003020c 	.word	0x0003020c

000227a8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   227a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   227ac:	4d16      	ldr	r5, [pc, #88]	; (22808 <init_mem_slab_module+0x60>)
   227ae:	4c17      	ldr	r4, [pc, #92]	; (2280c <init_mem_slab_module+0x64>)
   227b0:	46a8      	mov	r8, r5
   227b2:	4e17      	ldr	r6, [pc, #92]	; (22810 <init_mem_slab_module+0x68>)
   227b4:	42ac      	cmp	r4, r5
   227b6:	d90c      	bls.n	227d2 <init_mem_slab_module+0x2a>
   227b8:	4916      	ldr	r1, [pc, #88]	; (22814 <init_mem_slab_module+0x6c>)
   227ba:	2342      	movs	r3, #66	; 0x42
   227bc:	4632      	mov	r2, r6
   227be:	4816      	ldr	r0, [pc, #88]	; (22818 <init_mem_slab_module+0x70>)
   227c0:	f009 fc79 	bl	2c0b6 <printk>
   227c4:	4815      	ldr	r0, [pc, #84]	; (2281c <init_mem_slab_module+0x74>)
   227c6:	f009 fc76 	bl	2c0b6 <printk>
   227ca:	2142      	movs	r1, #66	; 0x42
   227cc:	4630      	mov	r0, r6
   227ce:	f009 fe8f 	bl	2c4f0 <assert_post_action>
   227d2:	4544      	cmp	r4, r8
   227d4:	d302      	bcc.n	227dc <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   227d6:	2000      	movs	r0, #0
	return rc;
}
   227d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   227dc:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
   227e0:	ea41 0302 	orr.w	r3, r1, r2
   227e4:	f013 0303 	ands.w	r3, r3, #3
   227e8:	d10b      	bne.n	22802 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   227ea:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   227ec:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   227ee:	4283      	cmp	r3, r0
   227f0:	d101      	bne.n	227f6 <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   227f2:	341c      	adds	r4, #28
   227f4:	e7de      	b.n	227b4 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   227f6:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   227f8:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   227fa:	600f      	str	r7, [r1, #0]
		slab->free_list = p;
   227fc:	6161      	str	r1, [r4, #20]
		p += slab->block_size;
   227fe:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   22800:	e7f5      	b.n	227ee <init_mem_slab_module+0x46>
		return -EINVAL;
   22802:	f06f 0015 	mvn.w	r0, #21
	return rc;
   22806:	e7e7      	b.n	227d8 <init_mem_slab_module+0x30>
   22808:	20020b50 	.word	0x20020b50
   2280c:	20020b50 	.word	0x20020b50
   22810:	00032a24 	.word	0x00032a24
   22814:	00032a49 	.word	0x00032a49
   22818:	000300ff 	.word	0x000300ff
   2281c:	000307aa 	.word	0x000307aa

00022820 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   22820:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22824:	4604      	mov	r4, r0
   22826:	460d      	mov	r5, r1
   22828:	4616      	mov	r6, r2
   2282a:	461f      	mov	r7, r3
	__asm__ volatile(
   2282c:	f04f 0320 	mov.w	r3, #32
   22830:	f3ef 8811 	mrs	r8, BASEPRI
   22834:	f383 8811 	msr	BASEPRI, r3
   22838:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2283c:	4826      	ldr	r0, [pc, #152]	; (228d8 <k_mem_slab_alloc+0xb8>)
   2283e:	f002 f8a3 	bl	24988 <z_spin_lock_valid>
   22842:	b968      	cbnz	r0, 22860 <k_mem_slab_alloc+0x40>
   22844:	235c      	movs	r3, #92	; 0x5c
   22846:	4a25      	ldr	r2, [pc, #148]	; (228dc <k_mem_slab_alloc+0xbc>)
   22848:	4925      	ldr	r1, [pc, #148]	; (228e0 <k_mem_slab_alloc+0xc0>)
   2284a:	4826      	ldr	r0, [pc, #152]	; (228e4 <k_mem_slab_alloc+0xc4>)
   2284c:	f009 fc33 	bl	2c0b6 <printk>
   22850:	4921      	ldr	r1, [pc, #132]	; (228d8 <k_mem_slab_alloc+0xb8>)
   22852:	4825      	ldr	r0, [pc, #148]	; (228e8 <k_mem_slab_alloc+0xc8>)
   22854:	f009 fc2f 	bl	2c0b6 <printk>
   22858:	215c      	movs	r1, #92	; 0x5c
   2285a:	4820      	ldr	r0, [pc, #128]	; (228dc <k_mem_slab_alloc+0xbc>)
   2285c:	f009 fe48 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22860:	481d      	ldr	r0, [pc, #116]	; (228d8 <k_mem_slab_alloc+0xb8>)
   22862:	f002 f8af 	bl	249c4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   22866:	6963      	ldr	r3, [r4, #20]
   22868:	b1eb      	cbz	r3, 228a6 <k_mem_slab_alloc+0x86>
		/* take a free block */
		*mem = slab->free_list;
   2286a:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   2286c:	681b      	ldr	r3, [r3, #0]
   2286e:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   22870:	69a3      	ldr	r3, [r4, #24]
   22872:	3301      	adds	r3, #1
   22874:	61a3      	str	r3, [r4, #24]
		result = 0;
   22876:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22878:	4817      	ldr	r0, [pc, #92]	; (228d8 <k_mem_slab_alloc+0xb8>)
   2287a:	f002 f893 	bl	249a4 <z_spin_unlock_valid>
   2287e:	b968      	cbnz	r0, 2289c <k_mem_slab_alloc+0x7c>
   22880:	2384      	movs	r3, #132	; 0x84
   22882:	4a16      	ldr	r2, [pc, #88]	; (228dc <k_mem_slab_alloc+0xbc>)
   22884:	4919      	ldr	r1, [pc, #100]	; (228ec <k_mem_slab_alloc+0xcc>)
   22886:	4817      	ldr	r0, [pc, #92]	; (228e4 <k_mem_slab_alloc+0xc4>)
   22888:	f009 fc15 	bl	2c0b6 <printk>
   2288c:	4912      	ldr	r1, [pc, #72]	; (228d8 <k_mem_slab_alloc+0xb8>)
   2288e:	4818      	ldr	r0, [pc, #96]	; (228f0 <k_mem_slab_alloc+0xd0>)
   22890:	f009 fc11 	bl	2c0b6 <printk>
   22894:	2184      	movs	r1, #132	; 0x84
   22896:	4811      	ldr	r0, [pc, #68]	; (228dc <k_mem_slab_alloc+0xbc>)
   22898:	f009 fe2a 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   2289c:	f388 8811 	msr	BASEPRI, r8
   228a0:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   228a4:	e013      	b.n	228ce <k_mem_slab_alloc+0xae>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   228a6:	ea56 0207 	orrs.w	r2, r6, r7
   228aa:	d103      	bne.n	228b4 <k_mem_slab_alloc+0x94>
		result = -ENOMEM;
   228ac:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   228b0:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   228b2:	e7e1      	b.n	22878 <k_mem_slab_alloc+0x58>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   228b4:	4622      	mov	r2, r4
   228b6:	4641      	mov	r1, r8
   228b8:	e9cd 6700 	strd	r6, r7, [sp]
   228bc:	4806      	ldr	r0, [pc, #24]	; (228d8 <k_mem_slab_alloc+0xb8>)
   228be:	f001 fb67 	bl	23f90 <z_pend_curr>
		if (result == 0) {
   228c2:	4604      	mov	r4, r0
   228c4:	b918      	cbnz	r0, 228ce <k_mem_slab_alloc+0xae>
			*mem = _current->base.swap_data;
   228c6:	4b0b      	ldr	r3, [pc, #44]	; (228f4 <k_mem_slab_alloc+0xd4>)
   228c8:	689b      	ldr	r3, [r3, #8]
   228ca:	695b      	ldr	r3, [r3, #20]
   228cc:	602b      	str	r3, [r5, #0]
}
   228ce:	4620      	mov	r0, r4
   228d0:	b002      	add	sp, #8
   228d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   228d6:	bf00      	nop
   228d8:	20021db4 	.word	0x20021db4
   228dc:	000301cf 	.word	0x000301cf
   228e0:	00030221 	.word	0x00030221
   228e4:	000300ff 	.word	0x000300ff
   228e8:	00030236 	.word	0x00030236
   228ec:	000301f5 	.word	0x000301f5
   228f0:	0003020c 	.word	0x0003020c
   228f4:	20021dbc 	.word	0x20021dbc

000228f8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   228f8:	b570      	push	{r4, r5, r6, lr}
   228fa:	4604      	mov	r4, r0
   228fc:	460d      	mov	r5, r1
	__asm__ volatile(
   228fe:	f04f 0320 	mov.w	r3, #32
   22902:	f3ef 8611 	mrs	r6, BASEPRI
   22906:	f383 8811 	msr	BASEPRI, r3
   2290a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2290e:	4822      	ldr	r0, [pc, #136]	; (22998 <k_mem_slab_free+0xa0>)
   22910:	f002 f83a 	bl	24988 <z_spin_lock_valid>
   22914:	b968      	cbnz	r0, 22932 <k_mem_slab_free+0x3a>
   22916:	235c      	movs	r3, #92	; 0x5c
   22918:	4a20      	ldr	r2, [pc, #128]	; (2299c <k_mem_slab_free+0xa4>)
   2291a:	4921      	ldr	r1, [pc, #132]	; (229a0 <k_mem_slab_free+0xa8>)
   2291c:	4821      	ldr	r0, [pc, #132]	; (229a4 <k_mem_slab_free+0xac>)
   2291e:	f009 fbca 	bl	2c0b6 <printk>
   22922:	491d      	ldr	r1, [pc, #116]	; (22998 <k_mem_slab_free+0xa0>)
   22924:	4820      	ldr	r0, [pc, #128]	; (229a8 <k_mem_slab_free+0xb0>)
   22926:	f009 fbc6 	bl	2c0b6 <printk>
   2292a:	215c      	movs	r1, #92	; 0x5c
   2292c:	481b      	ldr	r0, [pc, #108]	; (2299c <k_mem_slab_free+0xa4>)
   2292e:	f009 fddf 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22932:	4819      	ldr	r0, [pc, #100]	; (22998 <k_mem_slab_free+0xa0>)
   22934:	f002 f846 	bl	249c4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   22938:	4620      	mov	r0, r4
   2293a:	f001 fbef 	bl	2411c <z_unpend_first_thread>

	if (pending_thread != NULL) {
   2293e:	b158      	cbz	r0, 22958 <k_mem_slab_free+0x60>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   22940:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   22942:	682a      	ldr	r2, [r5, #0]
   22944:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   22946:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   22948:	f000 ff90 	bl	2386c <z_ready_thread>
		z_reschedule(&lock, key);
   2294c:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   2294e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   22952:	4811      	ldr	r0, [pc, #68]	; (22998 <k_mem_slab_free+0xa0>)
   22954:	f000 bd66 	b.w	23424 <z_reschedule>
		**(char ***)mem = slab->free_list;
   22958:	682b      	ldr	r3, [r5, #0]
   2295a:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2295c:	480e      	ldr	r0, [pc, #56]	; (22998 <k_mem_slab_free+0xa0>)
   2295e:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   22960:	682b      	ldr	r3, [r5, #0]
   22962:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   22964:	69a3      	ldr	r3, [r4, #24]
   22966:	3b01      	subs	r3, #1
   22968:	61a3      	str	r3, [r4, #24]
   2296a:	f002 f81b 	bl	249a4 <z_spin_unlock_valid>
   2296e:	b968      	cbnz	r0, 2298c <k_mem_slab_free+0x94>
   22970:	2384      	movs	r3, #132	; 0x84
   22972:	4a0a      	ldr	r2, [pc, #40]	; (2299c <k_mem_slab_free+0xa4>)
   22974:	490d      	ldr	r1, [pc, #52]	; (229ac <k_mem_slab_free+0xb4>)
   22976:	480b      	ldr	r0, [pc, #44]	; (229a4 <k_mem_slab_free+0xac>)
   22978:	f009 fb9d 	bl	2c0b6 <printk>
   2297c:	4906      	ldr	r1, [pc, #24]	; (22998 <k_mem_slab_free+0xa0>)
   2297e:	480c      	ldr	r0, [pc, #48]	; (229b0 <k_mem_slab_free+0xb8>)
   22980:	f009 fb99 	bl	2c0b6 <printk>
   22984:	2184      	movs	r1, #132	; 0x84
   22986:	4805      	ldr	r0, [pc, #20]	; (2299c <k_mem_slab_free+0xa4>)
   22988:	f009 fdb2 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   2298c:	f386 8811 	msr	BASEPRI, r6
   22990:	f3bf 8f6f 	isb	sy
}
   22994:	bd70      	pop	{r4, r5, r6, pc}
   22996:	bf00      	nop
   22998:	20021db4 	.word	0x20021db4
   2299c:	000301cf 	.word	0x000301cf
   229a0:	00030221 	.word	0x00030221
   229a4:	000300ff 	.word	0x000300ff
   229a8:	00030236 	.word	0x00030236
   229ac:	000301f5 	.word	0x000301f5
   229b0:	0003020c 	.word	0x0003020c

000229b4 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   229b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   229b8:	4604      	mov	r4, r0
   229ba:	468a      	mov	sl, r1
   229bc:	4690      	mov	r8, r2
   229be:	4699      	mov	r9, r3
   229c0:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   229c4:	b17b      	cbz	r3, 229e6 <z_impl_k_msgq_put+0x32>
   229c6:	ea58 0309 	orrs.w	r3, r8, r9
   229ca:	d00c      	beq.n	229e6 <z_impl_k_msgq_put+0x32>
   229cc:	4940      	ldr	r1, [pc, #256]	; (22ad0 <z_impl_k_msgq_put+0x11c>)
   229ce:	2376      	movs	r3, #118	; 0x76
   229d0:	4a40      	ldr	r2, [pc, #256]	; (22ad4 <z_impl_k_msgq_put+0x120>)
   229d2:	4841      	ldr	r0, [pc, #260]	; (22ad8 <z_impl_k_msgq_put+0x124>)
   229d4:	f009 fb6f 	bl	2c0b6 <printk>
   229d8:	4840      	ldr	r0, [pc, #256]	; (22adc <z_impl_k_msgq_put+0x128>)
   229da:	f009 fb6c 	bl	2c0b6 <printk>
   229de:	2176      	movs	r1, #118	; 0x76
   229e0:	483c      	ldr	r0, [pc, #240]	; (22ad4 <z_impl_k_msgq_put+0x120>)
   229e2:	f009 fd85 	bl	2c4f0 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   229e6:	f104 0508 	add.w	r5, r4, #8
	__asm__ volatile(
   229ea:	f04f 0320 	mov.w	r3, #32
   229ee:	f3ef 8711 	mrs	r7, BASEPRI
   229f2:	f383 8811 	msr	BASEPRI, r3
   229f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   229fa:	4628      	mov	r0, r5
   229fc:	f001 ffc4 	bl	24988 <z_spin_lock_valid>
   22a00:	b968      	cbnz	r0, 22a1e <z_impl_k_msgq_put+0x6a>
   22a02:	235c      	movs	r3, #92	; 0x5c
   22a04:	4a36      	ldr	r2, [pc, #216]	; (22ae0 <z_impl_k_msgq_put+0x12c>)
   22a06:	4937      	ldr	r1, [pc, #220]	; (22ae4 <z_impl_k_msgq_put+0x130>)
   22a08:	4833      	ldr	r0, [pc, #204]	; (22ad8 <z_impl_k_msgq_put+0x124>)
   22a0a:	f009 fb54 	bl	2c0b6 <printk>
   22a0e:	4629      	mov	r1, r5
   22a10:	4835      	ldr	r0, [pc, #212]	; (22ae8 <z_impl_k_msgq_put+0x134>)
   22a12:	f009 fb50 	bl	2c0b6 <printk>
   22a16:	215c      	movs	r1, #92	; 0x5c
   22a18:	4831      	ldr	r0, [pc, #196]	; (22ae0 <z_impl_k_msgq_put+0x12c>)
   22a1a:	f009 fd69 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22a1e:	4628      	mov	r0, r5
   22a20:	f001 ffd0 	bl	249c4 <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   22a24:	6a62      	ldr	r2, [r4, #36]	; 0x24
   22a26:	6923      	ldr	r3, [r4, #16]
   22a28:	429a      	cmp	r2, r3
   22a2a:	d23d      	bcs.n	22aa8 <z_impl_k_msgq_put+0xf4>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   22a2c:	4620      	mov	r0, r4
   22a2e:	f001 fb75 	bl	2411c <z_unpend_first_thread>
   22a32:	4651      	mov	r1, sl
		if (pending_thread != NULL) {
   22a34:	4606      	mov	r6, r0
   22a36:	68e2      	ldr	r2, [r4, #12]
   22a38:	b178      	cbz	r0, 22a5a <z_impl_k_msgq_put+0xa6>
   22a3a:	2400      	movs	r4, #0
   22a3c:	6940      	ldr	r0, [r0, #20]
   22a3e:	f7ea f885 	bl	cb4c <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   22a42:	4630      	mov	r0, r6
   22a44:	67f4      	str	r4, [r6, #124]	; 0x7c
   22a46:	f000 ff11 	bl	2386c <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   22a4a:	4639      	mov	r1, r7
   22a4c:	4628      	mov	r0, r5
   22a4e:	f000 fce9 	bl	23424 <z_reschedule>
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   22a52:	4620      	mov	r0, r4
   22a54:	b002      	add	sp, #8
   22a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22a5a:	6a20      	ldr	r0, [r4, #32]
   22a5c:	f7ea f876 	bl	cb4c <memcpy>
			msgq->write_ptr += msgq->msg_size;
   22a60:	6a23      	ldr	r3, [r4, #32]
   22a62:	68e2      	ldr	r2, [r4, #12]
   22a64:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   22a66:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   22a68:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   22a6a:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   22a6c:	bf04      	itt	eq
   22a6e:	6963      	ldreq	r3, [r4, #20]
   22a70:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   22a72:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22a74:	3301      	adds	r3, #1
   22a76:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   22a78:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22a7a:	4628      	mov	r0, r5
   22a7c:	f001 ff92 	bl	249a4 <z_spin_unlock_valid>
   22a80:	b968      	cbnz	r0, 22a9e <z_impl_k_msgq_put+0xea>
   22a82:	2384      	movs	r3, #132	; 0x84
   22a84:	4a16      	ldr	r2, [pc, #88]	; (22ae0 <z_impl_k_msgq_put+0x12c>)
   22a86:	4919      	ldr	r1, [pc, #100]	; (22aec <z_impl_k_msgq_put+0x138>)
   22a88:	4813      	ldr	r0, [pc, #76]	; (22ad8 <z_impl_k_msgq_put+0x124>)
   22a8a:	f009 fb14 	bl	2c0b6 <printk>
   22a8e:	4629      	mov	r1, r5
   22a90:	4817      	ldr	r0, [pc, #92]	; (22af0 <z_impl_k_msgq_put+0x13c>)
   22a92:	f009 fb10 	bl	2c0b6 <printk>
   22a96:	2184      	movs	r1, #132	; 0x84
   22a98:	4811      	ldr	r0, [pc, #68]	; (22ae0 <z_impl_k_msgq_put+0x12c>)
   22a9a:	f009 fd29 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   22a9e:	f387 8811 	msr	BASEPRI, r7
   22aa2:	f3bf 8f6f 	isb	sy
	return result;
   22aa6:	e7d4      	b.n	22a52 <z_impl_k_msgq_put+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22aa8:	ea58 0309 	orrs.w	r3, r8, r9
   22aac:	d00c      	beq.n	22ac8 <z_impl_k_msgq_put+0x114>
		_current->base.swap_data = (void *) data;
   22aae:	4b11      	ldr	r3, [pc, #68]	; (22af4 <z_impl_k_msgq_put+0x140>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22ab0:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
   22ab2:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22ab4:	4639      	mov	r1, r7
		_current->base.swap_data = (void *) data;
   22ab6:	f8c3 a014 	str.w	sl, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22aba:	4628      	mov	r0, r5
   22abc:	e9cd 8900 	strd	r8, r9, [sp]
   22ac0:	f001 fa66 	bl	23f90 <z_pend_curr>
   22ac4:	4604      	mov	r4, r0
   22ac6:	e7c4      	b.n	22a52 <z_impl_k_msgq_put+0x9e>
		result = -ENOMSG;
   22ac8:	f06f 0422 	mvn.w	r4, #34	; 0x22
   22acc:	e7d5      	b.n	22a7a <z_impl_k_msgq_put+0xc6>
   22ace:	bf00      	nop
   22ad0:	000329df 	.word	0x000329df
   22ad4:	00032a66 	.word	0x00032a66
   22ad8:	000300ff 	.word	0x000300ff
   22adc:	0003072c 	.word	0x0003072c
   22ae0:	000301cf 	.word	0x000301cf
   22ae4:	00030221 	.word	0x00030221
   22ae8:	00030236 	.word	0x00030236
   22aec:	000301f5 	.word	0x000301f5
   22af0:	0003020c 	.word	0x0003020c
   22af4:	20021dbc 	.word	0x20021dbc

00022af8 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   22af8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   22afc:	4604      	mov	r4, r0
   22afe:	460d      	mov	r5, r1
   22b00:	4690      	mov	r8, r2
   22b02:	4699      	mov	r9, r3
   22b04:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   22b08:	b17b      	cbz	r3, 22b2a <z_impl_k_msgq_get+0x32>
   22b0a:	ea58 0309 	orrs.w	r3, r8, r9
   22b0e:	d00c      	beq.n	22b2a <z_impl_k_msgq_get+0x32>
   22b10:	4946      	ldr	r1, [pc, #280]	; (22c2c <z_impl_k_msgq_get+0x134>)
   22b12:	23c2      	movs	r3, #194	; 0xc2
   22b14:	4a46      	ldr	r2, [pc, #280]	; (22c30 <z_impl_k_msgq_get+0x138>)
   22b16:	4847      	ldr	r0, [pc, #284]	; (22c34 <z_impl_k_msgq_get+0x13c>)
   22b18:	f009 facd 	bl	2c0b6 <printk>
   22b1c:	4846      	ldr	r0, [pc, #280]	; (22c38 <z_impl_k_msgq_get+0x140>)
   22b1e:	f009 faca 	bl	2c0b6 <printk>
   22b22:	21c2      	movs	r1, #194	; 0xc2
   22b24:	4842      	ldr	r0, [pc, #264]	; (22c30 <z_impl_k_msgq_get+0x138>)
   22b26:	f009 fce3 	bl	2c4f0 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   22b2a:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   22b2e:	f04f 0320 	mov.w	r3, #32
   22b32:	f3ef 8711 	mrs	r7, BASEPRI
   22b36:	f383 8811 	msr	BASEPRI, r3
   22b3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22b3e:	4630      	mov	r0, r6
   22b40:	f001 ff22 	bl	24988 <z_spin_lock_valid>
   22b44:	b968      	cbnz	r0, 22b62 <z_impl_k_msgq_get+0x6a>
   22b46:	235c      	movs	r3, #92	; 0x5c
   22b48:	4a3c      	ldr	r2, [pc, #240]	; (22c3c <z_impl_k_msgq_get+0x144>)
   22b4a:	493d      	ldr	r1, [pc, #244]	; (22c40 <z_impl_k_msgq_get+0x148>)
   22b4c:	4839      	ldr	r0, [pc, #228]	; (22c34 <z_impl_k_msgq_get+0x13c>)
   22b4e:	f009 fab2 	bl	2c0b6 <printk>
   22b52:	4631      	mov	r1, r6
   22b54:	483b      	ldr	r0, [pc, #236]	; (22c44 <z_impl_k_msgq_get+0x14c>)
   22b56:	f009 faae 	bl	2c0b6 <printk>
   22b5a:	215c      	movs	r1, #92	; 0x5c
   22b5c:	4837      	ldr	r0, [pc, #220]	; (22c3c <z_impl_k_msgq_get+0x144>)
   22b5e:	f009 fcc7 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22b62:	4630      	mov	r0, r6
   22b64:	f001 ff2e 	bl	249c4 <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   22b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22b6a:	2b00      	cmp	r3, #0
   22b6c:	d035      	beq.n	22bda <z_impl_k_msgq_get+0xe2>
   22b6e:	4628      	mov	r0, r5
   22b70:	68e2      	ldr	r2, [r4, #12]
   22b72:	69e1      	ldr	r1, [r4, #28]
   22b74:	f7e9 ffea 	bl	cb4c <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   22b78:	69e3      	ldr	r3, [r4, #28]
   22b7a:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   22b7c:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   22b7e:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   22b80:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   22b82:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   22b84:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   22b86:	bf04      	itt	eq
   22b88:	6963      	ldreq	r3, [r4, #20]
   22b8a:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   22b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22b8e:	3b01      	subs	r3, #1
   22b90:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   22b92:	f001 fac3 	bl	2411c <z_unpend_first_thread>
		if (pending_thread != NULL) {
   22b96:	4605      	mov	r5, r0
   22b98:	2800      	cmp	r0, #0
   22b9a:	d02f      	beq.n	22bfc <z_impl_k_msgq_get+0x104>
   22b9c:	6941      	ldr	r1, [r0, #20]
   22b9e:	68e2      	ldr	r2, [r4, #12]
   22ba0:	6a20      	ldr	r0, [r4, #32]
   22ba2:	f7e9 ffd3 	bl	cb4c <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   22ba6:	6a23      	ldr	r3, [r4, #32]
   22ba8:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   22baa:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   22bac:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   22bae:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   22bb0:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   22bb2:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   22bb4:	bf04      	itt	eq
   22bb6:	6963      	ldreq	r3, [r4, #20]
   22bb8:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   22bba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22bbc:	3301      	adds	r3, #1
   22bbe:	6263      	str	r3, [r4, #36]	; 0x24
   22bc0:	2400      	movs	r4, #0
   22bc2:	67ec      	str	r4, [r5, #124]	; 0x7c
			z_ready_thread(pending_thread);
   22bc4:	f000 fe52 	bl	2386c <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   22bc8:	4639      	mov	r1, r7
   22bca:	4630      	mov	r0, r6
   22bcc:	f000 fc2a 	bl	23424 <z_reschedule>
			return 0;
   22bd0:	4625      	mov	r5, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   22bd2:	4628      	mov	r0, r5
   22bd4:	b003      	add	sp, #12
   22bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22bda:	ea58 0309 	orrs.w	r3, r8, r9
   22bde:	d00b      	beq.n	22bf8 <z_impl_k_msgq_get+0x100>
		_current->base.swap_data = data;
   22be0:	4b19      	ldr	r3, [pc, #100]	; (22c48 <z_impl_k_msgq_get+0x150>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22be2:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   22be4:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22be6:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   22be8:	615d      	str	r5, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22bea:	4630      	mov	r0, r6
   22bec:	e9cd 8900 	strd	r8, r9, [sp]
   22bf0:	f001 f9ce 	bl	23f90 <z_pend_curr>
   22bf4:	4605      	mov	r5, r0
   22bf6:	e7ec      	b.n	22bd2 <z_impl_k_msgq_get+0xda>
		result = -ENOMSG;
   22bf8:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22bfc:	4630      	mov	r0, r6
   22bfe:	f001 fed1 	bl	249a4 <z_spin_unlock_valid>
   22c02:	b968      	cbnz	r0, 22c20 <z_impl_k_msgq_get+0x128>
   22c04:	2384      	movs	r3, #132	; 0x84
   22c06:	4a0d      	ldr	r2, [pc, #52]	; (22c3c <z_impl_k_msgq_get+0x144>)
   22c08:	4910      	ldr	r1, [pc, #64]	; (22c4c <z_impl_k_msgq_get+0x154>)
   22c0a:	480a      	ldr	r0, [pc, #40]	; (22c34 <z_impl_k_msgq_get+0x13c>)
   22c0c:	f009 fa53 	bl	2c0b6 <printk>
   22c10:	4631      	mov	r1, r6
   22c12:	480f      	ldr	r0, [pc, #60]	; (22c50 <z_impl_k_msgq_get+0x158>)
   22c14:	f009 fa4f 	bl	2c0b6 <printk>
   22c18:	2184      	movs	r1, #132	; 0x84
   22c1a:	4808      	ldr	r0, [pc, #32]	; (22c3c <z_impl_k_msgq_get+0x144>)
   22c1c:	f009 fc68 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   22c20:	f387 8811 	msr	BASEPRI, r7
   22c24:	f3bf 8f6f 	isb	sy
	return result;
   22c28:	e7d3      	b.n	22bd2 <z_impl_k_msgq_get+0xda>
   22c2a:	bf00      	nop
   22c2c:	000329df 	.word	0x000329df
   22c30:	00032a66 	.word	0x00032a66
   22c34:	000300ff 	.word	0x000300ff
   22c38:	0003072c 	.word	0x0003072c
   22c3c:	000301cf 	.word	0x000301cf
   22c40:	00030221 	.word	0x00030221
   22c44:	00030236 	.word	0x00030236
   22c48:	20021dbc 	.word	0x20021dbc
   22c4c:	000301f5 	.word	0x000301f5
   22c50:	0003020c 	.word	0x0003020c

00022c54 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   22c54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22c58:	4604      	mov	r4, r0
   22c5a:	4616      	mov	r6, r2
   22c5c:	461f      	mov	r7, r3
   22c5e:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   22c62:	b163      	cbz	r3, 22c7e <z_impl_k_mutex_lock+0x2a>
   22c64:	496d      	ldr	r1, [pc, #436]	; (22e1c <z_impl_k_mutex_lock+0x1c8>)
   22c66:	237d      	movs	r3, #125	; 0x7d
   22c68:	4a6d      	ldr	r2, [pc, #436]	; (22e20 <z_impl_k_mutex_lock+0x1cc>)
   22c6a:	486e      	ldr	r0, [pc, #440]	; (22e24 <z_impl_k_mutex_lock+0x1d0>)
   22c6c:	f009 fa23 	bl	2c0b6 <printk>
   22c70:	486d      	ldr	r0, [pc, #436]	; (22e28 <z_impl_k_mutex_lock+0x1d4>)
   22c72:	f009 fa20 	bl	2c0b6 <printk>
   22c76:	217d      	movs	r1, #125	; 0x7d
   22c78:	4869      	ldr	r0, [pc, #420]	; (22e20 <z_impl_k_mutex_lock+0x1cc>)
   22c7a:	f009 fc39 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   22c7e:	f04f 0320 	mov.w	r3, #32
   22c82:	f3ef 8811 	mrs	r8, BASEPRI
   22c86:	f383 8811 	msr	BASEPRI, r3
   22c8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22c8e:	4867      	ldr	r0, [pc, #412]	; (22e2c <z_impl_k_mutex_lock+0x1d8>)
   22c90:	f001 fe7a 	bl	24988 <z_spin_lock_valid>
   22c94:	b968      	cbnz	r0, 22cb2 <z_impl_k_mutex_lock+0x5e>
   22c96:	235c      	movs	r3, #92	; 0x5c
   22c98:	4a65      	ldr	r2, [pc, #404]	; (22e30 <z_impl_k_mutex_lock+0x1dc>)
   22c9a:	4966      	ldr	r1, [pc, #408]	; (22e34 <z_impl_k_mutex_lock+0x1e0>)
   22c9c:	4861      	ldr	r0, [pc, #388]	; (22e24 <z_impl_k_mutex_lock+0x1d0>)
   22c9e:	f009 fa0a 	bl	2c0b6 <printk>
   22ca2:	4962      	ldr	r1, [pc, #392]	; (22e2c <z_impl_k_mutex_lock+0x1d8>)
   22ca4:	4864      	ldr	r0, [pc, #400]	; (22e38 <z_impl_k_mutex_lock+0x1e4>)
   22ca6:	f009 fa06 	bl	2c0b6 <printk>
   22caa:	215c      	movs	r1, #92	; 0x5c
   22cac:	4860      	ldr	r0, [pc, #384]	; (22e30 <z_impl_k_mutex_lock+0x1dc>)
   22cae:	f009 fc1f 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22cb2:	485e      	ldr	r0, [pc, #376]	; (22e2c <z_impl_k_mutex_lock+0x1d8>)
   22cb4:	f001 fe86 	bl	249c4 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   22cb8:	68e3      	ldr	r3, [r4, #12]
   22cba:	4a60      	ldr	r2, [pc, #384]	; (22e3c <z_impl_k_mutex_lock+0x1e8>)
   22cbc:	b1fb      	cbz	r3, 22cfe <z_impl_k_mutex_lock+0xaa>
   22cbe:	68a0      	ldr	r0, [r4, #8]
   22cc0:	6891      	ldr	r1, [r2, #8]
   22cc2:	4288      	cmp	r0, r1
   22cc4:	d03d      	beq.n	22d42 <z_impl_k_mutex_lock+0xee>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   22cc6:	ea56 0307 	orrs.w	r3, r6, r7
   22cca:	d13c      	bne.n	22d46 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22ccc:	4857      	ldr	r0, [pc, #348]	; (22e2c <z_impl_k_mutex_lock+0x1d8>)
   22cce:	f001 fe69 	bl	249a4 <z_spin_unlock_valid>
   22cd2:	b968      	cbnz	r0, 22cf0 <z_impl_k_mutex_lock+0x9c>
   22cd4:	2384      	movs	r3, #132	; 0x84
   22cd6:	4a56      	ldr	r2, [pc, #344]	; (22e30 <z_impl_k_mutex_lock+0x1dc>)
   22cd8:	4959      	ldr	r1, [pc, #356]	; (22e40 <z_impl_k_mutex_lock+0x1ec>)
   22cda:	4852      	ldr	r0, [pc, #328]	; (22e24 <z_impl_k_mutex_lock+0x1d0>)
   22cdc:	f009 f9eb 	bl	2c0b6 <printk>
   22ce0:	4952      	ldr	r1, [pc, #328]	; (22e2c <z_impl_k_mutex_lock+0x1d8>)
   22ce2:	4858      	ldr	r0, [pc, #352]	; (22e44 <z_impl_k_mutex_lock+0x1f0>)
   22ce4:	f009 f9e7 	bl	2c0b6 <printk>
   22ce8:	2184      	movs	r1, #132	; 0x84
   22cea:	4851      	ldr	r0, [pc, #324]	; (22e30 <z_impl_k_mutex_lock+0x1dc>)
   22cec:	f009 fc00 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   22cf0:	f388 8811 	msr	BASEPRI, r8
   22cf4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   22cf8:	f06f 000f 	mvn.w	r0, #15
   22cfc:	e01e      	b.n	22d3c <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   22cfe:	6891      	ldr	r1, [r2, #8]
   22d00:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   22d04:	3301      	adds	r3, #1
   22d06:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   22d08:	6893      	ldr	r3, [r2, #8]
   22d0a:	4848      	ldr	r0, [pc, #288]	; (22e2c <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   22d0c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   22d0e:	60a3      	str	r3, [r4, #8]
   22d10:	f001 fe48 	bl	249a4 <z_spin_unlock_valid>
   22d14:	b968      	cbnz	r0, 22d32 <z_impl_k_mutex_lock+0xde>
   22d16:	2384      	movs	r3, #132	; 0x84
   22d18:	4a45      	ldr	r2, [pc, #276]	; (22e30 <z_impl_k_mutex_lock+0x1dc>)
   22d1a:	4949      	ldr	r1, [pc, #292]	; (22e40 <z_impl_k_mutex_lock+0x1ec>)
   22d1c:	4841      	ldr	r0, [pc, #260]	; (22e24 <z_impl_k_mutex_lock+0x1d0>)
   22d1e:	f009 f9ca 	bl	2c0b6 <printk>
   22d22:	4942      	ldr	r1, [pc, #264]	; (22e2c <z_impl_k_mutex_lock+0x1d8>)
   22d24:	4847      	ldr	r0, [pc, #284]	; (22e44 <z_impl_k_mutex_lock+0x1f0>)
   22d26:	f009 f9c6 	bl	2c0b6 <printk>
   22d2a:	2184      	movs	r1, #132	; 0x84
   22d2c:	4840      	ldr	r0, [pc, #256]	; (22e30 <z_impl_k_mutex_lock+0x1dc>)
   22d2e:	f009 fbdf 	bl	2c4f0 <assert_post_action>
   22d32:	f388 8811 	msr	BASEPRI, r8
   22d36:	f3bf 8f6f 	isb	sy
		return 0;
   22d3a:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   22d3c:	b002      	add	sp, #8
   22d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   22d42:	6921      	ldr	r1, [r4, #16]
   22d44:	e7de      	b.n	22d04 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   22d46:	f990 300e 	ldrsb.w	r3, [r0, #14]
   22d4a:	f991 100e 	ldrsb.w	r1, [r1, #14]
   22d4e:	4299      	cmp	r1, r3
   22d50:	bfa8      	it	ge
   22d52:	4619      	movge	r1, r3
   22d54:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   22d58:	4299      	cmp	r1, r3
   22d5a:	da41      	bge.n	22de0 <z_impl_k_mutex_lock+0x18c>
		return z_set_prio(mutex->owner, new_prio);
   22d5c:	f001 f948 	bl	23ff0 <z_set_prio>
   22d60:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   22d62:	4622      	mov	r2, r4
   22d64:	4641      	mov	r1, r8
   22d66:	e9cd 6700 	strd	r6, r7, [sp]
   22d6a:	4830      	ldr	r0, [pc, #192]	; (22e2c <z_impl_k_mutex_lock+0x1d8>)
   22d6c:	f001 f910 	bl	23f90 <z_pend_curr>
	if (got_mutex == 0) {
   22d70:	2800      	cmp	r0, #0
   22d72:	d0e3      	beq.n	22d3c <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   22d74:	f04f 0320 	mov.w	r3, #32
   22d78:	f3ef 8611 	mrs	r6, BASEPRI
   22d7c:	f383 8811 	msr	BASEPRI, r3
   22d80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22d84:	4829      	ldr	r0, [pc, #164]	; (22e2c <z_impl_k_mutex_lock+0x1d8>)
   22d86:	f001 fdff 	bl	24988 <z_spin_lock_valid>
   22d8a:	b968      	cbnz	r0, 22da8 <z_impl_k_mutex_lock+0x154>
   22d8c:	235c      	movs	r3, #92	; 0x5c
   22d8e:	4a28      	ldr	r2, [pc, #160]	; (22e30 <z_impl_k_mutex_lock+0x1dc>)
   22d90:	4928      	ldr	r1, [pc, #160]	; (22e34 <z_impl_k_mutex_lock+0x1e0>)
   22d92:	4824      	ldr	r0, [pc, #144]	; (22e24 <z_impl_k_mutex_lock+0x1d0>)
   22d94:	f009 f98f 	bl	2c0b6 <printk>
   22d98:	4924      	ldr	r1, [pc, #144]	; (22e2c <z_impl_k_mutex_lock+0x1d8>)
   22d9a:	4827      	ldr	r0, [pc, #156]	; (22e38 <z_impl_k_mutex_lock+0x1e4>)
   22d9c:	f009 f98b 	bl	2c0b6 <printk>
   22da0:	215c      	movs	r1, #92	; 0x5c
   22da2:	4823      	ldr	r0, [pc, #140]	; (22e30 <z_impl_k_mutex_lock+0x1dc>)
   22da4:	f009 fba4 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22da8:	4820      	ldr	r0, [pc, #128]	; (22e2c <z_impl_k_mutex_lock+0x1d8>)
   22daa:	f001 fe0b 	bl	249c4 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   22dae:	6823      	ldr	r3, [r4, #0]
   22db0:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22db2:	42a3      	cmp	r3, r4
   22db4:	d007      	beq.n	22dc6 <z_impl_k_mutex_lock+0x172>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   22db6:	b133      	cbz	r3, 22dc6 <z_impl_k_mutex_lock+0x172>
   22db8:	f993 300e 	ldrsb.w	r3, [r3, #14]
   22dbc:	4299      	cmp	r1, r3
   22dbe:	bfa8      	it	ge
   22dc0:	4619      	movge	r1, r3
   22dc2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   22dc6:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   22dc8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   22dcc:	4299      	cmp	r1, r3
   22dce:	d109      	bne.n	22de4 <z_impl_k_mutex_lock+0x190>
	if (resched) {
   22dd0:	b16d      	cbz	r5, 22dee <z_impl_k_mutex_lock+0x19a>
		z_reschedule(&lock, key);
   22dd2:	4631      	mov	r1, r6
   22dd4:	4815      	ldr	r0, [pc, #84]	; (22e2c <z_impl_k_mutex_lock+0x1d8>)
   22dd6:	f000 fb25 	bl	23424 <z_reschedule>
	return -EAGAIN;
   22dda:	f06f 000a 	mvn.w	r0, #10
   22dde:	e7ad      	b.n	22d3c <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   22de0:	2500      	movs	r5, #0
   22de2:	e7be      	b.n	22d62 <z_impl_k_mutex_lock+0x10e>
		return z_set_prio(mutex->owner, new_prio);
   22de4:	f001 f904 	bl	23ff0 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   22de8:	2800      	cmp	r0, #0
   22dea:	d1f2      	bne.n	22dd2 <z_impl_k_mutex_lock+0x17e>
   22dec:	e7f0      	b.n	22dd0 <z_impl_k_mutex_lock+0x17c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22dee:	480f      	ldr	r0, [pc, #60]	; (22e2c <z_impl_k_mutex_lock+0x1d8>)
   22df0:	f001 fdd8 	bl	249a4 <z_spin_unlock_valid>
   22df4:	b968      	cbnz	r0, 22e12 <z_impl_k_mutex_lock+0x1be>
   22df6:	2384      	movs	r3, #132	; 0x84
   22df8:	4a0d      	ldr	r2, [pc, #52]	; (22e30 <z_impl_k_mutex_lock+0x1dc>)
   22dfa:	4911      	ldr	r1, [pc, #68]	; (22e40 <z_impl_k_mutex_lock+0x1ec>)
   22dfc:	4809      	ldr	r0, [pc, #36]	; (22e24 <z_impl_k_mutex_lock+0x1d0>)
   22dfe:	f009 f95a 	bl	2c0b6 <printk>
   22e02:	490a      	ldr	r1, [pc, #40]	; (22e2c <z_impl_k_mutex_lock+0x1d8>)
   22e04:	480f      	ldr	r0, [pc, #60]	; (22e44 <z_impl_k_mutex_lock+0x1f0>)
   22e06:	f009 f956 	bl	2c0b6 <printk>
   22e0a:	2184      	movs	r1, #132	; 0x84
   22e0c:	4808      	ldr	r0, [pc, #32]	; (22e30 <z_impl_k_mutex_lock+0x1dc>)
   22e0e:	f009 fb6f 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   22e12:	f386 8811 	msr	BASEPRI, r6
   22e16:	f3bf 8f6f 	isb	sy
   22e1a:	e7de      	b.n	22dda <z_impl_k_mutex_lock+0x186>
   22e1c:	00032aaa 	.word	0x00032aaa
   22e20:	00032a88 	.word	0x00032a88
   22e24:	000300ff 	.word	0x000300ff
   22e28:	00032abc 	.word	0x00032abc
   22e2c:	20021db8 	.word	0x20021db8
   22e30:	000301cf 	.word	0x000301cf
   22e34:	00030221 	.word	0x00030221
   22e38:	00030236 	.word	0x00030236
   22e3c:	20021dbc 	.word	0x20021dbc
   22e40:	000301f5 	.word	0x000301f5
   22e44:	0003020c 	.word	0x0003020c

00022e48 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   22e48:	b538      	push	{r3, r4, r5, lr}
   22e4a:	4604      	mov	r4, r0
   22e4c:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   22e50:	b163      	cbz	r3, 22e6c <z_impl_k_mutex_unlock+0x24>
   22e52:	4954      	ldr	r1, [pc, #336]	; (22fa4 <z_impl_k_mutex_unlock+0x15c>)
   22e54:	23d8      	movs	r3, #216	; 0xd8
   22e56:	4a54      	ldr	r2, [pc, #336]	; (22fa8 <z_impl_k_mutex_unlock+0x160>)
   22e58:	4854      	ldr	r0, [pc, #336]	; (22fac <z_impl_k_mutex_unlock+0x164>)
   22e5a:	f009 f92c 	bl	2c0b6 <printk>
   22e5e:	4854      	ldr	r0, [pc, #336]	; (22fb0 <z_impl_k_mutex_unlock+0x168>)
   22e60:	f009 f929 	bl	2c0b6 <printk>
   22e64:	21d8      	movs	r1, #216	; 0xd8
   22e66:	4850      	ldr	r0, [pc, #320]	; (22fa8 <z_impl_k_mutex_unlock+0x160>)
   22e68:	f009 fb42 	bl	2c4f0 <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   22e6c:	68a3      	ldr	r3, [r4, #8]
   22e6e:	2b00      	cmp	r3, #0
   22e70:	f000 8091 	beq.w	22f96 <z_impl_k_mutex_unlock+0x14e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   22e74:	4d4f      	ldr	r5, [pc, #316]	; (22fb4 <z_impl_k_mutex_unlock+0x16c>)
   22e76:	68aa      	ldr	r2, [r5, #8]
   22e78:	4293      	cmp	r3, r2
   22e7a:	f040 808f 	bne.w	22f9c <z_impl_k_mutex_unlock+0x154>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   22e7e:	68e3      	ldr	r3, [r4, #12]
   22e80:	b94b      	cbnz	r3, 22e96 <z_impl_k_mutex_unlock+0x4e>
   22e82:	494d      	ldr	r1, [pc, #308]	; (22fb8 <z_impl_k_mutex_unlock+0x170>)
   22e84:	4849      	ldr	r0, [pc, #292]	; (22fac <z_impl_k_mutex_unlock+0x164>)
   22e86:	23ea      	movs	r3, #234	; 0xea
   22e88:	4a47      	ldr	r2, [pc, #284]	; (22fa8 <z_impl_k_mutex_unlock+0x160>)
   22e8a:	f009 f914 	bl	2c0b6 <printk>
   22e8e:	21ea      	movs	r1, #234	; 0xea
   22e90:	4845      	ldr	r0, [pc, #276]	; (22fa8 <z_impl_k_mutex_unlock+0x160>)
   22e92:	f009 fb2d 	bl	2c4f0 <assert_post_action>
   22e96:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   22e9a:	b173      	cbz	r3, 22eba <z_impl_k_mutex_unlock+0x72>
   22e9c:	4941      	ldr	r1, [pc, #260]	; (22fa4 <z_impl_k_mutex_unlock+0x15c>)
   22e9e:	f44f 7386 	mov.w	r3, #268	; 0x10c
   22ea2:	4a46      	ldr	r2, [pc, #280]	; (22fbc <z_impl_k_mutex_unlock+0x174>)
   22ea4:	4841      	ldr	r0, [pc, #260]	; (22fac <z_impl_k_mutex_unlock+0x164>)
   22ea6:	f009 f906 	bl	2c0b6 <printk>
   22eaa:	4845      	ldr	r0, [pc, #276]	; (22fc0 <z_impl_k_mutex_unlock+0x178>)
   22eac:	f009 f903 	bl	2c0b6 <printk>
   22eb0:	f44f 7186 	mov.w	r1, #268	; 0x10c
   22eb4:	4841      	ldr	r0, [pc, #260]	; (22fbc <z_impl_k_mutex_unlock+0x174>)
   22eb6:	f009 fb1b 	bl	2c4f0 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   22eba:	68ab      	ldr	r3, [r5, #8]
   22ebc:	7bdb      	ldrb	r3, [r3, #15]
   22ebe:	2b01      	cmp	r3, #1
   22ec0:	d10e      	bne.n	22ee0 <z_impl_k_mutex_unlock+0x98>
   22ec2:	4940      	ldr	r1, [pc, #256]	; (22fc4 <z_impl_k_mutex_unlock+0x17c>)
   22ec4:	f240 130d 	movw	r3, #269	; 0x10d
   22ec8:	4a3c      	ldr	r2, [pc, #240]	; (22fbc <z_impl_k_mutex_unlock+0x174>)
   22eca:	4838      	ldr	r0, [pc, #224]	; (22fac <z_impl_k_mutex_unlock+0x164>)
   22ecc:	f009 f8f3 	bl	2c0b6 <printk>
   22ed0:	483b      	ldr	r0, [pc, #236]	; (22fc0 <z_impl_k_mutex_unlock+0x178>)
   22ed2:	f009 f8f0 	bl	2c0b6 <printk>
   22ed6:	f240 110d 	movw	r1, #269	; 0x10d
   22eda:	4838      	ldr	r0, [pc, #224]	; (22fbc <z_impl_k_mutex_unlock+0x174>)
   22edc:	f009 fb08 	bl	2c4f0 <assert_post_action>

	--_current->base.sched_locked;
   22ee0:	68aa      	ldr	r2, [r5, #8]
   22ee2:	7bd3      	ldrb	r3, [r2, #15]
   22ee4:	3b01      	subs	r3, #1
   22ee6:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   22ee8:	68e3      	ldr	r3, [r4, #12]
   22eea:	2b01      	cmp	r3, #1
   22eec:	d005      	beq.n	22efa <z_impl_k_mutex_unlock+0xb2>
		mutex->lock_count--;
   22eee:	3b01      	subs	r3, #1
   22ef0:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   22ef2:	f000 fbf1 	bl	236d8 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   22ef6:	2000      	movs	r0, #0
}
   22ef8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   22efa:	f04f 0320 	mov.w	r3, #32
   22efe:	f3ef 8511 	mrs	r5, BASEPRI
   22f02:	f383 8811 	msr	BASEPRI, r3
   22f06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22f0a:	482f      	ldr	r0, [pc, #188]	; (22fc8 <z_impl_k_mutex_unlock+0x180>)
   22f0c:	f001 fd3c 	bl	24988 <z_spin_lock_valid>
   22f10:	b968      	cbnz	r0, 22f2e <z_impl_k_mutex_unlock+0xe6>
   22f12:	235c      	movs	r3, #92	; 0x5c
   22f14:	4a2d      	ldr	r2, [pc, #180]	; (22fcc <z_impl_k_mutex_unlock+0x184>)
   22f16:	492e      	ldr	r1, [pc, #184]	; (22fd0 <z_impl_k_mutex_unlock+0x188>)
   22f18:	4824      	ldr	r0, [pc, #144]	; (22fac <z_impl_k_mutex_unlock+0x164>)
   22f1a:	f009 f8cc 	bl	2c0b6 <printk>
   22f1e:	492a      	ldr	r1, [pc, #168]	; (22fc8 <z_impl_k_mutex_unlock+0x180>)
   22f20:	482c      	ldr	r0, [pc, #176]	; (22fd4 <z_impl_k_mutex_unlock+0x18c>)
   22f22:	f009 f8c8 	bl	2c0b6 <printk>
   22f26:	215c      	movs	r1, #92	; 0x5c
   22f28:	4828      	ldr	r0, [pc, #160]	; (22fcc <z_impl_k_mutex_unlock+0x184>)
   22f2a:	f009 fae1 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22f2e:	4826      	ldr	r0, [pc, #152]	; (22fc8 <z_impl_k_mutex_unlock+0x180>)
   22f30:	f001 fd48 	bl	249c4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   22f34:	68a0      	ldr	r0, [r4, #8]
   22f36:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   22f38:	f990 300e 	ldrsb.w	r3, [r0, #14]
   22f3c:	4299      	cmp	r1, r3
   22f3e:	d001      	beq.n	22f44 <z_impl_k_mutex_unlock+0xfc>
		return z_set_prio(mutex->owner, new_prio);
   22f40:	f001 f856 	bl	23ff0 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   22f44:	4620      	mov	r0, r4
   22f46:	f001 f8e9 	bl	2411c <z_unpend_first_thread>
	mutex->owner = new_owner;
   22f4a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   22f4c:	b158      	cbz	r0, 22f66 <z_impl_k_mutex_unlock+0x11e>
		mutex->owner_orig_prio = new_owner->base.prio;
   22f4e:	f990 200e 	ldrsb.w	r2, [r0, #14]
   22f52:	6122      	str	r2, [r4, #16]
   22f54:	2200      	movs	r2, #0
   22f56:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   22f58:	f000 fc88 	bl	2386c <z_ready_thread>
		z_reschedule(&lock, key);
   22f5c:	4629      	mov	r1, r5
   22f5e:	481a      	ldr	r0, [pc, #104]	; (22fc8 <z_impl_k_mutex_unlock+0x180>)
   22f60:	f000 fa60 	bl	23424 <z_reschedule>
   22f64:	e7c5      	b.n	22ef2 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count = 0U;
   22f66:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22f68:	4817      	ldr	r0, [pc, #92]	; (22fc8 <z_impl_k_mutex_unlock+0x180>)
   22f6a:	f001 fd1b 	bl	249a4 <z_spin_unlock_valid>
   22f6e:	b968      	cbnz	r0, 22f8c <z_impl_k_mutex_unlock+0x144>
   22f70:	2384      	movs	r3, #132	; 0x84
   22f72:	4a16      	ldr	r2, [pc, #88]	; (22fcc <z_impl_k_mutex_unlock+0x184>)
   22f74:	4918      	ldr	r1, [pc, #96]	; (22fd8 <z_impl_k_mutex_unlock+0x190>)
   22f76:	480d      	ldr	r0, [pc, #52]	; (22fac <z_impl_k_mutex_unlock+0x164>)
   22f78:	f009 f89d 	bl	2c0b6 <printk>
   22f7c:	4912      	ldr	r1, [pc, #72]	; (22fc8 <z_impl_k_mutex_unlock+0x180>)
   22f7e:	4817      	ldr	r0, [pc, #92]	; (22fdc <z_impl_k_mutex_unlock+0x194>)
   22f80:	f009 f899 	bl	2c0b6 <printk>
   22f84:	2184      	movs	r1, #132	; 0x84
   22f86:	4811      	ldr	r0, [pc, #68]	; (22fcc <z_impl_k_mutex_unlock+0x184>)
   22f88:	f009 fab2 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   22f8c:	f385 8811 	msr	BASEPRI, r5
   22f90:	f3bf 8f6f 	isb	sy
   22f94:	e7ad      	b.n	22ef2 <z_impl_k_mutex_unlock+0xaa>
		return -EINVAL;
   22f96:	f06f 0015 	mvn.w	r0, #21
   22f9a:	e7ad      	b.n	22ef8 <z_impl_k_mutex_unlock+0xb0>
		return -EPERM;
   22f9c:	f04f 30ff 	mov.w	r0, #4294967295
   22fa0:	e7aa      	b.n	22ef8 <z_impl_k_mutex_unlock+0xb0>
   22fa2:	bf00      	nop
   22fa4:	00032aaa 	.word	0x00032aaa
   22fa8:	00032a88 	.word	0x00032a88
   22fac:	000300ff 	.word	0x000300ff
   22fb0:	00032abc 	.word	0x00032abc
   22fb4:	20021dbc 	.word	0x20021dbc
   22fb8:	00032ae1 	.word	0x00032ae1
   22fbc:	00032af8 	.word	0x00032af8
   22fc0:	0003072c 	.word	0x0003072c
   22fc4:	00032b23 	.word	0x00032b23
   22fc8:	20021db8 	.word	0x20021db8
   22fcc:	000301cf 	.word	0x000301cf
   22fd0:	00030221 	.word	0x00030221
   22fd4:	00030236 	.word	0x00030236
   22fd8:	000301f5 	.word	0x000301f5
   22fdc:	0003020c 	.word	0x0003020c

00022fe0 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   22fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22fe4:	4604      	mov	r4, r0
   22fe6:	460e      	mov	r6, r1
   22fe8:	4690      	mov	r8, r2
   22fea:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22fec:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   22ff0:	f04f 0320 	mov.w	r3, #32
   22ff4:	f3ef 8711 	mrs	r7, BASEPRI
   22ff8:	f383 8811 	msr	BASEPRI, r3
   22ffc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23000:	4628      	mov	r0, r5
   23002:	f001 fcc1 	bl	24988 <z_spin_lock_valid>
   23006:	b968      	cbnz	r0, 23024 <queue_insert+0x44>
   23008:	235c      	movs	r3, #92	; 0x5c
   2300a:	4a39      	ldr	r2, [pc, #228]	; (230f0 <queue_insert+0x110>)
   2300c:	4939      	ldr	r1, [pc, #228]	; (230f4 <queue_insert+0x114>)
   2300e:	483a      	ldr	r0, [pc, #232]	; (230f8 <queue_insert+0x118>)
   23010:	f009 f851 	bl	2c0b6 <printk>
   23014:	4629      	mov	r1, r5
   23016:	4839      	ldr	r0, [pc, #228]	; (230fc <queue_insert+0x11c>)
   23018:	f009 f84d 	bl	2c0b6 <printk>
   2301c:	215c      	movs	r1, #92	; 0x5c
   2301e:	4834      	ldr	r0, [pc, #208]	; (230f0 <queue_insert+0x110>)
   23020:	f009 fa66 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   23024:	4628      	mov	r0, r5
   23026:	f001 fccd 	bl	249c4 <z_spin_lock_set_owner>
	struct k_thread *first_pending_thread;

	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2302a:	f104 000c 	add.w	r0, r4, #12
   2302e:	f001 f875 	bl	2411c <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   23032:	b158      	cbz	r0, 2304c <queue_insert+0x6c>
   23034:	2400      	movs	r4, #0
   23036:	f8c0 8014 	str.w	r8, [r0, #20]
   2303a:	67c4      	str	r4, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2303c:	f000 fc16 	bl	2386c <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   23040:	4628      	mov	r0, r5
   23042:	4639      	mov	r1, r7
   23044:	f000 f9ee 	bl	23424 <z_reschedule>
	return 0;
   23048:	2000      	movs	r0, #0
   2304a:	e01e      	b.n	2308a <queue_insert+0xaa>
	if (alloc) {
   2304c:	f1b9 0f00 	cmp.w	r9, #0
   23050:	d02d      	beq.n	230ae <queue_insert+0xce>
		anode = z_thread_malloc(sizeof(*anode));
   23052:	2008      	movs	r0, #8
   23054:	f002 fc78 	bl	25948 <z_thread_malloc>
		if (anode == NULL) {
   23058:	b9c8      	cbnz	r0, 2308e <queue_insert+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2305a:	4628      	mov	r0, r5
   2305c:	f001 fca2 	bl	249a4 <z_spin_unlock_valid>
   23060:	b968      	cbnz	r0, 2307e <queue_insert+0x9e>
   23062:	2384      	movs	r3, #132	; 0x84
   23064:	4a22      	ldr	r2, [pc, #136]	; (230f0 <queue_insert+0x110>)
   23066:	4926      	ldr	r1, [pc, #152]	; (23100 <queue_insert+0x120>)
   23068:	4823      	ldr	r0, [pc, #140]	; (230f8 <queue_insert+0x118>)
   2306a:	f009 f824 	bl	2c0b6 <printk>
   2306e:	4629      	mov	r1, r5
   23070:	4824      	ldr	r0, [pc, #144]	; (23104 <queue_insert+0x124>)
   23072:	f009 f820 	bl	2c0b6 <printk>
   23076:	2184      	movs	r1, #132	; 0x84
   23078:	481d      	ldr	r0, [pc, #116]	; (230f0 <queue_insert+0x110>)
   2307a:	f009 fa39 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   2307e:	f387 8811 	msr	BASEPRI, r7
   23082:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   23086:	f06f 000b 	mvn.w	r0, #11
}
   2308a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2308e:	2301      	movs	r3, #1
		anode->data = data;
   23090:	f8c0 8004 	str.w	r8, [r0, #4]
   23094:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   23096:	6803      	ldr	r3, [r0, #0]
   23098:	f003 0303 	and.w	r3, r3, #3
   2309c:	b95e      	cbnz	r6, 230b6 <queue_insert+0xd6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2309e:	6822      	ldr	r2, [r4, #0]
   230a0:	4313      	orrs	r3, r2
   230a2:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   230a4:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   230a6:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   230a8:	b973      	cbnz	r3, 230c8 <queue_insert+0xe8>
	list->tail = node;
   230aa:	6060      	str	r0, [r4, #4]
}
   230ac:	e00c      	b.n	230c8 <queue_insert+0xe8>
}
   230ae:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   230b0:	f8c8 9000 	str.w	r9, [r8]
}
   230b4:	e7ef      	b.n	23096 <queue_insert+0xb6>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   230b6:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   230b8:	f032 0203 	bics.w	r2, r2, #3
   230bc:	d110      	bne.n	230e0 <queue_insert+0x100>
Z_GENLIST_APPEND(sflist, sfnode)
   230be:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   230c0:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   230c2:	b93a      	cbnz	r2, 230d4 <queue_insert+0xf4>
	list->head = node;
   230c4:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   230c8:	2104      	movs	r1, #4
   230ca:	f104 0014 	add.w	r0, r4, #20
   230ce:	f00b fc30 	bl	2e932 <z_handle_obj_poll_events>
   230d2:	e7b5      	b.n	23040 <queue_insert+0x60>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   230d4:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   230d6:	f003 0303 	and.w	r3, r3, #3
   230da:	4303      	orrs	r3, r0
   230dc:	6013      	str	r3, [r2, #0]
   230de:	e7e4      	b.n	230aa <queue_insert+0xca>
   230e0:	4313      	orrs	r3, r2
   230e2:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   230e4:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   230e6:	f003 0303 	and.w	r3, r3, #3
   230ea:	4303      	orrs	r3, r0
   230ec:	6033      	str	r3, [r6, #0]
}
   230ee:	e7eb      	b.n	230c8 <queue_insert+0xe8>
   230f0:	000301cf 	.word	0x000301cf
   230f4:	00030221 	.word	0x00030221
   230f8:	000300ff 	.word	0x000300ff
   230fc:	00030236 	.word	0x00030236
   23100:	000301f5 	.word	0x000301f5
   23104:	0003020c 	.word	0x0003020c

00023108 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   23108:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2310c:	4606      	mov	r6, r0
   2310e:	4690      	mov	r8, r2
   23110:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   23112:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   23116:	f04f 0320 	mov.w	r3, #32
   2311a:	f3ef 8711 	mrs	r7, BASEPRI
   2311e:	f383 8811 	msr	BASEPRI, r3
   23122:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23126:	4628      	mov	r0, r5
   23128:	f001 fc2e 	bl	24988 <z_spin_lock_valid>
   2312c:	b968      	cbnz	r0, 2314a <z_impl_k_queue_get+0x42>
   2312e:	235c      	movs	r3, #92	; 0x5c
   23130:	4a25      	ldr	r2, [pc, #148]	; (231c8 <z_impl_k_queue_get+0xc0>)
   23132:	4926      	ldr	r1, [pc, #152]	; (231cc <z_impl_k_queue_get+0xc4>)
   23134:	4826      	ldr	r0, [pc, #152]	; (231d0 <z_impl_k_queue_get+0xc8>)
   23136:	f008 ffbe 	bl	2c0b6 <printk>
   2313a:	4629      	mov	r1, r5
   2313c:	4825      	ldr	r0, [pc, #148]	; (231d4 <z_impl_k_queue_get+0xcc>)
   2313e:	f008 ffba 	bl	2c0b6 <printk>
   23142:	215c      	movs	r1, #92	; 0x5c
   23144:	4820      	ldr	r0, [pc, #128]	; (231c8 <z_impl_k_queue_get+0xc0>)
   23146:	f009 f9d3 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   2314a:	4628      	mov	r0, r5
   2314c:	f001 fc3a 	bl	249c4 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   23150:	6834      	ldr	r4, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   23152:	b33c      	cbz	r4, 231a4 <z_impl_k_queue_get+0x9c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23154:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   23156:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23158:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2315c:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2315e:	4620      	mov	r0, r4
   23160:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   23164:	6033      	str	r3, [r6, #0]
	list->tail = node;
   23166:	bf08      	it	eq
   23168:	6073      	streq	r3, [r6, #4]
   2316a:	f00b fa52 	bl	2e612 <z_queue_node_peek>
   2316e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23170:	4628      	mov	r0, r5
   23172:	f001 fc17 	bl	249a4 <z_spin_unlock_valid>
   23176:	b968      	cbnz	r0, 23194 <z_impl_k_queue_get+0x8c>
   23178:	2384      	movs	r3, #132	; 0x84
   2317a:	4a13      	ldr	r2, [pc, #76]	; (231c8 <z_impl_k_queue_get+0xc0>)
   2317c:	4916      	ldr	r1, [pc, #88]	; (231d8 <z_impl_k_queue_get+0xd0>)
   2317e:	4814      	ldr	r0, [pc, #80]	; (231d0 <z_impl_k_queue_get+0xc8>)
   23180:	f008 ff99 	bl	2c0b6 <printk>
   23184:	4629      	mov	r1, r5
   23186:	4815      	ldr	r0, [pc, #84]	; (231dc <z_impl_k_queue_get+0xd4>)
   23188:	f008 ff95 	bl	2c0b6 <printk>
   2318c:	2184      	movs	r1, #132	; 0x84
   2318e:	480e      	ldr	r0, [pc, #56]	; (231c8 <z_impl_k_queue_get+0xc0>)
   23190:	f009 f9ae 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   23194:	f387 8811 	msr	BASEPRI, r7
   23198:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2319c:	4620      	mov	r0, r4
   2319e:	b003      	add	sp, #12
   231a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   231a4:	ea58 0309 	orrs.w	r3, r8, r9
   231a8:	d0e2      	beq.n	23170 <z_impl_k_queue_get+0x68>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   231aa:	4639      	mov	r1, r7
   231ac:	4628      	mov	r0, r5
   231ae:	e9cd 8900 	strd	r8, r9, [sp]
   231b2:	f106 020c 	add.w	r2, r6, #12
   231b6:	f000 feeb 	bl	23f90 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   231ba:	2800      	cmp	r0, #0
   231bc:	d1ee      	bne.n	2319c <z_impl_k_queue_get+0x94>
   231be:	4b08      	ldr	r3, [pc, #32]	; (231e0 <z_impl_k_queue_get+0xd8>)
   231c0:	689b      	ldr	r3, [r3, #8]
   231c2:	695c      	ldr	r4, [r3, #20]
   231c4:	e7ea      	b.n	2319c <z_impl_k_queue_get+0x94>
   231c6:	bf00      	nop
   231c8:	000301cf 	.word	0x000301cf
   231cc:	00030221 	.word	0x00030221
   231d0:	000300ff 	.word	0x000300ff
   231d4:	00030236 	.word	0x00030236
   231d8:	000301f5 	.word	0x000301f5
   231dc:	0003020c 	.word	0x0003020c
   231e0:	20021dbc 	.word	0x20021dbc

000231e4 <pended_on.isra.0>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   231e4:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   231e6:	b510      	push	{r4, lr}
   231e8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   231ea:	b95b      	cbnz	r3, 23204 <pended_on.isra.0+0x20>
   231ec:	4906      	ldr	r1, [pc, #24]	; (23208 <pended_on.isra.0+0x24>)
   231ee:	4807      	ldr	r0, [pc, #28]	; (2320c <pended_on.isra.0+0x28>)
   231f0:	f240 13ed 	movw	r3, #493	; 0x1ed
   231f4:	4a06      	ldr	r2, [pc, #24]	; (23210 <pended_on.isra.0+0x2c>)
   231f6:	f008 ff5e 	bl	2c0b6 <printk>
   231fa:	f240 11ed 	movw	r1, #493	; 0x1ed
   231fe:	4804      	ldr	r0, [pc, #16]	; (23210 <pended_on.isra.0+0x2c>)
   23200:	f009 f976 	bl	2c4f0 <assert_post_action>

	return thread->base.pended_on;
}
   23204:	6820      	ldr	r0, [r4, #0]
   23206:	bd10      	pop	{r4, pc}
   23208:	00032b75 	.word	0x00032b75
   2320c:	000300ff 	.word	0x000300ff
   23210:	00032b53 	.word	0x00032b53

00023214 <z_reset_time_slice>:
{
   23214:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   23216:	4c08      	ldr	r4, [pc, #32]	; (23238 <z_reset_time_slice+0x24>)
   23218:	6823      	ldr	r3, [r4, #0]
   2321a:	b15b      	cbz	r3, 23234 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   2321c:	f7f1 f916 	bl	1444c <z_clock_elapsed>
   23220:	6822      	ldr	r2, [r4, #0]
   23222:	4906      	ldr	r1, [pc, #24]	; (2323c <z_reset_time_slice+0x28>)
   23224:	4410      	add	r0, r2
   23226:	6108      	str	r0, [r1, #16]
}
   23228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   2322c:	2100      	movs	r1, #0
   2322e:	4610      	mov	r0, r2
   23230:	f001 be38 	b.w	24ea4 <z_set_timeout_expiry>
}
   23234:	bd10      	pop	{r4, pc}
   23236:	bf00      	nop
   23238:	20021dfc 	.word	0x20021dfc
   2323c:	20021dbc 	.word	0x20021dbc

00023240 <k_sched_time_slice_set>:
{
   23240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23242:	4605      	mov	r5, r0
   23244:	460c      	mov	r4, r1
	__asm__ volatile(
   23246:	f04f 0320 	mov.w	r3, #32
   2324a:	f3ef 8611 	mrs	r6, BASEPRI
   2324e:	f383 8811 	msr	BASEPRI, r3
   23252:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23256:	4820      	ldr	r0, [pc, #128]	; (232d8 <k_sched_time_slice_set+0x98>)
   23258:	f001 fb96 	bl	24988 <z_spin_lock_valid>
   2325c:	b968      	cbnz	r0, 2327a <k_sched_time_slice_set+0x3a>
   2325e:	235c      	movs	r3, #92	; 0x5c
   23260:	4a1e      	ldr	r2, [pc, #120]	; (232dc <k_sched_time_slice_set+0x9c>)
   23262:	491f      	ldr	r1, [pc, #124]	; (232e0 <k_sched_time_slice_set+0xa0>)
   23264:	481f      	ldr	r0, [pc, #124]	; (232e4 <k_sched_time_slice_set+0xa4>)
   23266:	f008 ff26 	bl	2c0b6 <printk>
   2326a:	491b      	ldr	r1, [pc, #108]	; (232d8 <k_sched_time_slice_set+0x98>)
   2326c:	481e      	ldr	r0, [pc, #120]	; (232e8 <k_sched_time_slice_set+0xa8>)
   2326e:	f008 ff22 	bl	2c0b6 <printk>
   23272:	215c      	movs	r1, #92	; 0x5c
   23274:	4819      	ldr	r0, [pc, #100]	; (232dc <k_sched_time_slice_set+0x9c>)
   23276:	f009 f93b 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   2327a:	4817      	ldr	r0, [pc, #92]	; (232d8 <k_sched_time_slice_set+0x98>)
   2327c:	f001 fba2 	bl	249c4 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   23280:	f44f 4700 	mov.w	r7, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   23284:	2200      	movs	r2, #0
   23286:	f240 30e7 	movw	r0, #999	; 0x3e7
   2328a:	2100      	movs	r1, #0
   2328c:	4b17      	ldr	r3, [pc, #92]	; (232ec <k_sched_time_slice_set+0xac>)
   2328e:	fbe7 0105 	umlal	r0, r1, r7, r5
   23292:	611a      	str	r2, [r3, #16]
   23294:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23298:	2300      	movs	r3, #0
   2329a:	f7e9 fadd 	bl	c858 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   2329e:	4b14      	ldr	r3, [pc, #80]	; (232f0 <k_sched_time_slice_set+0xb0>)
   232a0:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   232a2:	4b14      	ldr	r3, [pc, #80]	; (232f4 <k_sched_time_slice_set+0xb4>)
   232a4:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   232a6:	f7ff ffb5 	bl	23214 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   232aa:	480b      	ldr	r0, [pc, #44]	; (232d8 <k_sched_time_slice_set+0x98>)
   232ac:	f001 fb7a 	bl	249a4 <z_spin_unlock_valid>
   232b0:	b968      	cbnz	r0, 232ce <k_sched_time_slice_set+0x8e>
   232b2:	2384      	movs	r3, #132	; 0x84
   232b4:	4a09      	ldr	r2, [pc, #36]	; (232dc <k_sched_time_slice_set+0x9c>)
   232b6:	4910      	ldr	r1, [pc, #64]	; (232f8 <k_sched_time_slice_set+0xb8>)
   232b8:	480a      	ldr	r0, [pc, #40]	; (232e4 <k_sched_time_slice_set+0xa4>)
   232ba:	f008 fefc 	bl	2c0b6 <printk>
   232be:	4906      	ldr	r1, [pc, #24]	; (232d8 <k_sched_time_slice_set+0x98>)
   232c0:	480e      	ldr	r0, [pc, #56]	; (232fc <k_sched_time_slice_set+0xbc>)
   232c2:	f008 fef8 	bl	2c0b6 <printk>
   232c6:	2184      	movs	r1, #132	; 0x84
   232c8:	4804      	ldr	r0, [pc, #16]	; (232dc <k_sched_time_slice_set+0x9c>)
   232ca:	f009 f911 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   232ce:	f386 8811 	msr	BASEPRI, r6
   232d2:	f3bf 8f6f 	isb	sy
}
   232d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   232d8:	20021df4 	.word	0x20021df4
   232dc:	000301cf 	.word	0x000301cf
   232e0:	00030221 	.word	0x00030221
   232e4:	000300ff 	.word	0x000300ff
   232e8:	00030236 	.word	0x00030236
   232ec:	20021dbc 	.word	0x20021dbc
   232f0:	20021dfc 	.word	0x20021dfc
   232f4:	20021df8 	.word	0x20021df8
   232f8:	000301f5 	.word	0x000301f5
   232fc:	0003020c 	.word	0x0003020c

00023300 <z_find_first_thread_to_unpend>:
	pend(thread, wait_q, timeout);
}

ALWAYS_INLINE struct k_thread *z_find_first_thread_to_unpend(_wait_q_t *wait_q,
						     struct k_thread *from)
{
   23300:	b538      	push	{r3, r4, r5, lr}
   23302:	4604      	mov	r4, r0
	__asm__ volatile(
   23304:	f04f 0320 	mov.w	r3, #32
   23308:	f3ef 8511 	mrs	r5, BASEPRI
   2330c:	f383 8811 	msr	BASEPRI, r3
   23310:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23314:	4818      	ldr	r0, [pc, #96]	; (23378 <z_find_first_thread_to_unpend+0x78>)
   23316:	f001 fb37 	bl	24988 <z_spin_lock_valid>
   2331a:	b968      	cbnz	r0, 23338 <z_find_first_thread_to_unpend+0x38>
   2331c:	235c      	movs	r3, #92	; 0x5c
   2331e:	4a17      	ldr	r2, [pc, #92]	; (2337c <z_find_first_thread_to_unpend+0x7c>)
   23320:	4917      	ldr	r1, [pc, #92]	; (23380 <z_find_first_thread_to_unpend+0x80>)
   23322:	4818      	ldr	r0, [pc, #96]	; (23384 <z_find_first_thread_to_unpend+0x84>)
   23324:	f008 fec7 	bl	2c0b6 <printk>
   23328:	4913      	ldr	r1, [pc, #76]	; (23378 <z_find_first_thread_to_unpend+0x78>)
   2332a:	4817      	ldr	r0, [pc, #92]	; (23388 <z_find_first_thread_to_unpend+0x88>)
   2332c:	f008 fec3 	bl	2c0b6 <printk>
   23330:	215c      	movs	r1, #92	; 0x5c
   23332:	4812      	ldr	r0, [pc, #72]	; (2337c <z_find_first_thread_to_unpend+0x7c>)
   23334:	f009 f8dc 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   23338:	480f      	ldr	r0, [pc, #60]	; (23378 <z_find_first_thread_to_unpend+0x78>)
   2333a:	f001 fb43 	bl	249c4 <z_spin_lock_set_owner>
	ARG_UNUSED(from);

	struct k_thread *ret = NULL;

	LOCKED(&sched_spinlock) {
		ret = _priq_wait_best(&wait_q->waitq);
   2333e:	4620      	mov	r0, r4
   23340:	f00b f9b3 	bl	2e6aa <z_priq_dumb_best>
   23344:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23346:	480c      	ldr	r0, [pc, #48]	; (23378 <z_find_first_thread_to_unpend+0x78>)
   23348:	f001 fb2c 	bl	249a4 <z_spin_unlock_valid>
   2334c:	b968      	cbnz	r0, 2336a <z_find_first_thread_to_unpend+0x6a>
   2334e:	2384      	movs	r3, #132	; 0x84
   23350:	4a0a      	ldr	r2, [pc, #40]	; (2337c <z_find_first_thread_to_unpend+0x7c>)
   23352:	490e      	ldr	r1, [pc, #56]	; (2338c <z_find_first_thread_to_unpend+0x8c>)
   23354:	480b      	ldr	r0, [pc, #44]	; (23384 <z_find_first_thread_to_unpend+0x84>)
   23356:	f008 feae 	bl	2c0b6 <printk>
   2335a:	4907      	ldr	r1, [pc, #28]	; (23378 <z_find_first_thread_to_unpend+0x78>)
   2335c:	480c      	ldr	r0, [pc, #48]	; (23390 <z_find_first_thread_to_unpend+0x90>)
   2335e:	f008 feaa 	bl	2c0b6 <printk>
   23362:	2184      	movs	r1, #132	; 0x84
   23364:	4805      	ldr	r0, [pc, #20]	; (2337c <z_find_first_thread_to_unpend+0x7c>)
   23366:	f009 f8c3 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   2336a:	f385 8811 	msr	BASEPRI, r5
   2336e:	f3bf 8f6f 	isb	sy
	}

	return ret;
}
   23372:	4620      	mov	r0, r4
   23374:	bd38      	pop	{r3, r4, r5, pc}
   23376:	bf00      	nop
   23378:	20021df4 	.word	0x20021df4
   2337c:	000301cf 	.word	0x000301cf
   23380:	00030221 	.word	0x00030221
   23384:	000300ff 	.word	0x000300ff
   23388:	00030236 	.word	0x00030236
   2338c:	000301f5 	.word	0x000301f5
   23390:	0003020c 	.word	0x0003020c

00023394 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   23394:	b538      	push	{r3, r4, r5, lr}
   23396:	4604      	mov	r4, r0
	__asm__ volatile(
   23398:	f04f 0320 	mov.w	r3, #32
   2339c:	f3ef 8511 	mrs	r5, BASEPRI
   233a0:	f383 8811 	msr	BASEPRI, r3
   233a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   233a8:	4817      	ldr	r0, [pc, #92]	; (23408 <z_unpend_thread_no_timeout+0x74>)
   233aa:	f001 faed 	bl	24988 <z_spin_lock_valid>
   233ae:	b968      	cbnz	r0, 233cc <z_unpend_thread_no_timeout+0x38>
   233b0:	235c      	movs	r3, #92	; 0x5c
   233b2:	4a16      	ldr	r2, [pc, #88]	; (2340c <z_unpend_thread_no_timeout+0x78>)
   233b4:	4916      	ldr	r1, [pc, #88]	; (23410 <z_unpend_thread_no_timeout+0x7c>)
   233b6:	4817      	ldr	r0, [pc, #92]	; (23414 <z_unpend_thread_no_timeout+0x80>)
   233b8:	f008 fe7d 	bl	2c0b6 <printk>
   233bc:	4912      	ldr	r1, [pc, #72]	; (23408 <z_unpend_thread_no_timeout+0x74>)
   233be:	4816      	ldr	r0, [pc, #88]	; (23418 <z_unpend_thread_no_timeout+0x84>)
   233c0:	f008 fe79 	bl	2c0b6 <printk>
   233c4:	215c      	movs	r1, #92	; 0x5c
   233c6:	4811      	ldr	r0, [pc, #68]	; (2340c <z_unpend_thread_no_timeout+0x78>)
   233c8:	f009 f892 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   233cc:	480e      	ldr	r0, [pc, #56]	; (23408 <z_unpend_thread_no_timeout+0x74>)
   233ce:	f001 faf9 	bl	249c4 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   233d2:	4620      	mov	r0, r4
   233d4:	f00b f95a 	bl	2e68c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   233d8:	480b      	ldr	r0, [pc, #44]	; (23408 <z_unpend_thread_no_timeout+0x74>)
   233da:	f001 fae3 	bl	249a4 <z_spin_unlock_valid>
   233de:	b968      	cbnz	r0, 233fc <z_unpend_thread_no_timeout+0x68>
   233e0:	2384      	movs	r3, #132	; 0x84
   233e2:	4a0a      	ldr	r2, [pc, #40]	; (2340c <z_unpend_thread_no_timeout+0x78>)
   233e4:	490d      	ldr	r1, [pc, #52]	; (2341c <z_unpend_thread_no_timeout+0x88>)
   233e6:	480b      	ldr	r0, [pc, #44]	; (23414 <z_unpend_thread_no_timeout+0x80>)
   233e8:	f008 fe65 	bl	2c0b6 <printk>
   233ec:	4906      	ldr	r1, [pc, #24]	; (23408 <z_unpend_thread_no_timeout+0x74>)
   233ee:	480c      	ldr	r0, [pc, #48]	; (23420 <z_unpend_thread_no_timeout+0x8c>)
   233f0:	f008 fe61 	bl	2c0b6 <printk>
   233f4:	2184      	movs	r1, #132	; 0x84
   233f6:	4805      	ldr	r0, [pc, #20]	; (2340c <z_unpend_thread_no_timeout+0x78>)
   233f8:	f009 f87a 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   233fc:	f385 8811 	msr	BASEPRI, r5
   23400:	f3bf 8f6f 	isb	sy
	}
}
   23404:	bd38      	pop	{r3, r4, r5, pc}
   23406:	bf00      	nop
   23408:	20021df4 	.word	0x20021df4
   2340c:	000301cf 	.word	0x000301cf
   23410:	00030221 	.word	0x00030221
   23414:	000300ff 	.word	0x000300ff
   23418:	00030236 	.word	0x00030236
   2341c:	000301f5 	.word	0x000301f5
   23420:	0003020c 	.word	0x0003020c

00023424 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   23424:	b538      	push	{r3, r4, r5, lr}
   23426:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   23428:	460d      	mov	r5, r1
   2342a:	b9e9      	cbnz	r1, 23468 <z_reschedule+0x44>
   2342c:	f3ef 8305 	mrs	r3, IPSR
   23430:	b9d3      	cbnz	r3, 23468 <z_reschedule+0x44>
	return _kernel.ready_q.cache;
   23432:	4b19      	ldr	r3, [pc, #100]	; (23498 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   23434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   23436:	689b      	ldr	r3, [r3, #8]
   23438:	429a      	cmp	r2, r3
   2343a:	d015      	beq.n	23468 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2343c:	f001 fab2 	bl	249a4 <z_spin_unlock_valid>
   23440:	b968      	cbnz	r0, 2345e <z_reschedule+0x3a>
   23442:	239b      	movs	r3, #155	; 0x9b
   23444:	4a15      	ldr	r2, [pc, #84]	; (2349c <z_reschedule+0x78>)
   23446:	4916      	ldr	r1, [pc, #88]	; (234a0 <z_reschedule+0x7c>)
   23448:	4816      	ldr	r0, [pc, #88]	; (234a4 <z_reschedule+0x80>)
   2344a:	f008 fe34 	bl	2c0b6 <printk>
   2344e:	4621      	mov	r1, r4
   23450:	4815      	ldr	r0, [pc, #84]	; (234a8 <z_reschedule+0x84>)
   23452:	f008 fe30 	bl	2c0b6 <printk>
   23456:	219b      	movs	r1, #155	; 0x9b
   23458:	4810      	ldr	r0, [pc, #64]	; (2349c <z_reschedule+0x78>)
   2345a:	f009 f849 	bl	2c4f0 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   2345e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   23462:	2000      	movs	r0, #0
   23464:	f7f1 b894 	b.w	14590 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23468:	4620      	mov	r0, r4
   2346a:	f001 fa9b 	bl	249a4 <z_spin_unlock_valid>
   2346e:	b968      	cbnz	r0, 2348c <z_reschedule+0x68>
   23470:	2384      	movs	r3, #132	; 0x84
   23472:	4a0a      	ldr	r2, [pc, #40]	; (2349c <z_reschedule+0x78>)
   23474:	490a      	ldr	r1, [pc, #40]	; (234a0 <z_reschedule+0x7c>)
   23476:	480b      	ldr	r0, [pc, #44]	; (234a4 <z_reschedule+0x80>)
   23478:	f008 fe1d 	bl	2c0b6 <printk>
   2347c:	4621      	mov	r1, r4
   2347e:	480a      	ldr	r0, [pc, #40]	; (234a8 <z_reschedule+0x84>)
   23480:	f008 fe19 	bl	2c0b6 <printk>
   23484:	2184      	movs	r1, #132	; 0x84
   23486:	4805      	ldr	r0, [pc, #20]	; (2349c <z_reschedule+0x78>)
   23488:	f009 f832 	bl	2c4f0 <assert_post_action>
   2348c:	f385 8811 	msr	BASEPRI, r5
   23490:	f3bf 8f6f 	isb	sy
   23494:	bd38      	pop	{r3, r4, r5, pc}
   23496:	bf00      	nop
   23498:	20021dbc 	.word	0x20021dbc
   2349c:	000301cf 	.word	0x000301cf
   234a0:	000301f5 	.word	0x000301f5
   234a4:	000300ff 	.word	0x000300ff
   234a8:	0003020c 	.word	0x0003020c

000234ac <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   234ac:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   234ae:	f04f 0320 	mov.w	r3, #32
   234b2:	f3ef 8511 	mrs	r5, BASEPRI
   234b6:	f383 8811 	msr	BASEPRI, r3
   234ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   234be:	482b      	ldr	r0, [pc, #172]	; (2356c <k_sched_lock+0xc0>)
   234c0:	f001 fa62 	bl	24988 <z_spin_lock_valid>
   234c4:	b968      	cbnz	r0, 234e2 <k_sched_lock+0x36>
   234c6:	235c      	movs	r3, #92	; 0x5c
   234c8:	4a29      	ldr	r2, [pc, #164]	; (23570 <k_sched_lock+0xc4>)
   234ca:	492a      	ldr	r1, [pc, #168]	; (23574 <k_sched_lock+0xc8>)
   234cc:	482a      	ldr	r0, [pc, #168]	; (23578 <k_sched_lock+0xcc>)
   234ce:	f008 fdf2 	bl	2c0b6 <printk>
   234d2:	4926      	ldr	r1, [pc, #152]	; (2356c <k_sched_lock+0xc0>)
   234d4:	4829      	ldr	r0, [pc, #164]	; (2357c <k_sched_lock+0xd0>)
   234d6:	f008 fdee 	bl	2c0b6 <printk>
   234da:	215c      	movs	r1, #92	; 0x5c
   234dc:	4824      	ldr	r0, [pc, #144]	; (23570 <k_sched_lock+0xc4>)
   234de:	f009 f807 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   234e2:	4822      	ldr	r0, [pc, #136]	; (2356c <k_sched_lock+0xc0>)
   234e4:	f001 fa6e 	bl	249c4 <z_spin_lock_set_owner>
   234e8:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   234ec:	b173      	cbz	r3, 2350c <k_sched_lock+0x60>
   234ee:	4924      	ldr	r1, [pc, #144]	; (23580 <k_sched_lock+0xd4>)
   234f0:	f44f 7386 	mov.w	r3, #268	; 0x10c
   234f4:	4a23      	ldr	r2, [pc, #140]	; (23584 <k_sched_lock+0xd8>)
   234f6:	4820      	ldr	r0, [pc, #128]	; (23578 <k_sched_lock+0xcc>)
   234f8:	f008 fddd 	bl	2c0b6 <printk>
   234fc:	4822      	ldr	r0, [pc, #136]	; (23588 <k_sched_lock+0xdc>)
   234fe:	f008 fdda 	bl	2c0b6 <printk>
   23502:	f44f 7186 	mov.w	r1, #268	; 0x10c
   23506:	481f      	ldr	r0, [pc, #124]	; (23584 <k_sched_lock+0xd8>)
   23508:	f008 fff2 	bl	2c4f0 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   2350c:	4c1f      	ldr	r4, [pc, #124]	; (2358c <k_sched_lock+0xe0>)
   2350e:	68a2      	ldr	r2, [r4, #8]
   23510:	7bd2      	ldrb	r2, [r2, #15]
   23512:	2a01      	cmp	r2, #1
   23514:	d10e      	bne.n	23534 <k_sched_lock+0x88>
   23516:	491e      	ldr	r1, [pc, #120]	; (23590 <k_sched_lock+0xe4>)
   23518:	f240 130d 	movw	r3, #269	; 0x10d
   2351c:	4a19      	ldr	r2, [pc, #100]	; (23584 <k_sched_lock+0xd8>)
   2351e:	4816      	ldr	r0, [pc, #88]	; (23578 <k_sched_lock+0xcc>)
   23520:	f008 fdc9 	bl	2c0b6 <printk>
   23524:	4818      	ldr	r0, [pc, #96]	; (23588 <k_sched_lock+0xdc>)
   23526:	f008 fdc6 	bl	2c0b6 <printk>
   2352a:	f240 110d 	movw	r1, #269	; 0x10d
   2352e:	4815      	ldr	r0, [pc, #84]	; (23584 <k_sched_lock+0xd8>)
   23530:	f008 ffde 	bl	2c4f0 <assert_post_action>
	--_current->base.sched_locked;
   23534:	68a2      	ldr	r2, [r4, #8]
   23536:	7bd3      	ldrb	r3, [r2, #15]
   23538:	3b01      	subs	r3, #1
   2353a:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2353c:	480b      	ldr	r0, [pc, #44]	; (2356c <k_sched_lock+0xc0>)
   2353e:	f001 fa31 	bl	249a4 <z_spin_unlock_valid>
   23542:	b968      	cbnz	r0, 23560 <k_sched_lock+0xb4>
   23544:	2384      	movs	r3, #132	; 0x84
   23546:	4a0a      	ldr	r2, [pc, #40]	; (23570 <k_sched_lock+0xc4>)
   23548:	4912      	ldr	r1, [pc, #72]	; (23594 <k_sched_lock+0xe8>)
   2354a:	480b      	ldr	r0, [pc, #44]	; (23578 <k_sched_lock+0xcc>)
   2354c:	f008 fdb3 	bl	2c0b6 <printk>
   23550:	4906      	ldr	r1, [pc, #24]	; (2356c <k_sched_lock+0xc0>)
   23552:	4811      	ldr	r0, [pc, #68]	; (23598 <k_sched_lock+0xec>)
   23554:	f008 fdaf 	bl	2c0b6 <printk>
   23558:	2184      	movs	r1, #132	; 0x84
   2355a:	4805      	ldr	r0, [pc, #20]	; (23570 <k_sched_lock+0xc4>)
   2355c:	f008 ffc8 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   23560:	f385 8811 	msr	BASEPRI, r5
   23564:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   23568:	bd38      	pop	{r3, r4, r5, pc}
   2356a:	bf00      	nop
   2356c:	20021df4 	.word	0x20021df4
   23570:	000301cf 	.word	0x000301cf
   23574:	00030221 	.word	0x00030221
   23578:	000300ff 	.word	0x000300ff
   2357c:	00030236 	.word	0x00030236
   23580:	00032aaa 	.word	0x00032aaa
   23584:	00032af8 	.word	0x00032af8
   23588:	0003072c 	.word	0x0003072c
   2358c:	20021dbc 	.word	0x20021dbc
   23590:	00032b23 	.word	0x00032b23
   23594:	000301f5 	.word	0x000301f5
   23598:	0003020c 	.word	0x0003020c

0002359c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   2359c:	4b11      	ldr	r3, [pc, #68]	; (235e4 <z_priq_dumb_remove+0x48>)
{
   2359e:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   235a0:	f103 0228 	add.w	r2, r3, #40	; 0x28
   235a4:	4282      	cmp	r2, r0
{
   235a6:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   235a8:	d105      	bne.n	235b6 <z_priq_dumb_remove+0x1a>
   235aa:	689b      	ldr	r3, [r3, #8]
   235ac:	428b      	cmp	r3, r1
   235ae:	d102      	bne.n	235b6 <z_priq_dumb_remove+0x1a>
   235b0:	7b4b      	ldrb	r3, [r1, #13]
   235b2:	06db      	lsls	r3, r3, #27
   235b4:	d115      	bne.n	235e2 <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   235b6:	4b0c      	ldr	r3, [pc, #48]	; (235e8 <z_priq_dumb_remove+0x4c>)
   235b8:	429c      	cmp	r4, r3
   235ba:	d10b      	bne.n	235d4 <z_priq_dumb_remove+0x38>
   235bc:	490b      	ldr	r1, [pc, #44]	; (235ec <z_priq_dumb_remove+0x50>)
   235be:	480c      	ldr	r0, [pc, #48]	; (235f0 <z_priq_dumb_remove+0x54>)
   235c0:	f240 339f 	movw	r3, #927	; 0x39f
   235c4:	4a0b      	ldr	r2, [pc, #44]	; (235f4 <z_priq_dumb_remove+0x58>)
   235c6:	f008 fd76 	bl	2c0b6 <printk>
   235ca:	f240 319f 	movw	r1, #927	; 0x39f
   235ce:	4809      	ldr	r0, [pc, #36]	; (235f4 <z_priq_dumb_remove+0x58>)
   235d0:	f008 ff8e 	bl	2c4f0 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   235d4:	e9d4 3200 	ldrd	r3, r2, [r4]
   235d8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   235da:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   235dc:	2300      	movs	r3, #0
	node->prev = NULL;
   235de:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   235e2:	bd10      	pop	{r4, pc}
   235e4:	20021dbc 	.word	0x20021dbc
   235e8:	200211b8 	.word	0x200211b8
   235ec:	00032b8c 	.word	0x00032b8c
   235f0:	000300ff 	.word	0x000300ff
   235f4:	00032b53 	.word	0x00032b53

000235f8 <z_unpend_thread>:
{
   235f8:	b538      	push	{r3, r4, r5, lr}
   235fa:	4604      	mov	r4, r0
	__asm__ volatile(
   235fc:	f04f 0320 	mov.w	r3, #32
   23600:	f3ef 8511 	mrs	r5, BASEPRI
   23604:	f383 8811 	msr	BASEPRI, r3
   23608:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2360c:	4819      	ldr	r0, [pc, #100]	; (23674 <z_unpend_thread+0x7c>)
   2360e:	f001 f9bb 	bl	24988 <z_spin_lock_valid>
   23612:	b968      	cbnz	r0, 23630 <z_unpend_thread+0x38>
   23614:	235c      	movs	r3, #92	; 0x5c
   23616:	4a18      	ldr	r2, [pc, #96]	; (23678 <z_unpend_thread+0x80>)
   23618:	4918      	ldr	r1, [pc, #96]	; (2367c <z_unpend_thread+0x84>)
   2361a:	4819      	ldr	r0, [pc, #100]	; (23680 <z_unpend_thread+0x88>)
   2361c:	f008 fd4b 	bl	2c0b6 <printk>
   23620:	4914      	ldr	r1, [pc, #80]	; (23674 <z_unpend_thread+0x7c>)
   23622:	4818      	ldr	r0, [pc, #96]	; (23684 <z_unpend_thread+0x8c>)
   23624:	f008 fd47 	bl	2c0b6 <printk>
   23628:	215c      	movs	r1, #92	; 0x5c
   2362a:	4813      	ldr	r0, [pc, #76]	; (23678 <z_unpend_thread+0x80>)
   2362c:	f008 ff60 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   23630:	4810      	ldr	r0, [pc, #64]	; (23674 <z_unpend_thread+0x7c>)
   23632:	f001 f9c7 	bl	249c4 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   23636:	4620      	mov	r0, r4
   23638:	f00b f828 	bl	2e68c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2363c:	480d      	ldr	r0, [pc, #52]	; (23674 <z_unpend_thread+0x7c>)
   2363e:	f001 f9b1 	bl	249a4 <z_spin_unlock_valid>
   23642:	b968      	cbnz	r0, 23660 <z_unpend_thread+0x68>
   23644:	2384      	movs	r3, #132	; 0x84
   23646:	4a0c      	ldr	r2, [pc, #48]	; (23678 <z_unpend_thread+0x80>)
   23648:	490f      	ldr	r1, [pc, #60]	; (23688 <z_unpend_thread+0x90>)
   2364a:	480d      	ldr	r0, [pc, #52]	; (23680 <z_unpend_thread+0x88>)
   2364c:	f008 fd33 	bl	2c0b6 <printk>
   23650:	4908      	ldr	r1, [pc, #32]	; (23674 <z_unpend_thread+0x7c>)
   23652:	480e      	ldr	r0, [pc, #56]	; (2368c <z_unpend_thread+0x94>)
   23654:	f008 fd2f 	bl	2c0b6 <printk>
   23658:	2184      	movs	r1, #132	; 0x84
   2365a:	4807      	ldr	r0, [pc, #28]	; (23678 <z_unpend_thread+0x80>)
   2365c:	f008 ff48 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   23660:	f385 8811 	msr	BASEPRI, r5
   23664:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   23668:	f104 0018 	add.w	r0, r4, #24
}
   2366c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23670:	f001 bb82 	b.w	24d78 <z_abort_timeout>
   23674:	20021df4 	.word	0x20021df4
   23678:	000301cf 	.word	0x000301cf
   2367c:	00030221 	.word	0x00030221
   23680:	000300ff 	.word	0x000300ff
   23684:	00030236 	.word	0x00030236
   23688:	000301f5 	.word	0x000301f5
   2368c:	0003020c 	.word	0x0003020c

00023690 <update_cache>:
{
   23690:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   23692:	4c10      	ldr	r4, [pc, #64]	; (236d4 <update_cache+0x44>)
{
   23694:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   23696:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2369a:	f00b f806 	bl	2e6aa <z_priq_dumb_best>
   2369e:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   236a0:	68a3      	ldr	r3, [r4, #8]
   236a2:	7b59      	ldrb	r1, [r3, #13]
   236a4:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   236a6:	bf44      	itt	mi
   236a8:	f041 0108 	orrmi.w	r1, r1, #8
   236ac:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   236ae:	b905      	cbnz	r5, 236b2 <update_cache+0x22>
   236b0:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   236b2:	b94e      	cbnz	r6, 236c8 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   236b4:	7b5a      	ldrb	r2, [r3, #13]
   236b6:	06d2      	lsls	r2, r2, #27
   236b8:	d106      	bne.n	236c8 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   236ba:	69aa      	ldr	r2, [r5, #24]
   236bc:	b922      	cbnz	r2, 236c8 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   236be:	89da      	ldrh	r2, [r3, #14]
   236c0:	2a7f      	cmp	r2, #127	; 0x7f
   236c2:	d901      	bls.n	236c8 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   236c4:	6263      	str	r3, [r4, #36]	; 0x24
}
   236c6:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   236c8:	42ab      	cmp	r3, r5
   236ca:	d001      	beq.n	236d0 <update_cache+0x40>
			z_reset_time_slice();
   236cc:	f7ff fda2 	bl	23214 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   236d0:	6265      	str	r5, [r4, #36]	; 0x24
}
   236d2:	e7f8      	b.n	236c6 <update_cache+0x36>
   236d4:	20021dbc 	.word	0x20021dbc

000236d8 <k_sched_unlock>:
{
   236d8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   236da:	f04f 0320 	mov.w	r3, #32
   236de:	f3ef 8511 	mrs	r5, BASEPRI
   236e2:	f383 8811 	msr	BASEPRI, r3
   236e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   236ea:	482d      	ldr	r0, [pc, #180]	; (237a0 <k_sched_unlock+0xc8>)
   236ec:	f001 f94c 	bl	24988 <z_spin_lock_valid>
   236f0:	b968      	cbnz	r0, 2370e <k_sched_unlock+0x36>
   236f2:	235c      	movs	r3, #92	; 0x5c
   236f4:	4a2b      	ldr	r2, [pc, #172]	; (237a4 <k_sched_unlock+0xcc>)
   236f6:	492c      	ldr	r1, [pc, #176]	; (237a8 <k_sched_unlock+0xd0>)
   236f8:	482c      	ldr	r0, [pc, #176]	; (237ac <k_sched_unlock+0xd4>)
   236fa:	f008 fcdc 	bl	2c0b6 <printk>
   236fe:	4928      	ldr	r1, [pc, #160]	; (237a0 <k_sched_unlock+0xc8>)
   23700:	482b      	ldr	r0, [pc, #172]	; (237b0 <k_sched_unlock+0xd8>)
   23702:	f008 fcd8 	bl	2c0b6 <printk>
   23706:	215c      	movs	r1, #92	; 0x5c
   23708:	4826      	ldr	r0, [pc, #152]	; (237a4 <k_sched_unlock+0xcc>)
   2370a:	f008 fef1 	bl	2c4f0 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   2370e:	4c29      	ldr	r4, [pc, #164]	; (237b4 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   23710:	4823      	ldr	r0, [pc, #140]	; (237a0 <k_sched_unlock+0xc8>)
   23712:	f001 f957 	bl	249c4 <z_spin_lock_set_owner>
   23716:	68a2      	ldr	r2, [r4, #8]
   23718:	7bd2      	ldrb	r2, [r2, #15]
   2371a:	b972      	cbnz	r2, 2373a <k_sched_unlock+0x62>
   2371c:	4926      	ldr	r1, [pc, #152]	; (237b8 <k_sched_unlock+0xe0>)
   2371e:	f240 333a 	movw	r3, #826	; 0x33a
   23722:	4a26      	ldr	r2, [pc, #152]	; (237bc <k_sched_unlock+0xe4>)
   23724:	4821      	ldr	r0, [pc, #132]	; (237ac <k_sched_unlock+0xd4>)
   23726:	f008 fcc6 	bl	2c0b6 <printk>
   2372a:	4825      	ldr	r0, [pc, #148]	; (237c0 <k_sched_unlock+0xe8>)
   2372c:	f008 fcc3 	bl	2c0b6 <printk>
   23730:	f240 313a 	movw	r1, #826	; 0x33a
   23734:	4821      	ldr	r0, [pc, #132]	; (237bc <k_sched_unlock+0xe4>)
   23736:	f008 fedb 	bl	2c4f0 <assert_post_action>
   2373a:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   2373e:	b173      	cbz	r3, 2375e <k_sched_unlock+0x86>
   23740:	4920      	ldr	r1, [pc, #128]	; (237c4 <k_sched_unlock+0xec>)
   23742:	f240 333b 	movw	r3, #827	; 0x33b
   23746:	4a1d      	ldr	r2, [pc, #116]	; (237bc <k_sched_unlock+0xe4>)
   23748:	4818      	ldr	r0, [pc, #96]	; (237ac <k_sched_unlock+0xd4>)
   2374a:	f008 fcb4 	bl	2c0b6 <printk>
   2374e:	481c      	ldr	r0, [pc, #112]	; (237c0 <k_sched_unlock+0xe8>)
   23750:	f008 fcb1 	bl	2c0b6 <printk>
   23754:	f240 313b 	movw	r1, #827	; 0x33b
   23758:	4818      	ldr	r0, [pc, #96]	; (237bc <k_sched_unlock+0xe4>)
   2375a:	f008 fec9 	bl	2c4f0 <assert_post_action>
		++_current->base.sched_locked;
   2375e:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   23760:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   23762:	7bd3      	ldrb	r3, [r2, #15]
   23764:	3301      	adds	r3, #1
   23766:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   23768:	f7ff ff92 	bl	23690 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2376c:	480c      	ldr	r0, [pc, #48]	; (237a0 <k_sched_unlock+0xc8>)
   2376e:	f001 f919 	bl	249a4 <z_spin_unlock_valid>
   23772:	b968      	cbnz	r0, 23790 <k_sched_unlock+0xb8>
   23774:	2384      	movs	r3, #132	; 0x84
   23776:	4a0b      	ldr	r2, [pc, #44]	; (237a4 <k_sched_unlock+0xcc>)
   23778:	4913      	ldr	r1, [pc, #76]	; (237c8 <k_sched_unlock+0xf0>)
   2377a:	480c      	ldr	r0, [pc, #48]	; (237ac <k_sched_unlock+0xd4>)
   2377c:	f008 fc9b 	bl	2c0b6 <printk>
   23780:	4907      	ldr	r1, [pc, #28]	; (237a0 <k_sched_unlock+0xc8>)
   23782:	4812      	ldr	r0, [pc, #72]	; (237cc <k_sched_unlock+0xf4>)
   23784:	f008 fc97 	bl	2c0b6 <printk>
   23788:	2184      	movs	r1, #132	; 0x84
   2378a:	4806      	ldr	r0, [pc, #24]	; (237a4 <k_sched_unlock+0xcc>)
   2378c:	f008 feb0 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   23790:	f385 8811 	msr	BASEPRI, r5
   23794:	f3bf 8f6f 	isb	sy
}
   23798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   2379c:	f00a bf6c 	b.w	2e678 <z_reschedule_unlocked>
   237a0:	20021df4 	.word	0x20021df4
   237a4:	000301cf 	.word	0x000301cf
   237a8:	00030221 	.word	0x00030221
   237ac:	000300ff 	.word	0x000300ff
   237b0:	00030236 	.word	0x00030236
   237b4:	20021dbc 	.word	0x20021dbc
   237b8:	00032bad 	.word	0x00032bad
   237bc:	00032b53 	.word	0x00032b53
   237c0:	0003072c 	.word	0x0003072c
   237c4:	00032aaa 	.word	0x00032aaa
   237c8:	000301f5 	.word	0x000301f5
   237cc:	0003020c 	.word	0x0003020c

000237d0 <ready_thread>:
{
   237d0:	b570      	push	{r4, r5, r6, lr}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   237d2:	7b43      	ldrb	r3, [r0, #13]
   237d4:	4604      	mov	r4, r0
   237d6:	06db      	lsls	r3, r3, #27
   237d8:	d13d      	bne.n	23856 <ready_thread+0x86>
	return !sys_dnode_is_linked(&t->node);
   237da:	6985      	ldr	r5, [r0, #24]
	if (z_is_thread_ready(thread)) {
   237dc:	2d00      	cmp	r5, #0
   237de:	d13a      	bne.n	23856 <ready_thread+0x86>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   237e0:	4b1d      	ldr	r3, [pc, #116]	; (23858 <ready_thread+0x88>)
   237e2:	4298      	cmp	r0, r3
   237e4:	d10b      	bne.n	237fe <ready_thread+0x2e>
   237e6:	491d      	ldr	r1, [pc, #116]	; (2385c <ready_thread+0x8c>)
   237e8:	481d      	ldr	r0, [pc, #116]	; (23860 <ready_thread+0x90>)
   237ea:	f240 3389 	movw	r3, #905	; 0x389
   237ee:	4a1d      	ldr	r2, [pc, #116]	; (23864 <ready_thread+0x94>)
   237f0:	f008 fc61 	bl	2c0b6 <printk>
   237f4:	f240 3189 	movw	r1, #905	; 0x389
   237f8:	481a      	ldr	r0, [pc, #104]	; (23864 <ready_thread+0x94>)
   237fa:	f008 fe79 	bl	2c4f0 <assert_post_action>
	return list->head == list;
   237fe:	4a1a      	ldr	r2, [pc, #104]	; (23868 <ready_thread+0x98>)
   23800:	4613      	mov	r3, r2
   23802:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23806:	4298      	cmp	r0, r3
   23808:	bf18      	it	ne
   2380a:	4605      	movne	r5, r0
   2380c:	2d00      	cmp	r5, #0
   2380e:	4619      	mov	r1, r3
   23810:	462b      	mov	r3, r5
   23812:	bf38      	it	cc
   23814:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23816:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23818:	b1bb      	cbz	r3, 2384a <ready_thread+0x7a>
	if (thread_1->base.prio < thread_2->base.prio) {
   2381a:	f994 600e 	ldrsb.w	r6, [r4, #14]
   2381e:	f993 500e 	ldrsb.w	r5, [r3, #14]
   23822:	42ae      	cmp	r6, r5
   23824:	db03      	blt.n	2382e <ready_thread+0x5e>
	return (node == list->tail) ? NULL : node->next;
   23826:	4298      	cmp	r0, r3
   23828:	d00f      	beq.n	2384a <ready_thread+0x7a>
   2382a:	681b      	ldr	r3, [r3, #0]
   2382c:	e7f4      	b.n	23818 <ready_thread+0x48>
	node->prev = successor->prev;
   2382e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23830:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   23834:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23836:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   23838:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   2383a:	2000      	movs	r0, #0
   2383c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23840:	7363      	strb	r3, [r4, #13]
}
   23842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   23846:	f7ff bf23 	b.w	23690 <update_cache>
	node->prev = list->tail;
   2384a:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   2384e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   23850:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23852:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   23854:	e7f0      	b.n	23838 <ready_thread+0x68>
}
   23856:	bd70      	pop	{r4, r5, r6, pc}
   23858:	200211b8 	.word	0x200211b8
   2385c:	00032b8c 	.word	0x00032b8c
   23860:	000300ff 	.word	0x000300ff
   23864:	00032b53 	.word	0x00032b53
   23868:	20021dbc 	.word	0x20021dbc

0002386c <z_ready_thread>:
{
   2386c:	b538      	push	{r3, r4, r5, lr}
   2386e:	4604      	mov	r4, r0
	__asm__ volatile(
   23870:	f04f 0320 	mov.w	r3, #32
   23874:	f3ef 8511 	mrs	r5, BASEPRI
   23878:	f383 8811 	msr	BASEPRI, r3
   2387c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23880:	4817      	ldr	r0, [pc, #92]	; (238e0 <z_ready_thread+0x74>)
   23882:	f001 f881 	bl	24988 <z_spin_lock_valid>
   23886:	b968      	cbnz	r0, 238a4 <z_ready_thread+0x38>
   23888:	235c      	movs	r3, #92	; 0x5c
   2388a:	4a16      	ldr	r2, [pc, #88]	; (238e4 <z_ready_thread+0x78>)
   2388c:	4916      	ldr	r1, [pc, #88]	; (238e8 <z_ready_thread+0x7c>)
   2388e:	4817      	ldr	r0, [pc, #92]	; (238ec <z_ready_thread+0x80>)
   23890:	f008 fc11 	bl	2c0b6 <printk>
   23894:	4912      	ldr	r1, [pc, #72]	; (238e0 <z_ready_thread+0x74>)
   23896:	4816      	ldr	r0, [pc, #88]	; (238f0 <z_ready_thread+0x84>)
   23898:	f008 fc0d 	bl	2c0b6 <printk>
   2389c:	215c      	movs	r1, #92	; 0x5c
   2389e:	4811      	ldr	r0, [pc, #68]	; (238e4 <z_ready_thread+0x78>)
   238a0:	f008 fe26 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   238a4:	480e      	ldr	r0, [pc, #56]	; (238e0 <z_ready_thread+0x74>)
   238a6:	f001 f88d 	bl	249c4 <z_spin_lock_set_owner>
		ready_thread(thread);
   238aa:	4620      	mov	r0, r4
   238ac:	f7ff ff90 	bl	237d0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   238b0:	480b      	ldr	r0, [pc, #44]	; (238e0 <z_ready_thread+0x74>)
   238b2:	f001 f877 	bl	249a4 <z_spin_unlock_valid>
   238b6:	b968      	cbnz	r0, 238d4 <z_ready_thread+0x68>
   238b8:	2384      	movs	r3, #132	; 0x84
   238ba:	4a0a      	ldr	r2, [pc, #40]	; (238e4 <z_ready_thread+0x78>)
   238bc:	490d      	ldr	r1, [pc, #52]	; (238f4 <z_ready_thread+0x88>)
   238be:	480b      	ldr	r0, [pc, #44]	; (238ec <z_ready_thread+0x80>)
   238c0:	f008 fbf9 	bl	2c0b6 <printk>
   238c4:	4906      	ldr	r1, [pc, #24]	; (238e0 <z_ready_thread+0x74>)
   238c6:	480c      	ldr	r0, [pc, #48]	; (238f8 <z_ready_thread+0x8c>)
   238c8:	f008 fbf5 	bl	2c0b6 <printk>
   238cc:	2184      	movs	r1, #132	; 0x84
   238ce:	4805      	ldr	r0, [pc, #20]	; (238e4 <z_ready_thread+0x78>)
   238d0:	f008 fe0e 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   238d4:	f385 8811 	msr	BASEPRI, r5
   238d8:	f3bf 8f6f 	isb	sy
}
   238dc:	bd38      	pop	{r3, r4, r5, pc}
   238de:	bf00      	nop
   238e0:	20021df4 	.word	0x20021df4
   238e4:	000301cf 	.word	0x000301cf
   238e8:	00030221 	.word	0x00030221
   238ec:	000300ff 	.word	0x000300ff
   238f0:	00030236 	.word	0x00030236
   238f4:	000301f5 	.word	0x000301f5
   238f8:	0003020c 	.word	0x0003020c

000238fc <z_sched_start>:
{
   238fc:	b538      	push	{r3, r4, r5, lr}
   238fe:	4604      	mov	r4, r0
	__asm__ volatile(
   23900:	f04f 0320 	mov.w	r3, #32
   23904:	f3ef 8511 	mrs	r5, BASEPRI
   23908:	f383 8811 	msr	BASEPRI, r3
   2390c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23910:	481d      	ldr	r0, [pc, #116]	; (23988 <z_sched_start+0x8c>)
   23912:	f001 f839 	bl	24988 <z_spin_lock_valid>
   23916:	b968      	cbnz	r0, 23934 <z_sched_start+0x38>
   23918:	235c      	movs	r3, #92	; 0x5c
   2391a:	4a1c      	ldr	r2, [pc, #112]	; (2398c <z_sched_start+0x90>)
   2391c:	491c      	ldr	r1, [pc, #112]	; (23990 <z_sched_start+0x94>)
   2391e:	481d      	ldr	r0, [pc, #116]	; (23994 <z_sched_start+0x98>)
   23920:	f008 fbc9 	bl	2c0b6 <printk>
   23924:	4918      	ldr	r1, [pc, #96]	; (23988 <z_sched_start+0x8c>)
   23926:	481c      	ldr	r0, [pc, #112]	; (23998 <z_sched_start+0x9c>)
   23928:	f008 fbc5 	bl	2c0b6 <printk>
   2392c:	215c      	movs	r1, #92	; 0x5c
   2392e:	4817      	ldr	r0, [pc, #92]	; (2398c <z_sched_start+0x90>)
   23930:	f008 fdde 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   23934:	4814      	ldr	r0, [pc, #80]	; (23988 <z_sched_start+0x8c>)
   23936:	f001 f845 	bl	249c4 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   2393a:	7b63      	ldrb	r3, [r4, #13]
   2393c:	075a      	lsls	r2, r3, #29
   2393e:	d416      	bmi.n	2396e <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23940:	4811      	ldr	r0, [pc, #68]	; (23988 <z_sched_start+0x8c>)
   23942:	f001 f82f 	bl	249a4 <z_spin_unlock_valid>
   23946:	b968      	cbnz	r0, 23964 <z_sched_start+0x68>
   23948:	2384      	movs	r3, #132	; 0x84
   2394a:	4a10      	ldr	r2, [pc, #64]	; (2398c <z_sched_start+0x90>)
   2394c:	4913      	ldr	r1, [pc, #76]	; (2399c <z_sched_start+0xa0>)
   2394e:	4811      	ldr	r0, [pc, #68]	; (23994 <z_sched_start+0x98>)
   23950:	f008 fbb1 	bl	2c0b6 <printk>
   23954:	490c      	ldr	r1, [pc, #48]	; (23988 <z_sched_start+0x8c>)
   23956:	4812      	ldr	r0, [pc, #72]	; (239a0 <z_sched_start+0xa4>)
   23958:	f008 fbad 	bl	2c0b6 <printk>
   2395c:	2184      	movs	r1, #132	; 0x84
   2395e:	480b      	ldr	r0, [pc, #44]	; (2398c <z_sched_start+0x90>)
   23960:	f008 fdc6 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   23964:	f385 8811 	msr	BASEPRI, r5
   23968:	f3bf 8f6f 	isb	sy
}
   2396c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2396e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   23972:	4620      	mov	r0, r4
   23974:	7363      	strb	r3, [r4, #13]
   23976:	f7ff ff2b 	bl	237d0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2397a:	4629      	mov	r1, r5
}
   2397c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   23980:	4801      	ldr	r0, [pc, #4]	; (23988 <z_sched_start+0x8c>)
   23982:	f7ff bd4f 	b.w	23424 <z_reschedule>
   23986:	bf00      	nop
   23988:	20021df4 	.word	0x20021df4
   2398c:	000301cf 	.word	0x000301cf
   23990:	00030221 	.word	0x00030221
   23994:	000300ff 	.word	0x000300ff
   23998:	00030236 	.word	0x00030236
   2399c:	000301f5 	.word	0x000301f5
   239a0:	0003020c 	.word	0x0003020c

000239a4 <z_thread_timeout>:
{
   239a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   239a6:	4604      	mov	r4, r0
	__asm__ volatile(
   239a8:	f04f 0320 	mov.w	r3, #32
   239ac:	f3ef 8511 	mrs	r5, BASEPRI
   239b0:	f383 8811 	msr	BASEPRI, r3
   239b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   239b8:	481e      	ldr	r0, [pc, #120]	; (23a34 <z_thread_timeout+0x90>)
   239ba:	f000 ffe5 	bl	24988 <z_spin_lock_valid>
   239be:	b968      	cbnz	r0, 239dc <z_thread_timeout+0x38>
   239c0:	235c      	movs	r3, #92	; 0x5c
   239c2:	4a1d      	ldr	r2, [pc, #116]	; (23a38 <z_thread_timeout+0x94>)
   239c4:	491d      	ldr	r1, [pc, #116]	; (23a3c <z_thread_timeout+0x98>)
   239c6:	481e      	ldr	r0, [pc, #120]	; (23a40 <z_thread_timeout+0x9c>)
   239c8:	f008 fb75 	bl	2c0b6 <printk>
   239cc:	4919      	ldr	r1, [pc, #100]	; (23a34 <z_thread_timeout+0x90>)
   239ce:	481d      	ldr	r0, [pc, #116]	; (23a44 <z_thread_timeout+0xa0>)
   239d0:	f008 fb71 	bl	2c0b6 <printk>
   239d4:	215c      	movs	r1, #92	; 0x5c
   239d6:	4818      	ldr	r0, [pc, #96]	; (23a38 <z_thread_timeout+0x94>)
   239d8:	f008 fd8a 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   239dc:	4815      	ldr	r0, [pc, #84]	; (23a34 <z_thread_timeout+0x90>)
   239de:	f000 fff1 	bl	249c4 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   239e2:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   239e6:	f1a4 0018 	sub.w	r0, r4, #24
		if (thread->base.pended_on != NULL) {
   239ea:	b11b      	cbz	r3, 239f4 <z_thread_timeout+0x50>
			unpend_thread_no_timeout(thread);
   239ec:	9001      	str	r0, [sp, #4]
   239ee:	f00a fe4d 	bl	2e68c <unpend_thread_no_timeout>
   239f2:	9801      	ldr	r0, [sp, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   239f4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   239f8:	f023 0314 	bic.w	r3, r3, #20
   239fc:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   23a00:	f7ff fee6 	bl	237d0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23a04:	480b      	ldr	r0, [pc, #44]	; (23a34 <z_thread_timeout+0x90>)
   23a06:	f000 ffcd 	bl	249a4 <z_spin_unlock_valid>
   23a0a:	b968      	cbnz	r0, 23a28 <z_thread_timeout+0x84>
   23a0c:	2384      	movs	r3, #132	; 0x84
   23a0e:	4a0a      	ldr	r2, [pc, #40]	; (23a38 <z_thread_timeout+0x94>)
   23a10:	490d      	ldr	r1, [pc, #52]	; (23a48 <z_thread_timeout+0xa4>)
   23a12:	480b      	ldr	r0, [pc, #44]	; (23a40 <z_thread_timeout+0x9c>)
   23a14:	f008 fb4f 	bl	2c0b6 <printk>
   23a18:	4906      	ldr	r1, [pc, #24]	; (23a34 <z_thread_timeout+0x90>)
   23a1a:	480c      	ldr	r0, [pc, #48]	; (23a4c <z_thread_timeout+0xa8>)
   23a1c:	f008 fb4b 	bl	2c0b6 <printk>
   23a20:	2184      	movs	r1, #132	; 0x84
   23a22:	4805      	ldr	r0, [pc, #20]	; (23a38 <z_thread_timeout+0x94>)
   23a24:	f008 fd64 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   23a28:	f385 8811 	msr	BASEPRI, r5
   23a2c:	f3bf 8f6f 	isb	sy
}
   23a30:	b003      	add	sp, #12
   23a32:	bd30      	pop	{r4, r5, pc}
   23a34:	20021df4 	.word	0x20021df4
   23a38:	000301cf 	.word	0x000301cf
   23a3c:	00030221 	.word	0x00030221
   23a40:	000300ff 	.word	0x000300ff
   23a44:	00030236 	.word	0x00030236
   23a48:	000301f5 	.word	0x000301f5
   23a4c:	0003020c 	.word	0x0003020c

00023a50 <move_thread_to_end_of_prio_q>:
{
   23a50:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   23a52:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   23a56:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   23a58:	2b00      	cmp	r3, #0
   23a5a:	da03      	bge.n	23a64 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   23a5c:	4601      	mov	r1, r0
   23a5e:	481f      	ldr	r0, [pc, #124]	; (23adc <move_thread_to_end_of_prio_q+0x8c>)
   23a60:	f7ff fd9c 	bl	2359c <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23a64:	4b1e      	ldr	r3, [pc, #120]	; (23ae0 <move_thread_to_end_of_prio_q+0x90>)
   23a66:	429c      	cmp	r4, r3
   23a68:	d10b      	bne.n	23a82 <move_thread_to_end_of_prio_q+0x32>
   23a6a:	491e      	ldr	r1, [pc, #120]	; (23ae4 <move_thread_to_end_of_prio_q+0x94>)
   23a6c:	481e      	ldr	r0, [pc, #120]	; (23ae8 <move_thread_to_end_of_prio_q+0x98>)
   23a6e:	f240 3389 	movw	r3, #905	; 0x389
   23a72:	4a1e      	ldr	r2, [pc, #120]	; (23aec <move_thread_to_end_of_prio_q+0x9c>)
   23a74:	f008 fb1f 	bl	2c0b6 <printk>
   23a78:	f240 3189 	movw	r1, #905	; 0x389
   23a7c:	481b      	ldr	r0, [pc, #108]	; (23aec <move_thread_to_end_of_prio_q+0x9c>)
   23a7e:	f008 fd37 	bl	2c4f0 <assert_post_action>
	return list->head == list;
   23a82:	4a1b      	ldr	r2, [pc, #108]	; (23af0 <move_thread_to_end_of_prio_q+0xa0>)
   23a84:	4611      	mov	r1, r2
   23a86:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23a8a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23a8c:	428b      	cmp	r3, r1
   23a8e:	bf08      	it	eq
   23a90:	2300      	moveq	r3, #0
   23a92:	2b00      	cmp	r3, #0
   23a94:	bf38      	it	cc
   23a96:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23a98:	b1d3      	cbz	r3, 23ad0 <move_thread_to_end_of_prio_q+0x80>
	if (thread_1->base.prio < thread_2->base.prio) {
   23a9a:	f994 600e 	ldrsb.w	r6, [r4, #14]
   23a9e:	f993 500e 	ldrsb.w	r5, [r3, #14]
   23aa2:	42ae      	cmp	r6, r5
   23aa4:	db03      	blt.n	23aae <move_thread_to_end_of_prio_q+0x5e>
	return (node == list->tail) ? NULL : node->next;
   23aa6:	4298      	cmp	r0, r3
   23aa8:	d012      	beq.n	23ad0 <move_thread_to_end_of_prio_q+0x80>
   23aaa:	681b      	ldr	r3, [r3, #0]
   23aac:	e7f4      	b.n	23a98 <move_thread_to_end_of_prio_q+0x48>
	node->prev = successor->prev;
   23aae:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   23ab0:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   23ab4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   23ab6:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   23ab8:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   23aba:	6890      	ldr	r0, [r2, #8]
   23abc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23ac0:	7363      	strb	r3, [r4, #13]
   23ac2:	1b03      	subs	r3, r0, r4
   23ac4:	4258      	negs	r0, r3
   23ac6:	4158      	adcs	r0, r3
}
   23ac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   23acc:	f7ff bde0 	b.w	23690 <update_cache>
	node->prev = list->tail;
   23ad0:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   23ad4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   23ad6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23ad8:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   23ada:	e7ed      	b.n	23ab8 <move_thread_to_end_of_prio_q+0x68>
   23adc:	20021de4 	.word	0x20021de4
   23ae0:	200211b8 	.word	0x200211b8
   23ae4:	00032b8c 	.word	0x00032b8c
   23ae8:	000300ff 	.word	0x000300ff
   23aec:	00032b53 	.word	0x00032b53
   23af0:	20021dbc 	.word	0x20021dbc

00023af4 <z_time_slice>:
{
   23af4:	b570      	push	{r4, r5, r6, lr}
   23af6:	4604      	mov	r4, r0
	__asm__ volatile(
   23af8:	f04f 0320 	mov.w	r3, #32
   23afc:	f3ef 8511 	mrs	r5, BASEPRI
   23b00:	f383 8811 	msr	BASEPRI, r3
   23b04:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23b08:	482a      	ldr	r0, [pc, #168]	; (23bb4 <z_time_slice+0xc0>)
   23b0a:	f000 ff3d 	bl	24988 <z_spin_lock_valid>
   23b0e:	b968      	cbnz	r0, 23b2c <z_time_slice+0x38>
   23b10:	235c      	movs	r3, #92	; 0x5c
   23b12:	4a29      	ldr	r2, [pc, #164]	; (23bb8 <z_time_slice+0xc4>)
   23b14:	4929      	ldr	r1, [pc, #164]	; (23bbc <z_time_slice+0xc8>)
   23b16:	482a      	ldr	r0, [pc, #168]	; (23bc0 <z_time_slice+0xcc>)
   23b18:	f008 facd 	bl	2c0b6 <printk>
   23b1c:	4925      	ldr	r1, [pc, #148]	; (23bb4 <z_time_slice+0xc0>)
   23b1e:	4829      	ldr	r0, [pc, #164]	; (23bc4 <z_time_slice+0xd0>)
   23b20:	f008 fac9 	bl	2c0b6 <printk>
   23b24:	215c      	movs	r1, #92	; 0x5c
   23b26:	4824      	ldr	r0, [pc, #144]	; (23bb8 <z_time_slice+0xc4>)
   23b28:	f008 fce2 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   23b2c:	4821      	ldr	r0, [pc, #132]	; (23bb4 <z_time_slice+0xc0>)
   23b2e:	f000 ff49 	bl	249c4 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   23b32:	4b25      	ldr	r3, [pc, #148]	; (23bc8 <z_time_slice+0xd4>)
   23b34:	4a25      	ldr	r2, [pc, #148]	; (23bcc <z_time_slice+0xd8>)
   23b36:	6898      	ldr	r0, [r3, #8]
   23b38:	6811      	ldr	r1, [r2, #0]
   23b3a:	4288      	cmp	r0, r1
   23b3c:	4619      	mov	r1, r3
   23b3e:	d118      	bne.n	23b72 <z_time_slice+0x7e>
			z_reset_time_slice();
   23b40:	f7ff fb68 	bl	23214 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23b44:	481b      	ldr	r0, [pc, #108]	; (23bb4 <z_time_slice+0xc0>)
   23b46:	f000 ff2d 	bl	249a4 <z_spin_unlock_valid>
   23b4a:	b968      	cbnz	r0, 23b68 <z_time_slice+0x74>
   23b4c:	2384      	movs	r3, #132	; 0x84
   23b4e:	4a1a      	ldr	r2, [pc, #104]	; (23bb8 <z_time_slice+0xc4>)
   23b50:	491f      	ldr	r1, [pc, #124]	; (23bd0 <z_time_slice+0xdc>)
   23b52:	481b      	ldr	r0, [pc, #108]	; (23bc0 <z_time_slice+0xcc>)
   23b54:	f008 faaf 	bl	2c0b6 <printk>
   23b58:	4916      	ldr	r1, [pc, #88]	; (23bb4 <z_time_slice+0xc0>)
   23b5a:	481e      	ldr	r0, [pc, #120]	; (23bd4 <z_time_slice+0xe0>)
   23b5c:	f008 faab 	bl	2c0b6 <printk>
   23b60:	2184      	movs	r1, #132	; 0x84
   23b62:	4815      	ldr	r0, [pc, #84]	; (23bb8 <z_time_slice+0xc4>)
   23b64:	f008 fcc4 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   23b68:	f385 8811 	msr	BASEPRI, r5
   23b6c:	f3bf 8f6f 	isb	sy
}
   23b70:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   23b72:	2600      	movs	r6, #0
   23b74:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   23b76:	4a18      	ldr	r2, [pc, #96]	; (23bd8 <z_time_slice+0xe4>)
   23b78:	6812      	ldr	r2, [r2, #0]
   23b7a:	b1ba      	cbz	r2, 23bac <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   23b7c:	89c2      	ldrh	r2, [r0, #14]
   23b7e:	2a7f      	cmp	r2, #127	; 0x7f
   23b80:	d814      	bhi.n	23bac <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   23b82:	7b42      	ldrb	r2, [r0, #13]
   23b84:	06d2      	lsls	r2, r2, #27
   23b86:	d111      	bne.n	23bac <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   23b88:	4a14      	ldr	r2, [pc, #80]	; (23bdc <z_time_slice+0xe8>)
   23b8a:	f990 600e 	ldrsb.w	r6, [r0, #14]
   23b8e:	6812      	ldr	r2, [r2, #0]
   23b90:	4296      	cmp	r6, r2
   23b92:	db0b      	blt.n	23bac <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   23b94:	4a12      	ldr	r2, [pc, #72]	; (23be0 <z_time_slice+0xec>)
   23b96:	4290      	cmp	r0, r2
   23b98:	d008      	beq.n	23bac <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   23b9a:	691a      	ldr	r2, [r3, #16]
   23b9c:	42a2      	cmp	r2, r4
   23b9e:	dc02      	bgt.n	23ba6 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   23ba0:	f7ff ff56 	bl	23a50 <move_thread_to_end_of_prio_q>
   23ba4:	e7cc      	b.n	23b40 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   23ba6:	1b12      	subs	r2, r2, r4
   23ba8:	611a      	str	r2, [r3, #16]
   23baa:	e7cb      	b.n	23b44 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   23bac:	2300      	movs	r3, #0
   23bae:	610b      	str	r3, [r1, #16]
   23bb0:	e7c8      	b.n	23b44 <z_time_slice+0x50>
   23bb2:	bf00      	nop
   23bb4:	20021df4 	.word	0x20021df4
   23bb8:	000301cf 	.word	0x000301cf
   23bbc:	00030221 	.word	0x00030221
   23bc0:	000300ff 	.word	0x000300ff
   23bc4:	00030236 	.word	0x00030236
   23bc8:	20021dbc 	.word	0x20021dbc
   23bcc:	20021df0 	.word	0x20021df0
   23bd0:	000301f5 	.word	0x000301f5
   23bd4:	0003020c 	.word	0x0003020c
   23bd8:	20021dfc 	.word	0x20021dfc
   23bdc:	20021df8 	.word	0x20021df8
   23be0:	200211b8 	.word	0x200211b8

00023be4 <z_impl_k_thread_suspend>:
{
   23be4:	b570      	push	{r4, r5, r6, lr}
   23be6:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   23be8:	3018      	adds	r0, #24
   23bea:	f001 f8c5 	bl	24d78 <z_abort_timeout>
	__asm__ volatile(
   23bee:	f04f 0320 	mov.w	r3, #32
   23bf2:	f3ef 8611 	mrs	r6, BASEPRI
   23bf6:	f383 8811 	msr	BASEPRI, r3
   23bfa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23bfe:	4825      	ldr	r0, [pc, #148]	; (23c94 <z_impl_k_thread_suspend+0xb0>)
   23c00:	f000 fec2 	bl	24988 <z_spin_lock_valid>
   23c04:	b968      	cbnz	r0, 23c22 <z_impl_k_thread_suspend+0x3e>
   23c06:	235c      	movs	r3, #92	; 0x5c
   23c08:	4a23      	ldr	r2, [pc, #140]	; (23c98 <z_impl_k_thread_suspend+0xb4>)
   23c0a:	4924      	ldr	r1, [pc, #144]	; (23c9c <z_impl_k_thread_suspend+0xb8>)
   23c0c:	4824      	ldr	r0, [pc, #144]	; (23ca0 <z_impl_k_thread_suspend+0xbc>)
   23c0e:	f008 fa52 	bl	2c0b6 <printk>
   23c12:	4920      	ldr	r1, [pc, #128]	; (23c94 <z_impl_k_thread_suspend+0xb0>)
   23c14:	4823      	ldr	r0, [pc, #140]	; (23ca4 <z_impl_k_thread_suspend+0xc0>)
   23c16:	f008 fa4e 	bl	2c0b6 <printk>
   23c1a:	215c      	movs	r1, #92	; 0x5c
   23c1c:	481e      	ldr	r0, [pc, #120]	; (23c98 <z_impl_k_thread_suspend+0xb4>)
   23c1e:	f008 fc67 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   23c22:	481c      	ldr	r0, [pc, #112]	; (23c94 <z_impl_k_thread_suspend+0xb0>)
   23c24:	f000 fece 	bl	249c4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   23c28:	f994 300d 	ldrsb.w	r3, [r4, #13]
   23c2c:	2b00      	cmp	r3, #0
   23c2e:	da07      	bge.n	23c40 <z_impl_k_thread_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   23c30:	4621      	mov	r1, r4
   23c32:	481d      	ldr	r0, [pc, #116]	; (23ca8 <z_impl_k_thread_suspend+0xc4>)
   23c34:	f7ff fcb2 	bl	2359c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   23c38:	7b63      	ldrb	r3, [r4, #13]
   23c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23c3e:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   23c40:	4d1a      	ldr	r5, [pc, #104]	; (23cac <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   23c42:	7b63      	ldrb	r3, [r4, #13]
   23c44:	68a8      	ldr	r0, [r5, #8]
   23c46:	f043 0310 	orr.w	r3, r3, #16
   23c4a:	7363      	strb	r3, [r4, #13]
   23c4c:	1b03      	subs	r3, r0, r4
   23c4e:	4258      	negs	r0, r3
   23c50:	4158      	adcs	r0, r3
   23c52:	f7ff fd1d 	bl	23690 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23c56:	480f      	ldr	r0, [pc, #60]	; (23c94 <z_impl_k_thread_suspend+0xb0>)
   23c58:	f000 fea4 	bl	249a4 <z_spin_unlock_valid>
   23c5c:	b968      	cbnz	r0, 23c7a <z_impl_k_thread_suspend+0x96>
   23c5e:	2384      	movs	r3, #132	; 0x84
   23c60:	4a0d      	ldr	r2, [pc, #52]	; (23c98 <z_impl_k_thread_suspend+0xb4>)
   23c62:	4913      	ldr	r1, [pc, #76]	; (23cb0 <z_impl_k_thread_suspend+0xcc>)
   23c64:	480e      	ldr	r0, [pc, #56]	; (23ca0 <z_impl_k_thread_suspend+0xbc>)
   23c66:	f008 fa26 	bl	2c0b6 <printk>
   23c6a:	490a      	ldr	r1, [pc, #40]	; (23c94 <z_impl_k_thread_suspend+0xb0>)
   23c6c:	4811      	ldr	r0, [pc, #68]	; (23cb4 <z_impl_k_thread_suspend+0xd0>)
   23c6e:	f008 fa22 	bl	2c0b6 <printk>
   23c72:	2184      	movs	r1, #132	; 0x84
   23c74:	4808      	ldr	r0, [pc, #32]	; (23c98 <z_impl_k_thread_suspend+0xb4>)
   23c76:	f008 fc3b 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   23c7a:	f386 8811 	msr	BASEPRI, r6
   23c7e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   23c82:	68ab      	ldr	r3, [r5, #8]
   23c84:	42a3      	cmp	r3, r4
   23c86:	d103      	bne.n	23c90 <z_impl_k_thread_suspend+0xac>
}
   23c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   23c8c:	f00a bcf4 	b.w	2e678 <z_reschedule_unlocked>
}
   23c90:	bd70      	pop	{r4, r5, r6, pc}
   23c92:	bf00      	nop
   23c94:	20021df4 	.word	0x20021df4
   23c98:	000301cf 	.word	0x000301cf
   23c9c:	00030221 	.word	0x00030221
   23ca0:	000300ff 	.word	0x000300ff
   23ca4:	00030236 	.word	0x00030236
   23ca8:	20021de4 	.word	0x20021de4
   23cac:	20021dbc 	.word	0x20021dbc
   23cb0:	000301f5 	.word	0x000301f5
   23cb4:	0003020c 	.word	0x0003020c

00023cb8 <z_thread_single_abort>:
{
   23cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   23cbc:	7b03      	ldrb	r3, [r0, #12]
{
   23cbe:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   23cc0:	07dd      	lsls	r5, r3, #31
   23cc2:	d50e      	bpl.n	23ce2 <z_thread_single_abort+0x2a>
   23cc4:	4948      	ldr	r1, [pc, #288]	; (23de8 <z_thread_single_abort+0x130>)
   23cc6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   23cca:	4a48      	ldr	r2, [pc, #288]	; (23dec <z_thread_single_abort+0x134>)
   23ccc:	4848      	ldr	r0, [pc, #288]	; (23df0 <z_thread_single_abort+0x138>)
   23cce:	f008 f9f2 	bl	2c0b6 <printk>
   23cd2:	4848      	ldr	r0, [pc, #288]	; (23df4 <z_thread_single_abort+0x13c>)
   23cd4:	f008 f9ef 	bl	2c0b6 <printk>
   23cd8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   23cdc:	4843      	ldr	r0, [pc, #268]	; (23dec <z_thread_single_abort+0x134>)
   23cde:	f008 fc07 	bl	2c4f0 <assert_post_action>
	if (thread->fn_abort != NULL) {
   23ce2:	6e23      	ldr	r3, [r4, #96]	; 0x60
   23ce4:	b103      	cbz	r3, 23ce8 <z_thread_single_abort+0x30>
		thread->fn_abort();
   23ce6:	4798      	blx	r3
   23ce8:	f104 0018 	add.w	r0, r4, #24
   23cec:	f001 f844 	bl	24d78 <z_abort_timeout>
	__asm__ volatile(
   23cf0:	f04f 0320 	mov.w	r3, #32
   23cf4:	f3ef 8611 	mrs	r6, BASEPRI
   23cf8:	f383 8811 	msr	BASEPRI, r3
   23cfc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23d00:	483d      	ldr	r0, [pc, #244]	; (23df8 <z_thread_single_abort+0x140>)
   23d02:	f000 fe41 	bl	24988 <z_spin_lock_valid>
   23d06:	b968      	cbnz	r0, 23d24 <z_thread_single_abort+0x6c>
   23d08:	235c      	movs	r3, #92	; 0x5c
   23d0a:	4a3c      	ldr	r2, [pc, #240]	; (23dfc <z_thread_single_abort+0x144>)
   23d0c:	493c      	ldr	r1, [pc, #240]	; (23e00 <z_thread_single_abort+0x148>)
   23d0e:	4838      	ldr	r0, [pc, #224]	; (23df0 <z_thread_single_abort+0x138>)
   23d10:	f008 f9d1 	bl	2c0b6 <printk>
   23d14:	4938      	ldr	r1, [pc, #224]	; (23df8 <z_thread_single_abort+0x140>)
   23d16:	483b      	ldr	r0, [pc, #236]	; (23e04 <z_thread_single_abort+0x14c>)
   23d18:	f008 f9cd 	bl	2c0b6 <printk>
   23d1c:	215c      	movs	r1, #92	; 0x5c
   23d1e:	4837      	ldr	r0, [pc, #220]	; (23dfc <z_thread_single_abort+0x144>)
   23d20:	f008 fbe6 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   23d24:	4834      	ldr	r0, [pc, #208]	; (23df8 <z_thread_single_abort+0x140>)
   23d26:	f000 fe4d 	bl	249c4 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   23d2a:	7b63      	ldrb	r3, [r4, #13]
   23d2c:	06d8      	lsls	r0, r3, #27
   23d2e:	d136      	bne.n	23d9e <z_thread_single_abort+0xe6>
		if (z_is_thread_ready(thread)) {
   23d30:	69a2      	ldr	r2, [r4, #24]
   23d32:	2a00      	cmp	r2, #0
   23d34:	d133      	bne.n	23d9e <z_thread_single_abort+0xe6>
			if (z_is_thread_queued(thread)) {
   23d36:	0619      	lsls	r1, r3, #24
   23d38:	d507      	bpl.n	23d4a <z_thread_single_abort+0x92>
				_priq_run_remove(&_kernel.ready_q.runq,
   23d3a:	4621      	mov	r1, r4
   23d3c:	4832      	ldr	r0, [pc, #200]	; (23e08 <z_thread_single_abort+0x150>)
   23d3e:	f7ff fc2d 	bl	2359c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   23d42:	7b63      	ldrb	r3, [r4, #13]
   23d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23d48:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   23d4a:	4b30      	ldr	r3, [pc, #192]	; (23e0c <z_thread_single_abort+0x154>)
   23d4c:	6898      	ldr	r0, [r3, #8]
   23d4e:	1b02      	subs	r2, r0, r4
   23d50:	4250      	negs	r0, r2
   23d52:	4150      	adcs	r0, r2
   23d54:	f7ff fc9c 	bl	23690 <update_cache>
			waiter->base.pended_on = NULL;
   23d58:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   23d5a:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   23d5c:	f104 0830 	add.w	r8, r4, #48	; 0x30
   23d60:	f043 0308 	orr.w	r3, r3, #8
   23d64:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   23d66:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23d68:	4545      	cmp	r5, r8
   23d6a:	d000      	beq.n	23d6e <z_thread_single_abort+0xb6>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   23d6c:	bb3d      	cbnz	r5, 23dbe <z_thread_single_abort+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23d6e:	4822      	ldr	r0, [pc, #136]	; (23df8 <z_thread_single_abort+0x140>)
   23d70:	f000 fe18 	bl	249a4 <z_spin_unlock_valid>
   23d74:	b968      	cbnz	r0, 23d92 <z_thread_single_abort+0xda>
   23d76:	2384      	movs	r3, #132	; 0x84
   23d78:	4a20      	ldr	r2, [pc, #128]	; (23dfc <z_thread_single_abort+0x144>)
   23d7a:	4925      	ldr	r1, [pc, #148]	; (23e10 <z_thread_single_abort+0x158>)
   23d7c:	481c      	ldr	r0, [pc, #112]	; (23df0 <z_thread_single_abort+0x138>)
   23d7e:	f008 f99a 	bl	2c0b6 <printk>
   23d82:	491d      	ldr	r1, [pc, #116]	; (23df8 <z_thread_single_abort+0x140>)
   23d84:	4823      	ldr	r0, [pc, #140]	; (23e14 <z_thread_single_abort+0x15c>)
   23d86:	f008 f996 	bl	2c0b6 <printk>
   23d8a:	2184      	movs	r1, #132	; 0x84
   23d8c:	481b      	ldr	r0, [pc, #108]	; (23dfc <z_thread_single_abort+0x144>)
   23d8e:	f008 fbaf 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   23d92:	f386 8811 	msr	BASEPRI, r6
   23d96:	f3bf 8f6f 	isb	sy
}
   23d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   23d9e:	079b      	lsls	r3, r3, #30
   23da0:	d5da      	bpl.n	23d58 <z_thread_single_abort+0xa0>
				_priq_wait_remove(&pended_on(thread)->waitq,
   23da2:	f104 0008 	add.w	r0, r4, #8
   23da6:	f7ff fa1d 	bl	231e4 <pended_on.isra.0>
   23daa:	4621      	mov	r1, r4
   23dac:	f7ff fbf6 	bl	2359c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   23db0:	7b63      	ldrb	r3, [r4, #13]
   23db2:	f023 0302 	bic.w	r3, r3, #2
   23db6:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   23db8:	2300      	movs	r3, #0
   23dba:	60a3      	str	r3, [r4, #8]
   23dbc:	e7cc      	b.n	23d58 <z_thread_single_abort+0xa0>
   23dbe:	f105 0018 	add.w	r0, r5, #24
   23dc2:	f000 ffd9 	bl	24d78 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   23dc6:	f105 0008 	add.w	r0, r5, #8
   23dca:	f7ff fa0b 	bl	231e4 <pended_on.isra.0>
   23dce:	4629      	mov	r1, r5
   23dd0:	f7ff fbe4 	bl	2359c <z_priq_dumb_remove>
   23dd4:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   23dd6:	4628      	mov	r0, r5
   23dd8:	f023 0302 	bic.w	r3, r3, #2
   23ddc:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   23dde:	60af      	str	r7, [r5, #8]
   23de0:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   23de2:	f7ff fcf5 	bl	237d0 <ready_thread>
   23de6:	e7be      	b.n	23d66 <z_thread_single_abort+0xae>
   23de8:	00032bdd 	.word	0x00032bdd
   23dec:	00032b53 	.word	0x00032b53
   23df0:	000300ff 	.word	0x000300ff
   23df4:	00032c0b 	.word	0x00032c0b
   23df8:	20021df4 	.word	0x20021df4
   23dfc:	000301cf 	.word	0x000301cf
   23e00:	00030221 	.word	0x00030221
   23e04:	00030236 	.word	0x00030236
   23e08:	20021de4 	.word	0x20021de4
   23e0c:	20021dbc 	.word	0x20021dbc
   23e10:	000301f5 	.word	0x000301f5
   23e14:	0003020c 	.word	0x0003020c

00023e18 <unready_thread>:
{
   23e18:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   23e1a:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   23e1e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   23e20:	2b00      	cmp	r3, #0
   23e22:	da07      	bge.n	23e34 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   23e24:	4601      	mov	r1, r0
   23e26:	4808      	ldr	r0, [pc, #32]	; (23e48 <unready_thread+0x30>)
   23e28:	f7ff fbb8 	bl	2359c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   23e2c:	7b63      	ldrb	r3, [r4, #13]
   23e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23e32:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   23e34:	4b05      	ldr	r3, [pc, #20]	; (23e4c <unready_thread+0x34>)
   23e36:	6898      	ldr	r0, [r3, #8]
   23e38:	1b03      	subs	r3, r0, r4
   23e3a:	4258      	negs	r0, r3
   23e3c:	4158      	adcs	r0, r3
}
   23e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   23e42:	f7ff bc25 	b.w	23690 <update_cache>
   23e46:	bf00      	nop
   23e48:	20021de4 	.word	0x20021de4
   23e4c:	20021dbc 	.word	0x20021dbc

00023e50 <add_to_waitq_locked>:
{
   23e50:	b538      	push	{r3, r4, r5, lr}
   23e52:	4604      	mov	r4, r0
   23e54:	460d      	mov	r5, r1
	unready_thread(thread);
   23e56:	f7ff ffdf 	bl	23e18 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   23e5a:	7b63      	ldrb	r3, [r4, #13]
   23e5c:	f043 0302 	orr.w	r3, r3, #2
   23e60:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   23e62:	b33d      	cbz	r5, 23eb4 <add_to_waitq_locked+0x64>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23e64:	4b17      	ldr	r3, [pc, #92]	; (23ec4 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   23e66:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23e68:	429c      	cmp	r4, r3
   23e6a:	d10b      	bne.n	23e84 <add_to_waitq_locked+0x34>
   23e6c:	4916      	ldr	r1, [pc, #88]	; (23ec8 <add_to_waitq_locked+0x78>)
   23e6e:	4817      	ldr	r0, [pc, #92]	; (23ecc <add_to_waitq_locked+0x7c>)
   23e70:	f240 3389 	movw	r3, #905	; 0x389
   23e74:	4a16      	ldr	r2, [pc, #88]	; (23ed0 <add_to_waitq_locked+0x80>)
   23e76:	f008 f91e 	bl	2c0b6 <printk>
   23e7a:	f240 3189 	movw	r1, #905	; 0x389
   23e7e:	4814      	ldr	r0, [pc, #80]	; (23ed0 <add_to_waitq_locked+0x80>)
   23e80:	f008 fb36 	bl	2c4f0 <assert_post_action>
	return list->head == list;
   23e84:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23e86:	429d      	cmp	r5, r3
   23e88:	bf08      	it	eq
   23e8a:	2300      	moveq	r3, #0
   23e8c:	2b00      	cmp	r3, #0
   23e8e:	bf38      	it	cc
   23e90:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23e92:	b183      	cbz	r3, 23eb6 <add_to_waitq_locked+0x66>
	if (thread_1->base.prio < thread_2->base.prio) {
   23e94:	f994 100e 	ldrsb.w	r1, [r4, #14]
   23e98:	f993 200e 	ldrsb.w	r2, [r3, #14]
   23e9c:	4291      	cmp	r1, r2
   23e9e:	db04      	blt.n	23eaa <add_to_waitq_locked+0x5a>
	return (node == list->tail) ? NULL : node->next;
   23ea0:	686a      	ldr	r2, [r5, #4]
   23ea2:	429a      	cmp	r2, r3
   23ea4:	d007      	beq.n	23eb6 <add_to_waitq_locked+0x66>
   23ea6:	681b      	ldr	r3, [r3, #0]
   23ea8:	e7f3      	b.n	23e92 <add_to_waitq_locked+0x42>
	node->prev = successor->prev;
   23eaa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23eac:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   23eb0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23eb2:	605c      	str	r4, [r3, #4]
}
   23eb4:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   23eb6:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   23eb8:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   23eba:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   23ebc:	686b      	ldr	r3, [r5, #4]
   23ebe:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23ec0:	606c      	str	r4, [r5, #4]
   23ec2:	e7f7      	b.n	23eb4 <add_to_waitq_locked+0x64>
   23ec4:	200211b8 	.word	0x200211b8
   23ec8:	00032b8c 	.word	0x00032b8c
   23ecc:	000300ff 	.word	0x000300ff
   23ed0:	00032b53 	.word	0x00032b53

00023ed4 <pend>:
{
   23ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23ed8:	4604      	mov	r4, r0
   23eda:	460d      	mov	r5, r1
   23edc:	4616      	mov	r6, r2
   23ede:	461f      	mov	r7, r3
	__asm__ volatile(
   23ee0:	f04f 0320 	mov.w	r3, #32
   23ee4:	f3ef 8811 	mrs	r8, BASEPRI
   23ee8:	f383 8811 	msr	BASEPRI, r3
   23eec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23ef0:	481f      	ldr	r0, [pc, #124]	; (23f70 <pend+0x9c>)
   23ef2:	f000 fd49 	bl	24988 <z_spin_lock_valid>
   23ef6:	b968      	cbnz	r0, 23f14 <pend+0x40>
   23ef8:	235c      	movs	r3, #92	; 0x5c
   23efa:	4a1e      	ldr	r2, [pc, #120]	; (23f74 <pend+0xa0>)
   23efc:	491e      	ldr	r1, [pc, #120]	; (23f78 <pend+0xa4>)
   23efe:	481f      	ldr	r0, [pc, #124]	; (23f7c <pend+0xa8>)
   23f00:	f008 f8d9 	bl	2c0b6 <printk>
   23f04:	491a      	ldr	r1, [pc, #104]	; (23f70 <pend+0x9c>)
   23f06:	481e      	ldr	r0, [pc, #120]	; (23f80 <pend+0xac>)
   23f08:	f008 f8d5 	bl	2c0b6 <printk>
   23f0c:	215c      	movs	r1, #92	; 0x5c
   23f0e:	4819      	ldr	r0, [pc, #100]	; (23f74 <pend+0xa0>)
   23f10:	f008 faee 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   23f14:	4816      	ldr	r0, [pc, #88]	; (23f70 <pend+0x9c>)
   23f16:	f000 fd55 	bl	249c4 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   23f1a:	4620      	mov	r0, r4
   23f1c:	4629      	mov	r1, r5
   23f1e:	f7ff ff97 	bl	23e50 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23f22:	4813      	ldr	r0, [pc, #76]	; (23f70 <pend+0x9c>)
   23f24:	f000 fd3e 	bl	249a4 <z_spin_unlock_valid>
   23f28:	b968      	cbnz	r0, 23f46 <pend+0x72>
   23f2a:	2384      	movs	r3, #132	; 0x84
   23f2c:	4a11      	ldr	r2, [pc, #68]	; (23f74 <pend+0xa0>)
   23f2e:	4915      	ldr	r1, [pc, #84]	; (23f84 <pend+0xb0>)
   23f30:	4812      	ldr	r0, [pc, #72]	; (23f7c <pend+0xa8>)
   23f32:	f008 f8c0 	bl	2c0b6 <printk>
   23f36:	490e      	ldr	r1, [pc, #56]	; (23f70 <pend+0x9c>)
   23f38:	4813      	ldr	r0, [pc, #76]	; (23f88 <pend+0xb4>)
   23f3a:	f008 f8bc 	bl	2c0b6 <printk>
   23f3e:	2184      	movs	r1, #132	; 0x84
   23f40:	480c      	ldr	r0, [pc, #48]	; (23f74 <pend+0xa0>)
   23f42:	f008 fad5 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   23f46:	f388 8811 	msr	BASEPRI, r8
   23f4a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23f4e:	1c7b      	adds	r3, r7, #1
   23f50:	bf08      	it	eq
   23f52:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   23f56:	d008      	beq.n	23f6a <pend+0x96>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   23f58:	4632      	mov	r2, r6
   23f5a:	463b      	mov	r3, r7
   23f5c:	f104 0018 	add.w	r0, r4, #24
   23f60:	490a      	ldr	r1, [pc, #40]	; (23f8c <pend+0xb8>)
}
   23f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23f66:	f000 be33 	b.w	24bd0 <z_add_timeout>
   23f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23f6e:	bf00      	nop
   23f70:	20021df4 	.word	0x20021df4
   23f74:	000301cf 	.word	0x000301cf
   23f78:	00030221 	.word	0x00030221
   23f7c:	000300ff 	.word	0x000300ff
   23f80:	00030236 	.word	0x00030236
   23f84:	000301f5 	.word	0x000301f5
   23f88:	0003020c 	.word	0x0003020c
   23f8c:	000239a5 	.word	0x000239a5

00023f90 <z_pend_curr>:
{
   23f90:	b538      	push	{r3, r4, r5, lr}
   23f92:	4604      	mov	r4, r0
	pending_current = _current;
   23f94:	4b10      	ldr	r3, [pc, #64]	; (23fd8 <z_pend_curr+0x48>)
{
   23f96:	460d      	mov	r5, r1
	pending_current = _current;
   23f98:	6898      	ldr	r0, [r3, #8]
   23f9a:	4b10      	ldr	r3, [pc, #64]	; (23fdc <z_pend_curr+0x4c>)
{
   23f9c:	4611      	mov	r1, r2
	pending_current = _current;
   23f9e:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   23fa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   23fa4:	f7ff ff96 	bl	23ed4 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23fa8:	4620      	mov	r0, r4
   23faa:	f000 fcfb 	bl	249a4 <z_spin_unlock_valid>
   23fae:	b968      	cbnz	r0, 23fcc <z_pend_curr+0x3c>
   23fb0:	239b      	movs	r3, #155	; 0x9b
   23fb2:	4a0b      	ldr	r2, [pc, #44]	; (23fe0 <z_pend_curr+0x50>)
   23fb4:	490b      	ldr	r1, [pc, #44]	; (23fe4 <z_pend_curr+0x54>)
   23fb6:	480c      	ldr	r0, [pc, #48]	; (23fe8 <z_pend_curr+0x58>)
   23fb8:	f008 f87d 	bl	2c0b6 <printk>
   23fbc:	4621      	mov	r1, r4
   23fbe:	480b      	ldr	r0, [pc, #44]	; (23fec <z_pend_curr+0x5c>)
   23fc0:	f008 f879 	bl	2c0b6 <printk>
   23fc4:	219b      	movs	r1, #155	; 0x9b
   23fc6:	4806      	ldr	r0, [pc, #24]	; (23fe0 <z_pend_curr+0x50>)
   23fc8:	f008 fa92 	bl	2c4f0 <assert_post_action>
   23fcc:	4628      	mov	r0, r5
}
   23fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23fd2:	f7f0 badd 	b.w	14590 <arch_swap>
   23fd6:	bf00      	nop
   23fd8:	20021dbc 	.word	0x20021dbc
   23fdc:	20021df0 	.word	0x20021df0
   23fe0:	000301cf 	.word	0x000301cf
   23fe4:	000301f5 	.word	0x000301f5
   23fe8:	000300ff 	.word	0x000300ff
   23fec:	0003020c 	.word	0x0003020c

00023ff0 <z_set_prio>:
{
   23ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23ff2:	4604      	mov	r4, r0
   23ff4:	460e      	mov	r6, r1
	__asm__ volatile(
   23ff6:	f04f 0320 	mov.w	r3, #32
   23ffa:	f3ef 8711 	mrs	r7, BASEPRI
   23ffe:	f383 8811 	msr	BASEPRI, r3
   24002:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24006:	4839      	ldr	r0, [pc, #228]	; (240ec <z_set_prio+0xfc>)
   24008:	f000 fcbe 	bl	24988 <z_spin_lock_valid>
   2400c:	b968      	cbnz	r0, 2402a <z_set_prio+0x3a>
   2400e:	235c      	movs	r3, #92	; 0x5c
   24010:	4a37      	ldr	r2, [pc, #220]	; (240f0 <z_set_prio+0x100>)
   24012:	4938      	ldr	r1, [pc, #224]	; (240f4 <z_set_prio+0x104>)
   24014:	4838      	ldr	r0, [pc, #224]	; (240f8 <z_set_prio+0x108>)
   24016:	f008 f84e 	bl	2c0b6 <printk>
   2401a:	4934      	ldr	r1, [pc, #208]	; (240ec <z_set_prio+0xfc>)
   2401c:	4837      	ldr	r0, [pc, #220]	; (240fc <z_set_prio+0x10c>)
   2401e:	f008 f84a 	bl	2c0b6 <printk>
   24022:	215c      	movs	r1, #92	; 0x5c
   24024:	4832      	ldr	r0, [pc, #200]	; (240f0 <z_set_prio+0x100>)
   24026:	f008 fa63 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   2402a:	4830      	ldr	r0, [pc, #192]	; (240ec <z_set_prio+0xfc>)
   2402c:	f000 fcca 	bl	249c4 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   24030:	7b63      	ldrb	r3, [r4, #13]
   24032:	b276      	sxtb	r6, r6
   24034:	06db      	lsls	r3, r3, #27
   24036:	d155      	bne.n	240e4 <z_set_prio+0xf4>
	return !sys_dnode_is_linked(&t->node);
   24038:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   2403a:	2d00      	cmp	r5, #0
   2403c:	d152      	bne.n	240e4 <z_set_prio+0xf4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   2403e:	4621      	mov	r1, r4
   24040:	482f      	ldr	r0, [pc, #188]	; (24100 <z_set_prio+0x110>)
   24042:	f7ff faab 	bl	2359c <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24046:	4b2f      	ldr	r3, [pc, #188]	; (24104 <z_set_prio+0x114>)
				thread->base.prio = prio;
   24048:	73a6      	strb	r6, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2404a:	429c      	cmp	r4, r3
   2404c:	d10b      	bne.n	24066 <z_set_prio+0x76>
   2404e:	492e      	ldr	r1, [pc, #184]	; (24108 <z_set_prio+0x118>)
   24050:	4829      	ldr	r0, [pc, #164]	; (240f8 <z_set_prio+0x108>)
   24052:	f240 3389 	movw	r3, #905	; 0x389
   24056:	4a2d      	ldr	r2, [pc, #180]	; (2410c <z_set_prio+0x11c>)
   24058:	f008 f82d 	bl	2c0b6 <printk>
   2405c:	f240 3189 	movw	r1, #905	; 0x389
   24060:	482a      	ldr	r0, [pc, #168]	; (2410c <z_set_prio+0x11c>)
   24062:	f008 fa45 	bl	2c4f0 <assert_post_action>
	return list->head == list;
   24066:	4a2a      	ldr	r2, [pc, #168]	; (24110 <z_set_prio+0x120>)
   24068:	4613      	mov	r3, r2
   2406a:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2406e:	4298      	cmp	r0, r3
   24070:	bf18      	it	ne
   24072:	4605      	movne	r5, r0
   24074:	2d00      	cmp	r5, #0
   24076:	4619      	mov	r1, r3
   24078:	462b      	mov	r3, r5
   2407a:	bf38      	it	cc
   2407c:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2407e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24080:	b353      	cbz	r3, 240d8 <z_set_prio+0xe8>
	if (thread_1->base.prio < thread_2->base.prio) {
   24082:	f994 600e 	ldrsb.w	r6, [r4, #14]
   24086:	f993 500e 	ldrsb.w	r5, [r3, #14]
   2408a:	42ae      	cmp	r6, r5
   2408c:	db03      	blt.n	24096 <z_set_prio+0xa6>
	return (node == list->tail) ? NULL : node->next;
   2408e:	4298      	cmp	r0, r3
   24090:	d022      	beq.n	240d8 <z_set_prio+0xe8>
   24092:	681b      	ldr	r3, [r3, #0]
   24094:	e7f4      	b.n	24080 <z_set_prio+0x90>
	node->prev = successor->prev;
   24096:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24098:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2409c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2409e:	605c      	str	r4, [r3, #4]
			update_cache(1);
   240a0:	2001      	movs	r0, #1
   240a2:	f7ff faf5 	bl	23690 <update_cache>
   240a6:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   240a8:	4810      	ldr	r0, [pc, #64]	; (240ec <z_set_prio+0xfc>)
   240aa:	f000 fc7b 	bl	249a4 <z_spin_unlock_valid>
   240ae:	b968      	cbnz	r0, 240cc <z_set_prio+0xdc>
   240b0:	2384      	movs	r3, #132	; 0x84
   240b2:	4a0f      	ldr	r2, [pc, #60]	; (240f0 <z_set_prio+0x100>)
   240b4:	4917      	ldr	r1, [pc, #92]	; (24114 <z_set_prio+0x124>)
   240b6:	4810      	ldr	r0, [pc, #64]	; (240f8 <z_set_prio+0x108>)
   240b8:	f007 fffd 	bl	2c0b6 <printk>
   240bc:	490b      	ldr	r1, [pc, #44]	; (240ec <z_set_prio+0xfc>)
   240be:	4816      	ldr	r0, [pc, #88]	; (24118 <z_set_prio+0x128>)
   240c0:	f007 fff9 	bl	2c0b6 <printk>
   240c4:	2184      	movs	r1, #132	; 0x84
   240c6:	480a      	ldr	r0, [pc, #40]	; (240f0 <z_set_prio+0x100>)
   240c8:	f008 fa12 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   240cc:	f387 8811 	msr	BASEPRI, r7
   240d0:	f3bf 8f6f 	isb	sy
}
   240d4:	4620      	mov	r0, r4
   240d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   240d8:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   240dc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   240de:	601c      	str	r4, [r3, #0]
	list->tail = node;
   240e0:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   240e2:	e7dd      	b.n	240a0 <z_set_prio+0xb0>
			thread->base.prio = prio;
   240e4:	73a6      	strb	r6, [r4, #14]
   240e6:	2400      	movs	r4, #0
   240e8:	e7de      	b.n	240a8 <z_set_prio+0xb8>
   240ea:	bf00      	nop
   240ec:	20021df4 	.word	0x20021df4
   240f0:	000301cf 	.word	0x000301cf
   240f4:	00030221 	.word	0x00030221
   240f8:	000300ff 	.word	0x000300ff
   240fc:	00030236 	.word	0x00030236
   24100:	20021de4 	.word	0x20021de4
   24104:	200211b8 	.word	0x200211b8
   24108:	00032b8c 	.word	0x00032b8c
   2410c:	00032b53 	.word	0x00032b53
   24110:	20021dbc 	.word	0x20021dbc
   24114:	000301f5 	.word	0x000301f5
   24118:	0003020c 	.word	0x0003020c

0002411c <z_unpend_first_thread>:
{
   2411c:	b538      	push	{r3, r4, r5, lr}
   2411e:	4604      	mov	r4, r0
	__asm__ volatile(
   24120:	f04f 0320 	mov.w	r3, #32
   24124:	f3ef 8511 	mrs	r5, BASEPRI
   24128:	f383 8811 	msr	BASEPRI, r3
   2412c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24130:	4836      	ldr	r0, [pc, #216]	; (2420c <z_unpend_first_thread+0xf0>)
   24132:	f000 fc29 	bl	24988 <z_spin_lock_valid>
   24136:	b968      	cbnz	r0, 24154 <z_unpend_first_thread+0x38>
   24138:	235c      	movs	r3, #92	; 0x5c
   2413a:	4a35      	ldr	r2, [pc, #212]	; (24210 <z_unpend_first_thread+0xf4>)
   2413c:	4935      	ldr	r1, [pc, #212]	; (24214 <z_unpend_first_thread+0xf8>)
   2413e:	4836      	ldr	r0, [pc, #216]	; (24218 <z_unpend_first_thread+0xfc>)
   24140:	f007 ffb9 	bl	2c0b6 <printk>
   24144:	4931      	ldr	r1, [pc, #196]	; (2420c <z_unpend_first_thread+0xf0>)
   24146:	4835      	ldr	r0, [pc, #212]	; (2421c <z_unpend_first_thread+0x100>)
   24148:	f007 ffb5 	bl	2c0b6 <printk>
   2414c:	215c      	movs	r1, #92	; 0x5c
   2414e:	4830      	ldr	r0, [pc, #192]	; (24210 <z_unpend_first_thread+0xf4>)
   24150:	f008 f9ce 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   24154:	482d      	ldr	r0, [pc, #180]	; (2420c <z_unpend_first_thread+0xf0>)
   24156:	f000 fc35 	bl	249c4 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   2415a:	4620      	mov	r0, r4
   2415c:	f00a faa5 	bl	2e6aa <z_priq_dumb_best>
   24160:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24162:	482a      	ldr	r0, [pc, #168]	; (2420c <z_unpend_first_thread+0xf0>)
   24164:	f000 fc1e 	bl	249a4 <z_spin_unlock_valid>
   24168:	b968      	cbnz	r0, 24186 <z_unpend_first_thread+0x6a>
   2416a:	2384      	movs	r3, #132	; 0x84
   2416c:	4a28      	ldr	r2, [pc, #160]	; (24210 <z_unpend_first_thread+0xf4>)
   2416e:	492c      	ldr	r1, [pc, #176]	; (24220 <z_unpend_first_thread+0x104>)
   24170:	4829      	ldr	r0, [pc, #164]	; (24218 <z_unpend_first_thread+0xfc>)
   24172:	f007 ffa0 	bl	2c0b6 <printk>
   24176:	4925      	ldr	r1, [pc, #148]	; (2420c <z_unpend_first_thread+0xf0>)
   24178:	482a      	ldr	r0, [pc, #168]	; (24224 <z_unpend_first_thread+0x108>)
   2417a:	f007 ff9c 	bl	2c0b6 <printk>
   2417e:	2184      	movs	r1, #132	; 0x84
   24180:	4823      	ldr	r0, [pc, #140]	; (24210 <z_unpend_first_thread+0xf4>)
   24182:	f008 f9b5 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   24186:	f385 8811 	msr	BASEPRI, r5
   2418a:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   2418e:	2c00      	cmp	r4, #0
   24190:	d039      	beq.n	24206 <z_unpend_first_thread+0xea>
	__asm__ volatile(
   24192:	f04f 0320 	mov.w	r3, #32
   24196:	f3ef 8511 	mrs	r5, BASEPRI
   2419a:	f383 8811 	msr	BASEPRI, r3
   2419e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   241a2:	481a      	ldr	r0, [pc, #104]	; (2420c <z_unpend_first_thread+0xf0>)
   241a4:	f000 fbf0 	bl	24988 <z_spin_lock_valid>
   241a8:	b968      	cbnz	r0, 241c6 <z_unpend_first_thread+0xaa>
   241aa:	235c      	movs	r3, #92	; 0x5c
   241ac:	4a18      	ldr	r2, [pc, #96]	; (24210 <z_unpend_first_thread+0xf4>)
   241ae:	4919      	ldr	r1, [pc, #100]	; (24214 <z_unpend_first_thread+0xf8>)
   241b0:	4819      	ldr	r0, [pc, #100]	; (24218 <z_unpend_first_thread+0xfc>)
   241b2:	f007 ff80 	bl	2c0b6 <printk>
   241b6:	4915      	ldr	r1, [pc, #84]	; (2420c <z_unpend_first_thread+0xf0>)
   241b8:	4818      	ldr	r0, [pc, #96]	; (2421c <z_unpend_first_thread+0x100>)
   241ba:	f007 ff7c 	bl	2c0b6 <printk>
   241be:	215c      	movs	r1, #92	; 0x5c
   241c0:	4813      	ldr	r0, [pc, #76]	; (24210 <z_unpend_first_thread+0xf4>)
   241c2:	f008 f995 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   241c6:	4811      	ldr	r0, [pc, #68]	; (2420c <z_unpend_first_thread+0xf0>)
   241c8:	f000 fbfc 	bl	249c4 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   241cc:	4620      	mov	r0, r4
   241ce:	f00a fa5d 	bl	2e68c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   241d2:	480e      	ldr	r0, [pc, #56]	; (2420c <z_unpend_first_thread+0xf0>)
   241d4:	f000 fbe6 	bl	249a4 <z_spin_unlock_valid>
   241d8:	b968      	cbnz	r0, 241f6 <z_unpend_first_thread+0xda>
   241da:	2384      	movs	r3, #132	; 0x84
   241dc:	4a0c      	ldr	r2, [pc, #48]	; (24210 <z_unpend_first_thread+0xf4>)
   241de:	4910      	ldr	r1, [pc, #64]	; (24220 <z_unpend_first_thread+0x104>)
   241e0:	480d      	ldr	r0, [pc, #52]	; (24218 <z_unpend_first_thread+0xfc>)
   241e2:	f007 ff68 	bl	2c0b6 <printk>
   241e6:	4909      	ldr	r1, [pc, #36]	; (2420c <z_unpend_first_thread+0xf0>)
   241e8:	480e      	ldr	r0, [pc, #56]	; (24224 <z_unpend_first_thread+0x108>)
   241ea:	f007 ff64 	bl	2c0b6 <printk>
   241ee:	2184      	movs	r1, #132	; 0x84
   241f0:	4807      	ldr	r0, [pc, #28]	; (24210 <z_unpend_first_thread+0xf4>)
   241f2:	f008 f97d 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   241f6:	f385 8811 	msr	BASEPRI, r5
   241fa:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   241fe:	f104 0018 	add.w	r0, r4, #24
   24202:	f000 fdb9 	bl	24d78 <z_abort_timeout>
}
   24206:	4620      	mov	r0, r4
   24208:	bd38      	pop	{r3, r4, r5, pc}
   2420a:	bf00      	nop
   2420c:	20021df4 	.word	0x20021df4
   24210:	000301cf 	.word	0x000301cf
   24214:	00030221 	.word	0x00030221
   24218:	000300ff 	.word	0x000300ff
   2421c:	00030236 	.word	0x00030236
   24220:	000301f5 	.word	0x000301f5
   24224:	0003020c 	.word	0x0003020c

00024228 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   24228:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   2422a:	4b04      	ldr	r3, [pc, #16]	; (2423c <z_sched_init+0x14>)
   2422c:	4608      	mov	r0, r1
   2422e:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   24232:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   24236:	f7ff b803 	b.w	23240 <k_sched_time_slice_set>
   2423a:	bf00      	nop
   2423c:	20021dbc 	.word	0x20021dbc

00024240 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   24240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24242:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   24246:	b173      	cbz	r3, 24266 <z_impl_k_yield+0x26>
   24248:	4946      	ldr	r1, [pc, #280]	; (24364 <z_impl_k_yield+0x124>)
   2424a:	f240 4394 	movw	r3, #1172	; 0x494
   2424e:	4a46      	ldr	r2, [pc, #280]	; (24368 <z_impl_k_yield+0x128>)
   24250:	4846      	ldr	r0, [pc, #280]	; (2436c <z_impl_k_yield+0x12c>)
   24252:	f007 ff30 	bl	2c0b6 <printk>
   24256:	4846      	ldr	r0, [pc, #280]	; (24370 <z_impl_k_yield+0x130>)
   24258:	f007 ff2d 	bl	2c0b6 <printk>
   2425c:	f240 4194 	movw	r1, #1172	; 0x494
   24260:	4841      	ldr	r0, [pc, #260]	; (24368 <z_impl_k_yield+0x128>)
   24262:	f008 f945 	bl	2c4f0 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   24266:	4c43      	ldr	r4, [pc, #268]	; (24374 <z_impl_k_yield+0x134>)
   24268:	4e43      	ldr	r6, [pc, #268]	; (24378 <z_impl_k_yield+0x138>)
   2426a:	68a2      	ldr	r2, [r4, #8]
   2426c:	42b2      	cmp	r2, r6
   2426e:	d067      	beq.n	24340 <z_impl_k_yield+0x100>
	__asm__ volatile(
   24270:	f04f 0320 	mov.w	r3, #32
   24274:	f3ef 8711 	mrs	r7, BASEPRI
   24278:	f383 8811 	msr	BASEPRI, r3
   2427c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24280:	483e      	ldr	r0, [pc, #248]	; (2437c <z_impl_k_yield+0x13c>)
   24282:	f000 fb81 	bl	24988 <z_spin_lock_valid>
   24286:	b968      	cbnz	r0, 242a4 <z_impl_k_yield+0x64>
   24288:	235c      	movs	r3, #92	; 0x5c
   2428a:	4a3d      	ldr	r2, [pc, #244]	; (24380 <z_impl_k_yield+0x140>)
   2428c:	493d      	ldr	r1, [pc, #244]	; (24384 <z_impl_k_yield+0x144>)
   2428e:	4837      	ldr	r0, [pc, #220]	; (2436c <z_impl_k_yield+0x12c>)
   24290:	f007 ff11 	bl	2c0b6 <printk>
   24294:	4939      	ldr	r1, [pc, #228]	; (2437c <z_impl_k_yield+0x13c>)
   24296:	483c      	ldr	r0, [pc, #240]	; (24388 <z_impl_k_yield+0x148>)
   24298:	f007 ff0d 	bl	2c0b6 <printk>
   2429c:	215c      	movs	r1, #92	; 0x5c
   2429e:	4838      	ldr	r0, [pc, #224]	; (24380 <z_impl_k_yield+0x140>)
   242a0:	f008 f926 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   242a4:	4835      	ldr	r0, [pc, #212]	; (2437c <z_impl_k_yield+0x13c>)
   242a6:	f000 fb8d 	bl	249c4 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   242aa:	68a1      	ldr	r1, [r4, #8]
   242ac:	4837      	ldr	r0, [pc, #220]	; (2438c <z_impl_k_yield+0x14c>)
   242ae:	f7ff f975 	bl	2359c <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   242b2:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   242b4:	42b5      	cmp	r5, r6
   242b6:	d10b      	bne.n	242d0 <z_impl_k_yield+0x90>
   242b8:	4935      	ldr	r1, [pc, #212]	; (24390 <z_impl_k_yield+0x150>)
   242ba:	482c      	ldr	r0, [pc, #176]	; (2436c <z_impl_k_yield+0x12c>)
   242bc:	f240 3389 	movw	r3, #905	; 0x389
   242c0:	4a29      	ldr	r2, [pc, #164]	; (24368 <z_impl_k_yield+0x128>)
   242c2:	f007 fef8 	bl	2c0b6 <printk>
   242c6:	f240 3189 	movw	r1, #905	; 0x389
   242ca:	4827      	ldr	r0, [pc, #156]	; (24368 <z_impl_k_yield+0x128>)
   242cc:	f008 f910 	bl	2c4f0 <assert_post_action>
	return list->head == list;
   242d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   242d2:	492e      	ldr	r1, [pc, #184]	; (2438c <z_impl_k_yield+0x14c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   242d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   242d6:	428b      	cmp	r3, r1
   242d8:	bf08      	it	eq
   242da:	2300      	moveq	r3, #0
   242dc:	2b00      	cmp	r3, #0
   242de:	bf38      	it	cc
   242e0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   242e2:	2b00      	cmp	r3, #0
   242e4:	d038      	beq.n	24358 <z_impl_k_yield+0x118>
	if (thread_1->base.prio < thread_2->base.prio) {
   242e6:	f995 600e 	ldrsb.w	r6, [r5, #14]
   242ea:	f993 000e 	ldrsb.w	r0, [r3, #14]
   242ee:	4286      	cmp	r6, r0
   242f0:	db03      	blt.n	242fa <z_impl_k_yield+0xba>
	return (node == list->tail) ? NULL : node->next;
   242f2:	4293      	cmp	r3, r2
   242f4:	d030      	beq.n	24358 <z_impl_k_yield+0x118>
   242f6:	681b      	ldr	r3, [r3, #0]
   242f8:	e7f3      	b.n	242e2 <z_impl_k_yield+0xa2>
	node->prev = successor->prev;
   242fa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   242fc:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   24300:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   24302:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   24304:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   24306:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   24308:	7b53      	ldrb	r3, [r2, #13]
   2430a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2430e:	7353      	strb	r3, [r2, #13]
   24310:	f7ff f9be 	bl	23690 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24314:	4819      	ldr	r0, [pc, #100]	; (2437c <z_impl_k_yield+0x13c>)
   24316:	f000 fb45 	bl	249a4 <z_spin_unlock_valid>
   2431a:	b968      	cbnz	r0, 24338 <z_impl_k_yield+0xf8>
   2431c:	2384      	movs	r3, #132	; 0x84
   2431e:	4a18      	ldr	r2, [pc, #96]	; (24380 <z_impl_k_yield+0x140>)
   24320:	491c      	ldr	r1, [pc, #112]	; (24394 <z_impl_k_yield+0x154>)
   24322:	4812      	ldr	r0, [pc, #72]	; (2436c <z_impl_k_yield+0x12c>)
   24324:	f007 fec7 	bl	2c0b6 <printk>
   24328:	4914      	ldr	r1, [pc, #80]	; (2437c <z_impl_k_yield+0x13c>)
   2432a:	481b      	ldr	r0, [pc, #108]	; (24398 <z_impl_k_yield+0x158>)
   2432c:	f007 fec3 	bl	2c0b6 <printk>
   24330:	2184      	movs	r1, #132	; 0x84
   24332:	4813      	ldr	r0, [pc, #76]	; (24380 <z_impl_k_yield+0x140>)
   24334:	f008 f8dc 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   24338:	f387 8811 	msr	BASEPRI, r7
   2433c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   24340:	f04f 0320 	mov.w	r3, #32
   24344:	f3ef 8011 	mrs	r0, BASEPRI
   24348:	f383 8811 	msr	BASEPRI, r3
   2434c:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   24350:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   24354:	f7f0 b91c 	b.w	14590 <arch_swap>
	node->prev = list->tail;
   24358:	e9c5 1200 	strd	r1, r2, [r5]
	list->tail->next = node;
   2435c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2435e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   24360:	62e5      	str	r5, [r4, #44]	; 0x2c
}
   24362:	e7cf      	b.n	24304 <z_impl_k_yield+0xc4>
   24364:	00032aaa 	.word	0x00032aaa
   24368:	00032b53 	.word	0x00032b53
   2436c:	000300ff 	.word	0x000300ff
   24370:	0003072c 	.word	0x0003072c
   24374:	20021dbc 	.word	0x20021dbc
   24378:	200211b8 	.word	0x200211b8
   2437c:	20021df4 	.word	0x20021df4
   24380:	000301cf 	.word	0x000301cf
   24384:	00030221 	.word	0x00030221
   24388:	00030236 	.word	0x00030236
   2438c:	20021de4 	.word	0x20021de4
   24390:	00032b8c 	.word	0x00032b8c
   24394:	000301f5 	.word	0x000301f5
   24398:	0003020c 	.word	0x0003020c

0002439c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
{
   2439c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   243a0:	4604      	mov	r4, r0
   243a2:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   243a6:	b173      	cbz	r3, 243c6 <z_tick_sleep+0x2a>
   243a8:	493b      	ldr	r1, [pc, #236]	; (24498 <z_tick_sleep+0xfc>)
   243aa:	f240 43b2 	movw	r3, #1202	; 0x4b2
   243ae:	4a3b      	ldr	r2, [pc, #236]	; (2449c <z_tick_sleep+0x100>)
   243b0:	483b      	ldr	r0, [pc, #236]	; (244a0 <z_tick_sleep+0x104>)
   243b2:	f007 fe80 	bl	2c0b6 <printk>
   243b6:	483b      	ldr	r0, [pc, #236]	; (244a4 <z_tick_sleep+0x108>)
   243b8:	f007 fe7d 	bl	2c0b6 <printk>
   243bc:	f240 41b2 	movw	r1, #1202	; 0x4b2
   243c0:	4836      	ldr	r0, [pc, #216]	; (2449c <z_tick_sleep+0x100>)
   243c2:	f008 f895 	bl	2c4f0 <assert_post_action>

	LOG_DBG("thread %p for %d ticks", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   243c6:	b924      	cbnz	r4, 243d2 <z_tick_sleep+0x36>
	z_impl_k_yield();
   243c8:	f7ff ff3a 	bl	24240 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   243cc:	4620      	mov	r0, r4
   243ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   243d2:	f00a fa05 	bl	2e7e0 <z_tick_get_32>
	timeout = Z_TIMEOUT_TICKS(ticks);
   243d6:	4626      	mov	r6, r4
   243d8:	17e7      	asrs	r7, r4, #31
	expected_wakeup_time = ticks + z_tick_get_32();
   243da:	4404      	add	r4, r0
   243dc:	f04f 0320 	mov.w	r3, #32
   243e0:	f3ef 8811 	mrs	r8, BASEPRI
   243e4:	f383 8811 	msr	BASEPRI, r3
   243e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   243ec:	482e      	ldr	r0, [pc, #184]	; (244a8 <z_tick_sleep+0x10c>)
   243ee:	f000 facb 	bl	24988 <z_spin_lock_valid>
   243f2:	b968      	cbnz	r0, 24410 <z_tick_sleep+0x74>
   243f4:	235c      	movs	r3, #92	; 0x5c
   243f6:	4a2d      	ldr	r2, [pc, #180]	; (244ac <z_tick_sleep+0x110>)
   243f8:	492d      	ldr	r1, [pc, #180]	; (244b0 <z_tick_sleep+0x114>)
   243fa:	4829      	ldr	r0, [pc, #164]	; (244a0 <z_tick_sleep+0x104>)
   243fc:	f007 fe5b 	bl	2c0b6 <printk>
   24400:	4929      	ldr	r1, [pc, #164]	; (244a8 <z_tick_sleep+0x10c>)
   24402:	482c      	ldr	r0, [pc, #176]	; (244b4 <z_tick_sleep+0x118>)
   24404:	f007 fe57 	bl	2c0b6 <printk>
   24408:	215c      	movs	r1, #92	; 0x5c
   2440a:	4828      	ldr	r0, [pc, #160]	; (244ac <z_tick_sleep+0x110>)
   2440c:	f008 f870 	bl	2c4f0 <assert_post_action>
	pending_current = _current;
   24410:	4d29      	ldr	r5, [pc, #164]	; (244b8 <z_tick_sleep+0x11c>)
	z_spin_lock_set_owner(l);
   24412:	4825      	ldr	r0, [pc, #148]	; (244a8 <z_tick_sleep+0x10c>)
   24414:	f000 fad6 	bl	249c4 <z_spin_lock_set_owner>
   24418:	68a8      	ldr	r0, [r5, #8]
   2441a:	4b28      	ldr	r3, [pc, #160]	; (244bc <z_tick_sleep+0x120>)
   2441c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   2441e:	f7ff fcfb 	bl	23e18 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   24422:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   24424:	4632      	mov	r2, r6
   24426:	463b      	mov	r3, r7
   24428:	3018      	adds	r0, #24
   2442a:	4925      	ldr	r1, [pc, #148]	; (244c0 <z_tick_sleep+0x124>)
   2442c:	f000 fbd0 	bl	24bd0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   24430:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24432:	481d      	ldr	r0, [pc, #116]	; (244a8 <z_tick_sleep+0x10c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   24434:	7b53      	ldrb	r3, [r2, #13]
   24436:	f043 0310 	orr.w	r3, r3, #16
   2443a:	7353      	strb	r3, [r2, #13]
   2443c:	f000 fab2 	bl	249a4 <z_spin_unlock_valid>
   24440:	b968      	cbnz	r0, 2445e <z_tick_sleep+0xc2>
   24442:	239b      	movs	r3, #155	; 0x9b
   24444:	4a19      	ldr	r2, [pc, #100]	; (244ac <z_tick_sleep+0x110>)
   24446:	491f      	ldr	r1, [pc, #124]	; (244c4 <z_tick_sleep+0x128>)
   24448:	4815      	ldr	r0, [pc, #84]	; (244a0 <z_tick_sleep+0x104>)
   2444a:	f007 fe34 	bl	2c0b6 <printk>
   2444e:	4916      	ldr	r1, [pc, #88]	; (244a8 <z_tick_sleep+0x10c>)
   24450:	481d      	ldr	r0, [pc, #116]	; (244c8 <z_tick_sleep+0x12c>)
   24452:	f007 fe30 	bl	2c0b6 <printk>
   24456:	219b      	movs	r1, #155	; 0x9b
   24458:	4814      	ldr	r0, [pc, #80]	; (244ac <z_tick_sleep+0x110>)
   2445a:	f008 f849 	bl	2c4f0 <assert_post_action>
   2445e:	4640      	mov	r0, r8
   24460:	f7f0 f896 	bl	14590 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   24464:	68ab      	ldr	r3, [r5, #8]
   24466:	7b5b      	ldrb	r3, [r3, #13]
   24468:	06db      	lsls	r3, r3, #27
   2446a:	d50e      	bpl.n	2448a <z_tick_sleep+0xee>
   2446c:	4917      	ldr	r1, [pc, #92]	; (244cc <z_tick_sleep+0x130>)
   2446e:	f240 43d2 	movw	r3, #1234	; 0x4d2
   24472:	4a0a      	ldr	r2, [pc, #40]	; (2449c <z_tick_sleep+0x100>)
   24474:	480a      	ldr	r0, [pc, #40]	; (244a0 <z_tick_sleep+0x104>)
   24476:	f007 fe1e 	bl	2c0b6 <printk>
   2447a:	480a      	ldr	r0, [pc, #40]	; (244a4 <z_tick_sleep+0x108>)
   2447c:	f007 fe1b 	bl	2c0b6 <printk>
   24480:	f240 41d2 	movw	r1, #1234	; 0x4d2
   24484:	4805      	ldr	r0, [pc, #20]	; (2449c <z_tick_sleep+0x100>)
   24486:	f008 f833 	bl	2c4f0 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   2448a:	f00a f9a9 	bl	2e7e0 <z_tick_get_32>
   2448e:	1a24      	subs	r4, r4, r0
   24490:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   24494:	e79a      	b.n	243cc <z_tick_sleep+0x30>
   24496:	bf00      	nop
   24498:	00032aaa 	.word	0x00032aaa
   2449c:	00032b53 	.word	0x00032b53
   244a0:	000300ff 	.word	0x000300ff
   244a4:	0003072c 	.word	0x0003072c
   244a8:	20021df4 	.word	0x20021df4
   244ac:	000301cf 	.word	0x000301cf
   244b0:	00030221 	.word	0x00030221
   244b4:	00030236 	.word	0x00030236
   244b8:	20021dbc 	.word	0x20021dbc
   244bc:	20021df0 	.word	0x20021df0
   244c0:	000239a5 	.word	0x000239a5
   244c4:	000301f5 	.word	0x000301f5
   244c8:	0003020c 	.word	0x0003020c
   244cc:	00032c26 	.word	0x00032c26

000244d0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   244d0:	b538      	push	{r3, r4, r5, lr}
   244d2:	4604      	mov	r4, r0
   244d4:	460d      	mov	r5, r1
   244d6:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   244da:	b173      	cbz	r3, 244fa <z_impl_k_sleep+0x2a>
   244dc:	4912      	ldr	r1, [pc, #72]	; (24528 <z_impl_k_sleep+0x58>)
   244de:	f240 43e1 	movw	r3, #1249	; 0x4e1
   244e2:	4a12      	ldr	r2, [pc, #72]	; (2452c <z_impl_k_sleep+0x5c>)
   244e4:	4812      	ldr	r0, [pc, #72]	; (24530 <z_impl_k_sleep+0x60>)
   244e6:	f007 fde6 	bl	2c0b6 <printk>
   244ea:	4812      	ldr	r0, [pc, #72]	; (24534 <z_impl_k_sleep+0x64>)
   244ec:	f007 fde3 	bl	2c0b6 <printk>
   244f0:	f240 41e1 	movw	r1, #1249	; 0x4e1
   244f4:	480d      	ldr	r0, [pc, #52]	; (2452c <z_impl_k_sleep+0x5c>)
   244f6:	f007 fffb 	bl	2c4f0 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   244fa:	3501      	adds	r5, #1
   244fc:	bf08      	it	eq
   244fe:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   24502:	d106      	bne.n	24512 <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   24504:	4b0c      	ldr	r3, [pc, #48]	; (24538 <z_impl_k_sleep+0x68>)
   24506:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   24508:	f7ff fb6c 	bl	23be4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   2450c:	f04f 30ff 	mov.w	r0, #4294967295
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   24510:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   24512:	4620      	mov	r0, r4
   24514:	f7ff ff42 	bl	2439c <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   24518:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2451c:	fb80 0103 	smull	r0, r1, r0, r3
   24520:	0bc3      	lsrs	r3, r0, #15
   24522:	ea43 4041 	orr.w	r0, r3, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   24526:	e7f3      	b.n	24510 <z_impl_k_sleep+0x40>
   24528:	00032aaa 	.word	0x00032aaa
   2452c:	00032b53 	.word	0x00032b53
   24530:	000300ff 	.word	0x000300ff
   24534:	0003072c 	.word	0x0003072c
   24538:	20021dbc 	.word	0x20021dbc

0002453c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   2453c:	4b01      	ldr	r3, [pc, #4]	; (24544 <z_impl_k_current_get+0x8>)
   2453e:	6898      	ldr	r0, [r3, #8]
   24540:	4770      	bx	lr
   24542:	bf00      	nop
   24544:	20021dbc 	.word	0x20021dbc

00024548 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   24548:	b538      	push	{r3, r4, r5, lr}
   2454a:	4604      	mov	r4, r0
   2454c:	f04f 0320 	mov.w	r3, #32
   24550:	f3ef 8511 	mrs	r5, BASEPRI
   24554:	f383 8811 	msr	BASEPRI, r3
   24558:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2455c:	4817      	ldr	r0, [pc, #92]	; (245bc <z_impl_k_sem_give+0x74>)
   2455e:	f000 fa13 	bl	24988 <z_spin_lock_valid>
   24562:	b968      	cbnz	r0, 24580 <z_impl_k_sem_give+0x38>
   24564:	235c      	movs	r3, #92	; 0x5c
   24566:	4a16      	ldr	r2, [pc, #88]	; (245c0 <z_impl_k_sem_give+0x78>)
   24568:	4916      	ldr	r1, [pc, #88]	; (245c4 <z_impl_k_sem_give+0x7c>)
   2456a:	4817      	ldr	r0, [pc, #92]	; (245c8 <z_impl_k_sem_give+0x80>)
   2456c:	f007 fda3 	bl	2c0b6 <printk>
   24570:	4912      	ldr	r1, [pc, #72]	; (245bc <z_impl_k_sem_give+0x74>)
   24572:	4816      	ldr	r0, [pc, #88]	; (245cc <z_impl_k_sem_give+0x84>)
   24574:	f007 fd9f 	bl	2c0b6 <printk>
   24578:	215c      	movs	r1, #92	; 0x5c
   2457a:	4811      	ldr	r0, [pc, #68]	; (245c0 <z_impl_k_sem_give+0x78>)
   2457c:	f007 ffb8 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   24580:	480e      	ldr	r0, [pc, #56]	; (245bc <z_impl_k_sem_give+0x74>)
   24582:	f000 fa1f 	bl	249c4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   24586:	4620      	mov	r0, r4
   24588:	f7ff fdc8 	bl	2411c <z_unpend_first_thread>

	if (thread != NULL) {
   2458c:	b148      	cbz	r0, 245a2 <z_impl_k_sem_give+0x5a>
   2458e:	2200      	movs	r2, #0
   24590:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   24592:	f7ff f96b 	bl	2386c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   24596:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   24598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2459c:	4807      	ldr	r0, [pc, #28]	; (245bc <z_impl_k_sem_give+0x74>)
   2459e:	f7fe bf41 	b.w	23424 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   245a2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   245a6:	429a      	cmp	r2, r3
   245a8:	bf18      	it	ne
   245aa:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   245ac:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   245ae:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   245b0:	f104 0010 	add.w	r0, r4, #16
   245b4:	f00a f9bd 	bl	2e932 <z_handle_obj_poll_events>
}
   245b8:	e7ed      	b.n	24596 <z_impl_k_sem_give+0x4e>
   245ba:	bf00      	nop
   245bc:	20021e00 	.word	0x20021e00
   245c0:	000301cf 	.word	0x000301cf
   245c4:	00030221 	.word	0x00030221
   245c8:	000300ff 	.word	0x000300ff
   245cc:	00030236 	.word	0x00030236

000245d0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   245d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   245d2:	4604      	mov	r4, r0
   245d4:	4616      	mov	r6, r2
   245d6:	461f      	mov	r7, r3
   245d8:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   245dc:	b17b      	cbz	r3, 245fe <z_impl_k_sem_take+0x2e>
   245de:	ea56 0307 	orrs.w	r3, r6, r7
   245e2:	d00c      	beq.n	245fe <z_impl_k_sem_take+0x2e>
   245e4:	4935      	ldr	r1, [pc, #212]	; (246bc <z_impl_k_sem_take+0xec>)
   245e6:	238c      	movs	r3, #140	; 0x8c
   245e8:	4a35      	ldr	r2, [pc, #212]	; (246c0 <z_impl_k_sem_take+0xf0>)
   245ea:	4836      	ldr	r0, [pc, #216]	; (246c4 <z_impl_k_sem_take+0xf4>)
   245ec:	f007 fd63 	bl	2c0b6 <printk>
   245f0:	4835      	ldr	r0, [pc, #212]	; (246c8 <z_impl_k_sem_take+0xf8>)
   245f2:	f007 fd60 	bl	2c0b6 <printk>
   245f6:	218c      	movs	r1, #140	; 0x8c
   245f8:	4831      	ldr	r0, [pc, #196]	; (246c0 <z_impl_k_sem_take+0xf0>)
   245fa:	f007 ff79 	bl	2c4f0 <assert_post_action>
   245fe:	f04f 0320 	mov.w	r3, #32
   24602:	f3ef 8511 	mrs	r5, BASEPRI
   24606:	f383 8811 	msr	BASEPRI, r3
   2460a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2460e:	482f      	ldr	r0, [pc, #188]	; (246cc <z_impl_k_sem_take+0xfc>)
   24610:	f000 f9ba 	bl	24988 <z_spin_lock_valid>
   24614:	b968      	cbnz	r0, 24632 <z_impl_k_sem_take+0x62>
   24616:	235c      	movs	r3, #92	; 0x5c
   24618:	4a2d      	ldr	r2, [pc, #180]	; (246d0 <z_impl_k_sem_take+0x100>)
   2461a:	492e      	ldr	r1, [pc, #184]	; (246d4 <z_impl_k_sem_take+0x104>)
   2461c:	4829      	ldr	r0, [pc, #164]	; (246c4 <z_impl_k_sem_take+0xf4>)
   2461e:	f007 fd4a 	bl	2c0b6 <printk>
   24622:	492a      	ldr	r1, [pc, #168]	; (246cc <z_impl_k_sem_take+0xfc>)
   24624:	482c      	ldr	r0, [pc, #176]	; (246d8 <z_impl_k_sem_take+0x108>)
   24626:	f007 fd46 	bl	2c0b6 <printk>
   2462a:	215c      	movs	r1, #92	; 0x5c
   2462c:	4828      	ldr	r0, [pc, #160]	; (246d0 <z_impl_k_sem_take+0x100>)
   2462e:	f007 ff5f 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   24632:	4826      	ldr	r0, [pc, #152]	; (246cc <z_impl_k_sem_take+0xfc>)
   24634:	f000 f9c6 	bl	249c4 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   24638:	68a3      	ldr	r3, [r4, #8]
   2463a:	b1d3      	cbz	r3, 24672 <z_impl_k_sem_take+0xa2>
		sem->count--;
   2463c:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2463e:	4823      	ldr	r0, [pc, #140]	; (246cc <z_impl_k_sem_take+0xfc>)
   24640:	60a3      	str	r3, [r4, #8]
   24642:	f000 f9af 	bl	249a4 <z_spin_unlock_valid>
   24646:	b968      	cbnz	r0, 24664 <z_impl_k_sem_take+0x94>
   24648:	2384      	movs	r3, #132	; 0x84
   2464a:	4a21      	ldr	r2, [pc, #132]	; (246d0 <z_impl_k_sem_take+0x100>)
   2464c:	4923      	ldr	r1, [pc, #140]	; (246dc <z_impl_k_sem_take+0x10c>)
   2464e:	481d      	ldr	r0, [pc, #116]	; (246c4 <z_impl_k_sem_take+0xf4>)
   24650:	f007 fd31 	bl	2c0b6 <printk>
   24654:	491d      	ldr	r1, [pc, #116]	; (246cc <z_impl_k_sem_take+0xfc>)
   24656:	4822      	ldr	r0, [pc, #136]	; (246e0 <z_impl_k_sem_take+0x110>)
   24658:	f007 fd2d 	bl	2c0b6 <printk>
   2465c:	2184      	movs	r1, #132	; 0x84
   2465e:	481c      	ldr	r0, [pc, #112]	; (246d0 <z_impl_k_sem_take+0x100>)
   24660:	f007 ff46 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   24664:	f385 8811 	msr	BASEPRI, r5
   24668:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2466c:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   2466e:	b003      	add	sp, #12
   24670:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24672:	ea56 0307 	orrs.w	r3, r6, r7
   24676:	d118      	bne.n	246aa <z_impl_k_sem_take+0xda>
   24678:	4814      	ldr	r0, [pc, #80]	; (246cc <z_impl_k_sem_take+0xfc>)
   2467a:	f000 f993 	bl	249a4 <z_spin_unlock_valid>
   2467e:	b968      	cbnz	r0, 2469c <z_impl_k_sem_take+0xcc>
   24680:	2384      	movs	r3, #132	; 0x84
   24682:	4a13      	ldr	r2, [pc, #76]	; (246d0 <z_impl_k_sem_take+0x100>)
   24684:	4915      	ldr	r1, [pc, #84]	; (246dc <z_impl_k_sem_take+0x10c>)
   24686:	480f      	ldr	r0, [pc, #60]	; (246c4 <z_impl_k_sem_take+0xf4>)
   24688:	f007 fd15 	bl	2c0b6 <printk>
   2468c:	490f      	ldr	r1, [pc, #60]	; (246cc <z_impl_k_sem_take+0xfc>)
   2468e:	4814      	ldr	r0, [pc, #80]	; (246e0 <z_impl_k_sem_take+0x110>)
   24690:	f007 fd11 	bl	2c0b6 <printk>
   24694:	2184      	movs	r1, #132	; 0x84
   24696:	480e      	ldr	r0, [pc, #56]	; (246d0 <z_impl_k_sem_take+0x100>)
   24698:	f007 ff2a 	bl	2c4f0 <assert_post_action>
   2469c:	f385 8811 	msr	BASEPRI, r5
   246a0:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   246a4:	f06f 000f 	mvn.w	r0, #15
   246a8:	e7e1      	b.n	2466e <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   246aa:	4622      	mov	r2, r4
   246ac:	4629      	mov	r1, r5
   246ae:	e9cd 6700 	strd	r6, r7, [sp]
   246b2:	4806      	ldr	r0, [pc, #24]	; (246cc <z_impl_k_sem_take+0xfc>)
   246b4:	f7ff fc6c 	bl	23f90 <z_pend_curr>
	return ret;
   246b8:	e7d9      	b.n	2466e <z_impl_k_sem_take+0x9e>
   246ba:	bf00      	nop
   246bc:	00032c86 	.word	0x00032c86
   246c0:	00032c66 	.word	0x00032c66
   246c4:	000300ff 	.word	0x000300ff
   246c8:	0003072c 	.word	0x0003072c
   246cc:	20021e00 	.word	0x20021e00
   246d0:	000301cf 	.word	0x000301cf
   246d4:	00030221 	.word	0x00030221
   246d8:	00030236 	.word	0x00030236
   246dc:	000301f5 	.word	0x000301f5
   246e0:	0003020c 	.word	0x0003020c

000246e4 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   246e4:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   246e6:	4c08      	ldr	r4, [pc, #32]	; (24708 <k_sys_work_q_init+0x24>)
   246e8:	f04f 33ff 	mov.w	r3, #4294967295
   246ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
   246f0:	4620      	mov	r0, r4
   246f2:	4906      	ldr	r1, [pc, #24]	; (2470c <k_sys_work_q_init+0x28>)
   246f4:	f000 f96e 	bl	249d4 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   246f8:	4905      	ldr	r1, [pc, #20]	; (24710 <k_sys_work_q_init+0x2c>)
   246fa:	f104 0020 	add.w	r0, r4, #32
   246fe:	f00a f806 	bl	2e70e <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   24702:	2000      	movs	r0, #0
   24704:	bd10      	pop	{r4, pc}
   24706:	bf00      	nop
   24708:	20021348 	.word	0x20021348
   2470c:	20029c50 	.word	0x20029c50
   24710:	00032cd3 	.word	0x00032cd3

00024714 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   24714:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   24718:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   2471a:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   2471c:	2e0f      	cmp	r6, #15
{
   2471e:	460f      	mov	r7, r1
   24720:	4615      	mov	r5, r2
   24722:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   24724:	d12d      	bne.n	24782 <z_setup_new_thread+0x6e>
   24726:	4b23      	ldr	r3, [pc, #140]	; (247b4 <z_setup_new_thread+0xa0>)
   24728:	4598      	cmp	r8, r3
   2472a:	d12e      	bne.n	2478a <z_setup_new_thread+0x76>
	sys_dlist_init(&w->waitq);
   2472c:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   24730:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   24734:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   24736:	73a6      	strb	r6, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   24738:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   2473a:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   2473c:	2600      	movs	r6, #0
	thread_base->thread_state = (uint8_t)initial_state;
   2473e:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   24742:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24744:	9302      	str	r3, [sp, #8]
   24746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   24748:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2474c:	9301      	str	r3, [sp, #4]
   2474e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   24750:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   24752:	e9c4 701a 	strd	r7, r0, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24756:	9300      	str	r3, [sp, #0]
   24758:	462a      	mov	r2, r5
   2475a:	4643      	mov	r3, r8
   2475c:	4639      	mov	r1, r7
   2475e:	4620      	mov	r0, r4
	node->prev = NULL;
   24760:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->sched_locked = 0U;
   24764:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   24766:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24768:	f7ef fff2 	bl	14750 <arch_new_thread>
	if (!_current) {
   2476c:	4b12      	ldr	r3, [pc, #72]	; (247b8 <z_setup_new_thread+0xa4>)
	new_thread->fn_abort = NULL;
   2476e:	e9c4 6617 	strd	r6, r6, [r4, #92]	; 0x5c
	if (!_current) {
   24772:	689b      	ldr	r3, [r3, #8]
   24774:	b103      	cbz	r3, 24778 <z_setup_new_thread+0x64>
	new_thread->resource_pool = _current->resource_pool;
   24776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   24778:	4628      	mov	r0, r5
   2477a:	6763      	str	r3, [r4, #116]	; 0x74
   2477c:	b004      	add	sp, #16
   2477e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   24782:	f106 0310 	add.w	r3, r6, #16
   24786:	2b1e      	cmp	r3, #30
   24788:	d9d0      	bls.n	2472c <z_setup_new_thread+0x18>
   2478a:	f240 2313 	movw	r3, #531	; 0x213
   2478e:	4a0b      	ldr	r2, [pc, #44]	; (247bc <z_setup_new_thread+0xa8>)
   24790:	490b      	ldr	r1, [pc, #44]	; (247c0 <z_setup_new_thread+0xac>)
   24792:	480c      	ldr	r0, [pc, #48]	; (247c4 <z_setup_new_thread+0xb0>)
   24794:	f007 fc8f 	bl	2c0b6 <printk>
   24798:	4631      	mov	r1, r6
   2479a:	f06f 030f 	mvn.w	r3, #15
   2479e:	220e      	movs	r2, #14
   247a0:	4809      	ldr	r0, [pc, #36]	; (247c8 <z_setup_new_thread+0xb4>)
   247a2:	f007 fc88 	bl	2c0b6 <printk>
   247a6:	f240 2113 	movw	r1, #531	; 0x213
   247aa:	4804      	ldr	r0, [pc, #16]	; (247bc <z_setup_new_thread+0xa8>)
   247ac:	f007 fea0 	bl	2c4f0 <assert_post_action>
   247b0:	e7bc      	b.n	2472c <z_setup_new_thread+0x18>
   247b2:	bf00      	nop
   247b4:	00022385 	.word	0x00022385
   247b8:	20021dbc 	.word	0x20021dbc
   247bc:	00032cdc 	.word	0x00032cdc
   247c0:	00032cff 	.word	0x00032cff
   247c4:	000300ff 	.word	0x000300ff
   247c8:	00032d7f 	.word	0x00032d7f

000247cc <z_impl_k_thread_create>:
{
   247cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   247d0:	b087      	sub	sp, #28
   247d2:	4604      	mov	r4, r0
   247d4:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   247d8:	460d      	mov	r5, r1
   247da:	4690      	mov	r8, r2
   247dc:	4699      	mov	r9, r3
   247de:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   247e2:	b173      	cbz	r3, 24802 <z_impl_k_thread_create+0x36>
   247e4:	491b      	ldr	r1, [pc, #108]	; (24854 <z_impl_k_thread_create+0x88>)
   247e6:	f240 2373 	movw	r3, #627	; 0x273
   247ea:	4a1b      	ldr	r2, [pc, #108]	; (24858 <z_impl_k_thread_create+0x8c>)
   247ec:	481b      	ldr	r0, [pc, #108]	; (2485c <z_impl_k_thread_create+0x90>)
   247ee:	f007 fc62 	bl	2c0b6 <printk>
   247f2:	481b      	ldr	r0, [pc, #108]	; (24860 <z_impl_k_thread_create+0x94>)
   247f4:	f007 fc5f 	bl	2c0b6 <printk>
   247f8:	f240 2173 	movw	r1, #627	; 0x273
   247fc:	4816      	ldr	r0, [pc, #88]	; (24858 <z_impl_k_thread_create+0x8c>)
   247fe:	f007 fe77 	bl	2c4f0 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   24802:	2300      	movs	r3, #0
   24804:	9305      	str	r3, [sp, #20]
   24806:	9b12      	ldr	r3, [sp, #72]	; 0x48
   24808:	4642      	mov	r2, r8
   2480a:	9304      	str	r3, [sp, #16]
   2480c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2480e:	4629      	mov	r1, r5
   24810:	9303      	str	r3, [sp, #12]
   24812:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24814:	4620      	mov	r0, r4
   24816:	9302      	str	r3, [sp, #8]
   24818:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2481a:	9301      	str	r3, [sp, #4]
   2481c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2481e:	9300      	str	r3, [sp, #0]
   24820:	464b      	mov	r3, r9
   24822:	f7ff ff77 	bl	24714 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   24826:	1c7b      	adds	r3, r7, #1
   24828:	bf08      	it	eq
   2482a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2482e:	d005      	beq.n	2483c <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24830:	ea56 0307 	orrs.w	r3, r6, r7
   24834:	d106      	bne.n	24844 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   24836:	4620      	mov	r0, r4
   24838:	f7ff f860 	bl	238fc <z_sched_start>
}
   2483c:	4620      	mov	r0, r4
   2483e:	b007      	add	sp, #28
   24840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24844:	4632      	mov	r2, r6
   24846:	463b      	mov	r3, r7
   24848:	4906      	ldr	r1, [pc, #24]	; (24864 <z_impl_k_thread_create+0x98>)
   2484a:	f104 0018 	add.w	r0, r4, #24
   2484e:	f000 f9bf 	bl	24bd0 <z_add_timeout>
   24852:	e7f3      	b.n	2483c <z_impl_k_thread_create+0x70>
   24854:	00032aaa 	.word	0x00032aaa
   24858:	00032cdc 	.word	0x00032cdc
   2485c:	000300ff 	.word	0x000300ff
   24860:	00032db0 	.word	0x00032db0
   24864:	000239a5 	.word	0x000239a5

00024868 <z_init_static_threads>:
{
   24868:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   2486c:	4f3f      	ldr	r7, [pc, #252]	; (2496c <z_init_static_threads+0x104>)
   2486e:	4d40      	ldr	r5, [pc, #256]	; (24970 <z_init_static_threads+0x108>)
   24870:	463e      	mov	r6, r7
   24872:	f8df 810c 	ldr.w	r8, [pc, #268]	; 24980 <z_init_static_threads+0x118>
{
   24876:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   24878:	42bd      	cmp	r5, r7
   2487a:	d90e      	bls.n	2489a <z_init_static_threads+0x32>
   2487c:	493d      	ldr	r1, [pc, #244]	; (24974 <z_init_static_threads+0x10c>)
   2487e:	f240 23e1 	movw	r3, #737	; 0x2e1
   24882:	4642      	mov	r2, r8
   24884:	483c      	ldr	r0, [pc, #240]	; (24978 <z_init_static_threads+0x110>)
   24886:	f007 fc16 	bl	2c0b6 <printk>
   2488a:	483c      	ldr	r0, [pc, #240]	; (2497c <z_init_static_threads+0x114>)
   2488c:	f007 fc13 	bl	2c0b6 <printk>
   24890:	f240 21e1 	movw	r1, #737	; 0x2e1
   24894:	4640      	mov	r0, r8
   24896:	f007 fe2b 	bl	2c4f0 <assert_post_action>
   2489a:	42b5      	cmp	r5, r6
   2489c:	f105 0430 	add.w	r4, r5, #48	; 0x30
   248a0:	d31f      	bcc.n	248e2 <z_init_static_threads+0x7a>
	k_sched_lock();
   248a2:	f7fe fe03 	bl	234ac <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   248a6:	4c32      	ldr	r4, [pc, #200]	; (24970 <z_init_static_threads+0x108>)
   248a8:	4d35      	ldr	r5, [pc, #212]	; (24980 <z_init_static_threads+0x118>)
   248aa:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 24974 <z_init_static_threads+0x10c>
   248ae:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 24978 <z_init_static_threads+0x110>
   248b2:	42b4      	cmp	r4, r6
   248b4:	d90e      	bls.n	248d4 <z_init_static_threads+0x6c>
   248b6:	4641      	mov	r1, r8
   248b8:	f44f 7340 	mov.w	r3, #768	; 0x300
   248bc:	462a      	mov	r2, r5
   248be:	4648      	mov	r0, r9
   248c0:	f007 fbf9 	bl	2c0b6 <printk>
   248c4:	482d      	ldr	r0, [pc, #180]	; (2497c <z_init_static_threads+0x114>)
   248c6:	f007 fbf6 	bl	2c0b6 <printk>
   248ca:	f44f 7140 	mov.w	r1, #768	; 0x300
   248ce:	4628      	mov	r0, r5
   248d0:	f007 fe0e 	bl	2c4f0 <assert_post_action>
   248d4:	42b4      	cmp	r4, r6
   248d6:	d321      	bcc.n	2491c <z_init_static_threads+0xb4>
}
   248d8:	b006      	add	sp, #24
   248da:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   248de:	f7fe befb 	b.w	236d8 <k_sched_unlock>
		z_setup_new_thread(
   248e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   248e6:	9305      	str	r3, [sp, #20]
   248e8:	f854 3c10 	ldr.w	r3, [r4, #-16]
   248ec:	9304      	str	r3, [sp, #16]
   248ee:	f854 3c14 	ldr.w	r3, [r4, #-20]
   248f2:	9303      	str	r3, [sp, #12]
   248f4:	f854 3c18 	ldr.w	r3, [r4, #-24]
   248f8:	9302      	str	r3, [sp, #8]
   248fa:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   248fe:	9301      	str	r3, [sp, #4]
   24900:	f854 3c20 	ldr.w	r3, [r4, #-32]
   24904:	9300      	str	r3, [sp, #0]
   24906:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2490a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2490e:	f7ff ff01 	bl	24714 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   24912:	f854 3c30 	ldr.w	r3, [r4, #-48]
   24916:	65dd      	str	r5, [r3, #92]	; 0x5c
   24918:	4625      	mov	r5, r4
   2491a:	e7ad      	b.n	24878 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2491c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2491e:	1c4b      	adds	r3, r1, #1
   24920:	d014      	beq.n	2494c <z_init_static_threads+0xe4>
   24922:	f240 32e7 	movw	r2, #999	; 0x3e7
   24926:	2300      	movs	r3, #0
   24928:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2492c:	4693      	mov	fp, r2
   2492e:	469c      	mov	ip, r3
					    K_MSEC(thread_data->init_delay));
   24930:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   24934:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24938:	459c      	cmp	ip, r3
   2493a:	bf08      	it	eq
   2493c:	4593      	cmpeq	fp, r2
   2493e:	4658      	mov	r0, fp
   24940:	4661      	mov	r1, ip
			schedule_new_thread(thread_data->init_thread,
   24942:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24944:	d104      	bne.n	24950 <z_init_static_threads+0xe8>
	z_sched_start(thread);
   24946:	4638      	mov	r0, r7
   24948:	f7fe ffd8 	bl	238fc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2494c:	3430      	adds	r4, #48	; 0x30
   2494e:	e7b0      	b.n	248b2 <z_init_static_threads+0x4a>
   24950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24954:	2300      	movs	r3, #0
   24956:	f7e7 ff7f 	bl	c858 <__aeabi_uldivmod>
   2495a:	4602      	mov	r2, r0
   2495c:	460b      	mov	r3, r1
   2495e:	f107 0018 	add.w	r0, r7, #24
   24962:	4908      	ldr	r1, [pc, #32]	; (24984 <z_init_static_threads+0x11c>)
   24964:	f000 f934 	bl	24bd0 <z_add_timeout>
   24968:	e7f0      	b.n	2494c <z_init_static_threads+0xe4>
   2496a:	bf00      	nop
   2496c:	20020b14 	.word	0x20020b14
   24970:	20020ae4 	.word	0x20020ae4
   24974:	00032dd5 	.word	0x00032dd5
   24978:	000300ff 	.word	0x000300ff
   2497c:	000307aa 	.word	0x000307aa
   24980:	00032cdc 	.word	0x00032cdc
   24984:	000239a5 	.word	0x000239a5

00024988 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   24988:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   2498a:	b138      	cbz	r0, 2499c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   2498c:	4b04      	ldr	r3, [pc, #16]	; (249a0 <z_spin_lock_valid+0x18>)
   2498e:	f000 0003 	and.w	r0, r0, #3
   24992:	7d1b      	ldrb	r3, [r3, #20]
   24994:	1ac0      	subs	r0, r0, r3
   24996:	bf18      	it	ne
   24998:	2001      	movne	r0, #1
   2499a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   2499c:	2001      	movs	r0, #1
}
   2499e:	4770      	bx	lr
   249a0:	20021dbc 	.word	0x20021dbc

000249a4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   249a4:	4a06      	ldr	r2, [pc, #24]	; (249c0 <z_spin_unlock_valid+0x1c>)
   249a6:	7d11      	ldrb	r1, [r2, #20]
   249a8:	6893      	ldr	r3, [r2, #8]
   249aa:	6802      	ldr	r2, [r0, #0]
   249ac:	430b      	orrs	r3, r1
   249ae:	429a      	cmp	r2, r3
   249b0:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   249b4:	bf06      	itte	eq
   249b6:	6003      	streq	r3, [r0, #0]
	return true;
   249b8:	2001      	moveq	r0, #1
		return false;
   249ba:	4618      	movne	r0, r3
}
   249bc:	4770      	bx	lr
   249be:	bf00      	nop
   249c0:	20021dbc 	.word	0x20021dbc

000249c4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   249c4:	4a02      	ldr	r2, [pc, #8]	; (249d0 <z_spin_lock_set_owner+0xc>)
   249c6:	7d11      	ldrb	r1, [r2, #20]
   249c8:	6893      	ldr	r3, [r2, #8]
   249ca:	430b      	orrs	r3, r1
   249cc:	6003      	str	r3, [r0, #0]
}
   249ce:	4770      	bx	lr
   249d0:	20021dbc 	.word	0x20021dbc

000249d4 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   249d4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   249d8:	b08a      	sub	sp, #40	; 0x28
   249da:	4604      	mov	r4, r0
   249dc:	461d      	mov	r5, r3
   249de:	e9cd 2108 	strd	r2, r1, [sp, #32]
	z_impl_k_queue_init(queue);
   249e2:	f009 fe22 	bl	2e62a <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   249e6:	f104 0620 	add.w	r6, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   249ea:	2000      	movs	r0, #0
   249ec:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   249f0:	f04f 0800 	mov.w	r8, #0
   249f4:	f04f 0900 	mov.w	r9, #0
   249f8:	e9cd 5003 	strd	r5, r0, [sp, #12]
   249fc:	e9cd 0001 	strd	r0, r0, [sp, #4]
   24a00:	e9cd 8906 	strd	r8, r9, [sp, #24]
   24a04:	4630      	mov	r0, r6
   24a06:	4b05      	ldr	r3, [pc, #20]	; (24a1c <k_work_q_start+0x48>)
   24a08:	9400      	str	r4, [sp, #0]
   24a0a:	f7ff fedf 	bl	247cc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   24a0e:	4630      	mov	r0, r6
   24a10:	4903      	ldr	r1, [pc, #12]	; (24a20 <k_work_q_start+0x4c>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   24a12:	b00a      	add	sp, #40	; 0x28
   24a14:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   24a18:	f009 be79 	b.w	2e70e <z_impl_k_thread_name_set>
   24a1c:	00012aa9 	.word	0x00012aa9
   24a20:	000316f5 	.word	0x000316f5

00024a24 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   24a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24a28:	4680      	mov	r8, r0
   24a2a:	460d      	mov	r5, r1
   24a2c:	4616      	mov	r6, r2
   24a2e:	461f      	mov	r7, r3
	__asm__ volatile(
   24a30:	f04f 0320 	mov.w	r3, #32
   24a34:	f3ef 8911 	mrs	r9, BASEPRI
   24a38:	f383 8811 	msr	BASEPRI, r3
   24a3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24a40:	4835      	ldr	r0, [pc, #212]	; (24b18 <k_delayed_work_submit_to_queue+0xf4>)
   24a42:	f7ff ffa1 	bl	24988 <z_spin_lock_valid>
   24a46:	b968      	cbnz	r0, 24a64 <k_delayed_work_submit_to_queue+0x40>
   24a48:	235c      	movs	r3, #92	; 0x5c
   24a4a:	4a34      	ldr	r2, [pc, #208]	; (24b1c <k_delayed_work_submit_to_queue+0xf8>)
   24a4c:	4934      	ldr	r1, [pc, #208]	; (24b20 <k_delayed_work_submit_to_queue+0xfc>)
   24a4e:	4835      	ldr	r0, [pc, #212]	; (24b24 <k_delayed_work_submit_to_queue+0x100>)
   24a50:	f007 fb31 	bl	2c0b6 <printk>
   24a54:	4930      	ldr	r1, [pc, #192]	; (24b18 <k_delayed_work_submit_to_queue+0xf4>)
   24a56:	4834      	ldr	r0, [pc, #208]	; (24b28 <k_delayed_work_submit_to_queue+0x104>)
   24a58:	f007 fb2d 	bl	2c0b6 <printk>
   24a5c:	215c      	movs	r1, #92	; 0x5c
   24a5e:	482f      	ldr	r0, [pc, #188]	; (24b1c <k_delayed_work_submit_to_queue+0xf8>)
   24a60:	f007 fd46 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   24a64:	482c      	ldr	r0, [pc, #176]	; (24b18 <k_delayed_work_submit_to_queue+0xf4>)
   24a66:	f7ff ffad 	bl	249c4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   24a6a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   24a6c:	b30b      	cbz	r3, 24ab2 <k_delayed_work_submit_to_queue+0x8e>
   24a6e:	4543      	cmp	r3, r8
   24a70:	d14e      	bne.n	24b10 <k_delayed_work_submit_to_queue+0xec>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   24a72:	4628      	mov	r0, r5
   24a74:	f009 fe69 	bl	2e74a <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   24a78:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   24a7c:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   24a7e:	d01b      	beq.n	24ab8 <k_delayed_work_submit_to_queue+0x94>
			err = 0;
		} else if (err < 0) {
   24a80:	2800      	cmp	r0, #0
   24a82:	da1a      	bge.n	24aba <k_delayed_work_submit_to_queue+0x96>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24a84:	4824      	ldr	r0, [pc, #144]	; (24b18 <k_delayed_work_submit_to_queue+0xf4>)
   24a86:	f7ff ff8d 	bl	249a4 <z_spin_unlock_valid>
   24a8a:	b968      	cbnz	r0, 24aa8 <k_delayed_work_submit_to_queue+0x84>
   24a8c:	2384      	movs	r3, #132	; 0x84
   24a8e:	4a23      	ldr	r2, [pc, #140]	; (24b1c <k_delayed_work_submit_to_queue+0xf8>)
   24a90:	4926      	ldr	r1, [pc, #152]	; (24b2c <k_delayed_work_submit_to_queue+0x108>)
   24a92:	4824      	ldr	r0, [pc, #144]	; (24b24 <k_delayed_work_submit_to_queue+0x100>)
   24a94:	f007 fb0f 	bl	2c0b6 <printk>
   24a98:	491f      	ldr	r1, [pc, #124]	; (24b18 <k_delayed_work_submit_to_queue+0xf4>)
   24a9a:	4825      	ldr	r0, [pc, #148]	; (24b30 <k_delayed_work_submit_to_queue+0x10c>)
   24a9c:	f007 fb0b 	bl	2c0b6 <printk>
   24aa0:	2184      	movs	r1, #132	; 0x84
   24aa2:	481e      	ldr	r0, [pc, #120]	; (24b1c <k_delayed_work_submit_to_queue+0xf8>)
   24aa4:	f007 fd24 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   24aa8:	f389 8811 	msr	BASEPRI, r9
   24aac:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   24ab0:	e023      	b.n	24afa <k_delayed_work_submit_to_queue+0xd6>
	if (work->work_q == work_q) {
   24ab2:	f1b8 0f00 	cmp.w	r8, #0
   24ab6:	d0dc      	beq.n	24a72 <k_delayed_work_submit_to_queue+0x4e>
	int err = 0;
   24ab8:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24aba:	ea56 0307 	orrs.w	r3, r6, r7
	work->work_q = work_q;
   24abe:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24ac2:	d11d      	bne.n	24b00 <k_delayed_work_submit_to_queue+0xdc>
   24ac4:	4814      	ldr	r0, [pc, #80]	; (24b18 <k_delayed_work_submit_to_queue+0xf4>)
   24ac6:	f7ff ff6d 	bl	249a4 <z_spin_unlock_valid>
   24aca:	b968      	cbnz	r0, 24ae8 <k_delayed_work_submit_to_queue+0xc4>
   24acc:	2384      	movs	r3, #132	; 0x84
   24ace:	4a13      	ldr	r2, [pc, #76]	; (24b1c <k_delayed_work_submit_to_queue+0xf8>)
   24ad0:	4916      	ldr	r1, [pc, #88]	; (24b2c <k_delayed_work_submit_to_queue+0x108>)
   24ad2:	4814      	ldr	r0, [pc, #80]	; (24b24 <k_delayed_work_submit_to_queue+0x100>)
   24ad4:	f007 faef 	bl	2c0b6 <printk>
   24ad8:	490f      	ldr	r1, [pc, #60]	; (24b18 <k_delayed_work_submit_to_queue+0xf4>)
   24ada:	4815      	ldr	r0, [pc, #84]	; (24b30 <k_delayed_work_submit_to_queue+0x10c>)
   24adc:	f007 faeb 	bl	2c0b6 <printk>
   24ae0:	2184      	movs	r1, #132	; 0x84
   24ae2:	480e      	ldr	r0, [pc, #56]	; (24b1c <k_delayed_work_submit_to_queue+0xf8>)
   24ae4:	f007 fd04 	bl	2c4f0 <assert_post_action>
   24ae8:	f389 8811 	msr	BASEPRI, r9
   24aec:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   24af0:	4629      	mov	r1, r5
   24af2:	4640      	mov	r0, r8
   24af4:	f009 fe10 	bl	2e718 <k_work_submit_to_queue>
		return 0;
   24af8:	2400      	movs	r4, #0
}
   24afa:	4620      	mov	r0, r4
   24afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   24b00:	4632      	mov	r2, r6
   24b02:	463b      	mov	r3, r7
   24b04:	490b      	ldr	r1, [pc, #44]	; (24b34 <k_delayed_work_submit_to_queue+0x110>)
   24b06:	f105 0010 	add.w	r0, r5, #16
   24b0a:	f000 f861 	bl	24bd0 <z_add_timeout>
   24b0e:	e7b9      	b.n	24a84 <k_delayed_work_submit_to_queue+0x60>
		err = -EADDRINUSE;
   24b10:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   24b14:	e7b6      	b.n	24a84 <k_delayed_work_submit_to_queue+0x60>
   24b16:	bf00      	nop
   24b18:	20021e04 	.word	0x20021e04
   24b1c:	000301cf 	.word	0x000301cf
   24b20:	00030221 	.word	0x00030221
   24b24:	000300ff 	.word	0x000300ff
   24b28:	00030236 	.word	0x00030236
   24b2c:	000301f5 	.word	0x000301f5
   24b30:	0003020c 	.word	0x0003020c
   24b34:	0002e741 	.word	0x0002e741

00024b38 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   24b38:	4b03      	ldr	r3, [pc, #12]	; (24b48 <elapsed+0x10>)
   24b3a:	681b      	ldr	r3, [r3, #0]
   24b3c:	b90b      	cbnz	r3, 24b42 <elapsed+0xa>
   24b3e:	f7ef bc85 	b.w	1444c <z_clock_elapsed>
}
   24b42:	2000      	movs	r0, #0
   24b44:	4770      	bx	lr
   24b46:	bf00      	nop
   24b48:	20021e08 	.word	0x20021e08

00024b4c <remove_timeout>:
{
   24b4c:	b530      	push	{r4, r5, lr}
   24b4e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24b50:	b168      	cbz	r0, 24b6e <remove_timeout+0x22>
   24b52:	4a0a      	ldr	r2, [pc, #40]	; (24b7c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   24b54:	6852      	ldr	r2, [r2, #4]
   24b56:	4290      	cmp	r0, r2
   24b58:	d009      	beq.n	24b6e <remove_timeout+0x22>
	if (next(t) != NULL) {
   24b5a:	b143      	cbz	r3, 24b6e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   24b5c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   24b60:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   24b64:	1912      	adds	r2, r2, r4
   24b66:	eb45 0101 	adc.w	r1, r5, r1
   24b6a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   24b6e:	6842      	ldr	r2, [r0, #4]
   24b70:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   24b72:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24b74:	2300      	movs	r3, #0
	node->prev = NULL;
   24b76:	e9c0 3300 	strd	r3, r3, [r0]
}
   24b7a:	bd30      	pop	{r4, r5, pc}
   24b7c:	200204cc 	.word	0x200204cc

00024b80 <next_timeout>:
	return list->head == list;
   24b80:	4b11      	ldr	r3, [pc, #68]	; (24bc8 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   24b82:	b510      	push	{r4, lr}
   24b84:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24b86:	429c      	cmp	r4, r3
   24b88:	bf08      	it	eq
   24b8a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   24b8c:	f7ff ffd4 	bl	24b38 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   24b90:	b1bc      	cbz	r4, 24bc2 <next_timeout+0x42>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   24b92:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   24b96:	1a12      	subs	r2, r2, r0
   24b98:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   24b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   24ba0:	f173 0100 	sbcs.w	r1, r3, #0
   24ba4:	da0d      	bge.n	24bc2 <next_timeout+0x42>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   24ba6:	4619      	mov	r1, r3
   24ba8:	2a00      	cmp	r2, #0
   24baa:	f171 0300 	sbcs.w	r3, r1, #0
   24bae:	4610      	mov	r0, r2
   24bb0:	da00      	bge.n	24bb4 <next_timeout+0x34>
   24bb2:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   24bb4:	4b05      	ldr	r3, [pc, #20]	; (24bcc <next_timeout+0x4c>)
   24bb6:	691b      	ldr	r3, [r3, #16]
   24bb8:	b113      	cbz	r3, 24bc0 <next_timeout+0x40>
   24bba:	4298      	cmp	r0, r3
   24bbc:	bfa8      	it	ge
   24bbe:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   24bc0:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   24bc2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   24bc6:	e7f5      	b.n	24bb4 <next_timeout+0x34>
   24bc8:	200204cc 	.word	0x200204cc
   24bcc:	20021dbc 	.word	0x20021dbc

00024bd0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   24bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24bd4:	9101      	str	r1, [sp, #4]
   24bd6:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24bd8:	1c4b      	adds	r3, r1, #1
   24bda:	bf08      	it	eq
   24bdc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   24be0:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24be2:	f000 80a3 	beq.w	24d2c <z_add_timeout+0x15c>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   24be6:	f06f 0301 	mvn.w	r3, #1
   24bea:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   24bee:	1c54      	adds	r4, r2, #1
   24bf0:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   24bf4:	ebb3 0804 	subs.w	r8, r3, r4
   24bf8:	eb6b 0905 	sbc.w	r9, fp, r5
   24bfc:	f1b8 0f00 	cmp.w	r8, #0
   24c00:	f179 0300 	sbcs.w	r3, r9, #0
   24c04:	db0f      	blt.n	24c26 <z_add_timeout+0x56>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   24c06:	f7ff ff97 	bl	24b38 <elapsed>
   24c0a:	f06f 0301 	mvn.w	r3, #1
   24c0e:	4a4e      	ldr	r2, [pc, #312]	; (24d48 <z_add_timeout+0x178>)
   24c10:	e9d2 1c00 	ldrd	r1, ip, [r2]
   24c14:	1a5b      	subs	r3, r3, r1
   24c16:	eb6b 020c 	sbc.w	r2, fp, ip
   24c1a:	1b1e      	subs	r6, r3, r4
   24c1c:	eb62 0705 	sbc.w	r7, r2, r5
   24c20:	1a34      	subs	r4, r6, r0
   24c22:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   24c26:	f8da 3000 	ldr.w	r3, [sl]
   24c2a:	b163      	cbz	r3, 24c46 <z_add_timeout+0x76>
   24c2c:	4947      	ldr	r1, [pc, #284]	; (24d4c <z_add_timeout+0x17c>)
   24c2e:	2368      	movs	r3, #104	; 0x68
   24c30:	4a47      	ldr	r2, [pc, #284]	; (24d50 <z_add_timeout+0x180>)
   24c32:	4848      	ldr	r0, [pc, #288]	; (24d54 <z_add_timeout+0x184>)
   24c34:	f007 fa3f 	bl	2c0b6 <printk>
   24c38:	4847      	ldr	r0, [pc, #284]	; (24d58 <z_add_timeout+0x188>)
   24c3a:	f007 fa3c 	bl	2c0b6 <printk>
   24c3e:	2168      	movs	r1, #104	; 0x68
   24c40:	4843      	ldr	r0, [pc, #268]	; (24d50 <z_add_timeout+0x180>)
   24c42:	f007 fc55 	bl	2c4f0 <assert_post_action>
	to->fn = fn;
   24c46:	9b01      	ldr	r3, [sp, #4]
	ticks = MAX(1, ticks);
   24c48:	2c01      	cmp	r4, #1
	to->fn = fn;
   24c4a:	f8ca 3008 	str.w	r3, [sl, #8]
	ticks = MAX(1, ticks);
   24c4e:	f175 0300 	sbcs.w	r3, r5, #0
   24c52:	bfbc      	itt	lt
   24c54:	2401      	movlt	r4, #1
   24c56:	2500      	movlt	r5, #0
	__asm__ volatile(
   24c58:	f04f 0320 	mov.w	r3, #32
   24c5c:	f3ef 8611 	mrs	r6, BASEPRI
   24c60:	f383 8811 	msr	BASEPRI, r3
   24c64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24c68:	483c      	ldr	r0, [pc, #240]	; (24d5c <z_add_timeout+0x18c>)
   24c6a:	f7ff fe8d 	bl	24988 <z_spin_lock_valid>
   24c6e:	b968      	cbnz	r0, 24c8c <z_add_timeout+0xbc>
   24c70:	235c      	movs	r3, #92	; 0x5c
   24c72:	4a3b      	ldr	r2, [pc, #236]	; (24d60 <z_add_timeout+0x190>)
   24c74:	493b      	ldr	r1, [pc, #236]	; (24d64 <z_add_timeout+0x194>)
   24c76:	4837      	ldr	r0, [pc, #220]	; (24d54 <z_add_timeout+0x184>)
   24c78:	f007 fa1d 	bl	2c0b6 <printk>
   24c7c:	4937      	ldr	r1, [pc, #220]	; (24d5c <z_add_timeout+0x18c>)
   24c7e:	483a      	ldr	r0, [pc, #232]	; (24d68 <z_add_timeout+0x198>)
   24c80:	f007 fa19 	bl	2c0b6 <printk>
   24c84:	215c      	movs	r1, #92	; 0x5c
   24c86:	4836      	ldr	r0, [pc, #216]	; (24d60 <z_add_timeout+0x190>)
   24c88:	f007 fc32 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   24c8c:	4833      	ldr	r0, [pc, #204]	; (24d5c <z_add_timeout+0x18c>)
   24c8e:	f7ff fe99 	bl	249c4 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   24c92:	f7ff ff51 	bl	24b38 <elapsed>
	return list->head == list;
   24c96:	4b35      	ldr	r3, [pc, #212]	; (24d6c <z_add_timeout+0x19c>)
   24c98:	1824      	adds	r4, r4, r0
   24c9a:	681a      	ldr	r2, [r3, #0]
   24c9c:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24ca0:	429a      	cmp	r2, r3
   24ca2:	e9ca 4504 	strd	r4, r5, [sl, #16]
   24ca6:	d001      	beq.n	24cac <z_add_timeout+0xdc>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24ca8:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   24caa:	b952      	cbnz	r2, 24cc2 <z_add_timeout+0xf2>
	node->prev = list->tail;
   24cac:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   24cae:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   24cb2:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   24cb6:	685a      	ldr	r2, [r3, #4]
   24cb8:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   24cbc:	f8c3 a004 	str.w	sl, [r3, #4]
}
   24cc0:	e014      	b.n	24cec <z_add_timeout+0x11c>
			if (t->dticks > to->dticks) {
   24cc2:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   24cc6:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   24cca:	4544      	cmp	r4, r8
   24ccc:	eb75 0109 	sbcs.w	r1, r5, r9
   24cd0:	da2f      	bge.n	24d32 <z_add_timeout+0x162>
				t->dticks -= to->dticks;
   24cd2:	ebb8 0004 	subs.w	r0, r8, r4
   24cd6:	eb69 0105 	sbc.w	r1, r9, r5
   24cda:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   24cde:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   24ce0:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   24ce4:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   24ce8:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   24cec:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24cee:	429a      	cmp	r2, r3
   24cf0:	d006      	beq.n	24d00 <z_add_timeout+0x130>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   24cf2:	4592      	cmp	sl, r2
   24cf4:	d104      	bne.n	24d00 <z_add_timeout+0x130>
			z_clock_set_timeout(next_timeout(), false);
   24cf6:	f7ff ff43 	bl	24b80 <next_timeout>
   24cfa:	2100      	movs	r1, #0
   24cfc:	f7ef fb40 	bl	14380 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24d00:	4816      	ldr	r0, [pc, #88]	; (24d5c <z_add_timeout+0x18c>)
   24d02:	f7ff fe4f 	bl	249a4 <z_spin_unlock_valid>
   24d06:	b968      	cbnz	r0, 24d24 <z_add_timeout+0x154>
   24d08:	2384      	movs	r3, #132	; 0x84
   24d0a:	4a15      	ldr	r2, [pc, #84]	; (24d60 <z_add_timeout+0x190>)
   24d0c:	4918      	ldr	r1, [pc, #96]	; (24d70 <z_add_timeout+0x1a0>)
   24d0e:	4811      	ldr	r0, [pc, #68]	; (24d54 <z_add_timeout+0x184>)
   24d10:	f007 f9d1 	bl	2c0b6 <printk>
   24d14:	4911      	ldr	r1, [pc, #68]	; (24d5c <z_add_timeout+0x18c>)
   24d16:	4817      	ldr	r0, [pc, #92]	; (24d74 <z_add_timeout+0x1a4>)
   24d18:	f007 f9cd 	bl	2c0b6 <printk>
   24d1c:	2184      	movs	r1, #132	; 0x84
   24d1e:	4810      	ldr	r0, [pc, #64]	; (24d60 <z_add_timeout+0x190>)
   24d20:	f007 fbe6 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   24d24:	f386 8811 	msr	BASEPRI, r6
   24d28:	f3bf 8f6f 	isb	sy
		}
	}
}
   24d2c:	b003      	add	sp, #12
   24d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   24d32:	ebb4 0008 	subs.w	r0, r4, r8
   24d36:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   24d3a:	42ba      	cmp	r2, r7
   24d3c:	e9ca 0104 	strd	r0, r1, [sl, #16]
   24d40:	d0b4      	beq.n	24cac <z_add_timeout+0xdc>
   24d42:	6812      	ldr	r2, [r2, #0]
   24d44:	e7b1      	b.n	24caa <z_add_timeout+0xda>
   24d46:	bf00      	nop
   24d48:	20021430 	.word	0x20021430
   24d4c:	00032e26 	.word	0x00032e26
   24d50:	00032e02 	.word	0x00032e02
   24d54:	000300ff 	.word	0x000300ff
   24d58:	0003072c 	.word	0x0003072c
   24d5c:	20021e0c 	.word	0x20021e0c
   24d60:	000301cf 	.word	0x000301cf
   24d64:	00030221 	.word	0x00030221
   24d68:	00030236 	.word	0x00030236
   24d6c:	200204cc 	.word	0x200204cc
   24d70:	000301f5 	.word	0x000301f5
   24d74:	0003020c 	.word	0x0003020c

00024d78 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   24d78:	b538      	push	{r3, r4, r5, lr}
   24d7a:	4604      	mov	r4, r0
	__asm__ volatile(
   24d7c:	f04f 0320 	mov.w	r3, #32
   24d80:	f3ef 8511 	mrs	r5, BASEPRI
   24d84:	f383 8811 	msr	BASEPRI, r3
   24d88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24d8c:	481a      	ldr	r0, [pc, #104]	; (24df8 <z_abort_timeout+0x80>)
   24d8e:	f7ff fdfb 	bl	24988 <z_spin_lock_valid>
   24d92:	b968      	cbnz	r0, 24db0 <z_abort_timeout+0x38>
   24d94:	235c      	movs	r3, #92	; 0x5c
   24d96:	4a19      	ldr	r2, [pc, #100]	; (24dfc <z_abort_timeout+0x84>)
   24d98:	4919      	ldr	r1, [pc, #100]	; (24e00 <z_abort_timeout+0x88>)
   24d9a:	481a      	ldr	r0, [pc, #104]	; (24e04 <z_abort_timeout+0x8c>)
   24d9c:	f007 f98b 	bl	2c0b6 <printk>
   24da0:	4915      	ldr	r1, [pc, #84]	; (24df8 <z_abort_timeout+0x80>)
   24da2:	4819      	ldr	r0, [pc, #100]	; (24e08 <z_abort_timeout+0x90>)
   24da4:	f007 f987 	bl	2c0b6 <printk>
   24da8:	215c      	movs	r1, #92	; 0x5c
   24daa:	4814      	ldr	r0, [pc, #80]	; (24dfc <z_abort_timeout+0x84>)
   24dac:	f007 fba0 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   24db0:	4811      	ldr	r0, [pc, #68]	; (24df8 <z_abort_timeout+0x80>)
   24db2:	f7ff fe07 	bl	249c4 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   24db6:	6823      	ldr	r3, [r4, #0]
   24db8:	b1db      	cbz	r3, 24df2 <z_abort_timeout+0x7a>
			remove_timeout(to);
   24dba:	4620      	mov	r0, r4
   24dbc:	f7ff fec6 	bl	24b4c <remove_timeout>
			ret = 0;
   24dc0:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24dc2:	480d      	ldr	r0, [pc, #52]	; (24df8 <z_abort_timeout+0x80>)
   24dc4:	f7ff fdee 	bl	249a4 <z_spin_unlock_valid>
   24dc8:	b968      	cbnz	r0, 24de6 <z_abort_timeout+0x6e>
   24dca:	2384      	movs	r3, #132	; 0x84
   24dcc:	4a0b      	ldr	r2, [pc, #44]	; (24dfc <z_abort_timeout+0x84>)
   24dce:	490f      	ldr	r1, [pc, #60]	; (24e0c <z_abort_timeout+0x94>)
   24dd0:	480c      	ldr	r0, [pc, #48]	; (24e04 <z_abort_timeout+0x8c>)
   24dd2:	f007 f970 	bl	2c0b6 <printk>
   24dd6:	4908      	ldr	r1, [pc, #32]	; (24df8 <z_abort_timeout+0x80>)
   24dd8:	480d      	ldr	r0, [pc, #52]	; (24e10 <z_abort_timeout+0x98>)
   24dda:	f007 f96c 	bl	2c0b6 <printk>
   24dde:	2184      	movs	r1, #132	; 0x84
   24de0:	4806      	ldr	r0, [pc, #24]	; (24dfc <z_abort_timeout+0x84>)
   24de2:	f007 fb85 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   24de6:	f385 8811 	msr	BASEPRI, r5
   24dea:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   24dee:	4620      	mov	r0, r4
   24df0:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   24df2:	f06f 0415 	mvn.w	r4, #21
   24df6:	e7e4      	b.n	24dc2 <z_abort_timeout+0x4a>
   24df8:	20021e0c 	.word	0x20021e0c
   24dfc:	000301cf 	.word	0x000301cf
   24e00:	00030221 	.word	0x00030221
   24e04:	000300ff 	.word	0x000300ff
   24e08:	00030236 	.word	0x00030236
   24e0c:	000301f5 	.word	0x000301f5
   24e10:	0003020c 	.word	0x0003020c

00024e14 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   24e14:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   24e16:	f04f 0320 	mov.w	r3, #32
   24e1a:	f3ef 8511 	mrs	r5, BASEPRI
   24e1e:	f383 8811 	msr	BASEPRI, r3
   24e22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24e26:	4818      	ldr	r0, [pc, #96]	; (24e88 <z_get_next_timeout_expiry+0x74>)
   24e28:	f7ff fdae 	bl	24988 <z_spin_lock_valid>
   24e2c:	b968      	cbnz	r0, 24e4a <z_get_next_timeout_expiry+0x36>
   24e2e:	235c      	movs	r3, #92	; 0x5c
   24e30:	4a16      	ldr	r2, [pc, #88]	; (24e8c <z_get_next_timeout_expiry+0x78>)
   24e32:	4917      	ldr	r1, [pc, #92]	; (24e90 <z_get_next_timeout_expiry+0x7c>)
   24e34:	4817      	ldr	r0, [pc, #92]	; (24e94 <z_get_next_timeout_expiry+0x80>)
   24e36:	f007 f93e 	bl	2c0b6 <printk>
   24e3a:	4913      	ldr	r1, [pc, #76]	; (24e88 <z_get_next_timeout_expiry+0x74>)
   24e3c:	4816      	ldr	r0, [pc, #88]	; (24e98 <z_get_next_timeout_expiry+0x84>)
   24e3e:	f007 f93a 	bl	2c0b6 <printk>
   24e42:	215c      	movs	r1, #92	; 0x5c
   24e44:	4811      	ldr	r0, [pc, #68]	; (24e8c <z_get_next_timeout_expiry+0x78>)
   24e46:	f007 fb53 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   24e4a:	480f      	ldr	r0, [pc, #60]	; (24e88 <z_get_next_timeout_expiry+0x74>)
   24e4c:	f7ff fdba 	bl	249c4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   24e50:	f7ff fe96 	bl	24b80 <next_timeout>
   24e54:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24e56:	480c      	ldr	r0, [pc, #48]	; (24e88 <z_get_next_timeout_expiry+0x74>)
   24e58:	f7ff fda4 	bl	249a4 <z_spin_unlock_valid>
   24e5c:	b968      	cbnz	r0, 24e7a <z_get_next_timeout_expiry+0x66>
   24e5e:	2384      	movs	r3, #132	; 0x84
   24e60:	4a0a      	ldr	r2, [pc, #40]	; (24e8c <z_get_next_timeout_expiry+0x78>)
   24e62:	490e      	ldr	r1, [pc, #56]	; (24e9c <z_get_next_timeout_expiry+0x88>)
   24e64:	480b      	ldr	r0, [pc, #44]	; (24e94 <z_get_next_timeout_expiry+0x80>)
   24e66:	f007 f926 	bl	2c0b6 <printk>
   24e6a:	4907      	ldr	r1, [pc, #28]	; (24e88 <z_get_next_timeout_expiry+0x74>)
   24e6c:	480c      	ldr	r0, [pc, #48]	; (24ea0 <z_get_next_timeout_expiry+0x8c>)
   24e6e:	f007 f922 	bl	2c0b6 <printk>
   24e72:	2184      	movs	r1, #132	; 0x84
   24e74:	4805      	ldr	r0, [pc, #20]	; (24e8c <z_get_next_timeout_expiry+0x78>)
   24e76:	f007 fb3b 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   24e7a:	f385 8811 	msr	BASEPRI, r5
   24e7e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   24e82:	4620      	mov	r0, r4
   24e84:	bd38      	pop	{r3, r4, r5, pc}
   24e86:	bf00      	nop
   24e88:	20021e0c 	.word	0x20021e0c
   24e8c:	000301cf 	.word	0x000301cf
   24e90:	00030221 	.word	0x00030221
   24e94:	000300ff 	.word	0x000300ff
   24e98:	00030236 	.word	0x00030236
   24e9c:	000301f5 	.word	0x000301f5
   24ea0:	0003020c 	.word	0x0003020c

00024ea4 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   24ea4:	b570      	push	{r4, r5, r6, lr}
   24ea6:	4604      	mov	r4, r0
   24ea8:	460d      	mov	r5, r1
	__asm__ volatile(
   24eaa:	f04f 0320 	mov.w	r3, #32
   24eae:	f3ef 8611 	mrs	r6, BASEPRI
   24eb2:	f383 8811 	msr	BASEPRI, r3
   24eb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24eba:	481b      	ldr	r0, [pc, #108]	; (24f28 <z_set_timeout_expiry+0x84>)
   24ebc:	f7ff fd64 	bl	24988 <z_spin_lock_valid>
   24ec0:	b968      	cbnz	r0, 24ede <z_set_timeout_expiry+0x3a>
   24ec2:	235c      	movs	r3, #92	; 0x5c
   24ec4:	4a19      	ldr	r2, [pc, #100]	; (24f2c <z_set_timeout_expiry+0x88>)
   24ec6:	491a      	ldr	r1, [pc, #104]	; (24f30 <z_set_timeout_expiry+0x8c>)
   24ec8:	481a      	ldr	r0, [pc, #104]	; (24f34 <z_set_timeout_expiry+0x90>)
   24eca:	f007 f8f4 	bl	2c0b6 <printk>
   24ece:	4916      	ldr	r1, [pc, #88]	; (24f28 <z_set_timeout_expiry+0x84>)
   24ed0:	4819      	ldr	r0, [pc, #100]	; (24f38 <z_set_timeout_expiry+0x94>)
   24ed2:	f007 f8f0 	bl	2c0b6 <printk>
   24ed6:	215c      	movs	r1, #92	; 0x5c
   24ed8:	4814      	ldr	r0, [pc, #80]	; (24f2c <z_set_timeout_expiry+0x88>)
   24eda:	f007 fb09 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   24ede:	4812      	ldr	r0, [pc, #72]	; (24f28 <z_set_timeout_expiry+0x84>)
   24ee0:	f7ff fd70 	bl	249c4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   24ee4:	f7ff fe4c 	bl	24b80 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   24ee8:	2801      	cmp	r0, #1
   24eea:	dd05      	ble.n	24ef8 <z_set_timeout_expiry+0x54>
   24eec:	42a0      	cmp	r0, r4
   24eee:	dd03      	ble.n	24ef8 <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, is_idle);
   24ef0:	4629      	mov	r1, r5
   24ef2:	4620      	mov	r0, r4
   24ef4:	f7ef fa44 	bl	14380 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ef8:	480b      	ldr	r0, [pc, #44]	; (24f28 <z_set_timeout_expiry+0x84>)
   24efa:	f7ff fd53 	bl	249a4 <z_spin_unlock_valid>
   24efe:	b968      	cbnz	r0, 24f1c <z_set_timeout_expiry+0x78>
   24f00:	2384      	movs	r3, #132	; 0x84
   24f02:	4a0a      	ldr	r2, [pc, #40]	; (24f2c <z_set_timeout_expiry+0x88>)
   24f04:	490d      	ldr	r1, [pc, #52]	; (24f3c <z_set_timeout_expiry+0x98>)
   24f06:	480b      	ldr	r0, [pc, #44]	; (24f34 <z_set_timeout_expiry+0x90>)
   24f08:	f007 f8d5 	bl	2c0b6 <printk>
   24f0c:	4906      	ldr	r1, [pc, #24]	; (24f28 <z_set_timeout_expiry+0x84>)
   24f0e:	480c      	ldr	r0, [pc, #48]	; (24f40 <z_set_timeout_expiry+0x9c>)
   24f10:	f007 f8d1 	bl	2c0b6 <printk>
   24f14:	2184      	movs	r1, #132	; 0x84
   24f16:	4805      	ldr	r0, [pc, #20]	; (24f2c <z_set_timeout_expiry+0x88>)
   24f18:	f007 faea 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   24f1c:	f386 8811 	msr	BASEPRI, r6
   24f20:	f3bf 8f6f 	isb	sy
		}
	}
}
   24f24:	bd70      	pop	{r4, r5, r6, pc}
   24f26:	bf00      	nop
   24f28:	20021e0c 	.word	0x20021e0c
   24f2c:	000301cf 	.word	0x000301cf
   24f30:	00030221 	.word	0x00030221
   24f34:	000300ff 	.word	0x000300ff
   24f38:	00030236 	.word	0x00030236
   24f3c:	000301f5 	.word	0x000301f5
   24f40:	0003020c 	.word	0x0003020c

00024f44 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   24f44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24f48:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   24f4a:	f7fe fdd3 	bl	23af4 <z_time_slice>
	__asm__ volatile(
   24f4e:	f04f 0320 	mov.w	r3, #32
   24f52:	f3ef 8711 	mrs	r7, BASEPRI
   24f56:	f383 8811 	msr	BASEPRI, r3
   24f5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24f5e:	4854      	ldr	r0, [pc, #336]	; (250b0 <z_clock_announce+0x16c>)
   24f60:	f7ff fd12 	bl	24988 <z_spin_lock_valid>
   24f64:	b968      	cbnz	r0, 24f82 <z_clock_announce+0x3e>
   24f66:	235c      	movs	r3, #92	; 0x5c
   24f68:	4a52      	ldr	r2, [pc, #328]	; (250b4 <z_clock_announce+0x170>)
   24f6a:	4953      	ldr	r1, [pc, #332]	; (250b8 <z_clock_announce+0x174>)
   24f6c:	4853      	ldr	r0, [pc, #332]	; (250bc <z_clock_announce+0x178>)
   24f6e:	f007 f8a2 	bl	2c0b6 <printk>
   24f72:	494f      	ldr	r1, [pc, #316]	; (250b0 <z_clock_announce+0x16c>)
   24f74:	4852      	ldr	r0, [pc, #328]	; (250c0 <z_clock_announce+0x17c>)
   24f76:	f007 f89e 	bl	2c0b6 <printk>
   24f7a:	215c      	movs	r1, #92	; 0x5c
   24f7c:	484d      	ldr	r0, [pc, #308]	; (250b4 <z_clock_announce+0x170>)
   24f7e:	f007 fab7 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   24f82:	4e50      	ldr	r6, [pc, #320]	; (250c4 <z_clock_announce+0x180>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   24f84:	4d50      	ldr	r5, [pc, #320]	; (250c8 <z_clock_announce+0x184>)
   24f86:	46b3      	mov	fp, r6
   24f88:	4849      	ldr	r0, [pc, #292]	; (250b0 <z_clock_announce+0x16c>)
	return list->head == list;
   24f8a:	f8df a148 	ldr.w	sl, [pc, #328]	; 250d4 <z_clock_announce+0x190>
   24f8e:	f7ff fd19 	bl	249c4 <z_spin_lock_set_owner>
   24f92:	602c      	str	r4, [r5, #0]
   24f94:	f8d5 c000 	ldr.w	ip, [r5]
   24f98:	e9d6 2300 	ldrd	r2, r3, [r6]
   24f9c:	e9cd 2300 	strd	r2, r3, [sp]
   24fa0:	4662      	mov	r2, ip
   24fa2:	f8da 4000 	ldr.w	r4, [sl]
   24fa6:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24fa8:	4554      	cmp	r4, sl
   24faa:	46e0      	mov	r8, ip
   24fac:	4699      	mov	r9, r3
   24fae:	d00c      	beq.n	24fca <z_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   24fb0:	b15c      	cbz	r4, 24fca <z_clock_announce+0x86>
   24fb2:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   24fb6:	458c      	cmp	ip, r1
   24fb8:	eb79 0302 	sbcs.w	r3, r9, r2
   24fbc:	da2e      	bge.n	2501c <z_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   24fbe:	ebb1 000c 	subs.w	r0, r1, ip
   24fc2:	eb62 0109 	sbc.w	r1, r2, r9
   24fc6:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   24fca:	464b      	mov	r3, r9
	announce_remaining = 0;
   24fcc:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   24fce:	9a00      	ldr	r2, [sp, #0]
   24fd0:	9901      	ldr	r1, [sp, #4]
   24fd2:	eb18 0202 	adds.w	r2, r8, r2
   24fd6:	eb43 0101 	adc.w	r1, r3, r1
   24fda:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   24fde:	602c      	str	r4, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   24fe0:	f7ff fdce 	bl	24b80 <next_timeout>
   24fe4:	4621      	mov	r1, r4
   24fe6:	f7ef f9cb 	bl	14380 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24fea:	4831      	ldr	r0, [pc, #196]	; (250b0 <z_clock_announce+0x16c>)
   24fec:	f7ff fcda 	bl	249a4 <z_spin_unlock_valid>
   24ff0:	b968      	cbnz	r0, 2500e <z_clock_announce+0xca>
   24ff2:	2384      	movs	r3, #132	; 0x84
   24ff4:	4a2f      	ldr	r2, [pc, #188]	; (250b4 <z_clock_announce+0x170>)
   24ff6:	4935      	ldr	r1, [pc, #212]	; (250cc <z_clock_announce+0x188>)
   24ff8:	4830      	ldr	r0, [pc, #192]	; (250bc <z_clock_announce+0x178>)
   24ffa:	f007 f85c 	bl	2c0b6 <printk>
   24ffe:	492c      	ldr	r1, [pc, #176]	; (250b0 <z_clock_announce+0x16c>)
   25000:	4833      	ldr	r0, [pc, #204]	; (250d0 <z_clock_announce+0x18c>)
   25002:	f007 f858 	bl	2c0b6 <printk>
   25006:	2184      	movs	r1, #132	; 0x84
   25008:	482a      	ldr	r0, [pc, #168]	; (250b4 <z_clock_announce+0x170>)
   2500a:	f007 fa71 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   2500e:	f387 8811 	msr	BASEPRI, r7
   25012:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   25016:	b003      	add	sp, #12
   25018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   2501c:	2200      	movs	r2, #0
		curr_tick += dt;
   2501e:	e9dd 8900 	ldrd	r8, r9, [sp]
		t->dticks = 0;
   25022:	2300      	movs	r3, #0
		curr_tick += dt;
   25024:	eb18 0801 	adds.w	r8, r8, r1
		announce_remaining -= dt;
   25028:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   2502c:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   25030:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   25032:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   25036:	4620      	mov	r0, r4
		curr_tick += dt;
   25038:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   2503c:	f7ff fd86 	bl	24b4c <remove_timeout>
   25040:	481b      	ldr	r0, [pc, #108]	; (250b0 <z_clock_announce+0x16c>)
   25042:	f7ff fcaf 	bl	249a4 <z_spin_unlock_valid>
   25046:	b968      	cbnz	r0, 25064 <z_clock_announce+0x120>
   25048:	2384      	movs	r3, #132	; 0x84
   2504a:	4a1a      	ldr	r2, [pc, #104]	; (250b4 <z_clock_announce+0x170>)
   2504c:	491f      	ldr	r1, [pc, #124]	; (250cc <z_clock_announce+0x188>)
   2504e:	481b      	ldr	r0, [pc, #108]	; (250bc <z_clock_announce+0x178>)
   25050:	f007 f831 	bl	2c0b6 <printk>
   25054:	4916      	ldr	r1, [pc, #88]	; (250b0 <z_clock_announce+0x16c>)
   25056:	481e      	ldr	r0, [pc, #120]	; (250d0 <z_clock_announce+0x18c>)
   25058:	f007 f82d 	bl	2c0b6 <printk>
   2505c:	2184      	movs	r1, #132	; 0x84
   2505e:	4815      	ldr	r0, [pc, #84]	; (250b4 <z_clock_announce+0x170>)
   25060:	f007 fa46 	bl	2c4f0 <assert_post_action>
   25064:	f387 8811 	msr	BASEPRI, r7
   25068:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2506c:	4620      	mov	r0, r4
   2506e:	68a3      	ldr	r3, [r4, #8]
   25070:	4798      	blx	r3
	__asm__ volatile(
   25072:	f04f 0320 	mov.w	r3, #32
   25076:	f3ef 8711 	mrs	r7, BASEPRI
   2507a:	f383 8811 	msr	BASEPRI, r3
   2507e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25082:	480b      	ldr	r0, [pc, #44]	; (250b0 <z_clock_announce+0x16c>)
   25084:	f7ff fc80 	bl	24988 <z_spin_lock_valid>
   25088:	b968      	cbnz	r0, 250a6 <z_clock_announce+0x162>
   2508a:	235c      	movs	r3, #92	; 0x5c
   2508c:	4a09      	ldr	r2, [pc, #36]	; (250b4 <z_clock_announce+0x170>)
   2508e:	490a      	ldr	r1, [pc, #40]	; (250b8 <z_clock_announce+0x174>)
   25090:	480a      	ldr	r0, [pc, #40]	; (250bc <z_clock_announce+0x178>)
   25092:	f007 f810 	bl	2c0b6 <printk>
   25096:	4906      	ldr	r1, [pc, #24]	; (250b0 <z_clock_announce+0x16c>)
   25098:	4809      	ldr	r0, [pc, #36]	; (250c0 <z_clock_announce+0x17c>)
   2509a:	f007 f80c 	bl	2c0b6 <printk>
   2509e:	215c      	movs	r1, #92	; 0x5c
   250a0:	4804      	ldr	r0, [pc, #16]	; (250b4 <z_clock_announce+0x170>)
   250a2:	f007 fa25 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   250a6:	4802      	ldr	r0, [pc, #8]	; (250b0 <z_clock_announce+0x16c>)
   250a8:	f7ff fc8c 	bl	249c4 <z_spin_lock_set_owner>
	return k;
   250ac:	e772      	b.n	24f94 <z_clock_announce+0x50>
   250ae:	bf00      	nop
   250b0:	20021e0c 	.word	0x20021e0c
   250b4:	000301cf 	.word	0x000301cf
   250b8:	00030221 	.word	0x00030221
   250bc:	000300ff 	.word	0x000300ff
   250c0:	00030236 	.word	0x00030236
   250c4:	20021430 	.word	0x20021430
   250c8:	20021e08 	.word	0x20021e08
   250cc:	000301f5 	.word	0x000301f5
   250d0:	0003020c 	.word	0x0003020c
   250d4:	200204cc 	.word	0x200204cc

000250d8 <z_tick_get>:

int64_t z_tick_get(void)
{
   250d8:	b570      	push	{r4, r5, r6, lr}
   250da:	f04f 0320 	mov.w	r3, #32
   250de:	f3ef 8611 	mrs	r6, BASEPRI
   250e2:	f383 8811 	msr	BASEPRI, r3
   250e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   250ea:	481b      	ldr	r0, [pc, #108]	; (25158 <z_tick_get+0x80>)
   250ec:	f7ff fc4c 	bl	24988 <z_spin_lock_valid>
   250f0:	b968      	cbnz	r0, 2510e <z_tick_get+0x36>
   250f2:	235c      	movs	r3, #92	; 0x5c
   250f4:	4a19      	ldr	r2, [pc, #100]	; (2515c <z_tick_get+0x84>)
   250f6:	491a      	ldr	r1, [pc, #104]	; (25160 <z_tick_get+0x88>)
   250f8:	481a      	ldr	r0, [pc, #104]	; (25164 <z_tick_get+0x8c>)
   250fa:	f006 ffdc 	bl	2c0b6 <printk>
   250fe:	4916      	ldr	r1, [pc, #88]	; (25158 <z_tick_get+0x80>)
   25100:	4819      	ldr	r0, [pc, #100]	; (25168 <z_tick_get+0x90>)
   25102:	f006 ffd8 	bl	2c0b6 <printk>
   25106:	215c      	movs	r1, #92	; 0x5c
   25108:	4814      	ldr	r0, [pc, #80]	; (2515c <z_tick_get+0x84>)
   2510a:	f007 f9f1 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   2510e:	4812      	ldr	r0, [pc, #72]	; (25158 <z_tick_get+0x80>)
   25110:	f7ff fc58 	bl	249c4 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   25114:	f7ef f99a 	bl	1444c <z_clock_elapsed>
   25118:	4b14      	ldr	r3, [pc, #80]	; (2516c <z_tick_get+0x94>)
   2511a:	e9d3 4500 	ldrd	r4, r5, [r3]
   2511e:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25120:	480d      	ldr	r0, [pc, #52]	; (25158 <z_tick_get+0x80>)
   25122:	f145 0500 	adc.w	r5, r5, #0
   25126:	f7ff fc3d 	bl	249a4 <z_spin_unlock_valid>
   2512a:	b968      	cbnz	r0, 25148 <z_tick_get+0x70>
   2512c:	2384      	movs	r3, #132	; 0x84
   2512e:	4a0b      	ldr	r2, [pc, #44]	; (2515c <z_tick_get+0x84>)
   25130:	490f      	ldr	r1, [pc, #60]	; (25170 <z_tick_get+0x98>)
   25132:	480c      	ldr	r0, [pc, #48]	; (25164 <z_tick_get+0x8c>)
   25134:	f006 ffbf 	bl	2c0b6 <printk>
   25138:	4907      	ldr	r1, [pc, #28]	; (25158 <z_tick_get+0x80>)
   2513a:	480e      	ldr	r0, [pc, #56]	; (25174 <z_tick_get+0x9c>)
   2513c:	f006 ffbb 	bl	2c0b6 <printk>
   25140:	2184      	movs	r1, #132	; 0x84
   25142:	4806      	ldr	r0, [pc, #24]	; (2515c <z_tick_get+0x84>)
   25144:	f007 f9d4 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   25148:	f386 8811 	msr	BASEPRI, r6
   2514c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   25150:	4620      	mov	r0, r4
   25152:	4629      	mov	r1, r5
   25154:	bd70      	pop	{r4, r5, r6, pc}
   25156:	bf00      	nop
   25158:	20021e0c 	.word	0x20021e0c
   2515c:	000301cf 	.word	0x000301cf
   25160:	00030221 	.word	0x00030221
   25164:	000300ff 	.word	0x000300ff
   25168:	00030236 	.word	0x00030236
   2516c:	20021430 	.word	0x20021430
   25170:	000301f5 	.word	0x000301f5
   25174:	0003020c 	.word	0x0003020c

00025178 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   25178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2517a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   2517e:	1c56      	adds	r6, r2, #1
   25180:	f143 0700 	adc.w	r7, r3, #0
   25184:	2f00      	cmp	r7, #0
   25186:	bf08      	it	eq
   25188:	2e02      	cmpeq	r6, #2
{
   2518a:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2518c:	d302      	bcc.n	25194 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2518e:	490c      	ldr	r1, [pc, #48]	; (251c0 <z_timer_expiration_handler+0x48>)
   25190:	f7ff fd1e 	bl	24bd0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   25194:	6b23      	ldr	r3, [r4, #48]	; 0x30
   25196:	3301      	adds	r3, #1
   25198:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2519a:	6a23      	ldr	r3, [r4, #32]
   2519c:	b10b      	cbz	r3, 251a2 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   2519e:	4620      	mov	r0, r4
   251a0:	4798      	blx	r3
	return list->head == list;
   251a2:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   251a6:	42a5      	cmp	r5, r4
   251a8:	d008      	beq.n	251bc <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   251aa:	b13d      	cbz	r5, 251bc <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   251ac:	4628      	mov	r0, r5
   251ae:	f7fe f8f1 	bl	23394 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   251b2:	4628      	mov	r0, r5
   251b4:	f7fe fb5a 	bl	2386c <z_ready_thread>
   251b8:	2300      	movs	r3, #0
   251ba:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);
}
   251bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   251be:	bf00      	nop
   251c0:	00025179 	.word	0x00025179

000251c4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   251c4:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   251c8:	4619      	mov	r1, r3
   251ca:	4606      	mov	r6, r0
   251cc:	4610      	mov	r0, r2
   251ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   251d2:	1c4c      	adds	r4, r1, #1
   251d4:	bf08      	it	eq
   251d6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   251da:	4680      	mov	r8, r0
   251dc:	4689      	mov	r9, r1
   251de:	d047      	beq.n	25270 <z_impl_k_timer_start+0xac>
   251e0:	4614      	mov	r4, r2
   251e2:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   251e4:	ea54 0305 	orrs.w	r3, r4, r5
   251e8:	d016      	beq.n	25218 <z_impl_k_timer_start+0x54>
   251ea:	f06f 0301 	mvn.w	r3, #1
   251ee:	ebb3 0a02 	subs.w	sl, r3, r2
   251f2:	f04f 33ff 	mov.w	r3, #4294967295
   251f6:	eb63 0b05 	sbc.w	fp, r3, r5
   251fa:	f1ba 0f00 	cmp.w	sl, #0
   251fe:	f17b 0300 	sbcs.w	r3, fp, #0
   25202:	da09      	bge.n	25218 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   25204:	f112 34ff 	adds.w	r4, r2, #4294967295
   25208:	f145 35ff 	adc.w	r5, r5, #4294967295
   2520c:	2c01      	cmp	r4, #1
   2520e:	f175 0300 	sbcs.w	r3, r5, #0
   25212:	bfbc      	itt	lt
   25214:	2401      	movlt	r4, #1
   25216:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   25218:	f06f 0301 	mvn.w	r3, #1
   2521c:	1a1b      	subs	r3, r3, r0
   2521e:	9300      	str	r3, [sp, #0]
   25220:	f04f 33ff 	mov.w	r3, #4294967295
   25224:	eb63 0301 	sbc.w	r3, r3, r1
   25228:	9301      	str	r3, [sp, #4]
   2522a:	e9dd 2300 	ldrd	r2, r3, [sp]
   2522e:	2a00      	cmp	r2, #0
   25230:	f173 0300 	sbcs.w	r3, r3, #0
   25234:	da0c      	bge.n	25250 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   25236:	f110 38ff 	adds.w	r8, r0, #4294967295
   2523a:	f141 39ff 	adc.w	r9, r1, #4294967295
   2523e:	f1b8 0f00 	cmp.w	r8, #0
   25242:	f179 0300 	sbcs.w	r3, r9, #0
   25246:	bfbc      	itt	lt
   25248:	f04f 0800 	movlt.w	r8, #0
   2524c:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   25250:	4630      	mov	r0, r6
   25252:	f7ff fd91 	bl	24d78 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   25256:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   25258:	4642      	mov	r2, r8
	timer->status = 0U;
   2525a:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2525c:	4630      	mov	r0, r6
   2525e:	464b      	mov	r3, r9
   25260:	4905      	ldr	r1, [pc, #20]	; (25278 <z_impl_k_timer_start+0xb4>)
	timer->period = period;
   25262:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   25266:	b002      	add	sp, #8
   25268:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2526c:	f7ff bcb0 	b.w	24bd0 <z_add_timeout>
}
   25270:	b002      	add	sp, #8
   25272:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   25276:	bf00      	nop
   25278:	00025179 	.word	0x00025179

0002527c <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, uint32_t state)
{
   2527c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   2527e:	6883      	ldr	r3, [r0, #8]
{
   25280:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   25282:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   25284:	b964      	cbnz	r4, 252a0 <k_poll_poller_cb+0x24>
   25286:	4919      	ldr	r1, [pc, #100]	; (252ec <k_poll_poller_cb+0x70>)
   25288:	23df      	movs	r3, #223	; 0xdf
   2528a:	4a19      	ldr	r2, [pc, #100]	; (252f0 <k_poll_poller_cb+0x74>)
   2528c:	4819      	ldr	r0, [pc, #100]	; (252f4 <k_poll_poller_cb+0x78>)
   2528e:	f006 ff12 	bl	2c0b6 <printk>
   25292:	4819      	ldr	r0, [pc, #100]	; (252f8 <k_poll_poller_cb+0x7c>)
   25294:	f006 ff0f 	bl	2c0b6 <printk>
   25298:	21df      	movs	r1, #223	; 0xdf
   2529a:	4815      	ldr	r0, [pc, #84]	; (252f0 <k_poll_poller_cb+0x74>)
   2529c:	f007 f928 	bl	2c4f0 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   252a0:	7b63      	ldrb	r3, [r4, #13]
   252a2:	079a      	lsls	r2, r3, #30
   252a4:	d515      	bpl.n	252d2 <k_poll_poller_cb+0x56>
		return 0;
	}

	if (z_is_thread_timeout_expired(thread)) {
   252a6:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   252aa:	f04f 31ff 	mov.w	r1, #4294967295
   252ae:	f06f 0001 	mvn.w	r0, #1
   252b2:	428b      	cmp	r3, r1
   252b4:	bf08      	it	eq
   252b6:	4282      	cmpeq	r2, r0
   252b8:	d014      	beq.n	252e4 <k_poll_poller_cb+0x68>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
   252ba:	4620      	mov	r0, r4
   252bc:	f7fe f99c 	bl	235f8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   252c0:	2d08      	cmp	r5, #8
   252c2:	bf0c      	ite	eq
   252c4:	f06f 0303 	mvneq.w	r3, #3
   252c8:	2300      	movne	r3, #0
   252ca:	67e3      	str	r3, [r4, #124]	; 0x7c
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   252cc:	7b63      	ldrb	r3, [r4, #13]
   252ce:	06db      	lsls	r3, r3, #27
   252d0:	d001      	beq.n	252d6 <k_poll_poller_cb+0x5a>
		state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
		return 0;
   252d2:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   252d4:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   252d6:	69a5      	ldr	r5, [r4, #24]
   252d8:	2d00      	cmp	r5, #0
   252da:	d1fa      	bne.n	252d2 <k_poll_poller_cb+0x56>
	z_ready_thread(thread);
   252dc:	4620      	mov	r0, r4
   252de:	f7fe fac5 	bl	2386c <z_ready_thread>
	return 0;
   252e2:	e7f6      	b.n	252d2 <k_poll_poller_cb+0x56>
		return -EAGAIN;
   252e4:	f06f 000a 	mvn.w	r0, #10
   252e8:	e7f4      	b.n	252d4 <k_poll_poller_cb+0x58>
   252ea:	bf00      	nop
   252ec:	00032e67 	.word	0x00032e67
   252f0:	00032e46 	.word	0x00032e46
   252f4:	000300ff 	.word	0x000300ff
   252f8:	00032e7d 	.word	0x00032e7d

000252fc <clear_event_registrations>:
{
   252fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25300:	2414      	movs	r4, #20
   25302:	4680      	mov	r8, r0
   25304:	4616      	mov	r6, r2
	while (num_events--) {
   25306:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   2530a:	4d48      	ldr	r5, [pc, #288]	; (2542c <clear_event_registrations+0x130>)
   2530c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 25468 <clear_event_registrations+0x16c>
   25310:	4f47      	ldr	r7, [pc, #284]	; (25430 <clear_event_registrations+0x134>)
	while (num_events--) {
   25312:	4544      	cmp	r4, r8
   25314:	d101      	bne.n	2531a <clear_event_registrations+0x1e>
}
   25316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   2531a:	2300      	movs	r3, #0
   2531c:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   25320:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   25324:	f003 030f 	and.w	r3, r3, #15
   25328:	2b04      	cmp	r3, #4
   2532a:	d83d      	bhi.n	253a8 <clear_event_registrations+0xac>
   2532c:	e8df f003 	tbb	[pc, r3]
   25330:	3c032d49 	.word	0x3c032d49
   25334:	1e          	.byte	0x1e
   25335:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   25336:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2533a:	b963      	cbnz	r3, 25356 <clear_event_registrations+0x5a>
   2533c:	493d      	ldr	r1, [pc, #244]	; (25434 <clear_event_registrations+0x138>)
   2533e:	2395      	movs	r3, #149	; 0x95
   25340:	462a      	mov	r2, r5
   25342:	4638      	mov	r0, r7
   25344:	f006 feb7 	bl	2c0b6 <printk>
   25348:	483b      	ldr	r0, [pc, #236]	; (25438 <clear_event_registrations+0x13c>)
   2534a:	f006 feb4 	bl	2c0b6 <printk>
   2534e:	2195      	movs	r1, #149	; 0x95
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   25350:	4628      	mov	r0, r5
   25352:	f007 f8cd 	bl	2c4f0 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   25356:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2535a:	b393      	cbz	r3, 253c2 <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   2535c:	f854 2c10 	ldr.w	r2, [r4, #-16]
   25360:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   25362:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25364:	2300      	movs	r3, #0
	node->prev = NULL;
   25366:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   2536a:	e02a      	b.n	253c2 <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2536c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   25370:	2b00      	cmp	r3, #0
   25372:	d1f0      	bne.n	25356 <clear_event_registrations+0x5a>
   25374:	4931      	ldr	r1, [pc, #196]	; (2543c <clear_event_registrations+0x140>)
   25376:	2399      	movs	r3, #153	; 0x99
   25378:	462a      	mov	r2, r5
   2537a:	4638      	mov	r0, r7
   2537c:	f006 fe9b 	bl	2c0b6 <printk>
   25380:	482f      	ldr	r0, [pc, #188]	; (25440 <clear_event_registrations+0x144>)
   25382:	f006 fe98 	bl	2c0b6 <printk>
   25386:	2199      	movs	r1, #153	; 0x99
   25388:	e7e2      	b.n	25350 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2538a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2538e:	2b00      	cmp	r3, #0
   25390:	d1e1      	bne.n	25356 <clear_event_registrations+0x5a>
   25392:	492c      	ldr	r1, [pc, #176]	; (25444 <clear_event_registrations+0x148>)
   25394:	239d      	movs	r3, #157	; 0x9d
   25396:	462a      	mov	r2, r5
   25398:	4638      	mov	r0, r7
   2539a:	f006 fe8c 	bl	2c0b6 <printk>
   2539e:	482a      	ldr	r0, [pc, #168]	; (25448 <clear_event_registrations+0x14c>)
   253a0:	f006 fe89 	bl	2c0b6 <printk>
   253a4:	219d      	movs	r1, #157	; 0x9d
   253a6:	e7d3      	b.n	25350 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   253a8:	4649      	mov	r1, r9
   253aa:	23a4      	movs	r3, #164	; 0xa4
   253ac:	462a      	mov	r2, r5
   253ae:	4638      	mov	r0, r7
   253b0:	f006 fe81 	bl	2c0b6 <printk>
   253b4:	4825      	ldr	r0, [pc, #148]	; (2544c <clear_event_registrations+0x150>)
   253b6:	f006 fe7e 	bl	2c0b6 <printk>
   253ba:	21a4      	movs	r1, #164	; 0xa4
   253bc:	4628      	mov	r0, r5
   253be:	f007 f897 	bl	2c4f0 <assert_post_action>
   253c2:	4823      	ldr	r0, [pc, #140]	; (25450 <clear_event_registrations+0x154>)
   253c4:	f7ff faee 	bl	249a4 <z_spin_unlock_valid>
   253c8:	b968      	cbnz	r0, 253e6 <clear_event_registrations+0xea>
   253ca:	2384      	movs	r3, #132	; 0x84
   253cc:	4638      	mov	r0, r7
   253ce:	4a21      	ldr	r2, [pc, #132]	; (25454 <clear_event_registrations+0x158>)
   253d0:	4921      	ldr	r1, [pc, #132]	; (25458 <clear_event_registrations+0x15c>)
   253d2:	f006 fe70 	bl	2c0b6 <printk>
   253d6:	491e      	ldr	r1, [pc, #120]	; (25450 <clear_event_registrations+0x154>)
   253d8:	4820      	ldr	r0, [pc, #128]	; (2545c <clear_event_registrations+0x160>)
   253da:	f006 fe6c 	bl	2c0b6 <printk>
   253de:	2184      	movs	r1, #132	; 0x84
   253e0:	481c      	ldr	r0, [pc, #112]	; (25454 <clear_event_registrations+0x158>)
   253e2:	f007 f885 	bl	2c4f0 <assert_post_action>
   253e6:	f386 8811 	msr	BASEPRI, r6
   253ea:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   253ee:	f04f 0320 	mov.w	r3, #32
   253f2:	f3ef 8611 	mrs	r6, BASEPRI
   253f6:	f383 8811 	msr	BASEPRI, r3
   253fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   253fe:	4814      	ldr	r0, [pc, #80]	; (25450 <clear_event_registrations+0x154>)
   25400:	f7ff fac2 	bl	24988 <z_spin_lock_valid>
   25404:	b968      	cbnz	r0, 25422 <clear_event_registrations+0x126>
   25406:	235c      	movs	r3, #92	; 0x5c
   25408:	4638      	mov	r0, r7
   2540a:	4a12      	ldr	r2, [pc, #72]	; (25454 <clear_event_registrations+0x158>)
   2540c:	4914      	ldr	r1, [pc, #80]	; (25460 <clear_event_registrations+0x164>)
   2540e:	f006 fe52 	bl	2c0b6 <printk>
   25412:	490f      	ldr	r1, [pc, #60]	; (25450 <clear_event_registrations+0x154>)
   25414:	4813      	ldr	r0, [pc, #76]	; (25464 <clear_event_registrations+0x168>)
   25416:	f006 fe4e 	bl	2c0b6 <printk>
   2541a:	215c      	movs	r1, #92	; 0x5c
   2541c:	480d      	ldr	r0, [pc, #52]	; (25454 <clear_event_registrations+0x158>)
   2541e:	f007 f867 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   25422:	480b      	ldr	r0, [pc, #44]	; (25450 <clear_event_registrations+0x154>)
   25424:	f7ff face 	bl	249c4 <z_spin_lock_set_owner>
	return k;
   25428:	3c14      	subs	r4, #20
   2542a:	e772      	b.n	25312 <clear_event_registrations+0x16>
   2542c:	00032e46 	.word	0x00032e46
   25430:	000300ff 	.word	0x000300ff
   25434:	00032e9c 	.word	0x00032e9c
   25438:	00032eb6 	.word	0x00032eb6
   2543c:	00032ecb 	.word	0x00032ecb
   25440:	00032ee7 	.word	0x00032ee7
   25444:	00032ef8 	.word	0x00032ef8
   25448:	00032f15 	.word	0x00032f15
   2544c:	00032f2c 	.word	0x00032f2c
   25450:	20021e10 	.word	0x20021e10
   25454:	000301cf 	.word	0x000301cf
   25458:	000301f5 	.word	0x000301f5
   2545c:	0003020c 	.word	0x0003020c
   25460:	00030221 	.word	0x00030221
   25464:	00030236 	.word	0x00030236
   25468:	00032bdb 	.word	0x00032bdb

0002546c <register_events>:
{
   2546c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   25470:	2700      	movs	r7, #0
{
   25472:	4615      	mov	r5, r2
   25474:	4604      	mov	r4, r0
	int events_registered = 0;
   25476:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25478:	4e6a      	ldr	r6, [pc, #424]	; (25624 <register_events+0x1b8>)
   2547a:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 25660 <register_events+0x1f4>
   2547e:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 25664 <register_events+0x1f8>
{
   25482:	9100      	str	r1, [sp, #0]
   25484:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   25486:	9b00      	ldr	r3, [sp, #0]
   25488:	429f      	cmp	r7, r3
   2548a:	db03      	blt.n	25494 <register_events+0x28>
}
   2548c:	4648      	mov	r0, r9
   2548e:	b003      	add	sp, #12
   25490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25494:	f04f 0320 	mov.w	r3, #32
   25498:	f3ef 8b11 	mrs	fp, BASEPRI
   2549c:	f383 8811 	msr	BASEPRI, r3
   254a0:	f3bf 8f6f 	isb	sy
   254a4:	4630      	mov	r0, r6
   254a6:	f7ff fa6f 	bl	24988 <z_spin_lock_valid>
   254aa:	b968      	cbnz	r0, 254c8 <register_events+0x5c>
   254ac:	235c      	movs	r3, #92	; 0x5c
   254ae:	4642      	mov	r2, r8
   254b0:	4651      	mov	r1, sl
   254b2:	485d      	ldr	r0, [pc, #372]	; (25628 <register_events+0x1bc>)
   254b4:	f006 fdff 	bl	2c0b6 <printk>
   254b8:	4631      	mov	r1, r6
   254ba:	485c      	ldr	r0, [pc, #368]	; (2562c <register_events+0x1c0>)
   254bc:	f006 fdfb 	bl	2c0b6 <printk>
   254c0:	215c      	movs	r1, #92	; 0x5c
   254c2:	4640      	mov	r0, r8
   254c4:	f007 f814 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   254c8:	4630      	mov	r0, r6
   254ca:	f7ff fa7b 	bl	249c4 <z_spin_lock_set_owner>
	switch (event->type) {
   254ce:	7b63      	ldrb	r3, [r4, #13]
   254d0:	f003 030f 	and.w	r3, r3, #15
   254d4:	2b04      	cmp	r3, #4
   254d6:	d844      	bhi.n	25562 <register_events+0xf6>
   254d8:	e8df f003 	tbb	[pc, r3]
   254dc:	43033d2d 	.word	0x43033d2d
   254e0:	2a          	.byte	0x2a
   254e1:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   254e2:	6923      	ldr	r3, [r4, #16]
   254e4:	689b      	ldr	r3, [r3, #8]
   254e6:	b333      	cbz	r3, 25536 <register_events+0xca>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   254e8:	2202      	movs	r2, #2
	event->poller = NULL;
   254ea:	2100      	movs	r1, #0
	event->state |= state;
   254ec:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   254ee:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   254f0:	f3c3 3004 	ubfx	r0, r3, #12, #5
   254f4:	4302      	orrs	r2, r0
   254f6:	f362 3310 	bfi	r3, r2, #12, #5
   254fa:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   254fc:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   254fe:	4630      	mov	r0, r6
   25500:	f7ff fa50 	bl	249a4 <z_spin_unlock_valid>
   25504:	b968      	cbnz	r0, 25522 <register_events+0xb6>
   25506:	2384      	movs	r3, #132	; 0x84
   25508:	4642      	mov	r2, r8
   2550a:	4949      	ldr	r1, [pc, #292]	; (25630 <register_events+0x1c4>)
   2550c:	4846      	ldr	r0, [pc, #280]	; (25628 <register_events+0x1bc>)
   2550e:	f006 fdd2 	bl	2c0b6 <printk>
   25512:	4631      	mov	r1, r6
   25514:	4847      	ldr	r0, [pc, #284]	; (25634 <register_events+0x1c8>)
   25516:	f006 fdce 	bl	2c0b6 <printk>
   2551a:	2184      	movs	r1, #132	; 0x84
   2551c:	4640      	mov	r0, r8
   2551e:	f006 ffe7 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   25522:	f38b 8811 	msr	BASEPRI, fp
   25526:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2552a:	3701      	adds	r7, #1
   2552c:	3414      	adds	r4, #20
   2552e:	e7aa      	b.n	25486 <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   25530:	6923      	ldr	r3, [r4, #16]
   25532:	681b      	ldr	r3, [r3, #0]
   25534:	bb33      	cbnz	r3, 25584 <register_events+0x118>
		} else if (!just_check && poller->is_polling) {
   25536:	9b01      	ldr	r3, [sp, #4]
   25538:	2b00      	cmp	r3, #0
   2553a:	d1e0      	bne.n	254fe <register_events+0x92>
   2553c:	782b      	ldrb	r3, [r5, #0]
   2553e:	2b00      	cmp	r3, #0
   25540:	d0dd      	beq.n	254fe <register_events+0x92>
	switch (event->type) {
   25542:	7b63      	ldrb	r3, [r4, #13]
   25544:	f003 030f 	and.w	r3, r3, #15
   25548:	2b04      	cmp	r3, #4
   2554a:	d85d      	bhi.n	25608 <register_events+0x19c>
   2554c:	e8df f003 	tbb	[pc, r3]
   25550:	5c1c4931 	.word	0x5c1c4931
   25554:	35          	.byte	0x35
   25555:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   25556:	6923      	ldr	r3, [r4, #16]
   25558:	689b      	ldr	r3, [r3, #8]
   2555a:	2b00      	cmp	r3, #0
   2555c:	d0eb      	beq.n	25536 <register_events+0xca>
			*state = K_POLL_STATE_SIGNALED;
   2555e:	2201      	movs	r2, #1
   25560:	e7c3      	b.n	254ea <register_events+0x7e>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   25562:	234f      	movs	r3, #79	; 0x4f
   25564:	4a34      	ldr	r2, [pc, #208]	; (25638 <register_events+0x1cc>)
   25566:	4935      	ldr	r1, [pc, #212]	; (2563c <register_events+0x1d0>)
   25568:	482f      	ldr	r0, [pc, #188]	; (25628 <register_events+0x1bc>)
   2556a:	f006 fda4 	bl	2c0b6 <printk>
   2556e:	7b61      	ldrb	r1, [r4, #13]
   25570:	4833      	ldr	r0, [pc, #204]	; (25640 <register_events+0x1d4>)
   25572:	f001 010f 	and.w	r1, r1, #15
   25576:	f006 fd9e 	bl	2c0b6 <printk>
   2557a:	214f      	movs	r1, #79	; 0x4f
   2557c:	482e      	ldr	r0, [pc, #184]	; (25638 <register_events+0x1cc>)
   2557e:	f006 ffb7 	bl	2c4f0 <assert_post_action>
		break;
   25582:	e7d8      	b.n	25536 <register_events+0xca>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   25584:	2204      	movs	r2, #4
   25586:	e7b0      	b.n	254ea <register_events+0x7e>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   25588:	6923      	ldr	r3, [r4, #16]
   2558a:	b963      	cbnz	r3, 255a6 <register_events+0x13a>
   2558c:	492d      	ldr	r1, [pc, #180]	; (25644 <register_events+0x1d8>)
   2558e:	2374      	movs	r3, #116	; 0x74
   25590:	4a29      	ldr	r2, [pc, #164]	; (25638 <register_events+0x1cc>)
   25592:	4825      	ldr	r0, [pc, #148]	; (25628 <register_events+0x1bc>)
   25594:	f006 fd8f 	bl	2c0b6 <printk>
   25598:	482b      	ldr	r0, [pc, #172]	; (25648 <register_events+0x1dc>)
   2559a:	f006 fd8c 	bl	2c0b6 <printk>
   2559e:	2174      	movs	r1, #116	; 0x74
   255a0:	4825      	ldr	r0, [pc, #148]	; (25638 <register_events+0x1cc>)
   255a2:	f006 ffa5 	bl	2c4f0 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   255a6:	462a      	mov	r2, r5
   255a8:	4621      	mov	r1, r4
   255aa:	6920      	ldr	r0, [r4, #16]
   255ac:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   255ae:	f009 f98f 	bl	2e8d0 <add_event>
	event->poller = poller;
   255b2:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   255b4:	f109 0901 	add.w	r9, r9, #1
   255b8:	e7a1      	b.n	254fe <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   255ba:	6923      	ldr	r3, [r4, #16]
   255bc:	b963      	cbnz	r3, 255d8 <register_events+0x16c>
   255be:	4923      	ldr	r1, [pc, #140]	; (2564c <register_events+0x1e0>)
   255c0:	2378      	movs	r3, #120	; 0x78
   255c2:	4a1d      	ldr	r2, [pc, #116]	; (25638 <register_events+0x1cc>)
   255c4:	4818      	ldr	r0, [pc, #96]	; (25628 <register_events+0x1bc>)
   255c6:	f006 fd76 	bl	2c0b6 <printk>
   255ca:	4821      	ldr	r0, [pc, #132]	; (25650 <register_events+0x1e4>)
   255cc:	f006 fd73 	bl	2c0b6 <printk>
   255d0:	2178      	movs	r1, #120	; 0x78
   255d2:	4819      	ldr	r0, [pc, #100]	; (25638 <register_events+0x1cc>)
   255d4:	f006 ff8c 	bl	2c4f0 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   255d8:	6920      	ldr	r0, [r4, #16]
   255da:	462a      	mov	r2, r5
   255dc:	4621      	mov	r1, r4
   255de:	3014      	adds	r0, #20
   255e0:	e7e5      	b.n	255ae <register_events+0x142>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   255e2:	6923      	ldr	r3, [r4, #16]
   255e4:	b963      	cbnz	r3, 25600 <register_events+0x194>
   255e6:	491b      	ldr	r1, [pc, #108]	; (25654 <register_events+0x1e8>)
   255e8:	237c      	movs	r3, #124	; 0x7c
   255ea:	4a13      	ldr	r2, [pc, #76]	; (25638 <register_events+0x1cc>)
   255ec:	480e      	ldr	r0, [pc, #56]	; (25628 <register_events+0x1bc>)
   255ee:	f006 fd62 	bl	2c0b6 <printk>
   255f2:	4819      	ldr	r0, [pc, #100]	; (25658 <register_events+0x1ec>)
   255f4:	f006 fd5f 	bl	2c0b6 <printk>
   255f8:	217c      	movs	r1, #124	; 0x7c
   255fa:	480f      	ldr	r0, [pc, #60]	; (25638 <register_events+0x1cc>)
   255fc:	f006 ff78 	bl	2c4f0 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   25600:	462a      	mov	r2, r5
   25602:	4621      	mov	r1, r4
   25604:	6920      	ldr	r0, [r4, #16]
   25606:	e7d2      	b.n	255ae <register_events+0x142>
		__ASSERT(false, "invalid event type\n");
   25608:	2383      	movs	r3, #131	; 0x83
   2560a:	4a0b      	ldr	r2, [pc, #44]	; (25638 <register_events+0x1cc>)
   2560c:	490b      	ldr	r1, [pc, #44]	; (2563c <register_events+0x1d0>)
   2560e:	4806      	ldr	r0, [pc, #24]	; (25628 <register_events+0x1bc>)
   25610:	f006 fd51 	bl	2c0b6 <printk>
   25614:	4811      	ldr	r0, [pc, #68]	; (2565c <register_events+0x1f0>)
   25616:	f006 fd4e 	bl	2c0b6 <printk>
   2561a:	2183      	movs	r1, #131	; 0x83
   2561c:	4806      	ldr	r0, [pc, #24]	; (25638 <register_events+0x1cc>)
   2561e:	f006 ff67 	bl	2c4f0 <assert_post_action>
		break;
   25622:	e7c6      	b.n	255b2 <register_events+0x146>
   25624:	20021e10 	.word	0x20021e10
   25628:	000300ff 	.word	0x000300ff
   2562c:	00030236 	.word	0x00030236
   25630:	000301f5 	.word	0x000301f5
   25634:	0003020c 	.word	0x0003020c
   25638:	00032e46 	.word	0x00032e46
   2563c:	00032bdb 	.word	0x00032bdb
   25640:	00032f42 	.word	0x00032f42
   25644:	00032e9c 	.word	0x00032e9c
   25648:	00032eb6 	.word	0x00032eb6
   2564c:	00032ecb 	.word	0x00032ecb
   25650:	00032ee7 	.word	0x00032ee7
   25654:	00032ef8 	.word	0x00032ef8
   25658:	00032f15 	.word	0x00032f15
   2565c:	00032f2c 	.word	0x00032f2c
   25660:	000301cf 	.word	0x000301cf
   25664:	00030221 	.word	0x00030221

00025668 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   25668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2566c:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   2566e:	2301      	movs	r3, #1
{
   25670:	b088      	sub	sp, #32
	struct _poller poller = { .is_polling = true,
   25672:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   25676:	4b73      	ldr	r3, [pc, #460]	; (25844 <z_impl_k_poll+0x1dc>)
{
   25678:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   2567a:	689b      	ldr	r3, [r3, #8]
{
   2567c:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   2567e:	9306      	str	r3, [sp, #24]
   25680:	4b71      	ldr	r3, [pc, #452]	; (25848 <z_impl_k_poll+0x1e0>)
{
   25682:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   25684:	9307      	str	r3, [sp, #28]
   25686:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   2568a:	b163      	cbz	r3, 256a6 <z_impl_k_poll+0x3e>
   2568c:	496f      	ldr	r1, [pc, #444]	; (2584c <z_impl_k_poll+0x1e4>)
   2568e:	23ff      	movs	r3, #255	; 0xff
   25690:	4a6f      	ldr	r2, [pc, #444]	; (25850 <z_impl_k_poll+0x1e8>)
   25692:	4870      	ldr	r0, [pc, #448]	; (25854 <z_impl_k_poll+0x1ec>)
   25694:	f006 fd0f 	bl	2c0b6 <printk>
   25698:	486f      	ldr	r0, [pc, #444]	; (25858 <z_impl_k_poll+0x1f0>)
   2569a:	f006 fd0c 	bl	2c0b6 <printk>
   2569e:	21ff      	movs	r1, #255	; 0xff
   256a0:	486b      	ldr	r0, [pc, #428]	; (25850 <z_impl_k_poll+0x1e8>)
   256a2:	f006 ff25 	bl	2c4f0 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   256a6:	b974      	cbnz	r4, 256c6 <z_impl_k_poll+0x5e>
   256a8:	496c      	ldr	r1, [pc, #432]	; (2585c <z_impl_k_poll+0x1f4>)
   256aa:	f44f 7380 	mov.w	r3, #256	; 0x100
   256ae:	4a68      	ldr	r2, [pc, #416]	; (25850 <z_impl_k_poll+0x1e8>)
   256b0:	4868      	ldr	r0, [pc, #416]	; (25854 <z_impl_k_poll+0x1ec>)
   256b2:	f006 fd00 	bl	2c0b6 <printk>
   256b6:	486a      	ldr	r0, [pc, #424]	; (25860 <z_impl_k_poll+0x1f8>)
   256b8:	f006 fcfd 	bl	2c0b6 <printk>
   256bc:	f44f 7180 	mov.w	r1, #256	; 0x100
   256c0:	4863      	ldr	r0, [pc, #396]	; (25850 <z_impl_k_poll+0x1e8>)
   256c2:	f006 ff15 	bl	2c4f0 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   256c6:	2d00      	cmp	r5, #0
   256c8:	da0e      	bge.n	256e8 <z_impl_k_poll+0x80>
   256ca:	4966      	ldr	r1, [pc, #408]	; (25864 <z_impl_k_poll+0x1fc>)
   256cc:	f240 1301 	movw	r3, #257	; 0x101
   256d0:	4a5f      	ldr	r2, [pc, #380]	; (25850 <z_impl_k_poll+0x1e8>)
   256d2:	4860      	ldr	r0, [pc, #384]	; (25854 <z_impl_k_poll+0x1ec>)
   256d4:	f006 fcef 	bl	2c0b6 <printk>
   256d8:	4863      	ldr	r0, [pc, #396]	; (25868 <z_impl_k_poll+0x200>)
   256da:	f006 fcec 	bl	2c0b6 <printk>
   256de:	f240 1101 	movw	r1, #257	; 0x101
   256e2:	485b      	ldr	r0, [pc, #364]	; (25850 <z_impl_k_poll+0x1e8>)
   256e4:	f006 ff04 	bl	2c4f0 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   256e8:	ea56 0307 	orrs.w	r3, r6, r7
   256ec:	bf0c      	ite	eq
   256ee:	2301      	moveq	r3, #1
   256f0:	2300      	movne	r3, #0
   256f2:	4629      	mov	r1, r5
   256f4:	4620      	mov	r0, r4
   256f6:	aa05      	add	r2, sp, #20
   256f8:	f7ff feb8 	bl	2546c <register_events>
   256fc:	4680      	mov	r8, r0
	__asm__ volatile(
   256fe:	f04f 0320 	mov.w	r3, #32
   25702:	f3ef 8511 	mrs	r5, BASEPRI
   25706:	f383 8811 	msr	BASEPRI, r3
   2570a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2570e:	4857      	ldr	r0, [pc, #348]	; (2586c <z_impl_k_poll+0x204>)
   25710:	f7ff f93a 	bl	24988 <z_spin_lock_valid>
   25714:	b968      	cbnz	r0, 25732 <z_impl_k_poll+0xca>
   25716:	235c      	movs	r3, #92	; 0x5c
   25718:	4a55      	ldr	r2, [pc, #340]	; (25870 <z_impl_k_poll+0x208>)
   2571a:	4956      	ldr	r1, [pc, #344]	; (25874 <z_impl_k_poll+0x20c>)
   2571c:	484d      	ldr	r0, [pc, #308]	; (25854 <z_impl_k_poll+0x1ec>)
   2571e:	f006 fcca 	bl	2c0b6 <printk>
   25722:	4952      	ldr	r1, [pc, #328]	; (2586c <z_impl_k_poll+0x204>)
   25724:	4854      	ldr	r0, [pc, #336]	; (25878 <z_impl_k_poll+0x210>)
   25726:	f006 fcc6 	bl	2c0b6 <printk>
   2572a:	215c      	movs	r1, #92	; 0x5c
   2572c:	4850      	ldr	r0, [pc, #320]	; (25870 <z_impl_k_poll+0x208>)
   2572e:	f006 fedf 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   25732:	484e      	ldr	r0, [pc, #312]	; (2586c <z_impl_k_poll+0x204>)
   25734:	f7ff f946 	bl	249c4 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   25738:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2573c:	b9fb      	cbnz	r3, 2577e <z_impl_k_poll+0x116>
		clear_event_registrations(events, events_registered, key);
   2573e:	4620      	mov	r0, r4
   25740:	462a      	mov	r2, r5
   25742:	4641      	mov	r1, r8
   25744:	f7ff fdda 	bl	252fc <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25748:	4848      	ldr	r0, [pc, #288]	; (2586c <z_impl_k_poll+0x204>)
   2574a:	f7ff f92b 	bl	249a4 <z_spin_unlock_valid>
   2574e:	b968      	cbnz	r0, 2576c <z_impl_k_poll+0x104>
   25750:	2384      	movs	r3, #132	; 0x84
   25752:	4a47      	ldr	r2, [pc, #284]	; (25870 <z_impl_k_poll+0x208>)
   25754:	4949      	ldr	r1, [pc, #292]	; (2587c <z_impl_k_poll+0x214>)
   25756:	483f      	ldr	r0, [pc, #252]	; (25854 <z_impl_k_poll+0x1ec>)
   25758:	f006 fcad 	bl	2c0b6 <printk>
   2575c:	4943      	ldr	r1, [pc, #268]	; (2586c <z_impl_k_poll+0x204>)
   2575e:	4848      	ldr	r0, [pc, #288]	; (25880 <z_impl_k_poll+0x218>)
   25760:	f006 fca9 	bl	2c0b6 <printk>
   25764:	2184      	movs	r1, #132	; 0x84
   25766:	4842      	ldr	r0, [pc, #264]	; (25870 <z_impl_k_poll+0x208>)
   25768:	f006 fec2 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   2576c:	f385 8811 	msr	BASEPRI, r5
   25770:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   25774:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   25776:	4628      	mov	r0, r5
   25778:	b008      	add	sp, #32
   2577a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	poller.is_polling = false;
   2577e:	2300      	movs	r3, #0
   25780:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25784:	ea56 0307 	orrs.w	r3, r6, r7
   25788:	d118      	bne.n	257bc <z_impl_k_poll+0x154>
   2578a:	4838      	ldr	r0, [pc, #224]	; (2586c <z_impl_k_poll+0x204>)
   2578c:	f7ff f90a 	bl	249a4 <z_spin_unlock_valid>
   25790:	b968      	cbnz	r0, 257ae <z_impl_k_poll+0x146>
   25792:	2384      	movs	r3, #132	; 0x84
   25794:	4a36      	ldr	r2, [pc, #216]	; (25870 <z_impl_k_poll+0x208>)
   25796:	4939      	ldr	r1, [pc, #228]	; (2587c <z_impl_k_poll+0x214>)
   25798:	482e      	ldr	r0, [pc, #184]	; (25854 <z_impl_k_poll+0x1ec>)
   2579a:	f006 fc8c 	bl	2c0b6 <printk>
   2579e:	4933      	ldr	r1, [pc, #204]	; (2586c <z_impl_k_poll+0x204>)
   257a0:	4837      	ldr	r0, [pc, #220]	; (25880 <z_impl_k_poll+0x218>)
   257a2:	f006 fc88 	bl	2c0b6 <printk>
   257a6:	2184      	movs	r1, #132	; 0x84
   257a8:	4831      	ldr	r0, [pc, #196]	; (25870 <z_impl_k_poll+0x208>)
   257aa:	f006 fea1 	bl	2c4f0 <assert_post_action>
   257ae:	f385 8811 	msr	BASEPRI, r5
   257b2:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   257b6:	f06f 050a 	mvn.w	r5, #10
   257ba:	e7dc      	b.n	25776 <z_impl_k_poll+0x10e>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   257bc:	4629      	mov	r1, r5
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   257be:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   257c0:	e9cd 6700 	strd	r6, r7, [sp]
   257c4:	4829      	ldr	r0, [pc, #164]	; (2586c <z_impl_k_poll+0x204>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   257c6:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   257ca:	f7fe fbe1 	bl	23f90 <z_pend_curr>
   257ce:	4605      	mov	r5, r0
	__asm__ volatile(
   257d0:	f04f 0320 	mov.w	r3, #32
   257d4:	f3ef 8611 	mrs	r6, BASEPRI
   257d8:	f383 8811 	msr	BASEPRI, r3
   257dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   257e0:	4822      	ldr	r0, [pc, #136]	; (2586c <z_impl_k_poll+0x204>)
   257e2:	f7ff f8d1 	bl	24988 <z_spin_lock_valid>
   257e6:	b968      	cbnz	r0, 25804 <z_impl_k_poll+0x19c>
   257e8:	235c      	movs	r3, #92	; 0x5c
   257ea:	4a21      	ldr	r2, [pc, #132]	; (25870 <z_impl_k_poll+0x208>)
   257ec:	4921      	ldr	r1, [pc, #132]	; (25874 <z_impl_k_poll+0x20c>)
   257ee:	4819      	ldr	r0, [pc, #100]	; (25854 <z_impl_k_poll+0x1ec>)
   257f0:	f006 fc61 	bl	2c0b6 <printk>
   257f4:	491d      	ldr	r1, [pc, #116]	; (2586c <z_impl_k_poll+0x204>)
   257f6:	4820      	ldr	r0, [pc, #128]	; (25878 <z_impl_k_poll+0x210>)
   257f8:	f006 fc5d 	bl	2c0b6 <printk>
   257fc:	215c      	movs	r1, #92	; 0x5c
   257fe:	481c      	ldr	r0, [pc, #112]	; (25870 <z_impl_k_poll+0x208>)
   25800:	f006 fe76 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   25804:	4819      	ldr	r0, [pc, #100]	; (2586c <z_impl_k_poll+0x204>)
   25806:	f7ff f8dd 	bl	249c4 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   2580a:	4620      	mov	r0, r4
   2580c:	4632      	mov	r2, r6
   2580e:	4641      	mov	r1, r8
   25810:	f7ff fd74 	bl	252fc <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25814:	4815      	ldr	r0, [pc, #84]	; (2586c <z_impl_k_poll+0x204>)
   25816:	f7ff f8c5 	bl	249a4 <z_spin_unlock_valid>
   2581a:	b968      	cbnz	r0, 25838 <z_impl_k_poll+0x1d0>
   2581c:	2384      	movs	r3, #132	; 0x84
   2581e:	4a14      	ldr	r2, [pc, #80]	; (25870 <z_impl_k_poll+0x208>)
   25820:	4916      	ldr	r1, [pc, #88]	; (2587c <z_impl_k_poll+0x214>)
   25822:	480c      	ldr	r0, [pc, #48]	; (25854 <z_impl_k_poll+0x1ec>)
   25824:	f006 fc47 	bl	2c0b6 <printk>
   25828:	4910      	ldr	r1, [pc, #64]	; (2586c <z_impl_k_poll+0x204>)
   2582a:	4815      	ldr	r0, [pc, #84]	; (25880 <z_impl_k_poll+0x218>)
   2582c:	f006 fc43 	bl	2c0b6 <printk>
   25830:	2184      	movs	r1, #132	; 0x84
   25832:	480f      	ldr	r0, [pc, #60]	; (25870 <z_impl_k_poll+0x208>)
   25834:	f006 fe5c 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   25838:	f386 8811 	msr	BASEPRI, r6
   2583c:	f3bf 8f6f 	isb	sy
	return swap_rc;
   25840:	e799      	b.n	25776 <z_impl_k_poll+0x10e>
   25842:	bf00      	nop
   25844:	20021dbc 	.word	0x20021dbc
   25848:	0002527d 	.word	0x0002527d
   2584c:	00032aaa 	.word	0x00032aaa
   25850:	00032e46 	.word	0x00032e46
   25854:	000300ff 	.word	0x000300ff
   25858:	0003072c 	.word	0x0003072c
   2585c:	00032f5f 	.word	0x00032f5f
   25860:	00032f75 	.word	0x00032f75
   25864:	00032f84 	.word	0x00032f84
   25868:	00032f94 	.word	0x00032f94
   2586c:	20021e10 	.word	0x20021e10
   25870:	000301cf 	.word	0x000301cf
   25874:	00030221 	.word	0x00030221
   25878:	00030236 	.word	0x00030236
   2587c:	000301f5 	.word	0x000301f5
   25880:	0003020c 	.word	0x0003020c

00025884 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   25884:	b570      	push	{r4, r5, r6, lr}
   25886:	4604      	mov	r4, r0
   25888:	460d      	mov	r5, r1
	__asm__ volatile(
   2588a:	f04f 0320 	mov.w	r3, #32
   2588e:	f3ef 8611 	mrs	r6, BASEPRI
   25892:	f383 8811 	msr	BASEPRI, r3
   25896:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2589a:	4821      	ldr	r0, [pc, #132]	; (25920 <z_impl_k_poll_signal_raise+0x9c>)
   2589c:	f7ff f874 	bl	24988 <z_spin_lock_valid>
   258a0:	b968      	cbnz	r0, 258be <z_impl_k_poll_signal_raise+0x3a>
   258a2:	235c      	movs	r3, #92	; 0x5c
   258a4:	4a1f      	ldr	r2, [pc, #124]	; (25924 <z_impl_k_poll_signal_raise+0xa0>)
   258a6:	4920      	ldr	r1, [pc, #128]	; (25928 <z_impl_k_poll_signal_raise+0xa4>)
   258a8:	4820      	ldr	r0, [pc, #128]	; (2592c <z_impl_k_poll_signal_raise+0xa8>)
   258aa:	f006 fc04 	bl	2c0b6 <printk>
   258ae:	491c      	ldr	r1, [pc, #112]	; (25920 <z_impl_k_poll_signal_raise+0x9c>)
   258b0:	481f      	ldr	r0, [pc, #124]	; (25930 <z_impl_k_poll_signal_raise+0xac>)
   258b2:	f006 fc00 	bl	2c0b6 <printk>
   258b6:	215c      	movs	r1, #92	; 0x5c
   258b8:	481a      	ldr	r0, [pc, #104]	; (25924 <z_impl_k_poll_signal_raise+0xa0>)
   258ba:	f006 fe19 	bl	2c4f0 <assert_post_action>
	z_spin_lock_set_owner(l);
   258be:	4818      	ldr	r0, [pc, #96]	; (25920 <z_impl_k_poll_signal_raise+0x9c>)
   258c0:	f7ff f880 	bl	249c4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
	signal->signaled = 1U;
   258c4:	2101      	movs	r1, #1
	return list->head == list;
   258c6:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   258c8:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   258ca:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   258cc:	60a1      	str	r1, [r4, #8]
   258ce:	d117      	bne.n	25900 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   258d0:	4813      	ldr	r0, [pc, #76]	; (25920 <z_impl_k_poll_signal_raise+0x9c>)
   258d2:	f7ff f867 	bl	249a4 <z_spin_unlock_valid>
   258d6:	b968      	cbnz	r0, 258f4 <z_impl_k_poll_signal_raise+0x70>
   258d8:	2384      	movs	r3, #132	; 0x84
   258da:	4a12      	ldr	r2, [pc, #72]	; (25924 <z_impl_k_poll_signal_raise+0xa0>)
   258dc:	4915      	ldr	r1, [pc, #84]	; (25934 <z_impl_k_poll_signal_raise+0xb0>)
   258de:	4813      	ldr	r0, [pc, #76]	; (2592c <z_impl_k_poll_signal_raise+0xa8>)
   258e0:	f006 fbe9 	bl	2c0b6 <printk>
   258e4:	490e      	ldr	r1, [pc, #56]	; (25920 <z_impl_k_poll_signal_raise+0x9c>)
   258e6:	4814      	ldr	r0, [pc, #80]	; (25938 <z_impl_k_poll_signal_raise+0xb4>)
   258e8:	f006 fbe5 	bl	2c0b6 <printk>
   258ec:	2184      	movs	r1, #132	; 0x84
   258ee:	480d      	ldr	r0, [pc, #52]	; (25924 <z_impl_k_poll_signal_raise+0xa0>)
   258f0:	f006 fdfe 	bl	2c4f0 <assert_post_action>
	__asm__ volatile(
   258f4:	f386 8811 	msr	BASEPRI, r6
   258f8:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   258fc:	2400      	movs	r4, #0
   258fe:	e00d      	b.n	2591c <z_impl_k_poll_signal_raise+0x98>
	node->prev->next = node->next;
   25900:	e9d0 3200 	ldrd	r3, r2, [r0]
   25904:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   25906:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25908:	2300      	movs	r3, #0
	node->prev = NULL;
   2590a:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2590e:	f008 ffc4 	bl	2e89a <signal_poll_event>

	z_reschedule(&lock, key);
   25912:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   25914:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   25916:	4802      	ldr	r0, [pc, #8]	; (25920 <z_impl_k_poll_signal_raise+0x9c>)
   25918:	f7fd fd84 	bl	23424 <z_reschedule>
	return rc;
}
   2591c:	4620      	mov	r0, r4
   2591e:	bd70      	pop	{r4, r5, r6, pc}
   25920:	20021e10 	.word	0x20021e10
   25924:	000301cf 	.word	0x000301cf
   25928:	00030221 	.word	0x00030221
   2592c:	000300ff 	.word	0x000300ff
   25930:	00030236 	.word	0x00030236
   25934:	000301f5 	.word	0x000301f5
   25938:	0003020c 	.word	0x0003020c

0002593c <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   2593c:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   2593e:	4801      	ldr	r0, [pc, #4]	; (25944 <k_malloc+0x8>)
   25940:	f009 b805 	b.w	2e94e <k_mem_pool_malloc>
   25944:	200204d4 	.word	0x200204d4

00025948 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   25948:	b507      	push	{r0, r1, r2, lr}
   2594a:	9001      	str	r0, [sp, #4]
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   2594c:	f008 fed7 	bl	2e6fe <k_is_in_isr>
   25950:	9901      	ldr	r1, [sp, #4]
   25952:	b948      	cbnz	r0, 25968 <z_thread_malloc+0x20>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   25954:	4b07      	ldr	r3, [pc, #28]	; (25974 <z_thread_malloc+0x2c>)
   25956:	689b      	ldr	r3, [r3, #8]
   25958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (pool) {
   2595a:	b13b      	cbz	r3, 2596c <z_thread_malloc+0x24>
		ret = k_mem_pool_malloc(pool, size);
   2595c:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   2595e:	b003      	add	sp, #12
   25960:	f85d eb04 	ldr.w	lr, [sp], #4
		ret = k_mem_pool_malloc(pool, size);
   25964:	f008 bff3 	b.w	2e94e <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   25968:	4b03      	ldr	r3, [pc, #12]	; (25978 <z_thread_malloc+0x30>)
   2596a:	e7f7      	b.n	2595c <z_thread_malloc+0x14>
}
   2596c:	b003      	add	sp, #12
   2596e:	f85d fb04 	ldr.w	pc, [sp], #4
   25972:	bf00      	nop
   25974:	20021dbc 	.word	0x20021dbc
   25978:	200204d4 	.word	0x200204d4

0002597c <__assert_func>:
   2597c:	4d0a      	ldr	r5, [pc, #40]	; (259a8 <__assert_func+0x2c>)
   2597e:	4614      	mov	r4, r2
   25980:	461a      	mov	r2, r3
   25982:	4603      	mov	r3, r0
   25984:	682d      	ldr	r5, [r5, #0]
   25986:	b500      	push	{lr}
   25988:	68e8      	ldr	r0, [r5, #12]
   2598a:	b085      	sub	sp, #20
   2598c:	b144      	cbz	r4, 259a0 <__assert_func+0x24>
   2598e:	4d07      	ldr	r5, [pc, #28]	; (259ac <__assert_func+0x30>)
   25990:	9100      	str	r1, [sp, #0]
   25992:	4907      	ldr	r1, [pc, #28]	; (259b0 <__assert_func+0x34>)
   25994:	e9cd 5401 	strd	r5, r4, [sp, #4]
   25998:	f000 f812 	bl	259c0 <fiprintf>
   2599c:	f003 feda 	bl	29754 <abort>
   259a0:	4d04      	ldr	r5, [pc, #16]	; (259b4 <__assert_func+0x38>)
   259a2:	462c      	mov	r4, r5
   259a4:	e7f4      	b.n	25990 <__assert_func+0x14>
   259a6:	bf00      	nop
   259a8:	200204d8 	.word	0x200204d8
   259ac:	0002f598 	.word	0x0002f598
   259b0:	0002f5a8 	.word	0x0002f5a8
   259b4:	0002f5a4 	.word	0x0002f5a4

000259b8 <atoi>:
   259b8:	220a      	movs	r2, #10
   259ba:	2100      	movs	r1, #0
   259bc:	f001 bac2 	b.w	26f44 <strtol>

000259c0 <fiprintf>:
   259c0:	b40e      	push	{r1, r2, r3}
   259c2:	b510      	push	{r4, lr}
   259c4:	b083      	sub	sp, #12
   259c6:	4c07      	ldr	r4, [pc, #28]	; (259e4 <fiprintf+0x24>)
   259c8:	4601      	mov	r1, r0
   259ca:	ab05      	add	r3, sp, #20
   259cc:	6820      	ldr	r0, [r4, #0]
   259ce:	f853 2b04 	ldr.w	r2, [r3], #4
   259d2:	9301      	str	r3, [sp, #4]
   259d4:	f002 feea 	bl	287ac <_vfiprintf_r>
   259d8:	b003      	add	sp, #12
   259da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   259de:	b003      	add	sp, #12
   259e0:	4770      	bx	lr
   259e2:	bf00      	nop
   259e4:	200204d8 	.word	0x200204d8

000259e8 <malloc>:
   259e8:	4b02      	ldr	r3, [pc, #8]	; (259f4 <malloc+0xc>)
   259ea:	4601      	mov	r1, r0
   259ec:	6818      	ldr	r0, [r3, #0]
   259ee:	f000 b80b 	b.w	25a08 <_malloc_r>
   259f2:	bf00      	nop
   259f4:	200204d8 	.word	0x200204d8

000259f8 <free>:
   259f8:	4b02      	ldr	r3, [pc, #8]	; (25a04 <free+0xc>)
   259fa:	4601      	mov	r1, r0
   259fc:	6818      	ldr	r0, [r3, #0]
   259fe:	f004 b96d 	b.w	29cdc <_free_r>
   25a02:	bf00      	nop
   25a04:	200204d8 	.word	0x200204d8

00025a08 <_malloc_r>:
   25a08:	f101 030b 	add.w	r3, r1, #11
   25a0c:	2b16      	cmp	r3, #22
   25a0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25a12:	4606      	mov	r6, r0
   25a14:	b083      	sub	sp, #12
   25a16:	d824      	bhi.n	25a62 <_malloc_r+0x5a>
   25a18:	2910      	cmp	r1, #16
   25a1a:	f200 80f5 	bhi.w	25c08 <_malloc_r+0x200>
   25a1e:	f000 fb7d 	bl	2611c <__malloc_lock>
   25a22:	2510      	movs	r5, #16
   25a24:	2002      	movs	r0, #2
   25a26:	2318      	movs	r3, #24
   25a28:	4fce      	ldr	r7, [pc, #824]	; (25d64 <_malloc_r+0x35c>)
   25a2a:	443b      	add	r3, r7
   25a2c:	685a      	ldr	r2, [r3, #4]
   25a2e:	f1a3 0108 	sub.w	r1, r3, #8
   25a32:	428a      	cmp	r2, r1
   25a34:	f000 80ef 	beq.w	25c16 <_malloc_r+0x20e>
   25a38:	6853      	ldr	r3, [r2, #4]
   25a3a:	f102 0408 	add.w	r4, r2, #8
   25a3e:	68d1      	ldr	r1, [r2, #12]
   25a40:	4630      	mov	r0, r6
   25a42:	f023 0303 	bic.w	r3, r3, #3
   25a46:	6895      	ldr	r5, [r2, #8]
   25a48:	441a      	add	r2, r3
   25a4a:	60e9      	str	r1, [r5, #12]
   25a4c:	608d      	str	r5, [r1, #8]
   25a4e:	6853      	ldr	r3, [r2, #4]
   25a50:	f043 0301 	orr.w	r3, r3, #1
   25a54:	6053      	str	r3, [r2, #4]
   25a56:	f000 fb67 	bl	26128 <__malloc_unlock>
   25a5a:	4620      	mov	r0, r4
   25a5c:	b003      	add	sp, #12
   25a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a62:	2b00      	cmp	r3, #0
   25a64:	f023 0507 	bic.w	r5, r3, #7
   25a68:	f2c0 80ce 	blt.w	25c08 <_malloc_r+0x200>
   25a6c:	42a9      	cmp	r1, r5
   25a6e:	f200 80cb 	bhi.w	25c08 <_malloc_r+0x200>
   25a72:	f000 fb53 	bl	2611c <__malloc_lock>
   25a76:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   25a7a:	f0c0 81ca 	bcc.w	25e12 <_malloc_r+0x40a>
   25a7e:	0a6b      	lsrs	r3, r5, #9
   25a80:	f000 813a 	beq.w	25cf8 <_malloc_r+0x2f0>
   25a84:	2b04      	cmp	r3, #4
   25a86:	f200 81a0 	bhi.w	25dca <_malloc_r+0x3c2>
   25a8a:	09ab      	lsrs	r3, r5, #6
   25a8c:	f103 0039 	add.w	r0, r3, #57	; 0x39
   25a90:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   25a94:	00c3      	lsls	r3, r0, #3
   25a96:	4fb3      	ldr	r7, [pc, #716]	; (25d64 <_malloc_r+0x35c>)
   25a98:	443b      	add	r3, r7
   25a9a:	f1a3 0408 	sub.w	r4, r3, #8
   25a9e:	685b      	ldr	r3, [r3, #4]
   25aa0:	429c      	cmp	r4, r3
   25aa2:	d107      	bne.n	25ab4 <_malloc_r+0xac>
   25aa4:	e0bc      	b.n	25c20 <_malloc_r+0x218>
   25aa6:	2900      	cmp	r1, #0
   25aa8:	f280 8149 	bge.w	25d3e <_malloc_r+0x336>
   25aac:	68db      	ldr	r3, [r3, #12]
   25aae:	429c      	cmp	r4, r3
   25ab0:	f000 80b6 	beq.w	25c20 <_malloc_r+0x218>
   25ab4:	685a      	ldr	r2, [r3, #4]
   25ab6:	f022 0203 	bic.w	r2, r2, #3
   25aba:	1b51      	subs	r1, r2, r5
   25abc:	290f      	cmp	r1, #15
   25abe:	ddf2      	ble.n	25aa6 <_malloc_r+0x9e>
   25ac0:	4660      	mov	r0, ip
   25ac2:	f8df e2bc 	ldr.w	lr, [pc, #700]	; 25d80 <_malloc_r+0x378>
   25ac6:	f8d7 c010 	ldr.w	ip, [r7, #16]
   25aca:	45f4      	cmp	ip, lr
   25acc:	f040 80af 	bne.w	25c2e <_malloc_r+0x226>
   25ad0:	1083      	asrs	r3, r0, #2
   25ad2:	2401      	movs	r4, #1
   25ad4:	687a      	ldr	r2, [r7, #4]
   25ad6:	409c      	lsls	r4, r3
   25ad8:	4294      	cmp	r4, r2
   25ada:	f240 80d5 	bls.w	25c88 <_malloc_r+0x280>
   25ade:	f8d7 8008 	ldr.w	r8, [r7, #8]
   25ae2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   25ae6:	f023 0903 	bic.w	r9, r3, #3
   25aea:	eba9 0205 	sub.w	r2, r9, r5
   25aee:	2a0f      	cmp	r2, #15
   25af0:	dd02      	ble.n	25af8 <_malloc_r+0xf0>
   25af2:	45a9      	cmp	r9, r5
   25af4:	f080 8111 	bcs.w	25d1a <_malloc_r+0x312>
   25af8:	4a9b      	ldr	r2, [pc, #620]	; (25d68 <_malloc_r+0x360>)
   25afa:	eb08 0b09 	add.w	fp, r8, r9
   25afe:	4b9b      	ldr	r3, [pc, #620]	; (25d6c <_malloc_r+0x364>)
   25b00:	6811      	ldr	r1, [r2, #0]
   25b02:	681b      	ldr	r3, [r3, #0]
   25b04:	3101      	adds	r1, #1
   25b06:	442b      	add	r3, r5
   25b08:	f000 81d7 	beq.w	25eba <_malloc_r+0x4b2>
   25b0c:	f241 010f 	movw	r1, #4111	; 0x100f
   25b10:	4c97      	ldr	r4, [pc, #604]	; (25d70 <_malloc_r+0x368>)
   25b12:	4419      	add	r1, r3
   25b14:	400c      	ands	r4, r1
   25b16:	4621      	mov	r1, r4
   25b18:	4630      	mov	r0, r6
   25b1a:	f000 fd0d 	bl	26538 <_sbrk_r>
   25b1e:	f1b0 3fff 	cmp.w	r0, #4294967295
   25b22:	4682      	mov	sl, r0
   25b24:	4a90      	ldr	r2, [pc, #576]	; (25d68 <_malloc_r+0x360>)
   25b26:	f000 81b3 	beq.w	25e90 <_malloc_r+0x488>
   25b2a:	45b8      	cmp	r8, r7
   25b2c:	d002      	beq.n	25b34 <_malloc_r+0x12c>
   25b2e:	4583      	cmp	fp, r0
   25b30:	f200 81ae 	bhi.w	25e90 <_malloc_r+0x488>
   25b34:	4b8f      	ldr	r3, [pc, #572]	; (25d74 <_malloc_r+0x36c>)
   25b36:	45d3      	cmp	fp, sl
   25b38:	6818      	ldr	r0, [r3, #0]
   25b3a:	4420      	add	r0, r4
   25b3c:	6018      	str	r0, [r3, #0]
   25b3e:	f000 81ac 	beq.w	25e9a <_malloc_r+0x492>
   25b42:	6811      	ldr	r1, [r2, #0]
   25b44:	3101      	adds	r1, #1
   25b46:	f000 81b5 	beq.w	25eb4 <_malloc_r+0x4ac>
   25b4a:	ebaa 0b0b 	sub.w	fp, sl, fp
   25b4e:	4458      	add	r0, fp
   25b50:	6018      	str	r0, [r3, #0]
   25b52:	f01a 0207 	ands.w	r2, sl, #7
   25b56:	f000 81bc 	beq.w	25ed2 <_malloc_r+0x4ca>
   25b5a:	f1c2 0c08 	rsb	ip, r2, #8
   25b5e:	f241 0108 	movw	r1, #4104	; 0x1008
   25b62:	4630      	mov	r0, r6
   25b64:	9201      	str	r2, [sp, #4]
   25b66:	44e2      	add	sl, ip
   25b68:	1a89      	subs	r1, r1, r2
   25b6a:	4454      	add	r4, sl
   25b6c:	1b09      	subs	r1, r1, r4
   25b6e:	f3c1 0b0b 	ubfx	fp, r1, #0, #12
   25b72:	4659      	mov	r1, fp
   25b74:	f000 fce0 	bl	26538 <_sbrk_r>
   25b78:	1c42      	adds	r2, r0, #1
   25b7a:	4b7e      	ldr	r3, [pc, #504]	; (25d74 <_malloc_r+0x36c>)
   25b7c:	9a01      	ldr	r2, [sp, #4]
   25b7e:	f000 81f2 	beq.w	25f66 <_malloc_r+0x55e>
   25b82:	eba0 000a 	sub.w	r0, r0, sl
   25b86:	eb00 040b 	add.w	r4, r0, fp
   25b8a:	6818      	ldr	r0, [r3, #0]
   25b8c:	f044 0101 	orr.w	r1, r4, #1
   25b90:	45b8      	cmp	r8, r7
   25b92:	f8c7 a008 	str.w	sl, [r7, #8]
   25b96:	4458      	add	r0, fp
   25b98:	f8ca 1004 	str.w	r1, [sl, #4]
   25b9c:	6018      	str	r0, [r3, #0]
   25b9e:	f000 81bc 	beq.w	25f1a <_malloc_r+0x512>
   25ba2:	f1b9 0f0f 	cmp.w	r9, #15
   25ba6:	f240 81ba 	bls.w	25f1e <_malloc_r+0x516>
   25baa:	f8d8 2004 	ldr.w	r2, [r8, #4]
   25bae:	f1a9 010c 	sub.w	r1, r9, #12
   25bb2:	f04f 0c05 	mov.w	ip, #5
   25bb6:	f021 0107 	bic.w	r1, r1, #7
   25bba:	f002 0201 	and.w	r2, r2, #1
   25bbe:	eb08 0401 	add.w	r4, r8, r1
   25bc2:	430a      	orrs	r2, r1
   25bc4:	290f      	cmp	r1, #15
   25bc6:	f8c8 2004 	str.w	r2, [r8, #4]
   25bca:	e9c4 cc01 	strd	ip, ip, [r4, #4]
   25bce:	f200 81be 	bhi.w	25f4e <_malloc_r+0x546>
   25bd2:	f8da 1004 	ldr.w	r1, [sl, #4]
   25bd6:	46d0      	mov	r8, sl
   25bd8:	4b67      	ldr	r3, [pc, #412]	; (25d78 <_malloc_r+0x370>)
   25bda:	681a      	ldr	r2, [r3, #0]
   25bdc:	4282      	cmp	r2, r0
   25bde:	bf38      	it	cc
   25be0:	6018      	strcc	r0, [r3, #0]
   25be2:	4b66      	ldr	r3, [pc, #408]	; (25d7c <_malloc_r+0x374>)
   25be4:	681a      	ldr	r2, [r3, #0]
   25be6:	4282      	cmp	r2, r0
   25be8:	bf38      	it	cc
   25bea:	6018      	strcc	r0, [r3, #0]
   25bec:	f021 0103 	bic.w	r1, r1, #3
   25bf0:	42a9      	cmp	r1, r5
   25bf2:	eba1 0205 	sub.w	r2, r1, r5
   25bf6:	d302      	bcc.n	25bfe <_malloc_r+0x1f6>
   25bf8:	2a0f      	cmp	r2, #15
   25bfa:	f300 808e 	bgt.w	25d1a <_malloc_r+0x312>
   25bfe:	4630      	mov	r0, r6
   25c00:	2400      	movs	r4, #0
   25c02:	f000 fa91 	bl	26128 <__malloc_unlock>
   25c06:	e728      	b.n	25a5a <_malloc_r+0x52>
   25c08:	2400      	movs	r4, #0
   25c0a:	230c      	movs	r3, #12
   25c0c:	4620      	mov	r0, r4
   25c0e:	6033      	str	r3, [r6, #0]
   25c10:	b003      	add	sp, #12
   25c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c16:	68da      	ldr	r2, [r3, #12]
   25c18:	4293      	cmp	r3, r2
   25c1a:	f47f af0d 	bne.w	25a38 <_malloc_r+0x30>
   25c1e:	3002      	adds	r0, #2
   25c20:	f8d7 c010 	ldr.w	ip, [r7, #16]
   25c24:	f8df e158 	ldr.w	lr, [pc, #344]	; 25d80 <_malloc_r+0x378>
   25c28:	45f4      	cmp	ip, lr
   25c2a:	f43f af51 	beq.w	25ad0 <_malloc_r+0xc8>
   25c2e:	f8dc 2004 	ldr.w	r2, [ip, #4]
   25c32:	f022 0203 	bic.w	r2, r2, #3
   25c36:	1b53      	subs	r3, r2, r5
   25c38:	2b0f      	cmp	r3, #15
   25c3a:	f300 80ee 	bgt.w	25e1a <_malloc_r+0x412>
   25c3e:	2b00      	cmp	r3, #0
   25c40:	e9c7 ee04 	strd	lr, lr, [r7, #16]
   25c44:	da5e      	bge.n	25d04 <_malloc_r+0x2fc>
   25c46:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   25c4a:	f080 809b 	bcs.w	25d84 <_malloc_r+0x37c>
   25c4e:	2301      	movs	r3, #1
   25c50:	ea4f 08d2 	mov.w	r8, r2, lsr #3
   25c54:	0952      	lsrs	r2, r2, #5
   25c56:	6879      	ldr	r1, [r7, #4]
   25c58:	4498      	add	r8, r3
   25c5a:	fa03 f202 	lsl.w	r2, r3, r2
   25c5e:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   25c62:	f857 4038 	ldr.w	r4, [r7, r8, lsl #3]
   25c66:	430a      	orrs	r2, r1
   25c68:	3b08      	subs	r3, #8
   25c6a:	f8cc 4008 	str.w	r4, [ip, #8]
   25c6e:	607a      	str	r2, [r7, #4]
   25c70:	f8cc 300c 	str.w	r3, [ip, #12]
   25c74:	f847 c038 	str.w	ip, [r7, r8, lsl #3]
   25c78:	f8c4 c00c 	str.w	ip, [r4, #12]
   25c7c:	1083      	asrs	r3, r0, #2
   25c7e:	2401      	movs	r4, #1
   25c80:	409c      	lsls	r4, r3
   25c82:	4294      	cmp	r4, r2
   25c84:	f63f af2b 	bhi.w	25ade <_malloc_r+0xd6>
   25c88:	4214      	tst	r4, r2
   25c8a:	d105      	bne.n	25c98 <_malloc_r+0x290>
   25c8c:	f020 0003 	bic.w	r0, r0, #3
   25c90:	0064      	lsls	r4, r4, #1
   25c92:	3004      	adds	r0, #4
   25c94:	4214      	tst	r4, r2
   25c96:	d0fb      	beq.n	25c90 <_malloc_r+0x288>
   25c98:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   25c9c:	4680      	mov	r8, r0
   25c9e:	46cc      	mov	ip, r9
   25ca0:	f8dc 300c 	ldr.w	r3, [ip, #12]
   25ca4:	459c      	cmp	ip, r3
   25ca6:	d107      	bne.n	25cb8 <_malloc_r+0x2b0>
   25ca8:	e09b      	b.n	25de2 <_malloc_r+0x3da>
   25caa:	2a00      	cmp	r2, #0
   25cac:	f280 80a2 	bge.w	25df4 <_malloc_r+0x3ec>
   25cb0:	68db      	ldr	r3, [r3, #12]
   25cb2:	459c      	cmp	ip, r3
   25cb4:	f000 8095 	beq.w	25de2 <_malloc_r+0x3da>
   25cb8:	6859      	ldr	r1, [r3, #4]
   25cba:	f021 0103 	bic.w	r1, r1, #3
   25cbe:	1b4a      	subs	r2, r1, r5
   25cc0:	2a0f      	cmp	r2, #15
   25cc2:	ddf2      	ble.n	25caa <_malloc_r+0x2a2>
   25cc4:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   25cc8:	f045 0401 	orr.w	r4, r5, #1
   25ccc:	f042 0801 	orr.w	r8, r2, #1
   25cd0:	441d      	add	r5, r3
   25cd2:	4630      	mov	r0, r6
   25cd4:	689e      	ldr	r6, [r3, #8]
   25cd6:	605c      	str	r4, [r3, #4]
   25cd8:	f103 0408 	add.w	r4, r3, #8
   25cdc:	f8c6 c00c 	str.w	ip, [r6, #12]
   25ce0:	f8cc 6008 	str.w	r6, [ip, #8]
   25ce4:	e9c7 5504 	strd	r5, r5, [r7, #16]
   25ce8:	e9c5 ee02 	strd	lr, lr, [r5, #8]
   25cec:	f8c5 8004 	str.w	r8, [r5, #4]
   25cf0:	505a      	str	r2, [r3, r1]
   25cf2:	f000 fa19 	bl	26128 <__malloc_unlock>
   25cf6:	e6b0      	b.n	25a5a <_malloc_r+0x52>
   25cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
   25cfc:	2040      	movs	r0, #64	; 0x40
   25cfe:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   25d02:	e6c8      	b.n	25a96 <_malloc_r+0x8e>
   25d04:	4462      	add	r2, ip
   25d06:	4630      	mov	r0, r6
   25d08:	f10c 0408 	add.w	r4, ip, #8
   25d0c:	6853      	ldr	r3, [r2, #4]
   25d0e:	f043 0301 	orr.w	r3, r3, #1
   25d12:	6053      	str	r3, [r2, #4]
   25d14:	f000 fa08 	bl	26128 <__malloc_unlock>
   25d18:	e69f      	b.n	25a5a <_malloc_r+0x52>
   25d1a:	f045 0301 	orr.w	r3, r5, #1
   25d1e:	f042 0201 	orr.w	r2, r2, #1
   25d22:	4445      	add	r5, r8
   25d24:	f108 0408 	add.w	r4, r8, #8
   25d28:	f8c8 3004 	str.w	r3, [r8, #4]
   25d2c:	4630      	mov	r0, r6
   25d2e:	60bd      	str	r5, [r7, #8]
   25d30:	606a      	str	r2, [r5, #4]
   25d32:	f000 f9f9 	bl	26128 <__malloc_unlock>
   25d36:	4620      	mov	r0, r4
   25d38:	b003      	add	sp, #12
   25d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d3e:	441a      	add	r2, r3
   25d40:	f103 0408 	add.w	r4, r3, #8
   25d44:	4630      	mov	r0, r6
   25d46:	6851      	ldr	r1, [r2, #4]
   25d48:	e9d3 7502 	ldrd	r7, r5, [r3, #8]
   25d4c:	f041 0101 	orr.w	r1, r1, #1
   25d50:	60fd      	str	r5, [r7, #12]
   25d52:	60af      	str	r7, [r5, #8]
   25d54:	6051      	str	r1, [r2, #4]
   25d56:	f000 f9e7 	bl	26128 <__malloc_unlock>
   25d5a:	4620      	mov	r0, r4
   25d5c:	b003      	add	sp, #12
   25d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d62:	bf00      	nop
   25d64:	200204dc 	.word	0x200204dc
   25d68:	200208e4 	.word	0x200208e4
   25d6c:	20024284 	.word	0x20024284
   25d70:	fffff000 	.word	0xfffff000
   25d74:	20024254 	.word	0x20024254
   25d78:	2002427c 	.word	0x2002427c
   25d7c:	20024280 	.word	0x20024280
   25d80:	200204e4 	.word	0x200204e4
   25d84:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   25d88:	ea4f 2352 	mov.w	r3, r2, lsr #9
   25d8c:	d359      	bcc.n	25e42 <_malloc_r+0x43a>
   25d8e:	2b14      	cmp	r3, #20
   25d90:	f200 80b1 	bhi.w	25ef6 <_malloc_r+0x4ee>
   25d94:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   25d98:	335b      	adds	r3, #91	; 0x5b
   25d9a:	00c9      	lsls	r1, r1, #3
   25d9c:	187c      	adds	r4, r7, r1
   25d9e:	5879      	ldr	r1, [r7, r1]
   25da0:	3c08      	subs	r4, #8
   25da2:	428c      	cmp	r4, r1
   25da4:	f000 808c 	beq.w	25ec0 <_malloc_r+0x4b8>
   25da8:	684b      	ldr	r3, [r1, #4]
   25daa:	f023 0303 	bic.w	r3, r3, #3
   25dae:	4293      	cmp	r3, r2
   25db0:	d902      	bls.n	25db8 <_malloc_r+0x3b0>
   25db2:	6889      	ldr	r1, [r1, #8]
   25db4:	428c      	cmp	r4, r1
   25db6:	d1f7      	bne.n	25da8 <_malloc_r+0x3a0>
   25db8:	68cc      	ldr	r4, [r1, #12]
   25dba:	687a      	ldr	r2, [r7, #4]
   25dbc:	e9cc 1402 	strd	r1, r4, [ip, #8]
   25dc0:	f8c4 c008 	str.w	ip, [r4, #8]
   25dc4:	f8c1 c00c 	str.w	ip, [r1, #12]
   25dc8:	e758      	b.n	25c7c <_malloc_r+0x274>
   25dca:	2b14      	cmp	r3, #20
   25dcc:	d93f      	bls.n	25e4e <_malloc_r+0x446>
   25dce:	2b54      	cmp	r3, #84	; 0x54
   25dd0:	f200 8099 	bhi.w	25f06 <_malloc_r+0x4fe>
   25dd4:	0b2b      	lsrs	r3, r5, #12
   25dd6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   25dda:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   25dde:	00c3      	lsls	r3, r0, #3
   25de0:	e659      	b.n	25a96 <_malloc_r+0x8e>
   25de2:	f108 0801 	add.w	r8, r8, #1
   25de6:	f10c 0c08 	add.w	ip, ip, #8
   25dea:	f018 0f03 	tst.w	r8, #3
   25dee:	f47f af57 	bne.w	25ca0 <_malloc_r+0x298>
   25df2:	e037      	b.n	25e64 <_malloc_r+0x45c>
   25df4:	4419      	add	r1, r3
   25df6:	68da      	ldr	r2, [r3, #12]
   25df8:	461c      	mov	r4, r3
   25dfa:	4630      	mov	r0, r6
   25dfc:	684b      	ldr	r3, [r1, #4]
   25dfe:	f854 5f08 	ldr.w	r5, [r4, #8]!
   25e02:	f043 0301 	orr.w	r3, r3, #1
   25e06:	604b      	str	r3, [r1, #4]
   25e08:	60ea      	str	r2, [r5, #12]
   25e0a:	6095      	str	r5, [r2, #8]
   25e0c:	f000 f98c 	bl	26128 <__malloc_unlock>
   25e10:	e623      	b.n	25a5a <_malloc_r+0x52>
   25e12:	08e8      	lsrs	r0, r5, #3
   25e14:	f105 0308 	add.w	r3, r5, #8
   25e18:	e606      	b.n	25a28 <_malloc_r+0x20>
   25e1a:	f045 0401 	orr.w	r4, r5, #1
   25e1e:	f043 0101 	orr.w	r1, r3, #1
   25e22:	4465      	add	r5, ip
   25e24:	4630      	mov	r0, r6
   25e26:	f8cc 4004 	str.w	r4, [ip, #4]
   25e2a:	f10c 0408 	add.w	r4, ip, #8
   25e2e:	e9c7 5504 	strd	r5, r5, [r7, #16]
   25e32:	e9c5 ee02 	strd	lr, lr, [r5, #8]
   25e36:	6069      	str	r1, [r5, #4]
   25e38:	f84c 3002 	str.w	r3, [ip, r2]
   25e3c:	f000 f974 	bl	26128 <__malloc_unlock>
   25e40:	e60b      	b.n	25a5a <_malloc_r+0x52>
   25e42:	0993      	lsrs	r3, r2, #6
   25e44:	f103 0139 	add.w	r1, r3, #57	; 0x39
   25e48:	3338      	adds	r3, #56	; 0x38
   25e4a:	00c9      	lsls	r1, r1, #3
   25e4c:	e7a6      	b.n	25d9c <_malloc_r+0x394>
   25e4e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   25e52:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   25e56:	00c3      	lsls	r3, r0, #3
   25e58:	e61d      	b.n	25a96 <_malloc_r+0x8e>
   25e5a:	f859 3908 	ldr.w	r3, [r9], #-8
   25e5e:	454b      	cmp	r3, r9
   25e60:	f040 809c 	bne.w	25f9c <_malloc_r+0x594>
   25e64:	f010 0f03 	tst.w	r0, #3
   25e68:	f100 30ff 	add.w	r0, r0, #4294967295
   25e6c:	d1f5      	bne.n	25e5a <_malloc_r+0x452>
   25e6e:	687b      	ldr	r3, [r7, #4]
   25e70:	ea23 0304 	bic.w	r3, r3, r4
   25e74:	607b      	str	r3, [r7, #4]
   25e76:	0064      	lsls	r4, r4, #1
   25e78:	f43f ae31 	beq.w	25ade <_malloc_r+0xd6>
   25e7c:	429c      	cmp	r4, r3
   25e7e:	d903      	bls.n	25e88 <_malloc_r+0x480>
   25e80:	e62d      	b.n	25ade <_malloc_r+0xd6>
   25e82:	0064      	lsls	r4, r4, #1
   25e84:	f108 0804 	add.w	r8, r8, #4
   25e88:	421c      	tst	r4, r3
   25e8a:	d0fa      	beq.n	25e82 <_malloc_r+0x47a>
   25e8c:	4640      	mov	r0, r8
   25e8e:	e703      	b.n	25c98 <_malloc_r+0x290>
   25e90:	f8d7 8008 	ldr.w	r8, [r7, #8]
   25e94:	f8d8 1004 	ldr.w	r1, [r8, #4]
   25e98:	e6a8      	b.n	25bec <_malloc_r+0x1e4>
   25e9a:	f3cb 010b 	ubfx	r1, fp, #0, #12
   25e9e:	2900      	cmp	r1, #0
   25ea0:	f47f ae4f 	bne.w	25b42 <_malloc_r+0x13a>
   25ea4:	444c      	add	r4, r9
   25ea6:	f8d7 8008 	ldr.w	r8, [r7, #8]
   25eaa:	f044 0101 	orr.w	r1, r4, #1
   25eae:	f8c8 1004 	str.w	r1, [r8, #4]
   25eb2:	e691      	b.n	25bd8 <_malloc_r+0x1d0>
   25eb4:	f8c2 a000 	str.w	sl, [r2]
   25eb8:	e64b      	b.n	25b52 <_malloc_r+0x14a>
   25eba:	f103 0410 	add.w	r4, r3, #16
   25ebe:	e62a      	b.n	25b16 <_malloc_r+0x10e>
   25ec0:	109a      	asrs	r2, r3, #2
   25ec2:	f04f 0801 	mov.w	r8, #1
   25ec6:	687b      	ldr	r3, [r7, #4]
   25ec8:	fa08 f202 	lsl.w	r2, r8, r2
   25ecc:	431a      	orrs	r2, r3
   25ece:	607a      	str	r2, [r7, #4]
   25ed0:	e774      	b.n	25dbc <_malloc_r+0x3b4>
   25ed2:	eb0a 0b04 	add.w	fp, sl, r4
   25ed6:	4630      	mov	r0, r6
   25ed8:	9201      	str	r2, [sp, #4]
   25eda:	f1cb 0b00 	rsb	fp, fp, #0
   25ede:	f3cb 0b0b 	ubfx	fp, fp, #0, #12
   25ee2:	4659      	mov	r1, fp
   25ee4:	f000 fb28 	bl	26538 <_sbrk_r>
   25ee8:	1c43      	adds	r3, r0, #1
   25eea:	9a01      	ldr	r2, [sp, #4]
   25eec:	4b2c      	ldr	r3, [pc, #176]	; (25fa0 <_malloc_r+0x598>)
   25eee:	f47f ae48 	bne.w	25b82 <_malloc_r+0x17a>
   25ef2:	4693      	mov	fp, r2
   25ef4:	e649      	b.n	25b8a <_malloc_r+0x182>
   25ef6:	2b54      	cmp	r3, #84	; 0x54
   25ef8:	d815      	bhi.n	25f26 <_malloc_r+0x51e>
   25efa:	0b13      	lsrs	r3, r2, #12
   25efc:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   25f00:	336e      	adds	r3, #110	; 0x6e
   25f02:	00c9      	lsls	r1, r1, #3
   25f04:	e74a      	b.n	25d9c <_malloc_r+0x394>
   25f06:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   25f0a:	d815      	bhi.n	25f38 <_malloc_r+0x530>
   25f0c:	0beb      	lsrs	r3, r5, #15
   25f0e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   25f12:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   25f16:	00c3      	lsls	r3, r0, #3
   25f18:	e5bd      	b.n	25a96 <_malloc_r+0x8e>
   25f1a:	46d0      	mov	r8, sl
   25f1c:	e65c      	b.n	25bd8 <_malloc_r+0x1d0>
   25f1e:	2301      	movs	r3, #1
   25f20:	f8ca 3004 	str.w	r3, [sl, #4]
   25f24:	e66b      	b.n	25bfe <_malloc_r+0x1f6>
   25f26:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   25f2a:	d823      	bhi.n	25f74 <_malloc_r+0x56c>
   25f2c:	0bd3      	lsrs	r3, r2, #15
   25f2e:	f103 0178 	add.w	r1, r3, #120	; 0x78
   25f32:	3377      	adds	r3, #119	; 0x77
   25f34:	00c9      	lsls	r1, r1, #3
   25f36:	e731      	b.n	25d9c <_malloc_r+0x394>
   25f38:	f240 5254 	movw	r2, #1364	; 0x554
   25f3c:	4293      	cmp	r3, r2
   25f3e:	d823      	bhi.n	25f88 <_malloc_r+0x580>
   25f40:	0cab      	lsrs	r3, r5, #18
   25f42:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   25f46:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   25f4a:	00c3      	lsls	r3, r0, #3
   25f4c:	e5a3      	b.n	25a96 <_malloc_r+0x8e>
   25f4e:	f108 0108 	add.w	r1, r8, #8
   25f52:	4630      	mov	r0, r6
   25f54:	f003 fec2 	bl	29cdc <_free_r>
   25f58:	f8d7 8008 	ldr.w	r8, [r7, #8]
   25f5c:	4b10      	ldr	r3, [pc, #64]	; (25fa0 <_malloc_r+0x598>)
   25f5e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   25f62:	6818      	ldr	r0, [r3, #0]
   25f64:	e638      	b.n	25bd8 <_malloc_r+0x1d0>
   25f66:	3a08      	subs	r2, #8
   25f68:	f04f 0b00 	mov.w	fp, #0
   25f6c:	4414      	add	r4, r2
   25f6e:	eba4 040a 	sub.w	r4, r4, sl
   25f72:	e60a      	b.n	25b8a <_malloc_r+0x182>
   25f74:	f240 5154 	movw	r1, #1364	; 0x554
   25f78:	428b      	cmp	r3, r1
   25f7a:	d80b      	bhi.n	25f94 <_malloc_r+0x58c>
   25f7c:	0c93      	lsrs	r3, r2, #18
   25f7e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   25f82:	337c      	adds	r3, #124	; 0x7c
   25f84:	00c9      	lsls	r1, r1, #3
   25f86:	e709      	b.n	25d9c <_malloc_r+0x394>
   25f88:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   25f8c:	207f      	movs	r0, #127	; 0x7f
   25f8e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   25f92:	e580      	b.n	25a96 <_malloc_r+0x8e>
   25f94:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   25f98:	237e      	movs	r3, #126	; 0x7e
   25f9a:	e6ff      	b.n	25d9c <_malloc_r+0x394>
   25f9c:	687b      	ldr	r3, [r7, #4]
   25f9e:	e76a      	b.n	25e76 <_malloc_r+0x46e>
   25fa0:	20024254 	.word	0x20024254

00025fa4 <memchr>:
   25fa4:	b470      	push	{r4, r5, r6}
   25fa6:	0784      	lsls	r4, r0, #30
   25fa8:	b2ce      	uxtb	r6, r1
   25faa:	d012      	beq.n	25fd2 <memchr+0x2e>
   25fac:	4603      	mov	r3, r0
   25fae:	1e55      	subs	r5, r2, #1
   25fb0:	b922      	cbnz	r2, 25fbc <memchr+0x18>
   25fb2:	e00b      	b.n	25fcc <memchr+0x28>
   25fb4:	079a      	lsls	r2, r3, #30
   25fb6:	d00e      	beq.n	25fd6 <memchr+0x32>
   25fb8:	3d01      	subs	r5, #1
   25fba:	d307      	bcc.n	25fcc <memchr+0x28>
   25fbc:	4618      	mov	r0, r3
   25fbe:	f813 2b01 	ldrb.w	r2, [r3], #1
   25fc2:	42b2      	cmp	r2, r6
   25fc4:	461c      	mov	r4, r3
   25fc6:	d1f5      	bne.n	25fb4 <memchr+0x10>
   25fc8:	bc70      	pop	{r4, r5, r6}
   25fca:	4770      	bx	lr
   25fcc:	2000      	movs	r0, #0
   25fce:	bc70      	pop	{r4, r5, r6}
   25fd0:	4770      	bx	lr
   25fd2:	4604      	mov	r4, r0
   25fd4:	4615      	mov	r5, r2
   25fd6:	2d03      	cmp	r5, #3
   25fd8:	d80c      	bhi.n	25ff4 <memchr+0x50>
   25fda:	2d00      	cmp	r5, #0
   25fdc:	d0f6      	beq.n	25fcc <memchr+0x28>
   25fde:	1963      	adds	r3, r4, r5
   25fe0:	e001      	b.n	25fe6 <memchr+0x42>
   25fe2:	429c      	cmp	r4, r3
   25fe4:	d0f2      	beq.n	25fcc <memchr+0x28>
   25fe6:	4620      	mov	r0, r4
   25fe8:	f814 2b01 	ldrb.w	r2, [r4], #1
   25fec:	42b2      	cmp	r2, r6
   25fee:	d1f8      	bne.n	25fe2 <memchr+0x3e>
   25ff0:	bc70      	pop	{r4, r5, r6}
   25ff2:	4770      	bx	lr
   25ff4:	020a      	lsls	r2, r1, #8
   25ff6:	4621      	mov	r1, r4
   25ff8:	b292      	uxth	r2, r2
   25ffa:	4332      	orrs	r2, r6
   25ffc:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   26000:	460c      	mov	r4, r1
   26002:	3104      	adds	r1, #4
   26004:	6823      	ldr	r3, [r4, #0]
   26006:	4053      	eors	r3, r2
   26008:	f1a3 3001 	sub.w	r0, r3, #16843009	; 0x1010101
   2600c:	ea20 0303 	bic.w	r3, r0, r3
   26010:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   26014:	d1e3      	bne.n	25fde <memchr+0x3a>
   26016:	3d04      	subs	r5, #4
   26018:	460c      	mov	r4, r1
   2601a:	2d03      	cmp	r5, #3
   2601c:	d8f0      	bhi.n	26000 <memchr+0x5c>
   2601e:	e7dc      	b.n	25fda <memchr+0x36>

00026020 <memcmp>:
   26020:	2a03      	cmp	r2, #3
   26022:	b470      	push	{r4, r5, r6}
   26024:	d912      	bls.n	2604c <memcmp+0x2c>
   26026:	ea40 0501 	orr.w	r5, r0, r1
   2602a:	4604      	mov	r4, r0
   2602c:	460b      	mov	r3, r1
   2602e:	07ad      	lsls	r5, r5, #30
   26030:	d11d      	bne.n	2606e <memcmp+0x4e>
   26032:	4619      	mov	r1, r3
   26034:	4620      	mov	r0, r4
   26036:	f853 5b04 	ldr.w	r5, [r3], #4
   2603a:	f854 6b04 	ldr.w	r6, [r4], #4
   2603e:	42ae      	cmp	r6, r5
   26040:	d115      	bne.n	2606e <memcmp+0x4e>
   26042:	3a04      	subs	r2, #4
   26044:	4620      	mov	r0, r4
   26046:	4619      	mov	r1, r3
   26048:	2a03      	cmp	r2, #3
   2604a:	d8f2      	bhi.n	26032 <memcmp+0x12>
   2604c:	1e56      	subs	r6, r2, #1
   2604e:	b19a      	cbz	r2, 26078 <memcmp+0x58>
   26050:	3901      	subs	r1, #1
   26052:	1e44      	subs	r4, r0, #1
   26054:	e001      	b.n	2605a <memcmp+0x3a>
   26056:	18c3      	adds	r3, r0, r3
   26058:	d00b      	beq.n	26072 <memcmp+0x52>
   2605a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
   2605e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   26062:	1b33      	subs	r3, r6, r4
   26064:	4295      	cmp	r5, r2
   26066:	d0f6      	beq.n	26056 <memcmp+0x36>
   26068:	1aa8      	subs	r0, r5, r2
   2606a:	bc70      	pop	{r4, r5, r6}
   2606c:	4770      	bx	lr
   2606e:	1e56      	subs	r6, r2, #1
   26070:	e7ee      	b.n	26050 <memcmp+0x30>
   26072:	4618      	mov	r0, r3
   26074:	bc70      	pop	{r4, r5, r6}
   26076:	4770      	bx	lr
   26078:	4610      	mov	r0, r2
   2607a:	e7f6      	b.n	2606a <memcmp+0x4a>

0002607c <memset>:
   2607c:	b4f0      	push	{r4, r5, r6, r7}
   2607e:	0786      	lsls	r6, r0, #30
   26080:	d046      	beq.n	26110 <memset+0x94>
   26082:	1e54      	subs	r4, r2, #1
   26084:	2a00      	cmp	r2, #0
   26086:	d03c      	beq.n	26102 <memset+0x86>
   26088:	b2ca      	uxtb	r2, r1
   2608a:	4603      	mov	r3, r0
   2608c:	e001      	b.n	26092 <memset+0x16>
   2608e:	3c01      	subs	r4, #1
   26090:	d337      	bcc.n	26102 <memset+0x86>
   26092:	f803 2b01 	strb.w	r2, [r3], #1
   26096:	079d      	lsls	r5, r3, #30
   26098:	d1f9      	bne.n	2608e <memset+0x12>
   2609a:	2c03      	cmp	r4, #3
   2609c:	d92a      	bls.n	260f4 <memset+0x78>
   2609e:	b2cd      	uxtb	r5, r1
   260a0:	2c0f      	cmp	r4, #15
   260a2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   260a6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   260aa:	d934      	bls.n	26116 <memset+0x9a>
   260ac:	f1a4 0610 	sub.w	r6, r4, #16
   260b0:	f103 0720 	add.w	r7, r3, #32
   260b4:	f103 0210 	add.w	r2, r3, #16
   260b8:	f026 0c0f 	bic.w	ip, r6, #15
   260bc:	0936      	lsrs	r6, r6, #4
   260be:	4467      	add	r7, ip
   260c0:	e942 5504 	strd	r5, r5, [r2, #-16]
   260c4:	e942 5502 	strd	r5, r5, [r2, #-8]
   260c8:	3210      	adds	r2, #16
   260ca:	42ba      	cmp	r2, r7
   260cc:	d1f8      	bne.n	260c0 <memset+0x44>
   260ce:	1c72      	adds	r2, r6, #1
   260d0:	f014 0f0c 	tst.w	r4, #12
   260d4:	f004 060f 	and.w	r6, r4, #15
   260d8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   260dc:	d013      	beq.n	26106 <memset+0x8a>
   260de:	1f33      	subs	r3, r6, #4
   260e0:	f023 0303 	bic.w	r3, r3, #3
   260e4:	3304      	adds	r3, #4
   260e6:	4413      	add	r3, r2
   260e8:	f842 5b04 	str.w	r5, [r2], #4
   260ec:	4293      	cmp	r3, r2
   260ee:	d1fb      	bne.n	260e8 <memset+0x6c>
   260f0:	f006 0403 	and.w	r4, r6, #3
   260f4:	b12c      	cbz	r4, 26102 <memset+0x86>
   260f6:	b2ca      	uxtb	r2, r1
   260f8:	441c      	add	r4, r3
   260fa:	f803 2b01 	strb.w	r2, [r3], #1
   260fe:	429c      	cmp	r4, r3
   26100:	d1fb      	bne.n	260fa <memset+0x7e>
   26102:	bcf0      	pop	{r4, r5, r6, r7}
   26104:	4770      	bx	lr
   26106:	4634      	mov	r4, r6
   26108:	4613      	mov	r3, r2
   2610a:	2c00      	cmp	r4, #0
   2610c:	d1f3      	bne.n	260f6 <memset+0x7a>
   2610e:	e7f8      	b.n	26102 <memset+0x86>
   26110:	4614      	mov	r4, r2
   26112:	4603      	mov	r3, r0
   26114:	e7c1      	b.n	2609a <memset+0x1e>
   26116:	461a      	mov	r2, r3
   26118:	4626      	mov	r6, r4
   2611a:	e7e0      	b.n	260de <memset+0x62>

0002611c <__malloc_lock>:
   2611c:	4801      	ldr	r0, [pc, #4]	; (26124 <__malloc_lock+0x8>)
   2611e:	f004 bc83 	b.w	2aa28 <__retarget_lock_acquire_recursive>
   26122:	bf00      	nop
   26124:	200263f8 	.word	0x200263f8

00026128 <__malloc_unlock>:
   26128:	4801      	ldr	r0, [pc, #4]	; (26130 <__malloc_unlock+0x8>)
   2612a:	f004 bc7f 	b.w	2aa2c <__retarget_lock_release_recursive>
   2612e:	bf00      	nop
   26130:	200263f8 	.word	0x200263f8

00026134 <realloc>:
   26134:	4b02      	ldr	r3, [pc, #8]	; (26140 <realloc+0xc>)
   26136:	460a      	mov	r2, r1
   26138:	4601      	mov	r1, r0
   2613a:	6818      	ldr	r0, [r3, #0]
   2613c:	f000 b802 	b.w	26144 <_realloc_r>
   26140:	200204d8 	.word	0x200204d8

00026144 <_realloc_r>:
   26144:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26148:	4617      	mov	r7, r2
   2614a:	2900      	cmp	r1, #0
   2614c:	f000 80ba 	beq.w	262c4 <_realloc_r+0x180>
   26150:	460c      	mov	r4, r1
   26152:	f107 050b 	add.w	r5, r7, #11
   26156:	4680      	mov	r8, r0
   26158:	f7ff ffe0 	bl	2611c <__malloc_lock>
   2615c:	f854 1c04 	ldr.w	r1, [r4, #-4]
   26160:	2d16      	cmp	r5, #22
   26162:	f1a4 0908 	sub.w	r9, r4, #8
   26166:	f021 0603 	bic.w	r6, r1, #3
   2616a:	d85d      	bhi.n	26228 <_realloc_r+0xe4>
   2616c:	2210      	movs	r2, #16
   2616e:	2300      	movs	r3, #0
   26170:	4615      	mov	r5, r2
   26172:	42bd      	cmp	r5, r7
   26174:	f0c0 80c2 	bcc.w	262fc <_realloc_r+0x1b8>
   26178:	2b00      	cmp	r3, #0
   2617a:	f040 80bf 	bne.w	262fc <_realloc_r+0x1b8>
   2617e:	4296      	cmp	r6, r2
   26180:	da7e      	bge.n	26280 <_realloc_r+0x13c>
   26182:	4bc6      	ldr	r3, [pc, #792]	; (2649c <_realloc_r+0x358>)
   26184:	eb09 0006 	add.w	r0, r9, r6
   26188:	f8d3 c008 	ldr.w	ip, [r3, #8]
   2618c:	4584      	cmp	ip, r0
   2618e:	f000 80bc 	beq.w	2630a <_realloc_r+0x1c6>
   26192:	f8d0 c004 	ldr.w	ip, [r0, #4]
   26196:	f02c 0301 	bic.w	r3, ip, #1
   2619a:	4403      	add	r3, r0
   2619c:	685b      	ldr	r3, [r3, #4]
   2619e:	07db      	lsls	r3, r3, #31
   261a0:	f100 8085 	bmi.w	262ae <_realloc_r+0x16a>
   261a4:	f02c 0c03 	bic.w	ip, ip, #3
   261a8:	eb06 030c 	add.w	r3, r6, ip
   261ac:	4293      	cmp	r3, r2
   261ae:	f280 80fa 	bge.w	263a6 <_realloc_r+0x262>
   261b2:	07cb      	lsls	r3, r1, #31
   261b4:	d40f      	bmi.n	261d6 <_realloc_r+0x92>
   261b6:	f854 3c08 	ldr.w	r3, [r4, #-8]
   261ba:	eba9 0a03 	sub.w	sl, r9, r3
   261be:	f8da 3004 	ldr.w	r3, [sl, #4]
   261c2:	f023 0103 	bic.w	r1, r3, #3
   261c6:	448c      	add	ip, r1
   261c8:	44b4      	add	ip, r6
   261ca:	4594      	cmp	ip, r2
   261cc:	da31      	bge.n	26232 <_realloc_r+0xee>
   261ce:	1873      	adds	r3, r6, r1
   261d0:	4293      	cmp	r3, r2
   261d2:	f280 80ff 	bge.w	263d4 <_realloc_r+0x290>
   261d6:	4639      	mov	r1, r7
   261d8:	4640      	mov	r0, r8
   261da:	f7ff fc15 	bl	25a08 <_malloc_r>
   261de:	4607      	mov	r7, r0
   261e0:	b1e0      	cbz	r0, 2621c <_realloc_r+0xd8>
   261e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   261e6:	f1a0 0208 	sub.w	r2, r0, #8
   261ea:	f023 0301 	bic.w	r3, r3, #1
   261ee:	444b      	add	r3, r9
   261f0:	4293      	cmp	r3, r2
   261f2:	f000 80de 	beq.w	263b2 <_realloc_r+0x26e>
   261f6:	1f32      	subs	r2, r6, #4
   261f8:	2a24      	cmp	r2, #36	; 0x24
   261fa:	f200 810c 	bhi.w	26416 <_realloc_r+0x2d2>
   261fe:	2a13      	cmp	r2, #19
   26200:	f200 80dd 	bhi.w	263be <_realloc_r+0x27a>
   26204:	4603      	mov	r3, r0
   26206:	4622      	mov	r2, r4
   26208:	6811      	ldr	r1, [r2, #0]
   2620a:	6019      	str	r1, [r3, #0]
   2620c:	6851      	ldr	r1, [r2, #4]
   2620e:	6059      	str	r1, [r3, #4]
   26210:	6892      	ldr	r2, [r2, #8]
   26212:	609a      	str	r2, [r3, #8]
   26214:	4621      	mov	r1, r4
   26216:	4640      	mov	r0, r8
   26218:	f003 fd60 	bl	29cdc <_free_r>
   2621c:	4640      	mov	r0, r8
   2621e:	f7ff ff83 	bl	26128 <__malloc_unlock>
   26222:	4638      	mov	r0, r7
   26224:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26228:	f025 0507 	bic.w	r5, r5, #7
   2622c:	462a      	mov	r2, r5
   2622e:	0feb      	lsrs	r3, r5, #31
   26230:	e79f      	b.n	26172 <_realloc_r+0x2e>
   26232:	68c3      	ldr	r3, [r0, #12]
   26234:	4657      	mov	r7, sl
   26236:	6881      	ldr	r1, [r0, #8]
   26238:	1f32      	subs	r2, r6, #4
   2623a:	60cb      	str	r3, [r1, #12]
   2623c:	2a24      	cmp	r2, #36	; 0x24
   2623e:	6099      	str	r1, [r3, #8]
   26240:	f857 1f08 	ldr.w	r1, [r7, #8]!
   26244:	f8da 300c 	ldr.w	r3, [sl, #12]
   26248:	60cb      	str	r3, [r1, #12]
   2624a:	6099      	str	r1, [r3, #8]
   2624c:	f200 8112 	bhi.w	26474 <_realloc_r+0x330>
   26250:	2a13      	cmp	r2, #19
   26252:	f240 810d 	bls.w	26470 <_realloc_r+0x32c>
   26256:	6823      	ldr	r3, [r4, #0]
   26258:	2a1b      	cmp	r2, #27
   2625a:	f8ca 3008 	str.w	r3, [sl, #8]
   2625e:	6863      	ldr	r3, [r4, #4]
   26260:	f8ca 300c 	str.w	r3, [sl, #12]
   26264:	f200 8125 	bhi.w	264b2 <_realloc_r+0x36e>
   26268:	3408      	adds	r4, #8
   2626a:	f10a 0310 	add.w	r3, sl, #16
   2626e:	6822      	ldr	r2, [r4, #0]
   26270:	4666      	mov	r6, ip
   26272:	46d1      	mov	r9, sl
   26274:	601a      	str	r2, [r3, #0]
   26276:	6862      	ldr	r2, [r4, #4]
   26278:	605a      	str	r2, [r3, #4]
   2627a:	68a2      	ldr	r2, [r4, #8]
   2627c:	463c      	mov	r4, r7
   2627e:	609a      	str	r2, [r3, #8]
   26280:	1b73      	subs	r3, r6, r5
   26282:	2b0f      	cmp	r3, #15
   26284:	d823      	bhi.n	262ce <_realloc_r+0x18a>
   26286:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2628a:	eb09 0106 	add.w	r1, r9, r6
   2628e:	f002 0201 	and.w	r2, r2, #1
   26292:	4332      	orrs	r2, r6
   26294:	f8c9 2004 	str.w	r2, [r9, #4]
   26298:	684b      	ldr	r3, [r1, #4]
   2629a:	f043 0301 	orr.w	r3, r3, #1
   2629e:	604b      	str	r3, [r1, #4]
   262a0:	4640      	mov	r0, r8
   262a2:	4627      	mov	r7, r4
   262a4:	f7ff ff40 	bl	26128 <__malloc_unlock>
   262a8:	4638      	mov	r0, r7
   262aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262ae:	07c9      	lsls	r1, r1, #31
   262b0:	d491      	bmi.n	261d6 <_realloc_r+0x92>
   262b2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   262b6:	eba9 0a03 	sub.w	sl, r9, r3
   262ba:	f8da 1004 	ldr.w	r1, [sl, #4]
   262be:	f021 0103 	bic.w	r1, r1, #3
   262c2:	e784      	b.n	261ce <_realloc_r+0x8a>
   262c4:	4611      	mov	r1, r2
   262c6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   262ca:	f7ff bb9d 	b.w	25a08 <_malloc_r>
   262ce:	f8d9 1004 	ldr.w	r1, [r9, #4]
   262d2:	eb09 0205 	add.w	r2, r9, r5
   262d6:	444e      	add	r6, r9
   262d8:	f043 0301 	orr.w	r3, r3, #1
   262dc:	f001 0101 	and.w	r1, r1, #1
   262e0:	4640      	mov	r0, r8
   262e2:	430d      	orrs	r5, r1
   262e4:	f102 0108 	add.w	r1, r2, #8
   262e8:	f8c9 5004 	str.w	r5, [r9, #4]
   262ec:	6053      	str	r3, [r2, #4]
   262ee:	6873      	ldr	r3, [r6, #4]
   262f0:	f043 0301 	orr.w	r3, r3, #1
   262f4:	6073      	str	r3, [r6, #4]
   262f6:	f003 fcf1 	bl	29cdc <_free_r>
   262fa:	e7d1      	b.n	262a0 <_realloc_r+0x15c>
   262fc:	230c      	movs	r3, #12
   262fe:	2700      	movs	r7, #0
   26300:	f8c8 3000 	str.w	r3, [r8]
   26304:	4638      	mov	r0, r7
   26306:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2630a:	f8dc b004 	ldr.w	fp, [ip, #4]
   2630e:	f105 0010 	add.w	r0, r5, #16
   26312:	f02b 0b03 	bic.w	fp, fp, #3
   26316:	eb06 0c0b 	add.w	ip, r6, fp
   2631a:	4584      	cmp	ip, r0
   2631c:	f280 8094 	bge.w	26448 <_realloc_r+0x304>
   26320:	07c9      	lsls	r1, r1, #31
   26322:	f53f af58 	bmi.w	261d6 <_realloc_r+0x92>
   26326:	f854 1c08 	ldr.w	r1, [r4, #-8]
   2632a:	eba9 0a01 	sub.w	sl, r9, r1
   2632e:	f8da 1004 	ldr.w	r1, [sl, #4]
   26332:	f021 0103 	bic.w	r1, r1, #3
   26336:	448b      	add	fp, r1
   26338:	44b3      	add	fp, r6
   2633a:	4558      	cmp	r0, fp
   2633c:	f73f af47 	bgt.w	261ce <_realloc_r+0x8a>
   26340:	4657      	mov	r7, sl
   26342:	1f32      	subs	r2, r6, #4
   26344:	f8da 100c 	ldr.w	r1, [sl, #12]
   26348:	f857 0f08 	ldr.w	r0, [r7, #8]!
   2634c:	2a24      	cmp	r2, #36	; 0x24
   2634e:	60c1      	str	r1, [r0, #12]
   26350:	6088      	str	r0, [r1, #8]
   26352:	f200 80bc 	bhi.w	264ce <_realloc_r+0x38a>
   26356:	2a13      	cmp	r2, #19
   26358:	f240 80b7 	bls.w	264ca <_realloc_r+0x386>
   2635c:	6821      	ldr	r1, [r4, #0]
   2635e:	2a1b      	cmp	r2, #27
   26360:	f8ca 1008 	str.w	r1, [sl, #8]
   26364:	6861      	ldr	r1, [r4, #4]
   26366:	f8ca 100c 	str.w	r1, [sl, #12]
   2636a:	f200 80c1 	bhi.w	264f0 <_realloc_r+0x3ac>
   2636e:	3408      	adds	r4, #8
   26370:	f10a 0210 	add.w	r2, sl, #16
   26374:	6821      	ldr	r1, [r4, #0]
   26376:	6011      	str	r1, [r2, #0]
   26378:	6861      	ldr	r1, [r4, #4]
   2637a:	6051      	str	r1, [r2, #4]
   2637c:	68a1      	ldr	r1, [r4, #8]
   2637e:	6091      	str	r1, [r2, #8]
   26380:	ebab 0205 	sub.w	r2, fp, r5
   26384:	eb0a 0105 	add.w	r1, sl, r5
   26388:	4640      	mov	r0, r8
   2638a:	f042 0201 	orr.w	r2, r2, #1
   2638e:	6099      	str	r1, [r3, #8]
   26390:	604a      	str	r2, [r1, #4]
   26392:	f8da 3004 	ldr.w	r3, [sl, #4]
   26396:	f003 0301 	and.w	r3, r3, #1
   2639a:	431d      	orrs	r5, r3
   2639c:	f8ca 5004 	str.w	r5, [sl, #4]
   263a0:	f7ff fec2 	bl	26128 <__malloc_unlock>
   263a4:	e780      	b.n	262a8 <_realloc_r+0x164>
   263a6:	68c2      	ldr	r2, [r0, #12]
   263a8:	461e      	mov	r6, r3
   263aa:	6883      	ldr	r3, [r0, #8]
   263ac:	60da      	str	r2, [r3, #12]
   263ae:	6093      	str	r3, [r2, #8]
   263b0:	e766      	b.n	26280 <_realloc_r+0x13c>
   263b2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   263b6:	f023 0303 	bic.w	r3, r3, #3
   263ba:	441e      	add	r6, r3
   263bc:	e760      	b.n	26280 <_realloc_r+0x13c>
   263be:	6823      	ldr	r3, [r4, #0]
   263c0:	2a1b      	cmp	r2, #27
   263c2:	6003      	str	r3, [r0, #0]
   263c4:	6863      	ldr	r3, [r4, #4]
   263c6:	6043      	str	r3, [r0, #4]
   263c8:	d829      	bhi.n	2641e <_realloc_r+0x2da>
   263ca:	f104 0208 	add.w	r2, r4, #8
   263ce:	f100 0308 	add.w	r3, r0, #8
   263d2:	e719      	b.n	26208 <_realloc_r+0xc4>
   263d4:	4657      	mov	r7, sl
   263d6:	1f32      	subs	r2, r6, #4
   263d8:	f8da 100c 	ldr.w	r1, [sl, #12]
   263dc:	f857 0f08 	ldr.w	r0, [r7, #8]!
   263e0:	2a24      	cmp	r2, #36	; 0x24
   263e2:	60c1      	str	r1, [r0, #12]
   263e4:	6088      	str	r0, [r1, #8]
   263e6:	d827      	bhi.n	26438 <_realloc_r+0x2f4>
   263e8:	2a13      	cmp	r2, #19
   263ea:	d923      	bls.n	26434 <_realloc_r+0x2f0>
   263ec:	6821      	ldr	r1, [r4, #0]
   263ee:	2a1b      	cmp	r2, #27
   263f0:	f8ca 1008 	str.w	r1, [sl, #8]
   263f4:	6861      	ldr	r1, [r4, #4]
   263f6:	f8ca 100c 	str.w	r1, [sl, #12]
   263fa:	d843      	bhi.n	26484 <_realloc_r+0x340>
   263fc:	3408      	adds	r4, #8
   263fe:	f10a 0210 	add.w	r2, sl, #16
   26402:	6821      	ldr	r1, [r4, #0]
   26404:	461e      	mov	r6, r3
   26406:	46d1      	mov	r9, sl
   26408:	6011      	str	r1, [r2, #0]
   2640a:	6863      	ldr	r3, [r4, #4]
   2640c:	6053      	str	r3, [r2, #4]
   2640e:	68a3      	ldr	r3, [r4, #8]
   26410:	463c      	mov	r4, r7
   26412:	6093      	str	r3, [r2, #8]
   26414:	e734      	b.n	26280 <_realloc_r+0x13c>
   26416:	4621      	mov	r1, r4
   26418:	f004 fbd4 	bl	2abc4 <memmove>
   2641c:	e6fa      	b.n	26214 <_realloc_r+0xd0>
   2641e:	68a3      	ldr	r3, [r4, #8]
   26420:	2a24      	cmp	r2, #36	; 0x24
   26422:	6083      	str	r3, [r0, #8]
   26424:	68e3      	ldr	r3, [r4, #12]
   26426:	60c3      	str	r3, [r0, #12]
   26428:	d03a      	beq.n	264a0 <_realloc_r+0x35c>
   2642a:	f104 0210 	add.w	r2, r4, #16
   2642e:	f100 0310 	add.w	r3, r0, #16
   26432:	e6e9      	b.n	26208 <_realloc_r+0xc4>
   26434:	463a      	mov	r2, r7
   26436:	e7e4      	b.n	26402 <_realloc_r+0x2be>
   26438:	4621      	mov	r1, r4
   2643a:	4638      	mov	r0, r7
   2643c:	461e      	mov	r6, r3
   2643e:	46d1      	mov	r9, sl
   26440:	463c      	mov	r4, r7
   26442:	f004 fbbf 	bl	2abc4 <memmove>
   26446:	e71b      	b.n	26280 <_realloc_r+0x13c>
   26448:	ebac 0205 	sub.w	r2, ip, r5
   2644c:	eb09 0105 	add.w	r1, r9, r5
   26450:	4640      	mov	r0, r8
   26452:	4627      	mov	r7, r4
   26454:	f042 0201 	orr.w	r2, r2, #1
   26458:	6099      	str	r1, [r3, #8]
   2645a:	604a      	str	r2, [r1, #4]
   2645c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   26460:	f003 0301 	and.w	r3, r3, #1
   26464:	431d      	orrs	r5, r3
   26466:	f844 5c04 	str.w	r5, [r4, #-4]
   2646a:	f7ff fe5d 	bl	26128 <__malloc_unlock>
   2646e:	e71b      	b.n	262a8 <_realloc_r+0x164>
   26470:	463b      	mov	r3, r7
   26472:	e6fc      	b.n	2626e <_realloc_r+0x12a>
   26474:	4621      	mov	r1, r4
   26476:	4638      	mov	r0, r7
   26478:	4666      	mov	r6, ip
   2647a:	46d1      	mov	r9, sl
   2647c:	463c      	mov	r4, r7
   2647e:	f004 fba1 	bl	2abc4 <memmove>
   26482:	e6fd      	b.n	26280 <_realloc_r+0x13c>
   26484:	68a1      	ldr	r1, [r4, #8]
   26486:	2a24      	cmp	r2, #36	; 0x24
   26488:	f8ca 1010 	str.w	r1, [sl, #16]
   2648c:	68e1      	ldr	r1, [r4, #12]
   2648e:	f8ca 1014 	str.w	r1, [sl, #20]
   26492:	d022      	beq.n	264da <_realloc_r+0x396>
   26494:	3410      	adds	r4, #16
   26496:	f10a 0218 	add.w	r2, sl, #24
   2649a:	e7b2      	b.n	26402 <_realloc_r+0x2be>
   2649c:	200204dc 	.word	0x200204dc
   264a0:	6921      	ldr	r1, [r4, #16]
   264a2:	f104 0218 	add.w	r2, r4, #24
   264a6:	f100 0318 	add.w	r3, r0, #24
   264aa:	6101      	str	r1, [r0, #16]
   264ac:	6961      	ldr	r1, [r4, #20]
   264ae:	6141      	str	r1, [r0, #20]
   264b0:	e6aa      	b.n	26208 <_realloc_r+0xc4>
   264b2:	68a3      	ldr	r3, [r4, #8]
   264b4:	2a24      	cmp	r2, #36	; 0x24
   264b6:	f8ca 3010 	str.w	r3, [sl, #16]
   264ba:	68e3      	ldr	r3, [r4, #12]
   264bc:	f8ca 3014 	str.w	r3, [sl, #20]
   264c0:	d022      	beq.n	26508 <_realloc_r+0x3c4>
   264c2:	3410      	adds	r4, #16
   264c4:	f10a 0318 	add.w	r3, sl, #24
   264c8:	e6d1      	b.n	2626e <_realloc_r+0x12a>
   264ca:	463a      	mov	r2, r7
   264cc:	e752      	b.n	26374 <_realloc_r+0x230>
   264ce:	4621      	mov	r1, r4
   264d0:	4638      	mov	r0, r7
   264d2:	f004 fb77 	bl	2abc4 <memmove>
   264d6:	4b17      	ldr	r3, [pc, #92]	; (26534 <_realloc_r+0x3f0>)
   264d8:	e752      	b.n	26380 <_realloc_r+0x23c>
   264da:	6921      	ldr	r1, [r4, #16]
   264dc:	f10a 0220 	add.w	r2, sl, #32
   264e0:	3418      	adds	r4, #24
   264e2:	f8ca 1018 	str.w	r1, [sl, #24]
   264e6:	f854 1c04 	ldr.w	r1, [r4, #-4]
   264ea:	f8ca 101c 	str.w	r1, [sl, #28]
   264ee:	e788      	b.n	26402 <_realloc_r+0x2be>
   264f0:	68a1      	ldr	r1, [r4, #8]
   264f2:	2a24      	cmp	r2, #36	; 0x24
   264f4:	f8ca 1010 	str.w	r1, [sl, #16]
   264f8:	68e1      	ldr	r1, [r4, #12]
   264fa:	f8ca 1014 	str.w	r1, [sl, #20]
   264fe:	d00e      	beq.n	2651e <_realloc_r+0x3da>
   26500:	3410      	adds	r4, #16
   26502:	f10a 0218 	add.w	r2, sl, #24
   26506:	e735      	b.n	26374 <_realloc_r+0x230>
   26508:	6922      	ldr	r2, [r4, #16]
   2650a:	f10a 0320 	add.w	r3, sl, #32
   2650e:	3418      	adds	r4, #24
   26510:	f8ca 2018 	str.w	r2, [sl, #24]
   26514:	f854 2c04 	ldr.w	r2, [r4, #-4]
   26518:	f8ca 201c 	str.w	r2, [sl, #28]
   2651c:	e6a7      	b.n	2626e <_realloc_r+0x12a>
   2651e:	6921      	ldr	r1, [r4, #16]
   26520:	f10a 0220 	add.w	r2, sl, #32
   26524:	3418      	adds	r4, #24
   26526:	f8ca 1018 	str.w	r1, [sl, #24]
   2652a:	f854 1c04 	ldr.w	r1, [r4, #-4]
   2652e:	f8ca 101c 	str.w	r1, [sl, #28]
   26532:	e71f      	b.n	26374 <_realloc_r+0x230>
   26534:	200204dc 	.word	0x200204dc

00026538 <_sbrk_r>:
   26538:	b538      	push	{r3, r4, r5, lr}
   2653a:	2200      	movs	r2, #0
   2653c:	4d06      	ldr	r5, [pc, #24]	; (26558 <_sbrk_r+0x20>)
   2653e:	4604      	mov	r4, r0
   26540:	4608      	mov	r0, r1
   26542:	602a      	str	r2, [r5, #0]
   26544:	f7ee ff44 	bl	153d0 <_sbrk>
   26548:	1c43      	adds	r3, r0, #1
   2654a:	d000      	beq.n	2654e <_sbrk_r+0x16>
   2654c:	bd38      	pop	{r3, r4, r5, pc}
   2654e:	682b      	ldr	r3, [r5, #0]
   26550:	2b00      	cmp	r3, #0
   26552:	d0fb      	beq.n	2654c <_sbrk_r+0x14>
   26554:	6023      	str	r3, [r4, #0]
   26556:	bd38      	pop	{r3, r4, r5, pc}
   26558:	2002640c 	.word	0x2002640c

0002655c <snprintf>:
   2655c:	b40c      	push	{r2, r3}
   2655e:	4b20      	ldr	r3, [pc, #128]	; (265e0 <snprintf+0x84>)
   26560:	b570      	push	{r4, r5, r6, lr}
   26562:	1e0c      	subs	r4, r1, #0
   26564:	b09c      	sub	sp, #112	; 0x70
   26566:	681d      	ldr	r5, [r3, #0]
   26568:	db35      	blt.n	265d6 <snprintf+0x7a>
   2656a:	f44f 7302 	mov.w	r3, #520	; 0x208
   2656e:	9002      	str	r0, [sp, #8]
   26570:	9006      	str	r0, [sp, #24]
   26572:	f8ad 3014 	strh.w	r3, [sp, #20]
   26576:	ab21      	add	r3, sp, #132	; 0x84
   26578:	d018      	beq.n	265ac <snprintf+0x50>
   2657a:	1e61      	subs	r1, r4, #1
   2657c:	f64f 74ff 	movw	r4, #65535	; 0xffff
   26580:	9a20      	ldr	r2, [sp, #128]	; 0x80
   26582:	4628      	mov	r0, r5
   26584:	9104      	str	r1, [sp, #16]
   26586:	9107      	str	r1, [sp, #28]
   26588:	a902      	add	r1, sp, #8
   2658a:	9301      	str	r3, [sp, #4]
   2658c:	f8ad 4016 	strh.w	r4, [sp, #22]
   26590:	f7e8 f992 	bl	e8b8 <_svfprintf_r>
   26594:	1c42      	adds	r2, r0, #1
   26596:	da01      	bge.n	2659c <snprintf+0x40>
   26598:	238b      	movs	r3, #139	; 0x8b
   2659a:	602b      	str	r3, [r5, #0]
   2659c:	9b02      	ldr	r3, [sp, #8]
   2659e:	2200      	movs	r2, #0
   265a0:	701a      	strb	r2, [r3, #0]
   265a2:	b01c      	add	sp, #112	; 0x70
   265a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   265a8:	b002      	add	sp, #8
   265aa:	4770      	bx	lr
   265ac:	f64f 76ff 	movw	r6, #65535	; 0xffff
   265b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
   265b2:	a902      	add	r1, sp, #8
   265b4:	4628      	mov	r0, r5
   265b6:	9301      	str	r3, [sp, #4]
   265b8:	9404      	str	r4, [sp, #16]
   265ba:	9407      	str	r4, [sp, #28]
   265bc:	f8ad 6016 	strh.w	r6, [sp, #22]
   265c0:	f7e8 f97a 	bl	e8b8 <_svfprintf_r>
   265c4:	1c43      	adds	r3, r0, #1
   265c6:	da01      	bge.n	265cc <snprintf+0x70>
   265c8:	238b      	movs	r3, #139	; 0x8b
   265ca:	602b      	str	r3, [r5, #0]
   265cc:	b01c      	add	sp, #112	; 0x70
   265ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   265d2:	b002      	add	sp, #8
   265d4:	4770      	bx	lr
   265d6:	238b      	movs	r3, #139	; 0x8b
   265d8:	f04f 30ff 	mov.w	r0, #4294967295
   265dc:	602b      	str	r3, [r5, #0]
   265de:	e7f5      	b.n	265cc <snprintf+0x70>
   265e0:	200204d8 	.word	0x200204d8

000265e4 <__sprintf_chk>:
   265e4:	b408      	push	{r3}
   265e6:	b510      	push	{r4, lr}
   265e8:	b083      	sub	sp, #12
   265ea:	1e14      	subs	r4, r2, #0
   265ec:	ab05      	add	r3, sp, #20
   265ee:	f853 1b04 	ldr.w	r1, [r3], #4
   265f2:	9301      	str	r3, [sp, #4]
   265f4:	db0c      	blt.n	26610 <__sprintf_chk+0x2c>
   265f6:	460a      	mov	r2, r1
   265f8:	4621      	mov	r1, r4
   265fa:	f002 fffb 	bl	295f4 <vsnprintf>
   265fe:	2800      	cmp	r0, #0
   26600:	db01      	blt.n	26606 <__sprintf_chk+0x22>
   26602:	42a0      	cmp	r0, r4
   26604:	d20c      	bcs.n	26620 <__sprintf_chk+0x3c>
   26606:	b003      	add	sp, #12
   26608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2660c:	b001      	add	sp, #4
   2660e:	4770      	bx	lr
   26610:	461a      	mov	r2, r3
   26612:	f003 f815 	bl	29640 <vsprintf>
   26616:	b003      	add	sp, #12
   26618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2661c:	b001      	add	sp, #4
   2661e:	4770      	bx	lr
   26620:	f7ee fef8 	bl	15414 <__chk_fail>

00026624 <sscanf>:
   26624:	b40e      	push	{r1, r2, r3}
   26626:	b5f0      	push	{r4, r5, r6, r7, lr}
   26628:	b09e      	sub	sp, #120	; 0x78
   2662a:	f44f 7101 	mov.w	r1, #516	; 0x204
   2662e:	2500      	movs	r5, #0
   26630:	4f10      	ldr	r7, [pc, #64]	; (26674 <sscanf+0x50>)
   26632:	ac23      	add	r4, sp, #140	; 0x8c
   26634:	f8ad 101c 	strh.w	r1, [sp, #28]
   26638:	9004      	str	r0, [sp, #16]
   2663a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   2663e:	f854 2b04 	ldr.w	r2, [r4], #4
   26642:	9008      	str	r0, [sp, #32]
   26644:	9201      	str	r2, [sp, #4]
   26646:	f000 f929 	bl	2689c <strlen>
   2664a:	4b0b      	ldr	r3, [pc, #44]	; (26678 <sscanf+0x54>)
   2664c:	4601      	mov	r1, r0
   2664e:	9a01      	ldr	r2, [sp, #4]
   26650:	9105      	str	r1, [sp, #20]
   26652:	9109      	str	r1, [sp, #36]	; 0x24
   26654:	a904      	add	r1, sp, #16
   26656:	6818      	ldr	r0, [r3, #0]
   26658:	4623      	mov	r3, r4
   2665a:	9403      	str	r4, [sp, #12]
   2665c:	970c      	str	r7, [sp, #48]	; 0x30
   2665e:	9510      	str	r5, [sp, #64]	; 0x40
   26660:	9515      	str	r5, [sp, #84]	; 0x54
   26662:	f8ad 601e 	strh.w	r6, [sp, #30]
   26666:	f000 fd11 	bl	2708c <__ssvfscanf_r>
   2666a:	b01e      	add	sp, #120	; 0x78
   2666c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   26670:	b003      	add	sp, #12
   26672:	4770      	bx	lr
   26674:	000266a1 	.word	0x000266a1
   26678:	200204d8 	.word	0x200204d8

0002667c <__sread>:
   2667c:	b510      	push	{r4, lr}
   2667e:	460c      	mov	r4, r1
   26680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   26684:	f004 ffb4 	bl	2b5f0 <_read_r>
   26688:	2800      	cmp	r0, #0
   2668a:	db03      	blt.n	26694 <__sread+0x18>
   2668c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2668e:	4403      	add	r3, r0
   26690:	6523      	str	r3, [r4, #80]	; 0x50
   26692:	bd10      	pop	{r4, pc}
   26694:	89a3      	ldrh	r3, [r4, #12]
   26696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2669a:	81a3      	strh	r3, [r4, #12]
   2669c:	bd10      	pop	{r4, pc}
   2669e:	bf00      	nop

000266a0 <__seofread>:
   266a0:	2000      	movs	r0, #0
   266a2:	4770      	bx	lr

000266a4 <__swrite>:
   266a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   266a8:	460c      	mov	r4, r1
   266aa:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   266ae:	461f      	mov	r7, r3
   266b0:	4616      	mov	r6, r2
   266b2:	05cb      	lsls	r3, r1, #23
   266b4:	4605      	mov	r5, r0
   266b6:	d40b      	bmi.n	266d0 <__swrite+0x2c>
   266b8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   266bc:	463b      	mov	r3, r7
   266be:	4632      	mov	r2, r6
   266c0:	4628      	mov	r0, r5
   266c2:	81a1      	strh	r1, [r4, #12]
   266c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   266c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   266cc:	f002 bfc4 	b.w	29658 <_write_r>
   266d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   266d4:	2302      	movs	r3, #2
   266d6:	2200      	movs	r2, #0
   266d8:	f004 f9aa 	bl	2aa30 <_lseek_r>
   266dc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   266e0:	e7ea      	b.n	266b8 <__swrite+0x14>
   266e2:	bf00      	nop

000266e4 <__sseek>:
   266e4:	b510      	push	{r4, lr}
   266e6:	460c      	mov	r4, r1
   266e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   266ec:	f004 f9a0 	bl	2aa30 <_lseek_r>
   266f0:	1c42      	adds	r2, r0, #1
   266f2:	89a3      	ldrh	r3, [r4, #12]
   266f4:	d004      	beq.n	26700 <__sseek+0x1c>
   266f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   266fa:	6520      	str	r0, [r4, #80]	; 0x50
   266fc:	81a3      	strh	r3, [r4, #12]
   266fe:	bd10      	pop	{r4, pc}
   26700:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   26704:	81a3      	strh	r3, [r4, #12]
   26706:	bd10      	pop	{r4, pc}

00026708 <__sclose>:
   26708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2670c:	f003 b82a 	b.w	29764 <_close_r>

00026710 <strchr>:
   26710:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   26714:	4603      	mov	r3, r0
   26716:	d044      	beq.n	267a2 <strchr+0x92>
   26718:	0782      	lsls	r2, r0, #30
   2671a:	d132      	bne.n	26782 <strchr+0x72>
   2671c:	b470      	push	{r4, r5, r6}
   2671e:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   26722:	6803      	ldr	r3, [r0, #0]
   26724:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   26728:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2672c:	ea86 0403 	eor.w	r4, r6, r3
   26730:	ea22 0203 	bic.w	r2, r2, r3
   26734:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   26738:	ea23 0304 	bic.w	r3, r3, r4
   2673c:	4313      	orrs	r3, r2
   2673e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   26742:	d10f      	bne.n	26764 <strchr+0x54>
   26744:	f850 4f04 	ldr.w	r4, [r0, #4]!
   26748:	ea84 0506 	eor.w	r5, r4, r6
   2674c:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   26750:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   26754:	ea23 0304 	bic.w	r3, r3, r4
   26758:	ea22 0205 	bic.w	r2, r2, r5
   2675c:	4313      	orrs	r3, r2
   2675e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   26762:	d0ef      	beq.n	26744 <strchr+0x34>
   26764:	7803      	ldrb	r3, [r0, #0]
   26766:	b923      	cbnz	r3, 26772 <strchr+0x62>
   26768:	e036      	b.n	267d8 <strchr+0xc8>
   2676a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2676e:	2b00      	cmp	r3, #0
   26770:	d032      	beq.n	267d8 <strchr+0xc8>
   26772:	4299      	cmp	r1, r3
   26774:	d1f9      	bne.n	2676a <strchr+0x5a>
   26776:	e030      	b.n	267da <strchr+0xca>
   26778:	428a      	cmp	r2, r1
   2677a:	d011      	beq.n	267a0 <strchr+0x90>
   2677c:	079a      	lsls	r2, r3, #30
   2677e:	4618      	mov	r0, r3
   26780:	d0cc      	beq.n	2671c <strchr+0xc>
   26782:	4618      	mov	r0, r3
   26784:	f813 2b01 	ldrb.w	r2, [r3], #1
   26788:	2a00      	cmp	r2, #0
   2678a:	d1f5      	bne.n	26778 <strchr+0x68>
   2678c:	4610      	mov	r0, r2
   2678e:	4770      	bx	lr
   26790:	0799      	lsls	r1, r3, #30
   26792:	4618      	mov	r0, r3
   26794:	d007      	beq.n	267a6 <strchr+0x96>
   26796:	4618      	mov	r0, r3
   26798:	3301      	adds	r3, #1
   2679a:	7802      	ldrb	r2, [r0, #0]
   2679c:	2a00      	cmp	r2, #0
   2679e:	d1f7      	bne.n	26790 <strchr+0x80>
   267a0:	4770      	bx	lr
   267a2:	0782      	lsls	r2, r0, #30
   267a4:	d1f7      	bne.n	26796 <strchr+0x86>
   267a6:	6802      	ldr	r2, [r0, #0]
   267a8:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   267ac:	ea23 0302 	bic.w	r3, r3, r2
   267b0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   267b4:	d108      	bne.n	267c8 <strchr+0xb8>
   267b6:	f850 2f04 	ldr.w	r2, [r0, #4]!
   267ba:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   267be:	ea23 0302 	bic.w	r3, r3, r2
   267c2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   267c6:	d0f6      	beq.n	267b6 <strchr+0xa6>
   267c8:	7803      	ldrb	r3, [r0, #0]
   267ca:	2b00      	cmp	r3, #0
   267cc:	d0e8      	beq.n	267a0 <strchr+0x90>
   267ce:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   267d2:	2b00      	cmp	r3, #0
   267d4:	d1fb      	bne.n	267ce <strchr+0xbe>
   267d6:	4770      	bx	lr
   267d8:	4618      	mov	r0, r3
   267da:	bc70      	pop	{r4, r5, r6}
   267dc:	4770      	bx	lr
   267de:	bf00      	nop

000267e0 <strcpy>:
   267e0:	ea80 0201 	eor.w	r2, r0, r1
   267e4:	4684      	mov	ip, r0
   267e6:	f012 0f03 	tst.w	r2, #3
   267ea:	d14f      	bne.n	2688c <strcpy+0xac>
   267ec:	f011 0f03 	tst.w	r1, #3
   267f0:	d132      	bne.n	26858 <strcpy+0x78>
   267f2:	f84d 4d04 	str.w	r4, [sp, #-4]!
   267f6:	f011 0f04 	tst.w	r1, #4
   267fa:	f851 3b04 	ldr.w	r3, [r1], #4
   267fe:	d00b      	beq.n	26818 <strcpy+0x38>
   26800:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   26804:	439a      	bics	r2, r3
   26806:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2680a:	bf04      	itt	eq
   2680c:	f84c 3b04 	streq.w	r3, [ip], #4
   26810:	f851 3b04 	ldreq.w	r3, [r1], #4
   26814:	d116      	bne.n	26844 <strcpy+0x64>
   26816:	bf00      	nop
   26818:	f851 4b04 	ldr.w	r4, [r1], #4
   2681c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   26820:	439a      	bics	r2, r3
   26822:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   26826:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   2682a:	d10b      	bne.n	26844 <strcpy+0x64>
   2682c:	f84c 3b04 	str.w	r3, [ip], #4
   26830:	43a2      	bics	r2, r4
   26832:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   26836:	bf04      	itt	eq
   26838:	f851 3b04 	ldreq.w	r3, [r1], #4
   2683c:	f84c 4b04 	streq.w	r4, [ip], #4
   26840:	d0ea      	beq.n	26818 <strcpy+0x38>
   26842:	4623      	mov	r3, r4
   26844:	f80c 3b01 	strb.w	r3, [ip], #1
   26848:	f013 0fff 	tst.w	r3, #255	; 0xff
   2684c:	ea4f 2333 	mov.w	r3, r3, ror #8
   26850:	d1f8      	bne.n	26844 <strcpy+0x64>
   26852:	f85d 4b04 	ldr.w	r4, [sp], #4
   26856:	4770      	bx	lr
   26858:	f011 0f01 	tst.w	r1, #1
   2685c:	d006      	beq.n	2686c <strcpy+0x8c>
   2685e:	f811 2b01 	ldrb.w	r2, [r1], #1
   26862:	f80c 2b01 	strb.w	r2, [ip], #1
   26866:	2a00      	cmp	r2, #0
   26868:	bf08      	it	eq
   2686a:	4770      	bxeq	lr
   2686c:	f011 0f02 	tst.w	r1, #2
   26870:	d0bf      	beq.n	267f2 <strcpy+0x12>
   26872:	f831 2b02 	ldrh.w	r2, [r1], #2
   26876:	f012 0fff 	tst.w	r2, #255	; 0xff
   2687a:	bf16      	itet	ne
   2687c:	f82c 2b02 	strhne.w	r2, [ip], #2
   26880:	f88c 2000 	strbeq.w	r2, [ip]
   26884:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   26888:	d1b3      	bne.n	267f2 <strcpy+0x12>
   2688a:	4770      	bx	lr
   2688c:	f811 2b01 	ldrb.w	r2, [r1], #1
   26890:	f80c 2b01 	strb.w	r2, [ip], #1
   26894:	2a00      	cmp	r2, #0
   26896:	d1f9      	bne.n	2688c <strcpy+0xac>
   26898:	4770      	bx	lr
   2689a:	bf00      	nop

0002689c <strlen>:
   2689c:	f020 0103 	bic.w	r1, r0, #3
   268a0:	f010 0003 	ands.w	r0, r0, #3
   268a4:	f1c0 0000 	rsb	r0, r0, #0
   268a8:	f851 3b04 	ldr.w	r3, [r1], #4
   268ac:	f100 0c04 	add.w	ip, r0, #4
   268b0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   268b4:	f06f 0200 	mvn.w	r2, #0
   268b8:	bf1c      	itt	ne
   268ba:	fa22 f20c 	lsrne.w	r2, r2, ip
   268be:	4313      	orrne	r3, r2
   268c0:	f04f 0c01 	mov.w	ip, #1
   268c4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   268c8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   268cc:	eba3 020c 	sub.w	r2, r3, ip
   268d0:	ea22 0203 	bic.w	r2, r2, r3
   268d4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   268d8:	bf04      	itt	eq
   268da:	f851 3b04 	ldreq.w	r3, [r1], #4
   268de:	3004      	addeq	r0, #4
   268e0:	d0f4      	beq.n	268cc <strlen+0x30>
   268e2:	f1c2 0100 	rsb	r1, r2, #0
   268e6:	ea02 0201 	and.w	r2, r2, r1
   268ea:	fab2 f282 	clz	r2, r2
   268ee:	f1c2 021f 	rsb	r2, r2, #31
   268f2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   268f6:	4770      	bx	lr

000268f8 <strncmp>:
   268f8:	b3b2      	cbz	r2, 26968 <strncmp+0x70>
   268fa:	460b      	mov	r3, r1
   268fc:	b4f0      	push	{r4, r5, r6, r7}
   268fe:	ea40 0501 	orr.w	r5, r0, r1
   26902:	4604      	mov	r4, r0
   26904:	07ad      	lsls	r5, r5, #30
   26906:	d029      	beq.n	2695c <strncmp+0x64>
   26908:	7820      	ldrb	r0, [r4, #0]
   2690a:	780e      	ldrb	r6, [r1, #0]
   2690c:	4286      	cmp	r6, r0
   2690e:	d10f      	bne.n	26930 <strncmp+0x38>
   26910:	b33e      	cbz	r6, 26962 <strncmp+0x6a>
   26912:	2a01      	cmp	r2, #1
   26914:	d025      	beq.n	26962 <strncmp+0x6a>
   26916:	4625      	mov	r5, r4
   26918:	e002      	b.n	26920 <strncmp+0x28>
   2691a:	42dc      	cmn	r4, r3
   2691c:	d021      	beq.n	26962 <strncmp+0x6a>
   2691e:	b300      	cbz	r0, 26962 <strncmp+0x6a>
   26920:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   26924:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   26928:	43eb      	mvns	r3, r5
   2692a:	42b0      	cmp	r0, r6
   2692c:	4413      	add	r3, r2
   2692e:	d0f4      	beq.n	2691a <strncmp+0x22>
   26930:	1b80      	subs	r0, r0, r6
   26932:	bcf0      	pop	{r4, r5, r6, r7}
   26934:	4770      	bx	lr
   26936:	4619      	mov	r1, r3
   26938:	4604      	mov	r4, r0
   2693a:	f850 5b04 	ldr.w	r5, [r0], #4
   2693e:	3304      	adds	r3, #4
   26940:	680f      	ldr	r7, [r1, #0]
   26942:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
   26946:	42bd      	cmp	r5, r7
   26948:	ea26 0505 	bic.w	r5, r6, r5
   2694c:	d1dc      	bne.n	26908 <strncmp+0x10>
   2694e:	3a04      	subs	r2, #4
   26950:	4604      	mov	r4, r0
   26952:	4619      	mov	r1, r3
   26954:	d005      	beq.n	26962 <strncmp+0x6a>
   26956:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   2695a:	d102      	bne.n	26962 <strncmp+0x6a>
   2695c:	2a03      	cmp	r2, #3
   2695e:	d8ea      	bhi.n	26936 <strncmp+0x3e>
   26960:	e7d2      	b.n	26908 <strncmp+0x10>
   26962:	2000      	movs	r0, #0
   26964:	bcf0      	pop	{r4, r5, r6, r7}
   26966:	4770      	bx	lr
   26968:	4610      	mov	r0, r2
   2696a:	4770      	bx	lr

0002696c <strncpy>:
   2696c:	b470      	push	{r4, r5, r6}
   2696e:	ea40 0401 	orr.w	r4, r0, r1
   26972:	07a3      	lsls	r3, r4, #30
   26974:	d101      	bne.n	2697a <strncpy+0xe>
   26976:	2a03      	cmp	r2, #3
   26978:	d80f      	bhi.n	2699a <strncpy+0x2e>
   2697a:	4604      	mov	r4, r0
   2697c:	1e4d      	subs	r5, r1, #1
   2697e:	e007      	b.n	26990 <strncpy+0x24>
   26980:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   26984:	1e56      	subs	r6, r2, #1
   26986:	f803 1b01 	strb.w	r1, [r3], #1
   2698a:	b1c9      	cbz	r1, 269c0 <strncpy+0x54>
   2698c:	4632      	mov	r2, r6
   2698e:	461c      	mov	r4, r3
   26990:	4623      	mov	r3, r4
   26992:	2a00      	cmp	r2, #0
   26994:	d1f4      	bne.n	26980 <strncpy+0x14>
   26996:	bc70      	pop	{r4, r5, r6}
   26998:	4770      	bx	lr
   2699a:	460b      	mov	r3, r1
   2699c:	4604      	mov	r4, r0
   2699e:	4619      	mov	r1, r3
   269a0:	f853 6b04 	ldr.w	r6, [r3], #4
   269a4:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   269a8:	ea25 0506 	bic.w	r5, r5, r6
   269ac:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   269b0:	d1e4      	bne.n	2697c <strncpy+0x10>
   269b2:	3a04      	subs	r2, #4
   269b4:	4619      	mov	r1, r3
   269b6:	f844 6b04 	str.w	r6, [r4], #4
   269ba:	2a03      	cmp	r2, #3
   269bc:	d8ef      	bhi.n	2699e <strncpy+0x32>
   269be:	e7dd      	b.n	2697c <strncpy+0x10>
   269c0:	2e00      	cmp	r6, #0
   269c2:	d0e8      	beq.n	26996 <strncpy+0x2a>
   269c4:	4422      	add	r2, r4
   269c6:	f803 1b01 	strb.w	r1, [r3], #1
   269ca:	4293      	cmp	r3, r2
   269cc:	d1fb      	bne.n	269c6 <strncpy+0x5a>
   269ce:	bc70      	pop	{r4, r5, r6}
   269d0:	4770      	bx	lr
   269d2:	bf00      	nop

000269d4 <two_way_long_needle>:
   269d4:	2b01      	cmp	r3, #1
   269d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   269da:	461d      	mov	r5, r3
   269dc:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
   269e0:	4682      	mov	sl, r0
   269e2:	460f      	mov	r7, r1
   269e4:	4690      	mov	r8, r2
   269e6:	f04f 0301 	mov.w	r3, #1
   269ea:	f240 814d 	bls.w	26c88 <two_way_long_needle+0x2b4>
   269ee:	2400      	movs	r4, #0
   269f0:	f04f 30ff 	mov.w	r0, #4294967295
   269f4:	4619      	mov	r1, r3
   269f6:	469c      	mov	ip, r3
   269f8:	e006      	b.n	26a08 <two_way_long_needle+0x34>
   269fa:	eba3 0c00 	sub.w	ip, r3, r0
   269fe:	461c      	mov	r4, r3
   26a00:	2101      	movs	r1, #1
   26a02:	190b      	adds	r3, r1, r4
   26a04:	429d      	cmp	r5, r3
   26a06:	d910      	bls.n	26a2a <two_way_long_needle+0x56>
   26a08:	eb08 0200 	add.w	r2, r8, r0
   26a0c:	f818 6003 	ldrb.w	r6, [r8, r3]
   26a10:	5c52      	ldrb	r2, [r2, r1]
   26a12:	4296      	cmp	r6, r2
   26a14:	d3f1      	bcc.n	269fa <two_way_long_needle+0x26>
   26a16:	f000 8083 	beq.w	26b20 <two_way_long_needle+0x14c>
   26a1a:	f04f 0c01 	mov.w	ip, #1
   26a1e:	4620      	mov	r0, r4
   26a20:	4661      	mov	r1, ip
   26a22:	4464      	add	r4, ip
   26a24:	190b      	adds	r3, r1, r4
   26a26:	429d      	cmp	r5, r3
   26a28:	d8ee      	bhi.n	26a08 <two_way_long_needle+0x34>
   26a2a:	f8cd c004 	str.w	ip, [sp, #4]
   26a2e:	f04f 0c01 	mov.w	ip, #1
   26a32:	2400      	movs	r4, #0
   26a34:	f04f 36ff 	mov.w	r6, #4294967295
   26a38:	4661      	mov	r1, ip
   26a3a:	4663      	mov	r3, ip
   26a3c:	e006      	b.n	26a4c <two_way_long_needle+0x78>
   26a3e:	eba3 0c06 	sub.w	ip, r3, r6
   26a42:	461c      	mov	r4, r3
   26a44:	2101      	movs	r1, #1
   26a46:	1863      	adds	r3, r4, r1
   26a48:	429d      	cmp	r5, r3
   26a4a:	d90f      	bls.n	26a6c <two_way_long_needle+0x98>
   26a4c:	eb08 0201 	add.w	r2, r8, r1
   26a50:	f818 e003 	ldrb.w	lr, [r8, r3]
   26a54:	5d92      	ldrb	r2, [r2, r6]
   26a56:	4596      	cmp	lr, r2
   26a58:	d8f1      	bhi.n	26a3e <two_way_long_needle+0x6a>
   26a5a:	d069      	beq.n	26b30 <two_way_long_needle+0x15c>
   26a5c:	f04f 0c01 	mov.w	ip, #1
   26a60:	4626      	mov	r6, r4
   26a62:	4661      	mov	r1, ip
   26a64:	4464      	add	r4, ip
   26a66:	1863      	adds	r3, r4, r1
   26a68:	429d      	cmp	r5, r3
   26a6a:	d8ef      	bhi.n	26a4c <two_way_long_needle+0x78>
   26a6c:	3601      	adds	r6, #1
   26a6e:	f100 0b01 	add.w	fp, r0, #1
   26a72:	45b3      	cmp	fp, r6
   26a74:	d802      	bhi.n	26a7c <two_way_long_needle+0xa8>
   26a76:	46b3      	mov	fp, r6
   26a78:	f8cd c004 	str.w	ip, [sp, #4]
   26a7c:	ab05      	add	r3, sp, #20
   26a7e:	f20d 4214 	addw	r2, sp, #1044	; 0x414
   26a82:	f843 5f04 	str.w	r5, [r3, #4]!
   26a86:	4293      	cmp	r3, r2
   26a88:	d1fb      	bne.n	26a82 <two_way_long_needle+0xae>
   26a8a:	2d00      	cmp	r5, #0
   26a8c:	f000 80f7 	beq.w	26c7e <two_way_long_needle+0x2aa>
   26a90:	1e6c      	subs	r4, r5, #1
   26a92:	ae06      	add	r6, sp, #24
   26a94:	f108 32ff 	add.w	r2, r8, #4294967295
   26a98:	eb08 0004 	add.w	r0, r8, r4
   26a9c:	9600      	str	r6, [sp, #0]
   26a9e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   26aa2:	43d3      	mvns	r3, r2
   26aa4:	4282      	cmp	r2, r0
   26aa6:	442b      	add	r3, r5
   26aa8:	4443      	add	r3, r8
   26aaa:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
   26aae:	d1f6      	bne.n	26a9e <two_way_long_needle+0xca>
   26ab0:	9e01      	ldr	r6, [sp, #4]
   26ab2:	465a      	mov	r2, fp
   26ab4:	4640      	mov	r0, r8
   26ab6:	eb08 0106 	add.w	r1, r8, r6
   26aba:	f7ff fab1 	bl	26020 <memcmp>
   26abe:	2800      	cmp	r0, #0
   26ac0:	f040 8089 	bne.w	26bd6 <two_way_long_needle+0x202>
   26ac4:	f10b 33ff 	add.w	r3, fp, #4294967295
   26ac8:	4681      	mov	r9, r0
   26aca:	f8cd 8008 	str.w	r8, [sp, #8]
   26ace:	9305      	str	r3, [sp, #20]
   26ad0:	1bab      	subs	r3, r5, r6
   26ad2:	4606      	mov	r6, r0
   26ad4:	9303      	str	r3, [sp, #12]
   26ad6:	eb0a 0806 	add.w	r8, sl, r6
   26ada:	9a00      	ldr	r2, [sp, #0]
   26adc:	f818 3004 	ldrb.w	r3, [r8, r4]
   26ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   26ae4:	b35b      	cbz	r3, 26b3e <two_way_long_needle+0x16a>
   26ae6:	f1b9 0f00 	cmp.w	r9, #0
   26aea:	d004      	beq.n	26af6 <two_way_long_needle+0x122>
   26aec:	9a01      	ldr	r2, [sp, #4]
   26aee:	4293      	cmp	r3, r2
   26af0:	9a03      	ldr	r2, [sp, #12]
   26af2:	bf38      	it	cc
   26af4:	4613      	movcc	r3, r2
   26af6:	441e      	add	r6, r3
   26af8:	f04f 0900 	mov.w	r9, #0
   26afc:	1b7b      	subs	r3, r7, r5
   26afe:	42b3      	cmp	r3, r6
   26b00:	d2e9      	bcs.n	26ad6 <two_way_long_needle+0x102>
   26b02:	eb0a 0007 	add.w	r0, sl, r7
   26b06:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
   26b0a:	f004 fe75 	bl	2b7f8 <strnlen>
   26b0e:	4407      	add	r7, r0
   26b10:	1b7b      	subs	r3, r7, r5
   26b12:	42b3      	cmp	r3, r6
   26b14:	d2df      	bcs.n	26ad6 <two_way_long_needle+0x102>
   26b16:	2000      	movs	r0, #0
   26b18:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   26b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26b20:	458c      	cmp	ip, r1
   26b22:	f101 0101 	add.w	r1, r1, #1
   26b26:	f47f af6c 	bne.w	26a02 <two_way_long_needle+0x2e>
   26b2a:	4464      	add	r4, ip
   26b2c:	2101      	movs	r1, #1
   26b2e:	e768      	b.n	26a02 <two_way_long_needle+0x2e>
   26b30:	458c      	cmp	ip, r1
   26b32:	f101 0101 	add.w	r1, r1, #1
   26b36:	d186      	bne.n	26a46 <two_way_long_needle+0x72>
   26b38:	4464      	add	r4, ip
   26b3a:	2101      	movs	r1, #1
   26b3c:	e783      	b.n	26a46 <two_way_long_needle+0x72>
   26b3e:	45cb      	cmp	fp, r9
   26b40:	465b      	mov	r3, fp
   26b42:	bf38      	it	cc
   26b44:	464b      	movcc	r3, r9
   26b46:	42a3      	cmp	r3, r4
   26b48:	d215      	bcs.n	26b76 <two_way_long_needle+0x1a2>
   26b4a:	1e59      	subs	r1, r3, #1
   26b4c:	199a      	adds	r2, r3, r6
   26b4e:	9802      	ldr	r0, [sp, #8]
   26b50:	4452      	add	r2, sl
   26b52:	4401      	add	r1, r0
   26b54:	e002      	b.n	26b5c <two_way_long_needle+0x188>
   26b56:	3301      	adds	r3, #1
   26b58:	42a3      	cmp	r3, r4
   26b5a:	d20c      	bcs.n	26b76 <two_way_long_needle+0x1a2>
   26b5c:	f812 0b01 	ldrb.w	r0, [r2], #1
   26b60:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   26b64:	4584      	cmp	ip, r0
   26b66:	d0f6      	beq.n	26b56 <two_way_long_needle+0x182>
   26b68:	f1cb 0201 	rsb	r2, fp, #1
   26b6c:	f04f 0900 	mov.w	r9, #0
   26b70:	4416      	add	r6, r2
   26b72:	441e      	add	r6, r3
   26b74:	e7c2      	b.n	26afc <two_way_long_needle+0x128>
   26b76:	45cb      	cmp	fp, r9
   26b78:	9b05      	ldr	r3, [sp, #20]
   26b7a:	d97e      	bls.n	26c7a <two_way_long_needle+0x2a6>
   26b7c:	eb0b 0206 	add.w	r2, fp, r6
   26b80:	9902      	ldr	r1, [sp, #8]
   26b82:	f8cd b010 	str.w	fp, [sp, #16]
   26b86:	4459      	add	r1, fp
   26b88:	4452      	add	r2, sl
   26b8a:	e002      	b.n	26b92 <two_way_long_needle+0x1be>
   26b8c:	454b      	cmp	r3, r9
   26b8e:	4673      	mov	r3, lr
   26b90:	d015      	beq.n	26bbe <two_way_long_needle+0x1ea>
   26b92:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
   26b96:	f103 0b01 	add.w	fp, r3, #1
   26b9a:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   26b9e:	f103 3eff 	add.w	lr, r3, #4294967295
   26ba2:	4584      	cmp	ip, r0
   26ba4:	d0f2      	beq.n	26b8c <two_way_long_needle+0x1b8>
   26ba6:	465b      	mov	r3, fp
   26ba8:	f8dd b010 	ldr.w	fp, [sp, #16]
   26bac:	f109 0901 	add.w	r9, r9, #1
   26bb0:	4599      	cmp	r9, r3
   26bb2:	d80b      	bhi.n	26bcc <two_way_long_needle+0x1f8>
   26bb4:	9b01      	ldr	r3, [sp, #4]
   26bb6:	f8dd 900c 	ldr.w	r9, [sp, #12]
   26bba:	441e      	add	r6, r3
   26bbc:	e79e      	b.n	26afc <two_way_long_needle+0x128>
   26bbe:	464b      	mov	r3, r9
   26bc0:	f109 0901 	add.w	r9, r9, #1
   26bc4:	f8dd b010 	ldr.w	fp, [sp, #16]
   26bc8:	4599      	cmp	r9, r3
   26bca:	d9f3      	bls.n	26bb4 <two_way_long_needle+0x1e0>
   26bcc:	4640      	mov	r0, r8
   26bce:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   26bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26bd6:	eba5 030b 	sub.w	r3, r5, fp
   26bda:	f10b 32ff 	add.w	r2, fp, #4294967295
   26bde:	2600      	movs	r6, #0
   26be0:	f445 6900 	orr.w	r9, r5, #2048	; 0x800
   26be4:	455b      	cmp	r3, fp
   26be6:	9201      	str	r2, [sp, #4]
   26be8:	f1cb 0201 	rsb	r2, fp, #1
   26bec:	bf38      	it	cc
   26bee:	465b      	movcc	r3, fp
   26bf0:	9202      	str	r2, [sp, #8]
   26bf2:	3301      	adds	r3, #1
   26bf4:	9303      	str	r3, [sp, #12]
   26bf6:	eb0a 0006 	add.w	r0, sl, r6
   26bfa:	9a00      	ldr	r2, [sp, #0]
   26bfc:	5d03      	ldrb	r3, [r0, r4]
   26bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   26c02:	b16b      	cbz	r3, 26c20 <two_way_long_needle+0x24c>
   26c04:	441e      	add	r6, r3
   26c06:	1b7b      	subs	r3, r7, r5
   26c08:	429e      	cmp	r6, r3
   26c0a:	d9f4      	bls.n	26bf6 <two_way_long_needle+0x222>
   26c0c:	eb0a 0007 	add.w	r0, sl, r7
   26c10:	4649      	mov	r1, r9
   26c12:	f004 fdf1 	bl	2b7f8 <strnlen>
   26c16:	4407      	add	r7, r0
   26c18:	1b7b      	subs	r3, r7, r5
   26c1a:	429e      	cmp	r6, r3
   26c1c:	d9eb      	bls.n	26bf6 <two_way_long_needle+0x222>
   26c1e:	e77a      	b.n	26b16 <two_way_long_needle+0x142>
   26c20:	45a3      	cmp	fp, r4
   26c22:	d214      	bcs.n	26c4e <two_way_long_needle+0x27a>
   26c24:	9b01      	ldr	r3, [sp, #4]
   26c26:	eb0b 0206 	add.w	r2, fp, r6
   26c2a:	eb08 0c03 	add.w	ip, r8, r3
   26c2e:	4452      	add	r2, sl
   26c30:	465b      	mov	r3, fp
   26c32:	e002      	b.n	26c3a <two_way_long_needle+0x266>
   26c34:	3301      	adds	r3, #1
   26c36:	42a3      	cmp	r3, r4
   26c38:	d209      	bcs.n	26c4e <two_way_long_needle+0x27a>
   26c3a:	f812 1b01 	ldrb.w	r1, [r2], #1
   26c3e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
   26c42:	458e      	cmp	lr, r1
   26c44:	d0f6      	beq.n	26c34 <two_way_long_needle+0x260>
   26c46:	9a02      	ldr	r2, [sp, #8]
   26c48:	4416      	add	r6, r2
   26c4a:	441e      	add	r6, r3
   26c4c:	e7db      	b.n	26c06 <two_way_long_needle+0x232>
   26c4e:	f1bb 0f00 	cmp.w	fp, #0
   26c52:	f43f af61 	beq.w	26b18 <two_way_long_needle+0x144>
   26c56:	eb0b 0c06 	add.w	ip, fp, r6
   26c5a:	eb08 020b 	add.w	r2, r8, fp
   26c5e:	44d4      	add	ip, sl
   26c60:	e002      	b.n	26c68 <two_way_long_needle+0x294>
   26c62:	4543      	cmp	r3, r8
   26c64:	f43f af58 	beq.w	26b18 <two_way_long_needle+0x144>
   26c68:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   26c6c:	f81c 1d01 	ldrb.w	r1, [ip, #-1]!
   26c70:	4613      	mov	r3, r2
   26c72:	458e      	cmp	lr, r1
   26c74:	d0f5      	beq.n	26c62 <two_way_long_needle+0x28e>
   26c76:	9b03      	ldr	r3, [sp, #12]
   26c78:	e7c4      	b.n	26c04 <two_way_long_needle+0x230>
   26c7a:	465b      	mov	r3, fp
   26c7c:	e796      	b.n	26bac <two_way_long_needle+0x1d8>
   26c7e:	ab06      	add	r3, sp, #24
   26c80:	f04f 34ff 	mov.w	r4, #4294967295
   26c84:	9300      	str	r3, [sp, #0]
   26c86:	e713      	b.n	26ab0 <two_way_long_needle+0xdc>
   26c88:	f04f 0b00 	mov.w	fp, #0
   26c8c:	9301      	str	r3, [sp, #4]
   26c8e:	e6f5      	b.n	26a7c <two_way_long_needle+0xa8>

00026c90 <strstr>:
   26c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26c94:	460e      	mov	r6, r1
   26c96:	7809      	ldrb	r1, [r1, #0]
   26c98:	b090      	sub	sp, #64	; 0x40
   26c9a:	4604      	mov	r4, r0
   26c9c:	2900      	cmp	r1, #0
   26c9e:	d051      	beq.n	26d44 <strstr+0xb4>
   26ca0:	7875      	ldrb	r5, [r6, #1]
   26ca2:	2d00      	cmp	r5, #0
   26ca4:	f000 8083 	beq.w	26dae <strstr+0x11e>
   26ca8:	78b3      	ldrb	r3, [r6, #2]
   26caa:	2b00      	cmp	r3, #0
   26cac:	d04e      	beq.n	26d4c <strstr+0xbc>
   26cae:	78f2      	ldrb	r2, [r6, #3]
   26cb0:	2a00      	cmp	r2, #0
   26cb2:	f000 8085 	beq.w	26dc0 <strstr+0x130>
   26cb6:	7933      	ldrb	r3, [r6, #4]
   26cb8:	2b00      	cmp	r3, #0
   26cba:	d05b      	beq.n	26d74 <strstr+0xe4>
   26cbc:	4630      	mov	r0, r6
   26cbe:	f7ff fded 	bl	2689c <strlen>
   26cc2:	4607      	mov	r7, r0
   26cc4:	4620      	mov	r0, r4
   26cc6:	f447 7100 	orr.w	r1, r7, #512	; 0x200
   26cca:	f004 fd95 	bl	2b7f8 <strnlen>
   26cce:	4287      	cmp	r7, r0
   26cd0:	d84b      	bhi.n	26d6a <strstr+0xda>
   26cd2:	2ffe      	cmp	r7, #254	; 0xfe
   26cd4:	f200 808f 	bhi.w	26df6 <strstr+0x166>
   26cd8:	eba0 0807 	sub.w	r8, r0, r7
   26cdc:	2240      	movs	r2, #64	; 0x40
   26cde:	1c79      	adds	r1, r7, #1
   26ce0:	4668      	mov	r0, sp
   26ce2:	44a0      	add	r8, r4
   26ce4:	f7ff f9ca 	bl	2607c <memset>
   26ce8:	b17f      	cbz	r7, 26d0a <strstr+0x7a>
   26cea:	1e72      	subs	r2, r6, #1
   26cec:	b2fd      	uxtb	r5, r7
   26cee:	19d0      	adds	r0, r2, r7
   26cf0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   26cf4:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
   26cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26cfc:	1ab1      	subs	r1, r6, r2
   26cfe:	4282      	cmp	r2, r0
   26d00:	4463      	add	r3, ip
   26d02:	4429      	add	r1, r5
   26d04:	f803 1c40 	strb.w	r1, [r3, #-64]
   26d08:	d1f2      	bne.n	26cf0 <strstr+0x60>
   26d0a:	3c01      	subs	r4, #1
   26d0c:	aa10      	add	r2, sp, #64	; 0x40
   26d0e:	5de3      	ldrb	r3, [r4, r7]
   26d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26d14:	4413      	add	r3, r2
   26d16:	f813 0c40 	ldrb.w	r0, [r3, #-64]
   26d1a:	4404      	add	r4, r0
   26d1c:	45a0      	cmp	r8, r4
   26d1e:	d203      	bcs.n	26d28 <strstr+0x98>
   26d20:	e037      	b.n	26d92 <strstr+0x102>
   26d22:	442c      	add	r4, r5
   26d24:	45a0      	cmp	r8, r4
   26d26:	d334      	bcc.n	26d92 <strstr+0x102>
   26d28:	5de5      	ldrb	r5, [r4, r7]
   26d2a:	ab10      	add	r3, sp, #64	; 0x40
   26d2c:	463a      	mov	r2, r7
   26d2e:	4631      	mov	r1, r6
   26d30:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   26d34:	4620      	mov	r0, r4
   26d36:	441d      	add	r5, r3
   26d38:	f815 5c40 	ldrb.w	r5, [r5, #-64]
   26d3c:	f7ff f970 	bl	26020 <memcmp>
   26d40:	2800      	cmp	r0, #0
   26d42:	d1ee      	bne.n	26d22 <strstr+0x92>
   26d44:	4620      	mov	r0, r4
   26d46:	b010      	add	sp, #64	; 0x40
   26d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26d4c:	7802      	ldrb	r2, [r0, #0]
   26d4e:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   26d52:	b152      	cbz	r2, 26d6a <strstr+0xda>
   26d54:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   26d58:	4620      	mov	r0, r4
   26d5a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   26d5e:	4299      	cmp	r1, r3
   26d60:	d02c      	beq.n	26dbc <strstr+0x12c>
   26d62:	2a00      	cmp	r2, #0
   26d64:	d1f6      	bne.n	26d54 <strstr+0xc4>
   26d66:	4299      	cmp	r1, r3
   26d68:	d028      	beq.n	26dbc <strstr+0x12c>
   26d6a:	2400      	movs	r4, #0
   26d6c:	4620      	mov	r0, r4
   26d6e:	b010      	add	sp, #64	; 0x40
   26d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26d74:	7802      	ldrb	r2, [r0, #0]
   26d76:	2a00      	cmp	r2, #0
   26d78:	d0f7      	beq.n	26d6a <strstr+0xda>
   26d7a:	6831      	ldr	r1, [r6, #0]
   26d7c:	ba09      	rev	r1, r1
   26d7e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   26d82:	4620      	mov	r0, r4
   26d84:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   26d88:	b392      	cbz	r2, 26df0 <strstr+0x160>
   26d8a:	428b      	cmp	r3, r1
   26d8c:	d1f7      	bne.n	26d7e <strstr+0xee>
   26d8e:	1ec4      	subs	r4, r0, #3
   26d90:	e7d8      	b.n	26d44 <strstr+0xb4>
   26d92:	f818 3007 	ldrb.w	r3, [r8, r7]
   26d96:	eb08 0007 	add.w	r0, r8, r7
   26d9a:	2b00      	cmp	r3, #0
   26d9c:	d0e5      	beq.n	26d6a <strstr+0xda>
   26d9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   26da2:	f004 fd29 	bl	2b7f8 <strnlen>
   26da6:	4480      	add	r8, r0
   26da8:	45a0      	cmp	r8, r4
   26daa:	d2ae      	bcs.n	26d0a <strstr+0x7a>
   26dac:	e7dd      	b.n	26d6a <strstr+0xda>
   26dae:	f7ff fcaf 	bl	26710 <strchr>
   26db2:	4604      	mov	r4, r0
   26db4:	4620      	mov	r0, r4
   26db6:	b010      	add	sp, #64	; 0x40
   26db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26dbc:	1e44      	subs	r4, r0, #1
   26dbe:	e7c1      	b.n	26d44 <strstr+0xb4>
   26dc0:	042d      	lsls	r5, r5, #16
   26dc2:	7806      	ldrb	r6, [r0, #0]
   26dc4:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
   26dc8:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
   26dcc:	2e00      	cmp	r6, #0
   26dce:	d0cc      	beq.n	26d6a <strstr+0xda>
   26dd0:	ea46 0102 	orr.w	r1, r6, r2
   26dd4:	4620      	mov	r0, r4
   26dd6:	f814 6f01 	ldrb.w	r6, [r4, #1]!
   26dda:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
   26dde:	ea4f 2201 	mov.w	r2, r1, lsl #8
   26de2:	d001      	beq.n	26de8 <strstr+0x158>
   26de4:	2e00      	cmp	r6, #0
   26de6:	d1f3      	bne.n	26dd0 <strstr+0x140>
   26de8:	4293      	cmp	r3, r2
   26dea:	d1be      	bne.n	26d6a <strstr+0xda>
   26dec:	1e84      	subs	r4, r0, #2
   26dee:	e7a9      	b.n	26d44 <strstr+0xb4>
   26df0:	428b      	cmp	r3, r1
   26df2:	d1ba      	bne.n	26d6a <strstr+0xda>
   26df4:	e7cb      	b.n	26d8e <strstr+0xfe>
   26df6:	4601      	mov	r1, r0
   26df8:	463b      	mov	r3, r7
   26dfa:	4620      	mov	r0, r4
   26dfc:	4632      	mov	r2, r6
   26dfe:	f7ff fde9 	bl	269d4 <two_way_long_needle>
   26e02:	4604      	mov	r4, r0
   26e04:	e79e      	b.n	26d44 <strstr+0xb4>
   26e06:	bf00      	nop

00026e08 <sulp>:
   26e08:	b570      	push	{r4, r5, r6, lr}
   26e0a:	4604      	mov	r4, r0
   26e0c:	460d      	mov	r5, r1
   26e0e:	4616      	mov	r6, r2
   26e10:	ec45 4b10 	vmov	d0, r4, r5
   26e14:	f004 fa76 	bl	2b304 <__ulp>
   26e18:	ec51 0b10 	vmov	r0, r1, d0
   26e1c:	b16e      	cbz	r6, 26e3a <sulp+0x32>
   26e1e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   26e22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   26e26:	2b00      	cmp	r3, #0
   26e28:	dd07      	ble.n	26e3a <sulp+0x32>
   26e2a:	4a04      	ldr	r2, [pc, #16]	; (26e3c <sulp+0x34>)
   26e2c:	2400      	movs	r4, #0
   26e2e:	eb02 5503 	add.w	r5, r2, r3, lsl #20
   26e32:	4622      	mov	r2, r4
   26e34:	462b      	mov	r3, r5
   26e36:	f7e5 ffdd 	bl	cdf4 <__aeabi_dmul>
   26e3a:	bd70      	pop	{r4, r5, r6, pc}
   26e3c:	3ff00000 	.word	0x3ff00000

00026e40 <_strtod_r>:
   26e40:	4b01      	ldr	r3, [pc, #4]	; (26e48 <_strtod_r+0x8>)
   26e42:	f7e6 bdb9 	b.w	d9b8 <_strtod_l>
   26e46:	bf00      	nop
   26e48:	200208f0 	.word	0x200208f0

00026e4c <_strtol_l.isra.0>:
   26e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26e50:	4682      	mov	sl, r0
   26e52:	460d      	mov	r5, r1
   26e54:	4839      	ldr	r0, [pc, #228]	; (26f3c <_strtol_l.isra.0+0xf0>)
   26e56:	462f      	mov	r7, r5
   26e58:	f815 4b01 	ldrb.w	r4, [r5], #1
   26e5c:	5d06      	ldrb	r6, [r0, r4]
   26e5e:	f016 0608 	ands.w	r6, r6, #8
   26e62:	d1f8      	bne.n	26e56 <_strtol_l.isra.0+0xa>
   26e64:	2c2d      	cmp	r4, #45	; 0x2d
   26e66:	d04d      	beq.n	26f04 <_strtol_l.isra.0+0xb8>
   26e68:	2c2b      	cmp	r4, #43	; 0x2b
   26e6a:	d03a      	beq.n	26ee2 <_strtol_l.isra.0+0x96>
   26e6c:	46a3      	mov	fp, r4
   26e6e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   26e72:	f033 0010 	bics.w	r0, r3, #16
   26e76:	d104      	bne.n	26e82 <_strtol_l.isra.0+0x36>
   26e78:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   26e7c:	d049      	beq.n	26f12 <_strtol_l.isra.0+0xc6>
   26e7e:	b903      	cbnz	r3, 26e82 <_strtol_l.isra.0+0x36>
   26e80:	230a      	movs	r3, #10
   26e82:	469e      	mov	lr, r3
   26e84:	2700      	movs	r7, #0
   26e86:	fbb9 fcfe 	udiv	ip, r9, lr
   26e8a:	4638      	mov	r0, r7
   26e8c:	fb0e 981c 	mls	r8, lr, ip, r9
   26e90:	e00e      	b.n	26eb0 <_strtol_l.isra.0+0x64>
   26e92:	f1ab 0437 	sub.w	r4, fp, #55	; 0x37
   26e96:	42a3      	cmp	r3, r4
   26e98:	dd1a      	ble.n	26ed0 <_strtol_l.isra.0+0x84>
   26e9a:	2f00      	cmp	r7, #0
   26e9c:	db04      	blt.n	26ea8 <_strtol_l.isra.0+0x5c>
   26e9e:	4584      	cmp	ip, r0
   26ea0:	d302      	bcc.n	26ea8 <_strtol_l.isra.0+0x5c>
   26ea2:	d124      	bne.n	26eee <_strtol_l.isra.0+0xa2>
   26ea4:	45a0      	cmp	r8, r4
   26ea6:	da22      	bge.n	26eee <_strtol_l.isra.0+0xa2>
   26ea8:	f04f 37ff 	mov.w	r7, #4294967295
   26eac:	f815 bb01 	ldrb.w	fp, [r5], #1
   26eb0:	f1ab 0430 	sub.w	r4, fp, #48	; 0x30
   26eb4:	2c09      	cmp	r4, #9
   26eb6:	d9ee      	bls.n	26e96 <_strtol_l.isra.0+0x4a>
   26eb8:	f1ab 0441 	sub.w	r4, fp, #65	; 0x41
   26ebc:	2c19      	cmp	r4, #25
   26ebe:	d9e8      	bls.n	26e92 <_strtol_l.isra.0+0x46>
   26ec0:	f1ab 0461 	sub.w	r4, fp, #97	; 0x61
   26ec4:	2c19      	cmp	r4, #25
   26ec6:	d803      	bhi.n	26ed0 <_strtol_l.isra.0+0x84>
   26ec8:	f1ab 0457 	sub.w	r4, fp, #87	; 0x57
   26ecc:	42a3      	cmp	r3, r4
   26ece:	dce4      	bgt.n	26e9a <_strtol_l.isra.0+0x4e>
   26ed0:	1c7b      	adds	r3, r7, #1
   26ed2:	d010      	beq.n	26ef6 <_strtol_l.isra.0+0xaa>
   26ed4:	b106      	cbz	r6, 26ed8 <_strtol_l.isra.0+0x8c>
   26ed6:	4240      	negs	r0, r0
   26ed8:	b10a      	cbz	r2, 26ede <_strtol_l.isra.0+0x92>
   26eda:	bb6f      	cbnz	r7, 26f38 <_strtol_l.isra.0+0xec>
   26edc:	6011      	str	r1, [r2, #0]
   26ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26ee2:	f895 b000 	ldrb.w	fp, [r5]
   26ee6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   26eea:	1cbd      	adds	r5, r7, #2
   26eec:	e7c1      	b.n	26e72 <_strtol_l.isra.0+0x26>
   26eee:	fb0e 4000 	mla	r0, lr, r0, r4
   26ef2:	2701      	movs	r7, #1
   26ef4:	e7da      	b.n	26eac <_strtol_l.isra.0+0x60>
   26ef6:	2322      	movs	r3, #34	; 0x22
   26ef8:	f8ca 3000 	str.w	r3, [sl]
   26efc:	b1a2      	cbz	r2, 26f28 <_strtol_l.isra.0+0xdc>
   26efe:	1e69      	subs	r1, r5, #1
   26f00:	4648      	mov	r0, r9
   26f02:	e7eb      	b.n	26edc <_strtol_l.isra.0+0x90>
   26f04:	f895 b000 	ldrb.w	fp, [r5]
   26f08:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   26f0c:	1cbd      	adds	r5, r7, #2
   26f0e:	2601      	movs	r6, #1
   26f10:	e7af      	b.n	26e72 <_strtol_l.isra.0+0x26>
   26f12:	7828      	ldrb	r0, [r5, #0]
   26f14:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   26f18:	2858      	cmp	r0, #88	; 0x58
   26f1a:	d108      	bne.n	26f2e <_strtol_l.isra.0+0xe2>
   26f1c:	2310      	movs	r3, #16
   26f1e:	f895 b001 	ldrb.w	fp, [r5, #1]
   26f22:	3502      	adds	r5, #2
   26f24:	469e      	mov	lr, r3
   26f26:	e7ad      	b.n	26e84 <_strtol_l.isra.0+0x38>
   26f28:	4648      	mov	r0, r9
   26f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26f2e:	2b00      	cmp	r3, #0
   26f30:	d1a7      	bne.n	26e82 <_strtol_l.isra.0+0x36>
   26f32:	2308      	movs	r3, #8
   26f34:	469e      	mov	lr, r3
   26f36:	e7a5      	b.n	26e84 <_strtol_l.isra.0+0x38>
   26f38:	4681      	mov	r9, r0
   26f3a:	e7e0      	b.n	26efe <_strtol_l.isra.0+0xb2>
   26f3c:	0002f5d9 	.word	0x0002f5d9

00026f40 <_strtol_r>:
   26f40:	f7ff bf84 	b.w	26e4c <_strtol_l.isra.0>

00026f44 <strtol>:
   26f44:	b430      	push	{r4, r5}
   26f46:	460d      	mov	r5, r1
   26f48:	4c03      	ldr	r4, [pc, #12]	; (26f58 <strtol+0x14>)
   26f4a:	4613      	mov	r3, r2
   26f4c:	4601      	mov	r1, r0
   26f4e:	462a      	mov	r2, r5
   26f50:	6820      	ldr	r0, [r4, #0]
   26f52:	bc30      	pop	{r4, r5}
   26f54:	f7ff bf7a 	b.w	26e4c <_strtol_l.isra.0>
   26f58:	200204d8 	.word	0x200204d8

00026f5c <_strtoul_l.isra.0>:
   26f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26f60:	468c      	mov	ip, r1
   26f62:	4686      	mov	lr, r0
   26f64:	4840      	ldr	r0, [pc, #256]	; (27068 <_strtoul_l.isra.0+0x10c>)
   26f66:	4667      	mov	r7, ip
   26f68:	f81c 4b01 	ldrb.w	r4, [ip], #1
   26f6c:	5d06      	ldrb	r6, [r0, r4]
   26f6e:	f016 0608 	ands.w	r6, r6, #8
   26f72:	d1f8      	bne.n	26f66 <_strtoul_l.isra.0+0xa>
   26f74:	2c2d      	cmp	r4, #45	; 0x2d
   26f76:	d057      	beq.n	27028 <_strtoul_l.isra.0+0xcc>
   26f78:	2c2b      	cmp	r4, #43	; 0x2b
   26f7a:	d00d      	beq.n	26f98 <_strtoul_l.isra.0+0x3c>
   26f7c:	4625      	mov	r5, r4
   26f7e:	f033 0010 	bics.w	r0, r3, #16
   26f82:	d110      	bne.n	26fa6 <_strtoul_l.isra.0+0x4a>
   26f84:	2d30      	cmp	r5, #48	; 0x30
   26f86:	d055      	beq.n	27034 <_strtoul_l.isra.0+0xd8>
   26f88:	b96b      	cbnz	r3, 26fa6 <_strtoul_l.isra.0+0x4a>
   26f8a:	230a      	movs	r3, #10
   26f8c:	f04f 0905 	mov.w	r9, #5
   26f90:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 2706c <_strtoul_l.isra.0+0x110>
   26f94:	469a      	mov	sl, r3
   26f96:	e00f      	b.n	26fb8 <_strtoul_l.isra.0+0x5c>
   26f98:	f033 0010 	bics.w	r0, r3, #16
   26f9c:	f89c 5000 	ldrb.w	r5, [ip]
   26fa0:	f107 0c02 	add.w	ip, r7, #2
   26fa4:	d0ee      	beq.n	26f84 <_strtoul_l.isra.0+0x28>
   26fa6:	f04f 38ff 	mov.w	r8, #4294967295
   26faa:	469a      	mov	sl, r3
   26fac:	fbb8 f8f3 	udiv	r8, r8, r3
   26fb0:	fb03 f908 	mul.w	r9, r3, r8
   26fb4:	ea6f 0909 	mvn.w	r9, r9
   26fb8:	2700      	movs	r7, #0
   26fba:	4638      	mov	r0, r7
   26fbc:	e00e      	b.n	26fdc <_strtoul_l.isra.0+0x80>
   26fbe:	f1a5 0437 	sub.w	r4, r5, #55	; 0x37
   26fc2:	42a3      	cmp	r3, r4
   26fc4:	dd1a      	ble.n	26ffc <_strtoul_l.isra.0+0xa0>
   26fc6:	2f00      	cmp	r7, #0
   26fc8:	db04      	blt.n	26fd4 <_strtoul_l.isra.0+0x78>
   26fca:	4540      	cmp	r0, r8
   26fcc:	d802      	bhi.n	26fd4 <_strtoul_l.isra.0+0x78>
   26fce:	d11e      	bne.n	2700e <_strtoul_l.isra.0+0xb2>
   26fd0:	454c      	cmp	r4, r9
   26fd2:	dd1c      	ble.n	2700e <_strtoul_l.isra.0+0xb2>
   26fd4:	f04f 37ff 	mov.w	r7, #4294967295
   26fd8:	f81c 5b01 	ldrb.w	r5, [ip], #1
   26fdc:	f1a5 0430 	sub.w	r4, r5, #48	; 0x30
   26fe0:	2c09      	cmp	r4, #9
   26fe2:	d9ee      	bls.n	26fc2 <_strtoul_l.isra.0+0x66>
   26fe4:	f1a5 0441 	sub.w	r4, r5, #65	; 0x41
   26fe8:	2c19      	cmp	r4, #25
   26fea:	d9e8      	bls.n	26fbe <_strtoul_l.isra.0+0x62>
   26fec:	f1a5 0461 	sub.w	r4, r5, #97	; 0x61
   26ff0:	2c19      	cmp	r4, #25
   26ff2:	d803      	bhi.n	26ffc <_strtoul_l.isra.0+0xa0>
   26ff4:	f1a5 0457 	sub.w	r4, r5, #87	; 0x57
   26ff8:	42a3      	cmp	r3, r4
   26ffa:	dce4      	bgt.n	26fc6 <_strtoul_l.isra.0+0x6a>
   26ffc:	1c7b      	adds	r3, r7, #1
   26ffe:	d00a      	beq.n	27016 <_strtoul_l.isra.0+0xba>
   27000:	b106      	cbz	r6, 27004 <_strtoul_l.isra.0+0xa8>
   27002:	4240      	negs	r0, r0
   27004:	b10a      	cbz	r2, 2700a <_strtoul_l.isra.0+0xae>
   27006:	b967      	cbnz	r7, 27022 <_strtoul_l.isra.0+0xc6>
   27008:	6011      	str	r1, [r2, #0]
   2700a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2700e:	fb0a 4000 	mla	r0, sl, r0, r4
   27012:	2701      	movs	r7, #1
   27014:	e7e0      	b.n	26fd8 <_strtoul_l.isra.0+0x7c>
   27016:	2322      	movs	r3, #34	; 0x22
   27018:	4638      	mov	r0, r7
   2701a:	f8ce 3000 	str.w	r3, [lr]
   2701e:	2a00      	cmp	r2, #0
   27020:	d0f3      	beq.n	2700a <_strtoul_l.isra.0+0xae>
   27022:	f10c 31ff 	add.w	r1, ip, #4294967295
   27026:	e7ef      	b.n	27008 <_strtoul_l.isra.0+0xac>
   27028:	f89c 5000 	ldrb.w	r5, [ip]
   2702c:	2601      	movs	r6, #1
   2702e:	f107 0c02 	add.w	ip, r7, #2
   27032:	e7a4      	b.n	26f7e <_strtoul_l.isra.0+0x22>
   27034:	f89c 0000 	ldrb.w	r0, [ip]
   27038:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2703c:	2858      	cmp	r0, #88	; 0x58
   2703e:	d10a      	bne.n	27056 <_strtoul_l.isra.0+0xfa>
   27040:	2310      	movs	r3, #16
   27042:	f89c 5001 	ldrb.w	r5, [ip, #1]
   27046:	f04f 090f 	mov.w	r9, #15
   2704a:	f10c 0c02 	add.w	ip, ip, #2
   2704e:	469a      	mov	sl, r3
   27050:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   27054:	e7b0      	b.n	26fb8 <_strtoul_l.isra.0+0x5c>
   27056:	2b00      	cmp	r3, #0
   27058:	d1a5      	bne.n	26fa6 <_strtoul_l.isra.0+0x4a>
   2705a:	2308      	movs	r3, #8
   2705c:	f04f 0907 	mov.w	r9, #7
   27060:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   27064:	469a      	mov	sl, r3
   27066:	e7a7      	b.n	26fb8 <_strtoul_l.isra.0+0x5c>
   27068:	0002f5d9 	.word	0x0002f5d9
   2706c:	19999999 	.word	0x19999999

00027070 <_strtoul_r>:
   27070:	f7ff bf74 	b.w	26f5c <_strtoul_l.isra.0>

00027074 <strtoul>:
   27074:	b430      	push	{r4, r5}
   27076:	460d      	mov	r5, r1
   27078:	4c03      	ldr	r4, [pc, #12]	; (27088 <strtoul+0x14>)
   2707a:	4613      	mov	r3, r2
   2707c:	4601      	mov	r1, r0
   2707e:	462a      	mov	r2, r5
   27080:	6820      	ldr	r0, [r4, #0]
   27082:	bc30      	pop	{r4, r5}
   27084:	f7ff bf6a 	b.w	26f5c <_strtoul_l.isra.0>
   27088:	200204d8 	.word	0x200204d8

0002708c <__ssvfscanf_r>:
   2708c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27090:	ed2d 8b02 	vpush	{d8}
   27094:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
   27098:	468b      	mov	fp, r1
   2709a:	4682      	mov	sl, r0
   2709c:	af02      	add	r7, sp, #8
   2709e:	62bb      	str	r3, [r7, #40]	; 0x28
   270a0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   270a4:	0499      	lsls	r1, r3, #18
   270a6:	d409      	bmi.n	270bc <__ssvfscanf_r+0x30>
   270a8:	f8db 1064 	ldr.w	r1, [fp, #100]	; 0x64
   270ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   270b0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   270b4:	f8ab 300c 	strh.w	r3, [fp, #12]
   270b8:	f8cb 1064 	str.w	r1, [fp, #100]	; 0x64
   270bc:	f812 3b01 	ldrb.w	r3, [r2], #1
   270c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   270c2:	647b      	str	r3, [r7, #68]	; 0x44
   270c4:	2b00      	cmp	r3, #0
   270c6:	f001 80fc 	beq.w	282c2 <_flash_used+0x646>
   270ca:	2200      	movs	r2, #0
   270cc:	ee08 aa10 	vmov	s16, sl
   270d0:	623a      	str	r2, [r7, #32]
   270d2:	4692      	mov	sl, r2
   270d4:	637a      	str	r2, [r7, #52]	; 0x34
   270d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   270d8:	627a      	str	r2, [r7, #36]	; 0x24
   270da:	633a      	str	r2, [r7, #48]	; 0x30
   270dc:	4a7c      	ldr	r2, [pc, #496]	; (272d0 <__ssvfscanf_r+0x244>)
   270de:	5cd5      	ldrb	r5, [r2, r3]
   270e0:	f015 0508 	ands.w	r5, r5, #8
   270e4:	f040 80ac 	bne.w	27240 <__ssvfscanf_r+0x1b4>
   270e8:	2b25      	cmp	r3, #37	; 0x25
   270ea:	f040 8088 	bne.w	271fe <__ssvfscanf_r+0x172>
   270ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   270f0:	462c      	mov	r4, r5
   270f2:	46a8      	mov	r8, r5
   270f4:	7802      	ldrb	r2, [r0, #0]
   270f6:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
   270fa:	1c41      	adds	r1, r0, #1
   270fc:	2b55      	cmp	r3, #85	; 0x55
   270fe:	d86d      	bhi.n	271dc <__ssvfscanf_r+0x150>
   27100:	e8df f013 	tbh	[pc, r3, lsl #1]
   27104:	006c007c 	.word	0x006c007c
   27108:	006c006c 	.word	0x006c006c
   2710c:	04cf006c 	.word	0x04cf006c
   27110:	006c006c 	.word	0x006c006c
   27114:	006c006c 	.word	0x006c006c
   27118:	00c5006c 	.word	0x00c5006c
   2711c:	00c500c5 	.word	0x00c500c5
   27120:	00c500c5 	.word	0x00c500c5
   27124:	00c500c5 	.word	0x00c500c5
   27128:	00c500c5 	.word	0x00c500c5
   2712c:	006c00c5 	.word	0x006c00c5
   27130:	006c006c 	.word	0x006c006c
   27134:	006c006c 	.word	0x006c006c
   27138:	006c006c 	.word	0x006c006c
   2713c:	006c00d1 	.word	0x006c00d1
   27140:	04b104a1 	.word	0x04b104a1
   27144:	00d100d1 	.word	0x00d100d1
   27148:	006c00d1 	.word	0x006c00d1
   2714c:	006c006c 	.word	0x006c006c
   27150:	0439006c 	.word	0x0439006c
   27154:	006c006c 	.word	0x006c006c
   27158:	006c04a8 	.word	0x006c04a8
   2715c:	006c006c 	.word	0x006c006c
   27160:	006c049c 	.word	0x006c049c
   27164:	006c006c 	.word	0x006c006c
   27168:	0442006c 	.word	0x0442006c
   2716c:	006c006c 	.word	0x006c006c
   27170:	006c04ba 	.word	0x006c04ba
   27174:	006c006c 	.word	0x006c006c
   27178:	006c006c 	.word	0x006c006c
   2717c:	006c00d1 	.word	0x006c00d1
   27180:	04b304a3 	.word	0x04b304a3
   27184:	00d100d1 	.word	0x00d100d1
   27188:	04f500d1 	.word	0x04f500d1
   2718c:	04390501 	.word	0x04390501
   27190:	04c3006c 	.word	0x04c3006c
   27194:	04e604d8 	.word	0x04e604d8
   27198:	051104aa 	.word	0x051104aa
   2719c:	006c006c 	.word	0x006c006c
   271a0:	0432049e 	.word	0x0432049e
   271a4:	006c0509 	.word	0x006c0509
   271a8:	0442006c 	.word	0x0442006c
   271ac:	0432006c 	.word	0x0432006c
   271b0:	4659      	mov	r1, fp
   271b2:	ee18 0a10 	vmov	r0, s16
   271b6:	f004 fd77 	bl	2bca8 <__ssrefill_r>
   271ba:	2800      	cmp	r0, #0
   271bc:	f000 87c5 	beq.w	2814a <_flash_used+0x4ce>
   271c0:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   271c4:	2e00      	cmp	r6, #0
   271c6:	f000 8216 	beq.w	275f6 <__ssvfscanf_r+0x56a>
   271ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   271cc:	2b00      	cmp	r3, #0
   271ce:	f000 870c 	beq.w	27fea <_flash_used+0x36e>
   271d2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   271d6:	065a      	lsls	r2, r3, #25
   271d8:	f100 8707 	bmi.w	27fea <_flash_used+0x36e>
   271dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   271de:	b12b      	cbz	r3, 271ec <__ssvfscanf_r+0x160>
   271e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   271e2:	681e      	ldr	r6, [r3, #0]
   271e4:	b116      	cbz	r6, 271ec <__ssvfscanf_r+0x160>
   271e6:	4630      	mov	r0, r6
   271e8:	f7fe fc06 	bl	259f8 <free>
   271ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
   271ee:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
   271f2:	46bd      	mov	sp, r7
   271f4:	ecbd 8b02 	vpop	{d8}
   271f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   271fc:	63f9      	str	r1, [r7, #60]	; 0x3c
   271fe:	f8db 3004 	ldr.w	r3, [fp, #4]
   27202:	2b00      	cmp	r3, #0
   27204:	dd3b      	ble.n	2727e <__ssvfscanf_r+0x1f2>
   27206:	f8db 3000 	ldr.w	r3, [fp]
   2720a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2720c:	7819      	ldrb	r1, [r3, #0]
   2720e:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   27212:	4291      	cmp	r1, r2
   27214:	d1e2      	bne.n	271dc <__ssvfscanf_r+0x150>
   27216:	f8db 2004 	ldr.w	r2, [fp, #4]
   2721a:	3301      	adds	r3, #1
   2721c:	f10a 0a01 	add.w	sl, sl, #1
   27220:	3a01      	subs	r2, #1
   27222:	e9cb 3200 	strd	r3, r2, [fp]
   27226:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27228:	f812 3b01 	ldrb.w	r3, [r2], #1
   2722c:	63fa      	str	r2, [r7, #60]	; 0x3c
   2722e:	647b      	str	r3, [r7, #68]	; 0x44
   27230:	2b00      	cmp	r3, #0
   27232:	d0d3      	beq.n	271dc <__ssvfscanf_r+0x150>
   27234:	4a26      	ldr	r2, [pc, #152]	; (272d0 <__ssvfscanf_r+0x244>)
   27236:	5cd5      	ldrb	r5, [r2, r3]
   27238:	f015 0508 	ands.w	r5, r5, #8
   2723c:	f43f af54 	beq.w	270e8 <__ssvfscanf_r+0x5c>
   27240:	f8db 2004 	ldr.w	r2, [fp, #4]
   27244:	ee18 4a10 	vmov	r4, s16
   27248:	e010      	b.n	2726c <__ssvfscanf_r+0x1e0>
   2724a:	f8db 3000 	ldr.w	r3, [fp]
   2724e:	4920      	ldr	r1, [pc, #128]	; (272d0 <__ssvfscanf_r+0x244>)
   27250:	781a      	ldrb	r2, [r3, #0]
   27252:	3301      	adds	r3, #1
   27254:	5c8a      	ldrb	r2, [r1, r2]
   27256:	0712      	lsls	r2, r2, #28
   27258:	d5e5      	bpl.n	27226 <__ssvfscanf_r+0x19a>
   2725a:	f8db 2004 	ldr.w	r2, [fp, #4]
   2725e:	f10a 0a01 	add.w	sl, sl, #1
   27262:	f8cb 3000 	str.w	r3, [fp]
   27266:	3a01      	subs	r2, #1
   27268:	f8cb 2004 	str.w	r2, [fp, #4]
   2726c:	2a00      	cmp	r2, #0
   2726e:	dcec      	bgt.n	2724a <__ssvfscanf_r+0x1be>
   27270:	4659      	mov	r1, fp
   27272:	4620      	mov	r0, r4
   27274:	f004 fd18 	bl	2bca8 <__ssrefill_r>
   27278:	2800      	cmp	r0, #0
   2727a:	d0e6      	beq.n	2724a <__ssvfscanf_r+0x1be>
   2727c:	e7d3      	b.n	27226 <__ssvfscanf_r+0x19a>
   2727e:	4659      	mov	r1, fp
   27280:	ee18 0a10 	vmov	r0, s16
   27284:	f004 fd10 	bl	2bca8 <__ssrefill_r>
   27288:	2800      	cmp	r0, #0
   2728a:	d0bc      	beq.n	27206 <__ssvfscanf_r+0x17a>
   2728c:	e79d      	b.n	271ca <__ssvfscanf_r+0x13e>
   2728e:	f014 0f8f 	tst.w	r4, #143	; 0x8f
   27292:	d1a3      	bne.n	271dc <__ssvfscanf_r+0x150>
   27294:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   27298:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   2729c:	7842      	ldrb	r2, [r0, #1]
   2729e:	4608      	mov	r0, r1
   272a0:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   272a4:	e727      	b.n	270f6 <__ssvfscanf_r+0x6a>
   272a6:	2604      	movs	r6, #4
   272a8:	63f9      	str	r1, [r7, #60]	; 0x3c
   272aa:	f8db 3004 	ldr.w	r3, [fp, #4]
   272ae:	2b00      	cmp	r3, #0
   272b0:	f340 8377 	ble.w	279a2 <__ssvfscanf_r+0x916>
   272b4:	0662      	lsls	r2, r4, #25
   272b6:	f140 837f 	bpl.w	279b8 <__ssvfscanf_r+0x92c>
   272ba:	1e73      	subs	r3, r6, #1
   272bc:	2b03      	cmp	r3, #3
   272be:	f200 8632 	bhi.w	27f26 <_flash_used+0x2aa>
   272c2:	e8df f013 	tbh	[pc, r3, lsl #1]
   272c6:	01b4      	.short	0x01b4
   272c8:	00b2015c 	.word	0x00b2015c
   272cc:	0007      	.short	0x0007
   272ce:	bf00      	nop
   272d0:	0002f5d9 	.word	0x0002f5d9
   272d4:	ee18 0a10 	vmov	r0, s16
   272d8:	f003 fb9e 	bl	2aa18 <_localeconv_r>
   272dc:	f108 33ff 	add.w	r3, r8, #4294967295
   272e0:	6802      	ldr	r2, [r0, #0]
   272e2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   272e6:	617a      	str	r2, [r7, #20]
   272e8:	f240 84e4 	bls.w	27cb4 <_flash_used+0x38>
   272ec:	f46f 7cae 	mvn.w	ip, #348	; 0x15c
   272f0:	eb08 030c 	add.w	r3, r8, ip
   272f4:	f240 185d 	movw	r8, #349	; 0x15d
   272f8:	60fb      	str	r3, [r7, #12]
   272fa:	2600      	movs	r6, #0
   272fc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   27300:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
   27304:	607d      	str	r5, [r7, #4]
   27306:	4699      	mov	r9, r3
   27308:	4645      	mov	r5, r8
   2730a:	46d8      	mov	r8, fp
   2730c:	46a3      	mov	fp, r4
   2730e:	4634      	mov	r4, r6
   27310:	61fb      	str	r3, [r7, #28]
   27312:	63be      	str	r6, [r7, #56]	; 0x38
   27314:	60be      	str	r6, [r7, #8]
   27316:	613e      	str	r6, [r7, #16]
   27318:	61be      	str	r6, [r7, #24]
   2731a:	f8d8 1000 	ldr.w	r1, [r8]
   2731e:	7808      	ldrb	r0, [r1, #0]
   27320:	f1a0 0e2b 	sub.w	lr, r0, #43	; 0x2b
   27324:	f1be 0f4e 	cmp.w	lr, #78	; 0x4e
   27328:	d850      	bhi.n	273cc <__ssvfscanf_r+0x340>
   2732a:	e8df f01e 	tbh	[pc, lr, lsl #1]
   2732e:	0275      	.short	0x0275
   27330:	0275004f 	.word	0x0275004f
   27334:	004f004f 	.word	0x004f004f
   27338:	00780310 	.word	0x00780310
   2733c:	00780078 	.word	0x00780078
   27340:	00780078 	.word	0x00780078
   27344:	00780078 	.word	0x00780078
   27348:	00780078 	.word	0x00780078
   2734c:	004f004f 	.word	0x004f004f
   27350:	004f004f 	.word	0x004f004f
   27354:	004f004f 	.word	0x004f004f
   27358:	026e004f 	.word	0x026e004f
   2735c:	004f004f 	.word	0x004f004f
   27360:	02f0004f 	.word	0x02f0004f
   27364:	004f02eb 	.word	0x004f02eb
   27368:	0291004f 	.word	0x0291004f
   2736c:	004f004f 	.word	0x004f004f
   27370:	004f004f 	.word	0x004f004f
   27374:	004f027c 	.word	0x004f027c
   27378:	004f004f 	.word	0x004f004f
   2737c:	004f004f 	.word	0x004f004f
   27380:	004f0269 	.word	0x004f0269
   27384:	004f004f 	.word	0x004f004f
   27388:	0264004f 	.word	0x0264004f
   2738c:	004f004f 	.word	0x004f004f
   27390:	004f004f 	.word	0x004f004f
   27394:	004f004f 	.word	0x004f004f
   27398:	026e004f 	.word	0x026e004f
   2739c:	004f004f 	.word	0x004f004f
   273a0:	02f0004f 	.word	0x02f0004f
   273a4:	004f02eb 	.word	0x004f02eb
   273a8:	0291004f 	.word	0x0291004f
   273ac:	004f004f 	.word	0x004f004f
   273b0:	004f004f 	.word	0x004f004f
   273b4:	004f027c 	.word	0x004f027c
   273b8:	004f004f 	.word	0x004f004f
   273bc:	004f004f 	.word	0x004f004f
   273c0:	004f0269 	.word	0x004f0269
   273c4:	004f004f 	.word	0x004f004f
   273c8:	0264004f 	.word	0x0264004f
   273cc:	697b      	ldr	r3, [r7, #20]
   273ce:	f893 e000 	ldrb.w	lr, [r3]
   273d2:	4586      	cmp	lr, r0
   273d4:	d117      	bne.n	27406 <__ssvfscanf_r+0x37a>
   273d6:	f41b 7f00 	tst.w	fp, #512	; 0x200
   273da:	d014      	beq.n	27406 <__ssvfscanf_r+0x37a>
   273dc:	f42b 7b20 	bic.w	fp, fp, #640	; 0x280
   273e0:	61be      	str	r6, [r7, #24]
   273e2:	3d01      	subs	r5, #1
   273e4:	f809 0b01 	strb.w	r0, [r9], #1
   273e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
   273ec:	f10a 0a01 	add.w	sl, sl, #1
   273f0:	3801      	subs	r0, #1
   273f2:	2800      	cmp	r0, #0
   273f4:	f8c8 0004 	str.w	r0, [r8, #4]
   273f8:	f340 83a8 	ble.w	27b4c <__ssvfscanf_r+0xac0>
   273fc:	1c48      	adds	r0, r1, #1
   273fe:	f8c8 0000 	str.w	r0, [r8]
   27402:	2d00      	cmp	r5, #0
   27404:	d189      	bne.n	2731a <__ssvfscanf_r+0x28e>
   27406:	617e      	str	r6, [r7, #20]
   27408:	4626      	mov	r6, r4
   2740a:	697b      	ldr	r3, [r7, #20]
   2740c:	465c      	mov	r4, fp
   2740e:	46c3      	mov	fp, r8
   27410:	2b00      	cmp	r3, #0
   27412:	f001 806a 	beq.w	284ea <_flash_used+0x86e>
   27416:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   2741a:	4635      	mov	r5, r6
   2741c:	e229      	b.n	27872 <__ssvfscanf_r+0x7e6>
   2741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27420:	42e3      	cmn	r3, r4
   27422:	d1f0      	bne.n	27406 <__ssvfscanf_r+0x37a>
   27424:	f42b 7bc0 	bic.w	fp, fp, #384	; 0x180
   27428:	e7db      	b.n	273e2 <__ssvfscanf_r+0x356>
   2742a:	f108 33ff 	add.w	r3, r8, #4294967295
   2742e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   27432:	f240 83be 	bls.w	27bb2 <__ssvfscanf_r+0xb26>
   27436:	f46f 70ae 	mvn.w	r0, #348	; 0x15c
   2743a:	eb08 0900 	add.w	r9, r8, r0
   2743e:	f240 185d 	movw	r8, #349	; 0x15d
   27442:	2300      	movs	r3, #0
   27444:	f507 75ac 	add.w	r5, r7, #344	; 0x158
   27448:	465e      	mov	r6, fp
   2744a:	f8c7 9038 	str.w	r9, [r7, #56]	; 0x38
   2744e:	46d3      	mov	fp, sl
   27450:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
   27454:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
   27458:	469a      	mov	sl, r3
   2745a:	61fd      	str	r5, [r7, #28]
   2745c:	6832      	ldr	r2, [r6, #0]
   2745e:	7810      	ldrb	r0, [r2, #0]
   27460:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   27464:	2b4d      	cmp	r3, #77	; 0x4d
   27466:	d861      	bhi.n	2752c <__ssvfscanf_r+0x4a0>
   27468:	e8df f013 	tbh	[pc, r3, lsl #1]
   2746c:	006002cd 	.word	0x006002cd
   27470:	006002cd 	.word	0x006002cd
   27474:	03600060 	.word	0x03600060
   27478:	026b026b 	.word	0x026b026b
   2747c:	026b026b 	.word	0x026b026b
   27480:	026b026b 	.word	0x026b026b
   27484:	02d3026b 	.word	0x02d3026b
   27488:	006002d3 	.word	0x006002d3
   2748c:	00600060 	.word	0x00600060
   27490:	00600060 	.word	0x00600060
   27494:	00600060 	.word	0x00600060
   27498:	004e004e 	.word	0x004e004e
   2749c:	004e004e 	.word	0x004e004e
   274a0:	004e004e 	.word	0x004e004e
   274a4:	00600060 	.word	0x00600060
   274a8:	00600060 	.word	0x00600060
   274ac:	00600060 	.word	0x00600060
   274b0:	00600060 	.word	0x00600060
   274b4:	00600060 	.word	0x00600060
   274b8:	00600060 	.word	0x00600060
   274bc:	00600060 	.word	0x00600060
   274c0:	00600060 	.word	0x00600060
   274c4:	02db0060 	.word	0x02db0060
   274c8:	00600060 	.word	0x00600060
   274cc:	00600060 	.word	0x00600060
   274d0:	00600060 	.word	0x00600060
   274d4:	00600060 	.word	0x00600060
   274d8:	004e004e 	.word	0x004e004e
   274dc:	004e004e 	.word	0x004e004e
   274e0:	004e004e 	.word	0x004e004e
   274e4:	00600060 	.word	0x00600060
   274e8:	00600060 	.word	0x00600060
   274ec:	00600060 	.word	0x00600060
   274f0:	00600060 	.word	0x00600060
   274f4:	00600060 	.word	0x00600060
   274f8:	00600060 	.word	0x00600060
   274fc:	00600060 	.word	0x00600060
   27500:	00600060 	.word	0x00600060
   27504:	02db0060 	.word	0x02db0060
   27508:	f1b9 0f0a 	cmp.w	r9, #10
   2750c:	dd0e      	ble.n	2752c <__ssvfscanf_r+0x4a0>
   2750e:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   27512:	f805 0b01 	strb.w	r0, [r5], #1
   27516:	6873      	ldr	r3, [r6, #4]
   27518:	3b01      	subs	r3, #1
   2751a:	2b00      	cmp	r3, #0
   2751c:	6073      	str	r3, [r6, #4]
   2751e:	f340 8328 	ble.w	27b72 <__ssvfscanf_r+0xae6>
   27522:	3201      	adds	r2, #1
   27524:	6032      	str	r2, [r6, #0]
   27526:	f1b8 0801 	subs.w	r8, r8, #1
   2752a:	d197      	bne.n	2745c <__ssvfscanf_r+0x3d0>
   2752c:	05e3      	lsls	r3, r4, #23
   2752e:	46d0      	mov	r8, sl
   27530:	f8c7 9024 	str.w	r9, [r7, #36]	; 0x24
   27534:	46da      	mov	sl, fp
   27536:	46b3      	mov	fp, r6
   27538:	d507      	bpl.n	2754a <__ssvfscanf_r+0x4be>
   2753a:	69fb      	ldr	r3, [r7, #28]
   2753c:	429d      	cmp	r5, r3
   2753e:	f200 8593 	bhi.w	28068 <_flash_used+0x3ec>
   27542:	69fb      	ldr	r3, [r7, #28]
   27544:	429d      	cmp	r5, r3
   27546:	f43f ae49 	beq.w	271dc <__ssvfscanf_r+0x150>
   2754a:	f014 0210 	ands.w	r2, r4, #16
   2754e:	f040 8321 	bne.w	27b94 <__ssvfscanf_r+0xb08>
   27552:	6a3e      	ldr	r6, [r7, #32]
   27554:	ee18 0a10 	vmov	r0, s16
   27558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2755a:	69f9      	ldr	r1, [r7, #28]
   2755c:	702a      	strb	r2, [r5, #0]
   2755e:	47b0      	blx	r6
   27560:	06a6      	lsls	r6, r4, #26
   27562:	f100 830f 	bmi.w	27b84 <__ssvfscanf_r+0xaf8>
   27566:	0721      	lsls	r1, r4, #28
   27568:	f100 84ab 	bmi.w	27ec2 <_flash_used+0x246>
   2756c:	0762      	lsls	r2, r4, #29
   2756e:	f140 870d 	bpl.w	2838c <_flash_used+0x710>
   27572:	6abc      	ldr	r4, [r7, #40]	; 0x28
   27574:	f854 3b04 	ldr.w	r3, [r4], #4
   27578:	8018      	strh	r0, [r3, #0]
   2757a:	62bc      	str	r4, [r7, #40]	; 0x28
   2757c:	e307      	b.n	27b8e <__ssvfscanf_r+0xb02>
   2757e:	f1b8 0f00 	cmp.w	r8, #0
   27582:	bf08      	it	eq
   27584:	f04f 38ff 	moveq.w	r8, #4294967295
   27588:	f014 0501 	ands.w	r5, r4, #1
   2758c:	f000 831c 	beq.w	27bc8 <__ssvfscanf_r+0xb3c>
   27590:	f014 0310 	ands.w	r3, r4, #16
   27594:	61fb      	str	r3, [r7, #28]
   27596:	f040 8604 	bne.w	281a2 <_flash_used+0x526>
   2759a:	0622      	lsls	r2, r4, #24
   2759c:	6abe      	ldr	r6, [r7, #40]	; 0x28
   2759e:	f140 8693 	bpl.w	282c8 <_flash_used+0x64c>
   275a2:	f856 3b04 	ldr.w	r3, [r6], #4
   275a6:	63bb      	str	r3, [r7, #56]	; 0x38
   275a8:	2b00      	cmp	r3, #0
   275aa:	f43f ae17 	beq.w	271dc <__ssvfscanf_r+0x150>
   275ae:	2080      	movs	r0, #128	; 0x80
   275b0:	f7fe fa1a 	bl	259e8 <malloc>
   275b4:	4681      	mov	r9, r0
   275b6:	2800      	cmp	r0, #0
   275b8:	f000 8517 	beq.w	27fea <_flash_used+0x36e>
   275bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   275be:	6bba      	ldr	r2, [r7, #56]	; 0x38
   275c0:	88dd      	ldrh	r5, [r3, #6]
   275c2:	889c      	ldrh	r4, [r3, #4]
   275c4:	6010      	str	r0, [r2, #0]
   275c6:	42a5      	cmp	r5, r4
   275c8:	f080 8468 	bcs.w	27e9c <_flash_used+0x220>
   275cc:	6818      	ldr	r0, [r3, #0]
   275ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
   275d0:	1c6b      	adds	r3, r5, #1
   275d2:	62be      	str	r6, [r7, #40]	; 0x28
   275d4:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
   275d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   275da:	f8c7 9018 	str.w	r9, [r7, #24]
   275de:	80d3      	strh	r3, [r2, #6]
   275e0:	2320      	movs	r3, #32
   275e2:	617b      	str	r3, [r7, #20]
   275e4:	f8db 3000 	ldr.w	r3, [fp]
   275e8:	4ac4      	ldr	r2, [pc, #784]	; (278fc <__ssvfscanf_r+0x870>)
   275ea:	781b      	ldrb	r3, [r3, #0]
   275ec:	5cd3      	ldrb	r3, [r2, r3]
   275ee:	f013 0508 	ands.w	r5, r3, #8
   275f2:	f000 8544 	beq.w	2807e <_flash_used+0x402>
   275f6:	69fb      	ldr	r3, [r7, #28]
   275f8:	2b00      	cmp	r3, #0
   275fa:	f47f ae14 	bne.w	27226 <__ssvfscanf_r+0x19a>
   275fe:	69ba      	ldr	r2, [r7, #24]
   27600:	f8c9 3000 	str.w	r3, [r9]
   27604:	eba9 0102 	sub.w	r1, r9, r2
   27608:	697a      	ldr	r2, [r7, #20]
   2760a:	108b      	asrs	r3, r1, #2
   2760c:	3301      	adds	r3, #1
   2760e:	429a      	cmp	r2, r3
   27610:	f240 8170 	bls.w	278f4 <__ssvfscanf_r+0x868>
   27614:	6bbc      	ldr	r4, [r7, #56]	; 0x38
   27616:	2c00      	cmp	r4, #0
   27618:	f000 816c 	beq.w	278f4 <__ssvfscanf_r+0x868>
   2761c:	3104      	adds	r1, #4
   2761e:	6820      	ldr	r0, [r4, #0]
   27620:	f7fe fd88 	bl	26134 <realloc>
   27624:	2800      	cmp	r0, #0
   27626:	f000 8165 	beq.w	278f4 <__ssvfscanf_r+0x868>
   2762a:	6020      	str	r0, [r4, #0]
   2762c:	e162      	b.n	278f4 <__ssvfscanf_r+0x868>
   2762e:	f1b8 0f00 	cmp.w	r8, #0
   27632:	bf08      	it	eq
   27634:	f04f 38ff 	moveq.w	r8, #4294967295
   27638:	07e2      	lsls	r2, r4, #31
   2763a:	f140 833f 	bpl.w	27cbc <_flash_used+0x40>
   2763e:	f014 0310 	ands.w	r3, r4, #16
   27642:	617b      	str	r3, [r7, #20]
   27644:	f040 85f2 	bne.w	2822c <_flash_used+0x5b0>
   27648:	0623      	lsls	r3, r4, #24
   2764a:	6abe      	ldr	r6, [r7, #40]	; 0x28
   2764c:	f140 864a 	bpl.w	282e4 <_flash_used+0x668>
   27650:	f856 3b04 	ldr.w	r3, [r6], #4
   27654:	60bb      	str	r3, [r7, #8]
   27656:	2b00      	cmp	r3, #0
   27658:	f43f adc0 	beq.w	271dc <__ssvfscanf_r+0x150>
   2765c:	2080      	movs	r0, #128	; 0x80
   2765e:	f7fe f9c3 	bl	259e8 <malloc>
   27662:	4681      	mov	r9, r0
   27664:	2800      	cmp	r0, #0
   27666:	f000 84c0 	beq.w	27fea <_flash_used+0x36e>
   2766a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2766c:	68ba      	ldr	r2, [r7, #8]
   2766e:	88dd      	ldrh	r5, [r3, #6]
   27670:	889c      	ldrh	r4, [r3, #4]
   27672:	6010      	str	r0, [r2, #0]
   27674:	42a5      	cmp	r5, r4
   27676:	f080 83ed 	bcs.w	27e54 <_flash_used+0x1d8>
   2767a:	6818      	ldr	r0, [r3, #0]
   2767c:	68ba      	ldr	r2, [r7, #8]
   2767e:	1c6b      	adds	r3, r5, #1
   27680:	62be      	str	r6, [r7, #40]	; 0x28
   27682:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
   27686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27688:	f8c7 900c 	str.w	r9, [r7, #12]
   2768c:	80d3      	strh	r3, [r2, #6]
   2768e:	2320      	movs	r3, #32
   27690:	613b      	str	r3, [r7, #16]
   27692:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   27694:	2400      	movs	r4, #0
   27696:	f8c7 a01c 	str.w	sl, [r7, #28]
   2769a:	ee18 aa10 	vmov	sl, s16
   2769e:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   276a2:	e050      	b.n	27746 <__ssvfscanf_r+0x6ba>
   276a4:	4605      	mov	r5, r0
   276a6:	f8c9 0000 	str.w	r0, [r9]
   276aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
   276ae:	2208      	movs	r2, #8
   276b0:	2100      	movs	r1, #0
   276b2:	4618      	mov	r0, r3
   276b4:	61bb      	str	r3, [r7, #24]
   276b6:	f7fe fce1 	bl	2607c <memset>
   276ba:	4891      	ldr	r0, [pc, #580]	; (27900 <__ssvfscanf_r+0x874>)
   276bc:	462a      	mov	r2, r5
   276be:	69bb      	ldr	r3, [r7, #24]
   276c0:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
   276c4:	f107 0140 	add.w	r1, r7, #64	; 0x40
   276c8:	4605      	mov	r5, r0
   276ca:	4650      	mov	r0, sl
   276cc:	47a8      	blx	r5
   276ce:	2801      	cmp	r0, #1
   276d0:	f000 84b0 	beq.w	28034 <_flash_used+0x3b8>
   276d4:	2200      	movs	r2, #0
   276d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
   276da:	5c9b      	ldrb	r3, [r3, r2]
   276dc:	2b00      	cmp	r3, #0
   276de:	f000 866e 	beq.w	283be <_flash_used+0x742>
   276e2:	69fb      	ldr	r3, [r7, #28]
   276e4:	2e03      	cmp	r6, #3
   276e6:	4443      	add	r3, r8
   276e8:	61fb      	str	r3, [r7, #28]
   276ea:	f000 84a7 	beq.w	2803c <_flash_used+0x3c0>
   276ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   276f0:	3b01      	subs	r3, #1
   276f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   276f4:	697d      	ldr	r5, [r7, #20]
   276f6:	2d00      	cmp	r5, #0
   276f8:	f040 8499 	bne.w	2802e <_flash_used+0x3b2>
   276fc:	f109 0904 	add.w	r9, r9, #4
   27700:	68f8      	ldr	r0, [r7, #12]
   27702:	693b      	ldr	r3, [r7, #16]
   27704:	eba9 0400 	sub.w	r4, r9, r0
   27708:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   2770c:	f200 848f 	bhi.w	2802e <_flash_used+0x3b2>
   27710:	68ba      	ldr	r2, [r7, #8]
   27712:	2a00      	cmp	r2, #0
   27714:	f000 848b 	beq.w	2802e <_flash_used+0x3b2>
   27718:	00d9      	lsls	r1, r3, #3
   2771a:	f7fe fd0b 	bl	26134 <realloc>
   2771e:	60f8      	str	r0, [r7, #12]
   27720:	2800      	cmp	r0, #0
   27722:	f000 8462 	beq.w	27fea <_flash_used+0x36e>
   27726:	693b      	ldr	r3, [r7, #16]
   27728:	eb00 0904 	add.w	r9, r0, r4
   2772c:	68ba      	ldr	r2, [r7, #8]
   2772e:	462c      	mov	r4, r5
   27730:	005b      	lsls	r3, r3, #1
   27732:	6010      	str	r0, [r2, #0]
   27734:	613b      	str	r3, [r7, #16]
   27736:	f8db 3004 	ldr.w	r3, [fp, #4]
   2773a:	2b00      	cmp	r3, #0
   2773c:	dd3c      	ble.n	277b8 <__ssvfscanf_r+0x72c>
   2773e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27740:	2b00      	cmp	r3, #0
   27742:	f000 857c 	beq.w	2823e <_flash_used+0x5c2>
   27746:	f003 f961 	bl	2aa0c <__locale_mb_cur_max>
   2774a:	42a0      	cmp	r0, r4
   2774c:	f43f ad3d 	beq.w	271ca <__ssvfscanf_r+0x13e>
   27750:	f8db 2000 	ldr.w	r2, [fp]
   27754:	f507 70ac 	add.w	r0, r7, #344	; 0x158
   27758:	f8db 3004 	ldr.w	r3, [fp, #4]
   2775c:	2e03      	cmp	r6, #3
   2775e:	f812 1b01 	ldrb.w	r1, [r2], #1
   27762:	f104 0801 	add.w	r8, r4, #1
   27766:	f103 33ff 	add.w	r3, r3, #4294967295
   2776a:	5501      	strb	r1, [r0, r4]
   2776c:	e9cb 2300 	strd	r2, r3, [fp]
   27770:	f107 0348 	add.w	r3, r7, #72	; 0x48
   27774:	63bb      	str	r3, [r7, #56]	; 0x38
   27776:	d102      	bne.n	2777e <__ssvfscanf_r+0x6f2>
   27778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2777a:	2b04      	cmp	r3, #4
   2777c:	d004      	beq.n	27788 <__ssvfscanf_r+0x6fc>
   2777e:	2208      	movs	r2, #8
   27780:	2100      	movs	r1, #0
   27782:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   27784:	f7fe fc7a 	bl	2607c <memset>
   27788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2778a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   2778e:	4649      	mov	r1, r9
   27790:	4650      	mov	r0, sl
   27792:	9300      	str	r3, [sp, #0]
   27794:	4643      	mov	r3, r8
   27796:	f003 f9db 	bl	2ab50 <_mbrtowc_r>
   2779a:	1c45      	adds	r5, r0, #1
   2779c:	4606      	mov	r6, r0
   2779e:	f43f ad14 	beq.w	271ca <__ssvfscanf_r+0x13e>
   277a2:	2800      	cmp	r0, #0
   277a4:	f43f af7e 	beq.w	276a4 <__ssvfscanf_r+0x618>
   277a8:	1cb0      	adds	r0, r6, #2
   277aa:	f040 86a1 	bne.w	284f0 <_flash_used+0x874>
   277ae:	f8db 3004 	ldr.w	r3, [fp, #4]
   277b2:	4644      	mov	r4, r8
   277b4:	2b00      	cmp	r3, #0
   277b6:	dcc2      	bgt.n	2773e <__ssvfscanf_r+0x6b2>
   277b8:	4659      	mov	r1, fp
   277ba:	4650      	mov	r0, sl
   277bc:	f004 fa74 	bl	2bca8 <__ssrefill_r>
   277c0:	2800      	cmp	r0, #0
   277c2:	d0bc      	beq.n	2773e <__ssvfscanf_r+0x6b2>
   277c4:	f8d7 a01c 	ldr.w	sl, [r7, #28]
   277c8:	62fe      	str	r6, [r7, #44]	; 0x2c
   277ca:	2c00      	cmp	r4, #0
   277cc:	f47f acfd 	bne.w	271ca <__ssvfscanf_r+0x13e>
   277d0:	697b      	ldr	r3, [r7, #20]
   277d2:	2b00      	cmp	r3, #0
   277d4:	f47f ad27 	bne.w	27226 <__ssvfscanf_r+0x19a>
   277d8:	68fa      	ldr	r2, [r7, #12]
   277da:	f8c9 3000 	str.w	r3, [r9]
   277de:	eba9 0102 	sub.w	r1, r9, r2
   277e2:	693a      	ldr	r2, [r7, #16]
   277e4:	108b      	asrs	r3, r1, #2
   277e6:	3301      	adds	r3, #1
   277e8:	429a      	cmp	r2, r3
   277ea:	f240 8083 	bls.w	278f4 <__ssvfscanf_r+0x868>
   277ee:	68bc      	ldr	r4, [r7, #8]
   277f0:	2c00      	cmp	r4, #0
   277f2:	d07f      	beq.n	278f4 <__ssvfscanf_r+0x868>
   277f4:	e712      	b.n	2761c <__ssvfscanf_r+0x590>
   277f6:	2c07      	cmp	r4, #7
   277f8:	f47f ae05 	bne.w	27406 <__ssvfscanf_r+0x37a>
   277fc:	2408      	movs	r4, #8
   277fe:	e5f0      	b.n	273e2 <__ssvfscanf_r+0x356>
   27800:	2c06      	cmp	r4, #6
   27802:	f47f ae00 	bne.w	27406 <__ssvfscanf_r+0x37a>
   27806:	2407      	movs	r4, #7
   27808:	e5eb      	b.n	273e2 <__ssvfscanf_r+0x356>
   2780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2780c:	2b01      	cmp	r3, #1
   2780e:	f47f adfa 	bne.w	27406 <__ssvfscanf_r+0x37a>
   27812:	2302      	movs	r3, #2
   27814:	63bb      	str	r3, [r7, #56]	; 0x38
   27816:	e5e4      	b.n	273e2 <__ssvfscanf_r+0x356>
   27818:	f01b 0f80 	tst.w	fp, #128	; 0x80
   2781c:	f43f adf3 	beq.w	27406 <__ssvfscanf_r+0x37a>
   27820:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   27824:	e5dd      	b.n	273e2 <__ssvfscanf_r+0x356>
   27826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27828:	2b00      	cmp	r3, #0
   2782a:	f040 81bb 	bne.w	27ba4 <__ssvfscanf_r+0xb18>
   2782e:	2e00      	cmp	r6, #0
   27830:	f040 81b8 	bne.w	27ba4 <__ssvfscanf_r+0xb18>
   27834:	f40b 6ee0 	and.w	lr, fp, #1792	; 0x700
   27838:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
   2783c:	f000 840e 	beq.w	2805c <_flash_used+0x3e0>
   27840:	2c01      	cmp	r4, #1
   27842:	d002      	beq.n	2784a <__ssvfscanf_r+0x7be>
   27844:	2c04      	cmp	r4, #4
   27846:	f47f adde 	bne.w	27406 <__ssvfscanf_r+0x37a>
   2784a:	1c62      	adds	r2, r4, #1
   2784c:	b2d4      	uxtb	r4, r2
   2784e:	e5c8      	b.n	273e2 <__ssvfscanf_r+0x356>
   27850:	2c00      	cmp	r4, #0
   27852:	f040 8187 	bne.w	27b64 <__ssvfscanf_r+0xad8>
   27856:	2e00      	cmp	r6, #0
   27858:	f040 8184 	bne.w	27b64 <__ssvfscanf_r+0xad8>
   2785c:	f40b 62e0 	and.w	r2, fp, #1792	; 0x700
   27860:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
   27864:	f000 83f5 	beq.w	28052 <_flash_used+0x3d6>
   27868:	465c      	mov	r4, fp
   2786a:	2300      	movs	r3, #0
   2786c:	687d      	ldr	r5, [r7, #4]
   2786e:	46c3      	mov	fp, r8
   27870:	617b      	str	r3, [r7, #20]
   27872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27874:	3b01      	subs	r3, #1
   27876:	2b01      	cmp	r3, #1
   27878:	f240 85f0 	bls.w	2845c <_flash_used+0x7e0>
   2787c:	1e6b      	subs	r3, r5, #1
   2787e:	2b06      	cmp	r3, #6
   27880:	f240 82ae 	bls.w	27de0 <_flash_used+0x164>
   27884:	05e6      	lsls	r6, r4, #23
   27886:	d512      	bpl.n	278ae <__ssvfscanf_r+0x822>
   27888:	0565      	lsls	r5, r4, #21
   2788a:	f100 85fe 	bmi.w	2848a <_flash_used+0x80e>
   2788e:	f819 1c01 	ldrb.w	r1, [r9, #-1]
   27892:	f001 03df 	and.w	r3, r1, #223	; 0xdf
   27896:	2b45      	cmp	r3, #69	; 0x45
   27898:	f040 8470 	bne.w	2817c <_flash_used+0x500>
   2789c:	f109 39ff 	add.w	r9, r9, #4294967295
   278a0:	f10a 3aff 	add.w	sl, sl, #4294967295
   278a4:	465a      	mov	r2, fp
   278a6:	ee18 0a10 	vmov	r0, s16
   278aa:	f004 f9bd 	bl	2bc28 <_sungetc_r>
   278ae:	f014 0210 	ands.w	r2, r4, #16
   278b2:	f47f acb8 	bne.w	27226 <__ssvfscanf_r+0x19a>
   278b6:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   278ba:	f889 2000 	strb.w	r2, [r9]
   278be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   278c2:	f000 8452 	beq.w	2816a <_flash_used+0x4ee>
   278c6:	693b      	ldr	r3, [r7, #16]
   278c8:	2b00      	cmp	r3, #0
   278ca:	f040 8317 	bne.w	27efc <_flash_used+0x280>
   278ce:	ee18 0a10 	vmov	r0, s16
   278d2:	69f9      	ldr	r1, [r7, #28]
   278d4:	2200      	movs	r2, #0
   278d6:	f7ff fab3 	bl	26e40 <_strtod_r>
   278da:	07e0      	lsls	r0, r4, #31
   278dc:	ec59 8b10 	vmov	r8, r9, d0
   278e0:	d402      	bmi.n	278e8 <__ssvfscanf_r+0x85c>
   278e2:	07a1      	lsls	r1, r4, #30
   278e4:	f140 82f3 	bpl.w	27ece <_flash_used+0x252>
   278e8:	6abe      	ldr	r6, [r7, #40]	; 0x28
   278ea:	f856 3b04 	ldr.w	r3, [r6], #4
   278ee:	e9c3 8900 	strd	r8, r9, [r3]
   278f2:	62be      	str	r6, [r7, #40]	; 0x28
   278f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   278f6:	3301      	adds	r3, #1
   278f8:	633b      	str	r3, [r7, #48]	; 0x30
   278fa:	e494      	b.n	27226 <__ssvfscanf_r+0x19a>
   278fc:	0002f5d9 	.word	0x0002f5d9
   27900:	200208f0 	.word	0x200208f0
   27904:	2c02      	cmp	r4, #2
   27906:	f47f ad7e 	bne.w	27406 <__ssvfscanf_r+0x37a>
   2790a:	2403      	movs	r4, #3
   2790c:	e569      	b.n	273e2 <__ssvfscanf_r+0x356>
   2790e:	f40b 6ea0 	and.w	lr, fp, #1280	; 0x500
   27912:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
   27916:	d006      	beq.n	27926 <__ssvfscanf_r+0x89a>
   27918:	f41b 6f80 	tst.w	fp, #1024	; 0x400
   2791c:	f43f ad73 	beq.w	27406 <__ssvfscanf_r+0x37a>
   27920:	2e00      	cmp	r6, #0
   27922:	f000 8594 	beq.w	2844e <_flash_used+0x7d2>
   27926:	f41b 7f00 	tst.w	fp, #512	; 0x200
   2792a:	d104      	bne.n	27936 <__ssvfscanf_r+0x8aa>
   2792c:	69bb      	ldr	r3, [r7, #24]
   2792e:	f8c7 9008 	str.w	r9, [r7, #8]
   27932:	1af3      	subs	r3, r6, r3
   27934:	613b      	str	r3, [r7, #16]
   27936:	f42b 63f0 	bic.w	r3, fp, #1920	; 0x780
   2793a:	2600      	movs	r6, #0
   2793c:	f443 7bc0 	orr.w	fp, r3, #384	; 0x180
   27940:	e54f      	b.n	273e2 <__ssvfscanf_r+0x356>
   27942:	4b9d      	ldr	r3, [pc, #628]	; (27bb8 <__ssvfscanf_r+0xb2c>)
   27944:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   27948:	f933 9019 	ldrsh.w	r9, [r3, r9, lsl #1]
   2794c:	e5e1      	b.n	27512 <__ssvfscanf_r+0x486>
   2794e:	f41b 7f80 	tst.w	fp, #256	; 0x100
   27952:	f43f ad64 	beq.w	2741e <__ssvfscanf_r+0x392>
   27956:	68fb      	ldr	r3, [r7, #12]
   27958:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   2795c:	3601      	adds	r6, #1
   2795e:	2b00      	cmp	r3, #0
   27960:	f040 8239 	bne.w	27dd6 <_flash_used+0x15a>
   27964:	3d01      	subs	r5, #1
   27966:	e53f      	b.n	273e8 <__ssvfscanf_r+0x35c>
   27968:	0726      	lsls	r6, r4, #28
   2796a:	f47f ac37 	bne.w	271dc <__ssvfscanf_r+0x150>
   2796e:	7842      	ldrb	r2, [r0, #1]
   27970:	4608      	mov	r0, r1
   27972:	f7ff bbc0 	b.w	270f6 <__ssvfscanf_r+0x6a>
   27976:	0723      	lsls	r3, r4, #28
   27978:	f47f ac30 	bne.w	271dc <__ssvfscanf_r+0x150>
   2797c:	7842      	ldrb	r2, [r0, #1]
   2797e:	f044 0402 	orr.w	r4, r4, #2
   27982:	4608      	mov	r0, r1
   27984:	f7ff bbb7 	b.w	270f6 <__ssvfscanf_r+0x6a>
   27988:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   2798c:	4b8b      	ldr	r3, [pc, #556]	; (27bbc <__ssvfscanf_r+0xb30>)
   2798e:	2603      	movs	r6, #3
   27990:	63f9      	str	r1, [r7, #60]	; 0x3c
   27992:	623b      	str	r3, [r7, #32]
   27994:	2310      	movs	r3, #16
   27996:	627b      	str	r3, [r7, #36]	; 0x24
   27998:	f8db 3004 	ldr.w	r3, [fp, #4]
   2799c:	2b00      	cmp	r3, #0
   2799e:	f73f ac89 	bgt.w	272b4 <__ssvfscanf_r+0x228>
   279a2:	4659      	mov	r1, fp
   279a4:	ee18 0a10 	vmov	r0, s16
   279a8:	f004 f97e 	bl	2bca8 <__ssrefill_r>
   279ac:	2800      	cmp	r0, #0
   279ae:	f47f ac0c 	bne.w	271ca <__ssvfscanf_r+0x13e>
   279b2:	0662      	lsls	r2, r4, #25
   279b4:	f53f ac81 	bmi.w	272ba <__ssvfscanf_r+0x22e>
   279b8:	f8db 2000 	ldr.w	r2, [fp]
   279bc:	4980      	ldr	r1, [pc, #512]	; (27bc0 <__ssvfscanf_r+0xb34>)
   279be:	7813      	ldrb	r3, [r2, #0]
   279c0:	5ccb      	ldrb	r3, [r1, r3]
   279c2:	071b      	lsls	r3, r3, #28
   279c4:	f57f ac79 	bpl.w	272ba <__ssvfscanf_r+0x22e>
   279c8:	ee18 9a10 	vmov	r9, s16
   279cc:	e007      	b.n	279de <__ssvfscanf_r+0x952>
   279ce:	f8cb 2000 	str.w	r2, [fp]
   279d2:	7813      	ldrb	r3, [r2, #0]
   279d4:	497a      	ldr	r1, [pc, #488]	; (27bc0 <__ssvfscanf_r+0xb34>)
   279d6:	5ccb      	ldrb	r3, [r1, r3]
   279d8:	0718      	lsls	r0, r3, #28
   279da:	f57f ac6e 	bpl.w	272ba <__ssvfscanf_r+0x22e>
   279de:	f8db 3004 	ldr.w	r3, [fp, #4]
   279e2:	f10a 0a01 	add.w	sl, sl, #1
   279e6:	3201      	adds	r2, #1
   279e8:	3b01      	subs	r3, #1
   279ea:	2b00      	cmp	r3, #0
   279ec:	f8cb 3004 	str.w	r3, [fp, #4]
   279f0:	dced      	bgt.n	279ce <__ssvfscanf_r+0x942>
   279f2:	4659      	mov	r1, fp
   279f4:	4648      	mov	r0, r9
   279f6:	f004 f957 	bl	2bca8 <__ssrefill_r>
   279fa:	2800      	cmp	r0, #0
   279fc:	f47f abe5 	bne.w	271ca <__ssvfscanf_r+0x13e>
   27a00:	f8db 2000 	ldr.w	r2, [fp]
   27a04:	e7e5      	b.n	279d2 <__ssvfscanf_r+0x946>
   27a06:	0621      	lsls	r1, r4, #24
   27a08:	f57f ad90 	bpl.w	2752c <__ssvfscanf_r+0x4a0>
   27a0c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   27a10:	e57f      	b.n	27512 <__ssvfscanf_r+0x486>
   27a12:	4b69      	ldr	r3, [pc, #420]	; (27bb8 <__ssvfscanf_r+0xb2c>)
   27a14:	f933 9019 	ldrsh.w	r9, [r3, r9, lsl #1]
   27a18:	f1b9 0f08 	cmp.w	r9, #8
   27a1c:	f73f ad77 	bgt.w	2750e <__ssvfscanf_r+0x482>
   27a20:	e584      	b.n	2752c <__ssvfscanf_r+0x4a0>
   27a22:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   27a26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   27a2a:	f47f ad7f 	bne.w	2752c <__ssvfscanf_r+0x4a0>
   27a2e:	f424 7400 	bic.w	r4, r4, #512	; 0x200
   27a32:	f04f 0910 	mov.w	r9, #16
   27a36:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
   27a3a:	e56a      	b.n	27512 <__ssvfscanf_r+0x486>
   27a3c:	f044 0401 	orr.w	r4, r4, #1
   27a40:	2602      	movs	r6, #2
   27a42:	63f9      	str	r1, [r7, #60]	; 0x3c
   27a44:	e431      	b.n	272aa <__ssvfscanf_r+0x21e>
   27a46:	f044 0401 	orr.w	r4, r4, #1
   27a4a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   27a4e:	2600      	movs	r6, #0
   27a50:	63f9      	str	r1, [r7, #60]	; 0x3c
   27a52:	e42a      	b.n	272aa <__ssvfscanf_r+0x21e>
   27a54:	f044 0401 	orr.w	r4, r4, #1
   27a58:	4b58      	ldr	r3, [pc, #352]	; (27bbc <__ssvfscanf_r+0xb30>)
   27a5a:	2603      	movs	r6, #3
   27a5c:	63f9      	str	r1, [r7, #60]	; 0x3c
   27a5e:	623b      	str	r3, [r7, #32]
   27a60:	2308      	movs	r3, #8
   27a62:	627b      	str	r3, [r7, #36]	; 0x24
   27a64:	e421      	b.n	272aa <__ssvfscanf_r+0x21e>
   27a66:	f044 0401 	orr.w	r4, r4, #1
   27a6a:	4b56      	ldr	r3, [pc, #344]	; (27bc4 <__ssvfscanf_r+0xb38>)
   27a6c:	2603      	movs	r6, #3
   27a6e:	63f9      	str	r1, [r7, #60]	; 0x3c
   27a70:	623b      	str	r3, [r7, #32]
   27a72:	230a      	movs	r3, #10
   27a74:	627b      	str	r3, [r7, #36]	; 0x24
   27a76:	e418      	b.n	272aa <__ssvfscanf_r+0x21e>
   27a78:	f107 0058 	add.w	r0, r7, #88	; 0x58
   27a7c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   27a80:	f003 fe02 	bl	2b688 <__sccl>
   27a84:	2601      	movs	r6, #1
   27a86:	63f8      	str	r0, [r7, #60]	; 0x3c
   27a88:	e40f      	b.n	272aa <__ssvfscanf_r+0x21e>
   27a8a:	0726      	lsls	r6, r4, #28
   27a8c:	f47f aba6 	bne.w	271dc <__ssvfscanf_r+0x150>
   27a90:	7842      	ldrb	r2, [r0, #1]
   27a92:	2a6c      	cmp	r2, #108	; 0x6c
   27a94:	f000 83d8 	beq.w	28248 <_flash_used+0x5cc>
   27a98:	f044 0401 	orr.w	r4, r4, #1
   27a9c:	4608      	mov	r0, r1
   27a9e:	f7ff bb2a 	b.w	270f6 <__ssvfscanf_r+0x6a>
   27aa2:	ea58 0804 	orrs.w	r8, r8, r4
   27aa6:	f47f ab99 	bne.w	271dc <__ssvfscanf_r+0x150>
   27aaa:	7842      	ldrb	r2, [r0, #1]
   27aac:	2410      	movs	r4, #16
   27aae:	4608      	mov	r0, r1
   27ab0:	f7ff bb21 	b.w	270f6 <__ssvfscanf_r+0x6a>
   27ab4:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   27ab8:	f47f ab90 	bne.w	271dc <__ssvfscanf_r+0x150>
   27abc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27abe:	2a00      	cmp	r2, #0
   27ac0:	f000 83f7 	beq.w	282b2 <_flash_used+0x636>
   27ac4:	7842      	ldrb	r2, [r0, #1]
   27ac6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   27aca:	4608      	mov	r0, r1
   27acc:	f7ff bb13 	b.w	270f6 <__ssvfscanf_r+0x6a>
   27ad0:	06e2      	lsls	r2, r4, #27
   27ad2:	f100 81aa 	bmi.w	27e2a <_flash_used+0x1ae>
   27ad6:	0723      	lsls	r3, r4, #28
   27ad8:	f140 840d 	bpl.w	282f6 <_flash_used+0x67a>
   27adc:	6abe      	ldr	r6, [r7, #40]	; 0x28
   27ade:	63f9      	str	r1, [r7, #60]	; 0x3c
   27ae0:	f856 3b04 	ldr.w	r3, [r6], #4
   27ae4:	f883 a000 	strb.w	sl, [r3]
   27ae8:	62be      	str	r6, [r7, #40]	; 0x28
   27aea:	f7ff bb9c 	b.w	27226 <__ssvfscanf_r+0x19a>
   27aee:	0722      	lsls	r2, r4, #28
   27af0:	f47f ab74 	bne.w	271dc <__ssvfscanf_r+0x150>
   27af4:	7842      	ldrb	r2, [r0, #1]
   27af6:	2a68      	cmp	r2, #104	; 0x68
   27af8:	f000 83b0 	beq.w	2825c <_flash_used+0x5e0>
   27afc:	f044 0404 	orr.w	r4, r4, #4
   27b00:	4608      	mov	r0, r1
   27b02:	f7ff baf8 	b.w	270f6 <__ssvfscanf_r+0x6a>
   27b06:	4b2f      	ldr	r3, [pc, #188]	; (27bc4 <__ssvfscanf_r+0xb38>)
   27b08:	2603      	movs	r6, #3
   27b0a:	63f9      	str	r1, [r7, #60]	; 0x3c
   27b0c:	623b      	str	r3, [r7, #32]
   27b0e:	2300      	movs	r3, #0
   27b10:	627b      	str	r3, [r7, #36]	; 0x24
   27b12:	f7ff bbca 	b.w	272aa <__ssvfscanf_r+0x21e>
   27b16:	4b29      	ldr	r3, [pc, #164]	; (27bbc <__ssvfscanf_r+0xb30>)
   27b18:	2603      	movs	r6, #3
   27b1a:	63f9      	str	r1, [r7, #60]	; 0x3c
   27b1c:	623b      	str	r3, [r7, #32]
   27b1e:	230a      	movs	r3, #10
   27b20:	627b      	str	r3, [r7, #36]	; 0x24
   27b22:	f7ff bbc2 	b.w	272aa <__ssvfscanf_r+0x21e>
   27b26:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   27b2a:	e72f      	b.n	2798c <__ssvfscanf_r+0x900>
   27b2c:	0521      	lsls	r1, r4, #20
   27b2e:	f57f acf0 	bpl.w	27512 <__ssvfscanf_r+0x486>
   27b32:	f1b9 0f00 	cmp.w	r9, #0
   27b36:	d103      	bne.n	27b40 <__ssvfscanf_r+0xab4>
   27b38:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   27b3c:	f04f 0908 	mov.w	r9, #8
   27b40:	0563      	lsls	r3, r4, #21
   27b42:	f140 8166 	bpl.w	27e12 <_flash_used+0x196>
   27b46:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   27b4a:	e4e2      	b.n	27512 <__ssvfscanf_r+0x486>
   27b4c:	4641      	mov	r1, r8
   27b4e:	ee18 0a10 	vmov	r0, s16
   27b52:	f004 f8a9 	bl	2bca8 <__ssrefill_r>
   27b56:	2800      	cmp	r0, #0
   27b58:	f47f ac55 	bne.w	27406 <__ssvfscanf_r+0x37a>
   27b5c:	2d00      	cmp	r5, #0
   27b5e:	f47f abdc 	bne.w	2731a <__ssvfscanf_r+0x28e>
   27b62:	e450      	b.n	27406 <__ssvfscanf_r+0x37a>
   27b64:	2c03      	cmp	r4, #3
   27b66:	f43f ae70 	beq.w	2784a <__ssvfscanf_r+0x7be>
   27b6a:	2c05      	cmp	r4, #5
   27b6c:	f43f ae6d 	beq.w	2784a <__ssvfscanf_r+0x7be>
   27b70:	e449      	b.n	27406 <__ssvfscanf_r+0x37a>
   27b72:	4631      	mov	r1, r6
   27b74:	ee18 0a10 	vmov	r0, s16
   27b78:	f004 f896 	bl	2bca8 <__ssrefill_r>
   27b7c:	2800      	cmp	r0, #0
   27b7e:	f43f acd2 	beq.w	27526 <__ssvfscanf_r+0x49a>
   27b82:	e4d3      	b.n	2752c <__ssvfscanf_r+0x4a0>
   27b84:	6abc      	ldr	r4, [r7, #40]	; 0x28
   27b86:	f854 3b04 	ldr.w	r3, [r4], #4
   27b8a:	6018      	str	r0, [r3, #0]
   27b8c:	62bc      	str	r4, [r7, #40]	; 0x28
   27b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27b90:	3301      	adds	r3, #1
   27b92:	633b      	str	r3, [r7, #48]	; 0x30
   27b94:	69fb      	ldr	r3, [r7, #28]
   27b96:	1aed      	subs	r5, r5, r3
   27b98:	4643      	mov	r3, r8
   27b9a:	442b      	add	r3, r5
   27b9c:	461e      	mov	r6, r3
   27b9e:	44b2      	add	sl, r6
   27ba0:	f7ff bb41 	b.w	27226 <__ssvfscanf_r+0x19a>
   27ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27ba6:	2b02      	cmp	r3, #2
   27ba8:	f47f ae4a 	bne.w	27840 <__ssvfscanf_r+0x7b4>
   27bac:	2303      	movs	r3, #3
   27bae:	63bb      	str	r3, [r7, #56]	; 0x38
   27bb0:	e417      	b.n	273e2 <__ssvfscanf_r+0x356>
   27bb2:	f04f 0900 	mov.w	r9, #0
   27bb6:	e444      	b.n	27442 <__ssvfscanf_r+0x3b6>
   27bb8:	0002f780 	.word	0x0002f780
   27bbc:	00027071 	.word	0x00027071
   27bc0:	0002f5d9 	.word	0x0002f5d9
   27bc4:	00026f41 	.word	0x00026f41
   27bc8:	06e6      	lsls	r6, r4, #27
   27bca:	f100 83a9 	bmi.w	28320 <_flash_used+0x6a4>
   27bce:	f014 0380 	ands.w	r3, r4, #128	; 0x80
   27bd2:	6abe      	ldr	r6, [r7, #40]	; 0x28
   27bd4:	f000 8351 	beq.w	2827a <_flash_used+0x5fe>
   27bd8:	f856 3b04 	ldr.w	r3, [r6], #4
   27bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   27bde:	2b00      	cmp	r3, #0
   27be0:	f43f aafc 	beq.w	271dc <__ssvfscanf_r+0x150>
   27be4:	2020      	movs	r0, #32
   27be6:	f7fd feff 	bl	259e8 <malloc>
   27bea:	4605      	mov	r5, r0
   27bec:	2800      	cmp	r0, #0
   27bee:	f000 81fc 	beq.w	27fea <_flash_used+0x36e>
   27bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27bf6:	f8b2 9006 	ldrh.w	r9, [r2, #6]
   27bfa:	8894      	ldrh	r4, [r2, #4]
   27bfc:	6018      	str	r0, [r3, #0]
   27bfe:	45a1      	cmp	r9, r4
   27c00:	f080 8116 	bcs.w	27e30 <_flash_used+0x1b4>
   27c04:	6810      	ldr	r0, [r2, #0]
   27c06:	6bba      	ldr	r2, [r7, #56]	; 0x38
   27c08:	f109 0301 	add.w	r3, r9, #1
   27c0c:	62be      	str	r6, [r7, #40]	; 0x28
   27c0e:	f840 2029 	str.w	r2, [r0, r9, lsl #2]
   27c12:	2201      	movs	r2, #1
   27c14:	f04f 0920 	mov.w	r9, #32
   27c18:	61fa      	str	r2, [r7, #28]
   27c1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27c1c:	80d3      	strh	r3, [r2, #6]
   27c1e:	f8db 3000 	ldr.w	r3, [fp]
   27c22:	49b5      	ldr	r1, [pc, #724]	; (27ef8 <_flash_used+0x27c>)
   27c24:	781a      	ldrb	r2, [r3, #0]
   27c26:	5c8a      	ldrb	r2, [r1, r2]
   27c28:	0711      	lsls	r1, r2, #28
   27c2a:	f100 82b8 	bmi.w	2819e <_flash_used+0x522>
   27c2e:	462c      	mov	r4, r5
   27c30:	f8db 2004 	ldr.w	r2, [fp, #4]
   27c34:	1c59      	adds	r1, r3, #1
   27c36:	462e      	mov	r6, r5
   27c38:	3a01      	subs	r2, #1
   27c3a:	e9cb 1200 	strd	r1, r2, [fp]
   27c3e:	781b      	ldrb	r3, [r3, #0]
   27c40:	f806 3b01 	strb.w	r3, [r6], #1
   27c44:	1b35      	subs	r5, r6, r4
   27c46:	45a9      	cmp	r9, r5
   27c48:	d80e      	bhi.n	27c68 <__ssvfscanf_r+0xbdc>
   27c4a:	69fb      	ldr	r3, [r7, #28]
   27c4c:	4620      	mov	r0, r4
   27c4e:	b15b      	cbz	r3, 27c68 <__ssvfscanf_r+0xbdc>
   27c50:	ea4f 0949 	mov.w	r9, r9, lsl #1
   27c54:	4649      	mov	r1, r9
   27c56:	f7fe fa6d 	bl	26134 <realloc>
   27c5a:	4604      	mov	r4, r0
   27c5c:	2800      	cmp	r0, #0
   27c5e:	f000 81c4 	beq.w	27fea <_flash_used+0x36e>
   27c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27c64:	1946      	adds	r6, r0, r5
   27c66:	6018      	str	r0, [r3, #0]
   27c68:	f1b8 0801 	subs.w	r8, r8, #1
   27c6c:	4635      	mov	r5, r6
   27c6e:	f000 8292 	beq.w	28196 <_flash_used+0x51a>
   27c72:	f8db 3004 	ldr.w	r3, [fp, #4]
   27c76:	2b00      	cmp	r3, #0
   27c78:	f340 8349 	ble.w	2830e <_flash_used+0x692>
   27c7c:	f8db 3000 	ldr.w	r3, [fp]
   27c80:	499d      	ldr	r1, [pc, #628]	; (27ef8 <_flash_used+0x27c>)
   27c82:	781a      	ldrb	r2, [r3, #0]
   27c84:	5c8a      	ldrb	r2, [r1, r2]
   27c86:	0712      	lsls	r2, r2, #28
   27c88:	d5d2      	bpl.n	27c30 <__ssvfscanf_r+0xba4>
   27c8a:	1b31      	subs	r1, r6, r4
   27c8c:	4635      	mov	r5, r6
   27c8e:	448a      	add	sl, r1
   27c90:	3101      	adds	r1, #1
   27c92:	2300      	movs	r3, #0
   27c94:	4589      	cmp	r9, r1
   27c96:	702b      	strb	r3, [r5, #0]
   27c98:	f67f ae2c 	bls.w	278f4 <__ssvfscanf_r+0x868>
   27c9c:	69fb      	ldr	r3, [r7, #28]
   27c9e:	2b00      	cmp	r3, #0
   27ca0:	f43f ae28 	beq.w	278f4 <__ssvfscanf_r+0x868>
   27ca4:	6bbc      	ldr	r4, [r7, #56]	; 0x38
   27ca6:	6820      	ldr	r0, [r4, #0]
   27ca8:	f7fe fa44 	bl	26134 <realloc>
   27cac:	2800      	cmp	r0, #0
   27cae:	f47f acbc 	bne.w	2762a <__ssvfscanf_r+0x59e>
   27cb2:	e61f      	b.n	278f4 <__ssvfscanf_r+0x868>
   27cb4:	2300      	movs	r3, #0
   27cb6:	60fb      	str	r3, [r7, #12]
   27cb8:	f7ff bb1f 	b.w	272fa <__ssvfscanf_r+0x26e>
   27cbc:	06e1      	lsls	r1, r4, #27
   27cbe:	f100 827d 	bmi.w	281bc <_flash_used+0x540>
   27cc2:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   27cc6:	6abe      	ldr	r6, [r7, #40]	; 0x28
   27cc8:	f000 8307 	beq.w	282da <_flash_used+0x65e>
   27ccc:	f856 3b04 	ldr.w	r3, [r6], #4
   27cd0:	61fb      	str	r3, [r7, #28]
   27cd2:	2b00      	cmp	r3, #0
   27cd4:	f43f aa82 	beq.w	271dc <__ssvfscanf_r+0x150>
   27cd8:	2020      	movs	r0, #32
   27cda:	f7fd fe85 	bl	259e8 <malloc>
   27cde:	4605      	mov	r5, r0
   27ce0:	2800      	cmp	r0, #0
   27ce2:	f000 8182 	beq.w	27fea <_flash_used+0x36e>
   27ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27ce8:	69fb      	ldr	r3, [r7, #28]
   27cea:	f8b2 9006 	ldrh.w	r9, [r2, #6]
   27cee:	8894      	ldrh	r4, [r2, #4]
   27cf0:	6018      	str	r0, [r3, #0]
   27cf2:	45a1      	cmp	r9, r4
   27cf4:	f080 80c0 	bcs.w	27e78 <_flash_used+0x1fc>
   27cf8:	6810      	ldr	r0, [r2, #0]
   27cfa:	69fa      	ldr	r2, [r7, #28]
   27cfc:	f109 0301 	add.w	r3, r9, #1
   27d00:	2420      	movs	r4, #32
   27d02:	62be      	str	r6, [r7, #40]	; 0x28
   27d04:	f840 2029 	str.w	r2, [r0, r9, lsl #2]
   27d08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27d0a:	80d3      	strh	r3, [r2, #6]
   27d0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
   27d10:	f8db 2000 	ldr.w	r2, [fp]
   27d14:	4619      	mov	r1, r3
   27d16:	4618      	mov	r0, r3
   27d18:	7813      	ldrb	r3, [r2, #0]
   27d1a:	5ccb      	ldrb	r3, [r1, r3]
   27d1c:	2b00      	cmp	r3, #0
   27d1e:	f43f aa5d 	beq.w	271dc <__ssvfscanf_r+0x150>
   27d22:	69fb      	ldr	r3, [r7, #28]
   27d24:	462e      	mov	r6, r5
   27d26:	f8c7 a018 	str.w	sl, [r7, #24]
   27d2a:	4611      	mov	r1, r2
   27d2c:	3b00      	subs	r3, #0
   27d2e:	46a2      	mov	sl, r4
   27d30:	4681      	mov	r9, r0
   27d32:	bf18      	it	ne
   27d34:	2301      	movne	r3, #1
   27d36:	63bb      	str	r3, [r7, #56]	; 0x38
   27d38:	e007      	b.n	27d4a <_flash_used+0xce>
   27d3a:	f8db 1000 	ldr.w	r1, [fp]
   27d3e:	780b      	ldrb	r3, [r1, #0]
   27d40:	f819 3003 	ldrb.w	r3, [r9, r3]
   27d44:	2b00      	cmp	r3, #0
   27d46:	f000 8180 	beq.w	2804a <_flash_used+0x3ce>
   27d4a:	f8db 3004 	ldr.w	r3, [fp, #4]
   27d4e:	1c48      	adds	r0, r1, #1
   27d50:	3b01      	subs	r3, #1
   27d52:	e9cb 0300 	strd	r0, r3, [fp]
   27d56:	780b      	ldrb	r3, [r1, #0]
   27d58:	f805 3b01 	strb.w	r3, [r5], #1
   27d5c:	1bac      	subs	r4, r5, r6
   27d5e:	4554      	cmp	r4, sl
   27d60:	d30e      	bcc.n	27d80 <_flash_used+0x104>
   27d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27d64:	4630      	mov	r0, r6
   27d66:	b15b      	cbz	r3, 27d80 <_flash_used+0x104>
   27d68:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   27d6c:	4651      	mov	r1, sl
   27d6e:	f7fe f9e1 	bl	26134 <realloc>
   27d72:	4606      	mov	r6, r0
   27d74:	2800      	cmp	r0, #0
   27d76:	f000 8138 	beq.w	27fea <_flash_used+0x36e>
   27d7a:	69fb      	ldr	r3, [r7, #28]
   27d7c:	1905      	adds	r5, r0, r4
   27d7e:	6018      	str	r0, [r3, #0]
   27d80:	f1b8 0801 	subs.w	r8, r8, #1
   27d84:	f000 8161 	beq.w	2804a <_flash_used+0x3ce>
   27d88:	f8db 3004 	ldr.w	r3, [fp, #4]
   27d8c:	2b00      	cmp	r3, #0
   27d8e:	dcd4      	bgt.n	27d3a <_flash_used+0xbe>
   27d90:	4659      	mov	r1, fp
   27d92:	ee18 0a10 	vmov	r0, s16
   27d96:	f003 ff87 	bl	2bca8 <__ssrefill_r>
   27d9a:	2800      	cmp	r0, #0
   27d9c:	d0cd      	beq.n	27d3a <_flash_used+0xbe>
   27d9e:	42b5      	cmp	r5, r6
   27da0:	4654      	mov	r4, sl
   27da2:	f8d7 a018 	ldr.w	sl, [r7, #24]
   27da6:	f43f aa10 	beq.w	271ca <__ssvfscanf_r+0x13e>
   27daa:	1bae      	subs	r6, r5, r6
   27dac:	f43f aa16 	beq.w	271dc <__ssvfscanf_r+0x150>
   27db0:	1c71      	adds	r1, r6, #1
   27db2:	2300      	movs	r3, #0
   27db4:	428c      	cmp	r4, r1
   27db6:	702b      	strb	r3, [r5, #0]
   27db8:	d907      	bls.n	27dca <_flash_used+0x14e>
   27dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27dbc:	b12b      	cbz	r3, 27dca <_flash_used+0x14e>
   27dbe:	69fc      	ldr	r4, [r7, #28]
   27dc0:	6820      	ldr	r0, [r4, #0]
   27dc2:	f7fe f9b7 	bl	26134 <realloc>
   27dc6:	b100      	cbz	r0, 27dca <_flash_used+0x14e>
   27dc8:	6020      	str	r0, [r4, #0]
   27dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27dcc:	44b2      	add	sl, r6
   27dce:	3301      	adds	r3, #1
   27dd0:	633b      	str	r3, [r7, #48]	; 0x30
   27dd2:	f7ff ba28 	b.w	27226 <__ssvfscanf_r+0x19a>
   27dd6:	68fb      	ldr	r3, [r7, #12]
   27dd8:	3b01      	subs	r3, #1
   27dda:	60fb      	str	r3, [r7, #12]
   27ddc:	f7ff bb04 	b.w	273e8 <__ssvfscanf_r+0x35c>
   27de0:	2d02      	cmp	r5, #2
   27de2:	f240 836a 	bls.w	284ba <_flash_used+0x83e>
   27de6:	2d03      	cmp	r5, #3
   27de8:	f43f ad4c 	beq.w	27884 <__ssvfscanf_r+0x7f8>
   27dec:	3d04      	subs	r5, #4
   27dee:	ee18 8a10 	vmov	r8, s16
   27df2:	b2ee      	uxtb	r6, r5
   27df4:	43f5      	mvns	r5, r6
   27df6:	444d      	add	r5, r9
   27df8:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   27dfc:	465a      	mov	r2, fp
   27dfe:	4640      	mov	r0, r8
   27e00:	f003 ff12 	bl	2bc28 <_sungetc_r>
   27e04:	454d      	cmp	r5, r9
   27e06:	d1f7      	bne.n	27df8 <_flash_used+0x17c>
   27e08:	f10a 33ff 	add.w	r3, sl, #4294967295
   27e0c:	eba3 0a06 	sub.w	sl, r3, r6
   27e10:	e538      	b.n	27884 <__ssvfscanf_r+0x7f8>
   27e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27e14:	f424 7460 	bic.w	r4, r4, #896	; 0x380
   27e18:	b11b      	cbz	r3, 27e22 <_flash_used+0x1a6>
   27e1a:	3b01      	subs	r3, #1
   27e1c:	f108 0801 	add.w	r8, r8, #1
   27e20:	63bb      	str	r3, [r7, #56]	; 0x38
   27e22:	f10a 0a01 	add.w	sl, sl, #1
   27e26:	f7ff bb76 	b.w	27516 <__ssvfscanf_r+0x48a>
   27e2a:	63f9      	str	r1, [r7, #60]	; 0x3c
   27e2c:	f7ff b9fb 	b.w	27226 <__ssvfscanf_r+0x19a>
   27e30:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   27e34:	429c      	cmp	r4, r3
   27e36:	f200 80dc 	bhi.w	27ff2 <_flash_used+0x376>
   27e3a:	3408      	adds	r4, #8
   27e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27e3e:	00a1      	lsls	r1, r4, #2
   27e40:	6810      	ldr	r0, [r2, #0]
   27e42:	f7fe f977 	bl	26134 <realloc>
   27e46:	2800      	cmp	r0, #0
   27e48:	f000 80d3 	beq.w	27ff2 <_flash_used+0x376>
   27e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27e4e:	6018      	str	r0, [r3, #0]
   27e50:	809c      	strh	r4, [r3, #4]
   27e52:	e6d8      	b.n	27c06 <__ssvfscanf_r+0xb7a>
   27e54:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   27e58:	429c      	cmp	r4, r3
   27e5a:	f200 80ca 	bhi.w	27ff2 <_flash_used+0x376>
   27e5e:	3408      	adds	r4, #8
   27e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27e62:	00a1      	lsls	r1, r4, #2
   27e64:	6810      	ldr	r0, [r2, #0]
   27e66:	f7fe f965 	bl	26134 <realloc>
   27e6a:	2800      	cmp	r0, #0
   27e6c:	f000 80c1 	beq.w	27ff2 <_flash_used+0x376>
   27e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27e72:	6018      	str	r0, [r3, #0]
   27e74:	809c      	strh	r4, [r3, #4]
   27e76:	e401      	b.n	2767c <__ssvfscanf_r+0x5f0>
   27e78:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   27e7c:	429c      	cmp	r4, r3
   27e7e:	f200 80b8 	bhi.w	27ff2 <_flash_used+0x376>
   27e82:	3408      	adds	r4, #8
   27e84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27e86:	00a1      	lsls	r1, r4, #2
   27e88:	6810      	ldr	r0, [r2, #0]
   27e8a:	f7fe f953 	bl	26134 <realloc>
   27e8e:	2800      	cmp	r0, #0
   27e90:	f000 80af 	beq.w	27ff2 <_flash_used+0x376>
   27e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27e96:	6018      	str	r0, [r3, #0]
   27e98:	809c      	strh	r4, [r3, #4]
   27e9a:	e72e      	b.n	27cfa <_flash_used+0x7e>
   27e9c:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   27ea0:	429c      	cmp	r4, r3
   27ea2:	f200 80a6 	bhi.w	27ff2 <_flash_used+0x376>
   27ea6:	3408      	adds	r4, #8
   27ea8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27eaa:	00a1      	lsls	r1, r4, #2
   27eac:	6810      	ldr	r0, [r2, #0]
   27eae:	f7fe f941 	bl	26134 <realloc>
   27eb2:	2800      	cmp	r0, #0
   27eb4:	f000 809d 	beq.w	27ff2 <_flash_used+0x376>
   27eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27eba:	6018      	str	r0, [r3, #0]
   27ebc:	809c      	strh	r4, [r3, #4]
   27ebe:	f7ff bb86 	b.w	275ce <__ssvfscanf_r+0x542>
   27ec2:	6abc      	ldr	r4, [r7, #40]	; 0x28
   27ec4:	f854 3b04 	ldr.w	r3, [r4], #4
   27ec8:	7018      	strb	r0, [r3, #0]
   27eca:	62bc      	str	r4, [r7, #40]	; 0x28
   27ecc:	e65f      	b.n	27b8e <__ssvfscanf_r+0xb02>
   27ece:	6abe      	ldr	r6, [r7, #40]	; 0x28
   27ed0:	ee10 2a10 	vmov	r2, s0
   27ed4:	464b      	mov	r3, r9
   27ed6:	ee10 0a10 	vmov	r0, s0
   27eda:	4649      	mov	r1, r9
   27edc:	f7e5 f99c 	bl	d218 <__aeabi_dcmpun>
   27ee0:	f856 4b04 	ldr.w	r4, [r6], #4
   27ee4:	2800      	cmp	r0, #0
   27ee6:	f040 82e0 	bne.w	284aa <_flash_used+0x82e>
   27eea:	4640      	mov	r0, r8
   27eec:	4649      	mov	r1, r9
   27eee:	f7e4 fc13 	bl	c718 <__aeabi_d2f>
   27ef2:	62be      	str	r6, [r7, #40]	; 0x28
   27ef4:	6020      	str	r0, [r4, #0]
   27ef6:	e4fd      	b.n	278f4 <__ssvfscanf_r+0x868>
   27ef8:	0002f5d9 	.word	0x0002f5d9
   27efc:	68bd      	ldr	r5, [r7, #8]
   27efe:	230a      	movs	r3, #10
   27f00:	ee18 0a10 	vmov	r0, s16
   27f04:	1c69      	adds	r1, r5, #1
   27f06:	46a9      	mov	r9, r5
   27f08:	f7ff f81a 	bl	26f40 <_strtol_r>
   27f0c:	693b      	ldr	r3, [r7, #16]
   27f0e:	1ac2      	subs	r2, r0, r3
   27f10:	f207 23ab 	addw	r3, r7, #683	; 0x2ab
   27f14:	49cf      	ldr	r1, [pc, #828]	; (28254 <_flash_used+0x5d8>)
   27f16:	4599      	cmp	r9, r3
   27f18:	bf28      	it	cs
   27f1a:	f207 29aa 	addwcs	r9, r7, #682	; 0x2aa
   27f1e:	4648      	mov	r0, r9
   27f20:	f003 fc48 	bl	2b7b4 <sprintf>
   27f24:	e4d3      	b.n	278ce <__ssvfscanf_r+0x842>
   27f26:	4645      	mov	r5, r8
   27f28:	2d01      	cmp	r5, #1
   27f2a:	bf38      	it	cc
   27f2c:	2501      	movcc	r5, #1
   27f2e:	f014 0301 	ands.w	r3, r4, #1
   27f32:	f000 82e6 	beq.w	28502 <_flash_used+0x886>
   27f36:	f014 0310 	ands.w	r3, r4, #16
   27f3a:	61fb      	str	r3, [r7, #28]
   27f3c:	f000 8334 	beq.w	285a8 <_flash_used+0x92c>
   27f40:	f04f 0900 	mov.w	r9, #0
   27f44:	46c8      	mov	r8, r9
   27f46:	464e      	mov	r6, r9
   27f48:	f8c7 9038 	str.w	r9, [r7, #56]	; 0x38
   27f4c:	2400      	movs	r4, #0
   27f4e:	f002 fd5d 	bl	2aa0c <__locale_mb_cur_max>
   27f52:	42a0      	cmp	r0, r4
   27f54:	f43f a939 	beq.w	271ca <__ssvfscanf_r+0x13e>
   27f58:	f8db 1000 	ldr.w	r1, [fp]
   27f5c:	f507 7cac 	add.w	ip, r7, #344	; 0x158
   27f60:	f8db 2004 	ldr.w	r2, [fp, #4]
   27f64:	1c63      	adds	r3, r4, #1
   27f66:	f811 0b01 	ldrb.w	r0, [r1], #1
   27f6a:	3a01      	subs	r2, #1
   27f6c:	f80c 0004 	strb.w	r0, [ip, r4]
   27f70:	f107 0450 	add.w	r4, r7, #80	; 0x50
   27f74:	e9cb 1200 	strd	r1, r2, [fp]
   27f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   27f7a:	2a03      	cmp	r2, #3
   27f7c:	d102      	bne.n	27f84 <_flash_used+0x308>
   27f7e:	6822      	ldr	r2, [r4, #0]
   27f80:	2a04      	cmp	r2, #4
   27f82:	d006      	beq.n	27f92 <_flash_used+0x316>
   27f84:	2208      	movs	r2, #8
   27f86:	2100      	movs	r1, #0
   27f88:	4620      	mov	r0, r4
   27f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   27f8c:	f7fe f876 	bl	2607c <memset>
   27f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27f92:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   27f96:	4631      	mov	r1, r6
   27f98:	ee18 0a10 	vmov	r0, s16
   27f9c:	9400      	str	r4, [sp, #0]
   27f9e:	61bb      	str	r3, [r7, #24]
   27fa0:	f002 fdd6 	bl	2ab50 <_mbrtowc_r>
   27fa4:	1c42      	adds	r2, r0, #1
   27fa6:	62f8      	str	r0, [r7, #44]	; 0x2c
   27fa8:	f43f a90f 	beq.w	271ca <__ssvfscanf_r+0x13e>
   27fac:	69fa      	ldr	r2, [r7, #28]
   27fae:	69bb      	ldr	r3, [r7, #24]
   27fb0:	4302      	orrs	r2, r0
   27fb2:	f040 837d 	bne.w	286b0 <_flash_used+0xa34>
   27fb6:	449a      	add	sl, r3
   27fb8:	6032      	str	r2, [r6, #0]
   27fba:	3d01      	subs	r5, #1
   27fbc:	69fb      	ldr	r3, [r7, #28]
   27fbe:	2b00      	cmp	r3, #0
   27fc0:	f040 83a8 	bne.w	28714 <_flash_used+0xa98>
   27fc4:	eba6 0408 	sub.w	r4, r6, r8
   27fc8:	ebb9 0fa4 	cmp.w	r9, r4, asr #2
   27fcc:	f200 83a1 	bhi.w	28712 <_flash_used+0xa96>
   27fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27fd2:	2b00      	cmp	r3, #0
   27fd4:	f000 839d 	beq.w	28712 <_flash_used+0xa96>
   27fd8:	4640      	mov	r0, r8
   27fda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
   27fde:	f7fe f8a9 	bl	26134 <realloc>
   27fe2:	4680      	mov	r8, r0
   27fe4:	2800      	cmp	r0, #0
   27fe6:	f040 838f 	bne.w	28708 <_flash_used+0xa8c>
   27fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27fec:	2b00      	cmp	r3, #0
   27fee:	f000 8166 	beq.w	282be <_flash_used+0x642>
   27ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27ff4:	88dd      	ldrh	r5, [r3, #6]
   27ff6:	2d00      	cmp	r5, #0
   27ff8:	f000 8136 	beq.w	28268 <_flash_used+0x5ec>
   27ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27ffe:	f04f 0800 	mov.w	r8, #0
   28002:	681e      	ldr	r6, [r3, #0]
   28004:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   28008:	4634      	mov	r4, r6
   2800a:	6823      	ldr	r3, [r4, #0]
   2800c:	6818      	ldr	r0, [r3, #0]
   2800e:	f7fd fcf3 	bl	259f8 <free>
   28012:	f854 3b04 	ldr.w	r3, [r4], #4
   28016:	42ac      	cmp	r4, r5
   28018:	f8c3 8000 	str.w	r8, [r3]
   2801c:	d1f5      	bne.n	2800a <_flash_used+0x38e>
   2801e:	f04f 33ff 	mov.w	r3, #4294967295
   28022:	633b      	str	r3, [r7, #48]	; 0x30
   28024:	2e00      	cmp	r6, #0
   28026:	f47f a8de 	bne.w	271e6 <__ssvfscanf_r+0x15a>
   2802a:	f7ff b8df 	b.w	271ec <__ssvfscanf_r+0x160>
   2802e:	2400      	movs	r4, #0
   28030:	f7ff bb81 	b.w	27736 <__ssvfscanf_r+0x6aa>
   28034:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
   28038:	f7ff bb4d 	b.w	276d6 <__ssvfscanf_r+0x64a>
   2803c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2803e:	681b      	ldr	r3, [r3, #0]
   28040:	2b04      	cmp	r3, #4
   28042:	f47f ab54 	bne.w	276ee <__ssvfscanf_r+0x662>
   28046:	f7ff bb55 	b.w	276f4 <__ssvfscanf_r+0x668>
   2804a:	4654      	mov	r4, sl
   2804c:	f8d7 a018 	ldr.w	sl, [r7, #24]
   28050:	e6ab      	b.n	27daa <_flash_used+0x12e>
   28052:	f42b 6bf0 	bic.w	fp, fp, #1920	; 0x780
   28056:	2401      	movs	r4, #1
   28058:	f7ff b9c3 	b.w	273e2 <__ssvfscanf_r+0x356>
   2805c:	2301      	movs	r3, #1
   2805e:	f42b 6bf0 	bic.w	fp, fp, #1920	; 0x780
   28062:	63bb      	str	r3, [r7, #56]	; 0x38
   28064:	f7ff b9bd 	b.w	273e2 <__ssvfscanf_r+0x356>
   28068:	1e6b      	subs	r3, r5, #1
   2806a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   2806e:	4632      	mov	r2, r6
   28070:	ee18 0a10 	vmov	r0, s16
   28074:	461d      	mov	r5, r3
   28076:	f003 fdd7 	bl	2bc28 <_sungetc_r>
   2807a:	f7ff ba62 	b.w	27542 <__ssvfscanf_r+0x4b6>
   2807e:	f8c7 8010 	str.w	r8, [r7, #16]
   28082:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
   28086:	f002 fcc1 	bl	2aa0c <__locale_mb_cur_max>
   2808a:	42a8      	cmp	r0, r5
   2808c:	f43f a89d 	beq.w	271ca <__ssvfscanf_r+0x13e>
   28090:	f8db 2000 	ldr.w	r2, [fp]
   28094:	f507 70ac 	add.w	r0, r7, #344	; 0x158
   28098:	f8db 3004 	ldr.w	r3, [fp, #4]
   2809c:	f1b8 0f03 	cmp.w	r8, #3
   280a0:	f812 1b01 	ldrb.w	r1, [r2], #1
   280a4:	f105 0601 	add.w	r6, r5, #1
   280a8:	f103 33ff 	add.w	r3, r3, #4294967295
   280ac:	f107 0450 	add.w	r4, r7, #80	; 0x50
   280b0:	5541      	strb	r1, [r0, r5]
   280b2:	e9cb 2300 	strd	r2, r3, [fp]
   280b6:	d102      	bne.n	280be <_flash_used+0x442>
   280b8:	6823      	ldr	r3, [r4, #0]
   280ba:	2b04      	cmp	r3, #4
   280bc:	d004      	beq.n	280c8 <_flash_used+0x44c>
   280be:	2208      	movs	r2, #8
   280c0:	2100      	movs	r1, #0
   280c2:	4620      	mov	r0, r4
   280c4:	f7fd ffda 	bl	2607c <memset>
   280c8:	4633      	mov	r3, r6
   280ca:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   280ce:	4649      	mov	r1, r9
   280d0:	ee18 0a10 	vmov	r0, s16
   280d4:	9400      	str	r4, [sp, #0]
   280d6:	f002 fd3b 	bl	2ab50 <_mbrtowc_r>
   280da:	f1b0 3fff 	cmp.w	r0, #4294967295
   280de:	4680      	mov	r8, r0
   280e0:	f43f a873 	beq.w	271ca <__ssvfscanf_r+0x13e>
   280e4:	2800      	cmp	r0, #0
   280e6:	f040 80cf 	bne.w	28288 <_flash_used+0x60c>
   280ea:	f8c9 0000 	str.w	r0, [r9]
   280ee:	f002 fc7d 	bl	2a9ec <iswspace>
   280f2:	2800      	cmp	r0, #0
   280f4:	f040 817c 	bne.w	283f0 <_flash_used+0x774>
   280f8:	44b2      	add	sl, r6
   280fa:	693b      	ldr	r3, [r7, #16]
   280fc:	3b01      	subs	r3, #1
   280fe:	613b      	str	r3, [r7, #16]
   28100:	69fe      	ldr	r6, [r7, #28]
   28102:	2e00      	cmp	r6, #0
   28104:	f040 8140 	bne.w	28388 <_flash_used+0x70c>
   28108:	f109 0904 	add.w	r9, r9, #4
   2810c:	69b8      	ldr	r0, [r7, #24]
   2810e:	697b      	ldr	r3, [r7, #20]
   28110:	eba9 0400 	sub.w	r4, r9, r0
   28114:	461d      	mov	r5, r3
   28116:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   2811a:	f200 8135 	bhi.w	28388 <_flash_used+0x70c>
   2811e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   28120:	2a00      	cmp	r2, #0
   28122:	f000 8131 	beq.w	28388 <_flash_used+0x70c>
   28126:	00d9      	lsls	r1, r3, #3
   28128:	f7fe f804 	bl	26134 <realloc>
   2812c:	61b8      	str	r0, [r7, #24]
   2812e:	2800      	cmp	r0, #0
   28130:	f43f af5b 	beq.w	27fea <_flash_used+0x36e>
   28134:	6bba      	ldr	r2, [r7, #56]	; 0x38
   28136:	006b      	lsls	r3, r5, #1
   28138:	eb00 0904 	add.w	r9, r0, r4
   2813c:	6010      	str	r0, [r2, #0]
   2813e:	617b      	str	r3, [r7, #20]
   28140:	f8db 3004 	ldr.w	r3, [fp, #4]
   28144:	2b00      	cmp	r3, #0
   28146:	f77f a833 	ble.w	271b0 <__ssvfscanf_r+0x124>
   2814a:	f8db 3000 	ldr.w	r3, [fp]
   2814e:	4a42      	ldr	r2, [pc, #264]	; (28258 <_flash_used+0x5dc>)
   28150:	781b      	ldrb	r3, [r3, #0]
   28152:	5cd3      	ldrb	r3, [r2, r3]
   28154:	071b      	lsls	r3, r3, #28
   28156:	d42d      	bmi.n	281b4 <_flash_used+0x538>
   28158:	693b      	ldr	r3, [r7, #16]
   2815a:	b35b      	cbz	r3, 281b4 <_flash_used+0x538>
   2815c:	4635      	mov	r5, r6
   2815e:	f002 fc55 	bl	2aa0c <__locale_mb_cur_max>
   28162:	42a8      	cmp	r0, r5
   28164:	d194      	bne.n	28090 <_flash_used+0x414>
   28166:	f7ff b830 	b.w	271ca <__ssvfscanf_r+0x13e>
   2816a:	e9d7 1305 	ldrd	r1, r3, [r7, #20]
   2816e:	428b      	cmp	r3, r1
   28170:	eba3 0201 	sub.w	r2, r3, r1
   28174:	f47f aecc 	bne.w	27f10 <_flash_used+0x294>
   28178:	f7ff bba9 	b.w	278ce <__ssvfscanf_r+0x842>
   2817c:	465a      	mov	r2, fp
   2817e:	ee18 0a10 	vmov	r0, s16
   28182:	f003 fd51 	bl	2bc28 <_sungetc_r>
   28186:	f1aa 0a02 	sub.w	sl, sl, #2
   2818a:	f819 1c02 	ldrb.w	r1, [r9, #-2]
   2818e:	f1a9 0902 	sub.w	r9, r9, #2
   28192:	f7ff bb87 	b.w	278a4 <__ssvfscanf_r+0x818>
   28196:	1b31      	subs	r1, r6, r4
   28198:	448a      	add	sl, r1
   2819a:	3101      	adds	r1, #1
   2819c:	e579      	b.n	27c92 <_flash_used+0x16>
   2819e:	2101      	movs	r1, #1
   281a0:	e577      	b.n	27c92 <_flash_used+0x16>
   281a2:	2300      	movs	r3, #0
   281a4:	f107 0244 	add.w	r2, r7, #68	; 0x44
   281a8:	617b      	str	r3, [r7, #20]
   281aa:	4691      	mov	r9, r2
   281ac:	61bb      	str	r3, [r7, #24]
   281ae:	63bb      	str	r3, [r7, #56]	; 0x38
   281b0:	f7ff ba18 	b.w	275e4 <__ssvfscanf_r+0x558>
   281b4:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   281b8:	f7ff ba1d 	b.w	275f6 <__ssvfscanf_r+0x56a>
   281bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
   281c0:	f8db 2000 	ldr.w	r2, [fp]
   281c4:	4619      	mov	r1, r3
   281c6:	7813      	ldrb	r3, [r2, #0]
   281c8:	5ccb      	ldrb	r3, [r1, r3]
   281ca:	2b00      	cmp	r3, #0
   281cc:	f43f a806 	beq.w	271dc <__ssvfscanf_r+0x150>
   281d0:	f8db 3004 	ldr.w	r3, [fp, #4]
   281d4:	3201      	adds	r2, #1
   281d6:	f1b8 0f01 	cmp.w	r8, #1
   281da:	f103 33ff 	add.w	r3, r3, #4294967295
   281de:	e9cb 2300 	strd	r2, r3, [fp]
   281e2:	f43f acdc 	beq.w	27b9e <__ssvfscanf_r+0xb12>
   281e6:	461a      	mov	r2, r3
   281e8:	ee18 4a10 	vmov	r4, s16
   281ec:	460d      	mov	r5, r1
   281ee:	e012      	b.n	28216 <_flash_used+0x59a>
   281f0:	f8db 3000 	ldr.w	r3, [fp]
   281f4:	781a      	ldrb	r2, [r3, #0]
   281f6:	3301      	adds	r3, #1
   281f8:	5caa      	ldrb	r2, [r5, r2]
   281fa:	2a00      	cmp	r2, #0
   281fc:	f43f accf 	beq.w	27b9e <__ssvfscanf_r+0xb12>
   28200:	f8db 2004 	ldr.w	r2, [fp, #4]
   28204:	3601      	adds	r6, #1
   28206:	f8cb 3000 	str.w	r3, [fp]
   2820a:	3a01      	subs	r2, #1
   2820c:	45b0      	cmp	r8, r6
   2820e:	f8cb 2004 	str.w	r2, [fp, #4]
   28212:	f43f acc4 	beq.w	27b9e <__ssvfscanf_r+0xb12>
   28216:	2a00      	cmp	r2, #0
   28218:	dcea      	bgt.n	281f0 <_flash_used+0x574>
   2821a:	4659      	mov	r1, fp
   2821c:	4620      	mov	r0, r4
   2821e:	f003 fd43 	bl	2bca8 <__ssrefill_r>
   28222:	2800      	cmp	r0, #0
   28224:	d0e4      	beq.n	281f0 <_flash_used+0x574>
   28226:	44b2      	add	sl, r6
   28228:	f7fe bffd 	b.w	27226 <__ssvfscanf_r+0x19a>
   2822c:	2300      	movs	r3, #0
   2822e:	f107 0244 	add.w	r2, r7, #68	; 0x44
   28232:	613b      	str	r3, [r7, #16]
   28234:	4691      	mov	r9, r2
   28236:	e9c7 3302 	strd	r3, r3, [r7, #8]
   2823a:	f7ff ba2a 	b.w	27692 <__ssvfscanf_r+0x606>
   2823e:	f8d7 a01c 	ldr.w	sl, [r7, #28]
   28242:	62fe      	str	r6, [r7, #44]	; 0x2c
   28244:	f7ff bac4 	b.w	277d0 <__ssvfscanf_r+0x744>
   28248:	7882      	ldrb	r2, [r0, #2]
   2824a:	f044 0402 	orr.w	r4, r4, #2
   2824e:	3002      	adds	r0, #2
   28250:	f7fe bf51 	b.w	270f6 <__ssvfscanf_r+0x6a>
   28254:	0002f778 	.word	0x0002f778
   28258:	0002f5d9 	.word	0x0002f5d9
   2825c:	7882      	ldrb	r2, [r0, #2]
   2825e:	f044 0408 	orr.w	r4, r4, #8
   28262:	3002      	adds	r0, #2
   28264:	f7fe bf47 	b.w	270f6 <__ssvfscanf_r+0x6a>
   28268:	681e      	ldr	r6, [r3, #0]
   2826a:	f04f 33ff 	mov.w	r3, #4294967295
   2826e:	633b      	str	r3, [r7, #48]	; 0x30
   28270:	2e00      	cmp	r6, #0
   28272:	f47e afb8 	bne.w	271e6 <__ssvfscanf_r+0x15a>
   28276:	f7fe bfb9 	b.w	271ec <__ssvfscanf_r+0x160>
   2827a:	f856 5b04 	ldr.w	r5, [r6], #4
   2827e:	4699      	mov	r9, r3
   28280:	61fb      	str	r3, [r7, #28]
   28282:	63bb      	str	r3, [r7, #56]	; 0x38
   28284:	62be      	str	r6, [r7, #40]	; 0x28
   28286:	e4ca      	b.n	27c1e <__ssvfscanf_r+0xb92>
   28288:	f110 0f02 	cmn.w	r0, #2
   2828c:	f43f af58 	beq.w	28140 <_flash_used+0x4c4>
   28290:	f8d9 0000 	ldr.w	r0, [r9]
   28294:	f002 fbaa 	bl	2a9ec <iswspace>
   28298:	2800      	cmp	r0, #0
   2829a:	f040 80a9 	bne.w	283f0 <_flash_used+0x774>
   2829e:	f1b8 0f03 	cmp.w	r8, #3
   282a2:	44b2      	add	sl, r6
   282a4:	f47f af29 	bne.w	280fa <_flash_used+0x47e>
   282a8:	6823      	ldr	r3, [r4, #0]
   282aa:	2b04      	cmp	r3, #4
   282ac:	f47f af25 	bne.w	280fa <_flash_used+0x47e>
   282b0:	e726      	b.n	28100 <_flash_used+0x484>
   282b2:	b082      	sub	sp, #8
   282b4:	aa02      	add	r2, sp, #8
   282b6:	6013      	str	r3, [r2, #0]
   282b8:	9303      	str	r3, [sp, #12]
   282ba:	637a      	str	r2, [r7, #52]	; 0x34
   282bc:	e402      	b.n	27ac4 <__ssvfscanf_r+0xa38>
   282be:	f04f 33ff 	mov.w	r3, #4294967295
   282c2:	633b      	str	r3, [r7, #48]	; 0x30
   282c4:	f7fe bf92 	b.w	271ec <__ssvfscanf_r+0x160>
   282c8:	69fb      	ldr	r3, [r7, #28]
   282ca:	f856 9b04 	ldr.w	r9, [r6], #4
   282ce:	63bb      	str	r3, [r7, #56]	; 0x38
   282d0:	62be      	str	r6, [r7, #40]	; 0x28
   282d2:	e9c7 3305 	strd	r3, r3, [r7, #20]
   282d6:	f7ff b985 	b.w	275e4 <__ssvfscanf_r+0x558>
   282da:	f856 5b04 	ldr.w	r5, [r6], #4
   282de:	61fc      	str	r4, [r7, #28]
   282e0:	62be      	str	r6, [r7, #40]	; 0x28
   282e2:	e513      	b.n	27d0c <_flash_used+0x90>
   282e4:	697b      	ldr	r3, [r7, #20]
   282e6:	f856 9b04 	ldr.w	r9, [r6], #4
   282ea:	60bb      	str	r3, [r7, #8]
   282ec:	62be      	str	r6, [r7, #40]	; 0x28
   282ee:	e9c7 3303 	strd	r3, r3, [r7, #12]
   282f2:	f7ff b9ce 	b.w	27692 <__ssvfscanf_r+0x606>
   282f6:	0766      	lsls	r6, r4, #29
   282f8:	f140 8091 	bpl.w	2841e <_flash_used+0x7a2>
   282fc:	6abe      	ldr	r6, [r7, #40]	; 0x28
   282fe:	63f9      	str	r1, [r7, #60]	; 0x3c
   28300:	f856 3b04 	ldr.w	r3, [r6], #4
   28304:	f8a3 a000 	strh.w	sl, [r3]
   28308:	62be      	str	r6, [r7, #40]	; 0x28
   2830a:	f7fe bf8c 	b.w	27226 <__ssvfscanf_r+0x19a>
   2830e:	4659      	mov	r1, fp
   28310:	ee18 0a10 	vmov	r0, s16
   28314:	f003 fcc8 	bl	2bca8 <__ssrefill_r>
   28318:	2800      	cmp	r0, #0
   2831a:	f43f acaf 	beq.w	27c7c <_flash_used>
   2831e:	e4b4      	b.n	27c8a <_flash_used+0xe>
   28320:	f8db 2000 	ldr.w	r2, [fp]
   28324:	49c0      	ldr	r1, [pc, #768]	; (28628 <_flash_used+0x9ac>)
   28326:	7813      	ldrb	r3, [r2, #0]
   28328:	5ccb      	ldrb	r3, [r1, r3]
   2832a:	071c      	lsls	r4, r3, #28
   2832c:	d429      	bmi.n	28382 <_flash_used+0x706>
   2832e:	f8db 3004 	ldr.w	r3, [fp, #4]
   28332:	3201      	adds	r2, #1
   28334:	f1b8 0f01 	cmp.w	r8, #1
   28338:	f103 33ff 	add.w	r3, r3, #4294967295
   2833c:	e9cb 2300 	strd	r2, r3, [fp]
   28340:	f000 80cc 	beq.w	284dc <_flash_used+0x860>
   28344:	2501      	movs	r5, #1
   28346:	461a      	mov	r2, r3
   28348:	ee18 4a10 	vmov	r4, s16
   2834c:	e011      	b.n	28372 <_flash_used+0x6f6>
   2834e:	f8db 3000 	ldr.w	r3, [fp]
   28352:	49b5      	ldr	r1, [pc, #724]	; (28628 <_flash_used+0x9ac>)
   28354:	781a      	ldrb	r2, [r3, #0]
   28356:	3301      	adds	r3, #1
   28358:	5c8a      	ldrb	r2, [r1, r2]
   2835a:	0710      	lsls	r0, r2, #28
   2835c:	d411      	bmi.n	28382 <_flash_used+0x706>
   2835e:	f8db 2004 	ldr.w	r2, [fp, #4]
   28362:	3501      	adds	r5, #1
   28364:	f8cb 3000 	str.w	r3, [fp]
   28368:	3a01      	subs	r2, #1
   2836a:	45a8      	cmp	r8, r5
   2836c:	f8cb 2004 	str.w	r2, [fp, #4]
   28370:	d007      	beq.n	28382 <_flash_used+0x706>
   28372:	2a00      	cmp	r2, #0
   28374:	dceb      	bgt.n	2834e <_flash_used+0x6d2>
   28376:	4659      	mov	r1, fp
   28378:	4620      	mov	r0, r4
   2837a:	f003 fc95 	bl	2bca8 <__ssrefill_r>
   2837e:	2800      	cmp	r0, #0
   28380:	d0e5      	beq.n	2834e <_flash_used+0x6d2>
   28382:	44aa      	add	sl, r5
   28384:	f7fe bf4f 	b.w	27226 <__ssvfscanf_r+0x19a>
   28388:	2600      	movs	r6, #0
   2838a:	e6d9      	b.n	28140 <_flash_used+0x4c4>
   2838c:	f014 0201 	ands.w	r2, r4, #1
   28390:	f47f abf8 	bne.w	27b84 <__ssvfscanf_r+0xaf8>
   28394:	07a3      	lsls	r3, r4, #30
   28396:	d571      	bpl.n	2847c <_flash_used+0x800>
   28398:	4ba4      	ldr	r3, [pc, #656]	; (2862c <_flash_used+0x9b0>)
   2839a:	ee18 0a10 	vmov	r0, s16
   2839e:	6a39      	ldr	r1, [r7, #32]
   283a0:	4299      	cmp	r1, r3
   283a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   283a4:	69f9      	ldr	r1, [r7, #28]
   283a6:	f000 809d 	beq.w	284e4 <_flash_used+0x868>
   283aa:	f003 faef 	bl	2b98c <_strtoll_r>
   283ae:	6abc      	ldr	r4, [r7, #40]	; 0x28
   283b0:	f854 3b04 	ldr.w	r3, [r4], #4
   283b4:	6018      	str	r0, [r3, #0]
   283b6:	62bc      	str	r4, [r7, #40]	; 0x28
   283b8:	6059      	str	r1, [r3, #4]
   283ba:	f7ff bbe8 	b.w	27b8e <__ssvfscanf_r+0xb02>
   283be:	4645      	mov	r5, r8
   283c0:	f8d7 a01c 	ldr.w	sl, [r7, #28]
   283c4:	62fe      	str	r6, [r7, #44]	; 0x2c
   283c6:	2d00      	cmp	r5, #0
   283c8:	f43f aa02 	beq.w	277d0 <__ssvfscanf_r+0x744>
   283cc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   283d0:	ee18 6a10 	vmov	r6, s16
   283d4:	441c      	add	r4, r3
   283d6:	7821      	ldrb	r1, [r4, #0]
   283d8:	465a      	mov	r2, fp
   283da:	4630      	mov	r0, r6
   283dc:	f003 fc24 	bl	2bc28 <_sungetc_r>
   283e0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   283e4:	429c      	cmp	r4, r3
   283e6:	f104 34ff 	add.w	r4, r4, #4294967295
   283ea:	d1f4      	bne.n	283d6 <_flash_used+0x75a>
   283ec:	f7ff b9f0 	b.w	277d0 <__ssvfscanf_r+0x744>
   283f0:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   283f4:	2e00      	cmp	r6, #0
   283f6:	f43f a8fe 	beq.w	275f6 <__ssvfscanf_r+0x56a>
   283fa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   283fe:	ee18 6a10 	vmov	r6, s16
   28402:	441d      	add	r5, r3
   28404:	7829      	ldrb	r1, [r5, #0]
   28406:	465a      	mov	r2, fp
   28408:	4630      	mov	r0, r6
   2840a:	f003 fc0d 	bl	2bc28 <_sungetc_r>
   2840e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   28412:	42ab      	cmp	r3, r5
   28414:	f105 35ff 	add.w	r5, r5, #4294967295
   28418:	d1f4      	bne.n	28404 <_flash_used+0x788>
   2841a:	f7ff b8ec 	b.w	275f6 <__ssvfscanf_r+0x56a>
   2841e:	07e5      	lsls	r5, r4, #31
   28420:	d40c      	bmi.n	2843c <_flash_used+0x7c0>
   28422:	07a0      	lsls	r0, r4, #30
   28424:	d50a      	bpl.n	2843c <_flash_used+0x7c0>
   28426:	6abe      	ldr	r6, [r7, #40]	; 0x28
   28428:	4652      	mov	r2, sl
   2842a:	63f9      	str	r1, [r7, #60]	; 0x3c
   2842c:	17d3      	asrs	r3, r2, #31
   2842e:	f856 1b04 	ldr.w	r1, [r6], #4
   28432:	62be      	str	r6, [r7, #40]	; 0x28
   28434:	e9c1 2300 	strd	r2, r3, [r1]
   28438:	f7fe bef5 	b.w	27226 <__ssvfscanf_r+0x19a>
   2843c:	6abe      	ldr	r6, [r7, #40]	; 0x28
   2843e:	63f9      	str	r1, [r7, #60]	; 0x3c
   28440:	f856 3b04 	ldr.w	r3, [r6], #4
   28444:	f8c3 a000 	str.w	sl, [r3]
   28448:	62be      	str	r6, [r7, #40]	; 0x28
   2844a:	f7fe beec 	b.w	27226 <__ssvfscanf_r+0x19a>
   2844e:	617e      	str	r6, [r7, #20]
   28450:	4626      	mov	r6, r4
   28452:	465c      	mov	r4, fp
   28454:	46c3      	mov	fp, r8
   28456:	4635      	mov	r5, r6
   28458:	f7ff ba0b 	b.w	27872 <__ssvfscanf_r+0x7e6>
   2845c:	69fc      	ldr	r4, [r7, #28]
   2845e:	ee18 aa10 	vmov	sl, s16
   28462:	45a1      	cmp	r9, r4
   28464:	f67e aeba 	bls.w	271dc <__ssvfscanf_r+0x150>
   28468:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   2846c:	465a      	mov	r2, fp
   2846e:	4650      	mov	r0, sl
   28470:	f003 fbda 	bl	2bc28 <_sungetc_r>
   28474:	45a1      	cmp	r9, r4
   28476:	d1f7      	bne.n	28468 <_flash_used+0x7ec>
   28478:	f7fe beb0 	b.w	271dc <__ssvfscanf_r+0x150>
   2847c:	6abc      	ldr	r4, [r7, #40]	; 0x28
   2847e:	f854 3b04 	ldr.w	r3, [r4], #4
   28482:	62bc      	str	r4, [r7, #40]	; 0x28
   28484:	6018      	str	r0, [r3, #0]
   28486:	f7ff bb82 	b.w	27b8e <__ssvfscanf_r+0xb02>
   2848a:	69fc      	ldr	r4, [r7, #28]
   2848c:	ee18 aa10 	vmov	sl, s16
   28490:	45a1      	cmp	r9, r4
   28492:	f67e aea3 	bls.w	271dc <__ssvfscanf_r+0x150>
   28496:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   2849a:	465a      	mov	r2, fp
   2849c:	4650      	mov	r0, sl
   2849e:	f003 fbc3 	bl	2bc28 <_sungetc_r>
   284a2:	45a1      	cmp	r9, r4
   284a4:	d1f7      	bne.n	28496 <_flash_used+0x81a>
   284a6:	f7fe be99 	b.w	271dc <__ssvfscanf_r+0x150>
   284aa:	4861      	ldr	r0, [pc, #388]	; (28630 <_flash_used+0x9b4>)
   284ac:	62be      	str	r6, [r7, #40]	; 0x28
   284ae:	f003 f92f 	bl	2b710 <nanf>
   284b2:	ed84 0a00 	vstr	s0, [r4]
   284b6:	f7ff ba1d 	b.w	278f4 <__ssvfscanf_r+0x868>
   284ba:	69fb      	ldr	r3, [r7, #28]
   284bc:	ee18 aa10 	vmov	sl, s16
   284c0:	4599      	cmp	r9, r3
   284c2:	f67e ae8b 	bls.w	271dc <__ssvfscanf_r+0x150>
   284c6:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   284ca:	465a      	mov	r2, fp
   284cc:	4650      	mov	r0, sl
   284ce:	f003 fbab 	bl	2bc28 <_sungetc_r>
   284d2:	69fb      	ldr	r3, [r7, #28]
   284d4:	4599      	cmp	r9, r3
   284d6:	d1f6      	bne.n	284c6 <_flash_used+0x84a>
   284d8:	f7fe be80 	b.w	271dc <__ssvfscanf_r+0x150>
   284dc:	4645      	mov	r5, r8
   284de:	44aa      	add	sl, r5
   284e0:	f7fe bea1 	b.w	27226 <__ssvfscanf_r+0x19a>
   284e4:	f003 fb1a 	bl	2bb1c <_strtoull_r>
   284e8:	e761      	b.n	283ae <_flash_used+0x732>
   284ea:	4635      	mov	r5, r6
   284ec:	f7ff b9c1 	b.w	27872 <__ssvfscanf_r+0x7e6>
   284f0:	f8d9 3000 	ldr.w	r3, [r9]
   284f4:	461d      	mov	r5, r3
   284f6:	3301      	adds	r3, #1
   284f8:	f47f a8d7 	bne.w	276aa <__ssvfscanf_r+0x61e>
   284fc:	462a      	mov	r2, r5
   284fe:	f7ff b8ea 	b.w	276d6 <__ssvfscanf_r+0x64a>
   28502:	06e1      	lsls	r1, r4, #27
   28504:	f100 8096 	bmi.w	28634 <_flash_used+0x9b8>
   28508:	f014 0f80 	tst.w	r4, #128	; 0x80
   2850c:	6abc      	ldr	r4, [r7, #40]	; 0x28
   2850e:	f000 80aa 	beq.w	28666 <_flash_used+0x9ea>
   28512:	f854 6b04 	ldr.w	r6, [r4], #4
   28516:	2e00      	cmp	r6, #0
   28518:	f43e ae60 	beq.w	271dc <__ssvfscanf_r+0x150>
   2851c:	4628      	mov	r0, r5
   2851e:	f7fd fa63 	bl	259e8 <malloc>
   28522:	4681      	mov	r9, r0
   28524:	2800      	cmp	r0, #0
   28526:	f43f ad60 	beq.w	27fea <_flash_used+0x36e>
   2852a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2852c:	6030      	str	r0, [r6, #0]
   2852e:	f8b3 8006 	ldrh.w	r8, [r3, #6]
   28532:	889a      	ldrh	r2, [r3, #4]
   28534:	4590      	cmp	r8, r2
   28536:	f0c0 80af 	bcc.w	28698 <_flash_used+0xa1c>
   2853a:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   2853e:	429a      	cmp	r2, r3
   28540:	f63f ad57 	bhi.w	27ff2 <_flash_used+0x376>
   28544:	f102 0308 	add.w	r3, r2, #8
   28548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2854a:	0099      	lsls	r1, r3, #2
   2854c:	6810      	ldr	r0, [r2, #0]
   2854e:	63bb      	str	r3, [r7, #56]	; 0x38
   28550:	f7fd fdf0 	bl	26134 <realloc>
   28554:	2800      	cmp	r0, #0
   28556:	f43f ad4c 	beq.w	27ff2 <_flash_used+0x376>
   2855a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2855c:	461a      	mov	r2, r3
   2855e:	6018      	str	r0, [r3, #0]
   28560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28562:	8093      	strh	r3, [r2, #4]
   28564:	f840 6028 	str.w	r6, [r0, r8, lsl #2]
   28568:	f108 0201 	add.w	r2, r8, #1
   2856c:	6b78      	ldr	r0, [r7, #52]	; 0x34
   2856e:	4649      	mov	r1, r9
   28570:	462b      	mov	r3, r5
   28572:	80c2      	strh	r2, [r0, #6]
   28574:	2201      	movs	r2, #1
   28576:	ee18 0a10 	vmov	r0, s16
   2857a:	f8cd b000 	str.w	fp, [sp]
   2857e:	f003 fbb1 	bl	2bce4 <_sfread_r>
   28582:	4680      	mov	r8, r0
   28584:	2800      	cmp	r0, #0
   28586:	f000 8089 	beq.w	2869c <_flash_used+0xa20>
   2858a:	4285      	cmp	r5, r0
   2858c:	d905      	bls.n	2859a <_flash_used+0x91e>
   2858e:	4601      	mov	r1, r0
   28590:	6830      	ldr	r0, [r6, #0]
   28592:	f7fd fdcf 	bl	26134 <realloc>
   28596:	b100      	cbz	r0, 2859a <_flash_used+0x91e>
   28598:	6030      	str	r0, [r6, #0]
   2859a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2859c:	44c2      	add	sl, r8
   2859e:	62bc      	str	r4, [r7, #40]	; 0x28
   285a0:	3301      	adds	r3, #1
   285a2:	633b      	str	r3, [r7, #48]	; 0x30
   285a4:	f7fe be3f 	b.w	27226 <__ssvfscanf_r+0x19a>
   285a8:	0621      	lsls	r1, r4, #24
   285aa:	d534      	bpl.n	28616 <_flash_used+0x99a>
   285ac:	f8d7 8028 	ldr.w	r8, [r7, #40]	; 0x28
   285b0:	f858 3b04 	ldr.w	r3, [r8], #4
   285b4:	63bb      	str	r3, [r7, #56]	; 0x38
   285b6:	2b00      	cmp	r3, #0
   285b8:	f43e ae10 	beq.w	271dc <__ssvfscanf_r+0x150>
   285bc:	2080      	movs	r0, #128	; 0x80
   285be:	f7fd fa13 	bl	259e8 <malloc>
   285c2:	4606      	mov	r6, r0
   285c4:	2800      	cmp	r0, #0
   285c6:	f43f ad10 	beq.w	27fea <_flash_used+0x36e>
   285ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   285cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
   285ce:	f8b3 9006 	ldrh.w	r9, [r3, #6]
   285d2:	889c      	ldrh	r4, [r3, #4]
   285d4:	6010      	str	r0, [r2, #0]
   285d6:	45a1      	cmp	r9, r4
   285d8:	d35c      	bcc.n	28694 <_flash_used+0xa18>
   285da:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   285de:	429c      	cmp	r4, r3
   285e0:	f63f ad07 	bhi.w	27ff2 <_flash_used+0x376>
   285e4:	3408      	adds	r4, #8
   285e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   285e8:	00a1      	lsls	r1, r4, #2
   285ea:	6818      	ldr	r0, [r3, #0]
   285ec:	f7fd fda2 	bl	26134 <realloc>
   285f0:	2800      	cmp	r0, #0
   285f2:	f43f acfe 	beq.w	27ff2 <_flash_used+0x376>
   285f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   285f8:	6018      	str	r0, [r3, #0]
   285fa:	809c      	strh	r4, [r3, #4]
   285fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
   285fe:	f109 0301 	add.w	r3, r9, #1
   28602:	f8c7 8028 	str.w	r8, [r7, #40]	; 0x28
   28606:	46b0      	mov	r8, r6
   28608:	f840 2029 	str.w	r2, [r0, r9, lsl #2]
   2860c:	f04f 0920 	mov.w	r9, #32
   28610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   28612:	80d3      	strh	r3, [r2, #6]
   28614:	e49a      	b.n	27f4c <_flash_used+0x2d0>
   28616:	6abc      	ldr	r4, [r7, #40]	; 0x28
   28618:	69fb      	ldr	r3, [r7, #28]
   2861a:	f854 6b04 	ldr.w	r6, [r4], #4
   2861e:	4699      	mov	r9, r3
   28620:	4698      	mov	r8, r3
   28622:	63bb      	str	r3, [r7, #56]	; 0x38
   28624:	62bc      	str	r4, [r7, #40]	; 0x28
   28626:	e491      	b.n	27f4c <_flash_used+0x2d0>
   28628:	0002f5d9 	.word	0x0002f5d9
   2862c:	00027071 	.word	0x00027071
   28630:	0002f5a4 	.word	0x0002f5a4
   28634:	461c      	mov	r4, r3
   28636:	f8db 2004 	ldr.w	r2, [fp, #4]
   2863a:	4659      	mov	r1, fp
   2863c:	ee18 0a10 	vmov	r0, s16
   28640:	f8db 3000 	ldr.w	r3, [fp]
   28644:	4295      	cmp	r5, r2
   28646:	dd1d      	ble.n	28684 <_flash_used+0xa08>
   28648:	4413      	add	r3, r2
   2864a:	4414      	add	r4, r2
   2864c:	1aad      	subs	r5, r5, r2
   2864e:	f8cb 3000 	str.w	r3, [fp]
   28652:	f003 fb29 	bl	2bca8 <__ssrefill_r>
   28656:	2800      	cmp	r0, #0
   28658:	d0ed      	beq.n	28636 <_flash_used+0x9ba>
   2865a:	2c00      	cmp	r4, #0
   2865c:	f43e adb5 	beq.w	271ca <__ssvfscanf_r+0x13e>
   28660:	44a2      	add	sl, r4
   28662:	f7fe bde0 	b.w	27226 <__ssvfscanf_r+0x19a>
   28666:	f854 1b04 	ldr.w	r1, [r4], #4
   2866a:	462b      	mov	r3, r5
   2866c:	2201      	movs	r2, #1
   2866e:	ee18 0a10 	vmov	r0, s16
   28672:	f8cd b000 	str.w	fp, [sp]
   28676:	f003 fb35 	bl	2bce4 <_sfread_r>
   2867a:	4680      	mov	r8, r0
   2867c:	2800      	cmp	r0, #0
   2867e:	d18c      	bne.n	2859a <_flash_used+0x91e>
   28680:	f7fe bda3 	b.w	271ca <__ssvfscanf_r+0x13e>
   28684:	1b52      	subs	r2, r2, r5
   28686:	442c      	add	r4, r5
   28688:	442b      	add	r3, r5
   2868a:	44a2      	add	sl, r4
   2868c:	e9cb 3200 	strd	r3, r2, [fp]
   28690:	f7fe bdc9 	b.w	27226 <__ssvfscanf_r+0x19a>
   28694:	6818      	ldr	r0, [r3, #0]
   28696:	e7b1      	b.n	285fc <_flash_used+0x980>
   28698:	6818      	ldr	r0, [r3, #0]
   2869a:	e763      	b.n	28564 <_flash_used+0x8e8>
   2869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2869e:	2b00      	cmp	r3, #0
   286a0:	f43f aca7 	beq.w	27ff2 <_flash_used+0x376>
   286a4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   286a8:	065b      	lsls	r3, r3, #25
   286aa:	f57e ad99 	bpl.w	271e0 <__ssvfscanf_r+0x154>
   286ae:	e49c      	b.n	27fea <_flash_used+0x36e>
   286b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   286b2:	1c90      	adds	r0, r2, #2
   286b4:	d008      	beq.n	286c8 <_flash_used+0xa4c>
   286b6:	2a03      	cmp	r2, #3
   286b8:	449a      	add	sl, r3
   286ba:	f47f ac7e 	bne.w	27fba <_flash_used+0x33e>
   286be:	6823      	ldr	r3, [r4, #0]
   286c0:	2b04      	cmp	r3, #4
   286c2:	f47f ac7a 	bne.w	27fba <_flash_used+0x33e>
   286c6:	e479      	b.n	27fbc <_flash_used+0x340>
   286c8:	f8db 2004 	ldr.w	r2, [fp, #4]
   286cc:	461c      	mov	r4, r3
   286ce:	2a00      	cmp	r2, #0
   286d0:	f73f ac3d 	bgt.w	27f4e <_flash_used+0x2d2>
   286d4:	4659      	mov	r1, fp
   286d6:	ee18 0a10 	vmov	r0, s16
   286da:	f003 fae5 	bl	2bca8 <__ssrefill_r>
   286de:	b978      	cbnz	r0, 28700 <_flash_used+0xa84>
   286e0:	2d00      	cmp	r5, #0
   286e2:	f47f ac34 	bne.w	27f4e <_flash_used+0x2d2>
   286e6:	eba6 0108 	sub.w	r1, r6, r8
   286ea:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
   286ee:	d901      	bls.n	286f4 <_flash_used+0xa78>
   286f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   286f2:	b9c3      	cbnz	r3, 28726 <_flash_used+0xaaa>
   286f4:	69fb      	ldr	r3, [r7, #28]
   286f6:	2b00      	cmp	r3, #0
   286f8:	f47e ad95 	bne.w	27226 <__ssvfscanf_r+0x19a>
   286fc:	f7ff b8fa 	b.w	278f4 <__ssvfscanf_r+0x868>
   28700:	2c00      	cmp	r4, #0
   28702:	d0f0      	beq.n	286e6 <_flash_used+0xa6a>
   28704:	f7fe bd61 	b.w	271ca <__ssvfscanf_r+0x13e>
   28708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2870a:	1906      	adds	r6, r0, r4
   2870c:	ea4f 0949 	mov.w	r9, r9, lsl #1
   28710:	6018      	str	r0, [r3, #0]
   28712:	3604      	adds	r6, #4
   28714:	f8db 3004 	ldr.w	r3, [fp, #4]
   28718:	2400      	movs	r4, #0
   2871a:	2b00      	cmp	r3, #0
   2871c:	ddda      	ble.n	286d4 <_flash_used+0xa58>
   2871e:	2d00      	cmp	r5, #0
   28720:	f47f ac15 	bne.w	27f4e <_flash_used+0x2d2>
   28724:	e7df      	b.n	286e6 <_flash_used+0xa6a>
   28726:	6bbc      	ldr	r4, [r7, #56]	; 0x38
   28728:	6820      	ldr	r0, [r4, #0]
   2872a:	f7fd fd03 	bl	26134 <realloc>
   2872e:	2800      	cmp	r0, #0
   28730:	d0e0      	beq.n	286f4 <_flash_used+0xa78>
   28732:	6020      	str	r0, [r4, #0]
   28734:	e7de      	b.n	286f4 <_flash_used+0xa78>
   28736:	bf00      	nop

00028738 <__sprint_r.part.0>:
   28738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2873c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   2873e:	4690      	mov	r8, r2
   28740:	049c      	lsls	r4, r3, #18
   28742:	d52c      	bpl.n	2879e <__sprint_r.part.0+0x66>
   28744:	6893      	ldr	r3, [r2, #8]
   28746:	6812      	ldr	r2, [r2, #0]
   28748:	b33b      	cbz	r3, 2879a <__sprint_r.part.0+0x62>
   2874a:	468b      	mov	fp, r1
   2874c:	4606      	mov	r6, r0
   2874e:	f102 0908 	add.w	r9, r2, #8
   28752:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   28756:	ea5f 079a 	movs.w	r7, sl, lsr #2
   2875a:	d014      	beq.n	28786 <__sprint_r.part.0+0x4e>
   2875c:	3d04      	subs	r5, #4
   2875e:	2400      	movs	r4, #0
   28760:	e001      	b.n	28766 <__sprint_r.part.0+0x2e>
   28762:	42a7      	cmp	r7, r4
   28764:	d00d      	beq.n	28782 <__sprint_r.part.0+0x4a>
   28766:	465a      	mov	r2, fp
   28768:	f855 1f04 	ldr.w	r1, [r5, #4]!
   2876c:	4630      	mov	r0, r6
   2876e:	3401      	adds	r4, #1
   28770:	f001 fa30 	bl	29bd4 <_fputwc_r>
   28774:	1c43      	adds	r3, r0, #1
   28776:	d1f4      	bne.n	28762 <__sprint_r.part.0+0x2a>
   28778:	2300      	movs	r3, #0
   2877a:	e9c8 3301 	strd	r3, r3, [r8, #4]
   2877e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28782:	f8d8 3008 	ldr.w	r3, [r8, #8]
   28786:	f02a 0a03 	bic.w	sl, sl, #3
   2878a:	f109 0908 	add.w	r9, r9, #8
   2878e:	eba3 030a 	sub.w	r3, r3, sl
   28792:	f8c8 3008 	str.w	r3, [r8, #8]
   28796:	2b00      	cmp	r3, #0
   28798:	d1db      	bne.n	28752 <__sprint_r.part.0+0x1a>
   2879a:	2000      	movs	r0, #0
   2879c:	e7ec      	b.n	28778 <__sprint_r.part.0+0x40>
   2879e:	f001 fba3 	bl	29ee8 <__sfvwrite_r>
   287a2:	2300      	movs	r3, #0
   287a4:	e9c8 3301 	strd	r3, r3, [r8, #4]
   287a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000287ac <_vfiprintf_r>:
   287ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   287b0:	ed2d 8b02 	vpush	{d8}
   287b4:	b0bd      	sub	sp, #244	; 0xf4
   287b6:	461c      	mov	r4, r3
   287b8:	468a      	mov	sl, r1
   287ba:	4691      	mov	r9, r2
   287bc:	ee08 0a10 	vmov	s16, r0
   287c0:	9306      	str	r3, [sp, #24]
   287c2:	b118      	cbz	r0, 287cc <_vfiprintf_r+0x20>
   287c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   287c6:	2b00      	cmp	r3, #0
   287c8:	f000 8279 	beq.w	28cbe <_vfiprintf_r+0x512>
   287cc:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   287d0:	f9ba 100c 	ldrsh.w	r1, [sl, #12]
   287d4:	07db      	lsls	r3, r3, #31
   287d6:	b28a      	uxth	r2, r1
   287d8:	d402      	bmi.n	287e0 <_vfiprintf_r+0x34>
   287da:	058f      	lsls	r7, r1, #22
   287dc:	f140 8508 	bpl.w	291f0 <_vfiprintf_r+0xa44>
   287e0:	0496      	lsls	r6, r2, #18
   287e2:	d40a      	bmi.n	287fa <_vfiprintf_r+0x4e>
   287e4:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   287e8:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   287ec:	b28a      	uxth	r2, r1
   287ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   287f2:	f8aa 100c 	strh.w	r1, [sl, #12]
   287f6:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
   287fa:	0715      	lsls	r5, r2, #28
   287fc:	f140 80f3 	bpl.w	289e6 <_vfiprintf_r+0x23a>
   28800:	f8da 3010 	ldr.w	r3, [sl, #16]
   28804:	2b00      	cmp	r3, #0
   28806:	f000 80ee 	beq.w	289e6 <_vfiprintf_r+0x23a>
   2880a:	f002 031a 	and.w	r3, r2, #26
   2880e:	2b0a      	cmp	r3, #10
   28810:	f000 80f8 	beq.w	28a04 <_vfiprintf_r+0x258>
   28814:	2300      	movs	r3, #0
   28816:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   2881a:	ee18 ba10 	vmov	fp, s16
   2881e:	9309      	str	r3, [sp, #36]	; 0x24
   28820:	9312      	str	r3, [sp, #72]	; 0x48
   28822:	930a      	str	r3, [sp, #40]	; 0x28
   28824:	9305      	str	r3, [sp, #20]
   28826:	9311      	str	r3, [sp, #68]	; 0x44
   28828:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   2882c:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
   28830:	f899 3000 	ldrb.w	r3, [r9]
   28834:	464c      	mov	r4, r9
   28836:	2b25      	cmp	r3, #37	; 0x25
   28838:	d01c      	beq.n	28874 <_vfiprintf_r+0xc8>
   2883a:	b1db      	cbz	r3, 28874 <_vfiprintf_r+0xc8>
   2883c:	4625      	mov	r5, r4
   2883e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   28842:	b10b      	cbz	r3, 28848 <_vfiprintf_r+0x9c>
   28844:	2b25      	cmp	r3, #37	; 0x25
   28846:	d1f9      	bne.n	2883c <_vfiprintf_r+0x90>
   28848:	ebb4 0609 	subs.w	r6, r4, r9
   2884c:	d012      	beq.n	28874 <_vfiprintf_r+0xc8>
   2884e:	f8c8 9000 	str.w	r9, [r8]
   28852:	f8c8 6004 	str.w	r6, [r8, #4]
   28856:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
   2885a:	3301      	adds	r3, #1
   2885c:	4432      	add	r2, r6
   2885e:	2b07      	cmp	r3, #7
   28860:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   28864:	f300 812b 	bgt.w	28abe <_vfiprintf_r+0x312>
   28868:	f108 0808 	add.w	r8, r8, #8
   2886c:	9b05      	ldr	r3, [sp, #20]
   2886e:	4433      	add	r3, r6
   28870:	9305      	str	r3, [sp, #20]
   28872:	786b      	ldrb	r3, [r5, #1]
   28874:	2b00      	cmp	r3, #0
   28876:	f000 812e 	beq.w	28ad6 <_vfiprintf_r+0x32a>
   2887a:	f04f 0300 	mov.w	r3, #0
   2887e:	2600      	movs	r6, #0
   28880:	f04f 32ff 	mov.w	r2, #4294967295
   28884:	f104 0901 	add.w	r9, r4, #1
   28888:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   2888c:	252b      	movs	r5, #43	; 0x2b
   2888e:	7863      	ldrb	r3, [r4, #1]
   28890:	9604      	str	r6, [sp, #16]
   28892:	9202      	str	r2, [sp, #8]
   28894:	f109 0901 	add.w	r9, r9, #1
   28898:	f1a3 0220 	sub.w	r2, r3, #32
   2889c:	2a5a      	cmp	r2, #90	; 0x5a
   2889e:	f200 8131 	bhi.w	28b04 <_vfiprintf_r+0x358>
   288a2:	e8df f012 	tbh	[pc, r2, lsl #1]
   288a6:	006a      	.short	0x006a
   288a8:	012f012f 	.word	0x012f012f
   288ac:	012f0262 	.word	0x012f0262
   288b0:	012f012f 	.word	0x012f012f
   288b4:	012f0242 	.word	0x012f0242
   288b8:	020f012f 	.word	0x020f012f
   288bc:	012f021f 	.word	0x012f021f
   288c0:	0229021a 	.word	0x0229021a
   288c4:	0224012f 	.word	0x0224012f
   288c8:	005b005b 	.word	0x005b005b
   288cc:	005b005b 	.word	0x005b005b
   288d0:	005b005b 	.word	0x005b005b
   288d4:	005b005b 	.word	0x005b005b
   288d8:	012f005b 	.word	0x012f005b
   288dc:	012f012f 	.word	0x012f012f
   288e0:	012f012f 	.word	0x012f012f
   288e4:	012f012f 	.word	0x012f012f
   288e8:	012f012f 	.word	0x012f012f
   288ec:	007701fd 	.word	0x007701fd
   288f0:	012f012f 	.word	0x012f012f
   288f4:	012f012f 	.word	0x012f012f
   288f8:	012f012f 	.word	0x012f012f
   288fc:	012f012f 	.word	0x012f012f
   28900:	012f012f 	.word	0x012f012f
   28904:	012f00c9 	.word	0x012f00c9
   28908:	012f012f 	.word	0x012f012f
   2890c:	012f01e1 	.word	0x012f01e1
   28910:	012f0277 	.word	0x012f0277
   28914:	04e8012f 	.word	0x04e8012f
   28918:	012f012f 	.word	0x012f012f
   2891c:	012f012f 	.word	0x012f012f
   28920:	012f012f 	.word	0x012f012f
   28924:	012f012f 	.word	0x012f012f
   28928:	012f012f 	.word	0x012f012f
   2892c:	007901fd 	.word	0x007901fd
   28930:	012f012f 	.word	0x012f012f
   28934:	026f012f 	.word	0x026f012f
   28938:	00720079 	.word	0x00720079
   2893c:	0267012f 	.word	0x0267012f
   28940:	0298012f 	.word	0x0298012f
   28944:	028700cb 	.word	0x028700cb
   28948:	012f0072 	.word	0x012f0072
   2894c:	006f01e1 	.word	0x006f01e1
   28950:	012f04e6 	.word	0x012f04e6
   28954:	0505012f 	.word	0x0505012f
   28958:	006f012f 	.word	0x006f012f
   2895c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   28960:	2100      	movs	r1, #0
   28962:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   28966:	f819 3b01 	ldrb.w	r3, [r9], #1
   2896a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   2896e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   28972:	2a09      	cmp	r2, #9
   28974:	d9f5      	bls.n	28962 <_vfiprintf_r+0x1b6>
   28976:	9104      	str	r1, [sp, #16]
   28978:	e78e      	b.n	28898 <_vfiprintf_r+0xec>
   2897a:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   2897e:	2b00      	cmp	r3, #0
   28980:	f000 8453 	beq.w	2922a <_vfiprintf_r+0xa7e>
   28984:	f899 3000 	ldrb.w	r3, [r9]
   28988:	e784      	b.n	28894 <_vfiprintf_r+0xe8>
   2898a:	f046 0620 	orr.w	r6, r6, #32
   2898e:	f899 3000 	ldrb.w	r3, [r9]
   28992:	e77f      	b.n	28894 <_vfiprintf_r+0xe8>
   28994:	f046 0610 	orr.w	r6, r6, #16
   28998:	06b7      	lsls	r7, r6, #26
   2899a:	f140 814a 	bpl.w	28c32 <_vfiprintf_r+0x486>
   2899e:	9c06      	ldr	r4, [sp, #24]
   289a0:	3407      	adds	r4, #7
   289a2:	f024 0307 	bic.w	r3, r4, #7
   289a6:	4619      	mov	r1, r3
   289a8:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   289ac:	4614      	mov	r4, r2
   289ae:	461d      	mov	r5, r3
   289b0:	9106      	str	r1, [sp, #24]
   289b2:	2a00      	cmp	r2, #0
   289b4:	f173 0300 	sbcs.w	r3, r3, #0
   289b8:	f2c0 83f9 	blt.w	291ae <_vfiprintf_r+0xa02>
   289bc:	9b02      	ldr	r3, [sp, #8]
   289be:	3301      	adds	r3, #1
   289c0:	f000 83b3 	beq.w	2912a <_vfiprintf_r+0x97e>
   289c4:	ea54 0305 	orrs.w	r3, r4, r5
   289c8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   289cc:	f040 83ad 	bne.w	2912a <_vfiprintf_r+0x97e>
   289d0:	9a02      	ldr	r2, [sp, #8]
   289d2:	1e13      	subs	r3, r2, #0
   289d4:	bf18      	it	ne
   289d6:	2301      	movne	r3, #1
   289d8:	2a00      	cmp	r2, #0
   289da:	f040 83a6 	bne.w	2912a <_vfiprintf_r+0x97e>
   289de:	af3c      	add	r7, sp, #240	; 0xf0
   289e0:	9302      	str	r3, [sp, #8]
   289e2:	9303      	str	r3, [sp, #12]
   289e4:	e05e      	b.n	28aa4 <_vfiprintf_r+0x2f8>
   289e6:	4651      	mov	r1, sl
   289e8:	ee18 0a10 	vmov	r0, s16
   289ec:	f000 fe4a 	bl	29684 <__swsetup_r>
   289f0:	2800      	cmp	r0, #0
   289f2:	f040 856b 	bne.w	294cc <_vfiprintf_r+0xd20>
   289f6:	f8ba 200c 	ldrh.w	r2, [sl, #12]
   289fa:	f002 031a 	and.w	r3, r2, #26
   289fe:	2b0a      	cmp	r3, #10
   28a00:	f47f af08 	bne.w	28814 <_vfiprintf_r+0x68>
   28a04:	f9ba 300e 	ldrsh.w	r3, [sl, #14]
   28a08:	2b00      	cmp	r3, #0
   28a0a:	f6ff af03 	blt.w	28814 <_vfiprintf_r+0x68>
   28a0e:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   28a12:	07d9      	lsls	r1, r3, #31
   28a14:	d402      	bmi.n	28a1c <_vfiprintf_r+0x270>
   28a16:	0593      	lsls	r3, r2, #22
   28a18:	f140 850c 	bpl.w	29434 <_vfiprintf_r+0xc88>
   28a1c:	4623      	mov	r3, r4
   28a1e:	464a      	mov	r2, r9
   28a20:	4651      	mov	r1, sl
   28a22:	ee18 0a10 	vmov	r0, s16
   28a26:	f000 fd6d 	bl	29504 <__sbprintf>
   28a2a:	9005      	str	r0, [sp, #20]
   28a2c:	9805      	ldr	r0, [sp, #20]
   28a2e:	b03d      	add	sp, #244	; 0xf4
   28a30:	ecbd 8b02 	vpop	{d8}
   28a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28a38:	f046 0610 	orr.w	r6, r6, #16
   28a3c:	06b5      	lsls	r5, r6, #26
   28a3e:	9c06      	ldr	r4, [sp, #24]
   28a40:	f140 8106 	bpl.w	28c50 <_vfiprintf_r+0x4a4>
   28a44:	3407      	adds	r4, #7
   28a46:	f024 0307 	bic.w	r3, r4, #7
   28a4a:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   28a4e:	9306      	str	r3, [sp, #24]
   28a50:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   28a54:	9301      	str	r3, [sp, #4]
   28a56:	2300      	movs	r3, #0
   28a58:	f04f 0200 	mov.w	r2, #0
   28a5c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   28a60:	9a02      	ldr	r2, [sp, #8]
   28a62:	4611      	mov	r1, r2
   28a64:	3101      	adds	r1, #1
   28a66:	f000 81d5 	beq.w	28e14 <_vfiprintf_r+0x668>
   28a6a:	9901      	ldr	r1, [sp, #4]
   28a6c:	f021 0680 	bic.w	r6, r1, #128	; 0x80
   28a70:	ea54 0105 	orrs.w	r1, r4, r5
   28a74:	f040 81cd 	bne.w	28e12 <_vfiprintf_r+0x666>
   28a78:	4611      	mov	r1, r2
   28a7a:	3a00      	subs	r2, #0
   28a7c:	bf18      	it	ne
   28a7e:	2201      	movne	r2, #1
   28a80:	2900      	cmp	r1, #0
   28a82:	f040 81c6 	bne.w	28e12 <_vfiprintf_r+0x666>
   28a86:	2b00      	cmp	r3, #0
   28a88:	f040 834b 	bne.w	29122 <_vfiprintf_r+0x976>
   28a8c:	9a01      	ldr	r2, [sp, #4]
   28a8e:	f012 0201 	ands.w	r2, r2, #1
   28a92:	9203      	str	r2, [sp, #12]
   28a94:	f000 8379 	beq.w	2918a <_vfiprintf_r+0x9de>
   28a98:	2230      	movs	r2, #48	; 0x30
   28a9a:	f10d 07ef 	add.w	r7, sp, #239	; 0xef
   28a9e:	9302      	str	r3, [sp, #8]
   28aa0:	f88d 20ef 	strb.w	r2, [sp, #239]	; 0xef
   28aa4:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   28aa8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   28aac:	428a      	cmp	r2, r1
   28aae:	bfb8      	it	lt
   28ab0:	460a      	movlt	r2, r1
   28ab2:	9201      	str	r2, [sp, #4]
   28ab4:	2b00      	cmp	r3, #0
   28ab6:	d033      	beq.n	28b20 <_vfiprintf_r+0x374>
   28ab8:	3201      	adds	r2, #1
   28aba:	9201      	str	r2, [sp, #4]
   28abc:	e030      	b.n	28b20 <_vfiprintf_r+0x374>
   28abe:	2a00      	cmp	r2, #0
   28ac0:	f000 835e 	beq.w	29180 <_vfiprintf_r+0x9d4>
   28ac4:	aa10      	add	r2, sp, #64	; 0x40
   28ac6:	4651      	mov	r1, sl
   28ac8:	4658      	mov	r0, fp
   28aca:	f7ff fe35 	bl	28738 <__sprint_r.part.0>
   28ace:	b940      	cbnz	r0, 28ae2 <_vfiprintf_r+0x336>
   28ad0:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28ad4:	e6ca      	b.n	2886c <_vfiprintf_r+0xc0>
   28ad6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   28ad8:	2b00      	cmp	r3, #0
   28ada:	f040 84d8 	bne.w	2948e <_vfiprintf_r+0xce2>
   28ade:	2300      	movs	r3, #0
   28ae0:	9311      	str	r3, [sp, #68]	; 0x44
   28ae2:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   28ae6:	f013 0f01 	tst.w	r3, #1
   28aea:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   28aee:	f000 8096 	beq.w	28c1e <_vfiprintf_r+0x472>
   28af2:	065b      	lsls	r3, r3, #25
   28af4:	f100 84d6 	bmi.w	294a4 <_vfiprintf_r+0xcf8>
   28af8:	9805      	ldr	r0, [sp, #20]
   28afa:	b03d      	add	sp, #244	; 0xf4
   28afc:	ecbd 8b02 	vpop	{d8}
   28b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28b04:	2b00      	cmp	r3, #0
   28b06:	d0e6      	beq.n	28ad6 <_vfiprintf_r+0x32a>
   28b08:	2201      	movs	r2, #1
   28b0a:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   28b0e:	af23      	add	r7, sp, #140	; 0x8c
   28b10:	f04f 0300 	mov.w	r3, #0
   28b14:	9201      	str	r2, [sp, #4]
   28b16:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   28b1a:	9203      	str	r2, [sp, #12]
   28b1c:	2300      	movs	r3, #0
   28b1e:	9302      	str	r3, [sp, #8]
   28b20:	f016 0302 	ands.w	r3, r6, #2
   28b24:	9307      	str	r3, [sp, #28]
   28b26:	d002      	beq.n	28b2e <_vfiprintf_r+0x382>
   28b28:	9b01      	ldr	r3, [sp, #4]
   28b2a:	3302      	adds	r3, #2
   28b2c:	9301      	str	r3, [sp, #4]
   28b2e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   28b32:	9308      	str	r3, [sp, #32]
   28b34:	d105      	bne.n	28b42 <_vfiprintf_r+0x396>
   28b36:	9b04      	ldr	r3, [sp, #16]
   28b38:	9a01      	ldr	r2, [sp, #4]
   28b3a:	1a9c      	subs	r4, r3, r2
   28b3c:	2c00      	cmp	r4, #0
   28b3e:	f300 8259 	bgt.w	28ff4 <_vfiprintf_r+0x848>
   28b42:	e9dd 2c11 	ldrd	r2, ip, [sp, #68]	; 0x44
   28b46:	1c51      	adds	r1, r2, #1
   28b48:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   28b4c:	b178      	cbz	r0, 28b6e <_vfiprintf_r+0x3c2>
   28b4e:	f10c 0c01 	add.w	ip, ip, #1
   28b52:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   28b56:	2201      	movs	r2, #1
   28b58:	2907      	cmp	r1, #7
   28b5a:	e9cd 1c11 	strd	r1, ip, [sp, #68]	; 0x44
   28b5e:	e9c8 0200 	strd	r0, r2, [r8]
   28b62:	f300 8227 	bgt.w	28fb4 <_vfiprintf_r+0x808>
   28b66:	460a      	mov	r2, r1
   28b68:	f108 0808 	add.w	r8, r8, #8
   28b6c:	3101      	adds	r1, #1
   28b6e:	9b07      	ldr	r3, [sp, #28]
   28b70:	b1db      	cbz	r3, 28baa <_vfiprintf_r+0x3fe>
   28b72:	f10c 0c02 	add.w	ip, ip, #2
   28b76:	aa0f      	add	r2, sp, #60	; 0x3c
   28b78:	2302      	movs	r3, #2
   28b7a:	2907      	cmp	r1, #7
   28b7c:	e9cd 1c11 	strd	r1, ip, [sp, #68]	; 0x44
   28b80:	e9c8 2300 	strd	r2, r3, [r8]
   28b84:	f340 8231 	ble.w	28fea <_vfiprintf_r+0x83e>
   28b88:	f1bc 0f00 	cmp.w	ip, #0
   28b8c:	f000 82e0 	beq.w	29150 <_vfiprintf_r+0x9a4>
   28b90:	aa10      	add	r2, sp, #64	; 0x40
   28b92:	4651      	mov	r1, sl
   28b94:	4658      	mov	r0, fp
   28b96:	f7ff fdcf 	bl	28738 <__sprint_r.part.0>
   28b9a:	2800      	cmp	r0, #0
   28b9c:	d1a1      	bne.n	28ae2 <_vfiprintf_r+0x336>
   28b9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   28ba0:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28ba4:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   28ba8:	1c51      	adds	r1, r2, #1
   28baa:	9b08      	ldr	r3, [sp, #32]
   28bac:	2b80      	cmp	r3, #128	; 0x80
   28bae:	f000 8169 	beq.w	28e84 <_vfiprintf_r+0x6d8>
   28bb2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   28bb6:	1a1c      	subs	r4, r3, r0
   28bb8:	2c00      	cmp	r4, #0
   28bba:	f300 81b8 	bgt.w	28f2e <_vfiprintf_r+0x782>
   28bbe:	9a03      	ldr	r2, [sp, #12]
   28bc0:	2907      	cmp	r1, #7
   28bc2:	4613      	mov	r3, r2
   28bc4:	4463      	add	r3, ip
   28bc6:	e9c8 7200 	strd	r7, r2, [r8]
   28bca:	e9cd 1311 	strd	r1, r3, [sp, #68]	; 0x44
   28bce:	f340 811d 	ble.w	28e0c <_vfiprintf_r+0x660>
   28bd2:	2b00      	cmp	r3, #0
   28bd4:	f000 824a 	beq.w	2906c <_vfiprintf_r+0x8c0>
   28bd8:	aa10      	add	r2, sp, #64	; 0x40
   28bda:	4651      	mov	r1, sl
   28bdc:	4658      	mov	r0, fp
   28bde:	f7ff fdab 	bl	28738 <__sprint_r.part.0>
   28be2:	2800      	cmp	r0, #0
   28be4:	f47f af7d 	bne.w	28ae2 <_vfiprintf_r+0x336>
   28be8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   28bea:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28bee:	0771      	lsls	r1, r6, #29
   28bf0:	d505      	bpl.n	28bfe <_vfiprintf_r+0x452>
   28bf2:	9a04      	ldr	r2, [sp, #16]
   28bf4:	9901      	ldr	r1, [sp, #4]
   28bf6:	1a54      	subs	r4, r2, r1
   28bf8:	2c00      	cmp	r4, #0
   28bfa:	f300 8241 	bgt.w	29080 <_vfiprintf_r+0x8d4>
   28bfe:	9801      	ldr	r0, [sp, #4]
   28c00:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   28c04:	4281      	cmp	r1, r0
   28c06:	bfac      	ite	ge
   28c08:	1852      	addge	r2, r2, r1
   28c0a:	1812      	addlt	r2, r2, r0
   28c0c:	9205      	str	r2, [sp, #20]
   28c0e:	2b00      	cmp	r3, #0
   28c10:	f040 81c7 	bne.w	28fa2 <_vfiprintf_r+0x7f6>
   28c14:	2300      	movs	r3, #0
   28c16:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28c1a:	9311      	str	r3, [sp, #68]	; 0x44
   28c1c:	e608      	b.n	28830 <_vfiprintf_r+0x84>
   28c1e:	059a      	lsls	r2, r3, #22
   28c20:	f53f af67 	bmi.w	28af2 <_vfiprintf_r+0x346>
   28c24:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   28c28:	f001 ff00 	bl	2aa2c <__retarget_lock_release_recursive>
   28c2c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   28c30:	e75f      	b.n	28af2 <_vfiprintf_r+0x346>
   28c32:	9b06      	ldr	r3, [sp, #24]
   28c34:	06f5      	lsls	r5, r6, #27
   28c36:	f853 4b04 	ldr.w	r4, [r3], #4
   28c3a:	f100 82ea 	bmi.w	29212 <_vfiprintf_r+0xa66>
   28c3e:	0670      	lsls	r0, r6, #25
   28c40:	f140 82e4 	bpl.w	2920c <_vfiprintf_r+0xa60>
   28c44:	b224      	sxth	r4, r4
   28c46:	9306      	str	r3, [sp, #24]
   28c48:	17e5      	asrs	r5, r4, #31
   28c4a:	4622      	mov	r2, r4
   28c4c:	462b      	mov	r3, r5
   28c4e:	e6b0      	b.n	289b2 <_vfiprintf_r+0x206>
   28c50:	f854 3b04 	ldr.w	r3, [r4], #4
   28c54:	06f0      	lsls	r0, r6, #27
   28c56:	9406      	str	r4, [sp, #24]
   28c58:	f100 82e4 	bmi.w	29224 <_vfiprintf_r+0xa78>
   28c5c:	0671      	lsls	r1, r6, #25
   28c5e:	f140 82de 	bpl.w	2921e <_vfiprintf_r+0xa72>
   28c62:	b29c      	uxth	r4, r3
   28c64:	2500      	movs	r5, #0
   28c66:	e6f3      	b.n	28a50 <_vfiprintf_r+0x2a4>
   28c68:	9c06      	ldr	r4, [sp, #24]
   28c6a:	f04f 0300 	mov.w	r3, #0
   28c6e:	f854 7b04 	ldr.w	r7, [r4], #4
   28c72:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   28c76:	2f00      	cmp	r7, #0
   28c78:	f000 839d 	beq.w	293b6 <_vfiprintf_r+0xc0a>
   28c7c:	9a02      	ldr	r2, [sp, #8]
   28c7e:	4613      	mov	r3, r2
   28c80:	3301      	adds	r3, #1
   28c82:	f000 8318 	beq.w	292b6 <_vfiprintf_r+0xb0a>
   28c86:	2100      	movs	r1, #0
   28c88:	4638      	mov	r0, r7
   28c8a:	f7fd f98b 	bl	25fa4 <memchr>
   28c8e:	2800      	cmp	r0, #0
   28c90:	f000 83ea 	beq.w	29468 <_vfiprintf_r+0xcbc>
   28c94:	1bc3      	subs	r3, r0, r7
   28c96:	9406      	str	r4, [sp, #24]
   28c98:	9303      	str	r3, [sp, #12]
   28c9a:	2300      	movs	r3, #0
   28c9c:	9302      	str	r3, [sp, #8]
   28c9e:	e701      	b.n	28aa4 <_vfiprintf_r+0x2f8>
   28ca0:	9c06      	ldr	r4, [sp, #24]
   28ca2:	f04f 0300 	mov.w	r3, #0
   28ca6:	2201      	movs	r2, #1
   28ca8:	af23      	add	r7, sp, #140	; 0x8c
   28caa:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   28cae:	f854 3b04 	ldr.w	r3, [r4], #4
   28cb2:	9201      	str	r2, [sp, #4]
   28cb4:	9203      	str	r2, [sp, #12]
   28cb6:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   28cba:	9406      	str	r4, [sp, #24]
   28cbc:	e72e      	b.n	28b1c <_vfiprintf_r+0x370>
   28cbe:	f000 fefd 	bl	29abc <__sinit>
   28cc2:	e583      	b.n	287cc <_vfiprintf_r+0x20>
   28cc4:	9b06      	ldr	r3, [sp, #24]
   28cc6:	f853 2b04 	ldr.w	r2, [r3], #4
   28cca:	2a00      	cmp	r2, #0
   28ccc:	9204      	str	r2, [sp, #16]
   28cce:	f280 828a 	bge.w	291e6 <_vfiprintf_r+0xa3a>
   28cd2:	9a04      	ldr	r2, [sp, #16]
   28cd4:	9306      	str	r3, [sp, #24]
   28cd6:	4252      	negs	r2, r2
   28cd8:	9204      	str	r2, [sp, #16]
   28cda:	f046 0604 	orr.w	r6, r6, #4
   28cde:	f899 3000 	ldrb.w	r3, [r9]
   28ce2:	e5d7      	b.n	28894 <_vfiprintf_r+0xe8>
   28ce4:	f899 3000 	ldrb.w	r3, [r9]
   28ce8:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
   28cec:	e5d2      	b.n	28894 <_vfiprintf_r+0xe8>
   28cee:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   28cf2:	f899 3000 	ldrb.w	r3, [r9]
   28cf6:	e5cd      	b.n	28894 <_vfiprintf_r+0xe8>
   28cf8:	4649      	mov	r1, r9
   28cfa:	f811 3b01 	ldrb.w	r3, [r1], #1
   28cfe:	2b2a      	cmp	r3, #42	; 0x2a
   28d00:	f000 83d8 	beq.w	294b4 <_vfiprintf_r+0xd08>
   28d04:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   28d08:	4689      	mov	r9, r1
   28d0a:	2a09      	cmp	r2, #9
   28d0c:	f200 83b7 	bhi.w	2947e <_vfiprintf_r+0xcd2>
   28d10:	2100      	movs	r1, #0
   28d12:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   28d16:	f819 3b01 	ldrb.w	r3, [r9], #1
   28d1a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   28d1e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   28d22:	2a09      	cmp	r2, #9
   28d24:	d9f5      	bls.n	28d12 <_vfiprintf_r+0x566>
   28d26:	9102      	str	r1, [sp, #8]
   28d28:	e5b6      	b.n	28898 <_vfiprintf_r+0xec>
   28d2a:	4658      	mov	r0, fp
   28d2c:	f001 fe74 	bl	2aa18 <_localeconv_r>
   28d30:	6843      	ldr	r3, [r0, #4]
   28d32:	4618      	mov	r0, r3
   28d34:	930b      	str	r3, [sp, #44]	; 0x2c
   28d36:	f7fd fdb1 	bl	2689c <strlen>
   28d3a:	4603      	mov	r3, r0
   28d3c:	4658      	mov	r0, fp
   28d3e:	461c      	mov	r4, r3
   28d40:	930c      	str	r3, [sp, #48]	; 0x30
   28d42:	f001 fe69 	bl	2aa18 <_localeconv_r>
   28d46:	6882      	ldr	r2, [r0, #8]
   28d48:	920a      	str	r2, [sp, #40]	; 0x28
   28d4a:	2c00      	cmp	r4, #0
   28d4c:	f43f ae1a 	beq.w	28984 <_vfiprintf_r+0x1d8>
   28d50:	2a00      	cmp	r2, #0
   28d52:	f43f ae17 	beq.w	28984 <_vfiprintf_r+0x1d8>
   28d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28d58:	781b      	ldrb	r3, [r3, #0]
   28d5a:	2b00      	cmp	r3, #0
   28d5c:	f43f ae12 	beq.w	28984 <_vfiprintf_r+0x1d8>
   28d60:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   28d64:	f899 3000 	ldrb.w	r3, [r9]
   28d68:	e594      	b.n	28894 <_vfiprintf_r+0xe8>
   28d6a:	f046 0601 	orr.w	r6, r6, #1
   28d6e:	f899 3000 	ldrb.w	r3, [r9]
   28d72:	e58f      	b.n	28894 <_vfiprintf_r+0xe8>
   28d74:	f899 3000 	ldrb.w	r3, [r9]
   28d78:	2b6c      	cmp	r3, #108	; 0x6c
   28d7a:	f000 830c 	beq.w	29396 <_vfiprintf_r+0xbea>
   28d7e:	f046 0610 	orr.w	r6, r6, #16
   28d82:	e587      	b.n	28894 <_vfiprintf_r+0xe8>
   28d84:	f899 3000 	ldrb.w	r3, [r9]
   28d88:	2b68      	cmp	r3, #104	; 0x68
   28d8a:	f000 82fc 	beq.w	29386 <_vfiprintf_r+0xbda>
   28d8e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   28d92:	e57f      	b.n	28894 <_vfiprintf_r+0xe8>
   28d94:	f046 0310 	orr.w	r3, r6, #16
   28d98:	9301      	str	r3, [sp, #4]
   28d9a:	9b01      	ldr	r3, [sp, #4]
   28d9c:	069b      	lsls	r3, r3, #26
   28d9e:	f140 81f7 	bpl.w	29190 <_vfiprintf_r+0x9e4>
   28da2:	9c06      	ldr	r4, [sp, #24]
   28da4:	2301      	movs	r3, #1
   28da6:	3407      	adds	r4, #7
   28da8:	f024 0207 	bic.w	r2, r4, #7
   28dac:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   28db0:	9206      	str	r2, [sp, #24]
   28db2:	e651      	b.n	28a58 <_vfiprintf_r+0x2ac>
   28db4:	9c06      	ldr	r4, [sp, #24]
   28db6:	f046 0302 	orr.w	r3, r6, #2
   28dba:	f647 0130 	movw	r1, #30768	; 0x7830
   28dbe:	2500      	movs	r5, #0
   28dc0:	f854 2b04 	ldr.w	r2, [r4], #4
   28dc4:	9301      	str	r3, [sp, #4]
   28dc6:	4bb2      	ldr	r3, [pc, #712]	; (29090 <_vfiprintf_r+0x8e4>)
   28dc8:	9406      	str	r4, [sp, #24]
   28dca:	4614      	mov	r4, r2
   28dcc:	9309      	str	r3, [sp, #36]	; 0x24
   28dce:	2302      	movs	r3, #2
   28dd0:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
   28dd4:	e640      	b.n	28a58 <_vfiprintf_r+0x2ac>
   28dd6:	06b2      	lsls	r2, r6, #26
   28dd8:	f100 822e 	bmi.w	29238 <_vfiprintf_r+0xa8c>
   28ddc:	06f3      	lsls	r3, r6, #27
   28dde:	f100 82e2 	bmi.w	293a6 <_vfiprintf_r+0xbfa>
   28de2:	0677      	lsls	r7, r6, #25
   28de4:	f100 8310 	bmi.w	29408 <_vfiprintf_r+0xc5c>
   28de8:	05b6      	lsls	r6, r6, #22
   28dea:	f140 82dc 	bpl.w	293a6 <_vfiprintf_r+0xbfa>
   28dee:	9c06      	ldr	r4, [sp, #24]
   28df0:	9a05      	ldr	r2, [sp, #20]
   28df2:	f854 3b04 	ldr.w	r3, [r4], #4
   28df6:	701a      	strb	r2, [r3, #0]
   28df8:	9406      	str	r4, [sp, #24]
   28dfa:	e519      	b.n	28830 <_vfiprintf_r+0x84>
   28dfc:	9b03      	ldr	r3, [sp, #12]
   28dfe:	2201      	movs	r2, #1
   28e00:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28e04:	9713      	str	r7, [sp, #76]	; 0x4c
   28e06:	9314      	str	r3, [sp, #80]	; 0x50
   28e08:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
   28e0c:	f108 0808 	add.w	r8, r8, #8
   28e10:	e6ed      	b.n	28bee <_vfiprintf_r+0x442>
   28e12:	9601      	str	r6, [sp, #4]
   28e14:	2b01      	cmp	r3, #1
   28e16:	f000 8189 	beq.w	2912c <_vfiprintf_r+0x980>
   28e1a:	2b02      	cmp	r3, #2
   28e1c:	af3c      	add	r7, sp, #240	; 0xf0
   28e1e:	d113      	bne.n	28e48 <_vfiprintf_r+0x69c>
   28e20:	9809      	ldr	r0, [sp, #36]	; 0x24
   28e22:	0923      	lsrs	r3, r4, #4
   28e24:	f004 010f 	and.w	r1, r4, #15
   28e28:	092a      	lsrs	r2, r5, #4
   28e2a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   28e2e:	4615      	mov	r5, r2
   28e30:	461c      	mov	r4, r3
   28e32:	5c43      	ldrb	r3, [r0, r1]
   28e34:	f807 3d01 	strb.w	r3, [r7, #-1]!
   28e38:	ea54 0305 	orrs.w	r3, r4, r5
   28e3c:	d1f1      	bne.n	28e22 <_vfiprintf_r+0x676>
   28e3e:	ab3c      	add	r3, sp, #240	; 0xf0
   28e40:	9e01      	ldr	r6, [sp, #4]
   28e42:	1bdb      	subs	r3, r3, r7
   28e44:	9303      	str	r3, [sp, #12]
   28e46:	e62d      	b.n	28aa4 <_vfiprintf_r+0x2f8>
   28e48:	08e2      	lsrs	r2, r4, #3
   28e4a:	f004 0307 	and.w	r3, r4, #7
   28e4e:	08e9      	lsrs	r1, r5, #3
   28e50:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   28e54:	3330      	adds	r3, #48	; 0x30
   28e56:	460d      	mov	r5, r1
   28e58:	4614      	mov	r4, r2
   28e5a:	463a      	mov	r2, r7
   28e5c:	f807 3d01 	strb.w	r3, [r7, #-1]!
   28e60:	ea54 0105 	orrs.w	r1, r4, r5
   28e64:	d1f0      	bne.n	28e48 <_vfiprintf_r+0x69c>
   28e66:	2b30      	cmp	r3, #48	; 0x30
   28e68:	d0e9      	beq.n	28e3e <_vfiprintf_r+0x692>
   28e6a:	9b01      	ldr	r3, [sp, #4]
   28e6c:	07dc      	lsls	r4, r3, #31
   28e6e:	d5e6      	bpl.n	28e3e <_vfiprintf_r+0x692>
   28e70:	2330      	movs	r3, #48	; 0x30
   28e72:	3a02      	subs	r2, #2
   28e74:	9e01      	ldr	r6, [sp, #4]
   28e76:	f807 3c01 	strb.w	r3, [r7, #-1]
   28e7a:	ab3c      	add	r3, sp, #240	; 0xf0
   28e7c:	4617      	mov	r7, r2
   28e7e:	1a9b      	subs	r3, r3, r2
   28e80:	9303      	str	r3, [sp, #12]
   28e82:	e60f      	b.n	28aa4 <_vfiprintf_r+0x2f8>
   28e84:	9b04      	ldr	r3, [sp, #16]
   28e86:	9801      	ldr	r0, [sp, #4]
   28e88:	1a1c      	subs	r4, r3, r0
   28e8a:	2c00      	cmp	r4, #0
   28e8c:	f77f ae91 	ble.w	28bb2 <_vfiprintf_r+0x406>
   28e90:	2c10      	cmp	r4, #16
   28e92:	f340 830c 	ble.w	294ae <_vfiprintf_r+0xd02>
   28e96:	9607      	str	r6, [sp, #28]
   28e98:	4666      	mov	r6, ip
   28e9a:	4d7e      	ldr	r5, [pc, #504]	; (29094 <_vfiprintf_r+0x8e8>)
   28e9c:	e00a      	b.n	28eb4 <_vfiprintf_r+0x708>
   28e9e:	f7ff fc4b 	bl	28738 <__sprint_r.part.0>
   28ea2:	2800      	cmp	r0, #0
   28ea4:	f47f ae1d 	bne.w	28ae2 <_vfiprintf_r+0x336>
   28ea8:	e9dd 2611 	ldrd	r2, r6, [sp, #68]	; 0x44
   28eac:	1c50      	adds	r0, r2, #1
   28eae:	3c10      	subs	r4, #16
   28eb0:	2c10      	cmp	r4, #16
   28eb2:	dd1a      	ble.n	28eea <_vfiprintf_r+0x73e>
   28eb4:	1c53      	adds	r3, r2, #1
   28eb6:	3610      	adds	r6, #16
   28eb8:	2110      	movs	r1, #16
   28eba:	1c90      	adds	r0, r2, #2
   28ebc:	2b07      	cmp	r3, #7
   28ebe:	f8c8 5000 	str.w	r5, [r8]
   28ec2:	f8c8 1004 	str.w	r1, [r8, #4]
   28ec6:	461a      	mov	r2, r3
   28ec8:	f108 0808 	add.w	r8, r8, #8
   28ecc:	9612      	str	r6, [sp, #72]	; 0x48
   28ece:	9311      	str	r3, [sp, #68]	; 0x44
   28ed0:	dded      	ble.n	28eae <_vfiprintf_r+0x702>
   28ed2:	aa10      	add	r2, sp, #64	; 0x40
   28ed4:	4651      	mov	r1, sl
   28ed6:	4658      	mov	r0, fp
   28ed8:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28edc:	2e00      	cmp	r6, #0
   28ede:	d1de      	bne.n	28e9e <_vfiprintf_r+0x6f2>
   28ee0:	3c10      	subs	r4, #16
   28ee2:	2001      	movs	r0, #1
   28ee4:	4632      	mov	r2, r6
   28ee6:	2c10      	cmp	r4, #16
   28ee8:	dce4      	bgt.n	28eb4 <_vfiprintf_r+0x708>
   28eea:	46b4      	mov	ip, r6
   28eec:	9e07      	ldr	r6, [sp, #28]
   28eee:	44a4      	add	ip, r4
   28ef0:	2807      	cmp	r0, #7
   28ef2:	e9c8 5400 	strd	r5, r4, [r8]
   28ef6:	e9cd 0c11 	strd	r0, ip, [sp, #68]	; 0x44
   28efa:	f340 8182 	ble.w	29202 <_vfiprintf_r+0xa56>
   28efe:	f1bc 0f00 	cmp.w	ip, #0
   28f02:	f000 8271 	beq.w	293e8 <_vfiprintf_r+0xc3c>
   28f06:	aa10      	add	r2, sp, #64	; 0x40
   28f08:	4651      	mov	r1, sl
   28f0a:	4658      	mov	r0, fp
   28f0c:	f7ff fc14 	bl	28738 <__sprint_r.part.0>
   28f10:	2800      	cmp	r0, #0
   28f12:	f47f ade6 	bne.w	28ae2 <_vfiprintf_r+0x336>
   28f16:	9a11      	ldr	r2, [sp, #68]	; 0x44
   28f18:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28f1c:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   28f20:	1c51      	adds	r1, r2, #1
   28f22:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   28f26:	1a1c      	subs	r4, r3, r0
   28f28:	2c00      	cmp	r4, #0
   28f2a:	f77f ae48 	ble.w	28bbe <_vfiprintf_r+0x412>
   28f2e:	2c10      	cmp	r4, #16
   28f30:	4d58      	ldr	r5, [pc, #352]	; (29094 <_vfiprintf_r+0x8e8>)
   28f32:	dd2a      	ble.n	28f8a <_vfiprintf_r+0x7de>
   28f34:	9602      	str	r6, [sp, #8]
   28f36:	4666      	mov	r6, ip
   28f38:	e00a      	b.n	28f50 <_vfiprintf_r+0x7a4>
   28f3a:	f7ff fbfd 	bl	28738 <__sprint_r.part.0>
   28f3e:	2800      	cmp	r0, #0
   28f40:	f47f adcf 	bne.w	28ae2 <_vfiprintf_r+0x336>
   28f44:	e9dd 2611 	ldrd	r2, r6, [sp, #68]	; 0x44
   28f48:	1c51      	adds	r1, r2, #1
   28f4a:	3c10      	subs	r4, #16
   28f4c:	2c10      	cmp	r4, #16
   28f4e:	dd1a      	ble.n	28f86 <_vfiprintf_r+0x7da>
   28f50:	1c53      	adds	r3, r2, #1
   28f52:	3610      	adds	r6, #16
   28f54:	2010      	movs	r0, #16
   28f56:	1c91      	adds	r1, r2, #2
   28f58:	2b07      	cmp	r3, #7
   28f5a:	f8c8 5000 	str.w	r5, [r8]
   28f5e:	f8c8 0004 	str.w	r0, [r8, #4]
   28f62:	461a      	mov	r2, r3
   28f64:	f108 0808 	add.w	r8, r8, #8
   28f68:	9612      	str	r6, [sp, #72]	; 0x48
   28f6a:	9311      	str	r3, [sp, #68]	; 0x44
   28f6c:	dded      	ble.n	28f4a <_vfiprintf_r+0x79e>
   28f6e:	aa10      	add	r2, sp, #64	; 0x40
   28f70:	4651      	mov	r1, sl
   28f72:	4658      	mov	r0, fp
   28f74:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28f78:	2e00      	cmp	r6, #0
   28f7a:	d1de      	bne.n	28f3a <_vfiprintf_r+0x78e>
   28f7c:	3c10      	subs	r4, #16
   28f7e:	2101      	movs	r1, #1
   28f80:	4632      	mov	r2, r6
   28f82:	2c10      	cmp	r4, #16
   28f84:	dce4      	bgt.n	28f50 <_vfiprintf_r+0x7a4>
   28f86:	46b4      	mov	ip, r6
   28f88:	9e02      	ldr	r6, [sp, #8]
   28f8a:	44a4      	add	ip, r4
   28f8c:	2907      	cmp	r1, #7
   28f8e:	e9c8 5400 	strd	r5, r4, [r8]
   28f92:	e9cd 1c11 	strd	r1, ip, [sp, #68]	; 0x44
   28f96:	f300 80e0 	bgt.w	2915a <_vfiprintf_r+0x9ae>
   28f9a:	f108 0808 	add.w	r8, r8, #8
   28f9e:	3101      	adds	r1, #1
   28fa0:	e60d      	b.n	28bbe <_vfiprintf_r+0x412>
   28fa2:	aa10      	add	r2, sp, #64	; 0x40
   28fa4:	4651      	mov	r1, sl
   28fa6:	4658      	mov	r0, fp
   28fa8:	f7ff fbc6 	bl	28738 <__sprint_r.part.0>
   28fac:	2800      	cmp	r0, #0
   28fae:	f43f ae31 	beq.w	28c14 <_vfiprintf_r+0x468>
   28fb2:	e596      	b.n	28ae2 <_vfiprintf_r+0x336>
   28fb4:	f1bc 0f00 	cmp.w	ip, #0
   28fb8:	f000 80c6 	beq.w	29148 <_vfiprintf_r+0x99c>
   28fbc:	aa10      	add	r2, sp, #64	; 0x40
   28fbe:	4651      	mov	r1, sl
   28fc0:	4658      	mov	r0, fp
   28fc2:	f7ff fbb9 	bl	28738 <__sprint_r.part.0>
   28fc6:	2800      	cmp	r0, #0
   28fc8:	f47f ad8b 	bne.w	28ae2 <_vfiprintf_r+0x336>
   28fcc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   28fce:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28fd2:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   28fd6:	1c51      	adds	r1, r2, #1
   28fd8:	e5c9      	b.n	28b6e <_vfiprintf_r+0x3c2>
   28fda:	2302      	movs	r3, #2
   28fdc:	aa0f      	add	r2, sp, #60	; 0x3c
   28fde:	2101      	movs	r1, #1
   28fe0:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28fe4:	469c      	mov	ip, r3
   28fe6:	9213      	str	r2, [sp, #76]	; 0x4c
   28fe8:	9314      	str	r3, [sp, #80]	; 0x50
   28fea:	460a      	mov	r2, r1
   28fec:	f108 0808 	add.w	r8, r8, #8
   28ff0:	1c51      	adds	r1, r2, #1
   28ff2:	e5da      	b.n	28baa <_vfiprintf_r+0x3fe>
   28ff4:	2c10      	cmp	r4, #16
   28ff6:	f340 823d 	ble.w	29474 <_vfiprintf_r+0xcc8>
   28ffa:	4d27      	ldr	r5, [pc, #156]	; (29098 <_vfiprintf_r+0x8ec>)
   28ffc:	960d      	str	r6, [sp, #52]	; 0x34
   28ffe:	e9dd 0311 	ldrd	r0, r3, [sp, #68]	; 0x44
   29002:	e00a      	b.n	2901a <_vfiprintf_r+0x86e>
   29004:	f7ff fb98 	bl	28738 <__sprint_r.part.0>
   29008:	2800      	cmp	r0, #0
   2900a:	f47f ad6a 	bne.w	28ae2 <_vfiprintf_r+0x336>
   2900e:	e9dd 0311 	ldrd	r0, r3, [sp, #68]	; 0x44
   29012:	1c42      	adds	r2, r0, #1
   29014:	3c10      	subs	r4, #16
   29016:	2c10      	cmp	r4, #16
   29018:	dd1a      	ble.n	29050 <_vfiprintf_r+0x8a4>
   2901a:	1c41      	adds	r1, r0, #1
   2901c:	3310      	adds	r3, #16
   2901e:	2610      	movs	r6, #16
   29020:	1c82      	adds	r2, r0, #2
   29022:	2907      	cmp	r1, #7
   29024:	f8c8 5000 	str.w	r5, [r8]
   29028:	f8c8 6004 	str.w	r6, [r8, #4]
   2902c:	4608      	mov	r0, r1
   2902e:	f108 0808 	add.w	r8, r8, #8
   29032:	9312      	str	r3, [sp, #72]	; 0x48
   29034:	9111      	str	r1, [sp, #68]	; 0x44
   29036:	dded      	ble.n	29014 <_vfiprintf_r+0x868>
   29038:	aa10      	add	r2, sp, #64	; 0x40
   2903a:	4651      	mov	r1, sl
   2903c:	4658      	mov	r0, fp
   2903e:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29042:	2b00      	cmp	r3, #0
   29044:	d1de      	bne.n	29004 <_vfiprintf_r+0x858>
   29046:	3c10      	subs	r4, #16
   29048:	4618      	mov	r0, r3
   2904a:	2201      	movs	r2, #1
   2904c:	2c10      	cmp	r4, #16
   2904e:	dce4      	bgt.n	2901a <_vfiprintf_r+0x86e>
   29050:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   29052:	eb04 0c03 	add.w	ip, r4, r3
   29056:	2a07      	cmp	r2, #7
   29058:	e9c8 5400 	strd	r5, r4, [r8]
   2905c:	e9cd 2c11 	strd	r2, ip, [sp, #68]	; 0x44
   29060:	f300 80af 	bgt.w	291c2 <_vfiprintf_r+0xa16>
   29064:	f108 0808 	add.w	r8, r8, #8
   29068:	1c51      	adds	r1, r2, #1
   2906a:	e56d      	b.n	28b48 <_vfiprintf_r+0x39c>
   2906c:	0770      	lsls	r0, r6, #29
   2906e:	9311      	str	r3, [sp, #68]	; 0x44
   29070:	d54e      	bpl.n	29110 <_vfiprintf_r+0x964>
   29072:	9a04      	ldr	r2, [sp, #16]
   29074:	9901      	ldr	r1, [sp, #4]
   29076:	1a54      	subs	r4, r2, r1
   29078:	2c00      	cmp	r4, #0
   2907a:	dd49      	ble.n	29110 <_vfiprintf_r+0x964>
   2907c:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29080:	2c10      	cmp	r4, #16
   29082:	f340 8200 	ble.w	29486 <_vfiprintf_r+0xcda>
   29086:	9911      	ldr	r1, [sp, #68]	; 0x44
   29088:	2610      	movs	r6, #16
   2908a:	4d03      	ldr	r5, [pc, #12]	; (29098 <_vfiprintf_r+0x8ec>)
   2908c:	e013      	b.n	290b6 <_vfiprintf_r+0x90a>
   2908e:	bf00      	nop
   29090:	0002f724 	.word	0x0002f724
   29094:	0002f7b4 	.word	0x0002f7b4
   29098:	0002f7a4 	.word	0x0002f7a4
   2909c:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   290a0:	f7ff fb4a 	bl	28738 <__sprint_r.part.0>
   290a4:	2800      	cmp	r0, #0
   290a6:	f47f ad1c 	bne.w	28ae2 <_vfiprintf_r+0x336>
   290aa:	e9dd 1311 	ldrd	r1, r3, [sp, #68]	; 0x44
   290ae:	1c48      	adds	r0, r1, #1
   290b0:	3c10      	subs	r4, #16
   290b2:	2c10      	cmp	r4, #16
   290b4:	dd19      	ble.n	290ea <_vfiprintf_r+0x93e>
   290b6:	1c4a      	adds	r2, r1, #1
   290b8:	3310      	adds	r3, #16
   290ba:	1c88      	adds	r0, r1, #2
   290bc:	f8c8 5000 	str.w	r5, [r8]
   290c0:	2a07      	cmp	r2, #7
   290c2:	f8c8 6004 	str.w	r6, [r8, #4]
   290c6:	4611      	mov	r1, r2
   290c8:	f108 0808 	add.w	r8, r8, #8
   290cc:	9312      	str	r3, [sp, #72]	; 0x48
   290ce:	9211      	str	r2, [sp, #68]	; 0x44
   290d0:	ddee      	ble.n	290b0 <_vfiprintf_r+0x904>
   290d2:	aa10      	add	r2, sp, #64	; 0x40
   290d4:	4651      	mov	r1, sl
   290d6:	4658      	mov	r0, fp
   290d8:	2b00      	cmp	r3, #0
   290da:	d1df      	bne.n	2909c <_vfiprintf_r+0x8f0>
   290dc:	3c10      	subs	r4, #16
   290de:	2001      	movs	r0, #1
   290e0:	4619      	mov	r1, r3
   290e2:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   290e6:	2c10      	cmp	r4, #16
   290e8:	dce5      	bgt.n	290b6 <_vfiprintf_r+0x90a>
   290ea:	4423      	add	r3, r4
   290ec:	2807      	cmp	r0, #7
   290ee:	e9c8 5400 	strd	r5, r4, [r8]
   290f2:	e9cd 0311 	strd	r0, r3, [sp, #68]	; 0x44
   290f6:	f77f ad82 	ble.w	28bfe <_vfiprintf_r+0x452>
   290fa:	b14b      	cbz	r3, 29110 <_vfiprintf_r+0x964>
   290fc:	aa10      	add	r2, sp, #64	; 0x40
   290fe:	4651      	mov	r1, sl
   29100:	4658      	mov	r0, fp
   29102:	f7ff fb19 	bl	28738 <__sprint_r.part.0>
   29106:	2800      	cmp	r0, #0
   29108:	f47f aceb 	bne.w	28ae2 <_vfiprintf_r+0x336>
   2910c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2910e:	e576      	b.n	28bfe <_vfiprintf_r+0x452>
   29110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   29114:	9901      	ldr	r1, [sp, #4]
   29116:	428a      	cmp	r2, r1
   29118:	bfac      	ite	ge
   2911a:	189b      	addge	r3, r3, r2
   2911c:	185b      	addlt	r3, r3, r1
   2911e:	9305      	str	r3, [sp, #20]
   29120:	e578      	b.n	28c14 <_vfiprintf_r+0x468>
   29122:	af3c      	add	r7, sp, #240	; 0xf0
   29124:	9202      	str	r2, [sp, #8]
   29126:	9203      	str	r2, [sp, #12]
   29128:	e4bc      	b.n	28aa4 <_vfiprintf_r+0x2f8>
   2912a:	9601      	str	r6, [sp, #4]
   2912c:	2d00      	cmp	r5, #0
   2912e:	bf08      	it	eq
   29130:	2c0a      	cmpeq	r4, #10
   29132:	f080 80e8 	bcs.w	29306 <_vfiprintf_r+0xb5a>
   29136:	3430      	adds	r4, #48	; 0x30
   29138:	2301      	movs	r3, #1
   2913a:	9e01      	ldr	r6, [sp, #4]
   2913c:	f10d 07ef 	add.w	r7, sp, #239	; 0xef
   29140:	9303      	str	r3, [sp, #12]
   29142:	f88d 40ef 	strb.w	r4, [sp, #239]	; 0xef
   29146:	e4ad      	b.n	28aa4 <_vfiprintf_r+0x2f8>
   29148:	9b07      	ldr	r3, [sp, #28]
   2914a:	2b00      	cmp	r3, #0
   2914c:	f040 8089 	bne.w	29262 <_vfiprintf_r+0xab6>
   29150:	2101      	movs	r1, #1
   29152:	4662      	mov	r2, ip
   29154:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29158:	e527      	b.n	28baa <_vfiprintf_r+0x3fe>
   2915a:	f1bc 0f00 	cmp.w	ip, #0
   2915e:	f43f ae4d 	beq.w	28dfc <_vfiprintf_r+0x650>
   29162:	aa10      	add	r2, sp, #64	; 0x40
   29164:	4651      	mov	r1, sl
   29166:	4658      	mov	r0, fp
   29168:	f7ff fae6 	bl	28738 <__sprint_r.part.0>
   2916c:	2800      	cmp	r0, #0
   2916e:	f47f acb8 	bne.w	28ae2 <_vfiprintf_r+0x336>
   29172:	9911      	ldr	r1, [sp, #68]	; 0x44
   29174:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29178:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   2917c:	3101      	adds	r1, #1
   2917e:	e51e      	b.n	28bbe <_vfiprintf_r+0x412>
   29180:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29184:	9211      	str	r2, [sp, #68]	; 0x44
   29186:	f7ff bb71 	b.w	2886c <_vfiprintf_r+0xc0>
   2918a:	af3c      	add	r7, sp, #240	; 0xf0
   2918c:	9302      	str	r3, [sp, #8]
   2918e:	e489      	b.n	28aa4 <_vfiprintf_r+0x2f8>
   29190:	9b01      	ldr	r3, [sp, #4]
   29192:	06df      	lsls	r7, r3, #27
   29194:	d45c      	bmi.n	29250 <_vfiprintf_r+0xaa4>
   29196:	9b01      	ldr	r3, [sp, #4]
   29198:	065e      	lsls	r6, r3, #25
   2919a:	f140 8116 	bpl.w	293ca <_vfiprintf_r+0xc1e>
   2919e:	9c06      	ldr	r4, [sp, #24]
   291a0:	2301      	movs	r3, #1
   291a2:	2500      	movs	r5, #0
   291a4:	f854 2b04 	ldr.w	r2, [r4], #4
   291a8:	9406      	str	r4, [sp, #24]
   291aa:	b294      	uxth	r4, r2
   291ac:	e454      	b.n	28a58 <_vfiprintf_r+0x2ac>
   291ae:	222d      	movs	r2, #45	; 0x2d
   291b0:	4264      	negs	r4, r4
   291b2:	f04f 0301 	mov.w	r3, #1
   291b6:	9601      	str	r6, [sp, #4]
   291b8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   291bc:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   291c0:	e44e      	b.n	28a60 <_vfiprintf_r+0x2b4>
   291c2:	f1bc 0f00 	cmp.w	ip, #0
   291c6:	d07f      	beq.n	292c8 <_vfiprintf_r+0xb1c>
   291c8:	aa10      	add	r2, sp, #64	; 0x40
   291ca:	4651      	mov	r1, sl
   291cc:	4658      	mov	r0, fp
   291ce:	f7ff fab3 	bl	28738 <__sprint_r.part.0>
   291d2:	2800      	cmp	r0, #0
   291d4:	f47f ac85 	bne.w	28ae2 <_vfiprintf_r+0x336>
   291d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   291da:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   291de:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   291e2:	1c51      	adds	r1, r2, #1
   291e4:	e4b0      	b.n	28b48 <_vfiprintf_r+0x39c>
   291e6:	9306      	str	r3, [sp, #24]
   291e8:	f899 3000 	ldrb.w	r3, [r9]
   291ec:	f7ff bb52 	b.w	28894 <_vfiprintf_r+0xe8>
   291f0:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   291f4:	f001 fc18 	bl	2aa28 <__retarget_lock_acquire_recursive>
   291f8:	f9ba 100c 	ldrsh.w	r1, [sl, #12]
   291fc:	b28a      	uxth	r2, r1
   291fe:	f7ff baef 	b.w	287e0 <_vfiprintf_r+0x34>
   29202:	f108 0808 	add.w	r8, r8, #8
   29206:	1c41      	adds	r1, r0, #1
   29208:	4602      	mov	r2, r0
   2920a:	e4d2      	b.n	28bb2 <_vfiprintf_r+0x406>
   2920c:	05b1      	lsls	r1, r6, #22
   2920e:	f100 8103 	bmi.w	29418 <_vfiprintf_r+0xc6c>
   29212:	17e5      	asrs	r5, r4, #31
   29214:	9306      	str	r3, [sp, #24]
   29216:	4622      	mov	r2, r4
   29218:	462b      	mov	r3, r5
   2921a:	f7ff bbca 	b.w	289b2 <_vfiprintf_r+0x206>
   2921e:	05b2      	lsls	r2, r6, #22
   29220:	f100 8101 	bmi.w	29426 <_vfiprintf_r+0xc7a>
   29224:	461c      	mov	r4, r3
   29226:	2500      	movs	r5, #0
   29228:	e412      	b.n	28a50 <_vfiprintf_r+0x2a4>
   2922a:	2220      	movs	r2, #32
   2922c:	f899 3000 	ldrb.w	r3, [r9]
   29230:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   29234:	f7ff bb2e 	b.w	28894 <_vfiprintf_r+0xe8>
   29238:	9b05      	ldr	r3, [sp, #20]
   2923a:	9c06      	ldr	r4, [sp, #24]
   2923c:	17dd      	asrs	r5, r3, #31
   2923e:	461a      	mov	r2, r3
   29240:	f854 1b04 	ldr.w	r1, [r4], #4
   29244:	462b      	mov	r3, r5
   29246:	9406      	str	r4, [sp, #24]
   29248:	e9c1 2300 	strd	r2, r3, [r1]
   2924c:	f7ff baf0 	b.w	28830 <_vfiprintf_r+0x84>
   29250:	9c06      	ldr	r4, [sp, #24]
   29252:	2301      	movs	r3, #1
   29254:	2500      	movs	r5, #0
   29256:	f854 2b04 	ldr.w	r2, [r4], #4
   2925a:	9406      	str	r4, [sp, #24]
   2925c:	4614      	mov	r4, r2
   2925e:	f7ff bbfb 	b.w	28a58 <_vfiprintf_r+0x2ac>
   29262:	2302      	movs	r3, #2
   29264:	a90f      	add	r1, sp, #60	; 0x3c
   29266:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   2926a:	469c      	mov	ip, r3
   2926c:	9113      	str	r1, [sp, #76]	; 0x4c
   2926e:	9314      	str	r3, [sp, #80]	; 0x50
   29270:	e6bc      	b.n	28fec <_vfiprintf_r+0x840>
   29272:	9601      	str	r6, [sp, #4]
   29274:	e591      	b.n	28d9a <_vfiprintf_r+0x5ee>
   29276:	4a9e      	ldr	r2, [pc, #632]	; (294f0 <_vfiprintf_r+0xd44>)
   29278:	9209      	str	r2, [sp, #36]	; 0x24
   2927a:	06b5      	lsls	r5, r6, #26
   2927c:	9c06      	ldr	r4, [sp, #24]
   2927e:	d532      	bpl.n	292e6 <_vfiprintf_r+0xb3a>
   29280:	3407      	adds	r4, #7
   29282:	f024 0207 	bic.w	r2, r4, #7
   29286:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   2928a:	9206      	str	r2, [sp, #24]
   2928c:	ea54 0205 	orrs.w	r2, r4, r5
   29290:	d008      	beq.n	292a4 <_vfiprintf_r+0xaf8>
   29292:	07f7      	lsls	r7, r6, #31
   29294:	d506      	bpl.n	292a4 <_vfiprintf_r+0xaf8>
   29296:	2230      	movs	r2, #48	; 0x30
   29298:	f046 0602 	orr.w	r6, r6, #2
   2929c:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   292a0:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   292a4:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   292a8:	9301      	str	r3, [sp, #4]
   292aa:	2302      	movs	r3, #2
   292ac:	f7ff bbd4 	b.w	28a58 <_vfiprintf_r+0x2ac>
   292b0:	4a90      	ldr	r2, [pc, #576]	; (294f4 <_vfiprintf_r+0xd48>)
   292b2:	9209      	str	r2, [sp, #36]	; 0x24
   292b4:	e7e1      	b.n	2927a <_vfiprintf_r+0xace>
   292b6:	4638      	mov	r0, r7
   292b8:	9406      	str	r4, [sp, #24]
   292ba:	f7fd faef 	bl	2689c <strlen>
   292be:	2300      	movs	r3, #0
   292c0:	e9cd 3002 	strd	r3, r0, [sp, #8]
   292c4:	f7ff bbee 	b.w	28aa4 <_vfiprintf_r+0x2f8>
   292c8:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   292cc:	2a00      	cmp	r2, #0
   292ce:	f000 8091 	beq.w	293f4 <_vfiprintf_r+0xc48>
   292d2:	2201      	movs	r2, #1
   292d4:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   292d8:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   292dc:	4611      	mov	r1, r2
   292de:	4694      	mov	ip, r2
   292e0:	e9cd 0213 	strd	r0, r2, [sp, #76]	; 0x4c
   292e4:	e43f      	b.n	28b66 <_vfiprintf_r+0x3ba>
   292e6:	f854 2b04 	ldr.w	r2, [r4], #4
   292ea:	9406      	str	r4, [sp, #24]
   292ec:	06f4      	lsls	r4, r6, #27
   292ee:	d407      	bmi.n	29300 <_vfiprintf_r+0xb54>
   292f0:	0670      	lsls	r0, r6, #25
   292f2:	d502      	bpl.n	292fa <_vfiprintf_r+0xb4e>
   292f4:	b294      	uxth	r4, r2
   292f6:	2500      	movs	r5, #0
   292f8:	e7c8      	b.n	2928c <_vfiprintf_r+0xae0>
   292fa:	05b1      	lsls	r1, r6, #22
   292fc:	f100 8097 	bmi.w	2942e <_vfiprintf_r+0xc82>
   29300:	4614      	mov	r4, r2
   29302:	2500      	movs	r5, #0
   29304:	e7c2      	b.n	2928c <_vfiprintf_r+0xae0>
   29306:	9b01      	ldr	r3, [sp, #4]
   29308:	2600      	movs	r6, #0
   2930a:	f8cd 800c 	str.w	r8, [sp, #12]
   2930e:	af3c      	add	r7, sp, #240	; 0xf0
   29310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   29314:	f8cd 901c 	str.w	r9, [sp, #28]
   29318:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2931c:	4698      	mov	r8, r3
   2931e:	e007      	b.n	29330 <_vfiprintf_r+0xb84>
   29320:	f7e3 fa9a 	bl	c858 <__aeabi_uldivmod>
   29324:	2d00      	cmp	r5, #0
   29326:	bf08      	it	eq
   29328:	2c0a      	cmpeq	r4, #10
   2932a:	d320      	bcc.n	2936e <_vfiprintf_r+0xbc2>
   2932c:	4604      	mov	r4, r0
   2932e:	460d      	mov	r5, r1
   29330:	220a      	movs	r2, #10
   29332:	2300      	movs	r3, #0
   29334:	4620      	mov	r0, r4
   29336:	4629      	mov	r1, r5
   29338:	f7e3 fa8e 	bl	c858 <__aeabi_uldivmod>
   2933c:	4694      	mov	ip, r2
   2933e:	4620      	mov	r0, r4
   29340:	4629      	mov	r1, r5
   29342:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   29346:	220a      	movs	r2, #10
   29348:	2300      	movs	r3, #0
   2934a:	3601      	adds	r6, #1
   2934c:	f807 cc01 	strb.w	ip, [r7, #-1]
   29350:	3f01      	subs	r7, #1
   29352:	f1b8 0f00 	cmp.w	r8, #0
   29356:	d0e3      	beq.n	29320 <_vfiprintf_r+0xb74>
   29358:	f899 c000 	ldrb.w	ip, [r9]
   2935c:	45b4      	cmp	ip, r6
   2935e:	d1df      	bne.n	29320 <_vfiprintf_r+0xb74>
   29360:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   29364:	d0dc      	beq.n	29320 <_vfiprintf_r+0xb74>
   29366:	429d      	cmp	r5, r3
   29368:	bf08      	it	eq
   2936a:	4294      	cmpeq	r4, r2
   2936c:	d268      	bcs.n	29440 <_vfiprintf_r+0xc94>
   2936e:	ab3c      	add	r3, sp, #240	; 0xf0
   29370:	f8dd 800c 	ldr.w	r8, [sp, #12]
   29374:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   29378:	1bdb      	subs	r3, r3, r7
   2937a:	f8dd 901c 	ldr.w	r9, [sp, #28]
   2937e:	9e01      	ldr	r6, [sp, #4]
   29380:	9303      	str	r3, [sp, #12]
   29382:	f7ff bb8f 	b.w	28aa4 <_vfiprintf_r+0x2f8>
   29386:	f899 3001 	ldrb.w	r3, [r9, #1]
   2938a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
   2938e:	f109 0901 	add.w	r9, r9, #1
   29392:	f7ff ba7f 	b.w	28894 <_vfiprintf_r+0xe8>
   29396:	f899 3001 	ldrb.w	r3, [r9, #1]
   2939a:	f046 0620 	orr.w	r6, r6, #32
   2939e:	f109 0901 	add.w	r9, r9, #1
   293a2:	f7ff ba77 	b.w	28894 <_vfiprintf_r+0xe8>
   293a6:	9c06      	ldr	r4, [sp, #24]
   293a8:	9a05      	ldr	r2, [sp, #20]
   293aa:	f854 3b04 	ldr.w	r3, [r4], #4
   293ae:	601a      	str	r2, [r3, #0]
   293b0:	9406      	str	r4, [sp, #24]
   293b2:	f7ff ba3d 	b.w	28830 <_vfiprintf_r+0x84>
   293b6:	9b02      	ldr	r3, [sp, #8]
   293b8:	4f4f      	ldr	r7, [pc, #316]	; (294f8 <_vfiprintf_r+0xd4c>)
   293ba:	2b06      	cmp	r3, #6
   293bc:	9406      	str	r4, [sp, #24]
   293be:	bf28      	it	cs
   293c0:	2306      	movcs	r3, #6
   293c2:	9303      	str	r3, [sp, #12]
   293c4:	9301      	str	r3, [sp, #4]
   293c6:	f7ff bba9 	b.w	28b1c <_vfiprintf_r+0x370>
   293ca:	9c06      	ldr	r4, [sp, #24]
   293cc:	2500      	movs	r5, #0
   293ce:	9b01      	ldr	r3, [sp, #4]
   293d0:	f854 2b04 	ldr.w	r2, [r4], #4
   293d4:	f413 7f00 	tst.w	r3, #512	; 0x200
   293d8:	f04f 0301 	mov.w	r3, #1
   293dc:	9406      	str	r4, [sp, #24]
   293de:	bf14      	ite	ne
   293e0:	b2d4      	uxtbne	r4, r2
   293e2:	4614      	moveq	r4, r2
   293e4:	f7ff bb38 	b.w	28a58 <_vfiprintf_r+0x2ac>
   293e8:	2101      	movs	r1, #1
   293ea:	4662      	mov	r2, ip
   293ec:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   293f0:	f7ff bbdf 	b.w	28bb2 <_vfiprintf_r+0x406>
   293f4:	9b07      	ldr	r3, [sp, #28]
   293f6:	2b00      	cmp	r3, #0
   293f8:	f47f adef 	bne.w	28fda <_vfiprintf_r+0x82e>
   293fc:	4662      	mov	r2, ip
   293fe:	2101      	movs	r1, #1
   29400:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29404:	f7ff bbd5 	b.w	28bb2 <_vfiprintf_r+0x406>
   29408:	9c06      	ldr	r4, [sp, #24]
   2940a:	9a05      	ldr	r2, [sp, #20]
   2940c:	f854 3b04 	ldr.w	r3, [r4], #4
   29410:	801a      	strh	r2, [r3, #0]
   29412:	9406      	str	r4, [sp, #24]
   29414:	f7ff ba0c 	b.w	28830 <_vfiprintf_r+0x84>
   29418:	b264      	sxtb	r4, r4
   2941a:	9306      	str	r3, [sp, #24]
   2941c:	17e5      	asrs	r5, r4, #31
   2941e:	4622      	mov	r2, r4
   29420:	462b      	mov	r3, r5
   29422:	f7ff bac6 	b.w	289b2 <_vfiprintf_r+0x206>
   29426:	b2dc      	uxtb	r4, r3
   29428:	2500      	movs	r5, #0
   2942a:	f7ff bb11 	b.w	28a50 <_vfiprintf_r+0x2a4>
   2942e:	b2d4      	uxtb	r4, r2
   29430:	2500      	movs	r5, #0
   29432:	e72b      	b.n	2928c <_vfiprintf_r+0xae0>
   29434:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   29438:	f001 faf8 	bl	2aa2c <__retarget_lock_release_recursive>
   2943c:	f7ff baee 	b.w	28a1c <_vfiprintf_r+0x270>
   29440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   29442:	990b      	ldr	r1, [sp, #44]	; 0x2c
   29444:	1aff      	subs	r7, r7, r3
   29446:	461a      	mov	r2, r3
   29448:	4638      	mov	r0, r7
   2944a:	f7fd fa8f 	bl	2696c <strncpy>
   2944e:	f899 3001 	ldrb.w	r3, [r9, #1]
   29452:	b10b      	cbz	r3, 29458 <_vfiprintf_r+0xcac>
   29454:	f109 0901 	add.w	r9, r9, #1
   29458:	4620      	mov	r0, r4
   2945a:	4629      	mov	r1, r5
   2945c:	220a      	movs	r2, #10
   2945e:	2300      	movs	r3, #0
   29460:	2600      	movs	r6, #0
   29462:	f7e3 f9f9 	bl	c858 <__aeabi_uldivmod>
   29466:	e761      	b.n	2932c <_vfiprintf_r+0xb80>
   29468:	9b02      	ldr	r3, [sp, #8]
   2946a:	9406      	str	r4, [sp, #24]
   2946c:	9303      	str	r3, [sp, #12]
   2946e:	9002      	str	r0, [sp, #8]
   29470:	f7ff bb18 	b.w	28aa4 <_vfiprintf_r+0x2f8>
   29474:	e9dd 2311 	ldrd	r2, r3, [sp, #68]	; 0x44
   29478:	4d20      	ldr	r5, [pc, #128]	; (294fc <_vfiprintf_r+0xd50>)
   2947a:	3201      	adds	r2, #1
   2947c:	e5e9      	b.n	29052 <_vfiprintf_r+0x8a6>
   2947e:	2200      	movs	r2, #0
   29480:	9202      	str	r2, [sp, #8]
   29482:	f7ff ba09 	b.w	28898 <_vfiprintf_r+0xec>
   29486:	9811      	ldr	r0, [sp, #68]	; 0x44
   29488:	4d1c      	ldr	r5, [pc, #112]	; (294fc <_vfiprintf_r+0xd50>)
   2948a:	3001      	adds	r0, #1
   2948c:	e62d      	b.n	290ea <_vfiprintf_r+0x93e>
   2948e:	ee18 0a10 	vmov	r0, s16
   29492:	aa10      	add	r2, sp, #64	; 0x40
   29494:	4651      	mov	r1, sl
   29496:	f7ff f94f 	bl	28738 <__sprint_r.part.0>
   2949a:	2800      	cmp	r0, #0
   2949c:	f43f ab1f 	beq.w	28ade <_vfiprintf_r+0x332>
   294a0:	f7ff bb1f 	b.w	28ae2 <_vfiprintf_r+0x336>
   294a4:	f04f 33ff 	mov.w	r3, #4294967295
   294a8:	9305      	str	r3, [sp, #20]
   294aa:	f7ff bb25 	b.w	28af8 <_vfiprintf_r+0x34c>
   294ae:	4608      	mov	r0, r1
   294b0:	4d13      	ldr	r5, [pc, #76]	; (29500 <_vfiprintf_r+0xd54>)
   294b2:	e51c      	b.n	28eee <_vfiprintf_r+0x742>
   294b4:	9a06      	ldr	r2, [sp, #24]
   294b6:	f899 3001 	ldrb.w	r3, [r9, #1]
   294ba:	4689      	mov	r9, r1
   294bc:	f852 1b04 	ldr.w	r1, [r2], #4
   294c0:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   294c4:	9206      	str	r2, [sp, #24]
   294c6:	9102      	str	r1, [sp, #8]
   294c8:	f7ff b9e4 	b.w	28894 <_vfiprintf_r+0xe8>
   294cc:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   294d0:	07dc      	lsls	r4, r3, #31
   294d2:	d4e7      	bmi.n	294a4 <_vfiprintf_r+0xcf8>
   294d4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   294d8:	0598      	lsls	r0, r3, #22
   294da:	d4e3      	bmi.n	294a4 <_vfiprintf_r+0xcf8>
   294dc:	f04f 33ff 	mov.w	r3, #4294967295
   294e0:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   294e4:	9305      	str	r3, [sp, #20]
   294e6:	f001 faa1 	bl	2aa2c <__retarget_lock_release_recursive>
   294ea:	f7ff bb05 	b.w	28af8 <_vfiprintf_r+0x34c>
   294ee:	bf00      	nop
   294f0:	0002f738 	.word	0x0002f738
   294f4:	0002f724 	.word	0x0002f724
   294f8:	0002f74c 	.word	0x0002f74c
   294fc:	0002f7a4 	.word	0x0002f7a4
   29500:	0002f7b4 	.word	0x0002f7b4

00029504 <__sbprintf>:
   29504:	b5f0      	push	{r4, r5, r6, r7, lr}
   29506:	460c      	mov	r4, r1
   29508:	8989      	ldrh	r1, [r1, #12]
   2950a:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
   2950e:	2700      	movs	r7, #0
   29510:	f021 0102 	bic.w	r1, r1, #2
   29514:	4606      	mov	r6, r0
   29516:	ad1c      	add	r5, sp, #112	; 0x70
   29518:	9708      	str	r7, [sp, #32]
   2951a:	f8ad 1014 	strh.w	r1, [sp, #20]
   2951e:	f44f 6780 	mov.w	r7, #1024	; 0x400
   29522:	89e1      	ldrh	r1, [r4, #14]
   29524:	a818      	add	r0, sp, #96	; 0x60
   29526:	9502      	str	r5, [sp, #8]
   29528:	f8ad 1016 	strh.w	r1, [sp, #22]
   2952c:	69e1      	ldr	r1, [r4, #28]
   2952e:	9506      	str	r5, [sp, #24]
   29530:	9109      	str	r1, [sp, #36]	; 0x24
   29532:	6a61      	ldr	r1, [r4, #36]	; 0x24
   29534:	9704      	str	r7, [sp, #16]
   29536:	910b      	str	r1, [sp, #44]	; 0x2c
   29538:	9707      	str	r7, [sp, #28]
   2953a:	e9cd 3200 	strd	r3, r2, [sp]
   2953e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   29540:	931b      	str	r3, [sp, #108]	; 0x6c
   29542:	f001 fa6d 	bl	2aa20 <__retarget_lock_init_recursive>
   29546:	a902      	add	r1, sp, #8
   29548:	4630      	mov	r0, r6
   2954a:	e9dd 3200 	ldrd	r3, r2, [sp]
   2954e:	f7ff f92d 	bl	287ac <_vfiprintf_r>
   29552:	1e05      	subs	r5, r0, #0
   29554:	db07      	blt.n	29566 <__sbprintf+0x62>
   29556:	4630      	mov	r0, r6
   29558:	a902      	add	r1, sp, #8
   2955a:	f000 fa51 	bl	29a00 <_fflush_r>
   2955e:	2800      	cmp	r0, #0
   29560:	bf18      	it	ne
   29562:	f04f 35ff 	movne.w	r5, #4294967295
   29566:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2956a:	065b      	lsls	r3, r3, #25
   2956c:	d503      	bpl.n	29576 <__sbprintf+0x72>
   2956e:	89a3      	ldrh	r3, [r4, #12]
   29570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29574:	81a3      	strh	r3, [r4, #12]
   29576:	9818      	ldr	r0, [sp, #96]	; 0x60
   29578:	f001 fa54 	bl	2aa24 <__retarget_lock_close_recursive>
   2957c:	4628      	mov	r0, r5
   2957e:	f20d 4d74 	addw	sp, sp, #1140	; 0x474
   29582:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029584 <_vsnprintf_r>:
   29584:	b570      	push	{r4, r5, r6, lr}
   29586:	1e14      	subs	r4, r2, #0
   29588:	b09a      	sub	sp, #104	; 0x68
   2958a:	4605      	mov	r5, r0
   2958c:	db2c      	blt.n	295e8 <_vsnprintf_r+0x64>
   2958e:	f44f 7202 	mov.w	r2, #520	; 0x208
   29592:	9100      	str	r1, [sp, #0]
   29594:	9104      	str	r1, [sp, #16]
   29596:	f8ad 200c 	strh.w	r2, [sp, #12]
   2959a:	d014      	beq.n	295c6 <_vsnprintf_r+0x42>
   2959c:	3c01      	subs	r4, #1
   2959e:	f64f 76ff 	movw	r6, #65535	; 0xffff
   295a2:	461a      	mov	r2, r3
   295a4:	4669      	mov	r1, sp
   295a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   295a8:	9402      	str	r4, [sp, #8]
   295aa:	9405      	str	r4, [sp, #20]
   295ac:	f8ad 600e 	strh.w	r6, [sp, #14]
   295b0:	f7e5 f982 	bl	e8b8 <_svfprintf_r>
   295b4:	1c42      	adds	r2, r0, #1
   295b6:	da01      	bge.n	295bc <_vsnprintf_r+0x38>
   295b8:	238b      	movs	r3, #139	; 0x8b
   295ba:	602b      	str	r3, [r5, #0]
   295bc:	9b00      	ldr	r3, [sp, #0]
   295be:	2200      	movs	r2, #0
   295c0:	701a      	strb	r2, [r3, #0]
   295c2:	b01a      	add	sp, #104	; 0x68
   295c4:	bd70      	pop	{r4, r5, r6, pc}
   295c6:	f64f 76ff 	movw	r6, #65535	; 0xffff
   295ca:	461a      	mov	r2, r3
   295cc:	4669      	mov	r1, sp
   295ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   295d0:	9402      	str	r4, [sp, #8]
   295d2:	9405      	str	r4, [sp, #20]
   295d4:	f8ad 600e 	strh.w	r6, [sp, #14]
   295d8:	f7e5 f96e 	bl	e8b8 <_svfprintf_r>
   295dc:	1c43      	adds	r3, r0, #1
   295de:	da01      	bge.n	295e4 <_vsnprintf_r+0x60>
   295e0:	238b      	movs	r3, #139	; 0x8b
   295e2:	602b      	str	r3, [r5, #0]
   295e4:	b01a      	add	sp, #104	; 0x68
   295e6:	bd70      	pop	{r4, r5, r6, pc}
   295e8:	238b      	movs	r3, #139	; 0x8b
   295ea:	f04f 30ff 	mov.w	r0, #4294967295
   295ee:	602b      	str	r3, [r5, #0]
   295f0:	e7f8      	b.n	295e4 <_vsnprintf_r+0x60>
   295f2:	bf00      	nop

000295f4 <vsnprintf>:
   295f4:	b570      	push	{r4, r5, r6, lr}
   295f6:	460e      	mov	r6, r1
   295f8:	b082      	sub	sp, #8
   295fa:	4615      	mov	r5, r2
   295fc:	4c04      	ldr	r4, [pc, #16]	; (29610 <vsnprintf+0x1c>)
   295fe:	4601      	mov	r1, r0
   29600:	9300      	str	r3, [sp, #0]
   29602:	4632      	mov	r2, r6
   29604:	462b      	mov	r3, r5
   29606:	6820      	ldr	r0, [r4, #0]
   29608:	f7ff ffbc 	bl	29584 <_vsnprintf_r>
   2960c:	b002      	add	sp, #8
   2960e:	bd70      	pop	{r4, r5, r6, pc}
   29610:	200204d8 	.word	0x200204d8

00029614 <_vsprintf_r>:
   29614:	b570      	push	{r4, r5, r6, lr}
   29616:	b09a      	sub	sp, #104	; 0x68
   29618:	460c      	mov	r4, r1
   2961a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   2961e:	4e07      	ldr	r6, [pc, #28]	; (2963c <_vsprintf_r+0x28>)
   29620:	4669      	mov	r1, sp
   29622:	9400      	str	r4, [sp, #0]
   29624:	9505      	str	r5, [sp, #20]
   29626:	9502      	str	r5, [sp, #8]
   29628:	e9cd 6403 	strd	r6, r4, [sp, #12]
   2962c:	f7e5 f944 	bl	e8b8 <_svfprintf_r>
   29630:	9b00      	ldr	r3, [sp, #0]
   29632:	2200      	movs	r2, #0
   29634:	701a      	strb	r2, [r3, #0]
   29636:	b01a      	add	sp, #104	; 0x68
   29638:	bd70      	pop	{r4, r5, r6, pc}
   2963a:	bf00      	nop
   2963c:	ffff0208 	.word	0xffff0208

00029640 <vsprintf>:
   29640:	b430      	push	{r4, r5}
   29642:	460d      	mov	r5, r1
   29644:	4c03      	ldr	r4, [pc, #12]	; (29654 <vsprintf+0x14>)
   29646:	4613      	mov	r3, r2
   29648:	4601      	mov	r1, r0
   2964a:	462a      	mov	r2, r5
   2964c:	6820      	ldr	r0, [r4, #0]
   2964e:	bc30      	pop	{r4, r5}
   29650:	f7ff bfe0 	b.w	29614 <_vsprintf_r>
   29654:	200204d8 	.word	0x200204d8

00029658 <_write_r>:
   29658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2965a:	460f      	mov	r7, r1
   2965c:	4d08      	ldr	r5, [pc, #32]	; (29680 <_write_r+0x28>)
   2965e:	2600      	movs	r6, #0
   29660:	4611      	mov	r1, r2
   29662:	4604      	mov	r4, r0
   29664:	461a      	mov	r2, r3
   29666:	4638      	mov	r0, r7
   29668:	602e      	str	r6, [r5, #0]
   2966a:	f003 fb5e 	bl	2cd2a <_write>
   2966e:	1c43      	adds	r3, r0, #1
   29670:	d000      	beq.n	29674 <_write_r+0x1c>
   29672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29674:	682b      	ldr	r3, [r5, #0]
   29676:	2b00      	cmp	r3, #0
   29678:	d0fb      	beq.n	29672 <_write_r+0x1a>
   2967a:	6023      	str	r3, [r4, #0]
   2967c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2967e:	bf00      	nop
   29680:	2002640c 	.word	0x2002640c

00029684 <__swsetup_r>:
   29684:	b538      	push	{r3, r4, r5, lr}
   29686:	4b32      	ldr	r3, [pc, #200]	; (29750 <__swsetup_r+0xcc>)
   29688:	4605      	mov	r5, r0
   2968a:	460c      	mov	r4, r1
   2968c:	681b      	ldr	r3, [r3, #0]
   2968e:	b113      	cbz	r3, 29696 <__swsetup_r+0x12>
   29690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   29692:	2a00      	cmp	r2, #0
   29694:	d036      	beq.n	29704 <__swsetup_r+0x80>
   29696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2969a:	0718      	lsls	r0, r3, #28
   2969c:	b29a      	uxth	r2, r3
   2969e:	d50c      	bpl.n	296ba <__swsetup_r+0x36>
   296a0:	6921      	ldr	r1, [r4, #16]
   296a2:	b1a9      	cbz	r1, 296d0 <__swsetup_r+0x4c>
   296a4:	f012 0001 	ands.w	r0, r2, #1
   296a8:	d022      	beq.n	296f0 <__swsetup_r+0x6c>
   296aa:	6960      	ldr	r0, [r4, #20]
   296ac:	2500      	movs	r5, #0
   296ae:	4240      	negs	r0, r0
   296b0:	60a5      	str	r5, [r4, #8]
   296b2:	61a0      	str	r0, [r4, #24]
   296b4:	b311      	cbz	r1, 296fc <__swsetup_r+0x78>
   296b6:	2000      	movs	r0, #0
   296b8:	bd38      	pop	{r3, r4, r5, pc}
   296ba:	06d1      	lsls	r1, r2, #27
   296bc:	d53a      	bpl.n	29734 <__swsetup_r+0xb0>
   296be:	0752      	lsls	r2, r2, #29
   296c0:	d424      	bmi.n	2970c <__swsetup_r+0x88>
   296c2:	6921      	ldr	r1, [r4, #16]
   296c4:	f043 0308 	orr.w	r3, r3, #8
   296c8:	b29a      	uxth	r2, r3
   296ca:	81a3      	strh	r3, [r4, #12]
   296cc:	2900      	cmp	r1, #0
   296ce:	d1e9      	bne.n	296a4 <__swsetup_r+0x20>
   296d0:	f402 7020 	and.w	r0, r2, #640	; 0x280
   296d4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   296d8:	d0e4      	beq.n	296a4 <__swsetup_r+0x20>
   296da:	4628      	mov	r0, r5
   296dc:	4621      	mov	r1, r4
   296de:	f001 f9eb 	bl	2aab8 <__smakebuf_r>
   296e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   296e6:	6921      	ldr	r1, [r4, #16]
   296e8:	b29a      	uxth	r2, r3
   296ea:	f012 0001 	ands.w	r0, r2, #1
   296ee:	d1dc      	bne.n	296aa <__swsetup_r+0x26>
   296f0:	0795      	lsls	r5, r2, #30
   296f2:	bf58      	it	pl
   296f4:	6960      	ldrpl	r0, [r4, #20]
   296f6:	60a0      	str	r0, [r4, #8]
   296f8:	2900      	cmp	r1, #0
   296fa:	d1dc      	bne.n	296b6 <__swsetup_r+0x32>
   296fc:	0612      	lsls	r2, r2, #24
   296fe:	d421      	bmi.n	29744 <__swsetup_r+0xc0>
   29700:	4608      	mov	r0, r1
   29702:	bd38      	pop	{r3, r4, r5, pc}
   29704:	4618      	mov	r0, r3
   29706:	f000 f9d9 	bl	29abc <__sinit>
   2970a:	e7c4      	b.n	29696 <__swsetup_r+0x12>
   2970c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2970e:	b151      	cbz	r1, 29726 <__swsetup_r+0xa2>
   29710:	f104 0240 	add.w	r2, r4, #64	; 0x40
   29714:	4291      	cmp	r1, r2
   29716:	d004      	beq.n	29722 <__swsetup_r+0x9e>
   29718:	4628      	mov	r0, r5
   2971a:	f000 fadf 	bl	29cdc <_free_r>
   2971e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29722:	2200      	movs	r2, #0
   29724:	6322      	str	r2, [r4, #48]	; 0x30
   29726:	2200      	movs	r2, #0
   29728:	6921      	ldr	r1, [r4, #16]
   2972a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   2972e:	e9c4 1200 	strd	r1, r2, [r4]
   29732:	e7c7      	b.n	296c4 <__swsetup_r+0x40>
   29734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29738:	2209      	movs	r2, #9
   2973a:	f04f 30ff 	mov.w	r0, #4294967295
   2973e:	602a      	str	r2, [r5, #0]
   29740:	81a3      	strh	r3, [r4, #12]
   29742:	bd38      	pop	{r3, r4, r5, pc}
   29744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29748:	f04f 30ff 	mov.w	r0, #4294967295
   2974c:	81a3      	strh	r3, [r4, #12]
   2974e:	bd38      	pop	{r3, r4, r5, pc}
   29750:	200204d8 	.word	0x200204d8

00029754 <abort>:
   29754:	2006      	movs	r0, #6
   29756:	b508      	push	{r3, lr}
   29758:	f002 f80c 	bl	2b774 <raise>
   2975c:	2001      	movs	r0, #1
   2975e:	f7eb fe2f 	bl	153c0 <_exit>
   29762:	bf00      	nop

00029764 <_close_r>:
   29764:	b538      	push	{r3, r4, r5, lr}
   29766:	2200      	movs	r2, #0
   29768:	4d06      	ldr	r5, [pc, #24]	; (29784 <_close_r+0x20>)
   2976a:	4604      	mov	r4, r0
   2976c:	4608      	mov	r0, r1
   2976e:	602a      	str	r2, [r5, #0]
   29770:	f003 fadf 	bl	2cd32 <_close>
   29774:	1c43      	adds	r3, r0, #1
   29776:	d000      	beq.n	2977a <_close_r+0x16>
   29778:	bd38      	pop	{r3, r4, r5, pc}
   2977a:	682b      	ldr	r3, [r5, #0]
   2977c:	2b00      	cmp	r3, #0
   2977e:	d0fb      	beq.n	29778 <_close_r+0x14>
   29780:	6023      	str	r3, [r4, #0]
   29782:	bd38      	pop	{r3, r4, r5, pc}
   29784:	2002640c 	.word	0x2002640c

00029788 <quorem>:
   29788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2978c:	6903      	ldr	r3, [r0, #16]
   2978e:	b085      	sub	sp, #20
   29790:	690c      	ldr	r4, [r1, #16]
   29792:	9101      	str	r1, [sp, #4]
   29794:	42a3      	cmp	r3, r4
   29796:	f2c0 808c 	blt.w	298b2 <quorem+0x12a>
   2979a:	3c01      	subs	r4, #1
   2979c:	f101 0514 	add.w	r5, r1, #20
   297a0:	f100 0914 	add.w	r9, r0, #20
   297a4:	4682      	mov	sl, r0
   297a6:	00a2      	lsls	r2, r4, #2
   297a8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   297ac:	eb09 0184 	add.w	r1, r9, r4, lsl #2
   297b0:	3301      	adds	r3, #1
   297b2:	9202      	str	r2, [sp, #8]
   297b4:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
   297b8:	eb05 0884 	add.w	r8, r5, r4, lsl #2
   297bc:	9103      	str	r1, [sp, #12]
   297be:	429a      	cmp	r2, r3
   297c0:	fbb2 f6f3 	udiv	r6, r2, r3
   297c4:	d33c      	bcc.n	29840 <quorem+0xb8>
   297c6:	2300      	movs	r3, #0
   297c8:	4628      	mov	r0, r5
   297ca:	464f      	mov	r7, r9
   297cc:	461a      	mov	r2, r3
   297ce:	f850 1b04 	ldr.w	r1, [r0], #4
   297d2:	f8d7 e000 	ldr.w	lr, [r7]
   297d6:	fa1f fc81 	uxth.w	ip, r1
   297da:	4580      	cmp	r8, r0
   297dc:	ea4f 4111 	mov.w	r1, r1, lsr #16
   297e0:	fb06 3c0c 	mla	ip, r6, ip, r3
   297e4:	fa1f fb8e 	uxth.w	fp, lr
   297e8:	ea4f 431c 	mov.w	r3, ip, lsr #16
   297ec:	fa1f fc8c 	uxth.w	ip, ip
   297f0:	fb06 3301 	mla	r3, r6, r1, r3
   297f4:	eba2 010c 	sub.w	r1, r2, ip
   297f8:	b29a      	uxth	r2, r3
   297fa:	4459      	add	r1, fp
   297fc:	ea4f 4313 	mov.w	r3, r3, lsr #16
   29800:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   29804:	fa1f fc81 	uxth.w	ip, r1
   29808:	eb02 4221 	add.w	r2, r2, r1, asr #16
   2980c:	ea4c 4102 	orr.w	r1, ip, r2, lsl #16
   29810:	ea4f 4222 	mov.w	r2, r2, asr #16
   29814:	f847 1b04 	str.w	r1, [r7], #4
   29818:	d2d9      	bcs.n	297ce <quorem+0x46>
   2981a:	9b02      	ldr	r3, [sp, #8]
   2981c:	f859 3003 	ldr.w	r3, [r9, r3]
   29820:	b973      	cbnz	r3, 29840 <quorem+0xb8>
   29822:	9b03      	ldr	r3, [sp, #12]
   29824:	3b04      	subs	r3, #4
   29826:	4599      	cmp	r9, r3
   29828:	d304      	bcc.n	29834 <quorem+0xac>
   2982a:	e007      	b.n	2983c <quorem+0xb4>
   2982c:	4599      	cmp	r9, r3
   2982e:	f104 34ff 	add.w	r4, r4, #4294967295
   29832:	d203      	bcs.n	2983c <quorem+0xb4>
   29834:	f853 2904 	ldr.w	r2, [r3], #-4
   29838:	2a00      	cmp	r2, #0
   2983a:	d0f7      	beq.n	2982c <quorem+0xa4>
   2983c:	f8ca 4010 	str.w	r4, [sl, #16]
   29840:	9901      	ldr	r1, [sp, #4]
   29842:	4650      	mov	r0, sl
   29844:	f001 fca0 	bl	2b188 <__mcmp>
   29848:	2800      	cmp	r0, #0
   2984a:	db2e      	blt.n	298aa <quorem+0x122>
   2984c:	3601      	adds	r6, #1
   2984e:	4648      	mov	r0, r9
   29850:	2200      	movs	r2, #0
   29852:	f855 1b04 	ldr.w	r1, [r5], #4
   29856:	f8d0 c000 	ldr.w	ip, [r0]
   2985a:	b28b      	uxth	r3, r1
   2985c:	45a8      	cmp	r8, r5
   2985e:	ea4f 4111 	mov.w	r1, r1, lsr #16
   29862:	eba2 0303 	sub.w	r3, r2, r3
   29866:	fa1f f28c 	uxth.w	r2, ip
   2986a:	ebc1 411c 	rsb	r1, r1, ip, lsr #16
   2986e:	4413      	add	r3, r2
   29870:	eb01 4123 	add.w	r1, r1, r3, asr #16
   29874:	b29b      	uxth	r3, r3
   29876:	ea4f 4221 	mov.w	r2, r1, asr #16
   2987a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2987e:	f840 3b04 	str.w	r3, [r0], #4
   29882:	d2e6      	bcs.n	29852 <quorem+0xca>
   29884:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
   29888:	eb09 0384 	add.w	r3, r9, r4, lsl #2
   2988c:	b96a      	cbnz	r2, 298aa <quorem+0x122>
   2988e:	3b04      	subs	r3, #4
   29890:	4599      	cmp	r9, r3
   29892:	d304      	bcc.n	2989e <quorem+0x116>
   29894:	e007      	b.n	298a6 <quorem+0x11e>
   29896:	4599      	cmp	r9, r3
   29898:	f104 34ff 	add.w	r4, r4, #4294967295
   2989c:	d203      	bcs.n	298a6 <quorem+0x11e>
   2989e:	f853 2904 	ldr.w	r2, [r3], #-4
   298a2:	2a00      	cmp	r2, #0
   298a4:	d0f7      	beq.n	29896 <quorem+0x10e>
   298a6:	f8ca 4010 	str.w	r4, [sl, #16]
   298aa:	4630      	mov	r0, r6
   298ac:	b005      	add	sp, #20
   298ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   298b2:	2000      	movs	r0, #0
   298b4:	b005      	add	sp, #20
   298b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   298ba:	bf00      	nop

000298bc <__sflush_r>:
   298bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   298c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   298c4:	460d      	mov	r5, r1
   298c6:	0711      	lsls	r1, r2, #28
   298c8:	4680      	mov	r8, r0
   298ca:	d431      	bmi.n	29930 <__sflush_r+0x74>
   298cc:	686b      	ldr	r3, [r5, #4]
   298ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   298d2:	2b00      	cmp	r3, #0
   298d4:	81aa      	strh	r2, [r5, #12]
   298d6:	dd48      	ble.n	2996a <__sflush_r+0xae>
   298d8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   298da:	2c00      	cmp	r4, #0
   298dc:	d042      	beq.n	29964 <__sflush_r+0xa8>
   298de:	2100      	movs	r1, #0
   298e0:	b293      	uxth	r3, r2
   298e2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   298e6:	f8d8 6000 	ldr.w	r6, [r8]
   298ea:	f8c8 1000 	str.w	r1, [r8]
   298ee:	d140      	bne.n	29972 <__sflush_r+0xb6>
   298f0:	2301      	movs	r3, #1
   298f2:	69e9      	ldr	r1, [r5, #28]
   298f4:	4640      	mov	r0, r8
   298f6:	47a0      	blx	r4
   298f8:	1c43      	adds	r3, r0, #1
   298fa:	d073      	beq.n	299e4 <__sflush_r+0x128>
   298fc:	89ab      	ldrh	r3, [r5, #12]
   298fe:	6aac      	ldr	r4, [r5, #40]	; 0x28
   29900:	075f      	lsls	r7, r3, #29
   29902:	d505      	bpl.n	29910 <__sflush_r+0x54>
   29904:	686a      	ldr	r2, [r5, #4]
   29906:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   29908:	1a80      	subs	r0, r0, r2
   2990a:	b10b      	cbz	r3, 29910 <__sflush_r+0x54>
   2990c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2990e:	1ac0      	subs	r0, r0, r3
   29910:	4602      	mov	r2, r0
   29912:	2300      	movs	r3, #0
   29914:	69e9      	ldr	r1, [r5, #28]
   29916:	4640      	mov	r0, r8
   29918:	47a0      	blx	r4
   2991a:	1c44      	adds	r4, r0, #1
   2991c:	d133      	bne.n	29986 <__sflush_r+0xca>
   2991e:	f8d8 4000 	ldr.w	r4, [r8]
   29922:	2c1d      	cmp	r4, #29
   29924:	d94b      	bls.n	299be <__sflush_r+0x102>
   29926:	89ab      	ldrh	r3, [r5, #12]
   29928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2992c:	81ab      	strh	r3, [r5, #12]
   2992e:	e01a      	b.n	29966 <__sflush_r+0xaa>
   29930:	692f      	ldr	r7, [r5, #16]
   29932:	b1bf      	cbz	r7, 29964 <__sflush_r+0xa8>
   29934:	b293      	uxth	r3, r2
   29936:	682e      	ldr	r6, [r5, #0]
   29938:	602f      	str	r7, [r5, #0]
   2993a:	0799      	lsls	r1, r3, #30
   2993c:	eba6 0607 	sub.w	r6, r6, r7
   29940:	bf0c      	ite	eq
   29942:	696b      	ldreq	r3, [r5, #20]
   29944:	2300      	movne	r3, #0
   29946:	60ab      	str	r3, [r5, #8]
   29948:	e00a      	b.n	29960 <__sflush_r+0xa4>
   2994a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   2994c:	4633      	mov	r3, r6
   2994e:	463a      	mov	r2, r7
   29950:	69e9      	ldr	r1, [r5, #28]
   29952:	4640      	mov	r0, r8
   29954:	47a0      	blx	r4
   29956:	1e04      	subs	r4, r0, #0
   29958:	eba6 0604 	sub.w	r6, r6, r4
   2995c:	4427      	add	r7, r4
   2995e:	dd0a      	ble.n	29976 <__sflush_r+0xba>
   29960:	2e00      	cmp	r6, #0
   29962:	dcf2      	bgt.n	2994a <__sflush_r+0x8e>
   29964:	2000      	movs	r0, #0
   29966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2996a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2996c:	2b00      	cmp	r3, #0
   2996e:	dcb3      	bgt.n	298d8 <__sflush_r+0x1c>
   29970:	e7f8      	b.n	29964 <__sflush_r+0xa8>
   29972:	6d28      	ldr	r0, [r5, #80]	; 0x50
   29974:	e7c4      	b.n	29900 <__sflush_r+0x44>
   29976:	89ab      	ldrh	r3, [r5, #12]
   29978:	f04f 30ff 	mov.w	r0, #4294967295
   2997c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29980:	81ab      	strh	r3, [r5, #12]
   29982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29986:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   2998a:	2100      	movs	r1, #0
   2998c:	692a      	ldr	r2, [r5, #16]
   2998e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   29992:	e9c5 2100 	strd	r2, r1, [r5]
   29996:	04da      	lsls	r2, r3, #19
   29998:	81ab      	strh	r3, [r5, #12]
   2999a:	d500      	bpl.n	2999e <__sflush_r+0xe2>
   2999c:	6528      	str	r0, [r5, #80]	; 0x50
   2999e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   299a0:	f8c8 6000 	str.w	r6, [r8]
   299a4:	2900      	cmp	r1, #0
   299a6:	d0dd      	beq.n	29964 <__sflush_r+0xa8>
   299a8:	f105 0340 	add.w	r3, r5, #64	; 0x40
   299ac:	4299      	cmp	r1, r3
   299ae:	d002      	beq.n	299b6 <__sflush_r+0xfa>
   299b0:	4640      	mov	r0, r8
   299b2:	f000 f993 	bl	29cdc <_free_r>
   299b6:	2000      	movs	r0, #0
   299b8:	6328      	str	r0, [r5, #48]	; 0x30
   299ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   299be:	4a0f      	ldr	r2, [pc, #60]	; (299fc <__sflush_r+0x140>)
   299c0:	40e2      	lsrs	r2, r4
   299c2:	43d2      	mvns	r2, r2
   299c4:	f012 0201 	ands.w	r2, r2, #1
   299c8:	d1ad      	bne.n	29926 <__sflush_r+0x6a>
   299ca:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   299ce:	6929      	ldr	r1, [r5, #16]
   299d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   299d4:	81ab      	strh	r3, [r5, #12]
   299d6:	04db      	lsls	r3, r3, #19
   299d8:	e9c5 1200 	strd	r1, r2, [r5]
   299dc:	d5df      	bpl.n	2999e <__sflush_r+0xe2>
   299de:	2c00      	cmp	r4, #0
   299e0:	d1dd      	bne.n	2999e <__sflush_r+0xe2>
   299e2:	e7db      	b.n	2999c <__sflush_r+0xe0>
   299e4:	f8d8 3000 	ldr.w	r3, [r8]
   299e8:	2b00      	cmp	r3, #0
   299ea:	d087      	beq.n	298fc <__sflush_r+0x40>
   299ec:	2b1d      	cmp	r3, #29
   299ee:	d001      	beq.n	299f4 <__sflush_r+0x138>
   299f0:	2b16      	cmp	r3, #22
   299f2:	d198      	bne.n	29926 <__sflush_r+0x6a>
   299f4:	f8c8 6000 	str.w	r6, [r8]
   299f8:	e7b4      	b.n	29964 <__sflush_r+0xa8>
   299fa:	bf00      	nop
   299fc:	20400001 	.word	0x20400001

00029a00 <_fflush_r>:
   29a00:	b538      	push	{r3, r4, r5, lr}
   29a02:	460c      	mov	r4, r1
   29a04:	4605      	mov	r5, r0
   29a06:	b108      	cbz	r0, 29a0c <_fflush_r+0xc>
   29a08:	6b83      	ldr	r3, [r0, #56]	; 0x38
   29a0a:	b1a3      	cbz	r3, 29a36 <_fflush_r+0x36>
   29a0c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   29a10:	b1b8      	cbz	r0, 29a42 <_fflush_r+0x42>
   29a12:	6e63      	ldr	r3, [r4, #100]	; 0x64
   29a14:	07db      	lsls	r3, r3, #31
   29a16:	d401      	bmi.n	29a1c <_fflush_r+0x1c>
   29a18:	0581      	lsls	r1, r0, #22
   29a1a:	d515      	bpl.n	29a48 <_fflush_r+0x48>
   29a1c:	4628      	mov	r0, r5
   29a1e:	4621      	mov	r1, r4
   29a20:	f7ff ff4c 	bl	298bc <__sflush_r>
   29a24:	6e63      	ldr	r3, [r4, #100]	; 0x64
   29a26:	4605      	mov	r5, r0
   29a28:	07da      	lsls	r2, r3, #31
   29a2a:	d402      	bmi.n	29a32 <_fflush_r+0x32>
   29a2c:	89a3      	ldrh	r3, [r4, #12]
   29a2e:	059b      	lsls	r3, r3, #22
   29a30:	d50e      	bpl.n	29a50 <_fflush_r+0x50>
   29a32:	4628      	mov	r0, r5
   29a34:	bd38      	pop	{r3, r4, r5, pc}
   29a36:	f000 f841 	bl	29abc <__sinit>
   29a3a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   29a3e:	2800      	cmp	r0, #0
   29a40:	d1e7      	bne.n	29a12 <_fflush_r+0x12>
   29a42:	4605      	mov	r5, r0
   29a44:	4628      	mov	r0, r5
   29a46:	bd38      	pop	{r3, r4, r5, pc}
   29a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29a4a:	f000 ffed 	bl	2aa28 <__retarget_lock_acquire_recursive>
   29a4e:	e7e5      	b.n	29a1c <_fflush_r+0x1c>
   29a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29a52:	f000 ffeb 	bl	2aa2c <__retarget_lock_release_recursive>
   29a56:	4628      	mov	r0, r5
   29a58:	bd38      	pop	{r3, r4, r5, pc}
   29a5a:	bf00      	nop

00029a5c <std>:
   29a5c:	b538      	push	{r3, r4, r5, lr}
   29a5e:	4604      	mov	r4, r0
   29a60:	4613      	mov	r3, r2
   29a62:	460d      	mov	r5, r1
   29a64:	2100      	movs	r1, #0
   29a66:	2208      	movs	r2, #8
   29a68:	305c      	adds	r0, #92	; 0x5c
   29a6a:	f820 5c50 	strh.w	r5, [r0, #-80]
   29a6e:	81e3      	strh	r3, [r4, #14]
   29a70:	60a1      	str	r1, [r4, #8]
   29a72:	6661      	str	r1, [r4, #100]	; 0x64
   29a74:	61a1      	str	r1, [r4, #24]
   29a76:	4d0a      	ldr	r5, [pc, #40]	; (29aa0 <std+0x44>)
   29a78:	e9c4 1100 	strd	r1, r1, [r4]
   29a7c:	e9c4 1104 	strd	r1, r1, [r4, #16]
   29a80:	f7fc fafc 	bl	2607c <memset>
   29a84:	4b07      	ldr	r3, [pc, #28]	; (29aa4 <std+0x48>)
   29a86:	4908      	ldr	r1, [pc, #32]	; (29aa8 <std+0x4c>)
   29a88:	f104 0058 	add.w	r0, r4, #88	; 0x58
   29a8c:	4a07      	ldr	r2, [pc, #28]	; (29aac <std+0x50>)
   29a8e:	62e3      	str	r3, [r4, #44]	; 0x2c
   29a90:	e9c4 4507 	strd	r4, r5, [r4, #28]
   29a94:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   29a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29a9c:	f000 bfc0 	b.w	2aa20 <__retarget_lock_init_recursive>
   29aa0:	0002667d 	.word	0x0002667d
   29aa4:	00026709 	.word	0x00026709
   29aa8:	000266a5 	.word	0x000266a5
   29aac:	000266e5 	.word	0x000266e5

00029ab0 <_cleanup_r>:
   29ab0:	4901      	ldr	r1, [pc, #4]	; (29ab8 <_cleanup_r+0x8>)
   29ab2:	f000 bb8f 	b.w	2a1d4 <_fwalk_reent>
   29ab6:	bf00      	nop
   29ab8:	0002bf49 	.word	0x0002bf49

00029abc <__sinit>:
   29abc:	b510      	push	{r4, lr}
   29abe:	4604      	mov	r4, r0
   29ac0:	4814      	ldr	r0, [pc, #80]	; (29b14 <__sinit+0x58>)
   29ac2:	f000 ffb1 	bl	2aa28 <__retarget_lock_acquire_recursive>
   29ac6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   29ac8:	b9fa      	cbnz	r2, 29b0a <__sinit+0x4e>
   29aca:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   29ace:	4812      	ldr	r0, [pc, #72]	; (29b18 <__sinit+0x5c>)
   29ad0:	2103      	movs	r1, #3
   29ad2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   29ad6:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   29ada:	63e0      	str	r0, [r4, #60]	; 0x3c
   29adc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   29ae0:	2104      	movs	r1, #4
   29ae2:	6860      	ldr	r0, [r4, #4]
   29ae4:	f7ff ffba 	bl	29a5c <std>
   29ae8:	68a0      	ldr	r0, [r4, #8]
   29aea:	2201      	movs	r2, #1
   29aec:	2109      	movs	r1, #9
   29aee:	f7ff ffb5 	bl	29a5c <std>
   29af2:	68e0      	ldr	r0, [r4, #12]
   29af4:	2202      	movs	r2, #2
   29af6:	2112      	movs	r1, #18
   29af8:	f7ff ffb0 	bl	29a5c <std>
   29afc:	2301      	movs	r3, #1
   29afe:	4805      	ldr	r0, [pc, #20]	; (29b14 <__sinit+0x58>)
   29b00:	63a3      	str	r3, [r4, #56]	; 0x38
   29b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29b06:	f000 bf91 	b.w	2aa2c <__retarget_lock_release_recursive>
   29b0a:	4802      	ldr	r0, [pc, #8]	; (29b14 <__sinit+0x58>)
   29b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29b10:	f000 bf8c 	b.w	2aa2c <__retarget_lock_release_recursive>
   29b14:	200263f4 	.word	0x200263f4
   29b18:	00029ab1 	.word	0x00029ab1

00029b1c <__sfp_lock_acquire>:
   29b1c:	4801      	ldr	r0, [pc, #4]	; (29b24 <__sfp_lock_acquire+0x8>)
   29b1e:	f000 bf83 	b.w	2aa28 <__retarget_lock_acquire_recursive>
   29b22:	bf00      	nop
   29b24:	20026408 	.word	0x20026408

00029b28 <__sfp_lock_release>:
   29b28:	4801      	ldr	r0, [pc, #4]	; (29b30 <__sfp_lock_release+0x8>)
   29b2a:	f000 bf7f 	b.w	2aa2c <__retarget_lock_release_recursive>
   29b2e:	bf00      	nop
   29b30:	20026408 	.word	0x20026408

00029b34 <__fputwc>:
   29b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29b38:	b082      	sub	sp, #8
   29b3a:	4680      	mov	r8, r0
   29b3c:	4689      	mov	r9, r1
   29b3e:	4614      	mov	r4, r2
   29b40:	f000 ff64 	bl	2aa0c <__locale_mb_cur_max>
   29b44:	2801      	cmp	r0, #1
   29b46:	d103      	bne.n	29b50 <__fputwc+0x1c>
   29b48:	f109 33ff 	add.w	r3, r9, #4294967295
   29b4c:	2bfe      	cmp	r3, #254	; 0xfe
   29b4e:	d931      	bls.n	29bb4 <__fputwc+0x80>
   29b50:	464a      	mov	r2, r9
   29b52:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   29b56:	a901      	add	r1, sp, #4
   29b58:	4640      	mov	r0, r8
   29b5a:	f002 f999 	bl	2be90 <_wcrtomb_r>
   29b5e:	1c42      	adds	r2, r0, #1
   29b60:	4606      	mov	r6, r0
   29b62:	d032      	beq.n	29bca <__fputwc+0x96>
   29b64:	b360      	cbz	r0, 29bc0 <__fputwc+0x8c>
   29b66:	f89d c004 	ldrb.w	ip, [sp, #4]
   29b6a:	2500      	movs	r5, #0
   29b6c:	f10d 0a04 	add.w	sl, sp, #4
   29b70:	e00c      	b.n	29b8c <__fputwc+0x58>
   29b72:	f1bc 0f0a 	cmp.w	ip, #10
   29b76:	d014      	beq.n	29ba2 <__fputwc+0x6e>
   29b78:	6823      	ldr	r3, [r4, #0]
   29b7a:	1c5a      	adds	r2, r3, #1
   29b7c:	6022      	str	r2, [r4, #0]
   29b7e:	f883 c000 	strb.w	ip, [r3]
   29b82:	3501      	adds	r5, #1
   29b84:	42b5      	cmp	r5, r6
   29b86:	d21b      	bcs.n	29bc0 <__fputwc+0x8c>
   29b88:	f815 c00a 	ldrb.w	ip, [r5, sl]
   29b8c:	68a3      	ldr	r3, [r4, #8]
   29b8e:	3b01      	subs	r3, #1
   29b90:	2b00      	cmp	r3, #0
   29b92:	60a3      	str	r3, [r4, #8]
   29b94:	daf0      	bge.n	29b78 <__fputwc+0x44>
   29b96:	69a7      	ldr	r7, [r4, #24]
   29b98:	4661      	mov	r1, ip
   29b9a:	4622      	mov	r2, r4
   29b9c:	4640      	mov	r0, r8
   29b9e:	42bb      	cmp	r3, r7
   29ba0:	dae7      	bge.n	29b72 <__fputwc+0x3e>
   29ba2:	f002 f91d 	bl	2bde0 <__swbuf_r>
   29ba6:	1c43      	adds	r3, r0, #1
   29ba8:	d1eb      	bne.n	29b82 <__fputwc+0x4e>
   29baa:	4606      	mov	r6, r0
   29bac:	4630      	mov	r0, r6
   29bae:	b002      	add	sp, #8
   29bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29bb4:	fa5f fc89 	uxtb.w	ip, r9
   29bb8:	4606      	mov	r6, r0
   29bba:	f88d c004 	strb.w	ip, [sp, #4]
   29bbe:	e7d4      	b.n	29b6a <__fputwc+0x36>
   29bc0:	464e      	mov	r6, r9
   29bc2:	4630      	mov	r0, r6
   29bc4:	b002      	add	sp, #8
   29bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29bca:	89a3      	ldrh	r3, [r4, #12]
   29bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29bd0:	81a3      	strh	r3, [r4, #12]
   29bd2:	e7eb      	b.n	29bac <__fputwc+0x78>

00029bd4 <_fputwc_r>:
   29bd4:	6e53      	ldr	r3, [r2, #100]	; 0x64
   29bd6:	f013 0f01 	tst.w	r3, #1
   29bda:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   29bde:	b530      	push	{r4, r5, lr}
   29be0:	4614      	mov	r4, r2
   29be2:	b083      	sub	sp, #12
   29be4:	4605      	mov	r5, r0
   29be6:	b29a      	uxth	r2, r3
   29be8:	d101      	bne.n	29bee <_fputwc_r+0x1a>
   29bea:	0598      	lsls	r0, r3, #22
   29bec:	d51c      	bpl.n	29c28 <_fputwc_r+0x54>
   29bee:	0490      	lsls	r0, r2, #18
   29bf0:	d406      	bmi.n	29c00 <_fputwc_r+0x2c>
   29bf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   29bf4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   29bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   29bfc:	81a3      	strh	r3, [r4, #12]
   29bfe:	6662      	str	r2, [r4, #100]	; 0x64
   29c00:	4628      	mov	r0, r5
   29c02:	4622      	mov	r2, r4
   29c04:	f7ff ff96 	bl	29b34 <__fputwc>
   29c08:	6e63      	ldr	r3, [r4, #100]	; 0x64
   29c0a:	4605      	mov	r5, r0
   29c0c:	07da      	lsls	r2, r3, #31
   29c0e:	d402      	bmi.n	29c16 <_fputwc_r+0x42>
   29c10:	89a3      	ldrh	r3, [r4, #12]
   29c12:	059b      	lsls	r3, r3, #22
   29c14:	d502      	bpl.n	29c1c <_fputwc_r+0x48>
   29c16:	4628      	mov	r0, r5
   29c18:	b003      	add	sp, #12
   29c1a:	bd30      	pop	{r4, r5, pc}
   29c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29c1e:	f000 ff05 	bl	2aa2c <__retarget_lock_release_recursive>
   29c22:	4628      	mov	r0, r5
   29c24:	b003      	add	sp, #12
   29c26:	bd30      	pop	{r4, r5, pc}
   29c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29c2a:	9101      	str	r1, [sp, #4]
   29c2c:	f000 fefc 	bl	2aa28 <__retarget_lock_acquire_recursive>
   29c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29c34:	9901      	ldr	r1, [sp, #4]
   29c36:	b29a      	uxth	r2, r3
   29c38:	e7d9      	b.n	29bee <_fputwc_r+0x1a>
   29c3a:	bf00      	nop

00029c3c <_malloc_trim_r>:
   29c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29c3e:	4f23      	ldr	r7, [pc, #140]	; (29ccc <_malloc_trim_r+0x90>)
   29c40:	460c      	mov	r4, r1
   29c42:	4606      	mov	r6, r0
   29c44:	f7fc fa6a 	bl	2611c <__malloc_lock>
   29c48:	68b9      	ldr	r1, [r7, #8]
   29c4a:	f640 73ef 	movw	r3, #4079	; 0xfef
   29c4e:	4a20      	ldr	r2, [pc, #128]	; (29cd0 <_malloc_trim_r+0x94>)
   29c50:	684d      	ldr	r5, [r1, #4]
   29c52:	1b1b      	subs	r3, r3, r4
   29c54:	f025 0503 	bic.w	r5, r5, #3
   29c58:	442b      	add	r3, r5
   29c5a:	401a      	ands	r2, r3
   29c5c:	f5a2 5480 	sub.w	r4, r2, #4096	; 0x1000
   29c60:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   29c64:	db07      	blt.n	29c76 <_malloc_trim_r+0x3a>
   29c66:	2100      	movs	r1, #0
   29c68:	4630      	mov	r0, r6
   29c6a:	f7fc fc65 	bl	26538 <_sbrk_r>
   29c6e:	68bb      	ldr	r3, [r7, #8]
   29c70:	442b      	add	r3, r5
   29c72:	4298      	cmp	r0, r3
   29c74:	d004      	beq.n	29c80 <_malloc_trim_r+0x44>
   29c76:	4630      	mov	r0, r6
   29c78:	f7fc fa56 	bl	26128 <__malloc_unlock>
   29c7c:	2000      	movs	r0, #0
   29c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29c80:	4261      	negs	r1, r4
   29c82:	4630      	mov	r0, r6
   29c84:	f7fc fc58 	bl	26538 <_sbrk_r>
   29c88:	3001      	adds	r0, #1
   29c8a:	d00d      	beq.n	29ca8 <_malloc_trim_r+0x6c>
   29c8c:	4b11      	ldr	r3, [pc, #68]	; (29cd4 <_malloc_trim_r+0x98>)
   29c8e:	1b2d      	subs	r5, r5, r4
   29c90:	68b9      	ldr	r1, [r7, #8]
   29c92:	4630      	mov	r0, r6
   29c94:	681a      	ldr	r2, [r3, #0]
   29c96:	f045 0501 	orr.w	r5, r5, #1
   29c9a:	1b12      	subs	r2, r2, r4
   29c9c:	604d      	str	r5, [r1, #4]
   29c9e:	601a      	str	r2, [r3, #0]
   29ca0:	f7fc fa42 	bl	26128 <__malloc_unlock>
   29ca4:	2001      	movs	r0, #1
   29ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29ca8:	2100      	movs	r1, #0
   29caa:	4630      	mov	r0, r6
   29cac:	f7fc fc44 	bl	26538 <_sbrk_r>
   29cb0:	68ba      	ldr	r2, [r7, #8]
   29cb2:	1a83      	subs	r3, r0, r2
   29cb4:	2b0f      	cmp	r3, #15
   29cb6:	ddde      	ble.n	29c76 <_malloc_trim_r+0x3a>
   29cb8:	4c07      	ldr	r4, [pc, #28]	; (29cd8 <_malloc_trim_r+0x9c>)
   29cba:	f043 0301 	orr.w	r3, r3, #1
   29cbe:	4905      	ldr	r1, [pc, #20]	; (29cd4 <_malloc_trim_r+0x98>)
   29cc0:	6824      	ldr	r4, [r4, #0]
   29cc2:	6053      	str	r3, [r2, #4]
   29cc4:	1b00      	subs	r0, r0, r4
   29cc6:	6008      	str	r0, [r1, #0]
   29cc8:	e7d5      	b.n	29c76 <_malloc_trim_r+0x3a>
   29cca:	bf00      	nop
   29ccc:	200204dc 	.word	0x200204dc
   29cd0:	fffff000 	.word	0xfffff000
   29cd4:	20024254 	.word	0x20024254
   29cd8:	200208e4 	.word	0x200208e4

00029cdc <_free_r>:
   29cdc:	2900      	cmp	r1, #0
   29cde:	d05f      	beq.n	29da0 <_free_r+0xc4>
   29ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29ce2:	460c      	mov	r4, r1
   29ce4:	4606      	mov	r6, r0
   29ce6:	f7fc fa19 	bl	2611c <__malloc_lock>
   29cea:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 29ee4 <_free_r+0x208>
   29cee:	f854 3c04 	ldr.w	r3, [r4, #-4]
   29cf2:	f1a4 0008 	sub.w	r0, r4, #8
   29cf6:	f8dc 7008 	ldr.w	r7, [ip, #8]
   29cfa:	f023 0101 	bic.w	r1, r3, #1
   29cfe:	1842      	adds	r2, r0, r1
   29d00:	6855      	ldr	r5, [r2, #4]
   29d02:	4297      	cmp	r7, r2
   29d04:	f025 0503 	bic.w	r5, r5, #3
   29d08:	f000 8089 	beq.w	29e1e <_free_r+0x142>
   29d0c:	07df      	lsls	r7, r3, #31
   29d0e:	6055      	str	r5, [r2, #4]
   29d10:	d434      	bmi.n	29d7c <_free_r+0xa0>
   29d12:	f854 3c08 	ldr.w	r3, [r4, #-8]
   29d16:	f10c 0408 	add.w	r4, ip, #8
   29d1a:	1ac0      	subs	r0, r0, r3
   29d1c:	4419      	add	r1, r3
   29d1e:	6883      	ldr	r3, [r0, #8]
   29d20:	42a3      	cmp	r3, r4
   29d22:	d06a      	beq.n	29dfa <_free_r+0x11e>
   29d24:	1957      	adds	r7, r2, r5
   29d26:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   29d2a:	687f      	ldr	r7, [r7, #4]
   29d2c:	f8c3 e00c 	str.w	lr, [r3, #12]
   29d30:	f8ce 3008 	str.w	r3, [lr, #8]
   29d34:	07fb      	lsls	r3, r7, #31
   29d36:	f140 8097 	bpl.w	29e68 <_free_r+0x18c>
   29d3a:	f041 0301 	orr.w	r3, r1, #1
   29d3e:	6043      	str	r3, [r0, #4]
   29d40:	6011      	str	r1, [r2, #0]
   29d42:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   29d46:	d234      	bcs.n	29db2 <_free_r+0xd6>
   29d48:	2201      	movs	r2, #1
   29d4a:	08cb      	lsrs	r3, r1, #3
   29d4c:	0949      	lsrs	r1, r1, #5
   29d4e:	f8dc 4004 	ldr.w	r4, [ip, #4]
   29d52:	4413      	add	r3, r2
   29d54:	fa02 f101 	lsl.w	r1, r2, r1
   29d58:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   29d5c:	4321      	orrs	r1, r4
   29d5e:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   29d62:	3a08      	subs	r2, #8
   29d64:	f8cc 1004 	str.w	r1, [ip, #4]
   29d68:	e9c0 4202 	strd	r4, r2, [r0, #8]
   29d6c:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   29d70:	60e0      	str	r0, [r4, #12]
   29d72:	4630      	mov	r0, r6
   29d74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   29d78:	f7fc b9d6 	b.w	26128 <__malloc_unlock>
   29d7c:	1953      	adds	r3, r2, r5
   29d7e:	685b      	ldr	r3, [r3, #4]
   29d80:	07df      	lsls	r7, r3, #31
   29d82:	d40e      	bmi.n	29da2 <_free_r+0xc6>
   29d84:	4429      	add	r1, r5
   29d86:	f10c 0408 	add.w	r4, ip, #8
   29d8a:	6893      	ldr	r3, [r2, #8]
   29d8c:	42a3      	cmp	r3, r4
   29d8e:	d073      	beq.n	29e78 <_free_r+0x19c>
   29d90:	68d4      	ldr	r4, [r2, #12]
   29d92:	f041 0201 	orr.w	r2, r1, #1
   29d96:	60dc      	str	r4, [r3, #12]
   29d98:	60a3      	str	r3, [r4, #8]
   29d9a:	6042      	str	r2, [r0, #4]
   29d9c:	5041      	str	r1, [r0, r1]
   29d9e:	e7d0      	b.n	29d42 <_free_r+0x66>
   29da0:	4770      	bx	lr
   29da2:	f041 0301 	orr.w	r3, r1, #1
   29da6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   29daa:	f844 3c04 	str.w	r3, [r4, #-4]
   29dae:	6011      	str	r1, [r2, #0]
   29db0:	d3ca      	bcc.n	29d48 <_free_r+0x6c>
   29db2:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   29db6:	ea4f 2351 	mov.w	r3, r1, lsr #9
   29dba:	d24a      	bcs.n	29e52 <_free_r+0x176>
   29dbc:	098b      	lsrs	r3, r1, #6
   29dbe:	f103 0439 	add.w	r4, r3, #57	; 0x39
   29dc2:	f103 0238 	add.w	r2, r3, #56	; 0x38
   29dc6:	00e3      	lsls	r3, r4, #3
   29dc8:	eb0c 0403 	add.w	r4, ip, r3
   29dcc:	f85c 3003 	ldr.w	r3, [ip, r3]
   29dd0:	3c08      	subs	r4, #8
   29dd2:	429c      	cmp	r4, r3
   29dd4:	d059      	beq.n	29e8a <_free_r+0x1ae>
   29dd6:	685a      	ldr	r2, [r3, #4]
   29dd8:	f022 0203 	bic.w	r2, r2, #3
   29ddc:	428a      	cmp	r2, r1
   29dde:	d902      	bls.n	29de6 <_free_r+0x10a>
   29de0:	689b      	ldr	r3, [r3, #8]
   29de2:	429c      	cmp	r4, r3
   29de4:	d1f7      	bne.n	29dd6 <_free_r+0xfa>
   29de6:	68dc      	ldr	r4, [r3, #12]
   29de8:	e9c0 3402 	strd	r3, r4, [r0, #8]
   29dec:	60a0      	str	r0, [r4, #8]
   29dee:	60d8      	str	r0, [r3, #12]
   29df0:	4630      	mov	r0, r6
   29df2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   29df6:	f7fc b997 	b.w	26128 <__malloc_unlock>
   29dfa:	1953      	adds	r3, r2, r5
   29dfc:	685b      	ldr	r3, [r3, #4]
   29dfe:	07db      	lsls	r3, r3, #31
   29e00:	d466      	bmi.n	29ed0 <_free_r+0x1f4>
   29e02:	4429      	add	r1, r5
   29e04:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   29e08:	f041 0401 	orr.w	r4, r1, #1
   29e0c:	60d3      	str	r3, [r2, #12]
   29e0e:	609a      	str	r2, [r3, #8]
   29e10:	6044      	str	r4, [r0, #4]
   29e12:	5041      	str	r1, [r0, r1]
   29e14:	4630      	mov	r0, r6
   29e16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   29e1a:	f7fc b985 	b.w	26128 <__malloc_unlock>
   29e1e:	07db      	lsls	r3, r3, #31
   29e20:	4429      	add	r1, r5
   29e22:	d407      	bmi.n	29e34 <_free_r+0x158>
   29e24:	f854 3c08 	ldr.w	r3, [r4, #-8]
   29e28:	1ac0      	subs	r0, r0, r3
   29e2a:	4419      	add	r1, r3
   29e2c:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   29e30:	60d3      	str	r3, [r2, #12]
   29e32:	609a      	str	r2, [r3, #8]
   29e34:	4b29      	ldr	r3, [pc, #164]	; (29edc <_free_r+0x200>)
   29e36:	f041 0201 	orr.w	r2, r1, #1
   29e3a:	681b      	ldr	r3, [r3, #0]
   29e3c:	6042      	str	r2, [r0, #4]
   29e3e:	428b      	cmp	r3, r1
   29e40:	f8cc 0008 	str.w	r0, [ip, #8]
   29e44:	d895      	bhi.n	29d72 <_free_r+0x96>
   29e46:	4b26      	ldr	r3, [pc, #152]	; (29ee0 <_free_r+0x204>)
   29e48:	4630      	mov	r0, r6
   29e4a:	6819      	ldr	r1, [r3, #0]
   29e4c:	f7ff fef6 	bl	29c3c <_malloc_trim_r>
   29e50:	e78f      	b.n	29d72 <_free_r+0x96>
   29e52:	2b14      	cmp	r3, #20
   29e54:	d90a      	bls.n	29e6c <_free_r+0x190>
   29e56:	2b54      	cmp	r3, #84	; 0x54
   29e58:	d821      	bhi.n	29e9e <_free_r+0x1c2>
   29e5a:	0b0b      	lsrs	r3, r1, #12
   29e5c:	f103 046f 	add.w	r4, r3, #111	; 0x6f
   29e60:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   29e64:	00e3      	lsls	r3, r4, #3
   29e66:	e7af      	b.n	29dc8 <_free_r+0xec>
   29e68:	4429      	add	r1, r5
   29e6a:	e78e      	b.n	29d8a <_free_r+0xae>
   29e6c:	f103 045c 	add.w	r4, r3, #92	; 0x5c
   29e70:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   29e74:	00e3      	lsls	r3, r4, #3
   29e76:	e7a7      	b.n	29dc8 <_free_r+0xec>
   29e78:	f041 0301 	orr.w	r3, r1, #1
   29e7c:	e9cc 0004 	strd	r0, r0, [ip, #16]
   29e80:	e9c0 4402 	strd	r4, r4, [r0, #8]
   29e84:	6043      	str	r3, [r0, #4]
   29e86:	5041      	str	r1, [r0, r1]
   29e88:	e773      	b.n	29d72 <_free_r+0x96>
   29e8a:	1092      	asrs	r2, r2, #2
   29e8c:	2501      	movs	r5, #1
   29e8e:	f8dc 1004 	ldr.w	r1, [ip, #4]
   29e92:	fa05 f202 	lsl.w	r2, r5, r2
   29e96:	430a      	orrs	r2, r1
   29e98:	f8cc 2004 	str.w	r2, [ip, #4]
   29e9c:	e7a4      	b.n	29de8 <_free_r+0x10c>
   29e9e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   29ea2:	d806      	bhi.n	29eb2 <_free_r+0x1d6>
   29ea4:	0bcb      	lsrs	r3, r1, #15
   29ea6:	f103 0478 	add.w	r4, r3, #120	; 0x78
   29eaa:	f103 0277 	add.w	r2, r3, #119	; 0x77
   29eae:	00e3      	lsls	r3, r4, #3
   29eb0:	e78a      	b.n	29dc8 <_free_r+0xec>
   29eb2:	f240 5254 	movw	r2, #1364	; 0x554
   29eb6:	4293      	cmp	r3, r2
   29eb8:	d806      	bhi.n	29ec8 <_free_r+0x1ec>
   29eba:	0c8b      	lsrs	r3, r1, #18
   29ebc:	f103 047d 	add.w	r4, r3, #125	; 0x7d
   29ec0:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   29ec4:	00e3      	lsls	r3, r4, #3
   29ec6:	e77f      	b.n	29dc8 <_free_r+0xec>
   29ec8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   29ecc:	227e      	movs	r2, #126	; 0x7e
   29ece:	e77b      	b.n	29dc8 <_free_r+0xec>
   29ed0:	f041 0301 	orr.w	r3, r1, #1
   29ed4:	6043      	str	r3, [r0, #4]
   29ed6:	6011      	str	r1, [r2, #0]
   29ed8:	e74b      	b.n	29d72 <_free_r+0x96>
   29eda:	bf00      	nop
   29edc:	200208e8 	.word	0x200208e8
   29ee0:	20024284 	.word	0x20024284
   29ee4:	200204dc 	.word	0x200204dc

00029ee8 <__sfvwrite_r>:
   29ee8:	6893      	ldr	r3, [r2, #8]
   29eea:	2b00      	cmp	r3, #0
   29eec:	f000 808d 	beq.w	2a00a <__sfvwrite_r+0x122>
   29ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ef4:	4690      	mov	r8, r2
   29ef6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   29efa:	460c      	mov	r4, r1
   29efc:	b083      	sub	sp, #12
   29efe:	0711      	lsls	r1, r2, #28
   29f00:	4681      	mov	r9, r0
   29f02:	b293      	uxth	r3, r2
   29f04:	d525      	bpl.n	29f52 <__sfvwrite_r+0x6a>
   29f06:	6922      	ldr	r2, [r4, #16]
   29f08:	b31a      	cbz	r2, 29f52 <__sfvwrite_r+0x6a>
   29f0a:	f013 0702 	ands.w	r7, r3, #2
   29f0e:	f8d8 5000 	ldr.w	r5, [r8]
   29f12:	d02d      	beq.n	29f70 <__sfvwrite_r+0x88>
   29f14:	2600      	movs	r6, #0
   29f16:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 2a1d0 <__sfvwrite_r+0x2e8>
   29f1a:	46aa      	mov	sl, r5
   29f1c:	4637      	mov	r7, r6
   29f1e:	455f      	cmp	r7, fp
   29f20:	463b      	mov	r3, r7
   29f22:	4632      	mov	r2, r6
   29f24:	4648      	mov	r0, r9
   29f26:	bf28      	it	cs
   29f28:	465b      	movcs	r3, fp
   29f2a:	2f00      	cmp	r7, #0
   29f2c:	d052      	beq.n	29fd4 <__sfvwrite_r+0xec>
   29f2e:	69e1      	ldr	r1, [r4, #28]
   29f30:	6a65      	ldr	r5, [r4, #36]	; 0x24
   29f32:	47a8      	blx	r5
   29f34:	2800      	cmp	r0, #0
   29f36:	dd5e      	ble.n	29ff6 <__sfvwrite_r+0x10e>
   29f38:	f8d8 3008 	ldr.w	r3, [r8, #8]
   29f3c:	4406      	add	r6, r0
   29f3e:	1a3f      	subs	r7, r7, r0
   29f40:	1a18      	subs	r0, r3, r0
   29f42:	f8c8 0008 	str.w	r0, [r8, #8]
   29f46:	2800      	cmp	r0, #0
   29f48:	d1e9      	bne.n	29f1e <__sfvwrite_r+0x36>
   29f4a:	2000      	movs	r0, #0
   29f4c:	b003      	add	sp, #12
   29f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f52:	4621      	mov	r1, r4
   29f54:	4648      	mov	r0, r9
   29f56:	f7ff fb95 	bl	29684 <__swsetup_r>
   29f5a:	2800      	cmp	r0, #0
   29f5c:	f040 8135 	bne.w	2a1ca <__sfvwrite_r+0x2e2>
   29f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   29f64:	f8d8 5000 	ldr.w	r5, [r8]
   29f68:	b293      	uxth	r3, r2
   29f6a:	f013 0702 	ands.w	r7, r3, #2
   29f6e:	d1d1      	bne.n	29f14 <__sfvwrite_r+0x2c>
   29f70:	f013 0a01 	ands.w	sl, r3, #1
   29f74:	d14b      	bne.n	2a00e <__sfvwrite_r+0x126>
   29f76:	4656      	mov	r6, sl
   29f78:	b346      	cbz	r6, 29fcc <__sfvwrite_r+0xe4>
   29f7a:	059a      	lsls	r2, r3, #22
   29f7c:	f8d4 b008 	ldr.w	fp, [r4, #8]
   29f80:	f140 8090 	bpl.w	2a0a4 <__sfvwrite_r+0x1bc>
   29f84:	45b3      	cmp	fp, r6
   29f86:	465a      	mov	r2, fp
   29f88:	f200 80bc 	bhi.w	2a104 <__sfvwrite_r+0x21c>
   29f8c:	f413 6f90 	tst.w	r3, #1152	; 0x480
   29f90:	f040 80d0 	bne.w	2a134 <__sfvwrite_r+0x24c>
   29f94:	6820      	ldr	r0, [r4, #0]
   29f96:	4651      	mov	r1, sl
   29f98:	9200      	str	r2, [sp, #0]
   29f9a:	f000 fe13 	bl	2abc4 <memmove>
   29f9e:	68a1      	ldr	r1, [r4, #8]
   29fa0:	6823      	ldr	r3, [r4, #0]
   29fa2:	4637      	mov	r7, r6
   29fa4:	9a00      	ldr	r2, [sp, #0]
   29fa6:	eba1 010b 	sub.w	r1, r1, fp
   29faa:	2600      	movs	r6, #0
   29fac:	4413      	add	r3, r2
   29fae:	60a1      	str	r1, [r4, #8]
   29fb0:	6023      	str	r3, [r4, #0]
   29fb2:	f8d8 0008 	ldr.w	r0, [r8, #8]
   29fb6:	44ba      	add	sl, r7
   29fb8:	1bc7      	subs	r7, r0, r7
   29fba:	f8c8 7008 	str.w	r7, [r8, #8]
   29fbe:	2f00      	cmp	r7, #0
   29fc0:	d0c3      	beq.n	29f4a <__sfvwrite_r+0x62>
   29fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29fc6:	b29b      	uxth	r3, r3
   29fc8:	2e00      	cmp	r6, #0
   29fca:	d1d6      	bne.n	29f7a <__sfvwrite_r+0x92>
   29fcc:	e9d5 a600 	ldrd	sl, r6, [r5]
   29fd0:	3508      	adds	r5, #8
   29fd2:	e7d1      	b.n	29f78 <__sfvwrite_r+0x90>
   29fd4:	e9da 6700 	ldrd	r6, r7, [sl]
   29fd8:	f10a 0a08 	add.w	sl, sl, #8
   29fdc:	e79f      	b.n	29f1e <__sfvwrite_r+0x36>
   29fde:	4629      	mov	r1, r5
   29fe0:	465a      	mov	r2, fp
   29fe2:	f000 fdef 	bl	2abc4 <memmove>
   29fe6:	6823      	ldr	r3, [r4, #0]
   29fe8:	4621      	mov	r1, r4
   29fea:	4648      	mov	r0, r9
   29fec:	445b      	add	r3, fp
   29fee:	6023      	str	r3, [r4, #0]
   29ff0:	f7ff fd06 	bl	29a00 <_fflush_r>
   29ff4:	b358      	cbz	r0, 2a04e <__sfvwrite_r+0x166>
   29ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29ffe:	f04f 30ff 	mov.w	r0, #4294967295
   2a002:	81a3      	strh	r3, [r4, #12]
   2a004:	b003      	add	sp, #12
   2a006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a00a:	2000      	movs	r0, #0
   2a00c:	4770      	bx	lr
   2a00e:	463e      	mov	r6, r7
   2a010:	46aa      	mov	sl, r5
   2a012:	4638      	mov	r0, r7
   2a014:	463d      	mov	r5, r7
   2a016:	9700      	str	r7, [sp, #0]
   2a018:	b36e      	cbz	r6, 2a076 <__sfvwrite_r+0x18e>
   2a01a:	2800      	cmp	r0, #0
   2a01c:	d035      	beq.n	2a08a <__sfvwrite_r+0x1a2>
   2a01e:	9a00      	ldr	r2, [sp, #0]
   2a020:	42b2      	cmp	r2, r6
   2a022:	6820      	ldr	r0, [r4, #0]
   2a024:	6921      	ldr	r1, [r4, #16]
   2a026:	6963      	ldr	r3, [r4, #20]
   2a028:	bf28      	it	cs
   2a02a:	4632      	movcs	r2, r6
   2a02c:	68a7      	ldr	r7, [r4, #8]
   2a02e:	4288      	cmp	r0, r1
   2a030:	eb03 0b07 	add.w	fp, r3, r7
   2a034:	d901      	bls.n	2a03a <__sfvwrite_r+0x152>
   2a036:	455a      	cmp	r2, fp
   2a038:	dcd1      	bgt.n	29fde <__sfvwrite_r+0xf6>
   2a03a:	4293      	cmp	r3, r2
   2a03c:	dc6d      	bgt.n	2a11a <__sfvwrite_r+0x232>
   2a03e:	462a      	mov	r2, r5
   2a040:	69e1      	ldr	r1, [r4, #28]
   2a042:	4648      	mov	r0, r9
   2a044:	6a67      	ldr	r7, [r4, #36]	; 0x24
   2a046:	47b8      	blx	r7
   2a048:	f1b0 0b00 	subs.w	fp, r0, #0
   2a04c:	ddd3      	ble.n	29ff6 <__sfvwrite_r+0x10e>
   2a04e:	9b00      	ldr	r3, [sp, #0]
   2a050:	ebb3 030b 	subs.w	r3, r3, fp
   2a054:	9300      	str	r3, [sp, #0]
   2a056:	d059      	beq.n	2a10c <__sfvwrite_r+0x224>
   2a058:	2001      	movs	r0, #1
   2a05a:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2a05e:	445d      	add	r5, fp
   2a060:	eba6 060b 	sub.w	r6, r6, fp
   2a064:	eba2 020b 	sub.w	r2, r2, fp
   2a068:	f8c8 2008 	str.w	r2, [r8, #8]
   2a06c:	2a00      	cmp	r2, #0
   2a06e:	f43f af6c 	beq.w	29f4a <__sfvwrite_r+0x62>
   2a072:	2e00      	cmp	r6, #0
   2a074:	d1d1      	bne.n	2a01a <__sfvwrite_r+0x132>
   2a076:	f10a 0308 	add.w	r3, sl, #8
   2a07a:	f853 6c04 	ldr.w	r6, [r3, #-4]
   2a07e:	469a      	mov	sl, r3
   2a080:	f853 5c08 	ldr.w	r5, [r3, #-8]
   2a084:	3308      	adds	r3, #8
   2a086:	2e00      	cmp	r6, #0
   2a088:	d0f7      	beq.n	2a07a <__sfvwrite_r+0x192>
   2a08a:	4632      	mov	r2, r6
   2a08c:	210a      	movs	r1, #10
   2a08e:	4628      	mov	r0, r5
   2a090:	f7fb ff88 	bl	25fa4 <memchr>
   2a094:	2800      	cmp	r0, #0
   2a096:	f000 808f 	beq.w	2a1b8 <__sfvwrite_r+0x2d0>
   2a09a:	3001      	adds	r0, #1
   2a09c:	1b43      	subs	r3, r0, r5
   2a09e:	461a      	mov	r2, r3
   2a0a0:	9300      	str	r3, [sp, #0]
   2a0a2:	e7bd      	b.n	2a020 <__sfvwrite_r+0x138>
   2a0a4:	6820      	ldr	r0, [r4, #0]
   2a0a6:	6923      	ldr	r3, [r4, #16]
   2a0a8:	4298      	cmp	r0, r3
   2a0aa:	d814      	bhi.n	2a0d6 <__sfvwrite_r+0x1ee>
   2a0ac:	6963      	ldr	r3, [r4, #20]
   2a0ae:	42b3      	cmp	r3, r6
   2a0b0:	d811      	bhi.n	2a0d6 <__sfvwrite_r+0x1ee>
   2a0b2:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   2a0b6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   2a0b8:	4652      	mov	r2, sl
   2a0ba:	69e1      	ldr	r1, [r4, #28]
   2a0bc:	45b4      	cmp	ip, r6
   2a0be:	4648      	mov	r0, r9
   2a0c0:	bf28      	it	cs
   2a0c2:	46b4      	movcs	ip, r6
   2a0c4:	fb9c fcf3 	sdiv	ip, ip, r3
   2a0c8:	fb03 f30c 	mul.w	r3, r3, ip
   2a0cc:	47b8      	blx	r7
   2a0ce:	1e07      	subs	r7, r0, #0
   2a0d0:	dd91      	ble.n	29ff6 <__sfvwrite_r+0x10e>
   2a0d2:	1bf6      	subs	r6, r6, r7
   2a0d4:	e76d      	b.n	29fb2 <__sfvwrite_r+0xca>
   2a0d6:	45b3      	cmp	fp, r6
   2a0d8:	465f      	mov	r7, fp
   2a0da:	4651      	mov	r1, sl
   2a0dc:	bf28      	it	cs
   2a0de:	4637      	movcs	r7, r6
   2a0e0:	463a      	mov	r2, r7
   2a0e2:	f000 fd6f 	bl	2abc4 <memmove>
   2a0e6:	68a3      	ldr	r3, [r4, #8]
   2a0e8:	6822      	ldr	r2, [r4, #0]
   2a0ea:	1bdb      	subs	r3, r3, r7
   2a0ec:	443a      	add	r2, r7
   2a0ee:	60a3      	str	r3, [r4, #8]
   2a0f0:	6022      	str	r2, [r4, #0]
   2a0f2:	2b00      	cmp	r3, #0
   2a0f4:	d1ed      	bne.n	2a0d2 <__sfvwrite_r+0x1ea>
   2a0f6:	4621      	mov	r1, r4
   2a0f8:	4648      	mov	r0, r9
   2a0fa:	f7ff fc81 	bl	29a00 <_fflush_r>
   2a0fe:	2800      	cmp	r0, #0
   2a100:	d0e7      	beq.n	2a0d2 <__sfvwrite_r+0x1ea>
   2a102:	e778      	b.n	29ff6 <__sfvwrite_r+0x10e>
   2a104:	46b3      	mov	fp, r6
   2a106:	6820      	ldr	r0, [r4, #0]
   2a108:	4632      	mov	r2, r6
   2a10a:	e744      	b.n	29f96 <__sfvwrite_r+0xae>
   2a10c:	4621      	mov	r1, r4
   2a10e:	4648      	mov	r0, r9
   2a110:	f7ff fc76 	bl	29a00 <_fflush_r>
   2a114:	2800      	cmp	r0, #0
   2a116:	d0a0      	beq.n	2a05a <__sfvwrite_r+0x172>
   2a118:	e76d      	b.n	29ff6 <__sfvwrite_r+0x10e>
   2a11a:	4629      	mov	r1, r5
   2a11c:	4693      	mov	fp, r2
   2a11e:	9201      	str	r2, [sp, #4]
   2a120:	f000 fd50 	bl	2abc4 <memmove>
   2a124:	68a1      	ldr	r1, [r4, #8]
   2a126:	6823      	ldr	r3, [r4, #0]
   2a128:	9a01      	ldr	r2, [sp, #4]
   2a12a:	1a89      	subs	r1, r1, r2
   2a12c:	441a      	add	r2, r3
   2a12e:	60a1      	str	r1, [r4, #8]
   2a130:	6022      	str	r2, [r4, #0]
   2a132:	e78c      	b.n	2a04e <__sfvwrite_r+0x166>
   2a134:	6822      	ldr	r2, [r4, #0]
   2a136:	6921      	ldr	r1, [r4, #16]
   2a138:	6967      	ldr	r7, [r4, #20]
   2a13a:	eba2 0b01 	sub.w	fp, r2, r1
   2a13e:	eb17 0747 	adds.w	r7, r7, r7, lsl #1
   2a142:	f10b 0001 	add.w	r0, fp, #1
   2a146:	bf48      	it	mi
   2a148:	3701      	addmi	r7, #1
   2a14a:	4430      	add	r0, r6
   2a14c:	107f      	asrs	r7, r7, #1
   2a14e:	42b8      	cmp	r0, r7
   2a150:	463a      	mov	r2, r7
   2a152:	d901      	bls.n	2a158 <__sfvwrite_r+0x270>
   2a154:	4607      	mov	r7, r0
   2a156:	4602      	mov	r2, r0
   2a158:	055b      	lsls	r3, r3, #21
   2a15a:	d51b      	bpl.n	2a194 <__sfvwrite_r+0x2ac>
   2a15c:	4611      	mov	r1, r2
   2a15e:	4648      	mov	r0, r9
   2a160:	f7fb fc52 	bl	25a08 <_malloc_r>
   2a164:	b358      	cbz	r0, 2a1be <__sfvwrite_r+0x2d6>
   2a166:	465a      	mov	r2, fp
   2a168:	6921      	ldr	r1, [r4, #16]
   2a16a:	9000      	str	r0, [sp, #0]
   2a16c:	f7e2 fcee 	bl	cb4c <memcpy>
   2a170:	89a2      	ldrh	r2, [r4, #12]
   2a172:	9b00      	ldr	r3, [sp, #0]
   2a174:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2a178:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2a17c:	81a2      	strh	r2, [r4, #12]
   2a17e:	eba7 020b 	sub.w	r2, r7, fp
   2a182:	eb03 000b 	add.w	r0, r3, fp
   2a186:	6123      	str	r3, [r4, #16]
   2a188:	46b3      	mov	fp, r6
   2a18a:	60a2      	str	r2, [r4, #8]
   2a18c:	4632      	mov	r2, r6
   2a18e:	6020      	str	r0, [r4, #0]
   2a190:	6167      	str	r7, [r4, #20]
   2a192:	e700      	b.n	29f96 <__sfvwrite_r+0xae>
   2a194:	4648      	mov	r0, r9
   2a196:	f7fb ffd5 	bl	26144 <_realloc_r>
   2a19a:	4603      	mov	r3, r0
   2a19c:	2800      	cmp	r0, #0
   2a19e:	d1ee      	bne.n	2a17e <__sfvwrite_r+0x296>
   2a1a0:	6921      	ldr	r1, [r4, #16]
   2a1a2:	4648      	mov	r0, r9
   2a1a4:	f7ff fd9a 	bl	29cdc <_free_r>
   2a1a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a1ac:	220c      	movs	r2, #12
   2a1ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   2a1b2:	f8c9 2000 	str.w	r2, [r9]
   2a1b6:	e720      	b.n	29ffa <__sfvwrite_r+0x112>
   2a1b8:	1c72      	adds	r2, r6, #1
   2a1ba:	9200      	str	r2, [sp, #0]
   2a1bc:	e730      	b.n	2a020 <__sfvwrite_r+0x138>
   2a1be:	220c      	movs	r2, #12
   2a1c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a1c4:	f8c9 2000 	str.w	r2, [r9]
   2a1c8:	e717      	b.n	29ffa <__sfvwrite_r+0x112>
   2a1ca:	f04f 30ff 	mov.w	r0, #4294967295
   2a1ce:	e6bd      	b.n	29f4c <__sfvwrite_r+0x64>
   2a1d0:	7ffffc00 	.word	0x7ffffc00

0002a1d4 <_fwalk_reent>:
   2a1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a1d8:	2600      	movs	r6, #0
   2a1da:	4681      	mov	r9, r0
   2a1dc:	4688      	mov	r8, r1
   2a1de:	f500 7738 	add.w	r7, r0, #736	; 0x2e0
   2a1e2:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
   2a1e6:	3d01      	subs	r5, #1
   2a1e8:	d40f      	bmi.n	2a20a <_fwalk_reent+0x36>
   2a1ea:	89a3      	ldrh	r3, [r4, #12]
   2a1ec:	3d01      	subs	r5, #1
   2a1ee:	2b01      	cmp	r3, #1
   2a1f0:	d907      	bls.n	2a202 <_fwalk_reent+0x2e>
   2a1f2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   2a1f6:	4621      	mov	r1, r4
   2a1f8:	4648      	mov	r0, r9
   2a1fa:	3301      	adds	r3, #1
   2a1fc:	d001      	beq.n	2a202 <_fwalk_reent+0x2e>
   2a1fe:	47c0      	blx	r8
   2a200:	4306      	orrs	r6, r0
   2a202:	1c6b      	adds	r3, r5, #1
   2a204:	f104 0468 	add.w	r4, r4, #104	; 0x68
   2a208:	d1ef      	bne.n	2a1ea <_fwalk_reent+0x16>
   2a20a:	683f      	ldr	r7, [r7, #0]
   2a20c:	2f00      	cmp	r7, #0
   2a20e:	d1e8      	bne.n	2a1e2 <_fwalk_reent+0xe>
   2a210:	4630      	mov	r0, r6
   2a212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a216:	bf00      	nop

0002a218 <rshift>:
   2a218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a21c:	6906      	ldr	r6, [r0, #16]
   2a21e:	ebb6 1f61 	cmp.w	r6, r1, asr #5
   2a222:	dd2d      	ble.n	2a280 <rshift+0x68>
   2a224:	f100 0414 	add.w	r4, r0, #20
   2a228:	ea4f 1c61 	mov.w	ip, r1, asr #5
   2a22c:	f011 051f 	ands.w	r5, r1, #31
   2a230:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   2a234:	eb04 038c 	add.w	r3, r4, ip, lsl #2
   2a238:	d028      	beq.n	2a28c <rshift+0x74>
   2a23a:	3304      	adds	r3, #4
   2a23c:	f854 202c 	ldr.w	r2, [r4, ip, lsl #2]
   2a240:	f1c5 0e20 	rsb	lr, r5, #32
   2a244:	429f      	cmp	r7, r3
   2a246:	fa22 f105 	lsr.w	r1, r2, r5
   2a24a:	d935      	bls.n	2a2b8 <rshift+0xa0>
   2a24c:	46a0      	mov	r8, r4
   2a24e:	681a      	ldr	r2, [r3, #0]
   2a250:	fa02 f20e 	lsl.w	r2, r2, lr
   2a254:	430a      	orrs	r2, r1
   2a256:	f848 2b04 	str.w	r2, [r8], #4
   2a25a:	f853 1b04 	ldr.w	r1, [r3], #4
   2a25e:	429f      	cmp	r7, r3
   2a260:	fa21 f105 	lsr.w	r1, r1, r5
   2a264:	d8f3      	bhi.n	2a24e <rshift+0x36>
   2a266:	eba6 030c 	sub.w	r3, r6, ip
   2a26a:	009b      	lsls	r3, r3, #2
   2a26c:	3b05      	subs	r3, #5
   2a26e:	089b      	lsrs	r3, r3, #2
   2a270:	3301      	adds	r3, #1
   2a272:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
   2a276:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   2a27a:	b1a9      	cbz	r1, 2a2a8 <rshift+0x90>
   2a27c:	3304      	adds	r3, #4
   2a27e:	e013      	b.n	2a2a8 <rshift+0x90>
   2a280:	2300      	movs	r3, #0
   2a282:	6103      	str	r3, [r0, #16]
   2a284:	2300      	movs	r3, #0
   2a286:	6143      	str	r3, [r0, #20]
   2a288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a28c:	429f      	cmp	r7, r3
   2a28e:	d9f7      	bls.n	2a280 <rshift+0x68>
   2a290:	f100 0210 	add.w	r2, r0, #16
   2a294:	f853 1b04 	ldr.w	r1, [r3], #4
   2a298:	429f      	cmp	r7, r3
   2a29a:	f842 1f04 	str.w	r1, [r2, #4]!
   2a29e:	d8f9      	bhi.n	2a294 <rshift+0x7c>
   2a2a0:	eba6 030c 	sub.w	r3, r6, ip
   2a2a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   2a2a8:	1b1a      	subs	r2, r3, r4
   2a2aa:	42a3      	cmp	r3, r4
   2a2ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
   2a2b0:	6102      	str	r2, [r0, #16]
   2a2b2:	d0e7      	beq.n	2a284 <rshift+0x6c>
   2a2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a2b8:	6141      	str	r1, [r0, #20]
   2a2ba:	2900      	cmp	r1, #0
   2a2bc:	d0e0      	beq.n	2a280 <rshift+0x68>
   2a2be:	4623      	mov	r3, r4
   2a2c0:	e7dc      	b.n	2a27c <rshift+0x64>
   2a2c2:	bf00      	nop

0002a2c4 <__gethex>:
   2a2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a2c8:	4cc2      	ldr	r4, [pc, #776]	; (2a5d4 <__gethex+0x310>)
   2a2ca:	4689      	mov	r9, r1
   2a2cc:	6824      	ldr	r4, [r4, #0]
   2a2ce:	ed2d 8b02 	vpush	{d8}
   2a2d2:	b08b      	sub	sp, #44	; 0x2c
   2a2d4:	ee08 0a10 	vmov	s16, r0
   2a2d8:	4620      	mov	r0, r4
   2a2da:	9202      	str	r2, [sp, #8]
   2a2dc:	9307      	str	r3, [sp, #28]
   2a2de:	9404      	str	r4, [sp, #16]
   2a2e0:	f7fc fadc 	bl	2689c <strlen>
   2a2e4:	f8d9 5000 	ldr.w	r5, [r9]
   2a2e8:	1823      	adds	r3, r4, r0
   2a2ea:	4602      	mov	r2, r0
   2a2ec:	78a9      	ldrb	r1, [r5, #2]
   2a2ee:	f813 bc01 	ldrb.w	fp, [r3, #-1]
   2a2f2:	2930      	cmp	r1, #48	; 0x30
   2a2f4:	f040 81ef 	bne.w	2a6d6 <__gethex+0x412>
   2a2f8:	f06f 0001 	mvn.w	r0, #1
   2a2fc:	1ceb      	adds	r3, r5, #3
   2a2fe:	1b40      	subs	r0, r0, r5
   2a300:	eb00 0a03 	add.w	sl, r0, r3
   2a304:	461d      	mov	r5, r3
   2a306:	f813 1b01 	ldrb.w	r1, [r3], #1
   2a30a:	2930      	cmp	r1, #48	; 0x30
   2a30c:	d0f8      	beq.n	2a300 <__gethex+0x3c>
   2a30e:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 2a5d8 <__gethex+0x314>
   2a312:	f818 3001 	ldrb.w	r3, [r8, r1]
   2a316:	2b00      	cmp	r3, #0
   2a318:	f000 80da 	beq.w	2a4d0 <__gethex+0x20c>
   2a31c:	782b      	ldrb	r3, [r5, #0]
   2a31e:	2700      	movs	r7, #0
   2a320:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a324:	463c      	mov	r4, r7
   2a326:	462e      	mov	r6, r5
   2a328:	b12b      	cbz	r3, 2a336 <__gethex+0x72>
   2a32a:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   2a32e:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a332:	2b00      	cmp	r3, #0
   2a334:	d1f9      	bne.n	2a32a <__gethex+0x66>
   2a336:	9904      	ldr	r1, [sp, #16]
   2a338:	4630      	mov	r0, r6
   2a33a:	9203      	str	r2, [sp, #12]
   2a33c:	f7fc fadc 	bl	268f8 <strncmp>
   2a340:	9a03      	ldr	r2, [sp, #12]
   2a342:	9001      	str	r0, [sp, #4]
   2a344:	2800      	cmp	r0, #0
   2a346:	f000 8091 	beq.w	2a46c <__gethex+0x1a8>
   2a34a:	2c00      	cmp	r4, #0
   2a34c:	f040 8091 	bne.w	2a472 <__gethex+0x1ae>
   2a350:	7833      	ldrb	r3, [r6, #0]
   2a352:	9401      	str	r4, [sp, #4]
   2a354:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2a358:	4634      	mov	r4, r6
   2a35a:	2b50      	cmp	r3, #80	; 0x50
   2a35c:	f000 8093 	beq.w	2a486 <__gethex+0x1c2>
   2a360:	f8c9 6000 	str.w	r6, [r9]
   2a364:	2f00      	cmp	r7, #0
   2a366:	f040 80a2 	bne.w	2a4ae <__gethex+0x1ea>
   2a36a:	1b63      	subs	r3, r4, r5
   2a36c:	4639      	mov	r1, r7
   2a36e:	3b01      	subs	r3, #1
   2a370:	2b07      	cmp	r3, #7
   2a372:	dd03      	ble.n	2a37c <__gethex+0xb8>
   2a374:	105b      	asrs	r3, r3, #1
   2a376:	3101      	adds	r1, #1
   2a378:	2b07      	cmp	r3, #7
   2a37a:	dcfb      	bgt.n	2a374 <__gethex+0xb0>
   2a37c:	ee18 0a10 	vmov	r0, s16
   2a380:	9205      	str	r2, [sp, #20]
   2a382:	f000 fc89 	bl	2ac98 <_Balloc>
   2a386:	42a5      	cmp	r5, r4
   2a388:	f100 0614 	add.w	r6, r0, #20
   2a38c:	9003      	str	r0, [sp, #12]
   2a38e:	9606      	str	r6, [sp, #24]
   2a390:	f080 81ca 	bcs.w	2a728 <__gethex+0x464>
   2a394:	9a05      	ldr	r2, [sp, #20]
   2a396:	2700      	movs	r7, #0
   2a398:	f1c2 0301 	rsb	r3, r2, #1
   2a39c:	46b9      	mov	r9, r7
   2a39e:	9305      	str	r3, [sp, #20]
   2a3a0:	e011      	b.n	2a3c6 <__gethex+0x102>
   2a3a2:	2f20      	cmp	r7, #32
   2a3a4:	f000 808e 	beq.w	2a4c4 <__gethex+0x200>
   2a3a8:	4639      	mov	r1, r7
   2a3aa:	3704      	adds	r7, #4
   2a3ac:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   2a3b0:	4654      	mov	r4, sl
   2a3b2:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a3b6:	42ac      	cmp	r4, r5
   2a3b8:	f003 030f 	and.w	r3, r3, #15
   2a3bc:	fa03 f301 	lsl.w	r3, r3, r1
   2a3c0:	ea49 0903 	orr.w	r9, r9, r3
   2a3c4:	d916      	bls.n	2a3f4 <__gethex+0x130>
   2a3c6:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   2a3ca:	f104 3aff 	add.w	sl, r4, #4294967295
   2a3ce:	455b      	cmp	r3, fp
   2a3d0:	d1e7      	bne.n	2a3a2 <__gethex+0xde>
   2a3d2:	9b05      	ldr	r3, [sp, #20]
   2a3d4:	4453      	add	r3, sl
   2a3d6:	42ab      	cmp	r3, r5
   2a3d8:	d3e3      	bcc.n	2a3a2 <__gethex+0xde>
   2a3da:	4618      	mov	r0, r3
   2a3dc:	9904      	ldr	r1, [sp, #16]
   2a3de:	9209      	str	r2, [sp, #36]	; 0x24
   2a3e0:	9308      	str	r3, [sp, #32]
   2a3e2:	f7fc fa89 	bl	268f8 <strncmp>
   2a3e6:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   2a3ea:	2800      	cmp	r0, #0
   2a3ec:	d1d9      	bne.n	2a3a2 <__gethex+0xde>
   2a3ee:	461c      	mov	r4, r3
   2a3f0:	42ac      	cmp	r4, r5
   2a3f2:	d8e8      	bhi.n	2a3c6 <__gethex+0x102>
   2a3f4:	9b06      	ldr	r3, [sp, #24]
   2a3f6:	4648      	mov	r0, r9
   2a3f8:	f846 9b04 	str.w	r9, [r6], #4
   2a3fc:	1af6      	subs	r6, r6, r3
   2a3fe:	9b03      	ldr	r3, [sp, #12]
   2a400:	10b6      	asrs	r6, r6, #2
   2a402:	611e      	str	r6, [r3, #16]
   2a404:	0176      	lsls	r6, r6, #5
   2a406:	f000 fd09 	bl	2ae1c <__hi0bits>
   2a40a:	9b02      	ldr	r3, [sp, #8]
   2a40c:	1a30      	subs	r0, r6, r0
   2a40e:	681c      	ldr	r4, [r3, #0]
   2a410:	42a0      	cmp	r0, r4
   2a412:	f300 80be 	bgt.w	2a592 <__gethex+0x2ce>
   2a416:	f2c0 813d 	blt.w	2a694 <__gethex+0x3d0>
   2a41a:	2700      	movs	r7, #0
   2a41c:	9b02      	ldr	r3, [sp, #8]
   2a41e:	9a01      	ldr	r2, [sp, #4]
   2a420:	689b      	ldr	r3, [r3, #8]
   2a422:	4293      	cmp	r3, r2
   2a424:	f2c0 8176 	blt.w	2a714 <__gethex+0x450>
   2a428:	9802      	ldr	r0, [sp, #8]
   2a42a:	9a01      	ldr	r2, [sp, #4]
   2a42c:	6843      	ldr	r3, [r0, #4]
   2a42e:	4293      	cmp	r3, r2
   2a430:	dd6d      	ble.n	2a50e <__gethex+0x24a>
   2a432:	1a9d      	subs	r5, r3, r2
   2a434:	42ac      	cmp	r4, r5
   2a436:	f300 80d1 	bgt.w	2a5dc <__gethex+0x318>
   2a43a:	68c2      	ldr	r2, [r0, #12]
   2a43c:	2a02      	cmp	r2, #2
   2a43e:	f000 818c 	beq.w	2a75a <__gethex+0x496>
   2a442:	2a03      	cmp	r2, #3
   2a444:	f000 81a7 	beq.w	2a796 <__gethex+0x4d2>
   2a448:	2a01      	cmp	r2, #1
   2a44a:	f000 8195 	beq.w	2a778 <__gethex+0x4b4>
   2a44e:	2550      	movs	r5, #80	; 0x50
   2a450:	ee18 0a10 	vmov	r0, s16
   2a454:	9903      	ldr	r1, [sp, #12]
   2a456:	f000 fc45 	bl	2ace4 <_Bfree>
   2a45a:	2300      	movs	r3, #0
   2a45c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2a45e:	4628      	mov	r0, r5
   2a460:	6013      	str	r3, [r2, #0]
   2a462:	b00b      	add	sp, #44	; 0x2c
   2a464:	ecbd 8b02 	vpop	{d8}
   2a468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a46c:	2c00      	cmp	r4, #0
   2a46e:	f000 8120 	beq.w	2a6b2 <__gethex+0x3ee>
   2a472:	7833      	ldrb	r3, [r6, #0]
   2a474:	1ba4      	subs	r4, r4, r6
   2a476:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2a47a:	00a1      	lsls	r1, r4, #2
   2a47c:	4634      	mov	r4, r6
   2a47e:	2b50      	cmp	r3, #80	; 0x50
   2a480:	9101      	str	r1, [sp, #4]
   2a482:	f47f af6d 	bne.w	2a360 <__gethex+0x9c>
   2a486:	7863      	ldrb	r3, [r4, #1]
   2a488:	2b2b      	cmp	r3, #43	; 0x2b
   2a48a:	f000 8100 	beq.w	2a68e <__gethex+0x3ca>
   2a48e:	2b2d      	cmp	r3, #45	; 0x2d
   2a490:	d05a      	beq.n	2a548 <__gethex+0x284>
   2a492:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a496:	1c66      	adds	r6, r4, #1
   2a498:	f04f 0c00 	mov.w	ip, #0
   2a49c:	1e59      	subs	r1, r3, #1
   2a49e:	2918      	cmp	r1, #24
   2a4a0:	d95b      	bls.n	2a55a <__gethex+0x296>
   2a4a2:	4626      	mov	r6, r4
   2a4a4:	f8c9 6000 	str.w	r6, [r9]
   2a4a8:	2f00      	cmp	r7, #0
   2a4aa:	f43f af5e 	beq.w	2a36a <__gethex+0xa6>
   2a4ae:	f1ba 0f00 	cmp.w	sl, #0
   2a4b2:	bf14      	ite	ne
   2a4b4:	2500      	movne	r5, #0
   2a4b6:	2506      	moveq	r5, #6
   2a4b8:	4628      	mov	r0, r5
   2a4ba:	b00b      	add	sp, #44	; 0x2c
   2a4bc:	ecbd 8b02 	vpop	{d8}
   2a4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a4c4:	2100      	movs	r1, #0
   2a4c6:	f846 9b04 	str.w	r9, [r6], #4
   2a4ca:	2704      	movs	r7, #4
   2a4cc:	4689      	mov	r9, r1
   2a4ce:	e76d      	b.n	2a3ac <__gethex+0xe8>
   2a4d0:	9904      	ldr	r1, [sp, #16]
   2a4d2:	4628      	mov	r0, r5
   2a4d4:	9201      	str	r2, [sp, #4]
   2a4d6:	f7fc fa0f 	bl	268f8 <strncmp>
   2a4da:	9a01      	ldr	r2, [sp, #4]
   2a4dc:	2800      	cmp	r0, #0
   2a4de:	f040 809b 	bne.w	2a618 <__gethex+0x354>
   2a4e2:	5ca9      	ldrb	r1, [r5, r2]
   2a4e4:	18ac      	adds	r4, r5, r2
   2a4e6:	f818 3001 	ldrb.w	r3, [r8, r1]
   2a4ea:	2b00      	cmp	r3, #0
   2a4ec:	f000 8096 	beq.w	2a61c <__gethex+0x358>
   2a4f0:	2930      	cmp	r1, #48	; 0x30
   2a4f2:	4625      	mov	r5, r4
   2a4f4:	d105      	bne.n	2a502 <__gethex+0x23e>
   2a4f6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   2a4fa:	2b30      	cmp	r3, #48	; 0x30
   2a4fc:	d0fb      	beq.n	2a4f6 <__gethex+0x232>
   2a4fe:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a502:	fab3 f783 	clz	r7, r3
   2a506:	f04f 0a01 	mov.w	sl, #1
   2a50a:	097f      	lsrs	r7, r7, #5
   2a50c:	e70b      	b.n	2a326 <__gethex+0x62>
   2a50e:	2501      	movs	r5, #1
   2a510:	b167      	cbz	r7, 2a52c <__gethex+0x268>
   2a512:	9b02      	ldr	r3, [sp, #8]
   2a514:	68db      	ldr	r3, [r3, #12]
   2a516:	2b02      	cmp	r3, #2
   2a518:	f000 8088 	beq.w	2a62c <__gethex+0x368>
   2a51c:	2b03      	cmp	r3, #3
   2a51e:	f000 8089 	beq.w	2a634 <__gethex+0x370>
   2a522:	2b01      	cmp	r3, #1
   2a524:	f000 80aa 	beq.w	2a67c <__gethex+0x3b8>
   2a528:	f045 0510 	orr.w	r5, r5, #16
   2a52c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2a52e:	4628      	mov	r0, r5
   2a530:	461a      	mov	r2, r3
   2a532:	9b03      	ldr	r3, [sp, #12]
   2a534:	6013      	str	r3, [r2, #0]
   2a536:	9b07      	ldr	r3, [sp, #28]
   2a538:	461a      	mov	r2, r3
   2a53a:	9b01      	ldr	r3, [sp, #4]
   2a53c:	6013      	str	r3, [r2, #0]
   2a53e:	b00b      	add	sp, #44	; 0x2c
   2a540:	ecbd 8b02 	vpop	{d8}
   2a544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a548:	f04f 0c01 	mov.w	ip, #1
   2a54c:	78a3      	ldrb	r3, [r4, #2]
   2a54e:	1ca6      	adds	r6, r4, #2
   2a550:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a554:	1e59      	subs	r1, r3, #1
   2a556:	2918      	cmp	r1, #24
   2a558:	d8a3      	bhi.n	2a4a2 <__gethex+0x1de>
   2a55a:	7871      	ldrb	r1, [r6, #1]
   2a55c:	3b10      	subs	r3, #16
   2a55e:	3601      	adds	r6, #1
   2a560:	f818 1001 	ldrb.w	r1, [r8, r1]
   2a564:	1e48      	subs	r0, r1, #1
   2a566:	2818      	cmp	r0, #24
   2a568:	d80b      	bhi.n	2a582 <__gethex+0x2be>
   2a56a:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   2a56e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   2a572:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   2a576:	f818 1000 	ldrb.w	r1, [r8, r0]
   2a57a:	1e48      	subs	r0, r1, #1
   2a57c:	3b10      	subs	r3, #16
   2a57e:	2818      	cmp	r0, #24
   2a580:	d9f3      	bls.n	2a56a <__gethex+0x2a6>
   2a582:	f1bc 0f00 	cmp.w	ip, #0
   2a586:	d000      	beq.n	2a58a <__gethex+0x2c6>
   2a588:	425b      	negs	r3, r3
   2a58a:	9901      	ldr	r1, [sp, #4]
   2a58c:	4419      	add	r1, r3
   2a58e:	9101      	str	r1, [sp, #4]
   2a590:	e6e6      	b.n	2a360 <__gethex+0x9c>
   2a592:	1b06      	subs	r6, r0, r4
   2a594:	f8dd 800c 	ldr.w	r8, [sp, #12]
   2a598:	4631      	mov	r1, r6
   2a59a:	4640      	mov	r0, r8
   2a59c:	f000 fff6 	bl	2b58c <__any_on>
   2a5a0:	4607      	mov	r7, r0
   2a5a2:	b178      	cbz	r0, 2a5c4 <__gethex+0x300>
   2a5a4:	1e72      	subs	r2, r6, #1
   2a5a6:	2701      	movs	r7, #1
   2a5a8:	9d06      	ldr	r5, [sp, #24]
   2a5aa:	1151      	asrs	r1, r2, #5
   2a5ac:	f002 031f 	and.w	r3, r2, #31
   2a5b0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
   2a5b4:	fa07 f303 	lsl.w	r3, r7, r3
   2a5b8:	420b      	tst	r3, r1
   2a5ba:	d003      	beq.n	2a5c4 <__gethex+0x300>
   2a5bc:	42ba      	cmp	r2, r7
   2a5be:	f300 80bf 	bgt.w	2a740 <__gethex+0x47c>
   2a5c2:	2702      	movs	r7, #2
   2a5c4:	9b01      	ldr	r3, [sp, #4]
   2a5c6:	4631      	mov	r1, r6
   2a5c8:	9803      	ldr	r0, [sp, #12]
   2a5ca:	4433      	add	r3, r6
   2a5cc:	9301      	str	r3, [sp, #4]
   2a5ce:	f7ff fe23 	bl	2a218 <rshift>
   2a5d2:	e723      	b.n	2a41c <__gethex+0x158>
   2a5d4:	0002f8d8 	.word	0x0002f8d8
   2a5d8:	0002f7d4 	.word	0x0002f7d4
   2a5dc:	1e6e      	subs	r6, r5, #1
   2a5de:	2f00      	cmp	r7, #0
   2a5e0:	f040 80a6 	bne.w	2a730 <__gethex+0x46c>
   2a5e4:	2e00      	cmp	r6, #0
   2a5e6:	f040 80a5 	bne.w	2a734 <__gethex+0x470>
   2a5ea:	2301      	movs	r3, #1
   2a5ec:	9906      	ldr	r1, [sp, #24]
   2a5ee:	1172      	asrs	r2, r6, #5
   2a5f0:	f006 061f 	and.w	r6, r6, #31
   2a5f4:	9803      	ldr	r0, [sp, #12]
   2a5f6:	1b64      	subs	r4, r4, r5
   2a5f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   2a5fc:	fa03 f606 	lsl.w	r6, r3, r6
   2a600:	4629      	mov	r1, r5
   2a602:	2502      	movs	r5, #2
   2a604:	4216      	tst	r6, r2
   2a606:	bf18      	it	ne
   2a608:	f047 0702 	orrne.w	r7, r7, #2
   2a60c:	f7ff fe04 	bl	2a218 <rshift>
   2a610:	9b02      	ldr	r3, [sp, #8]
   2a612:	685b      	ldr	r3, [r3, #4]
   2a614:	9301      	str	r3, [sp, #4]
   2a616:	e77b      	b.n	2a510 <__gethex+0x24c>
   2a618:	7829      	ldrb	r1, [r5, #0]
   2a61a:	462c      	mov	r4, r5
   2a61c:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   2a620:	2950      	cmp	r1, #80	; 0x50
   2a622:	f000 8096 	beq.w	2a752 <__gethex+0x48e>
   2a626:	f8c9 4000 	str.w	r4, [r9]
   2a62a:	e740      	b.n	2a4ae <__gethex+0x1ea>
   2a62c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2a62e:	f1c3 0301 	rsb	r3, r3, #1
   2a632:	9317      	str	r3, [sp, #92]	; 0x5c
   2a634:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2a636:	2b00      	cmp	r3, #0
   2a638:	f43f af76 	beq.w	2a528 <__gethex+0x264>
   2a63c:	9b03      	ldr	r3, [sp, #12]
   2a63e:	2700      	movs	r7, #0
   2a640:	f8dd c018 	ldr.w	ip, [sp, #24]
   2a644:	691e      	ldr	r6, [r3, #16]
   2a646:	4663      	mov	r3, ip
   2a648:	eb0c 0086 	add.w	r0, ip, r6, lsl #2
   2a64c:	ea4f 0986 	mov.w	r9, r6, lsl #2
   2a650:	e003      	b.n	2a65a <__gethex+0x396>
   2a652:	4298      	cmp	r0, r3
   2a654:	f843 7c04 	str.w	r7, [r3, #-4]
   2a658:	d941      	bls.n	2a6de <__gethex+0x41a>
   2a65a:	4619      	mov	r1, r3
   2a65c:	f853 2b04 	ldr.w	r2, [r3], #4
   2a660:	f1b2 3fff 	cmp.w	r2, #4294967295
   2a664:	d0f5      	beq.n	2a652 <__gethex+0x38e>
   2a666:	3201      	adds	r2, #1
   2a668:	2d02      	cmp	r5, #2
   2a66a:	600a      	str	r2, [r1, #0]
   2a66c:	f000 8098 	beq.w	2a7a0 <__gethex+0x4dc>
   2a670:	f014 041f 	ands.w	r4, r4, #31
   2a674:	f040 80b7 	bne.w	2a7e6 <__gethex+0x522>
   2a678:	2521      	movs	r5, #33	; 0x21
   2a67a:	e757      	b.n	2a52c <__gethex+0x268>
   2a67c:	07ba      	lsls	r2, r7, #30
   2a67e:	f57f af53 	bpl.w	2a528 <__gethex+0x264>
   2a682:	9b06      	ldr	r3, [sp, #24]
   2a684:	681b      	ldr	r3, [r3, #0]
   2a686:	431f      	orrs	r7, r3
   2a688:	07fb      	lsls	r3, r7, #31
   2a68a:	d4d7      	bmi.n	2a63c <__gethex+0x378>
   2a68c:	e74c      	b.n	2a528 <__gethex+0x264>
   2a68e:	f04f 0c00 	mov.w	ip, #0
   2a692:	e75b      	b.n	2a54c <__gethex+0x288>
   2a694:	1a22      	subs	r2, r4, r0
   2a696:	9b01      	ldr	r3, [sp, #4]
   2a698:	9903      	ldr	r1, [sp, #12]
   2a69a:	ee18 0a10 	vmov	r0, s16
   2a69e:	1a9b      	subs	r3, r3, r2
   2a6a0:	2700      	movs	r7, #0
   2a6a2:	9301      	str	r3, [sp, #4]
   2a6a4:	f000 fd08 	bl	2b0b8 <__lshift>
   2a6a8:	4603      	mov	r3, r0
   2a6aa:	9003      	str	r0, [sp, #12]
   2a6ac:	3314      	adds	r3, #20
   2a6ae:	9306      	str	r3, [sp, #24]
   2a6b0:	e6b4      	b.n	2a41c <__gethex+0x158>
   2a6b2:	5cb3      	ldrb	r3, [r6, r2]
   2a6b4:	18b0      	adds	r0, r6, r2
   2a6b6:	f818 1003 	ldrb.w	r1, [r8, r3]
   2a6ba:	4606      	mov	r6, r0
   2a6bc:	2900      	cmp	r1, #0
   2a6be:	f43f ae49 	beq.w	2a354 <__gethex+0x90>
   2a6c2:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   2a6c6:	f818 1003 	ldrb.w	r1, [r8, r3]
   2a6ca:	2900      	cmp	r1, #0
   2a6cc:	d1f9      	bne.n	2a6c2 <__gethex+0x3fe>
   2a6ce:	1b80      	subs	r0, r0, r6
   2a6d0:	0081      	lsls	r1, r0, #2
   2a6d2:	9101      	str	r1, [sp, #4]
   2a6d4:	e63e      	b.n	2a354 <__gethex+0x90>
   2a6d6:	3502      	adds	r5, #2
   2a6d8:	f04f 0a00 	mov.w	sl, #0
   2a6dc:	e617      	b.n	2a30e <__gethex+0x4a>
   2a6de:	9b03      	ldr	r3, [sp, #12]
   2a6e0:	689b      	ldr	r3, [r3, #8]
   2a6e2:	429e      	cmp	r6, r3
   2a6e4:	da63      	bge.n	2a7ae <__gethex+0x4ea>
   2a6e6:	4633      	mov	r3, r6
   2a6e8:	9803      	ldr	r0, [sp, #12]
   2a6ea:	1c5a      	adds	r2, r3, #1
   2a6ec:	2101      	movs	r1, #1
   2a6ee:	2d02      	cmp	r5, #2
   2a6f0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2a6f4:	6102      	str	r2, [r0, #16]
   2a6f6:	6159      	str	r1, [r3, #20]
   2a6f8:	d052      	beq.n	2a7a0 <__gethex+0x4dc>
   2a6fa:	4296      	cmp	r6, r2
   2a6fc:	dab8      	bge.n	2a670 <__gethex+0x3ac>
   2a6fe:	9c01      	ldr	r4, [sp, #4]
   2a700:	2101      	movs	r1, #1
   2a702:	9803      	ldr	r0, [sp, #12]
   2a704:	440c      	add	r4, r1
   2a706:	9401      	str	r4, [sp, #4]
   2a708:	f7ff fd86 	bl	2a218 <rshift>
   2a70c:	9b02      	ldr	r3, [sp, #8]
   2a70e:	689b      	ldr	r3, [r3, #8]
   2a710:	42a3      	cmp	r3, r4
   2a712:	dab1      	bge.n	2a678 <__gethex+0x3b4>
   2a714:	9903      	ldr	r1, [sp, #12]
   2a716:	ee18 0a10 	vmov	r0, s16
   2a71a:	f000 fae3 	bl	2ace4 <_Bfree>
   2a71e:	2300      	movs	r3, #0
   2a720:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2a722:	25a3      	movs	r5, #163	; 0xa3
   2a724:	6013      	str	r3, [r2, #0]
   2a726:	e6c7      	b.n	2a4b8 <__gethex+0x1f4>
   2a728:	9e06      	ldr	r6, [sp, #24]
   2a72a:	f04f 0900 	mov.w	r9, #0
   2a72e:	e661      	b.n	2a3f4 <__gethex+0x130>
   2a730:	2701      	movs	r7, #1
   2a732:	e75a      	b.n	2a5ea <__gethex+0x326>
   2a734:	4631      	mov	r1, r6
   2a736:	9803      	ldr	r0, [sp, #12]
   2a738:	f000 ff28 	bl	2b58c <__any_on>
   2a73c:	4607      	mov	r7, r0
   2a73e:	e754      	b.n	2a5ea <__gethex+0x326>
   2a740:	1eb1      	subs	r1, r6, #2
   2a742:	4640      	mov	r0, r8
   2a744:	f000 ff22 	bl	2b58c <__any_on>
   2a748:	2800      	cmp	r0, #0
   2a74a:	f43f af3a 	beq.w	2a5c2 <__gethex+0x2fe>
   2a74e:	2703      	movs	r7, #3
   2a750:	e738      	b.n	2a5c4 <__gethex+0x300>
   2a752:	2300      	movs	r3, #0
   2a754:	2701      	movs	r7, #1
   2a756:	9301      	str	r3, [sp, #4]
   2a758:	e695      	b.n	2a486 <__gethex+0x1c2>
   2a75a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2a75c:	2a00      	cmp	r2, #0
   2a75e:	f47f ae76 	bne.w	2a44e <__gethex+0x18a>
   2a762:	9907      	ldr	r1, [sp, #28]
   2a764:	2201      	movs	r2, #1
   2a766:	2562      	movs	r5, #98	; 0x62
   2a768:	600b      	str	r3, [r1, #0]
   2a76a:	9b03      	ldr	r3, [sp, #12]
   2a76c:	9906      	ldr	r1, [sp, #24]
   2a76e:	611a      	str	r2, [r3, #16]
   2a770:	600a      	str	r2, [r1, #0]
   2a772:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2a774:	6013      	str	r3, [r2, #0]
   2a776:	e69f      	b.n	2a4b8 <__gethex+0x1f4>
   2a778:	42ac      	cmp	r4, r5
   2a77a:	f47f ae68 	bne.w	2a44e <__gethex+0x18a>
   2a77e:	2c01      	cmp	r4, #1
   2a780:	d0ef      	beq.n	2a762 <__gethex+0x49e>
   2a782:	1e61      	subs	r1, r4, #1
   2a784:	9803      	ldr	r0, [sp, #12]
   2a786:	f000 ff01 	bl	2b58c <__any_on>
   2a78a:	2800      	cmp	r0, #0
   2a78c:	f43f ae5f 	beq.w	2a44e <__gethex+0x18a>
   2a790:	9b02      	ldr	r3, [sp, #8]
   2a792:	685b      	ldr	r3, [r3, #4]
   2a794:	e7e5      	b.n	2a762 <__gethex+0x49e>
   2a796:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2a798:	2a00      	cmp	r2, #0
   2a79a:	f43f ae58 	beq.w	2a44e <__gethex+0x18a>
   2a79e:	e7e0      	b.n	2a762 <__gethex+0x49e>
   2a7a0:	9b02      	ldr	r3, [sp, #8]
   2a7a2:	681b      	ldr	r3, [r3, #0]
   2a7a4:	3b01      	subs	r3, #1
   2a7a6:	42a3      	cmp	r3, r4
   2a7a8:	d029      	beq.n	2a7fe <__gethex+0x53a>
   2a7aa:	2522      	movs	r5, #34	; 0x22
   2a7ac:	e6be      	b.n	2a52c <__gethex+0x268>
   2a7ae:	9f03      	ldr	r7, [sp, #12]
   2a7b0:	ee18 0a10 	vmov	r0, s16
   2a7b4:	6879      	ldr	r1, [r7, #4]
   2a7b6:	3101      	adds	r1, #1
   2a7b8:	f000 fa6e 	bl	2ac98 <_Balloc>
   2a7bc:	693b      	ldr	r3, [r7, #16]
   2a7be:	4680      	mov	r8, r0
   2a7c0:	f107 010c 	add.w	r1, r7, #12
   2a7c4:	3302      	adds	r3, #2
   2a7c6:	300c      	adds	r0, #12
   2a7c8:	009a      	lsls	r2, r3, #2
   2a7ca:	f7e2 f9bf 	bl	cb4c <memcpy>
   2a7ce:	4639      	mov	r1, r7
   2a7d0:	ee18 0a10 	vmov	r0, s16
   2a7d4:	f8cd 800c 	str.w	r8, [sp, #12]
   2a7d8:	f000 fa84 	bl	2ace4 <_Bfree>
   2a7dc:	f108 0c14 	add.w	ip, r8, #20
   2a7e0:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2a7e4:	e780      	b.n	2a6e8 <__gethex+0x424>
   2a7e6:	eb0c 0709 	add.w	r7, ip, r9
   2a7ea:	f1c4 0420 	rsb	r4, r4, #32
   2a7ee:	f857 0c04 	ldr.w	r0, [r7, #-4]
   2a7f2:	f000 fb13 	bl	2ae1c <__hi0bits>
   2a7f6:	42a0      	cmp	r0, r4
   2a7f8:	f6bf af3e 	bge.w	2a678 <__gethex+0x3b4>
   2a7fc:	e77f      	b.n	2a6fe <__gethex+0x43a>
   2a7fe:	1162      	asrs	r2, r4, #5
   2a800:	2301      	movs	r3, #1
   2a802:	f004 041f 	and.w	r4, r4, #31
   2a806:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
   2a80a:	40a3      	lsls	r3, r4
   2a80c:	4213      	tst	r3, r2
   2a80e:	bf0c      	ite	eq
   2a810:	2522      	moveq	r5, #34	; 0x22
   2a812:	2521      	movne	r5, #33	; 0x21
   2a814:	e68a      	b.n	2a52c <__gethex+0x268>
   2a816:	bf00      	nop

0002a818 <__match>:
   2a818:	b470      	push	{r4, r5, r6}
   2a81a:	4606      	mov	r6, r0
   2a81c:	6804      	ldr	r4, [r0, #0]
   2a81e:	e008      	b.n	2a832 <__match+0x1a>
   2a820:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2a824:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
   2a828:	2d19      	cmp	r5, #25
   2a82a:	bf98      	it	ls
   2a82c:	3320      	addls	r3, #32
   2a82e:	4293      	cmp	r3, r2
   2a830:	d108      	bne.n	2a844 <__match+0x2c>
   2a832:	f811 2b01 	ldrb.w	r2, [r1], #1
   2a836:	2a00      	cmp	r2, #0
   2a838:	d1f2      	bne.n	2a820 <__match+0x8>
   2a83a:	3401      	adds	r4, #1
   2a83c:	2001      	movs	r0, #1
   2a83e:	6034      	str	r4, [r6, #0]
   2a840:	bc70      	pop	{r4, r5, r6}
   2a842:	4770      	bx	lr
   2a844:	2000      	movs	r0, #0
   2a846:	bc70      	pop	{r4, r5, r6}
   2a848:	4770      	bx	lr
   2a84a:	bf00      	nop

0002a84c <__hexnan>:
   2a84c:	6809      	ldr	r1, [r1, #0]
   2a84e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a852:	114b      	asrs	r3, r1, #5
   2a854:	b085      	sub	sp, #20
   2a856:	f011 011f 	ands.w	r1, r1, #31
   2a85a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2a85e:	9002      	str	r0, [sp, #8]
   2a860:	9103      	str	r1, [sp, #12]
   2a862:	f040 809c 	bne.w	2a99e <__hexnan+0x152>
   2a866:	f1a3 0c04 	sub.w	ip, r3, #4
   2a86a:	9301      	str	r3, [sp, #4]
   2a86c:	9902      	ldr	r1, [sp, #8]
   2a86e:	2300      	movs	r3, #0
   2a870:	9801      	ldr	r0, [sp, #4]
   2a872:	6809      	ldr	r1, [r1, #0]
   2a874:	f840 3c04 	str.w	r3, [r0, #-4]
   2a878:	1c4f      	adds	r7, r1, #1
   2a87a:	7849      	ldrb	r1, [r1, #1]
   2a87c:	2900      	cmp	r1, #0
   2a87e:	f000 80a4 	beq.w	2a9ca <__hexnan+0x17e>
   2a882:	46e0      	mov	r8, ip
   2a884:	4664      	mov	r4, ip
   2a886:	f8df 9160 	ldr.w	r9, [pc, #352]	; 2a9e8 <__hexnan+0x19c>
   2a88a:	469a      	mov	sl, r3
   2a88c:	469e      	mov	lr, r3
   2a88e:	e00e      	b.n	2a8ae <__hexnan+0x62>
   2a890:	2920      	cmp	r1, #32
   2a892:	f200 8098 	bhi.w	2a9c6 <__hexnan+0x17a>
   2a896:	45f2      	cmp	sl, lr
   2a898:	da06      	bge.n	2a8a8 <__hexnan+0x5c>
   2a89a:	4544      	cmp	r4, r8
   2a89c:	d201      	bcs.n	2a8a2 <__hexnan+0x56>
   2a89e:	2b07      	cmp	r3, #7
   2a8a0:	dd6a      	ble.n	2a978 <__hexnan+0x12c>
   2a8a2:	42a2      	cmp	r2, r4
   2a8a4:	d360      	bcc.n	2a968 <__hexnan+0x11c>
   2a8a6:	2308      	movs	r3, #8
   2a8a8:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   2a8ac:	b191      	cbz	r1, 2a8d4 <__hexnan+0x88>
   2a8ae:	f819 0001 	ldrb.w	r0, [r9, r1]
   2a8b2:	2800      	cmp	r0, #0
   2a8b4:	d0ec      	beq.n	2a890 <__hexnan+0x44>
   2a8b6:	3301      	adds	r3, #1
   2a8b8:	f10e 0e01 	add.w	lr, lr, #1
   2a8bc:	2b08      	cmp	r3, #8
   2a8be:	dc4b      	bgt.n	2a958 <__hexnan+0x10c>
   2a8c0:	6821      	ldr	r1, [r4, #0]
   2a8c2:	0109      	lsls	r1, r1, #4
   2a8c4:	f000 000f 	and.w	r0, r0, #15
   2a8c8:	4308      	orrs	r0, r1
   2a8ca:	6020      	str	r0, [r4, #0]
   2a8cc:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   2a8d0:	2900      	cmp	r1, #0
   2a8d2:	d1ec      	bne.n	2a8ae <__hexnan+0x62>
   2a8d4:	f1be 0f00 	cmp.w	lr, #0
   2a8d8:	d077      	beq.n	2a9ca <__hexnan+0x17e>
   2a8da:	45a0      	cmp	r8, r4
   2a8dc:	d913      	bls.n	2a906 <__hexnan+0xba>
   2a8de:	2b07      	cmp	r3, #7
   2a8e0:	dc11      	bgt.n	2a906 <__hexnan+0xba>
   2a8e2:	f1c3 0308 	rsb	r3, r3, #8
   2a8e6:	6825      	ldr	r5, [r4, #0]
   2a8e8:	4621      	mov	r1, r4
   2a8ea:	009b      	lsls	r3, r3, #2
   2a8ec:	f1c3 0720 	rsb	r7, r3, #32
   2a8f0:	684e      	ldr	r6, [r1, #4]
   2a8f2:	fa06 f007 	lsl.w	r0, r6, r7
   2a8f6:	4328      	orrs	r0, r5
   2a8f8:	fa26 f503 	lsr.w	r5, r6, r3
   2a8fc:	6008      	str	r0, [r1, #0]
   2a8fe:	f841 5f04 	str.w	r5, [r1, #4]!
   2a902:	4588      	cmp	r8, r1
   2a904:	d8f4      	bhi.n	2a8f0 <__hexnan+0xa4>
   2a906:	42a2      	cmp	r2, r4
   2a908:	d24d      	bcs.n	2a9a6 <__hexnan+0x15a>
   2a90a:	1f11      	subs	r1, r2, #4
   2a90c:	4623      	mov	r3, r4
   2a90e:	f853 0b04 	ldr.w	r0, [r3], #4
   2a912:	4563      	cmp	r3, ip
   2a914:	f841 0f04 	str.w	r0, [r1, #4]!
   2a918:	d9f9      	bls.n	2a90e <__hexnan+0xc2>
   2a91a:	ebac 0304 	sub.w	r3, ip, r4
   2a91e:	f10c 0001 	add.w	r0, ip, #1
   2a922:	3401      	adds	r4, #1
   2a924:	2100      	movs	r1, #0
   2a926:	f023 0303 	bic.w	r3, r3, #3
   2a92a:	3304      	adds	r3, #4
   2a92c:	42a0      	cmp	r0, r4
   2a92e:	bf38      	it	cc
   2a930:	2304      	movcc	r3, #4
   2a932:	4413      	add	r3, r2
   2a934:	f843 1b04 	str.w	r1, [r3], #4
   2a938:	4563      	cmp	r3, ip
   2a93a:	d9fb      	bls.n	2a934 <__hexnan+0xe8>
   2a93c:	9b01      	ldr	r3, [sp, #4]
   2a93e:	f853 3c04 	ldr.w	r3, [r3, #-4]
   2a942:	b92b      	cbnz	r3, 2a950 <__hexnan+0x104>
   2a944:	4562      	cmp	r2, ip
   2a946:	d044      	beq.n	2a9d2 <__hexnan+0x186>
   2a948:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   2a94c:	2b00      	cmp	r3, #0
   2a94e:	d0f9      	beq.n	2a944 <__hexnan+0xf8>
   2a950:	2005      	movs	r0, #5
   2a952:	b005      	add	sp, #20
   2a954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a958:	42a2      	cmp	r2, r4
   2a95a:	d2a5      	bcs.n	2a8a8 <__hexnan+0x5c>
   2a95c:	2300      	movs	r3, #0
   2a95e:	3c04      	subs	r4, #4
   2a960:	6023      	str	r3, [r4, #0]
   2a962:	4619      	mov	r1, r3
   2a964:	2301      	movs	r3, #1
   2a966:	e7ad      	b.n	2a8c4 <__hexnan+0x78>
   2a968:	f1a4 0804 	sub.w	r8, r4, #4
   2a96c:	2300      	movs	r3, #0
   2a96e:	46f2      	mov	sl, lr
   2a970:	f844 3c04 	str.w	r3, [r4, #-4]
   2a974:	4644      	mov	r4, r8
   2a976:	e797      	b.n	2a8a8 <__hexnan+0x5c>
   2a978:	f1c3 0108 	rsb	r1, r3, #8
   2a97c:	6825      	ldr	r5, [r4, #0]
   2a97e:	4623      	mov	r3, r4
   2a980:	0089      	lsls	r1, r1, #2
   2a982:	f1c1 0b20 	rsb	fp, r1, #32
   2a986:	685e      	ldr	r6, [r3, #4]
   2a988:	fa06 f00b 	lsl.w	r0, r6, fp
   2a98c:	4328      	orrs	r0, r5
   2a98e:	fa26 f501 	lsr.w	r5, r6, r1
   2a992:	6018      	str	r0, [r3, #0]
   2a994:	f843 5f04 	str.w	r5, [r3, #4]!
   2a998:	4543      	cmp	r3, r8
   2a99a:	d3f4      	bcc.n	2a986 <__hexnan+0x13a>
   2a99c:	e781      	b.n	2a8a2 <__hexnan+0x56>
   2a99e:	1d19      	adds	r1, r3, #4
   2a9a0:	469c      	mov	ip, r3
   2a9a2:	9101      	str	r1, [sp, #4]
   2a9a4:	e762      	b.n	2a86c <__hexnan+0x20>
   2a9a6:	9b03      	ldr	r3, [sp, #12]
   2a9a8:	2b00      	cmp	r3, #0
   2a9aa:	d0c7      	beq.n	2a93c <__hexnan+0xf0>
   2a9ac:	9b03      	ldr	r3, [sp, #12]
   2a9ae:	9c01      	ldr	r4, [sp, #4]
   2a9b0:	f1c3 0120 	rsb	r1, r3, #32
   2a9b4:	f04f 33ff 	mov.w	r3, #4294967295
   2a9b8:	f854 0c04 	ldr.w	r0, [r4, #-4]
   2a9bc:	40cb      	lsrs	r3, r1
   2a9be:	4003      	ands	r3, r0
   2a9c0:	f844 3c04 	str.w	r3, [r4, #-4]
   2a9c4:	e7bd      	b.n	2a942 <__hexnan+0xf6>
   2a9c6:	2929      	cmp	r1, #41	; 0x29
   2a9c8:	d00a      	beq.n	2a9e0 <__hexnan+0x194>
   2a9ca:	2004      	movs	r0, #4
   2a9cc:	b005      	add	sp, #20
   2a9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a9d2:	2301      	movs	r3, #1
   2a9d4:	2005      	movs	r0, #5
   2a9d6:	f8cc 3000 	str.w	r3, [ip]
   2a9da:	b005      	add	sp, #20
   2a9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a9e0:	3701      	adds	r7, #1
   2a9e2:	9902      	ldr	r1, [sp, #8]
   2a9e4:	600f      	str	r7, [r1, #0]
   2a9e6:	e775      	b.n	2a8d4 <__hexnan+0x88>
   2a9e8:	0002f7d4 	.word	0x0002f7d4

0002a9ec <iswspace>:
   2a9ec:	2100      	movs	r1, #0
   2a9ee:	f000 b801 	b.w	2a9f4 <iswspace_l>
   2a9f2:	bf00      	nop

0002a9f4 <iswspace_l>:
   2a9f4:	28ff      	cmp	r0, #255	; 0xff
   2a9f6:	d804      	bhi.n	2aa02 <iswspace_l+0xe>
   2a9f8:	4b03      	ldr	r3, [pc, #12]	; (2aa08 <iswspace_l+0x14>)
   2a9fa:	5cc0      	ldrb	r0, [r0, r3]
   2a9fc:	f000 0008 	and.w	r0, r0, #8
   2aa00:	4770      	bx	lr
   2aa02:	2000      	movs	r0, #0
   2aa04:	4770      	bx	lr
   2aa06:	bf00      	nop
   2aa08:	0002f5d9 	.word	0x0002f5d9

0002aa0c <__locale_mb_cur_max>:
   2aa0c:	4b01      	ldr	r3, [pc, #4]	; (2aa14 <__locale_mb_cur_max+0x8>)
   2aa0e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   2aa12:	4770      	bx	lr
   2aa14:	200208f0 	.word	0x200208f0

0002aa18 <_localeconv_r>:
   2aa18:	4800      	ldr	r0, [pc, #0]	; (2aa1c <_localeconv_r+0x4>)
   2aa1a:	4770      	bx	lr
   2aa1c:	200209e0 	.word	0x200209e0

0002aa20 <__retarget_lock_init_recursive>:
   2aa20:	4770      	bx	lr
   2aa22:	bf00      	nop

0002aa24 <__retarget_lock_close_recursive>:
   2aa24:	4770      	bx	lr
   2aa26:	bf00      	nop

0002aa28 <__retarget_lock_acquire_recursive>:
   2aa28:	4770      	bx	lr
   2aa2a:	bf00      	nop

0002aa2c <__retarget_lock_release_recursive>:
   2aa2c:	4770      	bx	lr
   2aa2e:	bf00      	nop

0002aa30 <_lseek_r>:
   2aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aa32:	460f      	mov	r7, r1
   2aa34:	4d08      	ldr	r5, [pc, #32]	; (2aa58 <_lseek_r+0x28>)
   2aa36:	2600      	movs	r6, #0
   2aa38:	4611      	mov	r1, r2
   2aa3a:	4604      	mov	r4, r0
   2aa3c:	461a      	mov	r2, r3
   2aa3e:	4638      	mov	r0, r7
   2aa40:	602e      	str	r6, [r5, #0]
   2aa42:	f002 f979 	bl	2cd38 <_lseek>
   2aa46:	1c43      	adds	r3, r0, #1
   2aa48:	d000      	beq.n	2aa4c <_lseek_r+0x1c>
   2aa4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2aa4c:	682b      	ldr	r3, [r5, #0]
   2aa4e:	2b00      	cmp	r3, #0
   2aa50:	d0fb      	beq.n	2aa4a <_lseek_r+0x1a>
   2aa52:	6023      	str	r3, [r4, #0]
   2aa54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2aa56:	bf00      	nop
   2aa58:	2002640c 	.word	0x2002640c

0002aa5c <__swhatbuf_r>:
   2aa5c:	b570      	push	{r4, r5, r6, lr}
   2aa5e:	460c      	mov	r4, r1
   2aa60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2aa64:	b096      	sub	sp, #88	; 0x58
   2aa66:	4615      	mov	r5, r2
   2aa68:	2900      	cmp	r1, #0
   2aa6a:	461e      	mov	r6, r3
   2aa6c:	db14      	blt.n	2aa98 <__swhatbuf_r+0x3c>
   2aa6e:	466a      	mov	r2, sp
   2aa70:	f001 fad0 	bl	2c014 <_fstat_r>
   2aa74:	2800      	cmp	r0, #0
   2aa76:	db0f      	blt.n	2aa98 <__swhatbuf_r+0x3c>
   2aa78:	9a01      	ldr	r2, [sp, #4]
   2aa7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2aa7e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   2aa82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   2aa86:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   2aa8a:	fab2 f282 	clz	r2, r2
   2aa8e:	0952      	lsrs	r2, r2, #5
   2aa90:	6032      	str	r2, [r6, #0]
   2aa92:	602b      	str	r3, [r5, #0]
   2aa94:	b016      	add	sp, #88	; 0x58
   2aa96:	bd70      	pop	{r4, r5, r6, pc}
   2aa98:	89a1      	ldrh	r1, [r4, #12]
   2aa9a:	2300      	movs	r3, #0
   2aa9c:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   2aaa0:	6033      	str	r3, [r6, #0]
   2aaa2:	d004      	beq.n	2aaae <__swhatbuf_r+0x52>
   2aaa4:	2240      	movs	r2, #64	; 0x40
   2aaa6:	4618      	mov	r0, r3
   2aaa8:	602a      	str	r2, [r5, #0]
   2aaaa:	b016      	add	sp, #88	; 0x58
   2aaac:	bd70      	pop	{r4, r5, r6, pc}
   2aaae:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2aab2:	602b      	str	r3, [r5, #0]
   2aab4:	b016      	add	sp, #88	; 0x58
   2aab6:	bd70      	pop	{r4, r5, r6, pc}

0002aab8 <__smakebuf_r>:
   2aab8:	898b      	ldrh	r3, [r1, #12]
   2aaba:	b5f0      	push	{r4, r5, r6, r7, lr}
   2aabc:	079d      	lsls	r5, r3, #30
   2aabe:	b083      	sub	sp, #12
   2aac0:	460c      	mov	r4, r1
   2aac2:	d507      	bpl.n	2aad4 <__smakebuf_r+0x1c>
   2aac4:	f101 0343 	add.w	r3, r1, #67	; 0x43
   2aac8:	2201      	movs	r2, #1
   2aaca:	600b      	str	r3, [r1, #0]
   2aacc:	e9c1 3204 	strd	r3, r2, [r1, #16]
   2aad0:	b003      	add	sp, #12
   2aad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2aad4:	4606      	mov	r6, r0
   2aad6:	ab01      	add	r3, sp, #4
   2aad8:	466a      	mov	r2, sp
   2aada:	f7ff ffbf 	bl	2aa5c <__swhatbuf_r>
   2aade:	9900      	ldr	r1, [sp, #0]
   2aae0:	4605      	mov	r5, r0
   2aae2:	4630      	mov	r0, r6
   2aae4:	f7fa ff90 	bl	25a08 <_malloc_r>
   2aae8:	b180      	cbz	r0, 2ab0c <__smakebuf_r+0x54>
   2aaea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2aaee:	4f17      	ldr	r7, [pc, #92]	; (2ab4c <__smakebuf_r+0x94>)
   2aaf0:	f042 0380 	orr.w	r3, r2, #128	; 0x80
   2aaf4:	9900      	ldr	r1, [sp, #0]
   2aaf6:	9a01      	ldr	r2, [sp, #4]
   2aaf8:	63f7      	str	r7, [r6, #60]	; 0x3c
   2aafa:	81a3      	strh	r3, [r4, #12]
   2aafc:	6020      	str	r0, [r4, #0]
   2aafe:	e9c4 0104 	strd	r0, r1, [r4, #16]
   2ab02:	b99a      	cbnz	r2, 2ab2c <__smakebuf_r+0x74>
   2ab04:	432b      	orrs	r3, r5
   2ab06:	81a3      	strh	r3, [r4, #12]
   2ab08:	b003      	add	sp, #12
   2ab0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ab0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2ab10:	059a      	lsls	r2, r3, #22
   2ab12:	d4dd      	bmi.n	2aad0 <__smakebuf_r+0x18>
   2ab14:	f023 0303 	bic.w	r3, r3, #3
   2ab18:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2ab1c:	2101      	movs	r1, #1
   2ab1e:	f043 0302 	orr.w	r3, r3, #2
   2ab22:	6022      	str	r2, [r4, #0]
   2ab24:	6122      	str	r2, [r4, #16]
   2ab26:	81a3      	strh	r3, [r4, #12]
   2ab28:	6161      	str	r1, [r4, #20]
   2ab2a:	e7d1      	b.n	2aad0 <__smakebuf_r+0x18>
   2ab2c:	4630      	mov	r0, r6
   2ab2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2ab32:	f001 fa85 	bl	2c040 <_isatty_r>
   2ab36:	b910      	cbnz	r0, 2ab3e <__smakebuf_r+0x86>
   2ab38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2ab3c:	e7e2      	b.n	2ab04 <__smakebuf_r+0x4c>
   2ab3e:	89a2      	ldrh	r2, [r4, #12]
   2ab40:	f022 0203 	bic.w	r2, r2, #3
   2ab44:	f042 0201 	orr.w	r2, r2, #1
   2ab48:	b213      	sxth	r3, r2
   2ab4a:	e7db      	b.n	2ab04 <__smakebuf_r+0x4c>
   2ab4c:	00029ab1 	.word	0x00029ab1

0002ab50 <_mbrtowc_r>:
   2ab50:	b570      	push	{r4, r5, r6, lr}
   2ab52:	b082      	sub	sp, #8
   2ab54:	4606      	mov	r6, r0
   2ab56:	9c06      	ldr	r4, [sp, #24]
   2ab58:	b142      	cbz	r2, 2ab6c <_mbrtowc_r+0x1c>
   2ab5a:	4d0d      	ldr	r5, [pc, #52]	; (2ab90 <_mbrtowc_r+0x40>)
   2ab5c:	9400      	str	r4, [sp, #0]
   2ab5e:	f8d5 50e4 	ldr.w	r5, [r5, #228]	; 0xe4
   2ab62:	47a8      	blx	r5
   2ab64:	1c43      	adds	r3, r0, #1
   2ab66:	d00c      	beq.n	2ab82 <_mbrtowc_r+0x32>
   2ab68:	b002      	add	sp, #8
   2ab6a:	bd70      	pop	{r4, r5, r6, pc}
   2ab6c:	4615      	mov	r5, r2
   2ab6e:	4a08      	ldr	r2, [pc, #32]	; (2ab90 <_mbrtowc_r+0x40>)
   2ab70:	2301      	movs	r3, #1
   2ab72:	9400      	str	r4, [sp, #0]
   2ab74:	4629      	mov	r1, r5
   2ab76:	f8d2 50e4 	ldr.w	r5, [r2, #228]	; 0xe4
   2ab7a:	4a06      	ldr	r2, [pc, #24]	; (2ab94 <_mbrtowc_r+0x44>)
   2ab7c:	47a8      	blx	r5
   2ab7e:	1c43      	adds	r3, r0, #1
   2ab80:	d1f2      	bne.n	2ab68 <_mbrtowc_r+0x18>
   2ab82:	2200      	movs	r2, #0
   2ab84:	238a      	movs	r3, #138	; 0x8a
   2ab86:	6022      	str	r2, [r4, #0]
   2ab88:	6033      	str	r3, [r6, #0]
   2ab8a:	b002      	add	sp, #8
   2ab8c:	bd70      	pop	{r4, r5, r6, pc}
   2ab8e:	bf00      	nop
   2ab90:	200208f0 	.word	0x200208f0
   2ab94:	0002f5a4 	.word	0x0002f5a4

0002ab98 <__ascii_mbtowc>:
   2ab98:	b082      	sub	sp, #8
   2ab9a:	b149      	cbz	r1, 2abb0 <__ascii_mbtowc+0x18>
   2ab9c:	b15a      	cbz	r2, 2abb6 <__ascii_mbtowc+0x1e>
   2ab9e:	b16b      	cbz	r3, 2abbc <__ascii_mbtowc+0x24>
   2aba0:	7813      	ldrb	r3, [r2, #0]
   2aba2:	600b      	str	r3, [r1, #0]
   2aba4:	7812      	ldrb	r2, [r2, #0]
   2aba6:	1e10      	subs	r0, r2, #0
   2aba8:	bf18      	it	ne
   2abaa:	2001      	movne	r0, #1
   2abac:	b002      	add	sp, #8
   2abae:	4770      	bx	lr
   2abb0:	a901      	add	r1, sp, #4
   2abb2:	2a00      	cmp	r2, #0
   2abb4:	d1f3      	bne.n	2ab9e <__ascii_mbtowc+0x6>
   2abb6:	4610      	mov	r0, r2
   2abb8:	b002      	add	sp, #8
   2abba:	4770      	bx	lr
   2abbc:	f06f 0001 	mvn.w	r0, #1
   2abc0:	e7f4      	b.n	2abac <__ascii_mbtowc+0x14>
   2abc2:	bf00      	nop

0002abc4 <memmove>:
   2abc4:	4288      	cmp	r0, r1
   2abc6:	b4f0      	push	{r4, r5, r6, r7}
   2abc8:	d90d      	bls.n	2abe6 <memmove+0x22>
   2abca:	188b      	adds	r3, r1, r2
   2abcc:	4283      	cmp	r3, r0
   2abce:	d90a      	bls.n	2abe6 <memmove+0x22>
   2abd0:	1884      	adds	r4, r0, r2
   2abd2:	b132      	cbz	r2, 2abe2 <memmove+0x1e>
   2abd4:	4622      	mov	r2, r4
   2abd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2abda:	4299      	cmp	r1, r3
   2abdc:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2abe0:	d1f9      	bne.n	2abd6 <memmove+0x12>
   2abe2:	bcf0      	pop	{r4, r5, r6, r7}
   2abe4:	4770      	bx	lr
   2abe6:	2a0f      	cmp	r2, #15
   2abe8:	d80e      	bhi.n	2ac08 <memmove+0x44>
   2abea:	4603      	mov	r3, r0
   2abec:	1e54      	subs	r4, r2, #1
   2abee:	2a00      	cmp	r2, #0
   2abf0:	d0f7      	beq.n	2abe2 <memmove+0x1e>
   2abf2:	3401      	adds	r4, #1
   2abf4:	3b01      	subs	r3, #1
   2abf6:	440c      	add	r4, r1
   2abf8:	f811 2b01 	ldrb.w	r2, [r1], #1
   2abfc:	42a1      	cmp	r1, r4
   2abfe:	f803 2f01 	strb.w	r2, [r3, #1]!
   2ac02:	d1f9      	bne.n	2abf8 <memmove+0x34>
   2ac04:	bcf0      	pop	{r4, r5, r6, r7}
   2ac06:	4770      	bx	lr
   2ac08:	ea40 0301 	orr.w	r3, r0, r1
   2ac0c:	079b      	lsls	r3, r3, #30
   2ac0e:	d13e      	bne.n	2ac8e <memmove+0xca>
   2ac10:	f1a2 0310 	sub.w	r3, r2, #16
   2ac14:	f101 0520 	add.w	r5, r1, #32
   2ac18:	f101 0610 	add.w	r6, r1, #16
   2ac1c:	f100 0710 	add.w	r7, r0, #16
   2ac20:	f023 040f 	bic.w	r4, r3, #15
   2ac24:	091b      	lsrs	r3, r3, #4
   2ac26:	4425      	add	r5, r4
   2ac28:	f856 4c10 	ldr.w	r4, [r6, #-16]
   2ac2c:	3610      	adds	r6, #16
   2ac2e:	3710      	adds	r7, #16
   2ac30:	f847 4c20 	str.w	r4, [r7, #-32]
   2ac34:	f856 4c1c 	ldr.w	r4, [r6, #-28]
   2ac38:	f847 4c1c 	str.w	r4, [r7, #-28]
   2ac3c:	f856 4c18 	ldr.w	r4, [r6, #-24]
   2ac40:	f847 4c18 	str.w	r4, [r7, #-24]
   2ac44:	f856 4c14 	ldr.w	r4, [r6, #-20]
   2ac48:	42ae      	cmp	r6, r5
   2ac4a:	f847 4c14 	str.w	r4, [r7, #-20]
   2ac4e:	d1eb      	bne.n	2ac28 <memmove+0x64>
   2ac50:	3301      	adds	r3, #1
   2ac52:	f012 0f0c 	tst.w	r2, #12
   2ac56:	f002 050f 	and.w	r5, r2, #15
   2ac5a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   2ac5e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   2ac62:	d017      	beq.n	2ac94 <memmove+0xd0>
   2ac64:	3d04      	subs	r5, #4
   2ac66:	1f1c      	subs	r4, r3, #4
   2ac68:	460e      	mov	r6, r1
   2ac6a:	f025 0c03 	bic.w	ip, r5, #3
   2ac6e:	08ad      	lsrs	r5, r5, #2
   2ac70:	449c      	add	ip, r3
   2ac72:	f856 7b04 	ldr.w	r7, [r6], #4
   2ac76:	f844 7f04 	str.w	r7, [r4, #4]!
   2ac7a:	4564      	cmp	r4, ip
   2ac7c:	d1f9      	bne.n	2ac72 <memmove+0xae>
   2ac7e:	3501      	adds	r5, #1
   2ac80:	f002 0203 	and.w	r2, r2, #3
   2ac84:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   2ac88:	eb01 0185 	add.w	r1, r1, r5, lsl #2
   2ac8c:	e7ae      	b.n	2abec <memmove+0x28>
   2ac8e:	1e54      	subs	r4, r2, #1
   2ac90:	4603      	mov	r3, r0
   2ac92:	e7ae      	b.n	2abf2 <memmove+0x2e>
   2ac94:	462a      	mov	r2, r5
   2ac96:	e7a9      	b.n	2abec <memmove+0x28>

0002ac98 <_Balloc>:
   2ac98:	b538      	push	{r3, r4, r5, lr}
   2ac9a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2ac9c:	4605      	mov	r5, r0
   2ac9e:	460c      	mov	r4, r1
   2aca0:	b14b      	cbz	r3, 2acb6 <_Balloc+0x1e>
   2aca2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2aca6:	b180      	cbz	r0, 2acca <_Balloc+0x32>
   2aca8:	6802      	ldr	r2, [r0, #0]
   2acaa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2acae:	2300      	movs	r3, #0
   2acb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
   2acb4:	bd38      	pop	{r3, r4, r5, pc}
   2acb6:	2221      	movs	r2, #33	; 0x21
   2acb8:	2104      	movs	r1, #4
   2acba:	f001 f915 	bl	2bee8 <_calloc_r>
   2acbe:	4603      	mov	r3, r0
   2acc0:	64e8      	str	r0, [r5, #76]	; 0x4c
   2acc2:	2800      	cmp	r0, #0
   2acc4:	d1ed      	bne.n	2aca2 <_Balloc+0xa>
   2acc6:	2000      	movs	r0, #0
   2acc8:	bd38      	pop	{r3, r4, r5, pc}
   2acca:	2101      	movs	r1, #1
   2accc:	4628      	mov	r0, r5
   2acce:	fa01 f504 	lsl.w	r5, r1, r4
   2acd2:	1d6a      	adds	r2, r5, #5
   2acd4:	0092      	lsls	r2, r2, #2
   2acd6:	f001 f907 	bl	2bee8 <_calloc_r>
   2acda:	2800      	cmp	r0, #0
   2acdc:	d0f3      	beq.n	2acc6 <_Balloc+0x2e>
   2acde:	e9c0 4501 	strd	r4, r5, [r0, #4]
   2ace2:	e7e4      	b.n	2acae <_Balloc+0x16>

0002ace4 <_Bfree>:
   2ace4:	b131      	cbz	r1, 2acf4 <_Bfree+0x10>
   2ace6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2ace8:	684a      	ldr	r2, [r1, #4]
   2acea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2acee:	6008      	str	r0, [r1, #0]
   2acf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   2acf4:	4770      	bx	lr
   2acf6:	bf00      	nop

0002acf8 <__multadd>:
   2acf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2acfc:	460f      	mov	r7, r1
   2acfe:	4680      	mov	r8, r0
   2ad00:	690e      	ldr	r6, [r1, #16]
   2ad02:	f101 0014 	add.w	r0, r1, #20
   2ad06:	b082      	sub	sp, #8
   2ad08:	2100      	movs	r1, #0
   2ad0a:	6805      	ldr	r5, [r0, #0]
   2ad0c:	3101      	adds	r1, #1
   2ad0e:	b2ac      	uxth	r4, r5
   2ad10:	428e      	cmp	r6, r1
   2ad12:	ea4f 4515 	mov.w	r5, r5, lsr #16
   2ad16:	fb02 3304 	mla	r3, r2, r4, r3
   2ad1a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   2ad1e:	b29c      	uxth	r4, r3
   2ad20:	fb02 c305 	mla	r3, r2, r5, ip
   2ad24:	eb04 4403 	add.w	r4, r4, r3, lsl #16
   2ad28:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2ad2c:	f840 4b04 	str.w	r4, [r0], #4
   2ad30:	dceb      	bgt.n	2ad0a <__multadd+0x12>
   2ad32:	b13b      	cbz	r3, 2ad44 <__multadd+0x4c>
   2ad34:	68ba      	ldr	r2, [r7, #8]
   2ad36:	42b2      	cmp	r2, r6
   2ad38:	dd08      	ble.n	2ad4c <__multadd+0x54>
   2ad3a:	eb07 0286 	add.w	r2, r7, r6, lsl #2
   2ad3e:	3601      	adds	r6, #1
   2ad40:	6153      	str	r3, [r2, #20]
   2ad42:	613e      	str	r6, [r7, #16]
   2ad44:	4638      	mov	r0, r7
   2ad46:	b002      	add	sp, #8
   2ad48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ad4c:	6879      	ldr	r1, [r7, #4]
   2ad4e:	4640      	mov	r0, r8
   2ad50:	9301      	str	r3, [sp, #4]
   2ad52:	3101      	adds	r1, #1
   2ad54:	f7ff ffa0 	bl	2ac98 <_Balloc>
   2ad58:	693a      	ldr	r2, [r7, #16]
   2ad5a:	f107 010c 	add.w	r1, r7, #12
   2ad5e:	4604      	mov	r4, r0
   2ad60:	3202      	adds	r2, #2
   2ad62:	300c      	adds	r0, #12
   2ad64:	0092      	lsls	r2, r2, #2
   2ad66:	f7e1 fef1 	bl	cb4c <memcpy>
   2ad6a:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
   2ad6e:	6879      	ldr	r1, [r7, #4]
   2ad70:	9b01      	ldr	r3, [sp, #4]
   2ad72:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2ad76:	6038      	str	r0, [r7, #0]
   2ad78:	f842 7021 	str.w	r7, [r2, r1, lsl #2]
   2ad7c:	4627      	mov	r7, r4
   2ad7e:	e7dc      	b.n	2ad3a <__multadd+0x42>

0002ad80 <__s2b>:
   2ad80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ad84:	461f      	mov	r7, r3
   2ad86:	4c24      	ldr	r4, [pc, #144]	; (2ae18 <__s2b+0x98>)
   2ad88:	4606      	mov	r6, r0
   2ad8a:	f103 0008 	add.w	r0, r3, #8
   2ad8e:	2f09      	cmp	r7, #9
   2ad90:	4689      	mov	r9, r1
   2ad92:	fb84 3c00 	smull	r3, ip, r4, r0
   2ad96:	ea4f 73e0 	mov.w	r3, r0, asr #31
   2ad9a:	4690      	mov	r8, r2
   2ad9c:	9d08      	ldr	r5, [sp, #32]
   2ad9e:	ebc3 036c 	rsb	r3, r3, ip, asr #1
   2ada2:	dd37      	ble.n	2ae14 <__s2b+0x94>
   2ada4:	2401      	movs	r4, #1
   2ada6:	2100      	movs	r1, #0
   2ada8:	0064      	lsls	r4, r4, #1
   2adaa:	3101      	adds	r1, #1
   2adac:	42a3      	cmp	r3, r4
   2adae:	dcfb      	bgt.n	2ada8 <__s2b+0x28>
   2adb0:	4630      	mov	r0, r6
   2adb2:	f7ff ff71 	bl	2ac98 <_Balloc>
   2adb6:	2301      	movs	r3, #1
   2adb8:	f1b8 0f09 	cmp.w	r8, #9
   2adbc:	4601      	mov	r1, r0
   2adbe:	e9c0 3504 	strd	r3, r5, [r0, #16]
   2adc2:	dd22      	ble.n	2ae0a <__s2b+0x8a>
   2adc4:	f109 0a09 	add.w	sl, r9, #9
   2adc8:	44c1      	add	r9, r8
   2adca:	4655      	mov	r5, sl
   2adcc:	f815 3b01 	ldrb.w	r3, [r5], #1
   2add0:	220a      	movs	r2, #10
   2add2:	4630      	mov	r0, r6
   2add4:	3b30      	subs	r3, #48	; 0x30
   2add6:	f7ff ff8f 	bl	2acf8 <__multadd>
   2adda:	454d      	cmp	r5, r9
   2addc:	4601      	mov	r1, r0
   2adde:	d1f5      	bne.n	2adcc <__s2b+0x4c>
   2ade0:	f1a8 0408 	sub.w	r4, r8, #8
   2ade4:	4454      	add	r4, sl
   2ade6:	4547      	cmp	r7, r8
   2ade8:	dd0c      	ble.n	2ae04 <__s2b+0x84>
   2adea:	eba7 0508 	sub.w	r5, r7, r8
   2adee:	4425      	add	r5, r4
   2adf0:	f814 3b01 	ldrb.w	r3, [r4], #1
   2adf4:	220a      	movs	r2, #10
   2adf6:	4630      	mov	r0, r6
   2adf8:	3b30      	subs	r3, #48	; 0x30
   2adfa:	f7ff ff7d 	bl	2acf8 <__multadd>
   2adfe:	42a5      	cmp	r5, r4
   2ae00:	4601      	mov	r1, r0
   2ae02:	d1f5      	bne.n	2adf0 <__s2b+0x70>
   2ae04:	4608      	mov	r0, r1
   2ae06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2ae0a:	f109 040a 	add.w	r4, r9, #10
   2ae0e:	f04f 0809 	mov.w	r8, #9
   2ae12:	e7e8      	b.n	2ade6 <__s2b+0x66>
   2ae14:	2100      	movs	r1, #0
   2ae16:	e7cb      	b.n	2adb0 <__s2b+0x30>
   2ae18:	38e38e39 	.word	0x38e38e39

0002ae1c <__hi0bits>:
   2ae1c:	4b0f      	ldr	r3, [pc, #60]	; (2ae5c <__hi0bits+0x40>)
   2ae1e:	4003      	ands	r3, r0
   2ae20:	b9d3      	cbnz	r3, 2ae58 <__hi0bits+0x3c>
   2ae22:	0400      	lsls	r0, r0, #16
   2ae24:	2310      	movs	r3, #16
   2ae26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   2ae2a:	d101      	bne.n	2ae30 <__hi0bits+0x14>
   2ae2c:	3308      	adds	r3, #8
   2ae2e:	0200      	lsls	r0, r0, #8
   2ae30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   2ae34:	d101      	bne.n	2ae3a <__hi0bits+0x1e>
   2ae36:	3304      	adds	r3, #4
   2ae38:	0100      	lsls	r0, r0, #4
   2ae3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   2ae3e:	d101      	bne.n	2ae44 <__hi0bits+0x28>
   2ae40:	3302      	adds	r3, #2
   2ae42:	0080      	lsls	r0, r0, #2
   2ae44:	2800      	cmp	r0, #0
   2ae46:	db05      	blt.n	2ae54 <__hi0bits+0x38>
   2ae48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   2ae4c:	f103 0301 	add.w	r3, r3, #1
   2ae50:	bf08      	it	eq
   2ae52:	2320      	moveq	r3, #32
   2ae54:	4618      	mov	r0, r3
   2ae56:	4770      	bx	lr
   2ae58:	2300      	movs	r3, #0
   2ae5a:	e7e4      	b.n	2ae26 <__hi0bits+0xa>
   2ae5c:	ffff0000 	.word	0xffff0000

0002ae60 <__lo0bits>:
   2ae60:	6803      	ldr	r3, [r0, #0]
   2ae62:	4601      	mov	r1, r0
   2ae64:	f013 0207 	ands.w	r2, r3, #7
   2ae68:	d007      	beq.n	2ae7a <__lo0bits+0x1a>
   2ae6a:	07da      	lsls	r2, r3, #31
   2ae6c:	d420      	bmi.n	2aeb0 <__lo0bits+0x50>
   2ae6e:	0798      	lsls	r0, r3, #30
   2ae70:	d522      	bpl.n	2aeb8 <__lo0bits+0x58>
   2ae72:	085b      	lsrs	r3, r3, #1
   2ae74:	2001      	movs	r0, #1
   2ae76:	600b      	str	r3, [r1, #0]
   2ae78:	4770      	bx	lr
   2ae7a:	b298      	uxth	r0, r3
   2ae7c:	b1a8      	cbz	r0, 2aeaa <__lo0bits+0x4a>
   2ae7e:	4610      	mov	r0, r2
   2ae80:	f013 0fff 	tst.w	r3, #255	; 0xff
   2ae84:	d101      	bne.n	2ae8a <__lo0bits+0x2a>
   2ae86:	3008      	adds	r0, #8
   2ae88:	0a1b      	lsrs	r3, r3, #8
   2ae8a:	071a      	lsls	r2, r3, #28
   2ae8c:	d101      	bne.n	2ae92 <__lo0bits+0x32>
   2ae8e:	3004      	adds	r0, #4
   2ae90:	091b      	lsrs	r3, r3, #4
   2ae92:	079a      	lsls	r2, r3, #30
   2ae94:	d101      	bne.n	2ae9a <__lo0bits+0x3a>
   2ae96:	3002      	adds	r0, #2
   2ae98:	089b      	lsrs	r3, r3, #2
   2ae9a:	07da      	lsls	r2, r3, #31
   2ae9c:	d403      	bmi.n	2aea6 <__lo0bits+0x46>
   2ae9e:	085b      	lsrs	r3, r3, #1
   2aea0:	f100 0001 	add.w	r0, r0, #1
   2aea4:	d006      	beq.n	2aeb4 <__lo0bits+0x54>
   2aea6:	600b      	str	r3, [r1, #0]
   2aea8:	4770      	bx	lr
   2aeaa:	0c1b      	lsrs	r3, r3, #16
   2aeac:	2010      	movs	r0, #16
   2aeae:	e7e7      	b.n	2ae80 <__lo0bits+0x20>
   2aeb0:	2000      	movs	r0, #0
   2aeb2:	4770      	bx	lr
   2aeb4:	2020      	movs	r0, #32
   2aeb6:	4770      	bx	lr
   2aeb8:	089b      	lsrs	r3, r3, #2
   2aeba:	2002      	movs	r0, #2
   2aebc:	600b      	str	r3, [r1, #0]
   2aebe:	4770      	bx	lr

0002aec0 <__i2b>:
   2aec0:	b510      	push	{r4, lr}
   2aec2:	460c      	mov	r4, r1
   2aec4:	2101      	movs	r1, #1
   2aec6:	f7ff fee7 	bl	2ac98 <_Balloc>
   2aeca:	2201      	movs	r2, #1
   2aecc:	e9c0 2404 	strd	r2, r4, [r0, #16]
   2aed0:	bd10      	pop	{r4, pc}
   2aed2:	bf00      	nop

0002aed4 <__multiply>:
   2aed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aed8:	690e      	ldr	r6, [r1, #16]
   2aeda:	b085      	sub	sp, #20
   2aedc:	6917      	ldr	r7, [r2, #16]
   2aede:	460d      	mov	r5, r1
   2aee0:	4614      	mov	r4, r2
   2aee2:	42be      	cmp	r6, r7
   2aee4:	db05      	blt.n	2aef2 <__multiply+0x1e>
   2aee6:	463a      	mov	r2, r7
   2aee8:	4623      	mov	r3, r4
   2aeea:	4637      	mov	r7, r6
   2aeec:	460c      	mov	r4, r1
   2aeee:	4616      	mov	r6, r2
   2aef0:	461d      	mov	r5, r3
   2aef2:	eb07 0806 	add.w	r8, r7, r6
   2aef6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   2aefa:	4543      	cmp	r3, r8
   2aefc:	bfb8      	it	lt
   2aefe:	3101      	addlt	r1, #1
   2af00:	f7ff feca 	bl	2ac98 <_Balloc>
   2af04:	f100 0914 	add.w	r9, r0, #20
   2af08:	9001      	str	r0, [sp, #4]
   2af0a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   2af0e:	45d1      	cmp	r9, sl
   2af10:	d205      	bcs.n	2af1e <__multiply+0x4a>
   2af12:	464b      	mov	r3, r9
   2af14:	2200      	movs	r2, #0
   2af16:	f843 2b04 	str.w	r2, [r3], #4
   2af1a:	459a      	cmp	sl, r3
   2af1c:	d8fb      	bhi.n	2af16 <__multiply+0x42>
   2af1e:	f105 0e14 	add.w	lr, r5, #20
   2af22:	f104 0314 	add.w	r3, r4, #20
   2af26:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
   2af2a:	461a      	mov	r2, r3
   2af2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   2af30:	45de      	cmp	lr, fp
   2af32:	d260      	bcs.n	2aff6 <__multiply+0x122>
   2af34:	1b3b      	subs	r3, r7, r4
   2af36:	3415      	adds	r4, #21
   2af38:	3b15      	subs	r3, #21
   2af3a:	f023 0303 	bic.w	r3, r3, #3
   2af3e:	3304      	adds	r3, #4
   2af40:	42a7      	cmp	r7, r4
   2af42:	bf38      	it	cc
   2af44:	2304      	movcc	r3, #4
   2af46:	e9cd a802 	strd	sl, r8, [sp, #8]
   2af4a:	4698      	mov	r8, r3
   2af4c:	4692      	mov	sl, r2
   2af4e:	e005      	b.n	2af5c <__multiply+0x88>
   2af50:	0c24      	lsrs	r4, r4, #16
   2af52:	d12b      	bne.n	2afac <__multiply+0xd8>
   2af54:	45f3      	cmp	fp, lr
   2af56:	f109 0904 	add.w	r9, r9, #4
   2af5a:	d94a      	bls.n	2aff2 <__multiply+0x11e>
   2af5c:	f85e 4b04 	ldr.w	r4, [lr], #4
   2af60:	b2a6      	uxth	r6, r4
   2af62:	2e00      	cmp	r6, #0
   2af64:	d0f4      	beq.n	2af50 <__multiply+0x7c>
   2af66:	4655      	mov	r5, sl
   2af68:	464c      	mov	r4, r9
   2af6a:	2200      	movs	r2, #0
   2af6c:	f855 3b04 	ldr.w	r3, [r5], #4
   2af70:	6820      	ldr	r0, [r4, #0]
   2af72:	b299      	uxth	r1, r3
   2af74:	42af      	cmp	r7, r5
   2af76:	fa1f fc80 	uxth.w	ip, r0
   2af7a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2af7e:	fb06 c101 	mla	r1, r6, r1, ip
   2af82:	ea4f 4010 	mov.w	r0, r0, lsr #16
   2af86:	4411      	add	r1, r2
   2af88:	fb06 0203 	mla	r2, r6, r3, r0
   2af8c:	b28b      	uxth	r3, r1
   2af8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   2af92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2af96:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2af9a:	f844 3b04 	str.w	r3, [r4], #4
   2af9e:	d8e5      	bhi.n	2af6c <__multiply+0x98>
   2afa0:	f849 2008 	str.w	r2, [r9, r8]
   2afa4:	f85e 4c04 	ldr.w	r4, [lr, #-4]
   2afa8:	0c24      	lsrs	r4, r4, #16
   2afaa:	d0d3      	beq.n	2af54 <__multiply+0x80>
   2afac:	f8d9 3000 	ldr.w	r3, [r9]
   2afb0:	4655      	mov	r5, sl
   2afb2:	464e      	mov	r6, r9
   2afb4:	2200      	movs	r2, #0
   2afb6:	4618      	mov	r0, r3
   2afb8:	0c01      	lsrs	r1, r0, #16
   2afba:	8828      	ldrh	r0, [r5, #0]
   2afbc:	b29b      	uxth	r3, r3
   2afbe:	fb04 1000 	mla	r0, r4, r0, r1
   2afc2:	4402      	add	r2, r0
   2afc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2afc8:	f846 3b04 	str.w	r3, [r6], #4
   2afcc:	f855 3b04 	ldr.w	r3, [r5], #4
   2afd0:	6830      	ldr	r0, [r6, #0]
   2afd2:	0c1b      	lsrs	r3, r3, #16
   2afd4:	42af      	cmp	r7, r5
   2afd6:	b281      	uxth	r1, r0
   2afd8:	fb04 1303 	mla	r3, r4, r3, r1
   2afdc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   2afe0:	ea4f 4213 	mov.w	r2, r3, lsr #16
   2afe4:	d8e8      	bhi.n	2afb8 <__multiply+0xe4>
   2afe6:	45f3      	cmp	fp, lr
   2afe8:	f849 3008 	str.w	r3, [r9, r8]
   2afec:	f109 0904 	add.w	r9, r9, #4
   2aff0:	d8b4      	bhi.n	2af5c <__multiply+0x88>
   2aff2:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   2aff6:	f1b8 0f00 	cmp.w	r8, #0
   2affa:	dc03      	bgt.n	2b004 <__multiply+0x130>
   2affc:	e006      	b.n	2b00c <__multiply+0x138>
   2affe:	f1b8 0801 	subs.w	r8, r8, #1
   2b002:	d003      	beq.n	2b00c <__multiply+0x138>
   2b004:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   2b008:	2b00      	cmp	r3, #0
   2b00a:	d0f8      	beq.n	2affe <__multiply+0x12a>
   2b00c:	9801      	ldr	r0, [sp, #4]
   2b00e:	f8c0 8010 	str.w	r8, [r0, #16]
   2b012:	b005      	add	sp, #20
   2b014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b018 <__pow5mult>:
   2b018:	f012 0303 	ands.w	r3, r2, #3
   2b01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b020:	4614      	mov	r4, r2
   2b022:	4607      	mov	r7, r0
   2b024:	d12e      	bne.n	2b084 <__pow5mult+0x6c>
   2b026:	460e      	mov	r6, r1
   2b028:	10a4      	asrs	r4, r4, #2
   2b02a:	d01c      	beq.n	2b066 <__pow5mult+0x4e>
   2b02c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   2b02e:	b395      	cbz	r5, 2b096 <__pow5mult+0x7e>
   2b030:	07e3      	lsls	r3, r4, #31
   2b032:	f04f 0800 	mov.w	r8, #0
   2b036:	d406      	bmi.n	2b046 <__pow5mult+0x2e>
   2b038:	1064      	asrs	r4, r4, #1
   2b03a:	d014      	beq.n	2b066 <__pow5mult+0x4e>
   2b03c:	6828      	ldr	r0, [r5, #0]
   2b03e:	b1a8      	cbz	r0, 2b06c <__pow5mult+0x54>
   2b040:	4605      	mov	r5, r0
   2b042:	07e3      	lsls	r3, r4, #31
   2b044:	d5f8      	bpl.n	2b038 <__pow5mult+0x20>
   2b046:	462a      	mov	r2, r5
   2b048:	4631      	mov	r1, r6
   2b04a:	4638      	mov	r0, r7
   2b04c:	f7ff ff42 	bl	2aed4 <__multiply>
   2b050:	b1b6      	cbz	r6, 2b080 <__pow5mult+0x68>
   2b052:	6871      	ldr	r1, [r6, #4]
   2b054:	1064      	asrs	r4, r4, #1
   2b056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2b058:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   2b05c:	6032      	str	r2, [r6, #0]
   2b05e:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   2b062:	4606      	mov	r6, r0
   2b064:	d1ea      	bne.n	2b03c <__pow5mult+0x24>
   2b066:	4630      	mov	r0, r6
   2b068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b06c:	462a      	mov	r2, r5
   2b06e:	4629      	mov	r1, r5
   2b070:	4638      	mov	r0, r7
   2b072:	f7ff ff2f 	bl	2aed4 <__multiply>
   2b076:	6028      	str	r0, [r5, #0]
   2b078:	4605      	mov	r5, r0
   2b07a:	f8c0 8000 	str.w	r8, [r0]
   2b07e:	e7e0      	b.n	2b042 <__pow5mult+0x2a>
   2b080:	4606      	mov	r6, r0
   2b082:	e7d9      	b.n	2b038 <__pow5mult+0x20>
   2b084:	1e5a      	subs	r2, r3, #1
   2b086:	4d0b      	ldr	r5, [pc, #44]	; (2b0b4 <__pow5mult+0x9c>)
   2b088:	2300      	movs	r3, #0
   2b08a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   2b08e:	f7ff fe33 	bl	2acf8 <__multadd>
   2b092:	4606      	mov	r6, r0
   2b094:	e7c8      	b.n	2b028 <__pow5mult+0x10>
   2b096:	2101      	movs	r1, #1
   2b098:	4638      	mov	r0, r7
   2b09a:	f7ff fdfd 	bl	2ac98 <_Balloc>
   2b09e:	f240 2271 	movw	r2, #625	; 0x271
   2b0a2:	2101      	movs	r1, #1
   2b0a4:	2300      	movs	r3, #0
   2b0a6:	4605      	mov	r5, r0
   2b0a8:	e9c0 1204 	strd	r1, r2, [r0, #16]
   2b0ac:	64b8      	str	r0, [r7, #72]	; 0x48
   2b0ae:	6003      	str	r3, [r0, #0]
   2b0b0:	e7be      	b.n	2b030 <__pow5mult+0x18>
   2b0b2:	bf00      	nop
   2b0b4:	0002f8f0 	.word	0x0002f8f0

0002b0b8 <__lshift>:
   2b0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b0bc:	690e      	ldr	r6, [r1, #16]
   2b0be:	460c      	mov	r4, r1
   2b0c0:	688b      	ldr	r3, [r1, #8]
   2b0c2:	4690      	mov	r8, r2
   2b0c4:	eb06 1662 	add.w	r6, r6, r2, asr #5
   2b0c8:	4607      	mov	r7, r0
   2b0ca:	ea4f 1962 	mov.w	r9, r2, asr #5
   2b0ce:	6849      	ldr	r1, [r1, #4]
   2b0d0:	1c75      	adds	r5, r6, #1
   2b0d2:	429d      	cmp	r5, r3
   2b0d4:	dd03      	ble.n	2b0de <__lshift+0x26>
   2b0d6:	005b      	lsls	r3, r3, #1
   2b0d8:	3101      	adds	r1, #1
   2b0da:	429d      	cmp	r5, r3
   2b0dc:	dcfb      	bgt.n	2b0d6 <__lshift+0x1e>
   2b0de:	4638      	mov	r0, r7
   2b0e0:	f7ff fdda 	bl	2ac98 <_Balloc>
   2b0e4:	f1b9 0f00 	cmp.w	r9, #0
   2b0e8:	f100 0114 	add.w	r1, r0, #20
   2b0ec:	dd0f      	ble.n	2b10e <__lshift+0x56>
   2b0ee:	f109 0205 	add.w	r2, r9, #5
   2b0f2:	460b      	mov	r3, r1
   2b0f4:	f04f 0c00 	mov.w	ip, #0
   2b0f8:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   2b0fc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   2b100:	f843 cb04 	str.w	ip, [r3], #4
   2b104:	4293      	cmp	r3, r2
   2b106:	d1fb      	bne.n	2b100 <__lshift+0x48>
   2b108:	f1ae 0314 	sub.w	r3, lr, #20
   2b10c:	4419      	add	r1, r3
   2b10e:	f104 0314 	add.w	r3, r4, #20
   2b112:	6922      	ldr	r2, [r4, #16]
   2b114:	f018 081f 	ands.w	r8, r8, #31
   2b118:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   2b11c:	d02c      	beq.n	2b178 <__lshift+0xc0>
   2b11e:	f1c8 0920 	rsb	r9, r8, #32
   2b122:	468e      	mov	lr, r1
   2b124:	f04f 0a00 	mov.w	sl, #0
   2b128:	681a      	ldr	r2, [r3, #0]
   2b12a:	fa02 f208 	lsl.w	r2, r2, r8
   2b12e:	ea42 020a 	orr.w	r2, r2, sl
   2b132:	f84e 2b04 	str.w	r2, [lr], #4
   2b136:	f853 2b04 	ldr.w	r2, [r3], #4
   2b13a:	459c      	cmp	ip, r3
   2b13c:	fa22 fa09 	lsr.w	sl, r2, r9
   2b140:	d8f2      	bhi.n	2b128 <__lshift+0x70>
   2b142:	ebac 0304 	sub.w	r3, ip, r4
   2b146:	f104 0215 	add.w	r2, r4, #21
   2b14a:	f1ba 0f00 	cmp.w	sl, #0
   2b14e:	bf18      	it	ne
   2b150:	462e      	movne	r6, r5
   2b152:	3b15      	subs	r3, #21
   2b154:	f023 0303 	bic.w	r3, r3, #3
   2b158:	3304      	adds	r3, #4
   2b15a:	4594      	cmp	ip, r2
   2b15c:	bf38      	it	cc
   2b15e:	2304      	movcc	r3, #4
   2b160:	f841 a003 	str.w	sl, [r1, r3]
   2b164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2b166:	6862      	ldr	r2, [r4, #4]
   2b168:	6106      	str	r6, [r0, #16]
   2b16a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2b16e:	6021      	str	r1, [r4, #0]
   2b170:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   2b174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b178:	3904      	subs	r1, #4
   2b17a:	f853 2b04 	ldr.w	r2, [r3], #4
   2b17e:	459c      	cmp	ip, r3
   2b180:	f841 2f04 	str.w	r2, [r1, #4]!
   2b184:	d8f9      	bhi.n	2b17a <__lshift+0xc2>
   2b186:	e7ed      	b.n	2b164 <__lshift+0xac>

0002b188 <__mcmp>:
   2b188:	690b      	ldr	r3, [r1, #16]
   2b18a:	b430      	push	{r4, r5}
   2b18c:	4605      	mov	r5, r0
   2b18e:	6900      	ldr	r0, [r0, #16]
   2b190:	1ac0      	subs	r0, r0, r3
   2b192:	d111      	bne.n	2b1b8 <__mcmp+0x30>
   2b194:	3514      	adds	r5, #20
   2b196:	3114      	adds	r1, #20
   2b198:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   2b19c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   2b1a0:	e001      	b.n	2b1a6 <__mcmp+0x1e>
   2b1a2:	4295      	cmp	r5, r2
   2b1a4:	d208      	bcs.n	2b1b8 <__mcmp+0x30>
   2b1a6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   2b1aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2b1ae:	428c      	cmp	r4, r1
   2b1b0:	d0f7      	beq.n	2b1a2 <__mcmp+0x1a>
   2b1b2:	d203      	bcs.n	2b1bc <__mcmp+0x34>
   2b1b4:	f04f 30ff 	mov.w	r0, #4294967295
   2b1b8:	bc30      	pop	{r4, r5}
   2b1ba:	4770      	bx	lr
   2b1bc:	2001      	movs	r0, #1
   2b1be:	bc30      	pop	{r4, r5}
   2b1c0:	4770      	bx	lr
   2b1c2:	bf00      	nop

0002b1c4 <__mdiff>:
   2b1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b1c8:	690b      	ldr	r3, [r1, #16]
   2b1ca:	b083      	sub	sp, #12
   2b1cc:	6914      	ldr	r4, [r2, #16]
   2b1ce:	460e      	mov	r6, r1
   2b1d0:	4617      	mov	r7, r2
   2b1d2:	1b1b      	subs	r3, r3, r4
   2b1d4:	2b00      	cmp	r3, #0
   2b1d6:	d119      	bne.n	2b20c <__mdiff+0x48>
   2b1d8:	f101 0814 	add.w	r8, r1, #20
   2b1dc:	f102 0914 	add.w	r9, r2, #20
   2b1e0:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   2b1e4:	eb09 0484 	add.w	r4, r9, r4, lsl #2
   2b1e8:	e001      	b.n	2b1ee <__mdiff+0x2a>
   2b1ea:	4598      	cmp	r8, r3
   2b1ec:	d27f      	bcs.n	2b2ee <__mdiff+0x12a>
   2b1ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2b1f2:	f854 2d04 	ldr.w	r2, [r4, #-4]!
   2b1f6:	4291      	cmp	r1, r2
   2b1f8:	d0f7      	beq.n	2b1ea <__mdiff+0x26>
   2b1fa:	d20c      	bcs.n	2b216 <__mdiff+0x52>
   2b1fc:	4642      	mov	r2, r8
   2b1fe:	4633      	mov	r3, r6
   2b200:	46c8      	mov	r8, r9
   2b202:	463e      	mov	r6, r7
   2b204:	4691      	mov	r9, r2
   2b206:	461f      	mov	r7, r3
   2b208:	2501      	movs	r5, #1
   2b20a:	e005      	b.n	2b218 <__mdiff+0x54>
   2b20c:	db67      	blt.n	2b2de <__mdiff+0x11a>
   2b20e:	f101 0814 	add.w	r8, r1, #20
   2b212:	f102 0914 	add.w	r9, r2, #20
   2b216:	2500      	movs	r5, #0
   2b218:	6871      	ldr	r1, [r6, #4]
   2b21a:	464c      	mov	r4, r9
   2b21c:	f7ff fd3c 	bl	2ac98 <_Balloc>
   2b220:	693b      	ldr	r3, [r7, #16]
   2b222:	6936      	ldr	r6, [r6, #16]
   2b224:	f100 0714 	add.w	r7, r0, #20
   2b228:	eb09 0a83 	add.w	sl, r9, r3, lsl #2
   2b22c:	f1a8 0c04 	sub.w	ip, r8, #4
   2b230:	eb08 0e86 	add.w	lr, r8, r6, lsl #2
   2b234:	2300      	movs	r3, #0
   2b236:	9701      	str	r7, [sp, #4]
   2b238:	60c5      	str	r5, [r0, #12]
   2b23a:	f85c 1f04 	ldr.w	r1, [ip, #4]!
   2b23e:	f854 2b04 	ldr.w	r2, [r4], #4
   2b242:	b28d      	uxth	r5, r1
   2b244:	fa1f fb82 	uxth.w	fp, r2
   2b248:	45a2      	cmp	sl, r4
   2b24a:	441d      	add	r5, r3
   2b24c:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2b250:	eba5 050b 	sub.w	r5, r5, fp
   2b254:	ebc2 4311 	rsb	r3, r2, r1, lsr #16
   2b258:	b2a9      	uxth	r1, r5
   2b25a:	eb03 4325 	add.w	r3, r3, r5, asr #16
   2b25e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   2b262:	ea4f 4323 	mov.w	r3, r3, asr #16
   2b266:	f847 1b04 	str.w	r1, [r7], #4
   2b26a:	d8e6      	bhi.n	2b23a <__mdiff+0x76>
   2b26c:	ea6f 0209 	mvn.w	r2, r9
   2b270:	f109 0901 	add.w	r9, r9, #1
   2b274:	9c01      	ldr	r4, [sp, #4]
   2b276:	4452      	add	r2, sl
   2b278:	45ca      	cmp	sl, r9
   2b27a:	f022 0503 	bic.w	r5, r2, #3
   2b27e:	462a      	mov	r2, r5
   2b280:	f105 0504 	add.w	r5, r5, #4
   2b284:	bf3c      	itt	cc
   2b286:	2504      	movcc	r5, #4
   2b288:	2200      	movcc	r2, #0
   2b28a:	44a8      	add	r8, r5
   2b28c:	4422      	add	r2, r4
   2b28e:	4425      	add	r5, r4
   2b290:	45c6      	cmp	lr, r8
   2b292:	d91a      	bls.n	2b2ca <__mdiff+0x106>
   2b294:	462f      	mov	r7, r5
   2b296:	4644      	mov	r4, r8
   2b298:	f854 cb04 	ldr.w	ip, [r4], #4
   2b29c:	fa1f f28c 	uxth.w	r2, ip
   2b2a0:	45a6      	cmp	lr, r4
   2b2a2:	4413      	add	r3, r2
   2b2a4:	ea4f 4223 	mov.w	r2, r3, asr #16
   2b2a8:	b299      	uxth	r1, r3
   2b2aa:	eb02 431c 	add.w	r3, r2, ip, lsr #16
   2b2ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   2b2b2:	ea4f 4323 	mov.w	r3, r3, asr #16
   2b2b6:	f847 1b04 	str.w	r1, [r7], #4
   2b2ba:	d8ed      	bhi.n	2b298 <__mdiff+0xd4>
   2b2bc:	f10e 32ff 	add.w	r2, lr, #4294967295
   2b2c0:	eba2 0808 	sub.w	r8, r2, r8
   2b2c4:	f028 0203 	bic.w	r2, r8, #3
   2b2c8:	442a      	add	r2, r5
   2b2ca:	b921      	cbnz	r1, 2b2d6 <__mdiff+0x112>
   2b2cc:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   2b2d0:	3e01      	subs	r6, #1
   2b2d2:	2b00      	cmp	r3, #0
   2b2d4:	d0fa      	beq.n	2b2cc <__mdiff+0x108>
   2b2d6:	6106      	str	r6, [r0, #16]
   2b2d8:	b003      	add	sp, #12
   2b2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b2de:	f101 0914 	add.w	r9, r1, #20
   2b2e2:	f102 0814 	add.w	r8, r2, #20
   2b2e6:	4616      	mov	r6, r2
   2b2e8:	2501      	movs	r5, #1
   2b2ea:	460f      	mov	r7, r1
   2b2ec:	e794      	b.n	2b218 <__mdiff+0x54>
   2b2ee:	2100      	movs	r1, #0
   2b2f0:	f7ff fcd2 	bl	2ac98 <_Balloc>
   2b2f4:	2201      	movs	r2, #1
   2b2f6:	2300      	movs	r3, #0
   2b2f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   2b2fc:	b003      	add	sp, #12
   2b2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b302:	bf00      	nop

0002b304 <__ulp>:
   2b304:	b082      	sub	sp, #8
   2b306:	4b17      	ldr	r3, [pc, #92]	; (2b364 <__ulp+0x60>)
   2b308:	ed8d 0b00 	vstr	d0, [sp]
   2b30c:	9a01      	ldr	r2, [sp, #4]
   2b30e:	4013      	ands	r3, r2
   2b310:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   2b314:	2b00      	cmp	r3, #0
   2b316:	dd05      	ble.n	2b324 <__ulp+0x20>
   2b318:	2000      	movs	r0, #0
   2b31a:	4619      	mov	r1, r3
   2b31c:	ec41 0b10 	vmov	d0, r0, r1
   2b320:	b002      	add	sp, #8
   2b322:	4770      	bx	lr
   2b324:	425b      	negs	r3, r3
   2b326:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   2b32a:	ea4f 5223 	mov.w	r2, r3, asr #20
   2b32e:	da08      	bge.n	2b342 <__ulp+0x3e>
   2b330:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   2b334:	2000      	movs	r0, #0
   2b336:	fa43 f102 	asr.w	r1, r3, r2
   2b33a:	ec41 0b10 	vmov	d0, r0, r1
   2b33e:	b002      	add	sp, #8
   2b340:	4770      	bx	lr
   2b342:	3a14      	subs	r2, #20
   2b344:	2100      	movs	r1, #0
   2b346:	2a1e      	cmp	r2, #30
   2b348:	dc08      	bgt.n	2b35c <__ulp+0x58>
   2b34a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   2b34e:	fa23 f202 	lsr.w	r2, r3, r2
   2b352:	4610      	mov	r0, r2
   2b354:	ec41 0b10 	vmov	d0, r0, r1
   2b358:	b002      	add	sp, #8
   2b35a:	4770      	bx	lr
   2b35c:	2201      	movs	r2, #1
   2b35e:	4610      	mov	r0, r2
   2b360:	e7f8      	b.n	2b354 <__ulp+0x50>
   2b362:	bf00      	nop
   2b364:	7ff00000 	.word	0x7ff00000

0002b368 <__b2d>:
   2b368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b36a:	6904      	ldr	r4, [r0, #16]
   2b36c:	f100 0614 	add.w	r6, r0, #20
   2b370:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   2b374:	f854 5c04 	ldr.w	r5, [r4, #-4]
   2b378:	1f27      	subs	r7, r4, #4
   2b37a:	4628      	mov	r0, r5
   2b37c:	f7ff fd4e 	bl	2ae1c <__hi0bits>
   2b380:	f1c0 0320 	rsb	r3, r0, #32
   2b384:	280a      	cmp	r0, #10
   2b386:	600b      	str	r3, [r1, #0]
   2b388:	dd34      	ble.n	2b3f4 <__b2d+0x8c>
   2b38a:	42be      	cmp	r6, r7
   2b38c:	d21e      	bcs.n	2b3cc <__b2d+0x64>
   2b38e:	380b      	subs	r0, #11
   2b390:	f854 7c08 	ldr.w	r7, [r4, #-8]
   2b394:	d026      	beq.n	2b3e4 <__b2d+0x7c>
   2b396:	f1c0 0e20 	rsb	lr, r0, #32
   2b39a:	fa05 fc00 	lsl.w	ip, r5, r0
   2b39e:	f1a4 0508 	sub.w	r5, r4, #8
   2b3a2:	fa27 f10e 	lsr.w	r1, r7, lr
   2b3a6:	42ae      	cmp	r6, r5
   2b3a8:	ea4c 0c01 	orr.w	ip, ip, r1
   2b3ac:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
   2b3b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   2b3b4:	d236      	bcs.n	2b424 <__b2d+0xbc>
   2b3b6:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   2b3ba:	fa07 f000 	lsl.w	r0, r7, r0
   2b3be:	fa21 f10e 	lsr.w	r1, r1, lr
   2b3c2:	4301      	orrs	r1, r0
   2b3c4:	460a      	mov	r2, r1
   2b3c6:	ec43 2b10 	vmov	d0, r2, r3
   2b3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b3cc:	380b      	subs	r0, #11
   2b3ce:	d008      	beq.n	2b3e2 <__b2d+0x7a>
   2b3d0:	fa05 f000 	lsl.w	r0, r5, r0
   2b3d4:	2100      	movs	r1, #0
   2b3d6:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
   2b3da:	460a      	mov	r2, r1
   2b3dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   2b3e0:	e7f1      	b.n	2b3c6 <__b2d+0x5e>
   2b3e2:	4607      	mov	r7, r0
   2b3e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   2b3e8:	463a      	mov	r2, r7
   2b3ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   2b3ee:	ec43 2b10 	vmov	d0, r2, r3
   2b3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b3f4:	f1c0 0c0b 	rsb	ip, r0, #11
   2b3f8:	42be      	cmp	r6, r7
   2b3fa:	fa25 f10c 	lsr.w	r1, r5, ip
   2b3fe:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   2b402:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   2b406:	d308      	bcc.n	2b41a <__b2d+0xb2>
   2b408:	2100      	movs	r1, #0
   2b40a:	3015      	adds	r0, #21
   2b40c:	fa05 f000 	lsl.w	r0, r5, r0
   2b410:	ea40 0201 	orr.w	r2, r0, r1
   2b414:	ec43 2b10 	vmov	d0, r2, r3
   2b418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b41a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   2b41e:	fa21 f10c 	lsr.w	r1, r1, ip
   2b422:	e7f2      	b.n	2b40a <__b2d+0xa2>
   2b424:	fa07 f100 	lsl.w	r1, r7, r0
   2b428:	460a      	mov	r2, r1
   2b42a:	e7cc      	b.n	2b3c6 <__b2d+0x5e>

0002b42c <__d2b>:
   2b42c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b430:	ec55 4b10 	vmov	r4, r5, d0
   2b434:	f3c5 590a 	ubfx	r9, r5, #20, #11
   2b438:	b083      	sub	sp, #12
   2b43a:	4688      	mov	r8, r1
   2b43c:	2101      	movs	r1, #1
   2b43e:	4617      	mov	r7, r2
   2b440:	f7ff fc2a 	bl	2ac98 <_Balloc>
   2b444:	f3c5 0313 	ubfx	r3, r5, #0, #20
   2b448:	4606      	mov	r6, r0
   2b44a:	f1b9 0f00 	cmp.w	r9, #0
   2b44e:	d001      	beq.n	2b454 <__d2b+0x28>
   2b450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2b454:	2c00      	cmp	r4, #0
   2b456:	9301      	str	r3, [sp, #4]
   2b458:	d01d      	beq.n	2b496 <__d2b+0x6a>
   2b45a:	4668      	mov	r0, sp
   2b45c:	9400      	str	r4, [sp, #0]
   2b45e:	f7ff fcff 	bl	2ae60 <__lo0bits>
   2b462:	2800      	cmp	r0, #0
   2b464:	d133      	bne.n	2b4ce <__d2b+0xa2>
   2b466:	e9dd 2300 	ldrd	r2, r3, [sp]
   2b46a:	6172      	str	r2, [r6, #20]
   2b46c:	2b00      	cmp	r3, #0
   2b46e:	61b3      	str	r3, [r6, #24]
   2b470:	bf14      	ite	ne
   2b472:	2202      	movne	r2, #2
   2b474:	2201      	moveq	r2, #1
   2b476:	6132      	str	r2, [r6, #16]
   2b478:	f1b9 0f00 	cmp.w	r9, #0
   2b47c:	d017      	beq.n	2b4ae <__d2b+0x82>
   2b47e:	f2a9 4333 	subw	r3, r9, #1075	; 0x433
   2b482:	f1c0 0235 	rsb	r2, r0, #53	; 0x35
   2b486:	4418      	add	r0, r3
   2b488:	f8c8 0000 	str.w	r0, [r8]
   2b48c:	4630      	mov	r0, r6
   2b48e:	603a      	str	r2, [r7, #0]
   2b490:	b003      	add	sp, #12
   2b492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b496:	a801      	add	r0, sp, #4
   2b498:	f7ff fce2 	bl	2ae60 <__lo0bits>
   2b49c:	2301      	movs	r3, #1
   2b49e:	9901      	ldr	r1, [sp, #4]
   2b4a0:	3020      	adds	r0, #32
   2b4a2:	461a      	mov	r2, r3
   2b4a4:	e9c6 3104 	strd	r3, r1, [r6, #16]
   2b4a8:	f1b9 0f00 	cmp.w	r9, #0
   2b4ac:	d1e7      	bne.n	2b47e <__d2b+0x52>
   2b4ae:	eb06 0382 	add.w	r3, r6, r2, lsl #2
   2b4b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2b4b6:	f8c8 0000 	str.w	r0, [r8]
   2b4ba:	6918      	ldr	r0, [r3, #16]
   2b4bc:	f7ff fcae 	bl	2ae1c <__hi0bits>
   2b4c0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   2b4c4:	6038      	str	r0, [r7, #0]
   2b4c6:	4630      	mov	r0, r6
   2b4c8:	b003      	add	sp, #12
   2b4ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b4ce:	9b01      	ldr	r3, [sp, #4]
   2b4d0:	f1c0 0220 	rsb	r2, r0, #32
   2b4d4:	9900      	ldr	r1, [sp, #0]
   2b4d6:	fa03 f202 	lsl.w	r2, r3, r2
   2b4da:	40c3      	lsrs	r3, r0
   2b4dc:	430a      	orrs	r2, r1
   2b4de:	9301      	str	r3, [sp, #4]
   2b4e0:	6172      	str	r2, [r6, #20]
   2b4e2:	e7c3      	b.n	2b46c <__d2b+0x40>

0002b4e4 <__ratio>:
   2b4e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b4e8:	b083      	sub	sp, #12
   2b4ea:	460e      	mov	r6, r1
   2b4ec:	4607      	mov	r7, r0
   2b4ee:	4669      	mov	r1, sp
   2b4f0:	f7ff ff3a 	bl	2b368 <__b2d>
   2b4f4:	4630      	mov	r0, r6
   2b4f6:	a901      	add	r1, sp, #4
   2b4f8:	ec55 4b10 	vmov	r4, r5, d0
   2b4fc:	f7ff ff34 	bl	2b368 <__b2d>
   2b500:	693b      	ldr	r3, [r7, #16]
   2b502:	6936      	ldr	r6, [r6, #16]
   2b504:	e9dd 2700 	ldrd	r2, r7, [sp]
   2b508:	1b9e      	subs	r6, r3, r6
   2b50a:	1bd3      	subs	r3, r2, r7
   2b50c:	eb03 1346 	add.w	r3, r3, r6, lsl #5
   2b510:	2b00      	cmp	r3, #0
   2b512:	ec57 6b10 	vmov	r6, r7, d0
   2b516:	dd0d      	ble.n	2b534 <__ratio+0x50>
   2b518:	eb05 5103 	add.w	r1, r5, r3, lsl #20
   2b51c:	460d      	mov	r5, r1
   2b51e:	4632      	mov	r2, r6
   2b520:	463b      	mov	r3, r7
   2b522:	4620      	mov	r0, r4
   2b524:	4629      	mov	r1, r5
   2b526:	f7e1 fd8f 	bl	d048 <__aeabi_ddiv>
   2b52a:	ec41 0b10 	vmov	d0, r0, r1
   2b52e:	b003      	add	sp, #12
   2b530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b534:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   2b538:	ee10 6a10 	vmov	r6, s0
   2b53c:	eb07 5903 	add.w	r9, r7, r3, lsl #20
   2b540:	464f      	mov	r7, r9
   2b542:	e7ec      	b.n	2b51e <__ratio+0x3a>

0002b544 <__copybits>:
   2b544:	f102 0314 	add.w	r3, r2, #20
   2b548:	b470      	push	{r4, r5, r6}
   2b54a:	1e4c      	subs	r4, r1, #1
   2b54c:	6911      	ldr	r1, [r2, #16]
   2b54e:	1164      	asrs	r4, r4, #5
   2b550:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2b554:	3401      	adds	r4, #1
   2b556:	428b      	cmp	r3, r1
   2b558:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   2b55c:	d20c      	bcs.n	2b578 <__copybits+0x34>
   2b55e:	1f05      	subs	r5, r0, #4
   2b560:	f853 6b04 	ldr.w	r6, [r3], #4
   2b564:	4299      	cmp	r1, r3
   2b566:	f845 6f04 	str.w	r6, [r5, #4]!
   2b56a:	d8f9      	bhi.n	2b560 <__copybits+0x1c>
   2b56c:	1a8b      	subs	r3, r1, r2
   2b56e:	3b15      	subs	r3, #21
   2b570:	f023 0303 	bic.w	r3, r3, #3
   2b574:	3304      	adds	r3, #4
   2b576:	4418      	add	r0, r3
   2b578:	4284      	cmp	r4, r0
   2b57a:	d904      	bls.n	2b586 <__copybits+0x42>
   2b57c:	2300      	movs	r3, #0
   2b57e:	f840 3b04 	str.w	r3, [r0], #4
   2b582:	4284      	cmp	r4, r0
   2b584:	d8fb      	bhi.n	2b57e <__copybits+0x3a>
   2b586:	bc70      	pop	{r4, r5, r6}
   2b588:	4770      	bx	lr
   2b58a:	bf00      	nop

0002b58c <__any_on>:
   2b58c:	6903      	ldr	r3, [r0, #16]
   2b58e:	114a      	asrs	r2, r1, #5
   2b590:	3014      	adds	r0, #20
   2b592:	4293      	cmp	r3, r2
   2b594:	da09      	bge.n	2b5aa <__any_on+0x1e>
   2b596:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2b59a:	e002      	b.n	2b5a2 <__any_on+0x16>
   2b59c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   2b5a0:	b9ca      	cbnz	r2, 2b5d6 <__any_on+0x4a>
   2b5a2:	4283      	cmp	r3, r0
   2b5a4:	d8fa      	bhi.n	2b59c <__any_on+0x10>
   2b5a6:	2000      	movs	r0, #0
   2b5a8:	4770      	bx	lr
   2b5aa:	dd11      	ble.n	2b5d0 <__any_on+0x44>
   2b5ac:	f011 011f 	ands.w	r1, r1, #31
   2b5b0:	d00e      	beq.n	2b5d0 <__any_on+0x44>
   2b5b2:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   2b5b6:	b410      	push	{r4}
   2b5b8:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   2b5bc:	fa24 f201 	lsr.w	r2, r4, r1
   2b5c0:	fa02 f101 	lsl.w	r1, r2, r1
   2b5c4:	428c      	cmp	r4, r1
   2b5c6:	d00c      	beq.n	2b5e2 <__any_on+0x56>
   2b5c8:	2001      	movs	r0, #1
   2b5ca:	f85d 4b04 	ldr.w	r4, [sp], #4
   2b5ce:	4770      	bx	lr
   2b5d0:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   2b5d4:	e7e5      	b.n	2b5a2 <__any_on+0x16>
   2b5d6:	2001      	movs	r0, #1
   2b5d8:	4770      	bx	lr
   2b5da:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   2b5de:	2a00      	cmp	r2, #0
   2b5e0:	d1f2      	bne.n	2b5c8 <__any_on+0x3c>
   2b5e2:	4283      	cmp	r3, r0
   2b5e4:	d8f9      	bhi.n	2b5da <__any_on+0x4e>
   2b5e6:	2000      	movs	r0, #0
   2b5e8:	f85d 4b04 	ldr.w	r4, [sp], #4
   2b5ec:	4770      	bx	lr
   2b5ee:	bf00      	nop

0002b5f0 <_read_r>:
   2b5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b5f2:	460f      	mov	r7, r1
   2b5f4:	4d08      	ldr	r5, [pc, #32]	; (2b618 <_read_r+0x28>)
   2b5f6:	2600      	movs	r6, #0
   2b5f8:	4611      	mov	r1, r2
   2b5fa:	4604      	mov	r4, r0
   2b5fc:	461a      	mov	r2, r3
   2b5fe:	4638      	mov	r0, r7
   2b600:	602e      	str	r6, [r5, #0]
   2b602:	f001 fb8e 	bl	2cd22 <_read>
   2b606:	1c43      	adds	r3, r0, #1
   2b608:	d000      	beq.n	2b60c <_read_r+0x1c>
   2b60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b60c:	682b      	ldr	r3, [r5, #0]
   2b60e:	2b00      	cmp	r3, #0
   2b610:	d0fb      	beq.n	2b60a <_read_r+0x1a>
   2b612:	6023      	str	r3, [r4, #0]
   2b614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b616:	bf00      	nop
   2b618:	2002640c 	.word	0x2002640c

0002b61c <frexp>:
   2b61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b61e:	ec53 2b10 	vmov	r2, r3, d0
   2b622:	4f15      	ldr	r7, [pc, #84]	; (2b678 <frexp+0x5c>)
   2b624:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   2b628:	2600      	movs	r6, #0
   2b62a:	42b9      	cmp	r1, r7
   2b62c:	6006      	str	r6, [r0, #0]
   2b62e:	dc20      	bgt.n	2b672 <frexp+0x56>
   2b630:	4604      	mov	r4, r0
   2b632:	ee10 0a10 	vmov	r0, s0
   2b636:	4308      	orrs	r0, r1
   2b638:	d01b      	beq.n	2b672 <frexp+0x56>
   2b63a:	4810      	ldr	r0, [pc, #64]	; (2b67c <frexp+0x60>)
   2b63c:	461d      	mov	r5, r3
   2b63e:	4018      	ands	r0, r3
   2b640:	b960      	cbnz	r0, 2b65c <frexp+0x40>
   2b642:	4619      	mov	r1, r3
   2b644:	2200      	movs	r2, #0
   2b646:	ee10 0a10 	vmov	r0, s0
   2b64a:	4b0d      	ldr	r3, [pc, #52]	; (2b680 <frexp+0x64>)
   2b64c:	f7e1 fbd2 	bl	cdf4 <__aeabi_dmul>
   2b650:	f06f 0635 	mvn.w	r6, #53	; 0x35
   2b654:	460d      	mov	r5, r1
   2b656:	4602      	mov	r2, r0
   2b658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   2b65c:	4809      	ldr	r0, [pc, #36]	; (2b684 <frexp+0x68>)
   2b65e:	1509      	asrs	r1, r1, #20
   2b660:	4028      	ands	r0, r5
   2b662:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
   2b666:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
   2b66a:	4431      	add	r1, r6
   2b66c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   2b670:	6021      	str	r1, [r4, #0]
   2b672:	ec43 2b10 	vmov	d0, r2, r3
   2b676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b678:	7fefffff 	.word	0x7fefffff
   2b67c:	7ff00000 	.word	0x7ff00000
   2b680:	43500000 	.word	0x43500000
   2b684:	800fffff 	.word	0x800fffff

0002b688 <__sccl>:
   2b688:	b4f0      	push	{r4, r5, r6, r7}
   2b68a:	780c      	ldrb	r4, [r1, #0]
   2b68c:	2c5e      	cmp	r4, #94	; 0x5e
   2b68e:	d023      	beq.n	2b6d8 <__sccl+0x50>
   2b690:	2200      	movs	r2, #0
   2b692:	1c4e      	adds	r6, r1, #1
   2b694:	4615      	mov	r5, r2
   2b696:	1e43      	subs	r3, r0, #1
   2b698:	f100 01ff 	add.w	r1, r0, #255	; 0xff
   2b69c:	f803 2f01 	strb.w	r2, [r3, #1]!
   2b6a0:	428b      	cmp	r3, r1
   2b6a2:	d1fb      	bne.n	2b69c <__sccl+0x14>
   2b6a4:	b1a4      	cbz	r4, 2b6d0 <__sccl+0x48>
   2b6a6:	f085 0201 	eor.w	r2, r5, #1
   2b6aa:	ea6f 0c00 	mvn.w	ip, r0
   2b6ae:	1c71      	adds	r1, r6, #1
   2b6b0:	5502      	strb	r2, [r0, r4]
   2b6b2:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   2b6b6:	1e4d      	subs	r5, r1, #1
   2b6b8:	460e      	mov	r6, r1
   2b6ba:	2b2d      	cmp	r3, #45	; 0x2d
   2b6bc:	d011      	beq.n	2b6e2 <__sccl+0x5a>
   2b6be:	2b5d      	cmp	r3, #93	; 0x5d
   2b6c0:	d003      	beq.n	2b6ca <__sccl+0x42>
   2b6c2:	b10b      	cbz	r3, 2b6c8 <__sccl+0x40>
   2b6c4:	461c      	mov	r4, r3
   2b6c6:	e7f2      	b.n	2b6ae <__sccl+0x26>
   2b6c8:	462e      	mov	r6, r5
   2b6ca:	4630      	mov	r0, r6
   2b6cc:	bcf0      	pop	{r4, r5, r6, r7}
   2b6ce:	4770      	bx	lr
   2b6d0:	3e01      	subs	r6, #1
   2b6d2:	4630      	mov	r0, r6
   2b6d4:	bcf0      	pop	{r4, r5, r6, r7}
   2b6d6:	4770      	bx	lr
   2b6d8:	2201      	movs	r2, #1
   2b6da:	1c8e      	adds	r6, r1, #2
   2b6dc:	784c      	ldrb	r4, [r1, #1]
   2b6de:	4615      	mov	r5, r2
   2b6e0:	e7d9      	b.n	2b696 <__sccl+0xe>
   2b6e2:	780f      	ldrb	r7, [r1, #0]
   2b6e4:	2f5d      	cmp	r7, #93	; 0x5d
   2b6e6:	d011      	beq.n	2b70c <__sccl+0x84>
   2b6e8:	42bc      	cmp	r4, r7
   2b6ea:	dc0f      	bgt.n	2b70c <__sccl+0x84>
   2b6ec:	1c66      	adds	r6, r4, #1
   2b6ee:	1983      	adds	r3, r0, r6
   2b6f0:	f803 2b01 	strb.w	r2, [r3], #1
   2b6f4:	eb0c 0503 	add.w	r5, ip, r3
   2b6f8:	42af      	cmp	r7, r5
   2b6fa:	dcf9      	bgt.n	2b6f0 <__sccl+0x68>
   2b6fc:	43e3      	mvns	r3, r4
   2b6fe:	3102      	adds	r1, #2
   2b700:	443b      	add	r3, r7
   2b702:	42bc      	cmp	r4, r7
   2b704:	bfa8      	it	ge
   2b706:	2300      	movge	r3, #0
   2b708:	199c      	adds	r4, r3, r6
   2b70a:	e7d2      	b.n	2b6b2 <__sccl+0x2a>
   2b70c:	242d      	movs	r4, #45	; 0x2d
   2b70e:	e7ce      	b.n	2b6ae <__sccl+0x26>

0002b710 <nanf>:
   2b710:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2b718 <nanf+0x8>
   2b714:	4770      	bx	lr
   2b716:	bf00      	nop
   2b718:	7fc00000 	.word	0x7fc00000

0002b71c <_raise_r>:
   2b71c:	291f      	cmp	r1, #31
   2b71e:	b538      	push	{r3, r4, r5, lr}
   2b720:	4605      	mov	r5, r0
   2b722:	d821      	bhi.n	2b768 <_raise_r+0x4c>
   2b724:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   2b728:	460c      	mov	r4, r1
   2b72a:	b16a      	cbz	r2, 2b748 <_raise_r+0x2c>
   2b72c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   2b730:	b153      	cbz	r3, 2b748 <_raise_r+0x2c>
   2b732:	2b01      	cmp	r3, #1
   2b734:	d016      	beq.n	2b764 <_raise_r+0x48>
   2b736:	1c59      	adds	r1, r3, #1
   2b738:	d010      	beq.n	2b75c <_raise_r+0x40>
   2b73a:	2500      	movs	r5, #0
   2b73c:	4620      	mov	r0, r4
   2b73e:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   2b742:	4798      	blx	r3
   2b744:	4628      	mov	r0, r5
   2b746:	bd38      	pop	{r3, r4, r5, pc}
   2b748:	4628      	mov	r0, r5
   2b74a:	f000 f831 	bl	2b7b0 <_getpid_r>
   2b74e:	4622      	mov	r2, r4
   2b750:	4601      	mov	r1, r0
   2b752:	4628      	mov	r0, r5
   2b754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b758:	f000 b814 	b.w	2b784 <_kill_r>
   2b75c:	2316      	movs	r3, #22
   2b75e:	2001      	movs	r0, #1
   2b760:	602b      	str	r3, [r5, #0]
   2b762:	bd38      	pop	{r3, r4, r5, pc}
   2b764:	2000      	movs	r0, #0
   2b766:	bd38      	pop	{r3, r4, r5, pc}
   2b768:	2316      	movs	r3, #22
   2b76a:	f04f 30ff 	mov.w	r0, #4294967295
   2b76e:	602b      	str	r3, [r5, #0]
   2b770:	bd38      	pop	{r3, r4, r5, pc}
   2b772:	bf00      	nop

0002b774 <raise>:
   2b774:	4b02      	ldr	r3, [pc, #8]	; (2b780 <raise+0xc>)
   2b776:	4601      	mov	r1, r0
   2b778:	6818      	ldr	r0, [r3, #0]
   2b77a:	f7ff bfcf 	b.w	2b71c <_raise_r>
   2b77e:	bf00      	nop
   2b780:	200204d8 	.word	0x200204d8

0002b784 <_kill_r>:
   2b784:	b570      	push	{r4, r5, r6, lr}
   2b786:	460c      	mov	r4, r1
   2b788:	4603      	mov	r3, r0
   2b78a:	4d08      	ldr	r5, [pc, #32]	; (2b7ac <_kill_r+0x28>)
   2b78c:	2600      	movs	r6, #0
   2b78e:	4620      	mov	r0, r4
   2b790:	4611      	mov	r1, r2
   2b792:	461c      	mov	r4, r3
   2b794:	602e      	str	r6, [r5, #0]
   2b796:	f001 fad3 	bl	2cd40 <_kill>
   2b79a:	1c43      	adds	r3, r0, #1
   2b79c:	d000      	beq.n	2b7a0 <_kill_r+0x1c>
   2b79e:	bd70      	pop	{r4, r5, r6, pc}
   2b7a0:	682b      	ldr	r3, [r5, #0]
   2b7a2:	2b00      	cmp	r3, #0
   2b7a4:	d0fb      	beq.n	2b79e <_kill_r+0x1a>
   2b7a6:	6023      	str	r3, [r4, #0]
   2b7a8:	bd70      	pop	{r4, r5, r6, pc}
   2b7aa:	bf00      	nop
   2b7ac:	2002640c 	.word	0x2002640c

0002b7b0 <_getpid_r>:
   2b7b0:	f001 bac8 	b.w	2cd44 <_getpid>

0002b7b4 <sprintf>:
   2b7b4:	b40e      	push	{r1, r2, r3}
   2b7b6:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b7b8:	b09c      	sub	sp, #112	; 0x70
   2b7ba:	4f0d      	ldr	r7, [pc, #52]	; (2b7f0 <sprintf+0x3c>)
   2b7bc:	4604      	mov	r4, r0
   2b7be:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   2b7c2:	ab21      	add	r3, sp, #132	; 0x84
   2b7c4:	4e0b      	ldr	r6, [pc, #44]	; (2b7f4 <sprintf+0x40>)
   2b7c6:	a902      	add	r1, sp, #8
   2b7c8:	6838      	ldr	r0, [r7, #0]
   2b7ca:	f853 2b04 	ldr.w	r2, [r3], #4
   2b7ce:	9402      	str	r4, [sp, #8]
   2b7d0:	9301      	str	r3, [sp, #4]
   2b7d2:	9406      	str	r4, [sp, #24]
   2b7d4:	9507      	str	r5, [sp, #28]
   2b7d6:	e9cd 5604 	strd	r5, r6, [sp, #16]
   2b7da:	f7e3 f86d 	bl	e8b8 <_svfprintf_r>
   2b7de:	9b02      	ldr	r3, [sp, #8]
   2b7e0:	2200      	movs	r2, #0
   2b7e2:	701a      	strb	r2, [r3, #0]
   2b7e4:	b01c      	add	sp, #112	; 0x70
   2b7e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2b7ea:	b003      	add	sp, #12
   2b7ec:	4770      	bx	lr
   2b7ee:	bf00      	nop
   2b7f0:	200204d8 	.word	0x200204d8
   2b7f4:	ffff0208 	.word	0xffff0208

0002b7f8 <strnlen>:
   2b7f8:	b191      	cbz	r1, 2b820 <strnlen+0x28>
   2b7fa:	4603      	mov	r3, r0
   2b7fc:	b410      	push	{r4}
   2b7fe:	1844      	adds	r4, r0, r1
   2b800:	e001      	b.n	2b806 <strnlen+0xe>
   2b802:	42a3      	cmp	r3, r4
   2b804:	d008      	beq.n	2b818 <strnlen+0x20>
   2b806:	461a      	mov	r2, r3
   2b808:	3301      	adds	r3, #1
   2b80a:	7811      	ldrb	r1, [r2, #0]
   2b80c:	2900      	cmp	r1, #0
   2b80e:	d1f8      	bne.n	2b802 <strnlen+0xa>
   2b810:	1a10      	subs	r0, r2, r0
   2b812:	f85d 4b04 	ldr.w	r4, [sp], #4
   2b816:	4770      	bx	lr
   2b818:	1a18      	subs	r0, r3, r0
   2b81a:	f85d 4b04 	ldr.w	r4, [sp], #4
   2b81e:	4770      	bx	lr
   2b820:	4608      	mov	r0, r1
   2b822:	4770      	bx	lr

0002b824 <_strtoll_l.isra.0>:
   2b824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b828:	b087      	sub	sp, #28
   2b82a:	4698      	mov	r8, r3
   2b82c:	460d      	mov	r5, r1
   2b82e:	9201      	str	r2, [sp, #4]
   2b830:	4a55      	ldr	r2, [pc, #340]	; (2b988 <_strtoll_l.isra.0+0x164>)
   2b832:	9103      	str	r1, [sp, #12]
   2b834:	9005      	str	r0, [sp, #20]
   2b836:	4629      	mov	r1, r5
   2b838:	f815 4b01 	ldrb.w	r4, [r5], #1
   2b83c:	5d13      	ldrb	r3, [r2, r4]
   2b83e:	f013 0308 	ands.w	r3, r3, #8
   2b842:	d1f8      	bne.n	2b836 <_strtoll_l.isra.0+0x12>
   2b844:	2c2d      	cmp	r4, #45	; 0x2d
   2b846:	d079      	beq.n	2b93c <_strtoll_l.isra.0+0x118>
   2b848:	2c2b      	cmp	r4, #43	; 0x2b
   2b84a:	d012      	beq.n	2b872 <_strtoll_l.isra.0+0x4e>
   2b84c:	9304      	str	r3, [sp, #16]
   2b84e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   2b852:	f04f 33ff 	mov.w	r3, #4294967295
   2b856:	9302      	str	r3, [sp, #8]
   2b858:	f038 0310 	bics.w	r3, r8, #16
   2b85c:	d115      	bne.n	2b88a <_strtoll_l.isra.0+0x66>
   2b85e:	2c30      	cmp	r4, #48	; 0x30
   2b860:	d075      	beq.n	2b94e <_strtoll_l.isra.0+0x12a>
   2b862:	f1b8 0f00 	cmp.w	r8, #0
   2b866:	d110      	bne.n	2b88a <_strtoll_l.isra.0+0x66>
   2b868:	260a      	movs	r6, #10
   2b86a:	2700      	movs	r7, #0
   2b86c:	f04f 080a 	mov.w	r8, #10
   2b870:	e00d      	b.n	2b88e <_strtoll_l.isra.0+0x6a>
   2b872:	9304      	str	r3, [sp, #16]
   2b874:	f04f 33ff 	mov.w	r3, #4294967295
   2b878:	782c      	ldrb	r4, [r5, #0]
   2b87a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   2b87e:	9302      	str	r3, [sp, #8]
   2b880:	f038 0310 	bics.w	r3, r8, #16
   2b884:	f101 0502 	add.w	r5, r1, #2
   2b888:	d0e9      	beq.n	2b85e <_strtoll_l.isra.0+0x3a>
   2b88a:	4646      	mov	r6, r8
   2b88c:	17f7      	asrs	r7, r6, #31
   2b88e:	4632      	mov	r2, r6
   2b890:	463b      	mov	r3, r7
   2b892:	9802      	ldr	r0, [sp, #8]
   2b894:	4649      	mov	r1, r9
   2b896:	f7e0 ffdf 	bl	c858 <__aeabi_uldivmod>
   2b89a:	468c      	mov	ip, r1
   2b89c:	4682      	mov	sl, r0
   2b89e:	2300      	movs	r3, #0
   2b8a0:	46e3      	mov	fp, ip
   2b8a2:	2000      	movs	r0, #0
   2b8a4:	2100      	movs	r1, #0
   2b8a6:	46a4      	mov	ip, r4
   2b8a8:	e010      	b.n	2b8cc <_strtoll_l.isra.0+0xa8>
   2b8aa:	f1ac 0437 	sub.w	r4, ip, #55	; 0x37
   2b8ae:	45a0      	cmp	r8, r4
   2b8b0:	dd1c      	ble.n	2b8ec <_strtoll_l.isra.0+0xc8>
   2b8b2:	2b00      	cmp	r3, #0
   2b8b4:	db06      	blt.n	2b8c4 <_strtoll_l.isra.0+0xa0>
   2b8b6:	458b      	cmp	fp, r1
   2b8b8:	bf08      	it	eq
   2b8ba:	4582      	cmpeq	sl, r0
   2b8bc:	d302      	bcc.n	2b8c4 <_strtoll_l.isra.0+0xa0>
   2b8be:	d127      	bne.n	2b910 <_strtoll_l.isra.0+0xec>
   2b8c0:	42a2      	cmp	r2, r4
   2b8c2:	da25      	bge.n	2b910 <_strtoll_l.isra.0+0xec>
   2b8c4:	f04f 33ff 	mov.w	r3, #4294967295
   2b8c8:	f815 cb01 	ldrb.w	ip, [r5], #1
   2b8cc:	f1ac 0430 	sub.w	r4, ip, #48	; 0x30
   2b8d0:	2c09      	cmp	r4, #9
   2b8d2:	d9ec      	bls.n	2b8ae <_strtoll_l.isra.0+0x8a>
   2b8d4:	f1ac 0441 	sub.w	r4, ip, #65	; 0x41
   2b8d8:	2c19      	cmp	r4, #25
   2b8da:	d9e6      	bls.n	2b8aa <_strtoll_l.isra.0+0x86>
   2b8dc:	f1ac 0461 	sub.w	r4, ip, #97	; 0x61
   2b8e0:	2c19      	cmp	r4, #25
   2b8e2:	d803      	bhi.n	2b8ec <_strtoll_l.isra.0+0xc8>
   2b8e4:	f1ac 0457 	sub.w	r4, ip, #87	; 0x57
   2b8e8:	45a0      	cmp	r8, r4
   2b8ea:	dce2      	bgt.n	2b8b2 <_strtoll_l.isra.0+0x8e>
   2b8ec:	1c5a      	adds	r2, r3, #1
   2b8ee:	d01b      	beq.n	2b928 <_strtoll_l.isra.0+0x104>
   2b8f0:	9a04      	ldr	r2, [sp, #16]
   2b8f2:	b112      	cbz	r2, 2b8fa <_strtoll_l.isra.0+0xd6>
   2b8f4:	4240      	negs	r0, r0
   2b8f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2b8fa:	9a01      	ldr	r2, [sp, #4]
   2b8fc:	b12a      	cbz	r2, 2b90a <_strtoll_l.isra.0+0xe6>
   2b8fe:	2b00      	cmp	r3, #0
   2b900:	d13e      	bne.n	2b980 <_strtoll_l.isra.0+0x15c>
   2b902:	9b01      	ldr	r3, [sp, #4]
   2b904:	461a      	mov	r2, r3
   2b906:	9b03      	ldr	r3, [sp, #12]
   2b908:	6013      	str	r3, [r2, #0]
   2b90a:	b007      	add	sp, #28
   2b90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b910:	fb00 fc07 	mul.w	ip, r0, r7
   2b914:	2301      	movs	r3, #1
   2b916:	fb06 cc01 	mla	ip, r6, r1, ip
   2b91a:	fba0 0106 	umull	r0, r1, r0, r6
   2b91e:	4461      	add	r1, ip
   2b920:	1900      	adds	r0, r0, r4
   2b922:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   2b926:	e7cf      	b.n	2b8c8 <_strtoll_l.isra.0+0xa4>
   2b928:	2322      	movs	r3, #34	; 0x22
   2b92a:	9a05      	ldr	r2, [sp, #20]
   2b92c:	6013      	str	r3, [r2, #0]
   2b92e:	9b01      	ldr	r3, [sp, #4]
   2b930:	b1cb      	cbz	r3, 2b966 <_strtoll_l.isra.0+0x142>
   2b932:	1e6b      	subs	r3, r5, #1
   2b934:	9802      	ldr	r0, [sp, #8]
   2b936:	4649      	mov	r1, r9
   2b938:	9303      	str	r3, [sp, #12]
   2b93a:	e7e2      	b.n	2b902 <_strtoll_l.isra.0+0xde>
   2b93c:	2300      	movs	r3, #0
   2b93e:	782c      	ldrb	r4, [r5, #0]
   2b940:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   2b944:	1c8d      	adds	r5, r1, #2
   2b946:	9302      	str	r3, [sp, #8]
   2b948:	2301      	movs	r3, #1
   2b94a:	9304      	str	r3, [sp, #16]
   2b94c:	e784      	b.n	2b858 <_strtoll_l.isra.0+0x34>
   2b94e:	782b      	ldrb	r3, [r5, #0]
   2b950:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b954:	2b58      	cmp	r3, #88	; 0x58
   2b956:	d10b      	bne.n	2b970 <_strtoll_l.isra.0+0x14c>
   2b958:	786c      	ldrb	r4, [r5, #1]
   2b95a:	2610      	movs	r6, #16
   2b95c:	2700      	movs	r7, #0
   2b95e:	3502      	adds	r5, #2
   2b960:	f04f 0810 	mov.w	r8, #16
   2b964:	e793      	b.n	2b88e <_strtoll_l.isra.0+0x6a>
   2b966:	9802      	ldr	r0, [sp, #8]
   2b968:	4649      	mov	r1, r9
   2b96a:	b007      	add	sp, #28
   2b96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b970:	f1b8 0f00 	cmp.w	r8, #0
   2b974:	d189      	bne.n	2b88a <_strtoll_l.isra.0+0x66>
   2b976:	2608      	movs	r6, #8
   2b978:	2700      	movs	r7, #0
   2b97a:	f04f 0808 	mov.w	r8, #8
   2b97e:	e786      	b.n	2b88e <_strtoll_l.isra.0+0x6a>
   2b980:	4689      	mov	r9, r1
   2b982:	9002      	str	r0, [sp, #8]
   2b984:	e7d5      	b.n	2b932 <_strtoll_l.isra.0+0x10e>
   2b986:	bf00      	nop
   2b988:	0002f5d9 	.word	0x0002f5d9

0002b98c <_strtoll_r>:
   2b98c:	f7ff bf4a 	b.w	2b824 <_strtoll_l.isra.0>

0002b990 <_strtoull_l.isra.0>:
   2b990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b994:	b085      	sub	sp, #20
   2b996:	468b      	mov	fp, r1
   2b998:	469a      	mov	sl, r3
   2b99a:	460d      	mov	r5, r1
   2b99c:	9201      	str	r2, [sp, #4]
   2b99e:	4a5d      	ldr	r2, [pc, #372]	; (2bb14 <_strtoull_l.isra.0+0x184>)
   2b9a0:	9003      	str	r0, [sp, #12]
   2b9a2:	4629      	mov	r1, r5
   2b9a4:	f815 4b01 	ldrb.w	r4, [r5], #1
   2b9a8:	5d13      	ldrb	r3, [r2, r4]
   2b9aa:	f013 0308 	ands.w	r3, r3, #8
   2b9ae:	d1f8      	bne.n	2b9a2 <_strtoull_l.isra.0+0x12>
   2b9b0:	2c2d      	cmp	r4, #45	; 0x2d
   2b9b2:	f000 8086 	beq.w	2bac2 <_strtoull_l.isra.0+0x132>
   2b9b6:	2c2b      	cmp	r4, #43	; 0x2b
   2b9b8:	d014      	beq.n	2b9e4 <_strtoull_l.isra.0+0x54>
   2b9ba:	9302      	str	r3, [sp, #8]
   2b9bc:	f03a 0310 	bics.w	r3, sl, #16
   2b9c0:	d117      	bne.n	2b9f2 <_strtoull_l.isra.0+0x62>
   2b9c2:	2c30      	cmp	r4, #48	; 0x30
   2b9c4:	f000 8082 	beq.w	2bacc <_strtoull_l.isra.0+0x13c>
   2b9c8:	f1ba 0f00 	cmp.w	sl, #0
   2b9cc:	d111      	bne.n	2b9f2 <_strtoull_l.isra.0+0x62>
   2b9ce:	2205      	movs	r2, #5
   2b9d0:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
   2b9d4:	4f50      	ldr	r7, [pc, #320]	; (2bb18 <_strtoull_l.isra.0+0x188>)
   2b9d6:	f04f 080a 	mov.w	r8, #10
   2b9da:	f04f 0900 	mov.w	r9, #0
   2b9de:	f04f 0a0a 	mov.w	sl, #10
   2b9e2:	e01c      	b.n	2ba1e <_strtoull_l.isra.0+0x8e>
   2b9e4:	9302      	str	r3, [sp, #8]
   2b9e6:	f03a 0310 	bics.w	r3, sl, #16
   2b9ea:	782c      	ldrb	r4, [r5, #0]
   2b9ec:	f101 0502 	add.w	r5, r1, #2
   2b9f0:	d0e7      	beq.n	2b9c2 <_strtoull_l.isra.0+0x32>
   2b9f2:	ea4f 79ea 	mov.w	r9, sl, asr #31
   2b9f6:	4652      	mov	r2, sl
   2b9f8:	f04f 30ff 	mov.w	r0, #4294967295
   2b9fc:	f04f 31ff 	mov.w	r1, #4294967295
   2ba00:	464b      	mov	r3, r9
   2ba02:	46d0      	mov	r8, sl
   2ba04:	f7e0 ff28 	bl	c858 <__aeabi_uldivmod>
   2ba08:	468c      	mov	ip, r1
   2ba0a:	4606      	mov	r6, r0
   2ba0c:	4652      	mov	r2, sl
   2ba0e:	464b      	mov	r3, r9
   2ba10:	f04f 30ff 	mov.w	r0, #4294967295
   2ba14:	f04f 31ff 	mov.w	r1, #4294967295
   2ba18:	4667      	mov	r7, ip
   2ba1a:	f7e0 ff1d 	bl	c858 <__aeabi_uldivmod>
   2ba1e:	2300      	movs	r3, #0
   2ba20:	2000      	movs	r0, #0
   2ba22:	2100      	movs	r1, #0
   2ba24:	46a4      	mov	ip, r4
   2ba26:	e013      	b.n	2ba50 <_strtoull_l.isra.0+0xc0>
   2ba28:	f1ac 0437 	sub.w	r4, ip, #55	; 0x37
   2ba2c:	45a2      	cmp	sl, r4
   2ba2e:	dd1f      	ble.n	2ba70 <_strtoull_l.isra.0+0xe0>
   2ba30:	2b00      	cmp	r3, #0
   2ba32:	db09      	blt.n	2ba48 <_strtoull_l.isra.0+0xb8>
   2ba34:	428f      	cmp	r7, r1
   2ba36:	bf08      	it	eq
   2ba38:	4286      	cmpeq	r6, r0
   2ba3a:	d305      	bcc.n	2ba48 <_strtoull_l.isra.0+0xb8>
   2ba3c:	42b9      	cmp	r1, r7
   2ba3e:	bf08      	it	eq
   2ba40:	42b0      	cmpeq	r0, r6
   2ba42:	d125      	bne.n	2ba90 <_strtoull_l.isra.0+0x100>
   2ba44:	4294      	cmp	r4, r2
   2ba46:	dd23      	ble.n	2ba90 <_strtoull_l.isra.0+0x100>
   2ba48:	f04f 33ff 	mov.w	r3, #4294967295
   2ba4c:	f815 cb01 	ldrb.w	ip, [r5], #1
   2ba50:	f1ac 0430 	sub.w	r4, ip, #48	; 0x30
   2ba54:	2c09      	cmp	r4, #9
   2ba56:	d9e9      	bls.n	2ba2c <_strtoull_l.isra.0+0x9c>
   2ba58:	f1ac 0441 	sub.w	r4, ip, #65	; 0x41
   2ba5c:	2c19      	cmp	r4, #25
   2ba5e:	d9e3      	bls.n	2ba28 <_strtoull_l.isra.0+0x98>
   2ba60:	f1ac 0461 	sub.w	r4, ip, #97	; 0x61
   2ba64:	2c19      	cmp	r4, #25
   2ba66:	d803      	bhi.n	2ba70 <_strtoull_l.isra.0+0xe0>
   2ba68:	f1ac 0457 	sub.w	r4, ip, #87	; 0x57
   2ba6c:	45a2      	cmp	sl, r4
   2ba6e:	dcdf      	bgt.n	2ba30 <_strtoull_l.isra.0+0xa0>
   2ba70:	1c5a      	adds	r2, r3, #1
   2ba72:	d019      	beq.n	2baa8 <_strtoull_l.isra.0+0x118>
   2ba74:	9a02      	ldr	r2, [sp, #8]
   2ba76:	b112      	cbz	r2, 2ba7e <_strtoull_l.isra.0+0xee>
   2ba78:	4240      	negs	r0, r0
   2ba7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2ba7e:	9a01      	ldr	r2, [sp, #4]
   2ba80:	b11a      	cbz	r2, 2ba8a <_strtoull_l.isra.0+0xfa>
   2ba82:	b9db      	cbnz	r3, 2babc <_strtoull_l.isra.0+0x12c>
   2ba84:	9b01      	ldr	r3, [sp, #4]
   2ba86:	f8c3 b000 	str.w	fp, [r3]
   2ba8a:	b005      	add	sp, #20
   2ba8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ba90:	fb00 fc09 	mul.w	ip, r0, r9
   2ba94:	2301      	movs	r3, #1
   2ba96:	fb08 cc01 	mla	ip, r8, r1, ip
   2ba9a:	fba0 0108 	umull	r0, r1, r0, r8
   2ba9e:	4461      	add	r1, ip
   2baa0:	1900      	adds	r0, r0, r4
   2baa2:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   2baa6:	e7d1      	b.n	2ba4c <_strtoull_l.isra.0+0xbc>
   2baa8:	2322      	movs	r3, #34	; 0x22
   2baaa:	9a03      	ldr	r2, [sp, #12]
   2baac:	f04f 30ff 	mov.w	r0, #4294967295
   2bab0:	f04f 31ff 	mov.w	r1, #4294967295
   2bab4:	6013      	str	r3, [r2, #0]
   2bab6:	9b01      	ldr	r3, [sp, #4]
   2bab8:	2b00      	cmp	r3, #0
   2baba:	d0e6      	beq.n	2ba8a <_strtoull_l.isra.0+0xfa>
   2babc:	f105 3bff 	add.w	fp, r5, #4294967295
   2bac0:	e7e0      	b.n	2ba84 <_strtoull_l.isra.0+0xf4>
   2bac2:	2301      	movs	r3, #1
   2bac4:	782c      	ldrb	r4, [r5, #0]
   2bac6:	1c8d      	adds	r5, r1, #2
   2bac8:	9302      	str	r3, [sp, #8]
   2baca:	e777      	b.n	2b9bc <_strtoull_l.isra.0+0x2c>
   2bacc:	782b      	ldrb	r3, [r5, #0]
   2bace:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2bad2:	2b58      	cmp	r3, #88	; 0x58
   2bad4:	d10d      	bne.n	2baf2 <_strtoull_l.isra.0+0x162>
   2bad6:	786c      	ldrb	r4, [r5, #1]
   2bad8:	220f      	movs	r2, #15
   2bada:	3502      	adds	r5, #2
   2badc:	f04f 36ff 	mov.w	r6, #4294967295
   2bae0:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   2bae4:	f04f 0810 	mov.w	r8, #16
   2bae8:	f04f 0900 	mov.w	r9, #0
   2baec:	f04f 0a10 	mov.w	sl, #16
   2baf0:	e795      	b.n	2ba1e <_strtoull_l.isra.0+0x8e>
   2baf2:	f1ba 0f00 	cmp.w	sl, #0
   2baf6:	f47f af7c 	bne.w	2b9f2 <_strtoull_l.isra.0+0x62>
   2bafa:	2207      	movs	r2, #7
   2bafc:	f04f 36ff 	mov.w	r6, #4294967295
   2bb00:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
   2bb04:	f04f 0808 	mov.w	r8, #8
   2bb08:	f04f 0900 	mov.w	r9, #0
   2bb0c:	f04f 0a08 	mov.w	sl, #8
   2bb10:	e785      	b.n	2ba1e <_strtoull_l.isra.0+0x8e>
   2bb12:	bf00      	nop
   2bb14:	0002f5d9 	.word	0x0002f5d9
   2bb18:	19999999 	.word	0x19999999

0002bb1c <_strtoull_r>:
   2bb1c:	f7ff bf38 	b.w	2b990 <_strtoull_l.isra.0>

0002bb20 <__ssprint_r>:
   2bb20:	6893      	ldr	r3, [r2, #8]
   2bb22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bb26:	4691      	mov	r9, r2
   2bb28:	b083      	sub	sp, #12
   2bb2a:	2b00      	cmp	r3, #0
   2bb2c:	d076      	beq.n	2bc1c <__ssprint_r+0xfc>
   2bb2e:	6817      	ldr	r7, [r2, #0]
   2bb30:	4680      	mov	r8, r0
   2bb32:	460c      	mov	r4, r1
   2bb34:	6808      	ldr	r0, [r1, #0]
   2bb36:	3708      	adds	r7, #8
   2bb38:	688d      	ldr	r5, [r1, #8]
   2bb3a:	e04b      	b.n	2bbd4 <__ssprint_r+0xb4>
   2bb3c:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   2bb40:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   2bb44:	d034      	beq.n	2bbb0 <__ssprint_r+0x90>
   2bb46:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2bb4a:	eb12 0242 	adds.w	r2, r2, r2, lsl #1
   2bb4e:	eba0 0501 	sub.w	r5, r0, r1
   2bb52:	bf48      	it	mi
   2bb54:	3201      	addmi	r2, #1
   2bb56:	19a8      	adds	r0, r5, r6
   2bb58:	ea4f 0b62 	mov.w	fp, r2, asr #1
   2bb5c:	3001      	adds	r0, #1
   2bb5e:	4558      	cmp	r0, fp
   2bb60:	465a      	mov	r2, fp
   2bb62:	d901      	bls.n	2bb68 <__ssprint_r+0x48>
   2bb64:	4683      	mov	fp, r0
   2bb66:	4602      	mov	r2, r0
   2bb68:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   2bb6c:	9301      	str	r3, [sp, #4]
   2bb6e:	d03b      	beq.n	2bbe8 <__ssprint_r+0xc8>
   2bb70:	4611      	mov	r1, r2
   2bb72:	4640      	mov	r0, r8
   2bb74:	f7f9 ff48 	bl	25a08 <_malloc_r>
   2bb78:	9b01      	ldr	r3, [sp, #4]
   2bb7a:	4682      	mov	sl, r0
   2bb7c:	2800      	cmp	r0, #0
   2bb7e:	d03e      	beq.n	2bbfe <__ssprint_r+0xde>
   2bb80:	462a      	mov	r2, r5
   2bb82:	6921      	ldr	r1, [r4, #16]
   2bb84:	9301      	str	r3, [sp, #4]
   2bb86:	f7e0 ffe1 	bl	cb4c <memcpy>
   2bb8a:	89a2      	ldrh	r2, [r4, #12]
   2bb8c:	9b01      	ldr	r3, [sp, #4]
   2bb8e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2bb92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2bb96:	81a2      	strh	r2, [r4, #12]
   2bb98:	eb0a 0005 	add.w	r0, sl, r5
   2bb9c:	ebab 0205 	sub.w	r2, fp, r5
   2bba0:	f8c4 a010 	str.w	sl, [r4, #16]
   2bba4:	4635      	mov	r5, r6
   2bba6:	46b2      	mov	sl, r6
   2bba8:	6020      	str	r0, [r4, #0]
   2bbaa:	60a2      	str	r2, [r4, #8]
   2bbac:	f8c4 b014 	str.w	fp, [r4, #20]
   2bbb0:	4619      	mov	r1, r3
   2bbb2:	4652      	mov	r2, sl
   2bbb4:	f7ff f806 	bl	2abc4 <memmove>
   2bbb8:	68a0      	ldr	r0, [r4, #8]
   2bbba:	f8d9 1008 	ldr.w	r1, [r9, #8]
   2bbbe:	6823      	ldr	r3, [r4, #0]
   2bbc0:	1b45      	subs	r5, r0, r5
   2bbc2:	1b8e      	subs	r6, r1, r6
   2bbc4:	eb03 000a 	add.w	r0, r3, sl
   2bbc8:	60a5      	str	r5, [r4, #8]
   2bbca:	6020      	str	r0, [r4, #0]
   2bbcc:	f8c9 6008 	str.w	r6, [r9, #8]
   2bbd0:	b326      	cbz	r6, 2bc1c <__ssprint_r+0xfc>
   2bbd2:	3708      	adds	r7, #8
   2bbd4:	e957 3602 	ldrd	r3, r6, [r7, #-8]
   2bbd8:	2e00      	cmp	r6, #0
   2bbda:	d0fa      	beq.n	2bbd2 <__ssprint_r+0xb2>
   2bbdc:	42b5      	cmp	r5, r6
   2bbde:	46aa      	mov	sl, r5
   2bbe0:	d9ac      	bls.n	2bb3c <__ssprint_r+0x1c>
   2bbe2:	4635      	mov	r5, r6
   2bbe4:	46b2      	mov	sl, r6
   2bbe6:	e7e3      	b.n	2bbb0 <__ssprint_r+0x90>
   2bbe8:	4640      	mov	r0, r8
   2bbea:	f7fa faab 	bl	26144 <_realloc_r>
   2bbee:	9b01      	ldr	r3, [sp, #4]
   2bbf0:	4682      	mov	sl, r0
   2bbf2:	2800      	cmp	r0, #0
   2bbf4:	d1d0      	bne.n	2bb98 <__ssprint_r+0x78>
   2bbf6:	6921      	ldr	r1, [r4, #16]
   2bbf8:	4640      	mov	r0, r8
   2bbfa:	f7fe f86f 	bl	29cdc <_free_r>
   2bbfe:	230c      	movs	r3, #12
   2bc00:	2200      	movs	r2, #0
   2bc02:	f04f 30ff 	mov.w	r0, #4294967295
   2bc06:	f8c8 3000 	str.w	r3, [r8]
   2bc0a:	89a3      	ldrh	r3, [r4, #12]
   2bc0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2bc10:	81a3      	strh	r3, [r4, #12]
   2bc12:	e9c9 2201 	strd	r2, r2, [r9, #4]
   2bc16:	b003      	add	sp, #12
   2bc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bc1c:	2000      	movs	r0, #0
   2bc1e:	f8c9 0004 	str.w	r0, [r9, #4]
   2bc22:	b003      	add	sp, #12
   2bc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002bc28 <_sungetc_r>:
   2bc28:	b538      	push	{r3, r4, r5, lr}
   2bc2a:	1c4b      	adds	r3, r1, #1
   2bc2c:	d01a      	beq.n	2bc64 <_sungetc_r+0x3c>
   2bc2e:	8993      	ldrh	r3, [r2, #12]
   2bc30:	4614      	mov	r4, r2
   2bc32:	6b12      	ldr	r2, [r2, #48]	; 0x30
   2bc34:	b2cd      	uxtb	r5, r1
   2bc36:	f023 0320 	bic.w	r3, r3, #32
   2bc3a:	81a3      	strh	r3, [r4, #12]
   2bc3c:	b1aa      	cbz	r2, 2bc6a <_sungetc_r+0x42>
   2bc3e:	6862      	ldr	r2, [r4, #4]
   2bc40:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2bc42:	429a      	cmp	r2, r3
   2bc44:	da09      	bge.n	2bc5a <_sungetc_r+0x32>
   2bc46:	6823      	ldr	r3, [r4, #0]
   2bc48:	1e5a      	subs	r2, r3, #1
   2bc4a:	6022      	str	r2, [r4, #0]
   2bc4c:	f803 5c01 	strb.w	r5, [r3, #-1]
   2bc50:	6863      	ldr	r3, [r4, #4]
   2bc52:	3301      	adds	r3, #1
   2bc54:	6063      	str	r3, [r4, #4]
   2bc56:	4628      	mov	r0, r5
   2bc58:	bd38      	pop	{r3, r4, r5, pc}
   2bc5a:	4621      	mov	r1, r4
   2bc5c:	f000 f884 	bl	2bd68 <__submore>
   2bc60:	2800      	cmp	r0, #0
   2bc62:	d0f0      	beq.n	2bc46 <_sungetc_r+0x1e>
   2bc64:	f04f 35ff 	mov.w	r5, #4294967295
   2bc68:	e7f5      	b.n	2bc56 <_sungetc_r+0x2e>
   2bc6a:	6922      	ldr	r2, [r4, #16]
   2bc6c:	6823      	ldr	r3, [r4, #0]
   2bc6e:	b12a      	cbz	r2, 2bc7c <_sungetc_r+0x54>
   2bc70:	429a      	cmp	r2, r3
   2bc72:	d203      	bcs.n	2bc7c <_sungetc_r+0x54>
   2bc74:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   2bc78:	42aa      	cmp	r2, r5
   2bc7a:	d00f      	beq.n	2bc9c <_sungetc_r+0x74>
   2bc7c:	6862      	ldr	r2, [r4, #4]
   2bc7e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   2bc82:	63a3      	str	r3, [r4, #56]	; 0x38
   2bc84:	2103      	movs	r1, #3
   2bc86:	4623      	mov	r3, r4
   2bc88:	63e2      	str	r2, [r4, #60]	; 0x3c
   2bc8a:	2201      	movs	r2, #1
   2bc8c:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
   2bc90:	f803 5f42 	strb.w	r5, [r3, #66]!
   2bc94:	4628      	mov	r0, r5
   2bc96:	e9c4 3200 	strd	r3, r2, [r4]
   2bc9a:	bd38      	pop	{r3, r4, r5, pc}
   2bc9c:	6862      	ldr	r2, [r4, #4]
   2bc9e:	3b01      	subs	r3, #1
   2bca0:	3201      	adds	r2, #1
   2bca2:	e9c4 3200 	strd	r3, r2, [r4]
   2bca6:	e7d6      	b.n	2bc56 <_sungetc_r+0x2e>

0002bca8 <__ssrefill_r>:
   2bca8:	b510      	push	{r4, lr}
   2bcaa:	460c      	mov	r4, r1
   2bcac:	6b09      	ldr	r1, [r1, #48]	; 0x30
   2bcae:	b169      	cbz	r1, 2bccc <__ssrefill_r+0x24>
   2bcb0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2bcb4:	4299      	cmp	r1, r3
   2bcb6:	d001      	beq.n	2bcbc <__ssrefill_r+0x14>
   2bcb8:	f7fe f810 	bl	29cdc <_free_r>
   2bcbc:	2000      	movs	r0, #0
   2bcbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2bcc0:	6320      	str	r0, [r4, #48]	; 0x30
   2bcc2:	6063      	str	r3, [r4, #4]
   2bcc4:	b113      	cbz	r3, 2bccc <__ssrefill_r+0x24>
   2bcc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2bcc8:	6023      	str	r3, [r4, #0]
   2bcca:	bd10      	pop	{r4, pc}
   2bccc:	89a3      	ldrh	r3, [r4, #12]
   2bcce:	2100      	movs	r1, #0
   2bcd0:	6922      	ldr	r2, [r4, #16]
   2bcd2:	f04f 30ff 	mov.w	r0, #4294967295
   2bcd6:	f043 0320 	orr.w	r3, r3, #32
   2bcda:	e9c4 2100 	strd	r2, r1, [r4]
   2bcde:	81a3      	strh	r3, [r4, #12]
   2bce0:	bd10      	pop	{r4, pc}
   2bce2:	bf00      	nop

0002bce4 <_sfread_r>:
   2bce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bce8:	fb02 fa03 	mul.w	sl, r2, r3
   2bcec:	b083      	sub	sp, #12
   2bcee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2bcf0:	e9cd 3200 	strd	r3, r2, [sp]
   2bcf4:	f1ba 0f00 	cmp.w	sl, #0
   2bcf8:	d027      	beq.n	2bd4a <_sfread_r+0x66>
   2bcfa:	4680      	mov	r8, r0
   2bcfc:	460e      	mov	r6, r1
   2bcfe:	4657      	mov	r7, sl
   2bd00:	f04f 0900 	mov.w	r9, #0
   2bd04:	e00e      	b.n	2bd24 <_sfread_r+0x40>
   2bd06:	6821      	ldr	r1, [r4, #0]
   2bd08:	442e      	add	r6, r5
   2bd0a:	f7e0 ff1f 	bl	cb4c <memcpy>
   2bd0e:	6823      	ldr	r3, [r4, #0]
   2bd10:	4621      	mov	r1, r4
   2bd12:	4640      	mov	r0, r8
   2bd14:	442b      	add	r3, r5
   2bd16:	f8c4 9004 	str.w	r9, [r4, #4]
   2bd1a:	6023      	str	r3, [r4, #0]
   2bd1c:	f7ff ffc4 	bl	2bca8 <__ssrefill_r>
   2bd20:	b9b8      	cbnz	r0, 2bd52 <_sfread_r+0x6e>
   2bd22:	465f      	mov	r7, fp
   2bd24:	6865      	ldr	r5, [r4, #4]
   2bd26:	4630      	mov	r0, r6
   2bd28:	42bd      	cmp	r5, r7
   2bd2a:	462a      	mov	r2, r5
   2bd2c:	eba7 0b05 	sub.w	fp, r7, r5
   2bd30:	d3e9      	bcc.n	2bd06 <_sfread_r+0x22>
   2bd32:	463a      	mov	r2, r7
   2bd34:	6821      	ldr	r1, [r4, #0]
   2bd36:	f8dd a000 	ldr.w	sl, [sp]
   2bd3a:	f7e0 ff07 	bl	cb4c <memcpy>
   2bd3e:	e9d4 3200 	ldrd	r3, r2, [r4]
   2bd42:	1bd2      	subs	r2, r2, r7
   2bd44:	441f      	add	r7, r3
   2bd46:	e9c4 7200 	strd	r7, r2, [r4]
   2bd4a:	4650      	mov	r0, sl
   2bd4c:	b003      	add	sp, #12
   2bd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bd52:	44aa      	add	sl, r5
   2bd54:	9b01      	ldr	r3, [sp, #4]
   2bd56:	ebaa 0707 	sub.w	r7, sl, r7
   2bd5a:	fbb7 faf3 	udiv	sl, r7, r3
   2bd5e:	4650      	mov	r0, sl
   2bd60:	b003      	add	sp, #12
   2bd62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bd66:	bf00      	nop

0002bd68 <__submore>:
   2bd68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bd6c:	460c      	mov	r4, r1
   2bd6e:	6b09      	ldr	r1, [r1, #48]	; 0x30
   2bd70:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2bd74:	4299      	cmp	r1, r3
   2bd76:	d014      	beq.n	2bda2 <__submore+0x3a>
   2bd78:	6b66      	ldr	r6, [r4, #52]	; 0x34
   2bd7a:	0077      	lsls	r7, r6, #1
   2bd7c:	463a      	mov	r2, r7
   2bd7e:	f7fa f9e1 	bl	26144 <_realloc_r>
   2bd82:	4605      	mov	r5, r0
   2bd84:	b348      	cbz	r0, 2bdda <__submore+0x72>
   2bd86:	eb00 0806 	add.w	r8, r0, r6
   2bd8a:	4601      	mov	r1, r0
   2bd8c:	4632      	mov	r2, r6
   2bd8e:	4640      	mov	r0, r8
   2bd90:	f7e0 fedc 	bl	cb4c <memcpy>
   2bd94:	2000      	movs	r0, #0
   2bd96:	f8c4 8000 	str.w	r8, [r4]
   2bd9a:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   2bd9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bda2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2bda6:	f7f9 fe2f 	bl	25a08 <_malloc_r>
   2bdaa:	4603      	mov	r3, r0
   2bdac:	b1a8      	cbz	r0, 2bdda <__submore+0x72>
   2bdae:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
   2bdb2:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2bdb6:	6323      	str	r3, [r4, #48]	; 0x30
   2bdb8:	f203 32fd 	addw	r2, r3, #1021	; 0x3fd
   2bdbc:	6360      	str	r0, [r4, #52]	; 0x34
   2bdbe:	2000      	movs	r0, #0
   2bdc0:	f883 13ff 	strb.w	r1, [r3, #1023]	; 0x3ff
   2bdc4:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
   2bdc8:	f883 13fe 	strb.w	r1, [r3, #1022]	; 0x3fe
   2bdcc:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   2bdd0:	f883 13fd 	strb.w	r1, [r3, #1021]	; 0x3fd
   2bdd4:	6022      	str	r2, [r4, #0]
   2bdd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bdda:	f04f 30ff 	mov.w	r0, #4294967295
   2bdde:	e7de      	b.n	2bd9e <__submore+0x36>

0002bde0 <__swbuf_r>:
   2bde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bde2:	460d      	mov	r5, r1
   2bde4:	4614      	mov	r4, r2
   2bde6:	4606      	mov	r6, r0
   2bde8:	b110      	cbz	r0, 2bdf0 <__swbuf_r+0x10>
   2bdea:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2bdec:	2b00      	cmp	r3, #0
   2bdee:	d043      	beq.n	2be78 <__swbuf_r+0x98>
   2bdf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2bdf4:	69a3      	ldr	r3, [r4, #24]
   2bdf6:	0717      	lsls	r7, r2, #28
   2bdf8:	b290      	uxth	r0, r2
   2bdfa:	60a3      	str	r3, [r4, #8]
   2bdfc:	d51b      	bpl.n	2be36 <__swbuf_r+0x56>
   2bdfe:	6923      	ldr	r3, [r4, #16]
   2be00:	b1cb      	cbz	r3, 2be36 <__swbuf_r+0x56>
   2be02:	b2ed      	uxtb	r5, r5
   2be04:	0481      	lsls	r1, r0, #18
   2be06:	462f      	mov	r7, r5
   2be08:	d522      	bpl.n	2be50 <__swbuf_r+0x70>
   2be0a:	6822      	ldr	r2, [r4, #0]
   2be0c:	6961      	ldr	r1, [r4, #20]
   2be0e:	1ad3      	subs	r3, r2, r3
   2be10:	4299      	cmp	r1, r3
   2be12:	dd29      	ble.n	2be68 <__swbuf_r+0x88>
   2be14:	3301      	adds	r3, #1
   2be16:	68a1      	ldr	r1, [r4, #8]
   2be18:	1c50      	adds	r0, r2, #1
   2be1a:	3901      	subs	r1, #1
   2be1c:	6020      	str	r0, [r4, #0]
   2be1e:	60a1      	str	r1, [r4, #8]
   2be20:	7015      	strb	r5, [r2, #0]
   2be22:	6962      	ldr	r2, [r4, #20]
   2be24:	429a      	cmp	r2, r3
   2be26:	d02a      	beq.n	2be7e <__swbuf_r+0x9e>
   2be28:	2d0a      	cmp	r5, #10
   2be2a:	d102      	bne.n	2be32 <__swbuf_r+0x52>
   2be2c:	7b23      	ldrb	r3, [r4, #12]
   2be2e:	07db      	lsls	r3, r3, #31
   2be30:	d425      	bmi.n	2be7e <__swbuf_r+0x9e>
   2be32:	4638      	mov	r0, r7
   2be34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2be36:	4621      	mov	r1, r4
   2be38:	4630      	mov	r0, r6
   2be3a:	f7fd fc23 	bl	29684 <__swsetup_r>
   2be3e:	bb20      	cbnz	r0, 2be8a <__swbuf_r+0xaa>
   2be40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2be44:	b2ed      	uxtb	r5, r5
   2be46:	6923      	ldr	r3, [r4, #16]
   2be48:	b290      	uxth	r0, r2
   2be4a:	462f      	mov	r7, r5
   2be4c:	0481      	lsls	r1, r0, #18
   2be4e:	d4dc      	bmi.n	2be0a <__swbuf_r+0x2a>
   2be50:	6e61      	ldr	r1, [r4, #100]	; 0x64
   2be52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2be56:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   2be5a:	81a2      	strh	r2, [r4, #12]
   2be5c:	6822      	ldr	r2, [r4, #0]
   2be5e:	6661      	str	r1, [r4, #100]	; 0x64
   2be60:	1ad3      	subs	r3, r2, r3
   2be62:	6961      	ldr	r1, [r4, #20]
   2be64:	4299      	cmp	r1, r3
   2be66:	dcd5      	bgt.n	2be14 <__swbuf_r+0x34>
   2be68:	4621      	mov	r1, r4
   2be6a:	4630      	mov	r0, r6
   2be6c:	f7fd fdc8 	bl	29a00 <_fflush_r>
   2be70:	b958      	cbnz	r0, 2be8a <__swbuf_r+0xaa>
   2be72:	6822      	ldr	r2, [r4, #0]
   2be74:	2301      	movs	r3, #1
   2be76:	e7ce      	b.n	2be16 <__swbuf_r+0x36>
   2be78:	f7fd fe20 	bl	29abc <__sinit>
   2be7c:	e7b8      	b.n	2bdf0 <__swbuf_r+0x10>
   2be7e:	4621      	mov	r1, r4
   2be80:	4630      	mov	r0, r6
   2be82:	f7fd fdbd 	bl	29a00 <_fflush_r>
   2be86:	2800      	cmp	r0, #0
   2be88:	d0d3      	beq.n	2be32 <__swbuf_r+0x52>
   2be8a:	f04f 37ff 	mov.w	r7, #4294967295
   2be8e:	e7d0      	b.n	2be32 <__swbuf_r+0x52>

0002be90 <_wcrtomb_r>:
   2be90:	b5f0      	push	{r4, r5, r6, r7, lr}
   2be92:	4606      	mov	r6, r0
   2be94:	b085      	sub	sp, #20
   2be96:	461d      	mov	r5, r3
   2be98:	b139      	cbz	r1, 2beaa <_wcrtomb_r+0x1a>
   2be9a:	4c0b      	ldr	r4, [pc, #44]	; (2bec8 <_wcrtomb_r+0x38>)
   2be9c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   2bea0:	47a0      	blx	r4
   2bea2:	1c43      	adds	r3, r0, #1
   2bea4:	d009      	beq.n	2beba <_wcrtomb_r+0x2a>
   2bea6:	b005      	add	sp, #20
   2bea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2beaa:	4f07      	ldr	r7, [pc, #28]	; (2bec8 <_wcrtomb_r+0x38>)
   2beac:	460a      	mov	r2, r1
   2beae:	a901      	add	r1, sp, #4
   2beb0:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
   2beb4:	47a0      	blx	r4
   2beb6:	1c43      	adds	r3, r0, #1
   2beb8:	d1f5      	bne.n	2bea6 <_wcrtomb_r+0x16>
   2beba:	2200      	movs	r2, #0
   2bebc:	238a      	movs	r3, #138	; 0x8a
   2bebe:	602a      	str	r2, [r5, #0]
   2bec0:	6033      	str	r3, [r6, #0]
   2bec2:	b005      	add	sp, #20
   2bec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2bec6:	bf00      	nop
   2bec8:	200208f0 	.word	0x200208f0

0002becc <__ascii_wctomb>:
   2becc:	4603      	mov	r3, r0
   2bece:	b149      	cbz	r1, 2bee4 <__ascii_wctomb+0x18>
   2bed0:	2aff      	cmp	r2, #255	; 0xff
   2bed2:	d802      	bhi.n	2beda <__ascii_wctomb+0xe>
   2bed4:	2001      	movs	r0, #1
   2bed6:	700a      	strb	r2, [r1, #0]
   2bed8:	4770      	bx	lr
   2beda:	228a      	movs	r2, #138	; 0x8a
   2bedc:	f04f 30ff 	mov.w	r0, #4294967295
   2bee0:	601a      	str	r2, [r3, #0]
   2bee2:	4770      	bx	lr
   2bee4:	4608      	mov	r0, r1
   2bee6:	4770      	bx	lr

0002bee8 <_calloc_r>:
   2bee8:	b510      	push	{r4, lr}
   2beea:	fb02 f101 	mul.w	r1, r2, r1
   2beee:	f7f9 fd8b 	bl	25a08 <_malloc_r>
   2bef2:	4604      	mov	r4, r0
   2bef4:	b168      	cbz	r0, 2bf12 <_calloc_r+0x2a>
   2bef6:	f850 2c04 	ldr.w	r2, [r0, #-4]
   2befa:	f022 0203 	bic.w	r2, r2, #3
   2befe:	3a04      	subs	r2, #4
   2bf00:	2a24      	cmp	r2, #36	; 0x24
   2bf02:	d814      	bhi.n	2bf2e <_calloc_r+0x46>
   2bf04:	2a13      	cmp	r2, #19
   2bf06:	d806      	bhi.n	2bf16 <_calloc_r+0x2e>
   2bf08:	4602      	mov	r2, r0
   2bf0a:	2300      	movs	r3, #0
   2bf0c:	e9c2 3300 	strd	r3, r3, [r2]
   2bf10:	6093      	str	r3, [r2, #8]
   2bf12:	4620      	mov	r0, r4
   2bf14:	bd10      	pop	{r4, pc}
   2bf16:	2300      	movs	r3, #0
   2bf18:	2a1b      	cmp	r2, #27
   2bf1a:	e9c0 3300 	strd	r3, r3, [r0]
   2bf1e:	d90b      	bls.n	2bf38 <_calloc_r+0x50>
   2bf20:	2a24      	cmp	r2, #36	; 0x24
   2bf22:	e9c0 3302 	strd	r3, r3, [r0, #8]
   2bf26:	d00a      	beq.n	2bf3e <_calloc_r+0x56>
   2bf28:	f100 0210 	add.w	r2, r0, #16
   2bf2c:	e7ed      	b.n	2bf0a <_calloc_r+0x22>
   2bf2e:	2100      	movs	r1, #0
   2bf30:	f7fa f8a4 	bl	2607c <memset>
   2bf34:	4620      	mov	r0, r4
   2bf36:	bd10      	pop	{r4, pc}
   2bf38:	f100 0208 	add.w	r2, r0, #8
   2bf3c:	e7e5      	b.n	2bf0a <_calloc_r+0x22>
   2bf3e:	f100 0218 	add.w	r2, r0, #24
   2bf42:	6103      	str	r3, [r0, #16]
   2bf44:	6143      	str	r3, [r0, #20]
   2bf46:	e7e0      	b.n	2bf0a <_calloc_r+0x22>

0002bf48 <_fclose_r>:
   2bf48:	b570      	push	{r4, r5, r6, lr}
   2bf4a:	2900      	cmp	r1, #0
   2bf4c:	d04b      	beq.n	2bfe6 <_fclose_r+0x9e>
   2bf4e:	460c      	mov	r4, r1
   2bf50:	4605      	mov	r5, r0
   2bf52:	b110      	cbz	r0, 2bf5a <_fclose_r+0x12>
   2bf54:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2bf56:	2b00      	cmp	r3, #0
   2bf58:	d048      	beq.n	2bfec <_fclose_r+0xa4>
   2bf5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2bf5c:	07d8      	lsls	r0, r3, #31
   2bf5e:	d534      	bpl.n	2bfca <_fclose_r+0x82>
   2bf60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2bf64:	2b00      	cmp	r3, #0
   2bf66:	d03e      	beq.n	2bfe6 <_fclose_r+0x9e>
   2bf68:	4621      	mov	r1, r4
   2bf6a:	4628      	mov	r0, r5
   2bf6c:	f7fd fca6 	bl	298bc <__sflush_r>
   2bf70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2bf72:	4606      	mov	r6, r0
   2bf74:	b133      	cbz	r3, 2bf84 <_fclose_r+0x3c>
   2bf76:	69e1      	ldr	r1, [r4, #28]
   2bf78:	4628      	mov	r0, r5
   2bf7a:	4798      	blx	r3
   2bf7c:	2800      	cmp	r0, #0
   2bf7e:	bfb8      	it	lt
   2bf80:	f04f 36ff 	movlt.w	r6, #4294967295
   2bf84:	89a3      	ldrh	r3, [r4, #12]
   2bf86:	061a      	lsls	r2, r3, #24
   2bf88:	d43b      	bmi.n	2c002 <_fclose_r+0xba>
   2bf8a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2bf8c:	b141      	cbz	r1, 2bfa0 <_fclose_r+0x58>
   2bf8e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2bf92:	4299      	cmp	r1, r3
   2bf94:	d002      	beq.n	2bf9c <_fclose_r+0x54>
   2bf96:	4628      	mov	r0, r5
   2bf98:	f7fd fea0 	bl	29cdc <_free_r>
   2bf9c:	2300      	movs	r3, #0
   2bf9e:	6323      	str	r3, [r4, #48]	; 0x30
   2bfa0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   2bfa2:	b121      	cbz	r1, 2bfae <_fclose_r+0x66>
   2bfa4:	4628      	mov	r0, r5
   2bfa6:	f7fd fe99 	bl	29cdc <_free_r>
   2bfaa:	2300      	movs	r3, #0
   2bfac:	6463      	str	r3, [r4, #68]	; 0x44
   2bfae:	f7fd fdb5 	bl	29b1c <__sfp_lock_acquire>
   2bfb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2bfb4:	2200      	movs	r2, #0
   2bfb6:	07db      	lsls	r3, r3, #31
   2bfb8:	81a2      	strh	r2, [r4, #12]
   2bfba:	d527      	bpl.n	2c00c <_fclose_r+0xc4>
   2bfbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2bfbe:	f7fe fd31 	bl	2aa24 <__retarget_lock_close_recursive>
   2bfc2:	f7fd fdb1 	bl	29b28 <__sfp_lock_release>
   2bfc6:	4630      	mov	r0, r6
   2bfc8:	bd70      	pop	{r4, r5, r6, pc}
   2bfca:	89a3      	ldrh	r3, [r4, #12]
   2bfcc:	0599      	lsls	r1, r3, #22
   2bfce:	d4cb      	bmi.n	2bf68 <_fclose_r+0x20>
   2bfd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2bfd2:	f7fe fd29 	bl	2aa28 <__retarget_lock_acquire_recursive>
   2bfd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2bfda:	2b00      	cmp	r3, #0
   2bfdc:	d1c4      	bne.n	2bf68 <_fclose_r+0x20>
   2bfde:	6e66      	ldr	r6, [r4, #100]	; 0x64
   2bfe0:	f016 0601 	ands.w	r6, r6, #1
   2bfe4:	d008      	beq.n	2bff8 <_fclose_r+0xb0>
   2bfe6:	2600      	movs	r6, #0
   2bfe8:	4630      	mov	r0, r6
   2bfea:	bd70      	pop	{r4, r5, r6, pc}
   2bfec:	f7fd fd66 	bl	29abc <__sinit>
   2bff0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2bff2:	07d8      	lsls	r0, r3, #31
   2bff4:	d4b4      	bmi.n	2bf60 <_fclose_r+0x18>
   2bff6:	e7e8      	b.n	2bfca <_fclose_r+0x82>
   2bff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2bffa:	f7fe fd17 	bl	2aa2c <__retarget_lock_release_recursive>
   2bffe:	4630      	mov	r0, r6
   2c000:	bd70      	pop	{r4, r5, r6, pc}
   2c002:	6921      	ldr	r1, [r4, #16]
   2c004:	4628      	mov	r0, r5
   2c006:	f7fd fe69 	bl	29cdc <_free_r>
   2c00a:	e7be      	b.n	2bf8a <_fclose_r+0x42>
   2c00c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2c00e:	f7fe fd0d 	bl	2aa2c <__retarget_lock_release_recursive>
   2c012:	e7d3      	b.n	2bfbc <_fclose_r+0x74>

0002c014 <_fstat_r>:
   2c014:	b570      	push	{r4, r5, r6, lr}
   2c016:	460c      	mov	r4, r1
   2c018:	4603      	mov	r3, r0
   2c01a:	4d08      	ldr	r5, [pc, #32]	; (2c03c <_fstat_r+0x28>)
   2c01c:	2600      	movs	r6, #0
   2c01e:	4620      	mov	r0, r4
   2c020:	4611      	mov	r1, r2
   2c022:	461c      	mov	r4, r3
   2c024:	602e      	str	r6, [r5, #0]
   2c026:	f000 fe8f 	bl	2cd48 <_fstat>
   2c02a:	1c43      	adds	r3, r0, #1
   2c02c:	d000      	beq.n	2c030 <_fstat_r+0x1c>
   2c02e:	bd70      	pop	{r4, r5, r6, pc}
   2c030:	682b      	ldr	r3, [r5, #0]
   2c032:	2b00      	cmp	r3, #0
   2c034:	d0fb      	beq.n	2c02e <_fstat_r+0x1a>
   2c036:	6023      	str	r3, [r4, #0]
   2c038:	bd70      	pop	{r4, r5, r6, pc}
   2c03a:	bf00      	nop
   2c03c:	2002640c 	.word	0x2002640c

0002c040 <_isatty_r>:
   2c040:	b538      	push	{r3, r4, r5, lr}
   2c042:	2200      	movs	r2, #0
   2c044:	4d06      	ldr	r5, [pc, #24]	; (2c060 <_isatty_r+0x20>)
   2c046:	4604      	mov	r4, r0
   2c048:	4608      	mov	r0, r1
   2c04a:	602a      	str	r2, [r5, #0]
   2c04c:	f000 fe76 	bl	2cd3c <_isatty>
   2c050:	1c43      	adds	r3, r0, #1
   2c052:	d000      	beq.n	2c056 <_isatty_r+0x16>
   2c054:	bd38      	pop	{r3, r4, r5, pc}
   2c056:	682b      	ldr	r3, [r5, #0]
   2c058:	2b00      	cmp	r3, #0
   2c05a:	d0fb      	beq.n	2c054 <_isatty_r+0x14>
   2c05c:	6023      	str	r3, [r4, #0]
   2c05e:	bd38      	pop	{r3, r4, r5, pc}
   2c060:	2002640c 	.word	0x2002640c

0002c064 <sys_notify_validate>:
	if (notify == NULL) {
   2c064:	b140      	cbz	r0, 2c078 <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2c066:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2c068:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   2c06c:	2b02      	cmp	r3, #2
   2c06e:	d006      	beq.n	2c07e <sys_notify_validate+0x1a>
   2c070:	2b03      	cmp	r3, #3
   2c072:	d004      	beq.n	2c07e <sys_notify_validate+0x1a>
   2c074:	2b01      	cmp	r3, #1
   2c076:	d005      	beq.n	2c084 <sys_notify_validate+0x20>
		return -EINVAL;
   2c078:	f06f 0015 	mvn.w	r0, #21
}
   2c07c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2c07e:	6803      	ldr	r3, [r0, #0]
   2c080:	2b00      	cmp	r3, #0
   2c082:	d0f9      	beq.n	2c078 <sys_notify_validate+0x14>
		notify->result = 0;
   2c084:	2300      	movs	r3, #0
   2c086:	6083      	str	r3, [r0, #8]
   2c088:	4618      	mov	r0, r3
   2c08a:	4770      	bx	lr

0002c08c <arch_printk_char_out>:
}
   2c08c:	2000      	movs	r0, #0
   2c08e:	4770      	bx	lr

0002c090 <str_out>:
{
   2c090:	b530      	push	{r4, r5, lr}
   2c092:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2c094:	680c      	ldr	r4, [r1, #0]
   2c096:	1c55      	adds	r5, r2, #1
   2c098:	b114      	cbz	r4, 2c0a0 <str_out+0x10>
   2c09a:	684b      	ldr	r3, [r1, #4]
   2c09c:	4293      	cmp	r3, r2
   2c09e:	dc01      	bgt.n	2c0a4 <str_out+0x14>
		ctx->count++;
   2c0a0:	608d      	str	r5, [r1, #8]
}
   2c0a2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2c0a4:	3b01      	subs	r3, #1
   2c0a6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2c0a8:	bf08      	it	eq
   2c0aa:	2200      	moveq	r2, #0
   2c0ac:	608d      	str	r5, [r1, #8]
   2c0ae:	bf0c      	ite	eq
   2c0b0:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2c0b2:	54a0      	strbne	r0, [r4, r2]
   2c0b4:	e7f5      	b.n	2c0a2 <str_out+0x12>

0002c0b6 <printk>:
{
   2c0b6:	b40f      	push	{r0, r1, r2, r3}
   2c0b8:	b507      	push	{r0, r1, r2, lr}
   2c0ba:	a904      	add	r1, sp, #16
   2c0bc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2c0c0:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   2c0c2:	f7e6 f97f 	bl	123c4 <vprintk>
}
   2c0c6:	b003      	add	sp, #12
   2c0c8:	f85d eb04 	ldr.w	lr, [sp], #4
   2c0cc:	b004      	add	sp, #16
   2c0ce:	4770      	bx	lr

0002c0d0 <snprintk>:
{
   2c0d0:	b40c      	push	{r2, r3}
   2c0d2:	b507      	push	{r0, r1, r2, lr}
   2c0d4:	ab04      	add	r3, sp, #16
   2c0d6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2c0da:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2c0dc:	f7e6 f980 	bl	123e0 <vsnprintk>
}
   2c0e0:	b003      	add	sp, #12
   2c0e2:	f85d eb04 	ldr.w	lr, [sp], #4
   2c0e6:	b002      	add	sp, #8
   2c0e8:	4770      	bx	lr

0002c0ea <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2c0ea:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2c0ec:	f013 0307 	ands.w	r3, r3, #7
   2c0f0:	d105      	bne.n	2c0fe <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2c0f2:	6803      	ldr	r3, [r0, #0]
   2c0f4:	2b00      	cmp	r3, #0
		evt = EVT_START;
   2c0f6:	bf0c      	ite	eq
   2c0f8:	2000      	moveq	r0, #0
   2c0fa:	2003      	movne	r0, #3
   2c0fc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2c0fe:	2b02      	cmp	r3, #2
   2c100:	d105      	bne.n	2c10e <process_recheck+0x24>
		   && (mgr->refs == 0)) {
   2c102:	8bc3      	ldrh	r3, [r0, #30]
   2c104:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   2c106:	bf14      	ite	ne
   2c108:	2000      	movne	r0, #0
   2c10a:	2004      	moveq	r0, #4
   2c10c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2c10e:	2b01      	cmp	r3, #1
   2c110:	d105      	bne.n	2c11e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2c112:	6803      	ldr	r3, [r0, #0]
   2c114:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   2c116:	bf0c      	ite	eq
   2c118:	2000      	moveq	r0, #0
   2c11a:	2005      	movne	r0, #5
   2c11c:	4770      	bx	lr
	int evt = EVT_NOP;
   2c11e:	2000      	movs	r0, #0
}
   2c120:	4770      	bx	lr

0002c122 <notify_one>:
{
   2c122:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c124:	460d      	mov	r5, r1
   2c126:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2c128:	4619      	mov	r1, r3
   2c12a:	1d28      	adds	r0, r5, #4
{
   2c12c:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2c12e:	9300      	str	r3, [sp, #0]
   2c130:	f7e5 ff8e 	bl	12050 <sys_notify_finalize>
	if (cb) {
   2c134:	4604      	mov	r4, r0
   2c136:	b140      	cbz	r0, 2c14a <notify_one+0x28>
		cb(mgr, cli, state, res);
   2c138:	e9dd 3200 	ldrd	r3, r2, [sp]
   2c13c:	4629      	mov	r1, r5
   2c13e:	4630      	mov	r0, r6
   2c140:	46a4      	mov	ip, r4
}
   2c142:	b002      	add	sp, #8
   2c144:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   2c148:	4760      	bx	ip
}
   2c14a:	b002      	add	sp, #8
   2c14c:	bd70      	pop	{r4, r5, r6, pc}

0002c14e <validate_args>:
{
   2c14e:	b510      	push	{r4, lr}
   2c150:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2c152:	b140      	cbz	r0, 2c166 <validate_args+0x18>
   2c154:	b139      	cbz	r1, 2c166 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   2c156:	1d08      	adds	r0, r1, #4
   2c158:	f7ff ff84 	bl	2c064 <sys_notify_validate>
	if ((rv == 0)
   2c15c:	b928      	cbnz	r0, 2c16a <validate_args+0x1c>
	    && ((cli->notify.flags
   2c15e:	68a3      	ldr	r3, [r4, #8]
   2c160:	f033 0303 	bics.w	r3, r3, #3
   2c164:	d001      	beq.n	2c16a <validate_args+0x1c>
		rv = -EINVAL;
   2c166:	f06f 0015 	mvn.w	r0, #21
}
   2c16a:	bd10      	pop	{r4, pc}

0002c16c <onoff_manager_init>:
{
   2c16c:	b538      	push	{r3, r4, r5, lr}
   2c16e:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2c170:	4605      	mov	r5, r0
   2c172:	b158      	cbz	r0, 2c18c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2c174:	b151      	cbz	r1, 2c18c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2c176:	680b      	ldr	r3, [r1, #0]
   2c178:	b143      	cbz	r3, 2c18c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2c17a:	684b      	ldr	r3, [r1, #4]
   2c17c:	b133      	cbz	r3, 2c18c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2c17e:	2220      	movs	r2, #32
   2c180:	2100      	movs	r1, #0
   2c182:	f7f9 ff7b 	bl	2607c <memset>
	return 0;
   2c186:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2c188:	612c      	str	r4, [r5, #16]
}
   2c18a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2c18c:	f06f 0015 	mvn.w	r0, #21
   2c190:	e7fb      	b.n	2c18a <onoff_manager_init+0x1e>

0002c192 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   2c192:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   2c194:	f7f8 f9d8 	bl	24548 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   2c198:	2000      	movs	r0, #0
   2c19a:	bd08      	pop	{r3, pc}

0002c19c <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   2c19c:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   2c19e:	f7f8 fa17 	bl	245d0 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   2c1a2:	f110 0f0b 	cmn.w	r0, #11
   2c1a6:	d005      	beq.n	2c1b4 <sys_sem_take+0x18>
   2c1a8:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   2c1ac:	bf08      	it	eq
   2c1ae:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   2c1b2:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   2c1b4:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   2c1b8:	e7fb      	b.n	2c1b2 <sys_sem_take+0x16>

0002c1ba <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2c1ba:	4604      	mov	r4, r0
   2c1bc:	b508      	push	{r3, lr}
   2c1be:	4608      	mov	r0, r1
   2c1c0:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   2c1c2:	461a      	mov	r2, r3
   2c1c4:	47a0      	blx	r4
	return z_impl_k_current_get();
   2c1c6:	f7f8 f9b9 	bl	2453c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   2c1ca:	f7e8 fe87 	bl	14edc <z_impl_k_thread_abort>

0002c1ce <chunk_field>:
	if (big_heap(h)) {
   2c1ce:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   2c1d0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2c1d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   2c1d8:	bf2c      	ite	cs
   2c1da:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   2c1de:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   2c1e2:	4770      	bx	lr

0002c1e4 <chunk_set>:
	void *cmem = &buf[c];
   2c1e4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2c1e8:	6880      	ldr	r0, [r0, #8]
   2c1ea:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   2c1ee:	bf2c      	ite	cs
   2c1f0:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2c1f4:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   2c1f8:	4770      	bx	lr

0002c1fa <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2c1fa:	2201      	movs	r2, #1
{
   2c1fc:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2c1fe:	f7ff ffe6 	bl	2c1ce <chunk_field>
}
   2c202:	0840      	lsrs	r0, r0, #1
   2c204:	bd08      	pop	{r3, pc}

0002c206 <set_chunk_used>:
	if (big_heap(h)) {
   2c206:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   2c208:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2c20c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2c210:	d308      	bcc.n	2c224 <set_chunk_used+0x1e>
		if (used) {
   2c212:	684b      	ldr	r3, [r1, #4]
   2c214:	b11a      	cbz	r2, 2c21e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   2c216:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   2c21a:	604b      	str	r3, [r1, #4]
   2c21c:	4770      	bx	lr
   2c21e:	f023 0301 	bic.w	r3, r3, #1
   2c222:	e7fa      	b.n	2c21a <set_chunk_used+0x14>
		if (used) {
   2c224:	884b      	ldrh	r3, [r1, #2]
   2c226:	b11a      	cbz	r2, 2c230 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   2c228:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   2c22c:	804b      	strh	r3, [r1, #2]
}
   2c22e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   2c230:	f023 0301 	bic.w	r3, r3, #1
   2c234:	e7fa      	b.n	2c22c <set_chunk_used+0x26>

0002c236 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2c236:	0053      	lsls	r3, r2, #1
   2c238:	2201      	movs	r2, #1
   2c23a:	f7ff bfd3 	b.w	2c1e4 <chunk_set>

0002c23e <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   2c23e:	6883      	ldr	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   2c240:	3107      	adds	r1, #7
	return big_heap(h) ? 8 : 4;
   2c242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2c246:	bf2c      	ite	cs
   2c248:	2008      	movcs	r0, #8
   2c24a:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   2c24c:	4408      	add	r0, r1
}
   2c24e:	08c0      	lsrs	r0, r0, #3
   2c250:	4770      	bx	lr

0002c252 <bucket_idx>:
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
   2c252:	460a      	mov	r2, r1
   2c254:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   2c256:	2101      	movs	r1, #1
   2c258:	f7ff fff1 	bl	2c23e <bytes_to_chunksz>
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   2c25c:	3201      	adds	r2, #1
   2c25e:	1a10      	subs	r0, r2, r0
	return 31 - __builtin_clz(usable_sz);
   2c260:	fab0 f080 	clz	r0, r0
}
   2c264:	f1c0 001f 	rsb	r0, r0, #31
   2c268:	bd08      	pop	{r3, pc}

0002c26a <merge_chunks>:
{
   2c26a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c26c:	4616      	mov	r6, r2
   2c26e:	4604      	mov	r4, r0
   2c270:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2c272:	f7ff ffc2 	bl	2c1fa <chunk_size>
   2c276:	4631      	mov	r1, r6
   2c278:	4605      	mov	r5, r0
   2c27a:	4620      	mov	r0, r4
   2c27c:	f7ff ffbd 	bl	2c1fa <chunk_size>
   2c280:	182b      	adds	r3, r5, r0
	set_chunk_size(h, lc, newsz);
   2c282:	461a      	mov	r2, r3
   2c284:	4639      	mov	r1, r7
   2c286:	4620      	mov	r0, r4
   2c288:	9301      	str	r3, [sp, #4]
   2c28a:	f7ff ffd4 	bl	2c236 <set_chunk_size>
	return c + chunk_size(h, c);
   2c28e:	4631      	mov	r1, r6
   2c290:	4620      	mov	r0, r4
   2c292:	f7ff ffb2 	bl	2c1fa <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2c296:	2200      	movs	r2, #0
   2c298:	1831      	adds	r1, r6, r0
   2c29a:	4620      	mov	r0, r4
   2c29c:	9b01      	ldr	r3, [sp, #4]
}
   2c29e:	b003      	add	sp, #12
   2c2a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2c2a4:	f7ff bf9e 	b.w	2c1e4 <chunk_set>

0002c2a8 <split_chunks>:
{
   2c2a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c2aa:	4614      	mov	r4, r2
   2c2ac:	460e      	mov	r6, r1
   2c2ae:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   2c2b0:	f7ff ffa3 	bl	2c1fa <chunk_size>
	size_t lsz = rc - lc;
   2c2b4:	1ba3      	subs	r3, r4, r6
	size_t rsz = sz0 - lsz;
   2c2b6:	1b32      	subs	r2, r6, r4
   2c2b8:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
   2c2ba:	4631      	mov	r1, r6
   2c2bc:	461a      	mov	r2, r3
   2c2be:	4628      	mov	r0, r5
   2c2c0:	9301      	str	r3, [sp, #4]
   2c2c2:	f7ff ffb8 	bl	2c236 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   2c2c6:	463a      	mov	r2, r7
   2c2c8:	4621      	mov	r1, r4
   2c2ca:	4628      	mov	r0, r5
   2c2cc:	f7ff ffb3 	bl	2c236 <set_chunk_size>
   2c2d0:	9b01      	ldr	r3, [sp, #4]
   2c2d2:	2200      	movs	r2, #0
   2c2d4:	4621      	mov	r1, r4
   2c2d6:	4628      	mov	r0, r5
   2c2d8:	f7ff ff84 	bl	2c1e4 <chunk_set>
	return c + chunk_size(h, c);
   2c2dc:	4621      	mov	r1, r4
   2c2de:	4628      	mov	r0, r5
   2c2e0:	f7ff ff8b 	bl	2c1fa <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2c2e4:	463b      	mov	r3, r7
   2c2e6:	1821      	adds	r1, r4, r0
   2c2e8:	2200      	movs	r2, #0
   2c2ea:	4628      	mov	r0, r5
}
   2c2ec:	b003      	add	sp, #12
   2c2ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2c2f2:	f7ff bf77 	b.w	2c1e4 <chunk_set>

0002c2f6 <free_list_remove_bidx>:
{
   2c2f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c2fa:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   2c2fc:	2203      	movs	r2, #3
   2c2fe:	460e      	mov	r6, r1
   2c300:	4604      	mov	r4, r0
   2c302:	f7ff ff64 	bl	2c1ce <chunk_field>
	if (next_free_chunk(h, c) == c) {
   2c306:	4286      	cmp	r6, r0
   2c308:	4605      	mov	r5, r0
   2c30a:	f107 0804 	add.w	r8, r7, #4
   2c30e:	d10b      	bne.n	2c328 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   2c310:	2301      	movs	r3, #1
   2c312:	fa03 f707 	lsl.w	r7, r3, r7
   2c316:	68e3      	ldr	r3, [r4, #12]
   2c318:	ea23 0307 	bic.w	r3, r3, r7
   2c31c:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   2c31e:	2300      	movs	r3, #0
   2c320:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   2c324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   2c328:	4631      	mov	r1, r6
   2c32a:	2202      	movs	r2, #2
   2c32c:	4620      	mov	r0, r4
   2c32e:	f7ff ff4e 	bl	2c1ce <chunk_field>
   2c332:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   2c334:	462b      	mov	r3, r5
   2c336:	4601      	mov	r1, r0
   2c338:	2203      	movs	r2, #3
   2c33a:	4620      	mov	r0, r4
		b->next = second;
   2c33c:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   2c340:	f7ff ff50 	bl	2c1e4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   2c344:	4633      	mov	r3, r6
   2c346:	4629      	mov	r1, r5
   2c348:	4620      	mov	r0, r4
}
   2c34a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2c34e:	2202      	movs	r2, #2
   2c350:	f7ff bf48 	b.w	2c1e4 <chunk_set>

0002c354 <free_list_remove>:
{
   2c354:	b538      	push	{r3, r4, r5, lr}
   2c356:	4604      	mov	r4, r0
   2c358:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   2c35a:	f7ff ff4e 	bl	2c1fa <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   2c35e:	68a3      	ldr	r3, [r4, #8]
   2c360:	4601      	mov	r1, r0
   2c362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2c366:	d301      	bcc.n	2c36c <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   2c368:	2801      	cmp	r0, #1
   2c36a:	d009      	beq.n	2c380 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   2c36c:	4620      	mov	r0, r4
   2c36e:	f7ff ff70 	bl	2c252 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   2c372:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   2c374:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2c376:	4620      	mov	r0, r4
}
   2c378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   2c37c:	f7ff bfbb 	b.w	2c2f6 <free_list_remove_bidx>
}
   2c380:	bd38      	pop	{r3, r4, r5, pc}

0002c382 <alloc_chunk>:
{
   2c382:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2c386:	4604      	mov	r4, r0
   2c388:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
   2c38a:	f7ff ff62 	bl	2c252 <bucket_idx>
	if (bi > bucket_idx(h, h->len)) {
   2c38e:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   2c390:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   2c392:	4620      	mov	r0, r4
   2c394:	f7ff ff5d 	bl	2c252 <bucket_idx>
   2c398:	42a8      	cmp	r0, r5
   2c39a:	da04      	bge.n	2c3a6 <alloc_chunk+0x24>
		return 0;
   2c39c:	2100      	movs	r1, #0
}
   2c39e:	4608      	mov	r0, r1
   2c3a0:	b003      	add	sp, #12
   2c3a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (b->next) {
   2c3a6:	eb04 0985 	add.w	r9, r4, r5, lsl #2
   2c3aa:	f8d9 8010 	ldr.w	r8, [r9, #16]
   2c3ae:	f1b8 0f00 	cmp.w	r8, #0
   2c3b2:	d019      	beq.n	2c3e8 <alloc_chunk+0x66>
   2c3b4:	2603      	movs	r6, #3
			chunkid_t c = b->next;
   2c3b6:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
   2c3ba:	4620      	mov	r0, r4
   2c3bc:	9101      	str	r1, [sp, #4]
   2c3be:	f7ff ff1c 	bl	2c1fa <chunk_size>
   2c3c2:	42b8      	cmp	r0, r7
   2c3c4:	9901      	ldr	r1, [sp, #4]
   2c3c6:	d305      	bcc.n	2c3d4 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   2c3c8:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   2c3ca:	4620      	mov	r0, r4
   2c3cc:	f7ff ff93 	bl	2c2f6 <free_list_remove_bidx>
   2c3d0:	9901      	ldr	r1, [sp, #4]
		return c;
   2c3d2:	e7e4      	b.n	2c39e <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   2c3d4:	2203      	movs	r2, #3
   2c3d6:	4620      	mov	r0, r4
   2c3d8:	f7ff fef9 	bl	2c1ce <chunk_field>
		} while (--i && b->next != first);
   2c3dc:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
   2c3de:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
   2c3e2:	d001      	beq.n	2c3e8 <alloc_chunk+0x66>
   2c3e4:	4580      	cmp	r8, r0
   2c3e6:	d1e6      	bne.n	2c3b6 <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   2c3e8:	f04f 32ff 	mov.w	r2, #4294967295
   2c3ec:	68e3      	ldr	r3, [r4, #12]
   2c3ee:	3501      	adds	r5, #1
   2c3f0:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0) {
   2c3f2:	401a      	ands	r2, r3
   2c3f4:	d0d2      	beq.n	2c39c <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   2c3f6:	fa92 f2a2 	rbit	r2, r2
   2c3fa:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2c3fe:	1d13      	adds	r3, r2, #4
   2c400:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2c404:	9101      	str	r1, [sp, #4]
   2c406:	e7e0      	b.n	2c3ca <alloc_chunk+0x48>

0002c408 <free_list_add>:
{
   2c408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c40c:	4604      	mov	r4, r0
   2c40e:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   2c410:	f7ff fef3 	bl	2c1fa <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   2c414:	68a3      	ldr	r3, [r4, #8]
   2c416:	4601      	mov	r1, r0
   2c418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2c41c:	d301      	bcc.n	2c422 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   2c41e:	2801      	cmp	r0, #1
   2c420:	d035      	beq.n	2c48e <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   2c422:	4620      	mov	r0, r4
   2c424:	f7ff ff15 	bl	2c252 <bucket_idx>
	if (b->next == 0) {
   2c428:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   2c42c:	6916      	ldr	r6, [r2, #16]
   2c42e:	b99e      	cbnz	r6, 2c458 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   2c430:	2301      	movs	r3, #1
   2c432:	fa03 f000 	lsl.w	r0, r3, r0
   2c436:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   2c438:	4629      	mov	r1, r5
   2c43a:	4303      	orrs	r3, r0
   2c43c:	60e3      	str	r3, [r4, #12]
   2c43e:	4620      	mov	r0, r4
		b->next = c;
   2c440:	6115      	str	r5, [r2, #16]
   2c442:	462b      	mov	r3, r5
   2c444:	2202      	movs	r2, #2
   2c446:	f7ff fecd 	bl	2c1e4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2c44a:	2203      	movs	r2, #3
   2c44c:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   2c44e:	4620      	mov	r0, r4
}
   2c450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2c454:	f7ff bec6 	b.w	2c1e4 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   2c458:	2202      	movs	r2, #2
   2c45a:	4631      	mov	r1, r6
   2c45c:	4620      	mov	r0, r4
   2c45e:	f7ff feb6 	bl	2c1ce <chunk_field>
   2c462:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   2c464:	4603      	mov	r3, r0
   2c466:	2202      	movs	r2, #2
   2c468:	4629      	mov	r1, r5
   2c46a:	4620      	mov	r0, r4
   2c46c:	f7ff feba 	bl	2c1e4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2c470:	4633      	mov	r3, r6
   2c472:	2203      	movs	r2, #3
   2c474:	4629      	mov	r1, r5
   2c476:	4620      	mov	r0, r4
   2c478:	f7ff feb4 	bl	2c1e4 <chunk_set>
   2c47c:	2203      	movs	r2, #3
   2c47e:	4639      	mov	r1, r7
   2c480:	462b      	mov	r3, r5
   2c482:	4620      	mov	r0, r4
   2c484:	f7ff feae 	bl	2c1e4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   2c488:	2202      	movs	r2, #2
   2c48a:	4631      	mov	r1, r6
   2c48c:	e7df      	b.n	2c44e <free_list_add+0x46>
   2c48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c492 <sys_heap_alloc>:
{
   2c492:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0) {
   2c494:	b909      	cbnz	r1, 2c49a <sys_heap_alloc+0x8>
		return NULL;
   2c496:	2000      	movs	r0, #0
}
   2c498:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   2c49a:	6804      	ldr	r4, [r0, #0]
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   2c49c:	4620      	mov	r0, r4
   2c49e:	f7ff fece 	bl	2c23e <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2c4a2:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   2c4a4:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2c4a6:	4620      	mov	r0, r4
   2c4a8:	f7ff ff6b 	bl	2c382 <alloc_chunk>
	if (c == 0) {
   2c4ac:	4605      	mov	r5, r0
   2c4ae:	2800      	cmp	r0, #0
   2c4b0:	d0f1      	beq.n	2c496 <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   2c4b2:	4601      	mov	r1, r0
   2c4b4:	4620      	mov	r0, r4
   2c4b6:	f7ff fea0 	bl	2c1fa <chunk_size>
   2c4ba:	42b0      	cmp	r0, r6
   2c4bc:	d909      	bls.n	2c4d2 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2c4be:	442e      	add	r6, r5
   2c4c0:	4629      	mov	r1, r5
   2c4c2:	4620      	mov	r0, r4
   2c4c4:	4632      	mov	r2, r6
   2c4c6:	f7ff feef 	bl	2c2a8 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2c4ca:	4631      	mov	r1, r6
   2c4cc:	4620      	mov	r0, r4
   2c4ce:	f7ff ff9b 	bl	2c408 <free_list_add>
	set_chunk_used(h, c, true);
   2c4d2:	4620      	mov	r0, r4
   2c4d4:	2201      	movs	r2, #1
   2c4d6:	4629      	mov	r1, r5
   2c4d8:	f7ff fe95 	bl	2c206 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   2c4dc:	68a3      	ldr	r3, [r4, #8]
   2c4de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2c4e2:	bf2c      	ite	cs
   2c4e4:	2008      	movcs	r0, #8
   2c4e6:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2c4e8:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   2c4ec:	4420      	add	r0, r4
	return chunk_mem(h, c);
   2c4ee:	e7d3      	b.n	2c498 <sys_heap_alloc+0x6>

0002c4f0 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2c4f0:	4040      	eors	r0, r0
   2c4f2:	f380 8811 	msr	BASEPRI, r0
   2c4f6:	f04f 0004 	mov.w	r0, #4
   2c4fa:	df02      	svc	2
}
   2c4fc:	4770      	bx	lr

0002c4fe <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_MQTT_DEMO_LOG_LEVEL_DBG, 1);
GEN_ABSOLUTE_SYM(CONFIG_MQTT_DEMO_LOG_LEVEL, 4);

GEN_ABS_SYM_END
   2c4fe:	4770      	bx	lr

0002c500 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   2c500:	f7f5 bcd8 	b.w	21eb4 <SystemInit>

0002c504 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   2c504:	2300      	movs	r3, #0
	list->head = NULL;
   2c506:	e9c0 3300 	strd	r3, r3, [r0]
}
   2c50a:	4770      	bx	lr

0002c50c <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   2c50c:	6803      	ldr	r3, [r0, #0]
   2c50e:	b923      	cbnz	r3, 2c51a <log_list_add_tail+0xe>
		list->head = msg;
   2c510:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   2c512:	2300      	movs	r3, #0
	list->tail = msg;
   2c514:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   2c516:	600b      	str	r3, [r1, #0]
}
   2c518:	4770      	bx	lr
		list->tail->next = msg;
   2c51a:	6843      	ldr	r3, [r0, #4]
   2c51c:	6019      	str	r1, [r3, #0]
   2c51e:	e7f8      	b.n	2c512 <log_list_add_tail+0x6>

0002c520 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   2c520:	6800      	ldr	r0, [r0, #0]
   2c522:	4770      	bx	lr

0002c524 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   2c524:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   2c526:	b10b      	cbz	r3, 2c52c <log_list_head_get+0x8>
		list->head = list->head->next;
   2c528:	681a      	ldr	r2, [r3, #0]
   2c52a:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   2c52c:	4618      	mov	r0, r3
   2c52e:	4770      	bx	lr

0002c530 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   2c530:	6843      	ldr	r3, [r0, #4]
}
   2c532:	7958      	ldrb	r0, [r3, #5]
   2c534:	4770      	bx	lr

0002c536 <z_log_msg_std_alloc>:
{
   2c536:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   2c538:	f7e6 ff64 	bl	13404 <log_msg_chunk_alloc>
	if (msg != NULL) {
   2c53c:	b118      	cbz	r0, 2c546 <z_log_msg_std_alloc+0x10>
		msg->hdr.ref_cnt = 1;
   2c53e:	2301      	movs	r3, #1
   2c540:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   2c542:	2300      	movs	r3, #0
   2c544:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   2c546:	bd08      	pop	{r3, pc}

0002c548 <k_cycle_get_32_wrapper>:
   2c548:	f7e7 bfd0 	b.w	144ec <z_timer_cycle_get_32>

0002c54c <dummy_timestamp>:
   2c54c:	2000      	movs	r0, #0
   2c54e:	4770      	bx	lr

0002c550 <log_0>:
{
   2c550:	b513      	push	{r0, r1, r4, lr}
   2c552:	4604      	mov	r4, r0
   2c554:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   2c556:	f7ff ffee 	bl	2c536 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2c55a:	b130      	cbz	r0, 2c56a <log_0+0x1a>
		msg_finalize(msg, src_level);
   2c55c:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   2c55e:	6104      	str	r4, [r0, #16]
}
   2c560:	b002      	add	sp, #8
   2c562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   2c566:	f7e6 be53 	b.w	13210 <msg_finalize>
}
   2c56a:	b002      	add	sp, #8
   2c56c:	bd10      	pop	{r4, pc}

0002c56e <log_1>:
{
   2c56e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c570:	460c      	mov	r4, r1
   2c572:	4611      	mov	r1, r2
   2c574:	4605      	mov	r5, r0
   2c576:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2c578:	f7ff ffdd 	bl	2c536 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2c57c:	b160      	cbz	r0, 2c598 <log_1+0x2a>
		msg->str = str;
   2c57e:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   2c580:	2501      	movs	r5, #1
   2c582:	7a42      	ldrb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   2c584:	6144      	str	r4, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   2c586:	f365 1207 	bfi	r2, r5, #4, #4
   2c58a:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   2c58c:	9901      	ldr	r1, [sp, #4]
}
   2c58e:	b003      	add	sp, #12
   2c590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
   2c594:	f7e6 be3c 	b.w	13210 <msg_finalize>
}
   2c598:	b003      	add	sp, #12
   2c59a:	bd30      	pop	{r4, r5, pc}

0002c59c <log_2>:
{
   2c59c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c59e:	460e      	mov	r6, r1
   2c5a0:	4619      	mov	r1, r3
   2c5a2:	4607      	mov	r7, r0
   2c5a4:	4615      	mov	r5, r2
   2c5a6:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2c5a8:	f7ff ffc5 	bl	2c536 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2c5ac:	b168      	cbz	r0, 2c5ca <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   2c5ae:	2202      	movs	r2, #2
   2c5b0:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   2c5b2:	e9c0 6505 	strd	r6, r5, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   2c5b6:	f362 1307 	bfi	r3, r2, #4, #4
   2c5ba:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   2c5bc:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   2c5be:	6107      	str	r7, [r0, #16]
}
   2c5c0:	b003      	add	sp, #12
   2c5c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
   2c5c6:	f7e6 be23 	b.w	13210 <msg_finalize>
}
   2c5ca:	b003      	add	sp, #12
   2c5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c5ce <log_3>:
{
   2c5ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2c5d2:	460f      	mov	r7, r1
   2c5d4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   2c5d8:	4680      	mov	r8, r0
   2c5da:	4616      	mov	r6, r2
   2c5dc:	461d      	mov	r5, r3
   2c5de:	9101      	str	r1, [sp, #4]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2c5e0:	f7ff ffa9 	bl	2c536 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2c5e4:	b178      	cbz	r0, 2c606 <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   2c5e6:	2203      	movs	r2, #3
   2c5e8:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   2c5ea:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   2c5ee:	f362 1307 	bfi	r3, r2, #4, #4
   2c5f2:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   2c5f4:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   2c5f6:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   2c5fa:	61c5      	str	r5, [r0, #28]
}
   2c5fc:	b002      	add	sp, #8
   2c5fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   2c602:	f7e6 be05 	b.w	13210 <msg_finalize>
}
   2c606:	b002      	add	sp, #8
   2c608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c60c <log_n>:
{
   2c60c:	b510      	push	{r4, lr}
   2c60e:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   2c610:	f7e6 ff4a 	bl	134a8 <log_msg_create_n>
		if (msg == NULL) {
   2c614:	b120      	cbz	r0, 2c620 <log_n+0x14>
		msg_finalize(msg, src_level);
   2c616:	4621      	mov	r1, r4
}
   2c618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   2c61c:	f7e6 bdf8 	b.w	13210 <msg_finalize>
}
   2c620:	bd10      	pop	{r4, pc}

0002c622 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   2c622:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c626:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   2c628:	8903      	ldrh	r3, [r0, #8]
{
   2c62a:	460e      	mov	r6, r1
	uint32_t available_len = msg->hdr.params.hexdump.length;
   2c62c:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   2c630:	42a3      	cmp	r3, r4
{
   2c632:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   2c636:	d803      	bhi.n	2c640 <log_msg_hexdump_data_op+0x1e>
		*length = 0;
   2c638:	2300      	movs	r3, #0
   2c63a:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   2c63c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   2c640:	6811      	ldr	r1, [r2, #0]
   2c642:	4421      	add	r1, r4
   2c644:	4299      	cmp	r1, r3
		*length = available_len - offset;
   2c646:	bf84      	itt	hi
   2c648:	1b19      	subhi	r1, r3, r4
   2c64a:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2c64c:	2b0c      	cmp	r3, #12
	req_len = *length;
   2c64e:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2c652:	d92b      	bls.n	2c6ac <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   2c654:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   2c656:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   2c65a:	d82e      	bhi.n	2c6ba <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2c65c:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   2c65e:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2c660:	454b      	cmp	r3, r9
   2c662:	bf28      	it	cs
   2c664:	464b      	movcs	r3, r9
   2c666:	4420      	add	r0, r4
   2c668:	461d      	mov	r5, r3
   2c66a:	461a      	mov	r2, r3
		if (put_op) {
   2c66c:	b317      	cbz	r7, 2c6b4 <log_msg_hexdump_data_op+0x92>
   2c66e:	4631      	mov	r1, r6
   2c670:	f7e0 fa6c 	bl	cb4c <memcpy>
		req_len -= cpy_len;
   2c674:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   2c678:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   2c67a:	f1b9 0f00 	cmp.w	r9, #0
   2c67e:	d0dd      	beq.n	2c63c <log_msg_hexdump_data_op+0x1a>
   2c680:	f1b8 0f00 	cmp.w	r8, #0
   2c684:	d0da      	beq.n	2c63c <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   2c686:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2c68a:	454d      	cmp	r5, r9
   2c68c:	bf28      	it	cs
   2c68e:	464d      	movcs	r5, r9
		if (put_op) {
   2c690:	1d20      	adds	r0, r4, #4
   2c692:	462a      	mov	r2, r5
   2c694:	4440      	add	r0, r8
   2c696:	b1bf      	cbz	r7, 2c6c8 <log_msg_hexdump_data_op+0xa6>
   2c698:	4631      	mov	r1, r6
   2c69a:	f7e0 fa57 	bl	cb4c <memcpy>
		offset = 0;
   2c69e:	2400      	movs	r4, #0
		cont = cont->next;
   2c6a0:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   2c6a4:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   2c6a8:	442e      	add	r6, r5
   2c6aa:	e7e6      	b.n	2c67a <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   2c6ac:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   2c6b0:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   2c6b2:	e7d5      	b.n	2c660 <log_msg_hexdump_data_op+0x3e>
   2c6b4:	4601      	mov	r1, r0
   2c6b6:	4630      	mov	r0, r6
   2c6b8:	e7da      	b.n	2c670 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   2c6ba:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   2c6bc:	2c1b      	cmp	r4, #27
   2c6be:	d9dc      	bls.n	2c67a <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   2c6c0:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   2c6c4:	3c1c      	subs	r4, #28
   2c6c6:	e7f9      	b.n	2c6bc <log_msg_hexdump_data_op+0x9a>
   2c6c8:	4601      	mov	r1, r0
   2c6ca:	4630      	mov	r0, r6
   2c6cc:	e7e5      	b.n	2c69a <log_msg_hexdump_data_op+0x78>

0002c6ce <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2c6ce:	3004      	adds	r0, #4
   2c6d0:	e8d0 3fef 	ldaex	r3, [r0]
   2c6d4:	3301      	adds	r3, #1
   2c6d6:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2c6da:	2a00      	cmp	r2, #0
   2c6dc:	d1f8      	bne.n	2c6d0 <log_msg_get+0x2>
}
   2c6de:	4770      	bx	lr

0002c6e0 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   2c6e0:	7a40      	ldrb	r0, [r0, #9]
}
   2c6e2:	0900      	lsrs	r0, r0, #4
   2c6e4:	4770      	bx	lr

0002c6e6 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   2c6e6:	7a43      	ldrb	r3, [r0, #9]
   2c6e8:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   2c6ec:	ea4f 1213 	mov.w	r2, r3, lsr #4
   2c6f0:	d216      	bcs.n	2c720 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   2c6f2:	2a03      	cmp	r2, #3
   2c6f4:	d803      	bhi.n	2c6fe <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   2c6f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2c6fa:	6948      	ldr	r0, [r1, #20]
   2c6fc:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   2c6fe:	2901      	cmp	r1, #1
   2c700:	d803      	bhi.n	2c70a <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   2c702:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2c706:	6988      	ldr	r0, [r1, #24]
   2c708:	4770      	bx	lr
	cont = msg->payload.ext.next;
   2c70a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   2c70c:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   2c70e:	2906      	cmp	r1, #6
   2c710:	d803      	bhi.n	2c71a <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   2c712:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2c716:	6848      	ldr	r0, [r1, #4]
   2c718:	4770      	bx	lr
		cont = cont->next;
   2c71a:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   2c71c:	3907      	subs	r1, #7
		cont = cont->next;
   2c71e:	e7f6      	b.n	2c70e <log_msg_arg_get+0x28>
		return 0;
   2c720:	2000      	movs	r0, #0
}
   2c722:	4770      	bx	lr

0002c724 <log_msg_put>:
{
   2c724:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2c726:	1d02      	adds	r2, r0, #4
   2c728:	e8d2 1fef 	ldaex	r1, [r2]
   2c72c:	3901      	subs	r1, #1
   2c72e:	e8c2 1fec 	stlex	ip, r1, [r2]
   2c732:	f1bc 0f00 	cmp.w	ip, #0
   2c736:	d1f7      	bne.n	2c728 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   2c738:	685b      	ldr	r3, [r3, #4]
   2c73a:	b90b      	cbnz	r3, 2c740 <log_msg_put+0x1c>
		msg_free(msg);
   2c73c:	f7e6 be76 	b.w	1342c <msg_free>
}
   2c740:	4770      	bx	lr

0002c742 <log_msg_str_get>:
}
   2c742:	6900      	ldr	r0, [r0, #16]
   2c744:	4770      	bx	lr

0002c746 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   2c746:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   2c748:	2400      	movs	r4, #0
   2c74a:	9400      	str	r4, [sp, #0]
   2c74c:	f7ff ff69 	bl	2c622 <log_msg_hexdump_data_op>
}
   2c750:	b002      	add	sp, #8
   2c752:	bd10      	pop	{r4, pc}

0002c754 <buffer_write>:
{
   2c754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c756:	4606      	mov	r6, r0
   2c758:	460d      	mov	r5, r1
   2c75a:	4614      	mov	r4, r2
   2c75c:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2c75e:	4621      	mov	r1, r4
   2c760:	4628      	mov	r0, r5
   2c762:	463a      	mov	r2, r7
   2c764:	47b0      	blx	r6
	} while (len != 0);
   2c766:	1a24      	subs	r4, r4, r0
		buf += processed;
   2c768:	4405      	add	r5, r0
	} while (len != 0);
   2c76a:	d1f8      	bne.n	2c75e <buffer_write+0xa>
}
   2c76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c76e <std_print>:
{
   2c76e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c772:	b08e      	sub	sp, #56	; 0x38
   2c774:	af0e      	add	r7, sp, #56	; 0x38
   2c776:	4680      	mov	r8, r0
   2c778:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   2c77a:	f7ff ffe2 	bl	2c742 <log_msg_str_get>
   2c77e:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   2c780:	4640      	mov	r0, r8
   2c782:	f7ff ffad 	bl	2c6e0 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   2c786:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   2c78a:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   2c78c:	0083      	lsls	r3, r0, #2
   2c78e:	3307      	adds	r3, #7
   2c790:	f023 0307 	bic.w	r3, r3, #7
   2c794:	ebad 0d03 	sub.w	sp, sp, r3
   2c798:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   2c79a:	45d1      	cmp	r9, sl
   2c79c:	d116      	bne.n	2c7cc <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   2c79e:	4640      	mov	r0, r8
   2c7a0:	f7ff ff9e 	bl	2c6e0 <log_msg_nargs_get>
   2c7a4:	280f      	cmp	r0, #15
   2c7a6:	d81e      	bhi.n	2c7e6 <std_print+0x78>
   2c7a8:	e8df f010 	tbh	[pc, r0, lsl #1]
   2c7ac:	00200019 	.word	0x00200019
   2c7b0:	002d0026 	.word	0x002d0026
   2c7b4:	00410036 	.word	0x00410036
   2c7b8:	005d004e 	.word	0x005d004e
   2c7bc:	0081006e 	.word	0x0081006e
   2c7c0:	00ad0096 	.word	0x00ad0096
   2c7c4:	00e100c6 	.word	0x00e100c6
   2c7c8:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   2c7cc:	4649      	mov	r1, r9
   2c7ce:	4640      	mov	r0, r8
   2c7d0:	f7ff ff89 	bl	2c6e6 <log_msg_arg_get>
   2c7d4:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   2c7d8:	f109 0901 	add.w	r9, r9, #1
   2c7dc:	e7dd      	b.n	2c79a <std_print+0x2c>
		print_formatted(log_output, str);
   2c7de:	4631      	mov	r1, r6
   2c7e0:	4628      	mov	r0, r5
   2c7e2:	f7e6 fec9 	bl	13578 <print_formatted>
}
   2c7e6:	46bd      	mov	sp, r7
   2c7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   2c7ec:	4631      	mov	r1, r6
   2c7ee:	4628      	mov	r0, r5
   2c7f0:	6822      	ldr	r2, [r4, #0]
   2c7f2:	f7e6 fec1 	bl	13578 <print_formatted>
		break;
   2c7f6:	e7f6      	b.n	2c7e6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   2c7f8:	4631      	mov	r1, r6
   2c7fa:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c7fe:	4628      	mov	r0, r5
   2c800:	f7e6 feba 	bl	13578 <print_formatted>
		break;
   2c804:	e7ef      	b.n	2c7e6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   2c806:	68a3      	ldr	r3, [r4, #8]
   2c808:	4631      	mov	r1, r6
   2c80a:	9300      	str	r3, [sp, #0]
   2c80c:	4628      	mov	r0, r5
   2c80e:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c812:	f7e6 feb1 	bl	13578 <print_formatted>
		break;
   2c816:	e7e6      	b.n	2c7e6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c818:	68e3      	ldr	r3, [r4, #12]
   2c81a:	4631      	mov	r1, r6
   2c81c:	9301      	str	r3, [sp, #4]
   2c81e:	68a3      	ldr	r3, [r4, #8]
   2c820:	4628      	mov	r0, r5
   2c822:	9300      	str	r3, [sp, #0]
   2c824:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c828:	f7e6 fea6 	bl	13578 <print_formatted>
		break;
   2c82c:	e7db      	b.n	2c7e6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c82e:	6923      	ldr	r3, [r4, #16]
   2c830:	4631      	mov	r1, r6
   2c832:	9302      	str	r3, [sp, #8]
   2c834:	68e3      	ldr	r3, [r4, #12]
   2c836:	4628      	mov	r0, r5
   2c838:	9301      	str	r3, [sp, #4]
   2c83a:	68a3      	ldr	r3, [r4, #8]
   2c83c:	9300      	str	r3, [sp, #0]
   2c83e:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c842:	f7e6 fe99 	bl	13578 <print_formatted>
		break;
   2c846:	e7ce      	b.n	2c7e6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c848:	6963      	ldr	r3, [r4, #20]
   2c84a:	4631      	mov	r1, r6
   2c84c:	9303      	str	r3, [sp, #12]
   2c84e:	6923      	ldr	r3, [r4, #16]
   2c850:	4628      	mov	r0, r5
   2c852:	9302      	str	r3, [sp, #8]
   2c854:	68e3      	ldr	r3, [r4, #12]
   2c856:	9301      	str	r3, [sp, #4]
   2c858:	68a3      	ldr	r3, [r4, #8]
   2c85a:	9300      	str	r3, [sp, #0]
   2c85c:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c860:	f7e6 fe8a 	bl	13578 <print_formatted>
		break;
   2c864:	e7bf      	b.n	2c7e6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c866:	69a3      	ldr	r3, [r4, #24]
   2c868:	4631      	mov	r1, r6
   2c86a:	9304      	str	r3, [sp, #16]
   2c86c:	6963      	ldr	r3, [r4, #20]
   2c86e:	4628      	mov	r0, r5
   2c870:	9303      	str	r3, [sp, #12]
   2c872:	6923      	ldr	r3, [r4, #16]
   2c874:	9302      	str	r3, [sp, #8]
   2c876:	68e3      	ldr	r3, [r4, #12]
   2c878:	9301      	str	r3, [sp, #4]
   2c87a:	68a3      	ldr	r3, [r4, #8]
   2c87c:	9300      	str	r3, [sp, #0]
   2c87e:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c882:	f7e6 fe79 	bl	13578 <print_formatted>
		break;
   2c886:	e7ae      	b.n	2c7e6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c888:	69e3      	ldr	r3, [r4, #28]
   2c88a:	4631      	mov	r1, r6
   2c88c:	9305      	str	r3, [sp, #20]
   2c88e:	69a3      	ldr	r3, [r4, #24]
   2c890:	4628      	mov	r0, r5
   2c892:	9304      	str	r3, [sp, #16]
   2c894:	6963      	ldr	r3, [r4, #20]
   2c896:	9303      	str	r3, [sp, #12]
   2c898:	6923      	ldr	r3, [r4, #16]
   2c89a:	9302      	str	r3, [sp, #8]
   2c89c:	68e3      	ldr	r3, [r4, #12]
   2c89e:	9301      	str	r3, [sp, #4]
   2c8a0:	68a3      	ldr	r3, [r4, #8]
   2c8a2:	9300      	str	r3, [sp, #0]
   2c8a4:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c8a8:	f7e6 fe66 	bl	13578 <print_formatted>
		break;
   2c8ac:	e79b      	b.n	2c7e6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c8ae:	6a23      	ldr	r3, [r4, #32]
   2c8b0:	4631      	mov	r1, r6
   2c8b2:	9306      	str	r3, [sp, #24]
   2c8b4:	69e3      	ldr	r3, [r4, #28]
   2c8b6:	4628      	mov	r0, r5
   2c8b8:	9305      	str	r3, [sp, #20]
   2c8ba:	69a3      	ldr	r3, [r4, #24]
   2c8bc:	9304      	str	r3, [sp, #16]
   2c8be:	6963      	ldr	r3, [r4, #20]
   2c8c0:	9303      	str	r3, [sp, #12]
   2c8c2:	6923      	ldr	r3, [r4, #16]
   2c8c4:	9302      	str	r3, [sp, #8]
   2c8c6:	68e3      	ldr	r3, [r4, #12]
   2c8c8:	9301      	str	r3, [sp, #4]
   2c8ca:	68a3      	ldr	r3, [r4, #8]
   2c8cc:	9300      	str	r3, [sp, #0]
   2c8ce:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c8d2:	f7e6 fe51 	bl	13578 <print_formatted>
		break;
   2c8d6:	e786      	b.n	2c7e6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c8d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c8da:	4631      	mov	r1, r6
   2c8dc:	9307      	str	r3, [sp, #28]
   2c8de:	6a23      	ldr	r3, [r4, #32]
   2c8e0:	4628      	mov	r0, r5
   2c8e2:	9306      	str	r3, [sp, #24]
   2c8e4:	69e3      	ldr	r3, [r4, #28]
   2c8e6:	9305      	str	r3, [sp, #20]
   2c8e8:	69a3      	ldr	r3, [r4, #24]
   2c8ea:	9304      	str	r3, [sp, #16]
   2c8ec:	6963      	ldr	r3, [r4, #20]
   2c8ee:	9303      	str	r3, [sp, #12]
   2c8f0:	6923      	ldr	r3, [r4, #16]
   2c8f2:	9302      	str	r3, [sp, #8]
   2c8f4:	68e3      	ldr	r3, [r4, #12]
   2c8f6:	9301      	str	r3, [sp, #4]
   2c8f8:	68a3      	ldr	r3, [r4, #8]
   2c8fa:	9300      	str	r3, [sp, #0]
   2c8fc:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c900:	f7e6 fe3a 	bl	13578 <print_formatted>
		break;
   2c904:	e76f      	b.n	2c7e6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c906:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2c908:	4631      	mov	r1, r6
   2c90a:	9308      	str	r3, [sp, #32]
   2c90c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c90e:	4628      	mov	r0, r5
   2c910:	9307      	str	r3, [sp, #28]
   2c912:	6a23      	ldr	r3, [r4, #32]
   2c914:	9306      	str	r3, [sp, #24]
   2c916:	69e3      	ldr	r3, [r4, #28]
   2c918:	9305      	str	r3, [sp, #20]
   2c91a:	69a3      	ldr	r3, [r4, #24]
   2c91c:	9304      	str	r3, [sp, #16]
   2c91e:	6963      	ldr	r3, [r4, #20]
   2c920:	9303      	str	r3, [sp, #12]
   2c922:	6923      	ldr	r3, [r4, #16]
   2c924:	9302      	str	r3, [sp, #8]
   2c926:	68e3      	ldr	r3, [r4, #12]
   2c928:	9301      	str	r3, [sp, #4]
   2c92a:	68a3      	ldr	r3, [r4, #8]
   2c92c:	9300      	str	r3, [sp, #0]
   2c92e:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c932:	f7e6 fe21 	bl	13578 <print_formatted>
		break;
   2c936:	e756      	b.n	2c7e6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c938:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2c93a:	4631      	mov	r1, r6
   2c93c:	9309      	str	r3, [sp, #36]	; 0x24
   2c93e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2c940:	4628      	mov	r0, r5
   2c942:	9308      	str	r3, [sp, #32]
   2c944:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c946:	9307      	str	r3, [sp, #28]
   2c948:	6a23      	ldr	r3, [r4, #32]
   2c94a:	9306      	str	r3, [sp, #24]
   2c94c:	69e3      	ldr	r3, [r4, #28]
   2c94e:	9305      	str	r3, [sp, #20]
   2c950:	69a3      	ldr	r3, [r4, #24]
   2c952:	9304      	str	r3, [sp, #16]
   2c954:	6963      	ldr	r3, [r4, #20]
   2c956:	9303      	str	r3, [sp, #12]
   2c958:	6923      	ldr	r3, [r4, #16]
   2c95a:	9302      	str	r3, [sp, #8]
   2c95c:	68e3      	ldr	r3, [r4, #12]
   2c95e:	9301      	str	r3, [sp, #4]
   2c960:	68a3      	ldr	r3, [r4, #8]
   2c962:	9300      	str	r3, [sp, #0]
   2c964:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c968:	f7e6 fe06 	bl	13578 <print_formatted>
		break;
   2c96c:	e73b      	b.n	2c7e6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c96e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2c970:	4631      	mov	r1, r6
   2c972:	930a      	str	r3, [sp, #40]	; 0x28
   2c974:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2c976:	4628      	mov	r0, r5
   2c978:	9309      	str	r3, [sp, #36]	; 0x24
   2c97a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2c97c:	9308      	str	r3, [sp, #32]
   2c97e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c980:	9307      	str	r3, [sp, #28]
   2c982:	6a23      	ldr	r3, [r4, #32]
   2c984:	9306      	str	r3, [sp, #24]
   2c986:	69e3      	ldr	r3, [r4, #28]
   2c988:	9305      	str	r3, [sp, #20]
   2c98a:	69a3      	ldr	r3, [r4, #24]
   2c98c:	9304      	str	r3, [sp, #16]
   2c98e:	6963      	ldr	r3, [r4, #20]
   2c990:	9303      	str	r3, [sp, #12]
   2c992:	6923      	ldr	r3, [r4, #16]
   2c994:	9302      	str	r3, [sp, #8]
   2c996:	68e3      	ldr	r3, [r4, #12]
   2c998:	9301      	str	r3, [sp, #4]
   2c99a:	68a3      	ldr	r3, [r4, #8]
   2c99c:	9300      	str	r3, [sp, #0]
   2c99e:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c9a2:	f7e6 fde9 	bl	13578 <print_formatted>
		break;
   2c9a6:	e71e      	b.n	2c7e6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c9a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2c9aa:	4631      	mov	r1, r6
   2c9ac:	930b      	str	r3, [sp, #44]	; 0x2c
   2c9ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2c9b0:	4628      	mov	r0, r5
   2c9b2:	930a      	str	r3, [sp, #40]	; 0x28
   2c9b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2c9b6:	9309      	str	r3, [sp, #36]	; 0x24
   2c9b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2c9ba:	9308      	str	r3, [sp, #32]
   2c9bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c9be:	9307      	str	r3, [sp, #28]
   2c9c0:	6a23      	ldr	r3, [r4, #32]
   2c9c2:	9306      	str	r3, [sp, #24]
   2c9c4:	69e3      	ldr	r3, [r4, #28]
   2c9c6:	9305      	str	r3, [sp, #20]
   2c9c8:	69a3      	ldr	r3, [r4, #24]
   2c9ca:	9304      	str	r3, [sp, #16]
   2c9cc:	6963      	ldr	r3, [r4, #20]
   2c9ce:	9303      	str	r3, [sp, #12]
   2c9d0:	6923      	ldr	r3, [r4, #16]
   2c9d2:	9302      	str	r3, [sp, #8]
   2c9d4:	68e3      	ldr	r3, [r4, #12]
   2c9d6:	9301      	str	r3, [sp, #4]
   2c9d8:	68a3      	ldr	r3, [r4, #8]
   2c9da:	9300      	str	r3, [sp, #0]
   2c9dc:	e9d4 2300 	ldrd	r2, r3, [r4]
   2c9e0:	f7e6 fdca 	bl	13578 <print_formatted>
		break;
   2c9e4:	e6ff      	b.n	2c7e6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2c9e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2c9e8:	4631      	mov	r1, r6
   2c9ea:	930c      	str	r3, [sp, #48]	; 0x30
   2c9ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2c9ee:	4628      	mov	r0, r5
   2c9f0:	930b      	str	r3, [sp, #44]	; 0x2c
   2c9f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2c9f4:	930a      	str	r3, [sp, #40]	; 0x28
   2c9f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2c9f8:	9309      	str	r3, [sp, #36]	; 0x24
   2c9fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2c9fc:	9308      	str	r3, [sp, #32]
   2c9fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ca00:	9307      	str	r3, [sp, #28]
   2ca02:	6a23      	ldr	r3, [r4, #32]
   2ca04:	9306      	str	r3, [sp, #24]
   2ca06:	69e3      	ldr	r3, [r4, #28]
   2ca08:	9305      	str	r3, [sp, #20]
   2ca0a:	69a3      	ldr	r3, [r4, #24]
   2ca0c:	9304      	str	r3, [sp, #16]
   2ca0e:	6963      	ldr	r3, [r4, #20]
   2ca10:	9303      	str	r3, [sp, #12]
   2ca12:	6923      	ldr	r3, [r4, #16]
   2ca14:	9302      	str	r3, [sp, #8]
   2ca16:	68e3      	ldr	r3, [r4, #12]
   2ca18:	9301      	str	r3, [sp, #4]
   2ca1a:	68a3      	ldr	r3, [r4, #8]
   2ca1c:	9300      	str	r3, [sp, #0]
   2ca1e:	e9d4 2300 	ldrd	r2, r3, [r4]
   2ca22:	f7e6 fda9 	bl	13578 <print_formatted>
}
   2ca26:	e6de      	b.n	2c7e6 <std_print+0x78>

0002ca28 <log_output_flush>:
		     log_output->control_block->offset,
   2ca28:	6842      	ldr	r2, [r0, #4]
{
   2ca2a:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   2ca2c:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   2ca30:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   2ca32:	6881      	ldr	r1, [r0, #8]
   2ca34:	6800      	ldr	r0, [r0, #0]
   2ca36:	f7ff fe8d 	bl	2c754 <buffer_write>
	log_output->control_block->offset = 0;
   2ca3a:	2200      	movs	r2, #0
   2ca3c:	6863      	ldr	r3, [r4, #4]
   2ca3e:	601a      	str	r2, [r3, #0]
}
   2ca40:	bd10      	pop	{r4, pc}

0002ca42 <sntp_init>:
{
   2ca42:	b570      	push	{r4, r5, r6, lr}
   2ca44:	460d      	mov	r5, r1
   2ca46:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   2ca48:	4604      	mov	r4, r0
   2ca4a:	b330      	cbz	r0, 2ca9a <sntp_init+0x58>
   2ca4c:	b329      	cbz	r1, 2ca9a <sntp_init+0x58>
__ssp_bos_icheck3(memset, void *, int)
   2ca4e:	2214      	movs	r2, #20
   2ca50:	2100      	movs	r1, #0
   2ca52:	f7f9 fb13 	bl	2607c <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   2ca56:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   2ca58:	2211      	movs	r2, #17
   2ca5a:	2102      	movs	r1, #2
   2ca5c:	f7e7 f806 	bl	13a6c <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   2ca60:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   2ca62:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   2ca64:	da04      	bge.n	2ca70 <sntp_init+0x2e>
		return -errno;
   2ca66:	f000 f974 	bl	2cd52 <__errno>
   2ca6a:	6800      	ldr	r0, [r0, #0]
   2ca6c:	4240      	negs	r0, r0
}
   2ca6e:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   2ca70:	4632      	mov	r2, r6
   2ca72:	4629      	mov	r1, r5
   2ca74:	f000 f843 	bl	2cafe <z_impl_zsock_connect>
	if (ret < 0) {
   2ca78:	2800      	cmp	r0, #0
   2ca7a:	68e0      	ldr	r0, [r4, #12]
   2ca7c:	da02      	bge.n	2ca84 <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   2ca7e:	f000 f827 	bl	2cad0 <z_impl_zsock_close>
   2ca82:	e7f0      	b.n	2ca66 <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2ca84:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   2ca86:	68a3      	ldr	r3, [r4, #8]
   2ca88:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2ca8c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   2ca90:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2ca92:	8091      	strh	r1, [r2, #4]
	return 0;
   2ca94:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   2ca96:	60a3      	str	r3, [r4, #8]
	return 0;
   2ca98:	e7e9      	b.n	2ca6e <sntp_init+0x2c>
		return -EFAULT;
   2ca9a:	f06f 000d 	mvn.w	r0, #13
   2ca9e:	e7e6      	b.n	2ca6e <sntp_init+0x2c>

0002caa0 <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   2caa0:	b110      	cbz	r0, 2caa8 <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   2caa2:	68c0      	ldr	r0, [r0, #12]
   2caa4:	f000 b814 	b.w	2cad0 <z_impl_zsock_close>
	}
}
   2caa8:	4770      	bx	lr

0002caaa <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   2caaa:	f7e7 b957 	b.w	13d5c <socket_offload_getaddrinfo>

0002caae <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   2caae:	f7e7 b989 	b.w	13dc4 <socket_offload_freeaddrinfo>

0002cab2 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   2cab2:	b40c      	push	{r2, r3}
   2cab4:	4603      	mov	r3, r0
   2cab6:	b507      	push	{r0, r1, r2, lr}
   2cab8:	aa04      	add	r2, sp, #16
   2caba:	4608      	mov	r0, r1
   2cabc:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   2cac0:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   2cac2:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   2cac4:	4798      	blx	r3
	va_end(args);

	return res;
}
   2cac6:	b003      	add	sp, #12
   2cac8:	f85d eb04 	ldr.w	lr, [sp], #4
   2cacc:	b002      	add	sp, #8
   2cace:	4770      	bx	lr

0002cad0 <z_impl_zsock_close>:
{
   2cad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   2cad2:	a901      	add	r1, sp, #4
{
   2cad4:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   2cad6:	f7e5 fa4b 	bl	11f70 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   2cada:	b940      	cbnz	r0, 2caee <z_impl_zsock_close+0x1e>
		errno = EBADF;
   2cadc:	f000 f939 	bl	2cd52 <__errno>
   2cae0:	2309      	movs	r3, #9
		return -1;
   2cae2:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   2cae6:	6003      	str	r3, [r0, #0]
}
   2cae8:	4620      	mov	r0, r4
   2caea:	b003      	add	sp, #12
   2caec:	bd30      	pop	{r4, r5, pc}
	ret = vtable->fd_vtable.close(ctx);
   2caee:	9b01      	ldr	r3, [sp, #4]
   2caf0:	689b      	ldr	r3, [r3, #8]
   2caf2:	4798      	blx	r3
   2caf4:	4604      	mov	r4, r0
	z_free_fd(sock);
   2caf6:	4628      	mov	r0, r5
   2caf8:	f7e5 fa8a 	bl	12010 <z_free_fd>
	return ret;
   2cafc:	e7f4      	b.n	2cae8 <z_impl_zsock_close+0x18>

0002cafe <z_impl_zsock_connect>:
{
   2cafe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2cb00:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   2cb02:	a903      	add	r1, sp, #12
{
   2cb04:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   2cb06:	f7e5 fa33 	bl	11f70 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   2cb0a:	b118      	cbz	r0, 2cb14 <z_impl_zsock_connect+0x16>
   2cb0c:	9b03      	ldr	r3, [sp, #12]
   2cb0e:	9a01      	ldr	r2, [sp, #4]
   2cb10:	695b      	ldr	r3, [r3, #20]
   2cb12:	b93b      	cbnz	r3, 2cb24 <z_impl_zsock_connect+0x26>
   2cb14:	f000 f91d 	bl	2cd52 <__errno>
   2cb18:	2309      	movs	r3, #9
   2cb1a:	6003      	str	r3, [r0, #0]
   2cb1c:	f04f 30ff 	mov.w	r0, #4294967295
}
   2cb20:	b004      	add	sp, #16
   2cb22:	bd10      	pop	{r4, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   2cb24:	4621      	mov	r1, r4
   2cb26:	4798      	blx	r3
   2cb28:	e7fa      	b.n	2cb20 <z_impl_zsock_connect+0x22>

0002cb2a <z_impl_zsock_sendto>:
{
   2cb2a:	b530      	push	{r4, r5, lr}
   2cb2c:	b087      	sub	sp, #28
   2cb2e:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   2cb30:	a905      	add	r1, sp, #20
{
   2cb32:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   2cb36:	f7e5 fa1b 	bl	11f70 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2cb3a:	b120      	cbz	r0, 2cb46 <z_impl_zsock_sendto+0x1c>
   2cb3c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2cb40:	9905      	ldr	r1, [sp, #20]
   2cb42:	6a0d      	ldr	r5, [r1, #32]
   2cb44:	b93d      	cbnz	r5, 2cb56 <z_impl_zsock_sendto+0x2c>
   2cb46:	f000 f904 	bl	2cd52 <__errno>
   2cb4a:	2309      	movs	r3, #9
   2cb4c:	6003      	str	r3, [r0, #0]
   2cb4e:	f04f 30ff 	mov.w	r0, #4294967295
}
   2cb52:	b007      	add	sp, #28
   2cb54:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2cb56:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2cb58:	9101      	str	r1, [sp, #4]
   2cb5a:	990a      	ldr	r1, [sp, #40]	; 0x28
   2cb5c:	9100      	str	r1, [sp, #0]
   2cb5e:	4621      	mov	r1, r4
   2cb60:	47a8      	blx	r5
   2cb62:	e7f6      	b.n	2cb52 <z_impl_zsock_sendto+0x28>

0002cb64 <z_impl_zsock_sendmsg>:
{
   2cb64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2cb66:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   2cb68:	a903      	add	r1, sp, #12
{
   2cb6a:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   2cb6c:	f7e5 fa00 	bl	11f70 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2cb70:	b118      	cbz	r0, 2cb7a <z_impl_zsock_sendmsg+0x16>
   2cb72:	9b03      	ldr	r3, [sp, #12]
   2cb74:	9a01      	ldr	r2, [sp, #4]
   2cb76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2cb78:	b93b      	cbnz	r3, 2cb8a <z_impl_zsock_sendmsg+0x26>
   2cb7a:	f000 f8ea 	bl	2cd52 <__errno>
   2cb7e:	2309      	movs	r3, #9
   2cb80:	6003      	str	r3, [r0, #0]
   2cb82:	f04f 30ff 	mov.w	r0, #4294967295
}
   2cb86:	b004      	add	sp, #16
   2cb88:	bd10      	pop	{r4, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2cb8a:	4621      	mov	r1, r4
   2cb8c:	4798      	blx	r3
   2cb8e:	e7fa      	b.n	2cb86 <z_impl_zsock_sendmsg+0x22>

0002cb90 <z_impl_zsock_recvfrom>:
{
   2cb90:	b530      	push	{r4, r5, lr}
   2cb92:	b087      	sub	sp, #28
   2cb94:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   2cb96:	a905      	add	r1, sp, #20
{
   2cb98:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   2cb9c:	f7e5 f9e8 	bl	11f70 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2cba0:	b120      	cbz	r0, 2cbac <z_impl_zsock_recvfrom+0x1c>
   2cba2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2cba6:	9905      	ldr	r1, [sp, #20]
   2cba8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   2cbaa:	b93d      	cbnz	r5, 2cbbc <z_impl_zsock_recvfrom+0x2c>
   2cbac:	f000 f8d1 	bl	2cd52 <__errno>
   2cbb0:	2309      	movs	r3, #9
   2cbb2:	6003      	str	r3, [r0, #0]
   2cbb4:	f04f 30ff 	mov.w	r0, #4294967295
}
   2cbb8:	b007      	add	sp, #28
   2cbba:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2cbbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2cbbe:	9101      	str	r1, [sp, #4]
   2cbc0:	990a      	ldr	r1, [sp, #40]	; 0x28
   2cbc2:	9100      	str	r1, [sp, #0]
   2cbc4:	4621      	mov	r1, r4
   2cbc6:	47a8      	blx	r5
   2cbc8:	e7f6      	b.n	2cbb8 <z_impl_zsock_recvfrom+0x28>

0002cbca <set_starting_state>:
{
   2cbca:	b510      	push	{r4, lr}
	__asm__ volatile(
   2cbcc:	f04f 0320 	mov.w	r3, #32
   2cbd0:	f3ef 8211 	mrs	r2, BASEPRI
   2cbd4:	f383 8811 	msr	BASEPRI, r3
   2cbd8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2cbdc:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2cbde:	f003 0407 	and.w	r4, r3, #7
   2cbe2:	2c01      	cmp	r4, #1
   2cbe4:	d106      	bne.n	2cbf4 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2cbe6:	6001      	str	r1, [r0, #0]
	int err = 0;
   2cbe8:	2000      	movs	r0, #0
	__asm__ volatile(
   2cbea:	f382 8811 	msr	BASEPRI, r2
   2cbee:	f3bf 8f6f 	isb	sy
}
   2cbf2:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2cbf4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2cbf8:	428b      	cmp	r3, r1
		err = -EBUSY;
   2cbfa:	bf14      	ite	ne
   2cbfc:	f04f 30ff 	movne.w	r0, #4294967295
   2cc00:	f06f 000f 	mvneq.w	r0, #15
   2cc04:	e7f1      	b.n	2cbea <set_starting_state+0x20>

0002cc06 <set_on_state>:
	__asm__ volatile(
   2cc06:	f04f 0320 	mov.w	r3, #32
   2cc0a:	f3ef 8211 	mrs	r2, BASEPRI
   2cc0e:	f383 8811 	msr	BASEPRI, r3
   2cc12:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2cc16:	6803      	ldr	r3, [r0, #0]
   2cc18:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2cc1c:	f043 0302 	orr.w	r3, r3, #2
   2cc20:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2cc22:	f382 8811 	msr	BASEPRI, r2
   2cc26:	f3bf 8f6f 	isb	sy
}
   2cc2a:	4770      	bx	lr

0002cc2c <onoff_started_callback>:
	return &data->mgr[type];
   2cc2c:	68c0      	ldr	r0, [r0, #12]
   2cc2e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2cc30:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2cc34:	2100      	movs	r1, #0
   2cc36:	4710      	bx	r2

0002cc38 <api_stop>:
	return stop(dev, subsys, CTX_API);
   2cc38:	2280      	movs	r2, #128	; 0x80
   2cc3a:	f7e7 b95b 	b.w	13ef4 <stop>

0002cc3e <blocking_start_callback>:
{
   2cc3e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2cc40:	f7f7 bc82 	b.w	24548 <z_impl_k_sem_give>

0002cc44 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2cc44:	2000      	movs	r0, #0
   2cc46:	f7f5 ba15 	b.w	22074 <nrfx_clock_stop>

0002cc4a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2cc4a:	2000      	movs	r0, #0
   2cc4c:	f7f5 b9bc 	b.w	21fc8 <nrfx_clock_start>

0002cc50 <api_start>:
{
   2cc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = set_starting_state(&subdata->flags, ctx);
   2cc52:	240c      	movs	r4, #12
   2cc54:	b2c9      	uxtb	r1, r1
   2cc56:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2cc58:	68c5      	ldr	r5, [r0, #12]
{
   2cc5a:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   2cc5c:	f104 0048 	add.w	r0, r4, #72	; 0x48
   2cc60:	2180      	movs	r1, #128	; 0x80
   2cc62:	4428      	add	r0, r5
{
   2cc64:	4617      	mov	r7, r2
	err = set_starting_state(&subdata->flags, ctx);
   2cc66:	f7ff ffb0 	bl	2cbca <set_starting_state>
	if (err < 0) {
   2cc6a:	2800      	cmp	r0, #0
   2cc6c:	db08      	blt.n	2cc80 <api_start+0x30>
	subdata->cb = data->cb;
   2cc6e:	687b      	ldr	r3, [r7, #4]
   2cc70:	4425      	add	r5, r4
   2cc72:	642b      	str	r3, [r5, #64]	; 0x40
	subdata->user_data = data->user_data;
   2cc74:	68bb      	ldr	r3, [r7, #8]
   2cc76:	646b      	str	r3, [r5, #68]	; 0x44
	 get_sub_config(dev, type)->start();
   2cc78:	6873      	ldr	r3, [r6, #4]
   2cc7a:	591b      	ldr	r3, [r3, r4]
   2cc7c:	4798      	blx	r3
	return 0;
   2cc7e:	2000      	movs	r0, #0
}
   2cc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002cc82 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   2cc82:	4770      	bx	lr

0002cc84 <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   2cc84:	b510      	push	{r4, lr}
   2cc86:	b40f      	push	{r0, r1, r2, r3}
   2cc88:	f7f6 fc10 	bl	234ac <k_sched_lock>
   2cc8c:	bc0f      	pop	{r0, r1, r2, r3}
   2cc8e:	f7db f9ab 	bl	7fe8 <spm_request_random_number_nse>
   2cc92:	b40f      	push	{r0, r1, r2, r3}
   2cc94:	f7f6 fd20 	bl	236d8 <k_sched_unlock>
   2cc98:	bc0f      	pop	{r0, r1, r2, r3}
   2cc9a:	bd10      	pop	{r4, pc}

0002cc9c <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2cc9c:	2100      	movs	r1, #0
   2cc9e:	2001      	movs	r0, #1
   2cca0:	f7e7 bdb8 	b.w	14814 <z_arm_fatal_error>

0002cca4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2cca4:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2cca6:	f383 880b 	msr	PSPLIM, r3
}
   2ccaa:	4770      	bx	lr

0002ccac <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2ccac:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2ccae:	6800      	ldr	r0, [r0, #0]
   2ccb0:	f7e7 bdb0 	b.w	14814 <z_arm_fatal_error>

0002ccb4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2ccb4:	b508      	push	{r3, lr}
	handler();
   2ccb6:	f7e7 fe21 	bl	148fc <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2ccba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2ccbe:	f7e8 b8e1 	b.w	14e84 <z_arm_exc_exit>

0002ccc2 <mpu_configure_region>:
{
   2ccc2:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   2ccc4:	890a      	ldrh	r2, [r1, #8]
   2ccc6:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   2ccc8:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   2ccca:	684c      	ldr	r4, [r1, #4]
   2cccc:	f002 021f 	and.w	r2, r2, #31
{
   2ccd0:	b085      	sub	sp, #20
   2ccd2:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   2ccd6:	9300      	str	r3, [sp, #0]
   2ccd8:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2ccdc:	f023 031f 	bic.w	r3, r3, #31
   2cce0:	1e62      	subs	r2, r4, #1
   2cce2:	4413      	add	r3, r2
   2cce4:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   2cce8:	280f      	cmp	r0, #15
   2ccea:	4604      	mov	r4, r0
   2ccec:	9303      	str	r3, [sp, #12]
   2ccee:	d905      	bls.n	2ccfc <mpu_configure_region+0x3a>
   2ccf0:	f7e8 f962 	bl	14fb8 <region_allocate_and_init.part.0>
   2ccf4:	4604      	mov	r4, r0
}
   2ccf6:	4620      	mov	r0, r4
   2ccf8:	b005      	add	sp, #20
   2ccfa:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   2ccfc:	4669      	mov	r1, sp
   2ccfe:	f7e8 f943 	bl	14f88 <region_init>
	return region_allocate_and_init(index,
   2cd02:	e7f8      	b.n	2ccf6 <mpu_configure_region+0x34>

0002cd04 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2cd04:	e840 f000 	tt	r0, r0
   2cd08:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   2cd0a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   2cd0e:	bf14      	ite	ne
   2cd10:	4618      	movne	r0, r3
   2cd12:	f06f 0015 	mvneq.w	r0, #21
   2cd16:	4770      	bx	lr

0002cd18 <_stdout_hook_default>:
}
   2cd18:	f04f 30ff 	mov.w	r0, #4294967295
   2cd1c:	4770      	bx	lr

0002cd1e <_stdin_hook_default>:
}
   2cd1e:	2000      	movs	r0, #0
   2cd20:	4770      	bx	lr

0002cd22 <_read>:
{
   2cd22:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2cd24:	4611      	mov	r1, r2
   2cd26:	f7e8 bb1f 	b.w	15368 <z_impl_zephyr_read_stdin>

0002cd2a <_write>:
{
   2cd2a:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2cd2c:	4611      	mov	r1, r2
   2cd2e:	f7e8 bb2f 	b.w	15390 <z_impl_zephyr_write_stdout>

0002cd32 <_close>:
   2cd32:	f04f 30ff 	mov.w	r0, #4294967295
   2cd36:	4770      	bx	lr

0002cd38 <_lseek>:
}
   2cd38:	2000      	movs	r0, #0
   2cd3a:	4770      	bx	lr

0002cd3c <_isatty>:
}
   2cd3c:	2001      	movs	r0, #1
   2cd3e:	4770      	bx	lr

0002cd40 <_kill>:
}
   2cd40:	2000      	movs	r0, #0
   2cd42:	4770      	bx	lr

0002cd44 <_getpid>:
}
   2cd44:	2000      	movs	r0, #0
   2cd46:	4770      	bx	lr

0002cd48 <_fstat>:
	st->st_mode = S_IFCHR;
   2cd48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   2cd4c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   2cd4e:	604b      	str	r3, [r1, #4]
}
   2cd50:	4770      	bx	lr

0002cd52 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2cd52:	f7f5 ba95 	b.w	22280 <z_impl_z_errno>

0002cd56 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   2cd56:	b508      	push	{r3, lr}
	net_if_init();
   2cd58:	f7e8 fbf0 	bl	1553c <net_if_init>
	net_if_post_init();
   2cd5c:	f7e8 fc22 	bl	155a4 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   2cd60:	2000      	movs	r0, #0
   2cd62:	bd08      	pop	{r3, pc}

0002cd64 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   2cd64:	b110      	cbz	r0, 2cd6c <net_if_l2+0x8>
   2cd66:	6800      	ldr	r0, [r0, #0]
   2cd68:	b100      	cbz	r0, 2cd6c <net_if_l2+0x8>
	return iface->if_dev->l2;
   2cd6a:	6840      	ldr	r0, [r0, #4]
}
   2cd6c:	4770      	bx	lr

0002cd6e <l2_flags_get>:
{
   2cd6e:	b510      	push	{r4, lr}
   2cd70:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   2cd72:	f7ff fff7 	bl	2cd64 <net_if_l2>
   2cd76:	b128      	cbz	r0, 2cd84 <l2_flags_get+0x16>
   2cd78:	68c2      	ldr	r2, [r0, #12]
   2cd7a:	b11a      	cbz	r2, 2cd84 <l2_flags_get+0x16>
}
   2cd7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   2cd80:	4618      	mov	r0, r3
   2cd82:	4710      	bx	r2
}
   2cd84:	2000      	movs	r0, #0
   2cd86:	bd10      	pop	{r4, pc}

0002cd88 <net_byte_to_hex>:
{
   2cd88:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   2cd8a:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   2cd8c:	b1bb      	cbz	r3, 2cdbe <net_byte_to_hex+0x36>
		if (val < 10) {
   2cd8e:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   2cd90:	b26b      	sxtb	r3, r5
   2cd92:	bf86      	itte	hi
   2cd94:	f1a2 050a 	subhi.w	r5, r2, #10
   2cd98:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   2cd9a:	3330      	addls	r3, #48	; 0x30
   2cd9c:	1c44      	adds	r4, r0, #1
   2cd9e:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   2cda0:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   2cda4:	4619      	mov	r1, r3
   2cda6:	2b09      	cmp	r3, #9
	*ptr = '\0';
   2cda8:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   2cdac:	bf83      	ittte	hi
   2cdae:	3a0a      	subhi	r2, #10
   2cdb0:	1889      	addhi	r1, r1, r2
   2cdb2:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   2cdb4:	3130      	addls	r1, #48	; 0x30
   2cdb6:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   2cdb8:	7063      	strb	r3, [r4, #1]
   2cdba:	1c60      	adds	r0, r4, #1
}
   2cdbc:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   2cdbe:	2d00      	cmp	r5, #0
   2cdc0:	d1e5      	bne.n	2cd8e <net_byte_to_hex+0x6>
   2cdc2:	4604      	mov	r4, r0
   2cdc4:	e7ec      	b.n	2cda0 <net_byte_to_hex+0x18>

0002cdc6 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   2cdc6:	e9d0 2300 	ldrd	r2, r3, [r0]
   2cdca:	1a9b      	subs	r3, r3, r2
   2cdcc:	2b01      	cmp	r3, #1
{
   2cdce:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   2cdd0:	d90c      	bls.n	2cdec <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   2cdd2:	4614      	mov	r4, r2
   2cdd4:	1c53      	adds	r3, r2, #1
   2cdd6:	6003      	str	r3, [r0, #0]
   2cdd8:	f814 3b02 	ldrb.w	r3, [r4], #2
   2cddc:	021b      	lsls	r3, r3, #8
   2cdde:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   2cde0:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   2cde2:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   2cde4:	7852      	ldrb	r2, [r2, #1]
   2cde6:	4313      	orrs	r3, r2
   2cde8:	800b      	strh	r3, [r1, #0]
}
   2cdea:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2cdec:	f06f 0015 	mvn.w	r0, #21
   2cdf0:	e7fb      	b.n	2cdea <unpack_uint16+0x24>

0002cdf2 <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   2cdf2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2cdf4:	e9d0 3400 	ldrd	r3, r4, [r0]
   2cdf8:	429c      	cmp	r4, r3
   2cdfa:	d01f      	beq.n	2ce3c <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   2cdfc:	1c5c      	adds	r4, r3, #1
   2cdfe:	6004      	str	r4, [r0, #0]
   2ce00:	781b      	ldrb	r3, [r3, #0]
   2ce02:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   2ce04:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   2ce06:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   2ce08:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   2ce0a:	6804      	ldr	r4, [r0, #0]
   2ce0c:	42bc      	cmp	r4, r7
   2ce0e:	d218      	bcs.n	2ce42 <fixed_header_decode+0x50>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   2ce10:	4625      	mov	r5, r4
   2ce12:	f815 3b01 	ldrb.w	r3, [r5], #1
   2ce16:	6816      	ldr	r6, [r2, #0]
   2ce18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   2ce1c:	408b      	lsls	r3, r1
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   2ce1e:	4433      	add	r3, r6
   2ce20:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   2ce22:	6005      	str	r5, [r0, #0]
   2ce24:	f994 4000 	ldrsb.w	r4, [r4]
   2ce28:	2c00      	cmp	r4, #0
   2ce2a:	db04      	blt.n	2ce36 <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   2ce2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   2ce30:	d204      	bcs.n	2ce3c <fixed_header_decode+0x4a>
	return 0;
   2ce32:	2000      	movs	r0, #0
   2ce34:	e004      	b.n	2ce40 <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   2ce36:	3107      	adds	r1, #7
   2ce38:	291c      	cmp	r1, #28
   2ce3a:	d1e6      	bne.n	2ce0a <fixed_header_decode+0x18>
		return -EINVAL;
   2ce3c:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   2ce40:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   2ce42:	f06f 000a 	mvn.w	r0, #10
   2ce46:	e7fb      	b.n	2ce40 <fixed_header_decode+0x4e>

0002ce48 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   2ce48:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2ce4a:	e9d1 3500 	ldrd	r3, r5, [r1]
   2ce4e:	429d      	cmp	r5, r3
   2ce50:	d102      	bne.n	2ce58 <connect_ack_decode+0x10>
		return -EINVAL;
   2ce52:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   2ce56:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   2ce58:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2ce5a:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   2ce5c:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2ce5e:	d0f8      	beq.n	2ce52 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   2ce60:	461d      	mov	r5, r3
   2ce62:	f815 4b02 	ldrb.w	r4, [r5], #2
   2ce66:	600d      	str	r5, [r1, #0]
   2ce68:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   2ce6a:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
	return 0;
   2ce6e:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   2ce70:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   2ce72:	bf04      	itt	eq
   2ce74:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   2ce78:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   2ce7a:	7051      	strb	r1, [r2, #1]
	return 0;
   2ce7c:	e7eb      	b.n	2ce56 <connect_ack_decode+0xe>

0002ce7e <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   2ce7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2ce82:	461c      	mov	r4, r3
   2ce84:	4617      	mov	r7, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   2ce86:	7da2      	ldrb	r2, [r4, #22]
   2ce88:	0043      	lsls	r3, r0, #1
   2ce8a:	f022 0203 	bic.w	r2, r2, #3
   2ce8e:	f003 0302 	and.w	r3, r3, #2
   2ce92:	4313      	orrs	r3, r2
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   2ce94:	f3c0 0041 	ubfx	r0, r0, #1, #2
   2ce98:	7220      	strb	r0, [r4, #8]
{
   2ce9a:	4688      	mov	r8, r1
	err_code = unpack_uint16(buf, &utf8_strlen);
   2ce9c:	4638      	mov	r0, r7
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   2ce9e:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   2cea0:	f10d 0106 	add.w	r1, sp, #6
   2cea4:	f7ff ff8f 	bl	2cdc6 <unpack_uint16>
	if (err_code != 0) {
   2cea8:	4606      	mov	r6, r0
   2ceaa:	b9c0      	cbnz	r0, 2cede <publish_decode+0x60>
	if ((buf->end - buf->cur) < utf8_strlen) {
   2ceac:	683b      	ldr	r3, [r7, #0]
   2ceae:	687a      	ldr	r2, [r7, #4]
   2ceb0:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   2ceb4:	1ad2      	subs	r2, r2, r3
   2ceb6:	42aa      	cmp	r2, r5
   2ceb8:	da02      	bge.n	2cec0 <publish_decode+0x42>

	if (var_length < var_header_length) {
		MQTT_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   2ceba:	f06f 0615 	mvn.w	r6, #21
   2cebe:	e00e      	b.n	2cede <publish_decode+0x60>
	str->size = utf8_strlen;
   2cec0:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   2cec2:	b185      	cbz	r5, 2cee6 <publish_decode+0x68>
		str->utf8 = buf->cur;
   2cec4:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   2cec6:	442b      	add	r3, r5
   2cec8:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   2ceca:	7a23      	ldrb	r3, [r4, #8]
   2cecc:	b96b      	cbnz	r3, 2ceea <publish_decode+0x6c>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   2cece:	3502      	adds	r5, #2
	if (var_length < var_header_length) {
   2ced0:	4545      	cmp	r5, r8
   2ced2:	d8f2      	bhi.n	2ceba <publish_decode+0x3c>
	}

	param->message.payload.data = NULL;
   2ced4:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   2ced6:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   2ceda:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   2cedc:	6125      	str	r5, [r4, #16]

	return 0;
}
   2cede:	4630      	mov	r0, r6
   2cee0:	b002      	add	sp, #8
   2cee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   2cee6:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   2cee8:	e7ef      	b.n	2ceca <publish_decode+0x4c>
		err_code = unpack_uint16(buf, &param->message_id);
   2ceea:	4638      	mov	r0, r7
   2ceec:	f104 0114 	add.w	r1, r4, #20
   2cef0:	f7ff ff69 	bl	2cdc6 <unpack_uint16>
		if (err_code != 0) {
   2cef4:	b908      	cbnz	r0, 2cefa <publish_decode+0x7c>
		var_header_length += sizeof(uint16_t);
   2cef6:	3504      	adds	r5, #4
   2cef8:	e7ea      	b.n	2ced0 <publish_decode+0x52>
   2cefa:	4606      	mov	r6, r0
   2cefc:	e7ef      	b.n	2cede <publish_decode+0x60>

0002cefe <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2cefe:	f7ff bf62 	b.w	2cdc6 <unpack_uint16>

0002cf02 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2cf02:	f7ff bf60 	b.w	2cdc6 <unpack_uint16>

0002cf06 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2cf06:	f7ff bf5e 	b.w	2cdc6 <unpack_uint16>

0002cf0a <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2cf0a:	f7ff bf5c 	b.w	2cdc6 <unpack_uint16>

0002cf0e <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   2cf0e:	b538      	push	{r3, r4, r5, lr}
   2cf10:	4605      	mov	r5, r0
   2cf12:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   2cf14:	f7ff ff57 	bl	2cdc6 <unpack_uint16>
	if (err_code != 0) {
   2cf18:	b930      	cbnz	r0, 2cf28 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   2cf1a:	e9d5 2300 	ldrd	r2, r3, [r5]
   2cf1e:	1a99      	subs	r1, r3, r2
	str->len = length;
   2cf20:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   2cf22:	b111      	cbz	r1, 2cf2a <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   2cf24:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   2cf26:	602b      	str	r3, [r5, #0]
}
   2cf28:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   2cf2a:	6060      	str	r0, [r4, #4]
   2cf2c:	e7fc      	b.n	2cf28 <subscribe_ack_decode+0x1a>

0002cf2e <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2cf2e:	f7ff bf4a 	b.w	2cdc6 <unpack_uint16>

0002cf32 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   2cf32:	e9d1 3200 	ldrd	r3, r2, [r1]
   2cf36:	1ad2      	subs	r2, r2, r3
   2cf38:	2a01      	cmp	r2, #1
   2cf3a:	d909      	bls.n	2cf50 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   2cf3c:	1c5a      	adds	r2, r3, #1
   2cf3e:	600a      	str	r2, [r1, #0]
   2cf40:	0a02      	lsrs	r2, r0, #8
   2cf42:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   2cf44:	680b      	ldr	r3, [r1, #0]
   2cf46:	1c5a      	adds	r2, r3, #1
   2cf48:	600a      	str	r2, [r1, #0]
   2cf4a:	7018      	strb	r0, [r3, #0]
	return 0;
   2cf4c:	2000      	movs	r0, #0
   2cf4e:	4770      	bx	lr
		return -ENOMEM;
   2cf50:	f06f 000b 	mvn.w	r0, #11
}
   2cf54:	4770      	bx	lr

0002cf56 <pack_utf8_str>:
{
   2cf56:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   2cf58:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   2cf5c:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   2cf5e:	6840      	ldr	r0, [r0, #4]
   2cf60:	1a9b      	subs	r3, r3, r2
   2cf62:	1c82      	adds	r2, r0, #2
   2cf64:	4293      	cmp	r3, r2
{
   2cf66:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   2cf68:	d30d      	bcc.n	2cf86 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   2cf6a:	b280      	uxth	r0, r0
   2cf6c:	f7ff ffe1 	bl	2cf32 <pack_uint16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2cf70:	e9d5 1200 	ldrd	r1, r2, [r5]
   2cf74:	6820      	ldr	r0, [r4, #0]
   2cf76:	f7df fde9 	bl	cb4c <memcpy>
	return 0;
   2cf7a:	2000      	movs	r0, #0
	buf->cur += str->size;
   2cf7c:	6823      	ldr	r3, [r4, #0]
   2cf7e:	686a      	ldr	r2, [r5, #4]
   2cf80:	4413      	add	r3, r2
   2cf82:	6023      	str	r3, [r4, #0]
}
   2cf84:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   2cf86:	f06f 000b 	mvn.w	r0, #11
   2cf8a:	e7fb      	b.n	2cf84 <pack_utf8_str+0x2e>

0002cf8c <mqtt_encode_fixed_header>:
	uint32_t length = buf->cur - start;
   2cf8c:	6813      	ldr	r3, [r2, #0]
{
   2cf8e:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   2cf90:	1a5c      	subs	r4, r3, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   2cf92:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   2cf96:	d227      	bcs.n	2cfe8 <mqtt_encode_fixed_header+0x5c>
   2cf98:	4625      	mov	r5, r4
   2cf9a:	2600      	movs	r6, #0
	} while (length > 0);
   2cf9c:	09ed      	lsrs	r5, r5, #7
   2cf9e:	b2f3      	uxtb	r3, r6
   2cfa0:	f106 0601 	add.w	r6, r6, #1
   2cfa4:	d1fa      	bne.n	2cf9c <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   2cfa6:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2cfa8:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   2cfaa:	b2db      	uxtb	r3, r3
   2cfac:	425d      	negs	r5, r3
   2cfae:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2cfb0:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   2cfb2:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   2cfb4:	bf1e      	ittt	ne
   2cfb6:	3301      	addne	r3, #1
   2cfb8:	6013      	strne	r3, [r2, #0]
   2cfba:	5548      	strbne	r0, [r1, r5]
	return 0;
   2cfbc:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   2cfbe:	6813      	ldr	r3, [r2, #0]
   2cfc0:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   2cfc4:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   2cfc6:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   2cfc8:	bf1f      	itttt	ne
   2cfca:	6811      	ldrne	r1, [r2, #0]
   2cfcc:	780b      	ldrbne	r3, [r1, #0]
   2cfce:	f063 037f 	ornne	r3, r3, #127	; 0x7f
   2cfd2:	700b      	strbne	r3, [r1, #0]
			buf->cur++;
   2cfd4:	6813      	ldr	r3, [r2, #0]
   2cfd6:	3301      	adds	r3, #1
   2cfd8:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   2cfda:	2800      	cmp	r0, #0
   2cfdc:	d1ef      	bne.n	2cfbe <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   2cfde:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   2cfe0:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   2cfe2:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   2cfe4:	6053      	str	r3, [r2, #4]
}
   2cfe6:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   2cfe8:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2cfec:	e7fb      	b.n	2cfe6 <mqtt_encode_fixed_header+0x5a>

0002cfee <publish_encode>:
{
   2cfee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2cff2:	7d87      	ldrb	r7, [r0, #22]
   2cff4:	7a04      	ldrb	r4, [r0, #8]
   2cff6:	f007 0801 	and.w	r8, r7, #1
{
   2cffa:	4605      	mov	r5, r0
   2cffc:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2cffe:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   2d002:	b10c      	cbz	r4, 2d008 <publish_encode+0x1a>
   2d004:	8a83      	ldrh	r3, [r0, #20]
   2d006:	b383      	cbz	r3, 2d06a <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2d008:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   2d00c:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2d00e:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   2d010:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2d012:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   2d016:	f7ff ff9e 	bl	2cf56 <pack_utf8_str>
	if (err_code != 0) {
   2d01a:	b9b0      	cbnz	r0, 2d04a <publish_encode+0x5c>
	if (param->message.topic.qos) {
   2d01c:	7a2b      	ldrb	r3, [r5, #8]
   2d01e:	b9b3      	cbnz	r3, 2d04e <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2d020:	0060      	lsls	r0, r4, #1
   2d022:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   2d026:	692a      	ldr	r2, [r5, #16]
   2d028:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2d02c:	4338      	orrs	r0, r7
   2d02e:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   2d032:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2d034:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   2d038:	464a      	mov	r2, r9
   2d03a:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   2d03c:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   2d040:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2d044:	f7ff ffa2 	bl	2cf8c <mqtt_encode_fixed_header>
	if (err_code != 0) {
   2d048:	b140      	cbz	r0, 2d05c <publish_encode+0x6e>
}
   2d04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   2d04e:	4649      	mov	r1, r9
   2d050:	8aa8      	ldrh	r0, [r5, #20]
   2d052:	f7ff ff6e 	bl	2cf32 <pack_uint16>
		if (err_code != 0) {
   2d056:	2800      	cmp	r0, #0
   2d058:	d0e2      	beq.n	2d020 <publish_encode+0x32>
   2d05a:	e7f6      	b.n	2d04a <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   2d05c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2d060:	692a      	ldr	r2, [r5, #16]
   2d062:	1a9b      	subs	r3, r3, r2
   2d064:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   2d068:	e7ef      	b.n	2d04a <publish_encode+0x5c>
		return -EINVAL;
   2d06a:	f06f 0015 	mvn.w	r0, #21
   2d06e:	e7ec      	b.n	2d04a <publish_encode+0x5c>

0002d070 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   2d070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d072:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   2d074:	e9d1 3100 	ldrd	r3, r1, [r1]
   2d078:	1acb      	subs	r3, r1, r3
   2d07a:	4293      	cmp	r3, r2
{
   2d07c:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   2d07e:	d301      	bcc.n	2d084 <mqtt_read_message_chunk+0x14>
		return 0;
   2d080:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   2d082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   2d084:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   2d086:	190f      	adds	r7, r1, r4
   2d088:	e9d0 2313 	ldrd	r2, r3, [r0, #76]	; 0x4c
   2d08c:	4413      	add	r3, r2
   2d08e:	429f      	cmp	r7, r3
   2d090:	d813      	bhi.n	2d0ba <mqtt_read_message_chunk+0x4a>
   2d092:	4297      	cmp	r7, r2
   2d094:	d311      	bcc.n	2d0ba <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   2d096:	2300      	movs	r3, #0
   2d098:	4622      	mov	r2, r4
   2d09a:	f7e8 fc61 	bl	15960 <mqtt_transport_read>
	if (len < 0) {
   2d09e:	2800      	cmp	r0, #0
   2d0a0:	dbef      	blt.n	2d082 <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   2d0a2:	d00d      	beq.n	2d0c0 <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   2d0a4:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   2d0a6:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   2d0a8:	4403      	add	r3, r0
   2d0aa:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   2d0ac:	686b      	ldr	r3, [r5, #4]
   2d0ae:	4403      	add	r3, r0
   2d0b0:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   2d0b2:	d2e5      	bcs.n	2d080 <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   2d0b4:	f06f 000a 	mvn.w	r0, #10
   2d0b8:	e7e3      	b.n	2d082 <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   2d0ba:	f06f 000b 	mvn.w	r0, #11
   2d0be:	e7e0      	b.n	2d082 <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   2d0c0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2d0c4:	e7dd      	b.n	2d082 <mqtt_read_message_chunk+0x12>

0002d0c6 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   2d0c6:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   2d0c8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   2d0ca:	69c2      	ldr	r2, [r0, #28]
{
   2d0cc:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   2d0ce:	9302      	str	r3, [sp, #8]
{
   2d0d0:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   2d0d2:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   2d0d4:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   2d0d6:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   2d0d8:	4628      	mov	r0, r5
   2d0da:	a902      	add	r1, sp, #8
   2d0dc:	f7ff ffc8 	bl	2d070 <mqtt_read_message_chunk>
		if (err_code < 0) {
   2d0e0:	1e04      	subs	r4, r0, #0
   2d0e2:	db2d      	blt.n	2d140 <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   2d0e4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2d0e6:	aa01      	add	r2, sp, #4
   2d0e8:	f10d 0103 	add.w	r1, sp, #3
   2d0ec:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   2d0ee:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2d0f0:	f7ff fe7f 	bl	2cdf2 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   2d0f4:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2d0f8:	4604      	mov	r4, r0
		chunk_size = 1U;
   2d0fa:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   2d0fe:	d0eb      	beq.n	2d0d8 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   2d100:	2800      	cmp	r0, #0
   2d102:	db21      	blt.n	2d148 <mqtt_handle_rx+0x82>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   2d104:	f89d 6003 	ldrb.w	r6, [sp, #3]
   2d108:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   2d10c:	2b30      	cmp	r3, #48	; 0x30
   2d10e:	d11e      	bne.n	2d14e <mqtt_handle_rx+0x88>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   2d110:	2202      	movs	r2, #2
   2d112:	4628      	mov	r0, r5
   2d114:	a902      	add	r1, sp, #8
   2d116:	f7ff ffab 	bl	2d070 <mqtt_read_message_chunk>
	if (err_code < 0) {
   2d11a:	1e04      	subs	r4, r0, #0
   2d11c:	db10      	blt.n	2d140 <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   2d11e:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   2d120:	f016 0f06 	tst.w	r6, #6
   2d124:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   2d126:	4628      	mov	r0, r5
   2d128:	ba52      	rev16	r2, r2
   2d12a:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   2d12c:	bf0c      	ite	eq
   2d12e:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   2d130:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   2d132:	a902      	add	r1, sp, #8
   2d134:	f7ff ff9c 	bl	2d070 <mqtt_read_message_chunk>
	if (err_code < 0) {
   2d138:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   2d13c:	2c00      	cmp	r4, #0
   2d13e:	da0d      	bge.n	2d15c <mqtt_handle_rx+0x96>
		return (err_code == -EAGAIN) ? 0 : err_code;
   2d140:	f114 0f0b 	cmn.w	r4, #11
   2d144:	d100      	bne.n	2d148 <mqtt_handle_rx+0x82>
   2d146:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   2d148:	4620      	mov	r0, r4
   2d14a:	b00c      	add	sp, #48	; 0x30
   2d14c:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   2d14e:	4628      	mov	r0, r5
   2d150:	9a01      	ldr	r2, [sp, #4]
   2d152:	a902      	add	r1, sp, #8
   2d154:	f7ff ff8c 	bl	2d070 <mqtt_read_message_chunk>
   2d158:	4604      	mov	r4, r0
   2d15a:	e7ef      	b.n	2d13c <mqtt_handle_rx+0x76>
	evt.result = 0;
   2d15c:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   2d15e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   2d162:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   2d164:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   2d168:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   2d16a:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   2d16c:	d066      	beq.n	2d23c <mqtt_handle_rx+0x176>
   2d16e:	d813      	bhi.n	2d198 <mqtt_handle_rx+0xd2>
   2d170:	2b40      	cmp	r3, #64	; 0x40
   2d172:	d059      	beq.n	2d228 <mqtt_handle_rx+0x162>
   2d174:	d806      	bhi.n	2d184 <mqtt_handle_rx+0xbe>
   2d176:	2b20      	cmp	r3, #32
   2d178:	d02f      	beq.n	2d1da <mqtt_handle_rx+0x114>
   2d17a:	2b30      	cmp	r3, #48	; 0x30
   2d17c:	d048      	beq.n	2d210 <mqtt_handle_rx+0x14a>
	client->internal.rx_buf_datalen = 0U;
   2d17e:	2400      	movs	r4, #0
   2d180:	61ec      	str	r4, [r5, #28]
	return 0;
   2d182:	e7e1      	b.n	2d148 <mqtt_handle_rx+0x82>
	switch (type_and_flags & 0xF0) {
   2d184:	2b50      	cmp	r3, #80	; 0x50
   2d186:	d1fa      	bne.n	2d17e <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBREC;
   2d188:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   2d18a:	a905      	add	r1, sp, #20
   2d18c:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   2d18e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   2d192:	f7ff feb6 	bl	2cf02 <publish_receive_decode>
   2d196:	e04e      	b.n	2d236 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   2d198:	2bb0      	cmp	r3, #176	; 0xb0
   2d19a:	d05f      	beq.n	2d25c <mqtt_handle_rx+0x196>
   2d19c:	d80b      	bhi.n	2d1b6 <mqtt_handle_rx+0xf0>
   2d19e:	2b70      	cmp	r3, #112	; 0x70
   2d1a0:	d054      	beq.n	2d24c <mqtt_handle_rx+0x186>
   2d1a2:	2b90      	cmp	r3, #144	; 0x90
   2d1a4:	d1eb      	bne.n	2d17e <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_SUBACK;
   2d1a6:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   2d1a8:	a905      	add	r1, sp, #20
   2d1aa:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   2d1ac:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   2d1b0:	f7ff fead 	bl	2cf0e <subscribe_ack_decode>
   2d1b4:	e03f      	b.n	2d236 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   2d1b6:	2bd0      	cmp	r3, #208	; 0xd0
   2d1b8:	d1e1      	bne.n	2d17e <mqtt_handle_rx+0xb8>
		if (client->unacked_ping <= 0) {
   2d1ba:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
	int err_code = 0;
   2d1be:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   2d1c0:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   2d1c2:	bfc8      	it	gt
   2d1c4:	f103 32ff 	addgt.w	r2, r3, #4294967295
		evt.type = MQTT_EVT_PINGRESP;
   2d1c8:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   2d1cc:	bfc8      	it	gt
   2d1ce:	b252      	sxtbgt	r2, r2
   2d1d0:	f885 205f 	strb.w	r2, [r5, #95]	; 0x5f
		evt.type = MQTT_EVT_PINGRESP;
   2d1d4:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   2d1d8:	e010      	b.n	2d1fc <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_CONNACK;
   2d1da:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   2d1de:	4628      	mov	r0, r5
   2d1e0:	aa05      	add	r2, sp, #20
   2d1e2:	a902      	add	r1, sp, #8
   2d1e4:	f7ff fe30 	bl	2ce48 <connect_ack_decode>
		if (err_code == 0) {
   2d1e8:	4604      	mov	r4, r0
   2d1ea:	bb28      	cbnz	r0, 2d238 <mqtt_handle_rx+0x172>
			if (evt.param.connack.return_code ==
   2d1ec:	f89d 2015 	ldrb.w	r2, [sp, #21]
   2d1f0:	b95a      	cbnz	r2, 2d20a <mqtt_handle_rx+0x144>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   2d1f2:	69ab      	ldr	r3, [r5, #24]
   2d1f4:	f043 0304 	orr.w	r3, r3, #4
   2d1f8:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   2d1fa:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   2d1fc:	4628      	mov	r0, r5
   2d1fe:	a904      	add	r1, sp, #16
   2d200:	f000 f8bf 	bl	2d382 <event_notify>
	if (err_code < 0) {
   2d204:	2c00      	cmp	r4, #0
   2d206:	daba      	bge.n	2d17e <mqtt_handle_rx+0xb8>
   2d208:	e79e      	b.n	2d148 <mqtt_handle_rx+0x82>
				err_code = -ECONNREFUSED;
   2d20a:	f06f 046e 	mvn.w	r4, #110	; 0x6e
   2d20e:	e7f4      	b.n	2d1fa <mqtt_handle_rx+0x134>
		evt.type = MQTT_EVT_PUBLISH;
   2d210:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   2d212:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   2d214:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   2d218:	ab05      	add	r3, sp, #20
   2d21a:	f7ff fe30 	bl	2ce7e <publish_decode>
		client->internal.remaining_payload =
   2d21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   2d220:	4604      	mov	r4, r0
		evt.result = err_code;
   2d222:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   2d224:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   2d226:	e7e9      	b.n	2d1fc <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBACK;
   2d228:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   2d22a:	a905      	add	r1, sp, #20
   2d22c:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   2d22e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   2d232:	f7ff fe64 	bl	2cefe <publish_ack_decode>
   2d236:	4604      	mov	r4, r0
		evt.result = err_code;
   2d238:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   2d23a:	e7df      	b.n	2d1fc <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBREL;
   2d23c:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   2d23e:	a905      	add	r1, sp, #20
   2d240:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   2d242:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   2d246:	f7ff fe5e 	bl	2cf06 <publish_release_decode>
   2d24a:	e7f4      	b.n	2d236 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_PUBCOMP;
   2d24c:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   2d24e:	a905      	add	r1, sp, #20
   2d250:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   2d252:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   2d256:	f7ff fe58 	bl	2cf0a <publish_complete_decode>
   2d25a:	e7ec      	b.n	2d236 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_UNSUBACK;
   2d25c:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   2d25e:	a905      	add	r1, sp, #20
   2d260:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   2d264:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   2d268:	f7ff fe61 	bl	2cf2e <unsubscribe_ack_decode>
   2d26c:	e7e3      	b.n	2d236 <mqtt_handle_rx+0x170>

0002d26e <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   2d26e:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   2d270:	6b45      	ldr	r5, [r0, #52]	; 0x34
{
   2d272:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   2d274:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   2d276:	2206      	movs	r2, #6
   2d278:	2101      	movs	r1, #1
   2d27a:	f7e6 fbf7 	bl	13a6c <z_impl_zsock_socket>
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   2d27e:	2800      	cmp	r0, #0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   2d280:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   2d282:	da04      	bge.n	2d28e <mqtt_client_tcp_connect+0x20>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   2d284:	f7ff fd65 	bl	2cd52 <__errno>
   2d288:	6800      	ldr	r0, [r0, #0]
   2d28a:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   2d28c:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   2d28e:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   2d290:	6b61      	ldr	r1, [r4, #52]	; 0x34
	if (broker->sa_family == AF_INET) {
   2d292:	2b01      	cmp	r3, #1
		peer_addr_size = sizeof(struct sockaddr_in);
   2d294:	bf14      	ite	ne
   2d296:	2218      	movne	r2, #24
   2d298:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   2d29a:	f7ff fc30 	bl	2cafe <z_impl_zsock_connect>
	if (ret < 0) {
   2d29e:	2800      	cmp	r0, #0
   2d2a0:	da03      	bge.n	2d2aa <mqtt_client_tcp_connect+0x3c>
		(void)close(client->transport.tcp.sock);
   2d2a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   2d2a4:	f7ff fc14 	bl	2cad0 <z_impl_zsock_close>
   2d2a8:	e7ec      	b.n	2d284 <mqtt_client_tcp_connect+0x16>
	return 0;
   2d2aa:	2000      	movs	r0, #0
   2d2ac:	e7ee      	b.n	2d28c <mqtt_client_tcp_connect+0x1e>

0002d2ae <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   2d2ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   2d2b2:	2400      	movs	r4, #0
{
   2d2b4:	4606      	mov	r6, r0
   2d2b6:	460f      	mov	r7, r1
   2d2b8:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2d2ba:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   2d2bc:	42ac      	cmp	r4, r5
   2d2be:	d301      	bcc.n	2d2c4 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   2d2c0:	2000      	movs	r0, #0
   2d2c2:	e00d      	b.n	2d2e0 <mqtt_client_tcp_write+0x32>
		ret = send(client->transport.tcp.sock, data + offset,
   2d2c4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   2d2c6:	2300      	movs	r3, #0
   2d2c8:	e9cd 8800 	strd	r8, r8, [sp]
   2d2cc:	1b2a      	subs	r2, r5, r4
   2d2ce:	1939      	adds	r1, r7, r4
   2d2d0:	f7ff fc2b 	bl	2cb2a <z_impl_zsock_sendto>
		if (ret < 0) {
   2d2d4:	1e03      	subs	r3, r0, #0
   2d2d6:	da06      	bge.n	2d2e6 <mqtt_client_tcp_write+0x38>
			return -errno;
   2d2d8:	f7ff fd3b 	bl	2cd52 <__errno>
   2d2dc:	6800      	ldr	r0, [r0, #0]
   2d2de:	4240      	negs	r0, r0
}
   2d2e0:	b002      	add	sp, #8
   2d2e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   2d2e6:	441c      	add	r4, r3
   2d2e8:	e7e8      	b.n	2d2bc <mqtt_client_tcp_write+0xe>

0002d2ea <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   2d2ea:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tcp.sock, message, 0);
   2d2ec:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   2d2ee:	2200      	movs	r2, #0
   2d2f0:	f7ff fc38 	bl	2cb64 <z_impl_zsock_sendmsg>
	if (ret < 0) {
   2d2f4:	2800      	cmp	r0, #0
   2d2f6:	da04      	bge.n	2d302 <mqtt_client_tcp_write_msg+0x18>
		return -errno;
   2d2f8:	f7ff fd2b 	bl	2cd52 <__errno>
   2d2fc:	6800      	ldr	r0, [r0, #0]
   2d2fe:	4240      	negs	r0, r0
	}

	return 0;
}
   2d300:	bd08      	pop	{r3, pc}
	return 0;
   2d302:	2000      	movs	r0, #0
   2d304:	e7fc      	b.n	2d300 <mqtt_client_tcp_write_msg+0x16>

0002d306 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   2d306:	b513      	push	{r0, r1, r4, lr}
   2d308:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   2d30a:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   2d30c:	bf14      	ite	ne
   2d30e:	4623      	movne	r3, r4
   2d310:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   2d312:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   2d314:	e9cd 4400 	strd	r4, r4, [sp]
   2d318:	f7ff fc3a 	bl	2cb90 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   2d31c:	2800      	cmp	r0, #0
   2d31e:	da03      	bge.n	2d328 <mqtt_client_tcp_read+0x22>
		return -errno;
   2d320:	f7ff fd17 	bl	2cd52 <__errno>
   2d324:	6800      	ldr	r0, [r0, #0]
   2d326:	4240      	negs	r0, r0
	}

	return ret;
}
   2d328:	b002      	add	sp, #8
   2d32a:	bd10      	pop	{r4, pc}

0002d32c <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   2d32c:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   2d32e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   2d330:	f7ff fbce 	bl	2cad0 <z_impl_zsock_close>
	if (ret < 0) {
   2d334:	2800      	cmp	r0, #0
   2d336:	da04      	bge.n	2d342 <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   2d338:	f7ff fd0b 	bl	2cd52 <__errno>
   2d33c:	6800      	ldr	r0, [r0, #0]
   2d33e:	4240      	negs	r0, r0
	}

	return 0;
}
   2d340:	bd08      	pop	{r3, pc}
	return 0;
   2d342:	2000      	movs	r0, #0
   2d344:	e7fc      	b.n	2d340 <mqtt_client_tcp_disconnect+0x14>

0002d346 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   2d346:	f7ff bff1 	b.w	2d32c <mqtt_client_tcp_disconnect>

0002d34a <k_uptime_get>:
{
   2d34a:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   2d34c:	f001 fa4c 	bl	2e7e8 <z_impl_k_uptime_ticks>
   2d350:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2d354:	fba0 2304 	umull	r2, r3, r0, r4
   2d358:	fb04 3301 	mla	r3, r4, r1, r3
   2d35c:	0bd0      	lsrs	r0, r2, #15
}
   2d35e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2d362:	0bd9      	lsrs	r1, r3, #15
   2d364:	bd10      	pop	{r4, pc}

0002d366 <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   2d366:	b538      	push	{r3, r4, r5, lr}
   2d368:	4604      	mov	r4, r0
   2d36a:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   2d36c:	6d82      	ldr	r2, [r0, #88]	; 0x58
   2d36e:	2100      	movs	r1, #0
   2d370:	6d40      	ldr	r0, [r0, #84]	; 0x54
   2d372:	f7f8 fe83 	bl	2607c <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   2d376:	6d63      	ldr	r3, [r4, #84]	; 0x54
	buf->end = client->tx_buf + client->tx_buf_size;
   2d378:	6da2      	ldr	r2, [r4, #88]	; 0x58
	buf->cur = client->tx_buf;
   2d37a:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   2d37c:	4413      	add	r3, r2
   2d37e:	606b      	str	r3, [r5, #4]
}
   2d380:	bd38      	pop	{r3, r4, r5, pc}

0002d382 <event_notify>:

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   2d382:	b513      	push	{r0, r1, r4, lr}
	if (client->evt_cb != NULL) {
   2d384:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   2d386:	4604      	mov	r4, r0
   2d388:	9101      	str	r1, [sp, #4]
	if (client->evt_cb != NULL) {
   2d38a:	b15b      	cbz	r3, 2d3a4 <event_notify+0x22>
		mqtt_mutex_unlock(client);
   2d38c:	f7e8 faf6 	bl	1597c <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   2d390:	4620      	mov	r0, r4
   2d392:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2d394:	9901      	ldr	r1, [sp, #4]
   2d396:	4798      	blx	r3

		mqtt_mutex_lock(client);
   2d398:	4620      	mov	r0, r4
	}
}
   2d39a:	b002      	add	sp, #8
   2d39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mqtt_mutex_lock(client);
   2d3a0:	f7e8 bb18 	b.w	159d4 <mqtt_mutex_lock>
}
   2d3a4:	b002      	add	sp, #8
   2d3a6:	bd10      	pop	{r4, pc}

0002d3a8 <client_disconnect.constprop.0>:

static void client_disconnect(struct mqtt_client *client, int result,
   2d3a8:	b530      	push	{r4, r5, lr}
   2d3aa:	b089      	sub	sp, #36	; 0x24
   2d3ac:	4604      	mov	r4, r0
   2d3ae:	460d      	mov	r5, r1
			      bool notify)
{
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   2d3b0:	f7ff ffc9 	bl	2d346 <mqtt_transport_disconnect>
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	if (notify) {
		struct mqtt_evt evt = {
   2d3b4:	221c      	movs	r2, #28
   2d3b6:	2100      	movs	r1, #0
   2d3b8:	4668      	mov	r0, sp
   2d3ba:	f7f8 fe5f 	bl	2607c <memset>
   2d3be:	2301      	movs	r3, #1
			.type = MQTT_EVT_DISCONNECT,
			.result = result,
		};

		/* Notify application. */
		event_notify(client, &evt);
   2d3c0:	4669      	mov	r1, sp
   2d3c2:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   2d3c4:	f88d 3000 	strb.w	r3, [sp]
   2d3c8:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   2d3ca:	f7ff ffda 	bl	2d382 <event_notify>
	MQTT_STATE_INIT(client);
   2d3ce:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   2d3d0:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   2d3d4:	e9c4 3307 	strd	r3, r3, [r4, #28]
	}

	/* Reset internal state. */
	client_reset(client);
}
   2d3d8:	b009      	add	sp, #36	; 0x24
   2d3da:	bd30      	pop	{r4, r5, pc}

0002d3dc <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   2d3dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d3de:	4617      	mov	r7, r2
   2d3e0:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   2d3e2:	4605      	mov	r5, r0
{
   2d3e4:	9101      	str	r1, [sp, #4]
	NULL_PARAM_CHECK(client);
   2d3e6:	b320      	cbz	r0, 2d432 <read_publish_payload+0x56>

	mqtt_mutex_lock(client);
   2d3e8:	f7e8 faf4 	bl	159d4 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   2d3ec:	6a2c      	ldr	r4, [r5, #32]
   2d3ee:	b1b4      	cbz	r4, 2d41e <read_publish_payload+0x42>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   2d3f0:	42bc      	cmp	r4, r7
   2d3f2:	4622      	mov	r2, r4
   2d3f4:	4633      	mov	r3, r6
   2d3f6:	bf28      	it	cs
   2d3f8:	463a      	movcs	r2, r7
   2d3fa:	4628      	mov	r0, r5
   2d3fc:	9901      	ldr	r1, [sp, #4]
   2d3fe:	f7e8 faaf 	bl	15960 <mqtt_transport_read>
   2d402:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   2d404:	b916      	cbnz	r6, 2d40c <read_publish_payload+0x30>
   2d406:	f110 0f0b 	cmn.w	r0, #11
   2d40a:	d008      	beq.n	2d41e <read_publish_payload+0x42>
		goto exit;
	}

	if (ret <= 0) {
   2d40c:	2c00      	cmp	r4, #0
   2d40e:	dc0c      	bgt.n	2d42a <read_publish_payload+0x4e>
		if (ret == 0) {
			ret = -ENOTCONN;
   2d410:	bf08      	it	eq
   2d412:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   2d416:	4628      	mov	r0, r5
   2d418:	4621      	mov	r1, r4
   2d41a:	f7ff ffc5 	bl	2d3a8 <client_disconnect.constprop.0>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   2d41e:	4628      	mov	r0, r5
   2d420:	f7e8 faac 	bl	1597c <mqtt_mutex_unlock>

	return ret;
}
   2d424:	4620      	mov	r0, r4
   2d426:	b003      	add	sp, #12
   2d428:	bdf0      	pop	{r4, r5, r6, r7, pc}
	client->internal.remaining_payload -= ret;
   2d42a:	6a2b      	ldr	r3, [r5, #32]
   2d42c:	1b1b      	subs	r3, r3, r4
   2d42e:	622b      	str	r3, [r5, #32]
   2d430:	e7f5      	b.n	2d41e <read_publish_payload+0x42>
	NULL_PARAM_CHECK(client);
   2d432:	f06f 0415 	mvn.w	r4, #21
   2d436:	e7f5      	b.n	2d424 <read_publish_payload+0x48>

0002d438 <client_write>:
{
   2d438:	b538      	push	{r3, r4, r5, lr}
   2d43a:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   2d43c:	f7e8 fa76 	bl	1592c <mqtt_transport_write>
	if (err_code < 0) {
   2d440:	1e04      	subs	r4, r0, #0
   2d442:	da05      	bge.n	2d450 <client_write+0x18>
		client_disconnect(client, err_code, true);
   2d444:	4621      	mov	r1, r4
   2d446:	4628      	mov	r0, r5
   2d448:	f7ff ffae 	bl	2d3a8 <client_disconnect.constprop.0>
}
   2d44c:	4620      	mov	r0, r4
   2d44e:	bd38      	pop	{r3, r4, r5, pc}
	return (uint32_t)k_uptime_get();
   2d450:	f7ff ff7b 	bl	2d34a <k_uptime_get>
	return 0;
   2d454:	2400      	movs	r4, #0
   2d456:	6168      	str	r0, [r5, #20]
   2d458:	e7f8      	b.n	2d44c <client_write+0x14>

0002d45a <mqtt_client_init>:
{
   2d45a:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK_VOID(client);
   2d45c:	4604      	mov	r4, r0
   2d45e:	b1a8      	cbz	r0, 2d48c <mqtt_client_init+0x32>
	MQTT_STATE_INIT(client);
   2d460:	2500      	movs	r5, #0
   2d462:	2264      	movs	r2, #100	; 0x64
   2d464:	2100      	movs	r1, #0
   2d466:	f7f8 fe09 	bl	2607c <memset>
   2d46a:	61a5      	str	r5, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   2d46c:	4620      	mov	r0, r4
   2d46e:	f001 f8c9 	bl	2e604 <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   2d472:	2304      	movs	r3, #4
   2d474:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	client->clean_session = MQTT_CLEAN_SESSION;
   2d478:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   2d47c:	f365 0341 	bfi	r3, r5, #1, #1
   2d480:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	client->keepalive = MQTT_KEEPALIVE;
   2d484:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   2d488:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
}
   2d48c:	bd38      	pop	{r3, r4, r5, pc}

0002d48e <mqtt_connect>:
{
   2d48e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2d490:	4605      	mov	r5, r0
   2d492:	2800      	cmp	r0, #0
   2d494:	d03b      	beq.n	2d50e <mqtt_connect+0x80>
	NULL_PARAM_CHECK(client->client_id.utf8);
   2d496:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2d498:	2b00      	cmp	r3, #0
   2d49a:	d038      	beq.n	2d50e <mqtt_connect+0x80>
	mqtt_mutex_lock(client);
   2d49c:	f7e8 fa9a 	bl	159d4 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   2d4a0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   2d4a2:	b38b      	cbz	r3, 2d508 <mqtt_connect+0x7a>
   2d4a4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   2d4a6:	b37b      	cbz	r3, 2d508 <mqtt_connect+0x7a>
	err_code = mqtt_transport_connect(client);
   2d4a8:	4628      	mov	r0, r5
   2d4aa:	f7e8 fa35 	bl	15918 <mqtt_transport_connect>
	if (err_code < 0) {
   2d4ae:	1e04      	subs	r4, r0, #0
   2d4b0:	db24      	blt.n	2d4fc <mqtt_connect+0x6e>
	tx_buf_init(client, &packet);
   2d4b2:	4669      	mov	r1, sp
   2d4b4:	4628      	mov	r0, r5
   2d4b6:	f7ff ff56 	bl	2d366 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   2d4ba:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   2d4bc:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   2d4be:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   2d4c2:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   2d4c4:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   2d4c6:	f7e8 f983 	bl	157d0 <connect_request_encode>
	if (err_code < 0) {
   2d4ca:	1e04      	subs	r4, r0, #0
   2d4cc:	db13      	blt.n	2d4f6 <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   2d4ce:	e9dd 1200 	ldrd	r1, r2, [sp]
   2d4d2:	4628      	mov	r0, r5
   2d4d4:	1a52      	subs	r2, r2, r1
   2d4d6:	f7e8 fa29 	bl	1592c <mqtt_transport_write>
	if (err_code < 0) {
   2d4da:	1e04      	subs	r4, r0, #0
   2d4dc:	db0b      	blt.n	2d4f6 <mqtt_connect+0x68>
   2d4de:	f7ff ff34 	bl	2d34a <k_uptime_get>
	client->unacked_ping = 0;
   2d4e2:	2400      	movs	r4, #0
   2d4e4:	6168      	str	r0, [r5, #20]
   2d4e6:	f885 405f 	strb.w	r4, [r5, #95]	; 0x5f
	mqtt_mutex_unlock(client);
   2d4ea:	4628      	mov	r0, r5
   2d4ec:	f7e8 fa46 	bl	1597c <mqtt_mutex_unlock>
}
   2d4f0:	4620      	mov	r0, r4
   2d4f2:	b003      	add	sp, #12
   2d4f4:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   2d4f6:	4628      	mov	r0, r5
   2d4f8:	f7ff ff25 	bl	2d346 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   2d4fc:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   2d4fe:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   2d502:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   2d506:	e7f0      	b.n	2d4ea <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   2d508:	f06f 040b 	mvn.w	r4, #11
   2d50c:	e7f6      	b.n	2d4fc <mqtt_connect+0x6e>
	NULL_PARAM_CHECK(client);
   2d50e:	f06f 0415 	mvn.w	r4, #21
   2d512:	e7ed      	b.n	2d4f0 <mqtt_connect+0x62>

0002d514 <mqtt_publish>:
{
   2d514:	b570      	push	{r4, r5, r6, lr}
   2d516:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   2d518:	4605      	mov	r5, r0
{
   2d51a:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   2d51c:	2800      	cmp	r0, #0
   2d51e:	d03b      	beq.n	2d598 <mqtt_publish+0x84>
	NULL_PARAM_CHECK(param);
   2d520:	2900      	cmp	r1, #0
   2d522:	d039      	beq.n	2d598 <mqtt_publish+0x84>
	mqtt_mutex_lock(client);
   2d524:	f7e8 fa56 	bl	159d4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   2d528:	4628      	mov	r0, r5
   2d52a:	a901      	add	r1, sp, #4
   2d52c:	f7ff ff1b 	bl	2d366 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   2d530:	69ab      	ldr	r3, [r5, #24]
   2d532:	075b      	lsls	r3, r3, #29
   2d534:	d52d      	bpl.n	2d592 <mqtt_publish+0x7e>
	err_code = publish_encode(param, &packet);
   2d536:	4630      	mov	r0, r6
   2d538:	a901      	add	r1, sp, #4
   2d53a:	f7ff fd58 	bl	2cfee <publish_encode>
	if (err_code < 0) {
   2d53e:	1e04      	subs	r4, r0, #0
   2d540:	db1c      	blt.n	2d57c <mqtt_publish+0x68>
	io_vector[0].iov_base = packet.cur;
   2d542:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   2d544:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   2d546:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   2d548:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   2d54a:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   2d54c:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   2d54e:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   2d550:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   2d552:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   2d554:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   2d556:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   2d55a:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   2d55c:	f7f8 fd8e 	bl	2607c <memset>
	msg.msg_iov = io_vector;
   2d560:	ab03      	add	r3, sp, #12
   2d562:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   2d564:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   2d566:	4628      	mov	r0, r5
   2d568:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   2d56a:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   2d56c:	f7e8 f9ea 	bl	15944 <mqtt_transport_write_msg>
	if (err_code < 0) {
   2d570:	1e04      	subs	r4, r0, #0
   2d572:	da09      	bge.n	2d588 <mqtt_publish+0x74>
		client_disconnect(client, err_code, true);
   2d574:	4621      	mov	r1, r4
   2d576:	4628      	mov	r0, r5
   2d578:	f7ff ff16 	bl	2d3a8 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   2d57c:	4628      	mov	r0, r5
   2d57e:	f7e8 f9fd 	bl	1597c <mqtt_mutex_unlock>
}
   2d582:	4620      	mov	r0, r4
   2d584:	b00e      	add	sp, #56	; 0x38
   2d586:	bd70      	pop	{r4, r5, r6, pc}
   2d588:	f7ff fedf 	bl	2d34a <k_uptime_get>
	return 0;
   2d58c:	2400      	movs	r4, #0
   2d58e:	6168      	str	r0, [r5, #20]
   2d590:	e7f4      	b.n	2d57c <mqtt_publish+0x68>
		return -ENOTCONN;
   2d592:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2d596:	e7f1      	b.n	2d57c <mqtt_publish+0x68>
	NULL_PARAM_CHECK(client);
   2d598:	f06f 0415 	mvn.w	r4, #21
   2d59c:	e7f1      	b.n	2d582 <mqtt_publish+0x6e>

0002d59e <mqtt_disconnect>:
{
   2d59e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2d5a0:	4605      	mov	r5, r0
   2d5a2:	b310      	cbz	r0, 2d5ea <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   2d5a4:	f7e8 fa16 	bl	159d4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   2d5a8:	4669      	mov	r1, sp
   2d5aa:	4628      	mov	r0, r5
   2d5ac:	f7ff fedb 	bl	2d366 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   2d5b0:	69ab      	ldr	r3, [r5, #24]
   2d5b2:	075b      	lsls	r3, r3, #29
   2d5b4:	d516      	bpl.n	2d5e4 <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   2d5b6:	4668      	mov	r0, sp
   2d5b8:	f7e8 f98a 	bl	158d0 <disconnect_encode>
	if (err_code < 0) {
   2d5bc:	1e04      	subs	r4, r0, #0
   2d5be:	db0b      	blt.n	2d5d8 <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2d5c0:	e9dd 1200 	ldrd	r1, r2, [sp]
   2d5c4:	4628      	mov	r0, r5
   2d5c6:	1a52      	subs	r2, r2, r1
   2d5c8:	f7ff ff36 	bl	2d438 <client_write>
	if (err_code < 0) {
   2d5cc:	1e04      	subs	r4, r0, #0
   2d5ce:	db03      	blt.n	2d5d8 <mqtt_disconnect+0x3a>
	client_disconnect(client, 0, true);
   2d5d0:	2100      	movs	r1, #0
   2d5d2:	4628      	mov	r0, r5
   2d5d4:	f7ff fee8 	bl	2d3a8 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   2d5d8:	4628      	mov	r0, r5
   2d5da:	f7e8 f9cf 	bl	1597c <mqtt_mutex_unlock>
}
   2d5de:	4620      	mov	r0, r4
   2d5e0:	b003      	add	sp, #12
   2d5e2:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   2d5e4:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2d5e8:	e7f6      	b.n	2d5d8 <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   2d5ea:	f06f 0415 	mvn.w	r4, #21
   2d5ee:	e7f6      	b.n	2d5de <mqtt_disconnect+0x40>

0002d5f0 <mqtt_ping>:
{
   2d5f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2d5f2:	4605      	mov	r5, r0
   2d5f4:	b320      	cbz	r0, 2d640 <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   2d5f6:	f7e8 f9ed 	bl	159d4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   2d5fa:	4669      	mov	r1, sp
   2d5fc:	4628      	mov	r0, r5
   2d5fe:	f7ff feb2 	bl	2d366 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   2d602:	69ab      	ldr	r3, [r5, #24]
   2d604:	075b      	lsls	r3, r3, #29
   2d606:	d518      	bpl.n	2d63a <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   2d608:	4668      	mov	r0, sp
   2d60a:	f7e8 f973 	bl	158f4 <ping_request_encode>
	if (err_code < 0) {
   2d60e:	1e04      	subs	r4, r0, #0
   2d610:	db0d      	blt.n	2d62e <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2d612:	e9dd 1200 	ldrd	r1, r2, [sp]
   2d616:	4628      	mov	r0, r5
   2d618:	1a52      	subs	r2, r2, r1
   2d61a:	f7ff ff0d 	bl	2d438 <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   2d61e:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2d622:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   2d624:	2b7f      	cmp	r3, #127	; 0x7f
   2d626:	d002      	beq.n	2d62e <mqtt_ping+0x3e>
		client->unacked_ping++;
   2d628:	3301      	adds	r3, #1
   2d62a:	f885 305f 	strb.w	r3, [r5, #95]	; 0x5f
	mqtt_mutex_unlock(client);
   2d62e:	4628      	mov	r0, r5
   2d630:	f7e8 f9a4 	bl	1597c <mqtt_mutex_unlock>
}
   2d634:	4620      	mov	r0, r4
   2d636:	b003      	add	sp, #12
   2d638:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   2d63a:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2d63e:	e7f6      	b.n	2d62e <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   2d640:	f06f 0415 	mvn.w	r4, #21
   2d644:	e7f6      	b.n	2d634 <mqtt_ping+0x44>

0002d646 <mqtt_abort>:
{
   2d646:	b510      	push	{r4, lr}
   2d648:	4604      	mov	r4, r0
	mqtt_mutex_lock(client);
   2d64a:	f7e8 f9c3 	bl	159d4 <mqtt_mutex_lock>
	NULL_PARAM_CHECK(client);
   2d64e:	b15c      	cbz	r4, 2d668 <mqtt_abort+0x22>
	if (client->internal.state != MQTT_STATE_IDLE) {
   2d650:	69a3      	ldr	r3, [r4, #24]
   2d652:	b123      	cbz	r3, 2d65e <mqtt_abort+0x18>
		client_disconnect(client, -ECONNABORTED, true);
   2d654:	f06f 0170 	mvn.w	r1, #112	; 0x70
   2d658:	4620      	mov	r0, r4
   2d65a:	f7ff fea5 	bl	2d3a8 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   2d65e:	4620      	mov	r0, r4
   2d660:	f7e8 f98c 	bl	1597c <mqtt_mutex_unlock>
	return 0;
   2d664:	2000      	movs	r0, #0
}
   2d666:	bd10      	pop	{r4, pc}
	NULL_PARAM_CHECK(client);
   2d668:	f06f 0015 	mvn.w	r0, #21
   2d66c:	e7fb      	b.n	2d666 <mqtt_abort+0x20>

0002d66e <mqtt_live>:
{
   2d66e:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   2d670:	4606      	mov	r6, r0
   2d672:	b300      	cbz	r0, 2d6b6 <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   2d674:	f7e8 f9ae 	bl	159d4 <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   2d678:	6974      	ldr	r4, [r6, #20]
   2d67a:	f7ff fe66 	bl	2d34a <k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   2d67e:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   2d680:	f8b6 405c 	ldrh.w	r4, [r6, #92]	; 0x5c

	if (diff < 0) {
		return 0;
   2d684:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2d688:	b19c      	cbz	r4, 2d6b2 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   2d68a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2d68e:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   2d690:	4284      	cmp	r4, r0
   2d692:	d80d      	bhi.n	2d6b0 <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   2d694:	4630      	mov	r0, r6
   2d696:	f7ff ffab 	bl	2d5f0 <mqtt_ping>
		ping_sent = true;
   2d69a:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   2d69c:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   2d69e:	4630      	mov	r0, r6
   2d6a0:	f7e8 f96c 	bl	1597c <mqtt_mutex_unlock>
		return -EAGAIN;
   2d6a4:	2c00      	cmp	r4, #0
   2d6a6:	bf08      	it	eq
   2d6a8:	f06f 050a 	mvneq.w	r5, #10
}
   2d6ac:	4628      	mov	r0, r5
   2d6ae:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   2d6b0:	2400      	movs	r4, #0
	int err_code = 0;
   2d6b2:	4625      	mov	r5, r4
   2d6b4:	e7f3      	b.n	2d69e <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   2d6b6:	f06f 0515 	mvn.w	r5, #21
   2d6ba:	e7f7      	b.n	2d6ac <mqtt_live+0x3e>

0002d6bc <mqtt_keepalive_time_left>:
{
   2d6bc:	b538      	push	{r3, r4, r5, lr}
   2d6be:	4604      	mov	r4, r0
	uint32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   2d6c0:	6945      	ldr	r5, [r0, #20]
   2d6c2:	f7ff fe42 	bl	2d34a <k_uptime_get>
	uint32_t keepalive_ms = 1000U * client->keepalive;
   2d6c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2d6ca:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
	int32_t diff = k_uptime_get_32() - last_activity;
   2d6ce:	1b42      	subs	r2, r0, r5
   2d6d0:	434b      	muls	r3, r1
		return 0;
   2d6d2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (client->keepalive == 0) {
   2d6d6:	b119      	cbz	r1, 2d6e0 <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   2d6d8:	4293      	cmp	r3, r2
   2d6da:	d904      	bls.n	2d6e6 <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   2d6dc:	1a98      	subs	r0, r3, r2
}
   2d6de:	bd38      	pop	{r3, r4, r5, pc}
		return UINT32_MAX;
   2d6e0:	f04f 30ff 	mov.w	r0, #4294967295
   2d6e4:	e7fb      	b.n	2d6de <mqtt_keepalive_time_left+0x22>
		return 0;
   2d6e6:	2000      	movs	r0, #0
   2d6e8:	e7f9      	b.n	2d6de <mqtt_keepalive_time_left+0x22>

0002d6ea <mqtt_input>:
{
   2d6ea:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2d6ec:	4605      	mov	r5, r0
   2d6ee:	b1d0      	cbz	r0, 2d726 <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   2d6f0:	f7e8 f970 	bl	159d4 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   2d6f4:	69ab      	ldr	r3, [r5, #24]
   2d6f6:	079b      	lsls	r3, r3, #30
   2d6f8:	d50f      	bpl.n	2d71a <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   2d6fa:	6a2b      	ldr	r3, [r5, #32]
   2d6fc:	b983      	cbnz	r3, 2d720 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   2d6fe:	4628      	mov	r0, r5
   2d700:	f7ff fce1 	bl	2d0c6 <mqtt_handle_rx>
	if (err_code < 0) {
   2d704:	1e04      	subs	r4, r0, #0
   2d706:	da03      	bge.n	2d710 <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   2d708:	4621      	mov	r1, r4
   2d70a:	4628      	mov	r0, r5
   2d70c:	f7ff fe4c 	bl	2d3a8 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   2d710:	4628      	mov	r0, r5
   2d712:	f7e8 f933 	bl	1597c <mqtt_mutex_unlock>
}
   2d716:	4620      	mov	r0, r4
   2d718:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   2d71a:	f06f 040c 	mvn.w	r4, #12
   2d71e:	e7f7      	b.n	2d710 <mqtt_input+0x26>
		return -EBUSY;
   2d720:	f06f 040f 	mvn.w	r4, #15
   2d724:	e7f4      	b.n	2d710 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   2d726:	f06f 0415 	mvn.w	r4, #21
   2d72a:	e7f4      	b.n	2d716 <mqtt_input+0x2c>

0002d72c <mqtt_read_publish_payload>:

int mqtt_read_publish_payload(struct mqtt_client *client, void *buffer,
			      size_t length)
{
	return read_publish_payload(client, buffer, length, false);
   2d72c:	2300      	movs	r3, #0
   2d72e:	f7ff be55 	b.w	2d3dc <read_publish_payload>

0002d732 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d732:	6843      	ldr	r3, [r0, #4]
}
   2d734:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d736:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2d738:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2d73a:	600b      	str	r3, [r1, #0]
}
   2d73c:	4770      	bx	lr

0002d73e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d73e:	6843      	ldr	r3, [r0, #4]
   2d740:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2d742:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2d744:	4042      	eors	r2, r0
   2d746:	400a      	ands	r2, r1
   2d748:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2d74a:	605a      	str	r2, [r3, #4]
}
   2d74c:	2000      	movs	r0, #0
   2d74e:	4770      	bx	lr

0002d750 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d750:	6843      	ldr	r3, [r0, #4]
}
   2d752:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d754:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2d756:	6099      	str	r1, [r3, #8]
}
   2d758:	4770      	bx	lr

0002d75a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d75a:	6843      	ldr	r3, [r0, #4]
}
   2d75c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d75e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2d760:	60d9      	str	r1, [r3, #12]
}
   2d762:	4770      	bx	lr

0002d764 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d764:	6843      	ldr	r3, [r0, #4]
}
   2d766:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d768:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2d76a:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   2d76c:	4059      	eors	r1, r3
    p_reg->OUT = value;
   2d76e:	6051      	str	r1, [r2, #4]
}
   2d770:	4770      	bx	lr

0002d772 <nrf_gpio_cfg_sense_set>:
{
   2d772:	b513      	push	{r0, r1, r4, lr}
   2d774:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d776:	a801      	add	r0, sp, #4
{
   2d778:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d77a:	f7e8 f9a3 	bl	15ac4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   2d77e:	9b01      	ldr	r3, [sp, #4]
   2d780:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2d784:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   2d788:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   2d78c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   2d790:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   2d794:	b002      	add	sp, #8
   2d796:	bd10      	pop	{r4, pc}

0002d798 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   2d798:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   2d79a:	6843      	ldr	r3, [r0, #4]
	if (data->int_driven->disable_tx_irq &&
   2d79c:	68d2      	ldr	r2, [r2, #12]
	return config->uarte_regs;
   2d79e:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   2d7a0:	7b91      	ldrb	r1, [r2, #14]
   2d7a2:	b159      	cbz	r1, 2d7bc <uarte_nrfx_isr_int+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d7a4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2d7a8:	b141      	cbz	r1, 2d7bc <uarte_nrfx_isr_int+0x24>
    p_reg->INTENCLR = mask;
   2d7aa:	f44f 7180 	mov.w	r1, #256	; 0x100
   2d7ae:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d7b2:	2101      	movs	r1, #1
   2d7b4:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   2d7b6:	2300      	movs	r3, #0
   2d7b8:	7393      	strb	r3, [r2, #14]
		return;
   2d7ba:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d7bc:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2d7c0:	b121      	cbz	r1, 2d7cc <uarte_nrfx_isr_int+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d7c2:	2100      	movs	r1, #0
   2d7c4:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   2d7c8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   2d7cc:	6813      	ldr	r3, [r2, #0]
   2d7ce:	b10b      	cbz	r3, 2d7d4 <uarte_nrfx_isr_int+0x3c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2d7d0:	6851      	ldr	r1, [r2, #4]
   2d7d2:	4718      	bx	r3
}
   2d7d4:	4770      	bx	lr

0002d7d6 <uarte_nrfx_config_get>:
{
   2d7d6:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2d7d8:	68c2      	ldr	r2, [r0, #12]
   2d7da:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2d7de:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2d7e2:	2000      	movs	r0, #0
   2d7e4:	4770      	bx	lr

0002d7e6 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2d7e6:	6843      	ldr	r3, [r0, #4]
   2d7e8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2d7ea:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2d7ee:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2d7f2:	4770      	bx	lr

0002d7f4 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2d7f4:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2d7f6:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   2d7f8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d7fa:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2d7fe:	b148      	cbz	r0, 2d814 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d800:	2000      	movs	r0, #0
	*c = data->rx_data;
   2d802:	7d12      	ldrb	r2, [r2, #20]
   2d804:	700a      	strb	r2, [r1, #0]
   2d806:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2d80a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d80e:	2201      	movs	r2, #1
   2d810:	601a      	str	r2, [r3, #0]
	return 0;
   2d812:	4770      	bx	lr
		return -1;
   2d814:	f04f 30ff 	mov.w	r0, #4294967295
}
   2d818:	4770      	bx	lr

0002d81a <uarte_nrfx_fifo_fill>:
	return config->uarte_regs;
   2d81a:	6843      	ldr	r3, [r0, #4]
{
   2d81c:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   2d81e:	681c      	ldr	r4, [r3, #0]
{
   2d820:	4605      	mov	r5, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d822:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2d826:	b1a0      	cbz	r0, 2d852 <uarte_nrfx_fifo_fill+0x38>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2d828:	68ed      	ldr	r5, [r5, #12]
	if (len > data->int_driven->tx_buff_size) {
   2d82a:	68eb      	ldr	r3, [r5, #12]
   2d82c:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d82e:	2300      	movs	r3, #0
   2d830:	4290      	cmp	r0, r2
   2d832:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   2d836:	bfa8      	it	ge
   2d838:	4610      	movge	r0, r2
   2d83a:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   2d83e:	68ea      	ldr	r2, [r5, #12]
   2d840:	4283      	cmp	r3, r0
   2d842:	6892      	ldr	r2, [r2, #8]
   2d844:	db06      	blt.n	2d854 <uarte_nrfx_fifo_fill+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d846:	2301      	movs	r3, #1

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2d848:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2d84c:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d850:	60a3      	str	r3, [r4, #8]
}
   2d852:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   2d854:	5cce      	ldrb	r6, [r1, r3]
   2d856:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   2d858:	3301      	adds	r3, #1
   2d85a:	e7f0      	b.n	2d83e <uarte_nrfx_fifo_fill+0x24>

0002d85c <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   2d85c:	6843      	ldr	r3, [r0, #4]
   2d85e:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d860:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2d864:	b153      	cbz	r3, 2d87c <uarte_nrfx_fifo_read+0x20>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2d866:	68c3      	ldr	r3, [r0, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d868:	2000      	movs	r0, #0
   2d86a:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   2d86e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d872:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   2d874:	7d1b      	ldrb	r3, [r3, #20]
   2d876:	700b      	strb	r3, [r1, #0]
   2d878:	6010      	str	r0, [r2, #0]
}
   2d87a:	4770      	bx	lr
	int num_rx = 0;
   2d87c:	4618      	mov	r0, r3
}
   2d87e:	4770      	bx	lr

0002d880 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   2d880:	2100      	movs	r1, #0
   2d882:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   2d884:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
   2d886:	68d2      	ldr	r2, [r2, #12]
	return config->uarte_regs;
   2d888:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   2d88a:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   2d88c:	f44f 7280 	mov.w	r2, #256	; 0x100
   2d890:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2d894:	4770      	bx	lr

0002d896 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2d896:	2201      	movs	r2, #1
   2d898:	68c3      	ldr	r3, [r0, #12]
   2d89a:	68db      	ldr	r3, [r3, #12]
   2d89c:	739a      	strb	r2, [r3, #14]
}
   2d89e:	4770      	bx	lr

0002d8a0 <uarte_nrfx_irq_tx_ready_complete>:
	return !data->int_driven->disable_tx_irq &&
   2d8a0:	68c3      	ldr	r3, [r0, #12]
   2d8a2:	68db      	ldr	r3, [r3, #12]
   2d8a4:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   2d8a6:	b94b      	cbnz	r3, 2d8bc <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   2d8a8:	6843      	ldr	r3, [r0, #4]
   2d8aa:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d8ac:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
   2d8b0:	b128      	cbz	r0, 2d8be <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   2d8b2:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   2d8b6:	f3c0 2000 	ubfx	r0, r0, #8, #1
   2d8ba:	4770      	bx	lr
   2d8bc:	2000      	movs	r0, #0
}
   2d8be:	4770      	bx	lr

0002d8c0 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   2d8c0:	6843      	ldr	r3, [r0, #4]
   2d8c2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d8c4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2d8c8:	3800      	subs	r0, #0
   2d8ca:	bf18      	it	ne
   2d8cc:	2001      	movne	r0, #1
   2d8ce:	4770      	bx	lr

0002d8d0 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   2d8d0:	2210      	movs	r2, #16
	return config->uarte_regs;
   2d8d2:	6843      	ldr	r3, [r0, #4]
   2d8d4:	681b      	ldr	r3, [r3, #0]
   2d8d6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2d8da:	4770      	bx	lr

0002d8dc <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   2d8dc:	2210      	movs	r2, #16
	return config->uarte_regs;
   2d8de:	6843      	ldr	r3, [r0, #4]
   2d8e0:	681b      	ldr	r3, [r3, #0]
   2d8e2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2d8e6:	4770      	bx	lr

0002d8e8 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   2d8e8:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   2d8ec:	6843      	ldr	r3, [r0, #4]
   2d8ee:	681b      	ldr	r3, [r3, #0]
   2d8f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2d8f4:	4770      	bx	lr

0002d8f6 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   2d8f6:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   2d8fa:	6843      	ldr	r3, [r0, #4]
   2d8fc:	681b      	ldr	r3, [r3, #0]
   2d8fe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2d902:	4770      	bx	lr

0002d904 <uarte_nrfx_irq_update>:
}
   2d904:	2001      	movs	r0, #1
   2d906:	4770      	bx	lr

0002d908 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   2d908:	68c3      	ldr	r3, [r0, #12]
   2d90a:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   2d90c:	e9c3 1200 	strd	r1, r2, [r3]
}
   2d910:	4770      	bx	lr

0002d912 <uarte_nrfx_irq_is_pending>:
{
   2d912:	b508      	push	{r3, lr}
	return config->uarte_regs;
   2d914:	6843      	ldr	r3, [r0, #4]
{
   2d916:	4602      	mov	r2, r0
	return config->uarte_regs;
   2d918:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   2d91a:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   2d91e:	05db      	lsls	r3, r3, #23
   2d920:	d405      	bmi.n	2d92e <uarte_nrfx_irq_is_pending+0x1c>
   2d922:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   2d926:	f010 0010 	ands.w	r0, r0, #16
   2d92a:	d106      	bne.n	2d93a <uarte_nrfx_irq_is_pending+0x28>
}
   2d92c:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   2d92e:	f7ff ffb7 	bl	2d8a0 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   2d932:	2800      	cmp	r0, #0
   2d934:	d0f5      	beq.n	2d922 <uarte_nrfx_irq_is_pending+0x10>
		||
   2d936:	2001      	movs	r0, #1
   2d938:	e7f8      	b.n	2d92c <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   2d93a:	4610      	mov	r0, r2
   2d93c:	f7ff ffc0 	bl	2d8c0 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   2d940:	3800      	subs	r0, #0
   2d942:	bf18      	it	ne
   2d944:	2001      	movne	r0, #1
   2d946:	e7f1      	b.n	2d92c <uarte_nrfx_irq_is_pending+0x1a>

0002d948 <uarte_nrfx_poll_out>:
{
   2d948:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   2d94c:	6843      	ldr	r3, [r0, #4]
{
   2d94e:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   2d952:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2d954:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   2d956:	f000 fed2 	bl	2e6fe <k_is_in_isr>
   2d95a:	bb98      	cbnz	r0, 2d9c4 <uarte_nrfx_poll_out+0x7c>
		lock = &data->poll_out_lock;
   2d95c:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2d95e:	f04f 0801 	mov.w	r8, #1
   2d962:	f106 0710 	add.w	r7, r6, #16
   2d966:	e8d7 3fef 	ldaex	r3, [r7]
   2d96a:	2b00      	cmp	r3, #0
   2d96c:	d103      	bne.n	2d976 <uarte_nrfx_poll_out+0x2e>
   2d96e:	e8c7 8fe2 	stlex	r2, r8, [r7]
   2d972:	2a00      	cmp	r2, #0
   2d974:	d1f7      	bne.n	2d966 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   2d976:	d007      	beq.n	2d988 <uarte_nrfx_poll_out+0x40>
	return z_impl_k_sleep(timeout);
   2d978:	2021      	movs	r0, #33	; 0x21
   2d97a:	2100      	movs	r1, #0
   2d97c:	3d01      	subs	r5, #1
   2d97e:	f7f6 fda7 	bl	244d0 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   2d982:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   2d986:	d1ee      	bne.n	2d966 <uarte_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d988:	2300      	movs	r3, #0
   2d98a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   2d98e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2d992:	f10d 0307 	add.w	r3, sp, #7
   2d996:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2d99a:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d99c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   2d9a0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d9a4:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d9a6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   2d9aa:	b923      	cbnz	r3, 2d9b6 <uarte_nrfx_poll_out+0x6e>
   2d9ac:	2001      	movs	r0, #1
   2d9ae:	f000 fde4 	bl	2e57a <nrfx_busy_wait>
   2d9b2:	3d01      	subs	r5, #1
   2d9b4:	d1f7      	bne.n	2d9a6 <uarte_nrfx_poll_out+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d9b6:	2301      	movs	r3, #1
   2d9b8:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   2d9ba:	2300      	movs	r3, #0
   2d9bc:	6133      	str	r3, [r6, #16]
}
   2d9be:	b002      	add	sp, #8
   2d9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   2d9c4:	2301      	movs	r3, #1
   2d9c6:	6133      	str	r3, [r6, #16]
   2d9c8:	e7de      	b.n	2d988 <uarte_nrfx_poll_out+0x40>

0002d9ca <uarte_instance_init.constprop.0>:
static int uarte_instance_init(const struct device *dev,
   2d9ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2d9ce:	f04f 0800 	mov.w	r8, #0
	return config->uarte_regs;
   2d9d2:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2d9d4:	68c7      	ldr	r7, [r0, #12]
	return config->uarte_regs;
   2d9d6:	681c      	ldr	r4, [r3, #0]
   2d9d8:	680b      	ldr	r3, [r1, #0]
   2d9da:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
   2d9de:	4606      	mov	r6, r0
	data->dev = dev;
   2d9e0:	6038      	str	r0, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d9e2:	a801      	add	r0, sp, #4
static int uarte_instance_init(const struct device *dev,
   2d9e4:	460d      	mov	r5, r1
   2d9e6:	9301      	str	r3, [sp, #4]
   2d9e8:	f7e8 fb7a 	bl	160e0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2d9ec:	2301      	movs	r3, #1
   2d9ee:	9a01      	ldr	r2, [sp, #4]
   2d9f0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2d9f2:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   2d9f4:	682b      	ldr	r3, [r5, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d9f6:	a801      	add	r0, sp, #4
   2d9f8:	9301      	str	r3, [sp, #4]
   2d9fa:	f7e8 fb71 	bl	160e0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2d9fe:	2203      	movs	r2, #3
   2da00:	9b01      	ldr	r3, [sp, #4]
   2da02:	3380      	adds	r3, #128	; 0x80
   2da04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   2da08:	686b      	ldr	r3, [r5, #4]
   2da0a:	1c58      	adds	r0, r3, #1
   2da0c:	d007      	beq.n	2da1e <uarte_instance_init.constprop.0+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2da0e:	a801      	add	r0, sp, #4
   2da10:	9301      	str	r3, [sp, #4]
   2da12:	f7e8 fb65 	bl	160e0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2da16:	9b01      	ldr	r3, [sp, #4]
   2da18:	3380      	adds	r3, #128	; 0x80
   2da1a:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   2da1e:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   2da22:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   2da26:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   2da2a:	68ab      	ldr	r3, [r5, #8]
   2da2c:	1c59      	adds	r1, r3, #1
   2da2e:	d008      	beq.n	2da42 <uarte_instance_init.constprop.0+0x78>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2da30:	a801      	add	r0, sp, #4
   2da32:	9301      	str	r3, [sp, #4]
   2da34:	f7e8 fb54 	bl	160e0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2da38:	2200      	movs	r2, #0
   2da3a:	9b01      	ldr	r3, [sp, #4]
   2da3c:	3380      	adds	r3, #128	; 0x80
   2da3e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   2da42:	68eb      	ldr	r3, [r5, #12]
   2da44:	1c5a      	adds	r2, r3, #1
   2da46:	d011      	beq.n	2da6c <uarte_instance_init.constprop.0+0xa2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2da48:	a801      	add	r0, sp, #4
   2da4a:	9301      	str	r3, [sp, #4]
   2da4c:	f7e8 fb48 	bl	160e0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2da50:	2301      	movs	r3, #1
   2da52:	9a01      	ldr	r2, [sp, #4]
   2da54:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2da56:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   2da58:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2da5a:	a801      	add	r0, sp, #4
   2da5c:	9301      	str	r3, [sp, #4]
   2da5e:	f7e8 fb3f 	bl	160e0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2da62:	2203      	movs	r2, #3
   2da64:	9b01      	ldr	r3, [sp, #4]
   2da66:	3380      	adds	r3, #128	; 0x80
   2da68:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   2da6c:	68f1      	ldr	r1, [r6, #12]
	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   2da6e:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   2da72:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
   2da74:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   2da78:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   2da7a:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   2da7e:	f7e8 fa79 	bl	15f74 <uarte_nrfx_configure>
	if (err) {
   2da82:	b9d8      	cbnz	r0, 2dabc <uarte_instance_init.constprop.0+0xf2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2da84:	2308      	movs	r3, #8
   2da86:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   2da8a:	686b      	ldr	r3, [r5, #4]
   2da8c:	3301      	adds	r3, #1
   2da8e:	d00b      	beq.n	2daa8 <uarte_instance_init.constprop.0+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2da90:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   2da94:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   2da98:	f107 0314 	add.w	r3, r7, #20

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2da9c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2daa0:	2301      	movs	r3, #1
   2daa2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2daa6:	6023      	str	r3, [r4, #0]
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   2daa8:	68fb      	ldr	r3, [r7, #12]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2daaa:	689b      	ldr	r3, [r3, #8]
   2daac:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2dab0:	2300      	movs	r3, #0
   2dab2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dab6:	2301      	movs	r3, #1
   2dab8:	60a3      	str	r3, [r4, #8]
   2daba:	60e3      	str	r3, [r4, #12]
}
   2dabc:	b002      	add	sp, #8
   2dabe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002dac2 <entropy_cc3xx_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   2dac2:	2000      	movs	r0, #0
   2dac4:	4770      	bx	lr

0002dac6 <update_offset>:
{
   2dac6:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   2dac8:	4604      	mov	r4, r0
   2daca:	b140      	cbz	r0, 2dade <update_offset+0x18>
   2dacc:	6803      	ldr	r3, [r0, #0]
   2dace:	b133      	cbz	r3, 2dade <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   2dad0:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   2dad2:	4418      	add	r0, r3
   2dad4:	f7f8 fee2 	bl	2689c <strlen>
   2dad8:	68a3      	ldr	r3, [r4, #8]
   2dada:	4418      	add	r0, r3
   2dadc:	60a0      	str	r0, [r4, #8]
}
   2dade:	bd10      	pop	{r4, pc}

0002dae0 <add_item_to_array>:
    if ((item == NULL) || (array == NULL))
   2dae0:	b161      	cbz	r1, 2dafc <add_item_to_array+0x1c>
   2dae2:	b160      	cbz	r0, 2dafe <add_item_to_array+0x1e>
    child = array->child;
   2dae4:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   2dae6:	b913      	cbnz	r3, 2daee <add_item_to_array+0xe>
        array->child = item;
   2dae8:	6081      	str	r1, [r0, #8]
}
   2daea:	2001      	movs	r0, #1
   2daec:	4770      	bx	lr
        while (child->next)
   2daee:	461a      	mov	r2, r3
   2daf0:	681b      	ldr	r3, [r3, #0]
   2daf2:	2b00      	cmp	r3, #0
   2daf4:	d1fb      	bne.n	2daee <add_item_to_array+0xe>
    prev->next = item;
   2daf6:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   2daf8:	604a      	str	r2, [r1, #4]
   2dafa:	e7f6      	b.n	2daea <add_item_to_array+0xa>
        return false;
   2dafc:	4608      	mov	r0, r1
}
   2dafe:	4770      	bx	lr

0002db00 <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   2db00:	4603      	mov	r3, r0
   2db02:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   2db04:	2028      	movs	r0, #40	; 0x28
   2db06:	4798      	blx	r3
    if (node)
   2db08:	4604      	mov	r4, r0
   2db0a:	b118      	cbz	r0, 2db14 <cJSON_New_Item.isra.0+0x14>
   2db0c:	2228      	movs	r2, #40	; 0x28
   2db0e:	2100      	movs	r1, #0
   2db10:	f7f8 fab4 	bl	2607c <memset>
}
   2db14:	4620      	mov	r0, r4
   2db16:	bd10      	pop	{r4, pc}

0002db18 <ensure>:
{
   2db18:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   2db1a:	4604      	mov	r4, r0
   2db1c:	b1b8      	cbz	r0, 2db4e <ensure+0x36>
   2db1e:	6805      	ldr	r5, [r0, #0]
   2db20:	b165      	cbz	r5, 2db3c <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   2db22:	6842      	ldr	r2, [r0, #4]
   2db24:	b112      	cbz	r2, 2db2c <ensure+0x14>
   2db26:	6883      	ldr	r3, [r0, #8]
   2db28:	429a      	cmp	r2, r3
   2db2a:	d910      	bls.n	2db4e <ensure+0x36>
    if (needed > INT_MAX)
   2db2c:	2900      	cmp	r1, #0
   2db2e:	db0e      	blt.n	2db4e <ensure+0x36>
    needed += p->offset + 1;
   2db30:	68a0      	ldr	r0, [r4, #8]
   2db32:	4401      	add	r1, r0
   2db34:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   2db36:	429a      	cmp	r2, r3
   2db38:	d302      	bcc.n	2db40 <ensure+0x28>
        return p->buffer + p->offset;
   2db3a:	4405      	add	r5, r0
}
   2db3c:	4628      	mov	r0, r5
   2db3e:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   2db40:	6922      	ldr	r2, [r4, #16]
   2db42:	b922      	cbnz	r2, 2db4e <ensure+0x36>
    if (needed > (INT_MAX / 2))
   2db44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   2db48:	d303      	bcc.n	2db52 <ensure+0x3a>
        if (needed <= INT_MAX)
   2db4a:	2b00      	cmp	r3, #0
   2db4c:	da0f      	bge.n	2db6e <ensure+0x56>
        return NULL;
   2db4e:	2500      	movs	r5, #0
   2db50:	e7f4      	b.n	2db3c <ensure+0x24>
        newsize = needed + 1;
   2db52:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   2db54:	6a23      	ldr	r3, [r4, #32]
   2db56:	b16b      	cbz	r3, 2db74 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   2db58:	4628      	mov	r0, r5
   2db5a:	4631      	mov	r1, r6
   2db5c:	4798      	blx	r3
        if (newbuffer == NULL)
   2db5e:	4605      	mov	r5, r0
   2db60:	b9b0      	cbnz	r0, 2db90 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   2db62:	69e3      	ldr	r3, [r4, #28]
   2db64:	6820      	ldr	r0, [r4, #0]
   2db66:	4798      	blx	r3
            p->buffer = NULL;
   2db68:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   2db6c:	e7e6      	b.n	2db3c <ensure+0x24>
            newsize = INT_MAX;
   2db6e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   2db72:	e7ef      	b.n	2db54 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   2db74:	4630      	mov	r0, r6
   2db76:	69a3      	ldr	r3, [r4, #24]
   2db78:	4798      	blx	r3
        if (!newbuffer)
   2db7a:	4605      	mov	r5, r0
   2db7c:	2800      	cmp	r0, #0
   2db7e:	d0f0      	beq.n	2db62 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   2db80:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2db82:	6821      	ldr	r1, [r4, #0]
   2db84:	3201      	adds	r2, #1
   2db86:	f7de ffe1 	bl	cb4c <memcpy>
        p->hooks.deallocate(p->buffer);
   2db8a:	69e3      	ldr	r3, [r4, #28]
   2db8c:	6820      	ldr	r0, [r4, #0]
   2db8e:	4798      	blx	r3
    return newbuffer + p->offset;
   2db90:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   2db92:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   2db96:	441d      	add	r5, r3
   2db98:	e7d0      	b.n	2db3c <ensure+0x24>

0002db9a <cJSON_Print>:
    return (char*)print(item, true, &global_hooks);
   2db9a:	2101      	movs	r1, #1
   2db9c:	f7e8 bdee 	b.w	1677c <print.constprop.0>

0002dba0 <cJSON_AddStringToObject>:
{
   2dba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2dba2:	4605      	mov	r5, r0
    cJSON *string_item = cJSON_CreateString(string);
   2dba4:	4610      	mov	r0, r2
{
   2dba6:	9101      	str	r1, [sp, #4]
    cJSON *string_item = cJSON_CreateString(string);
   2dba8:	f7e8 fe58 	bl	1685c <cJSON_CreateString>
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   2dbac:	2300      	movs	r3, #0
   2dbae:	4602      	mov	r2, r0
    cJSON *string_item = cJSON_CreateString(string);
   2dbb0:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   2dbb2:	9901      	ldr	r1, [sp, #4]
   2dbb4:	4628      	mov	r0, r5
   2dbb6:	f7e8 fdb9 	bl	1672c <add_item_to_object.constprop.0>
   2dbba:	4605      	mov	r5, r0
   2dbbc:	b918      	cbnz	r0, 2dbc6 <cJSON_AddStringToObject+0x26>
    cJSON_Delete(string_item);
   2dbbe:	4620      	mov	r0, r4
   2dbc0:	f7e8 fe28 	bl	16814 <cJSON_Delete>
    return NULL;
   2dbc4:	462c      	mov	r4, r5
}
   2dbc6:	4620      	mov	r0, r4
   2dbc8:	b003      	add	sp, #12
   2dbca:	bd30      	pop	{r4, r5, pc}

0002dbcc <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   2dbcc:	4668      	mov	r0, sp
   2dbce:	f020 0107 	bic.w	r1, r0, #7
   2dbd2:	468d      	mov	sp, r1
   2dbd4:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   2dbd6:	f7ec fa0d 	bl	19ff4 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2dbda:	f7e6 fdab 	bl	14734 <_arch_isr_direct_pm>
   2dbde:	f7e7 f951 	bl	14e84 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   2dbe2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2dbe6:	4685      	mov	sp, r0
   2dbe8:	4770      	bx	lr

0002dbea <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   2dbea:	4668      	mov	r0, sp
   2dbec:	f020 0107 	bic.w	r1, r0, #7
   2dbf0:	468d      	mov	sp, r1
   2dbf2:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   2dbf4:	f7ec fda4 	bl	1a740 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2dbf8:	f7e6 fd9c 	bl	14734 <_arch_isr_direct_pm>
   2dbfc:	f7e7 f942 	bl	14e84 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   2dc00:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2dc04:	4685      	mov	sp, r0
   2dc06:	4770      	bx	lr

0002dc08 <trace_task_create>:
{
   2dc08:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   2dc0a:	201d      	movs	r0, #29
   2dc0c:	2200      	movs	r2, #0
   2dc0e:	2106      	movs	r1, #6
   2dc10:	f7e6 fd5e 	bl	146d0 <z_arm_irq_priority_set>
}
   2dc14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   2dc18:	201d      	movs	r0, #29
   2dc1a:	f7e6 bd3b 	b.w	14694 <arch_irq_enable>

0002dc1e <read_task_create>:
{
   2dc1e:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   2dc20:	201c      	movs	r0, #28
   2dc22:	2200      	movs	r2, #0
   2dc24:	2106      	movs	r1, #6
   2dc26:	f7e6 fd53 	bl	146d0 <z_arm_irq_priority_set>
}
   2dc2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   2dc2e:	201c      	movs	r0, #28
   2dc30:	f7e6 bd30 	b.w	14694 <arch_irq_enable>

0002dc34 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   2dc34:	2000      	movs	r0, #0
   2dc36:	4770      	bx	lr

0002dc38 <z_to_nrf_flags>:
{
   2dc38:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   2dc3a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   2dc3e:	bf18      	it	ne
   2dc40:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   2dc42:	079a      	lsls	r2, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   2dc44:	bf48      	it	mi
   2dc46:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   2dc4a:	06db      	lsls	r3, r3, #27
		nrf_flags |= NRF_MSG_TRUNC;
   2dc4c:	bf48      	it	mi
   2dc4e:	f040 0020 	orrmi.w	r0, r0, #32
}
   2dc52:	4770      	bx	lr

0002dc54 <z_to_nrf_family>:
	switch (z_family) {
   2dc54:	2806      	cmp	r0, #6
   2dc56:	d80a      	bhi.n	2dc6e <z_to_nrf_family+0x1a>
   2dc58:	b198      	cbz	r0, 2dc82 <z_to_nrf_family+0x2e>
   2dc5a:	3801      	subs	r0, #1
   2dc5c:	2805      	cmp	r0, #5
   2dc5e:	d810      	bhi.n	2dc82 <z_to_nrf_family+0x2e>
   2dc60:	e8df f000 	tbb	[pc, r0]
   2dc64:	0f0d0312 	.word	0x0f0d0312
   2dc68:	0b0f      	.short	0x0b0f
   2dc6a:	200a      	movs	r0, #10
   2dc6c:	4770      	bx	lr
   2dc6e:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   2dc70:	bf14      	ite	ne
   2dc72:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   2dc76:	2066      	moveq	r0, #102	; 0x66
   2dc78:	4770      	bx	lr
		return NRF_AF_LOCAL;
   2dc7a:	2001      	movs	r0, #1
   2dc7c:	4770      	bx	lr
		return NRF_AF_PACKET;
   2dc7e:	2005      	movs	r0, #5
   2dc80:	4770      	bx	lr
		return -EAFNOSUPPORT;
   2dc82:	f06f 0069 	mvn.w	r0, #105	; 0x69
   2dc86:	4770      	bx	lr
		return NRF_AF_INET;
   2dc88:	2002      	movs	r0, #2
}
   2dc8a:	4770      	bx	lr

0002dc8c <z_to_nrf_protocol>:
	switch (proto) {
   2dc8c:	f240 1311 	movw	r3, #273	; 0x111
   2dc90:	4298      	cmp	r0, r3
   2dc92:	d023      	beq.n	2dcdc <z_to_nrf_protocol+0x50>
   2dc94:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   2dc98:	da11      	bge.n	2dcbe <z_to_nrf_protocol+0x32>
   2dc9a:	2811      	cmp	r0, #17
   2dc9c:	d021      	beq.n	2dce2 <z_to_nrf_protocol+0x56>
   2dc9e:	dc06      	bgt.n	2dcae <z_to_nrf_protocol+0x22>
   2dca0:	b300      	cbz	r0, 2dce4 <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   2dca2:	2806      	cmp	r0, #6
   2dca4:	bf14      	ite	ne
   2dca6:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2dcaa:	2001      	moveq	r0, #1
   2dcac:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   2dcae:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2dcb2:	bf14      	ite	ne
   2dcb4:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2dcb8:	f44f 7082 	moveq.w	r0, #260	; 0x104
   2dcbc:	4770      	bx	lr
	switch (proto) {
   2dcbe:	f240 2302 	movw	r3, #514	; 0x202
   2dcc2:	4298      	cmp	r0, r3
   2dcc4:	d00e      	beq.n	2dce4 <z_to_nrf_protocol+0x58>
   2dcc6:	f240 2303 	movw	r3, #515	; 0x203
   2dcca:	4298      	cmp	r0, r3
   2dccc:	d00a      	beq.n	2dce4 <z_to_nrf_protocol+0x58>
   2dcce:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   2dcd2:	4298      	cmp	r0, r3
   2dcd4:	bf18      	it	ne
   2dcd6:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2dcda:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   2dcdc:	f44f 7087 	mov.w	r0, #270	; 0x10e
   2dce0:	4770      	bx	lr
	switch (proto) {
   2dce2:	2002      	movs	r0, #2
}
   2dce4:	4770      	bx	lr

0002dce6 <nrf91_socket_is_supported>:
}
   2dce6:	2001      	movs	r0, #1
   2dce8:	4770      	bx	lr

0002dcea <nrf91_bsdlib_socket_offload_init>:
}
   2dcea:	2000      	movs	r0, #0
   2dcec:	4770      	bx	lr

0002dcee <nrf91_socket_offload_getsockopt>:
{
   2dcee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dcf2:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   2dcf4:	2300      	movs	r3, #0
{
   2dcf6:	b086      	sub	sp, #24
   2dcf8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   2dcfc:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2dd00:	f8d8 3000 	ldr.w	r3, [r8]
{
   2dd04:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2dd06:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   2dd08:	f240 2302 	movw	r3, #514	; 0x202
   2dd0c:	4299      	cmp	r1, r3
{
   2dd0e:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   2dd10:	f100 37ff 	add.w	r7, r0, #4294967295
	switch (z_in_level) {
   2dd14:	d005      	beq.n	2dd22 <nrf91_socket_offload_getsockopt+0x34>
   2dd16:	dc30      	bgt.n	2dd7a <nrf91_socket_offload_getsockopt+0x8c>
   2dd18:	2901      	cmp	r1, #1
   2dd1a:	d002      	beq.n	2dd22 <nrf91_socket_offload_getsockopt+0x34>
   2dd1c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2dd20:	d13c      	bne.n	2dd9c <nrf91_socket_offload_getsockopt+0xae>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   2dd22:	4631      	mov	r1, r6
   2dd24:	4620      	mov	r0, r4
   2dd26:	aa02      	add	r2, sp, #8
   2dd28:	f7e9 f90c 	bl	16f44 <z_to_nrf_optname>
   2dd2c:	2800      	cmp	r0, #0
   2dd2e:	db35      	blt.n	2dd9c <nrf91_socket_offload_getsockopt+0xae>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   2dd30:	2c01      	cmp	r4, #1
   2dd32:	d126      	bne.n	2dd82 <nrf91_socket_offload_getsockopt+0x94>
   2dd34:	f1a6 0314 	sub.w	r3, r6, #20
   2dd38:	2b01      	cmp	r3, #1
   2dd3a:	d822      	bhi.n	2dd82 <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   2dd3c:	2308      	movs	r3, #8
   2dd3e:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   2dd40:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2dd42:	aa03      	add	r2, sp, #12
   2dd44:	4638      	mov	r0, r7
   2dd46:	9200      	str	r2, [sp, #0]
   2dd48:	4621      	mov	r1, r4
   2dd4a:	9a02      	ldr	r2, [sp, #8]
   2dd4c:	f7f2 faf4 	bl	20338 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   2dd50:	4607      	mov	r7, r0
   2dd52:	b970      	cbnz	r0, 2dd72 <nrf91_socket_offload_getsockopt+0x84>
   2dd54:	b16d      	cbz	r5, 2dd72 <nrf91_socket_offload_getsockopt+0x84>
		*optlen = nrf_optlen;
   2dd56:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   2dd58:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   2dd5a:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   2dd5e:	d108      	bne.n	2dd72 <nrf91_socket_offload_getsockopt+0x84>
			if (optname == SO_ERROR) {
   2dd60:	2e04      	cmp	r6, #4
   2dd62:	d110      	bne.n	2dd86 <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   2dd64:	6828      	ldr	r0, [r5, #0]
   2dd66:	f7e8 ff2b 	bl	16bc0 <bsd_os_errno_set>
				*(int *)optval = errno;
   2dd6a:	f7fe fff2 	bl	2cd52 <__errno>
   2dd6e:	6803      	ldr	r3, [r0, #0]
   2dd70:	602b      	str	r3, [r5, #0]
}
   2dd72:	4638      	mov	r0, r7
   2dd74:	b006      	add	sp, #24
   2dd76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   2dd7a:	f240 2303 	movw	r3, #515	; 0x203
   2dd7e:	4299      	cmp	r1, r3
   2dd80:	e7ce      	b.n	2dd20 <nrf91_socket_offload_getsockopt+0x32>
   2dd82:	462b      	mov	r3, r5
   2dd84:	e7dd      	b.n	2dd42 <nrf91_socket_offload_getsockopt+0x54>
			} else if ((optname == SO_RCVTIMEO) ||
   2dd86:	3e14      	subs	r6, #20
   2dd88:	2e01      	cmp	r6, #1
   2dd8a:	d8f2      	bhi.n	2dd72 <nrf91_socket_offload_getsockopt+0x84>
				((struct timeval *)optval)->tv_sec =
   2dd8c:	9b04      	ldr	r3, [sp, #16]
   2dd8e:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   2dd90:	9b05      	ldr	r3, [sp, #20]
   2dd92:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   2dd94:	2308      	movs	r3, #8
   2dd96:	f8c8 3000 	str.w	r3, [r8]
   2dd9a:	e7ea      	b.n	2dd72 <nrf91_socket_offload_getsockopt+0x84>
	errno = ENOPROTOOPT;
   2dd9c:	f7fe ffd9 	bl	2cd52 <__errno>
   2dda0:	236d      	movs	r3, #109	; 0x6d
	return retval;
   2dda2:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   2dda6:	6003      	str	r3, [r0, #0]
	return retval;
   2dda8:	e7e3      	b.n	2dd72 <nrf91_socket_offload_getsockopt+0x84>

0002ddaa <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   2ddaa:	3801      	subs	r0, #1
   2ddac:	f7f2 ba70 	b.w	20290 <nrf_listen>

0002ddb0 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   2ddb0:	3801      	subs	r0, #1
   2ddb2:	f7f2 ba15 	b.w	201e0 <nrf_close>

0002ddb6 <nrf91_socket_offload_freeaddrinfo>:
{
   2ddb6:	b538      	push	{r3, r4, r5, lr}
   2ddb8:	4604      	mov	r4, r0
	while (next != NULL) {
   2ddba:	b904      	cbnz	r4, 2ddbe <nrf91_socket_offload_freeaddrinfo+0x8>
}
   2ddbc:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   2ddbe:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   2ddc0:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   2ddc2:	f000 fddc 	bl	2e97e <k_free>
		k_free(this);
   2ddc6:	4620      	mov	r0, r4
   2ddc8:	f000 fdd9 	bl	2e97e <k_free>
		next = next->ai_next;
   2ddcc:	462c      	mov	r4, r5
   2ddce:	e7f4      	b.n	2ddba <nrf91_socket_offload_freeaddrinfo+0x4>

0002ddd0 <z_to_nrf_addrinfo_hints>:
{
   2ddd0:	b538      	push	{r3, r4, r5, lr}
   2ddd2:	460c      	mov	r4, r1
   2ddd4:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   2ddd6:	221c      	movs	r2, #28
   2ddd8:	2100      	movs	r1, #0
   2ddda:	1d20      	adds	r0, r4, #4
   2dddc:	f7f8 f94e 	bl	2607c <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   2dde0:	2300      	movs	r3, #0
   2dde2:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   2dde4:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   2dde6:	2b03      	cmp	r3, #3
   2dde8:	d003      	beq.n	2ddf2 <z_to_nrf_addrinfo_hints+0x22>
   2ddea:	2b04      	cmp	r3, #4
   2ddec:	bf08      	it	eq
   2ddee:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   2ddf2:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   2ddf4:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   2ddf6:	f7ff ff2d 	bl	2dc54 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   2ddfa:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   2ddfe:	d00b      	beq.n	2de18 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   2de00:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   2de02:	6928      	ldr	r0, [r5, #16]
   2de04:	f7ff ff42 	bl	2dc8c <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2de08:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   2de0c:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2de0e:	d003      	beq.n	2de18 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   2de10:	69e8      	ldr	r0, [r5, #28]
   2de12:	b108      	cbz	r0, 2de18 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   2de14:	61a0      	str	r0, [r4, #24]
	return 0;
   2de16:	2000      	movs	r0, #0
}
   2de18:	bd38      	pop	{r3, r4, r5, pc}

0002de1a <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   2de1a:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   2de1c:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   2de1e:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   2de20:	4603      	mov	r3, r0
{
   2de22:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   2de24:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2de28:	f101 0420 	add.w	r4, r1, #32
   2de2c:	f101 0210 	add.w	r2, r1, #16
   2de30:	f852 5b04 	ldr.w	r5, [r2], #4
   2de34:	42a2      	cmp	r2, r4
   2de36:	f843 5b04 	str.w	r5, [r3], #4
   2de3a:	d1f9      	bne.n	2de30 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   2de3c:	6a0b      	ldr	r3, [r1, #32]
   2de3e:	7503      	strb	r3, [r0, #20]
}
   2de40:	bd30      	pop	{r4, r5, pc}

0002de42 <nrf91_socket_offload_recvfrom>:
{
   2de42:	b5f0      	push	{r4, r5, r6, r7, lr}
	int sd = OBJ_TO_SD(obj);
   2de44:	1e45      	subs	r5, r0, #1
{
   2de46:	b08f      	sub	sp, #60	; 0x3c
   2de48:	4618      	mov	r0, r3
   2de4a:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   2de4e:	9203      	str	r2, [sp, #12]
   2de50:	f7ff fef2 	bl	2dc38 <z_to_nrf_flags>
	if (from == NULL) {
   2de54:	9a03      	ldr	r2, [sp, #12]
   2de56:	4603      	mov	r3, r0
   2de58:	b944      	cbnz	r4, 2de6c <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2de5a:	4628      	mov	r0, r5
   2de5c:	e9cd 4400 	strd	r4, r4, [sp]
   2de60:	f7f2 f9e8 	bl	20234 <nrf_recvfrom>
   2de64:	4605      	mov	r5, r0
}
   2de66:	4628      	mov	r0, r5
   2de68:	b00f      	add	sp, #60	; 0x3c
   2de6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   2de6c:	2024      	movs	r0, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2de6e:	af05      	add	r7, sp, #20
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   2de70:	9004      	str	r0, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2de72:	a804      	add	r0, sp, #16
   2de74:	9001      	str	r0, [sp, #4]
   2de76:	9700      	str	r7, [sp, #0]
   2de78:	4628      	mov	r0, r5
   2de7a:	f7f2 f9db 	bl	20234 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   2de7e:	9b06      	ldr	r3, [sp, #24]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2de80:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   2de82:	2b02      	cmp	r3, #2
   2de84:	d109      	bne.n	2de9a <nrf91_socket_offload_recvfrom+0x58>
	ptr->sin_port = nrf_in->sin_port;
   2de86:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2de8a:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   2de8c:	2301      	movs	r3, #1
   2de8e:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2de90:	9b08      	ldr	r3, [sp, #32]
   2de92:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   2de94:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   2de96:	6033      	str	r3, [r6, #0]
	return retval;
   2de98:	e7e5      	b.n	2de66 <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   2de9a:	2b0a      	cmp	r3, #10
   2de9c:	d1e3      	bne.n	2de66 <nrf91_socket_offload_recvfrom+0x24>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   2de9e:	4639      	mov	r1, r7
   2dea0:	4620      	mov	r0, r4
   2dea2:	f7ff ffba 	bl	2de1a <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   2dea6:	2318      	movs	r3, #24
   2dea8:	e7f5      	b.n	2de96 <nrf91_socket_offload_recvfrom+0x54>

0002deaa <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   2deaa:	2300      	movs	r3, #0
{
   2deac:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   2deae:	e9cd 3300 	strd	r3, r3, [sp]
   2deb2:	f7ff ffc6 	bl	2de42 <nrf91_socket_offload_recvfrom>
}
   2deb6:	b003      	add	sp, #12
   2deb8:	f85d fb04 	ldr.w	pc, [sp], #4

0002debc <nrf91_socket_offload_getaddrinfo>:
{
   2debc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2dec0:	4614      	mov	r4, r2
   2dec2:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   2dec4:	2100      	movs	r1, #0
{
   2dec6:	b093      	sub	sp, #76	; 0x4c
   2dec8:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   2deca:	2220      	movs	r2, #32
   2decc:	a802      	add	r0, sp, #8
{
   2dece:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   2ded0:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   2ded2:	f7f8 f8d3 	bl	2607c <memset>
	if (hints != NULL) {
   2ded6:	b194      	cbz	r4, 2defe <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   2ded8:	4620      	mov	r0, r4
   2deda:	a902      	add	r1, sp, #8
   2dedc:	f7ff ff78 	bl	2ddd0 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   2dee0:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   2dee4:	f000 80d0 	beq.w	2e088 <nrf91_socket_offload_getaddrinfo+0x1cc>
		} else if (error == -EAFNOSUPPORT) {
   2dee8:	306a      	adds	r0, #106	; 0x6a
   2deea:	f000 80d0 	beq.w	2e08e <nrf91_socket_offload_getaddrinfo+0x1d2>
		if (hints->ai_next != NULL) {
   2deee:	6820      	ldr	r0, [r4, #0]
   2def0:	b120      	cbz	r0, 2defc <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   2def2:	ac0a      	add	r4, sp, #40	; 0x28
   2def4:	4621      	mov	r1, r4
   2def6:	f7ff ff6b 	bl	2ddd0 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   2defa:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   2defc:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   2defe:	4628      	mov	r0, r5
   2df00:	4622      	mov	r2, r4
   2df02:	4631      	mov	r1, r6
   2df04:	ab01      	add	r3, sp, #4
   2df06:	f7f2 fa33 	bl	20370 <nrf_getaddrinfo>
	if (retval != 0) {
   2df0a:	4605      	mov	r5, r0
   2df0c:	b300      	cbz	r0, 2df50 <nrf91_socket_offload_getaddrinfo+0x94>
	switch (nrf_error) {
   2df0e:	282f      	cmp	r0, #47	; 0x2f
   2df10:	f000 80c0 	beq.w	2e094 <nrf91_socket_offload_getaddrinfo+0x1d8>
   2df14:	dc0c      	bgt.n	2df30 <nrf91_socket_offload_getaddrinfo+0x74>
   2df16:	280c      	cmp	r0, #12
   2df18:	f000 80bf 	beq.w	2e09a <nrf91_socket_offload_getaddrinfo+0x1de>
		return DNS_EAI_AGAIN;
   2df1c:	2823      	cmp	r0, #35	; 0x23
   2df1e:	bf14      	ite	ne
   2df20:	f06f 050a 	mvnne.w	r5, #10
   2df24:	f06f 0502 	mvneq.w	r5, #2
}
   2df28:	4628      	mov	r0, r5
   2df2a:	b013      	add	sp, #76	; 0x4c
   2df2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   2df30:	2833      	cmp	r0, #51	; 0x33
   2df32:	d006      	beq.n	2df42 <nrf91_socket_offload_getaddrinfo+0x86>
		return DNS_EAI_INPROGRESS;
   2df34:	2873      	cmp	r0, #115	; 0x73
   2df36:	bf14      	ite	ne
   2df38:	f06f 050a 	mvnne.w	r5, #10
   2df3c:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   2df40:	e7f2      	b.n	2df28 <nrf91_socket_offload_getaddrinfo+0x6c>
		errno = ENETUNREACH;
   2df42:	f7fe ff06 	bl	2cd52 <__errno>
   2df46:	2372      	movs	r3, #114	; 0x72
		return DNS_EAI_SYSTEM;
   2df48:	f06f 050a 	mvn.w	r5, #10
		errno = ENETUNREACH;
   2df4c:	6003      	str	r3, [r0, #0]
   2df4e:	e7eb      	b.n	2df28 <nrf91_socket_offload_getaddrinfo+0x6c>
	struct zsock_addrinfo *latest_z_res = NULL;
   2df50:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   2df52:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   2df54:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   2df56:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   2df58:	b91e      	cbnz	r6, 2df62 <nrf91_socket_offload_getaddrinfo+0xa6>
	nrf_freeaddrinfo(nrf_res);
   2df5a:	9801      	ldr	r0, [sp, #4]
   2df5c:	f7f2 fa0a 	bl	20374 <nrf_freeaddrinfo>
	return retval;
   2df60:	e7e2      	b.n	2df28 <nrf91_socket_offload_getaddrinfo+0x6c>
					k_malloc(sizeof(struct zsock_addrinfo));
   2df62:	2050      	movs	r0, #80	; 0x50
   2df64:	f7f7 fcea 	bl	2593c <k_malloc>
		if (next_z_res == NULL) {
   2df68:	4604      	mov	r4, r0
   2df6a:	2800      	cmp	r0, #0
   2df6c:	f000 8081 	beq.w	2e072 <nrf91_socket_offload_getaddrinfo+0x1b6>
	family = nrf_to_z_family(nrf_in->ai_family);
   2df70:	6871      	ldr	r1, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2df72:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   2df74:	290a      	cmp	r1, #10
	z_out->ai_next = NULL;
   2df76:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   2df7a:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   2df7e:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2df82:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   2df84:	dc23      	bgt.n	2dfce <nrf91_socket_offload_getaddrinfo+0x112>
   2df86:	2900      	cmp	r1, #0
   2df88:	dd23      	ble.n	2dfd2 <nrf91_socket_offload_getaddrinfo+0x116>
   2df8a:	1e4b      	subs	r3, r1, #1
   2df8c:	2b09      	cmp	r3, #9
   2df8e:	d820      	bhi.n	2dfd2 <nrf91_socket_offload_getaddrinfo+0x116>
   2df90:	e8df f003 	tbb	[pc, r3]
   2df94:	1f1f2905 	.word	0x1f1f2905
   2df98:	1f1f1f25 	.word	0x1f1f1f25
   2df9c:	271f      	.short	0x271f
		return AF_LOCAL;
   2df9e:	2306      	movs	r3, #6
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2dfa0:	68f2      	ldr	r2, [r6, #12]
	z_out->ai_family = family;
   2dfa2:	60a3      	str	r3, [r4, #8]
	switch (proto) {
   2dfa4:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   2dfa8:	d04b      	beq.n	2e042 <nrf91_socket_offload_getaddrinfo+0x186>
   2dfaa:	dc26      	bgt.n	2dffa <nrf91_socket_offload_getaddrinfo+0x13e>
   2dfac:	2a02      	cmp	r2, #2
   2dfae:	d04c      	beq.n	2e04a <nrf91_socket_offload_getaddrinfo+0x18e>
   2dfb0:	dc1d      	bgt.n	2dfee <nrf91_socket_offload_getaddrinfo+0x132>
   2dfb2:	b372      	cbz	r2, 2e012 <nrf91_socket_offload_getaddrinfo+0x156>
   2dfb4:	2a01      	cmp	r2, #1
   2dfb6:	d04a      	beq.n	2e04e <nrf91_socket_offload_getaddrinfo+0x192>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2dfb8:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   2dfbc:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   2dfbe:	2300      	movs	r3, #0
   2dfc0:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   2dfc2:	4620      	mov	r0, r4
   2dfc4:	f000 fcdb 	bl	2e97e <k_free>
			retval = DNS_EAI_SOCKTYPE;
   2dfc8:	f06f 0506 	mvn.w	r5, #6
   2dfcc:	e053      	b.n	2e076 <nrf91_socket_offload_getaddrinfo+0x1ba>
	switch (nrf_family) {
   2dfce:	2966      	cmp	r1, #102	; 0x66
   2dfd0:	d00b      	beq.n	2dfea <nrf91_socket_offload_getaddrinfo+0x12e>
			k_free(next_z_res);
   2dfd2:	4620      	mov	r0, r4
   2dfd4:	f000 fcd3 	bl	2e97e <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   2dfd8:	f06f 0508 	mvn.w	r5, #8
   2dfdc:	e04b      	b.n	2e076 <nrf91_socket_offload_getaddrinfo+0x1ba>
		return AF_PACKET;
   2dfde:	2303      	movs	r3, #3
   2dfe0:	e7de      	b.n	2dfa0 <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_INET6;
   2dfe2:	2302      	movs	r3, #2
   2dfe4:	e7dc      	b.n	2dfa0 <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (nrf_family) {
   2dfe6:	2301      	movs	r3, #1
   2dfe8:	e7da      	b.n	2dfa0 <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_LTE;
   2dfea:	460b      	mov	r3, r1
   2dfec:	e7d8      	b.n	2dfa0 <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (proto) {
   2dfee:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   2dff2:	d1e1      	bne.n	2dfb8 <nrf91_socket_offload_getaddrinfo+0xfc>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2dff4:	f44f 7381 	mov.w	r3, #258	; 0x102
   2dff8:	e025      	b.n	2e046 <nrf91_socket_offload_getaddrinfo+0x18a>
	switch (proto) {
   2dffa:	f240 2302 	movw	r3, #514	; 0x202
   2dffe:	429a      	cmp	r2, r3
   2e000:	d007      	beq.n	2e012 <nrf91_socket_offload_getaddrinfo+0x156>
   2e002:	f240 2303 	movw	r3, #515	; 0x203
   2e006:	429a      	cmp	r2, r3
   2e008:	d003      	beq.n	2e012 <nrf91_socket_offload_getaddrinfo+0x156>
   2e00a:	f240 2301 	movw	r3, #513	; 0x201
   2e00e:	429a      	cmp	r2, r3
   2e010:	d1d2      	bne.n	2dfb8 <nrf91_socket_offload_getaddrinfo+0xfc>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2e012:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   2e014:	2902      	cmp	r1, #2
   2e016:	d11c      	bne.n	2e052 <nrf91_socket_offload_getaddrinfo+0x196>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   2e018:	2008      	movs	r0, #8
   2e01a:	f7f7 fc8f 	bl	2593c <k_malloc>
   2e01e:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   2e020:	b320      	cbz	r0, 2e06c <nrf91_socket_offload_getaddrinfo+0x1b0>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   2e022:	2308      	movs	r3, #8
   2e024:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   2e026:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   2e028:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2e02a:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   2e02c:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   2e02e:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2e030:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   2e032:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   2e034:	f1b8 0f00 	cmp.w	r8, #0
   2e038:	d123      	bne.n	2e082 <nrf91_socket_offload_getaddrinfo+0x1c6>
			*res = next_z_res;
   2e03a:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   2e03c:	46a0      	mov	r8, r4
   2e03e:	69f6      	ldr	r6, [r6, #28]
   2e040:	e78a      	b.n	2df58 <nrf91_socket_offload_getaddrinfo+0x9c>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2e042:	f240 1311 	movw	r3, #273	; 0x111
   2e046:	6123      	str	r3, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   2e048:	e7e4      	b.n	2e014 <nrf91_socket_offload_getaddrinfo+0x158>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2e04a:	2311      	movs	r3, #17
   2e04c:	e7fb      	b.n	2e046 <nrf91_socket_offload_getaddrinfo+0x18a>
   2e04e:	2306      	movs	r3, #6
   2e050:	e7f9      	b.n	2e046 <nrf91_socket_offload_getaddrinfo+0x18a>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   2e052:	290a      	cmp	r1, #10
   2e054:	d1b5      	bne.n	2dfc2 <nrf91_socket_offload_getaddrinfo+0x106>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   2e056:	2018      	movs	r0, #24
   2e058:	f7f7 fc70 	bl	2593c <k_malloc>
   2e05c:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   2e05e:	b128      	cbz	r0, 2e06c <nrf91_socket_offload_getaddrinfo+0x1b0>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2e060:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   2e062:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2e064:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   2e066:	f7ff fed8 	bl	2de1a <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   2e06a:	e7e3      	b.n	2e034 <nrf91_socket_offload_getaddrinfo+0x178>
			k_free(next_z_res);
   2e06c:	4620      	mov	r0, r4
   2e06e:	f000 fc86 	bl	2e97e <k_free>
			retval = DNS_EAI_MEMORY;
   2e072:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   2e076:	6838      	ldr	r0, [r7, #0]
   2e078:	f7ff fe9d 	bl	2ddb6 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   2e07c:	2300      	movs	r3, #0
   2e07e:	603b      	str	r3, [r7, #0]
   2e080:	e76b      	b.n	2df5a <nrf91_socket_offload_getaddrinfo+0x9e>
			latest_z_res->ai_next = next_z_res;
   2e082:	f8c8 4000 	str.w	r4, [r8]
   2e086:	e7d9      	b.n	2e03c <nrf91_socket_offload_getaddrinfo+0x180>
			return DNS_EAI_SOCKTYPE;
   2e088:	f06f 0506 	mvn.w	r5, #6
   2e08c:	e74c      	b.n	2df28 <nrf91_socket_offload_getaddrinfo+0x6c>
			return DNS_EAI_ADDRFAMILY;
   2e08e:	f06f 0508 	mvn.w	r5, #8
   2e092:	e749      	b.n	2df28 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_NONAME;
   2e094:	f06f 0501 	mvn.w	r5, #1
   2e098:	e746      	b.n	2df28 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_MEMORY;
   2e09a:	f06f 0509 	mvn.w	r5, #9
   2e09e:	e743      	b.n	2df28 <nrf91_socket_offload_getaddrinfo+0x6c>

0002e0a0 <z_to_nrf_ipv6>:
{
   2e0a0:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   2e0a2:	2124      	movs	r1, #36	; 0x24
   2e0a4:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   2e0a6:	8841      	ldrh	r1, [r0, #2]
{
   2e0a8:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   2e0aa:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   2e0ac:	210a      	movs	r1, #10
{
   2e0ae:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   2e0b0:	6059      	str	r1, [r3, #4]
   2e0b2:	1d04      	adds	r4, r0, #4
   2e0b4:	f103 0610 	add.w	r6, r3, #16
   2e0b8:	f100 0714 	add.w	r7, r0, #20
   2e0bc:	4635      	mov	r5, r6
   2e0be:	6820      	ldr	r0, [r4, #0]
   2e0c0:	6861      	ldr	r1, [r4, #4]
   2e0c2:	3408      	adds	r4, #8
   2e0c4:	c503      	stmia	r5!, {r0, r1}
   2e0c6:	42bc      	cmp	r4, r7
   2e0c8:	462e      	mov	r6, r5
   2e0ca:	d1f7      	bne.n	2e0bc <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   2e0cc:	7d12      	ldrb	r2, [r2, #20]
   2e0ce:	621a      	str	r2, [r3, #32]
}
   2e0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002e0d2 <nrf91_socket_offload_sendto>:
{
   2e0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e0d6:	b08e      	sub	sp, #56	; 0x38
   2e0d8:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2e0da:	460e      	mov	r6, r1
   2e0dc:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   2e0de:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   2e0e0:	b974      	cbnz	r4, 2e100 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2e0e2:	4618      	mov	r0, r3
   2e0e4:	9203      	str	r2, [sp, #12]
   2e0e6:	f7ff fda7 	bl	2dc38 <z_to_nrf_flags>
   2e0ea:	4603      	mov	r3, r0
   2e0ec:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2e0f0:	4631      	mov	r1, r6
   2e0f2:	4628      	mov	r0, r5
   2e0f4:	9a03      	ldr	r2, [sp, #12]
   2e0f6:	f7f2 f881 	bl	201fc <nrf_sendto>
}
   2e0fa:	b00e      	add	sp, #56	; 0x38
   2e0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET) {
   2e100:	8823      	ldrh	r3, [r4, #0]
   2e102:	9203      	str	r2, [sp, #12]
   2e104:	2b01      	cmp	r3, #1
   2e106:	d111      	bne.n	2e12c <nrf91_socket_offload_sendto+0x5a>
	nrf_out->sin_port = ptr->sin_port;
   2e108:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e10a:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   2e10c:	f8ad 301c 	strh.w	r3, [sp, #28]
	nrf_out->sin_family = NRF_AF_INET;
   2e110:	2302      	movs	r3, #2
   2e112:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e114:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2e116:	4638      	mov	r0, r7
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e118:	f88d 1014 	strb.w	r1, [sp, #20]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e11c:	9308      	str	r3, [sp, #32]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2e11e:	f7ff fd8b 	bl	2dc38 <z_to_nrf_flags>
   2e122:	9101      	str	r1, [sp, #4]
   2e124:	a905      	add	r1, sp, #20
   2e126:	4603      	mov	r3, r0
   2e128:	9100      	str	r1, [sp, #0]
   2e12a:	e7e1      	b.n	2e0f0 <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   2e12c:	2b02      	cmp	r3, #2
   2e12e:	d10d      	bne.n	2e14c <nrf91_socket_offload_sendto+0x7a>
		z_to_nrf_ipv6(to, &ipv6);
   2e130:	f10d 0814 	add.w	r8, sp, #20
   2e134:	4641      	mov	r1, r8
   2e136:	4620      	mov	r0, r4
   2e138:	f7ff ffb2 	bl	2e0a0 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2e13c:	4638      	mov	r0, r7
   2e13e:	f7ff fd7b 	bl	2dc38 <z_to_nrf_flags>
   2e142:	2124      	movs	r1, #36	; 0x24
   2e144:	4603      	mov	r3, r0
   2e146:	e9cd 8100 	strd	r8, r1, [sp]
   2e14a:	e7d1      	b.n	2e0f0 <nrf91_socket_offload_sendto+0x1e>
	errno = ENOTSUP;
   2e14c:	f7fe fe01 	bl	2cd52 <__errno>
   2e150:	2386      	movs	r3, #134	; 0x86
   2e152:	6003      	str	r3, [r0, #0]
	return retval;
   2e154:	f04f 30ff 	mov.w	r0, #4294967295
   2e158:	e7cf      	b.n	2e0fa <nrf91_socket_offload_sendto+0x28>

0002e15a <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2e15a:	2300      	movs	r3, #0
{
   2e15c:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2e15e:	e9cd 3300 	strd	r3, r3, [sp]
   2e162:	f7ff ffb6 	bl	2e0d2 <nrf91_socket_offload_sendto>
}
   2e166:	b003      	add	sp, #12
   2e168:	f85d fb04 	ldr.w	pc, [sp], #4

0002e16c <nrf91_socket_offload_connect>:
{
   2e16c:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   2e16e:	1e44      	subs	r4, r0, #1
	if (addr->sa_family == AF_INET) {
   2e170:	8808      	ldrh	r0, [r1, #0]
{
   2e172:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   2e174:	2801      	cmp	r0, #1
{
   2e176:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   2e178:	d10f      	bne.n	2e19a <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   2e17a:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e17c:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2e17e:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   2e182:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e184:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e186:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   2e18a:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e18c:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2e18e:	4620      	mov	r0, r4
   2e190:	a901      	add	r1, sp, #4
   2e192:	f7f2 f86b 	bl	2026c <nrf_connect>
}
   2e196:	b00a      	add	sp, #40	; 0x28
   2e198:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2e19a:	2802      	cmp	r0, #2
   2e19c:	d105      	bne.n	2e1aa <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   2e19e:	4618      	mov	r0, r3
   2e1a0:	a901      	add	r1, sp, #4
   2e1a2:	f7ff ff7d 	bl	2e0a0 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2e1a6:	2224      	movs	r2, #36	; 0x24
   2e1a8:	e7f1      	b.n	2e18e <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   2e1aa:	4620      	mov	r0, r4
   2e1ac:	f7f2 f85e 	bl	2026c <nrf_connect>
		if (retval < 0) {
   2e1b0:	2800      	cmp	r0, #0
   2e1b2:	daf0      	bge.n	2e196 <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   2e1b4:	f7fe fdcd 	bl	2cd52 <__errno>
   2e1b8:	2386      	movs	r3, #134	; 0x86
   2e1ba:	6003      	str	r3, [r0, #0]
   2e1bc:	f04f 30ff 	mov.w	r0, #4294967295
   2e1c0:	e7e9      	b.n	2e196 <nrf91_socket_offload_connect+0x2a>

0002e1c2 <nrf91_socket_offload_setsockopt>:
{
   2e1c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e1c6:	461e      	mov	r6, r3
	switch (z_in_level) {
   2e1c8:	f240 2302 	movw	r3, #514	; 0x202
{
   2e1cc:	b086      	sub	sp, #24
	switch (z_in_level) {
   2e1ce:	4299      	cmp	r1, r3
{
   2e1d0:	460c      	mov	r4, r1
   2e1d2:	4615      	mov	r5, r2
   2e1d4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   2e1d6:	f100 38ff 	add.w	r8, r0, #4294967295
	switch (z_in_level) {
   2e1da:	d005      	beq.n	2e1e8 <nrf91_socket_offload_setsockopt+0x26>
   2e1dc:	dc20      	bgt.n	2e220 <nrf91_socket_offload_setsockopt+0x5e>
   2e1de:	2901      	cmp	r1, #1
   2e1e0:	d002      	beq.n	2e1e8 <nrf91_socket_offload_setsockopt+0x26>
   2e1e2:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2e1e6:	d126      	bne.n	2e236 <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   2e1e8:	4629      	mov	r1, r5
   2e1ea:	4620      	mov	r0, r4
   2e1ec:	aa03      	add	r2, sp, #12
   2e1ee:	f7e8 fea9 	bl	16f44 <z_to_nrf_optname>
   2e1f2:	2800      	cmp	r0, #0
   2e1f4:	db1f      	blt.n	2e236 <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   2e1f6:	2c01      	cmp	r4, #1
   2e1f8:	d116      	bne.n	2e228 <nrf91_socket_offload_setsockopt+0x66>
   2e1fa:	3d14      	subs	r5, #20
   2e1fc:	2d01      	cmp	r5, #1
   2e1fe:	d805      	bhi.n	2e20c <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(struct nrf_timeval);
   2e200:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   2e202:	6832      	ldr	r2, [r6, #0]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2e204:	6873      	ldr	r3, [r6, #4]
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   2e206:	9204      	str	r2, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2e208:	9305      	str	r3, [sp, #20]
		nrf_optval = &nrf_timeo;
   2e20a:	ae04      	add	r6, sp, #16
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2e20c:	4633      	mov	r3, r6
   2e20e:	4621      	mov	r1, r4
   2e210:	4640      	mov	r0, r8
   2e212:	9a03      	ldr	r2, [sp, #12]
   2e214:	9700      	str	r7, [sp, #0]
   2e216:	f7f2 f873 	bl	20300 <nrf_setsockopt>
}
   2e21a:	b006      	add	sp, #24
   2e21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   2e220:	f240 2303 	movw	r3, #515	; 0x203
   2e224:	4299      	cmp	r1, r3
   2e226:	e7de      	b.n	2e1e6 <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   2e228:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   2e22c:	d1ee      	bne.n	2e20c <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   2e22e:	2d07      	cmp	r5, #7
   2e230:	bf08      	it	eq
   2e232:	2701      	moveq	r7, #1
   2e234:	e7ea      	b.n	2e20c <nrf91_socket_offload_setsockopt+0x4a>
	errno = ENOPROTOOPT;
   2e236:	f7fe fd8c 	bl	2cd52 <__errno>
   2e23a:	236d      	movs	r3, #109	; 0x6d
   2e23c:	6003      	str	r3, [r0, #0]
   2e23e:	f04f 30ff 	mov.w	r0, #4294967295
   2e242:	e7ea      	b.n	2e21a <nrf91_socket_offload_setsockopt+0x58>

0002e244 <nrf91_socket_offload_bind>:
{
   2e244:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   2e246:	880a      	ldrh	r2, [r1, #0]
{
   2e248:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   2e24a:	2a01      	cmp	r2, #1
{
   2e24c:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   2e24e:	f100 34ff 	add.w	r4, r0, #4294967295
	if (addr->sa_family == AF_INET) {
   2e252:	d10f      	bne.n	2e274 <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   2e254:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e256:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2e258:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   2e25c:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e25e:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e260:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   2e264:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e266:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2e268:	4620      	mov	r0, r4
   2e26a:	a901      	add	r1, sp, #4
   2e26c:	f7f2 f836 	bl	202dc <nrf_bind>
}
   2e270:	b00a      	add	sp, #40	; 0x28
   2e272:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2e274:	2a02      	cmp	r2, #2
   2e276:	d105      	bne.n	2e284 <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   2e278:	4618      	mov	r0, r3
   2e27a:	a901      	add	r1, sp, #4
   2e27c:	f7ff ff10 	bl	2e0a0 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2e280:	2224      	movs	r2, #36	; 0x24
   2e282:	e7f1      	b.n	2e268 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   2e284:	f7fe fd65 	bl	2cd52 <__errno>
   2e288:	2386      	movs	r3, #134	; 0x86
   2e28a:	6003      	str	r3, [r0, #0]
   2e28c:	f04f 30ff 	mov.w	r0, #4294967295
   2e290:	e7ee      	b.n	2e270 <nrf91_socket_offload_bind+0x2c>

0002e292 <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   2e292:	ea40 0301 	orr.w	r3, r0, r1
   2e296:	f033 030f 	bics.w	r3, r3, #15
   2e29a:	d101      	bne.n	2e2a0 <dk_set_leds_state+0xe>
   2e29c:	f7e9 b980 	b.w	175a0 <dk_set_leds_state.part.0>
}
   2e2a0:	f06f 0015 	mvn.w	r0, #21
   2e2a4:	4770      	bx	lr

0002e2a6 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   2e2a6:	6883      	ldr	r3, [r0, #8]
   2e2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2e2aa:	b103      	cbz	r3, 2e2ae <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   2e2ac:	4718      	bx	r3
}
   2e2ae:	4770      	bx	lr

0002e2b0 <response_handler>:
	write_uart_string(response);
   2e2b0:	4608      	mov	r0, r1
   2e2b2:	f7ea b83f 	b.w	18334 <write_uart_string>

0002e2b6 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   2e2b6:	280d      	cmp	r0, #13
   2e2b8:	d004      	beq.n	2e2c4 <is_lfcr+0xe>
   2e2ba:	f1a0 030a 	sub.w	r3, r0, #10
   2e2be:	4258      	negs	r0, r3
   2e2c0:	4158      	adcs	r0, r3
   2e2c2:	4770      	bx	lr
		return true;
   2e2c4:	2001      	movs	r0, #1
}
   2e2c6:	4770      	bx	lr

0002e2c8 <skip_command_prefix>:
{
   2e2c8:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   2e2ca:	6801      	ldr	r1, [r0, #0]
{
   2e2cc:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   2e2ce:	1c8b      	adds	r3, r1, #2
   2e2d0:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   2e2d2:	788c      	ldrb	r4, [r1, #2]
   2e2d4:	4620      	mov	r0, r4
   2e2d6:	f7ff ffee 	bl	2e2b6 <is_lfcr>
   2e2da:	b910      	cbnz	r0, 2e2e2 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2e2dc:	b10c      	cbz	r4, 2e2e2 <skip_command_prefix+0x1a>
	(*cmd)++;
   2e2de:	3103      	adds	r1, #3
   2e2e0:	6011      	str	r1, [r2, #0]
}
   2e2e2:	bd10      	pop	{r4, pc}

0002e2e4 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   2e2e4:	6813      	ldr	r3, [r2, #0]
   2e2e6:	f7ea bb6d 	b.w	189c4 <at_parser_max_params_from_str>

0002e2ea <at_params_list_init>:
{
   2e2ea:	b538      	push	{r3, r4, r5, lr}
   2e2ec:	460d      	mov	r5, r1
	if (list == NULL) {
   2e2ee:	4604      	mov	r4, r0
   2e2f0:	b140      	cbz	r0, 2e304 <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   2e2f2:	210c      	movs	r1, #12
   2e2f4:	4628      	mov	r0, r5
   2e2f6:	f000 fb47 	bl	2e988 <k_calloc>
   2e2fa:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   2e2fc:	b128      	cbz	r0, 2e30a <at_params_list_init+0x20>
	return 0;
   2e2fe:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   2e300:	6025      	str	r5, [r4, #0]
}
   2e302:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2e304:	f06f 0015 	mvn.w	r0, #21
   2e308:	e7fb      	b.n	2e302 <at_params_list_init+0x18>
		return -ENOMEM;
   2e30a:	f06f 000b 	mvn.w	r0, #11
   2e30e:	e7f8      	b.n	2e302 <at_params_list_init+0x18>

0002e310 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   2e310:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   2e312:	4604      	mov	r4, r0
   2e314:	b148      	cbz	r0, 2e32a <at_params_list_free+0x1a>
   2e316:	6843      	ldr	r3, [r0, #4]
   2e318:	b13b      	cbz	r3, 2e32a <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   2e31a:	2500      	movs	r5, #0
	at_params_list_clear(list);
   2e31c:	f7ea fc4e 	bl	18bbc <at_params_list_clear>
	k_free(list->params);
   2e320:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   2e322:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   2e324:	f000 fb2b 	bl	2e97e <k_free>
	list->params = NULL;
   2e328:	6065      	str	r5, [r4, #4]
}
   2e32a:	bd38      	pop	{r3, r4, r5, pc}

0002e32c <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			uint16_t value)
{
   2e32c:	b538      	push	{r3, r4, r5, lr}
   2e32e:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   2e330:	b910      	cbnz	r0, 2e338 <at_params_short_put+0xc>
		return -EINVAL;
   2e332:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
	return 0;
}
   2e336:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   2e338:	6843      	ldr	r3, [r0, #4]
   2e33a:	2b00      	cmp	r3, #0
   2e33c:	d0f9      	beq.n	2e332 <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   2e33e:	f7ea fbd1 	bl	18ae4 <at_params_get>
	if (param == NULL) {
   2e342:	4604      	mov	r4, r0
   2e344:	2800      	cmp	r0, #0
   2e346:	d0f4      	beq.n	2e332 <at_params_short_put+0x6>
	at_param_clear(param);
   2e348:	f7ea fc16 	bl	18b78 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   2e34c:	2301      	movs	r3, #1
	return 0;
   2e34e:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   2e350:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
   2e352:	60a5      	str	r5, [r4, #8]
	return 0;
   2e354:	e7ef      	b.n	2e336 <at_params_short_put+0xa>

0002e356 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   2e356:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   2e358:	b910      	cbnz	r0, 2e360 <at_params_empty_put+0xa>
		return -EINVAL;
   2e35a:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   2e35e:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   2e360:	6843      	ldr	r3, [r0, #4]
   2e362:	2b00      	cmp	r3, #0
   2e364:	d0f9      	beq.n	2e35a <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   2e366:	f7ea fbbd 	bl	18ae4 <at_params_get>
	if (param == NULL) {
   2e36a:	4604      	mov	r4, r0
   2e36c:	2800      	cmp	r0, #0
   2e36e:	d0f4      	beq.n	2e35a <at_params_empty_put+0x4>
	at_param_clear(param);
   2e370:	f7ea fc02 	bl	18b78 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   2e374:	2305      	movs	r3, #5
	param->value.int_val = 0;
   2e376:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   2e378:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   2e37a:	60a0      	str	r0, [r4, #8]
	return 0;
   2e37c:	e7ef      	b.n	2e35e <at_params_empty_put+0x8>

0002e37e <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      uint32_t value)
{
   2e37e:	b538      	push	{r3, r4, r5, lr}
   2e380:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   2e382:	b910      	cbnz	r0, 2e38a <at_params_int_put+0xc>
		return -EINVAL;
   2e384:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   2e388:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   2e38a:	6843      	ldr	r3, [r0, #4]
   2e38c:	2b00      	cmp	r3, #0
   2e38e:	d0f9      	beq.n	2e384 <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   2e390:	f7ea fba8 	bl	18ae4 <at_params_get>
	if (param == NULL) {
   2e394:	4604      	mov	r4, r0
   2e396:	2800      	cmp	r0, #0
   2e398:	d0f4      	beq.n	2e384 <at_params_int_put+0x6>
	at_param_clear(param);
   2e39a:	f7ea fbed 	bl	18b78 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   2e39e:	2302      	movs	r3, #2
	return 0;
   2e3a0:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   2e3a2:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   2e3a4:	60a5      	str	r5, [r4, #8]
	return 0;
   2e3a6:	e7ef      	b.n	2e388 <at_params_int_put+0xa>

0002e3a8 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   2e3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e3aa:	4617      	mov	r7, r2
   2e3ac:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   2e3ae:	b910      	cbnz	r0, 2e3b6 <at_params_string_put+0xe>
		return -EINVAL;
   2e3b0:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   2e3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   2e3b6:	6843      	ldr	r3, [r0, #4]
   2e3b8:	2b00      	cmp	r3, #0
   2e3ba:	d0f9      	beq.n	2e3b0 <at_params_string_put+0x8>
   2e3bc:	2a00      	cmp	r2, #0
   2e3be:	d0f7      	beq.n	2e3b0 <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   2e3c0:	f7ea fb90 	bl	18ae4 <at_params_get>
	if (param == NULL) {
   2e3c4:	4604      	mov	r4, r0
   2e3c6:	2800      	cmp	r0, #0
   2e3c8:	d0f2      	beq.n	2e3b0 <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   2e3ca:	1c68      	adds	r0, r5, #1
   2e3cc:	f7f7 fab6 	bl	2593c <k_malloc>
	if (param_value == NULL) {
   2e3d0:	4606      	mov	r6, r0
   2e3d2:	b160      	cbz	r0, 2e3ee <at_params_string_put+0x46>
   2e3d4:	462a      	mov	r2, r5
   2e3d6:	4639      	mov	r1, r7
   2e3d8:	f7de fbb8 	bl	cb4c <memcpy>
	at_param_clear(param);
   2e3dc:	4620      	mov	r0, r4
   2e3de:	f7ea fbcb 	bl	18b78 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   2e3e2:	2303      	movs	r3, #3
	return 0;
   2e3e4:	2000      	movs	r0, #0
	param->size = str_len;
   2e3e6:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   2e3e8:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   2e3ea:	60a6      	str	r6, [r4, #8]
	return 0;
   2e3ec:	e7e2      	b.n	2e3b4 <at_params_string_put+0xc>
		return -ENOMEM;
   2e3ee:	f06f 000b 	mvn.w	r0, #11
   2e3f2:	e7df      	b.n	2e3b4 <at_params_string_put+0xc>

0002e3f4 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   2e3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e3f6:	4617      	mov	r7, r2
   2e3f8:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   2e3fa:	b910      	cbnz	r0, 2e402 <at_params_array_put+0xe>
		return -EINVAL;
   2e3fc:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   2e400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   2e402:	6843      	ldr	r3, [r0, #4]
   2e404:	2b00      	cmp	r3, #0
   2e406:	d0f9      	beq.n	2e3fc <at_params_array_put+0x8>
   2e408:	2a00      	cmp	r2, #0
   2e40a:	d0f7      	beq.n	2e3fc <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   2e40c:	f7ea fb6a 	bl	18ae4 <at_params_get>
	if (param == NULL) {
   2e410:	4604      	mov	r4, r0
   2e412:	2800      	cmp	r0, #0
   2e414:	d0f2      	beq.n	2e3fc <at_params_array_put+0x8>
	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   2e416:	4628      	mov	r0, r5
   2e418:	f7f7 fa90 	bl	2593c <k_malloc>
	if (param_value == NULL) {
   2e41c:	4606      	mov	r6, r0
   2e41e:	b160      	cbz	r0, 2e43a <at_params_array_put+0x46>
   2e420:	462a      	mov	r2, r5
   2e422:	4639      	mov	r1, r7
   2e424:	f7de fb92 	bl	cb4c <memcpy>
	at_param_clear(param);
   2e428:	4620      	mov	r0, r4
   2e42a:	f7ea fba5 	bl	18b78 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   2e42e:	2304      	movs	r3, #4
	return 0;
   2e430:	2000      	movs	r0, #0
	param->size = array_len;
   2e432:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   2e434:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   2e436:	60a6      	str	r6, [r4, #8]
	return 0;
   2e438:	e7e2      	b.n	2e400 <at_params_array_put+0xc>
		return -ENOMEM;
   2e43a:	f06f 000b 	mvn.w	r0, #11
   2e43e:	e7df      	b.n	2e400 <at_params_array_put+0xc>

0002e440 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   2e440:	b510      	push	{r4, lr}
   2e442:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2e444:	b910      	cbnz	r0, 2e44c <at_params_short_get+0xc>
		return -EINVAL;
   2e446:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
}
   2e44a:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   2e44c:	6843      	ldr	r3, [r0, #4]
   2e44e:	2b00      	cmp	r3, #0
   2e450:	d0f9      	beq.n	2e446 <at_params_short_get+0x6>
   2e452:	2a00      	cmp	r2, #0
   2e454:	d0f7      	beq.n	2e446 <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   2e456:	f7ea fb45 	bl	18ae4 <at_params_get>
	if (param == NULL) {
   2e45a:	2800      	cmp	r0, #0
   2e45c:	d0f3      	beq.n	2e446 <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   2e45e:	7803      	ldrb	r3, [r0, #0]
   2e460:	2b01      	cmp	r3, #1
   2e462:	d1f0      	bne.n	2e446 <at_params_short_get+0x6>
	*value = (uint16_t)param->value.int_val;
   2e464:	6883      	ldr	r3, [r0, #8]
	return 0;
   2e466:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   2e468:	8023      	strh	r3, [r4, #0]
	return 0;
   2e46a:	e7ee      	b.n	2e44a <at_params_short_get+0xa>

0002e46c <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      uint32_t *value)
{
   2e46c:	b510      	push	{r4, lr}
   2e46e:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2e470:	b910      	cbnz	r0, 2e478 <at_params_int_get+0xc>
		return -EINVAL;
   2e472:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   2e476:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   2e478:	6843      	ldr	r3, [r0, #4]
   2e47a:	2b00      	cmp	r3, #0
   2e47c:	d0f9      	beq.n	2e472 <at_params_int_get+0x6>
   2e47e:	2a00      	cmp	r2, #0
   2e480:	d0f7      	beq.n	2e472 <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   2e482:	f7ea fb2f 	bl	18ae4 <at_params_get>
	if (param == NULL) {
   2e486:	2800      	cmp	r0, #0
   2e488:	d0f3      	beq.n	2e472 <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   2e48a:	7803      	ldrb	r3, [r0, #0]
   2e48c:	3b01      	subs	r3, #1
   2e48e:	2b01      	cmp	r3, #1
   2e490:	d8ef      	bhi.n	2e472 <at_params_int_get+0x6>
	*value = param->value.int_val;
   2e492:	6883      	ldr	r3, [r0, #8]
	return 0;
   2e494:	2000      	movs	r0, #0
	*value = param->value.int_val;
   2e496:	6023      	str	r3, [r4, #0]
	return 0;
   2e498:	e7ed      	b.n	2e476 <at_params_int_get+0xa>

0002e49a <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   2e49a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e49c:	4617      	mov	r7, r2
   2e49e:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   2e4a0:	b910      	cbnz	r0, 2e4a8 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   2e4a2:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   2e4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   2e4a8:	6843      	ldr	r3, [r0, #4]
   2e4aa:	2b00      	cmp	r3, #0
   2e4ac:	d0f9      	beq.n	2e4a2 <at_params_string_get+0x8>
   2e4ae:	2a00      	cmp	r2, #0
   2e4b0:	d0f7      	beq.n	2e4a2 <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   2e4b2:	2c00      	cmp	r4, #0
   2e4b4:	d0f5      	beq.n	2e4a2 <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   2e4b6:	f7ea fb15 	bl	18ae4 <at_params_get>
	if (param == NULL) {
   2e4ba:	4606      	mov	r6, r0
   2e4bc:	2800      	cmp	r0, #0
   2e4be:	d0f0      	beq.n	2e4a2 <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   2e4c0:	7803      	ldrb	r3, [r0, #0]
   2e4c2:	2b03      	cmp	r3, #3
   2e4c4:	d1ed      	bne.n	2e4a2 <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   2e4c6:	f7ea fb2f 	bl	18b28 <at_param_size>
	if (*len < param_len) {
   2e4ca:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   2e4cc:	4605      	mov	r5, r0
	if (*len < param_len) {
   2e4ce:	4283      	cmp	r3, r0
   2e4d0:	d307      	bcc.n	2e4e2 <at_params_string_get+0x48>
   2e4d2:	4602      	mov	r2, r0
   2e4d4:	68b1      	ldr	r1, [r6, #8]
   2e4d6:	4638      	mov	r0, r7
   2e4d8:	f7de fb38 	bl	cb4c <memcpy>
	return 0;
   2e4dc:	2000      	movs	r0, #0
	*len = param_len;
   2e4de:	6025      	str	r5, [r4, #0]
	return 0;
   2e4e0:	e7e1      	b.n	2e4a6 <at_params_string_get+0xc>
		return -ENOMEM;
   2e4e2:	f06f 000b 	mvn.w	r0, #11
   2e4e6:	e7de      	b.n	2e4a6 <at_params_string_get+0xc>

0002e4e8 <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   2e4e8:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   2e4ea:	4605      	mov	r5, r0
   2e4ec:	b180      	cbz	r0, 2e510 <at_params_valid_count_get+0x28>
   2e4ee:	6843      	ldr	r3, [r0, #4]
   2e4f0:	b173      	cbz	r3, 2e510 <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   2e4f2:	2100      	movs	r1, #0
   2e4f4:	f7ea faf6 	bl	18ae4 <at_params_get>
	size_t valid_i = 0;
   2e4f8:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   2e4fa:	b108      	cbz	r0, 2e500 <at_params_valid_count_get+0x18>
   2e4fc:	7803      	ldrb	r3, [r0, #0]
   2e4fe:	b90b      	cbnz	r3, 2e504 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   2e500:	4620      	mov	r0, r4
   2e502:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   2e504:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   2e506:	4621      	mov	r1, r4
   2e508:	4628      	mov	r0, r5
   2e50a:	f7ea faeb 	bl	18ae4 <at_params_get>
   2e50e:	e7f4      	b.n	2e4fa <at_params_valid_count_get+0x12>
		return -EINVAL;
   2e510:	f06f 0415 	mvn.w	r4, #21
   2e514:	e7f4      	b.n	2e500 <at_params_valid_count_get+0x18>

0002e516 <response_is_valid>:
{
   2e516:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2e518:	4605      	mov	r5, r0
	if ((response_len < strlen(check)) ||
   2e51a:	4610      	mov	r0, r2
{
   2e51c:	460c      	mov	r4, r1
	if ((response_len < strlen(check)) ||
   2e51e:	9201      	str	r2, [sp, #4]
   2e520:	f7f8 f9bc 	bl	2689c <strlen>
   2e524:	42a0      	cmp	r0, r4
   2e526:	d809      	bhi.n	2e53c <response_is_valid+0x26>
	    (memcmp(response, check, response_len) != 0)) {
   2e528:	4622      	mov	r2, r4
   2e52a:	4628      	mov	r0, r5
   2e52c:	9901      	ldr	r1, [sp, #4]
   2e52e:	f7f7 fd77 	bl	26020 <memcmp>
	if ((response_len < strlen(check)) ||
   2e532:	fab0 f080 	clz	r0, r0
   2e536:	0940      	lsrs	r0, r0, #5
}
   2e538:	b003      	add	sp, #12
   2e53a:	bd30      	pop	{r4, r5, pc}
		return false;
   2e53c:	2000      	movs	r0, #0
   2e53e:	e7fb      	b.n	2e538 <response_is_valid+0x22>

0002e540 <lte_lc_connect>:
	return w_lte_lc_connect(true);
   2e540:	2001      	movs	r0, #1
   2e542:	f7ea bc79 	b.w	18e38 <w_lte_lc_connect>

0002e546 <lte_lc_init_and_connect>:
{
   2e546:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   2e548:	f7ea fdb0 	bl	190ac <w_lte_lc_init>
	if (ret) {
   2e54c:	b920      	cbnz	r0, 2e558 <lte_lc_init_and_connect+0x12>
}
   2e54e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect(true);
   2e552:	2001      	movs	r0, #1
   2e554:	f7ea bc70 	b.w	18e38 <w_lte_lc_connect>
}
   2e558:	bd08      	pop	{r3, pc}

0002e55a <date_time_handler>:
}
   2e55a:	4770      	bx	lr

0002e55c <k_uptime_get>:
{
   2e55c:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   2e55e:	f000 f943 	bl	2e7e8 <z_impl_k_uptime_ticks>
   2e562:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2e566:	fba0 2304 	umull	r2, r3, r0, r4
   2e56a:	fb04 3301 	mla	r3, r4, r1, r3
   2e56e:	0bd0      	lsrs	r0, r2, #15
}
   2e570:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2e574:	0bd9      	lsrs	r1, r3, #15
   2e576:	bd10      	pop	{r4, pc}

0002e578 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2e578:	4700      	bx	r0

0002e57a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2e57a:	f000 b8c6 	b.w	2e70a <z_impl_k_busy_wait>

0002e57e <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   2e57e:	f7fe bb80 	b.w	2cc82 <z_clock_idle_exit>

0002e582 <k_heap_init>:
{
   2e582:	b410      	push	{r4}
   2e584:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2e588:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2e58c:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   2e590:	f7e4 bb5a 	b.w	12c48 <sys_heap_init>

0002e594 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   2e594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e596:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   2e59a:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   2e59c:	6800      	ldr	r0, [r0, #0]
{
   2e59e:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   2e5a0:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   2e5a2:	4632      	mov	r2, r6
   2e5a4:	463b      	mov	r3, r7
   2e5a6:	4621      	mov	r1, r4
   2e5a8:	f7f3 fffc 	bl	225a4 <k_heap_alloc>
   2e5ac:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   2e5ae:	b144      	cbz	r4, 2e5c2 <k_mem_pool_alloc+0x2e>
   2e5b0:	b938      	cbnz	r0, 2e5c2 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   2e5b2:	ea56 0307 	orrs.w	r3, r6, r7
   2e5b6:	bf0c      	ite	eq
   2e5b8:	f06f 000b 	mvneq.w	r0, #11
   2e5bc:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   2e5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   2e5c2:	2000      	movs	r0, #0
   2e5c4:	e7fc      	b.n	2e5c0 <k_mem_pool_alloc+0x2c>

0002e5c6 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   2e5c6:	e9d0 1000 	ldrd	r1, r0, [r0]
   2e5ca:	f7f4 b899 	b.w	22700 <k_heap_free>

0002e5ce <k_mem_slab_init>:
{
   2e5ce:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2e5d0:	2400      	movs	r4, #0
   2e5d2:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2e5d4:	ea41 0402 	orr.w	r4, r1, r2
   2e5d8:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2e5dc:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2e5e0:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2e5e2:	d10c      	bne.n	2e5fe <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   2e5e4:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2e5e6:	42a3      	cmp	r3, r4
   2e5e8:	d103      	bne.n	2e5f2 <k_mem_slab_init+0x24>
   2e5ea:	e9c0 0000 	strd	r0, r0, [r0]
}
   2e5ee:	2000      	movs	r0, #0
}
   2e5f0:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2e5f2:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2e5f4:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   2e5f6:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   2e5f8:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   2e5fa:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2e5fc:	e7f3      	b.n	2e5e6 <k_mem_slab_init+0x18>
		return -EINVAL;
   2e5fe:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2e602:	e7f5      	b.n	2e5f0 <k_mem_slab_init+0x22>

0002e604 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   2e604:	2300      	movs	r3, #0
   2e606:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   2e60a:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   2e60e:	4618      	mov	r0, r3
   2e610:	4770      	bx	lr

0002e612 <z_queue_node_peek>:
{
   2e612:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2e614:	4604      	mov	r4, r0
   2e616:	b130      	cbz	r0, 2e626 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2e618:	6802      	ldr	r2, [r0, #0]
   2e61a:	0793      	lsls	r3, r2, #30
   2e61c:	d003      	beq.n	2e626 <z_queue_node_peek+0x14>
		ret = anode->data;
   2e61e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2e620:	b109      	cbz	r1, 2e626 <z_queue_node_peek+0x14>
			k_free(anode);
   2e622:	f000 f9ac 	bl	2e97e <k_free>
}
   2e626:	4620      	mov	r0, r4
   2e628:	bd10      	pop	{r4, pc}

0002e62a <z_impl_k_queue_init>:
	list->head = NULL;
   2e62a:	2300      	movs	r3, #0
	list->tail = NULL;
   2e62c:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2e630:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
   2e632:	f100 030c 	add.w	r3, r0, #12
   2e636:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2e63a:	f100 0314 	add.w	r3, r0, #20
   2e63e:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2e642:	4770      	bx	lr

0002e644 <k_queue_append>:
{
   2e644:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   2e646:	2300      	movs	r3, #0
   2e648:	6841      	ldr	r1, [r0, #4]
   2e64a:	f7f4 bcc9 	b.w	22fe0 <queue_insert>

0002e64e <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   2e64e:	f990 000e 	ldrsb.w	r0, [r0, #14]
   2e652:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   2e656:	4298      	cmp	r0, r3
   2e658:	bfac      	ite	ge
   2e65a:	2000      	movge	r0, #0
   2e65c:	2001      	movlt	r0, #1
   2e65e:	4770      	bx	lr

0002e660 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2e660:	4603      	mov	r3, r0
   2e662:	b920      	cbnz	r0, 2e66e <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2e664:	f3ef 8205 	mrs	r2, IPSR
   2e668:	b90a      	cbnz	r2, 2e66e <z_reschedule_irqlock+0xe>
   2e66a:	f7e5 bf91 	b.w	14590 <arch_swap>
   2e66e:	f383 8811 	msr	BASEPRI, r3
   2e672:	f3bf 8f6f 	isb	sy
}
   2e676:	4770      	bx	lr

0002e678 <z_reschedule_unlocked>:
	__asm__ volatile(
   2e678:	f04f 0320 	mov.w	r3, #32
   2e67c:	f3ef 8011 	mrs	r0, BASEPRI
   2e680:	f383 8811 	msr	BASEPRI, r3
   2e684:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2e688:	f7ff bfea 	b.w	2e660 <z_reschedule_irqlock>

0002e68c <unpend_thread_no_timeout>:
{
   2e68c:	b510      	push	{r4, lr}
   2e68e:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2e690:	3008      	adds	r0, #8
   2e692:	f7f4 fda7 	bl	231e4 <pended_on.isra.0>
   2e696:	4621      	mov	r1, r4
   2e698:	f7f4 ff80 	bl	2359c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2e69c:	7b63      	ldrb	r3, [r4, #13]
   2e69e:	f023 0302 	bic.w	r3, r3, #2
   2e6a2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2e6a4:	2300      	movs	r3, #0
   2e6a6:	60a3      	str	r3, [r4, #8]
}
   2e6a8:	bd10      	pop	{r4, pc}

0002e6aa <z_priq_dumb_best>:
	return list->head == list;
   2e6aa:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e6ac:	4298      	cmp	r0, r3
   2e6ae:	d004      	beq.n	2e6ba <z_priq_dumb_best+0x10>
	if (n != NULL) {
   2e6b0:	2b00      	cmp	r3, #0
   2e6b2:	bf38      	it	cc
   2e6b4:	2300      	movcc	r3, #0
   2e6b6:	4618      	mov	r0, r3
   2e6b8:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2e6ba:	2000      	movs	r0, #0
}
   2e6bc:	4770      	bx	lr

0002e6be <z_unpend_all>:
{
   2e6be:	b538      	push	{r3, r4, r5, lr}
   2e6c0:	4605      	mov	r5, r0
	int need_sched = 0;
   2e6c2:	2000      	movs	r0, #0
	return list->head == list;
   2e6c4:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e6c6:	42a5      	cmp	r5, r4
   2e6c8:	d000      	beq.n	2e6cc <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2e6ca:	b904      	cbnz	r4, 2e6ce <z_unpend_all+0x10>
}
   2e6cc:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2e6ce:	4620      	mov	r0, r4
   2e6d0:	f7f4 ff92 	bl	235f8 <z_unpend_thread>
		z_ready_thread(thread);
   2e6d4:	4620      	mov	r0, r4
   2e6d6:	f7f5 f8c9 	bl	2386c <z_ready_thread>
		need_sched = 1;
   2e6da:	2001      	movs	r0, #1
   2e6dc:	e7f2      	b.n	2e6c4 <z_unpend_all+0x6>

0002e6de <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   2e6de:	b15a      	cbz	r2, 2e6f8 <z_impl_k_sem_init+0x1a>
   2e6e0:	428a      	cmp	r2, r1
   2e6e2:	d309      	bcc.n	2e6f8 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2e6e4:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2e6e8:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2e6ec:	e9c0 0000 	strd	r0, r0, [r0]
   2e6f0:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2e6f4:	2000      	movs	r0, #0
   2e6f6:	4770      	bx	lr
		return -EINVAL;
   2e6f8:	f06f 0015 	mvn.w	r0, #21
}
   2e6fc:	4770      	bx	lr

0002e6fe <k_is_in_isr>:
   2e6fe:	f3ef 8005 	mrs	r0, IPSR
}
   2e702:	3800      	subs	r0, #0
   2e704:	bf18      	it	ne
   2e706:	2001      	movne	r0, #1
   2e708:	4770      	bx	lr

0002e70a <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   2e70a:	f7e4 bb4d 	b.w	12da8 <arch_busy_wait>

0002e70e <z_impl_k_thread_name_set>:
}
   2e70e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2e712:	4770      	bx	lr

0002e714 <k_thread_name_get>:
}
   2e714:	2000      	movs	r0, #0
   2e716:	4770      	bx	lr

0002e718 <k_work_submit_to_queue>:
{
   2e718:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e71a:	f101 0308 	add.w	r3, r1, #8
   2e71e:	e8d3 2fef 	ldaex	r2, [r3]
   2e722:	f042 0c01 	orr.w	ip, r2, #1
   2e726:	e8c3 cfee 	stlex	lr, ip, [r3]
   2e72a:	f1be 0f00 	cmp.w	lr, #0
   2e72e:	d1f6      	bne.n	2e71e <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2e730:	07d3      	lsls	r3, r2, #31
   2e732:	d403      	bmi.n	2e73c <k_work_submit_to_queue+0x24>
}
   2e734:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2e738:	f7ff bf84 	b.w	2e644 <k_queue_append>
}
   2e73c:	f85d fb04 	ldr.w	pc, [sp], #4

0002e740 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   2e740:	f1a0 0110 	sub.w	r1, r0, #16
   2e744:	6980      	ldr	r0, [r0, #24]
   2e746:	f7ff bfe7 	b.w	2e718 <k_work_submit_to_queue>

0002e74a <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   2e74a:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   2e74c:	b570      	push	{r4, r5, r6, lr}
   2e74e:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   2e750:	b913      	cbnz	r3, 2e758 <work_cancel+0xe>
		return -EALREADY;
   2e752:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   2e756:	bd70      	pop	{r4, r5, r6, pc}
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   2e758:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e75c:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   2e760:	07db      	lsls	r3, r3, #31
   2e762:	d52f      	bpl.n	2e7c4 <work_cancel+0x7a>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2e764:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2e766:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2e768:	6813      	ldr	r3, [r2, #0]
   2e76a:	b913      	cbnz	r3, 2e772 <work_cancel+0x28>
			return -EINVAL;
   2e76c:	f06f 0015 	mvn.w	r0, #21
   2e770:	e7f1      	b.n	2e756 <work_cancel+0xc>
   2e772:	429c      	cmp	r4, r3
   2e774:	d121      	bne.n	2e7ba <work_cancel+0x70>
Z_GENLIST_REMOVE(sflist, sfnode)
   2e776:	6823      	ldr	r3, [r4, #0]
   2e778:	6856      	ldr	r6, [r2, #4]
   2e77a:	f023 0003 	bic.w	r0, r3, #3
   2e77e:	b991      	cbnz	r1, 2e7a6 <work_cancel+0x5c>
   2e780:	42b4      	cmp	r4, r6
	list->head = node;
   2e782:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2e784:	d100      	bne.n	2e788 <work_cancel+0x3e>
	list->tail = node;
   2e786:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2e788:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2e78a:	f003 0303 	and.w	r3, r3, #3
   2e78e:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   2e790:	2000      	movs	r0, #0
   2e792:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e794:	e8d5 3fef 	ldaex	r3, [r5]
   2e798:	f023 0301 	bic.w	r3, r3, #1
   2e79c:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2e7a0:	2a00      	cmp	r2, #0
   2e7a2:	d0d8      	beq.n	2e756 <work_cancel+0xc>
   2e7a4:	e7f6      	b.n	2e794 <work_cancel+0x4a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2e7a6:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2e7a8:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   2e7aa:	f003 0303 	and.w	r3, r3, #3
   2e7ae:	ea43 0300 	orr.w	r3, r3, r0
   2e7b2:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2e7b4:	bf08      	it	eq
   2e7b6:	6051      	streq	r1, [r2, #4]
}
   2e7b8:	e7e6      	b.n	2e788 <work_cancel+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2e7ba:	6818      	ldr	r0, [r3, #0]
   2e7bc:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2e7be:	f020 0303 	bic.w	r3, r0, #3
   2e7c2:	e7d2      	b.n	2e76a <work_cancel+0x20>
		int err = z_abort_timeout(&work->timeout);
   2e7c4:	3010      	adds	r0, #16
   2e7c6:	f7f6 fad7 	bl	24d78 <z_abort_timeout>
		if (err) {
   2e7ca:	2800      	cmp	r0, #0
   2e7cc:	d0e0      	beq.n	2e790 <work_cancel+0x46>
   2e7ce:	e7c0      	b.n	2e752 <work_cancel+0x8>

0002e7d0 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2e7d0:	2300      	movs	r3, #0
   2e7d2:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   2e7d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   2e7da:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   2e7dc:	6283      	str	r3, [r0, #40]	; 0x28
}
   2e7de:	4770      	bx	lr

0002e7e0 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   2e7e0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   2e7e2:	f7f6 fc79 	bl	250d8 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2e7e6:	bd08      	pop	{r3, pc}

0002e7e8 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   2e7e8:	f7f6 bc76 	b.w	250d8 <z_tick_get>

0002e7ec <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   2e7ec:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2e7ee:	1c4b      	adds	r3, r1, #1
   2e7f0:	bf08      	it	eq
   2e7f2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2e7f6:	4604      	mov	r4, r0
   2e7f8:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2e7fa:	d013      	beq.n	2e824 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2e7fc:	ea54 0105 	orrs.w	r1, r4, r5
   2e800:	d103      	bne.n	2e80a <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   2e802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   2e806:	f7f6 bc67 	b.w	250d8 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2e80a:	f06f 0101 	mvn.w	r1, #1
   2e80e:	1a0a      	subs	r2, r1, r0
   2e810:	f04f 31ff 	mov.w	r1, #4294967295
   2e814:	eb61 0305 	sbc.w	r3, r1, r5
   2e818:	2a00      	cmp	r2, #0
   2e81a:	f173 0100 	sbcs.w	r1, r3, #0
   2e81e:	db02      	blt.n	2e826 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   2e820:	4610      	mov	r0, r2
   2e822:	4619      	mov	r1, r3
}
   2e824:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   2e826:	f7f6 fc57 	bl	250d8 <z_tick_get>
   2e82a:	2c01      	cmp	r4, #1
   2e82c:	f175 0300 	sbcs.w	r3, r5, #0
   2e830:	bfbc      	itt	lt
   2e832:	2401      	movlt	r4, #1
   2e834:	2500      	movlt	r5, #0
   2e836:	1820      	adds	r0, r4, r0
   2e838:	eb45 0101 	adc.w	r1, r5, r1
   2e83c:	e7f2      	b.n	2e824 <z_timeout_end_calc+0x38>

0002e83e <k_timer_init>:
	timer->status = 0U;
   2e83e:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2e840:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2e844:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2e848:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2e84c:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2e850:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2e852:	6343      	str	r3, [r0, #52]	; 0x34
}
   2e854:	4770      	bx	lr

0002e856 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2e856:	b510      	push	{r4, lr}
   2e858:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2e85a:	f7f6 fa8d 	bl	24d78 <z_abort_timeout>

	if (inactive) {
   2e85e:	b9d8      	cbnz	r0, 2e898 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   2e860:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2e862:	b10b      	cbz	r3, 2e868 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2e864:	4620      	mov	r0, r4
   2e866:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   2e868:	f104 0018 	add.w	r0, r4, #24
   2e86c:	2100      	movs	r1, #0
   2e86e:	f7f4 fd47 	bl	23300 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   2e872:	4604      	mov	r4, r0
   2e874:	b180      	cbz	r0, 2e898 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   2e876:	f7f4 fd8d 	bl	23394 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   2e87a:	4620      	mov	r0, r4
   2e87c:	f7f4 fff6 	bl	2386c <z_ready_thread>
   2e880:	f04f 0320 	mov.w	r3, #32
   2e884:	f3ef 8011 	mrs	r0, BASEPRI
   2e888:	f383 8811 	msr	BASEPRI, r3
   2e88c:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   2e890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2e894:	f7ff bee4 	b.w	2e660 <z_reschedule_irqlock>
   2e898:	bd10      	pop	{r4, pc}

0002e89a <signal_poll_event>:
{
   2e89a:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   2e89c:	6884      	ldr	r4, [r0, #8]
{
   2e89e:	4605      	mov	r5, r0
   2e8a0:	460e      	mov	r6, r1
	if (poller) {
   2e8a2:	b19c      	cbz	r4, 2e8cc <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   2e8a4:	68a3      	ldr	r3, [r4, #8]
   2e8a6:	b95b      	cbnz	r3, 2e8c0 <signal_poll_event+0x26>
	int retcode = 0;
   2e8a8:	4618      	mov	r0, r3
		poller->is_polling = false;
   2e8aa:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2e8ac:	2300      	movs	r3, #0
   2e8ae:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   2e8b0:	68eb      	ldr	r3, [r5, #12]
   2e8b2:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2e8b6:	430e      	orrs	r6, r1
   2e8b8:	f366 3310 	bfi	r3, r6, #12, #5
   2e8bc:	60eb      	str	r3, [r5, #12]
	return retcode;
   2e8be:	e004      	b.n	2e8ca <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   2e8c0:	4798      	blx	r3
		poller->is_polling = false;
   2e8c2:	2300      	movs	r3, #0
		if (retcode < 0) {
   2e8c4:	2800      	cmp	r0, #0
		poller->is_polling = false;
   2e8c6:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   2e8c8:	daf0      	bge.n	2e8ac <signal_poll_event+0x12>
}
   2e8ca:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   2e8cc:	4620      	mov	r0, r4
   2e8ce:	e7ed      	b.n	2e8ac <signal_poll_event+0x12>

0002e8d0 <add_event>:
{
   2e8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e8d2:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2e8d4:	e9d0 2300 	ldrd	r2, r3, [r0]
   2e8d8:	4290      	cmp	r0, r2
   2e8da:	4604      	mov	r4, r0
   2e8dc:	460d      	mov	r5, r1
   2e8de:	d106      	bne.n	2e8ee <add_event+0x1e>
	node->prev = list->tail;
   2e8e0:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2e8e2:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   2e8e4:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   2e8e6:	6863      	ldr	r3, [r4, #4]
   2e8e8:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2e8ea:	6065      	str	r5, [r4, #4]
}
   2e8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2e8ee:	2b00      	cmp	r3, #0
   2e8f0:	d0f6      	beq.n	2e8e0 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   2e8f2:	689b      	ldr	r3, [r3, #8]
   2e8f4:	6879      	ldr	r1, [r7, #4]
   2e8f6:	6858      	ldr	r0, [r3, #4]
   2e8f8:	f7ff fea9 	bl	2e64e <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   2e8fc:	2800      	cmp	r0, #0
   2e8fe:	d1ef      	bne.n	2e8e0 <add_event+0x10>
	return list->head == list;
   2e900:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e902:	42b4      	cmp	r4, r6
   2e904:	d0ec      	beq.n	2e8e0 <add_event+0x10>
   2e906:	2e00      	cmp	r6, #0
   2e908:	bf38      	it	cc
   2e90a:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2e90c:	2e00      	cmp	r6, #0
   2e90e:	d0e7      	beq.n	2e8e0 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   2e910:	68b3      	ldr	r3, [r6, #8]
   2e912:	6878      	ldr	r0, [r7, #4]
   2e914:	6859      	ldr	r1, [r3, #4]
   2e916:	f7ff fe9a 	bl	2e64e <z_is_t1_higher_prio_than_t2>
   2e91a:	b128      	cbz	r0, 2e928 <add_event+0x58>
	node->prev = successor->prev;
   2e91c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2e91e:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   2e922:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2e924:	6075      	str	r5, [r6, #4]
			return;
   2e926:	e7e1      	b.n	2e8ec <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   2e928:	6863      	ldr	r3, [r4, #4]
   2e92a:	42b3      	cmp	r3, r6
   2e92c:	d0d8      	beq.n	2e8e0 <add_event+0x10>
   2e92e:	6836      	ldr	r6, [r6, #0]
   2e930:	e7ec      	b.n	2e90c <add_event+0x3c>

0002e932 <z_handle_obj_poll_events>:
{
   2e932:	4603      	mov	r3, r0
	return list->head == list;
   2e934:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2e936:	4283      	cmp	r3, r0
   2e938:	d008      	beq.n	2e94c <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   2e93a:	e9d0 3200 	ldrd	r3, r2, [r0]
   2e93e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2e940:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2e942:	2300      	movs	r3, #0
	node->prev = NULL;
   2e944:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2e948:	f7ff bfa7 	b.w	2e89a <signal_poll_event>
}
   2e94c:	4770      	bx	lr

0002e94e <k_mem_pool_malloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   2e94e:	2208      	movs	r2, #8
{
   2e950:	b530      	push	{r4, r5, lr}
   2e952:	188a      	adds	r2, r1, r2
   2e954:	b085      	sub	sp, #20
   2e956:	d207      	bcs.n	2e968 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   2e958:	2400      	movs	r4, #0
   2e95a:	2500      	movs	r5, #0
   2e95c:	a902      	add	r1, sp, #8
   2e95e:	e9cd 4500 	strd	r4, r5, [sp]
   2e962:	f7ff fe17 	bl	2e594 <k_mem_pool_alloc>
   2e966:	b110      	cbz	r0, 2e96e <k_mem_pool_malloc+0x20>
		return NULL;
   2e968:	2000      	movs	r0, #0
}
   2e96a:	b005      	add	sp, #20
   2e96c:	bd30      	pop	{r4, r5, pc}
   2e96e:	9a02      	ldr	r2, [sp, #8]
   2e970:	ab02      	add	r3, sp, #8
   2e972:	cb03      	ldmia	r3!, {r0, r1}
   2e974:	6010      	str	r0, [r2, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   2e976:	9802      	ldr	r0, [sp, #8]
   2e978:	6051      	str	r1, [r2, #4]
   2e97a:	3008      	adds	r0, #8
   2e97c:	e7f5      	b.n	2e96a <k_mem_pool_malloc+0x1c>

0002e97e <k_free>:
	if (ptr != NULL) {
   2e97e:	b110      	cbz	r0, 2e986 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   2e980:	3808      	subs	r0, #8
   2e982:	f7ff be20 	b.w	2e5c6 <k_mem_pool_free_id>
}
   2e986:	4770      	bx	lr

0002e988 <k_calloc>:
{
   2e988:	b513      	push	{r0, r1, r4, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   2e98a:	fb01 f200 	mul.w	r2, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   2e98e:	b118      	cbz	r0, 2e998 <k_calloc+0x10>
   2e990:	fbb2 f0f0 	udiv	r0, r2, r0
   2e994:	4281      	cmp	r1, r0
   2e996:	d10c      	bne.n	2e9b2 <k_calloc+0x2a>
	ret = k_malloc(bounds);
   2e998:	4610      	mov	r0, r2
   2e99a:	9201      	str	r2, [sp, #4]
   2e99c:	f7f6 ffce 	bl	2593c <k_malloc>
	if (ret != NULL) {
   2e9a0:	4604      	mov	r4, r0
   2e9a2:	b118      	cbz	r0, 2e9ac <k_calloc+0x24>
__ssp_bos_icheck3(memset, void *, int)
   2e9a4:	2100      	movs	r1, #0
   2e9a6:	9a01      	ldr	r2, [sp, #4]
   2e9a8:	f7f7 fb68 	bl	2607c <memset>
}
   2e9ac:	4620      	mov	r0, r4
   2e9ae:	b002      	add	sp, #8
   2e9b0:	bd10      	pop	{r4, pc}
		return NULL;
   2e9b2:	2400      	movs	r4, #0
   2e9b4:	e7fa      	b.n	2e9ac <k_calloc+0x24>

0002e9b6 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   2e9b6:	4770      	bx	lr
