
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_start>:
    c000:	20029338 	.word	0x20029338
    c004:	000148ed 	.word	0x000148ed
    c008:	0002d031 	.word	0x0002d031
    c00c:	0001491d 	.word	0x0001491d
    c010:	0001491d 	.word	0x0001491d
    c014:	0001491d 	.word	0x0001491d
    c018:	0001491d 	.word	0x0001491d
    c01c:	0001491d 	.word	0x0001491d
	...
    c02c:	000145c1 	.word	0x000145c1
    c030:	0001491d 	.word	0x0001491d
    c034:	00000000 	.word	0x00000000
    c038:	00014511 	.word	0x00014511
    c03c:	000141fd 	.word	0x000141fd

0000c040 <_irq_vector_table>:
    c040:	000148ad 000148ad 000148ad 000148ad     .H...H...H...H..
    c050:	000148ad 000148ad 000148ad 000148ad     .H...H...H...H..
    c060:	000148ad 000148ad 000148ad 000148ad     .H...H...H...H..
    c070:	000148ad 000148ad 000148ad 000148ad     .H...H...H...H..
    c080:	000148ad 000148ad 000148ad 000148ad     .H...H...H...H..
    c090:	000148ad 000148ad 000148ad 000148ad     .H...H...H...H..
    c0a0:	000148ad 000148ad 000148ad 000148ad     .H...H...H...H..
    c0b0:	0001694d 0002df49 000148ad 000148ad     Mi..I....H...H..
    c0c0:	000148ad 000148ad 000148ad 000148ad     .H...H...H...H..
    c0d0:	000148ad 000148ad 000148ad 000148ad     .H...H...H...H..
    c0e0:	000148ad 000148ad 0002df67 000148ad     .H...H..g....H..
    c0f0:	000148ad 000148ad 000148ad 000148ad     .H...H...H...H..
    c100:	000148ad 000148ad 000148ad 000148ad     .H...H...H...H..
    c110:	000148ad 000148ad 000148ad 000148ad     .H...H...H...H..
    c120:	000148ad 000148ad 000148ad 000148ad     .H...H...H...H..
    c130:	000148ad 000148ad 000148ad 000148ad     .H...H...H...H..
    c140:	000148ad                                .H..

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	00028070 00000001 0000c000 0000c000     p...............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <__aeabi_drsub>:
    c240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c244:	e002      	b.n	c24c <__adddf3>
    c246:	bf00      	nop

0000c248 <__aeabi_dsub>:
    c248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c24c <__adddf3>:
    c24c:	b530      	push	{r4, r5, lr}
    c24e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c256:	ea94 0f05 	teq	r4, r5
    c25a:	bf08      	it	eq
    c25c:	ea90 0f02 	teqeq	r0, r2
    c260:	bf1f      	itttt	ne
    c262:	ea54 0c00 	orrsne.w	ip, r4, r0
    c266:	ea55 0c02 	orrsne.w	ip, r5, r2
    c26a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c26e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c272:	f000 80e2 	beq.w	c43a <__adddf3+0x1ee>
    c276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c27a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c27e:	bfb8      	it	lt
    c280:	426d      	neglt	r5, r5
    c282:	dd0c      	ble.n	c29e <__adddf3+0x52>
    c284:	442c      	add	r4, r5
    c286:	ea80 0202 	eor.w	r2, r0, r2
    c28a:	ea81 0303 	eor.w	r3, r1, r3
    c28e:	ea82 0000 	eor.w	r0, r2, r0
    c292:	ea83 0101 	eor.w	r1, r3, r1
    c296:	ea80 0202 	eor.w	r2, r0, r2
    c29a:	ea81 0303 	eor.w	r3, r1, r3
    c29e:	2d36      	cmp	r5, #54	; 0x36
    c2a0:	bf88      	it	hi
    c2a2:	bd30      	pophi	{r4, r5, pc}
    c2a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c2a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c2ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c2b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c2b4:	d002      	beq.n	c2bc <__adddf3+0x70>
    c2b6:	4240      	negs	r0, r0
    c2b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2c8:	d002      	beq.n	c2d0 <__adddf3+0x84>
    c2ca:	4252      	negs	r2, r2
    c2cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2d0:	ea94 0f05 	teq	r4, r5
    c2d4:	f000 80a7 	beq.w	c426 <__adddf3+0x1da>
    c2d8:	f1a4 0401 	sub.w	r4, r4, #1
    c2dc:	f1d5 0e20 	rsbs	lr, r5, #32
    c2e0:	db0d      	blt.n	c2fe <__adddf3+0xb2>
    c2e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2e6:	fa22 f205 	lsr.w	r2, r2, r5
    c2ea:	1880      	adds	r0, r0, r2
    c2ec:	f141 0100 	adc.w	r1, r1, #0
    c2f0:	fa03 f20e 	lsl.w	r2, r3, lr
    c2f4:	1880      	adds	r0, r0, r2
    c2f6:	fa43 f305 	asr.w	r3, r3, r5
    c2fa:	4159      	adcs	r1, r3
    c2fc:	e00e      	b.n	c31c <__adddf3+0xd0>
    c2fe:	f1a5 0520 	sub.w	r5, r5, #32
    c302:	f10e 0e20 	add.w	lr, lr, #32
    c306:	2a01      	cmp	r2, #1
    c308:	fa03 fc0e 	lsl.w	ip, r3, lr
    c30c:	bf28      	it	cs
    c30e:	f04c 0c02 	orrcs.w	ip, ip, #2
    c312:	fa43 f305 	asr.w	r3, r3, r5
    c316:	18c0      	adds	r0, r0, r3
    c318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c31c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c320:	d507      	bpl.n	c332 <__adddf3+0xe6>
    c322:	f04f 0e00 	mov.w	lr, #0
    c326:	f1dc 0c00 	rsbs	ip, ip, #0
    c32a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c32e:	eb6e 0101 	sbc.w	r1, lr, r1
    c332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c336:	d31b      	bcc.n	c370 <__adddf3+0x124>
    c338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c33c:	d30c      	bcc.n	c358 <__adddf3+0x10c>
    c33e:	0849      	lsrs	r1, r1, #1
    c340:	ea5f 0030 	movs.w	r0, r0, rrx
    c344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c348:	f104 0401 	add.w	r4, r4, #1
    c34c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c354:	f080 809a 	bcs.w	c48c <__adddf3+0x240>
    c358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c35c:	bf08      	it	eq
    c35e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c362:	f150 0000 	adcs.w	r0, r0, #0
    c366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c36a:	ea41 0105 	orr.w	r1, r1, r5
    c36e:	bd30      	pop	{r4, r5, pc}
    c370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c374:	4140      	adcs	r0, r0
    c376:	eb41 0101 	adc.w	r1, r1, r1
    c37a:	3c01      	subs	r4, #1
    c37c:	bf28      	it	cs
    c37e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c382:	d2e9      	bcs.n	c358 <__adddf3+0x10c>
    c384:	f091 0f00 	teq	r1, #0
    c388:	bf04      	itt	eq
    c38a:	4601      	moveq	r1, r0
    c38c:	2000      	moveq	r0, #0
    c38e:	fab1 f381 	clz	r3, r1
    c392:	bf08      	it	eq
    c394:	3320      	addeq	r3, #32
    c396:	f1a3 030b 	sub.w	r3, r3, #11
    c39a:	f1b3 0220 	subs.w	r2, r3, #32
    c39e:	da0c      	bge.n	c3ba <__adddf3+0x16e>
    c3a0:	320c      	adds	r2, #12
    c3a2:	dd08      	ble.n	c3b6 <__adddf3+0x16a>
    c3a4:	f102 0c14 	add.w	ip, r2, #20
    c3a8:	f1c2 020c 	rsb	r2, r2, #12
    c3ac:	fa01 f00c 	lsl.w	r0, r1, ip
    c3b0:	fa21 f102 	lsr.w	r1, r1, r2
    c3b4:	e00c      	b.n	c3d0 <__adddf3+0x184>
    c3b6:	f102 0214 	add.w	r2, r2, #20
    c3ba:	bfd8      	it	le
    c3bc:	f1c2 0c20 	rsble	ip, r2, #32
    c3c0:	fa01 f102 	lsl.w	r1, r1, r2
    c3c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3c8:	bfdc      	itt	le
    c3ca:	ea41 010c 	orrle.w	r1, r1, ip
    c3ce:	4090      	lslle	r0, r2
    c3d0:	1ae4      	subs	r4, r4, r3
    c3d2:	bfa2      	ittt	ge
    c3d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3d8:	4329      	orrge	r1, r5
    c3da:	bd30      	popge	{r4, r5, pc}
    c3dc:	ea6f 0404 	mvn.w	r4, r4
    c3e0:	3c1f      	subs	r4, #31
    c3e2:	da1c      	bge.n	c41e <__adddf3+0x1d2>
    c3e4:	340c      	adds	r4, #12
    c3e6:	dc0e      	bgt.n	c406 <__adddf3+0x1ba>
    c3e8:	f104 0414 	add.w	r4, r4, #20
    c3ec:	f1c4 0220 	rsb	r2, r4, #32
    c3f0:	fa20 f004 	lsr.w	r0, r0, r4
    c3f4:	fa01 f302 	lsl.w	r3, r1, r2
    c3f8:	ea40 0003 	orr.w	r0, r0, r3
    c3fc:	fa21 f304 	lsr.w	r3, r1, r4
    c400:	ea45 0103 	orr.w	r1, r5, r3
    c404:	bd30      	pop	{r4, r5, pc}
    c406:	f1c4 040c 	rsb	r4, r4, #12
    c40a:	f1c4 0220 	rsb	r2, r4, #32
    c40e:	fa20 f002 	lsr.w	r0, r0, r2
    c412:	fa01 f304 	lsl.w	r3, r1, r4
    c416:	ea40 0003 	orr.w	r0, r0, r3
    c41a:	4629      	mov	r1, r5
    c41c:	bd30      	pop	{r4, r5, pc}
    c41e:	fa21 f004 	lsr.w	r0, r1, r4
    c422:	4629      	mov	r1, r5
    c424:	bd30      	pop	{r4, r5, pc}
    c426:	f094 0f00 	teq	r4, #0
    c42a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c42e:	bf06      	itte	eq
    c430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c434:	3401      	addeq	r4, #1
    c436:	3d01      	subne	r5, #1
    c438:	e74e      	b.n	c2d8 <__adddf3+0x8c>
    c43a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c43e:	bf18      	it	ne
    c440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c444:	d029      	beq.n	c49a <__adddf3+0x24e>
    c446:	ea94 0f05 	teq	r4, r5
    c44a:	bf08      	it	eq
    c44c:	ea90 0f02 	teqeq	r0, r2
    c450:	d005      	beq.n	c45e <__adddf3+0x212>
    c452:	ea54 0c00 	orrs.w	ip, r4, r0
    c456:	bf04      	itt	eq
    c458:	4619      	moveq	r1, r3
    c45a:	4610      	moveq	r0, r2
    c45c:	bd30      	pop	{r4, r5, pc}
    c45e:	ea91 0f03 	teq	r1, r3
    c462:	bf1e      	ittt	ne
    c464:	2100      	movne	r1, #0
    c466:	2000      	movne	r0, #0
    c468:	bd30      	popne	{r4, r5, pc}
    c46a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c46e:	d105      	bne.n	c47c <__adddf3+0x230>
    c470:	0040      	lsls	r0, r0, #1
    c472:	4149      	adcs	r1, r1
    c474:	bf28      	it	cs
    c476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c47a:	bd30      	pop	{r4, r5, pc}
    c47c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c480:	bf3c      	itt	cc
    c482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c486:	bd30      	popcc	{r4, r5, pc}
    c488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c48c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c494:	f04f 0000 	mov.w	r0, #0
    c498:	bd30      	pop	{r4, r5, pc}
    c49a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c49e:	bf1a      	itte	ne
    c4a0:	4619      	movne	r1, r3
    c4a2:	4610      	movne	r0, r2
    c4a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c4a8:	bf1c      	itt	ne
    c4aa:	460b      	movne	r3, r1
    c4ac:	4602      	movne	r2, r0
    c4ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c4b2:	bf06      	itte	eq
    c4b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c4b8:	ea91 0f03 	teqeq	r1, r3
    c4bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4c0:	bd30      	pop	{r4, r5, pc}
    c4c2:	bf00      	nop

0000c4c4 <__aeabi_ui2d>:
    c4c4:	f090 0f00 	teq	r0, #0
    c4c8:	bf04      	itt	eq
    c4ca:	2100      	moveq	r1, #0
    c4cc:	4770      	bxeq	lr
    c4ce:	b530      	push	{r4, r5, lr}
    c4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d8:	f04f 0500 	mov.w	r5, #0
    c4dc:	f04f 0100 	mov.w	r1, #0
    c4e0:	e750      	b.n	c384 <__adddf3+0x138>
    c4e2:	bf00      	nop

0000c4e4 <__aeabi_i2d>:
    c4e4:	f090 0f00 	teq	r0, #0
    c4e8:	bf04      	itt	eq
    c4ea:	2100      	moveq	r1, #0
    c4ec:	4770      	bxeq	lr
    c4ee:	b530      	push	{r4, r5, lr}
    c4f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4fc:	bf48      	it	mi
    c4fe:	4240      	negmi	r0, r0
    c500:	f04f 0100 	mov.w	r1, #0
    c504:	e73e      	b.n	c384 <__adddf3+0x138>
    c506:	bf00      	nop

0000c508 <__aeabi_f2d>:
    c508:	0042      	lsls	r2, r0, #1
    c50a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c50e:	ea4f 0131 	mov.w	r1, r1, rrx
    c512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c516:	bf1f      	itttt	ne
    c518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c51c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c524:	4770      	bxne	lr
    c526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c52a:	bf08      	it	eq
    c52c:	4770      	bxeq	lr
    c52e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c532:	bf04      	itt	eq
    c534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c538:	4770      	bxeq	lr
    c53a:	b530      	push	{r4, r5, lr}
    c53c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c548:	e71c      	b.n	c384 <__adddf3+0x138>
    c54a:	bf00      	nop

0000c54c <__aeabi_ul2d>:
    c54c:	ea50 0201 	orrs.w	r2, r0, r1
    c550:	bf08      	it	eq
    c552:	4770      	bxeq	lr
    c554:	b530      	push	{r4, r5, lr}
    c556:	f04f 0500 	mov.w	r5, #0
    c55a:	e00a      	b.n	c572 <__aeabi_l2d+0x16>

0000c55c <__aeabi_l2d>:
    c55c:	ea50 0201 	orrs.w	r2, r0, r1
    c560:	bf08      	it	eq
    c562:	4770      	bxeq	lr
    c564:	b530      	push	{r4, r5, lr}
    c566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c56a:	d502      	bpl.n	c572 <__aeabi_l2d+0x16>
    c56c:	4240      	negs	r0, r0
    c56e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c57a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c57e:	f43f aed8 	beq.w	c332 <__adddf3+0xe6>
    c582:	f04f 0203 	mov.w	r2, #3
    c586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c58a:	bf18      	it	ne
    c58c:	3203      	addne	r2, #3
    c58e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c592:	bf18      	it	ne
    c594:	3203      	addne	r2, #3
    c596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c59a:	f1c2 0320 	rsb	r3, r2, #32
    c59e:	fa00 fc03 	lsl.w	ip, r0, r3
    c5a2:	fa20 f002 	lsr.w	r0, r0, r2
    c5a6:	fa01 fe03 	lsl.w	lr, r1, r3
    c5aa:	ea40 000e 	orr.w	r0, r0, lr
    c5ae:	fa21 f102 	lsr.w	r1, r1, r2
    c5b2:	4414      	add	r4, r2
    c5b4:	e6bd      	b.n	c332 <__adddf3+0xe6>
    c5b6:	bf00      	nop

0000c5b8 <__gedf2>:
    c5b8:	f04f 3cff 	mov.w	ip, #4294967295
    c5bc:	e006      	b.n	c5cc <__cmpdf2+0x4>
    c5be:	bf00      	nop

0000c5c0 <__ledf2>:
    c5c0:	f04f 0c01 	mov.w	ip, #1
    c5c4:	e002      	b.n	c5cc <__cmpdf2+0x4>
    c5c6:	bf00      	nop

0000c5c8 <__cmpdf2>:
    c5c8:	f04f 0c01 	mov.w	ip, #1
    c5cc:	f84d cd04 	str.w	ip, [sp, #-4]!
    c5d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c5d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c5d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c5dc:	bf18      	it	ne
    c5de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    c5e2:	d01b      	beq.n	c61c <__cmpdf2+0x54>
    c5e4:	b001      	add	sp, #4
    c5e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    c5ea:	bf0c      	ite	eq
    c5ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    c5f0:	ea91 0f03 	teqne	r1, r3
    c5f4:	bf02      	ittt	eq
    c5f6:	ea90 0f02 	teqeq	r0, r2
    c5fa:	2000      	moveq	r0, #0
    c5fc:	4770      	bxeq	lr
    c5fe:	f110 0f00 	cmn.w	r0, #0
    c602:	ea91 0f03 	teq	r1, r3
    c606:	bf58      	it	pl
    c608:	4299      	cmppl	r1, r3
    c60a:	bf08      	it	eq
    c60c:	4290      	cmpeq	r0, r2
    c60e:	bf2c      	ite	cs
    c610:	17d8      	asrcs	r0, r3, #31
    c612:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    c616:	f040 0001 	orr.w	r0, r0, #1
    c61a:	4770      	bx	lr
    c61c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c624:	d102      	bne.n	c62c <__cmpdf2+0x64>
    c626:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    c62a:	d107      	bne.n	c63c <__cmpdf2+0x74>
    c62c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c630:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c634:	d1d6      	bne.n	c5e4 <__cmpdf2+0x1c>
    c636:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    c63a:	d0d3      	beq.n	c5e4 <__cmpdf2+0x1c>
    c63c:	f85d 0b04 	ldr.w	r0, [sp], #4
    c640:	4770      	bx	lr
    c642:	bf00      	nop

0000c644 <__aeabi_cdrcmple>:
    c644:	4684      	mov	ip, r0
    c646:	4610      	mov	r0, r2
    c648:	4662      	mov	r2, ip
    c64a:	468c      	mov	ip, r1
    c64c:	4619      	mov	r1, r3
    c64e:	4663      	mov	r3, ip
    c650:	e000      	b.n	c654 <__aeabi_cdcmpeq>
    c652:	bf00      	nop

0000c654 <__aeabi_cdcmpeq>:
    c654:	b501      	push	{r0, lr}
    c656:	f7ff ffb7 	bl	c5c8 <__cmpdf2>
    c65a:	2800      	cmp	r0, #0
    c65c:	bf48      	it	mi
    c65e:	f110 0f00 	cmnmi.w	r0, #0
    c662:	bd01      	pop	{r0, pc}

0000c664 <__aeabi_dcmpeq>:
    c664:	f84d ed08 	str.w	lr, [sp, #-8]!
    c668:	f7ff fff4 	bl	c654 <__aeabi_cdcmpeq>
    c66c:	bf0c      	ite	eq
    c66e:	2001      	moveq	r0, #1
    c670:	2000      	movne	r0, #0
    c672:	f85d fb08 	ldr.w	pc, [sp], #8
    c676:	bf00      	nop

0000c678 <__aeabi_dcmplt>:
    c678:	f84d ed08 	str.w	lr, [sp, #-8]!
    c67c:	f7ff ffea 	bl	c654 <__aeabi_cdcmpeq>
    c680:	bf34      	ite	cc
    c682:	2001      	movcc	r0, #1
    c684:	2000      	movcs	r0, #0
    c686:	f85d fb08 	ldr.w	pc, [sp], #8
    c68a:	bf00      	nop

0000c68c <__aeabi_dcmple>:
    c68c:	f84d ed08 	str.w	lr, [sp, #-8]!
    c690:	f7ff ffe0 	bl	c654 <__aeabi_cdcmpeq>
    c694:	bf94      	ite	ls
    c696:	2001      	movls	r0, #1
    c698:	2000      	movhi	r0, #0
    c69a:	f85d fb08 	ldr.w	pc, [sp], #8
    c69e:	bf00      	nop

0000c6a0 <__aeabi_dcmpge>:
    c6a0:	f84d ed08 	str.w	lr, [sp, #-8]!
    c6a4:	f7ff ffce 	bl	c644 <__aeabi_cdrcmple>
    c6a8:	bf94      	ite	ls
    c6aa:	2001      	movls	r0, #1
    c6ac:	2000      	movhi	r0, #0
    c6ae:	f85d fb08 	ldr.w	pc, [sp], #8
    c6b2:	bf00      	nop

0000c6b4 <__aeabi_dcmpgt>:
    c6b4:	f84d ed08 	str.w	lr, [sp, #-8]!
    c6b8:	f7ff ffc4 	bl	c644 <__aeabi_cdrcmple>
    c6bc:	bf34      	ite	cc
    c6be:	2001      	movcc	r0, #1
    c6c0:	2000      	movcs	r0, #0
    c6c2:	f85d fb08 	ldr.w	pc, [sp], #8
    c6c6:	bf00      	nop

0000c6c8 <__aeabi_d2iz>:
    c6c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c6cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c6d0:	d215      	bcs.n	c6fe <__aeabi_d2iz+0x36>
    c6d2:	d511      	bpl.n	c6f8 <__aeabi_d2iz+0x30>
    c6d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    c6d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c6dc:	d912      	bls.n	c704 <__aeabi_d2iz+0x3c>
    c6de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c6e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c6e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c6ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c6ee:	fa23 f002 	lsr.w	r0, r3, r2
    c6f2:	bf18      	it	ne
    c6f4:	4240      	negne	r0, r0
    c6f6:	4770      	bx	lr
    c6f8:	f04f 0000 	mov.w	r0, #0
    c6fc:	4770      	bx	lr
    c6fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c702:	d105      	bne.n	c710 <__aeabi_d2iz+0x48>
    c704:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    c708:	bf08      	it	eq
    c70a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    c70e:	4770      	bx	lr
    c710:	f04f 0000 	mov.w	r0, #0
    c714:	4770      	bx	lr
    c716:	bf00      	nop

0000c718 <__aeabi_d2f>:
    c718:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c71c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c720:	bf24      	itt	cs
    c722:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c726:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c72a:	d90d      	bls.n	c748 <__aeabi_d2f+0x30>
    c72c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c730:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c734:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c738:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c73c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c740:	bf08      	it	eq
    c742:	f020 0001 	biceq.w	r0, r0, #1
    c746:	4770      	bx	lr
    c748:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c74c:	d121      	bne.n	c792 <__aeabi_d2f+0x7a>
    c74e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c752:	bfbc      	itt	lt
    c754:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c758:	4770      	bxlt	lr
    c75a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c75e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c762:	f1c2 0218 	rsb	r2, r2, #24
    c766:	f1c2 0c20 	rsb	ip, r2, #32
    c76a:	fa10 f30c 	lsls.w	r3, r0, ip
    c76e:	fa20 f002 	lsr.w	r0, r0, r2
    c772:	bf18      	it	ne
    c774:	f040 0001 	orrne.w	r0, r0, #1
    c778:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c77c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c780:	fa03 fc0c 	lsl.w	ip, r3, ip
    c784:	ea40 000c 	orr.w	r0, r0, ip
    c788:	fa23 f302 	lsr.w	r3, r3, r2
    c78c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c790:	e7cc      	b.n	c72c <__aeabi_d2f+0x14>
    c792:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c796:	d107      	bne.n	c7a8 <__aeabi_d2f+0x90>
    c798:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c79c:	bf1e      	ittt	ne
    c79e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c7a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c7a6:	4770      	bxne	lr
    c7a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c7ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c7b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c7b4:	4770      	bx	lr
    c7b6:	bf00      	nop

0000c7b8 <__aeabi_ldivmod>:
    c7b8:	b97b      	cbnz	r3, c7da <__aeabi_ldivmod+0x22>
    c7ba:	b972      	cbnz	r2, c7da <__aeabi_ldivmod+0x22>
    c7bc:	2900      	cmp	r1, #0
    c7be:	bfbe      	ittt	lt
    c7c0:	2000      	movlt	r0, #0
    c7c2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    c7c6:	e006      	blt.n	c7d6 <__aeabi_ldivmod+0x1e>
    c7c8:	bf08      	it	eq
    c7ca:	2800      	cmpeq	r0, #0
    c7cc:	bf1c      	itt	ne
    c7ce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    c7d2:	f04f 30ff 	movne.w	r0, #4294967295
    c7d6:	f000 b9b7 	b.w	cb48 <__aeabi_idiv0>
    c7da:	f1ad 0c08 	sub.w	ip, sp, #8
    c7de:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c7e2:	2900      	cmp	r1, #0
    c7e4:	db09      	blt.n	c7fa <__aeabi_ldivmod+0x42>
    c7e6:	2b00      	cmp	r3, #0
    c7e8:	db1a      	blt.n	c820 <__aeabi_ldivmod+0x68>
    c7ea:	f000 f84d 	bl	c888 <__udivmoddi4>
    c7ee:	f8dd e004 	ldr.w	lr, [sp, #4]
    c7f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c7f6:	b004      	add	sp, #16
    c7f8:	4770      	bx	lr
    c7fa:	4240      	negs	r0, r0
    c7fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c800:	2b00      	cmp	r3, #0
    c802:	db1b      	blt.n	c83c <__aeabi_ldivmod+0x84>
    c804:	f000 f840 	bl	c888 <__udivmoddi4>
    c808:	f8dd e004 	ldr.w	lr, [sp, #4]
    c80c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c810:	b004      	add	sp, #16
    c812:	4240      	negs	r0, r0
    c814:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c818:	4252      	negs	r2, r2
    c81a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c81e:	4770      	bx	lr
    c820:	4252      	negs	r2, r2
    c822:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c826:	f000 f82f 	bl	c888 <__udivmoddi4>
    c82a:	f8dd e004 	ldr.w	lr, [sp, #4]
    c82e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c832:	b004      	add	sp, #16
    c834:	4240      	negs	r0, r0
    c836:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c83a:	4770      	bx	lr
    c83c:	4252      	negs	r2, r2
    c83e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c842:	f000 f821 	bl	c888 <__udivmoddi4>
    c846:	f8dd e004 	ldr.w	lr, [sp, #4]
    c84a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c84e:	b004      	add	sp, #16
    c850:	4252      	negs	r2, r2
    c852:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c856:	4770      	bx	lr

0000c858 <__aeabi_uldivmod>:
    c858:	b953      	cbnz	r3, c870 <__aeabi_uldivmod+0x18>
    c85a:	b94a      	cbnz	r2, c870 <__aeabi_uldivmod+0x18>
    c85c:	2900      	cmp	r1, #0
    c85e:	bf08      	it	eq
    c860:	2800      	cmpeq	r0, #0
    c862:	bf1c      	itt	ne
    c864:	f04f 31ff 	movne.w	r1, #4294967295
    c868:	f04f 30ff 	movne.w	r0, #4294967295
    c86c:	f000 b96c 	b.w	cb48 <__aeabi_idiv0>
    c870:	f1ad 0c08 	sub.w	ip, sp, #8
    c874:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c878:	f000 f806 	bl	c888 <__udivmoddi4>
    c87c:	f8dd e004 	ldr.w	lr, [sp, #4]
    c880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c884:	b004      	add	sp, #16
    c886:	4770      	bx	lr

0000c888 <__udivmoddi4>:
    c888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c88c:	9d08      	ldr	r5, [sp, #32]
    c88e:	4604      	mov	r4, r0
    c890:	4688      	mov	r8, r1
    c892:	2b00      	cmp	r3, #0
    c894:	d17d      	bne.n	c992 <__udivmoddi4+0x10a>
    c896:	428a      	cmp	r2, r1
    c898:	4617      	mov	r7, r2
    c89a:	d93f      	bls.n	c91c <__udivmoddi4+0x94>
    c89c:	fab2 f282 	clz	r2, r2
    c8a0:	b142      	cbz	r2, c8b4 <__udivmoddi4+0x2c>
    c8a2:	f1c2 0020 	rsb	r0, r2, #32
    c8a6:	4091      	lsls	r1, r2
    c8a8:	4097      	lsls	r7, r2
    c8aa:	fa24 f000 	lsr.w	r0, r4, r0
    c8ae:	4094      	lsls	r4, r2
    c8b0:	ea40 0801 	orr.w	r8, r0, r1
    c8b4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    c8b8:	0c23      	lsrs	r3, r4, #16
    c8ba:	fa1f fe87 	uxth.w	lr, r7
    c8be:	fbb8 f6fc 	udiv	r6, r8, ip
    c8c2:	fb0c 8116 	mls	r1, ip, r6, r8
    c8c6:	fb06 f00e 	mul.w	r0, r6, lr
    c8ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c8ce:	4298      	cmp	r0, r3
    c8d0:	d905      	bls.n	c8de <__udivmoddi4+0x56>
    c8d2:	18fb      	adds	r3, r7, r3
    c8d4:	d202      	bcs.n	c8dc <__udivmoddi4+0x54>
    c8d6:	4298      	cmp	r0, r3
    c8d8:	f200 8124 	bhi.w	cb24 <__udivmoddi4+0x29c>
    c8dc:	3e01      	subs	r6, #1
    c8de:	1a19      	subs	r1, r3, r0
    c8e0:	b2a3      	uxth	r3, r4
    c8e2:	fbb1 f0fc 	udiv	r0, r1, ip
    c8e6:	fb0c 1110 	mls	r1, ip, r0, r1
    c8ea:	fb00 fe0e 	mul.w	lr, r0, lr
    c8ee:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c8f2:	45a6      	cmp	lr, r4
    c8f4:	d905      	bls.n	c902 <__udivmoddi4+0x7a>
    c8f6:	193c      	adds	r4, r7, r4
    c8f8:	d202      	bcs.n	c900 <__udivmoddi4+0x78>
    c8fa:	45a6      	cmp	lr, r4
    c8fc:	f200 810f 	bhi.w	cb1e <__udivmoddi4+0x296>
    c900:	3801      	subs	r0, #1
    c902:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    c906:	eba4 040e 	sub.w	r4, r4, lr
    c90a:	2600      	movs	r6, #0
    c90c:	b11d      	cbz	r5, c916 <__udivmoddi4+0x8e>
    c90e:	40d4      	lsrs	r4, r2
    c910:	2300      	movs	r3, #0
    c912:	e9c5 4300 	strd	r4, r3, [r5]
    c916:	4631      	mov	r1, r6
    c918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c91c:	b902      	cbnz	r2, c920 <__udivmoddi4+0x98>
    c91e:	deff      	udf	#255	; 0xff
    c920:	fab2 f282 	clz	r2, r2
    c924:	2a00      	cmp	r2, #0
    c926:	d150      	bne.n	c9ca <__udivmoddi4+0x142>
    c928:	1bcb      	subs	r3, r1, r7
    c92a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c92e:	fa1f f887 	uxth.w	r8, r7
    c932:	2601      	movs	r6, #1
    c934:	0c21      	lsrs	r1, r4, #16
    c936:	fbb3 fcfe 	udiv	ip, r3, lr
    c93a:	fb0e 301c 	mls	r0, lr, ip, r3
    c93e:	460b      	mov	r3, r1
    c940:	fb08 f90c 	mul.w	r9, r8, ip
    c944:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c948:	4589      	cmp	r9, r1
    c94a:	d90a      	bls.n	c962 <__udivmoddi4+0xda>
    c94c:	1879      	adds	r1, r7, r1
    c94e:	bf2c      	ite	cs
    c950:	2301      	movcs	r3, #1
    c952:	2300      	movcc	r3, #0
    c954:	4589      	cmp	r9, r1
    c956:	d902      	bls.n	c95e <__udivmoddi4+0xd6>
    c958:	2b00      	cmp	r3, #0
    c95a:	f000 80d9 	beq.w	cb10 <__udivmoddi4+0x288>
    c95e:	f10c 3cff 	add.w	ip, ip, #4294967295
    c962:	eba1 0109 	sub.w	r1, r1, r9
    c966:	b2a3      	uxth	r3, r4
    c968:	fbb1 f0fe 	udiv	r0, r1, lr
    c96c:	fb0e 1110 	mls	r1, lr, r0, r1
    c970:	fb08 f800 	mul.w	r8, r8, r0
    c974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c978:	45a0      	cmp	r8, r4
    c97a:	d905      	bls.n	c988 <__udivmoddi4+0x100>
    c97c:	193c      	adds	r4, r7, r4
    c97e:	d202      	bcs.n	c986 <__udivmoddi4+0xfe>
    c980:	45a0      	cmp	r8, r4
    c982:	f200 80c9 	bhi.w	cb18 <__udivmoddi4+0x290>
    c986:	3801      	subs	r0, #1
    c988:	eba4 0408 	sub.w	r4, r4, r8
    c98c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c990:	e7bc      	b.n	c90c <__udivmoddi4+0x84>
    c992:	428b      	cmp	r3, r1
    c994:	d909      	bls.n	c9aa <__udivmoddi4+0x122>
    c996:	2d00      	cmp	r5, #0
    c998:	f000 80b1 	beq.w	cafe <__udivmoddi4+0x276>
    c99c:	2600      	movs	r6, #0
    c99e:	e9c5 0100 	strd	r0, r1, [r5]
    c9a2:	4630      	mov	r0, r6
    c9a4:	4631      	mov	r1, r6
    c9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c9aa:	fab3 f683 	clz	r6, r3
    c9ae:	2e00      	cmp	r6, #0
    c9b0:	d146      	bne.n	ca40 <__udivmoddi4+0x1b8>
    c9b2:	428b      	cmp	r3, r1
    c9b4:	f0c0 80a6 	bcc.w	cb04 <__udivmoddi4+0x27c>
    c9b8:	4282      	cmp	r2, r0
    c9ba:	f240 80a3 	bls.w	cb04 <__udivmoddi4+0x27c>
    c9be:	4630      	mov	r0, r6
    c9c0:	2d00      	cmp	r5, #0
    c9c2:	d0a8      	beq.n	c916 <__udivmoddi4+0x8e>
    c9c4:	e9c5 4800 	strd	r4, r8, [r5]
    c9c8:	e7a5      	b.n	c916 <__udivmoddi4+0x8e>
    c9ca:	4097      	lsls	r7, r2
    c9cc:	f1c2 0320 	rsb	r3, r2, #32
    c9d0:	fa01 f002 	lsl.w	r0, r1, r2
    c9d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c9d8:	40d9      	lsrs	r1, r3
    c9da:	fa24 f303 	lsr.w	r3, r4, r3
    c9de:	fa1f f887 	uxth.w	r8, r7
    c9e2:	4094      	lsls	r4, r2
    c9e4:	4303      	orrs	r3, r0
    c9e6:	fbb1 f0fe 	udiv	r0, r1, lr
    c9ea:	0c1e      	lsrs	r6, r3, #16
    c9ec:	fb0e 1110 	mls	r1, lr, r0, r1
    c9f0:	fb00 fc08 	mul.w	ip, r0, r8
    c9f4:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    c9f8:	458c      	cmp	ip, r1
    c9fa:	d909      	bls.n	ca10 <__udivmoddi4+0x188>
    c9fc:	1879      	adds	r1, r7, r1
    c9fe:	bf2c      	ite	cs
    ca00:	2601      	movcs	r6, #1
    ca02:	2600      	movcc	r6, #0
    ca04:	458c      	cmp	ip, r1
    ca06:	d902      	bls.n	ca0e <__udivmoddi4+0x186>
    ca08:	2e00      	cmp	r6, #0
    ca0a:	f000 8093 	beq.w	cb34 <__udivmoddi4+0x2ac>
    ca0e:	3801      	subs	r0, #1
    ca10:	eba1 010c 	sub.w	r1, r1, ip
    ca14:	b29b      	uxth	r3, r3
    ca16:	fbb1 f6fe 	udiv	r6, r1, lr
    ca1a:	fb0e 1116 	mls	r1, lr, r6, r1
    ca1e:	fb06 fc08 	mul.w	ip, r6, r8
    ca22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    ca26:	458c      	cmp	ip, r1
    ca28:	d905      	bls.n	ca36 <__udivmoddi4+0x1ae>
    ca2a:	1879      	adds	r1, r7, r1
    ca2c:	d202      	bcs.n	ca34 <__udivmoddi4+0x1ac>
    ca2e:	458c      	cmp	ip, r1
    ca30:	f200 8087 	bhi.w	cb42 <__udivmoddi4+0x2ba>
    ca34:	3e01      	subs	r6, #1
    ca36:	eba1 030c 	sub.w	r3, r1, ip
    ca3a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
    ca3e:	e779      	b.n	c934 <__udivmoddi4+0xac>
    ca40:	f1c6 0720 	rsb	r7, r6, #32
    ca44:	fa03 f406 	lsl.w	r4, r3, r6
    ca48:	fa02 fc06 	lsl.w	ip, r2, r6
    ca4c:	fa01 fe06 	lsl.w	lr, r1, r6
    ca50:	40fa      	lsrs	r2, r7
    ca52:	fa20 f807 	lsr.w	r8, r0, r7
    ca56:	40f9      	lsrs	r1, r7
    ca58:	fa00 f306 	lsl.w	r3, r0, r6
    ca5c:	4322      	orrs	r2, r4
    ca5e:	ea48 040e 	orr.w	r4, r8, lr
    ca62:	ea4f 4812 	mov.w	r8, r2, lsr #16
    ca66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    ca6a:	fa1f f982 	uxth.w	r9, r2
    ca6e:	fbb1 faf8 	udiv	sl, r1, r8
    ca72:	fb08 111a 	mls	r1, r8, sl, r1
    ca76:	fb0a f009 	mul.w	r0, sl, r9
    ca7a:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
    ca7e:	4570      	cmp	r0, lr
    ca80:	d90a      	bls.n	ca98 <__udivmoddi4+0x210>
    ca82:	eb12 0e0e 	adds.w	lr, r2, lr
    ca86:	bf2c      	ite	cs
    ca88:	2101      	movcs	r1, #1
    ca8a:	2100      	movcc	r1, #0
    ca8c:	4570      	cmp	r0, lr
    ca8e:	d901      	bls.n	ca94 <__udivmoddi4+0x20c>
    ca90:	2900      	cmp	r1, #0
    ca92:	d052      	beq.n	cb3a <__udivmoddi4+0x2b2>
    ca94:	f10a 3aff 	add.w	sl, sl, #4294967295
    ca98:	ebae 0e00 	sub.w	lr, lr, r0
    ca9c:	b2a4      	uxth	r4, r4
    ca9e:	fbbe f0f8 	udiv	r0, lr, r8
    caa2:	fb08 ee10 	mls	lr, r8, r0, lr
    caa6:	fb00 f909 	mul.w	r9, r0, r9
    caaa:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
    caae:	45f1      	cmp	r9, lr
    cab0:	d905      	bls.n	cabe <__udivmoddi4+0x236>
    cab2:	eb12 0e0e 	adds.w	lr, r2, lr
    cab6:	d201      	bcs.n	cabc <__udivmoddi4+0x234>
    cab8:	45f1      	cmp	r9, lr
    caba:	d838      	bhi.n	cb2e <__udivmoddi4+0x2a6>
    cabc:	3801      	subs	r0, #1
    cabe:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    cac2:	ebae 0e09 	sub.w	lr, lr, r9
    cac6:	fba0 890c 	umull	r8, r9, r0, ip
    caca:	45ce      	cmp	lr, r9
    cacc:	4641      	mov	r1, r8
    cace:	464c      	mov	r4, r9
    cad0:	d302      	bcc.n	cad8 <__udivmoddi4+0x250>
    cad2:	d106      	bne.n	cae2 <__udivmoddi4+0x25a>
    cad4:	4543      	cmp	r3, r8
    cad6:	d204      	bcs.n	cae2 <__udivmoddi4+0x25a>
    cad8:	3801      	subs	r0, #1
    cada:	ebb8 010c 	subs.w	r1, r8, ip
    cade:	eb69 0402 	sbc.w	r4, r9, r2
    cae2:	b315      	cbz	r5, cb2a <__udivmoddi4+0x2a2>
    cae4:	1a5a      	subs	r2, r3, r1
    cae6:	eb6e 0e04 	sbc.w	lr, lr, r4
    caea:	40f2      	lsrs	r2, r6
    caec:	fa0e f707 	lsl.w	r7, lr, r7
    caf0:	fa2e f306 	lsr.w	r3, lr, r6
    caf4:	2600      	movs	r6, #0
    caf6:	4317      	orrs	r7, r2
    caf8:	e9c5 7300 	strd	r7, r3, [r5]
    cafc:	e70b      	b.n	c916 <__udivmoddi4+0x8e>
    cafe:	462e      	mov	r6, r5
    cb00:	4628      	mov	r0, r5
    cb02:	e708      	b.n	c916 <__udivmoddi4+0x8e>
    cb04:	1a84      	subs	r4, r0, r2
    cb06:	eb61 0103 	sbc.w	r1, r1, r3
    cb0a:	2001      	movs	r0, #1
    cb0c:	4688      	mov	r8, r1
    cb0e:	e757      	b.n	c9c0 <__udivmoddi4+0x138>
    cb10:	f1ac 0c02 	sub.w	ip, ip, #2
    cb14:	4439      	add	r1, r7
    cb16:	e724      	b.n	c962 <__udivmoddi4+0xda>
    cb18:	3802      	subs	r0, #2
    cb1a:	443c      	add	r4, r7
    cb1c:	e734      	b.n	c988 <__udivmoddi4+0x100>
    cb1e:	3802      	subs	r0, #2
    cb20:	443c      	add	r4, r7
    cb22:	e6ee      	b.n	c902 <__udivmoddi4+0x7a>
    cb24:	3e02      	subs	r6, #2
    cb26:	443b      	add	r3, r7
    cb28:	e6d9      	b.n	c8de <__udivmoddi4+0x56>
    cb2a:	462e      	mov	r6, r5
    cb2c:	e6f3      	b.n	c916 <__udivmoddi4+0x8e>
    cb2e:	3802      	subs	r0, #2
    cb30:	4496      	add	lr, r2
    cb32:	e7c4      	b.n	cabe <__udivmoddi4+0x236>
    cb34:	3802      	subs	r0, #2
    cb36:	4439      	add	r1, r7
    cb38:	e76a      	b.n	ca10 <__udivmoddi4+0x188>
    cb3a:	f1aa 0a02 	sub.w	sl, sl, #2
    cb3e:	4496      	add	lr, r2
    cb40:	e7aa      	b.n	ca98 <__udivmoddi4+0x210>
    cb42:	3e02      	subs	r6, #2
    cb44:	4439      	add	r1, r7
    cb46:	e776      	b.n	ca36 <__udivmoddi4+0x1ae>

0000cb48 <__aeabi_idiv0>:
    cb48:	4770      	bx	lr
    cb4a:	bf00      	nop

0000cb4c <memcpy>:
    cb4c:	4684      	mov	ip, r0
    cb4e:	ea41 0300 	orr.w	r3, r1, r0
    cb52:	f013 0303 	ands.w	r3, r3, #3
    cb56:	d149      	bne.n	cbec <memcpy+0xa0>
    cb58:	3a40      	subs	r2, #64	; 0x40
    cb5a:	d323      	bcc.n	cba4 <memcpy+0x58>
    cb5c:	680b      	ldr	r3, [r1, #0]
    cb5e:	6003      	str	r3, [r0, #0]
    cb60:	684b      	ldr	r3, [r1, #4]
    cb62:	6043      	str	r3, [r0, #4]
    cb64:	688b      	ldr	r3, [r1, #8]
    cb66:	6083      	str	r3, [r0, #8]
    cb68:	68cb      	ldr	r3, [r1, #12]
    cb6a:	60c3      	str	r3, [r0, #12]
    cb6c:	690b      	ldr	r3, [r1, #16]
    cb6e:	6103      	str	r3, [r0, #16]
    cb70:	694b      	ldr	r3, [r1, #20]
    cb72:	6143      	str	r3, [r0, #20]
    cb74:	698b      	ldr	r3, [r1, #24]
    cb76:	6183      	str	r3, [r0, #24]
    cb78:	69cb      	ldr	r3, [r1, #28]
    cb7a:	61c3      	str	r3, [r0, #28]
    cb7c:	6a0b      	ldr	r3, [r1, #32]
    cb7e:	6203      	str	r3, [r0, #32]
    cb80:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    cb82:	6243      	str	r3, [r0, #36]	; 0x24
    cb84:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    cb86:	6283      	str	r3, [r0, #40]	; 0x28
    cb88:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    cb8a:	62c3      	str	r3, [r0, #44]	; 0x2c
    cb8c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    cb8e:	6303      	str	r3, [r0, #48]	; 0x30
    cb90:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    cb92:	6343      	str	r3, [r0, #52]	; 0x34
    cb94:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    cb96:	6383      	str	r3, [r0, #56]	; 0x38
    cb98:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    cb9a:	63c3      	str	r3, [r0, #60]	; 0x3c
    cb9c:	3040      	adds	r0, #64	; 0x40
    cb9e:	3140      	adds	r1, #64	; 0x40
    cba0:	3a40      	subs	r2, #64	; 0x40
    cba2:	d2db      	bcs.n	cb5c <memcpy+0x10>
    cba4:	3230      	adds	r2, #48	; 0x30
    cba6:	d30b      	bcc.n	cbc0 <memcpy+0x74>
    cba8:	680b      	ldr	r3, [r1, #0]
    cbaa:	6003      	str	r3, [r0, #0]
    cbac:	684b      	ldr	r3, [r1, #4]
    cbae:	6043      	str	r3, [r0, #4]
    cbb0:	688b      	ldr	r3, [r1, #8]
    cbb2:	6083      	str	r3, [r0, #8]
    cbb4:	68cb      	ldr	r3, [r1, #12]
    cbb6:	60c3      	str	r3, [r0, #12]
    cbb8:	3010      	adds	r0, #16
    cbba:	3110      	adds	r1, #16
    cbbc:	3a10      	subs	r2, #16
    cbbe:	d2f3      	bcs.n	cba8 <memcpy+0x5c>
    cbc0:	320c      	adds	r2, #12
    cbc2:	d305      	bcc.n	cbd0 <memcpy+0x84>
    cbc4:	f851 3b04 	ldr.w	r3, [r1], #4
    cbc8:	f840 3b04 	str.w	r3, [r0], #4
    cbcc:	3a04      	subs	r2, #4
    cbce:	d2f9      	bcs.n	cbc4 <memcpy+0x78>
    cbd0:	3204      	adds	r2, #4
    cbd2:	d008      	beq.n	cbe6 <memcpy+0x9a>
    cbd4:	07d2      	lsls	r2, r2, #31
    cbd6:	bf1c      	itt	ne
    cbd8:	f811 3b01 	ldrbne.w	r3, [r1], #1
    cbdc:	f800 3b01 	strbne.w	r3, [r0], #1
    cbe0:	d301      	bcc.n	cbe6 <memcpy+0x9a>
    cbe2:	880b      	ldrh	r3, [r1, #0]
    cbe4:	8003      	strh	r3, [r0, #0]
    cbe6:	4660      	mov	r0, ip
    cbe8:	4770      	bx	lr
    cbea:	bf00      	nop
    cbec:	2a08      	cmp	r2, #8
    cbee:	d313      	bcc.n	cc18 <memcpy+0xcc>
    cbf0:	078b      	lsls	r3, r1, #30
    cbf2:	d0b1      	beq.n	cb58 <memcpy+0xc>
    cbf4:	f010 0303 	ands.w	r3, r0, #3
    cbf8:	d0ae      	beq.n	cb58 <memcpy+0xc>
    cbfa:	f1c3 0304 	rsb	r3, r3, #4
    cbfe:	1ad2      	subs	r2, r2, r3
    cc00:	07db      	lsls	r3, r3, #31
    cc02:	bf1c      	itt	ne
    cc04:	f811 3b01 	ldrbne.w	r3, [r1], #1
    cc08:	f800 3b01 	strbne.w	r3, [r0], #1
    cc0c:	d3a4      	bcc.n	cb58 <memcpy+0xc>
    cc0e:	f831 3b02 	ldrh.w	r3, [r1], #2
    cc12:	f820 3b02 	strh.w	r3, [r0], #2
    cc16:	e79f      	b.n	cb58 <memcpy+0xc>
    cc18:	3a04      	subs	r2, #4
    cc1a:	d3d9      	bcc.n	cbd0 <memcpy+0x84>
    cc1c:	3a01      	subs	r2, #1
    cc1e:	f811 3b01 	ldrb.w	r3, [r1], #1
    cc22:	f800 3b01 	strb.w	r3, [r0], #1
    cc26:	d2f9      	bcs.n	cc1c <memcpy+0xd0>
    cc28:	780b      	ldrb	r3, [r1, #0]
    cc2a:	7003      	strb	r3, [r0, #0]
    cc2c:	784b      	ldrb	r3, [r1, #1]
    cc2e:	7043      	strb	r3, [r0, #1]
    cc30:	788b      	ldrb	r3, [r1, #2]
    cc32:	7083      	strb	r3, [r0, #2]
    cc34:	4660      	mov	r0, ip
    cc36:	4770      	bx	lr

0000cc38 <strcmp>:
    cc38:	ea80 0c01 	eor.w	ip, r0, r1
    cc3c:	f01c 0f03 	tst.w	ip, #3
    cc40:	d137      	bne.n	ccb2 <strcmp+0x7a>
    cc42:	f010 0c03 	ands.w	ip, r0, #3
    cc46:	f020 0003 	bic.w	r0, r0, #3
    cc4a:	f021 0103 	bic.w	r1, r1, #3
    cc4e:	f850 2b04 	ldr.w	r2, [r0], #4
    cc52:	bf08      	it	eq
    cc54:	f851 3b04 	ldreq.w	r3, [r1], #4
    cc58:	d00e      	beq.n	cc78 <strcmp+0x40>
    cc5a:	f08c 0c03 	eor.w	ip, ip, #3
    cc5e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    cc62:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    cc66:	fa23 fc0c 	lsr.w	ip, r3, ip
    cc6a:	f851 3b04 	ldr.w	r3, [r1], #4
    cc6e:	ea42 020c 	orr.w	r2, r2, ip
    cc72:	ea43 030c 	orr.w	r3, r3, ip
    cc76:	bf00      	nop
    cc78:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    cc7c:	429a      	cmp	r2, r3
    cc7e:	bf01      	itttt	eq
    cc80:	ea2c 0c02 	biceq.w	ip, ip, r2
    cc84:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
    cc88:	f850 2b04 	ldreq.w	r2, [r0], #4
    cc8c:	f851 3b04 	ldreq.w	r3, [r1], #4
    cc90:	d0f2      	beq.n	cc78 <strcmp+0x40>
    cc92:	ea4f 6002 	mov.w	r0, r2, lsl #24
    cc96:	ea4f 2212 	mov.w	r2, r2, lsr #8
    cc9a:	2801      	cmp	r0, #1
    cc9c:	bf28      	it	cs
    cc9e:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
    cca2:	bf08      	it	eq
    cca4:	0a1b      	lsreq	r3, r3, #8
    cca6:	d0f4      	beq.n	cc92 <strcmp+0x5a>
    cca8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    ccac:	0e00      	lsrs	r0, r0, #24
    ccae:	1ac0      	subs	r0, r0, r3
    ccb0:	4770      	bx	lr
    ccb2:	f010 0f03 	tst.w	r0, #3
    ccb6:	d00a      	beq.n	ccce <strcmp+0x96>
    ccb8:	f810 2b01 	ldrb.w	r2, [r0], #1
    ccbc:	f811 3b01 	ldrb.w	r3, [r1], #1
    ccc0:	2a01      	cmp	r2, #1
    ccc2:	bf28      	it	cs
    ccc4:	429a      	cmpcs	r2, r3
    ccc6:	d0f4      	beq.n	ccb2 <strcmp+0x7a>
    ccc8:	eba2 0003 	sub.w	r0, r2, r3
    cccc:	4770      	bx	lr
    ccce:	f84d 5d04 	str.w	r5, [sp, #-4]!
    ccd2:	f850 2b04 	ldr.w	r2, [r0], #4
    ccd6:	f001 0503 	and.w	r5, r1, #3
    ccda:	f021 0103 	bic.w	r1, r1, #3
    ccde:	f851 3b04 	ldr.w	r3, [r1], #4
    cce2:	2d02      	cmp	r5, #2
    cce4:	d026      	beq.n	cd34 <strcmp+0xfc>
    cce6:	d84d      	bhi.n	cd84 <strcmp+0x14c>
    cce8:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
    ccec:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
    ccf0:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    ccf4:	ea2c 0c02 	bic.w	ip, ip, r2
    ccf8:	d10d      	bne.n	cd16 <strcmp+0xde>
    ccfa:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    ccfe:	bf08      	it	eq
    cd00:	f851 3b04 	ldreq.w	r3, [r1], #4
    cd04:	d10a      	bne.n	cd1c <strcmp+0xe4>
    cd06:	ea85 0502 	eor.w	r5, r5, r2
    cd0a:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
    cd0e:	d10c      	bne.n	cd2a <strcmp+0xf2>
    cd10:	f850 2b04 	ldr.w	r2, [r0], #4
    cd14:	e7e8      	b.n	cce8 <strcmp+0xb0>
    cd16:	ea4f 2313 	mov.w	r3, r3, lsr #8
    cd1a:	e05b      	b.n	cdd4 <strcmp+0x19c>
    cd1c:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
    cd20:	d154      	bne.n	cdcc <strcmp+0x194>
    cd22:	780b      	ldrb	r3, [r1, #0]
    cd24:	ea4f 6512 	mov.w	r5, r2, lsr #24
    cd28:	e054      	b.n	cdd4 <strcmp+0x19c>
    cd2a:	ea4f 6512 	mov.w	r5, r2, lsr #24
    cd2e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    cd32:	e04f      	b.n	cdd4 <strcmp+0x19c>
    cd34:	ea4f 4502 	mov.w	r5, r2, lsl #16
    cd38:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    cd3c:	ea4f 4515 	mov.w	r5, r5, lsr #16
    cd40:	ea2c 0c02 	bic.w	ip, ip, r2
    cd44:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
    cd48:	d118      	bne.n	cd7c <strcmp+0x144>
    cd4a:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    cd4e:	bf08      	it	eq
    cd50:	f851 3b04 	ldreq.w	r3, [r1], #4
    cd54:	d107      	bne.n	cd66 <strcmp+0x12e>
    cd56:	ea85 0502 	eor.w	r5, r5, r2
    cd5a:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
    cd5e:	d109      	bne.n	cd74 <strcmp+0x13c>
    cd60:	f850 2b04 	ldr.w	r2, [r0], #4
    cd64:	e7e6      	b.n	cd34 <strcmp+0xfc>
    cd66:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
    cd6a:	d12f      	bne.n	cdcc <strcmp+0x194>
    cd6c:	880b      	ldrh	r3, [r1, #0]
    cd6e:	ea4f 4512 	mov.w	r5, r2, lsr #16
    cd72:	e02f      	b.n	cdd4 <strcmp+0x19c>
    cd74:	ea4f 4303 	mov.w	r3, r3, lsl #16
    cd78:	ea4f 4512 	mov.w	r5, r2, lsr #16
    cd7c:	ea4f 4313 	mov.w	r3, r3, lsr #16
    cd80:	e028      	b.n	cdd4 <strcmp+0x19c>
    cd82:	bf00      	nop
    cd84:	f002 05ff 	and.w	r5, r2, #255	; 0xff
    cd88:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
    cd8c:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    cd90:	ea2c 0c02 	bic.w	ip, ip, r2
    cd94:	d10d      	bne.n	cdb2 <strcmp+0x17a>
    cd96:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    cd9a:	bf08      	it	eq
    cd9c:	f851 3b04 	ldreq.w	r3, [r1], #4
    cda0:	d10a      	bne.n	cdb8 <strcmp+0x180>
    cda2:	ea85 0502 	eor.w	r5, r5, r2
    cda6:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
    cdaa:	d10a      	bne.n	cdc2 <strcmp+0x18a>
    cdac:	f850 2b04 	ldr.w	r2, [r0], #4
    cdb0:	e7e8      	b.n	cd84 <strcmp+0x14c>
    cdb2:	ea4f 6313 	mov.w	r3, r3, lsr #24
    cdb6:	e00d      	b.n	cdd4 <strcmp+0x19c>
    cdb8:	f012 0fff 	tst.w	r2, #255	; 0xff
    cdbc:	d006      	beq.n	cdcc <strcmp+0x194>
    cdbe:	f851 3b04 	ldr.w	r3, [r1], #4
    cdc2:	ea4f 2512 	mov.w	r5, r2, lsr #8
    cdc6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cdca:	e003      	b.n	cdd4 <strcmp+0x19c>
    cdcc:	f04f 0000 	mov.w	r0, #0
    cdd0:	bc20      	pop	{r5}
    cdd2:	4770      	bx	lr
    cdd4:	f005 02ff 	and.w	r2, r5, #255	; 0xff
    cdd8:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    cddc:	2801      	cmp	r0, #1
    cdde:	bf28      	it	cs
    cde0:	4290      	cmpcs	r0, r2
    cde2:	bf04      	itt	eq
    cde4:	0a2d      	lsreq	r5, r5, #8
    cde6:	0a1b      	lsreq	r3, r3, #8
    cde8:	d0f4      	beq.n	cdd4 <strcmp+0x19c>
    cdea:	eba2 0000 	sub.w	r0, r2, r0
    cdee:	bc20      	pop	{r5}
    cdf0:	4770      	bx	lr
    cdf2:	bf00      	nop

0000cdf4 <__aeabi_dmul>:
    cdf4:	b570      	push	{r4, r5, r6, lr}
    cdf6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cdfa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    cdfe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    ce02:	bf1d      	ittte	ne
    ce04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    ce08:	ea94 0f0c 	teqne	r4, ip
    ce0c:	ea95 0f0c 	teqne	r5, ip
    ce10:	f000 f8de 	bleq	cfd0 <__aeabi_dmul+0x1dc>
    ce14:	442c      	add	r4, r5
    ce16:	ea81 0603 	eor.w	r6, r1, r3
    ce1a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    ce1e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    ce22:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    ce26:	bf18      	it	ne
    ce28:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    ce2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ce30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ce34:	d038      	beq.n	cea8 <__aeabi_dmul+0xb4>
    ce36:	fba0 ce02 	umull	ip, lr, r0, r2
    ce3a:	f04f 0500 	mov.w	r5, #0
    ce3e:	fbe1 e502 	umlal	lr, r5, r1, r2
    ce42:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    ce46:	fbe0 e503 	umlal	lr, r5, r0, r3
    ce4a:	f04f 0600 	mov.w	r6, #0
    ce4e:	fbe1 5603 	umlal	r5, r6, r1, r3
    ce52:	f09c 0f00 	teq	ip, #0
    ce56:	bf18      	it	ne
    ce58:	f04e 0e01 	orrne.w	lr, lr, #1
    ce5c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    ce60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    ce64:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    ce68:	d204      	bcs.n	ce74 <__aeabi_dmul+0x80>
    ce6a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    ce6e:	416d      	adcs	r5, r5
    ce70:	eb46 0606 	adc.w	r6, r6, r6
    ce74:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    ce78:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    ce7c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    ce80:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    ce84:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    ce88:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    ce8c:	bf88      	it	hi
    ce8e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    ce92:	d81e      	bhi.n	ced2 <__aeabi_dmul+0xde>
    ce94:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    ce98:	bf08      	it	eq
    ce9a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    ce9e:	f150 0000 	adcs.w	r0, r0, #0
    cea2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    cea6:	bd70      	pop	{r4, r5, r6, pc}
    cea8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    ceac:	ea46 0101 	orr.w	r1, r6, r1
    ceb0:	ea40 0002 	orr.w	r0, r0, r2
    ceb4:	ea81 0103 	eor.w	r1, r1, r3
    ceb8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    cebc:	bfc2      	ittt	gt
    cebe:	ebd4 050c 	rsbsgt	r5, r4, ip
    cec2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    cec6:	bd70      	popgt	{r4, r5, r6, pc}
    cec8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cecc:	f04f 0e00 	mov.w	lr, #0
    ced0:	3c01      	subs	r4, #1
    ced2:	f300 80ab 	bgt.w	d02c <__aeabi_dmul+0x238>
    ced6:	f114 0f36 	cmn.w	r4, #54	; 0x36
    ceda:	bfde      	ittt	le
    cedc:	2000      	movle	r0, #0
    cede:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    cee2:	bd70      	pople	{r4, r5, r6, pc}
    cee4:	f1c4 0400 	rsb	r4, r4, #0
    cee8:	3c20      	subs	r4, #32
    ceea:	da35      	bge.n	cf58 <__aeabi_dmul+0x164>
    ceec:	340c      	adds	r4, #12
    ceee:	dc1b      	bgt.n	cf28 <__aeabi_dmul+0x134>
    cef0:	f104 0414 	add.w	r4, r4, #20
    cef4:	f1c4 0520 	rsb	r5, r4, #32
    cef8:	fa00 f305 	lsl.w	r3, r0, r5
    cefc:	fa20 f004 	lsr.w	r0, r0, r4
    cf00:	fa01 f205 	lsl.w	r2, r1, r5
    cf04:	ea40 0002 	orr.w	r0, r0, r2
    cf08:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    cf0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    cf10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    cf14:	fa21 f604 	lsr.w	r6, r1, r4
    cf18:	eb42 0106 	adc.w	r1, r2, r6
    cf1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cf20:	bf08      	it	eq
    cf22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cf26:	bd70      	pop	{r4, r5, r6, pc}
    cf28:	f1c4 040c 	rsb	r4, r4, #12
    cf2c:	f1c4 0520 	rsb	r5, r4, #32
    cf30:	fa00 f304 	lsl.w	r3, r0, r4
    cf34:	fa20 f005 	lsr.w	r0, r0, r5
    cf38:	fa01 f204 	lsl.w	r2, r1, r4
    cf3c:	ea40 0002 	orr.w	r0, r0, r2
    cf40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cf44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    cf48:	f141 0100 	adc.w	r1, r1, #0
    cf4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cf50:	bf08      	it	eq
    cf52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cf56:	bd70      	pop	{r4, r5, r6, pc}
    cf58:	f1c4 0520 	rsb	r5, r4, #32
    cf5c:	fa00 f205 	lsl.w	r2, r0, r5
    cf60:	ea4e 0e02 	orr.w	lr, lr, r2
    cf64:	fa20 f304 	lsr.w	r3, r0, r4
    cf68:	fa01 f205 	lsl.w	r2, r1, r5
    cf6c:	ea43 0302 	orr.w	r3, r3, r2
    cf70:	fa21 f004 	lsr.w	r0, r1, r4
    cf74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cf78:	fa21 f204 	lsr.w	r2, r1, r4
    cf7c:	ea20 0002 	bic.w	r0, r0, r2
    cf80:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    cf84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cf88:	bf08      	it	eq
    cf8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cf8e:	bd70      	pop	{r4, r5, r6, pc}
    cf90:	f094 0f00 	teq	r4, #0
    cf94:	d10f      	bne.n	cfb6 <__aeabi_dmul+0x1c2>
    cf96:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    cf9a:	0040      	lsls	r0, r0, #1
    cf9c:	eb41 0101 	adc.w	r1, r1, r1
    cfa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cfa4:	bf08      	it	eq
    cfa6:	3c01      	subeq	r4, #1
    cfa8:	d0f7      	beq.n	cf9a <__aeabi_dmul+0x1a6>
    cfaa:	ea41 0106 	orr.w	r1, r1, r6
    cfae:	f095 0f00 	teq	r5, #0
    cfb2:	bf18      	it	ne
    cfb4:	4770      	bxne	lr
    cfb6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    cfba:	0052      	lsls	r2, r2, #1
    cfbc:	eb43 0303 	adc.w	r3, r3, r3
    cfc0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    cfc4:	bf08      	it	eq
    cfc6:	3d01      	subeq	r5, #1
    cfc8:	d0f7      	beq.n	cfba <__aeabi_dmul+0x1c6>
    cfca:	ea43 0306 	orr.w	r3, r3, r6
    cfce:	4770      	bx	lr
    cfd0:	ea94 0f0c 	teq	r4, ip
    cfd4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    cfd8:	bf18      	it	ne
    cfda:	ea95 0f0c 	teqne	r5, ip
    cfde:	d00c      	beq.n	cffa <__aeabi_dmul+0x206>
    cfe0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cfe4:	bf18      	it	ne
    cfe6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cfea:	d1d1      	bne.n	cf90 <__aeabi_dmul+0x19c>
    cfec:	ea81 0103 	eor.w	r1, r1, r3
    cff0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cff4:	f04f 0000 	mov.w	r0, #0
    cff8:	bd70      	pop	{r4, r5, r6, pc}
    cffa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cffe:	bf06      	itte	eq
    d000:	4610      	moveq	r0, r2
    d002:	4619      	moveq	r1, r3
    d004:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d008:	d019      	beq.n	d03e <__aeabi_dmul+0x24a>
    d00a:	ea94 0f0c 	teq	r4, ip
    d00e:	d102      	bne.n	d016 <__aeabi_dmul+0x222>
    d010:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    d014:	d113      	bne.n	d03e <__aeabi_dmul+0x24a>
    d016:	ea95 0f0c 	teq	r5, ip
    d01a:	d105      	bne.n	d028 <__aeabi_dmul+0x234>
    d01c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    d020:	bf1c      	itt	ne
    d022:	4610      	movne	r0, r2
    d024:	4619      	movne	r1, r3
    d026:	d10a      	bne.n	d03e <__aeabi_dmul+0x24a>
    d028:	ea81 0103 	eor.w	r1, r1, r3
    d02c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d030:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d034:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d038:	f04f 0000 	mov.w	r0, #0
    d03c:	bd70      	pop	{r4, r5, r6, pc}
    d03e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d042:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    d046:	bd70      	pop	{r4, r5, r6, pc}

0000d048 <__aeabi_ddiv>:
    d048:	b570      	push	{r4, r5, r6, lr}
    d04a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d04e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    d052:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    d056:	bf1d      	ittte	ne
    d058:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    d05c:	ea94 0f0c 	teqne	r4, ip
    d060:	ea95 0f0c 	teqne	r5, ip
    d064:	f000 f8a7 	bleq	d1b6 <__aeabi_ddiv+0x16e>
    d068:	eba4 0405 	sub.w	r4, r4, r5
    d06c:	ea81 0e03 	eor.w	lr, r1, r3
    d070:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d074:	ea4f 3101 	mov.w	r1, r1, lsl #12
    d078:	f000 8088 	beq.w	d18c <__aeabi_ddiv+0x144>
    d07c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    d080:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d084:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    d088:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    d08c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    d090:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    d094:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    d098:	ea4f 2600 	mov.w	r6, r0, lsl #8
    d09c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    d0a0:	429d      	cmp	r5, r3
    d0a2:	bf08      	it	eq
    d0a4:	4296      	cmpeq	r6, r2
    d0a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    d0aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
    d0ae:	d202      	bcs.n	d0b6 <__aeabi_ddiv+0x6e>
    d0b0:	085b      	lsrs	r3, r3, #1
    d0b2:	ea4f 0232 	mov.w	r2, r2, rrx
    d0b6:	1ab6      	subs	r6, r6, r2
    d0b8:	eb65 0503 	sbc.w	r5, r5, r3
    d0bc:	085b      	lsrs	r3, r3, #1
    d0be:	ea4f 0232 	mov.w	r2, r2, rrx
    d0c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    d0c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    d0ca:	ebb6 0e02 	subs.w	lr, r6, r2
    d0ce:	eb75 0e03 	sbcs.w	lr, r5, r3
    d0d2:	bf22      	ittt	cs
    d0d4:	1ab6      	subcs	r6, r6, r2
    d0d6:	4675      	movcs	r5, lr
    d0d8:	ea40 000c 	orrcs.w	r0, r0, ip
    d0dc:	085b      	lsrs	r3, r3, #1
    d0de:	ea4f 0232 	mov.w	r2, r2, rrx
    d0e2:	ebb6 0e02 	subs.w	lr, r6, r2
    d0e6:	eb75 0e03 	sbcs.w	lr, r5, r3
    d0ea:	bf22      	ittt	cs
    d0ec:	1ab6      	subcs	r6, r6, r2
    d0ee:	4675      	movcs	r5, lr
    d0f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    d0f4:	085b      	lsrs	r3, r3, #1
    d0f6:	ea4f 0232 	mov.w	r2, r2, rrx
    d0fa:	ebb6 0e02 	subs.w	lr, r6, r2
    d0fe:	eb75 0e03 	sbcs.w	lr, r5, r3
    d102:	bf22      	ittt	cs
    d104:	1ab6      	subcs	r6, r6, r2
    d106:	4675      	movcs	r5, lr
    d108:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    d10c:	085b      	lsrs	r3, r3, #1
    d10e:	ea4f 0232 	mov.w	r2, r2, rrx
    d112:	ebb6 0e02 	subs.w	lr, r6, r2
    d116:	eb75 0e03 	sbcs.w	lr, r5, r3
    d11a:	bf22      	ittt	cs
    d11c:	1ab6      	subcs	r6, r6, r2
    d11e:	4675      	movcs	r5, lr
    d120:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    d124:	ea55 0e06 	orrs.w	lr, r5, r6
    d128:	d018      	beq.n	d15c <__aeabi_ddiv+0x114>
    d12a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    d12e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    d132:	ea4f 1606 	mov.w	r6, r6, lsl #4
    d136:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    d13a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    d13e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    d142:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    d146:	d1c0      	bne.n	d0ca <__aeabi_ddiv+0x82>
    d148:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d14c:	d10b      	bne.n	d166 <__aeabi_ddiv+0x11e>
    d14e:	ea41 0100 	orr.w	r1, r1, r0
    d152:	f04f 0000 	mov.w	r0, #0
    d156:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    d15a:	e7b6      	b.n	d0ca <__aeabi_ddiv+0x82>
    d15c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d160:	bf04      	itt	eq
    d162:	4301      	orreq	r1, r0
    d164:	2000      	moveq	r0, #0
    d166:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    d16a:	bf88      	it	hi
    d16c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    d170:	f63f aeaf 	bhi.w	ced2 <__aeabi_dmul+0xde>
    d174:	ebb5 0c03 	subs.w	ip, r5, r3
    d178:	bf04      	itt	eq
    d17a:	ebb6 0c02 	subseq.w	ip, r6, r2
    d17e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    d182:	f150 0000 	adcs.w	r0, r0, #0
    d186:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d18a:	bd70      	pop	{r4, r5, r6, pc}
    d18c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    d190:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    d194:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    d198:	bfc2      	ittt	gt
    d19a:	ebd4 050c 	rsbsgt	r5, r4, ip
    d19e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    d1a2:	bd70      	popgt	{r4, r5, r6, pc}
    d1a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d1a8:	f04f 0e00 	mov.w	lr, #0
    d1ac:	3c01      	subs	r4, #1
    d1ae:	e690      	b.n	ced2 <__aeabi_dmul+0xde>
    d1b0:	ea45 0e06 	orr.w	lr, r5, r6
    d1b4:	e68d      	b.n	ced2 <__aeabi_dmul+0xde>
    d1b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    d1ba:	ea94 0f0c 	teq	r4, ip
    d1be:	bf08      	it	eq
    d1c0:	ea95 0f0c 	teqeq	r5, ip
    d1c4:	f43f af3b 	beq.w	d03e <__aeabi_dmul+0x24a>
    d1c8:	ea94 0f0c 	teq	r4, ip
    d1cc:	d10a      	bne.n	d1e4 <__aeabi_ddiv+0x19c>
    d1ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    d1d2:	f47f af34 	bne.w	d03e <__aeabi_dmul+0x24a>
    d1d6:	ea95 0f0c 	teq	r5, ip
    d1da:	f47f af25 	bne.w	d028 <__aeabi_dmul+0x234>
    d1de:	4610      	mov	r0, r2
    d1e0:	4619      	mov	r1, r3
    d1e2:	e72c      	b.n	d03e <__aeabi_dmul+0x24a>
    d1e4:	ea95 0f0c 	teq	r5, ip
    d1e8:	d106      	bne.n	d1f8 <__aeabi_ddiv+0x1b0>
    d1ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d1ee:	f43f aefd 	beq.w	cfec <__aeabi_dmul+0x1f8>
    d1f2:	4610      	mov	r0, r2
    d1f4:	4619      	mov	r1, r3
    d1f6:	e722      	b.n	d03e <__aeabi_dmul+0x24a>
    d1f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d1fc:	bf18      	it	ne
    d1fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d202:	f47f aec5 	bne.w	cf90 <__aeabi_dmul+0x19c>
    d206:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    d20a:	f47f af0d 	bne.w	d028 <__aeabi_dmul+0x234>
    d20e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    d212:	f47f aeeb 	bne.w	cfec <__aeabi_dmul+0x1f8>
    d216:	e712      	b.n	d03e <__aeabi_dmul+0x24a>

0000d218 <__aeabi_dcmpun>:
    d218:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    d21c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d220:	d102      	bne.n	d228 <__aeabi_dcmpun+0x10>
    d222:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    d226:	d10a      	bne.n	d23e <__aeabi_dcmpun+0x26>
    d228:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    d22c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d230:	d102      	bne.n	d238 <__aeabi_dcmpun+0x20>
    d232:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    d236:	d102      	bne.n	d23e <__aeabi_dcmpun+0x26>
    d238:	f04f 0000 	mov.w	r0, #0
    d23c:	4770      	bx	lr
    d23e:	f04f 0001 	mov.w	r0, #1
    d242:	4770      	bx	lr

0000d244 <__aeabi_d2uiz>:
    d244:	004a      	lsls	r2, r1, #1
    d246:	d211      	bcs.n	d26c <__aeabi_d2uiz+0x28>
    d248:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    d24c:	d211      	bcs.n	d272 <__aeabi_d2uiz+0x2e>
    d24e:	d50d      	bpl.n	d26c <__aeabi_d2uiz+0x28>
    d250:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    d254:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    d258:	d40e      	bmi.n	d278 <__aeabi_d2uiz+0x34>
    d25a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d25e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d262:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    d266:	fa23 f002 	lsr.w	r0, r3, r2
    d26a:	4770      	bx	lr
    d26c:	f04f 0000 	mov.w	r0, #0
    d270:	4770      	bx	lr
    d272:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    d276:	d102      	bne.n	d27e <__aeabi_d2uiz+0x3a>
    d278:	f04f 30ff 	mov.w	r0, #4294967295
    d27c:	4770      	bx	lr
    d27e:	f04f 0000 	mov.w	r0, #0
    d282:	4770      	bx	lr

0000d284 <__aeabi_d2lz>:
    d284:	b538      	push	{r3, r4, r5, lr}
    d286:	2200      	movs	r2, #0
    d288:	2300      	movs	r3, #0
    d28a:	4604      	mov	r4, r0
    d28c:	460d      	mov	r5, r1
    d28e:	f7ff f9f3 	bl	c678 <__aeabi_dcmplt>
    d292:	b928      	cbnz	r0, d2a0 <__aeabi_d2lz+0x1c>
    d294:	4620      	mov	r0, r4
    d296:	4629      	mov	r1, r5
    d298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d29c:	f000 b80a 	b.w	d2b4 <__aeabi_d2ulz>
    d2a0:	4620      	mov	r0, r4
    d2a2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
    d2a6:	f000 f805 	bl	d2b4 <__aeabi_d2ulz>
    d2aa:	4240      	negs	r0, r0
    d2ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d2b0:	bd38      	pop	{r3, r4, r5, pc}
    d2b2:	bf00      	nop

0000d2b4 <__aeabi_d2ulz>:
    d2b4:	b5d0      	push	{r4, r6, r7, lr}
    d2b6:	2200      	movs	r2, #0
    d2b8:	4b0b      	ldr	r3, [pc, #44]	; (d2e8 <__aeabi_d2ulz+0x34>)
    d2ba:	4606      	mov	r6, r0
    d2bc:	460f      	mov	r7, r1
    d2be:	f7ff fd99 	bl	cdf4 <__aeabi_dmul>
    d2c2:	f7ff ffbf 	bl	d244 <__aeabi_d2uiz>
    d2c6:	4604      	mov	r4, r0
    d2c8:	f7ff f8fc 	bl	c4c4 <__aeabi_ui2d>
    d2cc:	2200      	movs	r2, #0
    d2ce:	4b07      	ldr	r3, [pc, #28]	; (d2ec <__aeabi_d2ulz+0x38>)
    d2d0:	f7ff fd90 	bl	cdf4 <__aeabi_dmul>
    d2d4:	4602      	mov	r2, r0
    d2d6:	460b      	mov	r3, r1
    d2d8:	4630      	mov	r0, r6
    d2da:	4639      	mov	r1, r7
    d2dc:	f7fe ffb4 	bl	c248 <__aeabi_dsub>
    d2e0:	f7ff ffb0 	bl	d244 <__aeabi_d2uiz>
    d2e4:	4621      	mov	r1, r4
    d2e6:	bdd0      	pop	{r4, r6, r7, pc}
    d2e8:	3df00000 	.word	0x3df00000
    d2ec:	41f00000 	.word	0x41f00000

0000d2f0 <sntp_query>:

	return res;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
    d2f0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    d2f4:	4604      	mov	r4, r0
    d2f6:	b09a      	sub	sp, #104	; 0x68
    d2f8:	460f      	mov	r7, r1
    d2fa:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
    d2fc:	2100      	movs	r1, #0
    d2fe:	2230      	movs	r2, #48	; 0x30
    d300:	a802      	add	r0, sp, #8
    d302:	f019 f879 	bl	263f8 <memset>
	int ret = 0;

	if (!ctx || !time) {
    d306:	2c00      	cmp	r4, #0
    d308:	f000 8087 	beq.w	d41a <sntp_query+0x12a>
    d30c:	2e00      	cmp	r6, #0
    d30e:	f000 8084 	beq.w	d41a <sntp_query+0x12a>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
    d312:	231b      	movs	r3, #27
    d314:	f88d 3008 	strb.w	r3, [sp, #8]
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    d318:	f021 fc21 	bl	2eb5e <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    d31c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d320:	2500      	movs	r5, #0
    d322:	fba0 bc03 	umull	fp, ip, r0, r3
    d326:	fb03 cc01 	mla	ip, r3, r1, ip
    d32a:	ea4f 30db 	mov.w	r0, fp, lsr #15
	return time / MSEC_PER_SEC;
    d32e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d332:	2300      	movs	r3, #0
    d334:	4629      	mov	r1, r5
    d336:	ea40 404c 	orr.w	r0, r0, ip, lsl #17
    d33a:	f7ff fa8d 	bl	c858 <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
    d33e:	4a3c      	ldr	r2, [pc, #240]	; (d430 <sntp_query+0x140>)
    d340:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
    d342:	0a13      	lsrs	r3, r2, #8
    d344:	0211      	lsls	r1, r2, #8
    d346:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    d34a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    d34e:	430b      	orrs	r3, r1
    d350:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    d354:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
    d358:	68e0      	ldr	r0, [r4, #12]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
    d35a:	6122      	str	r2, [r4, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
    d35c:	930c      	str	r3, [sp, #48]	; 0x30
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
    d35e:	2230      	movs	r2, #48	; 0x30
    d360:	462b      	mov	r3, r5
    d362:	e9cd 5500 	strd	r5, r5, [sp]
    d366:	a902      	add	r1, sp, #8
    d368:	f01f fd9d 	bl	2cea6 <z_impl_zsock_sendto>
	if (ret < 0) {
    d36c:	2800      	cmp	r0, #0
    d36e:	db0f      	blt.n	d390 <sntp_query+0xa0>
	struct sntp_pkt buf = { 0 };
    d370:	4629      	mov	r1, r5
    d372:	2230      	movs	r2, #48	; 0x30
    d374:	a80e      	add	r0, sp, #56	; 0x38
    d376:	f019 f83f 	bl	263f8 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
    d37a:	68a1      	ldr	r1, [r4, #8]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
    d37c:	463a      	mov	r2, r7
    d37e:	4620      	mov	r0, r4
    d380:	f006 fb70 	bl	13a64 <z_impl_zsock_poll>
	if (status < 0) {
    d384:	42a8      	cmp	r0, r5
    d386:	da06      	bge.n	d396 <sntp_query+0xa6>
		return -errno;
    d388:	f01f fea1 	bl	2d0ce <__errno>
    d38c:	6800      	ldr	r0, [r0, #0]
    d38e:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
    d390:	b01a      	add	sp, #104	; 0x68
    d392:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
	if (status == 0) {
    d396:	d037      	beq.n	d408 <sntp_query+0x118>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
    d398:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
    d39a:	2230      	movs	r2, #48	; 0x30
    d39c:	462b      	mov	r3, r5
    d39e:	e9cd 5500 	strd	r5, r5, [sp]
    d3a2:	a90e      	add	r1, sp, #56	; 0x38
    d3a4:	f01f fdb2 	bl	2cf0c <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
    d3a8:	2800      	cmp	r0, #0
    d3aa:	dbed      	blt.n	d388 <sntp_query+0x98>
	if (rcvd != sizeof(struct sntp_pkt)) {
    d3ac:	2830      	cmp	r0, #48	; 0x30
    d3ae:	d12e      	bne.n	d40e <sntp_query+0x11e>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
    d3b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d3b2:	6922      	ldr	r2, [r4, #16]
    d3b4:	ba1b      	rev	r3, r3
    d3b6:	429a      	cmp	r2, r3
    d3b8:	d002      	beq.n	d3c0 <sntp_query+0xd0>
		return -EINVAL;
    d3ba:	f06f 0015 	mvn.w	r0, #21
    d3be:	e7e7      	b.n	d390 <sntp_query+0xa0>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
    d3c0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    d3c4:	f003 0307 	and.w	r3, r3, #7
    d3c8:	2b04      	cmp	r3, #4
    d3ca:	d1f6      	bne.n	d3ba <sntp_query+0xca>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
    d3cc:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    d3d0:	b303      	cbz	r3, d414 <sntp_query+0x124>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
    d3d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    d3d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d3d6:	ba1b      	rev	r3, r3
    d3d8:	ba12      	rev	r2, r2
    d3da:	ea53 0102 	orrs.w	r1, r3, r2
    d3de:	d0ec      	beq.n	d3ba <sntp_query+0xca>
	if (ts & 0x80000000) {
    d3e0:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
    d3e2:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
    d3e4:	da0c      	bge.n	d400 <sntp_query+0x110>
		if (ts >= OFFSET_1970_JAN_1) {
    d3e6:	4a13      	ldr	r2, [pc, #76]	; (d434 <sntp_query+0x144>)
    d3e8:	4293      	cmp	r3, r2
    d3ea:	d9e6      	bls.n	d3ba <sntp_query+0xca>
			time->seconds = ts - OFFSET_1970_JAN_1;
    d3ec:	a10c      	add	r1, pc, #48	; (adr r1, d420 <sntp_query+0x130>)
    d3ee:	e9d1 0100 	ldrd	r0, r1, [r1]
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
    d3f2:	18c0      	adds	r0, r0, r3
    d3f4:	f141 0100 	adc.w	r1, r1, #0
    d3f8:	e9c6 0100 	strd	r0, r1, [r6]
	return 0;
    d3fc:	2000      	movs	r0, #0
    d3fe:	e7c7      	b.n	d390 <sntp_query+0xa0>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
    d400:	a109      	add	r1, pc, #36	; (adr r1, d428 <sntp_query+0x138>)
    d402:	e9d1 0100 	ldrd	r0, r1, [r1]
    d406:	e7f4      	b.n	d3f2 <sntp_query+0x102>
		return -ETIMEDOUT;
    d408:	f06f 0073 	mvn.w	r0, #115	; 0x73
    d40c:	e7c0      	b.n	d390 <sntp_query+0xa0>
		return -EMSGSIZE;
    d40e:	f06f 0079 	mvn.w	r0, #121	; 0x79
    d412:	e7bd      	b.n	d390 <sntp_query+0xa0>
		return -EBUSY;
    d414:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
    d418:	e7ba      	b.n	d390 <sntp_query+0xa0>
		return -EFAULT;
    d41a:	f06f 000d 	mvn.w	r0, #13
    d41e:	e7b7      	b.n	d390 <sntp_query+0xa0>
    d420:	7c558180 	.word	0x7c558180
    d424:	ffffffff 	.word	0xffffffff
    d428:	7c558180 	.word	0x7c558180
    d42c:	00000000 	.word	0x00000000
    d430:	83aa7e80 	.word	0x83aa7e80
    d434:	83aa7e7f 	.word	0x83aa7e7f

0000d438 <at_handler>:

	return err;
}

static void at_handler(void *context, const char *response)
{
    d438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d43c:	ed2d 8b02 	vpush	{d8}
	int err;
	bool notify = false;
	enum lte_lc_notif_type notif_type;
	struct lte_lc_evt evt;

	if (response == NULL) {
    d440:	460e      	mov	r6, r1
{
    d442:	b08c      	sub	sp, #48	; 0x30
	if (response == NULL) {
    d444:	b971      	cbnz	r1, d464 <at_handler+0x2c>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    d446:	49b2      	ldr	r1, [pc, #712]	; (d710 <at_handler+0x2d8>)
    d448:	4bb2      	ldr	r3, [pc, #712]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Response buffer is NULL-pointer");
    d44a:	48b3      	ldr	r0, [pc, #716]	; (d718 <at_handler+0x2e0>)
    d44c:	1ac9      	subs	r1, r1, r3
    d44e:	08c9      	lsrs	r1, r1, #3
    d450:	0189      	lsls	r1, r1, #6
    d452:	f041 0101 	orr.w	r1, r1, #1
    d456:	f01f fa39 	bl	2c8cc <log_0>
	}

	if (evt_handler && notify) {
		evt_handler(&evt);
	}
}
    d45a:	b00c      	add	sp, #48	; 0x30
    d45c:	ecbd 8b02 	vpop	{d8}
    d460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    d464:	2700      	movs	r7, #0
    d466:	4cad      	ldr	r4, [pc, #692]	; (d71c <at_handler+0x2e4>)
		if (strncmp(at_notifs[i], notif,
    d468:	f854 5b04 	ldr.w	r5, [r4], #4
    d46c:	4628      	mov	r0, r5
    d46e:	f019 fbd3 	bl	26c18 <strlen>
    d472:	4631      	mov	r1, r6
    d474:	4602      	mov	r2, r0
    d476:	4628      	mov	r0, r5
    d478:	f019 fbfc 	bl	26c74 <strncmp>
    d47c:	4605      	mov	r5, r0
    d47e:	bb60      	cbnz	r0, d4da <at_handler+0xa2>
	switch (notif_type) {
    d480:	2f01      	cmp	r7, #1
			*type = i;
    d482:	b2fb      	uxtb	r3, r7
	switch (notif_type) {
    d484:	f000 8107 	beq.w	d696 <at_handler+0x25e>
    d488:	2b02      	cmp	r3, #2
    d48a:	f000 818d 	beq.w	d7a8 <at_handler+0x370>
	size_t len = sizeof(str_buf) - 1;
    d48e:	f04f 0809 	mov.w	r8, #9
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    d492:	210a      	movs	r1, #10
    d494:	a807      	add	r0, sp, #28
	size_t len = sizeof(str_buf) - 1;
    d496:	f8cd 8008 	str.w	r8, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    d49a:	f021 f8e2 	bl	2e662 <at_params_list_init>
	if (err) {
    d49e:	4604      	mov	r4, r0
    d4a0:	b1f8      	cbz	r0, d4e2 <at_handler+0xaa>
    d4a2:	4a9b      	ldr	r2, [pc, #620]	; (d710 <at_handler+0x2d8>)
    d4a4:	4b9b      	ldr	r3, [pc, #620]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d4a6:	4601      	mov	r1, r0
    d4a8:	1ad2      	subs	r2, r2, r3
    d4aa:	08d2      	lsrs	r2, r2, #3
    d4ac:	0192      	lsls	r2, r2, #6
    d4ae:	489c      	ldr	r0, [pc, #624]	; (d720 <at_handler+0x2e8>)
    d4b0:	f042 0201 	orr.w	r2, r2, #1
    d4b4:	f01f fa19 	bl	2c8ea <log_1>
    d4b8:	4b96      	ldr	r3, [pc, #600]	; (d714 <at_handler+0x2dc>)
    d4ba:	4d95      	ldr	r5, [pc, #596]	; (d710 <at_handler+0x2d8>)
			LOG_ERR("Failed to parse notification (error %d): %s",
    d4bc:	4630      	mov	r0, r6
    d4be:	1aed      	subs	r5, r5, r3
    d4c0:	f005 fd50 	bl	12f64 <log_strdup>
    d4c4:	08ed      	lsrs	r5, r5, #3
    d4c6:	01ad      	lsls	r5, r5, #6
    d4c8:	f045 0501 	orr.w	r5, r5, #1
    d4cc:	4602      	mov	r2, r0
    d4ce:	462b      	mov	r3, r5
    d4d0:	4621      	mov	r1, r4
    d4d2:	4894      	ldr	r0, [pc, #592]	; (d724 <at_handler+0x2ec>)
    d4d4:	f01f fa20 	bl	2c918 <log_2>
			return;
    d4d8:	e7bf      	b.n	d45a <at_handler+0x22>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    d4da:	3701      	adds	r7, #1
    d4dc:	2f03      	cmp	r7, #3
    d4de:	d1c3      	bne.n	d468 <at_handler+0x30>
    d4e0:	e7bb      	b.n	d45a <at_handler+0x22>
	err = at_parser_params_from_str(notification,
    d4e2:	4601      	mov	r1, r0
    d4e4:	aa07      	add	r2, sp, #28
    d4e6:	4630      	mov	r0, r6
    d4e8:	f021 f8b8 	bl	2e65c <at_parser_params_from_str>
	if (err) {
    d4ec:	4604      	mov	r4, r0
    d4ee:	2800      	cmp	r0, #0
    d4f0:	d05c      	beq.n	d5ac <at_handler+0x174>
    d4f2:	4a87      	ldr	r2, [pc, #540]	; (d710 <at_handler+0x2d8>)
    d4f4:	4b87      	ldr	r3, [pc, #540]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
    d4f6:	4601      	mov	r1, r0
    d4f8:	1ad2      	subs	r2, r2, r3
    d4fa:	08d2      	lsrs	r2, r2, #3
    d4fc:	0192      	lsls	r2, r2, #6
    d4fe:	488a      	ldr	r0, [pc, #552]	; (d728 <at_handler+0x2f0>)
    d500:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not get registration status, error: %d", err);
    d504:	f01f f9f1 	bl	2c8ea <log_1>
	at_params_list_free(&resp_list);
    d508:	a807      	add	r0, sp, #28
    d50a:	f021 f8bd 	bl	2e688 <at_params_list_free>
		if (err) {
    d50e:	2c00      	cmp	r4, #0
    d510:	d1d2      	bne.n	d4b8 <at_handler+0x80>
		if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d512:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
    d516:	2b01      	cmp	r3, #1
    d518:	d102      	bne.n	d520 <at_handler+0xe8>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    d51a:	4884      	ldr	r0, [pc, #528]	; (d72c <at_handler+0x2f4>)
    d51c:	f017 f9d2 	bl	248c4 <z_impl_k_sem_give>
		if (!evt_handler) {
    d520:	4c83      	ldr	r4, [pc, #524]	; (d730 <at_handler+0x2f8>)
    d522:	6823      	ldr	r3, [r4, #0]
    d524:	2b00      	cmp	r3, #0
    d526:	d098      	beq.n	d45a <at_handler+0x22>
		if (reg_status != prev_reg_status) {
    d528:	4a82      	ldr	r2, [pc, #520]	; (d734 <at_handler+0x2fc>)
    d52a:	7811      	ldrb	r1, [r2, #0]
    d52c:	42a9      	cmp	r1, r5
    d52e:	d007      	beq.n	d540 <at_handler+0x108>
			prev_reg_status = reg_status;
    d530:	7015      	strb	r5, [r2, #0]
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    d532:	2200      	movs	r2, #0
			evt.nw_reg_status = reg_status;
    d534:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    d538:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			evt_handler(&evt);
    d53c:	a809      	add	r0, sp, #36	; 0x24
    d53e:	4798      	blx	r3
		if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
    d540:	4e7d      	ldr	r6, [pc, #500]	; (d738 <at_handler+0x300>)
    d542:	ad03      	add	r5, sp, #12
    d544:	2208      	movs	r2, #8
    d546:	4631      	mov	r1, r6
    d548:	4628      	mov	r0, r5
    d54a:	f018 ff27 	bl	2639c <memcmp>
    d54e:	b160      	cbz	r0, d56a <at_handler+0x132>
			evt.type = LTE_LC_EVT_CELL_UPDATE;
    d550:	e895 0003 	ldmia.w	r5, {r0, r1}
    d554:	2304      	movs	r3, #4
    d556:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
    d55a:	ab0c      	add	r3, sp, #48	; 0x30
    d55c:	e903 0003 	stmdb	r3, {r0, r1}
    d560:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
    d564:	6823      	ldr	r3, [r4, #0]
    d566:	a809      	add	r0, sp, #36	; 0x24
    d568:	4798      	blx	r3
		if (memcmp(&psm_cfg, &prev_psm_cfg,
    d56a:	4e74      	ldr	r6, [pc, #464]	; (d73c <at_handler+0x304>)
    d56c:	ad05      	add	r5, sp, #20
    d56e:	2208      	movs	r2, #8
    d570:	4631      	mov	r1, r6
    d572:	4628      	mov	r0, r5
    d574:	f018 ff12 	bl	2639c <memcmp>
    d578:	b160      	cbz	r0, d594 <at_handler+0x15c>
			evt.type = LTE_LC_EVT_PSM_UPDATE;
    d57a:	e895 0003 	ldmia.w	r5, {r0, r1}
    d57e:	2301      	movs	r3, #1
    d580:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_psm_cfg, &psm_cfg,
    d584:	ab0c      	add	r3, sp, #48	; 0x30
    d586:	e903 0003 	stmdb	r3, {r0, r1}
    d58a:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
    d58e:	6823      	ldr	r3, [r4, #0]
    d590:	a809      	add	r0, sp, #36	; 0x24
    d592:	4798      	blx	r3
	bool notify = false;
    d594:	2300      	movs	r3, #0
	if (evt_handler && notify) {
    d596:	4a66      	ldr	r2, [pc, #408]	; (d730 <at_handler+0x2f8>)
    d598:	6812      	ldr	r2, [r2, #0]
    d59a:	2a00      	cmp	r2, #0
    d59c:	f43f af5d 	beq.w	d45a <at_handler+0x22>
    d5a0:	2b00      	cmp	r3, #0
    d5a2:	f43f af5a 	beq.w	d45a <at_handler+0x22>
		evt_handler(&evt);
    d5a6:	a809      	add	r0, sp, #36	; 0x24
    d5a8:	4790      	blx	r2
    d5aa:	e756      	b.n	d45a <at_handler+0x22>
	err = at_params_int_get(&resp_list,
    d5ac:	2101      	movs	r1, #1
    d5ae:	aa01      	add	r2, sp, #4
    d5b0:	a807      	add	r0, sp, #28
    d5b2:	f021 f917 	bl	2e7e4 <at_params_int_get>
	if (err) {
    d5b6:	4604      	mov	r4, r0
    d5b8:	b148      	cbz	r0, d5ce <at_handler+0x196>
    d5ba:	4a55      	ldr	r2, [pc, #340]	; (d710 <at_handler+0x2d8>)
    d5bc:	4b55      	ldr	r3, [pc, #340]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Could not get registration status, error: %d", err);
    d5be:	4601      	mov	r1, r0
    d5c0:	1ad2      	subs	r2, r2, r3
    d5c2:	08d2      	lsrs	r2, r2, #3
    d5c4:	0192      	lsls	r2, r2, #6
    d5c6:	485e      	ldr	r0, [pc, #376]	; (d740 <at_handler+0x308>)
    d5c8:	f042 0201 	orr.w	r2, r2, #1
    d5cc:	e79a      	b.n	d504 <at_handler+0xcc>
	*reg_status = status;
    d5ce:	f89d 5004 	ldrb.w	r5, [sp, #4]
	if (*reg_status != LTE_LC_NW_REG_UICC_FAIL) {
    d5d2:	2d5a      	cmp	r5, #90	; 0x5a
    d5d4:	d047      	beq.n	d666 <at_handler+0x22e>
		err = at_params_string_get(&resp_list,
    d5d6:	2102      	movs	r1, #2
    d5d8:	ab02      	add	r3, sp, #8
    d5da:	aa09      	add	r2, sp, #36	; 0x24
    d5dc:	a807      	add	r0, sp, #28
    d5de:	f021 f918 	bl	2e812 <at_params_string_get>
		if (err) {
    d5e2:	4607      	mov	r7, r0
    d5e4:	b160      	cbz	r0, d600 <at_handler+0x1c8>
    d5e6:	4a4a      	ldr	r2, [pc, #296]	; (d710 <at_handler+0x2d8>)
    d5e8:	4b4a      	ldr	r3, [pc, #296]	; (d714 <at_handler+0x2dc>)
			LOG_ERR("Could not get tracking area code, error: %d", err);
    d5ea:	4601      	mov	r1, r0
    d5ec:	1ad2      	subs	r2, r2, r3
    d5ee:	08d2      	lsrs	r2, r2, #3
    d5f0:	0192      	lsls	r2, r2, #6
    d5f2:	4854      	ldr	r0, [pc, #336]	; (d744 <at_handler+0x30c>)
    d5f4:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not get cell ID, error: %d", err);
    d5f8:	f01f f977 	bl	2c8ea <log_1>
			goto clean_exit;
    d5fc:	463c      	mov	r4, r7
    d5fe:	e783      	b.n	d508 <at_handler+0xd0>
		str_buf[len] = '\0';
    d600:	9b02      	ldr	r3, [sp, #8]
    d602:	aa0c      	add	r2, sp, #48	; 0x30
    d604:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
    d606:	4621      	mov	r1, r4
    d608:	2210      	movs	r2, #16
    d60a:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
    d60c:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
    d610:	f019 feee 	bl	273f0 <strtoul>
		err = at_params_string_get(&resp_list,
    d614:	2103      	movs	r1, #3
		cell->tac = strtoul(str_buf, NULL, 16);
    d616:	9004      	str	r0, [sp, #16]
		err = at_params_string_get(&resp_list,
    d618:	ab02      	add	r3, sp, #8
    d61a:	aa09      	add	r2, sp, #36	; 0x24
    d61c:	a807      	add	r0, sp, #28
		len = sizeof(str_buf) - 1;
    d61e:	f8cd 8008 	str.w	r8, [sp, #8]
		err = at_params_string_get(&resp_list,
    d622:	f021 f8f6 	bl	2e812 <at_params_string_get>
		if (err) {
    d626:	4607      	mov	r7, r0
    d628:	b148      	cbz	r0, d63e <at_handler+0x206>
    d62a:	4a39      	ldr	r2, [pc, #228]	; (d710 <at_handler+0x2d8>)
    d62c:	4b39      	ldr	r3, [pc, #228]	; (d714 <at_handler+0x2dc>)
			LOG_ERR("Could not get cell ID, error: %d", err);
    d62e:	4601      	mov	r1, r0
    d630:	1ad2      	subs	r2, r2, r3
    d632:	08d2      	lsrs	r2, r2, #3
    d634:	0192      	lsls	r2, r2, #6
    d636:	4844      	ldr	r0, [pc, #272]	; (d748 <at_handler+0x310>)
    d638:	f042 0201 	orr.w	r2, r2, #1
    d63c:	e7dc      	b.n	d5f8 <at_handler+0x1c0>
		str_buf[len] = '\0';
    d63e:	9b02      	ldr	r3, [sp, #8]
    d640:	aa0c      	add	r2, sp, #48	; 0x30
    d642:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
    d644:	4621      	mov	r1, r4
    d646:	2210      	movs	r2, #16
    d648:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
    d64a:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
    d64e:	f019 fecf 	bl	273f0 <strtoul>
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d652:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
    d656:	2b01      	cmp	r3, #1
		cell->id = strtoul(str_buf, NULL, 16);
    d658:	9003      	str	r0, [sp, #12]
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d65a:	d009      	beq.n	d670 <at_handler+0x238>
		psm_cfg->tau = -1;
    d65c:	f04f 33ff 	mov.w	r3, #4294967295
		psm_cfg->active_time = -1;
    d660:	e9cd 3305 	strd	r3, r3, [sp, #20]
    d664:	e750      	b.n	d508 <at_handler+0xd0>
		cell->tac = UINT32_MAX;
    d666:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = UINT32_MAX;
    d66a:	e9cd 3303 	strd	r3, r3, [sp, #12]
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    d66e:	e7f5      	b.n	d65c <at_handler+0x224>
		err = parse_psm_cfg(&resp_list, true, psm_cfg);
    d670:	2101      	movs	r1, #1
    d672:	aa05      	add	r2, sp, #20
    d674:	a807      	add	r0, sp, #28
    d676:	f00b fab9 	bl	18bec <parse_psm_cfg>
		if (err) {
    d67a:	4604      	mov	r4, r0
    d67c:	2800      	cmp	r0, #0
    d67e:	f43f af43 	beq.w	d508 <at_handler+0xd0>
    d682:	4a23      	ldr	r2, [pc, #140]	; (d710 <at_handler+0x2d8>)
    d684:	4b23      	ldr	r3, [pc, #140]	; (d714 <at_handler+0x2dc>)
			LOG_ERR("Failed to parse PSM configuration, error: %d",
    d686:	4601      	mov	r1, r0
    d688:	1ad2      	subs	r2, r2, r3
    d68a:	08d2      	lsrs	r2, r2, #3
    d68c:	0192      	lsls	r2, r2, #6
    d68e:	482f      	ldr	r0, [pc, #188]	; (d74c <at_handler+0x314>)
    d690:	f042 0201 	orr.w	r2, r2, #1
    d694:	e736      	b.n	d504 <at_handler+0xcc>
static int parse_rrc_mode(const char *at_response,
			  enum lte_lc_rrc_mode *mode,
			  size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
    d696:	e9cd 0007 	strd	r0, r0, [sp, #28]

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
    d69a:	2104      	movs	r1, #4
    d69c:	a807      	add	r0, sp, #28
    d69e:	f020 ffe0 	bl	2e662 <at_params_list_init>
	if (err) {
    d6a2:	4604      	mov	r4, r0
    d6a4:	b1b0      	cbz	r0, d6d4 <at_handler+0x29c>
    d6a6:	4a1a      	ldr	r2, [pc, #104]	; (d710 <at_handler+0x2d8>)
    d6a8:	4b1a      	ldr	r3, [pc, #104]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d6aa:	4601      	mov	r1, r0
    d6ac:	1ad2      	subs	r2, r2, r3
    d6ae:	08d2      	lsrs	r2, r2, #3
    d6b0:	0192      	lsls	r2, r2, #6
    d6b2:	481b      	ldr	r0, [pc, #108]	; (d720 <at_handler+0x2e8>)
    d6b4:	f042 0201 	orr.w	r2, r2, #1
    d6b8:	f01f f917 	bl	2c8ea <log_1>
			LOG_ERR("Can't parse signalling mode, error: %d", err);
    d6bc:	4621      	mov	r1, r4
    d6be:	4a14      	ldr	r2, [pc, #80]	; (d710 <at_handler+0x2d8>)
    d6c0:	4b14      	ldr	r3, [pc, #80]	; (d714 <at_handler+0x2dc>)
    d6c2:	4823      	ldr	r0, [pc, #140]	; (d750 <at_handler+0x318>)
    d6c4:	1ad2      	subs	r2, r2, r3
    d6c6:	08d2      	lsrs	r2, r2, #3
    d6c8:	0192      	lsls	r2, r2, #6
    d6ca:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Can't parse eDRX, error: %d", err);
    d6ce:	f01f f90c 	bl	2c8ea <log_1>
			return;
    d6d2:	e6c2      	b.n	d45a <at_handler+0x22>
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    d6d4:	4601      	mov	r1, r0
    d6d6:	aa07      	add	r2, sp, #28
    d6d8:	4630      	mov	r0, r6
    d6da:	f020 ffbf 	bl	2e65c <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    d6de:	4604      	mov	r4, r0
    d6e0:	2800      	cmp	r0, #0
    d6e2:	d039      	beq.n	d758 <at_handler+0x320>
    d6e4:	4a0a      	ldr	r2, [pc, #40]	; (d710 <at_handler+0x2d8>)
    d6e6:	4b0b      	ldr	r3, [pc, #44]	; (d714 <at_handler+0x2dc>)
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
    d6e8:	4601      	mov	r1, r0
    d6ea:	1ad2      	subs	r2, r2, r3
    d6ec:	08d2      	lsrs	r2, r2, #3
    d6ee:	0192      	lsls	r2, r2, #6
    d6f0:	4818      	ldr	r0, [pc, #96]	; (d754 <at_handler+0x31c>)
    d6f2:	f042 0201 	orr.w	r2, r2, #1
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
	if (err) {
		LOG_ERR("Could not get signalling mode, error: %d", err);
    d6f6:	f01f f8f8 	bl	2c8ea <log_1>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
    d6fa:	a807      	add	r0, sp, #28
    d6fc:	f020 ffc4 	bl	2e688 <at_params_list_free>
		if (err) {
    d700:	2c00      	cmp	r4, #0
    d702:	d1db      	bne.n	d6bc <at_handler+0x284>
		evt.type = LTE_LC_EVT_RRC_UPDATE;
    d704:	2303      	movs	r3, #3
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    d706:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		notify = true;
    d70a:	2301      	movs	r3, #1
		break;
    d70c:	e743      	b.n	d596 <at_handler+0x15e>
    d70e:	bf00      	nop
    d710:	0002f03c 	.word	0x0002f03c
    d714:	0002eff4 	.word	0x0002eff4
    d718:	00032001 	.word	0x00032001
    d71c:	0002f410 	.word	0x0002f410
    d720:	00032021 	.word	0x00032021
    d724:	0003211e 	.word	0x0003211e
    d728:	0003204a 	.word	0x0003204a
    d72c:	20021744 	.word	0x20021744
    d730:	20021740 	.word	0x20021740
    d734:	20026290 	.word	0x20026290
    d738:	2002175c 	.word	0x2002175c
    d73c:	20021764 	.word	0x20021764
    d740:	00032077 	.word	0x00032077
    d744:	000320a4 	.word	0x000320a4
    d748:	000320d0 	.word	0x000320d0
    d74c:	000320f1 	.word	0x000320f1
    d750:	000321ba 	.word	0x000321ba
    d754:	0003214a 	.word	0x0003214a
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
    d758:	4639      	mov	r1, r7
    d75a:	aa05      	add	r2, sp, #20
    d75c:	a807      	add	r0, sp, #28
    d75e:	f021 f841 	bl	2e7e4 <at_params_int_get>
	if (err) {
    d762:	4604      	mov	r4, r0
    d764:	b148      	cbz	r0, d77a <at_handler+0x342>
    d766:	4a82      	ldr	r2, [pc, #520]	; (d970 <at_handler+0x538>)
    d768:	4b82      	ldr	r3, [pc, #520]	; (d974 <at_handler+0x53c>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
    d76a:	4601      	mov	r1, r0
    d76c:	1ad2      	subs	r2, r2, r3
    d76e:	08d2      	lsrs	r2, r2, #3
    d770:	0192      	lsls	r2, r2, #6
    d772:	4881      	ldr	r0, [pc, #516]	; (d978 <at_handler+0x540>)
    d774:	f042 0201 	orr.w	r2, r2, #1
    d778:	e7bd      	b.n	d6f6 <at_handler+0x2be>
	if (temp_mode == 0) {
    d77a:	9905      	ldr	r1, [sp, #20]
    d77c:	b911      	cbnz	r1, d784 <at_handler+0x34c>
		*mode = LTE_LC_RRC_MODE_IDLE;
    d77e:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
    d782:	e7ba      	b.n	d6fa <at_handler+0x2c2>
	} else if (temp_mode == 1) {
    d784:	2901      	cmp	r1, #1
    d786:	d102      	bne.n	d78e <at_handler+0x356>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
    d788:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
    d78c:	e7b5      	b.n	d6fa <at_handler+0x2c2>
    d78e:	4b79      	ldr	r3, [pc, #484]	; (d974 <at_handler+0x53c>)
    d790:	4a77      	ldr	r2, [pc, #476]	; (d970 <at_handler+0x538>)
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
    d792:	487a      	ldr	r0, [pc, #488]	; (d97c <at_handler+0x544>)
    d794:	1ad2      	subs	r2, r2, r3
    d796:	08d2      	lsrs	r2, r2, #3
    d798:	0192      	lsls	r2, r2, #6
    d79a:	f042 0201 	orr.w	r2, r2, #1
    d79e:	f01f f8a4 	bl	2c8ea <log_1>
		err = -EINVAL;
    d7a2:	f06f 0415 	mvn.w	r4, #21
    d7a6:	e7a8      	b.n	d6fa <at_handler+0x2c2>
{
	int err;
	uint8_t idx;
	struct at_param_list resp_list = {0};
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
    d7a8:	2304      	movs	r3, #4
	switch (sys_mode_current) {
    d7aa:	4d75      	ldr	r5, [pc, #468]	; (d980 <at_handler+0x548>)
	size_t len = sizeof(tmp_buf) - 1;
    d7ac:	9303      	str	r3, [sp, #12]
    d7ae:	782b      	ldrb	r3, [r5, #0]
	struct at_param_list resp_list = {0};
    d7b0:	e9cd 0007 	strd	r0, r0, [sp, #28]
	switch (sys_mode_current) {
    d7b4:	3b01      	subs	r3, #1
    d7b6:	2b04      	cmp	r3, #4
    d7b8:	d804      	bhi.n	d7c4 <at_handler+0x38c>
    d7ba:	e8df f003 	tbb	[pc, r3]
    d7be:	2d19      	.short	0x2d19
    d7c0:	1903      	.short	0x1903
    d7c2:	2d          	.byte	0x2d
    d7c3:	00          	.byte	0x00
    d7c4:	4b6b      	ldr	r3, [pc, #428]	; (d974 <at_handler+0x53c>)
    d7c6:	496a      	ldr	r1, [pc, #424]	; (d970 <at_handler+0x538>)
		LOG_ERR("No LTE connection available in this system mode");
    d7c8:	486e      	ldr	r0, [pc, #440]	; (d984 <at_handler+0x54c>)
    d7ca:	1ac9      	subs	r1, r1, r3
    d7cc:	08c9      	lsrs	r1, r1, #3
    d7ce:	0189      	lsls	r1, r1, #6
    d7d0:	f041 0101 	orr.w	r1, r1, #1
    d7d4:	f01f f87a 	bl	2c8cc <log_0>
		return -ENOTCONN;
    d7d8:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    d7dc:	4a64      	ldr	r2, [pc, #400]	; (d970 <at_handler+0x538>)
    d7de:	4b65      	ldr	r3, [pc, #404]	; (d974 <at_handler+0x53c>)
			LOG_ERR("Can't parse eDRX, error: %d", err);
    d7e0:	4621      	mov	r1, r4
    d7e2:	1ad2      	subs	r2, r2, r3
    d7e4:	08d2      	lsrs	r2, r2, #3
    d7e6:	0192      	lsls	r2, r2, #6
    d7e8:	4867      	ldr	r0, [pc, #412]	; (d988 <at_handler+0x550>)
    d7ea:	f042 0201 	orr.w	r2, r2, #1
    d7ee:	e76e      	b.n	d6ce <at_handler+0x296>
	switch (sys_mode_current) {
    d7f0:	ed9f 8a66 	vldr	s16, [pc, #408]	; d98c <at_handler+0x554>
	err = get_ptw_multiplier(&ptw_multiplier);
	if (err) {
		return err;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
    d7f4:	2105      	movs	r1, #5
    d7f6:	a807      	add	r0, sp, #28
    d7f8:	f020 ff33 	bl	2e662 <at_params_list_init>
	if (err) {
    d7fc:	4604      	mov	r4, r0
    d7fe:	b170      	cbz	r0, d81e <at_handler+0x3e6>
    d800:	4b5c      	ldr	r3, [pc, #368]	; (d974 <at_handler+0x53c>)
    d802:	4a5b      	ldr	r2, [pc, #364]	; (d970 <at_handler+0x538>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    d804:	4601      	mov	r1, r0
    d806:	1ad2      	subs	r2, r2, r3
    d808:	08d2      	lsrs	r2, r2, #3
    d80a:	0192      	lsls	r2, r2, #6
    d80c:	4860      	ldr	r0, [pc, #384]	; (d990 <at_handler+0x558>)
    d80e:	f042 0201 	orr.w	r2, r2, #1
    d812:	f01f f86a 	bl	2c8ea <log_1>
		return err;
    d816:	e7e1      	b.n	d7dc <at_handler+0x3a4>
		*ptw_multiplier = 2.56;
    d818:	ed9f 8a5e 	vldr	s16, [pc, #376]	; d994 <at_handler+0x55c>
    d81c:	e7ea      	b.n	d7f4 <at_handler+0x3bc>
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    d81e:	4601      	mov	r1, r0
    d820:	aa07      	add	r2, sp, #28
    d822:	4630      	mov	r0, r6
    d824:	f020 ff1a 	bl	2e65c <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    d828:	4604      	mov	r4, r0
    d82a:	b188      	cbz	r0, d850 <at_handler+0x418>
    d82c:	4a50      	ldr	r2, [pc, #320]	; (d970 <at_handler+0x538>)
    d82e:	4b51      	ldr	r3, [pc, #324]	; (d974 <at_handler+0x53c>)
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
    d830:	4601      	mov	r1, r0
    d832:	1ad2      	subs	r2, r2, r3
    d834:	08d2      	lsrs	r2, r2, #3
    d836:	0192      	lsls	r2, r2, #6
    d838:	4857      	ldr	r0, [pc, #348]	; (d998 <at_handler+0x560>)
    d83a:	f042 0201 	orr.w	r2, r2, #1
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
				   tmp_buf, &len);
	if (err) {
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    d83e:	f01f f854 	bl	2c8ea <log_1>
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
    d842:	a807      	add	r0, sp, #28
    d844:	f020 ff20 	bl	2e688 <at_params_list_free>
		if (err) {
    d848:	2c00      	cmp	r4, #0
    d84a:	d1c7      	bne.n	d7dc <at_handler+0x3a4>
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    d84c:	2302      	movs	r3, #2
    d84e:	e75a      	b.n	d706 <at_handler+0x2ce>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
    d850:	2103      	movs	r1, #3
    d852:	ab03      	add	r3, sp, #12
    d854:	aa05      	add	r2, sp, #20
    d856:	a807      	add	r0, sp, #28
    d858:	f020 ffdb 	bl	2e812 <at_params_string_get>
	if (err) {
    d85c:	4604      	mov	r4, r0
    d85e:	b148      	cbz	r0, d874 <at_handler+0x43c>
    d860:	4a43      	ldr	r2, [pc, #268]	; (d970 <at_handler+0x538>)
    d862:	4b44      	ldr	r3, [pc, #272]	; (d974 <at_handler+0x53c>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    d864:	4601      	mov	r1, r0
    d866:	1ad2      	subs	r2, r2, r3
    d868:	08d2      	lsrs	r2, r2, #3
    d86a:	0192      	lsls	r2, r2, #6
    d86c:	484b      	ldr	r0, [pc, #300]	; (d99c <at_handler+0x564>)
    d86e:	f042 0201 	orr.w	r2, r2, #1
    d872:	e7e4      	b.n	d83e <at_handler+0x406>
	tmp_buf[len] = '\0';
    d874:	9b03      	ldr	r3, [sp, #12]
    d876:	aa0c      	add	r2, sp, #48	; 0x30
    d878:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
    d87a:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    d87c:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d880:	2202      	movs	r2, #2
    d882:	a805      	add	r0, sp, #20
    d884:	f019 fdb4 	bl	273f0 <strtoul>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    d888:	b2c0      	uxtb	r0, r0
    d88a:	280f      	cmp	r0, #15
    d88c:	d844      	bhi.n	d918 <at_handler+0x4e0>
	switch (sys_mode_current) {
    d88e:	782b      	ldrb	r3, [r5, #0]
    d890:	3b01      	subs	r3, #1
    d892:	2b04      	cmp	r3, #4
    d894:	d828      	bhi.n	d8e8 <at_handler+0x4b0>
    d896:	e8df f003 	tbb	[pc, r3]
    d89a:	2503      	.short	0x2503
    d89c:	0327      	.short	0x0327
    d89e:	25          	.byte	0x25
    d89f:	00          	.byte	0x00
		multiplier = edrx_lookup_ltem[idx];
    d8a0:	4b3f      	ldr	r3, [pc, #252]	; (d9a0 <at_handler+0x568>)
		multiplier = edrx_lookup_nbiot[idx];
    d8a2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d8a6:	2800      	cmp	r0, #0
    d8a8:	d034      	beq.n	d914 <at_handler+0x4dc>
    d8aa:	f7fe fe1b 	bl	c4e4 <__aeabi_i2d>
    d8ae:	a32e      	add	r3, pc, #184	; (adr r3, d968 <at_handler+0x530>)
    d8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    d8b4:	f7ff fa9e 	bl	cdf4 <__aeabi_dmul>
    d8b8:	f7fe ff2e 	bl	c718 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
    d8bc:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d8be:	900a      	str	r0, [sp, #40]	; 0x28
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d8c0:	ab03      	add	r3, sp, #12
    d8c2:	aa05      	add	r2, sp, #20
    d8c4:	a807      	add	r0, sp, #28
	len = sizeof(tmp_buf) - 1;
    d8c6:	9103      	str	r1, [sp, #12]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d8c8:	f020 ffa3 	bl	2e812 <at_params_string_get>
	if (err) {
    d8cc:	4604      	mov	r4, r0
    d8ce:	b330      	cbz	r0, d91e <at_handler+0x4e6>
    d8d0:	4a27      	ldr	r2, [pc, #156]	; (d970 <at_handler+0x538>)
    d8d2:	4b28      	ldr	r3, [pc, #160]	; (d974 <at_handler+0x53c>)
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
    d8d4:	4601      	mov	r1, r0
    d8d6:	1ad2      	subs	r2, r2, r3
    d8d8:	08d2      	lsrs	r2, r2, #3
    d8da:	0192      	lsls	r2, r2, #6
    d8dc:	4831      	ldr	r0, [pc, #196]	; (d9a4 <at_handler+0x56c>)
    d8de:	f042 0201 	orr.w	r2, r2, #1
    d8e2:	e7ac      	b.n	d83e <at_handler+0x406>
		multiplier = edrx_lookup_nbiot[idx];
    d8e4:	4b30      	ldr	r3, [pc, #192]	; (d9a8 <at_handler+0x570>)
    d8e6:	e7dc      	b.n	d8a2 <at_handler+0x46a>
    d8e8:	4b22      	ldr	r3, [pc, #136]	; (d974 <at_handler+0x53c>)
    d8ea:	4921      	ldr	r1, [pc, #132]	; (d970 <at_handler+0x538>)
		LOG_ERR("No LTE connection available in this system mode");
    d8ec:	4825      	ldr	r0, [pc, #148]	; (d984 <at_handler+0x54c>)
    d8ee:	1ac9      	subs	r1, r1, r3
    d8f0:	08c9      	lsrs	r1, r1, #3
    d8f2:	0189      	lsls	r1, r1, #6
    d8f4:	f041 0101 	orr.w	r1, r1, #1
    d8f8:	f01e ffe8 	bl	2c8cc <log_0>
		return -ENOTCONN;
    d8fc:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    d900:	4a1b      	ldr	r2, [pc, #108]	; (d970 <at_handler+0x538>)
    d902:	4b1c      	ldr	r3, [pc, #112]	; (d974 <at_handler+0x53c>)
		LOG_ERR("Failed to get eDRX value, error; %d", err);
    d904:	4621      	mov	r1, r4
    d906:	1ad2      	subs	r2, r2, r3
    d908:	08d2      	lsrs	r2, r2, #3
    d90a:	0192      	lsls	r2, r2, #6
    d90c:	4827      	ldr	r0, [pc, #156]	; (d9ac <at_handler+0x574>)
    d90e:	f042 0201 	orr.w	r2, r2, #1
    d912:	e794      	b.n	d83e <at_handler+0x406>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d914:	4826      	ldr	r0, [pc, #152]	; (d9b0 <at_handler+0x578>)
    d916:	e7d1      	b.n	d8bc <at_handler+0x484>
		return -EINVAL;
    d918:	f06f 0415 	mvn.w	r4, #21
    d91c:	e7f0      	b.n	d900 <at_handler+0x4c8>
	tmp_buf[len] = '\0';
    d91e:	9b03      	ldr	r3, [sp, #12]
    d920:	aa0c      	add	r2, sp, #48	; 0x30
    d922:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
    d924:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    d926:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d92a:	2202      	movs	r2, #2
    d92c:	a805      	add	r0, sp, #20
    d92e:	f019 fd5f 	bl	273f0 <strtoul>
	if (idx > 15) {
    d932:	b2c1      	uxtb	r1, r0
    d934:	290f      	cmp	r1, #15
    d936:	d90c      	bls.n	d952 <at_handler+0x51a>
    d938:	4b0e      	ldr	r3, [pc, #56]	; (d974 <at_handler+0x53c>)
    d93a:	4a0d      	ldr	r2, [pc, #52]	; (d970 <at_handler+0x538>)
		LOG_ERR("Invalid PTW lookup index: %d", idx);
    d93c:	481d      	ldr	r0, [pc, #116]	; (d9b4 <at_handler+0x57c>)
    d93e:	1ad2      	subs	r2, r2, r3
    d940:	08d2      	lsrs	r2, r2, #3
    d942:	0192      	lsls	r2, r2, #6
    d944:	f042 0201 	orr.w	r2, r2, #1
    d948:	f01e ffcf 	bl	2c8ea <log_1>
		err = -EINVAL;
    d94c:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
    d950:	e777      	b.n	d842 <at_handler+0x40a>
	idx += 1;
    d952:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
    d954:	b2c0      	uxtb	r0, r0
    d956:	ee07 0a90 	vmov	s15, r0
    d95a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d95e:	ee67 7a88 	vmul.f32	s15, s15, s16
    d962:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
clean_exit:
    d966:	e76c      	b.n	d842 <at_handler+0x40a>
    d968:	47ae147b 	.word	0x47ae147b
    d96c:	40247ae1 	.word	0x40247ae1
    d970:	0002f03c 	.word	0x0002f03c
    d974:	0002eff4 	.word	0x0002eff4
    d978:	00032175 	.word	0x00032175
    d97c:	0003219e 	.word	0x0003219e
    d980:	20026291 	.word	0x20026291
    d984:	000321e1 	.word	0x000321e1
    d988:	000322d5 	.word	0x000322d5
    d98c:	3fa3d70a 	.word	0x3fa3d70a
    d990:	00032021 	.word	0x00032021
    d994:	4023d70a 	.word	0x4023d70a
    d998:	00032211 	.word	0x00032211
    d99c:	0003223d 	.word	0x0003223d
    d9a0:	0002fc84 	.word	0x0002fc84
    d9a4:	0003228d 	.word	0x0003228d
    d9a8:	0002fca4 	.word	0x0002fca4
    d9ac:	00032269 	.word	0x00032269
    d9b0:	40a3d70a 	.word	0x40a3d70a
    d9b4:	000322b8 	.word	0x000322b8

0000d9b8 <_strtod_l>:
    d9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9bc:	4c25      	ldr	r4, [pc, #148]	; (da54 <_strtod_l+0x9c>)
    d9be:	460f      	mov	r7, r1
    d9c0:	2500      	movs	r5, #0
    d9c2:	4683      	mov	fp, r0
    d9c4:	6824      	ldr	r4, [r4, #0]
    d9c6:	ed2d 8b02 	vpush	{d8}
    d9ca:	b0a3      	sub	sp, #140	; 0x8c
    d9cc:	4620      	mov	r0, r4
    d9ce:	9408      	str	r4, [sp, #32]
    d9d0:	461c      	mov	r4, r3
    d9d2:	9207      	str	r2, [sp, #28]
    d9d4:	951e      	str	r5, [sp, #120]	; 0x78
    d9d6:	f019 f91f 	bl	26c18 <strlen>
    d9da:	2100      	movs	r1, #0
    d9dc:	2200      	movs	r2, #0
    d9de:	463b      	mov	r3, r7
    d9e0:	4680      	mov	r8, r0
    d9e2:	971d      	str	r7, [sp, #116]	; 0x74
    d9e4:	e9cd 1204 	strd	r1, r2, [sp, #16]
    d9e8:	469a      	mov	sl, r3
    d9ea:	f813 6b01 	ldrb.w	r6, [r3], #1
    d9ee:	2e2d      	cmp	r6, #45	; 0x2d
    d9f0:	d832      	bhi.n	da58 <_strtod_l+0xa0>
    d9f2:	e8df f016 	tbh	[pc, r6, lsl #1]
    d9f6:	01e4      	.short	0x01e4
    d9f8:	00310031 	.word	0x00310031
    d9fc:	00310031 	.word	0x00310031
    da00:	00310031 	.word	0x00310031
    da04:	00310031 	.word	0x00310031
    da08:	01f201f2 	.word	0x01f201f2
    da0c:	01f201f2 	.word	0x01f201f2
    da10:	003101f2 	.word	0x003101f2
    da14:	00310031 	.word	0x00310031
    da18:	00310031 	.word	0x00310031
    da1c:	00310031 	.word	0x00310031
    da20:	00310031 	.word	0x00310031
    da24:	00310031 	.word	0x00310031
    da28:	00310031 	.word	0x00310031
    da2c:	00310031 	.word	0x00310031
    da30:	00310031 	.word	0x00310031
    da34:	01f20031 	.word	0x01f20031
    da38:	00310031 	.word	0x00310031
    da3c:	00310031 	.word	0x00310031
    da40:	00310031 	.word	0x00310031
    da44:	00310031 	.word	0x00310031
    da48:	00310031 	.word	0x00310031
    da4c:	00310423 	.word	0x00310423
    da50:	0417      	.short	0x0417
    da52:	bf00      	nop
    da54:	0002fc60 	.word	0x0002fc60
    da58:	2300      	movs	r3, #0
    da5a:	930a      	str	r3, [sp, #40]	; 0x28
    da5c:	2e30      	cmp	r6, #48	; 0x30
    da5e:	f000 81d9 	beq.w	de14 <_strtod_l+0x45c>
    da62:	2300      	movs	r3, #0
    da64:	930b      	str	r3, [sp, #44]	; 0x2c
    da66:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    da6a:	2b09      	cmp	r3, #9
    da6c:	f200 8460 	bhi.w	e330 <_strtod_l+0x978>
    da70:	2500      	movs	r5, #0
    da72:	4650      	mov	r0, sl
    da74:	46a9      	mov	r9, r5
    da76:	462c      	mov	r4, r5
    da78:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    da7c:	3001      	adds	r0, #1
    da7e:	eb09 0289 	add.w	r2, r9, r9, lsl #2
    da82:	2c08      	cmp	r4, #8
    da84:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    da88:	901d      	str	r0, [sp, #116]	; 0x74
    da8a:	eb06 0242 	add.w	r2, r6, r2, lsl #1
    da8e:	7806      	ldrb	r6, [r0, #0]
    da90:	bfc8      	it	gt
    da92:	f1a3 0530 	subgt.w	r5, r3, #48	; 0x30
    da96:	f104 0401 	add.w	r4, r4, #1
    da9a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    da9e:	bfd8      	it	le
    daa0:	f1a2 0930 	suble.w	r9, r2, #48	; 0x30
    daa4:	2b09      	cmp	r3, #9
    daa6:	d9e7      	bls.n	da78 <_strtod_l+0xc0>
    daa8:	9908      	ldr	r1, [sp, #32]
    daaa:	4642      	mov	r2, r8
    daac:	f019 f8e2 	bl	26c74 <strncmp>
    dab0:	2800      	cmp	r0, #0
    dab2:	f000 82a8 	beq.w	e006 <_strtod_l+0x64e>
    dab6:	f026 0620 	bic.w	r6, r6, #32
    daba:	2e45      	cmp	r6, #69	; 0x45
    dabc:	f000 81be 	beq.w	de3c <_strtod_l+0x484>
    dac0:	2300      	movs	r3, #0
    dac2:	46a0      	mov	r8, r4
    dac4:	930c      	str	r3, [sp, #48]	; 0x30
    dac6:	9308      	str	r3, [sp, #32]
    dac8:	4648      	mov	r0, r9
    daca:	4646      	mov	r6, r8
    dacc:	f7fe fcfa 	bl	c4c4 <__aeabi_ui2d>
    dad0:	4602      	mov	r2, r0
    dad2:	460b      	mov	r3, r1
    dad4:	2c00      	cmp	r4, #0
    dad6:	bf08      	it	eq
    dad8:	4644      	moveq	r4, r8
    dada:	2e10      	cmp	r6, #16
    dadc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    dae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dae2:	bfa8      	it	ge
    dae4:	2610      	movge	r6, #16
    dae6:	9a08      	ldr	r2, [sp, #32]
    dae8:	f1b8 0f09 	cmp.w	r8, #9
    daec:	eba3 0302 	sub.w	r3, r3, r2
    daf0:	930e      	str	r3, [sp, #56]	; 0x38
    daf2:	dd13      	ble.n	db1c <_strtod_l+0x164>
    daf4:	4bc2      	ldr	r3, [pc, #776]	; (de00 <_strtod_l+0x448>)
    daf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    dafa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    dafe:	f7ff f979 	bl	cdf4 <__aeabi_dmul>
    db02:	ec41 0b18 	vmov	d8, r0, r1
    db06:	4628      	mov	r0, r5
    db08:	f7fe fcdc 	bl	c4c4 <__aeabi_ui2d>
    db0c:	4602      	mov	r2, r0
    db0e:	460b      	mov	r3, r1
    db10:	ec51 0b18 	vmov	r0, r1, d8
    db14:	f7fe fb9a 	bl	c24c <__adddf3>
    db18:	e9cd 0104 	strd	r0, r1, [sp, #16]
    db1c:	f1b8 0f0f 	cmp.w	r8, #15
    db20:	f300 8200 	bgt.w	df24 <_strtod_l+0x56c>
    db24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    db26:	2b00      	cmp	r3, #0
    db28:	f000 8449 	beq.w	e3be <_strtod_l+0xa06>
    db2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    db2e:	f340 83c6 	ble.w	e2be <_strtod_l+0x906>
    db32:	2b16      	cmp	r3, #22
    db34:	f340 8567 	ble.w	e606 <_strtod_l+0xc4e>
    db38:	f1c8 0325 	rsb	r3, r8, #37	; 0x25
    db3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    db3e:	4293      	cmp	r3, r2
    db40:	f280 85b5 	bge.w	e6ae <_strtod_l+0xcf6>
    db44:	eba8 0306 	sub.w	r3, r8, r6
    db48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    db4a:	189d      	adds	r5, r3, r2
    db4c:	f015 030f 	ands.w	r3, r5, #15
    db50:	d00a      	beq.n	db68 <_strtod_l+0x1b0>
    db52:	49ab      	ldr	r1, [pc, #684]	; (de00 <_strtod_l+0x448>)
    db54:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    db58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    db5c:	e9d1 0100 	ldrd	r0, r1, [r1]
    db60:	f7ff f948 	bl	cdf4 <__aeabi_dmul>
    db64:	e9cd 0104 	strd	r0, r1, [sp, #16]
    db68:	f035 030f 	bics.w	r3, r5, #15
    db6c:	f040 8380 	bne.w	e270 <_strtod_l+0x8b8>
    db70:	2300      	movs	r3, #0
    db72:	930b      	str	r3, [sp, #44]	; 0x2c
    db74:	4643      	mov	r3, r8
    db76:	4622      	mov	r2, r4
    db78:	4651      	mov	r1, sl
    db7a:	4658      	mov	r0, fp
    db7c:	f8cd 9000 	str.w	r9, [sp]
    db80:	f01d fabc 	bl	2b0fc <__s2b>
    db84:	9014      	str	r0, [sp, #80]	; 0x50
    db86:	2800      	cmp	r0, #0
    db88:	f000 84ff 	beq.w	e58a <_strtod_l+0xbd2>
    db8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    db8e:	2600      	movs	r6, #0
    db90:	9b08      	ldr	r3, [sp, #32]
    db92:	4637      	mov	r7, r6
    db94:	46b2      	mov	sl, r6
    db96:	1a9b      	subs	r3, r3, r2
    db98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    db9a:	2a00      	cmp	r2, #0
    db9c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    dba0:	bfa8      	it	ge
    dba2:	4633      	movge	r3, r6
    dba4:	9211      	str	r2, [sp, #68]	; 0x44
    dba6:	930f      	str	r3, [sp, #60]	; 0x3c
    dba8:	9c14      	ldr	r4, [sp, #80]	; 0x50
    dbaa:	4658      	mov	r0, fp
    dbac:	6861      	ldr	r1, [r4, #4]
    dbae:	f01d fa31 	bl	2b014 <_Balloc>
    dbb2:	4681      	mov	r9, r0
    dbb4:	2800      	cmp	r0, #0
    dbb6:	f000 8288 	beq.w	e0ca <_strtod_l+0x712>
    dbba:	6922      	ldr	r2, [r4, #16]
    dbbc:	f104 010c 	add.w	r1, r4, #12
    dbc0:	300c      	adds	r0, #12
    dbc2:	3202      	adds	r2, #2
    dbc4:	ed9d 7b04 	vldr	d7, [sp, #16]
    dbc8:	0092      	lsls	r2, r2, #2
    dbca:	ed8d 7b08 	vstr	d7, [sp, #32]
    dbce:	f7fe ffbd 	bl	cb4c <memcpy>
    dbd2:	aa20      	add	r2, sp, #128	; 0x80
    dbd4:	a91f      	add	r1, sp, #124	; 0x7c
    dbd6:	4658      	mov	r0, fp
    dbd8:	ed9d 0b08 	vldr	d0, [sp, #32]
    dbdc:	f01d fde4 	bl	2b7a8 <__d2b>
    dbe0:	901e      	str	r0, [sp, #120]	; 0x78
    dbe2:	2800      	cmp	r0, #0
    dbe4:	f000 8261 	beq.w	e0aa <_strtod_l+0x6f2>
    dbe8:	2101      	movs	r1, #1
    dbea:	4658      	mov	r0, fp
    dbec:	f01d fb26 	bl	2b23c <__i2b>
    dbf0:	4607      	mov	r7, r0
    dbf2:	2800      	cmp	r0, #0
    dbf4:	f000 8269 	beq.w	e0ca <_strtod_l+0x712>
    dbf8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    dbfa:	2b00      	cmp	r3, #0
    dbfc:	f2c0 8258 	blt.w	e0b0 <_strtod_l+0x6f8>
    dc00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    dc02:	9d11      	ldr	r5, [sp, #68]	; 0x44
    dc04:	189e      	adds	r6, r3, r2
    dc06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    dc08:	9c20      	ldr	r4, [sp, #128]	; 0x80
    dc0a:	1a9b      	subs	r3, r3, r2
    dc0c:	4a7d      	ldr	r2, [pc, #500]	; (de04 <_strtod_l+0x44c>)
    dc0e:	4423      	add	r3, r4
    dc10:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
    dc14:	3b01      	subs	r3, #1
    dc16:	4293      	cmp	r3, r2
    dc18:	f280 820c 	bge.w	e034 <_strtod_l+0x67c>
    dc1c:	1ad2      	subs	r2, r2, r3
    dc1e:	2a1f      	cmp	r2, #31
    dc20:	eba4 0402 	sub.w	r4, r4, r2
    dc24:	f300 827c 	bgt.w	e120 <_strtod_l+0x768>
    dc28:	2301      	movs	r3, #1
    dc2a:	2100      	movs	r1, #0
    dc2c:	4093      	lsls	r3, r2
    dc2e:	9115      	str	r1, [sp, #84]	; 0x54
    dc30:	930c      	str	r3, [sp, #48]	; 0x30
    dc32:	4425      	add	r5, r4
    dc34:	4434      	add	r4, r6
    dc36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dc38:	42a6      	cmp	r6, r4
    dc3a:	441d      	add	r5, r3
    dc3c:	4633      	mov	r3, r6
    dc3e:	bfa8      	it	ge
    dc40:	4623      	movge	r3, r4
    dc42:	42ab      	cmp	r3, r5
    dc44:	bfa8      	it	ge
    dc46:	462b      	movge	r3, r5
    dc48:	2b00      	cmp	r3, #0
    dc4a:	dd02      	ble.n	dc52 <_strtod_l+0x29a>
    dc4c:	1ae4      	subs	r4, r4, r3
    dc4e:	1aed      	subs	r5, r5, r3
    dc50:	1af6      	subs	r6, r6, r3
    dc52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dc54:	2b00      	cmp	r3, #0
    dc56:	f300 8208 	bgt.w	e06a <_strtod_l+0x6b2>
    dc5a:	2c00      	cmp	r4, #0
    dc5c:	f300 821c 	bgt.w	e098 <_strtod_l+0x6e0>
    dc60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dc62:	2b00      	cmp	r3, #0
    dc64:	f300 8228 	bgt.w	e0b8 <_strtod_l+0x700>
    dc68:	2d00      	cmp	r5, #0
    dc6a:	f300 824f 	bgt.w	e10c <_strtod_l+0x754>
    dc6e:	2e00      	cmp	r6, #0
    dc70:	dd08      	ble.n	dc84 <_strtod_l+0x2cc>
    dc72:	4639      	mov	r1, r7
    dc74:	4632      	mov	r2, r6
    dc76:	4658      	mov	r0, fp
    dc78:	f01d fbdc 	bl	2b434 <__lshift>
    dc7c:	4607      	mov	r7, r0
    dc7e:	2800      	cmp	r0, #0
    dc80:	f000 8223 	beq.w	e0ca <_strtod_l+0x712>
    dc84:	464a      	mov	r2, r9
    dc86:	991e      	ldr	r1, [sp, #120]	; 0x78
    dc88:	4658      	mov	r0, fp
    dc8a:	f01d fc59 	bl	2b540 <__mdiff>
    dc8e:	4682      	mov	sl, r0
    dc90:	2800      	cmp	r0, #0
    dc92:	f000 821a 	beq.w	e0ca <_strtod_l+0x712>
    dc96:	2300      	movs	r3, #0
    dc98:	68c2      	ldr	r2, [r0, #12]
    dc9a:	4639      	mov	r1, r7
    dc9c:	60c3      	str	r3, [r0, #12]
    dc9e:	9210      	str	r2, [sp, #64]	; 0x40
    dca0:	f01d fc30 	bl	2b504 <__mcmp>
    dca4:	2800      	cmp	r0, #0
    dca6:	f2c0 853c 	blt.w	e722 <_strtod_l+0xd6a>
    dcaa:	f000 84bf 	beq.w	e62c <_strtod_l+0xc74>
    dcae:	4639      	mov	r1, r7
    dcb0:	4650      	mov	r0, sl
    dcb2:	f01d fdd5 	bl	2b860 <__ratio>
    dcb6:	2200      	movs	r2, #0
    dcb8:	ee10 0a10 	vmov	r0, s0
    dcbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dcc0:	ec55 4b10 	vmov	r4, r5, d0
    dcc4:	4629      	mov	r1, r5
    dcc6:	f7fe fce1 	bl	c68c <__aeabi_dcmple>
    dcca:	2800      	cmp	r0, #0
    dccc:	f000 81b7 	beq.w	e03e <_strtod_l+0x686>
    dcd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dcd2:	2b00      	cmp	r3, #0
    dcd4:	f000 822f 	beq.w	e136 <_strtod_l+0x77e>
    dcd8:	2300      	movs	r3, #0
    dcda:	4c4b      	ldr	r4, [pc, #300]	; (de08 <_strtod_l+0x450>)
    dcdc:	4d4a      	ldr	r5, [pc, #296]	; (de08 <_strtod_l+0x450>)
    dcde:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    dce2:	9b05      	ldr	r3, [sp, #20]
    dce4:	2400      	movs	r4, #0
    dce6:	4698      	mov	r8, r3
    dce8:	4e48      	ldr	r6, [pc, #288]	; (de0c <_strtod_l+0x454>)
    dcea:	4b49      	ldr	r3, [pc, #292]	; (de10 <_strtod_l+0x458>)
    dcec:	ea08 0606 	and.w	r6, r8, r6
    dcf0:	429e      	cmp	r6, r3
    dcf2:	f000 825f 	beq.w	e1b4 <_strtod_l+0x7fc>
    dcf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dcf8:	b323      	cbz	r3, dd44 <_strtod_l+0x38c>
    dcfa:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
    dcfe:	d821      	bhi.n	dd44 <_strtod_l+0x38c>
    dd00:	4620      	mov	r0, r4
    dd02:	4629      	mov	r1, r5
    dd04:	a33c      	add	r3, pc, #240	; (adr r3, ddf8 <_strtod_l+0x440>)
    dd06:	e9d3 2300 	ldrd	r2, r3, [r3]
    dd0a:	f7fe fcbf 	bl	c68c <__aeabi_dcmple>
    dd0e:	b1a0      	cbz	r0, dd3a <_strtod_l+0x382>
    dd10:	4629      	mov	r1, r5
    dd12:	4620      	mov	r0, r4
    dd14:	f7ff fa96 	bl	d244 <__aeabi_d2uiz>
    dd18:	2801      	cmp	r0, #1
    dd1a:	bf38      	it	cc
    dd1c:	2001      	movcc	r0, #1
    dd1e:	f7fe fbd1 	bl	c4c4 <__aeabi_ui2d>
    dd22:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dd24:	4604      	mov	r4, r0
    dd26:	460d      	mov	r5, r1
    dd28:	2b00      	cmp	r3, #0
    dd2a:	f000 829c 	beq.w	e266 <_strtod_l+0x8ae>
    dd2e:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
    dd32:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    dd36:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    dd3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dd3c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
    dd40:	1b9b      	subs	r3, r3, r6
    dd42:	930d      	str	r3, [sp, #52]	; 0x34
    dd44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    dd48:	ed9d 0b08 	vldr	d0, [sp, #32]
    dd4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    dd50:	f01d fc96 	bl	2b680 <__ulp>
    dd54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    dd58:	ec53 2b10 	vmov	r2, r3, d0
    dd5c:	f7ff f84a 	bl	cdf4 <__aeabi_dmul>
    dd60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    dd64:	f7fe fa72 	bl	c24c <__adddf3>
    dd68:	4602      	mov	r2, r0
    dd6a:	460b      	mov	r3, r1
    dd6c:	4688      	mov	r8, r1
    dd6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    dd72:	4b26      	ldr	r3, [pc, #152]	; (de0c <_strtod_l+0x454>)
    dd74:	ea08 0303 	and.w	r3, r8, r3
    dd78:	42b3      	cmp	r3, r6
    dd7a:	d103      	bne.n	dd84 <_strtod_l+0x3cc>
    dd7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dd7e:	2b00      	cmp	r3, #0
    dd80:	f000 82af 	beq.w	e2e2 <_strtod_l+0x92a>
    dd84:	991e      	ldr	r1, [sp, #120]	; 0x78
    dd86:	4658      	mov	r0, fp
    dd88:	f01d f96a 	bl	2b060 <_Bfree>
    dd8c:	4649      	mov	r1, r9
    dd8e:	4658      	mov	r0, fp
    dd90:	f01d f966 	bl	2b060 <_Bfree>
    dd94:	4639      	mov	r1, r7
    dd96:	4658      	mov	r0, fp
    dd98:	f01d f962 	bl	2b060 <_Bfree>
    dd9c:	4651      	mov	r1, sl
    dd9e:	4658      	mov	r0, fp
    dda0:	f01d f95e 	bl	2b060 <_Bfree>
    dda4:	e700      	b.n	dba8 <_strtod_l+0x1f0>
    dda6:	f04f 0c01 	mov.w	ip, #1
    ddaa:	f026 0320 	bic.w	r3, r6, #32
    ddae:	2b45      	cmp	r3, #69	; 0x45
    ddb0:	f040 80b2 	bne.w	df18 <_strtod_l+0x560>
    ddb4:	ea44 0300 	orr.w	r3, r4, r0
    ddb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ddba:	4313      	orrs	r3, r2
    ddbc:	d142      	bne.n	de44 <_strtod_l+0x48c>
    ddbe:	9b07      	ldr	r3, [sp, #28]
    ddc0:	b16b      	cbz	r3, ddde <_strtod_l+0x426>
    ddc2:	f04f 0800 	mov.w	r8, #0
    ddc6:	f04f 0900 	mov.w	r9, #0
    ddca:	601f      	str	r7, [r3, #0]
    ddcc:	ec49 8b10 	vmov	d0, r8, r9
    ddd0:	b023      	add	sp, #140	; 0x8c
    ddd2:	ecbd 8b02 	vpop	{d8}
    ddd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddda:	931d      	str	r3, [sp, #116]	; 0x74
    dddc:	e604      	b.n	d9e8 <_strtod_l+0x30>
    ddde:	f04f 0800 	mov.w	r8, #0
    dde2:	f04f 0900 	mov.w	r9, #0
    dde6:	ec49 8b10 	vmov	d0, r8, r9
    ddea:	b023      	add	sp, #140	; 0x8c
    ddec:	ecbd 8b02 	vpop	{d8}
    ddf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddf4:	f3af 8000 	nop.w
    ddf8:	ffc00000 	.word	0xffc00000
    ddfc:	41dfffff 	.word	0x41dfffff
    de00:	0002f158 	.word	0x0002f158
    de04:	fffffc02 	.word	0xfffffc02
    de08:	3ff00000 	.word	0x3ff00000
    de0c:	7ff00000 	.word	0x7ff00000
    de10:	7fe00000 	.word	0x7fe00000
    de14:	f89a 3001 	ldrb.w	r3, [sl, #1]
    de18:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    de1c:	2b58      	cmp	r3, #88	; 0x58
    de1e:	f000 82e3 	beq.w	e3e8 <_strtod_l+0xa30>
    de22:	4653      	mov	r3, sl
    de24:	3301      	adds	r3, #1
    de26:	931d      	str	r3, [sp, #116]	; 0x74
    de28:	781e      	ldrb	r6, [r3, #0]
    de2a:	2e30      	cmp	r6, #48	; 0x30
    de2c:	d0fa      	beq.n	de24 <_strtod_l+0x46c>
    de2e:	469a      	mov	sl, r3
    de30:	2e00      	cmp	r6, #0
    de32:	f000 80d2 	beq.w	dfda <_strtod_l+0x622>
    de36:	2301      	movs	r3, #1
    de38:	930b      	str	r3, [sp, #44]	; 0x2c
    de3a:	e614      	b.n	da66 <_strtod_l+0xae>
    de3c:	2000      	movs	r0, #0
    de3e:	46a6      	mov	lr, r4
    de40:	4684      	mov	ip, r0
    de42:	9008      	str	r0, [sp, #32]
    de44:	9f1d      	ldr	r7, [sp, #116]	; 0x74
    de46:	1c7b      	adds	r3, r7, #1
    de48:	931d      	str	r3, [sp, #116]	; 0x74
    de4a:	787e      	ldrb	r6, [r7, #1]
    de4c:	2e2b      	cmp	r6, #43	; 0x2b
    de4e:	f000 826c 	beq.w	e32a <_strtod_l+0x972>
    de52:	2e2d      	cmp	r6, #45	; 0x2d
    de54:	f000 8194 	beq.w	e180 <_strtod_l+0x7c8>
    de58:	f04f 0800 	mov.w	r8, #0
    de5c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    de60:	2b09      	cmp	r3, #9
    de62:	f200 8193 	bhi.w	e18c <_strtod_l+0x7d4>
    de66:	2e30      	cmp	r6, #48	; 0x30
    de68:	d105      	bne.n	de76 <_strtod_l+0x4be>
    de6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    de6c:	3301      	adds	r3, #1
    de6e:	931d      	str	r3, [sp, #116]	; 0x74
    de70:	781e      	ldrb	r6, [r3, #0]
    de72:	2e30      	cmp	r6, #48	; 0x30
    de74:	d0fa      	beq.n	de6c <_strtod_l+0x4b4>
    de76:	f1a6 0331 	sub.w	r3, r6, #49	; 0x31
    de7a:	2b08      	cmp	r3, #8
    de7c:	d84c      	bhi.n	df18 <_strtod_l+0x560>
    de7e:	991d      	ldr	r1, [sp, #116]	; 0x74
    de80:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    de84:	1c4a      	adds	r2, r1, #1
    de86:	910c      	str	r1, [sp, #48]	; 0x30
    de88:	921d      	str	r2, [sp, #116]	; 0x74
    de8a:	784e      	ldrb	r6, [r1, #1]
    de8c:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
    de90:	2909      	cmp	r1, #9
    de92:	f200 8307 	bhi.w	e4a4 <_strtod_l+0xaec>
    de96:	3201      	adds	r2, #1
    de98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    de9c:	921d      	str	r2, [sp, #116]	; 0x74
    de9e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    dea2:	7816      	ldrb	r6, [r2, #0]
    dea4:	3b30      	subs	r3, #48	; 0x30
    dea6:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
    deaa:	2909      	cmp	r1, #9
    deac:	d9f3      	bls.n	de96 <_strtod_l+0x4de>
    deae:	990c      	ldr	r1, [sp, #48]	; 0x30
    deb0:	1a52      	subs	r2, r2, r1
    deb2:	2a08      	cmp	r2, #8
    deb4:	f340 82f6 	ble.w	e4a4 <_strtod_l+0xaec>
    deb8:	f644 631f 	movw	r3, #19999	; 0x4e1f
    debc:	930c      	str	r3, [sp, #48]	; 0x30
    debe:	f1b8 0f00 	cmp.w	r8, #0
    dec2:	d002      	beq.n	deca <_strtod_l+0x512>
    dec4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dec6:	425b      	negs	r3, r3
    dec8:	930c      	str	r3, [sp, #48]	; 0x30
    deca:	2c00      	cmp	r4, #0
    decc:	f040 82d5 	bne.w	e47a <_strtod_l+0xac2>
    ded0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ded2:	4303      	orrs	r3, r0
    ded4:	f040 8081 	bne.w	dfda <_strtod_l+0x622>
    ded8:	f1bc 0f00 	cmp.w	ip, #0
    dedc:	f47f af6f 	bne.w	ddbe <_strtod_l+0x406>
    dee0:	2e69      	cmp	r6, #105	; 0x69
    dee2:	f000 81d3 	beq.w	e28c <_strtod_l+0x8d4>
    dee6:	dc1a      	bgt.n	df1e <_strtod_l+0x566>
    dee8:	2e49      	cmp	r6, #73	; 0x49
    deea:	f000 81cf 	beq.w	e28c <_strtod_l+0x8d4>
    deee:	2e4e      	cmp	r6, #78	; 0x4e
    def0:	f47f af65 	bne.w	ddbe <_strtod_l+0x406>
    def4:	49a7      	ldr	r1, [pc, #668]	; (e194 <_strtod_l+0x7dc>)
    def6:	a81d      	add	r0, sp, #116	; 0x74
    def8:	f01c fe4c 	bl	2ab94 <__match>
    defc:	2800      	cmp	r0, #0
    defe:	f43f af5e 	beq.w	ddbe <_strtod_l+0x406>
    df02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    df04:	781b      	ldrb	r3, [r3, #0]
    df06:	2b28      	cmp	r3, #40	; 0x28
    df08:	f000 83f8 	beq.w	e6fc <_strtod_l+0xd44>
    df0c:	48a2      	ldr	r0, [pc, #648]	; (e198 <_strtod_l+0x7e0>)
    df0e:	f003 fa2f 	bl	11370 <nan>
    df12:	ec59 8b10 	vmov	r8, r9, d0
    df16:	e064      	b.n	dfe2 <_strtod_l+0x62a>
    df18:	2300      	movs	r3, #0
    df1a:	930c      	str	r3, [sp, #48]	; 0x30
    df1c:	e7d5      	b.n	deca <_strtod_l+0x512>
    df1e:	2e6e      	cmp	r6, #110	; 0x6e
    df20:	d0e8      	beq.n	def4 <_strtod_l+0x53c>
    df22:	e74c      	b.n	ddbe <_strtod_l+0x406>
    df24:	eba8 0306 	sub.w	r3, r8, r6
    df28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    df2a:	189d      	adds	r5, r3, r2
    df2c:	2d00      	cmp	r5, #0
    df2e:	f73f ae0d 	bgt.w	db4c <_strtod_l+0x194>
    df32:	f43f ae1d 	beq.w	db70 <_strtod_l+0x1b8>
    df36:	426d      	negs	r5, r5
    df38:	f015 020f 	ands.w	r2, r5, #15
    df3c:	d00a      	beq.n	df54 <_strtod_l+0x59c>
    df3e:	4b97      	ldr	r3, [pc, #604]	; (e19c <_strtod_l+0x7e4>)
    df40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    df44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    df48:	e9d3 2300 	ldrd	r2, r3, [r3]
    df4c:	f7ff f87c 	bl	d048 <__aeabi_ddiv>
    df50:	e9cd 0104 	strd	r0, r1, [sp, #16]
    df54:	112d      	asrs	r5, r5, #4
    df56:	f43f ae0b 	beq.w	db70 <_strtod_l+0x1b8>
    df5a:	2d1f      	cmp	r5, #31
    df5c:	dc3a      	bgt.n	dfd4 <_strtod_l+0x61c>
    df5e:	f015 0310 	ands.w	r3, r5, #16
    df62:	4e8f      	ldr	r6, [pc, #572]	; (e1a0 <_strtod_l+0x7e8>)
    df64:	f04f 0700 	mov.w	r7, #0
    df68:	bf18      	it	ne
    df6a:	236a      	movne	r3, #106	; 0x6a
    df6c:	930b      	str	r3, [sp, #44]	; 0x2c
    df6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    df72:	f015 0f01 	tst.w	r5, #1
    df76:	4610      	mov	r0, r2
    df78:	4619      	mov	r1, r3
    df7a:	d006      	beq.n	df8a <_strtod_l+0x5d2>
    df7c:	2701      	movs	r7, #1
    df7e:	e9d6 2300 	ldrd	r2, r3, [r6]
    df82:	f7fe ff37 	bl	cdf4 <__aeabi_dmul>
    df86:	4602      	mov	r2, r0
    df88:	460b      	mov	r3, r1
    df8a:	106d      	asrs	r5, r5, #1
    df8c:	f106 0608 	add.w	r6, r6, #8
    df90:	d1ef      	bne.n	df72 <_strtod_l+0x5ba>
    df92:	b10f      	cbz	r7, df98 <_strtod_l+0x5e0>
    df94:	e9cd 2304 	strd	r2, r3, [sp, #16]
    df98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    df9a:	b193      	cbz	r3, dfc2 <_strtod_l+0x60a>
    df9c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    dfa0:	f3c2 530a 	ubfx	r3, r2, #20, #11
    dfa4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    dfa8:	2b00      	cmp	r3, #0
    dfaa:	dd0a      	ble.n	dfc2 <_strtod_l+0x60a>
    dfac:	2b1f      	cmp	r3, #31
    dfae:	f340 8450 	ble.w	e852 <_strtod_l+0xe9a>
    dfb2:	2100      	movs	r1, #0
    dfb4:	2b34      	cmp	r3, #52	; 0x34
    dfb6:	9104      	str	r1, [sp, #16]
    dfb8:	f340 8457 	ble.w	e86a <_strtod_l+0xeb2>
    dfbc:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    dfc0:	9305      	str	r3, [sp, #20]
    dfc2:	2200      	movs	r2, #0
    dfc4:	2300      	movs	r3, #0
    dfc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    dfca:	f7fe fb4b 	bl	c664 <__aeabi_dcmpeq>
    dfce:	2800      	cmp	r0, #0
    dfd0:	f43f add0 	beq.w	db74 <_strtod_l+0x1bc>
    dfd4:	2322      	movs	r3, #34	; 0x22
    dfd6:	f8cb 3000 	str.w	r3, [fp]
    dfda:	f04f 0800 	mov.w	r8, #0
    dfde:	f04f 0900 	mov.w	r9, #0
    dfe2:	9a07      	ldr	r2, [sp, #28]
    dfe4:	b10a      	cbz	r2, dfea <_strtod_l+0x632>
    dfe6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    dfe8:	6013      	str	r3, [r2, #0]
    dfea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dfec:	2b00      	cmp	r3, #0
    dfee:	f43f aeed 	beq.w	ddcc <_strtod_l+0x414>
    dff2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
    dff6:	4699      	mov	r9, r3
    dff8:	ec49 8b10 	vmov	d0, r8, r9
    dffc:	b023      	add	sp, #140	; 0x8c
    dffe:	ecbd 8b02 	vpop	{d8}
    e002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e006:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e008:	46a6      	mov	lr, r4
    e00a:	9008      	str	r0, [sp, #32]
    e00c:	eb03 0208 	add.w	r2, r3, r8
    e010:	921d      	str	r2, [sp, #116]	; 0x74
    e012:	f813 6008 	ldrb.w	r6, [r3, r8]
    e016:	f1a6 0230 	sub.w	r2, r6, #48	; 0x30
    e01a:	2a09      	cmp	r2, #9
    e01c:	f63f aec3 	bhi.w	dda6 <_strtod_l+0x3ee>
    e020:	3001      	adds	r0, #1
    e022:	4690      	mov	r8, r2
    e024:	2a00      	cmp	r2, #0
    e026:	f040 81fe 	bne.w	e426 <_strtod_l+0xa6e>
    e02a:	991d      	ldr	r1, [sp, #116]	; 0x74
    e02c:	1c4b      	adds	r3, r1, #1
    e02e:	931d      	str	r3, [sp, #116]	; 0x74
    e030:	784e      	ldrb	r6, [r1, #1]
    e032:	e7f0      	b.n	e016 <_strtod_l+0x65e>
    e034:	2300      	movs	r3, #0
    e036:	9315      	str	r3, [sp, #84]	; 0x54
    e038:	2301      	movs	r3, #1
    e03a:	930c      	str	r3, [sp, #48]	; 0x30
    e03c:	e5f9      	b.n	dc32 <_strtod_l+0x27a>
    e03e:	4620      	mov	r0, r4
    e040:	4629      	mov	r1, r5
    e042:	4b58      	ldr	r3, [pc, #352]	; (e1a4 <_strtod_l+0x7ec>)
    e044:	2200      	movs	r2, #0
    e046:	f7fe fed5 	bl	cdf4 <__aeabi_dmul>
    e04a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e04c:	4604      	mov	r4, r0
    e04e:	460d      	mov	r5, r1
    e050:	2b00      	cmp	r3, #0
    e052:	d16d      	bne.n	e130 <_strtod_l+0x778>
    e054:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    e058:	9012      	str	r0, [sp, #72]	; 0x48
    e05a:	9313      	str	r3, [sp, #76]	; 0x4c
    e05c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    e060:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    e064:	9b05      	ldr	r3, [sp, #20]
    e066:	4698      	mov	r8, r3
    e068:	e63e      	b.n	dce8 <_strtod_l+0x330>
    e06a:	4639      	mov	r1, r7
    e06c:	461a      	mov	r2, r3
    e06e:	4658      	mov	r0, fp
    e070:	f01d f990 	bl	2b394 <__pow5mult>
    e074:	4607      	mov	r7, r0
    e076:	b340      	cbz	r0, e0ca <_strtod_l+0x712>
    e078:	4601      	mov	r1, r0
    e07a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    e07c:	4658      	mov	r0, fp
    e07e:	f01d f8e7 	bl	2b250 <__multiply>
    e082:	b310      	cbz	r0, e0ca <_strtod_l+0x712>
    e084:	9010      	str	r0, [sp, #64]	; 0x40
    e086:	4658      	mov	r0, fp
    e088:	991e      	ldr	r1, [sp, #120]	; 0x78
    e08a:	f01c ffe9 	bl	2b060 <_Bfree>
    e08e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e090:	2c00      	cmp	r4, #0
    e092:	931e      	str	r3, [sp, #120]	; 0x78
    e094:	f77f ade4 	ble.w	dc60 <_strtod_l+0x2a8>
    e098:	4622      	mov	r2, r4
    e09a:	991e      	ldr	r1, [sp, #120]	; 0x78
    e09c:	4658      	mov	r0, fp
    e09e:	f01d f9c9 	bl	2b434 <__lshift>
    e0a2:	901e      	str	r0, [sp, #120]	; 0x78
    e0a4:	2800      	cmp	r0, #0
    e0a6:	f47f addb 	bne.w	dc60 <_strtod_l+0x2a8>
    e0aa:	4656      	mov	r6, sl
    e0ac:	46ca      	mov	sl, r9
    e0ae:	e00f      	b.n	e0d0 <_strtod_l+0x718>
    e0b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e0b2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    e0b4:	1ad5      	subs	r5, r2, r3
    e0b6:	e5a6      	b.n	dc06 <_strtod_l+0x24e>
    e0b8:	4649      	mov	r1, r9
    e0ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e0bc:	4658      	mov	r0, fp
    e0be:	f01d f969 	bl	2b394 <__pow5mult>
    e0c2:	4681      	mov	r9, r0
    e0c4:	2800      	cmp	r0, #0
    e0c6:	f47f adcf 	bne.w	dc68 <_strtod_l+0x2b0>
    e0ca:	4656      	mov	r6, sl
    e0cc:	46ca      	mov	sl, r9
    e0ce:	981e      	ldr	r0, [sp, #120]	; 0x78
    e0d0:	4b35      	ldr	r3, [pc, #212]	; (e1a8 <_strtod_l+0x7f0>)
    e0d2:	2200      	movs	r2, #0
    e0d4:	9305      	str	r3, [sp, #20]
    e0d6:	2322      	movs	r3, #34	; 0x22
    e0d8:	9204      	str	r2, [sp, #16]
    e0da:	f8cb 3000 	str.w	r3, [fp]
    e0de:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e0e2:	4601      	mov	r1, r0
    e0e4:	4658      	mov	r0, fp
    e0e6:	f01c ffbb 	bl	2b060 <_Bfree>
    e0ea:	4651      	mov	r1, sl
    e0ec:	4658      	mov	r0, fp
    e0ee:	f01c ffb7 	bl	2b060 <_Bfree>
    e0f2:	4639      	mov	r1, r7
    e0f4:	4658      	mov	r0, fp
    e0f6:	f01c ffb3 	bl	2b060 <_Bfree>
    e0fa:	9914      	ldr	r1, [sp, #80]	; 0x50
    e0fc:	4658      	mov	r0, fp
    e0fe:	f01c ffaf 	bl	2b060 <_Bfree>
    e102:	4631      	mov	r1, r6
    e104:	4658      	mov	r0, fp
    e106:	f01c ffab 	bl	2b060 <_Bfree>
    e10a:	e76a      	b.n	dfe2 <_strtod_l+0x62a>
    e10c:	4649      	mov	r1, r9
    e10e:	462a      	mov	r2, r5
    e110:	4658      	mov	r0, fp
    e112:	f01d f98f 	bl	2b434 <__lshift>
    e116:	4681      	mov	r9, r0
    e118:	2800      	cmp	r0, #0
    e11a:	f47f ada8 	bne.w	dc6e <_strtod_l+0x2b6>
    e11e:	e7d4      	b.n	e0ca <_strtod_l+0x712>
    e120:	4922      	ldr	r1, [pc, #136]	; (e1ac <_strtod_l+0x7f4>)
    e122:	2201      	movs	r2, #1
    e124:	1acb      	subs	r3, r1, r3
    e126:	920c      	str	r2, [sp, #48]	; 0x30
    e128:	fa02 f303 	lsl.w	r3, r2, r3
    e12c:	9315      	str	r3, [sp, #84]	; 0x54
    e12e:	e580      	b.n	dc32 <_strtod_l+0x27a>
    e130:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    e134:	e792      	b.n	e05c <_strtod_l+0x6a4>
    e136:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e13a:	2900      	cmp	r1, #0
    e13c:	f040 8081 	bne.w	e242 <_strtod_l+0x88a>
    e140:	f3c2 0313 	ubfx	r3, r2, #0, #20
    e144:	4690      	mov	r8, r2
    e146:	2b00      	cmp	r3, #0
    e148:	f040 8081 	bne.w	e24e <_strtod_l+0x896>
    e14c:	2200      	movs	r2, #0
    e14e:	4b18      	ldr	r3, [pc, #96]	; (e1b0 <_strtod_l+0x7f8>)
    e150:	4620      	mov	r0, r4
    e152:	4629      	mov	r1, r5
    e154:	f7fe fa90 	bl	c678 <__aeabi_dcmplt>
    e158:	2800      	cmp	r0, #0
    e15a:	f040 8260 	bne.w	e61e <_strtod_l+0xc66>
    e15e:	4620      	mov	r0, r4
    e160:	4629      	mov	r1, r5
    e162:	4b10      	ldr	r3, [pc, #64]	; (e1a4 <_strtod_l+0x7ec>)
    e164:	2200      	movs	r2, #0
    e166:	f7fe fe45 	bl	cdf4 <__aeabi_dmul>
    e16a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    e16e:	4604      	mov	r4, r0
    e170:	460d      	mov	r5, r1
    e172:	901a      	str	r0, [sp, #104]	; 0x68
    e174:	931b      	str	r3, [sp, #108]	; 0x6c
    e176:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    e17a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    e17e:	e5b3      	b.n	dce8 <_strtod_l+0x330>
    e180:	f04f 0801 	mov.w	r8, #1
    e184:	1cbb      	adds	r3, r7, #2
    e186:	931d      	str	r3, [sp, #116]	; 0x74
    e188:	78be      	ldrb	r6, [r7, #2]
    e18a:	e667      	b.n	de5c <_strtod_l+0x4a4>
    e18c:	2300      	movs	r3, #0
    e18e:	971d      	str	r7, [sp, #116]	; 0x74
    e190:	930c      	str	r3, [sp, #48]	; 0x30
    e192:	e69a      	b.n	deca <_strtod_l+0x512>
    e194:	0002fa70 	.word	0x0002fa70
    e198:	0002f92c 	.word	0x0002f92c
    e19c:	0002f158 	.word	0x0002f158
    e1a0:	0002f108 	.word	0x0002f108
    e1a4:	3fe00000 	.word	0x3fe00000
    e1a8:	7ff00000 	.word	0x7ff00000
    e1ac:	fffffbe2 	.word	0xfffffbe2
    e1b0:	3ff00000 	.word	0x3ff00000
    e1b4:	f1a8 7354 	sub.w	r3, r8, #55574528	; 0x3500000
    e1b8:	9305      	str	r3, [sp, #20]
    e1ba:	ed9d 7b04 	vldr	d7, [sp, #16]
    e1be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    e1c2:	eeb0 8a47 	vmov.f32	s16, s14
    e1c6:	eef0 8a67 	vmov.f32	s17, s15
    e1ca:	eeb0 0a47 	vmov.f32	s0, s14
    e1ce:	eef0 0a67 	vmov.f32	s1, s15
    e1d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    e1d6:	f01d fa53 	bl	2b680 <__ulp>
    e1da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e1de:	ec53 2b10 	vmov	r2, r3, d0
    e1e2:	f7fe fe07 	bl	cdf4 <__aeabi_dmul>
    e1e6:	ec53 2b18 	vmov	r2, r3, d8
    e1ea:	f7fe f82f 	bl	c24c <__adddf3>
    e1ee:	460a      	mov	r2, r1
    e1f0:	4bb7      	ldr	r3, [pc, #732]	; (e4d0 <_strtod_l+0xb18>)
    e1f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    e1f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    e1fa:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    e1fe:	49b5      	ldr	r1, [pc, #724]	; (e4d4 <_strtod_l+0xb1c>)
    e200:	4011      	ands	r1, r2
    e202:	4299      	cmp	r1, r3
    e204:	d92a      	bls.n	e25c <_strtod_l+0x8a4>
    e206:	4ab4      	ldr	r2, [pc, #720]	; (e4d8 <_strtod_l+0xb20>)
    e208:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    e20c:	4291      	cmp	r1, r2
    e20e:	d103      	bne.n	e218 <_strtod_l+0x860>
    e210:	f1b0 3fff 	cmp.w	r0, #4294967295
    e214:	f43f af59 	beq.w	e0ca <_strtod_l+0x712>
    e218:	f04f 33ff 	mov.w	r3, #4294967295
    e21c:	49ae      	ldr	r1, [pc, #696]	; (e4d8 <_strtod_l+0xb20>)
    e21e:	e9cd 3104 	strd	r3, r1, [sp, #16]
    e222:	e5af      	b.n	dd84 <_strtod_l+0x3cc>
    e224:	2301      	movs	r3, #1
    e226:	930a      	str	r3, [sp, #40]	; 0x28
    e228:	f10a 0301 	add.w	r3, sl, #1
    e22c:	931d      	str	r3, [sp, #116]	; 0x74
    e22e:	f89a 6001 	ldrb.w	r6, [sl, #1]
    e232:	2e00      	cmp	r6, #0
    e234:	f43f adc3 	beq.w	ddbe <_strtod_l+0x406>
    e238:	469a      	mov	sl, r3
    e23a:	e40f      	b.n	da5c <_strtod_l+0xa4>
    e23c:	2300      	movs	r3, #0
    e23e:	930a      	str	r3, [sp, #40]	; 0x28
    e240:	e7f2      	b.n	e228 <_strtod_l+0x870>
    e242:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e246:	2901      	cmp	r1, #1
    e248:	f000 811b 	beq.w	e482 <_strtod_l+0xaca>
    e24c:	4690      	mov	r8, r2
    e24e:	4ca3      	ldr	r4, [pc, #652]	; (e4dc <_strtod_l+0xb24>)
    e250:	2300      	movs	r3, #0
    e252:	4da3      	ldr	r5, [pc, #652]	; (e4e0 <_strtod_l+0xb28>)
    e254:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    e258:	2400      	movs	r4, #0
    e25a:	e545      	b.n	dce8 <_strtod_l+0x330>
    e25c:	f102 7854 	add.w	r8, r2, #55574528	; 0x3500000
    e260:	f8cd 8014 	str.w	r8, [sp, #20]
    e264:	e585      	b.n	dd72 <_strtod_l+0x3ba>
    e266:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    e26a:	9016      	str	r0, [sp, #88]	; 0x58
    e26c:	9317      	str	r3, [sp, #92]	; 0x5c
    e26e:	e560      	b.n	dd32 <_strtod_l+0x37a>
    e270:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
    e274:	f340 813e 	ble.w	e4f4 <_strtod_l+0xb3c>
    e278:	4b96      	ldr	r3, [pc, #600]	; (e4d4 <_strtod_l+0xb1c>)
    e27a:	2200      	movs	r2, #0
    e27c:	9305      	str	r3, [sp, #20]
    e27e:	2322      	movs	r3, #34	; 0x22
    e280:	9204      	str	r2, [sp, #16]
    e282:	f8cb 3000 	str.w	r3, [fp]
    e286:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e28a:	e6aa      	b.n	dfe2 <_strtod_l+0x62a>
    e28c:	4995      	ldr	r1, [pc, #596]	; (e4e4 <_strtod_l+0xb2c>)
    e28e:	a81d      	add	r0, sp, #116	; 0x74
    e290:	f01c fc80 	bl	2ab94 <__match>
    e294:	2800      	cmp	r0, #0
    e296:	f43f ad92 	beq.w	ddbe <_strtod_l+0x406>
    e29a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e29c:	a81d      	add	r0, sp, #116	; 0x74
    e29e:	4992      	ldr	r1, [pc, #584]	; (e4e8 <_strtod_l+0xb30>)
    e2a0:	3b01      	subs	r3, #1
    e2a2:	931d      	str	r3, [sp, #116]	; 0x74
    e2a4:	f01c fc76 	bl	2ab94 <__match>
    e2a8:	b910      	cbnz	r0, e2b0 <_strtod_l+0x8f8>
    e2aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e2ac:	3301      	adds	r3, #1
    e2ae:	931d      	str	r3, [sp, #116]	; 0x74
    e2b0:	2300      	movs	r3, #0
    e2b2:	4888      	ldr	r0, [pc, #544]	; (e4d4 <_strtod_l+0xb1c>)
    e2b4:	e9cd 3004 	strd	r3, r0, [sp, #16]
    e2b8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e2bc:	e691      	b.n	dfe2 <_strtod_l+0x62a>
    e2be:	3316      	adds	r3, #22
    e2c0:	f6ff ae30 	blt.w	df24 <_strtod_l+0x56c>
    e2c4:	9b08      	ldr	r3, [sp, #32]
    e2c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e2c8:	1a9a      	subs	r2, r3, r2
    e2ca:	4b88      	ldr	r3, [pc, #544]	; (e4ec <_strtod_l+0xb34>)
    e2cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    e2d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    e2d8:	f7fe feb6 	bl	d048 <__aeabi_ddiv>
    e2dc:	4680      	mov	r8, r0
    e2de:	4689      	mov	r9, r1
    e2e0:	e67f      	b.n	dfe2 <_strtod_l+0x62a>
    e2e2:	4620      	mov	r0, r4
    e2e4:	4629      	mov	r1, r5
    e2e6:	f7fe ffcd 	bl	d284 <__aeabi_d2lz>
    e2ea:	f7fe f937 	bl	c55c <__aeabi_l2d>
    e2ee:	460b      	mov	r3, r1
    e2f0:	4602      	mov	r2, r0
    e2f2:	4629      	mov	r1, r5
    e2f4:	4620      	mov	r0, r4
    e2f6:	f7fd ffa7 	bl	c248 <__aeabi_dsub>
    e2fa:	9c04      	ldr	r4, [sp, #16]
    e2fc:	9e10      	ldr	r6, [sp, #64]	; 0x40
    e2fe:	f3c8 0c13 	ubfx	ip, r8, #0, #20
    e302:	460d      	mov	r5, r1
    e304:	4326      	orrs	r6, r4
    e306:	4604      	mov	r4, r0
    e308:	ea56 030c 	orrs.w	r3, r6, ip
    e30c:	d15a      	bne.n	e3c4 <_strtod_l+0xa0c>
    e30e:	a36a      	add	r3, pc, #424	; (adr r3, e4b8 <_strtod_l+0xb00>)
    e310:	e9d3 2300 	ldrd	r2, r3, [r3]
    e314:	f7fe f9b0 	bl	c678 <__aeabi_dcmplt>
    e318:	2800      	cmp	r0, #0
    e31a:	f43f ad33 	beq.w	dd84 <_strtod_l+0x3cc>
    e31e:	4656      	mov	r6, sl
    e320:	981e      	ldr	r0, [sp, #120]	; 0x78
    e322:	46ca      	mov	sl, r9
    e324:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e328:	e6db      	b.n	e0e2 <_strtod_l+0x72a>
    e32a:	f04f 0800 	mov.w	r8, #0
    e32e:	e729      	b.n	e184 <_strtod_l+0x7cc>
    e330:	9908      	ldr	r1, [sp, #32]
    e332:	4642      	mov	r2, r8
    e334:	4650      	mov	r0, sl
    e336:	f018 fc9d 	bl	26c74 <strncmp>
    e33a:	4686      	mov	lr, r0
    e33c:	2800      	cmp	r0, #0
    e33e:	f040 82ab 	bne.w	e898 <_strtod_l+0xee0>
    e342:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    e344:	eb02 0308 	add.w	r3, r2, r8
    e348:	931d      	str	r3, [sp, #116]	; 0x74
    e34a:	f812 6008 	ldrb.w	r6, [r2, r8]
    e34e:	2e30      	cmp	r6, #48	; 0x30
    e350:	f040 8157 	bne.w	e602 <_strtod_l+0xc4a>
    e354:	f1c3 0201 	rsb	r2, r3, #1
    e358:	1898      	adds	r0, r3, r2
    e35a:	3301      	adds	r3, #1
    e35c:	931d      	str	r3, [sp, #116]	; 0x74
    e35e:	781e      	ldrb	r6, [r3, #0]
    e360:	2e30      	cmp	r6, #48	; 0x30
    e362:	d0f9      	beq.n	e358 <_strtod_l+0x9a0>
    e364:	f1a6 0331 	sub.w	r3, r6, #49	; 0x31
    e368:	2b08      	cmp	r3, #8
    e36a:	d80f      	bhi.n	e38c <_strtod_l+0x9d4>
    e36c:	991d      	ldr	r1, [sp, #116]	; 0x74
    e36e:	f04f 0900 	mov.w	r9, #0
    e372:	1c43      	adds	r3, r0, #1
    e374:	f1a6 0830 	sub.w	r8, r6, #48	; 0x30
    e378:	468a      	mov	sl, r1
    e37a:	464d      	mov	r5, r9
    e37c:	2401      	movs	r4, #1
    e37e:	9308      	str	r3, [sp, #32]
    e380:	eb09 0989 	add.w	r9, r9, r9, lsl #2
    e384:	2000      	movs	r0, #0
    e386:	eb08 0949 	add.w	r9, r8, r9, lsl #1
    e38a:	e64f      	b.n	e02c <_strtod_l+0x674>
    e38c:	2300      	movs	r3, #0
    e38e:	f04f 0c01 	mov.w	ip, #1
    e392:	461c      	mov	r4, r3
    e394:	4699      	mov	r9, r3
    e396:	461d      	mov	r5, r3
    e398:	9308      	str	r3, [sp, #32]
    e39a:	e506      	b.n	ddaa <_strtod_l+0x3f2>
    e39c:	e9dd 1320 	ldrd	r1, r3, [sp, #128]	; 0x80
    e3a0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    e3a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    e3a6:	9104      	str	r1, [sp, #16]
    e3a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
    e3ac:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    e3b0:	9305      	str	r3, [sp, #20]
    e3b2:	0724      	lsls	r4, r4, #28
    e3b4:	d503      	bpl.n	e3be <_strtod_l+0xa06>
    e3b6:	9b05      	ldr	r3, [sp, #20]
    e3b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e3bc:	9305      	str	r3, [sp, #20]
    e3be:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e3c2:	e60e      	b.n	dfe2 <_strtod_l+0x62a>
    e3c4:	a33e      	add	r3, pc, #248	; (adr r3, e4c0 <_strtod_l+0xb08>)
    e3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3ca:	f7fe f955 	bl	c678 <__aeabi_dcmplt>
    e3ce:	2800      	cmp	r0, #0
    e3d0:	d1a5      	bne.n	e31e <_strtod_l+0x966>
    e3d2:	4620      	mov	r0, r4
    e3d4:	4629      	mov	r1, r5
    e3d6:	a33c      	add	r3, pc, #240	; (adr r3, e4c8 <_strtod_l+0xb10>)
    e3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3dc:	f7fe f96a 	bl	c6b4 <__aeabi_dcmpgt>
    e3e0:	2800      	cmp	r0, #0
    e3e2:	f43f accf 	beq.w	dd84 <_strtod_l+0x3cc>
    e3e6:	e79a      	b.n	e31e <_strtod_l+0x966>
    e3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e3ea:	aa1e      	add	r2, sp, #120	; 0x78
    e3ec:	9402      	str	r4, [sp, #8]
    e3ee:	a91d      	add	r1, sp, #116	; 0x74
    e3f0:	9301      	str	r3, [sp, #4]
    e3f2:	4658      	mov	r0, fp
    e3f4:	9200      	str	r2, [sp, #0]
    e3f6:	ab1f      	add	r3, sp, #124	; 0x7c
    e3f8:	4a3d      	ldr	r2, [pc, #244]	; (e4f0 <_strtod_l+0xb38>)
    e3fa:	f01c f921 	bl	2a640 <__gethex>
    e3fe:	f010 0507 	ands.w	r5, r0, #7
    e402:	4604      	mov	r4, r0
    e404:	f43f ade9 	beq.w	dfda <_strtod_l+0x622>
    e408:	2d06      	cmp	r5, #6
    e40a:	f040 80c8 	bne.w	e59e <_strtod_l+0xbe6>
    e40e:	9a07      	ldr	r2, [sp, #28]
    e410:	f10a 0301 	add.w	r3, sl, #1
    e414:	2a00      	cmp	r2, #0
    e416:	f43f ace2 	beq.w	ddde <_strtod_l+0x426>
    e41a:	f04f 0800 	mov.w	r8, #0
    e41e:	f04f 0900 	mov.w	r9, #0
    e422:	6013      	str	r3, [r2, #0]
    e424:	e4d2      	b.n	ddcc <_strtod_l+0x414>
    e426:	9b08      	ldr	r3, [sp, #32]
    e428:	2801      	cmp	r0, #1
    e42a:	991d      	ldr	r1, [sp, #116]	; 0x74
    e42c:	f104 0601 	add.w	r6, r4, #1
    e430:	4403      	add	r3, r0
    e432:	9308      	str	r3, [sp, #32]
    e434:	f000 822d 	beq.w	e892 <_strtod_l+0xeda>
    e438:	4420      	add	r0, r4
    e43a:	f100 3cff 	add.w	ip, r0, #4294967295
    e43e:	e004      	b.n	e44a <_strtod_l+0xa92>
    e440:	ea4f 0946 	mov.w	r9, r6, lsl #1
    e444:	4563      	cmp	r3, ip
    e446:	461c      	mov	r4, r3
    e448:	d00b      	beq.n	e462 <_strtod_l+0xaaa>
    e44a:	2c08      	cmp	r4, #8
    e44c:	f104 0301 	add.w	r3, r4, #1
    e450:	eb09 0689 	add.w	r6, r9, r9, lsl #2
    e454:	ddf4      	ble.n	e440 <_strtod_l+0xa88>
    e456:	eb05 0485 	add.w	r4, r5, r5, lsl #2
    e45a:	2b10      	cmp	r3, #16
    e45c:	bfd8      	it	le
    e45e:	0065      	lslle	r5, r4, #1
    e460:	e7f0      	b.n	e444 <_strtod_l+0xa8c>
    e462:	4604      	mov	r4, r0
    e464:	2b08      	cmp	r3, #8
    e466:	dd8b      	ble.n	e380 <_strtod_l+0x9c8>
    e468:	2c10      	cmp	r4, #16
    e46a:	f300 8137 	bgt.w	e6dc <_strtod_l+0xd24>
    e46e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    e472:	2000      	movs	r0, #0
    e474:	eb02 0545 	add.w	r5, r2, r5, lsl #1
    e478:	e5d8      	b.n	e02c <_strtod_l+0x674>
    e47a:	46a0      	mov	r8, r4
    e47c:	4674      	mov	r4, lr
    e47e:	f7ff bb23 	b.w	dac8 <_strtod_l+0x110>
    e482:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e486:	4690      	mov	r8, r2
    e488:	2a00      	cmp	r2, #0
    e48a:	f47f aee0 	bne.w	e24e <_strtod_l+0x896>
    e48e:	4656      	mov	r6, sl
    e490:	46ca      	mov	sl, r9
    e492:	2322      	movs	r3, #34	; 0x22
    e494:	981e      	ldr	r0, [sp, #120]	; 0x78
    e496:	f04f 0800 	mov.w	r8, #0
    e49a:	f04f 0900 	mov.w	r9, #0
    e49e:	f8cb 3000 	str.w	r3, [fp]
    e4a2:	e61e      	b.n	e0e2 <_strtod_l+0x72a>
    e4a4:	f644 621f 	movw	r2, #19999	; 0x4e1f
    e4a8:	4293      	cmp	r3, r2
    e4aa:	bfa8      	it	ge
    e4ac:	4613      	movge	r3, r2
    e4ae:	930c      	str	r3, [sp, #48]	; 0x30
    e4b0:	e505      	b.n	debe <_strtod_l+0x506>
    e4b2:	bf00      	nop
    e4b4:	f3af 8000 	nop.w
    e4b8:	94a03595 	.word	0x94a03595
    e4bc:	3fcfffff 	.word	0x3fcfffff
    e4c0:	94a03595 	.word	0x94a03595
    e4c4:	3fdfffff 	.word	0x3fdfffff
    e4c8:	35afe535 	.word	0x35afe535
    e4cc:	3fe00000 	.word	0x3fe00000
    e4d0:	7c9fffff 	.word	0x7c9fffff
    e4d4:	7ff00000 	.word	0x7ff00000
    e4d8:	7fefffff 	.word	0x7fefffff
    e4dc:	bff00000 	.word	0xbff00000
    e4e0:	3ff00000 	.word	0x3ff00000
    e4e4:	0002fa64 	.word	0x0002fa64
    e4e8:	0002fa68 	.word	0x0002fa68
    e4ec:	0002f158 	.word	0x0002f158
    e4f0:	0002fa74 	.word	0x0002fa74
    e4f4:	2b10      	cmp	r3, #16
    e4f6:	ea4f 1523 	mov.w	r5, r3, asr #4
    e4fa:	f340 8159 	ble.w	e7b0 <_strtod_l+0xdf8>
    e4fe:	4bb0      	ldr	r3, [pc, #704]	; (e7c0 <_strtod_l+0xe08>)
    e500:	f04f 0c00 	mov.w	ip, #0
    e504:	461e      	mov	r6, r3
    e506:	930b      	str	r3, [sp, #44]	; 0x2c
    e508:	4667      	mov	r7, ip
    e50a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e50e:	f015 0f01 	tst.w	r5, #1
    e512:	4610      	mov	r0, r2
    e514:	4619      	mov	r1, r3
    e516:	ea4f 0565 	mov.w	r5, r5, asr #1
    e51a:	f107 0701 	add.w	r7, r7, #1
    e51e:	d007      	beq.n	e530 <_strtod_l+0xb78>
    e520:	e9d6 2300 	ldrd	r2, r3, [r6]
    e524:	f7fe fc66 	bl	cdf4 <__aeabi_dmul>
    e528:	f04f 0c01 	mov.w	ip, #1
    e52c:	4602      	mov	r2, r0
    e52e:	460b      	mov	r3, r1
    e530:	2d01      	cmp	r5, #1
    e532:	f106 0608 	add.w	r6, r6, #8
    e536:	d1ea      	bne.n	e50e <_strtod_l+0xb56>
    e538:	f1bc 0f00 	cmp.w	ip, #0
    e53c:	d001      	beq.n	e542 <_strtod_l+0xb8a>
    e53e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    e542:	9b05      	ldr	r3, [sp, #20]
    e544:	4d9f      	ldr	r5, [pc, #636]	; (e7c4 <_strtod_l+0xe0c>)
    e546:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    e54a:	4e9f      	ldr	r6, [pc, #636]	; (e7c8 <_strtod_l+0xe10>)
    e54c:	9305      	str	r3, [sp, #20]
    e54e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e550:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
    e554:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e558:	e9d7 0100 	ldrd	r0, r1, [r7]
    e55c:	f7fe fc4a 	bl	cdf4 <__aeabi_dmul>
    e560:	ea01 0305 	and.w	r3, r1, r5
    e564:	460a      	mov	r2, r1
    e566:	42b3      	cmp	r3, r6
    e568:	e9cd 0104 	strd	r0, r1, [sp, #16]
    e56c:	f200 80bf 	bhi.w	e6ee <_strtod_l+0xd36>
    e570:	4996      	ldr	r1, [pc, #600]	; (e7cc <_strtod_l+0xe14>)
    e572:	428b      	cmp	r3, r1
    e574:	f240 80b4 	bls.w	e6e0 <_strtod_l+0xd28>
    e578:	4b95      	ldr	r3, [pc, #596]	; (e7d0 <_strtod_l+0xe18>)
    e57a:	9305      	str	r3, [sp, #20]
    e57c:	2300      	movs	r3, #0
    e57e:	930b      	str	r3, [sp, #44]	; 0x2c
    e580:	f04f 33ff 	mov.w	r3, #4294967295
    e584:	9304      	str	r3, [sp, #16]
    e586:	f7ff baf5 	b.w	db74 <_strtod_l+0x1bc>
    e58a:	4b8e      	ldr	r3, [pc, #568]	; (e7c4 <_strtod_l+0xe0c>)
    e58c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e58e:	9305      	str	r3, [sp, #20]
    e590:	2322      	movs	r3, #34	; 0x22
    e592:	9204      	str	r2, [sp, #16]
    e594:	f8cb 3000 	str.w	r3, [fp]
    e598:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e59c:	e521      	b.n	dfe2 <_strtod_l+0x62a>
    e59e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    e5a0:	b13a      	cbz	r2, e5b2 <_strtod_l+0xbfa>
    e5a2:	2135      	movs	r1, #53	; 0x35
    e5a4:	a820      	add	r0, sp, #128	; 0x80
    e5a6:	f01d f98b 	bl	2b8c0 <__copybits>
    e5aa:	4658      	mov	r0, fp
    e5ac:	991e      	ldr	r1, [sp, #120]	; 0x78
    e5ae:	f01c fd57 	bl	2b060 <_Bfree>
    e5b2:	3d01      	subs	r5, #1
    e5b4:	2d05      	cmp	r5, #5
    e5b6:	f63f aefc 	bhi.w	e3b2 <_strtod_l+0x9fa>
    e5ba:	a301      	add	r3, pc, #4	; (adr r3, e5c0 <_strtod_l+0xc08>)
    e5bc:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    e5c0:	0000e39d 	.word	0x0000e39d
    e5c4:	0000e5f9 	.word	0x0000e5f9
    e5c8:	0000e5ef 	.word	0x0000e5ef
    e5cc:	0000e5e1 	.word	0x0000e5e1
    e5d0:	0000e39d 	.word	0x0000e39d
    e5d4:	0000e5d9 	.word	0x0000e5d9
    e5d8:	2300      	movs	r3, #0
    e5da:	e9cd 3304 	strd	r3, r3, [sp, #16]
    e5de:	e6e8      	b.n	e3b2 <_strtod_l+0x9fa>
    e5e0:	f04f 33ff 	mov.w	r3, #4294967295
    e5e4:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    e5e8:	e9cd 3504 	strd	r3, r5, [sp, #16]
    e5ec:	e6e1      	b.n	e3b2 <_strtod_l+0x9fa>
    e5ee:	2300      	movs	r3, #0
    e5f0:	4e74      	ldr	r6, [pc, #464]	; (e7c4 <_strtod_l+0xe0c>)
    e5f2:	e9cd 3604 	strd	r3, r6, [sp, #16]
    e5f6:	e6dc      	b.n	e3b2 <_strtod_l+0x9fa>
    e5f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
    e5fa:	9304      	str	r3, [sp, #16]
    e5fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
    e5fe:	9305      	str	r3, [sp, #20]
    e600:	e6d7      	b.n	e3b2 <_strtod_l+0x9fa>
    e602:	4670      	mov	r0, lr
    e604:	e6ae      	b.n	e364 <_strtod_l+0x9ac>
    e606:	4973      	ldr	r1, [pc, #460]	; (e7d4 <_strtod_l+0xe1c>)
    e608:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    e60c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e610:	e9d1 0100 	ldrd	r0, r1, [r1]
    e614:	f7fe fbee 	bl	cdf4 <__aeabi_dmul>
    e618:	4680      	mov	r8, r0
    e61a:	4689      	mov	r9, r1
    e61c:	e4e1      	b.n	dfe2 <_strtod_l+0x62a>
    e61e:	ed9f 7b66 	vldr	d7, [pc, #408]	; e7b8 <_strtod_l+0xe00>
    e622:	2400      	movs	r4, #0
    e624:	4d6c      	ldr	r5, [pc, #432]	; (e7d8 <_strtod_l+0xe20>)
    e626:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
    e62a:	e5a4      	b.n	e176 <_strtod_l+0x7be>
    e62c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e62e:	4656      	mov	r6, sl
    e630:	46ca      	mov	sl, r9
    e632:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    e636:	2b00      	cmp	r3, #0
    e638:	f000 80ab 	beq.w	e792 <_strtod_l+0xdda>
    e63c:	4b67      	ldr	r3, [pc, #412]	; (e7dc <_strtod_l+0xe24>)
    e63e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    e642:	f3c5 0113 	ubfx	r1, r5, #0, #20
    e646:	462a      	mov	r2, r5
    e648:	4299      	cmp	r1, r3
    e64a:	f000 80cd 	beq.w	e7e8 <_strtod_l+0xe30>
    e64e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e650:	2b00      	cmp	r3, #0
    e652:	f000 80a7 	beq.w	e7a4 <_strtod_l+0xdec>
    e656:	9a05      	ldr	r2, [sp, #20]
    e658:	4213      	tst	r3, r2
    e65a:	d010      	beq.n	e67e <_strtod_l+0xcc6>
    e65c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e65e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e660:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e664:	2b00      	cmp	r3, #0
    e666:	f000 80e2 	beq.w	e82e <_strtod_l+0xe76>
    e66a:	f018 fd8b 	bl	27184 <sulp>
    e66e:	4602      	mov	r2, r0
    e670:	460b      	mov	r3, r1
    e672:	4640      	mov	r0, r8
    e674:	4649      	mov	r1, r9
    e676:	f7fd fde9 	bl	c24c <__adddf3>
    e67a:	4680      	mov	r8, r0
    e67c:	4689      	mov	r9, r1
    e67e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e680:	b19b      	cbz	r3, e6aa <_strtod_l+0xcf2>
    e682:	2300      	movs	r3, #0
    e684:	4a56      	ldr	r2, [pc, #344]	; (e7e0 <_strtod_l+0xe28>)
    e686:	4640      	mov	r0, r8
    e688:	4649      	mov	r1, r9
    e68a:	e9cd 3218 	strd	r3, r2, [sp, #96]	; 0x60
    e68e:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    e692:	f7fe fbaf 	bl	cdf4 <__aeabi_dmul>
    e696:	4603      	mov	r3, r0
    e698:	4680      	mov	r8, r0
    e69a:	4689      	mov	r9, r1
    e69c:	430b      	orrs	r3, r1
    e69e:	d104      	bne.n	e6aa <_strtod_l+0xcf2>
    e6a0:	2322      	movs	r3, #34	; 0x22
    e6a2:	981e      	ldr	r0, [sp, #120]	; 0x78
    e6a4:	f8cb 3000 	str.w	r3, [fp]
    e6a8:	e51b      	b.n	e0e2 <_strtod_l+0x72a>
    e6aa:	981e      	ldr	r0, [sp, #120]	; 0x78
    e6ac:	e519      	b.n	e0e2 <_strtod_l+0x72a>
    e6ae:	f1c8 080f 	rsb	r8, r8, #15
    e6b2:	4c48      	ldr	r4, [pc, #288]	; (e7d4 <_strtod_l+0xe1c>)
    e6b4:	eb04 01c8 	add.w	r1, r4, r8, lsl #3
    e6b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e6bc:	e9d1 0100 	ldrd	r0, r1, [r1]
    e6c0:	f7fe fb98 	bl	cdf4 <__aeabi_dmul>
    e6c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e6c6:	eba3 0808 	sub.w	r8, r3, r8
    e6ca:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
    e6ce:	e9d4 2300 	ldrd	r2, r3, [r4]
    e6d2:	f7fe fb8f 	bl	cdf4 <__aeabi_dmul>
    e6d6:	4680      	mov	r8, r0
    e6d8:	4689      	mov	r9, r1
    e6da:	e482      	b.n	dfe2 <_strtod_l+0x62a>
    e6dc:	2000      	movs	r0, #0
    e6de:	e4a5      	b.n	e02c <_strtod_l+0x674>
    e6e0:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    e6e4:	9305      	str	r3, [sp, #20]
    e6e6:	2300      	movs	r3, #0
    e6e8:	930b      	str	r3, [sp, #44]	; 0x2c
    e6ea:	f7ff ba43 	b.w	db74 <_strtod_l+0x1bc>
    e6ee:	2322      	movs	r3, #34	; 0x22
    e6f0:	2200      	movs	r2, #0
    e6f2:	9505      	str	r5, [sp, #20]
    e6f4:	9204      	str	r2, [sp, #16]
    e6f6:	f8cb 3000 	str.w	r3, [fp]
    e6fa:	e660      	b.n	e3be <_strtod_l+0xa06>
    e6fc:	a81d      	add	r0, sp, #116	; 0x74
    e6fe:	aa20      	add	r2, sp, #128	; 0x80
    e700:	4938      	ldr	r1, [pc, #224]	; (e7e4 <_strtod_l+0xe2c>)
    e702:	f01c fa61 	bl	2abc8 <__hexnan>
    e706:	2805      	cmp	r0, #5
    e708:	f47f ac00 	bne.w	df0c <_strtod_l+0x554>
    e70c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    e70e:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    e712:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    e716:	9305      	str	r3, [sp, #20]
    e718:	9b20      	ldr	r3, [sp, #128]	; 0x80
    e71a:	9304      	str	r3, [sp, #16]
    e71c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e720:	e45f      	b.n	dfe2 <_strtod_l+0x62a>
    e722:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e724:	4656      	mov	r6, sl
    e726:	46ca      	mov	sl, r9
    e728:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e72c:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    e730:	4303      	orrs	r3, r0
    e732:	d1a4      	bne.n	e67e <_strtod_l+0xcc6>
    e734:	f3c1 0313 	ubfx	r3, r1, #0, #20
    e738:	460c      	mov	r4, r1
    e73a:	2b00      	cmp	r3, #0
    e73c:	d19f      	bne.n	e67e <_strtod_l+0xcc6>
    e73e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    e742:	0d1b      	lsrs	r3, r3, #20
    e744:	051b      	lsls	r3, r3, #20
    e746:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    e74a:	d998      	bls.n	e67e <_strtod_l+0xcc6>
    e74c:	6973      	ldr	r3, [r6, #20]
    e74e:	b913      	cbnz	r3, e756 <_strtod_l+0xd9e>
    e750:	6933      	ldr	r3, [r6, #16]
    e752:	2b01      	cmp	r3, #1
    e754:	dd93      	ble.n	e67e <_strtod_l+0xcc6>
    e756:	4631      	mov	r1, r6
    e758:	2201      	movs	r2, #1
    e75a:	4658      	mov	r0, fp
    e75c:	f01c fe6a 	bl	2b434 <__lshift>
    e760:	4639      	mov	r1, r7
    e762:	4606      	mov	r6, r0
    e764:	f01c fece 	bl	2b504 <__mcmp>
    e768:	2800      	cmp	r0, #0
    e76a:	dd88      	ble.n	e67e <_strtod_l+0xcc6>
    e76c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e76e:	2b00      	cmp	r3, #0
    e770:	f040 8084 	bne.w	e87c <_strtod_l+0xec4>
    e774:	4b13      	ldr	r3, [pc, #76]	; (e7c4 <_strtod_l+0xe0c>)
    e776:	4023      	ands	r3, r4
    e778:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    e77c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    e780:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    e784:	9305      	str	r3, [sp, #20]
    e786:	f04f 33ff 	mov.w	r3, #4294967295
    e78a:	9304      	str	r3, [sp, #16]
    e78c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e790:	e775      	b.n	e67e <_strtod_l+0xcc6>
    e792:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e796:	f3c2 0313 	ubfx	r3, r2, #0, #20
    e79a:	4614      	mov	r4, r2
    e79c:	430b      	orrs	r3, r1
    e79e:	f47f af56 	bne.w	e64e <_strtod_l+0xc96>
    e7a2:	e7e3      	b.n	e76c <_strtod_l+0xdb4>
    e7a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e7a6:	9a04      	ldr	r2, [sp, #16]
    e7a8:	4213      	tst	r3, r2
    e7aa:	f43f af68 	beq.w	e67e <_strtod_l+0xcc6>
    e7ae:	e755      	b.n	e65c <_strtod_l+0xca4>
    e7b0:	4b03      	ldr	r3, [pc, #12]	; (e7c0 <_strtod_l+0xe08>)
    e7b2:	2700      	movs	r7, #0
    e7b4:	930b      	str	r3, [sp, #44]	; 0x2c
    e7b6:	e6c4      	b.n	e542 <_strtod_l+0xb8a>
    e7b8:	00000000 	.word	0x00000000
    e7bc:	bfe00000 	.word	0xbfe00000
    e7c0:	0002f130 	.word	0x0002f130
    e7c4:	7ff00000 	.word	0x7ff00000
    e7c8:	7ca00000 	.word	0x7ca00000
    e7cc:	7c900000 	.word	0x7c900000
    e7d0:	7fefffff 	.word	0x7fefffff
    e7d4:	0002f158 	.word	0x0002f158
    e7d8:	3fe00000 	.word	0x3fe00000
    e7dc:	000fffff 	.word	0x000fffff
    e7e0:	39500000 	.word	0x39500000
    e7e4:	0002fa88 	.word	0x0002fa88
    e7e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e7ea:	9904      	ldr	r1, [sp, #16]
    e7ec:	2b00      	cmp	r3, #0
    e7ee:	d039      	beq.n	e864 <_strtod_l+0xeac>
    e7f0:	4b2f      	ldr	r3, [pc, #188]	; (e8b0 <_strtod_l+0xef8>)
    e7f2:	402b      	ands	r3, r5
    e7f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    e7f8:	d834      	bhi.n	e864 <_strtod_l+0xeac>
    e7fa:	0d1b      	lsrs	r3, r3, #20
    e7fc:	f04f 30ff 	mov.w	r0, #4294967295
    e800:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    e804:	fa00 f303 	lsl.w	r3, r0, r3
    e808:	4299      	cmp	r1, r3
    e80a:	f47f af20 	bne.w	e64e <_strtod_l+0xc96>
    e80e:	4b29      	ldr	r3, [pc, #164]	; (e8b4 <_strtod_l+0xefc>)
    e810:	429a      	cmp	r2, r3
    e812:	d102      	bne.n	e81a <_strtod_l+0xe62>
    e814:	3101      	adds	r1, #1
    e816:	f43f ac5a 	beq.w	e0ce <_strtod_l+0x716>
    e81a:	4b25      	ldr	r3, [pc, #148]	; (e8b0 <_strtod_l+0xef8>)
    e81c:	4013      	ands	r3, r2
    e81e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    e822:	9305      	str	r3, [sp, #20]
    e824:	2300      	movs	r3, #0
    e826:	9304      	str	r3, [sp, #16]
    e828:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    e82c:	e727      	b.n	e67e <_strtod_l+0xcc6>
    e82e:	f018 fca9 	bl	27184 <sulp>
    e832:	4602      	mov	r2, r0
    e834:	460b      	mov	r3, r1
    e836:	4640      	mov	r0, r8
    e838:	4649      	mov	r1, r9
    e83a:	f7fd fd05 	bl	c248 <__aeabi_dsub>
    e83e:	2200      	movs	r2, #0
    e840:	2300      	movs	r3, #0
    e842:	4680      	mov	r8, r0
    e844:	4689      	mov	r9, r1
    e846:	f7fd ff0d 	bl	c664 <__aeabi_dcmpeq>
    e84a:	2800      	cmp	r0, #0
    e84c:	f43f af17 	beq.w	e67e <_strtod_l+0xcc6>
    e850:	e61f      	b.n	e492 <_strtod_l+0xada>
    e852:	f04f 32ff 	mov.w	r2, #4294967295
    e856:	fa02 f303 	lsl.w	r3, r2, r3
    e85a:	9a04      	ldr	r2, [sp, #16]
    e85c:	401a      	ands	r2, r3
    e85e:	9204      	str	r2, [sp, #16]
    e860:	f7ff bbaf 	b.w	dfc2 <_strtod_l+0x60a>
    e864:	f04f 33ff 	mov.w	r3, #4294967295
    e868:	e7ce      	b.n	e808 <_strtod_l+0xe50>
    e86a:	3b20      	subs	r3, #32
    e86c:	f04f 31ff 	mov.w	r1, #4294967295
    e870:	fa01 f303 	lsl.w	r3, r1, r3
    e874:	4013      	ands	r3, r2
    e876:	9305      	str	r3, [sp, #20]
    e878:	f7ff bba3 	b.w	dfc2 <_strtod_l+0x60a>
    e87c:	4b0c      	ldr	r3, [pc, #48]	; (e8b0 <_strtod_l+0xef8>)
    e87e:	4023      	ands	r3, r4
    e880:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    e884:	f73f af78 	bgt.w	e778 <_strtod_l+0xdc0>
    e888:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    e88c:	f73f aef9 	bgt.w	e682 <_strtod_l+0xcca>
    e890:	e5ff      	b.n	e492 <_strtod_l+0xada>
    e892:	4623      	mov	r3, r4
    e894:	4634      	mov	r4, r6
    e896:	e5e5      	b.n	e464 <_strtod_l+0xaac>
    e898:	f04f 0e00 	mov.w	lr, #0
    e89c:	4675      	mov	r5, lr
    e89e:	46f1      	mov	r9, lr
    e8a0:	4670      	mov	r0, lr
    e8a2:	4674      	mov	r4, lr
    e8a4:	46f4      	mov	ip, lr
    e8a6:	f8cd e020 	str.w	lr, [sp, #32]
    e8aa:	f7ff ba7e 	b.w	ddaa <_strtod_l+0x3f2>
    e8ae:	bf00      	nop
    e8b0:	7ff00000 	.word	0x7ff00000
    e8b4:	7fefffff 	.word	0x7fefffff

0000e8b8 <_svfprintf_r>:
    e8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8bc:	ed2d 8b08 	vpush	{d8-d11}
    e8c0:	b0d1      	sub	sp, #324	; 0x144
    e8c2:	468b      	mov	fp, r1
    e8c4:	4617      	mov	r7, r2
    e8c6:	4681      	mov	r9, r0
    e8c8:	9309      	str	r3, [sp, #36]	; 0x24
    e8ca:	f01c fa63 	bl	2ad94 <_localeconv_r>
    e8ce:	6803      	ldr	r3, [r0, #0]
    e8d0:	4618      	mov	r0, r3
    e8d2:	9311      	str	r3, [sp, #68]	; 0x44
    e8d4:	f018 f9a0 	bl	26c18 <strlen>
    e8d8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    e8dc:	9010      	str	r0, [sp, #64]	; 0x40
    e8de:	061c      	lsls	r4, r3, #24
    e8e0:	d504      	bpl.n	e8ec <_svfprintf_r+0x34>
    e8e2:	f8db 3010 	ldr.w	r3, [fp, #16]
    e8e6:	2b00      	cmp	r3, #0
    e8e8:	f000 87f2 	beq.w	f8d0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe70>
    e8ec:	2300      	movs	r3, #0
    e8ee:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    e8f2:	ee09 9a10 	vmov	s18, r9
    e8f6:	ee09 ba90 	vmov	s19, fp
    e8fa:	930c      	str	r3, [sp, #48]	; 0x30
    e8fc:	9326      	str	r3, [sp, #152]	; 0x98
    e8fe:	9312      	str	r3, [sp, #72]	; 0x48
    e900:	9314      	str	r3, [sp, #80]	; 0x50
    e902:	9317      	str	r3, [sp, #92]	; 0x5c
    e904:	9305      	str	r3, [sp, #20]
    e906:	9325      	str	r3, [sp, #148]	; 0x94
    e908:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
    e90c:	ed9f 7b9c 	vldr	d7, [pc, #624]	; eb80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x120>
    e910:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    e914:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    e918:	783b      	ldrb	r3, [r7, #0]
    e91a:	463c      	mov	r4, r7
    e91c:	b1e3      	cbz	r3, e958 <_svfprintf_r+0xa0>
    e91e:	2b25      	cmp	r3, #37	; 0x25
    e920:	d01a      	beq.n	e958 <_svfprintf_r+0xa0>
    e922:	4625      	mov	r5, r4
    e924:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    e928:	b10b      	cbz	r3, e92e <_svfprintf_r+0x76>
    e92a:	2b25      	cmp	r3, #37	; 0x25
    e92c:	d1f9      	bne.n	e922 <_svfprintf_r+0x6a>
    e92e:	1be6      	subs	r6, r4, r7
    e930:	d012      	beq.n	e958 <_svfprintf_r+0xa0>
    e932:	f8c8 7000 	str.w	r7, [r8]
    e936:	f8c8 6004 	str.w	r6, [r8, #4]
    e93a:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e93e:	3301      	adds	r3, #1
    e940:	4432      	add	r2, r6
    e942:	2b07      	cmp	r3, #7
    e944:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e948:	f300 810b 	bgt.w	eb62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x102>
    e94c:	f108 0808 	add.w	r8, r8, #8
    e950:	9b05      	ldr	r3, [sp, #20]
    e952:	4433      	add	r3, r6
    e954:	9305      	str	r3, [sp, #20]
    e956:	786b      	ldrb	r3, [r5, #1]
    e958:	2b00      	cmp	r3, #0
    e95a:	f001 819e 	beq.w	fc9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x123a>
    e95e:	2300      	movs	r3, #0
    e960:	1c67      	adds	r7, r4, #1
    e962:	f894 9001 	ldrb.w	r9, [r4, #1]
    e966:	f04f 3aff 	mov.w	sl, #4294967295
    e96a:	242b      	movs	r4, #43	; 0x2b
    e96c:	9306      	str	r3, [sp, #24]
    e96e:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    e972:	9303      	str	r3, [sp, #12]
    e974:	3701      	adds	r7, #1
    e976:	f1a9 0320 	sub.w	r3, r9, #32
    e97a:	2b5a      	cmp	r3, #90	; 0x5a
    e97c:	f200 8104 	bhi.w	eb88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x128>
    e980:	e8df f013 	tbh	[pc, r3, lsl #1]
    e984:	0102006a 	.word	0x0102006a
    e988:	02820102 	.word	0x02820102
    e98c:	01020102 	.word	0x01020102
    e990:	025e0102 	.word	0x025e0102
    e994:	01020102 	.word	0x01020102
    e998:	02380226 	.word	0x02380226
    e99c:	02310102 	.word	0x02310102
    e9a0:	01020244 	.word	0x01020244
    e9a4:	005b023d 	.word	0x005b023d
    e9a8:	005b005b 	.word	0x005b005b
    e9ac:	005b005b 	.word	0x005b005b
    e9b0:	005b005b 	.word	0x005b005b
    e9b4:	005b005b 	.word	0x005b005b
    e9b8:	01020102 	.word	0x01020102
    e9bc:	01020102 	.word	0x01020102
    e9c0:	01020102 	.word	0x01020102
    e9c4:	01890102 	.word	0x01890102
    e9c8:	01f10102 	.word	0x01f10102
    e9cc:	01890079 	.word	0x01890079
    e9d0:	01890189 	.word	0x01890189
    e9d4:	01020102 	.word	0x01020102
    e9d8:	01020102 	.word	0x01020102
    e9dc:	01020299 	.word	0x01020299
    e9e0:	00a70102 	.word	0x00a70102
    e9e4:	01020102 	.word	0x01020102
    e9e8:	02010102 	.word	0x02010102
    e9ec:	02890102 	.word	0x02890102
    e9f0:	01020102 	.word	0x01020102
    e9f4:	01020784 	.word	0x01020784
    e9f8:	01020102 	.word	0x01020102
    e9fc:	01020102 	.word	0x01020102
    ea00:	01020102 	.word	0x01020102
    ea04:	01890102 	.word	0x01890102
    ea08:	01f10102 	.word	0x01f10102
    ea0c:	0189007d 	.word	0x0189007d
    ea10:	01890189 	.word	0x01890189
    ea14:	007d02d4 	.word	0x007d02d4
    ea18:	01020072 	.word	0x01020072
    ea1c:	010202c9 	.word	0x010202c9
    ea20:	00ab02b2 	.word	0x00ab02b2
    ea24:	007202a0 	.word	0x007202a0
    ea28:	02010102 	.word	0x02010102
    ea2c:	0780006f 	.word	0x0780006f
    ea30:	01020102 	.word	0x01020102
    ea34:	0102075f 	.word	0x0102075f
    ea38:	006f      	.short	0x006f
    ea3a:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    ea3e:	2200      	movs	r2, #0
    ea40:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ea44:	f817 9b01 	ldrb.w	r9, [r7], #1
    ea48:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    ea4c:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    ea50:	2b09      	cmp	r3, #9
    ea52:	d9f5      	bls.n	ea40 <_svfprintf_r+0x188>
    ea54:	9206      	str	r2, [sp, #24]
    ea56:	e78e      	b.n	e976 <_svfprintf_r+0xbe>
    ea58:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
    ea5c:	2b00      	cmp	r3, #0
    ea5e:	f000 862b 	beq.w	f6b8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc58>
    ea62:	f897 9000 	ldrb.w	r9, [r7]
    ea66:	e785      	b.n	e974 <_svfprintf_r+0xbc>
    ea68:	9b03      	ldr	r3, [sp, #12]
    ea6a:	f897 9000 	ldrb.w	r9, [r7]
    ea6e:	f043 0320 	orr.w	r3, r3, #32
    ea72:	9303      	str	r3, [sp, #12]
    ea74:	e77e      	b.n	e974 <_svfprintf_r+0xbc>
    ea76:	9b03      	ldr	r3, [sp, #12]
    ea78:	f043 0310 	orr.w	r3, r3, #16
    ea7c:	9303      	str	r3, [sp, #12]
    ea7e:	9b03      	ldr	r3, [sp, #12]
    ea80:	0698      	lsls	r0, r3, #26
    ea82:	f140 815f 	bpl.w	ed44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2e4>
    ea86:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ea88:	3307      	adds	r3, #7
    ea8a:	f023 0307 	bic.w	r3, r3, #7
    ea8e:	4619      	mov	r1, r3
    ea90:	e8f1 2302 	ldrd	r2, r3, [r1], #8
    ea94:	4614      	mov	r4, r2
    ea96:	461d      	mov	r5, r3
    ea98:	9109      	str	r1, [sp, #36]	; 0x24
    ea9a:	2a00      	cmp	r2, #0
    ea9c:	f173 0300 	sbcs.w	r3, r3, #0
    eaa0:	f2c0 85c9 	blt.w	f636 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbd6>
    eaa4:	f1ba 3fff 	cmp.w	sl, #4294967295
    eaa8:	f000 8496 	beq.w	f3d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x978>
    eaac:	9b03      	ldr	r3, [sp, #12]
    eaae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    eab2:	9303      	str	r3, [sp, #12]
    eab4:	f1ba 0f00 	cmp.w	sl, #0
    eab8:	f040 848e 	bne.w	f3d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x978>
    eabc:	ea54 0305 	orrs.w	r3, r4, r5
    eac0:	bf14      	ite	ne
    eac2:	2301      	movne	r3, #1
    eac4:	2300      	moveq	r3, #0
    eac6:	f040 8487 	bne.w	f3d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x978>
    eaca:	469a      	mov	sl, r3
    eacc:	ae50      	add	r6, sp, #320	; 0x140
    eace:	9307      	str	r3, [sp, #28]
    ead0:	e036      	b.n	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    ead2:	9b03      	ldr	r3, [sp, #12]
    ead4:	f043 0310 	orr.w	r3, r3, #16
    ead8:	9303      	str	r3, [sp, #12]
    eada:	9b03      	ldr	r3, [sp, #12]
    eadc:	069d      	lsls	r5, r3, #26
    eade:	f140 8122 	bpl.w	ed26 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c6>
    eae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eae4:	3307      	adds	r3, #7
    eae6:	f023 0307 	bic.w	r3, r3, #7
    eaea:	e8f3 4502 	ldrd	r4, r5, [r3], #8
    eaee:	9309      	str	r3, [sp, #36]	; 0x24
    eaf0:	9b03      	ldr	r3, [sp, #12]
    eaf2:	f423 6b80 	bic.w	fp, r3, #1024	; 0x400
    eaf6:	2300      	movs	r3, #0
    eaf8:	2200      	movs	r2, #0
    eafa:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
    eafe:	f1ba 3fff 	cmp.w	sl, #4294967295
    eb02:	f000 8319 	beq.w	f138 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6d8>
    eb06:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
    eb0a:	9203      	str	r2, [sp, #12]
    eb0c:	ea54 0205 	orrs.w	r2, r4, r5
    eb10:	f040 8310 	bne.w	f134 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6d4>
    eb14:	f1ba 0200 	subs.w	r2, sl, #0
    eb18:	bf18      	it	ne
    eb1a:	2201      	movne	r2, #1
    eb1c:	f1ba 0f00 	cmp.w	sl, #0
    eb20:	f040 8308 	bne.w	f134 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6d4>
    eb24:	2b00      	cmp	r3, #0
    eb26:	f040 8452 	bne.w	f3ce <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x96e>
    eb2a:	f01b 0201 	ands.w	r2, fp, #1
    eb2e:	9207      	str	r2, [sp, #28]
    eb30:	f000 8504 	beq.w	f53c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xadc>
    eb34:	2230      	movs	r2, #48	; 0x30
    eb36:	469a      	mov	sl, r3
    eb38:	f20d 163f 	addw	r6, sp, #319	; 0x13f
    eb3c:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    eb40:	9907      	ldr	r1, [sp, #28]
    eb42:	2300      	movs	r3, #0
    eb44:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    eb48:	4551      	cmp	r1, sl
    eb4a:	9308      	str	r3, [sp, #32]
    eb4c:	930d      	str	r3, [sp, #52]	; 0x34
    eb4e:	bfb8      	it	lt
    eb50:	4651      	movlt	r1, sl
    eb52:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    eb56:	9104      	str	r1, [sp, #16]
    eb58:	b352      	cbz	r2, ebb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x150>
    eb5a:	9b04      	ldr	r3, [sp, #16]
    eb5c:	3301      	adds	r3, #1
    eb5e:	9304      	str	r3, [sp, #16]
    eb60:	e026      	b.n	ebb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x150>
    eb62:	aa24      	add	r2, sp, #144	; 0x90
    eb64:	ee19 1a90 	vmov	r1, s19
    eb68:	ee19 0a10 	vmov	r0, s18
    eb6c:	f01d f996 	bl	2be9c <__ssprint_r>
    eb70:	2800      	cmp	r0, #0
    eb72:	f041 83eb 	bne.w	1034c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x34c>
    eb76:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    eb7a:	e6e9      	b.n	e950 <_svfprintf_r+0x98>
    eb7c:	f3af 8000 	nop.w
	...
    eb88:	f1b9 0f00 	cmp.w	r9, #0
    eb8c:	f001 8085 	beq.w	fc9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x123a>
    eb90:	2201      	movs	r2, #1
    eb92:	2300      	movs	r3, #0
    eb94:	ae37      	add	r6, sp, #220	; 0xdc
    eb96:	f88d 90dc 	strb.w	r9, [sp, #220]	; 0xdc
    eb9a:	4611      	mov	r1, r2
    eb9c:	9204      	str	r2, [sp, #16]
    eb9e:	461a      	mov	r2, r3
    eba0:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    eba4:	9107      	str	r1, [sp, #28]
    eba6:	4692      	mov	sl, r2
    eba8:	9208      	str	r2, [sp, #32]
    ebaa:	920d      	str	r2, [sp, #52]	; 0x34
    ebac:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
    ebb0:	9b03      	ldr	r3, [sp, #12]
    ebb2:	f013 0302 	ands.w	r3, r3, #2
    ebb6:	d002      	beq.n	ebbe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x15e>
    ebb8:	9904      	ldr	r1, [sp, #16]
    ebba:	3102      	adds	r1, #2
    ebbc:	9104      	str	r1, [sp, #16]
    ebbe:	9903      	ldr	r1, [sp, #12]
    ebc0:	f011 0b84 	ands.w	fp, r1, #132	; 0x84
    ebc4:	d105      	bne.n	ebd2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x172>
    ebc6:	9906      	ldr	r1, [sp, #24]
    ebc8:	9804      	ldr	r0, [sp, #16]
    ebca:	1a0d      	subs	r5, r1, r0
    ebcc:	2d00      	cmp	r5, #0
    ebce:	f300 8356 	bgt.w	f27e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x81e>
    ebd2:	9c26      	ldr	r4, [sp, #152]	; 0x98
    ebd4:	b182      	cbz	r2, ebf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x198>
    ebd6:	9a25      	ldr	r2, [sp, #148]	; 0x94
    ebd8:	2101      	movs	r1, #1
    ebda:	3401      	adds	r4, #1
    ebdc:	f10d 0073 	add.w	r0, sp, #115	; 0x73
    ebe0:	440a      	add	r2, r1
    ebe2:	f8c8 1004 	str.w	r1, [r8, #4]
    ebe6:	9426      	str	r4, [sp, #152]	; 0x98
    ebe8:	2a07      	cmp	r2, #7
    ebea:	f8c8 0000 	str.w	r0, [r8]
    ebee:	9225      	str	r2, [sp, #148]	; 0x94
    ebf0:	f300 838f 	bgt.w	f312 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8b2>
    ebf4:	f108 0808 	add.w	r8, r8, #8
    ebf8:	b17b      	cbz	r3, ec1a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ba>
    ebfa:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ebfc:	3402      	adds	r4, #2
    ebfe:	a91d      	add	r1, sp, #116	; 0x74
    ec00:	2202      	movs	r2, #2
    ec02:	3301      	adds	r3, #1
    ec04:	9426      	str	r4, [sp, #152]	; 0x98
    ec06:	f8c8 1000 	str.w	r1, [r8]
    ec0a:	2b07      	cmp	r3, #7
    ec0c:	9325      	str	r3, [sp, #148]	; 0x94
    ec0e:	f8c8 2004 	str.w	r2, [r8, #4]
    ec12:	f300 838e 	bgt.w	f332 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8d2>
    ec16:	f108 0808 	add.w	r8, r8, #8
    ec1a:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
    ec1e:	f000 81f9 	beq.w	f014 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5b4>
    ec22:	9b07      	ldr	r3, [sp, #28]
    ec24:	ebaa 0a03 	sub.w	sl, sl, r3
    ec28:	f1ba 0f00 	cmp.w	sl, #0
    ec2c:	f300 8241 	bgt.w	f0b2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x652>
    ec30:	9b03      	ldr	r3, [sp, #12]
    ec32:	05d8      	lsls	r0, r3, #23
    ec34:	f100 818e 	bmi.w	ef54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4f4>
    ec38:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ec3a:	9a07      	ldr	r2, [sp, #28]
    ec3c:	3301      	adds	r3, #1
    ec3e:	f8c8 6000 	str.w	r6, [r8]
    ec42:	4414      	add	r4, r2
    ec44:	f8c8 2004 	str.w	r2, [r8, #4]
    ec48:	2b07      	cmp	r3, #7
    ec4a:	9325      	str	r3, [sp, #148]	; 0x94
    ec4c:	9426      	str	r4, [sp, #152]	; 0x98
    ec4e:	f300 8309 	bgt.w	f264 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x804>
    ec52:	f108 0808 	add.w	r8, r8, #8
    ec56:	9b03      	ldr	r3, [sp, #12]
    ec58:	0759      	lsls	r1, r3, #29
    ec5a:	d505      	bpl.n	ec68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x208>
    ec5c:	9b06      	ldr	r3, [sp, #24]
    ec5e:	9a04      	ldr	r2, [sp, #16]
    ec60:	1a9d      	subs	r5, r3, r2
    ec62:	2d00      	cmp	r5, #0
    ec64:	f300 8373 	bgt.w	f34e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8ee>
    ec68:	9904      	ldr	r1, [sp, #16]
    ec6a:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    ec6e:	428a      	cmp	r2, r1
    ec70:	bfac      	ite	ge
    ec72:	189b      	addge	r3, r3, r2
    ec74:	185b      	addlt	r3, r3, r1
    ec76:	9305      	str	r3, [sp, #20]
    ec78:	2c00      	cmp	r4, #0
    ec7a:	f040 8297 	bne.w	f1ac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x74c>
    ec7e:	2300      	movs	r3, #0
    ec80:	9325      	str	r3, [sp, #148]	; 0x94
    ec82:	9b08      	ldr	r3, [sp, #32]
    ec84:	b123      	cbz	r3, ec90 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x230>
    ec86:	9908      	ldr	r1, [sp, #32]
    ec88:	ee19 0a10 	vmov	r0, s18
    ec8c:	f01b f9e4 	bl	2a058 <_free_r>
    ec90:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    ec94:	e640      	b.n	e918 <_svfprintf_r+0x60>
    ec96:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ec98:	f04f 32ff 	mov.w	r2, #4294967295
    ec9c:	3307      	adds	r3, #7
    ec9e:	f023 0307 	bic.w	r3, r3, #7
    eca2:	ecb3 7b02 	vldmia	r3!, {d7}
    eca6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    ecaa:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
    ecae:	9309      	str	r3, [sp, #36]	; 0x24
    ecb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
    ecb4:	ee0a 4a10 	vmov	s20, r4
    ecb8:	ee0a 3a90 	vmov	s21, r3
    ecbc:	4ba1      	ldr	r3, [pc, #644]	; (ef44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e4>)
    ecbe:	eeb0 8a4a 	vmov.f32	s16, s20
    ecc2:	eef0 8a6a 	vmov.f32	s17, s21
    ecc6:	ec51 0b18 	vmov	r0, r1, d8
    ecca:	f7fe faa5 	bl	d218 <__aeabi_dcmpun>
    ecce:	2800      	cmp	r0, #0
    ecd0:	f040 8509 	bne.w	f6e6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc86>
    ecd4:	f04f 32ff 	mov.w	r2, #4294967295
    ecd8:	4b9a      	ldr	r3, [pc, #616]	; (ef44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e4>)
    ecda:	ec51 0b18 	vmov	r0, r1, d8
    ecde:	f7fd fcd5 	bl	c68c <__aeabi_dcmple>
    ece2:	2800      	cmp	r0, #0
    ece4:	f040 84ff 	bne.w	f6e6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc86>
    ece8:	2200      	movs	r2, #0
    ecea:	2300      	movs	r3, #0
    ecec:	4620      	mov	r0, r4
    ecee:	4629      	mov	r1, r5
    ecf0:	f7fd fcc2 	bl	c678 <__aeabi_dcmplt>
    ecf4:	2800      	cmp	r0, #0
    ecf6:	f041 80de 	bne.w	feb6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1456>
    ecfa:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    ecfe:	2103      	movs	r1, #3
    ed00:	4e91      	ldr	r6, [pc, #580]	; (ef48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e8>)
    ed02:	4b92      	ldr	r3, [pc, #584]	; (ef4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4ec>)
    ed04:	9104      	str	r1, [sp, #16]
    ed06:	9c03      	ldr	r4, [sp, #12]
    ed08:	2000      	movs	r0, #0
    ed0a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
    ed0e:	bfc8      	it	gt
    ed10:	461e      	movgt	r6, r3
    ed12:	9107      	str	r1, [sp, #28]
    ed14:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    ed18:	4682      	mov	sl, r0
    ed1a:	9008      	str	r0, [sp, #32]
    ed1c:	9403      	str	r4, [sp, #12]
    ed1e:	900d      	str	r0, [sp, #52]	; 0x34
    ed20:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
    ed24:	e718      	b.n	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    ed26:	9b03      	ldr	r3, [sp, #12]
    ed28:	06dc      	lsls	r4, r3, #27
    ed2a:	f100 84d5 	bmi.w	f6d8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc78>
    ed2e:	9b03      	ldr	r3, [sp, #12]
    ed30:	0658      	lsls	r0, r3, #25
    ed32:	f140 87ef 	bpl.w	fd14 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12b4>
    ed36:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed38:	2500      	movs	r5, #0
    ed3a:	f853 4b04 	ldr.w	r4, [r3], #4
    ed3e:	b2a4      	uxth	r4, r4
    ed40:	9309      	str	r3, [sp, #36]	; 0x24
    ed42:	e6d5      	b.n	eaf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x90>
    ed44:	9b03      	ldr	r3, [sp, #12]
    ed46:	06d9      	lsls	r1, r3, #27
    ed48:	f100 84bd 	bmi.w	f6c6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc66>
    ed4c:	9b03      	ldr	r3, [sp, #12]
    ed4e:	065a      	lsls	r2, r3, #25
    ed50:	f140 87d2 	bpl.w	fcf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1298>
    ed54:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed56:	f853 4b04 	ldr.w	r4, [r3], #4
    ed5a:	b224      	sxth	r4, r4
    ed5c:	9309      	str	r3, [sp, #36]	; 0x24
    ed5e:	17e5      	asrs	r5, r4, #31
    ed60:	4622      	mov	r2, r4
    ed62:	462b      	mov	r3, r5
    ed64:	e699      	b.n	ea9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a>
    ed66:	2201      	movs	r2, #1
    ed68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed6a:	2100      	movs	r1, #0
    ed6c:	ae37      	add	r6, sp, #220	; 0xdc
    ed6e:	4614      	mov	r4, r2
    ed70:	f853 0b04 	ldr.w	r0, [r3], #4
    ed74:	9204      	str	r2, [sp, #16]
    ed76:	460a      	mov	r2, r1
    ed78:	f88d 1073 	strb.w	r1, [sp, #115]	; 0x73
    ed7c:	9407      	str	r4, [sp, #28]
    ed7e:	f88d 00dc 	strb.w	r0, [sp, #220]	; 0xdc
    ed82:	9309      	str	r3, [sp, #36]	; 0x24
    ed84:	e70f      	b.n	eba6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x146>
    ed86:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ed88:	2500      	movs	r5, #0
    ed8a:	f854 6b04 	ldr.w	r6, [r4], #4
    ed8e:	f88d 5073 	strb.w	r5, [sp, #115]	; 0x73
    ed92:	2e00      	cmp	r6, #0
    ed94:	f000 8791 	beq.w	fcba <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x125a>
    ed98:	f1ba 3fff 	cmp.w	sl, #4294967295
    ed9c:	f000 85a8 	beq.w	f8f0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe90>
    eda0:	4652      	mov	r2, sl
    eda2:	4629      	mov	r1, r5
    eda4:	4630      	mov	r0, r6
    eda6:	f017 fabb 	bl	26320 <memchr>
    edaa:	9008      	str	r0, [sp, #32]
    edac:	2800      	cmp	r0, #0
    edae:	f001 81eb 	beq.w	10188 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x188>
    edb2:	9b08      	ldr	r3, [sp, #32]
    edb4:	46aa      	mov	sl, r5
    edb6:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    edba:	1b9b      	subs	r3, r3, r6
    edbc:	9409      	str	r4, [sp, #36]	; 0x24
    edbe:	9508      	str	r5, [sp, #32]
    edc0:	9307      	str	r3, [sp, #28]
    edc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    edc6:	950d      	str	r5, [sp, #52]	; 0x34
    edc8:	9304      	str	r3, [sp, #16]
    edca:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
    edce:	e6c3      	b.n	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    edd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    edd2:	f853 2b04 	ldr.w	r2, [r3], #4
    edd6:	2a00      	cmp	r2, #0
    edd8:	9206      	str	r2, [sp, #24]
    edda:	f280 845c 	bge.w	f696 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc36>
    edde:	9a06      	ldr	r2, [sp, #24]
    ede0:	9309      	str	r3, [sp, #36]	; 0x24
    ede2:	4252      	negs	r2, r2
    ede4:	9206      	str	r2, [sp, #24]
    ede6:	9b03      	ldr	r3, [sp, #12]
    ede8:	f897 9000 	ldrb.w	r9, [r7]
    edec:	f043 0304 	orr.w	r3, r3, #4
    edf0:	9303      	str	r3, [sp, #12]
    edf2:	e5bf      	b.n	e974 <_svfprintf_r+0xbc>
    edf4:	f897 9000 	ldrb.w	r9, [r7]
    edf8:	f88d 4073 	strb.w	r4, [sp, #115]	; 0x73
    edfc:	e5ba      	b.n	e974 <_svfprintf_r+0xbc>
    edfe:	9b03      	ldr	r3, [sp, #12]
    ee00:	f897 9000 	ldrb.w	r9, [r7]
    ee04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ee08:	9303      	str	r3, [sp, #12]
    ee0a:	e5b3      	b.n	e974 <_svfprintf_r+0xbc>
    ee0c:	463a      	mov	r2, r7
    ee0e:	f812 9b01 	ldrb.w	r9, [r2], #1
    ee12:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
    ee16:	f001 82d3 	beq.w	103c0 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3c0>
    ee1a:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    ee1e:	4617      	mov	r7, r2
    ee20:	f04f 0a00 	mov.w	sl, #0
    ee24:	2b09      	cmp	r3, #9
    ee26:	f63f ada6 	bhi.w	e976 <_svfprintf_r+0xbe>
    ee2a:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    ee2e:	f817 9b01 	ldrb.w	r9, [r7], #1
    ee32:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
    ee36:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
    ee3a:	2b09      	cmp	r3, #9
    ee3c:	d9f5      	bls.n	ee2a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3ca>
    ee3e:	e59a      	b.n	e976 <_svfprintf_r+0xbe>
    ee40:	ee19 0a10 	vmov	r0, s18
    ee44:	f01b ffa6 	bl	2ad94 <_localeconv_r>
    ee48:	6843      	ldr	r3, [r0, #4]
    ee4a:	4618      	mov	r0, r3
    ee4c:	9316      	str	r3, [sp, #88]	; 0x58
    ee4e:	f017 fee3 	bl	26c18 <strlen>
    ee52:	4603      	mov	r3, r0
    ee54:	ee19 0a10 	vmov	r0, s18
    ee58:	461d      	mov	r5, r3
    ee5a:	9315      	str	r3, [sp, #84]	; 0x54
    ee5c:	f01b ff9a 	bl	2ad94 <_localeconv_r>
    ee60:	6882      	ldr	r2, [r0, #8]
    ee62:	9217      	str	r2, [sp, #92]	; 0x5c
    ee64:	2d00      	cmp	r5, #0
    ee66:	f43f adfc 	beq.w	ea62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
    ee6a:	2a00      	cmp	r2, #0
    ee6c:	f43f adf9 	beq.w	ea62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
    ee70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ee72:	781b      	ldrb	r3, [r3, #0]
    ee74:	2b00      	cmp	r3, #0
    ee76:	f43f adf4 	beq.w	ea62 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2>
    ee7a:	9b03      	ldr	r3, [sp, #12]
    ee7c:	f897 9000 	ldrb.w	r9, [r7]
    ee80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    ee84:	9303      	str	r3, [sp, #12]
    ee86:	e575      	b.n	e974 <_svfprintf_r+0xbc>
    ee88:	9b03      	ldr	r3, [sp, #12]
    ee8a:	f897 9000 	ldrb.w	r9, [r7]
    ee8e:	f043 0301 	orr.w	r3, r3, #1
    ee92:	9303      	str	r3, [sp, #12]
    ee94:	e56e      	b.n	e974 <_svfprintf_r+0xbc>
    ee96:	9b03      	ldr	r3, [sp, #12]
    ee98:	f043 0b10 	orr.w	fp, r3, #16
    ee9c:	f01b 0f20 	tst.w	fp, #32
    eea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    eea2:	f000 83b2 	beq.w	f60a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbaa>
    eea6:	3207      	adds	r2, #7
    eea8:	2301      	movs	r3, #1
    eeaa:	f022 0207 	bic.w	r2, r2, #7
    eeae:	e8f2 4502 	ldrd	r4, r5, [r2], #8
    eeb2:	9209      	str	r2, [sp, #36]	; 0x24
    eeb4:	e620      	b.n	eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    eeb6:	9b03      	ldr	r3, [sp, #12]
    eeb8:	f897 9000 	ldrb.w	r9, [r7]
    eebc:	f043 0308 	orr.w	r3, r3, #8
    eec0:	9303      	str	r3, [sp, #12]
    eec2:	e557      	b.n	e974 <_svfprintf_r+0xbc>
    eec4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    eec6:	f647 0130 	movw	r1, #30768	; 0x7830
    eeca:	9b03      	ldr	r3, [sp, #12]
    eecc:	f04f 0978 	mov.w	r9, #120	; 0x78
    eed0:	f852 4b04 	ldr.w	r4, [r2], #4
    eed4:	2500      	movs	r5, #0
    eed6:	f043 0b02 	orr.w	fp, r3, #2
    eeda:	4b1d      	ldr	r3, [pc, #116]	; (ef50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4f0>)
    eedc:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
    eee0:	9312      	str	r3, [sp, #72]	; 0x48
    eee2:	2302      	movs	r3, #2
    eee4:	9209      	str	r2, [sp, #36]	; 0x24
    eee6:	e607      	b.n	eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    eee8:	9b03      	ldr	r3, [sp, #12]
    eeea:	0699      	lsls	r1, r3, #26
    eeec:	f100 83d8 	bmi.w	f6a0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc40>
    eef0:	9b03      	ldr	r3, [sp, #12]
    eef2:	06da      	lsls	r2, r3, #27
    eef4:	f100 86c9 	bmi.w	fc8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x122a>
    eef8:	9b03      	ldr	r3, [sp, #12]
    eefa:	065b      	lsls	r3, r3, #25
    eefc:	f101 8009 	bmi.w	ff12 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14b2>
    ef00:	9b03      	ldr	r3, [sp, #12]
    ef02:	059e      	lsls	r6, r3, #22
    ef04:	f140 86c1 	bpl.w	fc8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x122a>
    ef08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ef0a:	9905      	ldr	r1, [sp, #20]
    ef0c:	f853 2b04 	ldr.w	r2, [r3], #4
    ef10:	7011      	strb	r1, [r2, #0]
    ef12:	9309      	str	r3, [sp, #36]	; 0x24
    ef14:	e500      	b.n	e918 <_svfprintf_r+0x60>
    ef16:	f897 9000 	ldrb.w	r9, [r7]
    ef1a:	9b03      	ldr	r3, [sp, #12]
    ef1c:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
    ef20:	f000 84b7 	beq.w	f892 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe32>
    ef24:	f043 0310 	orr.w	r3, r3, #16
    ef28:	9303      	str	r3, [sp, #12]
    ef2a:	e523      	b.n	e974 <_svfprintf_r+0xbc>
    ef2c:	f897 9000 	ldrb.w	r9, [r7]
    ef30:	9b03      	ldr	r3, [sp, #12]
    ef32:	f1b9 0f68 	cmp.w	r9, #104	; 0x68
    ef36:	f000 84b4 	beq.w	f8a2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe42>
    ef3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ef3e:	9303      	str	r3, [sp, #12]
    ef40:	e518      	b.n	e974 <_svfprintf_r+0xbc>
    ef42:	bf00      	nop
    ef44:	7fefffff 	.word	0x7fefffff
    ef48:	0002fa9c 	.word	0x0002fa9c
    ef4c:	0002faa0 	.word	0x0002faa0
    ef50:	0002faac 	.word	0x0002faac
    ef54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
    ef58:	f340 8137 	ble.w	f1ca <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x76a>
    ef5c:	2200      	movs	r2, #0
    ef5e:	2300      	movs	r3, #0
    ef60:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    ef64:	f7fd fb7e 	bl	c664 <__aeabi_dcmpeq>
    ef68:	2800      	cmp	r0, #0
    ef6a:	f000 8247 	beq.w	f3fc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x99c>
    ef6e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ef70:	2201      	movs	r2, #1
    ef72:	3401      	adds	r4, #1
    ef74:	49ca      	ldr	r1, [pc, #808]	; (f2a0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x840>)
    ef76:	4413      	add	r3, r2
    ef78:	f8c8 2004 	str.w	r2, [r8, #4]
    ef7c:	9426      	str	r4, [sp, #152]	; 0x98
    ef7e:	2b07      	cmp	r3, #7
    ef80:	f8c8 1000 	str.w	r1, [r8]
    ef84:	9325      	str	r3, [sp, #148]	; 0x94
    ef86:	f300 85fe 	bgt.w	fb86 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1126>
    ef8a:	f108 0808 	add.w	r8, r8, #8
    ef8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    ef90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ef92:	4293      	cmp	r3, r2
    ef94:	f280 837a 	bge.w	f68c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc2c>
    ef98:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ef9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ef9c:	3301      	adds	r3, #1
    ef9e:	9911      	ldr	r1, [sp, #68]	; 0x44
    efa0:	4414      	add	r4, r2
    efa2:	f8c8 2004 	str.w	r2, [r8, #4]
    efa6:	2b07      	cmp	r3, #7
    efa8:	f8c8 1000 	str.w	r1, [r8]
    efac:	9426      	str	r4, [sp, #152]	; 0x98
    efae:	9325      	str	r3, [sp, #148]	; 0x94
    efb0:	f300 847f 	bgt.w	f8b2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe52>
    efb4:	f108 0808 	add.w	r8, r8, #8
    efb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    efba:	1e5e      	subs	r6, r3, #1
    efbc:	2e00      	cmp	r6, #0
    efbe:	f77f ae4a 	ble.w	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
    efc2:	2e10      	cmp	r6, #16
    efc4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    efc6:	f340 85ef 	ble.w	fba8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1148>
    efca:	f04f 0910 	mov.w	r9, #16
    efce:	4db5      	ldr	r5, [pc, #724]	; (f2a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x844>)
    efd0:	ee19 aa10 	vmov	sl, s18
    efd4:	ee19 ba90 	vmov	fp, s19
    efd8:	e003      	b.n	efe2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x582>
    efda:	3e10      	subs	r6, #16
    efdc:	2e10      	cmp	r6, #16
    efde:	f340 85e4 	ble.w	fbaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x114a>
    efe2:	3301      	adds	r3, #1
    efe4:	3410      	adds	r4, #16
    efe6:	f8c8 5000 	str.w	r5, [r8]
    efea:	f108 0808 	add.w	r8, r8, #8
    efee:	2b07      	cmp	r3, #7
    eff0:	f848 9c04 	str.w	r9, [r8, #-4]
    eff4:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    eff8:	ddef      	ble.n	efda <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x57a>
    effa:	aa24      	add	r2, sp, #144	; 0x90
    effc:	4659      	mov	r1, fp
    effe:	4650      	mov	r0, sl
    f000:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f004:	f01c ff4a 	bl	2be9c <__ssprint_r>
    f008:	2800      	cmp	r0, #0
    f00a:	f041 804e 	bne.w	100aa <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xaa>
    f00e:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
    f012:	e7e2      	b.n	efda <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x57a>
    f014:	9b06      	ldr	r3, [sp, #24]
    f016:	9a04      	ldr	r2, [sp, #16]
    f018:	eba3 0b02 	sub.w	fp, r3, r2
    f01c:	f1bb 0f00 	cmp.w	fp, #0
    f020:	f77f adff 	ble.w	ec22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c2>
    f024:	f1bb 0f10 	cmp.w	fp, #16
    f028:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f02a:	f341 8118 	ble.w	1025e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x25e>
    f02e:	4620      	mov	r0, r4
    f030:	9613      	str	r6, [sp, #76]	; 0x4c
    f032:	2310      	movs	r3, #16
    f034:	4d9b      	ldr	r5, [pc, #620]	; (f2a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x844>)
    f036:	ee19 4a10 	vmov	r4, s18
    f03a:	ee19 6a90 	vmov	r6, s19
    f03e:	e004      	b.n	f04a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5ea>
    f040:	f1ab 0b10 	sub.w	fp, fp, #16
    f044:	f1bb 0f10 	cmp.w	fp, #16
    f048:	dd1d      	ble.n	f086 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x626>
    f04a:	3201      	adds	r2, #1
    f04c:	3010      	adds	r0, #16
    f04e:	f8c8 5000 	str.w	r5, [r8]
    f052:	f108 0808 	add.w	r8, r8, #8
    f056:	2a07      	cmp	r2, #7
    f058:	f848 3c04 	str.w	r3, [r8, #-4]
    f05c:	e9cd 2025 	strd	r2, r0, [sp, #148]	; 0x94
    f060:	ddee      	ble.n	f040 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5e0>
    f062:	aa24      	add	r2, sp, #144	; 0x90
    f064:	4631      	mov	r1, r6
    f066:	4620      	mov	r0, r4
    f068:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f06c:	f01c ff16 	bl	2be9c <__ssprint_r>
    f070:	2800      	cmp	r0, #0
    f072:	f040 824c 	bne.w	f50e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xaae>
    f076:	f1ab 0b10 	sub.w	fp, fp, #16
    f07a:	2310      	movs	r3, #16
    f07c:	f1bb 0f10 	cmp.w	fp, #16
    f080:	e9dd 2025 	ldrd	r2, r0, [sp, #148]	; 0x94
    f084:	dce1      	bgt.n	f04a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5ea>
    f086:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    f088:	4604      	mov	r4, r0
    f08a:	3201      	adds	r2, #1
    f08c:	445c      	add	r4, fp
    f08e:	f8c8 5000 	str.w	r5, [r8]
    f092:	2a07      	cmp	r2, #7
    f094:	f8c8 b004 	str.w	fp, [r8, #4]
    f098:	e9cd 2425 	strd	r2, r4, [sp, #148]	; 0x94
    f09c:	f300 85d8 	bgt.w	fc50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11f0>
    f0a0:	9b07      	ldr	r3, [sp, #28]
    f0a2:	f108 0808 	add.w	r8, r8, #8
    f0a6:	ebaa 0a03 	sub.w	sl, sl, r3
    f0aa:	f1ba 0f00 	cmp.w	sl, #0
    f0ae:	f77f adbf 	ble.w	ec30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d0>
    f0b2:	f1ba 0f10 	cmp.w	sl, #16
    f0b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f0b8:	f340 8643 	ble.w	fd42 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12e2>
    f0bc:	4622      	mov	r2, r4
    f0be:	9613      	str	r6, [sp, #76]	; 0x4c
    f0c0:	f04f 0b10 	mov.w	fp, #16
    f0c4:	4d77      	ldr	r5, [pc, #476]	; (f2a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x844>)
    f0c6:	ee19 4a10 	vmov	r4, s18
    f0ca:	ee19 6a90 	vmov	r6, s19
    f0ce:	e004      	b.n	f0da <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x67a>
    f0d0:	f1aa 0a10 	sub.w	sl, sl, #16
    f0d4:	f1ba 0f10 	cmp.w	sl, #16
    f0d8:	dd1c      	ble.n	f114 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6b4>
    f0da:	3301      	adds	r3, #1
    f0dc:	3210      	adds	r2, #16
    f0de:	f8c8 5000 	str.w	r5, [r8]
    f0e2:	f108 0808 	add.w	r8, r8, #8
    f0e6:	2b07      	cmp	r3, #7
    f0e8:	f848 bc04 	str.w	fp, [r8, #-4]
    f0ec:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f0f0:	ddee      	ble.n	f0d0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x670>
    f0f2:	aa24      	add	r2, sp, #144	; 0x90
    f0f4:	4631      	mov	r1, r6
    f0f6:	4620      	mov	r0, r4
    f0f8:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f0fc:	f01c fece 	bl	2be9c <__ssprint_r>
    f100:	2800      	cmp	r0, #0
    f102:	f040 8204 	bne.w	f50e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xaae>
    f106:	f1aa 0a10 	sub.w	sl, sl, #16
    f10a:	f1ba 0f10 	cmp.w	sl, #16
    f10e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f112:	dce2      	bgt.n	f0da <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x67a>
    f114:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    f116:	4614      	mov	r4, r2
    f118:	3301      	adds	r3, #1
    f11a:	4454      	add	r4, sl
    f11c:	f8c8 5000 	str.w	r5, [r8]
    f120:	2b07      	cmp	r3, #7
    f122:	f8c8 a004 	str.w	sl, [r8, #4]
    f126:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f12a:	f300 825f 	bgt.w	f5ec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb8c>
    f12e:	f108 0808 	add.w	r8, r8, #8
    f132:	e57d      	b.n	ec30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d0>
    f134:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f138:	2b01      	cmp	r3, #1
    f13a:	f000 814f 	beq.w	f3dc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x97c>
    f13e:	2b02      	cmp	r3, #2
    f140:	ae50      	add	r6, sp, #320	; 0x140
    f142:	d114      	bne.n	f16e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x70e>
    f144:	9812      	ldr	r0, [sp, #72]	; 0x48
    f146:	0923      	lsrs	r3, r4, #4
    f148:	f004 010f 	and.w	r1, r4, #15
    f14c:	092a      	lsrs	r2, r5, #4
    f14e:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    f152:	4615      	mov	r5, r2
    f154:	461c      	mov	r4, r3
    f156:	5c43      	ldrb	r3, [r0, r1]
    f158:	f806 3d01 	strb.w	r3, [r6, #-1]!
    f15c:	ea54 0305 	orrs.w	r3, r4, r5
    f160:	d1f1      	bne.n	f146 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6e6>
    f162:	ab50      	add	r3, sp, #320	; 0x140
    f164:	f8cd b00c 	str.w	fp, [sp, #12]
    f168:	1b9b      	subs	r3, r3, r6
    f16a:	9307      	str	r3, [sp, #28]
    f16c:	e4e8      	b.n	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    f16e:	08e2      	lsrs	r2, r4, #3
    f170:	f004 0307 	and.w	r3, r4, #7
    f174:	08e9      	lsrs	r1, r5, #3
    f176:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    f17a:	3330      	adds	r3, #48	; 0x30
    f17c:	460d      	mov	r5, r1
    f17e:	4614      	mov	r4, r2
    f180:	4632      	mov	r2, r6
    f182:	f806 3d01 	strb.w	r3, [r6, #-1]!
    f186:	ea54 0105 	orrs.w	r1, r4, r5
    f18a:	d1f0      	bne.n	f16e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x70e>
    f18c:	2b30      	cmp	r3, #48	; 0x30
    f18e:	d0e8      	beq.n	f162 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x702>
    f190:	f01b 0f01 	tst.w	fp, #1
    f194:	d0e5      	beq.n	f162 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x702>
    f196:	2330      	movs	r3, #48	; 0x30
    f198:	3a02      	subs	r2, #2
    f19a:	f8cd b00c 	str.w	fp, [sp, #12]
    f19e:	f806 3c01 	strb.w	r3, [r6, #-1]
    f1a2:	ab50      	add	r3, sp, #320	; 0x140
    f1a4:	4616      	mov	r6, r2
    f1a6:	1a9b      	subs	r3, r3, r2
    f1a8:	9307      	str	r3, [sp, #28]
    f1aa:	e4c9      	b.n	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    f1ac:	aa24      	add	r2, sp, #144	; 0x90
    f1ae:	ee19 1a90 	vmov	r1, s19
    f1b2:	ee19 0a10 	vmov	r0, s18
    f1b6:	f01c fe71 	bl	2be9c <__ssprint_r>
    f1ba:	2800      	cmp	r0, #0
    f1bc:	f43f ad5f 	beq.w	ec7e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x21e>
    f1c0:	ee19 9a10 	vmov	r9, s18
    f1c4:	ee19 ba90 	vmov	fp, s19
    f1c8:	e1a3      	b.n	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
    f1ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f1cc:	2b01      	cmp	r3, #1
    f1ce:	f340 81b9 	ble.w	f544 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xae4>
    f1d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f1d4:	2201      	movs	r2, #1
    f1d6:	3401      	adds	r4, #1
    f1d8:	f8c8 6000 	str.w	r6, [r8]
    f1dc:	4413      	add	r3, r2
    f1de:	f8c8 2004 	str.w	r2, [r8, #4]
    f1e2:	9426      	str	r4, [sp, #152]	; 0x98
    f1e4:	2b07      	cmp	r3, #7
    f1e6:	9325      	str	r3, [sp, #148]	; 0x94
    f1e8:	f300 8241 	bgt.w	f66e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc0e>
    f1ec:	f108 0808 	add.w	r8, r8, #8
    f1f0:	f103 0901 	add.w	r9, r3, #1
    f1f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f1f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f1f8:	4414      	add	r4, r2
    f1fa:	f1b9 0f07 	cmp.w	r9, #7
    f1fe:	f8c8 3000 	str.w	r3, [r8]
    f202:	f8c8 2004 	str.w	r2, [r8, #4]
    f206:	e9cd 9425 	strd	r9, r4, [sp, #148]	; 0x94
    f20a:	f300 8220 	bgt.w	f64e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbee>
    f20e:	f108 0808 	add.w	r8, r8, #8
    f212:	2300      	movs	r3, #0
    f214:	2200      	movs	r2, #0
    f216:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    f21a:	f7fd fa23 	bl	c664 <__aeabi_dcmpeq>
    f21e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f220:	2800      	cmp	r0, #0
    f222:	f040 81b3 	bne.w	f58c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb2c>
    f226:	3b01      	subs	r3, #1
    f228:	f109 0901 	add.w	r9, r9, #1
    f22c:	3601      	adds	r6, #1
    f22e:	441c      	add	r4, r3
    f230:	f1b9 0f07 	cmp.w	r9, #7
    f234:	f8c8 6000 	str.w	r6, [r8]
    f238:	f8c8 3004 	str.w	r3, [r8, #4]
    f23c:	e9cd 9425 	strd	r9, r4, [sp, #148]	; 0x94
    f240:	f300 8194 	bgt.w	f56c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb0c>
    f244:	f108 0808 	add.w	r8, r8, #8
    f248:	9914      	ldr	r1, [sp, #80]	; 0x50
    f24a:	f109 0301 	add.w	r3, r9, #1
    f24e:	aa20      	add	r2, sp, #128	; 0x80
    f250:	440c      	add	r4, r1
    f252:	2b07      	cmp	r3, #7
    f254:	f8c8 1004 	str.w	r1, [r8, #4]
    f258:	f8c8 2000 	str.w	r2, [r8]
    f25c:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f260:	f77f acf7 	ble.w	ec52 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f2>
    f264:	aa24      	add	r2, sp, #144	; 0x90
    f266:	ee19 1a90 	vmov	r1, s19
    f26a:	ee19 0a10 	vmov	r0, s18
    f26e:	f01c fe15 	bl	2be9c <__ssprint_r>
    f272:	2800      	cmp	r0, #0
    f274:	d1a4      	bne.n	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f276:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f278:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f27c:	e4eb      	b.n	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
    f27e:	2d10      	cmp	r5, #16
    f280:	9926      	ldr	r1, [sp, #152]	; 0x98
    f282:	f340 87a0 	ble.w	101c6 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1c6>
    f286:	9618      	str	r6, [sp, #96]	; 0x60
    f288:	2410      	movs	r4, #16
    f28a:	462e      	mov	r6, r5
    f28c:	9719      	str	r7, [sp, #100]	; 0x64
    f28e:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f290:	4608      	mov	r0, r1
    f292:	ee19 5a10 	vmov	r5, s18
    f296:	ee19 7a90 	vmov	r7, s19
    f29a:	9313      	str	r3, [sp, #76]	; 0x4c
    f29c:	e007      	b.n	f2ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84e>
    f29e:	bf00      	nop
    f2a0:	0002fadc 	.word	0x0002fadc
    f2a4:	0002faf0 	.word	0x0002faf0
    f2a8:	3e10      	subs	r6, #16
    f2aa:	2e10      	cmp	r6, #16
    f2ac:	dd1b      	ble.n	f2e6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x886>
    f2ae:	3201      	adds	r2, #1
    f2b0:	3010      	adds	r0, #16
    f2b2:	4bbe      	ldr	r3, [pc, #760]	; (f5ac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4c>)
    f2b4:	f108 0808 	add.w	r8, r8, #8
    f2b8:	2a07      	cmp	r2, #7
    f2ba:	f848 4c04 	str.w	r4, [r8, #-4]
    f2be:	f848 3c08 	str.w	r3, [r8, #-8]
    f2c2:	e9cd 2025 	strd	r2, r0, [sp, #148]	; 0x94
    f2c6:	ddef      	ble.n	f2a8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x848>
    f2c8:	aa24      	add	r2, sp, #144	; 0x90
    f2ca:	4639      	mov	r1, r7
    f2cc:	4628      	mov	r0, r5
    f2ce:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f2d2:	f01c fde3 	bl	2be9c <__ssprint_r>
    f2d6:	2800      	cmp	r0, #0
    f2d8:	f040 8447 	bne.w	fb6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x110a>
    f2dc:	3e10      	subs	r6, #16
    f2de:	2e10      	cmp	r6, #16
    f2e0:	e9dd 2025 	ldrd	r2, r0, [sp, #148]	; 0x94
    f2e4:	dce3      	bgt.n	f2ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84e>
    f2e6:	4635      	mov	r5, r6
    f2e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f2ea:	9e18      	ldr	r6, [sp, #96]	; 0x60
    f2ec:	4601      	mov	r1, r0
    f2ee:	9f19      	ldr	r7, [sp, #100]	; 0x64
    f2f0:	3201      	adds	r2, #1
    f2f2:	186c      	adds	r4, r5, r1
    f2f4:	49ad      	ldr	r1, [pc, #692]	; (f5ac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4c>)
    f2f6:	2a07      	cmp	r2, #7
    f2f8:	f8c8 5004 	str.w	r5, [r8, #4]
    f2fc:	f8c8 1000 	str.w	r1, [r8]
    f300:	e9cd 2425 	strd	r2, r4, [sp, #148]	; 0x94
    f304:	f300 841e 	bgt.w	fb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10e4>
    f308:	f108 0808 	add.w	r8, r8, #8
    f30c:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    f310:	e460      	b.n	ebd4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x174>
    f312:	aa24      	add	r2, sp, #144	; 0x90
    f314:	ee19 1a90 	vmov	r1, s19
    f318:	ee19 0a10 	vmov	r0, s18
    f31c:	9313      	str	r3, [sp, #76]	; 0x4c
    f31e:	f01c fdbd 	bl	2be9c <__ssprint_r>
    f322:	2800      	cmp	r0, #0
    f324:	f47f af4c 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f328:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f32a:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f32e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f330:	e462      	b.n	ebf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x198>
    f332:	aa24      	add	r2, sp, #144	; 0x90
    f334:	ee19 1a90 	vmov	r1, s19
    f338:	ee19 0a10 	vmov	r0, s18
    f33c:	f01c fdae 	bl	2be9c <__ssprint_r>
    f340:	2800      	cmp	r0, #0
    f342:	f47f af3d 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f346:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f348:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f34c:	e465      	b.n	ec1a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ba>
    f34e:	2d10      	cmp	r5, #16
    f350:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f352:	dd24      	ble.n	f39e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x93e>
    f354:	2610      	movs	r6, #16
    f356:	ee19 9a10 	vmov	r9, s18
    f35a:	ee19 aa90 	vmov	sl, s19
    f35e:	e002      	b.n	f366 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x906>
    f360:	3d10      	subs	r5, #16
    f362:	2d10      	cmp	r5, #16
    f364:	dd1b      	ble.n	f39e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x93e>
    f366:	3301      	adds	r3, #1
    f368:	3410      	adds	r4, #16
    f36a:	4a90      	ldr	r2, [pc, #576]	; (f5ac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4c>)
    f36c:	f108 0808 	add.w	r8, r8, #8
    f370:	2b07      	cmp	r3, #7
    f372:	f848 6c04 	str.w	r6, [r8, #-4]
    f376:	f848 2c08 	str.w	r2, [r8, #-8]
    f37a:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f37e:	ddef      	ble.n	f360 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x900>
    f380:	aa24      	add	r2, sp, #144	; 0x90
    f382:	4651      	mov	r1, sl
    f384:	4648      	mov	r0, r9
    f386:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f38a:	f01c fd87 	bl	2be9c <__ssprint_r>
    f38e:	2800      	cmp	r0, #0
    f390:	f040 8408 	bne.w	fba4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1144>
    f394:	3d10      	subs	r5, #16
    f396:	2d10      	cmp	r5, #16
    f398:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
    f39c:	dce3      	bgt.n	f366 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x906>
    f39e:	3301      	adds	r3, #1
    f3a0:	442c      	add	r4, r5
    f3a2:	4a82      	ldr	r2, [pc, #520]	; (f5ac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4c>)
    f3a4:	2b07      	cmp	r3, #7
    f3a6:	f8c8 5004 	str.w	r5, [r8, #4]
    f3aa:	f8c8 2000 	str.w	r2, [r8]
    f3ae:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f3b2:	f77f ac59 	ble.w	ec68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x208>
    f3b6:	aa24      	add	r2, sp, #144	; 0x90
    f3b8:	ee19 1a90 	vmov	r1, s19
    f3bc:	ee19 0a10 	vmov	r0, s18
    f3c0:	f01c fd6c 	bl	2be9c <__ssprint_r>
    f3c4:	2800      	cmp	r0, #0
    f3c6:	f47f aefb 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f3ca:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f3cc:	e44c      	b.n	ec68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x208>
    f3ce:	4692      	mov	sl, r2
    f3d0:	ae50      	add	r6, sp, #320	; 0x140
    f3d2:	9207      	str	r2, [sp, #28]
    f3d4:	f7ff bbb4 	b.w	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    f3d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f3dc:	2d00      	cmp	r5, #0
    f3de:	bf08      	it	eq
    f3e0:	2c0a      	cmpeq	r4, #10
    f3e2:	f080 83ef 	bcs.w	fbc4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1164>
    f3e6:	3430      	adds	r4, #48	; 0x30
    f3e8:	2301      	movs	r3, #1
    f3ea:	f20d 163f 	addw	r6, sp, #319	; 0x13f
    f3ee:	f8cd b00c 	str.w	fp, [sp, #12]
    f3f2:	9307      	str	r3, [sp, #28]
    f3f4:	f88d 413f 	strb.w	r4, [sp, #319]	; 0x13f
    f3f8:	f7ff bba2 	b.w	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    f3fc:	991e      	ldr	r1, [sp, #120]	; 0x78
    f3fe:	2900      	cmp	r1, #0
    f400:	f340 836b 	ble.w	fada <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x107a>
    f404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f408:	4293      	cmp	r3, r2
    f40a:	bfa8      	it	ge
    f40c:	4613      	movge	r3, r2
    f40e:	2b00      	cmp	r3, #0
    f410:	461d      	mov	r5, r3
    f412:	dd0d      	ble.n	f430 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9d0>
    f414:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f416:	442c      	add	r4, r5
    f418:	f8c8 6000 	str.w	r6, [r8]
    f41c:	3301      	adds	r3, #1
    f41e:	9426      	str	r4, [sp, #152]	; 0x98
    f420:	f8c8 5004 	str.w	r5, [r8, #4]
    f424:	2b07      	cmp	r3, #7
    f426:	9325      	str	r3, [sp, #148]	; 0x94
    f428:	f300 8630 	bgt.w	1008c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x8c>
    f42c:	f108 0808 	add.w	r8, r8, #8
    f430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f432:	2d00      	cmp	r5, #0
    f434:	bfa8      	it	ge
    f436:	1b5b      	subge	r3, r3, r5
    f438:	2b00      	cmp	r3, #0
    f43a:	4699      	mov	r9, r3
    f43c:	f300 8269 	bgt.w	f912 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xeb2>
    f440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f442:	4433      	add	r3, r6
    f444:	469b      	mov	fp, r3
    f446:	9b03      	ldr	r3, [sp, #12]
    f448:	055b      	lsls	r3, r3, #21
    f44a:	f100 828f 	bmi.w	f96c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf0c>
    f44e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f452:	4293      	cmp	r3, r2
    f454:	db03      	blt.n	f45e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9fe>
    f456:	9a03      	ldr	r2, [sp, #12]
    f458:	07d5      	lsls	r5, r2, #31
    f45a:	f140 8550 	bpl.w	fefe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x149e>
    f45e:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f460:	9910      	ldr	r1, [sp, #64]	; 0x40
    f462:	3201      	adds	r2, #1
    f464:	9811      	ldr	r0, [sp, #68]	; 0x44
    f466:	440c      	add	r4, r1
    f468:	f8c8 1004 	str.w	r1, [r8, #4]
    f46c:	2a07      	cmp	r2, #7
    f46e:	f8c8 0000 	str.w	r0, [r8]
    f472:	9426      	str	r4, [sp, #152]	; 0x98
    f474:	9225      	str	r2, [sp, #148]	; 0x94
    f476:	f300 861e 	bgt.w	100b6 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xb6>
    f47a:	f108 0808 	add.w	r8, r8, #8
    f47e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f480:	4416      	add	r6, r2
    f482:	1ad3      	subs	r3, r2, r3
    f484:	eba6 060b 	sub.w	r6, r6, fp
    f488:	429e      	cmp	r6, r3
    f48a:	bfa8      	it	ge
    f48c:	461e      	movge	r6, r3
    f48e:	2e00      	cmp	r6, #0
    f490:	dd0d      	ble.n	f4ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa4e>
    f492:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f494:	4434      	add	r4, r6
    f496:	f8c8 b000 	str.w	fp, [r8]
    f49a:	3201      	adds	r2, #1
    f49c:	9426      	str	r4, [sp, #152]	; 0x98
    f49e:	f8c8 6004 	str.w	r6, [r8, #4]
    f4a2:	2a07      	cmp	r2, #7
    f4a4:	9225      	str	r2, [sp, #148]	; 0x94
    f4a6:	f300 867c 	bgt.w	101a2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1a2>
    f4aa:	f108 0808 	add.w	r8, r8, #8
    f4ae:	2e00      	cmp	r6, #0
    f4b0:	bfac      	ite	ge
    f4b2:	1b9e      	subge	r6, r3, r6
    f4b4:	461e      	movlt	r6, r3
    f4b6:	2e00      	cmp	r6, #0
    f4b8:	f77f abcd 	ble.w	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
    f4bc:	2e10      	cmp	r6, #16
    f4be:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f4c0:	f340 8372 	ble.w	fba8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1148>
    f4c4:	f04f 0910 	mov.w	r9, #16
    f4c8:	4d39      	ldr	r5, [pc, #228]	; (f5b0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb50>)
    f4ca:	ee19 aa10 	vmov	sl, s18
    f4ce:	ee19 ba90 	vmov	fp, s19
    f4d2:	e003      	b.n	f4dc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa7c>
    f4d4:	3e10      	subs	r6, #16
    f4d6:	2e10      	cmp	r6, #16
    f4d8:	f340 8367 	ble.w	fbaa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x114a>
    f4dc:	3301      	adds	r3, #1
    f4de:	3410      	adds	r4, #16
    f4e0:	f8c8 5000 	str.w	r5, [r8]
    f4e4:	f108 0808 	add.w	r8, r8, #8
    f4e8:	2b07      	cmp	r3, #7
    f4ea:	f848 9c04 	str.w	r9, [r8, #-4]
    f4ee:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f4f2:	ddef      	ble.n	f4d4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa74>
    f4f4:	aa24      	add	r2, sp, #144	; 0x90
    f4f6:	4659      	mov	r1, fp
    f4f8:	4650      	mov	r0, sl
    f4fa:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f4fe:	f01c fccd 	bl	2be9c <__ssprint_r>
    f502:	2800      	cmp	r0, #0
    f504:	f040 85d1 	bne.w	100aa <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xaa>
    f508:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
    f50c:	e7e2      	b.n	f4d4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa74>
    f50e:	46a1      	mov	r9, r4
    f510:	46b3      	mov	fp, r6
    f512:	9b08      	ldr	r3, [sp, #32]
    f514:	b11b      	cbz	r3, f51e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xabe>
    f516:	9908      	ldr	r1, [sp, #32]
    f518:	4648      	mov	r0, r9
    f51a:	f01a fd9d 	bl	2a058 <_free_r>
    f51e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    f522:	f013 0f40 	tst.w	r3, #64	; 0x40
    f526:	9b05      	ldr	r3, [sp, #20]
    f528:	bf18      	it	ne
    f52a:	f04f 33ff 	movne.w	r3, #4294967295
    f52e:	9305      	str	r3, [sp, #20]
    f530:	9805      	ldr	r0, [sp, #20]
    f532:	b051      	add	sp, #324	; 0x144
    f534:	ecbd 8b08 	vpop	{d8-d11}
    f538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f53c:	469a      	mov	sl, r3
    f53e:	ae50      	add	r6, sp, #320	; 0x140
    f540:	f7ff bafe 	b.w	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    f544:	9b03      	ldr	r3, [sp, #12]
    f546:	07d8      	lsls	r0, r3, #31
    f548:	f53f ae43 	bmi.w	f1d2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x772>
    f54c:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f54e:	2301      	movs	r3, #1
    f550:	3401      	adds	r4, #1
    f552:	f8c8 6000 	str.w	r6, [r8]
    f556:	eb02 0903 	add.w	r9, r2, r3
    f55a:	f8c8 3004 	str.w	r3, [r8, #4]
    f55e:	9426      	str	r4, [sp, #152]	; 0x98
    f560:	f1b9 0f07 	cmp.w	r9, #7
    f564:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
    f568:	f77f ae6c 	ble.w	f244 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e4>
    f56c:	aa24      	add	r2, sp, #144	; 0x90
    f56e:	ee19 1a90 	vmov	r1, s19
    f572:	ee19 0a10 	vmov	r0, s18
    f576:	f01c fc91 	bl	2be9c <__ssprint_r>
    f57a:	2800      	cmp	r0, #0
    f57c:	f47f ae20 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f580:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f582:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f586:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
    f58a:	e65d      	b.n	f248 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e8>
    f58c:	1e5e      	subs	r6, r3, #1
    f58e:	2e00      	cmp	r6, #0
    f590:	f77f ae5a 	ble.w	f248 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e8>
    f594:	2e10      	cmp	r6, #16
    f596:	4d06      	ldr	r5, [pc, #24]	; (f5b0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb50>)
    f598:	f340 83a0 	ble.w	fcdc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x127c>
    f59c:	464b      	mov	r3, r9
    f59e:	f04f 0a10 	mov.w	sl, #16
    f5a2:	ee19 9a10 	vmov	r9, s18
    f5a6:	ee19 ba90 	vmov	fp, s19
    f5aa:	e007      	b.n	f5bc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb5c>
    f5ac:	0002fae0 	.word	0x0002fae0
    f5b0:	0002faf0 	.word	0x0002faf0
    f5b4:	3e10      	subs	r6, #16
    f5b6:	2e10      	cmp	r6, #16
    f5b8:	f340 838f 	ble.w	fcda <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x127a>
    f5bc:	3301      	adds	r3, #1
    f5be:	3410      	adds	r4, #16
    f5c0:	f8c8 5000 	str.w	r5, [r8]
    f5c4:	f108 0808 	add.w	r8, r8, #8
    f5c8:	2b07      	cmp	r3, #7
    f5ca:	f848 ac04 	str.w	sl, [r8, #-4]
    f5ce:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    f5d2:	ddef      	ble.n	f5b4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb54>
    f5d4:	aa24      	add	r2, sp, #144	; 0x90
    f5d6:	4659      	mov	r1, fp
    f5d8:	4648      	mov	r0, r9
    f5da:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f5de:	f01c fc5d 	bl	2be9c <__ssprint_r>
    f5e2:	2800      	cmp	r0, #0
    f5e4:	d195      	bne.n	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
    f5e6:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
    f5ea:	e7e3      	b.n	f5b4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb54>
    f5ec:	aa24      	add	r2, sp, #144	; 0x90
    f5ee:	ee19 1a90 	vmov	r1, s19
    f5f2:	ee19 0a10 	vmov	r0, s18
    f5f6:	f01c fc51 	bl	2be9c <__ssprint_r>
    f5fa:	2800      	cmp	r0, #0
    f5fc:	f47f ade0 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f600:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f602:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f606:	f7ff bb13 	b.w	ec30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d0>
    f60a:	f852 4b04 	ldr.w	r4, [r2], #4
    f60e:	f01b 0f10 	tst.w	fp, #16
    f612:	f04f 0301 	mov.w	r3, #1
    f616:	9209      	str	r2, [sp, #36]	; 0x24
    f618:	d10a      	bne.n	f630 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbd0>
    f61a:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f61e:	d003      	beq.n	f628 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbc8>
    f620:	b2a4      	uxth	r4, r4
    f622:	2500      	movs	r5, #0
    f624:	f7ff ba68 	b.w	eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    f628:	f41b 7f00 	tst.w	fp, #512	; 0x200
    f62c:	bf18      	it	ne
    f62e:	b2e4      	uxtbne	r4, r4
    f630:	2500      	movs	r5, #0
    f632:	f7ff ba61 	b.w	eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    f636:	222d      	movs	r2, #45	; 0x2d
    f638:	4264      	negs	r4, r4
    f63a:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f63e:	f04f 0301 	mov.w	r3, #1
    f642:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    f646:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
    f64a:	f7ff ba58 	b.w	eafe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9e>
    f64e:	aa24      	add	r2, sp, #144	; 0x90
    f650:	ee19 1a90 	vmov	r1, s19
    f654:	ee19 0a10 	vmov	r0, s18
    f658:	f01c fc20 	bl	2be9c <__ssprint_r>
    f65c:	2800      	cmp	r0, #0
    f65e:	f47f adaf 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f662:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f664:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f668:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
    f66c:	e5d1      	b.n	f212 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7b2>
    f66e:	aa24      	add	r2, sp, #144	; 0x90
    f670:	ee19 1a90 	vmov	r1, s19
    f674:	ee19 0a10 	vmov	r0, s18
    f678:	f01c fc10 	bl	2be9c <__ssprint_r>
    f67c:	2800      	cmp	r0, #0
    f67e:	f47f ad9f 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f682:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f684:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f688:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f68a:	e5b1      	b.n	f1f0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x790>
    f68c:	9b03      	ldr	r3, [sp, #12]
    f68e:	07d9      	lsls	r1, r3, #31
    f690:	f57f aae1 	bpl.w	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
    f694:	e480      	b.n	ef98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x538>
    f696:	f897 9000 	ldrb.w	r9, [r7]
    f69a:	9309      	str	r3, [sp, #36]	; 0x24
    f69c:	f7ff b96a 	b.w	e974 <_svfprintf_r+0xbc>
    f6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f6a2:	f853 1b04 	ldr.w	r1, [r3], #4
    f6a6:	9309      	str	r3, [sp, #36]	; 0x24
    f6a8:	9b05      	ldr	r3, [sp, #20]
    f6aa:	17dd      	asrs	r5, r3, #31
    f6ac:	461a      	mov	r2, r3
    f6ae:	462b      	mov	r3, r5
    f6b0:	e9c1 2300 	strd	r2, r3, [r1]
    f6b4:	f7ff b930 	b.w	e918 <_svfprintf_r+0x60>
    f6b8:	2320      	movs	r3, #32
    f6ba:	f897 9000 	ldrb.w	r9, [r7]
    f6be:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    f6c2:	f7ff b957 	b.w	e974 <_svfprintf_r+0xbc>
    f6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f6c8:	f853 4b04 	ldr.w	r4, [r3], #4
    f6cc:	17e5      	asrs	r5, r4, #31
    f6ce:	9309      	str	r3, [sp, #36]	; 0x24
    f6d0:	4622      	mov	r2, r4
    f6d2:	462b      	mov	r3, r5
    f6d4:	f7ff b9e1 	b.w	ea9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a>
    f6d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f6da:	2500      	movs	r5, #0
    f6dc:	f853 4b04 	ldr.w	r4, [r3], #4
    f6e0:	9309      	str	r3, [sp, #36]	; 0x24
    f6e2:	f7ff ba05 	b.w	eaf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x90>
    f6e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    f6ea:	4602      	mov	r2, r0
    f6ec:	460b      	mov	r3, r1
    f6ee:	f7fd fd93 	bl	d218 <__aeabi_dcmpun>
    f6f2:	2800      	cmp	r0, #0
    f6f4:	f040 85e5 	bne.w	102c2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2c2>
    f6f8:	f029 0320 	bic.w	r3, r9, #32
    f6fc:	2b41      	cmp	r3, #65	; 0x41
    f6fe:	9304      	str	r3, [sp, #16]
    f700:	f040 8328 	bne.w	fd54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12f4>
    f704:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    f708:	f04f 0230 	mov.w	r2, #48	; 0x30
    f70c:	bf0c      	ite	eq
    f70e:	2378      	moveq	r3, #120	; 0x78
    f710:	2358      	movne	r3, #88	; 0x58
    f712:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
    f716:	f88d 2074 	strb.w	r2, [sp, #116]	; 0x74
    f71a:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    f71e:	f300 8400 	bgt.w	ff22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14c2>
    f722:	ae37      	add	r6, sp, #220	; 0xdc
    f724:	9008      	str	r0, [sp, #32]
    f726:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
    f72a:	2a00      	cmp	r2, #0
    f72c:	f280 8577 	bge.w	1021e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x21e>
    f730:	232d      	movs	r3, #45	; 0x2d
    f732:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
    f736:	9313      	str	r3, [sp, #76]	; 0x4c
    f738:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
    f73c:	911a      	str	r1, [sp, #104]	; 0x68
    f73e:	931b      	str	r3, [sp, #108]	; 0x6c
    f740:	a81e      	add	r0, sp, #120	; 0x78
    f742:	ed9d 0b1a 	vldr	d0, [sp, #104]	; 0x68
    f746:	f01c f927 	bl	2b998 <frexp>
    f74a:	2200      	movs	r2, #0
    f74c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    f750:	ec51 0b10 	vmov	r0, r1, d0
    f754:	f7fd fb4e 	bl	cdf4 <__aeabi_dmul>
    f758:	2200      	movs	r2, #0
    f75a:	2300      	movs	r3, #0
    f75c:	4604      	mov	r4, r0
    f75e:	460d      	mov	r5, r1
    f760:	f7fc ff80 	bl	c664 <__aeabi_dcmpeq>
    f764:	b108      	cbz	r0, f76a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd0a>
    f766:	2301      	movs	r3, #1
    f768:	931e      	str	r3, [sp, #120]	; 0x78
    f76a:	4ab9      	ldr	r2, [pc, #740]	; (fa50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff0>)
    f76c:	f10a 3aff 	add.w	sl, sl, #4294967295
    f770:	4bb8      	ldr	r3, [pc, #736]	; (fa54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff4>)
    f772:	46b3      	mov	fp, r6
    f774:	9714      	str	r7, [sp, #80]	; 0x50
    f776:	f1b9 0f61 	cmp.w	r9, #97	; 0x61
    f77a:	bf18      	it	ne
    f77c:	461a      	movne	r2, r3
    f77e:	f8cd 801c 	str.w	r8, [sp, #28]
    f782:	4617      	mov	r7, r2
    f784:	920a      	str	r2, [sp, #40]	; 0x28
    f786:	e9cd 960c 	strd	r9, r6, [sp, #48]	; 0x30
    f78a:	e002      	b.n	f792 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd32>
    f78c:	f7fc ff6a 	bl	c664 <__aeabi_dcmpeq>
    f790:	bb18      	cbnz	r0, f7da <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd7a>
    f792:	2200      	movs	r2, #0
    f794:	4bb0      	ldr	r3, [pc, #704]	; (fa58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff8>)
    f796:	4620      	mov	r0, r4
    f798:	4629      	mov	r1, r5
    f79a:	f7fd fb2b 	bl	cdf4 <__aeabi_dmul>
    f79e:	460d      	mov	r5, r1
    f7a0:	4604      	mov	r4, r0
    f7a2:	f7fc ff91 	bl	c6c8 <__aeabi_d2iz>
    f7a6:	4606      	mov	r6, r0
    f7a8:	f7fc fe9c 	bl	c4e4 <__aeabi_i2d>
    f7ac:	4602      	mov	r2, r0
    f7ae:	460b      	mov	r3, r1
    f7b0:	4620      	mov	r0, r4
    f7b2:	4629      	mov	r1, r5
    f7b4:	f7fc fd48 	bl	c248 <__aeabi_dsub>
    f7b8:	f817 c006 	ldrb.w	ip, [r7, r6]
    f7bc:	f1ba 3fff 	cmp.w	sl, #4294967295
    f7c0:	46d8      	mov	r8, fp
    f7c2:	46d1      	mov	r9, sl
    f7c4:	4604      	mov	r4, r0
    f7c6:	460d      	mov	r5, r1
    f7c8:	f04f 0200 	mov.w	r2, #0
    f7cc:	f04f 0300 	mov.w	r3, #0
    f7d0:	f10a 3aff 	add.w	sl, sl, #4294967295
    f7d4:	f80b cb01 	strb.w	ip, [fp], #1
    f7d8:	d1d8      	bne.n	f78c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd2c>
    f7da:	2200      	movs	r2, #0
    f7dc:	4b9f      	ldr	r3, [pc, #636]	; (fa5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xffc>)
    f7de:	4620      	mov	r0, r4
    f7e0:	4629      	mov	r1, r5
    f7e2:	46b2      	mov	sl, r6
    f7e4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    f7e8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    f7ea:	f8dd 801c 	ldr.w	r8, [sp, #28]
    f7ee:	9f14      	ldr	r7, [sp, #80]	; 0x50
    f7f0:	f8cd 901c 	str.w	r9, [sp, #28]
    f7f4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    f7f8:	f7fc ff5c 	bl	c6b4 <__aeabi_dcmpgt>
    f7fc:	2800      	cmp	r0, #0
    f7fe:	f040 858a 	bne.w	10316 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x316>
    f802:	4620      	mov	r0, r4
    f804:	4629      	mov	r1, r5
    f806:	2200      	movs	r2, #0
    f808:	4b94      	ldr	r3, [pc, #592]	; (fa5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xffc>)
    f80a:	f7fc ff2b 	bl	c664 <__aeabi_dcmpeq>
    f80e:	b118      	cbz	r0, f818 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdb8>
    f810:	4653      	mov	r3, sl
    f812:	07db      	lsls	r3, r3, #31
    f814:	f100 857f 	bmi.w	10316 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x316>
    f818:	9b07      	ldr	r3, [sp, #28]
    f81a:	2b00      	cmp	r3, #0
    f81c:	db07      	blt.n	f82e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdce>
    f81e:	9b07      	ldr	r3, [sp, #28]
    f820:	2230      	movs	r2, #48	; 0x30
    f822:	3301      	adds	r3, #1
    f824:	445b      	add	r3, fp
    f826:	f80b 2b01 	strb.w	r2, [fp], #1
    f82a:	455b      	cmp	r3, fp
    f82c:	d1fb      	bne.n	f826 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdc6>
    f82e:	9b03      	ldr	r3, [sp, #12]
    f830:	f043 0302 	orr.w	r3, r3, #2
    f834:	9303      	str	r3, [sp, #12]
    f836:	ebab 0306 	sub.w	r3, fp, r6
    f83a:	930c      	str	r3, [sp, #48]	; 0x30
    f83c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f83e:	930a      	str	r3, [sp, #40]	; 0x28
    f840:	e2d0      	b.n	fde4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1384>
    f842:	4b83      	ldr	r3, [pc, #524]	; (fa50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff0>)
    f844:	9312      	str	r3, [sp, #72]	; 0x48
    f846:	9b03      	ldr	r3, [sp, #12]
    f848:	0699      	lsls	r1, r3, #26
    f84a:	f140 80ea 	bpl.w	fa22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfc2>
    f84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f850:	3307      	adds	r3, #7
    f852:	f023 0307 	bic.w	r3, r3, #7
    f856:	e8f3 4502 	ldrd	r4, r5, [r3], #8
    f85a:	9309      	str	r3, [sp, #36]	; 0x24
    f85c:	ea54 0305 	orrs.w	r3, r4, r5
    f860:	d00a      	beq.n	f878 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe18>
    f862:	9b03      	ldr	r3, [sp, #12]
    f864:	07de      	lsls	r6, r3, #31
    f866:	d507      	bpl.n	f878 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe18>
    f868:	f043 0302 	orr.w	r3, r3, #2
    f86c:	f88d 9075 	strb.w	r9, [sp, #117]	; 0x75
    f870:	9303      	str	r3, [sp, #12]
    f872:	2330      	movs	r3, #48	; 0x30
    f874:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    f878:	9b03      	ldr	r3, [sp, #12]
    f87a:	f423 6b80 	bic.w	fp, r3, #1024	; 0x400
    f87e:	2302      	movs	r3, #2
    f880:	f7ff b93a 	b.w	eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>
    f884:	f8dd b00c 	ldr.w	fp, [sp, #12]
    f888:	f7ff bb08 	b.w	ee9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x43c>
    f88c:	4b71      	ldr	r3, [pc, #452]	; (fa54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xff4>)
    f88e:	9312      	str	r3, [sp, #72]	; 0x48
    f890:	e7d9      	b.n	f846 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xde6>
    f892:	f043 0320 	orr.w	r3, r3, #32
    f896:	f897 9001 	ldrb.w	r9, [r7, #1]
    f89a:	3701      	adds	r7, #1
    f89c:	9303      	str	r3, [sp, #12]
    f89e:	f7ff b869 	b.w	e974 <_svfprintf_r+0xbc>
    f8a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    f8a6:	f897 9001 	ldrb.w	r9, [r7, #1]
    f8aa:	3701      	adds	r7, #1
    f8ac:	9303      	str	r3, [sp, #12]
    f8ae:	f7ff b861 	b.w	e974 <_svfprintf_r+0xbc>
    f8b2:	aa24      	add	r2, sp, #144	; 0x90
    f8b4:	ee19 1a90 	vmov	r1, s19
    f8b8:	ee19 0a10 	vmov	r0, s18
    f8bc:	f01c faee 	bl	2be9c <__ssprint_r>
    f8c0:	2800      	cmp	r0, #0
    f8c2:	f47f ac7d 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    f8c6:	9c26      	ldr	r4, [sp, #152]	; 0x98
    f8c8:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f8cc:	f7ff bb74 	b.w	efb8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x558>
    f8d0:	2140      	movs	r1, #64	; 0x40
    f8d2:	4648      	mov	r0, r9
    f8d4:	f016 fa56 	bl	25d84 <_malloc_r>
    f8d8:	f8cb 0000 	str.w	r0, [fp]
    f8dc:	f8cb 0010 	str.w	r0, [fp, #16]
    f8e0:	2800      	cmp	r0, #0
    f8e2:	f000 858d 	beq.w	10400 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x400>
    f8e6:	2340      	movs	r3, #64	; 0x40
    f8e8:	f8cb 3014 	str.w	r3, [fp, #20]
    f8ec:	f7fe bffe 	b.w	e8ec <_svfprintf_r+0x34>
    f8f0:	4630      	mov	r0, r6
    f8f2:	46aa      	mov	sl, r5
    f8f4:	f017 f990 	bl	26c18 <strlen>
    f8f8:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    f8fc:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    f900:	9007      	str	r0, [sp, #28]
    f902:	950d      	str	r5, [sp, #52]	; 0x34
    f904:	9304      	str	r3, [sp, #16]
    f906:	e9cd 5408 	strd	r5, r4, [sp, #32]
    f90a:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
    f90e:	f7ff b923 	b.w	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    f912:	f1b9 0f10 	cmp.w	r9, #16
    f916:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f918:	f340 8564 	ble.w	103e4 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3e4>
    f91c:	4622      	mov	r2, r4
    f91e:	f04f 0a10 	mov.w	sl, #16
    f922:	4d4f      	ldr	r5, [pc, #316]	; (fa60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1000>)
    f924:	ee19 ba10 	vmov	fp, s18
    f928:	ee19 4a90 	vmov	r4, s19
    f92c:	e005      	b.n	f93a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xeda>
    f92e:	f1a9 0910 	sub.w	r9, r9, #16
    f932:	f1b9 0f10 	cmp.w	r9, #16
    f936:	f340 82c4 	ble.w	fec2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1462>
    f93a:	3301      	adds	r3, #1
    f93c:	3210      	adds	r2, #16
    f93e:	f8c8 5000 	str.w	r5, [r8]
    f942:	f108 0808 	add.w	r8, r8, #8
    f946:	2b07      	cmp	r3, #7
    f948:	f848 ac04 	str.w	sl, [r8, #-4]
    f94c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f950:	dded      	ble.n	f92e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xece>
    f952:	aa24      	add	r2, sp, #144	; 0x90
    f954:	4621      	mov	r1, r4
    f956:	4658      	mov	r0, fp
    f958:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    f95c:	f01c fa9e 	bl	2be9c <__ssprint_r>
    f960:	2800      	cmp	r0, #0
    f962:	f040 847f 	bne.w	10264 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x264>
    f966:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f96a:	e7e0      	b.n	f92e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xece>
    f96c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f96e:	2b00      	cmp	r3, #0
    f970:	dc0a      	bgt.n	f988 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf28>
    f972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f974:	2b00      	cmp	r3, #0
    f976:	dc07      	bgt.n	f988 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf28>
    f978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f97a:	18f3      	adds	r3, r6, r3
    f97c:	9307      	str	r3, [sp, #28]
    f97e:	9b07      	ldr	r3, [sp, #28]
    f980:	459b      	cmp	fp, r3
    f982:	bf28      	it	cs
    f984:	469b      	movcs	fp, r3
    f986:	e562      	b.n	f44e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9ee>
    f988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f98a:	4622      	mov	r2, r4
    f98c:	9613      	str	r6, [sp, #76]	; 0x4c
    f98e:	ee19 9a10 	vmov	r9, s18
    f992:	18f3      	adds	r3, r6, r3
    f994:	9718      	str	r7, [sp, #96]	; 0x60
    f996:	465e      	mov	r6, fp
    f998:	f8df a0c4 	ldr.w	sl, [pc, #196]	; fa60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1000>
    f99c:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    f9a0:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    f9a2:	930a      	str	r3, [sp, #40]	; 0x28
    f9a4:	f1bb 0f00 	cmp.w	fp, #0
    f9a8:	d045      	beq.n	fa36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfd6>
    f9aa:	f10b 3bff 	add.w	fp, fp, #4294967295
    f9ae:	9825      	ldr	r0, [sp, #148]	; 0x94
    f9b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f9b2:	3001      	adds	r0, #1
    f9b4:	9916      	ldr	r1, [sp, #88]	; 0x58
    f9b6:	441a      	add	r2, r3
    f9b8:	f8c8 3004 	str.w	r3, [r8, #4]
    f9bc:	2807      	cmp	r0, #7
    f9be:	f8c8 1000 	str.w	r1, [r8]
    f9c2:	9226      	str	r2, [sp, #152]	; 0x98
    f9c4:	9025      	str	r0, [sp, #148]	; 0x94
    f9c6:	dc7b      	bgt.n	fac0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1060>
    f9c8:	f108 0808 	add.w	r8, r8, #8
    f9cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9ce:	7838      	ldrb	r0, [r7, #0]
    f9d0:	1b9d      	subs	r5, r3, r6
    f9d2:	9307      	str	r3, [sp, #28]
    f9d4:	4285      	cmp	r5, r0
    f9d6:	bfa8      	it	ge
    f9d8:	4605      	movge	r5, r0
    f9da:	2d00      	cmp	r5, #0
    f9dc:	dd0e      	ble.n	f9fc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf9c>
    f9de:	9825      	ldr	r0, [sp, #148]	; 0x94
    f9e0:	442a      	add	r2, r5
    f9e2:	f8c8 6000 	str.w	r6, [r8]
    f9e6:	3001      	adds	r0, #1
    f9e8:	9226      	str	r2, [sp, #152]	; 0x98
    f9ea:	f8c8 5004 	str.w	r5, [r8, #4]
    f9ee:	2807      	cmp	r0, #7
    f9f0:	9025      	str	r0, [sp, #148]	; 0x94
    f9f2:	f300 813c 	bgt.w	fc6e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x120e>
    f9f6:	f108 0808 	add.w	r8, r8, #8
    f9fa:	7838      	ldrb	r0, [r7, #0]
    f9fc:	2d00      	cmp	r5, #0
    f9fe:	bfac      	ite	ge
    fa00:	1b45      	subge	r5, r0, r5
    fa02:	4605      	movlt	r5, r0
    fa04:	2d00      	cmp	r5, #0
    fa06:	dc1b      	bgt.n	fa40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfe0>
    fa08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa0a:	4406      	add	r6, r0
    fa0c:	2b00      	cmp	r3, #0
    fa0e:	dcc9      	bgt.n	f9a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf44>
    fa10:	f1bb 0f00 	cmp.w	fp, #0
    fa14:	dcc6      	bgt.n	f9a4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf44>
    fa16:	46b3      	mov	fp, r6
    fa18:	9717      	str	r7, [sp, #92]	; 0x5c
    fa1a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    fa1c:	4614      	mov	r4, r2
    fa1e:	9f18      	ldr	r7, [sp, #96]	; 0x60
    fa20:	e7ad      	b.n	f97e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf1e>
    fa22:	9b03      	ldr	r3, [sp, #12]
    fa24:	06da      	lsls	r2, r3, #27
    fa26:	f140 80a3 	bpl.w	fb70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1110>
    fa2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa2c:	2500      	movs	r5, #0
    fa2e:	f853 4b04 	ldr.w	r4, [r3], #4
    fa32:	9309      	str	r3, [sp, #36]	; 0x24
    fa34:	e712      	b.n	f85c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdfc>
    fa36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa38:	3f01      	subs	r7, #1
    fa3a:	3b01      	subs	r3, #1
    fa3c:	930b      	str	r3, [sp, #44]	; 0x2c
    fa3e:	e7b6      	b.n	f9ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf4e>
    fa40:	2d10      	cmp	r5, #16
    fa42:	9825      	ldr	r0, [sp, #148]	; 0x94
    fa44:	dd2d      	ble.n	faa2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1042>
    fa46:	960d      	str	r6, [sp, #52]	; 0x34
    fa48:	2410      	movs	r4, #16
    fa4a:	ee19 6a90 	vmov	r6, s19
    fa4e:	e00c      	b.n	fa6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x100a>
    fa50:	0002faac 	.word	0x0002faac
    fa54:	0002fac0 	.word	0x0002fac0
    fa58:	40300000 	.word	0x40300000
    fa5c:	3fe00000 	.word	0x3fe00000
    fa60:	0002faf0 	.word	0x0002faf0
    fa64:	3d10      	subs	r5, #16
    fa66:	2d10      	cmp	r5, #16
    fa68:	dd1a      	ble.n	faa0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1040>
    fa6a:	3001      	adds	r0, #1
    fa6c:	3210      	adds	r2, #16
    fa6e:	f8c8 a000 	str.w	sl, [r8]
    fa72:	f108 0808 	add.w	r8, r8, #8
    fa76:	2807      	cmp	r0, #7
    fa78:	f848 4c04 	str.w	r4, [r8, #-4]
    fa7c:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    fa80:	ddf0      	ble.n	fa64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1004>
    fa82:	aa24      	add	r2, sp, #144	; 0x90
    fa84:	4631      	mov	r1, r6
    fa86:	4648      	mov	r0, r9
    fa88:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fa8c:	f01c fa06 	bl	2be9c <__ssprint_r>
    fa90:	2800      	cmp	r0, #0
    fa92:	f040 830d 	bne.w	100b0 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xb0>
    fa96:	3d10      	subs	r5, #16
    fa98:	2d10      	cmp	r5, #16
    fa9a:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    fa9e:	dce4      	bgt.n	fa6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x100a>
    faa0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    faa2:	3001      	adds	r0, #1
    faa4:	442a      	add	r2, r5
    faa6:	f8c8 a000 	str.w	sl, [r8]
    faaa:	2807      	cmp	r0, #7
    faac:	f8c8 5004 	str.w	r5, [r8, #4]
    fab0:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    fab4:	f300 8323 	bgt.w	100fe <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xfe>
    fab8:	f108 0808 	add.w	r8, r8, #8
    fabc:	7838      	ldrb	r0, [r7, #0]
    fabe:	e7a3      	b.n	fa08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfa8>
    fac0:	aa24      	add	r2, sp, #144	; 0x90
    fac2:	ee19 1a90 	vmov	r1, s19
    fac6:	4648      	mov	r0, r9
    fac8:	f01c f9e8 	bl	2be9c <__ssprint_r>
    facc:	2800      	cmp	r0, #0
    face:	f47f ab79 	bne.w	f1c4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x764>
    fad2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fad4:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fad8:	e778      	b.n	f9cc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf6c>
    fada:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fadc:	2201      	movs	r2, #1
    fade:	3401      	adds	r4, #1
    fae0:	4899      	ldr	r0, [pc, #612]	; (fd48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12e8>)
    fae2:	4413      	add	r3, r2
    fae4:	f8c8 2004 	str.w	r2, [r8, #4]
    fae8:	9426      	str	r4, [sp, #152]	; 0x98
    faea:	2b07      	cmp	r3, #7
    faec:	f8c8 0000 	str.w	r0, [r8]
    faf0:	9325      	str	r3, [sp, #148]	; 0x94
    faf2:	f300 81f5 	bgt.w	fee0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1480>
    faf6:	f108 0808 	add.w	r8, r8, #8
    fafa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fafc:	430b      	orrs	r3, r1
    fafe:	f000 82ea 	beq.w	100d6 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xd6>
    fb02:	9b25      	ldr	r3, [sp, #148]	; 0x94
    fb04:	9810      	ldr	r0, [sp, #64]	; 0x40
    fb06:	3301      	adds	r3, #1
    fb08:	1902      	adds	r2, r0, r4
    fb0a:	9c11      	ldr	r4, [sp, #68]	; 0x44
    fb0c:	2b07      	cmp	r3, #7
    fb0e:	f8c8 0004 	str.w	r0, [r8, #4]
    fb12:	f8c8 4000 	str.w	r4, [r8]
    fb16:	9226      	str	r2, [sp, #152]	; 0x98
    fb18:	9325      	str	r3, [sp, #148]	; 0x94
    fb1a:	f300 82a7 	bgt.w	1006c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x6c>
    fb1e:	f108 0808 	add.w	r8, r8, #8
    fb22:	2900      	cmp	r1, #0
    fb24:	f2c0 8352 	blt.w	101cc <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1cc>
    fb28:	990c      	ldr	r1, [sp, #48]	; 0x30
    fb2a:	3301      	adds	r3, #1
    fb2c:	f8c8 6000 	str.w	r6, [r8]
    fb30:	188c      	adds	r4, r1, r2
    fb32:	2b07      	cmp	r3, #7
    fb34:	f8c8 1004 	str.w	r1, [r8, #4]
    fb38:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    fb3c:	f77f a889 	ble.w	ec52 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f2>
    fb40:	f7ff bb90 	b.w	f264 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x804>
    fb44:	aa24      	add	r2, sp, #144	; 0x90
    fb46:	ee19 1a90 	vmov	r1, s19
    fb4a:	ee19 0a10 	vmov	r0, s18
    fb4e:	9313      	str	r3, [sp, #76]	; 0x4c
    fb50:	f01c f9a4 	bl	2be9c <__ssprint_r>
    fb54:	2800      	cmp	r0, #0
    fb56:	f47f ab33 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    fb5a:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    fb5e:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fb62:	9c26      	ldr	r4, [sp, #152]	; 0x98
    fb64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fb66:	f7ff b835 	b.w	ebd4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x174>
    fb6a:	46a9      	mov	r9, r5
    fb6c:	46bb      	mov	fp, r7
    fb6e:	e4d0      	b.n	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
    fb70:	9b03      	ldr	r3, [sp, #12]
    fb72:	065b      	lsls	r3, r3, #25
    fb74:	f140 80da 	bpl.w	fd2c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12cc>
    fb78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb7a:	2500      	movs	r5, #0
    fb7c:	f853 4b04 	ldr.w	r4, [r3], #4
    fb80:	b2a4      	uxth	r4, r4
    fb82:	9309      	str	r3, [sp, #36]	; 0x24
    fb84:	e66a      	b.n	f85c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdfc>
    fb86:	aa24      	add	r2, sp, #144	; 0x90
    fb88:	ee19 1a90 	vmov	r1, s19
    fb8c:	ee19 0a10 	vmov	r0, s18
    fb90:	f01c f984 	bl	2be9c <__ssprint_r>
    fb94:	2800      	cmp	r0, #0
    fb96:	f47f ab13 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    fb9a:	9c26      	ldr	r4, [sp, #152]	; 0x98
    fb9c:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fba0:	f7ff b9f5 	b.w	ef8e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52e>
    fba4:	46d3      	mov	fp, sl
    fba6:	e4b4      	b.n	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
    fba8:	4d68      	ldr	r5, [pc, #416]	; (fd4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12ec>)
    fbaa:	3301      	adds	r3, #1
    fbac:	4434      	add	r4, r6
    fbae:	f8c8 5000 	str.w	r5, [r8]
    fbb2:	2b07      	cmp	r3, #7
    fbb4:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    fbb8:	f8c8 6004 	str.w	r6, [r8, #4]
    fbbc:	f77f a849 	ble.w	ec52 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f2>
    fbc0:	f7ff bb50 	b.w	f264 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x804>
    fbc4:	f40b 6380 	and.w	r3, fp, #1024	; 0x400
    fbc8:	2200      	movs	r2, #0
    fbca:	f8cd 900c 	str.w	r9, [sp, #12]
    fbce:	ae50      	add	r6, sp, #320	; 0x140
    fbd0:	f8cd 8010 	str.w	r8, [sp, #16]
    fbd4:	4691      	mov	r9, r2
    fbd6:	9707      	str	r7, [sp, #28]
    fbd8:	461f      	mov	r7, r3
    fbda:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    fbde:	e007      	b.n	fbf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1190>
    fbe0:	f7fc fe3a 	bl	c858 <__aeabi_uldivmod>
    fbe4:	2d00      	cmp	r5, #0
    fbe6:	bf08      	it	eq
    fbe8:	2c0a      	cmpeq	r4, #10
    fbea:	d321      	bcc.n	fc30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11d0>
    fbec:	4604      	mov	r4, r0
    fbee:	460d      	mov	r5, r1
    fbf0:	220a      	movs	r2, #10
    fbf2:	2300      	movs	r3, #0
    fbf4:	4620      	mov	r0, r4
    fbf6:	4629      	mov	r1, r5
    fbf8:	f7fc fe2e 	bl	c858 <__aeabi_uldivmod>
    fbfc:	4694      	mov	ip, r2
    fbfe:	4620      	mov	r0, r4
    fc00:	4629      	mov	r1, r5
    fc02:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    fc06:	220a      	movs	r2, #10
    fc08:	2300      	movs	r3, #0
    fc0a:	f109 0901 	add.w	r9, r9, #1
    fc0e:	f806 cc01 	strb.w	ip, [r6, #-1]
    fc12:	3e01      	subs	r6, #1
    fc14:	2f00      	cmp	r7, #0
    fc16:	d0e3      	beq.n	fbe0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1180>
    fc18:	f898 c000 	ldrb.w	ip, [r8]
    fc1c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    fc20:	d0de      	beq.n	fbe0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1180>
    fc22:	45cc      	cmp	ip, r9
    fc24:	d1dc      	bne.n	fbe0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1180>
    fc26:	429d      	cmp	r5, r3
    fc28:	bf08      	it	eq
    fc2a:	4294      	cmpeq	r4, r2
    fc2c:	f080 8275 	bcs.w	1011a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x11a>
    fc30:	ab50      	add	r3, sp, #320	; 0x140
    fc32:	9f07      	ldr	r7, [sp, #28]
    fc34:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
    fc38:	1b9b      	subs	r3, r3, r6
    fc3a:	f8dd 900c 	ldr.w	r9, [sp, #12]
    fc3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    fc42:	f8cd b00c 	str.w	fp, [sp, #12]
    fc46:	f8dd 8010 	ldr.w	r8, [sp, #16]
    fc4a:	9307      	str	r3, [sp, #28]
    fc4c:	f7fe bf78 	b.w	eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>
    fc50:	aa24      	add	r2, sp, #144	; 0x90
    fc52:	ee19 1a90 	vmov	r1, s19
    fc56:	ee19 0a10 	vmov	r0, s18
    fc5a:	f01c f91f 	bl	2be9c <__ssprint_r>
    fc5e:	2800      	cmp	r0, #0
    fc60:	f47f aaae 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    fc64:	9c26      	ldr	r4, [sp, #152]	; 0x98
    fc66:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fc6a:	f7fe bfda 	b.w	ec22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c2>
    fc6e:	aa24      	add	r2, sp, #144	; 0x90
    fc70:	ee19 1a90 	vmov	r1, s19
    fc74:	4648      	mov	r0, r9
    fc76:	f01c f911 	bl	2be9c <__ssprint_r>
    fc7a:	2800      	cmp	r0, #0
    fc7c:	f47f aaa2 	bne.w	f1c4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x764>
    fc80:	7838      	ldrb	r0, [r7, #0]
    fc82:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fc86:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fc88:	e6b8      	b.n	f9fc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf9c>
    fc8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fc8c:	9905      	ldr	r1, [sp, #20]
    fc8e:	f853 2b04 	ldr.w	r2, [r3], #4
    fc92:	6011      	str	r1, [r2, #0]
    fc94:	9309      	str	r3, [sp, #36]	; 0x24
    fc96:	f7fe be3f 	b.w	e918 <_svfprintf_r+0x60>
    fc9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    fc9c:	ee19 ba90 	vmov	fp, s19
    fca0:	2b00      	cmp	r3, #0
    fca2:	f43f ac3c 	beq.w	f51e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xabe>
    fca6:	ee19 0a10 	vmov	r0, s18
    fcaa:	aa24      	add	r2, sp, #144	; 0x90
    fcac:	ee19 1a90 	vmov	r1, s19
    fcb0:	f01c f8f4 	bl	2be9c <__ssprint_r>
    fcb4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
    fcb8:	e433      	b.n	f522 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xac2>
    fcba:	4653      	mov	r3, sl
    fcbc:	4632      	mov	r2, r6
    fcbe:	46b2      	mov	sl, r6
    fcc0:	960d      	str	r6, [sp, #52]	; 0x34
    fcc2:	2b06      	cmp	r3, #6
    fcc4:	bf28      	it	cs
    fcc6:	2306      	movcs	r3, #6
    fcc8:	e9cd 6408 	strd	r6, r4, [sp, #32]
    fccc:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
    fcd0:	9304      	str	r3, [sp, #16]
    fcd2:	4e1f      	ldr	r6, [pc, #124]	; (fd50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12f0>)
    fcd4:	9307      	str	r3, [sp, #28]
    fcd6:	f7fe bf3f 	b.w	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    fcda:	4699      	mov	r9, r3
    fcdc:	f109 0901 	add.w	r9, r9, #1
    fce0:	4434      	add	r4, r6
    fce2:	f8c8 5000 	str.w	r5, [r8]
    fce6:	f1b9 0f07 	cmp.w	r9, #7
    fcea:	f8c8 6004 	str.w	r6, [r8, #4]
    fcee:	e9cd 9425 	strd	r9, r4, [sp, #148]	; 0x94
    fcf2:	f77f aaa7 	ble.w	f244 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e4>
    fcf6:	e439      	b.n	f56c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb0c>
    fcf8:	9b03      	ldr	r3, [sp, #12]
    fcfa:	f413 7f00 	tst.w	r3, #512	; 0x200
    fcfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd00:	f853 4b04 	ldr.w	r4, [r3], #4
    fd04:	bf18      	it	ne
    fd06:	b264      	sxtbne	r4, r4
    fd08:	9309      	str	r3, [sp, #36]	; 0x24
    fd0a:	17e5      	asrs	r5, r4, #31
    fd0c:	4622      	mov	r2, r4
    fd0e:	462b      	mov	r3, r5
    fd10:	f7fe bec3 	b.w	ea9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a>
    fd14:	9b03      	ldr	r3, [sp, #12]
    fd16:	2500      	movs	r5, #0
    fd18:	f413 7f00 	tst.w	r3, #512	; 0x200
    fd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd1e:	f853 4b04 	ldr.w	r4, [r3], #4
    fd22:	bf18      	it	ne
    fd24:	b2e4      	uxtbne	r4, r4
    fd26:	9309      	str	r3, [sp, #36]	; 0x24
    fd28:	f7fe bee2 	b.w	eaf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x90>
    fd2c:	9b03      	ldr	r3, [sp, #12]
    fd2e:	2500      	movs	r5, #0
    fd30:	f413 7f00 	tst.w	r3, #512	; 0x200
    fd34:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd36:	f853 4b04 	ldr.w	r4, [r3], #4
    fd3a:	bf18      	it	ne
    fd3c:	b2e4      	uxtbne	r4, r4
    fd3e:	9309      	str	r3, [sp, #36]	; 0x24
    fd40:	e58c      	b.n	f85c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdfc>
    fd42:	4d02      	ldr	r5, [pc, #8]	; (fd4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12ec>)
    fd44:	f7ff b9e8 	b.w	f118 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6b8>
    fd48:	0002fadc 	.word	0x0002fadc
    fd4c:	0002faf0 	.word	0x0002faf0
    fd50:	0002fad4 	.word	0x0002fad4
    fd54:	f1ba 3fff 	cmp.w	sl, #4294967295
    fd58:	f000 80f0 	beq.w	ff3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14dc>
    fd5c:	f1ba 0f00 	cmp.w	sl, #0
    fd60:	f040 80ee 	bne.w	ff40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14e0>
    fd64:	9b04      	ldr	r3, [sp, #16]
    fd66:	2b47      	cmp	r3, #71	; 0x47
    fd68:	f040 80ea 	bne.w	ff40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14e0>
    fd6c:	9a03      	ldr	r2, [sp, #12]
    fd6e:	f04f 0a01 	mov.w	sl, #1
    fd72:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	; 0x38
    fd76:	f442 7580 	orr.w	r5, r2, #256	; 0x100
    fd7a:	4663      	mov	r3, ip
    fd7c:	2b00      	cmp	r3, #0
    fd7e:	f2c0 82b5 	blt.w	102ec <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2ec>
    fd82:	4654      	mov	r4, sl
    fd84:	9013      	str	r0, [sp, #76]	; 0x4c
    fd86:	ec4c bb1b 	vmov	d11, fp, ip
    fd8a:	a922      	add	r1, sp, #136	; 0x88
    fd8c:	a81f      	add	r0, sp, #124	; 0x7c
    fd8e:	ab1e      	add	r3, sp, #120	; 0x78
    fd90:	eeb0 0a4b 	vmov.f32	s0, s22
    fd94:	eef0 0a6b 	vmov.f32	s1, s23
    fd98:	9101      	str	r1, [sp, #4]
    fd9a:	4622      	mov	r2, r4
    fd9c:	9000      	str	r0, [sp, #0]
    fd9e:	2102      	movs	r1, #2
    fda0:	ee19 0a10 	vmov	r0, s18
    fda4:	f000 fb4c 	bl	10440 <_dtoa_r>
    fda8:	9b04      	ldr	r3, [sp, #16]
    fdaa:	4606      	mov	r6, r0
    fdac:	2b47      	cmp	r3, #71	; 0x47
    fdae:	f040 81de 	bne.w	1016e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x16e>
    fdb2:	9b03      	ldr	r3, [sp, #12]
    fdb4:	07db      	lsls	r3, r3, #31
    fdb6:	f100 81da 	bmi.w	1016e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x16e>
    fdba:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fdbc:	1b9b      	subs	r3, r3, r6
    fdbe:	930c      	str	r3, [sp, #48]	; 0x30
    fdc0:	9b04      	ldr	r3, [sp, #16]
    fdc2:	2b47      	cmp	r3, #71	; 0x47
    fdc4:	f040 810f 	bne.w	ffe6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1586>
    fdc8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    fdca:	4553      	cmp	r3, sl
    fdcc:	930a      	str	r3, [sp, #40]	; 0x28
    fdce:	dc02      	bgt.n	fdd6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1376>
    fdd0:	3303      	adds	r3, #3
    fdd2:	f280 812a 	bge.w	1002a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2a>
    fdd6:	2300      	movs	r3, #0
    fdd8:	f1a9 0902 	sub.w	r9, r9, #2
    fddc:	9308      	str	r3, [sp, #32]
    fdde:	f029 0320 	bic.w	r3, r9, #32
    fde2:	9304      	str	r3, [sp, #16]
    fde4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fde6:	9a04      	ldr	r2, [sp, #16]
    fde8:	3b01      	subs	r3, #1
    fdea:	2a41      	cmp	r2, #65	; 0x41
    fdec:	931e      	str	r3, [sp, #120]	; 0x78
    fdee:	f040 8273 	bne.w	102d8 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2d8>
    fdf2:	f109 020f 	add.w	r2, r9, #15
    fdf6:	b2d2      	uxtb	r2, r2
    fdf8:	2b00      	cmp	r3, #0
    fdfa:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
    fdfe:	f2c0 82c2 	blt.w	10386 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x386>
    fe02:	222b      	movs	r2, #43	; 0x2b
    fe04:	2b09      	cmp	r3, #9
    fe06:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
    fe0a:	f340 82a8 	ble.w	1035e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x35e>
    fe0e:	f10d 0e8f 	add.w	lr, sp, #143	; 0x8f
    fe12:	f8df c624 	ldr.w	ip, [pc, #1572]	; 10438 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x438>
    fe16:	4670      	mov	r0, lr
    fe18:	fb8c 1203 	smull	r1, r2, ip, r3
    fe1c:	17d9      	asrs	r1, r3, #31
    fe1e:	461d      	mov	r5, r3
    fe20:	4604      	mov	r4, r0
    fe22:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
    fe26:	3801      	subs	r0, #1
    fe28:	2d63      	cmp	r5, #99	; 0x63
    fe2a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    fe2e:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
    fe32:	460b      	mov	r3, r1
    fe34:	f102 0230 	add.w	r2, r2, #48	; 0x30
    fe38:	f804 2c01 	strb.w	r2, [r4, #-1]
    fe3c:	dcec      	bgt.n	fe18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13b8>
    fe3e:	3330      	adds	r3, #48	; 0x30
    fe40:	1ea2      	subs	r2, r4, #2
    fe42:	b2db      	uxtb	r3, r3
    fe44:	4596      	cmp	lr, r2
    fe46:	f800 3c01 	strb.w	r3, [r0, #-1]
    fe4a:	f240 82d6 	bls.w	103fa <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3fa>
    fe4e:	f10d 0282 	add.w	r2, sp, #130	; 0x82
    fe52:	e001      	b.n	fe58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13f8>
    fe54:	f810 3b01 	ldrb.w	r3, [r0], #1
    fe58:	4586      	cmp	lr, r0
    fe5a:	f802 3b01 	strb.w	r3, [r2], #1
    fe5e:	d1f9      	bne.n	fe54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13f4>
    fe60:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    fe64:	f10d 0182 	add.w	r1, sp, #130	; 0x82
    fe68:	aa20      	add	r2, sp, #128	; 0x80
    fe6a:	1b1b      	subs	r3, r3, r4
    fe6c:	440b      	add	r3, r1
    fe6e:	1a9b      	subs	r3, r3, r2
    fe70:	9314      	str	r3, [sp, #80]	; 0x50
    fe72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fe74:	9a14      	ldr	r2, [sp, #80]	; 0x50
    fe76:	2b01      	cmp	r3, #1
    fe78:	441a      	add	r2, r3
    fe7a:	9207      	str	r2, [sp, #28]
    fe7c:	f340 827e 	ble.w	1037c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x37c>
    fe80:	9b07      	ldr	r3, [sp, #28]
    fe82:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fe84:	4413      	add	r3, r2
    fe86:	9307      	str	r3, [sp, #28]
    fe88:	9b03      	ldr	r3, [sp, #12]
    fe8a:	2200      	movs	r2, #0
    fe8c:	9907      	ldr	r1, [sp, #28]
    fe8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    fe92:	920d      	str	r2, [sp, #52]	; 0x34
    fe94:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    fe98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    fe9c:	9104      	str	r1, [sp, #16]
    fe9e:	9303      	str	r3, [sp, #12]
    fea0:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
    fea4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fea6:	2b00      	cmp	r3, #0
    fea8:	f040 80d9 	bne.w	1005e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x5e>
    feac:	469a      	mov	sl, r3
    feae:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    feb2:	f7fe be51 	b.w	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    feb6:	232d      	movs	r3, #45	; 0x2d
    feb8:	461a      	mov	r2, r3
    feba:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    febe:	f7fe bf1e 	b.w	ecfe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x29e>
    fec2:	4614      	mov	r4, r2
    fec4:	3301      	adds	r3, #1
    fec6:	444c      	add	r4, r9
    fec8:	f8c8 5000 	str.w	r5, [r8]
    fecc:	2b07      	cmp	r3, #7
    fece:	f8c8 9004 	str.w	r9, [r8, #4]
    fed2:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
    fed6:	dc6b      	bgt.n	ffb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1550>
    fed8:	f108 0808 	add.w	r8, r8, #8
    fedc:	f7ff bab0 	b.w	f440 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9e0>
    fee0:	aa24      	add	r2, sp, #144	; 0x90
    fee2:	ee19 1a90 	vmov	r1, s19
    fee6:	ee19 0a10 	vmov	r0, s18
    feea:	f01b ffd7 	bl	2be9c <__ssprint_r>
    feee:	2800      	cmp	r0, #0
    fef0:	f47f a966 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    fef4:	991e      	ldr	r1, [sp, #120]	; 0x78
    fef6:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    fefa:	9c26      	ldr	r4, [sp, #152]	; 0x98
    fefc:	e5fd      	b.n	fafa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x109a>
    fefe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ff00:	4416      	add	r6, r2
    ff02:	1ad3      	subs	r3, r2, r3
    ff04:	eba6 060b 	sub.w	r6, r6, fp
    ff08:	429e      	cmp	r6, r3
    ff0a:	bfa8      	it	ge
    ff0c:	461e      	movge	r6, r3
    ff0e:	f7ff bace 	b.w	f4ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa4e>
    ff12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ff14:	9905      	ldr	r1, [sp, #20]
    ff16:	f853 2b04 	ldr.w	r2, [r3], #4
    ff1a:	8011      	strh	r1, [r2, #0]
    ff1c:	9309      	str	r3, [sp, #36]	; 0x24
    ff1e:	f7fe bcfb 	b.w	e918 <_svfprintf_r+0x60>
    ff22:	f10a 0101 	add.w	r1, sl, #1
    ff26:	ee19 0a10 	vmov	r0, s18
    ff2a:	f015 ff2b 	bl	25d84 <_malloc_r>
    ff2e:	4606      	mov	r6, r0
    ff30:	2800      	cmp	r0, #0
    ff32:	f000 8271 	beq.w	10418 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x418>
    ff36:	9008      	str	r0, [sp, #32]
    ff38:	f7ff bbf5 	b.w	f726 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xcc6>
    ff3c:	f04f 0a06 	mov.w	sl, #6
    ff40:	9a03      	ldr	r2, [sp, #12]
    ff42:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    ff46:	f442 7580 	orr.w	r5, r2, #256	; 0x100
    ff4a:	2900      	cmp	r1, #0
    ff4c:	f2c0 81ce 	blt.w	102ec <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2ec>
    ff50:	2300      	movs	r3, #0
    ff52:	ec41 0b1b 	vmov	d11, r0, r1
    ff56:	9313      	str	r3, [sp, #76]	; 0x4c
    ff58:	9b04      	ldr	r3, [sp, #16]
    ff5a:	2b46      	cmp	r3, #70	; 0x46
    ff5c:	f040 80f2 	bne.w	10144 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x144>
    ff60:	a922      	add	r1, sp, #136	; 0x88
    ff62:	a81f      	add	r0, sp, #124	; 0x7c
    ff64:	ab1e      	add	r3, sp, #120	; 0x78
    ff66:	eeb0 0a4b 	vmov.f32	s0, s22
    ff6a:	eef0 0a6b 	vmov.f32	s1, s23
    ff6e:	9101      	str	r1, [sp, #4]
    ff70:	4652      	mov	r2, sl
    ff72:	9000      	str	r0, [sp, #0]
    ff74:	2103      	movs	r1, #3
    ff76:	ee19 0a10 	vmov	r0, s18
    ff7a:	f000 fa61 	bl	10440 <_dtoa_r>
    ff7e:	7803      	ldrb	r3, [r0, #0]
    ff80:	4606      	mov	r6, r0
    ff82:	2b30      	cmp	r3, #48	; 0x30
    ff84:	d108      	bne.n	ff98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1538>
    ff86:	2200      	movs	r2, #0
    ff88:	2300      	movs	r3, #0
    ff8a:	ec51 0b1b 	vmov	r0, r1, d11
    ff8e:	f7fc fb69 	bl	c664 <__aeabi_dcmpeq>
    ff92:	2800      	cmp	r0, #0
    ff94:	f000 821f 	beq.w	103d6 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3d6>
    ff98:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    ff9a:	4453      	add	r3, sl
    ff9c:	18f4      	adds	r4, r6, r3
    ff9e:	2200      	movs	r2, #0
    ffa0:	2300      	movs	r3, #0
    ffa2:	ec51 0b1b 	vmov	r0, r1, d11
    ffa6:	f7fc fb5d 	bl	c664 <__aeabi_dcmpeq>
    ffaa:	b180      	cbz	r0, ffce <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x156e>
    ffac:	4623      	mov	r3, r4
    ffae:	e705      	b.n	fdbc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x135c>
    ffb0:	aa24      	add	r2, sp, #144	; 0x90
    ffb2:	ee19 1a90 	vmov	r1, s19
    ffb6:	ee19 0a10 	vmov	r0, s18
    ffba:	f01b ff6f 	bl	2be9c <__ssprint_r>
    ffbe:	2800      	cmp	r0, #0
    ffc0:	f47f a8fe 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
    ffc4:	9c26      	ldr	r4, [sp, #152]	; 0x98
    ffc6:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
    ffca:	f7ff ba39 	b.w	f440 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9e0>
    ffce:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ffd0:	42a3      	cmp	r3, r4
    ffd2:	f4bf aef3 	bcs.w	fdbc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x135c>
    ffd6:	2130      	movs	r1, #48	; 0x30
    ffd8:	1c5a      	adds	r2, r3, #1
    ffda:	9222      	str	r2, [sp, #136]	; 0x88
    ffdc:	7019      	strb	r1, [r3, #0]
    ffde:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ffe0:	429c      	cmp	r4, r3
    ffe2:	d8f9      	bhi.n	ffd8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1578>
    ffe4:	e6ea      	b.n	fdbc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x135c>
    ffe6:	9b04      	ldr	r3, [sp, #16]
    ffe8:	2b46      	cmp	r3, #70	; 0x46
    ffea:	f040 8200 	bne.w	103ee <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3ee>
    ffee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    fff0:	9b03      	ldr	r3, [sp, #12]
    fff2:	2a00      	cmp	r2, #0
    fff4:	920a      	str	r2, [sp, #40]	; 0x28
    fff6:	f003 0301 	and.w	r3, r3, #1
    fffa:	f340 81ce 	ble.w	1039a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x39a>
    fffe:	ea53 030a 	orrs.w	r3, r3, sl
   10002:	f040 816c 	bne.w	102de <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2de>
   10006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10008:	f04f 0966 	mov.w	r9, #102	; 0x66
   1000c:	9307      	str	r3, [sp, #28]
   1000e:	9b03      	ldr	r3, [sp, #12]
   10010:	055a      	lsls	r2, r3, #21
   10012:	f100 812d 	bmi.w	10270 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x270>
   10016:	9b07      	ldr	r3, [sp, #28]
   10018:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1001c:	9304      	str	r3, [sp, #16]
   1001e:	2300      	movs	r3, #0
   10020:	9503      	str	r5, [sp, #12]
   10022:	9308      	str	r3, [sp, #32]
   10024:	930d      	str	r3, [sp, #52]	; 0x34
   10026:	930b      	str	r3, [sp, #44]	; 0x2c
   10028:	e73c      	b.n	fea4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1444>
   1002a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1002c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1002e:	428b      	cmp	r3, r1
   10030:	f2c0 809f 	blt.w	10172 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x172>
   10034:	9a03      	ldr	r2, [sp, #12]
   10036:	07d4      	lsls	r4, r2, #31
   10038:	f140 818e 	bpl.w	10358 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x358>
   1003c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1003e:	4413      	add	r3, r2
   10040:	9307      	str	r3, [sp, #28]
   10042:	9b03      	ldr	r3, [sp, #12]
   10044:	0558      	lsls	r0, r3, #21
   10046:	d503      	bpl.n	10050 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x50>
   10048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1004a:	2b00      	cmp	r3, #0
   1004c:	f300 810e 	bgt.w	1026c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x26c>
   10050:	9b07      	ldr	r3, [sp, #28]
   10052:	f04f 0967 	mov.w	r9, #103	; 0x67
   10056:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1005a:	9304      	str	r3, [sp, #16]
   1005c:	e7df      	b.n	1001e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e>
   1005e:	222d      	movs	r2, #45	; 0x2d
   10060:	f04f 0a00 	mov.w	sl, #0
   10064:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
   10068:	f7fe bd77 	b.w	eb5a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfa>
   1006c:	aa24      	add	r2, sp, #144	; 0x90
   1006e:	ee19 1a90 	vmov	r1, s19
   10072:	ee19 0a10 	vmov	r0, s18
   10076:	f01b ff11 	bl	2be9c <__ssprint_r>
   1007a:	2800      	cmp	r0, #0
   1007c:	f47f a8a0 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
   10080:	991e      	ldr	r1, [sp, #120]	; 0x78
   10082:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   10086:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1008a:	e54a      	b.n	fb22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c2>
   1008c:	aa24      	add	r2, sp, #144	; 0x90
   1008e:	ee19 1a90 	vmov	r1, s19
   10092:	ee19 0a10 	vmov	r0, s18
   10096:	f01b ff01 	bl	2be9c <__ssprint_r>
   1009a:	2800      	cmp	r0, #0
   1009c:	f47f a890 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
   100a0:	9c26      	ldr	r4, [sp, #152]	; 0x98
   100a2:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   100a6:	f7ff b9c3 	b.w	f430 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9d0>
   100aa:	46d1      	mov	r9, sl
   100ac:	f7ff ba31 	b.w	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
   100b0:	46b3      	mov	fp, r6
   100b2:	f7ff ba2e 	b.w	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
   100b6:	aa24      	add	r2, sp, #144	; 0x90
   100b8:	ee19 1a90 	vmov	r1, s19
   100bc:	ee19 0a10 	vmov	r0, s18
   100c0:	f01b feec 	bl	2be9c <__ssprint_r>
   100c4:	2800      	cmp	r0, #0
   100c6:	f47f a87b 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
   100ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   100cc:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   100d0:	9c26      	ldr	r4, [sp, #152]	; 0x98
   100d2:	f7ff b9d4 	b.w	f47e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa1e>
   100d6:	9b03      	ldr	r3, [sp, #12]
   100d8:	07da      	lsls	r2, r3, #31
   100da:	f57e adbc 	bpl.w	ec56 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f6>
   100de:	9b25      	ldr	r3, [sp, #148]	; 0x94
   100e0:	9910      	ldr	r1, [sp, #64]	; 0x40
   100e2:	3301      	adds	r3, #1
   100e4:	9811      	ldr	r0, [sp, #68]	; 0x44
   100e6:	190a      	adds	r2, r1, r4
   100e8:	f8c8 1004 	str.w	r1, [r8, #4]
   100ec:	2b07      	cmp	r3, #7
   100ee:	f8c8 0000 	str.w	r0, [r8]
   100f2:	9226      	str	r2, [sp, #152]	; 0x98
   100f4:	9325      	str	r3, [sp, #148]	; 0x94
   100f6:	dcb9      	bgt.n	1006c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x6c>
   100f8:	f108 0808 	add.w	r8, r8, #8
   100fc:	e514      	b.n	fb28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c8>
   100fe:	aa24      	add	r2, sp, #144	; 0x90
   10100:	ee19 1a90 	vmov	r1, s19
   10104:	4648      	mov	r0, r9
   10106:	f01b fec9 	bl	2be9c <__ssprint_r>
   1010a:	2800      	cmp	r0, #0
   1010c:	f47f a85a 	bne.w	f1c4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x764>
   10110:	7838      	ldrb	r0, [r7, #0]
   10112:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   10116:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10118:	e476      	b.n	fa08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfa8>
   1011a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1011c:	9916      	ldr	r1, [sp, #88]	; 0x58
   1011e:	1af6      	subs	r6, r6, r3
   10120:	461a      	mov	r2, r3
   10122:	4630      	mov	r0, r6
   10124:	f016 fde0 	bl	26ce8 <strncpy>
   10128:	f898 3001 	ldrb.w	r3, [r8, #1]
   1012c:	b10b      	cbz	r3, 10132 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x132>
   1012e:	f108 0801 	add.w	r8, r8, #1
   10132:	4620      	mov	r0, r4
   10134:	4629      	mov	r1, r5
   10136:	220a      	movs	r2, #10
   10138:	2300      	movs	r3, #0
   1013a:	f04f 0900 	mov.w	r9, #0
   1013e:	f7fc fb8b 	bl	c858 <__aeabi_uldivmod>
   10142:	e553      	b.n	fbec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x118c>
   10144:	2b45      	cmp	r3, #69	; 0x45
   10146:	f040 8156 	bne.w	103f6 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3f6>
   1014a:	a822      	add	r0, sp, #136	; 0x88
   1014c:	a91f      	add	r1, sp, #124	; 0x7c
   1014e:	f10a 0401 	add.w	r4, sl, #1
   10152:	eeb0 0a4b 	vmov.f32	s0, s22
   10156:	eef0 0a6b 	vmov.f32	s1, s23
   1015a:	ab1e      	add	r3, sp, #120	; 0x78
   1015c:	4622      	mov	r2, r4
   1015e:	e9cd 1000 	strd	r1, r0, [sp]
   10162:	2102      	movs	r1, #2
   10164:	ee19 0a10 	vmov	r0, s18
   10168:	f000 f96a 	bl	10440 <_dtoa_r>
   1016c:	4606      	mov	r6, r0
   1016e:	4434      	add	r4, r6
   10170:	e715      	b.n	ff9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x153e>
   10172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10174:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10176:	189a      	adds	r2, r3, r2
   10178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1017a:	2b00      	cmp	r3, #0
   1017c:	9207      	str	r2, [sp, #28]
   1017e:	f340 80c0 	ble.w	10302 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x302>
   10182:	f04f 0967 	mov.w	r9, #103	; 0x67
   10186:	e742      	b.n	1000e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xe>
   10188:	f8cd a010 	str.w	sl, [sp, #16]
   1018c:	f8cd a01c 	str.w	sl, [sp, #28]
   10190:	4682      	mov	sl, r0
   10192:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
   10196:	9409      	str	r4, [sp, #36]	; 0x24
   10198:	900d      	str	r0, [sp, #52]	; 0x34
   1019a:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
   1019e:	f7fe bcdb 	b.w	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
   101a2:	aa24      	add	r2, sp, #144	; 0x90
   101a4:	ee19 1a90 	vmov	r1, s19
   101a8:	ee19 0a10 	vmov	r0, s18
   101ac:	f01b fe76 	bl	2be9c <__ssprint_r>
   101b0:	2800      	cmp	r0, #0
   101b2:	f47f a805 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
   101b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   101b8:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   101bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   101be:	9c26      	ldr	r4, [sp, #152]	; 0x98
   101c0:	1ad3      	subs	r3, r2, r3
   101c2:	f7ff b974 	b.w	f4ae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa4e>
   101c6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   101c8:	f7ff b892 	b.w	f2f0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x890>
   101cc:	f1c1 0900 	rsb	r9, r1, #0
   101d0:	3110      	adds	r1, #16
   101d2:	4d96      	ldr	r5, [pc, #600]	; (1042c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x42c>)
   101d4:	da29      	bge.n	1022a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x22a>
   101d6:	2410      	movs	r4, #16
   101d8:	ee19 aa10 	vmov	sl, s18
   101dc:	ee19 ba90 	vmov	fp, s19
   101e0:	e004      	b.n	101ec <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1ec>
   101e2:	f1a9 0910 	sub.w	r9, r9, #16
   101e6:	f1b9 0f10 	cmp.w	r9, #16
   101ea:	dd1e      	ble.n	1022a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x22a>
   101ec:	3301      	adds	r3, #1
   101ee:	3210      	adds	r2, #16
   101f0:	f8c8 5000 	str.w	r5, [r8]
   101f4:	f108 0808 	add.w	r8, r8, #8
   101f8:	2b07      	cmp	r3, #7
   101fa:	f848 4c04 	str.w	r4, [r8, #-4]
   101fe:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   10202:	ddee      	ble.n	101e2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e2>
   10204:	aa24      	add	r2, sp, #144	; 0x90
   10206:	4659      	mov	r1, fp
   10208:	4650      	mov	r0, sl
   1020a:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   1020e:	f01b fe45 	bl	2be9c <__ssprint_r>
   10212:	2800      	cmp	r0, #0
   10214:	f47f af49 	bne.w	100aa <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xaa>
   10218:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   1021c:	e7e1      	b.n	101e2 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e2>
   1021e:	2300      	movs	r3, #0
   10220:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
   10224:	9313      	str	r3, [sp, #76]	; 0x4c
   10226:	f7ff ba8b 	b.w	f740 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xce0>
   1022a:	3301      	adds	r3, #1
   1022c:	444a      	add	r2, r9
   1022e:	f8c8 5000 	str.w	r5, [r8]
   10232:	2b07      	cmp	r3, #7
   10234:	f8c8 9004 	str.w	r9, [r8, #4]
   10238:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1023c:	f77f af5c 	ble.w	100f8 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xf8>
   10240:	aa24      	add	r2, sp, #144	; 0x90
   10242:	ee19 1a90 	vmov	r1, s19
   10246:	ee19 0a10 	vmov	r0, s18
   1024a:	f01b fe27 	bl	2be9c <__ssprint_r>
   1024e:	2800      	cmp	r0, #0
   10250:	f47e afb6 	bne.w	f1c0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x760>
   10254:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10256:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   1025a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1025c:	e464      	b.n	fb28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10c8>
   1025e:	4d73      	ldr	r5, [pc, #460]	; (1042c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x42c>)
   10260:	f7fe bf13 	b.w	f08a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x62a>
   10264:	46d9      	mov	r9, fp
   10266:	46a3      	mov	fp, r4
   10268:	f7ff b953 	b.w	f512 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xab2>
   1026c:	f04f 0967 	mov.w	r9, #103	; 0x67
   10270:	9917      	ldr	r1, [sp, #92]	; 0x5c
   10272:	780b      	ldrb	r3, [r1, #0]
   10274:	2bff      	cmp	r3, #255	; 0xff
   10276:	f000 80cb 	beq.w	10410 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x410>
   1027a:	2400      	movs	r4, #0
   1027c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1027e:	4620      	mov	r0, r4
   10280:	e003      	b.n	1028a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x28a>
   10282:	3001      	adds	r0, #1
   10284:	3101      	adds	r1, #1
   10286:	2bff      	cmp	r3, #255	; 0xff
   10288:	d008      	beq.n	1029c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x29c>
   1028a:	4293      	cmp	r3, r2
   1028c:	da06      	bge.n	1029c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x29c>
   1028e:	1ad2      	subs	r2, r2, r3
   10290:	784b      	ldrb	r3, [r1, #1]
   10292:	2b00      	cmp	r3, #0
   10294:	d1f5      	bne.n	10282 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x282>
   10296:	3401      	adds	r4, #1
   10298:	780b      	ldrb	r3, [r1, #0]
   1029a:	e7f4      	b.n	10286 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x286>
   1029c:	920a      	str	r2, [sp, #40]	; 0x28
   1029e:	9117      	str	r1, [sp, #92]	; 0x5c
   102a0:	900b      	str	r0, [sp, #44]	; 0x2c
   102a2:	940d      	str	r4, [sp, #52]	; 0x34
   102a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   102a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   102a8:	9907      	ldr	r1, [sp, #28]
   102aa:	4413      	add	r3, r2
   102ac:	2200      	movs	r2, #0
   102ae:	9503      	str	r5, [sp, #12]
   102b0:	9208      	str	r2, [sp, #32]
   102b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   102b4:	fb02 1303 	mla	r3, r2, r3, r1
   102b8:	9307      	str	r3, [sp, #28]
   102ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   102be:	9304      	str	r3, [sp, #16]
   102c0:	e5f0      	b.n	fea4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1444>
   102c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   102c4:	2b00      	cmp	r3, #0
   102c6:	db63      	blt.n	10390 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x390>
   102c8:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
   102cc:	2103      	movs	r1, #3
   102ce:	4e58      	ldr	r6, [pc, #352]	; (10430 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x430>)
   102d0:	4b58      	ldr	r3, [pc, #352]	; (10434 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x434>)
   102d2:	9104      	str	r1, [sp, #16]
   102d4:	f7fe bd17 	b.w	ed06 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a6>
   102d8:	fa5f f289 	uxtb.w	r2, r9
   102dc:	e58c      	b.n	fdf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1398>
   102de:	9b10      	ldr	r3, [sp, #64]	; 0x40
   102e0:	f04f 0966 	mov.w	r9, #102	; 0x66
   102e4:	18d3      	adds	r3, r2, r3
   102e6:	4453      	add	r3, sl
   102e8:	9307      	str	r3, [sp, #28]
   102ea:	e690      	b.n	1000e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0xe>
   102ec:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
   102f0:	232d      	movs	r3, #45	; 0x2d
   102f2:	ee0b 1a10 	vmov	s22, r1
   102f6:	9313      	str	r3, [sp, #76]	; 0x4c
   102f8:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   102fc:	ee0b 3a90 	vmov	s23, r3
   10300:	e62a      	b.n	ff58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14f8>
   10302:	f1c3 0301 	rsb	r3, r3, #1
   10306:	f04f 0967 	mov.w	r9, #103	; 0x67
   1030a:	441a      	add	r2, r3
   1030c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10310:	9207      	str	r2, [sp, #28]
   10312:	9304      	str	r3, [sp, #16]
   10314:	e683      	b.n	1001e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e>
   10316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10318:	9322      	str	r3, [sp, #136]	; 0x88
   1031a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1031c:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   10320:	7bd9      	ldrb	r1, [r3, #15]
   10322:	465b      	mov	r3, fp
   10324:	428a      	cmp	r2, r1
   10326:	d109      	bne.n	1033c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x33c>
   10328:	2030      	movs	r0, #48	; 0x30
   1032a:	f803 0c01 	strb.w	r0, [r3, #-1]
   1032e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10330:	1e5a      	subs	r2, r3, #1
   10332:	9222      	str	r2, [sp, #136]	; 0x88
   10334:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   10338:	4291      	cmp	r1, r2
   1033a:	d0f6      	beq.n	1032a <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x32a>
   1033c:	2a39      	cmp	r2, #57	; 0x39
   1033e:	d053      	beq.n	103e8 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3e8>
   10340:	3201      	adds	r2, #1
   10342:	b2d2      	uxtb	r2, r2
   10344:	f803 2c01 	strb.w	r2, [r3, #-1]
   10348:	f7ff ba71 	b.w	f82e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdce>
   1034c:	ee19 ba90 	vmov	fp, s19
   10350:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   10354:	f7ff b8e5 	b.w	f522 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xac2>
   10358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1035a:	9307      	str	r3, [sp, #28]
   1035c:	e671      	b.n	10042 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x42>
   1035e:	9a04      	ldr	r2, [sp, #16]
   10360:	2a41      	cmp	r2, #65	; 0x41
   10362:	d03c      	beq.n	103de <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3de>
   10364:	2130      	movs	r1, #48	; 0x30
   10366:	f10d 0283 	add.w	r2, sp, #131	; 0x83
   1036a:	f88d 1082 	strb.w	r1, [sp, #130]	; 0x82
   1036e:	3330      	adds	r3, #48	; 0x30
   10370:	a920      	add	r1, sp, #128	; 0x80
   10372:	f802 3b01 	strb.w	r3, [r2], #1
   10376:	1a53      	subs	r3, r2, r1
   10378:	9314      	str	r3, [sp, #80]	; 0x50
   1037a:	e57a      	b.n	fe72 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1412>
   1037c:	9b03      	ldr	r3, [sp, #12]
   1037e:	07dd      	lsls	r5, r3, #31
   10380:	f57f ad82 	bpl.w	fe88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1428>
   10384:	e57c      	b.n	fe80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1420>
   10386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10388:	222d      	movs	r2, #45	; 0x2d
   1038a:	f1c3 0301 	rsb	r3, r3, #1
   1038e:	e539      	b.n	fe04 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x13a4>
   10390:	232d      	movs	r3, #45	; 0x2d
   10392:	461a      	mov	r2, r3
   10394:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
   10398:	e798      	b.n	102cc <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2cc>
   1039a:	ea53 030a 	orrs.w	r3, r3, sl
   1039e:	d105      	bne.n	103ac <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3ac>
   103a0:	2301      	movs	r3, #1
   103a2:	f04f 0966 	mov.w	r9, #102	; 0x66
   103a6:	9304      	str	r3, [sp, #16]
   103a8:	9307      	str	r3, [sp, #28]
   103aa:	e638      	b.n	1001e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e>
   103ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
   103ae:	f04f 0966 	mov.w	r9, #102	; 0x66
   103b2:	3301      	adds	r3, #1
   103b4:	4453      	add	r3, sl
   103b6:	9307      	str	r3, [sp, #28]
   103b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   103bc:	9304      	str	r3, [sp, #16]
   103be:	e62e      	b.n	1001e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1e>
   103c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   103c2:	f897 9001 	ldrb.w	r9, [r7, #1]
   103c6:	4617      	mov	r7, r2
   103c8:	f853 2b04 	ldr.w	r2, [r3], #4
   103cc:	ea42 7ae2 	orr.w	sl, r2, r2, asr #31
   103d0:	9309      	str	r3, [sp, #36]	; 0x24
   103d2:	f7fe bacf 	b.w	e974 <_svfprintf_r+0xbc>
   103d6:	f1ca 0301 	rsb	r3, sl, #1
   103da:	931e      	str	r3, [sp, #120]	; 0x78
   103dc:	e5dd      	b.n	ff9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x153a>
   103de:	f10d 0282 	add.w	r2, sp, #130	; 0x82
   103e2:	e7c4      	b.n	1036e <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x36e>
   103e4:	4d11      	ldr	r5, [pc, #68]	; (1042c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x42c>)
   103e6:	e56d      	b.n	fec4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1464>
   103e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   103ea:	7a92      	ldrb	r2, [r2, #10]
   103ec:	e7aa      	b.n	10344 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x344>
   103ee:	2300      	movs	r3, #0
   103f0:	9308      	str	r3, [sp, #32]
   103f2:	f7ff ba23 	b.w	f83c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xddc>
   103f6:	4654      	mov	r4, sl
   103f8:	e4c7      	b.n	fd8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x132a>
   103fa:	2302      	movs	r3, #2
   103fc:	9314      	str	r3, [sp, #80]	; 0x50
   103fe:	e538      	b.n	fe72 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1412>
   10400:	230c      	movs	r3, #12
   10402:	f04f 32ff 	mov.w	r2, #4294967295
   10406:	f8c9 3000 	str.w	r3, [r9]
   1040a:	9205      	str	r2, [sp, #20]
   1040c:	f7ff b890 	b.w	f530 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xad0>
   10410:	2300      	movs	r3, #0
   10412:	930d      	str	r3, [sp, #52]	; 0x34
   10414:	930b      	str	r3, [sp, #44]	; 0x2c
   10416:	e745      	b.n	102a4 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2a4>
   10418:	ee19 ba90 	vmov	fp, s19
   1041c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   10420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10424:	f8ab 300c 	strh.w	r3, [fp, #12]
   10428:	f7ff b87b 	b.w	f522 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xac2>
   1042c:	0002faf0 	.word	0x0002faf0
   10430:	0002faa4 	.word	0x0002faa4
   10434:	0002faa8 	.word	0x0002faa8
   10438:	66666667 	.word	0x66666667
   1043c:	00000000 	.word	0x00000000

00010440 <_dtoa_r>:
   10440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10444:	ed2d 8b04 	vpush	{d8-d9}
   10448:	b099      	sub	sp, #100	; 0x64
   1044a:	4604      	mov	r4, r0
   1044c:	9101      	str	r1, [sp, #4]
   1044e:	6c01      	ldr	r1, [r0, #64]	; 0x40
   10450:	9d26      	ldr	r5, [sp, #152]	; 0x98
   10452:	920b      	str	r2, [sp, #44]	; 0x2c
   10454:	9307      	str	r3, [sp, #28]
   10456:	ec57 6b10 	vmov	r6, r7, d0
   1045a:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1045e:	b141      	cbz	r1, 10472 <_dtoa_r+0x32>
   10460:	6c42      	ldr	r2, [r0, #68]	; 0x44
   10462:	2301      	movs	r3, #1
   10464:	4093      	lsls	r3, r2
   10466:	e9c1 2301 	strd	r2, r3, [r1, #4]
   1046a:	f01a fdf9 	bl	2b060 <_Bfree>
   1046e:	2300      	movs	r3, #0
   10470:	6423      	str	r3, [r4, #64]	; 0x40
   10472:	f1b7 0900 	subs.w	r9, r7, #0
   10476:	f2c0 80b4 	blt.w	105e2 <_dtoa_r+0x1a2>
   1047a:	2300      	movs	r3, #0
   1047c:	602b      	str	r3, [r5, #0]
   1047e:	4b7e      	ldr	r3, [pc, #504]	; (10678 <_dtoa_r+0x238>)
   10480:	ea33 0309 	bics.w	r3, r3, r9
   10484:	f000 80b8 	beq.w	105f8 <_dtoa_r+0x1b8>
   10488:	2200      	movs	r2, #0
   1048a:	2300      	movs	r3, #0
   1048c:	ed9d 7b04 	vldr	d7, [sp, #16]
   10490:	ec51 0b17 	vmov	r0, r1, d7
   10494:	ed8d 7b02 	vstr	d7, [sp, #8]
   10498:	f7fc f8e4 	bl	c664 <__aeabi_dcmpeq>
   1049c:	4680      	mov	r8, r0
   1049e:	b188      	cbz	r0, 104c4 <_dtoa_r+0x84>
   104a0:	2301      	movs	r3, #1
   104a2:	9a07      	ldr	r2, [sp, #28]
   104a4:	6013      	str	r3, [r2, #0]
   104a6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   104a8:	2b00      	cmp	r3, #0
   104aa:	f000 8251 	beq.w	10950 <_dtoa_r+0x510>
   104ae:	4b73      	ldr	r3, [pc, #460]	; (1067c <_dtoa_r+0x23c>)
   104b0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   104b2:	f103 39ff 	add.w	r9, r3, #4294967295
   104b6:	6013      	str	r3, [r2, #0]
   104b8:	4648      	mov	r0, r9
   104ba:	b019      	add	sp, #100	; 0x64
   104bc:	ecbd 8b04 	vpop	{d8-d9}
   104c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   104c4:	ed9d 0b02 	vldr	d0, [sp, #8]
   104c8:	aa16      	add	r2, sp, #88	; 0x58
   104ca:	a917      	add	r1, sp, #92	; 0x5c
   104cc:	4620      	mov	r0, r4
   104ce:	f01b f96b 	bl	2b7a8 <__d2b>
   104d2:	4682      	mov	sl, r0
   104d4:	ea5f 5519 	movs.w	r5, r9, lsr #20
   104d8:	f040 80a7 	bne.w	1062a <_dtoa_r+0x1ea>
   104dc:	e9dd 8516 	ldrd	r8, r5, [sp, #88]	; 0x58
   104e0:	4445      	add	r5, r8
   104e2:	f205 4032 	addw	r0, r5, #1074	; 0x432
   104e6:	2820      	cmp	r0, #32
   104e8:	f340 823a 	ble.w	10960 <_dtoa_r+0x520>
   104ec:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   104f0:	f205 4012 	addw	r0, r5, #1042	; 0x412
   104f4:	fa09 f903 	lsl.w	r9, r9, r3
   104f8:	fa26 f000 	lsr.w	r0, r6, r0
   104fc:	ea49 0000 	orr.w	r0, r9, r0
   10500:	f7fb ffe0 	bl	c4c4 <__aeabi_ui2d>
   10504:	3d01      	subs	r5, #1
   10506:	2201      	movs	r2, #1
   10508:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   1050c:	9210      	str	r2, [sp, #64]	; 0x40
   1050e:	2200      	movs	r2, #0
   10510:	4b5b      	ldr	r3, [pc, #364]	; (10680 <_dtoa_r+0x240>)
   10512:	f7fb fe99 	bl	c248 <__aeabi_dsub>
   10516:	a352      	add	r3, pc, #328	; (adr r3, 10660 <_dtoa_r+0x220>)
   10518:	e9d3 2300 	ldrd	r2, r3, [r3]
   1051c:	f7fc fc6a 	bl	cdf4 <__aeabi_dmul>
   10520:	a351      	add	r3, pc, #324	; (adr r3, 10668 <_dtoa_r+0x228>)
   10522:	e9d3 2300 	ldrd	r2, r3, [r3]
   10526:	f7fb fe91 	bl	c24c <__adddf3>
   1052a:	4606      	mov	r6, r0
   1052c:	460f      	mov	r7, r1
   1052e:	4628      	mov	r0, r5
   10530:	f7fb ffd8 	bl	c4e4 <__aeabi_i2d>
   10534:	a34e      	add	r3, pc, #312	; (adr r3, 10670 <_dtoa_r+0x230>)
   10536:	e9d3 2300 	ldrd	r2, r3, [r3]
   1053a:	f7fc fc5b 	bl	cdf4 <__aeabi_dmul>
   1053e:	4602      	mov	r2, r0
   10540:	460b      	mov	r3, r1
   10542:	4630      	mov	r0, r6
   10544:	4639      	mov	r1, r7
   10546:	f7fb fe81 	bl	c24c <__adddf3>
   1054a:	4606      	mov	r6, r0
   1054c:	460f      	mov	r7, r1
   1054e:	f7fc f8bb 	bl	c6c8 <__aeabi_d2iz>
   10552:	2200      	movs	r2, #0
   10554:	4683      	mov	fp, r0
   10556:	2300      	movs	r3, #0
   10558:	4630      	mov	r0, r6
   1055a:	4639      	mov	r1, r7
   1055c:	f7fc f88c 	bl	c678 <__aeabi_dcmplt>
   10560:	2800      	cmp	r0, #0
   10562:	f040 81e8 	bne.w	10936 <_dtoa_r+0x4f6>
   10566:	f1bb 0f16 	cmp.w	fp, #22
   1056a:	f200 81d6 	bhi.w	1091a <_dtoa_r+0x4da>
   1056e:	4b45      	ldr	r3, [pc, #276]	; (10684 <_dtoa_r+0x244>)
   10570:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   10574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10578:	e9d3 2300 	ldrd	r2, r3, [r3]
   1057c:	f7fc f87c 	bl	c678 <__aeabi_dcmplt>
   10580:	2800      	cmp	r0, #0
   10582:	f000 8085 	beq.w	10690 <_dtoa_r+0x250>
   10586:	2300      	movs	r3, #0
   10588:	eba8 0505 	sub.w	r5, r8, r5
   1058c:	f10b 3bff 	add.w	fp, fp, #4294967295
   10590:	930f      	str	r3, [sp, #60]	; 0x3c
   10592:	1e6b      	subs	r3, r5, #1
   10594:	9308      	str	r3, [sp, #32]
   10596:	f100 81c8 	bmi.w	1092a <_dtoa_r+0x4ea>
   1059a:	2300      	movs	r3, #0
   1059c:	930c      	str	r3, [sp, #48]	; 0x30
   1059e:	f1bb 0f00 	cmp.w	fp, #0
   105a2:	da7d      	bge.n	106a0 <_dtoa_r+0x260>
   105a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   105a6:	f8cd b018 	str.w	fp, [sp, #24]
   105aa:	eba3 030b 	sub.w	r3, r3, fp
   105ae:	930c      	str	r3, [sp, #48]	; 0x30
   105b0:	f1cb 0300 	rsb	r3, fp, #0
   105b4:	f04f 0b00 	mov.w	fp, #0
   105b8:	930e      	str	r3, [sp, #56]	; 0x38
   105ba:	9b01      	ldr	r3, [sp, #4]
   105bc:	2b09      	cmp	r3, #9
   105be:	d879      	bhi.n	106b4 <_dtoa_r+0x274>
   105c0:	2b05      	cmp	r3, #5
   105c2:	f340 81d2 	ble.w	1096a <_dtoa_r+0x52a>
   105c6:	3b04      	subs	r3, #4
   105c8:	2500      	movs	r5, #0
   105ca:	9301      	str	r3, [sp, #4]
   105cc:	9b01      	ldr	r3, [sp, #4]
   105ce:	3b02      	subs	r3, #2
   105d0:	2b03      	cmp	r3, #3
   105d2:	f200 8563 	bhi.w	1109c <_dtoa_r+0xc5c>
   105d6:	e8df f013 	tbh	[pc, r3, lsl #1]
   105da:	03f3      	.short	0x03f3
   105dc:	03e703f0 	.word	0x03e703f0
   105e0:	03c5      	.short	0x03c5
   105e2:	2301      	movs	r3, #1
   105e4:	f029 4900 	bic.w	r9, r9, #2147483648	; 0x80000000
   105e8:	602b      	str	r3, [r5, #0]
   105ea:	4b23      	ldr	r3, [pc, #140]	; (10678 <_dtoa_r+0x238>)
   105ec:	f8cd 9014 	str.w	r9, [sp, #20]
   105f0:	ea33 0309 	bics.w	r3, r3, r9
   105f4:	f47f af48 	bne.w	10488 <_dtoa_r+0x48>
   105f8:	f242 730f 	movw	r3, #9999	; 0x270f
   105fc:	f3c9 0913 	ubfx	r9, r9, #0, #20
   10600:	9a07      	ldr	r2, [sp, #28]
   10602:	6013      	str	r3, [r2, #0]
   10604:	ea59 0306 	orrs.w	r3, r9, r6
   10608:	d01f      	beq.n	1064a <_dtoa_r+0x20a>
   1060a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1060c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 10688 <_dtoa_r+0x248>
   10610:	2b00      	cmp	r3, #0
   10612:	f43f af51 	beq.w	104b8 <_dtoa_r+0x78>
   10616:	f109 0303 	add.w	r3, r9, #3
   1061a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   1061c:	4648      	mov	r0, r9
   1061e:	6013      	str	r3, [r2, #0]
   10620:	b019      	add	sp, #100	; 0x64
   10622:	ecbd 8b04 	vpop	{d8-d9}
   10626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1062a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1062e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   10632:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   10636:	f3c2 0313 	ubfx	r3, r2, #0, #20
   1063a:	4608      	mov	r0, r1
   1063c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   10640:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   10644:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   10648:	e761      	b.n	1050e <_dtoa_r+0xce>
   1064a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1064c:	f8df 903c 	ldr.w	r9, [pc, #60]	; 1068c <_dtoa_r+0x24c>
   10650:	2b00      	cmp	r3, #0
   10652:	f43f af31 	beq.w	104b8 <_dtoa_r+0x78>
   10656:	f109 0308 	add.w	r3, r9, #8
   1065a:	e7de      	b.n	1061a <_dtoa_r+0x1da>
   1065c:	f3af 8000 	nop.w
   10660:	636f4361 	.word	0x636f4361
   10664:	3fd287a7 	.word	0x3fd287a7
   10668:	8b60c8b3 	.word	0x8b60c8b3
   1066c:	3fc68a28 	.word	0x3fc68a28
   10670:	509f79fb 	.word	0x509f79fb
   10674:	3fd34413 	.word	0x3fd34413
   10678:	7ff00000 	.word	0x7ff00000
   1067c:	0002fadd 	.word	0x0002fadd
   10680:	3ff80000 	.word	0x3ff80000
   10684:	0002f158 	.word	0x0002f158
   10688:	0002fb4c 	.word	0x0002fb4c
   1068c:	0002fb50 	.word	0x0002fb50
   10690:	eba8 0505 	sub.w	r5, r8, r5
   10694:	1e6b      	subs	r3, r5, #1
   10696:	9308      	str	r3, [sp, #32]
   10698:	f100 84ee 	bmi.w	11078 <_dtoa_r+0xc38>
   1069c:	900f      	str	r0, [sp, #60]	; 0x3c
   1069e:	900c      	str	r0, [sp, #48]	; 0x30
   106a0:	9b08      	ldr	r3, [sp, #32]
   106a2:	f8cd b018 	str.w	fp, [sp, #24]
   106a6:	445b      	add	r3, fp
   106a8:	9308      	str	r3, [sp, #32]
   106aa:	2300      	movs	r3, #0
   106ac:	930e      	str	r3, [sp, #56]	; 0x38
   106ae:	9b01      	ldr	r3, [sp, #4]
   106b0:	2b09      	cmp	r3, #9
   106b2:	d985      	bls.n	105c0 <_dtoa_r+0x180>
   106b4:	2300      	movs	r3, #0
   106b6:	2201      	movs	r2, #1
   106b8:	461d      	mov	r5, r3
   106ba:	920d      	str	r2, [sp, #52]	; 0x34
   106bc:	f04f 32ff 	mov.w	r2, #4294967295
   106c0:	9301      	str	r3, [sp, #4]
   106c2:	930b      	str	r3, [sp, #44]	; 0x2c
   106c4:	920a      	str	r2, [sp, #40]	; 0x28
   106c6:	2100      	movs	r1, #0
   106c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   106ca:	6461      	str	r1, [r4, #68]	; 0x44
   106cc:	9314      	str	r3, [sp, #80]	; 0x50
   106ce:	4620      	mov	r0, r4
   106d0:	f01a fca0 	bl	2b014 <_Balloc>
   106d4:	9009      	str	r0, [sp, #36]	; 0x24
   106d6:	6420      	str	r0, [r4, #64]	; 0x40
   106d8:	2d00      	cmp	r5, #0
   106da:	f000 80f2 	beq.w	108c2 <_dtoa_r+0x482>
   106de:	9906      	ldr	r1, [sp, #24]
   106e0:	2900      	cmp	r1, #0
   106e2:	f340 829e 	ble.w	10c22 <_dtoa_r+0x7e2>
   106e6:	4ac8      	ldr	r2, [pc, #800]	; (10a08 <_dtoa_r+0x5c8>)
   106e8:	f001 030f 	and.w	r3, r1, #15
   106ec:	110d      	asrs	r5, r1, #4
   106ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   106f2:	05ca      	lsls	r2, r1, #23
   106f4:	e9d3 6700 	ldrd	r6, r7, [r3]
   106f8:	f140 832b 	bpl.w	10d52 <_dtoa_r+0x912>
   106fc:	4bc3      	ldr	r3, [pc, #780]	; (10a0c <_dtoa_r+0x5cc>)
   106fe:	f005 050f 	and.w	r5, r5, #15
   10702:	f04f 0803 	mov.w	r8, #3
   10706:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1070a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1070e:	f7fc fc9b 	bl	d048 <__aeabi_ddiv>
   10712:	ec41 0b18 	vmov	d8, r0, r1
   10716:	b18d      	cbz	r5, 1073c <_dtoa_r+0x2fc>
   10718:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 10a0c <_dtoa_r+0x5cc>
   1071c:	07eb      	lsls	r3, r5, #31
   1071e:	4630      	mov	r0, r6
   10720:	4639      	mov	r1, r7
   10722:	d507      	bpl.n	10734 <_dtoa_r+0x2f4>
   10724:	f108 0801 	add.w	r8, r8, #1
   10728:	e9d9 2300 	ldrd	r2, r3, [r9]
   1072c:	f7fc fb62 	bl	cdf4 <__aeabi_dmul>
   10730:	4606      	mov	r6, r0
   10732:	460f      	mov	r7, r1
   10734:	106d      	asrs	r5, r5, #1
   10736:	f109 0908 	add.w	r9, r9, #8
   1073a:	d1ef      	bne.n	1071c <_dtoa_r+0x2dc>
   1073c:	4632      	mov	r2, r6
   1073e:	463b      	mov	r3, r7
   10740:	ec51 0b18 	vmov	r0, r1, d8
   10744:	f7fc fc80 	bl	d048 <__aeabi_ddiv>
   10748:	4606      	mov	r6, r0
   1074a:	460f      	mov	r7, r1
   1074c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1074e:	b143      	cbz	r3, 10762 <_dtoa_r+0x322>
   10750:	2200      	movs	r2, #0
   10752:	4baf      	ldr	r3, [pc, #700]	; (10a10 <_dtoa_r+0x5d0>)
   10754:	4630      	mov	r0, r6
   10756:	4639      	mov	r1, r7
   10758:	f7fb ff8e 	bl	c678 <__aeabi_dcmplt>
   1075c:	2800      	cmp	r0, #0
   1075e:	f040 8466 	bne.w	1102e <_dtoa_r+0xbee>
   10762:	4640      	mov	r0, r8
   10764:	f7fb febe 	bl	c4e4 <__aeabi_i2d>
   10768:	4632      	mov	r2, r6
   1076a:	463b      	mov	r3, r7
   1076c:	f7fc fb42 	bl	cdf4 <__aeabi_dmul>
   10770:	4ba8      	ldr	r3, [pc, #672]	; (10a14 <_dtoa_r+0x5d4>)
   10772:	2200      	movs	r2, #0
   10774:	f7fb fd6a 	bl	c24c <__adddf3>
   10778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1077a:	4680      	mov	r8, r0
   1077c:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   10780:	2b00      	cmp	r3, #0
   10782:	f000 8102 	beq.w	1098a <_dtoa_r+0x54a>
   10786:	9b06      	ldr	r3, [sp, #24]
   10788:	9312      	str	r3, [sp, #72]	; 0x48
   1078a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1078c:	9311      	str	r3, [sp, #68]	; 0x44
   1078e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10790:	2b00      	cmp	r3, #0
   10792:	f000 8318 	beq.w	10dc6 <_dtoa_r+0x986>
   10796:	9a11      	ldr	r2, [sp, #68]	; 0x44
   10798:	2000      	movs	r0, #0
   1079a:	4b9b      	ldr	r3, [pc, #620]	; (10a08 <_dtoa_r+0x5c8>)
   1079c:	499e      	ldr	r1, [pc, #632]	; (10a18 <_dtoa_r+0x5d8>)
   1079e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   107a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   107a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   107a8:	f7fc fc4e 	bl	d048 <__aeabi_ddiv>
   107ac:	4642      	mov	r2, r8
   107ae:	464b      	mov	r3, r9
   107b0:	f7fb fd4a 	bl	c248 <__aeabi_dsub>
   107b4:	4680      	mov	r8, r0
   107b6:	4689      	mov	r9, r1
   107b8:	4630      	mov	r0, r6
   107ba:	4639      	mov	r1, r7
   107bc:	f7fb ff84 	bl	c6c8 <__aeabi_d2iz>
   107c0:	ec49 8b18 	vmov	d8, r8, r9
   107c4:	4680      	mov	r8, r0
   107c6:	f7fb fe8d 	bl	c4e4 <__aeabi_i2d>
   107ca:	4602      	mov	r2, r0
   107cc:	460b      	mov	r3, r1
   107ce:	f108 0830 	add.w	r8, r8, #48	; 0x30
   107d2:	4630      	mov	r0, r6
   107d4:	4639      	mov	r1, r7
   107d6:	f7fb fd37 	bl	c248 <__aeabi_dsub>
   107da:	f805 8b01 	strb.w	r8, [r5], #1
   107de:	4606      	mov	r6, r0
   107e0:	460f      	mov	r7, r1
   107e2:	4602      	mov	r2, r0
   107e4:	460b      	mov	r3, r1
   107e6:	ec51 0b18 	vmov	r0, r1, d8
   107ea:	f7fb ff63 	bl	c6b4 <__aeabi_dcmpgt>
   107ee:	2800      	cmp	r0, #0
   107f0:	f040 851a 	bne.w	11228 <_dtoa_r+0xde8>
   107f4:	f04f 0900 	mov.w	r9, #0
   107f8:	ee09 aa10 	vmov	s18, sl
   107fc:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   10800:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   10804:	46cb      	mov	fp, r9
   10806:	ec59 8b18 	vmov	r8, r9, d8
   1080a:	ee08 4a10 	vmov	s16, r4
   1080e:	462c      	mov	r4, r5
   10810:	e024      	b.n	1085c <_dtoa_r+0x41c>
   10812:	45d3      	cmp	fp, sl
   10814:	da4f      	bge.n	108b6 <_dtoa_r+0x476>
   10816:	f7fc faed 	bl	cdf4 <__aeabi_dmul>
   1081a:	2200      	movs	r2, #0
   1081c:	4b7f      	ldr	r3, [pc, #508]	; (10a1c <_dtoa_r+0x5dc>)
   1081e:	4680      	mov	r8, r0
   10820:	4689      	mov	r9, r1
   10822:	4630      	mov	r0, r6
   10824:	4639      	mov	r1, r7
   10826:	f7fc fae5 	bl	cdf4 <__aeabi_dmul>
   1082a:	460f      	mov	r7, r1
   1082c:	4606      	mov	r6, r0
   1082e:	f7fb ff4b 	bl	c6c8 <__aeabi_d2iz>
   10832:	4605      	mov	r5, r0
   10834:	f7fb fe56 	bl	c4e4 <__aeabi_i2d>
   10838:	4602      	mov	r2, r0
   1083a:	460b      	mov	r3, r1
   1083c:	3530      	adds	r5, #48	; 0x30
   1083e:	4630      	mov	r0, r6
   10840:	4639      	mov	r1, r7
   10842:	f7fb fd01 	bl	c248 <__aeabi_dsub>
   10846:	4642      	mov	r2, r8
   10848:	464b      	mov	r3, r9
   1084a:	f804 5b01 	strb.w	r5, [r4], #1
   1084e:	4606      	mov	r6, r0
   10850:	460f      	mov	r7, r1
   10852:	f7fb ff11 	bl	c678 <__aeabi_dcmplt>
   10856:	2800      	cmp	r0, #0
   10858:	f040 84e1 	bne.w	1121e <_dtoa_r+0xdde>
   1085c:	4632      	mov	r2, r6
   1085e:	463b      	mov	r3, r7
   10860:	2000      	movs	r0, #0
   10862:	496b      	ldr	r1, [pc, #428]	; (10a10 <_dtoa_r+0x5d0>)
   10864:	f7fb fcf0 	bl	c248 <__aeabi_dsub>
   10868:	4642      	mov	r2, r8
   1086a:	464b      	mov	r3, r9
   1086c:	f10b 0b01 	add.w	fp, fp, #1
   10870:	f7fb ff02 	bl	c678 <__aeabi_dcmplt>
   10874:	4605      	mov	r5, r0
   10876:	2200      	movs	r2, #0
   10878:	4b68      	ldr	r3, [pc, #416]	; (10a1c <_dtoa_r+0x5dc>)
   1087a:	4640      	mov	r0, r8
   1087c:	4649      	mov	r1, r9
   1087e:	2d00      	cmp	r5, #0
   10880:	d0c7      	beq.n	10812 <_dtoa_r+0x3d2>
   10882:	4625      	mov	r5, r4
   10884:	9909      	ldr	r1, [sp, #36]	; 0x24
   10886:	ee19 aa10 	vmov	sl, s18
   1088a:	ee18 4a10 	vmov	r4, s16
   1088e:	e002      	b.n	10896 <_dtoa_r+0x456>
   10890:	428d      	cmp	r5, r1
   10892:	f000 849c 	beq.w	111ce <_dtoa_r+0xd8e>
   10896:	462a      	mov	r2, r5
   10898:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   1089c:	2b39      	cmp	r3, #57	; 0x39
   1089e:	d0f7      	beq.n	10890 <_dtoa_r+0x450>
   108a0:	3301      	adds	r3, #1
   108a2:	9109      	str	r1, [sp, #36]	; 0x24
   108a4:	b2db      	uxtb	r3, r3
   108a6:	702b      	strb	r3, [r5, #0]
   108a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   108aa:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   108ae:	3301      	adds	r3, #1
   108b0:	9209      	str	r2, [sp, #36]	; 0x24
   108b2:	9306      	str	r3, [sp, #24]
   108b4:	e092      	b.n	109dc <_dtoa_r+0x59c>
   108b6:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   108ba:	ee19 aa10 	vmov	sl, s18
   108be:	ee18 4a10 	vmov	r4, s16
   108c2:	9a06      	ldr	r2, [sp, #24]
   108c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   108c6:	2a0e      	cmp	r2, #14
   108c8:	dc02      	bgt.n	108d0 <_dtoa_r+0x490>
   108ca:	2b00      	cmp	r3, #0
   108cc:	f280 81e4 	bge.w	10c98 <_dtoa_r+0x858>
   108d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   108d2:	2a00      	cmp	r2, #0
   108d4:	f000 80a8 	beq.w	10a28 <_dtoa_r+0x5e8>
   108d8:	9a01      	ldr	r2, [sp, #4]
   108da:	2a01      	cmp	r2, #1
   108dc:	f340 83ce 	ble.w	1107c <_dtoa_r+0xc3c>
   108e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   108e2:	1e5f      	subs	r7, r3, #1
   108e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   108e6:	42bb      	cmp	r3, r7
   108e8:	f280 837a 	bge.w	10fe0 <_dtoa_r+0xba0>
   108ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   108ee:	970e      	str	r7, [sp, #56]	; 0x38
   108f0:	1afb      	subs	r3, r7, r3
   108f2:	2700      	movs	r7, #0
   108f4:	449b      	add	fp, r3
   108f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   108f8:	2b00      	cmp	r3, #0
   108fa:	f2c0 8463 	blt.w	111c4 <_dtoa_r+0xd84>
   108fe:	9a08      	ldr	r2, [sp, #32]
   10900:	4611      	mov	r1, r2
   10902:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10904:	4419      	add	r1, r3
   10906:	4616      	mov	r6, r2
   10908:	441a      	add	r2, r3
   1090a:	9108      	str	r1, [sp, #32]
   1090c:	920c      	str	r2, [sp, #48]	; 0x30
   1090e:	2101      	movs	r1, #1
   10910:	4620      	mov	r0, r4
   10912:	f01a fc93 	bl	2b23c <__i2b>
   10916:	4605      	mov	r5, r0
   10918:	e089      	b.n	10a2e <_dtoa_r+0x5ee>
   1091a:	2301      	movs	r3, #1
   1091c:	eba8 0505 	sub.w	r5, r8, r5
   10920:	930f      	str	r3, [sp, #60]	; 0x3c
   10922:	1e6b      	subs	r3, r5, #1
   10924:	9308      	str	r3, [sp, #32]
   10926:	f57f ae38 	bpl.w	1059a <_dtoa_r+0x15a>
   1092a:	f1c5 0301 	rsb	r3, r5, #1
   1092e:	930c      	str	r3, [sp, #48]	; 0x30
   10930:	2300      	movs	r3, #0
   10932:	9308      	str	r3, [sp, #32]
   10934:	e633      	b.n	1059e <_dtoa_r+0x15e>
   10936:	4658      	mov	r0, fp
   10938:	f7fb fdd4 	bl	c4e4 <__aeabi_i2d>
   1093c:	4632      	mov	r2, r6
   1093e:	463b      	mov	r3, r7
   10940:	f7fb fe90 	bl	c664 <__aeabi_dcmpeq>
   10944:	2800      	cmp	r0, #0
   10946:	f47f ae0e 	bne.w	10566 <_dtoa_r+0x126>
   1094a:	f10b 3bff 	add.w	fp, fp, #4294967295
   1094e:	e60a      	b.n	10566 <_dtoa_r+0x126>
   10950:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 10a24 <_dtoa_r+0x5e4>
   10954:	4648      	mov	r0, r9
   10956:	b019      	add	sp, #100	; 0x64
   10958:	ecbd 8b04 	vpop	{d8-d9}
   1095c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10960:	f1c0 0020 	rsb	r0, r0, #32
   10964:	fa06 f000 	lsl.w	r0, r6, r0
   10968:	e5ca      	b.n	10500 <_dtoa_r+0xc0>
   1096a:	2501      	movs	r5, #1
   1096c:	e62e      	b.n	105cc <_dtoa_r+0x18c>
   1096e:	4640      	mov	r0, r8
   10970:	f7fb fdb8 	bl	c4e4 <__aeabi_i2d>
   10974:	4632      	mov	r2, r6
   10976:	463b      	mov	r3, r7
   10978:	f7fc fa3c 	bl	cdf4 <__aeabi_dmul>
   1097c:	2200      	movs	r2, #0
   1097e:	4b25      	ldr	r3, [pc, #148]	; (10a14 <_dtoa_r+0x5d4>)
   10980:	f7fb fc64 	bl	c24c <__adddf3>
   10984:	4680      	mov	r8, r0
   10986:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   1098a:	4630      	mov	r0, r6
   1098c:	4639      	mov	r1, r7
   1098e:	2200      	movs	r2, #0
   10990:	4b23      	ldr	r3, [pc, #140]	; (10a20 <_dtoa_r+0x5e0>)
   10992:	f7fb fc59 	bl	c248 <__aeabi_dsub>
   10996:	4642      	mov	r2, r8
   10998:	464b      	mov	r3, r9
   1099a:	4606      	mov	r6, r0
   1099c:	460f      	mov	r7, r1
   1099e:	f7fb fe89 	bl	c6b4 <__aeabi_dcmpgt>
   109a2:	2800      	cmp	r0, #0
   109a4:	f040 8335 	bne.w	11012 <_dtoa_r+0xbd2>
   109a8:	4630      	mov	r0, r6
   109aa:	4639      	mov	r1, r7
   109ac:	4642      	mov	r2, r8
   109ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   109b2:	f7fb fe61 	bl	c678 <__aeabi_dcmplt>
   109b6:	2800      	cmp	r0, #0
   109b8:	d083      	beq.n	108c2 <_dtoa_r+0x482>
   109ba:	2700      	movs	r7, #0
   109bc:	463d      	mov	r5, r7
   109be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   109c0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   109c4:	43de      	mvns	r6, r3
   109c6:	4639      	mov	r1, r7
   109c8:	4620      	mov	r0, r4
   109ca:	f01a fb49 	bl	2b060 <_Bfree>
   109ce:	1c73      	adds	r3, r6, #1
   109d0:	9306      	str	r3, [sp, #24]
   109d2:	b11d      	cbz	r5, 109dc <_dtoa_r+0x59c>
   109d4:	4629      	mov	r1, r5
   109d6:	4620      	mov	r0, r4
   109d8:	f01a fb42 	bl	2b060 <_Bfree>
   109dc:	4651      	mov	r1, sl
   109de:	4620      	mov	r0, r4
   109e0:	f01a fb3e 	bl	2b060 <_Bfree>
   109e4:	2300      	movs	r3, #0
   109e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   109e8:	7013      	strb	r3, [r2, #0]
   109ea:	9b07      	ldr	r3, [sp, #28]
   109ec:	4619      	mov	r1, r3
   109ee:	9b06      	ldr	r3, [sp, #24]
   109f0:	600b      	str	r3, [r1, #0]
   109f2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   109f4:	2b00      	cmp	r3, #0
   109f6:	f43f ad5f 	beq.w	104b8 <_dtoa_r+0x78>
   109fa:	4648      	mov	r0, r9
   109fc:	601a      	str	r2, [r3, #0]
   109fe:	b019      	add	sp, #100	; 0x64
   10a00:	ecbd 8b04 	vpop	{d8-d9}
   10a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a08:	0002f158 	.word	0x0002f158
   10a0c:	0002f130 	.word	0x0002f130
   10a10:	3ff00000 	.word	0x3ff00000
   10a14:	401c0000 	.word	0x401c0000
   10a18:	3fe00000 	.word	0x3fe00000
   10a1c:	40240000 	.word	0x40240000
   10a20:	40140000 	.word	0x40140000
   10a24:	0002fadc 	.word	0x0002fadc
   10a28:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   10a2a:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
   10a2e:	2e00      	cmp	r6, #0
   10a30:	dd0c      	ble.n	10a4c <_dtoa_r+0x60c>
   10a32:	9a08      	ldr	r2, [sp, #32]
   10a34:	2a00      	cmp	r2, #0
   10a36:	dd09      	ble.n	10a4c <_dtoa_r+0x60c>
   10a38:	42b2      	cmp	r2, r6
   10a3a:	4613      	mov	r3, r2
   10a3c:	990c      	ldr	r1, [sp, #48]	; 0x30
   10a3e:	bfa8      	it	ge
   10a40:	4633      	movge	r3, r6
   10a42:	1ac9      	subs	r1, r1, r3
   10a44:	1af6      	subs	r6, r6, r3
   10a46:	1ad3      	subs	r3, r2, r3
   10a48:	910c      	str	r1, [sp, #48]	; 0x30
   10a4a:	9308      	str	r3, [sp, #32]
   10a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10a4e:	b143      	cbz	r3, 10a62 <_dtoa_r+0x622>
   10a50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10a52:	2b00      	cmp	r3, #0
   10a54:	d061      	beq.n	10b1a <_dtoa_r+0x6da>
   10a56:	2f00      	cmp	r7, #0
   10a58:	f300 82b0 	bgt.w	10fbc <_dtoa_r+0xb7c>
   10a5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10a5e:	1bda      	subs	r2, r3, r7
   10a60:	d15c      	bne.n	10b1c <_dtoa_r+0x6dc>
   10a62:	2101      	movs	r1, #1
   10a64:	4620      	mov	r0, r4
   10a66:	f01a fbe9 	bl	2b23c <__i2b>
   10a6a:	f1bb 0f00 	cmp.w	fp, #0
   10a6e:	4607      	mov	r7, r0
   10a70:	f300 8138 	bgt.w	10ce4 <_dtoa_r+0x8a4>
   10a74:	9b01      	ldr	r3, [sp, #4]
   10a76:	2b01      	cmp	r3, #1
   10a78:	f340 82ce 	ble.w	11018 <_dtoa_r+0xbd8>
   10a7c:	f04f 0800 	mov.w	r8, #0
   10a80:	f1bb 0f00 	cmp.w	fp, #0
   10a84:	f040 813a 	bne.w	10cfc <_dtoa_r+0x8bc>
   10a88:	2301      	movs	r3, #1
   10a8a:	9908      	ldr	r1, [sp, #32]
   10a8c:	440b      	add	r3, r1
   10a8e:	f013 031f 	ands.w	r3, r3, #31
   10a92:	d049      	beq.n	10b28 <_dtoa_r+0x6e8>
   10a94:	f1c3 0220 	rsb	r2, r3, #32
   10a98:	2a04      	cmp	r2, #4
   10a9a:	f340 8458 	ble.w	1134e <_dtoa_r+0xf0e>
   10a9e:	f1c3 031c 	rsb	r3, r3, #28
   10aa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10aa4:	4419      	add	r1, r3
   10aa6:	441a      	add	r2, r3
   10aa8:	441e      	add	r6, r3
   10aaa:	920c      	str	r2, [sp, #48]	; 0x30
   10aac:	9108      	str	r1, [sp, #32]
   10aae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10ab0:	2b00      	cmp	r3, #0
   10ab2:	dd05      	ble.n	10ac0 <_dtoa_r+0x680>
   10ab4:	4651      	mov	r1, sl
   10ab6:	461a      	mov	r2, r3
   10ab8:	4620      	mov	r0, r4
   10aba:	f01a fcbb 	bl	2b434 <__lshift>
   10abe:	4682      	mov	sl, r0
   10ac0:	9b08      	ldr	r3, [sp, #32]
   10ac2:	2b00      	cmp	r3, #0
   10ac4:	dd05      	ble.n	10ad2 <_dtoa_r+0x692>
   10ac6:	4639      	mov	r1, r7
   10ac8:	461a      	mov	r2, r3
   10aca:	4620      	mov	r0, r4
   10acc:	f01a fcb2 	bl	2b434 <__lshift>
   10ad0:	4607      	mov	r7, r0
   10ad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10ad4:	2b00      	cmp	r3, #0
   10ad6:	f040 811a 	bne.w	10d0e <_dtoa_r+0x8ce>
   10ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10adc:	2b00      	cmp	r3, #0
   10ade:	dc2c      	bgt.n	10b3a <_dtoa_r+0x6fa>
   10ae0:	9b01      	ldr	r3, [sp, #4]
   10ae2:	2b02      	cmp	r3, #2
   10ae4:	dd29      	ble.n	10b3a <_dtoa_r+0x6fa>
   10ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10ae8:	2b00      	cmp	r3, #0
   10aea:	f47f af68 	bne.w	109be <_dtoa_r+0x57e>
   10aee:	4639      	mov	r1, r7
   10af0:	2205      	movs	r2, #5
   10af2:	4620      	mov	r0, r4
   10af4:	f01a fabe 	bl	2b074 <__multadd>
   10af8:	4607      	mov	r7, r0
   10afa:	4650      	mov	r0, sl
   10afc:	4639      	mov	r1, r7
   10afe:	f01a fd01 	bl	2b504 <__mcmp>
   10b02:	2800      	cmp	r0, #0
   10b04:	f77f af5b 	ble.w	109be <_dtoa_r+0x57e>
   10b08:	9809      	ldr	r0, [sp, #36]	; 0x24
   10b0a:	2331      	movs	r3, #49	; 0x31
   10b0c:	9e06      	ldr	r6, [sp, #24]
   10b0e:	4681      	mov	r9, r0
   10b10:	f800 3b01 	strb.w	r3, [r0], #1
   10b14:	3601      	adds	r6, #1
   10b16:	9009      	str	r0, [sp, #36]	; 0x24
   10b18:	e755      	b.n	109c6 <_dtoa_r+0x586>
   10b1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10b1c:	4651      	mov	r1, sl
   10b1e:	4620      	mov	r0, r4
   10b20:	f01a fc38 	bl	2b394 <__pow5mult>
   10b24:	4682      	mov	sl, r0
   10b26:	e79c      	b.n	10a62 <_dtoa_r+0x622>
   10b28:	231c      	movs	r3, #28
   10b2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10b2c:	441e      	add	r6, r3
   10b2e:	441a      	add	r2, r3
   10b30:	920c      	str	r2, [sp, #48]	; 0x30
   10b32:	9a08      	ldr	r2, [sp, #32]
   10b34:	441a      	add	r2, r3
   10b36:	9208      	str	r2, [sp, #32]
   10b38:	e7b9      	b.n	10aae <_dtoa_r+0x66e>
   10b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10b3c:	2b00      	cmp	r3, #0
   10b3e:	f000 81b8 	beq.w	10eb2 <_dtoa_r+0xa72>
   10b42:	9b06      	ldr	r3, [sp, #24]
   10b44:	3301      	adds	r3, #1
   10b46:	9306      	str	r3, [sp, #24]
   10b48:	2e00      	cmp	r6, #0
   10b4a:	f300 824b 	bgt.w	10fe4 <_dtoa_r+0xba4>
   10b4e:	f1b8 0f00 	cmp.w	r8, #0
   10b52:	f040 8374 	bne.w	1123e <_dtoa_r+0xdfe>
   10b56:	46a9      	mov	r9, r5
   10b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10b5a:	9904      	ldr	r1, [sp, #16]
   10b5c:	1e53      	subs	r3, r2, #1
   10b5e:	4690      	mov	r8, r2
   10b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10b62:	f001 0101 	and.w	r1, r1, #1
   10b66:	441a      	add	r2, r3
   10b68:	9104      	str	r1, [sp, #16]
   10b6a:	920a      	str	r2, [sp, #40]	; 0x28
   10b6c:	4639      	mov	r1, r7
   10b6e:	4650      	mov	r0, sl
   10b70:	f018 ffc8 	bl	29b04 <quorem>
   10b74:	4629      	mov	r1, r5
   10b76:	4683      	mov	fp, r0
   10b78:	4650      	mov	r0, sl
   10b7a:	f01a fcc3 	bl	2b504 <__mcmp>
   10b7e:	4639      	mov	r1, r7
   10b80:	4606      	mov	r6, r0
   10b82:	464a      	mov	r2, r9
   10b84:	4620      	mov	r0, r4
   10b86:	f01a fcdb 	bl	2b540 <__mdiff>
   10b8a:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   10b8e:	4601      	mov	r1, r0
   10b90:	9302      	str	r3, [sp, #8]
   10b92:	68c3      	ldr	r3, [r0, #12]
   10b94:	2b00      	cmp	r3, #0
   10b96:	f040 822c 	bne.w	10ff2 <_dtoa_r+0xbb2>
   10b9a:	9008      	str	r0, [sp, #32]
   10b9c:	4650      	mov	r0, sl
   10b9e:	f01a fcb1 	bl	2b504 <__mcmp>
   10ba2:	4603      	mov	r3, r0
   10ba4:	9908      	ldr	r1, [sp, #32]
   10ba6:	4620      	mov	r0, r4
   10ba8:	9308      	str	r3, [sp, #32]
   10baa:	f01a fa59 	bl	2b060 <_Bfree>
   10bae:	9b01      	ldr	r3, [sp, #4]
   10bb0:	9904      	ldr	r1, [sp, #16]
   10bb2:	461a      	mov	r2, r3
   10bb4:	9b08      	ldr	r3, [sp, #32]
   10bb6:	431a      	orrs	r2, r3
   10bb8:	430a      	orrs	r2, r1
   10bba:	f000 8396 	beq.w	112ea <_dtoa_r+0xeaa>
   10bbe:	2e00      	cmp	r6, #0
   10bc0:	f2c0 8313 	blt.w	111ea <_dtoa_r+0xdaa>
   10bc4:	9a01      	ldr	r2, [sp, #4]
   10bc6:	4316      	orrs	r6, r2
   10bc8:	9a04      	ldr	r2, [sp, #16]
   10bca:	4332      	orrs	r2, r6
   10bcc:	f000 830d 	beq.w	111ea <_dtoa_r+0xdaa>
   10bd0:	2b00      	cmp	r3, #0
   10bd2:	f300 836a 	bgt.w	112aa <_dtoa_r+0xe6a>
   10bd6:	9b02      	ldr	r3, [sp, #8]
   10bd8:	f108 0601 	add.w	r6, r8, #1
   10bdc:	f888 3000 	strb.w	r3, [r8]
   10be0:	46b3      	mov	fp, r6
   10be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10be4:	4543      	cmp	r3, r8
   10be6:	f000 836a 	beq.w	112be <_dtoa_r+0xe7e>
   10bea:	4651      	mov	r1, sl
   10bec:	2300      	movs	r3, #0
   10bee:	220a      	movs	r2, #10
   10bf0:	4620      	mov	r0, r4
   10bf2:	f01a fa3f 	bl	2b074 <__multadd>
   10bf6:	454d      	cmp	r5, r9
   10bf8:	4682      	mov	sl, r0
   10bfa:	4629      	mov	r1, r5
   10bfc:	f04f 0300 	mov.w	r3, #0
   10c00:	f04f 020a 	mov.w	r2, #10
   10c04:	4620      	mov	r0, r4
   10c06:	f000 81f9 	beq.w	10ffc <_dtoa_r+0xbbc>
   10c0a:	f01a fa33 	bl	2b074 <__multadd>
   10c0e:	4649      	mov	r1, r9
   10c10:	4605      	mov	r5, r0
   10c12:	2300      	movs	r3, #0
   10c14:	220a      	movs	r2, #10
   10c16:	4620      	mov	r0, r4
   10c18:	f01a fa2c 	bl	2b074 <__multadd>
   10c1c:	46b0      	mov	r8, r6
   10c1e:	4681      	mov	r9, r0
   10c20:	e7a4      	b.n	10b6c <_dtoa_r+0x72c>
   10c22:	f000 81ad 	beq.w	10f80 <_dtoa_r+0xb40>
   10c26:	9b06      	ldr	r3, [sp, #24]
   10c28:	f1c3 0900 	rsb	r9, r3, #0
   10c2c:	4bbe      	ldr	r3, [pc, #760]	; (10f28 <_dtoa_r+0xae8>)
   10c2e:	f009 020f 	and.w	r2, r9, #15
   10c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c3e:	f7fc f8d9 	bl	cdf4 <__aeabi_dmul>
   10c42:	ea5f 1929 	movs.w	r9, r9, asr #4
   10c46:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   10c4a:	f000 836f 	beq.w	1132c <_dtoa_r+0xeec>
   10c4e:	4ab7      	ldr	r2, [pc, #732]	; (10f2c <_dtoa_r+0xaec>)
   10c50:	2300      	movs	r3, #0
   10c52:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   10c56:	f04f 0802 	mov.w	r8, #2
   10c5a:	46ab      	mov	fp, r5
   10c5c:	4606      	mov	r6, r0
   10c5e:	460f      	mov	r7, r1
   10c60:	4615      	mov	r5, r2
   10c62:	f019 0f01 	tst.w	r9, #1
   10c66:	4630      	mov	r0, r6
   10c68:	4639      	mov	r1, r7
   10c6a:	d008      	beq.n	10c7e <_dtoa_r+0x83e>
   10c6c:	f108 0801 	add.w	r8, r8, #1
   10c70:	e9d5 2300 	ldrd	r2, r3, [r5]
   10c74:	f7fc f8be 	bl	cdf4 <__aeabi_dmul>
   10c78:	465b      	mov	r3, fp
   10c7a:	4606      	mov	r6, r0
   10c7c:	460f      	mov	r7, r1
   10c7e:	ea5f 0969 	movs.w	r9, r9, asr #1
   10c82:	f105 0508 	add.w	r5, r5, #8
   10c86:	d1ec      	bne.n	10c62 <_dtoa_r+0x822>
   10c88:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
   10c8c:	2b00      	cmp	r3, #0
   10c8e:	f47f ad5d 	bne.w	1074c <_dtoa_r+0x30c>
   10c92:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
   10c96:	e559      	b.n	1074c <_dtoa_r+0x30c>
   10c98:	4ba3      	ldr	r3, [pc, #652]	; (10f28 <_dtoa_r+0xae8>)
   10c9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10c9e:	ed93 7b00 	vldr	d7, [r3]
   10ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10ca4:	2b00      	cmp	r3, #0
   10ca6:	eeb0 8a47 	vmov.f32	s16, s14
   10caa:	eef0 8a67 	vmov.f32	s17, s15
   10cae:	f280 8211 	bge.w	110d4 <_dtoa_r+0xc94>
   10cb2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   10cb4:	2f00      	cmp	r7, #0
   10cb6:	f300 820d 	bgt.w	110d4 <_dtoa_r+0xc94>
   10cba:	2f00      	cmp	r7, #0
   10cbc:	f47f ae7d 	bne.w	109ba <_dtoa_r+0x57a>
   10cc0:	2200      	movs	r2, #0
   10cc2:	4b9b      	ldr	r3, [pc, #620]	; (10f30 <_dtoa_r+0xaf0>)
   10cc4:	ec51 0b17 	vmov	r0, r1, d7
   10cc8:	f7fc f894 	bl	cdf4 <__aeabi_dmul>
   10ccc:	4602      	mov	r2, r0
   10cce:	460b      	mov	r3, r1
   10cd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10cd4:	f7fb fcda 	bl	c68c <__aeabi_dcmple>
   10cd8:	2800      	cmp	r0, #0
   10cda:	f000 819b 	beq.w	11014 <_dtoa_r+0xbd4>
   10cde:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   10ce0:	463d      	mov	r5, r7
   10ce2:	e66c      	b.n	109be <_dtoa_r+0x57e>
   10ce4:	4601      	mov	r1, r0
   10ce6:	465a      	mov	r2, fp
   10ce8:	4620      	mov	r0, r4
   10cea:	f01a fb53 	bl	2b394 <__pow5mult>
   10cee:	9b01      	ldr	r3, [sp, #4]
   10cf0:	4607      	mov	r7, r0
   10cf2:	2b01      	cmp	r3, #1
   10cf4:	f340 814a 	ble.w	10f8c <_dtoa_r+0xb4c>
   10cf8:	f04f 0800 	mov.w	r8, #0
   10cfc:	693b      	ldr	r3, [r7, #16]
   10cfe:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   10d02:	6918      	ldr	r0, [r3, #16]
   10d04:	f01a fa48 	bl	2b198 <__hi0bits>
   10d08:	f1c0 0320 	rsb	r3, r0, #32
   10d0c:	e6bd      	b.n	10a8a <_dtoa_r+0x64a>
   10d0e:	4639      	mov	r1, r7
   10d10:	4650      	mov	r0, sl
   10d12:	f01a fbf7 	bl	2b504 <__mcmp>
   10d16:	2800      	cmp	r0, #0
   10d18:	f6bf aedf 	bge.w	10ada <_dtoa_r+0x69a>
   10d1c:	4651      	mov	r1, sl
   10d1e:	2300      	movs	r3, #0
   10d20:	220a      	movs	r2, #10
   10d22:	4620      	mov	r0, r4
   10d24:	f01a f9a6 	bl	2b074 <__multadd>
   10d28:	9b06      	ldr	r3, [sp, #24]
   10d2a:	4682      	mov	sl, r0
   10d2c:	f103 39ff 	add.w	r9, r3, #4294967295
   10d30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10d32:	2b00      	cmp	r3, #0
   10d34:	f040 82e2 	bne.w	112fc <_dtoa_r+0xebc>
   10d38:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10d3a:	2b00      	cmp	r3, #0
   10d3c:	f300 82db 	bgt.w	112f6 <_dtoa_r+0xeb6>
   10d40:	9b01      	ldr	r3, [sp, #4]
   10d42:	2b02      	cmp	r3, #2
   10d44:	f340 82d7 	ble.w	112f6 <_dtoa_r+0xeb6>
   10d48:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10d4a:	f8cd 9018 	str.w	r9, [sp, #24]
   10d4e:	930a      	str	r3, [sp, #40]	; 0x28
   10d50:	e6c9      	b.n	10ae6 <_dtoa_r+0x6a6>
   10d52:	ed9d 7b02 	vldr	d7, [sp, #8]
   10d56:	f04f 0802 	mov.w	r8, #2
   10d5a:	eeb0 8a47 	vmov.f32	s16, s14
   10d5e:	eef0 8a67 	vmov.f32	s17, s15
   10d62:	e4d8      	b.n	10716 <_dtoa_r+0x2d6>
   10d64:	2301      	movs	r3, #1
   10d66:	930d      	str	r3, [sp, #52]	; 0x34
   10d68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10d6a:	9a06      	ldr	r2, [sp, #24]
   10d6c:	4413      	add	r3, r2
   10d6e:	9314      	str	r3, [sp, #80]	; 0x50
   10d70:	3301      	adds	r3, #1
   10d72:	2b01      	cmp	r3, #1
   10d74:	461e      	mov	r6, r3
   10d76:	930a      	str	r3, [sp, #40]	; 0x28
   10d78:	bfb8      	it	lt
   10d7a:	2601      	movlt	r6, #1
   10d7c:	2100      	movs	r1, #0
   10d7e:	2e17      	cmp	r6, #23
   10d80:	6461      	str	r1, [r4, #68]	; 0x44
   10d82:	f340 82d6 	ble.w	11332 <_dtoa_r+0xef2>
   10d86:	2201      	movs	r2, #1
   10d88:	2304      	movs	r3, #4
   10d8a:	005b      	lsls	r3, r3, #1
   10d8c:	4611      	mov	r1, r2
   10d8e:	3201      	adds	r2, #1
   10d90:	f103 0014 	add.w	r0, r3, #20
   10d94:	42b0      	cmp	r0, r6
   10d96:	d9f8      	bls.n	10d8a <_dtoa_r+0x94a>
   10d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10d9a:	6461      	str	r1, [r4, #68]	; 0x44
   10d9c:	2b0e      	cmp	r3, #14
   10d9e:	bf8c      	ite	hi
   10da0:	2500      	movhi	r5, #0
   10da2:	f005 0501 	andls.w	r5, r5, #1
   10da6:	e492      	b.n	106ce <_dtoa_r+0x28e>
   10da8:	2301      	movs	r3, #1
   10daa:	930d      	str	r3, [sp, #52]	; 0x34
   10dac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   10dae:	2e00      	cmp	r6, #0
   10db0:	f340 812a 	ble.w	11008 <_dtoa_r+0xbc8>
   10db4:	9614      	str	r6, [sp, #80]	; 0x50
   10db6:	960a      	str	r6, [sp, #40]	; 0x28
   10db8:	e7e0      	b.n	10d7c <_dtoa_r+0x93c>
   10dba:	2300      	movs	r3, #0
   10dbc:	930d      	str	r3, [sp, #52]	; 0x34
   10dbe:	e7d3      	b.n	10d68 <_dtoa_r+0x928>
   10dc0:	2300      	movs	r3, #0
   10dc2:	930d      	str	r3, [sp, #52]	; 0x34
   10dc4:	e7f2      	b.n	10dac <_dtoa_r+0x96c>
   10dc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10dc8:	4642      	mov	r2, r8
   10dca:	4957      	ldr	r1, [pc, #348]	; (10f28 <_dtoa_r+0xae8>)
   10dcc:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10dce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   10dd2:	464b      	mov	r3, r9
   10dd4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   10dd8:	f7fc f80c 	bl	cdf4 <__aeabi_dmul>
   10ddc:	4602      	mov	r2, r0
   10dde:	460b      	mov	r3, r1
   10de0:	4630      	mov	r0, r6
   10de2:	4639      	mov	r1, r7
   10de4:	ec43 2b18 	vmov	d8, r2, r3
   10de8:	f7fb fc6e 	bl	c6c8 <__aeabi_d2iz>
   10dec:	4680      	mov	r8, r0
   10dee:	f7fb fb79 	bl	c4e4 <__aeabi_i2d>
   10df2:	460b      	mov	r3, r1
   10df4:	4602      	mov	r2, r0
   10df6:	4639      	mov	r1, r7
   10df8:	4630      	mov	r0, r6
   10dfa:	f108 0830 	add.w	r8, r8, #48	; 0x30
   10dfe:	f7fb fa23 	bl	c248 <__aeabi_dsub>
   10e02:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10e04:	4606      	mov	r6, r0
   10e06:	460f      	mov	r7, r1
   10e08:	2b01      	cmp	r3, #1
   10e0a:	f805 8b01 	strb.w	r8, [r5], #1
   10e0e:	d022      	beq.n	10e56 <_dtoa_r+0xa16>
   10e10:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10e12:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10e14:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   10e18:	4413      	add	r3, r2
   10e1a:	469b      	mov	fp, r3
   10e1c:	2200      	movs	r2, #0
   10e1e:	4b45      	ldr	r3, [pc, #276]	; (10f34 <_dtoa_r+0xaf4>)
   10e20:	4630      	mov	r0, r6
   10e22:	4639      	mov	r1, r7
   10e24:	f7fb ffe6 	bl	cdf4 <__aeabi_dmul>
   10e28:	4689      	mov	r9, r1
   10e2a:	4680      	mov	r8, r0
   10e2c:	f7fb fc4c 	bl	c6c8 <__aeabi_d2iz>
   10e30:	4607      	mov	r7, r0
   10e32:	f7fb fb57 	bl	c4e4 <__aeabi_i2d>
   10e36:	460b      	mov	r3, r1
   10e38:	4602      	mov	r2, r0
   10e3a:	4649      	mov	r1, r9
   10e3c:	4640      	mov	r0, r8
   10e3e:	f7fb fa03 	bl	c248 <__aeabi_dsub>
   10e42:	f107 0330 	add.w	r3, r7, #48	; 0x30
   10e46:	4606      	mov	r6, r0
   10e48:	460f      	mov	r7, r1
   10e4a:	f805 3b01 	strb.w	r3, [r5], #1
   10e4e:	455d      	cmp	r5, fp
   10e50:	d1e4      	bne.n	10e1c <_dtoa_r+0x9dc>
   10e52:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
   10e56:	2200      	movs	r2, #0
   10e58:	4b37      	ldr	r3, [pc, #220]	; (10f38 <_dtoa_r+0xaf8>)
   10e5a:	ee18 0a10 	vmov	r0, s16
   10e5e:	ec59 8b18 	vmov	r8, r9, d8
   10e62:	4649      	mov	r1, r9
   10e64:	f7fb f9f2 	bl	c24c <__adddf3>
   10e68:	4602      	mov	r2, r0
   10e6a:	460b      	mov	r3, r1
   10e6c:	4630      	mov	r0, r6
   10e6e:	4639      	mov	r1, r7
   10e70:	f7fb fc20 	bl	c6b4 <__aeabi_dcmpgt>
   10e74:	2800      	cmp	r0, #0
   10e76:	f040 81df 	bne.w	11238 <_dtoa_r+0xdf8>
   10e7a:	ee18 2a10 	vmov	r2, s16
   10e7e:	464b      	mov	r3, r9
   10e80:	2000      	movs	r0, #0
   10e82:	492d      	ldr	r1, [pc, #180]	; (10f38 <_dtoa_r+0xaf8>)
   10e84:	f7fb f9e0 	bl	c248 <__aeabi_dsub>
   10e88:	4602      	mov	r2, r0
   10e8a:	460b      	mov	r3, r1
   10e8c:	4630      	mov	r0, r6
   10e8e:	4639      	mov	r1, r7
   10e90:	f7fb fbf2 	bl	c678 <__aeabi_dcmplt>
   10e94:	2800      	cmp	r0, #0
   10e96:	f43f ad14 	beq.w	108c2 <_dtoa_r+0x482>
   10e9a:	462a      	mov	r2, r5
   10e9c:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   10ea0:	2b30      	cmp	r3, #48	; 0x30
   10ea2:	d0fa      	beq.n	10e9a <_dtoa_r+0xa5a>
   10ea4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10ea6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   10eaa:	3301      	adds	r3, #1
   10eac:	9209      	str	r2, [sp, #36]	; 0x24
   10eae:	9306      	str	r3, [sp, #24]
   10eb0:	e594      	b.n	109dc <_dtoa_r+0x59c>
   10eb2:	9b06      	ldr	r3, [sp, #24]
   10eb4:	3301      	adds	r3, #1
   10eb6:	9306      	str	r3, [sp, #24]
   10eb8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   10ebc:	2601      	movs	r6, #1
   10ebe:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   10ec2:	e002      	b.n	10eca <_dtoa_r+0xa8a>
   10ec4:	f01a f8d6 	bl	2b074 <__multadd>
   10ec8:	4682      	mov	sl, r0
   10eca:	4639      	mov	r1, r7
   10ecc:	4650      	mov	r0, sl
   10ece:	f018 fe19 	bl	29b04 <quorem>
   10ed2:	454e      	cmp	r6, r9
   10ed4:	f100 0c30 	add.w	ip, r0, #48	; 0x30
   10ed8:	4651      	mov	r1, sl
   10eda:	f04f 0300 	mov.w	r3, #0
   10ede:	f04f 020a 	mov.w	r2, #10
   10ee2:	4620      	mov	r0, r4
   10ee4:	f106 0601 	add.w	r6, r6, #1
   10ee8:	f808 cb01 	strb.w	ip, [r8], #1
   10eec:	dbea      	blt.n	10ec4 <_dtoa_r+0xa84>
   10eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10ef0:	2600      	movs	r6, #0
   10ef2:	f8cd c008 	str.w	ip, [sp, #8]
   10ef6:	2b00      	cmp	r3, #0
   10ef8:	bfcc      	ite	gt
   10efa:	469b      	movgt	fp, r3
   10efc:	f04f 0b01 	movle.w	fp, #1
   10f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10f02:	449b      	add	fp, r3
   10f04:	4651      	mov	r1, sl
   10f06:	2201      	movs	r2, #1
   10f08:	4620      	mov	r0, r4
   10f0a:	f01a fa93 	bl	2b434 <__lshift>
   10f0e:	4639      	mov	r1, r7
   10f10:	4682      	mov	sl, r0
   10f12:	f01a faf7 	bl	2b504 <__mcmp>
   10f16:	2800      	cmp	r0, #0
   10f18:	f340 813d 	ble.w	11196 <_dtoa_r+0xd56>
   10f1c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   10f20:	f10b 3bff 	add.w	fp, fp, #4294967295
   10f24:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10f26:	e00e      	b.n	10f46 <_dtoa_r+0xb06>
   10f28:	0002f158 	.word	0x0002f158
   10f2c:	0002f130 	.word	0x0002f130
   10f30:	40140000 	.word	0x40140000
   10f34:	40240000 	.word	0x40240000
   10f38:	3fe00000 	.word	0x3fe00000
   10f3c:	455a      	cmp	r2, fp
   10f3e:	f000 8135 	beq.w	111ac <_dtoa_r+0xd6c>
   10f42:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   10f46:	2b39      	cmp	r3, #57	; 0x39
   10f48:	f10b 0801 	add.w	r8, fp, #1
   10f4c:	d0f6      	beq.n	10f3c <_dtoa_r+0xafc>
   10f4e:	3301      	adds	r3, #1
   10f50:	f88b 3000 	strb.w	r3, [fp]
   10f54:	4639      	mov	r1, r7
   10f56:	4620      	mov	r0, r4
   10f58:	f01a f882 	bl	2b060 <_Bfree>
   10f5c:	2d00      	cmp	r5, #0
   10f5e:	f000 812c 	beq.w	111ba <_dtoa_r+0xd7a>
   10f62:	2e00      	cmp	r6, #0
   10f64:	f000 81ed 	beq.w	11342 <_dtoa_r+0xf02>
   10f68:	42ae      	cmp	r6, r5
   10f6a:	f000 81ea 	beq.w	11342 <_dtoa_r+0xf02>
   10f6e:	4631      	mov	r1, r6
   10f70:	4620      	mov	r0, r4
   10f72:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   10f76:	f01a f873 	bl	2b060 <_Bfree>
   10f7a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   10f7e:	e529      	b.n	109d4 <_dtoa_r+0x594>
   10f80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   10f84:	f04f 0802 	mov.w	r8, #2
   10f88:	f7ff bbe0 	b.w	1074c <_dtoa_r+0x30c>
   10f8c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   10f90:	2900      	cmp	r1, #0
   10f92:	f47f aeb1 	bne.w	10cf8 <_dtoa_r+0x8b8>
   10f96:	f3c2 0313 	ubfx	r3, r2, #0, #20
   10f9a:	2b00      	cmp	r3, #0
   10f9c:	f47f aeac 	bne.w	10cf8 <_dtoa_r+0x8b8>
   10fa0:	4bca      	ldr	r3, [pc, #808]	; (112cc <_dtoa_r+0xe8c>)
   10fa2:	4013      	ands	r3, r2
   10fa4:	2b00      	cmp	r3, #0
   10fa6:	f000 818d 	beq.w	112c4 <_dtoa_r+0xe84>
   10faa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10fac:	f04f 0801 	mov.w	r8, #1
   10fb0:	3301      	adds	r3, #1
   10fb2:	930c      	str	r3, [sp, #48]	; 0x30
   10fb4:	9b08      	ldr	r3, [sp, #32]
   10fb6:	3301      	adds	r3, #1
   10fb8:	9308      	str	r3, [sp, #32]
   10fba:	e561      	b.n	10a80 <_dtoa_r+0x640>
   10fbc:	4629      	mov	r1, r5
   10fbe:	463a      	mov	r2, r7
   10fc0:	4620      	mov	r0, r4
   10fc2:	f01a f9e7 	bl	2b394 <__pow5mult>
   10fc6:	4605      	mov	r5, r0
   10fc8:	4652      	mov	r2, sl
   10fca:	4620      	mov	r0, r4
   10fcc:	4629      	mov	r1, r5
   10fce:	f01a f93f 	bl	2b250 <__multiply>
   10fd2:	4680      	mov	r8, r0
   10fd4:	4651      	mov	r1, sl
   10fd6:	4620      	mov	r0, r4
   10fd8:	46c2      	mov	sl, r8
   10fda:	f01a f841 	bl	2b060 <_Bfree>
   10fde:	e53d      	b.n	10a5c <_dtoa_r+0x61c>
   10fe0:	1bdf      	subs	r7, r3, r7
   10fe2:	e488      	b.n	108f6 <_dtoa_r+0x4b6>
   10fe4:	4629      	mov	r1, r5
   10fe6:	4632      	mov	r2, r6
   10fe8:	4620      	mov	r0, r4
   10fea:	f01a fa23 	bl	2b434 <__lshift>
   10fee:	4605      	mov	r5, r0
   10ff0:	e5ad      	b.n	10b4e <_dtoa_r+0x70e>
   10ff2:	4620      	mov	r0, r4
   10ff4:	f01a f834 	bl	2b060 <_Bfree>
   10ff8:	2301      	movs	r3, #1
   10ffa:	e5e0      	b.n	10bbe <_dtoa_r+0x77e>
   10ffc:	f01a f83a 	bl	2b074 <__multadd>
   11000:	46b0      	mov	r8, r6
   11002:	4605      	mov	r5, r0
   11004:	4681      	mov	r9, r0
   11006:	e5b1      	b.n	10b6c <_dtoa_r+0x72c>
   11008:	2301      	movs	r3, #1
   1100a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   1100e:	f7ff bb5a 	b.w	106c6 <_dtoa_r+0x286>
   11012:	2700      	movs	r7, #0
   11014:	463d      	mov	r5, r7
   11016:	e577      	b.n	10b08 <_dtoa_r+0x6c8>
   11018:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1101c:	2900      	cmp	r1, #0
   1101e:	f47f ad2d 	bne.w	10a7c <_dtoa_r+0x63c>
   11022:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11026:	2b00      	cmp	r3, #0
   11028:	f47f ad28 	bne.w	10a7c <_dtoa_r+0x63c>
   1102c:	e7b8      	b.n	10fa0 <_dtoa_r+0xb60>
   1102e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11030:	2b00      	cmp	r3, #0
   11032:	f43f ac9c 	beq.w	1096e <_dtoa_r+0x52e>
   11036:	9d14      	ldr	r5, [sp, #80]	; 0x50
   11038:	2d00      	cmp	r5, #0
   1103a:	f77f ac42 	ble.w	108c2 <_dtoa_r+0x482>
   1103e:	9b06      	ldr	r3, [sp, #24]
   11040:	2200      	movs	r2, #0
   11042:	4630      	mov	r0, r6
   11044:	4639      	mov	r1, r7
   11046:	3b01      	subs	r3, #1
   11048:	9312      	str	r3, [sp, #72]	; 0x48
   1104a:	4ba1      	ldr	r3, [pc, #644]	; (112d0 <_dtoa_r+0xe90>)
   1104c:	f7fb fed2 	bl	cdf4 <__aeabi_dmul>
   11050:	4606      	mov	r6, r0
   11052:	460f      	mov	r7, r1
   11054:	f108 0001 	add.w	r0, r8, #1
   11058:	f7fb fa44 	bl	c4e4 <__aeabi_i2d>
   1105c:	4632      	mov	r2, r6
   1105e:	463b      	mov	r3, r7
   11060:	f7fb fec8 	bl	cdf4 <__aeabi_dmul>
   11064:	2200      	movs	r2, #0
   11066:	4b9b      	ldr	r3, [pc, #620]	; (112d4 <_dtoa_r+0xe94>)
   11068:	f7fb f8f0 	bl	c24c <__adddf3>
   1106c:	9511      	str	r5, [sp, #68]	; 0x44
   1106e:	4680      	mov	r8, r0
   11070:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   11074:	f7ff bb8b 	b.w	1078e <_dtoa_r+0x34e>
   11078:	900f      	str	r0, [sp, #60]	; 0x3c
   1107a:	e456      	b.n	1092a <_dtoa_r+0x4ea>
   1107c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1107e:	2a00      	cmp	r2, #0
   11080:	f000 80ac 	beq.w	111dc <_dtoa_r+0xd9c>
   11084:	990c      	ldr	r1, [sp, #48]	; 0x30
   11086:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1108a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1108c:	460e      	mov	r6, r1
   1108e:	9a08      	ldr	r2, [sp, #32]
   11090:	441a      	add	r2, r3
   11092:	9208      	str	r2, [sp, #32]
   11094:	460a      	mov	r2, r1
   11096:	441a      	add	r2, r3
   11098:	920c      	str	r2, [sp, #48]	; 0x30
   1109a:	e438      	b.n	1090e <_dtoa_r+0x4ce>
   1109c:	2100      	movs	r1, #0
   1109e:	4620      	mov	r0, r4
   110a0:	6461      	str	r1, [r4, #68]	; 0x44
   110a2:	f019 ffb7 	bl	2b014 <_Balloc>
   110a6:	9a06      	ldr	r2, [sp, #24]
   110a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   110aa:	2a0e      	cmp	r2, #14
   110ac:	9009      	str	r0, [sp, #36]	; 0x24
   110ae:	6420      	str	r0, [r4, #64]	; 0x40
   110b0:	f300 8153 	bgt.w	1135a <_dtoa_r+0xf1a>
   110b4:	2b00      	cmp	r3, #0
   110b6:	f2c0 8150 	blt.w	1135a <_dtoa_r+0xf1a>
   110ba:	f04f 32ff 	mov.w	r2, #4294967295
   110be:	4b86      	ldr	r3, [pc, #536]	; (112d8 <_dtoa_r+0xe98>)
   110c0:	920a      	str	r2, [sp, #40]	; 0x28
   110c2:	9a06      	ldr	r2, [sp, #24]
   110c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   110c8:	ed93 7b00 	vldr	d7, [r3]
   110cc:	eeb0 8a47 	vmov.f32	s16, s14
   110d0:	eef0 8a67 	vmov.f32	s17, s15
   110d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   110d8:	ec53 2b18 	vmov	r2, r3, d8
   110dc:	4630      	mov	r0, r6
   110de:	4639      	mov	r1, r7
   110e0:	f7fb ffb2 	bl	d048 <__aeabi_ddiv>
   110e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   110e6:	f7fb faef 	bl	c6c8 <__aeabi_d2iz>
   110ea:	4681      	mov	r9, r0
   110ec:	f7fb f9fa 	bl	c4e4 <__aeabi_i2d>
   110f0:	ec53 2b18 	vmov	r2, r3, d8
   110f4:	f7fb fe7e 	bl	cdf4 <__aeabi_dmul>
   110f8:	460b      	mov	r3, r1
   110fa:	4602      	mov	r2, r0
   110fc:	4639      	mov	r1, r7
   110fe:	4630      	mov	r0, r6
   11100:	f7fb f8a2 	bl	c248 <__aeabi_dsub>
   11104:	f109 0330 	add.w	r3, r9, #48	; 0x30
   11108:	f805 3b01 	strb.w	r3, [r5], #1
   1110c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1110e:	2b01      	cmp	r3, #1
   11110:	f000 80ae 	beq.w	11270 <_dtoa_r+0xe30>
   11114:	ee09 aa10 	vmov	s18, sl
   11118:	f04f 0801 	mov.w	r8, #1
   1111c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   11120:	ee09 4a90 	vmov	s19, r4
   11124:	ec5a 9b18 	vmov	r9, sl, d8
   11128:	e017      	b.n	1115a <_dtoa_r+0xd1a>
   1112a:	f7fb ff8d 	bl	d048 <__aeabi_ddiv>
   1112e:	f7fb facb 	bl	c6c8 <__aeabi_d2iz>
   11132:	4604      	mov	r4, r0
   11134:	f7fb f9d6 	bl	c4e4 <__aeabi_i2d>
   11138:	464a      	mov	r2, r9
   1113a:	4653      	mov	r3, sl
   1113c:	f7fb fe5a 	bl	cdf4 <__aeabi_dmul>
   11140:	460b      	mov	r3, r1
   11142:	4602      	mov	r2, r0
   11144:	4639      	mov	r1, r7
   11146:	4630      	mov	r0, r6
   11148:	f7fb f87e 	bl	c248 <__aeabi_dsub>
   1114c:	f104 0330 	add.w	r3, r4, #48	; 0x30
   11150:	45d8      	cmp	r8, fp
   11152:	f805 3b01 	strb.w	r3, [r5], #1
   11156:	f000 8086 	beq.w	11266 <_dtoa_r+0xe26>
   1115a:	2200      	movs	r2, #0
   1115c:	4b5c      	ldr	r3, [pc, #368]	; (112d0 <_dtoa_r+0xe90>)
   1115e:	f7fb fe49 	bl	cdf4 <__aeabi_dmul>
   11162:	2200      	movs	r2, #0
   11164:	2300      	movs	r3, #0
   11166:	4606      	mov	r6, r0
   11168:	460f      	mov	r7, r1
   1116a:	f7fb fa7b 	bl	c664 <__aeabi_dcmpeq>
   1116e:	4604      	mov	r4, r0
   11170:	f108 0801 	add.w	r8, r8, #1
   11174:	464a      	mov	r2, r9
   11176:	4653      	mov	r3, sl
   11178:	4630      	mov	r0, r6
   1117a:	4639      	mov	r1, r7
   1117c:	2c00      	cmp	r4, #0
   1117e:	d0d4      	beq.n	1112a <_dtoa_r+0xcea>
   11180:	ee19 aa10 	vmov	sl, s18
   11184:	ee19 4a90 	vmov	r4, s19
   11188:	9b06      	ldr	r3, [sp, #24]
   1118a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   1118e:	3301      	adds	r3, #1
   11190:	9509      	str	r5, [sp, #36]	; 0x24
   11192:	9306      	str	r3, [sp, #24]
   11194:	e422      	b.n	109dc <_dtoa_r+0x59c>
   11196:	d103      	bne.n	111a0 <_dtoa_r+0xd60>
   11198:	9b02      	ldr	r3, [sp, #8]
   1119a:	07d8      	lsls	r0, r3, #31
   1119c:	f53f aebe 	bmi.w	10f1c <_dtoa_r+0xadc>
   111a0:	46d8      	mov	r8, fp
   111a2:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   111a6:	2b30      	cmp	r3, #48	; 0x30
   111a8:	d0fa      	beq.n	111a0 <_dtoa_r+0xd60>
   111aa:	e6d3      	b.n	10f54 <_dtoa_r+0xb14>
   111ac:	9a06      	ldr	r2, [sp, #24]
   111ae:	2331      	movs	r3, #49	; 0x31
   111b0:	3201      	adds	r2, #1
   111b2:	9206      	str	r2, [sp, #24]
   111b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   111b6:	7013      	strb	r3, [r2, #0]
   111b8:	e6cc      	b.n	10f54 <_dtoa_r+0xb14>
   111ba:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   111be:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   111c2:	e40b      	b.n	109dc <_dtoa_r+0x59c>
   111c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   111c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   111c8:	1a9e      	subs	r6, r3, r2
   111ca:	f7ff bba0 	b.w	1090e <_dtoa_r+0x4ce>
   111ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
   111d0:	9109      	str	r1, [sp, #36]	; 0x24
   111d2:	3301      	adds	r3, #1
   111d4:	9312      	str	r3, [sp, #72]	; 0x48
   111d6:	2331      	movs	r3, #49	; 0x31
   111d8:	f7ff bb65 	b.w	108a6 <_dtoa_r+0x466>
   111dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   111de:	990c      	ldr	r1, [sp, #48]	; 0x30
   111e0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   111e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   111e6:	460e      	mov	r6, r1
   111e8:	e751      	b.n	1108e <_dtoa_r+0xc4e>
   111ea:	2b00      	cmp	r3, #0
   111ec:	dd11      	ble.n	11212 <_dtoa_r+0xdd2>
   111ee:	4651      	mov	r1, sl
   111f0:	2201      	movs	r2, #1
   111f2:	4620      	mov	r0, r4
   111f4:	f01a f91e 	bl	2b434 <__lshift>
   111f8:	4639      	mov	r1, r7
   111fa:	4682      	mov	sl, r0
   111fc:	f01a f982 	bl	2b504 <__mcmp>
   11200:	2800      	cmp	r0, #0
   11202:	f340 808c 	ble.w	1131e <_dtoa_r+0xede>
   11206:	9b02      	ldr	r3, [sp, #8]
   11208:	2b39      	cmp	r3, #57	; 0x39
   1120a:	d067      	beq.n	112dc <_dtoa_r+0xe9c>
   1120c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   11210:	9302      	str	r3, [sp, #8]
   11212:	9b02      	ldr	r3, [sp, #8]
   11214:	462e      	mov	r6, r5
   11216:	464d      	mov	r5, r9
   11218:	f808 3b01 	strb.w	r3, [r8], #1
   1121c:	e69a      	b.n	10f54 <_dtoa_r+0xb14>
   1121e:	4625      	mov	r5, r4
   11220:	ee19 aa10 	vmov	sl, s18
   11224:	ee18 4a10 	vmov	r4, s16
   11228:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1122a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   1122e:	3301      	adds	r3, #1
   11230:	9509      	str	r5, [sp, #36]	; 0x24
   11232:	9306      	str	r3, [sp, #24]
   11234:	f7ff bbd2 	b.w	109dc <_dtoa_r+0x59c>
   11238:	9909      	ldr	r1, [sp, #36]	; 0x24
   1123a:	f7ff bb2c 	b.w	10896 <_dtoa_r+0x456>
   1123e:	6869      	ldr	r1, [r5, #4]
   11240:	4620      	mov	r0, r4
   11242:	f019 fee7 	bl	2b014 <_Balloc>
   11246:	692b      	ldr	r3, [r5, #16]
   11248:	4606      	mov	r6, r0
   1124a:	f105 010c 	add.w	r1, r5, #12
   1124e:	3302      	adds	r3, #2
   11250:	300c      	adds	r0, #12
   11252:	009a      	lsls	r2, r3, #2
   11254:	f7fb fc7a 	bl	cb4c <memcpy>
   11258:	4631      	mov	r1, r6
   1125a:	2201      	movs	r2, #1
   1125c:	4620      	mov	r0, r4
   1125e:	f01a f8e9 	bl	2b434 <__lshift>
   11262:	4681      	mov	r9, r0
   11264:	e478      	b.n	10b58 <_dtoa_r+0x718>
   11266:	46a1      	mov	r9, r4
   11268:	ee19 aa10 	vmov	sl, s18
   1126c:	ee19 4a90 	vmov	r4, s19
   11270:	4602      	mov	r2, r0
   11272:	460b      	mov	r3, r1
   11274:	f7fa ffea 	bl	c24c <__adddf3>
   11278:	4606      	mov	r6, r0
   1127a:	460f      	mov	r7, r1
   1127c:	ec53 2b18 	vmov	r2, r3, d8
   11280:	f7fb fa18 	bl	c6b4 <__aeabi_dcmpgt>
   11284:	b960      	cbnz	r0, 112a0 <_dtoa_r+0xe60>
   11286:	4630      	mov	r0, r6
   11288:	4639      	mov	r1, r7
   1128a:	ec53 2b18 	vmov	r2, r3, d8
   1128e:	f7fb f9e9 	bl	c664 <__aeabi_dcmpeq>
   11292:	2800      	cmp	r0, #0
   11294:	f43f af78 	beq.w	11188 <_dtoa_r+0xd48>
   11298:	f019 0f01 	tst.w	r9, #1
   1129c:	f43f af74 	beq.w	11188 <_dtoa_r+0xd48>
   112a0:	9b06      	ldr	r3, [sp, #24]
   112a2:	9909      	ldr	r1, [sp, #36]	; 0x24
   112a4:	9312      	str	r3, [sp, #72]	; 0x48
   112a6:	f7ff baf6 	b.w	10896 <_dtoa_r+0x456>
   112aa:	9b02      	ldr	r3, [sp, #8]
   112ac:	2b39      	cmp	r3, #57	; 0x39
   112ae:	d015      	beq.n	112dc <_dtoa_r+0xe9c>
   112b0:	9b02      	ldr	r3, [sp, #8]
   112b2:	462e      	mov	r6, r5
   112b4:	464d      	mov	r5, r9
   112b6:	3301      	adds	r3, #1
   112b8:	f808 3b01 	strb.w	r3, [r8], #1
   112bc:	e64a      	b.n	10f54 <_dtoa_r+0xb14>
   112be:	462e      	mov	r6, r5
   112c0:	464d      	mov	r5, r9
   112c2:	e61f      	b.n	10f04 <_dtoa_r+0xac4>
   112c4:	4698      	mov	r8, r3
   112c6:	f7ff bbdb 	b.w	10a80 <_dtoa_r+0x640>
   112ca:	bf00      	nop
   112cc:	7ff00000 	.word	0x7ff00000
   112d0:	40240000 	.word	0x40240000
   112d4:	401c0000 	.word	0x401c0000
   112d8:	0002f158 	.word	0x0002f158
   112dc:	46c3      	mov	fp, r8
   112de:	2339      	movs	r3, #57	; 0x39
   112e0:	462e      	mov	r6, r5
   112e2:	464d      	mov	r5, r9
   112e4:	f80b 3b01 	strb.w	r3, [fp], #1
   112e8:	e61a      	b.n	10f20 <_dtoa_r+0xae0>
   112ea:	9b02      	ldr	r3, [sp, #8]
   112ec:	2b39      	cmp	r3, #57	; 0x39
   112ee:	d0f5      	beq.n	112dc <_dtoa_r+0xe9c>
   112f0:	2e00      	cmp	r6, #0
   112f2:	dc8b      	bgt.n	1120c <_dtoa_r+0xdcc>
   112f4:	e78d      	b.n	11212 <_dtoa_r+0xdd2>
   112f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   112f8:	930a      	str	r3, [sp, #40]	; 0x28
   112fa:	e5dd      	b.n	10eb8 <_dtoa_r+0xa78>
   112fc:	4629      	mov	r1, r5
   112fe:	2300      	movs	r3, #0
   11300:	220a      	movs	r2, #10
   11302:	4620      	mov	r0, r4
   11304:	f019 feb6 	bl	2b074 <__multadd>
   11308:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1130a:	4605      	mov	r5, r0
   1130c:	2b00      	cmp	r3, #0
   1130e:	dc03      	bgt.n	11318 <_dtoa_r+0xed8>
   11310:	9b01      	ldr	r3, [sp, #4]
   11312:	2b02      	cmp	r3, #2
   11314:	f73f ad18 	bgt.w	10d48 <_dtoa_r+0x908>
   11318:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1131a:	930a      	str	r3, [sp, #40]	; 0x28
   1131c:	e414      	b.n	10b48 <_dtoa_r+0x708>
   1131e:	f47f af78 	bne.w	11212 <_dtoa_r+0xdd2>
   11322:	9b02      	ldr	r3, [sp, #8]
   11324:	07de      	lsls	r6, r3, #31
   11326:	f57f af74 	bpl.w	11212 <_dtoa_r+0xdd2>
   1132a:	e76c      	b.n	11206 <_dtoa_r+0xdc6>
   1132c:	f04f 0802 	mov.w	r8, #2
   11330:	e4af      	b.n	10c92 <_dtoa_r+0x852>
   11332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11334:	2b0e      	cmp	r3, #14
   11336:	bf8c      	ite	hi
   11338:	2500      	movhi	r5, #0
   1133a:	f005 0501 	andls.w	r5, r5, #1
   1133e:	f7ff b9c6 	b.w	106ce <_dtoa_r+0x28e>
   11342:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   11346:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   1134a:	f7ff bb43 	b.w	109d4 <_dtoa_r+0x594>
   1134e:	f43f abae 	beq.w	10aae <_dtoa_r+0x66e>
   11352:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   11356:	f7ff bbe8 	b.w	10b2a <_dtoa_r+0x6ea>
   1135a:	f04f 32ff 	mov.w	r2, #4294967295
   1135e:	2100      	movs	r1, #0
   11360:	e9cd 210a 	strd	r2, r1, [sp, #40]	; 0x28
   11364:	2101      	movs	r1, #1
   11366:	9214      	str	r2, [sp, #80]	; 0x50
   11368:	910d      	str	r1, [sp, #52]	; 0x34
   1136a:	f7ff bab5 	b.w	108d8 <_dtoa_r+0x498>
   1136e:	bf00      	nop

00011370 <nan>:
   11370:	ed9f 0b01 	vldr	d0, [pc, #4]	; 11378 <nan+0x8>
   11374:	4770      	bx	lr
   11376:	bf00      	nop
   11378:	00000000 	.word	0x00000000
   1137c:	7ff80000 	.word	0x7ff80000

00011380 <data_publish.constprop.0>:
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
	uint8_t *data, size_t len)
{
	struct mqtt_publish_param param;

	param.message.topic.qos = qos;
   11380:	2301      	movs	r3, #1
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
   11382:	b530      	push	{r4, r5, lr}
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
   11384:	4d19      	ldr	r5, [pc, #100]	; (113ec <data_publish.constprop.0+0x6c>)
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
   11386:	b08b      	sub	sp, #44	; 0x2c
   11388:	4604      	mov	r4, r0
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
   1138a:	4628      	mov	r0, r5
	param.message.topic.qos = qos;
   1138c:	f88d 3018 	strb.w	r3, [sp, #24]
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
   11390:	9504      	str	r5, [sp, #16]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
   11392:	f015 fc41 	bl	26c18 <strlen>
	param.message.payload.data = data;
	param.message.payload.len = len;
   11396:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	param.message.payload.data = data;
   1139a:	9407      	str	r4, [sp, #28]
	param.message.payload.len = len;
   1139c:	9308      	str	r3, [sp, #32]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
   1139e:	9005      	str	r0, [sp, #20]
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   113a0:	f003 f84a 	bl	14438 <z_timer_cycle_get_32>
	param.message_id = k_cycle_get_32();
	param.dup_flag = 0;
   113a4:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   113a8:	4c11      	ldr	r4, [pc, #68]	; (113f0 <data_publish.constprop.0+0x70>)
   113aa:	f023 0303 	bic.w	r3, r3, #3
   113ae:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   113b2:	4b10      	ldr	r3, [pc, #64]	; (113f4 <data_publish.constprop.0+0x74>)
	param.message_id = k_cycle_get_32();
   113b4:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
	param.retain_flag = 0;

	//LOG_INF("Publishing: %s", log_strdup(data));
	LOG_DBG("to topic: %s len: %u",
   113b8:	4628      	mov	r0, r5
   113ba:	1ae4      	subs	r4, r4, r3
   113bc:	f001 fdd2 	bl	12f64 <log_strdup>
   113c0:	9003      	str	r0, [sp, #12]
   113c2:	4628      	mov	r0, r5
   113c4:	f015 fc28 	bl	26c18 <strlen>
   113c8:	08e4      	lsrs	r4, r4, #3
   113ca:	01a4      	lsls	r4, r4, #6
   113cc:	f044 0404 	orr.w	r4, r4, #4
   113d0:	4603      	mov	r3, r0
   113d2:	9a03      	ldr	r2, [sp, #12]
   113d4:	4908      	ldr	r1, [pc, #32]	; (113f8 <data_publish.constprop.0+0x78>)
   113d6:	4809      	ldr	r0, [pc, #36]	; (113fc <data_publish.constprop.0+0x7c>)
   113d8:	f8ad 4000 	strh.w	r4, [sp]
   113dc:	f01b fab5 	bl	2c94a <log_3>
		log_strdup(CONFIG_MQTT_PUB_TOPIC),
		(unsigned int)strlen(CONFIG_MQTT_PUB_TOPIC));

	return mqtt_publish(c, &param);
   113e0:	a904      	add	r1, sp, #16
   113e2:	4807      	ldr	r0, [pc, #28]	; (11400 <data_publish.constprop.0+0x80>)
   113e4:	f01c fa54 	bl	2d890 <mqtt_publish>
}
   113e8:	b00b      	add	sp, #44	; 0x2c
   113ea:	bd30      	pop	{r4, r5, pc}
   113ec:	0002fcc4 	.word	0x0002fcc4
   113f0:	0002f064 	.word	0x0002f064
   113f4:	0002eff4 	.word	0x0002eff4
   113f8:	0003036e 	.word	0x0003036e
   113fc:	0002fcdf 	.word	0x0002fcdf
   11400:	20021444 	.word	0x20021444

00011404 <k_work_submit_to_queue.constprop.0>:
 * @param work_q Address of workqueue.
 * @param work Address of work item.
 *
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
   11404:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11406:	f100 0308 	add.w	r3, r0, #8
   1140a:	e8d3 2fef 	ldaex	r2, [r3]
   1140e:	f042 0001 	orr.w	r0, r2, #1
   11412:	e8c3 0fec 	stlex	ip, r0, [r3]
   11416:	f1bc 0f00 	cmp.w	ip, #0
   1141a:	d1f6      	bne.n	1140a <k_work_submit_to_queue.constprop.0+0x6>
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1141c:	07d3      	lsls	r3, r2, #31
   1141e:	d402      	bmi.n	11426 <k_work_submit_to_queue.constprop.0+0x22>
		k_queue_append(&work_q->queue, work);
   11420:	4801      	ldr	r0, [pc, #4]	; (11428 <k_work_submit_to_queue.constprop.0+0x24>)
   11422:	f01d baca 	b.w	2e9ba <k_queue_append>
	}
}
   11426:	4770      	bx	lr
   11428:	20020cd8 	.word	0x20020cd8

0001142c <button_handler>:
*  Can be used to simulate alarm events.
*/

static void button_handler(uint32_t button_states, uint32_t has_changed)
{
	if (has_changed & button_states & DK_BTN1_MSK) {
   1142c:	4008      	ands	r0, r1
{
   1142e:	b508      	push	{r3, lr}
	if (has_changed & button_states & DK_BTN1_MSK) {
   11430:	07c3      	lsls	r3, r0, #31
   11432:	d50f      	bpl.n	11454 <button_handler+0x28>
   11434:	4b08      	ldr	r3, [pc, #32]	; (11458 <button_handler+0x2c>)
   11436:	4a09      	ldr	r2, [pc, #36]	; (1145c <button_handler+0x30>)
		LOG_DBG("DEV_DBG: button 1 pressed");
   11438:	4809      	ldr	r0, [pc, #36]	; (11460 <button_handler+0x34>)
   1143a:	1ad2      	subs	r2, r2, r3
   1143c:	08d2      	lsrs	r2, r2, #3
   1143e:	0192      	lsls	r2, r2, #6
   11440:	4908      	ldr	r1, [pc, #32]	; (11464 <button_handler+0x38>)
   11442:	f042 0204 	orr.w	r2, r2, #4
   11446:	f01b fa50 	bl	2c8ea <log_1>
	else if (has_changed & button_states & DK_BTN2_MSK) {
	
	}

	return;
}
   1144a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit_to_queue(&app_work_q, &alarm_work);
   1144e:	4806      	ldr	r0, [pc, #24]	; (11468 <button_handler+0x3c>)
   11450:	f7ff bfd8 	b.w	11404 <k_work_submit_to_queue.constprop.0>
}
   11454:	bd08      	pop	{r3, pc}
   11456:	bf00      	nop
   11458:	0002eff4 	.word	0x0002eff4
   1145c:	0002f064 	.word	0x0002f064
   11460:	0002fcf8 	.word	0x0002fcf8
   11464:	0003038c 	.word	0x0003038c
   11468:	20021438 	.word	0x20021438

0001146c <app_timer_handler>:
	}
}

/* @brief triggers every minute. Publish work if one period has passed */ 
void app_timer_handler(struct k_timer *dummy)
{
   1146c:	b510      	push	{r4, lr}
	static uint32_t minutes;

	minutes++;
   1146e:	4c09      	ldr	r4, [pc, #36]	; (11494 <app_timer_handler+0x28>)
   11470:	6822      	ldr	r2, [r4, #0]
   11472:	3201      	adds	r2, #1
	/* This shall match the PSM interval*/
	if (minutes % TRANSMISSION_INTERVAL == 0) {
   11474:	07d3      	lsls	r3, r2, #31
	minutes++;
   11476:	6022      	str	r2, [r4, #0]
	if (minutes % TRANSMISSION_INTERVAL == 0) {
   11478:	d405      	bmi.n	11486 <app_timer_handler+0x1a>
		printk("Timer: fired sample interval\n");
   1147a:	4807      	ldr	r0, [pc, #28]	; (11498 <app_timer_handler+0x2c>)
   1147c:	f01a ffd9 	bl	2c432 <printk>
		k_work_submit_to_queue(&app_work_q, &periodic_work);
   11480:	4806      	ldr	r0, [pc, #24]	; (1149c <app_timer_handler+0x30>)
   11482:	f7ff ffbf 	bl	11404 <k_work_submit_to_queue.constprop.0>
	}
	printk("Elapsed time: %d\n", minutes);
   11486:	6821      	ldr	r1, [r4, #0]
   11488:	4805      	ldr	r0, [pc, #20]	; (114a0 <app_timer_handler+0x34>)
}
   1148a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Elapsed time: %d\n", minutes);
   1148e:	f01a bfd0 	b.w	2c432 <printk>
   11492:	bf00      	nop
   11494:	200214b0 	.word	0x200214b0
   11498:	0002fd16 	.word	0x0002fd16
   1149c:	200214b4 	.word	0x200214b4
   114a0:	0002fd34 	.word	0x0002fd34

000114a4 <date_time_handler>:

	k_work_init(&alarm_work, publish_alarm);
	k_work_init(&periodic_work, publish_samples);
}

void date_time_handler(const struct date_time_evt *evt) {
   114a4:	b508      	push	{r3, lr}
   114a6:	7803      	ldrb	r3, [r0, #0]
   114a8:	2b03      	cmp	r3, #3
   114aa:	d831      	bhi.n	11510 <date_time_handler+0x6c>
   114ac:	e8df f003 	tbb	[pc, r3]
   114b0:	261c1202 	.word	0x261c1202
   114b4:	4a17      	ldr	r2, [pc, #92]	; (11514 <date_time_handler+0x70>)
   114b6:	4b18      	ldr	r3, [pc, #96]	; (11518 <date_time_handler+0x74>)

	switch (evt->type)
	{
	case DATE_TIME_OBTAINED_MODEM:
		LOG_DBG("DATE_TIME: got time from modem.\n");
   114b8:	4918      	ldr	r1, [pc, #96]	; (1151c <date_time_handler+0x78>)
   114ba:	1ad2      	subs	r2, r2, r3
   114bc:	08d2      	lsrs	r2, r2, #3
   114be:	0192      	lsls	r2, r2, #6
   114c0:	4817      	ldr	r0, [pc, #92]	; (11520 <date_time_handler+0x7c>)
   114c2:	f042 0204 	orr.w	r2, r2, #4
	case DATE_TIME_OBTAINED_EXT:
		LOG_DBG("DATE_TIME: got time from external.\n");
		k_sem_give(&date_time_ok);
		break;
	case DATE_TIME_NOT_OBTAINED:
		LOG_DBG("DATE_TIME: failed to get time.\n");
   114c6:	f01b fa10 	bl	2c8ea <log_1>
		k_sem_give(&date_time_ok);
		break;
	default:
		break;
	}
}
   114ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   114ce:	4815      	ldr	r0, [pc, #84]	; (11524 <date_time_handler+0x80>)
   114d0:	f013 b9f8 	b.w	248c4 <z_impl_k_sem_give>
   114d4:	4a0f      	ldr	r2, [pc, #60]	; (11514 <date_time_handler+0x70>)
   114d6:	4b10      	ldr	r3, [pc, #64]	; (11518 <date_time_handler+0x74>)
		LOG_DBG("DATE_TIME: got time from NTP.\n");
   114d8:	4910      	ldr	r1, [pc, #64]	; (1151c <date_time_handler+0x78>)
   114da:	1ad2      	subs	r2, r2, r3
   114dc:	08d2      	lsrs	r2, r2, #3
   114de:	0192      	lsls	r2, r2, #6
   114e0:	4811      	ldr	r0, [pc, #68]	; (11528 <date_time_handler+0x84>)
   114e2:	f042 0204 	orr.w	r2, r2, #4
   114e6:	e7ee      	b.n	114c6 <date_time_handler+0x22>
   114e8:	4a0a      	ldr	r2, [pc, #40]	; (11514 <date_time_handler+0x70>)
   114ea:	4b0b      	ldr	r3, [pc, #44]	; (11518 <date_time_handler+0x74>)
		LOG_DBG("DATE_TIME: got time from external.\n");
   114ec:	490b      	ldr	r1, [pc, #44]	; (1151c <date_time_handler+0x78>)
   114ee:	1ad2      	subs	r2, r2, r3
   114f0:	08d2      	lsrs	r2, r2, #3
   114f2:	0192      	lsls	r2, r2, #6
   114f4:	480d      	ldr	r0, [pc, #52]	; (1152c <date_time_handler+0x88>)
   114f6:	f042 0204 	orr.w	r2, r2, #4
   114fa:	e7e4      	b.n	114c6 <date_time_handler+0x22>
   114fc:	4a05      	ldr	r2, [pc, #20]	; (11514 <date_time_handler+0x70>)
   114fe:	4b06      	ldr	r3, [pc, #24]	; (11518 <date_time_handler+0x74>)
		LOG_DBG("DATE_TIME: failed to get time.\n");
   11500:	4906      	ldr	r1, [pc, #24]	; (1151c <date_time_handler+0x78>)
   11502:	1ad2      	subs	r2, r2, r3
   11504:	08d2      	lsrs	r2, r2, #3
   11506:	0192      	lsls	r2, r2, #6
   11508:	4809      	ldr	r0, [pc, #36]	; (11530 <date_time_handler+0x8c>)
   1150a:	f042 0204 	orr.w	r2, r2, #4
   1150e:	e7da      	b.n	114c6 <date_time_handler+0x22>
}
   11510:	bd08      	pop	{r3, pc}
   11512:	bf00      	nop
   11514:	0002f064 	.word	0x0002f064
   11518:	0002eff4 	.word	0x0002eff4
   1151c:	000303cb 	.word	0x000303cb
   11520:	0002fd46 	.word	0x0002fd46
   11524:	20020c24 	.word	0x20020c24
   11528:	0002fd6b 	.word	0x0002fd6b
   1152c:	0002fd8e 	.word	0x0002fd8e
   11530:	0002fdb6 	.word	0x0002fdb6

00011534 <mqtt_evt_handler>:
{
   11534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11538:	b089      	sub	sp, #36	; 0x24
   1153a:	4b74      	ldr	r3, [pc, #464]	; (1170c <mqtt_evt_handler+0x1d8>)
   1153c:	4c74      	ldr	r4, [pc, #464]	; (11710 <mqtt_evt_handler+0x1dc>)
   1153e:	4606      	mov	r6, r0
   11540:	1ae4      	subs	r4, r4, r3
   11542:	780b      	ldrb	r3, [r1, #0]
   11544:	08e4      	lsrs	r4, r4, #3
   11546:	460d      	mov	r5, r1
   11548:	af02      	add	r7, sp, #8
   1154a:	01a4      	lsls	r4, r4, #6
   1154c:	2b07      	cmp	r3, #7
   1154e:	f200 80cf 	bhi.w	116f0 <mqtt_evt_handler+0x1bc>
   11552:	e8df f003 	tbb	[pc, r3]
   11556:	1e04      	.short	0x1e04
   11558:	cdcda52c 	.word	0xcdcda52c
   1155c:	bacd      	.short	0xbacd
		if (evt->result != 0) {
   1155e:	69c9      	ldr	r1, [r1, #28]
   11560:	b129      	cbz	r1, 1156e <mqtt_evt_handler+0x3a>
			LOG_ERR("MQTT connect failed %d", evt->result);
   11562:	486c      	ldr	r0, [pc, #432]	; (11714 <mqtt_evt_handler+0x1e0>)
   11564:	f044 0201 	orr.w	r2, r4, #1
				LOG_ERR("Could not app_disconnect: %d", err);
   11568:	f01b f9bf 	bl	2c8ea <log_1>
   1156c:	e00d      	b.n	1158a <mqtt_evt_handler+0x56>
   1156e:	486a      	ldr	r0, [pc, #424]	; (11718 <mqtt_evt_handler+0x1e4>)
   11570:	f013 f9a8 	bl	248c4 <z_impl_k_sem_give>
		LOG_INF("[%s:%d] MQTT client connected!", log_strdup(__func__), __LINE__);
   11574:	4869      	ldr	r0, [pc, #420]	; (1171c <mqtt_evt_handler+0x1e8>)
   11576:	f001 fcf5 	bl	12f64 <log_strdup>
   1157a:	f044 0403 	orr.w	r4, r4, #3
   1157e:	4601      	mov	r1, r0
   11580:	4623      	mov	r3, r4
   11582:	22d4      	movs	r2, #212	; 0xd4
   11584:	4866      	ldr	r0, [pc, #408]	; (11720 <mqtt_evt_handler+0x1ec>)
   11586:	f01b f9c7 	bl	2c918 <log_2>
}
   1158a:	371c      	adds	r7, #28
   1158c:	46bd      	mov	sp, r7
   1158e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("[%s:%d] MQTT client disconnected %d", log_strdup(__func__),
   11592:	4862      	ldr	r0, [pc, #392]	; (1171c <mqtt_evt_handler+0x1e8>)
   11594:	f001 fce6 	bl	12f64 <log_strdup>
   11598:	22da      	movs	r2, #218	; 0xda
   1159a:	f044 0403 	orr.w	r4, r4, #3
   1159e:	f8ad 4000 	strh.w	r4, [sp]
   115a2:	4601      	mov	r1, r0
   115a4:	69eb      	ldr	r3, [r5, #28]
   115a6:	485f      	ldr	r0, [pc, #380]	; (11724 <mqtt_evt_handler+0x1f0>)
		LOG_INF("[%s:%d] default: %d", log_strdup(__func__), __LINE__,
   115a8:	f01b f9cf 	bl	2c94a <log_3>
}
   115ac:	e7ed      	b.n	1158a <mqtt_evt_handler+0x56>
		LOG_INF("[%s:%d] MQTT PUBLISH result=%d len=%d", log_strdup(__func__),
   115ae:	485b      	ldr	r0, [pc, #364]	; (1171c <mqtt_evt_handler+0x1e8>)
   115b0:	f001 fcd8 	bl	12f64 <log_strdup>
   115b4:	23e2      	movs	r3, #226	; 0xe2
   115b6:	60fb      	str	r3, [r7, #12]
   115b8:	69eb      	ldr	r3, [r5, #28]
   115ba:	f044 0803 	orr.w	r8, r4, #3
   115be:	613b      	str	r3, [r7, #16]
   115c0:	696b      	ldr	r3, [r5, #20]
   115c2:	2204      	movs	r2, #4
   115c4:	60b8      	str	r0, [r7, #8]
   115c6:	617b      	str	r3, [r7, #20]
   115c8:	4857      	ldr	r0, [pc, #348]	; (11728 <mqtt_evt_handler+0x1f4>)
   115ca:	4643      	mov	r3, r8
   115cc:	f107 0108 	add.w	r1, r7, #8
   115d0:	f01b f9da 	bl	2c988 <log_n>
		err = publish_get_payload(c, p->message.payload.len);
   115d4:	696a      	ldr	r2, [r5, #20]
	uint8_t *end = buf + length;
   115d6:	4b55      	ldr	r3, [pc, #340]	; (1172c <mqtt_evt_handler+0x1f8>)
	if (length > sizeof(payload_buf)) {
   115d8:	2a80      	cmp	r2, #128	; 0x80
	uint8_t *end = buf + length;
   115da:	eb03 0802 	add.w	r8, r3, r2
	if (length > sizeof(payload_buf)) {
   115de:	d85c      	bhi.n	1169a <mqtt_evt_handler+0x166>
	uint8_t *buf = payload_buf;
   115e0:	469a      	mov	sl, r3
			LOG_ERR("mqtt_read_publish_payload: EAGAIN");
   115e2:	f8df 917c 	ldr.w	r9, [pc, #380]	; 11760 <mqtt_evt_handler+0x22c>
	return z_impl_zsock_poll(fds, nfds, timeout);
   115e6:	f8df b17c 	ldr.w	fp, [pc, #380]	; 11764 <mqtt_evt_handler+0x230>
	while (buf < end) {
   115ea:	45d0      	cmp	r8, sl
   115ec:	d820      	bhi.n	11630 <mqtt_evt_handler+0xfc>
			data_print("Received: ", payload_buf,
   115ee:	696e      	ldr	r6, [r5, #20]
{
   115f0:	46e8      	mov	r8, sp
	char buf[len + 1];
   115f2:	f106 0308 	add.w	r3, r6, #8
   115f6:	f023 0307 	bic.w	r3, r3, #7
   115fa:	ebad 0d03 	sub.w	sp, sp, r3
   115fe:	ad02      	add	r5, sp, #8
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11600:	4632      	mov	r2, r6
   11602:	494a      	ldr	r1, [pc, #296]	; (1172c <mqtt_evt_handler+0x1f8>)
   11604:	4628      	mov	r0, r5
   11606:	f7fb faa1 	bl	cb4c <memcpy>
	buf[len] = 0;
   1160a:	2300      	movs	r3, #0
	LOG_INF("%s%s", log_strdup(prefix), log_strdup(buf));
   1160c:	4848      	ldr	r0, [pc, #288]	; (11730 <mqtt_evt_handler+0x1fc>)
	buf[len] = 0;
   1160e:	55ab      	strb	r3, [r5, r6]
	LOG_INF("%s%s", log_strdup(prefix), log_strdup(buf));
   11610:	f001 fca8 	bl	12f64 <log_strdup>
   11614:	6078      	str	r0, [r7, #4]
   11616:	4628      	mov	r0, r5
   11618:	f001 fca4 	bl	12f64 <log_strdup>
   1161c:	f044 0403 	orr.w	r4, r4, #3
   11620:	4602      	mov	r2, r0
   11622:	4623      	mov	r3, r4
   11624:	6879      	ldr	r1, [r7, #4]
   11626:	4843      	ldr	r0, [pc, #268]	; (11734 <mqtt_evt_handler+0x200>)
   11628:	f01b f976 	bl	2c918 <log_2>
   1162c:	46c5      	mov	sp, r8
}
   1162e:	e7ac      	b.n	1158a <mqtt_evt_handler+0x56>
		int ret = mqtt_read_publish_payload(c, buf, end - buf);
   11630:	4651      	mov	r1, sl
   11632:	4630      	mov	r0, r6
   11634:	eba8 020a 	sub.w	r2, r8, sl
   11638:	f01c fa36 	bl	2daa8 <mqtt_read_publish_payload>
		if (ret < 0) {
   1163c:	1e01      	subs	r1, r0, #0
   1163e:	da29      	bge.n	11694 <mqtt_evt_handler+0x160>
			if (ret != -EAGAIN) {
   11640:	f111 0f0b 	cmn.w	r1, #11
   11644:	d10d      	bne.n	11662 <mqtt_evt_handler+0x12e>
			LOG_ERR("mqtt_read_publish_payload: EAGAIN");
   11646:	4648      	mov	r0, r9
   11648:	f044 0101 	orr.w	r1, r4, #1
   1164c:	f01b f93e 	bl	2c8cc <log_0>
   11650:	2101      	movs	r1, #1
   11652:	465a      	mov	r2, fp
   11654:	4838      	ldr	r0, [pc, #224]	; (11738 <mqtt_evt_handler+0x204>)
   11656:	f002 fa05 	bl	13a64 <z_impl_zsock_poll>
			if (err > 0 && (fds.revents & POLLIN) == POLLIN) {
   1165a:	2800      	cmp	r0, #0
   1165c:	dc15      	bgt.n	1168a <mqtt_evt_handler+0x156>
				return -EIO;
   1165e:	f06f 0104 	mvn.w	r1, #4
			LOG_ERR("mqtt_read_publish_payload: Failed! %d", err);
   11662:	f044 0501 	orr.w	r5, r4, #1
   11666:	462a      	mov	r2, r5
   11668:	4834      	ldr	r0, [pc, #208]	; (1173c <mqtt_evt_handler+0x208>)
   1166a:	f01b f93e 	bl	2c8ea <log_1>
			LOG_INF("Disconnecting MQTT client...");
   1166e:	f044 0103 	orr.w	r1, r4, #3
   11672:	4833      	ldr	r0, [pc, #204]	; (11740 <mqtt_evt_handler+0x20c>)
   11674:	f01b f92a 	bl	2c8cc <log_0>
			err = mqtt_disconnect(c);
   11678:	4630      	mov	r0, r6
   1167a:	f01c f94e 	bl	2d91a <mqtt_disconnect>
			if (err) {
   1167e:	4601      	mov	r1, r0
   11680:	2800      	cmp	r0, #0
   11682:	d082      	beq.n	1158a <mqtt_evt_handler+0x56>
				LOG_ERR("Could not app_disconnect: %d", err);
   11684:	462a      	mov	r2, r5
   11686:	482f      	ldr	r0, [pc, #188]	; (11744 <mqtt_evt_handler+0x210>)
   11688:	e76e      	b.n	11568 <mqtt_evt_handler+0x34>
			if (err > 0 && (fds.revents & POLLIN) == POLLIN) {
   1168a:	4b2b      	ldr	r3, [pc, #172]	; (11738 <mqtt_evt_handler+0x204>)
   1168c:	88da      	ldrh	r2, [r3, #6]
   1168e:	07d3      	lsls	r3, r2, #31
   11690:	d4ab      	bmi.n	115ea <mqtt_evt_handler+0xb6>
   11692:	e7e4      	b.n	1165e <mqtt_evt_handler+0x12a>
		if (ret == 0) {
   11694:	d0e3      	beq.n	1165e <mqtt_evt_handler+0x12a>
		buf += ret;
   11696:	448a      	add	sl, r1
   11698:	e7a7      	b.n	115ea <mqtt_evt_handler+0xb6>
		return -EMSGSIZE;
   1169a:	f06f 0179 	mvn.w	r1, #121	; 0x79
   1169e:	e7e0      	b.n	11662 <mqtt_evt_handler+0x12e>
		if (evt->result != 0) {
   116a0:	69c9      	ldr	r1, [r1, #28]
   116a2:	b119      	cbz	r1, 116ac <mqtt_evt_handler+0x178>
			LOG_ERR("MQTT PUBACK error %d", evt->result);
   116a4:	4828      	ldr	r0, [pc, #160]	; (11748 <mqtt_evt_handler+0x214>)
   116a6:	f044 0201 	orr.w	r2, r4, #1
   116aa:	e75d      	b.n	11568 <mqtt_evt_handler+0x34>
   116ac:	4827      	ldr	r0, [pc, #156]	; (1174c <mqtt_evt_handler+0x218>)
   116ae:	f013 f909 	bl	248c4 <z_impl_k_sem_give>
		LOG_INF("[%s:%d] PUBACK packet id: %u", log_strdup(__func__), __LINE__,
   116b2:	481a      	ldr	r0, [pc, #104]	; (1171c <mqtt_evt_handler+0x1e8>)
   116b4:	f001 fc56 	bl	12f64 <log_strdup>
   116b8:	f044 0403 	orr.w	r4, r4, #3
   116bc:	4601      	mov	r1, r0
   116be:	88ab      	ldrh	r3, [r5, #4]
   116c0:	22fa      	movs	r2, #250	; 0xfa
   116c2:	4823      	ldr	r0, [pc, #140]	; (11750 <mqtt_evt_handler+0x21c>)
   116c4:	f8ad 4000 	strh.w	r4, [sp]
   116c8:	e76e      	b.n	115a8 <mqtt_evt_handler+0x74>
		if (evt->result != 0) {
   116ca:	69c9      	ldr	r1, [r1, #28]
   116cc:	b119      	cbz	r1, 116d6 <mqtt_evt_handler+0x1a2>
			LOG_ERR("MQTT SUBACK error %d", evt->result);
   116ce:	4821      	ldr	r0, [pc, #132]	; (11754 <mqtt_evt_handler+0x220>)
   116d0:	f044 0201 	orr.w	r2, r4, #1
   116d4:	e748      	b.n	11568 <mqtt_evt_handler+0x34>
		LOG_INF("[%s:%d] SUBACK packet id: %u", log_strdup(__func__), __LINE__,
   116d6:	4811      	ldr	r0, [pc, #68]	; (1171c <mqtt_evt_handler+0x1e8>)
   116d8:	f001 fc44 	bl	12f64 <log_strdup>
   116dc:	f044 0403 	orr.w	r4, r4, #3
   116e0:	4601      	mov	r1, r0
   116e2:	88ab      	ldrh	r3, [r5, #4]
   116e4:	f44f 7282 	mov.w	r2, #260	; 0x104
   116e8:	481b      	ldr	r0, [pc, #108]	; (11758 <mqtt_evt_handler+0x224>)
   116ea:	f8ad 4000 	strh.w	r4, [sp]
   116ee:	e75b      	b.n	115a8 <mqtt_evt_handler+0x74>
		LOG_INF("[%s:%d] default: %d", log_strdup(__func__), __LINE__,
   116f0:	480a      	ldr	r0, [pc, #40]	; (1171c <mqtt_evt_handler+0x1e8>)
   116f2:	f001 fc37 	bl	12f64 <log_strdup>
   116f6:	f044 0403 	orr.w	r4, r4, #3
   116fa:	4601      	mov	r1, r0
   116fc:	782b      	ldrb	r3, [r5, #0]
   116fe:	f240 1209 	movw	r2, #265	; 0x109
   11702:	4816      	ldr	r0, [pc, #88]	; (1175c <mqtt_evt_handler+0x228>)
   11704:	f8ad 4000 	strh.w	r4, [sp]
   11708:	e74e      	b.n	115a8 <mqtt_evt_handler+0x74>
   1170a:	bf00      	nop
   1170c:	0002eff4 	.word	0x0002eff4
   11710:	0002f064 	.word	0x0002f064
   11714:	0002fdda 	.word	0x0002fdda
   11718:	20020c6c 	.word	0x20020c6c
   1171c:	0003037b 	.word	0x0003037b
   11720:	0002fdf1 	.word	0x0002fdf1
   11724:	0002fe10 	.word	0x0002fe10
   11728:	0002fe34 	.word	0x0002fe34
   1172c:	200242cf 	.word	0x200242cf
   11730:	0002ff54 	.word	0x0002ff54
   11734:	0002ff5f 	.word	0x0002ff5f
   11738:	200214a8 	.word	0x200214a8
   1173c:	0002fe7c 	.word	0x0002fe7c
   11740:	0002fea2 	.word	0x0002fea2
   11744:	0002febf 	.word	0x0002febf
   11748:	0002fedc 	.word	0x0002fedc
   1174c:	20020c84 	.word	0x20020c84
   11750:	0002fef1 	.word	0x0002fef1
   11754:	0002ff0e 	.word	0x0002ff0e
   11758:	0002ff23 	.word	0x0002ff23
   1175c:	0002ff40 	.word	0x0002ff40
   11760:	0002fe5a 	.word	0x0002fe5a
   11764:	006ddd00 	.word	0x006ddd00

00011768 <bsd_recoverable_error_handler>:
   11768:	4a05      	ldr	r2, [pc, #20]	; (11780 <bsd_recoverable_error_handler+0x18>)
   1176a:	4b06      	ldr	r3, [pc, #24]	; (11784 <bsd_recoverable_error_handler+0x1c>)
{
   1176c:	4601      	mov	r1, r0
   1176e:	1ad2      	subs	r2, r2, r3
   11770:	08d2      	lsrs	r2, r2, #3
	LOG_ERR("bsdlib recoverable error: %u", (unsigned int)err);
   11772:	0192      	lsls	r2, r2, #6
   11774:	4804      	ldr	r0, [pc, #16]	; (11788 <bsd_recoverable_error_handler+0x20>)
   11776:	f042 0201 	orr.w	r2, r2, #1
   1177a:	f01b b8b6 	b.w	2c8ea <log_1>
   1177e:	bf00      	nop
   11780:	0002f064 	.word	0x0002f064
   11784:	0002eff4 	.word	0x0002eff4
   11788:	0002ff64 	.word	0x0002ff64

0001178c <timer_init>:
{
   1178c:	b507      	push	{r0, r1, r2, lr}
   1178e:	2300      	movs	r3, #0
	compiler_barrier();
   11790:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
	z_impl_k_timer_start(timer, duration, period);
   11794:	4803      	ldr	r0, [pc, #12]	; (117a4 <timer_init+0x18>)
   11796:	e9cd 2300 	strd	r2, r3, [sp]
   1179a:	f013 fed1 	bl	25540 <z_impl_k_timer_start>
}
   1179e:	b003      	add	sp, #12
   117a0:	f85d fb04 	ldr.w	pc, [sp], #4
   117a4:	20020b18 	.word	0x20020b18

000117a8 <app_connect>:
int app_connect(void) {
   117a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   117ac:	4b2d      	ldr	r3, [pc, #180]	; (11864 <app_connect+0xbc>)
   117ae:	4c2e      	ldr	r4, [pc, #184]	; (11868 <app_connect+0xc0>)
   117b0:	b0a0      	sub	sp, #128	; 0x80
   117b2:	1ae4      	subs	r4, r4, r3
   117b4:	08e4      	lsrs	r4, r4, #3
	LOG_INF("Connecting");
   117b6:	01a4      	lsls	r4, r4, #6
   117b8:	482c      	ldr	r0, [pc, #176]	; (1186c <app_connect+0xc4>)
   117ba:	f044 0103 	orr.w	r1, r4, #3
   117be:	f01b f885 	bl	2c8cc <log_0>
	err = lte_lc_connect();
   117c2:	f01d f879 	bl	2e8b8 <lte_lc_connect>
	if(err) {
   117c6:	b120      	cbz	r0, 117d2 <app_connect+0x2a>
		LOG_ERR("LTE: Connection failed");
   117c8:	4829      	ldr	r0, [pc, #164]	; (11870 <app_connect+0xc8>)
   117ca:	f044 0101 	orr.w	r1, r4, #1
   117ce:	f01b f87d 	bl	2c8cc <log_0>
	err = mqtt_connect(&client);
   117d2:	4e28      	ldr	r6, [pc, #160]	; (11874 <app_connect+0xcc>)
	LOG_INF("LTE: Link connected");
   117d4:	f044 0703 	orr.w	r7, r4, #3
   117d8:	4639      	mov	r1, r7
   117da:	4827      	ldr	r0, [pc, #156]	; (11878 <app_connect+0xd0>)
   117dc:	f01b f876 	bl	2c8cc <log_0>
	err = mqtt_connect(&client);
   117e0:	4630      	mov	r0, r6
   117e2:	f01c f812 	bl	2d80a <mqtt_connect>
	if (err != 0) {
   117e6:	4605      	mov	r5, r0
   117e8:	b130      	cbz	r0, 117f8 <app_connect+0x50>
		LOG_ERR("mqtt_connect %d", err);
   117ea:	4601      	mov	r1, r0
   117ec:	4823      	ldr	r0, [pc, #140]	; (1187c <app_connect+0xd4>)
   117ee:	f044 0201 	orr.w	r2, r4, #1
	LOG_INF("RSRP: %s", log_strdup(rsrp_res));
   117f2:	f01b f87a 	bl	2c8ea <log_1>
	return 0;
   117f6:	e00d      	b.n	11814 <app_connect+0x6c>
	if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {
   117f8:	f896 8024 	ldrb.w	r8, [r6, #36]	; 0x24
   117fc:	f1b8 0f00 	cmp.w	r8, #0
   11800:	d00c      	beq.n	1181c <app_connect+0x74>
		LOG_ERR("fds_init %d", err);
   11802:	f06f 0185 	mvn.w	r1, #133	; 0x85
   11806:	481e      	ldr	r0, [pc, #120]	; (11880 <app_connect+0xd8>)
   11808:	f044 0201 	orr.w	r2, r4, #1
   1180c:	f01b f86d 	bl	2c8ea <log_1>
		return -ENOTSUP;
   11810:	f06f 0585 	mvn.w	r5, #133	; 0x85
}
   11814:	4628      	mov	r0, r5
   11816:	b020      	add	sp, #128	; 0x80
   11818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		fds.fd = c->transport.tcp.sock;
   1181c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1181e:	4a19      	ldr	r2, [pc, #100]	; (11884 <app_connect+0xdc>)
	app_connected = true;
   11820:	4e19      	ldr	r6, [pc, #100]	; (11888 <app_connect+0xe0>)
		fds.fd = c->transport.tcp.sock;
   11822:	6013      	str	r3, [r2, #0]
	fds.events = POLLIN;
   11824:	2301      	movs	r3, #1
   11826:	8093      	strh	r3, [r2, #4]
	app_connected = true;
   11828:	7033      	strb	r3, [r6, #0]
	return z_impl_k_sem_take(sem, timeout);
   1182a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1182e:	2300      	movs	r3, #0
   11830:	4816      	ldr	r0, [pc, #88]	; (1188c <app_connect+0xe4>)
   11832:	f013 f88b 	bl	2494c <z_impl_k_sem_take>
	if(err) {
   11836:	4605      	mov	r5, r0
   11838:	b148      	cbz	r0, 1184e <app_connect+0xa6>
		LOG_ERR("MQTT connection timed out\n");
   1183a:	4815      	ldr	r0, [pc, #84]	; (11890 <app_connect+0xe8>)
   1183c:	f044 0101 	orr.w	r1, r4, #1
   11840:	f01b f844 	bl	2c8cc <log_0>
		return -ENOTCONN;
   11844:	f06f 057f 	mvn.w	r5, #127	; 0x7f
		app_connected = false;
   11848:	f886 8000 	strb.w	r8, [r6]
		return -ENOTCONN;
   1184c:	e7e2      	b.n	11814 <app_connect+0x6c>
	modem_info_string_get(MODEM_INFO_RSRP, rsrp_res, sizeof(rsrp_res));
   1184e:	2280      	movs	r2, #128	; 0x80
   11850:	4669      	mov	r1, sp
   11852:	f007 fcc1 	bl	191d8 <modem_info_string_get>
	LOG_INF("RSRP: %s", log_strdup(rsrp_res));
   11856:	4668      	mov	r0, sp
   11858:	f001 fb84 	bl	12f64 <log_strdup>
   1185c:	463a      	mov	r2, r7
   1185e:	4601      	mov	r1, r0
   11860:	480c      	ldr	r0, [pc, #48]	; (11894 <app_connect+0xec>)
   11862:	e7c6      	b.n	117f2 <app_connect+0x4a>
   11864:	0002eff4 	.word	0x0002eff4
   11868:	0002f064 	.word	0x0002f064
   1186c:	0002ff81 	.word	0x0002ff81
   11870:	0002ff8c 	.word	0x0002ff8c
   11874:	20021444 	.word	0x20021444
   11878:	0002ffa3 	.word	0x0002ffa3
   1187c:	0002ffb7 	.word	0x0002ffb7
   11880:	0002ffc7 	.word	0x0002ffc7
   11884:	200214a8 	.word	0x200214a8
   11888:	200242ce 	.word	0x200242ce
   1188c:	20020c6c 	.word	0x20020c6c
   11890:	0002ffd3 	.word	0x0002ffd3
   11894:	0002ffee 	.word	0x0002ffee

00011898 <app_disconnect>:
void app_disconnect(void) {
   11898:	b538      	push	{r3, r4, r5, lr}
   1189a:	4b1c      	ldr	r3, [pc, #112]	; (1190c <app_disconnect+0x74>)
   1189c:	4c1c      	ldr	r4, [pc, #112]	; (11910 <app_disconnect+0x78>)
	LOG_INF("Disconnecting");
   1189e:	481d      	ldr	r0, [pc, #116]	; (11914 <app_disconnect+0x7c>)
   118a0:	1ae4      	subs	r4, r4, r3
   118a2:	08e4      	lsrs	r4, r4, #3
   118a4:	01a4      	lsls	r4, r4, #6
   118a6:	f044 0503 	orr.w	r5, r4, #3
   118aa:	4629      	mov	r1, r5
   118ac:	f01b f80e 	bl	2c8cc <log_0>
	if(!app_connected) {
   118b0:	4b19      	ldr	r3, [pc, #100]	; (11918 <app_disconnect+0x80>)
   118b2:	781a      	ldrb	r2, [r3, #0]
   118b4:	b9d2      	cbnz	r2, 118ec <app_disconnect+0x54>
		LOG_INF("Aborting mqtt connection");
   118b6:	4819      	ldr	r0, [pc, #100]	; (1191c <app_disconnect+0x84>)
   118b8:	4629      	mov	r1, r5
   118ba:	f01b f807 	bl	2c8cc <log_0>
		mqtt_abort(&client);
   118be:	4818      	ldr	r0, [pc, #96]	; (11920 <app_disconnect+0x88>)
   118c0:	f01c f87f 	bl	2d9c2 <mqtt_abort>
	LOG_INF("MQTT: disconnected");
   118c4:	4817      	ldr	r0, [pc, #92]	; (11924 <app_disconnect+0x8c>)
   118c6:	f044 0103 	orr.w	r1, r4, #3
   118ca:	f01a ffff 	bl	2c8cc <log_0>
	err = lte_lc_offline();
   118ce:	f007 fa1d 	bl	18d0c <lte_lc_offline>
	if(err) {
   118d2:	b120      	cbz	r0, 118de <app_disconnect+0x46>
		LOG_ERR("LTE: Offline mode failed\n");
   118d4:	4814      	ldr	r0, [pc, #80]	; (11928 <app_disconnect+0x90>)
   118d6:	f044 0101 	orr.w	r1, r4, #1
   118da:	f01a fff7 	bl	2c8cc <log_0>
	LOG_INF("LTE: offline");
   118de:	f044 0103 	orr.w	r1, r4, #3
   118e2:	4812      	ldr	r0, [pc, #72]	; (1192c <app_disconnect+0x94>)
}
   118e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LOG_INF("LTE: offline");
   118e8:	f01a bff0 	b.w	2c8cc <log_0>
		app_connected = 0;
   118ec:	2200      	movs	r2, #0
		err = mqtt_disconnect(&client);
   118ee:	480c      	ldr	r0, [pc, #48]	; (11920 <app_disconnect+0x88>)
		app_connected = 0;
   118f0:	701a      	strb	r2, [r3, #0]
		err = mqtt_disconnect(&client);
   118f2:	f01c f812 	bl	2d91a <mqtt_disconnect>
		if (err != 0) {
   118f6:	4601      	mov	r1, r0
   118f8:	2800      	cmp	r0, #0
   118fa:	d0e3      	beq.n	118c4 <app_disconnect+0x2c>
			LOG_ERR("mqtt_disconnect %d", err);
   118fc:	f044 0201 	orr.w	r2, r4, #1
   11900:	480b      	ldr	r0, [pc, #44]	; (11930 <app_disconnect+0x98>)
}
   11902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			LOG_ERR("mqtt_disconnect %d", err);
   11906:	f01a bff0 	b.w	2c8ea <log_1>
   1190a:	bf00      	nop
   1190c:	0002eff4 	.word	0x0002eff4
   11910:	0002f064 	.word	0x0002f064
   11914:	0002fff7 	.word	0x0002fff7
   11918:	200242ce 	.word	0x200242ce
   1191c:	00030005 	.word	0x00030005
   11920:	20021444 	.word	0x20021444
   11924:	00030031 	.word	0x00030031
   11928:	00030044 	.word	0x00030044
   1192c:	0003005e 	.word	0x0003005e
   11930:	0003001e 	.word	0x0003001e

00011934 <init_work>:
	k_work_q_start(&app_work_q, app_stack_area, K_THREAD_STACK_SIZEOF(app_stack_area), WORK_PRIORITY);
   11934:	f44f 5280 	mov.w	r2, #4096	; 0x1000
void init_work(void) {
   11938:	b508      	push	{r3, lr}
	k_work_q_start(&app_work_q, app_stack_area, K_THREAD_STACK_SIZEOF(app_stack_area), WORK_PRIORITY);
   1193a:	4908      	ldr	r1, [pc, #32]	; (1195c <init_work+0x28>)
   1193c:	2305      	movs	r3, #5
   1193e:	4808      	ldr	r0, [pc, #32]	; (11960 <init_work+0x2c>)
   11940:	f013 fa06 	bl	24d50 <k_work_q_start>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   11944:	2300      	movs	r3, #0
   11946:	4a07      	ldr	r2, [pc, #28]	; (11964 <init_work+0x30>)
   11948:	4907      	ldr	r1, [pc, #28]	; (11968 <init_work+0x34>)
   1194a:	6013      	str	r3, [r2, #0]
   1194c:	e9c2 1301 	strd	r1, r3, [r2, #4]
   11950:	4a06      	ldr	r2, [pc, #24]	; (1196c <init_work+0x38>)
   11952:	4907      	ldr	r1, [pc, #28]	; (11970 <init_work+0x3c>)
   11954:	6013      	str	r3, [r2, #0]
   11956:	e9c2 1301 	strd	r1, r3, [r2, #4]
}
   1195a:	bd08      	pop	{r3, pc}
   1195c:	20026438 	.word	0x20026438
   11960:	20020cd8 	.word	0x20020cd8
   11964:	20021438 	.word	0x20021438
   11968:	00011b45 	.word	0x00011b45
   1196c:	200214b4 	.word	0x200214b4
   11970:	00011a91 	.word	0x00011a91

00011974 <create_message>:

void create_message(char* destination, enum app_msg_type type, uint8_t *data, size_t len, int64_t *timestamp) {
   11974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11978:	b087      	sub	sp, #28
   1197a:	af02      	add	r7, sp, #8
   1197c:	4680      	mov	r8, r0
   1197e:	4689      	mov	r9, r1
   11980:	4615      	mov	r5, r2
   11982:	461e      	mov	r6, r3

	cJSON *message;

	message = cJSON_CreateObject();
   11984:	f004 ff28 	bl	167d8 <cJSON_CreateObject>
   11988:	4604      	mov	r4, r0
	
	if(type == SENSOR_ALARM) {
   1198a:	f1b9 0f00 	cmp.w	r9, #0
   1198e:	d130      	bne.n	119f2 <create_message+0x7e>
		cJSON_AddStringToObject(message, "type", "alarm");
   11990:	4a19      	ldr	r2, [pc, #100]	; (119f8 <create_message+0x84>)
	} else {
		cJSON_AddStringToObject(message, "type", "periodic sample");
   11992:	491a      	ldr	r1, [pc, #104]	; (119fc <create_message+0x88>)
   11994:	f01c fac2 	bl	2df1c <cJSON_AddStringToObject>
	}

	char time_str[16];
	snprintf(time_str, 16, "%lld", *timestamp);
   11998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1199a:	2110      	movs	r1, #16
   1199c:	e9d3 2300 	ldrd	r2, r3, [r3]
   119a0:	4638      	mov	r0, r7
   119a2:	e9cd 2300 	strd	r2, r3, [sp]
   119a6:	4a16      	ldr	r2, [pc, #88]	; (11a00 <create_message+0x8c>)
   119a8:	f014 ff96 	bl	268d8 <snprintf>

	char data_str[len];
   119ac:	1df3      	adds	r3, r6, #7
   119ae:	f023 0307 	bic.w	r3, r3, #7
   119b2:	ebad 0d03 	sub.w	sp, sp, r3
	snprintf(data_str, len, "%s", data);
   119b6:	4631      	mov	r1, r6
   119b8:	462b      	mov	r3, r5
   119ba:	4a12      	ldr	r2, [pc, #72]	; (11a04 <create_message+0x90>)
   119bc:	a802      	add	r0, sp, #8
   119be:	f014 ff8b 	bl	268d8 <snprintf>

	cJSON_AddStringToObject(message, "timestamp", time_str);
   119c2:	463a      	mov	r2, r7
   119c4:	4620      	mov	r0, r4
   119c6:	4910      	ldr	r1, [pc, #64]	; (11a08 <create_message+0x94>)
   119c8:	f01c faa8 	bl	2df1c <cJSON_AddStringToObject>
	cJSON_AddStringToObject(message, "data", data);
   119cc:	462a      	mov	r2, r5
   119ce:	490f      	ldr	r1, [pc, #60]	; (11a0c <create_message+0x98>)
   119d0:	4620      	mov	r0, r4
   119d2:	f01c faa3 	bl	2df1c <cJSON_AddStringToObject>

	strcpy(destination, cJSON_Print(message));
   119d6:	4620      	mov	r0, r4
   119d8:	f01c fa9d 	bl	2df16 <cJSON_Print>
   119dc:	4601      	mov	r1, r0
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   119de:	4640      	mov	r0, r8
   119e0:	f015 f8bc 	bl	26b5c <strcpy>

	cJSON_Delete(message);
   119e4:	4620      	mov	r0, r4
   119e6:	f004 febb 	bl	16760 <cJSON_Delete>
}
   119ea:	3714      	adds	r7, #20
   119ec:	46bd      	mov	sp, r7
   119ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cJSON_AddStringToObject(message, "type", "periodic sample");
   119f2:	4a07      	ldr	r2, [pc, #28]	; (11a10 <create_message+0x9c>)
   119f4:	e7cd      	b.n	11992 <create_message+0x1e>
   119f6:	bf00      	nop
   119f8:	000300dd 	.word	0x000300dd
   119fc:	0003006b 	.word	0x0003006b
   11a00:	00030080 	.word	0x00030080
   11a04:	00032147 	.word	0x00032147
   11a08:	00030085 	.word	0x00030085
   11a0c:	00032ba0 	.word	0x00032ba0
   11a10:	00030070 	.word	0x00030070

00011a14 <publish_samples.part.0>:
void publish_samples(struct k_work *item) {
   11a14:	b510      	push	{r4, lr}
   11a16:	4b18      	ldr	r3, [pc, #96]	; (11a78 <publish_samples.part.0+0x64>)
   11a18:	4a18      	ldr	r2, [pc, #96]	; (11a7c <publish_samples.part.0+0x68>)
   11a1a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
   11a1e:	1ad2      	subs	r2, r2, r3
   11a20:	08d2      	lsrs	r2, r2, #3
	LOG_DBG("Publish Samples");
   11a22:	0192      	lsls	r2, r2, #6
   11a24:	f042 0204 	orr.w	r2, r2, #4
   11a28:	4915      	ldr	r1, [pc, #84]	; (11a80 <publish_samples.part.0+0x6c>)
   11a2a:	4816      	ldr	r0, [pc, #88]	; (11a84 <publish_samples.part.0+0x70>)
   11a2c:	f01a ff5d 	bl	2c8ea <log_1>
	date_time_now(&curr_time);
   11a30:	ac02      	add	r4, sp, #8
	dk_set_led(DK_LED2, 0);
   11a32:	2100      	movs	r1, #0
   11a34:	2001      	movs	r0, #1
   11a36:	f006 f88f 	bl	17b58 <dk_set_led>
	date_time_now(&curr_time);
   11a3a:	4620      	mov	r0, r4
   11a3c:	f007 fe94 	bl	19768 <date_time_now>
	create_message(message, SENSOR_SAMPLE, testData, TEST_DATA_SIZE, &curr_time);
   11a40:	4a11      	ldr	r2, [pc, #68]	; (11a88 <publish_samples.part.0+0x74>)
   11a42:	9400      	str	r4, [sp, #0]
   11a44:	2364      	movs	r3, #100	; 0x64
   11a46:	2101      	movs	r1, #1
   11a48:	6812      	ldr	r2, [r2, #0]
   11a4a:	a805      	add	r0, sp, #20
   11a4c:	f7ff ff92 	bl	11974 <create_message>
	data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, message, sizeof(message));
   11a50:	a805      	add	r0, sp, #20
   11a52:	f7ff fc95 	bl	11380 <data_publish.constprop.0>
   11a56:	f04f 32ff 	mov.w	r2, #4294967295
   11a5a:	f04f 33ff 	mov.w	r3, #4294967295
   11a5e:	480b      	ldr	r0, [pc, #44]	; (11a8c <publish_samples.part.0+0x78>)
   11a60:	f012 ff74 	bl	2494c <z_impl_k_sem_take>
	dk_set_led(DK_LED2, 1);
   11a64:	2101      	movs	r1, #1
   11a66:	4608      	mov	r0, r1
   11a68:	f006 f876 	bl	17b58 <dk_set_led>
	app_disconnect();
   11a6c:	f7ff ff14 	bl	11898 <app_disconnect>
}
   11a70:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   11a74:	bd10      	pop	{r4, pc}
   11a76:	bf00      	nop
   11a78:	0002eff4 	.word	0x0002eff4
   11a7c:	0002f064 	.word	0x0002f064
   11a80:	000303ad 	.word	0x000303ad
   11a84:	0003008f 	.word	0x0003008f
   11a88:	20020428 	.word	0x20020428
   11a8c:	20020c84 	.word	0x20020c84

00011a90 <publish_samples>:
void publish_samples(struct k_work *item) {
   11a90:	b508      	push	{r3, lr}
	err = app_connect();
   11a92:	f7ff fe89 	bl	117a8 <app_connect>
	if(err) {
   11a96:	4601      	mov	r1, r0
   11a98:	b168      	cbz	r0, 11ab6 <publish_samples+0x26>
   11a9a:	4b09      	ldr	r3, [pc, #36]	; (11ac0 <publish_samples+0x30>)
   11a9c:	4a09      	ldr	r2, [pc, #36]	; (11ac4 <publish_samples+0x34>)
		LOG_ERR("PUBLISH_SAMPLES: connect failed with error %d", err);
   11a9e:	480a      	ldr	r0, [pc, #40]	; (11ac8 <publish_samples+0x38>)
   11aa0:	1ad2      	subs	r2, r2, r3
   11aa2:	08d2      	lsrs	r2, r2, #3
   11aa4:	0192      	lsls	r2, r2, #6
   11aa6:	f042 0201 	orr.w	r2, r2, #1
   11aaa:	f01a ff1e 	bl	2c8ea <log_1>
}
   11aae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		app_disconnect();
   11ab2:	f7ff bef1 	b.w	11898 <app_disconnect>
}
   11ab6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11aba:	f7ff bfab 	b.w	11a14 <publish_samples.part.0>
   11abe:	bf00      	nop
   11ac0:	0002eff4 	.word	0x0002eff4
   11ac4:	0002f064 	.word	0x0002f064
   11ac8:	000300a3 	.word	0x000300a3

00011acc <publish_alarm.part.0>:
void publish_alarm(struct k_work *item) {	
   11acc:	b510      	push	{r4, lr}
   11ace:	4b17      	ldr	r3, [pc, #92]	; (11b2c <publish_alarm.part.0+0x60>)
   11ad0:	4a17      	ldr	r2, [pc, #92]	; (11b30 <publish_alarm.part.0+0x64>)
   11ad2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
   11ad6:	1ad2      	subs	r2, r2, r3
   11ad8:	08d2      	lsrs	r2, r2, #3
	LOG_DBG("Publish alarm");
   11ada:	0192      	lsls	r2, r2, #6
   11adc:	f042 0204 	orr.w	r2, r2, #4
   11ae0:	4914      	ldr	r1, [pc, #80]	; (11b34 <publish_alarm.part.0+0x68>)
   11ae2:	4815      	ldr	r0, [pc, #84]	; (11b38 <publish_alarm.part.0+0x6c>)
   11ae4:	f01a ff01 	bl	2c8ea <log_1>
	date_time_now(&curr_time);
   11ae8:	ac02      	add	r4, sp, #8
	dk_set_led(DK_LED2, 0);
   11aea:	2100      	movs	r1, #0
   11aec:	2001      	movs	r0, #1
   11aee:	f006 f833 	bl	17b58 <dk_set_led>
	date_time_now(&curr_time);
   11af2:	4620      	mov	r0, r4
   11af4:	f007 fe38 	bl	19768 <date_time_now>
	create_message(message, SENSOR_ALARM, curr_sample, 1, &curr_time);
   11af8:	2301      	movs	r3, #1
   11afa:	2100      	movs	r1, #0
   11afc:	4a0f      	ldr	r2, [pc, #60]	; (11b3c <publish_alarm.part.0+0x70>)
   11afe:	a805      	add	r0, sp, #20
   11b00:	9400      	str	r4, [sp, #0]
   11b02:	f7ff ff37 	bl	11974 <create_message>
	data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, message, sizeof(message));
   11b06:	a805      	add	r0, sp, #20
   11b08:	f7ff fc3a 	bl	11380 <data_publish.constprop.0>
   11b0c:	f04f 32ff 	mov.w	r2, #4294967295
   11b10:	f04f 33ff 	mov.w	r3, #4294967295
   11b14:	480a      	ldr	r0, [pc, #40]	; (11b40 <publish_alarm.part.0+0x74>)
   11b16:	f012 ff19 	bl	2494c <z_impl_k_sem_take>
	dk_set_led(DK_LED2, 1);
   11b1a:	2101      	movs	r1, #1
   11b1c:	4608      	mov	r0, r1
   11b1e:	f006 f81b 	bl	17b58 <dk_set_led>
	app_disconnect();
   11b22:	f7ff feb9 	bl	11898 <app_disconnect>
}
   11b26:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   11b2a:	bd10      	pop	{r4, pc}
   11b2c:	0002eff4 	.word	0x0002eff4
   11b30:	0002f064 	.word	0x0002f064
   11b34:	000303bd 	.word	0x000303bd
   11b38:	000300d1 	.word	0x000300d1
   11b3c:	00031017 	.word	0x00031017
   11b40:	20020c84 	.word	0x20020c84

00011b44 <publish_alarm>:
void publish_alarm(struct k_work *item) {	
   11b44:	b508      	push	{r3, lr}
	err = app_connect();
   11b46:	f7ff fe2f 	bl	117a8 <app_connect>
	if(err) {
   11b4a:	4601      	mov	r1, r0
   11b4c:	b168      	cbz	r0, 11b6a <publish_alarm+0x26>
   11b4e:	4b09      	ldr	r3, [pc, #36]	; (11b74 <publish_alarm+0x30>)
   11b50:	4a09      	ldr	r2, [pc, #36]	; (11b78 <publish_alarm+0x34>)
		LOG_ERR("PUBLISH_ALARM: connect failed with error %d", err);
   11b52:	480a      	ldr	r0, [pc, #40]	; (11b7c <publish_alarm+0x38>)
   11b54:	1ad2      	subs	r2, r2, r3
   11b56:	08d2      	lsrs	r2, r2, #3
   11b58:	0192      	lsls	r2, r2, #6
   11b5a:	f042 0201 	orr.w	r2, r2, #1
   11b5e:	f01a fec4 	bl	2c8ea <log_1>
}
   11b62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		app_disconnect();
   11b66:	f7ff be97 	b.w	11898 <app_disconnect>
}
   11b6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11b6e:	f7ff bfad 	b.w	11acc <publish_alarm.part.0>
   11b72:	bf00      	nop
   11b74:	0002eff4 	.word	0x0002eff4
   11b78:	0002f064 	.word	0x0002f064
   11b7c:	000300e3 	.word	0x000300e3

00011b80 <main>:

/**** Application code - End ****/

void main(void)
{
   11b80:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b82:	4b90      	ldr	r3, [pc, #576]	; (11dc4 <main+0x244>)
   11b84:	4c90      	ldr	r4, [pc, #576]	; (11dc8 <main+0x248>)
   11b86:	b09d      	sub	sp, #116	; 0x74
   11b88:	1ae4      	subs	r4, r4, r3
   11b8a:	08e4      	lsrs	r4, r4, #3
	int err;

    LOG_INF("MQTT sensor application example started");
   11b8c:	01a4      	lsls	r4, r4, #6
   11b8e:	f044 0503 	orr.w	r5, r4, #3
   11b92:	4629      	mov	r1, r5
   11b94:	488d      	ldr	r0, [pc, #564]	; (11dcc <main+0x24c>)
   11b96:	f01a fe99 	bl	2c8cc <log_0>
		LOG_INF("LTE Link Connecting ...");
   11b9a:	4629      	mov	r1, r5
   11b9c:	488c      	ldr	r0, [pc, #560]	; (11dd0 <main+0x250>)
   11b9e:	f01a fe95 	bl	2c8cc <log_0>
		err = lte_lc_init_and_connect();
   11ba2:	f01c fe8c 	bl	2e8be <lte_lc_init_and_connect>
		__ASSERT(err == 0, "LTE link could not be established.");
   11ba6:	b170      	cbz	r0, 11bc6 <main+0x46>
   11ba8:	498a      	ldr	r1, [pc, #552]	; (11dd4 <main+0x254>)
   11baa:	f44f 73c5 	mov.w	r3, #394	; 0x18a
   11bae:	4a8a      	ldr	r2, [pc, #552]	; (11dd8 <main+0x258>)
   11bb0:	488a      	ldr	r0, [pc, #552]	; (11ddc <main+0x25c>)
   11bb2:	f01a fc3e 	bl	2c432 <printk>
   11bb6:	488a      	ldr	r0, [pc, #552]	; (11de0 <main+0x260>)
   11bb8:	f01a fc3b 	bl	2c432 <printk>
   11bbc:	f44f 71c5 	mov.w	r1, #394	; 0x18a
   11bc0:	4885      	ldr	r0, [pc, #532]	; (11dd8 <main+0x258>)
   11bc2:	f01a fe53 	bl	2c86c <assert_post_action>
		LOG_INF("LTE Link Connected!");
   11bc6:	f044 0703 	orr.w	r7, r4, #3
   11bca:	4639      	mov	r1, r7
   11bcc:	4885      	ldr	r0, [pc, #532]	; (11de4 <main+0x264>)
   11bce:	f01a fe7d 	bl	2c8cc <log_0>

	modem_configure();
	date_time_update_async(date_time_handler);
   11bd2:	4885      	ldr	r0, [pc, #532]	; (11de8 <main+0x268>)
   11bd4:	f007 fdea 	bl	197ac <date_time_update_async>
	struct addrinfo hints = {
   11bd8:	2501      	movs	r5, #1
   11bda:	f04f 33ff 	mov.w	r3, #4294967295
   11bde:	f04f 32ff 	mov.w	r2, #4294967295
   11be2:	4882      	ldr	r0, [pc, #520]	; (11dec <main+0x26c>)
   11be4:	f012 feb2 	bl	2494c <z_impl_k_sem_take>
	mqtt_client_init(client);
   11be8:	4881      	ldr	r0, [pc, #516]	; (11df0 <main+0x270>)
   11bea:	f01b fdf4 	bl	2d7d6 <mqtt_client_init>
	struct addrinfo hints = {
   11bee:	2250      	movs	r2, #80	; 0x50
   11bf0:	2100      	movs	r1, #0
   11bf2:	a808      	add	r0, sp, #32
   11bf4:	f014 fc00 	bl	263f8 <memset>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   11bf8:	2100      	movs	r1, #0
   11bfa:	487e      	ldr	r0, [pc, #504]	; (11df4 <main+0x274>)
   11bfc:	ab03      	add	r3, sp, #12
   11bfe:	aa08      	add	r2, sp, #32
   11c00:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
   11c04:	f01b f90f 	bl	2ce26 <zsock_getaddrinfo>
	if (err) {
   11c08:	4e7b      	ldr	r6, [pc, #492]	; (11df8 <main+0x278>)
   11c0a:	4601      	mov	r1, r0
   11c0c:	2800      	cmp	r0, #0
   11c0e:	d079      	beq.n	11d04 <main+0x184>
		LOG_ERR("ERROR: getaddrinfo failed %d", err);
   11c10:	487a      	ldr	r0, [pc, #488]	; (11dfc <main+0x27c>)
   11c12:	ea44 0205 	orr.w	r2, r4, r5
   11c16:	f01a fe68 	bl	2c8ea <log_1>
	client->broker = &broker;
   11c1a:	4d75      	ldr	r5, [pc, #468]	; (11df0 <main+0x270>)
	client->evt_cb = mqtt_evt_handler;
   11c1c:	4b78      	ldr	r3, [pc, #480]	; (11e00 <main+0x280>)
	client->client_id.utf8 = (uint8_t *)CONFIG_MQTT_CLIENT_ID;
   11c1e:	4879      	ldr	r0, [pc, #484]	; (11e04 <main+0x284>)
	client->evt_cb = mqtt_evt_handler;
   11c20:	64ab      	str	r3, [r5, #72]	; 0x48
	client->broker = &broker;
   11c22:	636e      	str	r6, [r5, #52]	; 0x34
	client->client_id.utf8 = (uint8_t *)CONFIG_MQTT_CLIENT_ID;
   11c24:	62e8      	str	r0, [r5, #44]	; 0x2c
	client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
   11c26:	f014 fff7 	bl	26c18 <strlen>
	client->protocol_version = MQTT_VERSION_3_1_1;
   11c2a:	2204      	movs	r2, #4
   11c2c:	f885 205e 	strb.w	r2, [r5, #94]	; 0x5e
	client->rx_buf = rx_buffer;
   11c30:	4a75      	ldr	r2, [pc, #468]	; (11e08 <main+0x288>)
	client->password = NULL;
   11c32:	2300      	movs	r3, #0
	client->rx_buf = rx_buffer;
   11c34:	64ea      	str	r2, [r5, #76]	; 0x4c
	client->rx_buf_size = sizeof(rx_buffer);
   11c36:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
	client->tx_buf = tx_buffer;
   11c3a:	4974      	ldr	r1, [pc, #464]	; (11e0c <main+0x28c>)
	client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
   11c3c:	6328      	str	r0, [r5, #48]	; 0x30
	client->tx_buf_size = sizeof(tx_buffer);
   11c3e:	e9c5 1215 	strd	r1, r2, [r5, #84]	; 0x54
	LOG_DBG("Initalizing buttons and leds.");
   11c42:	4873      	ldr	r0, [pc, #460]	; (11e10 <main+0x290>)
   11c44:	4973      	ldr	r1, [pc, #460]	; (11e14 <main+0x294>)
	client->rx_buf_size = sizeof(rx_buffer);
   11c46:	652a      	str	r2, [r5, #80]	; 0x50
	LOG_DBG("Initalizing buttons and leds.");
   11c48:	f044 0204 	orr.w	r2, r4, #4
	client->user_name = NULL;
   11c4c:	e9c5 330e 	strd	r3, r3, [r5, #56]	; 0x38
	client->transport.type = MQTT_TRANSPORT_NON_SECURE;
   11c50:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	LOG_DBG("Initalizing buttons and leds.");
   11c54:	f01a fe49 	bl	2c8ea <log_1>
	err = dk_buttons_init(button_handler);
   11c58:	486f      	ldr	r0, [pc, #444]	; (11e18 <main+0x298>)
   11c5a:	f005 fec7 	bl	179ec <dk_buttons_init>
	if (err) {
   11c5e:	4601      	mov	r1, r0
   11c60:	b120      	cbz	r0, 11c6c <main+0xec>
		LOG_ERR("Could not initialize buttons, err code: %d", err);
   11c62:	486e      	ldr	r0, [pc, #440]	; (11e1c <main+0x29c>)
   11c64:	f044 0201 	orr.w	r2, r4, #1
   11c68:	f01a fe3f 	bl	2c8ea <log_1>
	err = dk_leds_init();
   11c6c:	f005 fe6e 	bl	1794c <dk_leds_init>
	if (err) {
   11c70:	4601      	mov	r1, r0
   11c72:	b120      	cbz	r0, 11c7e <main+0xfe>
		LOG_ERR("Could not initialize leds, err code: %d", err);
   11c74:	486a      	ldr	r0, [pc, #424]	; (11e20 <main+0x2a0>)
   11c76:	f044 0201 	orr.w	r2, r4, #1
   11c7a:	f01a fe36 	bl	2c8ea <log_1>
	err = dk_set_leds_state(DK_ALL_LEDS_MSK, DK_NO_LEDS_MSK);
   11c7e:	2100      	movs	r1, #0
   11c80:	200f      	movs	r0, #15
   11c82:	f01c fcc2 	bl	2e60a <dk_set_leds_state>
	if (err) {
   11c86:	4601      	mov	r1, r0
   11c88:	b120      	cbz	r0, 11c94 <main+0x114>
		LOG_ERR("Could not set leds state, err code: %d", err);
   11c8a:	4866      	ldr	r0, [pc, #408]	; (11e24 <main+0x2a4>)
   11c8c:	f044 0201 	orr.w	r2, r4, #1
   11c90:	f01a fe2b 	bl	2c8ea <log_1>
	k_sem_take(&date_time_ok,K_FOREVER);

	client_init(&client);

	buttons_leds_init(); /* Button for "alarm simulation" and leds for control */
	timer_init(); /* Periodic sample timer */
   11c94:	f7ff fd7a 	bl	1178c <timer_init>
	init_work();  /* Work queue and items for sampling and alarm */
   11c98:	f7ff fe4c 	bl	11934 <init_work>
	modem_info_init();
   11c9c:	f007 fbae 	bl	193fc <modem_info_init>
	
	err = lte_lc_offline();
   11ca0:	f007 f834 	bl	18d0c <lte_lc_offline>
	if(err) {
   11ca4:	b120      	cbz	r0, 11cb0 <main+0x130>
		LOG_ERR("LTE: Offline mode failed");
   11ca6:	4860      	ldr	r0, [pc, #384]	; (11e28 <main+0x2a8>)
   11ca8:	f044 0101 	orr.w	r1, r4, #1
   11cac:	f01a fe0e 	bl	2c8cc <log_0>
	}


	//Lighting LED1 to indicate that the application entering main loop.
	dk_set_led(DK_LED1, 0);
   11cb0:	2100      	movs	r1, #0
   11cb2:	4608      	mov	r0, r1
   11cb4:	f005 ff50 	bl	17b58 <dk_set_led>

	while (1) {
		if(app_connected) {
   11cb8:	4e5c      	ldr	r6, [pc, #368]	; (11e2c <main+0x2ac>)
   11cba:	4d5d      	ldr	r5, [pc, #372]	; (11e30 <main+0x2b0>)
   11cbc:	7833      	ldrb	r3, [r6, #0]
   11cbe:	2b00      	cmp	r3, #0
   11cc0:	d079      	beq.n	11db6 <main+0x236>
			err = poll(&fds, 1, mqtt_keepalive_time_left(&client));
   11cc2:	484b      	ldr	r0, [pc, #300]	; (11df0 <main+0x270>)
   11cc4:	f01b feb8 	bl	2da38 <mqtt_keepalive_time_left>
   11cc8:	4602      	mov	r2, r0
   11cca:	2101      	movs	r1, #1
   11ccc:	4628      	mov	r0, r5
   11cce:	f001 fec9 	bl	13a64 <z_impl_zsock_poll>
			if (err < 0) {
   11cd2:	2800      	cmp	r0, #0
   11cd4:	da3f      	bge.n	11d56 <main+0x1d6>
				printk("ERROR: poll %d\n", errno);
   11cd6:	f01b f9fa 	bl	2d0ce <__errno>
   11cda:	6801      	ldr	r1, [r0, #0]
   11cdc:	4855      	ldr	r0, [pc, #340]	; (11e34 <main+0x2b4>)
   11cde:	f01a fba8 	bl	2c432 <printk>
		{
			k_sleep(K_SECONDS(SAMPLE_INTERVAL));
		}
	}

	LOG_INF("Disconnecting MQTT client...");
   11ce2:	f044 0103 	orr.w	r1, r4, #3
   11ce6:	4854      	ldr	r0, [pc, #336]	; (11e38 <main+0x2b8>)
   11ce8:	f01a fdf0 	bl	2c8cc <log_0>

	err = mqtt_disconnect(&client);
   11cec:	4840      	ldr	r0, [pc, #256]	; (11df0 <main+0x270>)
   11cee:	f01b fe14 	bl	2d91a <mqtt_disconnect>
	if (err) {
   11cf2:	4601      	mov	r1, r0
   11cf4:	b120      	cbz	r0, 11d00 <main+0x180>
		LOG_ERR("Could not disconnect MQTT client. Error: %d", err);
   11cf6:	4851      	ldr	r0, [pc, #324]	; (11e3c <main+0x2bc>)
   11cf8:	f044 0201 	orr.w	r2, r4, #1
   11cfc:	f01a fdf5 	bl	2c8ea <log_1>
	}
}
   11d00:	b01d      	add	sp, #116	; 0x74
   11d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	addr = result;
   11d04:	9b03      	ldr	r3, [sp, #12]
	while (addr != NULL) {
   11d06:	b1c3      	cbz	r3, 11d3a <main+0x1ba>
		if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
   11d08:	6959      	ldr	r1, [r3, #20]
   11d0a:	2908      	cmp	r1, #8
   11d0c:	d119      	bne.n	11d42 <main+0x1c2>
				->sin_addr.s_addr;
   11d0e:	699b      	ldr	r3, [r3, #24]
			broker4->sin_family = AF_INET;
   11d10:	8035      	strh	r5, [r6, #0]
				->sin_addr.s_addr;
   11d12:	685b      	ldr	r3, [r3, #4]
			broker4->sin_addr.s_addr =
   11d14:	6073      	str	r3, [r6, #4]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
   11d16:	f645 3307 	movw	r3, #23303	; 0x5b07
   11d1a:	8073      	strh	r3, [r6, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   11d1c:	2310      	movs	r3, #16
   11d1e:	1d31      	adds	r1, r6, #4
   11d20:	eb0d 0203 	add.w	r2, sp, r3
   11d24:	4628      	mov	r0, r5
   11d26:	f003 fc13 	bl	15550 <z_impl_net_addr_ntop>
			LOG_INF("IPv4 Address found %s", log_strdup(ipv4_addr));
   11d2a:	a804      	add	r0, sp, #16
   11d2c:	f001 f91a 	bl	12f64 <log_strdup>
   11d30:	463a      	mov	r2, r7
   11d32:	4601      	mov	r1, r0
   11d34:	4842      	ldr	r0, [pc, #264]	; (11e40 <main+0x2c0>)
   11d36:	f01a fdd8 	bl	2c8ea <log_1>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   11d3a:	9803      	ldr	r0, [sp, #12]
   11d3c:	f01b f875 	bl	2ce2a <zsock_freeaddrinfo>
   11d40:	e76b      	b.n	11c1a <main+0x9a>
			LOG_WRN("ai_addrlen = %u should be %u or %u",
   11d42:	f044 0302 	orr.w	r3, r4, #2
   11d46:	f8ad 3000 	strh.w	r3, [sp]
   11d4a:	2208      	movs	r2, #8
   11d4c:	2318      	movs	r3, #24
   11d4e:	483d      	ldr	r0, [pc, #244]	; (11e44 <main+0x2c4>)
   11d50:	f01a fdfb 	bl	2c94a <log_3>
		break;
   11d54:	e7f1      	b.n	11d3a <main+0x1ba>
			if(app_connected) { 
   11d56:	7833      	ldrb	r3, [r6, #0]
   11d58:	2b00      	cmp	r3, #0
   11d5a:	d0af      	beq.n	11cbc <main+0x13c>
				err = mqtt_live(&client);
   11d5c:	4824      	ldr	r0, [pc, #144]	; (11df0 <main+0x270>)
   11d5e:	f01b fe44 	bl	2d9ea <mqtt_live>
				if ((err != 0) && (err != -EAGAIN)) {
   11d62:	4601      	mov	r1, r0
   11d64:	b140      	cbz	r0, 11d78 <main+0x1f8>
   11d66:	f110 0f0b 	cmn.w	r0, #11
   11d6a:	d005      	beq.n	11d78 <main+0x1f8>
					LOG_ERR("ERROR: mqtt_live %d", err);
   11d6c:	4836      	ldr	r0, [pc, #216]	; (11e48 <main+0x2c8>)
   11d6e:	f044 0201 	orr.w	r2, r4, #1
   11d72:	f01a fdba 	bl	2c8ea <log_1>
   11d76:	e7b4      	b.n	11ce2 <main+0x162>
				if ((fds.revents & POLLIN) == POLLIN) {
   11d78:	88eb      	ldrh	r3, [r5, #6]
   11d7a:	07d9      	lsls	r1, r3, #31
   11d7c:	d50a      	bpl.n	11d94 <main+0x214>
					err = mqtt_input(&client);
   11d7e:	481c      	ldr	r0, [pc, #112]	; (11df0 <main+0x270>)
   11d80:	f01b fe71 	bl	2da66 <mqtt_input>
					if (err != 0) {
   11d84:	4601      	mov	r1, r0
   11d86:	b128      	cbz	r0, 11d94 <main+0x214>
						LOG_ERR("ERROR: mqtt_input %d", err);
   11d88:	4830      	ldr	r0, [pc, #192]	; (11e4c <main+0x2cc>)
   11d8a:	f044 0201 	orr.w	r2, r4, #1
   11d8e:	f01a fdac 	bl	2c8ea <log_1>
						continue;
   11d92:	e793      	b.n	11cbc <main+0x13c>
				if ((fds.revents & POLLERR) == POLLERR) {
   11d94:	88eb      	ldrh	r3, [r5, #6]
   11d96:	071a      	lsls	r2, r3, #28
   11d98:	d505      	bpl.n	11da6 <main+0x226>
					LOG_ERR("POLLERR");
   11d9a:	482d      	ldr	r0, [pc, #180]	; (11e50 <main+0x2d0>)
   11d9c:	f044 0101 	orr.w	r1, r4, #1
   11da0:	f01a fd94 	bl	2c8cc <log_0>
   11da4:	e79d      	b.n	11ce2 <main+0x162>
				if ((fds.revents & POLLNVAL) == POLLNVAL) {
   11da6:	069b      	lsls	r3, r3, #26
   11da8:	d588      	bpl.n	11cbc <main+0x13c>
					LOG_ERR("POLLNVAL");
   11daa:	482a      	ldr	r0, [pc, #168]	; (11e54 <main+0x2d4>)
   11dac:	f044 0101 	orr.w	r1, r4, #1
   11db0:	f01a fd8c 	bl	2c8cc <log_0>
					continue;
   11db4:	e782      	b.n	11cbc <main+0x13c>
	return z_impl_k_sleep(timeout);
   11db6:	2100      	movs	r1, #0
   11db8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11dbc:	f012 fd46 	bl	2484c <z_impl_k_sleep>
   11dc0:	e77c      	b.n	11cbc <main+0x13c>
   11dc2:	bf00      	nop
   11dc4:	0002eff4 	.word	0x0002eff4
   11dc8:	0002f064 	.word	0x0002f064
   11dcc:	0003010f 	.word	0x0003010f
   11dd0:	00030137 	.word	0x00030137
   11dd4:	0003015d 	.word	0x0003015d
   11dd8:	0003014f 	.word	0x0003014f
   11ddc:	00030166 	.word	0x00030166
   11de0:	00030183 	.word	0x00030183
   11de4:	000301a8 	.word	0x000301a8
   11de8:	000114a5 	.word	0x000114a5
   11dec:	20020c24 	.word	0x20020c24
   11df0:	20021444 	.word	0x20021444
   11df4:	000301bc 	.word	0x000301bc
   11df8:	200242ac 	.word	0x200242ac
   11dfc:	000301cd 	.word	0x000301cd
   11e00:	00011535 	.word	0x00011535
   11e04:	00030223 	.word	0x00030223
   11e08:	2002434f 	.word	0x2002434f
   11e0c:	20024543 	.word	0x20024543
   11e10:	0003022f 	.word	0x0003022f
   11e14:	0003039b 	.word	0x0003039b
   11e18:	0001142d 	.word	0x0001142d
   11e1c:	00030251 	.word	0x00030251
   11e20:	0003027c 	.word	0x0003027c
   11e24:	000302a4 	.word	0x000302a4
   11e28:	000302cb 	.word	0x000302cb
   11e2c:	200242ce 	.word	0x200242ce
   11e30:	200214a8 	.word	0x200214a8
   11e34:	000302e4 	.word	0x000302e4
   11e38:	0002fea2 	.word	0x0002fea2
   11e3c:	0003032e 	.word	0x0003032e
   11e40:	000301ea 	.word	0x000301ea
   11e44:	00030200 	.word	0x00030200
   11e48:	000302f4 	.word	0x000302f4
   11e4c:	00030308 	.word	0x00030308
   11e50:	0003031d 	.word	0x0003031d
   11e54:	00030325 	.word	0x00030325

00011e58 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   11e58:	2803      	cmp	r0, #3
{
   11e5a:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   11e5c:	d906      	bls.n	11e6c <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   11e5e:	f01b f936 	bl	2d0ce <__errno>
   11e62:	2309      	movs	r3, #9
   11e64:	6003      	str	r3, [r0, #0]
   11e66:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   11e6a:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11e6c:	220c      	movs	r2, #12
   11e6e:	4b05      	ldr	r3, [pc, #20]	; (11e84 <_check_fd+0x2c>)
   11e70:	fb02 3000 	mla	r0, r2, r0, r3
   11e74:	3008      	adds	r0, #8
   11e76:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   11e7a:	2b00      	cmp	r3, #0
   11e7c:	d0ef      	beq.n	11e5e <_check_fd+0x6>
	return 0;
   11e7e:	2000      	movs	r0, #0
   11e80:	e7f3      	b.n	11e6a <_check_fd+0x12>
   11e82:	bf00      	nop
   11e84:	200214c0 	.word	0x200214c0

00011e88 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   11e88:	b570      	push	{r4, r5, r6, lr}
   11e8a:	4604      	mov	r4, r0
   11e8c:	460d      	mov	r5, r1
   11e8e:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   11e90:	f7ff ffe2 	bl	11e58 <_check_fd>
   11e94:	2800      	cmp	r0, #0
   11e96:	db0a      	blt.n	11eae <z_get_fd_obj+0x26>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
   11e98:	4a08      	ldr	r2, [pc, #32]	; (11ebc <z_get_fd_obj+0x34>)
   11e9a:	b155      	cbz	r5, 11eb2 <z_get_fd_obj+0x2a>
   11e9c:	230c      	movs	r3, #12
   11e9e:	fb03 2304 	mla	r3, r3, r4, r2
   11ea2:	685b      	ldr	r3, [r3, #4]
   11ea4:	42ab      	cmp	r3, r5
   11ea6:	d004      	beq.n	11eb2 <z_get_fd_obj+0x2a>
		errno = err;
   11ea8:	f01b f911 	bl	2d0ce <__errno>
   11eac:	6006      	str	r6, [r0, #0]
		return NULL;
   11eae:	2000      	movs	r0, #0
   11eb0:	e002      	b.n	11eb8 <z_get_fd_obj+0x30>
		return NULL;
	}

	return fd_entry->obj;
   11eb2:	200c      	movs	r0, #12
   11eb4:	4344      	muls	r4, r0
   11eb6:	5910      	ldr	r0, [r2, r4]
}
   11eb8:	bd70      	pop	{r4, r5, r6, pc}
   11eba:	bf00      	nop
   11ebc:	200214c0 	.word	0x200214c0

00011ec0 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
   11ec0:	b538      	push	{r3, r4, r5, lr}
   11ec2:	4605      	mov	r5, r0
   11ec4:	460c      	mov	r4, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   11ec6:	f7ff ffc7 	bl	11e58 <_check_fd>
   11eca:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
   11ecc:	bfa3      	ittte	ge
   11ece:	230c      	movge	r3, #12
   11ed0:	fb03 f005 	mulge.w	r0, r3, r5
   11ed4:	4a03      	ldrge	r2, [pc, #12]	; (11ee4 <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
   11ed6:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
   11ed8:	bfa1      	itttt	ge
   11eda:	1813      	addge	r3, r2, r0
   11edc:	685b      	ldrge	r3, [r3, #4]
   11ede:	6023      	strge	r3, [r4, #0]

	return fd_entry->obj;
   11ee0:	5810      	ldrge	r0, [r2, r0]
}
   11ee2:	bd38      	pop	{r3, r4, r5, pc}
   11ee4:	200214c0 	.word	0x200214c0

00011ee8 <z_reserve_fd>:

int z_reserve_fd(void)
{
   11ee8:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   11eea:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   11eec:	f04f 33ff 	mov.w	r3, #4294967295
   11ef0:	f04f 32ff 	mov.w	r2, #4294967295
   11ef4:	4812      	ldr	r0, [pc, #72]	; (11f40 <z_reserve_fd+0x58>)
   11ef6:	f011 f86b 	bl	22fd0 <z_impl_k_mutex_lock>
   11efa:	4b12      	ldr	r3, [pc, #72]	; (11f44 <z_reserve_fd+0x5c>)
   11efc:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
   11f00:	b17a      	cbz	r2, 11f22 <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   11f02:	3401      	adds	r4, #1
   11f04:	2c04      	cmp	r4, #4
   11f06:	f103 030c 	add.w	r3, r3, #12
   11f0a:	d1f7      	bne.n	11efc <z_reserve_fd+0x14>
	errno = ENFILE;
   11f0c:	f01b f8df 	bl	2d0ce <__errno>
   11f10:	2317      	movs	r3, #23
	return -1;
   11f12:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   11f16:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   11f18:	4809      	ldr	r0, [pc, #36]	; (11f40 <z_reserve_fd+0x58>)
   11f1a:	f011 f953 	bl	231c4 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   11f1e:	4620      	mov	r0, r4
   11f20:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11f22:	e8d3 1fef 	ldaex	r1, [r3]
   11f26:	3101      	adds	r1, #1
   11f28:	e8c3 1fe0 	stlex	r0, r1, [r3]
   11f2c:	2800      	cmp	r0, #0
   11f2e:	d1f8      	bne.n	11f22 <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
   11f30:	230c      	movs	r3, #12
   11f32:	4363      	muls	r3, r4
   11f34:	4904      	ldr	r1, [pc, #16]	; (11f48 <z_reserve_fd+0x60>)
   11f36:	18c8      	adds	r0, r1, r3
   11f38:	50ca      	str	r2, [r1, r3]
		fdtable[fd].vtable = NULL;
   11f3a:	6042      	str	r2, [r0, #4]
   11f3c:	e7ec      	b.n	11f18 <z_reserve_fd+0x30>
   11f3e:	bf00      	nop
   11f40:	20020b7c 	.word	0x20020b7c
   11f44:	200214c8 	.word	0x200214c8
   11f48:	200214c0 	.word	0x200214c0

00011f4c <z_finalize_fd>:
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   11f4c:	230c      	movs	r3, #12
{
   11f4e:	b510      	push	{r4, lr}
	fdtable[fd].obj = obj;
   11f50:	4358      	muls	r0, r3
   11f52:	4c02      	ldr	r4, [pc, #8]	; (11f5c <z_finalize_fd+0x10>)
   11f54:	1823      	adds	r3, r4, r0
   11f56:	5021      	str	r1, [r4, r0]
	fdtable[fd].vtable = vtable;
   11f58:	605a      	str	r2, [r3, #4]
}
   11f5a:	bd10      	pop	{r4, pc}
   11f5c:	200214c0 	.word	0x200214c0

00011f60 <z_free_fd>:
		old_rc = atomic_get(&fdtable[fd].refcount);
   11f60:	230c      	movs	r3, #12
   11f62:	4a0e      	ldr	r2, [pc, #56]	; (11f9c <z_free_fd+0x3c>)

void z_free_fd(int fd)
{
   11f64:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   11f66:	fb03 2300 	mla	r3, r3, r0, r2
   11f6a:	3308      	adds	r3, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11f6c:	e8d3 1faf 	lda	r1, [r3]
		if (!old_rc) {
   11f70:	b191      	cbz	r1, 11f98 <z_free_fd+0x38>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   11f72:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   11f74:	e8d3 5fef 	ldaex	r5, [r3]
   11f78:	428d      	cmp	r5, r1
   11f7a:	d104      	bne.n	11f86 <z_free_fd+0x26>
   11f7c:	e8c3 4fec 	stlex	ip, r4, [r3]
   11f80:	f1bc 0f00 	cmp.w	ip, #0
   11f84:	d1f6      	bne.n	11f74 <z_free_fd+0x14>
   11f86:	d1f1      	bne.n	11f6c <z_free_fd+0xc>
	if (old_rc != 1) {
   11f88:	2901      	cmp	r1, #1
   11f8a:	d105      	bne.n	11f98 <z_free_fd+0x38>
	fdtable[fd].obj = NULL;
   11f8c:	230c      	movs	r3, #12
   11f8e:	4358      	muls	r0, r3
   11f90:	2300      	movs	r3, #0
   11f92:	1811      	adds	r1, r2, r0
   11f94:	5013      	str	r3, [r2, r0]
	fdtable[fd].vtable = NULL;
   11f96:	604b      	str	r3, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   11f98:	bd30      	pop	{r4, r5, pc}
   11f9a:	bf00      	nop
   11f9c:	200214c0 	.word	0x200214c0

00011fa0 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   11fa0:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   11fa2:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
   11fa4:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   11fa8:	2b02      	cmp	r3, #2
{
   11faa:	4604      	mov	r4, r0
   11fac:	460e      	mov	r6, r1
	notify->result = res;
   11fae:	6081      	str	r1, [r0, #8]
	switch (method) {
   11fb0:	d010      	beq.n	11fd4 <sys_notify_finalize+0x34>
   11fb2:	2b03      	cmp	r3, #3
   11fb4:	d004      	beq.n	11fc0 <sys_notify_finalize+0x20>
   11fb6:	2b01      	cmp	r3, #1
   11fb8:	d10f      	bne.n	11fda <sys_notify_finalize+0x3a>
   11fba:	2500      	movs	r5, #0
   11fbc:	4628      	mov	r0, r5
   11fbe:	e001      	b.n	11fc4 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   11fc0:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   11fc2:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   11fc4:	2300      	movs	r3, #0
   11fc6:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   11fc8:	b110      	cbz	r0, 11fd0 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   11fca:	4631      	mov	r1, r6
   11fcc:	f013 fe18 	bl	25c00 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   11fd0:	4628      	mov	r0, r5
   11fd2:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = 0;
   11fd4:	2500      	movs	r5, #0
		sig = notify->method.signal;
   11fd6:	6800      	ldr	r0, [r0, #0]
		break;
   11fd8:	e7f4      	b.n	11fc4 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   11fda:	2345      	movs	r3, #69	; 0x45
   11fdc:	4a05      	ldr	r2, [pc, #20]	; (11ff4 <sys_notify_finalize+0x54>)
   11fde:	4906      	ldr	r1, [pc, #24]	; (11ff8 <sys_notify_finalize+0x58>)
   11fe0:	4806      	ldr	r0, [pc, #24]	; (11ffc <sys_notify_finalize+0x5c>)
   11fe2:	f01a fa26 	bl	2c432 <printk>
   11fe6:	2145      	movs	r1, #69	; 0x45
   11fe8:	4802      	ldr	r0, [pc, #8]	; (11ff4 <sys_notify_finalize+0x54>)
   11fea:	f01a fc3f 	bl	2c86c <assert_post_action>
	sys_notify_generic_callback rv = 0;
   11fee:	2500      	movs	r5, #0
   11ff0:	e7e7      	b.n	11fc2 <sys_notify_finalize+0x22>
   11ff2:	bf00      	nop
   11ff4:	000303dd 	.word	0x000303dd
   11ff8:	00032fcf 	.word	0x00032fcf
   11ffc:	00030166 	.word	0x00030166

00012000 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
   12000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12004:	b087      	sub	sp, #28
   12006:	460f      	mov	r7, r1
   12008:	4619      	mov	r1, r3
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
   1200a:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
   1200c:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   1200e:	2514      	movs	r5, #20
{
   12010:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
   12012:	4698      	mov	r8, r3
{
   12014:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   12018:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
   1201c:	4c1e      	ldr	r4, [pc, #120]	; (12098 <print_digits+0x98>)
   1201e:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   12022:	ea50 0301 	orrs.w	r3, r0, r1
   12026:	d11a      	bne.n	1205e <print_digits+0x5e>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
   12028:	2d14      	cmp	r5, #20
		buf[i] = '0';
   1202a:	bf08      	it	eq
   1202c:	2330      	moveq	r3, #48	; 0x30
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   1202e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
   12030:	bf18      	it	ne
   12032:	3501      	addne	r5, #1
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   12034:	442c      	add	r4, r5
		buf[i] = '0';
   12036:	bf08      	it	eq
   12038:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   1203c:	2c15      	cmp	r4, #21
   1203e:	d01b      	beq.n	12078 <print_digits+0x78>
   12040:	3c15      	subs	r4, #21

	for (/**/; pad > 0 && pad_before; pad--) {
   12042:	2c00      	cmp	r4, #0
   12044:	dc1a      	bgt.n	1207c <print_digits+0x7c>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
   12046:	f81d 0005 	ldrb.w	r0, [sp, r5]
   1204a:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
   1204c:	3501      	adds	r5, #1
		out(buf[i], ctx);
   1204e:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
   12050:	2d15      	cmp	r5, #21
   12052:	d1f8      	bne.n	12046 <print_digits+0x46>
	}
	for (/**/; pad > 0; pad--) {
   12054:	2c00      	cmp	r4, #0
   12056:	dc19      	bgt.n	1208c <print_digits+0x8c>
		out(pad_char, ctx);
	}
}
   12058:	b007      	add	sp, #28
   1205a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
   1205e:	4642      	mov	r2, r8
   12060:	464b      	mov	r3, r9
   12062:	f7fa fbf9 	bl	c858 <__aeabi_uldivmod>
   12066:	4684      	mov	ip, r0
   12068:	460b      	mov	r3, r1
   1206a:	5ca2      	ldrb	r2, [r4, r2]
		num /= base;
   1206c:	4660      	mov	r0, ip
		buf[i] = "0123456789abcdef"[num % base];
   1206e:	f80d 2005 	strb.w	r2, [sp, r5]
		num /= base;
   12072:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   12074:	3d01      	subs	r5, #1
   12076:	e7d4      	b.n	12022 <print_digits+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   12078:	2400      	movs	r4, #0
	for (/**/; i < DIGITS_BUFLEN; i++) {
   1207a:	e7e4      	b.n	12046 <print_digits+0x46>
	for (/**/; pad > 0 && pad_before; pad--) {
   1207c:	f1bb 0f00 	cmp.w	fp, #0
   12080:	d0e1      	beq.n	12046 <print_digits+0x46>
		out(pad_char, ctx);
   12082:	4639      	mov	r1, r7
   12084:	4650      	mov	r0, sl
   12086:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
   12088:	3c01      	subs	r4, #1
   1208a:	e7da      	b.n	12042 <print_digits+0x42>
		out(pad_char, ctx);
   1208c:	4639      	mov	r1, r7
   1208e:	4650      	mov	r0, sl
   12090:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
   12092:	3c01      	subs	r4, #1
   12094:	e7de      	b.n	12054 <print_digits+0x54>
   12096:	bf00      	nop
   12098:	00030400 	.word	0x00030400

0001209c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1209c:	680b      	ldr	r3, [r1, #0]
   1209e:	3301      	adds	r3, #1
   120a0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   120a2:	4b01      	ldr	r3, [pc, #4]	; (120a8 <char_out+0xc>)
   120a4:	681b      	ldr	r3, [r3, #0]
   120a6:	4718      	bx	r3
   120a8:	2002042c 	.word	0x2002042c

000120ac <__printk_hook_install>:
	_char_out = fn;
   120ac:	4b01      	ldr	r3, [pc, #4]	; (120b4 <__printk_hook_install+0x8>)
   120ae:	6018      	str	r0, [r3, #0]
}
   120b0:	4770      	bx	lr
   120b2:	bf00      	nop
   120b4:	2002042c 	.word	0x2002042c

000120b8 <z_vprintk>:
{
   120b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   120bc:	2600      	movs	r6, #0
{
   120be:	4605      	mov	r5, r0
   120c0:	468b      	mov	fp, r1
   120c2:	461c      	mov	r4, r3
	int min_width = -1;
   120c4:	f04f 38ff 	mov.w	r8, #4294967295
	enum pad_type padding = PAD_NONE;
   120c8:	4637      	mov	r7, r6
{
   120ca:	b087      	sub	sp, #28
   120cc:	f102 3aff 	add.w	sl, r2, #4294967295
			might_format = 0;
   120d0:	f04f 0900 	mov.w	r9, #0
					break;
   120d4:	e007      	b.n	120e6 <z_vprintk+0x2e>
		if (!might_format) {
   120d6:	f1b9 0f00 	cmp.w	r9, #0
   120da:	d10b      	bne.n	120f4 <z_vprintk+0x3c>
			if (*fmt != '%') {
   120dc:	2825      	cmp	r0, #37	; 0x25
   120de:	f000 810a 	beq.w	122f6 <z_vprintk+0x23e>
				out((int)*fmt, ctx);
   120e2:	4659      	mov	r1, fp
   120e4:	47a8      	blx	r5
	while (*fmt) {
   120e6:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   120ea:	2800      	cmp	r0, #0
   120ec:	d1f3      	bne.n	120d6 <z_vprintk+0x1e>
}
   120ee:	b007      	add	sp, #28
   120f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   120f4:	287a      	cmp	r0, #122	; 0x7a
   120f6:	d80a      	bhi.n	1210e <z_vprintk+0x56>
   120f8:	2862      	cmp	r0, #98	; 0x62
   120fa:	d810      	bhi.n	1211e <z_vprintk+0x66>
   120fc:	2830      	cmp	r0, #48	; 0x30
   120fe:	d051      	beq.n	121a4 <z_vprintk+0xec>
   12100:	d844      	bhi.n	1218c <z_vprintk+0xd4>
   12102:	2825      	cmp	r0, #37	; 0x25
   12104:	f000 80f5 	beq.w	122f2 <z_vprintk+0x23a>
   12108:	282d      	cmp	r0, #45	; 0x2d
   1210a:	f000 80fb 	beq.w	12304 <z_vprintk+0x24c>
					out((int)'%', ctx);
   1210e:	4659      	mov	r1, fp
   12110:	2025      	movs	r0, #37	; 0x25
   12112:	47a8      	blx	r5
					out((int)*fmt, ctx);
   12114:	4659      	mov	r1, fp
   12116:	f89a 0000 	ldrb.w	r0, [sl]
   1211a:	47a8      	blx	r5
   1211c:	e7d8      	b.n	120d0 <z_vprintk+0x18>
   1211e:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
   12122:	2b17      	cmp	r3, #23
   12124:	d8f3      	bhi.n	1210e <z_vprintk+0x56>
   12126:	a201      	add	r2, pc, #4	; (adr r2, 1212c <z_vprintk+0x74>)
   12128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1212c:	000122eb 	.word	0x000122eb
   12130:	000121ed 	.word	0x000121ed
   12134:	0001210f 	.word	0x0001210f
   12138:	0001210f 	.word	0x0001210f
   1213c:	0001210f 	.word	0x0001210f
   12140:	000121cf 	.word	0x000121cf
   12144:	000121ed 	.word	0x000121ed
   12148:	0001210f 	.word	0x0001210f
   1214c:	0001210f 	.word	0x0001210f
   12150:	000121cf 	.word	0x000121cf
   12154:	0001210f 	.word	0x0001210f
   12158:	0001210f 	.word	0x0001210f
   1215c:	0001210f 	.word	0x0001210f
   12160:	00012267 	.word	0x00012267
   12164:	0001210f 	.word	0x0001210f
   12168:	0001210f 	.word	0x0001210f
   1216c:	000122b3 	.word	0x000122b3
   12170:	0001210f 	.word	0x0001210f
   12174:	000121ed 	.word	0x000121ed
   12178:	0001210f 	.word	0x0001210f
   1217c:	0001210f 	.word	0x0001210f
   12180:	00012195 	.word	0x00012195
   12184:	0001210f 	.word	0x0001210f
   12188:	000121cf 	.word	0x000121cf
			switch (*fmt) {
   1218c:	2839      	cmp	r0, #57	; 0x39
   1218e:	d915      	bls.n	121bc <z_vprintk+0x104>
   12190:	2858      	cmp	r0, #88	; 0x58
   12192:	d1bc      	bne.n	1210e <z_vprintk+0x56>
				if (*fmt == 'p') {
   12194:	f89a 3000 	ldrb.w	r3, [sl]
   12198:	2b70      	cmp	r3, #112	; 0x70
   1219a:	d16e      	bne.n	1227a <z_vprintk+0x1c2>
					x = va_arg(ap, unsigned int);
   1219c:	2300      	movs	r3, #0
   1219e:	f854 2b04 	ldr.w	r2, [r4], #4
   121a2:	e075      	b.n	12290 <z_vprintk+0x1d8>
				if (min_width < 0 && padding == PAD_NONE) {
   121a4:	f1b8 0f00 	cmp.w	r8, #0
   121a8:	da0b      	bge.n	121c2 <z_vprintk+0x10a>
   121aa:	2f00      	cmp	r7, #0
   121ac:	f000 80ac 	beq.w	12308 <z_vprintk+0x250>
					min_width = *fmt - '0';
   121b0:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   121b4:	2f00      	cmp	r7, #0
   121b6:	bf08      	it	eq
   121b8:	2702      	moveq	r7, #2
   121ba:	e794      	b.n	120e6 <z_vprintk+0x2e>
				if (min_width < 0) {
   121bc:	f1b8 0f00 	cmp.w	r8, #0
   121c0:	dbf6      	blt.n	121b0 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   121c2:	230a      	movs	r3, #10
   121c4:	fb03 0808 	mla	r8, r3, r8, r0
   121c8:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   121cc:	e7f2      	b.n	121b4 <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
   121ce:	2868      	cmp	r0, #104	; 0x68
   121d0:	d103      	bne.n	121da <z_vprintk+0x122>
   121d2:	2e68      	cmp	r6, #104	; 0x68
   121d4:	d106      	bne.n	121e4 <z_vprintk+0x12c>
					length_mod = 'H';
   121d6:	2648      	movs	r6, #72	; 0x48
   121d8:	e785      	b.n	120e6 <z_vprintk+0x2e>
				} else if (*fmt == 'l' && length_mod == 'l') {
   121da:	286c      	cmp	r0, #108	; 0x6c
   121dc:	d102      	bne.n	121e4 <z_vprintk+0x12c>
   121de:	2e6c      	cmp	r6, #108	; 0x6c
   121e0:	f000 8094 	beq.w	1230c <z_vprintk+0x254>
				} else if (length_mod == 0) {
   121e4:	2e00      	cmp	r6, #0
   121e6:	d192      	bne.n	1210e <z_vprintk+0x56>
   121e8:	4606      	mov	r6, r0
   121ea:	e77c      	b.n	120e6 <z_vprintk+0x2e>
				if (length_mod == 'z') {
   121ec:	2e7a      	cmp	r6, #122	; 0x7a
   121ee:	d106      	bne.n	121fe <z_vprintk+0x146>
					d = va_arg(ap, long);
   121f0:	46a1      	mov	r9, r4
   121f2:	f859 2b04 	ldr.w	r2, [r9], #4
   121f6:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   121f8:	2875      	cmp	r0, #117	; 0x75
   121fa:	d123      	bne.n	12244 <z_vprintk+0x18c>
   121fc:	e00f      	b.n	1221e <z_vprintk+0x166>
				} else if (length_mod == 'l') {
   121fe:	2e6c      	cmp	r6, #108	; 0x6c
   12200:	d0f6      	beq.n	121f0 <z_vprintk+0x138>
				} else if (length_mod == 'L') {
   12202:	2e4c      	cmp	r6, #76	; 0x4c
   12204:	d105      	bne.n	12212 <z_vprintk+0x15a>
					long long lld = va_arg(ap, long long);
   12206:	3407      	adds	r4, #7
   12208:	f024 0907 	bic.w	r9, r4, #7
					d = (printk_val_t) lld;
   1220c:	e8f9 2302 	ldrd	r2, r3, [r9], #8
   12210:	e7f2      	b.n	121f8 <z_vprintk+0x140>
				} else if (*fmt == 'u') {
   12212:	2875      	cmp	r0, #117	; 0x75
					d = va_arg(ap, unsigned int);
   12214:	6822      	ldr	r2, [r4, #0]
   12216:	f104 0904 	add.w	r9, r4, #4
				} else if (*fmt == 'u') {
   1221a:	d112      	bne.n	12242 <z_vprintk+0x18a>
					d = va_arg(ap, unsigned int);
   1221c:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
   1221e:	1ef8      	subs	r0, r7, #3
   12220:	bf18      	it	ne
   12222:	2001      	movne	r0, #1
   12224:	2f01      	cmp	r7, #1
   12226:	bf0c      	ite	eq
   12228:	2430      	moveq	r4, #48	; 0x30
   1222a:	2420      	movne	r4, #32
   1222c:	9001      	str	r0, [sp, #4]
   1222e:	200a      	movs	r0, #10
   12230:	e9cd 4802 	strd	r4, r8, [sp, #8]
   12234:	9000      	str	r0, [sp, #0]
   12236:	4659      	mov	r1, fp
   12238:	4628      	mov	r0, r5
   1223a:	f7ff fee1 	bl	12000 <print_digits>
}
   1223e:	464c      	mov	r4, r9
   12240:	e746      	b.n	120d0 <z_vprintk+0x18>
					d = va_arg(ap, int);
   12242:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   12244:	2a00      	cmp	r2, #0
   12246:	f173 0100 	sbcs.w	r1, r3, #0
   1224a:	dae8      	bge.n	1221e <z_vprintk+0x166>
					out((int)'-', ctx);
   1224c:	4659      	mov	r1, fp
   1224e:	202d      	movs	r0, #45	; 0x2d
   12250:	e9cd 2304 	strd	r2, r3, [sp, #16]
   12254:	47a8      	blx	r5
					d = -d;
   12256:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1225a:	4252      	negs	r2, r2
   1225c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
   12260:	f108 38ff 	add.w	r8, r8, #4294967295
   12264:	e7db      	b.n	1221e <z_vprintk+0x166>
				out('0', ctx);
   12266:	4659      	mov	r1, fp
   12268:	2030      	movs	r0, #48	; 0x30
   1226a:	47a8      	blx	r5
				out('x', ctx);
   1226c:	4659      	mov	r1, fp
   1226e:	2078      	movs	r0, #120	; 0x78
   12270:	47a8      	blx	r5
				min_width = sizeof(void *) * 2;
   12272:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
   12276:	2701      	movs	r7, #1
   12278:	e78c      	b.n	12194 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
   1227a:	2e6c      	cmp	r6, #108	; 0x6c
   1227c:	d08e      	beq.n	1219c <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
   1227e:	2e4c      	cmp	r6, #76	; 0x4c
   12280:	d18c      	bne.n	1219c <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
   12282:	1de3      	adds	r3, r4, #7
   12284:	f023 0307 	bic.w	r3, r3, #7
   12288:	461c      	mov	r4, r3
   1228a:	685b      	ldr	r3, [r3, #4]
   1228c:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
   12290:	1ef8      	subs	r0, r7, #3
   12292:	bf18      	it	ne
   12294:	2001      	movne	r0, #1
   12296:	2f01      	cmp	r7, #1
   12298:	bf0c      	ite	eq
   1229a:	2130      	moveq	r1, #48	; 0x30
   1229c:	2120      	movne	r1, #32
   1229e:	e9cd 1802 	strd	r1, r8, [sp, #8]
   122a2:	2110      	movs	r1, #16
   122a4:	9001      	str	r0, [sp, #4]
   122a6:	9100      	str	r1, [sp, #0]
   122a8:	4628      	mov	r0, r5
   122aa:	4659      	mov	r1, fp
   122ac:	f7ff fea8 	bl	12000 <print_digits>
   122b0:	e70e      	b.n	120d0 <z_vprintk+0x18>
				char *s = va_arg(ap, char *);
   122b2:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
   122b6:	4699      	mov	r9, r3
   122b8:	464a      	mov	r2, r9
   122ba:	f819 0b01 	ldrb.w	r0, [r9], #1
   122be:	b978      	cbnz	r0, 122e0 <z_vprintk+0x228>
				if (padding == PAD_SPACE_AFTER) {
   122c0:	2f03      	cmp	r7, #3
   122c2:	d125      	bne.n	12310 <z_vprintk+0x258>
					int remaining = min_width - (s - start);
   122c4:	eba2 0903 	sub.w	r9, r2, r3
   122c8:	eba8 0909 	sub.w	r9, r8, r9
					while (remaining-- > 0) {
   122cc:	f1b9 0f00 	cmp.w	r9, #0
   122d0:	f77f aefe 	ble.w	120d0 <z_vprintk+0x18>
						out(' ', ctx);
   122d4:	4659      	mov	r1, fp
   122d6:	2020      	movs	r0, #32
   122d8:	47a8      	blx	r5
   122da:	f109 39ff 	add.w	r9, r9, #4294967295
   122de:	e7f5      	b.n	122cc <z_vprintk+0x214>
					out((int)(*s++), ctx);
   122e0:	4659      	mov	r1, fp
   122e2:	9304      	str	r3, [sp, #16]
   122e4:	47a8      	blx	r5
   122e6:	9b04      	ldr	r3, [sp, #16]
   122e8:	e7e6      	b.n	122b8 <z_vprintk+0x200>
				out(c, ctx);
   122ea:	4659      	mov	r1, fp
   122ec:	f854 0b04 	ldr.w	r0, [r4], #4
   122f0:	e713      	b.n	1211a <z_vprintk+0x62>
				out((int)'%', ctx);
   122f2:	4659      	mov	r1, fp
   122f4:	e711      	b.n	1211a <z_vprintk+0x62>
				length_mod = 0;
   122f6:	464e      	mov	r6, r9
				padding = PAD_NONE;
   122f8:	464f      	mov	r7, r9
				min_width = -1;
   122fa:	f04f 38ff 	mov.w	r8, #4294967295
				might_format = 1;
   122fe:	f04f 0901 	mov.w	r9, #1
   12302:	e6f0      	b.n	120e6 <z_vprintk+0x2e>
			switch (*fmt) {
   12304:	2703      	movs	r7, #3
   12306:	e6ee      	b.n	120e6 <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
   12308:	2701      	movs	r7, #1
   1230a:	e6ec      	b.n	120e6 <z_vprintk+0x2e>
					length_mod = 'L';
   1230c:	264c      	movs	r6, #76	; 0x4c
   1230e:	e6ea      	b.n	120e6 <z_vprintk+0x2e>
			might_format = 0;
   12310:	4681      	mov	r9, r0
   12312:	e6e8      	b.n	120e6 <z_vprintk+0x2e>

00012314 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   12314:	b507      	push	{r0, r1, r2, lr}
   12316:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   12318:	2100      	movs	r1, #0
{
   1231a:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   1231c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
   1231e:	4803      	ldr	r0, [pc, #12]	; (1232c <vprintk+0x18>)
   12320:	a901      	add	r1, sp, #4
   12322:	f7ff fec9 	bl	120b8 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   12326:	b003      	add	sp, #12
   12328:	f85d fb04 	ldr.w	pc, [sp], #4
   1232c:	0001209d 	.word	0x0001209d

00012330 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   12330:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   12332:	2500      	movs	r5, #0
{
   12334:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   12336:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   1233a:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   1233c:	a901      	add	r1, sp, #4
   1233e:	4805      	ldr	r0, [pc, #20]	; (12354 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   12340:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   12342:	f7ff feb9 	bl	120b8 <z_vprintk>

	if (ctx.count < ctx.max) {
   12346:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   1234a:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   1234c:	bfb8      	it	lt
   1234e:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   12350:	b005      	add	sp, #20
   12352:	bd30      	pop	{r4, r5, pc}
   12354:	0002c40d 	.word	0x0002c40d

00012358 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1235c:	ed2d 8b02 	vpush	{d8}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12360:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   12364:	b083      	sub	sp, #12
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12366:	f019 0f08 	tst.w	r9, #8
{
   1236a:	4604      	mov	r4, r0
   1236c:	9201      	str	r2, [sp, #4]
	if (processing) {
   1236e:	d024      	beq.n	123ba <process_event+0x62>
		if (evt == EVT_COMPLETE) {
   12370:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12372:	bf0c      	ite	eq
   12374:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   12378:	f049 0920 	orrne.w	r9, r9, #32
   1237c:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   12380:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12382:	4620      	mov	r0, r4
   12384:	f012 fccc 	bl	24d20 <z_spin_unlock_valid>
   12388:	b968      	cbnz	r0, 123a6 <process_event+0x4e>
   1238a:	2384      	movs	r3, #132	; 0x84
   1238c:	4aa2      	ldr	r2, [pc, #648]	; (12618 <process_event+0x2c0>)
   1238e:	49a3      	ldr	r1, [pc, #652]	; (1261c <process_event+0x2c4>)
   12390:	48a3      	ldr	r0, [pc, #652]	; (12620 <process_event+0x2c8>)
   12392:	f01a f84e 	bl	2c432 <printk>
   12396:	4621      	mov	r1, r4
   12398:	48a2      	ldr	r0, [pc, #648]	; (12624 <process_event+0x2cc>)
   1239a:	f01a f84a 	bl	2c432 <printk>
   1239e:	2184      	movs	r1, #132	; 0x84
   123a0:	489d      	ldr	r0, [pc, #628]	; (12618 <process_event+0x2c0>)
   123a2:	f01a fa63 	bl	2c86c <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   123a6:	9b01      	ldr	r3, [sp, #4]
   123a8:	f383 8811 	msr	BASEPRI, r3
   123ac:	f3bf 8f6f 	isb	sy
}
   123b0:	b003      	add	sp, #12
   123b2:	ecbd 8b02 	vpop	{d8}
   123b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   123ba:	4f9b      	ldr	r7, [pc, #620]	; (12628 <process_event+0x2d0>)
   123bc:	f8df 8260 	ldr.w	r8, [pc, #608]	; 12620 <process_event+0x2c8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   123c0:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   123c4:	2902      	cmp	r1, #2
   123c6:	d106      	bne.n	123d6 <process_event+0x7e>
			evt = process_recheck(mgr);
   123c8:	4620      	mov	r0, r4
   123ca:	f01a f84c 	bl	2c466 <process_recheck>
		if (evt == EVT_NOP) {
   123ce:	2800      	cmp	r0, #0
   123d0:	d0d6      	beq.n	12380 <process_event+0x28>
		if (evt == EVT_COMPLETE) {
   123d2:	2801      	cmp	r0, #1
   123d4:	d16a      	bne.n	124ac <process_event+0x154>
			res = mgr->last_res;
   123d6:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   123da:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   123dc:	f1bb 0f00 	cmp.w	fp, #0
   123e0:	da1c      	bge.n	1241c <process_event+0xc4>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   123e2:	2600      	movs	r6, #0
		*clients = mgr->clients;
   123e4:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   123e6:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   123ea:	e9c4 6600 	strd	r6, r6, [r4]
   123ee:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   123f2:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   123f4:	9600      	str	r6, [sp, #0]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   123f6:	8ba3      	ldrh	r3, [r4, #28]
   123f8:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   123fc:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   123fe:	ee08 2a10 	vmov	s16, r2
				   && !sys_slist_is_empty(&mgr->monitors);
   12402:	d003      	beq.n	1240c <process_event+0xb4>
		if (do_monitors
   12404:	68a2      	ldr	r2, [r4, #8]
   12406:	2a00      	cmp	r2, #0
   12408:	f040 811e 	bne.w	12648 <process_event+0x2f0>
		    || !sys_slist_is_empty(&clients)
   1240c:	b91d      	cbnz	r5, 12416 <process_event+0xbe>
		    || (transit != NULL)) {
   1240e:	9a00      	ldr	r2, [sp, #0]
   12410:	2a00      	cmp	r2, #0
   12412:	f000 8164 	beq.w	126de <process_event+0x386>
   12416:	f04f 0900 	mov.w	r9, #0
   1241a:	e117      	b.n	1264c <process_event+0x2f4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1241c:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   12420:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   12422:	2901      	cmp	r1, #1
   12424:	d823      	bhi.n	1246e <process_event+0x116>
	list->head = NULL;
   12426:	2100      	movs	r1, #0
   12428:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   1242c:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   1242e:	6825      	ldr	r5, [r4, #0]
   12430:	b29b      	uxth	r3, r3
	list->tail = NULL;
   12432:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   12436:	d10c      	bne.n	12452 <process_event+0xfa>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   12438:	428d      	cmp	r5, r1
   1243a:	462a      	mov	r2, r5
   1243c:	bf38      	it	cc
   1243e:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12440:	b12a      	cbz	r2, 1244e <process_event+0xf6>
				mgr->refs += 1U;
   12442:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12444:	6812      	ldr	r2, [r2, #0]
   12446:	3101      	adds	r1, #1
   12448:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1244a:	2a00      	cmp	r2, #0
   1244c:	d1f8      	bne.n	12440 <process_event+0xe8>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1244e:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
   12452:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   12454:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   12456:	f01a f806 	bl	2c466 <process_recheck>
   1245a:	2800      	cmp	r0, #0
   1245c:	f000 80d7 	beq.w	1260e <process_event+0x2b6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12460:	8ba3      	ldrh	r3, [r4, #28]
   12462:	f043 0320 	orr.w	r3, r3, #32
   12466:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   12468:	2300      	movs	r3, #0
   1246a:	9300      	str	r3, [sp, #0]
   1246c:	e7c3      	b.n	123f6 <process_event+0x9e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1246e:	2a04      	cmp	r2, #4
   12470:	d10f      	bne.n	12492 <process_event+0x13a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12472:	f023 0307 	bic.w	r3, r3, #7
   12476:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
   12478:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1247a:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1247c:	f019 fff3 	bl	2c466 <process_recheck>
   12480:	2800      	cmp	r0, #0
   12482:	f000 80c6 	beq.w	12612 <process_event+0x2ba>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12486:	f042 0220 	orr.w	r2, r2, #32
   1248a:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   1248c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   1248e:	9500      	str	r5, [sp, #0]
   12490:	e7b1      	b.n	123f6 <process_event+0x9e>
		__ASSERT_NO_MSG(false);
   12492:	4640      	mov	r0, r8
   12494:	f240 1319 	movw	r3, #281	; 0x119
   12498:	463a      	mov	r2, r7
   1249a:	4964      	ldr	r1, [pc, #400]	; (1262c <process_event+0x2d4>)
   1249c:	f019 ffc9 	bl	2c432 <printk>
   124a0:	f240 1119 	movw	r1, #281	; 0x119
   124a4:	4638      	mov	r0, r7
   124a6:	f01a f9e1 	bl	2c86c <assert_post_action>
   124aa:	e7ef      	b.n	1248c <process_event+0x134>
		} else if (evt == EVT_START) {
   124ac:	2803      	cmp	r0, #3
   124ae:	d135      	bne.n	1251c <process_event+0x1c4>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   124b0:	f1b9 0f00 	cmp.w	r9, #0
   124b4:	d00b      	beq.n	124ce <process_event+0x176>
   124b6:	4640      	mov	r0, r8
   124b8:	495d      	ldr	r1, [pc, #372]	; (12630 <process_event+0x2d8>)
   124ba:	f44f 73aa 	mov.w	r3, #340	; 0x154
   124be:	463a      	mov	r2, r7
   124c0:	f019 ffb7 	bl	2c432 <printk>
   124c4:	f44f 71aa 	mov.w	r1, #340	; 0x154
   124c8:	4638      	mov	r0, r7
   124ca:	f01a f9cf 	bl	2c86c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   124ce:	6823      	ldr	r3, [r4, #0]
   124d0:	b95b      	cbnz	r3, 124ea <process_event+0x192>
   124d2:	4640      	mov	r0, r8
   124d4:	4957      	ldr	r1, [pc, #348]	; (12634 <process_event+0x2dc>)
   124d6:	f240 1355 	movw	r3, #341	; 0x155
   124da:	463a      	mov	r2, r7
   124dc:	f019 ffa9 	bl	2c432 <printk>
   124e0:	f240 1155 	movw	r1, #341	; 0x155
   124e4:	4638      	mov	r0, r7
   124e6:	f01a f9c1 	bl	2c86c <assert_post_action>
			transit = mgr->transitions->start;
   124ea:	6923      	ldr	r3, [r4, #16]
   124ec:	681b      	ldr	r3, [r3, #0]
   124ee:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   124f0:	b95b      	cbnz	r3, 1250a <process_event+0x1b2>
   124f2:	4640      	mov	r0, r8
   124f4:	4950      	ldr	r1, [pc, #320]	; (12638 <process_event+0x2e0>)
   124f6:	f44f 73ac 	mov.w	r3, #344	; 0x158
   124fa:	463a      	mov	r2, r7
   124fc:	f019 ff99 	bl	2c432 <printk>
   12500:	f44f 71ac 	mov.w	r1, #344	; 0x158
   12504:	4638      	mov	r0, r7
   12506:	f01a f9b1 	bl	2c86c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1250a:	8ba3      	ldrh	r3, [r4, #28]
   1250c:	f023 0307 	bic.w	r3, r3, #7
   12510:	f043 0306 	orr.w	r3, r3, #6
}
   12514:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   12516:	83a3      	strh	r3, [r4, #28]
		res = 0;
   12518:	46ab      	mov	fp, r5
}
   1251a:	e76c      	b.n	123f6 <process_event+0x9e>
		} else if (evt == EVT_STOP) {
   1251c:	2804      	cmp	r0, #4
   1251e:	d132      	bne.n	12586 <process_event+0x22e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   12520:	f1b9 0f02 	cmp.w	r9, #2
   12524:	d00b      	beq.n	1253e <process_event+0x1e6>
   12526:	4640      	mov	r0, r8
   12528:	4944      	ldr	r1, [pc, #272]	; (1263c <process_event+0x2e4>)
   1252a:	f240 135b 	movw	r3, #347	; 0x15b
   1252e:	463a      	mov	r2, r7
   12530:	f019 ff7f 	bl	2c432 <printk>
   12534:	f240 115b 	movw	r1, #347	; 0x15b
   12538:	4638      	mov	r0, r7
   1253a:	f01a f997 	bl	2c86c <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   1253e:	8be3      	ldrh	r3, [r4, #30]
   12540:	b15b      	cbz	r3, 1255a <process_event+0x202>
   12542:	4640      	mov	r0, r8
   12544:	493e      	ldr	r1, [pc, #248]	; (12640 <process_event+0x2e8>)
   12546:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   1254a:	463a      	mov	r2, r7
   1254c:	f019 ff71 	bl	2c432 <printk>
   12550:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   12554:	4638      	mov	r0, r7
   12556:	f01a f989 	bl	2c86c <assert_post_action>
			transit = mgr->transitions->stop;
   1255a:	6923      	ldr	r3, [r4, #16]
   1255c:	685b      	ldr	r3, [r3, #4]
   1255e:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   12560:	b95b      	cbnz	r3, 1257a <process_event+0x222>
   12562:	4640      	mov	r0, r8
   12564:	4934      	ldr	r1, [pc, #208]	; (12638 <process_event+0x2e0>)
   12566:	f240 135f 	movw	r3, #351	; 0x15f
   1256a:	463a      	mov	r2, r7
   1256c:	f019 ff61 	bl	2c432 <printk>
   12570:	f240 115f 	movw	r1, #351	; 0x15f
   12574:	4638      	mov	r0, r7
   12576:	f01a f979 	bl	2c86c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1257a:	8ba3      	ldrh	r3, [r4, #28]
   1257c:	f023 0307 	bic.w	r3, r3, #7
   12580:	f043 0304 	orr.w	r3, r3, #4
   12584:	e7c6      	b.n	12514 <process_event+0x1bc>
		} else if (evt == EVT_RESET) {
   12586:	2805      	cmp	r0, #5
   12588:	d132      	bne.n	125f0 <process_event+0x298>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1258a:	f1b9 0f01 	cmp.w	r9, #1
   1258e:	d00b      	beq.n	125a8 <process_event+0x250>
   12590:	4640      	mov	r0, r8
   12592:	492c      	ldr	r1, [pc, #176]	; (12644 <process_event+0x2ec>)
   12594:	f44f 73b1 	mov.w	r3, #354	; 0x162
   12598:	463a      	mov	r2, r7
   1259a:	f019 ff4a 	bl	2c432 <printk>
   1259e:	f44f 71b1 	mov.w	r1, #354	; 0x162
   125a2:	4638      	mov	r0, r7
   125a4:	f01a f962 	bl	2c86c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   125a8:	6823      	ldr	r3, [r4, #0]
   125aa:	b95b      	cbnz	r3, 125c4 <process_event+0x26c>
   125ac:	4640      	mov	r0, r8
   125ae:	4921      	ldr	r1, [pc, #132]	; (12634 <process_event+0x2dc>)
   125b0:	f240 1363 	movw	r3, #355	; 0x163
   125b4:	463a      	mov	r2, r7
   125b6:	f019 ff3c 	bl	2c432 <printk>
   125ba:	f240 1163 	movw	r1, #355	; 0x163
   125be:	4638      	mov	r0, r7
   125c0:	f01a f954 	bl	2c86c <assert_post_action>
			transit = mgr->transitions->reset;
   125c4:	6923      	ldr	r3, [r4, #16]
   125c6:	689b      	ldr	r3, [r3, #8]
   125c8:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   125ca:	b95b      	cbnz	r3, 125e4 <process_event+0x28c>
   125cc:	4640      	mov	r0, r8
   125ce:	491a      	ldr	r1, [pc, #104]	; (12638 <process_event+0x2e0>)
   125d0:	f44f 73b3 	mov.w	r3, #358	; 0x166
   125d4:	463a      	mov	r2, r7
   125d6:	f019 ff2c 	bl	2c432 <printk>
   125da:	f44f 71b3 	mov.w	r1, #358	; 0x166
   125de:	4638      	mov	r0, r7
   125e0:	f01a f944 	bl	2c86c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   125e4:	8ba3      	ldrh	r3, [r4, #28]
   125e6:	f023 0307 	bic.w	r3, r3, #7
   125ea:	f043 0305 	orr.w	r3, r3, #5
   125ee:	e791      	b.n	12514 <process_event+0x1bc>
			__ASSERT_NO_MSG(false);
   125f0:	2500      	movs	r5, #0
   125f2:	f240 1369 	movw	r3, #361	; 0x169
   125f6:	463a      	mov	r2, r7
   125f8:	4640      	mov	r0, r8
   125fa:	490c      	ldr	r1, [pc, #48]	; (1262c <process_event+0x2d4>)
   125fc:	f019 ff19 	bl	2c432 <printk>
   12600:	f240 1169 	movw	r1, #361	; 0x169
   12604:	4638      	mov	r0, r7
   12606:	f01a f931 	bl	2c86c <assert_post_action>
		onoff_transition_fn transit = NULL;
   1260a:	9500      	str	r5, [sp, #0]
   1260c:	e784      	b.n	12518 <process_event+0x1c0>
   1260e:	9000      	str	r0, [sp, #0]
   12610:	e6f1      	b.n	123f6 <process_event+0x9e>
   12612:	4605      	mov	r5, r0
   12614:	e73b      	b.n	1248e <process_event+0x136>
   12616:	bf00      	nop
   12618:	000304b3 	.word	0x000304b3
   1261c:	000304d9 	.word	0x000304d9
   12620:	00030166 	.word	0x00030166
   12624:	000304f0 	.word	0x000304f0
   12628:	00030411 	.word	0x00030411
   1262c:	00032fcf 	.word	0x00032fcf
   12630:	00030433 	.word	0x00030433
   12634:	0003043e 	.word	0x0003043e
   12638:	00030461 	.word	0x00030461
   1263c:	00030478 	.word	0x00030478
   12640:	0003048e 	.word	0x0003048e
   12644:	0003049d 	.word	0x0003049d
				   && !sys_slist_is_empty(&mgr->monitors);
   12648:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1264c:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   12650:	f104 0a14 	add.w	sl, r4, #20
   12654:	4650      	mov	r0, sl
			mgr->flags = flags;
   12656:	83a3      	strh	r3, [r4, #28]
   12658:	f012 fb62 	bl	24d20 <z_spin_unlock_valid>
   1265c:	b968      	cbnz	r0, 1267a <process_event+0x322>
   1265e:	2384      	movs	r3, #132	; 0x84
   12660:	4640      	mov	r0, r8
   12662:	4a3a      	ldr	r2, [pc, #232]	; (1274c <process_event+0x3f4>)
   12664:	493a      	ldr	r1, [pc, #232]	; (12750 <process_event+0x3f8>)
   12666:	f019 fee4 	bl	2c432 <printk>
   1266a:	4651      	mov	r1, sl
   1266c:	4839      	ldr	r0, [pc, #228]	; (12754 <process_event+0x3fc>)
   1266e:	f019 fee0 	bl	2c432 <printk>
   12672:	2184      	movs	r1, #132	; 0x84
   12674:	4835      	ldr	r0, [pc, #212]	; (1274c <process_event+0x3f4>)
   12676:	f01a f8f9 	bl	2c86c <assert_post_action>
   1267a:	9b01      	ldr	r3, [sp, #4]
   1267c:	f383 8811 	msr	BASEPRI, r3
   12680:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   12684:	f1b9 0f00 	cmp.w	r9, #0
   12688:	d138      	bne.n	126fc <process_event+0x3a4>
	while (!sys_slist_is_empty(list)) {
   1268a:	2d00      	cmp	r5, #0
   1268c:	d14c      	bne.n	12728 <process_event+0x3d0>
			if (transit != NULL) {
   1268e:	9b00      	ldr	r3, [sp, #0]
   12690:	b113      	cbz	r3, 12698 <process_event+0x340>
				transit(mgr, transition_complete);
   12692:	4620      	mov	r0, r4
   12694:	4930      	ldr	r1, [pc, #192]	; (12758 <process_event+0x400>)
   12696:	4798      	blx	r3
	__asm__ volatile(
   12698:	f04f 0320 	mov.w	r3, #32
   1269c:	f3ef 8b11 	mrs	fp, BASEPRI
   126a0:	f383 8811 	msr	BASEPRI, r3
   126a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   126a8:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
   126aa:	f8cd b004 	str.w	fp, [sp, #4]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   126ae:	f012 fb29 	bl	24d04 <z_spin_lock_valid>
   126b2:	b968      	cbnz	r0, 126d0 <process_event+0x378>
   126b4:	235c      	movs	r3, #92	; 0x5c
   126b6:	4640      	mov	r0, r8
   126b8:	4a24      	ldr	r2, [pc, #144]	; (1274c <process_event+0x3f4>)
   126ba:	4928      	ldr	r1, [pc, #160]	; (1275c <process_event+0x404>)
   126bc:	f019 feb9 	bl	2c432 <printk>
   126c0:	4651      	mov	r1, sl
   126c2:	4827      	ldr	r0, [pc, #156]	; (12760 <process_event+0x408>)
   126c4:	f019 feb5 	bl	2c432 <printk>
   126c8:	215c      	movs	r1, #92	; 0x5c
   126ca:	4820      	ldr	r0, [pc, #128]	; (1274c <process_event+0x3f4>)
   126cc:	f01a f8ce 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   126d0:	4650      	mov	r0, sl
   126d2:	f012 fb35 	bl	24d40 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   126d6:	8ba3      	ldrh	r3, [r4, #28]
   126d8:	f023 0308 	bic.w	r3, r3, #8
   126dc:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   126de:	8ba3      	ldrh	r3, [r4, #28]
   126e0:	06da      	lsls	r2, r3, #27
   126e2:	d52a      	bpl.n	1273a <process_event+0x3e2>
			evt = EVT_COMPLETE;
   126e4:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   126e6:	f023 0310 	bic.w	r3, r3, #16
   126ea:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   126ec:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   126f0:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   126f4:	2900      	cmp	r1, #0
   126f6:	f47f ae65 	bne.w	123c4 <process_event+0x6c>
out:
   126fa:	e641      	b.n	12380 <process_event+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   126fc:	68a1      	ldr	r1, [r4, #8]
   126fe:	2900      	cmp	r1, #0
   12700:	d0c3      	beq.n	1268a <process_event+0x332>
	return node->next;
   12702:	680b      	ldr	r3, [r1, #0]
   12704:	2b00      	cmp	r3, #0
   12706:	bf38      	it	cc
   12708:	2300      	movcc	r3, #0
   1270a:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   1270c:	684b      	ldr	r3, [r1, #4]
   1270e:	ee18 2a10 	vmov	r2, s16
   12712:	461e      	mov	r6, r3
   12714:	4620      	mov	r0, r4
   12716:	465b      	mov	r3, fp
   12718:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1271a:	f1b9 0f00 	cmp.w	r9, #0
   1271e:	d0b4      	beq.n	1268a <process_event+0x332>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12720:	4649      	mov	r1, r9
   12722:	f8d9 3000 	ldr.w	r3, [r9]
   12726:	e7ed      	b.n	12704 <process_event+0x3ac>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12728:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   1272a:	465b      	mov	r3, fp
   1272c:	ee18 2a10 	vmov	r2, s16
   12730:	4620      	mov	r0, r4
   12732:	682d      	ldr	r5, [r5, #0]
   12734:	f019 feb3 	bl	2c49e <notify_one>
   12738:	e7a7      	b.n	1268a <process_event+0x332>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1273a:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1273e:	bf1e      	ittt	ne
   12740:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   12744:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   12746:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   12748:	e7d0      	b.n	126ec <process_event+0x394>
   1274a:	bf00      	nop
   1274c:	000304b3 	.word	0x000304b3
   12750:	000304d9 	.word	0x000304d9
   12754:	000304f0 	.word	0x000304f0
   12758:	00012765 	.word	0x00012765
   1275c:	00030505 	.word	0x00030505
   12760:	0003051a 	.word	0x0003051a

00012764 <transition_complete>:
{
   12764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12766:	4604      	mov	r4, r0
   12768:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   1276a:	f100 0614 	add.w	r6, r0, #20
   1276e:	f04f 0320 	mov.w	r3, #32
   12772:	f3ef 8711 	mrs	r7, BASEPRI
   12776:	f383 8811 	msr	BASEPRI, r3
   1277a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1277e:	4630      	mov	r0, r6
   12780:	f012 fac0 	bl	24d04 <z_spin_lock_valid>
   12784:	b968      	cbnz	r0, 127a2 <transition_complete+0x3e>
   12786:	235c      	movs	r3, #92	; 0x5c
   12788:	4a0b      	ldr	r2, [pc, #44]	; (127b8 <transition_complete+0x54>)
   1278a:	490c      	ldr	r1, [pc, #48]	; (127bc <transition_complete+0x58>)
   1278c:	480c      	ldr	r0, [pc, #48]	; (127c0 <transition_complete+0x5c>)
   1278e:	f019 fe50 	bl	2c432 <printk>
   12792:	4631      	mov	r1, r6
   12794:	480b      	ldr	r0, [pc, #44]	; (127c4 <transition_complete+0x60>)
   12796:	f019 fe4c 	bl	2c432 <printk>
   1279a:	215c      	movs	r1, #92	; 0x5c
   1279c:	4806      	ldr	r0, [pc, #24]	; (127b8 <transition_complete+0x54>)
   1279e:	f01a f865 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   127a2:	4630      	mov	r0, r6
   127a4:	f012 facc 	bl	24d40 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
   127a8:	463a      	mov	r2, r7
   127aa:	4620      	mov	r0, r4
	mgr->last_res = res;
   127ac:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   127ae:	2101      	movs	r1, #1
}
   127b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   127b4:	f7ff bdd0 	b.w	12358 <process_event>
   127b8:	000304b3 	.word	0x000304b3
   127bc:	00030505 	.word	0x00030505
   127c0:	00030166 	.word	0x00030166
   127c4:	0003051a 	.word	0x0003051a

000127c8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   127c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   127cc:	4604      	mov	r4, r0
   127ce:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   127d0:	f019 fe7b 	bl	2c4ca <validate_args>

	if (rv < 0) {
   127d4:	1e05      	subs	r5, r0, #0
   127d6:	db5e      	blt.n	12896 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   127d8:	f104 0914 	add.w	r9, r4, #20
   127dc:	f04f 0320 	mov.w	r3, #32
   127e0:	f3ef 8a11 	mrs	sl, BASEPRI
   127e4:	f383 8811 	msr	BASEPRI, r3
   127e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   127ec:	4648      	mov	r0, r9
   127ee:	f012 fa89 	bl	24d04 <z_spin_lock_valid>
   127f2:	b968      	cbnz	r0, 12810 <onoff_request+0x48>
   127f4:	235c      	movs	r3, #92	; 0x5c
   127f6:	4a38      	ldr	r2, [pc, #224]	; (128d8 <onoff_request+0x110>)
   127f8:	4938      	ldr	r1, [pc, #224]	; (128dc <onoff_request+0x114>)
   127fa:	4839      	ldr	r0, [pc, #228]	; (128e0 <onoff_request+0x118>)
   127fc:	f019 fe19 	bl	2c432 <printk>
   12800:	4649      	mov	r1, r9
   12802:	4838      	ldr	r0, [pc, #224]	; (128e4 <onoff_request+0x11c>)
   12804:	f019 fe15 	bl	2c432 <printk>
   12808:	215c      	movs	r1, #92	; 0x5c
   1280a:	4833      	ldr	r0, [pc, #204]	; (128d8 <onoff_request+0x110>)
   1280c:	f01a f82e 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   12810:	4648      	mov	r0, r9
   12812:	f012 fa95 	bl	24d40 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   12816:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1281a:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1281c:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1281e:	428b      	cmp	r3, r1
   12820:	f002 0607 	and.w	r6, r2, #7
   12824:	d050      	beq.n	128c8 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   12826:	2e02      	cmp	r6, #2
   12828:	d124      	bne.n	12874 <onoff_request+0xac>
	rv = state;
   1282a:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
   1282c:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
   12830:	3301      	adds	r3, #1
   12832:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12834:	4648      	mov	r0, r9
   12836:	f012 fa73 	bl	24d20 <z_spin_unlock_valid>
   1283a:	b968      	cbnz	r0, 12858 <onoff_request+0x90>
   1283c:	2384      	movs	r3, #132	; 0x84
   1283e:	4a26      	ldr	r2, [pc, #152]	; (128d8 <onoff_request+0x110>)
   12840:	4929      	ldr	r1, [pc, #164]	; (128e8 <onoff_request+0x120>)
   12842:	4827      	ldr	r0, [pc, #156]	; (128e0 <onoff_request+0x118>)
   12844:	f019 fdf5 	bl	2c432 <printk>
   12848:	4649      	mov	r1, r9
   1284a:	4828      	ldr	r0, [pc, #160]	; (128ec <onoff_request+0x124>)
   1284c:	f019 fdf1 	bl	2c432 <printk>
   12850:	2184      	movs	r1, #132	; 0x84
   12852:	4821      	ldr	r0, [pc, #132]	; (128d8 <onoff_request+0x110>)
   12854:	f01a f80a 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   12858:	f38a 8811 	msr	BASEPRI, sl
   1285c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   12860:	f1b8 0f00 	cmp.w	r8, #0
   12864:	d017      	beq.n	12896 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
   12866:	2300      	movs	r3, #0
   12868:	4632      	mov	r2, r6
   1286a:	4639      	mov	r1, r7
   1286c:	4620      	mov	r0, r4
   1286e:	f019 fe16 	bl	2c49e <notify_one>
   12872:	e010      	b.n	12896 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
   12874:	0793      	lsls	r3, r2, #30
   12876:	d001      	beq.n	1287c <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
   12878:	2e06      	cmp	r6, #6
   1287a:	d10f      	bne.n	1289c <onoff_request+0xd4>
	parent->next = child;
   1287c:	2300      	movs	r3, #0
   1287e:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   12880:	6863      	ldr	r3, [r4, #4]
   12882:	b9f3      	cbnz	r3, 128c2 <onoff_request+0xfa>
	list->head = node;
   12884:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   12888:	4635      	mov	r5, r6
   1288a:	b9fe      	cbnz	r6, 128cc <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   1288c:	4652      	mov	r2, sl
   1288e:	2102      	movs	r1, #2
   12890:	4620      	mov	r0, r4
   12892:	f7ff fd61 	bl	12358 <process_event>
		}
	}

	return rv;
}
   12896:	4628      	mov	r0, r5
   12898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   1289c:	2e05      	cmp	r6, #5
   1289e:	d018      	beq.n	128d2 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   128a0:	2e01      	cmp	r6, #1
   128a2:	d00b      	beq.n	128bc <onoff_request+0xf4>
   128a4:	4912      	ldr	r1, [pc, #72]	; (128f0 <onoff_request+0x128>)
   128a6:	480e      	ldr	r0, [pc, #56]	; (128e0 <onoff_request+0x118>)
   128a8:	f240 13c5 	movw	r3, #453	; 0x1c5
   128ac:	4a11      	ldr	r2, [pc, #68]	; (128f4 <onoff_request+0x12c>)
   128ae:	f019 fdc0 	bl	2c432 <printk>
   128b2:	f240 11c5 	movw	r1, #453	; 0x1c5
   128b6:	480f      	ldr	r0, [pc, #60]	; (128f4 <onoff_request+0x12c>)
   128b8:	f019 ffd8 	bl	2c86c <assert_post_action>
		rv = -EIO;
   128bc:	f06f 0504 	mvn.w	r5, #4
   128c0:	e004      	b.n	128cc <onoff_request+0x104>
	parent->next = child;
   128c2:	601f      	str	r7, [r3, #0]
	list->tail = node;
   128c4:	6067      	str	r7, [r4, #4]
}
   128c6:	e7df      	b.n	12888 <onoff_request+0xc0>
		rv = -EAGAIN;
   128c8:	f06f 050a 	mvn.w	r5, #10
   128cc:	f04f 0800 	mov.w	r8, #0
   128d0:	e7b0      	b.n	12834 <onoff_request+0x6c>
		rv = -ENOTSUP;
   128d2:	f06f 0585 	mvn.w	r5, #133	; 0x85
   128d6:	e7f9      	b.n	128cc <onoff_request+0x104>
   128d8:	000304b3 	.word	0x000304b3
   128dc:	00030505 	.word	0x00030505
   128e0:	00030166 	.word	0x00030166
   128e4:	0003051a 	.word	0x0003051a
   128e8:	000304d9 	.word	0x000304d9
   128ec:	000304f0 	.word	0x000304f0
   128f0:	0003049d 	.word	0x0003049d
   128f4:	00030411 	.word	0x00030411

000128f8 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   128f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
   128fc:	f240 746c 	movw	r4, #1900	; 0x76c
   12900:	2500      	movs	r5, #0
	unsigned int m = tm->tm_mon + 1;
   12902:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   12904:	68c2      	ldr	r2, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   12906:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
   1290a:	1e53      	subs	r3, r2, #1
   1290c:	9301      	str	r3, [sp, #4]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   1290e:	6943      	ldr	r3, [r0, #20]
{
   12910:	4680      	mov	r8, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
   12912:	18e4      	adds	r4, r4, r3
   12914:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
   12918:	f1b9 0f02 	cmp.w	r9, #2
   1291c:	bf8c      	ite	hi
   1291e:	2300      	movhi	r3, #0
   12920:	2301      	movls	r3, #1
   12922:	1ae4      	subs	r4, r4, r3
   12924:	f165 0500 	sbc.w	r5, r5, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   12928:	2c00      	cmp	r4, #0
   1292a:	f175 0300 	sbcs.w	r3, r5, #0
   1292e:	da54      	bge.n	129da <timeutil_timegm64+0xe2>
   12930:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   12934:	f44f 72c8 	mov.w	r2, #400	; 0x190
   12938:	2300      	movs	r3, #0
   1293a:	1820      	adds	r0, r4, r0
   1293c:	f145 31ff 	adc.w	r1, r5, #4294967295
   12940:	f7f9 ff3a 	bl	c7b8 <__aeabi_ldivmod>
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   12944:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   12948:	4a27      	ldr	r2, [pc, #156]	; (129e8 <timeutil_timegm64+0xf0>)
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   1294a:	4603      	mov	r3, r0
	unsigned int yoe = y - era * 400;
   1294c:	fb02 4200 	mla	r2, r2, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   12950:	e9d8 0400 	ldrd	r0, r4, [r8]
   12954:	f8d8 8008 	ldr.w	r8, [r8, #8]
   12958:	17e5      	asrs	r5, r4, #31
   1295a:	fbcc 4508 	smlal	r4, r5, ip, r8
   1295e:	fba4 ab0c 	umull	sl, fp, r4, ip
   12962:	fb0c bb05 	mla	fp, ip, r5, fp
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   12966:	f1b9 0f02 	cmp.w	r9, #2
   1296a:	bf8c      	ite	hi
   1296c:	f06f 0e02 	mvnhi.w	lr, #2
   12970:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   12974:	eb1a 0a00 	adds.w	sl, sl, r0
   12978:	eb4b 7be0 	adc.w	fp, fp, r0, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1297c:	f240 106d 	movw	r0, #365	; 0x16d
   12980:	0894      	lsrs	r4, r2, #2
   12982:	fb00 4002 	mla	r0, r0, r2, r4
   12986:	9c01      	ldr	r4, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   12988:	44f1      	add	r9, lr
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1298a:	4420      	add	r0, r4
   1298c:	2464      	movs	r4, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1298e:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   12992:	fbb2 f4f4 	udiv	r4, r2, r4
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   12996:	2205      	movs	r2, #5
   12998:	fb0e fe09 	mul.w	lr, lr, r9
   1299c:	f10e 0e02 	add.w	lr, lr, #2
   129a0:	fbbe fef2 	udiv	lr, lr, r2
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   129a4:	1b04      	subs	r4, r0, r4
	return era * 146097 + (time_t)doe - 719468;
   129a6:	4811      	ldr	r0, [pc, #68]	; (129ec <timeutil_timegm64+0xf4>)
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   129a8:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   129aa:	fba3 2300 	umull	r2, r3, r3, r0
   129ae:	fb00 3301 	mla	r3, r0, r1, r3
   129b2:	490f      	ldr	r1, [pc, #60]	; (129f0 <timeutil_timegm64+0xf8>)
   129b4:	1856      	adds	r6, r2, r1
	time += 86400LL * ndays;
   129b6:	490f      	ldr	r1, [pc, #60]	; (129f4 <timeutil_timegm64+0xfc>)
	return era * 146097 + (time_t)doe - 719468;
   129b8:	f143 37ff 	adc.w	r7, r3, #4294967295
   129bc:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   129c0:	fba6 2301 	umull	r2, r3, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   129c4:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   129c8:	fb01 3307 	mla	r3, r1, r7, r3

	return time;
}
   129cc:	eb12 000a 	adds.w	r0, r2, sl
   129d0:	eb43 010b 	adc.w	r1, r3, fp
   129d4:	b003      	add	sp, #12
   129d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   129da:	f44f 72c8 	mov.w	r2, #400	; 0x190
   129de:	2300      	movs	r3, #0
   129e0:	4620      	mov	r0, r4
   129e2:	4629      	mov	r1, r5
   129e4:	e7ac      	b.n	12940 <timeutil_timegm64+0x48>
   129e6:	bf00      	nop
   129e8:	fffffe70 	.word	0xfffffe70
   129ec:	00023ab1 	.word	0x00023ab1
   129f0:	fff50594 	.word	0xfff50594
   129f4:	00015180 	.word	0x00015180

000129f8 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   129f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   129fc:	4605      	mov	r5, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
   129fe:	4e17      	ldr	r6, [pc, #92]	; (12a5c <z_work_q_main+0x64>)
   12a00:	f8df 8060 	ldr.w	r8, [pc, #96]	; 12a64 <z_work_q_main+0x6c>
   12a04:	f8df 9060 	ldr.w	r9, [pc, #96]	; 12a68 <z_work_q_main+0x70>
	return z_impl_k_queue_get(queue, timeout);
   12a08:	f04f 32ff 	mov.w	r2, #4294967295
   12a0c:	f04f 33ff 	mov.w	r3, #4294967295
   12a10:	4628      	mov	r0, r5
   12a12:	f010 fd37 	bl	23484 <z_impl_k_queue_get>
		if (work == NULL) {
   12a16:	4604      	mov	r4, r0
   12a18:	2800      	cmp	r0, #0
   12a1a:	d0f5      	beq.n	12a08 <z_work_q_main+0x10>
		handler = work->handler;
   12a1c:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
   12a1e:	b967      	cbnz	r7, 12a3a <z_work_q_main+0x42>
   12a20:	4641      	mov	r1, r8
   12a22:	231c      	movs	r3, #28
   12a24:	4632      	mov	r2, r6
   12a26:	4648      	mov	r0, r9
   12a28:	f019 fd03 	bl	2c432 <printk>
   12a2c:	480c      	ldr	r0, [pc, #48]	; (12a60 <z_work_q_main+0x68>)
   12a2e:	f019 fd00 	bl	2c432 <printk>
   12a32:	211c      	movs	r1, #28
   12a34:	4630      	mov	r0, r6
   12a36:	f019 ff19 	bl	2c86c <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12a3a:	f104 0308 	add.w	r3, r4, #8
   12a3e:	e8d3 2fef 	ldaex	r2, [r3]
   12a42:	f022 0101 	bic.w	r1, r2, #1
   12a46:	e8c3 1fe0 	stlex	r0, r1, [r3]
   12a4a:	2800      	cmp	r0, #0
   12a4c:	d1f7      	bne.n	12a3e <z_work_q_main+0x46>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   12a4e:	07d3      	lsls	r3, r2, #31
   12a50:	d501      	bpl.n	12a56 <z_work_q_main+0x5e>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   12a52:	4620      	mov	r0, r4
   12a54:	47b8      	blx	r7
	z_impl_k_yield();
   12a56:	f011 fdb1 	bl	245bc <z_impl_k_yield>
   12a5a:	e7d5      	b.n	12a08 <z_work_q_main+0x10>
   12a5c:	00030532 	.word	0x00030532
   12a60:	0003056c 	.word	0x0003056c
   12a64:	00030555 	.word	0x00030555
   12a68:	00030166 	.word	0x00030166

00012a6c <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   12a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   12a6e:	460e      	mov	r6, r1
   12a70:	2900      	cmp	r1, #0
   12a72:	f000 8083 	beq.w	12b7c <sys_heap_free+0x110>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   12a76:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12a78:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   12a7a:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12a7c:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
   12a7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   12a82:	bf2c      	ite	cs
   12a84:	2408      	movcs	r4, #8
   12a86:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12a88:	1b0c      	subs	r4, r1, r4
   12a8a:	1b64      	subs	r4, r4, r5
   12a8c:	bf48      	it	mi
   12a8e:	3407      	addmi	r4, #7
   12a90:	10e4      	asrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12a92:	4621      	mov	r1, r4
   12a94:	f019 fd59 	bl	2c54a <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   12a98:	07c3      	lsls	r3, r0, #31
   12a9a:	d40d      	bmi.n	12ab8 <sys_heap_free+0x4c>
   12a9c:	2399      	movs	r3, #153	; 0x99
   12a9e:	4a38      	ldr	r2, [pc, #224]	; (12b80 <sys_heap_free+0x114>)
   12aa0:	4938      	ldr	r1, [pc, #224]	; (12b84 <sys_heap_free+0x118>)
   12aa2:	4839      	ldr	r0, [pc, #228]	; (12b88 <sys_heap_free+0x11c>)
   12aa4:	f019 fcc5 	bl	2c432 <printk>
   12aa8:	4631      	mov	r1, r6
   12aaa:	4838      	ldr	r0, [pc, #224]	; (12b8c <sys_heap_free+0x120>)
   12aac:	f019 fcc1 	bl	2c432 <printk>
   12ab0:	2199      	movs	r1, #153	; 0x99
   12ab2:	4833      	ldr	r0, [pc, #204]	; (12b80 <sys_heap_free+0x114>)
   12ab4:	f019 feda 	bl	2c86c <assert_post_action>
	return c + chunk_size(h, c);
   12ab8:	4621      	mov	r1, r4
   12aba:	4628      	mov	r0, r5
   12abc:	f019 fd5b 	bl	2c576 <chunk_size>
   12ac0:	1827      	adds	r7, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
   12ac2:	2200      	movs	r2, #0
   12ac4:	4639      	mov	r1, r7
   12ac6:	4628      	mov	r0, r5
   12ac8:	f019 fd3f 	bl	2c54a <chunk_field>
   12acc:	1a38      	subs	r0, r7, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   12ace:	4284      	cmp	r4, r0
   12ad0:	d00d      	beq.n	12aee <sys_heap_free+0x82>
   12ad2:	23a1      	movs	r3, #161	; 0xa1
   12ad4:	4a2a      	ldr	r2, [pc, #168]	; (12b80 <sys_heap_free+0x114>)
   12ad6:	492e      	ldr	r1, [pc, #184]	; (12b90 <sys_heap_free+0x124>)
   12ad8:	482b      	ldr	r0, [pc, #172]	; (12b88 <sys_heap_free+0x11c>)
   12ada:	f019 fcaa 	bl	2c432 <printk>
   12ade:	4631      	mov	r1, r6
   12ae0:	482c      	ldr	r0, [pc, #176]	; (12b94 <sys_heap_free+0x128>)
   12ae2:	f019 fca6 	bl	2c432 <printk>
   12ae6:	21a1      	movs	r1, #161	; 0xa1
   12ae8:	4825      	ldr	r0, [pc, #148]	; (12b80 <sys_heap_free+0x114>)
   12aea:	f019 febf 	bl	2c86c <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
   12aee:	2200      	movs	r2, #0
   12af0:	4621      	mov	r1, r4
   12af2:	4628      	mov	r0, r5
   12af4:	f019 fd45 	bl	2c582 <set_chunk_used>
	return c + chunk_size(h, c);
   12af8:	4621      	mov	r1, r4
   12afa:	f019 fd3c 	bl	2c576 <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12afe:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
   12b00:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12b02:	4628      	mov	r0, r5
   12b04:	9101      	str	r1, [sp, #4]
   12b06:	f019 fd20 	bl	2c54a <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   12b0a:	f010 0f01 	tst.w	r0, #1
   12b0e:	9901      	ldr	r1, [sp, #4]
   12b10:	d10b      	bne.n	12b2a <sys_heap_free+0xbe>
		free_list_remove(h, right_chunk(h, c));
   12b12:	4628      	mov	r0, r5
   12b14:	f019 fddc 	bl	2c6d0 <free_list_remove>
	return c + chunk_size(h, c);
   12b18:	4621      	mov	r1, r4
   12b1a:	4628      	mov	r0, r5
   12b1c:	f019 fd2b 	bl	2c576 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   12b20:	4621      	mov	r1, r4
   12b22:	1822      	adds	r2, r4, r0
   12b24:	4628      	mov	r0, r5
   12b26:	f019 fd5e 	bl	2c5e6 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   12b2a:	2200      	movs	r2, #0
   12b2c:	4621      	mov	r1, r4
   12b2e:	4628      	mov	r0, r5
   12b30:	f019 fd0b 	bl	2c54a <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12b34:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
   12b36:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   12b38:	4628      	mov	r0, r5
   12b3a:	9101      	str	r1, [sp, #4]
   12b3c:	f019 fd05 	bl	2c54a <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   12b40:	f010 0601 	ands.w	r6, r0, #1
   12b44:	9901      	ldr	r1, [sp, #4]
   12b46:	d112      	bne.n	12b6e <sys_heap_free+0x102>
		free_list_remove(h, left_chunk(h, c));
   12b48:	4628      	mov	r0, r5
   12b4a:	f019 fdc1 	bl	2c6d0 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   12b4e:	4621      	mov	r1, r4
   12b50:	4632      	mov	r2, r6
   12b52:	4628      	mov	r0, r5
   12b54:	f019 fcf9 	bl	2c54a <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   12b58:	4622      	mov	r2, r4
   12b5a:	1a21      	subs	r1, r4, r0
   12b5c:	4628      	mov	r0, r5
   12b5e:	f019 fd42 	bl	2c5e6 <merge_chunks>
   12b62:	4621      	mov	r1, r4
   12b64:	4632      	mov	r2, r6
   12b66:	4628      	mov	r0, r5
   12b68:	f019 fcef 	bl	2c54a <chunk_field>
   12b6c:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   12b6e:	4621      	mov	r1, r4
   12b70:	4628      	mov	r0, r5
	free_chunk(h, c);
}
   12b72:	b003      	add	sp, #12
   12b74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	free_list_add(h, c);
   12b78:	f019 be04 	b.w	2c784 <free_list_add>
}
   12b7c:	b003      	add	sp, #12
   12b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12b80:	00030587 	.word	0x00030587
   12b84:	000305a8 	.word	0x000305a8
   12b88:	00030166 	.word	0x00030166
   12b8c:	000305b9 	.word	0x000305b9
   12b90:	000305f1 	.word	0x000305f1
   12b94:	00030617 	.word	0x00030617

00012b98 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
   12b98:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   12b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12b9e:	4607      	mov	r7, r0
   12ba0:	460d      	mov	r5, r1
   12ba2:	4616      	mov	r6, r2
   12ba4:	d212      	bcs.n	12bcc <sys_heap_init+0x34>
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   12ba6:	2a04      	cmp	r2, #4
   12ba8:	d80e      	bhi.n	12bc8 <sys_heap_init+0x30>
   12baa:	4943      	ldr	r1, [pc, #268]	; (12cb8 <sys_heap_init+0x120>)
   12bac:	f44f 7397 	mov.w	r3, #302	; 0x12e
   12bb0:	4a42      	ldr	r2, [pc, #264]	; (12cbc <sys_heap_init+0x124>)
   12bb2:	4843      	ldr	r0, [pc, #268]	; (12cc0 <sys_heap_init+0x128>)
   12bb4:	f019 fc3d 	bl	2c432 <printk>
   12bb8:	4842      	ldr	r0, [pc, #264]	; (12cc4 <sys_heap_init+0x12c>)
   12bba:	f019 fc3a 	bl	2c432 <printk>
   12bbe:	f44f 7197 	mov.w	r1, #302	; 0x12e
   12bc2:	483e      	ldr	r0, [pc, #248]	; (12cbc <sys_heap_init+0x124>)
   12bc4:	f019 fe52 	bl	2c86c <assert_post_action>
   12bc8:	2204      	movs	r2, #4
   12bca:	e000      	b.n	12bce <sys_heap_init+0x36>
   12bcc:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
   12bce:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12bd0:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12bd2:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12bd4:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12bd8:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   12bdc:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12bde:	2d17      	cmp	r5, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   12be0:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12be4:	d80e      	bhi.n	12c04 <sys_heap_init+0x6c>
   12be6:	4938      	ldr	r1, [pc, #224]	; (12cc8 <sys_heap_init+0x130>)
   12be8:	f240 1337 	movw	r3, #311	; 0x137
   12bec:	4a33      	ldr	r2, [pc, #204]	; (12cbc <sys_heap_init+0x124>)
   12bee:	4834      	ldr	r0, [pc, #208]	; (12cc0 <sys_heap_init+0x128>)
   12bf0:	f019 fc1f 	bl	2c432 <printk>
   12bf4:	4833      	ldr	r0, [pc, #204]	; (12cc4 <sys_heap_init+0x12c>)
   12bf6:	f019 fc1c 	bl	2c432 <printk>
   12bfa:	f240 1137 	movw	r1, #311	; 0x137
   12bfe:	482f      	ldr	r0, [pc, #188]	; (12cbc <sys_heap_init+0x124>)
   12c00:	f019 fe34 	bl	2c86c <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   12c04:	2200      	movs	r2, #0
   12c06:	2300      	movs	r3, #0
	heap->heap = h;
   12c08:	603c      	str	r4, [r7, #0]
	h->chunk0_hdr_area = 0;
   12c0a:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   12c0e:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   12c10:	4631      	mov	r1, r6
	h->avail_buckets = 0;
   12c12:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   12c14:	4620      	mov	r0, r4
	h->len = buf_sz;
   12c16:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   12c18:	f019 fcd9 	bl	2c5ce <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
   12c1c:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   12c1e:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   12c20:	1c47      	adds	r7, r0, #1
   12c22:	4620      	mov	r0, r4
   12c24:	f019 fcc9 	bl	2c5ba <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   12c28:	351b      	adds	r5, #27
   12c2a:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
   12c2c:	4428      	add	r0, r5
   12c2e:	42b0      	cmp	r0, r6
   12c30:	d30e      	bcc.n	12c50 <sys_heap_init+0xb8>
   12c32:	4926      	ldr	r1, [pc, #152]	; (12ccc <sys_heap_init+0x134>)
   12c34:	f240 1343 	movw	r3, #323	; 0x143
   12c38:	4a20      	ldr	r2, [pc, #128]	; (12cbc <sys_heap_init+0x124>)
   12c3a:	4821      	ldr	r0, [pc, #132]	; (12cc0 <sys_heap_init+0x128>)
   12c3c:	f019 fbf9 	bl	2c432 <printk>
   12c40:	4820      	ldr	r0, [pc, #128]	; (12cc4 <sys_heap_init+0x12c>)
   12c42:	f019 fbf6 	bl	2c432 <printk>
   12c46:	f240 1143 	movw	r1, #323	; 0x143
   12c4a:	481c      	ldr	r0, [pc, #112]	; (12cbc <sys_heap_init+0x124>)
   12c4c:	f019 fe0e 	bl	2c86c <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
   12c50:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   12c52:	4619      	mov	r1, r3
   12c54:	f104 0210 	add.w	r2, r4, #16
	for (int i = 0; i < nb_buckets; i++) {
   12c58:	42bb      	cmp	r3, r7
   12c5a:	db29      	blt.n	12cb0 <sys_heap_init+0x118>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   12c5c:	462a      	mov	r2, r5
   12c5e:	4620      	mov	r0, r4
   12c60:	2100      	movs	r1, #0
   12c62:	f019 fca6 	bl	2c5b2 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   12c66:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
   12c68:	4620      	mov	r0, r4
   12c6a:	2201      	movs	r2, #1
   12c6c:	2100      	movs	r1, #0
   12c6e:	f019 fc88 	bl	2c582 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   12c72:	463a      	mov	r2, r7
   12c74:	4629      	mov	r1, r5
   12c76:	f019 fc9c 	bl	2c5b2 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   12c7a:	462b      	mov	r3, r5
   12c7c:	4629      	mov	r1, r5
   12c7e:	4620      	mov	r0, r4
   12c80:	2200      	movs	r2, #0
   12c82:	f019 fc6d 	bl	2c560 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   12c86:	4631      	mov	r1, r6
   12c88:	4620      	mov	r0, r4
   12c8a:	2200      	movs	r2, #0
   12c8c:	f019 fc91 	bl	2c5b2 <set_chunk_size>
   12c90:	463b      	mov	r3, r7
   12c92:	4631      	mov	r1, r6
   12c94:	4620      	mov	r0, r4
   12c96:	2200      	movs	r2, #0
   12c98:	f019 fc62 	bl	2c560 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   12c9c:	4631      	mov	r1, r6
   12c9e:	4620      	mov	r0, r4
   12ca0:	2201      	movs	r2, #1
   12ca2:	f019 fc6e 	bl	2c582 <set_chunk_used>

	free_list_add(h, chunk0_size);
   12ca6:	4629      	mov	r1, r5
}
   12ca8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   12cac:	f019 bd6a 	b.w	2c784 <free_list_add>
		h->buckets[i].next = 0;
   12cb0:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   12cb4:	3301      	adds	r3, #1
   12cb6:	e7cf      	b.n	12c58 <sys_heap_init+0xc0>
   12cb8:	00030653 	.word	0x00030653
   12cbc:	00030587 	.word	0x00030587
   12cc0:	00030166 	.word	0x00030166
   12cc4:	00030674 	.word	0x00030674
   12cc8:	0003068d 	.word	0x0003068d
   12ccc:	000306b5 	.word	0x000306b5

00012cd0 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   12cd0:	f04f 0220 	mov.w	r2, #32
   12cd4:	f3ef 8311 	mrs	r3, BASEPRI
   12cd8:	f382 8811 	msr	BASEPRI, r2
   12cdc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   12ce0:	2101      	movs	r1, #1
   12ce2:	4a04      	ldr	r2, [pc, #16]	; (12cf4 <nordicsemi_nrf91_init+0x24>)
   12ce4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   12ce8:	f383 8811 	msr	BASEPRI, r3
   12cec:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   12cf0:	2000      	movs	r0, #0
   12cf2:	4770      	bx	lr
   12cf4:	40039000 	.word	0x40039000

00012cf8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   12cf8:	b120      	cbz	r0, 12d04 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   12cfa:	4b03      	ldr	r3, [pc, #12]	; (12d08 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   12cfc:	0180      	lsls	r0, r0, #6
   12cfe:	f043 0301 	orr.w	r3, r3, #1
   12d02:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   12d04:	4770      	bx	lr
   12d06:	bf00      	nop
   12d08:	0002f100 	.word	0x0002f100

00012d0c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   12d0c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   12d0e:	2200      	movs	r2, #0
{
   12d10:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   12d12:	490f      	ldr	r1, [pc, #60]	; (12d50 <enable_logger+0x44>)
   12d14:	480f      	ldr	r0, [pc, #60]	; (12d54 <enable_logger+0x48>)
   12d16:	f01b ff4d 	bl	2ebb4 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12d1a:	2200      	movs	r2, #0
   12d1c:	2300      	movs	r3, #0
   12d1e:	2400      	movs	r4, #0
   12d20:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12d24:	230e      	movs	r3, #14
   12d26:	4d0c      	ldr	r5, [pc, #48]	; (12d58 <enable_logger+0x4c>)
   12d28:	e9cd 3403 	strd	r3, r4, [sp, #12]
   12d2c:	f44f 7240 	mov.w	r2, #768	; 0x300
   12d30:	4628      	mov	r0, r5
   12d32:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12d36:	4b09      	ldr	r3, [pc, #36]	; (12d5c <enable_logger+0x50>)
   12d38:	4909      	ldr	r1, [pc, #36]	; (12d60 <enable_logger+0x54>)
   12d3a:	9400      	str	r4, [sp, #0]
   12d3c:	f011 ff04 	bl	24b48 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   12d40:	4908      	ldr	r1, [pc, #32]	; (12d64 <enable_logger+0x58>)
   12d42:	4628      	mov	r0, r5
   12d44:	f01b fe9e 	bl	2ea84 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   12d48:	4620      	mov	r0, r4
   12d4a:	b009      	add	sp, #36	; 0x24
   12d4c:	bd30      	pop	{r4, r5, pc}
   12d4e:	bf00      	nop
   12d50:	00012d69 	.word	0x00012d69
   12d54:	20020dc0 	.word	0x20020dc0
   12d58:	20020df8 	.word	0x20020df8
   12d5c:	00013219 	.word	0x00013219
   12d60:	20027438 	.word	0x20027438
   12d64:	000306e2 	.word	0x000306e2

00012d68 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   12d68:	4801      	ldr	r0, [pc, #4]	; (12d70 <log_process_thread_timer_expiry_fn+0x8>)
   12d6a:	f011 bdab 	b.w	248c4 <z_impl_k_sem_give>
   12d6e:	bf00      	nop
   12d70:	20020c54 	.word	0x20020c54

00012d74 <z_log_get_s_mask>:
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   12d74:	2920      	cmp	r1, #32
{
   12d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d78:	4605      	mov	r5, r0
   12d7a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   12d7c:	d909      	bls.n	12d92 <z_log_get_s_mask+0x1e>
   12d7e:	4914      	ldr	r1, [pc, #80]	; (12dd0 <z_log_get_s_mask+0x5c>)
   12d80:	4814      	ldr	r0, [pc, #80]	; (12dd4 <z_log_get_s_mask+0x60>)
   12d82:	235b      	movs	r3, #91	; 0x5b
   12d84:	4a14      	ldr	r2, [pc, #80]	; (12dd8 <z_log_get_s_mask+0x64>)
   12d86:	f019 fb54 	bl	2c432 <printk>
   12d8a:	215b      	movs	r1, #91	; 0x5b
   12d8c:	4812      	ldr	r0, [pc, #72]	; (12dd8 <z_log_get_s_mask+0x64>)
   12d8e:	f019 fd6d 	bl	2c86c <assert_post_action>
			arm = false;
   12d92:	2000      	movs	r0, #0
				mask |= BIT(arg);
   12d94:	2701      	movs	r7, #1
			arm = false;
   12d96:	4603      	mov	r3, r0
   12d98:	4602      	mov	r2, r0
		} else if (arm && isalpha((int)curr)) {
   12d9a:	4e10      	ldr	r6, [pc, #64]	; (12ddc <z_log_get_s_mask+0x68>)
	while ((curr = *str++) && arg < nargs) {
   12d9c:	f815 1b01 	ldrb.w	r1, [r5], #1
   12da0:	b109      	cbz	r1, 12da6 <z_log_get_s_mask+0x32>
   12da2:	42a3      	cmp	r3, r4
   12da4:	d300      	bcc.n	12da8 <z_log_get_s_mask+0x34>
}
   12da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (curr == '%') {
   12da8:	2925      	cmp	r1, #37	; 0x25
   12daa:	d102      	bne.n	12db2 <z_log_get_s_mask+0x3e>
			arm = !arm;
   12dac:	f082 0201 	eor.w	r2, r2, #1
   12db0:	e7f4      	b.n	12d9c <z_log_get_s_mask+0x28>
		} else if (arm && isalpha((int)curr)) {
   12db2:	2a00      	cmp	r2, #0
   12db4:	d0f2      	beq.n	12d9c <z_log_get_s_mask+0x28>
   12db6:	f811 c006 	ldrb.w	ip, [r1, r6]
   12dba:	f01c 0f03 	tst.w	ip, #3
   12dbe:	d0ed      	beq.n	12d9c <z_log_get_s_mask+0x28>
			if (curr == 's') {
   12dc0:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
   12dc2:	bf04      	itt	eq
   12dc4:	fa07 f203 	lsleq.w	r2, r7, r3
   12dc8:	4310      	orreq	r0, r2
			arg++;
   12dca:	3301      	adds	r3, #1
			arm = false;
   12dcc:	2200      	movs	r2, #0
   12dce:	e7e5      	b.n	12d9c <z_log_get_s_mask+0x28>
   12dd0:	00030717 	.word	0x00030717
   12dd4:	00030166 	.word	0x00030166
   12dd8:	000306ea 	.word	0x000306ea
   12ddc:	0002f961 	.word	0x0002f961

00012de0 <log_core_init>:
{
   12de0:	b508      	push	{r3, lr}
		log_msg_pool_init();
   12de2:	f000 fa93 	bl	1330c <log_msg_pool_init>
		log_list_init(&list);
   12de6:	4809      	ldr	r0, [pc, #36]	; (12e0c <log_core_init+0x2c>)
   12de8:	f019 fd4a 	bl	2c880 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   12dec:	2304      	movs	r3, #4
   12dee:	2234      	movs	r2, #52	; 0x34
   12df0:	4907      	ldr	r1, [pc, #28]	; (12e10 <log_core_init+0x30>)
   12df2:	4808      	ldr	r0, [pc, #32]	; (12e14 <log_core_init+0x34>)
   12df4:	f01b fda6 	bl	2e944 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
   12df8:	4b07      	ldr	r3, [pc, #28]	; (12e18 <log_core_init+0x38>)
   12dfa:	4a08      	ldr	r2, [pc, #32]	; (12e1c <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
   12dfc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   12e00:	601a      	str	r2, [r3, #0]
}
   12e02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
   12e06:	f000 bd77 	b.w	138f8 <log_output_timestamp_freq_set>
   12e0a:	bf00      	nop
   12e0c:	200214fc 	.word	0x200214fc
   12e10:	2002a078 	.word	0x2002a078
   12e14:	20021504 	.word	0x20021504
   12e18:	20020430 	.word	0x20020430
   12e1c:	0002c8c5 	.word	0x0002c8c5

00012e20 <dropped_notify>:
{
   12e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12e22:	2500      	movs	r5, #0
   12e24:	4b0d      	ldr	r3, [pc, #52]	; (12e5c <dropped_notify+0x3c>)
   12e26:	e8d3 7fef 	ldaex	r7, [r3]
   12e2a:	e8c3 5fe2 	stlex	r2, r5, [r3]
   12e2e:	2a00      	cmp	r2, #0
   12e30:	d1f9      	bne.n	12e26 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   12e32:	4c0b      	ldr	r4, [pc, #44]	; (12e60 <dropped_notify+0x40>)
   12e34:	4e0b      	ldr	r6, [pc, #44]	; (12e64 <dropped_notify+0x44>)
   12e36:	1b36      	subs	r6, r6, r4
   12e38:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   12e3a:	42b5      	cmp	r5, r6
   12e3c:	db00      	blt.n	12e40 <dropped_notify+0x20>
}
   12e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   12e40:	4620      	mov	r0, r4
   12e42:	f019 fd33 	bl	2c8ac <log_backend_is_active>
   12e46:	b128      	cbz	r0, 12e54 <dropped_notify+0x34>
	if (backend->api->dropped != NULL) {
   12e48:	6823      	ldr	r3, [r4, #0]
   12e4a:	68db      	ldr	r3, [r3, #12]
   12e4c:	b113      	cbz	r3, 12e54 <dropped_notify+0x34>
		backend->api->dropped(backend, cnt);
   12e4e:	4639      	mov	r1, r7
   12e50:	4620      	mov	r0, r4
   12e52:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   12e54:	3501      	adds	r5, #1
   12e56:	3410      	adds	r4, #16
   12e58:	e7ef      	b.n	12e3a <dropped_notify+0x1a>
   12e5a:	bf00      	nop
   12e5c:	200214f4 	.word	0x200214f4
   12e60:	0002f094 	.word	0x0002f094
   12e64:	0002f0a4 	.word	0x0002f0a4

00012e68 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12e68:	4b04      	ldr	r3, [pc, #16]	; (12e7c <log_dropped+0x14>)
   12e6a:	e8d3 2fef 	ldaex	r2, [r3]
   12e6e:	3201      	adds	r2, #1
   12e70:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12e74:	2900      	cmp	r1, #0
   12e76:	d1f8      	bne.n	12e6a <log_dropped+0x2>
}
   12e78:	4770      	bx	lr
   12e7a:	bf00      	nop
   12e7c:	200214f4 	.word	0x200214f4

00012e80 <log_source_name_get>:
   12e80:	4a04      	ldr	r2, [pc, #16]	; (12e94 <log_source_name_get+0x14>)
   12e82:	4b05      	ldr	r3, [pc, #20]	; (12e98 <log_source_name_get+0x18>)
   12e84:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   12e86:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   12e8a:	bf34      	ite	cc
   12e8c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   12e90:	2000      	movcs	r0, #0
}
   12e92:	4770      	bx	lr
   12e94:	0002eff4 	.word	0x0002eff4
   12e98:	0002f094 	.word	0x0002f094

00012e9c <log_backend_enable>:
{
   12e9c:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
   12e9e:	4c10      	ldr	r4, [pc, #64]	; (12ee0 <log_backend_enable+0x44>)
{
   12ea0:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   12ea2:	1b04      	subs	r4, r0, r4
   12ea4:	1124      	asrs	r4, r4, #4
   12ea6:	3401      	adds	r4, #1
{
   12ea8:	460e      	mov	r6, r1
	log_backend_id_set(backend, id);
   12eaa:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   12eac:	b948      	cbnz	r0, 12ec2 <log_backend_enable+0x26>
   12eae:	490d      	ldr	r1, [pc, #52]	; (12ee4 <log_backend_enable+0x48>)
   12eb0:	480d      	ldr	r0, [pc, #52]	; (12ee8 <log_backend_enable+0x4c>)
   12eb2:	23c0      	movs	r3, #192	; 0xc0
   12eb4:	4a0d      	ldr	r2, [pc, #52]	; (12eec <log_backend_enable+0x50>)
   12eb6:	f019 fabc 	bl	2c432 <printk>
   12eba:	21c0      	movs	r1, #192	; 0xc0
   12ebc:	480b      	ldr	r0, [pc, #44]	; (12eec <log_backend_enable+0x50>)
   12ebe:	f019 fcd5 	bl	2c86c <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   12ec2:	2201      	movs	r2, #1
	backend->cb->id = id;
   12ec4:	686b      	ldr	r3, [r5, #4]
   12ec6:	711c      	strb	r4, [r3, #4]
	if (!backend_attached) {
   12ec8:	4c09      	ldr	r4, [pc, #36]	; (12ef0 <log_backend_enable+0x54>)
	backend->cb->active = true;
   12eca:	715a      	strb	r2, [r3, #5]
   12ecc:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   12ece:	601e      	str	r6, [r3, #0]
   12ed0:	b912      	cbnz	r2, 12ed8 <log_backend_enable+0x3c>
   12ed2:	4808      	ldr	r0, [pc, #32]	; (12ef4 <log_backend_enable+0x58>)
   12ed4:	f011 fcf6 	bl	248c4 <z_impl_k_sem_give>
	backend_attached = true;
   12ed8:	2301      	movs	r3, #1
   12eda:	7023      	strb	r3, [r4, #0]
}
   12edc:	bd70      	pop	{r4, r5, r6, pc}
   12ede:	bf00      	nop
   12ee0:	0002f094 	.word	0x0002f094
   12ee4:	00030760 	.word	0x00030760
   12ee8:	00030166 	.word	0x00030166
   12eec:	0003072f 	.word	0x0003072f
   12ef0:	20024737 	.word	0x20024737
   12ef4:	20020c54 	.word	0x20020c54

00012ef8 <log_init>:
{
   12ef8:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
   12efa:	4b14      	ldr	r3, [pc, #80]	; (12f4c <log_init+0x54>)
   12efc:	4c14      	ldr	r4, [pc, #80]	; (12f50 <log_init+0x58>)
   12efe:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   12f00:	2b9f      	cmp	r3, #159	; 0x9f
   12f02:	ea4f 1623 	mov.w	r6, r3, asr #4
   12f06:	d906      	bls.n	12f16 <log_init+0x1e>
   12f08:	f240 210b 	movw	r1, #523	; 0x20b
   12f0c:	4b11      	ldr	r3, [pc, #68]	; (12f54 <log_init+0x5c>)
   12f0e:	4a12      	ldr	r2, [pc, #72]	; (12f58 <log_init+0x60>)
   12f10:	4812      	ldr	r0, [pc, #72]	; (12f5c <log_init+0x64>)
   12f12:	f012 fef1 	bl	25cf8 <__assert_func>
   12f16:	4b12      	ldr	r3, [pc, #72]	; (12f60 <log_init+0x68>)
   12f18:	e8d3 5fef 	ldaex	r5, [r3]
   12f1c:	1c6a      	adds	r2, r5, #1
   12f1e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12f22:	2900      	cmp	r1, #0
   12f24:	d1f8      	bne.n	12f18 <log_init+0x20>
	if (atomic_inc(&initialized) != 0) {
   12f26:	b90d      	cbnz	r5, 12f2c <log_init+0x34>
	for (i = 0; i < log_backend_count_get(); i++) {
   12f28:	42b5      	cmp	r5, r6
   12f2a:	d100      	bne.n	12f2e <log_init+0x36>
}
   12f2c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   12f2e:	7b23      	ldrb	r3, [r4, #12]
   12f30:	b143      	cbz	r3, 12f44 <log_init+0x4c>
			if (backend->api->init != NULL) {
   12f32:	6823      	ldr	r3, [r4, #0]
   12f34:	695b      	ldr	r3, [r3, #20]
   12f36:	b103      	cbz	r3, 12f3a <log_init+0x42>
				backend->api->init();
   12f38:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   12f3a:	2204      	movs	r2, #4
   12f3c:	2100      	movs	r1, #0
   12f3e:	4620      	mov	r0, r4
   12f40:	f7ff ffac 	bl	12e9c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   12f44:	3501      	adds	r5, #1
   12f46:	3410      	adds	r4, #16
   12f48:	e7ee      	b.n	12f28 <log_init+0x30>
   12f4a:	bf00      	nop
   12f4c:	0002f0a4 	.word	0x0002f0a4
   12f50:	0002f094 	.word	0x0002f094
   12f54:	00030777 	.word	0x00030777
   12f58:	00030825 	.word	0x00030825
   12f5c:	000306ea 	.word	0x000306ea
   12f60:	200214f8 	.word	0x200214f8

00012f64 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   12f64:	4b15      	ldr	r3, [pc, #84]	; (12fbc <log_strdup+0x58>)
{
   12f66:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   12f68:	4298      	cmp	r0, r3
{
   12f6a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   12f6c:	d302      	bcc.n	12f74 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   12f6e:	4b14      	ldr	r3, [pc, #80]	; (12fc0 <log_strdup+0x5c>)
   12f70:	4298      	cmp	r0, r3
   12f72:	d31d      	bcc.n	12fb0 <log_strdup+0x4c>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   12f74:	2200      	movs	r2, #0
   12f76:	2300      	movs	r3, #0
   12f78:	4812      	ldr	r0, [pc, #72]	; (12fc4 <log_strdup+0x60>)
   12f7a:	a901      	add	r1, sp, #4
   12f7c:	f00f fe0e 	bl	22b9c <k_mem_slab_alloc>
	if (err != 0) {
   12f80:	4605      	mov	r5, r0
   12f82:	b9c0      	cbnz	r0, 12fb6 <log_strdup+0x52>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12f84:	2201      	movs	r2, #1
   12f86:	9b01      	ldr	r3, [sp, #4]
   12f88:	e8d3 1fef 	ldaex	r1, [r3]
   12f8c:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12f90:	2800      	cmp	r0, #0
   12f92:	d1f9      	bne.n	12f88 <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   12f94:	9e01      	ldr	r6, [sp, #4]
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   12f96:	222d      	movs	r2, #45	; 0x2d
   12f98:	1d33      	adds	r3, r6, #4
   12f9a:	4618      	mov	r0, r3
   12f9c:	4621      	mov	r1, r4
   12f9e:	f013 fea3 	bl	26ce8 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   12fa2:	227e      	movs	r2, #126	; 0x7e
   12fa4:	4603      	mov	r3, r0
   12fa6:	f886 2031 	strb.w	r2, [r6, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   12faa:	f886 5032 	strb.w	r5, [r6, #50]	; 0x32
	return dup->buf;
   12fae:	461c      	mov	r4, r3
}
   12fb0:	4620      	mov	r0, r4
   12fb2:	b002      	add	sp, #8
   12fb4:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
   12fb6:	4b04      	ldr	r3, [pc, #16]	; (12fc8 <log_strdup+0x64>)
   12fb8:	e7f9      	b.n	12fae <log_strdup+0x4a>
   12fba:	bf00      	nop
   12fbc:	0002ed38 	.word	0x0002ed38
   12fc0:	0003339c 	.word	0x0003339c
   12fc4:	20021504 	.word	0x20021504
   12fc8:	000307aa 	.word	0x000307aa

00012fcc <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   12fcc:	b148      	cbz	r0, 12fe2 <log_is_strdup+0x16>
   12fce:	4b05      	ldr	r3, [pc, #20]	; (12fe4 <log_is_strdup+0x18>)
   12fd0:	4298      	cmp	r0, r3
   12fd2:	d305      	bcc.n	12fe0 <log_is_strdup+0x14>
   12fd4:	33d0      	adds	r3, #208	; 0xd0
   12fd6:	4298      	cmp	r0, r3
   12fd8:	bf2c      	ite	cs
   12fda:	2000      	movcs	r0, #0
   12fdc:	2001      	movcc	r0, #1
   12fde:	4770      	bx	lr
   12fe0:	2000      	movs	r0, #0
}
   12fe2:	4770      	bx	lr
   12fe4:	2002a078 	.word	0x2002a078

00012fe8 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
   12fe8:	4b4c      	ldr	r3, [pc, #304]	; (1311c <z_impl_log_process+0x134>)
{
   12fea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   12fee:	781b      	ldrb	r3, [r3, #0]
{
   12ff0:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   12ff2:	b903      	cbnz	r3, 12ff6 <z_impl_log_process+0xe>
   12ff4:	b340      	cbz	r0, 13048 <z_impl_log_process+0x60>
	__asm__ volatile(
   12ff6:	f04f 0320 	mov.w	r3, #32
   12ffa:	f3ef 8611 	mrs	r6, BASEPRI
   12ffe:	f383 8811 	msr	BASEPRI, r3
   13002:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
   13006:	4846      	ldr	r0, [pc, #280]	; (13120 <z_impl_log_process+0x138>)
   13008:	f019 fc4a 	bl	2c8a0 <log_list_head_get>
   1300c:	4605      	mov	r5, r0
	__asm__ volatile(
   1300e:	f386 8811 	msr	BASEPRI, r6
   13012:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
   13016:	b158      	cbz	r0, 13030 <z_impl_log_process+0x48>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13018:	4b42      	ldr	r3, [pc, #264]	; (13124 <z_impl_log_process+0x13c>)
   1301a:	e8d3 2fef 	ldaex	r2, [r3]
   1301e:	3a01      	subs	r2, #1
   13020:	e8c3 2fe1 	stlex	r1, r2, [r3]
   13024:	2900      	cmp	r1, #0
   13026:	d1f8      	bne.n	1301a <z_impl_log_process+0x32>
	if (!bypass) {
   13028:	b194      	cbz	r4, 13050 <z_impl_log_process+0x68>
	log_msg_put(msg);
   1302a:	4628      	mov	r0, r5
   1302c:	f019 fd38 	bl	2caa0 <log_msg_put>
	if (!bypass && dropped_cnt) {
   13030:	b924      	cbnz	r4, 1303c <z_impl_log_process+0x54>
   13032:	4b3d      	ldr	r3, [pc, #244]	; (13128 <z_impl_log_process+0x140>)
   13034:	681b      	ldr	r3, [r3, #0]
   13036:	b10b      	cbz	r3, 1303c <z_impl_log_process+0x54>
		dropped_notify();
   13038:	f7ff fef2 	bl	12e20 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   1303c:	4838      	ldr	r0, [pc, #224]	; (13120 <z_impl_log_process+0x138>)
   1303e:	f019 fc2d 	bl	2c89c <log_list_head_peek>
   13042:	1e04      	subs	r4, r0, #0
   13044:	bf18      	it	ne
   13046:	2401      	movne	r4, #1
}
   13048:	4620      	mov	r0, r4
   1304a:	b003      	add	sp, #12
   1304c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   13050:	4b36      	ldr	r3, [pc, #216]	; (1312c <z_impl_log_process+0x144>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
   13052:	781b      	ldrb	r3, [r3, #0]
   13054:	b9b3      	cbnz	r3, 13084 <z_impl_log_process+0x9c>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   13056:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   13058:	07db      	lsls	r3, r3, #31
   1305a:	d413      	bmi.n	13084 <z_impl_log_process+0x9c>
	msg_str = log_msg_str_get(msg);
   1305c:	f019 fd2f 	bl	2cabe <log_msg_str_get>
   13060:	4681      	mov	r9, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   13062:	4628      	mov	r0, r5
   13064:	f019 fcfa 	bl	2ca5c <log_msg_nargs_get>
   13068:	4601      	mov	r1, r0
   1306a:	4648      	mov	r0, r9
   1306c:	f7ff fe82 	bl	12d74 <z_log_get_s_mask>
   13070:	4607      	mov	r7, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   13072:	4a2f      	ldr	r2, [pc, #188]	; (13130 <z_impl_log_process+0x148>)
   13074:	4b2f      	ldr	r3, [pc, #188]	; (13134 <z_impl_log_process+0x14c>)
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   13076:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 13158 <z_impl_log_process+0x170>
   1307a:	1a9b      	subs	r3, r3, r2
   1307c:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
   13080:	9201      	str	r2, [sp, #4]
	while (mask) {
   13082:	b937      	cbnz	r7, 13092 <z_impl_log_process+0xaa>
   13084:	4e2c      	ldr	r6, [pc, #176]	; (13138 <z_impl_log_process+0x150>)
   13086:	4f2d      	ldr	r7, [pc, #180]	; (1313c <z_impl_log_process+0x154>)
   13088:	f04f 0800 	mov.w	r8, #0
   1308c:	1bbf      	subs	r7, r7, r6
   1308e:	113f      	asrs	r7, r7, #4
   13090:	e041      	b.n	13116 <z_impl_log_process+0x12e>
		idx = 31 - __builtin_clz(mask);
   13092:	fab7 f887 	clz	r8, r7
   13096:	f1c8 081f 	rsb	r8, r8, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   1309a:	4641      	mov	r1, r8
   1309c:	4628      	mov	r0, r5
   1309e:	f019 fce0 	bl	2ca62 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   130a2:	4b27      	ldr	r3, [pc, #156]	; (13140 <z_impl_log_process+0x158>)
		str = (const char *)log_msg_arg_get(msg, idx);
   130a4:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   130a6:	4298      	cmp	r0, r3
   130a8:	d302      	bcc.n	130b0 <z_impl_log_process+0xc8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   130aa:	4b26      	ldr	r3, [pc, #152]	; (13144 <z_impl_log_process+0x15c>)
   130ac:	4298      	cmp	r0, r3
   130ae:	d320      	bcc.n	130f2 <z_impl_log_process+0x10a>
   130b0:	4610      	mov	r0, r2
   130b2:	f7ff ff8b 	bl	12fcc <log_is_strdup>
   130b6:	b9e0      	cbnz	r0, 130f2 <z_impl_log_process+0x10a>
   130b8:	4b23      	ldr	r3, [pc, #140]	; (13148 <z_impl_log_process+0x160>)
   130ba:	429a      	cmp	r2, r3
   130bc:	d019      	beq.n	130f2 <z_impl_log_process+0x10a>
	return msg->hdr.ids.source_id;
   130be:	896b      	ldrh	r3, [r5, #10]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   130c0:	4922      	ldr	r1, [pc, #136]	; (1314c <z_impl_log_process+0x164>)
   130c2:	f3c3 1389 	ubfx	r3, r3, #6, #10
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   130c6:	455b      	cmp	r3, fp
   130c8:	bf2c      	ite	cs
   130ca:	4606      	movcs	r6, r0
	return __log_const_start[source_id].name;
   130cc:	9a01      	ldrcc	r2, [sp, #4]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   130ce:	4820      	ldr	r0, [pc, #128]	; (13150 <z_impl_log_process+0x168>)
   130d0:	bf38      	it	cc
   130d2:	f852 6033 	ldrcc.w	r6, [r2, r3, lsl #3]
   130d6:	23ad      	movs	r3, #173	; 0xad
   130d8:	4652      	mov	r2, sl
   130da:	f019 f9aa 	bl	2c432 <printk>
   130de:	4641      	mov	r1, r8
   130e0:	481c      	ldr	r0, [pc, #112]	; (13154 <z_impl_log_process+0x16c>)
   130e2:	464b      	mov	r3, r9
   130e4:	4632      	mov	r2, r6
   130e6:	f019 f9a4 	bl	2c432 <printk>
   130ea:	21ad      	movs	r1, #173	; 0xad
   130ec:	4650      	mov	r0, sl
   130ee:	f019 fbbd 	bl	2c86c <assert_post_action>
		mask &= ~BIT(idx);
   130f2:	2301      	movs	r3, #1
   130f4:	fa03 f808 	lsl.w	r8, r3, r8
   130f8:	ea27 0708 	bic.w	r7, r7, r8
   130fc:	e7c1      	b.n	13082 <z_impl_log_process+0x9a>
			if (log_backend_is_active(backend) &&
   130fe:	4630      	mov	r0, r6
   13100:	f019 fbd4 	bl	2c8ac <log_backend_is_active>
   13104:	b120      	cbz	r0, 13110 <z_impl_log_process+0x128>
	backend->api->put(backend, msg);
   13106:	6833      	ldr	r3, [r6, #0]
   13108:	4629      	mov	r1, r5
   1310a:	4630      	mov	r0, r6
   1310c:	681b      	ldr	r3, [r3, #0]
   1310e:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   13110:	f108 0801 	add.w	r8, r8, #1
   13114:	3610      	adds	r6, #16
   13116:	45b8      	cmp	r8, r7
   13118:	dbf1      	blt.n	130fe <z_impl_log_process+0x116>
   1311a:	e786      	b.n	1302a <z_impl_log_process+0x42>
   1311c:	20024737 	.word	0x20024737
   13120:	200214fc 	.word	0x200214fc
   13124:	200214f0 	.word	0x200214f0
   13128:	200214f4 	.word	0x200214f4
   1312c:	20024738 	.word	0x20024738
   13130:	0002eff4 	.word	0x0002eff4
   13134:	0002f094 	.word	0x0002f094
   13138:	0002f094 	.word	0x0002f094
   1313c:	0002f0a4 	.word	0x0002f0a4
   13140:	0002ed38 	.word	0x0002ed38
   13144:	0003339c 	.word	0x0003339c
   13148:	000307aa 	.word	0x000307aa
   1314c:	00032fcf 	.word	0x00032fcf
   13150:	00030166 	.word	0x00030166
   13154:	000307c4 	.word	0x000307c4
   13158:	000306ea 	.word	0x000306ea

0001315c <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   1315c:	4b27      	ldr	r3, [pc, #156]	; (131fc <msg_finalize+0xa0>)
{
   1315e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
   13160:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   13162:	8141      	strh	r1, [r0, #10]
{
   13164:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   13166:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   13168:	4d25      	ldr	r5, [pc, #148]	; (13200 <msg_finalize+0xa4>)
   1316a:	60e0      	str	r0, [r4, #12]
   1316c:	e8d5 3fef 	ldaex	r3, [r5]
   13170:	3301      	adds	r3, #1
   13172:	e8c5 3fe2 	stlex	r2, r3, [r5]
   13176:	2a00      	cmp	r2, #0
   13178:	d1f8      	bne.n	1316c <msg_finalize+0x10>
	__asm__ volatile(
   1317a:	f04f 0320 	mov.w	r3, #32
   1317e:	f3ef 8611 	mrs	r6, BASEPRI
   13182:	f383 8811 	msr	BASEPRI, r3
   13186:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1318a:	481e      	ldr	r0, [pc, #120]	; (13204 <msg_finalize+0xa8>)
   1318c:	4621      	mov	r1, r4
   1318e:	f019 fb7b 	bl	2c888 <log_list_add_tail>
	__asm__ volatile(
   13192:	f386 8811 	msr	BASEPRI, r6
   13196:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
   1319a:	4b1b      	ldr	r3, [pc, #108]	; (13208 <msg_finalize+0xac>)
   1319c:	781b      	ldrb	r3, [r3, #0]
   1319e:	b183      	cbz	r3, 131c2 <msg_finalize+0x66>
	__asm__ volatile(
   131a0:	f04f 0320 	mov.w	r3, #32
   131a4:	f3ef 8411 	mrs	r4, BASEPRI
   131a8:	f383 8811 	msr	BASEPRI, r3
   131ac:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   131b0:	2000      	movs	r0, #0
   131b2:	f7ff ff19 	bl	12fe8 <z_impl_log_process>
	__asm__ volatile(
   131b6:	f384 8811 	msr	BASEPRI, r4
   131ba:	f3bf 8f6f 	isb	sy
}
   131be:	b002      	add	sp, #8
   131c0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   131c2:	4a12      	ldr	r2, [pc, #72]	; (1320c <msg_finalize+0xb0>)
   131c4:	682b      	ldr	r3, [r5, #0]
   131c6:	6812      	ldr	r2, [r2, #0]
   131c8:	2a00      	cmp	r2, #0
   131ca:	d0f8      	beq.n	131be <msg_finalize+0x62>
   131cc:	2b01      	cmp	r3, #1
   131ce:	d10a      	bne.n	131e6 <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
   131d0:	2200      	movs	r2, #0
   131d2:	2300      	movs	r3, #0
   131d4:	480e      	ldr	r0, [pc, #56]	; (13210 <msg_finalize+0xb4>)
   131d6:	e9cd 2300 	strd	r2, r3, [sp]
   131da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   131de:	2300      	movs	r3, #0
   131e0:	f012 f9ae 	bl	25540 <z_impl_k_timer_start>
   131e4:	e7eb      	b.n	131be <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   131e6:	2b0a      	cmp	r3, #10
   131e8:	d1e9      	bne.n	131be <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   131ea:	4809      	ldr	r0, [pc, #36]	; (13210 <msg_finalize+0xb4>)
   131ec:	f01b fcee 	bl	2ebcc <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   131f0:	4808      	ldr	r0, [pc, #32]	; (13214 <msg_finalize+0xb8>)
}
   131f2:	b002      	add	sp, #8
   131f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   131f8:	f011 bb64 	b.w	248c4 <z_impl_k_sem_give>
   131fc:	20020430 	.word	0x20020430
   13200:	200214f0 	.word	0x200214f0
   13204:	200214fc 	.word	0x200214fc
   13208:	20024738 	.word	0x20024738
   1320c:	20021520 	.word	0x20021520
   13210:	20020dc0 	.word	0x20020dc0
   13214:	20020c54 	.word	0x20020c54

00013218 <log_process_thread_func>:
	return __log_backends_end - __log_backends_start;
   13218:	4b16      	ldr	r3, [pc, #88]	; (13274 <log_process_thread_func+0x5c>)
   1321a:	4a17      	ldr	r2, [pc, #92]	; (13278 <log_process_thread_func+0x60>)
{
   1321c:	b510      	push	{r4, lr}
   1321e:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   13220:	2b00      	cmp	r3, #0
   13222:	dc0b      	bgt.n	1323c <log_process_thread_func+0x24>
   13224:	4915      	ldr	r1, [pc, #84]	; (1327c <log_process_thread_func+0x64>)
   13226:	4816      	ldr	r0, [pc, #88]	; (13280 <log_process_thread_func+0x68>)
   13228:	f240 4399 	movw	r3, #1177	; 0x499
   1322c:	4a15      	ldr	r2, [pc, #84]	; (13284 <log_process_thread_func+0x6c>)
   1322e:	f019 f900 	bl	2c432 <printk>
   13232:	f240 4199 	movw	r1, #1177	; 0x499
   13236:	4813      	ldr	r0, [pc, #76]	; (13284 <log_process_thread_func+0x6c>)
   13238:	f019 fb18 	bl	2c86c <assert_post_action>
	log_init();
   1323c:	f7ff fe5c 	bl	12ef8 <log_init>
	return z_impl_k_current_get();
   13240:	f011 fb3a 	bl	248b8 <z_impl_k_current_get>
	proc_tid = process_tid;
   13244:	4b10      	ldr	r3, [pc, #64]	; (13288 <log_process_thread_func+0x70>)
   13246:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13248:	b130      	cbz	r0, 13258 <log_process_thread_func+0x40>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   1324a:	4b10      	ldr	r3, [pc, #64]	; (1328c <log_process_thread_func+0x74>)
	    process_tid &&
   1324c:	681b      	ldr	r3, [r3, #0]
   1324e:	2b09      	cmp	r3, #9
   13250:	dd02      	ble.n	13258 <log_process_thread_func+0x40>
	z_impl_k_sem_give(sem);
   13252:	480f      	ldr	r0, [pc, #60]	; (13290 <log_process_thread_func+0x78>)
   13254:	f011 fb36 	bl	248c4 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   13258:	4c0d      	ldr	r4, [pc, #52]	; (13290 <log_process_thread_func+0x78>)
   1325a:	2000      	movs	r0, #0
   1325c:	f7ff fec4 	bl	12fe8 <z_impl_log_process>
		if (log_process(false) == false) {
   13260:	2800      	cmp	r0, #0
   13262:	d1fa      	bne.n	1325a <log_process_thread_func+0x42>
   13264:	f04f 32ff 	mov.w	r2, #4294967295
   13268:	f04f 33ff 	mov.w	r3, #4294967295
   1326c:	4620      	mov	r0, r4
   1326e:	f011 fb6d 	bl	2494c <z_impl_k_sem_take>
   13272:	e7f2      	b.n	1325a <log_process_thread_func+0x42>
   13274:	0002f0a4 	.word	0x0002f0a4
   13278:	0002f094 	.word	0x0002f094
   1327c:	00030805 	.word	0x00030805
   13280:	00030166 	.word	0x00030166
   13284:	000306ea 	.word	0x000306ea
   13288:	20021520 	.word	0x20021520
   1328c:	200214f0 	.word	0x200214f0
   13290:	20020c54 	.word	0x20020c54

00013294 <z_impl_log_panic>:
{
   13294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   13296:	4f0f      	ldr	r7, [pc, #60]	; (132d4 <z_impl_log_panic+0x40>)
   13298:	783d      	ldrb	r5, [r7, #0]
   1329a:	b975      	cbnz	r5, 132ba <z_impl_log_panic+0x26>
	log_init();
   1329c:	f7ff fe2c 	bl	12ef8 <log_init>
   132a0:	4c0d      	ldr	r4, [pc, #52]	; (132d8 <z_impl_log_panic+0x44>)
   132a2:	4e0e      	ldr	r6, [pc, #56]	; (132dc <z_impl_log_panic+0x48>)
   132a4:	1b36      	subs	r6, r6, r4
   132a6:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   132a8:	42b5      	cmp	r5, r6
   132aa:	db07      	blt.n	132bc <z_impl_log_panic+0x28>
   132ac:	2000      	movs	r0, #0
   132ae:	f7ff fe9b 	bl	12fe8 <z_impl_log_process>
		while (log_process(false) == true) {
   132b2:	2800      	cmp	r0, #0
   132b4:	d1fa      	bne.n	132ac <z_impl_log_panic+0x18>
	panic_mode = true;
   132b6:	2301      	movs	r3, #1
   132b8:	703b      	strb	r3, [r7, #0]
}
   132ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   132bc:	4620      	mov	r0, r4
   132be:	f019 faf5 	bl	2c8ac <log_backend_is_active>
   132c2:	b118      	cbz	r0, 132cc <z_impl_log_panic+0x38>
	backend->api->panic(backend);
   132c4:	6823      	ldr	r3, [r4, #0]
   132c6:	4620      	mov	r0, r4
   132c8:	691b      	ldr	r3, [r3, #16]
   132ca:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   132cc:	3501      	adds	r5, #1
   132ce:	3410      	adds	r4, #16
   132d0:	e7ea      	b.n	132a8 <z_impl_log_panic+0x14>
   132d2:	bf00      	nop
   132d4:	20024738 	.word	0x20024738
   132d8:	0002f094 	.word	0x0002f094
   132dc:	0002f0a4 	.word	0x0002f0a4

000132e0 <log_free>:
{
   132e0:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   132e2:	3804      	subs	r0, #4
   132e4:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   132e6:	e8d0 3fef 	ldaex	r3, [r0]
   132ea:	1e5a      	subs	r2, r3, #1
   132ec:	e8c0 2fe1 	stlex	r1, r2, [r0]
   132f0:	2900      	cmp	r1, #0
   132f2:	d1f8      	bne.n	132e6 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   132f4:	2b01      	cmp	r3, #1
   132f6:	d103      	bne.n	13300 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   132f8:	4803      	ldr	r0, [pc, #12]	; (13308 <log_free+0x28>)
   132fa:	a901      	add	r1, sp, #4
   132fc:	f00f fcba 	bl	22c74 <k_mem_slab_free>
}
   13300:	b003      	add	sp, #12
   13302:	f85d fb04 	ldr.w	pc, [sp], #4
   13306:	bf00      	nop
   13308:	20021504 	.word	0x20021504

0001330c <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   1330c:	2320      	movs	r3, #32
   1330e:	4902      	ldr	r1, [pc, #8]	; (13318 <log_msg_pool_init+0xc>)
   13310:	461a      	mov	r2, r3
   13312:	4802      	ldr	r0, [pc, #8]	; (1331c <log_msg_pool_init+0x10>)
   13314:	f01b bb16 	b.w	2e944 <k_mem_slab_init>
   13318:	2002a148 	.word	0x2002a148
   1331c:	20021524 	.word	0x20021524

00013320 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   13320:	2300      	movs	r3, #0
{
   13322:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   13324:	4d09      	ldr	r5, [pc, #36]	; (1334c <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   13326:	9301      	str	r3, [sp, #4]
   13328:	2001      	movs	r0, #1
   1332a:	f7ff fe5d 	bl	12fe8 <z_impl_log_process>
   1332e:	4604      	mov	r4, r0
			log_dropped();
   13330:	f7ff fd9a 	bl	12e68 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   13334:	2200      	movs	r2, #0
   13336:	2300      	movs	r3, #0
   13338:	4628      	mov	r0, r5
   1333a:	a901      	add	r1, sp, #4
   1333c:	f00f fc2e 	bl	22b9c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   13340:	b108      	cbz	r0, 13346 <log_msg_no_space_handle+0x26>
   13342:	2c00      	cmp	r4, #0
   13344:	d1f0      	bne.n	13328 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
   13346:	9801      	ldr	r0, [sp, #4]
   13348:	b003      	add	sp, #12
   1334a:	bd30      	pop	{r4, r5, pc}
   1334c:	20021524 	.word	0x20021524

00013350 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
   13350:	2300      	movs	r3, #0
{
   13352:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   13354:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
   13356:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   13358:	4806      	ldr	r0, [pc, #24]	; (13374 <log_msg_chunk_alloc+0x24>)
   1335a:	2300      	movs	r3, #0
   1335c:	a901      	add	r1, sp, #4
   1335e:	f00f fc1d 	bl	22b9c <k_mem_slab_alloc>
	if (err != 0) {
   13362:	b110      	cbz	r0, 1336a <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   13364:	f7ff ffdc 	bl	13320 <log_msg_no_space_handle>
   13368:	9001      	str	r0, [sp, #4]
}
   1336a:	9801      	ldr	r0, [sp, #4]
   1336c:	b003      	add	sp, #12
   1336e:	f85d fb04 	ldr.w	pc, [sp], #4
   13372:	bf00      	nop
   13374:	20021524 	.word	0x20021524

00013378 <msg_free>:
{
   13378:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1337a:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   1337c:	7a45      	ldrb	r5, [r0, #9]
{
   1337e:	b085      	sub	sp, #20
   13380:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   13382:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
   13384:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   13388:	d41c      	bmi.n	133c4 <msg_free+0x4c>
   1338a:	b1dd      	cbz	r5, 133c4 <msg_free+0x4c>
		uint32_t smask = 0;
   1338c:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
   1338e:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   13390:	4631      	mov	r1, r6
   13392:	9801      	ldr	r0, [sp, #4]
   13394:	f019 fb65 	bl	2ca62 <log_msg_arg_get>
   13398:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   1339a:	f7ff fe17 	bl	12fcc <log_is_strdup>
   1339e:	b170      	cbz	r0, 133be <msg_free+0x46>
				if (smask == 0) {
   133a0:	b934      	cbnz	r4, 133b0 <msg_free+0x38>
					smask = z_log_get_s_mask(
   133a2:	9b01      	ldr	r3, [sp, #4]
   133a4:	4629      	mov	r1, r5
   133a6:	6918      	ldr	r0, [r3, #16]
   133a8:	f7ff fce4 	bl	12d74 <z_log_get_s_mask>
					if (smask == 0) {
   133ac:	4604      	mov	r4, r0
   133ae:	b148      	cbz	r0, 133c4 <msg_free+0x4c>
				if (smask & BIT(i)) {
   133b0:	fa24 f306 	lsr.w	r3, r4, r6
   133b4:	07d9      	lsls	r1, r3, #31
   133b6:	d502      	bpl.n	133be <msg_free+0x46>
					log_free(buf);
   133b8:	4638      	mov	r0, r7
   133ba:	f7ff ff91 	bl	132e0 <log_free>
		for (i = 0; i < nargs; i++) {
   133be:	3601      	adds	r6, #1
   133c0:	42ae      	cmp	r6, r5
   133c2:	d3e5      	bcc.n	13390 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
   133c4:	9b01      	ldr	r3, [sp, #4]
   133c6:	7a1a      	ldrb	r2, [r3, #8]
   133c8:	0792      	lsls	r2, r2, #30
   133ca:	d504      	bpl.n	133d6 <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
   133cc:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   133ce:	4c08      	ldr	r4, [pc, #32]	; (133f0 <msg_free+0x78>)
   133d0:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   133d2:	9b03      	ldr	r3, [sp, #12]
   133d4:	b92b      	cbnz	r3, 133e2 <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   133d6:	4806      	ldr	r0, [pc, #24]	; (133f0 <msg_free+0x78>)
   133d8:	a901      	add	r1, sp, #4
   133da:	f00f fc4b 	bl	22c74 <k_mem_slab_free>
}
   133de:	b005      	add	sp, #20
   133e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   133e2:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   133e4:	4620      	mov	r0, r4
   133e6:	a903      	add	r1, sp, #12
   133e8:	f00f fc44 	bl	22c74 <k_mem_slab_free>
		cont = next;
   133ec:	9503      	str	r5, [sp, #12]
   133ee:	e7f0      	b.n	133d2 <msg_free+0x5a>
   133f0:	20021524 	.word	0x20021524

000133f4 <log_msg_create_n>:
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   133f4:	2a0e      	cmp	r2, #14
{
   133f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133fa:	4681      	mov	r9, r0
   133fc:	4688      	mov	r8, r1
   133fe:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   13400:	d90b      	bls.n	1341a <log_msg_create_n+0x26>
   13402:	492d      	ldr	r1, [pc, #180]	; (134b8 <log_msg_create_n+0xc4>)
   13404:	482d      	ldr	r0, [pc, #180]	; (134bc <log_msg_create_n+0xc8>)
   13406:	f44f 739b 	mov.w	r3, #310	; 0x136
   1340a:	4a2d      	ldr	r2, [pc, #180]	; (134c0 <log_msg_create_n+0xcc>)
   1340c:	f019 f811 	bl	2c432 <printk>
   13410:	f44f 719b 	mov.w	r1, #310	; 0x136
   13414:	482a      	ldr	r0, [pc, #168]	; (134c0 <log_msg_create_n+0xcc>)
   13416:	f019 fa29 	bl	2c86c <assert_post_action>
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1341a:	f7ff ff99 	bl	13350 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1341e:	4604      	mov	r4, r0
   13420:	b330      	cbz	r0, 13470 <log_msg_create_n+0x7c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   13422:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   13424:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   13426:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   13428:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1342a:	8107      	strh	r7, [r0, #8]
   1342c:	d909      	bls.n	13442 <log_msg_create_n+0x4e>
	msg->hdr.params.generic.ext = 1;
   1342e:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   13430:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
   13434:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   13436:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1343a:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   1343c:	f1ba 0f00 	cmp.w	sl, #0
   13440:	dc0e      	bgt.n	13460 <log_msg_create_n+0x6c>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   13442:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   13444:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   13446:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   1344a:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1344e:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   13450:	d818      	bhi.n	13484 <log_msg_create_n+0x90>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13452:	4641      	mov	r1, r8
   13454:	00aa      	lsls	r2, r5, #2
   13456:	f104 0014 	add.w	r0, r4, #20
   1345a:	f7f9 fb77 	bl	cb4c <memcpy>
	while (nargs != 0U) {
   1345e:	e007      	b.n	13470 <log_msg_create_n+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   13460:	f7ff ff76 	bl	13350 <log_msg_chunk_alloc>
		if (cont == NULL) {
   13464:	4606      	mov	r6, r0
   13466:	b930      	cbnz	r0, 13476 <log_msg_create_n+0x82>
			msg_free(msg);
   13468:	4620      	mov	r0, r4
   1346a:	f7ff ff85 	bl	13378 <msg_free>
			return NULL;
   1346e:	4634      	mov	r4, r6
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   13470:	4620      	mov	r0, r4
   13472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   13476:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1347a:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
   1347e:	4683      	mov	fp, r0
		cont->next = NULL;
   13480:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
   13482:	e7db      	b.n	1343c <log_msg_create_n+0x48>
   13484:	f8d8 3000 	ldr.w	r3, [r8]
	struct log_msg_cont *cont = msg->payload.ext.next;
   13488:	6967      	ldr	r7, [r4, #20]
   1348a:	61a3      	str	r3, [r4, #24]
   1348c:	f8d8 3004 	ldr.w	r3, [r8, #4]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   13490:	3d02      	subs	r5, #2
   13492:	61e3      	str	r3, [r4, #28]
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   13494:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   13498:	2d07      	cmp	r5, #7
   1349a:	462e      	mov	r6, r5
   1349c:	bf28      	it	cs
   1349e:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   134a0:	ea4f 0986 	mov.w	r9, r6, lsl #2
   134a4:	4641      	mov	r1, r8
   134a6:	1d38      	adds	r0, r7, #4
   134a8:	464a      	mov	r2, r9
   134aa:	f7f9 fb4f 	bl	cb4c <memcpy>
	while (nargs != 0U) {
   134ae:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   134b0:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   134b2:	44c8      	add	r8, r9
	while (nargs != 0U) {
   134b4:	d1f0      	bne.n	13498 <log_msg_create_n+0xa4>
   134b6:	e7db      	b.n	13470 <log_msg_create_n+0x7c>
   134b8:	0003085a 	.word	0x0003085a
   134bc:	00030166 	.word	0x00030166
   134c0:	0003082e 	.word	0x0003082e

000134c4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   134c4:	b40e      	push	{r1, r2, r3}
   134c6:	b503      	push	{r0, r1, lr}
   134c8:	ab03      	add	r3, sp, #12
   134ca:	f853 2b04 	ldr.w	r2, [r3], #4
   134ce:	4601      	mov	r1, r0
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   134d0:	4804      	ldr	r0, [pc, #16]	; (134e4 <print_formatted+0x20>)
	va_start(args, fmt);
   134d2:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   134d4:	f7fe fdf0 	bl	120b8 <z_vprintk>
#endif
	va_end(args);

	return length;
}
   134d8:	2000      	movs	r0, #0
   134da:	b002      	add	sp, #8
   134dc:	f85d eb04 	ldr.w	lr, [sp], #4
   134e0:	b003      	add	sp, #12
   134e2:	4770      	bx	lr
   134e4:	00013725 	.word	0x00013725

000134e8 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
   134e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   134ec:	f011 0402 	ands.w	r4, r1, #2
{
   134f0:	b085      	sub	sp, #20
   134f2:	4606      	mov	r6, r0
   134f4:	4690      	mov	r8, r2
   134f6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   134fa:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   134fe:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   13502:	d007      	beq.n	13514 <prefix_print+0x2c>
	if (!format) {
   13504:	f011 0f44 	tst.w	r1, #68	; 0x44
   13508:	d137      	bne.n	1357a <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   1350a:	461a      	mov	r2, r3
   1350c:	4932      	ldr	r1, [pc, #200]	; (135d8 <prefix_print+0xf0>)
   1350e:	f7ff ffd9 	bl	134c4 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   13512:	4604      	mov	r4, r0
	if (color) {
   13514:	f1b9 0f00 	cmp.w	r9, #0
   13518:	d00a      	beq.n	13530 <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
   1351a:	4b30      	ldr	r3, [pc, #192]	; (135dc <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
   1351c:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
   1351e:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
   13522:	4b2f      	ldr	r3, [pc, #188]	; (135e0 <prefix_print+0xf8>)
   13524:	492f      	ldr	r1, [pc, #188]	; (135e4 <prefix_print+0xfc>)
   13526:	2a00      	cmp	r2, #0
   13528:	bf08      	it	eq
   1352a:	461a      	moveq	r2, r3
   1352c:	f7ff ffca 	bl	134c4 <print_formatted>
	if (level_on) {
   13530:	b13d      	cbz	r5, 13542 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   13532:	4b2d      	ldr	r3, [pc, #180]	; (135e8 <prefix_print+0x100>)
   13534:	4630      	mov	r0, r6
   13536:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   1353a:	492c      	ldr	r1, [pc, #176]	; (135ec <prefix_print+0x104>)
   1353c:	f7ff ffc2 	bl	134c4 <print_formatted>
   13540:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   13542:	f1b8 0f00 	cmp.w	r8, #0
   13546:	d044      	beq.n	135d2 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   13548:	2301      	movs	r3, #1
   1354a:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   1354e:	4b28      	ldr	r3, [pc, #160]	; (135f0 <prefix_print+0x108>)
   13550:	f017 0f10 	tst.w	r7, #16
   13554:	4f27      	ldr	r7, [pc, #156]	; (135f4 <prefix_print+0x10c>)
   13556:	bf18      	it	ne
   13558:	461f      	movne	r7, r3
   1355a:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   1355e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   13562:	f7ff fc8d 	bl	12e80 <log_source_name_get>
   13566:	4639      	mov	r1, r7
   13568:	4602      	mov	r2, r0
   1356a:	4630      	mov	r0, r6
   1356c:	f7ff ffaa 	bl	134c4 <print_formatted>
   13570:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
   13572:	4420      	add	r0, r4
   13574:	b005      	add	sp, #20
   13576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   1357a:	4a1f      	ldr	r2, [pc, #124]	; (135f8 <prefix_print+0x110>)
   1357c:	6811      	ldr	r1, [r2, #0]
   1357e:	b331      	cbz	r1, 135ce <prefix_print+0xe6>
		timestamp /= timestamp_div;
   13580:	4a1e      	ldr	r2, [pc, #120]	; (135fc <prefix_print+0x114>)
   13582:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   13586:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   13588:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   1358c:	fbb3 f3f4 	udiv	r3, r3, r4
		total_seconds = timestamp / freq;
   13590:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   13594:	fbb4 f2fe 	udiv	r2, r4, lr
   13598:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   1359c:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   135a0:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   135a4:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   135a8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   135ac:	fb01 441b 	mls	r4, r1, fp, r4
   135b0:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   135b4:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   135b8:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   135bc:	e9cd b101 	strd	fp, r1, [sp, #4]
   135c0:	fb0a e113 	mls	r1, sl, r3, lr
   135c4:	9100      	str	r1, [sp, #0]
   135c6:	490e      	ldr	r1, [pc, #56]	; (13600 <prefix_print+0x118>)
   135c8:	f7ff ff7c 	bl	134c4 <print_formatted>
   135cc:	e7a1      	b.n	13512 <prefix_print+0x2a>
		length = 0;
   135ce:	4608      	mov	r0, r1
   135d0:	e79f      	b.n	13512 <prefix_print+0x2a>
	total += print_formatted(log_output,
   135d2:	4f08      	ldr	r7, [pc, #32]	; (135f4 <prefix_print+0x10c>)
   135d4:	e7c1      	b.n	1355a <prefix_print+0x72>
   135d6:	bf00      	nop
   135d8:	00030873 	.word	0x00030873
   135dc:	0002f220 	.word	0x0002f220
   135e0:	00030865 	.word	0x00030865
   135e4:	00032147 	.word	0x00032147
   135e8:	0002f234 	.word	0x0002f234
   135ec:	00030898 	.word	0x00030898
   135f0:	0003086f 	.word	0x0003086f
   135f4:	0003086a 	.word	0x0003086a
   135f8:	20021540 	.word	0x20021540
   135fc:	20021544 	.word	0x20021544
   13600:	0003087c 	.word	0x0003087c

00013604 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
   13604:	b538      	push	{r3, r4, r5, lr}
   13606:	460c      	mov	r4, r1
	if (color) {
   13608:	07e1      	lsls	r1, r4, #31
{
   1360a:	4605      	mov	r5, r0
	if (color) {
   1360c:	d503      	bpl.n	13616 <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
   1360e:	4a08      	ldr	r2, [pc, #32]	; (13630 <postfix_print+0x2c>)
   13610:	4908      	ldr	r1, [pc, #32]	; (13634 <postfix_print+0x30>)
   13612:	f7ff ff57 	bl	134c4 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13616:	06e2      	lsls	r2, r4, #27
   13618:	d408      	bmi.n	1362c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1361a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   1361c:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   1361e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   13622:	bf4c      	ite	mi
   13624:	4904      	ldrmi	r1, [pc, #16]	; (13638 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   13626:	4905      	ldrpl	r1, [pc, #20]	; (1363c <postfix_print+0x38>)
   13628:	f7ff bf4c 	b.w	134c4 <print_formatted>
}
   1362c:	bd38      	pop	{r3, r4, r5, pc}
   1362e:	bf00      	nop
   13630:	00030865 	.word	0x00030865
   13634:	00032147 	.word	0x00032147
   13638:	00030a11 	.word	0x00030a11
   1363c:	00032a8e 	.word	0x00032a8e

00013640 <hexdump_line_print>:
{
   13640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13644:	461d      	mov	r5, r3
   13646:	9b08      	ldr	r3, [sp, #32]
   13648:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1364a:	06da      	lsls	r2, r3, #27
{
   1364c:	4604      	mov	r4, r0
   1364e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13650:	d405      	bmi.n	1365e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   13652:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   13654:	bf4c      	ite	mi
   13656:	492b      	ldrmi	r1, [pc, #172]	; (13704 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   13658:	492b      	ldrpl	r1, [pc, #172]	; (13708 <hexdump_line_print+0xc8>)
   1365a:	f7ff ff33 	bl	134c4 <print_formatted>
{
   1365e:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
   13662:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 13710 <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   13666:	45a8      	cmp	r8, r5
   13668:	db2d      	blt.n	136c6 <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1366a:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   1366c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 13714 <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
   13670:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 13718 <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
   13674:	f8df a098 	ldr.w	sl, [pc, #152]	; 13710 <hexdump_line_print+0xd0>
		if (i < length) {
   13678:	42bd      	cmp	r5, r7
   1367a:	d232      	bcs.n	136e2 <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
   1367c:	4649      	mov	r1, r9
   1367e:	4620      	mov	r0, r4
   13680:	5d72      	ldrb	r2, [r6, r5]
   13682:	f7ff ff1f 	bl	134c4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13686:	3501      	adds	r5, #1
   13688:	2d10      	cmp	r5, #16
   1368a:	d123      	bne.n	136d4 <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
   1368c:	4620      	mov	r0, r4
   1368e:	491f      	ldr	r1, [pc, #124]	; (1370c <hexdump_line_print+0xcc>)
   13690:	f7ff ff18 	bl	134c4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13694:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   13696:	f8df 8078 	ldr.w	r8, [pc, #120]	; 13710 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   1369a:	f8df 9080 	ldr.w	r9, [pc, #128]	; 1371c <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
   1369e:	f8df a080 	ldr.w	sl, [pc, #128]	; 13720 <hexdump_line_print+0xe0>
		if (i < length) {
   136a2:	42af      	cmp	r7, r5
   136a4:	d929      	bls.n	136fa <hexdump_line_print+0xba>
			char c = (char)data[i];
   136a6:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   136a8:	4651      	mov	r1, sl
   136aa:	f812 3009 	ldrb.w	r3, [r2, r9]
   136ae:	4620      	mov	r0, r4
   136b0:	f013 0f97 	tst.w	r3, #151	; 0x97
   136b4:	bf08      	it	eq
   136b6:	222e      	moveq	r2, #46	; 0x2e
   136b8:	f7ff ff04 	bl	134c4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   136bc:	3501      	adds	r5, #1
   136be:	2d10      	cmp	r5, #16
   136c0:	d114      	bne.n	136ec <hexdump_line_print+0xac>
}
   136c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   136c6:	4649      	mov	r1, r9
   136c8:	4620      	mov	r0, r4
   136ca:	f7ff fefb 	bl	134c4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   136ce:	f108 0801 	add.w	r8, r8, #1
   136d2:	e7c8      	b.n	13666 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   136d4:	076a      	lsls	r2, r5, #29
   136d6:	d1cf      	bne.n	13678 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
   136d8:	4651      	mov	r1, sl
   136da:	4620      	mov	r0, r4
   136dc:	f7ff fef2 	bl	134c4 <print_formatted>
   136e0:	e7ca      	b.n	13678 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
   136e2:	4641      	mov	r1, r8
   136e4:	4620      	mov	r0, r4
   136e6:	f7ff feed 	bl	134c4 <print_formatted>
   136ea:	e7cc      	b.n	13686 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   136ec:	076b      	lsls	r3, r5, #29
   136ee:	d1d8      	bne.n	136a2 <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   136f0:	4641      	mov	r1, r8
   136f2:	4620      	mov	r0, r4
   136f4:	f7ff fee6 	bl	134c4 <print_formatted>
   136f8:	e7d3      	b.n	136a2 <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   136fa:	4641      	mov	r1, r8
   136fc:	4620      	mov	r0, r4
   136fe:	f7ff fee1 	bl	134c4 <print_formatted>
   13702:	e7db      	b.n	136bc <hexdump_line_print+0x7c>
   13704:	00030a11 	.word	0x00030a11
   13708:	00032a8e 	.word	0x00032a8e
   1370c:	000308a8 	.word	0x000308a8
   13710:	000308a6 	.word	0x000308a6
   13714:	000308a4 	.word	0x000308a4
   13718:	0003089e 	.word	0x0003089e
   1371c:	0002f961 	.word	0x0002f961
   13720:	000308aa 	.word	0x000308aa

00013724 <out_func>:
{
   13724:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   13726:	684b      	ldr	r3, [r1, #4]
{
   13728:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   1372a:	681a      	ldr	r2, [r3, #0]
   1372c:	68cb      	ldr	r3, [r1, #12]
{
   1372e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   13730:	429a      	cmp	r2, r3
   13732:	d102      	bne.n	1373a <out_func+0x16>
		log_output_flush(out_ctx);
   13734:	4608      	mov	r0, r1
   13736:	f019 fb35 	bl	2cda4 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1373a:	6863      	ldr	r3, [r4, #4]
   1373c:	e8d3 2fef 	ldaex	r2, [r3]
   13740:	1c51      	adds	r1, r2, #1
   13742:	e8c3 1fe0 	stlex	r0, r1, [r3]
   13746:	2800      	cmp	r0, #0
   13748:	d1f8      	bne.n	1373c <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   1374a:	68a3      	ldr	r3, [r4, #8]
   1374c:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   1374e:	6863      	ldr	r3, [r4, #4]
   13750:	681a      	ldr	r2, [r3, #0]
   13752:	68e3      	ldr	r3, [r4, #12]
   13754:	429a      	cmp	r2, r3
   13756:	d909      	bls.n	1376c <out_func+0x48>
   13758:	4905      	ldr	r1, [pc, #20]	; (13770 <out_func+0x4c>)
   1375a:	4806      	ldr	r0, [pc, #24]	; (13774 <out_func+0x50>)
   1375c:	2378      	movs	r3, #120	; 0x78
   1375e:	4a06      	ldr	r2, [pc, #24]	; (13778 <out_func+0x54>)
   13760:	f018 fe67 	bl	2c432 <printk>
   13764:	2178      	movs	r1, #120	; 0x78
   13766:	4804      	ldr	r0, [pc, #16]	; (13778 <out_func+0x54>)
   13768:	f019 f880 	bl	2c86c <assert_post_action>
}
   1376c:	2000      	movs	r0, #0
   1376e:	bd38      	pop	{r3, r4, r5, pc}
   13770:	000308dc 	.word	0x000308dc
   13774:	00030166 	.word	0x00030166
   13778:	000308ad 	.word	0x000308ad

0001377c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   1377c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   13780:	7a8b      	ldrb	r3, [r1, #10]
   13782:	4616      	mov	r6, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   13784:	f013 0707 	ands.w	r7, r3, #7
{
   13788:	4604      	mov	r4, r0
   1378a:	460d      	mov	r5, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1378c:	7a0a      	ldrb	r2, [r1, #8]
   1378e:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   13790:	d020      	beq.n	137d4 <log_output_msg_process+0x58>
   13792:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   13794:	8949      	ldrh	r1, [r1, #10]
   13796:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1379a:	f3c1 1189 	ubfx	r1, r1, #6, #10
   1379e:	e9cd 7300 	strd	r7, r3, [sp]
   137a2:	9102      	str	r1, [sp, #8]
   137a4:	68eb      	ldr	r3, [r5, #12]
   137a6:	4631      	mov	r1, r6
   137a8:	f002 0201 	and.w	r2, r2, #1
   137ac:	f7ff fe9c 	bl	134e8 <prefix_print>
   137b0:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   137b2:	7a2b      	ldrb	r3, [r5, #8]
   137b4:	43db      	mvns	r3, r3
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   137b6:	f013 0801 	ands.w	r8, r3, #1
   137ba:	d00d      	beq.n	137d8 <log_output_msg_process+0x5c>
		std_print(msg, log_output);
   137bc:	4621      	mov	r1, r4
   137be:	4628      	mov	r0, r5
   137c0:	f019 f993 	bl	2caea <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
   137c4:	2f00      	cmp	r7, #0
   137c6:	d03c      	beq.n	13842 <log_output_msg_process+0xc6>
		postfix_print(log_output, flags, level);
   137c8:	463a      	mov	r2, r7
   137ca:	4631      	mov	r1, r6
   137cc:	4620      	mov	r0, r4
   137ce:	f7ff ff19 	bl	13604 <postfix_print>
   137d2:	e036      	b.n	13842 <log_output_msg_process+0xc6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   137d4:	46b9      	mov	r9, r7
   137d6:	e7ec      	b.n	137b2 <log_output_msg_process+0x36>
	} else if (raw_string) {
   137d8:	2f00      	cmp	r7, #0
   137da:	d138      	bne.n	1384e <log_output_msg_process+0xd2>
	__ASSERT_NO_MSG(log_output->size);
   137dc:	68e3      	ldr	r3, [r4, #12]
   137de:	b95b      	cbnz	r3, 137f8 <log_output_msg_process+0x7c>
   137e0:	492a      	ldr	r1, [pc, #168]	; (1388c <log_output_msg_process+0x110>)
   137e2:	482b      	ldr	r0, [pc, #172]	; (13890 <log_output_msg_process+0x114>)
   137e4:	f240 13bb 	movw	r3, #443	; 0x1bb
   137e8:	4a2a      	ldr	r2, [pc, #168]	; (13894 <log_output_msg_process+0x118>)
   137ea:	f018 fe22 	bl	2c432 <printk>
   137ee:	f240 11bb 	movw	r1, #443	; 0x1bb
   137f2:	4828      	ldr	r0, [pc, #160]	; (13894 <log_output_msg_process+0x118>)
   137f4:	f019 f83a 	bl	2c86c <assert_post_action>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   137f8:	2600      	movs	r6, #0
		length = log_output->size;
   137fa:	68e3      	ldr	r3, [r4, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   137fc:	aa06      	add	r2, sp, #24
		length = log_output->size;
   137fe:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   13800:	4628      	mov	r0, r5
   13802:	4633      	mov	r3, r6
   13804:	68a1      	ldr	r1, [r4, #8]
   13806:	f019 f95c 	bl	2cac2 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
   1380a:	9a06      	ldr	r2, [sp, #24]
   1380c:	6863      	ldr	r3, [r4, #4]
   1380e:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   13810:	b14a      	cbz	r2, 13826 <log_output_msg_process+0xaa>
			eol = (log_output->buf[length - 1] == '\n');
   13812:	68a3      	ldr	r3, [r4, #8]
   13814:	4413      	add	r3, r2
   13816:	f813 8c01 	ldrb.w	r8, [r3, #-1]
   1381a:	f1a8 030a 	sub.w	r3, r8, #10
   1381e:	f1d3 0800 	rsbs	r8, r3, #0
   13822:	eb48 0803 	adc.w	r8, r8, r3
		log_output_flush(log_output);
   13826:	4620      	mov	r0, r4
   13828:	f019 fabc 	bl	2cda4 <log_output_flush>
		offset += length;
   1382c:	9b06      	ldr	r3, [sp, #24]
   1382e:	441e      	add	r6, r3
	} while (length > 0);
   13830:	2b00      	cmp	r3, #0
   13832:	d1e2      	bne.n	137fa <log_output_msg_process+0x7e>
	if (eol) {
   13834:	f1b8 0f00 	cmp.w	r8, #0
   13838:	d003      	beq.n	13842 <log_output_msg_process+0xc6>
		print_formatted(log_output, "\r");
   1383a:	4620      	mov	r0, r4
   1383c:	4916      	ldr	r1, [pc, #88]	; (13898 <log_output_msg_process+0x11c>)
   1383e:	f7ff fe41 	bl	134c4 <print_formatted>
	}

	log_output_flush(log_output);
   13842:	4620      	mov	r0, r4
   13844:	f019 faae 	bl	2cda4 <log_output_flush>
}
   13848:	b00a      	add	sp, #40	; 0x28
   1384a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
   1384e:	4628      	mov	r0, r5
   13850:	f019 f935 	bl	2cabe <log_msg_str_get>
   13854:	4911      	ldr	r1, [pc, #68]	; (1389c <log_output_msg_process+0x120>)
   13856:	4602      	mov	r2, r0
   13858:	4620      	mov	r0, r4
   1385a:	f7ff fe33 	bl	134c4 <print_formatted>
		length = sizeof(buf);
   1385e:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   13862:	aa05      	add	r2, sp, #20
   13864:	4643      	mov	r3, r8
   13866:	4628      	mov	r0, r5
   13868:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   1386a:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   1386e:	f019 f928 	bl	2cac2 <log_msg_hexdump_data_get>
		if (length) {
   13872:	9a05      	ldr	r2, [sp, #20]
   13874:	2a00      	cmp	r2, #0
   13876:	d0a7      	beq.n	137c8 <log_output_msg_process+0x4c>
			hexdump_line_print(log_output, buf, length,
   13878:	464b      	mov	r3, r9
   1387a:	4620      	mov	r0, r4
   1387c:	9600      	str	r6, [sp, #0]
   1387e:	a906      	add	r1, sp, #24
   13880:	f7ff fede 	bl	13640 <hexdump_line_print>
			offset += length;
   13884:	9b05      	ldr	r3, [sp, #20]
   13886:	4498      	add	r8, r3
		length = sizeof(buf);
   13888:	e7eb      	b.n	13862 <log_output_msg_process+0xe6>
   1388a:	bf00      	nop
   1388c:	0003090c 	.word	0x0003090c
   13890:	00030166 	.word	0x00030166
   13894:	000308ad 	.word	0x000308ad
   13898:	0003091d 	.word	0x0003091d
   1389c:	00032147 	.word	0x00032147

000138a0 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   138a0:	f242 730f 	movw	r3, #9999	; 0x270f
{
   138a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   138a6:	428b      	cmp	r3, r1
   138a8:	bf28      	it	cs
   138aa:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
   138ac:	6805      	ldr	r5, [r0, #0]
{
   138ae:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   138b0:	2105      	movs	r1, #5
   138b2:	4668      	mov	r0, sp
   138b4:	4a0d      	ldr	r2, [pc, #52]	; (138ec <log_output_dropped_process+0x4c>)
   138b6:	f018 fdc9 	bl	2c44c <snprintk>
   138ba:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   138bc:	6863      	ldr	r3, [r4, #4]
   138be:	4628      	mov	r0, r5
   138c0:	220b      	movs	r2, #11
   138c2:	685b      	ldr	r3, [r3, #4]
   138c4:	490a      	ldr	r1, [pc, #40]	; (138f0 <log_output_dropped_process+0x50>)
   138c6:	f019 f903 	bl	2cad0 <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
   138ca:	6863      	ldr	r3, [r4, #4]
   138cc:	4632      	mov	r2, r6
   138ce:	4669      	mov	r1, sp
   138d0:	4628      	mov	r0, r5
   138d2:	685b      	ldr	r3, [r3, #4]
   138d4:	f019 f8fc 	bl	2cad0 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   138d8:	6863      	ldr	r3, [r4, #4]
   138da:	221b      	movs	r2, #27
   138dc:	4628      	mov	r0, r5
   138de:	685b      	ldr	r3, [r3, #4]
   138e0:	4904      	ldr	r1, [pc, #16]	; (138f4 <log_output_dropped_process+0x54>)
   138e2:	f019 f8f5 	bl	2cad0 <buffer_write>
		     log_output->control_block->ctx);
}
   138e6:	b002      	add	sp, #8
   138e8:	bd70      	pop	{r4, r5, r6, pc}
   138ea:	bf00      	nop
   138ec:	0002fe9f 	.word	0x0002fe9f
   138f0:	0003095b 	.word	0x0003095b
   138f4:	0003093f 	.word	0x0003093f

000138f8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   138f8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   138fa:	2100      	movs	r1, #0
	timestamp_div = 1U;
   138fc:	4a07      	ldr	r2, [pc, #28]	; (1391c <log_output_timestamp_freq_set+0x24>)
{
   138fe:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   13900:	4c07      	ldr	r4, [pc, #28]	; (13920 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   13902:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   13904:	42a0      	cmp	r0, r4
   13906:	d804      	bhi.n	13912 <log_output_timestamp_freq_set+0x1a>
   13908:	b101      	cbz	r1, 1390c <log_output_timestamp_freq_set+0x14>
   1390a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   1390c:	4b05      	ldr	r3, [pc, #20]	; (13924 <log_output_timestamp_freq_set+0x2c>)
   1390e:	6018      	str	r0, [r3, #0]
}
   13910:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   13912:	2101      	movs	r1, #1
		frequency /= 2U;
   13914:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   13916:	005b      	lsls	r3, r3, #1
   13918:	e7f4      	b.n	13904 <log_output_timestamp_freq_set+0xc>
   1391a:	bf00      	nop
   1391c:	20021544 	.word	0x20021544
   13920:	000f4240 	.word	0x000f4240
   13924:	20021540 	.word	0x20021540

00013928 <char_out>:
#include <assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   13928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1392a:	460d      	mov	r5, r1
   1392c:	4604      	mov	r4, r0
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
   1392e:	4f06      	ldr	r7, [pc, #24]	; (13948 <char_out+0x20>)
   13930:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
   13932:	42b4      	cmp	r4, r6
   13934:	d101      	bne.n	1393a <char_out+0x12>
	}

	return length;
}
   13936:	4628      	mov	r0, r5
   13938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
   1393a:	6838      	ldr	r0, [r7, #0]
   1393c:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   13940:	6883      	ldr	r3, [r0, #8]
   13942:	685b      	ldr	r3, [r3, #4]
   13944:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   13946:	e7f4      	b.n	13932 <char_out+0xa>
   13948:	2002155c 	.word	0x2002155c

0001394c <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   1394c:	4801      	ldr	r0, [pc, #4]	; (13954 <panic+0x8>)
   1394e:	f019 ba29 	b.w	2cda4 <log_output_flush>
   13952:	bf00      	nop
   13954:	0002f260 	.word	0x0002f260

00013958 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
   13958:	4801      	ldr	r0, [pc, #4]	; (13960 <dropped+0x8>)
   1395a:	f7ff bfa1 	b.w	138a0 <log_output_dropped_process>
   1395e:	bf00      	nop
   13960:	0002f260 	.word	0x0002f260

00013964 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
   13964:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   13966:	4806      	ldr	r0, [pc, #24]	; (13980 <log_backend_uart_init+0x1c>)
   13968:	f00e fe20 	bl	225ac <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   1396c:	4b05      	ldr	r3, [pc, #20]	; (13984 <log_backend_uart_init+0x20>)
   1396e:	6018      	str	r0, [r3, #0]
	assert((void *)uart_dev);
   13970:	b928      	cbnz	r0, 1397e <log_backend_uart_init+0x1a>
   13972:	212d      	movs	r1, #45	; 0x2d
   13974:	4b04      	ldr	r3, [pc, #16]	; (13988 <log_backend_uart_init+0x24>)
   13976:	4a05      	ldr	r2, [pc, #20]	; (1398c <log_backend_uart_init+0x28>)
   13978:	4805      	ldr	r0, [pc, #20]	; (13990 <log_backend_uart_init+0x2c>)
   1397a:	f012 f9bd 	bl	25cf8 <__assert_func>
}
   1397e:	bd08      	pop	{r3, pc}
   13980:	00030967 	.word	0x00030967
   13984:	2002155c 	.word	0x2002155c
   13988:	0003096e 	.word	0x0003096e
   1398c:	000309c5 	.word	0x000309c5
   13990:	0003097f 	.word	0x0003097f

00013994 <put>:
{
   13994:	b510      	push	{r4, lr}
   13996:	460c      	mov	r4, r1
	log_msg_get(msg);
   13998:	4608      	mov	r0, r1
   1399a:	f019 f856 	bl	2ca4a <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
   1399e:	4621      	mov	r1, r4
   139a0:	4804      	ldr	r0, [pc, #16]	; (139b4 <put+0x20>)
   139a2:	220f      	movs	r2, #15
   139a4:	f7ff feea 	bl	1377c <log_output_msg_process>
	log_msg_put(msg);
   139a8:	4620      	mov	r0, r4
}
   139aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   139ae:	f019 b877 	b.w	2caa0 <log_msg_put>
   139b2:	bf00      	nop
   139b4:	0002f260 	.word	0x0002f260

000139b8 <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
   139b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   139bc:	f8df 909c 	ldr.w	r9, [pc, #156]	; 13a5c <z_impl_zsock_socket+0xa4>
{
   139c0:	4605      	mov	r5, r0
   139c2:	460e      	mov	r6, r1
   139c4:	4617      	mov	r7, r2
   139c6:	46ca      	mov	sl, r9
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   139c8:	4c1e      	ldr	r4, [pc, #120]	; (13a44 <z_impl_zsock_socket+0x8c>)
   139ca:	f8df 8094 	ldr.w	r8, [pc, #148]	; 13a60 <z_impl_zsock_socket+0xa8>
   139ce:	454c      	cmp	r4, r9
   139d0:	d90c      	bls.n	139ec <z_impl_zsock_socket+0x34>
   139d2:	491d      	ldr	r1, [pc, #116]	; (13a48 <z_impl_zsock_socket+0x90>)
   139d4:	23c0      	movs	r3, #192	; 0xc0
   139d6:	4642      	mov	r2, r8
   139d8:	481c      	ldr	r0, [pc, #112]	; (13a4c <z_impl_zsock_socket+0x94>)
   139da:	f018 fd2a 	bl	2c432 <printk>
   139de:	481c      	ldr	r0, [pc, #112]	; (13a50 <z_impl_zsock_socket+0x98>)
   139e0:	f018 fd27 	bl	2c432 <printk>
   139e4:	21c0      	movs	r1, #192	; 0xc0
   139e6:	4640      	mov	r0, r8
   139e8:	f018 ff40 	bl	2c86c <assert_post_action>
   139ec:	4554      	cmp	r4, sl
   139ee:	d307      	bcc.n	13a00 <z_impl_zsock_socket+0x48>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   139f0:	f019 fb6d 	bl	2d0ce <__errno>
   139f4:	236a      	movs	r3, #106	; 0x6a
   139f6:	6003      	str	r3, [r0, #0]
	return -1;
}
   139f8:	f04f 30ff 	mov.w	r0, #4294967295
   139fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sock_family->family != family &&
   13a00:	6823      	ldr	r3, [r4, #0]
   13a02:	42ab      	cmp	r3, r5
   13a04:	d000      	beq.n	13a08 <z_impl_zsock_socket+0x50>
   13a06:	b9db      	cbnz	r3, 13a40 <z_impl_zsock_socket+0x88>
		NET_ASSERT(sock_family->is_supported);
   13a08:	6863      	ldr	r3, [r4, #4]
   13a0a:	b963      	cbnz	r3, 13a26 <z_impl_zsock_socket+0x6e>
   13a0c:	4911      	ldr	r1, [pc, #68]	; (13a54 <z_impl_zsock_socket+0x9c>)
   13a0e:	23c6      	movs	r3, #198	; 0xc6
   13a10:	4642      	mov	r2, r8
   13a12:	480e      	ldr	r0, [pc, #56]	; (13a4c <z_impl_zsock_socket+0x94>)
   13a14:	f018 fd0d 	bl	2c432 <printk>
   13a18:	480f      	ldr	r0, [pc, #60]	; (13a58 <z_impl_zsock_socket+0xa0>)
   13a1a:	f018 fd0a 	bl	2c432 <printk>
   13a1e:	21c6      	movs	r1, #198	; 0xc6
   13a20:	4640      	mov	r0, r8
   13a22:	f018 ff23 	bl	2c86c <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   13a26:	463a      	mov	r2, r7
   13a28:	4631      	mov	r1, r6
   13a2a:	4628      	mov	r0, r5
   13a2c:	6863      	ldr	r3, [r4, #4]
   13a2e:	4798      	blx	r3
   13a30:	b130      	cbz	r0, 13a40 <z_impl_zsock_socket+0x88>
		return sock_family->handler(family, type, proto);
   13a32:	463a      	mov	r2, r7
   13a34:	4631      	mov	r1, r6
   13a36:	4628      	mov	r0, r5
   13a38:	68a3      	ldr	r3, [r4, #8]
}
   13a3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sock_family->handler(family, type, proto);
   13a3e:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   13a40:	340c      	adds	r4, #12
   13a42:	e7c4      	b.n	139ce <z_impl_zsock_socket+0x16>
   13a44:	0002efe8 	.word	0x0002efe8
   13a48:	00030a61 	.word	0x00030a61
   13a4c:	00030166 	.word	0x00030166
   13a50:	00030a8e 	.word	0x00030a8e
   13a54:	00030a47 	.word	0x00030a47
   13a58:	00030a10 	.word	0x00030a10
   13a5c:	0002eff4 	.word	0x0002eff4
   13a60:	00030a13 	.word	0x00030a13

00013a64 <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   13a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	if (poll_timeout < 0) {
   13a68:	1e14      	subs	r4, r2, #0
{
   13a6a:	b09b      	sub	sp, #108	; 0x6c
   13a6c:	4606      	mov	r6, r0
   13a6e:	9103      	str	r1, [sp, #12]
	if (poll_timeout < 0) {
   13a70:	db30      	blt.n	13ad4 <z_impl_zsock_poll+0x70>
   13a72:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   13a76:	f240 30e7 	movw	r0, #999	; 0x3e7
   13a7a:	2100      	movs	r1, #0
   13a7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13a80:	2300      	movs	r3, #0
   13a82:	fbc5 0104 	smlal	r0, r1, r5, r4
   13a86:	f7f8 fee7 	bl	c858 <__aeabi_uldivmod>
   13a8a:	4682      	mov	sl, r0
   13a8c:	468b      	mov	fp, r1
	void *offl_ctx = NULL;
   13a8e:	2500      	movs	r5, #0
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = z_timeout_end_calc(timeout);
   13a90:	4650      	mov	r0, sl
   13a92:	4659      	mov	r1, fp
   13a94:	f01b f865 	bl	2eb62 <z_timeout_end_calc>

	pev = poll_events;
   13a98:	ab0b      	add	r3, sp, #44	; 0x2c
   13a9a:	9309      	str	r3, [sp, #36]	; 0x24
	const struct fd_op_vtable *offl_vtable = NULL;
   13a9c:	462f      	mov	r7, r5
	for (pfd = fds, i = nfds; i--; pfd++) {
   13a9e:	4633      	mov	r3, r6
	bool offload = false;
   13aa0:	46a8      	mov	r8, r5
	end = z_timeout_end_calc(timeout);
   13aa2:	e9cd 0104 	strd	r0, r1, [sp, #16]
	for (pfd = fds, i = nfds; i--; pfd++) {
   13aa6:	f8dd 900c 	ldr.w	r9, [sp, #12]
   13aaa:	f1b9 0f00 	cmp.w	r9, #0
   13aae:	d118      	bne.n	13ae2 <z_impl_zsock_poll+0x7e>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   13ab0:	f1b8 0f00 	cmp.w	r8, #0
   13ab4:	d049      	beq.n	13b4a <z_impl_zsock_poll+0xe6>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   13ab6:	9b03      	ldr	r3, [sp, #12]
   13ab8:	9401      	str	r4, [sp, #4]
   13aba:	9300      	str	r3, [sp, #0]
   13abc:	f44f 7282 	mov.w	r2, #260	; 0x104
   13ac0:	4633      	mov	r3, r6
   13ac2:	4629      	mov	r1, r5
   13ac4:	4638      	mov	r0, r7
   13ac6:	f019 f9b2 	bl	2ce2e <z_fdtable_call_ioctl>
   13aca:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
   13acc:	4620      	mov	r0, r4
   13ace:	b01b      	add	sp, #108	; 0x6c
   13ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_FOREVER;
   13ad4:	f04f 3aff 	mov.w	sl, #4294967295
   13ad8:	f04f 3bff 	mov.w	fp, #4294967295
		poll_timeout = SYS_FOREVER_MS;
   13adc:	f04f 34ff 	mov.w	r4, #4294967295
   13ae0:	e7d5      	b.n	13a8e <z_impl_zsock_poll+0x2a>
		if (pfd->fd < 0) {
   13ae2:	6818      	ldr	r0, [r3, #0]
   13ae4:	2800      	cmp	r0, #0
   13ae6:	db2c      	blt.n	13b42 <z_impl_zsock_poll+0xde>
	ctx = z_get_fd_obj_and_vtable(sock,
   13ae8:	a90a      	add	r1, sp, #40	; 0x28
   13aea:	9306      	str	r3, [sp, #24]
   13aec:	f7fe f9e8 	bl	11ec0 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   13af0:	9b06      	ldr	r3, [sp, #24]
   13af2:	4601      	mov	r1, r0
   13af4:	b328      	cbz	r0, 13b42 <z_impl_zsock_poll+0xde>
		result = z_fdtable_call_ioctl(vtable, ctx,
   13af6:	aa1a      	add	r2, sp, #104	; 0x68
   13af8:	9201      	str	r2, [sp, #4]
   13afa:	aa09      	add	r2, sp, #36	; 0x24
   13afc:	9200      	str	r2, [sp, #0]
   13afe:	9006      	str	r0, [sp, #24]
   13b00:	f44f 7281 	mov.w	r2, #258	; 0x102
   13b04:	980a      	ldr	r0, [sp, #40]	; 0x28
   13b06:	9307      	str	r3, [sp, #28]
   13b08:	f019 f991 	bl	2ce2e <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   13b0c:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   13b10:	4602      	mov	r2, r0
		if (result == -EALREADY) {
   13b12:	9b07      	ldr	r3, [sp, #28]
   13b14:	d011      	beq.n	13b3a <z_impl_zsock_poll+0xd6>
		} else if (result == -EXDEV) {
   13b16:	f110 0f12 	cmn.w	r0, #18
   13b1a:	9906      	ldr	r1, [sp, #24]
   13b1c:	d105      	bne.n	13b2a <z_impl_zsock_poll+0xc6>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   13b1e:	b90f      	cbnz	r7, 13b24 <z_impl_zsock_poll+0xc0>
				offl_vtable = vtable;
   13b20:	460d      	mov	r5, r1
   13b22:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			offload = true;
   13b24:	f04f 0801 	mov.w	r8, #1
   13b28:	e00b      	b.n	13b42 <z_impl_zsock_poll+0xde>
		} else if (result != 0) {
   13b2a:	b150      	cbz	r0, 13b42 <z_impl_zsock_poll+0xde>
   13b2c:	9203      	str	r2, [sp, #12]
				errno = -result;
   13b2e:	f019 face 	bl	2d0ce <__errno>
   13b32:	9a03      	ldr	r2, [sp, #12]
   13b34:	4252      	negs	r2, r2
   13b36:	6002      	str	r2, [r0, #0]
				return -1;
   13b38:	e03e      	b.n	13bb8 <z_impl_zsock_poll+0x154>
			timeout = K_NO_WAIT;
   13b3a:	f04f 0a00 	mov.w	sl, #0
   13b3e:	f04f 0b00 	mov.w	fp, #0
	for (pfd = fds, i = nfds; i--; pfd++) {
   13b42:	3308      	adds	r3, #8
   13b44:	f109 39ff 	add.w	r9, r9, #4294967295
   13b48:	e7af      	b.n	13aaa <z_impl_zsock_poll+0x46>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   13b4a:	ea5a 030b 	orrs.w	r3, sl, fp
   13b4e:	d016      	beq.n	13b7e <z_impl_zsock_poll+0x11a>
   13b50:	f1bb 3fff 	cmp.w	fp, #4294967295
   13b54:	bf08      	it	eq
   13b56:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   13b5a:	d010      	beq.n	13b7e <z_impl_zsock_poll+0x11a>
		int64_t remaining = end - z_tick_get();
   13b5c:	f011 fc7a 	bl	25454 <z_tick_get>
   13b60:	9b04      	ldr	r3, [sp, #16]
   13b62:	ebb3 0a00 	subs.w	sl, r3, r0
   13b66:	9b05      	ldr	r3, [sp, #20]
   13b68:	eb63 0b01 	sbc.w	fp, r3, r1
   13b6c:	f1ba 0f00 	cmp.w	sl, #0
   13b70:	f17b 0300 	sbcs.w	r3, fp, #0
   13b74:	bfbc      	itt	lt
   13b76:	f04f 0a00 	movlt.w	sl, #0
   13b7a:	f04f 0b00 	movlt.w	fp, #0
			pfd->revents = 0;
   13b7e:	f04f 0900 	mov.w	r9, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   13b82:	9909      	ldr	r1, [sp, #36]	; 0x24
   13b84:	ac0b      	add	r4, sp, #44	; 0x2c
   13b86:	4b34      	ldr	r3, [pc, #208]	; (13c58 <z_impl_zsock_poll+0x1f4>)
   13b88:	1b09      	subs	r1, r1, r4
   13b8a:	1089      	asrs	r1, r1, #2
   13b8c:	4359      	muls	r1, r3
	return z_impl_k_poll(events, num_events, timeout);
   13b8e:	465b      	mov	r3, fp
   13b90:	4652      	mov	r2, sl
   13b92:	4620      	mov	r0, r4
   13b94:	f011 ff26 	bl	259e4 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   13b98:	f100 030b 	add.w	r3, r0, #11
   13b9c:	2b0b      	cmp	r3, #11
   13b9e:	4607      	mov	r7, r0
   13ba0:	d806      	bhi.n	13bb0 <z_impl_zsock_poll+0x14c>
   13ba2:	f640 0581 	movw	r5, #2177	; 0x881
   13ba6:	40dd      	lsrs	r5, r3
   13ba8:	43ed      	mvns	r5, r5
   13baa:	f015 0501 	ands.w	r5, r5, #1
   13bae:	d006      	beq.n	13bbe <z_impl_zsock_poll+0x15a>
			errno = -ret;
   13bb0:	f019 fa8d 	bl	2d0ce <__errno>
   13bb4:	427f      	negs	r7, r7
   13bb6:	6007      	str	r7, [r0, #0]
			return -1;
   13bb8:	f04f 34ff 	mov.w	r4, #4294967295
   13bbc:	e786      	b.n	13acc <z_impl_zsock_poll+0x68>
		pev = poll_events;
   13bbe:	9409      	str	r4, [sp, #36]	; 0x24
		for (pfd = fds, i = nfds; i--; pfd++) {
   13bc0:	46b0      	mov	r8, r6
		ret = 0;
   13bc2:	462c      	mov	r4, r5
		for (pfd = fds, i = nfds; i--; pfd++) {
   13bc4:	9f03      	ldr	r7, [sp, #12]
   13bc6:	b9ef      	cbnz	r7, 13c04 <z_impl_zsock_poll+0x1a0>
		if (retry) {
   13bc8:	2d00      	cmp	r5, #0
   13bca:	f43f af7f 	beq.w	13acc <z_impl_zsock_poll+0x68>
			if (ret > 0) {
   13bce:	2c00      	cmp	r4, #0
   13bd0:	f73f af7c 	bgt.w	13acc <z_impl_zsock_poll+0x68>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   13bd4:	ea5a 030b 	orrs.w	r3, sl, fp
   13bd8:	f43f af78 	beq.w	13acc <z_impl_zsock_poll+0x68>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   13bdc:	f1bb 3fff 	cmp.w	fp, #4294967295
   13be0:	bf08      	it	eq
   13be2:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   13be6:	d0cc      	beq.n	13b82 <z_impl_zsock_poll+0x11e>
				int64_t remaining = end - z_tick_get();
   13be8:	f011 fc34 	bl	25454 <z_tick_get>
   13bec:	9b04      	ldr	r3, [sp, #16]
   13bee:	ebb3 0a00 	subs.w	sl, r3, r0
   13bf2:	9b05      	ldr	r3, [sp, #20]
   13bf4:	eb63 0b01 	sbc.w	fp, r3, r1
				if (remaining <= 0) {
   13bf8:	f1ba 0f01 	cmp.w	sl, #1
   13bfc:	f17b 0300 	sbcs.w	r3, fp, #0
   13c00:	dabf      	bge.n	13b82 <z_impl_zsock_poll+0x11e>
   13c02:	e763      	b.n	13acc <z_impl_zsock_poll+0x68>
			if (pfd->fd < 0) {
   13c04:	f8d8 0000 	ldr.w	r0, [r8]
			pfd->revents = 0;
   13c08:	f8a8 9006 	strh.w	r9, [r8, #6]
			if (pfd->fd < 0) {
   13c0c:	2800      	cmp	r0, #0
   13c0e:	db1c      	blt.n	13c4a <z_impl_zsock_poll+0x1e6>
	ctx = z_get_fd_obj_and_vtable(sock,
   13c10:	a90a      	add	r1, sp, #40	; 0x28
   13c12:	f7fe f955 	bl	11ec0 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   13c16:	4601      	mov	r1, r0
   13c18:	b920      	cbnz	r0, 13c24 <z_impl_zsock_poll+0x1c0>
				pfd->revents = ZSOCK_POLLNVAL;
   13c1a:	2220      	movs	r2, #32
   13c1c:	f8a8 2006 	strh.w	r2, [r8, #6]
				ret++;
   13c20:	3401      	adds	r4, #1
   13c22:	e012      	b.n	13c4a <z_impl_zsock_poll+0x1e6>
			result = z_fdtable_call_ioctl(vtable, ctx,
   13c24:	ab09      	add	r3, sp, #36	; 0x24
   13c26:	f240 1203 	movw	r2, #259	; 0x103
   13c2a:	9300      	str	r3, [sp, #0]
   13c2c:	980a      	ldr	r0, [sp, #40]	; 0x28
   13c2e:	4643      	mov	r3, r8
   13c30:	f019 f8fd 	bl	2ce2e <z_fdtable_call_ioctl>
			if (result == -EAGAIN) {
   13c34:	f110 0f0b 	cmn.w	r0, #11
			result = z_fdtable_call_ioctl(vtable, ctx,
   13c38:	4602      	mov	r2, r0
			if (result == -EAGAIN) {
   13c3a:	d00a      	beq.n	13c52 <z_impl_zsock_poll+0x1ee>
			} else if (result != 0) {
   13c3c:	2800      	cmp	r0, #0
   13c3e:	f47f af75 	bne.w	13b2c <z_impl_zsock_poll+0xc8>
			if (pfd->revents != 0) {
   13c42:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
   13c46:	2a00      	cmp	r2, #0
   13c48:	d1ea      	bne.n	13c20 <z_impl_zsock_poll+0x1bc>
		for (pfd = fds, i = nfds; i--; pfd++) {
   13c4a:	f108 0808 	add.w	r8, r8, #8
   13c4e:	3f01      	subs	r7, #1
   13c50:	e7b9      	b.n	13bc6 <z_impl_zsock_poll+0x162>
				retry = true;
   13c52:	2501      	movs	r5, #1
   13c54:	e7f9      	b.n	13c4a <z_impl_zsock_poll+0x1e6>
   13c56:	bf00      	nop
   13c58:	cccccccd 	.word	0xcccccccd

00013c5c <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   13c5c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   13c5e:	4605      	mov	r5, r0
   13c60:	b948      	cbnz	r0, 13c76 <socket_offload_dns_register+0x1a>
   13c62:	490c      	ldr	r1, [pc, #48]	; (13c94 <socket_offload_dns_register+0x38>)
   13c64:	480c      	ldr	r0, [pc, #48]	; (13c98 <socket_offload_dns_register+0x3c>)
   13c66:	2313      	movs	r3, #19
   13c68:	4a0c      	ldr	r2, [pc, #48]	; (13c9c <socket_offload_dns_register+0x40>)
   13c6a:	f018 fbe2 	bl	2c432 <printk>
   13c6e:	2113      	movs	r1, #19
   13c70:	480a      	ldr	r0, [pc, #40]	; (13c9c <socket_offload_dns_register+0x40>)
   13c72:	f018 fdfb 	bl	2c86c <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   13c76:	4c0a      	ldr	r4, [pc, #40]	; (13ca0 <socket_offload_dns_register+0x44>)
   13c78:	6822      	ldr	r2, [r4, #0]
   13c7a:	b14a      	cbz	r2, 13c90 <socket_offload_dns_register+0x34>
   13c7c:	4909      	ldr	r1, [pc, #36]	; (13ca4 <socket_offload_dns_register+0x48>)
   13c7e:	4806      	ldr	r0, [pc, #24]	; (13c98 <socket_offload_dns_register+0x3c>)
   13c80:	2314      	movs	r3, #20
   13c82:	4a06      	ldr	r2, [pc, #24]	; (13c9c <socket_offload_dns_register+0x40>)
   13c84:	f018 fbd5 	bl	2c432 <printk>
   13c88:	2114      	movs	r1, #20
   13c8a:	4804      	ldr	r0, [pc, #16]	; (13c9c <socket_offload_dns_register+0x40>)
   13c8c:	f018 fdee 	bl	2c86c <assert_post_action>

	dns_offload = ops;
   13c90:	6025      	str	r5, [r4, #0]
}
   13c92:	bd38      	pop	{r3, r4, r5, pc}
   13c94:	00032d4f 	.word	0x00032d4f
   13c98:	00030166 	.word	0x00030166
   13c9c:	00030aad 	.word	0x00030aad
   13ca0:	20021560 	.word	0x20021560
   13ca4:	00030ae8 	.word	0x00030ae8

00013ca8 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   13ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   13cac:	4c13      	ldr	r4, [pc, #76]	; (13cfc <socket_offload_getaddrinfo+0x54>)
{
   13cae:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(dns_offload);
   13cb0:	6823      	ldr	r3, [r4, #0]
{
   13cb2:	4605      	mov	r5, r0
   13cb4:	460e      	mov	r6, r1
   13cb6:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(dns_offload);
   13cb8:	b94b      	cbnz	r3, 13cce <socket_offload_getaddrinfo+0x26>
   13cba:	4911      	ldr	r1, [pc, #68]	; (13d00 <socket_offload_getaddrinfo+0x58>)
   13cbc:	4811      	ldr	r0, [pc, #68]	; (13d04 <socket_offload_getaddrinfo+0x5c>)
   13cbe:	231d      	movs	r3, #29
   13cc0:	4a11      	ldr	r2, [pc, #68]	; (13d08 <socket_offload_getaddrinfo+0x60>)
   13cc2:	f018 fbb6 	bl	2c432 <printk>
   13cc6:	211d      	movs	r1, #29
   13cc8:	480f      	ldr	r0, [pc, #60]	; (13d08 <socket_offload_getaddrinfo+0x60>)
   13cca:	f018 fdcf 	bl	2c86c <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   13cce:	6823      	ldr	r3, [r4, #0]
   13cd0:	681b      	ldr	r3, [r3, #0]
   13cd2:	b94b      	cbnz	r3, 13ce8 <socket_offload_getaddrinfo+0x40>
   13cd4:	490d      	ldr	r1, [pc, #52]	; (13d0c <socket_offload_getaddrinfo+0x64>)
   13cd6:	480b      	ldr	r0, [pc, #44]	; (13d04 <socket_offload_getaddrinfo+0x5c>)
   13cd8:	231e      	movs	r3, #30
   13cda:	4a0b      	ldr	r2, [pc, #44]	; (13d08 <socket_offload_getaddrinfo+0x60>)
   13cdc:	f018 fba9 	bl	2c432 <printk>
   13ce0:	211e      	movs	r1, #30
   13ce2:	4809      	ldr	r0, [pc, #36]	; (13d08 <socket_offload_getaddrinfo+0x60>)
   13ce4:	f018 fdc2 	bl	2c86c <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   13ce8:	6823      	ldr	r3, [r4, #0]
   13cea:	463a      	mov	r2, r7
   13cec:	681c      	ldr	r4, [r3, #0]
   13cee:	4631      	mov	r1, r6
   13cf0:	4643      	mov	r3, r8
   13cf2:	4628      	mov	r0, r5
   13cf4:	46a4      	mov	ip, r4
}
   13cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   13cfa:	4760      	bx	ip
   13cfc:	20021560 	.word	0x20021560
   13d00:	00030b03 	.word	0x00030b03
   13d04:	00030166 	.word	0x00030166
   13d08:	00030aad 	.word	0x00030aad
   13d0c:	00030b0f 	.word	0x00030b0f

00013d10 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   13d10:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   13d12:	4c10      	ldr	r4, [pc, #64]	; (13d54 <socket_offload_freeaddrinfo+0x44>)
{
   13d14:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(dns_offload);
   13d16:	6823      	ldr	r3, [r4, #0]
   13d18:	b94b      	cbnz	r3, 13d2e <socket_offload_freeaddrinfo+0x1e>
   13d1a:	490f      	ldr	r1, [pc, #60]	; (13d58 <socket_offload_freeaddrinfo+0x48>)
   13d1c:	480f      	ldr	r0, [pc, #60]	; (13d5c <socket_offload_freeaddrinfo+0x4c>)
   13d1e:	2325      	movs	r3, #37	; 0x25
   13d20:	4a0f      	ldr	r2, [pc, #60]	; (13d60 <socket_offload_freeaddrinfo+0x50>)
   13d22:	f018 fb86 	bl	2c432 <printk>
   13d26:	2125      	movs	r1, #37	; 0x25
   13d28:	480d      	ldr	r0, [pc, #52]	; (13d60 <socket_offload_freeaddrinfo+0x50>)
   13d2a:	f018 fd9f 	bl	2c86c <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   13d2e:	6823      	ldr	r3, [r4, #0]
   13d30:	685b      	ldr	r3, [r3, #4]
   13d32:	b94b      	cbnz	r3, 13d48 <socket_offload_freeaddrinfo+0x38>
   13d34:	490b      	ldr	r1, [pc, #44]	; (13d64 <socket_offload_freeaddrinfo+0x54>)
   13d36:	4809      	ldr	r0, [pc, #36]	; (13d5c <socket_offload_freeaddrinfo+0x4c>)
   13d38:	2326      	movs	r3, #38	; 0x26
   13d3a:	4a09      	ldr	r2, [pc, #36]	; (13d60 <socket_offload_freeaddrinfo+0x50>)
   13d3c:	f018 fb79 	bl	2c432 <printk>
   13d40:	2126      	movs	r1, #38	; 0x26
   13d42:	4807      	ldr	r0, [pc, #28]	; (13d60 <socket_offload_freeaddrinfo+0x50>)
   13d44:	f018 fd92 	bl	2c86c <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   13d48:	6823      	ldr	r3, [r4, #0]
   13d4a:	4628      	mov	r0, r5
}
   13d4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   13d50:	685b      	ldr	r3, [r3, #4]
   13d52:	4718      	bx	r3
   13d54:	20021560 	.word	0x20021560
   13d58:	00030b03 	.word	0x00030b03
   13d5c:	00030166 	.word	0x00030166
   13d60:	00030aad 	.word	0x00030aad
   13d64:	00030b28 	.word	0x00030b28

00013d68 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   13d68:	b508      	push	{r3, lr}
   13d6a:	4806      	ldr	r0, [pc, #24]	; (13d84 <uart_console_init+0x1c>)
   13d6c:	f00e fc1e 	bl	225ac <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   13d70:	4b05      	ldr	r3, [pc, #20]	; (13d88 <uart_console_init+0x20>)
   13d72:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   13d74:	4805      	ldr	r0, [pc, #20]	; (13d8c <uart_console_init+0x24>)
   13d76:	f001 fa97 	bl	152a8 <__stdout_hook_install>
	__printk_hook_install(console_out);
   13d7a:	4804      	ldr	r0, [pc, #16]	; (13d8c <uart_console_init+0x24>)
   13d7c:	f7fe f996 	bl	120ac <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   13d80:	2000      	movs	r0, #0
   13d82:	bd08      	pop	{r3, pc}
   13d84:	00030967 	.word	0x00030967
   13d88:	20021564 	.word	0x20021564
   13d8c:	00013d91 	.word	0x00013d91

00013d90 <console_out>:
	if ('\n' == c) {
   13d90:	280a      	cmp	r0, #10
{
   13d92:	b538      	push	{r3, r4, r5, lr}
   13d94:	4604      	mov	r4, r0
   13d96:	4d07      	ldr	r5, [pc, #28]	; (13db4 <console_out+0x24>)
	if ('\n' == c) {
   13d98:	d104      	bne.n	13da4 <console_out+0x14>
   13d9a:	6828      	ldr	r0, [r5, #0]
   13d9c:	6883      	ldr	r3, [r0, #8]
   13d9e:	210d      	movs	r1, #13
   13da0:	685b      	ldr	r3, [r3, #4]
   13da2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   13da4:	6828      	ldr	r0, [r5, #0]
   13da6:	6883      	ldr	r3, [r0, #8]
   13da8:	b2e1      	uxtb	r1, r4
   13daa:	685b      	ldr	r3, [r3, #4]
   13dac:	4798      	blx	r3
}
   13dae:	4620      	mov	r0, r4
   13db0:	bd38      	pop	{r3, r4, r5, pc}
   13db2:	bf00      	nop
   13db4:	20021564 	.word	0x20021564

00013db8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   13db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   13dbc:	4c0e      	ldr	r4, [pc, #56]	; (13df8 <onoff_start+0x40>)
{
   13dbe:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
   13dc0:	1b05      	subs	r5, r0, r4
   13dc2:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   13dc6:	250c      	movs	r5, #12
   13dc8:	435d      	muls	r5, r3
   13dca:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   13dce:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   13dd0:	4420      	add	r0, r4
   13dd2:	2140      	movs	r1, #64	; 0x40
   13dd4:	f019 f8b7 	bl	2cf46 <set_starting_state>
	if (err < 0) {
   13dd8:	1e01      	subs	r1, r0, #0
   13dda:	db08      	blt.n	13dee <onoff_start+0x36>
	subdata->cb = data->cb;
   13ddc:	4b07      	ldr	r3, [pc, #28]	; (13dfc <onoff_start+0x44>)
   13dde:	442c      	add	r4, r5
	subdata->user_data = data->user_data;
   13de0:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   13de4:	4b06      	ldr	r3, [pc, #24]	; (13e00 <onoff_start+0x48>)
   13de6:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   13de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   13dec:	4718      	bx	r3
		notify(mgr, err);
   13dee:	4638      	mov	r0, r7
   13df0:	4633      	mov	r3, r6
}
   13df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   13df6:	4718      	bx	r3
   13df8:	20021578 	.word	0x20021578
   13dfc:	0002cfa9 	.word	0x0002cfa9
   13e00:	0002f284 	.word	0x0002f284

00013e04 <get_status>:
{
   13e04:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13e06:	b2cc      	uxtb	r4, r1
   13e08:	2c01      	cmp	r4, #1
{
   13e0a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13e0c:	d909      	bls.n	13e22 <get_status+0x1e>
   13e0e:	4909      	ldr	r1, [pc, #36]	; (13e34 <get_status+0x30>)
   13e10:	4809      	ldr	r0, [pc, #36]	; (13e38 <get_status+0x34>)
   13e12:	237d      	movs	r3, #125	; 0x7d
   13e14:	4a09      	ldr	r2, [pc, #36]	; (13e3c <get_status+0x38>)
   13e16:	f018 fb0c 	bl	2c432 <printk>
   13e1a:	217d      	movs	r1, #125	; 0x7d
   13e1c:	4807      	ldr	r0, [pc, #28]	; (13e3c <get_status+0x38>)
   13e1e:	f018 fd25 	bl	2c86c <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   13e22:	210c      	movs	r1, #12
   13e24:	68eb      	ldr	r3, [r5, #12]
   13e26:	fb04 3401 	mla	r4, r4, r1, r3
   13e2a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   13e2c:	f000 0007 	and.w	r0, r0, #7
   13e30:	bd38      	pop	{r3, r4, r5, pc}
   13e32:	bf00      	nop
   13e34:	00030b85 	.word	0x00030b85
   13e38:	00030166 	.word	0x00030166
   13e3c:	00030b48 	.word	0x00030b48

00013e40 <stop>:
{
   13e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13e42:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13e44:	2c01      	cmp	r4, #1
{
   13e46:	4605      	mov	r5, r0
   13e48:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   13e4a:	68c7      	ldr	r7, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   13e4c:	d90b      	bls.n	13e66 <stop+0x26>
   13e4e:	4919      	ldr	r1, [pc, #100]	; (13eb4 <stop+0x74>)
   13e50:	4819      	ldr	r0, [pc, #100]	; (13eb8 <stop+0x78>)
   13e52:	f240 1345 	movw	r3, #325	; 0x145
   13e56:	4a19      	ldr	r2, [pc, #100]	; (13ebc <stop+0x7c>)
   13e58:	f018 faeb 	bl	2c432 <printk>
   13e5c:	f240 1145 	movw	r1, #325	; 0x145
   13e60:	4816      	ldr	r0, [pc, #88]	; (13ebc <stop+0x7c>)
   13e62:	f018 fd03 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   13e66:	f04f 0320 	mov.w	r3, #32
   13e6a:	f3ef 8211 	mrs	r2, BASEPRI
   13e6e:	f383 8811 	msr	BASEPRI, r3
   13e72:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   13e76:	230c      	movs	r3, #12
   13e78:	fb03 7104 	mla	r1, r3, r4, r7
   13e7c:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   13e7e:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   13e82:	d001      	beq.n	13e88 <stop+0x48>
   13e84:	428e      	cmp	r6, r1
   13e86:	d111      	bne.n	13eac <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   13e88:	2101      	movs	r1, #1
	int err = 0;
   13e8a:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   13e8c:	fb03 7304 	mla	r3, r3, r4, r7
   13e90:	6499      	str	r1, [r3, #72]	; 0x48
	__asm__ volatile(
   13e92:	f382 8811 	msr	BASEPRI, r2
   13e96:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   13e9a:	b930      	cbnz	r0, 13eaa <stop+0x6a>
	get_sub_config(dev, type)->stop();
   13e9c:	230c      	movs	r3, #12
   13e9e:	6869      	ldr	r1, [r5, #4]
   13ea0:	fb03 1404 	mla	r4, r3, r4, r1
   13ea4:	6863      	ldr	r3, [r4, #4]
   13ea6:	4798      	blx	r3
	return 0;
   13ea8:	2000      	movs	r0, #0
}
   13eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   13eac:	f04f 30ff 	mov.w	r0, #4294967295
   13eb0:	e7ef      	b.n	13e92 <stop+0x52>
   13eb2:	bf00      	nop
   13eb4:	00030b85 	.word	0x00030b85
   13eb8:	00030166 	.word	0x00030166
   13ebc:	00030b48 	.word	0x00030b48

00013ec0 <onoff_stop>:
{
   13ec0:	b570      	push	{r4, r5, r6, lr}
   13ec2:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   13ec4:	4906      	ldr	r1, [pc, #24]	; (13ee0 <onoff_stop+0x20>)
{
   13ec6:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   13ec8:	1a41      	subs	r1, r0, r1
	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
   13eca:	1149      	asrs	r1, r1, #5
   13ecc:	2240      	movs	r2, #64	; 0x40
   13ece:	4805      	ldr	r0, [pc, #20]	; (13ee4 <onoff_stop+0x24>)
   13ed0:	f7ff ffb6 	bl	13e40 <stop>
	notify(mgr, res);
   13ed4:	462b      	mov	r3, r5
	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
   13ed6:	4601      	mov	r1, r0
	notify(mgr, res);
   13ed8:	4620      	mov	r0, r4
}
   13eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   13ede:	4718      	bx	r3
   13ee0:	20021578 	.word	0x20021578
   13ee4:	20020a60 	.word	0x20020a60

00013ee8 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   13ee8:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13eea:	2200      	movs	r2, #0
   13eec:	2101      	movs	r1, #1
{
   13eee:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13ef0:	2005      	movs	r0, #5
   13ef2:	f000 fb93 	bl	1461c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   13ef6:	2005      	movs	r0, #5
   13ef8:	f000 fb72 	bl	145e0 <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
   13efc:	480f      	ldr	r0, [pc, #60]	; (13f3c <clk_init+0x54>)
   13efe:	f00e f823 	bl	21f48 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   13f02:	4b0f      	ldr	r3, [pc, #60]	; (13f40 <clk_init+0x58>)
   13f04:	4298      	cmp	r0, r3
   13f06:	d115      	bne.n	13f34 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   13f08:	f00e f842 	bl	21f90 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   13f0c:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   13f0e:	490d      	ldr	r1, [pc, #52]	; (13f44 <clk_init+0x5c>)
   13f10:	4630      	mov	r0, r6
   13f12:	f018 fae9 	bl	2c4e8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   13f16:	2800      	cmp	r0, #0
   13f18:	db0b      	blt.n	13f32 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13f1a:	2501      	movs	r5, #1
   13f1c:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   13f1e:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   13f20:	4908      	ldr	r1, [pc, #32]	; (13f44 <clk_init+0x5c>)
   13f22:	f104 0020 	add.w	r0, r4, #32
   13f26:	f018 fadf 	bl	2c4e8 <onoff_manager_init>
		if (err < 0) {
   13f2a:	2800      	cmp	r0, #0
   13f2c:	db01      	blt.n	13f32 <clk_init+0x4a>
	}

	return 0;
   13f2e:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   13f30:	6565      	str	r5, [r4, #84]	; 0x54
}
   13f32:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   13f34:	f06f 0004 	mvn.w	r0, #4
   13f38:	e7fb      	b.n	13f32 <clk_init+0x4a>
   13f3a:	bf00      	nop
   13f3c:	00013f85 	.word	0x00013f85
   13f40:	0bad0000 	.word	0x0bad0000
   13f44:	0002f29c 	.word	0x0002f29c

00013f48 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   13f48:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   13f4a:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   13f4c:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   13f4e:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   13f50:	434b      	muls	r3, r1
   13f52:	480a      	ldr	r0, [pc, #40]	; (13f7c <clkstarted_handle.constprop.0+0x34>)
   13f54:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   13f56:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
   13f58:	e9d4 5210 	ldrd	r5, r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   13f5c:	4418      	add	r0, r3
	sub_data->cb = NULL;
   13f5e:	6426      	str	r6, [r4, #64]	; 0x40
	void *user_data = sub_data->user_data;
   13f60:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   13f62:	f019 f80e 	bl	2cf82 <set_on_state>
	if (callback) {
   13f66:	b135      	cbz	r5, 13f76 <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   13f68:	462b      	mov	r3, r5
   13f6a:	9a01      	ldr	r2, [sp, #4]
   13f6c:	4804      	ldr	r0, [pc, #16]	; (13f80 <clkstarted_handle.constprop.0+0x38>)
}
   13f6e:	b002      	add	sp, #8
   13f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   13f74:	4718      	bx	r3
}
   13f76:	b002      	add	sp, #8
   13f78:	bd70      	pop	{r4, r5, r6, pc}
   13f7a:	bf00      	nop
   13f7c:	20021578 	.word	0x20021578
   13f80:	20020a60 	.word	0x20020a60

00013f84 <clock_event_handler>:
	switch (event) {
   13f84:	2801      	cmp	r0, #1
{
   13f86:	b508      	push	{r3, lr}
	switch (event) {
   13f88:	d006      	beq.n	13f98 <clock_event_handler+0x14>
   13f8a:	2803      	cmp	r0, #3
   13f8c:	d008      	beq.n	13fa0 <clock_event_handler+0x1c>
   13f8e:	b9a8      	cbnz	r0, 13fbc <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   13f90:	4b10      	ldr	r3, [pc, #64]	; (13fd4 <clock_event_handler+0x50>)
   13f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   13f94:	075b      	lsls	r3, r3, #29
   13f96:	d11b      	bne.n	13fd0 <clock_event_handler+0x4c>
}
   13f98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   13f9c:	f7ff bfd4 	b.w	13f48 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   13fa0:	490d      	ldr	r1, [pc, #52]	; (13fd8 <clock_event_handler+0x54>)
   13fa2:	f240 2356 	movw	r3, #598	; 0x256
   13fa6:	4a0d      	ldr	r2, [pc, #52]	; (13fdc <clock_event_handler+0x58>)
   13fa8:	480d      	ldr	r0, [pc, #52]	; (13fe0 <clock_event_handler+0x5c>)
   13faa:	f018 fa42 	bl	2c432 <printk>
   13fae:	f240 2156 	movw	r1, #598	; 0x256
}
   13fb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   13fb6:	4809      	ldr	r0, [pc, #36]	; (13fdc <clock_event_handler+0x58>)
   13fb8:	f018 bc58 	b.w	2c86c <assert_post_action>
   13fbc:	4906      	ldr	r1, [pc, #24]	; (13fd8 <clock_event_handler+0x54>)
   13fbe:	f240 235a 	movw	r3, #602	; 0x25a
   13fc2:	4a06      	ldr	r2, [pc, #24]	; (13fdc <clock_event_handler+0x58>)
   13fc4:	4806      	ldr	r0, [pc, #24]	; (13fe0 <clock_event_handler+0x5c>)
   13fc6:	f018 fa34 	bl	2c432 <printk>
   13fca:	f240 215a 	movw	r1, #602	; 0x25a
   13fce:	e7f0      	b.n	13fb2 <clock_event_handler+0x2e>
}
   13fd0:	bd08      	pop	{r3, pc}
   13fd2:	bf00      	nop
   13fd4:	20021578 	.word	0x20021578
   13fd8:	00032fcf 	.word	0x00032fcf
   13fdc:	00030b48 	.word	0x00030b48
   13fe0:	00030166 	.word	0x00030166

00013fe4 <generic_hfclk_start>:
{
   13fe4:	b508      	push	{r3, lr}
	__asm__ volatile(
   13fe6:	f04f 0320 	mov.w	r3, #32
   13fea:	f3ef 8111 	mrs	r1, BASEPRI
   13fee:	f383 8811 	msr	BASEPRI, r3
   13ff2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   13ff6:	4a11      	ldr	r2, [pc, #68]	; (1403c <generic_hfclk_start+0x58>)
   13ff8:	6813      	ldr	r3, [r2, #0]
   13ffa:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   13ffe:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   14002:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   14004:	d00b      	beq.n	1401e <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   14006:	4a0e      	ldr	r2, [pc, #56]	; (14040 <generic_hfclk_start+0x5c>)
   14008:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1400c:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   14010:	f013 0301 	ands.w	r3, r3, #1
   14014:	d003      	beq.n	1401e <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   14016:	480b      	ldr	r0, [pc, #44]	; (14044 <generic_hfclk_start+0x60>)
   14018:	f018 ffb3 	bl	2cf82 <set_on_state>
			already_started = true;
   1401c:	2301      	movs	r3, #1
	__asm__ volatile(
   1401e:	f381 8811 	msr	BASEPRI, r1
   14022:	f3bf 8f6f 	isb	sy
	if (already_started) {
   14026:	b123      	cbz	r3, 14032 <generic_hfclk_start+0x4e>
}
   14028:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
   1402c:	2000      	movs	r0, #0
   1402e:	f7ff bf8b 	b.w	13f48 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   14032:	2001      	movs	r0, #1
}
   14034:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14038:	f00d bfca 	b.w	21fd0 <nrfx_clock_start>
   1403c:	200215d0 	.word	0x200215d0
   14040:	40005000 	.word	0x40005000
   14044:	200215c0 	.word	0x200215c0

00014048 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14048:	4b07      	ldr	r3, [pc, #28]	; (14068 <generic_hfclk_stop+0x20>)
   1404a:	e8d3 2fef 	ldaex	r2, [r3]
   1404e:	f022 0102 	bic.w	r1, r2, #2
   14052:	e8c3 1fe0 	stlex	r0, r1, [r3]
   14056:	2800      	cmp	r0, #0
   14058:	d1f7      	bne.n	1404a <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1405a:	07d3      	lsls	r3, r2, #31
   1405c:	d402      	bmi.n	14064 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1405e:	2001      	movs	r0, #1
   14060:	f00e b80c 	b.w	2207c <nrfx_clock_stop>
}
   14064:	4770      	bx	lr
   14066:	bf00      	nop
   14068:	200215d0 	.word	0x200215d0

0001406c <api_blocking_start>:
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1406c:	2300      	movs	r3, #0
   1406e:	2201      	movs	r2, #1
{
   14070:	b510      	push	{r4, lr}
   14072:	b08a      	sub	sp, #40	; 0x28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14074:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
   14078:	9301      	str	r3, [sp, #4]
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1407a:	aa08      	add	r2, sp, #32
	struct clock_control_async_data data = {
   1407c:	4b0a      	ldr	r3, [pc, #40]	; (140a8 <api_blocking_start+0x3c>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1407e:	e9cd 2208 	strd	r2, r2, [sp, #32]
   14082:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
   14084:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14086:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
   1408a:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
   1408e:	f018 ff9d 	bl	2cfcc <api_start>
	if (err < 0) {
   14092:	2800      	cmp	r0, #0
   14094:	db05      	blt.n	140a2 <api_blocking_start+0x36>
	return z_impl_k_sem_take(sem, timeout);
   14096:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1409a:	2300      	movs	r3, #0
   1409c:	4620      	mov	r0, r4
   1409e:	f010 fc55 	bl	2494c <z_impl_k_sem_take>
}
   140a2:	b00a      	add	sp, #40	; 0x28
   140a4:	bd10      	pop	{r4, pc}
   140a6:	bf00      	nop
   140a8:	0002cfbb 	.word	0x0002cfbb

000140ac <z_nrf_clock_control_lf_on>:
{
   140ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   140b0:	2201      	movs	r2, #1
   140b2:	4606      	mov	r6, r0
   140b4:	4945      	ldr	r1, [pc, #276]	; (141cc <z_nrf_clock_control_lf_on+0x120>)
   140b6:	e8d1 3fef 	ldaex	r3, [r1]
   140ba:	e8c1 2fe0 	stlex	r0, r2, [r1]
   140be:	2800      	cmp	r0, #0
   140c0:	d1f9      	bne.n	140b6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   140c2:	b9a3      	cbnz	r3, 140ee <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   140c4:	4942      	ldr	r1, [pc, #264]	; (141d0 <z_nrf_clock_control_lf_on+0x124>)
		err = onoff_request(mgr, &cli);
   140c6:	4843      	ldr	r0, [pc, #268]	; (141d4 <z_nrf_clock_control_lf_on+0x128>)
   140c8:	604b      	str	r3, [r1, #4]
   140ca:	60cb      	str	r3, [r1, #12]
   140cc:	608a      	str	r2, [r1, #8]
   140ce:	f7fe fb7b 	bl	127c8 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   140d2:	2800      	cmp	r0, #0
   140d4:	da0b      	bge.n	140ee <z_nrf_clock_control_lf_on+0x42>
   140d6:	4940      	ldr	r1, [pc, #256]	; (141d8 <z_nrf_clock_control_lf_on+0x12c>)
   140d8:	4840      	ldr	r0, [pc, #256]	; (141dc <z_nrf_clock_control_lf_on+0x130>)
   140da:	f240 2321 	movw	r3, #545	; 0x221
   140de:	4a40      	ldr	r2, [pc, #256]	; (141e0 <z_nrf_clock_control_lf_on+0x134>)
   140e0:	f018 f9a7 	bl	2c432 <printk>
   140e4:	f240 2121 	movw	r1, #545	; 0x221
   140e8:	483d      	ldr	r0, [pc, #244]	; (141e0 <z_nrf_clock_control_lf_on+0x134>)
   140ea:	f018 fbbf 	bl	2c86c <assert_post_action>
	switch (start_mode) {
   140ee:	b38e      	cbz	r6, 14154 <z_nrf_clock_control_lf_on+0xa8>
   140f0:	1e73      	subs	r3, r6, #1
   140f2:	2b01      	cmp	r3, #1
   140f4:	d855      	bhi.n	141a2 <z_nrf_clock_control_lf_on+0xf6>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   140f6:	2e01      	cmp	r6, #1
   140f8:	d106      	bne.n	14108 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   140fa:	4b3a      	ldr	r3, [pc, #232]	; (141e4 <z_nrf_clock_control_lf_on+0x138>)
   140fc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   14100:	f003 0303 	and.w	r3, r3, #3
   14104:	2b02      	cmp	r3, #2
   14106:	d025      	beq.n	14154 <z_nrf_clock_control_lf_on+0xa8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14108:	f01a fcb4 	bl	2ea74 <k_is_in_isr>
   1410c:	4604      	mov	r4, r0
   1410e:	b918      	cbnz	r0, 14118 <z_nrf_clock_control_lf_on+0x6c>
	return !z_sys_post_kernel;
   14110:	4b35      	ldr	r3, [pc, #212]	; (141e8 <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
   14112:	781b      	ldrb	r3, [r3, #0]
   14114:	2b00      	cmp	r3, #0
   14116:	d152      	bne.n	141be <z_nrf_clock_control_lf_on+0x112>
	__asm__ volatile(
   14118:	f04f 0320 	mov.w	r3, #32
   1411c:	f3ef 8711 	mrs	r7, BASEPRI
   14120:	f383 8811 	msr	BASEPRI, r3
   14124:	f3bf 8f6f 	isb	sy
   14128:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1412a:	4d2e      	ldr	r5, [pc, #184]	; (141e4 <z_nrf_clock_control_lf_on+0x138>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1412c:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 141f8 <z_nrf_clock_control_lf_on+0x14c>
   14130:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14132:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14136:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   1413a:	03d2      	lsls	r2, r2, #15
   1413c:	d50c      	bpl.n	14158 <z_nrf_clock_control_lf_on+0xac>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1413e:	f003 0303 	and.w	r3, r3, #3
   14142:	2b02      	cmp	r3, #2
   14144:	d001      	beq.n	1414a <z_nrf_clock_control_lf_on+0x9e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   14146:	2e01      	cmp	r6, #1
   14148:	d106      	bne.n	14158 <z_nrf_clock_control_lf_on+0xac>
	if (isr_mode) {
   1414a:	b334      	cbz	r4, 1419a <z_nrf_clock_control_lf_on+0xee>
	__asm__ volatile(
   1414c:	f387 8811 	msr	BASEPRI, r7
   14150:	f3bf 8f6f 	isb	sy
}
   14154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   14158:	b1d4      	cbz	r4, 14190 <z_nrf_clock_control_lf_on+0xe4>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1415a:	4638      	mov	r0, r7
   1415c:	f000 faf6 	bl	1474c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   14160:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   14164:	b2db      	uxtb	r3, r3
   14166:	2b01      	cmp	r3, #1
   14168:	d1e3      	bne.n	14132 <z_nrf_clock_control_lf_on+0x86>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1416a:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   1416e:	2a00      	cmp	r2, #0
   14170:	d0df      	beq.n	14132 <z_nrf_clock_control_lf_on+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14172:	2200      	movs	r2, #0
   14174:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   14178:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1417c:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1417e:	2120      	movs	r1, #32
   14180:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   14184:	4a19      	ldr	r2, [pc, #100]	; (141ec <z_nrf_clock_control_lf_on+0x140>)
   14186:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1418a:	4a19      	ldr	r2, [pc, #100]	; (141f0 <z_nrf_clock_control_lf_on+0x144>)
   1418c:	6013      	str	r3, [r2, #0]
}
   1418e:	e7d0      	b.n	14132 <z_nrf_clock_control_lf_on+0x86>
	return z_impl_k_sleep(timeout);
   14190:	2100      	movs	r1, #0
   14192:	2021      	movs	r0, #33	; 0x21
   14194:	f010 fb5a 	bl	2484c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   14198:	e7e2      	b.n	14160 <z_nrf_clock_control_lf_on+0xb4>
    p_reg->INTENSET = mask;
   1419a:	2302      	movs	r3, #2
   1419c:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   141a0:	e7d8      	b.n	14154 <z_nrf_clock_control_lf_on+0xa8>
		__ASSERT_NO_MSG(false);
   141a2:	f240 2333 	movw	r3, #563	; 0x233
   141a6:	4913      	ldr	r1, [pc, #76]	; (141f4 <z_nrf_clock_control_lf_on+0x148>)
   141a8:	480c      	ldr	r0, [pc, #48]	; (141dc <z_nrf_clock_control_lf_on+0x130>)
   141aa:	4a0d      	ldr	r2, [pc, #52]	; (141e0 <z_nrf_clock_control_lf_on+0x134>)
   141ac:	f018 f941 	bl	2c432 <printk>
}
   141b0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   141b4:	f240 2133 	movw	r1, #563	; 0x233
   141b8:	4809      	ldr	r0, [pc, #36]	; (141e0 <z_nrf_clock_control_lf_on+0x134>)
   141ba:	f018 bb57 	b.w	2c86c <assert_post_action>
    p_reg->INTENCLR = mask;
   141be:	2202      	movs	r2, #2
   141c0:	4b08      	ldr	r3, [pc, #32]	; (141e4 <z_nrf_clock_control_lf_on+0x138>)
	int key = isr_mode ? irq_lock() : 0;
   141c2:	4607      	mov	r7, r0
   141c4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   141c8:	e7af      	b.n	1412a <z_nrf_clock_control_lf_on+0x7e>
   141ca:	bf00      	nop
   141cc:	200215d4 	.word	0x200215d4
   141d0:	20021568 	.word	0x20021568
   141d4:	20021598 	.word	0x20021598
   141d8:	00030ba9 	.word	0x00030ba9
   141dc:	00030166 	.word	0x00030166
   141e0:	00030b48 	.word	0x00030b48
   141e4:	40005000 	.word	0x40005000
   141e8:	200262a1 	.word	0x200262a1
   141ec:	e000e100 	.word	0xe000e100
   141f0:	40005008 	.word	0x40005008
   141f4:	00032fcf 	.word	0x00032fcf
   141f8:	40005104 	.word	0x40005104

000141fc <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   141fc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   141fe:	4c06      	ldr	r4, [pc, #24]	; (14218 <z_clock_isr+0x1c>)
   14200:	4906      	ldr	r1, [pc, #24]	; (1421c <z_clock_isr+0x20>)
   14202:	4622      	mov	r2, r4
   14204:	4806      	ldr	r0, [pc, #24]	; (14220 <z_clock_isr+0x24>)
   14206:	2317      	movs	r3, #23
   14208:	f018 f913 	bl	2c432 <printk>
   1420c:	4620      	mov	r0, r4
}
   1420e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   14212:	2117      	movs	r1, #23
   14214:	f018 bb2a 	b.w	2c86c <assert_post_action>
   14218:	00030bd2 	.word	0x00030bd2
   1421c:	00032fcf 	.word	0x00032fcf
   14220:	00030166 	.word	0x00030166

00014224 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
   14224:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   14226:	4b08      	ldr	r3, [pc, #32]	; (14248 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   14228:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1422c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   14230:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   14234:	4290      	cmp	r0, r2
   14236:	d100      	bne.n	1423a <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   14238:	4770      	bx	lr
   1423a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   1423e:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   14240:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   14244:	e7f2      	b.n	1422c <handle_next_cycle_case+0x8>
   14246:	bf00      	nop
   14248:	40015000 	.word	0x40015000

0001424c <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1424c:	2200      	movs	r2, #0
   1424e:	4b07      	ldr	r3, [pc, #28]	; (1426c <rtc_nrf_isr+0x20>)
   14250:	601a      	str	r2, [r3, #0]
   14252:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   14254:	4a06      	ldr	r2, [pc, #24]	; (14270 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
   14256:	4b07      	ldr	r3, [pc, #28]	; (14274 <rtc_nrf_isr+0x28>)
   14258:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
   1425c:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   1425e:	1ac0      	subs	r0, r0, r3
   14260:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   14264:	4403      	add	r3, r0
   14266:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
   14268:	f011 b82a 	b.w	252c0 <z_clock_announce>
   1426c:	40015140 	.word	0x40015140
   14270:	200215d8 	.word	0x200215d8
   14274:	40015000 	.word	0x40015000

00014278 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
   14278:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   1427a:	2400      	movs	r4, #0
   1427c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   14280:	4d0e      	ldr	r5, [pc, #56]	; (142bc <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14282:	4b0f      	ldr	r3, [pc, #60]	; (142c0 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
   14284:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14288:	601c      	str	r4, [r3, #0]
   1428a:	681b      	ldr	r3, [r3, #0]
   1428c:	4b0d      	ldr	r3, [pc, #52]	; (142c4 <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
   1428e:	2101      	movs	r1, #1
   14290:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   14294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   14298:	4622      	mov	r2, r4
   1429a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   1429e:	2015      	movs	r0, #21
   142a0:	f000 f9bc 	bl	1461c <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
   142a4:	2015      	movs	r0, #21
   142a6:	f000 f99b 	bl	145e0 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   142aa:	2301      	movs	r3, #1
   142ac:	4a06      	ldr	r2, [pc, #24]	; (142c8 <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
   142ae:	2002      	movs	r0, #2
   142b0:	6013      	str	r3, [r2, #0]
   142b2:	602b      	str	r3, [r5, #0]
   142b4:	f7ff fefa 	bl	140ac <z_nrf_clock_control_lf_on>

	return 0;
}
   142b8:	4620      	mov	r0, r4
   142ba:	bd38      	pop	{r3, r4, r5, pc}
   142bc:	40015000 	.word	0x40015000
   142c0:	40015140 	.word	0x40015140
   142c4:	e000e100 	.word	0xe000e100
   142c8:	40015008 	.word	0x40015008

000142cc <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
   142cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
   142ce:	4b2d      	ldr	r3, [pc, #180]	; (14384 <z_clock_set_timeout+0xb8>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   142d0:	4c2d      	ldr	r4, [pc, #180]	; (14388 <z_clock_set_timeout+0xbc>)
   142d2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
   142d6:	4b2d      	ldr	r3, [pc, #180]	; (1438c <z_clock_set_timeout+0xc0>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   142d8:	f1b0 3fff 	cmp.w	r0, #4294967295
   142dc:	bf08      	it	eq
   142de:	4620      	moveq	r0, r4
	uint32_t unannounced = counter_sub(counter(), last_count);
   142e0:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   142e2:	1a52      	subs	r2, r2, r1
   142e4:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   142e8:	0212      	lsls	r2, r2, #8
   142ea:	d438      	bmi.n	1435e <z_clock_set_timeout+0x92>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
   142ec:	3801      	subs	r0, #1
   142ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   142f2:	42a0      	cmp	r0, r4
   142f4:	bfa8      	it	ge
   142f6:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   142f8:	3301      	adds	r3, #1
   142fa:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   142fc:	42a0      	cmp	r0, r4
   142fe:	bf94      	ite	ls
   14300:	180c      	addls	r4, r1, r0
   14302:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   14304:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14308:	2600      	movs	r6, #0
    p_reg->INTENCLR = mask;
   1430a:	4a1e      	ldr	r2, [pc, #120]	; (14384 <z_clock_set_timeout+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1430c:	4d20      	ldr	r5, [pc, #128]	; (14390 <z_clock_set_timeout+0xc4>)
    p_reg->INTENCLR = mask;
   1430e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
     return p_reg->COUNTER;
   14312:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
    return p_reg->CC[ch];
   14316:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1431a:	602e      	str	r6, [r5, #0]
	return (a - b) & COUNTER_MAX;
   1431c:	1a5b      	subs	r3, r3, r1
   1431e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   14322:	682f      	ldr	r7, [r5, #0]
	if (counter_sub(prev_val, now) == 1) {
   14324:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   14326:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1432a:	f8c2 7540 	str.w	r7, [r2, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1432e:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
   14332:	d104      	bne.n	1433e <z_clock_set_timeout+0x72>
	z_impl_k_busy_wait(usec_to_wait);
   14334:	200f      	movs	r0, #15
   14336:	f01a fba3 	bl	2ea80 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1433a:	602e      	str	r6, [r5, #0]
   1433c:	682b      	ldr	r3, [r5, #0]
   1433e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   14342:	4b14      	ldr	r3, [pc, #80]	; (14394 <z_clock_set_timeout+0xc8>)
   14344:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   14348:	4b0e      	ldr	r3, [pc, #56]	; (14384 <z_clock_set_timeout+0xb8>)
   1434a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1434e:	1a22      	subs	r2, r4, r0
   14350:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
   14354:	2a01      	cmp	r2, #1
   14356:	d104      	bne.n	14362 <z_clock_set_timeout+0x96>
		handle_next_cycle_case(t);
   14358:	f7ff ff64 	bl	14224 <handle_next_cycle_case>
   1435c:	e00b      	b.n	14376 <z_clock_set_timeout+0xaa>
		ticks = 0;
   1435e:	2000      	movs	r0, #0
   14360:	e7ca      	b.n	142f8 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   14362:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   14366:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
   1436a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1436e:	1a24      	subs	r4, r4, r0
   14370:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
   14372:	0223      	lsls	r3, r4, #8
   14374:	d4f0      	bmi.n	14358 <z_clock_set_timeout+0x8c>
    p_reg->INTENSET = mask;
   14376:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1437a:	4b02      	ldr	r3, [pc, #8]	; (14384 <z_clock_set_timeout+0xb8>)
   1437c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
   14380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14382:	bf00      	nop
   14384:	40015000 	.word	0x40015000
   14388:	007fffff 	.word	0x007fffff
   1438c:	200215d8 	.word	0x200215d8
   14390:	40015140 	.word	0x40015140
   14394:	e000e100 	.word	0xe000e100

00014398 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
   14398:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1439a:	f04f 0320 	mov.w	r3, #32
   1439e:	f3ef 8511 	mrs	r5, BASEPRI
   143a2:	f383 8811 	msr	BASEPRI, r3
   143a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   143aa:	481a      	ldr	r0, [pc, #104]	; (14414 <z_clock_elapsed+0x7c>)
   143ac:	f010 fcaa 	bl	24d04 <z_spin_lock_valid>
   143b0:	b968      	cbnz	r0, 143ce <z_clock_elapsed+0x36>
   143b2:	235c      	movs	r3, #92	; 0x5c
   143b4:	4a18      	ldr	r2, [pc, #96]	; (14418 <z_clock_elapsed+0x80>)
   143b6:	4919      	ldr	r1, [pc, #100]	; (1441c <z_clock_elapsed+0x84>)
   143b8:	4819      	ldr	r0, [pc, #100]	; (14420 <z_clock_elapsed+0x88>)
   143ba:	f018 f83a 	bl	2c432 <printk>
   143be:	4915      	ldr	r1, [pc, #84]	; (14414 <z_clock_elapsed+0x7c>)
   143c0:	4818      	ldr	r0, [pc, #96]	; (14424 <z_clock_elapsed+0x8c>)
   143c2:	f018 f836 	bl	2c432 <printk>
   143c6:	215c      	movs	r1, #92	; 0x5c
   143c8:	4813      	ldr	r0, [pc, #76]	; (14418 <z_clock_elapsed+0x80>)
   143ca:	f018 fa4f 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   143ce:	4811      	ldr	r0, [pc, #68]	; (14414 <z_clock_elapsed+0x7c>)
   143d0:	f010 fcb6 	bl	24d40 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   143d4:	4b14      	ldr	r3, [pc, #80]	; (14428 <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   143d6:	480f      	ldr	r0, [pc, #60]	; (14414 <z_clock_elapsed+0x7c>)
   143d8:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   143dc:	4b13      	ldr	r3, [pc, #76]	; (1442c <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
   143de:	681b      	ldr	r3, [r3, #0]
   143e0:	1ae4      	subs	r4, r4, r3
   143e2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   143e6:	f010 fc9b 	bl	24d20 <z_spin_unlock_valid>
   143ea:	b968      	cbnz	r0, 14408 <z_clock_elapsed+0x70>
   143ec:	2384      	movs	r3, #132	; 0x84
   143ee:	4a0a      	ldr	r2, [pc, #40]	; (14418 <z_clock_elapsed+0x80>)
   143f0:	490f      	ldr	r1, [pc, #60]	; (14430 <z_clock_elapsed+0x98>)
   143f2:	480b      	ldr	r0, [pc, #44]	; (14420 <z_clock_elapsed+0x88>)
   143f4:	f018 f81d 	bl	2c432 <printk>
   143f8:	4906      	ldr	r1, [pc, #24]	; (14414 <z_clock_elapsed+0x7c>)
   143fa:	480e      	ldr	r0, [pc, #56]	; (14434 <z_clock_elapsed+0x9c>)
   143fc:	f018 f819 	bl	2c432 <printk>
   14400:	2184      	movs	r1, #132	; 0x84
   14402:	4805      	ldr	r0, [pc, #20]	; (14418 <z_clock_elapsed+0x80>)
   14404:	f018 fa32 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   14408:	f385 8811 	msr	BASEPRI, r5
   1440c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   14410:	4620      	mov	r0, r4
   14412:	bd38      	pop	{r3, r4, r5, pc}
   14414:	200215dc 	.word	0x200215dc
   14418:	000304b3 	.word	0x000304b3
   1441c:	00030505 	.word	0x00030505
   14420:	00030166 	.word	0x00030166
   14424:	0003051a 	.word	0x0003051a
   14428:	40015000 	.word	0x40015000
   1442c:	200215d8 	.word	0x200215d8
   14430:	000304d9 	.word	0x000304d9
   14434:	000304f0 	.word	0x000304f0

00014438 <z_timer_cycle_get_32>:

uint32_t z_timer_cycle_get_32(void)
{
   14438:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1443a:	f04f 0320 	mov.w	r3, #32
   1443e:	f3ef 8511 	mrs	r5, BASEPRI
   14442:	f383 8811 	msr	BASEPRI, r3
   14446:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1444a:	481b      	ldr	r0, [pc, #108]	; (144b8 <z_timer_cycle_get_32+0x80>)
   1444c:	f010 fc5a 	bl	24d04 <z_spin_lock_valid>
   14450:	b968      	cbnz	r0, 1446e <z_timer_cycle_get_32+0x36>
   14452:	235c      	movs	r3, #92	; 0x5c
   14454:	4a19      	ldr	r2, [pc, #100]	; (144bc <z_timer_cycle_get_32+0x84>)
   14456:	491a      	ldr	r1, [pc, #104]	; (144c0 <z_timer_cycle_get_32+0x88>)
   14458:	481a      	ldr	r0, [pc, #104]	; (144c4 <z_timer_cycle_get_32+0x8c>)
   1445a:	f017 ffea 	bl	2c432 <printk>
   1445e:	4916      	ldr	r1, [pc, #88]	; (144b8 <z_timer_cycle_get_32+0x80>)
   14460:	4819      	ldr	r0, [pc, #100]	; (144c8 <z_timer_cycle_get_32+0x90>)
   14462:	f017 ffe6 	bl	2c432 <printk>
   14466:	215c      	movs	r1, #92	; 0x5c
   14468:	4814      	ldr	r0, [pc, #80]	; (144bc <z_timer_cycle_get_32+0x84>)
   1446a:	f018 f9ff 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   1446e:	4812      	ldr	r0, [pc, #72]	; (144b8 <z_timer_cycle_get_32+0x80>)
   14470:	f010 fc66 	bl	24d40 <z_spin_lock_set_owner>
   14474:	4b15      	ldr	r3, [pc, #84]	; (144cc <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14476:	4810      	ldr	r0, [pc, #64]	; (144b8 <z_timer_cycle_get_32+0x80>)
   14478:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   1447c:	4b14      	ldr	r3, [pc, #80]	; (144d0 <z_timer_cycle_get_32+0x98>)
   1447e:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   14480:	1ae4      	subs	r4, r4, r3
   14482:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   14486:	441c      	add	r4, r3
   14488:	f010 fc4a 	bl	24d20 <z_spin_unlock_valid>
   1448c:	b968      	cbnz	r0, 144aa <z_timer_cycle_get_32+0x72>
   1448e:	2384      	movs	r3, #132	; 0x84
   14490:	4a0a      	ldr	r2, [pc, #40]	; (144bc <z_timer_cycle_get_32+0x84>)
   14492:	4910      	ldr	r1, [pc, #64]	; (144d4 <z_timer_cycle_get_32+0x9c>)
   14494:	480b      	ldr	r0, [pc, #44]	; (144c4 <z_timer_cycle_get_32+0x8c>)
   14496:	f017 ffcc 	bl	2c432 <printk>
   1449a:	4907      	ldr	r1, [pc, #28]	; (144b8 <z_timer_cycle_get_32+0x80>)
   1449c:	480e      	ldr	r0, [pc, #56]	; (144d8 <z_timer_cycle_get_32+0xa0>)
   1449e:	f017 ffc8 	bl	2c432 <printk>
   144a2:	2184      	movs	r1, #132	; 0x84
   144a4:	4805      	ldr	r0, [pc, #20]	; (144bc <z_timer_cycle_get_32+0x84>)
   144a6:	f018 f9e1 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   144aa:	f385 8811 	msr	BASEPRI, r5
   144ae:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   144b2:	4620      	mov	r0, r4
   144b4:	bd38      	pop	{r3, r4, r5, pc}
   144b6:	bf00      	nop
   144b8:	200215dc 	.word	0x200215dc
   144bc:	000304b3 	.word	0x000304b3
   144c0:	00030505 	.word	0x00030505
   144c4:	00030166 	.word	0x00030166
   144c8:	0003051a 	.word	0x0003051a
   144cc:	40015000 	.word	0x40015000
   144d0:	200215d8 	.word	0x200215d8
   144d4:	000304d9 	.word	0x000304d9
   144d8:	000304f0 	.word	0x000304f0

000144dc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   144dc:	4a09      	ldr	r2, [pc, #36]	; (14504 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   144de:	490a      	ldr	r1, [pc, #40]	; (14508 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   144e0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   144e2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   144e4:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   144e6:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   144e8:	4908      	ldr	r1, [pc, #32]	; (1450c <arch_swap+0x30>)
   144ea:	684b      	ldr	r3, [r1, #4]
   144ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   144f0:	604b      	str	r3, [r1, #4]
   144f2:	2300      	movs	r3, #0
   144f4:	f383 8811 	msr	BASEPRI, r3
   144f8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   144fc:	6893      	ldr	r3, [r2, #8]
}
   144fe:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   14500:	4770      	bx	lr
   14502:	bf00      	nop
   14504:	20021de0 	.word	0x20021de0
   14508:	0002f908 	.word	0x0002f908
   1450c:	e000ed00 	.word	0xe000ed00

00014510 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   14510:	4929      	ldr	r1, [pc, #164]	; (145b8 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   14512:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   14514:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   14518:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1451a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1451e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   14522:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   14526:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   1452a:	d004      	beq.n	14536 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   1452c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   14530:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   14534:	e007      	b.n	14546 <out_fp_endif>

00014536 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   14536:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
   1453a:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   1453e:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   14542:	f050 0004 	orrs.w	r0, r0, #4

00014546 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   14546:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1454a:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1454c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   14550:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   14554:	4f19      	ldr	r7, [pc, #100]	; (145bc <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   14556:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1455a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   1455c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1455e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   14560:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   14562:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   14564:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   14566:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   1456a:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   1456e:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   14572:	d105      	bne.n	14580 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   14574:	2300      	movs	r3, #0
    vmsr fpscr, r3
   14576:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   1457a:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   1457e:	e005      	b.n	1458c <in_fp_endif>

00014580 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   14580:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   14584:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
   14588:	ec90 8a10 	vldmia	r0, {s16-s31}

0001458c <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   1458c:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   14590:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   14594:	f383 8814 	msr	CONTROL, r3
    isb
   14598:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1459c:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   145a0:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   145a4:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   145a8:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   145ac:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   145ae:	f018 fd37 	bl	2d020 <configure_builtin_stack_guard>
    pop {r2, lr}
   145b2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   145b6:	4770      	bx	lr
    ldr r1, =_kernel
   145b8:	20021de0 	.word	0x20021de0
    ldr v4, =_SCS_ICSR
   145bc:	e000ed04 	.word	0xe000ed04

000145c0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   145c0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   145c4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   145c6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   145ca:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   145ce:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   145d0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   145d4:	2902      	cmp	r1, #2
    beq _oops
   145d6:	d0ff      	beq.n	145d8 <_oops>

000145d8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   145d8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   145da:	f018 fd25 	bl	2d028 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   145de:	bd01      	pop	{r0, pc}

000145e0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   145e0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   145e2:	2b00      	cmp	r3, #0
   145e4:	db08      	blt.n	145f8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   145e6:	2201      	movs	r2, #1
   145e8:	f000 001f 	and.w	r0, r0, #31
   145ec:	fa02 f000 	lsl.w	r0, r2, r0
   145f0:	4a02      	ldr	r2, [pc, #8]	; (145fc <arch_irq_enable+0x1c>)
   145f2:	095b      	lsrs	r3, r3, #5
   145f4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   145f8:	4770      	bx	lr
   145fa:	bf00      	nop
   145fc:	e000e100 	.word	0xe000e100

00014600 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   14600:	4b05      	ldr	r3, [pc, #20]	; (14618 <arch_irq_is_enabled+0x18>)
   14602:	0942      	lsrs	r2, r0, #5
   14604:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14608:	2301      	movs	r3, #1
   1460a:	f000 001f 	and.w	r0, r0, #31
   1460e:	fa03 f000 	lsl.w	r0, r3, r0
}
   14612:	4010      	ands	r0, r2
   14614:	4770      	bx	lr
   14616:	bf00      	nop
   14618:	e000e100 	.word	0xe000e100

0001461c <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   1461c:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   1461e:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   14620:	2c07      	cmp	r4, #7
{
   14622:	4605      	mov	r5, r0
   14624:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   14626:	d90e      	bls.n	14646 <z_arm_irq_priority_set+0x2a>
   14628:	235b      	movs	r3, #91	; 0x5b
   1462a:	4a10      	ldr	r2, [pc, #64]	; (1466c <z_arm_irq_priority_set+0x50>)
   1462c:	4910      	ldr	r1, [pc, #64]	; (14670 <z_arm_irq_priority_set+0x54>)
   1462e:	4811      	ldr	r0, [pc, #68]	; (14674 <z_arm_irq_priority_set+0x58>)
   14630:	f017 feff 	bl	2c432 <printk>
   14634:	4631      	mov	r1, r6
   14636:	4810      	ldr	r0, [pc, #64]	; (14678 <z_arm_irq_priority_set+0x5c>)
   14638:	2207      	movs	r2, #7
   1463a:	f017 fefa 	bl	2c432 <printk>
   1463e:	215b      	movs	r1, #91	; 0x5b
   14640:	480a      	ldr	r0, [pc, #40]	; (1466c <z_arm_irq_priority_set+0x50>)
   14642:	f018 f913 	bl	2c86c <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   14646:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   14648:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1464a:	bfac      	ite	ge
   1464c:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14650:	4b0a      	ldrlt	r3, [pc, #40]	; (1467c <z_arm_irq_priority_set+0x60>)
   14652:	ea4f 1444 	mov.w	r4, r4, lsl #5
   14656:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14658:	bfab      	itete	ge
   1465a:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1465e:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14662:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14666:	555c      	strblt	r4, [r3, r5]
}
   14668:	bd70      	pop	{r4, r5, r6, pc}
   1466a:	bf00      	nop
   1466c:	00030c0e 	.word	0x00030c0e
   14670:	00030c44 	.word	0x00030c44
   14674:	00030166 	.word	0x00030166
   14678:	00030c5f 	.word	0x00030c5f
   1467c:	e000ed14 	.word	0xe000ed14

00014680 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   14680:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   14682:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   14684:	4b04      	ldr	r3, [pc, #16]	; (14698 <_arch_isr_direct_pm+0x18>)
   14686:	6a18      	ldr	r0, [r3, #32]
   14688:	b118      	cbz	r0, 14692 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   1468a:	2200      	movs	r2, #0
   1468c:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   1468e:	f01a f931 	bl	2e8f4 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   14692:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   14694:	bd08      	pop	{r3, pc}
   14696:	bf00      	nop
   14698:	20021de0 	.word	0x20021de0

0001469c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1469c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   146a0:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   146a2:	490c      	ldr	r1, [pc, #48]	; (146d4 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
   146a4:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   146a8:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   146aa:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   146ae:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   146b2:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   146b4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   146b8:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   146bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   146c0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   146c4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   146c6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   146c8:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   146ca:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
   146cc:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   146d0:	4770      	bx	lr
   146d2:	bf00      	nop
   146d4:	0002c537 	.word	0x0002c537

000146d8 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   146d8:	b508      	push	{r3, lr}
   146da:	4604      	mov	r4, r0
   146dc:	460e      	mov	r6, r1
   146de:	4615      	mov	r5, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   146e0:	2300      	movs	r3, #0
   146e2:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   146e6:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   146ea:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   146ee:	f383 8814 	msr	CONTROL, r3
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   146f2:	f3bf 8f6f 	isb	sy
	z_arm_configure_static_mpu_regions();
   146f6:	f000 fbc3 	bl	14e80 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   146fa:	4b09      	ldr	r3, [pc, #36]	; (14720 <arch_switch_to_main_thread+0x48>)
   146fc:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   146fe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   14700:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   14704:	4628      	mov	r0, r5
   14706:	f386 8809 	msr	PSP, r6
   1470a:	2100      	movs	r1, #0
   1470c:	b663      	cpsie	if
   1470e:	f381 8811 	msr	BASEPRI, r1
   14712:	f3bf 8f6f 	isb	sy
   14716:	2200      	movs	r2, #0
   14718:	2300      	movs	r3, #0
   1471a:	f017 ff0c 	bl	2c536 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1471e:	bf00      	nop
   14720:	20021de0 	.word	0x20021de0

00014724 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   14724:	4901      	ldr	r1, [pc, #4]	; (1472c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   14726:	2210      	movs	r2, #16
	str	r2, [r1]
   14728:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1472a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1472c:	e000ed10 	.word	0xe000ed10

00014730 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   14730:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   14732:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   14734:	f380 8811 	msr	BASEPRI, r0
	isb
   14738:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   1473c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   14740:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   14742:	b662      	cpsie	i
	isb
   14744:	f3bf 8f6f 	isb	sy

	bx	lr
   14748:	4770      	bx	lr
   1474a:	bf00      	nop

0001474c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1474c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1474e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   14750:	f381 8811 	msr	BASEPRI, r1

	wfe
   14754:	bf20      	wfe

	msr	BASEPRI, r0
   14756:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1475a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1475c:	4770      	bx	lr
   1475e:	bf00      	nop

00014760 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14764:	4606      	mov	r6, r0

	if (esf != NULL) {
   14766:	460d      	mov	r5, r1
{
   14768:	b08b      	sub	sp, #44	; 0x2c
	if (esf != NULL) {
   1476a:	2900      	cmp	r1, #0
   1476c:	d054      	beq.n	14818 <z_arm_fatal_error+0xb8>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1476e:	4b2e      	ldr	r3, [pc, #184]	; (14828 <z_arm_fatal_error+0xc8>)
   14770:	4c2e      	ldr	r4, [pc, #184]	; (1482c <z_arm_fatal_error+0xcc>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14772:	482f      	ldr	r0, [pc, #188]	; (14830 <z_arm_fatal_error+0xd0>)
   14774:	1ae4      	subs	r4, r4, r3
   14776:	08e4      	lsrs	r4, r4, #3
   14778:	01a4      	lsls	r4, r4, #6
   1477a:	f044 0401 	orr.w	r4, r4, #1
   1477e:	f8ad 4000 	strh.w	r4, [sp]
   14782:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   14786:	6809      	ldr	r1, [r1, #0]
   14788:	f018 f8df 	bl	2c94a <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1478c:	f8ad 4000 	strh.w	r4, [sp]
   14790:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   14794:	68e9      	ldr	r1, [r5, #12]
   14796:	4827      	ldr	r0, [pc, #156]	; (14834 <z_arm_fatal_error+0xd4>)
   14798:	f018 f8d7 	bl	2c94a <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1479c:	4622      	mov	r2, r4
   1479e:	69e9      	ldr	r1, [r5, #28]
   147a0:	4825      	ldr	r0, [pc, #148]	; (14838 <z_arm_fatal_error+0xd8>)
   147a2:	f018 f8a2 	bl	2c8ea <log_1>
	for (int i = 0; i < 16; i += 4) {
   147a6:	46a8      	mov	r8, r5
   147a8:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   147aa:	f8df 9098 	ldr.w	r9, [pc, #152]	; 14844 <z_arm_fatal_error+0xe4>
   147ae:	edd8 7a08 	vldr	s15, [r8, #32]
   147b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   147b6:	edcd 7a03 	vstr	s15, [sp, #12]
   147ba:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
   147be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   147c2:	edcd 7a05 	vstr	s15, [sp, #20]
   147c6:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
   147ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   147ce:	edcd 7a07 	vstr	s15, [sp, #28]
   147d2:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
   147d6:	2208      	movs	r2, #8
   147d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   147dc:	1c7b      	adds	r3, r7, #1
   147de:	9304      	str	r3, [sp, #16]
   147e0:	1cbb      	adds	r3, r7, #2
   147e2:	9306      	str	r3, [sp, #24]
   147e4:	1cfb      	adds	r3, r7, #3
   147e6:	9702      	str	r7, [sp, #8]
   147e8:	9308      	str	r3, [sp, #32]
   147ea:	4648      	mov	r0, r9
   147ec:	4623      	mov	r3, r4
   147ee:	eb0d 0102 	add.w	r1, sp, r2
	for (int i = 0; i < 16; i += 4) {
   147f2:	3704      	adds	r7, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   147f4:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
   147f8:	f018 f8c6 	bl	2c988 <log_n>
	for (int i = 0; i < 16; i += 4) {
   147fc:	2f10      	cmp	r7, #16
   147fe:	f108 0810 	add.w	r8, r8, #16
   14802:	d1d4      	bne.n	147ae <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   14804:	4622      	mov	r2, r4
   14806:	6e29      	ldr	r1, [r5, #96]	; 0x60
   14808:	480c      	ldr	r0, [pc, #48]	; (1483c <z_arm_fatal_error+0xdc>)
   1480a:	f018 f86e 	bl	2c8ea <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1480e:	4622      	mov	r2, r4
   14810:	69a9      	ldr	r1, [r5, #24]
   14812:	480b      	ldr	r0, [pc, #44]	; (14840 <z_arm_fatal_error+0xe0>)
   14814:	f018 f869 	bl	2c8ea <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14818:	4629      	mov	r1, r5
   1481a:	4630      	mov	r0, r6
   1481c:	f00d fef4 	bl	22608 <z_fatal_error>
}
   14820:	b00b      	add	sp, #44	; 0x2c
   14822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14826:	bf00      	nop
   14828:	0002eff4 	.word	0x0002eff4
   1482c:	0002f074 	.word	0x0002f074
   14830:	00030c94 	.word	0x00030c94
   14834:	00030cc3 	.word	0x00030cc3
   14838:	00030cf2 	.word	0x00030cf2
   1483c:	00030d44 	.word	0x00030d44
   14840:	00030d53 	.word	0x00030d53
   14844:	00030d01 	.word	0x00030d01

00014848 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   14848:	bf30      	wfi
    b z_SysNmiOnReset
   1484a:	f7ff bffd 	b.w	14848 <z_SysNmiOnReset>
   1484e:	bf00      	nop

00014850 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14850:	4a14      	ldr	r2, [pc, #80]	; (148a4 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   14852:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14854:	4b14      	ldr	r3, [pc, #80]	; (148a8 <z_arm_prep_c+0x58>)
   14856:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1485a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1485c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14860:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   14864:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14868:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1486c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   14870:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14874:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   14878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   1487c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   14880:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   14884:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14888:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   1488c:	2300      	movs	r3, #0
   1488e:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   14892:	f00d ff4f 	bl	22734 <z_bss_zero>
	z_data_copy();
   14896:	f00d ff57 	bl	22748 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1489a:	f000 fab9 	bl	14e10 <z_arm_interrupt_init>
	z_cstart();
   1489e:	f00d ff91 	bl	227c4 <z_cstart>
   148a2:	bf00      	nop
   148a4:	0000c000 	.word	0x0000c000
   148a8:	e000ed00 	.word	0xe000ed00

000148ac <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   148ac:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   148ae:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   148b0:	4a0b      	ldr	r2, [pc, #44]	; (148e0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   148b2:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   148b4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   148b6:	bf1e      	ittt	ne
	movne	r1, #0
   148b8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   148ba:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   148bc:	f01a f81a 	blne	2e8f4 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   148c0:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   148c2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   148c6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   148ca:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   148ce:	4905      	ldr	r1, [pc, #20]	; (148e4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   148d0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   148d2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   148d4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   148d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   148da:	4903      	ldr	r1, [pc, #12]	; (148e8 <_isr_wrapper+0x3c>)
	bx r1
   148dc:	4708      	bx	r1
   148de:	0000      	.short	0x0000
	ldr r2, =_kernel
   148e0:	20021de0 	.word	0x20021de0
	ldr r1, =_sw_isr_table
   148e4:	0002ede0 	.word	0x0002ede0
	ldr r1, =z_arm_int_exit
   148e8:	00014dd1 	.word	0x00014dd1

000148ec <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   148ec:	f017 ffc6 	bl	2c87c <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   148f0:	2020      	movs	r0, #32
    msr BASEPRI, r0
   148f2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   148f6:	4808      	ldr	r0, [pc, #32]	; (14918 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   148f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   148fc:	1840      	adds	r0, r0, r1
    msr PSP, r0
   148fe:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   14902:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   14906:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   14908:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1490a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1490e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   14912:	f7ff ff9d 	bl	14850 <z_arm_prep_c>
   14916:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   14918:	20029478 	.word	0x20029478

0001491c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1491c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   14920:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   14924:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   14926:	4672      	mov	r2, lr
	bl z_arm_fault
   14928:	f000 f958 	bl	14bdc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1492c:	bd01      	pop	{r0, pc}
   1492e:	bf00      	nop

00014930 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   14930:	b570      	push	{r4, r5, r6, lr}
   14932:	4b28      	ldr	r3, [pc, #160]	; (149d4 <usage_fault.isra.0+0xa4>)
   14934:	4c28      	ldr	r4, [pc, #160]	; (149d8 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14936:	4d29      	ldr	r5, [pc, #164]	; (149dc <usage_fault.isra.0+0xac>)
   14938:	1ae4      	subs	r4, r4, r3
   1493a:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   1493c:	01a4      	lsls	r4, r4, #6
   1493e:	f044 0601 	orr.w	r6, r4, #1
   14942:	4631      	mov	r1, r6
   14944:	4826      	ldr	r0, [pc, #152]	; (149e0 <usage_fault.isra.0+0xb0>)
   14946:	f017 ffc1 	bl	2c8cc <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1494a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1494c:	0193      	lsls	r3, r2, #6
   1494e:	d503      	bpl.n	14958 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   14950:	4631      	mov	r1, r6
   14952:	4824      	ldr	r0, [pc, #144]	; (149e4 <usage_fault.isra.0+0xb4>)
   14954:	f017 ffba 	bl	2c8cc <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   14958:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1495a:	01dd      	lsls	r5, r3, #7
   1495c:	d504      	bpl.n	14968 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   1495e:	4822      	ldr	r0, [pc, #136]	; (149e8 <usage_fault.isra.0+0xb8>)
   14960:	f044 0101 	orr.w	r1, r4, #1
   14964:	f017 ffb2 	bl	2c8cc <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   14968:	4d1c      	ldr	r5, [pc, #112]	; (149dc <usage_fault.isra.0+0xac>)
   1496a:	6aae      	ldr	r6, [r5, #40]	; 0x28
   1496c:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   14970:	d005      	beq.n	1497e <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   14972:	481e      	ldr	r0, [pc, #120]	; (149ec <usage_fault.isra.0+0xbc>)
   14974:	f044 0101 	orr.w	r1, r4, #1
   14978:	f017 ffa8 	bl	2c8cc <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   1497c:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1497e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14980:	0318      	lsls	r0, r3, #12
   14982:	d504      	bpl.n	1498e <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
   14984:	481a      	ldr	r0, [pc, #104]	; (149f0 <usage_fault.isra.0+0xc0>)
   14986:	f044 0101 	orr.w	r1, r4, #1
   1498a:	f017 ff9f 	bl	2c8cc <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1498e:	4d13      	ldr	r5, [pc, #76]	; (149dc <usage_fault.isra.0+0xac>)
   14990:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14992:	0351      	lsls	r1, r2, #13
   14994:	d504      	bpl.n	149a0 <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   14996:	4817      	ldr	r0, [pc, #92]	; (149f4 <usage_fault.isra.0+0xc4>)
   14998:	f044 0101 	orr.w	r1, r4, #1
   1499c:	f017 ff96 	bl	2c8cc <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   149a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   149a2:	039a      	lsls	r2, r3, #14
   149a4:	d504      	bpl.n	149b0 <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   149a6:	4814      	ldr	r0, [pc, #80]	; (149f8 <usage_fault.isra.0+0xc8>)
   149a8:	f044 0101 	orr.w	r1, r4, #1
   149ac:	f017 ff8e 	bl	2c8cc <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   149b0:	4d0a      	ldr	r5, [pc, #40]	; (149dc <usage_fault.isra.0+0xac>)
   149b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   149b4:	03db      	lsls	r3, r3, #15
   149b6:	d504      	bpl.n	149c2 <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   149b8:	4810      	ldr	r0, [pc, #64]	; (149fc <usage_fault.isra.0+0xcc>)
   149ba:	f044 0101 	orr.w	r1, r4, #1
   149be:	f017 ff85 	bl	2c8cc <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   149c2:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   149c4:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   149c6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   149ca:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   149ce:	62ab      	str	r3, [r5, #40]	; 0x28
}
   149d0:	bd70      	pop	{r4, r5, r6, pc}
   149d2:	bf00      	nop
   149d4:	0002eff4 	.word	0x0002eff4
   149d8:	0002f074 	.word	0x0002f074
   149dc:	e000ed00 	.word	0xe000ed00
   149e0:	00030d81 	.word	0x00030d81
   149e4:	00030d99 	.word	0x00030d99
   149e8:	00030dac 	.word	0x00030dac
   149ec:	00030dc6 	.word	0x00030dc6
   149f0:	00030df0 	.word	0x00030df0
   149f4:	00030e0e 	.word	0x00030e0e
   149f8:	00030e33 	.word	0x00030e33
   149fc:	00030e4d 	.word	0x00030e4d

00014a00 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   14a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a04:	4b30      	ldr	r3, [pc, #192]	; (14ac8 <mem_manage_fault.isra.0+0xc8>)
   14a06:	4c31      	ldr	r4, [pc, #196]	; (14acc <mem_manage_fault.isra.0+0xcc>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14a08:	4d31      	ldr	r5, [pc, #196]	; (14ad0 <mem_manage_fault.isra.0+0xd0>)
   14a0a:	1ae4      	subs	r4, r4, r3
   14a0c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   14a0e:	01a4      	lsls	r4, r4, #6
   14a10:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   14a14:	4607      	mov	r7, r0
   14a16:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   14a18:	482e      	ldr	r0, [pc, #184]	; (14ad4 <mem_manage_fault.isra.0+0xd4>)
   14a1a:	4641      	mov	r1, r8
   14a1c:	f017 ff56 	bl	2c8cc <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14a20:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14a22:	06d1      	lsls	r1, r2, #27
   14a24:	d503      	bpl.n	14a2e <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   14a26:	4641      	mov	r1, r8
   14a28:	482b      	ldr	r0, [pc, #172]	; (14ad8 <mem_manage_fault.isra.0+0xd8>)
   14a2a:	f017 ff4f 	bl	2c8cc <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14a2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14a30:	071a      	lsls	r2, r3, #28
   14a32:	d504      	bpl.n	14a3e <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   14a34:	4829      	ldr	r0, [pc, #164]	; (14adc <mem_manage_fault.isra.0+0xdc>)
   14a36:	f044 0101 	orr.w	r1, r4, #1
   14a3a:	f017 ff47 	bl	2c8cc <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   14a3e:	4d24      	ldr	r5, [pc, #144]	; (14ad0 <mem_manage_fault.isra.0+0xd0>)
   14a40:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14a42:	079b      	lsls	r3, r3, #30
   14a44:	d512      	bpl.n	14a6c <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   14a46:	f044 0801 	orr.w	r8, r4, #1
   14a4a:	4641      	mov	r1, r8
   14a4c:	4824      	ldr	r0, [pc, #144]	; (14ae0 <mem_manage_fault.isra.0+0xe0>)
   14a4e:	f017 ff3d 	bl	2c8cc <log_0>
		mmfar = SCB->MMFAR;
   14a52:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   14a54:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14a56:	0618      	lsls	r0, r3, #24
   14a58:	d508      	bpl.n	14a6c <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   14a5a:	4642      	mov	r2, r8
   14a5c:	4821      	ldr	r0, [pc, #132]	; (14ae4 <mem_manage_fault.isra.0+0xe4>)
   14a5e:	f017 ff44 	bl	2c8ea <log_1>
			if (from_hard_fault) {
   14a62:	b11f      	cbz	r7, 14a6c <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   14a64:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14a6a:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   14a6c:	4d18      	ldr	r5, [pc, #96]	; (14ad0 <mem_manage_fault.isra.0+0xd0>)
   14a6e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14a70:	07d1      	lsls	r1, r2, #31
   14a72:	d504      	bpl.n	14a7e <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   14a74:	481c      	ldr	r0, [pc, #112]	; (14ae8 <mem_manage_fault.isra.0+0xe8>)
   14a76:	f044 0101 	orr.w	r1, r4, #1
   14a7a:	f017 ff27 	bl	2c8cc <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14a7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14a80:	069a      	lsls	r2, r3, #26
   14a82:	d504      	bpl.n	14a8e <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   14a84:	4819      	ldr	r0, [pc, #100]	; (14aec <mem_manage_fault.isra.0+0xec>)
   14a86:	f044 0101 	orr.w	r1, r4, #1
   14a8a:	f017 ff1f 	bl	2c8cc <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   14a8e:	4b10      	ldr	r3, [pc, #64]	; (14ad0 <mem_manage_fault.isra.0+0xd0>)
   14a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14a92:	06db      	lsls	r3, r3, #27
   14a94:	d50e      	bpl.n	14ab4 <mem_manage_fault.isra.0+0xb4>
	__ASSERT(0,
   14a96:	4916      	ldr	r1, [pc, #88]	; (14af0 <mem_manage_fault.isra.0+0xf0>)
   14a98:	f44f 739f 	mov.w	r3, #318	; 0x13e
   14a9c:	4a15      	ldr	r2, [pc, #84]	; (14af4 <mem_manage_fault.isra.0+0xf4>)
   14a9e:	4816      	ldr	r0, [pc, #88]	; (14af8 <mem_manage_fault.isra.0+0xf8>)
   14aa0:	f017 fcc7 	bl	2c432 <printk>
   14aa4:	4815      	ldr	r0, [pc, #84]	; (14afc <mem_manage_fault.isra.0+0xfc>)
   14aa6:	f017 fcc4 	bl	2c432 <printk>
   14aaa:	f44f 719f 	mov.w	r1, #318	; 0x13e
   14aae:	4811      	ldr	r0, [pc, #68]	; (14af4 <mem_manage_fault.isra.0+0xf4>)
   14ab0:	f017 fedc 	bl	2c86c <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
   14ab4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14ab6:	4a06      	ldr	r2, [pc, #24]	; (14ad0 <mem_manage_fault.isra.0+0xd0>)
   14ab8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14aba:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   14abe:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   14ac0:	7030      	strb	r0, [r6, #0]
}
   14ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14ac6:	bf00      	nop
   14ac8:	0002eff4 	.word	0x0002eff4
   14acc:	0002f074 	.word	0x0002f074
   14ad0:	e000ed00 	.word	0xe000ed00
   14ad4:	00030e78 	.word	0x00030e78
   14ad8:	00030e8e 	.word	0x00030e8e
   14adc:	00030ec1 	.word	0x00030ec1
   14ae0:	00030ed4 	.word	0x00030ed4
   14ae4:	00030eec 	.word	0x00030eec
   14ae8:	00030f02 	.word	0x00030f02
   14aec:	00030f21 	.word	0x00030f21
   14af0:	00032fcf 	.word	0x00032fcf
   14af4:	00030f50 	.word	0x00030f50
   14af8:	00030166 	.word	0x00030166
   14afc:	00030f8a 	.word	0x00030f8a

00014b00 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b04:	4b2a      	ldr	r3, [pc, #168]	; (14bb0 <bus_fault.isra.0+0xb0>)
   14b06:	4c2b      	ldr	r4, [pc, #172]	; (14bb4 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14b08:	4d2b      	ldr	r5, [pc, #172]	; (14bb8 <bus_fault.isra.0+0xb8>)
   14b0a:	1ae4      	subs	r4, r4, r3
   14b0c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   14b0e:	01a4      	lsls	r4, r4, #6
   14b10:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14b14:	4607      	mov	r7, r0
   14b16:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   14b18:	4828      	ldr	r0, [pc, #160]	; (14bbc <bus_fault.isra.0+0xbc>)
   14b1a:	4641      	mov	r1, r8
   14b1c:	f017 fed6 	bl	2c8cc <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14b20:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14b22:	04d1      	lsls	r1, r2, #19
   14b24:	d503      	bpl.n	14b2e <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   14b26:	4641      	mov	r1, r8
   14b28:	4825      	ldr	r0, [pc, #148]	; (14bc0 <bus_fault.isra.0+0xc0>)
   14b2a:	f017 fecf 	bl	2c8cc <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   14b2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14b30:	051a      	lsls	r2, r3, #20
   14b32:	d504      	bpl.n	14b3e <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   14b34:	4823      	ldr	r0, [pc, #140]	; (14bc4 <bus_fault.isra.0+0xc4>)
   14b36:	f044 0101 	orr.w	r1, r4, #1
   14b3a:	f017 fec7 	bl	2c8cc <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   14b3e:	4d1e      	ldr	r5, [pc, #120]	; (14bb8 <bus_fault.isra.0+0xb8>)
   14b40:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14b42:	059b      	lsls	r3, r3, #22
   14b44:	d512      	bpl.n	14b6c <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   14b46:	f044 0801 	orr.w	r8, r4, #1
   14b4a:	4641      	mov	r1, r8
   14b4c:	481e      	ldr	r0, [pc, #120]	; (14bc8 <bus_fault.isra.0+0xc8>)
   14b4e:	f017 febd 	bl	2c8cc <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   14b52:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   14b54:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14b56:	0418      	lsls	r0, r3, #16
   14b58:	d508      	bpl.n	14b6c <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   14b5a:	4642      	mov	r2, r8
   14b5c:	481b      	ldr	r0, [pc, #108]	; (14bcc <bus_fault.isra.0+0xcc>)
   14b5e:	f017 fec4 	bl	2c8ea <log_1>
			if (from_hard_fault) {
   14b62:	b11f      	cbz	r7, 14b6c <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   14b64:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14b66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   14b6a:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   14b6c:	4d12      	ldr	r5, [pc, #72]	; (14bb8 <bus_fault.isra.0+0xb8>)
   14b6e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14b70:	0559      	lsls	r1, r3, #21
   14b72:	d504      	bpl.n	14b7e <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   14b74:	4816      	ldr	r0, [pc, #88]	; (14bd0 <bus_fault.isra.0+0xd0>)
   14b76:	f044 0101 	orr.w	r1, r4, #1
   14b7a:	f017 fea7 	bl	2c8cc <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   14b7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14b80:	05da      	lsls	r2, r3, #23
   14b82:	d50d      	bpl.n	14ba0 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   14b84:	4813      	ldr	r0, [pc, #76]	; (14bd4 <bus_fault.isra.0+0xd4>)
   14b86:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14b8a:	f017 fe9f 	bl	2c8cc <log_0>
	*recoverable = memory_fault_recoverable(esf);
   14b8e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14b90:	4a09      	ldr	r2, [pc, #36]	; (14bb8 <bus_fault.isra.0+0xb8>)
   14b92:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14b94:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   14b98:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   14b9a:	7030      	strb	r0, [r6, #0]
}
   14b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   14ba0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14ba2:	049b      	lsls	r3, r3, #18
   14ba4:	d5f3      	bpl.n	14b8e <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14ba6:	480c      	ldr	r0, [pc, #48]	; (14bd8 <bus_fault.isra.0+0xd8>)
   14ba8:	f044 0101 	orr.w	r1, r4, #1
   14bac:	e7ed      	b.n	14b8a <bus_fault.isra.0+0x8a>
   14bae:	bf00      	nop
   14bb0:	0002eff4 	.word	0x0002eff4
   14bb4:	0002f074 	.word	0x0002f074
   14bb8:	e000ed00 	.word	0xe000ed00
   14bbc:	00030fc4 	.word	0x00030fc4
   14bc0:	00030fda 	.word	0x00030fda
   14bc4:	00030ec1 	.word	0x00030ec1
   14bc8:	00030feb 	.word	0x00030feb
   14bcc:	00031004 	.word	0x00031004
   14bd0:	00031019 	.word	0x00031019
   14bd4:	00031034 	.word	0x00031034
   14bd8:	00030f21 	.word	0x00030f21

00014bdc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   14bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14be0:	4b63      	ldr	r3, [pc, #396]	; (14d70 <z_arm_fault+0x194>)
{
   14be2:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14be4:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   14be8:	460e      	mov	r6, r1
   14bea:	4614      	mov	r4, r2
   14bec:	2700      	movs	r7, #0
   14bee:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14bf0:	f3c8 0508 	ubfx	r5, r8, #0, #9
   14bf4:	f387 8811 	msr	BASEPRI, r7
   14bf8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   14bfc:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   14c00:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   14c04:	d117      	bne.n	14c36 <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   14c06:	07d0      	lsls	r0, r2, #31
   14c08:	d415      	bmi.n	14c36 <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   14c0a:	0651      	lsls	r1, r2, #25
   14c0c:	d404      	bmi.n	14c18 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   14c0e:	0722      	lsls	r2, r4, #28
   14c10:	d40f      	bmi.n	14c32 <z_arm_fault+0x56>
			ptr_esf = (z_arch_esf_t *)msp;
   14c12:	464e      	mov	r6, r9
			*nested_exc = true;
   14c14:	2701      	movs	r7, #1
   14c16:	e00d      	b.n	14c34 <z_arm_fault+0x58>
   14c18:	4956      	ldr	r1, [pc, #344]	; (14d74 <z_arm_fault+0x198>)
   14c1a:	4b57      	ldr	r3, [pc, #348]	; (14d78 <z_arm_fault+0x19c>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   14c1c:	4857      	ldr	r0, [pc, #348]	; (14d7c <z_arm_fault+0x1a0>)
   14c1e:	1a5b      	subs	r3, r3, r1
   14c20:	08db      	lsrs	r3, r3, #3
   14c22:	019b      	lsls	r3, r3, #6
   14c24:	f043 0101 	orr.w	r1, r3, #1
   14c28:	f017 fe50 	bl	2c8cc <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   14c2c:	f014 0704 	ands.w	r7, r4, #4
   14c30:	d01e      	beq.n	14c70 <z_arm_fault+0x94>
	*nested_exc = false;
   14c32:	2700      	movs	r7, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   14c34:	b97e      	cbnz	r6, 14c56 <z_arm_fault+0x7a>
   14c36:	f240 33bb 	movw	r3, #955	; 0x3bb
   14c3a:	4a51      	ldr	r2, [pc, #324]	; (14d80 <z_arm_fault+0x1a4>)
   14c3c:	4951      	ldr	r1, [pc, #324]	; (14d84 <z_arm_fault+0x1a8>)
   14c3e:	4852      	ldr	r0, [pc, #328]	; (14d88 <z_arm_fault+0x1ac>)
   14c40:	f017 fbf7 	bl	2c432 <printk>
   14c44:	4851      	ldr	r0, [pc, #324]	; (14d8c <z_arm_fault+0x1b0>)
   14c46:	f017 fbf4 	bl	2c432 <printk>
   14c4a:	f240 31bb 	movw	r1, #955	; 0x3bb
   14c4e:	484c      	ldr	r0, [pc, #304]	; (14d80 <z_arm_fault+0x1a4>)
   14c50:	f017 fe0c 	bl	2c86c <assert_post_action>
   14c54:	2600      	movs	r6, #0
	*recoverable = false;
   14c56:	2300      	movs	r3, #0
   14c58:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   14c5c:	1eeb      	subs	r3, r5, #3
   14c5e:	2b09      	cmp	r3, #9
   14c60:	d86c      	bhi.n	14d3c <z_arm_fault+0x160>
   14c62:	e8df f003 	tbb	[pc, r3]
   14c66:	5a07      	.short	0x5a07
   14c68:	6b6b3e5e 	.word	0x6b6b3e5e
   14c6c:	626b6b6b 	.word	0x626b6b6b
			ptr_esf = (z_arch_esf_t *)msp;
   14c70:	464e      	mov	r6, r9
	if (!alternative_state_exc) {
   14c72:	e7df      	b.n	14c34 <z_arm_fault+0x58>
	*recoverable = false;
   14c74:	f04f 0800 	mov.w	r8, #0
   14c78:	4b3e      	ldr	r3, [pc, #248]	; (14d74 <z_arm_fault+0x198>)
   14c7a:	4d3f      	ldr	r5, [pc, #252]	; (14d78 <z_arm_fault+0x19c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   14c7c:	4844      	ldr	r0, [pc, #272]	; (14d90 <z_arm_fault+0x1b4>)
   14c7e:	1aed      	subs	r5, r5, r3
   14c80:	08ed      	lsrs	r5, r5, #3
   14c82:	01ad      	lsls	r5, r5, #6
   14c84:	f045 0501 	orr.w	r5, r5, #1
   14c88:	4629      	mov	r1, r5
   14c8a:	f017 fe1f 	bl	2c8cc <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14c8e:	4b38      	ldr	r3, [pc, #224]	; (14d70 <z_arm_fault+0x194>)
	*recoverable = false;
   14c90:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14c94:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   14c96:	f014 0402 	ands.w	r4, r4, #2
   14c9a:	d005      	beq.n	14ca8 <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
   14c9c:	4629      	mov	r1, r5
   14c9e:	483d      	ldr	r0, [pc, #244]	; (14d94 <z_arm_fault+0x1b8>)
	PR_FAULT_INFO(
   14ca0:	f017 fe14 	bl	2c8cc <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14ca4:	2400      	movs	r4, #0
}
   14ca6:	e01f      	b.n	14ce8 <z_arm_fault+0x10c>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   14ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14caa:	005b      	lsls	r3, r3, #1
   14cac:	d51c      	bpl.n	14ce8 <z_arm_fault+0x10c>
		PR_EXC("  Fault escalation (see below)");
   14cae:	4629      	mov	r1, r5
   14cb0:	4839      	ldr	r0, [pc, #228]	; (14d98 <z_arm_fault+0x1bc>)
   14cb2:	f017 fe0b 	bl	2c8cc <log_0>
		if (SCB_MMFSR != 0) {
   14cb6:	4b39      	ldr	r3, [pc, #228]	; (14d9c <z_arm_fault+0x1c0>)
   14cb8:	781b      	ldrb	r3, [r3, #0]
   14cba:	b12b      	cbz	r3, 14cc8 <z_arm_fault+0xec>
			reason = mem_manage_fault(esf, 1, recoverable);
   14cbc:	2001      	movs	r0, #1
   14cbe:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   14cc2:	f7ff fe9d 	bl	14a00 <mem_manage_fault.isra.0>
   14cc6:	e00e      	b.n	14ce6 <z_arm_fault+0x10a>
		} else if (SCB_BFSR != 0) {
   14cc8:	4b35      	ldr	r3, [pc, #212]	; (14da0 <z_arm_fault+0x1c4>)
   14cca:	781b      	ldrb	r3, [r3, #0]
   14ccc:	b12b      	cbz	r3, 14cda <z_arm_fault+0xfe>
			reason = bus_fault(esf, 1, recoverable);
   14cce:	2001      	movs	r0, #1
   14cd0:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   14cd4:	f7ff ff14 	bl	14b00 <bus_fault.isra.0>
   14cd8:	e005      	b.n	14ce6 <z_arm_fault+0x10a>
		} else if (SCB_UFSR != 0) {
   14cda:	4b32      	ldr	r3, [pc, #200]	; (14da4 <z_arm_fault+0x1c8>)
   14cdc:	881b      	ldrh	r3, [r3, #0]
   14cde:	b29b      	uxth	r3, r3
   14ce0:	b113      	cbz	r3, 14ce8 <z_arm_fault+0x10c>
			reason = usage_fault(esf);
   14ce2:	f7ff fe25 	bl	14930 <usage_fault.isra.0>
   14ce6:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   14ce8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14cec:	b993      	cbnz	r3, 14d14 <z_arm_fault+0x138>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   14cee:	2268      	movs	r2, #104	; 0x68
   14cf0:	4631      	mov	r1, r6
   14cf2:	a802      	add	r0, sp, #8
   14cf4:	f7f7 ff2a 	bl	cb4c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   14cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14cfa:	b39f      	cbz	r7, 14d64 <z_arm_fault+0x188>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   14cfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
   14d00:	b922      	cbnz	r2, 14d0c <z_arm_fault+0x130>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   14d02:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   14d06:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14d0a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   14d0c:	4620      	mov	r0, r4
   14d0e:	a902      	add	r1, sp, #8
   14d10:	f7ff fd26 	bl	14760 <z_arm_fatal_error>
}
   14d14:	b01d      	add	sp, #116	; 0x74
   14d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   14d1a:	2000      	movs	r0, #0
   14d1c:	f10d 0107 	add.w	r1, sp, #7
   14d20:	e7cf      	b.n	14cc2 <z_arm_fault+0xe6>
		reason = bus_fault(esf, 0, recoverable);
   14d22:	2000      	movs	r0, #0
   14d24:	f10d 0107 	add.w	r1, sp, #7
   14d28:	e7d4      	b.n	14cd4 <z_arm_fault+0xf8>
   14d2a:	4913      	ldr	r1, [pc, #76]	; (14d78 <z_arm_fault+0x19c>)
   14d2c:	4b11      	ldr	r3, [pc, #68]	; (14d74 <z_arm_fault+0x198>)
	PR_FAULT_INFO(
   14d2e:	481e      	ldr	r0, [pc, #120]	; (14da8 <z_arm_fault+0x1cc>)
   14d30:	1ac9      	subs	r1, r1, r3
   14d32:	08c9      	lsrs	r1, r1, #3
   14d34:	0189      	lsls	r1, r1, #6
   14d36:	f041 0101 	orr.w	r1, r1, #1
   14d3a:	e7b1      	b.n	14ca0 <z_arm_fault+0xc4>
   14d3c:	4a0d      	ldr	r2, [pc, #52]	; (14d74 <z_arm_fault+0x198>)
   14d3e:	4b0e      	ldr	r3, [pc, #56]	; (14d78 <z_arm_fault+0x19c>)
	PR_FAULT_INFO("***** %s %d) *****",
   14d40:	481a      	ldr	r0, [pc, #104]	; (14dac <z_arm_fault+0x1d0>)
   14d42:	1a9b      	subs	r3, r3, r2
   14d44:	08db      	lsrs	r3, r3, #3
   14d46:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   14d4a:	ea4f 1383 	mov.w	r3, r3, lsl #6
   14d4e:	4918      	ldr	r1, [pc, #96]	; (14db0 <z_arm_fault+0x1d4>)
   14d50:	f043 0301 	orr.w	r3, r3, #1
   14d54:	bf18      	it	ne
   14d56:	4601      	movne	r1, r0
   14d58:	f1a5 0210 	sub.w	r2, r5, #16
   14d5c:	4815      	ldr	r0, [pc, #84]	; (14db4 <z_arm_fault+0x1d8>)
   14d5e:	f017 fddb 	bl	2c918 <log_2>
   14d62:	e79f      	b.n	14ca4 <z_arm_fault+0xc8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14d64:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   14d68:	f023 0301 	bic.w	r3, r3, #1
   14d6c:	e7cd      	b.n	14d0a <z_arm_fault+0x12e>
   14d6e:	bf00      	nop
   14d70:	e000ed00 	.word	0xe000ed00
   14d74:	0002eff4 	.word	0x0002eff4
   14d78:	0002f074 	.word	0x0002f074
   14d7c:	0003104c 	.word	0x0003104c
   14d80:	00030f50 	.word	0x00030f50
   14d84:	0003106f 	.word	0x0003106f
   14d88:	00030166 	.word	0x00030166
   14d8c:	00031082 	.word	0x00031082
   14d90:	000310c0 	.word	0x000310c0
   14d94:	000310d7 	.word	0x000310d7
   14d98:	000310f8 	.word	0x000310f8
   14d9c:	e000ed28 	.word	0xe000ed28
   14da0:	e000ed29 	.word	0xe000ed29
   14da4:	e000ed2a 	.word	0xe000ed2a
   14da8:	00031117 	.word	0x00031117
   14dac:	00031162 	.word	0x00031162
   14db0:	0003114d 	.word	0x0003114d
   14db4:	0003117b 	.word	0x0003117b

00014db8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   14db8:	4b04      	ldr	r3, [pc, #16]	; (14dcc <z_arm_fault_init+0x14>)
   14dba:	695a      	ldr	r2, [r3, #20]
   14dbc:	f042 0210 	orr.w	r2, r2, #16
   14dc0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   14dc2:	695a      	ldr	r2, [r3, #20]
   14dc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   14dc8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   14dca:	4770      	bx	lr
   14dcc:	e000ed00 	.word	0xe000ed00

00014dd0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14dd0:	4b04      	ldr	r3, [pc, #16]	; (14de4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   14dd2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14dd4:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   14dd6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14dd8:	d003      	beq.n	14de2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14dda:	4903      	ldr	r1, [pc, #12]	; (14de8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14de0:	600a      	str	r2, [r1, #0]

00014de2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   14de2:	4770      	bx	lr
	ldr r3, =_kernel
   14de4:	20021de0 	.word	0x20021de0
	ldr r1, =_SCS_ICSR
   14de8:	e000ed04 	.word	0xe000ed04

00014dec <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   14dec:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14df0:	4905      	ldr	r1, [pc, #20]	; (14e08 <sys_arch_reboot+0x1c>)
   14df2:	4b06      	ldr	r3, [pc, #24]	; (14e0c <sys_arch_reboot+0x20>)
   14df4:	68ca      	ldr	r2, [r1, #12]
   14df6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   14dfa:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14dfc:	60cb      	str	r3, [r1, #12]
   14dfe:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14e02:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14e04:	e7fd      	b.n	14e02 <sys_arch_reboot+0x16>
   14e06:	bf00      	nop
   14e08:	e000ed00 	.word	0xe000ed00
   14e0c:	05fa0004 	.word	0x05fa0004

00014e10 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   14e10:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14e12:	2120      	movs	r1, #32
   14e14:	4803      	ldr	r0, [pc, #12]	; (14e24 <z_arm_interrupt_init+0x14>)
   14e16:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   14e18:	3301      	adds	r3, #1
   14e1a:	2b41      	cmp	r3, #65	; 0x41
   14e1c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   14e20:	d1f9      	bne.n	14e16 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   14e22:	4770      	bx	lr
   14e24:	e000e100 	.word	0xe000e100

00014e28 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   14e28:	b510      	push	{r4, lr}
   14e2a:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
   14e2c:	f00f f902 	bl	24034 <z_thread_single_abort>

	if (_current == thread) {
   14e30:	4b11      	ldr	r3, [pc, #68]	; (14e78 <z_impl_k_thread_abort+0x50>)
   14e32:	689b      	ldr	r3, [r3, #8]
   14e34:	42a3      	cmp	r3, r4
   14e36:	d107      	bne.n	14e48 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14e38:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   14e3c:	b183      	cbz	r3, 14e60 <z_impl_k_thread_abort+0x38>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14e3e:	4a0f      	ldr	r2, [pc, #60]	; (14e7c <z_impl_k_thread_abort+0x54>)
   14e40:	6853      	ldr	r3, [r2, #4]
   14e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14e46:	6053      	str	r3, [r2, #4]
	__asm__ volatile(
   14e48:	f04f 0320 	mov.w	r3, #32
   14e4c:	f3ef 8011 	mrs	r0, BASEPRI
   14e50:	f383 8811 	msr	BASEPRI, r3
   14e54:	f3bf 8f6f 	isb	sy
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   14e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   14e5c:	f019 bdbb 	b.w	2e9d6 <z_reschedule_irqlock>
   14e60:	f04f 0320 	mov.w	r3, #32
   14e64:	f3ef 8011 	mrs	r0, BASEPRI
   14e68:	f383 8811 	msr	BASEPRI, r3
   14e6c:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
   14e70:	f7ff fb34 	bl	144dc <arch_swap>
	return ret;
   14e74:	e7e8      	b.n	14e48 <z_impl_k_thread_abort+0x20>
   14e76:	bf00      	nop
   14e78:	20021de0 	.word	0x20021de0
   14e7c:	e000ed00 	.word	0xe000ed00

00014e80 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   14e80:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   14e82:	4b0e      	ldr	r3, [pc, #56]	; (14ebc <z_arm_configure_static_mpu_regions+0x3c>)
{
   14e84:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   14e86:	9302      	str	r3, [sp, #8]
   14e88:	4b0d      	ldr	r3, [pc, #52]	; (14ec0 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14e8a:	4c0e      	ldr	r4, [pc, #56]	; (14ec4 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   14e8c:	9303      	str	r3, [sp, #12]
   14e8e:	4b0e      	ldr	r3, [pc, #56]	; (14ec8 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14e90:	4a0e      	ldr	r2, [pc, #56]	; (14ecc <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   14e92:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   14e94:	ab02      	add	r3, sp, #8
   14e96:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14e98:	a801      	add	r0, sp, #4
   14e9a:	4623      	mov	r3, r4
   14e9c:	2101      	movs	r1, #1
   14e9e:	f000 f96d 	bl	1517c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   14ea2:	2300      	movs	r3, #0
   14ea4:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   14ea6:	4b0a      	ldr	r3, [pc, #40]	; (14ed0 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   14ea8:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   14eaa:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   14eac:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   14eae:	9305      	str	r3, [sp, #20]
   14eb0:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   14eb2:	f000 f989 	bl	151c8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   14eb6:	b008      	add	sp, #32
   14eb8:	bd10      	pop	{r4, pc}
   14eba:	bf00      	nop
   14ebc:	20020000 	.word	0x20020000
   14ec0:	00000000 	.word	0x00000000
   14ec4:	20040000 	.word	0x20040000
   14ec8:	00010006 	.word	0x00010006
   14ecc:	20020000 	.word	0x20020000
   14ed0:	20020cd8 	.word	0x20020cd8

00014ed4 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   14ed4:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   14ed6:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   14ed8:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   14eda:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   14ede:	f004 031f 	and.w	r3, r4, #31
   14ee2:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   14ee4:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   14ee6:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   14ee8:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   14eec:	4904      	ldr	r1, [pc, #16]	; (14f00 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   14eee:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   14ef2:	f043 0301 	orr.w	r3, r3, #1
   14ef6:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   14ef8:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   14efa:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   14efc:	bd10      	pop	{r4, pc}
   14efe:	bf00      	nop
   14f00:	e000ed90 	.word	0xe000ed90

00014f04 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   14f04:	b508      	push	{r3, lr}
   14f06:	4a07      	ldr	r2, [pc, #28]	; (14f24 <region_allocate_and_init.part.0+0x20>)
   14f08:	4b07      	ldr	r3, [pc, #28]	; (14f28 <region_allocate_and_init.part.0+0x24>)
   14f0a:	4601      	mov	r1, r0
   14f0c:	1ad2      	subs	r2, r2, r3
   14f0e:	08d2      	lsrs	r2, r2, #3
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14f10:	0192      	lsls	r2, r2, #6
   14f12:	4806      	ldr	r0, [pc, #24]	; (14f2c <region_allocate_and_init.part.0+0x28>)
   14f14:	f042 0201 	orr.w	r2, r2, #1
   14f18:	f017 fce7 	bl	2c8ea <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   14f1c:	f06f 0015 	mvn.w	r0, #21
   14f20:	bd08      	pop	{r3, pc}
   14f22:	bf00      	nop
   14f24:	0002f05c 	.word	0x0002f05c
   14f28:	0002eff4 	.word	0x0002eff4
   14f2c:	00031192 	.word	0x00031192

00014f30 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   14f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f34:	4607      	mov	r7, r0
   14f36:	4688      	mov	r8, r1
   14f38:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   14f3a:	2600      	movs	r6, #0
	MPU->RNR = index;
   14f3c:	4d56      	ldr	r5, [pc, #344]	; (15098 <mpu_configure_regions_and_partition.constprop.0+0x168>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   14f3e:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   14f40:	4546      	cmp	r6, r8
   14f42:	da35      	bge.n	14fb0 <mpu_configure_regions_and_partition.constprop.0+0x80>
		if (regions[i]->size == 0U) {
   14f44:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   14f48:	f8d3 9004 	ldr.w	r9, [r3, #4]
   14f4c:	f1b9 0f00 	cmp.w	r9, #0
   14f50:	d051      	beq.n	14ff6 <mpu_configure_regions_and_partition.constprop.0+0xc6>
		&&
   14f52:	f1b9 0f1f 	cmp.w	r9, #31
   14f56:	d91e      	bls.n	14f96 <mpu_configure_regions_and_partition.constprop.0+0x66>
		&&
   14f58:	f019 0f1f 	tst.w	r9, #31
   14f5c:	d11b      	bne.n	14f96 <mpu_configure_regions_and_partition.constprop.0+0x66>
		((part->start &
   14f5e:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   14f62:	f01a 0f1f 	tst.w	sl, #31
   14f66:	d116      	bne.n	14f96 <mpu_configure_regions_and_partition.constprop.0+0x66>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   14f68:	4650      	mov	r0, sl
   14f6a:	f018 f889 	bl	2d080 <arm_cmse_mpu_region_get>
   14f6e:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   14f70:	eb09 000a 	add.w	r0, r9, sl
   14f74:	3801      	subs	r0, #1
   14f76:	f018 f883 	bl	2d080 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   14f7a:	4583      	cmp	fp, r0
   14f7c:	d01c      	beq.n	14fb8 <mpu_configure_regions_and_partition.constprop.0+0x88>
	return -EINVAL;
   14f7e:	f06f 0b15 	mvn.w	fp, #21
   14f82:	4a46      	ldr	r2, [pc, #280]	; (1509c <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   14f84:	4b46      	ldr	r3, [pc, #280]	; (150a0 <mpu_configure_regions_and_partition.constprop.0+0x170>)
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   14f86:	4659      	mov	r1, fp
   14f88:	1ad2      	subs	r2, r2, r3
   14f8a:	08d2      	lsrs	r2, r2, #3
   14f8c:	0192      	lsls	r2, r2, #6
   14f8e:	4845      	ldr	r0, [pc, #276]	; (150a4 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   14f90:	f042 0201 	orr.w	r2, r2, #1
   14f94:	e008      	b.n	14fa8 <mpu_configure_regions_and_partition.constprop.0+0x78>
			LOG_ERR("Partition %u: sanity check failed.", i);
   14f96:	4631      	mov	r1, r6
   14f98:	4a40      	ldr	r2, [pc, #256]	; (1509c <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   14f9a:	4b41      	ldr	r3, [pc, #260]	; (150a0 <mpu_configure_regions_and_partition.constprop.0+0x170>)
   14f9c:	4842      	ldr	r0, [pc, #264]	; (150a8 <mpu_configure_regions_and_partition.constprop.0+0x178>)
   14f9e:	1ad2      	subs	r2, r2, r3
   14fa0:	08d2      	lsrs	r2, r2, #3
   14fa2:	0192      	lsls	r2, r2, #6
   14fa4:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   14fa8:	f017 fc9f 	bl	2c8ea <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   14fac:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   14fb0:	4620      	mov	r0, r4
   14fb2:	b005      	add	sp, #20
   14fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   14fb8:	f11b 0f16 	cmn.w	fp, #22
   14fbc:	d0e1      	beq.n	14f82 <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
   14fbe:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   14fc0:	455b      	cmp	r3, fp
   14fc2:	dbde      	blt.n	14f82 <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
   14fc4:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   14fc8:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   14fca:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   14fce:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   14fd0:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   14fd4:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   14fd8:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   14fdc:	e9d1 3200 	ldrd	r3, r2, [r1]
   14fe0:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   14fe2:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   14fe4:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   14fe8:	d118      	bne.n	1501c <mpu_configure_regions_and_partition.constprop.0+0xec>
   14fea:	45ca      	cmp	sl, r9
   14fec:	d105      	bne.n	14ffa <mpu_configure_regions_and_partition.constprop.0+0xca>
			mpu_configure_region(u_reg_index, regions[i]);
   14fee:	fa5f f08b 	uxtb.w	r0, fp
   14ff2:	f018 f824 	bl	2d03e <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   14ff6:	3601      	adds	r6, #1
   14ff8:	e7a2      	b.n	14f40 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   14ffa:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   14ffe:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   15000:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   15004:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   15008:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1500a:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   1500c:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   1500e:	f018 f816 	bl	2d03e <mpu_configure_region>
			if (reg_index == -EINVAL) {
   15012:	f110 0f16 	cmn.w	r0, #22
   15016:	d0c9      	beq.n	14fac <mpu_configure_regions_and_partition.constprop.0+0x7c>
			reg_index++;
   15018:	1c44      	adds	r4, r0, #1
   1501a:	e7ec      	b.n	14ff6 <mpu_configure_regions_and_partition.constprop.0+0xc6>
	MPU->RNR = index;
   1501c:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   15020:	692a      	ldr	r2, [r5, #16]
   15022:	3b01      	subs	r3, #1
   15024:	f023 031f 	bic.w	r3, r3, #31
   15028:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   1502c:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   1502e:	45ca      	cmp	sl, r9
   15030:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   15032:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   15034:	d0eb      	beq.n	1500e <mpu_configure_regions_and_partition.constprop.0+0xde>
				mpu_configure_region(reg_index, regions[i]);
   15036:	f018 f802 	bl	2d03e <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1503a:	f110 0f16 	cmn.w	r0, #22
   1503e:	d0b5      	beq.n	14fac <mpu_configure_regions_and_partition.constprop.0+0x7c>
	MPU->RNR = index;
   15040:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   15044:	68ea      	ldr	r2, [r5, #12]
   15046:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   1504a:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   1504e:	f362 0304 	bfi	r3, r2, #0, #5
   15052:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   15056:	692b      	ldr	r3, [r5, #16]
   15058:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1505c:	085b      	lsrs	r3, r3, #1
   1505e:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   15062:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   15066:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   1506a:	e9d3 1300 	ldrd	r1, r3, [r3]
   1506e:	440b      	add	r3, r1
   15070:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   15072:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   15076:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   15078:	4453      	add	r3, sl
   1507a:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
   1507e:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i]->start +
   15080:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   15084:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   15086:	9303      	str	r3, [sp, #12]
   15088:	d902      	bls.n	15090 <mpu_configure_regions_and_partition.constprop.0+0x160>
   1508a:	f7ff ff3b 	bl	14f04 <region_allocate_and_init.part.0>
   1508e:	e7c0      	b.n	15012 <mpu_configure_regions_and_partition.constprop.0+0xe2>
	region_init(index, region_conf);
   15090:	4669      	mov	r1, sp
   15092:	f7ff ff1f 	bl	14ed4 <region_init>
			if (reg_index == -EINVAL) {
   15096:	e7bf      	b.n	15018 <mpu_configure_regions_and_partition.constprop.0+0xe8>
   15098:	e000ed90 	.word	0xe000ed90
   1509c:	0002f05c 	.word	0x0002f05c
   150a0:	0002eff4 	.word	0x0002eff4
   150a4:	000311db 	.word	0x000311db
   150a8:	000311b8 	.word	0x000311b8

000150ac <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   150ac:	2205      	movs	r2, #5
   150ae:	4b03      	ldr	r3, [pc, #12]	; (150bc <arm_core_mpu_enable+0x10>)
   150b0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   150b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   150b6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   150ba:	4770      	bx	lr
   150bc:	e000ed90 	.word	0xe000ed90

000150c0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   150c0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   150c4:	2200      	movs	r2, #0
   150c6:	4b01      	ldr	r3, [pc, #4]	; (150cc <arm_core_mpu_disable+0xc>)
   150c8:	605a      	str	r2, [r3, #4]
}
   150ca:	4770      	bx	lr
   150cc:	e000ed90 	.word	0xe000ed90

000150d0 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   150d0:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   150d2:	4e20      	ldr	r6, [pc, #128]	; (15154 <arm_mpu_init+0x84>)
   150d4:	6835      	ldr	r5, [r6, #0]
   150d6:	2d10      	cmp	r5, #16
   150d8:	d913      	bls.n	15102 <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   150da:	f44f 739d 	mov.w	r3, #314	; 0x13a
   150de:	4a1e      	ldr	r2, [pc, #120]	; (15158 <arm_mpu_init+0x88>)
   150e0:	491e      	ldr	r1, [pc, #120]	; (1515c <arm_mpu_init+0x8c>)
   150e2:	481f      	ldr	r0, [pc, #124]	; (15160 <arm_mpu_init+0x90>)
   150e4:	f017 f9a5 	bl	2c432 <printk>
   150e8:	2210      	movs	r2, #16
   150ea:	4629      	mov	r1, r5
   150ec:	481d      	ldr	r0, [pc, #116]	; (15164 <arm_mpu_init+0x94>)
   150ee:	f017 f9a0 	bl	2c432 <printk>
   150f2:	4819      	ldr	r0, [pc, #100]	; (15158 <arm_mpu_init+0x88>)
   150f4:	f44f 719d 	mov.w	r1, #314	; 0x13a
   150f8:	f017 fbb8 	bl	2c86c <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   150fc:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   15100:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
   15102:	f7ff ffdd 	bl	150c0 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15106:	2000      	movs	r0, #0
	MPU->MAIR0 =
   15108:	4c17      	ldr	r4, [pc, #92]	; (15168 <arm_mpu_init+0x98>)
   1510a:	4a18      	ldr	r2, [pc, #96]	; (1516c <arm_mpu_init+0x9c>)
   1510c:	6322      	str	r2, [r4, #48]	; 0x30
   1510e:	4285      	cmp	r5, r0
   15110:	d119      	bne.n	15146 <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   15112:	4b17      	ldr	r3, [pc, #92]	; (15170 <arm_mpu_init+0xa0>)
   15114:	701d      	strb	r5, [r3, #0]
	arm_core_mpu_enable();
   15116:	f7ff ffc9 	bl	150ac <arm_core_mpu_enable>
	__ASSERT(
   1511a:	6823      	ldr	r3, [r4, #0]
   1511c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   15120:	2b10      	cmp	r3, #16
   15122:	d00e      	beq.n	15142 <arm_mpu_init+0x72>
   15124:	4913      	ldr	r1, [pc, #76]	; (15174 <arm_mpu_init+0xa4>)
   15126:	f44f 73b0 	mov.w	r3, #352	; 0x160
   1512a:	4a0b      	ldr	r2, [pc, #44]	; (15158 <arm_mpu_init+0x88>)
   1512c:	480c      	ldr	r0, [pc, #48]	; (15160 <arm_mpu_init+0x90>)
   1512e:	f017 f980 	bl	2c432 <printk>
   15132:	4811      	ldr	r0, [pc, #68]	; (15178 <arm_mpu_init+0xa8>)
   15134:	f017 f97d 	bl	2c432 <printk>
   15138:	f44f 71b0 	mov.w	r1, #352	; 0x160
   1513c:	4806      	ldr	r0, [pc, #24]	; (15158 <arm_mpu_init+0x88>)
   1513e:	f017 fb95 	bl	2c86c <assert_post_action>
	return 0;
   15142:	2000      	movs	r0, #0
   15144:	e7dc      	b.n	15100 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   15146:	6871      	ldr	r1, [r6, #4]
   15148:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   1514c:	f7ff fec2 	bl	14ed4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15150:	3001      	adds	r0, #1
   15152:	e7dc      	b.n	1510e <arm_mpu_init+0x3e>
   15154:	0002f2a8 	.word	0x0002f2a8
   15158:	000311fe 	.word	0x000311fe
   1515c:	00032fcf 	.word	0x00032fcf
   15160:	00030166 	.word	0x00030166
   15164:	0003123e 	.word	0x0003123e
   15168:	e000ed90 	.word	0xe000ed90
   1516c:	0044ffaa 	.word	0x0044ffaa
   15170:	2002473a 	.word	0x2002473a
   15174:	00031272 	.word	0x00031272
   15178:	000312c3 	.word	0x000312c3

0001517c <arm_core_mpu_configure_static_mpu_regions>:
{
   1517c:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1517e:	4d0d      	ldr	r5, [pc, #52]	; (151b4 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   15180:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   15182:	782a      	ldrb	r2, [r5, #0]
   15184:	f7ff fed4 	bl	14f30 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   15188:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1518a:	3016      	adds	r0, #22
   1518c:	d111      	bne.n	151b2 <arm_core_mpu_configure_static_mpu_regions+0x36>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1518e:	f240 1303 	movw	r3, #259	; 0x103
   15192:	4a09      	ldr	r2, [pc, #36]	; (151b8 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   15194:	4909      	ldr	r1, [pc, #36]	; (151bc <arm_core_mpu_configure_static_mpu_regions+0x40>)
   15196:	480a      	ldr	r0, [pc, #40]	; (151c0 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   15198:	f017 f94b 	bl	2c432 <printk>
   1519c:	4621      	mov	r1, r4
   1519e:	4809      	ldr	r0, [pc, #36]	; (151c4 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   151a0:	f017 f947 	bl	2c432 <printk>
}
   151a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   151a8:	f240 1103 	movw	r1, #259	; 0x103
   151ac:	4802      	ldr	r0, [pc, #8]	; (151b8 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   151ae:	f017 bb5d 	b.w	2c86c <assert_post_action>
}
   151b2:	bd38      	pop	{r3, r4, r5, pc}
   151b4:	2002473a 	.word	0x2002473a
   151b8:	000311fe 	.word	0x000311fe
   151bc:	00032fcf 	.word	0x00032fcf
   151c0:	00030166 	.word	0x00030166
   151c4:	000312e4 	.word	0x000312e4

000151c8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   151c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151cc:	4e2f      	ldr	r6, [pc, #188]	; (1528c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
   151ce:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   151d0:	4605      	mov	r5, r0
   151d2:	f04f 0800 	mov.w	r8, #0
   151d6:	46b3      	mov	fp, r6
	MPU->RNR = index;
   151d8:	4f2d      	ldr	r7, [pc, #180]	; (15290 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   151da:	45c8      	cmp	r8, r9
   151dc:	db02      	blt.n	151e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
   151de:	b003      	add	sp, #12
   151e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   151e4:	f8d5 a004 	ldr.w	sl, [r5, #4]
   151e8:	f1ba 0f00 	cmp.w	sl, #0
   151ec:	d049      	beq.n	15282 <arm_core_mpu_mark_areas_for_dynamic_regions+0xba>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   151ee:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   151f0:	4608      	mov	r0, r1
   151f2:	9101      	str	r1, [sp, #4]
   151f4:	f017 ff44 	bl	2d080 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   151f8:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   151fa:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   151fc:	eb0a 0001 	add.w	r0, sl, r1
   15200:	3801      	subs	r0, #1
   15202:	f017 ff3d 	bl	2d080 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   15206:	4284      	cmp	r4, r0
   15208:	f04f 0214 	mov.w	r2, #20
   1520c:	4b21      	ldr	r3, [pc, #132]	; (15294 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   1520e:	d018      	beq.n	15242 <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   15210:	f06f 0315 	mvn.w	r3, #21
   15214:	fb02 f808 	mul.w	r8, r2, r8
   15218:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1521c:	f240 1313 	movw	r3, #275	; 0x113
   15220:	4a1d      	ldr	r2, [pc, #116]	; (15298 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   15222:	491e      	ldr	r1, [pc, #120]	; (1529c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   15224:	481e      	ldr	r0, [pc, #120]	; (152a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   15226:	f017 f904 	bl	2c432 <printk>
   1522a:	4649      	mov	r1, r9
   1522c:	481d      	ldr	r0, [pc, #116]	; (152a4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   1522e:	f017 f900 	bl	2c432 <printk>
   15232:	f240 1113 	movw	r1, #275	; 0x113
   15236:	4818      	ldr	r0, [pc, #96]	; (15298 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
}
   15238:	b003      	add	sp, #12
   1523a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1523e:	f017 bb15 	b.w	2c86c <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   15242:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   15246:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   15248:	d0e8      	beq.n	1521c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1524a:	7819      	ldrb	r1, [r3, #0]
   1524c:	42a1      	cmp	r1, r4
   1524e:	dde5      	ble.n	1521c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   15250:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   15254:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   15256:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   15258:	68fc      	ldr	r4, [r7, #12]
   1525a:	f100 0108 	add.w	r1, r0, #8
   1525e:	7b00      	ldrb	r0, [r0, #12]
   15260:	f364 0004 	bfi	r0, r4, #0, #5
   15264:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   15266:	6938      	ldr	r0, [r7, #16]
   15268:	790c      	ldrb	r4, [r1, #4]
   1526a:	0840      	lsrs	r0, r0, #1
   1526c:	f360 1447 	bfi	r4, r0, #5, #3
   15270:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   15272:	68f9      	ldr	r1, [r7, #12]
   15274:	f021 011f 	bic.w	r1, r1, #31
   15278:	6071      	str	r1, [r6, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   1527a:	6939      	ldr	r1, [r7, #16]
   1527c:	f021 011f 	bic.w	r1, r1, #31
   15280:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   15282:	f108 0801 	add.w	r8, r8, #1
   15286:	3614      	adds	r6, #20
   15288:	350c      	adds	r5, #12
   1528a:	e7a6      	b.n	151da <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   1528c:	200215e0 	.word	0x200215e0
   15290:	e000ed90 	.word	0xe000ed90
   15294:	2002473a 	.word	0x2002473a
   15298:	000311fe 	.word	0x000311fe
   1529c:	00032fcf 	.word	0x00032fcf
   152a0:	00030166 	.word	0x00030166
   152a4:	00031310 	.word	0x00031310

000152a8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   152a8:	4b01      	ldr	r3, [pc, #4]	; (152b0 <__stdout_hook_install+0x8>)
   152aa:	6018      	str	r0, [r3, #0]
}
   152ac:	4770      	bx	lr
   152ae:	bf00      	nop
   152b0:	20020438 	.word	0x20020438

000152b4 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   152b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   152b6:	4606      	mov	r6, r0
   152b8:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   152ba:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   152bc:	4f06      	ldr	r7, [pc, #24]	; (152d8 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   152be:	42ac      	cmp	r4, r5
   152c0:	da08      	bge.n	152d4 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   152c2:	683b      	ldr	r3, [r7, #0]
   152c4:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   152c6:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   152c8:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   152ca:	f104 0401 	add.w	r4, r4, #1
   152ce:	d001      	beq.n	152d4 <z_impl_zephyr_read_stdin+0x20>
   152d0:	280d      	cmp	r0, #13
   152d2:	d1f4      	bne.n	152be <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   152d4:	4620      	mov	r0, r4
   152d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   152d8:	20020434 	.word	0x20020434

000152dc <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   152dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   152de:	460d      	mov	r5, r1
   152e0:	4f09      	ldr	r7, [pc, #36]	; (15308 <z_impl_zephyr_write_stdout+0x2c>)
   152e2:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   152e4:	f1c0 0401 	rsb	r4, r0, #1
   152e8:	19a3      	adds	r3, r4, r6
   152ea:	429d      	cmp	r5, r3
   152ec:	dc01      	bgt.n	152f2 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   152ee:	4628      	mov	r0, r5
   152f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   152f2:	7873      	ldrb	r3, [r6, #1]
   152f4:	2b0a      	cmp	r3, #10
   152f6:	d102      	bne.n	152fe <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   152f8:	200d      	movs	r0, #13
   152fa:	683b      	ldr	r3, [r7, #0]
   152fc:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   152fe:	683b      	ldr	r3, [r7, #0]
   15300:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   15304:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   15306:	e7ef      	b.n	152e8 <z_impl_zephyr_write_stdout+0xc>
   15308:	20020438 	.word	0x20020438

0001530c <_exit>:

int _write(int fd, const void *buf, int nbytes)
{
	ARG_UNUSED(fd);

	return z_impl_zephyr_write_stdout(buf, nbytes);
   1530c:	2105      	movs	r1, #5
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   1530e:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   15310:	4801      	ldr	r0, [pc, #4]	; (15318 <_exit+0xc>)
   15312:	f7ff ffe3 	bl	152dc <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   15316:	e7fe      	b.n	15316 <_exit+0xa>
   15318:	0003133f 	.word	0x0003133f

0001531c <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   1531c:	b510      	push	{r4, lr}
   1531e:	4604      	mov	r4, r0
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
   15320:	f04f 32ff 	mov.w	r2, #4294967295
   15324:	f04f 33ff 	mov.w	r3, #4294967295
   15328:	480a      	ldr	r0, [pc, #40]	; (15354 <_sbrk+0x38>)
   1532a:	f017 f8f5 	bl	2c518 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1532e:	490a      	ldr	r1, [pc, #40]	; (15358 <_sbrk+0x3c>)
   15330:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   15332:	18e0      	adds	r0, r4, r3
   15334:	4c09      	ldr	r4, [pc, #36]	; (1535c <_sbrk+0x40>)
   15336:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   1533a:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   1533e:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   15340:	bf2e      	itee	cs
   15342:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   15346:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   15348:	6008      	strcc	r0, [r1, #0]
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
   1534a:	4802      	ldr	r0, [pc, #8]	; (15354 <_sbrk+0x38>)
   1534c:	f017 f8df 	bl	2c50e <sys_sem_give>

	return ret;
}
   15350:	4620      	mov	r0, r4
   15352:	bd10      	pop	{r4, pc}
   15354:	20020c3c 	.word	0x20020c3c
   15358:	200215f4 	.word	0x200215f4
   1535c:	2002a690 	.word	0x2002a690

00015360 <__chk_fail>:
	return z_impl_zephyr_write_stdout(buf, nbytes);
   15360:	211d      	movs	r1, #29
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   15362:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   15364:	4804      	ldr	r0, [pc, #16]	; (15378 <__chk_fail+0x18>)
   15366:	f7ff ffb9 	bl	152dc <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   1536a:	4040      	eors	r0, r0
   1536c:	f380 8811 	msr	BASEPRI, r0
   15370:	f04f 0003 	mov.w	r0, #3
   15374:	df02      	svc	2
	CODE_UNREACHABLE;
   15376:	bf00      	nop
   15378:	00031345 	.word	0x00031345

0001537c <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   1537c:	b538      	push	{r3, r4, r5, lr}
   1537e:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   15380:	4604      	mov	r4, r0
   15382:	b970      	cbnz	r0, 153a2 <net_if_flag_is_set+0x26>
   15384:	490b      	ldr	r1, [pc, #44]	; (153b4 <net_if_flag_is_set+0x38>)
   15386:	f240 2312 	movw	r3, #530	; 0x212
   1538a:	4a0b      	ldr	r2, [pc, #44]	; (153b8 <net_if_flag_is_set+0x3c>)
   1538c:	480b      	ldr	r0, [pc, #44]	; (153bc <net_if_flag_is_set+0x40>)
   1538e:	f017 f850 	bl	2c432 <printk>
   15392:	480b      	ldr	r0, [pc, #44]	; (153c0 <net_if_flag_is_set+0x44>)
   15394:	f017 f84d 	bl	2c432 <printk>
   15398:	f240 2112 	movw	r1, #530	; 0x212
   1539c:	4806      	ldr	r0, [pc, #24]	; (153b8 <net_if_flag_is_set+0x3c>)
   1539e:	f017 fa65 	bl	2c86c <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   153a2:	6823      	ldr	r3, [r4, #0]
   153a4:	330c      	adds	r3, #12
   153a6:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   153aa:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   153ac:	f000 0001 	and.w	r0, r0, #1
   153b0:	bd38      	pop	{r3, r4, r5, pc}
   153b2:	bf00      	nop
   153b4:	000313a2 	.word	0x000313a2
   153b8:	0003137a 	.word	0x0003137a
   153bc:	00030166 	.word	0x00030166
   153c0:	00030a10 	.word	0x00030a10

000153c4 <net_if_flag_set.constprop.0>:
static inline void net_if_flag_set(struct net_if *iface,
   153c4:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   153c6:	4604      	mov	r4, r0
   153c8:	b970      	cbnz	r0, 153e8 <net_if_flag_set.constprop.0+0x24>
   153ca:	490d      	ldr	r1, [pc, #52]	; (15400 <net_if_flag_set.constprop.0+0x3c>)
   153cc:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
   153d0:	4a0c      	ldr	r2, [pc, #48]	; (15404 <net_if_flag_set.constprop.0+0x40>)
   153d2:	480d      	ldr	r0, [pc, #52]	; (15408 <net_if_flag_set.constprop.0+0x44>)
   153d4:	f017 f82d 	bl	2c432 <printk>
   153d8:	480c      	ldr	r0, [pc, #48]	; (1540c <net_if_flag_set.constprop.0+0x48>)
   153da:	f017 f82a 	bl	2c432 <printk>
   153de:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
   153e2:	4808      	ldr	r0, [pc, #32]	; (15404 <net_if_flag_set.constprop.0+0x40>)
   153e4:	f017 fa42 	bl	2c86c <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   153e8:	6823      	ldr	r3, [r4, #0]
   153ea:	330c      	adds	r3, #12
   153ec:	e8d3 2fef 	ldaex	r2, [r3]
   153f0:	f042 0201 	orr.w	r2, r2, #1
   153f4:	e8c3 2fe1 	stlex	r1, r2, [r3]
   153f8:	2900      	cmp	r1, #0
   153fa:	d1f7      	bne.n	153ec <net_if_flag_set.constprop.0+0x28>
}
   153fc:	bd10      	pop	{r4, pc}
   153fe:	bf00      	nop
   15400:	000313a2 	.word	0x000313a2
   15404:	0003137a 	.word	0x0003137a
   15408:	00030166 	.word	0x00030166
   1540c:	00030a10 	.word	0x00030a10

00015410 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   15410:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   15412:	2100      	movs	r1, #0
{
   15414:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   15416:	f7ff ffb1 	bl	1537c <net_if_flag_is_set>
   1541a:	b928      	cbnz	r0, 15428 <net_if_up+0x18>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   1541c:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   1541e:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   15420:	7e9b      	ldrb	r3, [r3, #26]
   15422:	b11b      	cbz	r3, 1542c <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   15424:	f7ff ffce 	bl	153c4 <net_if_flag_set.constprop.0>
		return 0;
   15428:	2000      	movs	r0, #0
   1542a:	e023      	b.n	15474 <net_if_up+0x64>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1542c:	f017 fe58 	bl	2d0e0 <net_if_l2>
   15430:	b9c0      	cbnz	r0, 15464 <net_if_up+0x54>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   15432:	682b      	ldr	r3, [r5, #0]
   15434:	691b      	ldr	r3, [r3, #16]
   15436:	b973      	cbnz	r3, 15456 <net_if_up+0x46>
   15438:	490f      	ldr	r1, [pc, #60]	; (15478 <net_if_up+0x68>)
   1543a:	f640 53fd 	movw	r3, #3581	; 0xdfd
   1543e:	4a0f      	ldr	r2, [pc, #60]	; (1547c <net_if_up+0x6c>)
   15440:	480f      	ldr	r0, [pc, #60]	; (15480 <net_if_up+0x70>)
   15442:	f016 fff6 	bl	2c432 <printk>
   15446:	480f      	ldr	r0, [pc, #60]	; (15484 <net_if_up+0x74>)
   15448:	f016 fff3 	bl	2c432 <printk>
   1544c:	f640 51fd 	movw	r1, #3581	; 0xdfd
   15450:	480a      	ldr	r0, [pc, #40]	; (1547c <net_if_up+0x6c>)
   15452:	f017 fa0b 	bl	2c86c <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   15456:	4628      	mov	r0, r5
   15458:	f7ff ffb4 	bl	153c4 <net_if_flag_set.constprop.0>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1545c:	4628      	mov	r0, r5
   1545e:	f017 fe44 	bl	2d0ea <l2_flags_get>
   15462:	e7e1      	b.n	15428 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   15464:	6883      	ldr	r3, [r0, #8]
   15466:	2b00      	cmp	r3, #0
   15468:	d0e3      	beq.n	15432 <net_if_up+0x22>
	status = net_if_l2(iface)->enable(iface, true);
   1546a:	2101      	movs	r1, #1
   1546c:	4628      	mov	r0, r5
   1546e:	4798      	blx	r3
	if (status < 0) {
   15470:	2800      	cmp	r0, #0
   15472:	dade      	bge.n	15432 <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   15474:	bd38      	pop	{r3, r4, r5, pc}
   15476:	bf00      	nop
   15478:	000313ec 	.word	0x000313ec
   1547c:	000313a8 	.word	0x000313a8
   15480:	00030166 	.word	0x00030166
   15484:	00030a10 	.word	0x00030a10

00015488 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   15488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	NET_DBG("");

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1548c:	4e12      	ldr	r6, [pc, #72]	; (154d8 <net_if_init+0x50>)
   1548e:	4c13      	ldr	r4, [pc, #76]	; (154dc <net_if_init+0x54>)
   15490:	46b0      	mov	r8, r6
   15492:	4f13      	ldr	r7, [pc, #76]	; (154e0 <net_if_init+0x58>)
   15494:	42b4      	cmp	r4, r6
   15496:	4625      	mov	r5, r4
   15498:	d90e      	bls.n	154b8 <net_if_init+0x30>
   1549a:	4912      	ldr	r1, [pc, #72]	; (154e4 <net_if_init+0x5c>)
   1549c:	f640 63dc 	movw	r3, #3804	; 0xedc
   154a0:	463a      	mov	r2, r7
   154a2:	4811      	ldr	r0, [pc, #68]	; (154e8 <net_if_init+0x60>)
   154a4:	f016 ffc5 	bl	2c432 <printk>
   154a8:	4810      	ldr	r0, [pc, #64]	; (154ec <net_if_init+0x64>)
   154aa:	f016 ffc2 	bl	2c432 <printk>
   154ae:	f640 61dc 	movw	r1, #3804	; 0xedc
   154b2:	4638      	mov	r0, r7
   154b4:	f017 f9da 	bl	2c86c <assert_post_action>
   154b8:	4544      	cmp	r4, r8
   154ba:	d301      	bcc.n	154c0 <net_if_init+0x38>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   154bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return iface->if_dev->dev;
   154c0:	682b      	ldr	r3, [r5, #0]
   154c2:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   154c4:	681b      	ldr	r3, [r3, #0]
   154c6:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   154c8:	2b00      	cmp	r3, #0
   154ca:	d0e3      	beq.n	15494 <net_if_init+0xc>
   154cc:	681b      	ldr	r3, [r3, #0]
   154ce:	2b00      	cmp	r3, #0
   154d0:	d0e0      	beq.n	15494 <net_if_init+0xc>
	api->init(iface);
   154d2:	4628      	mov	r0, r5
   154d4:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   154d6:	e7dd      	b.n	15494 <net_if_init+0xc>
   154d8:	20020cb8 	.word	0x20020cb8
   154dc:	20020cb4 	.word	0x20020cb4
   154e0:	000313a8 	.word	0x000313a8
   154e4:	000313d2 	.word	0x000313d2
   154e8:	00030166 	.word	0x00030166
   154ec:	00030a8e 	.word	0x00030a8e

000154f0 <net_if_post_init>:

void net_if_post_init(void)
{
   154f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   154f2:	4d11      	ldr	r5, [pc, #68]	; (15538 <net_if_post_init+0x48>)
   154f4:	4c11      	ldr	r4, [pc, #68]	; (1553c <net_if_post_init+0x4c>)
   154f6:	462f      	mov	r7, r5
   154f8:	4e11      	ldr	r6, [pc, #68]	; (15540 <net_if_post_init+0x50>)
   154fa:	42ac      	cmp	r4, r5
   154fc:	d90e      	bls.n	1551c <net_if_post_init+0x2c>
   154fe:	4911      	ldr	r1, [pc, #68]	; (15544 <net_if_post_init+0x54>)
   15500:	f640 730b 	movw	r3, #3851	; 0xf0b
   15504:	4632      	mov	r2, r6
   15506:	4810      	ldr	r0, [pc, #64]	; (15548 <net_if_post_init+0x58>)
   15508:	f016 ff93 	bl	2c432 <printk>
   1550c:	480f      	ldr	r0, [pc, #60]	; (1554c <net_if_post_init+0x5c>)
   1550e:	f016 ff90 	bl	2c432 <printk>
   15512:	f640 710b 	movw	r1, #3851	; 0xf0b
   15516:	4630      	mov	r0, r6
   15518:	f017 f9a8 	bl	2c86c <assert_post_action>
   1551c:	42bc      	cmp	r4, r7
   1551e:	d300      	bcc.n	15522 <net_if_post_init+0x32>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   15520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   15522:	2103      	movs	r1, #3
   15524:	4620      	mov	r0, r4
   15526:	f7ff ff29 	bl	1537c <net_if_flag_is_set>
   1552a:	b910      	cbnz	r0, 15532 <net_if_post_init+0x42>
			net_if_up(iface);
   1552c:	4620      	mov	r0, r4
   1552e:	f7ff ff6f 	bl	15410 <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   15532:	3404      	adds	r4, #4
   15534:	e7e1      	b.n	154fa <net_if_post_init+0xa>
   15536:	bf00      	nop
   15538:	20020cb8 	.word	0x20020cb8
   1553c:	20020cb4 	.word	0x20020cb4
   15540:	000313a8 	.word	0x000313a8
   15544:	000313d2 	.word	0x000313d2
   15548:	00030166 	.word	0x00030166
   1554c:	00030a8e 	.word	0x00030a8e

00015550 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   15550:	2300      	movs	r3, #0
{
   15552:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   15556:	2802      	cmp	r0, #2
{
   15558:	b089      	sub	sp, #36	; 0x24
   1555a:	4607      	mov	r7, r0
   1555c:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   1555e:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   15562:	9104      	str	r1, [sp, #16]
	if (family == AF_INET6) {
   15564:	d13e      	bne.n	155e4 <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   15566:	a806      	add	r0, sp, #24
   15568:	9105      	str	r1, [sp, #20]
   1556a:	4601      	mov	r1, r0
{
   1556c:	461a      	mov	r2, r3
   1556e:	e006      	b.n	1557e <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   15570:	780c      	ldrb	r4, [r1, #0]
   15572:	3201      	adds	r2, #1
   15574:	3401      	adds	r4, #1
   15576:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   15578:	b2d4      	uxtb	r4, r2
   1557a:	2c07      	cmp	r4, #7
   1557c:	d804      	bhi.n	15588 <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1557e:	9c04      	ldr	r4, [sp, #16]
   15580:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   15584:	2c00      	cmp	r4, #0
   15586:	d0f3      	beq.n	15570 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   15588:	3301      	adds	r3, #1
   1558a:	2b08      	cmp	r3, #8
   1558c:	f101 0101 	add.w	r1, r1, #1
   15590:	d1ec      	bne.n	1556c <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   15592:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   15596:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   1559a:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   1559c:	f810 2b01 	ldrb.w	r2, [r0], #1
   155a0:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   155a2:	bf88      	it	hi
   155a4:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   155a8:	f103 0301 	add.w	r3, r3, #1
   155ac:	b2db      	uxtb	r3, r3
				pos = i;
   155ae:	bf88      	it	hi
   155b0:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   155b2:	2b08      	cmp	r3, #8
   155b4:	d1f2      	bne.n	1559c <z_impl_net_addr_ntop+0x4c>
		len = 8;
   155b6:	469b      	mov	fp, r3
   155b8:	f1b9 0f01 	cmp.w	r9, #1
   155bc:	f04f 033a 	mov.w	r3, #58	; 0x3a
   155c0:	bf08      	it	eq
   155c2:	f04f 38ff 	moveq.w	r8, #4294967295
   155c6:	9303      	str	r3, [sp, #12]
	bool needcolon = false;
   155c8:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   155ca:	4634      	mov	r4, r6
   155cc:	460d      	mov	r5, r1
   155ce:	455d      	cmp	r5, fp
   155d0:	db17      	blt.n	15602 <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   155d2:	42b4      	cmp	r4, r6
   155d4:	d008      	beq.n	155e8 <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   155d6:	2300      	movs	r3, #0
   155d8:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   155da:	bf0c      	ite	eq
   155dc:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   155e0:	7023      	strbne	r3, [r4, #0]
   155e2:	e002      	b.n	155ea <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   155e4:	2801      	cmp	r0, #1
   155e6:	d004      	beq.n	155f2 <z_impl_net_addr_ntop+0xa2>
		return NULL;
   155e8:	2600      	movs	r6, #0
	}

	return dst;
}
   155ea:	4630      	mov	r0, r6
   155ec:	b009      	add	sp, #36	; 0x24
   155ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   155f2:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   155f4:	f04f 0b04 	mov.w	fp, #4
	int8_t pos = -1;
   155f8:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   155fc:	4681      	mov	r9, r0
		delim = '.';
   155fe:	9303      	str	r3, [sp, #12]
   15600:	e7e2      	b.n	155c8 <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   15602:	f1bb 0f04 	cmp.w	fp, #4
   15606:	d13b      	bne.n	15680 <z_impl_net_addr_ntop+0x130>
			value = (uint32_t)addr->s4_addr[i];
   15608:	9b04      	ldr	r3, [sp, #16]
   1560a:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   1560c:	b94a      	cbnz	r2, 15622 <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   1560e:	2330      	movs	r3, #48	; 0x30
   15610:	4620      	mov	r0, r4
   15612:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   15616:	9b03      	ldr	r3, [sp, #12]
   15618:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   1561a:	3501      	adds	r5, #1
   1561c:	4604      	mov	r4, r0
   1561e:	b2ed      	uxtb	r5, r5
   15620:	e7d5      	b.n	155ce <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   15622:	f04f 0e09 	mov.w	lr, #9
   15626:	f04f 0a00 	mov.w	sl, #0
   1562a:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1562e:	483a      	ldr	r0, [pc, #232]	; (15718 <z_impl_net_addr_ntop+0x1c8>)
		value = value % divisor;
   15630:	f8dd c004 	ldr.w	ip, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   15634:	45f2      	cmp	sl, lr
		value = value % divisor;
   15636:	fbbc f2f0 	udiv	r2, ip, r0
   1563a:	fb00 c212 	mls	r2, r0, r2, ip
   1563e:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   15640:	dc01      	bgt.n	15646 <z_impl_net_addr_ntop+0xf6>
   15642:	4584      	cmp	ip, r0
   15644:	d308      	bcc.n	15658 <z_impl_net_addr_ntop+0x108>
		temp = value / divisor;
   15646:	fbbc fcf0 	udiv	ip, ip, r0
			*buf++ = (char) (temp + '0');
   1564a:	46f2      	mov	sl, lr
   1564c:	9b02      	ldr	r3, [sp, #8]
   1564e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   15652:	f803 cb01 	strb.w	ip, [r3], #1
   15656:	9302      	str	r3, [sp, #8]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   15658:	220a      	movs	r2, #10
   1565a:	f10e 3eff 	add.w	lr, lr, #4294967295
   1565e:	f1be 3fff 	cmp.w	lr, #4294967295
   15662:	fbb0 f0f2 	udiv	r0, r0, r2
   15666:	d1e3      	bne.n	15630 <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   15668:	f04f 0200 	mov.w	r2, #0
   1566c:	9b02      	ldr	r3, [sp, #8]
   1566e:	701a      	strb	r2, [r3, #0]
	return buf - start;
   15670:	1b1b      	subs	r3, r3, r4
			ptr += l;
   15672:	b2da      	uxtb	r2, r3
   15674:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   15678:	1c58      	adds	r0, r3, #1
   1567a:	9b03      	ldr	r3, [sp, #12]
   1567c:	54a3      	strb	r3, [r4, r2]
			continue;
   1567e:	e7cc      	b.n	1561a <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   15680:	45a8      	cmp	r8, r5
   15682:	d110      	bne.n	156a6 <z_impl_net_addr_ntop+0x156>
			if (needcolon || i == 0U) {
   15684:	b911      	cbnz	r1, 1568c <z_impl_net_addr_ntop+0x13c>
   15686:	f1b8 0f00 	cmp.w	r8, #0
   1568a:	d102      	bne.n	15692 <z_impl_net_addr_ntop+0x142>
				*ptr++ = ':';
   1568c:	233a      	movs	r3, #58	; 0x3a
   1568e:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   15692:	233a      	movs	r3, #58	; 0x3a
   15694:	4620      	mov	r0, r4
   15696:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   1569a:	f109 33ff 	add.w	r3, r9, #4294967295
   1569e:	441d      	add	r5, r3
			needcolon = false;
   156a0:	2100      	movs	r1, #0
			i += longest - 1U;
   156a2:	b2ed      	uxtb	r5, r5
			continue;
   156a4:	e7b9      	b.n	1561a <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   156a6:	b111      	cbz	r1, 156ae <z_impl_net_addr_ntop+0x15e>
			*ptr++ = ':';
   156a8:	233a      	movs	r3, #58	; 0x3a
   156aa:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   156ae:	9b05      	ldr	r3, [sp, #20]
   156b0:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   156b4:	0219      	lsls	r1, r3, #8
   156b6:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
		if (bh) {
   156ba:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   156be:	b20a      	sxth	r2, r1
		bh = value >> 8;
   156c0:	f3c1 2307 	ubfx	r3, r1, #8, #8
		bl = value & 0xff;
   156c4:	fa5f fa81 	uxtb.w	sl, r1
		if (bh) {
   156c8:	d016      	beq.n	156f8 <z_impl_net_addr_ntop+0x1a8>
			if (bh > 0x0f) {
   156ca:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   156cc:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   156ce:	d90b      	bls.n	156e8 <z_impl_net_addr_ntop+0x198>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   156d0:	2300      	movs	r3, #0
   156d2:	2261      	movs	r2, #97	; 0x61
   156d4:	4620      	mov	r0, r4
   156d6:	f017 fd15 	bl	2d104 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   156da:	2301      	movs	r3, #1
   156dc:	2261      	movs	r2, #97	; 0x61
   156de:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   156e0:	f017 fd10 	bl	2d104 <net_byte_to_hex>
		needcolon = true;
   156e4:	2101      	movs	r1, #1
   156e6:	e798      	b.n	1561a <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   156e8:	b25b      	sxtb	r3, r3
   156ea:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   156ec:	bf94      	ite	ls
   156ee:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   156f0:	3357      	addhi	r3, #87	; 0x57
   156f2:	1c60      	adds	r0, r4, #1
   156f4:	7023      	strb	r3, [r4, #0]
   156f6:	e7f0      	b.n	156da <z_impl_net_addr_ntop+0x18a>
		} else if (bl > 0x0f) {
   156f8:	f1ba 0f0f 	cmp.w	sl, #15
   156fc:	d903      	bls.n	15706 <z_impl_net_addr_ntop+0x1b6>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   156fe:	2261      	movs	r2, #97	; 0x61
   15700:	4651      	mov	r1, sl
   15702:	4620      	mov	r0, r4
   15704:	e7ec      	b.n	156e0 <z_impl_net_addr_ntop+0x190>
			if (bl < 10) {
   15706:	b253      	sxtb	r3, r2
   15708:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   1570c:	bf94      	ite	ls
   1570e:	3330      	addls	r3, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   15710:	3357      	addhi	r3, #87	; 0x57
   15712:	1c60      	adds	r0, r4, #1
   15714:	7023      	strb	r3, [r4, #0]
   15716:	e7e5      	b.n	156e4 <z_impl_net_addr_ntop+0x194>
   15718:	3b9aca00 	.word	0x3b9aca00

0001571c <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   1571c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   15720:	680d      	ldr	r5, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   15722:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   15726:	4b3b      	ldr	r3, [pc, #236]	; (15814 <connect_request_encode+0xf8>)
   15728:	4a3b      	ldr	r2, [pc, #236]	; (15818 <connect_request_encode+0xfc>)
{
   1572a:	4607      	mov	r7, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   1572c:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   15730:	3505      	adds	r5, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   15732:	2804      	cmp	r0, #4
   15734:	bf0c      	ite	eq
   15736:	4610      	moveq	r0, r2
   15738:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1573a:	600d      	str	r5, [r1, #0]
{
   1573c:	4688      	mov	r8, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1573e:	f017 fdc8 	bl	2d2d2 <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   15742:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (err_code != 0) {
   15746:	4603      	mov	r3, r0
   15748:	b938      	cbnz	r0, 1575a <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1574a:	e9d8 2000 	ldrd	r2, r0, [r8]
   1574e:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   15750:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   15754:	d104      	bne.n	15760 <connect_request_encode+0x44>
		return -ENOMEM;
   15756:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   1575a:	4618      	mov	r0, r3
   1575c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   15760:	1c50      	adds	r0, r2, #1
   15762:	f8c8 0000 	str.w	r0, [r8]
   15766:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   15768:	e9d8 6200 	ldrd	r6, r2, [r8]
   1576c:	4296      	cmp	r6, r2
   1576e:	d0f2      	beq.n	15756 <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   15770:	1c72      	adds	r2, r6, #1
   15772:	f8c8 2000 	str.w	r2, [r8]
   15776:	7033      	strb	r3, [r6, #0]
	err_code = pack_uint16(client->keepalive, buf);
   15778:	4641      	mov	r1, r8
   1577a:	f8b7 005c 	ldrh.w	r0, [r7, #92]	; 0x5c
   1577e:	f017 fd96 	bl	2d2ae <pack_uint16>
	if (err_code != 0) {
   15782:	4603      	mov	r3, r0
   15784:	2800      	cmp	r0, #0
   15786:	d1e8      	bne.n	1575a <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   15788:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1578c:	f017 fda1 	bl	2d2d2 <pack_utf8_str>
	if (err_code != 0) {
   15790:	4603      	mov	r3, r0
   15792:	2800      	cmp	r0, #0
   15794:	d1e1      	bne.n	1575a <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   15796:	6c38      	ldr	r0, [r7, #64]	; 0x40
	uint8_t connect_flags = client->clean_session << 1;
   15798:	0064      	lsls	r4, r4, #1
	if (client->will_topic != NULL) {
   1579a:	b1d8      	cbz	r0, 157d4 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   1579c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   157a0:	f044 0404 	orr.w	r4, r4, #4
		connect_flags |= client->will_retain << 5;
   157a4:	f003 0301 	and.w	r3, r3, #1
   157a8:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   157ac:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   157ae:	4641      	mov	r1, r8
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   157b0:	00db      	lsls	r3, r3, #3
   157b2:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   157b6:	431c      	orrs	r4, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   157b8:	f017 fd8b 	bl	2d2d2 <pack_utf8_str>
		if (err_code != 0) {
   157bc:	4603      	mov	r3, r0
   157be:	2800      	cmp	r0, #0
   157c0:	d1cb      	bne.n	1575a <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   157c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
			err_code = pack_utf8_str(client->will_message, buf);
   157c4:	4641      	mov	r1, r8
		if (client->will_message != NULL) {
   157c6:	b30b      	cbz	r3, 1580c <connect_request_encode+0xf0>
			err_code = pack_utf8_str(client->will_message, buf);
   157c8:	4618      	mov	r0, r3
   157ca:	f017 fd82 	bl	2d2d2 <pack_utf8_str>
			if (err_code != 0) {
   157ce:	4603      	mov	r3, r0
   157d0:	2800      	cmp	r0, #0
   157d2:	d1c2      	bne.n	1575a <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   157d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   157d6:	b138      	cbz	r0, 157e8 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   157d8:	4641      	mov	r1, r8
   157da:	f017 fd7a 	bl	2d2d2 <pack_utf8_str>
		if (err_code != 0) {
   157de:	4603      	mov	r3, r0
   157e0:	2800      	cmp	r0, #0
   157e2:	d1ba      	bne.n	1575a <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   157e4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	if (client->password != NULL) {
   157e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   157ea:	b138      	cbz	r0, 157fc <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   157ec:	4641      	mov	r1, r8
   157ee:	f017 fd70 	bl	2d2d2 <pack_utf8_str>
		if (err_code != 0) {
   157f2:	4603      	mov	r3, r0
   157f4:	2800      	cmp	r0, #0
   157f6:	d1b0      	bne.n	1575a <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   157f8:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	*connect_flags_pos = connect_flags;
   157fc:	7034      	strb	r4, [r6, #0]
	return mqtt_encode_fixed_header(message_type, start, buf);
   157fe:	4642      	mov	r2, r8
   15800:	4629      	mov	r1, r5
}
   15802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   15806:	2010      	movs	r0, #16
   15808:	f017 bd7e 	b.w	2d308 <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   1580c:	f017 fd4f 	bl	2d2ae <pack_uint16>
   15810:	e7dd      	b.n	157ce <connect_request_encode+0xb2>
   15812:	bf00      	nop
   15814:	0002f2d0 	.word	0x0002f2d0
   15818:	0002f2d8 	.word	0x0002f2d8

0001581c <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   1581c:	e9d0 2300 	ldrd	r2, r3, [r0]
   15820:	1a9b      	subs	r3, r3, r2
   15822:	2b01      	cmp	r3, #1
   15824:	bf81      	itttt	hi
   15826:	4b05      	ldrhi	r3, [pc, #20]	; (1583c <disconnect_encode+0x20>)
   15828:	881b      	ldrhhi	r3, [r3, #0]
   1582a:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   1582c:	6803      	ldrhi	r3, [r0, #0]
   1582e:	bf83      	ittte	hi
   15830:	3302      	addhi	r3, #2
   15832:	6043      	strhi	r3, [r0, #4]

	return 0;
   15834:	2000      	movhi	r0, #0
		return -ENOMEM;
   15836:	f06f 000b 	mvnls.w	r0, #11
}
   1583a:	4770      	bx	lr
   1583c:	0003141d 	.word	0x0003141d

00015840 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   15840:	e9d0 2300 	ldrd	r2, r3, [r0]
   15844:	1a9b      	subs	r3, r3, r2
   15846:	2b01      	cmp	r3, #1
   15848:	bf81      	itttt	hi
   1584a:	4b05      	ldrhi	r3, [pc, #20]	; (15860 <ping_request_encode+0x20>)
   1584c:	881b      	ldrhhi	r3, [r3, #0]
   1584e:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   15850:	6803      	ldrhi	r3, [r0, #0]
   15852:	bf83      	ittte	hi
   15854:	3302      	addhi	r3, #2
   15856:	6043      	strhi	r3, [r0, #4]

	return 0;
   15858:	2000      	movhi	r0, #0
		return -ENOMEM;
   1585a:	f06f 000b 	mvnls.w	r0, #11
}
   1585e:	4770      	bx	lr
   15860:	0003141f 	.word	0x0003141f

00015864 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   15864:	2314      	movs	r3, #20
   15866:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   1586a:	4353      	muls	r3, r2
   1586c:	4a01      	ldr	r2, [pc, #4]	; (15874 <mqtt_transport_connect+0x10>)
   1586e:	58d3      	ldr	r3, [r2, r3]
   15870:	4718      	bx	r3
   15872:	bf00      	nop
   15874:	0002f2e0 	.word	0x0002f2e0

00015878 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   15878:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1587a:	2514      	movs	r5, #20
   1587c:	4c03      	ldr	r4, [pc, #12]	; (1588c <mqtt_transport_write+0x14>)
   1587e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   15882:	fb05 4303 	mla	r3, r5, r3, r4
							  datalen);
}
   15886:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   15888:	685b      	ldr	r3, [r3, #4]
   1588a:	4718      	bx	r3
   1588c:	0002f2e0 	.word	0x0002f2e0

00015890 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   15890:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   15892:	2414      	movs	r4, #20
   15894:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   15898:	4a03      	ldr	r2, [pc, #12]	; (158a8 <mqtt_transport_write_msg+0x18>)
   1589a:	fb04 2303 	mla	r3, r4, r3, r2
}
   1589e:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   158a2:	689b      	ldr	r3, [r3, #8]
   158a4:	4718      	bx	r3
   158a6:	bf00      	nop
   158a8:	0002f2e0 	.word	0x0002f2e0

000158ac <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   158ac:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   158ae:	2614      	movs	r6, #20
   158b0:	4d04      	ldr	r5, [pc, #16]	; (158c4 <mqtt_transport_read+0x18>)
   158b2:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   158b6:	fb06 5404 	mla	r4, r6, r4, r5
   158ba:	68e4      	ldr	r4, [r4, #12]
   158bc:	46a4      	mov	ip, r4
							 shall_block);
}
   158be:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   158c0:	4760      	bx	ip
   158c2:	bf00      	nop
   158c4:	0002f2e0 	.word	0x0002f2e0

000158c8 <mqtt_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   158c8:	68c2      	ldr	r2, [r0, #12]
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   158ca:	b510      	push	{r4, lr}
   158cc:	b142      	cbz	r2, 158e0 <mqtt_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   158ce:	4b0f      	ldr	r3, [pc, #60]	; (1590c <mqtt_mutex_unlock+0x44>)
   158d0:	6882      	ldr	r2, [r0, #8]
   158d2:	689b      	ldr	r3, [r3, #8]
   158d4:	429a      	cmp	r2, r3
   158d6:	d115      	bne.n	15904 <mqtt_mutex_unlock+0x3c>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
	(void)ret;
}
   158d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_unlock(mutex);
   158dc:	f00d bc72 	b.w	231c4 <z_impl_k_mutex_unlock>
		return -EINVAL;
   158e0:	f06f 0415 	mvn.w	r4, #21
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   158e4:	2343      	movs	r3, #67	; 0x43
   158e6:	4a0a      	ldr	r2, [pc, #40]	; (15910 <mqtt_mutex_unlock+0x48>)
   158e8:	490a      	ldr	r1, [pc, #40]	; (15914 <mqtt_mutex_unlock+0x4c>)
   158ea:	480b      	ldr	r0, [pc, #44]	; (15918 <mqtt_mutex_unlock+0x50>)
   158ec:	f016 fda1 	bl	2c432 <printk>
   158f0:	4621      	mov	r1, r4
   158f2:	480a      	ldr	r0, [pc, #40]	; (1591c <mqtt_mutex_unlock+0x54>)
   158f4:	f016 fd9d 	bl	2c432 <printk>
}
   158f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   158fc:	2143      	movs	r1, #67	; 0x43
   158fe:	4804      	ldr	r0, [pc, #16]	; (15910 <mqtt_mutex_unlock+0x48>)
   15900:	f016 bfb4 	b.w	2c86c <assert_post_action>
		return -EPERM;
   15904:	f04f 34ff 	mov.w	r4, #4294967295
   15908:	e7ec      	b.n	158e4 <mqtt_mutex_unlock+0x1c>
   1590a:	bf00      	nop
   1590c:	20021de0 	.word	0x20021de0
   15910:	0003142d 	.word	0x0003142d
   15914:	0003145e 	.word	0x0003145e
   15918:	00030166 	.word	0x00030166
   1591c:	00031467 	.word	0x00031467

00015920 <mqtt_mutex_lock>:
{
   15920:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   15922:	f04f 32ff 	mov.w	r2, #4294967295
   15926:	f04f 33ff 	mov.w	r3, #4294967295
   1592a:	f00d fb51 	bl	22fd0 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   1592e:	4604      	mov	r4, r0
   15930:	b178      	cbz	r0, 15952 <mqtt_mutex_lock+0x32>
   15932:	2339      	movs	r3, #57	; 0x39
   15934:	4a07      	ldr	r2, [pc, #28]	; (15954 <mqtt_mutex_lock+0x34>)
   15936:	4908      	ldr	r1, [pc, #32]	; (15958 <mqtt_mutex_lock+0x38>)
   15938:	4808      	ldr	r0, [pc, #32]	; (1595c <mqtt_mutex_lock+0x3c>)
   1593a:	f016 fd7a 	bl	2c432 <printk>
   1593e:	4621      	mov	r1, r4
   15940:	4807      	ldr	r0, [pc, #28]	; (15960 <mqtt_mutex_lock+0x40>)
   15942:	f016 fd76 	bl	2c432 <printk>
}
   15946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   1594a:	2139      	movs	r1, #57	; 0x39
   1594c:	4801      	ldr	r0, [pc, #4]	; (15954 <mqtt_mutex_lock+0x34>)
   1594e:	f016 bf8d 	b.w	2c86c <assert_post_action>
}
   15952:	bd10      	pop	{r4, pc}
   15954:	0003142d 	.word	0x0003142d
   15958:	0003145e 	.word	0x0003145e
   1595c:	00030166 	.word	0x00030166
   15960:	00031489 	.word	0x00031489

00015964 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   15964:	b570      	push	{r4, r5, r6, lr}
   15966:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   15968:	460c      	mov	r4, r1
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1596a:	68c5      	ldr	r5, [r0, #12]
   1596c:	b961      	cbnz	r1, 15988 <gpio_nrfx_manage_callback+0x24>
   1596e:	4922      	ldr	r1, [pc, #136]	; (159f8 <gpio_nrfx_manage_callback+0x94>)
   15970:	2324      	movs	r3, #36	; 0x24
   15972:	4a22      	ldr	r2, [pc, #136]	; (159fc <gpio_nrfx_manage_callback+0x98>)
   15974:	4822      	ldr	r0, [pc, #136]	; (15a00 <gpio_nrfx_manage_callback+0x9c>)
   15976:	f016 fd5c 	bl	2c432 <printk>
   1597a:	4822      	ldr	r0, [pc, #136]	; (15a04 <gpio_nrfx_manage_callback+0xa0>)
   1597c:	f016 fd59 	bl	2c432 <printk>
   15980:	2124      	movs	r1, #36	; 0x24
   15982:	481e      	ldr	r0, [pc, #120]	; (159fc <gpio_nrfx_manage_callback+0x98>)
   15984:	f016 ff72 	bl	2c86c <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   15988:	6863      	ldr	r3, [r4, #4]
   1598a:	b963      	cbnz	r3, 159a6 <gpio_nrfx_manage_callback+0x42>
   1598c:	491e      	ldr	r1, [pc, #120]	; (15a08 <gpio_nrfx_manage_callback+0xa4>)
   1598e:	2325      	movs	r3, #37	; 0x25
   15990:	4a1a      	ldr	r2, [pc, #104]	; (159fc <gpio_nrfx_manage_callback+0x98>)
   15992:	481b      	ldr	r0, [pc, #108]	; (15a00 <gpio_nrfx_manage_callback+0x9c>)
   15994:	f016 fd4d 	bl	2c432 <printk>
   15998:	481c      	ldr	r0, [pc, #112]	; (15a0c <gpio_nrfx_manage_callback+0xa8>)
   1599a:	f016 fd4a 	bl	2c432 <printk>
   1599e:	2125      	movs	r1, #37	; 0x25
   159a0:	4816      	ldr	r0, [pc, #88]	; (159fc <gpio_nrfx_manage_callback+0x98>)
   159a2:	f016 ff63 	bl	2c86c <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   159a6:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   159a8:	b15b      	cbz	r3, 159c2 <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   159aa:	2200      	movs	r2, #0
   159ac:	429c      	cmp	r4, r3
   159ae:	d113      	bne.n	159d8 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   159b0:	6823      	ldr	r3, [r4, #0]
   159b2:	b95a      	cbnz	r2, 159cc <gpio_nrfx_manage_callback+0x68>
   159b4:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   159b6:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   159b8:	4294      	cmp	r4, r2
   159ba:	d100      	bne.n	159be <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   159bc:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   159be:	2300      	movs	r3, #0
   159c0:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   159c2:	b976      	cbnz	r6, 159e2 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   159c4:	2000      	movs	r0, #0
				     callback, set);
}
   159c6:	bd70      	pop	{r4, r5, r6, pc}
   159c8:	460b      	mov	r3, r1
   159ca:	e7ef      	b.n	159ac <gpio_nrfx_manage_callback+0x48>
   159cc:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   159ce:	68ab      	ldr	r3, [r5, #8]
   159d0:	429c      	cmp	r4, r3
	list->tail = node;
   159d2:	bf08      	it	eq
   159d4:	60aa      	streq	r2, [r5, #8]
}
   159d6:	e7f2      	b.n	159be <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   159d8:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   159da:	461a      	mov	r2, r3
   159dc:	2900      	cmp	r1, #0
   159de:	d1f3      	bne.n	159c8 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   159e0:	b13e      	cbz	r6, 159f2 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   159e2:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   159e4:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   159e6:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   159e8:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   159ea:	2800      	cmp	r0, #0
   159ec:	d1ea      	bne.n	159c4 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   159ee:	60ac      	str	r4, [r5, #8]
}
   159f0:	e7e9      	b.n	159c6 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   159f2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   159f6:	e7e6      	b.n	159c6 <gpio_nrfx_manage_callback+0x62>
   159f8:	00031a70 	.word	0x00031a70
   159fc:	000314a9 	.word	0x000314a9
   15a00:	00030166 	.word	0x00030166
   15a04:	000314d6 	.word	0x000314d6
   15a08:	000314e5 	.word	0x000314e5
   15a0c:	000314f7 	.word	0x000314f7

00015a10 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15a10:	6803      	ldr	r3, [r0, #0]
{
   15a12:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   15a14:	095a      	lsrs	r2, r3, #5
   15a16:	bf0c      	ite	eq
   15a18:	f04f 32ff 	moveq.w	r2, #4294967295
   15a1c:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   15a1e:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
   15a22:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15a26:	07db      	lsls	r3, r3, #31
{
   15a28:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15a2a:	d40b      	bmi.n	15a44 <nrf_gpio_pin_port_decode+0x34>
   15a2c:	490f      	ldr	r1, [pc, #60]	; (15a6c <nrf_gpio_pin_port_decode+0x5c>)
   15a2e:	4810      	ldr	r0, [pc, #64]	; (15a70 <nrf_gpio_pin_port_decode+0x60>)
   15a30:	f240 231a 	movw	r3, #538	; 0x21a
   15a34:	4a0f      	ldr	r2, [pc, #60]	; (15a74 <nrf_gpio_pin_port_decode+0x64>)
   15a36:	f016 fcfc 	bl	2c432 <printk>
   15a3a:	f240 211a 	movw	r1, #538	; 0x21a
   15a3e:	480d      	ldr	r0, [pc, #52]	; (15a74 <nrf_gpio_pin_port_decode+0x64>)
   15a40:	f016 ff14 	bl	2c86c <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   15a44:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   15a46:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15a4a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   15a4c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15a4e:	d00b      	beq.n	15a68 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   15a50:	4909      	ldr	r1, [pc, #36]	; (15a78 <nrf_gpio_pin_port_decode+0x68>)
   15a52:	4807      	ldr	r0, [pc, #28]	; (15a70 <nrf_gpio_pin_port_decode+0x60>)
   15a54:	f240 231f 	movw	r3, #543	; 0x21f
   15a58:	4a06      	ldr	r2, [pc, #24]	; (15a74 <nrf_gpio_pin_port_decode+0x64>)
   15a5a:	f016 fcea 	bl	2c432 <printk>
   15a5e:	f240 211f 	movw	r1, #543	; 0x21f
   15a62:	4804      	ldr	r0, [pc, #16]	; (15a74 <nrf_gpio_pin_port_decode+0x64>)
   15a64:	f016 ff02 	bl	2c86c <assert_post_action>
}
   15a68:	4804      	ldr	r0, [pc, #16]	; (15a7c <nrf_gpio_pin_port_decode+0x6c>)
   15a6a:	bd10      	pop	{r4, pc}
   15a6c:	00031541 	.word	0x00031541
   15a70:	00030166 	.word	0x00030166
   15a74:	0003150e 	.word	0x0003150e
   15a78:	00032fcf 	.word	0x00032fcf
   15a7c:	40842500 	.word	0x40842500

00015a80 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   15a80:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   15a82:	4b09      	ldr	r3, [pc, #36]	; (15aa8 <gpio_nrfx_init+0x28>)
   15a84:	781a      	ldrb	r2, [r3, #0]
   15a86:	b96a      	cbnz	r2, 15aa4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   15a88:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15a8a:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   15a8c:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15a8e:	2105      	movs	r1, #5
   15a90:	f7fe fdc4 	bl	1461c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   15a94:	2031      	movs	r0, #49	; 0x31
   15a96:	f7fe fda3 	bl	145e0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   15a9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   15a9e:	4b03      	ldr	r3, [pc, #12]	; (15aac <gpio_nrfx_init+0x2c>)
   15aa0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   15aa4:	2000      	movs	r0, #0
   15aa6:	bd08      	pop	{r3, pc}
   15aa8:	2002473b 	.word	0x2002473b
   15aac:	40031000 	.word	0x40031000

00015ab0 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15ab0:	4b2e      	ldr	r3, [pc, #184]	; (15b6c <gpio_nrfx_config+0xbc>)
{
   15ab2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15ab4:	4c2e      	ldr	r4, [pc, #184]	; (15b70 <gpio_nrfx_config+0xc0>)
   15ab6:	4013      	ands	r3, r2
   15ab8:	42a3      	cmp	r3, r4
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15aba:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15abc:	d044      	beq.n	15b48 <gpio_nrfx_config+0x98>
   15abe:	d80e      	bhi.n	15ade <gpio_nrfx_config+0x2e>
   15ac0:	2b06      	cmp	r3, #6
   15ac2:	d043      	beq.n	15b4c <gpio_nrfx_config+0x9c>
   15ac4:	d806      	bhi.n	15ad4 <gpio_nrfx_config+0x24>
   15ac6:	2b00      	cmp	r3, #0
   15ac8:	d040      	beq.n	15b4c <gpio_nrfx_config+0x9c>
   15aca:	2b02      	cmp	r3, #2
   15acc:	d040      	beq.n	15b50 <gpio_nrfx_config+0xa0>
   15ace:	f06f 0015 	mvn.w	r0, #21
   15ad2:	e037      	b.n	15b44 <gpio_nrfx_config+0x94>
   15ad4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   15ad8:	d1f9      	bne.n	15ace <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   15ada:	2401      	movs	r4, #1
   15adc:	e009      	b.n	15af2 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15ade:	4c25      	ldr	r4, [pc, #148]	; (15b74 <gpio_nrfx_config+0xc4>)
   15ae0:	42a3      	cmp	r3, r4
   15ae2:	d037      	beq.n	15b54 <gpio_nrfx_config+0xa4>
   15ae4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   15ae8:	d036      	beq.n	15b58 <gpio_nrfx_config+0xa8>
   15aea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   15aee:	d1ee      	bne.n	15ace <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   15af0:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   15af2:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   15af4:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   15af8:	bf4c      	ite	mi
   15afa:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   15afc:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   15b00:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   15b04:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   15b06:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   15b0a:	d507      	bpl.n	15b1c <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   15b0c:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15b0e:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   15b12:	d523      	bpl.n	15b5c <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   15b14:	2301      	movs	r3, #1
   15b16:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   15b18:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   15b1c:	7a03      	ldrb	r3, [r0, #8]
   15b1e:	f001 011f 	and.w	r1, r1, #31
   15b22:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15b26:	a801      	add	r0, sp, #4
   15b28:	9101      	str	r1, [sp, #4]
   15b2a:	f7ff ff71 	bl	15a10 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15b2e:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   15b30:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   15b34:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   15b38:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15b3c:	3280      	adds	r2, #128	; 0x80
   15b3e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   15b42:	2000      	movs	r0, #0
}
   15b44:	b003      	add	sp, #12
   15b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   15b48:	2407      	movs	r4, #7
   15b4a:	e7d2      	b.n	15af2 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15b4c:	461c      	mov	r4, r3
   15b4e:	e7d0      	b.n	15af2 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   15b50:	2404      	movs	r4, #4
   15b52:	e7ce      	b.n	15af2 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   15b54:	2405      	movs	r4, #5
   15b56:	e7cc      	b.n	15af2 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   15b58:	2403      	movs	r4, #3
   15b5a:	e7ca      	b.n	15af2 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   15b5c:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   15b5e:	bf42      	ittt	mi
   15b60:	2301      	movmi	r3, #1
   15b62:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   15b64:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   15b68:	e7d8      	b.n	15b1c <gpio_nrfx_config+0x6c>
   15b6a:	bf00      	nop
   15b6c:	00f00006 	.word	0x00f00006
   15b70:	00100006 	.word	0x00100006
   15b74:	00400002 	.word	0x00400002

00015b78 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15b78:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   15b7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15b80:	4606      	mov	r6, r0
   15b82:	460d      	mov	r5, r1
   15b84:	4690      	mov	r8, r2
   15b86:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   15b88:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   15b8a:	f001 071f 	and.w	r7, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15b8e:	f040 80bc 	bne.w	15d0a <gpio_nrfx_pin_interrupt_configure+0x192>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15b92:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15b94:	a801      	add	r0, sp, #4
   15b96:	7a1b      	ldrb	r3, [r3, #8]
   15b98:	ea47 1343 	orr.w	r3, r7, r3, lsl #5
   15b9c:	9301      	str	r3, [sp, #4]
   15b9e:	f7ff ff37 	bl	15a10 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   15ba2:	9b01      	ldr	r3, [sp, #4]
   15ba4:	3380      	adds	r3, #128	; 0x80
   15ba6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15baa:	07d8      	lsls	r0, r3, #31
   15bac:	f100 80d2 	bmi.w	15d54 <gpio_nrfx_pin_interrupt_configure+0x1dc>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15bb0:	2101      	movs	r1, #1
   15bb2:	68e3      	ldr	r3, [r4, #12]
   15bb4:	40a9      	lsls	r1, r5
   15bb6:	4319      	orrs	r1, r3
   15bb8:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   15bba:	2101      	movs	r1, #1
   15bbc:	6963      	ldr	r3, [r4, #20]
   15bbe:	40a9      	lsls	r1, r5
   15bc0:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   15bc4:	bf0c      	ite	eq
   15bc6:	430b      	orreq	r3, r1
   15bc8:	438b      	bicne	r3, r1
   15bca:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   15bcc:	69a3      	ldr	r3, [r4, #24]
   15bce:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   15bd2:	bf0c      	ite	eq
   15bd4:	430b      	orreq	r3, r1
   15bd6:	438b      	bicne	r3, r1
   15bd8:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15bda:	6923      	ldr	r3, [r4, #16]
   15bdc:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   15be0:	bf0c      	ite	eq
   15be2:	4319      	orreq	r1, r3
   15be4:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15be8:	6873      	ldr	r3, [r6, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15bea:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15bec:	7a18      	ldrb	r0, [r3, #8]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15bee:	2300      	movs	r3, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   15bf0:	f8d6 800c 	ldr.w	r8, [r6, #12]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   15bf4:	4e59      	ldr	r6, [pc, #356]	; (15d5c <gpio_nrfx_pin_interrupt_configure+0x1e4>)
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15bf6:	ea47 1740 	orr.w	r7, r7, r0, lsl #5
   15bfa:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   15bfe:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15c00:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   15c04:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   15c08:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   15c0c:	428f      	cmp	r7, r1
   15c0e:	f040 8087 	bne.w	15d20 <gpio_nrfx_pin_interrupt_configure+0x1a8>
		    && (intenset & BIT(i))) {
   15c12:	fa22 f103 	lsr.w	r1, r2, r3
   15c16:	07c9      	lsls	r1, r1, #31
   15c18:	f140 8082 	bpl.w	15d20 <gpio_nrfx_pin_interrupt_configure+0x1a8>
			(void)atomic_and(mask, ~BIT(i));
   15c1c:	2201      	movs	r2, #1
   15c1e:	409a      	lsls	r2, r3
   15c20:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15c22:	494f      	ldr	r1, [pc, #316]	; (15d60 <gpio_nrfx_pin_interrupt_configure+0x1e8>)
   15c24:	e8d1 4fef 	ldaex	r4, [r1]
   15c28:	4004      	ands	r4, r0
   15c2a:	e8c1 4fec 	stlex	ip, r4, [r1]
   15c2e:	f1bc 0f00 	cmp.w	ip, #0
   15c32:	d1f7      	bne.n	15c24 <gpio_nrfx_pin_interrupt_configure+0xac>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   15c34:	009b      	lsls	r3, r3, #2
   15c36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15c3a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   15c3e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   15c42:	f021 0101 	bic.w	r1, r1, #1
   15c46:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   15c4a:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   15c4e:	2100      	movs	r1, #0
   15c50:	4638      	mov	r0, r7
   15c52:	f017 ff4c 	bl	2daee <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   15c56:	f8d8 300c 	ldr.w	r3, [r8, #12]
   15c5a:	40eb      	lsrs	r3, r5
   15c5c:	f013 0301 	ands.w	r3, r3, #1
   15c60:	d051      	beq.n	15d06 <gpio_nrfx_pin_interrupt_configure+0x18e>
		if (data->trig_edge & BIT(pin)) {
   15c62:	f8d8 3014 	ldr.w	r3, [r8, #20]
   15c66:	40eb      	lsrs	r3, r5
   15c68:	f013 0401 	ands.w	r4, r3, #1
   15c6c:	d065      	beq.n	15d3a <gpio_nrfx_pin_interrupt_configure+0x1c2>
			if (data->double_edge & BIT(pin)) {
   15c6e:	f8d8 3018 	ldr.w	r3, [r8, #24]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   15c72:	2200      	movs	r2, #0
			if (data->double_edge & BIT(pin)) {
   15c74:	40eb      	lsrs	r3, r5
   15c76:	07db      	lsls	r3, r3, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   15c78:	bf48      	it	mi
   15c7a:	2503      	movmi	r5, #3
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   15c7c:	f04f 0c01 	mov.w	ip, #1
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   15c80:	bf5f      	itttt	pl
   15c82:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
   15c86:	fa21 f505 	lsrpl.w	r5, r1, r5
   15c8a:	f005 0501 	andpl.w	r5, r5, #1
   15c8e:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15c92:	4933      	ldr	r1, [pc, #204]	; (15d60 <gpio_nrfx_pin_interrupt_configure+0x1e8>)
   15c94:	bf58      	it	pl
   15c96:	b2ed      	uxtbpl	r5, r5
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   15c98:	fa0c f402 	lsl.w	r4, ip, r2
   15c9c:	e8d1 0fef 	ldaex	r0, [r1]
   15ca0:	ea40 0304 	orr.w	r3, r0, r4
   15ca4:	e8c1 3fee 	stlex	lr, r3, [r1]
   15ca8:	f1be 0f00 	cmp.w	lr, #0
   15cac:	d1f6      	bne.n	15c9c <gpio_nrfx_pin_interrupt_configure+0x124>
		if ((prev & BIT(channel)) == 0) {
   15cae:	40d0      	lsrs	r0, r2
   15cb0:	f010 0301 	ands.w	r3, r0, #1
   15cb4:	d139      	bne.n	15d2a <gpio_nrfx_pin_interrupt_configure+0x1b2>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15cb6:	0091      	lsls	r1, r2, #2
   15cb8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   15cbc:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   15cc0:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
			nrf_gpiote_event_t evt =
   15cc4:	3240      	adds	r2, #64	; 0x40
   15cc6:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   15cca:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   15cce:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15cd2:	023f      	lsls	r7, r7, #8
   15cd4:	0092      	lsls	r2, r2, #2
   15cd6:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   15cda:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   15cde:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15ce0:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
    return ((uint32_t)p_reg + event);
   15ce4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   15ce8:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15cec:	4307      	orrs	r7, r0
   15cee:	f8c1 7510 	str.w	r7, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15cf2:	6013      	str	r3, [r2, #0]
   15cf4:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   15cf6:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   15cfa:	f042 0201 	orr.w	r2, r2, #1
   15cfe:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   15d02:	f8c6 4304 	str.w	r4, [r6, #772]	; 0x304
	int res = 0;
   15d06:	4618      	mov	r0, r3
   15d08:	e014      	b.n	15d34 <gpio_nrfx_pin_interrupt_configure+0x1bc>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15d0a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   15d0e:	f47f af4f 	bne.w	15bb0 <gpio_nrfx_pin_interrupt_configure+0x38>
   15d12:	2101      	movs	r1, #1
   15d14:	fa01 f305 	lsl.w	r3, r1, r5
   15d18:	68e1      	ldr	r1, [r4, #12]
   15d1a:	ea21 0103 	bic.w	r1, r1, r3
   15d1e:	e74b      	b.n	15bb8 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15d20:	3301      	adds	r3, #1
   15d22:	2b08      	cmp	r3, #8
   15d24:	f47f af6c 	bne.w	15c00 <gpio_nrfx_pin_interrupt_configure+0x88>
   15d28:	e791      	b.n	15c4e <gpio_nrfx_pin_interrupt_configure+0xd6>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   15d2a:	3201      	adds	r2, #1
   15d2c:	2a08      	cmp	r2, #8
   15d2e:	d1b3      	bne.n	15c98 <gpio_nrfx_pin_interrupt_configure+0x120>
	return -ENODEV;
   15d30:	f06f 0012 	mvn.w	r0, #18
}
   15d34:	b003      	add	sp, #12
   15d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15d3a:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15d3e:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15d40:	40e9      	lsrs	r1, r5
   15d42:	f001 0101 	and.w	r1, r1, #1
   15d46:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15d4a:	b2c9      	uxtb	r1, r1
   15d4c:	f017 fecf 	bl	2daee <nrf_gpio_cfg_sense_set>
	int res = 0;
   15d50:	4620      	mov	r0, r4
   15d52:	e7ef      	b.n	15d34 <gpio_nrfx_pin_interrupt_configure+0x1bc>
		return -ENOTSUP;
   15d54:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15d58:	e7ec      	b.n	15d34 <gpio_nrfx_pin_interrupt_configure+0x1bc>
   15d5a:	bf00      	nop
   15d5c:	40031000 	.word	0x40031000
   15d60:	20021614 	.word	0x20021614

00015d64 <gpiote_event_handler>:
{
   15d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15d68:	4e4b      	ldr	r6, [pc, #300]	; (15e98 <gpiote_event_handler+0x134>)
   15d6a:	6837      	ldr	r7, [r6, #0]
	if (port_event) {
   15d6c:	2f00      	cmp	r7, #0
   15d6e:	d050      	beq.n	15e12 <gpiote_event_handler+0xae>
	uint32_t bit = 1U << pin;
   15d70:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
   15d74:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
   15d78:	4b48      	ldr	r3, [pc, #288]	; (15e9c <gpiote_event_handler+0x138>)
   15d7a:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   15d7c:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   15d80:	430a      	orrs	r2, r1
   15d82:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
   15d86:	4a46      	ldr	r2, [pc, #280]	; (15ea0 <gpiote_event_handler+0x13c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   15d88:	691b      	ldr	r3, [r3, #16]
   15d8a:	6914      	ldr	r4, [r2, #16]
   15d8c:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   15d8e:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   15d92:	bb7d      	cbnz	r5, 15df4 <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15d94:	6035      	str	r5, [r6, #0]
   15d96:	6833      	ldr	r3, [r6, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   15d98:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   15d9a:	2501      	movs	r5, #1
   15d9c:	461e      	mov	r6, r3
    return p_reg->INTENSET & mask;
   15d9e:	4841      	ldr	r0, [pc, #260]	; (15ea4 <gpiote_event_handler+0x140>)
   15da0:	4941      	ldr	r1, [pc, #260]	; (15ea8 <gpiote_event_handler+0x144>)
   15da2:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   15da6:	fa05 fc03 	lsl.w	ip, r5, r3
   15daa:	ea1c 0f02 	tst.w	ip, r2
   15dae:	d00f      	beq.n	15dd0 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15db0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   15db4:	b162      	cbz	r2, 15dd0 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15db6:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   15dba:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15dbe:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15dc2:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   15dc6:	fa05 f202 	lsl.w	r2, r5, r2
   15dca:	4314      	orrs	r4, r2
   15dcc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15dd0:	3301      	adds	r3, #1
   15dd2:	2b08      	cmp	r3, #8
   15dd4:	d1e5      	bne.n	15da2 <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   15dd6:	b9f4      	cbnz	r4, 15e16 <gpiote_event_handler+0xb2>
	if (port_event) {
   15dd8:	b157      	cbz	r7, 15df0 <gpiote_event_handler+0x8c>
	uint32_t bit = 1U << pin;
   15dda:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   15ddc:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   15dde:	4d2f      	ldr	r5, [pc, #188]	; (15e9c <gpiote_event_handler+0x138>)
   15de0:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   15de2:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   15de6:	430a      	orrs	r2, r1
   15de8:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   15dec:	2c00      	cmp	r4, #0
   15dee:	d141      	bne.n	15e74 <gpiote_event_handler+0x110>
}
   15df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (level_pins & bit) {
   15df4:	ea15 0f08 	tst.w	r5, r8
   15df8:	d006      	beq.n	15e08 <gpiote_event_handler+0xa4>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   15dfa:	2100      	movs	r1, #0
   15dfc:	f009 001f 	and.w	r0, r9, #31
   15e00:	f017 fe75 	bl	2daee <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   15e04:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   15e08:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   15e0c:	ea4f 0848 	mov.w	r8, r8, lsl #1
   15e10:	e7bf      	b.n	15d92 <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   15e12:	463c      	mov	r4, r7
   15e14:	e7c0      	b.n	15d98 <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15e16:	4b21      	ldr	r3, [pc, #132]	; (15e9c <gpiote_event_handler+0x138>)
   15e18:	685d      	ldr	r5, [r3, #4]
   15e1a:	2d00      	cmp	r5, #0
   15e1c:	d0dc      	beq.n	15dd8 <gpiote_event_handler+0x74>
	return node->next;
   15e1e:	682e      	ldr	r6, [r5, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   15e20:	f8df 9090 	ldr.w	r9, [pc, #144]	; 15eb4 <gpiote_event_handler+0x150>
   15e24:	2e00      	cmp	r6, #0
   15e26:	bf38      	it	cc
   15e28:	2600      	movcc	r6, #0
			__ASSERT(cb->handler, "No callback handler!");
   15e2a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 15eb8 <gpiote_event_handler+0x154>
   15e2e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 15ebc <gpiote_event_handler+0x158>
		if (cb->pin_mask & pins) {
   15e32:	68ab      	ldr	r3, [r5, #8]
   15e34:	421c      	tst	r4, r3
   15e36:	d014      	beq.n	15e62 <gpiote_event_handler+0xfe>
			__ASSERT(cb->handler, "No callback handler!");
   15e38:	686b      	ldr	r3, [r5, #4]
   15e3a:	b963      	cbnz	r3, 15e56 <gpiote_event_handler+0xf2>
   15e3c:	4651      	mov	r1, sl
   15e3e:	2345      	movs	r3, #69	; 0x45
   15e40:	4642      	mov	r2, r8
   15e42:	481a      	ldr	r0, [pc, #104]	; (15eac <gpiote_event_handler+0x148>)
   15e44:	f016 faf5 	bl	2c432 <printk>
   15e48:	4819      	ldr	r0, [pc, #100]	; (15eb0 <gpiote_event_handler+0x14c>)
   15e4a:	f016 faf2 	bl	2c432 <printk>
   15e4e:	2145      	movs	r1, #69	; 0x45
   15e50:	4640      	mov	r0, r8
   15e52:	f016 fd0b 	bl	2c86c <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   15e56:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   15e5a:	4629      	mov	r1, r5
   15e5c:	4648      	mov	r0, r9
   15e5e:	4022      	ands	r2, r4
   15e60:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15e62:	2e00      	cmp	r6, #0
   15e64:	d0b8      	beq.n	15dd8 <gpiote_event_handler+0x74>
   15e66:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15e68:	4635      	mov	r5, r6
   15e6a:	2b00      	cmp	r3, #0
   15e6c:	bf38      	it	cc
   15e6e:	2300      	movcc	r3, #0
   15e70:	461e      	mov	r6, r3
   15e72:	e7de      	b.n	15e32 <gpiote_event_handler+0xce>
		if (level_pins & bit) {
   15e74:	4226      	tst	r6, r4
   15e76:	d00c      	beq.n	15e92 <gpiote_event_handler+0x12e>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15e78:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15e7a:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15e7e:	40f9      	lsrs	r1, r7
   15e80:	f001 0101 	and.w	r1, r1, #1
   15e84:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15e88:	b2c9      	uxtb	r1, r1
   15e8a:	f017 fe30 	bl	2daee <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   15e8e:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   15e92:	3701      	adds	r7, #1
		bit <<= 1;
   15e94:	0076      	lsls	r6, r6, #1
   15e96:	e7a9      	b.n	15dec <gpiote_event_handler+0x88>
   15e98:	4003117c 	.word	0x4003117c
   15e9c:	200215f8 	.word	0x200215f8
   15ea0:	40842500 	.word	0x40842500
   15ea4:	40031000 	.word	0x40031000
   15ea8:	40031100 	.word	0x40031100
   15eac:	00030166 	.word	0x00030166
   15eb0:	000314f7 	.word	0x000314f7
   15eb4:	20020ab0 	.word	0x20020ab0
   15eb8:	000314a9 	.word	0x000314a9
   15ebc:	00031564 	.word	0x00031564

00015ec0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   15ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   15ec2:	794b      	ldrb	r3, [r1, #5]
   15ec4:	2b01      	cmp	r3, #1
   15ec6:	d029      	beq.n	15f1c <uarte_nrfx_configure+0x5c>
   15ec8:	2b03      	cmp	r3, #3
   15eca:	d124      	bne.n	15f16 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   15ecc:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   15ece:	798b      	ldrb	r3, [r1, #6]
   15ed0:	2b03      	cmp	r3, #3
   15ed2:	d120      	bne.n	15f16 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   15ed4:	79cc      	ldrb	r4, [r1, #7]
   15ed6:	b124      	cbz	r4, 15ee2 <uarte_nrfx_configure+0x22>
   15ed8:	2c01      	cmp	r4, #1
   15eda:	d11c      	bne.n	15f16 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   15edc:	6843      	ldr	r3, [r0, #4]
   15ede:	791b      	ldrb	r3, [r3, #4]
   15ee0:	b1cb      	cbz	r3, 15f16 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   15ee2:	790a      	ldrb	r2, [r1, #4]
   15ee4:	b112      	cbz	r2, 15eec <uarte_nrfx_configure+0x2c>
   15ee6:	2a02      	cmp	r2, #2
   15ee8:	d115      	bne.n	15f16 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   15eea:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   15eec:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   15eee:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   15ef0:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   15ef4:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   15ef6:	d065      	beq.n	15fc4 <uarte_nrfx_configure+0x104>
   15ef8:	d82d      	bhi.n	15f56 <uarte_nrfx_configure+0x96>
   15efa:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15efe:	d064      	beq.n	15fca <uarte_nrfx_configure+0x10a>
   15f00:	d816      	bhi.n	15f30 <uarte_nrfx_configure+0x70>
   15f02:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   15f06:	d062      	beq.n	15fce <uarte_nrfx_configure+0x10e>
   15f08:	d80a      	bhi.n	15f20 <uarte_nrfx_configure+0x60>
   15f0a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   15f0e:	d061      	beq.n	15fd4 <uarte_nrfx_configure+0x114>
   15f10:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   15f14:	d061      	beq.n	15fda <uarte_nrfx_configure+0x11a>
   15f16:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15f1a:	e052      	b.n	15fc2 <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   15f1c:	2600      	movs	r6, #0
   15f1e:	e7d6      	b.n	15ece <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   15f20:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   15f24:	d05c      	beq.n	15fe0 <uarte_nrfx_configure+0x120>
   15f26:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   15f2a:	d1f4      	bne.n	15f16 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   15f2c:	4b37      	ldr	r3, [pc, #220]	; (1600c <uarte_nrfx_configure+0x14c>)
   15f2e:	e03c      	b.n	15faa <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   15f30:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   15f34:	d057      	beq.n	15fe6 <uarte_nrfx_configure+0x126>
   15f36:	d807      	bhi.n	15f48 <uarte_nrfx_configure+0x88>
   15f38:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   15f3c:	d055      	beq.n	15fea <uarte_nrfx_configure+0x12a>
   15f3e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   15f42:	d1e8      	bne.n	15f16 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   15f44:	4b32      	ldr	r3, [pc, #200]	; (16010 <uarte_nrfx_configure+0x150>)
   15f46:	e030      	b.n	15faa <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   15f48:	f647 2712 	movw	r7, #31250	; 0x7a12
   15f4c:	42bb      	cmp	r3, r7
   15f4e:	d1e2      	bne.n	15f16 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   15f50:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   15f54:	e029      	b.n	15faa <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   15f56:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   15f5a:	d048      	beq.n	15fee <uarte_nrfx_configure+0x12e>
   15f5c:	d813      	bhi.n	15f86 <uarte_nrfx_configure+0xc6>
   15f5e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   15f62:	d047      	beq.n	15ff4 <uarte_nrfx_configure+0x134>
   15f64:	d809      	bhi.n	15f7a <uarte_nrfx_configure+0xba>
   15f66:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   15f6a:	42bb      	cmp	r3, r7
   15f6c:	d044      	beq.n	15ff8 <uarte_nrfx_configure+0x138>
   15f6e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   15f72:	d1d0      	bne.n	15f16 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   15f74:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   15f78:	e017      	b.n	15faa <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   15f7a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   15f7e:	d1ca      	bne.n	15f16 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   15f80:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   15f84:	e011      	b.n	15faa <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   15f86:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   15f8a:	d038      	beq.n	15ffe <uarte_nrfx_configure+0x13e>
   15f8c:	d808      	bhi.n	15fa0 <uarte_nrfx_configure+0xe0>
   15f8e:	4f21      	ldr	r7, [pc, #132]	; (16014 <uarte_nrfx_configure+0x154>)
   15f90:	42bb      	cmp	r3, r7
   15f92:	d037      	beq.n	16004 <uarte_nrfx_configure+0x144>
   15f94:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   15f98:	d1bd      	bne.n	15f16 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   15f9a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   15f9e:	e004      	b.n	15faa <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   15fa0:	4f1d      	ldr	r7, [pc, #116]	; (16018 <uarte_nrfx_configure+0x158>)
   15fa2:	42bb      	cmp	r3, r7
   15fa4:	d1b7      	bne.n	15f16 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   15fa6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   15faa:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   15fae:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   15fb0:	4334      	orrs	r4, r6
   15fb2:	4322      	orrs	r2, r4
   15fb4:	3304      	adds	r3, #4
   15fb6:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   15fb8:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   15fbc:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   15fc0:	2000      	movs	r0, #0
}
   15fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   15fc4:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   15fc8:	e7ef      	b.n	15faa <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   15fca:	4b14      	ldr	r3, [pc, #80]	; (1601c <uarte_nrfx_configure+0x15c>)
   15fcc:	e7ed      	b.n	15faa <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   15fce:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   15fd2:	e7ea      	b.n	15faa <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   15fd4:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   15fd8:	e7e7      	b.n	15faa <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   15fda:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   15fde:	e7e4      	b.n	15faa <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   15fe0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   15fe4:	e7e1      	b.n	15faa <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   15fe6:	4b0e      	ldr	r3, [pc, #56]	; (16020 <uarte_nrfx_configure+0x160>)
   15fe8:	e7df      	b.n	15faa <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   15fea:	4b0e      	ldr	r3, [pc, #56]	; (16024 <uarte_nrfx_configure+0x164>)
   15fec:	e7dd      	b.n	15faa <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   15fee:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   15ff2:	e7da      	b.n	15faa <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   15ff4:	4b0c      	ldr	r3, [pc, #48]	; (16028 <uarte_nrfx_configure+0x168>)
   15ff6:	e7d8      	b.n	15faa <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   15ff8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   15ffc:	e7d5      	b.n	15faa <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   15ffe:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   16002:	e7d2      	b.n	15faa <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   16004:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   16008:	e7cf      	b.n	15faa <uarte_nrfx_configure+0xea>
   1600a:	bf00      	nop
   1600c:	0013b000 	.word	0x0013b000
   16010:	004ea000 	.word	0x004ea000
   16014:	0003d090 	.word	0x0003d090
   16018:	000f4240 	.word	0x000f4240
   1601c:	00275000 	.word	0x00275000
   16020:	0075c000 	.word	0x0075c000
   16024:	003af000 	.word	0x003af000
   16028:	013a9000 	.word	0x013a9000

0001602c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1602c:	6803      	ldr	r3, [r0, #0]
{
   1602e:	b510      	push	{r4, lr}
    switch (port)
   16030:	095a      	lsrs	r2, r3, #5
   16032:	bf0c      	ite	eq
   16034:	f04f 32ff 	moveq.w	r2, #4294967295
   16038:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   1603a:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1603e:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16042:	07db      	lsls	r3, r3, #31
{
   16044:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16046:	d40b      	bmi.n	16060 <nrf_gpio_pin_port_decode+0x34>
   16048:	490f      	ldr	r1, [pc, #60]	; (16088 <nrf_gpio_pin_port_decode+0x5c>)
   1604a:	4810      	ldr	r0, [pc, #64]	; (1608c <nrf_gpio_pin_port_decode+0x60>)
   1604c:	f240 231a 	movw	r3, #538	; 0x21a
   16050:	4a0f      	ldr	r2, [pc, #60]	; (16090 <nrf_gpio_pin_port_decode+0x64>)
   16052:	f016 f9ee 	bl	2c432 <printk>
   16056:	f240 211a 	movw	r1, #538	; 0x21a
   1605a:	480d      	ldr	r0, [pc, #52]	; (16090 <nrf_gpio_pin_port_decode+0x64>)
   1605c:	f016 fc06 	bl	2c86c <assert_post_action>
    uint32_t pin_number = *p_pin;
   16060:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   16062:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16066:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   16068:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1606a:	d00b      	beq.n	16084 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   1606c:	4909      	ldr	r1, [pc, #36]	; (16094 <nrf_gpio_pin_port_decode+0x68>)
   1606e:	4807      	ldr	r0, [pc, #28]	; (1608c <nrf_gpio_pin_port_decode+0x60>)
   16070:	f240 231f 	movw	r3, #543	; 0x21f
   16074:	4a06      	ldr	r2, [pc, #24]	; (16090 <nrf_gpio_pin_port_decode+0x64>)
   16076:	f016 f9dc 	bl	2c432 <printk>
   1607a:	f240 211f 	movw	r1, #543	; 0x21f
   1607e:	4804      	ldr	r0, [pc, #16]	; (16090 <nrf_gpio_pin_port_decode+0x64>)
   16080:	f016 fbf4 	bl	2c86c <assert_post_action>
}
   16084:	4804      	ldr	r0, [pc, #16]	; (16098 <nrf_gpio_pin_port_decode+0x6c>)
   16086:	bd10      	pop	{r4, pc}
   16088:	00031541 	.word	0x00031541
   1608c:	00030166 	.word	0x00030166
   16090:	0003150e 	.word	0x0003150e
   16094:	00032fcf 	.word	0x00032fcf
   16098:	40842500 	.word	0x40842500

0001609c <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1609c:	b530      	push	{r4, r5, lr}
   1609e:	b085      	sub	sp, #20
   160a0:	466c      	mov	r4, sp
   160a2:	4605      	mov	r5, r0
   160a4:	4b08      	ldr	r3, [pc, #32]	; (160c8 <uarte_1_init+0x2c>)
   160a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   160a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   160ac:	2200      	movs	r2, #0
   160ae:	2101      	movs	r1, #1
   160b0:	2009      	movs	r0, #9
   160b2:	f7fe fab3 	bl	1461c <z_arm_irq_priority_set>
   160b6:	2009      	movs	r0, #9
   160b8:	f7fe fa92 	bl	145e0 <arch_irq_enable>
   160bc:	4621      	mov	r1, r4
   160be:	4628      	mov	r0, r5
   160c0:	f017 fe41 	bl	2dd46 <uarte_instance_init.constprop.0>
   160c4:	b005      	add	sp, #20
   160c6:	bd30      	pop	{r4, r5, pc}
   160c8:	0002f0b0 	.word	0x0002f0b0

000160cc <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   160cc:	b530      	push	{r4, r5, lr}
   160ce:	b085      	sub	sp, #20
   160d0:	466c      	mov	r4, sp
   160d2:	4605      	mov	r5, r0
   160d4:	4b08      	ldr	r3, [pc, #32]	; (160f8 <uarte_0_init+0x2c>)
   160d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   160d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   160dc:	2200      	movs	r2, #0
   160de:	2101      	movs	r1, #1
   160e0:	2008      	movs	r0, #8
   160e2:	f7fe fa9b 	bl	1461c <z_arm_irq_priority_set>
   160e6:	2008      	movs	r0, #8
   160e8:	f7fe fa7a 	bl	145e0 <arch_irq_enable>
   160ec:	4621      	mov	r1, r4
   160ee:	4628      	mov	r0, r5
   160f0:	f017 fe29 	bl	2dd46 <uarte_instance_init.constprop.0>
   160f4:	b005      	add	sp, #20
   160f6:	bd30      	pop	{r4, r5, pc}
   160f8:	0002f0c0 	.word	0x0002f0c0

000160fc <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   160fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16100:	460e      	mov	r6, r1
   16102:	4614      	mov	r4, r2
   16104:	b0a6      	sub	sp, #152	; 0x98
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   16106:	b948      	cbnz	r0, 1611c <entropy_cc3xx_rng_get_entropy+0x20>
   16108:	491c      	ldr	r1, [pc, #112]	; (1617c <entropy_cc3xx_rng_get_entropy+0x80>)
   1610a:	481d      	ldr	r0, [pc, #116]	; (16180 <entropy_cc3xx_rng_get_entropy+0x84>)
   1610c:	231f      	movs	r3, #31
   1610e:	4a1d      	ldr	r2, [pc, #116]	; (16184 <entropy_cc3xx_rng_get_entropy+0x88>)
   16110:	f016 f98f 	bl	2c432 <printk>
   16114:	211f      	movs	r1, #31
   16116:	481b      	ldr	r0, [pc, #108]	; (16184 <entropy_cc3xx_rng_get_entropy+0x88>)
   16118:	f016 fba8 	bl	2c86c <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   1611c:	b94e      	cbnz	r6, 16132 <entropy_cc3xx_rng_get_entropy+0x36>
   1611e:	491a      	ldr	r1, [pc, #104]	; (16188 <entropy_cc3xx_rng_get_entropy+0x8c>)
   16120:	4817      	ldr	r0, [pc, #92]	; (16180 <entropy_cc3xx_rng_get_entropy+0x84>)
   16122:	2320      	movs	r3, #32
   16124:	4a17      	ldr	r2, [pc, #92]	; (16184 <entropy_cc3xx_rng_get_entropy+0x88>)
   16126:	f016 f984 	bl	2c432 <printk>
   1612a:	2120      	movs	r1, #32
   1612c:	4815      	ldr	r0, [pc, #84]	; (16184 <entropy_cc3xx_rng_get_entropy+0x88>)
   1612e:	f016 fb9d 	bl	2c86c <assert_post_action>
{
   16132:	2700      	movs	r7, #0
   16134:	f06f 0515 	mvn.w	r5, #21
			       */

	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	while (length > 0) {
   16138:	b91c      	cbnz	r4, 16142 <entropy_cc3xx_rng_get_entropy+0x46>
		return -EINVAL;
	}
#endif

	return res;
}
   1613a:	4628      	mov	r0, r5
   1613c:	b026      	add	sp, #152	; 0x98
   1613e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = spm_request_random_number(spm_buf, sizeof(spm_buf),
   16142:	2190      	movs	r1, #144	; 0x90
   16144:	aa01      	add	r2, sp, #4
   16146:	a802      	add	r0, sp, #8
   16148:	f016 ff5a 	bl	2d000 <spm_request_random_number>
		if (res < 0) {
   1614c:	1e05      	subs	r5, r0, #0
   1614e:	dbf4      	blt.n	1613a <entropy_cc3xx_rng_get_entropy+0x3e>
		if (olen != sizeof(spm_buf)) {
   16150:	9b01      	ldr	r3, [sp, #4]
   16152:	2b90      	cmp	r3, #144	; 0x90
   16154:	d10e      	bne.n	16174 <entropy_cc3xx_rng_get_entropy+0x78>
		to_copy = MIN(length, sizeof(spm_buf));
   16156:	2c90      	cmp	r4, #144	; 0x90
   16158:	46a0      	mov	r8, r4
   1615a:	bf28      	it	cs
   1615c:	f04f 0890 	movcs.w	r8, #144	; 0x90
   16160:	19f0      	adds	r0, r6, r7
   16162:	4642      	mov	r2, r8
   16164:	a902      	add	r1, sp, #8
		length -= to_copy;
   16166:	eba4 0408 	sub.w	r4, r4, r8
   1616a:	f7f6 fcef 	bl	cb4c <memcpy>
   1616e:	b2a4      	uxth	r4, r4
		offset += to_copy;
   16170:	4447      	add	r7, r8
   16172:	e7e1      	b.n	16138 <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
   16174:	f06f 0515 	mvn.w	r5, #21
   16178:	e7df      	b.n	1613a <entropy_cc3xx_rng_get_entropy+0x3e>
   1617a:	bf00      	nop
   1617c:	000315be 	.word	0x000315be
   16180:	00030166 	.word	0x00030166
   16184:	0003158e 	.word	0x0003158e
   16188:	000315d1 	.word	0x000315d1

0001618c <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
   1618c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16190:	4605      	mov	r5, r0
    unsigned char *output_pointer = NULL;
    size_t output_length = 0;
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;

    if (output_buffer == NULL)
   16192:	460f      	mov	r7, r1
{
   16194:	b085      	sub	sp, #20
    if (output_buffer == NULL)
   16196:	b919      	cbnz	r1, 161a0 <print_string_ptr+0x14>
    {
        return false;
   16198:	2000      	movs	r0, #0
    }
    output[output_length + 1] = '\"';
    output[output_length + 2] = '\0';

    return true;
}
   1619a:	b005      	add	sp, #20
   1619c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const char quotes[] = "\"\"";
   161a0:	4b4e      	ldr	r3, [pc, #312]	; (162dc <print_string_ptr+0x150>)
   161a2:	881a      	ldrh	r2, [r3, #0]
   161a4:	789b      	ldrb	r3, [r3, #2]
   161a6:	f8ad 200c 	strh.w	r2, [sp, #12]
   161aa:	f88d 300e 	strb.w	r3, [sp, #14]
    if (input == NULL)
   161ae:	b340      	cbz	r0, 16202 <print_string_ptr+0x76>
   161b0:	4601      	mov	r1, r0
    size_t escape_characters = 0;
   161b2:	f04f 0b00 	mov.w	fp, #0
   161b6:	2001      	movs	r0, #1
   161b8:	4c49      	ldr	r4, [pc, #292]	; (162e0 <print_string_ptr+0x154>)
   161ba:	468a      	mov	sl, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   161bc:	f811 3b01 	ldrb.w	r3, [r1], #1
   161c0:	bb6b      	cbnz	r3, 1621e <print_string_ptr+0x92>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   161c2:	ebaa 0a05 	sub.w	sl, sl, r5
   161c6:	44da      	add	sl, fp
    output = ensure(output_buffer, output_length + sizeof(quotes));
   161c8:	4638      	mov	r0, r7
   161ca:	f10a 0103 	add.w	r1, sl, #3
   161ce:	f017 fe61 	bl	2de94 <ensure>
    if (output == NULL)
   161d2:	4606      	mov	r6, r0
   161d4:	2800      	cmp	r0, #0
   161d6:	d0df      	beq.n	16198 <print_string_ptr+0xc>
    if (escape_characters == 0)
   161d8:	2322      	movs	r3, #34	; 0x22
   161da:	1c44      	adds	r4, r0, #1
   161dc:	f10a 0901 	add.w	r9, sl, #1
   161e0:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   161e4:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   161e6:	f1bb 0f00 	cmp.w	fp, #0
   161ea:	d12e      	bne.n	1624a <print_string_ptr+0xbe>
   161ec:	4652      	mov	r2, sl
   161ee:	4629      	mov	r1, r5
   161f0:	4620      	mov	r0, r4
   161f2:	f7f6 fcab 	bl	cb4c <memcpy>
        output[output_length + 1] = '\"';
   161f6:	2322      	movs	r3, #34	; 0x22
   161f8:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   161fc:	f806 b008 	strb.w	fp, [r6, r8]
        return true;
   16200:	e00b      	b.n	1621a <print_string_ptr+0x8e>
        output = ensure(output_buffer, sizeof(quotes));
   16202:	2103      	movs	r1, #3
   16204:	4638      	mov	r0, r7
   16206:	f017 fe45 	bl	2de94 <ensure>
        if (output == NULL)
   1620a:	2800      	cmp	r0, #0
   1620c:	d0c4      	beq.n	16198 <print_string_ptr+0xc>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   1620e:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   16212:	a903      	add	r1, sp, #12
   16214:	1ad2      	subs	r2, r2, r3
   16216:	f010 fd67 	bl	26ce8 <strncpy>
    return true;
   1621a:	2001      	movs	r0, #1
   1621c:	e7bd      	b.n	1619a <print_string_ptr+0xe>
        switch (*input_pointer)
   1621e:	2b22      	cmp	r3, #34	; 0x22
   16220:	d80b      	bhi.n	1623a <print_string_ptr+0xae>
   16222:	2b07      	cmp	r3, #7
   16224:	d90c      	bls.n	16240 <print_string_ptr+0xb4>
   16226:	f1a3 0208 	sub.w	r2, r3, #8
   1622a:	b2d2      	uxtb	r2, r2
   1622c:	fa00 f202 	lsl.w	r2, r0, r2
   16230:	4222      	tst	r2, r4
   16232:	d005      	beq.n	16240 <print_string_ptr+0xb4>
                escape_characters++;
   16234:	f10b 0b01 	add.w	fp, fp, #1
                break;
   16238:	e7bf      	b.n	161ba <print_string_ptr+0x2e>
        switch (*input_pointer)
   1623a:	2b5c      	cmp	r3, #92	; 0x5c
   1623c:	d1bd      	bne.n	161ba <print_string_ptr+0x2e>
   1623e:	e7f9      	b.n	16234 <print_string_ptr+0xa8>
                if (*input_pointer < 32)
   16240:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   16242:	bf98      	it	ls
   16244:	f10b 0b05 	addls.w	fp, fp, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   16248:	e7b7      	b.n	161ba <print_string_ptr+0x2e>
            *output_pointer++ = '\\';
   1624a:	f04f 0a5c 	mov.w	sl, #92	; 0x5c
                    *output_pointer = 't';
   1624e:	f04f 0b74 	mov.w	fp, #116	; 0x74
   16252:	1e6b      	subs	r3, r5, #1
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   16254:	4a23      	ldr	r2, [pc, #140]	; (162e4 <print_string_ptr+0x158>)
   16256:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   16258:	9901      	ldr	r1, [sp, #4]
   1625a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1625e:	9101      	str	r1, [sp, #4]
   16260:	b92b      	cbnz	r3, 1626e <print_string_ptr+0xe2>
    output[output_length + 1] = '\"';
   16262:	2222      	movs	r2, #34	; 0x22
   16264:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   16268:	f806 3008 	strb.w	r3, [r6, r8]
   1626c:	e7d5      	b.n	1621a <print_string_ptr+0x8e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   1626e:	2b1f      	cmp	r3, #31
   16270:	d907      	bls.n	16282 <print_string_ptr+0xf6>
   16272:	2b22      	cmp	r3, #34	; 0x22
   16274:	d005      	beq.n	16282 <print_string_ptr+0xf6>
   16276:	2b5c      	cmp	r3, #92	; 0x5c
   16278:	d003      	beq.n	16282 <print_string_ptr+0xf6>
            *output_pointer = *input_pointer;
   1627a:	4620      	mov	r0, r4
   1627c:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   1627e:	1c44      	adds	r4, r0, #1
   16280:	e7ea      	b.n	16258 <print_string_ptr+0xcc>
            *output_pointer++ = '\\';
   16282:	4620      	mov	r0, r4
            switch (*input_pointer)
   16284:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   16286:	f800 ab01 	strb.w	sl, [r0], #1
            switch (*input_pointer)
   1628a:	781b      	ldrb	r3, [r3, #0]
   1628c:	2b0d      	cmp	r3, #13
   1628e:	d80a      	bhi.n	162a6 <print_string_ptr+0x11a>
   16290:	2b07      	cmp	r3, #7
   16292:	d919      	bls.n	162c8 <print_string_ptr+0x13c>
   16294:	f1a3 0108 	sub.w	r1, r3, #8
   16298:	2905      	cmp	r1, #5
   1629a:	d815      	bhi.n	162c8 <print_string_ptr+0x13c>
   1629c:	e8df f001 	tbb	[pc, r1]
   162a0:	140d1109 	.word	0x140d1109
   162a4:	0f0b      	.short	0x0f0b
   162a6:	2b22      	cmp	r3, #34	; 0x22
   162a8:	d001      	beq.n	162ae <print_string_ptr+0x122>
   162aa:	2b5c      	cmp	r3, #92	; 0x5c
   162ac:	d10c      	bne.n	162c8 <print_string_ptr+0x13c>
                    *output_pointer = 'b';
   162ae:	7063      	strb	r3, [r4, #1]
                    break;
   162b0:	e7e5      	b.n	1627e <print_string_ptr+0xf2>
                    *output_pointer = 'b';
   162b2:	2362      	movs	r3, #98	; 0x62
   162b4:	e7fb      	b.n	162ae <print_string_ptr+0x122>
                    *output_pointer = 'f';
   162b6:	2366      	movs	r3, #102	; 0x66
   162b8:	e7f9      	b.n	162ae <print_string_ptr+0x122>
                    *output_pointer = 'n';
   162ba:	236e      	movs	r3, #110	; 0x6e
   162bc:	e7f7      	b.n	162ae <print_string_ptr+0x122>
                    *output_pointer = 'r';
   162be:	2372      	movs	r3, #114	; 0x72
   162c0:	e7f5      	b.n	162ae <print_string_ptr+0x122>
                    *output_pointer = 't';
   162c2:	f884 b001 	strb.w	fp, [r4, #1]
                    break;
   162c6:	e7da      	b.n	1627e <print_string_ptr+0xf2>
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   162c8:	6839      	ldr	r1, [r7, #0]
   162ca:	687d      	ldr	r5, [r7, #4]
   162cc:	1a41      	subs	r1, r0, r1
   162ce:	1a69      	subs	r1, r5, r1
   162d0:	f010 fb02 	bl	268d8 <snprintf>
                    output_pointer += 4;
   162d4:	4a03      	ldr	r2, [pc, #12]	; (162e4 <print_string_ptr+0x158>)
   162d6:	1d60      	adds	r0, r4, #5
                    break;
   162d8:	e7d1      	b.n	1627e <print_string_ptr+0xf2>
   162da:	bf00      	nop
   162dc:	000315fb 	.word	0x000315fb
   162e0:	04000037 	.word	0x04000037
   162e4:	000315f5 	.word	0x000315f5

000162e8 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
   162e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   162ec:	460c      	mov	r4, r1
    unsigned char *output = NULL;

    if ((item == NULL) || (output_buffer == NULL))
   162ee:	4606      	mov	r6, r0
{
   162f0:	b08f      	sub	sp, #60	; 0x3c
    if ((item == NULL) || (output_buffer == NULL))
   162f2:	b908      	cbnz	r0, 162f8 <print_value+0x10>
    {
        return false;
    }

    switch ((item->type) & 0xFF)
   162f4:	2500      	movs	r5, #0
   162f6:	e06f      	b.n	163d8 <print_value+0xf0>
    if ((item == NULL) || (output_buffer == NULL))
   162f8:	2900      	cmp	r1, #0
   162fa:	d0fb      	beq.n	162f4 <print_value+0xc>
    switch ((item->type) & 0xFF)
   162fc:	7b05      	ldrb	r5, [r0, #12]
   162fe:	2d10      	cmp	r5, #16
   16300:	f000 80cc 	beq.w	1649c <print_value+0x1b4>
   16304:	dc18      	bgt.n	16338 <print_value+0x50>
   16306:	1e6b      	subs	r3, r5, #1
   16308:	2b07      	cmp	r3, #7
   1630a:	d8f3      	bhi.n	162f4 <print_value+0xc>
   1630c:	2b07      	cmp	r3, #7
   1630e:	d8f1      	bhi.n	162f4 <print_value+0xc>
   16310:	a201      	add	r2, pc, #4	; (adr r2, 16318 <print_value+0x30>)
   16312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16316:	bf00      	nop
   16318:	000163b5 	.word	0x000163b5
   1631c:	000163e1 	.word	0x000163e1
   16320:	000162f5 	.word	0x000162f5
   16324:	0001638d 	.word	0x0001638d
   16328:	000162f5 	.word	0x000162f5
   1632c:	000162f5 	.word	0x000162f5
   16330:	000162f5 	.word	0x000162f5
   16334:	000163e5 	.word	0x000163e5
   16338:	2d40      	cmp	r5, #64	; 0x40
   1633a:	f000 80dd 	beq.w	164f8 <print_value+0x210>
   1633e:	2d80      	cmp	r5, #128	; 0x80
   16340:	f000 8098 	beq.w	16474 <print_value+0x18c>
   16344:	2d20      	cmp	r5, #32
   16346:	d1d5      	bne.n	162f4 <print_value+0xc>

        case cJSON_String:
            return print_string(item, output_buffer);

        case cJSON_Array:
            return print_array(item, output_buffer);
   16348:	6886      	ldr	r6, [r0, #8]
        return false;
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
   1634a:	2101      	movs	r1, #1
   1634c:	4620      	mov	r0, r4
   1634e:	f017 fda1 	bl	2de94 <ensure>
    if (output_pointer == NULL)
   16352:	2800      	cmp	r0, #0
   16354:	d0ce      	beq.n	162f4 <print_value+0xc>
    {
        return false;
    }

    *output_pointer = '[';
   16356:	235b      	movs	r3, #91	; 0x5b
            output_pointer = ensure(output_buffer, length + 1);
            if (output_pointer == NULL)
            {
                return false;
            }
            *output_pointer++ = ',';
   16358:	272c      	movs	r7, #44	; 0x2c
            if(output_buffer->format)
            {
                *output_pointer++ = ' ';
            }
            *output_pointer = '\0';
   1635a:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   1635e:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   16360:	68a3      	ldr	r3, [r4, #8]
   16362:	3301      	adds	r3, #1
   16364:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   16366:	68e3      	ldr	r3, [r4, #12]
   16368:	3301      	adds	r3, #1
   1636a:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   1636c:	2e00      	cmp	r6, #0
   1636e:	f040 809a 	bne.w	164a6 <print_value+0x1be>
            output_buffer->offset += length;
        }
        current_element = current_element->next;
    }

    output_pointer = ensure(output_buffer, 2);
   16372:	2102      	movs	r1, #2
   16374:	4620      	mov	r0, r4
   16376:	f017 fd8d 	bl	2de94 <ensure>
    if (output_pointer == NULL)
   1637a:	2800      	cmp	r0, #0
   1637c:	d0ba      	beq.n	162f4 <print_value+0xc>
    {
        return false;
    }
    *output_pointer++ = ']';
   1637e:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   16380:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   16382:	7003      	strb	r3, [r0, #0]
            *output_pointer++ = '\t';
        }
    }
    *output_pointer++ = '}';
    *output_pointer = '\0';
    output_buffer->depth--;
   16384:	68e3      	ldr	r3, [r4, #12]
   16386:	3b01      	subs	r3, #1
   16388:	60e3      	str	r3, [r4, #12]
   1638a:	e011      	b.n	163b0 <print_value+0xc8>
            const char buff[] = "null";
   1638c:	4ba8      	ldr	r3, [pc, #672]	; (16630 <print_value+0x348>)
            const char buff[] = "true";
   1638e:	6818      	ldr	r0, [r3, #0]
   16390:	791b      	ldrb	r3, [r3, #4]
   16392:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   16394:	2105      	movs	r1, #5
   16396:	4620      	mov	r0, r4
            const char buff[] = "true";
   16398:	f88d 3020 	strb.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   1639c:	f017 fd7a 	bl	2de94 <ensure>
            if (output == NULL)
   163a0:	4605      	mov	r5, r0
   163a2:	b1c8      	cbz	r0, 163d8 <print_value+0xf0>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   163a4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   163a8:	a907      	add	r1, sp, #28
   163aa:	1ad2      	subs	r2, r2, r3
   163ac:	f010 fc9c 	bl	26ce8 <strncpy>

    return true;
   163b0:	2501      	movs	r5, #1
   163b2:	e011      	b.n	163d8 <print_value+0xf0>
            const char buff[] = "false";
   163b4:	4b9f      	ldr	r3, [pc, #636]	; (16634 <print_value+0x34c>)
            output = ensure(output_buffer, sizeof(buff));
   163b6:	2106      	movs	r1, #6
            const char buff[] = "false";
   163b8:	6818      	ldr	r0, [r3, #0]
   163ba:	889b      	ldrh	r3, [r3, #4]
   163bc:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   163be:	4620      	mov	r0, r4
            const char buff[] = "false";
   163c0:	f8ad 3020 	strh.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   163c4:	f017 fd66 	bl	2de94 <ensure>
            if (output == NULL)
   163c8:	2800      	cmp	r0, #0
   163ca:	d093      	beq.n	162f4 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   163cc:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   163d0:	a907      	add	r1, sp, #28
   163d2:	1ad2      	subs	r2, r2, r3
   163d4:	f010 fc88 	bl	26ce8 <strncpy>
}
   163d8:	4628      	mov	r0, r5
   163da:	b00f      	add	sp, #60	; 0x3c
   163dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            const char buff[] = "true";
   163e0:	4b95      	ldr	r3, [pc, #596]	; (16638 <print_value+0x350>)
   163e2:	e7d4      	b.n	1638e <print_value+0xa6>
    if ((d * 0) != 0)
   163e4:	2200      	movs	r2, #0
    double d = item->valuedouble;
   163e6:	e9d0 8906 	ldrd	r8, r9, [r0, #24]
    if ((d * 0) != 0)
   163ea:	2300      	movs	r3, #0
   163ec:	4640      	mov	r0, r8
   163ee:	4649      	mov	r1, r9
   163f0:	f7f6 fd00 	bl	cdf4 <__aeabi_dmul>
   163f4:	2200      	movs	r2, #0
   163f6:	2300      	movs	r3, #0
   163f8:	f7f6 f934 	bl	c664 <__aeabi_dcmpeq>
   163fc:	ae07      	add	r6, sp, #28
   163fe:	b9b8      	cbnz	r0, 16430 <print_value+0x148>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   16400:	4630      	mov	r0, r6
   16402:	498b      	ldr	r1, [pc, #556]	; (16630 <print_value+0x348>)
   16404:	f010 fbaa 	bl	26b5c <strcpy>
   16408:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   1640a:	4620      	mov	r0, r4
   1640c:	1c69      	adds	r1, r5, #1
   1640e:	f017 fd41 	bl	2de94 <ensure>
    if (output_pointer == NULL)
   16412:	2800      	cmp	r0, #0
   16414:	f43f af6e 	beq.w	162f4 <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   16418:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   1641a:	5cf2      	ldrb	r2, [r6, r3]
        output_pointer[i] = number_buffer[i];
   1641c:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   1641e:	3301      	adds	r3, #1
   16420:	429d      	cmp	r5, r3
   16422:	d1fa      	bne.n	1641a <print_value+0x132>
    output_pointer[i] = '\0';
   16424:	2300      	movs	r3, #0
   16426:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   16428:	68a0      	ldr	r0, [r4, #8]
   1642a:	4428      	add	r0, r5
   1642c:	60a0      	str	r0, [r4, #8]
    return true;
   1642e:	e7bf      	b.n	163b0 <print_value+0xc8>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   16430:	211a      	movs	r1, #26
   16432:	4a82      	ldr	r2, [pc, #520]	; (1663c <print_value+0x354>)
   16434:	4630      	mov	r0, r6
   16436:	e9cd 8900 	strd	r8, r9, [sp]
   1643a:	f010 fa4d 	bl	268d8 <snprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   1643e:	4980      	ldr	r1, [pc, #512]	; (16640 <print_value+0x358>)
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   16440:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   16442:	aa04      	add	r2, sp, #16
   16444:	4630      	mov	r0, r6
   16446:	f010 faab 	bl	269a0 <sscanf>
   1644a:	2801      	cmp	r0, #1
   1644c:	d106      	bne.n	1645c <print_value+0x174>
   1644e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   16452:	4640      	mov	r0, r8
   16454:	4649      	mov	r1, r9
   16456:	f7f6 f905 	bl	c664 <__aeabi_dcmpeq>
   1645a:	b938      	cbnz	r0, 1646c <print_value+0x184>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   1645c:	211a      	movs	r1, #26
   1645e:	4630      	mov	r0, r6
   16460:	e9cd 8900 	strd	r8, r9, [sp]
   16464:	4a77      	ldr	r2, [pc, #476]	; (16644 <print_value+0x35c>)
   16466:	f010 fa37 	bl	268d8 <snprintf>
   1646a:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   1646c:	2d19      	cmp	r5, #25
   1646e:	f73f af41 	bgt.w	162f4 <print_value+0xc>
   16472:	e7ca      	b.n	1640a <print_value+0x122>
            if (item->valuestring == NULL)
   16474:	6900      	ldr	r0, [r0, #16]
   16476:	2800      	cmp	r0, #0
   16478:	f43f af3c 	beq.w	162f4 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   1647c:	f010 fbcc 	bl	26c18 <strlen>
   16480:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   16482:	4611      	mov	r1, r2
   16484:	4620      	mov	r0, r4
   16486:	9203      	str	r2, [sp, #12]
   16488:	f017 fd04 	bl	2de94 <ensure>
            if (output == NULL)
   1648c:	2800      	cmp	r0, #0
   1648e:	f43f af31 	beq.w	162f4 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16492:	9a03      	ldr	r2, [sp, #12]
   16494:	6931      	ldr	r1, [r6, #16]
   16496:	f7f6 fb59 	bl	cb4c <memcpy>
   1649a:	e789      	b.n	163b0 <print_value+0xc8>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   1649c:	6900      	ldr	r0, [r0, #16]
   1649e:	f7ff fe75 	bl	1618c <print_string_ptr>
   164a2:	4605      	mov	r5, r0
            return print_string(item, output_buffer);
   164a4:	e798      	b.n	163d8 <print_value+0xf0>
        if (!print_value(current_element, output_buffer))
   164a6:	4621      	mov	r1, r4
   164a8:	4630      	mov	r0, r6
   164aa:	f7ff ff1d 	bl	162e8 <print_value>
   164ae:	2800      	cmp	r0, #0
   164b0:	f43f af20 	beq.w	162f4 <print_value+0xc>
        update_offset(output_buffer);
   164b4:	4620      	mov	r0, r4
   164b6:	f017 fcc4 	bl	2de42 <update_offset>
        if (current_element->next)
   164ba:	6833      	ldr	r3, [r6, #0]
   164bc:	b1bb      	cbz	r3, 164ee <print_value+0x206>
            length = (size_t) (output_buffer->format ? 2 : 1);
   164be:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   164c0:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   164c2:	2b00      	cmp	r3, #0
   164c4:	bf14      	ite	ne
   164c6:	f04f 0902 	movne.w	r9, #2
   164ca:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   164ce:	f109 0101 	add.w	r1, r9, #1
   164d2:	f017 fcdf 	bl	2de94 <ensure>
            if (output_pointer == NULL)
   164d6:	2800      	cmp	r0, #0
   164d8:	f43f af0c 	beq.w	162f4 <print_value+0xc>
            *output_pointer++ = ',';
   164dc:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   164de:	6963      	ldr	r3, [r4, #20]
   164e0:	b93b      	cbnz	r3, 164f2 <print_value+0x20a>
            *output_pointer++ = ',';
   164e2:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   164e4:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   164e8:	68a3      	ldr	r3, [r4, #8]
   164ea:	444b      	add	r3, r9
   164ec:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   164ee:	6836      	ldr	r6, [r6, #0]
   164f0:	e73c      	b.n	1636c <print_value+0x84>
                *output_pointer++ = ' ';
   164f2:	1c83      	adds	r3, r0, #2
   164f4:	7045      	strb	r5, [r0, #1]
   164f6:	e7f5      	b.n	164e4 <print_value+0x1fc>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   164f8:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   164fa:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   164fc:	2b00      	cmp	r3, #0
   164fe:	bf14      	ite	ne
   16500:	2702      	movne	r7, #2
   16502:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   16504:	4620      	mov	r0, r4
   16506:	1c79      	adds	r1, r7, #1
   16508:	f017 fcc4 	bl	2de94 <ensure>
    if (output_pointer == NULL)
   1650c:	2800      	cmp	r0, #0
   1650e:	f43f aef1 	beq.w	162f4 <print_value+0xc>
    *output_pointer++ = '{';
   16512:	237b      	movs	r3, #123	; 0x7b
   16514:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   16516:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   16518:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   1651a:	3201      	adds	r2, #1
   1651c:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   1651e:	b10b      	cbz	r3, 16524 <print_value+0x23c>
        *output_pointer++ = '\n';
   16520:	230a      	movs	r3, #10
   16522:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   16524:	68a3      	ldr	r3, [r4, #8]
                *output_pointer++ = '\t';
   16526:	2609      	movs	r6, #9
    output_buffer->offset += length;
   16528:	443b      	add	r3, r7
        *output_pointer++ = ':';
   1652a:	273a      	movs	r7, #58	; 0x3a
    output_buffer->offset += length;
   1652c:	60a3      	str	r3, [r4, #8]
    while (current_item)
   1652e:	6963      	ldr	r3, [r4, #20]
   16530:	b995      	cbnz	r5, 16558 <print_value+0x270>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   16532:	2b00      	cmp	r3, #0
   16534:	d06f      	beq.n	16616 <print_value+0x32e>
   16536:	68e1      	ldr	r1, [r4, #12]
   16538:	3101      	adds	r1, #1
   1653a:	4620      	mov	r0, r4
   1653c:	f017 fcaa 	bl	2de94 <ensure>
    if (output_pointer == NULL)
   16540:	2800      	cmp	r0, #0
   16542:	f43f aed7 	beq.w	162f4 <print_value+0xc>
    if (output_buffer->format)
   16546:	6963      	ldr	r3, [r4, #20]
   16548:	2b00      	cmp	r3, #0
   1654a:	d16e      	bne.n	1662a <print_value+0x342>
   1654c:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   1654e:	227d      	movs	r2, #125	; 0x7d
   16550:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   16552:	2200      	movs	r2, #0
   16554:	705a      	strb	r2, [r3, #1]
   16556:	e715      	b.n	16384 <print_value+0x9c>
        if (output_buffer->format)
   16558:	b173      	cbz	r3, 16578 <print_value+0x290>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   1655a:	4620      	mov	r0, r4
   1655c:	68e1      	ldr	r1, [r4, #12]
   1655e:	f017 fc99 	bl	2de94 <ensure>
            if (output_pointer == NULL)
   16562:	2800      	cmp	r0, #0
   16564:	f43f aec6 	beq.w	162f4 <print_value+0xc>
   16568:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   1656a:	68e1      	ldr	r1, [r4, #12]
   1656c:	1a13      	subs	r3, r2, r0
   1656e:	428b      	cmp	r3, r1
   16570:	d34e      	bcc.n	16610 <print_value+0x328>
            output_buffer->offset += output_buffer->depth;
   16572:	68a3      	ldr	r3, [r4, #8]
   16574:	440b      	add	r3, r1
   16576:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   16578:	4621      	mov	r1, r4
   1657a:	6a28      	ldr	r0, [r5, #32]
   1657c:	f7ff fe06 	bl	1618c <print_string_ptr>
   16580:	2800      	cmp	r0, #0
   16582:	f43f aeb7 	beq.w	162f4 <print_value+0xc>
        update_offset(output_buffer);
   16586:	4620      	mov	r0, r4
   16588:	f017 fc5b 	bl	2de42 <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   1658c:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   1658e:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   16590:	2b00      	cmp	r3, #0
   16592:	bf14      	ite	ne
   16594:	f04f 0802 	movne.w	r8, #2
   16598:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   1659c:	4641      	mov	r1, r8
   1659e:	f017 fc79 	bl	2de94 <ensure>
        if (output_pointer == NULL)
   165a2:	2800      	cmp	r0, #0
   165a4:	f43f aea6 	beq.w	162f4 <print_value+0xc>
        *output_pointer++ = ':';
   165a8:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   165aa:	6963      	ldr	r3, [r4, #20]
   165ac:	b103      	cbz	r3, 165b0 <print_value+0x2c8>
            *output_pointer++ = '\t';
   165ae:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   165b0:	68a3      	ldr	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   165b2:	4621      	mov	r1, r4
        output_buffer->offset += length;
   165b4:	4443      	add	r3, r8
        if (!print_value(current_item, output_buffer))
   165b6:	4628      	mov	r0, r5
        output_buffer->offset += length;
   165b8:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   165ba:	f7ff fe95 	bl	162e8 <print_value>
   165be:	2800      	cmp	r0, #0
   165c0:	f43f ae98 	beq.w	162f4 <print_value+0xc>
        update_offset(output_buffer);
   165c4:	4620      	mov	r0, r4
   165c6:	f017 fc3c 	bl	2de42 <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   165ca:	682b      	ldr	r3, [r5, #0]
   165cc:	6962      	ldr	r2, [r4, #20]
   165ce:	3b00      	subs	r3, #0
   165d0:	bf18      	it	ne
   165d2:	2301      	movne	r3, #1
   165d4:	2a00      	cmp	r2, #0
   165d6:	bf0c      	ite	eq
   165d8:	4698      	moveq	r8, r3
   165da:	f103 0801 	addne.w	r8, r3, #1
        output_pointer = ensure(output_buffer, length + 1);
   165de:	4620      	mov	r0, r4
   165e0:	f108 0101 	add.w	r1, r8, #1
   165e4:	f017 fc56 	bl	2de94 <ensure>
        if (output_pointer == NULL)
   165e8:	2800      	cmp	r0, #0
   165ea:	f43f ae83 	beq.w	162f4 <print_value+0xc>
        if (current_item->next)
   165ee:	682b      	ldr	r3, [r5, #0]
   165f0:	b113      	cbz	r3, 165f8 <print_value+0x310>
            *output_pointer++ = ',';
   165f2:	232c      	movs	r3, #44	; 0x2c
   165f4:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   165f8:	6963      	ldr	r3, [r4, #20]
   165fa:	b113      	cbz	r3, 16602 <print_value+0x31a>
            *output_pointer++ = '\n';
   165fc:	230a      	movs	r3, #10
   165fe:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   16602:	2300      	movs	r3, #0
   16604:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   16606:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   16608:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   1660a:	4443      	add	r3, r8
   1660c:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   1660e:	e78e      	b.n	1652e <print_value+0x246>
                *output_pointer++ = '\t';
   16610:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   16614:	e7a9      	b.n	1656a <print_value+0x282>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   16616:	2102      	movs	r1, #2
   16618:	e78f      	b.n	1653a <print_value+0x252>
            *output_pointer++ = '\t';
   1661a:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   1661e:	68e2      	ldr	r2, [r4, #12]
   16620:	1a19      	subs	r1, r3, r0
   16622:	3a01      	subs	r2, #1
   16624:	4291      	cmp	r1, r2
   16626:	d3f8      	bcc.n	1661a <print_value+0x332>
   16628:	e791      	b.n	1654e <print_value+0x266>
   1662a:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   1662c:	2509      	movs	r5, #9
   1662e:	e7f6      	b.n	1661e <print_value+0x336>
   16630:	000315fe 	.word	0x000315fe
   16634:	00031615 	.word	0x00031615
   16638:	0003161b 	.word	0x0003161b
   1663c:	00031603 	.word	0x00031603
   16640:	0003160a 	.word	0x0003160a
   16644:	0003160e 	.word	0x0003160e

00016648 <cJSON_strdup.isra.0.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   16648:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   1664a:	4605      	mov	r5, r0
   1664c:	b180      	cbz	r0, 16670 <cJSON_strdup.isra.0.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   1664e:	f010 fae3 	bl	26c18 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   16652:	4b08      	ldr	r3, [pc, #32]	; (16674 <cJSON_strdup.isra.0.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   16654:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   16656:	4610      	mov	r0, r2
   16658:	681b      	ldr	r3, [r3, #0]
   1665a:	9201      	str	r2, [sp, #4]
   1665c:	4798      	blx	r3
    if (copy == NULL)
   1665e:	4604      	mov	r4, r0
   16660:	b118      	cbz	r0, 1666a <cJSON_strdup.isra.0.constprop.0+0x22>
   16662:	4629      	mov	r1, r5
   16664:	9a01      	ldr	r2, [sp, #4]
   16666:	f7f6 fa71 	bl	cb4c <memcpy>
}
   1666a:	4620      	mov	r0, r4
   1666c:	b003      	add	sp, #12
   1666e:	bd30      	pop	{r4, r5, pc}
        return NULL;
   16670:	4604      	mov	r4, r0
   16672:	e7fa      	b.n	1666a <cJSON_strdup.isra.0.constprop.0+0x22>
   16674:	2002048c 	.word	0x2002048c

00016678 <add_item_to_object.constprop.0>:
#if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   16678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1667a:	460d      	mov	r5, r1
   1667c:	4614      	mov	r4, r2
{
    char *new_key = NULL;
    int new_type = cJSON_Invalid;

    if ((object == NULL) || (string == NULL) || (item == NULL))
   1667e:	4607      	mov	r7, r0
   16680:	b1f0      	cbz	r0, 166c0 <add_item_to_object.constprop.0+0x48>
   16682:	b1e9      	cbz	r1, 166c0 <add_item_to_object.constprop.0+0x48>
   16684:	b1e2      	cbz	r2, 166c0 <add_item_to_object.constprop.0+0x48>
    {
        return false;
    }

    if (constant_key)
   16686:	b193      	cbz	r3, 166ae <add_item_to_object.constprop.0+0x36>
    {
        new_key = (char*)cast_away_const(string);
        new_type = item->type | cJSON_StringIsConst;
   16688:	68d6      	ldr	r6, [r2, #12]
   1668a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
        }

        new_type = item->type & ~cJSON_StringIsConst;
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   1668e:	68e3      	ldr	r3, [r4, #12]
   16690:	059b      	lsls	r3, r3, #22
   16692:	d404      	bmi.n	1669e <add_item_to_object.constprop.0+0x26>
   16694:	6a20      	ldr	r0, [r4, #32]
   16696:	b110      	cbz	r0, 1669e <add_item_to_object.constprop.0+0x26>
    {
        hooks->deallocate(item->string);
   16698:	4b0a      	ldr	r3, [pc, #40]	; (166c4 <add_item_to_object.constprop.0+0x4c>)
   1669a:	685b      	ldr	r3, [r3, #4]
   1669c:	4798      	blx	r3
    }

    item->string = new_key;
    item->type = new_type;

    return add_item_to_array(object, item);
   1669e:	4621      	mov	r1, r4
   166a0:	4638      	mov	r0, r7
    item->string = new_key;
   166a2:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   166a4:	60e6      	str	r6, [r4, #12]
}
   166a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   166aa:	f017 bbd7 	b.w	2de5c <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   166ae:	4608      	mov	r0, r1
   166b0:	f7ff ffca 	bl	16648 <cJSON_strdup.isra.0.constprop.0>
        if (new_key == NULL)
   166b4:	4605      	mov	r5, r0
   166b6:	b118      	cbz	r0, 166c0 <add_item_to_object.constprop.0+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   166b8:	68e6      	ldr	r6, [r4, #12]
   166ba:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   166be:	e7e6      	b.n	1668e <add_item_to_object.constprop.0+0x16>
}
   166c0:	2000      	movs	r0, #0
   166c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   166c4:	2002048c 	.word	0x2002048c

000166c8 <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   166c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   166ca:	4d24      	ldr	r5, [pc, #144]	; (1675c <print.constprop.0+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   166cc:	b08b      	sub	sp, #44	; 0x2c
   166ce:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   166d0:	2224      	movs	r2, #36	; 0x24
   166d2:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   166d4:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   166d6:	a801      	add	r0, sp, #4
   166d8:	f00f fe8e 	bl	263f8 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   166dc:	682b      	ldr	r3, [r5, #0]
   166de:	f44f 7080 	mov.w	r0, #256	; 0x100
   166e2:	4798      	blx	r3
    buffer->length = default_buffer_size;
   166e4:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   166e8:	4603      	mov	r3, r0
    buffer->format = format;
   166ea:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   166ec:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   166ee:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   166f0:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   166f2:	462f      	mov	r7, r5
   166f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   166f8:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   166fc:	b17b      	cbz	r3, 1671e <print.constprop.0+0x56>
    if (!print_value(item, buffer))
   166fe:	4620      	mov	r0, r4
   16700:	a901      	add	r1, sp, #4
   16702:	f7ff fdf1 	bl	162e8 <print_value>
   16706:	b150      	cbz	r0, 1671e <print.constprop.0+0x56>
    update_offset(buffer);
   16708:	a801      	add	r0, sp, #4
   1670a:	f017 fb9a 	bl	2de42 <update_offset>
    if (hooks->reallocate != NULL)
   1670e:	68ae      	ldr	r6, [r5, #8]
   16710:	9903      	ldr	r1, [sp, #12]
   16712:	b15e      	cbz	r6, 1672c <print.constprop.0+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   16714:	9801      	ldr	r0, [sp, #4]
   16716:	3101      	adds	r1, #1
   16718:	47b0      	blx	r6
        if (printed == NULL) {
   1671a:	4604      	mov	r4, r0
   1671c:	b9d0      	cbnz	r0, 16754 <print.constprop.0+0x8c>
    if (buffer->buffer != NULL)
   1671e:	9c01      	ldr	r4, [sp, #4]
   16720:	b1c4      	cbz	r4, 16754 <print.constprop.0+0x8c>
        hooks->deallocate(buffer->buffer);
   16722:	4620      	mov	r0, r4
   16724:	687b      	ldr	r3, [r7, #4]
   16726:	4798      	blx	r3
    return NULL;
   16728:	2400      	movs	r4, #0
   1672a:	e013      	b.n	16754 <print.constprop.0+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   1672c:	682b      	ldr	r3, [r5, #0]
   1672e:	1c48      	adds	r0, r1, #1
   16730:	4798      	blx	r3
        if (printed == NULL)
   16732:	4604      	mov	r4, r0
   16734:	2800      	cmp	r0, #0
   16736:	d0f2      	beq.n	1671e <print.constprop.0+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   16738:	9a03      	ldr	r2, [sp, #12]
   1673a:	9b02      	ldr	r3, [sp, #8]
   1673c:	3201      	adds	r2, #1
   1673e:	429a      	cmp	r2, r3
   16740:	bf28      	it	cs
   16742:	461a      	movcs	r2, r3
   16744:	9901      	ldr	r1, [sp, #4]
   16746:	f7f6 fa01 	bl	cb4c <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   1674a:	9b03      	ldr	r3, [sp, #12]
   1674c:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   1674e:	686b      	ldr	r3, [r5, #4]
   16750:	9801      	ldr	r0, [sp, #4]
   16752:	4798      	blx	r3
}
   16754:	4620      	mov	r0, r4
   16756:	b00b      	add	sp, #44	; 0x2c
   16758:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1675a:	bf00      	nop
   1675c:	2002048c 	.word	0x2002048c

00016760 <cJSON_Delete>:
{
   16760:	b570      	push	{r4, r5, r6, lr}
   16762:	4604      	mov	r4, r0
   16764:	4d0f      	ldr	r5, [pc, #60]	; (167a4 <cJSON_Delete+0x44>)
    while (item != NULL)
   16766:	b904      	cbnz	r4, 1676a <cJSON_Delete+0xa>
}
   16768:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   1676a:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   1676c:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   1676e:	05d9      	lsls	r1, r3, #23
   16770:	d403      	bmi.n	1677a <cJSON_Delete+0x1a>
   16772:	68a0      	ldr	r0, [r4, #8]
   16774:	b968      	cbnz	r0, 16792 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   16776:	6920      	ldr	r0, [r4, #16]
   16778:	b988      	cbnz	r0, 1679e <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   1677a:	68e3      	ldr	r3, [r4, #12]
   1677c:	059b      	lsls	r3, r3, #22
   1677e:	d403      	bmi.n	16788 <cJSON_Delete+0x28>
   16780:	6a20      	ldr	r0, [r4, #32]
   16782:	b108      	cbz	r0, 16788 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   16784:	686b      	ldr	r3, [r5, #4]
   16786:	4798      	blx	r3
        global_hooks.deallocate(item);
   16788:	4620      	mov	r0, r4
   1678a:	686b      	ldr	r3, [r5, #4]
   1678c:	4798      	blx	r3
        item = next;
   1678e:	4634      	mov	r4, r6
   16790:	e7e9      	b.n	16766 <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   16792:	f7ff ffe5 	bl	16760 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   16796:	68e3      	ldr	r3, [r4, #12]
   16798:	05da      	lsls	r2, r3, #23
   1679a:	d5ec      	bpl.n	16776 <cJSON_Delete+0x16>
   1679c:	e7ed      	b.n	1677a <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   1679e:	686b      	ldr	r3, [r5, #4]
   167a0:	4798      	blx	r3
   167a2:	e7ea      	b.n	1677a <cJSON_Delete+0x1a>
   167a4:	2002048c 	.word	0x2002048c

000167a8 <cJSON_CreateString>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   167a8:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   167aa:	4b0a      	ldr	r3, [pc, #40]	; (167d4 <cJSON_CreateString+0x2c>)
{
   167ac:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   167ae:	6818      	ldr	r0, [r3, #0]
   167b0:	f017 fb64 	bl	2de7c <cJSON_New_Item.isra.0>
    if(item)
   167b4:	4604      	mov	r4, r0
   167b6:	b158      	cbz	r0, 167d0 <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   167b8:	2310      	movs	r3, #16
   167ba:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   167bc:	4628      	mov	r0, r5
   167be:	f7ff ff43 	bl	16648 <cJSON_strdup.isra.0.constprop.0>
   167c2:	4605      	mov	r5, r0
   167c4:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   167c6:	b918      	cbnz	r0, 167d0 <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   167c8:	4620      	mov	r0, r4
   167ca:	f7ff ffc9 	bl	16760 <cJSON_Delete>
            return NULL;
   167ce:	462c      	mov	r4, r5
        }
    }

    return item;
}
   167d0:	4620      	mov	r0, r4
   167d2:	bd38      	pop	{r3, r4, r5, pc}
   167d4:	2002048c 	.word	0x2002048c

000167d8 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   167d8:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   167da:	4b04      	ldr	r3, [pc, #16]	; (167ec <cJSON_CreateObject+0x14>)
   167dc:	6818      	ldr	r0, [r3, #0]
   167de:	f017 fb4d 	bl	2de7c <cJSON_New_Item.isra.0>
    if (item)
   167e2:	b108      	cbz	r0, 167e8 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   167e4:	2340      	movs	r3, #64	; 0x40
   167e6:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   167e8:	bd08      	pop	{r3, pc}
   167ea:	bf00      	nop
   167ec:	2002048c 	.word	0x2002048c

000167f0 <_bsdlib_init>:
extern void ipc_proxy_irq_handler(void);

static int init_ret;

static int _bsdlib_init(const struct device *unused)
{
   167f0:	b530      	push	{r4, r5, lr}
	if (!first_time_init) {
   167f2:	4d1c      	ldr	r5, [pc, #112]	; (16864 <_bsdlib_init+0x74>)
   167f4:	4c1c      	ldr	r4, [pc, #112]	; (16868 <_bsdlib_init+0x78>)
   167f6:	782b      	ldrb	r3, [r5, #0]
{
   167f8:	b085      	sub	sp, #20
	if (!first_time_init) {
   167fa:	b933      	cbnz	r3, 1680a <_bsdlib_init+0x1a>
	list->tail = NULL;
   167fc:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   16800:	481a      	ldr	r0, [pc, #104]	; (1686c <_bsdlib_init+0x7c>)
   16802:	f018 f8ba 	bl	2e97a <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   16806:	2301      	movs	r3, #1
   16808:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   1680a:	2200      	movs	r2, #0
   1680c:	202a      	movs	r0, #42	; 0x2a
   1680e:	4611      	mov	r1, r2
   16810:	f7fd ff04 	bl	1461c <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	const bsd_init_params_t init_params = {
   16814:	4a16      	ldr	r2, [pc, #88]	; (16870 <_bsdlib_init+0x80>)
   16816:	ab01      	add	r3, sp, #4
   16818:	ca07      	ldmia	r2, {r0, r1, r2}
   1681a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.trace_on = true,
		.bsd_memory_address = BSD_RESERVED_MEMORY_ADDRESS,
		.bsd_memory_size = BSD_RESERVED_MEMORY_SIZE
	};

	init_ret = bsd_init(&init_params);
   1681e:	4618      	mov	r0, r3
   16820:	f009 faba 	bl	1fd98 <bsd_init>
   16824:	4b13      	ldr	r3, [pc, #76]	; (16874 <_bsdlib_init+0x84>)
   16826:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   16828:	f04f 32ff 	mov.w	r2, #4294967295
   1682c:	f04f 33ff 	mov.w	r3, #4294967295
   16830:	480e      	ldr	r0, [pc, #56]	; (1686c <_bsdlib_init+0x7c>)
   16832:	f00c fbcd 	bl	22fd0 <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   16836:	6820      	ldr	r0, [r4, #0]
   16838:	b170      	cbz	r0, 16858 <_bsdlib_init+0x68>
	return node->next;
   1683a:	6804      	ldr	r4, [r0, #0]
   1683c:	2c00      	cmp	r4, #0
   1683e:	bf38      	it	cc
   16840:	2400      	movcc	r4, #0
	z_impl_k_sem_give(sem);
   16842:	3004      	adds	r0, #4
   16844:	f00e f83e 	bl	248c4 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   16848:	b134      	cbz	r4, 16858 <_bsdlib_init+0x68>
   1684a:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1684c:	4620      	mov	r0, r4
   1684e:	2b00      	cmp	r3, #0
   16850:	bf38      	it	cc
   16852:	2300      	movcc	r3, #0
   16854:	461c      	mov	r4, r3
   16856:	e7f4      	b.n	16842 <_bsdlib_init+0x52>
	return z_impl_k_mutex_unlock(mutex);
   16858:	4804      	ldr	r0, [pc, #16]	; (1686c <_bsdlib_init+0x7c>)
   1685a:	f00c fcb3 	bl	231c4 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   1685e:	2000      	movs	r0, #0
   16860:	b005      	add	sp, #20
   16862:	bd30      	pop	{r4, r5, pc}
   16864:	2002477c 	.word	0x2002477c
   16868:	2002161c 	.word	0x2002161c
   1686c:	20021624 	.word	0x20021624
   16870:	0002f0d0 	.word	0x0002f0d0
   16874:	20021618 	.word	0x20021618

00016878 <bsdlib_shutdown_wait>:

void bsdlib_shutdown_wait(void)
{
   16878:	b530      	push	{r4, r5, lr}
   1687a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   1687c:	2201      	movs	r2, #1
   1687e:	2100      	movs	r1, #0
   16880:	a802      	add	r0, sp, #8
   16882:	f018 f8e7 	bl	2ea54 <z_impl_k_sem_init>
   16886:	ad01      	add	r5, sp, #4
	return z_impl_k_mutex_lock(mutex, timeout);
   16888:	f04f 33ff 	mov.w	r3, #4294967295
   1688c:	f04f 32ff 	mov.w	r2, #4294967295
   16890:	481c      	ldr	r0, [pc, #112]	; (16904 <bsdlib_shutdown_wait+0x8c>)
   16892:	f00c fb9d 	bl	22fd0 <z_impl_k_mutex_lock>
	parent->next = child;
   16896:	2300      	movs	r3, #0
Z_GENLIST_APPEND(slist, snode)
   16898:	4c1b      	ldr	r4, [pc, #108]	; (16908 <bsdlib_shutdown_wait+0x90>)
	parent->next = child;
   1689a:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   1689c:	6863      	ldr	r3, [r4, #4]
   1689e:	bb2b      	cbnz	r3, 168ec <bsdlib_shutdown_wait+0x74>
	list->head = node;
   168a0:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
   168a4:	4817      	ldr	r0, [pc, #92]	; (16904 <bsdlib_shutdown_wait+0x8c>)
   168a6:	f00c fc8d 	bl	231c4 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   168aa:	f04f 32ff 	mov.w	r2, #4294967295
   168ae:	f04f 33ff 	mov.w	r3, #4294967295
   168b2:	a802      	add	r0, sp, #8
   168b4:	f00e f84a 	bl	2494c <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   168b8:	f04f 32ff 	mov.w	r2, #4294967295
   168bc:	f04f 33ff 	mov.w	r3, #4294967295
   168c0:	4810      	ldr	r0, [pc, #64]	; (16904 <bsdlib_shutdown_wait+0x8c>)
   168c2:	f00c fb85 	bl	22fd0 <z_impl_k_mutex_lock>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   168c6:	2200      	movs	r2, #0
   168c8:	6823      	ldr	r3, [r4, #0]
   168ca:	b153      	cbz	r3, 168e2 <bsdlib_shutdown_wait+0x6a>
   168cc:	42ab      	cmp	r3, r5
   168ce:	d116      	bne.n	168fe <bsdlib_shutdown_wait+0x86>
Z_GENLIST_REMOVE(slist, snode)
   168d0:	9901      	ldr	r1, [sp, #4]
   168d2:	b972      	cbnz	r2, 168f2 <bsdlib_shutdown_wait+0x7a>
   168d4:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   168d6:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   168d8:	429a      	cmp	r2, r3
   168da:	d100      	bne.n	168de <bsdlib_shutdown_wait+0x66>
	list->tail = node;
   168dc:	6061      	str	r1, [r4, #4]
	parent->next = child;
   168de:	2300      	movs	r3, #0
   168e0:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   168e2:	4808      	ldr	r0, [pc, #32]	; (16904 <bsdlib_shutdown_wait+0x8c>)
   168e4:	f00c fc6e 	bl	231c4 <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   168e8:	b009      	add	sp, #36	; 0x24
   168ea:	bd30      	pop	{r4, r5, pc}
   168ec:	601d      	str	r5, [r3, #0]
	list->tail = node;
   168ee:	6065      	str	r5, [r4, #4]
}
   168f0:	e7d8      	b.n	168a4 <bsdlib_shutdown_wait+0x2c>
	parent->next = child;
   168f2:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   168f4:	6861      	ldr	r1, [r4, #4]
   168f6:	4299      	cmp	r1, r3
	list->tail = node;
   168f8:	bf08      	it	eq
   168fa:	6062      	streq	r2, [r4, #4]
}
   168fc:	e7ef      	b.n	168de <bsdlib_shutdown_wait+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   168fe:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16900:	681b      	ldr	r3, [r3, #0]
   16902:	e7e2      	b.n	168ca <bsdlib_shutdown_wait+0x52>
   16904:	20021624 	.word	0x20021624
   16908:	2002161c 	.word	0x2002161c

0001690c <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   1690c:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   1690e:	4c0d      	ldr	r4, [pc, #52]	; (16944 <thread_monitor_entry_get+0x38>)
{
   16910:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   16912:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   16914:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   16916:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   16918:	4b0b      	ldr	r3, [pc, #44]	; (16948 <thread_monitor_entry_get+0x3c>)
   1691a:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   1691c:	6801      	ldr	r1, [r0, #0]
   1691e:	4291      	cmp	r1, r2
   16920:	d00e      	beq.n	16940 <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   16922:	b151      	cbz	r1, 1693a <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   16924:	6841      	ldr	r1, [r0, #4]
   16926:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   16928:	42b1      	cmp	r1, r6
   1692a:	bfc4      	itt	gt
   1692c:	4604      	movgt	r4, r0
   1692e:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   16930:	3d01      	subs	r5, #1
   16932:	f100 0008 	add.w	r0, r0, #8
   16936:	d1f1      	bne.n	1691c <thread_monitor_entry_get+0x10>
   16938:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   1693a:	3b01      	subs	r3, #1
	new_entry->id = id;
   1693c:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   1693e:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   16940:	bd70      	pop	{r4, r5, r6, pc}
   16942:	bf00      	nop
   16944:	20021644 	.word	0x20021644
   16948:	20021638 	.word	0x20021638

0001694c <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1694c:	4668      	mov	r0, sp
   1694e:	f020 0107 	bic.w	r1, r0, #7
   16952:	468d      	mov	sp, r1
   16954:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   16956:	4b0f      	ldr	r3, [pc, #60]	; (16994 <rpc_proxy_irq_handler+0x48>)
   16958:	e8d3 2fef 	ldaex	r2, [r3]
   1695c:	3201      	adds	r2, #1
   1695e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   16962:	2900      	cmp	r1, #0
   16964:	d1f8      	bne.n	16958 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   16966:	f003 fe79 	bl	1a65c <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1696a:	4b0b      	ldr	r3, [pc, #44]	; (16998 <rpc_proxy_irq_handler+0x4c>)
   1696c:	681c      	ldr	r4, [r3, #0]
   1696e:	2c00      	cmp	r4, #0
   16970:	bf38      	it	cc
   16972:	2400      	movcc	r4, #0
   16974:	b12c      	cbz	r4, 16982 <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
   16976:	1d20      	adds	r0, r4, #4
   16978:	f00d ffa4 	bl	248c4 <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1697c:	6824      	ldr	r4, [r4, #0]
   1697e:	2c00      	cmp	r4, #0
   16980:	d1f8      	bne.n	16974 <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   16982:	f7fd fe7d 	bl	14680 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   16986:	f7fe fa23 	bl	14dd0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1698a:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   1698e:	4685      	mov	sp, r0
   16990:	4770      	bx	lr
   16992:	bf00      	nop
   16994:	20021638 	.word	0x20021638
   16998:	2002163c 	.word	0x2002163c

0001699c <bsd_os_timedwait>:
{
   1699c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169a0:	460c      	mov	r4, r1
   169a2:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   169a4:	f018 f8db 	bl	2eb5e <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   169a8:	6823      	ldr	r3, [r4, #0]
   169aa:	4680      	mov	r8, r0
   169ac:	2b00      	cmp	r3, #0
   169ae:	468a      	mov	sl, r1
   169b0:	d103      	bne.n	169ba <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   169b2:	f00d fe03 	bl	245bc <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   169b6:	203c      	movs	r0, #60	; 0x3c
   169b8:	e091      	b.n	16ade <bsd_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   169ba:	bfbc      	itt	lt
   169bc:	f04f 33ff 	movlt.w	r3, #4294967295
   169c0:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   169c2:	2201      	movs	r2, #1
   169c4:	2100      	movs	r1, #0
   169c6:	a802      	add	r0, sp, #8
   169c8:	f018 f844 	bl	2ea54 <z_impl_k_sem_init>
   169cc:	ad01      	add	r5, sp, #4
   169ce:	f04f 0320 	mov.w	r3, #32
   169d2:	f3ef 8b11 	mrs	fp, BASEPRI
   169d6:	f383 8811 	msr	BASEPRI, r3
   169da:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   169de:	f00d ff6b 	bl	248b8 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   169e2:	f7ff ff93 	bl	1690c <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   169e6:	4947      	ldr	r1, [pc, #284]	; (16b04 <bsd_os_timedwait+0x168>)
   169e8:	6843      	ldr	r3, [r0, #4]
   169ea:	680a      	ldr	r2, [r1, #0]
   169ec:	4689      	mov	r9, r1
   169ee:	4293      	cmp	r3, r2
   169f0:	f04f 0300 	mov.w	r3, #0
   169f4:	d108      	bne.n	16a08 <bsd_os_timedwait+0x6c>
	parent->next = child;
   169f6:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   169f8:	4b43      	ldr	r3, [pc, #268]	; (16b08 <bsd_os_timedwait+0x16c>)
   169fa:	685a      	ldr	r2, [r3, #4]
   169fc:	2a00      	cmp	r2, #0
   169fe:	d171      	bne.n	16ae4 <bsd_os_timedwait+0x148>
	list->head = node;
   16a00:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   16a04:	2301      	movs	r3, #1
}
   16a06:	e000      	b.n	16a0a <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   16a08:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   16a0a:	f38b 8811 	msr	BASEPRI, fp
   16a0e:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   16a12:	2b00      	cmp	r3, #0
   16a14:	d062      	beq.n	16adc <bsd_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   16a16:	6823      	ldr	r3, [r4, #0]
   16a18:	1c5a      	adds	r2, r3, #1
   16a1a:	d066      	beq.n	16aea <bsd_os_timedwait+0x14e>
   16a1c:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   16a20:	f240 30e7 	movw	r0, #999	; 0x3e7
   16a24:	2100      	movs	r1, #0
   16a26:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   16a2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16a2e:	2300      	movs	r3, #0
   16a30:	fbce 010c 	smlal	r0, r1, lr, ip
   16a34:	f7f5 ff10 	bl	c858 <__aeabi_uldivmod>
   16a38:	4602      	mov	r2, r0
   16a3a:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   16a3c:	a802      	add	r0, sp, #8
   16a3e:	f00d ff85 	bl	2494c <z_impl_k_sem_take>
	__asm__ volatile(
   16a42:	f04f 0320 	mov.w	r3, #32
   16a46:	f3ef 8b11 	mrs	fp, BASEPRI
   16a4a:	f383 8811 	msr	BASEPRI, r3
   16a4e:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16a52:	2000      	movs	r0, #0
   16a54:	4b2c      	ldr	r3, [pc, #176]	; (16b08 <bsd_os_timedwait+0x16c>)
   16a56:	681a      	ldr	r2, [r3, #0]
   16a58:	b15a      	cbz	r2, 16a72 <bsd_os_timedwait+0xd6>
   16a5a:	42aa      	cmp	r2, r5
   16a5c:	d14f      	bne.n	16afe <bsd_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   16a5e:	9d01      	ldr	r5, [sp, #4]
   16a60:	2800      	cmp	r0, #0
   16a62:	d146      	bne.n	16af2 <bsd_os_timedwait+0x156>
   16a64:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   16a66:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   16a68:	4291      	cmp	r1, r2
   16a6a:	d100      	bne.n	16a6e <bsd_os_timedwait+0xd2>
	list->tail = node;
   16a6c:	605d      	str	r5, [r3, #4]
	parent->next = child;
   16a6e:	2300      	movs	r3, #0
   16a70:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   16a72:	f00d ff21 	bl	248b8 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   16a76:	f7ff ff49 	bl	1690c <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   16a7a:	f8d9 3000 	ldr.w	r3, [r9]
   16a7e:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   16a80:	f38b 8811 	msr	BASEPRI, fp
   16a84:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   16a88:	6825      	ldr	r5, [r4, #0]
   16a8a:	1c6b      	adds	r3, r5, #1
   16a8c:	d026      	beq.n	16adc <bsd_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   16a8e:	f018 f866 	bl	2eb5e <z_impl_k_uptime_ticks>
   16a92:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   16a96:	468e      	mov	lr, r1
   16a98:	fba8 890c 	umull	r8, r9, r8, ip
   16a9c:	fba0 010c 	umull	r0, r1, r0, ip
   16aa0:	fb0c 990a 	mla	r9, ip, sl, r9
   16aa4:	fb0c 110e 	mla	r1, ip, lr, r1
   16aa8:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   16aac:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   16ab0:	1952      	adds	r2, r2, r5
   16ab2:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   16ab6:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   16aba:	0bc5      	lsrs	r5, r0, #15
   16abc:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   16ac0:	1b56      	subs	r6, r2, r5
   16ac2:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   16ac6:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   16aca:	2e00      	cmp	r6, #0
   16acc:	f177 0300 	sbcs.w	r3, r7, #0
   16ad0:	bfb8      	it	lt
   16ad2:	2600      	movlt	r6, #0
   16ad4:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   16ad6:	2e00      	cmp	r6, #0
   16ad8:	f43f af6d 	beq.w	169b6 <bsd_os_timedwait+0x1a>
	return 0;
   16adc:	2000      	movs	r0, #0
}
   16ade:	b009      	add	sp, #36	; 0x24
   16ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ae4:	6015      	str	r5, [r2, #0]
	list->tail = node;
   16ae6:	605d      	str	r5, [r3, #4]
   16ae8:	e78c      	b.n	16a04 <bsd_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   16aea:	f04f 32ff 	mov.w	r2, #4294967295
   16aee:	4613      	mov	r3, r2
   16af0:	e7a4      	b.n	16a3c <bsd_os_timedwait+0xa0>
	parent->next = child;
   16af2:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   16af4:	6859      	ldr	r1, [r3, #4]
   16af6:	4291      	cmp	r1, r2
	list->tail = node;
   16af8:	bf08      	it	eq
   16afa:	6058      	streq	r0, [r3, #4]
}
   16afc:	e7b7      	b.n	16a6e <bsd_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16afe:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16b00:	6812      	ldr	r2, [r2, #0]
   16b02:	e7a9      	b.n	16a58 <bsd_os_timedwait+0xbc>
   16b04:	20021638 	.word	0x20021638
   16b08:	2002163c 	.word	0x2002163c

00016b0c <bsd_os_errno_set>:
	switch (err_code) {
   16b0c:	283c      	cmp	r0, #60	; 0x3c
{
   16b0e:	b510      	push	{r4, lr}
   16b10:	4604      	mov	r4, r0
	switch (err_code) {
   16b12:	f300 809f 	bgt.w	16c54 <bsd_os_errno_set+0x148>
   16b16:	2800      	cmp	r0, #0
   16b18:	dc1e      	bgt.n	16b58 <bsd_os_errno_set+0x4c>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   16b1a:	f240 134d 	movw	r3, #333	; 0x14d
   16b1e:	4ab9      	ldr	r2, [pc, #740]	; (16e04 <bsd_os_errno_set+0x2f8>)
   16b20:	49b9      	ldr	r1, [pc, #740]	; (16e08 <bsd_os_errno_set+0x2fc>)
   16b22:	48ba      	ldr	r0, [pc, #744]	; (16e0c <bsd_os_errno_set+0x300>)
   16b24:	f015 fc85 	bl	2c432 <printk>
   16b28:	4621      	mov	r1, r4
   16b2a:	48b9      	ldr	r0, [pc, #740]	; (16e10 <bsd_os_errno_set+0x304>)
   16b2c:	f015 fc81 	bl	2c432 <printk>
   16b30:	f240 114d 	movw	r1, #333	; 0x14d
   16b34:	48b3      	ldr	r0, [pc, #716]	; (16e04 <bsd_os_errno_set+0x2f8>)
   16b36:	f015 fe99 	bl	2c86c <assert_post_action>
   16b3a:	4bb6      	ldr	r3, [pc, #728]	; (16e14 <bsd_os_errno_set+0x308>)
   16b3c:	4ab6      	ldr	r2, [pc, #728]	; (16e18 <bsd_os_errno_set+0x30c>)
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   16b3e:	4621      	mov	r1, r4
   16b40:	1ad2      	subs	r2, r2, r3
   16b42:	08d2      	lsrs	r2, r2, #3
   16b44:	0192      	lsls	r2, r2, #6
   16b46:	48b5      	ldr	r0, [pc, #724]	; (16e1c <bsd_os_errno_set+0x310>)
   16b48:	f042 0201 	orr.w	r2, r2, #1
   16b4c:	f015 fecd 	bl	2c8ea <log_1>
		errno = 0xBAADBAAD;
   16b50:	f016 fabd 	bl	2d0ce <__errno>
   16b54:	4bb2      	ldr	r3, [pc, #712]	; (16e20 <bsd_os_errno_set+0x314>)
   16b56:	e0be      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
   16b58:	1e43      	subs	r3, r0, #1
   16b5a:	2b3b      	cmp	r3, #59	; 0x3b
   16b5c:	d8dd      	bhi.n	16b1a <bsd_os_errno_set+0xe>
   16b5e:	a201      	add	r2, pc, #4	; (adr r2, 16b64 <bsd_os_errno_set+0x58>)
   16b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16b64:	00016cd1 	.word	0x00016cd1
   16b68:	00016cdb 	.word	0x00016cdb
   16b6c:	00016b1b 	.word	0x00016b1b
   16b70:	00016b1b 	.word	0x00016b1b
   16b74:	00016ce3 	.word	0x00016ce3
   16b78:	00016b1b 	.word	0x00016b1b
   16b7c:	00016b1b 	.word	0x00016b1b
   16b80:	00016ceb 	.word	0x00016ceb
   16b84:	00016cf3 	.word	0x00016cf3
   16b88:	00016b1b 	.word	0x00016b1b
   16b8c:	00016b1b 	.word	0x00016b1b
   16b90:	00016cfb 	.word	0x00016cfb
   16b94:	00016d03 	.word	0x00016d03
   16b98:	00016d0b 	.word	0x00016d0b
   16b9c:	00016b1b 	.word	0x00016b1b
   16ba0:	00016b1b 	.word	0x00016b1b
   16ba4:	00016b1b 	.word	0x00016b1b
   16ba8:	00016b1b 	.word	0x00016b1b
   16bac:	00016b1b 	.word	0x00016b1b
   16bb0:	00016b1b 	.word	0x00016b1b
   16bb4:	00016b1b 	.word	0x00016b1b
   16bb8:	00016d13 	.word	0x00016d13
   16bbc:	00016b1b 	.word	0x00016b1b
   16bc0:	00016d1b 	.word	0x00016d1b
   16bc4:	00016b1b 	.word	0x00016b1b
   16bc8:	00016b1b 	.word	0x00016b1b
   16bcc:	00016b1b 	.word	0x00016b1b
   16bd0:	00016b1b 	.word	0x00016b1b
   16bd4:	00016b1b 	.word	0x00016b1b
   16bd8:	00016b1b 	.word	0x00016b1b
   16bdc:	00016b1b 	.word	0x00016b1b
   16be0:	00016b1b 	.word	0x00016b1b
   16be4:	00016b1b 	.word	0x00016b1b
   16be8:	00016b1b 	.word	0x00016b1b
   16bec:	00016d23 	.word	0x00016d23
   16bf0:	00016b1b 	.word	0x00016b1b
   16bf4:	00016d2b 	.word	0x00016d2b
   16bf8:	00016b1b 	.word	0x00016b1b
   16bfc:	00016b1b 	.word	0x00016b1b
   16c00:	00016df3 	.word	0x00016df3
   16c04:	00016d33 	.word	0x00016d33
   16c08:	00016d3b 	.word	0x00016d3b
   16c0c:	00016d43 	.word	0x00016d43
   16c10:	00016d4b 	.word	0x00016d4b
   16c14:	00016d53 	.word	0x00016d53
   16c18:	00016b1b 	.word	0x00016b1b
   16c1c:	00016d5b 	.word	0x00016d5b
   16c20:	00016d63 	.word	0x00016d63
   16c24:	00016b1b 	.word	0x00016b1b
   16c28:	00016d6b 	.word	0x00016d6b
   16c2c:	00016d73 	.word	0x00016d73
   16c30:	00016d7b 	.word	0x00016d7b
   16c34:	00016dfb 	.word	0x00016dfb
   16c38:	00016d83 	.word	0x00016d83
   16c3c:	00016b1b 	.word	0x00016b1b
   16c40:	00016d8b 	.word	0x00016d8b
   16c44:	00016d93 	.word	0x00016d93
   16c48:	00016b1b 	.word	0x00016b1b
   16c4c:	00016b1b 	.word	0x00016b1b
   16c50:	00016d9b 	.word	0x00016d9b
	switch (err_code) {
   16c54:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   16c58:	2b18      	cmp	r3, #24
   16c5a:	f63f af5e 	bhi.w	16b1a <bsd_os_errno_set+0xe>
   16c5e:	2b18      	cmp	r3, #24
   16c60:	f63f af5b 	bhi.w	16b1a <bsd_os_errno_set+0xe>
   16c64:	a201      	add	r2, pc, #4	; (adr r2, 16c6c <bsd_os_errno_set+0x160>)
   16c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16c6a:	bf00      	nop
   16c6c:	00016da3 	.word	0x00016da3
   16c70:	00016b1b 	.word	0x00016b1b
   16c74:	00016b1b 	.word	0x00016b1b
   16c78:	00016b1b 	.word	0x00016b1b
   16c7c:	00016b1b 	.word	0x00016b1b
   16c80:	00016b1b 	.word	0x00016b1b
   16c84:	00016b1b 	.word	0x00016b1b
   16c88:	00016dab 	.word	0x00016dab
   16c8c:	00016b1b 	.word	0x00016b1b
   16c90:	00016dbb 	.word	0x00016dbb
   16c94:	00016db3 	.word	0x00016db3
   16c98:	00016b1b 	.word	0x00016b1b
   16c9c:	00016b1b 	.word	0x00016b1b
   16ca0:	00016b1b 	.word	0x00016b1b
   16ca4:	00016b1b 	.word	0x00016b1b
   16ca8:	00016b1b 	.word	0x00016b1b
   16cac:	00016b1b 	.word	0x00016b1b
   16cb0:	00016b1b 	.word	0x00016b1b
   16cb4:	00016b1b 	.word	0x00016b1b
   16cb8:	00016b1b 	.word	0x00016b1b
   16cbc:	00016dc3 	.word	0x00016dc3
   16cc0:	00016dcb 	.word	0x00016dcb
   16cc4:	00016dd5 	.word	0x00016dd5
   16cc8:	00016ddf 	.word	0x00016ddf
   16ccc:	00016de9 	.word	0x00016de9
		errno = EPERM;
   16cd0:	f016 f9fd 	bl	2d0ce <__errno>
   16cd4:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   16cd6:	6003      	str	r3, [r0, #0]
}
   16cd8:	bd10      	pop	{r4, pc}
		errno = ENOENT;
   16cda:	f016 f9f8 	bl	2d0ce <__errno>
   16cde:	2302      	movs	r3, #2
   16ce0:	e7f9      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EIO;
   16ce2:	f016 f9f4 	bl	2d0ce <__errno>
   16ce6:	2305      	movs	r3, #5
   16ce8:	e7f5      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = ENOEXEC;
   16cea:	f016 f9f0 	bl	2d0ce <__errno>
   16cee:	2308      	movs	r3, #8
   16cf0:	e7f1      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EBADF;
   16cf2:	f016 f9ec 	bl	2d0ce <__errno>
   16cf6:	2309      	movs	r3, #9
   16cf8:	e7ed      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = ENOMEM;
   16cfa:	f016 f9e8 	bl	2d0ce <__errno>
   16cfe:	230c      	movs	r3, #12
   16d00:	e7e9      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EACCES;
   16d02:	f016 f9e4 	bl	2d0ce <__errno>
   16d06:	230d      	movs	r3, #13
   16d08:	e7e5      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EFAULT;
   16d0a:	f016 f9e0 	bl	2d0ce <__errno>
   16d0e:	230e      	movs	r3, #14
   16d10:	e7e1      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EINVAL;
   16d12:	f016 f9dc 	bl	2d0ce <__errno>
   16d16:	2316      	movs	r3, #22
   16d18:	e7dd      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EMFILE;
   16d1a:	f016 f9d8 	bl	2d0ce <__errno>
   16d1e:	2318      	movs	r3, #24
   16d20:	e7d9      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EAGAIN;
   16d22:	f016 f9d4 	bl	2d0ce <__errno>
   16d26:	230b      	movs	r3, #11
   16d28:	e7d5      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EDOM;
   16d2a:	f016 f9d0 	bl	2d0ce <__errno>
   16d2e:	2321      	movs	r3, #33	; 0x21
   16d30:	e7d1      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EPROTOTYPE;
   16d32:	f016 f9cc 	bl	2d0ce <__errno>
   16d36:	236b      	movs	r3, #107	; 0x6b
   16d38:	e7cd      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = ENOPROTOOPT;
   16d3a:	f016 f9c8 	bl	2d0ce <__errno>
   16d3e:	236d      	movs	r3, #109	; 0x6d
   16d40:	e7c9      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EPROTONOSUPPORT;
   16d42:	f016 f9c4 	bl	2d0ce <__errno>
   16d46:	237b      	movs	r3, #123	; 0x7b
   16d48:	e7c5      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = ESOCKTNOSUPPORT;
   16d4a:	f016 f9c0 	bl	2d0ce <__errno>
   16d4e:	237c      	movs	r3, #124	; 0x7c
   16d50:	e7c1      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EOPNOTSUPP;
   16d52:	f016 f9bc 	bl	2d0ce <__errno>
   16d56:	235f      	movs	r3, #95	; 0x5f
   16d58:	e7bd      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EAFNOSUPPORT;
   16d5a:	f016 f9b8 	bl	2d0ce <__errno>
   16d5e:	236a      	movs	r3, #106	; 0x6a
   16d60:	e7b9      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EADDRINUSE;
   16d62:	f016 f9b4 	bl	2d0ce <__errno>
   16d66:	2370      	movs	r3, #112	; 0x70
   16d68:	e7b5      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = ENETDOWN;
   16d6a:	f016 f9b0 	bl	2d0ce <__errno>
   16d6e:	2373      	movs	r3, #115	; 0x73
   16d70:	e7b1      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = ENETUNREACH;
   16d72:	f016 f9ac 	bl	2d0ce <__errno>
   16d76:	2372      	movs	r3, #114	; 0x72
   16d78:	e7ad      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = ENETRESET;
   16d7a:	f016 f9a8 	bl	2d0ce <__errno>
   16d7e:	237e      	movs	r3, #126	; 0x7e
   16d80:	e7a9      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = ECONNRESET;
   16d82:	f016 f9a4 	bl	2d0ce <__errno>
   16d86:	2368      	movs	r3, #104	; 0x68
   16d88:	e7a5      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EISCONN;
   16d8a:	f016 f9a0 	bl	2d0ce <__errno>
   16d8e:	237f      	movs	r3, #127	; 0x7f
   16d90:	e7a1      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = ENOTCONN;
   16d92:	f016 f99c 	bl	2d0ce <__errno>
   16d96:	2380      	movs	r3, #128	; 0x80
   16d98:	e79d      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = ETIMEDOUT;
   16d9a:	f016 f998 	bl	2d0ce <__errno>
   16d9e:	2374      	movs	r3, #116	; 0x74
   16da0:	e799      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = ENOBUFS;
   16da2:	f016 f994 	bl	2d0ce <__errno>
   16da6:	2369      	movs	r3, #105	; 0x69
   16da8:	e795      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EHOSTDOWN;
   16daa:	f016 f990 	bl	2d0ce <__errno>
   16dae:	2375      	movs	r3, #117	; 0x75
   16db0:	e791      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EINPROGRESS;
   16db2:	f016 f98c 	bl	2d0ce <__errno>
   16db6:	2377      	movs	r3, #119	; 0x77
   16db8:	e78d      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EALREADY;
   16dba:	f016 f988 	bl	2d0ce <__errno>
   16dbe:	2378      	movs	r3, #120	; 0x78
   16dc0:	e789      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = ECANCELED;
   16dc2:	f016 f984 	bl	2d0ce <__errno>
   16dc6:	238c      	movs	r3, #140	; 0x8c
   16dc8:	e785      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = ENOKEY;
   16dca:	f016 f980 	bl	2d0ce <__errno>
   16dce:	f240 73d1 	movw	r3, #2001	; 0x7d1
   16dd2:	e780      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EKEYEXPIRED;
   16dd4:	f016 f97b 	bl	2d0ce <__errno>
   16dd8:	f240 73d2 	movw	r3, #2002	; 0x7d2
   16ddc:	e77b      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EKEYREVOKED;
   16dde:	f016 f976 	bl	2d0ce <__errno>
   16de2:	f240 73d3 	movw	r3, #2003	; 0x7d3
   16de6:	e776      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EKEYREJECTED;
   16de8:	f016 f971 	bl	2d0ce <__errno>
   16dec:	f240 73d4 	movw	r3, #2004	; 0x7d4
   16df0:	e771      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = EMSGSIZE;
   16df2:	f016 f96c 	bl	2d0ce <__errno>
   16df6:	237a      	movs	r3, #122	; 0x7a
   16df8:	e76d      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
		errno = ECONNABORTED;
   16dfa:	f016 f968 	bl	2d0ce <__errno>
   16dfe:	2371      	movs	r3, #113	; 0x71
   16e00:	e769      	b.n	16cd6 <bsd_os_errno_set+0x1ca>
   16e02:	bf00      	nop
   16e04:	00031620 	.word	0x00031620
   16e08:	00032fcf 	.word	0x00032fcf
   16e0c:	00030166 	.word	0x00030166
   16e10:	00031644 	.word	0x00031644
   16e14:	0002eff4 	.word	0x0002eff4
   16e18:	0002f00c 	.word	0x0002f00c
   16e1c:	0003166b 	.word	0x0003166b
   16e20:	baadbaad 	.word	0xbaadbaad

00016e24 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   16e28:	4b01      	ldr	r3, [pc, #4]	; (16e30 <bsd_os_application_irq_set+0xc>)
   16e2a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   16e2e:	4770      	bx	lr
   16e30:	e000e100 	.word	0xe000e100

00016e34 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   16e38:	4b01      	ldr	r3, [pc, #4]	; (16e40 <bsd_os_application_irq_clear+0xc>)
   16e3a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   16e3e:	4770      	bx	lr
   16e40:	e000e100 	.word	0xe000e100

00016e44 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16e44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   16e48:	4b01      	ldr	r3, [pc, #4]	; (16e50 <bsd_os_trace_irq_set+0xc>)
   16e4a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   16e4e:	4770      	bx	lr
   16e50:	e000e100 	.word	0xe000e100

00016e54 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16e54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   16e58:	4b01      	ldr	r3, [pc, #4]	; (16e60 <bsd_os_trace_irq_clear+0xc>)
   16e5a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   16e5e:	4770      	bx	lr
   16e60:	e000e100 	.word	0xe000e100

00016e64 <trace_uart_init>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(BSD_APPLICATION_IRQ);
}

void trace_uart_init(void)
{
   16e64:	b500      	push	{lr}
   16e66:	b089      	sub	sp, #36	; 0x24
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* UART pins are defined in "nrf9160dk_nrf9160.dts". */
	const nrfx_uarte_config_t config = {
   16e68:	2218      	movs	r2, #24
   16e6a:	2100      	movs	r1, #0
   16e6c:	a802      	add	r0, sp, #8
   16e6e:	f00f fac3 	bl	263f8 <memset>
   16e72:	2301      	movs	r3, #1
   16e74:	9301      	str	r3, [sp, #4]
   16e76:	f04f 33ff 	mov.w	r3, #4294967295
   16e7a:	e9cd 3303 	strd	r3, r3, [sp, #12]
   16e7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   16e82:	9306      	str	r3, [sp, #24]
   16e84:	2307      	movs	r3, #7
		.p_context = NULL,
	};

	/* Initialize nrfx UARTE driver in blocking mode. */
	/* TODO: use UARTE in non-blocking mode with IRQ handler. */
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   16e86:	2200      	movs	r2, #0
   16e88:	a901      	add	r1, sp, #4
   16e8a:	4804      	ldr	r0, [pc, #16]	; (16e9c <trace_uart_init+0x38>)
	const nrfx_uarte_config_t config = {
   16e8c:	f88d 301c 	strb.w	r3, [sp, #28]
	nrfx_uarte_init(&uarte_inst, &config, NULL);
   16e90:	f00b f9cc 	bl	2222c <nrfx_uarte_init>
#endif
}
   16e94:	b009      	add	sp, #36	; 0x24
   16e96:	f85d fb04 	ldr.w	pc, [sp], #4
   16e9a:	bf00      	nop
   16e9c:	0002f388 	.word	0x0002f388

00016ea0 <bsd_os_init>:

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   16ea0:	b508      	push	{r3, lr}
	list->head = NULL;
   16ea2:	2300      	movs	r3, #0
   16ea4:	4a08      	ldr	r2, [pc, #32]	; (16ec8 <bsd_os_init+0x28>)
	list->tail = NULL;
   16ea6:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16eaa:	4a08      	ldr	r2, [pc, #32]	; (16ecc <bsd_os_init+0x2c>)
   16eac:	e8d2 1fef 	ldaex	r1, [r2]
   16eb0:	e8c2 3fe0 	stlex	r0, r3, [r2]
   16eb4:	2800      	cmp	r0, #0
   16eb6:	d1f9      	bne.n	16eac <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   16eb8:	f017 f86f 	bl	2df9a <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
   16ebc:	f7ff ffd2 	bl	16e64 <trace_uart_init>
	trace_task_create();
}
   16ec0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   16ec4:	f017 b85e 	b.w	2df84 <trace_task_create>
   16ec8:	2002163c 	.word	0x2002163c
   16ecc:	20021638 	.word	0x20021638

00016ed0 <bsd_os_trace_put>:

int32_t bsd_os_trace_put(const uint8_t * const data, uint32_t len)
{
   16ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ed4:	4606      	mov	r6, r0
   16ed6:	460d      	mov	r5, r1
#ifdef CONFIG_BSD_LIBRARY_TRACE_ENABLED
	/* Max DMA transfers are 255 bytes.
	 * Split RAM buffer into smaller chunks
	 * to be transferred using DMA.
	 */
	uint32_t remaining_bytes = len;
   16ed8:	460c      	mov	r4, r1

	while (remaining_bytes) {
		uint8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
		uint32_t idx = len - remaining_bytes;

		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   16eda:	f8df 8024 	ldr.w	r8, [pc, #36]	; 16f00 <bsd_os_trace_put+0x30>
	while (remaining_bytes) {
   16ede:	b914      	cbnz	r4, 16ee6 <bsd_os_trace_put+0x16>
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   16ee0:	4620      	mov	r0, r4
   16ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint8_t transfer_len = MIN(remaining_bytes, UINT8_MAX);
   16ee6:	2cff      	cmp	r4, #255	; 0xff
   16ee8:	4627      	mov	r7, r4
   16eea:	bf28      	it	cs
   16eec:	27ff      	movcs	r7, #255	; 0xff
		uint32_t idx = len - remaining_bytes;
   16eee:	1b29      	subs	r1, r5, r4
		nrfx_uarte_tx(&uarte_inst, &data[idx], transfer_len);
   16ef0:	463a      	mov	r2, r7
   16ef2:	4640      	mov	r0, r8
   16ef4:	4431      	add	r1, r6
   16ef6:	f00b fa7b 	bl	223f0 <nrfx_uarte_tx>
		remaining_bytes -= transfer_len;
   16efa:	1be4      	subs	r4, r4, r7
   16efc:	e7ef      	b.n	16ede <bsd_os_trace_put+0xe>
   16efe:	bf00      	nop
   16f00:	0002f388 	.word	0x0002f388

00016f04 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   16f04:	f240 2302 	movw	r3, #514	; 0x202
   16f08:	4298      	cmp	r0, r3
   16f0a:	f000 8087 	beq.w	1701c <z_to_nrf_optname+0x118>
   16f0e:	dc07      	bgt.n	16f20 <z_to_nrf_optname+0x1c>
   16f10:	2801      	cmp	r0, #1
   16f12:	d040      	beq.n	16f96 <z_to_nrf_optname+0x92>
   16f14:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   16f18:	d034      	beq.n	16f84 <z_to_nrf_optname+0x80>
   16f1a:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   16f1e:	4770      	bx	lr
	switch (z_in_level) {
   16f20:	f240 2303 	movw	r3, #515	; 0x203
   16f24:	4298      	cmp	r0, r3
   16f26:	d1f8      	bne.n	16f1a <z_to_nrf_optname+0x16>
		switch (z_in_optname) {
   16f28:	3901      	subs	r1, #1
   16f2a:	2913      	cmp	r1, #19
   16f2c:	d8f5      	bhi.n	16f1a <z_to_nrf_optname+0x16>
   16f2e:	a301      	add	r3, pc, #4	; (adr r3, 16f34 <z_to_nrf_optname+0x30>)
   16f30:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   16f34:	0001702b 	.word	0x0001702b
   16f38:	00017005 	.word	0x00017005
   16f3c:	00017009 	.word	0x00017009
   16f40:	00016fa7 	.word	0x00016fa7
   16f44:	0001700d 	.word	0x0001700d
   16f48:	00017011 	.word	0x00017011
   16f4c:	00017015 	.word	0x00017015
   16f50:	00016f1b 	.word	0x00016f1b
   16f54:	00016f1b 	.word	0x00016f1b
   16f58:	00016f1b 	.word	0x00016f1b
   16f5c:	00016f1b 	.word	0x00016f1b
   16f60:	00016f1b 	.word	0x00016f1b
   16f64:	00016f1b 	.word	0x00016f1b
   16f68:	00016f1b 	.word	0x00016f1b
   16f6c:	00016f1b 	.word	0x00016f1b
   16f70:	00016f1b 	.word	0x00016f1b
   16f74:	00016f1b 	.word	0x00016f1b
   16f78:	00016f1b 	.word	0x00016f1b
   16f7c:	00016f1b 	.word	0x00016f1b
   16f80:	00017019 	.word	0x00017019
		switch (z_in_optname) {
   16f84:	3901      	subs	r1, #1
   16f86:	2906      	cmp	r1, #6
   16f88:	d8c7      	bhi.n	16f1a <z_to_nrf_optname+0x16>
   16f8a:	e8df f001 	tbb	[pc, r1]
   16f8e:	3f3b      	.short	0x3f3b
   16f90:	4e0c4341 	.word	0x4e0c4341
   16f94:	3d          	.byte	0x3d
   16f95:	00          	.byte	0x00
		switch (z_in_optname) {
   16f96:	2920      	cmp	r1, #32
   16f98:	dcbf      	bgt.n	16f1a <z_to_nrf_optname+0x16>
   16f9a:	2913      	cmp	r1, #19
   16f9c:	dc05      	bgt.n	16faa <z_to_nrf_optname+0xa6>
   16f9e:	2902      	cmp	r1, #2
   16fa0:	d028      	beq.n	16ff4 <z_to_nrf_optname+0xf0>
   16fa2:	2904      	cmp	r1, #4
   16fa4:	d1b9      	bne.n	16f1a <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   16fa6:	2304      	movs	r3, #4
   16fa8:	e040      	b.n	1702c <z_to_nrf_optname+0x128>
   16faa:	3914      	subs	r1, #20
   16fac:	290c      	cmp	r1, #12
   16fae:	d8b4      	bhi.n	16f1a <z_to_nrf_optname+0x16>
   16fb0:	a301      	add	r3, pc, #4	; (adr r3, 16fb8 <z_to_nrf_optname+0xb4>)
   16fb2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   16fb6:	bf00      	nop
   16fb8:	00017019 	.word	0x00017019
   16fbc:	00016fed 	.word	0x00016fed
   16fc0:	00016f1b 	.word	0x00016f1b
   16fc4:	00016f1b 	.word	0x00016f1b
   16fc8:	00016f1b 	.word	0x00016f1b
   16fcc:	00016ff1 	.word	0x00016ff1
   16fd0:	00016f1b 	.word	0x00016f1b
   16fd4:	00016f1b 	.word	0x00016f1b
   16fd8:	00016f1b 	.word	0x00016f1b
   16fdc:	00016f1b 	.word	0x00016f1b
   16fe0:	00016ff9 	.word	0x00016ff9
   16fe4:	00016ffd 	.word	0x00016ffd
   16fe8:	00017001 	.word	0x00017001
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   16fec:	2315      	movs	r3, #21
   16fee:	e01d      	b.n	1702c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   16ff0:	2319      	movs	r3, #25
   16ff2:	e01b      	b.n	1702c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   16ff4:	2328      	movs	r3, #40	; 0x28
   16ff6:	e019      	b.n	1702c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   16ff8:	231e      	movs	r3, #30
   16ffa:	e017      	b.n	1702c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_IP_ECHO_REPLY;
   16ffc:	231f      	movs	r3, #31
   16ffe:	e015      	b.n	1702c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_IPV6_ECHO_REPLY;
   17000:	2320      	movs	r3, #32
   17002:	e013      	b.n	1702c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   17004:	2302      	movs	r3, #2
   17006:	e011      	b.n	1702c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   17008:	2303      	movs	r3, #3
   1700a:	e00f      	b.n	1702c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   1700c:	2305      	movs	r3, #5
   1700e:	e00d      	b.n	1702c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   17010:	2306      	movs	r3, #6
   17012:	e00b      	b.n	1702c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   17014:	2307      	movs	r3, #7
   17016:	e009      	b.n	1702c <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   17018:	2314      	movs	r3, #20
   1701a:	e007      	b.n	1702c <z_to_nrf_optname+0x128>
		switch (z_in_optname) {
   1701c:	2902      	cmp	r1, #2
   1701e:	d0f1      	beq.n	17004 <z_to_nrf_optname+0x100>
   17020:	2903      	cmp	r1, #3
   17022:	d0f1      	beq.n	17008 <z_to_nrf_optname+0x104>
   17024:	2901      	cmp	r1, #1
   17026:	f47f af78 	bne.w	16f1a <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   1702a:	2301      	movs	r3, #1
	int retval = 0;
   1702c:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   1702e:	6013      	str	r3, [r2, #0]
			break;
   17030:	4770      	bx	lr
   17032:	bf00      	nop

00017034 <nrf91_socket_offload_ioctl>:
static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
	int sd = OBJ_TO_SD(obj);

	switch (request) {
   17034:	f240 1303 	movw	r3, #259	; 0x103
{
   17038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   1703c:	4299      	cmp	r1, r3
{
   1703e:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   17040:	f000 8097 	beq.w	17172 <nrf91_socket_offload_ioctl+0x13e>
   17044:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   17048:	d005      	beq.n	17056 <nrf91_socket_offload_ioctl+0x22>
   1704a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   1704e:	d171      	bne.n	17134 <nrf91_socket_offload_ioctl+0x100>
	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;
   17050:	f06f 0411 	mvn.w	r4, #17
   17054:	e01d      	b.n	17092 <nrf91_socket_offload_ioctl+0x5e>
	for (int i = 0; i < nfds; i++) {
   17056:	f04f 0800 	mov.w	r8, #0
		struct zsock_pollfd *fds;
		int nfds;
		int timeout;

		fds = va_arg(args, struct zsock_pollfd *);
		nfds = va_arg(args, int);
   1705a:	e9d2 a900 	ldrd	sl, r9, [r2]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   1705e:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   17060:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   17064:	4668      	mov	r0, sp
   17066:	2240      	movs	r2, #64	; 0x40
   17068:	f00f f9c6 	bl	263f8 <memset>
	for (int i = 0; i < nfds; i++) {
   1706c:	466e      	mov	r6, sp
   1706e:	4655      	mov	r5, sl
   17070:	4657      	mov	r7, sl
	int retval = 0;
   17072:	4644      	mov	r4, r8
		tmp[i].events = 0;
   17074:	4643      	mov	r3, r8
			obj = z_get_fd_obj(fds[i].fd,
   17076:	4940      	ldr	r1, [pc, #256]	; (17178 <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   17078:	45c1      	cmp	r9, r8
   1707a:	dc0e      	bgt.n	1709a <nrf91_socket_offload_ioctl+0x66>
	if (retval > 0) {
   1707c:	2c00      	cmp	r4, #0
   1707e:	dc08      	bgt.n	17092 <nrf91_socket_offload_ioctl+0x5e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   17080:	465a      	mov	r2, fp
   17082:	4649      	mov	r1, r9
   17084:	4668      	mov	r0, sp
   17086:	f009 f97b 	bl	20380 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1708a:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1708c:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   1708e:	4599      	cmp	r9, r3
   17090:	dc28      	bgt.n	170e4 <nrf91_socket_offload_ioctl+0xb0>
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   17092:	4620      	mov	r0, r4
   17094:	b011      	add	sp, #68	; 0x44
   17096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (fds[i].fd < 0) {
   1709a:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   1709c:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   1709e:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   170a0:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   170a2:	da05      	bge.n	170b0 <nrf91_socket_offload_ioctl+0x7c>
			tmp[i].fd = fds[i].fd;
   170a4:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   170a6:	f108 0801 	add.w	r8, r8, #1
   170aa:	3608      	adds	r6, #8
   170ac:	3708      	adds	r7, #8
   170ae:	e7e3      	b.n	17078 <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   170b0:	2286      	movs	r2, #134	; 0x86
   170b2:	f7fa fee9 	bl	11e88 <z_get_fd_obj>
			if (obj != NULL) {
   170b6:	2300      	movs	r3, #0
   170b8:	492f      	ldr	r1, [pc, #188]	; (17178 <nrf91_socket_offload_ioctl+0x144>)
   170ba:	b178      	cbz	r0, 170dc <nrf91_socket_offload_ioctl+0xa8>
				tmp[i].fd = OBJ_TO_SD(obj);
   170bc:	3801      	subs	r0, #1
   170be:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   170c0:	88b8      	ldrh	r0, [r7, #4]
   170c2:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   170c4:	bf42      	ittt	mi
   170c6:	88b2      	ldrhmi	r2, [r6, #4]
   170c8:	f042 0201 	orrmi.w	r2, r2, #1
   170cc:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   170ce:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   170d0:	bf42      	ittt	mi
   170d2:	88b2      	ldrhmi	r2, [r6, #4]
   170d4:	f042 0202 	orrmi.w	r2, r2, #2
   170d8:	80b2      	strhmi	r2, [r6, #4]
   170da:	e7e4      	b.n	170a6 <nrf91_socket_offload_ioctl+0x72>
				fds[i].revents = POLLNVAL;
   170dc:	2220      	movs	r2, #32
				retval++;
   170de:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   170e0:	80fa      	strh	r2, [r7, #6]
				retval++;
   170e2:	e7ed      	b.n	170c0 <nrf91_socket_offload_ioctl+0x8c>
		if (fds[i].fd < 0) {
   170e4:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   170e8:	2a00      	cmp	r2, #0
   170ea:	db20      	blt.n	1712e <nrf91_socket_offload_ioctl+0xfa>
		if (tmp[i].revents & NRF_POLLIN) {
   170ec:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   170f0:	88d2      	ldrh	r2, [r2, #6]
   170f2:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   170f4:	bf42      	ittt	mi
   170f6:	88e9      	ldrhmi	r1, [r5, #6]
   170f8:	f041 0101 	orrmi.w	r1, r1, #1
   170fc:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   170fe:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   17100:	bf42      	ittt	mi
   17102:	88e9      	ldrhmi	r1, [r5, #6]
   17104:	f041 0104 	orrmi.w	r1, r1, #4
   17108:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   1710a:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   1710c:	bf42      	ittt	mi
   1710e:	88e9      	ldrhmi	r1, [r5, #6]
   17110:	f041 0108 	orrmi.w	r1, r1, #8
   17114:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   17116:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   17118:	bf42      	ittt	mi
   1711a:	88e9      	ldrhmi	r1, [r5, #6]
   1711c:	f041 0120 	orrmi.w	r1, r1, #32
   17120:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   17122:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   17124:	bf42      	ittt	mi
   17126:	88ea      	ldrhmi	r2, [r5, #6]
   17128:	f042 0210 	orrmi.w	r2, r2, #16
   1712c:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   1712e:	3301      	adds	r3, #1
   17130:	3508      	adds	r5, #8
   17132:	e7ac      	b.n	1708e <nrf91_socket_offload_ioctl+0x5a>
	switch (cmd) {
   17134:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   17136:	f100 30ff 	add.w	r0, r0, #4294967295
	switch (cmd) {
   1713a:	d00b      	beq.n	17154 <nrf91_socket_offload_ioctl+0x120>
   1713c:	2904      	cmp	r1, #4
   1713e:	d111      	bne.n	17164 <nrf91_socket_offload_ioctl+0x130>
		flags = va_arg(args, int);
   17140:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   17142:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   17146:	d10d      	bne.n	17164 <nrf91_socket_offload_ioctl+0x130>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   17148:	2101      	movs	r1, #1
   1714a:	1392      	asrs	r2, r2, #14
   1714c:	f009 f91a 	bl	20384 <nrf_fcntl>
   17150:	4604      	mov	r4, r0
		break;
   17152:	e79e      	b.n	17092 <nrf91_socket_offload_ioctl+0x5e>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   17154:	2200      	movs	r2, #0
   17156:	2102      	movs	r1, #2
   17158:	f009 f914 	bl	20384 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1715c:	0380      	lsls	r0, r0, #14
   1715e:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   17162:	e796      	b.n	17092 <nrf91_socket_offload_ioctl+0x5e>
	errno = EINVAL;
   17164:	f015 ffb3 	bl	2d0ce <__errno>
   17168:	2316      	movs	r3, #22
	return retval;
   1716a:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   1716e:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   17170:	e78f      	b.n	17092 <nrf91_socket_offload_ioctl+0x5e>
	switch (request) {
   17172:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   17176:	e78c      	b.n	17092 <nrf91_socket_offload_ioctl+0x5e>
   17178:	0002f398 	.word	0x0002f398

0001717c <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   1717c:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   1717e:	4b03      	ldr	r3, [pc, #12]	; (1718c <nrf91_socket_iface_init+0x10>)
   17180:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   17182:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   17184:	4802      	ldr	r0, [pc, #8]	; (17190 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   17186:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   17188:	f7fc bd68 	b.w	13c5c <socket_offload_dns_register>
   1718c:	20021694 	.word	0x20021694
   17190:	0002f390 	.word	0x0002f390

00017194 <nrf91_socket_offload_accept>:
{
   17194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17198:	b08a      	sub	sp, #40	; 0x28
   1719a:	4607      	mov	r7, r0
   1719c:	460c      	mov	r4, r1
   1719e:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   171a0:	f7fa fea2 	bl	11ee8 <z_reserve_fd>
   171a4:	4606      	mov	r6, r0
	if (fd < 0) {
   171a6:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   171a8:	f107 30ff 	add.w	r0, r7, #4294967295
	if (fd < 0) {
   171ac:	da05      	bge.n	171ba <nrf91_socket_offload_accept+0x26>
	return -1;
   171ae:	f04f 36ff 	mov.w	r6, #4294967295
}
   171b2:	4630      	mov	r0, r6
   171b4:	b00a      	add	sp, #40	; 0x28
   171b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   171ba:	b31c      	cbz	r4, 17204 <nrf91_socket_offload_accept+0x70>
   171bc:	b32d      	cbz	r5, 1720a <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   171be:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   171c0:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   171c2:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   171c4:	bf0c      	ite	eq
   171c6:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   171c8:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   171ca:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   171cc:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   171ce:	4639      	mov	r1, r7
   171d0:	f009 f872 	bl	202b8 <nrf_accept>
	if (new_sd < 0) {
   171d4:	f1b0 0800 	subs.w	r8, r0, #0
   171d8:	dbe9      	blt.n	171ae <nrf91_socket_offload_accept+0x1a>
	if ((addr != NULL) && (addrlen != NULL)) {
   171da:	b164      	cbz	r4, 171f6 <nrf91_socket_offload_accept+0x62>
   171dc:	b15d      	cbz	r5, 171f6 <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   171de:	687b      	ldr	r3, [r7, #4]
   171e0:	2b02      	cmp	r3, #2
   171e2:	d115      	bne.n	17210 <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   171e4:	2308      	movs	r3, #8
   171e6:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   171e8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   171ec:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   171ee:	2301      	movs	r3, #1
   171f0:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   171f2:	9b04      	ldr	r3, [sp, #16]
   171f4:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   171f6:	4630      	mov	r0, r6
   171f8:	4a0c      	ldr	r2, [pc, #48]	; (1722c <nrf91_socket_offload_accept+0x98>)
   171fa:	f108 0101 	add.w	r1, r8, #1
   171fe:	f7fa fea5 	bl	11f4c <z_finalize_fd>
	return fd;
   17202:	e7d6      	b.n	171b2 <nrf91_socket_offload_accept+0x1e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   17204:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   17206:	4627      	mov	r7, r4
   17208:	e7e1      	b.n	171ce <nrf91_socket_offload_accept+0x3a>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1720a:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1720c:	462f      	mov	r7, r5
   1720e:	e7de      	b.n	171ce <nrf91_socket_offload_accept+0x3a>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   17210:	2b0a      	cmp	r3, #10
   17212:	d106      	bne.n	17222 <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   17214:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   17216:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   17218:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   1721a:	a901      	add	r1, sp, #4
   1721c:	f016 ffb9 	bl	2e192 <nrf_to_z_ipv6>
   17220:	e7e9      	b.n	171f6 <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   17222:	4630      	mov	r0, r6
   17224:	f7fa fe9c 	bl	11f60 <z_free_fd>
   17228:	e7c1      	b.n	171ae <nrf91_socket_offload_accept+0x1a>
   1722a:	bf00      	nop
   1722c:	0002f398 	.word	0x0002f398

00017230 <nrf91_socket_offload_sendmsg>:
{
   17230:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   17234:	4607      	mov	r7, r0
   17236:	4690      	mov	r8, r2
	if (msg == NULL) {
   17238:	460c      	mov	r4, r1
   1723a:	b319      	cbz	r1, 17284 <nrf91_socket_offload_sendmsg+0x54>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1723c:	2300      	movs	r3, #0
	ssize_t len = 0;
   1723e:	461a      	mov	r2, r3
   17240:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   17242:	4283      	cmp	r3, r0
   17244:	d128      	bne.n	17298 <nrf91_socket_offload_sendmsg+0x68>
	if (len <= sizeof(buf)) {
   17246:	2a80      	cmp	r2, #128	; 0x80
   17248:	d857      	bhi.n	172fa <nrf91_socket_offload_sendmsg+0xca>
		for (i = 0; i < msg->msg_iovlen; i++) {
   1724a:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   1724c:	f04f 32ff 	mov.w	r2, #4294967295
   17250:	f04f 33ff 	mov.w	r3, #4294967295
   17254:	482a      	ldr	r0, [pc, #168]	; (17300 <nrf91_socket_offload_sendmsg+0xd0>)
   17256:	f00b febb 	bl	22fd0 <z_impl_k_mutex_lock>
		len = 0;
   1725a:	462e      	mov	r6, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1725c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 17304 <nrf91_socket_offload_sendmsg+0xd4>
		for (i = 0; i < msg->msg_iovlen; i++) {
   17260:	68e3      	ldr	r3, [r4, #12]
   17262:	42ab      	cmp	r3, r5
   17264:	d81f      	bhi.n	172a6 <nrf91_socket_offload_sendmsg+0x76>
		ret = nrf91_socket_offload_sendto(obj, buf, len,
   17266:	6863      	ldr	r3, [r4, #4]
   17268:	4632      	mov	r2, r6
   1726a:	9301      	str	r3, [sp, #4]
   1726c:	6823      	ldr	r3, [r4, #0]
   1726e:	4638      	mov	r0, r7
   17270:	9300      	str	r3, [sp, #0]
   17272:	4924      	ldr	r1, [pc, #144]	; (17304 <nrf91_socket_offload_sendmsg+0xd4>)
   17274:	4643      	mov	r3, r8
   17276:	f017 f8e8 	bl	2e44a <nrf91_socket_offload_sendto>
   1727a:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   1727c:	4820      	ldr	r0, [pc, #128]	; (17300 <nrf91_socket_offload_sendmsg+0xd0>)
   1727e:	f00b ffa1 	bl	231c4 <z_impl_k_mutex_unlock>
		return ret;
   17282:	e005      	b.n	17290 <nrf91_socket_offload_sendmsg+0x60>
		errno = EINVAL;
   17284:	f015 ff23 	bl	2d0ce <__errno>
   17288:	2316      	movs	r3, #22
		return -1;
   1728a:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   1728e:	6003      	str	r3, [r0, #0]
}
   17290:	4628      	mov	r0, r5
   17292:	b002      	add	sp, #8
   17294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   17298:	68a1      	ldr	r1, [r4, #8]
   1729a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1729e:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   172a0:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   172a2:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   172a4:	e7cd      	b.n	17242 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   172a6:	68a1      	ldr	r1, [r4, #8]
   172a8:	eb09 0006 	add.w	r0, r9, r6
   172ac:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   172b0:	685a      	ldr	r2, [r3, #4]
   172b2:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   172b6:	f7f5 fc49 	bl	cb4c <memcpy>
			len += msg->msg_iov[i].iov_len;
   172ba:	68a3      	ldr	r3, [r4, #8]
   172bc:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   172c0:	4453      	add	r3, sl
   172c2:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   172c4:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   172c6:	441e      	add	r6, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   172c8:	e7ca      	b.n	17260 <nrf91_socket_offload_sendmsg+0x30>
		if (msg->msg_iov[i].iov_len == 0) {
   172ca:	68a1      	ldr	r1, [r4, #8]
   172cc:	eb01 03c6 	add.w	r3, r1, r6, lsl #3
   172d0:	685a      	ldr	r2, [r3, #4]
   172d2:	b162      	cbz	r2, 172ee <nrf91_socket_offload_sendmsg+0xbe>
		ret = nrf91_socket_offload_sendto(obj, msg->msg_iov[i].iov_base,
   172d4:	6863      	ldr	r3, [r4, #4]
   172d6:	4638      	mov	r0, r7
   172d8:	9301      	str	r3, [sp, #4]
   172da:	6823      	ldr	r3, [r4, #0]
   172dc:	9300      	str	r3, [sp, #0]
   172de:	f851 1036 	ldr.w	r1, [r1, r6, lsl #3]
   172e2:	4643      	mov	r3, r8
   172e4:	f017 f8b1 	bl	2e44a <nrf91_socket_offload_sendto>
		if (ret < 0) {
   172e8:	1e05      	subs	r5, r0, #0
   172ea:	dbd1      	blt.n	17290 <nrf91_socket_offload_sendmsg+0x60>
		len += ret;
   172ec:	44a9      	add	r9, r5
	for (i = 0; i < msg->msg_iovlen; i++) {
   172ee:	3601      	adds	r6, #1
   172f0:	68e3      	ldr	r3, [r4, #12]
   172f2:	42b3      	cmp	r3, r6
   172f4:	d8e9      	bhi.n	172ca <nrf91_socket_offload_sendmsg+0x9a>
   172f6:	464d      	mov	r5, r9
   172f8:	e7ca      	b.n	17290 <nrf91_socket_offload_sendmsg+0x60>
   172fa:	2600      	movs	r6, #0
	len = 0;
   172fc:	46b1      	mov	r9, r6
   172fe:	e7f7      	b.n	172f0 <nrf91_socket_offload_sendmsg+0xc0>
   17300:	20020bb8 	.word	0x20020bb8
   17304:	2002477d 	.word	0x2002477d

00017308 <nrf91_socket_create>:
{
   17308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1730a:	4606      	mov	r6, r0
   1730c:	460d      	mov	r5, r1
   1730e:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   17310:	f7fa fdea 	bl	11ee8 <z_reserve_fd>
	if (fd < 0) {
   17314:	1e04      	subs	r4, r0, #0
   17316:	db0d      	blt.n	17334 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   17318:	b2b0      	uxth	r0, r6
   1731a:	f016 fe57 	bl	2dfcc <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1731e:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   17322:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   17324:	d109      	bne.n	1733a <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   17326:	f015 fed2 	bl	2d0ce <__errno>
   1732a:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   1732c:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   1732e:	4620      	mov	r0, r4
   17330:	f7fa fe16 	bl	11f60 <z_free_fd>
		return -1;
   17334:	f04f 34ff 	mov.w	r4, #4294967295
   17338:	e01b      	b.n	17372 <nrf91_socket_create+0x6a>
	switch (socktype) {
   1733a:	2d03      	cmp	r5, #3
   1733c:	d003      	beq.n	17346 <nrf91_socket_create+0x3e>
   1733e:	2d04      	cmp	r5, #4
   17340:	bf08      	it	eq
   17342:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   17346:	4638      	mov	r0, r7
   17348:	f016 fe5c 	bl	2e004 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   1734c:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   17350:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   17352:	d103      	bne.n	1735c <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   17354:	f015 febb 	bl	2d0ce <__errno>
   17358:	237b      	movs	r3, #123	; 0x7b
   1735a:	e7e7      	b.n	1732c <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   1735c:	4629      	mov	r1, r5
   1735e:	4630      	mov	r0, r6
   17360:	f008 ff30 	bl	201c4 <nrf_socket>
	if (sd < 0) {
   17364:	1e01      	subs	r1, r0, #0
   17366:	dbe2      	blt.n	1732e <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   17368:	4620      	mov	r0, r4
   1736a:	4a03      	ldr	r2, [pc, #12]	; (17378 <nrf91_socket_create+0x70>)
   1736c:	3101      	adds	r1, #1
   1736e:	f7fa fded 	bl	11f4c <z_finalize_fd>
}
   17372:	4620      	mov	r0, r4
   17374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17376:	bf00      	nop
   17378:	0002f398 	.word	0x0002f398

0001737c <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1737c:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   17380:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   17384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   17388:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   1738c:	4605      	mov	r5, r0
   1738e:	460e      	mov	r6, r1
   17390:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   17392:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   17396:	d15f      	bne.n	17458 <z_impl_gpio_pin_interrupt_configure+0xdc>
   17398:	4937      	ldr	r1, [pc, #220]	; (17478 <z_impl_gpio_pin_interrupt_configure+0xfc>)
   1739a:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   1739e:	4a37      	ldr	r2, [pc, #220]	; (1747c <z_impl_gpio_pin_interrupt_configure+0x100>)
   173a0:	4837      	ldr	r0, [pc, #220]	; (17480 <z_impl_gpio_pin_interrupt_configure+0x104>)
   173a2:	f015 f846 	bl	2c432 <printk>
   173a6:	4837      	ldr	r0, [pc, #220]	; (17484 <z_impl_gpio_pin_interrupt_configure+0x108>)
   173a8:	f015 f843 	bl	2c432 <printk>
   173ac:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   173b0:	4832      	ldr	r0, [pc, #200]	; (1747c <z_impl_gpio_pin_interrupt_configure+0x100>)
   173b2:	f015 fa5b 	bl	2c86c <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   173b6:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   173ba:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   173be:	d10e      	bne.n	173de <z_impl_gpio_pin_interrupt_configure+0x62>
   173c0:	4931      	ldr	r1, [pc, #196]	; (17488 <z_impl_gpio_pin_interrupt_configure+0x10c>)
   173c2:	f240 13f1 	movw	r3, #497	; 0x1f1
   173c6:	4a2d      	ldr	r2, [pc, #180]	; (1747c <z_impl_gpio_pin_interrupt_configure+0x100>)
   173c8:	482d      	ldr	r0, [pc, #180]	; (17480 <z_impl_gpio_pin_interrupt_configure+0x104>)
   173ca:	f015 f832 	bl	2c432 <printk>
   173ce:	482f      	ldr	r0, [pc, #188]	; (1748c <z_impl_gpio_pin_interrupt_configure+0x110>)
   173d0:	f015 f82f 	bl	2c432 <printk>
   173d4:	f240 11f1 	movw	r1, #497	; 0x1f1
   173d8:	4828      	ldr	r0, [pc, #160]	; (1747c <z_impl_gpio_pin_interrupt_configure+0x100>)
   173da:	f015 fa47 	bl	2c86c <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   173de:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   173e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   173e6:	d10e      	bne.n	17406 <z_impl_gpio_pin_interrupt_configure+0x8a>
   173e8:	4929      	ldr	r1, [pc, #164]	; (17490 <z_impl_gpio_pin_interrupt_configure+0x114>)
   173ea:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
   173ee:	4a23      	ldr	r2, [pc, #140]	; (1747c <z_impl_gpio_pin_interrupt_configure+0x100>)
   173f0:	4823      	ldr	r0, [pc, #140]	; (17480 <z_impl_gpio_pin_interrupt_configure+0x104>)
   173f2:	f015 f81e 	bl	2c432 <printk>
   173f6:	4827      	ldr	r0, [pc, #156]	; (17494 <z_impl_gpio_pin_interrupt_configure+0x118>)
   173f8:	f015 f81b 	bl	2c432 <printk>
   173fc:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   17400:	481e      	ldr	r0, [pc, #120]	; (1747c <z_impl_gpio_pin_interrupt_configure+0x100>)
   17402:	f015 fa33 	bl	2c86c <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   17406:	2701      	movs	r7, #1
   17408:	f8da 3000 	ldr.w	r3, [sl]
   1740c:	40b7      	lsls	r7, r6
   1740e:	421f      	tst	r7, r3
   17410:	d10e      	bne.n	17430 <z_impl_gpio_pin_interrupt_configure+0xb4>
   17412:	4921      	ldr	r1, [pc, #132]	; (17498 <z_impl_gpio_pin_interrupt_configure+0x11c>)
   17414:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   17418:	4a18      	ldr	r2, [pc, #96]	; (1747c <z_impl_gpio_pin_interrupt_configure+0x100>)
   1741a:	4819      	ldr	r0, [pc, #100]	; (17480 <z_impl_gpio_pin_interrupt_configure+0x104>)
   1741c:	f015 f809 	bl	2c432 <printk>
   17420:	481e      	ldr	r0, [pc, #120]	; (1749c <z_impl_gpio_pin_interrupt_configure+0x120>)
   17422:	f015 f806 	bl	2c432 <printk>
   17426:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   1742a:	4814      	ldr	r0, [pc, #80]	; (1747c <z_impl_gpio_pin_interrupt_configure+0x100>)
   1742c:	f015 fa1e 	bl	2c86c <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   17430:	0423      	lsls	r3, r4, #16
   17432:	d505      	bpl.n	17440 <z_impl_gpio_pin_interrupt_configure+0xc4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   17434:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   17438:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1743a:	bf18      	it	ne
   1743c:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   17440:	f8d8 7018 	ldr.w	r7, [r8, #24]
   17444:	4631      	mov	r1, r6
   17446:	4628      	mov	r0, r5
   17448:	46bc      	mov	ip, r7
   1744a:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   1744e:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
   17452:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   17456:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   17458:	2b00      	cmp	r3, #0
   1745a:	d1ac      	bne.n	173b6 <z_impl_gpio_pin_interrupt_configure+0x3a>
   1745c:	4910      	ldr	r1, [pc, #64]	; (174a0 <z_impl_gpio_pin_interrupt_configure+0x124>)
   1745e:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
   17462:	4a06      	ldr	r2, [pc, #24]	; (1747c <z_impl_gpio_pin_interrupt_configure+0x100>)
   17464:	4806      	ldr	r0, [pc, #24]	; (17480 <z_impl_gpio_pin_interrupt_configure+0x104>)
   17466:	f014 ffe4 	bl	2c432 <printk>
   1746a:	480e      	ldr	r0, [pc, #56]	; (174a4 <z_impl_gpio_pin_interrupt_configure+0x128>)
   1746c:	f014 ffe1 	bl	2c432 <printk>
   17470:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   17474:	e79c      	b.n	173b0 <z_impl_gpio_pin_interrupt_configure+0x34>
   17476:	bf00      	nop
   17478:	000316ce 	.word	0x000316ce
   1747c:	000316a4 	.word	0x000316a4
   17480:	00030166 	.word	0x00030166
   17484:	0003170f 	.word	0x0003170f
   17488:	00031790 	.word	0x00031790
   1748c:	00031811 	.word	0x00031811
   17490:	00031865 	.word	0x00031865
   17494:	000318af 	.word	0x000318af
   17498:	000318f4 	.word	0x000318f4
   1749c:	00031932 	.word	0x00031932
   174a0:	0003173b 	.word	0x0003173b
   174a4:	00031765 	.word	0x00031765

000174a8 <gpio_pin_configure>:
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_configure(const struct device *port,
				     gpio_pin_t pin,
				     gpio_flags_t flags)
{
   174a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
			| GPIO_OUTPUT_INIT_LOGICAL;
	}

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   174ac:	2501      	movs	r5, #1
   174ae:	6843      	ldr	r3, [r0, #4]
   174b0:	408d      	lsls	r5, r1
   174b2:	681b      	ldr	r3, [r3, #0]
{
   174b4:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   174b6:	421d      	tst	r5, r3
{
   174b8:	460e      	mov	r6, r1
   174ba:	4690      	mov	r8, r2
	struct gpio_driver_data *data =
   174bc:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   174be:	d10e      	bne.n	174de <gpio_pin_configure+0x36>
   174c0:	490d      	ldr	r1, [pc, #52]	; (174f8 <gpio_pin_configure+0x50>)
   174c2:	f44f 7311 	mov.w	r3, #580	; 0x244
   174c6:	4a0d      	ldr	r2, [pc, #52]	; (174fc <gpio_pin_configure+0x54>)
   174c8:	480d      	ldr	r0, [pc, #52]	; (17500 <gpio_pin_configure+0x58>)
   174ca:	f014 ffb2 	bl	2c432 <printk>
   174ce:	480d      	ldr	r0, [pc, #52]	; (17504 <gpio_pin_configure+0x5c>)
   174d0:	f014 ffaf 	bl	2c432 <printk>
   174d4:	f44f 7111 	mov.w	r1, #580	; 0x244
   174d8:	4808      	ldr	r0, [pc, #32]	; (174fc <gpio_pin_configure+0x54>)
   174da:	f015 f9c7 	bl	2c86c <assert_post_action>
	return api->pin_configure(port, pin, flags);
   174de:	68a3      	ldr	r3, [r4, #8]
   174e0:	4642      	mov	r2, r8
   174e2:	4631      	mov	r1, r6
   174e4:	4620      	mov	r0, r4
   174e6:	681b      	ldr	r3, [r3, #0]
   174e8:	4798      	blx	r3
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
   174ea:	b918      	cbnz	r0, 174f4 <gpio_pin_configure+0x4c>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   174ec:	683b      	ldr	r3, [r7, #0]
   174ee:	ea23 0505 	bic.w	r5, r3, r5
   174f2:	603d      	str	r5, [r7, #0]
		flags &= ~GPIO_INT_DEBOUNCE;
		ret = z_impl_gpio_pin_interrupt_configure(port, pin, flags);
	}

	return ret;
}
   174f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   174f8:	000318f4 	.word	0x000318f4
   174fc:	000316a4 	.word	0x000316a4
   17500:	00030166 	.word	0x00030166
   17504:	00031932 	.word	0x00031932

00017508 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   17508:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1750a:	2501      	movs	r5, #1
   1750c:	6843      	ldr	r3, [r0, #4]
   1750e:	408d      	lsls	r5, r1
   17510:	681b      	ldr	r3, [r3, #0]
{
   17512:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   17514:	421d      	tst	r5, r3
{
   17516:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   17518:	d10e      	bne.n	17538 <gpio_pin_set_raw+0x30>
   1751a:	490d      	ldr	r1, [pc, #52]	; (17550 <gpio_pin_set_raw+0x48>)
   1751c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
   17520:	4a0c      	ldr	r2, [pc, #48]	; (17554 <gpio_pin_set_raw+0x4c>)
   17522:	480d      	ldr	r0, [pc, #52]	; (17558 <gpio_pin_set_raw+0x50>)
   17524:	f014 ff85 	bl	2c432 <printk>
   17528:	480c      	ldr	r0, [pc, #48]	; (1755c <gpio_pin_set_raw+0x54>)
   1752a:	f014 ff82 	bl	2c432 <printk>
   1752e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   17532:	4808      	ldr	r0, [pc, #32]	; (17554 <gpio_pin_set_raw+0x4c>)
   17534:	f015 f99a 	bl	2c86c <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   17538:	b136      	cbz	r6, 17548 <gpio_pin_set_raw+0x40>
	return api->port_set_bits_raw(port, pins);
   1753a:	68a3      	ldr	r3, [r4, #8]
   1753c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1753e:	4629      	mov	r1, r5
   17540:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   17542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   17546:	4718      	bx	r3
   17548:	68a3      	ldr	r3, [r4, #8]
   1754a:	691b      	ldr	r3, [r3, #16]
   1754c:	e7f7      	b.n	1753e <gpio_pin_set_raw+0x36>
   1754e:	bf00      	nop
   17550:	000318f4 	.word	0x000318f4
   17554:	000316a4 	.word	0x000316a4
   17558:	00030166 	.word	0x00030166
   1755c:	00031932 	.word	0x00031932

00017560 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   17560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17564:	4606      	mov	r6, r0
   17566:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   17568:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   1756a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 175c8 <dk_set_leds_state.part.0+0x68>
   1756e:	f8df 905c 	ldr.w	r9, [pc, #92]	; 175cc <dk_set_leds_state.part.0+0x6c>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   17572:	fa26 f204 	lsr.w	r2, r6, r4
   17576:	fa27 f304 	lsr.w	r3, r7, r4
   1757a:	4313      	orrs	r3, r2
   1757c:	07db      	lsls	r3, r3, #31
   1757e:	d518      	bpl.n	175b2 <dk_set_leds_state.part.0+0x52>
			int err = gpio_pin_set_raw(led_devs[i],
   17580:	43d2      	mvns	r2, r2
   17582:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   17586:	7919      	ldrb	r1, [r3, #4]
   17588:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   1758c:	f002 0201 	and.w	r2, r2, #1
   17590:	f7ff ffba 	bl	17508 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   17594:	4605      	mov	r5, r0
   17596:	b160      	cbz	r0, 175b2 <dk_set_leds_state.part.0+0x52>
   17598:	4908      	ldr	r1, [pc, #32]	; (175bc <dk_set_leds_state.part.0+0x5c>)
   1759a:	4b09      	ldr	r3, [pc, #36]	; (175c0 <dk_set_leds_state.part.0+0x60>)
				LOG_ERR("Cannot write LED gpio");
   1759c:	4809      	ldr	r0, [pc, #36]	; (175c4 <dk_set_leds_state.part.0+0x64>)
   1759e:	1ac9      	subs	r1, r1, r3
   175a0:	08c9      	lsrs	r1, r1, #3
   175a2:	0189      	lsls	r1, r1, #6
   175a4:	f041 0101 	orr.w	r1, r1, #1
   175a8:	f015 f990 	bl	2c8cc <log_0>
			}
		}
	}

	return 0;
}
   175ac:	4628      	mov	r0, r5
   175ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   175b2:	3401      	adds	r4, #1
   175b4:	2c04      	cmp	r4, #4
   175b6:	d1dc      	bne.n	17572 <dk_set_leds_state.part.0+0x12>
	return 0;
   175b8:	2500      	movs	r5, #0
   175ba:	e7f7      	b.n	175ac <dk_set_leds_state.part.0+0x4c>
   175bc:	0002f024 	.word	0x0002f024
   175c0:	0002eff4 	.word	0x0002eff4
   175c4:	00031944 	.word	0x00031944
   175c8:	0002f3f0 	.word	0x0002f3f0
   175cc:	200216dc 	.word	0x200216dc

000175d0 <button_pressed>:
{
   175d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   175d2:	f04f 0320 	mov.w	r3, #32
   175d6:	f3ef 8511 	mrs	r5, BASEPRI
   175da:	f383 8811 	msr	BASEPRI, r3
   175de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   175e2:	4830      	ldr	r0, [pc, #192]	; (176a4 <button_pressed+0xd4>)
   175e4:	f00d fb8e 	bl	24d04 <z_spin_lock_valid>
   175e8:	b968      	cbnz	r0, 17606 <button_pressed+0x36>
   175ea:	235c      	movs	r3, #92	; 0x5c
   175ec:	4a2e      	ldr	r2, [pc, #184]	; (176a8 <button_pressed+0xd8>)
   175ee:	492f      	ldr	r1, [pc, #188]	; (176ac <button_pressed+0xdc>)
   175f0:	482f      	ldr	r0, [pc, #188]	; (176b0 <button_pressed+0xe0>)
   175f2:	f014 ff1e 	bl	2c432 <printk>
   175f6:	492b      	ldr	r1, [pc, #172]	; (176a4 <button_pressed+0xd4>)
   175f8:	482e      	ldr	r0, [pc, #184]	; (176b4 <button_pressed+0xe4>)
   175fa:	f014 ff1a 	bl	2c432 <printk>
   175fe:	215c      	movs	r1, #92	; 0x5c
   17600:	4829      	ldr	r0, [pc, #164]	; (176a8 <button_pressed+0xd8>)
   17602:	f015 f933 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   17606:	4827      	ldr	r0, [pc, #156]	; (176a4 <button_pressed+0xd4>)
   17608:	f00d fb9a 	bl	24d40 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1760c:	2400      	movs	r4, #0
   1760e:	4e2a      	ldr	r6, [pc, #168]	; (176b8 <button_pressed+0xe8>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   17610:	4f2a      	ldr	r7, [pc, #168]	; (176bc <button_pressed+0xec>)
   17612:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   17616:	f856 0b04 	ldr.w	r0, [r6], #4
   1761a:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1761c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   17620:	3401      	adds	r4, #1
   17622:	f7ff feab 	bl	1737c <z_impl_gpio_pin_interrupt_configure>
   17626:	2c04      	cmp	r4, #4
   17628:	d00c      	beq.n	17644 <button_pressed+0x74>
   1762a:	2800      	cmp	r0, #0
   1762c:	d0f1      	beq.n	17612 <button_pressed+0x42>
   1762e:	4b24      	ldr	r3, [pc, #144]	; (176c0 <button_pressed+0xf0>)
   17630:	4924      	ldr	r1, [pc, #144]	; (176c4 <button_pressed+0xf4>)
		LOG_ERR("Cannot disable callbacks");
   17632:	4825      	ldr	r0, [pc, #148]	; (176c8 <button_pressed+0xf8>)
   17634:	1ac9      	subs	r1, r1, r3
   17636:	08c9      	lsrs	r1, r1, #3
   17638:	0189      	lsls	r1, r1, #6
   1763a:	f041 0101 	orr.w	r1, r1, #1
   1763e:	f015 f945 	bl	2c8cc <log_0>
   17642:	e001      	b.n	17648 <button_pressed+0x78>
	if (err) {
   17644:	2800      	cmp	r0, #0
   17646:	d1f2      	bne.n	1762e <button_pressed+0x5e>
	switch (state) {
   17648:	4b20      	ldr	r3, [pc, #128]	; (176cc <button_pressed+0xfc>)
   1764a:	781a      	ldrb	r2, [r3, #0]
   1764c:	b9f2      	cbnz	r2, 1768c <button_pressed+0xbc>
		state = STATE_SCANNING;
   1764e:	2201      	movs	r2, #1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   17650:	491f      	ldr	r1, [pc, #124]	; (176d0 <button_pressed+0x100>)
   17652:	701a      	strb	r2, [r3, #0]
   17654:	481f      	ldr	r0, [pc, #124]	; (176d4 <button_pressed+0x104>)
   17656:	2221      	movs	r2, #33	; 0x21
   17658:	2300      	movs	r3, #0
   1765a:	f00d fba1 	bl	24da0 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1765e:	4811      	ldr	r0, [pc, #68]	; (176a4 <button_pressed+0xd4>)
   17660:	f00d fb5e 	bl	24d20 <z_spin_unlock_valid>
   17664:	b968      	cbnz	r0, 17682 <button_pressed+0xb2>
   17666:	2384      	movs	r3, #132	; 0x84
   17668:	4a0f      	ldr	r2, [pc, #60]	; (176a8 <button_pressed+0xd8>)
   1766a:	491b      	ldr	r1, [pc, #108]	; (176d8 <button_pressed+0x108>)
   1766c:	4810      	ldr	r0, [pc, #64]	; (176b0 <button_pressed+0xe0>)
   1766e:	f014 fee0 	bl	2c432 <printk>
   17672:	490c      	ldr	r1, [pc, #48]	; (176a4 <button_pressed+0xd4>)
   17674:	4819      	ldr	r0, [pc, #100]	; (176dc <button_pressed+0x10c>)
   17676:	f014 fedc 	bl	2c432 <printk>
   1767a:	2184      	movs	r1, #132	; 0x84
   1767c:	480a      	ldr	r0, [pc, #40]	; (176a8 <button_pressed+0xd8>)
   1767e:	f015 f8f5 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   17682:	f385 8811 	msr	BASEPRI, r5
   17686:	f3bf 8f6f 	isb	sy
}
   1768a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   1768c:	23eb      	movs	r3, #235	; 0xeb
   1768e:	4a14      	ldr	r2, [pc, #80]	; (176e0 <button_pressed+0x110>)
   17690:	4914      	ldr	r1, [pc, #80]	; (176e4 <button_pressed+0x114>)
   17692:	4807      	ldr	r0, [pc, #28]	; (176b0 <button_pressed+0xe0>)
   17694:	f014 fecd 	bl	2c432 <printk>
   17698:	21eb      	movs	r1, #235	; 0xeb
   1769a:	4811      	ldr	r0, [pc, #68]	; (176e0 <button_pressed+0x110>)
   1769c:	f015 f8e6 	bl	2c86c <assert_post_action>
		break;
   176a0:	e7dd      	b.n	1765e <button_pressed+0x8e>
   176a2:	bf00      	nop
   176a4:	200216ec 	.word	0x200216ec
   176a8:	000304b3 	.word	0x000304b3
   176ac:	00030505 	.word	0x00030505
   176b0:	00030166 	.word	0x00030166
   176b4:	0003051a 	.word	0x0003051a
   176b8:	20021698 	.word	0x20021698
   176bc:	0002f3d0 	.word	0x0002f3d0
   176c0:	0002eff4 	.word	0x0002eff4
   176c4:	0002f024 	.word	0x0002f024
   176c8:	0003195a 	.word	0x0003195a
   176cc:	200247fd 	.word	0x200247fd
   176d0:	20020ec0 	.word	0x20020ec0
   176d4:	20021348 	.word	0x20021348
   176d8:	000304d9 	.word	0x000304d9
   176dc:	000304f0 	.word	0x000304f0
   176e0:	00031973 	.word	0x00031973
   176e4:	00032fcf 	.word	0x00032fcf

000176e8 <buttons_scan_fn>:
{
   176e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   176ec:	2400      	movs	r4, #0
   176ee:	4e7b      	ldr	r6, [pc, #492]	; (178dc <buttons_scan_fn+0x1f4>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   176f0:	4625      	mov	r5, r4
{
   176f2:	46b2      	mov	sl, r6
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   176f4:	f8df b20c 	ldr.w	fp, [pc, #524]	; 17904 <buttons_scan_fn+0x21c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   176f8:	4f79      	ldr	r7, [pc, #484]	; (178e0 <buttons_scan_fn+0x1f8>)
   176fa:	f04f 0801 	mov.w	r8, #1
   176fe:	eb0b 03c5 	add.w	r3, fp, r5, lsl #3
   17702:	791b      	ldrb	r3, [r3, #4]
   17704:	f85a 9b04 	ldr.w	r9, [sl], #4
   17708:	fa08 f803 	lsl.w	r8, r8, r3
   1770c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   17710:	681b      	ldr	r3, [r3, #0]
   17712:	ea18 0f03 	tst.w	r8, r3
   17716:	d10e      	bne.n	17736 <buttons_scan_fn+0x4e>
   17718:	4972      	ldr	r1, [pc, #456]	; (178e4 <buttons_scan_fn+0x1fc>)
   1771a:	f44f 735e 	mov.w	r3, #888	; 0x378
   1771e:	463a      	mov	r2, r7
   17720:	4871      	ldr	r0, [pc, #452]	; (178e8 <buttons_scan_fn+0x200>)
   17722:	f014 fe86 	bl	2c432 <printk>
   17726:	4871      	ldr	r0, [pc, #452]	; (178ec <buttons_scan_fn+0x204>)
   17728:	f014 fe83 	bl	2c432 <printk>
   1772c:	f44f 715e 	mov.w	r1, #888	; 0x378
   17730:	4638      	mov	r0, r7
   17732:	f015 f89b 	bl	2c86c <assert_post_action>
	return api->port_get_raw(port, value);
   17736:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1773a:	4648      	mov	r0, r9
   1773c:	685b      	ldr	r3, [r3, #4]
   1773e:	a901      	add	r1, sp, #4
   17740:	4798      	blx	r3
	if (ret == 0) {
   17742:	2800      	cmp	r0, #0
   17744:	d17e      	bne.n	17844 <buttons_scan_fn+0x15c>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   17746:	9b01      	ldr	r3, [sp, #4]
   17748:	ea18 0f03 	tst.w	r8, r3
   1774c:	d003      	beq.n	17756 <buttons_scan_fn+0x6e>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1774e:	3501      	adds	r5, #1
   17750:	2d04      	cmp	r5, #4
   17752:	d1d2      	bne.n	176fa <buttons_scan_fn+0x12>
   17754:	e082      	b.n	1785c <buttons_scan_fn+0x174>
			ret |= 1U << i;
   17756:	2301      	movs	r3, #1
   17758:	40ab      	lsls	r3, r5
   1775a:	431c      	orrs	r4, r3
   1775c:	e7f7      	b.n	1774e <buttons_scan_fn+0x66>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1775e:	3d04      	subs	r5, #4
   17760:	2d00      	cmp	r5, #0
   17762:	f000 809e 	beq.w	178a2 <buttons_scan_fn+0x1ba>
			handler->cb(button_state, has_changed);
   17766:	46aa      	mov	sl, r5
   17768:	f85a 3b04 	ldr.w	r3, [sl], #4
   1776c:	4641      	mov	r1, r8
   1776e:	4620      	mov	r0, r4
   17770:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   17772:	f1ba 0f00 	cmp.w	sl, #0
   17776:	f000 8094 	beq.w	178a2 <buttons_scan_fn+0x1ba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1777a:	686d      	ldr	r5, [r5, #4]
	return node->next;
   1777c:	e08e      	b.n	1789c <buttons_scan_fn+0x1b4>
		initial_run = false;
   1777e:	2200      	movs	r2, #0
   17780:	701a      	strb	r2, [r3, #0]
   17782:	e091      	b.n	178a8 <buttons_scan_fn+0x1c0>
	__asm__ volatile(
   17784:	f04f 0320 	mov.w	r3, #32
   17788:	f3ef 8811 	mrs	r8, BASEPRI
   1778c:	f383 8811 	msr	BASEPRI, r3
   17790:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17794:	4856      	ldr	r0, [pc, #344]	; (178f0 <buttons_scan_fn+0x208>)
   17796:	f00d fab5 	bl	24d04 <z_spin_lock_valid>
   1779a:	b968      	cbnz	r0, 177b8 <buttons_scan_fn+0xd0>
   1779c:	235c      	movs	r3, #92	; 0x5c
   1779e:	4a55      	ldr	r2, [pc, #340]	; (178f4 <buttons_scan_fn+0x20c>)
   177a0:	4955      	ldr	r1, [pc, #340]	; (178f8 <buttons_scan_fn+0x210>)
   177a2:	4851      	ldr	r0, [pc, #324]	; (178e8 <buttons_scan_fn+0x200>)
   177a4:	f014 fe45 	bl	2c432 <printk>
   177a8:	4951      	ldr	r1, [pc, #324]	; (178f0 <buttons_scan_fn+0x208>)
   177aa:	4854      	ldr	r0, [pc, #336]	; (178fc <buttons_scan_fn+0x214>)
   177ac:	f014 fe41 	bl	2c432 <printk>
   177b0:	215c      	movs	r1, #92	; 0x5c
   177b2:	4850      	ldr	r0, [pc, #320]	; (178f4 <buttons_scan_fn+0x20c>)
   177b4:	f015 f85a 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   177b8:	484d      	ldr	r0, [pc, #308]	; (178f0 <buttons_scan_fn+0x208>)
   177ba:	f00d fac1 	bl	24d40 <z_spin_lock_set_owner>
		switch (state) {
   177be:	4b50      	ldr	r3, [pc, #320]	; (17900 <buttons_scan_fn+0x218>)
   177c0:	781a      	ldrb	r2, [r3, #0]
   177c2:	2a01      	cmp	r2, #1
   177c4:	d132      	bne.n	1782c <buttons_scan_fn+0x144>
			state = STATE_WAITING;
   177c6:	2200      	movs	r2, #0
   177c8:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   177ca:	4b4e      	ldr	r3, [pc, #312]	; (17904 <buttons_scan_fn+0x21c>)
   177cc:	f856 0b04 	ldr.w	r0, [r6], #4
   177d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   177d4:	7919      	ldrb	r1, [r3, #4]
   177d6:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   177da:	f7ff fdcf 	bl	1737c <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   177de:	3401      	adds	r4, #1
   177e0:	2c04      	cmp	r4, #4
   177e2:	4605      	mov	r5, r0
   177e4:	d001      	beq.n	177ea <buttons_scan_fn+0x102>
   177e6:	2800      	cmp	r0, #0
   177e8:	d0ef      	beq.n	177ca <buttons_scan_fn+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   177ea:	4841      	ldr	r0, [pc, #260]	; (178f0 <buttons_scan_fn+0x208>)
   177ec:	f00d fa98 	bl	24d20 <z_spin_unlock_valid>
   177f0:	b968      	cbnz	r0, 1780e <buttons_scan_fn+0x126>
   177f2:	2384      	movs	r3, #132	; 0x84
   177f4:	4a3f      	ldr	r2, [pc, #252]	; (178f4 <buttons_scan_fn+0x20c>)
   177f6:	4944      	ldr	r1, [pc, #272]	; (17908 <buttons_scan_fn+0x220>)
   177f8:	483b      	ldr	r0, [pc, #236]	; (178e8 <buttons_scan_fn+0x200>)
   177fa:	f014 fe1a 	bl	2c432 <printk>
   177fe:	493c      	ldr	r1, [pc, #240]	; (178f0 <buttons_scan_fn+0x208>)
   17800:	4842      	ldr	r0, [pc, #264]	; (1790c <buttons_scan_fn+0x224>)
   17802:	f014 fe16 	bl	2c432 <printk>
   17806:	2184      	movs	r1, #132	; 0x84
   17808:	483a      	ldr	r0, [pc, #232]	; (178f4 <buttons_scan_fn+0x20c>)
   1780a:	f015 f82f 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   1780e:	f388 8811 	msr	BASEPRI, r8
   17812:	f3bf 8f6f 	isb	sy
		if (err) {
   17816:	2d00      	cmp	r5, #0
   17818:	d05c      	beq.n	178d4 <buttons_scan_fn+0x1ec>
   1781a:	493d      	ldr	r1, [pc, #244]	; (17910 <buttons_scan_fn+0x228>)
   1781c:	4b3d      	ldr	r3, [pc, #244]	; (17914 <buttons_scan_fn+0x22c>)
			LOG_ERR("Cannot enable callbacks");
   1781e:	483e      	ldr	r0, [pc, #248]	; (17918 <buttons_scan_fn+0x230>)
   17820:	1ac9      	subs	r1, r1, r3
   17822:	08c9      	lsrs	r1, r1, #3
   17824:	0189      	lsls	r1, r1, #6
   17826:	f041 0101 	orr.w	r1, r1, #1
   1782a:	e051      	b.n	178d0 <buttons_scan_fn+0x1e8>
			__ASSERT_NO_MSG(false);
   1782c:	23b4      	movs	r3, #180	; 0xb4
   1782e:	4a3b      	ldr	r2, [pc, #236]	; (1791c <buttons_scan_fn+0x234>)
   17830:	493b      	ldr	r1, [pc, #236]	; (17920 <buttons_scan_fn+0x238>)
   17832:	482d      	ldr	r0, [pc, #180]	; (178e8 <buttons_scan_fn+0x200>)
   17834:	f014 fdfd 	bl	2c432 <printk>
   17838:	21b4      	movs	r1, #180	; 0xb4
   1783a:	4838      	ldr	r0, [pc, #224]	; (1791c <buttons_scan_fn+0x234>)
   1783c:	f015 f816 	bl	2c86c <assert_post_action>
		int err = 0;
   17840:	2500      	movs	r5, #0
			break;
   17842:	e7d2      	b.n	177ea <buttons_scan_fn+0x102>
		if (val < 0) {
   17844:	da83      	bge.n	1774e <buttons_scan_fn+0x66>
   17846:	4b33      	ldr	r3, [pc, #204]	; (17914 <buttons_scan_fn+0x22c>)
   17848:	4931      	ldr	r1, [pc, #196]	; (17910 <buttons_scan_fn+0x228>)
			LOG_ERR("Cannot read gpio pin");
   1784a:	4836      	ldr	r0, [pc, #216]	; (17924 <buttons_scan_fn+0x23c>)
   1784c:	1ac9      	subs	r1, r1, r3
   1784e:	08c9      	lsrs	r1, r1, #3
   17850:	0189      	lsls	r1, r1, #6
   17852:	f041 0101 	orr.w	r1, r1, #1
   17856:	f015 f839 	bl	2c8cc <log_0>
			return 0;
   1785a:	2400      	movs	r4, #0
   1785c:	4b32      	ldr	r3, [pc, #200]	; (17928 <buttons_scan_fn+0x240>)
   1785e:	e8d3 2fef 	ldaex	r2, [r3]
   17862:	e8c3 4fe1 	stlex	r1, r4, [r3]
   17866:	2900      	cmp	r1, #0
   17868:	d1f9      	bne.n	1785e <buttons_scan_fn+0x176>
	if (!initial_run) {
   1786a:	4b30      	ldr	r3, [pc, #192]	; (1792c <buttons_scan_fn+0x244>)
   1786c:	4f30      	ldr	r7, [pc, #192]	; (17930 <buttons_scan_fn+0x248>)
   1786e:	781a      	ldrb	r2, [r3, #0]
   17870:	2a00      	cmp	r2, #0
   17872:	d184      	bne.n	1777e <buttons_scan_fn+0x96>
		if (button_scan != last_button_scan) {
   17874:	6839      	ldr	r1, [r7, #0]
   17876:	42a1      	cmp	r1, r4
   17878:	d016      	beq.n	178a8 <buttons_scan_fn+0x1c0>
	if (button_handler_cb != NULL) {
   1787a:	4b2e      	ldr	r3, [pc, #184]	; (17934 <buttons_scan_fn+0x24c>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   1787c:	ea81 0804 	eor.w	r8, r1, r4
	if (button_handler_cb != NULL) {
   17880:	681b      	ldr	r3, [r3, #0]
   17882:	b113      	cbz	r3, 1788a <buttons_scan_fn+0x1a2>
		button_handler_cb(button_state, has_changed);
   17884:	4641      	mov	r1, r8
   17886:	4620      	mov	r0, r4
   17888:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   1788a:	f04f 33ff 	mov.w	r3, #4294967295
   1788e:	f04f 32ff 	mov.w	r2, #4294967295
   17892:	4829      	ldr	r0, [pc, #164]	; (17938 <buttons_scan_fn+0x250>)
   17894:	f00b fb9c 	bl	22fd0 <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   17898:	4b28      	ldr	r3, [pc, #160]	; (1793c <buttons_scan_fn+0x254>)
   1789a:	681d      	ldr	r5, [r3, #0]
   1789c:	2d00      	cmp	r5, #0
   1789e:	f47f af5e 	bne.w	1775e <buttons_scan_fn+0x76>
	return z_impl_k_mutex_unlock(mutex);
   178a2:	4825      	ldr	r0, [pc, #148]	; (17938 <buttons_scan_fn+0x250>)
   178a4:	f00b fc8e 	bl	231c4 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   178a8:	603c      	str	r4, [r7, #0]
	if (button_scan != 0) {
   178aa:	2c00      	cmp	r4, #0
   178ac:	f43f af6a 	beq.w	17784 <buttons_scan_fn+0x9c>
   178b0:	f44f 72a4 	mov.w	r2, #328	; 0x148
   178b4:	2300      	movs	r3, #0
   178b6:	4922      	ldr	r1, [pc, #136]	; (17940 <buttons_scan_fn+0x258>)
   178b8:	4822      	ldr	r0, [pc, #136]	; (17944 <buttons_scan_fn+0x25c>)
   178ba:	f00d fa71 	bl	24da0 <k_delayed_work_submit_to_queue>
		if (err) {
   178be:	b148      	cbz	r0, 178d4 <buttons_scan_fn+0x1ec>
   178c0:	4913      	ldr	r1, [pc, #76]	; (17910 <buttons_scan_fn+0x228>)
   178c2:	4b14      	ldr	r3, [pc, #80]	; (17914 <buttons_scan_fn+0x22c>)
			LOG_ERR("Cannot add work to workqueue");
   178c4:	4820      	ldr	r0, [pc, #128]	; (17948 <buttons_scan_fn+0x260>)
   178c6:	1ac9      	subs	r1, r1, r3
   178c8:	08c9      	lsrs	r1, r1, #3
   178ca:	0189      	lsls	r1, r1, #6
   178cc:	f041 0101 	orr.w	r1, r1, #1
			LOG_ERR("Cannot enable callbacks");
   178d0:	f014 fffc 	bl	2c8cc <log_0>
}
   178d4:	b003      	add	sp, #12
   178d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178da:	bf00      	nop
   178dc:	20021698 	.word	0x20021698
   178e0:	000316a4 	.word	0x000316a4
   178e4:	000318f4 	.word	0x000318f4
   178e8:	00030166 	.word	0x00030166
   178ec:	00031932 	.word	0x00031932
   178f0:	200216ec 	.word	0x200216ec
   178f4:	000304b3 	.word	0x000304b3
   178f8:	00030505 	.word	0x00030505
   178fc:	0003051a 	.word	0x0003051a
   17900:	200247fd 	.word	0x200247fd
   17904:	0002f3d0 	.word	0x0002f3d0
   17908:	000304d9 	.word	0x000304d9
   1790c:	000304f0 	.word	0x000304f0
   17910:	0002f024 	.word	0x0002f024
   17914:	0002eff4 	.word	0x0002eff4
   17918:	000319e3 	.word	0x000319e3
   1791c:	00031973 	.word	0x00031973
   17920:	00032fcf 	.word	0x00032fcf
   17924:	000319b1 	.word	0x000319b1
   17928:	200216f0 	.word	0x200216f0
   1792c:	20020a5c 	.word	0x20020a5c
   17930:	200216d4 	.word	0x200216d4
   17934:	200216a8 	.word	0x200216a8
   17938:	200216ac 	.word	0x200216ac
   1793c:	200216c0 	.word	0x200216c0
   17940:	20020ec0 	.word	0x20020ec0
   17944:	20021348 	.word	0x20021348
   17948:	000319c6 	.word	0x000319c6

0001794c <dk_leds_init>:
{
   1794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1794e:	2600      	movs	r6, #0
   17950:	4d18      	ldr	r5, [pc, #96]	; (179b4 <dk_leds_init+0x68>)
   17952:	4f19      	ldr	r7, [pc, #100]	; (179b8 <dk_leds_init+0x6c>)
		led_devs[i] = device_get_binding(led_pins[i].port);
   17954:	6828      	ldr	r0, [r5, #0]
   17956:	f00a fe29 	bl	225ac <z_impl_device_get_binding>
   1795a:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
   1795e:	b968      	cbnz	r0, 1797c <dk_leds_init+0x30>
   17960:	4b16      	ldr	r3, [pc, #88]	; (179bc <dk_leds_init+0x70>)
   17962:	4917      	ldr	r1, [pc, #92]	; (179c0 <dk_leds_init+0x74>)
			LOG_ERR("Cannot bind gpio device");
   17964:	4817      	ldr	r0, [pc, #92]	; (179c4 <dk_leds_init+0x78>)
   17966:	1ac9      	subs	r1, r1, r3
   17968:	08c9      	lsrs	r1, r1, #3
   1796a:	0189      	lsls	r1, r1, #6
   1796c:	f041 0101 	orr.w	r1, r1, #1
   17970:	f014 ffac 	bl	2c8cc <log_0>
			return -ENODEV;
   17974:	f06f 0412 	mvn.w	r4, #18
}
   17978:	4620      	mov	r0, r4
   1797a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   1797c:	f44f 7200 	mov.w	r2, #512	; 0x200
   17980:	7929      	ldrb	r1, [r5, #4]
   17982:	f7ff fd91 	bl	174a8 <gpio_pin_configure>
		if (err) {
   17986:	4604      	mov	r4, r0
   17988:	b150      	cbz	r0, 179a0 <dk_leds_init+0x54>
   1798a:	4b0c      	ldr	r3, [pc, #48]	; (179bc <dk_leds_init+0x70>)
   1798c:	490c      	ldr	r1, [pc, #48]	; (179c0 <dk_leds_init+0x74>)
			LOG_ERR("Cannot configure LED gpio");
   1798e:	480e      	ldr	r0, [pc, #56]	; (179c8 <dk_leds_init+0x7c>)
   17990:	1ac9      	subs	r1, r1, r3
   17992:	08c9      	lsrs	r1, r1, #3
   17994:	0189      	lsls	r1, r1, #6
   17996:	f041 0101 	orr.w	r1, r1, #1
   1799a:	f014 ff97 	bl	2c8cc <log_0>
			return err;
   1799e:	e7eb      	b.n	17978 <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   179a0:	3601      	adds	r6, #1
   179a2:	2e04      	cmp	r6, #4
   179a4:	f105 0508 	add.w	r5, r5, #8
   179a8:	d1d4      	bne.n	17954 <dk_leds_init+0x8>
}
   179aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   179ae:	210f      	movs	r1, #15
   179b0:	f7ff bdd6 	b.w	17560 <dk_set_leds_state.part.0>
   179b4:	0002f3f0 	.word	0x0002f3f0
   179b8:	200216dc 	.word	0x200216dc
   179bc:	0002eff4 	.word	0x0002eff4
   179c0:	0002f024 	.word	0x0002f024
   179c4:	000319fb 	.word	0x000319fb
   179c8:	00031a13 	.word	0x00031a13

000179cc <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   179cc:	4b05      	ldr	r3, [pc, #20]	; (179e4 <dk_read_buttons+0x18>)
   179ce:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   179d2:	b100      	cbz	r0, 179d6 <dk_read_buttons+0xa>
		*button_state = current_state;
   179d4:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   179d6:	4804      	ldr	r0, [pc, #16]	; (179e8 <dk_read_buttons+0x1c>)
   179d8:	b111      	cbz	r1, 179e0 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   179da:	6802      	ldr	r2, [r0, #0]
   179dc:	405a      	eors	r2, r3
   179de:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   179e0:	6003      	str	r3, [r0, #0]
}
   179e2:	4770      	bx	lr
   179e4:	200216f0 	.word	0x200216f0
   179e8:	200216d8 	.word	0x200216d8

000179ec <dk_buttons_init>:
{
   179ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   179f0:	4b48      	ldr	r3, [pc, #288]	; (17b14 <dk_buttons_init+0x128>)
   179f2:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   179f4:	4d48      	ldr	r5, [pc, #288]	; (17b18 <dk_buttons_init+0x12c>)
   179f6:	4f49      	ldr	r7, [pc, #292]	; (17b1c <dk_buttons_init+0x130>)
   179f8:	4849      	ldr	r0, [pc, #292]	; (17b20 <dk_buttons_init+0x134>)
   179fa:	f016 ffbe 	bl	2e97a <z_impl_k_mutex_init>
   179fe:	46b9      	mov	r9, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17a00:	2600      	movs	r6, #0
   17a02:	46a8      	mov	r8, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   17a04:	6828      	ldr	r0, [r5, #0]
   17a06:	f00a fdd1 	bl	225ac <z_impl_device_get_binding>
   17a0a:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   17a0e:	b970      	cbnz	r0, 17a2e <dk_buttons_init+0x42>
   17a10:	4b44      	ldr	r3, [pc, #272]	; (17b24 <dk_buttons_init+0x138>)
   17a12:	4945      	ldr	r1, [pc, #276]	; (17b28 <dk_buttons_init+0x13c>)
			LOG_ERR("Cannot bind gpio device");
   17a14:	4845      	ldr	r0, [pc, #276]	; (17b2c <dk_buttons_init+0x140>)
   17a16:	1ac9      	subs	r1, r1, r3
   17a18:	08c9      	lsrs	r1, r1, #3
   17a1a:	0189      	lsls	r1, r1, #6
   17a1c:	f041 0101 	orr.w	r1, r1, #1
   17a20:	f014 ff54 	bl	2c8cc <log_0>
			return -ENODEV;
   17a24:	f06f 0412 	mvn.w	r4, #18
}
   17a28:	4620      	mov	r0, r4
   17a2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   17a2e:	f44f 7288 	mov.w	r2, #272	; 0x110
   17a32:	7929      	ldrb	r1, [r5, #4]
   17a34:	f7ff fd38 	bl	174a8 <gpio_pin_configure>
		if (err) {
   17a38:	4604      	mov	r4, r0
   17a3a:	b150      	cbz	r0, 17a52 <dk_buttons_init+0x66>
   17a3c:	493a      	ldr	r1, [pc, #232]	; (17b28 <dk_buttons_init+0x13c>)
   17a3e:	4b39      	ldr	r3, [pc, #228]	; (17b24 <dk_buttons_init+0x138>)
			LOG_ERR("Cannot configure button gpio");
   17a40:	483b      	ldr	r0, [pc, #236]	; (17b30 <dk_buttons_init+0x144>)
   17a42:	1ac9      	subs	r1, r1, r3
   17a44:	08c9      	lsrs	r1, r1, #3
   17a46:	0189      	lsls	r1, r1, #6
   17a48:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Cannot add work to workqueue");
   17a4c:	f014 ff3e 	bl	2c8cc <log_0>
		return err;
   17a50:	e7ea      	b.n	17a28 <dk_buttons_init+0x3c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17a52:	3601      	adds	r6, #1
   17a54:	2e04      	cmp	r6, #4
   17a56:	f105 0508 	add.w	r5, r5, #8
   17a5a:	d1d3      	bne.n	17a04 <dk_buttons_init+0x18>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17a5c:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   17a5e:	4681      	mov	r9, r0
		pin_mask |= BIT(button_pins[i].number);
   17a60:	f04f 0b01 	mov.w	fp, #1
   17a64:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 17b1c <dk_buttons_init+0x130>
		err = gpio_pin_interrupt_configure(button_devs[i],
   17a68:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
   17a6c:	f85a 0b04 	ldr.w	r0, [sl], #4
   17a70:	791e      	ldrb	r6, [r3, #4]
   17a72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   17a76:	4631      	mov	r1, r6
   17a78:	f7ff fc80 	bl	1737c <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   17a7c:	4604      	mov	r4, r0
   17a7e:	b140      	cbz	r0, 17a92 <dk_buttons_init+0xa6>
   17a80:	4929      	ldr	r1, [pc, #164]	; (17b28 <dk_buttons_init+0x13c>)
   17a82:	4b28      	ldr	r3, [pc, #160]	; (17b24 <dk_buttons_init+0x138>)
			LOG_ERR("Cannot disable callbacks()");
   17a84:	482b      	ldr	r0, [pc, #172]	; (17b34 <dk_buttons_init+0x148>)
   17a86:	1ac9      	subs	r1, r1, r3
   17a88:	08c9      	lsrs	r1, r1, #3
   17a8a:	0189      	lsls	r1, r1, #6
   17a8c:	f041 0101 	orr.w	r1, r1, #1
   17a90:	e7dc      	b.n	17a4c <dk_buttons_init+0x60>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17a92:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   17a94:	fa0b f606 	lsl.w	r6, fp, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17a98:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   17a9a:	ea49 0906 	orr.w	r9, r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17a9e:	d1e3      	bne.n	17a68 <dk_buttons_init+0x7c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17aa0:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   17aa2:	4e25      	ldr	r6, [pc, #148]	; (17b38 <dk_buttons_init+0x14c>)
   17aa4:	4b25      	ldr	r3, [pc, #148]	; (17b3c <dk_buttons_init+0x150>)
	callback->pin_mask = pin_mask;
   17aa6:	e9c6 3901 	strd	r3, r9, [r6, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   17aaa:	f857 0b04 	ldr.w	r0, [r7], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   17aae:	6883      	ldr	r3, [r0, #8]
   17ab0:	69db      	ldr	r3, [r3, #28]
   17ab2:	b16b      	cbz	r3, 17ad0 <dk_buttons_init+0xe4>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   17ab4:	2201      	movs	r2, #1
   17ab6:	4631      	mov	r1, r6
   17ab8:	4798      	blx	r3
		if (err) {
   17aba:	4604      	mov	r4, r0
   17abc:	b158      	cbz	r0, 17ad6 <dk_buttons_init+0xea>
   17abe:	491a      	ldr	r1, [pc, #104]	; (17b28 <dk_buttons_init+0x13c>)
   17ac0:	4b18      	ldr	r3, [pc, #96]	; (17b24 <dk_buttons_init+0x138>)
			LOG_ERR("Cannot add callback");
   17ac2:	481f      	ldr	r0, [pc, #124]	; (17b40 <dk_buttons_init+0x154>)
   17ac4:	1ac9      	subs	r1, r1, r3
   17ac6:	08c9      	lsrs	r1, r1, #3
   17ac8:	0189      	lsls	r1, r1, #6
   17aca:	f041 0101 	orr.w	r1, r1, #1
   17ace:	e7bd      	b.n	17a4c <dk_buttons_init+0x60>
		return -ENOTSUP;
   17ad0:	f06f 0485 	mvn.w	r4, #133	; 0x85
   17ad4:	e7f3      	b.n	17abe <dk_buttons_init+0xd2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   17ad6:	3501      	adds	r5, #1
   17ad8:	2d04      	cmp	r5, #4
   17ada:	d1e6      	bne.n	17aaa <dk_buttons_init+0xbe>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   17adc:	4919      	ldr	r1, [pc, #100]	; (17b44 <dk_buttons_init+0x158>)
   17ade:	481a      	ldr	r0, [pc, #104]	; (17b48 <dk_buttons_init+0x15c>)
   17ae0:	f017 f831 	bl	2eb46 <k_delayed_work_init>
	state = STATE_SCANNING;
   17ae4:	2201      	movs	r2, #1
   17ae6:	4b19      	ldr	r3, [pc, #100]	; (17b4c <dk_buttons_init+0x160>)
   17ae8:	4917      	ldr	r1, [pc, #92]	; (17b48 <dk_buttons_init+0x15c>)
   17aea:	701a      	strb	r2, [r3, #0]
   17aec:	4818      	ldr	r0, [pc, #96]	; (17b50 <dk_buttons_init+0x164>)
   17aee:	2200      	movs	r2, #0
   17af0:	2300      	movs	r3, #0
   17af2:	f00d f955 	bl	24da0 <k_delayed_work_submit_to_queue>
	if (err) {
   17af6:	4604      	mov	r4, r0
   17af8:	b140      	cbz	r0, 17b0c <dk_buttons_init+0x120>
   17afa:	490b      	ldr	r1, [pc, #44]	; (17b28 <dk_buttons_init+0x13c>)
   17afc:	4b09      	ldr	r3, [pc, #36]	; (17b24 <dk_buttons_init+0x138>)
		LOG_ERR("Cannot add work to workqueue");
   17afe:	4815      	ldr	r0, [pc, #84]	; (17b54 <dk_buttons_init+0x168>)
   17b00:	1ac9      	subs	r1, r1, r3
   17b02:	08c9      	lsrs	r1, r1, #3
   17b04:	0189      	lsls	r1, r1, #6
   17b06:	f041 0101 	orr.w	r1, r1, #1
   17b0a:	e79f      	b.n	17a4c <dk_buttons_init+0x60>
	dk_read_buttons(NULL, NULL);
   17b0c:	4601      	mov	r1, r0
   17b0e:	f7ff ff5d 	bl	179cc <dk_read_buttons>
	return 0;
   17b12:	e789      	b.n	17a28 <dk_buttons_init+0x3c>
   17b14:	200216a8 	.word	0x200216a8
   17b18:	0002f3d0 	.word	0x0002f3d0
   17b1c:	20021698 	.word	0x20021698
   17b20:	200216ac 	.word	0x200216ac
   17b24:	0002eff4 	.word	0x0002eff4
   17b28:	0002f024 	.word	0x0002f024
   17b2c:	000319fb 	.word	0x000319fb
   17b30:	00031a2d 	.word	0x00031a2d
   17b34:	00031a4a 	.word	0x00031a4a
   17b38:	200216c8 	.word	0x200216c8
   17b3c:	000175d1 	.word	0x000175d1
   17b40:	00031a65 	.word	0x00031a65
   17b44:	000176e9 	.word	0x000176e9
   17b48:	20020ec0 	.word	0x20020ec0
   17b4c:	200247fd 	.word	0x200247fd
   17b50:	20021348 	.word	0x20021348
   17b54:	000319c6 	.word	0x000319c6

00017b58 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   17b58:	2804      	cmp	r0, #4
{
   17b5a:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
   17b5c:	d90d      	bls.n	17b7a <dk_set_led+0x22>
   17b5e:	4b14      	ldr	r3, [pc, #80]	; (17bb0 <dk_set_led+0x58>)
   17b60:	4914      	ldr	r1, [pc, #80]	; (17bb4 <dk_set_led+0x5c>)
		LOG_ERR("LED index out of the range");
   17b62:	4815      	ldr	r0, [pc, #84]	; (17bb8 <dk_set_led+0x60>)
   17b64:	1ac9      	subs	r1, r1, r3
   17b66:	08c9      	lsrs	r1, r1, #3
   17b68:	0189      	lsls	r1, r1, #6
   17b6a:	f041 0101 	orr.w	r1, r1, #1
   17b6e:	f014 fead 	bl	2c8cc <log_0>
		return -EINVAL;
   17b72:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   17b76:	4620      	mov	r0, r4
   17b78:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   17b7a:	fab1 f281 	clz	r2, r1
   17b7e:	4b0f      	ldr	r3, [pc, #60]	; (17bbc <dk_set_led+0x64>)
   17b80:	0952      	lsrs	r2, r2, #5
   17b82:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   17b86:	7919      	ldrb	r1, [r3, #4]
   17b88:	4b0d      	ldr	r3, [pc, #52]	; (17bc0 <dk_set_led+0x68>)
   17b8a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   17b8e:	f7ff fcbb 	bl	17508 <gpio_pin_set_raw>
	if (err) {
   17b92:	4604      	mov	r4, r0
   17b94:	2800      	cmp	r0, #0
   17b96:	d0ee      	beq.n	17b76 <dk_set_led+0x1e>
   17b98:	4b05      	ldr	r3, [pc, #20]	; (17bb0 <dk_set_led+0x58>)
   17b9a:	4906      	ldr	r1, [pc, #24]	; (17bb4 <dk_set_led+0x5c>)
		LOG_ERR("Cannot write LED gpio");
   17b9c:	4809      	ldr	r0, [pc, #36]	; (17bc4 <dk_set_led+0x6c>)
   17b9e:	1ac9      	subs	r1, r1, r3
   17ba0:	08c9      	lsrs	r1, r1, #3
   17ba2:	0189      	lsls	r1, r1, #6
   17ba4:	f041 0101 	orr.w	r1, r1, #1
   17ba8:	f014 fe90 	bl	2c8cc <log_0>
   17bac:	e7e3      	b.n	17b76 <dk_set_led+0x1e>
   17bae:	bf00      	nop
   17bb0:	0002eff4 	.word	0x0002eff4
   17bb4:	0002f024 	.word	0x0002f024
   17bb8:	00031a79 	.word	0x00031a79
   17bbc:	0002f3f0 	.word	0x0002f3f0
   17bc0:	200216dc 	.word	0x200216dc
   17bc4:	00031944 	.word	0x00031944

00017bc8 <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   17bc8:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   17bca:	f240 2201 	movw	r2, #513	; 0x201
   17bce:	2102      	movs	r1, #2
   17bd0:	2066      	movs	r0, #102	; 0x66
   17bd2:	f7fb fef1 	bl	139b8 <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   17bd6:	4b05      	ldr	r3, [pc, #20]	; (17bec <open_socket+0x24>)
   17bd8:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   17bda:	3001      	adds	r0, #1
   17bdc:	d104      	bne.n	17be8 <open_socket+0x20>
		return -errno;
   17bde:	f015 fa76 	bl	2d0ce <__errno>
   17be2:	6800      	ldr	r0, [r0, #0]
   17be4:	4240      	negs	r0, r0
	}

	return 0;
}
   17be6:	bd08      	pop	{r3, pc}
	return 0;
   17be8:	2000      	movs	r0, #0
   17bea:	e7fc      	b.n	17be6 <open_socket+0x1e>
   17bec:	200216f8 	.word	0x200216f8

00017bf0 <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   17bf0:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   17bf2:	4d18      	ldr	r5, [pc, #96]	; (17c54 <at_cmd_driver_init+0x64>)
{
   17bf4:	b089      	sub	sp, #36	; 0x24
	if (initialized) {
   17bf6:	782b      	ldrb	r3, [r5, #0]
   17bf8:	bb53      	cbnz	r3, 17c50 <at_cmd_driver_init+0x60>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   17bfa:	f7ff ffe5 	bl	17bc8 <open_socket>
	if (err) {
   17bfe:	4604      	mov	r4, r0
   17c00:	b168      	cbz	r0, 17c1e <at_cmd_driver_init+0x2e>
   17c02:	4a15      	ldr	r2, [pc, #84]	; (17c58 <at_cmd_driver_init+0x68>)
   17c04:	4b15      	ldr	r3, [pc, #84]	; (17c5c <at_cmd_driver_init+0x6c>)
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   17c06:	4601      	mov	r1, r0
   17c08:	1ad2      	subs	r2, r2, r3
   17c0a:	08d2      	lsrs	r2, r2, #3
   17c0c:	0192      	lsls	r2, r2, #6
   17c0e:	4814      	ldr	r0, [pc, #80]	; (17c60 <at_cmd_driver_init+0x70>)
   17c10:	f042 0201 	orr.w	r2, r2, #1
   17c14:	f014 fe69 	bl	2c8ea <log_1>

	initialized = true;
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   17c18:	4620      	mov	r0, r4
   17c1a:	b009      	add	sp, #36	; 0x24
   17c1c:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17c1e:	2200      	movs	r2, #0
   17c20:	2300      	movs	r3, #0
   17c22:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17c26:	230a      	movs	r3, #10
   17c28:	e9cd 0000 	strd	r0, r0, [sp]
   17c2c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   17c30:	9004      	str	r0, [sp, #16]
   17c32:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17c36:	4b0b      	ldr	r3, [pc, #44]	; (17c64 <at_cmd_driver_init+0x74>)
   17c38:	490b      	ldr	r1, [pc, #44]	; (17c68 <at_cmd_driver_init+0x78>)
   17c3a:	480c      	ldr	r0, [pc, #48]	; (17c6c <at_cmd_driver_init+0x7c>)
   17c3c:	f00c ff84 	bl	24b48 <z_impl_k_thread_create>
	socket_tid = k_thread_create(&socket_thread, socket_thread_stack,
   17c40:	4b0b      	ldr	r3, [pc, #44]	; (17c70 <at_cmd_driver_init+0x80>)
   17c42:	6018      	str	r0, [r3, #0]
	return z_impl_k_thread_name_set(thread_id, value);
   17c44:	490b      	ldr	r1, [pc, #44]	; (17c74 <at_cmd_driver_init+0x84>)
   17c46:	f016 ff1d 	bl	2ea84 <z_impl_k_thread_name_set>
	initialized = true;
   17c4a:	2301      	movs	r3, #1
   17c4c:	702b      	strb	r3, [r5, #0]
	return 0;
   17c4e:	e7e3      	b.n	17c18 <at_cmd_driver_init+0x28>
		return 0;
   17c50:	2400      	movs	r4, #0
   17c52:	e7e1      	b.n	17c18 <at_cmd_driver_init+0x28>
   17c54:	2002528a 	.word	0x2002528a
   17c58:	0002eff4 	.word	0x0002eff4
   17c5c:	0002eff4 	.word	0x0002eff4
   17c60:	00031aa8 	.word	0x00031aa8
   17c64:	00017d99 	.word	0x00017d99
   17c68:	20027738 	.word	0x20027738
   17c6c:	20020ef0 	.word	0x20020ef0
   17c70:	20021720 	.word	0x20021720
   17c74:	00031aca 	.word	0x00031aca

00017c78 <complete_cmd>:
{
   17c78:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   17c7a:	4c08      	ldr	r4, [pc, #32]	; (17c9c <complete_cmd+0x24>)
   17c7c:	f04f 32ff 	mov.w	r2, #4294967295
   17c80:	f04f 33ff 	mov.w	r3, #4294967295
   17c84:	4620      	mov	r0, r4
   17c86:	f00b f9a3 	bl	22fd0 <z_impl_k_mutex_lock>
	current_cmd.cmd = NULL;
   17c8a:	2200      	movs	r2, #0
   17c8c:	4b04      	ldr	r3, [pc, #16]	; (17ca0 <complete_cmd+0x28>)
   17c8e:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   17c90:	4620      	mov	r0, r4
}
   17c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17c96:	f00b ba95 	b.w	231c4 <z_impl_k_mutex_unlock>
   17c9a:	bf00      	nop
   17c9c:	20020b68 	.word	0x20020b68
   17ca0:	200216fc 	.word	0x200216fc

00017ca4 <load_cmd_and_write>:
{
   17ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17ca8:	b086      	sub	sp, #24
		if (current_cmd.cmd != NULL ||
   17caa:	4e32      	ldr	r6, [pc, #200]	; (17d74 <load_cmd_and_write+0xd0>)
	return z_impl_k_mutex_lock(mutex, timeout);
   17cac:	f04f 33ff 	mov.w	r3, #4294967295
   17cb0:	4637      	mov	r7, r6
   17cb2:	f04f 32ff 	mov.w	r2, #4294967295
   17cb6:	4830      	ldr	r0, [pc, #192]	; (17d78 <load_cmd_and_write+0xd4>)
   17cb8:	f00b f98a 	bl	22fd0 <z_impl_k_mutex_lock>
   17cbc:	4d2f      	ldr	r5, [pc, #188]	; (17d7c <load_cmd_and_write+0xd8>)
   17cbe:	4b30      	ldr	r3, [pc, #192]	; (17d80 <load_cmd_and_write+0xdc>)
	return z_impl_k_msgq_get(msgq, data, timeout);
   17cc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 17d94 <load_cmd_and_write+0xf0>
   17cc4:	1aed      	subs	r5, r5, r3
   17cc6:	08ed      	lsrs	r5, r5, #3
   17cc8:	6833      	ldr	r3, [r6, #0]
   17cca:	2b00      	cmp	r3, #0
   17ccc:	d14b      	bne.n	17d66 <load_cmd_and_write+0xc2>
   17cce:	2200      	movs	r2, #0
   17cd0:	2300      	movs	r3, #0
   17cd2:	4631      	mov	r1, r6
   17cd4:	4640      	mov	r0, r8
   17cd6:	f00b f8cd 	bl	22e74 <z_impl_k_msgq_get>
   17cda:	4604      	mov	r4, r0
   17cdc:	2800      	cmp	r0, #0
   17cde:	d142      	bne.n	17d66 <load_cmd_and_write+0xc2>
		ret = at_write(current_cmd.cmd);
   17ce0:	6831      	ldr	r1, [r6, #0]
	int bytes_to_send = strlen(cmd);
   17ce2:	4608      	mov	r0, r1
   17ce4:	9103      	str	r1, [sp, #12]
   17ce6:	f00e ff97 	bl	26c18 <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   17cea:	4b26      	ldr	r3, [pc, #152]	; (17d84 <load_cmd_and_write+0xe0>)
	int bytes_to_send = strlen(cmd);
   17cec:	4602      	mov	r2, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   17cee:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   17cf0:	9903      	ldr	r1, [sp, #12]
   17cf2:	4623      	mov	r3, r4
   17cf4:	e9cd 4400 	strd	r4, r4, [sp]
   17cf8:	9202      	str	r2, [sp, #8]
   17cfa:	f015 f8d4 	bl	2cea6 <z_impl_zsock_sendto>
   17cfe:	4601      	mov	r1, r0
	if (bytes_sent == -1) {
   17d00:	1c48      	adds	r0, r1, #1
   17d02:	9a02      	ldr	r2, [sp, #8]
   17d04:	d126      	bne.n	17d54 <load_cmd_and_write+0xb0>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   17d06:	f015 f9e2 	bl	2d0ce <__errno>
   17d0a:	01ac      	lsls	r4, r5, #6
   17d0c:	f044 0401 	orr.w	r4, r4, #1
   17d10:	4622      	mov	r2, r4
   17d12:	6801      	ldr	r1, [r0, #0]
   17d14:	481c      	ldr	r0, [pc, #112]	; (17d88 <load_cmd_and_write+0xe4>)
   17d16:	f014 fde8 	bl	2c8ea <log_1>
		return -errno;
   17d1a:	f015 f9d8 	bl	2d0ce <__errno>
   17d1e:	6804      	ldr	r4, [r0, #0]
   17d20:	4264      	negs	r4, r4
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   17d22:	7c3b      	ldrb	r3, [r7, #16]
   17d24:	07da      	lsls	r2, r3, #31
   17d26:	d502      	bpl.n	17d2e <load_cmd_and_write+0x8a>
			k_free(current_cmd.cmd);
   17d28:	6838      	ldr	r0, [r7, #0]
   17d2a:	f016 ffe3 	bl	2ecf4 <k_free>
		if (ret != 0) {
   17d2e:	b1d4      	cbz	r4, 17d66 <load_cmd_and_write+0xc2>
			resp.state = AT_CMD_ERROR_WRITE;
   17d30:	2305      	movs	r3, #5
   17d32:	f88d 3014 	strb.w	r3, [sp, #20]
			if (current_cmd.flags & AT_CMD_SYNC) {
   17d36:	7c3b      	ldrb	r3, [r7, #16]
			resp.code = ret;
   17d38:	9404      	str	r4, [sp, #16]
			if (current_cmd.flags & AT_CMD_SYNC) {
   17d3a:	079b      	lsls	r3, r3, #30
   17d3c:	d507      	bpl.n	17d4e <load_cmd_and_write+0xaa>
	return z_impl_k_msgq_put(msgq, data, timeout);
   17d3e:	f04f 32ff 	mov.w	r2, #4294967295
   17d42:	f04f 33ff 	mov.w	r3, #4294967295
   17d46:	4811      	ldr	r0, [pc, #68]	; (17d8c <load_cmd_and_write+0xe8>)
   17d48:	a904      	add	r1, sp, #16
   17d4a:	f00a fff1 	bl	22d30 <z_impl_k_msgq_put>
			complete_cmd();
   17d4e:	f7ff ff93 	bl	17c78 <complete_cmd>
	} while (ret != 0);
   17d52:	e7b9      	b.n	17cc8 <load_cmd_and_write+0x24>
	if (bytes_sent != bytes_to_send) {
   17d54:	428a      	cmp	r2, r1
   17d56:	d0e4      	beq.n	17d22 <load_cmd_and_write+0x7e>
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   17d58:	01ab      	lsls	r3, r5, #6
   17d5a:	480d      	ldr	r0, [pc, #52]	; (17d90 <load_cmd_and_write+0xec>)
   17d5c:	f043 0302 	orr.w	r3, r3, #2
   17d60:	f014 fdda 	bl	2c918 <log_2>
   17d64:	e7dd      	b.n	17d22 <load_cmd_and_write+0x7e>
	return z_impl_k_mutex_unlock(mutex);
   17d66:	4804      	ldr	r0, [pc, #16]	; (17d78 <load_cmd_and_write+0xd4>)
   17d68:	f00b fa2c 	bl	231c4 <z_impl_k_mutex_unlock>
}
   17d6c:	b006      	add	sp, #24
   17d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17d72:	bf00      	nop
   17d74:	200216fc 	.word	0x200216fc
   17d78:	20020b68 	.word	0x20020b68
   17d7c:	0002eff4 	.word	0x0002eff4
   17d80:	0002eff4 	.word	0x0002eff4
   17d84:	200216f8 	.word	0x200216f8
   17d88:	00031adf 	.word	0x00031adf
   17d8c:	20020bf8 	.word	0x20020bf8
   17d90:	00031b02 	.word	0x00031b02
   17d94:	20020bcc 	.word	0x20020bcc

00017d98 <socket_thread_fn>:
{
   17d98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   17d9c:	f8df 9260 	ldr.w	r9, [pc, #608]	; 18000 <socket_thread_fn+0x268>
   17da0:	4f83      	ldr	r7, [pc, #524]	; (17fb0 <socket_thread_fn+0x218>)
   17da2:	46ca      	mov	sl, r9
   17da4:	4b83      	ldr	r3, [pc, #524]	; (17fb4 <socket_thread_fn+0x21c>)
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   17da6:	4e84      	ldr	r6, [pc, #528]	; (17fb8 <socket_thread_fn+0x220>)
   17da8:	1aff      	subs	r7, r7, r3
   17daa:	08ff      	lsrs	r7, r7, #3
		load_cmd_and_write();
   17dac:	f7ff ff7a 	bl	17ca4 <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   17db0:	f8d9 0000 	ldr.w	r0, [r9]
   17db4:	2500      	movs	r5, #0
   17db6:	f640 228c 	movw	r2, #2700	; 0xa8c
   17dba:	462b      	mov	r3, r5
   17dbc:	e9cd 5500 	strd	r5, r5, [sp]
   17dc0:	497d      	ldr	r1, [pc, #500]	; (17fb8 <socket_thread_fn+0x220>)
   17dc2:	f015 f8a3 	bl	2cf0c <z_impl_zsock_recvfrom>
		ret.code  = 0;
   17dc6:	4c7d      	ldr	r4, [pc, #500]	; (17fbc <socket_thread_fn+0x224>)
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   17dc8:	f8df b238 	ldr.w	fp, [pc, #568]	; 18004 <socket_thread_fn+0x26c>
		if (bytes_read < 0) {
   17dcc:	42a8      	cmp	r0, r5
   17dce:	4680      	mov	r8, r0
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   17dd0:	f8cb 0000 	str.w	r0, [fp]
		ret.code  = 0;
   17dd4:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   17dd6:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   17dd8:	da6a      	bge.n	17eb0 <socket_thread_fn+0x118>
			if (errno == EHOSTDOWN) {
   17dda:	f015 f978 	bl	2d0ce <__errno>
   17dde:	6803      	ldr	r3, [r0, #0]
   17de0:	2b75      	cmp	r3, #117	; 0x75
   17de2:	d122      	bne.n	17e2a <socket_thread_fn+0x92>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17de4:	2301      	movs	r3, #1
   17de6:	4c76      	ldr	r4, [pc, #472]	; (17fc0 <socket_thread_fn+0x228>)
   17de8:	e8d4 2fef 	ldaex	r2, [r4]
   17dec:	e8c4 3fe1 	stlex	r1, r3, [r4]
   17df0:	2900      	cmp	r1, #0
   17df2:	d1f9      	bne.n	17de8 <socket_thread_fn+0x50>
				close(common_socket_fd);
   17df4:	f8d9 0000 	ldr.w	r0, [r9]
	return z_impl_zsock_close(sock);
   17df8:	f015 f828 	bl	2ce4c <z_impl_zsock_close>
				bsdlib_shutdown_wait();
   17dfc:	f7fe fd3c 	bl	16878 <bsdlib_shutdown_wait>
   17e00:	e8d4 3fef 	ldaex	r3, [r4]
   17e04:	e8c4 5fe2 	stlex	r2, r5, [r4]
   17e08:	2a00      	cmp	r2, #0
   17e0a:	d1f9      	bne.n	17e00 <socket_thread_fn+0x68>
				if (open_socket() != 0) {
   17e0c:	f7ff fedc 	bl	17bc8 <open_socket>
   17e10:	2800      	cmp	r0, #0
   17e12:	d0cb      	beq.n	17dac <socket_thread_fn+0x14>
					LOG_ERR("Failed to open AT socket "
   17e14:	f015 f95b 	bl	2d0ce <__errno>
   17e18:	01bc      	lsls	r4, r7, #6
   17e1a:	f044 0401 	orr.w	r4, r4, #1
   17e1e:	6801      	ldr	r1, [r0, #0]
   17e20:	4622      	mov	r2, r4
   17e22:	4868      	ldr	r0, [pc, #416]	; (17fc4 <socket_thread_fn+0x22c>)
   17e24:	f014 fd61 	bl	2c8ea <log_1>
   17e28:	e7c0      	b.n	17dac <socket_thread_fn+0x14>
				LOG_ERR("AT socket recv failed with err %d",
   17e2a:	01bd      	lsls	r5, r7, #6
   17e2c:	f8db 1000 	ldr.w	r1, [fp]
   17e30:	4865      	ldr	r0, [pc, #404]	; (17fc8 <socket_thread_fn+0x230>)
   17e32:	f045 0201 	orr.w	r2, r5, #1
   17e36:	f014 fd58 	bl	2c8ea <log_1>
			if ((close(common_socket_fd) == 0) &&
   17e3a:	f8d9 0000 	ldr.w	r0, [r9]
   17e3e:	f015 f805 	bl	2ce4c <z_impl_zsock_close>
   17e42:	bb28      	cbnz	r0, 17e90 <socket_thread_fn+0xf8>
			    (open_socket() == 0)) {
   17e44:	f7ff fec0 	bl	17bc8 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   17e48:	bb10      	cbnz	r0, 17e90 <socket_thread_fn+0xf8>
				LOG_INF("AT socket recovered");
   17e4a:	4860      	ldr	r0, [pc, #384]	; (17fcc <socket_thread_fn+0x234>)
   17e4c:	f045 0103 	orr.w	r1, r5, #3
   17e50:	f014 fd3c 	bl	2c8cc <log_0>
				ret.state = AT_CMD_ERROR_READ;
   17e54:	2306      	movs	r3, #6
   17e56:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   17e58:	f015 f939 	bl	2d0ce <__errno>
   17e5c:	6803      	ldr	r3, [r0, #0]
   17e5e:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   17e60:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   17e62:	4b5b      	ldr	r3, [pc, #364]	; (17fd0 <socket_thread_fn+0x238>)
   17e64:	681a      	ldr	r2, [r3, #0]
   17e66:	b16a      	cbz	r2, 17e84 <socket_thread_fn+0xec>
   17e68:	7c1b      	ldrb	r3, [r3, #16]
   17e6a:	079b      	lsls	r3, r3, #30
   17e6c:	d50a      	bpl.n	17e84 <socket_thread_fn+0xec>
		    current_cmd.flags & AT_CMD_SYNC &&
   17e6e:	7923      	ldrb	r3, [r4, #4]
   17e70:	2b07      	cmp	r3, #7
   17e72:	d09b      	beq.n	17dac <socket_thread_fn+0x14>
	return z_impl_k_msgq_put(msgq, data, timeout);
   17e74:	f04f 32ff 	mov.w	r2, #4294967295
   17e78:	f04f 33ff 	mov.w	r3, #4294967295
   17e7c:	494f      	ldr	r1, [pc, #316]	; (17fbc <socket_thread_fn+0x224>)
   17e7e:	4855      	ldr	r0, [pc, #340]	; (17fd4 <socket_thread_fn+0x23c>)
   17e80:	f00a ff56 	bl	22d30 <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   17e84:	7923      	ldrb	r3, [r4, #4]
   17e86:	2b07      	cmp	r3, #7
   17e88:	d090      	beq.n	17dac <socket_thread_fn+0x14>
			complete_cmd();
   17e8a:	f7ff fef5 	bl	17c78 <complete_cmd>
   17e8e:	e78d      	b.n	17dac <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   17e90:	f015 f91d 	bl	2d0ce <__errno>
   17e94:	f045 0501 	orr.w	r5, r5, #1
   17e98:	6801      	ldr	r1, [r0, #0]
   17e9a:	462a      	mov	r2, r5
   17e9c:	484e      	ldr	r0, [pc, #312]	; (17fd8 <socket_thread_fn+0x240>)
   17e9e:	f014 fd24 	bl	2c8ea <log_1>
			close(common_socket_fd);
   17ea2:	f8da 0000 	ldr.w	r0, [sl]
}
   17ea6:	b003      	add	sp, #12
   17ea8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17eac:	f014 bfce 	b.w	2ce4c <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   17eb0:	d10a      	bne.n	17ec8 <socket_thread_fn+0x130>
			LOG_ERR("AT message empty");
   17eb2:	01b9      	lsls	r1, r7, #6
   17eb4:	4849      	ldr	r0, [pc, #292]	; (17fdc <socket_thread_fn+0x244>)
   17eb6:	f041 0101 	orr.w	r1, r1, #1
   17eba:	f014 fd07 	bl	2c8cc <log_0>
			ret.state = AT_CMD_ERROR_READ;
   17ebe:	2306      	movs	r3, #6
   17ec0:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   17ec2:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   17ec6:	e7cb      	b.n	17e60 <socket_thread_fn+0xc8>
		} else if (buf[bytes_read - 1] != '\0') {
   17ec8:	1833      	adds	r3, r6, r0
   17eca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   17ece:	b153      	cbz	r3, 17ee6 <socket_thread_fn+0x14e>
			LOG_ERR("AT message too large for reception buffer or "
   17ed0:	01b9      	lsls	r1, r7, #6
   17ed2:	4843      	ldr	r0, [pc, #268]	; (17fe0 <socket_thread_fn+0x248>)
   17ed4:	f041 0101 	orr.w	r1, r1, #1
   17ed8:	f014 fcf8 	bl	2c8cc <log_0>
			ret.state = AT_CMD_ERROR_READ;
   17edc:	2306      	movs	r3, #6
   17ede:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   17ee0:	f06f 0368 	mvn.w	r3, #104	; 0x68
   17ee4:	e7bc      	b.n	17e60 <socket_thread_fn+0xc8>
	ret->state = AT_CMD_NOTIFICATION;
   17ee6:	2307      	movs	r3, #7
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   17ee8:	1f45      	subs	r5, r0, #5
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   17eea:	483e      	ldr	r0, [pc, #248]	; (17fe4 <socket_thread_fn+0x24c>)
	ret->state = AT_CMD_NOTIFICATION;
   17eec:	7123      	strb	r3, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   17eee:	f00e fe93 	bl	26c18 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   17ef2:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   17ef4:	4602      	mov	r2, r0
   17ef6:	493b      	ldr	r1, [pc, #236]	; (17fe4 <socket_thread_fn+0x24c>)
   17ef8:	4628      	mov	r0, r5
   17efa:	f00e febb 	bl	26c74 <strncmp>
		if (match) {
   17efe:	b9c0      	cbnz	r0, 17f32 <socket_thread_fn+0x19a>
			ret->state = AT_CMD_OK;
   17f00:	7120      	strb	r0, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   17f02:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   17f04:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   17f06:	1baa      	subs	r2, r5, r6
		buf[new_len++] = '\0';
   17f08:	3201      	adds	r2, #1
   17f0a:	702b      	strb	r3, [r5, #0]
		if (current_cmd.cmd != NULL &&
   17f0c:	4d30      	ldr	r5, [pc, #192]	; (17fd0 <socket_thread_fn+0x238>)
   17f0e:	682b      	ldr	r3, [r5, #0]
   17f10:	2b00      	cmp	r3, #0
   17f12:	d043      	beq.n	17f9c <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   17f14:	6868      	ldr	r0, [r5, #4]
		if (current_cmd.cmd != NULL &&
   17f16:	2800      	cmp	r0, #0
   17f18:	d040      	beq.n	17f9c <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   17f1a:	7923      	ldrb	r3, [r4, #4]
   17f1c:	2b07      	cmp	r3, #7
   17f1e:	d12e      	bne.n	17f7e <socket_thread_fn+0x1e6>
		    notification_handler != NULL) {
   17f20:	4b31      	ldr	r3, [pc, #196]	; (17fe8 <socket_thread_fn+0x250>)
   17f22:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   17f24:	b913      	cbnz	r3, 17f2c <socket_thread_fn+0x194>
		} else if (current_cmd.callback != NULL) {
   17f26:	68ab      	ldr	r3, [r5, #8]
   17f28:	2b00      	cmp	r3, #0
   17f2a:	d09a      	beq.n	17e62 <socket_thread_fn+0xca>
			current_cmd.callback(buf);
   17f2c:	4630      	mov	r0, r6
   17f2e:	4798      	blx	r3
   17f30:	e797      	b.n	17e62 <socket_thread_fn+0xca>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   17f32:	4630      	mov	r0, r6
   17f34:	492d      	ldr	r1, [pc, #180]	; (17fec <socket_thread_fn+0x254>)
   17f36:	f00f f869 	bl	2700c <strstr>
		if (tmpstr) {
   17f3a:	4605      	mov	r5, r0
   17f3c:	b128      	cbz	r0, 17f4a <socket_thread_fn+0x1b2>
			ret->state = AT_CMD_ERROR_CMS;
   17f3e:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   17f40:	482b      	ldr	r0, [pc, #172]	; (17ff0 <socket_thread_fn+0x258>)
			ret->state = AT_CMD_ERROR_CMS;
   17f42:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   17f44:	f00d fef6 	bl	25d34 <atoi>
   17f48:	e7db      	b.n	17f02 <socket_thread_fn+0x16a>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   17f4a:	4630      	mov	r0, r6
   17f4c:	4929      	ldr	r1, [pc, #164]	; (17ff4 <socket_thread_fn+0x25c>)
   17f4e:	f00f f85d 	bl	2700c <strstr>
		if (tmpstr) {
   17f52:	4605      	mov	r5, r0
   17f54:	b108      	cbz	r0, 17f5a <socket_thread_fn+0x1c2>
			ret->state = AT_CMD_ERROR_CME;
   17f56:	2303      	movs	r3, #3
   17f58:	e7f2      	b.n	17f40 <socket_thread_fn+0x1a8>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   17f5a:	4827      	ldr	r0, [pc, #156]	; (17ff8 <socket_thread_fn+0x260>)
   17f5c:	f00e fe5c 	bl	26c18 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   17f60:	f1a8 0508 	sub.w	r5, r8, #8
   17f64:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   17f66:	4602      	mov	r2, r0
   17f68:	4923      	ldr	r1, [pc, #140]	; (17ff8 <socket_thread_fn+0x260>)
   17f6a:	4628      	mov	r0, r5
   17f6c:	f00e fe82 	bl	26c74 <strncmp>
		if (match) {
   17f70:	b9c0      	cbnz	r0, 17fa4 <socket_thread_fn+0x20c>
			ret->state = AT_CMD_ERROR;
   17f72:	2301      	movs	r3, #1
   17f74:	7123      	strb	r3, [r4, #4]
			ret->code  = -ENOEXEC;
   17f76:	f06f 0307 	mvn.w	r3, #7
   17f7a:	6023      	str	r3, [r4, #0]
			break;
   17f7c:	e7c2      	b.n	17f04 <socket_thread_fn+0x16c>
			if (current_cmd.resp_size < payload_len) {
   17f7e:	68eb      	ldr	r3, [r5, #12]
   17f80:	429a      	cmp	r2, r3
   17f82:	d908      	bls.n	17f96 <socket_thread_fn+0x1fe>
				LOG_ERR("Response buffer not large enough");
   17f84:	01b9      	lsls	r1, r7, #6
   17f86:	481d      	ldr	r0, [pc, #116]	; (17ffc <socket_thread_fn+0x264>)
   17f88:	f041 0101 	orr.w	r1, r1, #1
   17f8c:	f014 fc9e 	bl	2c8cc <log_0>
				ret.code  = -EMSGSIZE;
   17f90:	f06f 0379 	mvn.w	r3, #121	; 0x79
   17f94:	e764      	b.n	17e60 <socket_thread_fn+0xc8>
   17f96:	4631      	mov	r1, r6
   17f98:	f7f4 fdd8 	bl	cb4c <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   17f9c:	7923      	ldrb	r3, [r4, #4]
   17f9e:	2b07      	cmp	r3, #7
   17fa0:	d1c1      	bne.n	17f26 <socket_thread_fn+0x18e>
   17fa2:	e7bd      	b.n	17f20 <socket_thread_fn+0x188>
		new_len = strlen(buf) + 1;
   17fa4:	4630      	mov	r0, r6
   17fa6:	f00e fe37 	bl	26c18 <strlen>
   17faa:	1c42      	adds	r2, r0, #1
   17fac:	e7ae      	b.n	17f0c <socket_thread_fn+0x174>
   17fae:	bf00      	nop
   17fb0:	0002eff4 	.word	0x0002eff4
   17fb4:	0002eff4 	.word	0x0002eff4
   17fb8:	200247fe 	.word	0x200247fe
   17fbc:	20021714 	.word	0x20021714
   17fc0:	2002171c 	.word	0x2002171c
   17fc4:	00031b34 	.word	0x00031b34
   17fc8:	00031b68 	.word	0x00031b68
   17fcc:	00031b8a 	.word	0x00031b8a
   17fd0:	200216fc 	.word	0x200216fc
   17fd4:	20020bf8 	.word	0x20020bf8
   17fd8:	00031b9e 	.word	0x00031b9e
   17fdc:	00031bd5 	.word	0x00031bd5
   17fe0:	00031be6 	.word	0x00031be6
   17fe4:	00031c31 	.word	0x00031c31
   17fe8:	20021710 	.word	0x20021710
   17fec:	00031c36 	.word	0x00031c36
   17ff0:	20024809 	.word	0x20024809
   17ff4:	00031c42 	.word	0x00031c42
   17ff8:	00031c4e 	.word	0x00031c4e
   17ffc:	00031c56 	.word	0x00031c56
   18000:	200216f8 	.word	0x200216f8
   18004:	200216f4 	.word	0x200216f4

00018008 <at_cmd_write>:
{
   18008:	b5f0      	push	{r4, r5, r6, r7, lr}
   1800a:	4605      	mov	r5, r0
   1800c:	460f      	mov	r7, r1
   1800e:	4616      	mov	r6, r2
   18010:	461c      	mov	r4, r3
   18012:	b089      	sub	sp, #36	; 0x24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18014:	4b3c      	ldr	r3, [pc, #240]	; (18108 <at_cmd_write+0x100>)
   18016:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   1801a:	2b01      	cmp	r3, #1
   1801c:	d071      	beq.n	18102 <at_cmd_write+0xfa>
	return z_impl_k_current_get();
   1801e:	f00c fc4b 	bl	248b8 <z_impl_k_current_get>
	__ASSERT(k_current_get() != socket_tid,
   18022:	4b3a      	ldr	r3, [pc, #232]	; (1810c <at_cmd_write+0x104>)
   18024:	681b      	ldr	r3, [r3, #0]
   18026:	4283      	cmp	r3, r0
   18028:	d10e      	bne.n	18048 <at_cmd_write+0x40>
   1802a:	4939      	ldr	r1, [pc, #228]	; (18110 <at_cmd_write+0x108>)
   1802c:	f44f 73c1 	mov.w	r3, #386	; 0x182
   18030:	4a38      	ldr	r2, [pc, #224]	; (18114 <at_cmd_write+0x10c>)
   18032:	4839      	ldr	r0, [pc, #228]	; (18118 <at_cmd_write+0x110>)
   18034:	f014 f9fd 	bl	2c432 <printk>
   18038:	4838      	ldr	r0, [pc, #224]	; (1811c <at_cmd_write+0x114>)
   1803a:	f014 f9fa 	bl	2c432 <printk>
   1803e:	f44f 71c1 	mov.w	r1, #386	; 0x182
   18042:	4834      	ldr	r0, [pc, #208]	; (18114 <at_cmd_write+0x10c>)
   18044:	f014 fc12 	bl	2c86c <assert_post_action>
	if (cmd == NULL) {
   18048:	b165      	cbz	r5, 18064 <at_cmd_write+0x5c>
   1804a:	1e6a      	subs	r2, r5, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   1804c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   18050:	b9d3      	cbnz	r3, 18088 <at_cmd_write+0x80>
   18052:	4933      	ldr	r1, [pc, #204]	; (18120 <at_cmd_write+0x118>)
   18054:	4b33      	ldr	r3, [pc, #204]	; (18124 <at_cmd_write+0x11c>)
		LOG_ERR("Invalid command");
   18056:	4834      	ldr	r0, [pc, #208]	; (18128 <at_cmd_write+0x120>)
   18058:	1ac9      	subs	r1, r1, r3
   1805a:	08c9      	lsrs	r1, r1, #3
   1805c:	0189      	lsls	r1, r1, #6
   1805e:	f041 0101 	orr.w	r1, r1, #1
   18062:	e007      	b.n	18074 <at_cmd_write+0x6c>
   18064:	492e      	ldr	r1, [pc, #184]	; (18120 <at_cmd_write+0x118>)
   18066:	4b2f      	ldr	r3, [pc, #188]	; (18124 <at_cmd_write+0x11c>)
		LOG_ERR("cmd is NULL");
   18068:	4830      	ldr	r0, [pc, #192]	; (1812c <at_cmd_write+0x124>)
   1806a:	1ac9      	subs	r1, r1, r3
   1806c:	08c9      	lsrs	r1, r1, #3
   1806e:	0189      	lsls	r1, r1, #6
   18070:	f041 0101 	orr.w	r1, r1, #1
   18074:	f014 fc2a 	bl	2c8cc <log_0>
		if (state) {
   18078:	b91c      	cbnz	r4, 18082 <at_cmd_write+0x7a>
		return -EINVAL;
   1807a:	f06f 0015 	mvn.w	r0, #21
}
   1807e:	b009      	add	sp, #36	; 0x24
   18080:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*state = AT_CMD_ERROR_QUEUE;
   18082:	2304      	movs	r3, #4
   18084:	7023      	strb	r3, [r4, #0]
   18086:	e7f8      	b.n	1807a <at_cmd_write+0x72>
		if (*c > ' ') {
   18088:	2b20      	cmp	r3, #32
   1808a:	d9df      	bls.n	1804c <at_cmd_write+0x44>
	command.callback = NULL;
   1808c:	2300      	movs	r3, #0
   1808e:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   18090:	2302      	movs	r3, #2
	command.resp = buf;
   18092:	e9cd 5703 	strd	r5, r7, [sp, #12]
	command.resp_size = buf_len;
   18096:	9606      	str	r6, [sp, #24]
	command.flags = AT_CMD_SYNC;
   18098:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   1809c:	f04f 32ff 	mov.w	r2, #4294967295
   180a0:	f04f 33ff 	mov.w	r3, #4294967295
   180a4:	4822      	ldr	r0, [pc, #136]	; (18130 <at_cmd_write+0x128>)
   180a6:	f00a ff93 	bl	22fd0 <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   180aa:	f04f 32ff 	mov.w	r2, #4294967295
   180ae:	a903      	add	r1, sp, #12
   180b0:	f04f 33ff 	mov.w	r3, #4294967295
   180b4:	481f      	ldr	r0, [pc, #124]	; (18134 <at_cmd_write+0x12c>)
   180b6:	f00a fe3b 	bl	22d30 <z_impl_k_msgq_put>
   180ba:	4601      	mov	r1, r0
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   180bc:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   180be:	b170      	cbz	r0, 180de <at_cmd_write+0xd6>
   180c0:	4a17      	ldr	r2, [pc, #92]	; (18120 <at_cmd_write+0x118>)
   180c2:	4b18      	ldr	r3, [pc, #96]	; (18124 <at_cmd_write+0x11c>)
		LOG_ERR("Could not enqueue cmd, error %d", ret.code);
   180c4:	481c      	ldr	r0, [pc, #112]	; (18138 <at_cmd_write+0x130>)
   180c6:	1ad2      	subs	r2, r2, r3
   180c8:	08d2      	lsrs	r2, r2, #3
   180ca:	0192      	lsls	r2, r2, #6
   180cc:	f042 0201 	orr.w	r2, r2, #1
   180d0:	f014 fc0b 	bl	2c8ea <log_1>
		if (state) {
   180d4:	b10c      	cbz	r4, 180da <at_cmd_write+0xd2>
			*state = AT_CMD_ERROR_QUEUE;
   180d6:	2304      	movs	r3, #4
		*state = ret.state;
   180d8:	7023      	strb	r3, [r4, #0]
	return ret.code;
   180da:	9801      	ldr	r0, [sp, #4]
   180dc:	e7cf      	b.n	1807e <at_cmd_write+0x76>
	load_cmd_and_write();
   180de:	f7ff fde1 	bl	17ca4 <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   180e2:	f04f 32ff 	mov.w	r2, #4294967295
   180e6:	f04f 33ff 	mov.w	r3, #4294967295
   180ea:	a901      	add	r1, sp, #4
   180ec:	4813      	ldr	r0, [pc, #76]	; (1813c <at_cmd_write+0x134>)
   180ee:	f00a fec1 	bl	22e74 <z_impl_k_msgq_get>
	return z_impl_k_mutex_unlock(mutex);
   180f2:	480f      	ldr	r0, [pc, #60]	; (18130 <at_cmd_write+0x128>)
   180f4:	f00b f866 	bl	231c4 <z_impl_k_mutex_unlock>
	if (state) {
   180f8:	2c00      	cmp	r4, #0
   180fa:	d0ee      	beq.n	180da <at_cmd_write+0xd2>
		*state = ret.state;
   180fc:	f89d 3008 	ldrb.w	r3, [sp, #8]
   18100:	e7ea      	b.n	180d8 <at_cmd_write+0xd0>
		return -EHOSTDOWN;
   18102:	f06f 0074 	mvn.w	r0, #116	; 0x74
   18106:	e7ba      	b.n	1807e <at_cmd_write+0x76>
   18108:	2002171c 	.word	0x2002171c
   1810c:	20021720 	.word	0x20021720
   18110:	00031cb7 	.word	0x00031cb7
   18114:	00031c93 	.word	0x00031c93
   18118:	00030166 	.word	0x00030166
   1811c:	00031cd5 	.word	0x00031cd5
   18120:	0002eff4 	.word	0x0002eff4
   18124:	0002eff4 	.word	0x0002eff4
   18128:	00031c83 	.word	0x00031c83
   1812c:	00031c77 	.word	0x00031c77
   18130:	20020ba4 	.word	0x20020ba4
   18134:	20020bcc 	.word	0x20020bcc
   18138:	00031d05 	.word	0x00031d05
   1813c:	20020bf8 	.word	0x20020bf8

00018140 <at_cmd_set_notification_handler>:
{
   18140:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   18142:	4c09      	ldr	r4, [pc, #36]	; (18168 <at_cmd_set_notification_handler+0x28>)
{
   18144:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   18146:	6821      	ldr	r1, [r4, #0]
   18148:	b159      	cbz	r1, 18162 <at_cmd_set_notification_handler+0x22>
   1814a:	4281      	cmp	r1, r0
   1814c:	d009      	beq.n	18162 <at_cmd_set_notification_handler+0x22>
   1814e:	4a07      	ldr	r2, [pc, #28]	; (1816c <at_cmd_set_notification_handler+0x2c>)
   18150:	4b07      	ldr	r3, [pc, #28]	; (18170 <at_cmd_set_notification_handler+0x30>)
		LOG_WRN("Forgetting prior notification handler %p",
   18152:	4808      	ldr	r0, [pc, #32]	; (18174 <at_cmd_set_notification_handler+0x34>)
   18154:	1ad2      	subs	r2, r2, r3
   18156:	08d2      	lsrs	r2, r2, #3
   18158:	0192      	lsls	r2, r2, #6
   1815a:	f042 0202 	orr.w	r2, r2, #2
   1815e:	f014 fbc4 	bl	2c8ea <log_1>
	notification_handler = handler;
   18162:	6025      	str	r5, [r4, #0]
}
   18164:	bd38      	pop	{r3, r4, r5, pc}
   18166:	bf00      	nop
   18168:	20021710 	.word	0x20021710
   1816c:	0002eff4 	.word	0x0002eff4
   18170:	0002eff4 	.word	0x0002eff4
   18174:	00031d25 	.word	0x00031d25

00018178 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   18178:	4b0f      	ldr	r3, [pc, #60]	; (181b8 <find_node+0x40>)
{
   1817a:	b570      	push	{r4, r5, r6, lr}
   1817c:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1817e:	6818      	ldr	r0, [r3, #0]
   18180:	b170      	cbz	r0, 181a0 <find_node+0x28>
   18182:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18184:	4603      	mov	r3, r0
   18186:	2d00      	cmp	r5, #0
   18188:	4628      	mov	r0, r5
   1818a:	bf38      	it	cc
   1818c:	2000      	movcc	r0, #0
   1818e:	2500      	movs	r5, #0
		if (curr->ctx == ctx && curr->handler == handler) {
   18190:	685e      	ldr	r6, [r3, #4]
   18192:	428e      	cmp	r6, r1
   18194:	d105      	bne.n	181a2 <find_node+0x2a>
   18196:	689e      	ldr	r6, [r3, #8]
   18198:	4296      	cmp	r6, r2
   1819a:	d102      	bne.n	181a2 <find_node+0x2a>
			*prev_out = prev;
			return curr;
   1819c:	4618      	mov	r0, r3
			*prev_out = prev;
   1819e:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   181a0:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   181a2:	2800      	cmp	r0, #0
   181a4:	d0fc      	beq.n	181a0 <find_node+0x28>
	return node->next;
   181a6:	6806      	ldr	r6, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   181a8:	461d      	mov	r5, r3
   181aa:	2e00      	cmp	r6, #0
   181ac:	4603      	mov	r3, r0
   181ae:	4630      	mov	r0, r6
   181b0:	bf38      	it	cc
   181b2:	2000      	movcc	r0, #0
   181b4:	e7ec      	b.n	18190 <find_node+0x18>
   181b6:	bf00      	nop
   181b8:	20021724 	.word	0x20021724

000181bc <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   181bc:	4a0c      	ldr	r2, [pc, #48]	; (181f0 <module_init+0x34>)
{
   181be:	b508      	push	{r3, lr}
	if (initialized) {
   181c0:	7813      	ldrb	r3, [r2, #0]
   181c2:	b15b      	cbz	r3, 181dc <module_init+0x20>
   181c4:	490b      	ldr	r1, [pc, #44]	; (181f4 <module_init+0x38>)
   181c6:	4b0c      	ldr	r3, [pc, #48]	; (181f8 <module_init+0x3c>)
		LOG_WRN("Already initialized. Nothing to do");
   181c8:	480c      	ldr	r0, [pc, #48]	; (181fc <module_init+0x40>)
   181ca:	1ac9      	subs	r1, r1, r3
   181cc:	08c9      	lsrs	r1, r1, #3
   181ce:	0189      	lsls	r1, r1, #6
   181d0:	f041 0102 	orr.w	r1, r1, #2
   181d4:	f014 fb7a 	bl	2c8cc <log_0>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   181d8:	2000      	movs	r0, #0
   181da:	bd08      	pop	{r3, pc}
	initialized = true;
   181dc:	2101      	movs	r1, #1
   181de:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   181e0:	4a07      	ldr	r2, [pc, #28]	; (18200 <module_init+0x44>)
	at_cmd_set_notification_handler(notif_dispatch);
   181e2:	4808      	ldr	r0, [pc, #32]	; (18204 <module_init+0x48>)
	list->tail = NULL;
   181e4:	e9c2 3300 	strd	r3, r3, [r2]
   181e8:	f7ff ffaa 	bl	18140 <at_cmd_set_notification_handler>
	return 0;
   181ec:	e7f4      	b.n	181d8 <module_init+0x1c>
   181ee:	bf00      	nop
   181f0:	2002528b 	.word	0x2002528b
   181f4:	0002f004 	.word	0x0002f004
   181f8:	0002eff4 	.word	0x0002eff4
   181fc:	00031d55 	.word	0x00031d55
   18200:	20021724 	.word	0x20021724
   18204:	00018215 	.word	0x00018215

00018208 <k_mutex_unlock.constprop.0>:
   18208:	4801      	ldr	r0, [pc, #4]	; (18210 <k_mutex_unlock.constprop.0+0x8>)
   1820a:	f00a bfdb 	b.w	231c4 <z_impl_k_mutex_unlock>
   1820e:	bf00      	nop
   18210:	20020b90 	.word	0x20020b90

00018214 <notif_dispatch>:
{
   18214:	b538      	push	{r3, r4, r5, lr}
   18216:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   18218:	f04f 33ff 	mov.w	r3, #4294967295
   1821c:	f04f 32ff 	mov.w	r2, #4294967295
   18220:	480d      	ldr	r0, [pc, #52]	; (18258 <notif_dispatch+0x44>)
   18222:	f00a fed5 	bl	22fd0 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   18226:	4b0d      	ldr	r3, [pc, #52]	; (1825c <notif_dispatch+0x48>)
   18228:	681b      	ldr	r3, [r3, #0]
   1822a:	b91b      	cbnz	r3, 18234 <notif_dispatch+0x20>
}
   1822c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   18230:	f7ff bfea 	b.w	18208 <k_mutex_unlock.constprop.0>
	return node->next;
   18234:	681c      	ldr	r4, [r3, #0]
   18236:	2c00      	cmp	r4, #0
   18238:	bf38      	it	cc
   1823a:	2400      	movcc	r4, #0
		curr->handler(curr->ctx, response);
   1823c:	4629      	mov	r1, r5
   1823e:	689a      	ldr	r2, [r3, #8]
   18240:	6858      	ldr	r0, [r3, #4]
   18242:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   18244:	2c00      	cmp	r4, #0
   18246:	d0f1      	beq.n	1822c <notif_dispatch+0x18>
   18248:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1824a:	4623      	mov	r3, r4
   1824c:	2a00      	cmp	r2, #0
   1824e:	bf38      	it	cc
   18250:	2200      	movcc	r2, #0
   18252:	4614      	mov	r4, r2
   18254:	e7f2      	b.n	1823c <notif_dispatch+0x28>
   18256:	bf00      	nop
   18258:	20020b90 	.word	0x20020b90
   1825c:	20021724 	.word	0x20021724

00018260 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   18260:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18262:	4606      	mov	r6, r0
	if (handler == NULL) {
   18264:	460d      	mov	r5, r1
   18266:	b979      	cbnz	r1, 18288 <at_notif_register_handler+0x28>
   18268:	4a1d      	ldr	r2, [pc, #116]	; (182e0 <at_notif_register_handler+0x80>)
   1826a:	4b1e      	ldr	r3, [pc, #120]	; (182e4 <at_notif_register_handler+0x84>)
   1826c:	1a9b      	subs	r3, r3, r2
   1826e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   18270:	019b      	lsls	r3, r3, #6
   18272:	460a      	mov	r2, r1
   18274:	f043 0301 	orr.w	r3, r3, #1
   18278:	4601      	mov	r1, r0
   1827a:	481b      	ldr	r0, [pc, #108]	; (182e8 <at_notif_register_handler+0x88>)
   1827c:	f014 fb4c 	bl	2c918 <log_2>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   18280:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   18284:	b002      	add	sp, #8
   18286:	bd70      	pop	{r4, r5, r6, pc}
   18288:	f04f 32ff 	mov.w	r2, #4294967295
   1828c:	f04f 33ff 	mov.w	r3, #4294967295
   18290:	4816      	ldr	r0, [pc, #88]	; (182ec <at_notif_register_handler+0x8c>)
   18292:	f00a fe9d 	bl	22fd0 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   18296:	462a      	mov	r2, r5
   18298:	4631      	mov	r1, r6
   1829a:	a801      	add	r0, sp, #4
   1829c:	f7ff ff6c 	bl	18178 <find_node>
   182a0:	4604      	mov	r4, r0
   182a2:	b118      	cbz	r0, 182ac <at_notif_register_handler+0x4c>
		k_mutex_unlock(&list_mtx);
   182a4:	f7ff ffb0 	bl	18208 <k_mutex_unlock.constprop.0>
		return 0;
   182a8:	2000      	movs	r0, #0
   182aa:	e7eb      	b.n	18284 <at_notif_register_handler+0x24>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   182ac:	200c      	movs	r0, #12
   182ae:	f00d fd03 	bl	25cb8 <k_malloc>
   182b2:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   182b4:	b920      	cbnz	r0, 182c0 <at_notif_register_handler+0x60>
		k_mutex_unlock(&list_mtx);
   182b6:	f7ff ffa7 	bl	18208 <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   182ba:	f06f 0068 	mvn.w	r0, #104	; 0x68
   182be:	e7e1      	b.n	18284 <at_notif_register_handler+0x24>
__ssp_bos_icheck3(memset, void *, int)
   182c0:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   182c2:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   182c4:	4a0a      	ldr	r2, [pc, #40]	; (182f0 <at_notif_register_handler+0x90>)
   182c6:	6044      	str	r4, [r0, #4]
   182c8:	6084      	str	r4, [r0, #8]
	parent->next = child;
   182ca:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   182cc:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   182ce:	e9c3 6501 	strd	r6, r5, [r3, #4]
   182d2:	b911      	cbnz	r1, 182da <at_notif_register_handler+0x7a>
	list->head = node;
   182d4:	e9c2 3300 	strd	r3, r3, [r2]
}
   182d8:	e7e4      	b.n	182a4 <at_notif_register_handler+0x44>
	parent->next = child;
   182da:	600b      	str	r3, [r1, #0]
	list->tail = node;
   182dc:	6053      	str	r3, [r2, #4]
}
   182de:	e7e1      	b.n	182a4 <at_notif_register_handler+0x44>
   182e0:	0002eff4 	.word	0x0002eff4
   182e4:	0002f004 	.word	0x0002f004
   182e8:	00031d78 	.word	0x00031d78
   182ec:	20020b90 	.word	0x20020b90
   182f0:	20021724 	.word	0x20021724

000182f4 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   182f4:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   182f6:	4d05      	ldr	r5, [pc, #20]	; (1830c <write_uart_string+0x18>)
   182f8:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   182fa:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   182fe:	b901      	cbnz	r1, 18302 <write_uart_string+0xe>
	}
}
   18300:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   18302:	6828      	ldr	r0, [r5, #0]
   18304:	6883      	ldr	r3, [r0, #8]
   18306:	685b      	ldr	r3, [r3, #4]
   18308:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   1830a:	e7f6      	b.n	182fa <write_uart_string+0x6>
   1830c:	2002173c 	.word	0x2002173c

00018310 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   18310:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   18312:	4921      	ldr	r1, [pc, #132]	; (18398 <cmd_send+0x88>)
{
   18314:	b08b      	sub	sp, #44	; 0x2c
	err = at_cmd_write(at_buf, at_buf,
   18316:	4608      	mov	r0, r1
   18318:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1831c:	f10d 030b 	add.w	r3, sp, #11
   18320:	f7ff fe72 	bl	18008 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   18324:	1e01      	subs	r1, r0, #0
   18326:	da0e      	bge.n	18346 <cmd_send+0x36>
   18328:	4b1c      	ldr	r3, [pc, #112]	; (1839c <cmd_send+0x8c>)
   1832a:	4a1d      	ldr	r2, [pc, #116]	; (183a0 <cmd_send+0x90>)
		LOG_ERR("Error while processing AT command: %d", err);
   1832c:	481d      	ldr	r0, [pc, #116]	; (183a4 <cmd_send+0x94>)
   1832e:	1ad2      	subs	r2, r2, r3
   18330:	08d2      	lsrs	r2, r2, #3
   18332:	0192      	lsls	r2, r2, #6
   18334:	f042 0201 	orr.w	r2, r2, #1
   18338:	f014 fad7 	bl	2c8ea <log_1>
		state = AT_CMD_ERROR;
   1833c:	2301      	movs	r3, #1
   1833e:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   18342:	4819      	ldr	r0, [pc, #100]	; (183a8 <cmd_send+0x98>)
   18344:	e012      	b.n	1836c <cmd_send+0x5c>
	switch (state) {
   18346:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1834a:	2b03      	cmp	r3, #3
   1834c:	d810      	bhi.n	18370 <cmd_send+0x60>
   1834e:	a201      	add	r2, pc, #4	; (adr r2, 18354 <cmd_send+0x44>)
   18350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18354:	00018365 	.word	0x00018365
   18358:	00018343 	.word	0x00018343
   1835c:	0001837f 	.word	0x0001837f
   18360:	00018391 	.word	0x00018391
		write_uart_string(at_buf);
   18364:	480c      	ldr	r0, [pc, #48]	; (18398 <cmd_send+0x88>)
   18366:	f7ff ffc5 	bl	182f4 <write_uart_string>
		write_uart_string(OK_STR);
   1836a:	4810      	ldr	r0, [pc, #64]	; (183ac <cmd_send+0x9c>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   1836c:	f7ff ffc2 	bl	182f4 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   18370:	4b0f      	ldr	r3, [pc, #60]	; (183b0 <cmd_send+0xa0>)
   18372:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   18374:	f016 f953 	bl	2e61e <z_impl_uart_irq_rx_enable>
}
   18378:	b00b      	add	sp, #44	; 0x2c
   1837a:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   1837e:	4b0d      	ldr	r3, [pc, #52]	; (183b4 <cmd_send+0xa4>)
   18380:	9100      	str	r1, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   18382:	2219      	movs	r2, #25
   18384:	2100      	movs	r1, #0
   18386:	a803      	add	r0, sp, #12
   18388:	f00e faea 	bl	26960 <__sprintf_chk>
		write_uart_string(str);
   1838c:	a803      	add	r0, sp, #12
   1838e:	e7ed      	b.n	1836c <cmd_send+0x5c>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   18390:	4b09      	ldr	r3, [pc, #36]	; (183b8 <cmd_send+0xa8>)
   18392:	9100      	str	r1, [sp, #0]
   18394:	e7f5      	b.n	18382 <cmd_send+0x72>
   18396:	bf00      	nop
   18398:	2002528c 	.word	0x2002528c
   1839c:	0002eff4 	.word	0x0002eff4
   183a0:	0002effc 	.word	0x0002effc
   183a4:	00031db2 	.word	0x00031db2
   183a8:	00031c4e 	.word	0x00031c4e
   183ac:	00031c31 	.word	0x00031c31
   183b0:	2002173c 	.word	0x2002173c
   183b4:	00031dd8 	.word	0x00031dd8
   183b8:	00031de9 	.word	0x00031de9

000183bc <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   183bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   183c0:	4604      	mov	r4, r0
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update) {
   183c2:	6883      	ldr	r3, [r0, #8]
   183c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   183c6:	b103      	cbz	r3, 183ca <isr+0xe>
		return api->irq_update(dev);
   183c8:	4798      	blx	r3
	if (api->irq_rx_ready) {
   183ca:	68a3      	ldr	r3, [r4, #8]
   183cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   183ce:	b1bb      	cbz	r3, 18400 <isr+0x44>
		return api->irq_rx_ready(dev);
   183d0:	4620      	mov	r0, r4
   183d2:	4798      	blx	r3

	uint8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   183d4:	b1a0      	cbz	r0, 18400 <isr+0x44>
   183d6:	f8df 8140 	ldr.w	r8, [pc, #320]	; 18518 <isr+0x15c>
   183da:	4e44      	ldr	r6, [pc, #272]	; (184ec <isr+0x130>)
   183dc:	4647      	mov	r7, r8
   183de:	4b44      	ldr	r3, [pc, #272]	; (184f0 <isr+0x134>)
		if (at_cmd_len > 0) {
   183e0:	4d44      	ldr	r5, [pc, #272]	; (184f4 <isr+0x138>)
   183e2:	1af6      	subs	r6, r6, r3
   183e4:	08f6      	lsrs	r6, r6, #3
   183e6:	e8d8 3faf 	lda	r3, [r8]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   183ea:	07db      	lsls	r3, r3, #31
   183ec:	d408      	bmi.n	18400 <isr+0x44>
	if (api->fifo_read) {
   183ee:	68a3      	ldr	r3, [r4, #8]
   183f0:	699b      	ldr	r3, [r3, #24]
   183f2:	b12b      	cbz	r3, 18400 <isr+0x44>
		return api->fifo_read(dev, rx_data, size);
   183f4:	2201      	movs	r2, #1
   183f6:	4620      	mov	r0, r4
   183f8:	f10d 0107 	add.w	r1, sp, #7
   183fc:	4798      	blx	r3
   183fe:	b910      	cbnz	r0, 18406 <isr+0x4a>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   18400:	b002      	add	sp, #8
   18402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uart_rx_handler(character);
   18406:	f89d 1007 	ldrb.w	r1, [sp, #7]
	switch (character) {
   1840a:	2908      	cmp	r1, #8
   1840c:	d001      	beq.n	18412 <isr+0x56>
   1840e:	297f      	cmp	r1, #127	; 0x7f
   18410:	d105      	bne.n	1841e <isr+0x62>
		if (at_cmd_len > 0) {
   18412:	682b      	ldr	r3, [r5, #0]
   18414:	2b00      	cmp	r3, #0
   18416:	d0e6      	beq.n	183e6 <isr+0x2a>
			at_cmd_len--;
   18418:	3b01      	subs	r3, #1
   1841a:	602b      	str	r3, [r5, #0]
   1841c:	e7e3      	b.n	183e6 <isr+0x2a>
	if (!inside_quotes) {
   1841e:	4836      	ldr	r0, [pc, #216]	; (184f8 <isr+0x13c>)
   18420:	7803      	ldrb	r3, [r0, #0]
   18422:	b993      	cbnz	r3, 1844a <isr+0x8e>
		switch (character) {
   18424:	290a      	cmp	r1, #10
   18426:	d01e      	beq.n	18466 <isr+0xaa>
   18428:	290d      	cmp	r1, #13
   1842a:	d00a      	beq.n	18442 <isr+0x86>
   1842c:	b969      	cbnz	r1, 1844a <isr+0x8e>
			if (term_mode == MODE_NULL_TERM) {
   1842e:	4b33      	ldr	r3, [pc, #204]	; (184fc <isr+0x140>)
   18430:	781b      	ldrb	r3, [r3, #0]
   18432:	b3a3      	cbz	r3, 1849e <isr+0xe2>
			LOG_WRN("Ignored null; would terminate string early.");
   18434:	01b1      	lsls	r1, r6, #6
   18436:	4832      	ldr	r0, [pc, #200]	; (18500 <isr+0x144>)
   18438:	f041 0102 	orr.w	r1, r1, #2
   1843c:	f014 fa46 	bl	2c8cc <log_0>
			return;
   18440:	e7d1      	b.n	183e6 <isr+0x2a>
			if (term_mode == MODE_CR) {
   18442:	4a2e      	ldr	r2, [pc, #184]	; (184fc <isr+0x140>)
   18444:	7812      	ldrb	r2, [r2, #0]
   18446:	2a01      	cmp	r2, #1
			    at_cmd_len > 0 &&
   18448:	d029      	beq.n	1849e <isr+0xe2>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   1844a:	f8d5 c000 	ldr.w	ip, [r5]
   1844e:	f10c 0201 	add.w	r2, ip, #1
   18452:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   18456:	d317      	bcc.n	18488 <isr+0xcc>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   18458:	01b2      	lsls	r2, r6, #6
   1845a:	482a      	ldr	r0, [pc, #168]	; (18504 <isr+0x148>)
   1845c:	f042 0201 	orr.w	r2, r2, #1
   18460:	f014 fa43 	bl	2c8ea <log_1>
		return;
   18464:	e7bf      	b.n	183e6 <isr+0x2a>
			if (term_mode == MODE_LF) {
   18466:	4a25      	ldr	r2, [pc, #148]	; (184fc <isr+0x140>)
   18468:	7812      	ldrb	r2, [r2, #0]
   1846a:	2a02      	cmp	r2, #2
   1846c:	d017      	beq.n	1849e <isr+0xe2>
			if (term_mode == MODE_CR_LF &&
   1846e:	2a03      	cmp	r2, #3
   18470:	d1eb      	bne.n	1844a <isr+0x8e>
   18472:	f8d5 c000 	ldr.w	ip, [r5]
   18476:	f1bc 0f00 	cmp.w	ip, #0
   1847a:	d0e6      	beq.n	1844a <isr+0x8e>
			    at_buf[at_cmd_len - 1] == '\r') {
   1847c:	4a22      	ldr	r2, [pc, #136]	; (18508 <isr+0x14c>)
   1847e:	4462      	add	r2, ip
			    at_cmd_len > 0 &&
   18480:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   18484:	2a0d      	cmp	r2, #13
   18486:	e7df      	b.n	18448 <isr+0x8c>
	at_buf[at_cmd_len] = character;
   18488:	f8df e07c 	ldr.w	lr, [pc, #124]	; 18508 <isr+0x14c>
	if (character == '"') {
   1848c:	2922      	cmp	r1, #34	; 0x22
	at_buf[at_cmd_len] = character;
   1848e:	f80e 100c 	strb.w	r1, [lr, ip]
	at_cmd_len++;
   18492:	602a      	str	r2, [r5, #0]
	if (character == '"') {
   18494:	d1a7      	bne.n	183e6 <isr+0x2a>
	if (!inside_quotes) {
   18496:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   1849a:	7003      	strb	r3, [r0, #0]
   1849c:	e7a3      	b.n	183e6 <isr+0x2a>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   1849e:	2200      	movs	r2, #0
   184a0:	6829      	ldr	r1, [r5, #0]
   184a2:	4b19      	ldr	r3, [pc, #100]	; (18508 <isr+0x14c>)
	inside_quotes = false;
   184a4:	7002      	strb	r2, [r0, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   184a6:	545a      	strb	r2, [r3, r1]
	at_cmd_len = 0;
   184a8:	4619      	mov	r1, r3
   184aa:	602a      	str	r2, [r5, #0]
		if (*c > ' ') {
   184ac:	f813 2b01 	ldrb.w	r2, [r3], #1
   184b0:	2a20      	cmp	r2, #32
   184b2:	d802      	bhi.n	184ba <isr+0xfe>
		} else if (*c == '\0') {
   184b4:	2a00      	cmp	r2, #0
   184b6:	d1f9      	bne.n	184ac <isr+0xf0>
   184b8:	e795      	b.n	183e6 <isr+0x2a>
	if (at_buf[0]) {
   184ba:	780b      	ldrb	r3, [r1, #0]
   184bc:	2b00      	cmp	r3, #0
   184be:	d092      	beq.n	183e6 <isr+0x2a>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   184c0:	4b12      	ldr	r3, [pc, #72]	; (1850c <isr+0x150>)
   184c2:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   184c4:	6883      	ldr	r3, [r0, #8]
   184c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   184c8:	b103      	cbz	r3, 184cc <isr+0x110>
		api->irq_rx_disable(dev);
   184ca:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   184cc:	e8d7 3fef 	ldaex	r3, [r7]
   184d0:	f043 0201 	orr.w	r2, r3, #1
   184d4:	e8c7 2fe1 	stlex	r1, r2, [r7]
   184d8:	2900      	cmp	r1, #0
   184da:	d1f7      	bne.n	184cc <isr+0x110>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   184dc:	07da      	lsls	r2, r3, #31
   184de:	d482      	bmi.n	183e6 <isr+0x2a>
		k_queue_append(&work_q->queue, work);
   184e0:	490b      	ldr	r1, [pc, #44]	; (18510 <isr+0x154>)
   184e2:	480c      	ldr	r0, [pc, #48]	; (18514 <isr+0x158>)
   184e4:	f016 fa69 	bl	2e9ba <k_queue_append>
   184e8:	e77d      	b.n	183e6 <isr+0x2a>
   184ea:	bf00      	nop
   184ec:	0002effc 	.word	0x0002effc
   184f0:	0002eff4 	.word	0x0002eff4
   184f4:	2002172c 	.word	0x2002172c
   184f8:	2002628c 	.word	0x2002628c
   184fc:	2002628d 	.word	0x2002628d
   18500:	00031dfa 	.word	0x00031dfa
   18504:	00031e26 	.word	0x00031e26
   18508:	2002528c 	.word	0x2002528c
   1850c:	2002173c 	.word	0x2002173c
   18510:	20021730 	.word	0x20021730
   18514:	20020fb8 	.word	0x20020fb8
   18518:	20021738 	.word	0x20021738

0001851c <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(const struct device *arg)
{
   1851c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   18520:	2201      	movs	r2, #1
   18522:	4b49      	ldr	r3, [pc, #292]	; (18648 <at_host_init+0x12c>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   18524:	2000      	movs	r0, #0
   18526:	4949      	ldr	r1, [pc, #292]	; (1864c <at_host_init+0x130>)
		term_mode = mode;
   18528:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   1852a:	f7ff fe99 	bl	18260 <at_notif_register_handler>
	if (err != 0) {
   1852e:	4c48      	ldr	r4, [pc, #288]	; (18650 <at_host_init+0x134>)
   18530:	4a48      	ldr	r2, [pc, #288]	; (18654 <at_host_init+0x138>)
   18532:	4606      	mov	r6, r0
   18534:	1aa4      	subs	r4, r4, r2
   18536:	08e4      	lsrs	r4, r4, #3
   18538:	b150      	cbz	r0, 18550 <at_host_init+0x34>
		LOG_ERR("Can't register handler err=%d", err);
   1853a:	01a2      	lsls	r2, r4, #6
   1853c:	4601      	mov	r1, r0
   1853e:	f042 0201 	orr.w	r2, r2, #1
   18542:	4845      	ldr	r0, [pc, #276]	; (18658 <at_host_init+0x13c>)
   18544:	f014 f9d1 	bl	2c8ea <log_1>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   18548:	4630      	mov	r0, r6
   1854a:	b003      	add	sp, #12
   1854c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18550:	4842      	ldr	r0, [pc, #264]	; (1865c <at_host_init+0x140>)
   18552:	f00a f82b 	bl	225ac <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   18556:	4d42      	ldr	r5, [pc, #264]	; (18660 <at_host_init+0x144>)
   18558:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   1855a:	b988      	cbnz	r0, 18580 <at_host_init+0x64>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   1855c:	01a2      	lsls	r2, r4, #6
   1855e:	493f      	ldr	r1, [pc, #252]	; (1865c <at_host_init+0x140>)
   18560:	4840      	ldr	r0, [pc, #256]	; (18664 <at_host_init+0x148>)
   18562:	f042 0201 	orr.w	r2, r2, #1
   18566:	f014 f9c0 	bl	2c8ea <log_1>
		return -EINVAL;
   1856a:	f06f 0115 	mvn.w	r1, #21
		LOG_ERR("UART could not be initialized: %d", err);
   1856e:	01a2      	lsls	r2, r4, #6
   18570:	483d      	ldr	r0, [pc, #244]	; (18668 <at_host_init+0x14c>)
   18572:	f042 0201 	orr.w	r2, r2, #1
   18576:	f014 f9b8 	bl	2c8ea <log_1>
		return -EFAULT;
   1857a:	f06f 060d 	mvn.w	r6, #13
   1857e:	e7e3      	b.n	18548 <at_host_init+0x2c>
	return z_impl_k_uptime_ticks();
   18580:	f016 faed 	bl	2eb5e <z_impl_k_uptime_ticks>
   18584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18588:	460a      	mov	r2, r1
   1858a:	fba0 0103 	umull	r0, r1, r0, r3
   1858e:	fb03 1102 	mla	r1, r3, r2, r1
   18592:	ea4f 38d0 	mov.w	r8, r0, lsr #15
   18596:	ea4f 1984 	mov.w	r9, r4, lsl #6
			LOG_INF("UART check failed: %d. "
   1859a:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 18684 <at_host_init+0x168>
   1859e:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   185a2:	f049 0a03 	orr.w	sl, r9, #3
		err = uart_err_check(uart_dev);
   185a6:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   185a8:	6883      	ldr	r3, [r0, #8]
   185aa:	689b      	ldr	r3, [r3, #8]
   185ac:	b393      	cbz	r3, 18614 <at_host_init+0xf8>
		return api->err_check(dev);
   185ae:	4798      	blx	r3
		if (err) {
   185b0:	4607      	mov	r7, r0
   185b2:	b378      	cbz	r0, 18614 <at_host_init+0xf8>
   185b4:	f016 fad3 	bl	2eb5e <z_impl_k_uptime_ticks>
   185b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   185bc:	460a      	mov	r2, r1
   185be:	fba0 0103 	umull	r0, r1, r0, r3
   185c2:	fb03 1102 	mla	r1, r3, r2, r1
   185c6:	0bc3      	lsrs	r3, r0, #15
   185c8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			if (k_uptime_get_32() - start_time >
   185cc:	eba3 0308 	sub.w	r3, r3, r8
   185d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   185d4:	d908      	bls.n	185e8 <at_host_init+0xcc>
				LOG_ERR("UART check failed: %d. "
   185d6:	4639      	mov	r1, r7
   185d8:	4824      	ldr	r0, [pc, #144]	; (1866c <at_host_init+0x150>)
   185da:	f049 0201 	orr.w	r2, r9, #1
   185de:	f014 f984 	bl	2c8ea <log_1>
				return -EIO;
   185e2:	f06f 0104 	mvn.w	r1, #4
   185e6:	e7c2      	b.n	1856e <at_host_init+0x52>
			LOG_INF("UART check failed: %d. "
   185e8:	4652      	mov	r2, sl
   185ea:	4639      	mov	r1, r7
   185ec:	4658      	mov	r0, fp
   185ee:	f014 f97c 	bl	2c8ea <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   185f2:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   185f4:	6883      	ldr	r3, [r0, #8]
   185f6:	699b      	ldr	r3, [r3, #24]
   185f8:	b92b      	cbnz	r3, 18606 <at_host_init+0xea>
	return z_impl_k_sleep(timeout);
   185fa:	2100      	movs	r1, #0
   185fc:	f44f 70a4 	mov.w	r0, #328	; 0x148
   18600:	f00c f924 	bl	2484c <z_impl_k_sleep>
	} while (err);
   18604:	e7cf      	b.n	185a6 <at_host_init+0x8a>
		return api->fifo_read(dev, rx_data, size);
   18606:	2201      	movs	r2, #1
   18608:	f10d 0107 	add.w	r1, sp, #7
   1860c:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   1860e:	2800      	cmp	r0, #0
   18610:	d1ef      	bne.n	185f2 <at_host_init+0xd6>
   18612:	e7f2      	b.n	185fa <at_host_init+0xde>
	uart_irq_callback_set(uart_dev, isr);
   18614:	6828      	ldr	r0, [r5, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   18616:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   18618:	b123      	cbz	r3, 18624 <at_host_init+0x108>
   1861a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1861c:	b113      	cbz	r3, 18624 <at_host_init+0x108>
		api->irq_callback_set(dev, cb, user_data);
   1861e:	2200      	movs	r2, #0
   18620:	4913      	ldr	r1, [pc, #76]	; (18670 <at_host_init+0x154>)
   18622:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   18624:	2200      	movs	r2, #0
   18626:	4b13      	ldr	r3, [pc, #76]	; (18674 <at_host_init+0x158>)
   18628:	4913      	ldr	r1, [pc, #76]	; (18678 <at_host_init+0x15c>)
   1862a:	601a      	str	r2, [r3, #0]
   1862c:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   18630:	4812      	ldr	r0, [pc, #72]	; (1867c <at_host_init+0x160>)
   18632:	230a      	movs	r3, #10
   18634:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18638:	4911      	ldr	r1, [pc, #68]	; (18680 <at_host_init+0x164>)
   1863a:	f00c fb89 	bl	24d50 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   1863e:	6828      	ldr	r0, [r5, #0]
   18640:	f015 ffed 	bl	2e61e <z_impl_uart_irq_rx_enable>
	return err;
   18644:	e780      	b.n	18548 <at_host_init+0x2c>
   18646:	bf00      	nop
   18648:	2002628d 	.word	0x2002628d
   1864c:	0002e629 	.word	0x0002e629
   18650:	0002effc 	.word	0x0002effc
   18654:	0002eff4 	.word	0x0002eff4
   18658:	00031e46 	.word	0x00031e46
   1865c:	00030967 	.word	0x00030967
   18660:	2002173c 	.word	0x2002173c
   18664:	00031e64 	.word	0x00031e64
   18668:	00031edf 	.word	0x00031edf
   1866c:	00031e74 	.word	0x00031e74
   18670:	000183bd 	.word	0x000183bd
   18674:	20021730 	.word	0x20021730
   18678:	00018311 	.word	0x00018311
   1867c:	20020fb8 	.word	0x20020fb8
   18680:	20027b38 	.word	0x20027b38
   18684:	00031eaa 	.word	0x00031eaa

00018688 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   18688:	4b06      	ldr	r3, [pc, #24]	; (186a4 <is_valid_notification_char+0x1c>)
   1868a:	5cc3      	ldrb	r3, [r0, r3]
   1868c:	f003 0303 	and.w	r3, r3, #3
   18690:	2b02      	cmp	r3, #2
   18692:	bf08      	it	eq
   18694:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   18696:	3841      	subs	r0, #65	; 0x41
   18698:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   1869a:	2819      	cmp	r0, #25
   1869c:	bf8c      	ite	hi
   1869e:	2000      	movhi	r0, #0
   186a0:	2001      	movls	r0, #1
   186a2:	4770      	bx	lr
   186a4:	0002f961 	.word	0x0002f961

000186a8 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   186a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   186ac:	6805      	ldr	r5, [r0, #0]
{
   186ae:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   186b0:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   186b2:	782b      	ldrb	r3, [r5, #0]
{
   186b4:	4680      	mov	r8, r0
   186b6:	460f      	mov	r7, r1
   186b8:	4616      	mov	r6, r2
   186ba:	2b00      	cmp	r3, #0
   186bc:	f000 80c8 	beq.w	18850 <at_parse_process_element+0x1a8>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   186c0:	4b65      	ldr	r3, [pc, #404]	; (18858 <at_parse_process_element+0x1b0>)
   186c2:	781c      	ldrb	r4, [r3, #0]
   186c4:	2c06      	cmp	r4, #6
   186c6:	d110      	bne.n	186ea <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   186c8:	1c6b      	adds	r3, r5, #1
   186ca:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   186cc:	9a00      	ldr	r2, [sp, #0]
   186ce:	7810      	ldrb	r0, [r2, #0]
   186d0:	f7ff ffda 	bl	18688 <is_valid_notification_char>
   186d4:	b930      	cbnz	r0, 186e4 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   186d6:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   186d8:	462a      	mov	r2, r5
   186da:	4639      	mov	r1, r7
   186dc:	4630      	mov	r0, r6
   186de:	f016 f81f 	bl	2e720 <at_params_string_put>
   186e2:	e01b      	b.n	1871c <at_parse_process_element+0x74>
			tmpstr++;
   186e4:	3201      	adds	r2, #1
   186e6:	9200      	str	r2, [sp, #0]
   186e8:	e7f0      	b.n	186cc <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   186ea:	2c07      	cmp	r4, #7
   186ec:	d124      	bne.n	18738 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   186ee:	4668      	mov	r0, sp
   186f0:	f015 ffa6 	bl	2e640 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   186f4:	9a00      	ldr	r2, [sp, #0]
   186f6:	7810      	ldrb	r0, [r2, #0]
   186f8:	f7ff ffc6 	bl	18688 <is_valid_notification_char>
   186fc:	b9a8      	cbnz	r0, 1872a <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   186fe:	1b53      	subs	r3, r2, r5
   18700:	4639      	mov	r1, r7
   18702:	462a      	mov	r2, r5
   18704:	4630      	mov	r0, r6
   18706:	f016 f80b 	bl	2e720 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   1870a:	9b00      	ldr	r3, [sp, #0]
   1870c:	781a      	ldrb	r2, [r3, #0]
   1870e:	2a3d      	cmp	r2, #61	; 0x3d
   18710:	d10e      	bne.n	18730 <at_parse_process_element+0x88>
   18712:	785a      	ldrb	r2, [r3, #1]
   18714:	2a3f      	cmp	r2, #63	; 0x3f
   18716:	d101      	bne.n	1871c <at_parse_process_element+0x74>
			tmpstr += 2;
   18718:	3302      	adds	r3, #2
			tmpstr++;
   1871a:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   1871c:	2000      	movs	r0, #0
	*str = tmpstr;
   1871e:	9b00      	ldr	r3, [sp, #0]
   18720:	f8c8 3000 	str.w	r3, [r8]
}
   18724:	b023      	add	sp, #140	; 0x8c
   18726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   1872a:	3201      	adds	r2, #1
   1872c:	9200      	str	r2, [sp, #0]
   1872e:	e7e1      	b.n	186f4 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   18730:	2a3f      	cmp	r2, #63	; 0x3f
   18732:	d1f3      	bne.n	1871c <at_parse_process_element+0x74>
			tmpstr++;
   18734:	3301      	adds	r3, #1
   18736:	e7f0      	b.n	1871a <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   18738:	2c08      	cmp	r4, #8
   1873a:	d103      	bne.n	18744 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   1873c:	4610      	mov	r0, r2
   1873e:	f015 ffc6 	bl	2e6ce <at_params_empty_put>
   18742:	e7eb      	b.n	1871c <at_parse_process_element+0x74>
	} else if (state == STRING) {
   18744:	2c02      	cmp	r4, #2
   18746:	d111      	bne.n	1876c <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   18748:	9a00      	ldr	r2, [sp, #0]
   1874a:	7811      	ldrb	r1, [r2, #0]
   1874c:	4608      	mov	r0, r1
   1874e:	f015 ff6e 	bl	2e62e <is_lfcr>
   18752:	b918      	cbnz	r0, 1875c <at_parse_process_element+0xb4>
   18754:	b111      	cbz	r1, 1875c <at_parse_process_element+0xb4>
			tmpstr++;
   18756:	3201      	adds	r2, #1
   18758:	9200      	str	r2, [sp, #0]
   1875a:	e7f5      	b.n	18748 <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   1875c:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   1875e:	462a      	mov	r2, r5
   18760:	4639      	mov	r1, r7
   18762:	4630      	mov	r0, r6
   18764:	f015 ffdc 	bl	2e720 <at_params_string_put>
		tmpstr++;
   18768:	9b00      	ldr	r3, [sp, #0]
   1876a:	e7e3      	b.n	18734 <at_parse_process_element+0x8c>
	} else if (state == QUOTED_STRING) {
   1876c:	2c03      	cmp	r4, #3
   1876e:	d109      	bne.n	18784 <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   18770:	9b00      	ldr	r3, [sp, #0]
   18772:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   18774:	2a22      	cmp	r2, #34	; 0x22
   18776:	d003      	beq.n	18780 <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18778:	b112      	cbz	r2, 18780 <at_parse_process_element+0xd8>
			tmpstr++;
   1877a:	3301      	adds	r3, #1
   1877c:	9300      	str	r3, [sp, #0]
   1877e:	e7f7      	b.n	18770 <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   18780:	1b5b      	subs	r3, r3, r5
   18782:	e7ec      	b.n	1875e <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   18784:	2c01      	cmp	r4, #1
   18786:	d13c      	bne.n	18802 <at_parse_process_element+0x15a>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   18788:	4628      	mov	r0, r5
   1878a:	220a      	movs	r2, #10
   1878c:	a901      	add	r1, sp, #4
   1878e:	f00e fe2f 	bl	273f0 <strtoul>
		tmpstr = next;
   18792:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   18794:	4d31      	ldr	r5, [pc, #196]	; (1885c <at_parse_process_element+0x1b4>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   18796:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   18798:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   1879a:	9800      	ldr	r0, [sp, #0]
   1879c:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   1879e:	2b29      	cmp	r3, #41	; 0x29
   187a0:	d028      	beq.n	187f4 <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   187a2:	b33b      	cbz	r3, 187f4 <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   187a4:	3b2c      	subs	r3, #44	; 0x2c
   187a6:	b2db      	uxtb	r3, r3
   187a8:	3001      	adds	r0, #1
   187aa:	2b11      	cmp	r3, #17
				tmparray[i++] =
   187ac:	9000      	str	r0, [sp, #0]
   187ae:	d803      	bhi.n	187b8 <at_parse_process_element+0x110>
   187b0:	fa25 f303 	lsr.w	r3, r5, r3
   187b4:	07db      	lsls	r3, r3, #31
   187b6:	d408      	bmi.n	187ca <at_parse_process_element+0x122>
				tmpstr++;
   187b8:	46a1      	mov	r9, r4
   187ba:	e004      	b.n	187c6 <at_parse_process_element+0x11e>
					tmpstr = next;
   187bc:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   187be:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   187c2:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   187c4:	d015      	beq.n	187f2 <at_parse_process_element+0x14a>
				tmpstr++;
   187c6:	464c      	mov	r4, r9
   187c8:	e7e7      	b.n	1879a <at_parse_process_element+0xf2>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   187ca:	220a      	movs	r2, #10
   187cc:	a901      	add	r1, sp, #4
   187ce:	f00e fe0f 	bl	273f0 <strtoul>
				tmparray[i++] =
   187d2:	ab22      	add	r3, sp, #136	; 0x88
   187d4:	f104 0901 	add.w	r9, r4, #1
   187d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   187dc:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   187e0:	9800      	ldr	r0, [sp, #0]
   187e2:	f00e fa19 	bl	26c18 <strlen>
   187e6:	4604      	mov	r4, r0
   187e8:	9801      	ldr	r0, [sp, #4]
   187ea:	f00e fa15 	bl	26c18 <strlen>
   187ee:	4284      	cmp	r4, r0
   187f0:	d1e4      	bne.n	187bc <at_parse_process_element+0x114>
   187f2:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   187f4:	4639      	mov	r1, r7
   187f6:	4630      	mov	r0, r6
   187f8:	00a3      	lsls	r3, r4, #2
   187fa:	aa02      	add	r2, sp, #8
   187fc:	f015 ffb6 	bl	2e76c <at_params_array_put>
   18800:	e7b2      	b.n	18768 <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   18802:	2c04      	cmp	r4, #4
   18804:	d115      	bne.n	18832 <at_parse_process_element+0x18a>
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   18806:	220a      	movs	r2, #10
   18808:	4628      	mov	r0, r5
   1880a:	a902      	add	r1, sp, #8
   1880c:	f00e fdf0 	bl	273f0 <strtoul>
		tmpstr = next;
   18810:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   18812:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   18816:	4602      	mov	r2, r0
		tmpstr = next;
   18818:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   1881a:	da05      	bge.n	18828 <at_parse_process_element+0x180>
			at_params_short_put(list, index, (uint16_t)value);
   1881c:	b282      	uxth	r2, r0
   1881e:	4639      	mov	r1, r7
   18820:	4630      	mov	r0, r6
   18822:	f015 ff3f 	bl	2e6a4 <at_params_short_put>
   18826:	e779      	b.n	1871c <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   18828:	4639      	mov	r1, r7
   1882a:	4630      	mov	r0, r6
   1882c:	f015 ff63 	bl	2e6f6 <at_params_int_put>
   18830:	e774      	b.n	1871c <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   18832:	2c05      	cmp	r4, #5
   18834:	f47f af72 	bne.w	1871c <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   18838:	4909      	ldr	r1, [pc, #36]	; (18860 <at_parse_process_element+0x1b8>)
   1883a:	9b00      	ldr	r3, [sp, #0]
   1883c:	781a      	ldrb	r2, [r3, #0]
   1883e:	5c52      	ldrb	r2, [r2, r1]
   18840:	f012 0f44 	tst.w	r2, #68	; 0x44
   18844:	d101      	bne.n	1884a <at_parse_process_element+0x1a2>
		at_params_string_put(list, index, start_ptr,
   18846:	1b5b      	subs	r3, r3, r5
   18848:	e746      	b.n	186d8 <at_parse_process_element+0x30>
			tmpstr++;
   1884a:	3301      	adds	r3, #1
   1884c:	9300      	str	r3, [sp, #0]
   1884e:	e7f4      	b.n	1883a <at_parse_process_element+0x192>
		return -1;
   18850:	f04f 30ff 	mov.w	r0, #4294967295
   18854:	e766      	b.n	18724 <at_parse_process_element+0x7c>
   18856:	bf00      	nop
   18858:	2002628e 	.word	0x2002628e
   1885c:	00024001 	.word	0x00024001
   18860:	0002f961 	.word	0x0002f961

00018864 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   18864:	b510      	push	{r4, lr}
   18866:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   18868:	f00e f9d6 	bl	26c18 <strlen>
   1886c:	2801      	cmp	r0, #1
   1886e:	d922      	bls.n	188b6 <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   18870:	7821      	ldrb	r1, [r4, #0]
   18872:	4b13      	ldr	r3, [pc, #76]	; (188c0 <is_command+0x5c>)
   18874:	5cca      	ldrb	r2, [r1, r3]
   18876:	f002 0203 	and.w	r2, r2, #3
   1887a:	2a02      	cmp	r2, #2
   1887c:	bf08      	it	eq
   1887e:	3920      	subeq	r1, #32
   18880:	2941      	cmp	r1, #65	; 0x41
   18882:	461a      	mov	r2, r3
   18884:	d117      	bne.n	188b6 <is_command+0x52>
   18886:	7863      	ldrb	r3, [r4, #1]
   18888:	5cd2      	ldrb	r2, [r2, r3]
   1888a:	f002 0203 	and.w	r2, r2, #3
   1888e:	2a02      	cmp	r2, #2
   18890:	bf08      	it	eq
   18892:	3b20      	subeq	r3, #32
   18894:	2b54      	cmp	r3, #84	; 0x54
   18896:	d10e      	bne.n	188b6 <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   18898:	78a2      	ldrb	r2, [r4, #2]
   1889a:	2a25      	cmp	r2, #37	; 0x25
   1889c:	d00d      	beq.n	188ba <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   1889e:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   188a2:	2b23      	cmp	r3, #35	; 0x23
   188a4:	d009      	beq.n	188ba <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   188a6:	4610      	mov	r0, r2
   188a8:	f015 fec1 	bl	2e62e <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   188ac:	b910      	cbnz	r0, 188b4 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   188ae:	fab2 f082 	clz	r0, r2
   188b2:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   188b4:	bd10      	pop	{r4, pc}
		return false;
   188b6:	2000      	movs	r0, #0
   188b8:	e7fc      	b.n	188b4 <is_command+0x50>
		return true;
   188ba:	2001      	movs	r0, #1
   188bc:	e7fa      	b.n	188b4 <is_command+0x50>
   188be:	bf00      	nop
   188c0:	0002f961 	.word	0x0002f961

000188c4 <at_parse_detect_type>:
{
   188c4:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   188c6:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   188c8:	2900      	cmp	r1, #0
{
   188ca:	4605      	mov	r5, r0
   188cc:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   188ce:	d141      	bne.n	18954 <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   188d0:	2a2b      	cmp	r2, #43	; 0x2b
   188d2:	4e29      	ldr	r6, [pc, #164]	; (18978 <at_parse_detect_type+0xb4>)
   188d4:	d001      	beq.n	188da <at_parse_detect_type+0x16>
   188d6:	2a25      	cmp	r2, #37	; 0x25
   188d8:	d104      	bne.n	188e4 <at_parse_detect_type+0x20>
	state = new_state;
   188da:	2306      	movs	r3, #6
   188dc:	7033      	strb	r3, [r6, #0]
	return 0;
   188de:	2000      	movs	r0, #0
	*str = tmpstr;
   188e0:	602c      	str	r4, [r5, #0]
}
   188e2:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   188e4:	4620      	mov	r0, r4
   188e6:	f7ff ffbd 	bl	18864 <is_command>
   188ea:	b388      	cbz	r0, 18950 <at_parse_detect_type+0x8c>
	state = new_state;
   188ec:	2307      	movs	r3, #7
   188ee:	e7f5      	b.n	188dc <at_parse_detect_type+0x18>
	if (chr == '"') {
   188f0:	2a22      	cmp	r2, #34	; 0x22
   188f2:	d006      	beq.n	18902 <at_parse_detect_type+0x3e>
	if (chr == '(') {
   188f4:	2a28      	cmp	r2, #40	; 0x28
   188f6:	d109      	bne.n	1890c <at_parse_detect_type+0x48>
   188f8:	2201      	movs	r2, #1
   188fa:	4b1f      	ldr	r3, [pc, #124]	; (18978 <at_parse_detect_type+0xb4>)
		tmpstr++;
   188fc:	4414      	add	r4, r2
	state = new_state;
   188fe:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   18900:	e7ed      	b.n	188de <at_parse_detect_type+0x1a>
	state = new_state;
   18902:	2203      	movs	r2, #3
   18904:	4b1c      	ldr	r3, [pc, #112]	; (18978 <at_parse_detect_type+0xb4>)
		tmpstr++;
   18906:	3401      	adds	r4, #1
	state = new_state;
   18908:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1890a:	e7e8      	b.n	188de <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   1890c:	4610      	mov	r0, r2
   1890e:	f015 fe8e 	bl	2e62e <is_lfcr>
   18912:	b170      	cbz	r0, 18932 <at_parse_detect_type+0x6e>
   18914:	4918      	ldr	r1, [pc, #96]	; (18978 <at_parse_detect_type+0xb4>)
   18916:	7808      	ldrb	r0, [r1, #0]
   18918:	2804      	cmp	r0, #4
   1891a:	d108      	bne.n	1892e <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   1891c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   18920:	f015 fe85 	bl	2e62e <is_lfcr>
   18924:	2800      	cmp	r0, #0
   18926:	d1f9      	bne.n	1891c <at_parse_detect_type+0x58>
	state = new_state;
   18928:	2305      	movs	r3, #5
   1892a:	700b      	strb	r3, [r1, #0]
}
   1892c:	e7d7      	b.n	188de <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   1892e:	2808      	cmp	r0, #8
   18930:	d0d5      	beq.n	188de <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   18932:	3a2c      	subs	r2, #44	; 0x2c
   18934:	b2d2      	uxtb	r2, r2
   18936:	2a11      	cmp	r2, #17
   18938:	d807      	bhi.n	1894a <at_parse_detect_type+0x86>
   1893a:	4b10      	ldr	r3, [pc, #64]	; (1897c <at_parse_detect_type+0xb8>)
   1893c:	fa23 f202 	lsr.w	r2, r3, r2
   18940:	07d3      	lsls	r3, r2, #31
   18942:	d502      	bpl.n	1894a <at_parse_detect_type+0x86>
	state = new_state;
   18944:	2208      	movs	r2, #8
   18946:	4b0c      	ldr	r3, [pc, #48]	; (18978 <at_parse_detect_type+0xb4>)
   18948:	e013      	b.n	18972 <at_parse_detect_type+0xae>
		return -1;
   1894a:	f04f 30ff 	mov.w	r0, #4294967295
   1894e:	e7c8      	b.n	188e2 <at_parse_detect_type+0x1e>
	state = new_state;
   18950:	2302      	movs	r3, #2
   18952:	e7c3      	b.n	188dc <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   18954:	dd03      	ble.n	1895e <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   18956:	2a2b      	cmp	r2, #43	; 0x2b
   18958:	d0f7      	beq.n	1894a <at_parse_detect_type+0x86>
   1895a:	2a25      	cmp	r2, #37	; 0x25
   1895c:	d0f5      	beq.n	1894a <at_parse_detect_type+0x86>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   1895e:	4b08      	ldr	r3, [pc, #32]	; (18980 <at_parse_detect_type+0xbc>)
   18960:	5cd3      	ldrb	r3, [r2, r3]
   18962:	0759      	lsls	r1, r3, #29
   18964:	d403      	bmi.n	1896e <at_parse_detect_type+0xaa>
   18966:	2a2d      	cmp	r2, #45	; 0x2d
   18968:	d001      	beq.n	1896e <at_parse_detect_type+0xaa>
   1896a:	2a2b      	cmp	r2, #43	; 0x2b
   1896c:	d1c0      	bne.n	188f0 <at_parse_detect_type+0x2c>
	state = new_state;
   1896e:	2204      	movs	r2, #4
   18970:	4b01      	ldr	r3, [pc, #4]	; (18978 <at_parse_detect_type+0xb4>)
   18972:	701a      	strb	r2, [r3, #0]
}
   18974:	e7b3      	b.n	188de <at_parse_detect_type+0x1a>
   18976:	bf00      	nop
   18978:	2002628e 	.word	0x2002628e
   1897c:	00024001 	.word	0x00024001
   18980:	0002f961 	.word	0x0002f961

00018984 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   18984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18988:	4688      	mov	r8, r1
   1898a:	4616      	mov	r6, r2
   1898c:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   1898e:	4604      	mov	r4, r0
   18990:	2800      	cmp	r0, #0
   18992:	d07e      	beq.n	18a92 <at_parser_max_params_from_str+0x10e>
   18994:	2a00      	cmp	r2, #0
   18996:	d07c      	beq.n	18a92 <at_parser_max_params_from_str+0x10e>
   18998:	6853      	ldr	r3, [r2, #4]
   1899a:	2b00      	cmp	r3, #0
   1899c:	d079      	beq.n	18a92 <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   1899e:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   189a0:	4610      	mov	r0, r2
   189a2:	f000 f8eb 	bl	18b7c <at_params_list_clear>
	const char *str = *at_params_str;
   189a6:	9401      	str	r4, [sp, #4]
	int index = 0;
   189a8:	462c      	mov	r4, r5

	max_params_count = MIN(max_params_count, list->param_count);
   189aa:	6833      	ldr	r3, [r6, #0]
		if (isspace((int)*str)) {
   189ac:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 18a9c <at_parser_max_params_from_str+0x118>
	max_params_count = MIN(max_params_count, list->param_count);
   189b0:	429f      	cmp	r7, r3
   189b2:	bf28      	it	cs
   189b4:	461f      	movcs	r7, r3
	state = IDLE;
   189b6:	4b38      	ldr	r3, [pc, #224]	; (18a98 <at_parser_max_params_from_str+0x114>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   189b8:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 18aa0 <at_parser_max_params_from_str+0x11c>
   189bc:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   189be:	9b01      	ldr	r3, [sp, #4]
   189c0:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   189c2:	2a00      	cmp	r2, #0
   189c4:	d04b      	beq.n	18a5e <at_parser_max_params_from_str+0xda>
   189c6:	42a7      	cmp	r7, r4
   189c8:	d949      	bls.n	18a5e <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   189ca:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   189ce:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   189d0:	0711      	lsls	r1, r2, #28
			str++;
   189d2:	bf48      	it	mi
   189d4:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   189d6:	4621      	mov	r1, r4
			str++;
   189d8:	bf48      	it	mi
   189da:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   189dc:	f7ff ff72 	bl	188c4 <at_parse_detect_type>
   189e0:	1c42      	adds	r2, r0, #1
   189e2:	d03c      	beq.n	18a5e <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   189e4:	4632      	mov	r2, r6
   189e6:	4621      	mov	r1, r4
   189e8:	a801      	add	r0, sp, #4
   189ea:	f7ff fe5d 	bl	186a8 <at_parse_process_element>
   189ee:	1c43      	adds	r3, r0, #1
   189f0:	d035      	beq.n	18a5e <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   189f2:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   189f4:	781a      	ldrb	r2, [r3, #0]
   189f6:	3a2c      	subs	r2, #44	; 0x2c
   189f8:	b2d2      	uxtb	r2, r2
   189fa:	2a11      	cmp	r2, #17
   189fc:	d81a      	bhi.n	18a34 <at_parser_max_params_from_str+0xb0>
   189fe:	fa2a f202 	lsr.w	r2, sl, r2
   18a02:	07d1      	lsls	r1, r2, #31
   18a04:	d516      	bpl.n	18a34 <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   18a06:	7858      	ldrb	r0, [r3, #1]
   18a08:	f015 fe11 	bl	2e62e <is_lfcr>
   18a0c:	b178      	cbz	r0, 18a2e <at_parser_max_params_from_str+0xaa>
				index++;
   18a0e:	3401      	adds	r4, #1
				if (index == max_params) {
   18a10:	42bc      	cmp	r4, r7
   18a12:	d039      	beq.n	18a88 <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   18a14:	4621      	mov	r1, r4
   18a16:	a801      	add	r0, sp, #4
   18a18:	f7ff ff54 	bl	188c4 <at_parse_detect_type>
   18a1c:	1c42      	adds	r2, r0, #1
   18a1e:	d01e      	beq.n	18a5e <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   18a20:	4632      	mov	r2, r6
   18a22:	4621      	mov	r1, r4
   18a24:	a801      	add	r0, sp, #4
   18a26:	f7ff fe3f 	bl	186a8 <at_parse_process_element>
   18a2a:	1c43      	adds	r3, r0, #1
   18a2c:	d017      	beq.n	18a5e <at_parser_max_params_from_str+0xda>
			str++;
   18a2e:	9b01      	ldr	r3, [sp, #4]
   18a30:	3301      	adds	r3, #1
   18a32:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   18a34:	9a01      	ldr	r2, [sp, #4]
   18a36:	7810      	ldrb	r0, [r2, #0]
   18a38:	f015 fdf9 	bl	2e62e <is_lfcr>
   18a3c:	b1f8      	cbz	r0, 18a7e <at_parser_max_params_from_str+0xfa>
   18a3e:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   18a40:	7811      	ldrb	r1, [r2, #0]
   18a42:	4693      	mov	fp, r2
   18a44:	4608      	mov	r0, r1
   18a46:	3201      	adds	r2, #1
   18a48:	f015 fdf1 	bl	2e62e <is_lfcr>
   18a4c:	2800      	cmp	r0, #0
   18a4e:	d1f7      	bne.n	18a40 <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18a50:	b119      	cbz	r1, 18a5a <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   18a52:	292b      	cmp	r1, #43	; 0x2b
   18a54:	d001      	beq.n	18a5a <at_parser_max_params_from_str+0xd6>
   18a56:	2925      	cmp	r1, #37	; 0x25
   18a58:	d111      	bne.n	18a7e <at_parser_max_params_from_str+0xfa>
				str += i;
   18a5a:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   18a5e:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   18a60:	b9a5      	cbnz	r5, 18a8c <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   18a62:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   18a64:	2a00      	cmp	r2, #0
   18a66:	bf0c      	ite	eq
   18a68:	2000      	moveq	r0, #0
   18a6a:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   18a6e:	f1b8 0f00 	cmp.w	r8, #0
   18a72:	d001      	beq.n	18a78 <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   18a74:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   18a78:	b003      	add	sp, #12
   18a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   18a7e:	3401      	adds	r4, #1
			oversized = true;
   18a80:	42bc      	cmp	r4, r7
   18a82:	bf08      	it	eq
   18a84:	2501      	moveq	r5, #1
   18a86:	e79a      	b.n	189be <at_parser_max_params_from_str+0x3a>
					oversized = true;
   18a88:	4605      	mov	r5, r0
   18a8a:	e7e8      	b.n	18a5e <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   18a8c:	f06f 0006 	mvn.w	r0, #6
   18a90:	e7ed      	b.n	18a6e <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   18a92:	f06f 0015 	mvn.w	r0, #21
   18a96:	e7ef      	b.n	18a78 <at_parser_max_params_from_str+0xf4>
   18a98:	2002628e 	.word	0x2002628e
   18a9c:	0002f961 	.word	0x0002f961
   18aa0:	00024001 	.word	0x00024001

00018aa4 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   18aa4:	b538      	push	{r3, r4, r5, lr}
   18aa6:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   18aa8:	4605      	mov	r5, r0
   18aaa:	b960      	cbnz	r0, 18ac6 <at_params_get+0x22>
   18aac:	490a      	ldr	r1, [pc, #40]	; (18ad8 <at_params_get+0x34>)
   18aae:	232b      	movs	r3, #43	; 0x2b
   18ab0:	4a0a      	ldr	r2, [pc, #40]	; (18adc <at_params_get+0x38>)
   18ab2:	480b      	ldr	r0, [pc, #44]	; (18ae0 <at_params_get+0x3c>)
   18ab4:	f013 fcbd 	bl	2c432 <printk>
   18ab8:	480a      	ldr	r0, [pc, #40]	; (18ae4 <at_params_get+0x40>)
   18aba:	f013 fcba 	bl	2c432 <printk>
   18abe:	212b      	movs	r1, #43	; 0x2b
   18ac0:	4806      	ldr	r0, [pc, #24]	; (18adc <at_params_get+0x38>)
   18ac2:	f013 fed3 	bl	2c86c <assert_post_action>

	if (index >= list->param_count) {
   18ac6:	682b      	ldr	r3, [r5, #0]
   18ac8:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   18aca:	bf85      	ittet	hi
   18acc:	210c      	movhi	r1, #12
   18ace:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   18ad0:	2000      	movls	r0, #0
	return &param[index];
   18ad2:	fb01 0004 	mlahi	r0, r1, r4, r0
}
   18ad6:	bd38      	pop	{r3, r4, r5, pc}
   18ad8:	00031f37 	.word	0x00031f37
   18adc:	00031f09 	.word	0x00031f09
   18ae0:	00030166 	.word	0x00030166
   18ae4:	00031f4b 	.word	0x00031f4b

00018ae8 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   18ae8:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   18aea:	4604      	mov	r4, r0
   18aec:	b960      	cbnz	r0, 18b08 <at_param_size+0x20>
   18aee:	490e      	ldr	r1, [pc, #56]	; (18b28 <at_param_size+0x40>)
   18af0:	2339      	movs	r3, #57	; 0x39
   18af2:	4a0e      	ldr	r2, [pc, #56]	; (18b2c <at_param_size+0x44>)
   18af4:	480e      	ldr	r0, [pc, #56]	; (18b30 <at_param_size+0x48>)
   18af6:	f013 fc9c 	bl	2c432 <printk>
   18afa:	480e      	ldr	r0, [pc, #56]	; (18b34 <at_param_size+0x4c>)
   18afc:	f013 fc99 	bl	2c432 <printk>
   18b00:	2139      	movs	r1, #57	; 0x39
   18b02:	480a      	ldr	r0, [pc, #40]	; (18b2c <at_param_size+0x44>)
   18b04:	f013 feb2 	bl	2c86c <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   18b08:	7823      	ldrb	r3, [r4, #0]
   18b0a:	2b01      	cmp	r3, #1
   18b0c:	d006      	beq.n	18b1c <at_param_size+0x34>
		return sizeof(uint16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   18b0e:	2b02      	cmp	r3, #2
   18b10:	d006      	beq.n	18b20 <at_param_size+0x38>
		return sizeof(uint32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   18b12:	3b03      	subs	r3, #3
   18b14:	2b01      	cmp	r3, #1
   18b16:	d805      	bhi.n	18b24 <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   18b18:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   18b1a:	bd10      	pop	{r4, pc}
		return sizeof(uint16_t);
   18b1c:	2002      	movs	r0, #2
   18b1e:	e7fc      	b.n	18b1a <at_param_size+0x32>
		return sizeof(uint32_t);
   18b20:	2004      	movs	r0, #4
   18b22:	e7fa      	b.n	18b1a <at_param_size+0x32>
	return 0;
   18b24:	2000      	movs	r0, #0
   18b26:	e7f8      	b.n	18b1a <at_param_size+0x32>
   18b28:	00031f6c 	.word	0x00031f6c
   18b2c:	00031f09 	.word	0x00031f09
   18b30:	00030166 	.word	0x00030166
   18b34:	00031f81 	.word	0x00031f81

00018b38 <at_param_clear>:
{
   18b38:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   18b3a:	4604      	mov	r4, r0
   18b3c:	b960      	cbnz	r0, 18b58 <at_param_clear+0x20>
   18b3e:	490b      	ldr	r1, [pc, #44]	; (18b6c <at_param_clear+0x34>)
   18b40:	231d      	movs	r3, #29
   18b42:	4a0b      	ldr	r2, [pc, #44]	; (18b70 <at_param_clear+0x38>)
   18b44:	480b      	ldr	r0, [pc, #44]	; (18b74 <at_param_clear+0x3c>)
   18b46:	f013 fc74 	bl	2c432 <printk>
   18b4a:	480b      	ldr	r0, [pc, #44]	; (18b78 <at_param_clear+0x40>)
   18b4c:	f013 fc71 	bl	2c432 <printk>
   18b50:	211d      	movs	r1, #29
   18b52:	4807      	ldr	r0, [pc, #28]	; (18b70 <at_param_clear+0x38>)
   18b54:	f013 fe8a 	bl	2c86c <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   18b58:	7823      	ldrb	r3, [r4, #0]
   18b5a:	3b03      	subs	r3, #3
   18b5c:	2b01      	cmp	r3, #1
   18b5e:	d802      	bhi.n	18b66 <at_param_clear+0x2e>
		k_free(param->value.str_val);
   18b60:	68a0      	ldr	r0, [r4, #8]
   18b62:	f016 f8c7 	bl	2ecf4 <k_free>
	param->value.int_val = 0;
   18b66:	2300      	movs	r3, #0
   18b68:	60a3      	str	r3, [r4, #8]
}
   18b6a:	bd10      	pop	{r4, pc}
   18b6c:	00031f6c 	.word	0x00031f6c
   18b70:	00031f09 	.word	0x00031f09
   18b74:	00030166 	.word	0x00030166
   18b78:	00031f81 	.word	0x00031f81

00018b7c <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   18b7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (list == NULL || list->params == NULL) {
   18b80:	4604      	mov	r4, r0
   18b82:	b158      	cbz	r0, 18b9c <at_params_list_clear+0x20>
   18b84:	6843      	ldr	r3, [r0, #4]
   18b86:	b14b      	cbz	r3, 18b9c <at_params_list_clear+0x20>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   18b88:	2500      	movs	r5, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   18b8a:	f8df b054 	ldr.w	fp, [pc, #84]	; 18be0 <at_params_list_clear+0x64>
   18b8e:	f8df 9054 	ldr.w	r9, [pc, #84]	; 18be4 <at_params_list_clear+0x68>
   18b92:	f8df a054 	ldr.w	sl, [pc, #84]	; 18be8 <at_params_list_clear+0x6c>
	for (size_t i = 0; i < list->param_count; ++i) {
   18b96:	6823      	ldr	r3, [r4, #0]
   18b98:	429d      	cmp	r5, r3
   18b9a:	d301      	bcc.n	18ba0 <at_params_list_clear+0x24>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   18b9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		at_param_clear(&params[i]);
   18ba0:	270c      	movs	r7, #12
   18ba2:	436f      	muls	r7, r5
   18ba4:	f8d4 8004 	ldr.w	r8, [r4, #4]
   18ba8:	eb08 0607 	add.w	r6, r8, r7
   18bac:	4630      	mov	r0, r6
   18bae:	f7ff ffc3 	bl	18b38 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   18bb2:	b966      	cbnz	r6, 18bce <at_params_list_clear+0x52>
   18bb4:	4649      	mov	r1, r9
   18bb6:	2314      	movs	r3, #20
   18bb8:	465a      	mov	r2, fp
   18bba:	4650      	mov	r0, sl
   18bbc:	f013 fc39 	bl	2c432 <printk>
   18bc0:	4806      	ldr	r0, [pc, #24]	; (18bdc <at_params_list_clear+0x60>)
   18bc2:	f013 fc36 	bl	2c432 <printk>
   18bc6:	2114      	movs	r1, #20
   18bc8:	4658      	mov	r0, fp
   18bca:	f013 fe4f 	bl	2c86c <assert_post_action>
   18bce:	2300      	movs	r3, #0
	for (size_t i = 0; i < list->param_count; ++i) {
   18bd0:	3501      	adds	r5, #1
   18bd2:	f848 3007 	str.w	r3, [r8, r7]
   18bd6:	6073      	str	r3, [r6, #4]
   18bd8:	60b3      	str	r3, [r6, #8]
   18bda:	e7dc      	b.n	18b96 <at_params_list_clear+0x1a>
   18bdc:	00031f81 	.word	0x00031f81
   18be0:	00031f09 	.word	0x00031f09
   18be4:	00031f6c 	.word	0x00031f6c
   18be8:	00030166 	.word	0x00030166

00018bec <parse_psm_cfg>:
	char timer_str[9] = {0};
   18bec:	2300      	movs	r3, #0
{
   18bee:	b5f0      	push	{r4, r5, r6, r7, lr}
   18bf0:	b089      	sub	sp, #36	; 0x24
	char timer_str[9] = {0};
   18bf2:	e9cd 3305 	strd	r3, r3, [sp, #20]
   18bf6:	f88d 301c 	strb.w	r3, [sp, #28]
	char unit_str[4] = {0};
   18bfa:	9303      	str	r3, [sp, #12]
	size_t timer_str_len = sizeof(timer_str) - 1;
   18bfc:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   18bfe:	2900      	cmp	r1, #0
	err = at_params_string_get(at_params,
   18c00:	bf14      	ite	ne
   18c02:	2108      	movne	r1, #8
   18c04:	2109      	moveq	r1, #9
	size_t timer_str_len = sizeof(timer_str) - 1;
   18c06:	9304      	str	r3, [sp, #16]
{
   18c08:	4615      	mov	r5, r2
	err = at_params_string_get(at_params,
   18c0a:	ab04      	add	r3, sp, #16
   18c0c:	aa05      	add	r2, sp, #20
{
   18c0e:	4606      	mov	r6, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   18c10:	bf14      	ite	ne
   18c12:	2707      	movne	r7, #7
   18c14:	2708      	moveq	r7, #8
	err = at_params_string_get(at_params,
   18c16:	f015 fdfc 	bl	2e812 <at_params_string_get>
	if (err) {
   18c1a:	4601      	mov	r1, r0
   18c1c:	b170      	cbz	r0, 18c3c <parse_psm_cfg+0x50>
   18c1e:	4b34      	ldr	r3, [pc, #208]	; (18cf0 <parse_psm_cfg+0x104>)
   18c20:	4a34      	ldr	r2, [pc, #208]	; (18cf4 <parse_psm_cfg+0x108>)
		LOG_ERR("Could not get TAU, error: %d", err);
   18c22:	4835      	ldr	r0, [pc, #212]	; (18cf8 <parse_psm_cfg+0x10c>)
   18c24:	1ad2      	subs	r2, r2, r3
   18c26:	08d2      	lsrs	r2, r2, #3
   18c28:	0192      	lsls	r2, r2, #6
   18c2a:	f042 0201 	orr.w	r2, r2, #1
   18c2e:	9101      	str	r1, [sp, #4]
   18c30:	f013 fe5b 	bl	2c8ea <log_1>
		return err;
   18c34:	9901      	ldr	r1, [sp, #4]
}
   18c36:	4608      	mov	r0, r1
   18c38:	b009      	add	sp, #36	; 0x24
   18c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(unit_str, timer_str, unit_str_len);
   18c3c:	9b05      	ldr	r3, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   18c3e:	9001      	str	r0, [sp, #4]
	memcpy(unit_str, timer_str, unit_str_len);
   18c40:	f8ad 300c 	strh.w	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   18c44:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   18c46:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   18c48:	a803      	add	r0, sp, #12
	memcpy(unit_str, timer_str, unit_str_len);
   18c4a:	f88d 300e 	strb.w	r3, [sp, #14]
	lut_idx = strtoul(unit_str, NULL, 2);
   18c4e:	f00e fbcf 	bl	273f0 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   18c52:	2807      	cmp	r0, #7
   18c54:	9901      	ldr	r1, [sp, #4]
   18c56:	d90c      	bls.n	18c72 <parse_psm_cfg+0x86>
   18c58:	4926      	ldr	r1, [pc, #152]	; (18cf4 <parse_psm_cfg+0x108>)
   18c5a:	4b25      	ldr	r3, [pc, #148]	; (18cf0 <parse_psm_cfg+0x104>)
		LOG_ERR("Unable to parse periodic TAU string");
   18c5c:	4827      	ldr	r0, [pc, #156]	; (18cfc <parse_psm_cfg+0x110>)
   18c5e:	1ac9      	subs	r1, r1, r3
   18c60:	08c9      	lsrs	r1, r1, #3
   18c62:	0189      	lsls	r1, r1, #6
   18c64:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Unable to parse active time string");
   18c68:	f013 fe30 	bl	2c8cc <log_0>
		return err;
   18c6c:	f06f 0115 	mvn.w	r1, #21
   18c70:	e7e1      	b.n	18c36 <parse_psm_cfg+0x4a>
	timer_unit = t3412_lookup[lut_idx];
   18c72:	4b23      	ldr	r3, [pc, #140]	; (18d00 <parse_psm_cfg+0x114>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   18c74:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   18c76:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   18c7a:	f10d 0017 	add.w	r0, sp, #23
   18c7e:	f00e fbb7 	bl	273f0 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   18c82:	b30c      	cbz	r4, 18cc8 <parse_psm_cfg+0xdc>
   18c84:	4344      	muls	r4, r0
	err = at_params_string_get(at_params,
   18c86:	4639      	mov	r1, r7
   18c88:	4630      	mov	r0, r6
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   18c8a:	602c      	str	r4, [r5, #0]
	err = at_params_string_get(at_params,
   18c8c:	ab04      	add	r3, sp, #16
   18c8e:	aa05      	add	r2, sp, #20
   18c90:	f015 fdbf 	bl	2e812 <at_params_string_get>
	if (err) {
   18c94:	4601      	mov	r1, r0
   18c96:	2800      	cmp	r0, #0
   18c98:	d1c1      	bne.n	18c1e <parse_psm_cfg+0x32>
	memcpy(unit_str, timer_str, unit_str_len);
   18c9a:	9b05      	ldr	r3, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   18c9c:	9001      	str	r0, [sp, #4]
	memcpy(unit_str, timer_str, unit_str_len);
   18c9e:	f8ad 300c 	strh.w	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   18ca2:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   18ca4:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   18ca6:	a803      	add	r0, sp, #12
	memcpy(unit_str, timer_str, unit_str_len);
   18ca8:	f88d 300e 	strb.w	r3, [sp, #14]
	lut_idx = strtoul(unit_str, NULL, 2);
   18cac:	f00e fba0 	bl	273f0 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   18cb0:	2807      	cmp	r0, #7
   18cb2:	9901      	ldr	r1, [sp, #4]
   18cb4:	d90b      	bls.n	18cce <parse_psm_cfg+0xe2>
   18cb6:	490f      	ldr	r1, [pc, #60]	; (18cf4 <parse_psm_cfg+0x108>)
   18cb8:	4b0d      	ldr	r3, [pc, #52]	; (18cf0 <parse_psm_cfg+0x104>)
		LOG_ERR("Unable to parse active time string");
   18cba:	4812      	ldr	r0, [pc, #72]	; (18d04 <parse_psm_cfg+0x118>)
   18cbc:	1ac9      	subs	r1, r1, r3
   18cbe:	08c9      	lsrs	r1, r1, #3
   18cc0:	0189      	lsls	r1, r1, #6
   18cc2:	f041 0101 	orr.w	r1, r1, #1
   18cc6:	e7cf      	b.n	18c68 <parse_psm_cfg+0x7c>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   18cc8:	f04f 34ff 	mov.w	r4, #4294967295
   18ccc:	e7db      	b.n	18c86 <parse_psm_cfg+0x9a>
	timer_unit = t3324_lookup[lut_idx];
   18cce:	4b0e      	ldr	r3, [pc, #56]	; (18d08 <parse_psm_cfg+0x11c>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   18cd0:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   18cd2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   18cd6:	f10d 0017 	add.w	r0, sp, #23
   18cda:	9101      	str	r1, [sp, #4]
   18cdc:	f00e fb88 	bl	273f0 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   18ce0:	9901      	ldr	r1, [sp, #4]
   18ce2:	b114      	cbz	r4, 18cea <parse_psm_cfg+0xfe>
   18ce4:	4360      	muls	r0, r4
   18ce6:	6068      	str	r0, [r5, #4]
	return 0;
   18ce8:	e7a5      	b.n	18c36 <parse_psm_cfg+0x4a>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   18cea:	f04f 30ff 	mov.w	r0, #4294967295
   18cee:	e7fa      	b.n	18ce6 <parse_psm_cfg+0xfa>
   18cf0:	0002eff4 	.word	0x0002eff4
   18cf4:	0002f03c 	.word	0x0002f03c
   18cf8:	00031f9d 	.word	0x00031f9d
   18cfc:	00031fba 	.word	0x00031fba
   18d00:	0002f454 	.word	0x0002f454
   18d04:	00031fde 	.word	0x00031fde
   18d08:	0002f434 	.word	0x0002f434

00018d0c <lte_lc_offline>:
{
   18d0c:	b508      	push	{r3, lr}
	if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   18d0e:	2300      	movs	r3, #0
   18d10:	4804      	ldr	r0, [pc, #16]	; (18d24 <lte_lc_offline+0x18>)
   18d12:	461a      	mov	r2, r3
   18d14:	4619      	mov	r1, r3
   18d16:	f7ff f977 	bl	18008 <at_cmd_write>
   18d1a:	2800      	cmp	r0, #0
}
   18d1c:	bf18      	it	ne
   18d1e:	f06f 0004 	mvnne.w	r0, #4
   18d22:	bd08      	pop	{r3, pc}
   18d24:	000326eb 	.word	0x000326eb

00018d28 <lte_lc_normal>:
{
   18d28:	b508      	push	{r3, lr}
	if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   18d2a:	2300      	movs	r3, #0
   18d2c:	4804      	ldr	r0, [pc, #16]	; (18d40 <lte_lc_normal+0x18>)
   18d2e:	461a      	mov	r2, r3
   18d30:	4619      	mov	r1, r3
   18d32:	f7ff f969 	bl	18008 <at_cmd_write>
   18d36:	2800      	cmp	r0, #0
}
   18d38:	bf18      	it	ne
   18d3a:	f06f 0004 	mvnne.w	r0, #4
   18d3e:	bd08      	pop	{r3, pc}
   18d40:	000326e1 	.word	0x000326e1

00018d44 <lte_lc_system_mode_set>:

	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode)
{
   18d44:	b530      	push	{r4, r5, lr}
	int err, len;
	char cmd[50];

	switch (mode) {
   18d46:	4605      	mov	r5, r0
{
   18d48:	b08f      	sub	sp, #60	; 0x3c
	switch (mode) {
   18d4a:	2800      	cmp	r0, #0
   18d4c:	d040      	beq.n	18dd0 <lte_lc_system_mode_set+0x8c>
   18d4e:	1e43      	subs	r3, r0, #1
   18d50:	2b04      	cmp	r3, #4
   18d52:	d90e      	bls.n	18d72 <lte_lc_system_mode_set+0x2e>
   18d54:	4b1f      	ldr	r3, [pc, #124]	; (18dd4 <lte_lc_system_mode_set+0x90>)
   18d56:	4920      	ldr	r1, [pc, #128]	; (18dd8 <lte_lc_system_mode_set+0x94>)
	case LTE_LC_SYSTEM_MODE_NBIOT:
	case LTE_LC_SYSTEM_MODE_NBIOT_GPS:
	case LTE_LC_SYSTEM_MODE_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested");
   18d58:	4820      	ldr	r0, [pc, #128]	; (18ddc <lte_lc_system_mode_set+0x98>)
   18d5a:	1ac9      	subs	r1, r1, r3
   18d5c:	08c9      	lsrs	r1, r1, #3
   18d5e:	0189      	lsls	r1, r1, #6
   18d60:	f041 0101 	orr.w	r1, r1, #1
   18d64:	f013 fdb2 	bl	2c8cc <log_0>
		return -EINVAL;
   18d68:	f06f 0415 	mvn.w	r4, #21

	sys_mode_current = mode;
	sys_mode_target = mode;

	return err;
}
   18d6c:	4620      	mov	r0, r4
   18d6e:	b00f      	add	sp, #60	; 0x3c
   18d70:	bd30      	pop	{r4, r5, pc}
	len = snprintk(cmd, sizeof(cmd), "AT%%XSYSTEMMODE=%s",
   18d72:	4b1b      	ldr	r3, [pc, #108]	; (18de0 <lte_lc_system_mode_set+0x9c>)
   18d74:	2132      	movs	r1, #50	; 0x32
   18d76:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   18d7a:	4a1a      	ldr	r2, [pc, #104]	; (18de4 <lte_lc_system_mode_set+0xa0>)
   18d7c:	a801      	add	r0, sp, #4
   18d7e:	f013 fb65 	bl	2c44c <snprintk>
	if (len < 0) {
   18d82:	2800      	cmp	r0, #0
   18d84:	da0c      	bge.n	18da0 <lte_lc_system_mode_set+0x5c>
   18d86:	4b13      	ldr	r3, [pc, #76]	; (18dd4 <lte_lc_system_mode_set+0x90>)
   18d88:	4913      	ldr	r1, [pc, #76]	; (18dd8 <lte_lc_system_mode_set+0x94>)
		LOG_ERR("Could not construct system mode command");
   18d8a:	4817      	ldr	r0, [pc, #92]	; (18de8 <lte_lc_system_mode_set+0xa4>)
   18d8c:	1ac9      	subs	r1, r1, r3
   18d8e:	08c9      	lsrs	r1, r1, #3
   18d90:	0189      	lsls	r1, r1, #6
   18d92:	f041 0101 	orr.w	r1, r1, #1
   18d96:	f013 fd99 	bl	2c8cc <log_0>
		return -EFAULT;
   18d9a:	f06f 040d 	mvn.w	r4, #13
   18d9e:	e7e5      	b.n	18d6c <lte_lc_system_mode_set+0x28>
	err = at_cmd_write(cmd, NULL, 0, NULL);
   18da0:	2300      	movs	r3, #0
   18da2:	a801      	add	r0, sp, #4
   18da4:	461a      	mov	r2, r3
   18da6:	4619      	mov	r1, r3
   18da8:	f7ff f92e 	bl	18008 <at_cmd_write>
	if (err) {
   18dac:	4604      	mov	r4, r0
   18dae:	b150      	cbz	r0, 18dc6 <lte_lc_system_mode_set+0x82>
   18db0:	4a09      	ldr	r2, [pc, #36]	; (18dd8 <lte_lc_system_mode_set+0x94>)
   18db2:	4b08      	ldr	r3, [pc, #32]	; (18dd4 <lte_lc_system_mode_set+0x90>)
		LOG_ERR("Could not send AT command, error: %d", err);
   18db4:	4601      	mov	r1, r0
   18db6:	1ad2      	subs	r2, r2, r3
   18db8:	08d2      	lsrs	r2, r2, #3
   18dba:	0192      	lsls	r2, r2, #6
   18dbc:	480b      	ldr	r0, [pc, #44]	; (18dec <lte_lc_system_mode_set+0xa8>)
   18dbe:	f042 0201 	orr.w	r2, r2, #1
   18dc2:	f013 fd92 	bl	2c8ea <log_1>
	sys_mode_current = mode;
   18dc6:	4b0a      	ldr	r3, [pc, #40]	; (18df0 <lte_lc_system_mode_set+0xac>)
   18dc8:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   18dca:	4b0a      	ldr	r3, [pc, #40]	; (18df4 <lte_lc_system_mode_set+0xb0>)
   18dcc:	701d      	strb	r5, [r3, #0]
	return err;
   18dce:	e7cd      	b.n	18d6c <lte_lc_system_mode_set+0x28>
	switch (mode) {
   18dd0:	4604      	mov	r4, r0
   18dd2:	e7cb      	b.n	18d6c <lte_lc_system_mode_set+0x28>
   18dd4:	0002eff4 	.word	0x0002eff4
   18dd8:	0002f03c 	.word	0x0002f03c
   18ddc:	0003239d 	.word	0x0003239d
   18de0:	0002f41c 	.word	0x0002f41c
   18de4:	000323bb 	.word	0x000323bb
   18de8:	000323ce 	.word	0x000323ce
   18dec:	000323f6 	.word	0x000323f6
   18df0:	20026291 	.word	0x20026291
   18df4:	20020a5d 	.word	0x20020a5d

00018df8 <w_lte_lc_connect>:
{
   18df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!is_initialized) {
   18dfc:	4b23      	ldr	r3, [pc, #140]	; (18e8c <w_lte_lc_connect+0x94>)
   18dfe:	4c24      	ldr	r4, [pc, #144]	; (18e90 <w_lte_lc_connect+0x98>)
   18e00:	4924      	ldr	r1, [pc, #144]	; (18e94 <w_lte_lc_connect+0x9c>)
   18e02:	781b      	ldrb	r3, [r3, #0]
   18e04:	1a64      	subs	r4, r4, r1
{
   18e06:	4605      	mov	r5, r0
   18e08:	08e4      	lsrs	r4, r4, #3
	if (!is_initialized) {
   18e0a:	b94b      	cbnz	r3, 18e20 <w_lte_lc_connect+0x28>
		LOG_ERR("The LTE link controller is not initialized");
   18e0c:	01a1      	lsls	r1, r4, #6
   18e0e:	4822      	ldr	r0, [pc, #136]	; (18e98 <w_lte_lc_connect+0xa0>)
   18e10:	f041 0101 	orr.w	r1, r1, #1
   18e14:	f013 fd5a 	bl	2c8cc <log_0>
		return -EPERM;
   18e18:	f04f 30ff 	mov.w	r0, #4294967295
}
   18e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   18e20:	2201      	movs	r2, #1
   18e22:	2100      	movs	r1, #0
   18e24:	481d      	ldr	r0, [pc, #116]	; (18e9c <w_lte_lc_connect+0xa4>)
   18e26:	f015 fe15 	bl	2ea54 <z_impl_k_sem_init>
		err = lte_lc_system_mode_set(sys_mode_target);
   18e2a:	4e1d      	ldr	r6, [pc, #116]	; (18ea0 <w_lte_lc_connect+0xa8>)
	return z_impl_k_sem_take(sem, timeout);
   18e2c:	4f1b      	ldr	r7, [pc, #108]	; (18e9c <w_lte_lc_connect+0xa4>)
			LOG_INF("Network connection attempt timed out");
   18e2e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 18ea8 <w_lte_lc_connect+0xb0>
		err = lte_lc_system_mode_set(sys_mode_target);
   18e32:	7830      	ldrb	r0, [r6, #0]
   18e34:	f7ff ff86 	bl	18d44 <lte_lc_system_mode_set>
		if (err) {
   18e38:	2800      	cmp	r0, #0
   18e3a:	d1ef      	bne.n	18e1c <w_lte_lc_connect+0x24>
		err = lte_lc_normal();
   18e3c:	f7ff ff74 	bl	18d28 <lte_lc_normal>
		if (err || !blocking) {
   18e40:	2800      	cmp	r0, #0
   18e42:	d1eb      	bne.n	18e1c <w_lte_lc_connect+0x24>
   18e44:	2d00      	cmp	r5, #0
   18e46:	d0e9      	beq.n	18e1c <w_lte_lc_connect+0x24>
   18e48:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   18e4c:	2300      	movs	r3, #0
   18e4e:	4638      	mov	r0, r7
   18e50:	f00b fd7c 	bl	2494c <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   18e54:	f110 0f0b 	cmn.w	r0, #11
   18e58:	d1e0      	bne.n	18e1c <w_lte_lc_connect+0x24>
			LOG_INF("Network connection attempt timed out");
   18e5a:	ea4f 1984 	mov.w	r9, r4, lsl #6
   18e5e:	f049 0903 	orr.w	r9, r9, #3
   18e62:	4649      	mov	r1, r9
   18e64:	4640      	mov	r0, r8
   18e66:	f013 fd31 	bl	2c8cc <log_0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   18e6a:	7833      	ldrb	r3, [r6, #0]
   18e6c:	2b01      	cmp	r3, #1
   18e6e:	d10a      	bne.n	18e86 <w_lte_lc_connect+0x8e>
				sys_mode_target = sys_mode_fallback;
   18e70:	2302      	movs	r3, #2
   18e72:	7033      	strb	r3, [r6, #0]
				err = lte_lc_offline();
   18e74:	f7ff ff4a 	bl	18d0c <lte_lc_offline>
				if (err) {
   18e78:	2800      	cmp	r0, #0
   18e7a:	d1cf      	bne.n	18e1c <w_lte_lc_connect+0x24>
				LOG_INF("Using fallback network mode");
   18e7c:	4649      	mov	r1, r9
   18e7e:	4809      	ldr	r0, [pc, #36]	; (18ea4 <w_lte_lc_connect+0xac>)
   18e80:	f013 fd24 	bl	2c8cc <log_0>
	} while (retry);
   18e84:	e7d5      	b.n	18e32 <w_lte_lc_connect+0x3a>
				err = -ETIMEDOUT;
   18e86:	f06f 0073 	mvn.w	r0, #115	; 0x73
   18e8a:	e7c7      	b.n	18e1c <w_lte_lc_connect+0x24>
   18e8c:	2002628f 	.word	0x2002628f
   18e90:	0002f03c 	.word	0x0002f03c
   18e94:	0002eff4 	.word	0x0002eff4
   18e98:	0003241b 	.word	0x0003241b
   18e9c:	20021744 	.word	0x20021744
   18ea0:	20020a5d 	.word	0x20020a5d
   18ea4:	0003246b 	.word	0x0003246b
   18ea8:	00032446 	.word	0x00032446

00018eac <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode)
{
   18eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, bitmask = 0;
	struct at_param_list resp_list = {0};
   18eb0:	2400      	movs	r4, #0
{
   18eb2:	b090      	sub	sp, #64	; 0x40
   18eb4:	4605      	mov	r5, r0
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   18eb6:	221a      	movs	r2, #26
   18eb8:	4621      	mov	r1, r4
   18eba:	a809      	add	r0, sp, #36	; 0x24
	struct at_param_list resp_list = {0};
   18ebc:	e9cd 4402 	strd	r4, r4, [sp, #8]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   18ec0:	9408      	str	r4, [sp, #32]
   18ec2:	f00d fa99 	bl	263f8 <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   18ec6:	230d      	movs	r3, #13
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   18ec8:	e9cd 4404 	strd	r4, r4, [sp, #16]
   18ecc:	9406      	str	r4, [sp, #24]
   18ece:	f88d 401c 	strb.w	r4, [sp, #28]
	size_t response_prefix_len = sizeof(response_prefix);
   18ed2:	9300      	str	r3, [sp, #0]

	if (mode == NULL) {
   18ed4:	2d00      	cmp	r5, #0
   18ed6:	f000 80ad 	beq.w	19034 <lte_lc_system_mode_get+0x188>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   18eda:	4623      	mov	r3, r4
   18edc:	221e      	movs	r2, #30
   18ede:	4857      	ldr	r0, [pc, #348]	; (1903c <lte_lc_system_mode_get+0x190>)
   18ee0:	a908      	add	r1, sp, #32
   18ee2:	f7ff f891 	bl	18008 <at_cmd_write>
			   NULL);
	if (err) {
   18ee6:	4604      	mov	r4, r0
   18ee8:	b168      	cbz	r0, 18f06 <lte_lc_system_mode_get+0x5a>
   18eea:	4955      	ldr	r1, [pc, #340]	; (19040 <lte_lc_system_mode_get+0x194>)
   18eec:	4b55      	ldr	r3, [pc, #340]	; (19044 <lte_lc_system_mode_get+0x198>)
		LOG_ERR("Could not send AT command");
   18eee:	4856      	ldr	r0, [pc, #344]	; (19048 <lte_lc_system_mode_get+0x19c>)
   18ef0:	1ac9      	subs	r1, r1, r3
   18ef2:	08c9      	lsrs	r1, r1, #3
   18ef4:	0189      	lsls	r1, r1, #6
   18ef6:	f041 0101 	orr.w	r1, r1, #1
   18efa:	f013 fce7 	bl	2c8cc <log_0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   18efe:	4620      	mov	r0, r4
   18f00:	b010      	add	sp, #64	; 0x40
   18f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   18f06:	2105      	movs	r1, #5
   18f08:	a802      	add	r0, sp, #8
   18f0a:	f015 fbaa 	bl	2e662 <at_params_list_init>
	if (err) {
   18f0e:	4604      	mov	r4, r0
   18f10:	b158      	cbz	r0, 18f2a <lte_lc_system_mode_get+0x7e>
   18f12:	4b4c      	ldr	r3, [pc, #304]	; (19044 <lte_lc_system_mode_get+0x198>)
   18f14:	4a4a      	ldr	r2, [pc, #296]	; (19040 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Could init AT params list, error: %d", err);
   18f16:	4601      	mov	r1, r0
   18f18:	1ad2      	subs	r2, r2, r3
   18f1a:	08d2      	lsrs	r2, r2, #3
   18f1c:	0192      	lsls	r2, r2, #6
   18f1e:	484b      	ldr	r0, [pc, #300]	; (1904c <lte_lc_system_mode_get+0x1a0>)
   18f20:	f042 0201 	orr.w	r2, r2, #1
   18f24:	f013 fce1 	bl	2c8ea <log_1>
		return err;
   18f28:	e7e9      	b.n	18efe <lte_lc_system_mode_get+0x52>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   18f2a:	4601      	mov	r1, r0
   18f2c:	2305      	movs	r3, #5
   18f2e:	aa02      	add	r2, sp, #8
   18f30:	a808      	add	r0, sp, #32
   18f32:	f7ff fd27 	bl	18984 <at_parser_max_params_from_str>
	if (err) {
   18f36:	4604      	mov	r4, r0
   18f38:	b158      	cbz	r0, 18f52 <lte_lc_system_mode_get+0xa6>
   18f3a:	4a41      	ldr	r2, [pc, #260]	; (19040 <lte_lc_system_mode_get+0x194>)
   18f3c:	4b41      	ldr	r3, [pc, #260]	; (19044 <lte_lc_system_mode_get+0x198>)
		LOG_ERR("Could not parse AT response, error: %d", err);
   18f3e:	4601      	mov	r1, r0
   18f40:	1ad2      	subs	r2, r2, r3
   18f42:	08d2      	lsrs	r2, r2, #3
   18f44:	0192      	lsls	r2, r2, #6
   18f46:	4842      	ldr	r0, [pc, #264]	; (19050 <lte_lc_system_mode_get+0x1a4>)
   18f48:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   18f4c:	f013 fccd 	bl	2c8ea <log_1>
			goto clean_exit;
   18f50:	e013      	b.n	18f7a <lte_lc_system_mode_get+0xce>
	err = at_params_string_get(&resp_list,
   18f52:	4601      	mov	r1, r0
   18f54:	466b      	mov	r3, sp
   18f56:	aa04      	add	r2, sp, #16
   18f58:	a802      	add	r0, sp, #8
   18f5a:	f015 fc5a 	bl	2e812 <at_params_string_get>
	if (err) {
   18f5e:	4606      	mov	r6, r0
   18f60:	b178      	cbz	r0, 18f82 <lte_lc_system_mode_get+0xd6>
   18f62:	4b38      	ldr	r3, [pc, #224]	; (19044 <lte_lc_system_mode_get+0x198>)
   18f64:	4a36      	ldr	r2, [pc, #216]	; (19040 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   18f66:	4601      	mov	r1, r0
   18f68:	1ad2      	subs	r2, r2, r3
   18f6a:	08d2      	lsrs	r2, r2, #3
   18f6c:	0192      	lsls	r2, r2, #6
   18f6e:	4839      	ldr	r0, [pc, #228]	; (19054 <lte_lc_system_mode_get+0x1a8>)
   18f70:	f042 0201 	orr.w	r2, r2, #1
   18f74:	f013 fcb9 	bl	2c8ea <log_1>
		goto clean_exit;
   18f78:	4634      	mov	r4, r6
	at_params_list_free(&resp_list);
   18f7a:	a802      	add	r0, sp, #8
   18f7c:	f015 fb84 	bl	2e688 <at_params_list_free>
	return err;
   18f80:	e7bd      	b.n	18efe <lte_lc_system_mode_get+0x52>
	if (!response_is_valid(response_prefix, response_prefix_len,
   18f82:	4a35      	ldr	r2, [pc, #212]	; (19058 <lte_lc_system_mode_get+0x1ac>)
   18f84:	9900      	ldr	r1, [sp, #0]
   18f86:	a804      	add	r0, sp, #16
   18f88:	f015 fc81 	bl	2e88e <response_is_valid>
   18f8c:	b960      	cbnz	r0, 18fa8 <lte_lc_system_mode_get+0xfc>
   18f8e:	4b2d      	ldr	r3, [pc, #180]	; (19044 <lte_lc_system_mode_get+0x198>)
   18f90:	492b      	ldr	r1, [pc, #172]	; (19040 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Invalid XSYSTEMMODE response");
   18f92:	4832      	ldr	r0, [pc, #200]	; (1905c <lte_lc_system_mode_get+0x1b0>)
   18f94:	1ac9      	subs	r1, r1, r3
   18f96:	08c9      	lsrs	r1, r1, #3
   18f98:	0189      	lsls	r1, r1, #6
   18f9a:	f041 0101 	orr.w	r1, r1, #1
   18f9e:	f013 fc95 	bl	2c8cc <log_0>
		err = -EIO;
   18fa2:	f06f 0404 	mvn.w	r4, #4
		goto clean_exit;
   18fa6:	e7e8      	b.n	18f7a <lte_lc_system_mode_get+0xce>
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   18fa8:	2701      	movs	r7, #1
		bitmask = param ? bitmask | BIT(i) : bitmask;
   18faa:	46b8      	mov	r8, r7
		err = at_params_int_get(&resp_list, i, &param);
   18fac:	4639      	mov	r1, r7
   18fae:	aa01      	add	r2, sp, #4
   18fb0:	a802      	add	r0, sp, #8
   18fb2:	f015 fc17 	bl	2e7e4 <at_params_int_get>
		if (err) {
   18fb6:	4604      	mov	r4, r0
   18fb8:	b148      	cbz	r0, 18fce <lte_lc_system_mode_get+0x122>
   18fba:	4a21      	ldr	r2, [pc, #132]	; (19040 <lte_lc_system_mode_get+0x194>)
   18fbc:	4b21      	ldr	r3, [pc, #132]	; (19044 <lte_lc_system_mode_get+0x198>)
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   18fbe:	4601      	mov	r1, r0
   18fc0:	1ad2      	subs	r2, r2, r3
   18fc2:	08d2      	lsrs	r2, r2, #3
   18fc4:	0192      	lsls	r2, r2, #6
   18fc6:	4826      	ldr	r0, [pc, #152]	; (19060 <lte_lc_system_mode_get+0x1b4>)
   18fc8:	f042 0201 	orr.w	r2, r2, #1
   18fcc:	e7be      	b.n	18f4c <lte_lc_system_mode_get+0xa0>
		bitmask = param ? bitmask | BIT(i) : bitmask;
   18fce:	9b01      	ldr	r3, [sp, #4]
   18fd0:	b113      	cbz	r3, 18fd8 <lte_lc_system_mode_get+0x12c>
   18fd2:	fa08 f307 	lsl.w	r3, r8, r7
   18fd6:	431e      	orrs	r6, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   18fd8:	3701      	adds	r7, #1
   18fda:	2f05      	cmp	r7, #5
   18fdc:	d1e6      	bne.n	18fac <lte_lc_system_mode_get+0x100>
	switch (bitmask) {
   18fde:	2e0c      	cmp	r6, #12
   18fe0:	d81b      	bhi.n	1901a <lte_lc_system_mode_get+0x16e>
   18fe2:	e8df f006 	tbb	[pc, r6]
   18fe6:	1a07      	.short	0x1a07
   18fe8:	1a121a10 	.word	0x1a121a10
   18fec:	1a141a1a 	.word	0x1a141a1a
   18ff0:	1a16      	.short	0x1a16
   18ff2:	18          	.byte	0x18
   18ff3:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   18ff4:	2300      	movs	r3, #0
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   18ff6:	702b      	strb	r3, [r5, #0]
	if (sys_mode_current != *mode) {
   18ff8:	4b1a      	ldr	r3, [pc, #104]	; (19064 <lte_lc_system_mode_get+0x1b8>)
   18ffa:	782a      	ldrb	r2, [r5, #0]
   18ffc:	7819      	ldrb	r1, [r3, #0]
   18ffe:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   19000:	bf18      	it	ne
   19002:	701a      	strbne	r2, [r3, #0]
   19004:	e7b9      	b.n	18f7a <lte_lc_system_mode_get+0xce>
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   19006:	2301      	movs	r3, #1
   19008:	e7f5      	b.n	18ff6 <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   1900a:	2302      	movs	r3, #2
   1900c:	e7f3      	b.n	18ff6 <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   1900e:	2303      	movs	r3, #3
   19010:	e7f1      	b.n	18ff6 <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   19012:	2304      	movs	r3, #4
   19014:	e7ef      	b.n	18ff6 <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   19016:	2305      	movs	r3, #5
   19018:	e7ed      	b.n	18ff6 <lte_lc_system_mode_get+0x14a>
   1901a:	4b0a      	ldr	r3, [pc, #40]	; (19044 <lte_lc_system_mode_get+0x198>)
   1901c:	4908      	ldr	r1, [pc, #32]	; (19040 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Invalid system mode, assuming parsing error");
   1901e:	4812      	ldr	r0, [pc, #72]	; (19068 <lte_lc_system_mode_get+0x1bc>)
   19020:	1ac9      	subs	r1, r1, r3
   19022:	08c9      	lsrs	r1, r1, #3
   19024:	0189      	lsls	r1, r1, #6
   19026:	f041 0101 	orr.w	r1, r1, #1
   1902a:	f013 fc4f 	bl	2c8cc <log_0>
		err = -EFAULT;
   1902e:	f06f 040d 	mvn.w	r4, #13
		goto clean_exit;
   19032:	e7a2      	b.n	18f7a <lte_lc_system_mode_get+0xce>
		return -EINVAL;
   19034:	f06f 0415 	mvn.w	r4, #21
   19038:	e761      	b.n	18efe <lte_lc_system_mode_get+0x52>
   1903a:	bf00      	nop
   1903c:	00032487 	.word	0x00032487
   19040:	0002f03c 	.word	0x0002f03c
   19044:	0002eff4 	.word	0x0002eff4
   19048:	00032497 	.word	0x00032497
   1904c:	000324b1 	.word	0x000324b1
   19050:	000324d6 	.word	0x000324d6
   19054:	00032318 	.word	0x00032318
   19058:	000324fd 	.word	0x000324fd
   1905c:	0003250a 	.word	0x0003250a
   19060:	00032527 	.word	0x00032527
   19064:	20026291 	.word	0x20026291
   19068:	0003254f 	.word	0x0003254f

0001906c <w_lte_lc_init>:
{
   1906c:	b570      	push	{r4, r5, r6, lr}
	if (is_initialized) {
   1906e:	4e3e      	ldr	r6, [pc, #248]	; (19168 <w_lte_lc_init+0xfc>)
{
   19070:	b08e      	sub	sp, #56	; 0x38
	if (is_initialized) {
   19072:	7833      	ldrb	r3, [r6, #0]
   19074:	2b00      	cmp	r3, #0
   19076:	d173      	bne.n	19160 <w_lte_lc_init+0xf4>
	err = lte_lc_system_mode_get(&sys_mode_current);
   19078:	4d3c      	ldr	r5, [pc, #240]	; (1916c <w_lte_lc_init+0x100>)
   1907a:	4628      	mov	r0, r5
   1907c:	f7ff ff16 	bl	18eac <lte_lc_system_mode_get>
	if (err) {
   19080:	4604      	mov	r4, r0
   19082:	b168      	cbz	r0, 190a0 <w_lte_lc_init+0x34>
   19084:	4a3a      	ldr	r2, [pc, #232]	; (19170 <w_lte_lc_init+0x104>)
   19086:	4b3b      	ldr	r3, [pc, #236]	; (19174 <w_lte_lc_init+0x108>)
		LOG_ERR("Could not get current system mode, error: %d", err);
   19088:	4601      	mov	r1, r0
   1908a:	1ad2      	subs	r2, r2, r3
   1908c:	08d2      	lsrs	r2, r2, #3
   1908e:	0192      	lsls	r2, r2, #6
   19090:	4839      	ldr	r0, [pc, #228]	; (19178 <w_lte_lc_init+0x10c>)
   19092:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Can't register AT handler, error: %d", err);
   19096:	f013 fc28 	bl	2c8ea <log_1>
}
   1909a:	4620      	mov	r0, r4
   1909c:	b00e      	add	sp, #56	; 0x38
   1909e:	bd70      	pop	{r4, r5, r6, pc}
	err = at_notif_register_handler(NULL, at_handler);
   190a0:	4936      	ldr	r1, [pc, #216]	; (1917c <w_lte_lc_init+0x110>)
   190a2:	f7ff f8dd 	bl	18260 <at_notif_register_handler>
	if (err) {
   190a6:	4604      	mov	r4, r0
   190a8:	b148      	cbz	r0, 190be <w_lte_lc_init+0x52>
   190aa:	4a31      	ldr	r2, [pc, #196]	; (19170 <w_lte_lc_init+0x104>)
   190ac:	4b31      	ldr	r3, [pc, #196]	; (19174 <w_lte_lc_init+0x108>)
		LOG_ERR("Can't register AT handler, error: %d", err);
   190ae:	4601      	mov	r1, r0
   190b0:	1ad2      	subs	r2, r2, r3
   190b2:	08d2      	lsrs	r2, r2, #3
   190b4:	0192      	lsls	r2, r2, #6
   190b6:	4832      	ldr	r0, [pc, #200]	; (19180 <w_lte_lc_init+0x114>)
   190b8:	f042 0201 	orr.w	r2, r2, #1
   190bc:	e7eb      	b.n	19096 <w_lte_lc_init+0x2a>
	if (sys_mode_current != sys_mode_target) {
   190be:	4b31      	ldr	r3, [pc, #196]	; (19184 <w_lte_lc_init+0x118>)
   190c0:	7818      	ldrb	r0, [r3, #0]
   190c2:	782b      	ldrb	r3, [r5, #0]
   190c4:	4283      	cmp	r3, r0
   190c6:	d00d      	beq.n	190e4 <w_lte_lc_init+0x78>
		err = lte_lc_system_mode_set(sys_mode_target);
   190c8:	f7ff fe3c 	bl	18d44 <lte_lc_system_mode_set>
		if (err) {
   190cc:	4604      	mov	r4, r0
   190ce:	b148      	cbz	r0, 190e4 <w_lte_lc_init+0x78>
   190d0:	4a27      	ldr	r2, [pc, #156]	; (19170 <w_lte_lc_init+0x104>)
   190d2:	4b28      	ldr	r3, [pc, #160]	; (19174 <w_lte_lc_init+0x108>)
			LOG_ERR("Could not set system mode, error: %d", err);
   190d4:	4601      	mov	r1, r0
   190d6:	1ad2      	subs	r2, r2, r3
   190d8:	08d2      	lsrs	r2, r2, #3
   190da:	0192      	lsls	r2, r2, #6
   190dc:	482a      	ldr	r0, [pc, #168]	; (19188 <w_lte_lc_init+0x11c>)
   190de:	f042 0201 	orr.w	r2, r2, #1
   190e2:	e7d8      	b.n	19096 <w_lte_lc_init+0x2a>
	if (at_cmd_write(mdm_trace, NULL, 0, NULL) != 0) {
   190e4:	2300      	movs	r3, #0
   190e6:	4829      	ldr	r0, [pc, #164]	; (1918c <w_lte_lc_init+0x120>)
   190e8:	461a      	mov	r2, r3
   190ea:	4619      	mov	r1, r3
   190ec:	f7fe ff8c 	bl	18008 <at_cmd_write>
   190f0:	4603      	mov	r3, r0
   190f2:	b110      	cbz	r0, 190fa <w_lte_lc_init+0x8e>
		return -EIO;
   190f4:	f06f 0404 	mvn.w	r4, #4
   190f8:	e7cf      	b.n	1909a <w_lte_lc_init+0x2e>
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   190fa:	4602      	mov	r2, r0
   190fc:	4601      	mov	r1, r0
   190fe:	4824      	ldr	r0, [pc, #144]	; (19190 <w_lte_lc_init+0x124>)
   19100:	f7fe ff82 	bl	18008 <at_cmd_write>
   19104:	4604      	mov	r4, r0
   19106:	2800      	cmp	r0, #0
   19108:	d1f4      	bne.n	190f4 <w_lte_lc_init+0x88>
	err = at_cmd_write(cscon, NULL, 0, NULL);
   1910a:	4602      	mov	r2, r0
   1910c:	4603      	mov	r3, r0
   1910e:	4601      	mov	r1, r0
   19110:	4820      	ldr	r0, [pc, #128]	; (19194 <w_lte_lc_init+0x128>)
   19112:	f7fe ff79 	bl	18008 <at_cmd_write>
	if (err) {
   19116:	4602      	mov	r2, r0
   19118:	b1f8      	cbz	r0, 1915a <w_lte_lc_init+0xee>
   1911a:	4b16      	ldr	r3, [pc, #88]	; (19174 <w_lte_lc_init+0x108>)
   1911c:	4d14      	ldr	r5, [pc, #80]	; (19170 <w_lte_lc_init+0x104>)
		LOG_WRN("%s failed (%d), RRC notifications are not enabled",
   1911e:	491d      	ldr	r1, [pc, #116]	; (19194 <w_lte_lc_init+0x128>)
   19120:	1aed      	subs	r5, r5, r3
   19122:	08ed      	lsrs	r5, r5, #3
   19124:	01ad      	lsls	r5, r5, #6
   19126:	f045 0502 	orr.w	r5, r5, #2
   1912a:	462b      	mov	r3, r5
   1912c:	481a      	ldr	r0, [pc, #104]	; (19198 <w_lte_lc_init+0x12c>)
   1912e:	f013 fbf3 	bl	2c918 <log_2>
		LOG_WRN("%s is supported in nRF9160 modem >= v1.1.0", cscon);
   19132:	462a      	mov	r2, r5
   19134:	4917      	ldr	r1, [pc, #92]	; (19194 <w_lte_lc_init+0x128>)
   19136:	4819      	ldr	r0, [pc, #100]	; (1919c <w_lte_lc_init+0x130>)
   19138:	f013 fbd7 	bl	2c8ea <log_1>
		err = at_cmd_write("AT+CGMR", buf, sizeof(buf), NULL);
   1913c:	4623      	mov	r3, r4
   1913e:	2232      	movs	r2, #50	; 0x32
   19140:	4817      	ldr	r0, [pc, #92]	; (191a0 <w_lte_lc_init+0x134>)
   19142:	a901      	add	r1, sp, #4
   19144:	f7fe ff60 	bl	18008 <at_cmd_write>
		if (err == 0) {
   19148:	b938      	cbnz	r0, 1915a <w_lte_lc_init+0xee>
			LOG_WRN("Current modem firmware version: %s",
   1914a:	a801      	add	r0, sp, #4
   1914c:	f7f9 ff0a 	bl	12f64 <log_strdup>
   19150:	462a      	mov	r2, r5
   19152:	4601      	mov	r1, r0
   19154:	4813      	ldr	r0, [pc, #76]	; (191a4 <w_lte_lc_init+0x138>)
   19156:	f013 fbc8 	bl	2c8ea <log_1>
	is_initialized = true;
   1915a:	2301      	movs	r3, #1
   1915c:	7033      	strb	r3, [r6, #0]
	return 0;
   1915e:	e79c      	b.n	1909a <w_lte_lc_init+0x2e>
		return -EALREADY;
   19160:	f06f 0477 	mvn.w	r4, #119	; 0x77
   19164:	e799      	b.n	1909a <w_lte_lc_init+0x2e>
   19166:	bf00      	nop
   19168:	2002628f 	.word	0x2002628f
   1916c:	20026291 	.word	0x20026291
   19170:	0002f03c 	.word	0x0002f03c
   19174:	0002eff4 	.word	0x0002eff4
   19178:	0003257b 	.word	0x0003257b
   1917c:	0000d439 	.word	0x0000d439
   19180:	000325a8 	.word	0x000325a8
   19184:	20020a5d 	.word	0x20020a5d
   19188:	000325cd 	.word	0x000325cd
   1918c:	000326ce 	.word	0x000326ce
   19190:	000326b8 	.word	0x000326b8
   19194:	000326c3 	.word	0x000326c3
   19198:	000325f2 	.word	0x000325f2
   1919c:	00032624 	.word	0x00032624
   191a0:	0003264f 	.word	0x0003264f
   191a4:	00032657 	.word	0x00032657

000191a8 <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   191a8:	b510      	push	{r4, lr}
   191aa:	4604      	mov	r4, r0
			    const char *buf)
{
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   191ac:	4a09      	ldr	r2, [pc, #36]	; (191d4 <modem_info_parse.isra.0+0x2c>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   191ae:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   191b0:	7823      	ldrb	r3, [r4, #0]
   191b2:	2100      	movs	r1, #0
   191b4:	f7ff fbe6 	bl	18984 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   191b8:	f110 0f0b 	cmn.w	r0, #11
   191bc:	d000      	beq.n	191c0 <modem_info_parse.isra.0+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   191be:	b940      	cbnz	r0, 191d2 <modem_info_parse.isra.0+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   191c0:	4804      	ldr	r0, [pc, #16]	; (191d4 <modem_info_parse.isra.0+0x2c>)
   191c2:	f015 fb4d 	bl	2e860 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   191c6:	7823      	ldrb	r3, [r4, #0]
		return -EAGAIN;
   191c8:	4298      	cmp	r0, r3
   191ca:	bf94      	ite	ls
   191cc:	2000      	movls	r0, #0
   191ce:	f06f 000a 	mvnhi.w	r0, #10
	}

	return err;
}
   191d2:	bd10      	pop	{r4, pc}
   191d4:	2002176c 	.word	0x2002176c

000191d8 <modem_info_string_get>:
	return sizeof(uint16_t);
}

int modem_info_string_get(enum modem_info info, char *buf,
				  const size_t buf_size)
{
   191d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int err;
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   191dc:	2500      	movs	r5, #0
{
   191de:	460e      	mov	r6, r1
   191e0:	b0a5      	sub	sp, #148	; 0x94
   191e2:	4680      	mov	r8, r0
   191e4:	4691      	mov	r9, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   191e6:	4629      	mov	r1, r5
   191e8:	227c      	movs	r2, #124	; 0x7c
   191ea:	a805      	add	r0, sp, #20
   191ec:	9504      	str	r5, [sp, #16]
   191ee:	f00d f903 	bl	263f8 <memset>
	/* length of each parsed IP address line */
	size_t ip_str_len = 0;
	/* tracks length of buf when parsing multiple IP addresses */
	size_t out_buf_len = 0;
	/* return value indicating length of the string written to buf */
	size_t len = 0;
   191f2:	9503      	str	r5, [sp, #12]

	if ((buf == NULL) || (buf_size == 0)) {
   191f4:	2e00      	cmp	r6, #0
   191f6:	f000 80e4 	beq.w	193c2 <modem_info_string_get+0x1ea>
   191fa:	f1b9 0f00 	cmp.w	r9, #0
   191fe:	f000 80e0 	beq.w	193c2 <modem_info_string_get+0x1ea>
		return -EINVAL;
	}

	err = at_cmd_write(modem_data[info]->cmd,
   19202:	4b74      	ldr	r3, [pc, #464]	; (193d4 <modem_info_string_get+0x1fc>)
   19204:	2280      	movs	r2, #128	; 0x80
   19206:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
   1920a:	a904      	add	r1, sp, #16
   1920c:	462b      	mov	r3, r5
   1920e:	f8da 0000 	ldr.w	r0, [sl]
   19212:	f7fe fef9 	bl	18008 <at_cmd_write>
			  NULL);

	/* modem_info does not yet support array objects, so here we handle
	 * the supported bands independently as a string
	 */
	if (info == MODEM_INFO_SUP_BAND) {
   19216:	f1b8 0f02 	cmp.w	r8, #2
	err = at_cmd_write(modem_data[info]->cmd,
   1921a:	4604      	mov	r4, r0
	if (info == MODEM_INFO_SUP_BAND) {
   1921c:	d10c      	bne.n	19238 <modem_info_string_get+0x60>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1921e:	f10d 0119 	add.w	r1, sp, #25
   19222:	4630      	mov	r0, r6
   19224:	f00d fc9a 	bl	26b5c <strcpy>
		strcpy(buf, recv_buf + sizeof("%XCBAND: ") - 1);
		return strlen(buf);
   19228:	4630      	mov	r0, r6
   1922a:	f00d fcf5 	bl	26c18 <strlen>
   1922e:	4601      	mov	r1, r0
			len = out_buf_len;
		}
	}

	return len <= 0 ? -ENOTSUP : len;
}
   19230:	4608      	mov	r0, r1
   19232:	b025      	add	sp, #148	; 0x94
   19234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (info == MODEM_INFO_IP_ADDRESS) {
   19238:	f1b8 0f09 	cmp.w	r8, #9
   1923c:	d038      	beq.n	192b0 <modem_info_string_get+0xd8>
	if (err != 0) {
   1923e:	2c00      	cmp	r4, #0
   19240:	f040 80c2 	bne.w	193c8 <modem_info_string_get+0x1f0>
	size_t ip_str_len = 0;
   19244:	4627      	mov	r7, r4
		err = at_params_string_get(&m_param_list,
   19246:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 193f8 <modem_info_string_get+0x220>
	size_t cmd_rsp_idx = 0;
   1924a:	9400      	str	r4, [sp, #0]
	if (info == MODEM_INFO_IP_ADDRESS) {
   1924c:	9a00      	ldr	r2, [sp, #0]
   1924e:	ab04      	add	r3, sp, #16
   19250:	f1b8 0f09 	cmp.w	r8, #9
   19254:	4413      	add	r3, r2
   19256:	d10f      	bne.n	19278 <modem_info_string_get+0xa0>
		ip_str_end = strstr(&recv_buf[cmd_rsp_idx], AT_CMD_RSP_DELIM);
   19258:	4618      	mov	r0, r3
   1925a:	495f      	ldr	r1, [pc, #380]	; (193d8 <modem_info_string_get+0x200>)
   1925c:	9301      	str	r3, [sp, #4]
   1925e:	f00d fed5 	bl	2700c <strstr>
		if (ip_str_end == NULL) {
   19262:	2800      	cmp	r0, #0
   19264:	f000 80b3 	beq.w	193ce <modem_info_string_get+0x1f6>
		recv_buf[++ip_str_len] = 0;
   19268:	2100      	movs	r1, #0
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   1926a:	9b01      	ldr	r3, [sp, #4]
		recv_buf[++ip_str_len] = 0;
   1926c:	aa24      	add	r2, sp, #144	; 0x90
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   1926e:	1ac0      	subs	r0, r0, r3
		recv_buf[++ip_str_len] = 0;
   19270:	1c47      	adds	r7, r0, #1
   19272:	443a      	add	r2, r7
   19274:	f802 1c80 	strb.w	r1, [r2, #-128]
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_rsp_idx]);
   19278:	4619      	mov	r1, r3
   1927a:	f10a 0009 	add.w	r0, sl, #9
   1927e:	f7ff ff93 	bl	191a8 <modem_info_parse.isra.0>
	if (err) {
   19282:	4601      	mov	r1, r0
   19284:	b1b8      	cbz	r0, 192b6 <modem_info_string_get+0xde>
   19286:	4a55      	ldr	r2, [pc, #340]	; (193dc <modem_info_string_get+0x204>)
   19288:	4b55      	ldr	r3, [pc, #340]	; (193e0 <modem_info_string_get+0x208>)
		LOG_ERR("Unable to parse data: %d", err);
   1928a:	9000      	str	r0, [sp, #0]
   1928c:	1ad2      	subs	r2, r2, r3
   1928e:	08d2      	lsrs	r2, r2, #3
   19290:	0192      	lsls	r2, r2, #6
   19292:	4854      	ldr	r0, [pc, #336]	; (193e4 <modem_info_string_get+0x20c>)
   19294:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Unable to obtain short: %d", err);
   19298:	f013 fb27 	bl	2c8ea <log_1>
			return err;
   1929c:	9900      	ldr	r1, [sp, #0]
   1929e:	e7c7      	b.n	19230 <modem_info_string_get+0x58>
			++ip_str_end;
   192a0:	3001      	adds	r0, #1
			++ip_cnt;
   192a2:	3501      	adds	r5, #1
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   192a4:	4639      	mov	r1, r7
   192a6:	f00d feb1 	bl	2700c <strstr>
   192aa:	2800      	cmp	r0, #0
   192ac:	d1f8      	bne.n	192a0 <modem_info_string_get+0xc8>
   192ae:	e7c6      	b.n	1923e <modem_info_string_get+0x66>
   192b0:	4f49      	ldr	r7, [pc, #292]	; (193d8 <modem_info_string_get+0x200>)
	char *ip_str_end = recv_buf;
   192b2:	a804      	add	r0, sp, #16
   192b4:	e7f6      	b.n	192a4 <modem_info_string_get+0xcc>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   192b6:	f89a 300a 	ldrb.w	r3, [sl, #10]
   192ba:	2b01      	cmp	r3, #1
   192bc:	d11e      	bne.n	192fc <modem_info_string_get+0x124>
		err = at_params_short_get(&m_param_list,
   192be:	f89a 1008 	ldrb.w	r1, [sl, #8]
   192c2:	4658      	mov	r0, fp
   192c4:	f10d 020a 	add.w	r2, sp, #10
   192c8:	f015 fa76 	bl	2e7b8 <at_params_short_get>
		if (err) {
   192cc:	4601      	mov	r1, r0
   192ce:	b148      	cbz	r0, 192e4 <modem_info_string_get+0x10c>
   192d0:	4a42      	ldr	r2, [pc, #264]	; (193dc <modem_info_string_get+0x204>)
   192d2:	4b43      	ldr	r3, [pc, #268]	; (193e0 <modem_info_string_get+0x208>)
			LOG_ERR("Unable to obtain short: %d", err);
   192d4:	9000      	str	r0, [sp, #0]
   192d6:	1ad2      	subs	r2, r2, r3
   192d8:	08d2      	lsrs	r2, r2, #3
   192da:	0192      	lsls	r2, r2, #6
   192dc:	4842      	ldr	r0, [pc, #264]	; (193e8 <modem_info_string_get+0x210>)
   192de:	f042 0201 	orr.w	r2, r2, #1
   192e2:	e7d9      	b.n	19298 <modem_info_string_get+0xc0>
		err = snprintf(buf, buf_size, "%d", param_value);
   192e4:	4649      	mov	r1, r9
   192e6:	4630      	mov	r0, r6
   192e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   192ec:	4a3f      	ldr	r2, [pc, #252]	; (193ec <modem_info_string_get+0x214>)
   192ee:	f00d faf3 	bl	268d8 <snprintf>
		if ((err <= 0) || (err > buf_size)) {
   192f2:	4548      	cmp	r0, r9
   192f4:	d915      	bls.n	19322 <modem_info_string_get+0x14a>
			return -EMSGSIZE;
   192f6:	f06f 0179 	mvn.w	r1, #121	; 0x79
   192fa:	e799      	b.n	19230 <modem_info_string_get+0x58>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   192fc:	2b03      	cmp	r3, #3
   192fe:	d110      	bne.n	19322 <modem_info_string_get+0x14a>
		len = buf_size - out_buf_len;
   19300:	eba9 0304 	sub.w	r3, r9, r4
		err = at_params_string_get(&m_param_list,
   19304:	f89a 1008 	ldrb.w	r1, [sl, #8]
		len = buf_size - out_buf_len;
   19308:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list,
   1930a:	4658      	mov	r0, fp
   1930c:	ab03      	add	r3, sp, #12
   1930e:	1932      	adds	r2, r6, r4
   19310:	f015 fa7f 	bl	2e812 <at_params_string_get>
		if (err != 0) {
   19314:	4601      	mov	r1, r0
   19316:	2800      	cmp	r0, #0
   19318:	d18a      	bne.n	19230 <modem_info_string_get+0x58>
		} else if (len >= buf_size) {
   1931a:	9b03      	ldr	r3, [sp, #12]
   1931c:	454b      	cmp	r3, r9
   1931e:	d2ea      	bcs.n	192f6 <modem_info_string_get+0x11e>
		buf[len] = 0;
   19320:	54f0      	strb	r0, [r6, r3]
	if (info == MODEM_INFO_ICCID) {
   19322:	f1b8 0f0e 	cmp.w	r8, #14
   19326:	d121      	bne.n	1936c <modem_info_string_get+0x194>
   19328:	4634      	mov	r4, r6
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   1932a:	4630      	mov	r0, r6
   1932c:	f00d fc74 	bl	26c18 <strlen>
   19330:	1ca3      	adds	r3, r4, #2
   19332:	1ba4      	subs	r4, r4, r6
   19334:	42a0      	cmp	r0, r4
   19336:	d80f      	bhi.n	19358 <modem_info_string_get+0x180>
		if ((len == ICCID_LEN) &&
   19338:	9b03      	ldr	r3, [sp, #12]
   1933a:	2b14      	cmp	r3, #20
   1933c:	d106      	bne.n	1934c <modem_info_string_get+0x174>
   1933e:	7cf3      	ldrb	r3, [r6, #19]
   19340:	2b46      	cmp	r3, #70	; 0x46
   19342:	d103      	bne.n	1934c <modem_info_string_get+0x174>
			buf[len - 1] = '\0';
   19344:	2300      	movs	r3, #0
   19346:	74f3      	strb	r3, [r6, #19]
			--len;
   19348:	2313      	movs	r3, #19
   1934a:	9303      	str	r3, [sp, #12]
	return len <= 0 ? -ENOTSUP : len;
   1934c:	9903      	ldr	r1, [sp, #12]
   1934e:	2900      	cmp	r1, #0
   19350:	bf08      	it	eq
   19352:	f06f 0185 	mvneq.w	r1, #133	; 0x85
   19356:	e76b      	b.n	19230 <modem_info_string_get+0x58>
		current_char = buf[i];
   19358:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   1935c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   19360:	461c      	mov	r4, r3
		buf[i] = next_char;
   19362:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   19366:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   1936a:	e7de      	b.n	1932a <modem_info_string_get+0x152>
	if ((info == MODEM_INFO_IP_ADDRESS) && (ip_cnt > 0)) {
   1936c:	f1b8 0f09 	cmp.w	r8, #9
   19370:	d1ec      	bne.n	1934c <modem_info_string_get+0x174>
   19372:	2d00      	cmp	r5, #0
   19374:	ddea      	ble.n	1934c <modem_info_string_get+0x174>
		char *ip_v6_str = strstr(&buf[out_buf_len], " ");
   19376:	1933      	adds	r3, r6, r4
   19378:	4618      	mov	r0, r3
   1937a:	491d      	ldr	r1, [pc, #116]	; (193f0 <modem_info_string_get+0x218>)
   1937c:	9301      	str	r3, [sp, #4]
   1937e:	f00d fe45 	bl	2700c <strstr>
		if (ip_v6_str) {
   19382:	b130      	cbz	r0, 19392 <modem_info_string_get+0x1ba>
			*ip_v6_str = 0;
   19384:	2200      	movs	r2, #0
			len = strlen(&buf[out_buf_len]);
   19386:	9b01      	ldr	r3, [sp, #4]
			*ip_v6_str = 0;
   19388:	7002      	strb	r2, [r0, #0]
			len = strlen(&buf[out_buf_len]);
   1938a:	4618      	mov	r0, r3
   1938c:	f00d fc44 	bl	26c18 <strlen>
   19390:	9003      	str	r0, [sp, #12]
		out_buf_len += len;
   19392:	9b03      	ldr	r3, [sp, #12]
		if (ip_cnt > 1) {
   19394:	2d01      	cmp	r5, #1
		out_buf_len += len;
   19396:	441c      	add	r4, r3
		if (ip_cnt > 1) {
   19398:	d00e      	beq.n	193b8 <modem_info_string_get+0x1e0>
			err = snprintf(&buf[out_buf_len],
   1939a:	eba9 0104 	sub.w	r1, r9, r4
   1939e:	4a15      	ldr	r2, [pc, #84]	; (193f4 <modem_info_string_get+0x21c>)
   193a0:	1930      	adds	r0, r6, r4
   193a2:	9100      	str	r1, [sp, #0]
   193a4:	f00d fa98 	bl	268d8 <snprintf>
			if ((err <= 0) || (err > (buf_size - out_buf_len))) {
   193a8:	2800      	cmp	r0, #0
   193aa:	dda4      	ble.n	192f6 <modem_info_string_get+0x11e>
   193ac:	9900      	ldr	r1, [sp, #0]
   193ae:	4281      	cmp	r1, r0
   193b0:	d3a1      	bcc.n	192f6 <modem_info_string_get+0x11e>
			cmd_rsp_idx = ip_str_len + 1;
   193b2:	1c7b      	adds	r3, r7, #1
			out_buf_len += IP_ADDR_SEPARATOR_LEN;
   193b4:	3402      	adds	r4, #2
			cmd_rsp_idx = ip_str_len + 1;
   193b6:	9300      	str	r3, [sp, #0]
		if (--ip_cnt) {
   193b8:	3d01      	subs	r5, #1
   193ba:	f47f af47 	bne.w	1924c <modem_info_string_get+0x74>
			len = out_buf_len;
   193be:	9403      	str	r4, [sp, #12]
   193c0:	e7c4      	b.n	1934c <modem_info_string_get+0x174>
		return -EINVAL;
   193c2:	f06f 0115 	mvn.w	r1, #21
   193c6:	e733      	b.n	19230 <modem_info_string_get+0x58>
		return -EIO;
   193c8:	f06f 0104 	mvn.w	r1, #4
   193cc:	e730      	b.n	19230 <modem_info_string_get+0x58>
			return -EFAULT;
   193ce:	f06f 010d 	mvn.w	r1, #13
   193d2:	e72d      	b.n	19230 <modem_info_string_get+0x58>
   193d4:	0002f540 	.word	0x0002f540
   193d8:	00032a8e 	.word	0x00032a8e
   193dc:	0002f044 	.word	0x0002f044
   193e0:	0002eff4 	.word	0x0002eff4
   193e4:	0003284b 	.word	0x0003284b
   193e8:	00032864 	.word	0x00032864
   193ec:	0002fe9f 	.word	0x0002fe9f
   193f0:	000308a6 	.word	0x000308a6
   193f4:	0003287f 	.word	0x0003287f
   193f8:	2002176c 	.word	0x2002176c

000193fc <modem_info_init>:
}

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   193fc:	210a      	movs	r1, #10
   193fe:	4801      	ldr	r0, [pc, #4]	; (19404 <modem_info_init+0x8>)
   19400:	f015 b92f 	b.w	2e662 <at_params_list_init>
   19404:	2002176c 	.word	0x2002176c

00019408 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   19408:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1940a:	f7f9 ff43 	bl	13294 <z_impl_log_panic>
   1940e:	4b06      	ldr	r3, [pc, #24]	; (19428 <k_sys_fatal_error_handler+0x20>)
   19410:	4906      	ldr	r1, [pc, #24]	; (1942c <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   19412:	4807      	ldr	r0, [pc, #28]	; (19430 <k_sys_fatal_error_handler+0x28>)
   19414:	1ac9      	subs	r1, r1, r3
   19416:	08c9      	lsrs	r1, r1, #3
   19418:	0189      	lsls	r1, r1, #6
   1941a:	f041 0101 	orr.w	r1, r1, #1
   1941e:	f013 fa55 	bl	2c8cc <log_0>
	sys_arch_reboot(0);
   19422:	2000      	movs	r0, #0
   19424:	f7fb fce2 	bl	14dec <sys_arch_reboot>

	CODE_UNREACHABLE;
   19428:	0002eff4 	.word	0x0002eff4
   1942c:	0002f02c 	.word	0x0002f02c
   19430:	000328a4 	.word	0x000328a4

00019434 <date_time_notify_event.constprop.0>:

static void date_time_notify_event(const struct date_time_evt *evt)
{
	__ASSERT(evt != NULL, "Library event not found");

	if (app_evt_handler != NULL) {
   19434:	4b02      	ldr	r3, [pc, #8]	; (19440 <date_time_notify_event.constprop.0+0xc>)
   19436:	681b      	ldr	r3, [r3, #0]
   19438:	b10b      	cbz	r3, 1943e <date_time_notify_event.constprop.0+0xa>
		app_evt_handler(evt);
   1943a:	4802      	ldr	r0, [pc, #8]	; (19444 <date_time_notify_event.constprop.0+0x10>)
   1943c:	4718      	bx	r3
	}
}
   1943e:	4770      	bx	lr
   19440:	20021774 	.word	0x20021774
   19444:	20026292 	.word	0x20026292

00019448 <new_date_time_get>:

	return 0;
}

static void new_date_time_get(void)
{
   19448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (time_aux.last_date_time_update == 0 ||
   1944c:	4e73      	ldr	r6, [pc, #460]	; (1961c <new_date_time_get+0x1d4>)
   1944e:	4c74      	ldr	r4, [pc, #464]	; (19620 <new_date_time_get+0x1d8>)
   19450:	4637      	mov	r7, r6
   19452:	4b74      	ldr	r3, [pc, #464]	; (19624 <new_date_time_get+0x1dc>)
{
   19454:	b095      	sub	sp, #84	; 0x54
   19456:	1ae4      	subs	r4, r4, r3
   19458:	08e4      	lsrs	r4, r4, #3
   1945a:	f04f 33ff 	mov.w	r3, #4294967295
   1945e:	f04f 32ff 	mov.w	r2, #4294967295
   19462:	4871      	ldr	r0, [pc, #452]	; (19628 <new_date_time_get+0x1e0>)
   19464:	f00b fa72 	bl	2494c <z_impl_k_sem_take>
	if (time_aux.last_date_time_update == 0 ||
   19468:	68b3      	ldr	r3, [r6, #8]
   1946a:	b193      	cbz	r3, 19492 <new_date_time_get+0x4a>
   1946c:	e9d6 2300 	ldrd	r2, r3, [r6]
   19470:	4313      	orrs	r3, r2
   19472:	d00e      	beq.n	19492 <new_date_time_get+0x4a>
	if ((k_uptime_get() - time_aux.last_date_time_update) >
   19474:	f015 fa2d 	bl	2e8d2 <k_uptime_get>
   19478:	68b3      	ldr	r3, [r6, #8]
   1947a:	4a6c      	ldr	r2, [pc, #432]	; (1962c <new_date_time_get+0x1e4>)
   1947c:	1ac0      	subs	r0, r0, r3
   1947e:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
   19482:	2300      	movs	r3, #0
   19484:	4282      	cmp	r2, r0
   19486:	418b      	sbcs	r3, r1
   19488:	db03      	blt.n	19492 <new_date_time_get+0x4a>
		LOG_DBG("Updating date time UTC...");

		err = current_time_check();
		if (err == 0) {
			LOG_DBG("Time successfully obtained");
			initial_valid_time = true;
   1948a:	2201      	movs	r2, #1
   1948c:	4b68      	ldr	r3, [pc, #416]	; (19630 <new_date_time_get+0x1e8>)

		LOG_DBG("Not getting time from NTP server");
#endif
		LOG_DBG("Not getting time from any time source");

		evt.type = DATE_TIME_NOT_OBTAINED;
   1948e:	701a      	strb	r2, [r3, #0]
   19490:	e05a      	b.n	19548 <new_date_time_get+0x100>
	err = at_cmd_write(AT_CMD_MODEM_DATE_TIME, buf, sizeof(buf), NULL);
   19492:	2300      	movs	r3, #0
   19494:	2221      	movs	r2, #33	; 0x21
   19496:	4867      	ldr	r0, [pc, #412]	; (19634 <new_date_time_get+0x1ec>)
   19498:	a902      	add	r1, sp, #8
   1949a:	f7fe fdb5 	bl	18008 <at_cmd_write>
	if (err) {
   1949e:	2800      	cmp	r0, #0
   194a0:	d155      	bne.n	1954e <new_date_time_get+0x106>
	buf[AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN - 4] = '\0';
   194a2:	2520      	movs	r5, #32
   194a4:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   194a8:	f244 0109 	movw	r1, #16393	; 0x4009
			buf[i] = ' ';
   194ac:	4628      	mov	r0, r5
   194ae:	aa02      	add	r2, sp, #8
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   194b0:	f812 3b01 	ldrb.w	r3, [r2], #1
   194b4:	3b2c      	subs	r3, #44	; 0x2c
   194b6:	b2db      	uxtb	r3, r3
   194b8:	2b0e      	cmp	r3, #14
   194ba:	d805      	bhi.n	194c8 <new_date_time_get+0x80>
   194bc:	fa21 f303 	lsr.w	r3, r1, r3
   194c0:	07db      	lsls	r3, r3, #31
			buf[i] = ' ';
   194c2:	bf48      	it	mi
   194c4:	f802 0c01 	strbmi.w	r0, [r2, #-1]
	for (int i = 0; i < AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN; i++) {
   194c8:	3d01      	subs	r5, #1
   194ca:	d1f1      	bne.n	194b0 <new_date_time_get+0x68>
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   194cc:	220a      	movs	r2, #10
	char *ptr_index = &buf[8];
   194ce:	a804      	add	r0, sp, #16
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   194d0:	a901      	add	r1, sp, #4
	char *ptr_index = &buf[8];
   194d2:	9001      	str	r0, [sp, #4]
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   194d4:	f00d fef4 	bl	272c0 <strtol>
   194d8:	3064      	adds	r0, #100	; 0x64
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   194da:	220a      	movs	r2, #10
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   194dc:	9010      	str	r0, [sp, #64]	; 0x40
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   194de:	a901      	add	r1, sp, #4
   194e0:	9801      	ldr	r0, [sp, #4]
   194e2:	f00d feed 	bl	272c0 <strtol>
   194e6:	3801      	subs	r0, #1
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   194e8:	220a      	movs	r2, #10
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   194ea:	900f      	str	r0, [sp, #60]	; 0x3c
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   194ec:	a901      	add	r1, sp, #4
   194ee:	9801      	ldr	r0, [sp, #4]
   194f0:	f00d fee6 	bl	272c0 <strtol>
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   194f4:	220a      	movs	r2, #10
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   194f6:	900e      	str	r0, [sp, #56]	; 0x38
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   194f8:	a901      	add	r1, sp, #4
   194fa:	9801      	ldr	r0, [sp, #4]
   194fc:	f00d fee0 	bl	272c0 <strtol>
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   19500:	220a      	movs	r2, #10
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   19502:	900d      	str	r0, [sp, #52]	; 0x34
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   19504:	a901      	add	r1, sp, #4
   19506:	9801      	ldr	r0, [sp, #4]
   19508:	f00d feda 	bl	272c0 <strtol>
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   1950c:	220a      	movs	r2, #10
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   1950e:	900c      	str	r0, [sp, #48]	; 0x30
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   19510:	a901      	add	r1, sp, #4
   19512:	9801      	ldr	r0, [sp, #4]
   19514:	f00d fed4 	bl	272c0 <strtol>
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   19518:	9b10      	ldr	r3, [sp, #64]	; 0x40
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   1951a:	900b      	str	r0, [sp, #44]	; 0x2c
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   1951c:	2b73      	cmp	r3, #115	; 0x73
   1951e:	d016      	beq.n	1954e <new_date_time_get+0x106>
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(&date_time) * 1000;
   19520:	a80b      	add	r0, sp, #44	; 0x2c
   19522:	f7f9 f9e9 	bl	128f8 <timeutil_timegm64>
   19526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1952a:	460a      	mov	r2, r1
   1952c:	fba0 0103 	umull	r0, r1, r0, r3
   19530:	fb03 1102 	mla	r1, r3, r2, r1
   19534:	e9c7 0100 	strd	r0, r1, [r7]
	time_aux.last_date_time_update = k_uptime_get();
   19538:	f015 f9cb 	bl	2e8d2 <k_uptime_get>
			initial_valid_time = true;
   1953c:	2201      	movs	r2, #1
   1953e:	4b3c      	ldr	r3, [pc, #240]	; (19630 <new_date_time_get+0x1e8>)
	time_aux.last_date_time_update = k_uptime_get();
   19540:	60b8      	str	r0, [r7, #8]
			initial_valid_time = true;
   19542:	701a      	strb	r2, [r3, #0]
			evt.type = DATE_TIME_OBTAINED_MODEM;
   19544:	4b3c      	ldr	r3, [pc, #240]	; (19638 <new_date_time_get+0x1f0>)
   19546:	701d      	strb	r5, [r3, #0]
		date_time_notify_event(&evt);
   19548:	f7ff ff74 	bl	19434 <date_time_notify_event.constprop.0>
   1954c:	e785      	b.n	1945a <new_date_time_get+0x12>
		if (err == 0) {
   1954e:	f04f 0900 	mov.w	r9, #0
   19552:	4d3a      	ldr	r5, [pc, #232]	; (1963c <new_date_time_get+0x1f4>)
	hints.ai_family = AF_INET;
   19554:	f8df 8100 	ldr.w	r8, [pc, #256]	; 19658 <new_date_time_get+0x210>
	err = sntp_query(&sntp_ctx, timeout, time);
   19558:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 19650 <new_date_time_get+0x208>
	hints.ai_socktype = SOCK_DGRAM;
   1955c:	2302      	movs	r3, #2
   1955e:	2201      	movs	r2, #1
   19560:	e9c8 2302 	strd	r2, r3, [r8, #8]
	hints.ai_protocol = 0;
   19564:	2300      	movs	r3, #0
   19566:	f8c8 3010 	str.w	r3, [r8, #16]
	if (server->addr == NULL) {
   1956a:	686b      	ldr	r3, [r5, #4]
   1956c:	b9eb      	cbnz	r3, 195aa <new_date_time_get+0x162>
	return zsock_getaddrinfo(host, service, hints, res);
   1956e:	4934      	ldr	r1, [pc, #208]	; (19640 <new_date_time_get+0x1f8>)
   19570:	4642      	mov	r2, r8
   19572:	6828      	ldr	r0, [r5, #0]
   19574:	1d2b      	adds	r3, r5, #4
   19576:	f013 fc56 	bl	2ce26 <zsock_getaddrinfo>
		if (err) {
   1957a:	4601      	mov	r1, r0
   1957c:	b1a8      	cbz	r0, 195aa <new_date_time_get+0x162>
			LOG_WRN("getaddrinfo, error: %d", err);
   1957e:	01a2      	lsls	r2, r4, #6
   19580:	4830      	ldr	r0, [pc, #192]	; (19644 <new_date_time_get+0x1fc>)
   19582:	f042 0202 	orr.w	r2, r2, #2
   19586:	f013 f9b0 	bl	2c8ea <log_1>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   1958a:	f109 0901 	add.w	r9, r9, #1
   1958e:	f1b9 0f05 	cmp.w	r9, #5
   19592:	f105 0508 	add.w	r5, r5, #8
   19596:	d1e1      	bne.n	1955c <new_date_time_get+0x114>
	LOG_WRN("Not getting time from any NTP server");
   19598:	01a1      	lsls	r1, r4, #6
   1959a:	482b      	ldr	r0, [pc, #172]	; (19648 <new_date_time_get+0x200>)
   1959c:	f041 0102 	orr.w	r1, r1, #2
   195a0:	f013 f994 	bl	2c8cc <log_0>
		evt.type = DATE_TIME_NOT_OBTAINED;
   195a4:	2203      	movs	r2, #3
   195a6:	4b24      	ldr	r3, [pc, #144]	; (19638 <new_date_time_get+0x1f0>)
   195a8:	e771      	b.n	1948e <new_date_time_get+0x46>
	err = sntp_init(&sntp_ctx, server->addr->ai_addr,
   195aa:	686b      	ldr	r3, [r5, #4]
   195ac:	a80b      	add	r0, sp, #44	; 0x2c
   195ae:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   195b2:	f013 fc04 	bl	2cdbe <sntp_init>
	if (err) {
   195b6:	4682      	mov	sl, r0
   195b8:	b300      	cbz	r0, 195fc <new_date_time_get+0x1b4>
		LOG_WRN("sntp_init, error: %d", err);
   195ba:	4601      	mov	r1, r0
   195bc:	01a2      	lsls	r2, r4, #6
   195be:	4823      	ldr	r0, [pc, #140]	; (1964c <new_date_time_get+0x204>)
   195c0:	f042 0202 	orr.w	r2, r2, #2
		LOG_WRN("sntp_query, error: %d", err);
   195c4:	f013 f991 	bl	2c8ea <log_1>
	sntp_close(&sntp_ctx);
   195c8:	a80b      	add	r0, sp, #44	; 0x2c
   195ca:	f013 fc27 	bl	2ce1c <sntp_close>
		if (err) {
   195ce:	f1ba 0f00 	cmp.w	sl, #0
   195d2:	d1da      	bne.n	1958a <new_date_time_get+0x142>
		time_aux.date_time_utc = (int64_t)sntp_time.seconds * 1000;
   195d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   195d8:	4b1d      	ldr	r3, [pc, #116]	; (19650 <new_date_time_get+0x208>)
   195da:	681a      	ldr	r2, [r3, #0]
   195dc:	6858      	ldr	r0, [r3, #4]
   195de:	fba2 2301 	umull	r2, r3, r2, r1
   195e2:	fb01 3300 	mla	r3, r1, r0, r3
   195e6:	e9c7 2300 	strd	r2, r3, [r7]
		time_aux.last_date_time_update = k_uptime_get();
   195ea:	f015 f972 	bl	2e8d2 <k_uptime_get>
			initial_valid_time = true;
   195ee:	2301      	movs	r3, #1
   195f0:	4a0f      	ldr	r2, [pc, #60]	; (19630 <new_date_time_get+0x1e8>)
		time_aux.last_date_time_update = k_uptime_get();
   195f2:	60b8      	str	r0, [r7, #8]
			initial_valid_time = true;
   195f4:	7013      	strb	r3, [r2, #0]
			evt.type = DATE_TIME_OBTAINED_NTP;
   195f6:	4a10      	ldr	r2, [pc, #64]	; (19638 <new_date_time_get+0x1f0>)
   195f8:	7013      	strb	r3, [r2, #0]
			date_time_notify_event(&evt);
   195fa:	e7a5      	b.n	19548 <new_date_time_get+0x100>
	err = sntp_query(&sntp_ctx, timeout, time);
   195fc:	465a      	mov	r2, fp
   195fe:	f241 3188 	movw	r1, #5000	; 0x1388
   19602:	a80b      	add	r0, sp, #44	; 0x2c
   19604:	f7f3 fe74 	bl	d2f0 <sntp_query>
	if (err) {
   19608:	4682      	mov	sl, r0
   1960a:	2800      	cmp	r0, #0
   1960c:	d0dc      	beq.n	195c8 <new_date_time_get+0x180>
		LOG_WRN("sntp_query, error: %d", err);
   1960e:	01a2      	lsls	r2, r4, #6
   19610:	4601      	mov	r1, r0
   19612:	f042 0202 	orr.w	r2, r2, #2
   19616:	480f      	ldr	r0, [pc, #60]	; (19654 <new_date_time_get+0x20c>)
   19618:	e7d4      	b.n	195c4 <new_date_time_get+0x17c>
   1961a:	bf00      	nop
   1961c:	20021178 	.word	0x20021178
   19620:	0002f01c 	.word	0x0002f01c
   19624:	0002eff4 	.word	0x0002eff4
   19628:	20020c9c 	.word	0x20020c9c
   1962c:	0036ee80 	.word	0x0036ee80
   19630:	20026293 	.word	0x20026293
   19634:	00032712 	.word	0x00032712
   19638:	20026292 	.word	0x20026292
   1963c:	2002049c 	.word	0x2002049c
   19640:	000328c1 	.word	0x000328c1
   19644:	000328c5 	.word	0x000328c5
   19648:	00032907 	.word	0x00032907
   1964c:	000328dc 	.word	0x000328dc
   19650:	20021168 	.word	0x20021168
   19654:	000328f1 	.word	0x000328f1
   19658:	20021778 	.word	0x20021778

0001965c <date_time_init>:
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
	}
}

static int date_time_init(const struct device *unused)
{
   1965c:	b510      	push	{r4, lr}
	k_delayed_work_init(&time_work, date_time_handler);
   1965e:	4c07      	ldr	r4, [pc, #28]	; (1967c <date_time_init+0x20>)
   19660:	4907      	ldr	r1, [pc, #28]	; (19680 <date_time_init+0x24>)
   19662:	4620      	mov	r0, r4
   19664:	f015 fa6f 	bl	2eb46 <k_delayed_work_init>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   19668:	f04f 62e1 	mov.w	r2, #117964800	; 0x7080000
   1966c:	2300      	movs	r3, #0
   1966e:	4621      	mov	r1, r4
   19670:	4804      	ldr	r0, [pc, #16]	; (19684 <date_time_init+0x28>)
   19672:	f00b fb95 	bl	24da0 <k_delayed_work_submit_to_queue>
	k_delayed_work_submit(&time_work,
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));

	return 0;
}
   19676:	2000      	movs	r0, #0
   19678:	bd10      	pop	{r4, pc}
   1967a:	bf00      	nop
   1967c:	20021188 	.word	0x20021188
   19680:	00019689 	.word	0x00019689
   19684:	20021348 	.word	0x20021348

00019688 <date_time_handler>:
{
   19688:	b510      	push	{r4, lr}
	z_impl_k_sem_give(sem);
   1968a:	4806      	ldr	r0, [pc, #24]	; (196a4 <date_time_handler+0x1c>)
   1968c:	f00b f91a 	bl	248c4 <z_impl_k_sem_give>
}
   19690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19694:	f04f 62e1 	mov.w	r2, #117964800	; 0x7080000
   19698:	2300      	movs	r3, #0
   1969a:	4903      	ldr	r1, [pc, #12]	; (196a8 <date_time_handler+0x20>)
   1969c:	4803      	ldr	r0, [pc, #12]	; (196ac <date_time_handler+0x24>)
   1969e:	f00b bb7f 	b.w	24da0 <k_delayed_work_submit_to_queue>
   196a2:	bf00      	nop
   196a4:	20020c9c 	.word	0x20020c9c
   196a8:	20021188 	.word	0x20021188
   196ac:	20021348 	.word	0x20021348

000196b0 <date_time_uptime_to_unix_time_ms>:

	return 0;
}

int date_time_uptime_to_unix_time_ms(int64_t *uptime)
{
   196b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t uptime_prev = *uptime;
   196b4:	6803      	ldr	r3, [r0, #0]
{
   196b6:	4604      	mov	r4, r0
	int64_t uptime_prev = *uptime;
   196b8:	9300      	str	r3, [sp, #0]
   196ba:	6843      	ldr	r3, [r0, #4]
   196bc:	9301      	str	r3, [sp, #4]

	if (!initial_valid_time) {
   196be:	4b23      	ldr	r3, [pc, #140]	; (1974c <date_time_uptime_to_unix_time_ms+0x9c>)
   196c0:	781b      	ldrb	r3, [r3, #0]
   196c2:	b973      	cbnz	r3, 196e2 <date_time_uptime_to_unix_time_ms+0x32>
   196c4:	4b22      	ldr	r3, [pc, #136]	; (19750 <date_time_uptime_to_unix_time_ms+0xa0>)
   196c6:	4923      	ldr	r1, [pc, #140]	; (19754 <date_time_uptime_to_unix_time_ms+0xa4>)
		LOG_WRN("Valid time not currently available");
   196c8:	4823      	ldr	r0, [pc, #140]	; (19758 <date_time_uptime_to_unix_time_ms+0xa8>)
   196ca:	1ac9      	subs	r1, r1, r3
   196cc:	08c9      	lsrs	r1, r1, #3
   196ce:	0189      	lsls	r1, r1, #6
   196d0:	f041 0102 	orr.w	r1, r1, #2
   196d4:	f013 f8fa 	bl	2c8cc <log_0>
		return -ENODATA;
   196d8:	f06f 003c 	mvn.w	r0, #60	; 0x3c
		*uptime = uptime_prev;
		return -EINVAL;
	}

	return 0;
}
   196dc:	b003      	add	sp, #12
   196de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*uptime += time_aux.date_time_utc - time_aux.last_date_time_update;
   196e2:	4d1e      	ldr	r5, [pc, #120]	; (1975c <date_time_uptime_to_unix_time_ms+0xac>)
   196e4:	68a9      	ldr	r1, [r5, #8]
   196e6:	e9d5 6700 	ldrd	r6, r7, [r5]
   196ea:	1a72      	subs	r2, r6, r1
   196ec:	eb67 73e1 	sbc.w	r3, r7, r1, asr #31
   196f0:	9900      	ldr	r1, [sp, #0]
   196f2:	eb12 0801 	adds.w	r8, r2, r1
   196f6:	9901      	ldr	r1, [sp, #4]
   196f8:	eb43 0901 	adc.w	r9, r3, r1
   196fc:	e9c0 8900 	strd	r8, r9, [r0]
	    (k_uptime_get() - time_aux.last_date_time_update)) {
   19700:	f015 f8e7 	bl	2e8d2 <k_uptime_get>
   19704:	68ab      	ldr	r3, [r5, #8]
	if (*uptime > time_aux.date_time_utc +
   19706:	1af6      	subs	r6, r6, r3
   19708:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
   1970c:	eb16 0a00 	adds.w	sl, r6, r0
   19710:	eb47 0b01 	adc.w	fp, r7, r1
   19714:	45c2      	cmp	sl, r8
   19716:	eb7b 0309 	sbcs.w	r3, fp, r9
   1971a:	da15      	bge.n	19748 <date_time_uptime_to_unix_time_ms+0x98>
   1971c:	4b0c      	ldr	r3, [pc, #48]	; (19750 <date_time_uptime_to_unix_time_ms+0xa0>)
   1971e:	4d0d      	ldr	r5, [pc, #52]	; (19754 <date_time_uptime_to_unix_time_ms+0xa4>)
		LOG_WRN("Uptime to large or previously converted");
   19720:	480f      	ldr	r0, [pc, #60]	; (19760 <date_time_uptime_to_unix_time_ms+0xb0>)
   19722:	1aed      	subs	r5, r5, r3
   19724:	08ed      	lsrs	r5, r5, #3
   19726:	01ad      	lsls	r5, r5, #6
   19728:	f045 0502 	orr.w	r5, r5, #2
   1972c:	4629      	mov	r1, r5
   1972e:	f013 f8cd 	bl	2c8cc <log_0>
		LOG_WRN("Clear variable or set a new uptime");
   19732:	480c      	ldr	r0, [pc, #48]	; (19764 <date_time_uptime_to_unix_time_ms+0xb4>)
   19734:	4629      	mov	r1, r5
   19736:	f013 f8c9 	bl	2c8cc <log_0>
		*uptime = uptime_prev;
   1973a:	9b00      	ldr	r3, [sp, #0]
		return -EINVAL;
   1973c:	f06f 0015 	mvn.w	r0, #21
		*uptime = uptime_prev;
   19740:	6023      	str	r3, [r4, #0]
   19742:	9b01      	ldr	r3, [sp, #4]
   19744:	6063      	str	r3, [r4, #4]
		return -EINVAL;
   19746:	e7c9      	b.n	196dc <date_time_uptime_to_unix_time_ms+0x2c>
	return 0;
   19748:	2000      	movs	r0, #0
   1974a:	e7c7      	b.n	196dc <date_time_uptime_to_unix_time_ms+0x2c>
   1974c:	20026293 	.word	0x20026293
   19750:	0002eff4 	.word	0x0002eff4
   19754:	0002f01c 	.word	0x0002f01c
   19758:	0003292c 	.word	0x0003292c
   1975c:	20021178 	.word	0x20021178
   19760:	0003294f 	.word	0x0003294f
   19764:	00032977 	.word	0x00032977

00019768 <date_time_now>:

int date_time_now(int64_t *unix_time_ms)
{
   19768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;
	int64_t unix_time_ms_prev = *unix_time_ms;
   1976a:	e9d0 4500 	ldrd	r4, r5, [r0]
{
   1976e:	4606      	mov	r6, r0

	*unix_time_ms = k_uptime_get();
   19770:	f015 f8af 	bl	2e8d2 <k_uptime_get>
   19774:	e9c6 0100 	strd	r0, r1, [r6]

	err = date_time_uptime_to_unix_time_ms(unix_time_ms);
   19778:	4630      	mov	r0, r6
   1977a:	f7ff ff99 	bl	196b0 <date_time_uptime_to_unix_time_ms>
	if (err) {
   1977e:	4607      	mov	r7, r0
   19780:	b160      	cbz	r0, 1979c <date_time_now+0x34>
   19782:	4b07      	ldr	r3, [pc, #28]	; (197a0 <date_time_now+0x38>)
   19784:	4a07      	ldr	r2, [pc, #28]	; (197a4 <date_time_now+0x3c>)
		LOG_WRN("date_time_uptime_to_unix_time_ms, error: %d", err);
   19786:	4601      	mov	r1, r0
   19788:	1ad2      	subs	r2, r2, r3
   1978a:	08d2      	lsrs	r2, r2, #3
   1978c:	0192      	lsls	r2, r2, #6
   1978e:	4806      	ldr	r0, [pc, #24]	; (197a8 <date_time_now+0x40>)
   19790:	f042 0202 	orr.w	r2, r2, #2
   19794:	f013 f8a9 	bl	2c8ea <log_1>
		*unix_time_ms = unix_time_ms_prev;
   19798:	e9c6 4500 	strd	r4, r5, [r6]
	}

	return err;
}
   1979c:	4638      	mov	r0, r7
   1979e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   197a0:	0002eff4 	.word	0x0002eff4
   197a4:	0002f01c 	.word	0x0002f01c
   197a8:	0003299a 	.word	0x0003299a

000197ac <date_time_update_async>:

	app_evt_handler = evt_handler;
}

int date_time_update_async(date_time_evt_handler_t evt_handler)
{
   197ac:	b508      	push	{r3, lr}
	if (evt_handler) {
   197ae:	b108      	cbz	r0, 197b4 <date_time_update_async+0x8>
		app_evt_handler = evt_handler;
   197b0:	4b03      	ldr	r3, [pc, #12]	; (197c0 <date_time_update_async+0x14>)
   197b2:	6018      	str	r0, [r3, #0]
   197b4:	4803      	ldr	r0, [pc, #12]	; (197c4 <date_time_update_async+0x18>)
   197b6:	f00b f885 	bl	248c4 <z_impl_k_sem_give>
	}

	k_sem_give(&time_fetch_sem);

	return 0;
}
   197ba:	2000      	movs	r0, #0
   197bc:	bd08      	pop	{r3, pc}
   197be:	bf00      	nop
   197c0:	20021774 	.word	0x20021774
   197c4:	20020c9c 	.word	0x20020c9c

000197c8 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   197c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   197cc:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   197ce:	4c21      	ldr	r4, [pc, #132]	; (19854 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   197d0:	4e21      	ldr	r6, [pc, #132]	; (19858 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   197d2:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   197d6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 19860 <check_ext_api_requests+0x98>
{
   197da:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   197dc:	45a8      	cmp	r8, r5
   197de:	d803      	bhi.n	197e8 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   197e0:	2000      	movs	r0, #0
   197e2:	b005      	add	sp, #20
   197e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   197e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   197ea:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   197ee:	681f      	ldr	r7, [r3, #0]
   197f0:	ab01      	add	r3, sp, #4
   197f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   197f6:	220c      	movs	r2, #12
   197f8:	4619      	mov	r1, r3
   197fa:	4638      	mov	r0, r7
   197fc:	f00c fdce 	bl	2639c <memcmp>
   19800:	b990      	cbnz	r0, 19828 <check_ext_api_requests+0x60>
   19802:	b18f      	cbz	r7, 19828 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   19804:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   19806:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   19808:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   1980a:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1980c:	4291      	cmp	r1, r2
   1980e:	d10b      	bne.n	19828 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   19810:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   19812:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   19814:	4291      	cmp	r1, r2
   19816:	d807      	bhi.n	19828 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   19818:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   1981a:	4291      	cmp	r1, r2
   1981c:	d904      	bls.n	19828 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   1981e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   19820:	695b      	ldr	r3, [r3, #20]
   19822:	ea32 0303 	bics.w	r3, r2, r3
   19826:	d00a      	beq.n	1983e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   19828:	6a27      	ldr	r7, [r4, #32]
   1982a:	b167      	cbz	r7, 19846 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   1982c:	480b      	ldr	r0, [pc, #44]	; (1985c <check_ext_api_requests+0x94>)
   1982e:	f012 fe00 	bl	2c432 <printk>
			k_panic();
   19832:	4040      	eors	r0, r0
   19834:	f380 8811 	msr	BASEPRI, r0
   19838:	f04f 0004 	mov.w	r0, #4
   1983c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   1983e:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   19840:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   19842:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   19844:	e7ca      	b.n	197dc <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   19846:	4648      	mov	r0, r9
   19848:	f012 fdf3 	bl	2c432 <printk>
			*ext_api_req->ext_api = NULL;
   1984c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1984e:	601f      	str	r7, [r3, #0]
   19850:	e7f5      	b.n	1983e <check_ext_api_requests+0x76>
   19852:	bf00      	nop
   19854:	0000c23c 	.word	0x0000c23c
   19858:	0002f0dc 	.word	0x0002f0dc
   1985c:	00032a35 	.word	0x00032a35
   19860:	00032a5e 	.word	0x00032a5e

00019864 <packet_free_cb>:
   19864:	b510      	push	{r4, lr}
   19866:	4604      	mov	r4, r0
   19868:	6800      	ldr	r0, [r0, #0]
   1986a:	f004 fef7 	bl	1e65c <rpc_logobj_client_data_free>
   1986e:	68a0      	ldr	r0, [r4, #8]
   19870:	b118      	cbz	r0, 1987a <packet_free_cb+0x16>
   19872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19876:	f007 bced 	b.w	21254 <nrf_free>
   1987a:	bd10      	pop	{r4, pc}

0001987c <logobj_event_handler>:
   1987c:	b530      	push	{r4, r5, lr}
   1987e:	4b3b      	ldr	r3, [pc, #236]	; (1996c <logobj_event_handler+0xf0>)
   19880:	b085      	sub	sp, #20
   19882:	681d      	ldr	r5, [r3, #0]
   19884:	2d00      	cmp	r5, #0
   19886:	d04c      	beq.n	19922 <logobj_event_handler+0xa6>
   19888:	f248 0302 	movw	r3, #32770	; 0x8002
   1988c:	4299      	cmp	r1, r3
   1988e:	d053      	beq.n	19938 <logobj_event_handler+0xbc>
   19890:	d91c      	bls.n	198cc <logobj_event_handler+0x50>
   19892:	f248 0303 	movw	r3, #32771	; 0x8003
   19896:	4299      	cmp	r1, r3
   19898:	d05a      	beq.n	19950 <logobj_event_handler+0xd4>
   1989a:	f249 0301 	movw	r3, #36865	; 0x9001
   1989e:	4299      	cmp	r1, r3
   198a0:	d147      	bne.n	19932 <logobj_event_handler+0xb6>
   198a2:	2400      	movs	r4, #0
   198a4:	6843      	ldr	r3, [r0, #4]
   198a6:	6802      	ldr	r2, [r0, #0]
   198a8:	e9cd 4402 	strd	r4, r4, [sp, #8]
   198ac:	e9cd 2300 	strd	r2, r3, [sp]
   198b0:	69e8      	ldr	r0, [r5, #28]
   198b2:	4669      	mov	r1, sp
   198b4:	6803      	ldr	r3, [r0, #0]
   198b6:	685b      	ldr	r3, [r3, #4]
   198b8:	4798      	blx	r3
   198ba:	3001      	adds	r0, #1
   198bc:	d04e      	beq.n	1995c <logobj_event_handler+0xe0>
   198be:	4620      	mov	r0, r4
   198c0:	682b      	ldr	r3, [r5, #0]
   198c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   198c6:	602b      	str	r3, [r5, #0]
   198c8:	b005      	add	sp, #20
   198ca:	bd30      	pop	{r4, r5, pc}
   198cc:	f248 0301 	movw	r3, #32769	; 0x8001
   198d0:	4299      	cmp	r1, r3
   198d2:	d12e      	bne.n	19932 <logobj_event_handler+0xb6>
   198d4:	68c3      	ldr	r3, [r0, #12]
   198d6:	2b00      	cmp	r3, #0
   198d8:	d135      	bne.n	19946 <logobj_event_handler+0xca>
   198da:	6828      	ldr	r0, [r5, #0]
   198dc:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   198e0:	d03e      	beq.n	19960 <logobj_event_handler+0xe4>
   198e2:	682b      	ldr	r3, [r5, #0]
   198e4:	b29b      	uxth	r3, r3
   198e6:	2b01      	cmp	r3, #1
   198e8:	d105      	bne.n	198f6 <logobj_event_handler+0x7a>
   198ea:	682b      	ldr	r3, [r5, #0]
   198ec:	0c1b      	lsrs	r3, r3, #16
   198ee:	041b      	lsls	r3, r3, #16
   198f0:	f043 0302 	orr.w	r3, r3, #2
   198f4:	602b      	str	r3, [r5, #0]
   198f6:	4b1e      	ldr	r3, [pc, #120]	; (19970 <logobj_event_handler+0xf4>)
   198f8:	781a      	ldrb	r2, [r3, #0]
   198fa:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   198fe:	2a00      	cmp	r2, #0
   19900:	d031      	beq.n	19966 <logobj_event_handler+0xea>
   19902:	4a1c      	ldr	r2, [pc, #112]	; (19974 <logobj_event_handler+0xf8>)
   19904:	7811      	ldrb	r1, [r2, #0]
   19906:	b909      	cbnz	r1, 1990c <logobj_event_handler+0x90>
   19908:	2101      	movs	r1, #1
   1990a:	7011      	strb	r1, [r2, #0]
   1990c:	2000      	movs	r0, #0
   1990e:	7018      	strb	r0, [r3, #0]
   19910:	682b      	ldr	r3, [r5, #0]
   19912:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19916:	602b      	str	r3, [r5, #0]
   19918:	682b      	ldr	r3, [r5, #0]
   1991a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1991e:	602b      	str	r3, [r5, #0]
   19920:	e7d2      	b.n	198c8 <logobj_event_handler+0x4c>
   19922:	6800      	ldr	r0, [r0, #0]
   19924:	2800      	cmp	r0, #0
   19926:	d0cf      	beq.n	198c8 <logobj_event_handler+0x4c>
   19928:	f004 fe98 	bl	1e65c <rpc_logobj_client_data_free>
   1992c:	4628      	mov	r0, r5
   1992e:	b005      	add	sp, #20
   19930:	bd30      	pop	{r4, r5, pc}
   19932:	2000      	movs	r0, #0
   19934:	b005      	add	sp, #20
   19936:	bd30      	pop	{r4, r5, pc}
   19938:	682b      	ldr	r3, [r5, #0]
   1993a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   1993e:	d00b      	beq.n	19958 <logobj_event_handler+0xdc>
   19940:	68c0      	ldr	r0, [r0, #12]
   19942:	2800      	cmp	r0, #0
   19944:	d0e4      	beq.n	19910 <logobj_event_handler+0x94>
   19946:	230e      	movs	r3, #14
   19948:	2000      	movs	r0, #0
   1994a:	606b      	str	r3, [r5, #4]
   1994c:	b005      	add	sp, #20
   1994e:	bd30      	pop	{r4, r5, pc}
   19950:	68c3      	ldr	r3, [r0, #12]
   19952:	2b01      	cmp	r3, #1
   19954:	d1a5      	bne.n	198a2 <logobj_event_handler+0x26>
   19956:	e7f6      	b.n	19946 <logobj_event_handler+0xca>
   19958:	4618      	mov	r0, r3
   1995a:	e7b5      	b.n	198c8 <logobj_event_handler+0x4c>
   1995c:	2002      	movs	r0, #2
   1995e:	e7b3      	b.n	198c8 <logobj_event_handler+0x4c>
   19960:	230e      	movs	r3, #14
   19962:	606b      	str	r3, [r5, #4]
   19964:	e7b0      	b.n	198c8 <logobj_event_handler+0x4c>
   19966:	4a03      	ldr	r2, [pc, #12]	; (19974 <logobj_event_handler+0xf8>)
   19968:	7011      	strb	r1, [r2, #0]
   1996a:	e7cf      	b.n	1990c <logobj_event_handler+0x90>
   1996c:	200217cc 	.word	0x200217cc
   19970:	20026294 	.word	0x20026294
   19974:	20026295 	.word	0x20026295

00019978 <logobj_interface_init>:
   19978:	2300      	movs	r3, #0
   1997a:	b510      	push	{r4, lr}
   1997c:	4808      	ldr	r0, [pc, #32]	; (199a0 <logobj_interface_init+0x28>)
   1997e:	4c09      	ldr	r4, [pc, #36]	; (199a4 <logobj_interface_init+0x2c>)
   19980:	4909      	ldr	r1, [pc, #36]	; (199a8 <logobj_interface_init+0x30>)
   19982:	4a0a      	ldr	r2, [pc, #40]	; (199ac <logobj_interface_init+0x34>)
   19984:	7023      	strb	r3, [r4, #0]
   19986:	6003      	str	r3, [r0, #0]
   19988:	700b      	strb	r3, [r1, #0]
   1998a:	6013      	str	r3, [r2, #0]
   1998c:	f004 fe2a 	bl	1e5e4 <rpc_logobj_client_init>
   19990:	b918      	cbnz	r0, 1999a <logobj_interface_init+0x22>
   19992:	2201      	movs	r2, #1
   19994:	4b06      	ldr	r3, [pc, #24]	; (199b0 <logobj_interface_init+0x38>)
   19996:	701a      	strb	r2, [r3, #0]
   19998:	bd10      	pop	{r4, pc}
   1999a:	f04f 30ff 	mov.w	r0, #4294967295
   1999e:	bd10      	pop	{r4, pc}
   199a0:	200217cc 	.word	0x200217cc
   199a4:	20026295 	.word	0x20026295
   199a8:	20026294 	.word	0x20026294
   199ac:	200217c8 	.word	0x200217c8
   199b0:	20026296 	.word	0x20026296

000199b4 <logobj_interface_open>:
   199b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   199b8:	2400      	movs	r4, #0
   199ba:	4b5b      	ldr	r3, [pc, #364]	; (19b28 <logobj_interface_open+0x174>)
   199bc:	b084      	sub	sp, #16
   199be:	781b      	ldrb	r3, [r3, #0]
   199c0:	9401      	str	r4, [sp, #4]
   199c2:	2b00      	cmp	r3, #0
   199c4:	f000 809f 	beq.w	19b06 <logobj_interface_open+0x152>
   199c8:	2866      	cmp	r0, #102	; 0x66
   199ca:	4680      	mov	r8, r0
   199cc:	f040 808f 	bne.w	19aee <logobj_interface_open+0x13a>
   199d0:	2902      	cmp	r1, #2
   199d2:	4689      	mov	r9, r1
   199d4:	f040 808b 	bne.w	19aee <logobj_interface_open+0x13a>
   199d8:	f240 2305 	movw	r3, #517	; 0x205
   199dc:	429a      	cmp	r2, r3
   199de:	4692      	mov	sl, r2
   199e0:	f040 8085 	bne.w	19aee <logobj_interface_open+0x13a>
   199e4:	4f51      	ldr	r7, [pc, #324]	; (19b2c <logobj_interface_open+0x178>)
   199e6:	683d      	ldr	r5, [r7, #0]
   199e8:	2d00      	cmp	r5, #0
   199ea:	f040 8086 	bne.w	19afa <logobj_interface_open+0x146>
   199ee:	4a50      	ldr	r2, [pc, #320]	; (19b30 <logobj_interface_open+0x17c>)
   199f0:	a801      	add	r0, sp, #4
   199f2:	f008 f807 	bl	21a04 <interface_socket_allocate>
   199f6:	9b01      	ldr	r3, [sp, #4]
   199f8:	4606      	mov	r6, r0
   199fa:	2b00      	cmp	r3, #0
   199fc:	f000 808d 	beq.w	19b1a <logobj_interface_open+0x166>
   19a00:	4629      	mov	r1, r5
   19a02:	2204      	movs	r2, #4
   19a04:	484b      	ldr	r0, [pc, #300]	; (19b34 <logobj_interface_open+0x180>)
   19a06:	603b      	str	r3, [r7, #0]
   19a08:	f00c fcf6 	bl	263f8 <memset>
   19a0c:	9c01      	ldr	r4, [sp, #4]
   19a0e:	4629      	mov	r1, r5
   19a10:	e9c4 8903 	strd	r8, r9, [r4, #12]
   19a14:	f8c4 a014 	str.w	sl, [r4, #20]
   19a18:	a802      	add	r0, sp, #8
   19a1a:	f004 fde9 	bl	1e5f0 <rpc_logobj_client_request_alloc>
   19a1e:	2800      	cmp	r0, #0
   19a20:	d142      	bne.n	19aa8 <logobj_interface_open+0xf4>
   19a22:	2201      	movs	r2, #1
   19a24:	2104      	movs	r1, #4
   19a26:	9b02      	ldr	r3, [sp, #8]
   19a28:	4d43      	ldr	r5, [pc, #268]	; (19b38 <logobj_interface_open+0x184>)
   19a2a:	7358      	strb	r0, [r3, #13]
   19a2c:	7398      	strb	r0, [r3, #14]
   19a2e:	73d8      	strb	r0, [r3, #15]
   19a30:	7258      	strb	r0, [r3, #9]
   19a32:	7298      	strb	r0, [r3, #10]
   19a34:	72d8      	strb	r0, [r3, #11]
   19a36:	7219      	strb	r1, [r3, #8]
   19a38:	702a      	strb	r2, [r5, #0]
   19a3a:	731a      	strb	r2, [r3, #12]
   19a3c:	6822      	ldr	r2, [r4, #0]
   19a3e:	4618      	mov	r0, r3
   19a40:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   19a44:	6022      	str	r2, [r4, #0]
   19a46:	f247 0101 	movw	r1, #28673	; 0x7001
   19a4a:	f004 fde9 	bl	1e620 <rpc_logobj_client_request_send>
   19a4e:	bb68      	cbnz	r0, 19aac <logobj_interface_open+0xf8>
   19a50:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19a52:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   19a56:	2900      	cmp	r1, #0
   19a58:	bf08      	it	eq
   19a5a:	f04f 31ff 	moveq.w	r1, #4294967295
   19a5e:	ab04      	add	r3, sp, #16
   19a60:	f843 1d04 	str.w	r1, [r3, #-4]!
   19a64:	4630      	mov	r0, r6
   19a66:	4611      	mov	r1, r2
   19a68:	f008 f87e 	bl	21b68 <interface_socket_wait>
   19a6c:	4604      	mov	r4, r0
   19a6e:	b310      	cbz	r0, 19ab6 <logobj_interface_open+0x102>
   19a70:	9a01      	ldr	r2, [sp, #4]
   19a72:	2e00      	cmp	r6, #0
   19a74:	6813      	ldr	r3, [r2, #0]
   19a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19a7a:	6013      	str	r3, [r2, #0]
   19a7c:	9a01      	ldr	r2, [sp, #4]
   19a7e:	6813      	ldr	r3, [r2, #0]
   19a80:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19a84:	6013      	str	r3, [r2, #0]
   19a86:	9a01      	ldr	r2, [sp, #4]
   19a88:	6813      	ldr	r3, [r2, #0]
   19a8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   19a8e:	6013      	str	r3, [r2, #0]
   19a90:	da3f      	bge.n	19b12 <logobj_interface_open+0x15e>
   19a92:	2300      	movs	r3, #0
   19a94:	4620      	mov	r0, r4
   19a96:	603b      	str	r3, [r7, #0]
   19a98:	f04f 36ff 	mov.w	r6, #4294967295
   19a9c:	f7fd f836 	bl	16b0c <bsd_os_errno_set>
   19aa0:	4630      	mov	r0, r6
   19aa2:	b004      	add	sp, #16
   19aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19aa8:	240c      	movs	r4, #12
   19aaa:	e7e1      	b.n	19a70 <logobj_interface_open+0xbc>
   19aac:	9802      	ldr	r0, [sp, #8]
   19aae:	f004 fdcd 	bl	1e64c <rpc_logobj_client_message_free>
   19ab2:	2405      	movs	r4, #5
   19ab4:	e7dc      	b.n	19a70 <logobj_interface_open+0xbc>
   19ab6:	4630      	mov	r0, r6
   19ab8:	f008 f8ca 	bl	21c50 <interface_socket_from_handle_get>
   19abc:	b120      	cbz	r0, 19ac8 <logobj_interface_open+0x114>
   19abe:	6844      	ldr	r4, [r0, #4]
   19ac0:	b114      	cbz	r4, 19ac8 <logobj_interface_open+0x114>
   19ac2:	2300      	movs	r3, #0
   19ac4:	6043      	str	r3, [r0, #4]
   19ac6:	e7d3      	b.n	19a70 <logobj_interface_open+0xbc>
   19ac8:	4630      	mov	r0, r6
   19aca:	9a01      	ldr	r2, [sp, #4]
   19acc:	6813      	ldr	r3, [r2, #0]
   19ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19ad2:	6013      	str	r3, [r2, #0]
   19ad4:	9a01      	ldr	r2, [sp, #4]
   19ad6:	6813      	ldr	r3, [r2, #0]
   19ad8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19adc:	6013      	str	r3, [r2, #0]
   19ade:	9a01      	ldr	r2, [sp, #4]
   19ae0:	6813      	ldr	r3, [r2, #0]
   19ae2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   19ae6:	6013      	str	r3, [r2, #0]
   19ae8:	b004      	add	sp, #16
   19aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19aee:	2016      	movs	r0, #22
   19af0:	f7fd f80c 	bl	16b0c <bsd_os_errno_set>
   19af4:	f04f 36ff 	mov.w	r6, #4294967295
   19af8:	e7d2      	b.n	19aa0 <logobj_interface_open+0xec>
   19afa:	2001      	movs	r0, #1
   19afc:	f7fd f806 	bl	16b0c <bsd_os_errno_set>
   19b00:	f04f 36ff 	mov.w	r6, #4294967295
   19b04:	e7cc      	b.n	19aa0 <logobj_interface_open+0xec>
   19b06:	2070      	movs	r0, #112	; 0x70
   19b08:	f7fd f800 	bl	16b0c <bsd_os_errno_set>
   19b0c:	f04f 36ff 	mov.w	r6, #4294967295
   19b10:	e7c6      	b.n	19aa0 <logobj_interface_open+0xec>
   19b12:	4630      	mov	r0, r6
   19b14:	f007 ffda 	bl	21acc <interface_socket_free>
   19b18:	e7bb      	b.n	19a92 <logobj_interface_open+0xde>
   19b1a:	2018      	movs	r0, #24
   19b1c:	f7fc fff6 	bl	16b0c <bsd_os_errno_set>
   19b20:	f04f 36ff 	mov.w	r6, #4294967295
   19b24:	e7bc      	b.n	19aa0 <logobj_interface_open+0xec>
   19b26:	bf00      	nop
   19b28:	20026296 	.word	0x20026296
   19b2c:	200217cc 	.word	0x200217cc
   19b30:	00019865 	.word	0x00019865
   19b34:	200217c8 	.word	0x200217c8
   19b38:	20026294 	.word	0x20026294

00019b3c <logobj_interface_read>:
   19b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19b40:	b087      	sub	sp, #28
   19b42:	2900      	cmp	r1, #0
   19b44:	d06b      	beq.n	19c1e <logobj_interface_read+0xe2>
   19b46:	2a00      	cmp	r2, #0
   19b48:	4617      	mov	r7, r2
   19b4a:	dd68      	ble.n	19c1e <logobj_interface_read+0xe2>
   19b4c:	461d      	mov	r5, r3
   19b4e:	4680      	mov	r8, r0
   19b50:	460e      	mov	r6, r1
   19b52:	f008 f87d 	bl	21c50 <interface_socket_from_handle_get>
   19b56:	4604      	mov	r4, r0
   19b58:	2800      	cmp	r0, #0
   19b5a:	d066      	beq.n	19c2a <logobj_interface_read+0xee>
   19b5c:	bb4d      	cbnz	r5, 19bb2 <logobj_interface_read+0x76>
   19b5e:	69e0      	ldr	r0, [r4, #28]
   19b60:	07aa      	lsls	r2, r5, #30
   19b62:	6803      	ldr	r3, [r0, #0]
   19b64:	68db      	ldr	r3, [r3, #12]
   19b66:	d52d      	bpl.n	19bc4 <logobj_interface_read+0x88>
   19b68:	4798      	blx	r3
   19b6a:	3001      	adds	r0, #1
   19b6c:	d047      	beq.n	19bfe <logobj_interface_read+0xc2>
   19b6e:	6823      	ldr	r3, [r4, #0]
   19b70:	69e0      	ldr	r0, [r4, #28]
   19b72:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   19b76:	d044      	beq.n	19c02 <logobj_interface_read+0xc6>
   19b78:	2100      	movs	r1, #0
   19b7a:	6823      	ldr	r3, [r4, #0]
   19b7c:	462a      	mov	r2, r5
   19b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   19b82:	6023      	str	r3, [r4, #0]
   19b84:	e9cd 1104 	strd	r1, r1, [sp, #16]
   19b88:	e9cd 6702 	strd	r6, r7, [sp, #8]
   19b8c:	6803      	ldr	r3, [r0, #0]
   19b8e:	a902      	add	r1, sp, #8
   19b90:	689b      	ldr	r3, [r3, #8]
   19b92:	4798      	blx	r3
   19b94:	4605      	mov	r5, r0
   19b96:	69e0      	ldr	r0, [r4, #28]
   19b98:	6803      	ldr	r3, [r0, #0]
   19b9a:	68db      	ldr	r3, [r3, #12]
   19b9c:	4798      	blx	r3
   19b9e:	3001      	adds	r0, #1
   19ba0:	d003      	beq.n	19baa <logobj_interface_read+0x6e>
   19ba2:	6823      	ldr	r3, [r4, #0]
   19ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19ba8:	6023      	str	r3, [r4, #0]
   19baa:	4628      	mov	r0, r5
   19bac:	b007      	add	sp, #28
   19bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19bb2:	f015 0f2a 	tst.w	r5, #42	; 0x2a
   19bb6:	d1d2      	bne.n	19b5e <logobj_interface_read+0x22>
   19bb8:	202d      	movs	r0, #45	; 0x2d
   19bba:	f7fc ffa7 	bl	16b0c <bsd_os_errno_set>
   19bbe:	f04f 35ff 	mov.w	r5, #4294967295
   19bc2:	e7f2      	b.n	19baa <logobj_interface_read+0x6e>
   19bc4:	6822      	ldr	r2, [r4, #0]
   19bc6:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   19bca:	d1cd      	bne.n	19b68 <logobj_interface_read+0x2c>
   19bcc:	4798      	blx	r3
   19bce:	1c43      	adds	r3, r0, #1
   19bd0:	d1cd      	bne.n	19b6e <logobj_interface_read+0x32>
   19bd2:	6a22      	ldr	r2, [r4, #32]
   19bd4:	ab06      	add	r3, sp, #24
   19bd6:	2a00      	cmp	r2, #0
   19bd8:	bf18      	it	ne
   19bda:	4610      	movne	r0, r2
   19bdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19be0:	f843 0d14 	str.w	r0, [r3, #-20]!
   19be4:	4611      	mov	r1, r2
   19be6:	4640      	mov	r0, r8
   19be8:	f007 ffbe 	bl	21b68 <interface_socket_wait>
   19bec:	b158      	cbz	r0, 19c06 <logobj_interface_read+0xca>
   19bee:	f04f 35ff 	mov.w	r5, #4294967295
   19bf2:	f7fc ff8b 	bl	16b0c <bsd_os_errno_set>
   19bf6:	4628      	mov	r0, r5
   19bf8:	b007      	add	sp, #28
   19bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19bfe:	2023      	movs	r0, #35	; 0x23
   19c00:	e7f5      	b.n	19bee <logobj_interface_read+0xb2>
   19c02:	461d      	mov	r5, r3
   19c04:	e7c8      	b.n	19b98 <logobj_interface_read+0x5c>
   19c06:	4640      	mov	r0, r8
   19c08:	f008 f822 	bl	21c50 <interface_socket_from_handle_get>
   19c0c:	4603      	mov	r3, r0
   19c0e:	2800      	cmp	r0, #0
   19c10:	d0ad      	beq.n	19b6e <logobj_interface_read+0x32>
   19c12:	6840      	ldr	r0, [r0, #4]
   19c14:	2800      	cmp	r0, #0
   19c16:	d0aa      	beq.n	19b6e <logobj_interface_read+0x32>
   19c18:	f8c3 9004 	str.w	r9, [r3, #4]
   19c1c:	e7e7      	b.n	19bee <logobj_interface_read+0xb2>
   19c1e:	2016      	movs	r0, #22
   19c20:	f7fc ff74 	bl	16b0c <bsd_os_errno_set>
   19c24:	f04f 35ff 	mov.w	r5, #4294967295
   19c28:	e7bf      	b.n	19baa <logobj_interface_read+0x6e>
   19c2a:	2009      	movs	r0, #9
   19c2c:	f7fc ff6e 	bl	16b0c <bsd_os_errno_set>
   19c30:	f04f 35ff 	mov.w	r5, #4294967295
   19c34:	e7b9      	b.n	19baa <logobj_interface_read+0x6e>
   19c36:	bf00      	nop

00019c38 <logobj_interface_write>:
   19c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c3c:	b082      	sub	sp, #8
   19c3e:	2900      	cmp	r1, #0
   19c40:	d06b      	beq.n	19d1a <logobj_interface_write+0xe2>
   19c42:	2a04      	cmp	r2, #4
   19c44:	d169      	bne.n	19d1a <logobj_interface_write+0xe2>
   19c46:	461f      	mov	r7, r3
   19c48:	4606      	mov	r6, r0
   19c4a:	460d      	mov	r5, r1
   19c4c:	f008 f800 	bl	21c50 <interface_socket_from_handle_get>
   19c50:	4604      	mov	r4, r0
   19c52:	2800      	cmp	r0, #0
   19c54:	d074      	beq.n	19d40 <logobj_interface_write+0x108>
   19c56:	b1e7      	cbz	r7, 19c92 <logobj_interface_write+0x5a>
   19c58:	07b8      	lsls	r0, r7, #30
   19c5a:	d56b      	bpl.n	19d34 <logobj_interface_write+0xfc>
   19c5c:	6823      	ldr	r3, [r4, #0]
   19c5e:	039b      	lsls	r3, r3, #14
   19c60:	d564      	bpl.n	19d2c <logobj_interface_write+0xf4>
   19c62:	2700      	movs	r7, #0
   19c64:	6823      	ldr	r3, [r4, #0]
   19c66:	2100      	movs	r1, #0
   19c68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   19c6c:	6023      	str	r3, [r4, #0]
   19c6e:	4668      	mov	r0, sp
   19c70:	f8d5 8000 	ldr.w	r8, [r5]
   19c74:	f004 fcbc 	bl	1e5f0 <rpc_logobj_client_request_alloc>
   19c78:	b198      	cbz	r0, 19ca2 <logobj_interface_write+0x6a>
   19c7a:	200c      	movs	r0, #12
   19c7c:	6823      	ldr	r3, [r4, #0]
   19c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19c82:	6023      	str	r3, [r4, #0]
   19c84:	f7fc ff42 	bl	16b0c <bsd_os_errno_set>
   19c88:	f04f 30ff 	mov.w	r0, #4294967295
   19c8c:	b002      	add	sp, #8
   19c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19c92:	6803      	ldr	r3, [r0, #0]
   19c94:	00d9      	lsls	r1, r3, #3
   19c96:	d4e1      	bmi.n	19c5c <logobj_interface_write+0x24>
   19c98:	6803      	ldr	r3, [r0, #0]
   19c9a:	039a      	lsls	r2, r3, #14
   19c9c:	d548      	bpl.n	19d30 <logobj_interface_write+0xf8>
   19c9e:	2701      	movs	r7, #1
   19ca0:	e7e0      	b.n	19c64 <logobj_interface_write+0x2c>
   19ca2:	2504      	movs	r5, #4
   19ca4:	9b00      	ldr	r3, [sp, #0]
   19ca6:	f247 0103 	movw	r1, #28675	; 0x7003
   19caa:	f8c3 800c 	str.w	r8, [r3, #12]
   19cae:	7258      	strb	r0, [r3, #9]
   19cb0:	7298      	strb	r0, [r3, #10]
   19cb2:	72d8      	strb	r0, [r3, #11]
   19cb4:	721d      	strb	r5, [r3, #8]
   19cb6:	4618      	mov	r0, r3
   19cb8:	f004 fcb2 	bl	1e620 <rpc_logobj_client_request_send>
   19cbc:	4680      	mov	r8, r0
   19cbe:	bb18      	cbnz	r0, 19d08 <logobj_interface_write+0xd0>
   19cc0:	b1d7      	cbz	r7, 19cf8 <logobj_interface_write+0xc0>
   19cc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19cc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19cc8:	2900      	cmp	r1, #0
   19cca:	bf08      	it	eq
   19ccc:	f04f 31ff 	moveq.w	r1, #4294967295
   19cd0:	ab02      	add	r3, sp, #8
   19cd2:	f843 1d04 	str.w	r1, [r3, #-4]!
   19cd6:	4630      	mov	r0, r6
   19cd8:	4611      	mov	r1, r2
   19cda:	f007 ff45 	bl	21b68 <interface_socket_wait>
   19cde:	b120      	cbz	r0, 19cea <logobj_interface_write+0xb2>
   19ce0:	6823      	ldr	r3, [r4, #0]
   19ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19ce6:	6023      	str	r3, [r4, #0]
   19ce8:	e7cc      	b.n	19c84 <logobj_interface_write+0x4c>
   19cea:	4630      	mov	r0, r6
   19cec:	f007 ffb0 	bl	21c50 <interface_socket_from_handle_get>
   19cf0:	4603      	mov	r3, r0
   19cf2:	b108      	cbz	r0, 19cf8 <logobj_interface_write+0xc0>
   19cf4:	6840      	ldr	r0, [r0, #4]
   19cf6:	b9b0      	cbnz	r0, 19d26 <logobj_interface_write+0xee>
   19cf8:	4628      	mov	r0, r5
   19cfa:	6823      	ldr	r3, [r4, #0]
   19cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19d00:	6023      	str	r3, [r4, #0]
   19d02:	b002      	add	sp, #8
   19d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19d08:	9800      	ldr	r0, [sp, #0]
   19d0a:	f004 fc9f 	bl	1e64c <rpc_logobj_client_message_free>
   19d0e:	6823      	ldr	r3, [r4, #0]
   19d10:	2005      	movs	r0, #5
   19d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19d16:	6023      	str	r3, [r4, #0]
   19d18:	e7b4      	b.n	19c84 <logobj_interface_write+0x4c>
   19d1a:	2016      	movs	r0, #22
   19d1c:	f7fc fef6 	bl	16b0c <bsd_os_errno_set>
   19d20:	f04f 30ff 	mov.w	r0, #4294967295
   19d24:	e7b2      	b.n	19c8c <logobj_interface_write+0x54>
   19d26:	f8c3 8004 	str.w	r8, [r3, #4]
   19d2a:	e7d9      	b.n	19ce0 <logobj_interface_write+0xa8>
   19d2c:	2073      	movs	r0, #115	; 0x73
   19d2e:	e7a9      	b.n	19c84 <logobj_interface_write+0x4c>
   19d30:	2009      	movs	r0, #9
   19d32:	e7a7      	b.n	19c84 <logobj_interface_write+0x4c>
   19d34:	202d      	movs	r0, #45	; 0x2d
   19d36:	f7fc fee9 	bl	16b0c <bsd_os_errno_set>
   19d3a:	f04f 30ff 	mov.w	r0, #4294967295
   19d3e:	e7a5      	b.n	19c8c <logobj_interface_write+0x54>
   19d40:	2009      	movs	r0, #9
   19d42:	f7fc fee3 	bl	16b0c <bsd_os_errno_set>
   19d46:	f04f 30ff 	mov.w	r0, #4294967295
   19d4a:	e79f      	b.n	19c8c <logobj_interface_write+0x54>

00019d4c <logobj_interface_setopt>:
   19d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19d4e:	2901      	cmp	r1, #1
   19d50:	b085      	sub	sp, #20
   19d52:	d06d      	beq.n	19e30 <logobj_interface_setopt+0xe4>
   19d54:	461e      	mov	r6, r3
   19d56:	f240 2305 	movw	r3, #517	; 0x205
   19d5a:	4299      	cmp	r1, r3
   19d5c:	f040 80a0 	bne.w	19ea0 <logobj_interface_setopt+0x154>
   19d60:	4607      	mov	r7, r0
   19d62:	4615      	mov	r5, r2
   19d64:	f007 ff74 	bl	21c50 <interface_socket_from_handle_get>
   19d68:	4604      	mov	r4, r0
   19d6a:	2800      	cmp	r0, #0
   19d6c:	f000 80c3 	beq.w	19ef6 <logobj_interface_setopt+0x1aa>
   19d70:	2d01      	cmp	r5, #1
   19d72:	d019      	beq.n	19da8 <logobj_interface_setopt+0x5c>
   19d74:	2d02      	cmp	r5, #2
   19d76:	d010      	beq.n	19d9a <logobj_interface_setopt+0x4e>
   19d78:	252a      	movs	r5, #42	; 0x2a
   19d7a:	6803      	ldr	r3, [r0, #0]
   19d7c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19d80:	6023      	str	r3, [r4, #0]
   19d82:	6823      	ldr	r3, [r4, #0]
   19d84:	4628      	mov	r0, r5
   19d86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   19d8a:	6023      	str	r3, [r4, #0]
   19d8c:	f7fc febe 	bl	16b0c <bsd_os_errno_set>
   19d90:	f04f 35ff 	mov.w	r5, #4294967295
   19d94:	4628      	mov	r0, r5
   19d96:	b005      	add	sp, #20
   19d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19d9a:	b116      	cbz	r6, 19da2 <logobj_interface_setopt+0x56>
   19d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19d9e:	2b01      	cmp	r3, #1
   19da0:	d04e      	beq.n	19e40 <logobj_interface_setopt+0xf4>
   19da2:	6823      	ldr	r3, [r4, #0]
   19da4:	2516      	movs	r5, #22
   19da6:	e7e9      	b.n	19d7c <logobj_interface_setopt+0x30>
   19da8:	2e00      	cmp	r6, #0
   19daa:	d0fa      	beq.n	19da2 <logobj_interface_setopt+0x56>
   19dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19dae:	2b04      	cmp	r3, #4
   19db0:	d1f7      	bne.n	19da2 <logobj_interface_setopt+0x56>
   19db2:	2100      	movs	r1, #0
   19db4:	a803      	add	r0, sp, #12
   19db6:	f004 fc1b 	bl	1e5f0 <rpc_logobj_client_request_alloc>
   19dba:	4605      	mov	r5, r0
   19dbc:	2800      	cmp	r0, #0
   19dbe:	d175      	bne.n	19eac <logobj_interface_setopt+0x160>
   19dc0:	9803      	ldr	r0, [sp, #12]
   19dc2:	2208      	movs	r2, #8
   19dc4:	4629      	mov	r1, r5
   19dc6:	300c      	adds	r0, #12
   19dc8:	f00c fb16 	bl	263f8 <memset>
   19dcc:	9803      	ldr	r0, [sp, #12]
   19dce:	4631      	mov	r1, r6
   19dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19dd2:	300c      	adds	r0, #12
   19dd4:	f7f2 feba 	bl	cb4c <memcpy>
   19dd8:	2308      	movs	r3, #8
   19dda:	9803      	ldr	r0, [sp, #12]
   19ddc:	f247 0102 	movw	r1, #28674	; 0x7002
   19de0:	7203      	strb	r3, [r0, #8]
   19de2:	7245      	strb	r5, [r0, #9]
   19de4:	7285      	strb	r5, [r0, #10]
   19de6:	72c5      	strb	r5, [r0, #11]
   19de8:	6823      	ldr	r3, [r4, #0]
   19dea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   19dee:	6023      	str	r3, [r4, #0]
   19df0:	f004 fc16 	bl	1e620 <rpc_logobj_client_request_send>
   19df4:	2800      	cmp	r0, #0
   19df6:	d178      	bne.n	19eea <logobj_interface_setopt+0x19e>
   19df8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19dfa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   19dfe:	2900      	cmp	r1, #0
   19e00:	bf08      	it	eq
   19e02:	f04f 31ff 	moveq.w	r1, #4294967295
   19e06:	ab04      	add	r3, sp, #16
   19e08:	f843 1d08 	str.w	r1, [r3, #-8]!
   19e0c:	4638      	mov	r0, r7
   19e0e:	4611      	mov	r1, r2
   19e10:	f007 feaa 	bl	21b68 <interface_socket_wait>
   19e14:	4605      	mov	r5, r0
   19e16:	2800      	cmp	r0, #0
   19e18:	d140      	bne.n	19e9c <logobj_interface_setopt+0x150>
   19e1a:	4638      	mov	r0, r7
   19e1c:	f007 ff18 	bl	21c50 <interface_socket_from_handle_get>
   19e20:	2800      	cmp	r0, #0
   19e22:	d04e      	beq.n	19ec2 <logobj_interface_setopt+0x176>
   19e24:	6843      	ldr	r3, [r0, #4]
   19e26:	2b00      	cmp	r3, #0
   19e28:	d04b      	beq.n	19ec2 <logobj_interface_setopt+0x176>
   19e2a:	6045      	str	r5, [r0, #4]
   19e2c:	461d      	mov	r5, r3
   19e2e:	e035      	b.n	19e9c <logobj_interface_setopt+0x150>
   19e30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   19e32:	9400      	str	r4, [sp, #0]
   19e34:	f007 ff34 	bl	21ca0 <interface_socket_setopt>
   19e38:	4605      	mov	r5, r0
   19e3a:	4628      	mov	r0, r5
   19e3c:	b005      	add	sp, #20
   19e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e40:	2100      	movs	r1, #0
   19e42:	a802      	add	r0, sp, #8
   19e44:	7835      	ldrb	r5, [r6, #0]
   19e46:	f004 fbd3 	bl	1e5f0 <rpc_logobj_client_request_alloc>
   19e4a:	bb78      	cbnz	r0, 19eac <logobj_interface_setopt+0x160>
   19e4c:	2d01      	cmp	r5, #1
   19e4e:	bf08      	it	eq
   19e50:	4b2c      	ldreq	r3, [pc, #176]	; (19f04 <logobj_interface_setopt+0x1b8>)
   19e52:	f04f 0204 	mov.w	r2, #4
   19e56:	bf08      	it	eq
   19e58:	701d      	strbeq	r5, [r3, #0]
   19e5a:	2300      	movs	r3, #0
   19e5c:	9802      	ldr	r0, [sp, #8]
   19e5e:	f247 0101 	movw	r1, #28673	; 0x7001
   19e62:	7243      	strb	r3, [r0, #9]
   19e64:	60c5      	str	r5, [r0, #12]
   19e66:	7283      	strb	r3, [r0, #10]
   19e68:	72c3      	strb	r3, [r0, #11]
   19e6a:	7202      	strb	r2, [r0, #8]
   19e6c:	6823      	ldr	r3, [r4, #0]
   19e6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   19e72:	6023      	str	r3, [r4, #0]
   19e74:	f004 fbd4 	bl	1e620 <rpc_logobj_client_request_send>
   19e78:	4606      	mov	r6, r0
   19e7a:	bb80      	cbnz	r0, 19ede <logobj_interface_setopt+0x192>
   19e7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19e7e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   19e82:	2900      	cmp	r1, #0
   19e84:	bf08      	it	eq
   19e86:	f04f 31ff 	moveq.w	r1, #4294967295
   19e8a:	ab04      	add	r3, sp, #16
   19e8c:	f843 1d04 	str.w	r1, [r3, #-4]!
   19e90:	4638      	mov	r0, r7
   19e92:	4611      	mov	r1, r2
   19e94:	f007 fe68 	bl	21b68 <interface_socket_wait>
   19e98:	4605      	mov	r5, r0
   19e9a:	b150      	cbz	r0, 19eb2 <logobj_interface_setopt+0x166>
   19e9c:	6823      	ldr	r3, [r4, #0]
   19e9e:	e76d      	b.n	19d7c <logobj_interface_setopt+0x30>
   19ea0:	202a      	movs	r0, #42	; 0x2a
   19ea2:	f7fc fe33 	bl	16b0c <bsd_os_errno_set>
   19ea6:	f04f 35ff 	mov.w	r5, #4294967295
   19eaa:	e773      	b.n	19d94 <logobj_interface_setopt+0x48>
   19eac:	6823      	ldr	r3, [r4, #0]
   19eae:	250c      	movs	r5, #12
   19eb0:	e764      	b.n	19d7c <logobj_interface_setopt+0x30>
   19eb2:	4638      	mov	r0, r7
   19eb4:	f007 fecc 	bl	21c50 <interface_socket_from_handle_get>
   19eb8:	b140      	cbz	r0, 19ecc <logobj_interface_setopt+0x180>
   19eba:	6845      	ldr	r5, [r0, #4]
   19ebc:	b135      	cbz	r5, 19ecc <logobj_interface_setopt+0x180>
   19ebe:	6046      	str	r6, [r0, #4]
   19ec0:	e7ec      	b.n	19e9c <logobj_interface_setopt+0x150>
   19ec2:	4631      	mov	r1, r6
   19ec4:	2204      	movs	r2, #4
   19ec6:	4810      	ldr	r0, [pc, #64]	; (19f08 <logobj_interface_setopt+0x1bc>)
   19ec8:	f7f2 fe40 	bl	cb4c <memcpy>
   19ecc:	6823      	ldr	r3, [r4, #0]
   19ece:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   19ed2:	6023      	str	r3, [r4, #0]
   19ed4:	6823      	ldr	r3, [r4, #0]
   19ed6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   19eda:	6023      	str	r3, [r4, #0]
   19edc:	e75a      	b.n	19d94 <logobj_interface_setopt+0x48>
   19ede:	9802      	ldr	r0, [sp, #8]
   19ee0:	f004 fbb4 	bl	1e64c <rpc_logobj_client_message_free>
   19ee4:	2505      	movs	r5, #5
   19ee6:	6823      	ldr	r3, [r4, #0]
   19ee8:	e748      	b.n	19d7c <logobj_interface_setopt+0x30>
   19eea:	9803      	ldr	r0, [sp, #12]
   19eec:	f004 fbae 	bl	1e64c <rpc_logobj_client_message_free>
   19ef0:	2505      	movs	r5, #5
   19ef2:	6823      	ldr	r3, [r4, #0]
   19ef4:	e742      	b.n	19d7c <logobj_interface_setopt+0x30>
   19ef6:	2009      	movs	r0, #9
   19ef8:	f7fc fe08 	bl	16b0c <bsd_os_errno_set>
   19efc:	f04f 35ff 	mov.w	r5, #4294967295
   19f00:	e748      	b.n	19d94 <logobj_interface_setopt+0x48>
   19f02:	bf00      	nop
   19f04:	20026294 	.word	0x20026294
   19f08:	200217c8 	.word	0x200217c8

00019f0c <logobj_interface_getopt>:
   19f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f0e:	2901      	cmp	r1, #1
   19f10:	b083      	sub	sp, #12
   19f12:	9e08      	ldr	r6, [sp, #32]
   19f14:	d030      	beq.n	19f78 <logobj_interface_getopt+0x6c>
   19f16:	461f      	mov	r7, r3
   19f18:	f240 2305 	movw	r3, #517	; 0x205
   19f1c:	4299      	cmp	r1, r3
   19f1e:	d134      	bne.n	19f8a <logobj_interface_getopt+0x7e>
   19f20:	4615      	mov	r5, r2
   19f22:	f007 fe95 	bl	21c50 <interface_socket_from_handle_get>
   19f26:	2800      	cmp	r0, #0
   19f28:	d037      	beq.n	19f9a <logobj_interface_getopt+0x8e>
   19f2a:	2d01      	cmp	r5, #1
   19f2c:	d015      	beq.n	19f5a <logobj_interface_getopt+0x4e>
   19f2e:	2d02      	cmp	r5, #2
   19f30:	d10b      	bne.n	19f4a <logobj_interface_getopt+0x3e>
   19f32:	b387      	cbz	r7, 19f96 <logobj_interface_getopt+0x8a>
   19f34:	6833      	ldr	r3, [r6, #0]
   19f36:	b373      	cbz	r3, 19f96 <logobj_interface_getopt+0x8a>
   19f38:	2300      	movs	r3, #0
   19f3a:	2201      	movs	r2, #1
   19f3c:	4618      	mov	r0, r3
   19f3e:	491a      	ldr	r1, [pc, #104]	; (19fa8 <logobj_interface_getopt+0x9c>)
   19f40:	7809      	ldrb	r1, [r1, #0]
   19f42:	7039      	strb	r1, [r7, #0]
   19f44:	6032      	str	r2, [r6, #0]
   19f46:	b003      	add	sp, #12
   19f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f4a:	2009      	movs	r0, #9
   19f4c:	f7fc fdde 	bl	16b0c <bsd_os_errno_set>
   19f50:	f04f 33ff 	mov.w	r3, #4294967295
   19f54:	4618      	mov	r0, r3
   19f56:	b003      	add	sp, #12
   19f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f5a:	b1e7      	cbz	r7, 19f96 <logobj_interface_getopt+0x8a>
   19f5c:	6833      	ldr	r3, [r6, #0]
   19f5e:	2b03      	cmp	r3, #3
   19f60:	d919      	bls.n	19f96 <logobj_interface_getopt+0x8a>
   19f62:	4638      	mov	r0, r7
   19f64:	2204      	movs	r2, #4
   19f66:	4911      	ldr	r1, [pc, #68]	; (19fac <logobj_interface_getopt+0xa0>)
   19f68:	f7f2 fdf0 	bl	cb4c <memcpy>
   19f6c:	2300      	movs	r3, #0
   19f6e:	2204      	movs	r2, #4
   19f70:	4618      	mov	r0, r3
   19f72:	6032      	str	r2, [r6, #0]
   19f74:	b003      	add	sp, #12
   19f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f78:	9600      	str	r6, [sp, #0]
   19f7a:	f007 fed7 	bl	21d2c <interface_socket_getopt>
   19f7e:	4603      	mov	r3, r0
   19f80:	2800      	cmp	r0, #0
   19f82:	d1e3      	bne.n	19f4c <logobj_interface_getopt+0x40>
   19f84:	4618      	mov	r0, r3
   19f86:	b003      	add	sp, #12
   19f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f8a:	202a      	movs	r0, #42	; 0x2a
   19f8c:	f7fc fdbe 	bl	16b0c <bsd_os_errno_set>
   19f90:	f04f 33ff 	mov.w	r3, #4294967295
   19f94:	e7de      	b.n	19f54 <logobj_interface_getopt+0x48>
   19f96:	2016      	movs	r0, #22
   19f98:	e7d8      	b.n	19f4c <logobj_interface_getopt+0x40>
   19f9a:	2009      	movs	r0, #9
   19f9c:	f7fc fdb6 	bl	16b0c <bsd_os_errno_set>
   19fa0:	f04f 33ff 	mov.w	r3, #4294967295
   19fa4:	e7d6      	b.n	19f54 <logobj_interface_getopt+0x48>
   19fa6:	bf00      	nop
   19fa8:	20026295 	.word	0x20026295
   19fac:	200217c8 	.word	0x200217c8

00019fb0 <logobj_interface_close>:
   19fb0:	b510      	push	{r4, lr}
   19fb2:	4604      	mov	r4, r0
   19fb4:	f007 fe4c 	bl	21c50 <interface_socket_from_handle_get>
   19fb8:	b138      	cbz	r0, 19fca <logobj_interface_close+0x1a>
   19fba:	4620      	mov	r0, r4
   19fbc:	f007 fd86 	bl	21acc <interface_socket_free>
   19fc0:	2300      	movs	r3, #0
   19fc2:	4a05      	ldr	r2, [pc, #20]	; (19fd8 <logobj_interface_close+0x28>)
   19fc4:	4618      	mov	r0, r3
   19fc6:	6013      	str	r3, [r2, #0]
   19fc8:	bd10      	pop	{r4, pc}
   19fca:	2009      	movs	r0, #9
   19fcc:	f7fc fd9e 	bl	16b0c <bsd_os_errno_set>
   19fd0:	f04f 30ff 	mov.w	r0, #4294967295
   19fd4:	bd10      	pop	{r4, pc}
   19fd6:	bf00      	nop
   19fd8:	200217cc 	.word	0x200217cc

00019fdc <rpc_transport_send>:
   19fdc:	f000 bed8 	b.w	1ad90 <rpc_transport_ipc_send>

00019fe0 <rpc_transport_rpc_alloc>:
   19fe0:	f000 bf58 	b.w	1ae94 <rpc_transport_ipc_tx_rpc_data_alloc>

00019fe4 <rpc_transport_data_alloc>:
   19fe4:	f000 bfbe 	b.w	1af64 <rpc_transport_ipc_tx_data_alloc>

00019fe8 <rpc_transport_rpc_free>:
   19fe8:	f000 bdb6 	b.w	1ab58 <rpc_transport_ipc_msg_free>

00019fec <rpc_transport_data_free>:
   19fec:	f000 ba64 	b.w	1a4b8 <rpc_transport_ipc_data_free>

00019ff0 <ipc_trace_init>:
   19ff0:	4b01      	ldr	r3, [pc, #4]	; (19ff8 <ipc_trace_init+0x8>)
   19ff2:	6018      	str	r0, [r3, #0]
   19ff4:	4770      	bx	lr
   19ff6:	bf00      	nop
   19ff8:	200217dc 	.word	0x200217dc

00019ffc <bsd_os_trace_irq_handler>:
   19ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
   19ffe:	4b6e      	ldr	r3, [pc, #440]	; (1a1b8 <bsd_os_trace_irq_handler+0x1bc>)
   1a000:	b083      	sub	sp, #12
   1a002:	781b      	ldrb	r3, [r3, #0]
   1a004:	2b00      	cmp	r3, #0
   1a006:	f000 80d3 	beq.w	1a1b0 <bsd_os_trace_irq_handler+0x1b4>
   1a00a:	4b6c      	ldr	r3, [pc, #432]	; (1a1bc <bsd_os_trace_irq_handler+0x1c0>)
   1a00c:	681c      	ldr	r4, [r3, #0]
   1a00e:	b124      	cbz	r4, 1a01a <bsd_os_trace_irq_handler+0x1e>
   1a010:	68a3      	ldr	r3, [r4, #8]
   1a012:	6862      	ldr	r2, [r4, #4]
   1a014:	4293      	cmp	r3, r2
   1a016:	f040 808c 	bne.w	1a132 <bsd_os_trace_irq_handler+0x136>
   1a01a:	4b69      	ldr	r3, [pc, #420]	; (1a1c0 <bsd_os_trace_irq_handler+0x1c4>)
   1a01c:	681c      	ldr	r4, [r3, #0]
   1a01e:	b11c      	cbz	r4, 1a028 <bsd_os_trace_irq_handler+0x2c>
   1a020:	68a3      	ldr	r3, [r4, #8]
   1a022:	6862      	ldr	r2, [r4, #4]
   1a024:	4293      	cmp	r3, r2
   1a026:	d146      	bne.n	1a0b6 <bsd_os_trace_irq_handler+0xba>
   1a028:	4b66      	ldr	r3, [pc, #408]	; (1a1c4 <bsd_os_trace_irq_handler+0x1c8>)
   1a02a:	681c      	ldr	r4, [r3, #0]
   1a02c:	b11c      	cbz	r4, 1a036 <bsd_os_trace_irq_handler+0x3a>
   1a02e:	68a3      	ldr	r3, [r4, #8]
   1a030:	6862      	ldr	r2, [r4, #4]
   1a032:	4293      	cmp	r3, r2
   1a034:	d101      	bne.n	1a03a <bsd_os_trace_irq_handler+0x3e>
   1a036:	b003      	add	sp, #12
   1a038:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a03a:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a03e:	f8ad 2000 	strh.w	r2, [sp]
   1a042:	7822      	ldrb	r2, [r4, #0]
   1a044:	466e      	mov	r6, sp
   1a046:	f88d 2004 	strb.w	r2, [sp, #4]
   1a04a:	6862      	ldr	r2, [r4, #4]
   1a04c:	2105      	movs	r1, #5
   1a04e:	4293      	cmp	r3, r2
   1a050:	bf2a      	itet	cs
   1a052:	6927      	ldrcs	r7, [r4, #16]
   1a054:	1ad7      	subcc	r7, r2, r3
   1a056:	1aff      	subcs	r7, r7, r3
   1a058:	4293      	cmp	r3, r2
   1a05a:	bf94      	ite	ls
   1a05c:	2500      	movls	r5, #0
   1a05e:	68e5      	ldrhi	r5, [r4, #12]
   1a060:	b2bf      	uxth	r7, r7
   1a062:	bf88      	it	hi
   1a064:	1b52      	subhi	r2, r2, r5
   1a066:	4630      	mov	r0, r6
   1a068:	bf88      	it	hi
   1a06a:	b295      	uxthhi	r5, r2
   1a06c:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a070:	f7fc ff2e 	bl	16ed0 <bsd_os_trace_put>
   1a074:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a078:	68a0      	ldr	r0, [r4, #8]
   1a07a:	f7fc ff29 	bl	16ed0 <bsd_os_trace_put>
   1a07e:	68a3      	ldr	r3, [r4, #8]
   1a080:	6922      	ldr	r2, [r4, #16]
   1a082:	441f      	add	r7, r3
   1a084:	4297      	cmp	r7, r2
   1a086:	bf08      	it	eq
   1a088:	68e3      	ldreq	r3, [r4, #12]
   1a08a:	60a7      	str	r7, [r4, #8]
   1a08c:	bf08      	it	eq
   1a08e:	60a3      	streq	r3, [r4, #8]
   1a090:	2d00      	cmp	r5, #0
   1a092:	d0d0      	beq.n	1a036 <bsd_os_trace_irq_handler+0x3a>
   1a094:	2105      	movs	r1, #5
   1a096:	4630      	mov	r0, r6
   1a098:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a09c:	f7fc ff18 	bl	16ed0 <bsd_os_trace_put>
   1a0a0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a0a4:	68e0      	ldr	r0, [r4, #12]
   1a0a6:	f7fc ff13 	bl	16ed0 <bsd_os_trace_put>
   1a0aa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a0ae:	68e3      	ldr	r3, [r4, #12]
   1a0b0:	4413      	add	r3, r2
   1a0b2:	60a3      	str	r3, [r4, #8]
   1a0b4:	e7bf      	b.n	1a036 <bsd_os_trace_irq_handler+0x3a>
   1a0b6:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a0ba:	f8ad 2000 	strh.w	r2, [sp]
   1a0be:	7822      	ldrb	r2, [r4, #0]
   1a0c0:	466e      	mov	r6, sp
   1a0c2:	f88d 2004 	strb.w	r2, [sp, #4]
   1a0c6:	6862      	ldr	r2, [r4, #4]
   1a0c8:	2105      	movs	r1, #5
   1a0ca:	4293      	cmp	r3, r2
   1a0cc:	bf2a      	itet	cs
   1a0ce:	6927      	ldrcs	r7, [r4, #16]
   1a0d0:	1ad7      	subcc	r7, r2, r3
   1a0d2:	1aff      	subcs	r7, r7, r3
   1a0d4:	4293      	cmp	r3, r2
   1a0d6:	bf94      	ite	ls
   1a0d8:	2500      	movls	r5, #0
   1a0da:	68e5      	ldrhi	r5, [r4, #12]
   1a0dc:	b2bf      	uxth	r7, r7
   1a0de:	bf88      	it	hi
   1a0e0:	1b52      	subhi	r2, r2, r5
   1a0e2:	4630      	mov	r0, r6
   1a0e4:	bf88      	it	hi
   1a0e6:	b295      	uxthhi	r5, r2
   1a0e8:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a0ec:	f7fc fef0 	bl	16ed0 <bsd_os_trace_put>
   1a0f0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a0f4:	68a0      	ldr	r0, [r4, #8]
   1a0f6:	f7fc feeb 	bl	16ed0 <bsd_os_trace_put>
   1a0fa:	68a3      	ldr	r3, [r4, #8]
   1a0fc:	6922      	ldr	r2, [r4, #16]
   1a0fe:	441f      	add	r7, r3
   1a100:	4297      	cmp	r7, r2
   1a102:	bf08      	it	eq
   1a104:	68e3      	ldreq	r3, [r4, #12]
   1a106:	60a7      	str	r7, [r4, #8]
   1a108:	bf08      	it	eq
   1a10a:	60a3      	streq	r3, [r4, #8]
   1a10c:	2d00      	cmp	r5, #0
   1a10e:	d08b      	beq.n	1a028 <bsd_os_trace_irq_handler+0x2c>
   1a110:	2105      	movs	r1, #5
   1a112:	4630      	mov	r0, r6
   1a114:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a118:	f7fc feda 	bl	16ed0 <bsd_os_trace_put>
   1a11c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a120:	68e0      	ldr	r0, [r4, #12]
   1a122:	f7fc fed5 	bl	16ed0 <bsd_os_trace_put>
   1a126:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a12a:	68e3      	ldr	r3, [r4, #12]
   1a12c:	4413      	add	r3, r2
   1a12e:	60a3      	str	r3, [r4, #8]
   1a130:	e77a      	b.n	1a028 <bsd_os_trace_irq_handler+0x2c>
   1a132:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a136:	f8ad 2000 	strh.w	r2, [sp]
   1a13a:	7822      	ldrb	r2, [r4, #0]
   1a13c:	466e      	mov	r6, sp
   1a13e:	f88d 2004 	strb.w	r2, [sp, #4]
   1a142:	6862      	ldr	r2, [r4, #4]
   1a144:	2105      	movs	r1, #5
   1a146:	4293      	cmp	r3, r2
   1a148:	bf2a      	itet	cs
   1a14a:	6927      	ldrcs	r7, [r4, #16]
   1a14c:	1ad7      	subcc	r7, r2, r3
   1a14e:	1aff      	subcs	r7, r7, r3
   1a150:	4293      	cmp	r3, r2
   1a152:	bf94      	ite	ls
   1a154:	2500      	movls	r5, #0
   1a156:	68e5      	ldrhi	r5, [r4, #12]
   1a158:	b2bf      	uxth	r7, r7
   1a15a:	bf88      	it	hi
   1a15c:	1b52      	subhi	r2, r2, r5
   1a15e:	4630      	mov	r0, r6
   1a160:	bf88      	it	hi
   1a162:	b295      	uxthhi	r5, r2
   1a164:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a168:	f7fc feb2 	bl	16ed0 <bsd_os_trace_put>
   1a16c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a170:	68a0      	ldr	r0, [r4, #8]
   1a172:	f7fc fead 	bl	16ed0 <bsd_os_trace_put>
   1a176:	68a3      	ldr	r3, [r4, #8]
   1a178:	6922      	ldr	r2, [r4, #16]
   1a17a:	441f      	add	r7, r3
   1a17c:	4297      	cmp	r7, r2
   1a17e:	bf08      	it	eq
   1a180:	68e3      	ldreq	r3, [r4, #12]
   1a182:	60a7      	str	r7, [r4, #8]
   1a184:	bf08      	it	eq
   1a186:	60a3      	streq	r3, [r4, #8]
   1a188:	2d00      	cmp	r5, #0
   1a18a:	f43f af46 	beq.w	1a01a <bsd_os_trace_irq_handler+0x1e>
   1a18e:	2105      	movs	r1, #5
   1a190:	4630      	mov	r0, r6
   1a192:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a196:	f7fc fe9b 	bl	16ed0 <bsd_os_trace_put>
   1a19a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a19e:	68e0      	ldr	r0, [r4, #12]
   1a1a0:	f7fc fe96 	bl	16ed0 <bsd_os_trace_put>
   1a1a4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a1a8:	68e3      	ldr	r3, [r4, #12]
   1a1aa:	4413      	add	r3, r2
   1a1ac:	60a3      	str	r3, [r4, #8]
   1a1ae:	e734      	b.n	1a01a <bsd_os_trace_irq_handler+0x1e>
   1a1b0:	f7fc fe50 	bl	16e54 <bsd_os_trace_irq_clear>
   1a1b4:	e729      	b.n	1a00a <bsd_os_trace_irq_handler+0xe>
   1a1b6:	bf00      	nop
   1a1b8:	20026297 	.word	0x20026297
   1a1bc:	200217d8 	.word	0x200217d8
   1a1c0:	200217d0 	.word	0x200217d0
   1a1c4:	200217d4 	.word	0x200217d4

0001a1c8 <ipc_trace_handle>:
   1a1c8:	2200      	movs	r2, #0
   1a1ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1ce:	4bb2      	ldr	r3, [pc, #712]	; (1a498 <ipc_trace_handle+0x2d0>)
   1a1d0:	b083      	sub	sp, #12
   1a1d2:	681b      	ldr	r3, [r3, #0]
   1a1d4:	6919      	ldr	r1, [r3, #16]
   1a1d6:	695c      	ldr	r4, [r3, #20]
   1a1d8:	7c18      	ldrb	r0, [r3, #16]
   1a1da:	741a      	strb	r2, [r3, #16]
   1a1dc:	7c58      	ldrb	r0, [r3, #17]
   1a1de:	745a      	strb	r2, [r3, #17]
   1a1e0:	7c98      	ldrb	r0, [r3, #18]
   1a1e2:	749a      	strb	r2, [r3, #18]
   1a1e4:	7cd8      	ldrb	r0, [r3, #19]
   1a1e6:	74da      	strb	r2, [r3, #19]
   1a1e8:	7d18      	ldrb	r0, [r3, #20]
   1a1ea:	751a      	strb	r2, [r3, #20]
   1a1ec:	7d58      	ldrb	r0, [r3, #21]
   1a1ee:	755a      	strb	r2, [r3, #21]
   1a1f0:	7d98      	ldrb	r0, [r3, #22]
   1a1f2:	759a      	strb	r2, [r3, #22]
   1a1f4:	7dd8      	ldrb	r0, [r3, #23]
   1a1f6:	75da      	strb	r2, [r3, #23]
   1a1f8:	b1a9      	cbz	r1, 1a226 <ipc_trace_handle+0x5e>
   1a1fa:	3901      	subs	r1, #1
   1a1fc:	2903      	cmp	r1, #3
   1a1fe:	d812      	bhi.n	1a226 <ipc_trace_handle+0x5e>
   1a200:	e8df f001 	tbb	[pc, r1]
   1a204:	1402a97c 	.word	0x1402a97c
   1a208:	2501      	movs	r5, #1
   1a20a:	2003      	movs	r0, #3
   1a20c:	2200      	movs	r2, #0
   1a20e:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1a212:	4ca2      	ldr	r4, [pc, #648]	; (1a49c <ipc_trace_handle+0x2d4>)
   1a214:	7025      	strb	r5, [r4, #0]
   1a216:	7a1c      	ldrb	r4, [r3, #8]
   1a218:	7218      	strb	r0, [r3, #8]
   1a21a:	7a58      	ldrb	r0, [r3, #9]
   1a21c:	725a      	strb	r2, [r3, #9]
   1a21e:	7a98      	ldrb	r0, [r3, #10]
   1a220:	729a      	strb	r2, [r3, #10]
   1a222:	7ada      	ldrb	r2, [r3, #11]
   1a224:	72d9      	strb	r1, [r3, #11]
   1a226:	b003      	add	sp, #12
   1a228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a22c:	2104      	movs	r1, #4
   1a22e:	2200      	movs	r2, #0
   1a230:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   1a234:	7a1c      	ldrb	r4, [r3, #8]
   1a236:	7219      	strb	r1, [r3, #8]
   1a238:	7a59      	ldrb	r1, [r3, #9]
   1a23a:	725a      	strb	r2, [r3, #9]
   1a23c:	4997      	ldr	r1, [pc, #604]	; (1a49c <ipc_trace_handle+0x2d4>)
   1a23e:	7a9c      	ldrb	r4, [r3, #10]
   1a240:	729a      	strb	r2, [r3, #10]
   1a242:	7adc      	ldrb	r4, [r3, #11]
   1a244:	72d8      	strb	r0, [r3, #11]
   1a246:	700a      	strb	r2, [r1, #0]
   1a248:	780b      	ldrb	r3, [r1, #0]
   1a24a:	2b00      	cmp	r3, #0
   1a24c:	f000 809f 	beq.w	1a38e <ipc_trace_handle+0x1c6>
   1a250:	4b93      	ldr	r3, [pc, #588]	; (1a4a0 <ipc_trace_handle+0x2d8>)
   1a252:	681c      	ldr	r4, [r3, #0]
   1a254:	b124      	cbz	r4, 1a260 <ipc_trace_handle+0x98>
   1a256:	68a3      	ldr	r3, [r4, #8]
   1a258:	6862      	ldr	r2, [r4, #4]
   1a25a:	4293      	cmp	r3, r2
   1a25c:	f040 80d9 	bne.w	1a412 <ipc_trace_handle+0x24a>
   1a260:	4b90      	ldr	r3, [pc, #576]	; (1a4a4 <ipc_trace_handle+0x2dc>)
   1a262:	681c      	ldr	r4, [r3, #0]
   1a264:	b124      	cbz	r4, 1a270 <ipc_trace_handle+0xa8>
   1a266:	68a3      	ldr	r3, [r4, #8]
   1a268:	6862      	ldr	r2, [r4, #4]
   1a26a:	4293      	cmp	r3, r2
   1a26c:	f040 8092 	bne.w	1a394 <ipc_trace_handle+0x1cc>
   1a270:	4b8d      	ldr	r3, [pc, #564]	; (1a4a8 <ipc_trace_handle+0x2e0>)
   1a272:	681c      	ldr	r4, [r3, #0]
   1a274:	2c00      	cmp	r4, #0
   1a276:	d0d6      	beq.n	1a226 <ipc_trace_handle+0x5e>
   1a278:	68a3      	ldr	r3, [r4, #8]
   1a27a:	6862      	ldr	r2, [r4, #4]
   1a27c:	4293      	cmp	r3, r2
   1a27e:	d0d2      	beq.n	1a226 <ipc_trace_handle+0x5e>
   1a280:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a284:	f8ad 2000 	strh.w	r2, [sp]
   1a288:	7822      	ldrb	r2, [r4, #0]
   1a28a:	466e      	mov	r6, sp
   1a28c:	f88d 2004 	strb.w	r2, [sp, #4]
   1a290:	6862      	ldr	r2, [r4, #4]
   1a292:	2105      	movs	r1, #5
   1a294:	4293      	cmp	r3, r2
   1a296:	bf2a      	itet	cs
   1a298:	6927      	ldrcs	r7, [r4, #16]
   1a29a:	1ad7      	subcc	r7, r2, r3
   1a29c:	1aff      	subcs	r7, r7, r3
   1a29e:	4293      	cmp	r3, r2
   1a2a0:	bf94      	ite	ls
   1a2a2:	2500      	movls	r5, #0
   1a2a4:	68e5      	ldrhi	r5, [r4, #12]
   1a2a6:	b2bf      	uxth	r7, r7
   1a2a8:	bf88      	it	hi
   1a2aa:	1b52      	subhi	r2, r2, r5
   1a2ac:	4630      	mov	r0, r6
   1a2ae:	bf88      	it	hi
   1a2b0:	b295      	uxthhi	r5, r2
   1a2b2:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a2b6:	f7fc fe0b 	bl	16ed0 <bsd_os_trace_put>
   1a2ba:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a2be:	68a0      	ldr	r0, [r4, #8]
   1a2c0:	f7fc fe06 	bl	16ed0 <bsd_os_trace_put>
   1a2c4:	68a3      	ldr	r3, [r4, #8]
   1a2c6:	6922      	ldr	r2, [r4, #16]
   1a2c8:	441f      	add	r7, r3
   1a2ca:	4297      	cmp	r7, r2
   1a2cc:	bf08      	it	eq
   1a2ce:	68e3      	ldreq	r3, [r4, #12]
   1a2d0:	60a7      	str	r7, [r4, #8]
   1a2d2:	bf08      	it	eq
   1a2d4:	60a3      	streq	r3, [r4, #8]
   1a2d6:	2d00      	cmp	r5, #0
   1a2d8:	d0a5      	beq.n	1a226 <ipc_trace_handle+0x5e>
   1a2da:	2105      	movs	r1, #5
   1a2dc:	4630      	mov	r0, r6
   1a2de:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a2e2:	f7fc fdf5 	bl	16ed0 <bsd_os_trace_put>
   1a2e6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a2ea:	68e0      	ldr	r0, [r4, #12]
   1a2ec:	f7fc fdf0 	bl	16ed0 <bsd_os_trace_put>
   1a2f0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a2f4:	68e3      	ldr	r3, [r4, #12]
   1a2f6:	4413      	add	r3, r2
   1a2f8:	60a3      	str	r3, [r4, #8]
   1a2fa:	e794      	b.n	1a226 <ipc_trace_handle+0x5e>
   1a2fc:	4a67      	ldr	r2, [pc, #412]	; (1a49c <ipc_trace_handle+0x2d4>)
   1a2fe:	7811      	ldrb	r1, [r2, #0]
   1a300:	b109      	cbz	r1, 1a306 <ipc_trace_handle+0x13e>
   1a302:	2100      	movs	r1, #0
   1a304:	7011      	strb	r1, [r2, #0]
   1a306:	68a5      	ldr	r5, [r4, #8]
   1a308:	2d00      	cmp	r5, #0
   1a30a:	d03b      	beq.n	1a384 <ipc_trace_handle+0x1bc>
   1a30c:	f04f 0c00 	mov.w	ip, #0
   1a310:	f8df a190 	ldr.w	sl, [pc, #400]	; 1a4a4 <ipc_trace_handle+0x2dc>
   1a314:	f8df b188 	ldr.w	fp, [pc, #392]	; 1a4a0 <ipc_trace_handle+0x2d8>
   1a318:	4963      	ldr	r1, [pc, #396]	; (1a4a8 <ipc_trace_handle+0x2e0>)
   1a31a:	46e1      	mov	r9, ip
   1a31c:	4666      	mov	r6, ip
   1a31e:	4662      	mov	r2, ip
   1a320:	f8d1 e000 	ldr.w	lr, [r1]
   1a324:	f8da 8000 	ldr.w	r8, [sl]
   1a328:	f8db 7000 	ldr.w	r7, [fp]
   1a32c:	e008      	b.n	1a340 <ipc_trace_handle+0x178>
   1a32e:	2963      	cmp	r1, #99	; 0x63
   1a330:	d016      	beq.n	1a360 <ipc_trace_handle+0x198>
   1a332:	2961      	cmp	r1, #97	; 0x61
   1a334:	bf04      	itt	eq
   1a336:	4607      	moveq	r7, r0
   1a338:	2601      	moveq	r6, #1
   1a33a:	3201      	adds	r2, #1
   1a33c:	42aa      	cmp	r2, r5
   1a33e:	d013      	beq.n	1a368 <ipc_trace_handle+0x1a0>
   1a340:	1c91      	adds	r1, r2, #2
   1a342:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1a346:	6848      	ldr	r0, [r1, #4]
   1a348:	7801      	ldrb	r1, [r0, #0]
   1a34a:	2962      	cmp	r1, #98	; 0x62
   1a34c:	d1ef      	bne.n	1a32e <ipc_trace_handle+0x166>
   1a34e:	4680      	mov	r8, r0
   1a350:	f04f 0901 	mov.w	r9, #1
   1a354:	e7f1      	b.n	1a33a <ipc_trace_handle+0x172>
   1a356:	f7fc fd75 	bl	16e44 <bsd_os_trace_irq_set>
   1a35a:	b003      	add	sp, #12
   1a35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a360:	4686      	mov	lr, r0
   1a362:	f04f 0c01 	mov.w	ip, #1
   1a366:	e7e8      	b.n	1a33a <ipc_trace_handle+0x172>
   1a368:	2e00      	cmp	r6, #0
   1a36a:	f040 8091 	bne.w	1a490 <ipc_trace_handle+0x2c8>
   1a36e:	f1b9 0f00 	cmp.w	r9, #0
   1a372:	d001      	beq.n	1a378 <ipc_trace_handle+0x1b0>
   1a374:	f8ca 8000 	str.w	r8, [sl]
   1a378:	f1bc 0f00 	cmp.w	ip, #0
   1a37c:	d002      	beq.n	1a384 <ipc_trace_handle+0x1bc>
   1a37e:	4a4a      	ldr	r2, [pc, #296]	; (1a4a8 <ipc_trace_handle+0x2e0>)
   1a380:	f8c2 e000 	str.w	lr, [r2]
   1a384:	2001      	movs	r0, #1
   1a386:	2200      	movs	r2, #0
   1a388:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1a38c:	e743      	b.n	1a216 <ipc_trace_handle+0x4e>
   1a38e:	f7fc fd61 	bl	16e54 <bsd_os_trace_irq_clear>
   1a392:	e75d      	b.n	1a250 <ipc_trace_handle+0x88>
   1a394:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a398:	f8ad 2000 	strh.w	r2, [sp]
   1a39c:	7822      	ldrb	r2, [r4, #0]
   1a39e:	466e      	mov	r6, sp
   1a3a0:	f88d 2004 	strb.w	r2, [sp, #4]
   1a3a4:	6862      	ldr	r2, [r4, #4]
   1a3a6:	2105      	movs	r1, #5
   1a3a8:	4293      	cmp	r3, r2
   1a3aa:	bf2a      	itet	cs
   1a3ac:	6927      	ldrcs	r7, [r4, #16]
   1a3ae:	1ad7      	subcc	r7, r2, r3
   1a3b0:	1aff      	subcs	r7, r7, r3
   1a3b2:	4293      	cmp	r3, r2
   1a3b4:	bf94      	ite	ls
   1a3b6:	2500      	movls	r5, #0
   1a3b8:	68e5      	ldrhi	r5, [r4, #12]
   1a3ba:	b2bf      	uxth	r7, r7
   1a3bc:	bf88      	it	hi
   1a3be:	1b52      	subhi	r2, r2, r5
   1a3c0:	4630      	mov	r0, r6
   1a3c2:	bf88      	it	hi
   1a3c4:	b295      	uxthhi	r5, r2
   1a3c6:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a3ca:	f7fc fd81 	bl	16ed0 <bsd_os_trace_put>
   1a3ce:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a3d2:	68a0      	ldr	r0, [r4, #8]
   1a3d4:	f7fc fd7c 	bl	16ed0 <bsd_os_trace_put>
   1a3d8:	68a3      	ldr	r3, [r4, #8]
   1a3da:	6922      	ldr	r2, [r4, #16]
   1a3dc:	441f      	add	r7, r3
   1a3de:	4297      	cmp	r7, r2
   1a3e0:	bf08      	it	eq
   1a3e2:	68e3      	ldreq	r3, [r4, #12]
   1a3e4:	60a7      	str	r7, [r4, #8]
   1a3e6:	bf08      	it	eq
   1a3e8:	60a3      	streq	r3, [r4, #8]
   1a3ea:	2d00      	cmp	r5, #0
   1a3ec:	f43f af40 	beq.w	1a270 <ipc_trace_handle+0xa8>
   1a3f0:	2105      	movs	r1, #5
   1a3f2:	4630      	mov	r0, r6
   1a3f4:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a3f8:	f7fc fd6a 	bl	16ed0 <bsd_os_trace_put>
   1a3fc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a400:	68e0      	ldr	r0, [r4, #12]
   1a402:	f7fc fd65 	bl	16ed0 <bsd_os_trace_put>
   1a406:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a40a:	68e3      	ldr	r3, [r4, #12]
   1a40c:	4413      	add	r3, r2
   1a40e:	60a3      	str	r3, [r4, #8]
   1a410:	e72e      	b.n	1a270 <ipc_trace_handle+0xa8>
   1a412:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   1a416:	f8ad 2000 	strh.w	r2, [sp]
   1a41a:	7822      	ldrb	r2, [r4, #0]
   1a41c:	466e      	mov	r6, sp
   1a41e:	f88d 2004 	strb.w	r2, [sp, #4]
   1a422:	6862      	ldr	r2, [r4, #4]
   1a424:	2105      	movs	r1, #5
   1a426:	4293      	cmp	r3, r2
   1a428:	bf2a      	itet	cs
   1a42a:	6927      	ldrcs	r7, [r4, #16]
   1a42c:	1ad7      	subcc	r7, r2, r3
   1a42e:	1aff      	subcs	r7, r7, r3
   1a430:	4293      	cmp	r3, r2
   1a432:	bf94      	ite	ls
   1a434:	2500      	movls	r5, #0
   1a436:	68e5      	ldrhi	r5, [r4, #12]
   1a438:	b2bf      	uxth	r7, r7
   1a43a:	bf88      	it	hi
   1a43c:	1b52      	subhi	r2, r2, r5
   1a43e:	4630      	mov	r0, r6
   1a440:	bf88      	it	hi
   1a442:	b295      	uxthhi	r5, r2
   1a444:	f8ad 7002 	strh.w	r7, [sp, #2]
   1a448:	f7fc fd42 	bl	16ed0 <bsd_os_trace_put>
   1a44c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a450:	68a0      	ldr	r0, [r4, #8]
   1a452:	f7fc fd3d 	bl	16ed0 <bsd_os_trace_put>
   1a456:	68a3      	ldr	r3, [r4, #8]
   1a458:	6922      	ldr	r2, [r4, #16]
   1a45a:	441f      	add	r7, r3
   1a45c:	4297      	cmp	r7, r2
   1a45e:	bf08      	it	eq
   1a460:	68e3      	ldreq	r3, [r4, #12]
   1a462:	60a7      	str	r7, [r4, #8]
   1a464:	bf08      	it	eq
   1a466:	60a3      	streq	r3, [r4, #8]
   1a468:	2d00      	cmp	r5, #0
   1a46a:	f43f aef9 	beq.w	1a260 <ipc_trace_handle+0x98>
   1a46e:	2105      	movs	r1, #5
   1a470:	4630      	mov	r0, r6
   1a472:	f8ad 5002 	strh.w	r5, [sp, #2]
   1a476:	f7fc fd2b 	bl	16ed0 <bsd_os_trace_put>
   1a47a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1a47e:	68e0      	ldr	r0, [r4, #12]
   1a480:	f7fc fd26 	bl	16ed0 <bsd_os_trace_put>
   1a484:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a488:	68e3      	ldr	r3, [r4, #12]
   1a48a:	4413      	add	r3, r2
   1a48c:	60a3      	str	r3, [r4, #8]
   1a48e:	e6e7      	b.n	1a260 <ipc_trace_handle+0x98>
   1a490:	f8cb 7000 	str.w	r7, [fp]
   1a494:	e76b      	b.n	1a36e <ipc_trace_handle+0x1a6>
   1a496:	bf00      	nop
   1a498:	200217dc 	.word	0x200217dc
   1a49c:	20026297 	.word	0x20026297
   1a4a0:	200217d8 	.word	0x200217d8
   1a4a4:	200217d0 	.word	0x200217d0
   1a4a8:	200217d4 	.word	0x200217d4

0001a4ac <rpc_trace_coredump_in_progress>:
   1a4ac:	4b01      	ldr	r3, [pc, #4]	; (1a4b4 <rpc_trace_coredump_in_progress+0x8>)
   1a4ae:	7818      	ldrb	r0, [r3, #0]
   1a4b0:	4770      	bx	lr
   1a4b2:	bf00      	nop
   1a4b4:	20026297 	.word	0x20026297

0001a4b8 <rpc_transport_ipc_data_free>:
   1a4b8:	b510      	push	{r4, lr}
   1a4ba:	4b0e      	ldr	r3, [pc, #56]	; (1a4f4 <rpc_transport_ipc_data_free+0x3c>)
   1a4bc:	4604      	mov	r4, r0
   1a4be:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a4c2:	4413      	add	r3, r2
   1a4c4:	4298      	cmp	r0, r3
   1a4c6:	d20d      	bcs.n	1a4e4 <rpc_transport_ipc_data_free+0x2c>
   1a4c8:	4282      	cmp	r2, r0
   1a4ca:	d80b      	bhi.n	1a4e4 <rpc_transport_ipc_data_free+0x2c>
   1a4cc:	f000 fd1a 	bl	1af04 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   1a4d0:	b158      	cbz	r0, 1a4ea <rpc_transport_ipc_data_free+0x32>
   1a4d2:	4a09      	ldr	r2, [pc, #36]	; (1a4f8 <rpc_transport_ipc_data_free+0x40>)
   1a4d4:	6084      	str	r4, [r0, #8]
   1a4d6:	6002      	str	r2, [r0, #0]
   1a4d8:	f7ff fd80 	bl	19fdc <rpc_transport_send>
   1a4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a4e0:	f7fc bca0 	b.w	16e24 <bsd_os_application_irq_set>
   1a4e4:	4620      	mov	r0, r4
   1a4e6:	f006 ff7b 	bl	213e0 <nrf_shared_free>
   1a4ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a4ee:	f7fc bc99 	b.w	16e24 <bsd_os_application_irq_set>
   1a4f2:	bf00      	nop
   1a4f4:	200217e0 	.word	0x200217e0
   1a4f8:	00020001 	.word	0x00020001

0001a4fc <rpc_transport_ipc_init>:
   1a4fc:	b188      	cbz	r0, 1a522 <rpc_transport_ipc_init+0x26>
   1a4fe:	b510      	push	{r4, lr}
   1a500:	b082      	sub	sp, #8
   1a502:	aa01      	add	r2, sp, #4
   1a504:	4669      	mov	r1, sp
   1a506:	4604      	mov	r4, r0
   1a508:	f000 fb58 	bl	1abbc <rpc_transport_ipc_tx_init>
   1a50c:	4602      	mov	r2, r0
   1a50e:	b148      	cbz	r0, 1a524 <rpc_transport_ipc_init+0x28>
   1a510:	4b12      	ldr	r3, [pc, #72]	; (1a55c <rpc_transport_ipc_init+0x60>)
   1a512:	3428      	adds	r4, #40	; 0x28
   1a514:	e894 0003 	ldmia.w	r4, {r0, r1}
   1a518:	e883 0003 	stmia.w	r3, {r0, r1}
   1a51c:	4610      	mov	r0, r2
   1a51e:	b002      	add	sp, #8
   1a520:	bd10      	pop	{r4, pc}
   1a522:	e7fe      	b.n	1a522 <rpc_transport_ipc_init+0x26>
   1a524:	e9dd 1200 	ldrd	r1, r2, [sp]
   1a528:	4620      	mov	r0, r4
   1a52a:	f000 f9ef 	bl	1a90c <rpc_transport_ipc_rx_init>
   1a52e:	4602      	mov	r2, r0
   1a530:	4b0a      	ldr	r3, [pc, #40]	; (1a55c <rpc_transport_ipc_init+0x60>)
   1a532:	f104 0128 	add.w	r1, r4, #40	; 0x28
   1a536:	c903      	ldmia	r1, {r0, r1}
   1a538:	e883 0003 	stmia.w	r3, {r0, r1}
   1a53c:	2a00      	cmp	r2, #0
   1a53e:	d1ed      	bne.n	1a51c <rpc_transport_ipc_init+0x20>
   1a540:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1a544:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1a546:	4906      	ldr	r1, [pc, #24]	; (1a560 <rpc_transport_ipc_init+0x64>)
   1a548:	015b      	lsls	r3, r3, #5
   1a54a:	b2db      	uxtb	r3, r3
   1a54c:	f881 332a 	strb.w	r3, [r1, #810]	; 0x32a
   1a550:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   1a554:	6048      	str	r0, [r1, #4]
   1a556:	4610      	mov	r0, r2
   1a558:	b002      	add	sp, #8
   1a55a:	bd10      	pop	{r4, pc}
   1a55c:	200217e0 	.word	0x200217e0
   1a560:	e000e100 	.word	0xe000e100

0001a564 <rpc_transport_ipc_shutdown>:
   1a564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a568:	b08c      	sub	sp, #48	; 0x30
   1a56a:	f000 fd05 	bl	1af78 <rpc_transport_ipc_tx_suspend>
   1a56e:	2200      	movs	r2, #0
   1a570:	2010      	movs	r0, #16
   1a572:	4b31      	ldr	r3, [pc, #196]	; (1a638 <rpc_transport_ipc_shutdown+0xd4>)
   1a574:	f04f 0c01 	mov.w	ip, #1
   1a578:	4c30      	ldr	r4, [pc, #192]	; (1a63c <rpc_transport_ipc_shutdown+0xd8>)
   1a57a:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   1a57e:	6821      	ldr	r1, [r4, #0]
   1a580:	2704      	movs	r7, #4
   1a582:	910a      	str	r1, [sp, #40]	; 0x28
   1a584:	492e      	ldr	r1, [pc, #184]	; (1a640 <rpc_transport_ipc_shutdown+0xdc>)
   1a586:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1a588:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1a58c:	680d      	ldr	r5, [r1, #0]
   1a58e:	950b      	str	r5, [sp, #44]	; 0x2c
   1a590:	4d2c      	ldr	r5, [pc, #176]	; (1a644 <rpc_transport_ipc_shutdown+0xe0>)
   1a592:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1a594:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   1a598:	682d      	ldr	r5, [r5, #0]
   1a59a:	2640      	movs	r6, #64	; 0x40
   1a59c:	9509      	str	r5, [sp, #36]	; 0x24
   1a59e:	4d2a      	ldr	r5, [pc, #168]	; (1a648 <rpc_transport_ipc_shutdown+0xe4>)
   1a5a0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   1a5a4:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   1a5a8:	f8d5 e000 	ldr.w	lr, [r5]
   1a5ac:	2580      	movs	r5, #128	; 0x80
   1a5ae:	f8cd e020 	str.w	lr, [sp, #32]
   1a5b2:	f8dd e020 	ldr.w	lr, [sp, #32]
   1a5b6:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   1a5ba:	f8d4 e000 	ldr.w	lr, [r4]
   1a5be:	2405      	movs	r4, #5
   1a5c0:	f8cd e01c 	str.w	lr, [sp, #28]
   1a5c4:	f8df e08c 	ldr.w	lr, [pc, #140]	; 1a654 <rpc_transport_ipc_shutdown+0xf0>
   1a5c8:	f8dd 801c 	ldr.w	r8, [sp, #28]
   1a5cc:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   1a5d0:	f8de e000 	ldr.w	lr, [lr]
   1a5d4:	f8cd e018 	str.w	lr, [sp, #24]
   1a5d8:	f8df e07c 	ldr.w	lr, [pc, #124]	; 1a658 <rpc_transport_ipc_shutdown+0xf4>
   1a5dc:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1a5e0:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   1a5e4:	f8de e000 	ldr.w	lr, [lr]
   1a5e8:	f8cd e014 	str.w	lr, [sp, #20]
   1a5ec:	f8dd e014 	ldr.w	lr, [sp, #20]
   1a5f0:	f8c3 c308 	str.w	ip, [r3, #776]	; 0x308
   1a5f4:	f8d1 c000 	ldr.w	ip, [r1]
   1a5f8:	f8cd c010 	str.w	ip, [sp, #16]
   1a5fc:	f8dd c010 	ldr.w	ip, [sp, #16]
   1a600:	f8c3 7308 	str.w	r7, [r3, #776]	; 0x308
   1a604:	680f      	ldr	r7, [r1, #0]
   1a606:	9703      	str	r7, [sp, #12]
   1a608:	9f03      	ldr	r7, [sp, #12]
   1a60a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1a60e:	6808      	ldr	r0, [r1, #0]
   1a610:	9002      	str	r0, [sp, #8]
   1a612:	9802      	ldr	r0, [sp, #8]
   1a614:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   1a618:	680e      	ldr	r6, [r1, #0]
   1a61a:	480c      	ldr	r0, [pc, #48]	; (1a64c <rpc_transport_ipc_shutdown+0xe8>)
   1a61c:	9601      	str	r6, [sp, #4]
   1a61e:	9e01      	ldr	r6, [sp, #4]
   1a620:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   1a624:	6809      	ldr	r1, [r1, #0]
   1a626:	4b0a      	ldr	r3, [pc, #40]	; (1a650 <rpc_transport_ipc_shutdown+0xec>)
   1a628:	9100      	str	r1, [sp, #0]
   1a62a:	9900      	ldr	r1, [sp, #0]
   1a62c:	8002      	strh	r2, [r0, #0]
   1a62e:	601c      	str	r4, [r3, #0]
   1a630:	b00c      	add	sp, #48	; 0x30
   1a632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a636:	bf00      	nop
   1a638:	4002a000 	.word	0x4002a000
   1a63c:	4002a5a0 	.word	0x4002a5a0
   1a640:	4002a308 	.word	0x4002a308
   1a644:	4002a590 	.word	0x4002a590
   1a648:	4002a598 	.word	0x4002a598
   1a64c:	200242c4 	.word	0x200242c4
   1a650:	200217f8 	.word	0x200217f8
   1a654:	4002a5a8 	.word	0x4002a5a8
   1a658:	4002a5ac 	.word	0x4002a5ac

0001a65c <bsd_os_application_irq_handler>:
   1a65c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a660:	f7fc fbe8 	bl	16e34 <bsd_os_application_irq_clear>
   1a664:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 1a73c <bsd_os_application_irq_handler+0xe0>
   1a668:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 1a740 <bsd_os_application_irq_handler+0xe4>
   1a66c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 1a744 <bsd_os_application_irq_handler+0xe8>
   1a670:	f108 0908 	add.w	r9, r8, #8
   1a674:	f858 7b04 	ldr.w	r7, [r8], #4
   1a678:	6839      	ldr	r1, [r7, #0]
   1a67a:	b361      	cbz	r1, 1a6d6 <bsd_os_application_irq_handler+0x7a>
   1a67c:	2400      	movs	r4, #0
   1a67e:	e002      	b.n	1a686 <bsd_os_application_irq_handler+0x2a>
   1a680:	3401      	adds	r4, #1
   1a682:	428c      	cmp	r4, r1
   1a684:	d227      	bcs.n	1a6d6 <bsd_os_application_irq_handler+0x7a>
   1a686:	00e6      	lsls	r6, r4, #3
   1a688:	19bd      	adds	r5, r7, r6
   1a68a:	68aa      	ldr	r2, [r5, #8]
   1a68c:	2a00      	cmp	r2, #0
   1a68e:	d0f7      	beq.n	1a680 <bsd_os_application_irq_handler+0x24>
   1a690:	686a      	ldr	r2, [r5, #4]
   1a692:	b2d2      	uxtb	r2, r2
   1a694:	2a01      	cmp	r2, #1
   1a696:	d1f3      	bne.n	1a680 <bsd_os_application_irq_handler+0x24>
   1a698:	6868      	ldr	r0, [r5, #4]
   1a69a:	f8bb 2000 	ldrh.w	r2, [fp]
   1a69e:	ebb2 4f10 	cmp.w	r2, r0, lsr #16
   1a6a2:	d1ed      	bne.n	1a680 <bsd_os_application_irq_handler+0x24>
   1a6a4:	68a8      	ldr	r0, [r5, #8]
   1a6a6:	6841      	ldr	r1, [r0, #4]
   1a6a8:	b2c9      	uxtb	r1, r1
   1a6aa:	2902      	cmp	r1, #2
   1a6ac:	d02c      	beq.n	1a708 <bsd_os_application_irq_handler+0xac>
   1a6ae:	2901      	cmp	r1, #1
   1a6b0:	d015      	beq.n	1a6de <bsd_os_application_irq_handler+0x82>
   1a6b2:	3604      	adds	r6, #4
   1a6b4:	59b9      	ldr	r1, [r7, r6]
   1a6b6:	3201      	adds	r2, #1
   1a6b8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   1a6bc:	f041 0103 	orr.w	r1, r1, #3
   1a6c0:	51b9      	str	r1, [r7, r6]
   1a6c2:	f8ab 2000 	strh.w	r2, [fp]
   1a6c6:	f7fc fbad 	bl	16e24 <bsd_os_application_irq_set>
   1a6ca:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1a6ce:	3401      	adds	r4, #1
   1a6d0:	6839      	ldr	r1, [r7, #0]
   1a6d2:	428c      	cmp	r4, r1
   1a6d4:	d3d7      	bcc.n	1a686 <bsd_os_application_irq_handler+0x2a>
   1a6d6:	45c1      	cmp	r9, r8
   1a6d8:	d1cc      	bne.n	1a674 <bsd_os_application_irq_handler+0x18>
   1a6da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6de:	6801      	ldr	r1, [r0, #0]
   1a6e0:	0c09      	lsrs	r1, r1, #16
   1a6e2:	f002 ff45 	bl	1d570 <rpc_handle_ctrl_message>
   1a6e6:	2801      	cmp	r0, #1
   1a6e8:	d014      	beq.n	1a714 <bsd_os_application_irq_handler+0xb8>
   1a6ea:	d310      	bcc.n	1a70e <bsd_os_application_irq_handler+0xb2>
   1a6ec:	2802      	cmp	r0, #2
   1a6ee:	d007      	beq.n	1a700 <bsd_os_application_irq_handler+0xa4>
   1a6f0:	2203      	movs	r2, #3
   1a6f2:	4b11      	ldr	r3, [pc, #68]	; (1a738 <bsd_os_application_irq_handler+0xdc>)
   1a6f4:	4610      	mov	r0, r2
   1a6f6:	f8ca 2000 	str.w	r2, [sl]
   1a6fa:	601a      	str	r2, [r3, #0]
   1a6fc:	f005 fb6c 	bl	1fdd8 <rpc_transport_ipc_fault_handler>
   1a700:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1a704:	6839      	ldr	r1, [r7, #0]
   1a706:	e7bb      	b.n	1a680 <bsd_os_application_irq_handler+0x24>
   1a708:	f002 ff4a 	bl	1d5a0 <rpc_handle_data_message>
   1a70c:	e7eb      	b.n	1a6e6 <bsd_os_application_irq_handler+0x8a>
   1a70e:	f8bb 2000 	ldrh.w	r2, [fp]
   1a712:	e7ce      	b.n	1a6b2 <bsd_os_application_irq_handler+0x56>
   1a714:	686a      	ldr	r2, [r5, #4]
   1a716:	f8bb 1000 	ldrh.w	r1, [fp]
   1a71a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1a71e:	f042 0202 	orr.w	r2, r2, #2
   1a722:	606a      	str	r2, [r5, #4]
   1a724:	1c4a      	adds	r2, r1, #1
   1a726:	f8ab 2000 	strh.w	r2, [fp]
   1a72a:	f7fc fb7b 	bl	16e24 <bsd_os_application_irq_set>
   1a72e:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1a732:	6839      	ldr	r1, [r7, #0]
   1a734:	e7a4      	b.n	1a680 <bsd_os_application_irq_handler+0x24>
   1a736:	bf00      	nop
   1a738:	200217e8 	.word	0x200217e8
   1a73c:	200217f0 	.word	0x200217f0
   1a740:	200242c4 	.word	0x200242c4
   1a744:	200217f8 	.word	0x200217f8

0001a748 <IPC_IRQHandler>:
   1a748:	b570      	push	{r4, r5, r6, lr}
   1a74a:	f44f 6680 	mov.w	r6, #1024	; 0x400
   1a74e:	4d62      	ldr	r5, [pc, #392]	; (1a8d8 <IPC_IRQHandler+0x190>)
   1a750:	4c62      	ldr	r4, [pc, #392]	; (1a8dc <IPC_IRQHandler+0x194>)
   1a752:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
   1a756:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   1a75a:	b086      	sub	sp, #24
   1a75c:	061b      	lsls	r3, r3, #24
   1a75e:	d50b      	bpl.n	1a778 <IPC_IRQHandler+0x30>
   1a760:	f7ff fd32 	bl	1a1c8 <ipc_trace_handle>
   1a764:	f7ff fea2 	bl	1a4ac <rpc_trace_coredump_in_progress>
   1a768:	2800      	cmp	r0, #0
   1a76a:	d151      	bne.n	1a810 <IPC_IRQHandler+0xc8>
   1a76c:	4b5c      	ldr	r3, [pc, #368]	; (1a8e0 <IPC_IRQHandler+0x198>)
   1a76e:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   1a772:	681b      	ldr	r3, [r3, #0]
   1a774:	9301      	str	r3, [sp, #4]
   1a776:	9b01      	ldr	r3, [sp, #4]
   1a778:	4b58      	ldr	r3, [pc, #352]	; (1a8dc <IPC_IRQHandler+0x194>)
   1a77a:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1a77e:	f012 0201 	ands.w	r2, r2, #1
   1a782:	d11c      	bne.n	1a7be <IPC_IRQHandler+0x76>
   1a784:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   1a788:	f011 0140 	ands.w	r1, r1, #64	; 0x40
   1a78c:	d145      	bne.n	1a81a <IPC_IRQHandler+0xd2>
   1a78e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1a792:	0750      	lsls	r0, r2, #29
   1a794:	d50c      	bpl.n	1a7b0 <IPC_IRQHandler+0x68>
   1a796:	4a53      	ldr	r2, [pc, #332]	; (1a8e4 <IPC_IRQHandler+0x19c>)
   1a798:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1a79c:	6812      	ldr	r2, [r2, #0]
   1a79e:	4b52      	ldr	r3, [pc, #328]	; (1a8e8 <IPC_IRQHandler+0x1a0>)
   1a7a0:	9204      	str	r2, [sp, #16]
   1a7a2:	9a04      	ldr	r2, [sp, #16]
   1a7a4:	681a      	ldr	r2, [r3, #0]
   1a7a6:	2a02      	cmp	r2, #2
   1a7a8:	d079      	beq.n	1a89e <IPC_IRQHandler+0x156>
   1a7aa:	681a      	ldr	r2, [r3, #0]
   1a7ac:	2a01      	cmp	r2, #1
   1a7ae:	d05b      	beq.n	1a868 <IPC_IRQHandler+0x120>
   1a7b0:	4b4a      	ldr	r3, [pc, #296]	; (1a8dc <IPC_IRQHandler+0x194>)
   1a7b2:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1a7b6:	06d2      	lsls	r2, r2, #27
   1a7b8:	d41e      	bmi.n	1a7f8 <IPC_IRQHandler+0xb0>
   1a7ba:	b006      	add	sp, #24
   1a7bc:	bd70      	pop	{r4, r5, r6, pc}
   1a7be:	2000      	movs	r0, #0
   1a7c0:	f248 0202 	movw	r2, #32770	; 0x8002
   1a7c4:	4949      	ldr	r1, [pc, #292]	; (1a8ec <IPC_IRQHandler+0x1a4>)
   1a7c6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1a7ca:	6809      	ldr	r1, [r1, #0]
   1a7cc:	9102      	str	r1, [sp, #8]
   1a7ce:	9902      	ldr	r1, [sp, #8]
   1a7d0:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   1a7d4:	4293      	cmp	r3, r2
   1a7d6:	d06b      	beq.n	1a8b0 <IPC_IRQHandler+0x168>
   1a7d8:	d82a      	bhi.n	1a830 <IPC_IRQHandler+0xe8>
   1a7da:	2b00      	cmp	r3, #0
   1a7dc:	d062      	beq.n	1a8a4 <IPC_IRQHandler+0x15c>
   1a7de:	2b02      	cmp	r3, #2
   1a7e0:	d937      	bls.n	1a852 <IPC_IRQHandler+0x10a>
   1a7e2:	f248 0201 	movw	r2, #32769	; 0x8001
   1a7e6:	4293      	cmp	r3, r2
   1a7e8:	d15c      	bne.n	1a8a4 <IPC_IRQHandler+0x15c>
   1a7ea:	2003      	movs	r0, #3
   1a7ec:	2207      	movs	r2, #7
   1a7ee:	493e      	ldr	r1, [pc, #248]	; (1a8e8 <IPC_IRQHandler+0x1a0>)
   1a7f0:	4b3f      	ldr	r3, [pc, #252]	; (1a8f0 <IPC_IRQHandler+0x1a8>)
   1a7f2:	6008      	str	r0, [r1, #0]
   1a7f4:	601a      	str	r2, [r3, #0]
   1a7f6:	e7e0      	b.n	1a7ba <IPC_IRQHandler+0x72>
   1a7f8:	2100      	movs	r1, #0
   1a7fa:	4a3e      	ldr	r2, [pc, #248]	; (1a8f4 <IPC_IRQHandler+0x1ac>)
   1a7fc:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
   1a800:	6813      	ldr	r3, [r2, #0]
   1a802:	9305      	str	r3, [sp, #20]
   1a804:	9b05      	ldr	r3, [sp, #20]
   1a806:	b006      	add	sp, #24
   1a808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a80c:	f7fc bb0a 	b.w	16e24 <bsd_os_application_irq_set>
   1a810:	23e0      	movs	r3, #224	; 0xe0
   1a812:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   1a816:	606e      	str	r6, [r5, #4]
   1a818:	e7cf      	b.n	1a7ba <IPC_IRQHandler+0x72>
   1a81a:	4937      	ldr	r1, [pc, #220]	; (1a8f8 <IPC_IRQHandler+0x1b0>)
   1a81c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   1a820:	680b      	ldr	r3, [r1, #0]
   1a822:	9303      	str	r3, [sp, #12]
   1a824:	9b03      	ldr	r3, [sp, #12]
   1a826:	b006      	add	sp, #24
   1a828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a82c:	f7ff be9a 	b.w	1a564 <rpc_transport_ipc_shutdown>
   1a830:	4a32      	ldr	r2, [pc, #200]	; (1a8fc <IPC_IRQHandler+0x1b4>)
   1a832:	4293      	cmp	r3, r2
   1a834:	d82a      	bhi.n	1a88c <IPC_IRQHandler+0x144>
   1a836:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   1a83a:	d82a      	bhi.n	1a892 <IPC_IRQHandler+0x14a>
   1a83c:	f248 0203 	movw	r2, #32771	; 0x8003
   1a840:	4293      	cmp	r3, r2
   1a842:	d12f      	bne.n	1a8a4 <IPC_IRQHandler+0x15c>
   1a844:	2003      	movs	r0, #3
   1a846:	2204      	movs	r2, #4
   1a848:	4927      	ldr	r1, [pc, #156]	; (1a8e8 <IPC_IRQHandler+0x1a0>)
   1a84a:	4b29      	ldr	r3, [pc, #164]	; (1a8f0 <IPC_IRQHandler+0x1a8>)
   1a84c:	6008      	str	r0, [r1, #0]
   1a84e:	601a      	str	r2, [r3, #0]
   1a850:	e7b3      	b.n	1a7ba <IPC_IRQHandler+0x72>
   1a852:	2303      	movs	r3, #3
   1a854:	4618      	mov	r0, r3
   1a856:	4924      	ldr	r1, [pc, #144]	; (1a8e8 <IPC_IRQHandler+0x1a0>)
   1a858:	4a25      	ldr	r2, [pc, #148]	; (1a8f0 <IPC_IRQHandler+0x1a8>)
   1a85a:	600b      	str	r3, [r1, #0]
   1a85c:	6013      	str	r3, [r2, #0]
   1a85e:	b006      	add	sp, #24
   1a860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a864:	f005 bab8 	b.w	1fdd8 <rpc_transport_ipc_fault_handler>
   1a868:	4a25      	ldr	r2, [pc, #148]	; (1a900 <IPC_IRQHandler+0x1b8>)
   1a86a:	4826      	ldr	r0, [pc, #152]	; (1a904 <IPC_IRQHandler+0x1bc>)
   1a86c:	6811      	ldr	r1, [r2, #0]
   1a86e:	688a      	ldr	r2, [r1, #8]
   1a870:	6002      	str	r2, [r0, #0]
   1a872:	6849      	ldr	r1, [r1, #4]
   1a874:	6041      	str	r1, [r0, #4]
   1a876:	b312      	cbz	r2, 1a8be <IPC_IRQHandler+0x176>
   1a878:	b309      	cbz	r1, 1a8be <IPC_IRQHandler+0x176>
   1a87a:	6812      	ldr	r2, [r2, #0]
   1a87c:	2a10      	cmp	r2, #16
   1a87e:	d824      	bhi.n	1a8ca <IPC_IRQHandler+0x182>
   1a880:	680a      	ldr	r2, [r1, #0]
   1a882:	2a10      	cmp	r2, #16
   1a884:	d821      	bhi.n	1a8ca <IPC_IRQHandler+0x182>
   1a886:	2202      	movs	r2, #2
   1a888:	601a      	str	r2, [r3, #0]
   1a88a:	e791      	b.n	1a7b0 <IPC_IRQHandler+0x68>
   1a88c:	4a1e      	ldr	r2, [pc, #120]	; (1a908 <IPC_IRQHandler+0x1c0>)
   1a88e:	4293      	cmp	r3, r2
   1a890:	d108      	bne.n	1a8a4 <IPC_IRQHandler+0x15c>
   1a892:	2003      	movs	r0, #3
   1a894:	4914      	ldr	r1, [pc, #80]	; (1a8e8 <IPC_IRQHandler+0x1a0>)
   1a896:	4a16      	ldr	r2, [pc, #88]	; (1a8f0 <IPC_IRQHandler+0x1a8>)
   1a898:	6008      	str	r0, [r1, #0]
   1a89a:	6013      	str	r3, [r2, #0]
   1a89c:	e78d      	b.n	1a7ba <IPC_IRQHandler+0x72>
   1a89e:	f7fc fac1 	bl	16e24 <bsd_os_application_irq_set>
   1a8a2:	e785      	b.n	1a7b0 <IPC_IRQHandler+0x68>
   1a8a4:	2303      	movs	r3, #3
   1a8a6:	4910      	ldr	r1, [pc, #64]	; (1a8e8 <IPC_IRQHandler+0x1a0>)
   1a8a8:	4a11      	ldr	r2, [pc, #68]	; (1a8f0 <IPC_IRQHandler+0x1a8>)
   1a8aa:	600b      	str	r3, [r1, #0]
   1a8ac:	6013      	str	r3, [r2, #0]
   1a8ae:	e784      	b.n	1a7ba <IPC_IRQHandler+0x72>
   1a8b0:	2003      	movs	r0, #3
   1a8b2:	2206      	movs	r2, #6
   1a8b4:	490c      	ldr	r1, [pc, #48]	; (1a8e8 <IPC_IRQHandler+0x1a0>)
   1a8b6:	4b0e      	ldr	r3, [pc, #56]	; (1a8f0 <IPC_IRQHandler+0x1a8>)
   1a8b8:	6008      	str	r0, [r1, #0]
   1a8ba:	601a      	str	r2, [r3, #0]
   1a8bc:	e77d      	b.n	1a7ba <IPC_IRQHandler+0x72>
   1a8be:	2003      	movs	r0, #3
   1a8c0:	2110      	movs	r1, #16
   1a8c2:	4a0b      	ldr	r2, [pc, #44]	; (1a8f0 <IPC_IRQHandler+0x1a8>)
   1a8c4:	6018      	str	r0, [r3, #0]
   1a8c6:	6011      	str	r1, [r2, #0]
   1a8c8:	e772      	b.n	1a7b0 <IPC_IRQHandler+0x68>
   1a8ca:	2003      	movs	r0, #3
   1a8cc:	f24c 0106 	movw	r1, #49158	; 0xc006
   1a8d0:	4a07      	ldr	r2, [pc, #28]	; (1a8f0 <IPC_IRQHandler+0x1a8>)
   1a8d2:	6018      	str	r0, [r3, #0]
   1a8d4:	6011      	str	r1, [r2, #0]
   1a8d6:	e76b      	b.n	1a7b0 <IPC_IRQHandler+0x68>
   1a8d8:	e000e100 	.word	0xe000e100
   1a8dc:	4002a000 	.word	0x4002a000
   1a8e0:	4002a11c 	.word	0x4002a11c
   1a8e4:	4002a108 	.word	0x4002a108
   1a8e8:	200217f8 	.word	0x200217f8
   1a8ec:	4002a100 	.word	0x4002a100
   1a8f0:	200217e8 	.word	0x200217e8
   1a8f4:	4002a110 	.word	0x4002a110
   1a8f8:	4002a118 	.word	0x4002a118
   1a8fc:	04400004 	.word	0x04400004
   1a900:	200217fc 	.word	0x200217fc
   1a904:	200217f0 	.word	0x200217f0
   1a908:	05500001 	.word	0x05500001

0001a90c <rpc_transport_ipc_rx_init>:
   1a90c:	2800      	cmp	r0, #0
   1a90e:	f000 8109 	beq.w	1ab24 <rpc_transport_ipc_rx_init+0x218>
   1a912:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a916:	6805      	ldr	r5, [r0, #0]
   1a918:	b097      	sub	sp, #92	; 0x5c
   1a91a:	2d00      	cmp	r5, #0
   1a91c:	f000 80f8 	beq.w	1ab10 <rpc_transport_ipc_rx_init+0x204>
   1a920:	6883      	ldr	r3, [r0, #8]
   1a922:	2b00      	cmp	r3, #0
   1a924:	f000 80f4 	beq.w	1ab10 <rpc_transport_ipc_rx_init+0x204>
   1a928:	6906      	ldr	r6, [r0, #16]
   1a92a:	2e00      	cmp	r6, #0
   1a92c:	f000 80f0 	beq.w	1ab10 <rpc_transport_ipc_rx_init+0x204>
   1a930:	6a84      	ldr	r4, [r0, #40]	; 0x28
   1a932:	2c00      	cmp	r4, #0
   1a934:	f000 80ec 	beq.w	1ab10 <rpc_transport_ipc_rx_init+0x204>
   1a938:	6844      	ldr	r4, [r0, #4]
   1a93a:	2c1b      	cmp	r4, #27
   1a93c:	f240 80ed 	bls.w	1ab1a <rpc_transport_ipc_rx_init+0x20e>
   1a940:	68c4      	ldr	r4, [r0, #12]
   1a942:	2c0b      	cmp	r4, #11
   1a944:	f240 80e9 	bls.w	1ab1a <rpc_transport_ipc_rx_init+0x20e>
   1a948:	f8d0 e014 	ldr.w	lr, [r0, #20]
   1a94c:	f1be 0f17 	cmp.w	lr, #23
   1a950:	f240 80e3 	bls.w	1ab1a <rpc_transport_ipc_rx_init+0x20e>
   1a954:	4604      	mov	r4, r0
   1a956:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 1ab4c <rpc_transport_ipc_rx_init+0x240>
   1a95a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
   1a95c:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 1ab50 <rpc_transport_ipc_rx_init+0x244>
   1a960:	4690      	mov	r8, r2
   1a962:	9101      	str	r1, [sp, #4]
   1a964:	4672      	mov	r2, lr
   1a966:	2100      	movs	r1, #0
   1a968:	4630      	mov	r0, r6
   1a96a:	f8ca 7000 	str.w	r7, [sl]
   1a96e:	f8cb 3000 	str.w	r3, [fp]
   1a972:	f00b fd41 	bl	263f8 <memset>
   1a976:	69e3      	ldr	r3, [r4, #28]
   1a978:	4630      	mov	r0, r6
   1a97a:	6033      	str	r3, [r6, #0]
   1a97c:	69a3      	ldr	r3, [r4, #24]
   1a97e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 1ab54 <rpc_transport_ipc_rx_init+0x248>
   1a982:	6073      	str	r3, [r6, #4]
   1a984:	f7ff fb34 	bl	19ff0 <ipc_trace_init>
   1a988:	2200      	movs	r2, #0
   1a98a:	2001      	movs	r0, #1
   1a98c:	4b67      	ldr	r3, [pc, #412]	; (1ab2c <rpc_transport_ipc_rx_init+0x220>)
   1a98e:	4968      	ldr	r1, [pc, #416]	; (1ab30 <rpc_transport_ipc_rx_init+0x224>)
   1a990:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   1a994:	6809      	ldr	r1, [r1, #0]
   1a996:	f04f 0c80 	mov.w	ip, #128	; 0x80
   1a99a:	9106      	str	r1, [sp, #24]
   1a99c:	4965      	ldr	r1, [pc, #404]	; (1ab34 <rpc_transport_ipc_rx_init+0x228>)
   1a99e:	f8dd e018 	ldr.w	lr, [sp, #24]
   1a9a2:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   1a9a6:	6809      	ldr	r1, [r1, #0]
   1a9a8:	702a      	strb	r2, [r5, #0]
   1a9aa:	9105      	str	r1, [sp, #20]
   1a9ac:	706a      	strb	r2, [r5, #1]
   1a9ae:	70ea      	strb	r2, [r5, #3]
   1a9b0:	70a8      	strb	r0, [r5, #2]
   1a9b2:	9905      	ldr	r1, [sp, #20]
   1a9b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1a9b6:	f8db e000 	ldr.w	lr, [fp]
   1a9ba:	6069      	str	r1, [r5, #4]
   1a9bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1a9be:	61ae      	str	r6, [r5, #24]
   1a9c0:	60a9      	str	r1, [r5, #8]
   1a9c2:	9901      	ldr	r1, [sp, #4]
   1a9c4:	f8c5 e014 	str.w	lr, [r5, #20]
   1a9c8:	6129      	str	r1, [r5, #16]
   1a9ca:	495b      	ldr	r1, [pc, #364]	; (1ab38 <rpc_transport_ipc_rx_init+0x22c>)
   1a9cc:	f8c5 800c 	str.w	r8, [r5, #12]
   1a9d0:	f8c3 0590 	str.w	r0, [r3, #1424]	; 0x590
   1a9d4:	680c      	ldr	r4, [r1, #0]
   1a9d6:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   1a9da:	9407      	str	r4, [sp, #28]
   1a9dc:	9c07      	ldr	r4, [sp, #28]
   1a9de:	2404      	movs	r4, #4
   1a9e0:	f8c3 4598 	str.w	r4, [r3, #1432]	; 0x598
   1a9e4:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   1a9e8:	4f54      	ldr	r7, [pc, #336]	; (1ab3c <rpc_transport_ipc_rx_init+0x230>)
   1a9ea:	9408      	str	r4, [sp, #32]
   1a9ec:	9c08      	ldr	r4, [sp, #32]
   1a9ee:	2410      	movs	r4, #16
   1a9f0:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   1a9f4:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   1a9f8:	9409      	str	r4, [sp, #36]	; 0x24
   1a9fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1a9fc:	2440      	movs	r4, #64	; 0x40
   1a9fe:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   1aa02:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   1aa06:	940a      	str	r4, [sp, #40]	; 0x28
   1aa08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1aa0a:	f8c3 c5ac 	str.w	ip, [r3, #1452]	; 0x5ac
   1aa0e:	f8d1 44ac 	ldr.w	r4, [r1, #1196]	; 0x4ac
   1aa12:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   1aa16:	940b      	str	r4, [sp, #44]	; 0x2c
   1aa18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1aa1a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1aa1e:	680c      	ldr	r4, [r1, #0]
   1aa20:	940c      	str	r4, [sp, #48]	; 0x30
   1aa22:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1aa24:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1aa28:	688c      	ldr	r4, [r1, #8]
   1aa2a:	940d      	str	r4, [sp, #52]	; 0x34
   1aa2c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1aa2e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1aa32:	690c      	ldr	r4, [r1, #16]
   1aa34:	940e      	str	r4, [sp, #56]	; 0x38
   1aa36:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1aa38:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   1aa3c:	698c      	ldr	r4, [r1, #24]
   1aa3e:	940f      	str	r4, [sp, #60]	; 0x3c
   1aa40:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1aa42:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   1aa46:	69cc      	ldr	r4, [r1, #28]
   1aa48:	f501 7101 	add.w	r1, r1, #516	; 0x204
   1aa4c:	9410      	str	r4, [sp, #64]	; 0x40
   1aa4e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1aa50:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   1aa54:	4304      	orrs	r4, r0
   1aa56:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1aa5a:	680d      	ldr	r5, [r1, #0]
   1aa5c:	4c38      	ldr	r4, [pc, #224]	; (1ab40 <rpc_transport_ipc_rx_init+0x234>)
   1aa5e:	9511      	str	r5, [sp, #68]	; 0x44
   1aa60:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1aa62:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   1aa66:	4d37      	ldr	r5, [pc, #220]	; (1ab44 <rpc_transport_ipc_rx_init+0x238>)
   1aa68:	f046 0604 	orr.w	r6, r6, #4
   1aa6c:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   1aa70:	680e      	ldr	r6, [r1, #0]
   1aa72:	9612      	str	r6, [sp, #72]	; 0x48
   1aa74:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1aa76:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   1aa7a:	f046 0610 	orr.w	r6, r6, #16
   1aa7e:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   1aa82:	680e      	ldr	r6, [r1, #0]
   1aa84:	9613      	str	r6, [sp, #76]	; 0x4c
   1aa86:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   1aa88:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   1aa8c:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   1aa90:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   1aa94:	680e      	ldr	r6, [r1, #0]
   1aa96:	9614      	str	r6, [sp, #80]	; 0x50
   1aa98:	9e14      	ldr	r6, [sp, #80]	; 0x50
   1aa9a:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   1aa9e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   1aaa2:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   1aaa6:	f8da 3000 	ldr.w	r3, [sl]
   1aaaa:	6809      	ldr	r1, [r1, #0]
   1aaac:	015b      	lsls	r3, r3, #5
   1aaae:	9115      	str	r1, [sp, #84]	; 0x54
   1aab0:	b2db      	uxtb	r3, r3
   1aab2:	9915      	ldr	r1, [sp, #84]	; 0x54
   1aab4:	6022      	str	r2, [r4, #0]
   1aab6:	f8c9 0000 	str.w	r0, [r9]
   1aaba:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   1aabe:	f8c5 c184 	str.w	ip, [r5, #388]	; 0x184
   1aac2:	f8c5 c004 	str.w	ip, [r5, #4]
   1aac6:	9204      	str	r2, [sp, #16]
   1aac8:	f8c7 2610 	str.w	r2, [r7, #1552]	; 0x610
   1aacc:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
   1aad0:	9304      	str	r3, [sp, #16]
   1aad2:	9b04      	ldr	r3, [sp, #16]
   1aad4:	f8d9 3000 	ldr.w	r3, [r9]
   1aad8:	4283      	cmp	r3, r0
   1aada:	d10f      	bne.n	1aafc <rpc_transport_ipc_rx_init+0x1f0>
   1aadc:	2614      	movs	r6, #20
   1aade:	4d1a      	ldr	r5, [pc, #104]	; (1ab48 <rpc_transport_ipc_rx_init+0x23c>)
   1aae0:	e000      	b.n	1aae4 <rpc_transport_ipc_rx_init+0x1d8>
   1aae2:	b15d      	cbz	r5, 1aafc <rpc_transport_ipc_rx_init+0x1f0>
   1aae4:	a903      	add	r1, sp, #12
   1aae6:	2000      	movs	r0, #0
   1aae8:	9603      	str	r6, [sp, #12]
   1aaea:	f7fb ff57 	bl	1699c <bsd_os_timedwait>
   1aaee:	9b03      	ldr	r3, [sp, #12]
   1aaf0:	f8d9 2000 	ldr.w	r2, [r9]
   1aaf4:	3b14      	subs	r3, #20
   1aaf6:	2a01      	cmp	r2, #1
   1aaf8:	441d      	add	r5, r3
   1aafa:	d0f2      	beq.n	1aae2 <rpc_transport_ipc_rx_init+0x1d6>
   1aafc:	f8d9 3000 	ldr.w	r3, [r9]
   1ab00:	2b01      	cmp	r3, #1
   1ab02:	bf0a      	itet	eq
   1ab04:	200d      	moveq	r0, #13
   1ab06:	6820      	ldrne	r0, [r4, #0]
   1ab08:	6020      	streq	r0, [r4, #0]
   1ab0a:	b017      	add	sp, #92	; 0x5c
   1ab0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab10:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1ab14:	b017      	add	sp, #92	; 0x5c
   1ab16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab1a:	f24c 0009 	movw	r0, #49161	; 0xc009
   1ab1e:	b017      	add	sp, #92	; 0x5c
   1ab20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab24:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1ab28:	4770      	bx	lr
   1ab2a:	bf00      	nop
   1ab2c:	4002a000 	.word	0x4002a000
   1ab30:	4002a610 	.word	0x4002a610
   1ab34:	4002a614 	.word	0x4002a614
   1ab38:	4002a590 	.word	0x4002a590
   1ab3c:	40005000 	.word	0x40005000
   1ab40:	200217e8 	.word	0x200217e8
   1ab44:	e000e100 	.word	0xe000e100
   1ab48:	000249f0 	.word	0x000249f0
   1ab4c:	200217ec 	.word	0x200217ec
   1ab50:	200217fc 	.word	0x200217fc
   1ab54:	200217f8 	.word	0x200217f8

0001ab58 <rpc_transport_ipc_msg_free>:
   1ab58:	b470      	push	{r4, r5, r6}
   1ab5a:	4e17      	ldr	r6, [pc, #92]	; (1abb8 <rpc_transport_ipc_msg_free+0x60>)
   1ab5c:	6831      	ldr	r1, [r6, #0]
   1ab5e:	680d      	ldr	r5, [r1, #0]
   1ab60:	b1ad      	cbz	r5, 1ab8e <rpc_transport_ipc_msg_free+0x36>
   1ab62:	688b      	ldr	r3, [r1, #8]
   1ab64:	4283      	cmp	r3, r0
   1ab66:	d024      	beq.n	1abb2 <rpc_transport_ipc_msg_free+0x5a>
   1ab68:	2300      	movs	r3, #0
   1ab6a:	3301      	adds	r3, #1
   1ab6c:	00da      	lsls	r2, r3, #3
   1ab6e:	429d      	cmp	r5, r3
   1ab70:	eb01 0402 	add.w	r4, r1, r2
   1ab74:	d00b      	beq.n	1ab8e <rpc_transport_ipc_msg_free+0x36>
   1ab76:	68a4      	ldr	r4, [r4, #8]
   1ab78:	42a0      	cmp	r0, r4
   1ab7a:	d1f6      	bne.n	1ab6a <rpc_transport_ipc_msg_free+0x12>
   1ab7c:	3204      	adds	r2, #4
   1ab7e:	588b      	ldr	r3, [r1, r2]
   1ab80:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1ab84:	f043 0303 	orr.w	r3, r3, #3
   1ab88:	508b      	str	r3, [r1, r2]
   1ab8a:	bc70      	pop	{r4, r5, r6}
   1ab8c:	4770      	bx	lr
   1ab8e:	6871      	ldr	r1, [r6, #4]
   1ab90:	680d      	ldr	r5, [r1, #0]
   1ab92:	2d00      	cmp	r5, #0
   1ab94:	d0f9      	beq.n	1ab8a <rpc_transport_ipc_msg_free+0x32>
   1ab96:	688b      	ldr	r3, [r1, #8]
   1ab98:	4283      	cmp	r3, r0
   1ab9a:	d00a      	beq.n	1abb2 <rpc_transport_ipc_msg_free+0x5a>
   1ab9c:	2300      	movs	r3, #0
   1ab9e:	3301      	adds	r3, #1
   1aba0:	00da      	lsls	r2, r3, #3
   1aba2:	429d      	cmp	r5, r3
   1aba4:	eb01 0402 	add.w	r4, r1, r2
   1aba8:	d0ef      	beq.n	1ab8a <rpc_transport_ipc_msg_free+0x32>
   1abaa:	68a4      	ldr	r4, [r4, #8]
   1abac:	42a0      	cmp	r0, r4
   1abae:	d1f6      	bne.n	1ab9e <rpc_transport_ipc_msg_free+0x46>
   1abb0:	e7e4      	b.n	1ab7c <rpc_transport_ipc_msg_free+0x24>
   1abb2:	2204      	movs	r2, #4
   1abb4:	e7e3      	b.n	1ab7e <rpc_transport_ipc_msg_free+0x26>
   1abb6:	bf00      	nop
   1abb8:	200217f0 	.word	0x200217f0

0001abbc <rpc_transport_ipc_tx_init>:
   1abbc:	2800      	cmp	r0, #0
   1abbe:	f000 80b8 	beq.w	1ad32 <rpc_transport_ipc_tx_init+0x176>
   1abc2:	2900      	cmp	r1, #0
   1abc4:	f000 80b5 	beq.w	1ad32 <rpc_transport_ipc_tx_init+0x176>
   1abc8:	2a00      	cmp	r2, #0
   1abca:	f000 80b2 	beq.w	1ad32 <rpc_transport_ipc_tx_init+0x176>
   1abce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1abd2:	6a04      	ldr	r4, [r0, #32]
   1abd4:	b085      	sub	sp, #20
   1abd6:	2c00      	cmp	r4, #0
   1abd8:	f000 80a6 	beq.w	1ad28 <rpc_transport_ipc_tx_init+0x16c>
   1abdc:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1abde:	2800      	cmp	r0, #0
   1abe0:	f000 80a2 	beq.w	1ad28 <rpc_transport_ipc_tx_init+0x16c>
   1abe4:	f642 4587 	movw	r5, #11399	; 0x2c87
   1abe8:	f04f 0a00 	mov.w	sl, #0
   1abec:	4e55      	ldr	r6, [pc, #340]	; (1ad44 <rpc_transport_ipc_tx_init+0x188>)
   1abee:	42a8      	cmp	r0, r5
   1abf0:	f886 a000 	strb.w	sl, [r6]
   1abf4:	f240 80a0 	bls.w	1ad38 <rpc_transport_ipc_tx_init+0x17c>
   1abf8:	2708      	movs	r7, #8
   1abfa:	f8df 9180 	ldr.w	r9, [pc, #384]	; 1ad7c <rpc_transport_ipc_tx_init+0x1c0>
   1abfe:	4620      	mov	r0, r4
   1ac00:	4616      	mov	r6, r2
   1ac02:	460d      	mov	r5, r1
   1ac04:	2244      	movs	r2, #68	; 0x44
   1ac06:	4651      	mov	r1, sl
   1ac08:	f8c9 4000 	str.w	r4, [r9]
   1ac0c:	f00b fbf4 	bl	263f8 <memset>
   1ac10:	f8d9 2000 	ldr.w	r2, [r9]
   1ac14:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1ac18:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1ad80 <rpc_transport_ipc_tx_init+0x1c4>
   1ac1c:	f882 a001 	strb.w	sl, [r2, #1]
   1ac20:	f882 a002 	strb.w	sl, [r2, #2]
   1ac24:	f882 a003 	strb.w	sl, [r2, #3]
   1ac28:	7017      	strb	r7, [r2, #0]
   1ac2a:	4618      	mov	r0, r3
   1ac2c:	2244      	movs	r2, #68	; 0x44
   1ac2e:	4651      	mov	r1, sl
   1ac30:	f8c8 3000 	str.w	r3, [r8]
   1ac34:	f00b fbe0 	bl	263f8 <memset>
   1ac38:	f8d8 2000 	ldr.w	r2, [r8]
   1ac3c:	f104 0388 	add.w	r3, r4, #136	; 0x88
   1ac40:	f8df b140 	ldr.w	fp, [pc, #320]	; 1ad84 <rpc_transport_ipc_tx_init+0x1c8>
   1ac44:	7017      	strb	r7, [r2, #0]
   1ac46:	f882 a001 	strb.w	sl, [r2, #1]
   1ac4a:	f882 a002 	strb.w	sl, [r2, #2]
   1ac4e:	f882 a003 	strb.w	sl, [r2, #3]
   1ac52:	4618      	mov	r0, r3
   1ac54:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ac58:	4651      	mov	r1, sl
   1ac5a:	f8cb 3000 	str.w	r3, [fp]
   1ac5e:	f00b fbcb 	bl	263f8 <memset>
   1ac62:	4b39      	ldr	r3, [pc, #228]	; (1ad48 <rpc_transport_ipc_tx_init+0x18c>)
   1ac64:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   1ac68:	f8c3 c000 	str.w	ip, [r3]
   1ac6c:	4651      	mov	r1, sl
   1ac6e:	4660      	mov	r0, ip
   1ac70:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ac74:	f00b fbc0 	bl	263f8 <memset>
   1ac78:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   1ac7c:	2106      	movs	r1, #6
   1ac7e:	f04f 0e01 	mov.w	lr, #1
   1ac82:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   1ac86:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   1ac8a:	4b30      	ldr	r3, [pc, #192]	; (1ad4c <rpc_transport_ipc_tx_init+0x190>)
   1ac8c:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   1ac90:	605c      	str	r4, [r3, #4]
   1ac92:	4c2f      	ldr	r4, [pc, #188]	; (1ad50 <rpc_transport_ipc_tx_init+0x194>)
   1ac94:	f8c3 c008 	str.w	ip, [r3, #8]
   1ac98:	8199      	strh	r1, [r3, #12]
   1ac9a:	f8a3 e000 	strh.w	lr, [r3]
   1ac9e:	4619      	mov	r1, r3
   1aca0:	611c      	str	r4, [r3, #16]
   1aca2:	4b2c      	ldr	r3, [pc, #176]	; (1ad54 <rpc_transport_ipc_tx_init+0x198>)
   1aca4:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 1ad88 <rpc_transport_ipc_tx_init+0x1cc>
   1aca8:	6120      	str	r0, [r4, #16]
   1acaa:	482b      	ldr	r0, [pc, #172]	; (1ad58 <rpc_transport_ipc_tx_init+0x19c>)
   1acac:	6063      	str	r3, [r4, #4]
   1acae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   1acb2:	60a0      	str	r0, [r4, #8]
   1acb4:	f8c4 c000 	str.w	ip, [r4]
   1acb8:	4828      	ldr	r0, [pc, #160]	; (1ad5c <rpc_transport_ipc_tx_init+0x1a0>)
   1acba:	60e3      	str	r3, [r4, #12]
   1acbc:	6162      	str	r2, [r4, #20]
   1acbe:	f006 f9a5 	bl	2100c <nrf_mem_register>
   1acc2:	2800      	cmp	r0, #0
   1acc4:	d132      	bne.n	1ad2c <rpc_transport_ipc_tx_init+0x170>
   1acc6:	f04f 0c02 	mov.w	ip, #2
   1acca:	2420      	movs	r4, #32
   1accc:	f8d9 1000 	ldr.w	r1, [r9]
   1acd0:	f8db 2000 	ldr.w	r2, [fp]
   1acd4:	6029      	str	r1, [r5, #0]
   1acd6:	4b1c      	ldr	r3, [pc, #112]	; (1ad48 <rpc_transport_ipc_tx_init+0x18c>)
   1acd8:	f8d8 1000 	ldr.w	r1, [r8]
   1acdc:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 1ad8c <rpc_transport_ipc_tx_init+0x1d0>
   1ace0:	4d1f      	ldr	r5, [pc, #124]	; (1ad60 <rpc_transport_ipc_tx_init+0x1a4>)
   1ace2:	6031      	str	r1, [r6, #0]
   1ace4:	f8ce 2000 	str.w	r2, [lr]
   1ace8:	681b      	ldr	r3, [r3, #0]
   1acea:	491e      	ldr	r1, [pc, #120]	; (1ad64 <rpc_transport_ipc_tx_init+0x1a8>)
   1acec:	f502 7200 	add.w	r2, r2, #512	; 0x200
   1acf0:	602a      	str	r2, [r5, #0]
   1acf2:	4e1d      	ldr	r6, [pc, #116]	; (1ad68 <rpc_transport_ipc_tx_init+0x1ac>)
   1acf4:	4a1d      	ldr	r2, [pc, #116]	; (1ad6c <rpc_transport_ipc_tx_init+0x1b0>)
   1acf6:	4d1e      	ldr	r5, [pc, #120]	; (1ad70 <rpc_transport_ipc_tx_init+0x1b4>)
   1acf8:	600b      	str	r3, [r1, #0]
   1acfa:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1acfe:	491d      	ldr	r1, [pc, #116]	; (1ad74 <rpc_transport_ipc_tx_init+0x1b8>)
   1ad00:	6033      	str	r3, [r6, #0]
   1ad02:	8028      	strh	r0, [r5, #0]
   1ad04:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   1ad08:	6809      	ldr	r1, [r1, #0]
   1ad0a:	4b1b      	ldr	r3, [pc, #108]	; (1ad78 <rpc_transport_ipc_tx_init+0x1bc>)
   1ad0c:	9103      	str	r1, [sp, #12]
   1ad0e:	9903      	ldr	r1, [sp, #12]
   1ad10:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   1ad14:	6819      	ldr	r1, [r3, #0]
   1ad16:	443b      	add	r3, r7
   1ad18:	9102      	str	r1, [sp, #8]
   1ad1a:	9902      	ldr	r1, [sp, #8]
   1ad1c:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   1ad20:	681b      	ldr	r3, [r3, #0]
   1ad22:	9301      	str	r3, [sp, #4]
   1ad24:	9b01      	ldr	r3, [sp, #4]
   1ad26:	e001      	b.n	1ad2c <rpc_transport_ipc_tx_init+0x170>
   1ad28:	f24c 0007 	movw	r0, #49159	; 0xc007
   1ad2c:	b005      	add	sp, #20
   1ad2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad32:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1ad36:	4770      	bx	lr
   1ad38:	f24c 0004 	movw	r0, #49156	; 0xc004
   1ad3c:	b005      	add	sp, #20
   1ad3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad42:	bf00      	nop
   1ad44:	20026298 	.word	0x20026298
   1ad48:	20021828 	.word	0x20021828
   1ad4c:	20021814 	.word	0x20021814
   1ad50:	20021838 	.word	0x20021838
   1ad54:	00040080 	.word	0x00040080
   1ad58:	00040100 	.word	0x00040100
   1ad5c:	20021800 	.word	0x20021800
   1ad60:	2002180c 	.word	0x2002180c
   1ad64:	20021808 	.word	0x20021808
   1ad68:	20021804 	.word	0x20021804
   1ad6c:	4002a000 	.word	0x4002a000
   1ad70:	200242c6 	.word	0x200242c6
   1ad74:	4002a514 	.word	0x4002a514
   1ad78:	4002a51c 	.word	0x4002a51c
   1ad7c:	20021834 	.word	0x20021834
   1ad80:	2002182c 	.word	0x2002182c
   1ad84:	20021830 	.word	0x20021830
   1ad88:	00080040 	.word	0x00080040
   1ad8c:	20021810 	.word	0x20021810

0001ad90 <rpc_transport_ipc_send>:
   1ad90:	2800      	cmp	r0, #0
   1ad92:	d061      	beq.n	1ae58 <rpc_transport_ipc_send+0xc8>
   1ad94:	b4f0      	push	{r4, r5, r6, r7}
   1ad96:	4b34      	ldr	r3, [pc, #208]	; (1ae68 <rpc_transport_ipc_send+0xd8>)
   1ad98:	b082      	sub	sp, #8
   1ad9a:	681a      	ldr	r2, [r3, #0]
   1ad9c:	4b33      	ldr	r3, [pc, #204]	; (1ae6c <rpc_transport_ipc_send+0xdc>)
   1ad9e:	4282      	cmp	r2, r0
   1ada0:	d81e      	bhi.n	1ade0 <rpc_transport_ipc_send+0x50>
   1ada2:	681b      	ldr	r3, [r3, #0]
   1ada4:	4932      	ldr	r1, [pc, #200]	; (1ae70 <rpc_transport_ipc_send+0xe0>)
   1ada6:	4283      	cmp	r3, r0
   1ada8:	6809      	ldr	r1, [r1, #0]
   1adaa:	d803      	bhi.n	1adb4 <rpc_transport_ipc_send+0x24>
   1adac:	4c31      	ldr	r4, [pc, #196]	; (1ae74 <rpc_transport_ipc_send+0xe4>)
   1adae:	6824      	ldr	r4, [r4, #0]
   1adb0:	4284      	cmp	r4, r0
   1adb2:	d849      	bhi.n	1ae48 <rpc_transport_ipc_send+0xb8>
   1adb4:	4281      	cmp	r1, r0
   1adb6:	d90e      	bls.n	1add6 <rpc_transport_ipc_send+0x46>
   1adb8:	4b2f      	ldr	r3, [pc, #188]	; (1ae78 <rpc_transport_ipc_send+0xe8>)
   1adba:	781b      	ldrb	r3, [r3, #0]
   1adbc:	2b00      	cmp	r3, #0
   1adbe:	d14e      	bne.n	1ae5e <rpc_transport_ipc_send+0xce>
   1adc0:	1a83      	subs	r3, r0, r2
   1adc2:	492e      	ldr	r1, [pc, #184]	; (1ae7c <rpc_transport_ipc_send+0xec>)
   1adc4:	099f      	lsrs	r7, r3, #6
   1adc6:	069b      	lsls	r3, r3, #26
   1adc8:	680a      	ldr	r2, [r1, #0]
   1adca:	4d2d      	ldr	r5, [pc, #180]	; (1ae80 <rpc_transport_ipc_send+0xf0>)
   1adcc:	f04f 0403 	mov.w	r4, #3
   1add0:	f04f 0602 	mov.w	r6, #2
   1add4:	d014      	beq.n	1ae00 <rpc_transport_ipc_send+0x70>
   1add6:	f24c 0010 	movw	r0, #49168	; 0xc010
   1adda:	b002      	add	sp, #8
   1addc:	bcf0      	pop	{r4, r5, r6, r7}
   1adde:	4770      	bx	lr
   1ade0:	681b      	ldr	r3, [r3, #0]
   1ade2:	4298      	cmp	r0, r3
   1ade4:	d3f7      	bcc.n	1add6 <rpc_transport_ipc_send+0x46>
   1ade6:	4a23      	ldr	r2, [pc, #140]	; (1ae74 <rpc_transport_ipc_send+0xe4>)
   1ade8:	6812      	ldr	r2, [r2, #0]
   1adea:	4290      	cmp	r0, r2
   1adec:	d2f3      	bcs.n	1add6 <rpc_transport_ipc_send+0x46>
   1adee:	2401      	movs	r4, #1
   1adf0:	1ac3      	subs	r3, r0, r3
   1adf2:	4a24      	ldr	r2, [pc, #144]	; (1ae84 <rpc_transport_ipc_send+0xf4>)
   1adf4:	099f      	lsrs	r7, r3, #6
   1adf6:	069b      	lsls	r3, r3, #26
   1adf8:	4626      	mov	r6, r4
   1adfa:	6812      	ldr	r2, [r2, #0]
   1adfc:	4d22      	ldr	r5, [pc, #136]	; (1ae88 <rpc_transport_ipc_send+0xf8>)
   1adfe:	d1ea      	bne.n	1add6 <rpc_transport_ipc_send+0x46>
   1ae00:	6841      	ldr	r1, [r0, #4]
   1ae02:	b2c9      	uxtb	r1, r1
   1ae04:	428e      	cmp	r6, r1
   1ae06:	d122      	bne.n	1ae4e <rpc_transport_ipc_send+0xbe>
   1ae08:	2020      	movs	r0, #32
   1ae0a:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
   1ae0e:	491f      	ldr	r1, [pc, #124]	; (1ae8c <rpc_transport_ipc_send+0xfc>)
   1ae10:	685a      	ldr	r2, [r3, #4]
   1ae12:	880e      	ldrh	r6, [r1, #0]
   1ae14:	b292      	uxth	r2, r2
   1ae16:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   1ae1a:	605a      	str	r2, [r3, #4]
   1ae1c:	685a      	ldr	r2, [r3, #4]
   1ae1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1ae22:	f042 0201 	orr.w	r2, r2, #1
   1ae26:	605a      	str	r2, [r3, #4]
   1ae28:	bf00      	nop
   1ae2a:	3801      	subs	r0, #1
   1ae2c:	d1fc      	bne.n	1ae28 <rpc_transport_ipc_send+0x98>
   1ae2e:	2201      	movs	r2, #1
   1ae30:	4b17      	ldr	r3, [pc, #92]	; (1ae90 <rpc_transport_ipc_send+0x100>)
   1ae32:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1ae36:	682a      	ldr	r2, [r5, #0]
   1ae38:	880b      	ldrh	r3, [r1, #0]
   1ae3a:	9201      	str	r2, [sp, #4]
   1ae3c:	9a01      	ldr	r2, [sp, #4]
   1ae3e:	3301      	adds	r3, #1
   1ae40:	800b      	strh	r3, [r1, #0]
   1ae42:	b002      	add	sp, #8
   1ae44:	bcf0      	pop	{r4, r5, r6, r7}
   1ae46:	4770      	bx	lr
   1ae48:	4281      	cmp	r1, r0
   1ae4a:	d9d0      	bls.n	1adee <rpc_transport_ipc_send+0x5e>
   1ae4c:	e7b4      	b.n	1adb8 <rpc_transport_ipc_send+0x28>
   1ae4e:	f24c 0007 	movw	r0, #49159	; 0xc007
   1ae52:	b002      	add	sp, #8
   1ae54:	bcf0      	pop	{r4, r5, r6, r7}
   1ae56:	4770      	bx	lr
   1ae58:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1ae5c:	4770      	bx	lr
   1ae5e:	f24c 000f 	movw	r0, #49167	; 0xc00f
   1ae62:	b002      	add	sp, #8
   1ae64:	bcf0      	pop	{r4, r5, r6, r7}
   1ae66:	4770      	bx	lr
   1ae68:	20021810 	.word	0x20021810
   1ae6c:	20021808 	.word	0x20021808
   1ae70:	2002180c 	.word	0x2002180c
   1ae74:	20021804 	.word	0x20021804
   1ae78:	20026298 	.word	0x20026298
   1ae7c:	20021834 	.word	0x20021834
   1ae80:	4002a00c 	.word	0x4002a00c
   1ae84:	2002182c 	.word	0x2002182c
   1ae88:	4002a004 	.word	0x4002a004
   1ae8c:	200242c6 	.word	0x200242c6
   1ae90:	4002a000 	.word	0x4002a000

0001ae94 <rpc_transport_ipc_tx_rpc_data_alloc>:
   1ae94:	4b18      	ldr	r3, [pc, #96]	; (1aef8 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   1ae96:	781b      	ldrb	r3, [r3, #0]
   1ae98:	bb63      	cbnz	r3, 1aef4 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   1ae9a:	b4f0      	push	{r4, r5, r6, r7}
   1ae9c:	4a17      	ldr	r2, [pc, #92]	; (1aefc <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   1ae9e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1aea2:	6814      	ldr	r4, [r2, #0]
   1aea4:	4b16      	ldr	r3, [pc, #88]	; (1af00 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   1aea6:	6825      	ldr	r5, [r4, #0]
   1aea8:	681e      	ldr	r6, [r3, #0]
   1aeaa:	b1a5      	cbz	r5, 1aed6 <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   1aeac:	4607      	mov	r7, r0
   1aeae:	00c1      	lsls	r1, r0, #3
   1aeb0:	1863      	adds	r3, r4, r1
   1aeb2:	685a      	ldr	r2, [r3, #4]
   1aeb4:	b2d2      	uxtb	r2, r2
   1aeb6:	2a03      	cmp	r2, #3
   1aeb8:	d104      	bne.n	1aec4 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   1aeba:	609f      	str	r7, [r3, #8]
   1aebc:	685a      	ldr	r2, [r3, #4]
   1aebe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1aec2:	605a      	str	r2, [r3, #4]
   1aec4:	685a      	ldr	r2, [r3, #4]
   1aec6:	f012 0fff 	tst.w	r2, #255	; 0xff
   1aeca:	d101      	bne.n	1aed0 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   1aecc:	689b      	ldr	r3, [r3, #8]
   1aece:	b12b      	cbz	r3, 1aedc <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   1aed0:	3001      	adds	r0, #1
   1aed2:	42a8      	cmp	r0, r5
   1aed4:	d1eb      	bne.n	1aeae <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   1aed6:	2000      	movs	r0, #0
   1aed8:	bcf0      	pop	{r4, r5, r6, r7}
   1aeda:	4770      	bx	lr
   1aedc:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   1aee0:	4421      	add	r1, r4
   1aee2:	6088      	str	r0, [r1, #8]
   1aee4:	6843      	ldr	r3, [r0, #4]
   1aee6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1aeea:	f043 0302 	orr.w	r3, r3, #2
   1aeee:	6043      	str	r3, [r0, #4]
   1aef0:	bcf0      	pop	{r4, r5, r6, r7}
   1aef2:	4770      	bx	lr
   1aef4:	2000      	movs	r0, #0
   1aef6:	4770      	bx	lr
   1aef8:	20026298 	.word	0x20026298
   1aefc:	20021834 	.word	0x20021834
   1af00:	20021830 	.word	0x20021830

0001af04 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   1af04:	b4f0      	push	{r4, r5, r6, r7}
   1af06:	4a15      	ldr	r2, [pc, #84]	; (1af5c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   1af08:	4b15      	ldr	r3, [pc, #84]	; (1af60 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   1af0a:	6814      	ldr	r4, [r2, #0]
   1af0c:	681e      	ldr	r6, [r3, #0]
   1af0e:	6825      	ldr	r5, [r4, #0]
   1af10:	b1ad      	cbz	r5, 1af3e <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   1af12:	2000      	movs	r0, #0
   1af14:	4607      	mov	r7, r0
   1af16:	00c1      	lsls	r1, r0, #3
   1af18:	1863      	adds	r3, r4, r1
   1af1a:	685a      	ldr	r2, [r3, #4]
   1af1c:	b2d2      	uxtb	r2, r2
   1af1e:	2a03      	cmp	r2, #3
   1af20:	d104      	bne.n	1af2c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   1af22:	609f      	str	r7, [r3, #8]
   1af24:	685a      	ldr	r2, [r3, #4]
   1af26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1af2a:	605a      	str	r2, [r3, #4]
   1af2c:	685a      	ldr	r2, [r3, #4]
   1af2e:	f012 0fff 	tst.w	r2, #255	; 0xff
   1af32:	d101      	bne.n	1af38 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   1af34:	689b      	ldr	r3, [r3, #8]
   1af36:	b12b      	cbz	r3, 1af44 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   1af38:	3001      	adds	r0, #1
   1af3a:	4285      	cmp	r5, r0
   1af3c:	d1eb      	bne.n	1af16 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   1af3e:	2000      	movs	r0, #0
   1af40:	bcf0      	pop	{r4, r5, r6, r7}
   1af42:	4770      	bx	lr
   1af44:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   1af48:	4421      	add	r1, r4
   1af4a:	6088      	str	r0, [r1, #8]
   1af4c:	6843      	ldr	r3, [r0, #4]
   1af4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1af52:	f043 0301 	orr.w	r3, r3, #1
   1af56:	6043      	str	r3, [r0, #4]
   1af58:	bcf0      	pop	{r4, r5, r6, r7}
   1af5a:	4770      	bx	lr
   1af5c:	2002182c 	.word	0x2002182c
   1af60:	20021828 	.word	0x20021828

0001af64 <rpc_transport_ipc_tx_data_alloc>:
   1af64:	4b03      	ldr	r3, [pc, #12]	; (1af74 <rpc_transport_ipc_tx_data_alloc+0x10>)
   1af66:	781b      	ldrb	r3, [r3, #0]
   1af68:	b90b      	cbnz	r3, 1af6e <rpc_transport_ipc_tx_data_alloc+0xa>
   1af6a:	f006 ba2f 	b.w	213cc <nrf_shared_malloc>
   1af6e:	2000      	movs	r0, #0
   1af70:	4770      	bx	lr
   1af72:	bf00      	nop
   1af74:	20026298 	.word	0x20026298

0001af78 <rpc_transport_ipc_tx_suspend>:
   1af78:	2201      	movs	r2, #1
   1af7a:	4b01      	ldr	r3, [pc, #4]	; (1af80 <rpc_transport_ipc_tx_suspend+0x8>)
   1af7c:	701a      	strb	r2, [r3, #0]
   1af7e:	4770      	bx	lr
   1af80:	20026298 	.word	0x20026298

0001af84 <secure_client_socket>:
   1af84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1af88:	f04f 3cff 	mov.w	ip, #4294967295
   1af8c:	460c      	mov	r4, r1
   1af8e:	680b      	ldr	r3, [r1, #0]
   1af90:	4f45      	ldr	r7, [pc, #276]	; (1b0a8 <secure_client_socket+0x124>)
   1af92:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1af96:	600b      	str	r3, [r1, #0]
   1af98:	680b      	ldr	r3, [r1, #0]
   1af9a:	00c6      	lsls	r6, r0, #3
   1af9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1afa0:	600b      	str	r3, [r1, #0]
   1afa2:	eb07 0a06 	add.w	sl, r7, r6
   1afa6:	b084      	sub	sp, #16
   1afa8:	f8da 3004 	ldr.w	r3, [sl, #4]
   1afac:	6989      	ldr	r1, [r1, #24]
   1afae:	f247 0281 	movw	r2, #28801	; 0x7081
   1afb2:	4605      	mov	r5, r0
   1afb4:	f8d4 8000 	ldr.w	r8, [r4]
   1afb8:	e9cd cc02 	strd	ip, ip, [sp, #8]
   1afbc:	f000 fd76 	bl	1baac <ip_interface_request_create>
   1afc0:	2800      	cmp	r0, #0
   1afc2:	d06c      	beq.n	1b09e <secure_client_socket+0x11a>
   1afc4:	f8da 2004 	ldr.w	r2, [sl, #4]
   1afc8:	4681      	mov	r9, r0
   1afca:	2a00      	cmp	r2, #0
   1afcc:	d15c      	bne.n	1b088 <secure_client_socket+0x104>
   1afce:	4b37      	ldr	r3, [pc, #220]	; (1b0ac <secure_client_socket+0x128>)
   1afd0:	1971      	adds	r1, r6, r5
   1afd2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1afd6:	2224      	movs	r2, #36	; 0x24
   1afd8:	f109 0014 	add.w	r0, r9, #20
   1afdc:	f7f1 fdb6 	bl	cb4c <memcpy>
   1afe0:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1afe4:	4649      	mov	r1, r9
   1afe6:	3324      	adds	r3, #36	; 0x24
   1afe8:	f8c9 3008 	str.w	r3, [r9, #8]
   1afec:	6822      	ldr	r2, [r4, #0]
   1afee:	4643      	mov	r3, r8
   1aff0:	0c12      	lsrs	r2, r2, #16
   1aff2:	0412      	lsls	r2, r2, #16
   1aff4:	f042 020a 	orr.w	r2, r2, #10
   1aff8:	6022      	str	r2, [r4, #0]
   1affa:	4620      	mov	r0, r4
   1affc:	f247 0281 	movw	r2, #28801	; 0x7081
   1b000:	f000 fd74 	bl	1baec <ip_interface_request_send>
   1b004:	4603      	mov	r3, r0
   1b006:	b968      	cbnz	r0, 1b024 <secure_client_socket+0xa0>
   1b008:	6823      	ldr	r3, [r4, #0]
   1b00a:	00db      	lsls	r3, r3, #3
   1b00c:	d40e      	bmi.n	1b02c <secure_client_socket+0xa8>
   1b00e:	ab03      	add	r3, sp, #12
   1b010:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b014:	210b      	movs	r1, #11
   1b016:	4628      	mov	r0, r5
   1b018:	f000 fd7c 	bl	1bb14 <ip_interface_wait>
   1b01c:	4603      	mov	r3, r0
   1b01e:	b150      	cbz	r0, 1b036 <secure_client_socket+0xb2>
   1b020:	f8c4 8000 	str.w	r8, [r4]
   1b024:	4618      	mov	r0, r3
   1b026:	b004      	add	sp, #16
   1b028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b02c:	2373      	movs	r3, #115	; 0x73
   1b02e:	4618      	mov	r0, r3
   1b030:	b004      	add	sp, #16
   1b032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b036:	220c      	movs	r2, #12
   1b038:	ab02      	add	r3, sp, #8
   1b03a:	4611      	mov	r1, r2
   1b03c:	4628      	mov	r0, r5
   1b03e:	f000 fd69 	bl	1bb14 <ip_interface_wait>
   1b042:	4603      	mov	r3, r0
   1b044:	bb30      	cbnz	r0, 1b094 <secure_client_socket+0x110>
   1b046:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   1b04a:	b138      	cbz	r0, 1b05c <secure_client_socket+0xd8>
   1b04c:	9301      	str	r3, [sp, #4]
   1b04e:	f006 f901 	bl	21254 <nrf_free>
   1b052:	9b01      	ldr	r3, [sp, #4]
   1b054:	443e      	add	r6, r7
   1b056:	6073      	str	r3, [r6, #4]
   1b058:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   1b05c:	4618      	mov	r0, r3
   1b05e:	6822      	ldr	r2, [r4, #0]
   1b060:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   1b064:	6022      	str	r2, [r4, #0]
   1b066:	6822      	ldr	r2, [r4, #0]
   1b068:	0c12      	lsrs	r2, r2, #16
   1b06a:	0412      	lsls	r2, r2, #16
   1b06c:	f042 020c 	orr.w	r2, r2, #12
   1b070:	6022      	str	r2, [r4, #0]
   1b072:	6822      	ldr	r2, [r4, #0]
   1b074:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1b078:	6022      	str	r2, [r4, #0]
   1b07a:	6822      	ldr	r2, [r4, #0]
   1b07c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1b080:	6022      	str	r2, [r4, #0]
   1b082:	b004      	add	sp, #16
   1b084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b088:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   1b08c:	6800      	ldr	r0, [r0, #0]
   1b08e:	f7f1 fd5d 	bl	cb4c <memcpy>
   1b092:	e79c      	b.n	1afce <secure_client_socket+0x4a>
   1b094:	2b73      	cmp	r3, #115	; 0x73
   1b096:	d0c5      	beq.n	1b024 <secure_client_socket+0xa0>
   1b098:	f8c4 8000 	str.w	r8, [r4]
   1b09c:	e7c2      	b.n	1b024 <secure_client_socket+0xa0>
   1b09e:	230c      	movs	r3, #12
   1b0a0:	4618      	mov	r0, r3
   1b0a2:	b004      	add	sp, #16
   1b0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b0a8:	20021994 	.word	0x20021994
   1b0ac:	20021850 	.word	0x20021850

0001b0b0 <tls_interface_init>:
   1b0b0:	2201      	movs	r2, #1
   1b0b2:	4b02      	ldr	r3, [pc, #8]	; (1b0bc <tls_interface_init+0xc>)
   1b0b4:	2000      	movs	r0, #0
   1b0b6:	701a      	strb	r2, [r3, #0]
   1b0b8:	4770      	bx	lr
   1b0ba:	bf00      	nop
   1b0bc:	20026299 	.word	0x20026299

0001b0c0 <tls_interface_open>:
   1b0c0:	b538      	push	{r3, r4, r5, lr}
   1b0c2:	4b23      	ldr	r3, [pc, #140]	; (1b150 <tls_interface_open+0x90>)
   1b0c4:	781b      	ldrb	r3, [r3, #0]
   1b0c6:	2b00      	cmp	r3, #0
   1b0c8:	d03c      	beq.n	1b144 <tls_interface_open+0x84>
   1b0ca:	1e4b      	subs	r3, r1, #1
   1b0cc:	2b01      	cmp	r3, #1
   1b0ce:	d808      	bhi.n	1b0e2 <tls_interface_open+0x22>
   1b0d0:	4614      	mov	r4, r2
   1b0d2:	b162      	cbz	r2, 1b0ee <tls_interface_open+0x2e>
   1b0d4:	2901      	cmp	r1, #1
   1b0d6:	d02d      	beq.n	1b134 <tls_interface_open+0x74>
   1b0d8:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1b0dc:	bf08      	it	eq
   1b0de:	2202      	moveq	r2, #2
   1b0e0:	d00d      	beq.n	1b0fe <tls_interface_open+0x3e>
   1b0e2:	2029      	movs	r0, #41	; 0x29
   1b0e4:	f7fb fd12 	bl	16b0c <bsd_os_errno_set>
   1b0e8:	f04f 35ff 	mov.w	r5, #4294967295
   1b0ec:	e020      	b.n	1b130 <tls_interface_open+0x70>
   1b0ee:	2901      	cmp	r1, #1
   1b0f0:	bf0b      	itete	eq
   1b0f2:	2201      	moveq	r2, #1
   1b0f4:	2202      	movne	r2, #2
   1b0f6:	f44f 7482 	moveq.w	r4, #260	; 0x104
   1b0fa:	f44f 7487 	movne.w	r4, #270	; 0x10e
   1b0fe:	f000 fd3b 	bl	1bb78 <ip_interface_open>
   1b102:	1e05      	subs	r5, r0, #0
   1b104:	db1b      	blt.n	1b13e <tls_interface_open+0x7e>
   1b106:	4b13      	ldr	r3, [pc, #76]	; (1b154 <tls_interface_open+0x94>)
   1b108:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   1b10c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1b110:	2224      	movs	r2, #36	; 0x24
   1b112:	4911      	ldr	r1, [pc, #68]	; (1b158 <tls_interface_open+0x98>)
   1b114:	f7f1 fd1a 	bl	cb4c <memcpy>
   1b118:	4628      	mov	r0, r5
   1b11a:	f006 fd99 	bl	21c50 <interface_socket_from_handle_get>
   1b11e:	6803      	ldr	r3, [r0, #0]
   1b120:	6144      	str	r4, [r0, #20]
   1b122:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1b126:	6003      	str	r3, [r0, #0]
   1b128:	6803      	ldr	r3, [r0, #0]
   1b12a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1b12e:	6003      	str	r3, [r0, #0]
   1b130:	4628      	mov	r0, r5
   1b132:	bd38      	pop	{r3, r4, r5, pc}
   1b134:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1b138:	d1d3      	bne.n	1b0e2 <tls_interface_open+0x22>
   1b13a:	460a      	mov	r2, r1
   1b13c:	e7df      	b.n	1b0fe <tls_interface_open+0x3e>
   1b13e:	f04f 35ff 	mov.w	r5, #4294967295
   1b142:	e7f5      	b.n	1b130 <tls_interface_open+0x70>
   1b144:	2070      	movs	r0, #112	; 0x70
   1b146:	f7fb fce1 	bl	16b0c <bsd_os_errno_set>
   1b14a:	f04f 35ff 	mov.w	r5, #4294967295
   1b14e:	e7ef      	b.n	1b130 <tls_interface_open+0x70>
   1b150:	20026299 	.word	0x20026299
   1b154:	20021850 	.word	0x20021850
   1b158:	0002f5d4 	.word	0x0002f5d4

0001b15c <tls_interface_close>:
   1b15c:	b538      	push	{r3, r4, r5, lr}
   1b15e:	4604      	mov	r4, r0
   1b160:	f006 fd76 	bl	21c50 <interface_socket_from_handle_get>
   1b164:	b180      	cbz	r0, 1b188 <tls_interface_close+0x2c>
   1b166:	4d0b      	ldr	r5, [pc, #44]	; (1b194 <tls_interface_close+0x38>)
   1b168:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   1b16c:	b138      	cbz	r0, 1b17e <tls_interface_close+0x22>
   1b16e:	f006 f871 	bl	21254 <nrf_free>
   1b172:	2300      	movs	r3, #0
   1b174:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   1b178:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   1b17c:	6053      	str	r3, [r2, #4]
   1b17e:	4620      	mov	r0, r4
   1b180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b184:	f000 bdbe 	b.w	1bd04 <ip_interface_close>
   1b188:	2009      	movs	r0, #9
   1b18a:	f7fb fcbf 	bl	16b0c <bsd_os_errno_set>
   1b18e:	f04f 30ff 	mov.w	r0, #4294967295
   1b192:	bd38      	pop	{r3, r4, r5, pc}
   1b194:	20021994 	.word	0x20021994

0001b198 <tls_interface_sendto>:
   1b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b19c:	b087      	sub	sp, #28
   1b19e:	9103      	str	r1, [sp, #12]
   1b1a0:	4616      	mov	r6, r2
   1b1a2:	469b      	mov	fp, r3
   1b1a4:	4682      	mov	sl, r0
   1b1a6:	f006 fd53 	bl	21c50 <interface_socket_from_handle_get>
   1b1aa:	2800      	cmp	r0, #0
   1b1ac:	f000 8082 	beq.w	1b2b4 <tls_interface_sendto+0x11c>
   1b1b0:	2400      	movs	r4, #0
   1b1b2:	f01b 0f02 	tst.w	fp, #2
   1b1b6:	bf08      	it	eq
   1b1b8:	6807      	ldreq	r7, [r0, #0]
   1b1ba:	4a40      	ldr	r2, [pc, #256]	; (1b2bc <tls_interface_sendto+0x124>)
   1b1bc:	bf08      	it	eq
   1b1be:	f087 5780 	eoreq.w	r7, r7, #268435456	; 0x10000000
   1b1c2:	eb0a 09ca 	add.w	r9, sl, sl, lsl #3
   1b1c6:	4605      	mov	r5, r0
   1b1c8:	bf0c      	ite	eq
   1b1ca:	f3c7 7700 	ubfxeq	r7, r7, #28, #1
   1b1ce:	2700      	movne	r7, #0
   1b1d0:	46a0      	mov	r8, r4
   1b1d2:	f04f 33ff 	mov.w	r3, #4294967295
   1b1d6:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   1b1da:	e00f      	b.n	1b1fc <tls_interface_sendto+0x64>
   1b1dc:	f899 2000 	ldrb.w	r2, [r9]
   1b1e0:	2a02      	cmp	r2, #2
   1b1e2:	d061      	beq.n	1b2a8 <tls_interface_sendto+0x110>
   1b1e4:	692a      	ldr	r2, [r5, #16]
   1b1e6:	2a01      	cmp	r2, #1
   1b1e8:	d061      	beq.n	1b2ae <tls_interface_sendto+0x116>
   1b1ea:	2b00      	cmp	r3, #0
   1b1ec:	db30      	blt.n	1b250 <tls_interface_sendto+0xb8>
   1b1ee:	f1b8 0f00 	cmp.w	r8, #0
   1b1f2:	dc18      	bgt.n	1b226 <tls_interface_sendto+0x8e>
   1b1f4:	441c      	add	r4, r3
   1b1f6:	b1df      	cbz	r7, 1b230 <tls_interface_sendto+0x98>
   1b1f8:	42a6      	cmp	r6, r4
   1b1fa:	dd19      	ble.n	1b230 <tls_interface_sendto+0x98>
   1b1fc:	6829      	ldr	r1, [r5, #0]
   1b1fe:	1b32      	subs	r2, r6, r4
   1b200:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   1b204:	b289      	uxth	r1, r1
   1b206:	bfa8      	it	ge
   1b208:	f44f 6200 	movge.w	r2, #2048	; 0x800
   1b20c:	290c      	cmp	r1, #12
   1b20e:	d013      	beq.n	1b238 <tls_interface_sendto+0xa0>
   1b210:	6829      	ldr	r1, [r5, #0]
   1b212:	b289      	uxth	r1, r1
   1b214:	290b      	cmp	r1, #11
   1b216:	d0e1      	beq.n	1b1dc <tls_interface_sendto+0x44>
   1b218:	6929      	ldr	r1, [r5, #16]
   1b21a:	2901      	cmp	r1, #1
   1b21c:	d024      	beq.n	1b268 <tls_interface_sendto+0xd0>
   1b21e:	2902      	cmp	r1, #2
   1b220:	d01a      	beq.n	1b258 <tls_interface_sendto+0xc0>
   1b222:	f04f 0839 	mov.w	r8, #57	; 0x39
   1b226:	4640      	mov	r0, r8
   1b228:	f7fb fc70 	bl	16b0c <bsd_os_errno_set>
   1b22c:	f04f 34ff 	mov.w	r4, #4294967295
   1b230:	4620      	mov	r0, r4
   1b232:	b007      	add	sp, #28
   1b234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b238:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b23a:	9903      	ldr	r1, [sp, #12]
   1b23c:	9301      	str	r3, [sp, #4]
   1b23e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b240:	4421      	add	r1, r4
   1b242:	9300      	str	r3, [sp, #0]
   1b244:	4650      	mov	r0, sl
   1b246:	465b      	mov	r3, fp
   1b248:	f000 fdce 	bl	1bde8 <ip_interface_sendto>
   1b24c:	1e03      	subs	r3, r0, #0
   1b24e:	dad1      	bge.n	1b1f4 <tls_interface_sendto+0x5c>
   1b250:	f1b8 0f00 	cmp.w	r8, #0
   1b254:	ddea      	ble.n	1b22c <tls_interface_sendto+0x94>
   1b256:	e7e6      	b.n	1b226 <tls_interface_sendto+0x8e>
   1b258:	6829      	ldr	r1, [r5, #0]
   1b25a:	b289      	uxth	r1, r1
   1b25c:	2902      	cmp	r1, #2
   1b25e:	d007      	beq.n	1b270 <tls_interface_sendto+0xd8>
   1b260:	6829      	ldr	r1, [r5, #0]
   1b262:	b289      	uxth	r1, r1
   1b264:	2904      	cmp	r1, #4
   1b266:	d003      	beq.n	1b270 <tls_interface_sendto+0xd8>
   1b268:	6829      	ldr	r1, [r5, #0]
   1b26a:	b289      	uxth	r1, r1
   1b26c:	2905      	cmp	r1, #5
   1b26e:	d1d8      	bne.n	1b222 <tls_interface_sendto+0x8a>
   1b270:	f899 1000 	ldrb.w	r1, [r9]
   1b274:	2902      	cmp	r1, #2
   1b276:	d1b8      	bne.n	1b1ea <tls_interface_sendto+0x52>
   1b278:	4629      	mov	r1, r5
   1b27a:	4650      	mov	r0, sl
   1b27c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1b280:	f7ff fe80 	bl	1af84 <secure_client_socket>
   1b284:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b288:	4680      	mov	r8, r0
   1b28a:	2800      	cmp	r0, #0
   1b28c:	d1ad      	bne.n	1b1ea <tls_interface_sendto+0x52>
   1b28e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b290:	9903      	ldr	r1, [sp, #12]
   1b292:	9301      	str	r3, [sp, #4]
   1b294:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b296:	4421      	add	r1, r4
   1b298:	9300      	str	r3, [sp, #0]
   1b29a:	4650      	mov	r0, sl
   1b29c:	465b      	mov	r3, fp
   1b29e:	f000 fda3 	bl	1bde8 <ip_interface_sendto>
   1b2a2:	1e03      	subs	r3, r0, #0
   1b2a4:	daa6      	bge.n	1b1f4 <tls_interface_sendto+0x5c>
   1b2a6:	e7c1      	b.n	1b22c <tls_interface_sendto+0x94>
   1b2a8:	f04f 0823 	mov.w	r8, #35	; 0x23
   1b2ac:	e7bb      	b.n	1b226 <tls_interface_sendto+0x8e>
   1b2ae:	f04f 082a 	mov.w	r8, #42	; 0x2a
   1b2b2:	e7b8      	b.n	1b226 <tls_interface_sendto+0x8e>
   1b2b4:	f04f 0809 	mov.w	r8, #9
   1b2b8:	e7b5      	b.n	1b226 <tls_interface_sendto+0x8e>
   1b2ba:	bf00      	nop
   1b2bc:	20021850 	.word	0x20021850

0001b2c0 <tls_interface_recvfrom>:
   1b2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b2c4:	460d      	mov	r5, r1
   1b2c6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1b2ca:	4616      	mov	r6, r2
   1b2cc:	461f      	mov	r7, r3
   1b2ce:	4604      	mov	r4, r0
   1b2d0:	f006 fcbe 	bl	21c50 <interface_socket_from_handle_get>
   1b2d4:	2800      	cmp	r0, #0
   1b2d6:	d038      	beq.n	1b34a <tls_interface_recvfrom+0x8a>
   1b2d8:	6803      	ldr	r3, [r0, #0]
   1b2da:	b29b      	uxth	r3, r3
   1b2dc:	2b0c      	cmp	r3, #12
   1b2de:	d00f      	beq.n	1b300 <tls_interface_recvfrom+0x40>
   1b2e0:	6803      	ldr	r3, [r0, #0]
   1b2e2:	b29b      	uxth	r3, r3
   1b2e4:	2b0d      	cmp	r3, #13
   1b2e6:	d00b      	beq.n	1b300 <tls_interface_recvfrom+0x40>
   1b2e8:	6903      	ldr	r3, [r0, #16]
   1b2ea:	2b01      	cmp	r3, #1
   1b2ec:	d01a      	beq.n	1b324 <tls_interface_recvfrom+0x64>
   1b2ee:	2b02      	cmp	r3, #2
   1b2f0:	d010      	beq.n	1b314 <tls_interface_recvfrom+0x54>
   1b2f2:	2023      	movs	r0, #35	; 0x23
   1b2f4:	f7fb fc0a 	bl	16b0c <bsd_os_errno_set>
   1b2f8:	f04f 30ff 	mov.w	r0, #4294967295
   1b2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b300:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1b304:	463b      	mov	r3, r7
   1b306:	4632      	mov	r2, r6
   1b308:	4629      	mov	r1, r5
   1b30a:	4620      	mov	r0, r4
   1b30c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b310:	f000 bee6 	b.w	1c0e0 <ip_interface_recvfrom>
   1b314:	6803      	ldr	r3, [r0, #0]
   1b316:	b29b      	uxth	r3, r3
   1b318:	2b02      	cmp	r3, #2
   1b31a:	d007      	beq.n	1b32c <tls_interface_recvfrom+0x6c>
   1b31c:	6803      	ldr	r3, [r0, #0]
   1b31e:	b29b      	uxth	r3, r3
   1b320:	2b04      	cmp	r3, #4
   1b322:	d003      	beq.n	1b32c <tls_interface_recvfrom+0x6c>
   1b324:	6803      	ldr	r3, [r0, #0]
   1b326:	b29b      	uxth	r3, r3
   1b328:	2b05      	cmp	r3, #5
   1b32a:	d1e2      	bne.n	1b2f2 <tls_interface_recvfrom+0x32>
   1b32c:	4b08      	ldr	r3, [pc, #32]	; (1b350 <tls_interface_recvfrom+0x90>)
   1b32e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1b332:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1b336:	2b02      	cmp	r3, #2
   1b338:	d1db      	bne.n	1b2f2 <tls_interface_recvfrom+0x32>
   1b33a:	4601      	mov	r1, r0
   1b33c:	4620      	mov	r0, r4
   1b33e:	f7ff fe21 	bl	1af84 <secure_client_socket>
   1b342:	2800      	cmp	r0, #0
   1b344:	d0dc      	beq.n	1b300 <tls_interface_recvfrom+0x40>
   1b346:	dcd5      	bgt.n	1b2f4 <tls_interface_recvfrom+0x34>
   1b348:	e7d6      	b.n	1b2f8 <tls_interface_recvfrom+0x38>
   1b34a:	2009      	movs	r0, #9
   1b34c:	e7d2      	b.n	1b2f4 <tls_interface_recvfrom+0x34>
   1b34e:	bf00      	nop
   1b350:	20021850 	.word	0x20021850

0001b354 <tls_interface_bind>:
   1b354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b358:	b082      	sub	sp, #8
   1b35a:	460e      	mov	r6, r1
   1b35c:	4617      	mov	r7, r2
   1b35e:	4605      	mov	r5, r0
   1b360:	f006 fc76 	bl	21c50 <interface_socket_from_handle_get>
   1b364:	2800      	cmp	r0, #0
   1b366:	d069      	beq.n	1b43c <tls_interface_bind+0xe8>
   1b368:	6803      	ldr	r3, [r0, #0]
   1b36a:	4604      	mov	r4, r0
   1b36c:	b29b      	uxth	r3, r3
   1b36e:	2b02      	cmp	r3, #2
   1b370:	d158      	bne.n	1b424 <tls_interface_bind+0xd0>
   1b372:	463a      	mov	r2, r7
   1b374:	4631      	mov	r1, r6
   1b376:	4628      	mov	r0, r5
   1b378:	f001 f9c2 	bl	1c700 <ip_interface_bind>
   1b37c:	2800      	cmp	r0, #0
   1b37e:	d148      	bne.n	1b412 <tls_interface_bind+0xbe>
   1b380:	00ee      	lsls	r6, r5, #3
   1b382:	4f2f      	ldr	r7, [pc, #188]	; (1b440 <tls_interface_bind+0xec>)
   1b384:	1973      	adds	r3, r6, r5
   1b386:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   1b38a:	2b01      	cmp	r3, #1
   1b38c:	d002      	beq.n	1b394 <tls_interface_bind+0x40>
   1b38e:	b002      	add	sp, #8
   1b390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b394:	f04f 3cff 	mov.w	ip, #4294967295
   1b398:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 1b444 <tls_interface_bind+0xf0>
   1b39c:	f247 0281 	movw	r2, #28801	; 0x7081
   1b3a0:	eb0a 0906 	add.w	r9, sl, r6
   1b3a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b3a8:	69a1      	ldr	r1, [r4, #24]
   1b3aa:	4628      	mov	r0, r5
   1b3ac:	f8cd c004 	str.w	ip, [sp, #4]
   1b3b0:	f000 fb7c 	bl	1baac <ip_interface_request_create>
   1b3b4:	4680      	mov	r8, r0
   1b3b6:	2800      	cmp	r0, #0
   1b3b8:	d03e      	beq.n	1b438 <tls_interface_bind+0xe4>
   1b3ba:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1b3be:	bbaa      	cbnz	r2, 1b42c <tls_interface_bind+0xd8>
   1b3c0:	1971      	adds	r1, r6, r5
   1b3c2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   1b3c6:	2224      	movs	r2, #36	; 0x24
   1b3c8:	f108 0014 	add.w	r0, r8, #20
   1b3cc:	f7f1 fbbe 	bl	cb4c <memcpy>
   1b3d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1b3d4:	4641      	mov	r1, r8
   1b3d6:	3324      	adds	r3, #36	; 0x24
   1b3d8:	f8c8 3008 	str.w	r3, [r8, #8]
   1b3dc:	6822      	ldr	r2, [r4, #0]
   1b3de:	2304      	movs	r3, #4
   1b3e0:	0c12      	lsrs	r2, r2, #16
   1b3e2:	0412      	lsls	r2, r2, #16
   1b3e4:	f042 020a 	orr.w	r2, r2, #10
   1b3e8:	6022      	str	r2, [r4, #0]
   1b3ea:	4620      	mov	r0, r4
   1b3ec:	f247 0281 	movw	r2, #28801	; 0x7081
   1b3f0:	f000 fb7c 	bl	1baec <ip_interface_request_send>
   1b3f4:	b968      	cbnz	r0, 1b412 <tls_interface_bind+0xbe>
   1b3f6:	6823      	ldr	r3, [r4, #0]
   1b3f8:	00db      	lsls	r3, r3, #3
   1b3fa:	d415      	bmi.n	1b428 <tls_interface_bind+0xd4>
   1b3fc:	4628      	mov	r0, r5
   1b3fe:	ab01      	add	r3, sp, #4
   1b400:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b404:	210b      	movs	r1, #11
   1b406:	f000 fb85 	bl	1bb14 <ip_interface_wait>
   1b40a:	2800      	cmp	r0, #0
   1b40c:	d0bf      	beq.n	1b38e <tls_interface_bind+0x3a>
   1b40e:	2304      	movs	r3, #4
   1b410:	6023      	str	r3, [r4, #0]
   1b412:	2800      	cmp	r0, #0
   1b414:	ddbb      	ble.n	1b38e <tls_interface_bind+0x3a>
   1b416:	f7fb fb79 	bl	16b0c <bsd_os_errno_set>
   1b41a:	f04f 30ff 	mov.w	r0, #4294967295
   1b41e:	b002      	add	sp, #8
   1b420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b424:	202d      	movs	r0, #45	; 0x2d
   1b426:	e7f6      	b.n	1b416 <tls_interface_bind+0xc2>
   1b428:	2073      	movs	r0, #115	; 0x73
   1b42a:	e7f4      	b.n	1b416 <tls_interface_bind+0xc2>
   1b42c:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   1b430:	6800      	ldr	r0, [r0, #0]
   1b432:	f7f1 fb8b 	bl	cb4c <memcpy>
   1b436:	e7c3      	b.n	1b3c0 <tls_interface_bind+0x6c>
   1b438:	200c      	movs	r0, #12
   1b43a:	e7ec      	b.n	1b416 <tls_interface_bind+0xc2>
   1b43c:	2009      	movs	r0, #9
   1b43e:	e7ea      	b.n	1b416 <tls_interface_bind+0xc2>
   1b440:	20021850 	.word	0x20021850
   1b444:	20021994 	.word	0x20021994

0001b448 <tls_interface_connect>:
   1b448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b44a:	460e      	mov	r6, r1
   1b44c:	4617      	mov	r7, r2
   1b44e:	4604      	mov	r4, r0
   1b450:	f006 fbfe 	bl	21c50 <interface_socket_from_handle_get>
   1b454:	b1e8      	cbz	r0, 1b492 <tls_interface_connect+0x4a>
   1b456:	4b13      	ldr	r3, [pc, #76]	; (1b4a4 <tls_interface_connect+0x5c>)
   1b458:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1b45c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1b460:	2b02      	cmp	r3, #2
   1b462:	d11c      	bne.n	1b49e <tls_interface_connect+0x56>
   1b464:	6803      	ldr	r3, [r0, #0]
   1b466:	4605      	mov	r5, r0
   1b468:	b29b      	uxth	r3, r3
   1b46a:	2b02      	cmp	r3, #2
   1b46c:	d003      	beq.n	1b476 <tls_interface_connect+0x2e>
   1b46e:	6803      	ldr	r3, [r0, #0]
   1b470:	b29b      	uxth	r3, r3
   1b472:	2b04      	cmp	r3, #4
   1b474:	d113      	bne.n	1b49e <tls_interface_connect+0x56>
   1b476:	463a      	mov	r2, r7
   1b478:	4631      	mov	r1, r6
   1b47a:	4620      	mov	r0, r4
   1b47c:	f000 ff58 	bl	1c330 <ip_interface_connect>
   1b480:	b110      	cbz	r0, 1b488 <tls_interface_connect+0x40>
   1b482:	2800      	cmp	r0, #0
   1b484:	dc06      	bgt.n	1b494 <tls_interface_connect+0x4c>
   1b486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b488:	4629      	mov	r1, r5
   1b48a:	4620      	mov	r0, r4
   1b48c:	f7ff fd7a 	bl	1af84 <secure_client_socket>
   1b490:	e7f7      	b.n	1b482 <tls_interface_connect+0x3a>
   1b492:	2009      	movs	r0, #9
   1b494:	f7fb fb3a 	bl	16b0c <bsd_os_errno_set>
   1b498:	f04f 30ff 	mov.w	r0, #4294967295
   1b49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b49e:	202d      	movs	r0, #45	; 0x2d
   1b4a0:	e7f8      	b.n	1b494 <tls_interface_connect+0x4c>
   1b4a2:	bf00      	nop
   1b4a4:	20021850 	.word	0x20021850

0001b4a8 <tls_interface_listen>:
   1b4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4ac:	b085      	sub	sp, #20
   1b4ae:	4689      	mov	r9, r1
   1b4b0:	4605      	mov	r5, r0
   1b4b2:	f006 fbcd 	bl	21c50 <interface_socket_from_handle_get>
   1b4b6:	2800      	cmp	r0, #0
   1b4b8:	f000 8084 	beq.w	1b5c4 <tls_interface_listen+0x11c>
   1b4bc:	6803      	ldr	r3, [r0, #0]
   1b4be:	4604      	mov	r4, r0
   1b4c0:	00da      	lsls	r2, r3, #3
   1b4c2:	d47d      	bmi.n	1b5c0 <tls_interface_listen+0x118>
   1b4c4:	6903      	ldr	r3, [r0, #16]
   1b4c6:	2b01      	cmp	r3, #1
   1b4c8:	d17a      	bne.n	1b5c0 <tls_interface_listen+0x118>
   1b4ca:	6803      	ldr	r3, [r0, #0]
   1b4cc:	b29b      	uxth	r3, r3
   1b4ce:	2b04      	cmp	r3, #4
   1b4d0:	d05d      	beq.n	1b58e <tls_interface_listen+0xe6>
   1b4d2:	6823      	ldr	r3, [r4, #0]
   1b4d4:	b29b      	uxth	r3, r3
   1b4d6:	2b0b      	cmp	r3, #11
   1b4d8:	d172      	bne.n	1b5c0 <tls_interface_listen+0x118>
   1b4da:	4a3b      	ldr	r2, [pc, #236]	; (1b5c8 <tls_interface_listen+0x120>)
   1b4dc:	00ee      	lsls	r6, r5, #3
   1b4de:	1973      	adds	r3, r6, r5
   1b4e0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1b4e4:	9201      	str	r2, [sp, #4]
   1b4e6:	2b01      	cmp	r3, #1
   1b4e8:	d16a      	bne.n	1b5c0 <tls_interface_listen+0x118>
   1b4ea:	2201      	movs	r2, #1
   1b4ec:	9901      	ldr	r1, [sp, #4]
   1b4ee:	1973      	adds	r3, r6, r5
   1b4f0:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
   1b4f4:	6823      	ldr	r3, [r4, #0]
   1b4f6:	2b0b      	cmp	r3, #11
   1b4f8:	d040      	beq.n	1b57c <tls_interface_listen+0xd4>
   1b4fa:	f04f 3cff 	mov.w	ip, #4294967295
   1b4fe:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 1b5cc <tls_interface_listen+0x124>
   1b502:	f247 0281 	movw	r2, #28801	; 0x7081
   1b506:	eb0a 0806 	add.w	r8, sl, r6
   1b50a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b50e:	69a1      	ldr	r1, [r4, #24]
   1b510:	4628      	mov	r0, r5
   1b512:	6827      	ldr	r7, [r4, #0]
   1b514:	f8cd c00c 	str.w	ip, [sp, #12]
   1b518:	f000 fac8 	bl	1baac <ip_interface_request_create>
   1b51c:	4683      	mov	fp, r0
   1b51e:	2800      	cmp	r0, #0
   1b520:	d046      	beq.n	1b5b0 <tls_interface_listen+0x108>
   1b522:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1b526:	2a00      	cmp	r2, #0
   1b528:	d144      	bne.n	1b5b4 <tls_interface_listen+0x10c>
   1b52a:	9b01      	ldr	r3, [sp, #4]
   1b52c:	1971      	adds	r1, r6, r5
   1b52e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1b532:	2224      	movs	r2, #36	; 0x24
   1b534:	f10b 0014 	add.w	r0, fp, #20
   1b538:	f7f1 fb08 	bl	cb4c <memcpy>
   1b53c:	f8db 2008 	ldr.w	r2, [fp, #8]
   1b540:	4659      	mov	r1, fp
   1b542:	3224      	adds	r2, #36	; 0x24
   1b544:	f8cb 2008 	str.w	r2, [fp, #8]
   1b548:	6822      	ldr	r2, [r4, #0]
   1b54a:	463b      	mov	r3, r7
   1b54c:	0c12      	lsrs	r2, r2, #16
   1b54e:	0412      	lsls	r2, r2, #16
   1b550:	f042 020a 	orr.w	r2, r2, #10
   1b554:	6022      	str	r2, [r4, #0]
   1b556:	4620      	mov	r0, r4
   1b558:	f247 0281 	movw	r2, #28801	; 0x7081
   1b55c:	f000 fac6 	bl	1baec <ip_interface_request_send>
   1b560:	b980      	cbnz	r0, 1b584 <tls_interface_listen+0xdc>
   1b562:	6823      	ldr	r3, [r4, #0]
   1b564:	00db      	lsls	r3, r3, #3
   1b566:	d41b      	bmi.n	1b5a0 <tls_interface_listen+0xf8>
   1b568:	ab03      	add	r3, sp, #12
   1b56a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b56e:	210b      	movs	r1, #11
   1b570:	4628      	mov	r0, r5
   1b572:	f000 facf 	bl	1bb14 <ip_interface_wait>
   1b576:	b108      	cbz	r0, 1b57c <tls_interface_listen+0xd4>
   1b578:	6027      	str	r7, [r4, #0]
   1b57a:	e003      	b.n	1b584 <tls_interface_listen+0xdc>
   1b57c:	4649      	mov	r1, r9
   1b57e:	4628      	mov	r0, r5
   1b580:	f001 f960 	bl	1c844 <ip_interface_listen>
   1b584:	2800      	cmp	r0, #0
   1b586:	dc0c      	bgt.n	1b5a2 <tls_interface_listen+0xfa>
   1b588:	b005      	add	sp, #20
   1b58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b58e:	4a0e      	ldr	r2, [pc, #56]	; (1b5c8 <tls_interface_listen+0x120>)
   1b590:	00ee      	lsls	r6, r5, #3
   1b592:	1973      	adds	r3, r6, r5
   1b594:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1b598:	9201      	str	r2, [sp, #4]
   1b59a:	2b02      	cmp	r3, #2
   1b59c:	d199      	bne.n	1b4d2 <tls_interface_listen+0x2a>
   1b59e:	e7a4      	b.n	1b4ea <tls_interface_listen+0x42>
   1b5a0:	2073      	movs	r0, #115	; 0x73
   1b5a2:	f7fb fab3 	bl	16b0c <bsd_os_errno_set>
   1b5a6:	f04f 30ff 	mov.w	r0, #4294967295
   1b5aa:	b005      	add	sp, #20
   1b5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5b0:	200c      	movs	r0, #12
   1b5b2:	e7f6      	b.n	1b5a2 <tls_interface_listen+0xfa>
   1b5b4:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   1b5b8:	6800      	ldr	r0, [r0, #0]
   1b5ba:	f7f1 fac7 	bl	cb4c <memcpy>
   1b5be:	e7b4      	b.n	1b52a <tls_interface_listen+0x82>
   1b5c0:	202d      	movs	r0, #45	; 0x2d
   1b5c2:	e7ee      	b.n	1b5a2 <tls_interface_listen+0xfa>
   1b5c4:	2009      	movs	r0, #9
   1b5c6:	e7ec      	b.n	1b5a2 <tls_interface_listen+0xfa>
   1b5c8:	20021850 	.word	0x20021850
   1b5cc:	20021994 	.word	0x20021994

0001b5d0 <tls_interface_accept>:
   1b5d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b5d4:	b083      	sub	sp, #12
   1b5d6:	460f      	mov	r7, r1
   1b5d8:	4690      	mov	r8, r2
   1b5da:	4699      	mov	r9, r3
   1b5dc:	4606      	mov	r6, r0
   1b5de:	f04f 34ff 	mov.w	r4, #4294967295
   1b5e2:	f006 fb35 	bl	21c50 <interface_socket_from_handle_get>
   1b5e6:	9401      	str	r4, [sp, #4]
   1b5e8:	2800      	cmp	r0, #0
   1b5ea:	d048      	beq.n	1b67e <tls_interface_accept+0xae>
   1b5ec:	6805      	ldr	r5, [r0, #0]
   1b5ee:	b2ad      	uxth	r5, r5
   1b5f0:	2d07      	cmp	r5, #7
   1b5f2:	d144      	bne.n	1b67e <tls_interface_accept+0xae>
   1b5f4:	6803      	ldr	r3, [r0, #0]
   1b5f6:	00db      	lsls	r3, r3, #3
   1b5f8:	d443      	bmi.n	1b682 <tls_interface_accept+0xb2>
   1b5fa:	464b      	mov	r3, r9
   1b5fc:	4642      	mov	r2, r8
   1b5fe:	4639      	mov	r1, r7
   1b600:	4630      	mov	r0, r6
   1b602:	f001 f99b 	bl	1c93c <ip_interface_accept>
   1b606:	1e04      	subs	r4, r0, #0
   1b608:	da08      	bge.n	1b61c <tls_interface_accept+0x4c>
   1b60a:	4620      	mov	r0, r4
   1b60c:	f7fb fa7e 	bl	16b0c <bsd_os_errno_set>
   1b610:	f04f 34ff 	mov.w	r4, #4294967295
   1b614:	4620      	mov	r0, r4
   1b616:	b003      	add	sp, #12
   1b618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b61c:	f006 fb18 	bl	21c50 <interface_socket_from_handle_get>
   1b620:	6803      	ldr	r3, [r0, #0]
   1b622:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1b68c <tls_interface_accept+0xbc>
   1b626:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1b62a:	6003      	str	r3, [r0, #0]
   1b62c:	6803      	ldr	r3, [r0, #0]
   1b62e:	eb04 07c4 	add.w	r7, r4, r4, lsl #3
   1b632:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1b636:	00bf      	lsls	r7, r7, #2
   1b638:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1b63c:	4605      	mov	r5, r0
   1b63e:	6003      	str	r3, [r0, #0]
   1b640:	eb08 0186 	add.w	r1, r8, r6, lsl #2
   1b644:	2224      	movs	r2, #36	; 0x24
   1b646:	eb08 0007 	add.w	r0, r8, r7
   1b64a:	f7f1 fa7f 	bl	cb4c <memcpy>
   1b64e:	2302      	movs	r3, #2
   1b650:	f808 3007 	strb.w	r3, [r8, r7]
   1b654:	682a      	ldr	r2, [r5, #0]
   1b656:	ab01      	add	r3, sp, #4
   1b658:	0c12      	lsrs	r2, r2, #16
   1b65a:	0412      	lsls	r2, r2, #16
   1b65c:	f042 020b 	orr.w	r2, r2, #11
   1b660:	602a      	str	r2, [r5, #0]
   1b662:	210c      	movs	r1, #12
   1b664:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b668:	4620      	mov	r0, r4
   1b66a:	f000 fa53 	bl	1bb14 <ip_interface_wait>
   1b66e:	4605      	mov	r5, r0
   1b670:	2800      	cmp	r0, #0
   1b672:	d0cf      	beq.n	1b614 <tls_interface_accept+0x44>
   1b674:	4620      	mov	r0, r4
   1b676:	f000 fb45 	bl	1bd04 <ip_interface_close>
   1b67a:	462c      	mov	r4, r5
   1b67c:	e7c5      	b.n	1b60a <tls_interface_accept+0x3a>
   1b67e:	2409      	movs	r4, #9
   1b680:	e7c3      	b.n	1b60a <tls_interface_accept+0x3a>
   1b682:	202d      	movs	r0, #45	; 0x2d
   1b684:	f7fb fa42 	bl	16b0c <bsd_os_errno_set>
   1b688:	e7c4      	b.n	1b614 <tls_interface_accept+0x44>
   1b68a:	bf00      	nop
   1b68c:	20021850 	.word	0x20021850

0001b690 <tls_interface_setopt>:
   1b690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b694:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1b698:	b082      	sub	sp, #8
   1b69a:	9e08      	ldr	r6, [sp, #32]
   1b69c:	d120      	bne.n	1b6e0 <tls_interface_setopt+0x50>
   1b69e:	4698      	mov	r8, r3
   1b6a0:	4617      	mov	r7, r2
   1b6a2:	4605      	mov	r5, r0
   1b6a4:	2b00      	cmp	r3, #0
   1b6a6:	f000 80a0 	beq.w	1b7ea <tls_interface_setopt+0x15a>
   1b6aa:	f006 fad1 	bl	21c50 <interface_socket_from_handle_get>
   1b6ae:	2800      	cmp	r0, #0
   1b6b0:	f000 8097 	beq.w	1b7e2 <tls_interface_setopt+0x152>
   1b6b4:	6804      	ldr	r4, [r0, #0]
   1b6b6:	b2a4      	uxth	r4, r4
   1b6b8:	2c02      	cmp	r4, #2
   1b6ba:	d008      	beq.n	1b6ce <tls_interface_setopt+0x3e>
   1b6bc:	6803      	ldr	r3, [r0, #0]
   1b6be:	b29b      	uxth	r3, r3
   1b6c0:	2b04      	cmp	r3, #4
   1b6c2:	d004      	beq.n	1b6ce <tls_interface_setopt+0x3e>
   1b6c4:	6803      	ldr	r3, [r0, #0]
   1b6c6:	b29b      	uxth	r3, r3
   1b6c8:	2b05      	cmp	r3, #5
   1b6ca:	f040 808a 	bne.w	1b7e2 <tls_interface_setopt+0x152>
   1b6ce:	1e7a      	subs	r2, r7, #1
   1b6d0:	2a05      	cmp	r2, #5
   1b6d2:	f200 8090 	bhi.w	1b7f6 <tls_interface_setopt+0x166>
   1b6d6:	e8df f002 	tbb	[pc, r2]
   1b6da:	2718      	.short	0x2718
   1b6dc:	08594b3c 	.word	0x08594b3c
   1b6e0:	b002      	add	sp, #8
   1b6e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b6e6:	f001 ba6b 	b.w	1cbc0 <ip_interface_setopt>
   1b6ea:	4601      	mov	r1, r0
   1b6ec:	e9cd 8600 	strd	r8, r6, [sp]
   1b6f0:	4628      	mov	r0, r5
   1b6f2:	f247 0301 	movw	r3, #28673	; 0x7001
   1b6f6:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b6fa:	f000 ff8b 	bl	1c614 <ip_interface_socketoption_send>
   1b6fe:	2800      	cmp	r0, #0
   1b700:	d161      	bne.n	1b7c6 <tls_interface_setopt+0x136>
   1b702:	2000      	movs	r0, #0
   1b704:	b002      	add	sp, #8
   1b706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b70a:	2e04      	cmp	r6, #4
   1b70c:	d15a      	bne.n	1b7c4 <tls_interface_setopt+0x134>
   1b70e:	f8d8 0000 	ldr.w	r0, [r8]
   1b712:	2800      	cmp	r0, #0
   1b714:	d05e      	beq.n	1b7d4 <tls_interface_setopt+0x144>
   1b716:	2801      	cmp	r0, #1
   1b718:	d154      	bne.n	1b7c4 <tls_interface_setopt+0x134>
   1b71a:	4b38      	ldr	r3, [pc, #224]	; (1b7fc <tls_interface_setopt+0x16c>)
   1b71c:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b720:	f803 0024 	strb.w	r0, [r3, r4, lsl #2]
   1b724:	2000      	movs	r0, #0
   1b726:	e7ed      	b.n	1b704 <tls_interface_setopt+0x74>
   1b728:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   1b72c:	d04a      	beq.n	1b7c4 <tls_interface_setopt+0x134>
   1b72e:	f016 0703 	ands.w	r7, r6, #3
   1b732:	d147      	bne.n	1b7c4 <tls_interface_setopt+0x134>
   1b734:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b738:	00a4      	lsls	r4, r4, #2
   1b73a:	4b30      	ldr	r3, [pc, #192]	; (1b7fc <tls_interface_setopt+0x16c>)
   1b73c:	1d20      	adds	r0, r4, #4
   1b73e:	4418      	add	r0, r3
   1b740:	4423      	add	r3, r4
   1b742:	4632      	mov	r2, r6
   1b744:	4641      	mov	r1, r8
   1b746:	f883 c003 	strb.w	ip, [r3, #3]
   1b74a:	f7f1 f9ff 	bl	cb4c <memcpy>
   1b74e:	4638      	mov	r0, r7
   1b750:	e7d8      	b.n	1b704 <tls_interface_setopt+0x74>
   1b752:	2e01      	cmp	r6, #1
   1b754:	d136      	bne.n	1b7c4 <tls_interface_setopt+0x134>
   1b756:	f898 2000 	ldrb.w	r2, [r8]
   1b75a:	4b28      	ldr	r3, [pc, #160]	; (1b7fc <tls_interface_setopt+0x16c>)
   1b75c:	3200      	adds	r2, #0
   1b75e:	bf18      	it	ne
   1b760:	2201      	movne	r2, #1
   1b762:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b766:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1b76a:	7062      	strb	r2, [r4, #1]
   1b76c:	2000      	movs	r0, #0
   1b76e:	e7c9      	b.n	1b704 <tls_interface_setopt+0x74>
   1b770:	2e04      	cmp	r6, #4
   1b772:	d127      	bne.n	1b7c4 <tls_interface_setopt+0x134>
   1b774:	f8d8 2000 	ldr.w	r2, [r8]
   1b778:	2a02      	cmp	r2, #2
   1b77a:	d823      	bhi.n	1b7c4 <tls_interface_setopt+0x134>
   1b77c:	4b1f      	ldr	r3, [pc, #124]	; (1b7fc <tls_interface_setopt+0x16c>)
   1b77e:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b782:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1b786:	70a2      	strb	r2, [r4, #2]
   1b788:	2000      	movs	r0, #0
   1b78a:	e7bb      	b.n	1b704 <tls_interface_setopt+0x74>
   1b78c:	4c1c      	ldr	r4, [pc, #112]	; (1b800 <tls_interface_setopt+0x170>)
   1b78e:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   1b792:	b138      	cbz	r0, 1b7a4 <tls_interface_setopt+0x114>
   1b794:	f005 fd5e 	bl	21254 <nrf_free>
   1b798:	2200      	movs	r2, #0
   1b79a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   1b79e:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   1b7a2:	605a      	str	r2, [r3, #4]
   1b7a4:	2e00      	cmp	r6, #0
   1b7a6:	d0ac      	beq.n	1b702 <tls_interface_setopt+0x72>
   1b7a8:	4630      	mov	r0, r6
   1b7aa:	f005 fd49 	bl	21240 <nrf_malloc>
   1b7ae:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   1b7b2:	b1c0      	cbz	r0, 1b7e6 <tls_interface_setopt+0x156>
   1b7b4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1b7b8:	4632      	mov	r2, r6
   1b7ba:	4641      	mov	r1, r8
   1b7bc:	6066      	str	r6, [r4, #4]
   1b7be:	f7f1 f9c5 	bl	cb4c <memcpy>
   1b7c2:	e79e      	b.n	1b702 <tls_interface_setopt+0x72>
   1b7c4:	2016      	movs	r0, #22
   1b7c6:	f7fb f9a1 	bl	16b0c <bsd_os_errno_set>
   1b7ca:	f04f 30ff 	mov.w	r0, #4294967295
   1b7ce:	b002      	add	sp, #8
   1b7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b7d4:	2202      	movs	r2, #2
   1b7d6:	4b09      	ldr	r3, [pc, #36]	; (1b7fc <tls_interface_setopt+0x16c>)
   1b7d8:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1b7dc:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
   1b7e0:	e790      	b.n	1b704 <tls_interface_setopt+0x74>
   1b7e2:	2009      	movs	r0, #9
   1b7e4:	e7ef      	b.n	1b7c6 <tls_interface_setopt+0x136>
   1b7e6:	200c      	movs	r0, #12
   1b7e8:	e7ed      	b.n	1b7c6 <tls_interface_setopt+0x136>
   1b7ea:	200e      	movs	r0, #14
   1b7ec:	f7fb f98e 	bl	16b0c <bsd_os_errno_set>
   1b7f0:	f04f 30ff 	mov.w	r0, #4294967295
   1b7f4:	e786      	b.n	1b704 <tls_interface_setopt+0x74>
   1b7f6:	202a      	movs	r0, #42	; 0x2a
   1b7f8:	e7e5      	b.n	1b7c6 <tls_interface_setopt+0x136>
   1b7fa:	bf00      	nop
   1b7fc:	20021850 	.word	0x20021850
   1b800:	20021994 	.word	0x20021994

0001b804 <tls_interface_getopt>:
   1b804:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b806:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1b80a:	b083      	sub	sp, #12
   1b80c:	9f08      	ldr	r7, [sp, #32]
   1b80e:	d112      	bne.n	1b836 <tls_interface_getopt+0x32>
   1b810:	461d      	mov	r5, r3
   1b812:	b16b      	cbz	r3, 1b830 <tls_interface_getopt+0x2c>
   1b814:	b167      	cbz	r7, 1b830 <tls_interface_getopt+0x2c>
   1b816:	4606      	mov	r6, r0
   1b818:	4614      	mov	r4, r2
   1b81a:	f006 fa19 	bl	21c50 <interface_socket_from_handle_get>
   1b81e:	b178      	cbz	r0, 1b840 <tls_interface_getopt+0x3c>
   1b820:	3c01      	subs	r4, #1
   1b822:	2c05      	cmp	r4, #5
   1b824:	d859      	bhi.n	1b8da <tls_interface_getopt+0xd6>
   1b826:	e8df f004 	tbb	[pc, r4]
   1b82a:	2818      	.short	0x2818
   1b82c:	0d584c40 	.word	0x0d584c40
   1b830:	200e      	movs	r0, #14
   1b832:	b003      	add	sp, #12
   1b834:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b836:	b003      	add	sp, #12
   1b838:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1b83c:	f001 ba62 	b.w	1cd04 <ip_interface_getopt>
   1b840:	2009      	movs	r0, #9
   1b842:	e7f6      	b.n	1b832 <tls_interface_getopt+0x2e>
   1b844:	4601      	mov	r1, r0
   1b846:	e9cd 5700 	strd	r5, r7, [sp]
   1b84a:	4630      	mov	r0, r6
   1b84c:	f247 0301 	movw	r3, #28673	; 0x7001
   1b850:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b854:	f000 fe2e 	bl	1c4b4 <ip_interface_socketoption_get>
   1b858:	e7eb      	b.n	1b832 <tls_interface_getopt+0x2e>
   1b85a:	683b      	ldr	r3, [r7, #0]
   1b85c:	2b04      	cmp	r3, #4
   1b85e:	d13e      	bne.n	1b8de <tls_interface_getopt+0xda>
   1b860:	4b22      	ldr	r3, [pc, #136]	; (1b8ec <tls_interface_getopt+0xe8>)
   1b862:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1b866:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   1b86a:	2000      	movs	r0, #0
   1b86c:	f1a3 0301 	sub.w	r3, r3, #1
   1b870:	fab3 f383 	clz	r3, r3
   1b874:	095b      	lsrs	r3, r3, #5
   1b876:	602b      	str	r3, [r5, #0]
   1b878:	e7db      	b.n	1b832 <tls_interface_getopt+0x2e>
   1b87a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1b87e:	491b      	ldr	r1, [pc, #108]	; (1b8ec <tls_interface_getopt+0xe8>)
   1b880:	683b      	ldr	r3, [r7, #0]
   1b882:	00b6      	lsls	r6, r6, #2
   1b884:	198a      	adds	r2, r1, r6
   1b886:	f013 0403 	ands.w	r4, r3, #3
   1b88a:	78d0      	ldrb	r0, [r2, #3]
   1b88c:	d129      	bne.n	1b8e2 <tls_interface_getopt+0xde>
   1b88e:	089b      	lsrs	r3, r3, #2
   1b890:	4283      	cmp	r3, r0
   1b892:	bf28      	it	cs
   1b894:	4603      	movcs	r3, r0
   1b896:	009a      	lsls	r2, r3, #2
   1b898:	b31b      	cbz	r3, 1b8e2 <tls_interface_getopt+0xde>
   1b89a:	3604      	adds	r6, #4
   1b89c:	4431      	add	r1, r6
   1b89e:	603a      	str	r2, [r7, #0]
   1b8a0:	4628      	mov	r0, r5
   1b8a2:	f7f1 f953 	bl	cb4c <memcpy>
   1b8a6:	4620      	mov	r0, r4
   1b8a8:	e7c3      	b.n	1b832 <tls_interface_getopt+0x2e>
   1b8aa:	683b      	ldr	r3, [r7, #0]
   1b8ac:	2b01      	cmp	r3, #1
   1b8ae:	d116      	bne.n	1b8de <tls_interface_getopt+0xda>
   1b8b0:	4b0e      	ldr	r3, [pc, #56]	; (1b8ec <tls_interface_getopt+0xe8>)
   1b8b2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1b8b6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1b8ba:	7873      	ldrb	r3, [r6, #1]
   1b8bc:	2000      	movs	r0, #0
   1b8be:	702b      	strb	r3, [r5, #0]
   1b8c0:	e7b7      	b.n	1b832 <tls_interface_getopt+0x2e>
   1b8c2:	683b      	ldr	r3, [r7, #0]
   1b8c4:	2b04      	cmp	r3, #4
   1b8c6:	d10a      	bne.n	1b8de <tls_interface_getopt+0xda>
   1b8c8:	4b08      	ldr	r3, [pc, #32]	; (1b8ec <tls_interface_getopt+0xe8>)
   1b8ca:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1b8ce:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1b8d2:	78b3      	ldrb	r3, [r6, #2]
   1b8d4:	2000      	movs	r0, #0
   1b8d6:	602b      	str	r3, [r5, #0]
   1b8d8:	e7ab      	b.n	1b832 <tls_interface_getopt+0x2e>
   1b8da:	202a      	movs	r0, #42	; 0x2a
   1b8dc:	e7a9      	b.n	1b832 <tls_interface_getopt+0x2e>
   1b8de:	2016      	movs	r0, #22
   1b8e0:	e7a7      	b.n	1b832 <tls_interface_getopt+0x2e>
   1b8e2:	2800      	cmp	r0, #0
   1b8e4:	d1fb      	bne.n	1b8de <tls_interface_getopt+0xda>
   1b8e6:	6038      	str	r0, [r7, #0]
   1b8e8:	e7a3      	b.n	1b832 <tls_interface_getopt+0x2e>
   1b8ea:	bf00      	nop
   1b8ec:	20021850 	.word	0x20021850

0001b8f0 <tls_rpc_ip_event_handler>:
   1b8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b8f2:	f248 0581 	movw	r5, #32897	; 0x8081
   1b8f6:	42ab      	cmp	r3, r5
   1b8f8:	460c      	mov	r4, r1
   1b8fa:	d044      	beq.n	1b986 <tls_rpc_ip_event_handler+0x96>
   1b8fc:	f249 0182 	movw	r1, #36994	; 0x9082
   1b900:	428b      	cmp	r3, r1
   1b902:	4606      	mov	r6, r0
   1b904:	d02d      	beq.n	1b962 <tls_rpc_ip_event_handler+0x72>
   1b906:	f248 0102 	movw	r1, #32770	; 0x8002
   1b90a:	428b      	cmp	r3, r1
   1b90c:	d001      	beq.n	1b912 <tls_rpc_ip_event_handler+0x22>
   1b90e:	2001      	movs	r0, #1
   1b910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b912:	2c00      	cmp	r4, #0
   1b914:	d0fb      	beq.n	1b90e <tls_rpc_ip_event_handler+0x1e>
   1b916:	6963      	ldr	r3, [r4, #20]
   1b918:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1b91c:	d002      	beq.n	1b924 <tls_rpc_ip_event_handler+0x34>
   1b91e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1b922:	d1f4      	bne.n	1b90e <tls_rpc_ip_event_handler+0x1e>
   1b924:	6823      	ldr	r3, [r4, #0]
   1b926:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1b92a:	6023      	str	r3, [r4, #0]
   1b92c:	6955      	ldr	r5, [r2, #20]
   1b92e:	bb05      	cbnz	r5, 1b972 <tls_rpc_ip_event_handler+0x82>
   1b930:	6823      	ldr	r3, [r4, #0]
   1b932:	0c1b      	lsrs	r3, r3, #16
   1b934:	041b      	lsls	r3, r3, #16
   1b936:	f043 0305 	orr.w	r3, r3, #5
   1b93a:	6023      	str	r3, [r4, #0]
   1b93c:	6823      	ldr	r3, [r4, #0]
   1b93e:	00db      	lsls	r3, r3, #3
   1b940:	d50d      	bpl.n	1b95e <tls_rpc_ip_event_handler+0x6e>
   1b942:	4b2a      	ldr	r3, [pc, #168]	; (1b9ec <tls_rpc_ip_event_handler+0xfc>)
   1b944:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   1b948:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1b94c:	2b02      	cmp	r3, #2
   1b94e:	d106      	bne.n	1b95e <tls_rpc_ip_event_handler+0x6e>
   1b950:	4630      	mov	r0, r6
   1b952:	4621      	mov	r1, r4
   1b954:	f7ff fb16 	bl	1af84 <secure_client_socket>
   1b958:	b108      	cbz	r0, 1b95e <tls_rpc_ip_event_handler+0x6e>
   1b95a:	2873      	cmp	r0, #115	; 0x73
   1b95c:	d10c      	bne.n	1b978 <tls_rpc_ip_event_handler+0x88>
   1b95e:	2000      	movs	r0, #0
   1b960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b962:	2c00      	cmp	r4, #0
   1b964:	d0fb      	beq.n	1b95e <tls_rpc_ip_event_handler+0x6e>
   1b966:	6823      	ldr	r3, [r4, #0]
   1b968:	b29b      	uxth	r3, r3
   1b96a:	2b0b      	cmp	r3, #11
   1b96c:	d1f7      	bne.n	1b95e <tls_rpc_ip_event_handler+0x6e>
   1b96e:	6915      	ldr	r5, [r2, #16]
   1b970:	b1cd      	cbz	r5, 1b9a6 <tls_rpc_ip_event_handler+0xb6>
   1b972:	4628      	mov	r0, r5
   1b974:	f000 f890 	bl	1ba98 <rpc_error_to_nrf_bsd_error>
   1b978:	6060      	str	r0, [r4, #4]
   1b97a:	6823      	ldr	r3, [r4, #0]
   1b97c:	2000      	movs	r0, #0
   1b97e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1b982:	6023      	str	r3, [r4, #0]
   1b984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b986:	2900      	cmp	r1, #0
   1b988:	d0e9      	beq.n	1b95e <tls_rpc_ip_event_handler+0x6e>
   1b98a:	680b      	ldr	r3, [r1, #0]
   1b98c:	b29b      	uxth	r3, r3
   1b98e:	2b0a      	cmp	r3, #10
   1b990:	d1e5      	bne.n	1b95e <tls_rpc_ip_event_handler+0x6e>
   1b992:	6950      	ldr	r0, [r2, #20]
   1b994:	2800      	cmp	r0, #0
   1b996:	d1ed      	bne.n	1b974 <tls_rpc_ip_event_handler+0x84>
   1b998:	680b      	ldr	r3, [r1, #0]
   1b99a:	0c1b      	lsrs	r3, r3, #16
   1b99c:	041b      	lsls	r3, r3, #16
   1b99e:	f043 030b 	orr.w	r3, r3, #11
   1b9a2:	600b      	str	r3, [r1, #0]
   1b9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b9a6:	6823      	ldr	r3, [r4, #0]
   1b9a8:	4f11      	ldr	r7, [pc, #68]	; (1b9f0 <tls_rpc_ip_event_handler+0x100>)
   1b9aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   1b9ae:	6023      	str	r3, [r4, #0]
   1b9b0:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   1b9b4:	b130      	cbz	r0, 1b9c4 <tls_rpc_ip_event_handler+0xd4>
   1b9b6:	f005 fc4d 	bl	21254 <nrf_free>
   1b9ba:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   1b9be:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   1b9c2:	605d      	str	r5, [r3, #4]
   1b9c4:	6823      	ldr	r3, [r4, #0]
   1b9c6:	2000      	movs	r0, #0
   1b9c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   1b9cc:	6023      	str	r3, [r4, #0]
   1b9ce:	6823      	ldr	r3, [r4, #0]
   1b9d0:	0c1b      	lsrs	r3, r3, #16
   1b9d2:	041b      	lsls	r3, r3, #16
   1b9d4:	f043 030c 	orr.w	r3, r3, #12
   1b9d8:	6023      	str	r3, [r4, #0]
   1b9da:	6823      	ldr	r3, [r4, #0]
   1b9dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b9e0:	6023      	str	r3, [r4, #0]
   1b9e2:	6823      	ldr	r3, [r4, #0]
   1b9e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1b9e8:	6023      	str	r3, [r4, #0]
   1b9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b9ec:	20021850 	.word	0x20021850
   1b9f0:	20021994 	.word	0x20021994

0001b9f4 <ip_client_event_handler>:
   1b9f4:	f850 1b08 	ldr.w	r1, [r0], #8
   1b9f8:	0c09      	lsrs	r1, r1, #16
   1b9fa:	f001 bb23 	b.w	1d044 <rpc_ip_event_handler>
   1b9fe:	bf00      	nop

0001ba00 <rpc_ip_client_init>:
   1ba00:	4801      	ldr	r0, [pc, #4]	; (1ba08 <rpc_ip_client_init+0x8>)
   1ba02:	f001 be21 	b.w	1d648 <rpc_client_register>
   1ba06:	bf00      	nop
   1ba08:	0002f5f8 	.word	0x0002f5f8

0001ba0c <rpc_ip_client_request_alloc>:
   1ba0c:	2300      	movs	r3, #0
   1ba0e:	b510      	push	{r4, lr}
   1ba10:	b082      	sub	sp, #8
   1ba12:	9301      	str	r3, [sp, #4]
   1ba14:	b158      	cbz	r0, 1ba2e <rpc_ip_client_request_alloc+0x22>
   1ba16:	4604      	mov	r4, r0
   1ba18:	aa01      	add	r2, sp, #4
   1ba1a:	2004      	movs	r0, #4
   1ba1c:	f001 fe8e 	bl	1d73c <rpc_message_alloc>
   1ba20:	b918      	cbnz	r0, 1ba2a <rpc_ip_client_request_alloc+0x1e>
   1ba22:	9b01      	ldr	r3, [sp, #4]
   1ba24:	b10b      	cbz	r3, 1ba2a <rpc_ip_client_request_alloc+0x1e>
   1ba26:	3308      	adds	r3, #8
   1ba28:	6023      	str	r3, [r4, #0]
   1ba2a:	b002      	add	sp, #8
   1ba2c:	bd10      	pop	{r4, pc}
   1ba2e:	2007      	movs	r0, #7
   1ba30:	b002      	add	sp, #8
   1ba32:	bd10      	pop	{r4, pc}

0001ba34 <rpc_ip_client_request_send>:
   1ba34:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1ba38:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   1ba3c:	d10b      	bne.n	1ba56 <rpc_ip_client_request_send+0x22>
   1ba3e:	b160      	cbz	r0, 1ba5a <rpc_ip_client_request_send+0x26>
   1ba40:	4603      	mov	r3, r0
   1ba42:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1ba46:	2004      	movs	r0, #4
   1ba48:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1ba4c:	f843 1d08 	str.w	r1, [r3, #-8]!
   1ba50:	4619      	mov	r1, r3
   1ba52:	f001 be63 	b.w	1d71c <rpc_message_send>
   1ba56:	200f      	movs	r0, #15
   1ba58:	4770      	bx	lr
   1ba5a:	2007      	movs	r0, #7
   1ba5c:	4770      	bx	lr
   1ba5e:	bf00      	nop

0001ba60 <rpc_ip_client_message_free>:
   1ba60:	b120      	cbz	r0, 1ba6c <rpc_ip_client_message_free+0xc>
   1ba62:	f1a0 0108 	sub.w	r1, r0, #8
   1ba66:	2004      	movs	r0, #4
   1ba68:	f001 be94 	b.w	1d794 <rpc_message_free>
   1ba6c:	2007      	movs	r0, #7
   1ba6e:	4770      	bx	lr

0001ba70 <rpc_ip_client_data_free>:
   1ba70:	b118      	cbz	r0, 1ba7a <rpc_ip_client_data_free+0xa>
   1ba72:	4601      	mov	r1, r0
   1ba74:	2004      	movs	r0, #4
   1ba76:	f001 be99 	b.w	1d7ac <rpc_message_data_free>
   1ba7a:	2007      	movs	r0, #7
   1ba7c:	4770      	bx	lr
   1ba7e:	bf00      	nop

0001ba80 <ip_recvd_packet_free_cb>:
   1ba80:	b510      	push	{r4, lr}
   1ba82:	4604      	mov	r4, r0
   1ba84:	6800      	ldr	r0, [r0, #0]
   1ba86:	f7ff fff3 	bl	1ba70 <rpc_ip_client_data_free>
   1ba8a:	68a0      	ldr	r0, [r4, #8]
   1ba8c:	b118      	cbz	r0, 1ba96 <ip_recvd_packet_free_cb+0x16>
   1ba8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ba92:	f005 bbdf 	b.w	21254 <nrf_free>
   1ba96:	bd10      	pop	{r4, pc}

0001ba98 <rpc_error_to_nrf_bsd_error>:
   1ba98:	2810      	cmp	r0, #16
   1ba9a:	bf9a      	itte	ls
   1ba9c:	4b02      	ldrls	r3, [pc, #8]	; (1baa8 <rpc_error_to_nrf_bsd_error+0x10>)
   1ba9e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   1baa2:	202d      	movhi	r0, #45	; 0x2d
   1baa4:	4770      	bx	lr
   1baa6:	bf00      	nop
   1baa8:	0002f608 	.word	0x0002f608

0001baac <ip_interface_request_create>:
   1baac:	b570      	push	{r4, r5, r6, lr}
   1baae:	2500      	movs	r5, #0
   1bab0:	b082      	sub	sp, #8
   1bab2:	ac02      	add	r4, sp, #8
   1bab4:	f844 5d04 	str.w	r5, [r4, #-4]!
   1bab8:	4606      	mov	r6, r0
   1baba:	460d      	mov	r5, r1
   1babc:	4620      	mov	r0, r4
   1babe:	4619      	mov	r1, r3
   1bac0:	4614      	mov	r4, r2
   1bac2:	f7ff ffa3 	bl	1ba0c <rpc_ip_client_request_alloc>
   1bac6:	b960      	cbnz	r0, 1bae2 <ip_interface_request_create+0x36>
   1bac8:	9b01      	ldr	r3, [sp, #4]
   1baca:	2208      	movs	r2, #8
   1bacc:	7258      	strb	r0, [r3, #9]
   1bace:	7298      	strb	r0, [r3, #10]
   1bad0:	72d8      	strb	r0, [r3, #11]
   1bad2:	4618      	mov	r0, r3
   1bad4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   1bad8:	60dc      	str	r4, [r3, #12]
   1bada:	611d      	str	r5, [r3, #16]
   1badc:	721a      	strb	r2, [r3, #8]
   1bade:	b002      	add	sp, #8
   1bae0:	bd70      	pop	{r4, r5, r6, pc}
   1bae2:	9b01      	ldr	r3, [sp, #4]
   1bae4:	4618      	mov	r0, r3
   1bae6:	b002      	add	sp, #8
   1bae8:	bd70      	pop	{r4, r5, r6, pc}
   1baea:	bf00      	nop

0001baec <ip_interface_request_send>:
   1baec:	b570      	push	{r4, r5, r6, lr}
   1baee:	460c      	mov	r4, r1
   1baf0:	4605      	mov	r5, r0
   1baf2:	4611      	mov	r1, r2
   1baf4:	4620      	mov	r0, r4
   1baf6:	461e      	mov	r6, r3
   1baf8:	f7ff ff9c 	bl	1ba34 <rpc_ip_client_request_send>
   1bafc:	b900      	cbnz	r0, 1bb00 <ip_interface_request_send+0x14>
   1bafe:	bd70      	pop	{r4, r5, r6, pc}
   1bb00:	6820      	ldr	r0, [r4, #0]
   1bb02:	b108      	cbz	r0, 1bb08 <ip_interface_request_send+0x1c>
   1bb04:	f7ff ffb4 	bl	1ba70 <rpc_ip_client_data_free>
   1bb08:	4620      	mov	r0, r4
   1bb0a:	f7ff ffa9 	bl	1ba60 <rpc_ip_client_message_free>
   1bb0e:	602e      	str	r6, [r5, #0]
   1bb10:	2023      	movs	r0, #35	; 0x23
   1bb12:	bd70      	pop	{r4, r5, r6, pc}

0001bb14 <ip_interface_wait>:
   1bb14:	b538      	push	{r3, r4, r5, lr}
   1bb16:	4605      	mov	r5, r0
   1bb18:	f006 f826 	bl	21b68 <interface_socket_wait>
   1bb1c:	4604      	mov	r4, r0
   1bb1e:	b108      	cbz	r0, 1bb24 <ip_interface_wait+0x10>
   1bb20:	4620      	mov	r0, r4
   1bb22:	bd38      	pop	{r3, r4, r5, pc}
   1bb24:	4628      	mov	r0, r5
   1bb26:	f006 f893 	bl	21c50 <interface_socket_from_handle_get>
   1bb2a:	2800      	cmp	r0, #0
   1bb2c:	d0f8      	beq.n	1bb20 <ip_interface_wait+0xc>
   1bb2e:	6844      	ldr	r4, [r0, #4]
   1bb30:	2c00      	cmp	r4, #0
   1bb32:	d0f5      	beq.n	1bb20 <ip_interface_wait+0xc>
   1bb34:	2300      	movs	r3, #0
   1bb36:	6043      	str	r3, [r0, #4]
   1bb38:	4620      	mov	r0, r4
   1bb3a:	bd38      	pop	{r3, r4, r5, pc}

0001bb3c <ip_interface_init>:
   1bb3c:	b538      	push	{r3, r4, r5, lr}
   1bb3e:	2300      	movs	r3, #0
   1bb40:	4d09      	ldr	r5, [pc, #36]	; (1bb68 <ip_interface_init+0x2c>)
   1bb42:	4c0a      	ldr	r4, [pc, #40]	; (1bb6c <ip_interface_init+0x30>)
   1bb44:	4619      	mov	r1, r3
   1bb46:	2224      	movs	r2, #36	; 0x24
   1bb48:	4809      	ldr	r0, [pc, #36]	; (1bb70 <ip_interface_init+0x34>)
   1bb4a:	602b      	str	r3, [r5, #0]
   1bb4c:	6023      	str	r3, [r4, #0]
   1bb4e:	f00a fc53 	bl	263f8 <memset>
   1bb52:	f7ff ff55 	bl	1ba00 <rpc_ip_client_init>
   1bb56:	b918      	cbnz	r0, 1bb60 <ip_interface_init+0x24>
   1bb58:	2201      	movs	r2, #1
   1bb5a:	4b06      	ldr	r3, [pc, #24]	; (1bb74 <ip_interface_init+0x38>)
   1bb5c:	701a      	strb	r2, [r3, #0]
   1bb5e:	bd38      	pop	{r3, r4, r5, pc}
   1bb60:	f04f 30ff 	mov.w	r0, #4294967295
   1bb64:	bd38      	pop	{r3, r4, r5, pc}
   1bb66:	bf00      	nop
   1bb68:	200219e4 	.word	0x200219e4
   1bb6c:	200219e0 	.word	0x200219e0
   1bb70:	200219e8 	.word	0x200219e8
   1bb74:	2002629a 	.word	0x2002629a

0001bb78 <ip_interface_open>:
   1bb78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb7c:	2500      	movs	r5, #0
   1bb7e:	f04f 37ff 	mov.w	r7, #4294967295
   1bb82:	4c5e      	ldr	r4, [pc, #376]	; (1bcfc <ip_interface_open+0x184>)
   1bb84:	4606      	mov	r6, r0
   1bb86:	7820      	ldrb	r0, [r4, #0]
   1bb88:	b084      	sub	sp, #16
   1bb8a:	e9cd 5701 	strd	r5, r7, [sp, #4]
   1bb8e:	2800      	cmp	r0, #0
   1bb90:	f000 80b0 	beq.w	1bcf4 <ip_interface_open+0x17c>
   1bb94:	4690      	mov	r8, r2
   1bb96:	f026 0208 	bic.w	r2, r6, #8
   1bb9a:	2a02      	cmp	r2, #2
   1bb9c:	460c      	mov	r4, r1
   1bb9e:	d002      	beq.n	1bba6 <ip_interface_open+0x2e>
   1bba0:	2e05      	cmp	r6, #5
   1bba2:	f040 808d 	bne.w	1bcc0 <ip_interface_open+0x148>
   1bba6:	1e63      	subs	r3, r4, #1
   1bba8:	2b02      	cmp	r3, #2
   1bbaa:	f200 809d 	bhi.w	1bce8 <ip_interface_open+0x170>
   1bbae:	f1b8 0f00 	cmp.w	r8, #0
   1bbb2:	d159      	bne.n	1bc68 <ip_interface_open+0xf0>
   1bbb4:	2c01      	cmp	r4, #1
   1bbb6:	d06f      	beq.n	1bc98 <ip_interface_open+0x120>
   1bbb8:	2c03      	cmp	r4, #3
   1bbba:	bf18      	it	ne
   1bbbc:	f04f 0802 	movne.w	r8, #2
   1bbc0:	4a4f      	ldr	r2, [pc, #316]	; (1bd00 <ip_interface_open+0x188>)
   1bbc2:	4621      	mov	r1, r4
   1bbc4:	a801      	add	r0, sp, #4
   1bbc6:	f005 ff1d 	bl	21a04 <interface_socket_allocate>
   1bbca:	9b01      	ldr	r3, [sp, #4]
   1bbcc:	4607      	mov	r7, r0
   1bbce:	2b00      	cmp	r3, #0
   1bbd0:	d060      	beq.n	1bc94 <ip_interface_open+0x11c>
   1bbd2:	2100      	movs	r1, #0
   1bbd4:	a804      	add	r0, sp, #16
   1bbd6:	f840 1d04 	str.w	r1, [r0, #-4]!
   1bbda:	e9c3 6403 	strd	r6, r4, [r3, #12]
   1bbde:	f8c3 8014 	str.w	r8, [r3, #20]
   1bbe2:	f7ff ff13 	bl	1ba0c <rpc_ip_client_request_alloc>
   1bbe6:	2800      	cmp	r0, #0
   1bbe8:	d151      	bne.n	1bc8e <ip_interface_open+0x116>
   1bbea:	f247 0201 	movw	r2, #28673	; 0x7001
   1bbee:	f04f 33ff 	mov.w	r3, #4294967295
   1bbf2:	2108      	movs	r1, #8
   1bbf4:	9d03      	ldr	r5, [sp, #12]
   1bbf6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   1bbfa:	60ea      	str	r2, [r5, #12]
   1bbfc:	7268      	strb	r0, [r5, #9]
   1bbfe:	72a8      	strb	r0, [r5, #10]
   1bc00:	72e8      	strb	r0, [r5, #11]
   1bc02:	7229      	strb	r1, [r5, #8]
   1bc04:	742b      	strb	r3, [r5, #16]
   1bc06:	746b      	strb	r3, [r5, #17]
   1bc08:	74ab      	strb	r3, [r5, #18]
   1bc0a:	74eb      	strb	r3, [r5, #19]
   1bc0c:	68ab      	ldr	r3, [r5, #8]
   1bc0e:	2e05      	cmp	r6, #5
   1bc10:	f103 030c 	add.w	r3, r3, #12
   1bc14:	60ab      	str	r3, [r5, #8]
   1bc16:	d003      	beq.n	1bc20 <ip_interface_open+0xa8>
   1bc18:	2e0a      	cmp	r6, #10
   1bc1a:	bf14      	ite	ne
   1bc1c:	2601      	movne	r6, #1
   1bc1e:	2602      	moveq	r6, #2
   1bc20:	616e      	str	r6, [r5, #20]
   1bc22:	f8c5 801c 	str.w	r8, [r5, #28]
   1bc26:	61ac      	str	r4, [r5, #24]
   1bc28:	f247 0101 	movw	r1, #28673	; 0x7001
   1bc2c:	4628      	mov	r0, r5
   1bc2e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1bc32:	f7ff feff 	bl	1ba34 <rpc_ip_client_request_send>
   1bc36:	4606      	mov	r6, r0
   1bc38:	b380      	cbz	r0, 1bc9c <ip_interface_open+0x124>
   1bc3a:	6828      	ldr	r0, [r5, #0]
   1bc3c:	b108      	cbz	r0, 1bc42 <ip_interface_open+0xca>
   1bc3e:	f7ff ff17 	bl	1ba70 <rpc_ip_client_data_free>
   1bc42:	4628      	mov	r0, r5
   1bc44:	f7ff ff0c 	bl	1ba60 <rpc_ip_client_message_free>
   1bc48:	2301      	movs	r3, #1
   1bc4a:	2523      	movs	r5, #35	; 0x23
   1bc4c:	f8c8 3000 	str.w	r3, [r8]
   1bc50:	4638      	mov	r0, r7
   1bc52:	f005 ff3b 	bl	21acc <interface_socket_free>
   1bc56:	4628      	mov	r0, r5
   1bc58:	f7fa ff58 	bl	16b0c <bsd_os_errno_set>
   1bc5c:	f04f 37ff 	mov.w	r7, #4294967295
   1bc60:	4638      	mov	r0, r7
   1bc62:	b004      	add	sp, #16
   1bc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bc68:	2c01      	cmp	r4, #1
   1bc6a:	d00a      	beq.n	1bc82 <ip_interface_open+0x10a>
   1bc6c:	2c02      	cmp	r4, #2
   1bc6e:	d10b      	bne.n	1bc88 <ip_interface_open+0x110>
   1bc70:	f1b8 0f02 	cmp.w	r8, #2
   1bc74:	d0a4      	beq.n	1bbc0 <ip_interface_open+0x48>
   1bc76:	2029      	movs	r0, #41	; 0x29
   1bc78:	f7fa ff48 	bl	16b0c <bsd_os_errno_set>
   1bc7c:	f04f 37ff 	mov.w	r7, #4294967295
   1bc80:	e7ee      	b.n	1bc60 <ip_interface_open+0xe8>
   1bc82:	f1b8 0f01 	cmp.w	r8, #1
   1bc86:	d1f6      	bne.n	1bc76 <ip_interface_open+0xfe>
   1bc88:	f04f 0802 	mov.w	r8, #2
   1bc8c:	e798      	b.n	1bbc0 <ip_interface_open+0x48>
   1bc8e:	9d03      	ldr	r5, [sp, #12]
   1bc90:	2d00      	cmp	r5, #0
   1bc92:	d1bb      	bne.n	1bc0c <ip_interface_open+0x94>
   1bc94:	2569      	movs	r5, #105	; 0x69
   1bc96:	e7db      	b.n	1bc50 <ip_interface_open+0xd8>
   1bc98:	46a0      	mov	r8, r4
   1bc9a:	e791      	b.n	1bbc0 <ip_interface_open+0x48>
   1bc9c:	ab02      	add	r3, sp, #8
   1bc9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1bca2:	2102      	movs	r1, #2
   1bca4:	4638      	mov	r0, r7
   1bca6:	f005 ff5f 	bl	21b68 <interface_socket_wait>
   1bcaa:	4605      	mov	r5, r0
   1bcac:	2800      	cmp	r0, #0
   1bcae:	d1cf      	bne.n	1bc50 <ip_interface_open+0xd8>
   1bcb0:	4638      	mov	r0, r7
   1bcb2:	f005 ffcd 	bl	21c50 <interface_socket_from_handle_get>
   1bcb6:	b138      	cbz	r0, 1bcc8 <ip_interface_open+0x150>
   1bcb8:	6845      	ldr	r5, [r0, #4]
   1bcba:	b12d      	cbz	r5, 1bcc8 <ip_interface_open+0x150>
   1bcbc:	6046      	str	r6, [r0, #4]
   1bcbe:	e7c7      	b.n	1bc50 <ip_interface_open+0xd8>
   1bcc0:	202f      	movs	r0, #47	; 0x2f
   1bcc2:	f7fa ff23 	bl	16b0c <bsd_os_errno_set>
   1bcc6:	e7cb      	b.n	1bc60 <ip_interface_open+0xe8>
   1bcc8:	3c02      	subs	r4, #2
   1bcca:	2c01      	cmp	r4, #1
   1bccc:	d8c8      	bhi.n	1bc60 <ip_interface_open+0xe8>
   1bcce:	4638      	mov	r0, r7
   1bcd0:	9b01      	ldr	r3, [sp, #4]
   1bcd2:	681a      	ldr	r2, [r3, #0]
   1bcd4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1bcd8:	601a      	str	r2, [r3, #0]
   1bcda:	681a      	ldr	r2, [r3, #0]
   1bcdc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1bce0:	601a      	str	r2, [r3, #0]
   1bce2:	b004      	add	sp, #16
   1bce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bce8:	2016      	movs	r0, #22
   1bcea:	f7fa ff0f 	bl	16b0c <bsd_os_errno_set>
   1bcee:	f04f 37ff 	mov.w	r7, #4294967295
   1bcf2:	e7b5      	b.n	1bc60 <ip_interface_open+0xe8>
   1bcf4:	2070      	movs	r0, #112	; 0x70
   1bcf6:	f7fa ff09 	bl	16b0c <bsd_os_errno_set>
   1bcfa:	e7b1      	b.n	1bc60 <ip_interface_open+0xe8>
   1bcfc:	2002629a 	.word	0x2002629a
   1bd00:	0001ba81 	.word	0x0001ba81

0001bd04 <ip_interface_close>:
   1bd04:	f04f 33ff 	mov.w	r3, #4294967295
   1bd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd0c:	b082      	sub	sp, #8
   1bd0e:	4606      	mov	r6, r0
   1bd10:	9300      	str	r3, [sp, #0]
   1bd12:	f005 ff9d 	bl	21c50 <interface_socket_from_handle_get>
   1bd16:	2800      	cmp	r0, #0
   1bd18:	d062      	beq.n	1bde0 <ip_interface_close+0xdc>
   1bd1a:	4604      	mov	r4, r0
   1bd1c:	2100      	movs	r1, #0
   1bd1e:	a802      	add	r0, sp, #8
   1bd20:	6827      	ldr	r7, [r4, #0]
   1bd22:	f840 1d04 	str.w	r1, [r0, #-4]!
   1bd26:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1bd2a:	f7ff fe6f 	bl	1ba0c <rpc_ip_client_request_alloc>
   1bd2e:	2800      	cmp	r0, #0
   1bd30:	d139      	bne.n	1bda6 <ip_interface_close+0xa2>
   1bd32:	f247 0309 	movw	r3, #28681	; 0x7009
   1bd36:	2208      	movs	r2, #8
   1bd38:	9d01      	ldr	r5, [sp, #4]
   1bd3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1bd3e:	60eb      	str	r3, [r5, #12]
   1bd40:	f8c5 8010 	str.w	r8, [r5, #16]
   1bd44:	7268      	strb	r0, [r5, #9]
   1bd46:	72a8      	strb	r0, [r5, #10]
   1bd48:	72e8      	strb	r0, [r5, #11]
   1bd4a:	722a      	strb	r2, [r5, #8]
   1bd4c:	6823      	ldr	r3, [r4, #0]
   1bd4e:	f247 0109 	movw	r1, #28681	; 0x7009
   1bd52:	0c1b      	lsrs	r3, r3, #16
   1bd54:	041b      	lsls	r3, r3, #16
   1bd56:	f043 030d 	orr.w	r3, r3, #13
   1bd5a:	6023      	str	r3, [r4, #0]
   1bd5c:	6823      	ldr	r3, [r4, #0]
   1bd5e:	4628      	mov	r0, r5
   1bd60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1bd64:	6023      	str	r3, [r4, #0]
   1bd66:	6823      	ldr	r3, [r4, #0]
   1bd68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1bd6c:	6023      	str	r3, [r4, #0]
   1bd6e:	f7ff fe61 	bl	1ba34 <rpc_ip_client_request_send>
   1bd72:	bb38      	cbnz	r0, 1bdc4 <ip_interface_close+0xc0>
   1bd74:	466b      	mov	r3, sp
   1bd76:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1bd7a:	210e      	movs	r1, #14
   1bd7c:	4630      	mov	r0, r6
   1bd7e:	f005 fef3 	bl	21b68 <interface_socket_wait>
   1bd82:	4604      	mov	r4, r0
   1bd84:	b1a0      	cbz	r0, 1bdb0 <ip_interface_close+0xac>
   1bd86:	4c17      	ldr	r4, [pc, #92]	; (1bde4 <ip_interface_close+0xe0>)
   1bd88:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   1bd8c:	b120      	cbz	r0, 1bd98 <ip_interface_close+0x94>
   1bd8e:	f7ff fe67 	bl	1ba60 <rpc_ip_client_message_free>
   1bd92:	2300      	movs	r3, #0
   1bd94:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   1bd98:	4630      	mov	r0, r6
   1bd9a:	f005 fe97 	bl	21acc <interface_socket_free>
   1bd9e:	2000      	movs	r0, #0
   1bda0:	b002      	add	sp, #8
   1bda2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bda6:	9d01      	ldr	r5, [sp, #4]
   1bda8:	200c      	movs	r0, #12
   1bdaa:	2d00      	cmp	r5, #0
   1bdac:	d1ce      	bne.n	1bd4c <ip_interface_close+0x48>
   1bdae:	e012      	b.n	1bdd6 <ip_interface_close+0xd2>
   1bdb0:	4630      	mov	r0, r6
   1bdb2:	f005 ff4d 	bl	21c50 <interface_socket_from_handle_get>
   1bdb6:	2800      	cmp	r0, #0
   1bdb8:	d0e5      	beq.n	1bd86 <ip_interface_close+0x82>
   1bdba:	6843      	ldr	r3, [r0, #4]
   1bdbc:	2b00      	cmp	r3, #0
   1bdbe:	d0e2      	beq.n	1bd86 <ip_interface_close+0x82>
   1bdc0:	6044      	str	r4, [r0, #4]
   1bdc2:	e7e0      	b.n	1bd86 <ip_interface_close+0x82>
   1bdc4:	6828      	ldr	r0, [r5, #0]
   1bdc6:	b108      	cbz	r0, 1bdcc <ip_interface_close+0xc8>
   1bdc8:	f7ff fe52 	bl	1ba70 <rpc_ip_client_data_free>
   1bdcc:	4628      	mov	r0, r5
   1bdce:	f7ff fe47 	bl	1ba60 <rpc_ip_client_message_free>
   1bdd2:	2023      	movs	r0, #35	; 0x23
   1bdd4:	6027      	str	r7, [r4, #0]
   1bdd6:	f7fa fe99 	bl	16b0c <bsd_os_errno_set>
   1bdda:	f04f 30ff 	mov.w	r0, #4294967295
   1bdde:	e7df      	b.n	1bda0 <ip_interface_close+0x9c>
   1bde0:	2009      	movs	r0, #9
   1bde2:	e7f8      	b.n	1bdd6 <ip_interface_close+0xd2>
   1bde4:	200219e8 	.word	0x200219e8

0001bde8 <ip_interface_sendto>:
   1bde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bdec:	2400      	movs	r4, #0
   1bdee:	b08b      	sub	sp, #44	; 0x2c
   1bdf0:	9102      	str	r1, [sp, #8]
   1bdf2:	4615      	mov	r5, r2
   1bdf4:	4699      	mov	r9, r3
   1bdf6:	9407      	str	r4, [sp, #28]
   1bdf8:	4607      	mov	r7, r0
   1bdfa:	9e14      	ldr	r6, [sp, #80]	; 0x50
   1bdfc:	f005 ff28 	bl	21c50 <interface_socket_from_handle_get>
   1be00:	2800      	cmp	r0, #0
   1be02:	f000 8163 	beq.w	1c0cc <ip_interface_sendto+0x2e4>
   1be06:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1be0a:	f300 8150 	bgt.w	1c0ae <ip_interface_sendto+0x2c6>
   1be0e:	6903      	ldr	r3, [r0, #16]
   1be10:	4604      	mov	r4, r0
   1be12:	2b01      	cmp	r3, #1
   1be14:	f000 8109 	beq.w	1c02a <ip_interface_sendto+0x242>
   1be18:	6822      	ldr	r2, [r4, #0]
   1be1a:	0391      	lsls	r1, r2, #14
   1be1c:	d569      	bpl.n	1bef2 <ip_interface_sendto+0x10a>
   1be1e:	f1b9 0f00 	cmp.w	r9, #0
   1be22:	f000 8112 	beq.w	1c04a <ip_interface_sendto+0x262>
   1be26:	f019 0f02 	tst.w	r9, #2
   1be2a:	f000 814a 	beq.w	1c0c2 <ip_interface_sendto+0x2da>
   1be2e:	2300      	movs	r3, #0
   1be30:	9303      	str	r3, [sp, #12]
   1be32:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1be34:	f247 0806 	movw	r8, #28678	; 0x7006
   1be38:	2b00      	cmp	r3, #0
   1be3a:	bf08      	it	eq
   1be3c:	f04f 33ff 	moveq.w	r3, #4294967295
   1be40:	f04f 0b0c 	mov.w	fp, #12
   1be44:	4aa5      	ldr	r2, [pc, #660]	; (1c0dc <ip_interface_sendto+0x2f4>)
   1be46:	9308      	str	r3, [sp, #32]
   1be48:	043b      	lsls	r3, r7, #16
   1be4a:	9200      	str	r2, [sp, #0]
   1be4c:	9304      	str	r3, [sp, #16]
   1be4e:	4629      	mov	r1, r5
   1be50:	a807      	add	r0, sp, #28
   1be52:	f7ff fddb 	bl	1ba0c <rpc_ip_client_request_alloc>
   1be56:	2804      	cmp	r0, #4
   1be58:	d05e      	beq.n	1bf18 <ip_interface_sendto+0x130>
   1be5a:	2800      	cmp	r0, #0
   1be5c:	f040 813b 	bne.w	1c0d6 <ip_interface_sendto+0x2ee>
   1be60:	9b07      	ldr	r3, [sp, #28]
   1be62:	f883 b008 	strb.w	fp, [r3, #8]
   1be66:	7258      	strb	r0, [r3, #9]
   1be68:	7298      	strb	r0, [r3, #10]
   1be6a:	72d8      	strb	r0, [r3, #11]
   1be6c:	2e00      	cmp	r6, #0
   1be6e:	d06b      	beq.n	1bf48 <ip_interface_sendto+0x160>
   1be70:	68e2      	ldr	r2, [r4, #12]
   1be72:	6871      	ldr	r1, [r6, #4]
   1be74:	428a      	cmp	r2, r1
   1be76:	f040 80a8 	bne.w	1bfca <ip_interface_sendto+0x1e2>
   1be7a:	7831      	ldrb	r1, [r6, #0]
   1be7c:	9815      	ldr	r0, [sp, #84]	; 0x54
   1be7e:	4288      	cmp	r0, r1
   1be80:	d10a      	bne.n	1be98 <ip_interface_sendto+0xb0>
   1be82:	2a02      	cmp	r2, #2
   1be84:	f103 001c 	add.w	r0, r3, #28
   1be88:	f000 80ff 	beq.w	1c08a <ip_interface_sendto+0x2a2>
   1be8c:	2a0a      	cmp	r2, #10
   1be8e:	d103      	bne.n	1be98 <ip_interface_sendto+0xb0>
   1be90:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1be92:	2a24      	cmp	r2, #36	; 0x24
   1be94:	f000 80e6 	beq.w	1c064 <ip_interface_sendto+0x27c>
   1be98:	f04f 0a16 	mov.w	sl, #22
   1be9c:	6818      	ldr	r0, [r3, #0]
   1be9e:	b110      	cbz	r0, 1bea6 <ip_interface_sendto+0xbe>
   1bea0:	f7ff fde6 	bl	1ba70 <rpc_ip_client_data_free>
   1bea4:	9b07      	ldr	r3, [sp, #28]
   1bea6:	4618      	mov	r0, r3
   1bea8:	f7ff fdda 	bl	1ba60 <rpc_ip_client_message_free>
   1beac:	6823      	ldr	r3, [r4, #0]
   1beae:	0318      	lsls	r0, r3, #12
   1beb0:	d40b      	bmi.n	1beca <ip_interface_sendto+0xe2>
   1beb2:	6823      	ldr	r3, [r4, #0]
   1beb4:	b29b      	uxth	r3, r3
   1beb6:	2b0d      	cmp	r3, #13
   1beb8:	d007      	beq.n	1beca <ip_interface_sendto+0xe2>
   1beba:	6823      	ldr	r3, [r4, #0]
   1bebc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1bec0:	6023      	str	r3, [r4, #0]
   1bec2:	6823      	ldr	r3, [r4, #0]
   1bec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1bec8:	6023      	str	r3, [r4, #0]
   1beca:	f1ba 0f00 	cmp.w	sl, #0
   1bece:	f040 80b3 	bne.w	1c038 <ip_interface_sendto+0x250>
   1bed2:	6823      	ldr	r3, [r4, #0]
   1bed4:	0119      	lsls	r1, r3, #4
   1bed6:	d57b      	bpl.n	1bfd0 <ip_interface_sendto+0x1e8>
   1bed8:	6823      	ldr	r3, [r4, #0]
   1beda:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   1bede:	6023      	str	r3, [r4, #0]
   1bee0:	9b00      	ldr	r3, [sp, #0]
   1bee2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1bee6:	2800      	cmp	r0, #0
   1bee8:	d176      	bne.n	1bfd8 <ip_interface_sendto+0x1f0>
   1beea:	4628      	mov	r0, r5
   1beec:	b00b      	add	sp, #44	; 0x2c
   1beee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bef2:	6822      	ldr	r2, [r4, #0]
   1bef4:	0092      	lsls	r2, r2, #2
   1bef6:	d406      	bmi.n	1bf06 <ip_interface_sendto+0x11e>
   1bef8:	2b01      	cmp	r3, #1
   1befa:	f000 80ad 	beq.w	1c058 <ip_interface_sendto+0x270>
   1befe:	6823      	ldr	r3, [r4, #0]
   1bf00:	031b      	lsls	r3, r3, #12
   1bf02:	f140 80cf 	bpl.w	1c0a4 <ip_interface_sendto+0x2bc>
   1bf06:	6823      	ldr	r3, [r4, #0]
   1bf08:	031e      	lsls	r6, r3, #12
   1bf0a:	f140 80d5 	bpl.w	1c0b8 <ip_interface_sendto+0x2d0>
   1bf0e:	4b73      	ldr	r3, [pc, #460]	; (1c0dc <ip_interface_sendto+0x2f4>)
   1bf10:	f8d4 a008 	ldr.w	sl, [r4, #8]
   1bf14:	9300      	str	r3, [sp, #0]
   1bf16:	e7d8      	b.n	1beca <ip_interface_sendto+0xe2>
   1bf18:	9b03      	ldr	r3, [sp, #12]
   1bf1a:	2b00      	cmp	r3, #0
   1bf1c:	d052      	beq.n	1bfc4 <ip_interface_sendto+0x1dc>
   1bf1e:	9b08      	ldr	r3, [sp, #32]
   1bf20:	3301      	adds	r3, #1
   1bf22:	d094      	beq.n	1be4e <ip_interface_sendto+0x66>
   1bf24:	230a      	movs	r3, #10
   1bf26:	a90a      	add	r1, sp, #40	; 0x28
   1bf28:	f841 3d04 	str.w	r3, [r1, #-4]!
   1bf2c:	2000      	movs	r0, #0
   1bf2e:	f7fa fd35 	bl	1699c <bsd_os_timedwait>
   1bf32:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   1bf36:	f1c2 020a 	rsb	r2, r2, #10
   1bf3a:	1a9b      	subs	r3, r3, r2
   1bf3c:	2b00      	cmp	r3, #0
   1bf3e:	9308      	str	r3, [sp, #32]
   1bf40:	dc85      	bgt.n	1be4e <ip_interface_sendto+0x66>
   1bf42:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
   1bf46:	e7b1      	b.n	1beac <ip_interface_sendto+0xc4>
   1bf48:	4642      	mov	r2, r8
   1bf4a:	f8c3 9014 	str.w	r9, [r3, #20]
   1bf4e:	69a1      	ldr	r1, [r4, #24]
   1bf50:	9804      	ldr	r0, [sp, #16]
   1bf52:	6119      	str	r1, [r3, #16]
   1bf54:	9902      	ldr	r1, [sp, #8]
   1bf56:	4302      	orrs	r2, r0
   1bf58:	60da      	str	r2, [r3, #12]
   1bf5a:	605d      	str	r5, [r3, #4]
   1bf5c:	b119      	cbz	r1, 1bf66 <ip_interface_sendto+0x17e>
   1bf5e:	6818      	ldr	r0, [r3, #0]
   1bf60:	462a      	mov	r2, r5
   1bf62:	f7f0 fdf3 	bl	cb4c <memcpy>
   1bf66:	6823      	ldr	r3, [r4, #0]
   1bf68:	4641      	mov	r1, r8
   1bf6a:	9305      	str	r3, [sp, #20]
   1bf6c:	6823      	ldr	r3, [r4, #0]
   1bf6e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1bf72:	6023      	str	r3, [r4, #0]
   1bf74:	6823      	ldr	r3, [r4, #0]
   1bf76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1bf7a:	6023      	str	r3, [r4, #0]
   1bf7c:	9b07      	ldr	r3, [sp, #28]
   1bf7e:	4618      	mov	r0, r3
   1bf80:	9301      	str	r3, [sp, #4]
   1bf82:	f7ff fd57 	bl	1ba34 <rpc_ip_client_request_send>
   1bf86:	9b01      	ldr	r3, [sp, #4]
   1bf88:	4682      	mov	sl, r0
   1bf8a:	bb78      	cbnz	r0, 1bfec <ip_interface_sendto+0x204>
   1bf8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1bf90:	ab08      	add	r3, sp, #32
   1bf92:	4611      	mov	r1, r2
   1bf94:	4638      	mov	r0, r7
   1bf96:	f005 fde7 	bl	21b68 <interface_socket_wait>
   1bf9a:	4603      	mov	r3, r0
   1bf9c:	b398      	cbz	r0, 1c006 <ip_interface_sendto+0x21e>
   1bf9e:	6822      	ldr	r2, [r4, #0]
   1bfa0:	0312      	lsls	r2, r2, #12
   1bfa2:	d43f      	bmi.n	1c024 <ip_interface_sendto+0x23c>
   1bfa4:	2b3c      	cmp	r3, #60	; 0x3c
   1bfa6:	d001      	beq.n	1bfac <ip_interface_sendto+0x1c4>
   1bfa8:	2b0c      	cmp	r3, #12
   1bfaa:	d001      	beq.n	1bfb0 <ip_interface_sendto+0x1c8>
   1bfac:	469a      	mov	sl, r3
   1bfae:	e77d      	b.n	1beac <ip_interface_sendto+0xc4>
   1bfb0:	9b00      	ldr	r3, [sp, #0]
   1bfb2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1bfb6:	b108      	cbz	r0, 1bfbc <ip_interface_sendto+0x1d4>
   1bfb8:	f7ff fd52 	bl	1ba60 <rpc_ip_client_message_free>
   1bfbc:	9b03      	ldr	r3, [sp, #12]
   1bfbe:	2b00      	cmp	r3, #0
   1bfc0:	f47f af45 	bne.w	1be4e <ip_interface_sendto+0x66>
   1bfc4:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1bfc8:	e770      	b.n	1beac <ip_interface_sendto+0xc4>
   1bfca:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   1bfce:	e765      	b.n	1be9c <ip_interface_sendto+0xb4>
   1bfd0:	9b00      	ldr	r3, [sp, #0]
   1bfd2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1bfd6:	6985      	ldr	r5, [r0, #24]
   1bfd8:	f7ff fd42 	bl	1ba60 <rpc_ip_client_message_free>
   1bfdc:	2300      	movs	r3, #0
   1bfde:	4628      	mov	r0, r5
   1bfe0:	9a00      	ldr	r2, [sp, #0]
   1bfe2:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   1bfe6:	b00b      	add	sp, #44	; 0x2c
   1bfe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfec:	6818      	ldr	r0, [r3, #0]
   1bfee:	469a      	mov	sl, r3
   1bff0:	b108      	cbz	r0, 1bff6 <ip_interface_sendto+0x20e>
   1bff2:	f7ff fd3d 	bl	1ba70 <rpc_ip_client_data_free>
   1bff6:	4650      	mov	r0, sl
   1bff8:	f7ff fd32 	bl	1ba60 <rpc_ip_client_message_free>
   1bffc:	9b05      	ldr	r3, [sp, #20]
   1bffe:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1c002:	6023      	str	r3, [r4, #0]
   1c004:	e752      	b.n	1beac <ip_interface_sendto+0xc4>
   1c006:	9001      	str	r0, [sp, #4]
   1c008:	4638      	mov	r0, r7
   1c00a:	f005 fe21 	bl	21c50 <interface_socket_from_handle_get>
   1c00e:	9b01      	ldr	r3, [sp, #4]
   1c010:	2800      	cmp	r0, #0
   1c012:	d0cb      	beq.n	1bfac <ip_interface_sendto+0x1c4>
   1c014:	6843      	ldr	r3, [r0, #4]
   1c016:	2b00      	cmp	r3, #0
   1c018:	d0c8      	beq.n	1bfac <ip_interface_sendto+0x1c4>
   1c01a:	f8c0 a004 	str.w	sl, [r0, #4]
   1c01e:	6822      	ldr	r2, [r4, #0]
   1c020:	0312      	lsls	r2, r2, #12
   1c022:	d5bf      	bpl.n	1bfa4 <ip_interface_sendto+0x1bc>
   1c024:	f8d4 a008 	ldr.w	sl, [r4, #8]
   1c028:	e740      	b.n	1beac <ip_interface_sendto+0xc4>
   1c02a:	2e00      	cmp	r6, #0
   1c02c:	f43f aef4 	beq.w	1be18 <ip_interface_sendto+0x30>
   1c030:	f04f 0a38 	mov.w	sl, #56	; 0x38
   1c034:	4b29      	ldr	r3, [pc, #164]	; (1c0dc <ip_interface_sendto+0x2f4>)
   1c036:	9300      	str	r3, [sp, #0]
   1c038:	4650      	mov	r0, sl
   1c03a:	f7fa fd67 	bl	16b0c <bsd_os_errno_set>
   1c03e:	9b00      	ldr	r3, [sp, #0]
   1c040:	f04f 35ff 	mov.w	r5, #4294967295
   1c044:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   1c048:	e74d      	b.n	1bee6 <ip_interface_sendto+0xfe>
   1c04a:	6823      	ldr	r3, [r4, #0]
   1c04c:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   1c050:	f3c3 7300 	ubfx	r3, r3, #28, #1
   1c054:	9303      	str	r3, [sp, #12]
   1c056:	e6ec      	b.n	1be32 <ip_interface_sendto+0x4a>
   1c058:	6823      	ldr	r3, [r4, #0]
   1c05a:	b29b      	uxth	r3, r3
   1c05c:	2b05      	cmp	r3, #5
   1c05e:	f47f af52 	bne.w	1bf06 <ip_interface_sendto+0x11e>
   1c062:	e74c      	b.n	1befe <ip_interface_sendto+0x116>
   1c064:	2210      	movs	r2, #16
   1c066:	8931      	ldrh	r1, [r6, #8]
   1c068:	835a      	strh	r2, [r3, #26]
   1c06a:	8319      	strh	r1, [r3, #24]
   1c06c:	18b1      	adds	r1, r6, r2
   1c06e:	f7f0 fd6d 	bl	cb4c <memcpy>
   1c072:	f247 0207 	movw	r2, #28679	; 0x7007
   1c076:	9b07      	ldr	r3, [sp, #28]
   1c078:	4690      	mov	r8, r2
   1c07a:	6899      	ldr	r1, [r3, #8]
   1c07c:	8b58      	ldrh	r0, [r3, #26]
   1c07e:	3104      	adds	r1, #4
   1c080:	4401      	add	r1, r0
   1c082:	f8c3 9014 	str.w	r9, [r3, #20]
   1c086:	6099      	str	r1, [r3, #8]
   1c088:	e761      	b.n	1bf4e <ip_interface_sendto+0x166>
   1c08a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1c08c:	2a10      	cmp	r2, #16
   1c08e:	f47f af03 	bne.w	1be98 <ip_interface_sendto+0xb0>
   1c092:	2204      	movs	r2, #4
   1c094:	8931      	ldrh	r1, [r6, #8]
   1c096:	835a      	strh	r2, [r3, #26]
   1c098:	8319      	strh	r1, [r3, #24]
   1c09a:	f106 010c 	add.w	r1, r6, #12
   1c09e:	f7f0 fd55 	bl	cb4c <memcpy>
   1c0a2:	e7e6      	b.n	1c072 <ip_interface_sendto+0x28a>
   1c0a4:	4b0d      	ldr	r3, [pc, #52]	; (1c0dc <ip_interface_sendto+0x2f4>)
   1c0a6:	f04f 0a23 	mov.w	sl, #35	; 0x23
   1c0aa:	9300      	str	r3, [sp, #0]
   1c0ac:	e7c4      	b.n	1c038 <ip_interface_sendto+0x250>
   1c0ae:	4b0b      	ldr	r3, [pc, #44]	; (1c0dc <ip_interface_sendto+0x2f4>)
   1c0b0:	f04f 0a28 	mov.w	sl, #40	; 0x28
   1c0b4:	9300      	str	r3, [sp, #0]
   1c0b6:	e7bf      	b.n	1c038 <ip_interface_sendto+0x250>
   1c0b8:	4b08      	ldr	r3, [pc, #32]	; (1c0dc <ip_interface_sendto+0x2f4>)
   1c0ba:	f04f 0a39 	mov.w	sl, #57	; 0x39
   1c0be:	9300      	str	r3, [sp, #0]
   1c0c0:	e7ba      	b.n	1c038 <ip_interface_sendto+0x250>
   1c0c2:	4b06      	ldr	r3, [pc, #24]	; (1c0dc <ip_interface_sendto+0x2f4>)
   1c0c4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   1c0c8:	9300      	str	r3, [sp, #0]
   1c0ca:	e7b5      	b.n	1c038 <ip_interface_sendto+0x250>
   1c0cc:	4b03      	ldr	r3, [pc, #12]	; (1c0dc <ip_interface_sendto+0x2f4>)
   1c0ce:	f04f 0a09 	mov.w	sl, #9
   1c0d2:	9300      	str	r3, [sp, #0]
   1c0d4:	e7b0      	b.n	1c038 <ip_interface_sendto+0x250>
   1c0d6:	f04f 0a0c 	mov.w	sl, #12
   1c0da:	e6e7      	b.n	1beac <ip_interface_sendto+0xc4>
   1c0dc:	200219e8 	.word	0x200219e8

0001c0e0 <ip_interface_recvfrom>:
   1c0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0e4:	b087      	sub	sp, #28
   1c0e6:	2a00      	cmp	r2, #0
   1c0e8:	f000 8112 	beq.w	1c310 <ip_interface_recvfrom+0x230>
   1c0ec:	4680      	mov	r8, r0
   1c0ee:	468b      	mov	fp, r1
   1c0f0:	469a      	mov	sl, r3
   1c0f2:	4691      	mov	r9, r2
   1c0f4:	b11b      	cbz	r3, 1c0fe <ip_interface_recvfrom+0x1e>
   1c0f6:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   1c0fa:	f000 8107 	beq.w	1c30c <ip_interface_recvfrom+0x22c>
   1c0fe:	4640      	mov	r0, r8
   1c100:	f005 fda6 	bl	21c50 <interface_socket_from_handle_get>
   1c104:	4604      	mov	r4, r0
   1c106:	2800      	cmp	r0, #0
   1c108:	f000 8104 	beq.w	1c314 <ip_interface_recvfrom+0x234>
   1c10c:	6803      	ldr	r3, [r0, #0]
   1c10e:	02db      	lsls	r3, r3, #11
   1c110:	d562      	bpl.n	1c1d8 <ip_interface_recvfrom+0xf8>
   1c112:	f01a 0f02 	tst.w	sl, #2
   1c116:	bf18      	it	ne
   1c118:	2600      	movne	r6, #0
   1c11a:	f04f 35ff 	mov.w	r5, #4294967295
   1c11e:	bf08      	it	eq
   1c120:	6806      	ldreq	r6, [r0, #0]
   1c122:	f00a 0310 	and.w	r3, sl, #16
   1c126:	bf04      	itt	eq
   1c128:	f086 5680 	eoreq.w	r6, r6, #268435456	; 0x10000000
   1c12c:	f3c6 7600 	ubfxeq	r6, r6, #28, #1
   1c130:	9301      	str	r3, [sp, #4]
   1c132:	6823      	ldr	r3, [r4, #0]
   1c134:	03df      	lsls	r7, r3, #15
   1c136:	d567      	bpl.n	1c208 <ip_interface_recvfrom+0x128>
   1c138:	6823      	ldr	r3, [r4, #0]
   1c13a:	69e0      	ldr	r0, [r4, #28]
   1c13c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1c140:	6023      	str	r3, [r4, #0]
   1c142:	6803      	ldr	r3, [r0, #0]
   1c144:	68db      	ldr	r3, [r3, #12]
   1c146:	4798      	blx	r3
   1c148:	4605      	mov	r5, r0
   1c14a:	3001      	adds	r0, #1
   1c14c:	d07d      	beq.n	1c24a <ip_interface_recvfrom+0x16a>
   1c14e:	45a9      	cmp	r9, r5
   1c150:	dd03      	ble.n	1c15a <ip_interface_recvfrom+0x7a>
   1c152:	6923      	ldr	r3, [r4, #16]
   1c154:	2b01      	cmp	r3, #1
   1c156:	f000 80a3 	beq.w	1c2a0 <ip_interface_recvfrom+0x1c0>
   1c15a:	f04f 0800 	mov.w	r8, #0
   1c15e:	af02      	add	r7, sp, #8
   1c160:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1c162:	b103      	cbz	r3, 1c166 <ip_interface_recvfrom+0x86>
   1c164:	681b      	ldr	r3, [r3, #0]
   1c166:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c168:	e9cd b902 	strd	fp, r9, [sp, #8]
   1c16c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1c170:	69e0      	ldr	r0, [r4, #28]
   1c172:	4639      	mov	r1, r7
   1c174:	6803      	ldr	r3, [r0, #0]
   1c176:	4652      	mov	r2, sl
   1c178:	689b      	ldr	r3, [r3, #8]
   1c17a:	4798      	blx	r3
   1c17c:	4605      	mov	r5, r0
   1c17e:	69e0      	ldr	r0, [r4, #28]
   1c180:	1c6b      	adds	r3, r5, #1
   1c182:	6803      	ldr	r3, [r0, #0]
   1c184:	bf18      	it	ne
   1c186:	2701      	movne	r7, #1
   1c188:	68db      	ldr	r3, [r3, #12]
   1c18a:	bf0a      	itet	eq
   1c18c:	2700      	moveq	r7, #0
   1c18e:	2600      	movne	r6, #0
   1c190:	2623      	moveq	r6, #35	; 0x23
   1c192:	4798      	blx	r3
   1c194:	3001      	adds	r0, #1
   1c196:	d132      	bne.n	1c1fe <ip_interface_recvfrom+0x11e>
   1c198:	f1b8 0f00 	cmp.w	r8, #0
   1c19c:	f000 80b0 	beq.w	1c300 <ip_interface_recvfrom+0x220>
   1c1a0:	2f00      	cmp	r7, #0
   1c1a2:	f000 80a1 	beq.w	1c2e8 <ip_interface_recvfrom+0x208>
   1c1a6:	6823      	ldr	r3, [r4, #0]
   1c1a8:	0318      	lsls	r0, r3, #12
   1c1aa:	d506      	bpl.n	1c1ba <ip_interface_recvfrom+0xda>
   1c1ac:	6823      	ldr	r3, [r4, #0]
   1c1ae:	b29b      	uxth	r3, r3
   1c1b0:	2b0d      	cmp	r3, #13
   1c1b2:	d002      	beq.n	1c1ba <ip_interface_recvfrom+0xda>
   1c1b4:	6923      	ldr	r3, [r4, #16]
   1c1b6:	2b01      	cmp	r3, #1
   1c1b8:	d021      	beq.n	1c1fe <ip_interface_recvfrom+0x11e>
   1c1ba:	6823      	ldr	r3, [r4, #0]
   1c1bc:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1c1c0:	6823      	ldr	r3, [r4, #0]
   1c1c2:	f040 80a9 	bne.w	1c318 <ip_interface_recvfrom+0x238>
   1c1c6:	0319      	lsls	r1, r3, #12
   1c1c8:	d473      	bmi.n	1c2b2 <ip_interface_recvfrom+0x1d2>
   1c1ca:	2e00      	cmp	r6, #0
   1c1cc:	f040 8086 	bne.w	1c2dc <ip_interface_recvfrom+0x1fc>
   1c1d0:	4628      	mov	r0, r5
   1c1d2:	b007      	add	sp, #28
   1c1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1d8:	6803      	ldr	r3, [r0, #0]
   1c1da:	b29b      	uxth	r3, r3
   1c1dc:	2b06      	cmp	r3, #6
   1c1de:	d071      	beq.n	1c2c4 <ip_interface_recvfrom+0x1e4>
   1c1e0:	6803      	ldr	r3, [r0, #0]
   1c1e2:	b29b      	uxth	r3, r3
   1c1e4:	2b07      	cmp	r3, #7
   1c1e6:	bf0c      	ite	eq
   1c1e8:	2609      	moveq	r6, #9
   1c1ea:	2639      	movne	r6, #57	; 0x39
   1c1ec:	69e0      	ldr	r0, [r4, #28]
   1c1ee:	6803      	ldr	r3, [r0, #0]
   1c1f0:	68db      	ldr	r3, [r3, #12]
   1c1f2:	4798      	blx	r3
   1c1f4:	1c43      	adds	r3, r0, #1
   1c1f6:	4605      	mov	r5, r0
   1c1f8:	d0df      	beq.n	1c1ba <ip_interface_recvfrom+0xda>
   1c1fa:	f04f 35ff 	mov.w	r5, #4294967295
   1c1fe:	6823      	ldr	r3, [r4, #0]
   1c200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1c204:	6023      	str	r3, [r4, #0]
   1c206:	e7e0      	b.n	1c1ca <ip_interface_recvfrom+0xea>
   1c208:	2e00      	cmp	r6, #0
   1c20a:	d07d      	beq.n	1c308 <ip_interface_recvfrom+0x228>
   1c20c:	6a26      	ldr	r6, [r4, #32]
   1c20e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c212:	2e00      	cmp	r6, #0
   1c214:	bf08      	it	eq
   1c216:	f04f 36ff 	moveq.w	r6, #4294967295
   1c21a:	af02      	add	r7, sp, #8
   1c21c:	463b      	mov	r3, r7
   1c21e:	4611      	mov	r1, r2
   1c220:	4640      	mov	r0, r8
   1c222:	9602      	str	r6, [sp, #8]
   1c224:	f005 fca0 	bl	21b68 <interface_socket_wait>
   1c228:	4606      	mov	r6, r0
   1c22a:	b350      	cbz	r0, 1c282 <ip_interface_recvfrom+0x1a2>
   1c22c:	6823      	ldr	r3, [r4, #0]
   1c22e:	031a      	lsls	r2, r3, #12
   1c230:	d532      	bpl.n	1c298 <ip_interface_recvfrom+0x1b8>
   1c232:	6823      	ldr	r3, [r4, #0]
   1c234:	b29b      	uxth	r3, r3
   1c236:	2b0d      	cmp	r3, #13
   1c238:	d02e      	beq.n	1c298 <ip_interface_recvfrom+0x1b8>
   1c23a:	6923      	ldr	r3, [r4, #16]
   1c23c:	f1a3 0801 	sub.w	r8, r3, #1
   1c240:	fab8 f888 	clz	r8, r8
   1c244:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1c248:	e78a      	b.n	1c160 <ip_interface_recvfrom+0x80>
   1c24a:	6823      	ldr	r3, [r4, #0]
   1c24c:	031a      	lsls	r2, r3, #12
   1c24e:	d5db      	bpl.n	1c208 <ip_interface_recvfrom+0x128>
   1c250:	6823      	ldr	r3, [r4, #0]
   1c252:	b29b      	uxth	r3, r3
   1c254:	2b0d      	cmp	r3, #13
   1c256:	d0d7      	beq.n	1c208 <ip_interface_recvfrom+0x128>
   1c258:	6923      	ldr	r3, [r4, #16]
   1c25a:	69e0      	ldr	r0, [r4, #28]
   1c25c:	2b01      	cmp	r3, #1
   1c25e:	d033      	beq.n	1c2c8 <ip_interface_recvfrom+0x1e8>
   1c260:	2639      	movs	r6, #57	; 0x39
   1c262:	6823      	ldr	r3, [r4, #0]
   1c264:	0c1b      	lsrs	r3, r3, #16
   1c266:	041b      	lsls	r3, r3, #16
   1c268:	f043 030d 	orr.w	r3, r3, #13
   1c26c:	6023      	str	r3, [r4, #0]
   1c26e:	6823      	ldr	r3, [r4, #0]
   1c270:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1c274:	6023      	str	r3, [r4, #0]
   1c276:	6803      	ldr	r3, [r0, #0]
   1c278:	68db      	ldr	r3, [r3, #12]
   1c27a:	4798      	blx	r3
   1c27c:	3001      	adds	r0, #1
   1c27e:	d1be      	bne.n	1c1fe <ip_interface_recvfrom+0x11e>
   1c280:	e79b      	b.n	1c1ba <ip_interface_recvfrom+0xda>
   1c282:	4640      	mov	r0, r8
   1c284:	f005 fce4 	bl	21c50 <interface_socket_from_handle_get>
   1c288:	b140      	cbz	r0, 1c29c <ip_interface_recvfrom+0x1bc>
   1c28a:	6846      	ldr	r6, [r0, #4]
   1c28c:	b136      	cbz	r6, 1c29c <ip_interface_recvfrom+0x1bc>
   1c28e:	2300      	movs	r3, #0
   1c290:	6043      	str	r3, [r0, #4]
   1c292:	6823      	ldr	r3, [r4, #0]
   1c294:	031a      	lsls	r2, r3, #12
   1c296:	d4cc      	bmi.n	1c232 <ip_interface_recvfrom+0x152>
   1c298:	69e0      	ldr	r0, [r4, #28]
   1c29a:	e7ec      	b.n	1c276 <ip_interface_recvfrom+0x196>
   1c29c:	2601      	movs	r6, #1
   1c29e:	e748      	b.n	1c132 <ip_interface_recvfrom+0x52>
   1c2a0:	9b01      	ldr	r3, [sp, #4]
   1c2a2:	b11b      	cbz	r3, 1c2ac <ip_interface_recvfrom+0x1cc>
   1c2a4:	6823      	ldr	r3, [r4, #0]
   1c2a6:	00d9      	lsls	r1, r3, #3
   1c2a8:	d5b0      	bpl.n	1c20c <ip_interface_recvfrom+0x12c>
   1c2aa:	e756      	b.n	1c15a <ip_interface_recvfrom+0x7a>
   1c2ac:	4698      	mov	r8, r3
   1c2ae:	af02      	add	r7, sp, #8
   1c2b0:	e756      	b.n	1c160 <ip_interface_recvfrom+0x80>
   1c2b2:	6823      	ldr	r3, [r4, #0]
   1c2b4:	b29b      	uxth	r3, r3
   1c2b6:	2b0d      	cmp	r3, #13
   1c2b8:	d187      	bne.n	1c1ca <ip_interface_recvfrom+0xea>
   1c2ba:	68a3      	ldr	r3, [r4, #8]
   1c2bc:	2b00      	cmp	r3, #0
   1c2be:	d084      	beq.n	1c1ca <ip_interface_recvfrom+0xea>
   1c2c0:	68a6      	ldr	r6, [r4, #8]
   1c2c2:	e782      	b.n	1c1ca <ip_interface_recvfrom+0xea>
   1c2c4:	2609      	movs	r6, #9
   1c2c6:	e791      	b.n	1c1ec <ip_interface_recvfrom+0x10c>
   1c2c8:	6803      	ldr	r3, [r0, #0]
   1c2ca:	68db      	ldr	r3, [r3, #12]
   1c2cc:	4798      	blx	r3
   1c2ce:	3001      	adds	r0, #1
   1c2d0:	d00a      	beq.n	1c2e8 <ip_interface_recvfrom+0x208>
   1c2d2:	2623      	movs	r6, #35	; 0x23
   1c2d4:	6823      	ldr	r3, [r4, #0]
   1c2d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1c2da:	6023      	str	r3, [r4, #0]
   1c2dc:	4630      	mov	r0, r6
   1c2de:	f7fa fc15 	bl	16b0c <bsd_os_errno_set>
   1c2e2:	f04f 35ff 	mov.w	r5, #4294967295
   1c2e6:	e773      	b.n	1c1d0 <ip_interface_recvfrom+0xf0>
   1c2e8:	6823      	ldr	r3, [r4, #0]
   1c2ea:	2500      	movs	r5, #0
   1c2ec:	0c1b      	lsrs	r3, r3, #16
   1c2ee:	041b      	lsls	r3, r3, #16
   1c2f0:	f043 030d 	orr.w	r3, r3, #13
   1c2f4:	6023      	str	r3, [r4, #0]
   1c2f6:	6823      	ldr	r3, [r4, #0]
   1c2f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1c2fc:	6023      	str	r3, [r4, #0]
   1c2fe:	e767      	b.n	1c1d0 <ip_interface_recvfrom+0xf0>
   1c300:	2f00      	cmp	r7, #0
   1c302:	f47f af50 	bne.w	1c1a6 <ip_interface_recvfrom+0xc6>
   1c306:	e758      	b.n	1c1ba <ip_interface_recvfrom+0xda>
   1c308:	2623      	movs	r6, #35	; 0x23
   1c30a:	e7c5      	b.n	1c298 <ip_interface_recvfrom+0x1b8>
   1c30c:	262d      	movs	r6, #45	; 0x2d
   1c30e:	e7e5      	b.n	1c2dc <ip_interface_recvfrom+0x1fc>
   1c310:	2616      	movs	r6, #22
   1c312:	e7e3      	b.n	1c2dc <ip_interface_recvfrom+0x1fc>
   1c314:	2609      	movs	r6, #9
   1c316:	e7e1      	b.n	1c2dc <ip_interface_recvfrom+0x1fc>
   1c318:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   1c31c:	6023      	str	r3, [r4, #0]
   1c31e:	6823      	ldr	r3, [r4, #0]
   1c320:	2669      	movs	r6, #105	; 0x69
   1c322:	0c1b      	lsrs	r3, r3, #16
   1c324:	041b      	lsls	r3, r3, #16
   1c326:	f043 030d 	orr.w	r3, r3, #13
   1c32a:	6023      	str	r3, [r4, #0]
   1c32c:	e7d6      	b.n	1c2dc <ip_interface_recvfrom+0x1fc>
   1c32e:	bf00      	nop

0001c330 <ip_interface_connect>:
   1c330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c334:	b082      	sub	sp, #8
   1c336:	2900      	cmp	r1, #0
   1c338:	d04b      	beq.n	1c3d2 <ip_interface_connect+0xa2>
   1c33a:	4617      	mov	r7, r2
   1c33c:	2a00      	cmp	r2, #0
   1c33e:	d048      	beq.n	1c3d2 <ip_interface_connect+0xa2>
   1c340:	4680      	mov	r8, r0
   1c342:	4689      	mov	r9, r1
   1c344:	f005 fc84 	bl	21c50 <interface_socket_from_handle_get>
   1c348:	4605      	mov	r5, r0
   1c34a:	2800      	cmp	r0, #0
   1c34c:	f000 80af 	beq.w	1c4ae <ip_interface_connect+0x17e>
   1c350:	6803      	ldr	r3, [r0, #0]
   1c352:	b29b      	uxth	r3, r3
   1c354:	2b02      	cmp	r3, #2
   1c356:	d004      	beq.n	1c362 <ip_interface_connect+0x32>
   1c358:	6803      	ldr	r3, [r0, #0]
   1c35a:	b29b      	uxth	r3, r3
   1c35c:	2b04      	cmp	r3, #4
   1c35e:	f040 809d 	bne.w	1c49c <ip_interface_connect+0x16c>
   1c362:	6829      	ldr	r1, [r5, #0]
   1c364:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   1c368:	f040 8089 	bne.w	1c47e <ip_interface_connect+0x14e>
   1c36c:	ae02      	add	r6, sp, #8
   1c36e:	f8d5 a018 	ldr.w	sl, [r5, #24]
   1c372:	f846 1d04 	str.w	r1, [r6, #-4]!
   1c376:	4630      	mov	r0, r6
   1c378:	f7ff fb48 	bl	1ba0c <rpc_ip_client_request_alloc>
   1c37c:	bb98      	cbnz	r0, 1c3e6 <ip_interface_connect+0xb6>
   1c37e:	2108      	movs	r1, #8
   1c380:	ea4f 4208 	mov.w	r2, r8, lsl #16
   1c384:	9c01      	ldr	r4, [sp, #4]
   1c386:	f442 43e0 	orr.w	r3, r2, #28672	; 0x7000
   1c38a:	f043 0302 	orr.w	r3, r3, #2
   1c38e:	60e3      	str	r3, [r4, #12]
   1c390:	f8c4 a010 	str.w	sl, [r4, #16]
   1c394:	7260      	strb	r0, [r4, #9]
   1c396:	72a0      	strb	r0, [r4, #10]
   1c398:	72e0      	strb	r0, [r4, #11]
   1c39a:	7221      	strb	r1, [r4, #8]
   1c39c:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
   1c3a0:	f042 0202 	orr.w	r2, r2, #2
   1c3a4:	60e2      	str	r2, [r4, #12]
   1c3a6:	68a3      	ldr	r3, [r4, #8]
   1c3a8:	69aa      	ldr	r2, [r5, #24]
   1c3aa:	3304      	adds	r3, #4
   1c3ac:	6122      	str	r2, [r4, #16]
   1c3ae:	60a3      	str	r3, [r4, #8]
   1c3b0:	68eb      	ldr	r3, [r5, #12]
   1c3b2:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1c3b6:	4293      	cmp	r3, r2
   1c3b8:	d11b      	bne.n	1c3f2 <ip_interface_connect+0xc2>
   1c3ba:	f899 2000 	ldrb.w	r2, [r9]
   1c3be:	4297      	cmp	r7, r2
   1c3c0:	d107      	bne.n	1c3d2 <ip_interface_connect+0xa2>
   1c3c2:	2b02      	cmp	r3, #2
   1c3c4:	f104 0018 	add.w	r0, r4, #24
   1c3c8:	d015      	beq.n	1c3f6 <ip_interface_connect+0xc6>
   1c3ca:	2b0a      	cmp	r3, #10
   1c3cc:	d101      	bne.n	1c3d2 <ip_interface_connect+0xa2>
   1c3ce:	2f24      	cmp	r7, #36	; 0x24
   1c3d0:	d01d      	beq.n	1c40e <ip_interface_connect+0xde>
   1c3d2:	2416      	movs	r4, #22
   1c3d4:	4620      	mov	r0, r4
   1c3d6:	f7fa fb99 	bl	16b0c <bsd_os_errno_set>
   1c3da:	f04f 34ff 	mov.w	r4, #4294967295
   1c3de:	4620      	mov	r0, r4
   1c3e0:	b002      	add	sp, #8
   1c3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c3e6:	9c01      	ldr	r4, [sp, #4]
   1c3e8:	2c00      	cmp	r4, #0
   1c3ea:	d05e      	beq.n	1c4aa <ip_interface_connect+0x17a>
   1c3ec:	ea4f 4208 	mov.w	r2, r8, lsl #16
   1c3f0:	e7d4      	b.n	1c39c <ip_interface_connect+0x6c>
   1c3f2:	242f      	movs	r4, #47	; 0x2f
   1c3f4:	e7ee      	b.n	1c3d4 <ip_interface_connect+0xa4>
   1c3f6:	2f10      	cmp	r7, #16
   1c3f8:	d1eb      	bne.n	1c3d2 <ip_interface_connect+0xa2>
   1c3fa:	2204      	movs	r2, #4
   1c3fc:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   1c400:	f109 010c 	add.w	r1, r9, #12
   1c404:	82e2      	strh	r2, [r4, #22]
   1c406:	82a3      	strh	r3, [r4, #20]
   1c408:	f7f0 fba0 	bl	cb4c <memcpy>
   1c40c:	e008      	b.n	1c420 <ip_interface_connect+0xf0>
   1c40e:	2210      	movs	r2, #16
   1c410:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   1c414:	eb09 0102 	add.w	r1, r9, r2
   1c418:	82e2      	strh	r2, [r4, #22]
   1c41a:	82a3      	strh	r3, [r4, #20]
   1c41c:	f7f0 fb96 	bl	cb4c <memcpy>
   1c420:	68a3      	ldr	r3, [r4, #8]
   1c422:	8ae2      	ldrh	r2, [r4, #22]
   1c424:	f247 0102 	movw	r1, #28674	; 0x7002
   1c428:	4413      	add	r3, r2
   1c42a:	60a3      	str	r3, [r4, #8]
   1c42c:	682f      	ldr	r7, [r5, #0]
   1c42e:	682b      	ldr	r3, [r5, #0]
   1c430:	4620      	mov	r0, r4
   1c432:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1c436:	602b      	str	r3, [r5, #0]
   1c438:	f7ff fafc 	bl	1ba34 <rpc_ip_client_request_send>
   1c43c:	b9a8      	cbnz	r0, 1c46a <ip_interface_connect+0x13a>
   1c43e:	682b      	ldr	r3, [r5, #0]
   1c440:	00db      	lsls	r3, r3, #3
   1c442:	d429      	bmi.n	1c498 <ip_interface_connect+0x168>
   1c444:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   1c446:	4633      	mov	r3, r6
   1c448:	2c00      	cmp	r4, #0
   1c44a:	bf08      	it	eq
   1c44c:	f04f 34ff 	moveq.w	r4, #4294967295
   1c450:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c454:	2105      	movs	r1, #5
   1c456:	4640      	mov	r0, r8
   1c458:	9401      	str	r4, [sp, #4]
   1c45a:	f005 fb85 	bl	21b68 <interface_socket_wait>
   1c45e:	4604      	mov	r4, r0
   1c460:	b178      	cbz	r0, 1c482 <ip_interface_connect+0x152>
   1c462:	2c73      	cmp	r4, #115	; 0x73
   1c464:	d0b6      	beq.n	1c3d4 <ip_interface_connect+0xa4>
   1c466:	602f      	str	r7, [r5, #0]
   1c468:	e7b4      	b.n	1c3d4 <ip_interface_connect+0xa4>
   1c46a:	6820      	ldr	r0, [r4, #0]
   1c46c:	b108      	cbz	r0, 1c472 <ip_interface_connect+0x142>
   1c46e:	f7ff faff 	bl	1ba70 <rpc_ip_client_data_free>
   1c472:	4620      	mov	r0, r4
   1c474:	f7ff faf4 	bl	1ba60 <rpc_ip_client_message_free>
   1c478:	2423      	movs	r4, #35	; 0x23
   1c47a:	602f      	str	r7, [r5, #0]
   1c47c:	e7aa      	b.n	1c3d4 <ip_interface_connect+0xa4>
   1c47e:	2472      	movs	r4, #114	; 0x72
   1c480:	e7a8      	b.n	1c3d4 <ip_interface_connect+0xa4>
   1c482:	4640      	mov	r0, r8
   1c484:	f005 fbe4 	bl	21c50 <interface_socket_from_handle_get>
   1c488:	2800      	cmp	r0, #0
   1c48a:	d0a8      	beq.n	1c3de <ip_interface_connect+0xae>
   1c48c:	6843      	ldr	r3, [r0, #4]
   1c48e:	2b00      	cmp	r3, #0
   1c490:	d0a5      	beq.n	1c3de <ip_interface_connect+0xae>
   1c492:	6044      	str	r4, [r0, #4]
   1c494:	461c      	mov	r4, r3
   1c496:	e7e4      	b.n	1c462 <ip_interface_connect+0x132>
   1c498:	2473      	movs	r4, #115	; 0x73
   1c49a:	e79b      	b.n	1c3d4 <ip_interface_connect+0xa4>
   1c49c:	6803      	ldr	r3, [r0, #0]
   1c49e:	b29b      	uxth	r3, r3
   1c4a0:	2b05      	cmp	r3, #5
   1c4a2:	bf14      	ite	ne
   1c4a4:	2409      	movne	r4, #9
   1c4a6:	2438      	moveq	r4, #56	; 0x38
   1c4a8:	e794      	b.n	1c3d4 <ip_interface_connect+0xa4>
   1c4aa:	240c      	movs	r4, #12
   1c4ac:	e792      	b.n	1c3d4 <ip_interface_connect+0xa4>
   1c4ae:	2409      	movs	r4, #9
   1c4b0:	e790      	b.n	1c3d4 <ip_interface_connect+0xa4>
   1c4b2:	bf00      	nop

0001c4b4 <ip_interface_socketoption_get>:
   1c4b4:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   1c4b8:	f04f 34ff 	mov.w	r4, #4294967295
   1c4bc:	b082      	sub	sp, #8
   1c4be:	9400      	str	r4, [sp, #0]
   1c4c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1c4c2:	2c00      	cmp	r4, #0
   1c4c4:	d05b      	beq.n	1c57e <ip_interface_socketoption_get+0xca>
   1c4c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1c4c8:	6824      	ldr	r4, [r4, #0]
   1c4ca:	2c00      	cmp	r4, #0
   1c4cc:	d057      	beq.n	1c57e <ip_interface_socketoption_get+0xca>
   1c4ce:	680c      	ldr	r4, [r1, #0]
   1c4d0:	0266      	lsls	r6, r4, #9
   1c4d2:	d44f      	bmi.n	1c574 <ip_interface_socketoption_get+0xc0>
   1c4d4:	680c      	ldr	r4, [r1, #0]
   1c4d6:	0225      	lsls	r5, r4, #8
   1c4d8:	d44c      	bmi.n	1c574 <ip_interface_socketoption_get+0xc0>
   1c4da:	680c      	ldr	r4, [r1, #0]
   1c4dc:	01e4      	lsls	r4, r4, #7
   1c4de:	d449      	bmi.n	1c574 <ip_interface_socketoption_get+0xc0>
   1c4e0:	680c      	ldr	r4, [r1, #0]
   1c4e2:	f014 7c00 	ands.w	ip, r4, #33554432	; 0x2000000
   1c4e6:	d145      	bne.n	1c574 <ip_interface_socketoption_get+0xc0>
   1c4e8:	460c      	mov	r4, r1
   1c4ea:	680e      	ldr	r6, [r1, #0]
   1c4ec:	461f      	mov	r7, r3
   1c4ee:	680b      	ldr	r3, [r1, #0]
   1c4f0:	4681      	mov	r9, r0
   1c4f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1c4f6:	600b      	str	r3, [r1, #0]
   1c4f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c4fa:	a802      	add	r0, sp, #8
   1c4fc:	f840 cd04 	str.w	ip, [r0, #-4]!
   1c500:	6819      	ldr	r1, [r3, #0]
   1c502:	4615      	mov	r5, r2
   1c504:	f8d4 b018 	ldr.w	fp, [r4, #24]
   1c508:	f7ff fa80 	bl	1ba0c <rpc_ip_client_request_alloc>
   1c50c:	2800      	cmp	r0, #0
   1c50e:	d146      	bne.n	1c59e <ip_interface_socketoption_get+0xea>
   1c510:	f247 0304 	movw	r3, #28676	; 0x7004
   1c514:	2208      	movs	r2, #8
   1c516:	f8dd a004 	ldr.w	sl, [sp, #4]
   1c51a:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   1c51e:	f8ca 300c 	str.w	r3, [sl, #12]
   1c522:	f8ca b010 	str.w	fp, [sl, #16]
   1c526:	f88a 0009 	strb.w	r0, [sl, #9]
   1c52a:	f88a 000a 	strb.w	r0, [sl, #10]
   1c52e:	f88a 000b 	strb.w	r0, [sl, #11]
   1c532:	f88a 2008 	strb.w	r2, [sl, #8]
   1c536:	f8da 3008 	ldr.w	r3, [sl, #8]
   1c53a:	f8ca 7018 	str.w	r7, [sl, #24]
   1c53e:	3308      	adds	r3, #8
   1c540:	f8ca 5014 	str.w	r5, [sl, #20]
   1c544:	f8ca 3008 	str.w	r3, [sl, #8]
   1c548:	f247 0104 	movw	r1, #28676	; 0x7004
   1c54c:	4650      	mov	r0, sl
   1c54e:	f8da 7000 	ldr.w	r7, [sl]
   1c552:	f7ff fa6f 	bl	1ba34 <rpc_ip_client_request_send>
   1c556:	b9b8      	cbnz	r0, 1c588 <ip_interface_socketoption_get+0xd4>
   1c558:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   1c55c:	466b      	mov	r3, sp
   1c55e:	4611      	mov	r1, r2
   1c560:	4648      	mov	r0, r9
   1c562:	f005 fb01 	bl	21b68 <interface_socket_wait>
   1c566:	4605      	mov	r5, r0
   1c568:	b300      	cbz	r0, 1c5ac <ip_interface_socketoption_get+0xf8>
   1c56a:	4638      	mov	r0, r7
   1c56c:	f7ff fa80 	bl	1ba70 <rpc_ip_client_data_free>
   1c570:	6026      	str	r6, [r4, #0]
   1c572:	e000      	b.n	1c576 <ip_interface_socketoption_get+0xc2>
   1c574:	2523      	movs	r5, #35	; 0x23
   1c576:	4628      	mov	r0, r5
   1c578:	b002      	add	sp, #8
   1c57a:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   1c57e:	2516      	movs	r5, #22
   1c580:	4628      	mov	r0, r5
   1c582:	b002      	add	sp, #8
   1c584:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   1c588:	f8da 0000 	ldr.w	r0, [sl]
   1c58c:	b108      	cbz	r0, 1c592 <ip_interface_socketoption_get+0xde>
   1c58e:	f7ff fa6f 	bl	1ba70 <rpc_ip_client_data_free>
   1c592:	4650      	mov	r0, sl
   1c594:	f7ff fa64 	bl	1ba60 <rpc_ip_client_message_free>
   1c598:	2523      	movs	r5, #35	; 0x23
   1c59a:	6026      	str	r6, [r4, #0]
   1c59c:	e7e5      	b.n	1c56a <ip_interface_socketoption_get+0xb6>
   1c59e:	f8dd a004 	ldr.w	sl, [sp, #4]
   1c5a2:	f1ba 0f00 	cmp.w	sl, #0
   1c5a6:	d1c6      	bne.n	1c536 <ip_interface_socketoption_get+0x82>
   1c5a8:	250c      	movs	r5, #12
   1c5aa:	e7e1      	b.n	1c570 <ip_interface_socketoption_get+0xbc>
   1c5ac:	4648      	mov	r0, r9
   1c5ae:	f005 fb4f 	bl	21c50 <interface_socket_from_handle_get>
   1c5b2:	b120      	cbz	r0, 1c5be <ip_interface_socketoption_get+0x10a>
   1c5b4:	6843      	ldr	r3, [r0, #4]
   1c5b6:	b113      	cbz	r3, 1c5be <ip_interface_socketoption_get+0x10a>
   1c5b8:	6045      	str	r5, [r0, #4]
   1c5ba:	461d      	mov	r5, r3
   1c5bc:	e7d5      	b.n	1c56a <ip_interface_socketoption_get+0xb6>
   1c5be:	f8df b050 	ldr.w	fp, [pc, #80]	; 1c610 <ip_interface_socketoption_get+0x15c>
   1c5c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c5c4:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   1c5c8:	681b      	ldr	r3, [r3, #0]
   1c5ca:	b1b0      	cbz	r0, 1c5fa <ip_interface_socketoption_get+0x146>
   1c5cc:	6842      	ldr	r2, [r0, #4]
   1c5ce:	429a      	cmp	r2, r3
   1c5d0:	d811      	bhi.n	1c5f6 <ip_interface_socketoption_get+0x142>
   1c5d2:	6801      	ldr	r1, [r0, #0]
   1c5d4:	b179      	cbz	r1, 1c5f6 <ip_interface_socketoption_get+0x142>
   1c5d6:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c5d8:	f7f0 fab8 	bl	cb4c <memcpy>
   1c5dc:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
   1c5e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c5e2:	685b      	ldr	r3, [r3, #4]
   1c5e4:	6013      	str	r3, [r2, #0]
   1c5e6:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   1c5ea:	f7ff fa39 	bl	1ba60 <rpc_ip_client_message_free>
   1c5ee:	2300      	movs	r3, #0
   1c5f0:	f84b 3029 	str.w	r3, [fp, r9, lsl #2]
   1c5f4:	e7b9      	b.n	1c56a <ip_interface_socketoption_get+0xb6>
   1c5f6:	2516      	movs	r5, #22
   1c5f8:	e7f7      	b.n	1c5ea <ip_interface_socketoption_get+0x136>
   1c5fa:	461a      	mov	r2, r3
   1c5fc:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c5fe:	4639      	mov	r1, r7
   1c600:	f7f0 faa4 	bl	cb4c <memcpy>
   1c604:	f8da 3004 	ldr.w	r3, [sl, #4]
   1c608:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c60a:	6013      	str	r3, [r2, #0]
   1c60c:	e7ad      	b.n	1c56a <ip_interface_socketoption_get+0xb6>
   1c60e:	bf00      	nop
   1c610:	200219e8 	.word	0x200219e8

0001c614 <ip_interface_socketoption_send>:
   1c614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c618:	f04f 35ff 	mov.w	r5, #4294967295
   1c61c:	680c      	ldr	r4, [r1, #0]
   1c61e:	b082      	sub	sp, #8
   1c620:	0266      	lsls	r6, r4, #9
   1c622:	9500      	str	r5, [sp, #0]
   1c624:	d44d      	bmi.n	1c6c2 <ip_interface_socketoption_send+0xae>
   1c626:	680c      	ldr	r4, [r1, #0]
   1c628:	0225      	lsls	r5, r4, #8
   1c62a:	d44a      	bmi.n	1c6c2 <ip_interface_socketoption_send+0xae>
   1c62c:	680c      	ldr	r4, [r1, #0]
   1c62e:	01e4      	lsls	r4, r4, #7
   1c630:	d447      	bmi.n	1c6c2 <ip_interface_socketoption_send+0xae>
   1c632:	680c      	ldr	r4, [r1, #0]
   1c634:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
   1c638:	d143      	bne.n	1c6c2 <ip_interface_socketoption_send+0xae>
   1c63a:	4688      	mov	r8, r1
   1c63c:	f8d1 9000 	ldr.w	r9, [r1]
   1c640:	461f      	mov	r7, r3
   1c642:	680b      	ldr	r3, [r1, #0]
   1c644:	4605      	mov	r5, r0
   1c646:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1c64a:	a802      	add	r0, sp, #8
   1c64c:	600b      	str	r3, [r1, #0]
   1c64e:	f840 4d04 	str.w	r4, [r0, #-4]!
   1c652:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c654:	4616      	mov	r6, r2
   1c656:	f8d8 a018 	ldr.w	sl, [r8, #24]
   1c65a:	f7ff f9d7 	bl	1ba0c <rpc_ip_client_request_alloc>
   1c65e:	bba8      	cbnz	r0, 1c6cc <ip_interface_socketoption_send+0xb8>
   1c660:	f247 0303 	movw	r3, #28675	; 0x7003
   1c664:	2208      	movs	r2, #8
   1c666:	9c01      	ldr	r4, [sp, #4]
   1c668:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   1c66c:	60e3      	str	r3, [r4, #12]
   1c66e:	f8c4 a010 	str.w	sl, [r4, #16]
   1c672:	7260      	strb	r0, [r4, #9]
   1c674:	72a0      	strb	r0, [r4, #10]
   1c676:	72e0      	strb	r0, [r4, #11]
   1c678:	7222      	strb	r2, [r4, #8]
   1c67a:	68a3      	ldr	r3, [r4, #8]
   1c67c:	6166      	str	r6, [r4, #20]
   1c67e:	3308      	adds	r3, #8
   1c680:	60a3      	str	r3, [r4, #8]
   1c682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c684:	61a7      	str	r7, [r4, #24]
   1c686:	b133      	cbz	r3, 1c696 <ip_interface_socketoption_send+0x82>
   1c688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c68a:	b123      	cbz	r3, 1c696 <ip_interface_socketoption_send+0x82>
   1c68c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c68e:	4619      	mov	r1, r3
   1c690:	6820      	ldr	r0, [r4, #0]
   1c692:	f7f0 fa5b 	bl	cb4c <memcpy>
   1c696:	f247 0103 	movw	r1, #28675	; 0x7003
   1c69a:	4620      	mov	r0, r4
   1c69c:	f7ff f9ca 	bl	1ba34 <rpc_ip_client_request_send>
   1c6a0:	4606      	mov	r6, r0
   1c6a2:	b9c0      	cbnz	r0, 1c6d6 <ip_interface_socketoption_send+0xc2>
   1c6a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1c6a8:	466b      	mov	r3, sp
   1c6aa:	4611      	mov	r1, r2
   1c6ac:	4628      	mov	r0, r5
   1c6ae:	f005 fa5b 	bl	21b68 <interface_socket_wait>
   1c6b2:	4604      	mov	r4, r0
   1c6b4:	b1d0      	cbz	r0, 1c6ec <ip_interface_socketoption_send+0xd8>
   1c6b6:	4620      	mov	r0, r4
   1c6b8:	f8c8 9000 	str.w	r9, [r8]
   1c6bc:	b002      	add	sp, #8
   1c6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c6c2:	2423      	movs	r4, #35	; 0x23
   1c6c4:	4620      	mov	r0, r4
   1c6c6:	b002      	add	sp, #8
   1c6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c6cc:	9c01      	ldr	r4, [sp, #4]
   1c6ce:	2c00      	cmp	r4, #0
   1c6d0:	d1d3      	bne.n	1c67a <ip_interface_socketoption_send+0x66>
   1c6d2:	240c      	movs	r4, #12
   1c6d4:	e7ef      	b.n	1c6b6 <ip_interface_socketoption_send+0xa2>
   1c6d6:	6820      	ldr	r0, [r4, #0]
   1c6d8:	b108      	cbz	r0, 1c6de <ip_interface_socketoption_send+0xca>
   1c6da:	f7ff f9c9 	bl	1ba70 <rpc_ip_client_data_free>
   1c6de:	4620      	mov	r0, r4
   1c6e0:	f7ff f9be 	bl	1ba60 <rpc_ip_client_message_free>
   1c6e4:	2423      	movs	r4, #35	; 0x23
   1c6e6:	f8c8 9000 	str.w	r9, [r8]
   1c6ea:	e7e4      	b.n	1c6b6 <ip_interface_socketoption_send+0xa2>
   1c6ec:	4628      	mov	r0, r5
   1c6ee:	f005 faaf 	bl	21c50 <interface_socket_from_handle_get>
   1c6f2:	2800      	cmp	r0, #0
   1c6f4:	d0df      	beq.n	1c6b6 <ip_interface_socketoption_send+0xa2>
   1c6f6:	6844      	ldr	r4, [r0, #4]
   1c6f8:	2c00      	cmp	r4, #0
   1c6fa:	d0dc      	beq.n	1c6b6 <ip_interface_socketoption_send+0xa2>
   1c6fc:	6046      	str	r6, [r0, #4]
   1c6fe:	e7da      	b.n	1c6b6 <ip_interface_socketoption_send+0xa2>

0001c700 <ip_interface_bind>:
   1c700:	f04f 33ff 	mov.w	r3, #4294967295
   1c704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c708:	b083      	sub	sp, #12
   1c70a:	9300      	str	r3, [sp, #0]
   1c70c:	b3b1      	cbz	r1, 1c77c <ip_interface_bind+0x7c>
   1c70e:	4616      	mov	r6, r2
   1c710:	b3a2      	cbz	r2, 1c77c <ip_interface_bind+0x7c>
   1c712:	4607      	mov	r7, r0
   1c714:	4688      	mov	r8, r1
   1c716:	f005 fa9b 	bl	21c50 <interface_socket_from_handle_get>
   1c71a:	4605      	mov	r5, r0
   1c71c:	2800      	cmp	r0, #0
   1c71e:	d04a      	beq.n	1c7b6 <ip_interface_bind+0xb6>
   1c720:	6803      	ldr	r3, [r0, #0]
   1c722:	b29b      	uxth	r3, r3
   1c724:	2b02      	cmp	r3, #2
   1c726:	d146      	bne.n	1c7b6 <ip_interface_bind+0xb6>
   1c728:	2100      	movs	r1, #0
   1c72a:	a802      	add	r0, sp, #8
   1c72c:	f840 1d04 	str.w	r1, [r0, #-4]!
   1c730:	f8d5 9018 	ldr.w	r9, [r5, #24]
   1c734:	f7ff f96a 	bl	1ba0c <rpc_ip_client_request_alloc>
   1c738:	bb50      	cbnz	r0, 1c790 <ip_interface_bind+0x90>
   1c73a:	f247 0305 	movw	r3, #28677	; 0x7005
   1c73e:	2208      	movs	r2, #8
   1c740:	9c01      	ldr	r4, [sp, #4]
   1c742:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   1c746:	60e3      	str	r3, [r4, #12]
   1c748:	f8c4 9010 	str.w	r9, [r4, #16]
   1c74c:	7260      	strb	r0, [r4, #9]
   1c74e:	72a0      	strb	r0, [r4, #10]
   1c750:	72e0      	strb	r0, [r4, #11]
   1c752:	7222      	strb	r2, [r4, #8]
   1c754:	68a3      	ldr	r3, [r4, #8]
   1c756:	3304      	adds	r3, #4
   1c758:	60a3      	str	r3, [r4, #8]
   1c75a:	68eb      	ldr	r3, [r5, #12]
   1c75c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1c760:	4293      	cmp	r3, r2
   1c762:	d11a      	bne.n	1c79a <ip_interface_bind+0x9a>
   1c764:	f898 2000 	ldrb.w	r2, [r8]
   1c768:	4296      	cmp	r6, r2
   1c76a:	d107      	bne.n	1c77c <ip_interface_bind+0x7c>
   1c76c:	2b02      	cmp	r3, #2
   1c76e:	f104 0018 	add.w	r0, r4, #24
   1c772:	d014      	beq.n	1c79e <ip_interface_bind+0x9e>
   1c774:	2b0a      	cmp	r3, #10
   1c776:	d101      	bne.n	1c77c <ip_interface_bind+0x7c>
   1c778:	2e24      	cmp	r6, #36	; 0x24
   1c77a:	d01e      	beq.n	1c7ba <ip_interface_bind+0xba>
   1c77c:	2416      	movs	r4, #22
   1c77e:	4620      	mov	r0, r4
   1c780:	f7fa f9c4 	bl	16b0c <bsd_os_errno_set>
   1c784:	f04f 34ff 	mov.w	r4, #4294967295
   1c788:	4620      	mov	r0, r4
   1c78a:	b003      	add	sp, #12
   1c78c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c790:	9c01      	ldr	r4, [sp, #4]
   1c792:	2c00      	cmp	r4, #0
   1c794:	d1de      	bne.n	1c754 <ip_interface_bind+0x54>
   1c796:	240c      	movs	r4, #12
   1c798:	e7f1      	b.n	1c77e <ip_interface_bind+0x7e>
   1c79a:	242f      	movs	r4, #47	; 0x2f
   1c79c:	e7ef      	b.n	1c77e <ip_interface_bind+0x7e>
   1c79e:	2e10      	cmp	r6, #16
   1c7a0:	d1ec      	bne.n	1c77c <ip_interface_bind+0x7c>
   1c7a2:	2204      	movs	r2, #4
   1c7a4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1c7a8:	f108 010c 	add.w	r1, r8, #12
   1c7ac:	82e2      	strh	r2, [r4, #22]
   1c7ae:	82a3      	strh	r3, [r4, #20]
   1c7b0:	f7f0 f9cc 	bl	cb4c <memcpy>
   1c7b4:	e00a      	b.n	1c7cc <ip_interface_bind+0xcc>
   1c7b6:	2409      	movs	r4, #9
   1c7b8:	e7e1      	b.n	1c77e <ip_interface_bind+0x7e>
   1c7ba:	2210      	movs	r2, #16
   1c7bc:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1c7c0:	eb08 0102 	add.w	r1, r8, r2
   1c7c4:	82e2      	strh	r2, [r4, #22]
   1c7c6:	82a3      	strh	r3, [r4, #20]
   1c7c8:	f7f0 f9c0 	bl	cb4c <memcpy>
   1c7cc:	68a3      	ldr	r3, [r4, #8]
   1c7ce:	8ae2      	ldrh	r2, [r4, #22]
   1c7d0:	f247 0105 	movw	r1, #28677	; 0x7005
   1c7d4:	4413      	add	r3, r2
   1c7d6:	60a3      	str	r3, [r4, #8]
   1c7d8:	682b      	ldr	r3, [r5, #0]
   1c7da:	4620      	mov	r0, r4
   1c7dc:	0c1b      	lsrs	r3, r3, #16
   1c7de:	041b      	lsls	r3, r3, #16
   1c7e0:	f043 0303 	orr.w	r3, r3, #3
   1c7e4:	602b      	str	r3, [r5, #0]
   1c7e6:	682e      	ldr	r6, [r5, #0]
   1c7e8:	f7ff f924 	bl	1ba34 <rpc_ip_client_request_send>
   1c7ec:	4680      	mov	r8, r0
   1c7ee:	b978      	cbnz	r0, 1c810 <ip_interface_bind+0x110>
   1c7f0:	466b      	mov	r3, sp
   1c7f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c7f6:	2104      	movs	r1, #4
   1c7f8:	4638      	mov	r0, r7
   1c7fa:	f005 f9b5 	bl	21b68 <interface_socket_wait>
   1c7fe:	4604      	mov	r4, r0
   1c800:	b1a0      	cbz	r0, 1c82c <ip_interface_bind+0x12c>
   1c802:	682b      	ldr	r3, [r5, #0]
   1c804:	0c1b      	lsrs	r3, r3, #16
   1c806:	041b      	lsls	r3, r3, #16
   1c808:	f043 0302 	orr.w	r3, r3, #2
   1c80c:	602b      	str	r3, [r5, #0]
   1c80e:	e7b6      	b.n	1c77e <ip_interface_bind+0x7e>
   1c810:	6820      	ldr	r0, [r4, #0]
   1c812:	b108      	cbz	r0, 1c818 <ip_interface_bind+0x118>
   1c814:	f7ff f92c 	bl	1ba70 <rpc_ip_client_data_free>
   1c818:	0c36      	lsrs	r6, r6, #16
   1c81a:	0436      	lsls	r6, r6, #16
   1c81c:	4620      	mov	r0, r4
   1c81e:	f046 0602 	orr.w	r6, r6, #2
   1c822:	f7ff f91d 	bl	1ba60 <rpc_ip_client_message_free>
   1c826:	2423      	movs	r4, #35	; 0x23
   1c828:	602e      	str	r6, [r5, #0]
   1c82a:	e7a8      	b.n	1c77e <ip_interface_bind+0x7e>
   1c82c:	4638      	mov	r0, r7
   1c82e:	f005 fa0f 	bl	21c50 <interface_socket_from_handle_get>
   1c832:	2800      	cmp	r0, #0
   1c834:	d0a8      	beq.n	1c788 <ip_interface_bind+0x88>
   1c836:	6844      	ldr	r4, [r0, #4]
   1c838:	2c00      	cmp	r4, #0
   1c83a:	d0a5      	beq.n	1c788 <ip_interface_bind+0x88>
   1c83c:	f8c0 8004 	str.w	r8, [r0, #4]
   1c840:	e7df      	b.n	1c802 <ip_interface_bind+0x102>
   1c842:	bf00      	nop

0001c844 <ip_interface_listen>:
   1c844:	f04f 33ff 	mov.w	r3, #4294967295
   1c848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c84c:	b082      	sub	sp, #8
   1c84e:	4606      	mov	r6, r0
   1c850:	9300      	str	r3, [sp, #0]
   1c852:	f005 f9fd 	bl	21c50 <interface_socket_from_handle_get>
   1c856:	2800      	cmp	r0, #0
   1c858:	d06c      	beq.n	1c934 <ip_interface_listen+0xf0>
   1c85a:	6803      	ldr	r3, [r0, #0]
   1c85c:	4604      	mov	r4, r0
   1c85e:	b29b      	uxth	r3, r3
   1c860:	2b04      	cmp	r3, #4
   1c862:	d003      	beq.n	1c86c <ip_interface_listen+0x28>
   1c864:	6803      	ldr	r3, [r0, #0]
   1c866:	b29b      	uxth	r3, r3
   1c868:	2b0b      	cmp	r3, #11
   1c86a:	d163      	bne.n	1c934 <ip_interface_listen+0xf0>
   1c86c:	2100      	movs	r1, #0
   1c86e:	4a32      	ldr	r2, [pc, #200]	; (1c938 <ip_interface_listen+0xf4>)
   1c870:	4630      	mov	r0, r6
   1c872:	f005 f941 	bl	21af8 <interface_socket_packet_handler_update>
   1c876:	4601      	mov	r1, r0
   1c878:	2800      	cmp	r0, #0
   1c87a:	d159      	bne.n	1c930 <ip_interface_listen+0xec>
   1c87c:	a802      	add	r0, sp, #8
   1c87e:	f840 1d04 	str.w	r1, [r0, #-4]!
   1c882:	69a7      	ldr	r7, [r4, #24]
   1c884:	f7ff f8c2 	bl	1ba0c <rpc_ip_client_request_alloc>
   1c888:	bba0      	cbnz	r0, 1c8f4 <ip_interface_listen+0xb0>
   1c88a:	f247 0308 	movw	r3, #28680	; 0x7008
   1c88e:	2208      	movs	r2, #8
   1c890:	9d01      	ldr	r5, [sp, #4]
   1c892:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1c896:	60eb      	str	r3, [r5, #12]
   1c898:	612f      	str	r7, [r5, #16]
   1c89a:	7268      	strb	r0, [r5, #9]
   1c89c:	72a8      	strb	r0, [r5, #10]
   1c89e:	72e8      	strb	r0, [r5, #11]
   1c8a0:	722a      	strb	r2, [r5, #8]
   1c8a2:	68ab      	ldr	r3, [r5, #8]
   1c8a4:	f247 0108 	movw	r1, #28680	; 0x7008
   1c8a8:	3304      	adds	r3, #4
   1c8aa:	60ab      	str	r3, [r5, #8]
   1c8ac:	6823      	ldr	r3, [r4, #0]
   1c8ae:	4628      	mov	r0, r5
   1c8b0:	0c1b      	lsrs	r3, r3, #16
   1c8b2:	041b      	lsls	r3, r3, #16
   1c8b4:	f043 0306 	orr.w	r3, r3, #6
   1c8b8:	6023      	str	r3, [r4, #0]
   1c8ba:	6827      	ldr	r7, [r4, #0]
   1c8bc:	f7ff f8ba 	bl	1ba34 <rpc_ip_client_request_send>
   1c8c0:	4680      	mov	r8, r0
   1c8c2:	b9e0      	cbnz	r0, 1c8fe <ip_interface_listen+0xba>
   1c8c4:	466b      	mov	r3, sp
   1c8c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c8ca:	2107      	movs	r1, #7
   1c8cc:	4630      	mov	r0, r6
   1c8ce:	f005 f94b 	bl	21b68 <interface_socket_wait>
   1c8d2:	4605      	mov	r5, r0
   1c8d4:	b308      	cbz	r0, 1c91a <ip_interface_listen+0xd6>
   1c8d6:	6823      	ldr	r3, [r4, #0]
   1c8d8:	0c1b      	lsrs	r3, r3, #16
   1c8da:	041b      	lsls	r3, r3, #16
   1c8dc:	f043 0304 	orr.w	r3, r3, #4
   1c8e0:	6023      	str	r3, [r4, #0]
   1c8e2:	4628      	mov	r0, r5
   1c8e4:	f7fa f912 	bl	16b0c <bsd_os_errno_set>
   1c8e8:	f04f 35ff 	mov.w	r5, #4294967295
   1c8ec:	4628      	mov	r0, r5
   1c8ee:	b002      	add	sp, #8
   1c8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c8f4:	9d01      	ldr	r5, [sp, #4]
   1c8f6:	2d00      	cmp	r5, #0
   1c8f8:	d1d3      	bne.n	1c8a2 <ip_interface_listen+0x5e>
   1c8fa:	250c      	movs	r5, #12
   1c8fc:	e7f1      	b.n	1c8e2 <ip_interface_listen+0x9e>
   1c8fe:	6828      	ldr	r0, [r5, #0]
   1c900:	b108      	cbz	r0, 1c906 <ip_interface_listen+0xc2>
   1c902:	f7ff f8b5 	bl	1ba70 <rpc_ip_client_data_free>
   1c906:	0c3f      	lsrs	r7, r7, #16
   1c908:	043f      	lsls	r7, r7, #16
   1c90a:	4628      	mov	r0, r5
   1c90c:	f047 0704 	orr.w	r7, r7, #4
   1c910:	f7ff f8a6 	bl	1ba60 <rpc_ip_client_message_free>
   1c914:	2523      	movs	r5, #35	; 0x23
   1c916:	6027      	str	r7, [r4, #0]
   1c918:	e7e3      	b.n	1c8e2 <ip_interface_listen+0x9e>
   1c91a:	4630      	mov	r0, r6
   1c91c:	f005 f998 	bl	21c50 <interface_socket_from_handle_get>
   1c920:	2800      	cmp	r0, #0
   1c922:	d0e3      	beq.n	1c8ec <ip_interface_listen+0xa8>
   1c924:	6845      	ldr	r5, [r0, #4]
   1c926:	2d00      	cmp	r5, #0
   1c928:	d0e0      	beq.n	1c8ec <ip_interface_listen+0xa8>
   1c92a:	f8c0 8004 	str.w	r8, [r0, #4]
   1c92e:	e7d2      	b.n	1c8d6 <ip_interface_listen+0x92>
   1c930:	2523      	movs	r5, #35	; 0x23
   1c932:	e7d6      	b.n	1c8e2 <ip_interface_listen+0x9e>
   1c934:	2509      	movs	r5, #9
   1c936:	e7d4      	b.n	1c8e2 <ip_interface_listen+0x9e>
   1c938:	0001ba81 	.word	0x0001ba81

0001c93c <ip_interface_accept>:
   1c93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c940:	f04f 33ff 	mov.w	r3, #4294967295
   1c944:	2500      	movs	r5, #0
   1c946:	b087      	sub	sp, #28
   1c948:	460f      	mov	r7, r1
   1c94a:	4690      	mov	r8, r2
   1c94c:	e9cd 5303 	strd	r5, r3, [sp, #12]
   1c950:	4606      	mov	r6, r0
   1c952:	f005 f97d 	bl	21c50 <interface_socket_from_handle_get>
   1c956:	4604      	mov	r4, r0
   1c958:	2800      	cmp	r0, #0
   1c95a:	f000 8123 	beq.w	1cba4 <ip_interface_accept+0x268>
   1c95e:	6803      	ldr	r3, [r0, #0]
   1c960:	b29b      	uxth	r3, r3
   1c962:	2b07      	cmp	r3, #7
   1c964:	d10a      	bne.n	1c97c <ip_interface_accept+0x40>
   1c966:	6803      	ldr	r3, [r0, #0]
   1c968:	6805      	ldr	r5, [r0, #0]
   1c96a:	00db      	lsls	r3, r3, #3
   1c96c:	d416      	bmi.n	1c99c <ip_interface_accept+0x60>
   1c96e:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1c972:	d019      	beq.n	1c9a8 <ip_interface_accept+0x6c>
   1c974:	6805      	ldr	r5, [r0, #0]
   1c976:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1c97a:	d124      	bne.n	1c9c6 <ip_interface_accept+0x8a>
   1c97c:	f04f 0909 	mov.w	r9, #9
   1c980:	9b03      	ldr	r3, [sp, #12]
   1c982:	b113      	cbz	r3, 1c98a <ip_interface_accept+0x4e>
   1c984:	4628      	mov	r0, r5
   1c986:	f005 f8a1 	bl	21acc <interface_socket_free>
   1c98a:	4648      	mov	r0, r9
   1c98c:	f04f 39ff 	mov.w	r9, #4294967295
   1c990:	f7fa f8bc 	bl	16b0c <bsd_os_errno_set>
   1c994:	4648      	mov	r0, r9
   1c996:	b007      	add	sp, #28
   1c998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c99c:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1c9a0:	d170      	bne.n	1ca84 <ip_interface_accept+0x148>
   1c9a2:	f04f 0923 	mov.w	r9, #35	; 0x23
   1c9a6:	e7eb      	b.n	1c980 <ip_interface_accept+0x44>
   1c9a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c9ac:	ab04      	add	r3, sp, #16
   1c9ae:	4611      	mov	r1, r2
   1c9b0:	4630      	mov	r0, r6
   1c9b2:	f005 f8d9 	bl	21b68 <interface_socket_wait>
   1c9b6:	4681      	mov	r9, r0
   1c9b8:	2800      	cmp	r0, #0
   1c9ba:	f000 8082 	beq.w	1cac2 <ip_interface_accept+0x186>
   1c9be:	6825      	ldr	r5, [r4, #0]
   1c9c0:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1c9c4:	d0dc      	beq.n	1c980 <ip_interface_accept+0x44>
   1c9c6:	f04f 30ff 	mov.w	r0, #4294967295
   1c9ca:	2300      	movs	r3, #0
   1c9cc:	e9cd 0300 	strd	r0, r3, [sp]
   1c9d0:	4a78      	ldr	r2, [pc, #480]	; (1cbb4 <ip_interface_accept+0x278>)
   1c9d2:	6921      	ldr	r1, [r4, #16]
   1c9d4:	a803      	add	r0, sp, #12
   1c9d6:	f005 f815 	bl	21a04 <interface_socket_allocate>
   1c9da:	9b03      	ldr	r3, [sp, #12]
   1c9dc:	4605      	mov	r5, r0
   1c9de:	2b00      	cmp	r3, #0
   1c9e0:	f000 80e4 	beq.w	1cbac <ip_interface_accept+0x270>
   1c9e4:	2100      	movs	r1, #0
   1c9e6:	6962      	ldr	r2, [r4, #20]
   1c9e8:	a806      	add	r0, sp, #24
   1c9ea:	615a      	str	r2, [r3, #20]
   1c9ec:	68e2      	ldr	r2, [r4, #12]
   1c9ee:	f840 1d04 	str.w	r1, [r0, #-4]!
   1c9f2:	60da      	str	r2, [r3, #12]
   1c9f4:	6922      	ldr	r2, [r4, #16]
   1c9f6:	611a      	str	r2, [r3, #16]
   1c9f8:	f8d4 9018 	ldr.w	r9, [r4, #24]
   1c9fc:	f7ff f806 	bl	1ba0c <rpc_ip_client_request_alloc>
   1ca00:	2800      	cmp	r0, #0
   1ca02:	d146      	bne.n	1ca92 <ip_interface_accept+0x156>
   1ca04:	f247 030c 	movw	r3, #28684	; 0x700c
   1ca08:	2108      	movs	r1, #8
   1ca0a:	f8dd b014 	ldr.w	fp, [sp, #20]
   1ca0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1ca12:	f8cb 300c 	str.w	r3, [fp, #12]
   1ca16:	f8cb 9010 	str.w	r9, [fp, #16]
   1ca1a:	f88b 0009 	strb.w	r0, [fp, #9]
   1ca1e:	f88b 000a 	strb.w	r0, [fp, #10]
   1ca22:	f88b 000b 	strb.w	r0, [fp, #11]
   1ca26:	f88b 1008 	strb.w	r1, [fp, #8]
   1ca2a:	6823      	ldr	r3, [r4, #0]
   1ca2c:	f247 010c 	movw	r1, #28684	; 0x700c
   1ca30:	0c1b      	lsrs	r3, r3, #16
   1ca32:	041b      	lsls	r3, r3, #16
   1ca34:	f043 0308 	orr.w	r3, r3, #8
   1ca38:	6023      	str	r3, [r4, #0]
   1ca3a:	4658      	mov	r0, fp
   1ca3c:	f8d4 9000 	ldr.w	r9, [r4]
   1ca40:	f7fe fff8 	bl	1ba34 <rpc_ip_client_request_send>
   1ca44:	4682      	mov	sl, r0
   1ca46:	bb60      	cbnz	r0, 1caa2 <ip_interface_accept+0x166>
   1ca48:	6822      	ldr	r2, [r4, #0]
   1ca4a:	9900      	ldr	r1, [sp, #0]
   1ca4c:	ab04      	add	r3, sp, #16
   1ca4e:	400a      	ands	r2, r1
   1ca50:	6022      	str	r2, [r4, #0]
   1ca52:	2109      	movs	r1, #9
   1ca54:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ca58:	4630      	mov	r0, r6
   1ca5a:	f005 f885 	bl	21b68 <interface_socket_wait>
   1ca5e:	4681      	mov	r9, r0
   1ca60:	2800      	cmp	r0, #0
   1ca62:	f000 808d 	beq.w	1cb80 <ip_interface_accept+0x244>
   1ca66:	6823      	ldr	r3, [r4, #0]
   1ca68:	9a01      	ldr	r2, [sp, #4]
   1ca6a:	431a      	orrs	r2, r3
   1ca6c:	6022      	str	r2, [r4, #0]
   1ca6e:	6823      	ldr	r3, [r4, #0]
   1ca70:	0c1b      	lsrs	r3, r3, #16
   1ca72:	041b      	lsls	r3, r3, #16
   1ca74:	f043 0307 	orr.w	r3, r3, #7
   1ca78:	6023      	str	r3, [r4, #0]
   1ca7a:	6823      	ldr	r3, [r4, #0]
   1ca7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1ca80:	6023      	str	r3, [r4, #0]
   1ca82:	e77d      	b.n	1c980 <ip_interface_accept+0x44>
   1ca84:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   1ca88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ca8c:	e9cd 2300 	strd	r2, r3, [sp]
   1ca90:	e79e      	b.n	1c9d0 <ip_interface_accept+0x94>
   1ca92:	f8dd b014 	ldr.w	fp, [sp, #20]
   1ca96:	f04f 090c 	mov.w	r9, #12
   1ca9a:	f1bb 0f00 	cmp.w	fp, #0
   1ca9e:	d1c4      	bne.n	1ca2a <ip_interface_accept+0xee>
   1caa0:	e76e      	b.n	1c980 <ip_interface_accept+0x44>
   1caa2:	f8db 0000 	ldr.w	r0, [fp]
   1caa6:	b108      	cbz	r0, 1caac <ip_interface_accept+0x170>
   1caa8:	f7fe ffe2 	bl	1ba70 <rpc_ip_client_data_free>
   1caac:	ea4f 4919 	mov.w	r9, r9, lsr #16
   1cab0:	4658      	mov	r0, fp
   1cab2:	ea4f 4909 	mov.w	r9, r9, lsl #16
   1cab6:	f7fe ffd3 	bl	1ba60 <rpc_ip_client_message_free>
   1caba:	f049 0307 	orr.w	r3, r9, #7
   1cabe:	6023      	str	r3, [r4, #0]
   1cac0:	e76f      	b.n	1c9a2 <ip_interface_accept+0x66>
   1cac2:	4630      	mov	r0, r6
   1cac4:	f005 f8c4 	bl	21c50 <interface_socket_from_handle_get>
   1cac8:	b130      	cbz	r0, 1cad8 <ip_interface_accept+0x19c>
   1caca:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1cace:	f1b9 0f00 	cmp.w	r9, #0
   1cad2:	d001      	beq.n	1cad8 <ip_interface_accept+0x19c>
   1cad4:	6045      	str	r5, [r0, #4]
   1cad6:	e772      	b.n	1c9be <ip_interface_accept+0x82>
   1cad8:	6823      	ldr	r3, [r4, #0]
   1cada:	03d9      	lsls	r1, r3, #15
   1cadc:	f53f af73 	bmi.w	1c9c6 <ip_interface_accept+0x8a>
   1cae0:	4d35      	ldr	r5, [pc, #212]	; (1cbb8 <ip_interface_accept+0x27c>)
   1cae2:	9903      	ldr	r1, [sp, #12]
   1cae4:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1cae8:	699b      	ldr	r3, [r3, #24]
   1caea:	618b      	str	r3, [r1, #24]
   1caec:	b147      	cbz	r7, 1cb00 <ip_interface_accept+0x1c4>
   1caee:	68cb      	ldr	r3, [r1, #12]
   1caf0:	2b0a      	cmp	r3, #10
   1caf2:	d028      	beq.n	1cb46 <ip_interface_accept+0x20a>
   1caf4:	2b02      	cmp	r3, #2
   1caf6:	d103      	bne.n	1cb00 <ip_interface_accept+0x1c4>
   1caf8:	f8d8 2000 	ldr.w	r2, [r8]
   1cafc:	2a10      	cmp	r2, #16
   1cafe:	d036      	beq.n	1cb6e <ip_interface_accept+0x232>
   1cb00:	680a      	ldr	r2, [r1, #0]
   1cb02:	482e      	ldr	r0, [pc, #184]	; (1cbbc <ip_interface_accept+0x280>)
   1cb04:	4002      	ands	r2, r0
   1cb06:	f042 0205 	orr.w	r2, r2, #5
   1cb0a:	600a      	str	r2, [r1, #0]
   1cb0c:	9a03      	ldr	r2, [sp, #12]
   1cb0e:	6811      	ldr	r1, [r2, #0]
   1cb10:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   1cb14:	6011      	str	r1, [r2, #0]
   1cb16:	6811      	ldr	r1, [r2, #0]
   1cb18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cb1c:	6011      	str	r1, [r2, #0]
   1cb1e:	6823      	ldr	r3, [r4, #0]
   1cb20:	4003      	ands	r3, r0
   1cb22:	f043 0307 	orr.w	r3, r3, #7
   1cb26:	6023      	str	r3, [r4, #0]
   1cb28:	6823      	ldr	r3, [r4, #0]
   1cb2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1cb2e:	6023      	str	r3, [r4, #0]
   1cb30:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   1cb34:	f7fe ff94 	bl	1ba60 <rpc_ip_client_message_free>
   1cb38:	2300      	movs	r3, #0
   1cb3a:	4648      	mov	r0, r9
   1cb3c:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   1cb40:	b007      	add	sp, #28
   1cb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb46:	f8d8 2000 	ldr.w	r2, [r8]
   1cb4a:	2a24      	cmp	r2, #36	; 0x24
   1cb4c:	d1d8      	bne.n	1cb00 <ip_interface_accept+0x1c4>
   1cb4e:	703a      	strb	r2, [r7, #0]
   1cb50:	2210      	movs	r2, #16
   1cb52:	607b      	str	r3, [r7, #4]
   1cb54:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1cb58:	f107 0010 	add.w	r0, r7, #16
   1cb5c:	8b9b      	ldrh	r3, [r3, #28]
   1cb5e:	813b      	strh	r3, [r7, #8]
   1cb60:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   1cb64:	3120      	adds	r1, #32
   1cb66:	f7ef fff1 	bl	cb4c <memcpy>
   1cb6a:	9903      	ldr	r1, [sp, #12]
   1cb6c:	e7c8      	b.n	1cb00 <ip_interface_accept+0x1c4>
   1cb6e:	703a      	strb	r2, [r7, #0]
   1cb70:	607b      	str	r3, [r7, #4]
   1cb72:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1cb76:	f107 000c 	add.w	r0, r7, #12
   1cb7a:	8b9b      	ldrh	r3, [r3, #28]
   1cb7c:	2204      	movs	r2, #4
   1cb7e:	e7ee      	b.n	1cb5e <ip_interface_accept+0x222>
   1cb80:	4630      	mov	r0, r6
   1cb82:	f005 f865 	bl	21c50 <interface_socket_from_handle_get>
   1cb86:	b138      	cbz	r0, 1cb98 <ip_interface_accept+0x25c>
   1cb88:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1cb8c:	f1b9 0f00 	cmp.w	r9, #0
   1cb90:	d002      	beq.n	1cb98 <ip_interface_accept+0x25c>
   1cb92:	f8c0 a004 	str.w	sl, [r0, #4]
   1cb96:	e766      	b.n	1ca66 <ip_interface_accept+0x12a>
   1cb98:	6823      	ldr	r3, [r4, #0]
   1cb9a:	9a01      	ldr	r2, [sp, #4]
   1cb9c:	46a9      	mov	r9, r5
   1cb9e:	4313      	orrs	r3, r2
   1cba0:	6023      	str	r3, [r4, #0]
   1cba2:	e79d      	b.n	1cae0 <ip_interface_accept+0x1a4>
   1cba4:	4605      	mov	r5, r0
   1cba6:	f04f 0909 	mov.w	r9, #9
   1cbaa:	e6e9      	b.n	1c980 <ip_interface_accept+0x44>
   1cbac:	f04f 090c 	mov.w	r9, #12
   1cbb0:	e6eb      	b.n	1c98a <ip_interface_accept+0x4e>
   1cbb2:	bf00      	nop
   1cbb4:	0001ba81 	.word	0x0001ba81
   1cbb8:	200219e8 	.word	0x200219e8
   1cbbc:	ffff0000 	.word	0xffff0000

0001cbc0 <ip_interface_setopt>:
   1cbc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cbc4:	2901      	cmp	r1, #1
   1cbc6:	b084      	sub	sp, #16
   1cbc8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1cbca:	f040 808a 	bne.w	1cce2 <ip_interface_setopt+0x122>
   1cbce:	4617      	mov	r7, r2
   1cbd0:	461d      	mov	r5, r3
   1cbd2:	4680      	mov	r8, r0
   1cbd4:	f005 f83c 	bl	21c50 <interface_socket_from_handle_get>
   1cbd8:	4604      	mov	r4, r0
   1cbda:	2800      	cmp	r0, #0
   1cbdc:	f000 808d 	beq.w	1ccfa <ip_interface_setopt+0x13a>
   1cbe0:	f1a7 0119 	sub.w	r1, r7, #25
   1cbe4:	290f      	cmp	r1, #15
   1cbe6:	d872      	bhi.n	1ccce <ip_interface_setopt+0x10e>
   1cbe8:	e8df f001 	tbb	[pc, r1]
   1cbec:	7171711a 	.word	0x7171711a
   1cbf0:	61514071 	.word	0x61514071
   1cbf4:	71717171 	.word	0x71717171
   1cbf8:	08717171 	.word	0x08717171
   1cbfc:	2e04      	cmp	r6, #4
   1cbfe:	d176      	bne.n	1ccee <ip_interface_setopt+0x12e>
   1cc00:	2d00      	cmp	r5, #0
   1cc02:	d074      	beq.n	1ccee <ip_interface_setopt+0x12e>
   1cc04:	4601      	mov	r1, r0
   1cc06:	e9cd 5600 	strd	r5, r6, [sp]
   1cc0a:	4640      	mov	r0, r8
   1cc0c:	f241 0304 	movw	r3, #4100	; 0x1004
   1cc10:	2208      	movs	r2, #8
   1cc12:	f7ff fcff 	bl	1c614 <ip_interface_socketoption_send>
   1cc16:	bb20      	cbnz	r0, 1cc62 <ip_interface_setopt+0xa2>
   1cc18:	2000      	movs	r0, #0
   1cc1a:	b004      	add	sp, #16
   1cc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cc20:	2d00      	cmp	r5, #0
   1cc22:	d06c      	beq.n	1ccfe <ip_interface_setopt+0x13e>
   1cc24:	4628      	mov	r0, r5
   1cc26:	f009 fff7 	bl	26c18 <strlen>
   1cc2a:	42b0      	cmp	r0, r6
   1cc2c:	d167      	bne.n	1ccfe <ip_interface_setopt+0x13e>
   1cc2e:	6823      	ldr	r3, [r4, #0]
   1cc30:	b29b      	uxth	r3, r3
   1cc32:	2b02      	cmp	r3, #2
   1cc34:	d161      	bne.n	1ccfa <ip_interface_setopt+0x13a>
   1cc36:	4629      	mov	r1, r5
   1cc38:	68e0      	ldr	r0, [r4, #12]
   1cc3a:	f002 fdc1 	bl	1f7c0 <pdn_interface_pdn_id_get>
   1cc3e:	9003      	str	r0, [sp, #12]
   1cc40:	3001      	adds	r0, #1
   1cc42:	bf08      	it	eq
   1cc44:	2016      	moveq	r0, #22
   1cc46:	d00c      	beq.n	1cc62 <ip_interface_setopt+0xa2>
   1cc48:	2204      	movs	r2, #4
   1cc4a:	ab03      	add	r3, sp, #12
   1cc4c:	e9cd 3200 	strd	r3, r2, [sp]
   1cc50:	4621      	mov	r1, r4
   1cc52:	4640      	mov	r0, r8
   1cc54:	f243 0310 	movw	r3, #12304	; 0x3010
   1cc58:	2208      	movs	r2, #8
   1cc5a:	f7ff fcdb 	bl	1c614 <ip_interface_socketoption_send>
   1cc5e:	2800      	cmp	r0, #0
   1cc60:	d0da      	beq.n	1cc18 <ip_interface_setopt+0x58>
   1cc62:	f7f9 ff53 	bl	16b0c <bsd_os_errno_set>
   1cc66:	f04f 30ff 	mov.w	r0, #4294967295
   1cc6a:	e7d6      	b.n	1cc1a <ip_interface_setopt+0x5a>
   1cc6c:	2e04      	cmp	r6, #4
   1cc6e:	d13e      	bne.n	1ccee <ip_interface_setopt+0x12e>
   1cc70:	2d00      	cmp	r5, #0
   1cc72:	d03c      	beq.n	1ccee <ip_interface_setopt+0x12e>
   1cc74:	4601      	mov	r1, r0
   1cc76:	e9cd 5600 	strd	r5, r6, [sp]
   1cc7a:	4640      	mov	r0, r8
   1cc7c:	f248 0301 	movw	r3, #32769	; 0x8001
   1cc80:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cc84:	f7ff fcc6 	bl	1c614 <ip_interface_socketoption_send>
   1cc88:	2800      	cmp	r0, #0
   1cc8a:	d0c5      	beq.n	1cc18 <ip_interface_setopt+0x58>
   1cc8c:	e7e9      	b.n	1cc62 <ip_interface_setopt+0xa2>
   1cc8e:	2e04      	cmp	r6, #4
   1cc90:	d12d      	bne.n	1ccee <ip_interface_setopt+0x12e>
   1cc92:	b365      	cbz	r5, 1ccee <ip_interface_setopt+0x12e>
   1cc94:	4601      	mov	r1, r0
   1cc96:	e9cd 5600 	strd	r5, r6, [sp]
   1cc9a:	4640      	mov	r0, r8
   1cc9c:	f244 0310 	movw	r3, #16400	; 0x4010
   1cca0:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cca4:	f7ff fcb6 	bl	1c614 <ip_interface_socketoption_send>
   1cca8:	2800      	cmp	r0, #0
   1ccaa:	d0b5      	beq.n	1cc18 <ip_interface_setopt+0x58>
   1ccac:	e7d9      	b.n	1cc62 <ip_interface_setopt+0xa2>
   1ccae:	2e04      	cmp	r6, #4
   1ccb0:	d11d      	bne.n	1ccee <ip_interface_setopt+0x12e>
   1ccb2:	b1e5      	cbz	r5, 1ccee <ip_interface_setopt+0x12e>
   1ccb4:	4601      	mov	r1, r0
   1ccb6:	e9cd 5600 	strd	r5, r6, [sp]
   1ccba:	4640      	mov	r0, r8
   1ccbc:	f246 0310 	movw	r3, #24592	; 0x6010
   1ccc0:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ccc4:	f7ff fca6 	bl	1c614 <ip_interface_socketoption_send>
   1ccc8:	2800      	cmp	r0, #0
   1ccca:	d0a5      	beq.n	1cc18 <ip_interface_setopt+0x58>
   1cccc:	e7c9      	b.n	1cc62 <ip_interface_setopt+0xa2>
   1ccce:	9600      	str	r6, [sp, #0]
   1ccd0:	462b      	mov	r3, r5
   1ccd2:	463a      	mov	r2, r7
   1ccd4:	4640      	mov	r0, r8
   1ccd6:	2101      	movs	r1, #1
   1ccd8:	f004 ffe2 	bl	21ca0 <interface_socket_setopt>
   1ccdc:	b004      	add	sp, #16
   1ccde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cce2:	202a      	movs	r0, #42	; 0x2a
   1cce4:	f7f9 ff12 	bl	16b0c <bsd_os_errno_set>
   1cce8:	f04f 30ff 	mov.w	r0, #4294967295
   1ccec:	e795      	b.n	1cc1a <ip_interface_setopt+0x5a>
   1ccee:	2016      	movs	r0, #22
   1ccf0:	f7f9 ff0c 	bl	16b0c <bsd_os_errno_set>
   1ccf4:	f04f 30ff 	mov.w	r0, #4294967295
   1ccf8:	e78f      	b.n	1cc1a <ip_interface_setopt+0x5a>
   1ccfa:	2009      	movs	r0, #9
   1ccfc:	e7b1      	b.n	1cc62 <ip_interface_setopt+0xa2>
   1ccfe:	200e      	movs	r0, #14
   1cd00:	e7af      	b.n	1cc62 <ip_interface_setopt+0xa2>
   1cd02:	bf00      	nop

0001cd04 <ip_interface_getopt>:
   1cd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cd08:	2901      	cmp	r1, #1
   1cd0a:	b082      	sub	sp, #8
   1cd0c:	9c08      	ldr	r4, [sp, #32]
   1cd0e:	d173      	bne.n	1cdf8 <ip_interface_getopt+0xf4>
   1cd10:	4617      	mov	r7, r2
   1cd12:	461e      	mov	r6, r3
   1cd14:	4680      	mov	r8, r0
   1cd16:	f004 ff9b 	bl	21c50 <interface_socket_from_handle_get>
   1cd1a:	2800      	cmp	r0, #0
   1cd1c:	d072      	beq.n	1ce04 <ip_interface_getopt+0x100>
   1cd1e:	f1a7 051e 	sub.w	r5, r7, #30
   1cd22:	2d0a      	cmp	r5, #10
   1cd24:	d858      	bhi.n	1cdd8 <ip_interface_getopt+0xd4>
   1cd26:	e8df f005 	tbb	[pc, r5]
   1cd2a:	331b      	.short	0x331b
   1cd2c:	57575745 	.word	0x57575745
   1cd30:	57575757 	.word	0x57575757
   1cd34:	06          	.byte	0x06
   1cd35:	00          	.byte	0x00
   1cd36:	2c00      	cmp	r4, #0
   1cd38:	d058      	beq.n	1cdec <ip_interface_getopt+0xe8>
   1cd3a:	6823      	ldr	r3, [r4, #0]
   1cd3c:	2b04      	cmp	r3, #4
   1cd3e:	d155      	bne.n	1cdec <ip_interface_getopt+0xe8>
   1cd40:	2e00      	cmp	r6, #0
   1cd42:	d053      	beq.n	1cdec <ip_interface_getopt+0xe8>
   1cd44:	4601      	mov	r1, r0
   1cd46:	e9cd 6400 	strd	r6, r4, [sp]
   1cd4a:	4640      	mov	r0, r8
   1cd4c:	f241 0304 	movw	r3, #4100	; 0x1004
   1cd50:	2208      	movs	r2, #8
   1cd52:	f7ff fbaf 	bl	1c4b4 <ip_interface_socketoption_get>
   1cd56:	b9b0      	cbnz	r0, 1cd86 <ip_interface_getopt+0x82>
   1cd58:	2000      	movs	r0, #0
   1cd5a:	b002      	add	sp, #8
   1cd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cd60:	2c00      	cmp	r4, #0
   1cd62:	d043      	beq.n	1cdec <ip_interface_getopt+0xe8>
   1cd64:	6823      	ldr	r3, [r4, #0]
   1cd66:	2b04      	cmp	r3, #4
   1cd68:	d140      	bne.n	1cdec <ip_interface_getopt+0xe8>
   1cd6a:	2e00      	cmp	r6, #0
   1cd6c:	d03e      	beq.n	1cdec <ip_interface_getopt+0xe8>
   1cd6e:	4601      	mov	r1, r0
   1cd70:	e9cd 6400 	strd	r6, r4, [sp]
   1cd74:	4640      	mov	r0, r8
   1cd76:	f248 0301 	movw	r3, #32769	; 0x8001
   1cd7a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cd7e:	f7ff fb99 	bl	1c4b4 <ip_interface_socketoption_get>
   1cd82:	2800      	cmp	r0, #0
   1cd84:	d0e8      	beq.n	1cd58 <ip_interface_getopt+0x54>
   1cd86:	f7f9 fec1 	bl	16b0c <bsd_os_errno_set>
   1cd8a:	f04f 30ff 	mov.w	r0, #4294967295
   1cd8e:	e7e4      	b.n	1cd5a <ip_interface_getopt+0x56>
   1cd90:	b364      	cbz	r4, 1cdec <ip_interface_getopt+0xe8>
   1cd92:	6823      	ldr	r3, [r4, #0]
   1cd94:	2b04      	cmp	r3, #4
   1cd96:	d129      	bne.n	1cdec <ip_interface_getopt+0xe8>
   1cd98:	b346      	cbz	r6, 1cdec <ip_interface_getopt+0xe8>
   1cd9a:	4601      	mov	r1, r0
   1cd9c:	e9cd 6400 	strd	r6, r4, [sp]
   1cda0:	4640      	mov	r0, r8
   1cda2:	f244 0310 	movw	r3, #16400	; 0x4010
   1cda6:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cdaa:	f7ff fb83 	bl	1c4b4 <ip_interface_socketoption_get>
   1cdae:	2800      	cmp	r0, #0
   1cdb0:	d0d2      	beq.n	1cd58 <ip_interface_getopt+0x54>
   1cdb2:	e7e8      	b.n	1cd86 <ip_interface_getopt+0x82>
   1cdb4:	b1d4      	cbz	r4, 1cdec <ip_interface_getopt+0xe8>
   1cdb6:	6823      	ldr	r3, [r4, #0]
   1cdb8:	2b04      	cmp	r3, #4
   1cdba:	d117      	bne.n	1cdec <ip_interface_getopt+0xe8>
   1cdbc:	b1b6      	cbz	r6, 1cdec <ip_interface_getopt+0xe8>
   1cdbe:	4601      	mov	r1, r0
   1cdc0:	e9cd 6400 	strd	r6, r4, [sp]
   1cdc4:	4640      	mov	r0, r8
   1cdc6:	f246 0310 	movw	r3, #24592	; 0x6010
   1cdca:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cdce:	f7ff fb71 	bl	1c4b4 <ip_interface_socketoption_get>
   1cdd2:	2800      	cmp	r0, #0
   1cdd4:	d0c0      	beq.n	1cd58 <ip_interface_getopt+0x54>
   1cdd6:	e7d6      	b.n	1cd86 <ip_interface_getopt+0x82>
   1cdd8:	4633      	mov	r3, r6
   1cdda:	463a      	mov	r2, r7
   1cddc:	4640      	mov	r0, r8
   1cdde:	2101      	movs	r1, #1
   1cde0:	9408      	str	r4, [sp, #32]
   1cde2:	b002      	add	sp, #8
   1cde4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cde8:	f004 bfa0 	b.w	21d2c <interface_socket_getopt>
   1cdec:	2016      	movs	r0, #22
   1cdee:	f7f9 fe8d 	bl	16b0c <bsd_os_errno_set>
   1cdf2:	f04f 30ff 	mov.w	r0, #4294967295
   1cdf6:	e7b0      	b.n	1cd5a <ip_interface_getopt+0x56>
   1cdf8:	202a      	movs	r0, #42	; 0x2a
   1cdfa:	f7f9 fe87 	bl	16b0c <bsd_os_errno_set>
   1cdfe:	f04f 30ff 	mov.w	r0, #4294967295
   1ce02:	e7aa      	b.n	1cd5a <ip_interface_getopt+0x56>
   1ce04:	2009      	movs	r0, #9
   1ce06:	f7f9 fe81 	bl	16b0c <bsd_os_errno_set>
   1ce0a:	f04f 30ff 	mov.w	r0, #4294967295
   1ce0e:	e7a4      	b.n	1cd5a <ip_interface_getopt+0x56>

0001ce10 <ip_interface_getaddrinfo>:
   1ce10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce14:	f04f 0c00 	mov.w	ip, #0
   1ce18:	2401      	movs	r4, #1
   1ce1a:	4e75      	ldr	r6, [pc, #468]	; (1cff0 <ip_interface_getaddrinfo+0x1e0>)
   1ce1c:	4d75      	ldr	r5, [pc, #468]	; (1cff4 <ip_interface_getaddrinfo+0x1e4>)
   1ce1e:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 1d004 <ip_interface_getaddrinfo+0x1f4>
   1ce22:	4f75      	ldr	r7, [pc, #468]	; (1cff8 <ip_interface_getaddrinfo+0x1e8>)
   1ce24:	7836      	ldrb	r6, [r6, #0]
   1ce26:	b085      	sub	sp, #20
   1ce28:	f8a5 c000 	strh.w	ip, [r5]
   1ce2c:	f8c8 4000 	str.w	r4, [r8]
   1ce30:	603c      	str	r4, [r7, #0]
   1ce32:	2e00      	cmp	r6, #0
   1ce34:	d05b      	beq.n	1ceee <ip_interface_getaddrinfo+0xde>
   1ce36:	9301      	str	r3, [sp, #4]
   1ce38:	4614      	mov	r4, r2
   1ce3a:	460b      	mov	r3, r1
   1ce3c:	4606      	mov	r6, r0
   1ce3e:	b171      	cbz	r1, 1ce5e <ip_interface_getaddrinfo+0x4e>
   1ce40:	4618      	mov	r0, r3
   1ce42:	220a      	movs	r2, #10
   1ce44:	4661      	mov	r1, ip
   1ce46:	f00a fa3b 	bl	272c0 <strtol>
   1ce4a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   1ce4e:	1e42      	subs	r2, r0, #1
   1ce50:	429a      	cmp	r2, r3
   1ce52:	f200 8097 	bhi.w	1cf84 <ip_interface_getaddrinfo+0x174>
   1ce56:	0203      	lsls	r3, r0, #8
   1ce58:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   1ce5c:	8028      	strh	r0, [r5, #0]
   1ce5e:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 1d008 <ip_interface_getaddrinfo+0x1f8>
   1ce62:	f8da 3000 	ldr.w	r3, [sl]
   1ce66:	2b00      	cmp	r3, #0
   1ce68:	d145      	bne.n	1cef6 <ip_interface_getaddrinfo+0xe6>
   1ce6a:	4a64      	ldr	r2, [pc, #400]	; (1cffc <ip_interface_getaddrinfo+0x1ec>)
   1ce6c:	6013      	str	r3, [r2, #0]
   1ce6e:	4a64      	ldr	r2, [pc, #400]	; (1d000 <ip_interface_getaddrinfo+0x1f0>)
   1ce70:	6013      	str	r3, [r2, #0]
   1ce72:	2e00      	cmp	r6, #0
   1ce74:	d07a      	beq.n	1cf6c <ip_interface_getaddrinfo+0x15c>
   1ce76:	4630      	mov	r0, r6
   1ce78:	f009 fece 	bl	26c18 <strlen>
   1ce7c:	4683      	mov	fp, r0
   1ce7e:	b144      	cbz	r4, 1ce92 <ip_interface_getaddrinfo+0x82>
   1ce80:	69e2      	ldr	r2, [r4, #28]
   1ce82:	b132      	cbz	r2, 1ce92 <ip_interface_getaddrinfo+0x82>
   1ce84:	6851      	ldr	r1, [r2, #4]
   1ce86:	2966      	cmp	r1, #102	; 0x66
   1ce88:	d103      	bne.n	1ce92 <ip_interface_getaddrinfo+0x82>
   1ce8a:	6891      	ldr	r1, [r2, #8]
   1ce8c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1ce90:	d07e      	beq.n	1cf90 <ip_interface_getaddrinfo+0x180>
   1ce92:	f04f 32ff 	mov.w	r2, #4294967295
   1ce96:	2100      	movs	r1, #0
   1ce98:	f10d 0910 	add.w	r9, sp, #16
   1ce9c:	f849 1d04 	str.w	r1, [r9, #-4]!
   1cea0:	4648      	mov	r0, r9
   1cea2:	4659      	mov	r1, fp
   1cea4:	9200      	str	r2, [sp, #0]
   1cea6:	f7fe fdb1 	bl	1ba0c <rpc_ip_client_request_alloc>
   1ceaa:	9a00      	ldr	r2, [sp, #0]
   1ceac:	2800      	cmp	r0, #0
   1ceae:	d15f      	bne.n	1cf70 <ip_interface_getaddrinfo+0x160>
   1ceb0:	f247 010d 	movw	r1, #28685	; 0x700d
   1ceb4:	f04f 0c08 	mov.w	ip, #8
   1ceb8:	9d03      	ldr	r5, [sp, #12]
   1ceba:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1cebe:	60e9      	str	r1, [r5, #12]
   1cec0:	612a      	str	r2, [r5, #16]
   1cec2:	7268      	strb	r0, [r5, #9]
   1cec4:	72a8      	strb	r0, [r5, #10]
   1cec6:	72e8      	strb	r0, [r5, #11]
   1cec8:	f885 c008 	strb.w	ip, [r5, #8]
   1cecc:	2c00      	cmp	r4, #0
   1cece:	d076      	beq.n	1cfbe <ip_interface_getaddrinfo+0x1ae>
   1ced0:	6862      	ldr	r2, [r4, #4]
   1ced2:	f022 0108 	bic.w	r1, r2, #8
   1ced6:	2902      	cmp	r1, #2
   1ced8:	d011      	beq.n	1cefe <ip_interface_getaddrinfo+0xee>
   1ceda:	2a05      	cmp	r2, #5
   1cedc:	d176      	bne.n	1cfcc <ip_interface_getaddrinfo+0x1bc>
   1cede:	68a1      	ldr	r1, [r4, #8]
   1cee0:	2902      	cmp	r1, #2
   1cee2:	6039      	str	r1, [r7, #0]
   1cee4:	d115      	bne.n	1cf12 <ip_interface_getaddrinfo+0x102>
   1cee6:	2102      	movs	r1, #2
   1cee8:	f8c8 1000 	str.w	r1, [r8]
   1ceec:	e00b      	b.n	1cf06 <ip_interface_getaddrinfo+0xf6>
   1ceee:	2070      	movs	r0, #112	; 0x70
   1cef0:	b005      	add	sp, #20
   1cef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cef6:	2073      	movs	r0, #115	; 0x73
   1cef8:	b005      	add	sp, #20
   1cefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cefe:	68a1      	ldr	r1, [r4, #8]
   1cf00:	2902      	cmp	r1, #2
   1cf02:	6039      	str	r1, [r7, #0]
   1cf04:	d0ef      	beq.n	1cee6 <ip_interface_getaddrinfo+0xd6>
   1cf06:	2a05      	cmp	r2, #5
   1cf08:	d003      	beq.n	1cf12 <ip_interface_getaddrinfo+0x102>
   1cf0a:	2a0a      	cmp	r2, #10
   1cf0c:	bf14      	ite	ne
   1cf0e:	2201      	movne	r2, #1
   1cf10:	2202      	moveq	r2, #2
   1cf12:	61aa      	str	r2, [r5, #24]
   1cf14:	68e2      	ldr	r2, [r4, #12]
   1cf16:	622a      	str	r2, [r5, #32]
   1cf18:	68a2      	ldr	r2, [r4, #8]
   1cf1a:	61ea      	str	r2, [r5, #28]
   1cf1c:	6822      	ldr	r2, [r4, #0]
   1cf1e:	616a      	str	r2, [r5, #20]
   1cf20:	68aa      	ldr	r2, [r5, #8]
   1cf22:	3210      	adds	r2, #16
   1cf24:	60aa      	str	r2, [r5, #8]
   1cf26:	b12e      	cbz	r6, 1cf34 <ip_interface_getaddrinfo+0x124>
   1cf28:	6828      	ldr	r0, [r5, #0]
   1cf2a:	b118      	cbz	r0, 1cf34 <ip_interface_getaddrinfo+0x124>
   1cf2c:	465a      	mov	r2, fp
   1cf2e:	4631      	mov	r1, r6
   1cf30:	f7ef fe0c 	bl	cb4c <memcpy>
   1cf34:	2301      	movs	r3, #1
   1cf36:	f247 010d 	movw	r1, #28685	; 0x700d
   1cf3a:	4628      	mov	r0, r5
   1cf3c:	f8ca 3000 	str.w	r3, [sl]
   1cf40:	f7fe fd78 	bl	1ba34 <rpc_ip_client_request_send>
   1cf44:	bb10      	cbnz	r0, 1cf8c <ip_interface_getaddrinfo+0x17c>
   1cf46:	f04f 33ff 	mov.w	r3, #4294967295
   1cf4a:	9303      	str	r3, [sp, #12]
   1cf4c:	4649      	mov	r1, r9
   1cf4e:	4628      	mov	r0, r5
   1cf50:	f7f9 fd24 	bl	1699c <bsd_os_timedwait>
   1cf54:	f8da 3000 	ldr.w	r3, [sl]
   1cf58:	2b01      	cmp	r3, #1
   1cf5a:	d0f7      	beq.n	1cf4c <ip_interface_getaddrinfo+0x13c>
   1cf5c:	4b28      	ldr	r3, [pc, #160]	; (1d000 <ip_interface_getaddrinfo+0x1f0>)
   1cf5e:	6818      	ldr	r0, [r3, #0]
   1cf60:	bb40      	cbnz	r0, 1cfb4 <ip_interface_getaddrinfo+0x1a4>
   1cf62:	4b26      	ldr	r3, [pc, #152]	; (1cffc <ip_interface_getaddrinfo+0x1ec>)
   1cf64:	9a01      	ldr	r2, [sp, #4]
   1cf66:	681b      	ldr	r3, [r3, #0]
   1cf68:	6013      	str	r3, [r2, #0]
   1cf6a:	e7c1      	b.n	1cef0 <ip_interface_getaddrinfo+0xe0>
   1cf6c:	46b3      	mov	fp, r6
   1cf6e:	e786      	b.n	1ce7e <ip_interface_getaddrinfo+0x6e>
   1cf70:	9d03      	ldr	r5, [sp, #12]
   1cf72:	2d00      	cmp	r5, #0
   1cf74:	d1aa      	bne.n	1cecc <ip_interface_getaddrinfo+0xbc>
   1cf76:	200c      	movs	r0, #12
   1cf78:	2300      	movs	r3, #0
   1cf7a:	f8ca 3000 	str.w	r3, [sl]
   1cf7e:	b005      	add	sp, #20
   1cf80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf84:	2016      	movs	r0, #22
   1cf86:	b005      	add	sp, #20
   1cf88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf8c:	2023      	movs	r0, #35	; 0x23
   1cf8e:	e7f3      	b.n	1cf78 <ip_interface_getaddrinfo+0x168>
   1cf90:	f240 2002 	movw	r0, #514	; 0x202
   1cf94:	68d1      	ldr	r1, [r2, #12]
   1cf96:	4281      	cmp	r1, r0
   1cf98:	f47f af7b 	bne.w	1ce92 <ip_interface_getaddrinfo+0x82>
   1cf9c:	6991      	ldr	r1, [r2, #24]
   1cf9e:	2900      	cmp	r1, #0
   1cfa0:	f43f af77 	beq.w	1ce92 <ip_interface_getaddrinfo+0x82>
   1cfa4:	6860      	ldr	r0, [r4, #4]
   1cfa6:	f002 fc0b 	bl	1f7c0 <pdn_interface_pdn_id_get>
   1cfaa:	1c43      	adds	r3, r0, #1
   1cfac:	f43f af71 	beq.w	1ce92 <ip_interface_getaddrinfo+0x82>
   1cfb0:	4602      	mov	r2, r0
   1cfb2:	e770      	b.n	1ce96 <ip_interface_getaddrinfo+0x86>
   1cfb4:	4b12      	ldr	r3, [pc, #72]	; (1d000 <ip_interface_getaddrinfo+0x1f0>)
   1cfb6:	6818      	ldr	r0, [r3, #0]
   1cfb8:	2800      	cmp	r0, #0
   1cfba:	d099      	beq.n	1cef0 <ip_interface_getaddrinfo+0xe0>
   1cfbc:	e7dc      	b.n	1cf78 <ip_interface_getaddrinfo+0x168>
   1cfbe:	4621      	mov	r1, r4
   1cfc0:	2210      	movs	r2, #16
   1cfc2:	f105 0014 	add.w	r0, r5, #20
   1cfc6:	f009 fa17 	bl	263f8 <memset>
   1cfca:	e7a9      	b.n	1cf20 <ip_interface_getaddrinfo+0x110>
   1cfcc:	202f      	movs	r0, #47	; 0x2f
   1cfce:	f7f9 fd9d 	bl	16b0c <bsd_os_errno_set>
   1cfd2:	68aa      	ldr	r2, [r5, #8]
   1cfd4:	3210      	adds	r2, #16
   1cfd6:	60aa      	str	r2, [r5, #8]
   1cfd8:	b916      	cbnz	r6, 1cfe0 <ip_interface_getaddrinfo+0x1d0>
   1cfda:	f04f 30ff 	mov.w	r0, #4294967295
   1cfde:	e7cb      	b.n	1cf78 <ip_interface_getaddrinfo+0x168>
   1cfe0:	6828      	ldr	r0, [r5, #0]
   1cfe2:	2800      	cmp	r0, #0
   1cfe4:	d0f9      	beq.n	1cfda <ip_interface_getaddrinfo+0x1ca>
   1cfe6:	465a      	mov	r2, fp
   1cfe8:	4631      	mov	r1, r6
   1cfea:	f7ef fdaf 	bl	cb4c <memcpy>
   1cfee:	e7f4      	b.n	1cfda <ip_interface_getaddrinfo+0x1ca>
   1cff0:	2002629a 	.word	0x2002629a
   1cff4:	200242c8 	.word	0x200242c8
   1cff8:	200219d8 	.word	0x200219d8
   1cffc:	200219e4 	.word	0x200219e4
   1d000:	200219dc 	.word	0x200219dc
   1d004:	200219d4 	.word	0x200219d4
   1d008:	200219e0 	.word	0x200219e0

0001d00c <ip_interface_freeaddrinfo>:
   1d00c:	b538      	push	{r3, r4, r5, lr}
   1d00e:	4d0b      	ldr	r5, [pc, #44]	; (1d03c <ip_interface_freeaddrinfo+0x30>)
   1d010:	682b      	ldr	r3, [r5, #0]
   1d012:	2b02      	cmp	r3, #2
   1d014:	d000      	beq.n	1d018 <ip_interface_freeaddrinfo+0xc>
   1d016:	bd38      	pop	{r3, r4, r5, pc}
   1d018:	b150      	cbz	r0, 1d030 <ip_interface_freeaddrinfo+0x24>
   1d01a:	4604      	mov	r4, r0
   1d01c:	6940      	ldr	r0, [r0, #20]
   1d01e:	f004 f919 	bl	21254 <nrf_free>
   1d022:	69a0      	ldr	r0, [r4, #24]
   1d024:	b108      	cbz	r0, 1d02a <ip_interface_freeaddrinfo+0x1e>
   1d026:	f004 f915 	bl	21254 <nrf_free>
   1d02a:	4620      	mov	r0, r4
   1d02c:	f004 f912 	bl	21254 <nrf_free>
   1d030:	2300      	movs	r3, #0
   1d032:	4a03      	ldr	r2, [pc, #12]	; (1d040 <ip_interface_freeaddrinfo+0x34>)
   1d034:	602b      	str	r3, [r5, #0]
   1d036:	6013      	str	r3, [r2, #0]
   1d038:	bd38      	pop	{r3, r4, r5, pc}
   1d03a:	bf00      	nop
   1d03c:	200219e0 	.word	0x200219e0
   1d040:	200219dc 	.word	0x200219dc

0001d044 <rpc_ip_event_handler>:
   1d044:	f248 030d 	movw	r3, #32781	; 0x800d
   1d048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d04c:	4299      	cmp	r1, r3
   1d04e:	b089      	sub	sp, #36	; 0x24
   1d050:	4604      	mov	r4, r0
   1d052:	d05c      	beq.n	1d10e <rpc_ip_event_handler+0xca>
   1d054:	f248 030f 	movw	r3, #32783	; 0x800f
   1d058:	4299      	cmp	r1, r3
   1d05a:	460d      	mov	r5, r1
   1d05c:	d045      	beq.n	1d0ea <rpc_ip_event_handler+0xa6>
   1d05e:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   1d062:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   1d066:	68c0      	ldr	r0, [r0, #12]
   1d068:	d075      	beq.n	1d156 <rpc_ip_event_handler+0x112>
   1d06a:	0c06      	lsrs	r6, r0, #16
   1d06c:	4630      	mov	r0, r6
   1d06e:	f004 fdef 	bl	21c50 <interface_socket_from_handle_get>
   1d072:	4607      	mov	r7, r0
   1d074:	2800      	cmp	r0, #0
   1d076:	d059      	beq.n	1d12c <rpc_ip_event_handler+0xe8>
   1d078:	4601      	mov	r1, r0
   1d07a:	462b      	mov	r3, r5
   1d07c:	4622      	mov	r2, r4
   1d07e:	4630      	mov	r0, r6
   1d080:	f7fe fc36 	bl	1b8f0 <tls_rpc_ip_event_handler>
   1d084:	2800      	cmp	r0, #0
   1d086:	d04d      	beq.n	1d124 <rpc_ip_event_handler+0xe0>
   1d088:	f248 0307 	movw	r3, #32775	; 0x8007
   1d08c:	429d      	cmp	r5, r3
   1d08e:	d866      	bhi.n	1d15e <rpc_ip_event_handler+0x11a>
   1d090:	f248 0306 	movw	r3, #32774	; 0x8006
   1d094:	429d      	cmp	r5, r3
   1d096:	f080 81e7 	bcs.w	1d468 <rpc_ip_event_handler+0x424>
   1d09a:	f248 0303 	movw	r3, #32771	; 0x8003
   1d09e:	429d      	cmp	r5, r3
   1d0a0:	f000 81c5 	beq.w	1d42e <rpc_ip_event_handler+0x3ea>
   1d0a4:	f200 811b 	bhi.w	1d2de <rpc_ip_event_handler+0x29a>
   1d0a8:	f248 0301 	movw	r3, #32769	; 0x8001
   1d0ac:	429d      	cmp	r5, r3
   1d0ae:	f000 8154 	beq.w	1d35a <rpc_ip_event_handler+0x316>
   1d0b2:	f248 0302 	movw	r3, #32770	; 0x8002
   1d0b6:	429d      	cmp	r5, r3
   1d0b8:	d138      	bne.n	1d12c <rpc_ip_event_handler+0xe8>
   1d0ba:	683b      	ldr	r3, [r7, #0]
   1d0bc:	0098      	lsls	r0, r3, #2
   1d0be:	d531      	bpl.n	1d124 <rpc_ip_event_handler+0xe0>
   1d0c0:	683b      	ldr	r3, [r7, #0]
   1d0c2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1d0c6:	603b      	str	r3, [r7, #0]
   1d0c8:	6963      	ldr	r3, [r4, #20]
   1d0ca:	2b00      	cmp	r3, #0
   1d0cc:	f000 81ea 	beq.w	1d4a4 <rpc_ip_event_handler+0x460>
   1d0d0:	2b10      	cmp	r3, #16
   1d0d2:	bf8e      	itee	hi
   1d0d4:	232d      	movhi	r3, #45	; 0x2d
   1d0d6:	4ab9      	ldrls	r2, [pc, #740]	; (1d3bc <rpc_ip_event_handler+0x378>)
   1d0d8:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1d0dc:	607b      	str	r3, [r7, #4]
   1d0de:	683b      	ldr	r3, [r7, #0]
   1d0e0:	2000      	movs	r0, #0
   1d0e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1d0e6:	603b      	str	r3, [r7, #0]
   1d0e8:	e00e      	b.n	1d108 <rpc_ip_event_handler+0xc4>
   1d0ea:	6943      	ldr	r3, [r0, #20]
   1d0ec:	2001      	movs	r0, #1
   1d0ee:	2b10      	cmp	r3, #16
   1d0f0:	49b3      	ldr	r1, [pc, #716]	; (1d3c0 <rpc_ip_event_handler+0x37c>)
   1d0f2:	bf88      	it	hi
   1d0f4:	222d      	movhi	r2, #45	; 0x2d
   1d0f6:	7008      	strb	r0, [r1, #0]
   1d0f8:	f04f 0000 	mov.w	r0, #0
   1d0fc:	bf9c      	itt	ls
   1d0fe:	4aaf      	ldrls	r2, [pc, #700]	; (1d3bc <rpc_ip_event_handler+0x378>)
   1d100:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   1d104:	4baf      	ldr	r3, [pc, #700]	; (1d3c4 <rpc_ip_event_handler+0x380>)
   1d106:	601a      	str	r2, [r3, #0]
   1d108:	b009      	add	sp, #36	; 0x24
   1d10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d10e:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 1d3d8 <rpc_ip_event_handler+0x394>
   1d112:	6807      	ldr	r7, [r0, #0]
   1d114:	f8da 2000 	ldr.w	r2, [sl]
   1d118:	2a01      	cmp	r2, #1
   1d11a:	d00b      	beq.n	1d134 <rpc_ip_event_handler+0xf0>
   1d11c:	b117      	cbz	r7, 1d124 <rpc_ip_event_handler+0xe0>
   1d11e:	4638      	mov	r0, r7
   1d120:	f7fe fca6 	bl	1ba70 <rpc_ip_client_data_free>
   1d124:	2000      	movs	r0, #0
   1d126:	b009      	add	sp, #36	; 0x24
   1d128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d12c:	6820      	ldr	r0, [r4, #0]
   1d12e:	2800      	cmp	r0, #0
   1d130:	d1f6      	bne.n	1d120 <rpc_ip_event_handler+0xdc>
   1d132:	e7f7      	b.n	1d124 <rpc_ip_event_handler+0xe0>
   1d134:	6942      	ldr	r2, [r0, #20]
   1d136:	2a00      	cmp	r2, #0
   1d138:	d045      	beq.n	1d1c6 <rpc_ip_event_handler+0x182>
   1d13a:	2a10      	cmp	r2, #16
   1d13c:	bf8e      	itee	hi
   1d13e:	222d      	movhi	r2, #45	; 0x2d
   1d140:	499e      	ldrls	r1, [pc, #632]	; (1d3bc <rpc_ip_event_handler+0x378>)
   1d142:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   1d146:	49a0      	ldr	r1, [pc, #640]	; (1d3c8 <rpc_ip_event_handler+0x384>)
   1d148:	600a      	str	r2, [r1, #0]
   1d14a:	2202      	movs	r2, #2
   1d14c:	f8ca 2000 	str.w	r2, [sl]
   1d150:	2f00      	cmp	r7, #0
   1d152:	d1e4      	bne.n	1d11e <rpc_ip_event_handler+0xda>
   1d154:	e7e6      	b.n	1d124 <rpc_ip_event_handler+0xe0>
   1d156:	f004 fd29 	bl	21bac <interface_from_internal_id_search>
   1d15a:	4606      	mov	r6, r0
   1d15c:	e786      	b.n	1d06c <rpc_ip_event_handler+0x28>
   1d15e:	f248 030c 	movw	r3, #32780	; 0x800c
   1d162:	429d      	cmp	r5, r3
   1d164:	f000 813c 	beq.w	1d3e0 <rpc_ip_event_handler+0x39c>
   1d168:	f240 80d5 	bls.w	1d316 <rpc_ip_event_handler+0x2d2>
   1d16c:	f249 0302 	movw	r3, #36866	; 0x9002
   1d170:	429d      	cmp	r5, r3
   1d172:	f000 811d 	beq.w	1d3b0 <rpc_ip_event_handler+0x36c>
   1d176:	f249 0303 	movw	r3, #36867	; 0x9003
   1d17a:	429d      	cmp	r5, r3
   1d17c:	f000 80f9 	beq.w	1d372 <rpc_ip_event_handler+0x32e>
   1d180:	f249 0301 	movw	r3, #36865	; 0x9001
   1d184:	429d      	cmp	r5, r3
   1d186:	d1d1      	bne.n	1d12c <rpc_ip_event_handler+0xe8>
   1d188:	683d      	ldr	r5, [r7, #0]
   1d18a:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   1d18e:	f000 8184 	beq.w	1d49a <rpc_ip_event_handler+0x456>
   1d192:	68a3      	ldr	r3, [r4, #8]
   1d194:	2b04      	cmp	r3, #4
   1d196:	f200 81af 	bhi.w	1d4f8 <rpc_ip_event_handler+0x4b4>
   1d19a:	2500      	movs	r5, #0
   1d19c:	462e      	mov	r6, r5
   1d19e:	6821      	ldr	r1, [r4, #0]
   1d1a0:	6862      	ldr	r2, [r4, #4]
   1d1a2:	e9cd 6506 	strd	r6, r5, [sp, #24]
   1d1a6:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1d1aa:	69f8      	ldr	r0, [r7, #28]
   1d1ac:	a904      	add	r1, sp, #16
   1d1ae:	6803      	ldr	r3, [r0, #0]
   1d1b0:	685b      	ldr	r3, [r3, #4]
   1d1b2:	4798      	blx	r3
   1d1b4:	3001      	adds	r0, #1
   1d1b6:	f000 818e 	beq.w	1d4d6 <rpc_ip_event_handler+0x492>
   1d1ba:	683b      	ldr	r3, [r7, #0]
   1d1bc:	2000      	movs	r0, #0
   1d1be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1d1c2:	603b      	str	r3, [r7, #0]
   1d1c4:	e7a0      	b.n	1d108 <rpc_ip_event_handler+0xc4>
   1d1c6:	6985      	ldr	r5, [r0, #24]
   1d1c8:	016b      	lsls	r3, r5, #5
   1d1ca:	4618      	mov	r0, r3
   1d1cc:	9303      	str	r3, [sp, #12]
   1d1ce:	f004 f837 	bl	21240 <nrf_malloc>
   1d1d2:	9002      	str	r0, [sp, #8]
   1d1d4:	2800      	cmp	r0, #0
   1d1d6:	d078      	beq.n	1d2ca <rpc_ip_event_handler+0x286>
   1d1d8:	00ee      	lsls	r6, r5, #3
   1d1da:	1970      	adds	r0, r6, r5
   1d1dc:	0080      	lsls	r0, r0, #2
   1d1de:	f004 f82f 	bl	21240 <nrf_malloc>
   1d1e2:	2800      	cmp	r0, #0
   1d1e4:	d073      	beq.n	1d2ce <rpc_ip_event_handler+0x28a>
   1d1e6:	2d00      	cmp	r5, #0
   1d1e8:	d074      	beq.n	1d2d4 <rpc_ip_event_handler+0x290>
   1d1ea:	3610      	adds	r6, #16
   1d1ec:	1983      	adds	r3, r0, r6
   1d1ee:	9301      	str	r3, [sp, #4]
   1d1f0:	9b02      	ldr	r3, [sp, #8]
   1d1f2:	2204      	movs	r2, #4
   1d1f4:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 1d3dc <rpc_ip_event_handler+0x398>
   1d1f8:	f100 0810 	add.w	r8, r0, #16
   1d1fc:	f103 0520 	add.w	r5, r3, #32
   1d200:	e013      	b.n	1d22a <rpc_ip_event_handler+0x1e6>
   1d202:	464a      	mov	r2, r9
   1d204:	f7ef fca2 	bl	cb4c <memcpy>
   1d208:	2100      	movs	r1, #0
   1d20a:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1d20e:	f108 0808 	add.w	r8, r8, #8
   1d212:	eb09 0206 	add.w	r2, r9, r6
   1d216:	f803 1009 	strb.w	r1, [r3, r9]
   1d21a:	9b01      	ldr	r3, [sp, #4]
   1d21c:	f845 5c04 	str.w	r5, [r5, #-4]
   1d220:	4598      	cmp	r8, r3
   1d222:	f105 0520 	add.w	r5, r5, #32
   1d226:	f000 8090 	beq.w	1d34a <rpc_ip_event_handler+0x306>
   1d22a:	58bb      	ldr	r3, [r7, r2]
   1d22c:	18b9      	adds	r1, r7, r2
   1d22e:	f845 3c20 	str.w	r3, [r5, #-32]
   1d232:	684b      	ldr	r3, [r1, #4]
   1d234:	f8db 0000 	ldr.w	r0, [fp]
   1d238:	2b02      	cmp	r3, #2
   1d23a:	bf14      	ite	ne
   1d23c:	2602      	movne	r6, #2
   1d23e:	260a      	moveq	r6, #10
   1d240:	4b62      	ldr	r3, [pc, #392]	; (1d3cc <rpc_ip_event_handler+0x388>)
   1d242:	e945 6007 	strd	r6, r0, [r5, #-28]
   1d246:	681b      	ldr	r3, [r3, #0]
   1d248:	f102 0614 	add.w	r6, r2, #20
   1d24c:	f845 3c14 	str.w	r3, [r5, #-20]
   1d250:	8a08      	ldrh	r0, [r1, #16]
   1d252:	f1a8 0310 	sub.w	r3, r8, #16
   1d256:	f845 0c10 	str.w	r0, [r5, #-16]
   1d25a:	f8b1 9012 	ldrh.w	r9, [r1, #18]
   1d25e:	f845 3c0c 	str.w	r3, [r5, #-12]
   1d262:	4b5b      	ldr	r3, [pc, #364]	; (1d3d0 <rpc_ip_event_handler+0x38c>)
   1d264:	2804      	cmp	r0, #4
   1d266:	eb07 0106 	add.w	r1, r7, r6
   1d26a:	881b      	ldrh	r3, [r3, #0]
   1d26c:	d01e      	beq.n	1d2ac <rpc_ip_event_handler+0x268>
   1d26e:	220a      	movs	r2, #10
   1d270:	f848 2c0c 	str.w	r2, [r8, #-12]
   1d274:	f04f 0224 	mov.w	r2, #36	; 0x24
   1d278:	f828 3c08 	strh.w	r3, [r8, #-8]
   1d27c:	f808 2c10 	strb.w	r2, [r8, #-16]
   1d280:	f855 2c10 	ldr.w	r2, [r5, #-16]
   1d284:	4640      	mov	r0, r8
   1d286:	f7ef fc61 	bl	cb4c <memcpy>
   1d28a:	f855 3c10 	ldr.w	r3, [r5, #-16]
   1d28e:	f109 0001 	add.w	r0, r9, #1
   1d292:	441e      	add	r6, r3
   1d294:	f003 ffd4 	bl	21240 <nrf_malloc>
   1d298:	19b9      	adds	r1, r7, r6
   1d29a:	eb09 0206 	add.w	r2, r9, r6
   1d29e:	f845 0c08 	str.w	r0, [r5, #-8]
   1d2a2:	2800      	cmp	r0, #0
   1d2a4:	d1ad      	bne.n	1d202 <rpc_ip_event_handler+0x1be>
   1d2a6:	f108 0808 	add.w	r8, r8, #8
   1d2aa:	e7b6      	b.n	1d21a <rpc_ip_event_handler+0x1d6>
   1d2ac:	2210      	movs	r2, #16
   1d2ae:	2002      	movs	r0, #2
   1d2b0:	f828 3c08 	strh.w	r3, [r8, #-8]
   1d2b4:	f848 0c0c 	str.w	r0, [r8, #-12]
   1d2b8:	f808 2c10 	strb.w	r2, [r8, #-16]
   1d2bc:	f855 2c10 	ldr.w	r2, [r5, #-16]
   1d2c0:	f1a8 0004 	sub.w	r0, r8, #4
   1d2c4:	f7ef fc42 	bl	cb4c <memcpy>
   1d2c8:	e7df      	b.n	1d28a <rpc_ip_event_handler+0x246>
   1d2ca:	f003 ffc3 	bl	21254 <nrf_free>
   1d2ce:	210c      	movs	r1, #12
   1d2d0:	4a3d      	ldr	r2, [pc, #244]	; (1d3c8 <rpc_ip_event_handler+0x384>)
   1d2d2:	6011      	str	r1, [r2, #0]
   1d2d4:	9b02      	ldr	r3, [sp, #8]
   1d2d6:	4a3f      	ldr	r2, [pc, #252]	; (1d3d4 <rpc_ip_event_handler+0x390>)
   1d2d8:	6827      	ldr	r7, [r4, #0]
   1d2da:	6013      	str	r3, [r2, #0]
   1d2dc:	e735      	b.n	1d14a <rpc_ip_event_handler+0x106>
   1d2de:	f248 0304 	movw	r3, #32772	; 0x8004
   1d2e2:	429d      	cmp	r5, r3
   1d2e4:	f000 808f 	beq.w	1d406 <rpc_ip_event_handler+0x3c2>
   1d2e8:	f248 0305 	movw	r3, #32773	; 0x8005
   1d2ec:	429d      	cmp	r5, r3
   1d2ee:	f47f af1d 	bne.w	1d12c <rpc_ip_event_handler+0xe8>
   1d2f2:	683b      	ldr	r3, [r7, #0]
   1d2f4:	b29b      	uxth	r3, r3
   1d2f6:	2b03      	cmp	r3, #3
   1d2f8:	f47f af14 	bne.w	1d124 <rpc_ip_event_handler+0xe0>
   1d2fc:	6963      	ldr	r3, [r4, #20]
   1d2fe:	2b00      	cmp	r3, #0
   1d300:	f000 80eb 	beq.w	1d4da <rpc_ip_event_handler+0x496>
   1d304:	2b10      	cmp	r3, #16
   1d306:	f200 80bd 	bhi.w	1d484 <rpc_ip_event_handler+0x440>
   1d30a:	4a2c      	ldr	r2, [pc, #176]	; (1d3bc <rpc_ip_event_handler+0x378>)
   1d30c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1d310:	607b      	str	r3, [r7, #4]
   1d312:	2000      	movs	r0, #0
   1d314:	e6f8      	b.n	1d108 <rpc_ip_event_handler+0xc4>
   1d316:	f248 0308 	movw	r3, #32776	; 0x8008
   1d31a:	429d      	cmp	r5, r3
   1d31c:	f000 8094 	beq.w	1d448 <rpc_ip_event_handler+0x404>
   1d320:	f248 0309 	movw	r3, #32777	; 0x8009
   1d324:	429d      	cmp	r5, r3
   1d326:	f47f af01 	bne.w	1d12c <rpc_ip_event_handler+0xe8>
   1d32a:	683b      	ldr	r3, [r7, #0]
   1d32c:	b29b      	uxth	r3, r3
   1d32e:	2b0d      	cmp	r3, #13
   1d330:	f47f aef8 	bne.w	1d124 <rpc_ip_event_handler+0xe0>
   1d334:	6960      	ldr	r0, [r4, #20]
   1d336:	2800      	cmp	r0, #0
   1d338:	f000 80d7 	beq.w	1d4ea <rpc_ip_event_handler+0x4a6>
   1d33c:	2810      	cmp	r0, #16
   1d33e:	f200 80a1 	bhi.w	1d484 <rpc_ip_event_handler+0x440>
   1d342:	4b1e      	ldr	r3, [pc, #120]	; (1d3bc <rpc_ip_event_handler+0x378>)
   1d344:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1d348:	e7e2      	b.n	1d310 <rpc_ip_event_handler+0x2cc>
   1d34a:	2100      	movs	r1, #0
   1d34c:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   1d350:	4403      	add	r3, r0
   1d352:	f843 1c04 	str.w	r1, [r3, #-4]
   1d356:	4603      	mov	r3, r0
   1d358:	e7bd      	b.n	1d2d6 <rpc_ip_event_handler+0x292>
   1d35a:	683b      	ldr	r3, [r7, #0]
   1d35c:	2b01      	cmp	r3, #1
   1d35e:	f47f aee1 	bne.w	1d124 <rpc_ip_event_handler+0xe0>
   1d362:	6960      	ldr	r0, [r4, #20]
   1d364:	2800      	cmp	r0, #0
   1d366:	d1e9      	bne.n	1d33c <rpc_ip_event_handler+0x2f8>
   1d368:	2302      	movs	r3, #2
   1d36a:	603b      	str	r3, [r7, #0]
   1d36c:	69a3      	ldr	r3, [r4, #24]
   1d36e:	61bb      	str	r3, [r7, #24]
   1d370:	e6ca      	b.n	1d108 <rpc_ip_event_handler+0xc4>
   1d372:	683b      	ldr	r3, [r7, #0]
   1d374:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1d378:	603b      	str	r3, [r7, #0]
   1d37a:	683b      	ldr	r3, [r7, #0]
   1d37c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1d380:	603b      	str	r3, [r7, #0]
   1d382:	683b      	ldr	r3, [r7, #0]
   1d384:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1d388:	603b      	str	r3, [r7, #0]
   1d38a:	683b      	ldr	r3, [r7, #0]
   1d38c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1d390:	603b      	str	r3, [r7, #0]
   1d392:	6923      	ldr	r3, [r4, #16]
   1d394:	2b6c      	cmp	r3, #108	; 0x6c
   1d396:	d077      	beq.n	1d488 <rpc_ip_event_handler+0x444>
   1d398:	2b10      	cmp	r3, #16
   1d39a:	bf8c      	ite	hi
   1d39c:	232d      	movhi	r3, #45	; 0x2d
   1d39e:	4a07      	ldrls	r2, [pc, #28]	; (1d3bc <rpc_ip_event_handler+0x378>)
   1d3a0:	f04f 0000 	mov.w	r0, #0
   1d3a4:	bf98      	it	ls
   1d3a6:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1d3aa:	607b      	str	r3, [r7, #4]
   1d3ac:	60bb      	str	r3, [r7, #8]
   1d3ae:	e6ab      	b.n	1d108 <rpc_ip_event_handler+0xc4>
   1d3b0:	683b      	ldr	r3, [r7, #0]
   1d3b2:	b29b      	uxth	r3, r3
   1d3b4:	2b07      	cmp	r3, #7
   1d3b6:	f47f aeb5 	bne.w	1d124 <rpc_ip_event_handler+0xe0>
   1d3ba:	e6fe      	b.n	1d1ba <rpc_ip_event_handler+0x176>
   1d3bc:	0002f608 	.word	0x0002f608
   1d3c0:	2002629b 	.word	0x2002629b
   1d3c4:	20021a0c 	.word	0x20021a0c
   1d3c8:	200219dc 	.word	0x200219dc
   1d3cc:	200219d4 	.word	0x200219d4
   1d3d0:	200242c8 	.word	0x200242c8
   1d3d4:	200219e4 	.word	0x200219e4
   1d3d8:	200219e0 	.word	0x200219e0
   1d3dc:	200219d8 	.word	0x200219d8
   1d3e0:	683b      	ldr	r3, [r7, #0]
   1d3e2:	b29b      	uxth	r3, r3
   1d3e4:	2b08      	cmp	r3, #8
   1d3e6:	f47f ae9d 	bne.w	1d124 <rpc_ip_event_handler+0xe0>
   1d3ea:	6963      	ldr	r3, [r4, #20]
   1d3ec:	2b00      	cmp	r3, #0
   1d3ee:	d189      	bne.n	1d304 <rpc_ip_event_handler+0x2c0>
   1d3f0:	4b5e      	ldr	r3, [pc, #376]	; (1d56c <rpc_ip_event_handler+0x528>)
   1d3f2:	2001      	movs	r0, #1
   1d3f4:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   1d3f8:	683b      	ldr	r3, [r7, #0]
   1d3fa:	0c1b      	lsrs	r3, r3, #16
   1d3fc:	041b      	lsls	r3, r3, #16
   1d3fe:	f043 0309 	orr.w	r3, r3, #9
   1d402:	603b      	str	r3, [r7, #0]
   1d404:	e680      	b.n	1d108 <rpc_ip_event_handler+0xc4>
   1d406:	683b      	ldr	r3, [r7, #0]
   1d408:	01db      	lsls	r3, r3, #7
   1d40a:	f57f ae8b 	bpl.w	1d124 <rpc_ip_event_handler+0xe0>
   1d40e:	6963      	ldr	r3, [r4, #20]
   1d410:	2b00      	cmp	r3, #0
   1d412:	f47f af77 	bne.w	1d304 <rpc_ip_event_handler+0x2c0>
   1d416:	6823      	ldr	r3, [r4, #0]
   1d418:	2b00      	cmp	r3, #0
   1d41a:	d071      	beq.n	1d500 <rpc_ip_event_handler+0x4bc>
   1d41c:	2001      	movs	r0, #1
   1d41e:	4b53      	ldr	r3, [pc, #332]	; (1d56c <rpc_ip_event_handler+0x528>)
   1d420:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   1d424:	683b      	ldr	r3, [r7, #0]
   1d426:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1d42a:	603b      	str	r3, [r7, #0]
   1d42c:	e66c      	b.n	1d108 <rpc_ip_event_handler+0xc4>
   1d42e:	683b      	ldr	r3, [r7, #0]
   1d430:	025a      	lsls	r2, r3, #9
   1d432:	f57f ae77 	bpl.w	1d124 <rpc_ip_event_handler+0xe0>
   1d436:	6960      	ldr	r0, [r4, #20]
   1d438:	2800      	cmp	r0, #0
   1d43a:	f47f af7f 	bne.w	1d33c <rpc_ip_event_handler+0x2f8>
   1d43e:	683b      	ldr	r3, [r7, #0]
   1d440:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1d444:	603b      	str	r3, [r7, #0]
   1d446:	e65f      	b.n	1d108 <rpc_ip_event_handler+0xc4>
   1d448:	683b      	ldr	r3, [r7, #0]
   1d44a:	b29b      	uxth	r3, r3
   1d44c:	2b06      	cmp	r3, #6
   1d44e:	f47f ae69 	bne.w	1d124 <rpc_ip_event_handler+0xe0>
   1d452:	6960      	ldr	r0, [r4, #20]
   1d454:	2800      	cmp	r0, #0
   1d456:	f47f af71 	bne.w	1d33c <rpc_ip_event_handler+0x2f8>
   1d45a:	683b      	ldr	r3, [r7, #0]
   1d45c:	0c1b      	lsrs	r3, r3, #16
   1d45e:	041b      	lsls	r3, r3, #16
   1d460:	f043 0307 	orr.w	r3, r3, #7
   1d464:	603b      	str	r3, [r7, #0]
   1d466:	e64f      	b.n	1d108 <rpc_ip_event_handler+0xc4>
   1d468:	683b      	ldr	r3, [r7, #0]
   1d46a:	0299      	lsls	r1, r3, #10
   1d46c:	f57f ae5a 	bpl.w	1d124 <rpc_ip_event_handler+0xe0>
   1d470:	6963      	ldr	r3, [r4, #20]
   1d472:	b33b      	cbz	r3, 1d4c4 <rpc_ip_event_handler+0x480>
   1d474:	2b6b      	cmp	r3, #107	; 0x6b
   1d476:	f47f ae2b 	bne.w	1d0d0 <rpc_ip_event_handler+0x8c>
   1d47a:	693b      	ldr	r3, [r7, #16]
   1d47c:	2b01      	cmp	r3, #1
   1d47e:	d041      	beq.n	1d504 <rpc_ip_event_handler+0x4c0>
   1d480:	230c      	movs	r3, #12
   1d482:	e62b      	b.n	1d0dc <rpc_ip_event_handler+0x98>
   1d484:	232d      	movs	r3, #45	; 0x2d
   1d486:	e743      	b.n	1d310 <rpc_ip_event_handler+0x2cc>
   1d488:	2239      	movs	r2, #57	; 0x39
   1d48a:	683b      	ldr	r3, [r7, #0]
   1d48c:	2000      	movs	r0, #0
   1d48e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   1d492:	603b      	str	r3, [r7, #0]
   1d494:	607a      	str	r2, [r7, #4]
   1d496:	60ba      	str	r2, [r7, #8]
   1d498:	e636      	b.n	1d108 <rpc_ip_event_handler+0xc4>
   1d49a:	6820      	ldr	r0, [r4, #0]
   1d49c:	f7fe fae8 	bl	1ba70 <rpc_ip_client_data_free>
   1d4a0:	4628      	mov	r0, r5
   1d4a2:	e631      	b.n	1d108 <rpc_ip_event_handler+0xc4>
   1d4a4:	683b      	ldr	r3, [r7, #0]
   1d4a6:	2000      	movs	r0, #0
   1d4a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1d4ac:	603b      	str	r3, [r7, #0]
   1d4ae:	683b      	ldr	r3, [r7, #0]
   1d4b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1d4b4:	603b      	str	r3, [r7, #0]
   1d4b6:	683b      	ldr	r3, [r7, #0]
   1d4b8:	0c1b      	lsrs	r3, r3, #16
   1d4ba:	041b      	lsls	r3, r3, #16
   1d4bc:	f043 0305 	orr.w	r3, r3, #5
   1d4c0:	603b      	str	r3, [r7, #0]
   1d4c2:	e621      	b.n	1d108 <rpc_ip_event_handler+0xc4>
   1d4c4:	683b      	ldr	r3, [r7, #0]
   1d4c6:	4a29      	ldr	r2, [pc, #164]	; (1d56c <rpc_ip_event_handler+0x528>)
   1d4c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1d4cc:	603b      	str	r3, [r7, #0]
   1d4ce:	2001      	movs	r0, #1
   1d4d0:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
   1d4d4:	e618      	b.n	1d108 <rpc_ip_event_handler+0xc4>
   1d4d6:	2002      	movs	r0, #2
   1d4d8:	e616      	b.n	1d108 <rpc_ip_event_handler+0xc4>
   1d4da:	683b      	ldr	r3, [r7, #0]
   1d4dc:	2000      	movs	r0, #0
   1d4de:	0c1b      	lsrs	r3, r3, #16
   1d4e0:	041b      	lsls	r3, r3, #16
   1d4e2:	f043 0304 	orr.w	r3, r3, #4
   1d4e6:	603b      	str	r3, [r7, #0]
   1d4e8:	e60e      	b.n	1d108 <rpc_ip_event_handler+0xc4>
   1d4ea:	683b      	ldr	r3, [r7, #0]
   1d4ec:	0c1b      	lsrs	r3, r3, #16
   1d4ee:	041b      	lsls	r3, r3, #16
   1d4f0:	f043 030e 	orr.w	r3, r3, #14
   1d4f4:	603b      	str	r3, [r7, #0]
   1d4f6:	e607      	b.n	1d108 <rpc_ip_event_handler+0xc4>
   1d4f8:	8a65      	ldrh	r5, [r4, #18]
   1d4fa:	b95d      	cbnz	r5, 1d514 <rpc_ip_event_handler+0x4d0>
   1d4fc:	462e      	mov	r6, r5
   1d4fe:	e64e      	b.n	1d19e <rpc_ip_event_handler+0x15a>
   1d500:	2000      	movs	r0, #0
   1d502:	e78f      	b.n	1d424 <rpc_ip_event_handler+0x3e0>
   1d504:	220c      	movs	r2, #12
   1d506:	683b      	ldr	r3, [r7, #0]
   1d508:	2000      	movs	r0, #0
   1d50a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   1d50e:	603b      	str	r3, [r7, #0]
   1d510:	607a      	str	r2, [r7, #4]
   1d512:	e5f9      	b.n	1d108 <rpc_ip_event_handler+0xc4>
   1d514:	2024      	movs	r0, #36	; 0x24
   1d516:	f003 fe93 	bl	21240 <nrf_malloc>
   1d51a:	4606      	mov	r6, r0
   1d51c:	2800      	cmp	r0, #0
   1d51e:	d0da      	beq.n	1d4d6 <rpc_ip_event_handler+0x492>
   1d520:	8a62      	ldrh	r2, [r4, #18]
   1d522:	2a10      	cmp	r2, #16
   1d524:	d009      	beq.n	1d53a <rpc_ip_event_handler+0x4f6>
   1d526:	2a04      	cmp	r2, #4
   1d528:	d013      	beq.n	1d552 <rpc_ip_event_handler+0x50e>
   1d52a:	6820      	ldr	r0, [r4, #0]
   1d52c:	f7fe faa0 	bl	1ba70 <rpc_ip_client_data_free>
   1d530:	4630      	mov	r0, r6
   1d532:	f003 fe8f 	bl	21254 <nrf_free>
   1d536:	2000      	movs	r0, #0
   1d538:	e5e6      	b.n	1d108 <rpc_ip_event_handler+0xc4>
   1d53a:	230a      	movs	r3, #10
   1d53c:	2524      	movs	r5, #36	; 0x24
   1d53e:	6043      	str	r3, [r0, #4]
   1d540:	7005      	strb	r5, [r0, #0]
   1d542:	8a23      	ldrh	r3, [r4, #16]
   1d544:	f104 0114 	add.w	r1, r4, #20
   1d548:	8103      	strh	r3, [r0, #8]
   1d54a:	3010      	adds	r0, #16
   1d54c:	f7ef fafe 	bl	cb4c <memcpy>
   1d550:	e625      	b.n	1d19e <rpc_ip_event_handler+0x15a>
   1d552:	2302      	movs	r3, #2
   1d554:	2510      	movs	r5, #16
   1d556:	6043      	str	r3, [r0, #4]
   1d558:	7005      	strb	r5, [r0, #0]
   1d55a:	8a23      	ldrh	r3, [r4, #16]
   1d55c:	f104 0114 	add.w	r1, r4, #20
   1d560:	8103      	strh	r3, [r0, #8]
   1d562:	300c      	adds	r0, #12
   1d564:	f7ef faf2 	bl	cb4c <memcpy>
   1d568:	e619      	b.n	1d19e <rpc_ip_event_handler+0x15a>
   1d56a:	bf00      	nop
   1d56c:	200219e8 	.word	0x200219e8

0001d570 <rpc_handle_ctrl_message>:
   1d570:	2902      	cmp	r1, #2
   1d572:	b510      	push	{r4, lr}
   1d574:	4604      	mov	r4, r0
   1d576:	d00c      	beq.n	1d592 <rpc_handle_ctrl_message+0x22>
   1d578:	2904      	cmp	r1, #4
   1d57a:	d008      	beq.n	1d58e <rpc_handle_ctrl_message+0x1e>
   1d57c:	2901      	cmp	r1, #1
   1d57e:	d006      	beq.n	1d58e <rpc_handle_ctrl_message+0x1e>
   1d580:	6880      	ldr	r0, [r0, #8]
   1d582:	b108      	cbz	r0, 1d588 <rpc_handle_ctrl_message+0x18>
   1d584:	f7fc fd32 	bl	19fec <rpc_transport_data_free>
   1d588:	4620      	mov	r0, r4
   1d58a:	f7fc fd2d 	bl	19fe8 <rpc_transport_rpc_free>
   1d58e:	2000      	movs	r0, #0
   1d590:	bd10      	pop	{r4, pc}
   1d592:	6880      	ldr	r0, [r0, #8]
   1d594:	2800      	cmp	r0, #0
   1d596:	d0fa      	beq.n	1d58e <rpc_handle_ctrl_message+0x1e>
   1d598:	f7fc fd28 	bl	19fec <rpc_transport_data_free>
   1d59c:	2000      	movs	r0, #0
   1d59e:	bd10      	pop	{r4, pc}

0001d5a0 <rpc_handle_data_message>:
   1d5a0:	4b23      	ldr	r3, [pc, #140]	; (1d630 <rpc_handle_data_message+0x90>)
   1d5a2:	6802      	ldr	r2, [r0, #0]
   1d5a4:	8819      	ldrh	r1, [r3, #0]
   1d5a6:	b292      	uxth	r2, r2
   1d5a8:	4291      	cmp	r1, r2
   1d5aa:	d027      	beq.n	1d5fc <rpc_handle_data_message+0x5c>
   1d5ac:	8a19      	ldrh	r1, [r3, #16]
   1d5ae:	4291      	cmp	r1, r2
   1d5b0:	d02a      	beq.n	1d608 <rpc_handle_data_message+0x68>
   1d5b2:	8c19      	ldrh	r1, [r3, #32]
   1d5b4:	4291      	cmp	r1, r2
   1d5b6:	d02b      	beq.n	1d610 <rpc_handle_data_message+0x70>
   1d5b8:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   1d5ba:	4291      	cmp	r1, r2
   1d5bc:	d02a      	beq.n	1d614 <rpc_handle_data_message+0x74>
   1d5be:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
   1d5c2:	4291      	cmp	r1, r2
   1d5c4:	d028      	beq.n	1d618 <rpc_handle_data_message+0x78>
   1d5c6:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
   1d5ca:	4291      	cmp	r1, r2
   1d5cc:	d026      	beq.n	1d61c <rpc_handle_data_message+0x7c>
   1d5ce:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
   1d5d2:	4291      	cmp	r1, r2
   1d5d4:	d026      	beq.n	1d624 <rpc_handle_data_message+0x84>
   1d5d6:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   1d5da:	4291      	cmp	r1, r2
   1d5dc:	d024      	beq.n	1d628 <rpc_handle_data_message+0x88>
   1d5de:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
   1d5e2:	4291      	cmp	r1, r2
   1d5e4:	d01c      	beq.n	1d620 <rpc_handle_data_message+0x80>
   1d5e6:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
   1d5ea:	4291      	cmp	r1, r2
   1d5ec:	d01e      	beq.n	1d62c <rpc_handle_data_message+0x8c>
   1d5ee:	6880      	ldr	r0, [r0, #8]
   1d5f0:	b160      	cbz	r0, 1d60c <rpc_handle_data_message+0x6c>
   1d5f2:	b510      	push	{r4, lr}
   1d5f4:	f7fc fcfa 	bl	19fec <rpc_transport_data_free>
   1d5f8:	2000      	movs	r0, #0
   1d5fa:	bd10      	pop	{r4, pc}
   1d5fc:	2200      	movs	r2, #0
   1d5fe:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1d602:	685a      	ldr	r2, [r3, #4]
   1d604:	68d9      	ldr	r1, [r3, #12]
   1d606:	4710      	bx	r2
   1d608:	2201      	movs	r2, #1
   1d60a:	e7f8      	b.n	1d5fe <rpc_handle_data_message+0x5e>
   1d60c:	2000      	movs	r0, #0
   1d60e:	4770      	bx	lr
   1d610:	2202      	movs	r2, #2
   1d612:	e7f4      	b.n	1d5fe <rpc_handle_data_message+0x5e>
   1d614:	2203      	movs	r2, #3
   1d616:	e7f2      	b.n	1d5fe <rpc_handle_data_message+0x5e>
   1d618:	2204      	movs	r2, #4
   1d61a:	e7f0      	b.n	1d5fe <rpc_handle_data_message+0x5e>
   1d61c:	2205      	movs	r2, #5
   1d61e:	e7ee      	b.n	1d5fe <rpc_handle_data_message+0x5e>
   1d620:	2208      	movs	r2, #8
   1d622:	e7ec      	b.n	1d5fe <rpc_handle_data_message+0x5e>
   1d624:	2206      	movs	r2, #6
   1d626:	e7ea      	b.n	1d5fe <rpc_handle_data_message+0x5e>
   1d628:	2207      	movs	r2, #7
   1d62a:	e7e8      	b.n	1d5fe <rpc_handle_data_message+0x5e>
   1d62c:	2209      	movs	r2, #9
   1d62e:	e7e6      	b.n	1d5fe <rpc_handle_data_message+0x5e>
   1d630:	20021a10 	.word	0x20021a10

0001d634 <rpc_framework_init>:
   1d634:	b508      	push	{r3, lr}
   1d636:	22a0      	movs	r2, #160	; 0xa0
   1d638:	2100      	movs	r1, #0
   1d63a:	4802      	ldr	r0, [pc, #8]	; (1d644 <rpc_framework_init+0x10>)
   1d63c:	f008 fedc 	bl	263f8 <memset>
   1d640:	2000      	movs	r0, #0
   1d642:	bd08      	pop	{r3, pc}
   1d644:	20021a10 	.word	0x20021a10

0001d648 <rpc_client_register>:
   1d648:	8803      	ldrh	r3, [r0, #0]
   1d64a:	2b00      	cmp	r3, #0
   1d64c:	d045      	beq.n	1d6da <rpc_client_register+0x92>
   1d64e:	6842      	ldr	r2, [r0, #4]
   1d650:	4601      	mov	r1, r0
   1d652:	2a00      	cmp	r2, #0
   1d654:	d050      	beq.n	1d6f8 <rpc_client_register+0xb0>
   1d656:	4a30      	ldr	r2, [pc, #192]	; (1d718 <rpc_client_register+0xd0>)
   1d658:	8810      	ldrh	r0, [r2, #0]
   1d65a:	4283      	cmp	r3, r0
   1d65c:	d03d      	beq.n	1d6da <rpc_client_register+0x92>
   1d65e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d662:	8a14      	ldrh	r4, [r2, #16]
   1d664:	42a3      	cmp	r3, r4
   1d666:	d035      	beq.n	1d6d4 <rpc_client_register+0x8c>
   1d668:	8c15      	ldrh	r5, [r2, #32]
   1d66a:	42ab      	cmp	r3, r5
   1d66c:	d032      	beq.n	1d6d4 <rpc_client_register+0x8c>
   1d66e:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   1d670:	42b3      	cmp	r3, r6
   1d672:	d02f      	beq.n	1d6d4 <rpc_client_register+0x8c>
   1d674:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   1d678:	42bb      	cmp	r3, r7
   1d67a:	d02b      	beq.n	1d6d4 <rpc_client_register+0x8c>
   1d67c:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   1d680:	4563      	cmp	r3, ip
   1d682:	d027      	beq.n	1d6d4 <rpc_client_register+0x8c>
   1d684:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   1d688:	4573      	cmp	r3, lr
   1d68a:	d023      	beq.n	1d6d4 <rpc_client_register+0x8c>
   1d68c:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   1d690:	4543      	cmp	r3, r8
   1d692:	d01f      	beq.n	1d6d4 <rpc_client_register+0x8c>
   1d694:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   1d698:	454b      	cmp	r3, r9
   1d69a:	d01b      	beq.n	1d6d4 <rpc_client_register+0x8c>
   1d69c:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   1d6a0:	4553      	cmp	r3, sl
   1d6a2:	d017      	beq.n	1d6d4 <rpc_client_register+0x8c>
   1d6a4:	b1e0      	cbz	r0, 1d6e0 <rpc_client_register+0x98>
   1d6a6:	b35c      	cbz	r4, 1d700 <rpc_client_register+0xb8>
   1d6a8:	b365      	cbz	r5, 1d704 <rpc_client_register+0xbc>
   1d6aa:	b36e      	cbz	r6, 1d708 <rpc_client_register+0xc0>
   1d6ac:	b377      	cbz	r7, 1d70c <rpc_client_register+0xc4>
   1d6ae:	f1bc 0f00 	cmp.w	ip, #0
   1d6b2:	d02d      	beq.n	1d710 <rpc_client_register+0xc8>
   1d6b4:	f1be 0f00 	cmp.w	lr, #0
   1d6b8:	d020      	beq.n	1d6fc <rpc_client_register+0xb4>
   1d6ba:	f1b8 0f00 	cmp.w	r8, #0
   1d6be:	d029      	beq.n	1d714 <rpc_client_register+0xcc>
   1d6c0:	f1b9 0f00 	cmp.w	r9, #0
   1d6c4:	d00b      	beq.n	1d6de <rpc_client_register+0x96>
   1d6c6:	2009      	movs	r0, #9
   1d6c8:	f1ba 0f00 	cmp.w	sl, #0
   1d6cc:	d008      	beq.n	1d6e0 <rpc_client_register+0x98>
   1d6ce:	2004      	movs	r0, #4
   1d6d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d6d4:	2007      	movs	r0, #7
   1d6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d6da:	2007      	movs	r0, #7
   1d6dc:	4770      	bx	lr
   1d6de:	2008      	movs	r0, #8
   1d6e0:	0100      	lsls	r0, r0, #4
   1d6e2:	5213      	strh	r3, [r2, r0]
   1d6e4:	684b      	ldr	r3, [r1, #4]
   1d6e6:	4402      	add	r2, r0
   1d6e8:	6053      	str	r3, [r2, #4]
   1d6ea:	688b      	ldr	r3, [r1, #8]
   1d6ec:	2000      	movs	r0, #0
   1d6ee:	6093      	str	r3, [r2, #8]
   1d6f0:	68cb      	ldr	r3, [r1, #12]
   1d6f2:	60d3      	str	r3, [r2, #12]
   1d6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d6f8:	200e      	movs	r0, #14
   1d6fa:	4770      	bx	lr
   1d6fc:	2006      	movs	r0, #6
   1d6fe:	e7ef      	b.n	1d6e0 <rpc_client_register+0x98>
   1d700:	2001      	movs	r0, #1
   1d702:	e7ed      	b.n	1d6e0 <rpc_client_register+0x98>
   1d704:	2002      	movs	r0, #2
   1d706:	e7eb      	b.n	1d6e0 <rpc_client_register+0x98>
   1d708:	2003      	movs	r0, #3
   1d70a:	e7e9      	b.n	1d6e0 <rpc_client_register+0x98>
   1d70c:	2004      	movs	r0, #4
   1d70e:	e7e7      	b.n	1d6e0 <rpc_client_register+0x98>
   1d710:	2005      	movs	r0, #5
   1d712:	e7e5      	b.n	1d6e0 <rpc_client_register+0x98>
   1d714:	2007      	movs	r0, #7
   1d716:	e7e3      	b.n	1d6e0 <rpc_client_register+0x98>
   1d718:	20021a10 	.word	0x20021a10

0001d71c <rpc_message_send>:
   1d71c:	b150      	cbz	r0, 1d734 <rpc_message_send+0x18>
   1d71e:	b159      	cbz	r1, 1d738 <rpc_message_send+0x1c>
   1d720:	684b      	ldr	r3, [r1, #4]
   1d722:	8008      	strh	r0, [r1, #0]
   1d724:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1d728:	f043 0302 	orr.w	r3, r3, #2
   1d72c:	604b      	str	r3, [r1, #4]
   1d72e:	4608      	mov	r0, r1
   1d730:	f7fc bc54 	b.w	19fdc <rpc_transport_send>
   1d734:	2007      	movs	r0, #7
   1d736:	4770      	bx	lr
   1d738:	200e      	movs	r0, #14
   1d73a:	4770      	bx	lr

0001d73c <rpc_message_alloc>:
   1d73c:	b342      	cbz	r2, 1d790 <rpc_message_alloc+0x54>
   1d73e:	b328      	cbz	r0, 1d78c <rpc_message_alloc+0x50>
   1d740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d742:	2300      	movs	r3, #0
   1d744:	4616      	mov	r6, r2
   1d746:	460c      	mov	r4, r1
   1d748:	4605      	mov	r5, r0
   1d74a:	6013      	str	r3, [r2, #0]
   1d74c:	b171      	cbz	r1, 1d76c <rpc_message_alloc+0x30>
   1d74e:	4608      	mov	r0, r1
   1d750:	f7fc fc48 	bl	19fe4 <rpc_transport_data_alloc>
   1d754:	4607      	mov	r7, r0
   1d756:	b1b8      	cbz	r0, 1d788 <rpc_message_alloc+0x4c>
   1d758:	f7fc fc42 	bl	19fe0 <rpc_transport_rpc_alloc>
   1d75c:	4603      	mov	r3, r0
   1d75e:	b180      	cbz	r0, 1d782 <rpc_message_alloc+0x46>
   1d760:	2000      	movs	r0, #0
   1d762:	60dc      	str	r4, [r3, #12]
   1d764:	609f      	str	r7, [r3, #8]
   1d766:	801d      	strh	r5, [r3, #0]
   1d768:	6033      	str	r3, [r6, #0]
   1d76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d76c:	f7fc fc38 	bl	19fe0 <rpc_transport_rpc_alloc>
   1d770:	4603      	mov	r3, r0
   1d772:	b148      	cbz	r0, 1d788 <rpc_message_alloc+0x4c>
   1d774:	4627      	mov	r7, r4
   1d776:	60dc      	str	r4, [r3, #12]
   1d778:	609f      	str	r7, [r3, #8]
   1d77a:	801d      	strh	r5, [r3, #0]
   1d77c:	2000      	movs	r0, #0
   1d77e:	6033      	str	r3, [r6, #0]
   1d780:	e7f3      	b.n	1d76a <rpc_message_alloc+0x2e>
   1d782:	4638      	mov	r0, r7
   1d784:	f7fc fc32 	bl	19fec <rpc_transport_data_free>
   1d788:	2004      	movs	r0, #4
   1d78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d78c:	2007      	movs	r0, #7
   1d78e:	4770      	bx	lr
   1d790:	200e      	movs	r0, #14
   1d792:	4770      	bx	lr

0001d794 <rpc_message_free>:
   1d794:	b130      	cbz	r0, 1d7a4 <rpc_message_free+0x10>
   1d796:	b139      	cbz	r1, 1d7a8 <rpc_message_free+0x14>
   1d798:	b508      	push	{r3, lr}
   1d79a:	4608      	mov	r0, r1
   1d79c:	f7fc fc24 	bl	19fe8 <rpc_transport_rpc_free>
   1d7a0:	2000      	movs	r0, #0
   1d7a2:	bd08      	pop	{r3, pc}
   1d7a4:	2007      	movs	r0, #7
   1d7a6:	4770      	bx	lr
   1d7a8:	200e      	movs	r0, #14
   1d7aa:	4770      	bx	lr

0001d7ac <rpc_message_data_free>:
   1d7ac:	b130      	cbz	r0, 1d7bc <rpc_message_data_free+0x10>
   1d7ae:	b139      	cbz	r1, 1d7c0 <rpc_message_data_free+0x14>
   1d7b0:	b508      	push	{r3, lr}
   1d7b2:	4608      	mov	r0, r1
   1d7b4:	f7fc fc1a 	bl	19fec <rpc_transport_data_free>
   1d7b8:	2000      	movs	r0, #0
   1d7ba:	bd08      	pop	{r3, pc}
   1d7bc:	2007      	movs	r0, #7
   1d7be:	4770      	bx	lr
   1d7c0:	200e      	movs	r0, #14
   1d7c2:	4770      	bx	lr

0001d7c4 <packet_free_cb>:
   1d7c4:	b510      	push	{r4, lr}
   1d7c6:	4604      	mov	r4, r0
   1d7c8:	b118      	cbz	r0, 1d7d2 <packet_free_cb+0xe>
   1d7ca:	6800      	ldr	r0, [r0, #0]
   1d7cc:	b108      	cbz	r0, 1d7d2 <packet_free_cb+0xe>
   1d7ce:	f002 ff53 	bl	20678 <rpc_gnss_client_data_free>
   1d7d2:	68a0      	ldr	r0, [r4, #8]
   1d7d4:	b118      	cbz	r0, 1d7de <packet_free_cb+0x1a>
   1d7d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d7da:	f003 bd3b 	b.w	21254 <nrf_free>
   1d7de:	bd10      	pop	{r4, pc}

0001d7e0 <rpc_gnss_event_handler>:
   1d7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d7e2:	4b64      	ldr	r3, [pc, #400]	; (1d974 <rpc_gnss_event_handler+0x194>)
   1d7e4:	4606      	mov	r6, r0
   1d7e6:	6800      	ldr	r0, [r0, #0]
   1d7e8:	881b      	ldrh	r3, [r3, #0]
   1d7ea:	6802      	ldr	r2, [r0, #0]
   1d7ec:	b085      	sub	sp, #20
   1d7ee:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   1d7f2:	460d      	mov	r5, r1
   1d7f4:	d037      	beq.n	1d866 <rpc_gnss_event_handler+0x86>
   1d7f6:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   1d7fa:	33ff      	adds	r3, #255	; 0xff
   1d7fc:	b29b      	uxth	r3, r3
   1d7fe:	2b02      	cmp	r3, #2
   1d800:	d811      	bhi.n	1d826 <rpc_gnss_event_handler+0x46>
   1d802:	4c5d      	ldr	r4, [pc, #372]	; (1d978 <rpc_gnss_event_handler+0x198>)
   1d804:	6823      	ldr	r3, [r4, #0]
   1d806:	075a      	lsls	r2, r3, #29
   1d808:	d410      	bmi.n	1d82c <rpc_gnss_event_handler+0x4c>
   1d80a:	6823      	ldr	r3, [r4, #0]
   1d80c:	079b      	lsls	r3, r3, #30
   1d80e:	d503      	bpl.n	1d818 <rpc_gnss_event_handler+0x38>
   1d810:	f244 0303 	movw	r3, #16387	; 0x4003
   1d814:	429d      	cmp	r5, r3
   1d816:	d009      	beq.n	1d82c <rpc_gnss_event_handler+0x4c>
   1d818:	6830      	ldr	r0, [r6, #0]
   1d81a:	b120      	cbz	r0, 1d826 <rpc_gnss_event_handler+0x46>
   1d81c:	f002 ff2c 	bl	20678 <rpc_gnss_client_data_free>
   1d820:	2200      	movs	r2, #0
   1d822:	4b56      	ldr	r3, [pc, #344]	; (1d97c <rpc_gnss_event_handler+0x19c>)
   1d824:	601a      	str	r2, [r3, #0]
   1d826:	2000      	movs	r0, #0
   1d828:	b005      	add	sp, #20
   1d82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d82c:	2002      	movs	r0, #2
   1d82e:	f003 fd07 	bl	21240 <nrf_malloc>
   1d832:	4607      	mov	r7, r0
   1d834:	2800      	cmp	r0, #0
   1d836:	f000 8094 	beq.w	1d962 <rpc_gnss_event_handler+0x182>
   1d83a:	2302      	movs	r3, #2
   1d83c:	8005      	strh	r5, [r0, #0]
   1d83e:	6831      	ldr	r1, [r6, #0]
   1d840:	6872      	ldr	r2, [r6, #4]
   1d842:	484f      	ldr	r0, [pc, #316]	; (1d980 <rpc_gnss_event_handler+0x1a0>)
   1d844:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   1d848:	6800      	ldr	r0, [r0, #0]
   1d84a:	9303      	str	r3, [sp, #12]
   1d84c:	6803      	ldr	r3, [r0, #0]
   1d84e:	4669      	mov	r1, sp
   1d850:	685b      	ldr	r3, [r3, #4]
   1d852:	4798      	blx	r3
   1d854:	3001      	adds	r0, #1
   1d856:	d071      	beq.n	1d93c <rpc_gnss_event_handler+0x15c>
   1d858:	2000      	movs	r0, #0
   1d85a:	6823      	ldr	r3, [r4, #0]
   1d85c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1d860:	6023      	str	r3, [r4, #0]
   1d862:	b005      	add	sp, #20
   1d864:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d866:	4c44      	ldr	r4, [pc, #272]	; (1d978 <rpc_gnss_event_handler+0x198>)
   1d868:	4f44      	ldr	r7, [pc, #272]	; (1d97c <rpc_gnss_event_handler+0x19c>)
   1d86a:	6823      	ldr	r3, [r4, #0]
   1d86c:	6038      	str	r0, [r7, #0]
   1d86e:	01d9      	lsls	r1, r3, #7
   1d870:	d523      	bpl.n	1d8ba <rpc_gnss_event_handler+0xda>
   1d872:	f242 1302 	movw	r3, #8450	; 0x2102
   1d876:	429d      	cmp	r5, r3
   1d878:	d11f      	bne.n	1d8ba <rpc_gnss_event_handler+0xda>
   1d87a:	6843      	ldr	r3, [r0, #4]
   1d87c:	b91b      	cbnz	r3, 1d886 <rpc_gnss_event_handler+0xa6>
   1d87e:	6823      	ldr	r3, [r4, #0]
   1d880:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1d884:	6023      	str	r3, [r4, #0]
   1d886:	6823      	ldr	r3, [r4, #0]
   1d888:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1d88c:	6023      	str	r3, [r4, #0]
   1d88e:	6823      	ldr	r3, [r4, #0]
   1d890:	025a      	lsls	r2, r3, #9
   1d892:	d430      	bmi.n	1d8f6 <rpc_gnss_event_handler+0x116>
   1d894:	f242 0305 	movw	r3, #8197	; 0x2005
   1d898:	429d      	cmp	r5, r3
   1d89a:	d12c      	bne.n	1d8f6 <rpc_gnss_event_handler+0x116>
   1d89c:	6823      	ldr	r3, [r4, #0]
   1d89e:	0299      	lsls	r1, r3, #10
   1d8a0:	d529      	bpl.n	1d8f6 <rpc_gnss_event_handler+0x116>
   1d8a2:	6843      	ldr	r3, [r0, #4]
   1d8a4:	2b00      	cmp	r3, #0
   1d8a6:	d157      	bne.n	1d958 <rpc_gnss_event_handler+0x178>
   1d8a8:	6823      	ldr	r3, [r4, #0]
   1d8aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1d8ae:	6023      	str	r3, [r4, #0]
   1d8b0:	6823      	ldr	r3, [r4, #0]
   1d8b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1d8b6:	6023      	str	r3, [r4, #0]
   1d8b8:	e01d      	b.n	1d8f6 <rpc_gnss_event_handler+0x116>
   1d8ba:	6823      	ldr	r3, [r4, #0]
   1d8bc:	025b      	lsls	r3, r3, #9
   1d8be:	d50e      	bpl.n	1d8de <rpc_gnss_event_handler+0xfe>
   1d8c0:	f242 1303 	movw	r3, #8451	; 0x2103
   1d8c4:	429d      	cmp	r5, r3
   1d8c6:	d10a      	bne.n	1d8de <rpc_gnss_event_handler+0xfe>
   1d8c8:	6843      	ldr	r3, [r0, #4]
   1d8ca:	b91b      	cbnz	r3, 1d8d4 <rpc_gnss_event_handler+0xf4>
   1d8cc:	6823      	ldr	r3, [r4, #0]
   1d8ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1d8d2:	6023      	str	r3, [r4, #0]
   1d8d4:	6823      	ldr	r3, [r4, #0]
   1d8d6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1d8da:	6023      	str	r3, [r4, #0]
   1d8dc:	e00b      	b.n	1d8f6 <rpc_gnss_event_handler+0x116>
   1d8de:	f242 0301 	movw	r3, #8193	; 0x2001
   1d8e2:	429d      	cmp	r5, r3
   1d8e4:	d10c      	bne.n	1d900 <rpc_gnss_event_handler+0x120>
   1d8e6:	6843      	ldr	r3, [r0, #4]
   1d8e8:	b92b      	cbnz	r3, 1d8f6 <rpc_gnss_event_handler+0x116>
   1d8ea:	6823      	ldr	r3, [r4, #0]
   1d8ec:	0c1b      	lsrs	r3, r3, #16
   1d8ee:	041b      	lsls	r3, r3, #16
   1d8f0:	f043 0302 	orr.w	r3, r3, #2
   1d8f4:	6023      	str	r3, [r4, #0]
   1d8f6:	f002 febf 	bl	20678 <rpc_gnss_client_data_free>
   1d8fa:	2300      	movs	r3, #0
   1d8fc:	603b      	str	r3, [r7, #0]
   1d8fe:	e77a      	b.n	1d7f6 <rpc_gnss_event_handler+0x16>
   1d900:	f242 0304 	movw	r3, #8196	; 0x2004
   1d904:	429d      	cmp	r5, r3
   1d906:	d1c5      	bne.n	1d894 <rpc_gnss_event_handler+0xb4>
   1d908:	6843      	ldr	r3, [r0, #4]
   1d90a:	b993      	cbnz	r3, 1d932 <rpc_gnss_event_handler+0x152>
   1d90c:	6823      	ldr	r3, [r4, #0]
   1d90e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1d912:	6023      	str	r3, [r4, #0]
   1d914:	6823      	ldr	r3, [r4, #0]
   1d916:	b29b      	uxth	r3, r3
   1d918:	2b03      	cmp	r3, #3
   1d91a:	6823      	ldr	r3, [r4, #0]
   1d91c:	d016      	beq.n	1d94c <rpc_gnss_event_handler+0x16c>
   1d91e:	b29b      	uxth	r3, r3
   1d920:	2b04      	cmp	r3, #4
   1d922:	d1d7      	bne.n	1d8d4 <rpc_gnss_event_handler+0xf4>
   1d924:	6823      	ldr	r3, [r4, #0]
   1d926:	0c1b      	lsrs	r3, r3, #16
   1d928:	041b      	lsls	r3, r3, #16
   1d92a:	f043 0302 	orr.w	r3, r3, #2
   1d92e:	6023      	str	r3, [r4, #0]
   1d930:	e7d0      	b.n	1d8d4 <rpc_gnss_event_handler+0xf4>
   1d932:	6823      	ldr	r3, [r4, #0]
   1d934:	b29b      	uxth	r3, r3
   1d936:	2b03      	cmp	r3, #3
   1d938:	d1cc      	bne.n	1d8d4 <rpc_gnss_event_handler+0xf4>
   1d93a:	e7f3      	b.n	1d924 <rpc_gnss_event_handler+0x144>
   1d93c:	4638      	mov	r0, r7
   1d93e:	f003 fc89 	bl	21254 <nrf_free>
   1d942:	6830      	ldr	r0, [r6, #0]
   1d944:	2800      	cmp	r0, #0
   1d946:	f47f af69 	bne.w	1d81c <rpc_gnss_event_handler+0x3c>
   1d94a:	e76c      	b.n	1d826 <rpc_gnss_event_handler+0x46>
   1d94c:	0c1b      	lsrs	r3, r3, #16
   1d94e:	041b      	lsls	r3, r3, #16
   1d950:	f043 0304 	orr.w	r3, r3, #4
   1d954:	6023      	str	r3, [r4, #0]
   1d956:	e7bd      	b.n	1d8d4 <rpc_gnss_event_handler+0xf4>
   1d958:	6823      	ldr	r3, [r4, #0]
   1d95a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1d95e:	6023      	str	r3, [r4, #0]
   1d960:	e7c9      	b.n	1d8f6 <rpc_gnss_event_handler+0x116>
   1d962:	6830      	ldr	r0, [r6, #0]
   1d964:	2800      	cmp	r0, #0
   1d966:	f43f af5e 	beq.w	1d826 <rpc_gnss_event_handler+0x46>
   1d96a:	f002 fe85 	bl	20678 <rpc_gnss_client_data_free>
   1d96e:	4b03      	ldr	r3, [pc, #12]	; (1d97c <rpc_gnss_event_handler+0x19c>)
   1d970:	601f      	str	r7, [r3, #0]
   1d972:	e758      	b.n	1d826 <rpc_gnss_event_handler+0x46>
   1d974:	200242ca 	.word	0x200242ca
   1d978:	20021ab0 	.word	0x20021ab0
   1d97c:	20021ab4 	.word	0x20021ab4
   1d980:	20021ab8 	.word	0x20021ab8

0001d984 <gnss_interface_write>:
   1d984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d988:	4a74      	ldr	r2, [pc, #464]	; (1db5c <gnss_interface_write+0x1d8>)
   1d98a:	b09f      	sub	sp, #124	; 0x7c
   1d98c:	4290      	cmp	r0, r2
   1d98e:	9d26      	ldr	r5, [sp, #152]	; 0x98
   1d990:	f040 80d7 	bne.w	1db42 <gnss_interface_write+0x1be>
   1d994:	2900      	cmp	r1, #0
   1d996:	f000 80c6 	beq.w	1db26 <gnss_interface_write+0x1a2>
   1d99a:	2d00      	cmp	r5, #0
   1d99c:	f000 80c3 	beq.w	1db26 <gnss_interface_write+0x1a2>
   1d9a0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   1d9a2:	2a02      	cmp	r2, #2
   1d9a4:	f040 80bf 	bne.w	1db26 <gnss_interface_write+0x1a2>
   1d9a8:	4c6d      	ldr	r4, [pc, #436]	; (1db60 <gnss_interface_write+0x1dc>)
   1d9aa:	6822      	ldr	r2, [r4, #0]
   1d9ac:	b292      	uxth	r2, r2
   1d9ae:	2a02      	cmp	r2, #2
   1d9b0:	d004      	beq.n	1d9bc <gnss_interface_write+0x38>
   1d9b2:	6822      	ldr	r2, [r4, #0]
   1d9b4:	b292      	uxth	r2, r2
   1d9b6:	2a04      	cmp	r2, #4
   1d9b8:	f040 80bd 	bne.w	1db36 <gnss_interface_write+0x1b2>
   1d9bc:	2b00      	cmp	r3, #0
   1d9be:	f040 80c6 	bne.w	1db4e <gnss_interface_write+0x1ca>
   1d9c2:	6822      	ldr	r2, [r4, #0]
   1d9c4:	0390      	lsls	r0, r2, #14
   1d9c6:	d512      	bpl.n	1d9ee <gnss_interface_write+0x6a>
   1d9c8:	6822      	ldr	r2, [r4, #0]
   1d9ca:	882b      	ldrh	r3, [r5, #0]
   1d9cc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   1d9d0:	6022      	str	r2, [r4, #0]
   1d9d2:	6822      	ldr	r2, [r4, #0]
   1d9d4:	3b01      	subs	r3, #1
   1d9d6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   1d9da:	6022      	str	r2, [r4, #0]
   1d9dc:	2b07      	cmp	r3, #7
   1d9de:	f200 80a2 	bhi.w	1db26 <gnss_interface_write+0x1a2>
   1d9e2:	e8df f003 	tbb	[pc, r3]
   1d9e6:	7d82      	.short	0x7d82
   1d9e8:	646e7378 	.word	0x646e7378
   1d9ec:	0869      	.short	0x0869
   1d9ee:	2000      	movs	r0, #0
   1d9f0:	b01f      	add	sp, #124	; 0x7c
   1d9f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d9f6:	4608      	mov	r0, r1
   1d9f8:	a902      	add	r1, sp, #8
   1d9fa:	f002 fdf1 	bl	205e0 <rpc_gnss_serialize_integrity>
   1d9fe:	2172      	movs	r1, #114	; 0x72
   1da00:	4668      	mov	r0, sp
   1da02:	f002 fe07 	bl	20614 <rpc_gnss_client_request_alloc>
   1da06:	4605      	mov	r5, r0
   1da08:	9800      	ldr	r0, [sp, #0]
   1da0a:	2d00      	cmp	r5, #0
   1da0c:	d172      	bne.n	1daf4 <gnss_interface_write+0x170>
   1da0e:	2800      	cmp	r0, #0
   1da10:	d077      	beq.n	1db02 <gnss_interface_write+0x17e>
   1da12:	f241 0605 	movw	r6, #4101	; 0x1005
   1da16:	f04f 0c49 	mov.w	ip, #73	; 0x49
   1da1a:	2272      	movs	r2, #114	; 0x72
   1da1c:	f04f 0e76 	mov.w	lr, #118	; 0x76
   1da20:	f04f 0943 	mov.w	r9, #67	; 0x43
   1da24:	f04f 0854 	mov.w	r8, #84	; 0x54
   1da28:	4f4e      	ldr	r7, [pc, #312]	; (1db64 <gnss_interface_write+0x1e0>)
   1da2a:	a91e      	add	r1, sp, #120	; 0x78
   1da2c:	883b      	ldrh	r3, [r7, #0]
   1da2e:	f880 c00f 	strb.w	ip, [r0, #15]
   1da32:	3301      	adds	r3, #1
   1da34:	b29b      	uxth	r3, r3
   1da36:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   1da3a:	f841 cd74 	str.w	ip, [r1, #-116]!
   1da3e:	7145      	strb	r5, [r0, #5]
   1da40:	7185      	strb	r5, [r0, #6]
   1da42:	71c5      	strb	r5, [r0, #7]
   1da44:	7205      	strb	r5, [r0, #8]
   1da46:	7245      	strb	r5, [r0, #9]
   1da48:	7285      	strb	r5, [r0, #10]
   1da4a:	72c5      	strb	r5, [r0, #11]
   1da4c:	7102      	strb	r2, [r0, #4]
   1da4e:	f880 900c 	strb.w	r9, [r0, #12]
   1da52:	f880 800d 	strb.w	r8, [r0, #13]
   1da56:	f880 e00e 	strb.w	lr, [r0, #14]
   1da5a:	6800      	ldr	r0, [r0, #0]
   1da5c:	803b      	strh	r3, [r7, #0]
   1da5e:	f7ef f875 	bl	cb4c <memcpy>
   1da62:	4b41      	ldr	r3, [pc, #260]	; (1db68 <gnss_interface_write+0x1e4>)
   1da64:	4631      	mov	r1, r6
   1da66:	9800      	ldr	r0, [sp, #0]
   1da68:	601d      	str	r5, [r3, #0]
   1da6a:	f002 fde7 	bl	2063c <rpc_gnss_client_request_send>
   1da6e:	2800      	cmp	r0, #0
   1da70:	d14e      	bne.n	1db10 <gnss_interface_write+0x18c>
   1da72:	6823      	ldr	r3, [r4, #0]
   1da74:	0299      	lsls	r1, r3, #10
   1da76:	d50b      	bpl.n	1da90 <gnss_interface_write+0x10c>
   1da78:	4e3c      	ldr	r6, [pc, #240]	; (1db6c <gnss_interface_write+0x1e8>)
   1da7a:	4d38      	ldr	r5, [pc, #224]	; (1db5c <gnss_interface_write+0x1d8>)
   1da7c:	e000      	b.n	1da80 <gnss_interface_write+0xfc>
   1da7e:	b978      	cbnz	r0, 1daa0 <gnss_interface_write+0x11c>
   1da80:	4631      	mov	r1, r6
   1da82:	4628      	mov	r0, r5
   1da84:	f7f8 ff8a 	bl	1699c <bsd_os_timedwait>
   1da88:	6823      	ldr	r3, [r4, #0]
   1da8a:	029a      	lsls	r2, r3, #10
   1da8c:	d4f7      	bmi.n	1da7e <gnss_interface_write+0xfa>
   1da8e:	b938      	cbnz	r0, 1daa0 <gnss_interface_write+0x11c>
   1da90:	6823      	ldr	r3, [r4, #0]
   1da92:	039b      	lsls	r3, r3, #14
   1da94:	d4ab      	bmi.n	1d9ee <gnss_interface_write+0x6a>
   1da96:	2005      	movs	r0, #5
   1da98:	6823      	ldr	r3, [r4, #0]
   1da9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1da9e:	6023      	str	r3, [r4, #0]
   1daa0:	f7f9 f834 	bl	16b0c <bsd_os_errno_set>
   1daa4:	f04f 30ff 	mov.w	r0, #4294967295
   1daa8:	b01f      	add	sp, #124	; 0x7c
   1daaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1daae:	4608      	mov	r0, r1
   1dab0:	a902      	add	r1, sp, #8
   1dab2:	f002 fd4d 	bl	20550 <rpc_gnss_serialize_time_and_sv_tow>
   1dab6:	e7a2      	b.n	1d9fe <gnss_interface_write+0x7a>
   1dab8:	4608      	mov	r0, r1
   1daba:	a902      	add	r1, sp, #8
   1dabc:	f002 fd70 	bl	205a0 <rpc_gnss_serialize_location>
   1dac0:	e79d      	b.n	1d9fe <gnss_interface_write+0x7a>
   1dac2:	4608      	mov	r0, r1
   1dac4:	a902      	add	r1, sp, #8
   1dac6:	f002 fd29 	bl	2051c <rpc_gnss_serialize_nequick>
   1daca:	e798      	b.n	1d9fe <gnss_interface_write+0x7a>
   1dacc:	4608      	mov	r0, r1
   1dace:	a902      	add	r1, sp, #8
   1dad0:	f002 fd00 	bl	204d4 <rpc_gnss_serialize_klob>
   1dad4:	e793      	b.n	1d9fe <gnss_interface_write+0x7a>
   1dad6:	4608      	mov	r0, r1
   1dad8:	a902      	add	r1, sp, #8
   1dada:	f002 fcc9 	bl	20470 <rpc_gnss_serialize_alm>
   1dade:	e78e      	b.n	1d9fe <gnss_interface_write+0x7a>
   1dae0:	4608      	mov	r0, r1
   1dae2:	a902      	add	r1, sp, #8
   1dae4:	f002 fc72 	bl	203cc <rpc_gnss_serialize_ephe>
   1dae8:	e789      	b.n	1d9fe <gnss_interface_write+0x7a>
   1daea:	4608      	mov	r0, r1
   1daec:	a902      	add	r1, sp, #8
   1daee:	f002 fc4b 	bl	20388 <rpc_gnss_serialize_utc>
   1daf2:	e784      	b.n	1d9fe <gnss_interface_write+0x7a>
   1daf4:	b128      	cbz	r0, 1db02 <gnss_interface_write+0x17e>
   1daf6:	6803      	ldr	r3, [r0, #0]
   1daf8:	b11b      	cbz	r3, 1db02 <gnss_interface_write+0x17e>
   1dafa:	4618      	mov	r0, r3
   1dafc:	f002 fdbc 	bl	20678 <rpc_gnss_client_data_free>
   1db00:	9800      	ldr	r0, [sp, #0]
   1db02:	f002 fdb1 	bl	20668 <rpc_gnss_client_message_free>
   1db06:	2023      	movs	r0, #35	; 0x23
   1db08:	f7f9 f800 	bl	16b0c <bsd_os_errno_set>
   1db0c:	f04f 30ff 	mov.w	r0, #4294967295
   1db10:	6823      	ldr	r3, [r4, #0]
   1db12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1db16:	6023      	str	r3, [r4, #0]
   1db18:	6823      	ldr	r3, [r4, #0]
   1db1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1db1e:	6023      	str	r3, [r4, #0]
   1db20:	b01f      	add	sp, #124	; 0x7c
   1db22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1db26:	2016      	movs	r0, #22
   1db28:	f7f8 fff0 	bl	16b0c <bsd_os_errno_set>
   1db2c:	f04f 30ff 	mov.w	r0, #4294967295
   1db30:	b01f      	add	sp, #124	; 0x7c
   1db32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1db36:	2039      	movs	r0, #57	; 0x39
   1db38:	f7f8 ffe8 	bl	16b0c <bsd_os_errno_set>
   1db3c:	f04f 30ff 	mov.w	r0, #4294967295
   1db40:	e756      	b.n	1d9f0 <gnss_interface_write+0x6c>
   1db42:	2009      	movs	r0, #9
   1db44:	f7f8 ffe2 	bl	16b0c <bsd_os_errno_set>
   1db48:	f04f 30ff 	mov.w	r0, #4294967295
   1db4c:	e750      	b.n	1d9f0 <gnss_interface_write+0x6c>
   1db4e:	202d      	movs	r0, #45	; 0x2d
   1db50:	f7f8 ffdc 	bl	16b0c <bsd_os_errno_set>
   1db54:	f04f 30ff 	mov.w	r0, #4294967295
   1db58:	e74a      	b.n	1d9f0 <gnss_interface_write+0x6c>
   1db5a:	bf00      	nop
   1db5c:	49765443 	.word	0x49765443
   1db60:	20021ab0 	.word	0x20021ab0
   1db64:	200242ca 	.word	0x200242ca
   1db68:	20021ab4 	.word	0x20021ab4
   1db6c:	200204c4 	.word	0x200204c4

0001db70 <gnss_interface_read>:
   1db70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db74:	4c55      	ldr	r4, [pc, #340]	; (1dccc <gnss_interface_read+0x15c>)
   1db76:	b0b7      	sub	sp, #220	; 0xdc
   1db78:	42a0      	cmp	r0, r4
   1db7a:	f040 81fa 	bne.w	1df72 <gnss_interface_read+0x402>
   1db7e:	460e      	mov	r6, r1
   1db80:	2900      	cmp	r1, #0
   1db82:	f000 81f0 	beq.w	1df66 <gnss_interface_read+0x3f6>
   1db86:	2ad7      	cmp	r2, #215	; 0xd7
   1db88:	f240 81ed 	bls.w	1df66 <gnss_interface_read+0x3f6>
   1db8c:	4d50      	ldr	r5, [pc, #320]	; (1dcd0 <gnss_interface_read+0x160>)
   1db8e:	469a      	mov	sl, r3
   1db90:	682b      	ldr	r3, [r5, #0]
   1db92:	b29b      	uxth	r3, r3
   1db94:	2b04      	cmp	r3, #4
   1db96:	d004      	beq.n	1dba2 <gnss_interface_read+0x32>
   1db98:	682b      	ldr	r3, [r5, #0]
   1db9a:	b29b      	uxth	r3, r3
   1db9c:	2b02      	cmp	r3, #2
   1db9e:	f040 81dc 	bne.w	1df5a <gnss_interface_read+0x3ea>
   1dba2:	f1ba 0f00 	cmp.w	sl, #0
   1dba6:	d178      	bne.n	1dc9a <gnss_interface_read+0x12a>
   1dba8:	2102      	movs	r1, #2
   1dbaa:	20b6      	movs	r0, #182	; 0xb6
   1dbac:	2400      	movs	r4, #0
   1dbae:	682b      	ldr	r3, [r5, #0]
   1dbb0:	f10d 020e 	add.w	r2, sp, #14
   1dbb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1dbb8:	602b      	str	r3, [r5, #0]
   1dbba:	ab08      	add	r3, sp, #32
   1dbbc:	9304      	str	r3, [sp, #16]
   1dbbe:	f8df b118 	ldr.w	fp, [pc, #280]	; 1dcd8 <gnss_interface_read+0x168>
   1dbc2:	ea0a 0301 	and.w	r3, sl, r1
   1dbc6:	4f43      	ldr	r7, [pc, #268]	; (1dcd4 <gnss_interface_read+0x164>)
   1dbc8:	f8df 9110 	ldr.w	r9, [pc, #272]	; 1dcdc <gnss_interface_read+0x16c>
   1dbcc:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1dccc <gnss_interface_read+0x15c>
   1dbd0:	9005      	str	r0, [sp, #20]
   1dbd2:	9107      	str	r1, [sp, #28]
   1dbd4:	9206      	str	r2, [sp, #24]
   1dbd6:	9301      	str	r3, [sp, #4]
   1dbd8:	f8db 0000 	ldr.w	r0, [fp]
   1dbdc:	4652      	mov	r2, sl
   1dbde:	6803      	ldr	r3, [r0, #0]
   1dbe0:	a904      	add	r1, sp, #16
   1dbe2:	689b      	ldr	r3, [r3, #8]
   1dbe4:	4798      	blx	r3
   1dbe6:	2800      	cmp	r0, #0
   1dbe8:	da2a      	bge.n	1dc40 <gnss_interface_read+0xd0>
   1dbea:	9b01      	ldr	r3, [sp, #4]
   1dbec:	b15b      	cbz	r3, 1dc06 <gnss_interface_read+0x96>
   1dbee:	1c42      	adds	r2, r0, #1
   1dbf0:	4603      	mov	r3, r0
   1dbf2:	d125      	bne.n	1dc40 <gnss_interface_read+0xd0>
   1dbf4:	b9dc      	cbnz	r4, 1dc2e <gnss_interface_read+0xbe>
   1dbf6:	2023      	movs	r0, #35	; 0x23
   1dbf8:	461c      	mov	r4, r3
   1dbfa:	f7f8 ff87 	bl	16b0c <bsd_os_errno_set>
   1dbfe:	4620      	mov	r0, r4
   1dc00:	b037      	add	sp, #220	; 0xdc
   1dc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc06:	682a      	ldr	r2, [r5, #0]
   1dc08:	783b      	ldrb	r3, [r7, #0]
   1dc0a:	03d1      	lsls	r1, r2, #15
   1dc0c:	d40c      	bmi.n	1dc28 <gnss_interface_read+0xb8>
   1dc0e:	b95c      	cbnz	r4, 1dc28 <gnss_interface_read+0xb8>
   1dc10:	b163      	cbz	r3, 1dc2c <gnss_interface_read+0xbc>
   1dc12:	4649      	mov	r1, r9
   1dc14:	4640      	mov	r0, r8
   1dc16:	f7f8 fec1 	bl	1699c <bsd_os_timedwait>
   1dc1a:	682b      	ldr	r3, [r5, #0]
   1dc1c:	03db      	lsls	r3, r3, #15
   1dc1e:	d437      	bmi.n	1dc90 <gnss_interface_read+0x120>
   1dc20:	783b      	ldrb	r3, [r7, #0]
   1dc22:	2800      	cmp	r0, #0
   1dc24:	d0f4      	beq.n	1dc10 <gnss_interface_read+0xa0>
   1dc26:	4604      	mov	r4, r0
   1dc28:	2b00      	cmp	r3, #0
   1dc2a:	d1d5      	bne.n	1dbd8 <gnss_interface_read+0x68>
   1dc2c:	2470      	movs	r4, #112	; 0x70
   1dc2e:	4620      	mov	r0, r4
   1dc30:	f04f 34ff 	mov.w	r4, #4294967295
   1dc34:	f7f8 ff6a 	bl	16b0c <bsd_os_errno_set>
   1dc38:	4620      	mov	r0, r4
   1dc3a:	b037      	add	sp, #220	; 0xdc
   1dc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc40:	f244 0202 	movw	r2, #16386	; 0x4002
   1dc44:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1dc48:	4293      	cmp	r3, r2
   1dc4a:	d02f      	beq.n	1dcac <gnss_interface_read+0x13c>
   1dc4c:	f244 0201 	movw	r2, #16385	; 0x4001
   1dc50:	4293      	cmp	r3, r2
   1dc52:	d045      	beq.n	1dce0 <gnss_interface_read+0x170>
   1dc54:	f244 0203 	movw	r2, #16387	; 0x4003
   1dc58:	4293      	cmp	r3, r2
   1dc5a:	f040 8184 	bne.w	1df66 <gnss_interface_read+0x3f6>
   1dc5e:	2203      	movs	r2, #3
   1dc60:	2414      	movs	r4, #20
   1dc62:	9b08      	ldr	r3, [sp, #32]
   1dc64:	7032      	strb	r2, [r6, #0]
   1dc66:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1dc68:	60b3      	str	r3, [r6, #8]
   1dc6a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1dc6e:	e9c6 2303 	strd	r2, r3, [r6, #12]
   1dc72:	f8db 0000 	ldr.w	r0, [fp]
   1dc76:	6803      	ldr	r3, [r0, #0]
   1dc78:	68db      	ldr	r3, [r3, #12]
   1dc7a:	4798      	blx	r3
   1dc7c:	2800      	cmp	r0, #0
   1dc7e:	ddbe      	ble.n	1dbfe <gnss_interface_read+0x8e>
   1dc80:	4620      	mov	r0, r4
   1dc82:	682b      	ldr	r3, [r5, #0]
   1dc84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1dc88:	602b      	str	r3, [r5, #0]
   1dc8a:	b037      	add	sp, #220	; 0xdc
   1dc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc90:	783b      	ldrb	r3, [r7, #0]
   1dc92:	4604      	mov	r4, r0
   1dc94:	2b00      	cmp	r3, #0
   1dc96:	d19f      	bne.n	1dbd8 <gnss_interface_read+0x68>
   1dc98:	e7c8      	b.n	1dc2c <gnss_interface_read+0xbc>
   1dc9a:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   1dc9e:	d183      	bne.n	1dba8 <gnss_interface_read+0x38>
   1dca0:	202d      	movs	r0, #45	; 0x2d
   1dca2:	f7f8 ff33 	bl	16b0c <bsd_os_errno_set>
   1dca6:	f04f 34ff 	mov.w	r4, #4294967295
   1dcaa:	e7a8      	b.n	1dbfe <gnss_interface_read+0x8e>
   1dcac:	a808      	add	r0, sp, #32
   1dcae:	f008 ffb3 	bl	26c18 <strlen>
   1dcb2:	2302      	movs	r3, #2
   1dcb4:	1c44      	adds	r4, r0, #1
   1dcb6:	b2a4      	uxth	r4, r4
   1dcb8:	f806 3b08 	strb.w	r3, [r6], #8
   1dcbc:	4622      	mov	r2, r4
   1dcbe:	a908      	add	r1, sp, #32
   1dcc0:	4630      	mov	r0, r6
   1dcc2:	f7ee ff43 	bl	cb4c <memcpy>
   1dcc6:	3408      	adds	r4, #8
   1dcc8:	e7d3      	b.n	1dc72 <gnss_interface_read+0x102>
   1dcca:	bf00      	nop
   1dccc:	49765443 	.word	0x49765443
   1dcd0:	20021ab0 	.word	0x20021ab0
   1dcd4:	2002629c 	.word	0x2002629c
   1dcd8:	20021ab8 	.word	0x20021ab8
   1dcdc:	200204c4 	.word	0x200204c4
   1dce0:	2401      	movs	r4, #1
   1dce2:	a809      	add	r0, sp, #36	; 0x24
   1dce4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   1dce6:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1dcea:	e9c6 2304 	strd	r2, r3, [r6, #16]
   1dcee:	990d      	ldr	r1, [sp, #52]	; 0x34
   1dcf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1dcf2:	7034      	strb	r4, [r6, #0]
   1dcf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1dcf6:	61b1      	str	r1, [r6, #24]
   1dcf8:	9910      	ldr	r1, [sp, #64]	; 0x40
   1dcfa:	61f2      	str	r2, [r6, #28]
   1dcfc:	6233      	str	r3, [r6, #32]
   1dcfe:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   1dd02:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   1dd06:	6271      	str	r1, [r6, #36]	; 0x24
   1dd08:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   1dd0c:	f886 2044 	strb.w	r2, [r6, #68]	; 0x44
   1dd10:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   1dd14:	6373      	str	r3, [r6, #52]	; 0x34
   1dd16:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   1dd1a:	63b1      	str	r1, [r6, #56]	; 0x38
   1dd1c:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   1dd20:	63f2      	str	r2, [r6, #60]	; 0x3c
   1dd22:	6433      	str	r3, [r6, #64]	; 0x40
   1dd24:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   1dd28:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1dd2c:	8531      	strh	r1, [r6, #40]	; 0x28
   1dd2e:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
   1dd32:	f8c6 202a 	str.w	r2, [r6, #42]	; 0x2a
   1dd36:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1dd3a:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   1dd3e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1dd40:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   1dd44:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   1dd48:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   1dd4c:	f3c3 210f 	ubfx	r1, r3, #8, #16
   1dd50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1dd52:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   1dd56:	8630      	strh	r0, [r6, #48]	; 0x30
   1dd58:	f8a6 104a 	strh.w	r1, [r6, #74]	; 0x4a
   1dd5c:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   1dd60:	f3c3 230f 	ubfx	r3, r3, #8, #16
   1dd64:	f8a6 2056 	strh.w	r2, [r6, #86]	; 0x56
   1dd68:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   1dd6c:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
   1dd70:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   1dd74:	f8a6 1046 	strh.w	r1, [r6, #70]	; 0x46
   1dd78:	f886 2048 	strb.w	r2, [r6, #72]	; 0x48
   1dd7c:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   1dd80:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1dd84:	64f3      	str	r3, [r6, #76]	; 0x4c
   1dd86:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   1dd8a:	f886 1050 	strb.w	r1, [r6, #80]	; 0x50
   1dd8e:	f8a6 2052 	strh.w	r2, [r6, #82]	; 0x52
   1dd92:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
   1dd96:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   1dd9a:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   1dd9e:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   1dda2:	65b1      	str	r1, [r6, #88]	; 0x58
   1dda4:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
   1dda8:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   1ddac:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   1ddb0:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
   1ddb4:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   1ddb8:	f886 1060 	strb.w	r1, [r6, #96]	; 0x60
   1ddbc:	6672      	str	r2, [r6, #100]	; 0x64
   1ddbe:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
   1ddc2:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   1ddc6:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   1ddca:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1ddcc:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   1ddd0:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1ddd4:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   1ddd8:	f3c2 220f 	ubfx	r2, r2, #8, #16
   1dddc:	f8a6 106e 	strh.w	r1, [r6, #110]	; 0x6e
   1dde0:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   1dde4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1dde8:	f8a6 207a 	strh.w	r2, [r6, #122]	; 0x7a
   1ddec:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   1ddf0:	f8a6 3086 	strh.w	r3, [r6, #134]	; 0x86
   1ddf4:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   1ddf8:	f8a6 106a 	strh.w	r1, [r6, #106]	; 0x6a
   1ddfc:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
   1de00:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   1de04:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   1de08:	6733      	str	r3, [r6, #112]	; 0x70
   1de0a:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   1de0e:	f886 1074 	strb.w	r1, [r6, #116]	; 0x74
   1de12:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
   1de16:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
   1de1a:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   1de1e:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   1de22:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   1de26:	67f1      	str	r1, [r6, #124]	; 0x7c
   1de28:	f886 2080 	strb.w	r2, [r6, #128]	; 0x80
   1de2c:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   1de30:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   1de34:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
   1de38:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   1de3c:	f886 1084 	strb.w	r1, [r6, #132]	; 0x84
   1de40:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
   1de44:	f886 308c 	strb.w	r3, [r6, #140]	; 0x8c
   1de48:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   1de4c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1de4e:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   1de52:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   1de56:	f3c3 210f 	ubfx	r1, r3, #8, #16
   1de5a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1de5c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   1de60:	f8a6 1092 	strh.w	r1, [r6, #146]	; 0x92
   1de64:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   1de68:	f8a6 209e 	strh.w	r2, [r6, #158]	; 0x9e
   1de6c:	f3c3 230f 	ubfx	r3, r3, #8, #16
   1de70:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   1de74:	f8a6 008e 	strh.w	r0, [r6, #142]	; 0x8e
   1de78:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
   1de7c:	f886 1090 	strb.w	r1, [r6, #144]	; 0x90
   1de80:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   1de84:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   1de88:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
   1de8c:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   1de90:	f886 3098 	strb.w	r3, [r6, #152]	; 0x98
   1de94:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   1de98:	f8a6 109a 	strh.w	r1, [r6, #154]	; 0x9a
   1de9c:	f886 209c 	strb.w	r2, [r6, #156]	; 0x9c
   1dea0:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   1dea4:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   1dea8:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
   1deac:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   1deb0:	f886 10a4 	strb.w	r1, [r6, #164]	; 0xa4
   1deb4:	f8a6 20a6 	strh.w	r2, [r6, #166]	; 0xa6
   1deb8:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   1debc:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   1dec0:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   1dec4:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   1dec8:	f8c6 10ac 	str.w	r1, [r6, #172]	; 0xac
   1decc:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
   1ded0:	f8a6 30b2 	strh.w	r3, [r6, #178]	; 0xb2
   1ded4:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   1ded8:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   1dedc:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   1dee0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   1dee2:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1dee6:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   1deea:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   1deee:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1def2:	f3c2 220f 	ubfx	r2, r2, #8, #16
   1def6:	f8a6 10b6 	strh.w	r1, [r6, #182]	; 0xb6
   1defa:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
   1defe:	f886 40b4 	strb.w	r4, [r6, #180]	; 0xb4
   1df02:	f8a6 20c2 	strh.w	r2, [r6, #194]	; 0xc2
   1df06:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   1df0a:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   1df0e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   1df12:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   1df16:	f886 10bc 	strb.w	r1, [r6, #188]	; 0xbc
   1df1a:	f8a6 20be 	strh.w	r2, [r6, #190]	; 0xbe
   1df1e:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
   1df22:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
   1df26:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   1df2a:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   1df2e:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   1df32:	f8c6 10c4 	str.w	r1, [r6, #196]	; 0xc4
   1df36:	f886 20c8 	strb.w	r2, [r6, #200]	; 0xc8
   1df3a:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   1df3e:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   1df42:	f8a6 30ca 	strh.w	r3, [r6, #202]	; 0xca
   1df46:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   1df4a:	f886 10cc 	strb.w	r1, [r6, #204]	; 0xcc
   1df4e:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
   1df52:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
   1df56:	24d8      	movs	r4, #216	; 0xd8
   1df58:	e68b      	b.n	1dc72 <gnss_interface_read+0x102>
   1df5a:	2039      	movs	r0, #57	; 0x39
   1df5c:	f7f8 fdd6 	bl	16b0c <bsd_os_errno_set>
   1df60:	f04f 34ff 	mov.w	r4, #4294967295
   1df64:	e64b      	b.n	1dbfe <gnss_interface_read+0x8e>
   1df66:	2016      	movs	r0, #22
   1df68:	f7f8 fdd0 	bl	16b0c <bsd_os_errno_set>
   1df6c:	f04f 34ff 	mov.w	r4, #4294967295
   1df70:	e645      	b.n	1dbfe <gnss_interface_read+0x8e>
   1df72:	2009      	movs	r0, #9
   1df74:	f7f8 fdca 	bl	16b0c <bsd_os_errno_set>
   1df78:	f04f 34ff 	mov.w	r4, #4294967295
   1df7c:	e63f      	b.n	1dbfe <gnss_interface_read+0x8e>
   1df7e:	bf00      	nop

0001df80 <gnss_interface_setopt>:
   1df80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df84:	4db9      	ldr	r5, [pc, #740]	; (1e26c <gnss_interface_setopt+0x2ec>)
   1df86:	b087      	sub	sp, #28
   1df88:	682c      	ldr	r4, [r5, #0]
   1df8a:	4690      	mov	r8, r2
   1df8c:	b2a4      	uxth	r4, r4
   1df8e:	2c02      	cmp	r4, #2
   1df90:	d00c      	beq.n	1dfac <gnss_interface_setopt+0x2c>
   1df92:	2a08      	cmp	r2, #8
   1df94:	d00a      	beq.n	1dfac <gnss_interface_setopt+0x2c>
   1df96:	3a0a      	subs	r2, #10
   1df98:	2a01      	cmp	r2, #1
   1df9a:	d907      	bls.n	1dfac <gnss_interface_setopt+0x2c>
   1df9c:	200e      	movs	r0, #14
   1df9e:	f7f8 fdb5 	bl	16b0c <bsd_os_errno_set>
   1dfa2:	f04f 30ff 	mov.w	r0, #4294967295
   1dfa6:	b007      	add	sp, #28
   1dfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dfac:	682a      	ldr	r2, [r5, #0]
   1dfae:	0252      	lsls	r2, r2, #9
   1dfb0:	f100 8155 	bmi.w	1e25e <gnss_interface_setopt+0x2de>
   1dfb4:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1dfb8:	f040 8145 	bne.w	1e246 <gnss_interface_setopt+0x2c6>
   1dfbc:	4aac      	ldr	r2, [pc, #688]	; (1e270 <gnss_interface_setopt+0x2f0>)
   1dfbe:	4290      	cmp	r0, r2
   1dfc0:	f040 8147 	bne.w	1e252 <gnss_interface_setopt+0x2d2>
   1dfc4:	f1a8 020a 	sub.w	r2, r8, #10
   1dfc8:	2a01      	cmp	r2, #1
   1dfca:	d902      	bls.n	1dfd2 <gnss_interface_setopt+0x52>
   1dfcc:	2b00      	cmp	r3, #0
   1dfce:	f000 811e 	beq.w	1e20e <gnss_interface_setopt+0x28e>
   1dfd2:	f108 32ff 	add.w	r2, r8, #4294967295
   1dfd6:	2a0a      	cmp	r2, #10
   1dfd8:	f200 8119 	bhi.w	1e20e <gnss_interface_setopt+0x28e>
   1dfdc:	e8df f012 	tbh	[pc, r2, lsl #1]
   1dfe0:	00950088 	.word	0x00950088
   1dfe4:	00ab00a1 	.word	0x00ab00a1
   1dfe8:	00c200b7 	.word	0x00c200b7
   1dfec:	00e600ce 	.word	0x00e600ce
   1dff0:	010800fc 	.word	0x010800fc
   1dff4:	000b      	.short	0x000b
   1dff6:	682b      	ldr	r3, [r5, #0]
   1dff8:	b29b      	uxth	r3, r3
   1dffa:	2b04      	cmp	r3, #4
   1dffc:	d1ce      	bne.n	1df9c <gnss_interface_setopt+0x1c>
   1dffe:	2203      	movs	r2, #3
   1e000:	f241 0604 	movw	r6, #4100	; 0x1004
   1e004:	2300      	movs	r3, #0
   1e006:	4637      	mov	r7, r6
   1e008:	f88d 2008 	strb.w	r2, [sp, #8]
   1e00c:	f88d 3009 	strb.w	r3, [sp, #9]
   1e010:	f88d 300a 	strb.w	r3, [sp, #10]
   1e014:	f88d 300b 	strb.w	r3, [sp, #11]
   1e018:	f88d 300c 	strb.w	r3, [sp, #12]
   1e01c:	682b      	ldr	r3, [r5, #0]
   1e01e:	2112      	movs	r1, #18
   1e020:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1e024:	4668      	mov	r0, sp
   1e026:	602b      	str	r3, [r5, #0]
   1e028:	f002 faf4 	bl	20614 <rpc_gnss_client_request_alloc>
   1e02c:	4604      	mov	r4, r0
   1e02e:	9800      	ldr	r0, [sp, #0]
   1e030:	2c00      	cmp	r4, #0
   1e032:	f040 80f2 	bne.w	1e21a <gnss_interface_setopt+0x29a>
   1e036:	2800      	cmp	r0, #0
   1e038:	f000 80f6 	beq.w	1e228 <gnss_interface_setopt+0x2a8>
   1e03c:	2212      	movs	r2, #18
   1e03e:	f04f 0976 	mov.w	r9, #118	; 0x76
   1e042:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1e046:	f04f 0b43 	mov.w	fp, #67	; 0x43
   1e04a:	f04f 0a54 	mov.w	sl, #84	; 0x54
   1e04e:	f8df c22c 	ldr.w	ip, [pc, #556]	; 1e27c <gnss_interface_setopt+0x2fc>
   1e052:	a906      	add	r1, sp, #24
   1e054:	f8bc 3000 	ldrh.w	r3, [ip]
   1e058:	f880 900e 	strb.w	r9, [r0, #14]
   1e05c:	3301      	adds	r3, #1
   1e05e:	b29b      	uxth	r3, r3
   1e060:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   1e064:	f841 6d14 	str.w	r6, [r1, #-20]!
   1e068:	7144      	strb	r4, [r0, #5]
   1e06a:	7184      	strb	r4, [r0, #6]
   1e06c:	71c4      	strb	r4, [r0, #7]
   1e06e:	7204      	strb	r4, [r0, #8]
   1e070:	7244      	strb	r4, [r0, #9]
   1e072:	7284      	strb	r4, [r0, #10]
   1e074:	72c4      	strb	r4, [r0, #11]
   1e076:	7102      	strb	r2, [r0, #4]
   1e078:	f880 b00c 	strb.w	fp, [r0, #12]
   1e07c:	f880 a00d 	strb.w	sl, [r0, #13]
   1e080:	f880 e00f 	strb.w	lr, [r0, #15]
   1e084:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 1e280 <gnss_interface_setopt+0x300>
   1e088:	6800      	ldr	r0, [r0, #0]
   1e08a:	f8ac 3000 	strh.w	r3, [ip]
   1e08e:	f7ee fd5d 	bl	cb4c <memcpy>
   1e092:	4639      	mov	r1, r7
   1e094:	9800      	ldr	r0, [sp, #0]
   1e096:	f8c9 4000 	str.w	r4, [r9]
   1e09a:	f002 facf 	bl	2063c <rpc_gnss_client_request_send>
   1e09e:	2800      	cmp	r0, #0
   1e0a0:	f040 80c7 	bne.w	1e232 <gnss_interface_setopt+0x2b2>
   1e0a4:	4f73      	ldr	r7, [pc, #460]	; (1e274 <gnss_interface_setopt+0x2f4>)
   1e0a6:	4e72      	ldr	r6, [pc, #456]	; (1e270 <gnss_interface_setopt+0x2f0>)
   1e0a8:	4639      	mov	r1, r7
   1e0aa:	4630      	mov	r0, r6
   1e0ac:	f7f8 fc76 	bl	1699c <bsd_os_timedwait>
   1e0b0:	682c      	ldr	r4, [r5, #0]
   1e0b2:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   1e0b6:	d1f7      	bne.n	1e0a8 <gnss_interface_setopt+0x128>
   1e0b8:	f8d9 0000 	ldr.w	r0, [r9]
   1e0bc:	b118      	cbz	r0, 1e0c6 <gnss_interface_setopt+0x146>
   1e0be:	f002 fadb 	bl	20678 <rpc_gnss_client_data_free>
   1e0c2:	f8c9 4000 	str.w	r4, [r9]
   1e0c6:	682b      	ldr	r3, [r5, #0]
   1e0c8:	021b      	lsls	r3, r3, #8
   1e0ca:	f140 8098 	bpl.w	1e1fe <gnss_interface_setopt+0x27e>
   1e0ce:	f1b8 0f08 	cmp.w	r8, #8
   1e0d2:	f040 809a 	bne.w	1e20a <gnss_interface_setopt+0x28a>
   1e0d6:	4b68      	ldr	r3, [pc, #416]	; (1e278 <gnss_interface_setopt+0x2f8>)
   1e0d8:	6818      	ldr	r0, [r3, #0]
   1e0da:	6803      	ldr	r3, [r0, #0]
   1e0dc:	691b      	ldr	r3, [r3, #16]
   1e0de:	4798      	blx	r3
   1e0e0:	2000      	movs	r0, #0
   1e0e2:	682b      	ldr	r3, [r5, #0]
   1e0e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1e0e8:	602b      	str	r3, [r5, #0]
   1e0ea:	b007      	add	sp, #28
   1e0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e0f2:	2a02      	cmp	r2, #2
   1e0f4:	f040 808b 	bne.w	1e20e <gnss_interface_setopt+0x28e>
   1e0f8:	2208      	movs	r2, #8
   1e0fa:	f241 1603 	movw	r6, #4355	; 0x1103
   1e0fe:	881b      	ldrh	r3, [r3, #0]
   1e100:	9202      	str	r2, [sp, #8]
   1e102:	f8ad 300f 	strh.w	r3, [sp, #15]
   1e106:	4637      	mov	r7, r6
   1e108:	e788      	b.n	1e01c <gnss_interface_setopt+0x9c>
   1e10a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e10c:	2a02      	cmp	r2, #2
   1e10e:	d17e      	bne.n	1e20e <gnss_interface_setopt+0x28e>
   1e110:	2210      	movs	r2, #16
   1e112:	f241 1603 	movw	r6, #4355	; 0x1103
   1e116:	881b      	ldrh	r3, [r3, #0]
   1e118:	9202      	str	r2, [sp, #8]
   1e11a:	f8ad 3011 	strh.w	r3, [sp, #17]
   1e11e:	4637      	mov	r7, r6
   1e120:	e77c      	b.n	1e01c <gnss_interface_setopt+0x9c>
   1e122:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e124:	2a01      	cmp	r2, #1
   1e126:	d172      	bne.n	1e20e <gnss_interface_setopt+0x28e>
   1e128:	781b      	ldrb	r3, [r3, #0]
   1e12a:	2b01      	cmp	r3, #1
   1e12c:	d16f      	bne.n	1e20e <gnss_interface_setopt+0x28e>
   1e12e:	f241 1603 	movw	r6, #4355	; 0x1103
   1e132:	4637      	mov	r7, r6
   1e134:	e772      	b.n	1e01c <gnss_interface_setopt+0x9c>
   1e136:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e138:	2a02      	cmp	r2, #2
   1e13a:	d168      	bne.n	1e20e <gnss_interface_setopt+0x28e>
   1e13c:	2220      	movs	r2, #32
   1e13e:	f241 1603 	movw	r6, #4355	; 0x1103
   1e142:	881b      	ldrh	r3, [r3, #0]
   1e144:	9202      	str	r2, [sp, #8]
   1e146:	f8ad 3013 	strh.w	r3, [sp, #19]
   1e14a:	4637      	mov	r7, r6
   1e14c:	e766      	b.n	1e01c <gnss_interface_setopt+0x9c>
   1e14e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e150:	2a01      	cmp	r2, #1
   1e152:	d15c      	bne.n	1e20e <gnss_interface_setopt+0x28e>
   1e154:	f241 1603 	movw	r6, #4355	; 0x1103
   1e158:	781b      	ldrb	r3, [r3, #0]
   1e15a:	9202      	str	r2, [sp, #8]
   1e15c:	f88d 300c 	strb.w	r3, [sp, #12]
   1e160:	4637      	mov	r7, r6
   1e162:	e75b      	b.n	1e01c <gnss_interface_setopt+0x9c>
   1e164:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e166:	2a01      	cmp	r2, #1
   1e168:	d151      	bne.n	1e20e <gnss_interface_setopt+0x28e>
   1e16a:	2202      	movs	r2, #2
   1e16c:	f241 1603 	movw	r6, #4355	; 0x1103
   1e170:	781b      	ldrb	r3, [r3, #0]
   1e172:	9202      	str	r2, [sp, #8]
   1e174:	f88d 300d 	strb.w	r3, [sp, #13]
   1e178:	4637      	mov	r7, r6
   1e17a:	e74f      	b.n	1e01c <gnss_interface_setopt+0x9c>
   1e17c:	682a      	ldr	r2, [r5, #0]
   1e17e:	b292      	uxth	r2, r2
   1e180:	2a02      	cmp	r2, #2
   1e182:	f47f af0b 	bne.w	1df9c <gnss_interface_setopt+0x1c>
   1e186:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e188:	2a04      	cmp	r2, #4
   1e18a:	d140      	bne.n	1e20e <gnss_interface_setopt+0x28e>
   1e18c:	2101      	movs	r1, #1
   1e18e:	f241 0604 	movw	r6, #4100	; 0x1004
   1e192:	682a      	ldr	r2, [r5, #0]
   1e194:	6818      	ldr	r0, [r3, #0]
   1e196:	0c13      	lsrs	r3, r2, #16
   1e198:	041b      	lsls	r3, r3, #16
   1e19a:	f043 0303 	orr.w	r3, r3, #3
   1e19e:	f8cd 0009 	str.w	r0, [sp, #9]
   1e1a2:	602b      	str	r3, [r5, #0]
   1e1a4:	f88d 1008 	strb.w	r1, [sp, #8]
   1e1a8:	4637      	mov	r7, r6
   1e1aa:	e737      	b.n	1e01c <gnss_interface_setopt+0x9c>
   1e1ac:	682a      	ldr	r2, [r5, #0]
   1e1ae:	b292      	uxth	r2, r2
   1e1b0:	2a04      	cmp	r2, #4
   1e1b2:	d004      	beq.n	1e1be <gnss_interface_setopt+0x23e>
   1e1b4:	682a      	ldr	r2, [r5, #0]
   1e1b6:	b292      	uxth	r2, r2
   1e1b8:	2a02      	cmp	r2, #2
   1e1ba:	f47f aeef 	bne.w	1df9c <gnss_interface_setopt+0x1c>
   1e1be:	2200      	movs	r2, #0
   1e1c0:	f88d 2008 	strb.w	r2, [sp, #8]
   1e1c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e1c6:	2a04      	cmp	r2, #4
   1e1c8:	d121      	bne.n	1e20e <gnss_interface_setopt+0x28e>
   1e1ca:	f241 0604 	movw	r6, #4100	; 0x1004
   1e1ce:	681b      	ldr	r3, [r3, #0]
   1e1d0:	4637      	mov	r7, r6
   1e1d2:	f8cd 3009 	str.w	r3, [sp, #9]
   1e1d6:	e721      	b.n	1e01c <gnss_interface_setopt+0x9c>
   1e1d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e1da:	2a01      	cmp	r2, #1
   1e1dc:	d117      	bne.n	1e20e <gnss_interface_setopt+0x28e>
   1e1de:	2240      	movs	r2, #64	; 0x40
   1e1e0:	f241 1603 	movw	r6, #4355	; 0x1103
   1e1e4:	781b      	ldrb	r3, [r3, #0]
   1e1e6:	9202      	str	r2, [sp, #8]
   1e1e8:	f88d 3015 	strb.w	r3, [sp, #21]
   1e1ec:	4637      	mov	r7, r6
   1e1ee:	e715      	b.n	1e01c <gnss_interface_setopt+0x9c>
   1e1f0:	682b      	ldr	r3, [r5, #0]
   1e1f2:	b29b      	uxth	r3, r3
   1e1f4:	2b04      	cmp	r3, #4
   1e1f6:	f47f aed1 	bne.w	1df9c <gnss_interface_setopt+0x1c>
   1e1fa:	2202      	movs	r2, #2
   1e1fc:	e700      	b.n	1e000 <gnss_interface_setopt+0x80>
   1e1fe:	200e      	movs	r0, #14
   1e200:	f7f8 fc84 	bl	16b0c <bsd_os_errno_set>
   1e204:	f04f 30ff 	mov.w	r0, #4294967295
   1e208:	e76b      	b.n	1e0e2 <gnss_interface_setopt+0x162>
   1e20a:	2000      	movs	r0, #0
   1e20c:	e769      	b.n	1e0e2 <gnss_interface_setopt+0x162>
   1e20e:	2016      	movs	r0, #22
   1e210:	f7f8 fc7c 	bl	16b0c <bsd_os_errno_set>
   1e214:	f04f 30ff 	mov.w	r0, #4294967295
   1e218:	e6c5      	b.n	1dfa6 <gnss_interface_setopt+0x26>
   1e21a:	b128      	cbz	r0, 1e228 <gnss_interface_setopt+0x2a8>
   1e21c:	6803      	ldr	r3, [r0, #0]
   1e21e:	b11b      	cbz	r3, 1e228 <gnss_interface_setopt+0x2a8>
   1e220:	4618      	mov	r0, r3
   1e222:	f002 fa29 	bl	20678 <rpc_gnss_client_data_free>
   1e226:	9800      	ldr	r0, [sp, #0]
   1e228:	f002 fa1e 	bl	20668 <rpc_gnss_client_message_free>
   1e22c:	2023      	movs	r0, #35	; 0x23
   1e22e:	f7f8 fc6d 	bl	16b0c <bsd_os_errno_set>
   1e232:	682b      	ldr	r3, [r5, #0]
   1e234:	200e      	movs	r0, #14
   1e236:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1e23a:	602b      	str	r3, [r5, #0]
   1e23c:	f7f8 fc66 	bl	16b0c <bsd_os_errno_set>
   1e240:	f04f 30ff 	mov.w	r0, #4294967295
   1e244:	e6af      	b.n	1dfa6 <gnss_interface_setopt+0x26>
   1e246:	202a      	movs	r0, #42	; 0x2a
   1e248:	f7f8 fc60 	bl	16b0c <bsd_os_errno_set>
   1e24c:	f04f 30ff 	mov.w	r0, #4294967295
   1e250:	e6a9      	b.n	1dfa6 <gnss_interface_setopt+0x26>
   1e252:	2009      	movs	r0, #9
   1e254:	f7f8 fc5a 	bl	16b0c <bsd_os_errno_set>
   1e258:	f04f 30ff 	mov.w	r0, #4294967295
   1e25c:	e6a3      	b.n	1dfa6 <gnss_interface_setopt+0x26>
   1e25e:	2073      	movs	r0, #115	; 0x73
   1e260:	f7f8 fc54 	bl	16b0c <bsd_os_errno_set>
   1e264:	f04f 30ff 	mov.w	r0, #4294967295
   1e268:	e69d      	b.n	1dfa6 <gnss_interface_setopt+0x26>
   1e26a:	bf00      	nop
   1e26c:	20021ab0 	.word	0x20021ab0
   1e270:	49765443 	.word	0x49765443
   1e274:	200204c4 	.word	0x200204c4
   1e278:	20021ab8 	.word	0x20021ab8
   1e27c:	200242ca 	.word	0x200242ca
   1e280:	20021ab4 	.word	0x20021ab4

0001e284 <gnss_interface_getopt>:
   1e284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e288:	4c81      	ldr	r4, [pc, #516]	; (1e490 <gnss_interface_getopt+0x20c>)
   1e28a:	b087      	sub	sp, #28
   1e28c:	6825      	ldr	r5, [r4, #0]
   1e28e:	4698      	mov	r8, r3
   1e290:	b2ad      	uxth	r5, r5
   1e292:	2d02      	cmp	r5, #2
   1e294:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e296:	f040 80dd 	bne.w	1e454 <gnss_interface_getopt+0x1d0>
   1e29a:	6825      	ldr	r5, [r4, #0]
   1e29c:	03ee      	lsls	r6, r5, #15
   1e29e:	f100 80eb 	bmi.w	1e478 <gnss_interface_getopt+0x1f4>
   1e2a2:	6825      	ldr	r5, [r4, #0]
   1e2a4:	01ed      	lsls	r5, r5, #7
   1e2a6:	f100 80ed 	bmi.w	1e484 <gnss_interface_getopt+0x200>
   1e2aa:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1e2ae:	f040 80d7 	bne.w	1e460 <gnss_interface_getopt+0x1dc>
   1e2b2:	4978      	ldr	r1, [pc, #480]	; (1e494 <gnss_interface_getopt+0x210>)
   1e2b4:	4288      	cmp	r0, r1
   1e2b6:	f040 80d9 	bne.w	1e46c <gnss_interface_getopt+0x1e8>
   1e2ba:	f1b8 0f00 	cmp.w	r8, #0
   1e2be:	d00b      	beq.n	1e2d8 <gnss_interface_getopt+0x54>
   1e2c0:	b153      	cbz	r3, 1e2d8 <gnss_interface_getopt+0x54>
   1e2c2:	1e57      	subs	r7, r2, #1
   1e2c4:	2f05      	cmp	r7, #5
   1e2c6:	d807      	bhi.n	1e2d8 <gnss_interface_getopt+0x54>
   1e2c8:	e8df f007 	tbb	[pc, r7]
   1e2cc:	0f030f0f 	.word	0x0f030f0f
   1e2d0:	0303      	.short	0x0303
   1e2d2:	681b      	ldr	r3, [r3, #0]
   1e2d4:	2b01      	cmp	r3, #1
   1e2d6:	d00b      	beq.n	1e2f0 <gnss_interface_getopt+0x6c>
   1e2d8:	2016      	movs	r0, #22
   1e2da:	f7f8 fc17 	bl	16b0c <bsd_os_errno_set>
   1e2de:	f04f 35ff 	mov.w	r5, #4294967295
   1e2e2:	4628      	mov	r0, r5
   1e2e4:	b007      	add	sp, #28
   1e2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e2ea:	681b      	ldr	r3, [r3, #0]
   1e2ec:	2b02      	cmp	r3, #2
   1e2ee:	d1f3      	bne.n	1e2d8 <gnss_interface_getopt+0x54>
   1e2f0:	6823      	ldr	r3, [r4, #0]
   1e2f2:	2212      	movs	r2, #18
   1e2f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1e2f8:	2100      	movs	r1, #0
   1e2fa:	a801      	add	r0, sp, #4
   1e2fc:	6023      	str	r3, [r4, #0]
   1e2fe:	f008 f87b 	bl	263f8 <memset>
   1e302:	2112      	movs	r1, #18
   1e304:	4668      	mov	r0, sp
   1e306:	f002 f985 	bl	20614 <rpc_gnss_client_request_alloc>
   1e30a:	4605      	mov	r5, r0
   1e30c:	9800      	ldr	r0, [sp, #0]
   1e30e:	2d00      	cmp	r5, #0
   1e310:	f040 808a 	bne.w	1e428 <gnss_interface_getopt+0x1a4>
   1e314:	2800      	cmp	r0, #0
   1e316:	f000 808e 	beq.w	1e436 <gnss_interface_getopt+0x1b2>
   1e31a:	f241 1602 	movw	r6, #4354	; 0x1102
   1e31e:	f04f 0e49 	mov.w	lr, #73	; 0x49
   1e322:	2212      	movs	r2, #18
   1e324:	f04f 0976 	mov.w	r9, #118	; 0x76
   1e328:	f04f 0b43 	mov.w	fp, #67	; 0x43
   1e32c:	f04f 0a54 	mov.w	sl, #84	; 0x54
   1e330:	f8df c168 	ldr.w	ip, [pc, #360]	; 1e49c <gnss_interface_getopt+0x218>
   1e334:	f880 e00f 	strb.w	lr, [r0, #15]
   1e338:	f8bc 3000 	ldrh.w	r3, [ip]
   1e33c:	f880 900e 	strb.w	r9, [r0, #14]
   1e340:	3301      	adds	r3, #1
   1e342:	b29b      	uxth	r3, r3
   1e344:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   1e348:	f8cd e004 	str.w	lr, [sp, #4]
   1e34c:	7145      	strb	r5, [r0, #5]
   1e34e:	7185      	strb	r5, [r0, #6]
   1e350:	71c5      	strb	r5, [r0, #7]
   1e352:	7205      	strb	r5, [r0, #8]
   1e354:	7245      	strb	r5, [r0, #9]
   1e356:	7285      	strb	r5, [r0, #10]
   1e358:	72c5      	strb	r5, [r0, #11]
   1e35a:	a901      	add	r1, sp, #4
   1e35c:	7102      	strb	r2, [r0, #4]
   1e35e:	f880 b00c 	strb.w	fp, [r0, #12]
   1e362:	f880 a00d 	strb.w	sl, [r0, #13]
   1e366:	f8df 9138 	ldr.w	r9, [pc, #312]	; 1e4a0 <gnss_interface_getopt+0x21c>
   1e36a:	6800      	ldr	r0, [r0, #0]
   1e36c:	f8ac 3000 	strh.w	r3, [ip]
   1e370:	f7ee fbec 	bl	cb4c <memcpy>
   1e374:	4631      	mov	r1, r6
   1e376:	9800      	ldr	r0, [sp, #0]
   1e378:	f8c9 5000 	str.w	r5, [r9]
   1e37c:	f002 f95e 	bl	2063c <rpc_gnss_client_request_send>
   1e380:	2800      	cmp	r0, #0
   1e382:	d15d      	bne.n	1e440 <gnss_interface_getopt+0x1bc>
   1e384:	4e44      	ldr	r6, [pc, #272]	; (1e498 <gnss_interface_getopt+0x214>)
   1e386:	4d43      	ldr	r5, [pc, #268]	; (1e494 <gnss_interface_getopt+0x210>)
   1e388:	4631      	mov	r1, r6
   1e38a:	4628      	mov	r0, r5
   1e38c:	f7f8 fb06 	bl	1699c <bsd_os_timedwait>
   1e390:	6823      	ldr	r3, [r4, #0]
   1e392:	01db      	lsls	r3, r3, #7
   1e394:	d4f8      	bmi.n	1e388 <gnss_interface_getopt+0x104>
   1e396:	f8d9 0000 	ldr.w	r0, [r9]
   1e39a:	b1d8      	cbz	r0, 1e3d4 <gnss_interface_getopt+0x150>
   1e39c:	6825      	ldr	r5, [r4, #0]
   1e39e:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   1e3a2:	d00f      	beq.n	1e3c4 <gnss_interface_getopt+0x140>
   1e3a4:	2f05      	cmp	r7, #5
   1e3a6:	d837      	bhi.n	1e418 <gnss_interface_getopt+0x194>
   1e3a8:	e8df f007 	tbb	[pc, r7]
   1e3ac:	2b26201a 	.word	0x2b26201a
   1e3b0:	0331      	.short	0x0331
   1e3b2:	2500      	movs	r5, #0
   1e3b4:	7b43      	ldrb	r3, [r0, #13]
   1e3b6:	f888 3000 	strb.w	r3, [r8]
   1e3ba:	f002 f95d 	bl	20678 <rpc_gnss_client_data_free>
   1e3be:	2300      	movs	r3, #0
   1e3c0:	f8c9 3000 	str.w	r3, [r9]
   1e3c4:	6823      	ldr	r3, [r4, #0]
   1e3c6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1e3ca:	6023      	str	r3, [r4, #0]
   1e3cc:	4628      	mov	r0, r5
   1e3ce:	b007      	add	sp, #28
   1e3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3d4:	6823      	ldr	r3, [r4, #0]
   1e3d6:	4605      	mov	r5, r0
   1e3d8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1e3dc:	6023      	str	r3, [r4, #0]
   1e3de:	e7f5      	b.n	1e3cc <gnss_interface_getopt+0x148>
   1e3e0:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   1e3e4:	2500      	movs	r5, #0
   1e3e6:	f8a8 3000 	strh.w	r3, [r8]
   1e3ea:	e7e6      	b.n	1e3ba <gnss_interface_getopt+0x136>
   1e3ec:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   1e3f0:	2500      	movs	r5, #0
   1e3f2:	f8a8 3000 	strh.w	r3, [r8]
   1e3f6:	e7e0      	b.n	1e3ba <gnss_interface_getopt+0x136>
   1e3f8:	7b83      	ldrb	r3, [r0, #14]
   1e3fa:	2500      	movs	r5, #0
   1e3fc:	f888 3000 	strb.w	r3, [r8]
   1e400:	e7db      	b.n	1e3ba <gnss_interface_getopt+0x136>
   1e402:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   1e406:	2500      	movs	r5, #0
   1e408:	f8a8 3000 	strh.w	r3, [r8]
   1e40c:	e7d5      	b.n	1e3ba <gnss_interface_getopt+0x136>
   1e40e:	7b03      	ldrb	r3, [r0, #12]
   1e410:	2500      	movs	r5, #0
   1e412:	f888 3000 	strb.w	r3, [r8]
   1e416:	e7d0      	b.n	1e3ba <gnss_interface_getopt+0x136>
   1e418:	2016      	movs	r0, #22
   1e41a:	f7f8 fb77 	bl	16b0c <bsd_os_errno_set>
   1e41e:	f04f 35ff 	mov.w	r5, #4294967295
   1e422:	f8d9 0000 	ldr.w	r0, [r9]
   1e426:	e7c8      	b.n	1e3ba <gnss_interface_getopt+0x136>
   1e428:	b128      	cbz	r0, 1e436 <gnss_interface_getopt+0x1b2>
   1e42a:	6803      	ldr	r3, [r0, #0]
   1e42c:	b11b      	cbz	r3, 1e436 <gnss_interface_getopt+0x1b2>
   1e42e:	4618      	mov	r0, r3
   1e430:	f002 f922 	bl	20678 <rpc_gnss_client_data_free>
   1e434:	9800      	ldr	r0, [sp, #0]
   1e436:	f002 f917 	bl	20668 <rpc_gnss_client_message_free>
   1e43a:	2023      	movs	r0, #35	; 0x23
   1e43c:	f7f8 fb66 	bl	16b0c <bsd_os_errno_set>
   1e440:	6823      	ldr	r3, [r4, #0]
   1e442:	200e      	movs	r0, #14
   1e444:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1e448:	6023      	str	r3, [r4, #0]
   1e44a:	f04f 35ff 	mov.w	r5, #4294967295
   1e44e:	f7f8 fb5d 	bl	16b0c <bsd_os_errno_set>
   1e452:	e746      	b.n	1e2e2 <gnss_interface_getopt+0x5e>
   1e454:	200e      	movs	r0, #14
   1e456:	f7f8 fb59 	bl	16b0c <bsd_os_errno_set>
   1e45a:	f04f 35ff 	mov.w	r5, #4294967295
   1e45e:	e740      	b.n	1e2e2 <gnss_interface_getopt+0x5e>
   1e460:	202a      	movs	r0, #42	; 0x2a
   1e462:	f7f8 fb53 	bl	16b0c <bsd_os_errno_set>
   1e466:	f04f 35ff 	mov.w	r5, #4294967295
   1e46a:	e73a      	b.n	1e2e2 <gnss_interface_getopt+0x5e>
   1e46c:	2009      	movs	r0, #9
   1e46e:	f7f8 fb4d 	bl	16b0c <bsd_os_errno_set>
   1e472:	f04f 35ff 	mov.w	r5, #4294967295
   1e476:	e734      	b.n	1e2e2 <gnss_interface_getopt+0x5e>
   1e478:	2005      	movs	r0, #5
   1e47a:	f7f8 fb47 	bl	16b0c <bsd_os_errno_set>
   1e47e:	f04f 35ff 	mov.w	r5, #4294967295
   1e482:	e72e      	b.n	1e2e2 <gnss_interface_getopt+0x5e>
   1e484:	2073      	movs	r0, #115	; 0x73
   1e486:	f7f8 fb41 	bl	16b0c <bsd_os_errno_set>
   1e48a:	f04f 35ff 	mov.w	r5, #4294967295
   1e48e:	e728      	b.n	1e2e2 <gnss_interface_getopt+0x5e>
   1e490:	20021ab0 	.word	0x20021ab0
   1e494:	49765443 	.word	0x49765443
   1e498:	200204c4 	.word	0x200204c4
   1e49c:	200242ca 	.word	0x200242ca
   1e4a0:	20021ab4 	.word	0x20021ab4

0001e4a4 <gnss_interface_init>:
   1e4a4:	2100      	movs	r1, #0
   1e4a6:	b538      	push	{r3, r4, r5, lr}
   1e4a8:	4c0a      	ldr	r4, [pc, #40]	; (1e4d4 <gnss_interface_init+0x30>)
   1e4aa:	4d0b      	ldr	r5, [pc, #44]	; (1e4d8 <gnss_interface_init+0x34>)
   1e4ac:	6822      	ldr	r2, [r4, #0]
   1e4ae:	480b      	ldr	r0, [pc, #44]	; (1e4dc <gnss_interface_init+0x38>)
   1e4b0:	4b0b      	ldr	r3, [pc, #44]	; (1e4e0 <gnss_interface_init+0x3c>)
   1e4b2:	402a      	ands	r2, r5
   1e4b4:	6022      	str	r2, [r4, #0]
   1e4b6:	8001      	strh	r1, [r0, #0]
   1e4b8:	6019      	str	r1, [r3, #0]
   1e4ba:	f002 f8a5 	bl	20608 <rpc_gnss_client_init>
   1e4be:	b938      	cbnz	r0, 1e4d0 <gnss_interface_init+0x2c>
   1e4c0:	2101      	movs	r1, #1
   1e4c2:	6823      	ldr	r3, [r4, #0]
   1e4c4:	4a07      	ldr	r2, [pc, #28]	; (1e4e4 <gnss_interface_init+0x40>)
   1e4c6:	402b      	ands	r3, r5
   1e4c8:	430b      	orrs	r3, r1
   1e4ca:	7011      	strb	r1, [r2, #0]
   1e4cc:	6023      	str	r3, [r4, #0]
   1e4ce:	bd38      	pop	{r3, r4, r5, pc}
   1e4d0:	2003      	movs	r0, #3
   1e4d2:	bd38      	pop	{r3, r4, r5, pc}
   1e4d4:	20021ab0 	.word	0x20021ab0
   1e4d8:	ffff0000 	.word	0xffff0000
   1e4dc:	200242ca 	.word	0x200242ca
   1e4e0:	20021ab4 	.word	0x20021ab4
   1e4e4:	2002629c 	.word	0x2002629c

0001e4e8 <gnss_interface_open>:
   1e4e8:	b510      	push	{r4, lr}
   1e4ea:	4b1c      	ldr	r3, [pc, #112]	; (1e55c <gnss_interface_open+0x74>)
   1e4ec:	781b      	ldrb	r3, [r3, #0]
   1e4ee:	b34b      	cbz	r3, 1e544 <gnss_interface_open+0x5c>
   1e4f0:	2902      	cmp	r1, #2
   1e4f2:	d121      	bne.n	1e538 <gnss_interface_open+0x50>
   1e4f4:	4c1a      	ldr	r4, [pc, #104]	; (1e560 <gnss_interface_open+0x78>)
   1e4f6:	6823      	ldr	r3, [r4, #0]
   1e4f8:	b29b      	uxth	r3, r3
   1e4fa:	2b01      	cmp	r3, #1
   1e4fc:	d116      	bne.n	1e52c <gnss_interface_open+0x44>
   1e4fe:	6823      	ldr	r3, [r4, #0]
   1e500:	4608      	mov	r0, r1
   1e502:	0c1b      	lsrs	r3, r3, #16
   1e504:	041b      	lsls	r3, r3, #16
   1e506:	f043 0302 	orr.w	r3, r3, #2
   1e50a:	2200      	movs	r2, #0
   1e50c:	4915      	ldr	r1, [pc, #84]	; (1e564 <gnss_interface_open+0x7c>)
   1e50e:	6023      	str	r3, [r4, #0]
   1e510:	f002 f99c 	bl	2084c <packet_handler_create>
   1e514:	4a14      	ldr	r2, [pc, #80]	; (1e568 <gnss_interface_open+0x80>)
   1e516:	6010      	str	r0, [r2, #0]
   1e518:	b1d0      	cbz	r0, 1e550 <gnss_interface_open+0x68>
   1e51a:	6823      	ldr	r3, [r4, #0]
   1e51c:	6802      	ldr	r2, [r0, #0]
   1e51e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1e522:	6812      	ldr	r2, [r2, #0]
   1e524:	6023      	str	r3, [r4, #0]
   1e526:	4790      	blx	r2
   1e528:	4810      	ldr	r0, [pc, #64]	; (1e56c <gnss_interface_open+0x84>)
   1e52a:	bd10      	pop	{r4, pc}
   1e52c:	2005      	movs	r0, #5
   1e52e:	f7f8 faed 	bl	16b0c <bsd_os_errno_set>
   1e532:	f04f 30ff 	mov.w	r0, #4294967295
   1e536:	bd10      	pop	{r4, pc}
   1e538:	2029      	movs	r0, #41	; 0x29
   1e53a:	f7f8 fae7 	bl	16b0c <bsd_os_errno_set>
   1e53e:	f04f 30ff 	mov.w	r0, #4294967295
   1e542:	bd10      	pop	{r4, pc}
   1e544:	2070      	movs	r0, #112	; 0x70
   1e546:	f7f8 fae1 	bl	16b0c <bsd_os_errno_set>
   1e54a:	f04f 30ff 	mov.w	r0, #4294967295
   1e54e:	bd10      	pop	{r4, pc}
   1e550:	200e      	movs	r0, #14
   1e552:	f7f8 fadb 	bl	16b0c <bsd_os_errno_set>
   1e556:	f04f 30ff 	mov.w	r0, #4294967295
   1e55a:	bd10      	pop	{r4, pc}
   1e55c:	2002629c 	.word	0x2002629c
   1e560:	20021ab0 	.word	0x20021ab0
   1e564:	0001d7c5 	.word	0x0001d7c5
   1e568:	20021ab8 	.word	0x20021ab8
   1e56c:	49765443 	.word	0x49765443

0001e570 <gnss_interface_close>:
   1e570:	b530      	push	{r4, r5, lr}
   1e572:	4b15      	ldr	r3, [pc, #84]	; (1e5c8 <gnss_interface_close+0x58>)
   1e574:	b085      	sub	sp, #20
   1e576:	4298      	cmp	r0, r3
   1e578:	d11f      	bne.n	1e5ba <gnss_interface_close+0x4a>
   1e57a:	4c14      	ldr	r4, [pc, #80]	; (1e5cc <gnss_interface_close+0x5c>)
   1e57c:	6822      	ldr	r2, [r4, #0]
   1e57e:	b292      	uxth	r2, r2
   1e580:	2a04      	cmp	r2, #4
   1e582:	d00f      	beq.n	1e5a4 <gnss_interface_close+0x34>
   1e584:	4d12      	ldr	r5, [pc, #72]	; (1e5d0 <gnss_interface_close+0x60>)
   1e586:	6828      	ldr	r0, [r5, #0]
   1e588:	b118      	cbz	r0, 1e592 <gnss_interface_close+0x22>
   1e58a:	f002 f97f 	bl	2088c <packet_handler_delete>
   1e58e:	2300      	movs	r3, #0
   1e590:	602b      	str	r3, [r5, #0]
   1e592:	2000      	movs	r0, #0
   1e594:	6823      	ldr	r3, [r4, #0]
   1e596:	0c1b      	lsrs	r3, r3, #16
   1e598:	041b      	lsls	r3, r3, #16
   1e59a:	f043 0301 	orr.w	r3, r3, #1
   1e59e:	6023      	str	r3, [r4, #0]
   1e5a0:	b005      	add	sp, #20
   1e5a2:	bd30      	pop	{r4, r5, pc}
   1e5a4:	2100      	movs	r1, #0
   1e5a6:	ab04      	add	r3, sp, #16
   1e5a8:	f843 1d04 	str.w	r1, [r3, #-4]!
   1e5ac:	9200      	str	r2, [sp, #0]
   1e5ae:	f44f 7101 	mov.w	r1, #516	; 0x204
   1e5b2:	2208      	movs	r2, #8
   1e5b4:	f001 fea8 	bl	20308 <nrf_setsockopt>
   1e5b8:	e7e4      	b.n	1e584 <gnss_interface_close+0x14>
   1e5ba:	2009      	movs	r0, #9
   1e5bc:	f7f8 faa6 	bl	16b0c <bsd_os_errno_set>
   1e5c0:	f04f 30ff 	mov.w	r0, #4294967295
   1e5c4:	e7ec      	b.n	1e5a0 <gnss_interface_close+0x30>
   1e5c6:	bf00      	nop
   1e5c8:	49765443 	.word	0x49765443
   1e5cc:	20021ab0 	.word	0x20021ab0
   1e5d0:	20021ab8 	.word	0x20021ab8

0001e5d4 <rpc_logobj_client_evt_handler>:
   1e5d4:	b120      	cbz	r0, 1e5e0 <rpc_logobj_client_evt_handler+0xc>
   1e5d6:	f850 1b08 	ldr.w	r1, [r0], #8
   1e5da:	0c09      	lsrs	r1, r1, #16
   1e5dc:	f7fb b94e 	b.w	1987c <logobj_event_handler>
   1e5e0:	4770      	bx	lr
   1e5e2:	bf00      	nop

0001e5e4 <rpc_logobj_client_init>:
   1e5e4:	4801      	ldr	r0, [pc, #4]	; (1e5ec <rpc_logobj_client_init+0x8>)
   1e5e6:	f7ff b82f 	b.w	1d648 <rpc_client_register>
   1e5ea:	bf00      	nop
   1e5ec:	0002f64c 	.word	0x0002f64c

0001e5f0 <rpc_logobj_client_request_alloc>:
   1e5f0:	2300      	movs	r3, #0
   1e5f2:	b510      	push	{r4, lr}
   1e5f4:	b082      	sub	sp, #8
   1e5f6:	9301      	str	r3, [sp, #4]
   1e5f8:	b961      	cbnz	r1, 1e614 <rpc_logobj_client_request_alloc+0x24>
   1e5fa:	b170      	cbz	r0, 1e61a <rpc_logobj_client_request_alloc+0x2a>
   1e5fc:	4604      	mov	r4, r0
   1e5fe:	aa01      	add	r2, sp, #4
   1e600:	2009      	movs	r0, #9
   1e602:	f7ff f89b 	bl	1d73c <rpc_message_alloc>
   1e606:	b918      	cbnz	r0, 1e610 <rpc_logobj_client_request_alloc+0x20>
   1e608:	9b01      	ldr	r3, [sp, #4]
   1e60a:	b10b      	cbz	r3, 1e610 <rpc_logobj_client_request_alloc+0x20>
   1e60c:	3308      	adds	r3, #8
   1e60e:	6023      	str	r3, [r4, #0]
   1e610:	b002      	add	sp, #8
   1e612:	bd10      	pop	{r4, pc}
   1e614:	200f      	movs	r0, #15
   1e616:	b002      	add	sp, #8
   1e618:	bd10      	pop	{r4, pc}
   1e61a:	200e      	movs	r0, #14
   1e61c:	b002      	add	sp, #8
   1e61e:	bd10      	pop	{r4, pc}

0001e620 <rpc_logobj_client_request_send>:
   1e620:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1e624:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   1e628:	d10b      	bne.n	1e642 <rpc_logobj_client_request_send+0x22>
   1e62a:	b160      	cbz	r0, 1e646 <rpc_logobj_client_request_send+0x26>
   1e62c:	4603      	mov	r3, r0
   1e62e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1e632:	2009      	movs	r0, #9
   1e634:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1e638:	f843 1d08 	str.w	r1, [r3, #-8]!
   1e63c:	4619      	mov	r1, r3
   1e63e:	f7ff b86d 	b.w	1d71c <rpc_message_send>
   1e642:	200f      	movs	r0, #15
   1e644:	4770      	bx	lr
   1e646:	200e      	movs	r0, #14
   1e648:	4770      	bx	lr
   1e64a:	bf00      	nop

0001e64c <rpc_logobj_client_message_free>:
   1e64c:	b120      	cbz	r0, 1e658 <rpc_logobj_client_message_free+0xc>
   1e64e:	f1a0 0108 	sub.w	r1, r0, #8
   1e652:	2009      	movs	r0, #9
   1e654:	f7ff b89e 	b.w	1d794 <rpc_message_free>
   1e658:	200e      	movs	r0, #14
   1e65a:	4770      	bx	lr

0001e65c <rpc_logobj_client_data_free>:
   1e65c:	b118      	cbz	r0, 1e666 <rpc_logobj_client_data_free+0xa>
   1e65e:	4601      	mov	r1, r0
   1e660:	2009      	movs	r0, #9
   1e662:	f7ff b8a3 	b.w	1d7ac <rpc_message_data_free>
   1e666:	200e      	movs	r0, #14
   1e668:	4770      	bx	lr
   1e66a:	bf00      	nop

0001e66c <dfu_client_event_handler>:
   1e66c:	f850 1b08 	ldr.w	r1, [r0], #8
   1e670:	0c09      	lsrs	r1, r1, #16
   1e672:	f002 bec1 	b.w	213f8 <rpc_dfu_event_handler>
   1e676:	bf00      	nop

0001e678 <rpc_dfu_client_init>:
   1e678:	4801      	ldr	r0, [pc, #4]	; (1e680 <rpc_dfu_client_init+0x8>)
   1e67a:	f7fe bfe5 	b.w	1d648 <rpc_client_register>
   1e67e:	bf00      	nop
   1e680:	0002f65c 	.word	0x0002f65c

0001e684 <rpc_dfu_client_request_alloc>:
   1e684:	2300      	movs	r3, #0
   1e686:	b510      	push	{r4, lr}
   1e688:	b082      	sub	sp, #8
   1e68a:	9301      	str	r3, [sp, #4]
   1e68c:	b158      	cbz	r0, 1e6a6 <rpc_dfu_client_request_alloc+0x22>
   1e68e:	4604      	mov	r4, r0
   1e690:	aa01      	add	r2, sp, #4
   1e692:	2006      	movs	r0, #6
   1e694:	f7ff f852 	bl	1d73c <rpc_message_alloc>
   1e698:	b918      	cbnz	r0, 1e6a2 <rpc_dfu_client_request_alloc+0x1e>
   1e69a:	9b01      	ldr	r3, [sp, #4]
   1e69c:	b10b      	cbz	r3, 1e6a2 <rpc_dfu_client_request_alloc+0x1e>
   1e69e:	3308      	adds	r3, #8
   1e6a0:	6023      	str	r3, [r4, #0]
   1e6a2:	b002      	add	sp, #8
   1e6a4:	bd10      	pop	{r4, pc}
   1e6a6:	2007      	movs	r0, #7
   1e6a8:	b002      	add	sp, #8
   1e6aa:	bd10      	pop	{r4, pc}

0001e6ac <rpc_dfu_client_request_send>:
   1e6ac:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   1e6b0:	d10b      	bne.n	1e6ca <rpc_dfu_client_request_send+0x1e>
   1e6b2:	b160      	cbz	r0, 1e6ce <rpc_dfu_client_request_send+0x22>
   1e6b4:	4603      	mov	r3, r0
   1e6b6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1e6ba:	2006      	movs	r0, #6
   1e6bc:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1e6c0:	f843 1d08 	str.w	r1, [r3, #-8]!
   1e6c4:	4619      	mov	r1, r3
   1e6c6:	f7ff b829 	b.w	1d71c <rpc_message_send>
   1e6ca:	200f      	movs	r0, #15
   1e6cc:	4770      	bx	lr
   1e6ce:	2007      	movs	r0, #7
   1e6d0:	4770      	bx	lr
   1e6d2:	bf00      	nop

0001e6d4 <rpc_dfu_client_message_free>:
   1e6d4:	b120      	cbz	r0, 1e6e0 <rpc_dfu_client_message_free+0xc>
   1e6d6:	f1a0 0108 	sub.w	r1, r0, #8
   1e6da:	2006      	movs	r0, #6
   1e6dc:	f7ff b85a 	b.w	1d794 <rpc_message_free>
   1e6e0:	2007      	movs	r0, #7
   1e6e2:	4770      	bx	lr

0001e6e4 <rpc_dfu_client_data_free>:
   1e6e4:	b118      	cbz	r0, 1e6ee <rpc_dfu_client_data_free+0xa>
   1e6e6:	4601      	mov	r1, r0
   1e6e8:	2006      	movs	r0, #6
   1e6ea:	f7ff b85f 	b.w	1d7ac <rpc_message_data_free>
   1e6ee:	2007      	movs	r0, #7
   1e6f0:	4770      	bx	lr
   1e6f2:	bf00      	nop

0001e6f4 <packet_free_cb>:
   1e6f4:	6800      	ldr	r0, [r0, #0]
   1e6f6:	f003 bbd9 	b.w	21eac <rpc_at_client_data_free>
   1e6fa:	bf00      	nop

0001e6fc <at_interface_write>:
   1e6fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e700:	b083      	sub	sp, #12
   1e702:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1e704:	2c00      	cmp	r4, #0
   1e706:	d16c      	bne.n	1e7e2 <at_interface_write+0xe6>
   1e708:	4688      	mov	r8, r1
   1e70a:	4615      	mov	r5, r2
   1e70c:	461e      	mov	r6, r3
   1e70e:	4607      	mov	r7, r0
   1e710:	f003 fa9e 	bl	21c50 <interface_socket_from_handle_get>
   1e714:	4604      	mov	r4, r0
   1e716:	2e00      	cmp	r6, #0
   1e718:	d137      	bne.n	1e78a <at_interface_write+0x8e>
   1e71a:	2800      	cmp	r0, #0
   1e71c:	d067      	beq.n	1e7ee <at_interface_write+0xf2>
   1e71e:	6803      	ldr	r3, [r0, #0]
   1e720:	039b      	lsls	r3, r3, #14
   1e722:	d564      	bpl.n	1e7ee <at_interface_write+0xf2>
   1e724:	6803      	ldr	r3, [r0, #0]
   1e726:	4629      	mov	r1, r5
   1e728:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1e72c:	6003      	str	r3, [r0, #0]
   1e72e:	6803      	ldr	r3, [r0, #0]
   1e730:	4668      	mov	r0, sp
   1e732:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1e736:	6023      	str	r3, [r4, #0]
   1e738:	f003 fb8e 	bl	21e58 <rpc_at_client_request_alloc>
   1e73c:	4606      	mov	r6, r0
   1e73e:	4638      	mov	r0, r7
   1e740:	f003 fa86 	bl	21c50 <interface_socket_from_handle_get>
   1e744:	4681      	mov	r9, r0
   1e746:	bb56      	cbnz	r6, 1e79e <at_interface_write+0xa2>
   1e748:	2304      	movs	r3, #4
   1e74a:	9800      	ldr	r0, [sp, #0]
   1e74c:	7203      	strb	r3, [r0, #8]
   1e74e:	7246      	strb	r6, [r0, #9]
   1e750:	7286      	strb	r6, [r0, #10]
   1e752:	72c6      	strb	r6, [r0, #11]
   1e754:	60c7      	str	r7, [r0, #12]
   1e756:	bb25      	cbnz	r5, 1e7a2 <at_interface_write+0xa6>
   1e758:	2101      	movs	r1, #1
   1e75a:	f003 fb91 	bl	21e80 <rpc_at_client_request_send>
   1e75e:	bb78      	cbnz	r0, 1e7c0 <at_interface_write+0xc4>
   1e760:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
   1e764:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1e768:	2900      	cmp	r1, #0
   1e76a:	bf08      	it	eq
   1e76c:	f04f 31ff 	moveq.w	r1, #4294967295
   1e770:	ab02      	add	r3, sp, #8
   1e772:	f843 1d04 	str.w	r1, [r3, #-4]!
   1e776:	4638      	mov	r0, r7
   1e778:	4611      	mov	r1, r2
   1e77a:	f003 f9f5 	bl	21b68 <interface_socket_wait>
   1e77e:	b320      	cbz	r0, 1e7ca <at_interface_write+0xce>
   1e780:	6823      	ldr	r3, [r4, #0]
   1e782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1e786:	6023      	str	r3, [r4, #0]
   1e788:	e002      	b.n	1e790 <at_interface_write+0x94>
   1e78a:	b390      	cbz	r0, 1e7f2 <at_interface_write+0xf6>
   1e78c:	6803      	ldr	r3, [r0, #0]
   1e78e:	202d      	movs	r0, #45	; 0x2d
   1e790:	f7f8 f9bc 	bl	16b0c <bsd_os_errno_set>
   1e794:	f04f 30ff 	mov.w	r0, #4294967295
   1e798:	b003      	add	sp, #12
   1e79a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e79e:	200c      	movs	r0, #12
   1e7a0:	e7ee      	b.n	1e780 <at_interface_write+0x84>
   1e7a2:	4641      	mov	r1, r8
   1e7a4:	6800      	ldr	r0, [r0, #0]
   1e7a6:	462a      	mov	r2, r5
   1e7a8:	f7ee f9d0 	bl	cb4c <memcpy>
   1e7ac:	2101      	movs	r1, #1
   1e7ae:	9800      	ldr	r0, [sp, #0]
   1e7b0:	f003 fb66 	bl	21e80 <rpc_at_client_request_send>
   1e7b4:	2800      	cmp	r0, #0
   1e7b6:	d0d3      	beq.n	1e760 <at_interface_write+0x64>
   1e7b8:	9b00      	ldr	r3, [sp, #0]
   1e7ba:	6818      	ldr	r0, [r3, #0]
   1e7bc:	f003 fb76 	bl	21eac <rpc_at_client_data_free>
   1e7c0:	9800      	ldr	r0, [sp, #0]
   1e7c2:	f003 fb6b 	bl	21e9c <rpc_at_client_message_free>
   1e7c6:	2023      	movs	r0, #35	; 0x23
   1e7c8:	e7da      	b.n	1e780 <at_interface_write+0x84>
   1e7ca:	4638      	mov	r0, r7
   1e7cc:	f003 fa40 	bl	21c50 <interface_socket_from_handle_get>
   1e7d0:	4603      	mov	r3, r0
   1e7d2:	b120      	cbz	r0, 1e7de <at_interface_write+0xe2>
   1e7d4:	6840      	ldr	r0, [r0, #4]
   1e7d6:	b110      	cbz	r0, 1e7de <at_interface_write+0xe2>
   1e7d8:	2200      	movs	r2, #0
   1e7da:	605a      	str	r2, [r3, #4]
   1e7dc:	e7d0      	b.n	1e780 <at_interface_write+0x84>
   1e7de:	4628      	mov	r0, r5
   1e7e0:	e7da      	b.n	1e798 <at_interface_write+0x9c>
   1e7e2:	2038      	movs	r0, #56	; 0x38
   1e7e4:	f7f8 f992 	bl	16b0c <bsd_os_errno_set>
   1e7e8:	f04f 30ff 	mov.w	r0, #4294967295
   1e7ec:	e7d4      	b.n	1e798 <at_interface_write+0x9c>
   1e7ee:	2016      	movs	r0, #22
   1e7f0:	e7ce      	b.n	1e790 <at_interface_write+0x94>
   1e7f2:	202d      	movs	r0, #45	; 0x2d
   1e7f4:	e7cc      	b.n	1e790 <at_interface_write+0x94>
   1e7f6:	bf00      	nop

0001e7f8 <at_interface_init>:
   1e7f8:	b508      	push	{r3, lr}
   1e7fa:	f003 fb27 	bl	21e4c <rpc_at_client_init>
   1e7fe:	b910      	cbnz	r0, 1e806 <at_interface_init+0xe>
   1e800:	2201      	movs	r2, #1
   1e802:	4b01      	ldr	r3, [pc, #4]	; (1e808 <at_interface_init+0x10>)
   1e804:	701a      	strb	r2, [r3, #0]
   1e806:	bd08      	pop	{r3, pc}
   1e808:	2002629d 	.word	0x2002629d

0001e80c <at_interface_open>:
   1e80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e810:	2600      	movs	r6, #0
   1e812:	4b34      	ldr	r3, [pc, #208]	; (1e8e4 <at_interface_open+0xd8>)
   1e814:	b084      	sub	sp, #16
   1e816:	781b      	ldrb	r3, [r3, #0]
   1e818:	9601      	str	r6, [sp, #4]
   1e81a:	2b00      	cmp	r3, #0
   1e81c:	d05c      	beq.n	1e8d8 <at_interface_open+0xcc>
   1e81e:	2902      	cmp	r1, #2
   1e820:	460d      	mov	r5, r1
   1e822:	d153      	bne.n	1e8cc <at_interface_open+0xc0>
   1e824:	4680      	mov	r8, r0
   1e826:	4617      	mov	r7, r2
   1e828:	a801      	add	r0, sp, #4
   1e82a:	4a2f      	ldr	r2, [pc, #188]	; (1e8e8 <at_interface_open+0xdc>)
   1e82c:	f003 f8ea 	bl	21a04 <interface_socket_allocate>
   1e830:	9b01      	ldr	r3, [sp, #4]
   1e832:	4604      	mov	r4, r0
   1e834:	b3c3      	cbz	r3, 1e8a8 <at_interface_open+0x9c>
   1e836:	615f      	str	r7, [r3, #20]
   1e838:	4631      	mov	r1, r6
   1e83a:	e9c3 8503 	strd	r8, r5, [r3, #12]
   1e83e:	a802      	add	r0, sp, #8
   1e840:	f003 fb0a 	bl	21e58 <rpc_at_client_request_alloc>
   1e844:	4606      	mov	r6, r0
   1e846:	4620      	mov	r0, r4
   1e848:	f003 fa02 	bl	21c50 <interface_socket_from_handle_get>
   1e84c:	4607      	mov	r7, r0
   1e84e:	bb16      	cbnz	r6, 1e896 <at_interface_open+0x8a>
   1e850:	2304      	movs	r3, #4
   1e852:	9802      	ldr	r0, [sp, #8]
   1e854:	2105      	movs	r1, #5
   1e856:	7246      	strb	r6, [r0, #9]
   1e858:	7286      	strb	r6, [r0, #10]
   1e85a:	72c6      	strb	r6, [r0, #11]
   1e85c:	7203      	strb	r3, [r0, #8]
   1e85e:	60c4      	str	r4, [r0, #12]
   1e860:	f003 fb0e 	bl	21e80 <rpc_at_client_request_send>
   1e864:	4606      	mov	r6, r0
   1e866:	bb60      	cbnz	r0, 1e8c2 <at_interface_open+0xb6>
   1e868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e86a:	ab04      	add	r3, sp, #16
   1e86c:	2a00      	cmp	r2, #0
   1e86e:	bf08      	it	eq
   1e870:	f04f 32ff 	moveq.w	r2, #4294967295
   1e874:	4629      	mov	r1, r5
   1e876:	f843 2d04 	str.w	r2, [r3, #-4]!
   1e87a:	4620      	mov	r0, r4
   1e87c:	462a      	mov	r2, r5
   1e87e:	f003 f973 	bl	21b68 <interface_socket_wait>
   1e882:	4605      	mov	r5, r0
   1e884:	b940      	cbnz	r0, 1e898 <at_interface_open+0x8c>
   1e886:	4620      	mov	r0, r4
   1e888:	f003 f9e2 	bl	21c50 <interface_socket_from_handle_get>
   1e88c:	b180      	cbz	r0, 1e8b0 <at_interface_open+0xa4>
   1e88e:	6845      	ldr	r5, [r0, #4]
   1e890:	b175      	cbz	r5, 1e8b0 <at_interface_open+0xa4>
   1e892:	6046      	str	r6, [r0, #4]
   1e894:	e000      	b.n	1e898 <at_interface_open+0x8c>
   1e896:	250c      	movs	r5, #12
   1e898:	4620      	mov	r0, r4
   1e89a:	f003 f917 	bl	21acc <interface_socket_free>
   1e89e:	4628      	mov	r0, r5
   1e8a0:	f7f8 f934 	bl	16b0c <bsd_os_errno_set>
   1e8a4:	f04f 34ff 	mov.w	r4, #4294967295
   1e8a8:	4620      	mov	r0, r4
   1e8aa:	b004      	add	sp, #16
   1e8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e8b0:	4620      	mov	r0, r4
   1e8b2:	9a01      	ldr	r2, [sp, #4]
   1e8b4:	6813      	ldr	r3, [r2, #0]
   1e8b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1e8ba:	6013      	str	r3, [r2, #0]
   1e8bc:	b004      	add	sp, #16
   1e8be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e8c2:	9802      	ldr	r0, [sp, #8]
   1e8c4:	f003 faea 	bl	21e9c <rpc_at_client_message_free>
   1e8c8:	2523      	movs	r5, #35	; 0x23
   1e8ca:	e7e5      	b.n	1e898 <at_interface_open+0x8c>
   1e8cc:	2029      	movs	r0, #41	; 0x29
   1e8ce:	f7f8 f91d 	bl	16b0c <bsd_os_errno_set>
   1e8d2:	f04f 34ff 	mov.w	r4, #4294967295
   1e8d6:	e7e7      	b.n	1e8a8 <at_interface_open+0x9c>
   1e8d8:	2070      	movs	r0, #112	; 0x70
   1e8da:	f7f8 f917 	bl	16b0c <bsd_os_errno_set>
   1e8de:	f04f 34ff 	mov.w	r4, #4294967295
   1e8e2:	e7e1      	b.n	1e8a8 <at_interface_open+0x9c>
   1e8e4:	2002629d 	.word	0x2002629d
   1e8e8:	0001e6f5 	.word	0x0001e6f5

0001e8ec <at_interface_close>:
   1e8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e8f0:	b082      	sub	sp, #8
   1e8f2:	4606      	mov	r6, r0
   1e8f4:	f003 f9ac 	bl	21c50 <interface_socket_from_handle_get>
   1e8f8:	2800      	cmp	r0, #0
   1e8fa:	d051      	beq.n	1e9a0 <at_interface_close+0xb4>
   1e8fc:	230d      	movs	r3, #13
   1e8fe:	6807      	ldr	r7, [r0, #0]
   1e900:	6003      	str	r3, [r0, #0]
   1e902:	6803      	ldr	r3, [r0, #0]
   1e904:	4604      	mov	r4, r0
   1e906:	039b      	lsls	r3, r3, #14
   1e908:	d42e      	bmi.n	1e968 <at_interface_close+0x7c>
   1e90a:	2100      	movs	r1, #0
   1e90c:	4668      	mov	r0, sp
   1e90e:	f003 faa3 	bl	21e58 <rpc_at_client_request_alloc>
   1e912:	4605      	mov	r5, r0
   1e914:	4630      	mov	r0, r6
   1e916:	f003 f99b 	bl	21c50 <interface_socket_from_handle_get>
   1e91a:	4680      	mov	r8, r0
   1e91c:	bb75      	cbnz	r5, 1e97c <at_interface_close+0x90>
   1e91e:	2304      	movs	r3, #4
   1e920:	9800      	ldr	r0, [sp, #0]
   1e922:	2106      	movs	r1, #6
   1e924:	7203      	strb	r3, [r0, #8]
   1e926:	7245      	strb	r5, [r0, #9]
   1e928:	7285      	strb	r5, [r0, #10]
   1e92a:	72c5      	strb	r5, [r0, #11]
   1e92c:	60c6      	str	r6, [r0, #12]
   1e92e:	f003 faa7 	bl	21e80 <rpc_at_client_request_send>
   1e932:	b9f0      	cbnz	r0, 1e972 <at_interface_close+0x86>
   1e934:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   1e938:	220e      	movs	r2, #14
   1e93a:	2900      	cmp	r1, #0
   1e93c:	bf08      	it	eq
   1e93e:	f04f 31ff 	moveq.w	r1, #4294967295
   1e942:	ab02      	add	r3, sp, #8
   1e944:	f843 1d04 	str.w	r1, [r3, #-4]!
   1e948:	4630      	mov	r0, r6
   1e94a:	4611      	mov	r1, r2
   1e94c:	f003 f90c 	bl	21b68 <interface_socket_wait>
   1e950:	4605      	mov	r5, r0
   1e952:	b1a8      	cbz	r0, 1e980 <at_interface_close+0x94>
   1e954:	6027      	str	r7, [r4, #0]
   1e956:	4628      	mov	r0, r5
   1e958:	f04f 35ff 	mov.w	r5, #4294967295
   1e95c:	f7f8 f8d6 	bl	16b0c <bsd_os_errno_set>
   1e960:	4628      	mov	r0, r5
   1e962:	b002      	add	sp, #8
   1e964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e968:	6803      	ldr	r3, [r0, #0]
   1e96a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1e96e:	6003      	str	r3, [r0, #0]
   1e970:	e7cb      	b.n	1e90a <at_interface_close+0x1e>
   1e972:	9800      	ldr	r0, [sp, #0]
   1e974:	f003 fa92 	bl	21e9c <rpc_at_client_message_free>
   1e978:	2523      	movs	r5, #35	; 0x23
   1e97a:	e7eb      	b.n	1e954 <at_interface_close+0x68>
   1e97c:	250c      	movs	r5, #12
   1e97e:	e7e9      	b.n	1e954 <at_interface_close+0x68>
   1e980:	4630      	mov	r0, r6
   1e982:	f003 f965 	bl	21c50 <interface_socket_from_handle_get>
   1e986:	b120      	cbz	r0, 1e992 <at_interface_close+0xa6>
   1e988:	6843      	ldr	r3, [r0, #4]
   1e98a:	b113      	cbz	r3, 1e992 <at_interface_close+0xa6>
   1e98c:	6045      	str	r5, [r0, #4]
   1e98e:	461d      	mov	r5, r3
   1e990:	e7e0      	b.n	1e954 <at_interface_close+0x68>
   1e992:	4630      	mov	r0, r6
   1e994:	f003 f89a 	bl	21acc <interface_socket_free>
   1e998:	4628      	mov	r0, r5
   1e99a:	b002      	add	sp, #8
   1e99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e9a0:	2516      	movs	r5, #22
   1e9a2:	e7d8      	b.n	1e956 <at_interface_close+0x6a>

0001e9a4 <at_interface_read>:
   1e9a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e9a8:	b087      	sub	sp, #28
   1e9aa:	4688      	mov	r8, r1
   1e9ac:	4615      	mov	r5, r2
   1e9ae:	461e      	mov	r6, r3
   1e9b0:	4607      	mov	r7, r0
   1e9b2:	f003 f94d 	bl	21c50 <interface_socket_from_handle_get>
   1e9b6:	2800      	cmp	r0, #0
   1e9b8:	f000 8084 	beq.w	1eac4 <at_interface_read+0x120>
   1e9bc:	2300      	movs	r3, #0
   1e9be:	4604      	mov	r4, r0
   1e9c0:	e9cd 8502 	strd	r8, r5, [sp, #8]
   1e9c4:	e9cd 3304 	strd	r3, r3, [sp, #16]
   1e9c8:	2e00      	cmp	r6, #0
   1e9ca:	d12d      	bne.n	1ea28 <at_interface_read+0x84>
   1e9cc:	f016 0502 	ands.w	r5, r6, #2
   1e9d0:	d148      	bne.n	1ea64 <at_interface_read+0xc0>
   1e9d2:	46a8      	mov	r8, r5
   1e9d4:	6823      	ldr	r3, [r4, #0]
   1e9d6:	69e0      	ldr	r0, [r4, #28]
   1e9d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1e9dc:	6023      	str	r3, [r4, #0]
   1e9de:	6803      	ldr	r3, [r0, #0]
   1e9e0:	4632      	mov	r2, r6
   1e9e2:	689b      	ldr	r3, [r3, #8]
   1e9e4:	a902      	add	r1, sp, #8
   1e9e6:	4798      	blx	r3
   1e9e8:	f1b0 0900 	subs.w	r9, r0, #0
   1e9ec:	da2a      	bge.n	1ea44 <at_interface_read+0xa0>
   1e9ee:	2d00      	cmp	r5, #0
   1e9f0:	d15e      	bne.n	1eab0 <at_interface_read+0x10c>
   1e9f2:	6a25      	ldr	r5, [r4, #32]
   1e9f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e9f8:	2d00      	cmp	r5, #0
   1e9fa:	bf08      	it	eq
   1e9fc:	f04f 35ff 	moveq.w	r5, #4294967295
   1ea00:	4611      	mov	r1, r2
   1ea02:	ab01      	add	r3, sp, #4
   1ea04:	4638      	mov	r0, r7
   1ea06:	9501      	str	r5, [sp, #4]
   1ea08:	f003 f8ae 	bl	21b68 <interface_socket_wait>
   1ea0c:	4605      	mov	r5, r0
   1ea0e:	2800      	cmp	r0, #0
   1ea10:	d1e0      	bne.n	1e9d4 <at_interface_read+0x30>
   1ea12:	4638      	mov	r0, r7
   1ea14:	f003 f91c 	bl	21c50 <interface_socket_from_handle_get>
   1ea18:	2800      	cmp	r0, #0
   1ea1a:	d0db      	beq.n	1e9d4 <at_interface_read+0x30>
   1ea1c:	6845      	ldr	r5, [r0, #4]
   1ea1e:	2d00      	cmp	r5, #0
   1ea20:	d0d8      	beq.n	1e9d4 <at_interface_read+0x30>
   1ea22:	f8c0 8004 	str.w	r8, [r0, #4]
   1ea26:	e7d5      	b.n	1e9d4 <at_interface_read+0x30>
   1ea28:	f016 0f2a 	tst.w	r6, #42	; 0x2a
   1ea2c:	d1ce      	bne.n	1e9cc <at_interface_read+0x28>
   1ea2e:	252d      	movs	r5, #45	; 0x2d
   1ea30:	f04f 39ff 	mov.w	r9, #4294967295
   1ea34:	4628      	mov	r0, r5
   1ea36:	f7f8 f869 	bl	16b0c <bsd_os_errno_set>
   1ea3a:	4648      	mov	r0, r9
   1ea3c:	b007      	add	sp, #28
   1ea3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ea42:	2500      	movs	r5, #0
   1ea44:	69e0      	ldr	r0, [r4, #28]
   1ea46:	6803      	ldr	r3, [r0, #0]
   1ea48:	68db      	ldr	r3, [r3, #12]
   1ea4a:	4798      	blx	r3
   1ea4c:	3001      	adds	r0, #1
   1ea4e:	d003      	beq.n	1ea58 <at_interface_read+0xb4>
   1ea50:	6823      	ldr	r3, [r4, #0]
   1ea52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1ea56:	6023      	str	r3, [r4, #0]
   1ea58:	2d00      	cmp	r5, #0
   1ea5a:	d1eb      	bne.n	1ea34 <at_interface_read+0x90>
   1ea5c:	4648      	mov	r0, r9
   1ea5e:	b007      	add	sp, #28
   1ea60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ea64:	6823      	ldr	r3, [r4, #0]
   1ea66:	69e0      	ldr	r0, [r4, #28]
   1ea68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1ea6c:	6023      	str	r3, [r4, #0]
   1ea6e:	6803      	ldr	r3, [r0, #0]
   1ea70:	4632      	mov	r2, r6
   1ea72:	689b      	ldr	r3, [r3, #8]
   1ea74:	a902      	add	r1, sp, #8
   1ea76:	4798      	blx	r3
   1ea78:	f1b0 0900 	subs.w	r9, r0, #0
   1ea7c:	dae1      	bge.n	1ea42 <at_interface_read+0x9e>
   1ea7e:	69e0      	ldr	r0, [r4, #28]
   1ea80:	f1b9 3fff 	cmp.w	r9, #4294967295
   1ea84:	6803      	ldr	r3, [r0, #0]
   1ea86:	68db      	ldr	r3, [r3, #12]
   1ea88:	d10a      	bne.n	1eaa0 <at_interface_read+0xfc>
   1ea8a:	2523      	movs	r5, #35	; 0x23
   1ea8c:	4798      	blx	r3
   1ea8e:	3001      	adds	r0, #1
   1ea90:	d0ce      	beq.n	1ea30 <at_interface_read+0x8c>
   1ea92:	6823      	ldr	r3, [r4, #0]
   1ea94:	f04f 39ff 	mov.w	r9, #4294967295
   1ea98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1ea9c:	6023      	str	r3, [r4, #0]
   1ea9e:	e7db      	b.n	1ea58 <at_interface_read+0xb4>
   1eaa0:	4798      	blx	r3
   1eaa2:	3001      	adds	r0, #1
   1eaa4:	d0c9      	beq.n	1ea3a <at_interface_read+0x96>
   1eaa6:	6823      	ldr	r3, [r4, #0]
   1eaa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1eaac:	6023      	str	r3, [r4, #0]
   1eaae:	e7c4      	b.n	1ea3a <at_interface_read+0x96>
   1eab0:	69e0      	ldr	r0, [r4, #28]
   1eab2:	f1b9 3fff 	cmp.w	r9, #4294967295
   1eab6:	6803      	ldr	r3, [r0, #0]
   1eab8:	68db      	ldr	r3, [r3, #12]
   1eaba:	d0e7      	beq.n	1ea8c <at_interface_read+0xe8>
   1eabc:	4798      	blx	r3
   1eabe:	3001      	adds	r0, #1
   1eac0:	d1c6      	bne.n	1ea50 <at_interface_read+0xac>
   1eac2:	e7b7      	b.n	1ea34 <at_interface_read+0x90>
   1eac4:	2516      	movs	r5, #22
   1eac6:	e7b3      	b.n	1ea30 <at_interface_read+0x8c>

0001eac8 <at_interface_getopt>:
   1eac8:	f003 b930 	b.w	21d2c <interface_socket_getopt>

0001eacc <at_interface_setopt>:
   1eacc:	f003 b8e8 	b.w	21ca0 <interface_socket_setopt>

0001ead0 <rpc_at_event_handler>:
   1ead0:	b570      	push	{r4, r5, r6, lr}
   1ead2:	4606      	mov	r6, r0
   1ead4:	b084      	sub	sp, #16
   1ead6:	68c0      	ldr	r0, [r0, #12]
   1ead8:	460d      	mov	r5, r1
   1eada:	f003 f8b9 	bl	21c50 <interface_socket_from_handle_get>
   1eade:	4604      	mov	r4, r0
   1eae0:	b348      	cbz	r0, 1eb36 <rpc_at_event_handler+0x66>
   1eae2:	6803      	ldr	r3, [r0, #0]
   1eae4:	b29b      	uxth	r3, r3
   1eae6:	2b01      	cmp	r3, #1
   1eae8:	d01f      	beq.n	1eb2a <rpc_at_event_handler+0x5a>
   1eaea:	6803      	ldr	r3, [r0, #0]
   1eaec:	b29b      	uxth	r3, r3
   1eaee:	2b0d      	cmp	r3, #13
   1eaf0:	d029      	beq.n	1eb46 <rpc_at_event_handler+0x76>
   1eaf2:	6803      	ldr	r3, [r0, #0]
   1eaf4:	b29b      	uxth	r3, r3
   1eaf6:	2b02      	cmp	r3, #2
   1eaf8:	d02d      	beq.n	1eb56 <rpc_at_event_handler+0x86>
   1eafa:	3d03      	subs	r5, #3
   1eafc:	2d01      	cmp	r5, #1
   1eafe:	d817      	bhi.n	1eb30 <rpc_at_event_handler+0x60>
   1eb00:	2500      	movs	r5, #0
   1eb02:	6873      	ldr	r3, [r6, #4]
   1eb04:	6832      	ldr	r2, [r6, #0]
   1eb06:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1eb0a:	e9cd 2300 	strd	r2, r3, [sp]
   1eb0e:	69e0      	ldr	r0, [r4, #28]
   1eb10:	4669      	mov	r1, sp
   1eb12:	6803      	ldr	r3, [r0, #0]
   1eb14:	685b      	ldr	r3, [r3, #4]
   1eb16:	4798      	blx	r3
   1eb18:	3001      	adds	r0, #1
   1eb1a:	d019      	beq.n	1eb50 <rpc_at_event_handler+0x80>
   1eb1c:	4628      	mov	r0, r5
   1eb1e:	6823      	ldr	r3, [r4, #0]
   1eb20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1eb24:	6023      	str	r3, [r4, #0]
   1eb26:	b004      	add	sp, #16
   1eb28:	bd70      	pop	{r4, r5, r6, pc}
   1eb2a:	2d02      	cmp	r5, #2
   1eb2c:	d1e5      	bne.n	1eafa <rpc_at_event_handler+0x2a>
   1eb2e:	6005      	str	r5, [r0, #0]
   1eb30:	2000      	movs	r0, #0
   1eb32:	b004      	add	sp, #16
   1eb34:	bd70      	pop	{r4, r5, r6, pc}
   1eb36:	6830      	ldr	r0, [r6, #0]
   1eb38:	2800      	cmp	r0, #0
   1eb3a:	d0f9      	beq.n	1eb30 <rpc_at_event_handler+0x60>
   1eb3c:	f003 f9b6 	bl	21eac <rpc_at_client_data_free>
   1eb40:	4620      	mov	r0, r4
   1eb42:	b004      	add	sp, #16
   1eb44:	bd70      	pop	{r4, r5, r6, pc}
   1eb46:	2d02      	cmp	r5, #2
   1eb48:	d1d7      	bne.n	1eafa <rpc_at_event_handler+0x2a>
   1eb4a:	230e      	movs	r3, #14
   1eb4c:	6003      	str	r3, [r0, #0]
   1eb4e:	e7ef      	b.n	1eb30 <rpc_at_event_handler+0x60>
   1eb50:	2002      	movs	r0, #2
   1eb52:	b004      	add	sp, #16
   1eb54:	bd70      	pop	{r4, r5, r6, pc}
   1eb56:	6803      	ldr	r3, [r0, #0]
   1eb58:	029b      	lsls	r3, r3, #10
   1eb5a:	d5ce      	bpl.n	1eafa <rpc_at_event_handler+0x2a>
   1eb5c:	2d02      	cmp	r5, #2
   1eb5e:	d1cc      	bne.n	1eafa <rpc_at_event_handler+0x2a>
   1eb60:	6803      	ldr	r3, [r0, #0]
   1eb62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1eb66:	6003      	str	r3, [r0, #0]
   1eb68:	6803      	ldr	r3, [r0, #0]
   1eb6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1eb6e:	6003      	str	r3, [r0, #0]
   1eb70:	e7de      	b.n	1eb30 <rpc_at_event_handler+0x60>
   1eb72:	bf00      	nop

0001eb74 <ok_rsp_parser>:
   1eb74:	2000      	movs	r0, #0
   1eb76:	4770      	bx	lr

0001eb78 <pdn_state_get_parser>:
   1eb78:	2200      	movs	r2, #0
   1eb7a:	b570      	push	{r4, r5, r6, lr}
   1eb7c:	780b      	ldrb	r3, [r1, #0]
   1eb7e:	b084      	sub	sp, #16
   1eb80:	460e      	mov	r6, r1
   1eb82:	e9cd 2200 	strd	r2, r2, [sp]
   1eb86:	e9cd 2202 	strd	r2, r2, [sp, #8]
   1eb8a:	b323      	cbz	r3, 1ebd6 <pdn_state_get_parser+0x5e>
   1eb8c:	460c      	mov	r4, r1
   1eb8e:	2b20      	cmp	r3, #32
   1eb90:	460d      	mov	r5, r1
   1eb92:	d01b      	beq.n	1ebcc <pdn_state_get_parser+0x54>
   1eb94:	700b      	strb	r3, [r1, #0]
   1eb96:	3201      	adds	r2, #1
   1eb98:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1eb9c:	18b1      	adds	r1, r6, r2
   1eb9e:	460d      	mov	r5, r1
   1eba0:	2b00      	cmp	r3, #0
   1eba2:	d1f4      	bne.n	1eb8e <pdn_state_get_parser+0x16>
   1eba4:	2200      	movs	r2, #0
   1eba6:	4b0d      	ldr	r3, [pc, #52]	; (1ebdc <pdn_state_get_parser+0x64>)
   1eba8:	702a      	strb	r2, [r5, #0]
   1ebaa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1ebae:	4a0c      	ldr	r2, [pc, #48]	; (1ebe0 <pdn_state_get_parser+0x68>)
   1ebb0:	681b      	ldr	r3, [r3, #0]
   1ebb2:	2110      	movs	r1, #16
   1ebb4:	4668      	mov	r0, sp
   1ebb6:	f007 fe8f 	bl	268d8 <snprintf>
   1ebba:	4669      	mov	r1, sp
   1ebbc:	4630      	mov	r0, r6
   1ebbe:	f008 fa25 	bl	2700c <strstr>
   1ebc2:	3000      	adds	r0, #0
   1ebc4:	bf18      	it	ne
   1ebc6:	2001      	movne	r0, #1
   1ebc8:	b004      	add	sp, #16
   1ebca:	bd70      	pop	{r4, r5, r6, pc}
   1ebcc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1ebd0:	2b00      	cmp	r3, #0
   1ebd2:	d1dc      	bne.n	1eb8e <pdn_state_get_parser+0x16>
   1ebd4:	e7e6      	b.n	1eba4 <pdn_state_get_parser+0x2c>
   1ebd6:	460d      	mov	r5, r1
   1ebd8:	e7e4      	b.n	1eba4 <pdn_state_get_parser+0x2c>
   1ebda:	bf00      	nop
   1ebdc:	20021bc0 	.word	0x20021bc0
   1ebe0:	0002f728 	.word	0x0002f728

0001ebe4 <pdn_id_get_parser>:
   1ebe4:	b570      	push	{r4, r5, r6, lr}
   1ebe6:	780b      	ldrb	r3, [r1, #0]
   1ebe8:	4606      	mov	r6, r0
   1ebea:	b313      	cbz	r3, 1ec32 <pdn_id_get_parser+0x4e>
   1ebec:	4608      	mov	r0, r1
   1ebee:	2400      	movs	r4, #0
   1ebf0:	460a      	mov	r2, r1
   1ebf2:	2b20      	cmp	r3, #32
   1ebf4:	4615      	mov	r5, r2
   1ebf6:	d017      	beq.n	1ec28 <pdn_id_get_parser+0x44>
   1ebf8:	7013      	strb	r3, [r2, #0]
   1ebfa:	3401      	adds	r4, #1
   1ebfc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1ec00:	190a      	adds	r2, r1, r4
   1ec02:	4615      	mov	r5, r2
   1ec04:	2b00      	cmp	r3, #0
   1ec06:	d1f4      	bne.n	1ebf2 <pdn_id_get_parser+0xe>
   1ec08:	2300      	movs	r3, #0
   1ec0a:	4608      	mov	r0, r1
   1ec0c:	702b      	strb	r3, [r5, #0]
   1ec0e:	213a      	movs	r1, #58	; 0x3a
   1ec10:	f007 ff3c 	bl	26a8c <strchr>
   1ec14:	b130      	cbz	r0, 1ec24 <pdn_id_get_parser+0x40>
   1ec16:	3001      	adds	r0, #1
   1ec18:	f007 f88c 	bl	25d34 <atoi>
   1ec1c:	4b06      	ldr	r3, [pc, #24]	; (1ec38 <pdn_id_get_parser+0x54>)
   1ec1e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   1ec22:	6058      	str	r0, [r3, #4]
   1ec24:	2000      	movs	r0, #0
   1ec26:	bd70      	pop	{r4, r5, r6, pc}
   1ec28:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1ec2c:	2b00      	cmp	r3, #0
   1ec2e:	d1e0      	bne.n	1ebf2 <pdn_id_get_parser+0xe>
   1ec30:	e7ea      	b.n	1ec08 <pdn_id_get_parser+0x24>
   1ec32:	460d      	mov	r5, r1
   1ec34:	e7e8      	b.n	1ec08 <pdn_id_get_parser+0x24>
   1ec36:	bf00      	nop
   1ec38:	20021bc0 	.word	0x20021bc0

0001ec3c <context_create_parser>:
   1ec3c:	b570      	push	{r4, r5, r6, lr}
   1ec3e:	780b      	ldrb	r3, [r1, #0]
   1ec40:	4606      	mov	r6, r0
   1ec42:	b313      	cbz	r3, 1ec8a <context_create_parser+0x4e>
   1ec44:	4608      	mov	r0, r1
   1ec46:	2400      	movs	r4, #0
   1ec48:	460a      	mov	r2, r1
   1ec4a:	2b20      	cmp	r3, #32
   1ec4c:	4615      	mov	r5, r2
   1ec4e:	d017      	beq.n	1ec80 <context_create_parser+0x44>
   1ec50:	7013      	strb	r3, [r2, #0]
   1ec52:	3401      	adds	r4, #1
   1ec54:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1ec58:	190a      	adds	r2, r1, r4
   1ec5a:	4615      	mov	r5, r2
   1ec5c:	2b00      	cmp	r3, #0
   1ec5e:	d1f4      	bne.n	1ec4a <context_create_parser+0xe>
   1ec60:	2300      	movs	r3, #0
   1ec62:	4608      	mov	r0, r1
   1ec64:	702b      	strb	r3, [r5, #0]
   1ec66:	213a      	movs	r1, #58	; 0x3a
   1ec68:	f007 ff10 	bl	26a8c <strchr>
   1ec6c:	b130      	cbz	r0, 1ec7c <context_create_parser+0x40>
   1ec6e:	4b08      	ldr	r3, [pc, #32]	; (1ec90 <context_create_parser+0x54>)
   1ec70:	3001      	adds	r0, #1
   1ec72:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   1ec76:	f007 f85d 	bl	25d34 <atoi>
   1ec7a:	6020      	str	r0, [r4, #0]
   1ec7c:	2000      	movs	r0, #0
   1ec7e:	bd70      	pop	{r4, r5, r6, pc}
   1ec80:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1ec84:	2b00      	cmp	r3, #0
   1ec86:	d1e0      	bne.n	1ec4a <context_create_parser+0xe>
   1ec88:	e7ea      	b.n	1ec60 <context_create_parser+0x24>
   1ec8a:	460d      	mov	r5, r1
   1ec8c:	e7e8      	b.n	1ec60 <context_create_parser+0x24>
   1ec8e:	bf00      	nop
   1ec90:	20021bc0 	.word	0x20021bc0

0001ec94 <pdn_interface_init>:
   1ec94:	f04f 33ff 	mov.w	r3, #4294967295
   1ec98:	b510      	push	{r4, lr}
   1ec9a:	4c0b      	ldr	r4, [pc, #44]	; (1ecc8 <pdn_interface_init+0x34>)
   1ec9c:	2228      	movs	r2, #40	; 0x28
   1ec9e:	2100      	movs	r1, #0
   1eca0:	480a      	ldr	r0, [pc, #40]	; (1eccc <pdn_interface_init+0x38>)
   1eca2:	6023      	str	r3, [r4, #0]
   1eca4:	f007 fba8 	bl	263f8 <memset>
   1eca8:	f240 2201 	movw	r2, #513	; 0x201
   1ecac:	2102      	movs	r1, #2
   1ecae:	2066      	movs	r0, #102	; 0x66
   1ecb0:	f7ff fdac 	bl	1e80c <at_interface_open>
   1ecb4:	2800      	cmp	r0, #0
   1ecb6:	6020      	str	r0, [r4, #0]
   1ecb8:	db04      	blt.n	1ecc4 <pdn_interface_init+0x30>
   1ecba:	2201      	movs	r2, #1
   1ecbc:	4b04      	ldr	r3, [pc, #16]	; (1ecd0 <pdn_interface_init+0x3c>)
   1ecbe:	2000      	movs	r0, #0
   1ecc0:	701a      	strb	r2, [r3, #0]
   1ecc2:	bd10      	pop	{r4, pc}
   1ecc4:	2003      	movs	r0, #3
   1ecc6:	bd10      	pop	{r4, pc}
   1ecc8:	20021abc 	.word	0x20021abc
   1eccc:	20021bc0 	.word	0x20021bc0
   1ecd0:	2002629e 	.word	0x2002629e

0001ecd4 <pdn_interface_open>:
   1ecd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ecd8:	4b68      	ldr	r3, [pc, #416]	; (1ee7c <pdn_interface_open+0x1a8>)
   1ecda:	b083      	sub	sp, #12
   1ecdc:	781b      	ldrb	r3, [r3, #0]
   1ecde:	2b00      	cmp	r3, #0
   1ece0:	f000 80c5 	beq.w	1ee6e <pdn_interface_open+0x19a>
   1ece4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1ece8:	f040 80b0 	bne.w	1ee4c <pdn_interface_open+0x178>
   1ecec:	4c64      	ldr	r4, [pc, #400]	; (1ee80 <pdn_interface_open+0x1ac>)
   1ecee:	6825      	ldr	r5, [r4, #0]
   1ecf0:	b34d      	cbz	r5, 1ed46 <pdn_interface_open+0x72>
   1ecf2:	6863      	ldr	r3, [r4, #4]
   1ecf4:	2b00      	cmp	r3, #0
   1ecf6:	f000 809b 	beq.w	1ee30 <pdn_interface_open+0x15c>
   1ecfa:	68a3      	ldr	r3, [r4, #8]
   1ecfc:	2b00      	cmp	r3, #0
   1ecfe:	f000 8099 	beq.w	1ee34 <pdn_interface_open+0x160>
   1ed02:	68e3      	ldr	r3, [r4, #12]
   1ed04:	2b00      	cmp	r3, #0
   1ed06:	f000 8097 	beq.w	1ee38 <pdn_interface_open+0x164>
   1ed0a:	6923      	ldr	r3, [r4, #16]
   1ed0c:	2b00      	cmp	r3, #0
   1ed0e:	f000 8095 	beq.w	1ee3c <pdn_interface_open+0x168>
   1ed12:	6963      	ldr	r3, [r4, #20]
   1ed14:	2b00      	cmp	r3, #0
   1ed16:	f000 8093 	beq.w	1ee40 <pdn_interface_open+0x16c>
   1ed1a:	69a3      	ldr	r3, [r4, #24]
   1ed1c:	2b00      	cmp	r3, #0
   1ed1e:	f000 8091 	beq.w	1ee44 <pdn_interface_open+0x170>
   1ed22:	69e3      	ldr	r3, [r4, #28]
   1ed24:	2b00      	cmp	r3, #0
   1ed26:	f000 808f 	beq.w	1ee48 <pdn_interface_open+0x174>
   1ed2a:	6a23      	ldr	r3, [r4, #32]
   1ed2c:	b153      	cbz	r3, 1ed44 <pdn_interface_open+0x70>
   1ed2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ed30:	2509      	movs	r5, #9
   1ed32:	b143      	cbz	r3, 1ed46 <pdn_interface_open+0x72>
   1ed34:	200c      	movs	r0, #12
   1ed36:	f7f7 fee9 	bl	16b0c <bsd_os_errno_set>
   1ed3a:	f04f 30ff 	mov.w	r0, #4294967295
   1ed3e:	b003      	add	sp, #12
   1ed40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ed44:	2508      	movs	r5, #8
   1ed46:	2020      	movs	r0, #32
   1ed48:	f002 fa7a 	bl	21240 <nrf_malloc>
   1ed4c:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   1ed50:	2800      	cmp	r0, #0
   1ed52:	d0ef      	beq.n	1ed34 <pdn_interface_open+0x60>
   1ed54:	2220      	movs	r2, #32
   1ed56:	2100      	movs	r1, #0
   1ed58:	f007 fb4e 	bl	263f8 <memset>
   1ed5c:	2101      	movs	r1, #1
   1ed5e:	2003      	movs	r0, #3
   1ed60:	f04f 37ff 	mov.w	r7, #4294967295
   1ed64:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   1ed68:	4b46      	ldr	r3, [pc, #280]	; (1ee84 <pdn_interface_open+0x1b0>)
   1ed6a:	6091      	str	r1, [r2, #8]
   1ed6c:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
   1ed70:	4a45      	ldr	r2, [pc, #276]	; (1ee88 <pdn_interface_open+0x1b4>)
   1ed72:	60c8      	str	r0, [r1, #12]
   1ed74:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1ed78:	f44f 7180 	mov.w	r1, #256	; 0x100
   1ed7c:	6047      	str	r7, [r0, #4]
   1ed7e:	f8df 8118 	ldr.w	r8, [pc, #280]	; 1ee98 <pdn_interface_open+0x1c4>
   1ed82:	4842      	ldr	r0, [pc, #264]	; (1ee8c <pdn_interface_open+0x1b8>)
   1ed84:	f007 fda8 	bl	268d8 <snprintf>
   1ed88:	4840      	ldr	r0, [pc, #256]	; (1ee8c <pdn_interface_open+0x1b8>)
   1ed8a:	f8d8 9000 	ldr.w	r9, [r8]
   1ed8e:	2600      	movs	r6, #0
   1ed90:	f007 ff42 	bl	26c18 <strlen>
   1ed94:	4633      	mov	r3, r6
   1ed96:	4602      	mov	r2, r0
   1ed98:	493c      	ldr	r1, [pc, #240]	; (1ee8c <pdn_interface_open+0x1b8>)
   1ed9a:	4648      	mov	r0, r9
   1ed9c:	9601      	str	r6, [sp, #4]
   1ed9e:	9600      	str	r6, [sp, #0]
   1eda0:	f7ff fcac 	bl	1e6fc <at_interface_write>
   1eda4:	4681      	mov	r9, r0
   1eda6:	4839      	ldr	r0, [pc, #228]	; (1ee8c <pdn_interface_open+0x1b8>)
   1eda8:	f007 ff36 	bl	26c18 <strlen>
   1edac:	4548      	cmp	r0, r9
   1edae:	d153      	bne.n	1ee58 <pdn_interface_open+0x184>
   1edb0:	4633      	mov	r3, r6
   1edb2:	e9cd 6600 	strd	r6, r6, [sp]
   1edb6:	f44f 7280 	mov.w	r2, #256	; 0x100
   1edba:	4934      	ldr	r1, [pc, #208]	; (1ee8c <pdn_interface_open+0x1b8>)
   1edbc:	f8d8 0000 	ldr.w	r0, [r8]
   1edc0:	f7ff fdf0 	bl	1e9a4 <at_interface_read>
   1edc4:	4606      	mov	r6, r0
   1edc6:	4832      	ldr	r0, [pc, #200]	; (1ee90 <pdn_interface_open+0x1bc>)
   1edc8:	f007 ff26 	bl	26c18 <strlen>
   1edcc:	4286      	cmp	r6, r0
   1edce:	db15      	blt.n	1edfc <pdn_interface_open+0x128>
   1edd0:	4602      	mov	r2, r0
   1edd2:	492e      	ldr	r1, [pc, #184]	; (1ee8c <pdn_interface_open+0x1b8>)
   1edd4:	482e      	ldr	r0, [pc, #184]	; (1ee90 <pdn_interface_open+0x1bc>)
   1edd6:	f007 ff4d 	bl	26c74 <strncmp>
   1edda:	b978      	cbnz	r0, 1edfc <pdn_interface_open+0x128>
   1eddc:	492b      	ldr	r1, [pc, #172]	; (1ee8c <pdn_interface_open+0x1b8>)
   1edde:	4628      	mov	r0, r5
   1ede0:	f7ff ff2c 	bl	1ec3c <context_create_parser>
   1ede4:	b9b0      	cbnz	r0, 1ee14 <pdn_interface_open+0x140>
   1ede6:	2202      	movs	r2, #2
   1ede8:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1edec:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   1edf0:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   1edf4:	609a      	str	r2, [r3, #8]
   1edf6:	b003      	add	sp, #12
   1edf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1edfc:	4825      	ldr	r0, [pc, #148]	; (1ee94 <pdn_interface_open+0x1c0>)
   1edfe:	f007 ff0b 	bl	26c18 <strlen>
   1ee02:	4922      	ldr	r1, [pc, #136]	; (1ee8c <pdn_interface_open+0x1b8>)
   1ee04:	4602      	mov	r2, r0
   1ee06:	4823      	ldr	r0, [pc, #140]	; (1ee94 <pdn_interface_open+0x1c0>)
   1ee08:	f007 ff34 	bl	26c74 <strncmp>
   1ee0c:	b960      	cbnz	r0, 1ee28 <pdn_interface_open+0x154>
   1ee0e:	2008      	movs	r0, #8
   1ee10:	f7f7 fe7c 	bl	16b0c <bsd_os_errno_set>
   1ee14:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1ee18:	f002 fa1c 	bl	21254 <nrf_free>
   1ee1c:	2300      	movs	r3, #0
   1ee1e:	f04f 30ff 	mov.w	r0, #4294967295
   1ee22:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   1ee26:	e78a      	b.n	1ed3e <pdn_interface_open+0x6a>
   1ee28:	2005      	movs	r0, #5
   1ee2a:	f7f7 fe6f 	bl	16b0c <bsd_os_errno_set>
   1ee2e:	e7f1      	b.n	1ee14 <pdn_interface_open+0x140>
   1ee30:	2501      	movs	r5, #1
   1ee32:	e788      	b.n	1ed46 <pdn_interface_open+0x72>
   1ee34:	2502      	movs	r5, #2
   1ee36:	e786      	b.n	1ed46 <pdn_interface_open+0x72>
   1ee38:	2503      	movs	r5, #3
   1ee3a:	e784      	b.n	1ed46 <pdn_interface_open+0x72>
   1ee3c:	2504      	movs	r5, #4
   1ee3e:	e782      	b.n	1ed46 <pdn_interface_open+0x72>
   1ee40:	2505      	movs	r5, #5
   1ee42:	e780      	b.n	1ed46 <pdn_interface_open+0x72>
   1ee44:	2506      	movs	r5, #6
   1ee46:	e77e      	b.n	1ed46 <pdn_interface_open+0x72>
   1ee48:	2507      	movs	r5, #7
   1ee4a:	e77c      	b.n	1ed46 <pdn_interface_open+0x72>
   1ee4c:	2029      	movs	r0, #41	; 0x29
   1ee4e:	f7f7 fe5d 	bl	16b0c <bsd_os_errno_set>
   1ee52:	f04f 30ff 	mov.w	r0, #4294967295
   1ee56:	e772      	b.n	1ed3e <pdn_interface_open+0x6a>
   1ee58:	2005      	movs	r0, #5
   1ee5a:	f7f7 fe57 	bl	16b0c <bsd_os_errno_set>
   1ee5e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1ee62:	f002 f9f7 	bl	21254 <nrf_free>
   1ee66:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   1ee6a:	4638      	mov	r0, r7
   1ee6c:	e767      	b.n	1ed3e <pdn_interface_open+0x6a>
   1ee6e:	2070      	movs	r0, #112	; 0x70
   1ee70:	f7f7 fe4c 	bl	16b0c <bsd_os_errno_set>
   1ee74:	f04f 30ff 	mov.w	r0, #4294967295
   1ee78:	e761      	b.n	1ed3e <pdn_interface_open+0x6a>
   1ee7a:	bf00      	nop
   1ee7c:	2002629e 	.word	0x2002629e
   1ee80:	20021bc0 	.word	0x20021bc0
   1ee84:	0002f704 	.word	0x0002f704
   1ee88:	0002f710 	.word	0x0002f710
   1ee8c:	20021ac0 	.word	0x20021ac0
   1ee90:	0002f714 	.word	0x0002f714
   1ee94:	0002f720 	.word	0x0002f720
   1ee98:	20021abc 	.word	0x20021abc

0001ee9c <pdn_interface_connect>:
   1ee9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eea0:	b085      	sub	sp, #20
   1eea2:	2900      	cmp	r1, #0
   1eea4:	f000 81f3 	beq.w	1f28e <pdn_interface_connect+0x3f2>
   1eea8:	2a64      	cmp	r2, #100	; 0x64
   1eeaa:	4690      	mov	r8, r2
   1eeac:	f200 81ef 	bhi.w	1f28e <pdn_interface_connect+0x3f2>
   1eeb0:	0c03      	lsrs	r3, r0, #16
   1eeb2:	4ab1      	ldr	r2, [pc, #708]	; (1f178 <pdn_interface_connect+0x2dc>)
   1eeb4:	041b      	lsls	r3, r3, #16
   1eeb6:	4293      	cmp	r3, r2
   1eeb8:	f040 8154 	bne.w	1f164 <pdn_interface_connect+0x2c8>
   1eebc:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1eec0:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1eec4:	2c09      	cmp	r4, #9
   1eec6:	f300 814d 	bgt.w	1f164 <pdn_interface_connect+0x2c8>
   1eeca:	4fac      	ldr	r7, [pc, #688]	; (1f17c <pdn_interface_connect+0x2e0>)
   1eecc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1eed0:	2b00      	cmp	r3, #0
   1eed2:	f000 8147 	beq.w	1f164 <pdn_interface_connect+0x2c8>
   1eed6:	689a      	ldr	r2, [r3, #8]
   1eed8:	2a00      	cmp	r2, #0
   1eeda:	f000 8143 	beq.w	1f164 <pdn_interface_connect+0x2c8>
   1eede:	689b      	ldr	r3, [r3, #8]
   1eee0:	2b02      	cmp	r3, #2
   1eee2:	f040 813f 	bne.w	1f164 <pdn_interface_connect+0x2c8>
   1eee6:	4da6      	ldr	r5, [pc, #664]	; (1f180 <pdn_interface_connect+0x2e4>)
   1eee8:	4ba6      	ldr	r3, [pc, #664]	; (1f184 <pdn_interface_connect+0x2e8>)
   1eeea:	4aa7      	ldr	r2, [pc, #668]	; (1f188 <pdn_interface_connect+0x2ec>)
   1eeec:	4689      	mov	r9, r1
   1eeee:	4628      	mov	r0, r5
   1eef0:	f44f 7180 	mov.w	r1, #256	; 0x100
   1eef4:	f007 fcf0 	bl	268d8 <snprintf>
   1eef8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1eefc:	4606      	mov	r6, r0
   1eefe:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1ef02:	681b      	ldr	r3, [r3, #0]
   1ef04:	4aa1      	ldr	r2, [pc, #644]	; (1f18c <pdn_interface_connect+0x2f0>)
   1ef06:	1828      	adds	r0, r5, r0
   1ef08:	f007 fce6 	bl	268d8 <snprintf>
   1ef0c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1ef10:	4406      	add	r6, r0
   1ef12:	68db      	ldr	r3, [r3, #12]
   1ef14:	f003 0203 	and.w	r2, r3, #3
   1ef18:	2a03      	cmp	r2, #3
   1ef1a:	f000 811a 	beq.w	1f152 <pdn_interface_connect+0x2b6>
   1ef1e:	079b      	lsls	r3, r3, #30
   1ef20:	bf4c      	ite	mi
   1ef22:	4b9b      	ldrmi	r3, [pc, #620]	; (1f190 <pdn_interface_connect+0x2f4>)
   1ef24:	4b9b      	ldrpl	r3, [pc, #620]	; (1f194 <pdn_interface_connect+0x2f8>)
   1ef26:	19a8      	adds	r0, r5, r6
   1ef28:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   1ef2c:	4a9a      	ldr	r2, [pc, #616]	; (1f198 <pdn_interface_connect+0x2fc>)
   1ef2e:	f007 fcd3 	bl	268d8 <snprintf>
   1ef32:	1833      	adds	r3, r6, r0
   1ef34:	eb08 0203 	add.w	r2, r8, r3
   1ef38:	2afd      	cmp	r2, #253	; 0xfd
   1ef3a:	f300 81a5 	bgt.w	1f288 <pdn_interface_connect+0x3ec>
   1ef3e:	2122      	movs	r1, #34	; 0x22
   1ef40:	1c5e      	adds	r6, r3, #1
   1ef42:	54e9      	strb	r1, [r5, r3]
   1ef44:	4642      	mov	r2, r8
   1ef46:	19a8      	adds	r0, r5, r6
   1ef48:	4649      	mov	r1, r9
   1ef4a:	f007 fecd 	bl	26ce8 <strncpy>
   1ef4e:	eb08 0306 	add.w	r3, r8, r6
   1ef52:	18ea      	adds	r2, r5, r3
   1ef54:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   1ef58:	b902      	cbnz	r2, 1ef5c <pdn_interface_connect+0xc0>
   1ef5a:	3b01      	subs	r3, #1
   1ef5c:	2600      	movs	r6, #0
   1ef5e:	2122      	movs	r1, #34	; 0x22
   1ef60:	18ea      	adds	r2, r5, r3
   1ef62:	f8df a254 	ldr.w	sl, [pc, #596]	; 1f1b8 <pdn_interface_connect+0x31c>
   1ef66:	54e9      	strb	r1, [r5, r3]
   1ef68:	4885      	ldr	r0, [pc, #532]	; (1f180 <pdn_interface_connect+0x2e4>)
   1ef6a:	7056      	strb	r6, [r2, #1]
   1ef6c:	f8da b000 	ldr.w	fp, [sl]
   1ef70:	f007 fe52 	bl	26c18 <strlen>
   1ef74:	4633      	mov	r3, r6
   1ef76:	4602      	mov	r2, r0
   1ef78:	4981      	ldr	r1, [pc, #516]	; (1f180 <pdn_interface_connect+0x2e4>)
   1ef7a:	4658      	mov	r0, fp
   1ef7c:	9601      	str	r6, [sp, #4]
   1ef7e:	9600      	str	r6, [sp, #0]
   1ef80:	f7ff fbbc 	bl	1e6fc <at_interface_write>
   1ef84:	4683      	mov	fp, r0
   1ef86:	487e      	ldr	r0, [pc, #504]	; (1f180 <pdn_interface_connect+0x2e4>)
   1ef88:	f007 fe46 	bl	26c18 <strlen>
   1ef8c:	4558      	cmp	r0, fp
   1ef8e:	d008      	beq.n	1efa2 <pdn_interface_connect+0x106>
   1ef90:	2005      	movs	r0, #5
   1ef92:	f7f7 fdbb 	bl	16b0c <bsd_os_errno_set>
   1ef96:	f04f 3bff 	mov.w	fp, #4294967295
   1ef9a:	4658      	mov	r0, fp
   1ef9c:	b005      	add	sp, #20
   1ef9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efa2:	4633      	mov	r3, r6
   1efa4:	e9cd 6600 	strd	r6, r6, [sp]
   1efa8:	f44f 7280 	mov.w	r2, #256	; 0x100
   1efac:	4974      	ldr	r1, [pc, #464]	; (1f180 <pdn_interface_connect+0x2e4>)
   1efae:	f8da 0000 	ldr.w	r0, [sl]
   1efb2:	f7ff fcf7 	bl	1e9a4 <at_interface_read>
   1efb6:	4606      	mov	r6, r0
   1efb8:	4878      	ldr	r0, [pc, #480]	; (1f19c <pdn_interface_connect+0x300>)
   1efba:	f007 fe2d 	bl	26c18 <strlen>
   1efbe:	4286      	cmp	r6, r0
   1efc0:	da0f      	bge.n	1efe2 <pdn_interface_connect+0x146>
   1efc2:	4877      	ldr	r0, [pc, #476]	; (1f1a0 <pdn_interface_connect+0x304>)
   1efc4:	f007 fe28 	bl	26c18 <strlen>
   1efc8:	496d      	ldr	r1, [pc, #436]	; (1f180 <pdn_interface_connect+0x2e4>)
   1efca:	4602      	mov	r2, r0
   1efcc:	4874      	ldr	r0, [pc, #464]	; (1f1a0 <pdn_interface_connect+0x304>)
   1efce:	f007 fe51 	bl	26c74 <strncmp>
   1efd2:	2800      	cmp	r0, #0
   1efd4:	d1dc      	bne.n	1ef90 <pdn_interface_connect+0xf4>
   1efd6:	2008      	movs	r0, #8
   1efd8:	f7f7 fd98 	bl	16b0c <bsd_os_errno_set>
   1efdc:	f04f 3bff 	mov.w	fp, #4294967295
   1efe0:	e7db      	b.n	1ef9a <pdn_interface_connect+0xfe>
   1efe2:	4602      	mov	r2, r0
   1efe4:	4966      	ldr	r1, [pc, #408]	; (1f180 <pdn_interface_connect+0x2e4>)
   1efe6:	486d      	ldr	r0, [pc, #436]	; (1f19c <pdn_interface_connect+0x300>)
   1efe8:	f007 fe44 	bl	26c74 <strncmp>
   1efec:	2800      	cmp	r0, #0
   1efee:	d1e8      	bne.n	1efc2 <pdn_interface_connect+0x126>
   1eff0:	4963      	ldr	r1, [pc, #396]	; (1f180 <pdn_interface_connect+0x2e4>)
   1eff2:	4620      	mov	r0, r4
   1eff4:	f7ff fdbe 	bl	1eb74 <ok_rsp_parser>
   1eff8:	4683      	mov	fp, r0
   1effa:	2800      	cmp	r0, #0
   1effc:	d1cd      	bne.n	1ef9a <pdn_interface_connect+0xfe>
   1effe:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f002:	7c1b      	ldrb	r3, [r3, #16]
   1f004:	2b00      	cmp	r3, #0
   1f006:	f040 80d9 	bne.w	1f1bc <pdn_interface_connect+0x320>
   1f00a:	4b66      	ldr	r3, [pc, #408]	; (1f1a4 <pdn_interface_connect+0x308>)
   1f00c:	4a5e      	ldr	r2, [pc, #376]	; (1f188 <pdn_interface_connect+0x2ec>)
   1f00e:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f012:	485b      	ldr	r0, [pc, #364]	; (1f180 <pdn_interface_connect+0x2e4>)
   1f014:	f007 fc60 	bl	268d8 <snprintf>
   1f018:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f01c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1f020:	4a61      	ldr	r2, [pc, #388]	; (1f1a8 <pdn_interface_connect+0x30c>)
   1f022:	681b      	ldr	r3, [r3, #0]
   1f024:	4428      	add	r0, r5
   1f026:	f007 fc57 	bl	268d8 <snprintf>
   1f02a:	f8da 3000 	ldr.w	r3, [sl]
   1f02e:	4854      	ldr	r0, [pc, #336]	; (1f180 <pdn_interface_connect+0x2e4>)
   1f030:	2600      	movs	r6, #0
   1f032:	9303      	str	r3, [sp, #12]
   1f034:	f007 fdf0 	bl	26c18 <strlen>
   1f038:	9b03      	ldr	r3, [sp, #12]
   1f03a:	4602      	mov	r2, r0
   1f03c:	4950      	ldr	r1, [pc, #320]	; (1f180 <pdn_interface_connect+0x2e4>)
   1f03e:	4618      	mov	r0, r3
   1f040:	9601      	str	r6, [sp, #4]
   1f042:	4633      	mov	r3, r6
   1f044:	9600      	str	r6, [sp, #0]
   1f046:	f7ff fb59 	bl	1e6fc <at_interface_write>
   1f04a:	9003      	str	r0, [sp, #12]
   1f04c:	484c      	ldr	r0, [pc, #304]	; (1f180 <pdn_interface_connect+0x2e4>)
   1f04e:	f007 fde3 	bl	26c18 <strlen>
   1f052:	9b03      	ldr	r3, [sp, #12]
   1f054:	4298      	cmp	r0, r3
   1f056:	d19b      	bne.n	1ef90 <pdn_interface_connect+0xf4>
   1f058:	4633      	mov	r3, r6
   1f05a:	e9cd 6600 	strd	r6, r6, [sp]
   1f05e:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f062:	4947      	ldr	r1, [pc, #284]	; (1f180 <pdn_interface_connect+0x2e4>)
   1f064:	f8da 0000 	ldr.w	r0, [sl]
   1f068:	f7ff fc9c 	bl	1e9a4 <at_interface_read>
   1f06c:	4606      	mov	r6, r0
   1f06e:	484b      	ldr	r0, [pc, #300]	; (1f19c <pdn_interface_connect+0x300>)
   1f070:	f007 fdd2 	bl	26c18 <strlen>
   1f074:	4286      	cmp	r6, r0
   1f076:	dba4      	blt.n	1efc2 <pdn_interface_connect+0x126>
   1f078:	4602      	mov	r2, r0
   1f07a:	4941      	ldr	r1, [pc, #260]	; (1f180 <pdn_interface_connect+0x2e4>)
   1f07c:	4847      	ldr	r0, [pc, #284]	; (1f19c <pdn_interface_connect+0x300>)
   1f07e:	f007 fdf9 	bl	26c74 <strncmp>
   1f082:	4606      	mov	r6, r0
   1f084:	2800      	cmp	r0, #0
   1f086:	d19c      	bne.n	1efc2 <pdn_interface_connect+0x126>
   1f088:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   1f08c:	f108 0320 	add.w	r3, r8, #32
   1f090:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   1f094:	4413      	add	r3, r2
   1f096:	4419      	add	r1, r3
   1f098:	f002 f8e8 	bl	2126c <nrf_realloc>
   1f09c:	2800      	cmp	r0, #0
   1f09e:	f000 80fc 	beq.w	1f29a <pdn_interface_connect+0x3fe>
   1f0a2:	2303      	movs	r3, #3
   1f0a4:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   1f0a8:	6083      	str	r3, [r0, #8]
   1f0aa:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f0ae:	4649      	mov	r1, r9
   1f0b0:	f8c3 801c 	str.w	r8, [r3, #28]
   1f0b4:	f857 c024 	ldr.w	ip, [r7, r4, lsl #2]
   1f0b8:	4642      	mov	r2, r8
   1f0ba:	e9dc 0305 	ldrd	r0, r3, [ip, #20]
   1f0be:	4418      	add	r0, r3
   1f0c0:	4603      	mov	r3, r0
   1f0c2:	3320      	adds	r3, #32
   1f0c4:	eb0c 0003 	add.w	r0, ip, r3
   1f0c8:	f7ed fd40 	bl	cb4c <memcpy>
   1f0cc:	4b37      	ldr	r3, [pc, #220]	; (1f1ac <pdn_interface_connect+0x310>)
   1f0ce:	4a2e      	ldr	r2, [pc, #184]	; (1f188 <pdn_interface_connect+0x2ec>)
   1f0d0:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f0d4:	482a      	ldr	r0, [pc, #168]	; (1f180 <pdn_interface_connect+0x2e4>)
   1f0d6:	f007 fbff 	bl	268d8 <snprintf>
   1f0da:	4601      	mov	r1, r0
   1f0dc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f0e0:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   1f0e4:	681b      	ldr	r3, [r3, #0]
   1f0e6:	4a30      	ldr	r2, [pc, #192]	; (1f1a8 <pdn_interface_connect+0x30c>)
   1f0e8:	1828      	adds	r0, r5, r0
   1f0ea:	f007 fbf5 	bl	268d8 <snprintf>
   1f0ee:	4824      	ldr	r0, [pc, #144]	; (1f180 <pdn_interface_connect+0x2e4>)
   1f0f0:	f8da 5000 	ldr.w	r5, [sl]
   1f0f4:	f007 fd90 	bl	26c18 <strlen>
   1f0f8:	4633      	mov	r3, r6
   1f0fa:	4602      	mov	r2, r0
   1f0fc:	4920      	ldr	r1, [pc, #128]	; (1f180 <pdn_interface_connect+0x2e4>)
   1f0fe:	4628      	mov	r0, r5
   1f100:	9601      	str	r6, [sp, #4]
   1f102:	9600      	str	r6, [sp, #0]
   1f104:	f7ff fafa 	bl	1e6fc <at_interface_write>
   1f108:	4605      	mov	r5, r0
   1f10a:	481d      	ldr	r0, [pc, #116]	; (1f180 <pdn_interface_connect+0x2e4>)
   1f10c:	f007 fd84 	bl	26c18 <strlen>
   1f110:	42a8      	cmp	r0, r5
   1f112:	f040 80d2 	bne.w	1f2ba <pdn_interface_connect+0x41e>
   1f116:	4633      	mov	r3, r6
   1f118:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f11c:	4918      	ldr	r1, [pc, #96]	; (1f180 <pdn_interface_connect+0x2e4>)
   1f11e:	f8da 0000 	ldr.w	r0, [sl]
   1f122:	e9cd 6600 	strd	r6, r6, [sp]
   1f126:	f7ff fc3d 	bl	1e9a4 <at_interface_read>
   1f12a:	4605      	mov	r5, r0
   1f12c:	4820      	ldr	r0, [pc, #128]	; (1f1b0 <pdn_interface_connect+0x314>)
   1f12e:	f007 fd73 	bl	26c18 <strlen>
   1f132:	4285      	cmp	r5, r0
   1f134:	f2c0 80b4 	blt.w	1f2a0 <pdn_interface_connect+0x404>
   1f138:	4602      	mov	r2, r0
   1f13a:	4911      	ldr	r1, [pc, #68]	; (1f180 <pdn_interface_connect+0x2e4>)
   1f13c:	481c      	ldr	r0, [pc, #112]	; (1f1b0 <pdn_interface_connect+0x314>)
   1f13e:	f007 fd99 	bl	26c74 <strncmp>
   1f142:	2800      	cmp	r0, #0
   1f144:	f040 80ac 	bne.w	1f2a0 <pdn_interface_connect+0x404>
   1f148:	4620      	mov	r0, r4
   1f14a:	490d      	ldr	r1, [pc, #52]	; (1f180 <pdn_interface_connect+0x2e4>)
   1f14c:	f7ff fd4a 	bl	1ebe4 <pdn_id_get_parser>
   1f150:	e723      	b.n	1ef9a <pdn_interface_connect+0xfe>
   1f152:	4b18      	ldr	r3, [pc, #96]	; (1f1b4 <pdn_interface_connect+0x318>)
   1f154:	4a10      	ldr	r2, [pc, #64]	; (1f198 <pdn_interface_connect+0x2fc>)
   1f156:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   1f15a:	19a8      	adds	r0, r5, r6
   1f15c:	f007 fbbc 	bl	268d8 <snprintf>
   1f160:	1833      	adds	r3, r6, r0
   1f162:	e6e7      	b.n	1ef34 <pdn_interface_connect+0x98>
   1f164:	f04f 3bff 	mov.w	fp, #4294967295
   1f168:	2009      	movs	r0, #9
   1f16a:	f7f7 fccf 	bl	16b0c <bsd_os_errno_set>
   1f16e:	4658      	mov	r0, fp
   1f170:	b005      	add	sp, #20
   1f172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f176:	bf00      	nop
   1f178:	789a0000 	.word	0x789a0000
   1f17c:	20021bc0 	.word	0x20021bc0
   1f180:	20021ac0 	.word	0x20021ac0
   1f184:	0002f678 	.word	0x0002f678
   1f188:	0002f710 	.word	0x0002f710
   1f18c:	0002f684 	.word	0x0002f684
   1f190:	0002f698 	.word	0x0002f698
   1f194:	0002f6a0 	.word	0x0002f6a0
   1f198:	0002f690 	.word	0x0002f690
   1f19c:	0002f6a4 	.word	0x0002f6a4
   1f1a0:	0002f720 	.word	0x0002f720
   1f1a4:	0002f6c4 	.word	0x0002f6c4
   1f1a8:	0002f6d0 	.word	0x0002f6d0
   1f1ac:	0002f6d4 	.word	0x0002f6d4
   1f1b0:	0002f6e4 	.word	0x0002f6e4
   1f1b4:	0002f688 	.word	0x0002f688
   1f1b8:	20021abc 	.word	0x20021abc
   1f1bc:	4b41      	ldr	r3, [pc, #260]	; (1f2c4 <pdn_interface_connect+0x428>)
   1f1be:	4a42      	ldr	r2, [pc, #264]	; (1f2c8 <pdn_interface_connect+0x42c>)
   1f1c0:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f1c4:	4841      	ldr	r0, [pc, #260]	; (1f2cc <pdn_interface_connect+0x430>)
   1f1c6:	f007 fb87 	bl	268d8 <snprintf>
   1f1ca:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f1ce:	4a40      	ldr	r2, [pc, #256]	; (1f2d0 <pdn_interface_connect+0x434>)
   1f1d0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1f1d4:	4606      	mov	r6, r0
   1f1d6:	681b      	ldr	r3, [r3, #0]
   1f1d8:	1828      	adds	r0, r5, r0
   1f1da:	f007 fb7d 	bl	268d8 <snprintf>
   1f1de:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f1e2:	4406      	add	r6, r0
   1f1e4:	7c1b      	ldrb	r3, [r3, #16]
   1f1e6:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   1f1ea:	2b01      	cmp	r3, #1
   1f1ec:	bf0c      	ite	eq
   1f1ee:	4a39      	ldreq	r2, [pc, #228]	; (1f2d4 <pdn_interface_connect+0x438>)
   1f1f0:	4a39      	ldrne	r2, [pc, #228]	; (1f2d8 <pdn_interface_connect+0x43c>)
   1f1f2:	19a8      	adds	r0, r5, r6
   1f1f4:	f007 fb70 	bl	268d8 <snprintf>
   1f1f8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f1fc:	4406      	add	r6, r0
   1f1fe:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   1f202:	4a36      	ldr	r2, [pc, #216]	; (1f2dc <pdn_interface_connect+0x440>)
   1f204:	3320      	adds	r3, #32
   1f206:	19a8      	adds	r0, r5, r6
   1f208:	f007 fb66 	bl	268d8 <snprintf>
   1f20c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f210:	4430      	add	r0, r6
   1f212:	695a      	ldr	r2, [r3, #20]
   1f214:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1f218:	3220      	adds	r2, #32
   1f21a:	4413      	add	r3, r2
   1f21c:	4428      	add	r0, r5
   1f21e:	4a30      	ldr	r2, [pc, #192]	; (1f2e0 <pdn_interface_connect+0x444>)
   1f220:	f007 fb5a 	bl	268d8 <snprintf>
   1f224:	f8da 3000 	ldr.w	r3, [sl]
   1f228:	4828      	ldr	r0, [pc, #160]	; (1f2cc <pdn_interface_connect+0x430>)
   1f22a:	2600      	movs	r6, #0
   1f22c:	9303      	str	r3, [sp, #12]
   1f22e:	f007 fcf3 	bl	26c18 <strlen>
   1f232:	9b03      	ldr	r3, [sp, #12]
   1f234:	4602      	mov	r2, r0
   1f236:	4925      	ldr	r1, [pc, #148]	; (1f2cc <pdn_interface_connect+0x430>)
   1f238:	4618      	mov	r0, r3
   1f23a:	9601      	str	r6, [sp, #4]
   1f23c:	4633      	mov	r3, r6
   1f23e:	9600      	str	r6, [sp, #0]
   1f240:	f7ff fa5c 	bl	1e6fc <at_interface_write>
   1f244:	9003      	str	r0, [sp, #12]
   1f246:	4821      	ldr	r0, [pc, #132]	; (1f2cc <pdn_interface_connect+0x430>)
   1f248:	f007 fce6 	bl	26c18 <strlen>
   1f24c:	9b03      	ldr	r3, [sp, #12]
   1f24e:	4298      	cmp	r0, r3
   1f250:	f47f ae9e 	bne.w	1ef90 <pdn_interface_connect+0xf4>
   1f254:	4633      	mov	r3, r6
   1f256:	e9cd 6600 	strd	r6, r6, [sp]
   1f25a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f25e:	491b      	ldr	r1, [pc, #108]	; (1f2cc <pdn_interface_connect+0x430>)
   1f260:	f8da 0000 	ldr.w	r0, [sl]
   1f264:	f7ff fb9e 	bl	1e9a4 <at_interface_read>
   1f268:	4606      	mov	r6, r0
   1f26a:	481e      	ldr	r0, [pc, #120]	; (1f2e4 <pdn_interface_connect+0x448>)
   1f26c:	f007 fcd4 	bl	26c18 <strlen>
   1f270:	4286      	cmp	r6, r0
   1f272:	f6ff aea6 	blt.w	1efc2 <pdn_interface_connect+0x126>
   1f276:	4602      	mov	r2, r0
   1f278:	4914      	ldr	r1, [pc, #80]	; (1f2cc <pdn_interface_connect+0x430>)
   1f27a:	481a      	ldr	r0, [pc, #104]	; (1f2e4 <pdn_interface_connect+0x448>)
   1f27c:	f007 fcfa 	bl	26c74 <strncmp>
   1f280:	2800      	cmp	r0, #0
   1f282:	f43f aec2 	beq.w	1f00a <pdn_interface_connect+0x16e>
   1f286:	e69c      	b.n	1efc2 <pdn_interface_connect+0x126>
   1f288:	f04f 3bff 	mov.w	fp, #4294967295
   1f28c:	e685      	b.n	1ef9a <pdn_interface_connect+0xfe>
   1f28e:	2016      	movs	r0, #22
   1f290:	f7f7 fc3c 	bl	16b0c <bsd_os_errno_set>
   1f294:	f04f 3bff 	mov.w	fp, #4294967295
   1f298:	e67f      	b.n	1ef9a <pdn_interface_connect+0xfe>
   1f29a:	f04f 0b0c 	mov.w	fp, #12
   1f29e:	e67c      	b.n	1ef9a <pdn_interface_connect+0xfe>
   1f2a0:	4811      	ldr	r0, [pc, #68]	; (1f2e8 <pdn_interface_connect+0x44c>)
   1f2a2:	f007 fcb9 	bl	26c18 <strlen>
   1f2a6:	4909      	ldr	r1, [pc, #36]	; (1f2cc <pdn_interface_connect+0x430>)
   1f2a8:	4602      	mov	r2, r0
   1f2aa:	480f      	ldr	r0, [pc, #60]	; (1f2e8 <pdn_interface_connect+0x44c>)
   1f2ac:	f007 fce2 	bl	26c74 <strncmp>
   1f2b0:	b918      	cbnz	r0, 1f2ba <pdn_interface_connect+0x41e>
   1f2b2:	2008      	movs	r0, #8
   1f2b4:	f7f7 fc2a 	bl	16b0c <bsd_os_errno_set>
   1f2b8:	e66f      	b.n	1ef9a <pdn_interface_connect+0xfe>
   1f2ba:	2005      	movs	r0, #5
   1f2bc:	f7f7 fc26 	bl	16b0c <bsd_os_errno_set>
   1f2c0:	e66b      	b.n	1ef9a <pdn_interface_connect+0xfe>
   1f2c2:	bf00      	nop
   1f2c4:	0002f6a8 	.word	0x0002f6a8
   1f2c8:	0002f710 	.word	0x0002f710
   1f2cc:	20021ac0 	.word	0x20021ac0
   1f2d0:	0002f684 	.word	0x0002f684
   1f2d4:	0002f6b4 	.word	0x0002f6b4
   1f2d8:	0002f6b8 	.word	0x0002f6b8
   1f2dc:	0002f690 	.word	0x0002f690
   1f2e0:	0002f6bc 	.word	0x0002f6bc
   1f2e4:	0002f6a4 	.word	0x0002f6a4
   1f2e8:	0002f720 	.word	0x0002f720

0001f2ec <pdn_interface_close>:
   1f2ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f2f0:	4a6c      	ldr	r2, [pc, #432]	; (1f4a4 <__kernel_ram_size+0x17c>)
   1f2f2:	0c03      	lsrs	r3, r0, #16
   1f2f4:	041b      	lsls	r3, r3, #16
   1f2f6:	4293      	cmp	r3, r2
   1f2f8:	b083      	sub	sp, #12
   1f2fa:	f040 80ae 	bne.w	1f45a <__kernel_ram_size+0x132>
   1f2fe:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1f302:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1f306:	2c09      	cmp	r4, #9
   1f308:	f300 80a7 	bgt.w	1f45a <__kernel_ram_size+0x132>
   1f30c:	4d66      	ldr	r5, [pc, #408]	; (1f4a8 <__kernel_ram_size+0x180>)
   1f30e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1f312:	2800      	cmp	r0, #0
   1f314:	f000 80a1 	beq.w	1f45a <__kernel_ram_size+0x132>
   1f318:	6883      	ldr	r3, [r0, #8]
   1f31a:	2b00      	cmp	r3, #0
   1f31c:	f000 809d 	beq.w	1f45a <__kernel_ram_size+0x132>
   1f320:	6883      	ldr	r3, [r0, #8]
   1f322:	2b03      	cmp	r3, #3
   1f324:	d00b      	beq.n	1f33e <__kernel_ram_size+0x16>
   1f326:	6883      	ldr	r3, [r0, #8]
   1f328:	2b02      	cmp	r3, #2
   1f32a:	d056      	beq.n	1f3da <__kernel_ram_size+0xb2>
   1f32c:	f001 ff92 	bl	21254 <nrf_free>
   1f330:	2300      	movs	r3, #0
   1f332:	4618      	mov	r0, r3
   1f334:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   1f338:	b003      	add	sp, #12
   1f33a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f33e:	4e5b      	ldr	r6, [pc, #364]	; (1f4ac <__kernel_ram_size+0x184>)
   1f340:	4b5b      	ldr	r3, [pc, #364]	; (1f4b0 <__kernel_ram_size+0x188>)
   1f342:	4a5c      	ldr	r2, [pc, #368]	; (1f4b4 <__kernel_ram_size+0x18c>)
   1f344:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f348:	4630      	mov	r0, r6
   1f34a:	f007 fac5 	bl	268d8 <snprintf>
   1f34e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1f352:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1f356:	681b      	ldr	r3, [r3, #0]
   1f358:	4a57      	ldr	r2, [pc, #348]	; (1f4b8 <__kernel_ram_size+0x190>)
   1f35a:	4430      	add	r0, r6
   1f35c:	f8df 8168 	ldr.w	r8, [pc, #360]	; 1f4c8 <__kernel_ram_size+0x1a0>
   1f360:	f007 faba 	bl	268d8 <snprintf>
   1f364:	4630      	mov	r0, r6
   1f366:	f8d8 9000 	ldr.w	r9, [r8]
   1f36a:	2700      	movs	r7, #0
   1f36c:	f007 fc54 	bl	26c18 <strlen>
   1f370:	4631      	mov	r1, r6
   1f372:	4602      	mov	r2, r0
   1f374:	463b      	mov	r3, r7
   1f376:	4648      	mov	r0, r9
   1f378:	9701      	str	r7, [sp, #4]
   1f37a:	9700      	str	r7, [sp, #0]
   1f37c:	f7ff f9be 	bl	1e6fc <at_interface_write>
   1f380:	4681      	mov	r9, r0
   1f382:	4630      	mov	r0, r6
   1f384:	f007 fc48 	bl	26c18 <strlen>
   1f388:	4548      	cmp	r0, r9
   1f38a:	f040 8083 	bne.w	1f494 <__kernel_ram_size+0x16c>
   1f38e:	463b      	mov	r3, r7
   1f390:	e9cd 7700 	strd	r7, r7, [sp]
   1f394:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f398:	4631      	mov	r1, r6
   1f39a:	f8d8 0000 	ldr.w	r0, [r8]
   1f39e:	f7ff fb01 	bl	1e9a4 <at_interface_read>
   1f3a2:	4607      	mov	r7, r0
   1f3a4:	4845      	ldr	r0, [pc, #276]	; (1f4bc <__kernel_ram_size+0x194>)
   1f3a6:	f007 fc37 	bl	26c18 <strlen>
   1f3aa:	4287      	cmp	r7, r0
   1f3ac:	da5b      	bge.n	1f466 <__kernel_ram_size+0x13e>
   1f3ae:	4844      	ldr	r0, [pc, #272]	; (1f4c0 <__kernel_ram_size+0x198>)
   1f3b0:	f007 fc32 	bl	26c18 <strlen>
   1f3b4:	493d      	ldr	r1, [pc, #244]	; (1f4ac <__kernel_ram_size+0x184>)
   1f3b6:	4602      	mov	r2, r0
   1f3b8:	4841      	ldr	r0, [pc, #260]	; (1f4c0 <__kernel_ram_size+0x198>)
   1f3ba:	f007 fc5b 	bl	26c74 <strncmp>
   1f3be:	2800      	cmp	r0, #0
   1f3c0:	d168      	bne.n	1f494 <__kernel_ram_size+0x16c>
   1f3c2:	2008      	movs	r0, #8
   1f3c4:	f7f7 fba2 	bl	16b0c <bsd_os_errno_set>
   1f3c8:	2202      	movs	r2, #2
   1f3ca:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1f3ce:	609a      	str	r2, [r3, #8]
   1f3d0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1f3d4:	6883      	ldr	r3, [r0, #8]
   1f3d6:	2b02      	cmp	r3, #2
   1f3d8:	d1a8      	bne.n	1f32c <__kernel_ram_size+0x4>
   1f3da:	4e34      	ldr	r6, [pc, #208]	; (1f4ac <__kernel_ram_size+0x184>)
   1f3dc:	4b39      	ldr	r3, [pc, #228]	; (1f4c4 <__kernel_ram_size+0x19c>)
   1f3de:	4a35      	ldr	r2, [pc, #212]	; (1f4b4 <__kernel_ram_size+0x18c>)
   1f3e0:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f3e4:	4630      	mov	r0, r6
   1f3e6:	f007 fa77 	bl	268d8 <snprintf>
   1f3ea:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1f3ee:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1f3f2:	681b      	ldr	r3, [r3, #0]
   1f3f4:	4a30      	ldr	r2, [pc, #192]	; (1f4b8 <__kernel_ram_size+0x190>)
   1f3f6:	4430      	add	r0, r6
   1f3f8:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 1f4c8 <__kernel_ram_size+0x1a0>
   1f3fc:	f007 fa6c 	bl	268d8 <snprintf>
   1f400:	4630      	mov	r0, r6
   1f402:	f8d8 9000 	ldr.w	r9, [r8]
   1f406:	2700      	movs	r7, #0
   1f408:	f007 fc06 	bl	26c18 <strlen>
   1f40c:	4631      	mov	r1, r6
   1f40e:	4602      	mov	r2, r0
   1f410:	463b      	mov	r3, r7
   1f412:	4648      	mov	r0, r9
   1f414:	9701      	str	r7, [sp, #4]
   1f416:	9700      	str	r7, [sp, #0]
   1f418:	f7ff f970 	bl	1e6fc <at_interface_write>
   1f41c:	4681      	mov	r9, r0
   1f41e:	4630      	mov	r0, r6
   1f420:	f007 fbfa 	bl	26c18 <strlen>
   1f424:	4548      	cmp	r0, r9
   1f426:	d139      	bne.n	1f49c <__kernel_ram_size+0x174>
   1f428:	463b      	mov	r3, r7
   1f42a:	e9cd 7700 	strd	r7, r7, [sp]
   1f42e:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f432:	4631      	mov	r1, r6
   1f434:	f8d8 0000 	ldr.w	r0, [r8]
   1f438:	f7ff fab4 	bl	1e9a4 <at_interface_read>
   1f43c:	4607      	mov	r7, r0
   1f43e:	481f      	ldr	r0, [pc, #124]	; (1f4bc <__kernel_ram_size+0x194>)
   1f440:	f007 fbea 	bl	26c18 <strlen>
   1f444:	4287      	cmp	r7, r0
   1f446:	db16      	blt.n	1f476 <__kernel_ram_size+0x14e>
   1f448:	4602      	mov	r2, r0
   1f44a:	4631      	mov	r1, r6
   1f44c:	481b      	ldr	r0, [pc, #108]	; (1f4bc <__kernel_ram_size+0x194>)
   1f44e:	f007 fc11 	bl	26c74 <strncmp>
   1f452:	b980      	cbnz	r0, 1f476 <__kernel_ram_size+0x14e>
   1f454:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1f458:	e768      	b.n	1f32c <__kernel_ram_size+0x4>
   1f45a:	2009      	movs	r0, #9
   1f45c:	f7f7 fb56 	bl	16b0c <bsd_os_errno_set>
   1f460:	f04f 30ff 	mov.w	r0, #4294967295
   1f464:	e768      	b.n	1f338 <__kernel_ram_size+0x10>
   1f466:	4602      	mov	r2, r0
   1f468:	4631      	mov	r1, r6
   1f46a:	4814      	ldr	r0, [pc, #80]	; (1f4bc <__kernel_ram_size+0x194>)
   1f46c:	f007 fc02 	bl	26c74 <strncmp>
   1f470:	2800      	cmp	r0, #0
   1f472:	d0a9      	beq.n	1f3c8 <__kernel_ram_size+0xa0>
   1f474:	e79b      	b.n	1f3ae <__kernel_ram_size+0x86>
   1f476:	4812      	ldr	r0, [pc, #72]	; (1f4c0 <__kernel_ram_size+0x198>)
   1f478:	f007 fbce 	bl	26c18 <strlen>
   1f47c:	490b      	ldr	r1, [pc, #44]	; (1f4ac <__kernel_ram_size+0x184>)
   1f47e:	4602      	mov	r2, r0
   1f480:	480f      	ldr	r0, [pc, #60]	; (1f4c0 <__kernel_ram_size+0x198>)
   1f482:	f007 fbf7 	bl	26c74 <strncmp>
   1f486:	b948      	cbnz	r0, 1f49c <__kernel_ram_size+0x174>
   1f488:	2008      	movs	r0, #8
   1f48a:	f7f7 fb3f 	bl	16b0c <bsd_os_errno_set>
   1f48e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1f492:	e74b      	b.n	1f32c <__kernel_ram_size+0x4>
   1f494:	2005      	movs	r0, #5
   1f496:	f7f7 fb39 	bl	16b0c <bsd_os_errno_set>
   1f49a:	e795      	b.n	1f3c8 <__kernel_ram_size+0xa0>
   1f49c:	2005      	movs	r0, #5
   1f49e:	f7f7 fb35 	bl	16b0c <bsd_os_errno_set>
   1f4a2:	e7d7      	b.n	1f454 <__kernel_ram_size+0x12c>
   1f4a4:	789a0000 	.word	0x789a0000
   1f4a8:	20021bc0 	.word	0x20021bc0
   1f4ac:	20021ac0 	.word	0x20021ac0
   1f4b0:	0002f66c 	.word	0x0002f66c
   1f4b4:	0002f710 	.word	0x0002f710
   1f4b8:	0002f6d0 	.word	0x0002f6d0
   1f4bc:	0002f6a4 	.word	0x0002f6a4
   1f4c0:	0002f720 	.word	0x0002f720
   1f4c4:	0002f678 	.word	0x0002f678
   1f4c8:	20021abc 	.word	0x20021abc

0001f4cc <pdn_interface_setopt>:
   1f4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f4ce:	f240 2402 	movw	r4, #514	; 0x202
   1f4d2:	42a1      	cmp	r1, r4
   1f4d4:	9e06      	ldr	r6, [sp, #24]
   1f4d6:	f040 8090 	bne.w	1f5fa <pdn_interface_setopt+0x12e>
   1f4da:	461d      	mov	r5, r3
   1f4dc:	2b00      	cmp	r3, #0
   1f4de:	f000 808c 	beq.w	1f5fa <pdn_interface_setopt+0x12e>
   1f4e2:	2e00      	cmp	r6, #0
   1f4e4:	f000 8089 	beq.w	1f5fa <pdn_interface_setopt+0x12e>
   1f4e8:	0c03      	lsrs	r3, r0, #16
   1f4ea:	494d      	ldr	r1, [pc, #308]	; (1f620 <pdn_interface_setopt+0x154>)
   1f4ec:	041b      	lsls	r3, r3, #16
   1f4ee:	428b      	cmp	r3, r1
   1f4f0:	d005      	beq.n	1f4fe <pdn_interface_setopt+0x32>
   1f4f2:	2009      	movs	r0, #9
   1f4f4:	f7f7 fb0a 	bl	16b0c <bsd_os_errno_set>
   1f4f8:	f04f 30ff 	mov.w	r0, #4294967295
   1f4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f4fe:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1f502:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1f506:	2c09      	cmp	r4, #9
   1f508:	dcf3      	bgt.n	1f4f2 <pdn_interface_setopt+0x26>
   1f50a:	4f46      	ldr	r7, [pc, #280]	; (1f624 <pdn_interface_setopt+0x158>)
   1f50c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f510:	2b00      	cmp	r3, #0
   1f512:	d0ee      	beq.n	1f4f2 <pdn_interface_setopt+0x26>
   1f514:	6899      	ldr	r1, [r3, #8]
   1f516:	2900      	cmp	r1, #0
   1f518:	d0eb      	beq.n	1f4f2 <pdn_interface_setopt+0x26>
   1f51a:	2a01      	cmp	r2, #1
   1f51c:	d049      	beq.n	1f5b2 <pdn_interface_setopt+0xe6>
   1f51e:	2a04      	cmp	r2, #4
   1f520:	d145      	bne.n	1f5ae <pdn_interface_setopt+0xe2>
   1f522:	689a      	ldr	r2, [r3, #8]
   1f524:	2a00      	cmp	r2, #0
   1f526:	d04c      	beq.n	1f5c2 <pdn_interface_setopt+0xf6>
   1f528:	689a      	ldr	r2, [r3, #8]
   1f52a:	2a03      	cmp	r2, #3
   1f52c:	d049      	beq.n	1f5c2 <pdn_interface_setopt+0xf6>
   1f52e:	689b      	ldr	r3, [r3, #8]
   1f530:	2b04      	cmp	r3, #4
   1f532:	d046      	beq.n	1f5c2 <pdn_interface_setopt+0xf6>
   1f534:	4628      	mov	r0, r5
   1f536:	f007 fb6f 	bl	26c18 <strlen>
   1f53a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f53e:	3001      	adds	r0, #1
   1f540:	f105 0664 	add.w	r6, r5, #100	; 0x64
   1f544:	6158      	str	r0, [r3, #20]
   1f546:	4630      	mov	r0, r6
   1f548:	f007 fb66 	bl	26c18 <strlen>
   1f54c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f550:	3001      	adds	r0, #1
   1f552:	6198      	str	r0, [r3, #24]
   1f554:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
   1f558:	3b01      	subs	r3, #1
   1f55a:	2b01      	cmp	r3, #1
   1f55c:	d84b      	bhi.n	1f5f6 <pdn_interface_setopt+0x12a>
   1f55e:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   1f562:	6943      	ldr	r3, [r0, #20]
   1f564:	2b63      	cmp	r3, #99	; 0x63
   1f566:	dc46      	bgt.n	1f5f6 <pdn_interface_setopt+0x12a>
   1f568:	6982      	ldr	r2, [r0, #24]
   1f56a:	2a63      	cmp	r2, #99	; 0x63
   1f56c:	dc43      	bgt.n	1f5f6 <pdn_interface_setopt+0x12a>
   1f56e:	4413      	add	r3, r2
   1f570:	f103 0120 	add.w	r1, r3, #32
   1f574:	f001 fe7a 	bl	2126c <nrf_realloc>
   1f578:	4603      	mov	r3, r0
   1f57a:	2800      	cmp	r0, #0
   1f57c:	d048      	beq.n	1f610 <pdn_interface_setopt+0x144>
   1f57e:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   1f582:	6941      	ldr	r1, [r0, #20]
   1f584:	462b      	mov	r3, r5
   1f586:	4a28      	ldr	r2, [pc, #160]	; (1f628 <pdn_interface_setopt+0x15c>)
   1f588:	3020      	adds	r0, #32
   1f58a:	f007 f9a5 	bl	268d8 <snprintf>
   1f58e:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   1f592:	3021      	adds	r0, #33	; 0x21
   1f594:	4633      	mov	r3, r6
   1f596:	6991      	ldr	r1, [r2, #24]
   1f598:	4410      	add	r0, r2
   1f59a:	4a23      	ldr	r2, [pc, #140]	; (1f628 <pdn_interface_setopt+0x15c>)
   1f59c:	f007 f99c 	bl	268d8 <snprintf>
   1f5a0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f5a4:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
   1f5a8:	2000      	movs	r0, #0
   1f5aa:	741a      	strb	r2, [r3, #16]
   1f5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f5ae:	202d      	movs	r0, #45	; 0x2d
   1f5b0:	e7a0      	b.n	1f4f4 <pdn_interface_setopt+0x28>
   1f5b2:	689a      	ldr	r2, [r3, #8]
   1f5b4:	b12a      	cbz	r2, 1f5c2 <pdn_interface_setopt+0xf6>
   1f5b6:	689a      	ldr	r2, [r3, #8]
   1f5b8:	2a03      	cmp	r2, #3
   1f5ba:	d002      	beq.n	1f5c2 <pdn_interface_setopt+0xf6>
   1f5bc:	689a      	ldr	r2, [r3, #8]
   1f5be:	2a04      	cmp	r2, #4
   1f5c0:	d101      	bne.n	1f5c6 <pdn_interface_setopt+0xfa>
   1f5c2:	200e      	movs	r0, #14
   1f5c4:	e796      	b.n	1f4f4 <pdn_interface_setopt+0x28>
   1f5c6:	08b2      	lsrs	r2, r6, #2
   1f5c8:	1e51      	subs	r1, r2, #1
   1f5ca:	2901      	cmp	r1, #1
   1f5cc:	d813      	bhi.n	1f5f6 <pdn_interface_setopt+0x12a>
   1f5ce:	07b1      	lsls	r1, r6, #30
   1f5d0:	d111      	bne.n	1f5f6 <pdn_interface_setopt+0x12a>
   1f5d2:	6829      	ldr	r1, [r5, #0]
   1f5d4:	2902      	cmp	r1, #2
   1f5d6:	d016      	beq.n	1f606 <pdn_interface_setopt+0x13a>
   1f5d8:	290a      	cmp	r1, #10
   1f5da:	d10c      	bne.n	1f5f6 <pdn_interface_setopt+0x12a>
   1f5dc:	2102      	movs	r1, #2
   1f5de:	2a02      	cmp	r2, #2
   1f5e0:	d106      	bne.n	1f5f0 <pdn_interface_setopt+0x124>
   1f5e2:	686a      	ldr	r2, [r5, #4]
   1f5e4:	2a02      	cmp	r2, #2
   1f5e6:	d010      	beq.n	1f60a <pdn_interface_setopt+0x13e>
   1f5e8:	2a0a      	cmp	r2, #10
   1f5ea:	d104      	bne.n	1f5f6 <pdn_interface_setopt+0x12a>
   1f5ec:	f041 0102 	orr.w	r1, r1, #2
   1f5f0:	60d9      	str	r1, [r3, #12]
   1f5f2:	2000      	movs	r0, #0
   1f5f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f5f6:	2016      	movs	r0, #22
   1f5f8:	e77c      	b.n	1f4f4 <pdn_interface_setopt+0x28>
   1f5fa:	2016      	movs	r0, #22
   1f5fc:	f7f7 fa86 	bl	16b0c <bsd_os_errno_set>
   1f600:	f04f 30ff 	mov.w	r0, #4294967295
   1f604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f606:	2101      	movs	r1, #1
   1f608:	e7e9      	b.n	1f5de <pdn_interface_setopt+0x112>
   1f60a:	f041 0101 	orr.w	r1, r1, #1
   1f60e:	e7ef      	b.n	1f5f0 <pdn_interface_setopt+0x124>
   1f610:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   1f614:	200c      	movs	r0, #12
   1f616:	6153      	str	r3, [r2, #20]
   1f618:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   1f61c:	6193      	str	r3, [r2, #24]
   1f61e:	e769      	b.n	1f4f4 <pdn_interface_setopt+0x28>
   1f620:	789a0000 	.word	0x789a0000
   1f624:	20021bc0 	.word	0x20021bc0
   1f628:	0002f710 	.word	0x0002f710

0001f62c <pdn_interface_getopt>:
   1f62c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f630:	f240 2402 	movw	r4, #514	; 0x202
   1f634:	b083      	sub	sp, #12
   1f636:	42a1      	cmp	r1, r4
   1f638:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1f63a:	f040 808f 	bne.w	1f75c <pdn_interface_getopt+0x130>
   1f63e:	461e      	mov	r6, r3
   1f640:	2b00      	cmp	r3, #0
   1f642:	f000 808b 	beq.w	1f75c <pdn_interface_getopt+0x130>
   1f646:	2d00      	cmp	r5, #0
   1f648:	f000 8088 	beq.w	1f75c <pdn_interface_getopt+0x130>
   1f64c:	0c03      	lsrs	r3, r0, #16
   1f64e:	4954      	ldr	r1, [pc, #336]	; (1f7a0 <pdn_interface_getopt+0x174>)
   1f650:	041b      	lsls	r3, r3, #16
   1f652:	428b      	cmp	r3, r1
   1f654:	f040 8084 	bne.w	1f760 <pdn_interface_getopt+0x134>
   1f658:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1f65c:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1f660:	2c09      	cmp	r4, #9
   1f662:	dc7d      	bgt.n	1f760 <pdn_interface_getopt+0x134>
   1f664:	4b4f      	ldr	r3, [pc, #316]	; (1f7a4 <pdn_interface_getopt+0x178>)
   1f666:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1f66a:	2b00      	cmp	r3, #0
   1f66c:	d078      	beq.n	1f760 <pdn_interface_getopt+0x134>
   1f66e:	6899      	ldr	r1, [r3, #8]
   1f670:	2900      	cmp	r1, #0
   1f672:	d075      	beq.n	1f760 <pdn_interface_getopt+0x134>
   1f674:	2a02      	cmp	r2, #2
   1f676:	d04e      	beq.n	1f716 <pdn_interface_getopt+0xea>
   1f678:	2a03      	cmp	r2, #3
   1f67a:	d009      	beq.n	1f690 <pdn_interface_getopt+0x64>
   1f67c:	2a01      	cmp	r2, #1
   1f67e:	d054      	beq.n	1f72a <pdn_interface_getopt+0xfe>
   1f680:	202d      	movs	r0, #45	; 0x2d
   1f682:	f7f7 fa43 	bl	16b0c <bsd_os_errno_set>
   1f686:	f04f 30ff 	mov.w	r0, #4294967295
   1f68a:	b003      	add	sp, #12
   1f68c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f690:	682b      	ldr	r3, [r5, #0]
   1f692:	2b00      	cmp	r3, #0
   1f694:	d062      	beq.n	1f75c <pdn_interface_getopt+0x130>
   1f696:	4b44      	ldr	r3, [pc, #272]	; (1f7a8 <pdn_interface_getopt+0x17c>)
   1f698:	4a44      	ldr	r2, [pc, #272]	; (1f7ac <pdn_interface_getopt+0x180>)
   1f69a:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f69e:	4844      	ldr	r0, [pc, #272]	; (1f7b0 <pdn_interface_getopt+0x184>)
   1f6a0:	f8df 8118 	ldr.w	r8, [pc, #280]	; 1f7bc <pdn_interface_getopt+0x190>
   1f6a4:	f007 f918 	bl	268d8 <snprintf>
   1f6a8:	4841      	ldr	r0, [pc, #260]	; (1f7b0 <pdn_interface_getopt+0x184>)
   1f6aa:	f8d8 9000 	ldr.w	r9, [r8]
   1f6ae:	2700      	movs	r7, #0
   1f6b0:	f007 fab2 	bl	26c18 <strlen>
   1f6b4:	463b      	mov	r3, r7
   1f6b6:	4602      	mov	r2, r0
   1f6b8:	493d      	ldr	r1, [pc, #244]	; (1f7b0 <pdn_interface_getopt+0x184>)
   1f6ba:	4648      	mov	r0, r9
   1f6bc:	9701      	str	r7, [sp, #4]
   1f6be:	9700      	str	r7, [sp, #0]
   1f6c0:	f7ff f81c 	bl	1e6fc <at_interface_write>
   1f6c4:	4681      	mov	r9, r0
   1f6c6:	483a      	ldr	r0, [pc, #232]	; (1f7b0 <pdn_interface_getopt+0x184>)
   1f6c8:	f007 faa6 	bl	26c18 <strlen>
   1f6cc:	4548      	cmp	r0, r9
   1f6ce:	d161      	bne.n	1f794 <pdn_interface_getopt+0x168>
   1f6d0:	463b      	mov	r3, r7
   1f6d2:	e9cd 7700 	strd	r7, r7, [sp]
   1f6d6:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f6da:	4935      	ldr	r1, [pc, #212]	; (1f7b0 <pdn_interface_getopt+0x184>)
   1f6dc:	f8d8 0000 	ldr.w	r0, [r8]
   1f6e0:	f7ff f960 	bl	1e9a4 <at_interface_read>
   1f6e4:	4607      	mov	r7, r0
   1f6e6:	4833      	ldr	r0, [pc, #204]	; (1f7b4 <pdn_interface_getopt+0x188>)
   1f6e8:	f007 fa96 	bl	26c18 <strlen>
   1f6ec:	4287      	cmp	r7, r0
   1f6ee:	db3d      	blt.n	1f76c <pdn_interface_getopt+0x140>
   1f6f0:	4602      	mov	r2, r0
   1f6f2:	492f      	ldr	r1, [pc, #188]	; (1f7b0 <pdn_interface_getopt+0x184>)
   1f6f4:	482f      	ldr	r0, [pc, #188]	; (1f7b4 <pdn_interface_getopt+0x188>)
   1f6f6:	f007 fabd 	bl	26c74 <strncmp>
   1f6fa:	4607      	mov	r7, r0
   1f6fc:	2800      	cmp	r0, #0
   1f6fe:	d135      	bne.n	1f76c <pdn_interface_getopt+0x140>
   1f700:	4620      	mov	r0, r4
   1f702:	492b      	ldr	r1, [pc, #172]	; (1f7b0 <pdn_interface_getopt+0x184>)
   1f704:	f7ff fa38 	bl	1eb78 <pdn_state_get_parser>
   1f708:	2800      	cmp	r0, #0
   1f70a:	dbba      	blt.n	1f682 <pdn_interface_getopt+0x56>
   1f70c:	2301      	movs	r3, #1
   1f70e:	7030      	strb	r0, [r6, #0]
   1f710:	4638      	mov	r0, r7
   1f712:	602b      	str	r3, [r5, #0]
   1f714:	e7b9      	b.n	1f68a <pdn_interface_getopt+0x5e>
   1f716:	682a      	ldr	r2, [r5, #0]
   1f718:	b302      	cbz	r2, 1f75c <pdn_interface_getopt+0x130>
   1f71a:	2201      	movs	r2, #1
   1f71c:	2000      	movs	r0, #0
   1f71e:	681b      	ldr	r3, [r3, #0]
   1f720:	7033      	strb	r3, [r6, #0]
   1f722:	602a      	str	r2, [r5, #0]
   1f724:	b003      	add	sp, #12
   1f726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f72a:	689a      	ldr	r2, [r3, #8]
   1f72c:	b1a2      	cbz	r2, 1f758 <pdn_interface_getopt+0x12c>
   1f72e:	689a      	ldr	r2, [r3, #8]
   1f730:	2a04      	cmp	r2, #4
   1f732:	d011      	beq.n	1f758 <pdn_interface_getopt+0x12c>
   1f734:	682a      	ldr	r2, [r5, #0]
   1f736:	2a07      	cmp	r2, #7
   1f738:	d910      	bls.n	1f75c <pdn_interface_getopt+0x130>
   1f73a:	f012 0203 	ands.w	r2, r2, #3
   1f73e:	d10d      	bne.n	1f75c <pdn_interface_getopt+0x130>
   1f740:	68db      	ldr	r3, [r3, #12]
   1f742:	0799      	lsls	r1, r3, #30
   1f744:	d421      	bmi.n	1f78a <pdn_interface_getopt+0x15e>
   1f746:	2104      	movs	r1, #4
   1f748:	07db      	lsls	r3, r3, #31
   1f74a:	d502      	bpl.n	1f752 <pdn_interface_getopt+0x126>
   1f74c:	2302      	movs	r3, #2
   1f74e:	50b3      	str	r3, [r6, r2]
   1f750:	460a      	mov	r2, r1
   1f752:	602a      	str	r2, [r5, #0]
   1f754:	2000      	movs	r0, #0
   1f756:	e798      	b.n	1f68a <pdn_interface_getopt+0x5e>
   1f758:	200e      	movs	r0, #14
   1f75a:	e792      	b.n	1f682 <pdn_interface_getopt+0x56>
   1f75c:	2016      	movs	r0, #22
   1f75e:	e790      	b.n	1f682 <pdn_interface_getopt+0x56>
   1f760:	2009      	movs	r0, #9
   1f762:	f7f7 f9d3 	bl	16b0c <bsd_os_errno_set>
   1f766:	f04f 30ff 	mov.w	r0, #4294967295
   1f76a:	e78e      	b.n	1f68a <pdn_interface_getopt+0x5e>
   1f76c:	4812      	ldr	r0, [pc, #72]	; (1f7b8 <pdn_interface_getopt+0x18c>)
   1f76e:	f007 fa53 	bl	26c18 <strlen>
   1f772:	490f      	ldr	r1, [pc, #60]	; (1f7b0 <pdn_interface_getopt+0x184>)
   1f774:	4602      	mov	r2, r0
   1f776:	4810      	ldr	r0, [pc, #64]	; (1f7b8 <pdn_interface_getopt+0x18c>)
   1f778:	f007 fa7c 	bl	26c74 <strncmp>
   1f77c:	b950      	cbnz	r0, 1f794 <pdn_interface_getopt+0x168>
   1f77e:	2008      	movs	r0, #8
   1f780:	f7f7 f9c4 	bl	16b0c <bsd_os_errno_set>
   1f784:	f04f 30ff 	mov.w	r0, #4294967295
   1f788:	e77b      	b.n	1f682 <pdn_interface_getopt+0x56>
   1f78a:	220a      	movs	r2, #10
   1f78c:	2108      	movs	r1, #8
   1f78e:	6032      	str	r2, [r6, #0]
   1f790:	2204      	movs	r2, #4
   1f792:	e7d9      	b.n	1f748 <pdn_interface_getopt+0x11c>
   1f794:	2005      	movs	r0, #5
   1f796:	f7f7 f9b9 	bl	16b0c <bsd_os_errno_set>
   1f79a:	f04f 30ff 	mov.w	r0, #4294967295
   1f79e:	e770      	b.n	1f682 <pdn_interface_getopt+0x56>
   1f7a0:	789a0000 	.word	0x789a0000
   1f7a4:	20021bc0 	.word	0x20021bc0
   1f7a8:	0002f6f0 	.word	0x0002f6f0
   1f7ac:	0002f710 	.word	0x0002f710
   1f7b0:	20021ac0 	.word	0x20021ac0
   1f7b4:	0002f6fc 	.word	0x0002f6fc
   1f7b8:	0002f720 	.word	0x0002f720
   1f7bc:	20021abc 	.word	0x20021abc

0001f7c0 <pdn_interface_pdn_id_get>:
   1f7c0:	2900      	cmp	r1, #0
   1f7c2:	f000 82ba 	beq.w	1fd3a <pdn_interface_pdn_id_get+0x57a>
   1f7c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f7ca:	2802      	cmp	r0, #2
   1f7cc:	b083      	sub	sp, #12
   1f7ce:	460e      	mov	r6, r1
   1f7d0:	d067      	beq.n	1f8a2 <pdn_interface_pdn_id_get+0xe2>
   1f7d2:	280a      	cmp	r0, #10
   1f7d4:	d040      	beq.n	1f858 <pdn_interface_pdn_id_get+0x98>
   1f7d6:	4cae      	ldr	r4, [pc, #696]	; (1fa90 <pdn_interface_pdn_id_get+0x2d0>)
   1f7d8:	6823      	ldr	r3, [r4, #0]
   1f7da:	b11b      	cbz	r3, 1f7e4 <pdn_interface_pdn_id_get+0x24>
   1f7dc:	689b      	ldr	r3, [r3, #8]
   1f7de:	2b03      	cmp	r3, #3
   1f7e0:	f000 80fc 	beq.w	1f9dc <pdn_interface_pdn_id_get+0x21c>
   1f7e4:	6863      	ldr	r3, [r4, #4]
   1f7e6:	b11b      	cbz	r3, 1f7f0 <pdn_interface_pdn_id_get+0x30>
   1f7e8:	689b      	ldr	r3, [r3, #8]
   1f7ea:	2b03      	cmp	r3, #3
   1f7ec:	f000 80e4 	beq.w	1f9b8 <pdn_interface_pdn_id_get+0x1f8>
   1f7f0:	68a3      	ldr	r3, [r4, #8]
   1f7f2:	b11b      	cbz	r3, 1f7fc <pdn_interface_pdn_id_get+0x3c>
   1f7f4:	689b      	ldr	r3, [r3, #8]
   1f7f6:	2b03      	cmp	r3, #3
   1f7f8:	f000 80cc 	beq.w	1f994 <pdn_interface_pdn_id_get+0x1d4>
   1f7fc:	68e3      	ldr	r3, [r4, #12]
   1f7fe:	b11b      	cbz	r3, 1f808 <pdn_interface_pdn_id_get+0x48>
   1f800:	689b      	ldr	r3, [r3, #8]
   1f802:	2b03      	cmp	r3, #3
   1f804:	f000 80b4 	beq.w	1f970 <pdn_interface_pdn_id_get+0x1b0>
   1f808:	6923      	ldr	r3, [r4, #16]
   1f80a:	b11b      	cbz	r3, 1f814 <pdn_interface_pdn_id_get+0x54>
   1f80c:	689b      	ldr	r3, [r3, #8]
   1f80e:	2b03      	cmp	r3, #3
   1f810:	f000 80f5 	beq.w	1f9fe <pdn_interface_pdn_id_get+0x23e>
   1f814:	6963      	ldr	r3, [r4, #20]
   1f816:	b11b      	cbz	r3, 1f820 <pdn_interface_pdn_id_get+0x60>
   1f818:	689b      	ldr	r3, [r3, #8]
   1f81a:	2b03      	cmp	r3, #3
   1f81c:	f000 813c 	beq.w	1fa98 <pdn_interface_pdn_id_get+0x2d8>
   1f820:	69a3      	ldr	r3, [r4, #24]
   1f822:	b11b      	cbz	r3, 1f82c <pdn_interface_pdn_id_get+0x6c>
   1f824:	689b      	ldr	r3, [r3, #8]
   1f826:	2b03      	cmp	r3, #3
   1f828:	f000 811f 	beq.w	1fa6a <pdn_interface_pdn_id_get+0x2aa>
   1f82c:	69e3      	ldr	r3, [r4, #28]
   1f82e:	b11b      	cbz	r3, 1f838 <pdn_interface_pdn_id_get+0x78>
   1f830:	689b      	ldr	r3, [r3, #8]
   1f832:	2b03      	cmp	r3, #3
   1f834:	f000 8107 	beq.w	1fa46 <pdn_interface_pdn_id_get+0x286>
   1f838:	6a23      	ldr	r3, [r4, #32]
   1f83a:	b11b      	cbz	r3, 1f844 <pdn_interface_pdn_id_get+0x84>
   1f83c:	689b      	ldr	r3, [r3, #8]
   1f83e:	2b03      	cmp	r3, #3
   1f840:	f000 80ef 	beq.w	1fa22 <pdn_interface_pdn_id_get+0x262>
   1f844:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f846:	b113      	cbz	r3, 1f84e <pdn_interface_pdn_id_get+0x8e>
   1f848:	689b      	ldr	r3, [r3, #8]
   1f84a:	2b03      	cmp	r3, #3
   1f84c:	d07e      	beq.n	1f94c <pdn_interface_pdn_id_get+0x18c>
   1f84e:	f04f 30ff 	mov.w	r0, #4294967295
   1f852:	b003      	add	sp, #12
   1f854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f858:	2500      	movs	r5, #0
   1f85a:	4c8e      	ldr	r4, [pc, #568]	; (1fa94 <pdn_interface_pdn_id_get+0x2d4>)
   1f85c:	e002      	b.n	1f864 <pdn_interface_pdn_id_get+0xa4>
   1f85e:	3501      	adds	r5, #1
   1f860:	2d0a      	cmp	r5, #10
   1f862:	d0f4      	beq.n	1f84e <pdn_interface_pdn_id_get+0x8e>
   1f864:	f854 3f04 	ldr.w	r3, [r4, #4]!
   1f868:	2b00      	cmp	r3, #0
   1f86a:	d0f8      	beq.n	1f85e <pdn_interface_pdn_id_get+0x9e>
   1f86c:	689b      	ldr	r3, [r3, #8]
   1f86e:	2b03      	cmp	r3, #3
   1f870:	d1f5      	bne.n	1f85e <pdn_interface_pdn_id_get+0x9e>
   1f872:	4630      	mov	r0, r6
   1f874:	f007 f9d0 	bl	26c18 <strlen>
   1f878:	6823      	ldr	r3, [r4, #0]
   1f87a:	69da      	ldr	r2, [r3, #28]
   1f87c:	4290      	cmp	r0, r2
   1f87e:	d1ee      	bne.n	1f85e <pdn_interface_pdn_id_get+0x9e>
   1f880:	e9d3 1705 	ldrd	r1, r7, [r3, #20]
   1f884:	4439      	add	r1, r7
   1f886:	3120      	adds	r1, #32
   1f888:	4602      	mov	r2, r0
   1f88a:	4419      	add	r1, r3
   1f88c:	4630      	mov	r0, r6
   1f88e:	f007 f9f1 	bl	26c74 <strncmp>
   1f892:	2800      	cmp	r0, #0
   1f894:	d1e3      	bne.n	1f85e <pdn_interface_pdn_id_get+0x9e>
   1f896:	6823      	ldr	r3, [r4, #0]
   1f898:	68da      	ldr	r2, [r3, #12]
   1f89a:	0792      	lsls	r2, r2, #30
   1f89c:	f100 8128 	bmi.w	1faf0 <pdn_interface_pdn_id_get+0x330>
   1f8a0:	e7dd      	b.n	1f85e <pdn_interface_pdn_id_get+0x9e>
   1f8a2:	4c7b      	ldr	r4, [pc, #492]	; (1fa90 <pdn_interface_pdn_id_get+0x2d0>)
   1f8a4:	6823      	ldr	r3, [r4, #0]
   1f8a6:	b11b      	cbz	r3, 1f8b0 <pdn_interface_pdn_id_get+0xf0>
   1f8a8:	689b      	ldr	r3, [r3, #8]
   1f8aa:	2b03      	cmp	r3, #3
   1f8ac:	f000 822a 	beq.w	1fd04 <pdn_interface_pdn_id_get+0x544>
   1f8b0:	6863      	ldr	r3, [r4, #4]
   1f8b2:	b11b      	cbz	r3, 1f8bc <pdn_interface_pdn_id_get+0xfc>
   1f8b4:	689b      	ldr	r3, [r3, #8]
   1f8b6:	2b03      	cmp	r3, #3
   1f8b8:	f000 8209 	beq.w	1fcce <pdn_interface_pdn_id_get+0x50e>
   1f8bc:	68a3      	ldr	r3, [r4, #8]
   1f8be:	b11b      	cbz	r3, 1f8c8 <pdn_interface_pdn_id_get+0x108>
   1f8c0:	689b      	ldr	r3, [r3, #8]
   1f8c2:	2b03      	cmp	r3, #3
   1f8c4:	f000 81b3 	beq.w	1fc2e <pdn_interface_pdn_id_get+0x46e>
   1f8c8:	68e3      	ldr	r3, [r4, #12]
   1f8ca:	b11b      	cbz	r3, 1f8d4 <pdn_interface_pdn_id_get+0x114>
   1f8cc:	689d      	ldr	r5, [r3, #8]
   1f8ce:	2d03      	cmp	r5, #3
   1f8d0:	f000 81c8 	beq.w	1fc64 <pdn_interface_pdn_id_get+0x4a4>
   1f8d4:	6923      	ldr	r3, [r4, #16]
   1f8d6:	b11b      	cbz	r3, 1f8e0 <pdn_interface_pdn_id_get+0x120>
   1f8d8:	689b      	ldr	r3, [r3, #8]
   1f8da:	2b03      	cmp	r3, #3
   1f8dc:	f000 80ee 	beq.w	1fabc <pdn_interface_pdn_id_get+0x2fc>
   1f8e0:	6963      	ldr	r3, [r4, #20]
   1f8e2:	b11b      	cbz	r3, 1f8ec <pdn_interface_pdn_id_get+0x12c>
   1f8e4:	689b      	ldr	r3, [r3, #8]
   1f8e6:	2b03      	cmp	r3, #3
   1f8e8:	f000 8150 	beq.w	1fb8c <pdn_interface_pdn_id_get+0x3cc>
   1f8ec:	69a3      	ldr	r3, [r4, #24]
   1f8ee:	b11b      	cbz	r3, 1f8f8 <pdn_interface_pdn_id_get+0x138>
   1f8f0:	689b      	ldr	r3, [r3, #8]
   1f8f2:	2b03      	cmp	r3, #3
   1f8f4:	f000 8165 	beq.w	1fbc2 <pdn_interface_pdn_id_get+0x402>
   1f8f8:	69e3      	ldr	r3, [r4, #28]
   1f8fa:	b11b      	cbz	r3, 1f904 <pdn_interface_pdn_id_get+0x144>
   1f8fc:	689b      	ldr	r3, [r3, #8]
   1f8fe:	2b03      	cmp	r3, #3
   1f900:	f000 817a 	beq.w	1fbf8 <pdn_interface_pdn_id_get+0x438>
   1f904:	6a23      	ldr	r3, [r4, #32]
   1f906:	b11b      	cbz	r3, 1f910 <pdn_interface_pdn_id_get+0x150>
   1f908:	689b      	ldr	r3, [r3, #8]
   1f90a:	2b03      	cmp	r3, #3
   1f90c:	f000 81c4 	beq.w	1fc98 <pdn_interface_pdn_id_get+0x4d8>
   1f910:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f912:	2b00      	cmp	r3, #0
   1f914:	d09b      	beq.n	1f84e <pdn_interface_pdn_id_get+0x8e>
   1f916:	689b      	ldr	r3, [r3, #8]
   1f918:	2b03      	cmp	r3, #3
   1f91a:	d198      	bne.n	1f84e <pdn_interface_pdn_id_get+0x8e>
   1f91c:	4630      	mov	r0, r6
   1f91e:	f007 f97b 	bl	26c18 <strlen>
   1f922:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f924:	69da      	ldr	r2, [r3, #28]
   1f926:	4290      	cmp	r0, r2
   1f928:	d191      	bne.n	1f84e <pdn_interface_pdn_id_get+0x8e>
   1f92a:	e9d3 5105 	ldrd	r5, r1, [r3, #20]
   1f92e:	4429      	add	r1, r5
   1f930:	3120      	adds	r1, #32
   1f932:	4602      	mov	r2, r0
   1f934:	4419      	add	r1, r3
   1f936:	4630      	mov	r0, r6
   1f938:	f007 f99c 	bl	26c74 <strncmp>
   1f93c:	2800      	cmp	r0, #0
   1f93e:	d186      	bne.n	1f84e <pdn_interface_pdn_id_get+0x8e>
   1f940:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f942:	68da      	ldr	r2, [r3, #12]
   1f944:	07d2      	lsls	r2, r2, #31
   1f946:	d582      	bpl.n	1f84e <pdn_interface_pdn_id_get+0x8e>
   1f948:	2509      	movs	r5, #9
   1f94a:	e0d1      	b.n	1faf0 <pdn_interface_pdn_id_get+0x330>
   1f94c:	4630      	mov	r0, r6
   1f94e:	f007 f963 	bl	26c18 <strlen>
   1f952:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f954:	69da      	ldr	r2, [r3, #28]
   1f956:	4290      	cmp	r0, r2
   1f958:	f47f af79 	bne.w	1f84e <pdn_interface_pdn_id_get+0x8e>
   1f95c:	e9d3 1405 	ldrd	r1, r4, [r3, #20]
   1f960:	4421      	add	r1, r4
   1f962:	3120      	adds	r1, #32
   1f964:	4602      	mov	r2, r0
   1f966:	4419      	add	r1, r3
   1f968:	4630      	mov	r0, r6
   1f96a:	f007 f983 	bl	26c74 <strncmp>
   1f96e:	e76e      	b.n	1f84e <pdn_interface_pdn_id_get+0x8e>
   1f970:	4630      	mov	r0, r6
   1f972:	f007 f951 	bl	26c18 <strlen>
   1f976:	68e3      	ldr	r3, [r4, #12]
   1f978:	69da      	ldr	r2, [r3, #28]
   1f97a:	4290      	cmp	r0, r2
   1f97c:	f47f af44 	bne.w	1f808 <pdn_interface_pdn_id_get+0x48>
   1f980:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1f984:	4429      	add	r1, r5
   1f986:	3120      	adds	r1, #32
   1f988:	4602      	mov	r2, r0
   1f98a:	4419      	add	r1, r3
   1f98c:	4630      	mov	r0, r6
   1f98e:	f007 f971 	bl	26c74 <strncmp>
   1f992:	e739      	b.n	1f808 <pdn_interface_pdn_id_get+0x48>
   1f994:	4630      	mov	r0, r6
   1f996:	f007 f93f 	bl	26c18 <strlen>
   1f99a:	68a3      	ldr	r3, [r4, #8]
   1f99c:	69da      	ldr	r2, [r3, #28]
   1f99e:	4290      	cmp	r0, r2
   1f9a0:	f47f af2c 	bne.w	1f7fc <pdn_interface_pdn_id_get+0x3c>
   1f9a4:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1f9a8:	4429      	add	r1, r5
   1f9aa:	3120      	adds	r1, #32
   1f9ac:	4602      	mov	r2, r0
   1f9ae:	4419      	add	r1, r3
   1f9b0:	4630      	mov	r0, r6
   1f9b2:	f007 f95f 	bl	26c74 <strncmp>
   1f9b6:	e721      	b.n	1f7fc <pdn_interface_pdn_id_get+0x3c>
   1f9b8:	4630      	mov	r0, r6
   1f9ba:	f007 f92d 	bl	26c18 <strlen>
   1f9be:	6863      	ldr	r3, [r4, #4]
   1f9c0:	69da      	ldr	r2, [r3, #28]
   1f9c2:	4290      	cmp	r0, r2
   1f9c4:	f47f af14 	bne.w	1f7f0 <pdn_interface_pdn_id_get+0x30>
   1f9c8:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1f9cc:	4429      	add	r1, r5
   1f9ce:	3120      	adds	r1, #32
   1f9d0:	4602      	mov	r2, r0
   1f9d2:	4419      	add	r1, r3
   1f9d4:	4630      	mov	r0, r6
   1f9d6:	f007 f94d 	bl	26c74 <strncmp>
   1f9da:	e709      	b.n	1f7f0 <pdn_interface_pdn_id_get+0x30>
   1f9dc:	4608      	mov	r0, r1
   1f9de:	f007 f91b 	bl	26c18 <strlen>
   1f9e2:	6823      	ldr	r3, [r4, #0]
   1f9e4:	69da      	ldr	r2, [r3, #28]
   1f9e6:	4282      	cmp	r2, r0
   1f9e8:	f47f aefc 	bne.w	1f7e4 <pdn_interface_pdn_id_get+0x24>
   1f9ec:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1f9f0:	4401      	add	r1, r0
   1f9f2:	3120      	adds	r1, #32
   1f9f4:	4419      	add	r1, r3
   1f9f6:	4630      	mov	r0, r6
   1f9f8:	f007 f93c 	bl	26c74 <strncmp>
   1f9fc:	e6f2      	b.n	1f7e4 <pdn_interface_pdn_id_get+0x24>
   1f9fe:	4630      	mov	r0, r6
   1fa00:	f007 f90a 	bl	26c18 <strlen>
   1fa04:	6923      	ldr	r3, [r4, #16]
   1fa06:	69da      	ldr	r2, [r3, #28]
   1fa08:	4290      	cmp	r0, r2
   1fa0a:	f47f af03 	bne.w	1f814 <pdn_interface_pdn_id_get+0x54>
   1fa0e:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fa12:	4429      	add	r1, r5
   1fa14:	3120      	adds	r1, #32
   1fa16:	4602      	mov	r2, r0
   1fa18:	4419      	add	r1, r3
   1fa1a:	4630      	mov	r0, r6
   1fa1c:	f007 f92a 	bl	26c74 <strncmp>
   1fa20:	e6f8      	b.n	1f814 <pdn_interface_pdn_id_get+0x54>
   1fa22:	4630      	mov	r0, r6
   1fa24:	f007 f8f8 	bl	26c18 <strlen>
   1fa28:	6a23      	ldr	r3, [r4, #32]
   1fa2a:	69da      	ldr	r2, [r3, #28]
   1fa2c:	4290      	cmp	r0, r2
   1fa2e:	f47f af09 	bne.w	1f844 <pdn_interface_pdn_id_get+0x84>
   1fa32:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fa36:	4429      	add	r1, r5
   1fa38:	3120      	adds	r1, #32
   1fa3a:	4602      	mov	r2, r0
   1fa3c:	4419      	add	r1, r3
   1fa3e:	4630      	mov	r0, r6
   1fa40:	f007 f918 	bl	26c74 <strncmp>
   1fa44:	e6fe      	b.n	1f844 <pdn_interface_pdn_id_get+0x84>
   1fa46:	4630      	mov	r0, r6
   1fa48:	f007 f8e6 	bl	26c18 <strlen>
   1fa4c:	69e3      	ldr	r3, [r4, #28]
   1fa4e:	69da      	ldr	r2, [r3, #28]
   1fa50:	4290      	cmp	r0, r2
   1fa52:	f47f aef1 	bne.w	1f838 <pdn_interface_pdn_id_get+0x78>
   1fa56:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fa5a:	4429      	add	r1, r5
   1fa5c:	3120      	adds	r1, #32
   1fa5e:	4602      	mov	r2, r0
   1fa60:	4419      	add	r1, r3
   1fa62:	4630      	mov	r0, r6
   1fa64:	f007 f906 	bl	26c74 <strncmp>
   1fa68:	e6e6      	b.n	1f838 <pdn_interface_pdn_id_get+0x78>
   1fa6a:	4630      	mov	r0, r6
   1fa6c:	f007 f8d4 	bl	26c18 <strlen>
   1fa70:	69a3      	ldr	r3, [r4, #24]
   1fa72:	69da      	ldr	r2, [r3, #28]
   1fa74:	4290      	cmp	r0, r2
   1fa76:	f47f aed9 	bne.w	1f82c <pdn_interface_pdn_id_get+0x6c>
   1fa7a:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fa7e:	4429      	add	r1, r5
   1fa80:	3120      	adds	r1, #32
   1fa82:	4602      	mov	r2, r0
   1fa84:	4419      	add	r1, r3
   1fa86:	4630      	mov	r0, r6
   1fa88:	f007 f8f4 	bl	26c74 <strncmp>
   1fa8c:	e6ce      	b.n	1f82c <pdn_interface_pdn_id_get+0x6c>
   1fa8e:	bf00      	nop
   1fa90:	20021bc0 	.word	0x20021bc0
   1fa94:	20021bbc 	.word	0x20021bbc
   1fa98:	4630      	mov	r0, r6
   1fa9a:	f007 f8bd 	bl	26c18 <strlen>
   1fa9e:	6963      	ldr	r3, [r4, #20]
   1faa0:	69da      	ldr	r2, [r3, #28]
   1faa2:	4290      	cmp	r0, r2
   1faa4:	f47f aebc 	bne.w	1f820 <pdn_interface_pdn_id_get+0x60>
   1faa8:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1faac:	4429      	add	r1, r5
   1faae:	3120      	adds	r1, #32
   1fab0:	4602      	mov	r2, r0
   1fab2:	4419      	add	r1, r3
   1fab4:	4630      	mov	r0, r6
   1fab6:	f007 f8dd 	bl	26c74 <strncmp>
   1faba:	e6b1      	b.n	1f820 <pdn_interface_pdn_id_get+0x60>
   1fabc:	4630      	mov	r0, r6
   1fabe:	f007 f8ab 	bl	26c18 <strlen>
   1fac2:	6923      	ldr	r3, [r4, #16]
   1fac4:	69da      	ldr	r2, [r3, #28]
   1fac6:	4290      	cmp	r0, r2
   1fac8:	f47f af0a 	bne.w	1f8e0 <pdn_interface_pdn_id_get+0x120>
   1facc:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fad0:	4429      	add	r1, r5
   1fad2:	3120      	adds	r1, #32
   1fad4:	4602      	mov	r2, r0
   1fad6:	4419      	add	r1, r3
   1fad8:	4630      	mov	r0, r6
   1fada:	f007 f8cb 	bl	26c74 <strncmp>
   1fade:	2800      	cmp	r0, #0
   1fae0:	f47f aefe 	bne.w	1f8e0 <pdn_interface_pdn_id_get+0x120>
   1fae4:	6923      	ldr	r3, [r4, #16]
   1fae6:	68da      	ldr	r2, [r3, #12]
   1fae8:	07d2      	lsls	r2, r2, #31
   1faea:	f57f aef9 	bpl.w	1f8e0 <pdn_interface_pdn_id_get+0x120>
   1faee:	2504      	movs	r5, #4
   1faf0:	6858      	ldr	r0, [r3, #4]
   1faf2:	1c43      	adds	r3, r0, #1
   1faf4:	f47f aead 	bne.w	1f852 <pdn_interface_pdn_id_get+0x92>
   1faf8:	4e9d      	ldr	r6, [pc, #628]	; (1fd70 <pdn_interface_pdn_id_get+0x5b0>)
   1fafa:	4b9e      	ldr	r3, [pc, #632]	; (1fd74 <pdn_interface_pdn_id_get+0x5b4>)
   1fafc:	4a9e      	ldr	r2, [pc, #632]	; (1fd78 <pdn_interface_pdn_id_get+0x5b8>)
   1fafe:	f44f 7180 	mov.w	r1, #256	; 0x100
   1fb02:	4630      	mov	r0, r6
   1fb04:	f006 fee8 	bl	268d8 <snprintf>
   1fb08:	4c9c      	ldr	r4, [pc, #624]	; (1fd7c <pdn_interface_pdn_id_get+0x5bc>)
   1fb0a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1fb0e:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1fb12:	4a9b      	ldr	r2, [pc, #620]	; (1fd80 <pdn_interface_pdn_id_get+0x5c0>)
   1fb14:	681b      	ldr	r3, [r3, #0]
   1fb16:	4430      	add	r0, r6
   1fb18:	f8df 8270 	ldr.w	r8, [pc, #624]	; 1fd8c <pdn_interface_pdn_id_get+0x5cc>
   1fb1c:	f006 fedc 	bl	268d8 <snprintf>
   1fb20:	4630      	mov	r0, r6
   1fb22:	f8d8 9000 	ldr.w	r9, [r8]
   1fb26:	2700      	movs	r7, #0
   1fb28:	f007 f876 	bl	26c18 <strlen>
   1fb2c:	4631      	mov	r1, r6
   1fb2e:	4602      	mov	r2, r0
   1fb30:	463b      	mov	r3, r7
   1fb32:	4648      	mov	r0, r9
   1fb34:	9701      	str	r7, [sp, #4]
   1fb36:	9700      	str	r7, [sp, #0]
   1fb38:	f7fe fde0 	bl	1e6fc <at_interface_write>
   1fb3c:	4681      	mov	r9, r0
   1fb3e:	4630      	mov	r0, r6
   1fb40:	f007 f86a 	bl	26c18 <strlen>
   1fb44:	4548      	cmp	r0, r9
   1fb46:	f040 810b 	bne.w	1fd60 <pdn_interface_pdn_id_get+0x5a0>
   1fb4a:	463b      	mov	r3, r7
   1fb4c:	f44f 7280 	mov.w	r2, #256	; 0x100
   1fb50:	e9cd 7700 	strd	r7, r7, [sp]
   1fb54:	4631      	mov	r1, r6
   1fb56:	f8d8 0000 	ldr.w	r0, [r8]
   1fb5a:	f7fe ff23 	bl	1e9a4 <at_interface_read>
   1fb5e:	4607      	mov	r7, r0
   1fb60:	4888      	ldr	r0, [pc, #544]	; (1fd84 <pdn_interface_pdn_id_get+0x5c4>)
   1fb62:	f007 f859 	bl	26c18 <strlen>
   1fb66:	4287      	cmp	r7, r0
   1fb68:	4602      	mov	r2, r0
   1fb6a:	f2c0 80e9 	blt.w	1fd40 <pdn_interface_pdn_id_get+0x580>
   1fb6e:	4631      	mov	r1, r6
   1fb70:	4884      	ldr	r0, [pc, #528]	; (1fd84 <pdn_interface_pdn_id_get+0x5c4>)
   1fb72:	f007 f87f 	bl	26c74 <strncmp>
   1fb76:	2800      	cmp	r0, #0
   1fb78:	f040 80e2 	bne.w	1fd40 <pdn_interface_pdn_id_get+0x580>
   1fb7c:	4631      	mov	r1, r6
   1fb7e:	4628      	mov	r0, r5
   1fb80:	f7ff f830 	bl	1ebe4 <pdn_id_get_parser>
   1fb84:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1fb88:	6858      	ldr	r0, [r3, #4]
   1fb8a:	e662      	b.n	1f852 <pdn_interface_pdn_id_get+0x92>
   1fb8c:	4630      	mov	r0, r6
   1fb8e:	f007 f843 	bl	26c18 <strlen>
   1fb92:	6963      	ldr	r3, [r4, #20]
   1fb94:	69da      	ldr	r2, [r3, #28]
   1fb96:	4290      	cmp	r0, r2
   1fb98:	f47f aea8 	bne.w	1f8ec <pdn_interface_pdn_id_get+0x12c>
   1fb9c:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fba0:	4429      	add	r1, r5
   1fba2:	3120      	adds	r1, #32
   1fba4:	4602      	mov	r2, r0
   1fba6:	4419      	add	r1, r3
   1fba8:	4630      	mov	r0, r6
   1fbaa:	f007 f863 	bl	26c74 <strncmp>
   1fbae:	2800      	cmp	r0, #0
   1fbb0:	f47f ae9c 	bne.w	1f8ec <pdn_interface_pdn_id_get+0x12c>
   1fbb4:	6963      	ldr	r3, [r4, #20]
   1fbb6:	68da      	ldr	r2, [r3, #12]
   1fbb8:	07d7      	lsls	r7, r2, #31
   1fbba:	f57f ae97 	bpl.w	1f8ec <pdn_interface_pdn_id_get+0x12c>
   1fbbe:	2505      	movs	r5, #5
   1fbc0:	e796      	b.n	1faf0 <pdn_interface_pdn_id_get+0x330>
   1fbc2:	4630      	mov	r0, r6
   1fbc4:	f007 f828 	bl	26c18 <strlen>
   1fbc8:	69a3      	ldr	r3, [r4, #24]
   1fbca:	69da      	ldr	r2, [r3, #28]
   1fbcc:	4290      	cmp	r0, r2
   1fbce:	f47f ae93 	bne.w	1f8f8 <pdn_interface_pdn_id_get+0x138>
   1fbd2:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fbd6:	4429      	add	r1, r5
   1fbd8:	3120      	adds	r1, #32
   1fbda:	4602      	mov	r2, r0
   1fbdc:	4419      	add	r1, r3
   1fbde:	4630      	mov	r0, r6
   1fbe0:	f007 f848 	bl	26c74 <strncmp>
   1fbe4:	2800      	cmp	r0, #0
   1fbe6:	f47f ae87 	bne.w	1f8f8 <pdn_interface_pdn_id_get+0x138>
   1fbea:	69a3      	ldr	r3, [r4, #24]
   1fbec:	68da      	ldr	r2, [r3, #12]
   1fbee:	07d5      	lsls	r5, r2, #31
   1fbf0:	f57f ae82 	bpl.w	1f8f8 <pdn_interface_pdn_id_get+0x138>
   1fbf4:	2506      	movs	r5, #6
   1fbf6:	e77b      	b.n	1faf0 <pdn_interface_pdn_id_get+0x330>
   1fbf8:	4630      	mov	r0, r6
   1fbfa:	f007 f80d 	bl	26c18 <strlen>
   1fbfe:	69e3      	ldr	r3, [r4, #28]
   1fc00:	69da      	ldr	r2, [r3, #28]
   1fc02:	4290      	cmp	r0, r2
   1fc04:	f47f ae7e 	bne.w	1f904 <pdn_interface_pdn_id_get+0x144>
   1fc08:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fc0c:	4429      	add	r1, r5
   1fc0e:	3120      	adds	r1, #32
   1fc10:	4602      	mov	r2, r0
   1fc12:	4419      	add	r1, r3
   1fc14:	4630      	mov	r0, r6
   1fc16:	f007 f82d 	bl	26c74 <strncmp>
   1fc1a:	2800      	cmp	r0, #0
   1fc1c:	f47f ae72 	bne.w	1f904 <pdn_interface_pdn_id_get+0x144>
   1fc20:	69e3      	ldr	r3, [r4, #28]
   1fc22:	68da      	ldr	r2, [r3, #12]
   1fc24:	07d0      	lsls	r0, r2, #31
   1fc26:	f57f ae6d 	bpl.w	1f904 <pdn_interface_pdn_id_get+0x144>
   1fc2a:	2507      	movs	r5, #7
   1fc2c:	e760      	b.n	1faf0 <pdn_interface_pdn_id_get+0x330>
   1fc2e:	4630      	mov	r0, r6
   1fc30:	f006 fff2 	bl	26c18 <strlen>
   1fc34:	68a3      	ldr	r3, [r4, #8]
   1fc36:	69da      	ldr	r2, [r3, #28]
   1fc38:	4290      	cmp	r0, r2
   1fc3a:	f47f ae45 	bne.w	1f8c8 <pdn_interface_pdn_id_get+0x108>
   1fc3e:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fc42:	4429      	add	r1, r5
   1fc44:	3120      	adds	r1, #32
   1fc46:	4602      	mov	r2, r0
   1fc48:	4419      	add	r1, r3
   1fc4a:	4630      	mov	r0, r6
   1fc4c:	f007 f812 	bl	26c74 <strncmp>
   1fc50:	2800      	cmp	r0, #0
   1fc52:	f47f ae39 	bne.w	1f8c8 <pdn_interface_pdn_id_get+0x108>
   1fc56:	68a3      	ldr	r3, [r4, #8]
   1fc58:	68da      	ldr	r2, [r3, #12]
   1fc5a:	07d0      	lsls	r0, r2, #31
   1fc5c:	f57f ae34 	bpl.w	1f8c8 <pdn_interface_pdn_id_get+0x108>
   1fc60:	2502      	movs	r5, #2
   1fc62:	e745      	b.n	1faf0 <pdn_interface_pdn_id_get+0x330>
   1fc64:	4630      	mov	r0, r6
   1fc66:	f006 ffd7 	bl	26c18 <strlen>
   1fc6a:	68e3      	ldr	r3, [r4, #12]
   1fc6c:	69da      	ldr	r2, [r3, #28]
   1fc6e:	4290      	cmp	r0, r2
   1fc70:	f47f ae30 	bne.w	1f8d4 <pdn_interface_pdn_id_get+0x114>
   1fc74:	e9d3 1705 	ldrd	r1, r7, [r3, #20]
   1fc78:	4439      	add	r1, r7
   1fc7a:	3120      	adds	r1, #32
   1fc7c:	4602      	mov	r2, r0
   1fc7e:	4419      	add	r1, r3
   1fc80:	4630      	mov	r0, r6
   1fc82:	f006 fff7 	bl	26c74 <strncmp>
   1fc86:	2800      	cmp	r0, #0
   1fc88:	f47f ae24 	bne.w	1f8d4 <pdn_interface_pdn_id_get+0x114>
   1fc8c:	68e3      	ldr	r3, [r4, #12]
   1fc8e:	68da      	ldr	r2, [r3, #12]
   1fc90:	07d1      	lsls	r1, r2, #31
   1fc92:	f53f af2d 	bmi.w	1faf0 <pdn_interface_pdn_id_get+0x330>
   1fc96:	e61d      	b.n	1f8d4 <pdn_interface_pdn_id_get+0x114>
   1fc98:	4630      	mov	r0, r6
   1fc9a:	f006 ffbd 	bl	26c18 <strlen>
   1fc9e:	6a23      	ldr	r3, [r4, #32]
   1fca0:	69da      	ldr	r2, [r3, #28]
   1fca2:	4290      	cmp	r0, r2
   1fca4:	f47f ae34 	bne.w	1f910 <pdn_interface_pdn_id_get+0x150>
   1fca8:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fcac:	4429      	add	r1, r5
   1fcae:	3120      	adds	r1, #32
   1fcb0:	4602      	mov	r2, r0
   1fcb2:	4419      	add	r1, r3
   1fcb4:	4630      	mov	r0, r6
   1fcb6:	f006 ffdd 	bl	26c74 <strncmp>
   1fcba:	2800      	cmp	r0, #0
   1fcbc:	f47f ae28 	bne.w	1f910 <pdn_interface_pdn_id_get+0x150>
   1fcc0:	6a23      	ldr	r3, [r4, #32]
   1fcc2:	68da      	ldr	r2, [r3, #12]
   1fcc4:	07d1      	lsls	r1, r2, #31
   1fcc6:	f57f ae23 	bpl.w	1f910 <pdn_interface_pdn_id_get+0x150>
   1fcca:	2508      	movs	r5, #8
   1fccc:	e710      	b.n	1faf0 <pdn_interface_pdn_id_get+0x330>
   1fcce:	4630      	mov	r0, r6
   1fcd0:	f006 ffa2 	bl	26c18 <strlen>
   1fcd4:	6863      	ldr	r3, [r4, #4]
   1fcd6:	69da      	ldr	r2, [r3, #28]
   1fcd8:	4290      	cmp	r0, r2
   1fcda:	f47f adef 	bne.w	1f8bc <pdn_interface_pdn_id_get+0xfc>
   1fcde:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fce2:	4429      	add	r1, r5
   1fce4:	3120      	adds	r1, #32
   1fce6:	4602      	mov	r2, r0
   1fce8:	4419      	add	r1, r3
   1fcea:	4630      	mov	r0, r6
   1fcec:	f006 ffc2 	bl	26c74 <strncmp>
   1fcf0:	2800      	cmp	r0, #0
   1fcf2:	f47f ade3 	bne.w	1f8bc <pdn_interface_pdn_id_get+0xfc>
   1fcf6:	6863      	ldr	r3, [r4, #4]
   1fcf8:	68da      	ldr	r2, [r3, #12]
   1fcfa:	07d5      	lsls	r5, r2, #31
   1fcfc:	f57f adde 	bpl.w	1f8bc <pdn_interface_pdn_id_get+0xfc>
   1fd00:	2501      	movs	r5, #1
   1fd02:	e6f5      	b.n	1faf0 <pdn_interface_pdn_id_get+0x330>
   1fd04:	4608      	mov	r0, r1
   1fd06:	f006 ff87 	bl	26c18 <strlen>
   1fd0a:	6823      	ldr	r3, [r4, #0]
   1fd0c:	69da      	ldr	r2, [r3, #28]
   1fd0e:	4290      	cmp	r0, r2
   1fd10:	f47f adce 	bne.w	1f8b0 <pdn_interface_pdn_id_get+0xf0>
   1fd14:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1fd18:	4429      	add	r1, r5
   1fd1a:	3120      	adds	r1, #32
   1fd1c:	4602      	mov	r2, r0
   1fd1e:	4419      	add	r1, r3
   1fd20:	4630      	mov	r0, r6
   1fd22:	f006 ffa7 	bl	26c74 <strncmp>
   1fd26:	4605      	mov	r5, r0
   1fd28:	2800      	cmp	r0, #0
   1fd2a:	f47f adc1 	bne.w	1f8b0 <pdn_interface_pdn_id_get+0xf0>
   1fd2e:	6823      	ldr	r3, [r4, #0]
   1fd30:	68da      	ldr	r2, [r3, #12]
   1fd32:	07d7      	lsls	r7, r2, #31
   1fd34:	f53f aedc 	bmi.w	1faf0 <pdn_interface_pdn_id_get+0x330>
   1fd38:	e5ba      	b.n	1f8b0 <pdn_interface_pdn_id_get+0xf0>
   1fd3a:	f04f 30ff 	mov.w	r0, #4294967295
   1fd3e:	4770      	bx	lr
   1fd40:	4811      	ldr	r0, [pc, #68]	; (1fd88 <pdn_interface_pdn_id_get+0x5c8>)
   1fd42:	f006 ff69 	bl	26c18 <strlen>
   1fd46:	490a      	ldr	r1, [pc, #40]	; (1fd70 <pdn_interface_pdn_id_get+0x5b0>)
   1fd48:	4602      	mov	r2, r0
   1fd4a:	480f      	ldr	r0, [pc, #60]	; (1fd88 <pdn_interface_pdn_id_get+0x5c8>)
   1fd4c:	f006 ff92 	bl	26c74 <strncmp>
   1fd50:	b930      	cbnz	r0, 1fd60 <pdn_interface_pdn_id_get+0x5a0>
   1fd52:	2008      	movs	r0, #8
   1fd54:	f7f6 feda 	bl	16b0c <bsd_os_errno_set>
   1fd58:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1fd5c:	6858      	ldr	r0, [r3, #4]
   1fd5e:	e578      	b.n	1f852 <pdn_interface_pdn_id_get+0x92>
   1fd60:	2005      	movs	r0, #5
   1fd62:	f7f6 fed3 	bl	16b0c <bsd_os_errno_set>
   1fd66:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1fd6a:	6858      	ldr	r0, [r3, #4]
   1fd6c:	e571      	b.n	1f852 <pdn_interface_pdn_id_get+0x92>
   1fd6e:	bf00      	nop
   1fd70:	20021ac0 	.word	0x20021ac0
   1fd74:	0002f6d4 	.word	0x0002f6d4
   1fd78:	0002f710 	.word	0x0002f710
   1fd7c:	20021bc0 	.word	0x20021bc0
   1fd80:	0002f6d0 	.word	0x0002f6d0
   1fd84:	0002f6e4 	.word	0x0002f6e4
   1fd88:	0002f720 	.word	0x0002f720
   1fd8c:	20021abc 	.word	0x20021abc

0001fd90 <bsd_platform_error_handler>:
   1fd90:	b508      	push	{r3, lr}
   1fd92:	f7f1 fce9 	bl	11768 <bsd_recoverable_error_handler>
   1fd96:	bd08      	pop	{r3, pc}

0001fd98 <bsd_init>:
   1fd98:	b160      	cbz	r0, 1fdb4 <bsd_init+0x1c>
   1fd9a:	b510      	push	{r4, lr}
   1fd9c:	4c07      	ldr	r4, [pc, #28]	; (1fdbc <bsd_init+0x24>)
   1fd9e:	7823      	ldrb	r3, [r4, #0]
   1fda0:	b92b      	cbnz	r3, 1fdae <bsd_init+0x16>
   1fda2:	f000 f81b 	bl	1fddc <bsd_platform_init>
   1fda6:	b908      	cbnz	r0, 1fdac <bsd_init+0x14>
   1fda8:	2301      	movs	r3, #1
   1fdaa:	7023      	strb	r3, [r4, #0]
   1fdac:	bd10      	pop	{r4, pc}
   1fdae:	f04f 30ff 	mov.w	r0, #4294967295
   1fdb2:	bd10      	pop	{r4, pc}
   1fdb4:	f04f 30ff 	mov.w	r0, #4294967295
   1fdb8:	4770      	bx	lr
   1fdba:	bf00      	nop
   1fdbc:	2002629f 	.word	0x2002629f

0001fdc0 <unimplemented_method>:
   1fdc0:	b40f      	push	{r0, r1, r2, r3}
   1fdc2:	b508      	push	{r3, lr}
   1fdc4:	202d      	movs	r0, #45	; 0x2d
   1fdc6:	f7f6 fea1 	bl	16b0c <bsd_os_errno_set>
   1fdca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1fdce:	f04f 30ff 	mov.w	r0, #4294967295
   1fdd2:	b004      	add	sp, #16
   1fdd4:	4770      	bx	lr
   1fdd6:	bf00      	nop

0001fdd8 <rpc_transport_ipc_fault_handler>:
   1fdd8:	f7ff bfda 	b.w	1fd90 <bsd_platform_error_handler>

0001fddc <bsd_platform_init>:
   1fddc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fdde:	f04f 0c00 	mov.w	ip, #0
   1fde2:	f247 0660 	movw	r6, #28768	; 0x7060
   1fde6:	f24b 0260 	movw	r2, #45152	; 0xb060
   1fdea:	6843      	ldr	r3, [r0, #4]
   1fdec:	4d3a      	ldr	r5, [pc, #232]	; (1fed8 <bsd_platform_init+0xfc>)
   1fdee:	4607      	mov	r7, r0
   1fdf0:	602b      	str	r3, [r5, #0]
   1fdf2:	7801      	ldrb	r1, [r0, #0]
   1fdf4:	2006      	movs	r0, #6
   1fdf6:	4561      	cmp	r1, ip
   1fdf8:	bf08      	it	eq
   1fdfa:	4632      	moveq	r2, r6
   1fdfc:	4413      	add	r3, r2
   1fdfe:	4c37      	ldr	r4, [pc, #220]	; (1fedc <bsd_platform_init+0x100>)
   1fe00:	60ab      	str	r3, [r5, #8]
   1fe02:	68b9      	ldr	r1, [r7, #8]
   1fe04:	6063      	str	r3, [r4, #4]
   1fe06:	4b36      	ldr	r3, [pc, #216]	; (1fee0 <bsd_platform_init+0x104>)
   1fe08:	b093      	sub	sp, #76	; 0x4c
   1fe0a:	606a      	str	r2, [r5, #4]
   1fe0c:	f8a4 c000 	strh.w	ip, [r4]
   1fe10:	1a8a      	subs	r2, r1, r2
   1fe12:	60ea      	str	r2, [r5, #12]
   1fe14:	60a2      	str	r2, [r4, #8]
   1fe16:	81a0      	strh	r0, [r4, #12]
   1fe18:	6123      	str	r3, [r4, #16]
   1fe1a:	f001 f883 	bl	20f24 <nrf_mem_init>
   1fe1e:	2800      	cmp	r0, #0
   1fe20:	d156      	bne.n	1fed0 <bsd_platform_init+0xf4>
   1fe22:	4621      	mov	r1, r4
   1fe24:	a801      	add	r0, sp, #4
   1fe26:	f001 f8f1 	bl	2100c <nrf_mem_register>
   1fe2a:	2800      	cmp	r0, #0
   1fe2c:	d150      	bne.n	1fed0 <bsd_platform_init+0xf4>
   1fe2e:	f7f7 f837 	bl	16ea0 <bsd_os_init>
   1fe32:	f7fd fbff 	bl	1d634 <rpc_framework_init>
   1fe36:	2800      	cmp	r0, #0
   1fe38:	d14a      	bne.n	1fed0 <bsd_platform_init+0xf4>
   1fe3a:	783a      	ldrb	r2, [r7, #0]
   1fe3c:	682b      	ldr	r3, [r5, #0]
   1fe3e:	bb32      	cbnz	r2, 1fe8e <bsd_platform_init+0xb2>
   1fe40:	4606      	mov	r6, r0
   1fe42:	2220      	movs	r2, #32
   1fe44:	2408      	movs	r4, #8
   1fe46:	2500      	movs	r5, #0
   1fe48:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   1fe4c:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   1fe50:	f503 5141 	add.w	r1, r3, #12352	; 0x3040
   1fe54:	4411      	add	r1, r2
   1fe56:	9302      	str	r3, [sp, #8]
   1fe58:	e9cd 6008 	strd	r6, r0, [sp, #32]
   1fe5c:	910c      	str	r1, [sp, #48]	; 0x30
   1fe5e:	9203      	str	r2, [sp, #12]
   1fe60:	f103 0140 	add.w	r1, r3, #64	; 0x40
   1fe64:	9205      	str	r2, [sp, #20]
   1fe66:	9207      	str	r2, [sp, #28]
   1fe68:	eb0d 0004 	add.w	r0, sp, r4
   1fe6c:	189a      	adds	r2, r3, r2
   1fe6e:	3360      	adds	r3, #96	; 0x60
   1fe70:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   1fe74:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   1fe78:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
   1fe7c:	940f      	str	r4, [sp, #60]	; 0x3c
   1fe7e:	9104      	str	r1, [sp, #16]
   1fe80:	9206      	str	r2, [sp, #24]
   1fe82:	930a      	str	r3, [sp, #40]	; 0x28
   1fe84:	f7fa fb3a 	bl	1a4fc <rpc_transport_ipc_init>
   1fe88:	b128      	cbz	r0, 1fe96 <bsd_platform_init+0xba>
   1fe8a:	b013      	add	sp, #76	; 0x4c
   1fe8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fe8e:	441e      	add	r6, r3
   1fe90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   1fe94:	e7d5      	b.n	1fe42 <bsd_platform_init+0x66>
   1fe96:	f001 fda9 	bl	219ec <interface_init>
   1fe9a:	b9c8      	cbnz	r0, 1fed0 <bsd_platform_init+0xf4>
   1fe9c:	f7fe fcac 	bl	1e7f8 <at_interface_init>
   1fea0:	b9b0      	cbnz	r0, 1fed0 <bsd_platform_init+0xf4>
   1fea2:	f7fb fe4b 	bl	1bb3c <ip_interface_init>
   1fea6:	b998      	cbnz	r0, 1fed0 <bsd_platform_init+0xf4>
   1fea8:	f7fb f902 	bl	1b0b0 <tls_interface_init>
   1feac:	b980      	cbnz	r0, 1fed0 <bsd_platform_init+0xf4>
   1feae:	f001 fab9 	bl	21424 <mfu_interface_init>
   1feb2:	b968      	cbnz	r0, 1fed0 <bsd_platform_init+0xf4>
   1feb4:	f7fe feee 	bl	1ec94 <pdn_interface_init>
   1feb8:	b950      	cbnz	r0, 1fed0 <bsd_platform_init+0xf4>
   1feba:	f7fe faf3 	bl	1e4a4 <gnss_interface_init>
   1febe:	b938      	cbnz	r0, 1fed0 <bsd_platform_init+0xf4>
   1fec0:	f7f9 fd5a 	bl	19978 <logobj_interface_init>
   1fec4:	1b40      	subs	r0, r0, r5
   1fec6:	bf18      	it	ne
   1fec8:	2001      	movne	r0, #1
   1feca:	4240      	negs	r0, r0
   1fecc:	b013      	add	sp, #76	; 0x4c
   1fece:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fed0:	f04f 30ff 	mov.w	r0, #4294967295
   1fed4:	b013      	add	sp, #76	; 0x4c
   1fed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fed8:	20021bfc 	.word	0x20021bfc
   1fedc:	20021be8 	.word	0x20021be8
   1fee0:	0002f874 	.word	0x0002f874

0001fee4 <bsd_platform_af_method_table_get>:
   1fee4:	2805      	cmp	r0, #5
   1fee6:	d02a      	beq.n	1ff3e <bsd_platform_af_method_table_get+0x5a>
   1fee8:	b508      	push	{r3, lr}
   1feea:	d914      	bls.n	1ff16 <bsd_platform_af_method_table_get+0x32>
   1feec:	280a      	cmp	r0, #10
   1feee:	d016      	beq.n	1ff1e <bsd_platform_af_method_table_get+0x3a>
   1fef0:	2866      	cmp	r0, #102	; 0x66
   1fef2:	d11f      	bne.n	1ff34 <bsd_platform_af_method_table_get+0x50>
   1fef4:	f240 2302 	movw	r3, #514	; 0x202
   1fef8:	429a      	cmp	r2, r3
   1fefa:	d035      	beq.n	1ff68 <bsd_platform_af_method_table_get+0x84>
   1fefc:	f240 2305 	movw	r3, #517	; 0x205
   1ff00:	429a      	cmp	r2, r3
   1ff02:	d035      	beq.n	1ff70 <bsd_platform_af_method_table_get+0x8c>
   1ff04:	f240 2301 	movw	r3, #513	; 0x201
   1ff08:	429a      	cmp	r2, r3
   1ff0a:	d02f      	beq.n	1ff6c <bsd_platform_af_method_table_get+0x88>
   1ff0c:	202b      	movs	r0, #43	; 0x2b
   1ff0e:	f7f6 fdfd 	bl	16b0c <bsd_os_errno_set>
   1ff12:	2000      	movs	r0, #0
   1ff14:	bd08      	pop	{r3, pc}
   1ff16:	2801      	cmp	r0, #1
   1ff18:	d016      	beq.n	1ff48 <bsd_platform_af_method_table_get+0x64>
   1ff1a:	2802      	cmp	r0, #2
   1ff1c:	d10a      	bne.n	1ff34 <bsd_platform_af_method_table_get+0x50>
   1ff1e:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   1ff22:	d21a      	bcs.n	1ff5a <bsd_platform_af_method_table_get+0x76>
   1ff24:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1ff28:	d21a      	bcs.n	1ff60 <bsd_platform_af_method_table_get+0x7c>
   1ff2a:	3a01      	subs	r2, #1
   1ff2c:	2a01      	cmp	r2, #1
   1ff2e:	d8ed      	bhi.n	1ff0c <bsd_platform_af_method_table_get+0x28>
   1ff30:	4810      	ldr	r0, [pc, #64]	; (1ff74 <bsd_platform_af_method_table_get+0x90>)
   1ff32:	bd08      	pop	{r3, pc}
   1ff34:	2016      	movs	r0, #22
   1ff36:	f7f6 fde9 	bl	16b0c <bsd_os_errno_set>
   1ff3a:	2000      	movs	r0, #0
   1ff3c:	bd08      	pop	{r3, pc}
   1ff3e:	2903      	cmp	r1, #3
   1ff40:	480d      	ldr	r0, [pc, #52]	; (1ff78 <bsd_platform_af_method_table_get+0x94>)
   1ff42:	bf18      	it	ne
   1ff44:	2000      	movne	r0, #0
   1ff46:	4770      	bx	lr
   1ff48:	f240 2303 	movw	r3, #515	; 0x203
   1ff4c:	429a      	cmp	r2, r3
   1ff4e:	d009      	beq.n	1ff64 <bsd_platform_af_method_table_get+0x80>
   1ff50:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1ff54:	d1da      	bne.n	1ff0c <bsd_platform_af_method_table_get+0x28>
   1ff56:	4809      	ldr	r0, [pc, #36]	; (1ff7c <bsd_platform_af_method_table_get+0x98>)
   1ff58:	bd08      	pop	{r3, pc}
   1ff5a:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1ff5e:	d1d5      	bne.n	1ff0c <bsd_platform_af_method_table_get+0x28>
   1ff60:	4807      	ldr	r0, [pc, #28]	; (1ff80 <bsd_platform_af_method_table_get+0x9c>)
   1ff62:	bd08      	pop	{r3, pc}
   1ff64:	4807      	ldr	r0, [pc, #28]	; (1ff84 <bsd_platform_af_method_table_get+0xa0>)
   1ff66:	bd08      	pop	{r3, pc}
   1ff68:	4807      	ldr	r0, [pc, #28]	; (1ff88 <bsd_platform_af_method_table_get+0xa4>)
   1ff6a:	bd08      	pop	{r3, pc}
   1ff6c:	4807      	ldr	r0, [pc, #28]	; (1ff8c <bsd_platform_af_method_table_get+0xa8>)
   1ff6e:	bd08      	pop	{r3, pc}
   1ff70:	4807      	ldr	r0, [pc, #28]	; (1ff90 <bsd_platform_af_method_table_get+0xac>)
   1ff72:	bd08      	pop	{r3, pc}
   1ff74:	0002f75c 	.word	0x0002f75c
   1ff78:	0002f84c 	.word	0x0002f84c
   1ff7c:	0002f7fc 	.word	0x0002f7fc
   1ff80:	0002f784 	.word	0x0002f784
   1ff84:	0002f7ac 	.word	0x0002f7ac
   1ff88:	0002f7d4 	.word	0x0002f7d4
   1ff8c:	0002f734 	.word	0x0002f734
   1ff90:	0002f824 	.word	0x0002f824

0001ff94 <bsd_platform_fd_method_table_get>:
   1ff94:	b538      	push	{r3, r4, r5, lr}
   1ff96:	4605      	mov	r5, r0
   1ff98:	f001 fe5a 	bl	21c50 <interface_socket_from_handle_get>
   1ff9c:	4604      	mov	r4, r0
   1ff9e:	b960      	cbnz	r0, 1ffba <bsd_platform_fd_method_table_get+0x26>
   1ffa0:	4b2c      	ldr	r3, [pc, #176]	; (20054 <bsd_platform_fd_method_table_get+0xc0>)
   1ffa2:	429d      	cmp	r5, r3
   1ffa4:	d02f      	beq.n	20006 <bsd_platform_fd_method_table_get+0x72>
   1ffa6:	0c2b      	lsrs	r3, r5, #16
   1ffa8:	4a2b      	ldr	r2, [pc, #172]	; (20058 <bsd_platform_fd_method_table_get+0xc4>)
   1ffaa:	041b      	lsls	r3, r3, #16
   1ffac:	4293      	cmp	r3, r2
   1ffae:	d03d      	beq.n	2002c <bsd_platform_fd_method_table_get+0x98>
   1ffb0:	4b2a      	ldr	r3, [pc, #168]	; (2005c <bsd_platform_fd_method_table_get+0xc8>)
   1ffb2:	429d      	cmp	r5, r3
   1ffb4:	d149      	bne.n	2004a <bsd_platform_fd_method_table_get+0xb6>
   1ffb6:	482a      	ldr	r0, [pc, #168]	; (20060 <bsd_platform_fd_method_table_get+0xcc>)
   1ffb8:	bd38      	pop	{r3, r4, r5, pc}
   1ffba:	68c3      	ldr	r3, [r0, #12]
   1ffbc:	6942      	ldr	r2, [r0, #20]
   1ffbe:	2b05      	cmp	r3, #5
   1ffc0:	d036      	beq.n	20030 <bsd_platform_fd_method_table_get+0x9c>
   1ffc2:	d911      	bls.n	1ffe8 <bsd_platform_fd_method_table_get+0x54>
   1ffc4:	2b0a      	cmp	r3, #10
   1ffc6:	d013      	beq.n	1fff0 <bsd_platform_fd_method_table_get+0x5c>
   1ffc8:	2b66      	cmp	r3, #102	; 0x66
   1ffca:	d11e      	bne.n	2000a <bsd_platform_fd_method_table_get+0x76>
   1ffcc:	f240 2302 	movw	r3, #514	; 0x202
   1ffd0:	429a      	cmp	r2, r3
   1ffd2:	d02b      	beq.n	2002c <bsd_platform_fd_method_table_get+0x98>
   1ffd4:	f240 2305 	movw	r3, #517	; 0x205
   1ffd8:	429a      	cmp	r2, r3
   1ffda:	d02f      	beq.n	2003c <bsd_platform_fd_method_table_get+0xa8>
   1ffdc:	f240 2301 	movw	r3, #513	; 0x201
   1ffe0:	429a      	cmp	r2, r3
   1ffe2:	d11e      	bne.n	20022 <bsd_platform_fd_method_table_get+0x8e>
   1ffe4:	481f      	ldr	r0, [pc, #124]	; (20064 <bsd_platform_fd_method_table_get+0xd0>)
   1ffe6:	bd38      	pop	{r3, r4, r5, pc}
   1ffe8:	2b01      	cmp	r3, #1
   1ffea:	d013      	beq.n	20014 <bsd_platform_fd_method_table_get+0x80>
   1ffec:	2b02      	cmp	r3, #2
   1ffee:	d10c      	bne.n	2000a <bsd_platform_fd_method_table_get+0x76>
   1fff0:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   1fff4:	d224      	bcs.n	20040 <bsd_platform_fd_method_table_get+0xac>
   1fff6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1fffa:	d224      	bcs.n	20046 <bsd_platform_fd_method_table_get+0xb2>
   1fffc:	3a01      	subs	r2, #1
   1fffe:	2a01      	cmp	r2, #1
   20000:	d80f      	bhi.n	20022 <bsd_platform_fd_method_table_get+0x8e>
   20002:	4819      	ldr	r0, [pc, #100]	; (20068 <bsd_platform_fd_method_table_get+0xd4>)
   20004:	bd38      	pop	{r3, r4, r5, pc}
   20006:	4819      	ldr	r0, [pc, #100]	; (2006c <bsd_platform_fd_method_table_get+0xd8>)
   20008:	bd38      	pop	{r3, r4, r5, pc}
   2000a:	2016      	movs	r0, #22
   2000c:	f7f6 fd7e 	bl	16b0c <bsd_os_errno_set>
   20010:	2000      	movs	r0, #0
   20012:	bd38      	pop	{r3, r4, r5, pc}
   20014:	f240 2303 	movw	r3, #515	; 0x203
   20018:	429a      	cmp	r2, r3
   2001a:	d0f4      	beq.n	20006 <bsd_platform_fd_method_table_get+0x72>
   2001c:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   20020:	d0c9      	beq.n	1ffb6 <bsd_platform_fd_method_table_get+0x22>
   20022:	202b      	movs	r0, #43	; 0x2b
   20024:	f7f6 fd72 	bl	16b0c <bsd_os_errno_set>
   20028:	2000      	movs	r0, #0
   2002a:	bd38      	pop	{r3, r4, r5, pc}
   2002c:	4810      	ldr	r0, [pc, #64]	; (20070 <bsd_platform_fd_method_table_get+0xdc>)
   2002e:	bd38      	pop	{r3, r4, r5, pc}
   20030:	6903      	ldr	r3, [r0, #16]
   20032:	4810      	ldr	r0, [pc, #64]	; (20074 <bsd_platform_fd_method_table_get+0xe0>)
   20034:	2b03      	cmp	r3, #3
   20036:	bf18      	it	ne
   20038:	2000      	movne	r0, #0
   2003a:	bd38      	pop	{r3, r4, r5, pc}
   2003c:	480e      	ldr	r0, [pc, #56]	; (20078 <bsd_platform_fd_method_table_get+0xe4>)
   2003e:	bd38      	pop	{r3, r4, r5, pc}
   20040:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   20044:	d1ed      	bne.n	20022 <bsd_platform_fd_method_table_get+0x8e>
   20046:	480d      	ldr	r0, [pc, #52]	; (2007c <bsd_platform_fd_method_table_get+0xe8>)
   20048:	bd38      	pop	{r3, r4, r5, pc}
   2004a:	2009      	movs	r0, #9
   2004c:	f7f6 fd5e 	bl	16b0c <bsd_os_errno_set>
   20050:	4620      	mov	r0, r4
   20052:	bd38      	pop	{r3, r4, r5, pc}
   20054:	49765432 	.word	0x49765432
   20058:	789a0000 	.word	0x789a0000
   2005c:	49765443 	.word	0x49765443
   20060:	0002f7fc 	.word	0x0002f7fc
   20064:	0002f734 	.word	0x0002f734
   20068:	0002f75c 	.word	0x0002f75c
   2006c:	0002f7ac 	.word	0x0002f7ac
   20070:	0002f7d4 	.word	0x0002f7d4
   20074:	0002f84c 	.word	0x0002f84c
   20078:	0002f824 	.word	0x0002f824
   2007c:	0002f784 	.word	0x0002f784

00020080 <bsd_platform_getaddrinfo>:
   20080:	f7fc bec6 	b.w	1ce10 <ip_interface_getaddrinfo>

00020084 <bsd_platform_freeaddrinfo>:
   20084:	f7fc bfc2 	b.w	1d00c <ip_interface_freeaddrinfo>

00020088 <bsd_platform_poll>:
   20088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2008c:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   20090:	b083      	sub	sp, #12
   20092:	9200      	str	r2, [sp, #0]
   20094:	2800      	cmp	r0, #0
   20096:	d048      	beq.n	2012a <bsd_platform_poll+0xa2>
   20098:	1e4b      	subs	r3, r1, #1
   2009a:	2b08      	cmp	r3, #8
   2009c:	d845      	bhi.n	2012a <bsd_platform_poll+0xa2>
   2009e:	4680      	mov	r8, r0
   200a0:	4605      	mov	r5, r0
   200a2:	2400      	movs	r4, #0
   200a4:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   200a8:	88ab      	ldrh	r3, [r5, #4]
   200aa:	6828      	ldr	r0, [r5, #0]
   200ac:	f003 0303 	and.w	r3, r3, #3
   200b0:	a901      	add	r1, sp, #4
   200b2:	f043 061c 	orr.w	r6, r3, #28
   200b6:	f001 fdd9 	bl	21c6c <interface_socket_event_get>
   200ba:	9b01      	ldr	r3, [sp, #4]
   200bc:	3508      	adds	r5, #8
   200be:	4033      	ands	r3, r6
   200c0:	f825 3c02 	strh.w	r3, [r5, #-2]
   200c4:	b103      	cbz	r3, 200c8 <bsd_platform_poll+0x40>
   200c6:	3401      	adds	r4, #1
   200c8:	42af      	cmp	r7, r5
   200ca:	d1ed      	bne.n	200a8 <bsd_platform_poll+0x20>
   200cc:	bb9c      	cbnz	r4, 20136 <bsd_platform_poll+0xae>
   200ce:	4669      	mov	r1, sp
   200d0:	4640      	mov	r0, r8
   200d2:	f7f6 fc63 	bl	1699c <bsd_os_timedwait>
   200d6:	4607      	mov	r7, r0
   200d8:	b108      	cbz	r0, 200de <bsd_platform_poll+0x56>
   200da:	283c      	cmp	r0, #60	; 0x3c
   200dc:	d11d      	bne.n	2011a <bsd_platform_poll+0x92>
   200de:	46c1      	mov	r9, r8
   200e0:	2600      	movs	r6, #0
   200e2:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   200e6:	f8d9 0000 	ldr.w	r0, [r9]
   200ea:	f003 0303 	and.w	r3, r3, #3
   200ee:	a901      	add	r1, sp, #4
   200f0:	f043 041c 	orr.w	r4, r3, #28
   200f4:	f001 fdba 	bl	21c6c <interface_socket_event_get>
   200f8:	9b01      	ldr	r3, [sp, #4]
   200fa:	f109 0908 	add.w	r9, r9, #8
   200fe:	4023      	ands	r3, r4
   20100:	f829 3c02 	strh.w	r3, [r9, #-2]
   20104:	b103      	cbz	r3, 20108 <bsd_platform_poll+0x80>
   20106:	3601      	adds	r6, #1
   20108:	454d      	cmp	r5, r9
   2010a:	d1ea      	bne.n	200e2 <bsd_platform_poll+0x5a>
   2010c:	b90e      	cbnz	r6, 20112 <bsd_platform_poll+0x8a>
   2010e:	2f00      	cmp	r7, #0
   20110:	d0dd      	beq.n	200ce <bsd_platform_poll+0x46>
   20112:	4630      	mov	r0, r6
   20114:	b003      	add	sp, #12
   20116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2011a:	2023      	movs	r0, #35	; 0x23
   2011c:	f7f6 fcf6 	bl	16b0c <bsd_os_errno_set>
   20120:	f04f 30ff 	mov.w	r0, #4294967295
   20124:	b003      	add	sp, #12
   20126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2012a:	2016      	movs	r0, #22
   2012c:	f7f6 fcee 	bl	16b0c <bsd_os_errno_set>
   20130:	f04f 30ff 	mov.w	r0, #4294967295
   20134:	e7ee      	b.n	20114 <bsd_platform_poll+0x8c>
   20136:	4620      	mov	r0, r4
   20138:	e7ec      	b.n	20114 <bsd_platform_poll+0x8c>
   2013a:	bf00      	nop

0002013c <bsd_platform_fcntl>:
   2013c:	b508      	push	{r3, lr}
   2013e:	4b06      	ldr	r3, [pc, #24]	; (20158 <bsd_platform_fcntl+0x1c>)
   20140:	4298      	cmp	r0, r3
   20142:	d003      	beq.n	2014c <bsd_platform_fcntl+0x10>
   20144:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   20148:	f001 be3a 	b.w	21dc0 <interface_socket_fcntl>
   2014c:	202d      	movs	r0, #45	; 0x2d
   2014e:	f7f6 fcdd 	bl	16b0c <bsd_os_errno_set>
   20152:	f04f 30ff 	mov.w	r0, #4294967295
   20156:	bd08      	pop	{r3, pc}
   20158:	49765432 	.word	0x49765432

0002015c <linked_list_init>:
   2015c:	b128      	cbz	r0, 2016a <linked_list_init+0xe>
   2015e:	2300      	movs	r3, #0
   20160:	6003      	str	r3, [r0, #0]
   20162:	e9c0 3301 	strd	r3, r3, [r0, #4]
   20166:	4618      	mov	r0, r3
   20168:	4770      	bx	lr
   2016a:	2007      	movs	r0, #7
   2016c:	4770      	bx	lr
   2016e:	bf00      	nop

00020170 <linked_list_push>:
   20170:	6802      	ldr	r2, [r0, #0]
   20172:	4603      	mov	r3, r0
   20174:	3201      	adds	r2, #1
   20176:	d00e      	beq.n	20196 <linked_list_push+0x26>
   20178:	2200      	movs	r2, #0
   2017a:	600a      	str	r2, [r1, #0]
   2017c:	6802      	ldr	r2, [r0, #0]
   2017e:	b13a      	cbz	r2, 20190 <linked_list_push+0x20>
   20180:	6882      	ldr	r2, [r0, #8]
   20182:	6011      	str	r1, [r2, #0]
   20184:	6081      	str	r1, [r0, #8]
   20186:	681a      	ldr	r2, [r3, #0]
   20188:	2000      	movs	r0, #0
   2018a:	3201      	adds	r2, #1
   2018c:	601a      	str	r2, [r3, #0]
   2018e:	4770      	bx	lr
   20190:	e9c0 1101 	strd	r1, r1, [r0, #4]
   20194:	e7f7      	b.n	20186 <linked_list_push+0x16>
   20196:	2004      	movs	r0, #4
   20198:	4770      	bx	lr
   2019a:	bf00      	nop

0002019c <linked_list_pop>:
   2019c:	4603      	mov	r3, r0
   2019e:	6800      	ldr	r0, [r0, #0]
   201a0:	b128      	cbz	r0, 201ae <linked_list_pop+0x12>
   201a2:	6858      	ldr	r0, [r3, #4]
   201a4:	681a      	ldr	r2, [r3, #0]
   201a6:	6801      	ldr	r1, [r0, #0]
   201a8:	3a01      	subs	r2, #1
   201aa:	6059      	str	r1, [r3, #4]
   201ac:	601a      	str	r2, [r3, #0]
   201ae:	4770      	bx	lr

000201b0 <linked_list_peek>:
   201b0:	6803      	ldr	r3, [r0, #0]
   201b2:	b10b      	cbz	r3, 201b8 <linked_list_peek+0x8>
   201b4:	6840      	ldr	r0, [r0, #4]
   201b6:	4770      	bx	lr
   201b8:	4618      	mov	r0, r3
   201ba:	4770      	bx	lr

000201bc <linked_list_size_get>:
   201bc:	6800      	ldr	r0, [r0, #0]
   201be:	4770      	bx	lr

000201c0 <linked_list_get_next>:
   201c0:	6800      	ldr	r0, [r0, #0]
   201c2:	4770      	bx	lr

000201c4 <nrf_socket>:
   201c4:	b570      	push	{r4, r5, r6, lr}
   201c6:	4604      	mov	r4, r0
   201c8:	460d      	mov	r5, r1
   201ca:	4616      	mov	r6, r2
   201cc:	f7ff fe8a 	bl	1fee4 <bsd_platform_af_method_table_get>
   201d0:	b130      	cbz	r0, 201e0 <nrf_socket+0x1c>
   201d2:	6803      	ldr	r3, [r0, #0]
   201d4:	4632      	mov	r2, r6
   201d6:	4629      	mov	r1, r5
   201d8:	4620      	mov	r0, r4
   201da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   201de:	4718      	bx	r3
   201e0:	f04f 30ff 	mov.w	r0, #4294967295
   201e4:	bd70      	pop	{r4, r5, r6, pc}
   201e6:	bf00      	nop

000201e8 <nrf_close>:
   201e8:	b510      	push	{r4, lr}
   201ea:	4604      	mov	r4, r0
   201ec:	f7ff fed2 	bl	1ff94 <bsd_platform_fd_method_table_get>
   201f0:	b120      	cbz	r0, 201fc <nrf_close+0x14>
   201f2:	6843      	ldr	r3, [r0, #4]
   201f4:	4620      	mov	r0, r4
   201f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   201fa:	4718      	bx	r3
   201fc:	f04f 30ff 	mov.w	r0, #4294967295
   20200:	bd10      	pop	{r4, pc}
   20202:	bf00      	nop

00020204 <nrf_sendto>:
   20204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20208:	460d      	mov	r5, r1
   2020a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2020e:	4616      	mov	r6, r2
   20210:	461f      	mov	r7, r3
   20212:	4604      	mov	r4, r0
   20214:	f7ff febe 	bl	1ff94 <bsd_platform_fd_method_table_get>
   20218:	b158      	cbz	r0, 20232 <nrf_sendto+0x2e>
   2021a:	e9cd 8908 	strd	r8, r9, [sp, #32]
   2021e:	f8d0 e008 	ldr.w	lr, [r0, #8]
   20222:	463b      	mov	r3, r7
   20224:	4632      	mov	r2, r6
   20226:	4629      	mov	r1, r5
   20228:	4620      	mov	r0, r4
   2022a:	46f4      	mov	ip, lr
   2022c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20230:	4760      	bx	ip
   20232:	f04f 30ff 	mov.w	r0, #4294967295
   20236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2023a:	bf00      	nop

0002023c <nrf_recvfrom>:
   2023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20240:	460d      	mov	r5, r1
   20242:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   20246:	4616      	mov	r6, r2
   20248:	461f      	mov	r7, r3
   2024a:	4604      	mov	r4, r0
   2024c:	f7ff fea2 	bl	1ff94 <bsd_platform_fd_method_table_get>
   20250:	b158      	cbz	r0, 2026a <nrf_recvfrom+0x2e>
   20252:	e9cd 8908 	strd	r8, r9, [sp, #32]
   20256:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   2025a:	463b      	mov	r3, r7
   2025c:	4632      	mov	r2, r6
   2025e:	4629      	mov	r1, r5
   20260:	4620      	mov	r0, r4
   20262:	46f4      	mov	ip, lr
   20264:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20268:	4760      	bx	ip
   2026a:	f04f 30ff 	mov.w	r0, #4294967295
   2026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20272:	bf00      	nop

00020274 <nrf_connect>:
   20274:	b570      	push	{r4, r5, r6, lr}
   20276:	460d      	mov	r5, r1
   20278:	4616      	mov	r6, r2
   2027a:	4604      	mov	r4, r0
   2027c:	f7ff fe8a 	bl	1ff94 <bsd_platform_fd_method_table_get>
   20280:	b130      	cbz	r0, 20290 <nrf_connect+0x1c>
   20282:	6943      	ldr	r3, [r0, #20]
   20284:	4632      	mov	r2, r6
   20286:	4629      	mov	r1, r5
   20288:	4620      	mov	r0, r4
   2028a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2028e:	4718      	bx	r3
   20290:	f04f 30ff 	mov.w	r0, #4294967295
   20294:	bd70      	pop	{r4, r5, r6, pc}
   20296:	bf00      	nop

00020298 <nrf_listen>:
   20298:	b570      	push	{r4, r5, r6, lr}
   2029a:	460d      	mov	r5, r1
   2029c:	4604      	mov	r4, r0
   2029e:	f7ff fe79 	bl	1ff94 <bsd_platform_fd_method_table_get>
   202a2:	b128      	cbz	r0, 202b0 <nrf_listen+0x18>
   202a4:	6983      	ldr	r3, [r0, #24]
   202a6:	4629      	mov	r1, r5
   202a8:	4620      	mov	r0, r4
   202aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   202ae:	4718      	bx	r3
   202b0:	f04f 30ff 	mov.w	r0, #4294967295
   202b4:	bd70      	pop	{r4, r5, r6, pc}
   202b6:	bf00      	nop

000202b8 <nrf_accept>:
   202b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   202bc:	460d      	mov	r5, r1
   202be:	4616      	mov	r6, r2
   202c0:	4604      	mov	r4, r0
   202c2:	f7ff fe67 	bl	1ff94 <bsd_platform_fd_method_table_get>
   202c6:	b140      	cbz	r0, 202da <nrf_accept+0x22>
   202c8:	69c7      	ldr	r7, [r0, #28]
   202ca:	4632      	mov	r2, r6
   202cc:	4629      	mov	r1, r5
   202ce:	4620      	mov	r0, r4
   202d0:	46bc      	mov	ip, r7
   202d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   202d6:	2300      	movs	r3, #0
   202d8:	4760      	bx	ip
   202da:	f04f 30ff 	mov.w	r0, #4294967295
   202de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   202e2:	bf00      	nop

000202e4 <nrf_bind>:
   202e4:	b570      	push	{r4, r5, r6, lr}
   202e6:	460d      	mov	r5, r1
   202e8:	4616      	mov	r6, r2
   202ea:	4604      	mov	r4, r0
   202ec:	f7ff fe52 	bl	1ff94 <bsd_platform_fd_method_table_get>
   202f0:	b130      	cbz	r0, 20300 <nrf_bind+0x1c>
   202f2:	6903      	ldr	r3, [r0, #16]
   202f4:	4632      	mov	r2, r6
   202f6:	4629      	mov	r1, r5
   202f8:	4620      	mov	r0, r4
   202fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   202fe:	4718      	bx	r3
   20300:	f04f 30ff 	mov.w	r0, #4294967295
   20304:	bd70      	pop	{r4, r5, r6, pc}
   20306:	bf00      	nop

00020308 <nrf_setsockopt>:
   20308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2030c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   20310:	460d      	mov	r5, r1
   20312:	4616      	mov	r6, r2
   20314:	461f      	mov	r7, r3
   20316:	4604      	mov	r4, r0
   20318:	f7ff fe3c 	bl	1ff94 <bsd_platform_fd_method_table_get>
   2031c:	b158      	cbz	r0, 20336 <nrf_setsockopt+0x2e>
   2031e:	f8cd 8018 	str.w	r8, [sp, #24]
   20322:	f8d0 e020 	ldr.w	lr, [r0, #32]
   20326:	463b      	mov	r3, r7
   20328:	4632      	mov	r2, r6
   2032a:	4629      	mov	r1, r5
   2032c:	4620      	mov	r0, r4
   2032e:	46f4      	mov	ip, lr
   20330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20334:	4760      	bx	ip
   20336:	f04f 30ff 	mov.w	r0, #4294967295
   2033a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2033e:	bf00      	nop

00020340 <nrf_getsockopt>:
   20340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20344:	f8dd 8018 	ldr.w	r8, [sp, #24]
   20348:	460d      	mov	r5, r1
   2034a:	4616      	mov	r6, r2
   2034c:	461f      	mov	r7, r3
   2034e:	4604      	mov	r4, r0
   20350:	f7ff fe20 	bl	1ff94 <bsd_platform_fd_method_table_get>
   20354:	b158      	cbz	r0, 2036e <nrf_getsockopt+0x2e>
   20356:	f8cd 8018 	str.w	r8, [sp, #24]
   2035a:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   2035e:	463b      	mov	r3, r7
   20360:	4632      	mov	r2, r6
   20362:	4629      	mov	r1, r5
   20364:	4620      	mov	r0, r4
   20366:	46f4      	mov	ip, lr
   20368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2036c:	4760      	bx	ip
   2036e:	f04f 30ff 	mov.w	r0, #4294967295
   20372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20376:	bf00      	nop

00020378 <nrf_getaddrinfo>:
   20378:	f7ff be82 	b.w	20080 <bsd_platform_getaddrinfo>

0002037c <nrf_freeaddrinfo>:
   2037c:	f7ff be82 	b.w	20084 <bsd_platform_freeaddrinfo>

00020380 <nrf_poll>:
   20380:	f7ff be82 	b.w	20088 <bsd_platform_poll>

00020384 <nrf_fcntl>:
   20384:	f7ff beda 	b.w	2013c <bsd_platform_fcntl>

00020388 <rpc_gnss_serialize_utc>:
   20388:	4603      	mov	r3, r0
   2038a:	b1d8      	cbz	r0, 203c4 <rpc_gnss_serialize_utc+0x3c>
   2038c:	b1d1      	cbz	r1, 203c4 <rpc_gnss_serialize_utc+0x3c>
   2038e:	2000      	movs	r0, #0
   20390:	2201      	movs	r2, #1
   20392:	7048      	strb	r0, [r1, #1]
   20394:	700a      	strb	r2, [r1, #0]
   20396:	685a      	ldr	r2, [r3, #4]
   20398:	2010      	movs	r0, #16
   2039a:	f8c1 2006 	str.w	r2, [r1, #6]
   2039e:	681a      	ldr	r2, [r3, #0]
   203a0:	f8c1 2002 	str.w	r2, [r1, #2]
   203a4:	f993 200a 	ldrsb.w	r2, [r3, #10]
   203a8:	730a      	strb	r2, [r1, #12]
   203aa:	f993 200d 	ldrsb.w	r2, [r3, #13]
   203ae:	73ca      	strb	r2, [r1, #15]
   203b0:	f993 200c 	ldrsb.w	r2, [r3, #12]
   203b4:	738a      	strb	r2, [r1, #14]
   203b6:	7a1a      	ldrb	r2, [r3, #8]
   203b8:	728a      	strb	r2, [r1, #10]
   203ba:	7ada      	ldrb	r2, [r3, #11]
   203bc:	734a      	strb	r2, [r1, #13]
   203be:	7a5b      	ldrb	r3, [r3, #9]
   203c0:	72cb      	strb	r3, [r1, #11]
   203c2:	4770      	bx	lr
   203c4:	f04f 30ff 	mov.w	r0, #4294967295
   203c8:	4770      	bx	lr
   203ca:	bf00      	nop

000203cc <rpc_gnss_serialize_ephe>:
   203cc:	4603      	mov	r3, r0
   203ce:	2800      	cmp	r0, #0
   203d0:	d04b      	beq.n	2046a <rpc_gnss_serialize_ephe+0x9e>
   203d2:	2900      	cmp	r1, #0
   203d4:	d049      	beq.n	2046a <rpc_gnss_serialize_ephe+0x9e>
   203d6:	2000      	movs	r0, #0
   203d8:	2202      	movs	r2, #2
   203da:	7048      	strb	r0, [r1, #1]
   203dc:	700a      	strb	r2, [r1, #0]
   203de:	68da      	ldr	r2, [r3, #12]
   203e0:	2040      	movs	r0, #64	; 0x40
   203e2:	f8c1 200b 	str.w	r2, [r1, #11]
   203e6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   203ea:	f8a1 2009 	strh.w	r2, [r1, #9]
   203ee:	f993 2006 	ldrsb.w	r2, [r3, #6]
   203f2:	720a      	strb	r2, [r1, #8]
   203f4:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   203f8:	878a      	strh	r2, [r1, #60]	; 0x3c
   203fa:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   203fe:	86ca      	strh	r2, [r1, #54]	; 0x36
   20400:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   20404:	874a      	strh	r2, [r1, #58]	; 0x3a
   20406:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   2040a:	868a      	strh	r2, [r1, #52]	; 0x34
   2040c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   20410:	87ca      	strh	r2, [r1, #62]	; 0x3e
   20412:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   20416:	870a      	strh	r2, [r1, #56]	; 0x38
   20418:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   2041c:	830a      	strh	r2, [r1, #24]
   2041e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   20420:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   20424:	7c9a      	ldrb	r2, [r3, #18]
   20426:	744a      	strb	r2, [r1, #17]
   20428:	785a      	ldrb	r2, [r3, #1]
   2042a:	70ca      	strb	r2, [r1, #3]
   2042c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2042e:	62ca      	str	r2, [r1, #44]	; 0x2c
   20430:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   20434:	84ca      	strh	r2, [r1, #38]	; 0x26
   20436:	885a      	ldrh	r2, [r3, #2]
   20438:	808a      	strh	r2, [r1, #4]
   2043a:	6a1a      	ldr	r2, [r3, #32]
   2043c:	f8c1 201a 	str.w	r2, [r1, #26]
   20440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   20442:	630a      	str	r2, [r1, #48]	; 0x30
   20444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   20446:	f8c1 201e 	str.w	r2, [r1, #30]
   2044a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2044c:	628a      	str	r2, [r1, #40]	; 0x28
   2044e:	781a      	ldrb	r2, [r3, #0]
   20450:	708a      	strb	r2, [r1, #2]
   20452:	f993 2010 	ldrsb.w	r2, [r3, #16]
   20456:	73ca      	strb	r2, [r1, #15]
   20458:	889a      	ldrh	r2, [r3, #4]
   2045a:	80ca      	strh	r2, [r1, #6]
   2045c:	8a9a      	ldrh	r2, [r3, #20]
   2045e:	824a      	strh	r2, [r1, #18]
   20460:	7c5a      	ldrb	r2, [r3, #17]
   20462:	740a      	strb	r2, [r1, #16]
   20464:	699b      	ldr	r3, [r3, #24]
   20466:	614b      	str	r3, [r1, #20]
   20468:	4770      	bx	lr
   2046a:	f04f 30ff 	mov.w	r0, #4294967295
   2046e:	4770      	bx	lr

00020470 <rpc_gnss_serialize_alm>:
   20470:	4603      	mov	r3, r0
   20472:	b360      	cbz	r0, 204ce <rpc_gnss_serialize_alm+0x5e>
   20474:	b359      	cbz	r1, 204ce <rpc_gnss_serialize_alm+0x5e>
   20476:	2000      	movs	r0, #0
   20478:	2203      	movs	r2, #3
   2047a:	7048      	strb	r0, [r1, #1]
   2047c:	700a      	strb	r2, [r1, #0]
   2047e:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   20482:	2021      	movs	r0, #33	; 0x21
   20484:	f8a1 201d 	strh.w	r2, [r1, #29]
   20488:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   2048c:	f8a1 201f 	strh.w	r2, [r1, #31]
   20490:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   20494:	810a      	strh	r2, [r1, #8]
   20496:	889a      	ldrh	r2, [r3, #4]
   20498:	80ca      	strh	r2, [r1, #6]
   2049a:	78da      	ldrb	r2, [r3, #3]
   2049c:	714a      	strb	r2, [r1, #5]
   2049e:	699a      	ldr	r2, [r3, #24]
   204a0:	f8c1 2019 	str.w	r2, [r1, #25]
   204a4:	691a      	ldr	r2, [r3, #16]
   204a6:	f8c1 2011 	str.w	r2, [r1, #17]
   204aa:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   204ae:	814a      	strh	r2, [r1, #10]
   204b0:	68da      	ldr	r2, [r3, #12]
   204b2:	f8c1 200d 	str.w	r2, [r1, #13]
   204b6:	7a9a      	ldrb	r2, [r3, #10]
   204b8:	730a      	strb	r2, [r1, #12]
   204ba:	781a      	ldrb	r2, [r3, #0]
   204bc:	708a      	strb	r2, [r1, #2]
   204be:	789a      	ldrb	r2, [r3, #2]
   204c0:	710a      	strb	r2, [r1, #4]
   204c2:	695a      	ldr	r2, [r3, #20]
   204c4:	f8c1 2015 	str.w	r2, [r1, #21]
   204c8:	785b      	ldrb	r3, [r3, #1]
   204ca:	70cb      	strb	r3, [r1, #3]
   204cc:	4770      	bx	lr
   204ce:	f04f 30ff 	mov.w	r0, #4294967295
   204d2:	4770      	bx	lr

000204d4 <rpc_gnss_serialize_klob>:
   204d4:	4603      	mov	r3, r0
   204d6:	b1f0      	cbz	r0, 20516 <rpc_gnss_serialize_klob+0x42>
   204d8:	b1e9      	cbz	r1, 20516 <rpc_gnss_serialize_klob+0x42>
   204da:	2000      	movs	r0, #0
   204dc:	2204      	movs	r2, #4
   204de:	7048      	strb	r0, [r1, #1]
   204e0:	700a      	strb	r2, [r1, #0]
   204e2:	f993 2000 	ldrsb.w	r2, [r3]
   204e6:	200a      	movs	r0, #10
   204e8:	708a      	strb	r2, [r1, #2]
   204ea:	f993 2001 	ldrsb.w	r2, [r3, #1]
   204ee:	70ca      	strb	r2, [r1, #3]
   204f0:	f993 2002 	ldrsb.w	r2, [r3, #2]
   204f4:	710a      	strb	r2, [r1, #4]
   204f6:	f993 2003 	ldrsb.w	r2, [r3, #3]
   204fa:	714a      	strb	r2, [r1, #5]
   204fc:	f993 2004 	ldrsb.w	r2, [r3, #4]
   20500:	718a      	strb	r2, [r1, #6]
   20502:	f993 2005 	ldrsb.w	r2, [r3, #5]
   20506:	71ca      	strb	r2, [r1, #7]
   20508:	f993 2006 	ldrsb.w	r2, [r3, #6]
   2050c:	720a      	strb	r2, [r1, #8]
   2050e:	f993 3007 	ldrsb.w	r3, [r3, #7]
   20512:	724b      	strb	r3, [r1, #9]
   20514:	4770      	bx	lr
   20516:	f04f 30ff 	mov.w	r0, #4294967295
   2051a:	4770      	bx	lr

0002051c <rpc_gnss_serialize_nequick>:
   2051c:	4603      	mov	r3, r0
   2051e:	b198      	cbz	r0, 20548 <rpc_gnss_serialize_nequick+0x2c>
   20520:	b191      	cbz	r1, 20548 <rpc_gnss_serialize_nequick+0x2c>
   20522:	2000      	movs	r0, #0
   20524:	2205      	movs	r2, #5
   20526:	7048      	strb	r0, [r1, #1]
   20528:	700a      	strb	r2, [r1, #0]
   2052a:	f9b3 2000 	ldrsh.w	r2, [r3]
   2052e:	200a      	movs	r0, #10
   20530:	804a      	strh	r2, [r1, #2]
   20532:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   20536:	808a      	strh	r2, [r1, #4]
   20538:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   2053c:	80ca      	strh	r2, [r1, #6]
   2053e:	799a      	ldrb	r2, [r3, #6]
   20540:	720a      	strb	r2, [r1, #8]
   20542:	79db      	ldrb	r3, [r3, #7]
   20544:	724b      	strb	r3, [r1, #9]
   20546:	4770      	bx	lr
   20548:	f04f 30ff 	mov.w	r0, #4294967295
   2054c:	4770      	bx	lr
   2054e:	bf00      	nop

00020550 <rpc_gnss_serialize_time_and_sv_tow>:
   20550:	b310      	cbz	r0, 20598 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   20552:	b309      	cbz	r1, 20598 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   20554:	b470      	push	{r4, r5, r6}
   20556:	2500      	movs	r5, #0
   20558:	2606      	movs	r6, #6
   2055a:	460c      	mov	r4, r1
   2055c:	704d      	strb	r5, [r1, #1]
   2055e:	700e      	strb	r6, [r1, #0]
   20560:	462b      	mov	r3, r5
   20562:	8805      	ldrh	r5, [r0, #0]
   20564:	4602      	mov	r2, r0
   20566:	804d      	strh	r5, [r1, #2]
   20568:	68c5      	ldr	r5, [r0, #12]
   2056a:	f8c1 500a 	str.w	r5, [r1, #10]
   2056e:	8905      	ldrh	r5, [r0, #8]
   20570:	810d      	strh	r5, [r1, #8]
   20572:	6840      	ldr	r0, [r0, #4]
   20574:	6048      	str	r0, [r1, #4]
   20576:	8a15      	ldrh	r5, [r2, #16]
   20578:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   2057c:	4408      	add	r0, r1
   2057e:	81c5      	strh	r5, [r0, #14]
   20580:	7c90      	ldrb	r0, [r2, #18]
   20582:	3301      	adds	r3, #1
   20584:	2b20      	cmp	r3, #32
   20586:	7420      	strb	r0, [r4, #16]
   20588:	f102 0204 	add.w	r2, r2, #4
   2058c:	f104 0403 	add.w	r4, r4, #3
   20590:	d1f1      	bne.n	20576 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   20592:	206e      	movs	r0, #110	; 0x6e
   20594:	bc70      	pop	{r4, r5, r6}
   20596:	4770      	bx	lr
   20598:	f04f 30ff 	mov.w	r0, #4294967295
   2059c:	4770      	bx	lr
   2059e:	bf00      	nop

000205a0 <rpc_gnss_serialize_location>:
   205a0:	4603      	mov	r3, r0
   205a2:	b1c8      	cbz	r0, 205d8 <rpc_gnss_serialize_location+0x38>
   205a4:	b1c1      	cbz	r1, 205d8 <rpc_gnss_serialize_location+0x38>
   205a6:	2000      	movs	r0, #0
   205a8:	2207      	movs	r2, #7
   205aa:	7048      	strb	r0, [r1, #1]
   205ac:	700a      	strb	r2, [r1, #0]
   205ae:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   205b2:	2011      	movs	r0, #17
   205b4:	814a      	strh	r2, [r1, #10]
   205b6:	7b9a      	ldrb	r2, [r3, #14]
   205b8:	740a      	strb	r2, [r1, #16]
   205ba:	681a      	ldr	r2, [r3, #0]
   205bc:	f8c1 2002 	str.w	r2, [r1, #2]
   205c0:	685a      	ldr	r2, [r3, #4]
   205c2:	f8c1 2006 	str.w	r2, [r1, #6]
   205c6:	7b1a      	ldrb	r2, [r3, #12]
   205c8:	738a      	strb	r2, [r1, #14]
   205ca:	7b5a      	ldrb	r2, [r3, #13]
   205cc:	73ca      	strb	r2, [r1, #15]
   205ce:	7a9a      	ldrb	r2, [r3, #10]
   205d0:	730a      	strb	r2, [r1, #12]
   205d2:	7adb      	ldrb	r3, [r3, #11]
   205d4:	734b      	strb	r3, [r1, #13]
   205d6:	4770      	bx	lr
   205d8:	f04f 30ff 	mov.w	r0, #4294967295
   205dc:	4770      	bx	lr
   205de:	bf00      	nop

000205e0 <rpc_gnss_serialize_integrity>:
   205e0:	b148      	cbz	r0, 205f6 <rpc_gnss_serialize_integrity+0x16>
   205e2:	b141      	cbz	r1, 205f6 <rpc_gnss_serialize_integrity+0x16>
   205e4:	2200      	movs	r2, #0
   205e6:	2308      	movs	r3, #8
   205e8:	704a      	strb	r2, [r1, #1]
   205ea:	700b      	strb	r3, [r1, #0]
   205ec:	6803      	ldr	r3, [r0, #0]
   205ee:	2006      	movs	r0, #6
   205f0:	f8c1 3002 	str.w	r3, [r1, #2]
   205f4:	4770      	bx	lr
   205f6:	f04f 30ff 	mov.w	r0, #4294967295
   205fa:	4770      	bx	lr

000205fc <gnss_client_event_handler>:
   205fc:	f850 1b08 	ldr.w	r1, [r0], #8
   20600:	0c09      	lsrs	r1, r1, #16
   20602:	f7fd b8ed 	b.w	1d7e0 <rpc_gnss_event_handler>
   20606:	bf00      	nop

00020608 <rpc_gnss_client_init>:
   20608:	4801      	ldr	r0, [pc, #4]	; (20610 <rpc_gnss_client_init+0x8>)
   2060a:	f7fd b81d 	b.w	1d648 <rpc_client_register>
   2060e:	bf00      	nop
   20610:	0002f88c 	.word	0x0002f88c

00020614 <rpc_gnss_client_request_alloc>:
   20614:	2300      	movs	r3, #0
   20616:	b510      	push	{r4, lr}
   20618:	b082      	sub	sp, #8
   2061a:	9301      	str	r3, [sp, #4]
   2061c:	b158      	cbz	r0, 20636 <rpc_gnss_client_request_alloc+0x22>
   2061e:	4604      	mov	r4, r0
   20620:	aa01      	add	r2, sp, #4
   20622:	2007      	movs	r0, #7
   20624:	f7fd f88a 	bl	1d73c <rpc_message_alloc>
   20628:	b918      	cbnz	r0, 20632 <rpc_gnss_client_request_alloc+0x1e>
   2062a:	9b01      	ldr	r3, [sp, #4]
   2062c:	b10b      	cbz	r3, 20632 <rpc_gnss_client_request_alloc+0x1e>
   2062e:	3308      	adds	r3, #8
   20630:	6023      	str	r3, [r4, #0]
   20632:	b002      	add	sp, #8
   20634:	bd10      	pop	{r4, pc}
   20636:	2007      	movs	r0, #7
   20638:	b002      	add	sp, #8
   2063a:	bd10      	pop	{r4, pc}

0002063c <rpc_gnss_client_request_send>:
   2063c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   20640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   20644:	d10b      	bne.n	2065e <rpc_gnss_client_request_send+0x22>
   20646:	b160      	cbz	r0, 20662 <rpc_gnss_client_request_send+0x26>
   20648:	4603      	mov	r3, r0
   2064a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2064e:	2007      	movs	r0, #7
   20650:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   20654:	f843 1d08 	str.w	r1, [r3, #-8]!
   20658:	4619      	mov	r1, r3
   2065a:	f7fd b85f 	b.w	1d71c <rpc_message_send>
   2065e:	200f      	movs	r0, #15
   20660:	4770      	bx	lr
   20662:	2007      	movs	r0, #7
   20664:	4770      	bx	lr
   20666:	bf00      	nop

00020668 <rpc_gnss_client_message_free>:
   20668:	b120      	cbz	r0, 20674 <rpc_gnss_client_message_free+0xc>
   2066a:	f1a0 0108 	sub.w	r1, r0, #8
   2066e:	2007      	movs	r0, #7
   20670:	f7fd b890 	b.w	1d794 <rpc_message_free>
   20674:	2007      	movs	r0, #7
   20676:	4770      	bx	lr

00020678 <rpc_gnss_client_data_free>:
   20678:	b118      	cbz	r0, 20682 <rpc_gnss_client_data_free+0xa>
   2067a:	4601      	mov	r1, r0
   2067c:	2007      	movs	r0, #7
   2067e:	f7fd b895 	b.w	1d7ac <rpc_message_data_free>
   20682:	2007      	movs	r0, #7
   20684:	4770      	bx	lr
   20686:	bf00      	nop

00020688 <datagram_handler_init>:
   20688:	b510      	push	{r4, lr}
   2068a:	4604      	mov	r4, r0
   2068c:	200c      	movs	r0, #12
   2068e:	f000 fdd7 	bl	21240 <nrf_malloc>
   20692:	60e0      	str	r0, [r4, #12]
   20694:	b118      	cbz	r0, 2069e <datagram_handler_init+0x16>
   20696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2069a:	f7ff bd5f 	b.w	2015c <linked_list_init>
   2069e:	2004      	movs	r0, #4
   206a0:	bd10      	pop	{r4, pc}
   206a2:	bf00      	nop

000206a4 <datagram_handler_put>:
   206a4:	b570      	push	{r4, r5, r6, lr}
   206a6:	4606      	mov	r6, r0
   206a8:	2014      	movs	r0, #20
   206aa:	460d      	mov	r5, r1
   206ac:	f000 fdc8 	bl	21240 <nrf_malloc>
   206b0:	b178      	cbz	r0, 206d2 <datagram_handler_put+0x2e>
   206b2:	682b      	ldr	r3, [r5, #0]
   206b4:	4604      	mov	r4, r0
   206b6:	6043      	str	r3, [r0, #4]
   206b8:	686b      	ldr	r3, [r5, #4]
   206ba:	4601      	mov	r1, r0
   206bc:	6083      	str	r3, [r0, #8]
   206be:	68eb      	ldr	r3, [r5, #12]
   206c0:	60c3      	str	r3, [r0, #12]
   206c2:	68ab      	ldr	r3, [r5, #8]
   206c4:	6103      	str	r3, [r0, #16]
   206c6:	68f0      	ldr	r0, [r6, #12]
   206c8:	f7ff fd52 	bl	20170 <linked_list_push>
   206cc:	b920      	cbnz	r0, 206d8 <datagram_handler_put+0x34>
   206ce:	6868      	ldr	r0, [r5, #4]
   206d0:	bd70      	pop	{r4, r5, r6, pc}
   206d2:	f04f 30ff 	mov.w	r0, #4294967295
   206d6:	bd70      	pop	{r4, r5, r6, pc}
   206d8:	4620      	mov	r0, r4
   206da:	f000 fdbb 	bl	21254 <nrf_free>
   206de:	f04f 30ff 	mov.w	r0, #4294967295
   206e2:	bd70      	pop	{r4, r5, r6, pc}

000206e4 <datagram_handler_get>:
   206e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   206e8:	4607      	mov	r7, r0
   206ea:	b084      	sub	sp, #16
   206ec:	68c0      	ldr	r0, [r0, #12]
   206ee:	460c      	mov	r4, r1
   206f0:	4616      	mov	r6, r2
   206f2:	f7ff fd5d 	bl	201b0 <linked_list_peek>
   206f6:	2800      	cmp	r0, #0
   206f8:	d03b      	beq.n	20772 <datagram_handler_get+0x8e>
   206fa:	6882      	ldr	r2, [r0, #8]
   206fc:	4605      	mov	r5, r0
   206fe:	e9d4 0300 	ldrd	r0, r3, [r4]
   20702:	429a      	cmp	r2, r3
   20704:	bf28      	it	cs
   20706:	461a      	movcs	r2, r3
   20708:	6062      	str	r2, [r4, #4]
   2070a:	b110      	cbz	r0, 20712 <datagram_handler_get+0x2e>
   2070c:	6869      	ldr	r1, [r5, #4]
   2070e:	f7ec fa1d 	bl	cb4c <memcpy>
   20712:	68a0      	ldr	r0, [r4, #8]
   20714:	b118      	cbz	r0, 2071e <datagram_handler_get+0x3a>
   20716:	692b      	ldr	r3, [r5, #16]
   20718:	b10b      	cbz	r3, 2071e <datagram_handler_get+0x3a>
   2071a:	68ea      	ldr	r2, [r5, #12]
   2071c:	bb02      	cbnz	r2, 20760 <datagram_handler_get+0x7c>
   2071e:	2300      	movs	r3, #0
   20720:	60e3      	str	r3, [r4, #12]
   20722:	0732      	lsls	r2, r6, #28
   20724:	d506      	bpl.n	20734 <datagram_handler_get+0x50>
   20726:	06b3      	lsls	r3, r6, #26
   20728:	bf4c      	ite	mi
   2072a:	68a8      	ldrmi	r0, [r5, #8]
   2072c:	6860      	ldrpl	r0, [r4, #4]
   2072e:	b004      	add	sp, #16
   20730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20734:	68f8      	ldr	r0, [r7, #12]
   20736:	f7ff fd31 	bl	2019c <linked_list_pop>
   2073a:	4680      	mov	r8, r0
   2073c:	2800      	cmp	r0, #0
   2073e:	d0f2      	beq.n	20726 <datagram_handler_get+0x42>
   20740:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   20744:	6902      	ldr	r2, [r0, #16]
   20746:	9300      	str	r3, [sp, #0]
   20748:	68c3      	ldr	r3, [r0, #12]
   2074a:	e9cd 1201 	strd	r1, r2, [sp, #4]
   2074e:	9303      	str	r3, [sp, #12]
   20750:	4668      	mov	r0, sp
   20752:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
   20756:	4798      	blx	r3
   20758:	4640      	mov	r0, r8
   2075a:	f000 fd7b 	bl	21254 <nrf_free>
   2075e:	e7e2      	b.n	20726 <datagram_handler_get+0x42>
   20760:	68e3      	ldr	r3, [r4, #12]
   20762:	429a      	cmp	r2, r3
   20764:	bf28      	it	cs
   20766:	461a      	movcs	r2, r3
   20768:	60e2      	str	r2, [r4, #12]
   2076a:	6929      	ldr	r1, [r5, #16]
   2076c:	f7ec f9ee 	bl	cb4c <memcpy>
   20770:	e7d7      	b.n	20722 <datagram_handler_get+0x3e>
   20772:	f04f 30ff 	mov.w	r0, #4294967295
   20776:	e7da      	b.n	2072e <datagram_handler_get+0x4a>

00020778 <datagram_handler_available>:
   20778:	b508      	push	{r3, lr}
   2077a:	68c0      	ldr	r0, [r0, #12]
   2077c:	f7ff fd18 	bl	201b0 <linked_list_peek>
   20780:	b108      	cbz	r0, 20786 <datagram_handler_available+0xe>
   20782:	6880      	ldr	r0, [r0, #8]
   20784:	bd08      	pop	{r3, pc}
   20786:	f04f 30ff 	mov.w	r0, #4294967295
   2078a:	bd08      	pop	{r3, pc}

0002078c <datagram_handler_flush>:
   2078c:	b530      	push	{r4, r5, lr}
   2078e:	4605      	mov	r5, r0
   20790:	68c0      	ldr	r0, [r0, #12]
   20792:	b085      	sub	sp, #20
   20794:	b9a8      	cbnz	r0, 207c2 <datagram_handler_flush+0x36>
   20796:	e01a      	b.n	207ce <datagram_handler_flush+0x42>
   20798:	68e8      	ldr	r0, [r5, #12]
   2079a:	f7ff fcff 	bl	2019c <linked_list_pop>
   2079e:	4604      	mov	r4, r0
   207a0:	b170      	cbz	r0, 207c0 <datagram_handler_flush+0x34>
   207a2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   207a6:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   207aa:	e9cd 0100 	strd	r0, r1, [sp]
   207ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
   207b2:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   207b6:	4668      	mov	r0, sp
   207b8:	4798      	blx	r3
   207ba:	4620      	mov	r0, r4
   207bc:	f000 fd4a 	bl	21254 <nrf_free>
   207c0:	68e8      	ldr	r0, [r5, #12]
   207c2:	f7ff fcfb 	bl	201bc <linked_list_size_get>
   207c6:	2800      	cmp	r0, #0
   207c8:	d1e6      	bne.n	20798 <datagram_handler_flush+0xc>
   207ca:	b005      	add	sp, #20
   207cc:	bd30      	pop	{r4, r5, pc}
   207ce:	2008      	movs	r0, #8
   207d0:	b005      	add	sp, #20
   207d2:	bd30      	pop	{r4, r5, pc}

000207d4 <datagram_handler_free>:
   207d4:	b530      	push	{r4, r5, lr}
   207d6:	4605      	mov	r5, r0
   207d8:	68c0      	ldr	r0, [r0, #12]
   207da:	b085      	sub	sp, #20
   207dc:	b9a0      	cbnz	r0, 20808 <datagram_handler_free+0x34>
   207de:	e01c      	b.n	2081a <datagram_handler_free+0x46>
   207e0:	f7ff fcdc 	bl	2019c <linked_list_pop>
   207e4:	4604      	mov	r4, r0
   207e6:	b170      	cbz	r0, 20806 <datagram_handler_free+0x32>
   207e8:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   207ec:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   207f0:	e9cd 0100 	strd	r0, r1, [sp]
   207f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   207f8:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   207fc:	4668      	mov	r0, sp
   207fe:	4798      	blx	r3
   20800:	4620      	mov	r0, r4
   20802:	f000 fd27 	bl	21254 <nrf_free>
   20806:	68e8      	ldr	r0, [r5, #12]
   20808:	f7ff fcd8 	bl	201bc <linked_list_size_get>
   2080c:	4604      	mov	r4, r0
   2080e:	68e8      	ldr	r0, [r5, #12]
   20810:	2c00      	cmp	r4, #0
   20812:	d1e5      	bne.n	207e0 <datagram_handler_free+0xc>
   20814:	f000 fd1e 	bl	21254 <nrf_free>
   20818:	60ec      	str	r4, [r5, #12]
   2081a:	b005      	add	sp, #20
   2081c:	bd30      	pop	{r4, r5, pc}
   2081e:	bf00      	nop

00020820 <null_handler_init>:
   20820:	2000      	movs	r0, #0
   20822:	4770      	bx	lr

00020824 <null_handler_put>:
   20824:	b510      	push	{r4, lr}
   20826:	460c      	mov	r4, r1
   20828:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   2082c:	4620      	mov	r0, r4
   2082e:	4798      	blx	r3
   20830:	6860      	ldr	r0, [r4, #4]
   20832:	bd10      	pop	{r4, pc}

00020834 <null_handler_get>:
   20834:	f04f 30ff 	mov.w	r0, #4294967295
   20838:	4770      	bx	lr
   2083a:	bf00      	nop

0002083c <null_handler_available>:
   2083c:	f04f 30ff 	mov.w	r0, #4294967295
   20840:	4770      	bx	lr
   20842:	bf00      	nop

00020844 <null_handler_flush>:
   20844:	2000      	movs	r0, #0
   20846:	4770      	bx	lr

00020848 <null_handler_free>:
   20848:	4770      	bx	lr
   2084a:	bf00      	nop

0002084c <packet_handler_create>:
   2084c:	2801      	cmp	r0, #1
   2084e:	b538      	push	{r3, r4, r5, lr}
   20850:	460d      	mov	r5, r1
   20852:	4614      	mov	r4, r2
   20854:	d00d      	beq.n	20872 <packet_handler_create+0x26>
   20856:	db11      	blt.n	2087c <packet_handler_create+0x30>
   20858:	2803      	cmp	r0, #3
   2085a:	dc0f      	bgt.n	2087c <packet_handler_create+0x30>
   2085c:	2010      	movs	r0, #16
   2085e:	f000 fcef 	bl	21240 <nrf_malloc>
   20862:	2218      	movs	r2, #24
   20864:	b120      	cbz	r0, 20870 <packet_handler_create+0x24>
   20866:	4b08      	ldr	r3, [pc, #32]	; (20888 <packet_handler_create+0x3c>)
   20868:	6045      	str	r5, [r0, #4]
   2086a:	4413      	add	r3, r2
   2086c:	6084      	str	r4, [r0, #8]
   2086e:	6003      	str	r3, [r0, #0]
   20870:	bd38      	pop	{r3, r4, r5, pc}
   20872:	2014      	movs	r0, #20
   20874:	f000 fce4 	bl	21240 <nrf_malloc>
   20878:	2230      	movs	r2, #48	; 0x30
   2087a:	e7f3      	b.n	20864 <packet_handler_create+0x18>
   2087c:	200c      	movs	r0, #12
   2087e:	f000 fcdf 	bl	21240 <nrf_malloc>
   20882:	2200      	movs	r2, #0
   20884:	e7ee      	b.n	20864 <packet_handler_create+0x18>
   20886:	bf00      	nop
   20888:	0002f89c 	.word	0x0002f89c

0002088c <packet_handler_delete>:
   2088c:	b510      	push	{r4, lr}
   2088e:	4604      	mov	r4, r0
   20890:	6803      	ldr	r3, [r0, #0]
   20892:	691b      	ldr	r3, [r3, #16]
   20894:	4798      	blx	r3
   20896:	6823      	ldr	r3, [r4, #0]
   20898:	4620      	mov	r0, r4
   2089a:	695b      	ldr	r3, [r3, #20]
   2089c:	4798      	blx	r3
   2089e:	4620      	mov	r0, r4
   208a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   208a4:	f000 bcd6 	b.w	21254 <nrf_free>

000208a8 <stream_handler_init>:
   208a8:	b510      	push	{r4, lr}
   208aa:	4604      	mov	r4, r0
   208ac:	200c      	movs	r0, #12
   208ae:	f000 fcc7 	bl	21240 <nrf_malloc>
   208b2:	60e0      	str	r0, [r4, #12]
   208b4:	b128      	cbz	r0, 208c2 <stream_handler_init+0x1a>
   208b6:	2300      	movs	r3, #0
   208b8:	6123      	str	r3, [r4, #16]
   208ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   208be:	f7ff bc4d 	b.w	2015c <linked_list_init>
   208c2:	2004      	movs	r0, #4
   208c4:	bd10      	pop	{r4, pc}
   208c6:	bf00      	nop

000208c8 <stream_handler_put>:
   208c8:	b570      	push	{r4, r5, r6, lr}
   208ca:	4606      	mov	r6, r0
   208cc:	2014      	movs	r0, #20
   208ce:	460d      	mov	r5, r1
   208d0:	f000 fcb6 	bl	21240 <nrf_malloc>
   208d4:	b178      	cbz	r0, 208f6 <stream_handler_put+0x2e>
   208d6:	682b      	ldr	r3, [r5, #0]
   208d8:	4604      	mov	r4, r0
   208da:	6043      	str	r3, [r0, #4]
   208dc:	686b      	ldr	r3, [r5, #4]
   208de:	4601      	mov	r1, r0
   208e0:	6083      	str	r3, [r0, #8]
   208e2:	68eb      	ldr	r3, [r5, #12]
   208e4:	60c3      	str	r3, [r0, #12]
   208e6:	68ab      	ldr	r3, [r5, #8]
   208e8:	6103      	str	r3, [r0, #16]
   208ea:	68f0      	ldr	r0, [r6, #12]
   208ec:	f7ff fc40 	bl	20170 <linked_list_push>
   208f0:	b920      	cbnz	r0, 208fc <stream_handler_put+0x34>
   208f2:	6868      	ldr	r0, [r5, #4]
   208f4:	bd70      	pop	{r4, r5, r6, pc}
   208f6:	f04f 30ff 	mov.w	r0, #4294967295
   208fa:	bd70      	pop	{r4, r5, r6, pc}
   208fc:	4620      	mov	r0, r4
   208fe:	f000 fca9 	bl	21254 <nrf_free>
   20902:	f04f 30ff 	mov.w	r0, #4294967295
   20906:	bd70      	pop	{r4, r5, r6, pc}

00020908 <stream_handler_get>:
   20908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2090c:	4682      	mov	sl, r0
   2090e:	b089      	sub	sp, #36	; 0x24
   20910:	68c0      	ldr	r0, [r0, #12]
   20912:	4689      	mov	r9, r1
   20914:	4693      	mov	fp, r2
   20916:	f7ff fc4b 	bl	201b0 <linked_list_peek>
   2091a:	2800      	cmp	r0, #0
   2091c:	d071      	beq.n	20a02 <stream_handler_get+0xfa>
   2091e:	4605      	mov	r5, r0
   20920:	f8d9 0008 	ldr.w	r0, [r9, #8]
   20924:	b120      	cbz	r0, 20930 <stream_handler_get+0x28>
   20926:	692b      	ldr	r3, [r5, #16]
   20928:	b113      	cbz	r3, 20930 <stream_handler_get+0x28>
   2092a:	68ea      	ldr	r2, [r5, #12]
   2092c:	2a00      	cmp	r2, #0
   2092e:	d15d      	bne.n	209ec <stream_handler_get+0xe4>
   20930:	2300      	movs	r3, #0
   20932:	f8c9 300c 	str.w	r3, [r9, #12]
   20936:	f8d9 2000 	ldr.w	r2, [r9]
   2093a:	f8d9 8004 	ldr.w	r8, [r9, #4]
   2093e:	f8da 1010 	ldr.w	r1, [sl, #16]
   20942:	9203      	str	r2, [sp, #12]
   20944:	f1b8 0f00 	cmp.w	r8, #0
   20948:	d030      	beq.n	209ac <stream_handler_get+0xa4>
   2094a:	2400      	movs	r4, #0
   2094c:	f00b 0320 	and.w	r3, fp, #32
   20950:	9301      	str	r3, [sp, #4]
   20952:	f00b 0b08 	and.w	fp, fp, #8
   20956:	68ae      	ldr	r6, [r5, #8]
   20958:	eba8 0304 	sub.w	r3, r8, r4
   2095c:	1a76      	subs	r6, r6, r1
   2095e:	429e      	cmp	r6, r3
   20960:	4637      	mov	r7, r6
   20962:	bf28      	it	cs
   20964:	461f      	movcs	r7, r3
   20966:	b10a      	cbz	r2, 2096c <stream_handler_get+0x64>
   20968:	9a01      	ldr	r2, [sp, #4]
   2096a:	b1aa      	cbz	r2, 20998 <stream_handler_get+0x90>
   2096c:	f1bb 0f00 	cmp.w	fp, #0
   20970:	d106      	bne.n	20980 <stream_handler_get+0x78>
   20972:	429e      	cmp	r6, r3
   20974:	d921      	bls.n	209ba <stream_handler_get+0xb2>
   20976:	f8da 3010 	ldr.w	r3, [sl, #16]
   2097a:	443b      	add	r3, r7
   2097c:	f8ca 3010 	str.w	r3, [sl, #16]
   20980:	4628      	mov	r0, r5
   20982:	f7ff fc1d 	bl	201c0 <linked_list_get_next>
   20986:	443c      	add	r4, r7
   20988:	4605      	mov	r5, r0
   2098a:	b180      	cbz	r0, 209ae <stream_handler_get+0xa6>
   2098c:	45a0      	cmp	r8, r4
   2098e:	d90e      	bls.n	209ae <stream_handler_get+0xa6>
   20990:	f8d9 2000 	ldr.w	r2, [r9]
   20994:	2100      	movs	r1, #0
   20996:	e7de      	b.n	20956 <stream_handler_get+0x4e>
   20998:	6868      	ldr	r0, [r5, #4]
   2099a:	9302      	str	r3, [sp, #8]
   2099c:	9b03      	ldr	r3, [sp, #12]
   2099e:	4401      	add	r1, r0
   209a0:	463a      	mov	r2, r7
   209a2:	1918      	adds	r0, r3, r4
   209a4:	f7ec f8d2 	bl	cb4c <memcpy>
   209a8:	9b02      	ldr	r3, [sp, #8]
   209aa:	e7df      	b.n	2096c <stream_handler_get+0x64>
   209ac:	4644      	mov	r4, r8
   209ae:	4620      	mov	r0, r4
   209b0:	f8c9 4004 	str.w	r4, [r9, #4]
   209b4:	b009      	add	sp, #36	; 0x24
   209b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209ba:	f8da 000c 	ldr.w	r0, [sl, #12]
   209be:	f7ff fbed 	bl	2019c <linked_list_pop>
   209c2:	4606      	mov	r6, r0
   209c4:	b170      	cbz	r0, 209e4 <stream_handler_get+0xdc>
   209c6:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   209ca:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   209ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
   209d2:	e9cd 1006 	strd	r1, r0, [sp, #24]
   209d6:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   209da:	a804      	add	r0, sp, #16
   209dc:	4798      	blx	r3
   209de:	4630      	mov	r0, r6
   209e0:	f000 fc38 	bl	21254 <nrf_free>
   209e4:	2300      	movs	r3, #0
   209e6:	f8ca 3010 	str.w	r3, [sl, #16]
   209ea:	e7c9      	b.n	20980 <stream_handler_get+0x78>
   209ec:	f8d9 300c 	ldr.w	r3, [r9, #12]
   209f0:	429a      	cmp	r2, r3
   209f2:	bf28      	it	cs
   209f4:	461a      	movcs	r2, r3
   209f6:	f8c9 200c 	str.w	r2, [r9, #12]
   209fa:	6929      	ldr	r1, [r5, #16]
   209fc:	f7ec f8a6 	bl	cb4c <memcpy>
   20a00:	e799      	b.n	20936 <stream_handler_get+0x2e>
   20a02:	f04f 30ff 	mov.w	r0, #4294967295
   20a06:	e7d5      	b.n	209b4 <stream_handler_get+0xac>

00020a08 <stream_handler_available>:
   20a08:	b510      	push	{r4, lr}
   20a0a:	4604      	mov	r4, r0
   20a0c:	68c0      	ldr	r0, [r0, #12]
   20a0e:	f7ff fbcf 	bl	201b0 <linked_list_peek>
   20a12:	b150      	cbz	r0, 20a2a <stream_handler_available+0x22>
   20a14:	6924      	ldr	r4, [r4, #16]
   20a16:	4264      	negs	r4, r4
   20a18:	6883      	ldr	r3, [r0, #8]
   20a1a:	441c      	add	r4, r3
   20a1c:	f7ff fbd0 	bl	201c0 <linked_list_get_next>
   20a20:	2800      	cmp	r0, #0
   20a22:	d1f9      	bne.n	20a18 <stream_handler_available+0x10>
   20a24:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   20a28:	bd10      	pop	{r4, pc}
   20a2a:	f04f 30ff 	mov.w	r0, #4294967295
   20a2e:	bd10      	pop	{r4, pc}

00020a30 <stream_handler_flush>:
   20a30:	b530      	push	{r4, r5, lr}
   20a32:	4605      	mov	r5, r0
   20a34:	68c0      	ldr	r0, [r0, #12]
   20a36:	b085      	sub	sp, #20
   20a38:	b9a8      	cbnz	r0, 20a66 <stream_handler_flush+0x36>
   20a3a:	e01a      	b.n	20a72 <stream_handler_flush+0x42>
   20a3c:	68e8      	ldr	r0, [r5, #12]
   20a3e:	f7ff fbad 	bl	2019c <linked_list_pop>
   20a42:	4604      	mov	r4, r0
   20a44:	b170      	cbz	r0, 20a64 <stream_handler_flush+0x34>
   20a46:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   20a4a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   20a4e:	e9cd 0100 	strd	r0, r1, [sp]
   20a52:	e9cd 2302 	strd	r2, r3, [sp, #8]
   20a56:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   20a5a:	4668      	mov	r0, sp
   20a5c:	4798      	blx	r3
   20a5e:	4620      	mov	r0, r4
   20a60:	f000 fbf8 	bl	21254 <nrf_free>
   20a64:	68e8      	ldr	r0, [r5, #12]
   20a66:	f7ff fba9 	bl	201bc <linked_list_size_get>
   20a6a:	2800      	cmp	r0, #0
   20a6c:	d1e6      	bne.n	20a3c <stream_handler_flush+0xc>
   20a6e:	b005      	add	sp, #20
   20a70:	bd30      	pop	{r4, r5, pc}
   20a72:	2008      	movs	r0, #8
   20a74:	b005      	add	sp, #20
   20a76:	bd30      	pop	{r4, r5, pc}

00020a78 <stream_handler_free>:
   20a78:	b530      	push	{r4, r5, lr}
   20a7a:	4605      	mov	r5, r0
   20a7c:	68c0      	ldr	r0, [r0, #12]
   20a7e:	b085      	sub	sp, #20
   20a80:	b9a0      	cbnz	r0, 20aac <stream_handler_free+0x34>
   20a82:	e01c      	b.n	20abe <stream_handler_free+0x46>
   20a84:	f7ff fb8a 	bl	2019c <linked_list_pop>
   20a88:	4604      	mov	r4, r0
   20a8a:	b170      	cbz	r0, 20aaa <stream_handler_free+0x32>
   20a8c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   20a90:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   20a94:	e9cd 0100 	strd	r0, r1, [sp]
   20a98:	e9cd 2302 	strd	r2, r3, [sp, #8]
   20a9c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   20aa0:	4668      	mov	r0, sp
   20aa2:	4798      	blx	r3
   20aa4:	4620      	mov	r0, r4
   20aa6:	f000 fbd5 	bl	21254 <nrf_free>
   20aaa:	68e8      	ldr	r0, [r5, #12]
   20aac:	f7ff fb86 	bl	201bc <linked_list_size_get>
   20ab0:	4604      	mov	r4, r0
   20ab2:	68e8      	ldr	r0, [r5, #12]
   20ab4:	2c00      	cmp	r4, #0
   20ab6:	d1e5      	bne.n	20a84 <stream_handler_free+0xc>
   20ab8:	f000 fbcc 	bl	21254 <nrf_free>
   20abc:	60ec      	str	r4, [r5, #12]
   20abe:	b005      	add	sp, #20
   20ac0:	bd30      	pop	{r4, r5, pc}
   20ac2:	bf00      	nop

00020ac4 <mem_free>:
   20ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ac8:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 20b98 <mem_free+0xd4>
   20acc:	b083      	sub	sp, #12
   20ace:	9000      	str	r0, [sp, #0]
   20ad0:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   20ad4:	f8dc 3008 	ldr.w	r3, [ip, #8]
   20ad8:	b12b      	cbz	r3, 20ae6 <mem_free+0x22>
   20ada:	f8dc 2000 	ldr.w	r2, [ip]
   20ade:	9c00      	ldr	r4, [sp, #0]
   20ae0:	7810      	ldrb	r0, [r2, #0]
   20ae2:	42a0      	cmp	r0, r4
   20ae4:	d006      	beq.n	20af4 <mem_free+0x30>
   20ae6:	f10c 0c0c 	add.w	ip, ip, #12
   20aea:	45e3      	cmp	fp, ip
   20aec:	d1f2      	bne.n	20ad4 <mem_free+0x10>
   20aee:	b003      	add	sp, #12
   20af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20af4:	f8dc a004 	ldr.w	sl, [ip, #4]
   20af8:	eb03 080a 	add.w	r8, r3, sl
   20afc:	45c2      	cmp	sl, r8
   20afe:	d2f2      	bcs.n	20ae6 <mem_free+0x22>
   20b00:	6853      	ldr	r3, [r2, #4]
   20b02:	f8cd c004 	str.w	ip, [sp, #4]
   20b06:	46d6      	mov	lr, sl
   20b08:	469c      	mov	ip, r3
   20b0a:	f8d2 9010 	ldr.w	r9, [r2, #16]
   20b0e:	8997      	ldrh	r7, [r2, #12]
   20b10:	ebae 000a 	sub.w	r0, lr, sl
   20b14:	b3df      	cbz	r7, 20b8e <mem_free+0xca>
   20b16:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   20b1a:	4290      	cmp	r0, r2
   20b1c:	d31c      	bcc.n	20b58 <mem_free+0x94>
   20b1e:	4665      	mov	r5, ip
   20b20:	2400      	movs	r4, #0
   20b22:	f109 0304 	add.w	r3, r9, #4
   20b26:	e003      	b.n	20b30 <mem_free+0x6c>
   20b28:	885a      	ldrh	r2, [r3, #2]
   20b2a:	3304      	adds	r3, #4
   20b2c:	4282      	cmp	r2, r0
   20b2e:	d815      	bhi.n	20b5c <mem_free+0x98>
   20b30:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   20b34:	3401      	adds	r4, #1
   20b36:	42a7      	cmp	r7, r4
   20b38:	fb02 5506 	mla	r5, r2, r6, r5
   20b3c:	eba0 0002 	sub.w	r0, r0, r2
   20b40:	461e      	mov	r6, r3
   20b42:	d1f1      	bne.n	20b28 <mem_free+0x64>
   20b44:	2000      	movs	r0, #0
   20b46:	4281      	cmp	r1, r0
   20b48:	d00d      	beq.n	20b66 <mem_free+0xa2>
   20b4a:	f10e 0e01 	add.w	lr, lr, #1
   20b4e:	45f0      	cmp	r8, lr
   20b50:	d1de      	bne.n	20b10 <mem_free+0x4c>
   20b52:	f8dd c004 	ldr.w	ip, [sp, #4]
   20b56:	e7c6      	b.n	20ae6 <mem_free+0x22>
   20b58:	4665      	mov	r5, ip
   20b5a:	464e      	mov	r6, r9
   20b5c:	8833      	ldrh	r3, [r6, #0]
   20b5e:	fb00 5003 	mla	r0, r0, r3, r5
   20b62:	4281      	cmp	r1, r0
   20b64:	d1f1      	bne.n	20b4a <mem_free+0x86>
   20b66:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   20b6a:	f8dd c004 	ldr.w	ip, [sp, #4]
   20b6e:	d0ba      	beq.n	20ae6 <mem_free+0x22>
   20b70:	2301      	movs	r3, #1
   20b72:	4a08      	ldr	r2, [pc, #32]	; (20b94 <mem_free+0xd0>)
   20b74:	ea4f 115e 	mov.w	r1, lr, lsr #5
   20b78:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   20b7c:	f00e 0e1f 	and.w	lr, lr, #31
   20b80:	fa03 fe0e 	lsl.w	lr, r3, lr
   20b84:	ea4e 0000 	orr.w	r0, lr, r0
   20b88:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   20b8c:	e7af      	b.n	20aee <mem_free+0x2a>
   20b8e:	4638      	mov	r0, r7
   20b90:	e7d9      	b.n	20b46 <mem_free+0x82>
   20b92:	bf00      	nop
   20b94:	20021c0c 	.word	0x20021c0c
   20b98:	20021c50 	.word	0x20021c50

00020b9c <mem_alloc.constprop.5>:
   20b9c:	2800      	cmp	r0, #0
   20b9e:	d050      	beq.n	20c42 <mem_alloc.constprop.5+0xa6>
   20ba0:	4b6d      	ldr	r3, [pc, #436]	; (20d58 <mem_alloc.constprop.5+0x1bc>)
   20ba2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   20ba6:	4290      	cmp	r0, r2
   20ba8:	d84b      	bhi.n	20c42 <mem_alloc.constprop.5+0xa6>
   20baa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20bae:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   20bb2:	b083      	sub	sp, #12
   20bb4:	f1bb 0f00 	cmp.w	fp, #0
   20bb8:	d054      	beq.n	20c64 <mem_alloc.constprop.5+0xc8>
   20bba:	f10b 32ff 	add.w	r2, fp, #4294967295
   20bbe:	4691      	mov	r9, r2
   20bc0:	2600      	movs	r6, #0
   20bc2:	f04f 0812 	mov.w	r8, #18
   20bc6:	4f65      	ldr	r7, [pc, #404]	; (20d5c <mem_alloc.constprop.5+0x1c0>)
   20bc8:	9201      	str	r2, [sp, #4]
   20bca:	f10b 0e11 	add.w	lr, fp, #17
   20bce:	eb06 0209 	add.w	r2, r6, r9
   20bd2:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   20bd6:	3201      	adds	r2, #1
   20bd8:	0852      	lsrs	r2, r2, #1
   20bda:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   20bde:	f102 0112 	add.w	r1, r2, #18
   20be2:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   20be6:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   20bea:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   20bee:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   20bf2:	f8dc c004 	ldr.w	ip, [ip, #4]
   20bf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   20bfa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   20bfe:	f8da a010 	ldr.w	sl, [sl, #16]
   20c02:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   20c06:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   20c0a:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   20c0e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   20c12:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   20c16:	6849      	ldr	r1, [r1, #4]
   20c18:	692d      	ldr	r5, [r5, #16]
   20c1a:	6924      	ldr	r4, [r4, #16]
   20c1c:	f8dc c004 	ldr.w	ip, [ip, #4]
   20c20:	4550      	cmp	r0, sl
   20c22:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   20c26:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   20c2a:	d915      	bls.n	20c58 <mem_alloc.constprop.5+0xbc>
   20c2c:	4288      	cmp	r0, r1
   20c2e:	d211      	bcs.n	20c54 <mem_alloc.constprop.5+0xb8>
   20c30:	42a8      	cmp	r0, r5
   20c32:	d908      	bls.n	20c46 <mem_alloc.constprop.5+0xaa>
   20c34:	1c56      	adds	r6, r2, #1
   20c36:	45b1      	cmp	r9, r6
   20c38:	f0c0 8087 	bcc.w	20d4a <mem_alloc.constprop.5+0x1ae>
   20c3c:	f102 0813 	add.w	r8, r2, #19
   20c40:	e7c5      	b.n	20bce <mem_alloc.constprop.5+0x32>
   20c42:	2000      	movs	r0, #0
   20c44:	4770      	bx	lr
   20c46:	f102 39ff 	add.w	r9, r2, #4294967295
   20c4a:	454e      	cmp	r6, r9
   20c4c:	d87d      	bhi.n	20d4a <mem_alloc.constprop.5+0x1ae>
   20c4e:	f102 0e11 	add.w	lr, r2, #17
   20c52:	e7bc      	b.n	20bce <mem_alloc.constprop.5+0x32>
   20c54:	f109 0601 	add.w	r6, r9, #1
   20c58:	45b3      	cmp	fp, r6
   20c5a:	d007      	beq.n	20c6c <mem_alloc.constprop.5+0xd0>
   20c5c:	2e10      	cmp	r6, #16
   20c5e:	d001      	beq.n	20c64 <mem_alloc.constprop.5+0xc8>
   20c60:	45b3      	cmp	fp, r6
   20c62:	d808      	bhi.n	20c76 <mem_alloc.constprop.5+0xda>
   20c64:	2000      	movs	r0, #0
   20c66:	b003      	add	sp, #12
   20c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c6c:	9a01      	ldr	r2, [sp, #4]
   20c6e:	2a10      	cmp	r2, #16
   20c70:	bf18      	it	ne
   20c72:	4616      	movne	r6, r2
   20c74:	d0f6      	beq.n	20c64 <mem_alloc.constprop.5+0xc8>
   20c76:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 20d60 <mem_alloc.constprop.5+0x1c4>
   20c7a:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   20c7e:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   20c82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   20c86:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   20c8a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   20c8e:	f8d2 e004 	ldr.w	lr, [r2, #4]
   20c92:	691d      	ldr	r5, [r3, #16]
   20c94:	2c00      	cmp	r4, #0
   20c96:	d056      	beq.n	20d46 <mem_alloc.constprop.5+0x1aa>
   20c98:	462a      	mov	r2, r5
   20c9a:	4670      	mov	r0, lr
   20c9c:	00a4      	lsls	r4, r4, #2
   20c9e:	eb05 0904 	add.w	r9, r5, r4
   20ca2:	8851      	ldrh	r1, [r2, #2]
   20ca4:	3204      	adds	r2, #4
   20ca6:	4591      	cmp	r9, r2
   20ca8:	4408      	add	r0, r1
   20caa:	d1fa      	bne.n	20ca2 <mem_alloc.constprop.5+0x106>
   20cac:	1929      	adds	r1, r5, r4
   20cae:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   20cb2:	4482      	add	sl, r0
   20cb4:	4582      	cmp	sl, r0
   20cb6:	d918      	bls.n	20cea <mem_alloc.constprop.5+0x14e>
   20cb8:	0941      	lsrs	r1, r0, #5
   20cba:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   20cbe:	f000 041f 	and.w	r4, r0, #31
   20cc2:	fa22 f904 	lsr.w	r9, r2, r4
   20cc6:	f019 0f01 	tst.w	r9, #1
   20cca:	d007      	beq.n	20cdc <mem_alloc.constprop.5+0x140>
   20ccc:	e013      	b.n	20cf6 <mem_alloc.constprop.5+0x15a>
   20cce:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   20cd2:	fa22 f904 	lsr.w	r9, r2, r4
   20cd6:	f019 0f01 	tst.w	r9, #1
   20cda:	d10c      	bne.n	20cf6 <mem_alloc.constprop.5+0x15a>
   20cdc:	3001      	adds	r0, #1
   20cde:	4582      	cmp	sl, r0
   20ce0:	ea4f 1150 	mov.w	r1, r0, lsr #5
   20ce4:	f000 041f 	and.w	r4, r0, #31
   20ce8:	d1f1      	bne.n	20cce <mem_alloc.constprop.5+0x132>
   20cea:	3601      	adds	r6, #1
   20cec:	455e      	cmp	r6, fp
   20cee:	f108 0808 	add.w	r8, r8, #8
   20cf2:	d3c4      	bcc.n	20c7e <mem_alloc.constprop.5+0xe2>
   20cf4:	e7b6      	b.n	20c64 <mem_alloc.constprop.5+0xc8>
   20cf6:	2601      	movs	r6, #1
   20cf8:	fa06 f404 	lsl.w	r4, r6, r4
   20cfc:	899e      	ldrh	r6, [r3, #12]
   20cfe:	ea22 0204 	bic.w	r2, r2, r4
   20d02:	eba0 000e 	sub.w	r0, r0, lr
   20d06:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   20d0a:	685c      	ldr	r4, [r3, #4]
   20d0c:	2e00      	cmp	r6, #0
   20d0e:	d0a9      	beq.n	20c64 <mem_alloc.constprop.5+0xc8>
   20d10:	886a      	ldrh	r2, [r5, #2]
   20d12:	4282      	cmp	r2, r0
   20d14:	d811      	bhi.n	20d3a <mem_alloc.constprop.5+0x19e>
   20d16:	2100      	movs	r1, #0
   20d18:	1d2b      	adds	r3, r5, #4
   20d1a:	e003      	b.n	20d24 <mem_alloc.constprop.5+0x188>
   20d1c:	885a      	ldrh	r2, [r3, #2]
   20d1e:	3304      	adds	r3, #4
   20d20:	4282      	cmp	r2, r0
   20d22:	d80a      	bhi.n	20d3a <mem_alloc.constprop.5+0x19e>
   20d24:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   20d28:	3101      	adds	r1, #1
   20d2a:	428e      	cmp	r6, r1
   20d2c:	fb02 4405 	mla	r4, r2, r5, r4
   20d30:	eba0 0002 	sub.w	r0, r0, r2
   20d34:	461d      	mov	r5, r3
   20d36:	d1f1      	bne.n	20d1c <mem_alloc.constprop.5+0x180>
   20d38:	e794      	b.n	20c64 <mem_alloc.constprop.5+0xc8>
   20d3a:	882b      	ldrh	r3, [r5, #0]
   20d3c:	fb00 4003 	mla	r0, r0, r3, r4
   20d40:	b003      	add	sp, #12
   20d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20d46:	4670      	mov	r0, lr
   20d48:	e7b0      	b.n	20cac <mem_alloc.constprop.5+0x110>
   20d4a:	f1bb 0f10 	cmp.w	fp, #16
   20d4e:	bf08      	it	eq
   20d50:	260f      	moveq	r6, #15
   20d52:	d090      	beq.n	20c76 <mem_alloc.constprop.5+0xda>
   20d54:	e786      	b.n	20c64 <mem_alloc.constprop.5+0xc8>
   20d56:	bf00      	nop
   20d58:	20021c8c 	.word	0x20021c8c
   20d5c:	20021c50 	.word	0x20021c50
   20d60:	20021c0c 	.word	0x20021c0c

00020d64 <mem_alloc.constprop.4>:
   20d64:	2800      	cmp	r0, #0
   20d66:	d04c      	beq.n	20e02 <mem_alloc.constprop.4+0x9e>
   20d68:	4b6b      	ldr	r3, [pc, #428]	; (20f18 <mem_alloc.constprop.4+0x1b4>)
   20d6a:	681a      	ldr	r2, [r3, #0]
   20d6c:	4290      	cmp	r0, r2
   20d6e:	d848      	bhi.n	20e02 <mem_alloc.constprop.4+0x9e>
   20d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d74:	685f      	ldr	r7, [r3, #4]
   20d76:	b083      	sub	sp, #12
   20d78:	9700      	str	r7, [sp, #0]
   20d7a:	2f00      	cmp	r7, #0
   20d7c:	d051      	beq.n	20e22 <mem_alloc.constprop.4+0xbe>
   20d7e:	1e7a      	subs	r2, r7, #1
   20d80:	4696      	mov	lr, r2
   20d82:	2100      	movs	r1, #0
   20d84:	f04f 0c01 	mov.w	ip, #1
   20d88:	4c64      	ldr	r4, [pc, #400]	; (20f1c <mem_alloc.constprop.4+0x1b8>)
   20d8a:	9201      	str	r2, [sp, #4]
   20d8c:	eb01 020e 	add.w	r2, r1, lr
   20d90:	3201      	adds	r2, #1
   20d92:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   20d96:	0852      	lsrs	r2, r2, #1
   20d98:	f102 0801 	add.w	r8, r2, #1
   20d9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   20da0:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   20da4:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   20da8:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   20dac:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   20db0:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   20db4:	f8d9 9004 	ldr.w	r9, [r9, #4]
   20db8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   20dbc:	f8da a010 	ldr.w	sl, [sl, #16]
   20dc0:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   20dc4:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   20dc8:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   20dcc:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   20dd0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   20dd4:	6936      	ldr	r6, [r6, #16]
   20dd6:	f8db b004 	ldr.w	fp, [fp, #4]
   20dda:	692d      	ldr	r5, [r5, #16]
   20ddc:	f8d9 9004 	ldr.w	r9, [r9, #4]
   20de0:	4550      	cmp	r0, sl
   20de2:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   20de6:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   20dea:	d913      	bls.n	20e14 <mem_alloc.constprop.4+0xb0>
   20dec:	42a8      	cmp	r0, r5
   20dee:	d210      	bcs.n	20e12 <mem_alloc.constprop.4+0xae>
   20df0:	42b0      	cmp	r0, r6
   20df2:	d908      	bls.n	20e06 <mem_alloc.constprop.4+0xa2>
   20df4:	45c6      	cmp	lr, r8
   20df6:	4641      	mov	r1, r8
   20df8:	f0c0 8087 	bcc.w	20f0a <mem_alloc.constprop.4+0x1a6>
   20dfc:	f108 0c01 	add.w	ip, r8, #1
   20e00:	e7c4      	b.n	20d8c <mem_alloc.constprop.4+0x28>
   20e02:	2000      	movs	r0, #0
   20e04:	4770      	bx	lr
   20e06:	f102 3eff 	add.w	lr, r2, #4294967295
   20e0a:	4571      	cmp	r1, lr
   20e0c:	d87d      	bhi.n	20f0a <mem_alloc.constprop.4+0x1a6>
   20e0e:	4617      	mov	r7, r2
   20e10:	e7bc      	b.n	20d8c <mem_alloc.constprop.4+0x28>
   20e12:	4639      	mov	r1, r7
   20e14:	9a00      	ldr	r2, [sp, #0]
   20e16:	428a      	cmp	r2, r1
   20e18:	d007      	beq.n	20e2a <mem_alloc.constprop.4+0xc6>
   20e1a:	2910      	cmp	r1, #16
   20e1c:	d001      	beq.n	20e22 <mem_alloc.constprop.4+0xbe>
   20e1e:	428a      	cmp	r2, r1
   20e20:	d808      	bhi.n	20e34 <mem_alloc.constprop.4+0xd0>
   20e22:	2000      	movs	r0, #0
   20e24:	b003      	add	sp, #12
   20e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e2a:	9a01      	ldr	r2, [sp, #4]
   20e2c:	2a10      	cmp	r2, #16
   20e2e:	bf18      	it	ne
   20e30:	4611      	movne	r1, r2
   20e32:	d0f6      	beq.n	20e22 <mem_alloc.constprop.4+0xbe>
   20e34:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 20f20 <mem_alloc.constprop.4+0x1bc>
   20e38:	f8dd 9000 	ldr.w	r9, [sp]
   20e3c:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   20e40:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   20e44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   20e48:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   20e4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   20e50:	f8d2 e004 	ldr.w	lr, [r2, #4]
   20e54:	691f      	ldr	r7, [r3, #16]
   20e56:	2e00      	cmp	r6, #0
   20e58:	d055      	beq.n	20f06 <mem_alloc.constprop.4+0x1a2>
   20e5a:	463a      	mov	r2, r7
   20e5c:	4670      	mov	r0, lr
   20e5e:	00b6      	lsls	r6, r6, #2
   20e60:	eb07 0a06 	add.w	sl, r7, r6
   20e64:	8855      	ldrh	r5, [r2, #2]
   20e66:	3204      	adds	r2, #4
   20e68:	4592      	cmp	sl, r2
   20e6a:	4428      	add	r0, r5
   20e6c:	d1fa      	bne.n	20e64 <mem_alloc.constprop.4+0x100>
   20e6e:	19bd      	adds	r5, r7, r6
   20e70:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   20e74:	4483      	add	fp, r0
   20e76:	4583      	cmp	fp, r0
   20e78:	d918      	bls.n	20eac <mem_alloc.constprop.4+0x148>
   20e7a:	0945      	lsrs	r5, r0, #5
   20e7c:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   20e80:	f000 061f 	and.w	r6, r0, #31
   20e84:	fa22 fa06 	lsr.w	sl, r2, r6
   20e88:	f01a 0f01 	tst.w	sl, #1
   20e8c:	d007      	beq.n	20e9e <mem_alloc.constprop.4+0x13a>
   20e8e:	e013      	b.n	20eb8 <mem_alloc.constprop.4+0x154>
   20e90:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   20e94:	fa22 fa06 	lsr.w	sl, r2, r6
   20e98:	f01a 0f01 	tst.w	sl, #1
   20e9c:	d10c      	bne.n	20eb8 <mem_alloc.constprop.4+0x154>
   20e9e:	3001      	adds	r0, #1
   20ea0:	4583      	cmp	fp, r0
   20ea2:	ea4f 1550 	mov.w	r5, r0, lsr #5
   20ea6:	f000 061f 	and.w	r6, r0, #31
   20eaa:	d1f1      	bne.n	20e90 <mem_alloc.constprop.4+0x12c>
   20eac:	3101      	adds	r1, #1
   20eae:	4549      	cmp	r1, r9
   20eb0:	f108 0808 	add.w	r8, r8, #8
   20eb4:	d3c4      	bcc.n	20e40 <mem_alloc.constprop.4+0xdc>
   20eb6:	e7b4      	b.n	20e22 <mem_alloc.constprop.4+0xbe>
   20eb8:	2101      	movs	r1, #1
   20eba:	40b1      	lsls	r1, r6
   20ebc:	899e      	ldrh	r6, [r3, #12]
   20ebe:	ea22 0201 	bic.w	r2, r2, r1
   20ec2:	eba0 000e 	sub.w	r0, r0, lr
   20ec6:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   20eca:	685c      	ldr	r4, [r3, #4]
   20ecc:	2e00      	cmp	r6, #0
   20ece:	d0a8      	beq.n	20e22 <mem_alloc.constprop.4+0xbe>
   20ed0:	887a      	ldrh	r2, [r7, #2]
   20ed2:	4282      	cmp	r2, r0
   20ed4:	d811      	bhi.n	20efa <mem_alloc.constprop.4+0x196>
   20ed6:	2100      	movs	r1, #0
   20ed8:	1d3b      	adds	r3, r7, #4
   20eda:	e003      	b.n	20ee4 <mem_alloc.constprop.4+0x180>
   20edc:	885a      	ldrh	r2, [r3, #2]
   20ede:	3304      	adds	r3, #4
   20ee0:	4282      	cmp	r2, r0
   20ee2:	d80a      	bhi.n	20efa <mem_alloc.constprop.4+0x196>
   20ee4:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   20ee8:	3101      	adds	r1, #1
   20eea:	428e      	cmp	r6, r1
   20eec:	eba0 0002 	sub.w	r0, r0, r2
   20ef0:	fb02 4405 	mla	r4, r2, r5, r4
   20ef4:	461f      	mov	r7, r3
   20ef6:	d1f1      	bne.n	20edc <mem_alloc.constprop.4+0x178>
   20ef8:	e793      	b.n	20e22 <mem_alloc.constprop.4+0xbe>
   20efa:	883b      	ldrh	r3, [r7, #0]
   20efc:	fb00 4003 	mla	r0, r0, r3, r4
   20f00:	b003      	add	sp, #12
   20f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20f06:	4670      	mov	r0, lr
   20f08:	e7b1      	b.n	20e6e <mem_alloc.constprop.4+0x10a>
   20f0a:	9a00      	ldr	r2, [sp, #0]
   20f0c:	2a10      	cmp	r2, #16
   20f0e:	bf08      	it	eq
   20f10:	210f      	moveq	r1, #15
   20f12:	d08f      	beq.n	20e34 <mem_alloc.constprop.4+0xd0>
   20f14:	e785      	b.n	20e22 <mem_alloc.constprop.4+0xbe>
   20f16:	bf00      	nop
   20f18:	20021c8c 	.word	0x20021c8c
   20f1c:	20021c50 	.word	0x20021c50
   20f20:	20021c0c 	.word	0x20021c0c

00020f24 <nrf_mem_init>:
   20f24:	b570      	push	{r4, r5, r6, lr}
   20f26:	2200      	movs	r2, #0
   20f28:	2501      	movs	r5, #1
   20f2a:	4833      	ldr	r0, [pc, #204]	; (20ff8 <nrf_mem_init+0xd4>)
   20f2c:	0951      	lsrs	r1, r2, #5
   20f2e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   20f32:	f002 031f 	and.w	r3, r2, #31
   20f36:	fa05 f303 	lsl.w	r3, r5, r3
   20f3a:	3201      	adds	r2, #1
   20f3c:	4323      	orrs	r3, r4
   20f3e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   20f42:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   20f46:	d1f1      	bne.n	20f2c <nrf_mem_init+0x8>
   20f48:	2400      	movs	r4, #0
   20f4a:	4b2c      	ldr	r3, [pc, #176]	; (20ffc <nrf_mem_init+0xd8>)
   20f4c:	4621      	mov	r1, r4
   20f4e:	223c      	movs	r2, #60	; 0x3c
   20f50:	482b      	ldr	r0, [pc, #172]	; (21000 <nrf_mem_init+0xdc>)
   20f52:	601c      	str	r4, [r3, #0]
   20f54:	f005 fa50 	bl	263f8 <memset>
   20f58:	2110      	movs	r1, #16
   20f5a:	2205      	movs	r2, #5
   20f5c:	4b29      	ldr	r3, [pc, #164]	; (21004 <nrf_mem_init+0xe0>)
   20f5e:	4e2a      	ldr	r6, [pc, #168]	; (21008 <nrf_mem_init+0xe4>)
   20f60:	e9c3 4400 	strd	r4, r4, [r3]
   20f64:	60d9      	str	r1, [r3, #12]
   20f66:	6159      	str	r1, [r3, #20]
   20f68:	61d9      	str	r1, [r3, #28]
   20f6a:	6259      	str	r1, [r3, #36]	; 0x24
   20f6c:	62d9      	str	r1, [r3, #44]	; 0x2c
   20f6e:	6359      	str	r1, [r3, #52]	; 0x34
   20f70:	63d9      	str	r1, [r3, #60]	; 0x3c
   20f72:	6459      	str	r1, [r3, #68]	; 0x44
   20f74:	64d9      	str	r1, [r3, #76]	; 0x4c
   20f76:	6559      	str	r1, [r3, #84]	; 0x54
   20f78:	65d9      	str	r1, [r3, #92]	; 0x5c
   20f7a:	6659      	str	r1, [r3, #100]	; 0x64
   20f7c:	66d9      	str	r1, [r3, #108]	; 0x6c
   20f7e:	6759      	str	r1, [r3, #116]	; 0x74
   20f80:	67d9      	str	r1, [r3, #124]	; 0x7c
   20f82:	609a      	str	r2, [r3, #8]
   20f84:	611a      	str	r2, [r3, #16]
   20f86:	619a      	str	r2, [r3, #24]
   20f88:	621a      	str	r2, [r3, #32]
   20f8a:	629a      	str	r2, [r3, #40]	; 0x28
   20f8c:	631a      	str	r2, [r3, #48]	; 0x30
   20f8e:	639a      	str	r2, [r3, #56]	; 0x38
   20f90:	641a      	str	r2, [r3, #64]	; 0x40
   20f92:	649a      	str	r2, [r3, #72]	; 0x48
   20f94:	651a      	str	r2, [r3, #80]	; 0x50
   20f96:	659a      	str	r2, [r3, #88]	; 0x58
   20f98:	661a      	str	r2, [r3, #96]	; 0x60
   20f9a:	669a      	str	r2, [r3, #104]	; 0x68
   20f9c:	671a      	str	r2, [r3, #112]	; 0x70
   20f9e:	679a      	str	r2, [r3, #120]	; 0x78
   20fa0:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   20fa4:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   20fa8:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   20fac:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   20fb0:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   20fb4:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   20fb8:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   20fbc:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   20fc0:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   20fc4:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   20fc8:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   20fcc:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   20fd0:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   20fd4:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   20fd8:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   20fdc:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   20fe0:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   20fe4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   20fe8:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   20fec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   20ff0:	4620      	mov	r0, r4
   20ff2:	7035      	strb	r5, [r6, #0]
   20ff4:	bd70      	pop	{r4, r5, r6, pc}
   20ff6:	bf00      	nop
   20ff8:	20021c0c 	.word	0x20021c0c
   20ffc:	20021c4c 	.word	0x20021c4c
   21000:	20021c50 	.word	0x20021c50
   21004:	20021c8c 	.word	0x20021c8c
   21008:	200262a0 	.word	0x200262a0

0002100c <nrf_mem_register>:
   2100c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21010:	4b87      	ldr	r3, [pc, #540]	; (21230 <nrf_mem_register+0x224>)
   21012:	b087      	sub	sp, #28
   21014:	781b      	ldrb	r3, [r3, #0]
   21016:	2b00      	cmp	r3, #0
   21018:	f000 808c 	beq.w	21134 <nrf_mem_register+0x128>
   2101c:	b328      	cbz	r0, 2106a <nrf_mem_register+0x5e>
   2101e:	b321      	cbz	r1, 2106a <nrf_mem_register+0x5e>
   21020:	780b      	ldrb	r3, [r1, #0]
   21022:	f8df 8218 	ldr.w	r8, [pc, #536]	; 2123c <nrf_mem_register+0x230>
   21026:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   2102a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   2102e:	685b      	ldr	r3, [r3, #4]
   21030:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   21034:	4463      	add	r3, ip
   21036:	2b10      	cmp	r3, #16
   21038:	d811      	bhi.n	2105e <nrf_mem_register+0x52>
   2103a:	f04f 0a00 	mov.w	sl, #0
   2103e:	4689      	mov	r9, r1
   21040:	4b7c      	ldr	r3, [pc, #496]	; (21234 <nrf_mem_register+0x228>)
   21042:	4f7d      	ldr	r7, [pc, #500]	; (21238 <nrf_mem_register+0x22c>)
   21044:	681b      	ldr	r3, [r3, #0]
   21046:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   2104a:	9300      	str	r3, [sp, #0]
   2104c:	68b9      	ldr	r1, [r7, #8]
   2104e:	b191      	cbz	r1, 21076 <nrf_mem_register+0x6a>
   21050:	f10a 0a01 	add.w	sl, sl, #1
   21054:	f1ba 0f05 	cmp.w	sl, #5
   21058:	f107 070c 	add.w	r7, r7, #12
   2105c:	d1f6      	bne.n	2104c <nrf_mem_register+0x40>
   2105e:	f248 1b07 	movw	fp, #33031	; 0x8107
   21062:	4658      	mov	r0, fp
   21064:	b007      	add	sp, #28
   21066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2106a:	f248 1b0e 	movw	fp, #33038	; 0x810e
   2106e:	4658      	mov	r0, fp
   21070:	b007      	add	sp, #28
   21072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21076:	f1bc 0f00 	cmp.w	ip, #0
   2107a:	d061      	beq.n	21140 <nrf_mem_register+0x134>
   2107c:	460d      	mov	r5, r1
   2107e:	460c      	mov	r4, r1
   21080:	f8d9 3010 	ldr.w	r3, [r9, #16]
   21084:	eb0e 0b03 	add.w	fp, lr, r3
   21088:	885a      	ldrh	r2, [r3, #2]
   2108a:	f833 6b04 	ldrh.w	r6, [r3], #4
   2108e:	4415      	add	r5, r2
   21090:	459b      	cmp	fp, r3
   21092:	fb02 4406 	mla	r4, r2, r6, r4
   21096:	d1f7      	bne.n	21088 <nrf_mem_register+0x7c>
   21098:	f8d9 3008 	ldr.w	r3, [r9, #8]
   2109c:	42a3      	cmp	r3, r4
   2109e:	d3d7      	bcc.n	21050 <nrf_mem_register+0x44>
   210a0:	9b00      	ldr	r3, [sp, #0]
   210a2:	442b      	add	r3, r5
   210a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   210a8:	d2d2      	bcs.n	21050 <nrf_mem_register+0x44>
   210aa:	4c63      	ldr	r4, [pc, #396]	; (21238 <nrf_mem_register+0x22c>)
   210ac:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   210b0:	0092      	lsls	r2, r2, #2
   210b2:	f8c0 a000 	str.w	sl, [r0]
   210b6:	18a0      	adds	r0, r4, r2
   210b8:	f844 9002 	str.w	r9, [r4, r2]
   210bc:	9a00      	ldr	r2, [sp, #0]
   210be:	468b      	mov	fp, r1
   210c0:	e9c0 2501 	strd	r2, r5, [r0, #4]
   210c4:	f899 2001 	ldrb.w	r2, [r9, #1]
   210c8:	485a      	ldr	r0, [pc, #360]	; (21234 <nrf_mem_register+0x228>)
   210ca:	2a01      	cmp	r2, #1
   210cc:	6003      	str	r3, [r0, #0]
   210ce:	d0c8      	beq.n	21062 <nrf_mem_register+0x56>
   210d0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   210d4:	2b00      	cmp	r3, #0
   210d6:	d0c4      	beq.n	21062 <nrf_mem_register+0x56>
   210d8:	2500      	movs	r5, #0
   210da:	f8cd 9004 	str.w	r9, [sp, #4]
   210de:	f8cd a00c 	str.w	sl, [sp, #12]
   210e2:	f8cd b014 	str.w	fp, [sp, #20]
   210e6:	9b01      	ldr	r3, [sp, #4]
   210e8:	781f      	ldrb	r7, [r3, #0]
   210ea:	691a      	ldr	r2, [r3, #16]
   210ec:	013b      	lsls	r3, r7, #4
   210ee:	eb03 0907 	add.w	r9, r3, r7
   210f2:	9300      	str	r3, [sp, #0]
   210f4:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   210f8:	6859      	ldr	r1, [r3, #4]
   210fa:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   210fe:	9102      	str	r1, [sp, #8]
   21100:	bb39      	cbnz	r1, 21152 <nrf_mem_register+0x146>
   21102:	9a03      	ldr	r2, [sp, #12]
   21104:	60dd      	str	r5, [r3, #12]
   21106:	609a      	str	r2, [r3, #8]
   21108:	9b00      	ldr	r3, [sp, #0]
   2110a:	443b      	add	r3, r7
   2110c:	461f      	mov	r7, r3
   2110e:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   21112:	684b      	ldr	r3, [r1, #4]
   21114:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   21118:	3301      	adds	r3, #1
   2111a:	4294      	cmp	r4, r2
   2111c:	604b      	str	r3, [r1, #4]
   2111e:	d912      	bls.n	21146 <nrf_mem_register+0x13a>
   21120:	9b01      	ldr	r3, [sp, #4]
   21122:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   21126:	899b      	ldrh	r3, [r3, #12]
   21128:	3501      	adds	r5, #1
   2112a:	429d      	cmp	r5, r3
   2112c:	d3db      	bcc.n	210e6 <nrf_mem_register+0xda>
   2112e:	f8dd b014 	ldr.w	fp, [sp, #20]
   21132:	e796      	b.n	21062 <nrf_mem_register+0x56>
   21134:	f248 1b08 	movw	fp, #33032	; 0x8108
   21138:	4658      	mov	r0, fp
   2113a:	b007      	add	sp, #28
   2113c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21140:	9b00      	ldr	r3, [sp, #0]
   21142:	4665      	mov	r5, ip
   21144:	e7ae      	b.n	210a4 <nrf_mem_register+0x98>
   21146:	9b01      	ldr	r3, [sp, #4]
   21148:	3501      	adds	r5, #1
   2114a:	899b      	ldrh	r3, [r3, #12]
   2114c:	42ab      	cmp	r3, r5
   2114e:	d8ca      	bhi.n	210e6 <nrf_mem_register+0xda>
   21150:	e7ed      	b.n	2112e <nrf_mem_register+0x122>
   21152:	2600      	movs	r6, #0
   21154:	f101 3aff 	add.w	sl, r1, #4294967295
   21158:	9504      	str	r5, [sp, #16]
   2115a:	eb06 000a 	add.w	r0, r6, sl
   2115e:	eb09 0206 	add.w	r2, r9, r6
   21162:	3201      	adds	r2, #1
   21164:	3001      	adds	r0, #1
   21166:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   2116a:	0840      	lsrs	r0, r0, #1
   2116c:	4d32      	ldr	r5, [pc, #200]	; (21238 <nrf_mem_register+0x22c>)
   2116e:	eb09 0100 	add.w	r1, r9, r0
   21172:	eb09 030a 	add.w	r3, r9, sl
   21176:	3101      	adds	r1, #1
   21178:	3301      	adds	r3, #1
   2117a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   2117e:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   21182:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   21186:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   2118a:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   2118e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   21192:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   21196:	f8db b010 	ldr.w	fp, [fp, #16]
   2119a:	6852      	ldr	r2, [r2, #4]
   2119c:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   211a0:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   211a4:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   211a8:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   211ac:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   211b0:	f8de e010 	ldr.w	lr, [lr, #16]
   211b4:	6849      	ldr	r1, [r1, #4]
   211b6:	f8dc c010 	ldr.w	ip, [ip, #16]
   211ba:	685b      	ldr	r3, [r3, #4]
   211bc:	4294      	cmp	r4, r2
   211be:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   211c2:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   211c6:	d92d      	bls.n	21224 <nrf_mem_register+0x218>
   211c8:	429c      	cmp	r4, r3
   211ca:	d22d      	bcs.n	21228 <nrf_mem_register+0x21c>
   211cc:	428c      	cmp	r4, r1
   211ce:	d924      	bls.n	2121a <nrf_mem_register+0x20e>
   211d0:	1c46      	adds	r6, r0, #1
   211d2:	45b2      	cmp	sl, r6
   211d4:	d2c1      	bcs.n	2115a <nrf_mem_register+0x14e>
   211d6:	2610      	movs	r6, #16
   211d8:	9d04      	ldr	r5, [sp, #16]
   211da:	9a02      	ldr	r2, [sp, #8]
   211dc:	42b2      	cmp	r2, r6
   211de:	d911      	bls.n	21204 <nrf_mem_register+0x1f8>
   211e0:	9b00      	ldr	r3, [sp, #0]
   211e2:	443b      	add	r3, r7
   211e4:	441a      	add	r2, r3
   211e6:	4433      	add	r3, r6
   211e8:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   211ec:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   211f0:	2208      	movs	r2, #8
   211f2:	4651      	mov	r1, sl
   211f4:	eb0a 0002 	add.w	r0, sl, r2
   211f8:	f1aa 0a08 	sub.w	sl, sl, #8
   211fc:	f7eb fca6 	bl	cb4c <memcpy>
   21200:	45d1      	cmp	r9, sl
   21202:	d1f5      	bne.n	211f0 <nrf_mem_register+0x1e4>
   21204:	9b00      	ldr	r3, [sp, #0]
   21206:	9903      	ldr	r1, [sp, #12]
   21208:	443b      	add	r3, r7
   2120a:	4433      	add	r3, r6
   2120c:	3301      	adds	r3, #1
   2120e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   21212:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   21216:	6055      	str	r5, [r2, #4]
   21218:	e776      	b.n	21108 <nrf_mem_register+0xfc>
   2121a:	f100 3aff 	add.w	sl, r0, #4294967295
   2121e:	4556      	cmp	r6, sl
   21220:	d99b      	bls.n	2115a <nrf_mem_register+0x14e>
   21222:	e7d8      	b.n	211d6 <nrf_mem_register+0x1ca>
   21224:	9d04      	ldr	r5, [sp, #16]
   21226:	e7d8      	b.n	211da <nrf_mem_register+0x1ce>
   21228:	9d04      	ldr	r5, [sp, #16]
   2122a:	f10a 0601 	add.w	r6, sl, #1
   2122e:	e7d4      	b.n	211da <nrf_mem_register+0x1ce>
   21230:	200262a0 	.word	0x200262a0
   21234:	20021c4c 	.word	0x20021c4c
   21238:	20021c50 	.word	0x20021c50
   2123c:	20021c8c 	.word	0x20021c8c

00021240 <nrf_malloc>:
   21240:	4b03      	ldr	r3, [pc, #12]	; (21250 <nrf_malloc+0x10>)
   21242:	781b      	ldrb	r3, [r3, #0]
   21244:	b10b      	cbz	r3, 2124a <nrf_malloc+0xa>
   21246:	f7ff bd8d 	b.w	20d64 <mem_alloc.constprop.4>
   2124a:	4618      	mov	r0, r3
   2124c:	4770      	bx	lr
   2124e:	bf00      	nop
   21250:	200262a0 	.word	0x200262a0

00021254 <nrf_free>:
   21254:	4b04      	ldr	r3, [pc, #16]	; (21268 <nrf_free+0x14>)
   21256:	781b      	ldrb	r3, [r3, #0]
   21258:	b123      	cbz	r3, 21264 <nrf_free+0x10>
   2125a:	b118      	cbz	r0, 21264 <nrf_free+0x10>
   2125c:	4601      	mov	r1, r0
   2125e:	2000      	movs	r0, #0
   21260:	f7ff bc30 	b.w	20ac4 <mem_free>
   21264:	4770      	bx	lr
   21266:	bf00      	nop
   21268:	200262a0 	.word	0x200262a0

0002126c <nrf_realloc>:
   2126c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21270:	4b52      	ldr	r3, [pc, #328]	; (213bc <nrf_realloc+0x150>)
   21272:	b087      	sub	sp, #28
   21274:	781b      	ldrb	r3, [r3, #0]
   21276:	b173      	cbz	r3, 21296 <nrf_realloc+0x2a>
   21278:	b168      	cbz	r0, 21296 <nrf_realloc+0x2a>
   2127a:	e9cd 0101 	strd	r0, r1, [sp, #4]
   2127e:	f8df a148 	ldr.w	sl, [pc, #328]	; 213c8 <nrf_realloc+0x15c>
   21282:	f8da 3000 	ldr.w	r3, [sl]
   21286:	b10b      	cbz	r3, 2128c <nrf_realloc+0x20>
   21288:	781a      	ldrb	r2, [r3, #0]
   2128a:	b14a      	cbz	r2, 212a0 <nrf_realloc+0x34>
   2128c:	4b4c      	ldr	r3, [pc, #304]	; (213c0 <nrf_realloc+0x154>)
   2128e:	f10a 0a0c 	add.w	sl, sl, #12
   21292:	4553      	cmp	r3, sl
   21294:	d1f5      	bne.n	21282 <nrf_realloc+0x16>
   21296:	2400      	movs	r4, #0
   21298:	4620      	mov	r0, r4
   2129a:	b007      	add	sp, #28
   2129c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212a0:	e9da 9201 	ldrd	r9, r2, [sl, #4]
   212a4:	444a      	add	r2, r9
   212a6:	4591      	cmp	r9, r2
   212a8:	9200      	str	r2, [sp, #0]
   212aa:	d2ef      	bcs.n	2128c <nrf_realloc+0x20>
   212ac:	685a      	ldr	r2, [r3, #4]
   212ae:	f8cd a00c 	str.w	sl, [sp, #12]
   212b2:	46cb      	mov	fp, r9
   212b4:	4692      	mov	sl, r2
   212b6:	f8d3 8010 	ldr.w	r8, [r3, #16]
   212ba:	899f      	ldrh	r7, [r3, #12]
   212bc:	ebab 0e09 	sub.w	lr, fp, r9
   212c0:	b1d7      	cbz	r7, 212f8 <nrf_realloc+0x8c>
   212c2:	f8b8 c002 	ldrh.w	ip, [r8, #2]
   212c6:	45e6      	cmp	lr, ip
   212c8:	4662      	mov	r2, ip
   212ca:	d31d      	bcc.n	21308 <nrf_realloc+0x9c>
   212cc:	4654      	mov	r4, sl
   212ce:	4671      	mov	r1, lr
   212d0:	4665      	mov	r5, ip
   212d2:	2000      	movs	r0, #0
   212d4:	f108 0304 	add.w	r3, r8, #4
   212d8:	e004      	b.n	212e4 <nrf_realloc+0x78>
   212da:	885a      	ldrh	r2, [r3, #2]
   212dc:	3304      	adds	r3, #4
   212de:	428a      	cmp	r2, r1
   212e0:	4615      	mov	r5, r2
   212e2:	d814      	bhi.n	2130e <nrf_realloc+0xa2>
   212e4:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   212e8:	3001      	adds	r0, #1
   212ea:	4287      	cmp	r7, r0
   212ec:	fb02 4406 	mla	r4, r2, r6, r4
   212f0:	eba1 0105 	sub.w	r1, r1, r5
   212f4:	461e      	mov	r6, r3
   212f6:	d1f0      	bne.n	212da <nrf_realloc+0x6e>
   212f8:	9b00      	ldr	r3, [sp, #0]
   212fa:	f10b 0b01 	add.w	fp, fp, #1
   212fe:	455b      	cmp	r3, fp
   21300:	d1dc      	bne.n	212bc <nrf_realloc+0x50>
   21302:	f8dd a00c 	ldr.w	sl, [sp, #12]
   21306:	e7c1      	b.n	2128c <nrf_realloc+0x20>
   21308:	4654      	mov	r4, sl
   2130a:	4671      	mov	r1, lr
   2130c:	4646      	mov	r6, r8
   2130e:	8833      	ldrh	r3, [r6, #0]
   21310:	fb01 4103 	mla	r1, r1, r3, r4
   21314:	9b01      	ldr	r3, [sp, #4]
   21316:	428b      	cmp	r3, r1
   21318:	d1ee      	bne.n	212f8 <nrf_realloc+0x8c>
   2131a:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
   2131e:	f8dd a00c 	ldr.w	sl, [sp, #12]
   21322:	d0b3      	beq.n	2128c <nrf_realloc+0x20>
   21324:	45e6      	cmp	lr, ip
   21326:	d334      	bcc.n	21392 <nrf_realloc+0x126>
   21328:	2200      	movs	r2, #0
   2132a:	f108 0304 	add.w	r3, r8, #4
   2132e:	e006      	b.n	2133e <nrf_realloc+0xd2>
   21330:	f8b3 c002 	ldrh.w	ip, [r3, #2]
   21334:	4698      	mov	r8, r3
   21336:	45f4      	cmp	ip, lr
   21338:	f103 0304 	add.w	r3, r3, #4
   2133c:	d829      	bhi.n	21392 <nrf_realloc+0x126>
   2133e:	3201      	adds	r2, #1
   21340:	42ba      	cmp	r2, r7
   21342:	ebae 0e0c 	sub.w	lr, lr, ip
   21346:	d1f3      	bne.n	21330 <nrf_realloc+0xc4>
   21348:	2300      	movs	r3, #0
   2134a:	9a02      	ldr	r2, [sp, #8]
   2134c:	429a      	cmp	r2, r3
   2134e:	d923      	bls.n	21398 <nrf_realloc+0x12c>
   21350:	4610      	mov	r0, r2
   21352:	f7ff fd07 	bl	20d64 <mem_alloc.constprop.4>
   21356:	4604      	mov	r4, r0
   21358:	2800      	cmp	r0, #0
   2135a:	d097      	beq.n	2128c <nrf_realloc+0x20>
   2135c:	e9dd 1501 	ldrd	r1, r5, [sp, #4]
   21360:	462a      	mov	r2, r5
   21362:	f7eb fbf3 	bl	cb4c <memcpy>
   21366:	462b      	mov	r3, r5
   21368:	2201      	movs	r2, #1
   2136a:	3303      	adds	r3, #3
   2136c:	4915      	ldr	r1, [pc, #84]	; (213c4 <nrf_realloc+0x158>)
   2136e:	4423      	add	r3, r4
   21370:	f023 0303 	bic.w	r3, r3, #3
   21374:	ea4f 105b 	mov.w	r0, fp, lsr #5
   21378:	681e      	ldr	r6, [r3, #0]
   2137a:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
   2137e:	f00b 031f 	and.w	r3, fp, #31
   21382:	fa02 f303 	lsl.w	r3, r2, r3
   21386:	9605      	str	r6, [sp, #20]
   21388:	432b      	orrs	r3, r5
   2138a:	9a05      	ldr	r2, [sp, #20]
   2138c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   21390:	e782      	b.n	21298 <nrf_realloc+0x2c>
   21392:	f8b8 3000 	ldrh.w	r3, [r8]
   21396:	e7d8      	b.n	2134a <nrf_realloc+0xde>
   21398:	4615      	mov	r5, r2
   2139a:	b96a      	cbnz	r2, 213b8 <nrf_realloc+0x14c>
   2139c:	2301      	movs	r3, #1
   2139e:	4a09      	ldr	r2, [pc, #36]	; (213c4 <nrf_realloc+0x158>)
   213a0:	ea4f 115b 	mov.w	r1, fp, lsr #5
   213a4:	f00b 041f 	and.w	r4, fp, #31
   213a8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   213ac:	40a3      	lsls	r3, r4
   213ae:	4303      	orrs	r3, r0
   213b0:	462c      	mov	r4, r5
   213b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   213b6:	e76f      	b.n	21298 <nrf_realloc+0x2c>
   213b8:	9c01      	ldr	r4, [sp, #4]
   213ba:	e76d      	b.n	21298 <nrf_realloc+0x2c>
   213bc:	200262a0 	.word	0x200262a0
   213c0:	20021c8c 	.word	0x20021c8c
   213c4:	20021c0c 	.word	0x20021c0c
   213c8:	20021c50 	.word	0x20021c50

000213cc <nrf_shared_malloc>:
   213cc:	4b03      	ldr	r3, [pc, #12]	; (213dc <nrf_shared_malloc+0x10>)
   213ce:	781b      	ldrb	r3, [r3, #0]
   213d0:	b10b      	cbz	r3, 213d6 <nrf_shared_malloc+0xa>
   213d2:	f7ff bbe3 	b.w	20b9c <mem_alloc.constprop.5>
   213d6:	4618      	mov	r0, r3
   213d8:	4770      	bx	lr
   213da:	bf00      	nop
   213dc:	200262a0 	.word	0x200262a0

000213e0 <nrf_shared_free>:
   213e0:	4b04      	ldr	r3, [pc, #16]	; (213f4 <nrf_shared_free+0x14>)
   213e2:	781b      	ldrb	r3, [r3, #0]
   213e4:	b123      	cbz	r3, 213f0 <nrf_shared_free+0x10>
   213e6:	b118      	cbz	r0, 213f0 <nrf_shared_free+0x10>
   213e8:	4601      	mov	r1, r0
   213ea:	2001      	movs	r0, #1
   213ec:	f7ff bb6a 	b.w	20ac4 <mem_free>
   213f0:	4770      	bx	lr
   213f2:	bf00      	nop
   213f4:	200262a0 	.word	0x200262a0

000213f8 <rpc_dfu_event_handler>:
   213f8:	b508      	push	{r3, lr}
   213fa:	4a08      	ldr	r2, [pc, #32]	; (2141c <rpc_dfu_event_handler+0x24>)
   213fc:	68c1      	ldr	r1, [r0, #12]
   213fe:	8812      	ldrh	r2, [r2, #0]
   21400:	4603      	mov	r3, r0
   21402:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   21406:	d005      	beq.n	21414 <rpc_dfu_event_handler+0x1c>
   21408:	6800      	ldr	r0, [r0, #0]
   2140a:	b110      	cbz	r0, 21412 <rpc_dfu_event_handler+0x1a>
   2140c:	f7fd f96a 	bl	1e6e4 <rpc_dfu_client_data_free>
   21410:	2000      	movs	r0, #0
   21412:	bd08      	pop	{r3, pc}
   21414:	4a02      	ldr	r2, [pc, #8]	; (21420 <rpc_dfu_event_handler+0x28>)
   21416:	2001      	movs	r0, #1
   21418:	6013      	str	r3, [r2, #0]
   2141a:	bd08      	pop	{r3, pc}
   2141c:	200242cc 	.word	0x200242cc
   21420:	20021da8 	.word	0x20021da8

00021424 <mfu_interface_init>:
   21424:	2300      	movs	r3, #0
   21426:	b510      	push	{r4, lr}
   21428:	4808      	ldr	r0, [pc, #32]	; (2144c <mfu_interface_init+0x28>)
   2142a:	4909      	ldr	r1, [pc, #36]	; (21450 <mfu_interface_init+0x2c>)
   2142c:	4a09      	ldr	r2, [pc, #36]	; (21454 <mfu_interface_init+0x30>)
   2142e:	4c0a      	ldr	r4, [pc, #40]	; (21458 <mfu_interface_init+0x34>)
   21430:	8003      	strh	r3, [r0, #0]
   21432:	600b      	str	r3, [r1, #0]
   21434:	6013      	str	r3, [r2, #0]
   21436:	6023      	str	r3, [r4, #0]
   21438:	f7fd f91e 	bl	1e678 <rpc_dfu_client_init>
   2143c:	b910      	cbnz	r0, 21444 <mfu_interface_init+0x20>
   2143e:	2301      	movs	r3, #1
   21440:	6023      	str	r3, [r4, #0]
   21442:	bd10      	pop	{r4, pc}
   21444:	f04f 30ff 	mov.w	r0, #4294967295
   21448:	bd10      	pop	{r4, pc}
   2144a:	bf00      	nop
   2144c:	200242cc 	.word	0x200242cc
   21450:	20021da8 	.word	0x20021da8
   21454:	20021da4 	.word	0x20021da4
   21458:	20021d9c 	.word	0x20021d9c

0002145c <mfu_interface_open>:
   2145c:	b508      	push	{r3, lr}
   2145e:	4b07      	ldr	r3, [pc, #28]	; (2147c <mfu_interface_open+0x20>)
   21460:	681a      	ldr	r2, [r3, #0]
   21462:	2a01      	cmp	r2, #1
   21464:	d103      	bne.n	2146e <mfu_interface_open+0x12>
   21466:	2202      	movs	r2, #2
   21468:	601a      	str	r2, [r3, #0]
   2146a:	4805      	ldr	r0, [pc, #20]	; (21480 <mfu_interface_open+0x24>)
   2146c:	bd08      	pop	{r3, pc}
   2146e:	2001      	movs	r0, #1
   21470:	f7f5 fb4c 	bl	16b0c <bsd_os_errno_set>
   21474:	f04f 30ff 	mov.w	r0, #4294967295
   21478:	bd08      	pop	{r3, pc}
   2147a:	bf00      	nop
   2147c:	20021d9c 	.word	0x20021d9c
   21480:	49765432 	.word	0x49765432

00021484 <mfu_interface_close>:
   21484:	b5f0      	push	{r4, r5, r6, r7, lr}
   21486:	4c32      	ldr	r4, [pc, #200]	; (21550 <mfu_interface_close+0xcc>)
   21488:	b083      	sub	sp, #12
   2148a:	6823      	ldr	r3, [r4, #0]
   2148c:	1e9a      	subs	r2, r3, #2
   2148e:	2a01      	cmp	r2, #1
   21490:	d857      	bhi.n	21542 <mfu_interface_close+0xbe>
   21492:	2b03      	cmp	r3, #3
   21494:	d004      	beq.n	214a0 <mfu_interface_close+0x1c>
   21496:	2301      	movs	r3, #1
   21498:	2000      	movs	r0, #0
   2149a:	6023      	str	r3, [r4, #0]
   2149c:	b003      	add	sp, #12
   2149e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   214a0:	2100      	movs	r1, #0
   214a2:	4668      	mov	r0, sp
   214a4:	f7fd f8ee 	bl	1e684 <rpc_dfu_client_request_alloc>
   214a8:	4603      	mov	r3, r0
   214aa:	2800      	cmp	r0, #0
   214ac:	d13d      	bne.n	2152a <mfu_interface_close+0xa6>
   214ae:	2104      	movs	r1, #4
   214b0:	4e28      	ldr	r6, [pc, #160]	; (21554 <mfu_interface_close+0xd0>)
   214b2:	9800      	ldr	r0, [sp, #0]
   214b4:	8832      	ldrh	r2, [r6, #0]
   214b6:	7201      	strb	r1, [r0, #8]
   214b8:	3201      	adds	r2, #1
   214ba:	b292      	uxth	r2, r2
   214bc:	0411      	lsls	r1, r2, #16
   214be:	f041 0106 	orr.w	r1, r1, #6
   214c2:	4d25      	ldr	r5, [pc, #148]	; (21558 <mfu_interface_close+0xd4>)
   214c4:	60c1      	str	r1, [r0, #12]
   214c6:	7103      	strb	r3, [r0, #4]
   214c8:	7143      	strb	r3, [r0, #5]
   214ca:	7183      	strb	r3, [r0, #6]
   214cc:	71c3      	strb	r3, [r0, #7]
   214ce:	7243      	strb	r3, [r0, #9]
   214d0:	7283      	strb	r3, [r0, #10]
   214d2:	72c3      	strb	r3, [r0, #11]
   214d4:	2106      	movs	r1, #6
   214d6:	8032      	strh	r2, [r6, #0]
   214d8:	602b      	str	r3, [r5, #0]
   214da:	f7fd f8e7 	bl	1e6ac <rpc_dfu_client_request_send>
   214de:	b9d8      	cbnz	r0, 21518 <mfu_interface_close+0x94>
   214e0:	f04f 33ff 	mov.w	r3, #4294967295
   214e4:	ae02      	add	r6, sp, #8
   214e6:	4627      	mov	r7, r4
   214e8:	f846 3d04 	str.w	r3, [r6, #-4]!
   214ec:	e004      	b.n	214f8 <mfu_interface_close+0x74>
   214ee:	4631      	mov	r1, r6
   214f0:	4638      	mov	r0, r7
   214f2:	f7f5 fa53 	bl	1699c <bsd_os_timedwait>
   214f6:	b9f0      	cbnz	r0, 21536 <mfu_interface_close+0xb2>
   214f8:	6828      	ldr	r0, [r5, #0]
   214fa:	2800      	cmp	r0, #0
   214fc:	d0f7      	beq.n	214ee <mfu_interface_close+0x6a>
   214fe:	6905      	ldr	r5, [r0, #16]
   21500:	f7fd f8e8 	bl	1e6d4 <rpc_dfu_client_message_free>
   21504:	2d00      	cmp	r5, #0
   21506:	d0c6      	beq.n	21496 <mfu_interface_close+0x12>
   21508:	4b14      	ldr	r3, [pc, #80]	; (2155c <mfu_interface_close+0xd8>)
   2150a:	2008      	movs	r0, #8
   2150c:	601d      	str	r5, [r3, #0]
   2150e:	f7f5 fafd 	bl	16b0c <bsd_os_errno_set>
   21512:	f04f 30ff 	mov.w	r0, #4294967295
   21516:	e7c1      	b.n	2149c <mfu_interface_close+0x18>
   21518:	9800      	ldr	r0, [sp, #0]
   2151a:	6803      	ldr	r3, [r0, #0]
   2151c:	b11b      	cbz	r3, 21526 <mfu_interface_close+0xa2>
   2151e:	4618      	mov	r0, r3
   21520:	f7fd f8e0 	bl	1e6e4 <rpc_dfu_client_data_free>
   21524:	9800      	ldr	r0, [sp, #0]
   21526:	f7fd f8d5 	bl	1e6d4 <rpc_dfu_client_message_free>
   2152a:	200c      	movs	r0, #12
   2152c:	f7f5 faee 	bl	16b0c <bsd_os_errno_set>
   21530:	f04f 30ff 	mov.w	r0, #4294967295
   21534:	e7b2      	b.n	2149c <mfu_interface_close+0x18>
   21536:	203c      	movs	r0, #60	; 0x3c
   21538:	f7f5 fae8 	bl	16b0c <bsd_os_errno_set>
   2153c:	f04f 30ff 	mov.w	r0, #4294967295
   21540:	e7ac      	b.n	2149c <mfu_interface_close+0x18>
   21542:	2001      	movs	r0, #1
   21544:	f7f5 fae2 	bl	16b0c <bsd_os_errno_set>
   21548:	f04f 30ff 	mov.w	r0, #4294967295
   2154c:	e7a6      	b.n	2149c <mfu_interface_close+0x18>
   2154e:	bf00      	nop
   21550:	20021d9c 	.word	0x20021d9c
   21554:	200242cc 	.word	0x200242cc
   21558:	20021da8 	.word	0x20021da8
   2155c:	20021da0 	.word	0x20021da0

00021560 <mfu_interface_sendto>:
   21560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21564:	4e64      	ldr	r6, [pc, #400]	; (216f8 <mfu_interface_sendto+0x198>)
   21566:	460f      	mov	r7, r1
   21568:	6831      	ldr	r1, [r6, #0]
   2156a:	4615      	mov	r5, r2
   2156c:	1e8a      	subs	r2, r1, #2
   2156e:	2a01      	cmp	r2, #1
   21570:	b082      	sub	sp, #8
   21572:	f200 80b4 	bhi.w	216de <mfu_interface_sendto+0x17e>
   21576:	2f00      	cmp	r7, #0
   21578:	f000 80a5 	beq.w	216c6 <mfu_interface_sendto+0x166>
   2157c:	2d00      	cmp	r5, #0
   2157e:	f000 80a2 	beq.w	216c6 <mfu_interface_sendto+0x166>
   21582:	2b00      	cmp	r3, #0
   21584:	f040 80b1 	bne.w	216ea <mfu_interface_sendto+0x18a>
   21588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2158a:	2b00      	cmp	r3, #0
   2158c:	f040 80a1 	bne.w	216d2 <mfu_interface_sendto+0x172>
   21590:	2902      	cmp	r1, #2
   21592:	d04f      	beq.n	21634 <mfu_interface_sendto+0xd4>
   21594:	46e8      	mov	r8, sp
   21596:	4640      	mov	r0, r8
   21598:	4629      	mov	r1, r5
   2159a:	f7fd f873 	bl	1e684 <rpc_dfu_client_request_alloc>
   2159e:	4606      	mov	r6, r0
   215a0:	b140      	cbz	r0, 215b4 <mfu_interface_sendto+0x54>
   215a2:	200c      	movs	r0, #12
   215a4:	f7f5 fab2 	bl	16b0c <bsd_os_errno_set>
   215a8:	f04f 35ff 	mov.w	r5, #4294967295
   215ac:	4628      	mov	r0, r5
   215ae:	b002      	add	sp, #8
   215b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   215b4:	9b00      	ldr	r3, [sp, #0]
   215b6:	4639      	mov	r1, r7
   215b8:	6818      	ldr	r0, [r3, #0]
   215ba:	462a      	mov	r2, r5
   215bc:	f7eb fac6 	bl	cb4c <memcpy>
   215c0:	2104      	movs	r1, #4
   215c2:	4c4e      	ldr	r4, [pc, #312]	; (216fc <mfu_interface_sendto+0x19c>)
   215c4:	9800      	ldr	r0, [sp, #0]
   215c6:	8823      	ldrh	r3, [r4, #0]
   215c8:	6045      	str	r5, [r0, #4]
   215ca:	3301      	adds	r3, #1
   215cc:	b29b      	uxth	r3, r3
   215ce:	041a      	lsls	r2, r3, #16
   215d0:	8023      	strh	r3, [r4, #0]
   215d2:	430a      	orrs	r2, r1
   215d4:	4c4a      	ldr	r4, [pc, #296]	; (21700 <mfu_interface_sendto+0x1a0>)
   215d6:	60c2      	str	r2, [r0, #12]
   215d8:	7246      	strb	r6, [r0, #9]
   215da:	7286      	strb	r6, [r0, #10]
   215dc:	72c6      	strb	r6, [r0, #11]
   215de:	7201      	strb	r1, [r0, #8]
   215e0:	6026      	str	r6, [r4, #0]
   215e2:	f7fd f863 	bl	1e6ac <rpc_dfu_client_request_send>
   215e6:	2800      	cmp	r0, #0
   215e8:	d163      	bne.n	216b2 <mfu_interface_sendto+0x152>
   215ea:	f04f 33ff 	mov.w	r3, #4294967295
   215ee:	ae02      	add	r6, sp, #8
   215f0:	4f41      	ldr	r7, [pc, #260]	; (216f8 <mfu_interface_sendto+0x198>)
   215f2:	f846 3d04 	str.w	r3, [r6, #-4]!
   215f6:	e004      	b.n	21602 <mfu_interface_sendto+0xa2>
   215f8:	4631      	mov	r1, r6
   215fa:	4638      	mov	r0, r7
   215fc:	f7f5 f9ce 	bl	1699c <bsd_os_timedwait>
   21600:	b978      	cbnz	r0, 21622 <mfu_interface_sendto+0xc2>
   21602:	6820      	ldr	r0, [r4, #0]
   21604:	2800      	cmp	r0, #0
   21606:	d0f7      	beq.n	215f8 <mfu_interface_sendto+0x98>
   21608:	6904      	ldr	r4, [r0, #16]
   2160a:	f7fd f863 	bl	1e6d4 <rpc_dfu_client_message_free>
   2160e:	2c00      	cmp	r4, #0
   21610:	d0cc      	beq.n	215ac <mfu_interface_sendto+0x4c>
   21612:	4b3c      	ldr	r3, [pc, #240]	; (21704 <mfu_interface_sendto+0x1a4>)
   21614:	2008      	movs	r0, #8
   21616:	601c      	str	r4, [r3, #0]
   21618:	f04f 35ff 	mov.w	r5, #4294967295
   2161c:	f7f5 fa76 	bl	16b0c <bsd_os_errno_set>
   21620:	e7c4      	b.n	215ac <mfu_interface_sendto+0x4c>
   21622:	f04f 35ff 	mov.w	r5, #4294967295
   21626:	203c      	movs	r0, #60	; 0x3c
   21628:	f7f5 fa70 	bl	16b0c <bsd_os_errno_set>
   2162c:	4628      	mov	r0, r5
   2162e:	b002      	add	sp, #8
   21630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21634:	46e8      	mov	r8, sp
   21636:	4619      	mov	r1, r3
   21638:	4640      	mov	r0, r8
   2163a:	f7fd f823 	bl	1e684 <rpc_dfu_client_request_alloc>
   2163e:	4602      	mov	r2, r0
   21640:	2800      	cmp	r0, #0
   21642:	d1ae      	bne.n	215a2 <mfu_interface_sendto+0x42>
   21644:	f04f 0c08 	mov.w	ip, #8
   21648:	492c      	ldr	r1, [pc, #176]	; (216fc <mfu_interface_sendto+0x19c>)
   2164a:	482f      	ldr	r0, [pc, #188]	; (21708 <mfu_interface_sendto+0x1a8>)
   2164c:	880b      	ldrh	r3, [r1, #0]
   2164e:	6804      	ldr	r4, [r0, #0]
   21650:	3301      	adds	r3, #1
   21652:	9800      	ldr	r0, [sp, #0]
   21654:	b29b      	uxth	r3, r3
   21656:	800b      	strh	r3, [r1, #0]
   21658:	041b      	lsls	r3, r3, #16
   2165a:	f043 0303 	orr.w	r3, r3, #3
   2165e:	6104      	str	r4, [r0, #16]
   21660:	4c27      	ldr	r4, [pc, #156]	; (21700 <mfu_interface_sendto+0x1a0>)
   21662:	60c3      	str	r3, [r0, #12]
   21664:	7102      	strb	r2, [r0, #4]
   21666:	7142      	strb	r2, [r0, #5]
   21668:	7182      	strb	r2, [r0, #6]
   2166a:	71c2      	strb	r2, [r0, #7]
   2166c:	7242      	strb	r2, [r0, #9]
   2166e:	7282      	strb	r2, [r0, #10]
   21670:	72c2      	strb	r2, [r0, #11]
   21672:	f880 c008 	strb.w	ip, [r0, #8]
   21676:	2103      	movs	r1, #3
   21678:	6022      	str	r2, [r4, #0]
   2167a:	f7fd f817 	bl	1e6ac <rpc_dfu_client_request_send>
   2167e:	b9c0      	cbnz	r0, 216b2 <mfu_interface_sendto+0x152>
   21680:	f04f 33ff 	mov.w	r3, #4294967295
   21684:	f10d 0908 	add.w	r9, sp, #8
   21688:	f849 3d04 	str.w	r3, [r9, #-4]!
   2168c:	46b2      	mov	sl, r6
   2168e:	e005      	b.n	2169c <mfu_interface_sendto+0x13c>
   21690:	4649      	mov	r1, r9
   21692:	4650      	mov	r0, sl
   21694:	f7f5 f982 	bl	1699c <bsd_os_timedwait>
   21698:	2800      	cmp	r0, #0
   2169a:	d1c2      	bne.n	21622 <mfu_interface_sendto+0xc2>
   2169c:	6820      	ldr	r0, [r4, #0]
   2169e:	2800      	cmp	r0, #0
   216a0:	d0f6      	beq.n	21690 <mfu_interface_sendto+0x130>
   216a2:	6904      	ldr	r4, [r0, #16]
   216a4:	f7fd f816 	bl	1e6d4 <rpc_dfu_client_message_free>
   216a8:	2c00      	cmp	r4, #0
   216aa:	d1b2      	bne.n	21612 <mfu_interface_sendto+0xb2>
   216ac:	2303      	movs	r3, #3
   216ae:	6033      	str	r3, [r6, #0]
   216b0:	e771      	b.n	21596 <mfu_interface_sendto+0x36>
   216b2:	9800      	ldr	r0, [sp, #0]
   216b4:	6803      	ldr	r3, [r0, #0]
   216b6:	b11b      	cbz	r3, 216c0 <mfu_interface_sendto+0x160>
   216b8:	4618      	mov	r0, r3
   216ba:	f7fd f813 	bl	1e6e4 <rpc_dfu_client_data_free>
   216be:	9800      	ldr	r0, [sp, #0]
   216c0:	f7fd f808 	bl	1e6d4 <rpc_dfu_client_message_free>
   216c4:	e76d      	b.n	215a2 <mfu_interface_sendto+0x42>
   216c6:	2016      	movs	r0, #22
   216c8:	f7f5 fa20 	bl	16b0c <bsd_os_errno_set>
   216cc:	f04f 35ff 	mov.w	r5, #4294967295
   216d0:	e76c      	b.n	215ac <mfu_interface_sendto+0x4c>
   216d2:	2038      	movs	r0, #56	; 0x38
   216d4:	f7f5 fa1a 	bl	16b0c <bsd_os_errno_set>
   216d8:	f04f 35ff 	mov.w	r5, #4294967295
   216dc:	e766      	b.n	215ac <mfu_interface_sendto+0x4c>
   216de:	2001      	movs	r0, #1
   216e0:	f7f5 fa14 	bl	16b0c <bsd_os_errno_set>
   216e4:	f04f 35ff 	mov.w	r5, #4294967295
   216e8:	e760      	b.n	215ac <mfu_interface_sendto+0x4c>
   216ea:	202d      	movs	r0, #45	; 0x2d
   216ec:	f7f5 fa0e 	bl	16b0c <bsd_os_errno_set>
   216f0:	f04f 35ff 	mov.w	r5, #4294967295
   216f4:	e75a      	b.n	215ac <mfu_interface_sendto+0x4c>
   216f6:	bf00      	nop
   216f8:	20021d9c 	.word	0x20021d9c
   216fc:	200242cc 	.word	0x200242cc
   21700:	20021da8 	.word	0x20021da8
   21704:	20021da0 	.word	0x20021da0
   21708:	20021da4 	.word	0x20021da4

0002170c <mfu_interface_setopt>:
   2170c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2170e:	4846      	ldr	r0, [pc, #280]	; (21828 <mfu_interface_setopt+0x11c>)
   21710:	b083      	sub	sp, #12
   21712:	6800      	ldr	r0, [r0, #0]
   21714:	3802      	subs	r0, #2
   21716:	2801      	cmp	r0, #1
   21718:	d877      	bhi.n	2180a <mfu_interface_setopt+0xfe>
   2171a:	f240 2003 	movw	r0, #515	; 0x203
   2171e:	4281      	cmp	r1, r0
   21720:	d16d      	bne.n	217fe <mfu_interface_setopt+0xf2>
   21722:	3a04      	subs	r2, #4
   21724:	2a03      	cmp	r2, #3
   21726:	d85c      	bhi.n	217e2 <mfu_interface_setopt+0xd6>
   21728:	e8df f002 	tbb	[pc, r2]
   2172c:	514e024b 	.word	0x514e024b
   21730:	2407      	movs	r4, #7
   21732:	4625      	mov	r5, r4
   21734:	2100      	movs	r1, #0
   21736:	4668      	mov	r0, sp
   21738:	f7fc ffa4 	bl	1e684 <rpc_dfu_client_request_alloc>
   2173c:	4603      	mov	r3, r0
   2173e:	2800      	cmp	r0, #0
   21740:	d138      	bne.n	217b4 <mfu_interface_setopt+0xa8>
   21742:	2704      	movs	r7, #4
   21744:	4e39      	ldr	r6, [pc, #228]	; (2182c <mfu_interface_setopt+0x120>)
   21746:	9800      	ldr	r0, [sp, #0]
   21748:	8832      	ldrh	r2, [r6, #0]
   2174a:	4629      	mov	r1, r5
   2174c:	3201      	adds	r2, #1
   2174e:	b292      	uxth	r2, r2
   21750:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   21754:	4c36      	ldr	r4, [pc, #216]	; (21830 <mfu_interface_setopt+0x124>)
   21756:	60c5      	str	r5, [r0, #12]
   21758:	7103      	strb	r3, [r0, #4]
   2175a:	7143      	strb	r3, [r0, #5]
   2175c:	7183      	strb	r3, [r0, #6]
   2175e:	71c3      	strb	r3, [r0, #7]
   21760:	7243      	strb	r3, [r0, #9]
   21762:	7283      	strb	r3, [r0, #10]
   21764:	72c3      	strb	r3, [r0, #11]
   21766:	7207      	strb	r7, [r0, #8]
   21768:	8032      	strh	r2, [r6, #0]
   2176a:	6023      	str	r3, [r4, #0]
   2176c:	f7fc ff9e 	bl	1e6ac <rpc_dfu_client_request_send>
   21770:	b9b8      	cbnz	r0, 217a2 <mfu_interface_setopt+0x96>
   21772:	f04f 33ff 	mov.w	r3, #4294967295
   21776:	ad02      	add	r5, sp, #8
   21778:	4e2b      	ldr	r6, [pc, #172]	; (21828 <mfu_interface_setopt+0x11c>)
   2177a:	f845 3d04 	str.w	r3, [r5, #-4]!
   2177e:	e005      	b.n	2178c <mfu_interface_setopt+0x80>
   21780:	4629      	mov	r1, r5
   21782:	4630      	mov	r0, r6
   21784:	f7f5 f90a 	bl	1699c <bsd_os_timedwait>
   21788:	2800      	cmp	r0, #0
   2178a:	d131      	bne.n	217f0 <mfu_interface_setopt+0xe4>
   2178c:	6820      	ldr	r0, [r4, #0]
   2178e:	2800      	cmp	r0, #0
   21790:	d0f6      	beq.n	21780 <mfu_interface_setopt+0x74>
   21792:	6904      	ldr	r4, [r0, #16]
   21794:	f7fc ff9e 	bl	1e6d4 <rpc_dfu_client_message_free>
   21798:	2c00      	cmp	r4, #0
   2179a:	d13c      	bne.n	21816 <mfu_interface_setopt+0x10a>
   2179c:	4620      	mov	r0, r4
   2179e:	b003      	add	sp, #12
   217a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   217a2:	9800      	ldr	r0, [sp, #0]
   217a4:	6803      	ldr	r3, [r0, #0]
   217a6:	b11b      	cbz	r3, 217b0 <mfu_interface_setopt+0xa4>
   217a8:	4618      	mov	r0, r3
   217aa:	f7fc ff9b 	bl	1e6e4 <rpc_dfu_client_data_free>
   217ae:	9800      	ldr	r0, [sp, #0]
   217b0:	f7fc ff90 	bl	1e6d4 <rpc_dfu_client_message_free>
   217b4:	200c      	movs	r0, #12
   217b6:	f7f5 f9a9 	bl	16b0c <bsd_os_errno_set>
   217ba:	f04f 30ff 	mov.w	r0, #4294967295
   217be:	b003      	add	sp, #12
   217c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   217c2:	2405      	movs	r4, #5
   217c4:	4625      	mov	r5, r4
   217c6:	e7b5      	b.n	21734 <mfu_interface_setopt+0x28>
   217c8:	2408      	movs	r4, #8
   217ca:	4625      	mov	r5, r4
   217cc:	e7b2      	b.n	21734 <mfu_interface_setopt+0x28>
   217ce:	b1b3      	cbz	r3, 217fe <mfu_interface_setopt+0xf2>
   217d0:	9a08      	ldr	r2, [sp, #32]
   217d2:	2a04      	cmp	r2, #4
   217d4:	d113      	bne.n	217fe <mfu_interface_setopt+0xf2>
   217d6:	2000      	movs	r0, #0
   217d8:	681a      	ldr	r2, [r3, #0]
   217da:	4b16      	ldr	r3, [pc, #88]	; (21834 <mfu_interface_setopt+0x128>)
   217dc:	601a      	str	r2, [r3, #0]
   217de:	b003      	add	sp, #12
   217e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   217e2:	202a      	movs	r0, #42	; 0x2a
   217e4:	f7f5 f992 	bl	16b0c <bsd_os_errno_set>
   217e8:	f04f 30ff 	mov.w	r0, #4294967295
   217ec:	b003      	add	sp, #12
   217ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   217f0:	203c      	movs	r0, #60	; 0x3c
   217f2:	f7f5 f98b 	bl	16b0c <bsd_os_errno_set>
   217f6:	f04f 30ff 	mov.w	r0, #4294967295
   217fa:	b003      	add	sp, #12
   217fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   217fe:	2016      	movs	r0, #22
   21800:	f7f5 f984 	bl	16b0c <bsd_os_errno_set>
   21804:	f04f 30ff 	mov.w	r0, #4294967295
   21808:	e7c9      	b.n	2179e <mfu_interface_setopt+0x92>
   2180a:	2001      	movs	r0, #1
   2180c:	f7f5 f97e 	bl	16b0c <bsd_os_errno_set>
   21810:	f04f 30ff 	mov.w	r0, #4294967295
   21814:	e7c3      	b.n	2179e <mfu_interface_setopt+0x92>
   21816:	4b08      	ldr	r3, [pc, #32]	; (21838 <mfu_interface_setopt+0x12c>)
   21818:	2008      	movs	r0, #8
   2181a:	601c      	str	r4, [r3, #0]
   2181c:	f7f5 f976 	bl	16b0c <bsd_os_errno_set>
   21820:	f04f 30ff 	mov.w	r0, #4294967295
   21824:	e7bb      	b.n	2179e <mfu_interface_setopt+0x92>
   21826:	bf00      	nop
   21828:	20021d9c 	.word	0x20021d9c
   2182c:	200242cc 	.word	0x200242cc
   21830:	20021da8 	.word	0x20021da8
   21834:	20021da4 	.word	0x20021da4
   21838:	20021da0 	.word	0x20021da0

0002183c <mfu_interface_getopt>:
   2183c:	f240 2003 	movw	r0, #515	; 0x203
   21840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21844:	4281      	cmp	r1, r0
   21846:	b082      	sub	sp, #8
   21848:	9e08      	ldr	r6, [sp, #32]
   2184a:	f040 80ae 	bne.w	219aa <mfu_interface_getopt+0x16e>
   2184e:	461d      	mov	r5, r3
   21850:	2b00      	cmp	r3, #0
   21852:	f000 80aa 	beq.w	219aa <mfu_interface_getopt+0x16e>
   21856:	2e00      	cmp	r6, #0
   21858:	f000 80a7 	beq.w	219aa <mfu_interface_getopt+0x16e>
   2185c:	4b5e      	ldr	r3, [pc, #376]	; (219d8 <mfu_interface_getopt+0x19c>)
   2185e:	681b      	ldr	r3, [r3, #0]
   21860:	3b02      	subs	r3, #2
   21862:	2b01      	cmp	r3, #1
   21864:	f200 80a7 	bhi.w	219b6 <mfu_interface_getopt+0x17a>
   21868:	3a01      	subs	r2, #1
   2186a:	2a13      	cmp	r2, #19
   2186c:	d879      	bhi.n	21962 <mfu_interface_getopt+0x126>
   2186e:	e8df f002 	tbb	[pc, r2]
   21872:	5f17      	.short	0x5f17
   21874:	78787878 	.word	0x78787878
   21878:	78787872 	.word	0x78787872
   2187c:	78787878 	.word	0x78787878
   21880:	78787878 	.word	0x78787878
   21884:	0a78      	.short	0x0a78
   21886:	6833      	ldr	r3, [r6, #0]
   21888:	2b04      	cmp	r3, #4
   2188a:	f040 808e 	bne.w	219aa <mfu_interface_getopt+0x16e>
   2188e:	2200      	movs	r2, #0
   21890:	4610      	mov	r0, r2
   21892:	4b52      	ldr	r3, [pc, #328]	; (219dc <mfu_interface_getopt+0x1a0>)
   21894:	6819      	ldr	r1, [r3, #0]
   21896:	601a      	str	r2, [r3, #0]
   21898:	6029      	str	r1, [r5, #0]
   2189a:	b002      	add	sp, #8
   2189c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   218a0:	6833      	ldr	r3, [r6, #0]
   218a2:	2b24      	cmp	r3, #36	; 0x24
   218a4:	f040 8081 	bne.w	219aa <mfu_interface_getopt+0x16e>
   218a8:	2401      	movs	r4, #1
   218aa:	46a0      	mov	r8, r4
   218ac:	2100      	movs	r1, #0
   218ae:	4668      	mov	r0, sp
   218b0:	f7fc fee8 	bl	1e684 <rpc_dfu_client_request_alloc>
   218b4:	2800      	cmp	r0, #0
   218b6:	d146      	bne.n	21946 <mfu_interface_getopt+0x10a>
   218b8:	4949      	ldr	r1, [pc, #292]	; (219e0 <mfu_interface_getopt+0x1a4>)
   218ba:	9b00      	ldr	r3, [sp, #0]
   218bc:	880a      	ldrh	r2, [r1, #0]
   218be:	f1b8 0f03 	cmp.w	r8, #3
   218c2:	f102 0201 	add.w	r2, r2, #1
   218c6:	b292      	uxth	r2, r2
   218c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   218cc:	7118      	strb	r0, [r3, #4]
   218ce:	800a      	strh	r2, [r1, #0]
   218d0:	60dc      	str	r4, [r3, #12]
   218d2:	7158      	strb	r0, [r3, #5]
   218d4:	7198      	strb	r0, [r3, #6]
   218d6:	71d8      	strb	r0, [r3, #7]
   218d8:	d04b      	beq.n	21972 <mfu_interface_getopt+0x136>
   218da:	2104      	movs	r1, #4
   218dc:	2200      	movs	r2, #0
   218de:	4f41      	ldr	r7, [pc, #260]	; (219e4 <mfu_interface_getopt+0x1a8>)
   218e0:	6099      	str	r1, [r3, #8]
   218e2:	4618      	mov	r0, r3
   218e4:	4641      	mov	r1, r8
   218e6:	603a      	str	r2, [r7, #0]
   218e8:	f7fc fee0 	bl	1e6ac <rpc_dfu_client_request_send>
   218ec:	2800      	cmp	r0, #0
   218ee:	d14d      	bne.n	2198c <mfu_interface_getopt+0x150>
   218f0:	f04f 33ff 	mov.w	r3, #4294967295
   218f4:	ac02      	add	r4, sp, #8
   218f6:	f844 3d04 	str.w	r3, [r4, #-4]!
   218fa:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 219d8 <mfu_interface_getopt+0x19c>
   218fe:	e005      	b.n	2190c <mfu_interface_getopt+0xd0>
   21900:	4621      	mov	r1, r4
   21902:	4640      	mov	r0, r8
   21904:	f7f5 f84a 	bl	1699c <bsd_os_timedwait>
   21908:	2800      	cmp	r0, #0
   2190a:	d137      	bne.n	2197c <mfu_interface_getopt+0x140>
   2190c:	6839      	ldr	r1, [r7, #0]
   2190e:	2900      	cmp	r1, #0
   21910:	d0f6      	beq.n	21900 <mfu_interface_getopt+0xc4>
   21912:	690c      	ldr	r4, [r1, #16]
   21914:	2c00      	cmp	r4, #0
   21916:	d154      	bne.n	219c2 <mfu_interface_getopt+0x186>
   21918:	6832      	ldr	r2, [r6, #0]
   2191a:	3114      	adds	r1, #20
   2191c:	4628      	mov	r0, r5
   2191e:	f7eb f915 	bl	cb4c <memcpy>
   21922:	6838      	ldr	r0, [r7, #0]
   21924:	f7fc fed6 	bl	1e6d4 <rpc_dfu_client_message_free>
   21928:	4620      	mov	r0, r4
   2192a:	b002      	add	sp, #8
   2192c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21930:	6833      	ldr	r3, [r6, #0]
   21932:	2b04      	cmp	r3, #4
   21934:	d139      	bne.n	219aa <mfu_interface_getopt+0x16e>
   21936:	2402      	movs	r4, #2
   21938:	2100      	movs	r1, #0
   2193a:	4668      	mov	r0, sp
   2193c:	46a0      	mov	r8, r4
   2193e:	f7fc fea1 	bl	1e684 <rpc_dfu_client_request_alloc>
   21942:	2800      	cmp	r0, #0
   21944:	d0b8      	beq.n	218b8 <mfu_interface_getopt+0x7c>
   21946:	200c      	movs	r0, #12
   21948:	f7f5 f8e0 	bl	16b0c <bsd_os_errno_set>
   2194c:	f04f 30ff 	mov.w	r0, #4294967295
   21950:	b002      	add	sp, #8
   21952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21956:	6833      	ldr	r3, [r6, #0]
   21958:	2b04      	cmp	r3, #4
   2195a:	d126      	bne.n	219aa <mfu_interface_getopt+0x16e>
   2195c:	2409      	movs	r4, #9
   2195e:	46a0      	mov	r8, r4
   21960:	e7a4      	b.n	218ac <mfu_interface_getopt+0x70>
   21962:	202a      	movs	r0, #42	; 0x2a
   21964:	f7f5 f8d2 	bl	16b0c <bsd_os_errno_set>
   21968:	f04f 30ff 	mov.w	r0, #4294967295
   2196c:	b002      	add	sp, #8
   2196e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21972:	4a1d      	ldr	r2, [pc, #116]	; (219e8 <mfu_interface_getopt+0x1ac>)
   21974:	2108      	movs	r1, #8
   21976:	6812      	ldr	r2, [r2, #0]
   21978:	611a      	str	r2, [r3, #16]
   2197a:	e7af      	b.n	218dc <mfu_interface_getopt+0xa0>
   2197c:	203c      	movs	r0, #60	; 0x3c
   2197e:	f7f5 f8c5 	bl	16b0c <bsd_os_errno_set>
   21982:	f04f 30ff 	mov.w	r0, #4294967295
   21986:	b002      	add	sp, #8
   21988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2198c:	9800      	ldr	r0, [sp, #0]
   2198e:	6803      	ldr	r3, [r0, #0]
   21990:	b11b      	cbz	r3, 2199a <mfu_interface_getopt+0x15e>
   21992:	4618      	mov	r0, r3
   21994:	f7fc fea6 	bl	1e6e4 <rpc_dfu_client_data_free>
   21998:	9800      	ldr	r0, [sp, #0]
   2199a:	f7fc fe9b 	bl	1e6d4 <rpc_dfu_client_message_free>
   2199e:	200c      	movs	r0, #12
   219a0:	f7f5 f8b4 	bl	16b0c <bsd_os_errno_set>
   219a4:	f04f 30ff 	mov.w	r0, #4294967295
   219a8:	e7d2      	b.n	21950 <mfu_interface_getopt+0x114>
   219aa:	2016      	movs	r0, #22
   219ac:	f7f5 f8ae 	bl	16b0c <bsd_os_errno_set>
   219b0:	f04f 30ff 	mov.w	r0, #4294967295
   219b4:	e771      	b.n	2189a <mfu_interface_getopt+0x5e>
   219b6:	2001      	movs	r0, #1
   219b8:	f7f5 f8a8 	bl	16b0c <bsd_os_errno_set>
   219bc:	f04f 30ff 	mov.w	r0, #4294967295
   219c0:	e76b      	b.n	2189a <mfu_interface_getopt+0x5e>
   219c2:	4b06      	ldr	r3, [pc, #24]	; (219dc <mfu_interface_getopt+0x1a0>)
   219c4:	2008      	movs	r0, #8
   219c6:	601c      	str	r4, [r3, #0]
   219c8:	f7f5 f8a0 	bl	16b0c <bsd_os_errno_set>
   219cc:	6838      	ldr	r0, [r7, #0]
   219ce:	f7fc fe81 	bl	1e6d4 <rpc_dfu_client_message_free>
   219d2:	f04f 30ff 	mov.w	r0, #4294967295
   219d6:	e760      	b.n	2189a <mfu_interface_getopt+0x5e>
   219d8:	20021d9c 	.word	0x20021d9c
   219dc:	20021da0 	.word	0x20021da0
   219e0:	200242cc 	.word	0x200242cc
   219e4:	20021da8 	.word	0x20021da8
   219e8:	20021da4 	.word	0x20021da4

000219ec <interface_init>:
   219ec:	b508      	push	{r3, lr}
   219ee:	f44f 72b4 	mov.w	r2, #360	; 0x168
   219f2:	2100      	movs	r1, #0
   219f4:	4802      	ldr	r0, [pc, #8]	; (21a00 <interface_init+0x14>)
   219f6:	f004 fcff 	bl	263f8 <memset>
   219fa:	2000      	movs	r0, #0
   219fc:	bd08      	pop	{r3, pc}
   219fe:	bf00      	nop
   21a00:	200262a4 	.word	0x200262a4

00021a04 <interface_socket_allocate>:
   21a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21a06:	4b30      	ldr	r3, [pc, #192]	; (21ac8 <interface_socket_allocate+0xc4>)
   21a08:	4606      	mov	r6, r0
   21a0a:	681d      	ldr	r5, [r3, #0]
   21a0c:	4608      	mov	r0, r1
   21a0e:	b31d      	cbz	r5, 21a58 <interface_socket_allocate+0x54>
   21a10:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   21a12:	2c00      	cmp	r4, #0
   21a14:	d04a      	beq.n	21aac <interface_socket_allocate+0xa8>
   21a16:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   21a18:	2c00      	cmp	r4, #0
   21a1a:	d049      	beq.n	21ab0 <interface_socket_allocate+0xac>
   21a1c:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   21a1e:	2c00      	cmp	r4, #0
   21a20:	d048      	beq.n	21ab4 <interface_socket_allocate+0xb0>
   21a22:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   21a26:	2900      	cmp	r1, #0
   21a28:	d046      	beq.n	21ab8 <interface_socket_allocate+0xb4>
   21a2a:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   21a2e:	b191      	cbz	r1, 21a56 <interface_socket_allocate+0x52>
   21a30:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
   21a34:	2900      	cmp	r1, #0
   21a36:	d043      	beq.n	21ac0 <interface_socket_allocate+0xbc>
   21a38:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
   21a3c:	2900      	cmp	r1, #0
   21a3e:	d041      	beq.n	21ac4 <interface_socket_allocate+0xc0>
   21a40:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   21a44:	2900      	cmp	r1, #0
   21a46:	d039      	beq.n	21abc <interface_socket_allocate+0xb8>
   21a48:	f04f 35ff 	mov.w	r5, #4294967295
   21a4c:	2069      	movs	r0, #105	; 0x69
   21a4e:	f7f5 f85d 	bl	16b0c <bsd_os_errno_set>
   21a52:	4628      	mov	r0, r5
   21a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21a56:	2505      	movs	r5, #5
   21a58:	f04f 0c01 	mov.w	ip, #1
   21a5c:	f04f 37ff 	mov.w	r7, #4294967295
   21a60:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   21a64:	00e4      	lsls	r4, r4, #3
   21a66:	f843 c004 	str.w	ip, [r3, r4]
   21a6a:	441c      	add	r4, r3
   21a6c:	4611      	mov	r1, r2
   21a6e:	61a7      	str	r7, [r4, #24]
   21a70:	4622      	mov	r2, r4
   21a72:	f7fe feeb 	bl	2084c <packet_handler_create>
   21a76:	4603      	mov	r3, r0
   21a78:	61e0      	str	r0, [r4, #28]
   21a7a:	b158      	cbz	r0, 21a94 <interface_socket_allocate+0x90>
   21a7c:	681b      	ldr	r3, [r3, #0]
   21a7e:	681b      	ldr	r3, [r3, #0]
   21a80:	4798      	blx	r3
   21a82:	b910      	cbnz	r0, 21a8a <interface_socket_allocate+0x86>
   21a84:	6034      	str	r4, [r6, #0]
   21a86:	4628      	mov	r0, r5
   21a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21a8a:	69e0      	ldr	r0, [r4, #28]
   21a8c:	f7fe fefe 	bl	2088c <packet_handler_delete>
   21a90:	2300      	movs	r3, #0
   21a92:	61e3      	str	r3, [r4, #28]
   21a94:	f04f 35ff 	mov.w	r5, #4294967295
   21a98:	2228      	movs	r2, #40	; 0x28
   21a9a:	2100      	movs	r1, #0
   21a9c:	4620      	mov	r0, r4
   21a9e:	f004 fcab 	bl	263f8 <memset>
   21aa2:	200c      	movs	r0, #12
   21aa4:	f7f5 f832 	bl	16b0c <bsd_os_errno_set>
   21aa8:	4628      	mov	r0, r5
   21aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21aac:	2501      	movs	r5, #1
   21aae:	e7d3      	b.n	21a58 <interface_socket_allocate+0x54>
   21ab0:	2502      	movs	r5, #2
   21ab2:	e7d1      	b.n	21a58 <interface_socket_allocate+0x54>
   21ab4:	2503      	movs	r5, #3
   21ab6:	e7cf      	b.n	21a58 <interface_socket_allocate+0x54>
   21ab8:	2504      	movs	r5, #4
   21aba:	e7cd      	b.n	21a58 <interface_socket_allocate+0x54>
   21abc:	2508      	movs	r5, #8
   21abe:	e7cb      	b.n	21a58 <interface_socket_allocate+0x54>
   21ac0:	2506      	movs	r5, #6
   21ac2:	e7c9      	b.n	21a58 <interface_socket_allocate+0x54>
   21ac4:	2507      	movs	r5, #7
   21ac6:	e7c7      	b.n	21a58 <interface_socket_allocate+0x54>
   21ac8:	200262a4 	.word	0x200262a4

00021acc <interface_socket_free>:
   21acc:	2808      	cmp	r0, #8
   21ace:	d900      	bls.n	21ad2 <interface_socket_free+0x6>
   21ad0:	4770      	bx	lr
   21ad2:	b510      	push	{r4, lr}
   21ad4:	4c07      	ldr	r4, [pc, #28]	; (21af4 <interface_socket_free+0x28>)
   21ad6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21ada:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   21ade:	69e0      	ldr	r0, [r4, #28]
   21ae0:	b108      	cbz	r0, 21ae6 <interface_socket_free+0x1a>
   21ae2:	f7fe fed3 	bl	2088c <packet_handler_delete>
   21ae6:	4620      	mov	r0, r4
   21ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21aec:	2228      	movs	r2, #40	; 0x28
   21aee:	2100      	movs	r1, #0
   21af0:	f004 bc82 	b.w	263f8 <memset>
   21af4:	200262a4 	.word	0x200262a4

00021af8 <interface_socket_packet_handler_update>:
   21af8:	2808      	cmp	r0, #8
   21afa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21afe:	d81e      	bhi.n	21b3e <interface_socket_packet_handler_update+0x46>
   21b00:	ea4f 0880 	mov.w	r8, r0, lsl #2
   21b04:	4e17      	ldr	r6, [pc, #92]	; (21b64 <interface_socket_packet_handler_update+0x6c>)
   21b06:	eb08 0300 	add.w	r3, r8, r0
   21b0a:	00db      	lsls	r3, r3, #3
   21b0c:	58f4      	ldr	r4, [r6, r3]
   21b0e:	18f5      	adds	r5, r6, r3
   21b10:	b1ac      	cbz	r4, 21b3e <interface_socket_packet_handler_update+0x46>
   21b12:	460b      	mov	r3, r1
   21b14:	4604      	mov	r4, r0
   21b16:	4611      	mov	r1, r2
   21b18:	4618      	mov	r0, r3
   21b1a:	462a      	mov	r2, r5
   21b1c:	f8d5 901c 	ldr.w	r9, [r5, #28]
   21b20:	f7fe fe94 	bl	2084c <packet_handler_create>
   21b24:	61e8      	str	r0, [r5, #28]
   21b26:	b1d0      	cbz	r0, 21b5e <interface_socket_packet_handler_update+0x66>
   21b28:	6803      	ldr	r3, [r0, #0]
   21b2a:	681b      	ldr	r3, [r3, #0]
   21b2c:	4798      	blx	r3
   21b2e:	4607      	mov	r7, r0
   21b30:	b948      	cbnz	r0, 21b46 <interface_socket_packet_handler_update+0x4e>
   21b32:	4648      	mov	r0, r9
   21b34:	f7fe feaa 	bl	2088c <packet_handler_delete>
   21b38:	4638      	mov	r0, r7
   21b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21b3e:	2705      	movs	r7, #5
   21b40:	4638      	mov	r0, r7
   21b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21b46:	69e8      	ldr	r0, [r5, #28]
   21b48:	f7fe fea0 	bl	2088c <packet_handler_delete>
   21b4c:	eb08 0004 	add.w	r0, r8, r4
   21b50:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
   21b54:	f8c6 901c 	str.w	r9, [r6, #28]
   21b58:	4638      	mov	r0, r7
   21b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21b5e:	2704      	movs	r7, #4
   21b60:	e7f4      	b.n	21b4c <interface_socket_packet_handler_update+0x54>
   21b62:	bf00      	nop
   21b64:	200262a4 	.word	0x200262a4

00021b68 <interface_socket_wait>:
   21b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21b6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21b70:	4c0d      	ldr	r4, [pc, #52]	; (21ba8 <interface_socket_wait+0x40>)
   21b72:	00c0      	lsls	r0, r0, #3
   21b74:	5825      	ldr	r5, [r4, r0]
   21b76:	4404      	add	r4, r0
   21b78:	4015      	ands	r5, r2
   21b7a:	428d      	cmp	r5, r1
   21b7c:	d011      	beq.n	21ba2 <interface_socket_wait+0x3a>
   21b7e:	6860      	ldr	r0, [r4, #4]
   21b80:	b978      	cbnz	r0, 21ba2 <interface_socket_wait+0x3a>
   21b82:	4698      	mov	r8, r3
   21b84:	460f      	mov	r7, r1
   21b86:	4616      	mov	r6, r2
   21b88:	4625      	mov	r5, r4
   21b8a:	e006      	b.n	21b9a <interface_socket_wait+0x32>
   21b8c:	686b      	ldr	r3, [r5, #4]
   21b8e:	b943      	cbnz	r3, 21ba2 <interface_socket_wait+0x3a>
   21b90:	4641      	mov	r1, r8
   21b92:	4620      	mov	r0, r4
   21b94:	f7f4 ff02 	bl	1699c <bsd_os_timedwait>
   21b98:	b920      	cbnz	r0, 21ba4 <interface_socket_wait+0x3c>
   21b9a:	6828      	ldr	r0, [r5, #0]
   21b9c:	4030      	ands	r0, r6
   21b9e:	42b8      	cmp	r0, r7
   21ba0:	d1f4      	bne.n	21b8c <interface_socket_wait+0x24>
   21ba2:	2000      	movs	r0, #0
   21ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21ba8:	200262a4 	.word	0x200262a4

00021bac <interface_from_internal_id_search>:
   21bac:	4b27      	ldr	r3, [pc, #156]	; (21c4c <interface_from_internal_id_search+0xa0>)
   21bae:	681a      	ldr	r2, [r3, #0]
   21bb0:	b112      	cbz	r2, 21bb8 <interface_from_internal_id_search+0xc>
   21bb2:	699a      	ldr	r2, [r3, #24]
   21bb4:	4282      	cmp	r2, r0
   21bb6:	d039      	beq.n	21c2c <interface_from_internal_id_search+0x80>
   21bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   21bba:	b112      	cbz	r2, 21bc2 <interface_from_internal_id_search+0x16>
   21bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   21bbe:	4282      	cmp	r2, r0
   21bc0:	d036      	beq.n	21c30 <interface_from_internal_id_search+0x84>
   21bc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   21bc4:	b112      	cbz	r2, 21bcc <interface_from_internal_id_search+0x20>
   21bc6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   21bc8:	4282      	cmp	r2, r0
   21bca:	d033      	beq.n	21c34 <interface_from_internal_id_search+0x88>
   21bcc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   21bce:	b11a      	cbz	r2, 21bd8 <interface_from_internal_id_search+0x2c>
   21bd0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   21bd4:	4282      	cmp	r2, r0
   21bd6:	d02f      	beq.n	21c38 <interface_from_internal_id_search+0x8c>
   21bd8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   21bdc:	b11a      	cbz	r2, 21be6 <interface_from_internal_id_search+0x3a>
   21bde:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   21be2:	4282      	cmp	r2, r0
   21be4:	d02a      	beq.n	21c3c <interface_from_internal_id_search+0x90>
   21be6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   21bea:	b11a      	cbz	r2, 21bf4 <interface_from_internal_id_search+0x48>
   21bec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   21bf0:	4282      	cmp	r2, r0
   21bf2:	d025      	beq.n	21c40 <interface_from_internal_id_search+0x94>
   21bf4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   21bf8:	b11a      	cbz	r2, 21c02 <interface_from_internal_id_search+0x56>
   21bfa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   21bfe:	4282      	cmp	r2, r0
   21c00:	d020      	beq.n	21c44 <interface_from_internal_id_search+0x98>
   21c02:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   21c06:	b11a      	cbz	r2, 21c10 <interface_from_internal_id_search+0x64>
   21c08:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   21c0c:	4282      	cmp	r2, r0
   21c0e:	d01b      	beq.n	21c48 <interface_from_internal_id_search+0x9c>
   21c10:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   21c14:	b13a      	cbz	r2, 21c26 <interface_from_internal_id_search+0x7a>
   21c16:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   21c1a:	4283      	cmp	r3, r0
   21c1c:	bf14      	ite	ne
   21c1e:	f04f 30ff 	movne.w	r0, #4294967295
   21c22:	2008      	moveq	r0, #8
   21c24:	4770      	bx	lr
   21c26:	f04f 30ff 	mov.w	r0, #4294967295
   21c2a:	4770      	bx	lr
   21c2c:	2000      	movs	r0, #0
   21c2e:	4770      	bx	lr
   21c30:	2001      	movs	r0, #1
   21c32:	4770      	bx	lr
   21c34:	2002      	movs	r0, #2
   21c36:	4770      	bx	lr
   21c38:	2003      	movs	r0, #3
   21c3a:	4770      	bx	lr
   21c3c:	2004      	movs	r0, #4
   21c3e:	4770      	bx	lr
   21c40:	2005      	movs	r0, #5
   21c42:	4770      	bx	lr
   21c44:	2006      	movs	r0, #6
   21c46:	4770      	bx	lr
   21c48:	2007      	movs	r0, #7
   21c4a:	4770      	bx	lr
   21c4c:	200262a4 	.word	0x200262a4

00021c50 <interface_socket_from_handle_get>:
   21c50:	2808      	cmp	r0, #8
   21c52:	d807      	bhi.n	21c64 <interface_socket_from_handle_get+0x14>
   21c54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21c58:	4b03      	ldr	r3, [pc, #12]	; (21c68 <interface_socket_from_handle_get+0x18>)
   21c5a:	00c0      	lsls	r0, r0, #3
   21c5c:	581a      	ldr	r2, [r3, r0]
   21c5e:	b10a      	cbz	r2, 21c64 <interface_socket_from_handle_get+0x14>
   21c60:	4418      	add	r0, r3
   21c62:	4770      	bx	lr
   21c64:	2000      	movs	r0, #0
   21c66:	4770      	bx	lr
   21c68:	200262a4 	.word	0x200262a4

00021c6c <interface_socket_event_get>:
   21c6c:	b119      	cbz	r1, 21c76 <interface_socket_event_get+0xa>
   21c6e:	2808      	cmp	r0, #8
   21c70:	d902      	bls.n	21c78 <interface_socket_event_get+0xc>
   21c72:	2310      	movs	r3, #16
   21c74:	600b      	str	r3, [r1, #0]
   21c76:	4770      	bx	lr
   21c78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21c7c:	4b07      	ldr	r3, [pc, #28]	; (21c9c <interface_socket_event_get+0x30>)
   21c7e:	00c0      	lsls	r0, r0, #3
   21c80:	581a      	ldr	r2, [r3, r0]
   21c82:	2a00      	cmp	r2, #0
   21c84:	d0f5      	beq.n	21c72 <interface_socket_event_get+0x6>
   21c86:	581b      	ldr	r3, [r3, r0]
   21c88:	0c1b      	lsrs	r3, r3, #16
   21c8a:	f003 020a 	and.w	r2, r3, #10
   21c8e:	2a0a      	cmp	r2, #10
   21c90:	bf14      	ite	ne
   21c92:	f003 030f 	andne.w	r3, r3, #15
   21c96:	f003 030d 	andeq.w	r3, r3, #13
   21c9a:	e7eb      	b.n	21c74 <interface_socket_event_get+0x8>
   21c9c:	200262a4 	.word	0x200262a4

00021ca0 <interface_socket_setopt>:
   21ca0:	2808      	cmp	r0, #8
   21ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ca4:	d82c      	bhi.n	21d00 <interface_socket_setopt+0x60>
   21ca6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21caa:	4e1e      	ldr	r6, [pc, #120]	; (21d24 <interface_socket_setopt+0x84>)
   21cac:	00c0      	lsls	r0, r0, #3
   21cae:	5834      	ldr	r4, [r6, r0]
   21cb0:	b334      	cbz	r4, 21d00 <interface_socket_setopt+0x60>
   21cb2:	2901      	cmp	r1, #1
   21cb4:	d11e      	bne.n	21cf4 <interface_socket_setopt+0x54>
   21cb6:	f1a2 0114 	sub.w	r1, r2, #20
   21cba:	2901      	cmp	r1, #1
   21cbc:	d81a      	bhi.n	21cf4 <interface_socket_setopt+0x54>
   21cbe:	9906      	ldr	r1, [sp, #24]
   21cc0:	2908      	cmp	r1, #8
   21cc2:	d123      	bne.n	21d0c <interface_socket_setopt+0x6c>
   21cc4:	b313      	cbz	r3, 21d0c <interface_socket_setopt+0x6c>
   21cc6:	6859      	ldr	r1, [r3, #4]
   21cc8:	4c17      	ldr	r4, [pc, #92]	; (21d28 <interface_socket_setopt+0x88>)
   21cca:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   21cce:	fba4 4101 	umull	r4, r1, r4, r1
   21cd2:	0989      	lsrs	r1, r1, #6
   21cd4:	460c      	mov	r4, r1
   21cd6:	2500      	movs	r5, #0
   21cd8:	681b      	ldr	r3, [r3, #0]
   21cda:	fbe7 4503 	umlal	r4, r5, r7, r3
   21cde:	2d01      	cmp	r5, #1
   21ce0:	bf08      	it	eq
   21ce2:	2c00      	cmpeq	r4, #0
   21ce4:	d218      	bcs.n	21d18 <interface_socket_setopt+0x78>
   21ce6:	4430      	add	r0, r6
   21ce8:	2a14      	cmp	r2, #20
   21cea:	bf0c      	ite	eq
   21cec:	6204      	streq	r4, [r0, #32]
   21cee:	6244      	strne	r4, [r0, #36]	; 0x24
   21cf0:	2000      	movs	r0, #0
   21cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21cf4:	202a      	movs	r0, #42	; 0x2a
   21cf6:	f7f4 ff09 	bl	16b0c <bsd_os_errno_set>
   21cfa:	f04f 30ff 	mov.w	r0, #4294967295
   21cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d00:	2009      	movs	r0, #9
   21d02:	f7f4 ff03 	bl	16b0c <bsd_os_errno_set>
   21d06:	f04f 30ff 	mov.w	r0, #4294967295
   21d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d0c:	2016      	movs	r0, #22
   21d0e:	f7f4 fefd 	bl	16b0c <bsd_os_errno_set>
   21d12:	f04f 30ff 	mov.w	r0, #4294967295
   21d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d18:	2025      	movs	r0, #37	; 0x25
   21d1a:	f7f4 fef7 	bl	16b0c <bsd_os_errno_set>
   21d1e:	f04f 30ff 	mov.w	r0, #4294967295
   21d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d24:	200262a4 	.word	0x200262a4
   21d28:	10624dd3 	.word	0x10624dd3

00021d2c <interface_socket_getopt>:
   21d2c:	b570      	push	{r4, r5, r6, lr}
   21d2e:	2808      	cmp	r0, #8
   21d30:	9d04      	ldr	r5, [sp, #16]
   21d32:	d835      	bhi.n	21da0 <interface_socket_getopt+0x74>
   21d34:	4c20      	ldr	r4, [pc, #128]	; (21db8 <interface_socket_getopt+0x8c>)
   21d36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21d3a:	00c0      	lsls	r0, r0, #3
   21d3c:	5826      	ldr	r6, [r4, r0]
   21d3e:	4404      	add	r4, r0
   21d40:	b376      	cbz	r6, 21da0 <interface_socket_getopt+0x74>
   21d42:	2901      	cmp	r1, #1
   21d44:	d132      	bne.n	21dac <interface_socket_getopt+0x80>
   21d46:	b32b      	cbz	r3, 21d94 <interface_socket_getopt+0x68>
   21d48:	b325      	cbz	r5, 21d94 <interface_socket_getopt+0x68>
   21d4a:	2a04      	cmp	r2, #4
   21d4c:	d019      	beq.n	21d82 <interface_socket_getopt+0x56>
   21d4e:	f1a2 0114 	sub.w	r1, r2, #20
   21d52:	2901      	cmp	r1, #1
   21d54:	d82a      	bhi.n	21dac <interface_socket_getopt+0x80>
   21d56:	6829      	ldr	r1, [r5, #0]
   21d58:	2908      	cmp	r1, #8
   21d5a:	d11b      	bne.n	21d94 <interface_socket_getopt+0x68>
   21d5c:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   21d60:	2a14      	cmp	r2, #20
   21d62:	bf18      	it	ne
   21d64:	4601      	movne	r1, r0
   21d66:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   21d6a:	4a14      	ldr	r2, [pc, #80]	; (21dbc <interface_socket_getopt+0x90>)
   21d6c:	2000      	movs	r0, #0
   21d6e:	fba2 5201 	umull	r5, r2, r2, r1
   21d72:	0992      	lsrs	r2, r2, #6
   21d74:	fb04 1112 	mls	r1, r4, r2, r1
   21d78:	fb04 f101 	mul.w	r1, r4, r1
   21d7c:	e9c3 2100 	strd	r2, r1, [r3]
   21d80:	bd70      	pop	{r4, r5, r6, pc}
   21d82:	682a      	ldr	r2, [r5, #0]
   21d84:	2a04      	cmp	r2, #4
   21d86:	d105      	bne.n	21d94 <interface_socket_getopt+0x68>
   21d88:	2200      	movs	r2, #0
   21d8a:	6861      	ldr	r1, [r4, #4]
   21d8c:	4610      	mov	r0, r2
   21d8e:	6019      	str	r1, [r3, #0]
   21d90:	6062      	str	r2, [r4, #4]
   21d92:	bd70      	pop	{r4, r5, r6, pc}
   21d94:	2016      	movs	r0, #22
   21d96:	f7f4 feb9 	bl	16b0c <bsd_os_errno_set>
   21d9a:	f04f 30ff 	mov.w	r0, #4294967295
   21d9e:	bd70      	pop	{r4, r5, r6, pc}
   21da0:	2009      	movs	r0, #9
   21da2:	f7f4 feb3 	bl	16b0c <bsd_os_errno_set>
   21da6:	f04f 30ff 	mov.w	r0, #4294967295
   21daa:	bd70      	pop	{r4, r5, r6, pc}
   21dac:	202a      	movs	r0, #42	; 0x2a
   21dae:	f7f4 fead 	bl	16b0c <bsd_os_errno_set>
   21db2:	f04f 30ff 	mov.w	r0, #4294967295
   21db6:	bd70      	pop	{r4, r5, r6, pc}
   21db8:	200262a4 	.word	0x200262a4
   21dbc:	10624dd3 	.word	0x10624dd3

00021dc0 <interface_socket_fcntl>:
   21dc0:	2808      	cmp	r0, #8
   21dc2:	b510      	push	{r4, lr}
   21dc4:	d826      	bhi.n	21e14 <interface_socket_fcntl+0x54>
   21dc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21dca:	4c1b      	ldr	r4, [pc, #108]	; (21e38 <interface_socket_fcntl+0x78>)
   21dcc:	00c3      	lsls	r3, r0, #3
   21dce:	58e0      	ldr	r0, [r4, r3]
   21dd0:	b300      	cbz	r0, 21e14 <interface_socket_fcntl+0x54>
   21dd2:	2901      	cmp	r1, #1
   21dd4:	d005      	beq.n	21de2 <interface_socket_fcntl+0x22>
   21dd6:	2902      	cmp	r1, #2
   21dd8:	d122      	bne.n	21e20 <interface_socket_fcntl+0x60>
   21dda:	58e0      	ldr	r0, [r4, r3]
   21ddc:	f3c0 7000 	ubfx	r0, r0, #28, #1
   21de0:	bd10      	pop	{r4, pc}
   21de2:	07d2      	lsls	r2, r2, #31
   21de4:	d410      	bmi.n	21e08 <interface_socket_fcntl+0x48>
   21de6:	58e0      	ldr	r0, [r4, r3]
   21de8:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
   21dec:	d11e      	bne.n	21e2c <interface_socket_fcntl+0x6c>
   21dee:	58e2      	ldr	r2, [r4, r3]
   21df0:	b292      	uxth	r2, r2
   21df2:	2a0a      	cmp	r2, #10
   21df4:	d01a      	beq.n	21e2c <interface_socket_fcntl+0x6c>
   21df6:	58e2      	ldr	r2, [r4, r3]
   21df8:	b292      	uxth	r2, r2
   21dfa:	2a0b      	cmp	r2, #11
   21dfc:	d016      	beq.n	21e2c <interface_socket_fcntl+0x6c>
   21dfe:	58e2      	ldr	r2, [r4, r3]
   21e00:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   21e04:	50e2      	str	r2, [r4, r3]
   21e06:	bd10      	pop	{r4, pc}
   21e08:	58e2      	ldr	r2, [r4, r3]
   21e0a:	2000      	movs	r0, #0
   21e0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   21e10:	50e2      	str	r2, [r4, r3]
   21e12:	bd10      	pop	{r4, pc}
   21e14:	2009      	movs	r0, #9
   21e16:	f7f4 fe79 	bl	16b0c <bsd_os_errno_set>
   21e1a:	f04f 30ff 	mov.w	r0, #4294967295
   21e1e:	bd10      	pop	{r4, pc}
   21e20:	2016      	movs	r0, #22
   21e22:	f7f4 fe73 	bl	16b0c <bsd_os_errno_set>
   21e26:	f04f 30ff 	mov.w	r0, #4294967295
   21e2a:	bd10      	pop	{r4, pc}
   21e2c:	2023      	movs	r0, #35	; 0x23
   21e2e:	f7f4 fe6d 	bl	16b0c <bsd_os_errno_set>
   21e32:	f04f 30ff 	mov.w	r0, #4294967295
   21e36:	bd10      	pop	{r4, pc}
   21e38:	200262a4 	.word	0x200262a4

00021e3c <at_client_evt_handler>:
   21e3c:	b120      	cbz	r0, 21e48 <at_client_evt_handler+0xc>
   21e3e:	f850 1b08 	ldr.w	r1, [r0], #8
   21e42:	0c09      	lsrs	r1, r1, #16
   21e44:	f7fc be44 	b.w	1ead0 <rpc_at_event_handler>
   21e48:	4770      	bx	lr
   21e4a:	bf00      	nop

00021e4c <rpc_at_client_init>:
   21e4c:	4801      	ldr	r0, [pc, #4]	; (21e54 <rpc_at_client_init+0x8>)
   21e4e:	f7fb bbfb 	b.w	1d648 <rpc_client_register>
   21e52:	bf00      	nop
   21e54:	0002f8e4 	.word	0x0002f8e4

00021e58 <rpc_at_client_request_alloc>:
   21e58:	b180      	cbz	r0, 21e7c <rpc_at_client_request_alloc+0x24>
   21e5a:	2300      	movs	r3, #0
   21e5c:	b510      	push	{r4, lr}
   21e5e:	b082      	sub	sp, #8
   21e60:	aa02      	add	r2, sp, #8
   21e62:	4604      	mov	r4, r0
   21e64:	f842 3d04 	str.w	r3, [r2, #-4]!
   21e68:	2003      	movs	r0, #3
   21e6a:	f7fb fc67 	bl	1d73c <rpc_message_alloc>
   21e6e:	b918      	cbnz	r0, 21e78 <rpc_at_client_request_alloc+0x20>
   21e70:	9b01      	ldr	r3, [sp, #4]
   21e72:	b10b      	cbz	r3, 21e78 <rpc_at_client_request_alloc+0x20>
   21e74:	3308      	adds	r3, #8
   21e76:	6023      	str	r3, [r4, #0]
   21e78:	b002      	add	sp, #8
   21e7a:	bd10      	pop	{r4, pc}
   21e7c:	200e      	movs	r0, #14
   21e7e:	4770      	bx	lr

00021e80 <rpc_at_client_request_send>:
   21e80:	b150      	cbz	r0, 21e98 <rpc_at_client_request_send+0x18>
   21e82:	4603      	mov	r3, r0
   21e84:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   21e88:	2003      	movs	r0, #3
   21e8a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   21e8e:	f843 1d08 	str.w	r1, [r3, #-8]!
   21e92:	4619      	mov	r1, r3
   21e94:	f7fb bc42 	b.w	1d71c <rpc_message_send>
   21e98:	200e      	movs	r0, #14
   21e9a:	4770      	bx	lr

00021e9c <rpc_at_client_message_free>:
   21e9c:	b120      	cbz	r0, 21ea8 <rpc_at_client_message_free+0xc>
   21e9e:	f1a0 0108 	sub.w	r1, r0, #8
   21ea2:	2003      	movs	r0, #3
   21ea4:	f7fb bc76 	b.w	1d794 <rpc_message_free>
   21ea8:	200e      	movs	r0, #14
   21eaa:	4770      	bx	lr

00021eac <rpc_at_client_data_free>:
   21eac:	b118      	cbz	r0, 21eb6 <rpc_at_client_data_free+0xa>
   21eae:	4601      	mov	r1, r0
   21eb0:	2003      	movs	r0, #3
   21eb2:	f7fb bc7b 	b.w	1d7ac <rpc_message_data_free>
   21eb6:	200e      	movs	r0, #14
   21eb8:	4770      	bx	lr
   21eba:	bf00      	nop

00021ebc <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   21ebc:	4a07      	ldr	r2, [pc, #28]	; (21edc <SystemInit+0x20>)
   21ebe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   21ec2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   21ec6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   21eca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   21ece:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   21ed2:	4b03      	ldr	r3, [pc, #12]	; (21ee0 <SystemInit+0x24>)
   21ed4:	4a03      	ldr	r2, [pc, #12]	; (21ee4 <SystemInit+0x28>)
   21ed6:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   21ed8:	4770      	bx	lr
   21eda:	bf00      	nop
   21edc:	e000ed00 	.word	0xe000ed00
   21ee0:	200204c8 	.word	0x200204c8
   21ee4:	03d09000 	.word	0x03d09000

00021ee8 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
   21ee8:	b508      	push	{r3, lr}
    switch (domain)
   21eea:	b178      	cbz	r0, 21f0c <nrf_clock_is_running.constprop.0+0x24>
   21eec:	2801      	cmp	r0, #1
   21eee:	d019      	beq.n	21f24 <nrf_clock_is_running.constprop.0+0x3c>
            NRFX_ASSERT(0);
   21ef0:	f240 3342 	movw	r3, #834	; 0x342
   21ef4:	4a10      	ldr	r2, [pc, #64]	; (21f38 <nrf_clock_is_running.constprop.0+0x50>)
   21ef6:	4911      	ldr	r1, [pc, #68]	; (21f3c <nrf_clock_is_running.constprop.0+0x54>)
   21ef8:	4811      	ldr	r0, [pc, #68]	; (21f40 <nrf_clock_is_running.constprop.0+0x58>)
   21efa:	f00a fa9a 	bl	2c432 <printk>
   21efe:	480e      	ldr	r0, [pc, #56]	; (21f38 <nrf_clock_is_running.constprop.0+0x50>)
   21f00:	f240 3142 	movw	r1, #834	; 0x342
   21f04:	f00a fcb2 	bl	2c86c <assert_post_action>
            return false;
   21f08:	2000      	movs	r0, #0
   21f0a:	e00a      	b.n	21f22 <nrf_clock_is_running.constprop.0+0x3a>
            if (p_clk_src != NULL)
   21f0c:	4a0d      	ldr	r2, [pc, #52]	; (21f44 <nrf_clock_is_running.constprop.0+0x5c>)
   21f0e:	b121      	cbz	r1, 21f1a <nrf_clock_is_running.constprop.0+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   21f10:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   21f14:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   21f18:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   21f1a:	f8d2 0418 	ldr.w	r0, [r2, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   21f1e:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
   21f22:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
   21f24:	4a07      	ldr	r2, [pc, #28]	; (21f44 <nrf_clock_is_running.constprop.0+0x5c>)
   21f26:	b121      	cbz	r1, 21f32 <nrf_clock_is_running.constprop.0+0x4a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   21f28:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
   21f2c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   21f30:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   21f32:	f8d2 040c 	ldr.w	r0, [r2, #1036]	; 0x40c
   21f36:	e7f2      	b.n	21f1e <nrf_clock_is_running.constprop.0+0x36>
   21f38:	00032a91 	.word	0x00032a91
   21f3c:	00032fcf 	.word	0x00032fcf
   21f40:	00030166 	.word	0x00030166
   21f44:	40005000 	.word	0x40005000

00021f48 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   21f48:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   21f4a:	4604      	mov	r4, r0
   21f4c:	b948      	cbnz	r0, 21f62 <nrfx_clock_init+0x1a>
   21f4e:	490a      	ldr	r1, [pc, #40]	; (21f78 <nrfx_clock_init+0x30>)
   21f50:	480a      	ldr	r0, [pc, #40]	; (21f7c <nrfx_clock_init+0x34>)
   21f52:	23b3      	movs	r3, #179	; 0xb3
   21f54:	4a0a      	ldr	r2, [pc, #40]	; (21f80 <nrfx_clock_init+0x38>)
   21f56:	f00a fa6c 	bl	2c432 <printk>
   21f5a:	21b3      	movs	r1, #179	; 0xb3
   21f5c:	4808      	ldr	r0, [pc, #32]	; (21f80 <nrfx_clock_init+0x38>)
   21f5e:	f00a fc85 	bl	2c86c <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   21f62:	4b08      	ldr	r3, [pc, #32]	; (21f84 <nrfx_clock_init+0x3c>)
   21f64:	791a      	ldrb	r2, [r3, #4]
   21f66:	b922      	cbnz	r2, 21f72 <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   21f68:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   21f6a:	4807      	ldr	r0, [pc, #28]	; (21f88 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
   21f6c:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   21f6e:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   21f70:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   21f72:	4806      	ldr	r0, [pc, #24]	; (21f8c <nrfx_clock_init+0x44>)
    return err_code;
   21f74:	e7fc      	b.n	21f70 <nrfx_clock_init+0x28>
   21f76:	bf00      	nop
   21f78:	00032b02 	.word	0x00032b02
   21f7c:	00030166 	.word	0x00030166
   21f80:	00032ac5 	.word	0x00032ac5
   21f84:	20021dac 	.word	0x20021dac
   21f88:	0bad0000 	.word	0x0bad0000
   21f8c:	0bad000c 	.word	0x0bad000c

00021f90 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   21f90:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21f92:	4b0b      	ldr	r3, [pc, #44]	; (21fc0 <nrfx_clock_enable+0x30>)
   21f94:	791b      	ldrb	r3, [r3, #4]
   21f96:	b94b      	cbnz	r3, 21fac <nrfx_clock_enable+0x1c>
   21f98:	490a      	ldr	r1, [pc, #40]	; (21fc4 <nrfx_clock_enable+0x34>)
   21f9a:	480b      	ldr	r0, [pc, #44]	; (21fc8 <nrfx_clock_enable+0x38>)
   21f9c:	23cc      	movs	r3, #204	; 0xcc
   21f9e:	4a0b      	ldr	r2, [pc, #44]	; (21fcc <nrfx_clock_enable+0x3c>)
   21fa0:	f00a fa47 	bl	2c432 <printk>
   21fa4:	21cc      	movs	r1, #204	; 0xcc
   21fa6:	4809      	ldr	r0, [pc, #36]	; (21fcc <nrfx_clock_enable+0x3c>)
   21fa8:	f00a fc60 	bl	2c86c <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   21fac:	2005      	movs	r0, #5
   21fae:	f7f2 fb27 	bl	14600 <arch_irq_is_enabled>
   21fb2:	b920      	cbnz	r0, 21fbe <nrfx_clock_enable+0x2e>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   21fb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   21fb8:	2005      	movs	r0, #5
   21fba:	f7f2 bb11 	b.w	145e0 <arch_irq_enable>
   21fbe:	bd08      	pop	{r3, pc}
   21fc0:	20021dac 	.word	0x20021dac
   21fc4:	00032b10 	.word	0x00032b10
   21fc8:	00030166 	.word	0x00030166
   21fcc:	00032ac5 	.word	0x00032ac5

00021fd0 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21fd0:	4b22      	ldr	r3, [pc, #136]	; (2205c <nrfx_clock_start+0x8c>)
{
   21fd2:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21fd4:	791b      	ldrb	r3, [r3, #4]
{
   21fd6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21fd8:	b95b      	cbnz	r3, 21ff2 <nrfx_clock_start+0x22>
   21fda:	4921      	ldr	r1, [pc, #132]	; (22060 <nrfx_clock_start+0x90>)
   21fdc:	4821      	ldr	r0, [pc, #132]	; (22064 <nrfx_clock_start+0x94>)
   21fde:	f44f 7384 	mov.w	r3, #264	; 0x108
   21fe2:	4a21      	ldr	r2, [pc, #132]	; (22068 <nrfx_clock_start+0x98>)
   21fe4:	f00a fa25 	bl	2c432 <printk>
   21fe8:	f44f 7184 	mov.w	r1, #264	; 0x108
   21fec:	481e      	ldr	r0, [pc, #120]	; (22068 <nrfx_clock_start+0x98>)
   21fee:	f00a fc3d 	bl	2c86c <assert_post_action>
    switch (domain)
   21ff2:	b174      	cbz	r4, 22012 <nrfx_clock_start+0x42>
   21ff4:	2c01      	cmp	r4, #1
   21ff6:	d027      	beq.n	22048 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   21ff8:	f44f 739d 	mov.w	r3, #314	; 0x13a
   21ffc:	4a1a      	ldr	r2, [pc, #104]	; (22068 <nrfx_clock_start+0x98>)
   21ffe:	491b      	ldr	r1, [pc, #108]	; (2206c <nrfx_clock_start+0x9c>)
   22000:	4818      	ldr	r0, [pc, #96]	; (22064 <nrfx_clock_start+0x94>)
   22002:	f00a fa16 	bl	2c432 <printk>
   22006:	f44f 719d 	mov.w	r1, #314	; 0x13a
   2200a:	4817      	ldr	r0, [pc, #92]	; (22068 <nrfx_clock_start+0x98>)
   2200c:	f00a fc2e 	bl	2c86c <assert_post_action>
            break;
    }
}
   22010:	e016      	b.n	22040 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   22012:	4620      	mov	r0, r4
   22014:	f10d 0107 	add.w	r1, sp, #7
   22018:	f7ff ff66 	bl	21ee8 <nrf_clock_is_running.constprop.0>
   2201c:	4b14      	ldr	r3, [pc, #80]	; (22070 <nrfx_clock_start+0xa0>)
   2201e:	b188      	cbz	r0, 22044 <nrfx_clock_start+0x74>
   22020:	f89d 2007 	ldrb.w	r2, [sp, #7]
   22024:	2a02      	cmp	r2, #2
   22026:	d10d      	bne.n	22044 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
   22028:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2202c:	2200      	movs	r2, #0
   2202e:	4b11      	ldr	r3, [pc, #68]	; (22074 <nrfx_clock_start+0xa4>)
   22030:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   22032:	2202      	movs	r2, #2
   22034:	681b      	ldr	r3, [r3, #0]
   22036:	4b0e      	ldr	r3, [pc, #56]	; (22070 <nrfx_clock_start+0xa0>)
   22038:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2203c:	2201      	movs	r2, #1
   2203e:	609a      	str	r2, [r3, #8]
}
   22040:	b002      	add	sp, #8
   22042:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   22044:	2201      	movs	r2, #1
   22046:	e7ef      	b.n	22028 <nrfx_clock_start+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22048:	2200      	movs	r2, #0
   2204a:	4b0b      	ldr	r3, [pc, #44]	; (22078 <nrfx_clock_start+0xa8>)
   2204c:	601a      	str	r2, [r3, #0]
   2204e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   22050:	4b07      	ldr	r3, [pc, #28]	; (22070 <nrfx_clock_start+0xa0>)
   22052:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22056:	601c      	str	r4, [r3, #0]
}
   22058:	e7f2      	b.n	22040 <nrfx_clock_start+0x70>
   2205a:	bf00      	nop
   2205c:	20021dac 	.word	0x20021dac
   22060:	00032b10 	.word	0x00032b10
   22064:	00030166 	.word	0x00030166
   22068:	00032ac5 	.word	0x00032ac5
   2206c:	00032fcf 	.word	0x00032fcf
   22070:	40005000 	.word	0x40005000
   22074:	40005104 	.word	0x40005104
   22078:	40005100 	.word	0x40005100

0002207c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2207c:	4b2d      	ldr	r3, [pc, #180]	; (22134 <nrfx_clock_stop+0xb8>)
{
   2207e:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   22080:	791b      	ldrb	r3, [r3, #4]
{
   22082:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   22084:	b95b      	cbnz	r3, 2209e <nrfx_clock_stop+0x22>
   22086:	492c      	ldr	r1, [pc, #176]	; (22138 <nrfx_clock_stop+0xbc>)
   22088:	482c      	ldr	r0, [pc, #176]	; (2213c <nrfx_clock_stop+0xc0>)
   2208a:	f240 1341 	movw	r3, #321	; 0x141
   2208e:	4a2c      	ldr	r2, [pc, #176]	; (22140 <nrfx_clock_stop+0xc4>)
   22090:	f00a f9cf 	bl	2c432 <printk>
   22094:	f240 1141 	movw	r1, #321	; 0x141
   22098:	4829      	ldr	r0, [pc, #164]	; (22140 <nrfx_clock_stop+0xc4>)
   2209a:	f00a fbe7 	bl	2c86c <assert_post_action>
    switch (domain)
   2209e:	b17c      	cbz	r4, 220c0 <nrfx_clock_stop+0x44>
   220a0:	2c01      	cmp	r4, #1
   220a2:	d027      	beq.n	220f4 <nrfx_clock_stop+0x78>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   220a4:	4927      	ldr	r1, [pc, #156]	; (22144 <nrfx_clock_stop+0xc8>)
   220a6:	4825      	ldr	r0, [pc, #148]	; (2213c <nrfx_clock_stop+0xc0>)
   220a8:	f240 135d 	movw	r3, #349	; 0x15d
   220ac:	4a24      	ldr	r2, [pc, #144]	; (22140 <nrfx_clock_stop+0xc4>)
   220ae:	f00a f9c0 	bl	2c432 <printk>
   220b2:	f240 115d 	movw	r1, #349	; 0x15d
   220b6:	4822      	ldr	r0, [pc, #136]	; (22140 <nrfx_clock_stop+0xc4>)
   220b8:	f00a fbd8 	bl	2c86c <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   220bc:	b002      	add	sp, #8
   220be:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   220c0:	2202      	movs	r2, #2
   220c2:	4b21      	ldr	r3, [pc, #132]	; (22148 <nrfx_clock_stop+0xcc>)
   220c4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   220c8:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   220ca:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   220ce:	f242 7410 	movw	r4, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   220d2:	f503 7382 	add.w	r3, r3, #260	; 0x104
   220d6:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   220d8:	4b1c      	ldr	r3, [pc, #112]	; (2214c <nrfx_clock_stop+0xd0>)
   220da:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   220dc:	2100      	movs	r1, #0
   220de:	4608      	mov	r0, r1
   220e0:	f7ff ff02 	bl	21ee8 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   220e4:	2800      	cmp	r0, #0
   220e6:	d0e9      	beq.n	220bc <nrfx_clock_stop+0x40>
   220e8:	2001      	movs	r0, #1
   220ea:	f00c fc01 	bl	2e8f0 <nrfx_busy_wait>
   220ee:	3c01      	subs	r4, #1
   220f0:	d1f4      	bne.n	220dc <nrfx_clock_stop+0x60>
   220f2:	e7e3      	b.n	220bc <nrfx_clock_stop+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   220f4:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   220f6:	4b14      	ldr	r3, [pc, #80]	; (22148 <nrfx_clock_stop+0xcc>)
   220f8:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   220fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   22100:	f503 7380 	add.w	r3, r3, #256	; 0x100
   22104:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22106:	4b12      	ldr	r3, [pc, #72]	; (22150 <nrfx_clock_stop+0xd4>)
   22108:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   2210a:	f88d 4007 	strb.w	r4, [sp, #7]
   2210e:	f242 7410 	movw	r4, #10000	; 0x2710
   22112:	2001      	movs	r0, #1
   22114:	f10d 0107 	add.w	r1, sp, #7
   22118:	f7ff fee6 	bl	21ee8 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   2211c:	2800      	cmp	r0, #0
   2211e:	d0cd      	beq.n	220bc <nrfx_clock_stop+0x40>
   22120:	f89d 0007 	ldrb.w	r0, [sp, #7]
   22124:	2801      	cmp	r0, #1
   22126:	d1c9      	bne.n	220bc <nrfx_clock_stop+0x40>
   22128:	f00c fbe2 	bl	2e8f0 <nrfx_busy_wait>
   2212c:	3c01      	subs	r4, #1
   2212e:	d1f0      	bne.n	22112 <nrfx_clock_stop+0x96>
   22130:	e7c4      	b.n	220bc <nrfx_clock_stop+0x40>
   22132:	bf00      	nop
   22134:	20021dac 	.word	0x20021dac
   22138:	00032b10 	.word	0x00032b10
   2213c:	00030166 	.word	0x00030166
   22140:	00032ac5 	.word	0x00032ac5
   22144:	00032fcf 	.word	0x00032fcf
   22148:	40005000 	.word	0x40005000
   2214c:	4000500c 	.word	0x4000500c
   22150:	40005004 	.word	0x40005004

00022154 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   22154:	4b15      	ldr	r3, [pc, #84]	; (221ac <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   22156:	b507      	push	{r0, r1, r2, lr}
   22158:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   2215a:	b14a      	cbz	r2, 22170 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2215c:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   2215e:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22160:	6018      	str	r0, [r3, #0]
   22162:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   22164:	4b12      	ldr	r3, [pc, #72]	; (221b0 <nrfx_power_clock_irq_handler+0x5c>)
   22166:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   2216a:	4b12      	ldr	r3, [pc, #72]	; (221b4 <nrfx_power_clock_irq_handler+0x60>)
   2216c:	681b      	ldr	r3, [r3, #0]
   2216e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   22170:	4b11      	ldr	r3, [pc, #68]	; (221b8 <nrfx_power_clock_irq_handler+0x64>)
   22172:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   22174:	b17a      	cbz	r2, 22196 <nrfx_power_clock_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22176:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   22178:	f10d 0107 	add.w	r1, sp, #7
   2217c:	6018      	str	r0, [r3, #0]
   2217e:	681b      	ldr	r3, [r3, #0]
   22180:	f7ff feb2 	bl	21ee8 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   22184:	f89d 1007 	ldrb.w	r1, [sp, #7]
   22188:	2202      	movs	r2, #2
   2218a:	2901      	cmp	r1, #1
   2218c:	4b08      	ldr	r3, [pc, #32]	; (221b0 <nrfx_power_clock_irq_handler+0x5c>)
   2218e:	d105      	bne.n	2219c <nrfx_power_clock_irq_handler+0x48>
    p_reg->LFCLKSRC = (uint32_t)(source);
   22190:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22194:	6099      	str	r1, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   22196:	b003      	add	sp, #12
   22198:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
   2219c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   221a0:	4b04      	ldr	r3, [pc, #16]	; (221b4 <nrfx_power_clock_irq_handler+0x60>)
   221a2:	2001      	movs	r0, #1
   221a4:	681b      	ldr	r3, [r3, #0]
   221a6:	4798      	blx	r3
}
   221a8:	e7f5      	b.n	22196 <nrfx_power_clock_irq_handler+0x42>
   221aa:	bf00      	nop
   221ac:	40005100 	.word	0x40005100
   221b0:	40005000 	.word	0x40005000
   221b4:	20021dac 	.word	0x20021dac
   221b8:	40005104 	.word	0x40005104

000221bc <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   221bc:	6803      	ldr	r3, [r0, #0]
{
   221be:	b510      	push	{r4, lr}
    switch (port)
   221c0:	095a      	lsrs	r2, r3, #5
   221c2:	bf0c      	ite	eq
   221c4:	f04f 32ff 	moveq.w	r2, #4294967295
   221c8:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   221ca:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   221ce:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   221d2:	07db      	lsls	r3, r3, #31
{
   221d4:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   221d6:	d40b      	bmi.n	221f0 <nrf_gpio_pin_port_decode+0x34>
   221d8:	490f      	ldr	r1, [pc, #60]	; (22218 <nrf_gpio_pin_port_decode+0x5c>)
   221da:	4810      	ldr	r0, [pc, #64]	; (2221c <nrf_gpio_pin_port_decode+0x60>)
   221dc:	f240 231a 	movw	r3, #538	; 0x21a
   221e0:	4a0f      	ldr	r2, [pc, #60]	; (22220 <nrf_gpio_pin_port_decode+0x64>)
   221e2:	f00a f926 	bl	2c432 <printk>
   221e6:	f240 211a 	movw	r1, #538	; 0x21a
   221ea:	480d      	ldr	r0, [pc, #52]	; (22220 <nrf_gpio_pin_port_decode+0x64>)
   221ec:	f00a fb3e 	bl	2c86c <assert_post_action>
    uint32_t pin_number = *p_pin;
   221f0:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   221f2:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   221f6:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   221f8:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   221fa:	d00b      	beq.n	22214 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   221fc:	4909      	ldr	r1, [pc, #36]	; (22224 <nrf_gpio_pin_port_decode+0x68>)
   221fe:	4807      	ldr	r0, [pc, #28]	; (2221c <nrf_gpio_pin_port_decode+0x60>)
   22200:	f240 231f 	movw	r3, #543	; 0x21f
   22204:	4a06      	ldr	r2, [pc, #24]	; (22220 <nrf_gpio_pin_port_decode+0x64>)
   22206:	f00a f914 	bl	2c432 <printk>
   2220a:	f240 211f 	movw	r1, #543	; 0x21f
   2220e:	4804      	ldr	r0, [pc, #16]	; (22220 <nrf_gpio_pin_port_decode+0x64>)
   22210:	f00a fb2c 	bl	2c86c <assert_post_action>
}
   22214:	4804      	ldr	r0, [pc, #16]	; (22228 <nrf_gpio_pin_port_decode+0x6c>)
   22216:	bd10      	pop	{r4, pc}
   22218:	00031541 	.word	0x00031541
   2221c:	00030166 	.word	0x00030166
   22220:	0003150e 	.word	0x0003150e
   22224:	00032fcf 	.word	0x00032fcf
   22228:	40842500 	.word	0x40842500

0002222c <nrfx_uarte_init>:
}

nrfx_err_t nrfx_uarte_init(nrfx_uarte_t const *        p_instance,
                           nrfx_uarte_config_t const * p_config,
                           nrfx_uarte_event_handler_t  event_handler)
{
   2222c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   22230:	4605      	mov	r5, r0
   22232:	4690      	mov	r8, r2
    NRFX_ASSERT(p_config);
   22234:	460c      	mov	r4, r1
   22236:	b949      	cbnz	r1, 2224c <nrfx_uarte_init+0x20>
   22238:	4966      	ldr	r1, [pc, #408]	; (223d4 <nrfx_uarte_init+0x1a8>)
   2223a:	4867      	ldr	r0, [pc, #412]	; (223d8 <nrfx_uarte_init+0x1ac>)
   2223c:	23ef      	movs	r3, #239	; 0xef
   2223e:	4a67      	ldr	r2, [pc, #412]	; (223dc <nrfx_uarte_init+0x1b0>)
   22240:	f00a f8f7 	bl	2c432 <printk>
   22244:	21ef      	movs	r1, #239	; 0xef
   22246:	4865      	ldr	r0, [pc, #404]	; (223dc <nrfx_uarte_init+0x1b0>)
   22248:	f00a fb10 	bl	2c86c <assert_post_action>
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2224c:	2224      	movs	r2, #36	; 0x24
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2224e:	792e      	ldrb	r6, [r5, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   22250:	4f63      	ldr	r7, [pc, #396]	; (223e0 <nrfx_uarte_init+0x1b4>)
   22252:	fb02 7206 	mla	r2, r2, r6, r7
   22256:	f892 2020 	ldrb.w	r2, [r2, #32]
   2225a:	2a00      	cmp	r2, #0
   2225c:	f040 80b8 	bne.w	223d0 <nrfx_uarte_init+0x1a4>
    if (p_config->pseltxd != NRF_UARTE_PSEL_DISCONNECTED)
   22260:	6823      	ldr	r3, [r4, #0]
   22262:	1c5a      	adds	r2, r3, #1
   22264:	d011      	beq.n	2228a <nrfx_uarte_init+0x5e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22266:	a801      	add	r0, sp, #4
   22268:	9301      	str	r3, [sp, #4]
   2226a:	f7ff ffa7 	bl	221bc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2226e:	2301      	movs	r3, #1
   22270:	9a01      	ldr	r2, [sp, #4]
   22272:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   22274:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   22276:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22278:	a801      	add	r0, sp, #4
   2227a:	9301      	str	r3, [sp, #4]
   2227c:	f7ff ff9e 	bl	221bc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   22280:	2203      	movs	r2, #3
   22282:	9b01      	ldr	r3, [sp, #4]
   22284:	3380      	adds	r3, #128	; 0x80
   22286:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (p_config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED)
   2228a:	6863      	ldr	r3, [r4, #4]
   2228c:	1c58      	adds	r0, r3, #1
   2228e:	d008      	beq.n	222a2 <nrfx_uarte_init+0x76>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22290:	a801      	add	r0, sp, #4
   22292:	9301      	str	r3, [sp, #4]
   22294:	f7ff ff92 	bl	221bc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   22298:	2200      	movs	r2, #0
   2229a:	9b01      	ldr	r3, [sp, #4]
   2229c:	3380      	adds	r3, #128	; 0x80
   2229e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_uarte_baudrate_set(p_instance->p_reg, p_config->baudrate);
   222a2:	6963      	ldr	r3, [r4, #20]
   222a4:	682a      	ldr	r2, [r5, #0]
    p_reg->BAUDRATE = baudrate;
   222a6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   222aa:	7ee0      	ldrb	r0, [r4, #27]
   222ac:	7ea3      	ldrb	r3, [r4, #26]
   222ae:	7e61      	ldrb	r1, [r4, #25]
   222b0:	4303      	orrs	r3, r0
   222b2:	430b      	orrs	r3, r1
    if (p_config->hal_cfg.hwfc == NRF_UARTE_HWFC_ENABLED)
   222b4:	2901      	cmp	r1, #1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   222b6:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    nrf_uarte_txrx_pins_set(p_instance->p_reg, p_config->pseltxd, p_config->pselrxd);
   222ba:	e9d4 0300 	ldrd	r0, r3, [r4]
    p_reg->PSEL.TXD = pseltxd;
   222be:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   222c2:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
    if (p_config->hal_cfg.hwfc == NRF_UARTE_HWFC_ENABLED)
   222c6:	d127      	bne.n	22318 <nrfx_uarte_init+0xec>
        if (p_config->pselcts != NRF_UARTE_PSEL_DISCONNECTED)
   222c8:	68a3      	ldr	r3, [r4, #8]
   222ca:	1c59      	adds	r1, r3, #1
   222cc:	d008      	beq.n	222e0 <nrfx_uarte_init+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   222ce:	a801      	add	r0, sp, #4
   222d0:	9301      	str	r3, [sp, #4]
   222d2:	f7ff ff73 	bl	221bc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   222d6:	2200      	movs	r2, #0
   222d8:	9b01      	ldr	r3, [sp, #4]
   222da:	3380      	adds	r3, #128	; 0x80
   222dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->pselrts != NRF_UARTE_PSEL_DISCONNECTED)
   222e0:	68e3      	ldr	r3, [r4, #12]
   222e2:	1c5a      	adds	r2, r3, #1
   222e4:	d011      	beq.n	2230a <nrfx_uarte_init+0xde>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   222e6:	a801      	add	r0, sp, #4
   222e8:	9301      	str	r3, [sp, #4]
   222ea:	f7ff ff67 	bl	221bc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   222ee:	2301      	movs	r3, #1
   222f0:	9a01      	ldr	r2, [sp, #4]
   222f2:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   222f4:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   222f6:	68e3      	ldr	r3, [r4, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   222f8:	a801      	add	r0, sp, #4
   222fa:	9301      	str	r3, [sp, #4]
   222fc:	f7ff ff5e 	bl	221bc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   22300:	2203      	movs	r2, #3
   22302:	9b01      	ldr	r3, [sp, #4]
   22304:	3380      	adds	r3, #128	; 0x80
   22306:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        nrf_uarte_hwfc_pins_set(p_instance->p_reg, p_config->pselrts, p_config->pselcts);
   2230a:	682b      	ldr	r3, [r5, #0]
   2230c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
    p_reg->PSEL.RTS = pselrts;
   22310:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   22314:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        (volatile uint32_t *)(((uint32_t)p_instance->p_reg) + 0x564);
   22318:	682b      	ldr	r3, [r5, #0]
    if (*txenable_reg == 1)
   2231a:	f8d3 2568 	ldr.w	r2, [r3, #1384]	; 0x568
        (volatile uint32_t *)(((uint32_t)p_instance->p_reg) + 0x564);
   2231e:	f203 5a64 	addw	sl, r3, #1380	; 0x564
    if (*txenable_reg == 1)
   22322:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22324:	bf08      	it	eq
   22326:	60da      	streq	r2, [r3, #12]
    if (*rxenable_reg == 1)
   22328:	f8d3 2564 	ldr.w	r2, [r3, #1380]	; 0x564
   2232c:	2a01      	cmp	r2, #1
   2232e:	d116      	bne.n	2235e <nrfx_uarte_init+0x132>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   22330:	2108      	movs	r1, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22332:	f649 4940 	movw	r9, #40000	; 0x9c40
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   22336:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2233a:	605a      	str	r2, [r3, #4]
        NRFX_WAIT_FOR(*rxenable_reg == 0, 40000, 1, workaround_succeded);
   2233c:	f8da 3000 	ldr.w	r3, [sl]
   22340:	b12b      	cbz	r3, 2234e <nrfx_uarte_init+0x122>
   22342:	2001      	movs	r0, #1
   22344:	f00c fad4 	bl	2e8f0 <nrfx_busy_wait>
   22348:	f1b9 0901 	subs.w	r9, r9, #1
   2234c:	d1f6      	bne.n	2233c <nrfx_uarte_init+0x110>
        (void)nrf_uarte_errorsrc_get_and_clear(p_instance->p_reg);
   2234e:	682b      	ldr	r3, [r5, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   22350:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   22354:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   22358:	2200      	movs	r2, #0
   2235a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    apply_config(p_instance, p_config);

    apply_workaround_for_enable_anomaly(p_instance);

    p_cb->handler   = event_handler;
   2235e:	2324      	movs	r3, #36	; 0x24
   22360:	4373      	muls	r3, r6
   22362:	18fa      	adds	r2, r7, r3
   22364:	f8c2 8004 	str.w	r8, [r2, #4]
    p_cb->p_context = p_config->p_context;
   22368:	6922      	ldr	r2, [r4, #16]
   2236a:	50fa      	str	r2, [r7, r3]

    if (p_cb->handler)
   2236c:	f1b8 0f00 	cmp.w	r8, #0
   22370:	d01c      	beq.n	223ac <nrfx_uarte_init+0x180>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22372:	2200      	movs	r2, #0
    {
        interrupts_enable(p_instance, p_config->interrupt_priority);
   22374:	6828      	ldr	r0, [r5, #0]
   22376:	f8c0 2110 	str.w	r2, [r0, #272]	; 0x110
   2237a:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
   2237e:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
   22382:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
   22386:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
   2238a:	f8d0 1124 	ldr.w	r1, [r0, #292]	; 0x124
   2238e:	f8c0 2144 	str.w	r2, [r0, #324]	; 0x144
   22392:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
   22396:	f8c0 2158 	str.w	r2, [r0, #344]	; 0x158
   2239a:	f8d0 2158 	ldr.w	r2, [r0, #344]	; 0x158
    p_reg->INTENSET = mask;
   2239e:	4a11      	ldr	r2, [pc, #68]	; (223e4 <nrfx_uarte_init+0x1b8>)
   223a0:	f8c0 2304 	str.w	r2, [r0, #772]	; 0x304
    NRFX_IRQ_ENABLE(nrfx_get_irq_number((void *)p_instance->p_reg));
   223a4:	f340 3007 	sbfx	r0, r0, #12, #8
   223a8:	f7f2 f91a 	bl	145e0 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   223ac:	2208      	movs	r2, #8
    }

    nrf_uarte_enable(p_instance->p_reg);
   223ae:	682b      	ldr	r3, [r5, #0]
    p_cb->tx_buffer_length           = 0;
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   223b0:	480d      	ldr	r0, [pc, #52]	; (223e8 <nrfx_uarte_init+0x1bc>)
   223b2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->rx_buffer_length           = 0;
   223b6:	2324      	movs	r3, #36	; 0x24
   223b8:	2200      	movs	r2, #0
   223ba:	fb03 7306 	mla	r3, r3, r6, r7
    p_cb->rx_secondary_buffer_length = 0;
   223be:	e9c3 2206 	strd	r2, r2, [r3, #24]
    p_cb->tx_buffer_length           = 0;
   223c2:	615a      	str	r2, [r3, #20]
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
   223c4:	2201      	movs	r2, #1
   223c6:	f883 2020 	strb.w	r2, [r3, #32]
}
   223ca:	b002      	add	sp, #8
   223cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return err_code;
   223d0:	4806      	ldr	r0, [pc, #24]	; (223ec <nrfx_uarte_init+0x1c0>)
   223d2:	e7fa      	b.n	223ca <nrfx_uarte_init+0x19e>
   223d4:	00032b6b 	.word	0x00032b6b
   223d8:	00030166 	.word	0x00030166
   223dc:	00032b2e 	.word	0x00032b2e
   223e0:	20021db4 	.word	0x20021db4
   223e4:	00420310 	.word	0x00420310
   223e8:	0bad0000 	.word	0x0bad0000
   223ec:	0bad0005 	.word	0x0bad0005

000223f0 <nrfx_uarte_tx>:
}

nrfx_err_t nrfx_uarte_tx(nrfx_uarte_t const * p_instance,
                         uint8_t const *      p_data,
                         size_t               length)
{
   223f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   223f4:	2324      	movs	r3, #36	; 0x24
    uarte_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   223f6:	f890 8004 	ldrb.w	r8, [r0, #4]
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   223fa:	4d42      	ldr	r5, [pc, #264]	; (22504 <nrfx_uarte_tx+0x114>)
{
   223fc:	4607      	mov	r7, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   223fe:	fb03 5308 	mla	r3, r3, r8, r5
   22402:	f893 3020 	ldrb.w	r3, [r3, #32]
{
   22406:	460e      	mov	r6, r1
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   22408:	2b01      	cmp	r3, #1
{
   2240a:	4691      	mov	r9, r2
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2240c:	d00b      	beq.n	22426 <nrfx_uarte_tx+0x36>
   2240e:	493e      	ldr	r1, [pc, #248]	; (22508 <nrfx_uarte_tx+0x118>)
   22410:	483e      	ldr	r0, [pc, #248]	; (2250c <nrfx_uarte_tx+0x11c>)
   22412:	f240 1363 	movw	r3, #355	; 0x163
   22416:	4a3e      	ldr	r2, [pc, #248]	; (22510 <nrfx_uarte_tx+0x120>)
   22418:	f00a f80b 	bl	2c432 <printk>
   2241c:	f240 1163 	movw	r1, #355	; 0x163
   22420:	483b      	ldr	r0, [pc, #236]	; (22510 <nrfx_uarte_tx+0x120>)
   22422:	f00a fa23 	bl	2c86c <assert_post_action>
    NRFX_ASSERT(p_data);
   22426:	b95e      	cbnz	r6, 22440 <nrfx_uarte_tx+0x50>
   22428:	493a      	ldr	r1, [pc, #232]	; (22514 <nrfx_uarte_tx+0x124>)
   2242a:	4838      	ldr	r0, [pc, #224]	; (2250c <nrfx_uarte_tx+0x11c>)
   2242c:	f44f 73b2 	mov.w	r3, #356	; 0x164
   22430:	4a37      	ldr	r2, [pc, #220]	; (22510 <nrfx_uarte_tx+0x120>)
   22432:	f009 fffe 	bl	2c432 <printk>
   22436:	f44f 71b2 	mov.w	r1, #356	; 0x164
   2243a:	4835      	ldr	r0, [pc, #212]	; (22510 <nrfx_uarte_tx+0x120>)
   2243c:	f00a fa16 	bl	2c86c <assert_post_action>
    NRFX_ASSERT(length > 0);
   22440:	f1b9 0f00 	cmp.w	r9, #0
   22444:	d10b      	bne.n	2245e <nrfx_uarte_tx+0x6e>
   22446:	4934      	ldr	r1, [pc, #208]	; (22518 <nrfx_uarte_tx+0x128>)
   22448:	4830      	ldr	r0, [pc, #192]	; (2250c <nrfx_uarte_tx+0x11c>)
   2244a:	f240 1365 	movw	r3, #357	; 0x165
   2244e:	4a30      	ldr	r2, [pc, #192]	; (22510 <nrfx_uarte_tx+0x120>)
   22450:	f009 ffef 	bl	2c432 <printk>
   22454:	f240 1165 	movw	r1, #357	; 0x165
   22458:	482d      	ldr	r0, [pc, #180]	; (22510 <nrfx_uarte_tx+0x120>)
   2245a:	f00a fa07 	bl	2c86c <assert_post_action>
    NRFX_ASSERT(UARTE_LENGTH_VALIDATE(p_instance->drv_inst_idx, length));
   2245e:	793b      	ldrb	r3, [r7, #4]
   22460:	b913      	cbnz	r3, 22468 <nrfx_uarte_tx+0x78>
   22462:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   22466:	d30b      	bcc.n	22480 <nrfx_uarte_tx+0x90>
   22468:	492c      	ldr	r1, [pc, #176]	; (2251c <nrfx_uarte_tx+0x12c>)
   2246a:	4828      	ldr	r0, [pc, #160]	; (2250c <nrfx_uarte_tx+0x11c>)
   2246c:	f44f 73b3 	mov.w	r3, #358	; 0x166
   22470:	4a27      	ldr	r2, [pc, #156]	; (22510 <nrfx_uarte_tx+0x120>)
   22472:	f009 ffde 	bl	2c432 <printk>
   22476:	f44f 71b3 	mov.w	r1, #358	; 0x166
   2247a:	4825      	ldr	r0, [pc, #148]	; (22510 <nrfx_uarte_tx+0x120>)
   2247c:	f00a f9f6 	bl	2c86c <assert_post_action>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   22480:	f006 4360 	and.w	r3, r6, #3758096384	; 0xe0000000

    nrfx_err_t err_code;

    // EasyDMA requires that transfer buffers are placed in DataRAM,
    // signal error if the are not.
    if (!nrfx_is_in_ram(p_data))
   22484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   22488:	d136      	bne.n	224f8 <nrfx_uarte_tx+0x108>
    return err_code;
}

bool nrfx_uarte_tx_in_progress(nrfx_uarte_t const * p_instance)
{
    return (m_cb[p_instance->drv_inst_idx].tx_buffer_length != 0);
   2248a:	2424      	movs	r4, #36	; 0x24
   2248c:	793b      	ldrb	r3, [r7, #4]
   2248e:	fb04 5303 	mla	r3, r4, r3, r5
   22492:	695a      	ldr	r2, [r3, #20]
    if (nrfx_uarte_tx_in_progress(p_instance))
   22494:	2a00      	cmp	r2, #0
   22496:	d131      	bne.n	224fc <nrfx_uarte_tx+0x10c>
    p_cb->tx_buffer_length = length;
   22498:	fb04 5408 	mla	r4, r4, r8, r5
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ENDTX);
   2249c:	683b      	ldr	r3, [r7, #0]
    p_cb->tx_buffer_length = length;
   2249e:	f8c4 9014 	str.w	r9, [r4, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   224a2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   224a6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   224aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   224ae:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
    nrf_uarte_tx_buffer_set(p_instance->p_reg, p_cb->p_tx_buffer, p_cb->tx_buffer_length);
   224b2:	6962      	ldr	r2, [r4, #20]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   224b4:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   224b8:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   224bc:	2201      	movs	r2, #1
    p_cb->p_tx_buffer      = p_data;
   224be:	60a6      	str	r6, [r4, #8]
   224c0:	609a      	str	r2, [r3, #8]
    if (p_cb->handler == NULL)
   224c2:	6862      	ldr	r2, [r4, #4]
   224c4:	b9e2      	cbnz	r2, 22500 <nrfx_uarte_tx+0x110>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   224c6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   224ca:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
        while ((!endtx) && (!txstopped));
   224ce:	b919      	cbnz	r1, 224d8 <nrfx_uarte_tx+0xe8>
   224d0:	2a00      	cmp	r2, #0
   224d2:	d0f8      	beq.n	224c6 <nrfx_uarte_tx+0xd6>
            err_code = NRFX_ERROR_FORBIDDEN;
   224d4:	4812      	ldr	r0, [pc, #72]	; (22520 <nrfx_uarte_tx+0x130>)
   224d6:	e008      	b.n	224ea <nrfx_uarte_tx+0xfa>
        if (txstopped)
   224d8:	2a00      	cmp	r2, #0
   224da:	d1fb      	bne.n	224d4 <nrfx_uarte_tx+0xe4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   224dc:	2201      	movs	r2, #1
   224de:	60da      	str	r2, [r3, #12]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   224e0:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
            while (!nrf_uarte_event_check(p_instance->p_reg, NRF_UARTE_EVENT_TXSTOPPED))
   224e4:	2a00      	cmp	r2, #0
   224e6:	d0fb      	beq.n	224e0 <nrfx_uarte_tx+0xf0>
    err_code = NRFX_SUCCESS;
   224e8:	480e      	ldr	r0, [pc, #56]	; (22524 <nrfx_uarte_tx+0x134>)
        p_cb->tx_buffer_length = 0;
   224ea:	2324      	movs	r3, #36	; 0x24
   224ec:	fb03 5508 	mla	r5, r3, r8, r5
   224f0:	2300      	movs	r3, #0
   224f2:	616b      	str	r3, [r5, #20]
}
   224f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return err_code;
   224f8:	480b      	ldr	r0, [pc, #44]	; (22528 <nrfx_uarte_tx+0x138>)
   224fa:	e7fb      	b.n	224f4 <nrfx_uarte_tx+0x104>
        return err_code;
   224fc:	480b      	ldr	r0, [pc, #44]	; (2252c <nrfx_uarte_tx+0x13c>)
   224fe:	e7f9      	b.n	224f4 <nrfx_uarte_tx+0x104>
    err_code = NRFX_SUCCESS;
   22500:	4808      	ldr	r0, [pc, #32]	; (22524 <nrfx_uarte_tx+0x134>)
   22502:	e7f7      	b.n	224f4 <nrfx_uarte_tx+0x104>
   22504:	20021db4 	.word	0x20021db4
   22508:	00032b74 	.word	0x00032b74
   2250c:	00030166 	.word	0x00030166
   22510:	00032b2e 	.word	0x00032b2e
   22514:	00032b9e 	.word	0x00032b9e
   22518:	00032ba5 	.word	0x00032ba5
   2251c:	00032bb0 	.word	0x00032bb0
   22520:	0bad0008 	.word	0x0bad0008
   22524:	0bad0000 	.word	0x0bad0000
   22528:	0bad000a 	.word	0x0bad000a
   2252c:	0bad000b 	.word	0x0bad000b

00022530 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   22530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   22532:	4b10      	ldr	r3, [pc, #64]	; (22574 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   22534:	4f10      	ldr	r7, [pc, #64]	; (22578 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   22536:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   2253a:	3001      	adds	r0, #1
   2253c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   22540:	42ae      	cmp	r6, r5
   22542:	d800      	bhi.n	22546 <z_sys_init_run_level+0x16>
		}
	}
}
   22544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   22546:	e9d5 3400 	ldrd	r3, r4, [r5]
   2254a:	4620      	mov	r0, r4
   2254c:	4798      	blx	r3
   2254e:	b170      	cbz	r0, 2256e <z_sys_init_run_level+0x3e>
   22550:	b16c      	cbz	r4, 2256e <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   22552:	2301      	movs	r3, #1
				(dev - __device_start));
   22554:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   22556:	4a09      	ldr	r2, [pc, #36]	; (2257c <z_sys_init_run_level+0x4c>)
   22558:	1124      	asrs	r4, r4, #4
   2255a:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   2255c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   22560:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   22564:	fa03 f404 	lsl.w	r4, r3, r4
   22568:	4304      	orrs	r4, r0
   2256a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2256e:	3508      	adds	r5, #8
   22570:	e7e6      	b.n	22540 <z_sys_init_run_level+0x10>
   22572:	bf00      	nop
   22574:	0002f8f4 	.word	0x0002f8f4
   22578:	20020a60 	.word	0x20020a60
   2257c:	20020ae0 	.word	0x20020ae0

00022580 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   22580:	4b08      	ldr	r3, [pc, #32]	; (225a4 <z_device_ready+0x24>)
   22582:	1ac0      	subs	r0, r0, r3
   22584:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   22586:	4b08      	ldr	r3, [pc, #32]	; (225a8 <z_device_ready+0x28>)
   22588:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   2258a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   2258e:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   22590:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   22594:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   22598:	4210      	tst	r0, r2
}
   2259a:	bf0c      	ite	eq
   2259c:	4618      	moveq	r0, r3
   2259e:	2000      	movne	r0, #0
   225a0:	4770      	bx	lr
   225a2:	bf00      	nop
   225a4:	20020a60 	.word	0x20020a60
   225a8:	20020ae0 	.word	0x20020ae0

000225ac <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   225ac:	4911      	ldr	r1, [pc, #68]	; (225f4 <z_impl_device_get_binding+0x48>)
{
   225ae:	b570      	push	{r4, r5, r6, lr}
   225b0:	4605      	mov	r5, r0
   225b2:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   225b4:	4c10      	ldr	r4, [pc, #64]	; (225f8 <z_impl_device_get_binding+0x4c>)
   225b6:	428c      	cmp	r4, r1
   225b8:	d104      	bne.n	225c4 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   225ba:	4c0f      	ldr	r4, [pc, #60]	; (225f8 <z_impl_device_get_binding+0x4c>)
   225bc:	42b4      	cmp	r4, r6
   225be:	d10a      	bne.n	225d6 <z_impl_device_get_binding+0x2a>
	return NULL;
   225c0:	2400      	movs	r4, #0
   225c2:	e014      	b.n	225ee <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   225c4:	4620      	mov	r0, r4
   225c6:	f7ff ffdb 	bl	22580 <z_device_ready>
   225ca:	b110      	cbz	r0, 225d2 <z_impl_device_get_binding+0x26>
   225cc:	6823      	ldr	r3, [r4, #0]
   225ce:	42ab      	cmp	r3, r5
   225d0:	d00d      	beq.n	225ee <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   225d2:	3410      	adds	r4, #16
   225d4:	e7ef      	b.n	225b6 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   225d6:	4620      	mov	r0, r4
   225d8:	f7ff ffd2 	bl	22580 <z_device_ready>
   225dc:	b908      	cbnz	r0, 225e2 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   225de:	3410      	adds	r4, #16
   225e0:	e7ec      	b.n	225bc <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   225e2:	4628      	mov	r0, r5
   225e4:	6821      	ldr	r1, [r4, #0]
   225e6:	f7ea fb27 	bl	cc38 <strcmp>
   225ea:	2800      	cmp	r0, #0
   225ec:	d1f7      	bne.n	225de <z_impl_device_get_binding+0x32>
}
   225ee:	4620      	mov	r0, r4
   225f0:	bd70      	pop	{r4, r5, r6, pc}
   225f2:	bf00      	nop
   225f4:	20020ae0 	.word	0x20020ae0
   225f8:	20020a60 	.word	0x20020a60

000225fc <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   225fc:	4b01      	ldr	r3, [pc, #4]	; (22604 <z_impl_z_errno+0x8>)
   225fe:	6898      	ldr	r0, [r3, #8]
}
   22600:	3064      	adds	r0, #100	; 0x64
   22602:	4770      	bx	lr
   22604:	20021de0 	.word	0x20021de0

00022608 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   22608:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2260c:	4605      	mov	r5, r0
   2260e:	460f      	mov	r7, r1
	__asm__ volatile(
   22610:	f04f 0320 	mov.w	r3, #32
   22614:	f3ef 8811 	mrs	r8, BASEPRI
   22618:	f383 8811 	msr	BASEPRI, r3
   2261c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   22620:	f002 f94a 	bl	248b8 <z_impl_k_current_get>
   22624:	4c2a      	ldr	r4, [pc, #168]	; (226d0 <z_fatal_error+0xc8>)
   22626:	4b2b      	ldr	r3, [pc, #172]	; (226d4 <z_fatal_error+0xcc>)
   22628:	2d04      	cmp	r5, #4
   2262a:	eba4 0403 	sub.w	r4, r4, r3
   2262e:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   22632:	bf98      	it	ls
   22634:	4a28      	ldrls	r2, [pc, #160]	; (226d8 <z_fatal_error+0xd0>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   22636:	ea4f 1484 	mov.w	r4, r4, lsl #6
   2263a:	f044 0301 	orr.w	r3, r4, #1
   2263e:	4606      	mov	r6, r0
	switch (reason) {
   22640:	bf94      	ite	ls
   22642:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   22646:	4a25      	ldrhi	r2, [pc, #148]	; (226dc <z_fatal_error+0xd4>)
   22648:	f8ad 3000 	strh.w	r3, [sp]
   2264c:	4629      	mov	r1, r5
   2264e:	2300      	movs	r3, #0
   22650:	4823      	ldr	r0, [pc, #140]	; (226e0 <z_fatal_error+0xd8>)
   22652:	f00a f97a 	bl	2c94a <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   22656:	b147      	cbz	r7, 2266a <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   22658:	69fb      	ldr	r3, [r7, #28]
   2265a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2265e:	b123      	cbz	r3, 2266a <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   22660:	4820      	ldr	r0, [pc, #128]	; (226e4 <z_fatal_error+0xdc>)
   22662:	f044 0101 	orr.w	r1, r4, #1
   22666:	f00a f931 	bl	2c8cc <log_0>
	const char *thread_name = k_thread_name_get(thread);
   2266a:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2266c:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   22670:	f00c fa0b 	bl	2ea8a <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   22674:	b348      	cbz	r0, 226ca <z_fatal_error+0xc2>
   22676:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   22678:	4b1b      	ldr	r3, [pc, #108]	; (226e8 <z_fatal_error+0xe0>)
   2267a:	2a00      	cmp	r2, #0
   2267c:	bf08      	it	eq
   2267e:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   22680:	f7f0 fc70 	bl	12f64 <log_strdup>
   22684:	4623      	mov	r3, r4
   22686:	4602      	mov	r2, r0
   22688:	4631      	mov	r1, r6
   2268a:	4818      	ldr	r0, [pc, #96]	; (226ec <z_fatal_error+0xe4>)
   2268c:	f00a f944 	bl	2c918 <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   22690:	4639      	mov	r1, r7
   22692:	4628      	mov	r0, r5
   22694:	f7f6 feb8 	bl	19408 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   22698:	2d04      	cmp	r5, #4
   2269a:	d10c      	bne.n	226b6 <z_fatal_error+0xae>
   2269c:	4914      	ldr	r1, [pc, #80]	; (226f0 <z_fatal_error+0xe8>)
   2269e:	238e      	movs	r3, #142	; 0x8e
   226a0:	4a14      	ldr	r2, [pc, #80]	; (226f4 <z_fatal_error+0xec>)
   226a2:	4815      	ldr	r0, [pc, #84]	; (226f8 <z_fatal_error+0xf0>)
   226a4:	f009 fec5 	bl	2c432 <printk>
   226a8:	4814      	ldr	r0, [pc, #80]	; (226fc <z_fatal_error+0xf4>)
   226aa:	f009 fec2 	bl	2c432 <printk>
   226ae:	218e      	movs	r1, #142	; 0x8e
   226b0:	4810      	ldr	r0, [pc, #64]	; (226f4 <z_fatal_error+0xec>)
   226b2:	f00a f8db 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   226b6:	f388 8811 	msr	BASEPRI, r8
   226ba:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   226be:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   226c0:	b002      	add	sp, #8
   226c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   226c6:	f7f2 bbaf 	b.w	14e28 <z_impl_k_thread_abort>
		thread_name = "unknown";
   226ca:	4807      	ldr	r0, [pc, #28]	; (226e8 <z_fatal_error+0xe0>)
   226cc:	e7d8      	b.n	22680 <z_fatal_error+0x78>
   226ce:	bf00      	nop
   226d0:	0002f074 	.word	0x0002f074
   226d4:	0002eff4 	.word	0x0002eff4
   226d8:	0002f90c 	.word	0x0002f90c
   226dc:	00032c2b 	.word	0x00032c2b
   226e0:	00032c41 	.word	0x00032c41
   226e4:	00032c69 	.word	0x00032c69
   226e8:	00032c39 	.word	0x00032c39
   226ec:	00032c8a 	.word	0x00032c8a
   226f0:	00032cc4 	.word	0x00032cc4
   226f4:	00032ca2 	.word	0x00032ca2
   226f8:	00030166 	.word	0x00030166
   226fc:	00032ce1 	.word	0x00032ce1

00022700 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   22700:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   22702:	4d0b      	ldr	r5, [pc, #44]	; (22730 <idle+0x30>)
	__asm__ volatile(
   22704:	f04f 0220 	mov.w	r2, #32
   22708:	f3ef 8311 	mrs	r3, BASEPRI
   2270c:	f382 8811 	msr	BASEPRI, r2
   22710:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   22714:	f002 fd3c 	bl	25190 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   22718:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
   2271a:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   2271c:	2802      	cmp	r0, #2
   2271e:	bfd8      	it	le
   22720:	4608      	movle	r0, r1
   22722:	f002 fd7d 	bl	25220 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   22726:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   22728:	f7f2 f802 	bl	14730 <arch_cpu_idle>
}
   2272c:	e7ea      	b.n	22704 <idle+0x4>
   2272e:	bf00      	nop
   22730:	20021de0 	.word	0x20021de0

00022734 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   22734:	4802      	ldr	r0, [pc, #8]	; (22740 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   22736:	4a03      	ldr	r2, [pc, #12]	; (22744 <z_bss_zero+0x10>)
   22738:	2100      	movs	r1, #0
   2273a:	1a12      	subs	r2, r2, r0
   2273c:	f003 be5c 	b.w	263f8 <memset>
   22740:	20020cd8 	.word	0x20020cd8
   22744:	20026434 	.word	0x20026434

00022748 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   22748:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2274a:	4806      	ldr	r0, [pc, #24]	; (22764 <z_data_copy+0x1c>)
   2274c:	4a06      	ldr	r2, [pc, #24]	; (22768 <z_data_copy+0x20>)
   2274e:	4907      	ldr	r1, [pc, #28]	; (2276c <z_data_copy+0x24>)
   22750:	1a12      	subs	r2, r2, r0
   22752:	f7ea f9fb 	bl	cb4c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   22756:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2275a:	4a05      	ldr	r2, [pc, #20]	; (22770 <z_data_copy+0x28>)
   2275c:	4905      	ldr	r1, [pc, #20]	; (22774 <z_data_copy+0x2c>)
   2275e:	4806      	ldr	r0, [pc, #24]	; (22778 <z_data_copy+0x30>)
   22760:	f7ea b9f4 	b.w	cb4c <memcpy>
   22764:	20020000 	.word	0x20020000
   22768:	20020cd4 	.word	0x20020cd4
   2276c:	0003339c 	.word	0x0003339c
   22770:	00000000 	.word	0x00000000
   22774:	0003339c 	.word	0x0003339c
   22778:	20020000 	.word	0x20020000

0002277c <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   2277c:	2201      	movs	r2, #1
{
   2277e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   22780:	4b0b      	ldr	r3, [pc, #44]	; (227b0 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   22782:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   22784:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   22786:	f7ff fed3 	bl	22530 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   2278a:	4a0a      	ldr	r2, [pc, #40]	; (227b4 <bg_thread_main+0x38>)
   2278c:	490a      	ldr	r1, [pc, #40]	; (227b8 <bg_thread_main+0x3c>)
   2278e:	480b      	ldr	r0, [pc, #44]	; (227bc <bg_thread_main+0x40>)
   22790:	f009 fe4f 	bl	2c432 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   22794:	2003      	movs	r0, #3
   22796:	f7ff fecb 	bl	22530 <z_sys_init_run_level>

	z_init_static_threads();
   2279a:	f002 fa23 	bl	24be4 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   2279e:	f7ef f9ef 	bl	11b80 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   227a2:	4a07      	ldr	r2, [pc, #28]	; (227c0 <bg_thread_main+0x44>)
   227a4:	7b13      	ldrb	r3, [r2, #12]
   227a6:	f023 0301 	bic.w	r3, r3, #1
   227aa:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   227ac:	bd08      	pop	{r3, pc}
   227ae:	bf00      	nop
   227b0:	200262a1 	.word	0x200262a1
   227b4:	00030a12 	.word	0x00030a12
   227b8:	00032d60 	.word	0x00032d60
   227bc:	00032d6c 	.word	0x00032d6c
   227c0:	20021280 	.word	0x20021280

000227c4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   227c4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   227c8:	b0b9      	sub	sp, #228	; 0xe4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   227ca:	f7f0 fb09 	bl	12de0 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   227ce:	4b34      	ldr	r3, [pc, #208]	; (228a0 <z_cstart+0xdc>)
	uint32_t msp =
   227d0:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   227d4:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   227d8:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   227dc:	2400      	movs	r4, #0
   227de:	23e0      	movs	r3, #224	; 0xe0
   227e0:	4d30      	ldr	r5, [pc, #192]	; (228a4 <z_cstart+0xe0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   227e2:	f04f 0b01 	mov.w	fp, #1
   227e6:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   227ea:	77ec      	strb	r4, [r5, #31]
   227ec:	762c      	strb	r4, [r5, #24]
   227ee:	766c      	strb	r4, [r5, #25]
   227f0:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   227f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   227f4:	4e2c      	ldr	r6, [pc, #176]	; (228a8 <z_cstart+0xe4>)
   227f6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   227fa:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   227fc:	f7f2 fadc 	bl	14db8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   22800:	f7f1 ff90 	bl	14724 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   22804:	f04f 33ff 	mov.w	r3, #4294967295
   22808:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2280a:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   2280c:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   22810:	4d26      	ldr	r5, [pc, #152]	; (228ac <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   22812:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   22816:	ab06      	add	r3, sp, #24
   22818:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2281a:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   2281c:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   22820:	f7ff fe86 	bl	22530 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   22824:	2001      	movs	r0, #1
   22826:	f7ff fe83 	bl	22530 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2282a:	f8df a098 	ldr.w	sl, [pc, #152]	; 228c4 <z_cstart+0x100>
	z_sched_init();
   2282e:	f001 feb9 	bl	245a4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   22832:	4b1f      	ldr	r3, [pc, #124]	; (228b0 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   22834:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   22836:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2283a:	491e      	ldr	r1, [pc, #120]	; (228b4 <z_cstart+0xf0>)
   2283c:	9305      	str	r3, [sp, #20]
   2283e:	4630      	mov	r0, r6
   22840:	4653      	mov	r3, sl
   22842:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   22846:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2284a:	9400      	str	r4, [sp, #0]
   2284c:	f002 f920 	bl	24a90 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   22850:	7b73      	ldrb	r3, [r6, #13]
   22852:	4680      	mov	r8, r0
   22854:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   22858:	4630      	mov	r0, r6
   2285a:	7373      	strb	r3, [r6, #13]
   2285c:	f001 f9c4 	bl	23be8 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   22860:	230f      	movs	r3, #15
   22862:	4f15      	ldr	r7, [pc, #84]	; (228b8 <z_cstart+0xf4>)
   22864:	f44f 72a0 	mov.w	r2, #320	; 0x140
   22868:	e9cd 4302 	strd	r4, r3, [sp, #8]
   2286c:	4913      	ldr	r1, [pc, #76]	; (228bc <z_cstart+0xf8>)
   2286e:	4b14      	ldr	r3, [pc, #80]	; (228c0 <z_cstart+0xfc>)
   22870:	4638      	mov	r0, r7
   22872:	e9cd b404 	strd	fp, r4, [sp, #16]
   22876:	e9cd 4400 	strd	r4, r4, [sp]
   2287a:	f002 f909 	bl	24a90 <z_setup_new_thread>
   2287e:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   22880:	4652      	mov	r2, sl
   22882:	f023 0304 	bic.w	r3, r3, #4
   22886:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   22888:	f105 0318 	add.w	r3, r5, #24
   2288c:	4641      	mov	r1, r8
   2288e:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   22890:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   22894:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   22896:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   22898:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2289c:	f7f1 ff1c 	bl	146d8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   228a0:	20029478 	.word	0x20029478
   228a4:	e000ed00 	.word	0xe000ed00
   228a8:	20021280 	.word	0x20021280
   228ac:	20021de0 	.word	0x20021de0
   228b0:	00032d93 	.word	0x00032d93
   228b4:	20028338 	.word	0x20028338
   228b8:	200211b8 	.word	0x200211b8
   228bc:	20029338 	.word	0x20029338
   228c0:	00022701 	.word	0x00022701
   228c4:	0002277d 	.word	0x0002277d

000228c8 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   228c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   228ca:	4d0f      	ldr	r5, [pc, #60]	; (22908 <statics_init+0x40>)
   228cc:	4c0f      	ldr	r4, [pc, #60]	; (2290c <statics_init+0x44>)
   228ce:	462f      	mov	r7, r5
   228d0:	4e0f      	ldr	r6, [pc, #60]	; (22910 <statics_init+0x48>)
   228d2:	42ac      	cmp	r4, r5
   228d4:	d90c      	bls.n	228f0 <statics_init+0x28>
   228d6:	490f      	ldr	r1, [pc, #60]	; (22914 <statics_init+0x4c>)
   228d8:	2315      	movs	r3, #21
   228da:	4632      	mov	r2, r6
   228dc:	480e      	ldr	r0, [pc, #56]	; (22918 <statics_init+0x50>)
   228de:	f009 fda8 	bl	2c432 <printk>
   228e2:	480e      	ldr	r0, [pc, #56]	; (2291c <statics_init+0x54>)
   228e4:	f009 fda5 	bl	2c432 <printk>
   228e8:	2115      	movs	r1, #21
   228ea:	4630      	mov	r0, r6
   228ec:	f009 ffbe 	bl	2c86c <assert_post_action>
   228f0:	42bc      	cmp	r4, r7
   228f2:	d301      	bcc.n	228f8 <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   228f4:	2000      	movs	r0, #0
   228f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   228f8:	4620      	mov	r0, r4
   228fa:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   228fe:	f00b fffb 	bl	2e8f8 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   22902:	3418      	adds	r4, #24
   22904:	e7e5      	b.n	228d2 <statics_init+0xa>
   22906:	bf00      	nop
   22908:	20020b68 	.word	0x20020b68
   2290c:	20020b50 	.word	0x20020b50
   22910:	00032d9b 	.word	0x00032d9b
   22914:	00032dbd 	.word	0x00032dbd
   22918:	00030166 	.word	0x00030166
   2291c:	00030a8e 	.word	0x00030a8e

00022920 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   22920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22924:	4606      	mov	r6, r0
   22926:	b087      	sub	sp, #28
   22928:	468a      	mov	sl, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   2292a:	4610      	mov	r0, r2
   2292c:	4619      	mov	r1, r3
{
   2292e:	4690      	mov	r8, r2
   22930:	4699      	mov	r9, r3
	int64_t now, end = z_timeout_end_calc(timeout);
   22932:	f00c f916 	bl	2eb62 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   22936:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   2293a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   2293e:	f04f 0320 	mov.w	r3, #32
   22942:	f3ef 8511 	mrs	r5, BASEPRI
   22946:	f383 8811 	msr	BASEPRI, r3
   2294a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2294e:	4620      	mov	r0, r4
   22950:	f002 f9d8 	bl	24d04 <z_spin_lock_valid>
   22954:	b968      	cbnz	r0, 22972 <k_heap_alloc+0x52>
   22956:	235c      	movs	r3, #92	; 0x5c
   22958:	4a3f      	ldr	r2, [pc, #252]	; (22a58 <k_heap_alloc+0x138>)
   2295a:	4940      	ldr	r1, [pc, #256]	; (22a5c <k_heap_alloc+0x13c>)
   2295c:	4840      	ldr	r0, [pc, #256]	; (22a60 <k_heap_alloc+0x140>)
   2295e:	f009 fd68 	bl	2c432 <printk>
   22962:	4621      	mov	r1, r4
   22964:	483f      	ldr	r0, [pc, #252]	; (22a64 <k_heap_alloc+0x144>)
   22966:	f009 fd64 	bl	2c432 <printk>
   2296a:	215c      	movs	r1, #92	; 0x5c
   2296c:	483a      	ldr	r0, [pc, #232]	; (22a58 <k_heap_alloc+0x138>)
   2296e:	f009 ff7d 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   22972:	4620      	mov	r0, r4
   22974:	f002 f9e4 	bl	24d40 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   22978:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   2297c:	b17b      	cbz	r3, 2299e <k_heap_alloc+0x7e>
   2297e:	ea58 0309 	orrs.w	r3, r8, r9
   22982:	d00c      	beq.n	2299e <k_heap_alloc+0x7e>
   22984:	4938      	ldr	r1, [pc, #224]	; (22a68 <k_heap_alloc+0x148>)
   22986:	2323      	movs	r3, #35	; 0x23
   22988:	4a38      	ldr	r2, [pc, #224]	; (22a6c <k_heap_alloc+0x14c>)
   2298a:	4835      	ldr	r0, [pc, #212]	; (22a60 <k_heap_alloc+0x140>)
   2298c:	f009 fd51 	bl	2c432 <printk>
   22990:	4837      	ldr	r0, [pc, #220]	; (22a70 <k_heap_alloc+0x150>)
   22992:	f009 fd4e 	bl	2c432 <printk>
   22996:	2123      	movs	r1, #35	; 0x23
   22998:	4834      	ldr	r0, [pc, #208]	; (22a6c <k_heap_alloc+0x14c>)
   2299a:	f009 ff67 	bl	2c86c <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2299e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 22a58 <k_heap_alloc+0x138>
   229a2:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 22a5c <k_heap_alloc+0x13c>
   229a6:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 22a60 <k_heap_alloc+0x140>

	while (ret == NULL) {
		ret = sys_heap_alloc(&h->heap, bytes);
   229aa:	4651      	mov	r1, sl
   229ac:	4630      	mov	r0, r6
   229ae:	f009 ff2e 	bl	2c80e <sys_heap_alloc>
   229b2:	4607      	mov	r7, r0

		now = z_tick_get();
   229b4:	f002 fd4e 	bl	25454 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   229b8:	b1cf      	cbz	r7, 229ee <k_heap_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   229ba:	4620      	mov	r0, r4
   229bc:	f002 f9b0 	bl	24d20 <z_spin_unlock_valid>
   229c0:	b968      	cbnz	r0, 229de <k_heap_alloc+0xbe>
   229c2:	2384      	movs	r3, #132	; 0x84
   229c4:	4a24      	ldr	r2, [pc, #144]	; (22a58 <k_heap_alloc+0x138>)
   229c6:	492b      	ldr	r1, [pc, #172]	; (22a74 <k_heap_alloc+0x154>)
   229c8:	4825      	ldr	r0, [pc, #148]	; (22a60 <k_heap_alloc+0x140>)
   229ca:	f009 fd32 	bl	2c432 <printk>
   229ce:	4621      	mov	r1, r4
   229d0:	4829      	ldr	r0, [pc, #164]	; (22a78 <k_heap_alloc+0x158>)
   229d2:	f009 fd2e 	bl	2c432 <printk>
   229d6:	2184      	movs	r1, #132	; 0x84
   229d8:	481f      	ldr	r0, [pc, #124]	; (22a58 <k_heap_alloc+0x138>)
   229da:	f009 ff47 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   229de:	f385 8811 	msr	BASEPRI, r5
   229e2:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   229e6:	4638      	mov	r0, r7
   229e8:	b007      	add	sp, #28
   229ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   229ee:	9b04      	ldr	r3, [sp, #16]
   229f0:	1a1b      	subs	r3, r3, r0
   229f2:	9302      	str	r3, [sp, #8]
   229f4:	9b05      	ldr	r3, [sp, #20]
   229f6:	eb63 0301 	sbc.w	r3, r3, r1
   229fa:	9303      	str	r3, [sp, #12]
   229fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22a00:	2a01      	cmp	r2, #1
   22a02:	f173 0300 	sbcs.w	r3, r3, #0
   22a06:	dbd8      	blt.n	229ba <k_heap_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   22a08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22a0c:	4629      	mov	r1, r5
   22a0e:	e9cd 2300 	strd	r2, r3, [sp]
   22a12:	4620      	mov	r0, r4
   22a14:	f106 020c 	add.w	r2, r6, #12
   22a18:	f001 fc78 	bl	2430c <z_pend_curr>
	__asm__ volatile(
   22a1c:	f04f 0320 	mov.w	r3, #32
   22a20:	f3ef 8511 	mrs	r5, BASEPRI
   22a24:	f383 8811 	msr	BASEPRI, r3
   22a28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22a2c:	4620      	mov	r0, r4
   22a2e:	f002 f969 	bl	24d04 <z_spin_lock_valid>
   22a32:	b968      	cbnz	r0, 22a50 <k_heap_alloc+0x130>
   22a34:	235c      	movs	r3, #92	; 0x5c
   22a36:	4642      	mov	r2, r8
   22a38:	4649      	mov	r1, r9
   22a3a:	4658      	mov	r0, fp
   22a3c:	f009 fcf9 	bl	2c432 <printk>
   22a40:	4621      	mov	r1, r4
   22a42:	4808      	ldr	r0, [pc, #32]	; (22a64 <k_heap_alloc+0x144>)
   22a44:	f009 fcf5 	bl	2c432 <printk>
   22a48:	215c      	movs	r1, #92	; 0x5c
   22a4a:	4640      	mov	r0, r8
   22a4c:	f009 ff0e 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   22a50:	4620      	mov	r0, r4
   22a52:	f002 f975 	bl	24d40 <z_spin_lock_set_owner>
	return k;
   22a56:	e7a8      	b.n	229aa <k_heap_alloc+0x8a>
   22a58:	000304b3 	.word	0x000304b3
   22a5c:	00030505 	.word	0x00030505
   22a60:	00030166 	.word	0x00030166
   22a64:	0003051a 	.word	0x0003051a
   22a68:	00032dd3 	.word	0x00032dd3
   22a6c:	00032d9b 	.word	0x00032d9b
   22a70:	00030a10 	.word	0x00030a10
   22a74:	000304d9 	.word	0x000304d9
   22a78:	000304f0 	.word	0x000304f0

00022a7c <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   22a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22a7e:	4605      	mov	r5, r0
   22a80:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   22a82:	f100 0414 	add.w	r4, r0, #20
   22a86:	f04f 0320 	mov.w	r3, #32
   22a8a:	f3ef 8711 	mrs	r7, BASEPRI
   22a8e:	f383 8811 	msr	BASEPRI, r3
   22a92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22a96:	4620      	mov	r0, r4
   22a98:	f002 f934 	bl	24d04 <z_spin_lock_valid>
   22a9c:	b968      	cbnz	r0, 22aba <k_heap_free+0x3e>
   22a9e:	235c      	movs	r3, #92	; 0x5c
   22aa0:	4a1a      	ldr	r2, [pc, #104]	; (22b0c <k_heap_free+0x90>)
   22aa2:	491b      	ldr	r1, [pc, #108]	; (22b10 <k_heap_free+0x94>)
   22aa4:	481b      	ldr	r0, [pc, #108]	; (22b14 <k_heap_free+0x98>)
   22aa6:	f009 fcc4 	bl	2c432 <printk>
   22aaa:	4621      	mov	r1, r4
   22aac:	481a      	ldr	r0, [pc, #104]	; (22b18 <k_heap_free+0x9c>)
   22aae:	f009 fcc0 	bl	2c432 <printk>
   22ab2:	215c      	movs	r1, #92	; 0x5c
   22ab4:	4815      	ldr	r0, [pc, #84]	; (22b0c <k_heap_free+0x90>)
   22ab6:	f009 fed9 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   22aba:	4620      	mov	r0, r4
   22abc:	f002 f940 	bl	24d40 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   22ac0:	4628      	mov	r0, r5
   22ac2:	4631      	mov	r1, r6
   22ac4:	f7ef ffd2 	bl	12a6c <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   22ac8:	f105 000c 	add.w	r0, r5, #12
   22acc:	f00b ffb2 	bl	2ea34 <z_unpend_all>
   22ad0:	b128      	cbz	r0, 22ade <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   22ad2:	4639      	mov	r1, r7
   22ad4:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   22ad6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   22ada:	f000 be61 	b.w	237a0 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22ade:	4620      	mov	r0, r4
   22ae0:	f002 f91e 	bl	24d20 <z_spin_unlock_valid>
   22ae4:	b968      	cbnz	r0, 22b02 <k_heap_free+0x86>
   22ae6:	2384      	movs	r3, #132	; 0x84
   22ae8:	4a08      	ldr	r2, [pc, #32]	; (22b0c <k_heap_free+0x90>)
   22aea:	490c      	ldr	r1, [pc, #48]	; (22b1c <k_heap_free+0xa0>)
   22aec:	4809      	ldr	r0, [pc, #36]	; (22b14 <k_heap_free+0x98>)
   22aee:	f009 fca0 	bl	2c432 <printk>
   22af2:	4621      	mov	r1, r4
   22af4:	480a      	ldr	r0, [pc, #40]	; (22b20 <k_heap_free+0xa4>)
   22af6:	f009 fc9c 	bl	2c432 <printk>
   22afa:	2184      	movs	r1, #132	; 0x84
   22afc:	4803      	ldr	r0, [pc, #12]	; (22b0c <k_heap_free+0x90>)
   22afe:	f009 feb5 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   22b02:	f387 8811 	msr	BASEPRI, r7
   22b06:	f3bf 8f6f 	isb	sy
}
   22b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22b0c:	000304b3 	.word	0x000304b3
   22b10:	00030505 	.word	0x00030505
   22b14:	00030166 	.word	0x00030166
   22b18:	0003051a 	.word	0x0003051a
   22b1c:	000304d9 	.word	0x000304d9
   22b20:	000304f0 	.word	0x000304f0

00022b24 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   22b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   22b28:	4d16      	ldr	r5, [pc, #88]	; (22b84 <init_mem_slab_module+0x60>)
   22b2a:	4c17      	ldr	r4, [pc, #92]	; (22b88 <init_mem_slab_module+0x64>)
   22b2c:	46a8      	mov	r8, r5
   22b2e:	4e17      	ldr	r6, [pc, #92]	; (22b8c <init_mem_slab_module+0x68>)
   22b30:	42ac      	cmp	r4, r5
   22b32:	d90c      	bls.n	22b4e <init_mem_slab_module+0x2a>
   22b34:	4916      	ldr	r1, [pc, #88]	; (22b90 <init_mem_slab_module+0x6c>)
   22b36:	2342      	movs	r3, #66	; 0x42
   22b38:	4632      	mov	r2, r6
   22b3a:	4816      	ldr	r0, [pc, #88]	; (22b94 <init_mem_slab_module+0x70>)
   22b3c:	f009 fc79 	bl	2c432 <printk>
   22b40:	4815      	ldr	r0, [pc, #84]	; (22b98 <init_mem_slab_module+0x74>)
   22b42:	f009 fc76 	bl	2c432 <printk>
   22b46:	2142      	movs	r1, #66	; 0x42
   22b48:	4630      	mov	r0, r6
   22b4a:	f009 fe8f 	bl	2c86c <assert_post_action>
   22b4e:	4544      	cmp	r4, r8
   22b50:	d302      	bcc.n	22b58 <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   22b52:	2000      	movs	r0, #0
	return rc;
}
   22b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22b58:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
   22b5c:	ea41 0302 	orr.w	r3, r1, r2
   22b60:	f013 0303 	ands.w	r3, r3, #3
   22b64:	d10b      	bne.n	22b7e <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   22b66:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   22b68:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   22b6a:	4283      	cmp	r3, r0
   22b6c:	d101      	bne.n	22b72 <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   22b6e:	341c      	adds	r4, #28
   22b70:	e7de      	b.n	22b30 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   22b72:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   22b74:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   22b76:	600f      	str	r7, [r1, #0]
		slab->free_list = p;
   22b78:	6161      	str	r1, [r4, #20]
		p += slab->block_size;
   22b7a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   22b7c:	e7f5      	b.n	22b6a <init_mem_slab_module+0x46>
		return -EINVAL;
   22b7e:	f06f 0015 	mvn.w	r0, #21
	return rc;
   22b82:	e7e7      	b.n	22b54 <init_mem_slab_module+0x30>
   22b84:	20020b50 	.word	0x20020b50
   22b88:	20020b50 	.word	0x20020b50
   22b8c:	00032e18 	.word	0x00032e18
   22b90:	00032e3d 	.word	0x00032e3d
   22b94:	00030166 	.word	0x00030166
   22b98:	00030a8e 	.word	0x00030a8e

00022b9c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   22b9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22ba0:	4604      	mov	r4, r0
   22ba2:	460d      	mov	r5, r1
   22ba4:	4616      	mov	r6, r2
   22ba6:	461f      	mov	r7, r3
	__asm__ volatile(
   22ba8:	f04f 0320 	mov.w	r3, #32
   22bac:	f3ef 8811 	mrs	r8, BASEPRI
   22bb0:	f383 8811 	msr	BASEPRI, r3
   22bb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22bb8:	4826      	ldr	r0, [pc, #152]	; (22c54 <k_mem_slab_alloc+0xb8>)
   22bba:	f002 f8a3 	bl	24d04 <z_spin_lock_valid>
   22bbe:	b968      	cbnz	r0, 22bdc <k_mem_slab_alloc+0x40>
   22bc0:	235c      	movs	r3, #92	; 0x5c
   22bc2:	4a25      	ldr	r2, [pc, #148]	; (22c58 <k_mem_slab_alloc+0xbc>)
   22bc4:	4925      	ldr	r1, [pc, #148]	; (22c5c <k_mem_slab_alloc+0xc0>)
   22bc6:	4826      	ldr	r0, [pc, #152]	; (22c60 <k_mem_slab_alloc+0xc4>)
   22bc8:	f009 fc33 	bl	2c432 <printk>
   22bcc:	4921      	ldr	r1, [pc, #132]	; (22c54 <k_mem_slab_alloc+0xb8>)
   22bce:	4825      	ldr	r0, [pc, #148]	; (22c64 <k_mem_slab_alloc+0xc8>)
   22bd0:	f009 fc2f 	bl	2c432 <printk>
   22bd4:	215c      	movs	r1, #92	; 0x5c
   22bd6:	4820      	ldr	r0, [pc, #128]	; (22c58 <k_mem_slab_alloc+0xbc>)
   22bd8:	f009 fe48 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   22bdc:	481d      	ldr	r0, [pc, #116]	; (22c54 <k_mem_slab_alloc+0xb8>)
   22bde:	f002 f8af 	bl	24d40 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   22be2:	6963      	ldr	r3, [r4, #20]
   22be4:	b1eb      	cbz	r3, 22c22 <k_mem_slab_alloc+0x86>
		/* take a free block */
		*mem = slab->free_list;
   22be6:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   22be8:	681b      	ldr	r3, [r3, #0]
   22bea:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   22bec:	69a3      	ldr	r3, [r4, #24]
   22bee:	3301      	adds	r3, #1
   22bf0:	61a3      	str	r3, [r4, #24]
		result = 0;
   22bf2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22bf4:	4817      	ldr	r0, [pc, #92]	; (22c54 <k_mem_slab_alloc+0xb8>)
   22bf6:	f002 f893 	bl	24d20 <z_spin_unlock_valid>
   22bfa:	b968      	cbnz	r0, 22c18 <k_mem_slab_alloc+0x7c>
   22bfc:	2384      	movs	r3, #132	; 0x84
   22bfe:	4a16      	ldr	r2, [pc, #88]	; (22c58 <k_mem_slab_alloc+0xbc>)
   22c00:	4919      	ldr	r1, [pc, #100]	; (22c68 <k_mem_slab_alloc+0xcc>)
   22c02:	4817      	ldr	r0, [pc, #92]	; (22c60 <k_mem_slab_alloc+0xc4>)
   22c04:	f009 fc15 	bl	2c432 <printk>
   22c08:	4912      	ldr	r1, [pc, #72]	; (22c54 <k_mem_slab_alloc+0xb8>)
   22c0a:	4818      	ldr	r0, [pc, #96]	; (22c6c <k_mem_slab_alloc+0xd0>)
   22c0c:	f009 fc11 	bl	2c432 <printk>
   22c10:	2184      	movs	r1, #132	; 0x84
   22c12:	4811      	ldr	r0, [pc, #68]	; (22c58 <k_mem_slab_alloc+0xbc>)
   22c14:	f009 fe2a 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   22c18:	f388 8811 	msr	BASEPRI, r8
   22c1c:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   22c20:	e013      	b.n	22c4a <k_mem_slab_alloc+0xae>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22c22:	ea56 0207 	orrs.w	r2, r6, r7
   22c26:	d103      	bne.n	22c30 <k_mem_slab_alloc+0x94>
		result = -ENOMEM;
   22c28:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   22c2c:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   22c2e:	e7e1      	b.n	22bf4 <k_mem_slab_alloc+0x58>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   22c30:	4622      	mov	r2, r4
   22c32:	4641      	mov	r1, r8
   22c34:	e9cd 6700 	strd	r6, r7, [sp]
   22c38:	4806      	ldr	r0, [pc, #24]	; (22c54 <k_mem_slab_alloc+0xb8>)
   22c3a:	f001 fb67 	bl	2430c <z_pend_curr>
		if (result == 0) {
   22c3e:	4604      	mov	r4, r0
   22c40:	b918      	cbnz	r0, 22c4a <k_mem_slab_alloc+0xae>
			*mem = _current->base.swap_data;
   22c42:	4b0b      	ldr	r3, [pc, #44]	; (22c70 <k_mem_slab_alloc+0xd4>)
   22c44:	689b      	ldr	r3, [r3, #8]
   22c46:	695b      	ldr	r3, [r3, #20]
   22c48:	602b      	str	r3, [r5, #0]
}
   22c4a:	4620      	mov	r0, r4
   22c4c:	b002      	add	sp, #8
   22c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22c52:	bf00      	nop
   22c54:	20021dd8 	.word	0x20021dd8
   22c58:	000304b3 	.word	0x000304b3
   22c5c:	00030505 	.word	0x00030505
   22c60:	00030166 	.word	0x00030166
   22c64:	0003051a 	.word	0x0003051a
   22c68:	000304d9 	.word	0x000304d9
   22c6c:	000304f0 	.word	0x000304f0
   22c70:	20021de0 	.word	0x20021de0

00022c74 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   22c74:	b570      	push	{r4, r5, r6, lr}
   22c76:	4604      	mov	r4, r0
   22c78:	460d      	mov	r5, r1
	__asm__ volatile(
   22c7a:	f04f 0320 	mov.w	r3, #32
   22c7e:	f3ef 8611 	mrs	r6, BASEPRI
   22c82:	f383 8811 	msr	BASEPRI, r3
   22c86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22c8a:	4822      	ldr	r0, [pc, #136]	; (22d14 <k_mem_slab_free+0xa0>)
   22c8c:	f002 f83a 	bl	24d04 <z_spin_lock_valid>
   22c90:	b968      	cbnz	r0, 22cae <k_mem_slab_free+0x3a>
   22c92:	235c      	movs	r3, #92	; 0x5c
   22c94:	4a20      	ldr	r2, [pc, #128]	; (22d18 <k_mem_slab_free+0xa4>)
   22c96:	4921      	ldr	r1, [pc, #132]	; (22d1c <k_mem_slab_free+0xa8>)
   22c98:	4821      	ldr	r0, [pc, #132]	; (22d20 <k_mem_slab_free+0xac>)
   22c9a:	f009 fbca 	bl	2c432 <printk>
   22c9e:	491d      	ldr	r1, [pc, #116]	; (22d14 <k_mem_slab_free+0xa0>)
   22ca0:	4820      	ldr	r0, [pc, #128]	; (22d24 <k_mem_slab_free+0xb0>)
   22ca2:	f009 fbc6 	bl	2c432 <printk>
   22ca6:	215c      	movs	r1, #92	; 0x5c
   22ca8:	481b      	ldr	r0, [pc, #108]	; (22d18 <k_mem_slab_free+0xa4>)
   22caa:	f009 fddf 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   22cae:	4819      	ldr	r0, [pc, #100]	; (22d14 <k_mem_slab_free+0xa0>)
   22cb0:	f002 f846 	bl	24d40 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   22cb4:	4620      	mov	r0, r4
   22cb6:	f001 fbef 	bl	24498 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   22cba:	b158      	cbz	r0, 22cd4 <k_mem_slab_free+0x60>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   22cbc:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   22cbe:	682a      	ldr	r2, [r5, #0]
   22cc0:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   22cc2:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   22cc4:	f000 ff90 	bl	23be8 <z_ready_thread>
		z_reschedule(&lock, key);
   22cc8:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   22cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   22cce:	4811      	ldr	r0, [pc, #68]	; (22d14 <k_mem_slab_free+0xa0>)
   22cd0:	f000 bd66 	b.w	237a0 <z_reschedule>
		**(char ***)mem = slab->free_list;
   22cd4:	682b      	ldr	r3, [r5, #0]
   22cd6:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22cd8:	480e      	ldr	r0, [pc, #56]	; (22d14 <k_mem_slab_free+0xa0>)
   22cda:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   22cdc:	682b      	ldr	r3, [r5, #0]
   22cde:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   22ce0:	69a3      	ldr	r3, [r4, #24]
   22ce2:	3b01      	subs	r3, #1
   22ce4:	61a3      	str	r3, [r4, #24]
   22ce6:	f002 f81b 	bl	24d20 <z_spin_unlock_valid>
   22cea:	b968      	cbnz	r0, 22d08 <k_mem_slab_free+0x94>
   22cec:	2384      	movs	r3, #132	; 0x84
   22cee:	4a0a      	ldr	r2, [pc, #40]	; (22d18 <k_mem_slab_free+0xa4>)
   22cf0:	490d      	ldr	r1, [pc, #52]	; (22d28 <k_mem_slab_free+0xb4>)
   22cf2:	480b      	ldr	r0, [pc, #44]	; (22d20 <k_mem_slab_free+0xac>)
   22cf4:	f009 fb9d 	bl	2c432 <printk>
   22cf8:	4906      	ldr	r1, [pc, #24]	; (22d14 <k_mem_slab_free+0xa0>)
   22cfa:	480c      	ldr	r0, [pc, #48]	; (22d2c <k_mem_slab_free+0xb8>)
   22cfc:	f009 fb99 	bl	2c432 <printk>
   22d00:	2184      	movs	r1, #132	; 0x84
   22d02:	4805      	ldr	r0, [pc, #20]	; (22d18 <k_mem_slab_free+0xa4>)
   22d04:	f009 fdb2 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   22d08:	f386 8811 	msr	BASEPRI, r6
   22d0c:	f3bf 8f6f 	isb	sy
}
   22d10:	bd70      	pop	{r4, r5, r6, pc}
   22d12:	bf00      	nop
   22d14:	20021dd8 	.word	0x20021dd8
   22d18:	000304b3 	.word	0x000304b3
   22d1c:	00030505 	.word	0x00030505
   22d20:	00030166 	.word	0x00030166
   22d24:	0003051a 	.word	0x0003051a
   22d28:	000304d9 	.word	0x000304d9
   22d2c:	000304f0 	.word	0x000304f0

00022d30 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   22d30:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   22d34:	4604      	mov	r4, r0
   22d36:	468a      	mov	sl, r1
   22d38:	4690      	mov	r8, r2
   22d3a:	4699      	mov	r9, r3
   22d3c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   22d40:	b17b      	cbz	r3, 22d62 <z_impl_k_msgq_put+0x32>
   22d42:	ea58 0309 	orrs.w	r3, r8, r9
   22d46:	d00c      	beq.n	22d62 <z_impl_k_msgq_put+0x32>
   22d48:	4940      	ldr	r1, [pc, #256]	; (22e4c <z_impl_k_msgq_put+0x11c>)
   22d4a:	2376      	movs	r3, #118	; 0x76
   22d4c:	4a40      	ldr	r2, [pc, #256]	; (22e50 <z_impl_k_msgq_put+0x120>)
   22d4e:	4841      	ldr	r0, [pc, #260]	; (22e54 <z_impl_k_msgq_put+0x124>)
   22d50:	f009 fb6f 	bl	2c432 <printk>
   22d54:	4840      	ldr	r0, [pc, #256]	; (22e58 <z_impl_k_msgq_put+0x128>)
   22d56:	f009 fb6c 	bl	2c432 <printk>
   22d5a:	2176      	movs	r1, #118	; 0x76
   22d5c:	483c      	ldr	r0, [pc, #240]	; (22e50 <z_impl_k_msgq_put+0x120>)
   22d5e:	f009 fd85 	bl	2c86c <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   22d62:	f104 0508 	add.w	r5, r4, #8
	__asm__ volatile(
   22d66:	f04f 0320 	mov.w	r3, #32
   22d6a:	f3ef 8711 	mrs	r7, BASEPRI
   22d6e:	f383 8811 	msr	BASEPRI, r3
   22d72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22d76:	4628      	mov	r0, r5
   22d78:	f001 ffc4 	bl	24d04 <z_spin_lock_valid>
   22d7c:	b968      	cbnz	r0, 22d9a <z_impl_k_msgq_put+0x6a>
   22d7e:	235c      	movs	r3, #92	; 0x5c
   22d80:	4a36      	ldr	r2, [pc, #216]	; (22e5c <z_impl_k_msgq_put+0x12c>)
   22d82:	4937      	ldr	r1, [pc, #220]	; (22e60 <z_impl_k_msgq_put+0x130>)
   22d84:	4833      	ldr	r0, [pc, #204]	; (22e54 <z_impl_k_msgq_put+0x124>)
   22d86:	f009 fb54 	bl	2c432 <printk>
   22d8a:	4629      	mov	r1, r5
   22d8c:	4835      	ldr	r0, [pc, #212]	; (22e64 <z_impl_k_msgq_put+0x134>)
   22d8e:	f009 fb50 	bl	2c432 <printk>
   22d92:	215c      	movs	r1, #92	; 0x5c
   22d94:	4831      	ldr	r0, [pc, #196]	; (22e5c <z_impl_k_msgq_put+0x12c>)
   22d96:	f009 fd69 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   22d9a:	4628      	mov	r0, r5
   22d9c:	f001 ffd0 	bl	24d40 <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   22da0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   22da2:	6923      	ldr	r3, [r4, #16]
   22da4:	429a      	cmp	r2, r3
   22da6:	d23d      	bcs.n	22e24 <z_impl_k_msgq_put+0xf4>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   22da8:	4620      	mov	r0, r4
   22daa:	f001 fb75 	bl	24498 <z_unpend_first_thread>
   22dae:	4651      	mov	r1, sl
		if (pending_thread != NULL) {
   22db0:	4606      	mov	r6, r0
   22db2:	68e2      	ldr	r2, [r4, #12]
   22db4:	b178      	cbz	r0, 22dd6 <z_impl_k_msgq_put+0xa6>
   22db6:	2400      	movs	r4, #0
   22db8:	6940      	ldr	r0, [r0, #20]
   22dba:	f7e9 fec7 	bl	cb4c <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   22dbe:	4630      	mov	r0, r6
   22dc0:	67f4      	str	r4, [r6, #124]	; 0x7c
   22dc2:	f000 ff11 	bl	23be8 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   22dc6:	4639      	mov	r1, r7
   22dc8:	4628      	mov	r0, r5
   22dca:	f000 fce9 	bl	237a0 <z_reschedule>
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   22dce:	4620      	mov	r0, r4
   22dd0:	b002      	add	sp, #8
   22dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22dd6:	6a20      	ldr	r0, [r4, #32]
   22dd8:	f7e9 feb8 	bl	cb4c <memcpy>
			msgq->write_ptr += msgq->msg_size;
   22ddc:	6a23      	ldr	r3, [r4, #32]
   22dde:	68e2      	ldr	r2, [r4, #12]
   22de0:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   22de2:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   22de4:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   22de6:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   22de8:	bf04      	itt	eq
   22dea:	6963      	ldreq	r3, [r4, #20]
   22dec:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   22dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22df0:	3301      	adds	r3, #1
   22df2:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   22df4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22df6:	4628      	mov	r0, r5
   22df8:	f001 ff92 	bl	24d20 <z_spin_unlock_valid>
   22dfc:	b968      	cbnz	r0, 22e1a <z_impl_k_msgq_put+0xea>
   22dfe:	2384      	movs	r3, #132	; 0x84
   22e00:	4a16      	ldr	r2, [pc, #88]	; (22e5c <z_impl_k_msgq_put+0x12c>)
   22e02:	4919      	ldr	r1, [pc, #100]	; (22e68 <z_impl_k_msgq_put+0x138>)
   22e04:	4813      	ldr	r0, [pc, #76]	; (22e54 <z_impl_k_msgq_put+0x124>)
   22e06:	f009 fb14 	bl	2c432 <printk>
   22e0a:	4629      	mov	r1, r5
   22e0c:	4817      	ldr	r0, [pc, #92]	; (22e6c <z_impl_k_msgq_put+0x13c>)
   22e0e:	f009 fb10 	bl	2c432 <printk>
   22e12:	2184      	movs	r1, #132	; 0x84
   22e14:	4811      	ldr	r0, [pc, #68]	; (22e5c <z_impl_k_msgq_put+0x12c>)
   22e16:	f009 fd29 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   22e1a:	f387 8811 	msr	BASEPRI, r7
   22e1e:	f3bf 8f6f 	isb	sy
	return result;
   22e22:	e7d4      	b.n	22dce <z_impl_k_msgq_put+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22e24:	ea58 0309 	orrs.w	r3, r8, r9
   22e28:	d00c      	beq.n	22e44 <z_impl_k_msgq_put+0x114>
		_current->base.swap_data = (void *) data;
   22e2a:	4b11      	ldr	r3, [pc, #68]	; (22e70 <z_impl_k_msgq_put+0x140>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22e2c:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
   22e2e:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22e30:	4639      	mov	r1, r7
		_current->base.swap_data = (void *) data;
   22e32:	f8c3 a014 	str.w	sl, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22e36:	4628      	mov	r0, r5
   22e38:	e9cd 8900 	strd	r8, r9, [sp]
   22e3c:	f001 fa66 	bl	2430c <z_pend_curr>
   22e40:	4604      	mov	r4, r0
   22e42:	e7c4      	b.n	22dce <z_impl_k_msgq_put+0x9e>
		result = -ENOMSG;
   22e44:	f06f 0422 	mvn.w	r4, #34	; 0x22
   22e48:	e7d5      	b.n	22df6 <z_impl_k_msgq_put+0xc6>
   22e4a:	bf00      	nop
   22e4c:	00032dd3 	.word	0x00032dd3
   22e50:	00032e5a 	.word	0x00032e5a
   22e54:	00030166 	.word	0x00030166
   22e58:	00030a10 	.word	0x00030a10
   22e5c:	000304b3 	.word	0x000304b3
   22e60:	00030505 	.word	0x00030505
   22e64:	0003051a 	.word	0x0003051a
   22e68:	000304d9 	.word	0x000304d9
   22e6c:	000304f0 	.word	0x000304f0
   22e70:	20021de0 	.word	0x20021de0

00022e74 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   22e74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   22e78:	4604      	mov	r4, r0
   22e7a:	460d      	mov	r5, r1
   22e7c:	4690      	mov	r8, r2
   22e7e:	4699      	mov	r9, r3
   22e80:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   22e84:	b17b      	cbz	r3, 22ea6 <z_impl_k_msgq_get+0x32>
   22e86:	ea58 0309 	orrs.w	r3, r8, r9
   22e8a:	d00c      	beq.n	22ea6 <z_impl_k_msgq_get+0x32>
   22e8c:	4946      	ldr	r1, [pc, #280]	; (22fa8 <z_impl_k_msgq_get+0x134>)
   22e8e:	23c2      	movs	r3, #194	; 0xc2
   22e90:	4a46      	ldr	r2, [pc, #280]	; (22fac <z_impl_k_msgq_get+0x138>)
   22e92:	4847      	ldr	r0, [pc, #284]	; (22fb0 <z_impl_k_msgq_get+0x13c>)
   22e94:	f009 facd 	bl	2c432 <printk>
   22e98:	4846      	ldr	r0, [pc, #280]	; (22fb4 <z_impl_k_msgq_get+0x140>)
   22e9a:	f009 faca 	bl	2c432 <printk>
   22e9e:	21c2      	movs	r1, #194	; 0xc2
   22ea0:	4842      	ldr	r0, [pc, #264]	; (22fac <z_impl_k_msgq_get+0x138>)
   22ea2:	f009 fce3 	bl	2c86c <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   22ea6:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   22eaa:	f04f 0320 	mov.w	r3, #32
   22eae:	f3ef 8711 	mrs	r7, BASEPRI
   22eb2:	f383 8811 	msr	BASEPRI, r3
   22eb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22eba:	4630      	mov	r0, r6
   22ebc:	f001 ff22 	bl	24d04 <z_spin_lock_valid>
   22ec0:	b968      	cbnz	r0, 22ede <z_impl_k_msgq_get+0x6a>
   22ec2:	235c      	movs	r3, #92	; 0x5c
   22ec4:	4a3c      	ldr	r2, [pc, #240]	; (22fb8 <z_impl_k_msgq_get+0x144>)
   22ec6:	493d      	ldr	r1, [pc, #244]	; (22fbc <z_impl_k_msgq_get+0x148>)
   22ec8:	4839      	ldr	r0, [pc, #228]	; (22fb0 <z_impl_k_msgq_get+0x13c>)
   22eca:	f009 fab2 	bl	2c432 <printk>
   22ece:	4631      	mov	r1, r6
   22ed0:	483b      	ldr	r0, [pc, #236]	; (22fc0 <z_impl_k_msgq_get+0x14c>)
   22ed2:	f009 faae 	bl	2c432 <printk>
   22ed6:	215c      	movs	r1, #92	; 0x5c
   22ed8:	4837      	ldr	r0, [pc, #220]	; (22fb8 <z_impl_k_msgq_get+0x144>)
   22eda:	f009 fcc7 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   22ede:	4630      	mov	r0, r6
   22ee0:	f001 ff2e 	bl	24d40 <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   22ee4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22ee6:	2b00      	cmp	r3, #0
   22ee8:	d035      	beq.n	22f56 <z_impl_k_msgq_get+0xe2>
   22eea:	4628      	mov	r0, r5
   22eec:	68e2      	ldr	r2, [r4, #12]
   22eee:	69e1      	ldr	r1, [r4, #28]
   22ef0:	f7e9 fe2c 	bl	cb4c <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   22ef4:	69e3      	ldr	r3, [r4, #28]
   22ef6:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   22ef8:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   22efa:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   22efc:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   22efe:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   22f00:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   22f02:	bf04      	itt	eq
   22f04:	6963      	ldreq	r3, [r4, #20]
   22f06:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   22f08:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22f0a:	3b01      	subs	r3, #1
   22f0c:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   22f0e:	f001 fac3 	bl	24498 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   22f12:	4605      	mov	r5, r0
   22f14:	2800      	cmp	r0, #0
   22f16:	d02f      	beq.n	22f78 <z_impl_k_msgq_get+0x104>
   22f18:	6941      	ldr	r1, [r0, #20]
   22f1a:	68e2      	ldr	r2, [r4, #12]
   22f1c:	6a20      	ldr	r0, [r4, #32]
   22f1e:	f7e9 fe15 	bl	cb4c <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   22f22:	6a23      	ldr	r3, [r4, #32]
   22f24:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   22f26:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   22f28:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   22f2a:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   22f2c:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   22f2e:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   22f30:	bf04      	itt	eq
   22f32:	6963      	ldreq	r3, [r4, #20]
   22f34:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   22f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22f38:	3301      	adds	r3, #1
   22f3a:	6263      	str	r3, [r4, #36]	; 0x24
   22f3c:	2400      	movs	r4, #0
   22f3e:	67ec      	str	r4, [r5, #124]	; 0x7c
			z_ready_thread(pending_thread);
   22f40:	f000 fe52 	bl	23be8 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   22f44:	4639      	mov	r1, r7
   22f46:	4630      	mov	r0, r6
   22f48:	f000 fc2a 	bl	237a0 <z_reschedule>
			return 0;
   22f4c:	4625      	mov	r5, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   22f4e:	4628      	mov	r0, r5
   22f50:	b003      	add	sp, #12
   22f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22f56:	ea58 0309 	orrs.w	r3, r8, r9
   22f5a:	d00b      	beq.n	22f74 <z_impl_k_msgq_get+0x100>
		_current->base.swap_data = data;
   22f5c:	4b19      	ldr	r3, [pc, #100]	; (22fc4 <z_impl_k_msgq_get+0x150>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22f5e:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   22f60:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22f62:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   22f64:	615d      	str	r5, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22f66:	4630      	mov	r0, r6
   22f68:	e9cd 8900 	strd	r8, r9, [sp]
   22f6c:	f001 f9ce 	bl	2430c <z_pend_curr>
   22f70:	4605      	mov	r5, r0
   22f72:	e7ec      	b.n	22f4e <z_impl_k_msgq_get+0xda>
		result = -ENOMSG;
   22f74:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22f78:	4630      	mov	r0, r6
   22f7a:	f001 fed1 	bl	24d20 <z_spin_unlock_valid>
   22f7e:	b968      	cbnz	r0, 22f9c <z_impl_k_msgq_get+0x128>
   22f80:	2384      	movs	r3, #132	; 0x84
   22f82:	4a0d      	ldr	r2, [pc, #52]	; (22fb8 <z_impl_k_msgq_get+0x144>)
   22f84:	4910      	ldr	r1, [pc, #64]	; (22fc8 <z_impl_k_msgq_get+0x154>)
   22f86:	480a      	ldr	r0, [pc, #40]	; (22fb0 <z_impl_k_msgq_get+0x13c>)
   22f88:	f009 fa53 	bl	2c432 <printk>
   22f8c:	4631      	mov	r1, r6
   22f8e:	480f      	ldr	r0, [pc, #60]	; (22fcc <z_impl_k_msgq_get+0x158>)
   22f90:	f009 fa4f 	bl	2c432 <printk>
   22f94:	2184      	movs	r1, #132	; 0x84
   22f96:	4808      	ldr	r0, [pc, #32]	; (22fb8 <z_impl_k_msgq_get+0x144>)
   22f98:	f009 fc68 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   22f9c:	f387 8811 	msr	BASEPRI, r7
   22fa0:	f3bf 8f6f 	isb	sy
	return result;
   22fa4:	e7d3      	b.n	22f4e <z_impl_k_msgq_get+0xda>
   22fa6:	bf00      	nop
   22fa8:	00032dd3 	.word	0x00032dd3
   22fac:	00032e5a 	.word	0x00032e5a
   22fb0:	00030166 	.word	0x00030166
   22fb4:	00030a10 	.word	0x00030a10
   22fb8:	000304b3 	.word	0x000304b3
   22fbc:	00030505 	.word	0x00030505
   22fc0:	0003051a 	.word	0x0003051a
   22fc4:	20021de0 	.word	0x20021de0
   22fc8:	000304d9 	.word	0x000304d9
   22fcc:	000304f0 	.word	0x000304f0

00022fd0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   22fd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22fd4:	4604      	mov	r4, r0
   22fd6:	4616      	mov	r6, r2
   22fd8:	461f      	mov	r7, r3
   22fda:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   22fde:	b163      	cbz	r3, 22ffa <z_impl_k_mutex_lock+0x2a>
   22fe0:	496d      	ldr	r1, [pc, #436]	; (23198 <z_impl_k_mutex_lock+0x1c8>)
   22fe2:	237d      	movs	r3, #125	; 0x7d
   22fe4:	4a6d      	ldr	r2, [pc, #436]	; (2319c <z_impl_k_mutex_lock+0x1cc>)
   22fe6:	486e      	ldr	r0, [pc, #440]	; (231a0 <z_impl_k_mutex_lock+0x1d0>)
   22fe8:	f009 fa23 	bl	2c432 <printk>
   22fec:	486d      	ldr	r0, [pc, #436]	; (231a4 <z_impl_k_mutex_lock+0x1d4>)
   22fee:	f009 fa20 	bl	2c432 <printk>
   22ff2:	217d      	movs	r1, #125	; 0x7d
   22ff4:	4869      	ldr	r0, [pc, #420]	; (2319c <z_impl_k_mutex_lock+0x1cc>)
   22ff6:	f009 fc39 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   22ffa:	f04f 0320 	mov.w	r3, #32
   22ffe:	f3ef 8811 	mrs	r8, BASEPRI
   23002:	f383 8811 	msr	BASEPRI, r3
   23006:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2300a:	4867      	ldr	r0, [pc, #412]	; (231a8 <z_impl_k_mutex_lock+0x1d8>)
   2300c:	f001 fe7a 	bl	24d04 <z_spin_lock_valid>
   23010:	b968      	cbnz	r0, 2302e <z_impl_k_mutex_lock+0x5e>
   23012:	235c      	movs	r3, #92	; 0x5c
   23014:	4a65      	ldr	r2, [pc, #404]	; (231ac <z_impl_k_mutex_lock+0x1dc>)
   23016:	4966      	ldr	r1, [pc, #408]	; (231b0 <z_impl_k_mutex_lock+0x1e0>)
   23018:	4861      	ldr	r0, [pc, #388]	; (231a0 <z_impl_k_mutex_lock+0x1d0>)
   2301a:	f009 fa0a 	bl	2c432 <printk>
   2301e:	4962      	ldr	r1, [pc, #392]	; (231a8 <z_impl_k_mutex_lock+0x1d8>)
   23020:	4864      	ldr	r0, [pc, #400]	; (231b4 <z_impl_k_mutex_lock+0x1e4>)
   23022:	f009 fa06 	bl	2c432 <printk>
   23026:	215c      	movs	r1, #92	; 0x5c
   23028:	4860      	ldr	r0, [pc, #384]	; (231ac <z_impl_k_mutex_lock+0x1dc>)
   2302a:	f009 fc1f 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   2302e:	485e      	ldr	r0, [pc, #376]	; (231a8 <z_impl_k_mutex_lock+0x1d8>)
   23030:	f001 fe86 	bl	24d40 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   23034:	68e3      	ldr	r3, [r4, #12]
   23036:	4a60      	ldr	r2, [pc, #384]	; (231b8 <z_impl_k_mutex_lock+0x1e8>)
   23038:	b1fb      	cbz	r3, 2307a <z_impl_k_mutex_lock+0xaa>
   2303a:	68a0      	ldr	r0, [r4, #8]
   2303c:	6891      	ldr	r1, [r2, #8]
   2303e:	4288      	cmp	r0, r1
   23040:	d03d      	beq.n	230be <z_impl_k_mutex_lock+0xee>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   23042:	ea56 0307 	orrs.w	r3, r6, r7
   23046:	d13c      	bne.n	230c2 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23048:	4857      	ldr	r0, [pc, #348]	; (231a8 <z_impl_k_mutex_lock+0x1d8>)
   2304a:	f001 fe69 	bl	24d20 <z_spin_unlock_valid>
   2304e:	b968      	cbnz	r0, 2306c <z_impl_k_mutex_lock+0x9c>
   23050:	2384      	movs	r3, #132	; 0x84
   23052:	4a56      	ldr	r2, [pc, #344]	; (231ac <z_impl_k_mutex_lock+0x1dc>)
   23054:	4959      	ldr	r1, [pc, #356]	; (231bc <z_impl_k_mutex_lock+0x1ec>)
   23056:	4852      	ldr	r0, [pc, #328]	; (231a0 <z_impl_k_mutex_lock+0x1d0>)
   23058:	f009 f9eb 	bl	2c432 <printk>
   2305c:	4952      	ldr	r1, [pc, #328]	; (231a8 <z_impl_k_mutex_lock+0x1d8>)
   2305e:	4858      	ldr	r0, [pc, #352]	; (231c0 <z_impl_k_mutex_lock+0x1f0>)
   23060:	f009 f9e7 	bl	2c432 <printk>
   23064:	2184      	movs	r1, #132	; 0x84
   23066:	4851      	ldr	r0, [pc, #324]	; (231ac <z_impl_k_mutex_lock+0x1dc>)
   23068:	f009 fc00 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   2306c:	f388 8811 	msr	BASEPRI, r8
   23070:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   23074:	f06f 000f 	mvn.w	r0, #15
   23078:	e01e      	b.n	230b8 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   2307a:	6891      	ldr	r1, [r2, #8]
   2307c:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   23080:	3301      	adds	r3, #1
   23082:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   23084:	6893      	ldr	r3, [r2, #8]
   23086:	4848      	ldr	r0, [pc, #288]	; (231a8 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   23088:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   2308a:	60a3      	str	r3, [r4, #8]
   2308c:	f001 fe48 	bl	24d20 <z_spin_unlock_valid>
   23090:	b968      	cbnz	r0, 230ae <z_impl_k_mutex_lock+0xde>
   23092:	2384      	movs	r3, #132	; 0x84
   23094:	4a45      	ldr	r2, [pc, #276]	; (231ac <z_impl_k_mutex_lock+0x1dc>)
   23096:	4949      	ldr	r1, [pc, #292]	; (231bc <z_impl_k_mutex_lock+0x1ec>)
   23098:	4841      	ldr	r0, [pc, #260]	; (231a0 <z_impl_k_mutex_lock+0x1d0>)
   2309a:	f009 f9ca 	bl	2c432 <printk>
   2309e:	4942      	ldr	r1, [pc, #264]	; (231a8 <z_impl_k_mutex_lock+0x1d8>)
   230a0:	4847      	ldr	r0, [pc, #284]	; (231c0 <z_impl_k_mutex_lock+0x1f0>)
   230a2:	f009 f9c6 	bl	2c432 <printk>
   230a6:	2184      	movs	r1, #132	; 0x84
   230a8:	4840      	ldr	r0, [pc, #256]	; (231ac <z_impl_k_mutex_lock+0x1dc>)
   230aa:	f009 fbdf 	bl	2c86c <assert_post_action>
   230ae:	f388 8811 	msr	BASEPRI, r8
   230b2:	f3bf 8f6f 	isb	sy
		return 0;
   230b6:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   230b8:	b002      	add	sp, #8
   230ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   230be:	6921      	ldr	r1, [r4, #16]
   230c0:	e7de      	b.n	23080 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   230c2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   230c6:	f991 100e 	ldrsb.w	r1, [r1, #14]
   230ca:	4299      	cmp	r1, r3
   230cc:	bfa8      	it	ge
   230ce:	4619      	movge	r1, r3
   230d0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   230d4:	4299      	cmp	r1, r3
   230d6:	da41      	bge.n	2315c <z_impl_k_mutex_lock+0x18c>
		return z_set_prio(mutex->owner, new_prio);
   230d8:	f001 f948 	bl	2436c <z_set_prio>
   230dc:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   230de:	4622      	mov	r2, r4
   230e0:	4641      	mov	r1, r8
   230e2:	e9cd 6700 	strd	r6, r7, [sp]
   230e6:	4830      	ldr	r0, [pc, #192]	; (231a8 <z_impl_k_mutex_lock+0x1d8>)
   230e8:	f001 f910 	bl	2430c <z_pend_curr>
	if (got_mutex == 0) {
   230ec:	2800      	cmp	r0, #0
   230ee:	d0e3      	beq.n	230b8 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   230f0:	f04f 0320 	mov.w	r3, #32
   230f4:	f3ef 8611 	mrs	r6, BASEPRI
   230f8:	f383 8811 	msr	BASEPRI, r3
   230fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23100:	4829      	ldr	r0, [pc, #164]	; (231a8 <z_impl_k_mutex_lock+0x1d8>)
   23102:	f001 fdff 	bl	24d04 <z_spin_lock_valid>
   23106:	b968      	cbnz	r0, 23124 <z_impl_k_mutex_lock+0x154>
   23108:	235c      	movs	r3, #92	; 0x5c
   2310a:	4a28      	ldr	r2, [pc, #160]	; (231ac <z_impl_k_mutex_lock+0x1dc>)
   2310c:	4928      	ldr	r1, [pc, #160]	; (231b0 <z_impl_k_mutex_lock+0x1e0>)
   2310e:	4824      	ldr	r0, [pc, #144]	; (231a0 <z_impl_k_mutex_lock+0x1d0>)
   23110:	f009 f98f 	bl	2c432 <printk>
   23114:	4924      	ldr	r1, [pc, #144]	; (231a8 <z_impl_k_mutex_lock+0x1d8>)
   23116:	4827      	ldr	r0, [pc, #156]	; (231b4 <z_impl_k_mutex_lock+0x1e4>)
   23118:	f009 f98b 	bl	2c432 <printk>
   2311c:	215c      	movs	r1, #92	; 0x5c
   2311e:	4823      	ldr	r0, [pc, #140]	; (231ac <z_impl_k_mutex_lock+0x1dc>)
   23120:	f009 fba4 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   23124:	4820      	ldr	r0, [pc, #128]	; (231a8 <z_impl_k_mutex_lock+0x1d8>)
   23126:	f001 fe0b 	bl	24d40 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   2312a:	6823      	ldr	r3, [r4, #0]
   2312c:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2312e:	42a3      	cmp	r3, r4
   23130:	d007      	beq.n	23142 <z_impl_k_mutex_lock+0x172>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   23132:	b133      	cbz	r3, 23142 <z_impl_k_mutex_lock+0x172>
   23134:	f993 300e 	ldrsb.w	r3, [r3, #14]
   23138:	4299      	cmp	r1, r3
   2313a:	bfa8      	it	ge
   2313c:	4619      	movge	r1, r3
   2313e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   23142:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   23144:	f990 300e 	ldrsb.w	r3, [r0, #14]
   23148:	4299      	cmp	r1, r3
   2314a:	d109      	bne.n	23160 <z_impl_k_mutex_lock+0x190>
	if (resched) {
   2314c:	b16d      	cbz	r5, 2316a <z_impl_k_mutex_lock+0x19a>
		z_reschedule(&lock, key);
   2314e:	4631      	mov	r1, r6
   23150:	4815      	ldr	r0, [pc, #84]	; (231a8 <z_impl_k_mutex_lock+0x1d8>)
   23152:	f000 fb25 	bl	237a0 <z_reschedule>
	return -EAGAIN;
   23156:	f06f 000a 	mvn.w	r0, #10
   2315a:	e7ad      	b.n	230b8 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   2315c:	2500      	movs	r5, #0
   2315e:	e7be      	b.n	230de <z_impl_k_mutex_lock+0x10e>
		return z_set_prio(mutex->owner, new_prio);
   23160:	f001 f904 	bl	2436c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   23164:	2800      	cmp	r0, #0
   23166:	d1f2      	bne.n	2314e <z_impl_k_mutex_lock+0x17e>
   23168:	e7f0      	b.n	2314c <z_impl_k_mutex_lock+0x17c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2316a:	480f      	ldr	r0, [pc, #60]	; (231a8 <z_impl_k_mutex_lock+0x1d8>)
   2316c:	f001 fdd8 	bl	24d20 <z_spin_unlock_valid>
   23170:	b968      	cbnz	r0, 2318e <z_impl_k_mutex_lock+0x1be>
   23172:	2384      	movs	r3, #132	; 0x84
   23174:	4a0d      	ldr	r2, [pc, #52]	; (231ac <z_impl_k_mutex_lock+0x1dc>)
   23176:	4911      	ldr	r1, [pc, #68]	; (231bc <z_impl_k_mutex_lock+0x1ec>)
   23178:	4809      	ldr	r0, [pc, #36]	; (231a0 <z_impl_k_mutex_lock+0x1d0>)
   2317a:	f009 f95a 	bl	2c432 <printk>
   2317e:	490a      	ldr	r1, [pc, #40]	; (231a8 <z_impl_k_mutex_lock+0x1d8>)
   23180:	480f      	ldr	r0, [pc, #60]	; (231c0 <z_impl_k_mutex_lock+0x1f0>)
   23182:	f009 f956 	bl	2c432 <printk>
   23186:	2184      	movs	r1, #132	; 0x84
   23188:	4808      	ldr	r0, [pc, #32]	; (231ac <z_impl_k_mutex_lock+0x1dc>)
   2318a:	f009 fb6f 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   2318e:	f386 8811 	msr	BASEPRI, r6
   23192:	f3bf 8f6f 	isb	sy
   23196:	e7de      	b.n	23156 <z_impl_k_mutex_lock+0x186>
   23198:	00032e9e 	.word	0x00032e9e
   2319c:	00032e7c 	.word	0x00032e7c
   231a0:	00030166 	.word	0x00030166
   231a4:	00032eb0 	.word	0x00032eb0
   231a8:	20021ddc 	.word	0x20021ddc
   231ac:	000304b3 	.word	0x000304b3
   231b0:	00030505 	.word	0x00030505
   231b4:	0003051a 	.word	0x0003051a
   231b8:	20021de0 	.word	0x20021de0
   231bc:	000304d9 	.word	0x000304d9
   231c0:	000304f0 	.word	0x000304f0

000231c4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   231c4:	b538      	push	{r3, r4, r5, lr}
   231c6:	4604      	mov	r4, r0
   231c8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   231cc:	b163      	cbz	r3, 231e8 <z_impl_k_mutex_unlock+0x24>
   231ce:	4954      	ldr	r1, [pc, #336]	; (23320 <z_impl_k_mutex_unlock+0x15c>)
   231d0:	23d8      	movs	r3, #216	; 0xd8
   231d2:	4a54      	ldr	r2, [pc, #336]	; (23324 <z_impl_k_mutex_unlock+0x160>)
   231d4:	4854      	ldr	r0, [pc, #336]	; (23328 <z_impl_k_mutex_unlock+0x164>)
   231d6:	f009 f92c 	bl	2c432 <printk>
   231da:	4854      	ldr	r0, [pc, #336]	; (2332c <z_impl_k_mutex_unlock+0x168>)
   231dc:	f009 f929 	bl	2c432 <printk>
   231e0:	21d8      	movs	r1, #216	; 0xd8
   231e2:	4850      	ldr	r0, [pc, #320]	; (23324 <z_impl_k_mutex_unlock+0x160>)
   231e4:	f009 fb42 	bl	2c86c <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   231e8:	68a3      	ldr	r3, [r4, #8]
   231ea:	2b00      	cmp	r3, #0
   231ec:	f000 8091 	beq.w	23312 <z_impl_k_mutex_unlock+0x14e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   231f0:	4d4f      	ldr	r5, [pc, #316]	; (23330 <z_impl_k_mutex_unlock+0x16c>)
   231f2:	68aa      	ldr	r2, [r5, #8]
   231f4:	4293      	cmp	r3, r2
   231f6:	f040 808f 	bne.w	23318 <z_impl_k_mutex_unlock+0x154>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   231fa:	68e3      	ldr	r3, [r4, #12]
   231fc:	b94b      	cbnz	r3, 23212 <z_impl_k_mutex_unlock+0x4e>
   231fe:	494d      	ldr	r1, [pc, #308]	; (23334 <z_impl_k_mutex_unlock+0x170>)
   23200:	4849      	ldr	r0, [pc, #292]	; (23328 <z_impl_k_mutex_unlock+0x164>)
   23202:	23ea      	movs	r3, #234	; 0xea
   23204:	4a47      	ldr	r2, [pc, #284]	; (23324 <z_impl_k_mutex_unlock+0x160>)
   23206:	f009 f914 	bl	2c432 <printk>
   2320a:	21ea      	movs	r1, #234	; 0xea
   2320c:	4845      	ldr	r0, [pc, #276]	; (23324 <z_impl_k_mutex_unlock+0x160>)
   2320e:	f009 fb2d 	bl	2c86c <assert_post_action>
   23212:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   23216:	b173      	cbz	r3, 23236 <z_impl_k_mutex_unlock+0x72>
   23218:	4941      	ldr	r1, [pc, #260]	; (23320 <z_impl_k_mutex_unlock+0x15c>)
   2321a:	f44f 7386 	mov.w	r3, #268	; 0x10c
   2321e:	4a46      	ldr	r2, [pc, #280]	; (23338 <z_impl_k_mutex_unlock+0x174>)
   23220:	4841      	ldr	r0, [pc, #260]	; (23328 <z_impl_k_mutex_unlock+0x164>)
   23222:	f009 f906 	bl	2c432 <printk>
   23226:	4845      	ldr	r0, [pc, #276]	; (2333c <z_impl_k_mutex_unlock+0x178>)
   23228:	f009 f903 	bl	2c432 <printk>
   2322c:	f44f 7186 	mov.w	r1, #268	; 0x10c
   23230:	4841      	ldr	r0, [pc, #260]	; (23338 <z_impl_k_mutex_unlock+0x174>)
   23232:	f009 fb1b 	bl	2c86c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   23236:	68ab      	ldr	r3, [r5, #8]
   23238:	7bdb      	ldrb	r3, [r3, #15]
   2323a:	2b01      	cmp	r3, #1
   2323c:	d10e      	bne.n	2325c <z_impl_k_mutex_unlock+0x98>
   2323e:	4940      	ldr	r1, [pc, #256]	; (23340 <z_impl_k_mutex_unlock+0x17c>)
   23240:	f240 130d 	movw	r3, #269	; 0x10d
   23244:	4a3c      	ldr	r2, [pc, #240]	; (23338 <z_impl_k_mutex_unlock+0x174>)
   23246:	4838      	ldr	r0, [pc, #224]	; (23328 <z_impl_k_mutex_unlock+0x164>)
   23248:	f009 f8f3 	bl	2c432 <printk>
   2324c:	483b      	ldr	r0, [pc, #236]	; (2333c <z_impl_k_mutex_unlock+0x178>)
   2324e:	f009 f8f0 	bl	2c432 <printk>
   23252:	f240 110d 	movw	r1, #269	; 0x10d
   23256:	4838      	ldr	r0, [pc, #224]	; (23338 <z_impl_k_mutex_unlock+0x174>)
   23258:	f009 fb08 	bl	2c86c <assert_post_action>

	--_current->base.sched_locked;
   2325c:	68aa      	ldr	r2, [r5, #8]
   2325e:	7bd3      	ldrb	r3, [r2, #15]
   23260:	3b01      	subs	r3, #1
   23262:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   23264:	68e3      	ldr	r3, [r4, #12]
   23266:	2b01      	cmp	r3, #1
   23268:	d005      	beq.n	23276 <z_impl_k_mutex_unlock+0xb2>
		mutex->lock_count--;
   2326a:	3b01      	subs	r3, #1
   2326c:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   2326e:	f000 fbf1 	bl	23a54 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   23272:	2000      	movs	r0, #0
}
   23274:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   23276:	f04f 0320 	mov.w	r3, #32
   2327a:	f3ef 8511 	mrs	r5, BASEPRI
   2327e:	f383 8811 	msr	BASEPRI, r3
   23282:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23286:	482f      	ldr	r0, [pc, #188]	; (23344 <z_impl_k_mutex_unlock+0x180>)
   23288:	f001 fd3c 	bl	24d04 <z_spin_lock_valid>
   2328c:	b968      	cbnz	r0, 232aa <z_impl_k_mutex_unlock+0xe6>
   2328e:	235c      	movs	r3, #92	; 0x5c
   23290:	4a2d      	ldr	r2, [pc, #180]	; (23348 <z_impl_k_mutex_unlock+0x184>)
   23292:	492e      	ldr	r1, [pc, #184]	; (2334c <z_impl_k_mutex_unlock+0x188>)
   23294:	4824      	ldr	r0, [pc, #144]	; (23328 <z_impl_k_mutex_unlock+0x164>)
   23296:	f009 f8cc 	bl	2c432 <printk>
   2329a:	492a      	ldr	r1, [pc, #168]	; (23344 <z_impl_k_mutex_unlock+0x180>)
   2329c:	482c      	ldr	r0, [pc, #176]	; (23350 <z_impl_k_mutex_unlock+0x18c>)
   2329e:	f009 f8c8 	bl	2c432 <printk>
   232a2:	215c      	movs	r1, #92	; 0x5c
   232a4:	4828      	ldr	r0, [pc, #160]	; (23348 <z_impl_k_mutex_unlock+0x184>)
   232a6:	f009 fae1 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   232aa:	4826      	ldr	r0, [pc, #152]	; (23344 <z_impl_k_mutex_unlock+0x180>)
   232ac:	f001 fd48 	bl	24d40 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   232b0:	68a0      	ldr	r0, [r4, #8]
   232b2:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   232b4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   232b8:	4299      	cmp	r1, r3
   232ba:	d001      	beq.n	232c0 <z_impl_k_mutex_unlock+0xfc>
		return z_set_prio(mutex->owner, new_prio);
   232bc:	f001 f856 	bl	2436c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   232c0:	4620      	mov	r0, r4
   232c2:	f001 f8e9 	bl	24498 <z_unpend_first_thread>
	mutex->owner = new_owner;
   232c6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   232c8:	b158      	cbz	r0, 232e2 <z_impl_k_mutex_unlock+0x11e>
		mutex->owner_orig_prio = new_owner->base.prio;
   232ca:	f990 200e 	ldrsb.w	r2, [r0, #14]
   232ce:	6122      	str	r2, [r4, #16]
   232d0:	2200      	movs	r2, #0
   232d2:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   232d4:	f000 fc88 	bl	23be8 <z_ready_thread>
		z_reschedule(&lock, key);
   232d8:	4629      	mov	r1, r5
   232da:	481a      	ldr	r0, [pc, #104]	; (23344 <z_impl_k_mutex_unlock+0x180>)
   232dc:	f000 fa60 	bl	237a0 <z_reschedule>
   232e0:	e7c5      	b.n	2326e <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count = 0U;
   232e2:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   232e4:	4817      	ldr	r0, [pc, #92]	; (23344 <z_impl_k_mutex_unlock+0x180>)
   232e6:	f001 fd1b 	bl	24d20 <z_spin_unlock_valid>
   232ea:	b968      	cbnz	r0, 23308 <z_impl_k_mutex_unlock+0x144>
   232ec:	2384      	movs	r3, #132	; 0x84
   232ee:	4a16      	ldr	r2, [pc, #88]	; (23348 <z_impl_k_mutex_unlock+0x184>)
   232f0:	4918      	ldr	r1, [pc, #96]	; (23354 <z_impl_k_mutex_unlock+0x190>)
   232f2:	480d      	ldr	r0, [pc, #52]	; (23328 <z_impl_k_mutex_unlock+0x164>)
   232f4:	f009 f89d 	bl	2c432 <printk>
   232f8:	4912      	ldr	r1, [pc, #72]	; (23344 <z_impl_k_mutex_unlock+0x180>)
   232fa:	4817      	ldr	r0, [pc, #92]	; (23358 <z_impl_k_mutex_unlock+0x194>)
   232fc:	f009 f899 	bl	2c432 <printk>
   23300:	2184      	movs	r1, #132	; 0x84
   23302:	4811      	ldr	r0, [pc, #68]	; (23348 <z_impl_k_mutex_unlock+0x184>)
   23304:	f009 fab2 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   23308:	f385 8811 	msr	BASEPRI, r5
   2330c:	f3bf 8f6f 	isb	sy
   23310:	e7ad      	b.n	2326e <z_impl_k_mutex_unlock+0xaa>
		return -EINVAL;
   23312:	f06f 0015 	mvn.w	r0, #21
   23316:	e7ad      	b.n	23274 <z_impl_k_mutex_unlock+0xb0>
		return -EPERM;
   23318:	f04f 30ff 	mov.w	r0, #4294967295
   2331c:	e7aa      	b.n	23274 <z_impl_k_mutex_unlock+0xb0>
   2331e:	bf00      	nop
   23320:	00032e9e 	.word	0x00032e9e
   23324:	00032e7c 	.word	0x00032e7c
   23328:	00030166 	.word	0x00030166
   2332c:	00032eb0 	.word	0x00032eb0
   23330:	20021de0 	.word	0x20021de0
   23334:	00032ed5 	.word	0x00032ed5
   23338:	00032eec 	.word	0x00032eec
   2333c:	00030a10 	.word	0x00030a10
   23340:	00032f17 	.word	0x00032f17
   23344:	20021ddc 	.word	0x20021ddc
   23348:	000304b3 	.word	0x000304b3
   2334c:	00030505 	.word	0x00030505
   23350:	0003051a 	.word	0x0003051a
   23354:	000304d9 	.word	0x000304d9
   23358:	000304f0 	.word	0x000304f0

0002335c <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   2335c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23360:	4604      	mov	r4, r0
   23362:	460e      	mov	r6, r1
   23364:	4690      	mov	r8, r2
   23366:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   23368:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2336c:	f04f 0320 	mov.w	r3, #32
   23370:	f3ef 8711 	mrs	r7, BASEPRI
   23374:	f383 8811 	msr	BASEPRI, r3
   23378:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2337c:	4628      	mov	r0, r5
   2337e:	f001 fcc1 	bl	24d04 <z_spin_lock_valid>
   23382:	b968      	cbnz	r0, 233a0 <queue_insert+0x44>
   23384:	235c      	movs	r3, #92	; 0x5c
   23386:	4a39      	ldr	r2, [pc, #228]	; (2346c <queue_insert+0x110>)
   23388:	4939      	ldr	r1, [pc, #228]	; (23470 <queue_insert+0x114>)
   2338a:	483a      	ldr	r0, [pc, #232]	; (23474 <queue_insert+0x118>)
   2338c:	f009 f851 	bl	2c432 <printk>
   23390:	4629      	mov	r1, r5
   23392:	4839      	ldr	r0, [pc, #228]	; (23478 <queue_insert+0x11c>)
   23394:	f009 f84d 	bl	2c432 <printk>
   23398:	215c      	movs	r1, #92	; 0x5c
   2339a:	4834      	ldr	r0, [pc, #208]	; (2346c <queue_insert+0x110>)
   2339c:	f009 fa66 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   233a0:	4628      	mov	r0, r5
   233a2:	f001 fccd 	bl	24d40 <z_spin_lock_set_owner>
	struct k_thread *first_pending_thread;

	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   233a6:	f104 000c 	add.w	r0, r4, #12
   233aa:	f001 f875 	bl	24498 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   233ae:	b158      	cbz	r0, 233c8 <queue_insert+0x6c>
   233b0:	2400      	movs	r4, #0
   233b2:	f8c0 8014 	str.w	r8, [r0, #20]
   233b6:	67c4      	str	r4, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   233b8:	f000 fc16 	bl	23be8 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   233bc:	4628      	mov	r0, r5
   233be:	4639      	mov	r1, r7
   233c0:	f000 f9ee 	bl	237a0 <z_reschedule>
	return 0;
   233c4:	2000      	movs	r0, #0
   233c6:	e01e      	b.n	23406 <queue_insert+0xaa>
	if (alloc) {
   233c8:	f1b9 0f00 	cmp.w	r9, #0
   233cc:	d02d      	beq.n	2342a <queue_insert+0xce>
		anode = z_thread_malloc(sizeof(*anode));
   233ce:	2008      	movs	r0, #8
   233d0:	f002 fc78 	bl	25cc4 <z_thread_malloc>
		if (anode == NULL) {
   233d4:	b9c8      	cbnz	r0, 2340a <queue_insert+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   233d6:	4628      	mov	r0, r5
   233d8:	f001 fca2 	bl	24d20 <z_spin_unlock_valid>
   233dc:	b968      	cbnz	r0, 233fa <queue_insert+0x9e>
   233de:	2384      	movs	r3, #132	; 0x84
   233e0:	4a22      	ldr	r2, [pc, #136]	; (2346c <queue_insert+0x110>)
   233e2:	4926      	ldr	r1, [pc, #152]	; (2347c <queue_insert+0x120>)
   233e4:	4823      	ldr	r0, [pc, #140]	; (23474 <queue_insert+0x118>)
   233e6:	f009 f824 	bl	2c432 <printk>
   233ea:	4629      	mov	r1, r5
   233ec:	4824      	ldr	r0, [pc, #144]	; (23480 <queue_insert+0x124>)
   233ee:	f009 f820 	bl	2c432 <printk>
   233f2:	2184      	movs	r1, #132	; 0x84
   233f4:	481d      	ldr	r0, [pc, #116]	; (2346c <queue_insert+0x110>)
   233f6:	f009 fa39 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   233fa:	f387 8811 	msr	BASEPRI, r7
   233fe:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   23402:	f06f 000b 	mvn.w	r0, #11
}
   23406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2340a:	2301      	movs	r3, #1
		anode->data = data;
   2340c:	f8c0 8004 	str.w	r8, [r0, #4]
   23410:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   23412:	6803      	ldr	r3, [r0, #0]
   23414:	f003 0303 	and.w	r3, r3, #3
   23418:	b95e      	cbnz	r6, 23432 <queue_insert+0xd6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2341a:	6822      	ldr	r2, [r4, #0]
   2341c:	4313      	orrs	r3, r2
   2341e:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   23420:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   23422:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   23424:	b973      	cbnz	r3, 23444 <queue_insert+0xe8>
	list->tail = node;
   23426:	6060      	str	r0, [r4, #4]
}
   23428:	e00c      	b.n	23444 <queue_insert+0xe8>
}
   2342a:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   2342c:	f8c8 9000 	str.w	r9, [r8]
}
   23430:	e7ef      	b.n	23412 <queue_insert+0xb6>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23432:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   23434:	f032 0203 	bics.w	r2, r2, #3
   23438:	d110      	bne.n	2345c <queue_insert+0x100>
Z_GENLIST_APPEND(sflist, sfnode)
   2343a:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2343c:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2343e:	b93a      	cbnz	r2, 23450 <queue_insert+0xf4>
	list->head = node;
   23440:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   23444:	2104      	movs	r1, #4
   23446:	f104 0014 	add.w	r0, r4, #20
   2344a:	f00b fc2d 	bl	2eca8 <z_handle_obj_poll_events>
   2344e:	e7b5      	b.n	233bc <queue_insert+0x60>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23450:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   23452:	f003 0303 	and.w	r3, r3, #3
   23456:	4303      	orrs	r3, r0
   23458:	6013      	str	r3, [r2, #0]
   2345a:	e7e4      	b.n	23426 <queue_insert+0xca>
   2345c:	4313      	orrs	r3, r2
   2345e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23460:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   23462:	f003 0303 	and.w	r3, r3, #3
   23466:	4303      	orrs	r3, r0
   23468:	6033      	str	r3, [r6, #0]
}
   2346a:	e7eb      	b.n	23444 <queue_insert+0xe8>
   2346c:	000304b3 	.word	0x000304b3
   23470:	00030505 	.word	0x00030505
   23474:	00030166 	.word	0x00030166
   23478:	0003051a 	.word	0x0003051a
   2347c:	000304d9 	.word	0x000304d9
   23480:	000304f0 	.word	0x000304f0

00023484 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   23484:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23488:	4606      	mov	r6, r0
   2348a:	4690      	mov	r8, r2
   2348c:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2348e:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   23492:	f04f 0320 	mov.w	r3, #32
   23496:	f3ef 8711 	mrs	r7, BASEPRI
   2349a:	f383 8811 	msr	BASEPRI, r3
   2349e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   234a2:	4628      	mov	r0, r5
   234a4:	f001 fc2e 	bl	24d04 <z_spin_lock_valid>
   234a8:	b968      	cbnz	r0, 234c6 <z_impl_k_queue_get+0x42>
   234aa:	235c      	movs	r3, #92	; 0x5c
   234ac:	4a25      	ldr	r2, [pc, #148]	; (23544 <z_impl_k_queue_get+0xc0>)
   234ae:	4926      	ldr	r1, [pc, #152]	; (23548 <z_impl_k_queue_get+0xc4>)
   234b0:	4826      	ldr	r0, [pc, #152]	; (2354c <z_impl_k_queue_get+0xc8>)
   234b2:	f008 ffbe 	bl	2c432 <printk>
   234b6:	4629      	mov	r1, r5
   234b8:	4825      	ldr	r0, [pc, #148]	; (23550 <z_impl_k_queue_get+0xcc>)
   234ba:	f008 ffba 	bl	2c432 <printk>
   234be:	215c      	movs	r1, #92	; 0x5c
   234c0:	4820      	ldr	r0, [pc, #128]	; (23544 <z_impl_k_queue_get+0xc0>)
   234c2:	f009 f9d3 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   234c6:	4628      	mov	r0, r5
   234c8:	f001 fc3a 	bl	24d40 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   234cc:	6834      	ldr	r4, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   234ce:	b33c      	cbz	r4, 23520 <z_impl_k_queue_get+0x9c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   234d0:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   234d2:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   234d4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   234d8:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   234da:	4620      	mov	r0, r4
   234dc:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   234e0:	6033      	str	r3, [r6, #0]
	list->tail = node;
   234e2:	bf08      	it	eq
   234e4:	6073      	streq	r3, [r6, #4]
   234e6:	f00b fa4f 	bl	2e988 <z_queue_node_peek>
   234ea:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   234ec:	4628      	mov	r0, r5
   234ee:	f001 fc17 	bl	24d20 <z_spin_unlock_valid>
   234f2:	b968      	cbnz	r0, 23510 <z_impl_k_queue_get+0x8c>
   234f4:	2384      	movs	r3, #132	; 0x84
   234f6:	4a13      	ldr	r2, [pc, #76]	; (23544 <z_impl_k_queue_get+0xc0>)
   234f8:	4916      	ldr	r1, [pc, #88]	; (23554 <z_impl_k_queue_get+0xd0>)
   234fa:	4814      	ldr	r0, [pc, #80]	; (2354c <z_impl_k_queue_get+0xc8>)
   234fc:	f008 ff99 	bl	2c432 <printk>
   23500:	4629      	mov	r1, r5
   23502:	4815      	ldr	r0, [pc, #84]	; (23558 <z_impl_k_queue_get+0xd4>)
   23504:	f008 ff95 	bl	2c432 <printk>
   23508:	2184      	movs	r1, #132	; 0x84
   2350a:	480e      	ldr	r0, [pc, #56]	; (23544 <z_impl_k_queue_get+0xc0>)
   2350c:	f009 f9ae 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   23510:	f387 8811 	msr	BASEPRI, r7
   23514:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   23518:	4620      	mov	r0, r4
   2351a:	b003      	add	sp, #12
   2351c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23520:	ea58 0309 	orrs.w	r3, r8, r9
   23524:	d0e2      	beq.n	234ec <z_impl_k_queue_get+0x68>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   23526:	4639      	mov	r1, r7
   23528:	4628      	mov	r0, r5
   2352a:	e9cd 8900 	strd	r8, r9, [sp]
   2352e:	f106 020c 	add.w	r2, r6, #12
   23532:	f000 feeb 	bl	2430c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   23536:	2800      	cmp	r0, #0
   23538:	d1ee      	bne.n	23518 <z_impl_k_queue_get+0x94>
   2353a:	4b08      	ldr	r3, [pc, #32]	; (2355c <z_impl_k_queue_get+0xd8>)
   2353c:	689b      	ldr	r3, [r3, #8]
   2353e:	695c      	ldr	r4, [r3, #20]
   23540:	e7ea      	b.n	23518 <z_impl_k_queue_get+0x94>
   23542:	bf00      	nop
   23544:	000304b3 	.word	0x000304b3
   23548:	00030505 	.word	0x00030505
   2354c:	00030166 	.word	0x00030166
   23550:	0003051a 	.word	0x0003051a
   23554:	000304d9 	.word	0x000304d9
   23558:	000304f0 	.word	0x000304f0
   2355c:	20021de0 	.word	0x20021de0

00023560 <pended_on.isra.0>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   23560:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   23562:	b510      	push	{r4, lr}
   23564:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   23566:	b95b      	cbnz	r3, 23580 <pended_on.isra.0+0x20>
   23568:	4906      	ldr	r1, [pc, #24]	; (23584 <pended_on.isra.0+0x24>)
   2356a:	4807      	ldr	r0, [pc, #28]	; (23588 <pended_on.isra.0+0x28>)
   2356c:	f240 13ed 	movw	r3, #493	; 0x1ed
   23570:	4a06      	ldr	r2, [pc, #24]	; (2358c <pended_on.isra.0+0x2c>)
   23572:	f008 ff5e 	bl	2c432 <printk>
   23576:	f240 11ed 	movw	r1, #493	; 0x1ed
   2357a:	4804      	ldr	r0, [pc, #16]	; (2358c <pended_on.isra.0+0x2c>)
   2357c:	f009 f976 	bl	2c86c <assert_post_action>

	return thread->base.pended_on;
}
   23580:	6820      	ldr	r0, [r4, #0]
   23582:	bd10      	pop	{r4, pc}
   23584:	00032f69 	.word	0x00032f69
   23588:	00030166 	.word	0x00030166
   2358c:	00032f47 	.word	0x00032f47

00023590 <z_reset_time_slice>:
{
   23590:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   23592:	4c08      	ldr	r4, [pc, #32]	; (235b4 <z_reset_time_slice+0x24>)
   23594:	6823      	ldr	r3, [r4, #0]
   23596:	b15b      	cbz	r3, 235b0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   23598:	f7f0 fefe 	bl	14398 <z_clock_elapsed>
   2359c:	6822      	ldr	r2, [r4, #0]
   2359e:	4906      	ldr	r1, [pc, #24]	; (235b8 <z_reset_time_slice+0x28>)
   235a0:	4410      	add	r0, r2
   235a2:	6108      	str	r0, [r1, #16]
}
   235a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   235a8:	2100      	movs	r1, #0
   235aa:	4610      	mov	r0, r2
   235ac:	f001 be38 	b.w	25220 <z_set_timeout_expiry>
}
   235b0:	bd10      	pop	{r4, pc}
   235b2:	bf00      	nop
   235b4:	20021e20 	.word	0x20021e20
   235b8:	20021de0 	.word	0x20021de0

000235bc <k_sched_time_slice_set>:
{
   235bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   235be:	4605      	mov	r5, r0
   235c0:	460c      	mov	r4, r1
	__asm__ volatile(
   235c2:	f04f 0320 	mov.w	r3, #32
   235c6:	f3ef 8611 	mrs	r6, BASEPRI
   235ca:	f383 8811 	msr	BASEPRI, r3
   235ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   235d2:	4820      	ldr	r0, [pc, #128]	; (23654 <k_sched_time_slice_set+0x98>)
   235d4:	f001 fb96 	bl	24d04 <z_spin_lock_valid>
   235d8:	b968      	cbnz	r0, 235f6 <k_sched_time_slice_set+0x3a>
   235da:	235c      	movs	r3, #92	; 0x5c
   235dc:	4a1e      	ldr	r2, [pc, #120]	; (23658 <k_sched_time_slice_set+0x9c>)
   235de:	491f      	ldr	r1, [pc, #124]	; (2365c <k_sched_time_slice_set+0xa0>)
   235e0:	481f      	ldr	r0, [pc, #124]	; (23660 <k_sched_time_slice_set+0xa4>)
   235e2:	f008 ff26 	bl	2c432 <printk>
   235e6:	491b      	ldr	r1, [pc, #108]	; (23654 <k_sched_time_slice_set+0x98>)
   235e8:	481e      	ldr	r0, [pc, #120]	; (23664 <k_sched_time_slice_set+0xa8>)
   235ea:	f008 ff22 	bl	2c432 <printk>
   235ee:	215c      	movs	r1, #92	; 0x5c
   235f0:	4819      	ldr	r0, [pc, #100]	; (23658 <k_sched_time_slice_set+0x9c>)
   235f2:	f009 f93b 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   235f6:	4817      	ldr	r0, [pc, #92]	; (23654 <k_sched_time_slice_set+0x98>)
   235f8:	f001 fba2 	bl	24d40 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   235fc:	f44f 4700 	mov.w	r7, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   23600:	2200      	movs	r2, #0
   23602:	f240 30e7 	movw	r0, #999	; 0x3e7
   23606:	2100      	movs	r1, #0
   23608:	4b17      	ldr	r3, [pc, #92]	; (23668 <k_sched_time_slice_set+0xac>)
   2360a:	fbe7 0105 	umlal	r0, r1, r7, r5
   2360e:	611a      	str	r2, [r3, #16]
   23610:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23614:	2300      	movs	r3, #0
   23616:	f7e9 f91f 	bl	c858 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   2361a:	4b14      	ldr	r3, [pc, #80]	; (2366c <k_sched_time_slice_set+0xb0>)
   2361c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   2361e:	4b14      	ldr	r3, [pc, #80]	; (23670 <k_sched_time_slice_set+0xb4>)
   23620:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   23622:	f7ff ffb5 	bl	23590 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23626:	480b      	ldr	r0, [pc, #44]	; (23654 <k_sched_time_slice_set+0x98>)
   23628:	f001 fb7a 	bl	24d20 <z_spin_unlock_valid>
   2362c:	b968      	cbnz	r0, 2364a <k_sched_time_slice_set+0x8e>
   2362e:	2384      	movs	r3, #132	; 0x84
   23630:	4a09      	ldr	r2, [pc, #36]	; (23658 <k_sched_time_slice_set+0x9c>)
   23632:	4910      	ldr	r1, [pc, #64]	; (23674 <k_sched_time_slice_set+0xb8>)
   23634:	480a      	ldr	r0, [pc, #40]	; (23660 <k_sched_time_slice_set+0xa4>)
   23636:	f008 fefc 	bl	2c432 <printk>
   2363a:	4906      	ldr	r1, [pc, #24]	; (23654 <k_sched_time_slice_set+0x98>)
   2363c:	480e      	ldr	r0, [pc, #56]	; (23678 <k_sched_time_slice_set+0xbc>)
   2363e:	f008 fef8 	bl	2c432 <printk>
   23642:	2184      	movs	r1, #132	; 0x84
   23644:	4804      	ldr	r0, [pc, #16]	; (23658 <k_sched_time_slice_set+0x9c>)
   23646:	f009 f911 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   2364a:	f386 8811 	msr	BASEPRI, r6
   2364e:	f3bf 8f6f 	isb	sy
}
   23652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23654:	20021e18 	.word	0x20021e18
   23658:	000304b3 	.word	0x000304b3
   2365c:	00030505 	.word	0x00030505
   23660:	00030166 	.word	0x00030166
   23664:	0003051a 	.word	0x0003051a
   23668:	20021de0 	.word	0x20021de0
   2366c:	20021e20 	.word	0x20021e20
   23670:	20021e1c 	.word	0x20021e1c
   23674:	000304d9 	.word	0x000304d9
   23678:	000304f0 	.word	0x000304f0

0002367c <z_find_first_thread_to_unpend>:
	pend(thread, wait_q, timeout);
}

ALWAYS_INLINE struct k_thread *z_find_first_thread_to_unpend(_wait_q_t *wait_q,
						     struct k_thread *from)
{
   2367c:	b538      	push	{r3, r4, r5, lr}
   2367e:	4604      	mov	r4, r0
	__asm__ volatile(
   23680:	f04f 0320 	mov.w	r3, #32
   23684:	f3ef 8511 	mrs	r5, BASEPRI
   23688:	f383 8811 	msr	BASEPRI, r3
   2368c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23690:	4818      	ldr	r0, [pc, #96]	; (236f4 <z_find_first_thread_to_unpend+0x78>)
   23692:	f001 fb37 	bl	24d04 <z_spin_lock_valid>
   23696:	b968      	cbnz	r0, 236b4 <z_find_first_thread_to_unpend+0x38>
   23698:	235c      	movs	r3, #92	; 0x5c
   2369a:	4a17      	ldr	r2, [pc, #92]	; (236f8 <z_find_first_thread_to_unpend+0x7c>)
   2369c:	4917      	ldr	r1, [pc, #92]	; (236fc <z_find_first_thread_to_unpend+0x80>)
   2369e:	4818      	ldr	r0, [pc, #96]	; (23700 <z_find_first_thread_to_unpend+0x84>)
   236a0:	f008 fec7 	bl	2c432 <printk>
   236a4:	4913      	ldr	r1, [pc, #76]	; (236f4 <z_find_first_thread_to_unpend+0x78>)
   236a6:	4817      	ldr	r0, [pc, #92]	; (23704 <z_find_first_thread_to_unpend+0x88>)
   236a8:	f008 fec3 	bl	2c432 <printk>
   236ac:	215c      	movs	r1, #92	; 0x5c
   236ae:	4812      	ldr	r0, [pc, #72]	; (236f8 <z_find_first_thread_to_unpend+0x7c>)
   236b0:	f009 f8dc 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   236b4:	480f      	ldr	r0, [pc, #60]	; (236f4 <z_find_first_thread_to_unpend+0x78>)
   236b6:	f001 fb43 	bl	24d40 <z_spin_lock_set_owner>
	ARG_UNUSED(from);

	struct k_thread *ret = NULL;

	LOCKED(&sched_spinlock) {
		ret = _priq_wait_best(&wait_q->waitq);
   236ba:	4620      	mov	r0, r4
   236bc:	f00b f9b0 	bl	2ea20 <z_priq_dumb_best>
   236c0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   236c2:	480c      	ldr	r0, [pc, #48]	; (236f4 <z_find_first_thread_to_unpend+0x78>)
   236c4:	f001 fb2c 	bl	24d20 <z_spin_unlock_valid>
   236c8:	b968      	cbnz	r0, 236e6 <z_find_first_thread_to_unpend+0x6a>
   236ca:	2384      	movs	r3, #132	; 0x84
   236cc:	4a0a      	ldr	r2, [pc, #40]	; (236f8 <z_find_first_thread_to_unpend+0x7c>)
   236ce:	490e      	ldr	r1, [pc, #56]	; (23708 <z_find_first_thread_to_unpend+0x8c>)
   236d0:	480b      	ldr	r0, [pc, #44]	; (23700 <z_find_first_thread_to_unpend+0x84>)
   236d2:	f008 feae 	bl	2c432 <printk>
   236d6:	4907      	ldr	r1, [pc, #28]	; (236f4 <z_find_first_thread_to_unpend+0x78>)
   236d8:	480c      	ldr	r0, [pc, #48]	; (2370c <z_find_first_thread_to_unpend+0x90>)
   236da:	f008 feaa 	bl	2c432 <printk>
   236de:	2184      	movs	r1, #132	; 0x84
   236e0:	4805      	ldr	r0, [pc, #20]	; (236f8 <z_find_first_thread_to_unpend+0x7c>)
   236e2:	f009 f8c3 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   236e6:	f385 8811 	msr	BASEPRI, r5
   236ea:	f3bf 8f6f 	isb	sy
	}

	return ret;
}
   236ee:	4620      	mov	r0, r4
   236f0:	bd38      	pop	{r3, r4, r5, pc}
   236f2:	bf00      	nop
   236f4:	20021e18 	.word	0x20021e18
   236f8:	000304b3 	.word	0x000304b3
   236fc:	00030505 	.word	0x00030505
   23700:	00030166 	.word	0x00030166
   23704:	0003051a 	.word	0x0003051a
   23708:	000304d9 	.word	0x000304d9
   2370c:	000304f0 	.word	0x000304f0

00023710 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   23710:	b538      	push	{r3, r4, r5, lr}
   23712:	4604      	mov	r4, r0
	__asm__ volatile(
   23714:	f04f 0320 	mov.w	r3, #32
   23718:	f3ef 8511 	mrs	r5, BASEPRI
   2371c:	f383 8811 	msr	BASEPRI, r3
   23720:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23724:	4817      	ldr	r0, [pc, #92]	; (23784 <z_unpend_thread_no_timeout+0x74>)
   23726:	f001 faed 	bl	24d04 <z_spin_lock_valid>
   2372a:	b968      	cbnz	r0, 23748 <z_unpend_thread_no_timeout+0x38>
   2372c:	235c      	movs	r3, #92	; 0x5c
   2372e:	4a16      	ldr	r2, [pc, #88]	; (23788 <z_unpend_thread_no_timeout+0x78>)
   23730:	4916      	ldr	r1, [pc, #88]	; (2378c <z_unpend_thread_no_timeout+0x7c>)
   23732:	4817      	ldr	r0, [pc, #92]	; (23790 <z_unpend_thread_no_timeout+0x80>)
   23734:	f008 fe7d 	bl	2c432 <printk>
   23738:	4912      	ldr	r1, [pc, #72]	; (23784 <z_unpend_thread_no_timeout+0x74>)
   2373a:	4816      	ldr	r0, [pc, #88]	; (23794 <z_unpend_thread_no_timeout+0x84>)
   2373c:	f008 fe79 	bl	2c432 <printk>
   23740:	215c      	movs	r1, #92	; 0x5c
   23742:	4811      	ldr	r0, [pc, #68]	; (23788 <z_unpend_thread_no_timeout+0x78>)
   23744:	f009 f892 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   23748:	480e      	ldr	r0, [pc, #56]	; (23784 <z_unpend_thread_no_timeout+0x74>)
   2374a:	f001 faf9 	bl	24d40 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   2374e:	4620      	mov	r0, r4
   23750:	f00b f957 	bl	2ea02 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23754:	480b      	ldr	r0, [pc, #44]	; (23784 <z_unpend_thread_no_timeout+0x74>)
   23756:	f001 fae3 	bl	24d20 <z_spin_unlock_valid>
   2375a:	b968      	cbnz	r0, 23778 <z_unpend_thread_no_timeout+0x68>
   2375c:	2384      	movs	r3, #132	; 0x84
   2375e:	4a0a      	ldr	r2, [pc, #40]	; (23788 <z_unpend_thread_no_timeout+0x78>)
   23760:	490d      	ldr	r1, [pc, #52]	; (23798 <z_unpend_thread_no_timeout+0x88>)
   23762:	480b      	ldr	r0, [pc, #44]	; (23790 <z_unpend_thread_no_timeout+0x80>)
   23764:	f008 fe65 	bl	2c432 <printk>
   23768:	4906      	ldr	r1, [pc, #24]	; (23784 <z_unpend_thread_no_timeout+0x74>)
   2376a:	480c      	ldr	r0, [pc, #48]	; (2379c <z_unpend_thread_no_timeout+0x8c>)
   2376c:	f008 fe61 	bl	2c432 <printk>
   23770:	2184      	movs	r1, #132	; 0x84
   23772:	4805      	ldr	r0, [pc, #20]	; (23788 <z_unpend_thread_no_timeout+0x78>)
   23774:	f009 f87a 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   23778:	f385 8811 	msr	BASEPRI, r5
   2377c:	f3bf 8f6f 	isb	sy
	}
}
   23780:	bd38      	pop	{r3, r4, r5, pc}
   23782:	bf00      	nop
   23784:	20021e18 	.word	0x20021e18
   23788:	000304b3 	.word	0x000304b3
   2378c:	00030505 	.word	0x00030505
   23790:	00030166 	.word	0x00030166
   23794:	0003051a 	.word	0x0003051a
   23798:	000304d9 	.word	0x000304d9
   2379c:	000304f0 	.word	0x000304f0

000237a0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   237a0:	b538      	push	{r3, r4, r5, lr}
   237a2:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   237a4:	460d      	mov	r5, r1
   237a6:	b9e9      	cbnz	r1, 237e4 <z_reschedule+0x44>
   237a8:	f3ef 8305 	mrs	r3, IPSR
   237ac:	b9d3      	cbnz	r3, 237e4 <z_reschedule+0x44>
	return _kernel.ready_q.cache;
   237ae:	4b19      	ldr	r3, [pc, #100]	; (23814 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   237b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   237b2:	689b      	ldr	r3, [r3, #8]
   237b4:	429a      	cmp	r2, r3
   237b6:	d015      	beq.n	237e4 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   237b8:	f001 fab2 	bl	24d20 <z_spin_unlock_valid>
   237bc:	b968      	cbnz	r0, 237da <z_reschedule+0x3a>
   237be:	239b      	movs	r3, #155	; 0x9b
   237c0:	4a15      	ldr	r2, [pc, #84]	; (23818 <z_reschedule+0x78>)
   237c2:	4916      	ldr	r1, [pc, #88]	; (2381c <z_reschedule+0x7c>)
   237c4:	4816      	ldr	r0, [pc, #88]	; (23820 <z_reschedule+0x80>)
   237c6:	f008 fe34 	bl	2c432 <printk>
   237ca:	4621      	mov	r1, r4
   237cc:	4815      	ldr	r0, [pc, #84]	; (23824 <z_reschedule+0x84>)
   237ce:	f008 fe30 	bl	2c432 <printk>
   237d2:	219b      	movs	r1, #155	; 0x9b
   237d4:	4810      	ldr	r0, [pc, #64]	; (23818 <z_reschedule+0x78>)
   237d6:	f009 f849 	bl	2c86c <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   237da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   237de:	2000      	movs	r0, #0
   237e0:	f7f0 be7c 	b.w	144dc <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   237e4:	4620      	mov	r0, r4
   237e6:	f001 fa9b 	bl	24d20 <z_spin_unlock_valid>
   237ea:	b968      	cbnz	r0, 23808 <z_reschedule+0x68>
   237ec:	2384      	movs	r3, #132	; 0x84
   237ee:	4a0a      	ldr	r2, [pc, #40]	; (23818 <z_reschedule+0x78>)
   237f0:	490a      	ldr	r1, [pc, #40]	; (2381c <z_reschedule+0x7c>)
   237f2:	480b      	ldr	r0, [pc, #44]	; (23820 <z_reschedule+0x80>)
   237f4:	f008 fe1d 	bl	2c432 <printk>
   237f8:	4621      	mov	r1, r4
   237fa:	480a      	ldr	r0, [pc, #40]	; (23824 <z_reschedule+0x84>)
   237fc:	f008 fe19 	bl	2c432 <printk>
   23800:	2184      	movs	r1, #132	; 0x84
   23802:	4805      	ldr	r0, [pc, #20]	; (23818 <z_reschedule+0x78>)
   23804:	f009 f832 	bl	2c86c <assert_post_action>
   23808:	f385 8811 	msr	BASEPRI, r5
   2380c:	f3bf 8f6f 	isb	sy
   23810:	bd38      	pop	{r3, r4, r5, pc}
   23812:	bf00      	nop
   23814:	20021de0 	.word	0x20021de0
   23818:	000304b3 	.word	0x000304b3
   2381c:	000304d9 	.word	0x000304d9
   23820:	00030166 	.word	0x00030166
   23824:	000304f0 	.word	0x000304f0

00023828 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   23828:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2382a:	f04f 0320 	mov.w	r3, #32
   2382e:	f3ef 8511 	mrs	r5, BASEPRI
   23832:	f383 8811 	msr	BASEPRI, r3
   23836:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2383a:	482b      	ldr	r0, [pc, #172]	; (238e8 <k_sched_lock+0xc0>)
   2383c:	f001 fa62 	bl	24d04 <z_spin_lock_valid>
   23840:	b968      	cbnz	r0, 2385e <k_sched_lock+0x36>
   23842:	235c      	movs	r3, #92	; 0x5c
   23844:	4a29      	ldr	r2, [pc, #164]	; (238ec <k_sched_lock+0xc4>)
   23846:	492a      	ldr	r1, [pc, #168]	; (238f0 <k_sched_lock+0xc8>)
   23848:	482a      	ldr	r0, [pc, #168]	; (238f4 <k_sched_lock+0xcc>)
   2384a:	f008 fdf2 	bl	2c432 <printk>
   2384e:	4926      	ldr	r1, [pc, #152]	; (238e8 <k_sched_lock+0xc0>)
   23850:	4829      	ldr	r0, [pc, #164]	; (238f8 <k_sched_lock+0xd0>)
   23852:	f008 fdee 	bl	2c432 <printk>
   23856:	215c      	movs	r1, #92	; 0x5c
   23858:	4824      	ldr	r0, [pc, #144]	; (238ec <k_sched_lock+0xc4>)
   2385a:	f009 f807 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   2385e:	4822      	ldr	r0, [pc, #136]	; (238e8 <k_sched_lock+0xc0>)
   23860:	f001 fa6e 	bl	24d40 <z_spin_lock_set_owner>
   23864:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   23868:	b173      	cbz	r3, 23888 <k_sched_lock+0x60>
   2386a:	4924      	ldr	r1, [pc, #144]	; (238fc <k_sched_lock+0xd4>)
   2386c:	f44f 7386 	mov.w	r3, #268	; 0x10c
   23870:	4a23      	ldr	r2, [pc, #140]	; (23900 <k_sched_lock+0xd8>)
   23872:	4820      	ldr	r0, [pc, #128]	; (238f4 <k_sched_lock+0xcc>)
   23874:	f008 fddd 	bl	2c432 <printk>
   23878:	4822      	ldr	r0, [pc, #136]	; (23904 <k_sched_lock+0xdc>)
   2387a:	f008 fdda 	bl	2c432 <printk>
   2387e:	f44f 7186 	mov.w	r1, #268	; 0x10c
   23882:	481f      	ldr	r0, [pc, #124]	; (23900 <k_sched_lock+0xd8>)
   23884:	f008 fff2 	bl	2c86c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   23888:	4c1f      	ldr	r4, [pc, #124]	; (23908 <k_sched_lock+0xe0>)
   2388a:	68a2      	ldr	r2, [r4, #8]
   2388c:	7bd2      	ldrb	r2, [r2, #15]
   2388e:	2a01      	cmp	r2, #1
   23890:	d10e      	bne.n	238b0 <k_sched_lock+0x88>
   23892:	491e      	ldr	r1, [pc, #120]	; (2390c <k_sched_lock+0xe4>)
   23894:	f240 130d 	movw	r3, #269	; 0x10d
   23898:	4a19      	ldr	r2, [pc, #100]	; (23900 <k_sched_lock+0xd8>)
   2389a:	4816      	ldr	r0, [pc, #88]	; (238f4 <k_sched_lock+0xcc>)
   2389c:	f008 fdc9 	bl	2c432 <printk>
   238a0:	4818      	ldr	r0, [pc, #96]	; (23904 <k_sched_lock+0xdc>)
   238a2:	f008 fdc6 	bl	2c432 <printk>
   238a6:	f240 110d 	movw	r1, #269	; 0x10d
   238aa:	4815      	ldr	r0, [pc, #84]	; (23900 <k_sched_lock+0xd8>)
   238ac:	f008 ffde 	bl	2c86c <assert_post_action>
	--_current->base.sched_locked;
   238b0:	68a2      	ldr	r2, [r4, #8]
   238b2:	7bd3      	ldrb	r3, [r2, #15]
   238b4:	3b01      	subs	r3, #1
   238b6:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   238b8:	480b      	ldr	r0, [pc, #44]	; (238e8 <k_sched_lock+0xc0>)
   238ba:	f001 fa31 	bl	24d20 <z_spin_unlock_valid>
   238be:	b968      	cbnz	r0, 238dc <k_sched_lock+0xb4>
   238c0:	2384      	movs	r3, #132	; 0x84
   238c2:	4a0a      	ldr	r2, [pc, #40]	; (238ec <k_sched_lock+0xc4>)
   238c4:	4912      	ldr	r1, [pc, #72]	; (23910 <k_sched_lock+0xe8>)
   238c6:	480b      	ldr	r0, [pc, #44]	; (238f4 <k_sched_lock+0xcc>)
   238c8:	f008 fdb3 	bl	2c432 <printk>
   238cc:	4906      	ldr	r1, [pc, #24]	; (238e8 <k_sched_lock+0xc0>)
   238ce:	4811      	ldr	r0, [pc, #68]	; (23914 <k_sched_lock+0xec>)
   238d0:	f008 fdaf 	bl	2c432 <printk>
   238d4:	2184      	movs	r1, #132	; 0x84
   238d6:	4805      	ldr	r0, [pc, #20]	; (238ec <k_sched_lock+0xc4>)
   238d8:	f008 ffc8 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   238dc:	f385 8811 	msr	BASEPRI, r5
   238e0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   238e4:	bd38      	pop	{r3, r4, r5, pc}
   238e6:	bf00      	nop
   238e8:	20021e18 	.word	0x20021e18
   238ec:	000304b3 	.word	0x000304b3
   238f0:	00030505 	.word	0x00030505
   238f4:	00030166 	.word	0x00030166
   238f8:	0003051a 	.word	0x0003051a
   238fc:	00032e9e 	.word	0x00032e9e
   23900:	00032eec 	.word	0x00032eec
   23904:	00030a10 	.word	0x00030a10
   23908:	20021de0 	.word	0x20021de0
   2390c:	00032f17 	.word	0x00032f17
   23910:	000304d9 	.word	0x000304d9
   23914:	000304f0 	.word	0x000304f0

00023918 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   23918:	4b11      	ldr	r3, [pc, #68]	; (23960 <z_priq_dumb_remove+0x48>)
{
   2391a:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   2391c:	f103 0228 	add.w	r2, r3, #40	; 0x28
   23920:	4282      	cmp	r2, r0
{
   23922:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   23924:	d105      	bne.n	23932 <z_priq_dumb_remove+0x1a>
   23926:	689b      	ldr	r3, [r3, #8]
   23928:	428b      	cmp	r3, r1
   2392a:	d102      	bne.n	23932 <z_priq_dumb_remove+0x1a>
   2392c:	7b4b      	ldrb	r3, [r1, #13]
   2392e:	06db      	lsls	r3, r3, #27
   23930:	d115      	bne.n	2395e <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23932:	4b0c      	ldr	r3, [pc, #48]	; (23964 <z_priq_dumb_remove+0x4c>)
   23934:	429c      	cmp	r4, r3
   23936:	d10b      	bne.n	23950 <z_priq_dumb_remove+0x38>
   23938:	490b      	ldr	r1, [pc, #44]	; (23968 <z_priq_dumb_remove+0x50>)
   2393a:	480c      	ldr	r0, [pc, #48]	; (2396c <z_priq_dumb_remove+0x54>)
   2393c:	f240 339f 	movw	r3, #927	; 0x39f
   23940:	4a0b      	ldr	r2, [pc, #44]	; (23970 <z_priq_dumb_remove+0x58>)
   23942:	f008 fd76 	bl	2c432 <printk>
   23946:	f240 319f 	movw	r1, #927	; 0x39f
   2394a:	4809      	ldr	r0, [pc, #36]	; (23970 <z_priq_dumb_remove+0x58>)
   2394c:	f008 ff8e 	bl	2c86c <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   23950:	e9d4 3200 	ldrd	r3, r2, [r4]
   23954:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   23956:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23958:	2300      	movs	r3, #0
	node->prev = NULL;
   2395a:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   2395e:	bd10      	pop	{r4, pc}
   23960:	20021de0 	.word	0x20021de0
   23964:	200211b8 	.word	0x200211b8
   23968:	00032f80 	.word	0x00032f80
   2396c:	00030166 	.word	0x00030166
   23970:	00032f47 	.word	0x00032f47

00023974 <z_unpend_thread>:
{
   23974:	b538      	push	{r3, r4, r5, lr}
   23976:	4604      	mov	r4, r0
	__asm__ volatile(
   23978:	f04f 0320 	mov.w	r3, #32
   2397c:	f3ef 8511 	mrs	r5, BASEPRI
   23980:	f383 8811 	msr	BASEPRI, r3
   23984:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23988:	4819      	ldr	r0, [pc, #100]	; (239f0 <z_unpend_thread+0x7c>)
   2398a:	f001 f9bb 	bl	24d04 <z_spin_lock_valid>
   2398e:	b968      	cbnz	r0, 239ac <z_unpend_thread+0x38>
   23990:	235c      	movs	r3, #92	; 0x5c
   23992:	4a18      	ldr	r2, [pc, #96]	; (239f4 <z_unpend_thread+0x80>)
   23994:	4918      	ldr	r1, [pc, #96]	; (239f8 <z_unpend_thread+0x84>)
   23996:	4819      	ldr	r0, [pc, #100]	; (239fc <z_unpend_thread+0x88>)
   23998:	f008 fd4b 	bl	2c432 <printk>
   2399c:	4914      	ldr	r1, [pc, #80]	; (239f0 <z_unpend_thread+0x7c>)
   2399e:	4818      	ldr	r0, [pc, #96]	; (23a00 <z_unpend_thread+0x8c>)
   239a0:	f008 fd47 	bl	2c432 <printk>
   239a4:	215c      	movs	r1, #92	; 0x5c
   239a6:	4813      	ldr	r0, [pc, #76]	; (239f4 <z_unpend_thread+0x80>)
   239a8:	f008 ff60 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   239ac:	4810      	ldr	r0, [pc, #64]	; (239f0 <z_unpend_thread+0x7c>)
   239ae:	f001 f9c7 	bl	24d40 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   239b2:	4620      	mov	r0, r4
   239b4:	f00b f825 	bl	2ea02 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   239b8:	480d      	ldr	r0, [pc, #52]	; (239f0 <z_unpend_thread+0x7c>)
   239ba:	f001 f9b1 	bl	24d20 <z_spin_unlock_valid>
   239be:	b968      	cbnz	r0, 239dc <z_unpend_thread+0x68>
   239c0:	2384      	movs	r3, #132	; 0x84
   239c2:	4a0c      	ldr	r2, [pc, #48]	; (239f4 <z_unpend_thread+0x80>)
   239c4:	490f      	ldr	r1, [pc, #60]	; (23a04 <z_unpend_thread+0x90>)
   239c6:	480d      	ldr	r0, [pc, #52]	; (239fc <z_unpend_thread+0x88>)
   239c8:	f008 fd33 	bl	2c432 <printk>
   239cc:	4908      	ldr	r1, [pc, #32]	; (239f0 <z_unpend_thread+0x7c>)
   239ce:	480e      	ldr	r0, [pc, #56]	; (23a08 <z_unpend_thread+0x94>)
   239d0:	f008 fd2f 	bl	2c432 <printk>
   239d4:	2184      	movs	r1, #132	; 0x84
   239d6:	4807      	ldr	r0, [pc, #28]	; (239f4 <z_unpend_thread+0x80>)
   239d8:	f008 ff48 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   239dc:	f385 8811 	msr	BASEPRI, r5
   239e0:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   239e4:	f104 0018 	add.w	r0, r4, #24
}
   239e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   239ec:	f001 bb82 	b.w	250f4 <z_abort_timeout>
   239f0:	20021e18 	.word	0x20021e18
   239f4:	000304b3 	.word	0x000304b3
   239f8:	00030505 	.word	0x00030505
   239fc:	00030166 	.word	0x00030166
   23a00:	0003051a 	.word	0x0003051a
   23a04:	000304d9 	.word	0x000304d9
   23a08:	000304f0 	.word	0x000304f0

00023a0c <update_cache>:
{
   23a0c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   23a0e:	4c10      	ldr	r4, [pc, #64]	; (23a50 <update_cache+0x44>)
{
   23a10:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   23a12:	f104 0028 	add.w	r0, r4, #40	; 0x28
   23a16:	f00b f803 	bl	2ea20 <z_priq_dumb_best>
   23a1a:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   23a1c:	68a3      	ldr	r3, [r4, #8]
   23a1e:	7b59      	ldrb	r1, [r3, #13]
   23a20:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   23a22:	bf44      	itt	mi
   23a24:	f041 0108 	orrmi.w	r1, r1, #8
   23a28:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   23a2a:	b905      	cbnz	r5, 23a2e <update_cache+0x22>
   23a2c:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   23a2e:	b94e      	cbnz	r6, 23a44 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   23a30:	7b5a      	ldrb	r2, [r3, #13]
   23a32:	06d2      	lsls	r2, r2, #27
   23a34:	d106      	bne.n	23a44 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   23a36:	69aa      	ldr	r2, [r5, #24]
   23a38:	b922      	cbnz	r2, 23a44 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   23a3a:	89da      	ldrh	r2, [r3, #14]
   23a3c:	2a7f      	cmp	r2, #127	; 0x7f
   23a3e:	d901      	bls.n	23a44 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   23a40:	6263      	str	r3, [r4, #36]	; 0x24
}
   23a42:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   23a44:	42ab      	cmp	r3, r5
   23a46:	d001      	beq.n	23a4c <update_cache+0x40>
			z_reset_time_slice();
   23a48:	f7ff fda2 	bl	23590 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   23a4c:	6265      	str	r5, [r4, #36]	; 0x24
}
   23a4e:	e7f8      	b.n	23a42 <update_cache+0x36>
   23a50:	20021de0 	.word	0x20021de0

00023a54 <k_sched_unlock>:
{
   23a54:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23a56:	f04f 0320 	mov.w	r3, #32
   23a5a:	f3ef 8511 	mrs	r5, BASEPRI
   23a5e:	f383 8811 	msr	BASEPRI, r3
   23a62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23a66:	482d      	ldr	r0, [pc, #180]	; (23b1c <k_sched_unlock+0xc8>)
   23a68:	f001 f94c 	bl	24d04 <z_spin_lock_valid>
   23a6c:	b968      	cbnz	r0, 23a8a <k_sched_unlock+0x36>
   23a6e:	235c      	movs	r3, #92	; 0x5c
   23a70:	4a2b      	ldr	r2, [pc, #172]	; (23b20 <k_sched_unlock+0xcc>)
   23a72:	492c      	ldr	r1, [pc, #176]	; (23b24 <k_sched_unlock+0xd0>)
   23a74:	482c      	ldr	r0, [pc, #176]	; (23b28 <k_sched_unlock+0xd4>)
   23a76:	f008 fcdc 	bl	2c432 <printk>
   23a7a:	4928      	ldr	r1, [pc, #160]	; (23b1c <k_sched_unlock+0xc8>)
   23a7c:	482b      	ldr	r0, [pc, #172]	; (23b2c <k_sched_unlock+0xd8>)
   23a7e:	f008 fcd8 	bl	2c432 <printk>
   23a82:	215c      	movs	r1, #92	; 0x5c
   23a84:	4826      	ldr	r0, [pc, #152]	; (23b20 <k_sched_unlock+0xcc>)
   23a86:	f008 fef1 	bl	2c86c <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   23a8a:	4c29      	ldr	r4, [pc, #164]	; (23b30 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   23a8c:	4823      	ldr	r0, [pc, #140]	; (23b1c <k_sched_unlock+0xc8>)
   23a8e:	f001 f957 	bl	24d40 <z_spin_lock_set_owner>
   23a92:	68a2      	ldr	r2, [r4, #8]
   23a94:	7bd2      	ldrb	r2, [r2, #15]
   23a96:	b972      	cbnz	r2, 23ab6 <k_sched_unlock+0x62>
   23a98:	4926      	ldr	r1, [pc, #152]	; (23b34 <k_sched_unlock+0xe0>)
   23a9a:	f240 333a 	movw	r3, #826	; 0x33a
   23a9e:	4a26      	ldr	r2, [pc, #152]	; (23b38 <k_sched_unlock+0xe4>)
   23aa0:	4821      	ldr	r0, [pc, #132]	; (23b28 <k_sched_unlock+0xd4>)
   23aa2:	f008 fcc6 	bl	2c432 <printk>
   23aa6:	4825      	ldr	r0, [pc, #148]	; (23b3c <k_sched_unlock+0xe8>)
   23aa8:	f008 fcc3 	bl	2c432 <printk>
   23aac:	f240 313a 	movw	r1, #826	; 0x33a
   23ab0:	4821      	ldr	r0, [pc, #132]	; (23b38 <k_sched_unlock+0xe4>)
   23ab2:	f008 fedb 	bl	2c86c <assert_post_action>
   23ab6:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   23aba:	b173      	cbz	r3, 23ada <k_sched_unlock+0x86>
   23abc:	4920      	ldr	r1, [pc, #128]	; (23b40 <k_sched_unlock+0xec>)
   23abe:	f240 333b 	movw	r3, #827	; 0x33b
   23ac2:	4a1d      	ldr	r2, [pc, #116]	; (23b38 <k_sched_unlock+0xe4>)
   23ac4:	4818      	ldr	r0, [pc, #96]	; (23b28 <k_sched_unlock+0xd4>)
   23ac6:	f008 fcb4 	bl	2c432 <printk>
   23aca:	481c      	ldr	r0, [pc, #112]	; (23b3c <k_sched_unlock+0xe8>)
   23acc:	f008 fcb1 	bl	2c432 <printk>
   23ad0:	f240 313b 	movw	r1, #827	; 0x33b
   23ad4:	4818      	ldr	r0, [pc, #96]	; (23b38 <k_sched_unlock+0xe4>)
   23ad6:	f008 fec9 	bl	2c86c <assert_post_action>
		++_current->base.sched_locked;
   23ada:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   23adc:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   23ade:	7bd3      	ldrb	r3, [r2, #15]
   23ae0:	3301      	adds	r3, #1
   23ae2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   23ae4:	f7ff ff92 	bl	23a0c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23ae8:	480c      	ldr	r0, [pc, #48]	; (23b1c <k_sched_unlock+0xc8>)
   23aea:	f001 f919 	bl	24d20 <z_spin_unlock_valid>
   23aee:	b968      	cbnz	r0, 23b0c <k_sched_unlock+0xb8>
   23af0:	2384      	movs	r3, #132	; 0x84
   23af2:	4a0b      	ldr	r2, [pc, #44]	; (23b20 <k_sched_unlock+0xcc>)
   23af4:	4913      	ldr	r1, [pc, #76]	; (23b44 <k_sched_unlock+0xf0>)
   23af6:	480c      	ldr	r0, [pc, #48]	; (23b28 <k_sched_unlock+0xd4>)
   23af8:	f008 fc9b 	bl	2c432 <printk>
   23afc:	4907      	ldr	r1, [pc, #28]	; (23b1c <k_sched_unlock+0xc8>)
   23afe:	4812      	ldr	r0, [pc, #72]	; (23b48 <k_sched_unlock+0xf4>)
   23b00:	f008 fc97 	bl	2c432 <printk>
   23b04:	2184      	movs	r1, #132	; 0x84
   23b06:	4806      	ldr	r0, [pc, #24]	; (23b20 <k_sched_unlock+0xcc>)
   23b08:	f008 feb0 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   23b0c:	f385 8811 	msr	BASEPRI, r5
   23b10:	f3bf 8f6f 	isb	sy
}
   23b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   23b18:	f00a bf69 	b.w	2e9ee <z_reschedule_unlocked>
   23b1c:	20021e18 	.word	0x20021e18
   23b20:	000304b3 	.word	0x000304b3
   23b24:	00030505 	.word	0x00030505
   23b28:	00030166 	.word	0x00030166
   23b2c:	0003051a 	.word	0x0003051a
   23b30:	20021de0 	.word	0x20021de0
   23b34:	00032fa1 	.word	0x00032fa1
   23b38:	00032f47 	.word	0x00032f47
   23b3c:	00030a10 	.word	0x00030a10
   23b40:	00032e9e 	.word	0x00032e9e
   23b44:	000304d9 	.word	0x000304d9
   23b48:	000304f0 	.word	0x000304f0

00023b4c <ready_thread>:
{
   23b4c:	b570      	push	{r4, r5, r6, lr}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   23b4e:	7b43      	ldrb	r3, [r0, #13]
   23b50:	4604      	mov	r4, r0
   23b52:	06db      	lsls	r3, r3, #27
   23b54:	d13d      	bne.n	23bd2 <ready_thread+0x86>
	return !sys_dnode_is_linked(&t->node);
   23b56:	6985      	ldr	r5, [r0, #24]
	if (z_is_thread_ready(thread)) {
   23b58:	2d00      	cmp	r5, #0
   23b5a:	d13a      	bne.n	23bd2 <ready_thread+0x86>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23b5c:	4b1d      	ldr	r3, [pc, #116]	; (23bd4 <ready_thread+0x88>)
   23b5e:	4298      	cmp	r0, r3
   23b60:	d10b      	bne.n	23b7a <ready_thread+0x2e>
   23b62:	491d      	ldr	r1, [pc, #116]	; (23bd8 <ready_thread+0x8c>)
   23b64:	481d      	ldr	r0, [pc, #116]	; (23bdc <ready_thread+0x90>)
   23b66:	f240 3389 	movw	r3, #905	; 0x389
   23b6a:	4a1d      	ldr	r2, [pc, #116]	; (23be0 <ready_thread+0x94>)
   23b6c:	f008 fc61 	bl	2c432 <printk>
   23b70:	f240 3189 	movw	r1, #905	; 0x389
   23b74:	481a      	ldr	r0, [pc, #104]	; (23be0 <ready_thread+0x94>)
   23b76:	f008 fe79 	bl	2c86c <assert_post_action>
	return list->head == list;
   23b7a:	4a1a      	ldr	r2, [pc, #104]	; (23be4 <ready_thread+0x98>)
   23b7c:	4613      	mov	r3, r2
   23b7e:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23b82:	4298      	cmp	r0, r3
   23b84:	bf18      	it	ne
   23b86:	4605      	movne	r5, r0
   23b88:	2d00      	cmp	r5, #0
   23b8a:	4619      	mov	r1, r3
   23b8c:	462b      	mov	r3, r5
   23b8e:	bf38      	it	cc
   23b90:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23b92:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23b94:	b1bb      	cbz	r3, 23bc6 <ready_thread+0x7a>
	if (thread_1->base.prio < thread_2->base.prio) {
   23b96:	f994 600e 	ldrsb.w	r6, [r4, #14]
   23b9a:	f993 500e 	ldrsb.w	r5, [r3, #14]
   23b9e:	42ae      	cmp	r6, r5
   23ba0:	db03      	blt.n	23baa <ready_thread+0x5e>
	return (node == list->tail) ? NULL : node->next;
   23ba2:	4298      	cmp	r0, r3
   23ba4:	d00f      	beq.n	23bc6 <ready_thread+0x7a>
   23ba6:	681b      	ldr	r3, [r3, #0]
   23ba8:	e7f4      	b.n	23b94 <ready_thread+0x48>
	node->prev = successor->prev;
   23baa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23bac:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   23bb0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23bb2:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   23bb4:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   23bb6:	2000      	movs	r0, #0
   23bb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23bbc:	7363      	strb	r3, [r4, #13]
}
   23bbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   23bc2:	f7ff bf23 	b.w	23a0c <update_cache>
	node->prev = list->tail;
   23bc6:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   23bca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   23bcc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23bce:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   23bd0:	e7f0      	b.n	23bb4 <ready_thread+0x68>
}
   23bd2:	bd70      	pop	{r4, r5, r6, pc}
   23bd4:	200211b8 	.word	0x200211b8
   23bd8:	00032f80 	.word	0x00032f80
   23bdc:	00030166 	.word	0x00030166
   23be0:	00032f47 	.word	0x00032f47
   23be4:	20021de0 	.word	0x20021de0

00023be8 <z_ready_thread>:
{
   23be8:	b538      	push	{r3, r4, r5, lr}
   23bea:	4604      	mov	r4, r0
	__asm__ volatile(
   23bec:	f04f 0320 	mov.w	r3, #32
   23bf0:	f3ef 8511 	mrs	r5, BASEPRI
   23bf4:	f383 8811 	msr	BASEPRI, r3
   23bf8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23bfc:	4817      	ldr	r0, [pc, #92]	; (23c5c <z_ready_thread+0x74>)
   23bfe:	f001 f881 	bl	24d04 <z_spin_lock_valid>
   23c02:	b968      	cbnz	r0, 23c20 <z_ready_thread+0x38>
   23c04:	235c      	movs	r3, #92	; 0x5c
   23c06:	4a16      	ldr	r2, [pc, #88]	; (23c60 <z_ready_thread+0x78>)
   23c08:	4916      	ldr	r1, [pc, #88]	; (23c64 <z_ready_thread+0x7c>)
   23c0a:	4817      	ldr	r0, [pc, #92]	; (23c68 <z_ready_thread+0x80>)
   23c0c:	f008 fc11 	bl	2c432 <printk>
   23c10:	4912      	ldr	r1, [pc, #72]	; (23c5c <z_ready_thread+0x74>)
   23c12:	4816      	ldr	r0, [pc, #88]	; (23c6c <z_ready_thread+0x84>)
   23c14:	f008 fc0d 	bl	2c432 <printk>
   23c18:	215c      	movs	r1, #92	; 0x5c
   23c1a:	4811      	ldr	r0, [pc, #68]	; (23c60 <z_ready_thread+0x78>)
   23c1c:	f008 fe26 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   23c20:	480e      	ldr	r0, [pc, #56]	; (23c5c <z_ready_thread+0x74>)
   23c22:	f001 f88d 	bl	24d40 <z_spin_lock_set_owner>
		ready_thread(thread);
   23c26:	4620      	mov	r0, r4
   23c28:	f7ff ff90 	bl	23b4c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23c2c:	480b      	ldr	r0, [pc, #44]	; (23c5c <z_ready_thread+0x74>)
   23c2e:	f001 f877 	bl	24d20 <z_spin_unlock_valid>
   23c32:	b968      	cbnz	r0, 23c50 <z_ready_thread+0x68>
   23c34:	2384      	movs	r3, #132	; 0x84
   23c36:	4a0a      	ldr	r2, [pc, #40]	; (23c60 <z_ready_thread+0x78>)
   23c38:	490d      	ldr	r1, [pc, #52]	; (23c70 <z_ready_thread+0x88>)
   23c3a:	480b      	ldr	r0, [pc, #44]	; (23c68 <z_ready_thread+0x80>)
   23c3c:	f008 fbf9 	bl	2c432 <printk>
   23c40:	4906      	ldr	r1, [pc, #24]	; (23c5c <z_ready_thread+0x74>)
   23c42:	480c      	ldr	r0, [pc, #48]	; (23c74 <z_ready_thread+0x8c>)
   23c44:	f008 fbf5 	bl	2c432 <printk>
   23c48:	2184      	movs	r1, #132	; 0x84
   23c4a:	4805      	ldr	r0, [pc, #20]	; (23c60 <z_ready_thread+0x78>)
   23c4c:	f008 fe0e 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   23c50:	f385 8811 	msr	BASEPRI, r5
   23c54:	f3bf 8f6f 	isb	sy
}
   23c58:	bd38      	pop	{r3, r4, r5, pc}
   23c5a:	bf00      	nop
   23c5c:	20021e18 	.word	0x20021e18
   23c60:	000304b3 	.word	0x000304b3
   23c64:	00030505 	.word	0x00030505
   23c68:	00030166 	.word	0x00030166
   23c6c:	0003051a 	.word	0x0003051a
   23c70:	000304d9 	.word	0x000304d9
   23c74:	000304f0 	.word	0x000304f0

00023c78 <z_sched_start>:
{
   23c78:	b538      	push	{r3, r4, r5, lr}
   23c7a:	4604      	mov	r4, r0
	__asm__ volatile(
   23c7c:	f04f 0320 	mov.w	r3, #32
   23c80:	f3ef 8511 	mrs	r5, BASEPRI
   23c84:	f383 8811 	msr	BASEPRI, r3
   23c88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23c8c:	481d      	ldr	r0, [pc, #116]	; (23d04 <z_sched_start+0x8c>)
   23c8e:	f001 f839 	bl	24d04 <z_spin_lock_valid>
   23c92:	b968      	cbnz	r0, 23cb0 <z_sched_start+0x38>
   23c94:	235c      	movs	r3, #92	; 0x5c
   23c96:	4a1c      	ldr	r2, [pc, #112]	; (23d08 <z_sched_start+0x90>)
   23c98:	491c      	ldr	r1, [pc, #112]	; (23d0c <z_sched_start+0x94>)
   23c9a:	481d      	ldr	r0, [pc, #116]	; (23d10 <z_sched_start+0x98>)
   23c9c:	f008 fbc9 	bl	2c432 <printk>
   23ca0:	4918      	ldr	r1, [pc, #96]	; (23d04 <z_sched_start+0x8c>)
   23ca2:	481c      	ldr	r0, [pc, #112]	; (23d14 <z_sched_start+0x9c>)
   23ca4:	f008 fbc5 	bl	2c432 <printk>
   23ca8:	215c      	movs	r1, #92	; 0x5c
   23caa:	4817      	ldr	r0, [pc, #92]	; (23d08 <z_sched_start+0x90>)
   23cac:	f008 fdde 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   23cb0:	4814      	ldr	r0, [pc, #80]	; (23d04 <z_sched_start+0x8c>)
   23cb2:	f001 f845 	bl	24d40 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   23cb6:	7b63      	ldrb	r3, [r4, #13]
   23cb8:	075a      	lsls	r2, r3, #29
   23cba:	d416      	bmi.n	23cea <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23cbc:	4811      	ldr	r0, [pc, #68]	; (23d04 <z_sched_start+0x8c>)
   23cbe:	f001 f82f 	bl	24d20 <z_spin_unlock_valid>
   23cc2:	b968      	cbnz	r0, 23ce0 <z_sched_start+0x68>
   23cc4:	2384      	movs	r3, #132	; 0x84
   23cc6:	4a10      	ldr	r2, [pc, #64]	; (23d08 <z_sched_start+0x90>)
   23cc8:	4913      	ldr	r1, [pc, #76]	; (23d18 <z_sched_start+0xa0>)
   23cca:	4811      	ldr	r0, [pc, #68]	; (23d10 <z_sched_start+0x98>)
   23ccc:	f008 fbb1 	bl	2c432 <printk>
   23cd0:	490c      	ldr	r1, [pc, #48]	; (23d04 <z_sched_start+0x8c>)
   23cd2:	4812      	ldr	r0, [pc, #72]	; (23d1c <z_sched_start+0xa4>)
   23cd4:	f008 fbad 	bl	2c432 <printk>
   23cd8:	2184      	movs	r1, #132	; 0x84
   23cda:	480b      	ldr	r0, [pc, #44]	; (23d08 <z_sched_start+0x90>)
   23cdc:	f008 fdc6 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   23ce0:	f385 8811 	msr	BASEPRI, r5
   23ce4:	f3bf 8f6f 	isb	sy
}
   23ce8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   23cea:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   23cee:	4620      	mov	r0, r4
   23cf0:	7363      	strb	r3, [r4, #13]
   23cf2:	f7ff ff2b 	bl	23b4c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   23cf6:	4629      	mov	r1, r5
}
   23cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   23cfc:	4801      	ldr	r0, [pc, #4]	; (23d04 <z_sched_start+0x8c>)
   23cfe:	f7ff bd4f 	b.w	237a0 <z_reschedule>
   23d02:	bf00      	nop
   23d04:	20021e18 	.word	0x20021e18
   23d08:	000304b3 	.word	0x000304b3
   23d0c:	00030505 	.word	0x00030505
   23d10:	00030166 	.word	0x00030166
   23d14:	0003051a 	.word	0x0003051a
   23d18:	000304d9 	.word	0x000304d9
   23d1c:	000304f0 	.word	0x000304f0

00023d20 <z_thread_timeout>:
{
   23d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23d22:	4604      	mov	r4, r0
	__asm__ volatile(
   23d24:	f04f 0320 	mov.w	r3, #32
   23d28:	f3ef 8511 	mrs	r5, BASEPRI
   23d2c:	f383 8811 	msr	BASEPRI, r3
   23d30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23d34:	481e      	ldr	r0, [pc, #120]	; (23db0 <z_thread_timeout+0x90>)
   23d36:	f000 ffe5 	bl	24d04 <z_spin_lock_valid>
   23d3a:	b968      	cbnz	r0, 23d58 <z_thread_timeout+0x38>
   23d3c:	235c      	movs	r3, #92	; 0x5c
   23d3e:	4a1d      	ldr	r2, [pc, #116]	; (23db4 <z_thread_timeout+0x94>)
   23d40:	491d      	ldr	r1, [pc, #116]	; (23db8 <z_thread_timeout+0x98>)
   23d42:	481e      	ldr	r0, [pc, #120]	; (23dbc <z_thread_timeout+0x9c>)
   23d44:	f008 fb75 	bl	2c432 <printk>
   23d48:	4919      	ldr	r1, [pc, #100]	; (23db0 <z_thread_timeout+0x90>)
   23d4a:	481d      	ldr	r0, [pc, #116]	; (23dc0 <z_thread_timeout+0xa0>)
   23d4c:	f008 fb71 	bl	2c432 <printk>
   23d50:	215c      	movs	r1, #92	; 0x5c
   23d52:	4818      	ldr	r0, [pc, #96]	; (23db4 <z_thread_timeout+0x94>)
   23d54:	f008 fd8a 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   23d58:	4815      	ldr	r0, [pc, #84]	; (23db0 <z_thread_timeout+0x90>)
   23d5a:	f000 fff1 	bl	24d40 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   23d5e:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   23d62:	f1a4 0018 	sub.w	r0, r4, #24
		if (thread->base.pended_on != NULL) {
   23d66:	b11b      	cbz	r3, 23d70 <z_thread_timeout+0x50>
			unpend_thread_no_timeout(thread);
   23d68:	9001      	str	r0, [sp, #4]
   23d6a:	f00a fe4a 	bl	2ea02 <unpend_thread_no_timeout>
   23d6e:	9801      	ldr	r0, [sp, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   23d70:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   23d74:	f023 0314 	bic.w	r3, r3, #20
   23d78:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   23d7c:	f7ff fee6 	bl	23b4c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23d80:	480b      	ldr	r0, [pc, #44]	; (23db0 <z_thread_timeout+0x90>)
   23d82:	f000 ffcd 	bl	24d20 <z_spin_unlock_valid>
   23d86:	b968      	cbnz	r0, 23da4 <z_thread_timeout+0x84>
   23d88:	2384      	movs	r3, #132	; 0x84
   23d8a:	4a0a      	ldr	r2, [pc, #40]	; (23db4 <z_thread_timeout+0x94>)
   23d8c:	490d      	ldr	r1, [pc, #52]	; (23dc4 <z_thread_timeout+0xa4>)
   23d8e:	480b      	ldr	r0, [pc, #44]	; (23dbc <z_thread_timeout+0x9c>)
   23d90:	f008 fb4f 	bl	2c432 <printk>
   23d94:	4906      	ldr	r1, [pc, #24]	; (23db0 <z_thread_timeout+0x90>)
   23d96:	480c      	ldr	r0, [pc, #48]	; (23dc8 <z_thread_timeout+0xa8>)
   23d98:	f008 fb4b 	bl	2c432 <printk>
   23d9c:	2184      	movs	r1, #132	; 0x84
   23d9e:	4805      	ldr	r0, [pc, #20]	; (23db4 <z_thread_timeout+0x94>)
   23da0:	f008 fd64 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   23da4:	f385 8811 	msr	BASEPRI, r5
   23da8:	f3bf 8f6f 	isb	sy
}
   23dac:	b003      	add	sp, #12
   23dae:	bd30      	pop	{r4, r5, pc}
   23db0:	20021e18 	.word	0x20021e18
   23db4:	000304b3 	.word	0x000304b3
   23db8:	00030505 	.word	0x00030505
   23dbc:	00030166 	.word	0x00030166
   23dc0:	0003051a 	.word	0x0003051a
   23dc4:	000304d9 	.word	0x000304d9
   23dc8:	000304f0 	.word	0x000304f0

00023dcc <move_thread_to_end_of_prio_q>:
{
   23dcc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   23dce:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   23dd2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   23dd4:	2b00      	cmp	r3, #0
   23dd6:	da03      	bge.n	23de0 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   23dd8:	4601      	mov	r1, r0
   23dda:	481f      	ldr	r0, [pc, #124]	; (23e58 <move_thread_to_end_of_prio_q+0x8c>)
   23ddc:	f7ff fd9c 	bl	23918 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23de0:	4b1e      	ldr	r3, [pc, #120]	; (23e5c <move_thread_to_end_of_prio_q+0x90>)
   23de2:	429c      	cmp	r4, r3
   23de4:	d10b      	bne.n	23dfe <move_thread_to_end_of_prio_q+0x32>
   23de6:	491e      	ldr	r1, [pc, #120]	; (23e60 <move_thread_to_end_of_prio_q+0x94>)
   23de8:	481e      	ldr	r0, [pc, #120]	; (23e64 <move_thread_to_end_of_prio_q+0x98>)
   23dea:	f240 3389 	movw	r3, #905	; 0x389
   23dee:	4a1e      	ldr	r2, [pc, #120]	; (23e68 <move_thread_to_end_of_prio_q+0x9c>)
   23df0:	f008 fb1f 	bl	2c432 <printk>
   23df4:	f240 3189 	movw	r1, #905	; 0x389
   23df8:	481b      	ldr	r0, [pc, #108]	; (23e68 <move_thread_to_end_of_prio_q+0x9c>)
   23dfa:	f008 fd37 	bl	2c86c <assert_post_action>
	return list->head == list;
   23dfe:	4a1b      	ldr	r2, [pc, #108]	; (23e6c <move_thread_to_end_of_prio_q+0xa0>)
   23e00:	4611      	mov	r1, r2
   23e02:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23e06:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23e08:	428b      	cmp	r3, r1
   23e0a:	bf08      	it	eq
   23e0c:	2300      	moveq	r3, #0
   23e0e:	2b00      	cmp	r3, #0
   23e10:	bf38      	it	cc
   23e12:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23e14:	b1d3      	cbz	r3, 23e4c <move_thread_to_end_of_prio_q+0x80>
	if (thread_1->base.prio < thread_2->base.prio) {
   23e16:	f994 600e 	ldrsb.w	r6, [r4, #14]
   23e1a:	f993 500e 	ldrsb.w	r5, [r3, #14]
   23e1e:	42ae      	cmp	r6, r5
   23e20:	db03      	blt.n	23e2a <move_thread_to_end_of_prio_q+0x5e>
	return (node == list->tail) ? NULL : node->next;
   23e22:	4298      	cmp	r0, r3
   23e24:	d012      	beq.n	23e4c <move_thread_to_end_of_prio_q+0x80>
   23e26:	681b      	ldr	r3, [r3, #0]
   23e28:	e7f4      	b.n	23e14 <move_thread_to_end_of_prio_q+0x48>
	node->prev = successor->prev;
   23e2a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   23e2c:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   23e30:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   23e32:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   23e34:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   23e36:	6890      	ldr	r0, [r2, #8]
   23e38:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23e3c:	7363      	strb	r3, [r4, #13]
   23e3e:	1b03      	subs	r3, r0, r4
   23e40:	4258      	negs	r0, r3
   23e42:	4158      	adcs	r0, r3
}
   23e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   23e48:	f7ff bde0 	b.w	23a0c <update_cache>
	node->prev = list->tail;
   23e4c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   23e50:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   23e52:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23e54:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   23e56:	e7ed      	b.n	23e34 <move_thread_to_end_of_prio_q+0x68>
   23e58:	20021e08 	.word	0x20021e08
   23e5c:	200211b8 	.word	0x200211b8
   23e60:	00032f80 	.word	0x00032f80
   23e64:	00030166 	.word	0x00030166
   23e68:	00032f47 	.word	0x00032f47
   23e6c:	20021de0 	.word	0x20021de0

00023e70 <z_time_slice>:
{
   23e70:	b570      	push	{r4, r5, r6, lr}
   23e72:	4604      	mov	r4, r0
	__asm__ volatile(
   23e74:	f04f 0320 	mov.w	r3, #32
   23e78:	f3ef 8511 	mrs	r5, BASEPRI
   23e7c:	f383 8811 	msr	BASEPRI, r3
   23e80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23e84:	482a      	ldr	r0, [pc, #168]	; (23f30 <z_time_slice+0xc0>)
   23e86:	f000 ff3d 	bl	24d04 <z_spin_lock_valid>
   23e8a:	b968      	cbnz	r0, 23ea8 <z_time_slice+0x38>
   23e8c:	235c      	movs	r3, #92	; 0x5c
   23e8e:	4a29      	ldr	r2, [pc, #164]	; (23f34 <z_time_slice+0xc4>)
   23e90:	4929      	ldr	r1, [pc, #164]	; (23f38 <z_time_slice+0xc8>)
   23e92:	482a      	ldr	r0, [pc, #168]	; (23f3c <z_time_slice+0xcc>)
   23e94:	f008 facd 	bl	2c432 <printk>
   23e98:	4925      	ldr	r1, [pc, #148]	; (23f30 <z_time_slice+0xc0>)
   23e9a:	4829      	ldr	r0, [pc, #164]	; (23f40 <z_time_slice+0xd0>)
   23e9c:	f008 fac9 	bl	2c432 <printk>
   23ea0:	215c      	movs	r1, #92	; 0x5c
   23ea2:	4824      	ldr	r0, [pc, #144]	; (23f34 <z_time_slice+0xc4>)
   23ea4:	f008 fce2 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   23ea8:	4821      	ldr	r0, [pc, #132]	; (23f30 <z_time_slice+0xc0>)
   23eaa:	f000 ff49 	bl	24d40 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   23eae:	4b25      	ldr	r3, [pc, #148]	; (23f44 <z_time_slice+0xd4>)
   23eb0:	4a25      	ldr	r2, [pc, #148]	; (23f48 <z_time_slice+0xd8>)
   23eb2:	6898      	ldr	r0, [r3, #8]
   23eb4:	6811      	ldr	r1, [r2, #0]
   23eb6:	4288      	cmp	r0, r1
   23eb8:	4619      	mov	r1, r3
   23eba:	d118      	bne.n	23eee <z_time_slice+0x7e>
			z_reset_time_slice();
   23ebc:	f7ff fb68 	bl	23590 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23ec0:	481b      	ldr	r0, [pc, #108]	; (23f30 <z_time_slice+0xc0>)
   23ec2:	f000 ff2d 	bl	24d20 <z_spin_unlock_valid>
   23ec6:	b968      	cbnz	r0, 23ee4 <z_time_slice+0x74>
   23ec8:	2384      	movs	r3, #132	; 0x84
   23eca:	4a1a      	ldr	r2, [pc, #104]	; (23f34 <z_time_slice+0xc4>)
   23ecc:	491f      	ldr	r1, [pc, #124]	; (23f4c <z_time_slice+0xdc>)
   23ece:	481b      	ldr	r0, [pc, #108]	; (23f3c <z_time_slice+0xcc>)
   23ed0:	f008 faaf 	bl	2c432 <printk>
   23ed4:	4916      	ldr	r1, [pc, #88]	; (23f30 <z_time_slice+0xc0>)
   23ed6:	481e      	ldr	r0, [pc, #120]	; (23f50 <z_time_slice+0xe0>)
   23ed8:	f008 faab 	bl	2c432 <printk>
   23edc:	2184      	movs	r1, #132	; 0x84
   23ede:	4815      	ldr	r0, [pc, #84]	; (23f34 <z_time_slice+0xc4>)
   23ee0:	f008 fcc4 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   23ee4:	f385 8811 	msr	BASEPRI, r5
   23ee8:	f3bf 8f6f 	isb	sy
}
   23eec:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   23eee:	2600      	movs	r6, #0
   23ef0:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   23ef2:	4a18      	ldr	r2, [pc, #96]	; (23f54 <z_time_slice+0xe4>)
   23ef4:	6812      	ldr	r2, [r2, #0]
   23ef6:	b1ba      	cbz	r2, 23f28 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   23ef8:	89c2      	ldrh	r2, [r0, #14]
   23efa:	2a7f      	cmp	r2, #127	; 0x7f
   23efc:	d814      	bhi.n	23f28 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   23efe:	7b42      	ldrb	r2, [r0, #13]
   23f00:	06d2      	lsls	r2, r2, #27
   23f02:	d111      	bne.n	23f28 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   23f04:	4a14      	ldr	r2, [pc, #80]	; (23f58 <z_time_slice+0xe8>)
   23f06:	f990 600e 	ldrsb.w	r6, [r0, #14]
   23f0a:	6812      	ldr	r2, [r2, #0]
   23f0c:	4296      	cmp	r6, r2
   23f0e:	db0b      	blt.n	23f28 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   23f10:	4a12      	ldr	r2, [pc, #72]	; (23f5c <z_time_slice+0xec>)
   23f12:	4290      	cmp	r0, r2
   23f14:	d008      	beq.n	23f28 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   23f16:	691a      	ldr	r2, [r3, #16]
   23f18:	42a2      	cmp	r2, r4
   23f1a:	dc02      	bgt.n	23f22 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   23f1c:	f7ff ff56 	bl	23dcc <move_thread_to_end_of_prio_q>
   23f20:	e7cc      	b.n	23ebc <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   23f22:	1b12      	subs	r2, r2, r4
   23f24:	611a      	str	r2, [r3, #16]
   23f26:	e7cb      	b.n	23ec0 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   23f28:	2300      	movs	r3, #0
   23f2a:	610b      	str	r3, [r1, #16]
   23f2c:	e7c8      	b.n	23ec0 <z_time_slice+0x50>
   23f2e:	bf00      	nop
   23f30:	20021e18 	.word	0x20021e18
   23f34:	000304b3 	.word	0x000304b3
   23f38:	00030505 	.word	0x00030505
   23f3c:	00030166 	.word	0x00030166
   23f40:	0003051a 	.word	0x0003051a
   23f44:	20021de0 	.word	0x20021de0
   23f48:	20021e14 	.word	0x20021e14
   23f4c:	000304d9 	.word	0x000304d9
   23f50:	000304f0 	.word	0x000304f0
   23f54:	20021e20 	.word	0x20021e20
   23f58:	20021e1c 	.word	0x20021e1c
   23f5c:	200211b8 	.word	0x200211b8

00023f60 <z_impl_k_thread_suspend>:
{
   23f60:	b570      	push	{r4, r5, r6, lr}
   23f62:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   23f64:	3018      	adds	r0, #24
   23f66:	f001 f8c5 	bl	250f4 <z_abort_timeout>
	__asm__ volatile(
   23f6a:	f04f 0320 	mov.w	r3, #32
   23f6e:	f3ef 8611 	mrs	r6, BASEPRI
   23f72:	f383 8811 	msr	BASEPRI, r3
   23f76:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23f7a:	4825      	ldr	r0, [pc, #148]	; (24010 <z_impl_k_thread_suspend+0xb0>)
   23f7c:	f000 fec2 	bl	24d04 <z_spin_lock_valid>
   23f80:	b968      	cbnz	r0, 23f9e <z_impl_k_thread_suspend+0x3e>
   23f82:	235c      	movs	r3, #92	; 0x5c
   23f84:	4a23      	ldr	r2, [pc, #140]	; (24014 <z_impl_k_thread_suspend+0xb4>)
   23f86:	4924      	ldr	r1, [pc, #144]	; (24018 <z_impl_k_thread_suspend+0xb8>)
   23f88:	4824      	ldr	r0, [pc, #144]	; (2401c <z_impl_k_thread_suspend+0xbc>)
   23f8a:	f008 fa52 	bl	2c432 <printk>
   23f8e:	4920      	ldr	r1, [pc, #128]	; (24010 <z_impl_k_thread_suspend+0xb0>)
   23f90:	4823      	ldr	r0, [pc, #140]	; (24020 <z_impl_k_thread_suspend+0xc0>)
   23f92:	f008 fa4e 	bl	2c432 <printk>
   23f96:	215c      	movs	r1, #92	; 0x5c
   23f98:	481e      	ldr	r0, [pc, #120]	; (24014 <z_impl_k_thread_suspend+0xb4>)
   23f9a:	f008 fc67 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   23f9e:	481c      	ldr	r0, [pc, #112]	; (24010 <z_impl_k_thread_suspend+0xb0>)
   23fa0:	f000 fece 	bl	24d40 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   23fa4:	f994 300d 	ldrsb.w	r3, [r4, #13]
   23fa8:	2b00      	cmp	r3, #0
   23faa:	da07      	bge.n	23fbc <z_impl_k_thread_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   23fac:	4621      	mov	r1, r4
   23fae:	481d      	ldr	r0, [pc, #116]	; (24024 <z_impl_k_thread_suspend+0xc4>)
   23fb0:	f7ff fcb2 	bl	23918 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   23fb4:	7b63      	ldrb	r3, [r4, #13]
   23fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23fba:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   23fbc:	4d1a      	ldr	r5, [pc, #104]	; (24028 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   23fbe:	7b63      	ldrb	r3, [r4, #13]
   23fc0:	68a8      	ldr	r0, [r5, #8]
   23fc2:	f043 0310 	orr.w	r3, r3, #16
   23fc6:	7363      	strb	r3, [r4, #13]
   23fc8:	1b03      	subs	r3, r0, r4
   23fca:	4258      	negs	r0, r3
   23fcc:	4158      	adcs	r0, r3
   23fce:	f7ff fd1d 	bl	23a0c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23fd2:	480f      	ldr	r0, [pc, #60]	; (24010 <z_impl_k_thread_suspend+0xb0>)
   23fd4:	f000 fea4 	bl	24d20 <z_spin_unlock_valid>
   23fd8:	b968      	cbnz	r0, 23ff6 <z_impl_k_thread_suspend+0x96>
   23fda:	2384      	movs	r3, #132	; 0x84
   23fdc:	4a0d      	ldr	r2, [pc, #52]	; (24014 <z_impl_k_thread_suspend+0xb4>)
   23fde:	4913      	ldr	r1, [pc, #76]	; (2402c <z_impl_k_thread_suspend+0xcc>)
   23fe0:	480e      	ldr	r0, [pc, #56]	; (2401c <z_impl_k_thread_suspend+0xbc>)
   23fe2:	f008 fa26 	bl	2c432 <printk>
   23fe6:	490a      	ldr	r1, [pc, #40]	; (24010 <z_impl_k_thread_suspend+0xb0>)
   23fe8:	4811      	ldr	r0, [pc, #68]	; (24030 <z_impl_k_thread_suspend+0xd0>)
   23fea:	f008 fa22 	bl	2c432 <printk>
   23fee:	2184      	movs	r1, #132	; 0x84
   23ff0:	4808      	ldr	r0, [pc, #32]	; (24014 <z_impl_k_thread_suspend+0xb4>)
   23ff2:	f008 fc3b 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   23ff6:	f386 8811 	msr	BASEPRI, r6
   23ffa:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   23ffe:	68ab      	ldr	r3, [r5, #8]
   24000:	42a3      	cmp	r3, r4
   24002:	d103      	bne.n	2400c <z_impl_k_thread_suspend+0xac>
}
   24004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   24008:	f00a bcf1 	b.w	2e9ee <z_reschedule_unlocked>
}
   2400c:	bd70      	pop	{r4, r5, r6, pc}
   2400e:	bf00      	nop
   24010:	20021e18 	.word	0x20021e18
   24014:	000304b3 	.word	0x000304b3
   24018:	00030505 	.word	0x00030505
   2401c:	00030166 	.word	0x00030166
   24020:	0003051a 	.word	0x0003051a
   24024:	20021e08 	.word	0x20021e08
   24028:	20021de0 	.word	0x20021de0
   2402c:	000304d9 	.word	0x000304d9
   24030:	000304f0 	.word	0x000304f0

00024034 <z_thread_single_abort>:
{
   24034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   24038:	7b03      	ldrb	r3, [r0, #12]
{
   2403a:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   2403c:	07dd      	lsls	r5, r3, #31
   2403e:	d50e      	bpl.n	2405e <z_thread_single_abort+0x2a>
   24040:	4948      	ldr	r1, [pc, #288]	; (24164 <z_thread_single_abort+0x130>)
   24042:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   24046:	4a48      	ldr	r2, [pc, #288]	; (24168 <z_thread_single_abort+0x134>)
   24048:	4848      	ldr	r0, [pc, #288]	; (2416c <z_thread_single_abort+0x138>)
   2404a:	f008 f9f2 	bl	2c432 <printk>
   2404e:	4848      	ldr	r0, [pc, #288]	; (24170 <z_thread_single_abort+0x13c>)
   24050:	f008 f9ef 	bl	2c432 <printk>
   24054:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   24058:	4843      	ldr	r0, [pc, #268]	; (24168 <z_thread_single_abort+0x134>)
   2405a:	f008 fc07 	bl	2c86c <assert_post_action>
	if (thread->fn_abort != NULL) {
   2405e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   24060:	b103      	cbz	r3, 24064 <z_thread_single_abort+0x30>
		thread->fn_abort();
   24062:	4798      	blx	r3
   24064:	f104 0018 	add.w	r0, r4, #24
   24068:	f001 f844 	bl	250f4 <z_abort_timeout>
	__asm__ volatile(
   2406c:	f04f 0320 	mov.w	r3, #32
   24070:	f3ef 8611 	mrs	r6, BASEPRI
   24074:	f383 8811 	msr	BASEPRI, r3
   24078:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2407c:	483d      	ldr	r0, [pc, #244]	; (24174 <z_thread_single_abort+0x140>)
   2407e:	f000 fe41 	bl	24d04 <z_spin_lock_valid>
   24082:	b968      	cbnz	r0, 240a0 <z_thread_single_abort+0x6c>
   24084:	235c      	movs	r3, #92	; 0x5c
   24086:	4a3c      	ldr	r2, [pc, #240]	; (24178 <z_thread_single_abort+0x144>)
   24088:	493c      	ldr	r1, [pc, #240]	; (2417c <z_thread_single_abort+0x148>)
   2408a:	4838      	ldr	r0, [pc, #224]	; (2416c <z_thread_single_abort+0x138>)
   2408c:	f008 f9d1 	bl	2c432 <printk>
   24090:	4938      	ldr	r1, [pc, #224]	; (24174 <z_thread_single_abort+0x140>)
   24092:	483b      	ldr	r0, [pc, #236]	; (24180 <z_thread_single_abort+0x14c>)
   24094:	f008 f9cd 	bl	2c432 <printk>
   24098:	215c      	movs	r1, #92	; 0x5c
   2409a:	4837      	ldr	r0, [pc, #220]	; (24178 <z_thread_single_abort+0x144>)
   2409c:	f008 fbe6 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   240a0:	4834      	ldr	r0, [pc, #208]	; (24174 <z_thread_single_abort+0x140>)
   240a2:	f000 fe4d 	bl	24d40 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   240a6:	7b63      	ldrb	r3, [r4, #13]
   240a8:	06d8      	lsls	r0, r3, #27
   240aa:	d136      	bne.n	2411a <z_thread_single_abort+0xe6>
		if (z_is_thread_ready(thread)) {
   240ac:	69a2      	ldr	r2, [r4, #24]
   240ae:	2a00      	cmp	r2, #0
   240b0:	d133      	bne.n	2411a <z_thread_single_abort+0xe6>
			if (z_is_thread_queued(thread)) {
   240b2:	0619      	lsls	r1, r3, #24
   240b4:	d507      	bpl.n	240c6 <z_thread_single_abort+0x92>
				_priq_run_remove(&_kernel.ready_q.runq,
   240b6:	4621      	mov	r1, r4
   240b8:	4832      	ldr	r0, [pc, #200]	; (24184 <z_thread_single_abort+0x150>)
   240ba:	f7ff fc2d 	bl	23918 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   240be:	7b63      	ldrb	r3, [r4, #13]
   240c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   240c4:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   240c6:	4b30      	ldr	r3, [pc, #192]	; (24188 <z_thread_single_abort+0x154>)
   240c8:	6898      	ldr	r0, [r3, #8]
   240ca:	1b02      	subs	r2, r0, r4
   240cc:	4250      	negs	r0, r2
   240ce:	4150      	adcs	r0, r2
   240d0:	f7ff fc9c 	bl	23a0c <update_cache>
			waiter->base.pended_on = NULL;
   240d4:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   240d6:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   240d8:	f104 0830 	add.w	r8, r4, #48	; 0x30
   240dc:	f043 0308 	orr.w	r3, r3, #8
   240e0:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   240e2:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   240e4:	4545      	cmp	r5, r8
   240e6:	d000      	beq.n	240ea <z_thread_single_abort+0xb6>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   240e8:	bb3d      	cbnz	r5, 2413a <z_thread_single_abort+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   240ea:	4822      	ldr	r0, [pc, #136]	; (24174 <z_thread_single_abort+0x140>)
   240ec:	f000 fe18 	bl	24d20 <z_spin_unlock_valid>
   240f0:	b968      	cbnz	r0, 2410e <z_thread_single_abort+0xda>
   240f2:	2384      	movs	r3, #132	; 0x84
   240f4:	4a20      	ldr	r2, [pc, #128]	; (24178 <z_thread_single_abort+0x144>)
   240f6:	4925      	ldr	r1, [pc, #148]	; (2418c <z_thread_single_abort+0x158>)
   240f8:	481c      	ldr	r0, [pc, #112]	; (2416c <z_thread_single_abort+0x138>)
   240fa:	f008 f99a 	bl	2c432 <printk>
   240fe:	491d      	ldr	r1, [pc, #116]	; (24174 <z_thread_single_abort+0x140>)
   24100:	4823      	ldr	r0, [pc, #140]	; (24190 <z_thread_single_abort+0x15c>)
   24102:	f008 f996 	bl	2c432 <printk>
   24106:	2184      	movs	r1, #132	; 0x84
   24108:	481b      	ldr	r0, [pc, #108]	; (24178 <z_thread_single_abort+0x144>)
   2410a:	f008 fbaf 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   2410e:	f386 8811 	msr	BASEPRI, r6
   24112:	f3bf 8f6f 	isb	sy
}
   24116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   2411a:	079b      	lsls	r3, r3, #30
   2411c:	d5da      	bpl.n	240d4 <z_thread_single_abort+0xa0>
				_priq_wait_remove(&pended_on(thread)->waitq,
   2411e:	f104 0008 	add.w	r0, r4, #8
   24122:	f7ff fa1d 	bl	23560 <pended_on.isra.0>
   24126:	4621      	mov	r1, r4
   24128:	f7ff fbf6 	bl	23918 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2412c:	7b63      	ldrb	r3, [r4, #13]
   2412e:	f023 0302 	bic.w	r3, r3, #2
   24132:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   24134:	2300      	movs	r3, #0
   24136:	60a3      	str	r3, [r4, #8]
   24138:	e7cc      	b.n	240d4 <z_thread_single_abort+0xa0>
   2413a:	f105 0018 	add.w	r0, r5, #24
   2413e:	f000 ffd9 	bl	250f4 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   24142:	f105 0008 	add.w	r0, r5, #8
   24146:	f7ff fa0b 	bl	23560 <pended_on.isra.0>
   2414a:	4629      	mov	r1, r5
   2414c:	f7ff fbe4 	bl	23918 <z_priq_dumb_remove>
   24150:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   24152:	4628      	mov	r0, r5
   24154:	f023 0302 	bic.w	r3, r3, #2
   24158:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   2415a:	60af      	str	r7, [r5, #8]
   2415c:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   2415e:	f7ff fcf5 	bl	23b4c <ready_thread>
   24162:	e7be      	b.n	240e2 <z_thread_single_abort+0xae>
   24164:	00032fd1 	.word	0x00032fd1
   24168:	00032f47 	.word	0x00032f47
   2416c:	00030166 	.word	0x00030166
   24170:	00032fff 	.word	0x00032fff
   24174:	20021e18 	.word	0x20021e18
   24178:	000304b3 	.word	0x000304b3
   2417c:	00030505 	.word	0x00030505
   24180:	0003051a 	.word	0x0003051a
   24184:	20021e08 	.word	0x20021e08
   24188:	20021de0 	.word	0x20021de0
   2418c:	000304d9 	.word	0x000304d9
   24190:	000304f0 	.word	0x000304f0

00024194 <unready_thread>:
{
   24194:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   24196:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   2419a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2419c:	2b00      	cmp	r3, #0
   2419e:	da07      	bge.n	241b0 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   241a0:	4601      	mov	r1, r0
   241a2:	4808      	ldr	r0, [pc, #32]	; (241c4 <unready_thread+0x30>)
   241a4:	f7ff fbb8 	bl	23918 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   241a8:	7b63      	ldrb	r3, [r4, #13]
   241aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   241ae:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   241b0:	4b05      	ldr	r3, [pc, #20]	; (241c8 <unready_thread+0x34>)
   241b2:	6898      	ldr	r0, [r3, #8]
   241b4:	1b03      	subs	r3, r0, r4
   241b6:	4258      	negs	r0, r3
   241b8:	4158      	adcs	r0, r3
}
   241ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   241be:	f7ff bc25 	b.w	23a0c <update_cache>
   241c2:	bf00      	nop
   241c4:	20021e08 	.word	0x20021e08
   241c8:	20021de0 	.word	0x20021de0

000241cc <add_to_waitq_locked>:
{
   241cc:	b538      	push	{r3, r4, r5, lr}
   241ce:	4604      	mov	r4, r0
   241d0:	460d      	mov	r5, r1
	unready_thread(thread);
   241d2:	f7ff ffdf 	bl	24194 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   241d6:	7b63      	ldrb	r3, [r4, #13]
   241d8:	f043 0302 	orr.w	r3, r3, #2
   241dc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   241de:	b33d      	cbz	r5, 24230 <add_to_waitq_locked+0x64>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   241e0:	4b17      	ldr	r3, [pc, #92]	; (24240 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   241e2:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   241e4:	429c      	cmp	r4, r3
   241e6:	d10b      	bne.n	24200 <add_to_waitq_locked+0x34>
   241e8:	4916      	ldr	r1, [pc, #88]	; (24244 <add_to_waitq_locked+0x78>)
   241ea:	4817      	ldr	r0, [pc, #92]	; (24248 <add_to_waitq_locked+0x7c>)
   241ec:	f240 3389 	movw	r3, #905	; 0x389
   241f0:	4a16      	ldr	r2, [pc, #88]	; (2424c <add_to_waitq_locked+0x80>)
   241f2:	f008 f91e 	bl	2c432 <printk>
   241f6:	f240 3189 	movw	r1, #905	; 0x389
   241fa:	4814      	ldr	r0, [pc, #80]	; (2424c <add_to_waitq_locked+0x80>)
   241fc:	f008 fb36 	bl	2c86c <assert_post_action>
	return list->head == list;
   24200:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24202:	429d      	cmp	r5, r3
   24204:	bf08      	it	eq
   24206:	2300      	moveq	r3, #0
   24208:	2b00      	cmp	r3, #0
   2420a:	bf38      	it	cc
   2420c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2420e:	b183      	cbz	r3, 24232 <add_to_waitq_locked+0x66>
	if (thread_1->base.prio < thread_2->base.prio) {
   24210:	f994 100e 	ldrsb.w	r1, [r4, #14]
   24214:	f993 200e 	ldrsb.w	r2, [r3, #14]
   24218:	4291      	cmp	r1, r2
   2421a:	db04      	blt.n	24226 <add_to_waitq_locked+0x5a>
	return (node == list->tail) ? NULL : node->next;
   2421c:	686a      	ldr	r2, [r5, #4]
   2421e:	429a      	cmp	r2, r3
   24220:	d007      	beq.n	24232 <add_to_waitq_locked+0x66>
   24222:	681b      	ldr	r3, [r3, #0]
   24224:	e7f3      	b.n	2420e <add_to_waitq_locked+0x42>
	node->prev = successor->prev;
   24226:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24228:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2422c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2422e:	605c      	str	r4, [r3, #4]
}
   24230:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   24232:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   24234:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   24236:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   24238:	686b      	ldr	r3, [r5, #4]
   2423a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2423c:	606c      	str	r4, [r5, #4]
   2423e:	e7f7      	b.n	24230 <add_to_waitq_locked+0x64>
   24240:	200211b8 	.word	0x200211b8
   24244:	00032f80 	.word	0x00032f80
   24248:	00030166 	.word	0x00030166
   2424c:	00032f47 	.word	0x00032f47

00024250 <pend>:
{
   24250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24254:	4604      	mov	r4, r0
   24256:	460d      	mov	r5, r1
   24258:	4616      	mov	r6, r2
   2425a:	461f      	mov	r7, r3
	__asm__ volatile(
   2425c:	f04f 0320 	mov.w	r3, #32
   24260:	f3ef 8811 	mrs	r8, BASEPRI
   24264:	f383 8811 	msr	BASEPRI, r3
   24268:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2426c:	481f      	ldr	r0, [pc, #124]	; (242ec <pend+0x9c>)
   2426e:	f000 fd49 	bl	24d04 <z_spin_lock_valid>
   24272:	b968      	cbnz	r0, 24290 <pend+0x40>
   24274:	235c      	movs	r3, #92	; 0x5c
   24276:	4a1e      	ldr	r2, [pc, #120]	; (242f0 <pend+0xa0>)
   24278:	491e      	ldr	r1, [pc, #120]	; (242f4 <pend+0xa4>)
   2427a:	481f      	ldr	r0, [pc, #124]	; (242f8 <pend+0xa8>)
   2427c:	f008 f8d9 	bl	2c432 <printk>
   24280:	491a      	ldr	r1, [pc, #104]	; (242ec <pend+0x9c>)
   24282:	481e      	ldr	r0, [pc, #120]	; (242fc <pend+0xac>)
   24284:	f008 f8d5 	bl	2c432 <printk>
   24288:	215c      	movs	r1, #92	; 0x5c
   2428a:	4819      	ldr	r0, [pc, #100]	; (242f0 <pend+0xa0>)
   2428c:	f008 faee 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   24290:	4816      	ldr	r0, [pc, #88]	; (242ec <pend+0x9c>)
   24292:	f000 fd55 	bl	24d40 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   24296:	4620      	mov	r0, r4
   24298:	4629      	mov	r1, r5
   2429a:	f7ff ff97 	bl	241cc <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2429e:	4813      	ldr	r0, [pc, #76]	; (242ec <pend+0x9c>)
   242a0:	f000 fd3e 	bl	24d20 <z_spin_unlock_valid>
   242a4:	b968      	cbnz	r0, 242c2 <pend+0x72>
   242a6:	2384      	movs	r3, #132	; 0x84
   242a8:	4a11      	ldr	r2, [pc, #68]	; (242f0 <pend+0xa0>)
   242aa:	4915      	ldr	r1, [pc, #84]	; (24300 <pend+0xb0>)
   242ac:	4812      	ldr	r0, [pc, #72]	; (242f8 <pend+0xa8>)
   242ae:	f008 f8c0 	bl	2c432 <printk>
   242b2:	490e      	ldr	r1, [pc, #56]	; (242ec <pend+0x9c>)
   242b4:	4813      	ldr	r0, [pc, #76]	; (24304 <pend+0xb4>)
   242b6:	f008 f8bc 	bl	2c432 <printk>
   242ba:	2184      	movs	r1, #132	; 0x84
   242bc:	480c      	ldr	r0, [pc, #48]	; (242f0 <pend+0xa0>)
   242be:	f008 fad5 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   242c2:	f388 8811 	msr	BASEPRI, r8
   242c6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   242ca:	1c7b      	adds	r3, r7, #1
   242cc:	bf08      	it	eq
   242ce:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   242d2:	d008      	beq.n	242e6 <pend+0x96>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   242d4:	4632      	mov	r2, r6
   242d6:	463b      	mov	r3, r7
   242d8:	f104 0018 	add.w	r0, r4, #24
   242dc:	490a      	ldr	r1, [pc, #40]	; (24308 <pend+0xb8>)
}
   242de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   242e2:	f000 be33 	b.w	24f4c <z_add_timeout>
   242e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   242ea:	bf00      	nop
   242ec:	20021e18 	.word	0x20021e18
   242f0:	000304b3 	.word	0x000304b3
   242f4:	00030505 	.word	0x00030505
   242f8:	00030166 	.word	0x00030166
   242fc:	0003051a 	.word	0x0003051a
   24300:	000304d9 	.word	0x000304d9
   24304:	000304f0 	.word	0x000304f0
   24308:	00023d21 	.word	0x00023d21

0002430c <z_pend_curr>:
{
   2430c:	b538      	push	{r3, r4, r5, lr}
   2430e:	4604      	mov	r4, r0
	pending_current = _current;
   24310:	4b10      	ldr	r3, [pc, #64]	; (24354 <z_pend_curr+0x48>)
{
   24312:	460d      	mov	r5, r1
	pending_current = _current;
   24314:	6898      	ldr	r0, [r3, #8]
   24316:	4b10      	ldr	r3, [pc, #64]	; (24358 <z_pend_curr+0x4c>)
{
   24318:	4611      	mov	r1, r2
	pending_current = _current;
   2431a:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   2431c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   24320:	f7ff ff96 	bl	24250 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24324:	4620      	mov	r0, r4
   24326:	f000 fcfb 	bl	24d20 <z_spin_unlock_valid>
   2432a:	b968      	cbnz	r0, 24348 <z_pend_curr+0x3c>
   2432c:	239b      	movs	r3, #155	; 0x9b
   2432e:	4a0b      	ldr	r2, [pc, #44]	; (2435c <z_pend_curr+0x50>)
   24330:	490b      	ldr	r1, [pc, #44]	; (24360 <z_pend_curr+0x54>)
   24332:	480c      	ldr	r0, [pc, #48]	; (24364 <z_pend_curr+0x58>)
   24334:	f008 f87d 	bl	2c432 <printk>
   24338:	4621      	mov	r1, r4
   2433a:	480b      	ldr	r0, [pc, #44]	; (24368 <z_pend_curr+0x5c>)
   2433c:	f008 f879 	bl	2c432 <printk>
   24340:	219b      	movs	r1, #155	; 0x9b
   24342:	4806      	ldr	r0, [pc, #24]	; (2435c <z_pend_curr+0x50>)
   24344:	f008 fa92 	bl	2c86c <assert_post_action>
   24348:	4628      	mov	r0, r5
}
   2434a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2434e:	f7f0 b8c5 	b.w	144dc <arch_swap>
   24352:	bf00      	nop
   24354:	20021de0 	.word	0x20021de0
   24358:	20021e14 	.word	0x20021e14
   2435c:	000304b3 	.word	0x000304b3
   24360:	000304d9 	.word	0x000304d9
   24364:	00030166 	.word	0x00030166
   24368:	000304f0 	.word	0x000304f0

0002436c <z_set_prio>:
{
   2436c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2436e:	4604      	mov	r4, r0
   24370:	460e      	mov	r6, r1
	__asm__ volatile(
   24372:	f04f 0320 	mov.w	r3, #32
   24376:	f3ef 8711 	mrs	r7, BASEPRI
   2437a:	f383 8811 	msr	BASEPRI, r3
   2437e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24382:	4839      	ldr	r0, [pc, #228]	; (24468 <z_set_prio+0xfc>)
   24384:	f000 fcbe 	bl	24d04 <z_spin_lock_valid>
   24388:	b968      	cbnz	r0, 243a6 <z_set_prio+0x3a>
   2438a:	235c      	movs	r3, #92	; 0x5c
   2438c:	4a37      	ldr	r2, [pc, #220]	; (2446c <z_set_prio+0x100>)
   2438e:	4938      	ldr	r1, [pc, #224]	; (24470 <z_set_prio+0x104>)
   24390:	4838      	ldr	r0, [pc, #224]	; (24474 <z_set_prio+0x108>)
   24392:	f008 f84e 	bl	2c432 <printk>
   24396:	4934      	ldr	r1, [pc, #208]	; (24468 <z_set_prio+0xfc>)
   24398:	4837      	ldr	r0, [pc, #220]	; (24478 <z_set_prio+0x10c>)
   2439a:	f008 f84a 	bl	2c432 <printk>
   2439e:	215c      	movs	r1, #92	; 0x5c
   243a0:	4832      	ldr	r0, [pc, #200]	; (2446c <z_set_prio+0x100>)
   243a2:	f008 fa63 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   243a6:	4830      	ldr	r0, [pc, #192]	; (24468 <z_set_prio+0xfc>)
   243a8:	f000 fcca 	bl	24d40 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   243ac:	7b63      	ldrb	r3, [r4, #13]
   243ae:	b276      	sxtb	r6, r6
   243b0:	06db      	lsls	r3, r3, #27
   243b2:	d155      	bne.n	24460 <z_set_prio+0xf4>
	return !sys_dnode_is_linked(&t->node);
   243b4:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   243b6:	2d00      	cmp	r5, #0
   243b8:	d152      	bne.n	24460 <z_set_prio+0xf4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   243ba:	4621      	mov	r1, r4
   243bc:	482f      	ldr	r0, [pc, #188]	; (2447c <z_set_prio+0x110>)
   243be:	f7ff faab 	bl	23918 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   243c2:	4b2f      	ldr	r3, [pc, #188]	; (24480 <z_set_prio+0x114>)
				thread->base.prio = prio;
   243c4:	73a6      	strb	r6, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   243c6:	429c      	cmp	r4, r3
   243c8:	d10b      	bne.n	243e2 <z_set_prio+0x76>
   243ca:	492e      	ldr	r1, [pc, #184]	; (24484 <z_set_prio+0x118>)
   243cc:	4829      	ldr	r0, [pc, #164]	; (24474 <z_set_prio+0x108>)
   243ce:	f240 3389 	movw	r3, #905	; 0x389
   243d2:	4a2d      	ldr	r2, [pc, #180]	; (24488 <z_set_prio+0x11c>)
   243d4:	f008 f82d 	bl	2c432 <printk>
   243d8:	f240 3189 	movw	r1, #905	; 0x389
   243dc:	482a      	ldr	r0, [pc, #168]	; (24488 <z_set_prio+0x11c>)
   243de:	f008 fa45 	bl	2c86c <assert_post_action>
	return list->head == list;
   243e2:	4a2a      	ldr	r2, [pc, #168]	; (2448c <z_set_prio+0x120>)
   243e4:	4613      	mov	r3, r2
   243e6:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   243ea:	4298      	cmp	r0, r3
   243ec:	bf18      	it	ne
   243ee:	4605      	movne	r5, r0
   243f0:	2d00      	cmp	r5, #0
   243f2:	4619      	mov	r1, r3
   243f4:	462b      	mov	r3, r5
   243f6:	bf38      	it	cc
   243f8:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   243fa:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   243fc:	b353      	cbz	r3, 24454 <z_set_prio+0xe8>
	if (thread_1->base.prio < thread_2->base.prio) {
   243fe:	f994 600e 	ldrsb.w	r6, [r4, #14]
   24402:	f993 500e 	ldrsb.w	r5, [r3, #14]
   24406:	42ae      	cmp	r6, r5
   24408:	db03      	blt.n	24412 <z_set_prio+0xa6>
	return (node == list->tail) ? NULL : node->next;
   2440a:	4298      	cmp	r0, r3
   2440c:	d022      	beq.n	24454 <z_set_prio+0xe8>
   2440e:	681b      	ldr	r3, [r3, #0]
   24410:	e7f4      	b.n	243fc <z_set_prio+0x90>
	node->prev = successor->prev;
   24412:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24414:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   24418:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2441a:	605c      	str	r4, [r3, #4]
			update_cache(1);
   2441c:	2001      	movs	r0, #1
   2441e:	f7ff faf5 	bl	23a0c <update_cache>
   24422:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24424:	4810      	ldr	r0, [pc, #64]	; (24468 <z_set_prio+0xfc>)
   24426:	f000 fc7b 	bl	24d20 <z_spin_unlock_valid>
   2442a:	b968      	cbnz	r0, 24448 <z_set_prio+0xdc>
   2442c:	2384      	movs	r3, #132	; 0x84
   2442e:	4a0f      	ldr	r2, [pc, #60]	; (2446c <z_set_prio+0x100>)
   24430:	4917      	ldr	r1, [pc, #92]	; (24490 <z_set_prio+0x124>)
   24432:	4810      	ldr	r0, [pc, #64]	; (24474 <z_set_prio+0x108>)
   24434:	f007 fffd 	bl	2c432 <printk>
   24438:	490b      	ldr	r1, [pc, #44]	; (24468 <z_set_prio+0xfc>)
   2443a:	4816      	ldr	r0, [pc, #88]	; (24494 <z_set_prio+0x128>)
   2443c:	f007 fff9 	bl	2c432 <printk>
   24440:	2184      	movs	r1, #132	; 0x84
   24442:	480a      	ldr	r0, [pc, #40]	; (2446c <z_set_prio+0x100>)
   24444:	f008 fa12 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   24448:	f387 8811 	msr	BASEPRI, r7
   2444c:	f3bf 8f6f 	isb	sy
}
   24450:	4620      	mov	r0, r4
   24452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   24454:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   24458:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2445a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2445c:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   2445e:	e7dd      	b.n	2441c <z_set_prio+0xb0>
			thread->base.prio = prio;
   24460:	73a6      	strb	r6, [r4, #14]
   24462:	2400      	movs	r4, #0
   24464:	e7de      	b.n	24424 <z_set_prio+0xb8>
   24466:	bf00      	nop
   24468:	20021e18 	.word	0x20021e18
   2446c:	000304b3 	.word	0x000304b3
   24470:	00030505 	.word	0x00030505
   24474:	00030166 	.word	0x00030166
   24478:	0003051a 	.word	0x0003051a
   2447c:	20021e08 	.word	0x20021e08
   24480:	200211b8 	.word	0x200211b8
   24484:	00032f80 	.word	0x00032f80
   24488:	00032f47 	.word	0x00032f47
   2448c:	20021de0 	.word	0x20021de0
   24490:	000304d9 	.word	0x000304d9
   24494:	000304f0 	.word	0x000304f0

00024498 <z_unpend_first_thread>:
{
   24498:	b538      	push	{r3, r4, r5, lr}
   2449a:	4604      	mov	r4, r0
	__asm__ volatile(
   2449c:	f04f 0320 	mov.w	r3, #32
   244a0:	f3ef 8511 	mrs	r5, BASEPRI
   244a4:	f383 8811 	msr	BASEPRI, r3
   244a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   244ac:	4836      	ldr	r0, [pc, #216]	; (24588 <z_unpend_first_thread+0xf0>)
   244ae:	f000 fc29 	bl	24d04 <z_spin_lock_valid>
   244b2:	b968      	cbnz	r0, 244d0 <z_unpend_first_thread+0x38>
   244b4:	235c      	movs	r3, #92	; 0x5c
   244b6:	4a35      	ldr	r2, [pc, #212]	; (2458c <z_unpend_first_thread+0xf4>)
   244b8:	4935      	ldr	r1, [pc, #212]	; (24590 <z_unpend_first_thread+0xf8>)
   244ba:	4836      	ldr	r0, [pc, #216]	; (24594 <z_unpend_first_thread+0xfc>)
   244bc:	f007 ffb9 	bl	2c432 <printk>
   244c0:	4931      	ldr	r1, [pc, #196]	; (24588 <z_unpend_first_thread+0xf0>)
   244c2:	4835      	ldr	r0, [pc, #212]	; (24598 <z_unpend_first_thread+0x100>)
   244c4:	f007 ffb5 	bl	2c432 <printk>
   244c8:	215c      	movs	r1, #92	; 0x5c
   244ca:	4830      	ldr	r0, [pc, #192]	; (2458c <z_unpend_first_thread+0xf4>)
   244cc:	f008 f9ce 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   244d0:	482d      	ldr	r0, [pc, #180]	; (24588 <z_unpend_first_thread+0xf0>)
   244d2:	f000 fc35 	bl	24d40 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   244d6:	4620      	mov	r0, r4
   244d8:	f00a faa2 	bl	2ea20 <z_priq_dumb_best>
   244dc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   244de:	482a      	ldr	r0, [pc, #168]	; (24588 <z_unpend_first_thread+0xf0>)
   244e0:	f000 fc1e 	bl	24d20 <z_spin_unlock_valid>
   244e4:	b968      	cbnz	r0, 24502 <z_unpend_first_thread+0x6a>
   244e6:	2384      	movs	r3, #132	; 0x84
   244e8:	4a28      	ldr	r2, [pc, #160]	; (2458c <z_unpend_first_thread+0xf4>)
   244ea:	492c      	ldr	r1, [pc, #176]	; (2459c <z_unpend_first_thread+0x104>)
   244ec:	4829      	ldr	r0, [pc, #164]	; (24594 <z_unpend_first_thread+0xfc>)
   244ee:	f007 ffa0 	bl	2c432 <printk>
   244f2:	4925      	ldr	r1, [pc, #148]	; (24588 <z_unpend_first_thread+0xf0>)
   244f4:	482a      	ldr	r0, [pc, #168]	; (245a0 <z_unpend_first_thread+0x108>)
   244f6:	f007 ff9c 	bl	2c432 <printk>
   244fa:	2184      	movs	r1, #132	; 0x84
   244fc:	4823      	ldr	r0, [pc, #140]	; (2458c <z_unpend_first_thread+0xf4>)
   244fe:	f008 f9b5 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   24502:	f385 8811 	msr	BASEPRI, r5
   24506:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   2450a:	2c00      	cmp	r4, #0
   2450c:	d039      	beq.n	24582 <z_unpend_first_thread+0xea>
	__asm__ volatile(
   2450e:	f04f 0320 	mov.w	r3, #32
   24512:	f3ef 8511 	mrs	r5, BASEPRI
   24516:	f383 8811 	msr	BASEPRI, r3
   2451a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2451e:	481a      	ldr	r0, [pc, #104]	; (24588 <z_unpend_first_thread+0xf0>)
   24520:	f000 fbf0 	bl	24d04 <z_spin_lock_valid>
   24524:	b968      	cbnz	r0, 24542 <z_unpend_first_thread+0xaa>
   24526:	235c      	movs	r3, #92	; 0x5c
   24528:	4a18      	ldr	r2, [pc, #96]	; (2458c <z_unpend_first_thread+0xf4>)
   2452a:	4919      	ldr	r1, [pc, #100]	; (24590 <z_unpend_first_thread+0xf8>)
   2452c:	4819      	ldr	r0, [pc, #100]	; (24594 <z_unpend_first_thread+0xfc>)
   2452e:	f007 ff80 	bl	2c432 <printk>
   24532:	4915      	ldr	r1, [pc, #84]	; (24588 <z_unpend_first_thread+0xf0>)
   24534:	4818      	ldr	r0, [pc, #96]	; (24598 <z_unpend_first_thread+0x100>)
   24536:	f007 ff7c 	bl	2c432 <printk>
   2453a:	215c      	movs	r1, #92	; 0x5c
   2453c:	4813      	ldr	r0, [pc, #76]	; (2458c <z_unpend_first_thread+0xf4>)
   2453e:	f008 f995 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   24542:	4811      	ldr	r0, [pc, #68]	; (24588 <z_unpend_first_thread+0xf0>)
   24544:	f000 fbfc 	bl	24d40 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   24548:	4620      	mov	r0, r4
   2454a:	f00a fa5a 	bl	2ea02 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2454e:	480e      	ldr	r0, [pc, #56]	; (24588 <z_unpend_first_thread+0xf0>)
   24550:	f000 fbe6 	bl	24d20 <z_spin_unlock_valid>
   24554:	b968      	cbnz	r0, 24572 <z_unpend_first_thread+0xda>
   24556:	2384      	movs	r3, #132	; 0x84
   24558:	4a0c      	ldr	r2, [pc, #48]	; (2458c <z_unpend_first_thread+0xf4>)
   2455a:	4910      	ldr	r1, [pc, #64]	; (2459c <z_unpend_first_thread+0x104>)
   2455c:	480d      	ldr	r0, [pc, #52]	; (24594 <z_unpend_first_thread+0xfc>)
   2455e:	f007 ff68 	bl	2c432 <printk>
   24562:	4909      	ldr	r1, [pc, #36]	; (24588 <z_unpend_first_thread+0xf0>)
   24564:	480e      	ldr	r0, [pc, #56]	; (245a0 <z_unpend_first_thread+0x108>)
   24566:	f007 ff64 	bl	2c432 <printk>
   2456a:	2184      	movs	r1, #132	; 0x84
   2456c:	4807      	ldr	r0, [pc, #28]	; (2458c <z_unpend_first_thread+0xf4>)
   2456e:	f008 f97d 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   24572:	f385 8811 	msr	BASEPRI, r5
   24576:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   2457a:	f104 0018 	add.w	r0, r4, #24
   2457e:	f000 fdb9 	bl	250f4 <z_abort_timeout>
}
   24582:	4620      	mov	r0, r4
   24584:	bd38      	pop	{r3, r4, r5, pc}
   24586:	bf00      	nop
   24588:	20021e18 	.word	0x20021e18
   2458c:	000304b3 	.word	0x000304b3
   24590:	00030505 	.word	0x00030505
   24594:	00030166 	.word	0x00030166
   24598:	0003051a 	.word	0x0003051a
   2459c:	000304d9 	.word	0x000304d9
   245a0:	000304f0 	.word	0x000304f0

000245a4 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   245a4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   245a6:	4b04      	ldr	r3, [pc, #16]	; (245b8 <z_sched_init+0x14>)
   245a8:	4608      	mov	r0, r1
   245aa:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   245ae:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   245b2:	f7ff b803 	b.w	235bc <k_sched_time_slice_set>
   245b6:	bf00      	nop
   245b8:	20021de0 	.word	0x20021de0

000245bc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   245bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   245be:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   245c2:	b173      	cbz	r3, 245e2 <z_impl_k_yield+0x26>
   245c4:	4946      	ldr	r1, [pc, #280]	; (246e0 <z_impl_k_yield+0x124>)
   245c6:	f240 4394 	movw	r3, #1172	; 0x494
   245ca:	4a46      	ldr	r2, [pc, #280]	; (246e4 <z_impl_k_yield+0x128>)
   245cc:	4846      	ldr	r0, [pc, #280]	; (246e8 <z_impl_k_yield+0x12c>)
   245ce:	f007 ff30 	bl	2c432 <printk>
   245d2:	4846      	ldr	r0, [pc, #280]	; (246ec <z_impl_k_yield+0x130>)
   245d4:	f007 ff2d 	bl	2c432 <printk>
   245d8:	f240 4194 	movw	r1, #1172	; 0x494
   245dc:	4841      	ldr	r0, [pc, #260]	; (246e4 <z_impl_k_yield+0x128>)
   245de:	f008 f945 	bl	2c86c <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   245e2:	4c43      	ldr	r4, [pc, #268]	; (246f0 <z_impl_k_yield+0x134>)
   245e4:	4e43      	ldr	r6, [pc, #268]	; (246f4 <z_impl_k_yield+0x138>)
   245e6:	68a2      	ldr	r2, [r4, #8]
   245e8:	42b2      	cmp	r2, r6
   245ea:	d067      	beq.n	246bc <z_impl_k_yield+0x100>
	__asm__ volatile(
   245ec:	f04f 0320 	mov.w	r3, #32
   245f0:	f3ef 8711 	mrs	r7, BASEPRI
   245f4:	f383 8811 	msr	BASEPRI, r3
   245f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   245fc:	483e      	ldr	r0, [pc, #248]	; (246f8 <z_impl_k_yield+0x13c>)
   245fe:	f000 fb81 	bl	24d04 <z_spin_lock_valid>
   24602:	b968      	cbnz	r0, 24620 <z_impl_k_yield+0x64>
   24604:	235c      	movs	r3, #92	; 0x5c
   24606:	4a3d      	ldr	r2, [pc, #244]	; (246fc <z_impl_k_yield+0x140>)
   24608:	493d      	ldr	r1, [pc, #244]	; (24700 <z_impl_k_yield+0x144>)
   2460a:	4837      	ldr	r0, [pc, #220]	; (246e8 <z_impl_k_yield+0x12c>)
   2460c:	f007 ff11 	bl	2c432 <printk>
   24610:	4939      	ldr	r1, [pc, #228]	; (246f8 <z_impl_k_yield+0x13c>)
   24612:	483c      	ldr	r0, [pc, #240]	; (24704 <z_impl_k_yield+0x148>)
   24614:	f007 ff0d 	bl	2c432 <printk>
   24618:	215c      	movs	r1, #92	; 0x5c
   2461a:	4838      	ldr	r0, [pc, #224]	; (246fc <z_impl_k_yield+0x140>)
   2461c:	f008 f926 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   24620:	4835      	ldr	r0, [pc, #212]	; (246f8 <z_impl_k_yield+0x13c>)
   24622:	f000 fb8d 	bl	24d40 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   24626:	68a1      	ldr	r1, [r4, #8]
   24628:	4837      	ldr	r0, [pc, #220]	; (24708 <z_impl_k_yield+0x14c>)
   2462a:	f7ff f975 	bl	23918 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   2462e:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24630:	42b5      	cmp	r5, r6
   24632:	d10b      	bne.n	2464c <z_impl_k_yield+0x90>
   24634:	4935      	ldr	r1, [pc, #212]	; (2470c <z_impl_k_yield+0x150>)
   24636:	482c      	ldr	r0, [pc, #176]	; (246e8 <z_impl_k_yield+0x12c>)
   24638:	f240 3389 	movw	r3, #905	; 0x389
   2463c:	4a29      	ldr	r2, [pc, #164]	; (246e4 <z_impl_k_yield+0x128>)
   2463e:	f007 fef8 	bl	2c432 <printk>
   24642:	f240 3189 	movw	r1, #905	; 0x389
   24646:	4827      	ldr	r0, [pc, #156]	; (246e4 <z_impl_k_yield+0x128>)
   24648:	f008 f910 	bl	2c86c <assert_post_action>
	return list->head == list;
   2464c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2464e:	492e      	ldr	r1, [pc, #184]	; (24708 <z_impl_k_yield+0x14c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24650:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24652:	428b      	cmp	r3, r1
   24654:	bf08      	it	eq
   24656:	2300      	moveq	r3, #0
   24658:	2b00      	cmp	r3, #0
   2465a:	bf38      	it	cc
   2465c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2465e:	2b00      	cmp	r3, #0
   24660:	d038      	beq.n	246d4 <z_impl_k_yield+0x118>
	if (thread_1->base.prio < thread_2->base.prio) {
   24662:	f995 600e 	ldrsb.w	r6, [r5, #14]
   24666:	f993 000e 	ldrsb.w	r0, [r3, #14]
   2466a:	4286      	cmp	r6, r0
   2466c:	db03      	blt.n	24676 <z_impl_k_yield+0xba>
	return (node == list->tail) ? NULL : node->next;
   2466e:	4293      	cmp	r3, r2
   24670:	d030      	beq.n	246d4 <z_impl_k_yield+0x118>
   24672:	681b      	ldr	r3, [r3, #0]
   24674:	e7f3      	b.n	2465e <z_impl_k_yield+0xa2>
	node->prev = successor->prev;
   24676:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24678:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   2467c:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   2467e:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   24680:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   24682:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   24684:	7b53      	ldrb	r3, [r2, #13]
   24686:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2468a:	7353      	strb	r3, [r2, #13]
   2468c:	f7ff f9be 	bl	23a0c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24690:	4819      	ldr	r0, [pc, #100]	; (246f8 <z_impl_k_yield+0x13c>)
   24692:	f000 fb45 	bl	24d20 <z_spin_unlock_valid>
   24696:	b968      	cbnz	r0, 246b4 <z_impl_k_yield+0xf8>
   24698:	2384      	movs	r3, #132	; 0x84
   2469a:	4a18      	ldr	r2, [pc, #96]	; (246fc <z_impl_k_yield+0x140>)
   2469c:	491c      	ldr	r1, [pc, #112]	; (24710 <z_impl_k_yield+0x154>)
   2469e:	4812      	ldr	r0, [pc, #72]	; (246e8 <z_impl_k_yield+0x12c>)
   246a0:	f007 fec7 	bl	2c432 <printk>
   246a4:	4914      	ldr	r1, [pc, #80]	; (246f8 <z_impl_k_yield+0x13c>)
   246a6:	481b      	ldr	r0, [pc, #108]	; (24714 <z_impl_k_yield+0x158>)
   246a8:	f007 fec3 	bl	2c432 <printk>
   246ac:	2184      	movs	r1, #132	; 0x84
   246ae:	4813      	ldr	r0, [pc, #76]	; (246fc <z_impl_k_yield+0x140>)
   246b0:	f008 f8dc 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   246b4:	f387 8811 	msr	BASEPRI, r7
   246b8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   246bc:	f04f 0320 	mov.w	r3, #32
   246c0:	f3ef 8011 	mrs	r0, BASEPRI
   246c4:	f383 8811 	msr	BASEPRI, r3
   246c8:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   246cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   246d0:	f7ef bf04 	b.w	144dc <arch_swap>
	node->prev = list->tail;
   246d4:	e9c5 1200 	strd	r1, r2, [r5]
	list->tail->next = node;
   246d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   246da:	601d      	str	r5, [r3, #0]
	list->tail = node;
   246dc:	62e5      	str	r5, [r4, #44]	; 0x2c
}
   246de:	e7cf      	b.n	24680 <z_impl_k_yield+0xc4>
   246e0:	00032e9e 	.word	0x00032e9e
   246e4:	00032f47 	.word	0x00032f47
   246e8:	00030166 	.word	0x00030166
   246ec:	00030a10 	.word	0x00030a10
   246f0:	20021de0 	.word	0x20021de0
   246f4:	200211b8 	.word	0x200211b8
   246f8:	20021e18 	.word	0x20021e18
   246fc:	000304b3 	.word	0x000304b3
   24700:	00030505 	.word	0x00030505
   24704:	0003051a 	.word	0x0003051a
   24708:	20021e08 	.word	0x20021e08
   2470c:	00032f80 	.word	0x00032f80
   24710:	000304d9 	.word	0x000304d9
   24714:	000304f0 	.word	0x000304f0

00024718 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
{
   24718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2471c:	4604      	mov	r4, r0
   2471e:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   24722:	b173      	cbz	r3, 24742 <z_tick_sleep+0x2a>
   24724:	493b      	ldr	r1, [pc, #236]	; (24814 <z_tick_sleep+0xfc>)
   24726:	f240 43b2 	movw	r3, #1202	; 0x4b2
   2472a:	4a3b      	ldr	r2, [pc, #236]	; (24818 <z_tick_sleep+0x100>)
   2472c:	483b      	ldr	r0, [pc, #236]	; (2481c <z_tick_sleep+0x104>)
   2472e:	f007 fe80 	bl	2c432 <printk>
   24732:	483b      	ldr	r0, [pc, #236]	; (24820 <z_tick_sleep+0x108>)
   24734:	f007 fe7d 	bl	2c432 <printk>
   24738:	f240 41b2 	movw	r1, #1202	; 0x4b2
   2473c:	4836      	ldr	r0, [pc, #216]	; (24818 <z_tick_sleep+0x100>)
   2473e:	f008 f895 	bl	2c86c <assert_post_action>

	LOG_DBG("thread %p for %d ticks", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   24742:	b924      	cbnz	r4, 2474e <z_tick_sleep+0x36>
	z_impl_k_yield();
   24744:	f7ff ff3a 	bl	245bc <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   24748:	4620      	mov	r0, r4
   2474a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   2474e:	f00a fa02 	bl	2eb56 <z_tick_get_32>
	timeout = Z_TIMEOUT_TICKS(ticks);
   24752:	4626      	mov	r6, r4
   24754:	17e7      	asrs	r7, r4, #31
	expected_wakeup_time = ticks + z_tick_get_32();
   24756:	4404      	add	r4, r0
   24758:	f04f 0320 	mov.w	r3, #32
   2475c:	f3ef 8811 	mrs	r8, BASEPRI
   24760:	f383 8811 	msr	BASEPRI, r3
   24764:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24768:	482e      	ldr	r0, [pc, #184]	; (24824 <z_tick_sleep+0x10c>)
   2476a:	f000 facb 	bl	24d04 <z_spin_lock_valid>
   2476e:	b968      	cbnz	r0, 2478c <z_tick_sleep+0x74>
   24770:	235c      	movs	r3, #92	; 0x5c
   24772:	4a2d      	ldr	r2, [pc, #180]	; (24828 <z_tick_sleep+0x110>)
   24774:	492d      	ldr	r1, [pc, #180]	; (2482c <z_tick_sleep+0x114>)
   24776:	4829      	ldr	r0, [pc, #164]	; (2481c <z_tick_sleep+0x104>)
   24778:	f007 fe5b 	bl	2c432 <printk>
   2477c:	4929      	ldr	r1, [pc, #164]	; (24824 <z_tick_sleep+0x10c>)
   2477e:	482c      	ldr	r0, [pc, #176]	; (24830 <z_tick_sleep+0x118>)
   24780:	f007 fe57 	bl	2c432 <printk>
   24784:	215c      	movs	r1, #92	; 0x5c
   24786:	4828      	ldr	r0, [pc, #160]	; (24828 <z_tick_sleep+0x110>)
   24788:	f008 f870 	bl	2c86c <assert_post_action>
	pending_current = _current;
   2478c:	4d29      	ldr	r5, [pc, #164]	; (24834 <z_tick_sleep+0x11c>)
	z_spin_lock_set_owner(l);
   2478e:	4825      	ldr	r0, [pc, #148]	; (24824 <z_tick_sleep+0x10c>)
   24790:	f000 fad6 	bl	24d40 <z_spin_lock_set_owner>
   24794:	68a8      	ldr	r0, [r5, #8]
   24796:	4b28      	ldr	r3, [pc, #160]	; (24838 <z_tick_sleep+0x120>)
   24798:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   2479a:	f7ff fcfb 	bl	24194 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2479e:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   247a0:	4632      	mov	r2, r6
   247a2:	463b      	mov	r3, r7
   247a4:	3018      	adds	r0, #24
   247a6:	4925      	ldr	r1, [pc, #148]	; (2483c <z_tick_sleep+0x124>)
   247a8:	f000 fbd0 	bl	24f4c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   247ac:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   247ae:	481d      	ldr	r0, [pc, #116]	; (24824 <z_tick_sleep+0x10c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   247b0:	7b53      	ldrb	r3, [r2, #13]
   247b2:	f043 0310 	orr.w	r3, r3, #16
   247b6:	7353      	strb	r3, [r2, #13]
   247b8:	f000 fab2 	bl	24d20 <z_spin_unlock_valid>
   247bc:	b968      	cbnz	r0, 247da <z_tick_sleep+0xc2>
   247be:	239b      	movs	r3, #155	; 0x9b
   247c0:	4a19      	ldr	r2, [pc, #100]	; (24828 <z_tick_sleep+0x110>)
   247c2:	491f      	ldr	r1, [pc, #124]	; (24840 <z_tick_sleep+0x128>)
   247c4:	4815      	ldr	r0, [pc, #84]	; (2481c <z_tick_sleep+0x104>)
   247c6:	f007 fe34 	bl	2c432 <printk>
   247ca:	4916      	ldr	r1, [pc, #88]	; (24824 <z_tick_sleep+0x10c>)
   247cc:	481d      	ldr	r0, [pc, #116]	; (24844 <z_tick_sleep+0x12c>)
   247ce:	f007 fe30 	bl	2c432 <printk>
   247d2:	219b      	movs	r1, #155	; 0x9b
   247d4:	4814      	ldr	r0, [pc, #80]	; (24828 <z_tick_sleep+0x110>)
   247d6:	f008 f849 	bl	2c86c <assert_post_action>
   247da:	4640      	mov	r0, r8
   247dc:	f7ef fe7e 	bl	144dc <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   247e0:	68ab      	ldr	r3, [r5, #8]
   247e2:	7b5b      	ldrb	r3, [r3, #13]
   247e4:	06db      	lsls	r3, r3, #27
   247e6:	d50e      	bpl.n	24806 <z_tick_sleep+0xee>
   247e8:	4917      	ldr	r1, [pc, #92]	; (24848 <z_tick_sleep+0x130>)
   247ea:	f240 43d2 	movw	r3, #1234	; 0x4d2
   247ee:	4a0a      	ldr	r2, [pc, #40]	; (24818 <z_tick_sleep+0x100>)
   247f0:	480a      	ldr	r0, [pc, #40]	; (2481c <z_tick_sleep+0x104>)
   247f2:	f007 fe1e 	bl	2c432 <printk>
   247f6:	480a      	ldr	r0, [pc, #40]	; (24820 <z_tick_sleep+0x108>)
   247f8:	f007 fe1b 	bl	2c432 <printk>
   247fc:	f240 41d2 	movw	r1, #1234	; 0x4d2
   24800:	4805      	ldr	r0, [pc, #20]	; (24818 <z_tick_sleep+0x100>)
   24802:	f008 f833 	bl	2c86c <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   24806:	f00a f9a6 	bl	2eb56 <z_tick_get_32>
   2480a:	1a24      	subs	r4, r4, r0
   2480c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   24810:	e79a      	b.n	24748 <z_tick_sleep+0x30>
   24812:	bf00      	nop
   24814:	00032e9e 	.word	0x00032e9e
   24818:	00032f47 	.word	0x00032f47
   2481c:	00030166 	.word	0x00030166
   24820:	00030a10 	.word	0x00030a10
   24824:	20021e18 	.word	0x20021e18
   24828:	000304b3 	.word	0x000304b3
   2482c:	00030505 	.word	0x00030505
   24830:	0003051a 	.word	0x0003051a
   24834:	20021de0 	.word	0x20021de0
   24838:	20021e14 	.word	0x20021e14
   2483c:	00023d21 	.word	0x00023d21
   24840:	000304d9 	.word	0x000304d9
   24844:	000304f0 	.word	0x000304f0
   24848:	0003301a 	.word	0x0003301a

0002484c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   2484c:	b538      	push	{r3, r4, r5, lr}
   2484e:	4604      	mov	r4, r0
   24850:	460d      	mov	r5, r1
   24852:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   24856:	b173      	cbz	r3, 24876 <z_impl_k_sleep+0x2a>
   24858:	4912      	ldr	r1, [pc, #72]	; (248a4 <z_impl_k_sleep+0x58>)
   2485a:	f240 43e1 	movw	r3, #1249	; 0x4e1
   2485e:	4a12      	ldr	r2, [pc, #72]	; (248a8 <z_impl_k_sleep+0x5c>)
   24860:	4812      	ldr	r0, [pc, #72]	; (248ac <z_impl_k_sleep+0x60>)
   24862:	f007 fde6 	bl	2c432 <printk>
   24866:	4812      	ldr	r0, [pc, #72]	; (248b0 <z_impl_k_sleep+0x64>)
   24868:	f007 fde3 	bl	2c432 <printk>
   2486c:	f240 41e1 	movw	r1, #1249	; 0x4e1
   24870:	480d      	ldr	r0, [pc, #52]	; (248a8 <z_impl_k_sleep+0x5c>)
   24872:	f007 fffb 	bl	2c86c <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24876:	3501      	adds	r5, #1
   24878:	bf08      	it	eq
   2487a:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   2487e:	d106      	bne.n	2488e <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   24880:	4b0c      	ldr	r3, [pc, #48]	; (248b4 <z_impl_k_sleep+0x68>)
   24882:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   24884:	f7ff fb6c 	bl	23f60 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   24888:	f04f 30ff 	mov.w	r0, #4294967295
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   2488c:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   2488e:	4620      	mov	r0, r4
   24890:	f7ff ff42 	bl	24718 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   24894:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   24898:	fb80 0103 	smull	r0, r1, r0, r3
   2489c:	0bc3      	lsrs	r3, r0, #15
   2489e:	ea43 4041 	orr.w	r0, r3, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   248a2:	e7f3      	b.n	2488c <z_impl_k_sleep+0x40>
   248a4:	00032e9e 	.word	0x00032e9e
   248a8:	00032f47 	.word	0x00032f47
   248ac:	00030166 	.word	0x00030166
   248b0:	00030a10 	.word	0x00030a10
   248b4:	20021de0 	.word	0x20021de0

000248b8 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   248b8:	4b01      	ldr	r3, [pc, #4]	; (248c0 <z_impl_k_current_get+0x8>)
   248ba:	6898      	ldr	r0, [r3, #8]
   248bc:	4770      	bx	lr
   248be:	bf00      	nop
   248c0:	20021de0 	.word	0x20021de0

000248c4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   248c4:	b538      	push	{r3, r4, r5, lr}
   248c6:	4604      	mov	r4, r0
   248c8:	f04f 0320 	mov.w	r3, #32
   248cc:	f3ef 8511 	mrs	r5, BASEPRI
   248d0:	f383 8811 	msr	BASEPRI, r3
   248d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   248d8:	4817      	ldr	r0, [pc, #92]	; (24938 <z_impl_k_sem_give+0x74>)
   248da:	f000 fa13 	bl	24d04 <z_spin_lock_valid>
   248de:	b968      	cbnz	r0, 248fc <z_impl_k_sem_give+0x38>
   248e0:	235c      	movs	r3, #92	; 0x5c
   248e2:	4a16      	ldr	r2, [pc, #88]	; (2493c <z_impl_k_sem_give+0x78>)
   248e4:	4916      	ldr	r1, [pc, #88]	; (24940 <z_impl_k_sem_give+0x7c>)
   248e6:	4817      	ldr	r0, [pc, #92]	; (24944 <z_impl_k_sem_give+0x80>)
   248e8:	f007 fda3 	bl	2c432 <printk>
   248ec:	4912      	ldr	r1, [pc, #72]	; (24938 <z_impl_k_sem_give+0x74>)
   248ee:	4816      	ldr	r0, [pc, #88]	; (24948 <z_impl_k_sem_give+0x84>)
   248f0:	f007 fd9f 	bl	2c432 <printk>
   248f4:	215c      	movs	r1, #92	; 0x5c
   248f6:	4811      	ldr	r0, [pc, #68]	; (2493c <z_impl_k_sem_give+0x78>)
   248f8:	f007 ffb8 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   248fc:	480e      	ldr	r0, [pc, #56]	; (24938 <z_impl_k_sem_give+0x74>)
   248fe:	f000 fa1f 	bl	24d40 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   24902:	4620      	mov	r0, r4
   24904:	f7ff fdc8 	bl	24498 <z_unpend_first_thread>

	if (thread != NULL) {
   24908:	b148      	cbz	r0, 2491e <z_impl_k_sem_give+0x5a>
   2490a:	2200      	movs	r2, #0
   2490c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2490e:	f7ff f96b 	bl	23be8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   24912:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   24914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   24918:	4807      	ldr	r0, [pc, #28]	; (24938 <z_impl_k_sem_give+0x74>)
   2491a:	f7fe bf41 	b.w	237a0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2491e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   24922:	429a      	cmp	r2, r3
   24924:	bf18      	it	ne
   24926:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   24928:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2492a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2492c:	f104 0010 	add.w	r0, r4, #16
   24930:	f00a f9ba 	bl	2eca8 <z_handle_obj_poll_events>
}
   24934:	e7ed      	b.n	24912 <z_impl_k_sem_give+0x4e>
   24936:	bf00      	nop
   24938:	20021e24 	.word	0x20021e24
   2493c:	000304b3 	.word	0x000304b3
   24940:	00030505 	.word	0x00030505
   24944:	00030166 	.word	0x00030166
   24948:	0003051a 	.word	0x0003051a

0002494c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   2494c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2494e:	4604      	mov	r4, r0
   24950:	4616      	mov	r6, r2
   24952:	461f      	mov	r7, r3
   24954:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   24958:	b17b      	cbz	r3, 2497a <z_impl_k_sem_take+0x2e>
   2495a:	ea56 0307 	orrs.w	r3, r6, r7
   2495e:	d00c      	beq.n	2497a <z_impl_k_sem_take+0x2e>
   24960:	4935      	ldr	r1, [pc, #212]	; (24a38 <z_impl_k_sem_take+0xec>)
   24962:	238c      	movs	r3, #140	; 0x8c
   24964:	4a35      	ldr	r2, [pc, #212]	; (24a3c <z_impl_k_sem_take+0xf0>)
   24966:	4836      	ldr	r0, [pc, #216]	; (24a40 <z_impl_k_sem_take+0xf4>)
   24968:	f007 fd63 	bl	2c432 <printk>
   2496c:	4835      	ldr	r0, [pc, #212]	; (24a44 <z_impl_k_sem_take+0xf8>)
   2496e:	f007 fd60 	bl	2c432 <printk>
   24972:	218c      	movs	r1, #140	; 0x8c
   24974:	4831      	ldr	r0, [pc, #196]	; (24a3c <z_impl_k_sem_take+0xf0>)
   24976:	f007 ff79 	bl	2c86c <assert_post_action>
   2497a:	f04f 0320 	mov.w	r3, #32
   2497e:	f3ef 8511 	mrs	r5, BASEPRI
   24982:	f383 8811 	msr	BASEPRI, r3
   24986:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2498a:	482f      	ldr	r0, [pc, #188]	; (24a48 <z_impl_k_sem_take+0xfc>)
   2498c:	f000 f9ba 	bl	24d04 <z_spin_lock_valid>
   24990:	b968      	cbnz	r0, 249ae <z_impl_k_sem_take+0x62>
   24992:	235c      	movs	r3, #92	; 0x5c
   24994:	4a2d      	ldr	r2, [pc, #180]	; (24a4c <z_impl_k_sem_take+0x100>)
   24996:	492e      	ldr	r1, [pc, #184]	; (24a50 <z_impl_k_sem_take+0x104>)
   24998:	4829      	ldr	r0, [pc, #164]	; (24a40 <z_impl_k_sem_take+0xf4>)
   2499a:	f007 fd4a 	bl	2c432 <printk>
   2499e:	492a      	ldr	r1, [pc, #168]	; (24a48 <z_impl_k_sem_take+0xfc>)
   249a0:	482c      	ldr	r0, [pc, #176]	; (24a54 <z_impl_k_sem_take+0x108>)
   249a2:	f007 fd46 	bl	2c432 <printk>
   249a6:	215c      	movs	r1, #92	; 0x5c
   249a8:	4828      	ldr	r0, [pc, #160]	; (24a4c <z_impl_k_sem_take+0x100>)
   249aa:	f007 ff5f 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   249ae:	4826      	ldr	r0, [pc, #152]	; (24a48 <z_impl_k_sem_take+0xfc>)
   249b0:	f000 f9c6 	bl	24d40 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   249b4:	68a3      	ldr	r3, [r4, #8]
   249b6:	b1d3      	cbz	r3, 249ee <z_impl_k_sem_take+0xa2>
		sem->count--;
   249b8:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   249ba:	4823      	ldr	r0, [pc, #140]	; (24a48 <z_impl_k_sem_take+0xfc>)
   249bc:	60a3      	str	r3, [r4, #8]
   249be:	f000 f9af 	bl	24d20 <z_spin_unlock_valid>
   249c2:	b968      	cbnz	r0, 249e0 <z_impl_k_sem_take+0x94>
   249c4:	2384      	movs	r3, #132	; 0x84
   249c6:	4a21      	ldr	r2, [pc, #132]	; (24a4c <z_impl_k_sem_take+0x100>)
   249c8:	4923      	ldr	r1, [pc, #140]	; (24a58 <z_impl_k_sem_take+0x10c>)
   249ca:	481d      	ldr	r0, [pc, #116]	; (24a40 <z_impl_k_sem_take+0xf4>)
   249cc:	f007 fd31 	bl	2c432 <printk>
   249d0:	491d      	ldr	r1, [pc, #116]	; (24a48 <z_impl_k_sem_take+0xfc>)
   249d2:	4822      	ldr	r0, [pc, #136]	; (24a5c <z_impl_k_sem_take+0x110>)
   249d4:	f007 fd2d 	bl	2c432 <printk>
   249d8:	2184      	movs	r1, #132	; 0x84
   249da:	481c      	ldr	r0, [pc, #112]	; (24a4c <z_impl_k_sem_take+0x100>)
   249dc:	f007 ff46 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   249e0:	f385 8811 	msr	BASEPRI, r5
   249e4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   249e8:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   249ea:	b003      	add	sp, #12
   249ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   249ee:	ea56 0307 	orrs.w	r3, r6, r7
   249f2:	d118      	bne.n	24a26 <z_impl_k_sem_take+0xda>
   249f4:	4814      	ldr	r0, [pc, #80]	; (24a48 <z_impl_k_sem_take+0xfc>)
   249f6:	f000 f993 	bl	24d20 <z_spin_unlock_valid>
   249fa:	b968      	cbnz	r0, 24a18 <z_impl_k_sem_take+0xcc>
   249fc:	2384      	movs	r3, #132	; 0x84
   249fe:	4a13      	ldr	r2, [pc, #76]	; (24a4c <z_impl_k_sem_take+0x100>)
   24a00:	4915      	ldr	r1, [pc, #84]	; (24a58 <z_impl_k_sem_take+0x10c>)
   24a02:	480f      	ldr	r0, [pc, #60]	; (24a40 <z_impl_k_sem_take+0xf4>)
   24a04:	f007 fd15 	bl	2c432 <printk>
   24a08:	490f      	ldr	r1, [pc, #60]	; (24a48 <z_impl_k_sem_take+0xfc>)
   24a0a:	4814      	ldr	r0, [pc, #80]	; (24a5c <z_impl_k_sem_take+0x110>)
   24a0c:	f007 fd11 	bl	2c432 <printk>
   24a10:	2184      	movs	r1, #132	; 0x84
   24a12:	480e      	ldr	r0, [pc, #56]	; (24a4c <z_impl_k_sem_take+0x100>)
   24a14:	f007 ff2a 	bl	2c86c <assert_post_action>
   24a18:	f385 8811 	msr	BASEPRI, r5
   24a1c:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   24a20:	f06f 000f 	mvn.w	r0, #15
   24a24:	e7e1      	b.n	249ea <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   24a26:	4622      	mov	r2, r4
   24a28:	4629      	mov	r1, r5
   24a2a:	e9cd 6700 	strd	r6, r7, [sp]
   24a2e:	4806      	ldr	r0, [pc, #24]	; (24a48 <z_impl_k_sem_take+0xfc>)
   24a30:	f7ff fc6c 	bl	2430c <z_pend_curr>
	return ret;
   24a34:	e7d9      	b.n	249ea <z_impl_k_sem_take+0x9e>
   24a36:	bf00      	nop
   24a38:	0003307a 	.word	0x0003307a
   24a3c:	0003305a 	.word	0x0003305a
   24a40:	00030166 	.word	0x00030166
   24a44:	00030a10 	.word	0x00030a10
   24a48:	20021e24 	.word	0x20021e24
   24a4c:	000304b3 	.word	0x000304b3
   24a50:	00030505 	.word	0x00030505
   24a54:	0003051a 	.word	0x0003051a
   24a58:	000304d9 	.word	0x000304d9
   24a5c:	000304f0 	.word	0x000304f0

00024a60 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   24a60:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   24a62:	4c08      	ldr	r4, [pc, #32]	; (24a84 <k_sys_work_q_init+0x24>)
   24a64:	f04f 33ff 	mov.w	r3, #4294967295
   24a68:	f44f 6280 	mov.w	r2, #1024	; 0x400
   24a6c:	4620      	mov	r0, r4
   24a6e:	4906      	ldr	r1, [pc, #24]	; (24a88 <k_sys_work_q_init+0x28>)
   24a70:	f000 f96e 	bl	24d50 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   24a74:	4905      	ldr	r1, [pc, #20]	; (24a8c <k_sys_work_q_init+0x2c>)
   24a76:	f104 0020 	add.w	r0, r4, #32
   24a7a:	f00a f803 	bl	2ea84 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   24a7e:	2000      	movs	r0, #0
   24a80:	bd10      	pop	{r4, pc}
   24a82:	bf00      	nop
   24a84:	20021348 	.word	0x20021348
   24a88:	20029c78 	.word	0x20029c78
   24a8c:	000330c7 	.word	0x000330c7

00024a90 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   24a90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   24a94:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   24a96:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   24a98:	2e0f      	cmp	r6, #15
{
   24a9a:	460f      	mov	r7, r1
   24a9c:	4615      	mov	r5, r2
   24a9e:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   24aa0:	d12d      	bne.n	24afe <z_setup_new_thread+0x6e>
   24aa2:	4b23      	ldr	r3, [pc, #140]	; (24b30 <z_setup_new_thread+0xa0>)
   24aa4:	4598      	cmp	r8, r3
   24aa6:	d12e      	bne.n	24b06 <z_setup_new_thread+0x76>
	sys_dlist_init(&w->waitq);
   24aa8:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   24aac:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   24ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   24ab2:	73a6      	strb	r6, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   24ab4:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   24ab6:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   24ab8:	2600      	movs	r6, #0
	thread_base->thread_state = (uint8_t)initial_state;
   24aba:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24abc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   24abe:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24ac0:	9302      	str	r3, [sp, #8]
   24ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   24ac4:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24ac8:	9301      	str	r3, [sp, #4]
   24aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   24acc:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   24ace:	e9c4 701a 	strd	r7, r0, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24ad2:	9300      	str	r3, [sp, #0]
   24ad4:	462a      	mov	r2, r5
   24ad6:	4643      	mov	r3, r8
   24ad8:	4639      	mov	r1, r7
   24ada:	4620      	mov	r0, r4
	node->prev = NULL;
   24adc:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->sched_locked = 0U;
   24ae0:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   24ae2:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24ae4:	f7ef fdda 	bl	1469c <arch_new_thread>
	if (!_current) {
   24ae8:	4b12      	ldr	r3, [pc, #72]	; (24b34 <z_setup_new_thread+0xa4>)
	new_thread->fn_abort = NULL;
   24aea:	e9c4 6617 	strd	r6, r6, [r4, #92]	; 0x5c
	if (!_current) {
   24aee:	689b      	ldr	r3, [r3, #8]
   24af0:	b103      	cbz	r3, 24af4 <z_setup_new_thread+0x64>
	new_thread->resource_pool = _current->resource_pool;
   24af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   24af4:	4628      	mov	r0, r5
   24af6:	6763      	str	r3, [r4, #116]	; 0x74
   24af8:	b004      	add	sp, #16
   24afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   24afe:	f106 0310 	add.w	r3, r6, #16
   24b02:	2b1e      	cmp	r3, #30
   24b04:	d9d0      	bls.n	24aa8 <z_setup_new_thread+0x18>
   24b06:	f240 2313 	movw	r3, #531	; 0x213
   24b0a:	4a0b      	ldr	r2, [pc, #44]	; (24b38 <z_setup_new_thread+0xa8>)
   24b0c:	490b      	ldr	r1, [pc, #44]	; (24b3c <z_setup_new_thread+0xac>)
   24b0e:	480c      	ldr	r0, [pc, #48]	; (24b40 <z_setup_new_thread+0xb0>)
   24b10:	f007 fc8f 	bl	2c432 <printk>
   24b14:	4631      	mov	r1, r6
   24b16:	f06f 030f 	mvn.w	r3, #15
   24b1a:	220e      	movs	r2, #14
   24b1c:	4809      	ldr	r0, [pc, #36]	; (24b44 <z_setup_new_thread+0xb4>)
   24b1e:	f007 fc88 	bl	2c432 <printk>
   24b22:	f240 2113 	movw	r1, #531	; 0x213
   24b26:	4804      	ldr	r0, [pc, #16]	; (24b38 <z_setup_new_thread+0xa8>)
   24b28:	f007 fea0 	bl	2c86c <assert_post_action>
   24b2c:	e7bc      	b.n	24aa8 <z_setup_new_thread+0x18>
   24b2e:	bf00      	nop
   24b30:	00022701 	.word	0x00022701
   24b34:	20021de0 	.word	0x20021de0
   24b38:	000330d0 	.word	0x000330d0
   24b3c:	000330f3 	.word	0x000330f3
   24b40:	00030166 	.word	0x00030166
   24b44:	00033173 	.word	0x00033173

00024b48 <z_impl_k_thread_create>:
{
   24b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24b4c:	b087      	sub	sp, #28
   24b4e:	4604      	mov	r4, r0
   24b50:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   24b54:	460d      	mov	r5, r1
   24b56:	4690      	mov	r8, r2
   24b58:	4699      	mov	r9, r3
   24b5a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   24b5e:	b173      	cbz	r3, 24b7e <z_impl_k_thread_create+0x36>
   24b60:	491b      	ldr	r1, [pc, #108]	; (24bd0 <z_impl_k_thread_create+0x88>)
   24b62:	f240 2373 	movw	r3, #627	; 0x273
   24b66:	4a1b      	ldr	r2, [pc, #108]	; (24bd4 <z_impl_k_thread_create+0x8c>)
   24b68:	481b      	ldr	r0, [pc, #108]	; (24bd8 <z_impl_k_thread_create+0x90>)
   24b6a:	f007 fc62 	bl	2c432 <printk>
   24b6e:	481b      	ldr	r0, [pc, #108]	; (24bdc <z_impl_k_thread_create+0x94>)
   24b70:	f007 fc5f 	bl	2c432 <printk>
   24b74:	f240 2173 	movw	r1, #627	; 0x273
   24b78:	4816      	ldr	r0, [pc, #88]	; (24bd4 <z_impl_k_thread_create+0x8c>)
   24b7a:	f007 fe77 	bl	2c86c <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   24b7e:	2300      	movs	r3, #0
   24b80:	9305      	str	r3, [sp, #20]
   24b82:	9b12      	ldr	r3, [sp, #72]	; 0x48
   24b84:	4642      	mov	r2, r8
   24b86:	9304      	str	r3, [sp, #16]
   24b88:	9b11      	ldr	r3, [sp, #68]	; 0x44
   24b8a:	4629      	mov	r1, r5
   24b8c:	9303      	str	r3, [sp, #12]
   24b8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24b90:	4620      	mov	r0, r4
   24b92:	9302      	str	r3, [sp, #8]
   24b94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24b96:	9301      	str	r3, [sp, #4]
   24b98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24b9a:	9300      	str	r3, [sp, #0]
   24b9c:	464b      	mov	r3, r9
   24b9e:	f7ff ff77 	bl	24a90 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   24ba2:	1c7b      	adds	r3, r7, #1
   24ba4:	bf08      	it	eq
   24ba6:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   24baa:	d005      	beq.n	24bb8 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24bac:	ea56 0307 	orrs.w	r3, r6, r7
   24bb0:	d106      	bne.n	24bc0 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   24bb2:	4620      	mov	r0, r4
   24bb4:	f7ff f860 	bl	23c78 <z_sched_start>
}
   24bb8:	4620      	mov	r0, r4
   24bba:	b007      	add	sp, #28
   24bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24bc0:	4632      	mov	r2, r6
   24bc2:	463b      	mov	r3, r7
   24bc4:	4906      	ldr	r1, [pc, #24]	; (24be0 <z_impl_k_thread_create+0x98>)
   24bc6:	f104 0018 	add.w	r0, r4, #24
   24bca:	f000 f9bf 	bl	24f4c <z_add_timeout>
   24bce:	e7f3      	b.n	24bb8 <z_impl_k_thread_create+0x70>
   24bd0:	00032e9e 	.word	0x00032e9e
   24bd4:	000330d0 	.word	0x000330d0
   24bd8:	00030166 	.word	0x00030166
   24bdc:	000331a4 	.word	0x000331a4
   24be0:	00023d21 	.word	0x00023d21

00024be4 <z_init_static_threads>:
{
   24be4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   24be8:	4f3f      	ldr	r7, [pc, #252]	; (24ce8 <z_init_static_threads+0x104>)
   24bea:	4d40      	ldr	r5, [pc, #256]	; (24cec <z_init_static_threads+0x108>)
   24bec:	463e      	mov	r6, r7
   24bee:	f8df 810c 	ldr.w	r8, [pc, #268]	; 24cfc <z_init_static_threads+0x118>
{
   24bf2:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   24bf4:	42bd      	cmp	r5, r7
   24bf6:	d90e      	bls.n	24c16 <z_init_static_threads+0x32>
   24bf8:	493d      	ldr	r1, [pc, #244]	; (24cf0 <z_init_static_threads+0x10c>)
   24bfa:	f240 23e1 	movw	r3, #737	; 0x2e1
   24bfe:	4642      	mov	r2, r8
   24c00:	483c      	ldr	r0, [pc, #240]	; (24cf4 <z_init_static_threads+0x110>)
   24c02:	f007 fc16 	bl	2c432 <printk>
   24c06:	483c      	ldr	r0, [pc, #240]	; (24cf8 <z_init_static_threads+0x114>)
   24c08:	f007 fc13 	bl	2c432 <printk>
   24c0c:	f240 21e1 	movw	r1, #737	; 0x2e1
   24c10:	4640      	mov	r0, r8
   24c12:	f007 fe2b 	bl	2c86c <assert_post_action>
   24c16:	42b5      	cmp	r5, r6
   24c18:	f105 0430 	add.w	r4, r5, #48	; 0x30
   24c1c:	d31f      	bcc.n	24c5e <z_init_static_threads+0x7a>
	k_sched_lock();
   24c1e:	f7fe fe03 	bl	23828 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   24c22:	4c32      	ldr	r4, [pc, #200]	; (24cec <z_init_static_threads+0x108>)
   24c24:	4d35      	ldr	r5, [pc, #212]	; (24cfc <z_init_static_threads+0x118>)
   24c26:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 24cf0 <z_init_static_threads+0x10c>
   24c2a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 24cf4 <z_init_static_threads+0x110>
   24c2e:	42b4      	cmp	r4, r6
   24c30:	d90e      	bls.n	24c50 <z_init_static_threads+0x6c>
   24c32:	4641      	mov	r1, r8
   24c34:	f44f 7340 	mov.w	r3, #768	; 0x300
   24c38:	462a      	mov	r2, r5
   24c3a:	4648      	mov	r0, r9
   24c3c:	f007 fbf9 	bl	2c432 <printk>
   24c40:	482d      	ldr	r0, [pc, #180]	; (24cf8 <z_init_static_threads+0x114>)
   24c42:	f007 fbf6 	bl	2c432 <printk>
   24c46:	f44f 7140 	mov.w	r1, #768	; 0x300
   24c4a:	4628      	mov	r0, r5
   24c4c:	f007 fe0e 	bl	2c86c <assert_post_action>
   24c50:	42b4      	cmp	r4, r6
   24c52:	d321      	bcc.n	24c98 <z_init_static_threads+0xb4>
}
   24c54:	b006      	add	sp, #24
   24c56:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   24c5a:	f7fe befb 	b.w	23a54 <k_sched_unlock>
		z_setup_new_thread(
   24c5e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   24c62:	9305      	str	r3, [sp, #20]
   24c64:	f854 3c10 	ldr.w	r3, [r4, #-16]
   24c68:	9304      	str	r3, [sp, #16]
   24c6a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   24c6e:	9303      	str	r3, [sp, #12]
   24c70:	f854 3c18 	ldr.w	r3, [r4, #-24]
   24c74:	9302      	str	r3, [sp, #8]
   24c76:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   24c7a:	9301      	str	r3, [sp, #4]
   24c7c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   24c80:	9300      	str	r3, [sp, #0]
   24c82:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   24c86:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   24c8a:	f7ff ff01 	bl	24a90 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   24c8e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   24c92:	65dd      	str	r5, [r3, #92]	; 0x5c
   24c94:	4625      	mov	r5, r4
   24c96:	e7ad      	b.n	24bf4 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   24c98:	6a61      	ldr	r1, [r4, #36]	; 0x24
   24c9a:	1c4b      	adds	r3, r1, #1
   24c9c:	d014      	beq.n	24cc8 <z_init_static_threads+0xe4>
   24c9e:	f240 32e7 	movw	r2, #999	; 0x3e7
   24ca2:	2300      	movs	r3, #0
   24ca4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   24ca8:	4693      	mov	fp, r2
   24caa:	469c      	mov	ip, r3
					    K_MSEC(thread_data->init_delay));
   24cac:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   24cb0:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24cb4:	459c      	cmp	ip, r3
   24cb6:	bf08      	it	eq
   24cb8:	4593      	cmpeq	fp, r2
   24cba:	4658      	mov	r0, fp
   24cbc:	4661      	mov	r1, ip
			schedule_new_thread(thread_data->init_thread,
   24cbe:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24cc0:	d104      	bne.n	24ccc <z_init_static_threads+0xe8>
	z_sched_start(thread);
   24cc2:	4638      	mov	r0, r7
   24cc4:	f7fe ffd8 	bl	23c78 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   24cc8:	3430      	adds	r4, #48	; 0x30
   24cca:	e7b0      	b.n	24c2e <z_init_static_threads+0x4a>
   24ccc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24cd0:	2300      	movs	r3, #0
   24cd2:	f7e7 fdc1 	bl	c858 <__aeabi_uldivmod>
   24cd6:	4602      	mov	r2, r0
   24cd8:	460b      	mov	r3, r1
   24cda:	f107 0018 	add.w	r0, r7, #24
   24cde:	4908      	ldr	r1, [pc, #32]	; (24d00 <z_init_static_threads+0x11c>)
   24ce0:	f000 f934 	bl	24f4c <z_add_timeout>
   24ce4:	e7f0      	b.n	24cc8 <z_init_static_threads+0xe4>
   24ce6:	bf00      	nop
   24ce8:	20020b14 	.word	0x20020b14
   24cec:	20020ae4 	.word	0x20020ae4
   24cf0:	000331c9 	.word	0x000331c9
   24cf4:	00030166 	.word	0x00030166
   24cf8:	00030a8e 	.word	0x00030a8e
   24cfc:	000330d0 	.word	0x000330d0
   24d00:	00023d21 	.word	0x00023d21

00024d04 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   24d04:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   24d06:	b138      	cbz	r0, 24d18 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   24d08:	4b04      	ldr	r3, [pc, #16]	; (24d1c <z_spin_lock_valid+0x18>)
   24d0a:	f000 0003 	and.w	r0, r0, #3
   24d0e:	7d1b      	ldrb	r3, [r3, #20]
   24d10:	1ac0      	subs	r0, r0, r3
   24d12:	bf18      	it	ne
   24d14:	2001      	movne	r0, #1
   24d16:	4770      	bx	lr
			return false;
		}
	}
	return true;
   24d18:	2001      	movs	r0, #1
}
   24d1a:	4770      	bx	lr
   24d1c:	20021de0 	.word	0x20021de0

00024d20 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   24d20:	4a06      	ldr	r2, [pc, #24]	; (24d3c <z_spin_unlock_valid+0x1c>)
   24d22:	7d11      	ldrb	r1, [r2, #20]
   24d24:	6893      	ldr	r3, [r2, #8]
   24d26:	6802      	ldr	r2, [r0, #0]
   24d28:	430b      	orrs	r3, r1
   24d2a:	429a      	cmp	r2, r3
   24d2c:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   24d30:	bf06      	itte	eq
   24d32:	6003      	streq	r3, [r0, #0]
	return true;
   24d34:	2001      	moveq	r0, #1
		return false;
   24d36:	4618      	movne	r0, r3
}
   24d38:	4770      	bx	lr
   24d3a:	bf00      	nop
   24d3c:	20021de0 	.word	0x20021de0

00024d40 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   24d40:	4a02      	ldr	r2, [pc, #8]	; (24d4c <z_spin_lock_set_owner+0xc>)
   24d42:	7d11      	ldrb	r1, [r2, #20]
   24d44:	6893      	ldr	r3, [r2, #8]
   24d46:	430b      	orrs	r3, r1
   24d48:	6003      	str	r3, [r0, #0]
}
   24d4a:	4770      	bx	lr
   24d4c:	20021de0 	.word	0x20021de0

00024d50 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   24d50:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   24d54:	b08a      	sub	sp, #40	; 0x28
   24d56:	4604      	mov	r4, r0
   24d58:	461d      	mov	r5, r3
   24d5a:	e9cd 2108 	strd	r2, r1, [sp, #32]
	z_impl_k_queue_init(queue);
   24d5e:	f009 fe1f 	bl	2e9a0 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   24d62:	f104 0620 	add.w	r6, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   24d66:	2000      	movs	r0, #0
   24d68:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   24d6c:	f04f 0800 	mov.w	r8, #0
   24d70:	f04f 0900 	mov.w	r9, #0
   24d74:	e9cd 5003 	strd	r5, r0, [sp, #12]
   24d78:	e9cd 0001 	strd	r0, r0, [sp, #4]
   24d7c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   24d80:	4630      	mov	r0, r6
   24d82:	4b05      	ldr	r3, [pc, #20]	; (24d98 <k_work_q_start+0x48>)
   24d84:	9400      	str	r4, [sp, #0]
   24d86:	f7ff fedf 	bl	24b48 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   24d8a:	4630      	mov	r0, r6
   24d8c:	4903      	ldr	r1, [pc, #12]	; (24d9c <k_work_q_start+0x4c>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   24d8e:	b00a      	add	sp, #40	; 0x28
   24d90:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   24d94:	f009 be76 	b.w	2ea84 <z_impl_k_thread_name_set>
   24d98:	000129f9 	.word	0x000129f9
   24d9c:	000319d9 	.word	0x000319d9

00024da0 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   24da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24da4:	4680      	mov	r8, r0
   24da6:	460d      	mov	r5, r1
   24da8:	4616      	mov	r6, r2
   24daa:	461f      	mov	r7, r3
	__asm__ volatile(
   24dac:	f04f 0320 	mov.w	r3, #32
   24db0:	f3ef 8911 	mrs	r9, BASEPRI
   24db4:	f383 8811 	msr	BASEPRI, r3
   24db8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24dbc:	4835      	ldr	r0, [pc, #212]	; (24e94 <k_delayed_work_submit_to_queue+0xf4>)
   24dbe:	f7ff ffa1 	bl	24d04 <z_spin_lock_valid>
   24dc2:	b968      	cbnz	r0, 24de0 <k_delayed_work_submit_to_queue+0x40>
   24dc4:	235c      	movs	r3, #92	; 0x5c
   24dc6:	4a34      	ldr	r2, [pc, #208]	; (24e98 <k_delayed_work_submit_to_queue+0xf8>)
   24dc8:	4934      	ldr	r1, [pc, #208]	; (24e9c <k_delayed_work_submit_to_queue+0xfc>)
   24dca:	4835      	ldr	r0, [pc, #212]	; (24ea0 <k_delayed_work_submit_to_queue+0x100>)
   24dcc:	f007 fb31 	bl	2c432 <printk>
   24dd0:	4930      	ldr	r1, [pc, #192]	; (24e94 <k_delayed_work_submit_to_queue+0xf4>)
   24dd2:	4834      	ldr	r0, [pc, #208]	; (24ea4 <k_delayed_work_submit_to_queue+0x104>)
   24dd4:	f007 fb2d 	bl	2c432 <printk>
   24dd8:	215c      	movs	r1, #92	; 0x5c
   24dda:	482f      	ldr	r0, [pc, #188]	; (24e98 <k_delayed_work_submit_to_queue+0xf8>)
   24ddc:	f007 fd46 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   24de0:	482c      	ldr	r0, [pc, #176]	; (24e94 <k_delayed_work_submit_to_queue+0xf4>)
   24de2:	f7ff ffad 	bl	24d40 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   24de6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   24de8:	b30b      	cbz	r3, 24e2e <k_delayed_work_submit_to_queue+0x8e>
   24dea:	4543      	cmp	r3, r8
   24dec:	d14e      	bne.n	24e8c <k_delayed_work_submit_to_queue+0xec>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   24dee:	4628      	mov	r0, r5
   24df0:	f009 fe66 	bl	2eac0 <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   24df4:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   24df8:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   24dfa:	d01b      	beq.n	24e34 <k_delayed_work_submit_to_queue+0x94>
			err = 0;
		} else if (err < 0) {
   24dfc:	2800      	cmp	r0, #0
   24dfe:	da1a      	bge.n	24e36 <k_delayed_work_submit_to_queue+0x96>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24e00:	4824      	ldr	r0, [pc, #144]	; (24e94 <k_delayed_work_submit_to_queue+0xf4>)
   24e02:	f7ff ff8d 	bl	24d20 <z_spin_unlock_valid>
   24e06:	b968      	cbnz	r0, 24e24 <k_delayed_work_submit_to_queue+0x84>
   24e08:	2384      	movs	r3, #132	; 0x84
   24e0a:	4a23      	ldr	r2, [pc, #140]	; (24e98 <k_delayed_work_submit_to_queue+0xf8>)
   24e0c:	4926      	ldr	r1, [pc, #152]	; (24ea8 <k_delayed_work_submit_to_queue+0x108>)
   24e0e:	4824      	ldr	r0, [pc, #144]	; (24ea0 <k_delayed_work_submit_to_queue+0x100>)
   24e10:	f007 fb0f 	bl	2c432 <printk>
   24e14:	491f      	ldr	r1, [pc, #124]	; (24e94 <k_delayed_work_submit_to_queue+0xf4>)
   24e16:	4825      	ldr	r0, [pc, #148]	; (24eac <k_delayed_work_submit_to_queue+0x10c>)
   24e18:	f007 fb0b 	bl	2c432 <printk>
   24e1c:	2184      	movs	r1, #132	; 0x84
   24e1e:	481e      	ldr	r0, [pc, #120]	; (24e98 <k_delayed_work_submit_to_queue+0xf8>)
   24e20:	f007 fd24 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   24e24:	f389 8811 	msr	BASEPRI, r9
   24e28:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   24e2c:	e023      	b.n	24e76 <k_delayed_work_submit_to_queue+0xd6>
	if (work->work_q == work_q) {
   24e2e:	f1b8 0f00 	cmp.w	r8, #0
   24e32:	d0dc      	beq.n	24dee <k_delayed_work_submit_to_queue+0x4e>
	int err = 0;
   24e34:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24e36:	ea56 0307 	orrs.w	r3, r6, r7
	work->work_q = work_q;
   24e3a:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24e3e:	d11d      	bne.n	24e7c <k_delayed_work_submit_to_queue+0xdc>
   24e40:	4814      	ldr	r0, [pc, #80]	; (24e94 <k_delayed_work_submit_to_queue+0xf4>)
   24e42:	f7ff ff6d 	bl	24d20 <z_spin_unlock_valid>
   24e46:	b968      	cbnz	r0, 24e64 <k_delayed_work_submit_to_queue+0xc4>
   24e48:	2384      	movs	r3, #132	; 0x84
   24e4a:	4a13      	ldr	r2, [pc, #76]	; (24e98 <k_delayed_work_submit_to_queue+0xf8>)
   24e4c:	4916      	ldr	r1, [pc, #88]	; (24ea8 <k_delayed_work_submit_to_queue+0x108>)
   24e4e:	4814      	ldr	r0, [pc, #80]	; (24ea0 <k_delayed_work_submit_to_queue+0x100>)
   24e50:	f007 faef 	bl	2c432 <printk>
   24e54:	490f      	ldr	r1, [pc, #60]	; (24e94 <k_delayed_work_submit_to_queue+0xf4>)
   24e56:	4815      	ldr	r0, [pc, #84]	; (24eac <k_delayed_work_submit_to_queue+0x10c>)
   24e58:	f007 faeb 	bl	2c432 <printk>
   24e5c:	2184      	movs	r1, #132	; 0x84
   24e5e:	480e      	ldr	r0, [pc, #56]	; (24e98 <k_delayed_work_submit_to_queue+0xf8>)
   24e60:	f007 fd04 	bl	2c86c <assert_post_action>
   24e64:	f389 8811 	msr	BASEPRI, r9
   24e68:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   24e6c:	4629      	mov	r1, r5
   24e6e:	4640      	mov	r0, r8
   24e70:	f009 fe0d 	bl	2ea8e <k_work_submit_to_queue>
		return 0;
   24e74:	2400      	movs	r4, #0
}
   24e76:	4620      	mov	r0, r4
   24e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   24e7c:	4632      	mov	r2, r6
   24e7e:	463b      	mov	r3, r7
   24e80:	490b      	ldr	r1, [pc, #44]	; (24eb0 <k_delayed_work_submit_to_queue+0x110>)
   24e82:	f105 0010 	add.w	r0, r5, #16
   24e86:	f000 f861 	bl	24f4c <z_add_timeout>
   24e8a:	e7b9      	b.n	24e00 <k_delayed_work_submit_to_queue+0x60>
		err = -EADDRINUSE;
   24e8c:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   24e90:	e7b6      	b.n	24e00 <k_delayed_work_submit_to_queue+0x60>
   24e92:	bf00      	nop
   24e94:	20021e28 	.word	0x20021e28
   24e98:	000304b3 	.word	0x000304b3
   24e9c:	00030505 	.word	0x00030505
   24ea0:	00030166 	.word	0x00030166
   24ea4:	0003051a 	.word	0x0003051a
   24ea8:	000304d9 	.word	0x000304d9
   24eac:	000304f0 	.word	0x000304f0
   24eb0:	0002eab7 	.word	0x0002eab7

00024eb4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   24eb4:	4b03      	ldr	r3, [pc, #12]	; (24ec4 <elapsed+0x10>)
   24eb6:	681b      	ldr	r3, [r3, #0]
   24eb8:	b90b      	cbnz	r3, 24ebe <elapsed+0xa>
   24eba:	f7ef ba6d 	b.w	14398 <z_clock_elapsed>
}
   24ebe:	2000      	movs	r0, #0
   24ec0:	4770      	bx	lr
   24ec2:	bf00      	nop
   24ec4:	20021e2c 	.word	0x20021e2c

00024ec8 <remove_timeout>:
{
   24ec8:	b530      	push	{r4, r5, lr}
   24eca:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24ecc:	b168      	cbz	r0, 24eea <remove_timeout+0x22>
   24ece:	4a0a      	ldr	r2, [pc, #40]	; (24ef8 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   24ed0:	6852      	ldr	r2, [r2, #4]
   24ed2:	4290      	cmp	r0, r2
   24ed4:	d009      	beq.n	24eea <remove_timeout+0x22>
	if (next(t) != NULL) {
   24ed6:	b143      	cbz	r3, 24eea <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   24ed8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   24edc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   24ee0:	1912      	adds	r2, r2, r4
   24ee2:	eb45 0101 	adc.w	r1, r5, r1
   24ee6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   24eea:	6842      	ldr	r2, [r0, #4]
   24eec:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   24eee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24ef0:	2300      	movs	r3, #0
	node->prev = NULL;
   24ef2:	e9c0 3300 	strd	r3, r3, [r0]
}
   24ef6:	bd30      	pop	{r4, r5, pc}
   24ef8:	200204cc 	.word	0x200204cc

00024efc <next_timeout>:
	return list->head == list;
   24efc:	4b11      	ldr	r3, [pc, #68]	; (24f44 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   24efe:	b510      	push	{r4, lr}
   24f00:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24f02:	429c      	cmp	r4, r3
   24f04:	bf08      	it	eq
   24f06:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   24f08:	f7ff ffd4 	bl	24eb4 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   24f0c:	b1bc      	cbz	r4, 24f3e <next_timeout+0x42>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   24f0e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   24f12:	1a12      	subs	r2, r2, r0
   24f14:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   24f18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   24f1c:	f173 0100 	sbcs.w	r1, r3, #0
   24f20:	da0d      	bge.n	24f3e <next_timeout+0x42>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   24f22:	4619      	mov	r1, r3
   24f24:	2a00      	cmp	r2, #0
   24f26:	f171 0300 	sbcs.w	r3, r1, #0
   24f2a:	4610      	mov	r0, r2
   24f2c:	da00      	bge.n	24f30 <next_timeout+0x34>
   24f2e:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   24f30:	4b05      	ldr	r3, [pc, #20]	; (24f48 <next_timeout+0x4c>)
   24f32:	691b      	ldr	r3, [r3, #16]
   24f34:	b113      	cbz	r3, 24f3c <next_timeout+0x40>
   24f36:	4298      	cmp	r0, r3
   24f38:	bfa8      	it	ge
   24f3a:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   24f3c:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   24f3e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   24f42:	e7f5      	b.n	24f30 <next_timeout+0x34>
   24f44:	200204cc 	.word	0x200204cc
   24f48:	20021de0 	.word	0x20021de0

00024f4c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   24f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24f50:	9101      	str	r1, [sp, #4]
   24f52:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24f54:	1c4b      	adds	r3, r1, #1
   24f56:	bf08      	it	eq
   24f58:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   24f5c:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24f5e:	f000 80a3 	beq.w	250a8 <z_add_timeout+0x15c>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   24f62:	f06f 0301 	mvn.w	r3, #1
   24f66:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   24f6a:	1c54      	adds	r4, r2, #1
   24f6c:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   24f70:	ebb3 0804 	subs.w	r8, r3, r4
   24f74:	eb6b 0905 	sbc.w	r9, fp, r5
   24f78:	f1b8 0f00 	cmp.w	r8, #0
   24f7c:	f179 0300 	sbcs.w	r3, r9, #0
   24f80:	db0f      	blt.n	24fa2 <z_add_timeout+0x56>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   24f82:	f7ff ff97 	bl	24eb4 <elapsed>
   24f86:	f06f 0301 	mvn.w	r3, #1
   24f8a:	4a4e      	ldr	r2, [pc, #312]	; (250c4 <z_add_timeout+0x178>)
   24f8c:	e9d2 1c00 	ldrd	r1, ip, [r2]
   24f90:	1a5b      	subs	r3, r3, r1
   24f92:	eb6b 020c 	sbc.w	r2, fp, ip
   24f96:	1b1e      	subs	r6, r3, r4
   24f98:	eb62 0705 	sbc.w	r7, r2, r5
   24f9c:	1a34      	subs	r4, r6, r0
   24f9e:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   24fa2:	f8da 3000 	ldr.w	r3, [sl]
   24fa6:	b163      	cbz	r3, 24fc2 <z_add_timeout+0x76>
   24fa8:	4947      	ldr	r1, [pc, #284]	; (250c8 <z_add_timeout+0x17c>)
   24faa:	2368      	movs	r3, #104	; 0x68
   24fac:	4a47      	ldr	r2, [pc, #284]	; (250cc <z_add_timeout+0x180>)
   24fae:	4848      	ldr	r0, [pc, #288]	; (250d0 <z_add_timeout+0x184>)
   24fb0:	f007 fa3f 	bl	2c432 <printk>
   24fb4:	4847      	ldr	r0, [pc, #284]	; (250d4 <z_add_timeout+0x188>)
   24fb6:	f007 fa3c 	bl	2c432 <printk>
   24fba:	2168      	movs	r1, #104	; 0x68
   24fbc:	4843      	ldr	r0, [pc, #268]	; (250cc <z_add_timeout+0x180>)
   24fbe:	f007 fc55 	bl	2c86c <assert_post_action>
	to->fn = fn;
   24fc2:	9b01      	ldr	r3, [sp, #4]
	ticks = MAX(1, ticks);
   24fc4:	2c01      	cmp	r4, #1
	to->fn = fn;
   24fc6:	f8ca 3008 	str.w	r3, [sl, #8]
	ticks = MAX(1, ticks);
   24fca:	f175 0300 	sbcs.w	r3, r5, #0
   24fce:	bfbc      	itt	lt
   24fd0:	2401      	movlt	r4, #1
   24fd2:	2500      	movlt	r5, #0
	__asm__ volatile(
   24fd4:	f04f 0320 	mov.w	r3, #32
   24fd8:	f3ef 8611 	mrs	r6, BASEPRI
   24fdc:	f383 8811 	msr	BASEPRI, r3
   24fe0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24fe4:	483c      	ldr	r0, [pc, #240]	; (250d8 <z_add_timeout+0x18c>)
   24fe6:	f7ff fe8d 	bl	24d04 <z_spin_lock_valid>
   24fea:	b968      	cbnz	r0, 25008 <z_add_timeout+0xbc>
   24fec:	235c      	movs	r3, #92	; 0x5c
   24fee:	4a3b      	ldr	r2, [pc, #236]	; (250dc <z_add_timeout+0x190>)
   24ff0:	493b      	ldr	r1, [pc, #236]	; (250e0 <z_add_timeout+0x194>)
   24ff2:	4837      	ldr	r0, [pc, #220]	; (250d0 <z_add_timeout+0x184>)
   24ff4:	f007 fa1d 	bl	2c432 <printk>
   24ff8:	4937      	ldr	r1, [pc, #220]	; (250d8 <z_add_timeout+0x18c>)
   24ffa:	483a      	ldr	r0, [pc, #232]	; (250e4 <z_add_timeout+0x198>)
   24ffc:	f007 fa19 	bl	2c432 <printk>
   25000:	215c      	movs	r1, #92	; 0x5c
   25002:	4836      	ldr	r0, [pc, #216]	; (250dc <z_add_timeout+0x190>)
   25004:	f007 fc32 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   25008:	4833      	ldr	r0, [pc, #204]	; (250d8 <z_add_timeout+0x18c>)
   2500a:	f7ff fe99 	bl	24d40 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   2500e:	f7ff ff51 	bl	24eb4 <elapsed>
	return list->head == list;
   25012:	4b35      	ldr	r3, [pc, #212]	; (250e8 <z_add_timeout+0x19c>)
   25014:	1824      	adds	r4, r4, r0
   25016:	681a      	ldr	r2, [r3, #0]
   25018:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2501c:	429a      	cmp	r2, r3
   2501e:	e9ca 4504 	strd	r4, r5, [sl, #16]
   25022:	d001      	beq.n	25028 <z_add_timeout+0xdc>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   25024:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   25026:	b952      	cbnz	r2, 2503e <z_add_timeout+0xf2>
	node->prev = list->tail;
   25028:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   2502a:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   2502e:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   25032:	685a      	ldr	r2, [r3, #4]
   25034:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   25038:	f8c3 a004 	str.w	sl, [r3, #4]
}
   2503c:	e014      	b.n	25068 <z_add_timeout+0x11c>
			if (t->dticks > to->dticks) {
   2503e:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   25042:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   25046:	4544      	cmp	r4, r8
   25048:	eb75 0109 	sbcs.w	r1, r5, r9
   2504c:	da2f      	bge.n	250ae <z_add_timeout+0x162>
				t->dticks -= to->dticks;
   2504e:	ebb8 0004 	subs.w	r0, r8, r4
   25052:	eb69 0105 	sbc.w	r1, r9, r5
   25056:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   2505a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   2505c:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   25060:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   25064:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   25068:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2506a:	429a      	cmp	r2, r3
   2506c:	d006      	beq.n	2507c <z_add_timeout+0x130>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   2506e:	4592      	cmp	sl, r2
   25070:	d104      	bne.n	2507c <z_add_timeout+0x130>
			z_clock_set_timeout(next_timeout(), false);
   25072:	f7ff ff43 	bl	24efc <next_timeout>
   25076:	2100      	movs	r1, #0
   25078:	f7ef f928 	bl	142cc <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2507c:	4816      	ldr	r0, [pc, #88]	; (250d8 <z_add_timeout+0x18c>)
   2507e:	f7ff fe4f 	bl	24d20 <z_spin_unlock_valid>
   25082:	b968      	cbnz	r0, 250a0 <z_add_timeout+0x154>
   25084:	2384      	movs	r3, #132	; 0x84
   25086:	4a15      	ldr	r2, [pc, #84]	; (250dc <z_add_timeout+0x190>)
   25088:	4918      	ldr	r1, [pc, #96]	; (250ec <z_add_timeout+0x1a0>)
   2508a:	4811      	ldr	r0, [pc, #68]	; (250d0 <z_add_timeout+0x184>)
   2508c:	f007 f9d1 	bl	2c432 <printk>
   25090:	4911      	ldr	r1, [pc, #68]	; (250d8 <z_add_timeout+0x18c>)
   25092:	4817      	ldr	r0, [pc, #92]	; (250f0 <z_add_timeout+0x1a4>)
   25094:	f007 f9cd 	bl	2c432 <printk>
   25098:	2184      	movs	r1, #132	; 0x84
   2509a:	4810      	ldr	r0, [pc, #64]	; (250dc <z_add_timeout+0x190>)
   2509c:	f007 fbe6 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   250a0:	f386 8811 	msr	BASEPRI, r6
   250a4:	f3bf 8f6f 	isb	sy
		}
	}
}
   250a8:	b003      	add	sp, #12
   250aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   250ae:	ebb4 0008 	subs.w	r0, r4, r8
   250b2:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   250b6:	42ba      	cmp	r2, r7
   250b8:	e9ca 0104 	strd	r0, r1, [sl, #16]
   250bc:	d0b4      	beq.n	25028 <z_add_timeout+0xdc>
   250be:	6812      	ldr	r2, [r2, #0]
   250c0:	e7b1      	b.n	25026 <z_add_timeout+0xda>
   250c2:	bf00      	nop
   250c4:	20021430 	.word	0x20021430
   250c8:	0003321a 	.word	0x0003321a
   250cc:	000331f6 	.word	0x000331f6
   250d0:	00030166 	.word	0x00030166
   250d4:	00030a10 	.word	0x00030a10
   250d8:	20021e30 	.word	0x20021e30
   250dc:	000304b3 	.word	0x000304b3
   250e0:	00030505 	.word	0x00030505
   250e4:	0003051a 	.word	0x0003051a
   250e8:	200204cc 	.word	0x200204cc
   250ec:	000304d9 	.word	0x000304d9
   250f0:	000304f0 	.word	0x000304f0

000250f4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   250f4:	b538      	push	{r3, r4, r5, lr}
   250f6:	4604      	mov	r4, r0
	__asm__ volatile(
   250f8:	f04f 0320 	mov.w	r3, #32
   250fc:	f3ef 8511 	mrs	r5, BASEPRI
   25100:	f383 8811 	msr	BASEPRI, r3
   25104:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25108:	481a      	ldr	r0, [pc, #104]	; (25174 <z_abort_timeout+0x80>)
   2510a:	f7ff fdfb 	bl	24d04 <z_spin_lock_valid>
   2510e:	b968      	cbnz	r0, 2512c <z_abort_timeout+0x38>
   25110:	235c      	movs	r3, #92	; 0x5c
   25112:	4a19      	ldr	r2, [pc, #100]	; (25178 <z_abort_timeout+0x84>)
   25114:	4919      	ldr	r1, [pc, #100]	; (2517c <z_abort_timeout+0x88>)
   25116:	481a      	ldr	r0, [pc, #104]	; (25180 <z_abort_timeout+0x8c>)
   25118:	f007 f98b 	bl	2c432 <printk>
   2511c:	4915      	ldr	r1, [pc, #84]	; (25174 <z_abort_timeout+0x80>)
   2511e:	4819      	ldr	r0, [pc, #100]	; (25184 <z_abort_timeout+0x90>)
   25120:	f007 f987 	bl	2c432 <printk>
   25124:	215c      	movs	r1, #92	; 0x5c
   25126:	4814      	ldr	r0, [pc, #80]	; (25178 <z_abort_timeout+0x84>)
   25128:	f007 fba0 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   2512c:	4811      	ldr	r0, [pc, #68]	; (25174 <z_abort_timeout+0x80>)
   2512e:	f7ff fe07 	bl	24d40 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   25132:	6823      	ldr	r3, [r4, #0]
   25134:	b1db      	cbz	r3, 2516e <z_abort_timeout+0x7a>
			remove_timeout(to);
   25136:	4620      	mov	r0, r4
   25138:	f7ff fec6 	bl	24ec8 <remove_timeout>
			ret = 0;
   2513c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2513e:	480d      	ldr	r0, [pc, #52]	; (25174 <z_abort_timeout+0x80>)
   25140:	f7ff fdee 	bl	24d20 <z_spin_unlock_valid>
   25144:	b968      	cbnz	r0, 25162 <z_abort_timeout+0x6e>
   25146:	2384      	movs	r3, #132	; 0x84
   25148:	4a0b      	ldr	r2, [pc, #44]	; (25178 <z_abort_timeout+0x84>)
   2514a:	490f      	ldr	r1, [pc, #60]	; (25188 <z_abort_timeout+0x94>)
   2514c:	480c      	ldr	r0, [pc, #48]	; (25180 <z_abort_timeout+0x8c>)
   2514e:	f007 f970 	bl	2c432 <printk>
   25152:	4908      	ldr	r1, [pc, #32]	; (25174 <z_abort_timeout+0x80>)
   25154:	480d      	ldr	r0, [pc, #52]	; (2518c <z_abort_timeout+0x98>)
   25156:	f007 f96c 	bl	2c432 <printk>
   2515a:	2184      	movs	r1, #132	; 0x84
   2515c:	4806      	ldr	r0, [pc, #24]	; (25178 <z_abort_timeout+0x84>)
   2515e:	f007 fb85 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   25162:	f385 8811 	msr	BASEPRI, r5
   25166:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   2516a:	4620      	mov	r0, r4
   2516c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   2516e:	f06f 0415 	mvn.w	r4, #21
   25172:	e7e4      	b.n	2513e <z_abort_timeout+0x4a>
   25174:	20021e30 	.word	0x20021e30
   25178:	000304b3 	.word	0x000304b3
   2517c:	00030505 	.word	0x00030505
   25180:	00030166 	.word	0x00030166
   25184:	0003051a 	.word	0x0003051a
   25188:	000304d9 	.word	0x000304d9
   2518c:	000304f0 	.word	0x000304f0

00025190 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   25190:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   25192:	f04f 0320 	mov.w	r3, #32
   25196:	f3ef 8511 	mrs	r5, BASEPRI
   2519a:	f383 8811 	msr	BASEPRI, r3
   2519e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   251a2:	4818      	ldr	r0, [pc, #96]	; (25204 <z_get_next_timeout_expiry+0x74>)
   251a4:	f7ff fdae 	bl	24d04 <z_spin_lock_valid>
   251a8:	b968      	cbnz	r0, 251c6 <z_get_next_timeout_expiry+0x36>
   251aa:	235c      	movs	r3, #92	; 0x5c
   251ac:	4a16      	ldr	r2, [pc, #88]	; (25208 <z_get_next_timeout_expiry+0x78>)
   251ae:	4917      	ldr	r1, [pc, #92]	; (2520c <z_get_next_timeout_expiry+0x7c>)
   251b0:	4817      	ldr	r0, [pc, #92]	; (25210 <z_get_next_timeout_expiry+0x80>)
   251b2:	f007 f93e 	bl	2c432 <printk>
   251b6:	4913      	ldr	r1, [pc, #76]	; (25204 <z_get_next_timeout_expiry+0x74>)
   251b8:	4816      	ldr	r0, [pc, #88]	; (25214 <z_get_next_timeout_expiry+0x84>)
   251ba:	f007 f93a 	bl	2c432 <printk>
   251be:	215c      	movs	r1, #92	; 0x5c
   251c0:	4811      	ldr	r0, [pc, #68]	; (25208 <z_get_next_timeout_expiry+0x78>)
   251c2:	f007 fb53 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   251c6:	480f      	ldr	r0, [pc, #60]	; (25204 <z_get_next_timeout_expiry+0x74>)
   251c8:	f7ff fdba 	bl	24d40 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   251cc:	f7ff fe96 	bl	24efc <next_timeout>
   251d0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   251d2:	480c      	ldr	r0, [pc, #48]	; (25204 <z_get_next_timeout_expiry+0x74>)
   251d4:	f7ff fda4 	bl	24d20 <z_spin_unlock_valid>
   251d8:	b968      	cbnz	r0, 251f6 <z_get_next_timeout_expiry+0x66>
   251da:	2384      	movs	r3, #132	; 0x84
   251dc:	4a0a      	ldr	r2, [pc, #40]	; (25208 <z_get_next_timeout_expiry+0x78>)
   251de:	490e      	ldr	r1, [pc, #56]	; (25218 <z_get_next_timeout_expiry+0x88>)
   251e0:	480b      	ldr	r0, [pc, #44]	; (25210 <z_get_next_timeout_expiry+0x80>)
   251e2:	f007 f926 	bl	2c432 <printk>
   251e6:	4907      	ldr	r1, [pc, #28]	; (25204 <z_get_next_timeout_expiry+0x74>)
   251e8:	480c      	ldr	r0, [pc, #48]	; (2521c <z_get_next_timeout_expiry+0x8c>)
   251ea:	f007 f922 	bl	2c432 <printk>
   251ee:	2184      	movs	r1, #132	; 0x84
   251f0:	4805      	ldr	r0, [pc, #20]	; (25208 <z_get_next_timeout_expiry+0x78>)
   251f2:	f007 fb3b 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   251f6:	f385 8811 	msr	BASEPRI, r5
   251fa:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   251fe:	4620      	mov	r0, r4
   25200:	bd38      	pop	{r3, r4, r5, pc}
   25202:	bf00      	nop
   25204:	20021e30 	.word	0x20021e30
   25208:	000304b3 	.word	0x000304b3
   2520c:	00030505 	.word	0x00030505
   25210:	00030166 	.word	0x00030166
   25214:	0003051a 	.word	0x0003051a
   25218:	000304d9 	.word	0x000304d9
   2521c:	000304f0 	.word	0x000304f0

00025220 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   25220:	b570      	push	{r4, r5, r6, lr}
   25222:	4604      	mov	r4, r0
   25224:	460d      	mov	r5, r1
	__asm__ volatile(
   25226:	f04f 0320 	mov.w	r3, #32
   2522a:	f3ef 8611 	mrs	r6, BASEPRI
   2522e:	f383 8811 	msr	BASEPRI, r3
   25232:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25236:	481b      	ldr	r0, [pc, #108]	; (252a4 <z_set_timeout_expiry+0x84>)
   25238:	f7ff fd64 	bl	24d04 <z_spin_lock_valid>
   2523c:	b968      	cbnz	r0, 2525a <z_set_timeout_expiry+0x3a>
   2523e:	235c      	movs	r3, #92	; 0x5c
   25240:	4a19      	ldr	r2, [pc, #100]	; (252a8 <z_set_timeout_expiry+0x88>)
   25242:	491a      	ldr	r1, [pc, #104]	; (252ac <z_set_timeout_expiry+0x8c>)
   25244:	481a      	ldr	r0, [pc, #104]	; (252b0 <z_set_timeout_expiry+0x90>)
   25246:	f007 f8f4 	bl	2c432 <printk>
   2524a:	4916      	ldr	r1, [pc, #88]	; (252a4 <z_set_timeout_expiry+0x84>)
   2524c:	4819      	ldr	r0, [pc, #100]	; (252b4 <z_set_timeout_expiry+0x94>)
   2524e:	f007 f8f0 	bl	2c432 <printk>
   25252:	215c      	movs	r1, #92	; 0x5c
   25254:	4814      	ldr	r0, [pc, #80]	; (252a8 <z_set_timeout_expiry+0x88>)
   25256:	f007 fb09 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   2525a:	4812      	ldr	r0, [pc, #72]	; (252a4 <z_set_timeout_expiry+0x84>)
   2525c:	f7ff fd70 	bl	24d40 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   25260:	f7ff fe4c 	bl	24efc <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   25264:	2801      	cmp	r0, #1
   25266:	dd05      	ble.n	25274 <z_set_timeout_expiry+0x54>
   25268:	42a0      	cmp	r0, r4
   2526a:	dd03      	ble.n	25274 <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, is_idle);
   2526c:	4629      	mov	r1, r5
   2526e:	4620      	mov	r0, r4
   25270:	f7ef f82c 	bl	142cc <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25274:	480b      	ldr	r0, [pc, #44]	; (252a4 <z_set_timeout_expiry+0x84>)
   25276:	f7ff fd53 	bl	24d20 <z_spin_unlock_valid>
   2527a:	b968      	cbnz	r0, 25298 <z_set_timeout_expiry+0x78>
   2527c:	2384      	movs	r3, #132	; 0x84
   2527e:	4a0a      	ldr	r2, [pc, #40]	; (252a8 <z_set_timeout_expiry+0x88>)
   25280:	490d      	ldr	r1, [pc, #52]	; (252b8 <z_set_timeout_expiry+0x98>)
   25282:	480b      	ldr	r0, [pc, #44]	; (252b0 <z_set_timeout_expiry+0x90>)
   25284:	f007 f8d5 	bl	2c432 <printk>
   25288:	4906      	ldr	r1, [pc, #24]	; (252a4 <z_set_timeout_expiry+0x84>)
   2528a:	480c      	ldr	r0, [pc, #48]	; (252bc <z_set_timeout_expiry+0x9c>)
   2528c:	f007 f8d1 	bl	2c432 <printk>
   25290:	2184      	movs	r1, #132	; 0x84
   25292:	4805      	ldr	r0, [pc, #20]	; (252a8 <z_set_timeout_expiry+0x88>)
   25294:	f007 faea 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   25298:	f386 8811 	msr	BASEPRI, r6
   2529c:	f3bf 8f6f 	isb	sy
		}
	}
}
   252a0:	bd70      	pop	{r4, r5, r6, pc}
   252a2:	bf00      	nop
   252a4:	20021e30 	.word	0x20021e30
   252a8:	000304b3 	.word	0x000304b3
   252ac:	00030505 	.word	0x00030505
   252b0:	00030166 	.word	0x00030166
   252b4:	0003051a 	.word	0x0003051a
   252b8:	000304d9 	.word	0x000304d9
   252bc:	000304f0 	.word	0x000304f0

000252c0 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   252c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   252c4:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   252c6:	f7fe fdd3 	bl	23e70 <z_time_slice>
	__asm__ volatile(
   252ca:	f04f 0320 	mov.w	r3, #32
   252ce:	f3ef 8711 	mrs	r7, BASEPRI
   252d2:	f383 8811 	msr	BASEPRI, r3
   252d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   252da:	4854      	ldr	r0, [pc, #336]	; (2542c <z_clock_announce+0x16c>)
   252dc:	f7ff fd12 	bl	24d04 <z_spin_lock_valid>
   252e0:	b968      	cbnz	r0, 252fe <z_clock_announce+0x3e>
   252e2:	235c      	movs	r3, #92	; 0x5c
   252e4:	4a52      	ldr	r2, [pc, #328]	; (25430 <z_clock_announce+0x170>)
   252e6:	4953      	ldr	r1, [pc, #332]	; (25434 <z_clock_announce+0x174>)
   252e8:	4853      	ldr	r0, [pc, #332]	; (25438 <z_clock_announce+0x178>)
   252ea:	f007 f8a2 	bl	2c432 <printk>
   252ee:	494f      	ldr	r1, [pc, #316]	; (2542c <z_clock_announce+0x16c>)
   252f0:	4852      	ldr	r0, [pc, #328]	; (2543c <z_clock_announce+0x17c>)
   252f2:	f007 f89e 	bl	2c432 <printk>
   252f6:	215c      	movs	r1, #92	; 0x5c
   252f8:	484d      	ldr	r0, [pc, #308]	; (25430 <z_clock_announce+0x170>)
   252fa:	f007 fab7 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   252fe:	4e50      	ldr	r6, [pc, #320]	; (25440 <z_clock_announce+0x180>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   25300:	4d50      	ldr	r5, [pc, #320]	; (25444 <z_clock_announce+0x184>)
   25302:	46b3      	mov	fp, r6
   25304:	4849      	ldr	r0, [pc, #292]	; (2542c <z_clock_announce+0x16c>)
	return list->head == list;
   25306:	f8df a148 	ldr.w	sl, [pc, #328]	; 25450 <z_clock_announce+0x190>
   2530a:	f7ff fd19 	bl	24d40 <z_spin_lock_set_owner>
   2530e:	602c      	str	r4, [r5, #0]
   25310:	f8d5 c000 	ldr.w	ip, [r5]
   25314:	e9d6 2300 	ldrd	r2, r3, [r6]
   25318:	e9cd 2300 	strd	r2, r3, [sp]
   2531c:	4662      	mov	r2, ip
   2531e:	f8da 4000 	ldr.w	r4, [sl]
   25322:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25324:	4554      	cmp	r4, sl
   25326:	46e0      	mov	r8, ip
   25328:	4699      	mov	r9, r3
   2532a:	d00c      	beq.n	25346 <z_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   2532c:	b15c      	cbz	r4, 25346 <z_clock_announce+0x86>
   2532e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   25332:	458c      	cmp	ip, r1
   25334:	eb79 0302 	sbcs.w	r3, r9, r2
   25338:	da2e      	bge.n	25398 <z_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2533a:	ebb1 000c 	subs.w	r0, r1, ip
   2533e:	eb62 0109 	sbc.w	r1, r2, r9
   25342:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   25346:	464b      	mov	r3, r9
	announce_remaining = 0;
   25348:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2534a:	9a00      	ldr	r2, [sp, #0]
   2534c:	9901      	ldr	r1, [sp, #4]
   2534e:	eb18 0202 	adds.w	r2, r8, r2
   25352:	eb43 0101 	adc.w	r1, r3, r1
   25356:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   2535a:	602c      	str	r4, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   2535c:	f7ff fdce 	bl	24efc <next_timeout>
   25360:	4621      	mov	r1, r4
   25362:	f7ee ffb3 	bl	142cc <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25366:	4831      	ldr	r0, [pc, #196]	; (2542c <z_clock_announce+0x16c>)
   25368:	f7ff fcda 	bl	24d20 <z_spin_unlock_valid>
   2536c:	b968      	cbnz	r0, 2538a <z_clock_announce+0xca>
   2536e:	2384      	movs	r3, #132	; 0x84
   25370:	4a2f      	ldr	r2, [pc, #188]	; (25430 <z_clock_announce+0x170>)
   25372:	4935      	ldr	r1, [pc, #212]	; (25448 <z_clock_announce+0x188>)
   25374:	4830      	ldr	r0, [pc, #192]	; (25438 <z_clock_announce+0x178>)
   25376:	f007 f85c 	bl	2c432 <printk>
   2537a:	492c      	ldr	r1, [pc, #176]	; (2542c <z_clock_announce+0x16c>)
   2537c:	4833      	ldr	r0, [pc, #204]	; (2544c <z_clock_announce+0x18c>)
   2537e:	f007 f858 	bl	2c432 <printk>
   25382:	2184      	movs	r1, #132	; 0x84
   25384:	482a      	ldr	r0, [pc, #168]	; (25430 <z_clock_announce+0x170>)
   25386:	f007 fa71 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   2538a:	f387 8811 	msr	BASEPRI, r7
   2538e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   25392:	b003      	add	sp, #12
   25394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   25398:	2200      	movs	r2, #0
		curr_tick += dt;
   2539a:	e9dd 8900 	ldrd	r8, r9, [sp]
		t->dticks = 0;
   2539e:	2300      	movs	r3, #0
		curr_tick += dt;
   253a0:	eb18 0801 	adds.w	r8, r8, r1
		announce_remaining -= dt;
   253a4:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   253a8:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   253ac:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   253ae:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   253b2:	4620      	mov	r0, r4
		curr_tick += dt;
   253b4:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   253b8:	f7ff fd86 	bl	24ec8 <remove_timeout>
   253bc:	481b      	ldr	r0, [pc, #108]	; (2542c <z_clock_announce+0x16c>)
   253be:	f7ff fcaf 	bl	24d20 <z_spin_unlock_valid>
   253c2:	b968      	cbnz	r0, 253e0 <z_clock_announce+0x120>
   253c4:	2384      	movs	r3, #132	; 0x84
   253c6:	4a1a      	ldr	r2, [pc, #104]	; (25430 <z_clock_announce+0x170>)
   253c8:	491f      	ldr	r1, [pc, #124]	; (25448 <z_clock_announce+0x188>)
   253ca:	481b      	ldr	r0, [pc, #108]	; (25438 <z_clock_announce+0x178>)
   253cc:	f007 f831 	bl	2c432 <printk>
   253d0:	4916      	ldr	r1, [pc, #88]	; (2542c <z_clock_announce+0x16c>)
   253d2:	481e      	ldr	r0, [pc, #120]	; (2544c <z_clock_announce+0x18c>)
   253d4:	f007 f82d 	bl	2c432 <printk>
   253d8:	2184      	movs	r1, #132	; 0x84
   253da:	4815      	ldr	r0, [pc, #84]	; (25430 <z_clock_announce+0x170>)
   253dc:	f007 fa46 	bl	2c86c <assert_post_action>
   253e0:	f387 8811 	msr	BASEPRI, r7
   253e4:	f3bf 8f6f 	isb	sy
		t->fn(t);
   253e8:	4620      	mov	r0, r4
   253ea:	68a3      	ldr	r3, [r4, #8]
   253ec:	4798      	blx	r3
	__asm__ volatile(
   253ee:	f04f 0320 	mov.w	r3, #32
   253f2:	f3ef 8711 	mrs	r7, BASEPRI
   253f6:	f383 8811 	msr	BASEPRI, r3
   253fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   253fe:	480b      	ldr	r0, [pc, #44]	; (2542c <z_clock_announce+0x16c>)
   25400:	f7ff fc80 	bl	24d04 <z_spin_lock_valid>
   25404:	b968      	cbnz	r0, 25422 <z_clock_announce+0x162>
   25406:	235c      	movs	r3, #92	; 0x5c
   25408:	4a09      	ldr	r2, [pc, #36]	; (25430 <z_clock_announce+0x170>)
   2540a:	490a      	ldr	r1, [pc, #40]	; (25434 <z_clock_announce+0x174>)
   2540c:	480a      	ldr	r0, [pc, #40]	; (25438 <z_clock_announce+0x178>)
   2540e:	f007 f810 	bl	2c432 <printk>
   25412:	4906      	ldr	r1, [pc, #24]	; (2542c <z_clock_announce+0x16c>)
   25414:	4809      	ldr	r0, [pc, #36]	; (2543c <z_clock_announce+0x17c>)
   25416:	f007 f80c 	bl	2c432 <printk>
   2541a:	215c      	movs	r1, #92	; 0x5c
   2541c:	4804      	ldr	r0, [pc, #16]	; (25430 <z_clock_announce+0x170>)
   2541e:	f007 fa25 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   25422:	4802      	ldr	r0, [pc, #8]	; (2542c <z_clock_announce+0x16c>)
   25424:	f7ff fc8c 	bl	24d40 <z_spin_lock_set_owner>
	return k;
   25428:	e772      	b.n	25310 <z_clock_announce+0x50>
   2542a:	bf00      	nop
   2542c:	20021e30 	.word	0x20021e30
   25430:	000304b3 	.word	0x000304b3
   25434:	00030505 	.word	0x00030505
   25438:	00030166 	.word	0x00030166
   2543c:	0003051a 	.word	0x0003051a
   25440:	20021430 	.word	0x20021430
   25444:	20021e2c 	.word	0x20021e2c
   25448:	000304d9 	.word	0x000304d9
   2544c:	000304f0 	.word	0x000304f0
   25450:	200204cc 	.word	0x200204cc

00025454 <z_tick_get>:

int64_t z_tick_get(void)
{
   25454:	b570      	push	{r4, r5, r6, lr}
   25456:	f04f 0320 	mov.w	r3, #32
   2545a:	f3ef 8611 	mrs	r6, BASEPRI
   2545e:	f383 8811 	msr	BASEPRI, r3
   25462:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25466:	481b      	ldr	r0, [pc, #108]	; (254d4 <z_tick_get+0x80>)
   25468:	f7ff fc4c 	bl	24d04 <z_spin_lock_valid>
   2546c:	b968      	cbnz	r0, 2548a <z_tick_get+0x36>
   2546e:	235c      	movs	r3, #92	; 0x5c
   25470:	4a19      	ldr	r2, [pc, #100]	; (254d8 <z_tick_get+0x84>)
   25472:	491a      	ldr	r1, [pc, #104]	; (254dc <z_tick_get+0x88>)
   25474:	481a      	ldr	r0, [pc, #104]	; (254e0 <z_tick_get+0x8c>)
   25476:	f006 ffdc 	bl	2c432 <printk>
   2547a:	4916      	ldr	r1, [pc, #88]	; (254d4 <z_tick_get+0x80>)
   2547c:	4819      	ldr	r0, [pc, #100]	; (254e4 <z_tick_get+0x90>)
   2547e:	f006 ffd8 	bl	2c432 <printk>
   25482:	215c      	movs	r1, #92	; 0x5c
   25484:	4814      	ldr	r0, [pc, #80]	; (254d8 <z_tick_get+0x84>)
   25486:	f007 f9f1 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   2548a:	4812      	ldr	r0, [pc, #72]	; (254d4 <z_tick_get+0x80>)
   2548c:	f7ff fc58 	bl	24d40 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   25490:	f7ee ff82 	bl	14398 <z_clock_elapsed>
   25494:	4b14      	ldr	r3, [pc, #80]	; (254e8 <z_tick_get+0x94>)
   25496:	e9d3 4500 	ldrd	r4, r5, [r3]
   2549a:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2549c:	480d      	ldr	r0, [pc, #52]	; (254d4 <z_tick_get+0x80>)
   2549e:	f145 0500 	adc.w	r5, r5, #0
   254a2:	f7ff fc3d 	bl	24d20 <z_spin_unlock_valid>
   254a6:	b968      	cbnz	r0, 254c4 <z_tick_get+0x70>
   254a8:	2384      	movs	r3, #132	; 0x84
   254aa:	4a0b      	ldr	r2, [pc, #44]	; (254d8 <z_tick_get+0x84>)
   254ac:	490f      	ldr	r1, [pc, #60]	; (254ec <z_tick_get+0x98>)
   254ae:	480c      	ldr	r0, [pc, #48]	; (254e0 <z_tick_get+0x8c>)
   254b0:	f006 ffbf 	bl	2c432 <printk>
   254b4:	4907      	ldr	r1, [pc, #28]	; (254d4 <z_tick_get+0x80>)
   254b6:	480e      	ldr	r0, [pc, #56]	; (254f0 <z_tick_get+0x9c>)
   254b8:	f006 ffbb 	bl	2c432 <printk>
   254bc:	2184      	movs	r1, #132	; 0x84
   254be:	4806      	ldr	r0, [pc, #24]	; (254d8 <z_tick_get+0x84>)
   254c0:	f007 f9d4 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   254c4:	f386 8811 	msr	BASEPRI, r6
   254c8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   254cc:	4620      	mov	r0, r4
   254ce:	4629      	mov	r1, r5
   254d0:	bd70      	pop	{r4, r5, r6, pc}
   254d2:	bf00      	nop
   254d4:	20021e30 	.word	0x20021e30
   254d8:	000304b3 	.word	0x000304b3
   254dc:	00030505 	.word	0x00030505
   254e0:	00030166 	.word	0x00030166
   254e4:	0003051a 	.word	0x0003051a
   254e8:	20021430 	.word	0x20021430
   254ec:	000304d9 	.word	0x000304d9
   254f0:	000304f0 	.word	0x000304f0

000254f4 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   254f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   254f6:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   254fa:	1c56      	adds	r6, r2, #1
   254fc:	f143 0700 	adc.w	r7, r3, #0
   25500:	2f00      	cmp	r7, #0
   25502:	bf08      	it	eq
   25504:	2e02      	cmpeq	r6, #2
{
   25506:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   25508:	d302      	bcc.n	25510 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2550a:	490c      	ldr	r1, [pc, #48]	; (2553c <z_timer_expiration_handler+0x48>)
   2550c:	f7ff fd1e 	bl	24f4c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   25510:	6b23      	ldr	r3, [r4, #48]	; 0x30
   25512:	3301      	adds	r3, #1
   25514:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   25516:	6a23      	ldr	r3, [r4, #32]
   25518:	b10b      	cbz	r3, 2551e <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   2551a:	4620      	mov	r0, r4
   2551c:	4798      	blx	r3
	return list->head == list;
   2551e:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25522:	42a5      	cmp	r5, r4
   25524:	d008      	beq.n	25538 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   25526:	b13d      	cbz	r5, 25538 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   25528:	4628      	mov	r0, r5
   2552a:	f7fe f8f1 	bl	23710 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   2552e:	4628      	mov	r0, r5
   25530:	f7fe fb5a 	bl	23be8 <z_ready_thread>
   25534:	2300      	movs	r3, #0
   25536:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);
}
   25538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2553a:	bf00      	nop
   2553c:	000254f5 	.word	0x000254f5

00025540 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   25540:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   25544:	4619      	mov	r1, r3
   25546:	4606      	mov	r6, r0
   25548:	4610      	mov	r0, r2
   2554a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2554e:	1c4c      	adds	r4, r1, #1
   25550:	bf08      	it	eq
   25552:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   25556:	4680      	mov	r8, r0
   25558:	4689      	mov	r9, r1
   2555a:	d047      	beq.n	255ec <z_impl_k_timer_start+0xac>
   2555c:	4614      	mov	r4, r2
   2555e:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   25560:	ea54 0305 	orrs.w	r3, r4, r5
   25564:	d016      	beq.n	25594 <z_impl_k_timer_start+0x54>
   25566:	f06f 0301 	mvn.w	r3, #1
   2556a:	ebb3 0a02 	subs.w	sl, r3, r2
   2556e:	f04f 33ff 	mov.w	r3, #4294967295
   25572:	eb63 0b05 	sbc.w	fp, r3, r5
   25576:	f1ba 0f00 	cmp.w	sl, #0
   2557a:	f17b 0300 	sbcs.w	r3, fp, #0
   2557e:	da09      	bge.n	25594 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   25580:	f112 34ff 	adds.w	r4, r2, #4294967295
   25584:	f145 35ff 	adc.w	r5, r5, #4294967295
   25588:	2c01      	cmp	r4, #1
   2558a:	f175 0300 	sbcs.w	r3, r5, #0
   2558e:	bfbc      	itt	lt
   25590:	2401      	movlt	r4, #1
   25592:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   25594:	f06f 0301 	mvn.w	r3, #1
   25598:	1a1b      	subs	r3, r3, r0
   2559a:	9300      	str	r3, [sp, #0]
   2559c:	f04f 33ff 	mov.w	r3, #4294967295
   255a0:	eb63 0301 	sbc.w	r3, r3, r1
   255a4:	9301      	str	r3, [sp, #4]
   255a6:	e9dd 2300 	ldrd	r2, r3, [sp]
   255aa:	2a00      	cmp	r2, #0
   255ac:	f173 0300 	sbcs.w	r3, r3, #0
   255b0:	da0c      	bge.n	255cc <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   255b2:	f110 38ff 	adds.w	r8, r0, #4294967295
   255b6:	f141 39ff 	adc.w	r9, r1, #4294967295
   255ba:	f1b8 0f00 	cmp.w	r8, #0
   255be:	f179 0300 	sbcs.w	r3, r9, #0
   255c2:	bfbc      	itt	lt
   255c4:	f04f 0800 	movlt.w	r8, #0
   255c8:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   255cc:	4630      	mov	r0, r6
   255ce:	f7ff fd91 	bl	250f4 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   255d2:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   255d4:	4642      	mov	r2, r8
	timer->status = 0U;
   255d6:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   255d8:	4630      	mov	r0, r6
   255da:	464b      	mov	r3, r9
   255dc:	4905      	ldr	r1, [pc, #20]	; (255f4 <z_impl_k_timer_start+0xb4>)
	timer->period = period;
   255de:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   255e2:	b002      	add	sp, #8
   255e4:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   255e8:	f7ff bcb0 	b.w	24f4c <z_add_timeout>
}
   255ec:	b002      	add	sp, #8
   255ee:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   255f2:	bf00      	nop
   255f4:	000254f5 	.word	0x000254f5

000255f8 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, uint32_t state)
{
   255f8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   255fa:	6883      	ldr	r3, [r0, #8]
{
   255fc:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   255fe:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   25600:	b964      	cbnz	r4, 2561c <k_poll_poller_cb+0x24>
   25602:	4919      	ldr	r1, [pc, #100]	; (25668 <k_poll_poller_cb+0x70>)
   25604:	23df      	movs	r3, #223	; 0xdf
   25606:	4a19      	ldr	r2, [pc, #100]	; (2566c <k_poll_poller_cb+0x74>)
   25608:	4819      	ldr	r0, [pc, #100]	; (25670 <k_poll_poller_cb+0x78>)
   2560a:	f006 ff12 	bl	2c432 <printk>
   2560e:	4819      	ldr	r0, [pc, #100]	; (25674 <k_poll_poller_cb+0x7c>)
   25610:	f006 ff0f 	bl	2c432 <printk>
   25614:	21df      	movs	r1, #223	; 0xdf
   25616:	4815      	ldr	r0, [pc, #84]	; (2566c <k_poll_poller_cb+0x74>)
   25618:	f007 f928 	bl	2c86c <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   2561c:	7b63      	ldrb	r3, [r4, #13]
   2561e:	079a      	lsls	r2, r3, #30
   25620:	d515      	bpl.n	2564e <k_poll_poller_cb+0x56>
		return 0;
	}

	if (z_is_thread_timeout_expired(thread)) {
   25622:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   25626:	f04f 31ff 	mov.w	r1, #4294967295
   2562a:	f06f 0001 	mvn.w	r0, #1
   2562e:	428b      	cmp	r3, r1
   25630:	bf08      	it	eq
   25632:	4282      	cmpeq	r2, r0
   25634:	d014      	beq.n	25660 <k_poll_poller_cb+0x68>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
   25636:	4620      	mov	r0, r4
   25638:	f7fe f99c 	bl	23974 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2563c:	2d08      	cmp	r5, #8
   2563e:	bf0c      	ite	eq
   25640:	f06f 0303 	mvneq.w	r3, #3
   25644:	2300      	movne	r3, #0
   25646:	67e3      	str	r3, [r4, #124]	; 0x7c
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   25648:	7b63      	ldrb	r3, [r4, #13]
   2564a:	06db      	lsls	r3, r3, #27
   2564c:	d001      	beq.n	25652 <k_poll_poller_cb+0x5a>
		state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
		return 0;
   2564e:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   25650:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   25652:	69a5      	ldr	r5, [r4, #24]
   25654:	2d00      	cmp	r5, #0
   25656:	d1fa      	bne.n	2564e <k_poll_poller_cb+0x56>
	z_ready_thread(thread);
   25658:	4620      	mov	r0, r4
   2565a:	f7fe fac5 	bl	23be8 <z_ready_thread>
	return 0;
   2565e:	e7f6      	b.n	2564e <k_poll_poller_cb+0x56>
		return -EAGAIN;
   25660:	f06f 000a 	mvn.w	r0, #10
   25664:	e7f4      	b.n	25650 <k_poll_poller_cb+0x58>
   25666:	bf00      	nop
   25668:	0003325b 	.word	0x0003325b
   2566c:	0003323a 	.word	0x0003323a
   25670:	00030166 	.word	0x00030166
   25674:	00033271 	.word	0x00033271

00025678 <clear_event_registrations>:
{
   25678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2567c:	2414      	movs	r4, #20
   2567e:	4680      	mov	r8, r0
   25680:	4616      	mov	r6, r2
	while (num_events--) {
   25682:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   25686:	4d48      	ldr	r5, [pc, #288]	; (257a8 <clear_event_registrations+0x130>)
   25688:	f8df 9158 	ldr.w	r9, [pc, #344]	; 257e4 <clear_event_registrations+0x16c>
   2568c:	4f47      	ldr	r7, [pc, #284]	; (257ac <clear_event_registrations+0x134>)
	while (num_events--) {
   2568e:	4544      	cmp	r4, r8
   25690:	d101      	bne.n	25696 <clear_event_registrations+0x1e>
}
   25692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   25696:	2300      	movs	r3, #0
   25698:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   2569c:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   256a0:	f003 030f 	and.w	r3, r3, #15
   256a4:	2b04      	cmp	r3, #4
   256a6:	d83d      	bhi.n	25724 <clear_event_registrations+0xac>
   256a8:	e8df f003 	tbb	[pc, r3]
   256ac:	3c032d49 	.word	0x3c032d49
   256b0:	1e          	.byte	0x1e
   256b1:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   256b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   256b6:	b963      	cbnz	r3, 256d2 <clear_event_registrations+0x5a>
   256b8:	493d      	ldr	r1, [pc, #244]	; (257b0 <clear_event_registrations+0x138>)
   256ba:	2395      	movs	r3, #149	; 0x95
   256bc:	462a      	mov	r2, r5
   256be:	4638      	mov	r0, r7
   256c0:	f006 feb7 	bl	2c432 <printk>
   256c4:	483b      	ldr	r0, [pc, #236]	; (257b4 <clear_event_registrations+0x13c>)
   256c6:	f006 feb4 	bl	2c432 <printk>
   256ca:	2195      	movs	r1, #149	; 0x95
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   256cc:	4628      	mov	r0, r5
   256ce:	f007 f8cd 	bl	2c86c <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   256d2:	f854 3c14 	ldr.w	r3, [r4, #-20]
   256d6:	b393      	cbz	r3, 2573e <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   256d8:	f854 2c10 	ldr.w	r2, [r4, #-16]
   256dc:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   256de:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   256e0:	2300      	movs	r3, #0
	node->prev = NULL;
   256e2:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   256e6:	e02a      	b.n	2573e <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   256e8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   256ec:	2b00      	cmp	r3, #0
   256ee:	d1f0      	bne.n	256d2 <clear_event_registrations+0x5a>
   256f0:	4931      	ldr	r1, [pc, #196]	; (257b8 <clear_event_registrations+0x140>)
   256f2:	2399      	movs	r3, #153	; 0x99
   256f4:	462a      	mov	r2, r5
   256f6:	4638      	mov	r0, r7
   256f8:	f006 fe9b 	bl	2c432 <printk>
   256fc:	482f      	ldr	r0, [pc, #188]	; (257bc <clear_event_registrations+0x144>)
   256fe:	f006 fe98 	bl	2c432 <printk>
   25702:	2199      	movs	r1, #153	; 0x99
   25704:	e7e2      	b.n	256cc <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   25706:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2570a:	2b00      	cmp	r3, #0
   2570c:	d1e1      	bne.n	256d2 <clear_event_registrations+0x5a>
   2570e:	492c      	ldr	r1, [pc, #176]	; (257c0 <clear_event_registrations+0x148>)
   25710:	239d      	movs	r3, #157	; 0x9d
   25712:	462a      	mov	r2, r5
   25714:	4638      	mov	r0, r7
   25716:	f006 fe8c 	bl	2c432 <printk>
   2571a:	482a      	ldr	r0, [pc, #168]	; (257c4 <clear_event_registrations+0x14c>)
   2571c:	f006 fe89 	bl	2c432 <printk>
   25720:	219d      	movs	r1, #157	; 0x9d
   25722:	e7d3      	b.n	256cc <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   25724:	4649      	mov	r1, r9
   25726:	23a4      	movs	r3, #164	; 0xa4
   25728:	462a      	mov	r2, r5
   2572a:	4638      	mov	r0, r7
   2572c:	f006 fe81 	bl	2c432 <printk>
   25730:	4825      	ldr	r0, [pc, #148]	; (257c8 <clear_event_registrations+0x150>)
   25732:	f006 fe7e 	bl	2c432 <printk>
   25736:	21a4      	movs	r1, #164	; 0xa4
   25738:	4628      	mov	r0, r5
   2573a:	f007 f897 	bl	2c86c <assert_post_action>
   2573e:	4823      	ldr	r0, [pc, #140]	; (257cc <clear_event_registrations+0x154>)
   25740:	f7ff faee 	bl	24d20 <z_spin_unlock_valid>
   25744:	b968      	cbnz	r0, 25762 <clear_event_registrations+0xea>
   25746:	2384      	movs	r3, #132	; 0x84
   25748:	4638      	mov	r0, r7
   2574a:	4a21      	ldr	r2, [pc, #132]	; (257d0 <clear_event_registrations+0x158>)
   2574c:	4921      	ldr	r1, [pc, #132]	; (257d4 <clear_event_registrations+0x15c>)
   2574e:	f006 fe70 	bl	2c432 <printk>
   25752:	491e      	ldr	r1, [pc, #120]	; (257cc <clear_event_registrations+0x154>)
   25754:	4820      	ldr	r0, [pc, #128]	; (257d8 <clear_event_registrations+0x160>)
   25756:	f006 fe6c 	bl	2c432 <printk>
   2575a:	2184      	movs	r1, #132	; 0x84
   2575c:	481c      	ldr	r0, [pc, #112]	; (257d0 <clear_event_registrations+0x158>)
   2575e:	f007 f885 	bl	2c86c <assert_post_action>
   25762:	f386 8811 	msr	BASEPRI, r6
   25766:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2576a:	f04f 0320 	mov.w	r3, #32
   2576e:	f3ef 8611 	mrs	r6, BASEPRI
   25772:	f383 8811 	msr	BASEPRI, r3
   25776:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2577a:	4814      	ldr	r0, [pc, #80]	; (257cc <clear_event_registrations+0x154>)
   2577c:	f7ff fac2 	bl	24d04 <z_spin_lock_valid>
   25780:	b968      	cbnz	r0, 2579e <clear_event_registrations+0x126>
   25782:	235c      	movs	r3, #92	; 0x5c
   25784:	4638      	mov	r0, r7
   25786:	4a12      	ldr	r2, [pc, #72]	; (257d0 <clear_event_registrations+0x158>)
   25788:	4914      	ldr	r1, [pc, #80]	; (257dc <clear_event_registrations+0x164>)
   2578a:	f006 fe52 	bl	2c432 <printk>
   2578e:	490f      	ldr	r1, [pc, #60]	; (257cc <clear_event_registrations+0x154>)
   25790:	4813      	ldr	r0, [pc, #76]	; (257e0 <clear_event_registrations+0x168>)
   25792:	f006 fe4e 	bl	2c432 <printk>
   25796:	215c      	movs	r1, #92	; 0x5c
   25798:	480d      	ldr	r0, [pc, #52]	; (257d0 <clear_event_registrations+0x158>)
   2579a:	f007 f867 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   2579e:	480b      	ldr	r0, [pc, #44]	; (257cc <clear_event_registrations+0x154>)
   257a0:	f7ff face 	bl	24d40 <z_spin_lock_set_owner>
	return k;
   257a4:	3c14      	subs	r4, #20
   257a6:	e772      	b.n	2568e <clear_event_registrations+0x16>
   257a8:	0003323a 	.word	0x0003323a
   257ac:	00030166 	.word	0x00030166
   257b0:	00033290 	.word	0x00033290
   257b4:	000332aa 	.word	0x000332aa
   257b8:	000332bf 	.word	0x000332bf
   257bc:	000332db 	.word	0x000332db
   257c0:	000332ec 	.word	0x000332ec
   257c4:	00033309 	.word	0x00033309
   257c8:	00033320 	.word	0x00033320
   257cc:	20021e34 	.word	0x20021e34
   257d0:	000304b3 	.word	0x000304b3
   257d4:	000304d9 	.word	0x000304d9
   257d8:	000304f0 	.word	0x000304f0
   257dc:	00030505 	.word	0x00030505
   257e0:	0003051a 	.word	0x0003051a
   257e4:	00032fcf 	.word	0x00032fcf

000257e8 <register_events>:
{
   257e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   257ec:	2700      	movs	r7, #0
{
   257ee:	4615      	mov	r5, r2
   257f0:	4604      	mov	r4, r0
	int events_registered = 0;
   257f2:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   257f4:	4e6a      	ldr	r6, [pc, #424]	; (259a0 <register_events+0x1b8>)
   257f6:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 259dc <register_events+0x1f4>
   257fa:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 259e0 <register_events+0x1f8>
{
   257fe:	9100      	str	r1, [sp, #0]
   25800:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   25802:	9b00      	ldr	r3, [sp, #0]
   25804:	429f      	cmp	r7, r3
   25806:	db03      	blt.n	25810 <register_events+0x28>
}
   25808:	4648      	mov	r0, r9
   2580a:	b003      	add	sp, #12
   2580c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25810:	f04f 0320 	mov.w	r3, #32
   25814:	f3ef 8b11 	mrs	fp, BASEPRI
   25818:	f383 8811 	msr	BASEPRI, r3
   2581c:	f3bf 8f6f 	isb	sy
   25820:	4630      	mov	r0, r6
   25822:	f7ff fa6f 	bl	24d04 <z_spin_lock_valid>
   25826:	b968      	cbnz	r0, 25844 <register_events+0x5c>
   25828:	235c      	movs	r3, #92	; 0x5c
   2582a:	4642      	mov	r2, r8
   2582c:	4651      	mov	r1, sl
   2582e:	485d      	ldr	r0, [pc, #372]	; (259a4 <register_events+0x1bc>)
   25830:	f006 fdff 	bl	2c432 <printk>
   25834:	4631      	mov	r1, r6
   25836:	485c      	ldr	r0, [pc, #368]	; (259a8 <register_events+0x1c0>)
   25838:	f006 fdfb 	bl	2c432 <printk>
   2583c:	215c      	movs	r1, #92	; 0x5c
   2583e:	4640      	mov	r0, r8
   25840:	f007 f814 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   25844:	4630      	mov	r0, r6
   25846:	f7ff fa7b 	bl	24d40 <z_spin_lock_set_owner>
	switch (event->type) {
   2584a:	7b63      	ldrb	r3, [r4, #13]
   2584c:	f003 030f 	and.w	r3, r3, #15
   25850:	2b04      	cmp	r3, #4
   25852:	d844      	bhi.n	258de <register_events+0xf6>
   25854:	e8df f003 	tbb	[pc, r3]
   25858:	43033d2d 	.word	0x43033d2d
   2585c:	2a          	.byte	0x2a
   2585d:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   2585e:	6923      	ldr	r3, [r4, #16]
   25860:	689b      	ldr	r3, [r3, #8]
   25862:	b333      	cbz	r3, 258b2 <register_events+0xca>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   25864:	2202      	movs	r2, #2
	event->poller = NULL;
   25866:	2100      	movs	r1, #0
	event->state |= state;
   25868:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   2586a:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   2586c:	f3c3 3004 	ubfx	r0, r3, #12, #5
   25870:	4302      	orrs	r2, r0
   25872:	f362 3310 	bfi	r3, r2, #12, #5
   25876:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   25878:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2587a:	4630      	mov	r0, r6
   2587c:	f7ff fa50 	bl	24d20 <z_spin_unlock_valid>
   25880:	b968      	cbnz	r0, 2589e <register_events+0xb6>
   25882:	2384      	movs	r3, #132	; 0x84
   25884:	4642      	mov	r2, r8
   25886:	4949      	ldr	r1, [pc, #292]	; (259ac <register_events+0x1c4>)
   25888:	4846      	ldr	r0, [pc, #280]	; (259a4 <register_events+0x1bc>)
   2588a:	f006 fdd2 	bl	2c432 <printk>
   2588e:	4631      	mov	r1, r6
   25890:	4847      	ldr	r0, [pc, #284]	; (259b0 <register_events+0x1c8>)
   25892:	f006 fdce 	bl	2c432 <printk>
   25896:	2184      	movs	r1, #132	; 0x84
   25898:	4640      	mov	r0, r8
   2589a:	f006 ffe7 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   2589e:	f38b 8811 	msr	BASEPRI, fp
   258a2:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   258a6:	3701      	adds	r7, #1
   258a8:	3414      	adds	r4, #20
   258aa:	e7aa      	b.n	25802 <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   258ac:	6923      	ldr	r3, [r4, #16]
   258ae:	681b      	ldr	r3, [r3, #0]
   258b0:	bb33      	cbnz	r3, 25900 <register_events+0x118>
		} else if (!just_check && poller->is_polling) {
   258b2:	9b01      	ldr	r3, [sp, #4]
   258b4:	2b00      	cmp	r3, #0
   258b6:	d1e0      	bne.n	2587a <register_events+0x92>
   258b8:	782b      	ldrb	r3, [r5, #0]
   258ba:	2b00      	cmp	r3, #0
   258bc:	d0dd      	beq.n	2587a <register_events+0x92>
	switch (event->type) {
   258be:	7b63      	ldrb	r3, [r4, #13]
   258c0:	f003 030f 	and.w	r3, r3, #15
   258c4:	2b04      	cmp	r3, #4
   258c6:	d85d      	bhi.n	25984 <register_events+0x19c>
   258c8:	e8df f003 	tbb	[pc, r3]
   258cc:	5c1c4931 	.word	0x5c1c4931
   258d0:	35          	.byte	0x35
   258d1:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   258d2:	6923      	ldr	r3, [r4, #16]
   258d4:	689b      	ldr	r3, [r3, #8]
   258d6:	2b00      	cmp	r3, #0
   258d8:	d0eb      	beq.n	258b2 <register_events+0xca>
			*state = K_POLL_STATE_SIGNALED;
   258da:	2201      	movs	r2, #1
   258dc:	e7c3      	b.n	25866 <register_events+0x7e>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   258de:	234f      	movs	r3, #79	; 0x4f
   258e0:	4a34      	ldr	r2, [pc, #208]	; (259b4 <register_events+0x1cc>)
   258e2:	4935      	ldr	r1, [pc, #212]	; (259b8 <register_events+0x1d0>)
   258e4:	482f      	ldr	r0, [pc, #188]	; (259a4 <register_events+0x1bc>)
   258e6:	f006 fda4 	bl	2c432 <printk>
   258ea:	7b61      	ldrb	r1, [r4, #13]
   258ec:	4833      	ldr	r0, [pc, #204]	; (259bc <register_events+0x1d4>)
   258ee:	f001 010f 	and.w	r1, r1, #15
   258f2:	f006 fd9e 	bl	2c432 <printk>
   258f6:	214f      	movs	r1, #79	; 0x4f
   258f8:	482e      	ldr	r0, [pc, #184]	; (259b4 <register_events+0x1cc>)
   258fa:	f006 ffb7 	bl	2c86c <assert_post_action>
		break;
   258fe:	e7d8      	b.n	258b2 <register_events+0xca>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   25900:	2204      	movs	r2, #4
   25902:	e7b0      	b.n	25866 <register_events+0x7e>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   25904:	6923      	ldr	r3, [r4, #16]
   25906:	b963      	cbnz	r3, 25922 <register_events+0x13a>
   25908:	492d      	ldr	r1, [pc, #180]	; (259c0 <register_events+0x1d8>)
   2590a:	2374      	movs	r3, #116	; 0x74
   2590c:	4a29      	ldr	r2, [pc, #164]	; (259b4 <register_events+0x1cc>)
   2590e:	4825      	ldr	r0, [pc, #148]	; (259a4 <register_events+0x1bc>)
   25910:	f006 fd8f 	bl	2c432 <printk>
   25914:	482b      	ldr	r0, [pc, #172]	; (259c4 <register_events+0x1dc>)
   25916:	f006 fd8c 	bl	2c432 <printk>
   2591a:	2174      	movs	r1, #116	; 0x74
   2591c:	4825      	ldr	r0, [pc, #148]	; (259b4 <register_events+0x1cc>)
   2591e:	f006 ffa5 	bl	2c86c <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   25922:	462a      	mov	r2, r5
   25924:	4621      	mov	r1, r4
   25926:	6920      	ldr	r0, [r4, #16]
   25928:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   2592a:	f009 f98c 	bl	2ec46 <add_event>
	event->poller = poller;
   2592e:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   25930:	f109 0901 	add.w	r9, r9, #1
   25934:	e7a1      	b.n	2587a <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   25936:	6923      	ldr	r3, [r4, #16]
   25938:	b963      	cbnz	r3, 25954 <register_events+0x16c>
   2593a:	4923      	ldr	r1, [pc, #140]	; (259c8 <register_events+0x1e0>)
   2593c:	2378      	movs	r3, #120	; 0x78
   2593e:	4a1d      	ldr	r2, [pc, #116]	; (259b4 <register_events+0x1cc>)
   25940:	4818      	ldr	r0, [pc, #96]	; (259a4 <register_events+0x1bc>)
   25942:	f006 fd76 	bl	2c432 <printk>
   25946:	4821      	ldr	r0, [pc, #132]	; (259cc <register_events+0x1e4>)
   25948:	f006 fd73 	bl	2c432 <printk>
   2594c:	2178      	movs	r1, #120	; 0x78
   2594e:	4819      	ldr	r0, [pc, #100]	; (259b4 <register_events+0x1cc>)
   25950:	f006 ff8c 	bl	2c86c <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   25954:	6920      	ldr	r0, [r4, #16]
   25956:	462a      	mov	r2, r5
   25958:	4621      	mov	r1, r4
   2595a:	3014      	adds	r0, #20
   2595c:	e7e5      	b.n	2592a <register_events+0x142>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2595e:	6923      	ldr	r3, [r4, #16]
   25960:	b963      	cbnz	r3, 2597c <register_events+0x194>
   25962:	491b      	ldr	r1, [pc, #108]	; (259d0 <register_events+0x1e8>)
   25964:	237c      	movs	r3, #124	; 0x7c
   25966:	4a13      	ldr	r2, [pc, #76]	; (259b4 <register_events+0x1cc>)
   25968:	480e      	ldr	r0, [pc, #56]	; (259a4 <register_events+0x1bc>)
   2596a:	f006 fd62 	bl	2c432 <printk>
   2596e:	4819      	ldr	r0, [pc, #100]	; (259d4 <register_events+0x1ec>)
   25970:	f006 fd5f 	bl	2c432 <printk>
   25974:	217c      	movs	r1, #124	; 0x7c
   25976:	480f      	ldr	r0, [pc, #60]	; (259b4 <register_events+0x1cc>)
   25978:	f006 ff78 	bl	2c86c <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   2597c:	462a      	mov	r2, r5
   2597e:	4621      	mov	r1, r4
   25980:	6920      	ldr	r0, [r4, #16]
   25982:	e7d2      	b.n	2592a <register_events+0x142>
		__ASSERT(false, "invalid event type\n");
   25984:	2383      	movs	r3, #131	; 0x83
   25986:	4a0b      	ldr	r2, [pc, #44]	; (259b4 <register_events+0x1cc>)
   25988:	490b      	ldr	r1, [pc, #44]	; (259b8 <register_events+0x1d0>)
   2598a:	4806      	ldr	r0, [pc, #24]	; (259a4 <register_events+0x1bc>)
   2598c:	f006 fd51 	bl	2c432 <printk>
   25990:	4811      	ldr	r0, [pc, #68]	; (259d8 <register_events+0x1f0>)
   25992:	f006 fd4e 	bl	2c432 <printk>
   25996:	2183      	movs	r1, #131	; 0x83
   25998:	4806      	ldr	r0, [pc, #24]	; (259b4 <register_events+0x1cc>)
   2599a:	f006 ff67 	bl	2c86c <assert_post_action>
		break;
   2599e:	e7c6      	b.n	2592e <register_events+0x146>
   259a0:	20021e34 	.word	0x20021e34
   259a4:	00030166 	.word	0x00030166
   259a8:	0003051a 	.word	0x0003051a
   259ac:	000304d9 	.word	0x000304d9
   259b0:	000304f0 	.word	0x000304f0
   259b4:	0003323a 	.word	0x0003323a
   259b8:	00032fcf 	.word	0x00032fcf
   259bc:	00033336 	.word	0x00033336
   259c0:	00033290 	.word	0x00033290
   259c4:	000332aa 	.word	0x000332aa
   259c8:	000332bf 	.word	0x000332bf
   259cc:	000332db 	.word	0x000332db
   259d0:	000332ec 	.word	0x000332ec
   259d4:	00033309 	.word	0x00033309
   259d8:	00033320 	.word	0x00033320
   259dc:	000304b3 	.word	0x000304b3
   259e0:	00030505 	.word	0x00030505

000259e4 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   259e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   259e8:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   259ea:	2301      	movs	r3, #1
{
   259ec:	b088      	sub	sp, #32
	struct _poller poller = { .is_polling = true,
   259ee:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   259f2:	4b73      	ldr	r3, [pc, #460]	; (25bc0 <z_impl_k_poll+0x1dc>)
{
   259f4:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   259f6:	689b      	ldr	r3, [r3, #8]
{
   259f8:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   259fa:	9306      	str	r3, [sp, #24]
   259fc:	4b71      	ldr	r3, [pc, #452]	; (25bc4 <z_impl_k_poll+0x1e0>)
{
   259fe:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   25a00:	9307      	str	r3, [sp, #28]
   25a02:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   25a06:	b163      	cbz	r3, 25a22 <z_impl_k_poll+0x3e>
   25a08:	496f      	ldr	r1, [pc, #444]	; (25bc8 <z_impl_k_poll+0x1e4>)
   25a0a:	23ff      	movs	r3, #255	; 0xff
   25a0c:	4a6f      	ldr	r2, [pc, #444]	; (25bcc <z_impl_k_poll+0x1e8>)
   25a0e:	4870      	ldr	r0, [pc, #448]	; (25bd0 <z_impl_k_poll+0x1ec>)
   25a10:	f006 fd0f 	bl	2c432 <printk>
   25a14:	486f      	ldr	r0, [pc, #444]	; (25bd4 <z_impl_k_poll+0x1f0>)
   25a16:	f006 fd0c 	bl	2c432 <printk>
   25a1a:	21ff      	movs	r1, #255	; 0xff
   25a1c:	486b      	ldr	r0, [pc, #428]	; (25bcc <z_impl_k_poll+0x1e8>)
   25a1e:	f006 ff25 	bl	2c86c <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   25a22:	b974      	cbnz	r4, 25a42 <z_impl_k_poll+0x5e>
   25a24:	496c      	ldr	r1, [pc, #432]	; (25bd8 <z_impl_k_poll+0x1f4>)
   25a26:	f44f 7380 	mov.w	r3, #256	; 0x100
   25a2a:	4a68      	ldr	r2, [pc, #416]	; (25bcc <z_impl_k_poll+0x1e8>)
   25a2c:	4868      	ldr	r0, [pc, #416]	; (25bd0 <z_impl_k_poll+0x1ec>)
   25a2e:	f006 fd00 	bl	2c432 <printk>
   25a32:	486a      	ldr	r0, [pc, #424]	; (25bdc <z_impl_k_poll+0x1f8>)
   25a34:	f006 fcfd 	bl	2c432 <printk>
   25a38:	f44f 7180 	mov.w	r1, #256	; 0x100
   25a3c:	4863      	ldr	r0, [pc, #396]	; (25bcc <z_impl_k_poll+0x1e8>)
   25a3e:	f006 ff15 	bl	2c86c <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   25a42:	2d00      	cmp	r5, #0
   25a44:	da0e      	bge.n	25a64 <z_impl_k_poll+0x80>
   25a46:	4966      	ldr	r1, [pc, #408]	; (25be0 <z_impl_k_poll+0x1fc>)
   25a48:	f240 1301 	movw	r3, #257	; 0x101
   25a4c:	4a5f      	ldr	r2, [pc, #380]	; (25bcc <z_impl_k_poll+0x1e8>)
   25a4e:	4860      	ldr	r0, [pc, #384]	; (25bd0 <z_impl_k_poll+0x1ec>)
   25a50:	f006 fcef 	bl	2c432 <printk>
   25a54:	4863      	ldr	r0, [pc, #396]	; (25be4 <z_impl_k_poll+0x200>)
   25a56:	f006 fcec 	bl	2c432 <printk>
   25a5a:	f240 1101 	movw	r1, #257	; 0x101
   25a5e:	485b      	ldr	r0, [pc, #364]	; (25bcc <z_impl_k_poll+0x1e8>)
   25a60:	f006 ff04 	bl	2c86c <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   25a64:	ea56 0307 	orrs.w	r3, r6, r7
   25a68:	bf0c      	ite	eq
   25a6a:	2301      	moveq	r3, #1
   25a6c:	2300      	movne	r3, #0
   25a6e:	4629      	mov	r1, r5
   25a70:	4620      	mov	r0, r4
   25a72:	aa05      	add	r2, sp, #20
   25a74:	f7ff feb8 	bl	257e8 <register_events>
   25a78:	4680      	mov	r8, r0
	__asm__ volatile(
   25a7a:	f04f 0320 	mov.w	r3, #32
   25a7e:	f3ef 8511 	mrs	r5, BASEPRI
   25a82:	f383 8811 	msr	BASEPRI, r3
   25a86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25a8a:	4857      	ldr	r0, [pc, #348]	; (25be8 <z_impl_k_poll+0x204>)
   25a8c:	f7ff f93a 	bl	24d04 <z_spin_lock_valid>
   25a90:	b968      	cbnz	r0, 25aae <z_impl_k_poll+0xca>
   25a92:	235c      	movs	r3, #92	; 0x5c
   25a94:	4a55      	ldr	r2, [pc, #340]	; (25bec <z_impl_k_poll+0x208>)
   25a96:	4956      	ldr	r1, [pc, #344]	; (25bf0 <z_impl_k_poll+0x20c>)
   25a98:	484d      	ldr	r0, [pc, #308]	; (25bd0 <z_impl_k_poll+0x1ec>)
   25a9a:	f006 fcca 	bl	2c432 <printk>
   25a9e:	4952      	ldr	r1, [pc, #328]	; (25be8 <z_impl_k_poll+0x204>)
   25aa0:	4854      	ldr	r0, [pc, #336]	; (25bf4 <z_impl_k_poll+0x210>)
   25aa2:	f006 fcc6 	bl	2c432 <printk>
   25aa6:	215c      	movs	r1, #92	; 0x5c
   25aa8:	4850      	ldr	r0, [pc, #320]	; (25bec <z_impl_k_poll+0x208>)
   25aaa:	f006 fedf 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   25aae:	484e      	ldr	r0, [pc, #312]	; (25be8 <z_impl_k_poll+0x204>)
   25ab0:	f7ff f946 	bl	24d40 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   25ab4:	f89d 3014 	ldrb.w	r3, [sp, #20]
   25ab8:	b9fb      	cbnz	r3, 25afa <z_impl_k_poll+0x116>
		clear_event_registrations(events, events_registered, key);
   25aba:	4620      	mov	r0, r4
   25abc:	462a      	mov	r2, r5
   25abe:	4641      	mov	r1, r8
   25ac0:	f7ff fdda 	bl	25678 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25ac4:	4848      	ldr	r0, [pc, #288]	; (25be8 <z_impl_k_poll+0x204>)
   25ac6:	f7ff f92b 	bl	24d20 <z_spin_unlock_valid>
   25aca:	b968      	cbnz	r0, 25ae8 <z_impl_k_poll+0x104>
   25acc:	2384      	movs	r3, #132	; 0x84
   25ace:	4a47      	ldr	r2, [pc, #284]	; (25bec <z_impl_k_poll+0x208>)
   25ad0:	4949      	ldr	r1, [pc, #292]	; (25bf8 <z_impl_k_poll+0x214>)
   25ad2:	483f      	ldr	r0, [pc, #252]	; (25bd0 <z_impl_k_poll+0x1ec>)
   25ad4:	f006 fcad 	bl	2c432 <printk>
   25ad8:	4943      	ldr	r1, [pc, #268]	; (25be8 <z_impl_k_poll+0x204>)
   25ada:	4848      	ldr	r0, [pc, #288]	; (25bfc <z_impl_k_poll+0x218>)
   25adc:	f006 fca9 	bl	2c432 <printk>
   25ae0:	2184      	movs	r1, #132	; 0x84
   25ae2:	4842      	ldr	r0, [pc, #264]	; (25bec <z_impl_k_poll+0x208>)
   25ae4:	f006 fec2 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   25ae8:	f385 8811 	msr	BASEPRI, r5
   25aec:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   25af0:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   25af2:	4628      	mov	r0, r5
   25af4:	b008      	add	sp, #32
   25af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	poller.is_polling = false;
   25afa:	2300      	movs	r3, #0
   25afc:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25b00:	ea56 0307 	orrs.w	r3, r6, r7
   25b04:	d118      	bne.n	25b38 <z_impl_k_poll+0x154>
   25b06:	4838      	ldr	r0, [pc, #224]	; (25be8 <z_impl_k_poll+0x204>)
   25b08:	f7ff f90a 	bl	24d20 <z_spin_unlock_valid>
   25b0c:	b968      	cbnz	r0, 25b2a <z_impl_k_poll+0x146>
   25b0e:	2384      	movs	r3, #132	; 0x84
   25b10:	4a36      	ldr	r2, [pc, #216]	; (25bec <z_impl_k_poll+0x208>)
   25b12:	4939      	ldr	r1, [pc, #228]	; (25bf8 <z_impl_k_poll+0x214>)
   25b14:	482e      	ldr	r0, [pc, #184]	; (25bd0 <z_impl_k_poll+0x1ec>)
   25b16:	f006 fc8c 	bl	2c432 <printk>
   25b1a:	4933      	ldr	r1, [pc, #204]	; (25be8 <z_impl_k_poll+0x204>)
   25b1c:	4837      	ldr	r0, [pc, #220]	; (25bfc <z_impl_k_poll+0x218>)
   25b1e:	f006 fc88 	bl	2c432 <printk>
   25b22:	2184      	movs	r1, #132	; 0x84
   25b24:	4831      	ldr	r0, [pc, #196]	; (25bec <z_impl_k_poll+0x208>)
   25b26:	f006 fea1 	bl	2c86c <assert_post_action>
   25b2a:	f385 8811 	msr	BASEPRI, r5
   25b2e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   25b32:	f06f 050a 	mvn.w	r5, #10
   25b36:	e7dc      	b.n	25af2 <z_impl_k_poll+0x10e>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   25b38:	4629      	mov	r1, r5
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   25b3a:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   25b3c:	e9cd 6700 	strd	r6, r7, [sp]
   25b40:	4829      	ldr	r0, [pc, #164]	; (25be8 <z_impl_k_poll+0x204>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   25b42:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   25b46:	f7fe fbe1 	bl	2430c <z_pend_curr>
   25b4a:	4605      	mov	r5, r0
	__asm__ volatile(
   25b4c:	f04f 0320 	mov.w	r3, #32
   25b50:	f3ef 8611 	mrs	r6, BASEPRI
   25b54:	f383 8811 	msr	BASEPRI, r3
   25b58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25b5c:	4822      	ldr	r0, [pc, #136]	; (25be8 <z_impl_k_poll+0x204>)
   25b5e:	f7ff f8d1 	bl	24d04 <z_spin_lock_valid>
   25b62:	b968      	cbnz	r0, 25b80 <z_impl_k_poll+0x19c>
   25b64:	235c      	movs	r3, #92	; 0x5c
   25b66:	4a21      	ldr	r2, [pc, #132]	; (25bec <z_impl_k_poll+0x208>)
   25b68:	4921      	ldr	r1, [pc, #132]	; (25bf0 <z_impl_k_poll+0x20c>)
   25b6a:	4819      	ldr	r0, [pc, #100]	; (25bd0 <z_impl_k_poll+0x1ec>)
   25b6c:	f006 fc61 	bl	2c432 <printk>
   25b70:	491d      	ldr	r1, [pc, #116]	; (25be8 <z_impl_k_poll+0x204>)
   25b72:	4820      	ldr	r0, [pc, #128]	; (25bf4 <z_impl_k_poll+0x210>)
   25b74:	f006 fc5d 	bl	2c432 <printk>
   25b78:	215c      	movs	r1, #92	; 0x5c
   25b7a:	481c      	ldr	r0, [pc, #112]	; (25bec <z_impl_k_poll+0x208>)
   25b7c:	f006 fe76 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   25b80:	4819      	ldr	r0, [pc, #100]	; (25be8 <z_impl_k_poll+0x204>)
   25b82:	f7ff f8dd 	bl	24d40 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   25b86:	4620      	mov	r0, r4
   25b88:	4632      	mov	r2, r6
   25b8a:	4641      	mov	r1, r8
   25b8c:	f7ff fd74 	bl	25678 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25b90:	4815      	ldr	r0, [pc, #84]	; (25be8 <z_impl_k_poll+0x204>)
   25b92:	f7ff f8c5 	bl	24d20 <z_spin_unlock_valid>
   25b96:	b968      	cbnz	r0, 25bb4 <z_impl_k_poll+0x1d0>
   25b98:	2384      	movs	r3, #132	; 0x84
   25b9a:	4a14      	ldr	r2, [pc, #80]	; (25bec <z_impl_k_poll+0x208>)
   25b9c:	4916      	ldr	r1, [pc, #88]	; (25bf8 <z_impl_k_poll+0x214>)
   25b9e:	480c      	ldr	r0, [pc, #48]	; (25bd0 <z_impl_k_poll+0x1ec>)
   25ba0:	f006 fc47 	bl	2c432 <printk>
   25ba4:	4910      	ldr	r1, [pc, #64]	; (25be8 <z_impl_k_poll+0x204>)
   25ba6:	4815      	ldr	r0, [pc, #84]	; (25bfc <z_impl_k_poll+0x218>)
   25ba8:	f006 fc43 	bl	2c432 <printk>
   25bac:	2184      	movs	r1, #132	; 0x84
   25bae:	480f      	ldr	r0, [pc, #60]	; (25bec <z_impl_k_poll+0x208>)
   25bb0:	f006 fe5c 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   25bb4:	f386 8811 	msr	BASEPRI, r6
   25bb8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   25bbc:	e799      	b.n	25af2 <z_impl_k_poll+0x10e>
   25bbe:	bf00      	nop
   25bc0:	20021de0 	.word	0x20021de0
   25bc4:	000255f9 	.word	0x000255f9
   25bc8:	00032e9e 	.word	0x00032e9e
   25bcc:	0003323a 	.word	0x0003323a
   25bd0:	00030166 	.word	0x00030166
   25bd4:	00030a10 	.word	0x00030a10
   25bd8:	00033353 	.word	0x00033353
   25bdc:	00033369 	.word	0x00033369
   25be0:	00033378 	.word	0x00033378
   25be4:	00033388 	.word	0x00033388
   25be8:	20021e34 	.word	0x20021e34
   25bec:	000304b3 	.word	0x000304b3
   25bf0:	00030505 	.word	0x00030505
   25bf4:	0003051a 	.word	0x0003051a
   25bf8:	000304d9 	.word	0x000304d9
   25bfc:	000304f0 	.word	0x000304f0

00025c00 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   25c00:	b570      	push	{r4, r5, r6, lr}
   25c02:	4604      	mov	r4, r0
   25c04:	460d      	mov	r5, r1
	__asm__ volatile(
   25c06:	f04f 0320 	mov.w	r3, #32
   25c0a:	f3ef 8611 	mrs	r6, BASEPRI
   25c0e:	f383 8811 	msr	BASEPRI, r3
   25c12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25c16:	4821      	ldr	r0, [pc, #132]	; (25c9c <z_impl_k_poll_signal_raise+0x9c>)
   25c18:	f7ff f874 	bl	24d04 <z_spin_lock_valid>
   25c1c:	b968      	cbnz	r0, 25c3a <z_impl_k_poll_signal_raise+0x3a>
   25c1e:	235c      	movs	r3, #92	; 0x5c
   25c20:	4a1f      	ldr	r2, [pc, #124]	; (25ca0 <z_impl_k_poll_signal_raise+0xa0>)
   25c22:	4920      	ldr	r1, [pc, #128]	; (25ca4 <z_impl_k_poll_signal_raise+0xa4>)
   25c24:	4820      	ldr	r0, [pc, #128]	; (25ca8 <z_impl_k_poll_signal_raise+0xa8>)
   25c26:	f006 fc04 	bl	2c432 <printk>
   25c2a:	491c      	ldr	r1, [pc, #112]	; (25c9c <z_impl_k_poll_signal_raise+0x9c>)
   25c2c:	481f      	ldr	r0, [pc, #124]	; (25cac <z_impl_k_poll_signal_raise+0xac>)
   25c2e:	f006 fc00 	bl	2c432 <printk>
   25c32:	215c      	movs	r1, #92	; 0x5c
   25c34:	481a      	ldr	r0, [pc, #104]	; (25ca0 <z_impl_k_poll_signal_raise+0xa0>)
   25c36:	f006 fe19 	bl	2c86c <assert_post_action>
	z_spin_lock_set_owner(l);
   25c3a:	4818      	ldr	r0, [pc, #96]	; (25c9c <z_impl_k_poll_signal_raise+0x9c>)
   25c3c:	f7ff f880 	bl	24d40 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
	signal->signaled = 1U;
   25c40:	2101      	movs	r1, #1
	return list->head == list;
   25c42:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   25c44:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   25c46:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   25c48:	60a1      	str	r1, [r4, #8]
   25c4a:	d117      	bne.n	25c7c <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25c4c:	4813      	ldr	r0, [pc, #76]	; (25c9c <z_impl_k_poll_signal_raise+0x9c>)
   25c4e:	f7ff f867 	bl	24d20 <z_spin_unlock_valid>
   25c52:	b968      	cbnz	r0, 25c70 <z_impl_k_poll_signal_raise+0x70>
   25c54:	2384      	movs	r3, #132	; 0x84
   25c56:	4a12      	ldr	r2, [pc, #72]	; (25ca0 <z_impl_k_poll_signal_raise+0xa0>)
   25c58:	4915      	ldr	r1, [pc, #84]	; (25cb0 <z_impl_k_poll_signal_raise+0xb0>)
   25c5a:	4813      	ldr	r0, [pc, #76]	; (25ca8 <z_impl_k_poll_signal_raise+0xa8>)
   25c5c:	f006 fbe9 	bl	2c432 <printk>
   25c60:	490e      	ldr	r1, [pc, #56]	; (25c9c <z_impl_k_poll_signal_raise+0x9c>)
   25c62:	4814      	ldr	r0, [pc, #80]	; (25cb4 <z_impl_k_poll_signal_raise+0xb4>)
   25c64:	f006 fbe5 	bl	2c432 <printk>
   25c68:	2184      	movs	r1, #132	; 0x84
   25c6a:	480d      	ldr	r0, [pc, #52]	; (25ca0 <z_impl_k_poll_signal_raise+0xa0>)
   25c6c:	f006 fdfe 	bl	2c86c <assert_post_action>
	__asm__ volatile(
   25c70:	f386 8811 	msr	BASEPRI, r6
   25c74:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   25c78:	2400      	movs	r4, #0
   25c7a:	e00d      	b.n	25c98 <z_impl_k_poll_signal_raise+0x98>
	node->prev->next = node->next;
   25c7c:	e9d0 3200 	ldrd	r3, r2, [r0]
   25c80:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   25c82:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25c84:	2300      	movs	r3, #0
	node->prev = NULL;
   25c86:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   25c8a:	f008 ffc1 	bl	2ec10 <signal_poll_event>

	z_reschedule(&lock, key);
   25c8e:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   25c90:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   25c92:	4802      	ldr	r0, [pc, #8]	; (25c9c <z_impl_k_poll_signal_raise+0x9c>)
   25c94:	f7fd fd84 	bl	237a0 <z_reschedule>
	return rc;
}
   25c98:	4620      	mov	r0, r4
   25c9a:	bd70      	pop	{r4, r5, r6, pc}
   25c9c:	20021e34 	.word	0x20021e34
   25ca0:	000304b3 	.word	0x000304b3
   25ca4:	00030505 	.word	0x00030505
   25ca8:	00030166 	.word	0x00030166
   25cac:	0003051a 	.word	0x0003051a
   25cb0:	000304d9 	.word	0x000304d9
   25cb4:	000304f0 	.word	0x000304f0

00025cb8 <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   25cb8:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   25cba:	4801      	ldr	r0, [pc, #4]	; (25cc0 <k_malloc+0x8>)
   25cbc:	f009 b802 	b.w	2ecc4 <k_mem_pool_malloc>
   25cc0:	200204d4 	.word	0x200204d4

00025cc4 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   25cc4:	b507      	push	{r0, r1, r2, lr}
   25cc6:	9001      	str	r0, [sp, #4]
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   25cc8:	f008 fed4 	bl	2ea74 <k_is_in_isr>
   25ccc:	9901      	ldr	r1, [sp, #4]
   25cce:	b948      	cbnz	r0, 25ce4 <z_thread_malloc+0x20>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   25cd0:	4b07      	ldr	r3, [pc, #28]	; (25cf0 <z_thread_malloc+0x2c>)
   25cd2:	689b      	ldr	r3, [r3, #8]
   25cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (pool) {
   25cd6:	b13b      	cbz	r3, 25ce8 <z_thread_malloc+0x24>
		ret = k_mem_pool_malloc(pool, size);
   25cd8:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   25cda:	b003      	add	sp, #12
   25cdc:	f85d eb04 	ldr.w	lr, [sp], #4
		ret = k_mem_pool_malloc(pool, size);
   25ce0:	f008 bff0 	b.w	2ecc4 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   25ce4:	4b03      	ldr	r3, [pc, #12]	; (25cf4 <z_thread_malloc+0x30>)
   25ce6:	e7f7      	b.n	25cd8 <z_thread_malloc+0x14>
}
   25ce8:	b003      	add	sp, #12
   25cea:	f85d fb04 	ldr.w	pc, [sp], #4
   25cee:	bf00      	nop
   25cf0:	20021de0 	.word	0x20021de0
   25cf4:	200204d4 	.word	0x200204d4

00025cf8 <__assert_func>:
   25cf8:	4d0a      	ldr	r5, [pc, #40]	; (25d24 <__assert_func+0x2c>)
   25cfa:	4614      	mov	r4, r2
   25cfc:	461a      	mov	r2, r3
   25cfe:	4603      	mov	r3, r0
   25d00:	682d      	ldr	r5, [r5, #0]
   25d02:	b500      	push	{lr}
   25d04:	68e8      	ldr	r0, [r5, #12]
   25d06:	b085      	sub	sp, #20
   25d08:	b144      	cbz	r4, 25d1c <__assert_func+0x24>
   25d0a:	4d07      	ldr	r5, [pc, #28]	; (25d28 <__assert_func+0x30>)
   25d0c:	9100      	str	r1, [sp, #0]
   25d0e:	4907      	ldr	r1, [pc, #28]	; (25d2c <__assert_func+0x34>)
   25d10:	e9cd 5401 	strd	r5, r4, [sp, #4]
   25d14:	f000 f812 	bl	25d3c <fiprintf>
   25d18:	f003 feda 	bl	29ad0 <abort>
   25d1c:	4d04      	ldr	r5, [pc, #16]	; (25d30 <__assert_func+0x38>)
   25d1e:	462c      	mov	r4, r5
   25d20:	e7f4      	b.n	25d0c <__assert_func+0x14>
   25d22:	bf00      	nop
   25d24:	200204d8 	.word	0x200204d8
   25d28:	0002f920 	.word	0x0002f920
   25d2c:	0002f930 	.word	0x0002f930
   25d30:	0002f92c 	.word	0x0002f92c

00025d34 <atoi>:
   25d34:	220a      	movs	r2, #10
   25d36:	2100      	movs	r1, #0
   25d38:	f001 bac2 	b.w	272c0 <strtol>

00025d3c <fiprintf>:
   25d3c:	b40e      	push	{r1, r2, r3}
   25d3e:	b510      	push	{r4, lr}
   25d40:	b083      	sub	sp, #12
   25d42:	4c07      	ldr	r4, [pc, #28]	; (25d60 <fiprintf+0x24>)
   25d44:	4601      	mov	r1, r0
   25d46:	ab05      	add	r3, sp, #20
   25d48:	6820      	ldr	r0, [r4, #0]
   25d4a:	f853 2b04 	ldr.w	r2, [r3], #4
   25d4e:	9301      	str	r3, [sp, #4]
   25d50:	f002 feea 	bl	28b28 <_vfiprintf_r>
   25d54:	b003      	add	sp, #12
   25d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25d5a:	b003      	add	sp, #12
   25d5c:	4770      	bx	lr
   25d5e:	bf00      	nop
   25d60:	200204d8 	.word	0x200204d8

00025d64 <malloc>:
   25d64:	4b02      	ldr	r3, [pc, #8]	; (25d70 <malloc+0xc>)
   25d66:	4601      	mov	r1, r0
   25d68:	6818      	ldr	r0, [r3, #0]
   25d6a:	f000 b80b 	b.w	25d84 <_malloc_r>
   25d6e:	bf00      	nop
   25d70:	200204d8 	.word	0x200204d8

00025d74 <free>:
   25d74:	4b02      	ldr	r3, [pc, #8]	; (25d80 <free+0xc>)
   25d76:	4601      	mov	r1, r0
   25d78:	6818      	ldr	r0, [r3, #0]
   25d7a:	f004 b96d 	b.w	2a058 <_free_r>
   25d7e:	bf00      	nop
   25d80:	200204d8 	.word	0x200204d8

00025d84 <_malloc_r>:
   25d84:	f101 030b 	add.w	r3, r1, #11
   25d88:	2b16      	cmp	r3, #22
   25d8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25d8e:	4606      	mov	r6, r0
   25d90:	b083      	sub	sp, #12
   25d92:	d824      	bhi.n	25dde <_malloc_r+0x5a>
   25d94:	2910      	cmp	r1, #16
   25d96:	f200 80f5 	bhi.w	25f84 <_malloc_r+0x200>
   25d9a:	f000 fb7d 	bl	26498 <__malloc_lock>
   25d9e:	2510      	movs	r5, #16
   25da0:	2002      	movs	r0, #2
   25da2:	2318      	movs	r3, #24
   25da4:	4fce      	ldr	r7, [pc, #824]	; (260e0 <_malloc_r+0x35c>)
   25da6:	443b      	add	r3, r7
   25da8:	685a      	ldr	r2, [r3, #4]
   25daa:	f1a3 0108 	sub.w	r1, r3, #8
   25dae:	428a      	cmp	r2, r1
   25db0:	f000 80ef 	beq.w	25f92 <_malloc_r+0x20e>
   25db4:	6853      	ldr	r3, [r2, #4]
   25db6:	f102 0408 	add.w	r4, r2, #8
   25dba:	68d1      	ldr	r1, [r2, #12]
   25dbc:	4630      	mov	r0, r6
   25dbe:	f023 0303 	bic.w	r3, r3, #3
   25dc2:	6895      	ldr	r5, [r2, #8]
   25dc4:	441a      	add	r2, r3
   25dc6:	60e9      	str	r1, [r5, #12]
   25dc8:	608d      	str	r5, [r1, #8]
   25dca:	6853      	ldr	r3, [r2, #4]
   25dcc:	f043 0301 	orr.w	r3, r3, #1
   25dd0:	6053      	str	r3, [r2, #4]
   25dd2:	f000 fb67 	bl	264a4 <__malloc_unlock>
   25dd6:	4620      	mov	r0, r4
   25dd8:	b003      	add	sp, #12
   25dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25dde:	2b00      	cmp	r3, #0
   25de0:	f023 0507 	bic.w	r5, r3, #7
   25de4:	f2c0 80ce 	blt.w	25f84 <_malloc_r+0x200>
   25de8:	42a9      	cmp	r1, r5
   25dea:	f200 80cb 	bhi.w	25f84 <_malloc_r+0x200>
   25dee:	f000 fb53 	bl	26498 <__malloc_lock>
   25df2:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   25df6:	f0c0 81ca 	bcc.w	2618e <_malloc_r+0x40a>
   25dfa:	0a6b      	lsrs	r3, r5, #9
   25dfc:	f000 813a 	beq.w	26074 <_malloc_r+0x2f0>
   25e00:	2b04      	cmp	r3, #4
   25e02:	f200 81a0 	bhi.w	26146 <_malloc_r+0x3c2>
   25e06:	09ab      	lsrs	r3, r5, #6
   25e08:	f103 0039 	add.w	r0, r3, #57	; 0x39
   25e0c:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   25e10:	00c3      	lsls	r3, r0, #3
   25e12:	4fb3      	ldr	r7, [pc, #716]	; (260e0 <_malloc_r+0x35c>)
   25e14:	443b      	add	r3, r7
   25e16:	f1a3 0408 	sub.w	r4, r3, #8
   25e1a:	685b      	ldr	r3, [r3, #4]
   25e1c:	429c      	cmp	r4, r3
   25e1e:	d107      	bne.n	25e30 <_malloc_r+0xac>
   25e20:	e0bc      	b.n	25f9c <_malloc_r+0x218>
   25e22:	2900      	cmp	r1, #0
   25e24:	f280 8149 	bge.w	260ba <_malloc_r+0x336>
   25e28:	68db      	ldr	r3, [r3, #12]
   25e2a:	429c      	cmp	r4, r3
   25e2c:	f000 80b6 	beq.w	25f9c <_malloc_r+0x218>
   25e30:	685a      	ldr	r2, [r3, #4]
   25e32:	f022 0203 	bic.w	r2, r2, #3
   25e36:	1b51      	subs	r1, r2, r5
   25e38:	290f      	cmp	r1, #15
   25e3a:	ddf2      	ble.n	25e22 <_malloc_r+0x9e>
   25e3c:	4660      	mov	r0, ip
   25e3e:	f8df e2bc 	ldr.w	lr, [pc, #700]	; 260fc <_malloc_r+0x378>
   25e42:	f8d7 c010 	ldr.w	ip, [r7, #16]
   25e46:	45f4      	cmp	ip, lr
   25e48:	f040 80af 	bne.w	25faa <_malloc_r+0x226>
   25e4c:	1083      	asrs	r3, r0, #2
   25e4e:	2401      	movs	r4, #1
   25e50:	687a      	ldr	r2, [r7, #4]
   25e52:	409c      	lsls	r4, r3
   25e54:	4294      	cmp	r4, r2
   25e56:	f240 80d5 	bls.w	26004 <_malloc_r+0x280>
   25e5a:	f8d7 8008 	ldr.w	r8, [r7, #8]
   25e5e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   25e62:	f023 0903 	bic.w	r9, r3, #3
   25e66:	eba9 0205 	sub.w	r2, r9, r5
   25e6a:	2a0f      	cmp	r2, #15
   25e6c:	dd02      	ble.n	25e74 <_malloc_r+0xf0>
   25e6e:	45a9      	cmp	r9, r5
   25e70:	f080 8111 	bcs.w	26096 <_malloc_r+0x312>
   25e74:	4a9b      	ldr	r2, [pc, #620]	; (260e4 <_malloc_r+0x360>)
   25e76:	eb08 0b09 	add.w	fp, r8, r9
   25e7a:	4b9b      	ldr	r3, [pc, #620]	; (260e8 <_malloc_r+0x364>)
   25e7c:	6811      	ldr	r1, [r2, #0]
   25e7e:	681b      	ldr	r3, [r3, #0]
   25e80:	3101      	adds	r1, #1
   25e82:	442b      	add	r3, r5
   25e84:	f000 81d7 	beq.w	26236 <_malloc_r+0x4b2>
   25e88:	f241 010f 	movw	r1, #4111	; 0x100f
   25e8c:	4c97      	ldr	r4, [pc, #604]	; (260ec <_malloc_r+0x368>)
   25e8e:	4419      	add	r1, r3
   25e90:	400c      	ands	r4, r1
   25e92:	4621      	mov	r1, r4
   25e94:	4630      	mov	r0, r6
   25e96:	f000 fd0d 	bl	268b4 <_sbrk_r>
   25e9a:	f1b0 3fff 	cmp.w	r0, #4294967295
   25e9e:	4682      	mov	sl, r0
   25ea0:	4a90      	ldr	r2, [pc, #576]	; (260e4 <_malloc_r+0x360>)
   25ea2:	f000 81b3 	beq.w	2620c <_malloc_r+0x488>
   25ea6:	45b8      	cmp	r8, r7
   25ea8:	d002      	beq.n	25eb0 <_malloc_r+0x12c>
   25eaa:	4583      	cmp	fp, r0
   25eac:	f200 81ae 	bhi.w	2620c <_malloc_r+0x488>
   25eb0:	4b8f      	ldr	r3, [pc, #572]	; (260f0 <_malloc_r+0x36c>)
   25eb2:	45d3      	cmp	fp, sl
   25eb4:	6818      	ldr	r0, [r3, #0]
   25eb6:	4420      	add	r0, r4
   25eb8:	6018      	str	r0, [r3, #0]
   25eba:	f000 81ac 	beq.w	26216 <_malloc_r+0x492>
   25ebe:	6811      	ldr	r1, [r2, #0]
   25ec0:	3101      	adds	r1, #1
   25ec2:	f000 81b5 	beq.w	26230 <_malloc_r+0x4ac>
   25ec6:	ebaa 0b0b 	sub.w	fp, sl, fp
   25eca:	4458      	add	r0, fp
   25ecc:	6018      	str	r0, [r3, #0]
   25ece:	f01a 0207 	ands.w	r2, sl, #7
   25ed2:	f000 81bc 	beq.w	2624e <_malloc_r+0x4ca>
   25ed6:	f1c2 0c08 	rsb	ip, r2, #8
   25eda:	f241 0108 	movw	r1, #4104	; 0x1008
   25ede:	4630      	mov	r0, r6
   25ee0:	9201      	str	r2, [sp, #4]
   25ee2:	44e2      	add	sl, ip
   25ee4:	1a89      	subs	r1, r1, r2
   25ee6:	4454      	add	r4, sl
   25ee8:	1b09      	subs	r1, r1, r4
   25eea:	f3c1 0b0b 	ubfx	fp, r1, #0, #12
   25eee:	4659      	mov	r1, fp
   25ef0:	f000 fce0 	bl	268b4 <_sbrk_r>
   25ef4:	1c42      	adds	r2, r0, #1
   25ef6:	4b7e      	ldr	r3, [pc, #504]	; (260f0 <_malloc_r+0x36c>)
   25ef8:	9a01      	ldr	r2, [sp, #4]
   25efa:	f000 81f2 	beq.w	262e2 <_malloc_r+0x55e>
   25efe:	eba0 000a 	sub.w	r0, r0, sl
   25f02:	eb00 040b 	add.w	r4, r0, fp
   25f06:	6818      	ldr	r0, [r3, #0]
   25f08:	f044 0101 	orr.w	r1, r4, #1
   25f0c:	45b8      	cmp	r8, r7
   25f0e:	f8c7 a008 	str.w	sl, [r7, #8]
   25f12:	4458      	add	r0, fp
   25f14:	f8ca 1004 	str.w	r1, [sl, #4]
   25f18:	6018      	str	r0, [r3, #0]
   25f1a:	f000 81bc 	beq.w	26296 <_malloc_r+0x512>
   25f1e:	f1b9 0f0f 	cmp.w	r9, #15
   25f22:	f240 81ba 	bls.w	2629a <_malloc_r+0x516>
   25f26:	f8d8 2004 	ldr.w	r2, [r8, #4]
   25f2a:	f1a9 010c 	sub.w	r1, r9, #12
   25f2e:	f04f 0c05 	mov.w	ip, #5
   25f32:	f021 0107 	bic.w	r1, r1, #7
   25f36:	f002 0201 	and.w	r2, r2, #1
   25f3a:	eb08 0401 	add.w	r4, r8, r1
   25f3e:	430a      	orrs	r2, r1
   25f40:	290f      	cmp	r1, #15
   25f42:	f8c8 2004 	str.w	r2, [r8, #4]
   25f46:	e9c4 cc01 	strd	ip, ip, [r4, #4]
   25f4a:	f200 81be 	bhi.w	262ca <_malloc_r+0x546>
   25f4e:	f8da 1004 	ldr.w	r1, [sl, #4]
   25f52:	46d0      	mov	r8, sl
   25f54:	4b67      	ldr	r3, [pc, #412]	; (260f4 <_malloc_r+0x370>)
   25f56:	681a      	ldr	r2, [r3, #0]
   25f58:	4282      	cmp	r2, r0
   25f5a:	bf38      	it	cc
   25f5c:	6018      	strcc	r0, [r3, #0]
   25f5e:	4b66      	ldr	r3, [pc, #408]	; (260f8 <_malloc_r+0x374>)
   25f60:	681a      	ldr	r2, [r3, #0]
   25f62:	4282      	cmp	r2, r0
   25f64:	bf38      	it	cc
   25f66:	6018      	strcc	r0, [r3, #0]
   25f68:	f021 0103 	bic.w	r1, r1, #3
   25f6c:	42a9      	cmp	r1, r5
   25f6e:	eba1 0205 	sub.w	r2, r1, r5
   25f72:	d302      	bcc.n	25f7a <_malloc_r+0x1f6>
   25f74:	2a0f      	cmp	r2, #15
   25f76:	f300 808e 	bgt.w	26096 <_malloc_r+0x312>
   25f7a:	4630      	mov	r0, r6
   25f7c:	2400      	movs	r4, #0
   25f7e:	f000 fa91 	bl	264a4 <__malloc_unlock>
   25f82:	e728      	b.n	25dd6 <_malloc_r+0x52>
   25f84:	2400      	movs	r4, #0
   25f86:	230c      	movs	r3, #12
   25f88:	4620      	mov	r0, r4
   25f8a:	6033      	str	r3, [r6, #0]
   25f8c:	b003      	add	sp, #12
   25f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25f92:	68da      	ldr	r2, [r3, #12]
   25f94:	4293      	cmp	r3, r2
   25f96:	f47f af0d 	bne.w	25db4 <_malloc_r+0x30>
   25f9a:	3002      	adds	r0, #2
   25f9c:	f8d7 c010 	ldr.w	ip, [r7, #16]
   25fa0:	f8df e158 	ldr.w	lr, [pc, #344]	; 260fc <_malloc_r+0x378>
   25fa4:	45f4      	cmp	ip, lr
   25fa6:	f43f af51 	beq.w	25e4c <_malloc_r+0xc8>
   25faa:	f8dc 2004 	ldr.w	r2, [ip, #4]
   25fae:	f022 0203 	bic.w	r2, r2, #3
   25fb2:	1b53      	subs	r3, r2, r5
   25fb4:	2b0f      	cmp	r3, #15
   25fb6:	f300 80ee 	bgt.w	26196 <_malloc_r+0x412>
   25fba:	2b00      	cmp	r3, #0
   25fbc:	e9c7 ee04 	strd	lr, lr, [r7, #16]
   25fc0:	da5e      	bge.n	26080 <_malloc_r+0x2fc>
   25fc2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   25fc6:	f080 809b 	bcs.w	26100 <_malloc_r+0x37c>
   25fca:	2301      	movs	r3, #1
   25fcc:	ea4f 08d2 	mov.w	r8, r2, lsr #3
   25fd0:	0952      	lsrs	r2, r2, #5
   25fd2:	6879      	ldr	r1, [r7, #4]
   25fd4:	4498      	add	r8, r3
   25fd6:	fa03 f202 	lsl.w	r2, r3, r2
   25fda:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   25fde:	f857 4038 	ldr.w	r4, [r7, r8, lsl #3]
   25fe2:	430a      	orrs	r2, r1
   25fe4:	3b08      	subs	r3, #8
   25fe6:	f8cc 4008 	str.w	r4, [ip, #8]
   25fea:	607a      	str	r2, [r7, #4]
   25fec:	f8cc 300c 	str.w	r3, [ip, #12]
   25ff0:	f847 c038 	str.w	ip, [r7, r8, lsl #3]
   25ff4:	f8c4 c00c 	str.w	ip, [r4, #12]
   25ff8:	1083      	asrs	r3, r0, #2
   25ffa:	2401      	movs	r4, #1
   25ffc:	409c      	lsls	r4, r3
   25ffe:	4294      	cmp	r4, r2
   26000:	f63f af2b 	bhi.w	25e5a <_malloc_r+0xd6>
   26004:	4214      	tst	r4, r2
   26006:	d105      	bne.n	26014 <_malloc_r+0x290>
   26008:	f020 0003 	bic.w	r0, r0, #3
   2600c:	0064      	lsls	r4, r4, #1
   2600e:	3004      	adds	r0, #4
   26010:	4214      	tst	r4, r2
   26012:	d0fb      	beq.n	2600c <_malloc_r+0x288>
   26014:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   26018:	4680      	mov	r8, r0
   2601a:	46cc      	mov	ip, r9
   2601c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   26020:	459c      	cmp	ip, r3
   26022:	d107      	bne.n	26034 <_malloc_r+0x2b0>
   26024:	e09b      	b.n	2615e <_malloc_r+0x3da>
   26026:	2a00      	cmp	r2, #0
   26028:	f280 80a2 	bge.w	26170 <_malloc_r+0x3ec>
   2602c:	68db      	ldr	r3, [r3, #12]
   2602e:	459c      	cmp	ip, r3
   26030:	f000 8095 	beq.w	2615e <_malloc_r+0x3da>
   26034:	6859      	ldr	r1, [r3, #4]
   26036:	f021 0103 	bic.w	r1, r1, #3
   2603a:	1b4a      	subs	r2, r1, r5
   2603c:	2a0f      	cmp	r2, #15
   2603e:	ddf2      	ble.n	26026 <_malloc_r+0x2a2>
   26040:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   26044:	f045 0401 	orr.w	r4, r5, #1
   26048:	f042 0801 	orr.w	r8, r2, #1
   2604c:	441d      	add	r5, r3
   2604e:	4630      	mov	r0, r6
   26050:	689e      	ldr	r6, [r3, #8]
   26052:	605c      	str	r4, [r3, #4]
   26054:	f103 0408 	add.w	r4, r3, #8
   26058:	f8c6 c00c 	str.w	ip, [r6, #12]
   2605c:	f8cc 6008 	str.w	r6, [ip, #8]
   26060:	e9c7 5504 	strd	r5, r5, [r7, #16]
   26064:	e9c5 ee02 	strd	lr, lr, [r5, #8]
   26068:	f8c5 8004 	str.w	r8, [r5, #4]
   2606c:	505a      	str	r2, [r3, r1]
   2606e:	f000 fa19 	bl	264a4 <__malloc_unlock>
   26072:	e6b0      	b.n	25dd6 <_malloc_r+0x52>
   26074:	f44f 7300 	mov.w	r3, #512	; 0x200
   26078:	2040      	movs	r0, #64	; 0x40
   2607a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   2607e:	e6c8      	b.n	25e12 <_malloc_r+0x8e>
   26080:	4462      	add	r2, ip
   26082:	4630      	mov	r0, r6
   26084:	f10c 0408 	add.w	r4, ip, #8
   26088:	6853      	ldr	r3, [r2, #4]
   2608a:	f043 0301 	orr.w	r3, r3, #1
   2608e:	6053      	str	r3, [r2, #4]
   26090:	f000 fa08 	bl	264a4 <__malloc_unlock>
   26094:	e69f      	b.n	25dd6 <_malloc_r+0x52>
   26096:	f045 0301 	orr.w	r3, r5, #1
   2609a:	f042 0201 	orr.w	r2, r2, #1
   2609e:	4445      	add	r5, r8
   260a0:	f108 0408 	add.w	r4, r8, #8
   260a4:	f8c8 3004 	str.w	r3, [r8, #4]
   260a8:	4630      	mov	r0, r6
   260aa:	60bd      	str	r5, [r7, #8]
   260ac:	606a      	str	r2, [r5, #4]
   260ae:	f000 f9f9 	bl	264a4 <__malloc_unlock>
   260b2:	4620      	mov	r0, r4
   260b4:	b003      	add	sp, #12
   260b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   260ba:	441a      	add	r2, r3
   260bc:	f103 0408 	add.w	r4, r3, #8
   260c0:	4630      	mov	r0, r6
   260c2:	6851      	ldr	r1, [r2, #4]
   260c4:	e9d3 7502 	ldrd	r7, r5, [r3, #8]
   260c8:	f041 0101 	orr.w	r1, r1, #1
   260cc:	60fd      	str	r5, [r7, #12]
   260ce:	60af      	str	r7, [r5, #8]
   260d0:	6051      	str	r1, [r2, #4]
   260d2:	f000 f9e7 	bl	264a4 <__malloc_unlock>
   260d6:	4620      	mov	r0, r4
   260d8:	b003      	add	sp, #12
   260da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   260de:	bf00      	nop
   260e0:	200204dc 	.word	0x200204dc
   260e4:	200208e4 	.word	0x200208e4
   260e8:	200242a8 	.word	0x200242a8
   260ec:	fffff000 	.word	0xfffff000
   260f0:	20024278 	.word	0x20024278
   260f4:	200242a0 	.word	0x200242a0
   260f8:	200242a4 	.word	0x200242a4
   260fc:	200204e4 	.word	0x200204e4
   26100:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   26104:	ea4f 2352 	mov.w	r3, r2, lsr #9
   26108:	d359      	bcc.n	261be <_malloc_r+0x43a>
   2610a:	2b14      	cmp	r3, #20
   2610c:	f200 80b1 	bhi.w	26272 <_malloc_r+0x4ee>
   26110:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   26114:	335b      	adds	r3, #91	; 0x5b
   26116:	00c9      	lsls	r1, r1, #3
   26118:	187c      	adds	r4, r7, r1
   2611a:	5879      	ldr	r1, [r7, r1]
   2611c:	3c08      	subs	r4, #8
   2611e:	428c      	cmp	r4, r1
   26120:	f000 808c 	beq.w	2623c <_malloc_r+0x4b8>
   26124:	684b      	ldr	r3, [r1, #4]
   26126:	f023 0303 	bic.w	r3, r3, #3
   2612a:	4293      	cmp	r3, r2
   2612c:	d902      	bls.n	26134 <_malloc_r+0x3b0>
   2612e:	6889      	ldr	r1, [r1, #8]
   26130:	428c      	cmp	r4, r1
   26132:	d1f7      	bne.n	26124 <_malloc_r+0x3a0>
   26134:	68cc      	ldr	r4, [r1, #12]
   26136:	687a      	ldr	r2, [r7, #4]
   26138:	e9cc 1402 	strd	r1, r4, [ip, #8]
   2613c:	f8c4 c008 	str.w	ip, [r4, #8]
   26140:	f8c1 c00c 	str.w	ip, [r1, #12]
   26144:	e758      	b.n	25ff8 <_malloc_r+0x274>
   26146:	2b14      	cmp	r3, #20
   26148:	d93f      	bls.n	261ca <_malloc_r+0x446>
   2614a:	2b54      	cmp	r3, #84	; 0x54
   2614c:	f200 8099 	bhi.w	26282 <_malloc_r+0x4fe>
   26150:	0b2b      	lsrs	r3, r5, #12
   26152:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   26156:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   2615a:	00c3      	lsls	r3, r0, #3
   2615c:	e659      	b.n	25e12 <_malloc_r+0x8e>
   2615e:	f108 0801 	add.w	r8, r8, #1
   26162:	f10c 0c08 	add.w	ip, ip, #8
   26166:	f018 0f03 	tst.w	r8, #3
   2616a:	f47f af57 	bne.w	2601c <_malloc_r+0x298>
   2616e:	e037      	b.n	261e0 <_malloc_r+0x45c>
   26170:	4419      	add	r1, r3
   26172:	68da      	ldr	r2, [r3, #12]
   26174:	461c      	mov	r4, r3
   26176:	4630      	mov	r0, r6
   26178:	684b      	ldr	r3, [r1, #4]
   2617a:	f854 5f08 	ldr.w	r5, [r4, #8]!
   2617e:	f043 0301 	orr.w	r3, r3, #1
   26182:	604b      	str	r3, [r1, #4]
   26184:	60ea      	str	r2, [r5, #12]
   26186:	6095      	str	r5, [r2, #8]
   26188:	f000 f98c 	bl	264a4 <__malloc_unlock>
   2618c:	e623      	b.n	25dd6 <_malloc_r+0x52>
   2618e:	08e8      	lsrs	r0, r5, #3
   26190:	f105 0308 	add.w	r3, r5, #8
   26194:	e606      	b.n	25da4 <_malloc_r+0x20>
   26196:	f045 0401 	orr.w	r4, r5, #1
   2619a:	f043 0101 	orr.w	r1, r3, #1
   2619e:	4465      	add	r5, ip
   261a0:	4630      	mov	r0, r6
   261a2:	f8cc 4004 	str.w	r4, [ip, #4]
   261a6:	f10c 0408 	add.w	r4, ip, #8
   261aa:	e9c7 5504 	strd	r5, r5, [r7, #16]
   261ae:	e9c5 ee02 	strd	lr, lr, [r5, #8]
   261b2:	6069      	str	r1, [r5, #4]
   261b4:	f84c 3002 	str.w	r3, [ip, r2]
   261b8:	f000 f974 	bl	264a4 <__malloc_unlock>
   261bc:	e60b      	b.n	25dd6 <_malloc_r+0x52>
   261be:	0993      	lsrs	r3, r2, #6
   261c0:	f103 0139 	add.w	r1, r3, #57	; 0x39
   261c4:	3338      	adds	r3, #56	; 0x38
   261c6:	00c9      	lsls	r1, r1, #3
   261c8:	e7a6      	b.n	26118 <_malloc_r+0x394>
   261ca:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   261ce:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   261d2:	00c3      	lsls	r3, r0, #3
   261d4:	e61d      	b.n	25e12 <_malloc_r+0x8e>
   261d6:	f859 3908 	ldr.w	r3, [r9], #-8
   261da:	454b      	cmp	r3, r9
   261dc:	f040 809c 	bne.w	26318 <_malloc_r+0x594>
   261e0:	f010 0f03 	tst.w	r0, #3
   261e4:	f100 30ff 	add.w	r0, r0, #4294967295
   261e8:	d1f5      	bne.n	261d6 <_malloc_r+0x452>
   261ea:	687b      	ldr	r3, [r7, #4]
   261ec:	ea23 0304 	bic.w	r3, r3, r4
   261f0:	607b      	str	r3, [r7, #4]
   261f2:	0064      	lsls	r4, r4, #1
   261f4:	f43f ae31 	beq.w	25e5a <_malloc_r+0xd6>
   261f8:	429c      	cmp	r4, r3
   261fa:	d903      	bls.n	26204 <_malloc_r+0x480>
   261fc:	e62d      	b.n	25e5a <_malloc_r+0xd6>
   261fe:	0064      	lsls	r4, r4, #1
   26200:	f108 0804 	add.w	r8, r8, #4
   26204:	421c      	tst	r4, r3
   26206:	d0fa      	beq.n	261fe <_malloc_r+0x47a>
   26208:	4640      	mov	r0, r8
   2620a:	e703      	b.n	26014 <_malloc_r+0x290>
   2620c:	f8d7 8008 	ldr.w	r8, [r7, #8]
   26210:	f8d8 1004 	ldr.w	r1, [r8, #4]
   26214:	e6a8      	b.n	25f68 <_malloc_r+0x1e4>
   26216:	f3cb 010b 	ubfx	r1, fp, #0, #12
   2621a:	2900      	cmp	r1, #0
   2621c:	f47f ae4f 	bne.w	25ebe <_malloc_r+0x13a>
   26220:	444c      	add	r4, r9
   26222:	f8d7 8008 	ldr.w	r8, [r7, #8]
   26226:	f044 0101 	orr.w	r1, r4, #1
   2622a:	f8c8 1004 	str.w	r1, [r8, #4]
   2622e:	e691      	b.n	25f54 <_malloc_r+0x1d0>
   26230:	f8c2 a000 	str.w	sl, [r2]
   26234:	e64b      	b.n	25ece <_malloc_r+0x14a>
   26236:	f103 0410 	add.w	r4, r3, #16
   2623a:	e62a      	b.n	25e92 <_malloc_r+0x10e>
   2623c:	109a      	asrs	r2, r3, #2
   2623e:	f04f 0801 	mov.w	r8, #1
   26242:	687b      	ldr	r3, [r7, #4]
   26244:	fa08 f202 	lsl.w	r2, r8, r2
   26248:	431a      	orrs	r2, r3
   2624a:	607a      	str	r2, [r7, #4]
   2624c:	e774      	b.n	26138 <_malloc_r+0x3b4>
   2624e:	eb0a 0b04 	add.w	fp, sl, r4
   26252:	4630      	mov	r0, r6
   26254:	9201      	str	r2, [sp, #4]
   26256:	f1cb 0b00 	rsb	fp, fp, #0
   2625a:	f3cb 0b0b 	ubfx	fp, fp, #0, #12
   2625e:	4659      	mov	r1, fp
   26260:	f000 fb28 	bl	268b4 <_sbrk_r>
   26264:	1c43      	adds	r3, r0, #1
   26266:	9a01      	ldr	r2, [sp, #4]
   26268:	4b2c      	ldr	r3, [pc, #176]	; (2631c <_malloc_r+0x598>)
   2626a:	f47f ae48 	bne.w	25efe <_malloc_r+0x17a>
   2626e:	4693      	mov	fp, r2
   26270:	e649      	b.n	25f06 <_malloc_r+0x182>
   26272:	2b54      	cmp	r3, #84	; 0x54
   26274:	d815      	bhi.n	262a2 <_malloc_r+0x51e>
   26276:	0b13      	lsrs	r3, r2, #12
   26278:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   2627c:	336e      	adds	r3, #110	; 0x6e
   2627e:	00c9      	lsls	r1, r1, #3
   26280:	e74a      	b.n	26118 <_malloc_r+0x394>
   26282:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   26286:	d815      	bhi.n	262b4 <_malloc_r+0x530>
   26288:	0beb      	lsrs	r3, r5, #15
   2628a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   2628e:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   26292:	00c3      	lsls	r3, r0, #3
   26294:	e5bd      	b.n	25e12 <_malloc_r+0x8e>
   26296:	46d0      	mov	r8, sl
   26298:	e65c      	b.n	25f54 <_malloc_r+0x1d0>
   2629a:	2301      	movs	r3, #1
   2629c:	f8ca 3004 	str.w	r3, [sl, #4]
   262a0:	e66b      	b.n	25f7a <_malloc_r+0x1f6>
   262a2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   262a6:	d823      	bhi.n	262f0 <_malloc_r+0x56c>
   262a8:	0bd3      	lsrs	r3, r2, #15
   262aa:	f103 0178 	add.w	r1, r3, #120	; 0x78
   262ae:	3377      	adds	r3, #119	; 0x77
   262b0:	00c9      	lsls	r1, r1, #3
   262b2:	e731      	b.n	26118 <_malloc_r+0x394>
   262b4:	f240 5254 	movw	r2, #1364	; 0x554
   262b8:	4293      	cmp	r3, r2
   262ba:	d823      	bhi.n	26304 <_malloc_r+0x580>
   262bc:	0cab      	lsrs	r3, r5, #18
   262be:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   262c2:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   262c6:	00c3      	lsls	r3, r0, #3
   262c8:	e5a3      	b.n	25e12 <_malloc_r+0x8e>
   262ca:	f108 0108 	add.w	r1, r8, #8
   262ce:	4630      	mov	r0, r6
   262d0:	f003 fec2 	bl	2a058 <_free_r>
   262d4:	f8d7 8008 	ldr.w	r8, [r7, #8]
   262d8:	4b10      	ldr	r3, [pc, #64]	; (2631c <_malloc_r+0x598>)
   262da:	f8d8 1004 	ldr.w	r1, [r8, #4]
   262de:	6818      	ldr	r0, [r3, #0]
   262e0:	e638      	b.n	25f54 <_malloc_r+0x1d0>
   262e2:	3a08      	subs	r2, #8
   262e4:	f04f 0b00 	mov.w	fp, #0
   262e8:	4414      	add	r4, r2
   262ea:	eba4 040a 	sub.w	r4, r4, sl
   262ee:	e60a      	b.n	25f06 <_malloc_r+0x182>
   262f0:	f240 5154 	movw	r1, #1364	; 0x554
   262f4:	428b      	cmp	r3, r1
   262f6:	d80b      	bhi.n	26310 <_malloc_r+0x58c>
   262f8:	0c93      	lsrs	r3, r2, #18
   262fa:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   262fe:	337c      	adds	r3, #124	; 0x7c
   26300:	00c9      	lsls	r1, r1, #3
   26302:	e709      	b.n	26118 <_malloc_r+0x394>
   26304:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   26308:	207f      	movs	r0, #127	; 0x7f
   2630a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   2630e:	e580      	b.n	25e12 <_malloc_r+0x8e>
   26310:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   26314:	237e      	movs	r3, #126	; 0x7e
   26316:	e6ff      	b.n	26118 <_malloc_r+0x394>
   26318:	687b      	ldr	r3, [r7, #4]
   2631a:	e76a      	b.n	261f2 <_malloc_r+0x46e>
   2631c:	20024278 	.word	0x20024278

00026320 <memchr>:
   26320:	b470      	push	{r4, r5, r6}
   26322:	0784      	lsls	r4, r0, #30
   26324:	b2ce      	uxtb	r6, r1
   26326:	d012      	beq.n	2634e <memchr+0x2e>
   26328:	4603      	mov	r3, r0
   2632a:	1e55      	subs	r5, r2, #1
   2632c:	b922      	cbnz	r2, 26338 <memchr+0x18>
   2632e:	e00b      	b.n	26348 <memchr+0x28>
   26330:	079a      	lsls	r2, r3, #30
   26332:	d00e      	beq.n	26352 <memchr+0x32>
   26334:	3d01      	subs	r5, #1
   26336:	d307      	bcc.n	26348 <memchr+0x28>
   26338:	4618      	mov	r0, r3
   2633a:	f813 2b01 	ldrb.w	r2, [r3], #1
   2633e:	42b2      	cmp	r2, r6
   26340:	461c      	mov	r4, r3
   26342:	d1f5      	bne.n	26330 <memchr+0x10>
   26344:	bc70      	pop	{r4, r5, r6}
   26346:	4770      	bx	lr
   26348:	2000      	movs	r0, #0
   2634a:	bc70      	pop	{r4, r5, r6}
   2634c:	4770      	bx	lr
   2634e:	4604      	mov	r4, r0
   26350:	4615      	mov	r5, r2
   26352:	2d03      	cmp	r5, #3
   26354:	d80c      	bhi.n	26370 <memchr+0x50>
   26356:	2d00      	cmp	r5, #0
   26358:	d0f6      	beq.n	26348 <memchr+0x28>
   2635a:	1963      	adds	r3, r4, r5
   2635c:	e001      	b.n	26362 <memchr+0x42>
   2635e:	429c      	cmp	r4, r3
   26360:	d0f2      	beq.n	26348 <memchr+0x28>
   26362:	4620      	mov	r0, r4
   26364:	f814 2b01 	ldrb.w	r2, [r4], #1
   26368:	42b2      	cmp	r2, r6
   2636a:	d1f8      	bne.n	2635e <memchr+0x3e>
   2636c:	bc70      	pop	{r4, r5, r6}
   2636e:	4770      	bx	lr
   26370:	020a      	lsls	r2, r1, #8
   26372:	4621      	mov	r1, r4
   26374:	b292      	uxth	r2, r2
   26376:	4332      	orrs	r2, r6
   26378:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   2637c:	460c      	mov	r4, r1
   2637e:	3104      	adds	r1, #4
   26380:	6823      	ldr	r3, [r4, #0]
   26382:	4053      	eors	r3, r2
   26384:	f1a3 3001 	sub.w	r0, r3, #16843009	; 0x1010101
   26388:	ea20 0303 	bic.w	r3, r0, r3
   2638c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   26390:	d1e3      	bne.n	2635a <memchr+0x3a>
   26392:	3d04      	subs	r5, #4
   26394:	460c      	mov	r4, r1
   26396:	2d03      	cmp	r5, #3
   26398:	d8f0      	bhi.n	2637c <memchr+0x5c>
   2639a:	e7dc      	b.n	26356 <memchr+0x36>

0002639c <memcmp>:
   2639c:	2a03      	cmp	r2, #3
   2639e:	b470      	push	{r4, r5, r6}
   263a0:	d912      	bls.n	263c8 <memcmp+0x2c>
   263a2:	ea40 0501 	orr.w	r5, r0, r1
   263a6:	4604      	mov	r4, r0
   263a8:	460b      	mov	r3, r1
   263aa:	07ad      	lsls	r5, r5, #30
   263ac:	d11d      	bne.n	263ea <memcmp+0x4e>
   263ae:	4619      	mov	r1, r3
   263b0:	4620      	mov	r0, r4
   263b2:	f853 5b04 	ldr.w	r5, [r3], #4
   263b6:	f854 6b04 	ldr.w	r6, [r4], #4
   263ba:	42ae      	cmp	r6, r5
   263bc:	d115      	bne.n	263ea <memcmp+0x4e>
   263be:	3a04      	subs	r2, #4
   263c0:	4620      	mov	r0, r4
   263c2:	4619      	mov	r1, r3
   263c4:	2a03      	cmp	r2, #3
   263c6:	d8f2      	bhi.n	263ae <memcmp+0x12>
   263c8:	1e56      	subs	r6, r2, #1
   263ca:	b19a      	cbz	r2, 263f4 <memcmp+0x58>
   263cc:	3901      	subs	r1, #1
   263ce:	1e44      	subs	r4, r0, #1
   263d0:	e001      	b.n	263d6 <memcmp+0x3a>
   263d2:	18c3      	adds	r3, r0, r3
   263d4:	d00b      	beq.n	263ee <memcmp+0x52>
   263d6:	f814 5f01 	ldrb.w	r5, [r4, #1]!
   263da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   263de:	1b33      	subs	r3, r6, r4
   263e0:	4295      	cmp	r5, r2
   263e2:	d0f6      	beq.n	263d2 <memcmp+0x36>
   263e4:	1aa8      	subs	r0, r5, r2
   263e6:	bc70      	pop	{r4, r5, r6}
   263e8:	4770      	bx	lr
   263ea:	1e56      	subs	r6, r2, #1
   263ec:	e7ee      	b.n	263cc <memcmp+0x30>
   263ee:	4618      	mov	r0, r3
   263f0:	bc70      	pop	{r4, r5, r6}
   263f2:	4770      	bx	lr
   263f4:	4610      	mov	r0, r2
   263f6:	e7f6      	b.n	263e6 <memcmp+0x4a>

000263f8 <memset>:
   263f8:	b4f0      	push	{r4, r5, r6, r7}
   263fa:	0786      	lsls	r6, r0, #30
   263fc:	d046      	beq.n	2648c <memset+0x94>
   263fe:	1e54      	subs	r4, r2, #1
   26400:	2a00      	cmp	r2, #0
   26402:	d03c      	beq.n	2647e <memset+0x86>
   26404:	b2ca      	uxtb	r2, r1
   26406:	4603      	mov	r3, r0
   26408:	e001      	b.n	2640e <memset+0x16>
   2640a:	3c01      	subs	r4, #1
   2640c:	d337      	bcc.n	2647e <memset+0x86>
   2640e:	f803 2b01 	strb.w	r2, [r3], #1
   26412:	079d      	lsls	r5, r3, #30
   26414:	d1f9      	bne.n	2640a <memset+0x12>
   26416:	2c03      	cmp	r4, #3
   26418:	d92a      	bls.n	26470 <memset+0x78>
   2641a:	b2cd      	uxtb	r5, r1
   2641c:	2c0f      	cmp	r4, #15
   2641e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   26422:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   26426:	d934      	bls.n	26492 <memset+0x9a>
   26428:	f1a4 0610 	sub.w	r6, r4, #16
   2642c:	f103 0720 	add.w	r7, r3, #32
   26430:	f103 0210 	add.w	r2, r3, #16
   26434:	f026 0c0f 	bic.w	ip, r6, #15
   26438:	0936      	lsrs	r6, r6, #4
   2643a:	4467      	add	r7, ip
   2643c:	e942 5504 	strd	r5, r5, [r2, #-16]
   26440:	e942 5502 	strd	r5, r5, [r2, #-8]
   26444:	3210      	adds	r2, #16
   26446:	42ba      	cmp	r2, r7
   26448:	d1f8      	bne.n	2643c <memset+0x44>
   2644a:	1c72      	adds	r2, r6, #1
   2644c:	f014 0f0c 	tst.w	r4, #12
   26450:	f004 060f 	and.w	r6, r4, #15
   26454:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   26458:	d013      	beq.n	26482 <memset+0x8a>
   2645a:	1f33      	subs	r3, r6, #4
   2645c:	f023 0303 	bic.w	r3, r3, #3
   26460:	3304      	adds	r3, #4
   26462:	4413      	add	r3, r2
   26464:	f842 5b04 	str.w	r5, [r2], #4
   26468:	4293      	cmp	r3, r2
   2646a:	d1fb      	bne.n	26464 <memset+0x6c>
   2646c:	f006 0403 	and.w	r4, r6, #3
   26470:	b12c      	cbz	r4, 2647e <memset+0x86>
   26472:	b2ca      	uxtb	r2, r1
   26474:	441c      	add	r4, r3
   26476:	f803 2b01 	strb.w	r2, [r3], #1
   2647a:	429c      	cmp	r4, r3
   2647c:	d1fb      	bne.n	26476 <memset+0x7e>
   2647e:	bcf0      	pop	{r4, r5, r6, r7}
   26480:	4770      	bx	lr
   26482:	4634      	mov	r4, r6
   26484:	4613      	mov	r3, r2
   26486:	2c00      	cmp	r4, #0
   26488:	d1f3      	bne.n	26472 <memset+0x7a>
   2648a:	e7f8      	b.n	2647e <memset+0x86>
   2648c:	4614      	mov	r4, r2
   2648e:	4603      	mov	r3, r0
   26490:	e7c1      	b.n	26416 <memset+0x1e>
   26492:	461a      	mov	r2, r3
   26494:	4626      	mov	r6, r4
   26496:	e7e0      	b.n	2645a <memset+0x62>

00026498 <__malloc_lock>:
   26498:	4801      	ldr	r0, [pc, #4]	; (264a0 <__malloc_lock+0x8>)
   2649a:	f004 bc83 	b.w	2ada4 <__retarget_lock_acquire_recursive>
   2649e:	bf00      	nop
   264a0:	2002641c 	.word	0x2002641c

000264a4 <__malloc_unlock>:
   264a4:	4801      	ldr	r0, [pc, #4]	; (264ac <__malloc_unlock+0x8>)
   264a6:	f004 bc7f 	b.w	2ada8 <__retarget_lock_release_recursive>
   264aa:	bf00      	nop
   264ac:	2002641c 	.word	0x2002641c

000264b0 <realloc>:
   264b0:	4b02      	ldr	r3, [pc, #8]	; (264bc <realloc+0xc>)
   264b2:	460a      	mov	r2, r1
   264b4:	4601      	mov	r1, r0
   264b6:	6818      	ldr	r0, [r3, #0]
   264b8:	f000 b802 	b.w	264c0 <_realloc_r>
   264bc:	200204d8 	.word	0x200204d8

000264c0 <_realloc_r>:
   264c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   264c4:	4617      	mov	r7, r2
   264c6:	2900      	cmp	r1, #0
   264c8:	f000 80ba 	beq.w	26640 <_realloc_r+0x180>
   264cc:	460c      	mov	r4, r1
   264ce:	f107 050b 	add.w	r5, r7, #11
   264d2:	4680      	mov	r8, r0
   264d4:	f7ff ffe0 	bl	26498 <__malloc_lock>
   264d8:	f854 1c04 	ldr.w	r1, [r4, #-4]
   264dc:	2d16      	cmp	r5, #22
   264de:	f1a4 0908 	sub.w	r9, r4, #8
   264e2:	f021 0603 	bic.w	r6, r1, #3
   264e6:	d85d      	bhi.n	265a4 <_realloc_r+0xe4>
   264e8:	2210      	movs	r2, #16
   264ea:	2300      	movs	r3, #0
   264ec:	4615      	mov	r5, r2
   264ee:	42bd      	cmp	r5, r7
   264f0:	f0c0 80c2 	bcc.w	26678 <_realloc_r+0x1b8>
   264f4:	2b00      	cmp	r3, #0
   264f6:	f040 80bf 	bne.w	26678 <_realloc_r+0x1b8>
   264fa:	4296      	cmp	r6, r2
   264fc:	da7e      	bge.n	265fc <_realloc_r+0x13c>
   264fe:	4bc6      	ldr	r3, [pc, #792]	; (26818 <_realloc_r+0x358>)
   26500:	eb09 0006 	add.w	r0, r9, r6
   26504:	f8d3 c008 	ldr.w	ip, [r3, #8]
   26508:	4584      	cmp	ip, r0
   2650a:	f000 80bc 	beq.w	26686 <_realloc_r+0x1c6>
   2650e:	f8d0 c004 	ldr.w	ip, [r0, #4]
   26512:	f02c 0301 	bic.w	r3, ip, #1
   26516:	4403      	add	r3, r0
   26518:	685b      	ldr	r3, [r3, #4]
   2651a:	07db      	lsls	r3, r3, #31
   2651c:	f100 8085 	bmi.w	2662a <_realloc_r+0x16a>
   26520:	f02c 0c03 	bic.w	ip, ip, #3
   26524:	eb06 030c 	add.w	r3, r6, ip
   26528:	4293      	cmp	r3, r2
   2652a:	f280 80fa 	bge.w	26722 <_realloc_r+0x262>
   2652e:	07cb      	lsls	r3, r1, #31
   26530:	d40f      	bmi.n	26552 <_realloc_r+0x92>
   26532:	f854 3c08 	ldr.w	r3, [r4, #-8]
   26536:	eba9 0a03 	sub.w	sl, r9, r3
   2653a:	f8da 3004 	ldr.w	r3, [sl, #4]
   2653e:	f023 0103 	bic.w	r1, r3, #3
   26542:	448c      	add	ip, r1
   26544:	44b4      	add	ip, r6
   26546:	4594      	cmp	ip, r2
   26548:	da31      	bge.n	265ae <_realloc_r+0xee>
   2654a:	1873      	adds	r3, r6, r1
   2654c:	4293      	cmp	r3, r2
   2654e:	f280 80ff 	bge.w	26750 <_realloc_r+0x290>
   26552:	4639      	mov	r1, r7
   26554:	4640      	mov	r0, r8
   26556:	f7ff fc15 	bl	25d84 <_malloc_r>
   2655a:	4607      	mov	r7, r0
   2655c:	b1e0      	cbz	r0, 26598 <_realloc_r+0xd8>
   2655e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   26562:	f1a0 0208 	sub.w	r2, r0, #8
   26566:	f023 0301 	bic.w	r3, r3, #1
   2656a:	444b      	add	r3, r9
   2656c:	4293      	cmp	r3, r2
   2656e:	f000 80de 	beq.w	2672e <_realloc_r+0x26e>
   26572:	1f32      	subs	r2, r6, #4
   26574:	2a24      	cmp	r2, #36	; 0x24
   26576:	f200 810c 	bhi.w	26792 <_realloc_r+0x2d2>
   2657a:	2a13      	cmp	r2, #19
   2657c:	f200 80dd 	bhi.w	2673a <_realloc_r+0x27a>
   26580:	4603      	mov	r3, r0
   26582:	4622      	mov	r2, r4
   26584:	6811      	ldr	r1, [r2, #0]
   26586:	6019      	str	r1, [r3, #0]
   26588:	6851      	ldr	r1, [r2, #4]
   2658a:	6059      	str	r1, [r3, #4]
   2658c:	6892      	ldr	r2, [r2, #8]
   2658e:	609a      	str	r2, [r3, #8]
   26590:	4621      	mov	r1, r4
   26592:	4640      	mov	r0, r8
   26594:	f003 fd60 	bl	2a058 <_free_r>
   26598:	4640      	mov	r0, r8
   2659a:	f7ff ff83 	bl	264a4 <__malloc_unlock>
   2659e:	4638      	mov	r0, r7
   265a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   265a4:	f025 0507 	bic.w	r5, r5, #7
   265a8:	462a      	mov	r2, r5
   265aa:	0feb      	lsrs	r3, r5, #31
   265ac:	e79f      	b.n	264ee <_realloc_r+0x2e>
   265ae:	68c3      	ldr	r3, [r0, #12]
   265b0:	4657      	mov	r7, sl
   265b2:	6881      	ldr	r1, [r0, #8]
   265b4:	1f32      	subs	r2, r6, #4
   265b6:	60cb      	str	r3, [r1, #12]
   265b8:	2a24      	cmp	r2, #36	; 0x24
   265ba:	6099      	str	r1, [r3, #8]
   265bc:	f857 1f08 	ldr.w	r1, [r7, #8]!
   265c0:	f8da 300c 	ldr.w	r3, [sl, #12]
   265c4:	60cb      	str	r3, [r1, #12]
   265c6:	6099      	str	r1, [r3, #8]
   265c8:	f200 8112 	bhi.w	267f0 <_realloc_r+0x330>
   265cc:	2a13      	cmp	r2, #19
   265ce:	f240 810d 	bls.w	267ec <_realloc_r+0x32c>
   265d2:	6823      	ldr	r3, [r4, #0]
   265d4:	2a1b      	cmp	r2, #27
   265d6:	f8ca 3008 	str.w	r3, [sl, #8]
   265da:	6863      	ldr	r3, [r4, #4]
   265dc:	f8ca 300c 	str.w	r3, [sl, #12]
   265e0:	f200 8125 	bhi.w	2682e <_realloc_r+0x36e>
   265e4:	3408      	adds	r4, #8
   265e6:	f10a 0310 	add.w	r3, sl, #16
   265ea:	6822      	ldr	r2, [r4, #0]
   265ec:	4666      	mov	r6, ip
   265ee:	46d1      	mov	r9, sl
   265f0:	601a      	str	r2, [r3, #0]
   265f2:	6862      	ldr	r2, [r4, #4]
   265f4:	605a      	str	r2, [r3, #4]
   265f6:	68a2      	ldr	r2, [r4, #8]
   265f8:	463c      	mov	r4, r7
   265fa:	609a      	str	r2, [r3, #8]
   265fc:	1b73      	subs	r3, r6, r5
   265fe:	2b0f      	cmp	r3, #15
   26600:	d823      	bhi.n	2664a <_realloc_r+0x18a>
   26602:	f8d9 2004 	ldr.w	r2, [r9, #4]
   26606:	eb09 0106 	add.w	r1, r9, r6
   2660a:	f002 0201 	and.w	r2, r2, #1
   2660e:	4332      	orrs	r2, r6
   26610:	f8c9 2004 	str.w	r2, [r9, #4]
   26614:	684b      	ldr	r3, [r1, #4]
   26616:	f043 0301 	orr.w	r3, r3, #1
   2661a:	604b      	str	r3, [r1, #4]
   2661c:	4640      	mov	r0, r8
   2661e:	4627      	mov	r7, r4
   26620:	f7ff ff40 	bl	264a4 <__malloc_unlock>
   26624:	4638      	mov	r0, r7
   26626:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2662a:	07c9      	lsls	r1, r1, #31
   2662c:	d491      	bmi.n	26552 <_realloc_r+0x92>
   2662e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   26632:	eba9 0a03 	sub.w	sl, r9, r3
   26636:	f8da 1004 	ldr.w	r1, [sl, #4]
   2663a:	f021 0103 	bic.w	r1, r1, #3
   2663e:	e784      	b.n	2654a <_realloc_r+0x8a>
   26640:	4611      	mov	r1, r2
   26642:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26646:	f7ff bb9d 	b.w	25d84 <_malloc_r>
   2664a:	f8d9 1004 	ldr.w	r1, [r9, #4]
   2664e:	eb09 0205 	add.w	r2, r9, r5
   26652:	444e      	add	r6, r9
   26654:	f043 0301 	orr.w	r3, r3, #1
   26658:	f001 0101 	and.w	r1, r1, #1
   2665c:	4640      	mov	r0, r8
   2665e:	430d      	orrs	r5, r1
   26660:	f102 0108 	add.w	r1, r2, #8
   26664:	f8c9 5004 	str.w	r5, [r9, #4]
   26668:	6053      	str	r3, [r2, #4]
   2666a:	6873      	ldr	r3, [r6, #4]
   2666c:	f043 0301 	orr.w	r3, r3, #1
   26670:	6073      	str	r3, [r6, #4]
   26672:	f003 fcf1 	bl	2a058 <_free_r>
   26676:	e7d1      	b.n	2661c <_realloc_r+0x15c>
   26678:	230c      	movs	r3, #12
   2667a:	2700      	movs	r7, #0
   2667c:	f8c8 3000 	str.w	r3, [r8]
   26680:	4638      	mov	r0, r7
   26682:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26686:	f8dc b004 	ldr.w	fp, [ip, #4]
   2668a:	f105 0010 	add.w	r0, r5, #16
   2668e:	f02b 0b03 	bic.w	fp, fp, #3
   26692:	eb06 0c0b 	add.w	ip, r6, fp
   26696:	4584      	cmp	ip, r0
   26698:	f280 8094 	bge.w	267c4 <_realloc_r+0x304>
   2669c:	07c9      	lsls	r1, r1, #31
   2669e:	f53f af58 	bmi.w	26552 <_realloc_r+0x92>
   266a2:	f854 1c08 	ldr.w	r1, [r4, #-8]
   266a6:	eba9 0a01 	sub.w	sl, r9, r1
   266aa:	f8da 1004 	ldr.w	r1, [sl, #4]
   266ae:	f021 0103 	bic.w	r1, r1, #3
   266b2:	448b      	add	fp, r1
   266b4:	44b3      	add	fp, r6
   266b6:	4558      	cmp	r0, fp
   266b8:	f73f af47 	bgt.w	2654a <_realloc_r+0x8a>
   266bc:	4657      	mov	r7, sl
   266be:	1f32      	subs	r2, r6, #4
   266c0:	f8da 100c 	ldr.w	r1, [sl, #12]
   266c4:	f857 0f08 	ldr.w	r0, [r7, #8]!
   266c8:	2a24      	cmp	r2, #36	; 0x24
   266ca:	60c1      	str	r1, [r0, #12]
   266cc:	6088      	str	r0, [r1, #8]
   266ce:	f200 80bc 	bhi.w	2684a <_realloc_r+0x38a>
   266d2:	2a13      	cmp	r2, #19
   266d4:	f240 80b7 	bls.w	26846 <_realloc_r+0x386>
   266d8:	6821      	ldr	r1, [r4, #0]
   266da:	2a1b      	cmp	r2, #27
   266dc:	f8ca 1008 	str.w	r1, [sl, #8]
   266e0:	6861      	ldr	r1, [r4, #4]
   266e2:	f8ca 100c 	str.w	r1, [sl, #12]
   266e6:	f200 80c1 	bhi.w	2686c <_realloc_r+0x3ac>
   266ea:	3408      	adds	r4, #8
   266ec:	f10a 0210 	add.w	r2, sl, #16
   266f0:	6821      	ldr	r1, [r4, #0]
   266f2:	6011      	str	r1, [r2, #0]
   266f4:	6861      	ldr	r1, [r4, #4]
   266f6:	6051      	str	r1, [r2, #4]
   266f8:	68a1      	ldr	r1, [r4, #8]
   266fa:	6091      	str	r1, [r2, #8]
   266fc:	ebab 0205 	sub.w	r2, fp, r5
   26700:	eb0a 0105 	add.w	r1, sl, r5
   26704:	4640      	mov	r0, r8
   26706:	f042 0201 	orr.w	r2, r2, #1
   2670a:	6099      	str	r1, [r3, #8]
   2670c:	604a      	str	r2, [r1, #4]
   2670e:	f8da 3004 	ldr.w	r3, [sl, #4]
   26712:	f003 0301 	and.w	r3, r3, #1
   26716:	431d      	orrs	r5, r3
   26718:	f8ca 5004 	str.w	r5, [sl, #4]
   2671c:	f7ff fec2 	bl	264a4 <__malloc_unlock>
   26720:	e780      	b.n	26624 <_realloc_r+0x164>
   26722:	68c2      	ldr	r2, [r0, #12]
   26724:	461e      	mov	r6, r3
   26726:	6883      	ldr	r3, [r0, #8]
   26728:	60da      	str	r2, [r3, #12]
   2672a:	6093      	str	r3, [r2, #8]
   2672c:	e766      	b.n	265fc <_realloc_r+0x13c>
   2672e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   26732:	f023 0303 	bic.w	r3, r3, #3
   26736:	441e      	add	r6, r3
   26738:	e760      	b.n	265fc <_realloc_r+0x13c>
   2673a:	6823      	ldr	r3, [r4, #0]
   2673c:	2a1b      	cmp	r2, #27
   2673e:	6003      	str	r3, [r0, #0]
   26740:	6863      	ldr	r3, [r4, #4]
   26742:	6043      	str	r3, [r0, #4]
   26744:	d829      	bhi.n	2679a <_realloc_r+0x2da>
   26746:	f104 0208 	add.w	r2, r4, #8
   2674a:	f100 0308 	add.w	r3, r0, #8
   2674e:	e719      	b.n	26584 <_realloc_r+0xc4>
   26750:	4657      	mov	r7, sl
   26752:	1f32      	subs	r2, r6, #4
   26754:	f8da 100c 	ldr.w	r1, [sl, #12]
   26758:	f857 0f08 	ldr.w	r0, [r7, #8]!
   2675c:	2a24      	cmp	r2, #36	; 0x24
   2675e:	60c1      	str	r1, [r0, #12]
   26760:	6088      	str	r0, [r1, #8]
   26762:	d827      	bhi.n	267b4 <_realloc_r+0x2f4>
   26764:	2a13      	cmp	r2, #19
   26766:	d923      	bls.n	267b0 <_realloc_r+0x2f0>
   26768:	6821      	ldr	r1, [r4, #0]
   2676a:	2a1b      	cmp	r2, #27
   2676c:	f8ca 1008 	str.w	r1, [sl, #8]
   26770:	6861      	ldr	r1, [r4, #4]
   26772:	f8ca 100c 	str.w	r1, [sl, #12]
   26776:	d843      	bhi.n	26800 <_realloc_r+0x340>
   26778:	3408      	adds	r4, #8
   2677a:	f10a 0210 	add.w	r2, sl, #16
   2677e:	6821      	ldr	r1, [r4, #0]
   26780:	461e      	mov	r6, r3
   26782:	46d1      	mov	r9, sl
   26784:	6011      	str	r1, [r2, #0]
   26786:	6863      	ldr	r3, [r4, #4]
   26788:	6053      	str	r3, [r2, #4]
   2678a:	68a3      	ldr	r3, [r4, #8]
   2678c:	463c      	mov	r4, r7
   2678e:	6093      	str	r3, [r2, #8]
   26790:	e734      	b.n	265fc <_realloc_r+0x13c>
   26792:	4621      	mov	r1, r4
   26794:	f004 fbd4 	bl	2af40 <memmove>
   26798:	e6fa      	b.n	26590 <_realloc_r+0xd0>
   2679a:	68a3      	ldr	r3, [r4, #8]
   2679c:	2a24      	cmp	r2, #36	; 0x24
   2679e:	6083      	str	r3, [r0, #8]
   267a0:	68e3      	ldr	r3, [r4, #12]
   267a2:	60c3      	str	r3, [r0, #12]
   267a4:	d03a      	beq.n	2681c <_realloc_r+0x35c>
   267a6:	f104 0210 	add.w	r2, r4, #16
   267aa:	f100 0310 	add.w	r3, r0, #16
   267ae:	e6e9      	b.n	26584 <_realloc_r+0xc4>
   267b0:	463a      	mov	r2, r7
   267b2:	e7e4      	b.n	2677e <_realloc_r+0x2be>
   267b4:	4621      	mov	r1, r4
   267b6:	4638      	mov	r0, r7
   267b8:	461e      	mov	r6, r3
   267ba:	46d1      	mov	r9, sl
   267bc:	463c      	mov	r4, r7
   267be:	f004 fbbf 	bl	2af40 <memmove>
   267c2:	e71b      	b.n	265fc <_realloc_r+0x13c>
   267c4:	ebac 0205 	sub.w	r2, ip, r5
   267c8:	eb09 0105 	add.w	r1, r9, r5
   267cc:	4640      	mov	r0, r8
   267ce:	4627      	mov	r7, r4
   267d0:	f042 0201 	orr.w	r2, r2, #1
   267d4:	6099      	str	r1, [r3, #8]
   267d6:	604a      	str	r2, [r1, #4]
   267d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   267dc:	f003 0301 	and.w	r3, r3, #1
   267e0:	431d      	orrs	r5, r3
   267e2:	f844 5c04 	str.w	r5, [r4, #-4]
   267e6:	f7ff fe5d 	bl	264a4 <__malloc_unlock>
   267ea:	e71b      	b.n	26624 <_realloc_r+0x164>
   267ec:	463b      	mov	r3, r7
   267ee:	e6fc      	b.n	265ea <_realloc_r+0x12a>
   267f0:	4621      	mov	r1, r4
   267f2:	4638      	mov	r0, r7
   267f4:	4666      	mov	r6, ip
   267f6:	46d1      	mov	r9, sl
   267f8:	463c      	mov	r4, r7
   267fa:	f004 fba1 	bl	2af40 <memmove>
   267fe:	e6fd      	b.n	265fc <_realloc_r+0x13c>
   26800:	68a1      	ldr	r1, [r4, #8]
   26802:	2a24      	cmp	r2, #36	; 0x24
   26804:	f8ca 1010 	str.w	r1, [sl, #16]
   26808:	68e1      	ldr	r1, [r4, #12]
   2680a:	f8ca 1014 	str.w	r1, [sl, #20]
   2680e:	d022      	beq.n	26856 <_realloc_r+0x396>
   26810:	3410      	adds	r4, #16
   26812:	f10a 0218 	add.w	r2, sl, #24
   26816:	e7b2      	b.n	2677e <_realloc_r+0x2be>
   26818:	200204dc 	.word	0x200204dc
   2681c:	6921      	ldr	r1, [r4, #16]
   2681e:	f104 0218 	add.w	r2, r4, #24
   26822:	f100 0318 	add.w	r3, r0, #24
   26826:	6101      	str	r1, [r0, #16]
   26828:	6961      	ldr	r1, [r4, #20]
   2682a:	6141      	str	r1, [r0, #20]
   2682c:	e6aa      	b.n	26584 <_realloc_r+0xc4>
   2682e:	68a3      	ldr	r3, [r4, #8]
   26830:	2a24      	cmp	r2, #36	; 0x24
   26832:	f8ca 3010 	str.w	r3, [sl, #16]
   26836:	68e3      	ldr	r3, [r4, #12]
   26838:	f8ca 3014 	str.w	r3, [sl, #20]
   2683c:	d022      	beq.n	26884 <_realloc_r+0x3c4>
   2683e:	3410      	adds	r4, #16
   26840:	f10a 0318 	add.w	r3, sl, #24
   26844:	e6d1      	b.n	265ea <_realloc_r+0x12a>
   26846:	463a      	mov	r2, r7
   26848:	e752      	b.n	266f0 <_realloc_r+0x230>
   2684a:	4621      	mov	r1, r4
   2684c:	4638      	mov	r0, r7
   2684e:	f004 fb77 	bl	2af40 <memmove>
   26852:	4b17      	ldr	r3, [pc, #92]	; (268b0 <_realloc_r+0x3f0>)
   26854:	e752      	b.n	266fc <_realloc_r+0x23c>
   26856:	6921      	ldr	r1, [r4, #16]
   26858:	f10a 0220 	add.w	r2, sl, #32
   2685c:	3418      	adds	r4, #24
   2685e:	f8ca 1018 	str.w	r1, [sl, #24]
   26862:	f854 1c04 	ldr.w	r1, [r4, #-4]
   26866:	f8ca 101c 	str.w	r1, [sl, #28]
   2686a:	e788      	b.n	2677e <_realloc_r+0x2be>
   2686c:	68a1      	ldr	r1, [r4, #8]
   2686e:	2a24      	cmp	r2, #36	; 0x24
   26870:	f8ca 1010 	str.w	r1, [sl, #16]
   26874:	68e1      	ldr	r1, [r4, #12]
   26876:	f8ca 1014 	str.w	r1, [sl, #20]
   2687a:	d00e      	beq.n	2689a <_realloc_r+0x3da>
   2687c:	3410      	adds	r4, #16
   2687e:	f10a 0218 	add.w	r2, sl, #24
   26882:	e735      	b.n	266f0 <_realloc_r+0x230>
   26884:	6922      	ldr	r2, [r4, #16]
   26886:	f10a 0320 	add.w	r3, sl, #32
   2688a:	3418      	adds	r4, #24
   2688c:	f8ca 2018 	str.w	r2, [sl, #24]
   26890:	f854 2c04 	ldr.w	r2, [r4, #-4]
   26894:	f8ca 201c 	str.w	r2, [sl, #28]
   26898:	e6a7      	b.n	265ea <_realloc_r+0x12a>
   2689a:	6921      	ldr	r1, [r4, #16]
   2689c:	f10a 0220 	add.w	r2, sl, #32
   268a0:	3418      	adds	r4, #24
   268a2:	f8ca 1018 	str.w	r1, [sl, #24]
   268a6:	f854 1c04 	ldr.w	r1, [r4, #-4]
   268aa:	f8ca 101c 	str.w	r1, [sl, #28]
   268ae:	e71f      	b.n	266f0 <_realloc_r+0x230>
   268b0:	200204dc 	.word	0x200204dc

000268b4 <_sbrk_r>:
   268b4:	b538      	push	{r3, r4, r5, lr}
   268b6:	2200      	movs	r2, #0
   268b8:	4d06      	ldr	r5, [pc, #24]	; (268d4 <_sbrk_r+0x20>)
   268ba:	4604      	mov	r4, r0
   268bc:	4608      	mov	r0, r1
   268be:	602a      	str	r2, [r5, #0]
   268c0:	f7ee fd2c 	bl	1531c <_sbrk>
   268c4:	1c43      	adds	r3, r0, #1
   268c6:	d000      	beq.n	268ca <_sbrk_r+0x16>
   268c8:	bd38      	pop	{r3, r4, r5, pc}
   268ca:	682b      	ldr	r3, [r5, #0]
   268cc:	2b00      	cmp	r3, #0
   268ce:	d0fb      	beq.n	268c8 <_sbrk_r+0x14>
   268d0:	6023      	str	r3, [r4, #0]
   268d2:	bd38      	pop	{r3, r4, r5, pc}
   268d4:	20026430 	.word	0x20026430

000268d8 <snprintf>:
   268d8:	b40c      	push	{r2, r3}
   268da:	4b20      	ldr	r3, [pc, #128]	; (2695c <snprintf+0x84>)
   268dc:	b570      	push	{r4, r5, r6, lr}
   268de:	1e0c      	subs	r4, r1, #0
   268e0:	b09c      	sub	sp, #112	; 0x70
   268e2:	681d      	ldr	r5, [r3, #0]
   268e4:	db35      	blt.n	26952 <snprintf+0x7a>
   268e6:	f44f 7302 	mov.w	r3, #520	; 0x208
   268ea:	9002      	str	r0, [sp, #8]
   268ec:	9006      	str	r0, [sp, #24]
   268ee:	f8ad 3014 	strh.w	r3, [sp, #20]
   268f2:	ab21      	add	r3, sp, #132	; 0x84
   268f4:	d018      	beq.n	26928 <snprintf+0x50>
   268f6:	1e61      	subs	r1, r4, #1
   268f8:	f64f 74ff 	movw	r4, #65535	; 0xffff
   268fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
   268fe:	4628      	mov	r0, r5
   26900:	9104      	str	r1, [sp, #16]
   26902:	9107      	str	r1, [sp, #28]
   26904:	a902      	add	r1, sp, #8
   26906:	9301      	str	r3, [sp, #4]
   26908:	f8ad 4016 	strh.w	r4, [sp, #22]
   2690c:	f7e7 ffd4 	bl	e8b8 <_svfprintf_r>
   26910:	1c42      	adds	r2, r0, #1
   26912:	da01      	bge.n	26918 <snprintf+0x40>
   26914:	238b      	movs	r3, #139	; 0x8b
   26916:	602b      	str	r3, [r5, #0]
   26918:	9b02      	ldr	r3, [sp, #8]
   2691a:	2200      	movs	r2, #0
   2691c:	701a      	strb	r2, [r3, #0]
   2691e:	b01c      	add	sp, #112	; 0x70
   26920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26924:	b002      	add	sp, #8
   26926:	4770      	bx	lr
   26928:	f64f 76ff 	movw	r6, #65535	; 0xffff
   2692c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2692e:	a902      	add	r1, sp, #8
   26930:	4628      	mov	r0, r5
   26932:	9301      	str	r3, [sp, #4]
   26934:	9404      	str	r4, [sp, #16]
   26936:	9407      	str	r4, [sp, #28]
   26938:	f8ad 6016 	strh.w	r6, [sp, #22]
   2693c:	f7e7 ffbc 	bl	e8b8 <_svfprintf_r>
   26940:	1c43      	adds	r3, r0, #1
   26942:	da01      	bge.n	26948 <snprintf+0x70>
   26944:	238b      	movs	r3, #139	; 0x8b
   26946:	602b      	str	r3, [r5, #0]
   26948:	b01c      	add	sp, #112	; 0x70
   2694a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2694e:	b002      	add	sp, #8
   26950:	4770      	bx	lr
   26952:	238b      	movs	r3, #139	; 0x8b
   26954:	f04f 30ff 	mov.w	r0, #4294967295
   26958:	602b      	str	r3, [r5, #0]
   2695a:	e7f5      	b.n	26948 <snprintf+0x70>
   2695c:	200204d8 	.word	0x200204d8

00026960 <__sprintf_chk>:
   26960:	b408      	push	{r3}
   26962:	b510      	push	{r4, lr}
   26964:	b083      	sub	sp, #12
   26966:	1e14      	subs	r4, r2, #0
   26968:	ab05      	add	r3, sp, #20
   2696a:	f853 1b04 	ldr.w	r1, [r3], #4
   2696e:	9301      	str	r3, [sp, #4]
   26970:	db0c      	blt.n	2698c <__sprintf_chk+0x2c>
   26972:	460a      	mov	r2, r1
   26974:	4621      	mov	r1, r4
   26976:	f002 fffb 	bl	29970 <vsnprintf>
   2697a:	2800      	cmp	r0, #0
   2697c:	db01      	blt.n	26982 <__sprintf_chk+0x22>
   2697e:	42a0      	cmp	r0, r4
   26980:	d20c      	bcs.n	2699c <__sprintf_chk+0x3c>
   26982:	b003      	add	sp, #12
   26984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26988:	b001      	add	sp, #4
   2698a:	4770      	bx	lr
   2698c:	461a      	mov	r2, r3
   2698e:	f003 f815 	bl	299bc <vsprintf>
   26992:	b003      	add	sp, #12
   26994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26998:	b001      	add	sp, #4
   2699a:	4770      	bx	lr
   2699c:	f7ee fce0 	bl	15360 <__chk_fail>

000269a0 <sscanf>:
   269a0:	b40e      	push	{r1, r2, r3}
   269a2:	b5f0      	push	{r4, r5, r6, r7, lr}
   269a4:	b09e      	sub	sp, #120	; 0x78
   269a6:	f44f 7101 	mov.w	r1, #516	; 0x204
   269aa:	2500      	movs	r5, #0
   269ac:	4f10      	ldr	r7, [pc, #64]	; (269f0 <sscanf+0x50>)
   269ae:	ac23      	add	r4, sp, #140	; 0x8c
   269b0:	f8ad 101c 	strh.w	r1, [sp, #28]
   269b4:	9004      	str	r0, [sp, #16]
   269b6:	f64f 76ff 	movw	r6, #65535	; 0xffff
   269ba:	f854 2b04 	ldr.w	r2, [r4], #4
   269be:	9008      	str	r0, [sp, #32]
   269c0:	9201      	str	r2, [sp, #4]
   269c2:	f000 f929 	bl	26c18 <strlen>
   269c6:	4b0b      	ldr	r3, [pc, #44]	; (269f4 <sscanf+0x54>)
   269c8:	4601      	mov	r1, r0
   269ca:	9a01      	ldr	r2, [sp, #4]
   269cc:	9105      	str	r1, [sp, #20]
   269ce:	9109      	str	r1, [sp, #36]	; 0x24
   269d0:	a904      	add	r1, sp, #16
   269d2:	6818      	ldr	r0, [r3, #0]
   269d4:	4623      	mov	r3, r4
   269d6:	9403      	str	r4, [sp, #12]
   269d8:	970c      	str	r7, [sp, #48]	; 0x30
   269da:	9510      	str	r5, [sp, #64]	; 0x40
   269dc:	9515      	str	r5, [sp, #84]	; 0x54
   269de:	f8ad 601e 	strh.w	r6, [sp, #30]
   269e2:	f000 fd11 	bl	27408 <__ssvfscanf_r>
   269e6:	b01e      	add	sp, #120	; 0x78
   269e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   269ec:	b003      	add	sp, #12
   269ee:	4770      	bx	lr
   269f0:	00026a1d 	.word	0x00026a1d
   269f4:	200204d8 	.word	0x200204d8

000269f8 <__sread>:
   269f8:	b510      	push	{r4, lr}
   269fa:	460c      	mov	r4, r1
   269fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   26a00:	f004 ffb4 	bl	2b96c <_read_r>
   26a04:	2800      	cmp	r0, #0
   26a06:	db03      	blt.n	26a10 <__sread+0x18>
   26a08:	6d23      	ldr	r3, [r4, #80]	; 0x50
   26a0a:	4403      	add	r3, r0
   26a0c:	6523      	str	r3, [r4, #80]	; 0x50
   26a0e:	bd10      	pop	{r4, pc}
   26a10:	89a3      	ldrh	r3, [r4, #12]
   26a12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   26a16:	81a3      	strh	r3, [r4, #12]
   26a18:	bd10      	pop	{r4, pc}
   26a1a:	bf00      	nop

00026a1c <__seofread>:
   26a1c:	2000      	movs	r0, #0
   26a1e:	4770      	bx	lr

00026a20 <__swrite>:
   26a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26a24:	460c      	mov	r4, r1
   26a26:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   26a2a:	461f      	mov	r7, r3
   26a2c:	4616      	mov	r6, r2
   26a2e:	05cb      	lsls	r3, r1, #23
   26a30:	4605      	mov	r5, r0
   26a32:	d40b      	bmi.n	26a4c <__swrite+0x2c>
   26a34:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   26a38:	463b      	mov	r3, r7
   26a3a:	4632      	mov	r2, r6
   26a3c:	4628      	mov	r0, r5
   26a3e:	81a1      	strh	r1, [r4, #12]
   26a40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   26a44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   26a48:	f002 bfc4 	b.w	299d4 <_write_r>
   26a4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   26a50:	2302      	movs	r3, #2
   26a52:	2200      	movs	r2, #0
   26a54:	f004 f9aa 	bl	2adac <_lseek_r>
   26a58:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   26a5c:	e7ea      	b.n	26a34 <__swrite+0x14>
   26a5e:	bf00      	nop

00026a60 <__sseek>:
   26a60:	b510      	push	{r4, lr}
   26a62:	460c      	mov	r4, r1
   26a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   26a68:	f004 f9a0 	bl	2adac <_lseek_r>
   26a6c:	1c42      	adds	r2, r0, #1
   26a6e:	89a3      	ldrh	r3, [r4, #12]
   26a70:	d004      	beq.n	26a7c <__sseek+0x1c>
   26a72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   26a76:	6520      	str	r0, [r4, #80]	; 0x50
   26a78:	81a3      	strh	r3, [r4, #12]
   26a7a:	bd10      	pop	{r4, pc}
   26a7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   26a80:	81a3      	strh	r3, [r4, #12]
   26a82:	bd10      	pop	{r4, pc}

00026a84 <__sclose>:
   26a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   26a88:	f003 b82a 	b.w	29ae0 <_close_r>

00026a8c <strchr>:
   26a8c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   26a90:	4603      	mov	r3, r0
   26a92:	d044      	beq.n	26b1e <strchr+0x92>
   26a94:	0782      	lsls	r2, r0, #30
   26a96:	d132      	bne.n	26afe <strchr+0x72>
   26a98:	b470      	push	{r4, r5, r6}
   26a9a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   26a9e:	6803      	ldr	r3, [r0, #0]
   26aa0:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   26aa4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   26aa8:	ea86 0403 	eor.w	r4, r6, r3
   26aac:	ea22 0203 	bic.w	r2, r2, r3
   26ab0:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   26ab4:	ea23 0304 	bic.w	r3, r3, r4
   26ab8:	4313      	orrs	r3, r2
   26aba:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   26abe:	d10f      	bne.n	26ae0 <strchr+0x54>
   26ac0:	f850 4f04 	ldr.w	r4, [r0, #4]!
   26ac4:	ea84 0506 	eor.w	r5, r4, r6
   26ac8:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   26acc:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   26ad0:	ea23 0304 	bic.w	r3, r3, r4
   26ad4:	ea22 0205 	bic.w	r2, r2, r5
   26ad8:	4313      	orrs	r3, r2
   26ada:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   26ade:	d0ef      	beq.n	26ac0 <strchr+0x34>
   26ae0:	7803      	ldrb	r3, [r0, #0]
   26ae2:	b923      	cbnz	r3, 26aee <strchr+0x62>
   26ae4:	e036      	b.n	26b54 <strchr+0xc8>
   26ae6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   26aea:	2b00      	cmp	r3, #0
   26aec:	d032      	beq.n	26b54 <strchr+0xc8>
   26aee:	4299      	cmp	r1, r3
   26af0:	d1f9      	bne.n	26ae6 <strchr+0x5a>
   26af2:	e030      	b.n	26b56 <strchr+0xca>
   26af4:	428a      	cmp	r2, r1
   26af6:	d011      	beq.n	26b1c <strchr+0x90>
   26af8:	079a      	lsls	r2, r3, #30
   26afa:	4618      	mov	r0, r3
   26afc:	d0cc      	beq.n	26a98 <strchr+0xc>
   26afe:	4618      	mov	r0, r3
   26b00:	f813 2b01 	ldrb.w	r2, [r3], #1
   26b04:	2a00      	cmp	r2, #0
   26b06:	d1f5      	bne.n	26af4 <strchr+0x68>
   26b08:	4610      	mov	r0, r2
   26b0a:	4770      	bx	lr
   26b0c:	0799      	lsls	r1, r3, #30
   26b0e:	4618      	mov	r0, r3
   26b10:	d007      	beq.n	26b22 <strchr+0x96>
   26b12:	4618      	mov	r0, r3
   26b14:	3301      	adds	r3, #1
   26b16:	7802      	ldrb	r2, [r0, #0]
   26b18:	2a00      	cmp	r2, #0
   26b1a:	d1f7      	bne.n	26b0c <strchr+0x80>
   26b1c:	4770      	bx	lr
   26b1e:	0782      	lsls	r2, r0, #30
   26b20:	d1f7      	bne.n	26b12 <strchr+0x86>
   26b22:	6802      	ldr	r2, [r0, #0]
   26b24:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   26b28:	ea23 0302 	bic.w	r3, r3, r2
   26b2c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   26b30:	d108      	bne.n	26b44 <strchr+0xb8>
   26b32:	f850 2f04 	ldr.w	r2, [r0, #4]!
   26b36:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   26b3a:	ea23 0302 	bic.w	r3, r3, r2
   26b3e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   26b42:	d0f6      	beq.n	26b32 <strchr+0xa6>
   26b44:	7803      	ldrb	r3, [r0, #0]
   26b46:	2b00      	cmp	r3, #0
   26b48:	d0e8      	beq.n	26b1c <strchr+0x90>
   26b4a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   26b4e:	2b00      	cmp	r3, #0
   26b50:	d1fb      	bne.n	26b4a <strchr+0xbe>
   26b52:	4770      	bx	lr
   26b54:	4618      	mov	r0, r3
   26b56:	bc70      	pop	{r4, r5, r6}
   26b58:	4770      	bx	lr
   26b5a:	bf00      	nop

00026b5c <strcpy>:
   26b5c:	ea80 0201 	eor.w	r2, r0, r1
   26b60:	4684      	mov	ip, r0
   26b62:	f012 0f03 	tst.w	r2, #3
   26b66:	d14f      	bne.n	26c08 <strcpy+0xac>
   26b68:	f011 0f03 	tst.w	r1, #3
   26b6c:	d132      	bne.n	26bd4 <strcpy+0x78>
   26b6e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   26b72:	f011 0f04 	tst.w	r1, #4
   26b76:	f851 3b04 	ldr.w	r3, [r1], #4
   26b7a:	d00b      	beq.n	26b94 <strcpy+0x38>
   26b7c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   26b80:	439a      	bics	r2, r3
   26b82:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   26b86:	bf04      	itt	eq
   26b88:	f84c 3b04 	streq.w	r3, [ip], #4
   26b8c:	f851 3b04 	ldreq.w	r3, [r1], #4
   26b90:	d116      	bne.n	26bc0 <strcpy+0x64>
   26b92:	bf00      	nop
   26b94:	f851 4b04 	ldr.w	r4, [r1], #4
   26b98:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   26b9c:	439a      	bics	r2, r3
   26b9e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   26ba2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   26ba6:	d10b      	bne.n	26bc0 <strcpy+0x64>
   26ba8:	f84c 3b04 	str.w	r3, [ip], #4
   26bac:	43a2      	bics	r2, r4
   26bae:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   26bb2:	bf04      	itt	eq
   26bb4:	f851 3b04 	ldreq.w	r3, [r1], #4
   26bb8:	f84c 4b04 	streq.w	r4, [ip], #4
   26bbc:	d0ea      	beq.n	26b94 <strcpy+0x38>
   26bbe:	4623      	mov	r3, r4
   26bc0:	f80c 3b01 	strb.w	r3, [ip], #1
   26bc4:	f013 0fff 	tst.w	r3, #255	; 0xff
   26bc8:	ea4f 2333 	mov.w	r3, r3, ror #8
   26bcc:	d1f8      	bne.n	26bc0 <strcpy+0x64>
   26bce:	f85d 4b04 	ldr.w	r4, [sp], #4
   26bd2:	4770      	bx	lr
   26bd4:	f011 0f01 	tst.w	r1, #1
   26bd8:	d006      	beq.n	26be8 <strcpy+0x8c>
   26bda:	f811 2b01 	ldrb.w	r2, [r1], #1
   26bde:	f80c 2b01 	strb.w	r2, [ip], #1
   26be2:	2a00      	cmp	r2, #0
   26be4:	bf08      	it	eq
   26be6:	4770      	bxeq	lr
   26be8:	f011 0f02 	tst.w	r1, #2
   26bec:	d0bf      	beq.n	26b6e <strcpy+0x12>
   26bee:	f831 2b02 	ldrh.w	r2, [r1], #2
   26bf2:	f012 0fff 	tst.w	r2, #255	; 0xff
   26bf6:	bf16      	itet	ne
   26bf8:	f82c 2b02 	strhne.w	r2, [ip], #2
   26bfc:	f88c 2000 	strbeq.w	r2, [ip]
   26c00:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   26c04:	d1b3      	bne.n	26b6e <strcpy+0x12>
   26c06:	4770      	bx	lr
   26c08:	f811 2b01 	ldrb.w	r2, [r1], #1
   26c0c:	f80c 2b01 	strb.w	r2, [ip], #1
   26c10:	2a00      	cmp	r2, #0
   26c12:	d1f9      	bne.n	26c08 <strcpy+0xac>
   26c14:	4770      	bx	lr
   26c16:	bf00      	nop

00026c18 <strlen>:
   26c18:	f020 0103 	bic.w	r1, r0, #3
   26c1c:	f010 0003 	ands.w	r0, r0, #3
   26c20:	f1c0 0000 	rsb	r0, r0, #0
   26c24:	f851 3b04 	ldr.w	r3, [r1], #4
   26c28:	f100 0c04 	add.w	ip, r0, #4
   26c2c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   26c30:	f06f 0200 	mvn.w	r2, #0
   26c34:	bf1c      	itt	ne
   26c36:	fa22 f20c 	lsrne.w	r2, r2, ip
   26c3a:	4313      	orrne	r3, r2
   26c3c:	f04f 0c01 	mov.w	ip, #1
   26c40:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   26c44:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   26c48:	eba3 020c 	sub.w	r2, r3, ip
   26c4c:	ea22 0203 	bic.w	r2, r2, r3
   26c50:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   26c54:	bf04      	itt	eq
   26c56:	f851 3b04 	ldreq.w	r3, [r1], #4
   26c5a:	3004      	addeq	r0, #4
   26c5c:	d0f4      	beq.n	26c48 <strlen+0x30>
   26c5e:	f1c2 0100 	rsb	r1, r2, #0
   26c62:	ea02 0201 	and.w	r2, r2, r1
   26c66:	fab2 f282 	clz	r2, r2
   26c6a:	f1c2 021f 	rsb	r2, r2, #31
   26c6e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   26c72:	4770      	bx	lr

00026c74 <strncmp>:
   26c74:	b3b2      	cbz	r2, 26ce4 <strncmp+0x70>
   26c76:	460b      	mov	r3, r1
   26c78:	b4f0      	push	{r4, r5, r6, r7}
   26c7a:	ea40 0501 	orr.w	r5, r0, r1
   26c7e:	4604      	mov	r4, r0
   26c80:	07ad      	lsls	r5, r5, #30
   26c82:	d029      	beq.n	26cd8 <strncmp+0x64>
   26c84:	7820      	ldrb	r0, [r4, #0]
   26c86:	780e      	ldrb	r6, [r1, #0]
   26c88:	4286      	cmp	r6, r0
   26c8a:	d10f      	bne.n	26cac <strncmp+0x38>
   26c8c:	b33e      	cbz	r6, 26cde <strncmp+0x6a>
   26c8e:	2a01      	cmp	r2, #1
   26c90:	d025      	beq.n	26cde <strncmp+0x6a>
   26c92:	4625      	mov	r5, r4
   26c94:	e002      	b.n	26c9c <strncmp+0x28>
   26c96:	42dc      	cmn	r4, r3
   26c98:	d021      	beq.n	26cde <strncmp+0x6a>
   26c9a:	b300      	cbz	r0, 26cde <strncmp+0x6a>
   26c9c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   26ca0:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   26ca4:	43eb      	mvns	r3, r5
   26ca6:	42b0      	cmp	r0, r6
   26ca8:	4413      	add	r3, r2
   26caa:	d0f4      	beq.n	26c96 <strncmp+0x22>
   26cac:	1b80      	subs	r0, r0, r6
   26cae:	bcf0      	pop	{r4, r5, r6, r7}
   26cb0:	4770      	bx	lr
   26cb2:	4619      	mov	r1, r3
   26cb4:	4604      	mov	r4, r0
   26cb6:	f850 5b04 	ldr.w	r5, [r0], #4
   26cba:	3304      	adds	r3, #4
   26cbc:	680f      	ldr	r7, [r1, #0]
   26cbe:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
   26cc2:	42bd      	cmp	r5, r7
   26cc4:	ea26 0505 	bic.w	r5, r6, r5
   26cc8:	d1dc      	bne.n	26c84 <strncmp+0x10>
   26cca:	3a04      	subs	r2, #4
   26ccc:	4604      	mov	r4, r0
   26cce:	4619      	mov	r1, r3
   26cd0:	d005      	beq.n	26cde <strncmp+0x6a>
   26cd2:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   26cd6:	d102      	bne.n	26cde <strncmp+0x6a>
   26cd8:	2a03      	cmp	r2, #3
   26cda:	d8ea      	bhi.n	26cb2 <strncmp+0x3e>
   26cdc:	e7d2      	b.n	26c84 <strncmp+0x10>
   26cde:	2000      	movs	r0, #0
   26ce0:	bcf0      	pop	{r4, r5, r6, r7}
   26ce2:	4770      	bx	lr
   26ce4:	4610      	mov	r0, r2
   26ce6:	4770      	bx	lr

00026ce8 <strncpy>:
   26ce8:	b470      	push	{r4, r5, r6}
   26cea:	ea40 0401 	orr.w	r4, r0, r1
   26cee:	07a3      	lsls	r3, r4, #30
   26cf0:	d101      	bne.n	26cf6 <strncpy+0xe>
   26cf2:	2a03      	cmp	r2, #3
   26cf4:	d80f      	bhi.n	26d16 <strncpy+0x2e>
   26cf6:	4604      	mov	r4, r0
   26cf8:	1e4d      	subs	r5, r1, #1
   26cfa:	e007      	b.n	26d0c <strncpy+0x24>
   26cfc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   26d00:	1e56      	subs	r6, r2, #1
   26d02:	f803 1b01 	strb.w	r1, [r3], #1
   26d06:	b1c9      	cbz	r1, 26d3c <strncpy+0x54>
   26d08:	4632      	mov	r2, r6
   26d0a:	461c      	mov	r4, r3
   26d0c:	4623      	mov	r3, r4
   26d0e:	2a00      	cmp	r2, #0
   26d10:	d1f4      	bne.n	26cfc <strncpy+0x14>
   26d12:	bc70      	pop	{r4, r5, r6}
   26d14:	4770      	bx	lr
   26d16:	460b      	mov	r3, r1
   26d18:	4604      	mov	r4, r0
   26d1a:	4619      	mov	r1, r3
   26d1c:	f853 6b04 	ldr.w	r6, [r3], #4
   26d20:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   26d24:	ea25 0506 	bic.w	r5, r5, r6
   26d28:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   26d2c:	d1e4      	bne.n	26cf8 <strncpy+0x10>
   26d2e:	3a04      	subs	r2, #4
   26d30:	4619      	mov	r1, r3
   26d32:	f844 6b04 	str.w	r6, [r4], #4
   26d36:	2a03      	cmp	r2, #3
   26d38:	d8ef      	bhi.n	26d1a <strncpy+0x32>
   26d3a:	e7dd      	b.n	26cf8 <strncpy+0x10>
   26d3c:	2e00      	cmp	r6, #0
   26d3e:	d0e8      	beq.n	26d12 <strncpy+0x2a>
   26d40:	4422      	add	r2, r4
   26d42:	f803 1b01 	strb.w	r1, [r3], #1
   26d46:	4293      	cmp	r3, r2
   26d48:	d1fb      	bne.n	26d42 <strncpy+0x5a>
   26d4a:	bc70      	pop	{r4, r5, r6}
   26d4c:	4770      	bx	lr
   26d4e:	bf00      	nop

00026d50 <two_way_long_needle>:
   26d50:	2b01      	cmp	r3, #1
   26d52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d56:	461d      	mov	r5, r3
   26d58:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
   26d5c:	4682      	mov	sl, r0
   26d5e:	460f      	mov	r7, r1
   26d60:	4690      	mov	r8, r2
   26d62:	f04f 0301 	mov.w	r3, #1
   26d66:	f240 814d 	bls.w	27004 <two_way_long_needle+0x2b4>
   26d6a:	2400      	movs	r4, #0
   26d6c:	f04f 30ff 	mov.w	r0, #4294967295
   26d70:	4619      	mov	r1, r3
   26d72:	469c      	mov	ip, r3
   26d74:	e006      	b.n	26d84 <two_way_long_needle+0x34>
   26d76:	eba3 0c00 	sub.w	ip, r3, r0
   26d7a:	461c      	mov	r4, r3
   26d7c:	2101      	movs	r1, #1
   26d7e:	190b      	adds	r3, r1, r4
   26d80:	429d      	cmp	r5, r3
   26d82:	d910      	bls.n	26da6 <two_way_long_needle+0x56>
   26d84:	eb08 0200 	add.w	r2, r8, r0
   26d88:	f818 6003 	ldrb.w	r6, [r8, r3]
   26d8c:	5c52      	ldrb	r2, [r2, r1]
   26d8e:	4296      	cmp	r6, r2
   26d90:	d3f1      	bcc.n	26d76 <two_way_long_needle+0x26>
   26d92:	f000 8083 	beq.w	26e9c <two_way_long_needle+0x14c>
   26d96:	f04f 0c01 	mov.w	ip, #1
   26d9a:	4620      	mov	r0, r4
   26d9c:	4661      	mov	r1, ip
   26d9e:	4464      	add	r4, ip
   26da0:	190b      	adds	r3, r1, r4
   26da2:	429d      	cmp	r5, r3
   26da4:	d8ee      	bhi.n	26d84 <two_way_long_needle+0x34>
   26da6:	f8cd c004 	str.w	ip, [sp, #4]
   26daa:	f04f 0c01 	mov.w	ip, #1
   26dae:	2400      	movs	r4, #0
   26db0:	f04f 36ff 	mov.w	r6, #4294967295
   26db4:	4661      	mov	r1, ip
   26db6:	4663      	mov	r3, ip
   26db8:	e006      	b.n	26dc8 <two_way_long_needle+0x78>
   26dba:	eba3 0c06 	sub.w	ip, r3, r6
   26dbe:	461c      	mov	r4, r3
   26dc0:	2101      	movs	r1, #1
   26dc2:	1863      	adds	r3, r4, r1
   26dc4:	429d      	cmp	r5, r3
   26dc6:	d90f      	bls.n	26de8 <two_way_long_needle+0x98>
   26dc8:	eb08 0201 	add.w	r2, r8, r1
   26dcc:	f818 e003 	ldrb.w	lr, [r8, r3]
   26dd0:	5d92      	ldrb	r2, [r2, r6]
   26dd2:	4596      	cmp	lr, r2
   26dd4:	d8f1      	bhi.n	26dba <two_way_long_needle+0x6a>
   26dd6:	d069      	beq.n	26eac <two_way_long_needle+0x15c>
   26dd8:	f04f 0c01 	mov.w	ip, #1
   26ddc:	4626      	mov	r6, r4
   26dde:	4661      	mov	r1, ip
   26de0:	4464      	add	r4, ip
   26de2:	1863      	adds	r3, r4, r1
   26de4:	429d      	cmp	r5, r3
   26de6:	d8ef      	bhi.n	26dc8 <two_way_long_needle+0x78>
   26de8:	3601      	adds	r6, #1
   26dea:	f100 0b01 	add.w	fp, r0, #1
   26dee:	45b3      	cmp	fp, r6
   26df0:	d802      	bhi.n	26df8 <two_way_long_needle+0xa8>
   26df2:	46b3      	mov	fp, r6
   26df4:	f8cd c004 	str.w	ip, [sp, #4]
   26df8:	ab05      	add	r3, sp, #20
   26dfa:	f20d 4214 	addw	r2, sp, #1044	; 0x414
   26dfe:	f843 5f04 	str.w	r5, [r3, #4]!
   26e02:	4293      	cmp	r3, r2
   26e04:	d1fb      	bne.n	26dfe <two_way_long_needle+0xae>
   26e06:	2d00      	cmp	r5, #0
   26e08:	f000 80f7 	beq.w	26ffa <two_way_long_needle+0x2aa>
   26e0c:	1e6c      	subs	r4, r5, #1
   26e0e:	ae06      	add	r6, sp, #24
   26e10:	f108 32ff 	add.w	r2, r8, #4294967295
   26e14:	eb08 0004 	add.w	r0, r8, r4
   26e18:	9600      	str	r6, [sp, #0]
   26e1a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   26e1e:	43d3      	mvns	r3, r2
   26e20:	4282      	cmp	r2, r0
   26e22:	442b      	add	r3, r5
   26e24:	4443      	add	r3, r8
   26e26:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
   26e2a:	d1f6      	bne.n	26e1a <two_way_long_needle+0xca>
   26e2c:	9e01      	ldr	r6, [sp, #4]
   26e2e:	465a      	mov	r2, fp
   26e30:	4640      	mov	r0, r8
   26e32:	eb08 0106 	add.w	r1, r8, r6
   26e36:	f7ff fab1 	bl	2639c <memcmp>
   26e3a:	2800      	cmp	r0, #0
   26e3c:	f040 8089 	bne.w	26f52 <two_way_long_needle+0x202>
   26e40:	f10b 33ff 	add.w	r3, fp, #4294967295
   26e44:	4681      	mov	r9, r0
   26e46:	f8cd 8008 	str.w	r8, [sp, #8]
   26e4a:	9305      	str	r3, [sp, #20]
   26e4c:	1bab      	subs	r3, r5, r6
   26e4e:	4606      	mov	r6, r0
   26e50:	9303      	str	r3, [sp, #12]
   26e52:	eb0a 0806 	add.w	r8, sl, r6
   26e56:	9a00      	ldr	r2, [sp, #0]
   26e58:	f818 3004 	ldrb.w	r3, [r8, r4]
   26e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   26e60:	b35b      	cbz	r3, 26eba <two_way_long_needle+0x16a>
   26e62:	f1b9 0f00 	cmp.w	r9, #0
   26e66:	d004      	beq.n	26e72 <two_way_long_needle+0x122>
   26e68:	9a01      	ldr	r2, [sp, #4]
   26e6a:	4293      	cmp	r3, r2
   26e6c:	9a03      	ldr	r2, [sp, #12]
   26e6e:	bf38      	it	cc
   26e70:	4613      	movcc	r3, r2
   26e72:	441e      	add	r6, r3
   26e74:	f04f 0900 	mov.w	r9, #0
   26e78:	1b7b      	subs	r3, r7, r5
   26e7a:	42b3      	cmp	r3, r6
   26e7c:	d2e9      	bcs.n	26e52 <two_way_long_needle+0x102>
   26e7e:	eb0a 0007 	add.w	r0, sl, r7
   26e82:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
   26e86:	f004 fe75 	bl	2bb74 <strnlen>
   26e8a:	4407      	add	r7, r0
   26e8c:	1b7b      	subs	r3, r7, r5
   26e8e:	42b3      	cmp	r3, r6
   26e90:	d2df      	bcs.n	26e52 <two_way_long_needle+0x102>
   26e92:	2000      	movs	r0, #0
   26e94:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   26e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26e9c:	458c      	cmp	ip, r1
   26e9e:	f101 0101 	add.w	r1, r1, #1
   26ea2:	f47f af6c 	bne.w	26d7e <two_way_long_needle+0x2e>
   26ea6:	4464      	add	r4, ip
   26ea8:	2101      	movs	r1, #1
   26eaa:	e768      	b.n	26d7e <two_way_long_needle+0x2e>
   26eac:	458c      	cmp	ip, r1
   26eae:	f101 0101 	add.w	r1, r1, #1
   26eb2:	d186      	bne.n	26dc2 <two_way_long_needle+0x72>
   26eb4:	4464      	add	r4, ip
   26eb6:	2101      	movs	r1, #1
   26eb8:	e783      	b.n	26dc2 <two_way_long_needle+0x72>
   26eba:	45cb      	cmp	fp, r9
   26ebc:	465b      	mov	r3, fp
   26ebe:	bf38      	it	cc
   26ec0:	464b      	movcc	r3, r9
   26ec2:	42a3      	cmp	r3, r4
   26ec4:	d215      	bcs.n	26ef2 <two_way_long_needle+0x1a2>
   26ec6:	1e59      	subs	r1, r3, #1
   26ec8:	199a      	adds	r2, r3, r6
   26eca:	9802      	ldr	r0, [sp, #8]
   26ecc:	4452      	add	r2, sl
   26ece:	4401      	add	r1, r0
   26ed0:	e002      	b.n	26ed8 <two_way_long_needle+0x188>
   26ed2:	3301      	adds	r3, #1
   26ed4:	42a3      	cmp	r3, r4
   26ed6:	d20c      	bcs.n	26ef2 <two_way_long_needle+0x1a2>
   26ed8:	f812 0b01 	ldrb.w	r0, [r2], #1
   26edc:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   26ee0:	4584      	cmp	ip, r0
   26ee2:	d0f6      	beq.n	26ed2 <two_way_long_needle+0x182>
   26ee4:	f1cb 0201 	rsb	r2, fp, #1
   26ee8:	f04f 0900 	mov.w	r9, #0
   26eec:	4416      	add	r6, r2
   26eee:	441e      	add	r6, r3
   26ef0:	e7c2      	b.n	26e78 <two_way_long_needle+0x128>
   26ef2:	45cb      	cmp	fp, r9
   26ef4:	9b05      	ldr	r3, [sp, #20]
   26ef6:	d97e      	bls.n	26ff6 <two_way_long_needle+0x2a6>
   26ef8:	eb0b 0206 	add.w	r2, fp, r6
   26efc:	9902      	ldr	r1, [sp, #8]
   26efe:	f8cd b010 	str.w	fp, [sp, #16]
   26f02:	4459      	add	r1, fp
   26f04:	4452      	add	r2, sl
   26f06:	e002      	b.n	26f0e <two_way_long_needle+0x1be>
   26f08:	454b      	cmp	r3, r9
   26f0a:	4673      	mov	r3, lr
   26f0c:	d015      	beq.n	26f3a <two_way_long_needle+0x1ea>
   26f0e:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
   26f12:	f103 0b01 	add.w	fp, r3, #1
   26f16:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   26f1a:	f103 3eff 	add.w	lr, r3, #4294967295
   26f1e:	4584      	cmp	ip, r0
   26f20:	d0f2      	beq.n	26f08 <two_way_long_needle+0x1b8>
   26f22:	465b      	mov	r3, fp
   26f24:	f8dd b010 	ldr.w	fp, [sp, #16]
   26f28:	f109 0901 	add.w	r9, r9, #1
   26f2c:	4599      	cmp	r9, r3
   26f2e:	d80b      	bhi.n	26f48 <two_way_long_needle+0x1f8>
   26f30:	9b01      	ldr	r3, [sp, #4]
   26f32:	f8dd 900c 	ldr.w	r9, [sp, #12]
   26f36:	441e      	add	r6, r3
   26f38:	e79e      	b.n	26e78 <two_way_long_needle+0x128>
   26f3a:	464b      	mov	r3, r9
   26f3c:	f109 0901 	add.w	r9, r9, #1
   26f40:	f8dd b010 	ldr.w	fp, [sp, #16]
   26f44:	4599      	cmp	r9, r3
   26f46:	d9f3      	bls.n	26f30 <two_way_long_needle+0x1e0>
   26f48:	4640      	mov	r0, r8
   26f4a:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   26f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26f52:	eba5 030b 	sub.w	r3, r5, fp
   26f56:	f10b 32ff 	add.w	r2, fp, #4294967295
   26f5a:	2600      	movs	r6, #0
   26f5c:	f445 6900 	orr.w	r9, r5, #2048	; 0x800
   26f60:	455b      	cmp	r3, fp
   26f62:	9201      	str	r2, [sp, #4]
   26f64:	f1cb 0201 	rsb	r2, fp, #1
   26f68:	bf38      	it	cc
   26f6a:	465b      	movcc	r3, fp
   26f6c:	9202      	str	r2, [sp, #8]
   26f6e:	3301      	adds	r3, #1
   26f70:	9303      	str	r3, [sp, #12]
   26f72:	eb0a 0006 	add.w	r0, sl, r6
   26f76:	9a00      	ldr	r2, [sp, #0]
   26f78:	5d03      	ldrb	r3, [r0, r4]
   26f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   26f7e:	b16b      	cbz	r3, 26f9c <two_way_long_needle+0x24c>
   26f80:	441e      	add	r6, r3
   26f82:	1b7b      	subs	r3, r7, r5
   26f84:	429e      	cmp	r6, r3
   26f86:	d9f4      	bls.n	26f72 <two_way_long_needle+0x222>
   26f88:	eb0a 0007 	add.w	r0, sl, r7
   26f8c:	4649      	mov	r1, r9
   26f8e:	f004 fdf1 	bl	2bb74 <strnlen>
   26f92:	4407      	add	r7, r0
   26f94:	1b7b      	subs	r3, r7, r5
   26f96:	429e      	cmp	r6, r3
   26f98:	d9eb      	bls.n	26f72 <two_way_long_needle+0x222>
   26f9a:	e77a      	b.n	26e92 <two_way_long_needle+0x142>
   26f9c:	45a3      	cmp	fp, r4
   26f9e:	d214      	bcs.n	26fca <two_way_long_needle+0x27a>
   26fa0:	9b01      	ldr	r3, [sp, #4]
   26fa2:	eb0b 0206 	add.w	r2, fp, r6
   26fa6:	eb08 0c03 	add.w	ip, r8, r3
   26faa:	4452      	add	r2, sl
   26fac:	465b      	mov	r3, fp
   26fae:	e002      	b.n	26fb6 <two_way_long_needle+0x266>
   26fb0:	3301      	adds	r3, #1
   26fb2:	42a3      	cmp	r3, r4
   26fb4:	d209      	bcs.n	26fca <two_way_long_needle+0x27a>
   26fb6:	f812 1b01 	ldrb.w	r1, [r2], #1
   26fba:	f81c ef01 	ldrb.w	lr, [ip, #1]!
   26fbe:	458e      	cmp	lr, r1
   26fc0:	d0f6      	beq.n	26fb0 <two_way_long_needle+0x260>
   26fc2:	9a02      	ldr	r2, [sp, #8]
   26fc4:	4416      	add	r6, r2
   26fc6:	441e      	add	r6, r3
   26fc8:	e7db      	b.n	26f82 <two_way_long_needle+0x232>
   26fca:	f1bb 0f00 	cmp.w	fp, #0
   26fce:	f43f af61 	beq.w	26e94 <two_way_long_needle+0x144>
   26fd2:	eb0b 0c06 	add.w	ip, fp, r6
   26fd6:	eb08 020b 	add.w	r2, r8, fp
   26fda:	44d4      	add	ip, sl
   26fdc:	e002      	b.n	26fe4 <two_way_long_needle+0x294>
   26fde:	4543      	cmp	r3, r8
   26fe0:	f43f af58 	beq.w	26e94 <two_way_long_needle+0x144>
   26fe4:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   26fe8:	f81c 1d01 	ldrb.w	r1, [ip, #-1]!
   26fec:	4613      	mov	r3, r2
   26fee:	458e      	cmp	lr, r1
   26ff0:	d0f5      	beq.n	26fde <two_way_long_needle+0x28e>
   26ff2:	9b03      	ldr	r3, [sp, #12]
   26ff4:	e7c4      	b.n	26f80 <two_way_long_needle+0x230>
   26ff6:	465b      	mov	r3, fp
   26ff8:	e796      	b.n	26f28 <two_way_long_needle+0x1d8>
   26ffa:	ab06      	add	r3, sp, #24
   26ffc:	f04f 34ff 	mov.w	r4, #4294967295
   27000:	9300      	str	r3, [sp, #0]
   27002:	e713      	b.n	26e2c <two_way_long_needle+0xdc>
   27004:	f04f 0b00 	mov.w	fp, #0
   27008:	9301      	str	r3, [sp, #4]
   2700a:	e6f5      	b.n	26df8 <two_way_long_needle+0xa8>

0002700c <strstr>:
   2700c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27010:	460e      	mov	r6, r1
   27012:	7809      	ldrb	r1, [r1, #0]
   27014:	b090      	sub	sp, #64	; 0x40
   27016:	4604      	mov	r4, r0
   27018:	2900      	cmp	r1, #0
   2701a:	d051      	beq.n	270c0 <strstr+0xb4>
   2701c:	7875      	ldrb	r5, [r6, #1]
   2701e:	2d00      	cmp	r5, #0
   27020:	f000 8083 	beq.w	2712a <strstr+0x11e>
   27024:	78b3      	ldrb	r3, [r6, #2]
   27026:	2b00      	cmp	r3, #0
   27028:	d04e      	beq.n	270c8 <strstr+0xbc>
   2702a:	78f2      	ldrb	r2, [r6, #3]
   2702c:	2a00      	cmp	r2, #0
   2702e:	f000 8085 	beq.w	2713c <strstr+0x130>
   27032:	7933      	ldrb	r3, [r6, #4]
   27034:	2b00      	cmp	r3, #0
   27036:	d05b      	beq.n	270f0 <strstr+0xe4>
   27038:	4630      	mov	r0, r6
   2703a:	f7ff fded 	bl	26c18 <strlen>
   2703e:	4607      	mov	r7, r0
   27040:	4620      	mov	r0, r4
   27042:	f447 7100 	orr.w	r1, r7, #512	; 0x200
   27046:	f004 fd95 	bl	2bb74 <strnlen>
   2704a:	4287      	cmp	r7, r0
   2704c:	d84b      	bhi.n	270e6 <strstr+0xda>
   2704e:	2ffe      	cmp	r7, #254	; 0xfe
   27050:	f200 808f 	bhi.w	27172 <strstr+0x166>
   27054:	eba0 0807 	sub.w	r8, r0, r7
   27058:	2240      	movs	r2, #64	; 0x40
   2705a:	1c79      	adds	r1, r7, #1
   2705c:	4668      	mov	r0, sp
   2705e:	44a0      	add	r8, r4
   27060:	f7ff f9ca 	bl	263f8 <memset>
   27064:	b17f      	cbz	r7, 27086 <strstr+0x7a>
   27066:	1e72      	subs	r2, r6, #1
   27068:	b2fd      	uxtb	r5, r7
   2706a:	19d0      	adds	r0, r2, r7
   2706c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   27070:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
   27074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27078:	1ab1      	subs	r1, r6, r2
   2707a:	4282      	cmp	r2, r0
   2707c:	4463      	add	r3, ip
   2707e:	4429      	add	r1, r5
   27080:	f803 1c40 	strb.w	r1, [r3, #-64]
   27084:	d1f2      	bne.n	2706c <strstr+0x60>
   27086:	3c01      	subs	r4, #1
   27088:	aa10      	add	r2, sp, #64	; 0x40
   2708a:	5de3      	ldrb	r3, [r4, r7]
   2708c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27090:	4413      	add	r3, r2
   27092:	f813 0c40 	ldrb.w	r0, [r3, #-64]
   27096:	4404      	add	r4, r0
   27098:	45a0      	cmp	r8, r4
   2709a:	d203      	bcs.n	270a4 <strstr+0x98>
   2709c:	e037      	b.n	2710e <strstr+0x102>
   2709e:	442c      	add	r4, r5
   270a0:	45a0      	cmp	r8, r4
   270a2:	d334      	bcc.n	2710e <strstr+0x102>
   270a4:	5de5      	ldrb	r5, [r4, r7]
   270a6:	ab10      	add	r3, sp, #64	; 0x40
   270a8:	463a      	mov	r2, r7
   270aa:	4631      	mov	r1, r6
   270ac:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   270b0:	4620      	mov	r0, r4
   270b2:	441d      	add	r5, r3
   270b4:	f815 5c40 	ldrb.w	r5, [r5, #-64]
   270b8:	f7ff f970 	bl	2639c <memcmp>
   270bc:	2800      	cmp	r0, #0
   270be:	d1ee      	bne.n	2709e <strstr+0x92>
   270c0:	4620      	mov	r0, r4
   270c2:	b010      	add	sp, #64	; 0x40
   270c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   270c8:	7802      	ldrb	r2, [r0, #0]
   270ca:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   270ce:	b152      	cbz	r2, 270e6 <strstr+0xda>
   270d0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   270d4:	4620      	mov	r0, r4
   270d6:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   270da:	4299      	cmp	r1, r3
   270dc:	d02c      	beq.n	27138 <strstr+0x12c>
   270de:	2a00      	cmp	r2, #0
   270e0:	d1f6      	bne.n	270d0 <strstr+0xc4>
   270e2:	4299      	cmp	r1, r3
   270e4:	d028      	beq.n	27138 <strstr+0x12c>
   270e6:	2400      	movs	r4, #0
   270e8:	4620      	mov	r0, r4
   270ea:	b010      	add	sp, #64	; 0x40
   270ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   270f0:	7802      	ldrb	r2, [r0, #0]
   270f2:	2a00      	cmp	r2, #0
   270f4:	d0f7      	beq.n	270e6 <strstr+0xda>
   270f6:	6831      	ldr	r1, [r6, #0]
   270f8:	ba09      	rev	r1, r1
   270fa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   270fe:	4620      	mov	r0, r4
   27100:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   27104:	b392      	cbz	r2, 2716c <strstr+0x160>
   27106:	428b      	cmp	r3, r1
   27108:	d1f7      	bne.n	270fa <strstr+0xee>
   2710a:	1ec4      	subs	r4, r0, #3
   2710c:	e7d8      	b.n	270c0 <strstr+0xb4>
   2710e:	f818 3007 	ldrb.w	r3, [r8, r7]
   27112:	eb08 0007 	add.w	r0, r8, r7
   27116:	2b00      	cmp	r3, #0
   27118:	d0e5      	beq.n	270e6 <strstr+0xda>
   2711a:	f44f 6100 	mov.w	r1, #2048	; 0x800
   2711e:	f004 fd29 	bl	2bb74 <strnlen>
   27122:	4480      	add	r8, r0
   27124:	45a0      	cmp	r8, r4
   27126:	d2ae      	bcs.n	27086 <strstr+0x7a>
   27128:	e7dd      	b.n	270e6 <strstr+0xda>
   2712a:	f7ff fcaf 	bl	26a8c <strchr>
   2712e:	4604      	mov	r4, r0
   27130:	4620      	mov	r0, r4
   27132:	b010      	add	sp, #64	; 0x40
   27134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27138:	1e44      	subs	r4, r0, #1
   2713a:	e7c1      	b.n	270c0 <strstr+0xb4>
   2713c:	042d      	lsls	r5, r5, #16
   2713e:	7806      	ldrb	r6, [r0, #0]
   27140:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
   27144:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
   27148:	2e00      	cmp	r6, #0
   2714a:	d0cc      	beq.n	270e6 <strstr+0xda>
   2714c:	ea46 0102 	orr.w	r1, r6, r2
   27150:	4620      	mov	r0, r4
   27152:	f814 6f01 	ldrb.w	r6, [r4, #1]!
   27156:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
   2715a:	ea4f 2201 	mov.w	r2, r1, lsl #8
   2715e:	d001      	beq.n	27164 <strstr+0x158>
   27160:	2e00      	cmp	r6, #0
   27162:	d1f3      	bne.n	2714c <strstr+0x140>
   27164:	4293      	cmp	r3, r2
   27166:	d1be      	bne.n	270e6 <strstr+0xda>
   27168:	1e84      	subs	r4, r0, #2
   2716a:	e7a9      	b.n	270c0 <strstr+0xb4>
   2716c:	428b      	cmp	r3, r1
   2716e:	d1ba      	bne.n	270e6 <strstr+0xda>
   27170:	e7cb      	b.n	2710a <strstr+0xfe>
   27172:	4601      	mov	r1, r0
   27174:	463b      	mov	r3, r7
   27176:	4620      	mov	r0, r4
   27178:	4632      	mov	r2, r6
   2717a:	f7ff fde9 	bl	26d50 <two_way_long_needle>
   2717e:	4604      	mov	r4, r0
   27180:	e79e      	b.n	270c0 <strstr+0xb4>
   27182:	bf00      	nop

00027184 <sulp>:
   27184:	b570      	push	{r4, r5, r6, lr}
   27186:	4604      	mov	r4, r0
   27188:	460d      	mov	r5, r1
   2718a:	4616      	mov	r6, r2
   2718c:	ec45 4b10 	vmov	d0, r4, r5
   27190:	f004 fa76 	bl	2b680 <__ulp>
   27194:	ec51 0b10 	vmov	r0, r1, d0
   27198:	b16e      	cbz	r6, 271b6 <sulp+0x32>
   2719a:	f3c5 530a 	ubfx	r3, r5, #20, #11
   2719e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   271a2:	2b00      	cmp	r3, #0
   271a4:	dd07      	ble.n	271b6 <sulp+0x32>
   271a6:	4a04      	ldr	r2, [pc, #16]	; (271b8 <sulp+0x34>)
   271a8:	2400      	movs	r4, #0
   271aa:	eb02 5503 	add.w	r5, r2, r3, lsl #20
   271ae:	4622      	mov	r2, r4
   271b0:	462b      	mov	r3, r5
   271b2:	f7e5 fe1f 	bl	cdf4 <__aeabi_dmul>
   271b6:	bd70      	pop	{r4, r5, r6, pc}
   271b8:	3ff00000 	.word	0x3ff00000

000271bc <_strtod_r>:
   271bc:	4b01      	ldr	r3, [pc, #4]	; (271c4 <_strtod_r+0x8>)
   271be:	f7e6 bbfb 	b.w	d9b8 <_strtod_l>
   271c2:	bf00      	nop
   271c4:	200208f0 	.word	0x200208f0

000271c8 <_strtol_l.isra.0>:
   271c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   271cc:	4682      	mov	sl, r0
   271ce:	460d      	mov	r5, r1
   271d0:	4839      	ldr	r0, [pc, #228]	; (272b8 <_strtol_l.isra.0+0xf0>)
   271d2:	462f      	mov	r7, r5
   271d4:	f815 4b01 	ldrb.w	r4, [r5], #1
   271d8:	5d06      	ldrb	r6, [r0, r4]
   271da:	f016 0608 	ands.w	r6, r6, #8
   271de:	d1f8      	bne.n	271d2 <_strtol_l.isra.0+0xa>
   271e0:	2c2d      	cmp	r4, #45	; 0x2d
   271e2:	d04d      	beq.n	27280 <_strtol_l.isra.0+0xb8>
   271e4:	2c2b      	cmp	r4, #43	; 0x2b
   271e6:	d03a      	beq.n	2725e <_strtol_l.isra.0+0x96>
   271e8:	46a3      	mov	fp, r4
   271ea:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   271ee:	f033 0010 	bics.w	r0, r3, #16
   271f2:	d104      	bne.n	271fe <_strtol_l.isra.0+0x36>
   271f4:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   271f8:	d049      	beq.n	2728e <_strtol_l.isra.0+0xc6>
   271fa:	b903      	cbnz	r3, 271fe <_strtol_l.isra.0+0x36>
   271fc:	230a      	movs	r3, #10
   271fe:	469e      	mov	lr, r3
   27200:	2700      	movs	r7, #0
   27202:	fbb9 fcfe 	udiv	ip, r9, lr
   27206:	4638      	mov	r0, r7
   27208:	fb0e 981c 	mls	r8, lr, ip, r9
   2720c:	e00e      	b.n	2722c <_strtol_l.isra.0+0x64>
   2720e:	f1ab 0437 	sub.w	r4, fp, #55	; 0x37
   27212:	42a3      	cmp	r3, r4
   27214:	dd1a      	ble.n	2724c <_strtol_l.isra.0+0x84>
   27216:	2f00      	cmp	r7, #0
   27218:	db04      	blt.n	27224 <_strtol_l.isra.0+0x5c>
   2721a:	4584      	cmp	ip, r0
   2721c:	d302      	bcc.n	27224 <_strtol_l.isra.0+0x5c>
   2721e:	d124      	bne.n	2726a <_strtol_l.isra.0+0xa2>
   27220:	45a0      	cmp	r8, r4
   27222:	da22      	bge.n	2726a <_strtol_l.isra.0+0xa2>
   27224:	f04f 37ff 	mov.w	r7, #4294967295
   27228:	f815 bb01 	ldrb.w	fp, [r5], #1
   2722c:	f1ab 0430 	sub.w	r4, fp, #48	; 0x30
   27230:	2c09      	cmp	r4, #9
   27232:	d9ee      	bls.n	27212 <_strtol_l.isra.0+0x4a>
   27234:	f1ab 0441 	sub.w	r4, fp, #65	; 0x41
   27238:	2c19      	cmp	r4, #25
   2723a:	d9e8      	bls.n	2720e <_strtol_l.isra.0+0x46>
   2723c:	f1ab 0461 	sub.w	r4, fp, #97	; 0x61
   27240:	2c19      	cmp	r4, #25
   27242:	d803      	bhi.n	2724c <_strtol_l.isra.0+0x84>
   27244:	f1ab 0457 	sub.w	r4, fp, #87	; 0x57
   27248:	42a3      	cmp	r3, r4
   2724a:	dce4      	bgt.n	27216 <_strtol_l.isra.0+0x4e>
   2724c:	1c7b      	adds	r3, r7, #1
   2724e:	d010      	beq.n	27272 <_strtol_l.isra.0+0xaa>
   27250:	b106      	cbz	r6, 27254 <_strtol_l.isra.0+0x8c>
   27252:	4240      	negs	r0, r0
   27254:	b10a      	cbz	r2, 2725a <_strtol_l.isra.0+0x92>
   27256:	bb6f      	cbnz	r7, 272b4 <_strtol_l.isra.0+0xec>
   27258:	6011      	str	r1, [r2, #0]
   2725a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2725e:	f895 b000 	ldrb.w	fp, [r5]
   27262:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   27266:	1cbd      	adds	r5, r7, #2
   27268:	e7c1      	b.n	271ee <_strtol_l.isra.0+0x26>
   2726a:	fb0e 4000 	mla	r0, lr, r0, r4
   2726e:	2701      	movs	r7, #1
   27270:	e7da      	b.n	27228 <_strtol_l.isra.0+0x60>
   27272:	2322      	movs	r3, #34	; 0x22
   27274:	f8ca 3000 	str.w	r3, [sl]
   27278:	b1a2      	cbz	r2, 272a4 <_strtol_l.isra.0+0xdc>
   2727a:	1e69      	subs	r1, r5, #1
   2727c:	4648      	mov	r0, r9
   2727e:	e7eb      	b.n	27258 <_strtol_l.isra.0+0x90>
   27280:	f895 b000 	ldrb.w	fp, [r5]
   27284:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   27288:	1cbd      	adds	r5, r7, #2
   2728a:	2601      	movs	r6, #1
   2728c:	e7af      	b.n	271ee <_strtol_l.isra.0+0x26>
   2728e:	7828      	ldrb	r0, [r5, #0]
   27290:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   27294:	2858      	cmp	r0, #88	; 0x58
   27296:	d108      	bne.n	272aa <_strtol_l.isra.0+0xe2>
   27298:	2310      	movs	r3, #16
   2729a:	f895 b001 	ldrb.w	fp, [r5, #1]
   2729e:	3502      	adds	r5, #2
   272a0:	469e      	mov	lr, r3
   272a2:	e7ad      	b.n	27200 <_strtol_l.isra.0+0x38>
   272a4:	4648      	mov	r0, r9
   272a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   272aa:	2b00      	cmp	r3, #0
   272ac:	d1a7      	bne.n	271fe <_strtol_l.isra.0+0x36>
   272ae:	2308      	movs	r3, #8
   272b0:	469e      	mov	lr, r3
   272b2:	e7a5      	b.n	27200 <_strtol_l.isra.0+0x38>
   272b4:	4681      	mov	r9, r0
   272b6:	e7e0      	b.n	2727a <_strtol_l.isra.0+0xb2>
   272b8:	0002f961 	.word	0x0002f961

000272bc <_strtol_r>:
   272bc:	f7ff bf84 	b.w	271c8 <_strtol_l.isra.0>

000272c0 <strtol>:
   272c0:	b430      	push	{r4, r5}
   272c2:	460d      	mov	r5, r1
   272c4:	4c03      	ldr	r4, [pc, #12]	; (272d4 <strtol+0x14>)
   272c6:	4613      	mov	r3, r2
   272c8:	4601      	mov	r1, r0
   272ca:	462a      	mov	r2, r5
   272cc:	6820      	ldr	r0, [r4, #0]
   272ce:	bc30      	pop	{r4, r5}
   272d0:	f7ff bf7a 	b.w	271c8 <_strtol_l.isra.0>
   272d4:	200204d8 	.word	0x200204d8

000272d8 <_strtoul_l.isra.0>:
   272d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   272dc:	468c      	mov	ip, r1
   272de:	4686      	mov	lr, r0
   272e0:	4840      	ldr	r0, [pc, #256]	; (273e4 <_strtoul_l.isra.0+0x10c>)
   272e2:	4667      	mov	r7, ip
   272e4:	f81c 4b01 	ldrb.w	r4, [ip], #1
   272e8:	5d06      	ldrb	r6, [r0, r4]
   272ea:	f016 0608 	ands.w	r6, r6, #8
   272ee:	d1f8      	bne.n	272e2 <_strtoul_l.isra.0+0xa>
   272f0:	2c2d      	cmp	r4, #45	; 0x2d
   272f2:	d057      	beq.n	273a4 <_strtoul_l.isra.0+0xcc>
   272f4:	2c2b      	cmp	r4, #43	; 0x2b
   272f6:	d00d      	beq.n	27314 <_strtoul_l.isra.0+0x3c>
   272f8:	4625      	mov	r5, r4
   272fa:	f033 0010 	bics.w	r0, r3, #16
   272fe:	d110      	bne.n	27322 <_strtoul_l.isra.0+0x4a>
   27300:	2d30      	cmp	r5, #48	; 0x30
   27302:	d055      	beq.n	273b0 <_strtoul_l.isra.0+0xd8>
   27304:	b96b      	cbnz	r3, 27322 <_strtoul_l.isra.0+0x4a>
   27306:	230a      	movs	r3, #10
   27308:	f04f 0905 	mov.w	r9, #5
   2730c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 273e8 <_strtoul_l.isra.0+0x110>
   27310:	469a      	mov	sl, r3
   27312:	e00f      	b.n	27334 <_strtoul_l.isra.0+0x5c>
   27314:	f033 0010 	bics.w	r0, r3, #16
   27318:	f89c 5000 	ldrb.w	r5, [ip]
   2731c:	f107 0c02 	add.w	ip, r7, #2
   27320:	d0ee      	beq.n	27300 <_strtoul_l.isra.0+0x28>
   27322:	f04f 38ff 	mov.w	r8, #4294967295
   27326:	469a      	mov	sl, r3
   27328:	fbb8 f8f3 	udiv	r8, r8, r3
   2732c:	fb03 f908 	mul.w	r9, r3, r8
   27330:	ea6f 0909 	mvn.w	r9, r9
   27334:	2700      	movs	r7, #0
   27336:	4638      	mov	r0, r7
   27338:	e00e      	b.n	27358 <_strtoul_l.isra.0+0x80>
   2733a:	f1a5 0437 	sub.w	r4, r5, #55	; 0x37
   2733e:	42a3      	cmp	r3, r4
   27340:	dd1a      	ble.n	27378 <_strtoul_l.isra.0+0xa0>
   27342:	2f00      	cmp	r7, #0
   27344:	db04      	blt.n	27350 <_strtoul_l.isra.0+0x78>
   27346:	4540      	cmp	r0, r8
   27348:	d802      	bhi.n	27350 <_strtoul_l.isra.0+0x78>
   2734a:	d11e      	bne.n	2738a <_strtoul_l.isra.0+0xb2>
   2734c:	454c      	cmp	r4, r9
   2734e:	dd1c      	ble.n	2738a <_strtoul_l.isra.0+0xb2>
   27350:	f04f 37ff 	mov.w	r7, #4294967295
   27354:	f81c 5b01 	ldrb.w	r5, [ip], #1
   27358:	f1a5 0430 	sub.w	r4, r5, #48	; 0x30
   2735c:	2c09      	cmp	r4, #9
   2735e:	d9ee      	bls.n	2733e <_strtoul_l.isra.0+0x66>
   27360:	f1a5 0441 	sub.w	r4, r5, #65	; 0x41
   27364:	2c19      	cmp	r4, #25
   27366:	d9e8      	bls.n	2733a <_strtoul_l.isra.0+0x62>
   27368:	f1a5 0461 	sub.w	r4, r5, #97	; 0x61
   2736c:	2c19      	cmp	r4, #25
   2736e:	d803      	bhi.n	27378 <_strtoul_l.isra.0+0xa0>
   27370:	f1a5 0457 	sub.w	r4, r5, #87	; 0x57
   27374:	42a3      	cmp	r3, r4
   27376:	dce4      	bgt.n	27342 <_strtoul_l.isra.0+0x6a>
   27378:	1c7b      	adds	r3, r7, #1
   2737a:	d00a      	beq.n	27392 <_strtoul_l.isra.0+0xba>
   2737c:	b106      	cbz	r6, 27380 <_strtoul_l.isra.0+0xa8>
   2737e:	4240      	negs	r0, r0
   27380:	b10a      	cbz	r2, 27386 <_strtoul_l.isra.0+0xae>
   27382:	b967      	cbnz	r7, 2739e <_strtoul_l.isra.0+0xc6>
   27384:	6011      	str	r1, [r2, #0]
   27386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2738a:	fb0a 4000 	mla	r0, sl, r0, r4
   2738e:	2701      	movs	r7, #1
   27390:	e7e0      	b.n	27354 <_strtoul_l.isra.0+0x7c>
   27392:	2322      	movs	r3, #34	; 0x22
   27394:	4638      	mov	r0, r7
   27396:	f8ce 3000 	str.w	r3, [lr]
   2739a:	2a00      	cmp	r2, #0
   2739c:	d0f3      	beq.n	27386 <_strtoul_l.isra.0+0xae>
   2739e:	f10c 31ff 	add.w	r1, ip, #4294967295
   273a2:	e7ef      	b.n	27384 <_strtoul_l.isra.0+0xac>
   273a4:	f89c 5000 	ldrb.w	r5, [ip]
   273a8:	2601      	movs	r6, #1
   273aa:	f107 0c02 	add.w	ip, r7, #2
   273ae:	e7a4      	b.n	272fa <_strtoul_l.isra.0+0x22>
   273b0:	f89c 0000 	ldrb.w	r0, [ip]
   273b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   273b8:	2858      	cmp	r0, #88	; 0x58
   273ba:	d10a      	bne.n	273d2 <_strtoul_l.isra.0+0xfa>
   273bc:	2310      	movs	r3, #16
   273be:	f89c 5001 	ldrb.w	r5, [ip, #1]
   273c2:	f04f 090f 	mov.w	r9, #15
   273c6:	f10c 0c02 	add.w	ip, ip, #2
   273ca:	469a      	mov	sl, r3
   273cc:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   273d0:	e7b0      	b.n	27334 <_strtoul_l.isra.0+0x5c>
   273d2:	2b00      	cmp	r3, #0
   273d4:	d1a5      	bne.n	27322 <_strtoul_l.isra.0+0x4a>
   273d6:	2308      	movs	r3, #8
   273d8:	f04f 0907 	mov.w	r9, #7
   273dc:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   273e0:	469a      	mov	sl, r3
   273e2:	e7a7      	b.n	27334 <_strtoul_l.isra.0+0x5c>
   273e4:	0002f961 	.word	0x0002f961
   273e8:	19999999 	.word	0x19999999

000273ec <_strtoul_r>:
   273ec:	f7ff bf74 	b.w	272d8 <_strtoul_l.isra.0>

000273f0 <strtoul>:
   273f0:	b430      	push	{r4, r5}
   273f2:	460d      	mov	r5, r1
   273f4:	4c03      	ldr	r4, [pc, #12]	; (27404 <strtoul+0x14>)
   273f6:	4613      	mov	r3, r2
   273f8:	4601      	mov	r1, r0
   273fa:	462a      	mov	r2, r5
   273fc:	6820      	ldr	r0, [r4, #0]
   273fe:	bc30      	pop	{r4, r5}
   27400:	f7ff bf6a 	b.w	272d8 <_strtoul_l.isra.0>
   27404:	200204d8 	.word	0x200204d8

00027408 <__ssvfscanf_r>:
   27408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2740c:	ed2d 8b02 	vpush	{d8}
   27410:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
   27414:	468b      	mov	fp, r1
   27416:	4682      	mov	sl, r0
   27418:	af02      	add	r7, sp, #8
   2741a:	62bb      	str	r3, [r7, #40]	; 0x28
   2741c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   27420:	0499      	lsls	r1, r3, #18
   27422:	d409      	bmi.n	27438 <__ssvfscanf_r+0x30>
   27424:	f8db 1064 	ldr.w	r1, [fp, #100]	; 0x64
   27428:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2742c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   27430:	f8ab 300c 	strh.w	r3, [fp, #12]
   27434:	f8cb 1064 	str.w	r1, [fp, #100]	; 0x64
   27438:	f812 3b01 	ldrb.w	r3, [r2], #1
   2743c:	63fa      	str	r2, [r7, #60]	; 0x3c
   2743e:	647b      	str	r3, [r7, #68]	; 0x44
   27440:	2b00      	cmp	r3, #0
   27442:	f001 80fc 	beq.w	2863e <_flash_used+0x5ce>
   27446:	2200      	movs	r2, #0
   27448:	ee08 aa10 	vmov	s16, sl
   2744c:	623a      	str	r2, [r7, #32]
   2744e:	4692      	mov	sl, r2
   27450:	637a      	str	r2, [r7, #52]	; 0x34
   27452:	62fa      	str	r2, [r7, #44]	; 0x2c
   27454:	627a      	str	r2, [r7, #36]	; 0x24
   27456:	633a      	str	r2, [r7, #48]	; 0x30
   27458:	4a7c      	ldr	r2, [pc, #496]	; (2764c <__ssvfscanf_r+0x244>)
   2745a:	5cd5      	ldrb	r5, [r2, r3]
   2745c:	f015 0508 	ands.w	r5, r5, #8
   27460:	f040 80ac 	bne.w	275bc <__ssvfscanf_r+0x1b4>
   27464:	2b25      	cmp	r3, #37	; 0x25
   27466:	f040 8088 	bne.w	2757a <__ssvfscanf_r+0x172>
   2746a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   2746c:	462c      	mov	r4, r5
   2746e:	46a8      	mov	r8, r5
   27470:	7802      	ldrb	r2, [r0, #0]
   27472:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
   27476:	1c41      	adds	r1, r0, #1
   27478:	2b55      	cmp	r3, #85	; 0x55
   2747a:	d86d      	bhi.n	27558 <__ssvfscanf_r+0x150>
   2747c:	e8df f013 	tbh	[pc, r3, lsl #1]
   27480:	006c007c 	.word	0x006c007c
   27484:	006c006c 	.word	0x006c006c
   27488:	04cf006c 	.word	0x04cf006c
   2748c:	006c006c 	.word	0x006c006c
   27490:	006c006c 	.word	0x006c006c
   27494:	00c5006c 	.word	0x00c5006c
   27498:	00c500c5 	.word	0x00c500c5
   2749c:	00c500c5 	.word	0x00c500c5
   274a0:	00c500c5 	.word	0x00c500c5
   274a4:	00c500c5 	.word	0x00c500c5
   274a8:	006c00c5 	.word	0x006c00c5
   274ac:	006c006c 	.word	0x006c006c
   274b0:	006c006c 	.word	0x006c006c
   274b4:	006c006c 	.word	0x006c006c
   274b8:	006c00d1 	.word	0x006c00d1
   274bc:	04b104a1 	.word	0x04b104a1
   274c0:	00d100d1 	.word	0x00d100d1
   274c4:	006c00d1 	.word	0x006c00d1
   274c8:	006c006c 	.word	0x006c006c
   274cc:	0439006c 	.word	0x0439006c
   274d0:	006c006c 	.word	0x006c006c
   274d4:	006c04a8 	.word	0x006c04a8
   274d8:	006c006c 	.word	0x006c006c
   274dc:	006c049c 	.word	0x006c049c
   274e0:	006c006c 	.word	0x006c006c
   274e4:	0442006c 	.word	0x0442006c
   274e8:	006c006c 	.word	0x006c006c
   274ec:	006c04ba 	.word	0x006c04ba
   274f0:	006c006c 	.word	0x006c006c
   274f4:	006c006c 	.word	0x006c006c
   274f8:	006c00d1 	.word	0x006c00d1
   274fc:	04b304a3 	.word	0x04b304a3
   27500:	00d100d1 	.word	0x00d100d1
   27504:	04f500d1 	.word	0x04f500d1
   27508:	04390501 	.word	0x04390501
   2750c:	04c3006c 	.word	0x04c3006c
   27510:	04e604d8 	.word	0x04e604d8
   27514:	051104aa 	.word	0x051104aa
   27518:	006c006c 	.word	0x006c006c
   2751c:	0432049e 	.word	0x0432049e
   27520:	006c0509 	.word	0x006c0509
   27524:	0442006c 	.word	0x0442006c
   27528:	0432006c 	.word	0x0432006c
   2752c:	4659      	mov	r1, fp
   2752e:	ee18 0a10 	vmov	r0, s16
   27532:	f004 fd77 	bl	2c024 <__ssrefill_r>
   27536:	2800      	cmp	r0, #0
   27538:	f000 87c5 	beq.w	284c6 <_flash_used+0x456>
   2753c:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   27540:	2e00      	cmp	r6, #0
   27542:	f000 8216 	beq.w	27972 <__ssvfscanf_r+0x56a>
   27546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27548:	2b00      	cmp	r3, #0
   2754a:	f000 870c 	beq.w	28366 <_flash_used+0x2f6>
   2754e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   27552:	065a      	lsls	r2, r3, #25
   27554:	f100 8707 	bmi.w	28366 <_flash_used+0x2f6>
   27558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2755a:	b12b      	cbz	r3, 27568 <__ssvfscanf_r+0x160>
   2755c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2755e:	681e      	ldr	r6, [r3, #0]
   27560:	b116      	cbz	r6, 27568 <__ssvfscanf_r+0x160>
   27562:	4630      	mov	r0, r6
   27564:	f7fe fc06 	bl	25d74 <free>
   27568:	6b38      	ldr	r0, [r7, #48]	; 0x30
   2756a:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
   2756e:	46bd      	mov	sp, r7
   27570:	ecbd 8b02 	vpop	{d8}
   27574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27578:	63f9      	str	r1, [r7, #60]	; 0x3c
   2757a:	f8db 3004 	ldr.w	r3, [fp, #4]
   2757e:	2b00      	cmp	r3, #0
   27580:	dd3b      	ble.n	275fa <__ssvfscanf_r+0x1f2>
   27582:	f8db 3000 	ldr.w	r3, [fp]
   27586:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27588:	7819      	ldrb	r1, [r3, #0]
   2758a:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   2758e:	4291      	cmp	r1, r2
   27590:	d1e2      	bne.n	27558 <__ssvfscanf_r+0x150>
   27592:	f8db 2004 	ldr.w	r2, [fp, #4]
   27596:	3301      	adds	r3, #1
   27598:	f10a 0a01 	add.w	sl, sl, #1
   2759c:	3a01      	subs	r2, #1
   2759e:	e9cb 3200 	strd	r3, r2, [fp]
   275a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   275a4:	f812 3b01 	ldrb.w	r3, [r2], #1
   275a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   275aa:	647b      	str	r3, [r7, #68]	; 0x44
   275ac:	2b00      	cmp	r3, #0
   275ae:	d0d3      	beq.n	27558 <__ssvfscanf_r+0x150>
   275b0:	4a26      	ldr	r2, [pc, #152]	; (2764c <__ssvfscanf_r+0x244>)
   275b2:	5cd5      	ldrb	r5, [r2, r3]
   275b4:	f015 0508 	ands.w	r5, r5, #8
   275b8:	f43f af54 	beq.w	27464 <__ssvfscanf_r+0x5c>
   275bc:	f8db 2004 	ldr.w	r2, [fp, #4]
   275c0:	ee18 4a10 	vmov	r4, s16
   275c4:	e010      	b.n	275e8 <__ssvfscanf_r+0x1e0>
   275c6:	f8db 3000 	ldr.w	r3, [fp]
   275ca:	4920      	ldr	r1, [pc, #128]	; (2764c <__ssvfscanf_r+0x244>)
   275cc:	781a      	ldrb	r2, [r3, #0]
   275ce:	3301      	adds	r3, #1
   275d0:	5c8a      	ldrb	r2, [r1, r2]
   275d2:	0712      	lsls	r2, r2, #28
   275d4:	d5e5      	bpl.n	275a2 <__ssvfscanf_r+0x19a>
   275d6:	f8db 2004 	ldr.w	r2, [fp, #4]
   275da:	f10a 0a01 	add.w	sl, sl, #1
   275de:	f8cb 3000 	str.w	r3, [fp]
   275e2:	3a01      	subs	r2, #1
   275e4:	f8cb 2004 	str.w	r2, [fp, #4]
   275e8:	2a00      	cmp	r2, #0
   275ea:	dcec      	bgt.n	275c6 <__ssvfscanf_r+0x1be>
   275ec:	4659      	mov	r1, fp
   275ee:	4620      	mov	r0, r4
   275f0:	f004 fd18 	bl	2c024 <__ssrefill_r>
   275f4:	2800      	cmp	r0, #0
   275f6:	d0e6      	beq.n	275c6 <__ssvfscanf_r+0x1be>
   275f8:	e7d3      	b.n	275a2 <__ssvfscanf_r+0x19a>
   275fa:	4659      	mov	r1, fp
   275fc:	ee18 0a10 	vmov	r0, s16
   27600:	f004 fd10 	bl	2c024 <__ssrefill_r>
   27604:	2800      	cmp	r0, #0
   27606:	d0bc      	beq.n	27582 <__ssvfscanf_r+0x17a>
   27608:	e79d      	b.n	27546 <__ssvfscanf_r+0x13e>
   2760a:	f014 0f8f 	tst.w	r4, #143	; 0x8f
   2760e:	d1a3      	bne.n	27558 <__ssvfscanf_r+0x150>
   27610:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   27614:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   27618:	7842      	ldrb	r2, [r0, #1]
   2761a:	4608      	mov	r0, r1
   2761c:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   27620:	e727      	b.n	27472 <__ssvfscanf_r+0x6a>
   27622:	2604      	movs	r6, #4
   27624:	63f9      	str	r1, [r7, #60]	; 0x3c
   27626:	f8db 3004 	ldr.w	r3, [fp, #4]
   2762a:	2b00      	cmp	r3, #0
   2762c:	f340 8377 	ble.w	27d1e <__ssvfscanf_r+0x916>
   27630:	0662      	lsls	r2, r4, #25
   27632:	f140 837f 	bpl.w	27d34 <__ssvfscanf_r+0x92c>
   27636:	1e73      	subs	r3, r6, #1
   27638:	2b03      	cmp	r3, #3
   2763a:	f200 8632 	bhi.w	282a2 <_flash_used+0x232>
   2763e:	e8df f013 	tbh	[pc, r3, lsl #1]
   27642:	01b4      	.short	0x01b4
   27644:	00b2015c 	.word	0x00b2015c
   27648:	0007      	.short	0x0007
   2764a:	bf00      	nop
   2764c:	0002f961 	.word	0x0002f961
   27650:	ee18 0a10 	vmov	r0, s16
   27654:	f003 fb9e 	bl	2ad94 <_localeconv_r>
   27658:	f108 33ff 	add.w	r3, r8, #4294967295
   2765c:	6802      	ldr	r2, [r0, #0]
   2765e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   27662:	617a      	str	r2, [r7, #20]
   27664:	f240 84e4 	bls.w	28030 <__ssvfscanf_r+0xc28>
   27668:	f46f 7cae 	mvn.w	ip, #348	; 0x15c
   2766c:	eb08 030c 	add.w	r3, r8, ip
   27670:	f240 185d 	movw	r8, #349	; 0x15d
   27674:	60fb      	str	r3, [r7, #12]
   27676:	2600      	movs	r6, #0
   27678:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   2767c:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
   27680:	607d      	str	r5, [r7, #4]
   27682:	4699      	mov	r9, r3
   27684:	4645      	mov	r5, r8
   27686:	46d8      	mov	r8, fp
   27688:	46a3      	mov	fp, r4
   2768a:	4634      	mov	r4, r6
   2768c:	61fb      	str	r3, [r7, #28]
   2768e:	63be      	str	r6, [r7, #56]	; 0x38
   27690:	60be      	str	r6, [r7, #8]
   27692:	613e      	str	r6, [r7, #16]
   27694:	61be      	str	r6, [r7, #24]
   27696:	f8d8 1000 	ldr.w	r1, [r8]
   2769a:	7808      	ldrb	r0, [r1, #0]
   2769c:	f1a0 0e2b 	sub.w	lr, r0, #43	; 0x2b
   276a0:	f1be 0f4e 	cmp.w	lr, #78	; 0x4e
   276a4:	d850      	bhi.n	27748 <__ssvfscanf_r+0x340>
   276a6:	e8df f01e 	tbh	[pc, lr, lsl #1]
   276aa:	0275      	.short	0x0275
   276ac:	0275004f 	.word	0x0275004f
   276b0:	004f004f 	.word	0x004f004f
   276b4:	00780310 	.word	0x00780310
   276b8:	00780078 	.word	0x00780078
   276bc:	00780078 	.word	0x00780078
   276c0:	00780078 	.word	0x00780078
   276c4:	00780078 	.word	0x00780078
   276c8:	004f004f 	.word	0x004f004f
   276cc:	004f004f 	.word	0x004f004f
   276d0:	004f004f 	.word	0x004f004f
   276d4:	026e004f 	.word	0x026e004f
   276d8:	004f004f 	.word	0x004f004f
   276dc:	02f0004f 	.word	0x02f0004f
   276e0:	004f02eb 	.word	0x004f02eb
   276e4:	0291004f 	.word	0x0291004f
   276e8:	004f004f 	.word	0x004f004f
   276ec:	004f004f 	.word	0x004f004f
   276f0:	004f027c 	.word	0x004f027c
   276f4:	004f004f 	.word	0x004f004f
   276f8:	004f004f 	.word	0x004f004f
   276fc:	004f0269 	.word	0x004f0269
   27700:	004f004f 	.word	0x004f004f
   27704:	0264004f 	.word	0x0264004f
   27708:	004f004f 	.word	0x004f004f
   2770c:	004f004f 	.word	0x004f004f
   27710:	004f004f 	.word	0x004f004f
   27714:	026e004f 	.word	0x026e004f
   27718:	004f004f 	.word	0x004f004f
   2771c:	02f0004f 	.word	0x02f0004f
   27720:	004f02eb 	.word	0x004f02eb
   27724:	0291004f 	.word	0x0291004f
   27728:	004f004f 	.word	0x004f004f
   2772c:	004f004f 	.word	0x004f004f
   27730:	004f027c 	.word	0x004f027c
   27734:	004f004f 	.word	0x004f004f
   27738:	004f004f 	.word	0x004f004f
   2773c:	004f0269 	.word	0x004f0269
   27740:	004f004f 	.word	0x004f004f
   27744:	0264004f 	.word	0x0264004f
   27748:	697b      	ldr	r3, [r7, #20]
   2774a:	f893 e000 	ldrb.w	lr, [r3]
   2774e:	4586      	cmp	lr, r0
   27750:	d117      	bne.n	27782 <__ssvfscanf_r+0x37a>
   27752:	f41b 7f00 	tst.w	fp, #512	; 0x200
   27756:	d014      	beq.n	27782 <__ssvfscanf_r+0x37a>
   27758:	f42b 7b20 	bic.w	fp, fp, #640	; 0x280
   2775c:	61be      	str	r6, [r7, #24]
   2775e:	3d01      	subs	r5, #1
   27760:	f809 0b01 	strb.w	r0, [r9], #1
   27764:	f8d8 0004 	ldr.w	r0, [r8, #4]
   27768:	f10a 0a01 	add.w	sl, sl, #1
   2776c:	3801      	subs	r0, #1
   2776e:	2800      	cmp	r0, #0
   27770:	f8c8 0004 	str.w	r0, [r8, #4]
   27774:	f340 83a8 	ble.w	27ec8 <__ssvfscanf_r+0xac0>
   27778:	1c48      	adds	r0, r1, #1
   2777a:	f8c8 0000 	str.w	r0, [r8]
   2777e:	2d00      	cmp	r5, #0
   27780:	d189      	bne.n	27696 <__ssvfscanf_r+0x28e>
   27782:	617e      	str	r6, [r7, #20]
   27784:	4626      	mov	r6, r4
   27786:	697b      	ldr	r3, [r7, #20]
   27788:	465c      	mov	r4, fp
   2778a:	46c3      	mov	fp, r8
   2778c:	2b00      	cmp	r3, #0
   2778e:	f001 806a 	beq.w	28866 <_flash_used+0x7f6>
   27792:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   27796:	4635      	mov	r5, r6
   27798:	e229      	b.n	27bee <__ssvfscanf_r+0x7e6>
   2779a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2779c:	42e3      	cmn	r3, r4
   2779e:	d1f0      	bne.n	27782 <__ssvfscanf_r+0x37a>
   277a0:	f42b 7bc0 	bic.w	fp, fp, #384	; 0x180
   277a4:	e7db      	b.n	2775e <__ssvfscanf_r+0x356>
   277a6:	f108 33ff 	add.w	r3, r8, #4294967295
   277aa:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   277ae:	f240 83be 	bls.w	27f2e <__ssvfscanf_r+0xb26>
   277b2:	f46f 70ae 	mvn.w	r0, #348	; 0x15c
   277b6:	eb08 0900 	add.w	r9, r8, r0
   277ba:	f240 185d 	movw	r8, #349	; 0x15d
   277be:	2300      	movs	r3, #0
   277c0:	f507 75ac 	add.w	r5, r7, #344	; 0x158
   277c4:	465e      	mov	r6, fp
   277c6:	f8c7 9038 	str.w	r9, [r7, #56]	; 0x38
   277ca:	46d3      	mov	fp, sl
   277cc:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
   277d0:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
   277d4:	469a      	mov	sl, r3
   277d6:	61fd      	str	r5, [r7, #28]
   277d8:	6832      	ldr	r2, [r6, #0]
   277da:	7810      	ldrb	r0, [r2, #0]
   277dc:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   277e0:	2b4d      	cmp	r3, #77	; 0x4d
   277e2:	d861      	bhi.n	278a8 <__ssvfscanf_r+0x4a0>
   277e4:	e8df f013 	tbh	[pc, r3, lsl #1]
   277e8:	006002cd 	.word	0x006002cd
   277ec:	006002cd 	.word	0x006002cd
   277f0:	03600060 	.word	0x03600060
   277f4:	026b026b 	.word	0x026b026b
   277f8:	026b026b 	.word	0x026b026b
   277fc:	026b026b 	.word	0x026b026b
   27800:	02d3026b 	.word	0x02d3026b
   27804:	006002d3 	.word	0x006002d3
   27808:	00600060 	.word	0x00600060
   2780c:	00600060 	.word	0x00600060
   27810:	00600060 	.word	0x00600060
   27814:	004e004e 	.word	0x004e004e
   27818:	004e004e 	.word	0x004e004e
   2781c:	004e004e 	.word	0x004e004e
   27820:	00600060 	.word	0x00600060
   27824:	00600060 	.word	0x00600060
   27828:	00600060 	.word	0x00600060
   2782c:	00600060 	.word	0x00600060
   27830:	00600060 	.word	0x00600060
   27834:	00600060 	.word	0x00600060
   27838:	00600060 	.word	0x00600060
   2783c:	00600060 	.word	0x00600060
   27840:	02db0060 	.word	0x02db0060
   27844:	00600060 	.word	0x00600060
   27848:	00600060 	.word	0x00600060
   2784c:	00600060 	.word	0x00600060
   27850:	00600060 	.word	0x00600060
   27854:	004e004e 	.word	0x004e004e
   27858:	004e004e 	.word	0x004e004e
   2785c:	004e004e 	.word	0x004e004e
   27860:	00600060 	.word	0x00600060
   27864:	00600060 	.word	0x00600060
   27868:	00600060 	.word	0x00600060
   2786c:	00600060 	.word	0x00600060
   27870:	00600060 	.word	0x00600060
   27874:	00600060 	.word	0x00600060
   27878:	00600060 	.word	0x00600060
   2787c:	00600060 	.word	0x00600060
   27880:	02db0060 	.word	0x02db0060
   27884:	f1b9 0f0a 	cmp.w	r9, #10
   27888:	dd0e      	ble.n	278a8 <__ssvfscanf_r+0x4a0>
   2788a:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   2788e:	f805 0b01 	strb.w	r0, [r5], #1
   27892:	6873      	ldr	r3, [r6, #4]
   27894:	3b01      	subs	r3, #1
   27896:	2b00      	cmp	r3, #0
   27898:	6073      	str	r3, [r6, #4]
   2789a:	f340 8328 	ble.w	27eee <__ssvfscanf_r+0xae6>
   2789e:	3201      	adds	r2, #1
   278a0:	6032      	str	r2, [r6, #0]
   278a2:	f1b8 0801 	subs.w	r8, r8, #1
   278a6:	d197      	bne.n	277d8 <__ssvfscanf_r+0x3d0>
   278a8:	05e3      	lsls	r3, r4, #23
   278aa:	46d0      	mov	r8, sl
   278ac:	f8c7 9024 	str.w	r9, [r7, #36]	; 0x24
   278b0:	46da      	mov	sl, fp
   278b2:	46b3      	mov	fp, r6
   278b4:	d507      	bpl.n	278c6 <__ssvfscanf_r+0x4be>
   278b6:	69fb      	ldr	r3, [r7, #28]
   278b8:	429d      	cmp	r5, r3
   278ba:	f200 8593 	bhi.w	283e4 <_flash_used+0x374>
   278be:	69fb      	ldr	r3, [r7, #28]
   278c0:	429d      	cmp	r5, r3
   278c2:	f43f ae49 	beq.w	27558 <__ssvfscanf_r+0x150>
   278c6:	f014 0210 	ands.w	r2, r4, #16
   278ca:	f040 8321 	bne.w	27f10 <__ssvfscanf_r+0xb08>
   278ce:	6a3e      	ldr	r6, [r7, #32]
   278d0:	ee18 0a10 	vmov	r0, s16
   278d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   278d6:	69f9      	ldr	r1, [r7, #28]
   278d8:	702a      	strb	r2, [r5, #0]
   278da:	47b0      	blx	r6
   278dc:	06a6      	lsls	r6, r4, #26
   278de:	f100 830f 	bmi.w	27f00 <__ssvfscanf_r+0xaf8>
   278e2:	0721      	lsls	r1, r4, #28
   278e4:	f100 84ab 	bmi.w	2823e <_flash_used+0x1ce>
   278e8:	0762      	lsls	r2, r4, #29
   278ea:	f140 870d 	bpl.w	28708 <_flash_used+0x698>
   278ee:	6abc      	ldr	r4, [r7, #40]	; 0x28
   278f0:	f854 3b04 	ldr.w	r3, [r4], #4
   278f4:	8018      	strh	r0, [r3, #0]
   278f6:	62bc      	str	r4, [r7, #40]	; 0x28
   278f8:	e307      	b.n	27f0a <__ssvfscanf_r+0xb02>
   278fa:	f1b8 0f00 	cmp.w	r8, #0
   278fe:	bf08      	it	eq
   27900:	f04f 38ff 	moveq.w	r8, #4294967295
   27904:	f014 0501 	ands.w	r5, r4, #1
   27908:	f000 831c 	beq.w	27f44 <__ssvfscanf_r+0xb3c>
   2790c:	f014 0310 	ands.w	r3, r4, #16
   27910:	61fb      	str	r3, [r7, #28]
   27912:	f040 8604 	bne.w	2851e <_flash_used+0x4ae>
   27916:	0622      	lsls	r2, r4, #24
   27918:	6abe      	ldr	r6, [r7, #40]	; 0x28
   2791a:	f140 8693 	bpl.w	28644 <_flash_used+0x5d4>
   2791e:	f856 3b04 	ldr.w	r3, [r6], #4
   27922:	63bb      	str	r3, [r7, #56]	; 0x38
   27924:	2b00      	cmp	r3, #0
   27926:	f43f ae17 	beq.w	27558 <__ssvfscanf_r+0x150>
   2792a:	2080      	movs	r0, #128	; 0x80
   2792c:	f7fe fa1a 	bl	25d64 <malloc>
   27930:	4681      	mov	r9, r0
   27932:	2800      	cmp	r0, #0
   27934:	f000 8517 	beq.w	28366 <_flash_used+0x2f6>
   27938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2793a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2793c:	88dd      	ldrh	r5, [r3, #6]
   2793e:	889c      	ldrh	r4, [r3, #4]
   27940:	6010      	str	r0, [r2, #0]
   27942:	42a5      	cmp	r5, r4
   27944:	f080 8468 	bcs.w	28218 <_flash_used+0x1a8>
   27948:	6818      	ldr	r0, [r3, #0]
   2794a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2794c:	1c6b      	adds	r3, r5, #1
   2794e:	62be      	str	r6, [r7, #40]	; 0x28
   27950:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
   27954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27956:	f8c7 9018 	str.w	r9, [r7, #24]
   2795a:	80d3      	strh	r3, [r2, #6]
   2795c:	2320      	movs	r3, #32
   2795e:	617b      	str	r3, [r7, #20]
   27960:	f8db 3000 	ldr.w	r3, [fp]
   27964:	4ac4      	ldr	r2, [pc, #784]	; (27c78 <__ssvfscanf_r+0x870>)
   27966:	781b      	ldrb	r3, [r3, #0]
   27968:	5cd3      	ldrb	r3, [r2, r3]
   2796a:	f013 0508 	ands.w	r5, r3, #8
   2796e:	f000 8544 	beq.w	283fa <_flash_used+0x38a>
   27972:	69fb      	ldr	r3, [r7, #28]
   27974:	2b00      	cmp	r3, #0
   27976:	f47f ae14 	bne.w	275a2 <__ssvfscanf_r+0x19a>
   2797a:	69ba      	ldr	r2, [r7, #24]
   2797c:	f8c9 3000 	str.w	r3, [r9]
   27980:	eba9 0102 	sub.w	r1, r9, r2
   27984:	697a      	ldr	r2, [r7, #20]
   27986:	108b      	asrs	r3, r1, #2
   27988:	3301      	adds	r3, #1
   2798a:	429a      	cmp	r2, r3
   2798c:	f240 8170 	bls.w	27c70 <__ssvfscanf_r+0x868>
   27990:	6bbc      	ldr	r4, [r7, #56]	; 0x38
   27992:	2c00      	cmp	r4, #0
   27994:	f000 816c 	beq.w	27c70 <__ssvfscanf_r+0x868>
   27998:	3104      	adds	r1, #4
   2799a:	6820      	ldr	r0, [r4, #0]
   2799c:	f7fe fd88 	bl	264b0 <realloc>
   279a0:	2800      	cmp	r0, #0
   279a2:	f000 8165 	beq.w	27c70 <__ssvfscanf_r+0x868>
   279a6:	6020      	str	r0, [r4, #0]
   279a8:	e162      	b.n	27c70 <__ssvfscanf_r+0x868>
   279aa:	f1b8 0f00 	cmp.w	r8, #0
   279ae:	bf08      	it	eq
   279b0:	f04f 38ff 	moveq.w	r8, #4294967295
   279b4:	07e2      	lsls	r2, r4, #31
   279b6:	f140 833f 	bpl.w	28038 <__ssvfscanf_r+0xc30>
   279ba:	f014 0310 	ands.w	r3, r4, #16
   279be:	617b      	str	r3, [r7, #20]
   279c0:	f040 85f2 	bne.w	285a8 <_flash_used+0x538>
   279c4:	0623      	lsls	r3, r4, #24
   279c6:	6abe      	ldr	r6, [r7, #40]	; 0x28
   279c8:	f140 864a 	bpl.w	28660 <_flash_used+0x5f0>
   279cc:	f856 3b04 	ldr.w	r3, [r6], #4
   279d0:	60bb      	str	r3, [r7, #8]
   279d2:	2b00      	cmp	r3, #0
   279d4:	f43f adc0 	beq.w	27558 <__ssvfscanf_r+0x150>
   279d8:	2080      	movs	r0, #128	; 0x80
   279da:	f7fe f9c3 	bl	25d64 <malloc>
   279de:	4681      	mov	r9, r0
   279e0:	2800      	cmp	r0, #0
   279e2:	f000 84c0 	beq.w	28366 <_flash_used+0x2f6>
   279e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   279e8:	68ba      	ldr	r2, [r7, #8]
   279ea:	88dd      	ldrh	r5, [r3, #6]
   279ec:	889c      	ldrh	r4, [r3, #4]
   279ee:	6010      	str	r0, [r2, #0]
   279f0:	42a5      	cmp	r5, r4
   279f2:	f080 83ed 	bcs.w	281d0 <_flash_used+0x160>
   279f6:	6818      	ldr	r0, [r3, #0]
   279f8:	68ba      	ldr	r2, [r7, #8]
   279fa:	1c6b      	adds	r3, r5, #1
   279fc:	62be      	str	r6, [r7, #40]	; 0x28
   279fe:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
   27a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27a04:	f8c7 900c 	str.w	r9, [r7, #12]
   27a08:	80d3      	strh	r3, [r2, #6]
   27a0a:	2320      	movs	r3, #32
   27a0c:	613b      	str	r3, [r7, #16]
   27a0e:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   27a10:	2400      	movs	r4, #0
   27a12:	f8c7 a01c 	str.w	sl, [r7, #28]
   27a16:	ee18 aa10 	vmov	sl, s16
   27a1a:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   27a1e:	e050      	b.n	27ac2 <__ssvfscanf_r+0x6ba>
   27a20:	4605      	mov	r5, r0
   27a22:	f8c9 0000 	str.w	r0, [r9]
   27a26:	f107 0350 	add.w	r3, r7, #80	; 0x50
   27a2a:	2208      	movs	r2, #8
   27a2c:	2100      	movs	r1, #0
   27a2e:	4618      	mov	r0, r3
   27a30:	61bb      	str	r3, [r7, #24]
   27a32:	f7fe fce1 	bl	263f8 <memset>
   27a36:	4891      	ldr	r0, [pc, #580]	; (27c7c <__ssvfscanf_r+0x874>)
   27a38:	462a      	mov	r2, r5
   27a3a:	69bb      	ldr	r3, [r7, #24]
   27a3c:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
   27a40:	f107 0140 	add.w	r1, r7, #64	; 0x40
   27a44:	4605      	mov	r5, r0
   27a46:	4650      	mov	r0, sl
   27a48:	47a8      	blx	r5
   27a4a:	2801      	cmp	r0, #1
   27a4c:	f000 84b0 	beq.w	283b0 <_flash_used+0x340>
   27a50:	2200      	movs	r2, #0
   27a52:	f107 0358 	add.w	r3, r7, #88	; 0x58
   27a56:	5c9b      	ldrb	r3, [r3, r2]
   27a58:	2b00      	cmp	r3, #0
   27a5a:	f000 866e 	beq.w	2873a <_flash_used+0x6ca>
   27a5e:	69fb      	ldr	r3, [r7, #28]
   27a60:	2e03      	cmp	r6, #3
   27a62:	4443      	add	r3, r8
   27a64:	61fb      	str	r3, [r7, #28]
   27a66:	f000 84a7 	beq.w	283b8 <_flash_used+0x348>
   27a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27a6c:	3b01      	subs	r3, #1
   27a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   27a70:	697d      	ldr	r5, [r7, #20]
   27a72:	2d00      	cmp	r5, #0
   27a74:	f040 8499 	bne.w	283aa <_flash_used+0x33a>
   27a78:	f109 0904 	add.w	r9, r9, #4
   27a7c:	68f8      	ldr	r0, [r7, #12]
   27a7e:	693b      	ldr	r3, [r7, #16]
   27a80:	eba9 0400 	sub.w	r4, r9, r0
   27a84:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   27a88:	f200 848f 	bhi.w	283aa <_flash_used+0x33a>
   27a8c:	68ba      	ldr	r2, [r7, #8]
   27a8e:	2a00      	cmp	r2, #0
   27a90:	f000 848b 	beq.w	283aa <_flash_used+0x33a>
   27a94:	00d9      	lsls	r1, r3, #3
   27a96:	f7fe fd0b 	bl	264b0 <realloc>
   27a9a:	60f8      	str	r0, [r7, #12]
   27a9c:	2800      	cmp	r0, #0
   27a9e:	f000 8462 	beq.w	28366 <_flash_used+0x2f6>
   27aa2:	693b      	ldr	r3, [r7, #16]
   27aa4:	eb00 0904 	add.w	r9, r0, r4
   27aa8:	68ba      	ldr	r2, [r7, #8]
   27aaa:	462c      	mov	r4, r5
   27aac:	005b      	lsls	r3, r3, #1
   27aae:	6010      	str	r0, [r2, #0]
   27ab0:	613b      	str	r3, [r7, #16]
   27ab2:	f8db 3004 	ldr.w	r3, [fp, #4]
   27ab6:	2b00      	cmp	r3, #0
   27ab8:	dd3c      	ble.n	27b34 <__ssvfscanf_r+0x72c>
   27aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27abc:	2b00      	cmp	r3, #0
   27abe:	f000 857c 	beq.w	285ba <_flash_used+0x54a>
   27ac2:	f003 f961 	bl	2ad88 <__locale_mb_cur_max>
   27ac6:	42a0      	cmp	r0, r4
   27ac8:	f43f ad3d 	beq.w	27546 <__ssvfscanf_r+0x13e>
   27acc:	f8db 2000 	ldr.w	r2, [fp]
   27ad0:	f507 70ac 	add.w	r0, r7, #344	; 0x158
   27ad4:	f8db 3004 	ldr.w	r3, [fp, #4]
   27ad8:	2e03      	cmp	r6, #3
   27ada:	f812 1b01 	ldrb.w	r1, [r2], #1
   27ade:	f104 0801 	add.w	r8, r4, #1
   27ae2:	f103 33ff 	add.w	r3, r3, #4294967295
   27ae6:	5501      	strb	r1, [r0, r4]
   27ae8:	e9cb 2300 	strd	r2, r3, [fp]
   27aec:	f107 0348 	add.w	r3, r7, #72	; 0x48
   27af0:	63bb      	str	r3, [r7, #56]	; 0x38
   27af2:	d102      	bne.n	27afa <__ssvfscanf_r+0x6f2>
   27af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27af6:	2b04      	cmp	r3, #4
   27af8:	d004      	beq.n	27b04 <__ssvfscanf_r+0x6fc>
   27afa:	2208      	movs	r2, #8
   27afc:	2100      	movs	r1, #0
   27afe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   27b00:	f7fe fc7a 	bl	263f8 <memset>
   27b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27b06:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   27b0a:	4649      	mov	r1, r9
   27b0c:	4650      	mov	r0, sl
   27b0e:	9300      	str	r3, [sp, #0]
   27b10:	4643      	mov	r3, r8
   27b12:	f003 f9db 	bl	2aecc <_mbrtowc_r>
   27b16:	1c45      	adds	r5, r0, #1
   27b18:	4606      	mov	r6, r0
   27b1a:	f43f ad14 	beq.w	27546 <__ssvfscanf_r+0x13e>
   27b1e:	2800      	cmp	r0, #0
   27b20:	f43f af7e 	beq.w	27a20 <__ssvfscanf_r+0x618>
   27b24:	1cb0      	adds	r0, r6, #2
   27b26:	f040 86a1 	bne.w	2886c <_flash_used+0x7fc>
   27b2a:	f8db 3004 	ldr.w	r3, [fp, #4]
   27b2e:	4644      	mov	r4, r8
   27b30:	2b00      	cmp	r3, #0
   27b32:	dcc2      	bgt.n	27aba <__ssvfscanf_r+0x6b2>
   27b34:	4659      	mov	r1, fp
   27b36:	4650      	mov	r0, sl
   27b38:	f004 fa74 	bl	2c024 <__ssrefill_r>
   27b3c:	2800      	cmp	r0, #0
   27b3e:	d0bc      	beq.n	27aba <__ssvfscanf_r+0x6b2>
   27b40:	f8d7 a01c 	ldr.w	sl, [r7, #28]
   27b44:	62fe      	str	r6, [r7, #44]	; 0x2c
   27b46:	2c00      	cmp	r4, #0
   27b48:	f47f acfd 	bne.w	27546 <__ssvfscanf_r+0x13e>
   27b4c:	697b      	ldr	r3, [r7, #20]
   27b4e:	2b00      	cmp	r3, #0
   27b50:	f47f ad27 	bne.w	275a2 <__ssvfscanf_r+0x19a>
   27b54:	68fa      	ldr	r2, [r7, #12]
   27b56:	f8c9 3000 	str.w	r3, [r9]
   27b5a:	eba9 0102 	sub.w	r1, r9, r2
   27b5e:	693a      	ldr	r2, [r7, #16]
   27b60:	108b      	asrs	r3, r1, #2
   27b62:	3301      	adds	r3, #1
   27b64:	429a      	cmp	r2, r3
   27b66:	f240 8083 	bls.w	27c70 <__ssvfscanf_r+0x868>
   27b6a:	68bc      	ldr	r4, [r7, #8]
   27b6c:	2c00      	cmp	r4, #0
   27b6e:	d07f      	beq.n	27c70 <__ssvfscanf_r+0x868>
   27b70:	e712      	b.n	27998 <__ssvfscanf_r+0x590>
   27b72:	2c07      	cmp	r4, #7
   27b74:	f47f ae05 	bne.w	27782 <__ssvfscanf_r+0x37a>
   27b78:	2408      	movs	r4, #8
   27b7a:	e5f0      	b.n	2775e <__ssvfscanf_r+0x356>
   27b7c:	2c06      	cmp	r4, #6
   27b7e:	f47f ae00 	bne.w	27782 <__ssvfscanf_r+0x37a>
   27b82:	2407      	movs	r4, #7
   27b84:	e5eb      	b.n	2775e <__ssvfscanf_r+0x356>
   27b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27b88:	2b01      	cmp	r3, #1
   27b8a:	f47f adfa 	bne.w	27782 <__ssvfscanf_r+0x37a>
   27b8e:	2302      	movs	r3, #2
   27b90:	63bb      	str	r3, [r7, #56]	; 0x38
   27b92:	e5e4      	b.n	2775e <__ssvfscanf_r+0x356>
   27b94:	f01b 0f80 	tst.w	fp, #128	; 0x80
   27b98:	f43f adf3 	beq.w	27782 <__ssvfscanf_r+0x37a>
   27b9c:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   27ba0:	e5dd      	b.n	2775e <__ssvfscanf_r+0x356>
   27ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27ba4:	2b00      	cmp	r3, #0
   27ba6:	f040 81bb 	bne.w	27f20 <__ssvfscanf_r+0xb18>
   27baa:	2e00      	cmp	r6, #0
   27bac:	f040 81b8 	bne.w	27f20 <__ssvfscanf_r+0xb18>
   27bb0:	f40b 6ee0 	and.w	lr, fp, #1792	; 0x700
   27bb4:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
   27bb8:	f000 840e 	beq.w	283d8 <_flash_used+0x368>
   27bbc:	2c01      	cmp	r4, #1
   27bbe:	d002      	beq.n	27bc6 <__ssvfscanf_r+0x7be>
   27bc0:	2c04      	cmp	r4, #4
   27bc2:	f47f adde 	bne.w	27782 <__ssvfscanf_r+0x37a>
   27bc6:	1c62      	adds	r2, r4, #1
   27bc8:	b2d4      	uxtb	r4, r2
   27bca:	e5c8      	b.n	2775e <__ssvfscanf_r+0x356>
   27bcc:	2c00      	cmp	r4, #0
   27bce:	f040 8187 	bne.w	27ee0 <__ssvfscanf_r+0xad8>
   27bd2:	2e00      	cmp	r6, #0
   27bd4:	f040 8184 	bne.w	27ee0 <__ssvfscanf_r+0xad8>
   27bd8:	f40b 62e0 	and.w	r2, fp, #1792	; 0x700
   27bdc:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
   27be0:	f000 83f5 	beq.w	283ce <_flash_used+0x35e>
   27be4:	465c      	mov	r4, fp
   27be6:	2300      	movs	r3, #0
   27be8:	687d      	ldr	r5, [r7, #4]
   27bea:	46c3      	mov	fp, r8
   27bec:	617b      	str	r3, [r7, #20]
   27bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27bf0:	3b01      	subs	r3, #1
   27bf2:	2b01      	cmp	r3, #1
   27bf4:	f240 85f0 	bls.w	287d8 <_flash_used+0x768>
   27bf8:	1e6b      	subs	r3, r5, #1
   27bfa:	2b06      	cmp	r3, #6
   27bfc:	f240 82ae 	bls.w	2815c <_flash_used+0xec>
   27c00:	05e6      	lsls	r6, r4, #23
   27c02:	d512      	bpl.n	27c2a <__ssvfscanf_r+0x822>
   27c04:	0565      	lsls	r5, r4, #21
   27c06:	f100 85fe 	bmi.w	28806 <_flash_used+0x796>
   27c0a:	f819 1c01 	ldrb.w	r1, [r9, #-1]
   27c0e:	f001 03df 	and.w	r3, r1, #223	; 0xdf
   27c12:	2b45      	cmp	r3, #69	; 0x45
   27c14:	f040 8470 	bne.w	284f8 <_flash_used+0x488>
   27c18:	f109 39ff 	add.w	r9, r9, #4294967295
   27c1c:	f10a 3aff 	add.w	sl, sl, #4294967295
   27c20:	465a      	mov	r2, fp
   27c22:	ee18 0a10 	vmov	r0, s16
   27c26:	f004 f9bd 	bl	2bfa4 <_sungetc_r>
   27c2a:	f014 0210 	ands.w	r2, r4, #16
   27c2e:	f47f acb8 	bne.w	275a2 <__ssvfscanf_r+0x19a>
   27c32:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   27c36:	f889 2000 	strb.w	r2, [r9]
   27c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   27c3e:	f000 8452 	beq.w	284e6 <_flash_used+0x476>
   27c42:	693b      	ldr	r3, [r7, #16]
   27c44:	2b00      	cmp	r3, #0
   27c46:	f040 8317 	bne.w	28278 <_flash_used+0x208>
   27c4a:	ee18 0a10 	vmov	r0, s16
   27c4e:	69f9      	ldr	r1, [r7, #28]
   27c50:	2200      	movs	r2, #0
   27c52:	f7ff fab3 	bl	271bc <_strtod_r>
   27c56:	07e0      	lsls	r0, r4, #31
   27c58:	ec59 8b10 	vmov	r8, r9, d0
   27c5c:	d402      	bmi.n	27c64 <__ssvfscanf_r+0x85c>
   27c5e:	07a1      	lsls	r1, r4, #30
   27c60:	f140 82f3 	bpl.w	2824a <_flash_used+0x1da>
   27c64:	6abe      	ldr	r6, [r7, #40]	; 0x28
   27c66:	f856 3b04 	ldr.w	r3, [r6], #4
   27c6a:	e9c3 8900 	strd	r8, r9, [r3]
   27c6e:	62be      	str	r6, [r7, #40]	; 0x28
   27c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27c72:	3301      	adds	r3, #1
   27c74:	633b      	str	r3, [r7, #48]	; 0x30
   27c76:	e494      	b.n	275a2 <__ssvfscanf_r+0x19a>
   27c78:	0002f961 	.word	0x0002f961
   27c7c:	200208f0 	.word	0x200208f0
   27c80:	2c02      	cmp	r4, #2
   27c82:	f47f ad7e 	bne.w	27782 <__ssvfscanf_r+0x37a>
   27c86:	2403      	movs	r4, #3
   27c88:	e569      	b.n	2775e <__ssvfscanf_r+0x356>
   27c8a:	f40b 6ea0 	and.w	lr, fp, #1280	; 0x500
   27c8e:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
   27c92:	d006      	beq.n	27ca2 <__ssvfscanf_r+0x89a>
   27c94:	f41b 6f80 	tst.w	fp, #1024	; 0x400
   27c98:	f43f ad73 	beq.w	27782 <__ssvfscanf_r+0x37a>
   27c9c:	2e00      	cmp	r6, #0
   27c9e:	f000 8594 	beq.w	287ca <_flash_used+0x75a>
   27ca2:	f41b 7f00 	tst.w	fp, #512	; 0x200
   27ca6:	d104      	bne.n	27cb2 <__ssvfscanf_r+0x8aa>
   27ca8:	69bb      	ldr	r3, [r7, #24]
   27caa:	f8c7 9008 	str.w	r9, [r7, #8]
   27cae:	1af3      	subs	r3, r6, r3
   27cb0:	613b      	str	r3, [r7, #16]
   27cb2:	f42b 63f0 	bic.w	r3, fp, #1920	; 0x780
   27cb6:	2600      	movs	r6, #0
   27cb8:	f443 7bc0 	orr.w	fp, r3, #384	; 0x180
   27cbc:	e54f      	b.n	2775e <__ssvfscanf_r+0x356>
   27cbe:	4b9d      	ldr	r3, [pc, #628]	; (27f34 <__ssvfscanf_r+0xb2c>)
   27cc0:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   27cc4:	f933 9019 	ldrsh.w	r9, [r3, r9, lsl #1]
   27cc8:	e5e1      	b.n	2788e <__ssvfscanf_r+0x486>
   27cca:	f41b 7f80 	tst.w	fp, #256	; 0x100
   27cce:	f43f ad64 	beq.w	2779a <__ssvfscanf_r+0x392>
   27cd2:	68fb      	ldr	r3, [r7, #12]
   27cd4:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   27cd8:	3601      	adds	r6, #1
   27cda:	2b00      	cmp	r3, #0
   27cdc:	f040 8239 	bne.w	28152 <_flash_used+0xe2>
   27ce0:	3d01      	subs	r5, #1
   27ce2:	e53f      	b.n	27764 <__ssvfscanf_r+0x35c>
   27ce4:	0726      	lsls	r6, r4, #28
   27ce6:	f47f ac37 	bne.w	27558 <__ssvfscanf_r+0x150>
   27cea:	7842      	ldrb	r2, [r0, #1]
   27cec:	4608      	mov	r0, r1
   27cee:	f7ff bbc0 	b.w	27472 <__ssvfscanf_r+0x6a>
   27cf2:	0723      	lsls	r3, r4, #28
   27cf4:	f47f ac30 	bne.w	27558 <__ssvfscanf_r+0x150>
   27cf8:	7842      	ldrb	r2, [r0, #1]
   27cfa:	f044 0402 	orr.w	r4, r4, #2
   27cfe:	4608      	mov	r0, r1
   27d00:	f7ff bbb7 	b.w	27472 <__ssvfscanf_r+0x6a>
   27d04:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   27d08:	4b8b      	ldr	r3, [pc, #556]	; (27f38 <__ssvfscanf_r+0xb30>)
   27d0a:	2603      	movs	r6, #3
   27d0c:	63f9      	str	r1, [r7, #60]	; 0x3c
   27d0e:	623b      	str	r3, [r7, #32]
   27d10:	2310      	movs	r3, #16
   27d12:	627b      	str	r3, [r7, #36]	; 0x24
   27d14:	f8db 3004 	ldr.w	r3, [fp, #4]
   27d18:	2b00      	cmp	r3, #0
   27d1a:	f73f ac89 	bgt.w	27630 <__ssvfscanf_r+0x228>
   27d1e:	4659      	mov	r1, fp
   27d20:	ee18 0a10 	vmov	r0, s16
   27d24:	f004 f97e 	bl	2c024 <__ssrefill_r>
   27d28:	2800      	cmp	r0, #0
   27d2a:	f47f ac0c 	bne.w	27546 <__ssvfscanf_r+0x13e>
   27d2e:	0662      	lsls	r2, r4, #25
   27d30:	f53f ac81 	bmi.w	27636 <__ssvfscanf_r+0x22e>
   27d34:	f8db 2000 	ldr.w	r2, [fp]
   27d38:	4980      	ldr	r1, [pc, #512]	; (27f3c <__ssvfscanf_r+0xb34>)
   27d3a:	7813      	ldrb	r3, [r2, #0]
   27d3c:	5ccb      	ldrb	r3, [r1, r3]
   27d3e:	071b      	lsls	r3, r3, #28
   27d40:	f57f ac79 	bpl.w	27636 <__ssvfscanf_r+0x22e>
   27d44:	ee18 9a10 	vmov	r9, s16
   27d48:	e007      	b.n	27d5a <__ssvfscanf_r+0x952>
   27d4a:	f8cb 2000 	str.w	r2, [fp]
   27d4e:	7813      	ldrb	r3, [r2, #0]
   27d50:	497a      	ldr	r1, [pc, #488]	; (27f3c <__ssvfscanf_r+0xb34>)
   27d52:	5ccb      	ldrb	r3, [r1, r3]
   27d54:	0718      	lsls	r0, r3, #28
   27d56:	f57f ac6e 	bpl.w	27636 <__ssvfscanf_r+0x22e>
   27d5a:	f8db 3004 	ldr.w	r3, [fp, #4]
   27d5e:	f10a 0a01 	add.w	sl, sl, #1
   27d62:	3201      	adds	r2, #1
   27d64:	3b01      	subs	r3, #1
   27d66:	2b00      	cmp	r3, #0
   27d68:	f8cb 3004 	str.w	r3, [fp, #4]
   27d6c:	dced      	bgt.n	27d4a <__ssvfscanf_r+0x942>
   27d6e:	4659      	mov	r1, fp
   27d70:	4648      	mov	r0, r9
   27d72:	f004 f957 	bl	2c024 <__ssrefill_r>
   27d76:	2800      	cmp	r0, #0
   27d78:	f47f abe5 	bne.w	27546 <__ssvfscanf_r+0x13e>
   27d7c:	f8db 2000 	ldr.w	r2, [fp]
   27d80:	e7e5      	b.n	27d4e <__ssvfscanf_r+0x946>
   27d82:	0621      	lsls	r1, r4, #24
   27d84:	f57f ad90 	bpl.w	278a8 <__ssvfscanf_r+0x4a0>
   27d88:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   27d8c:	e57f      	b.n	2788e <__ssvfscanf_r+0x486>
   27d8e:	4b69      	ldr	r3, [pc, #420]	; (27f34 <__ssvfscanf_r+0xb2c>)
   27d90:	f933 9019 	ldrsh.w	r9, [r3, r9, lsl #1]
   27d94:	f1b9 0f08 	cmp.w	r9, #8
   27d98:	f73f ad77 	bgt.w	2788a <__ssvfscanf_r+0x482>
   27d9c:	e584      	b.n	278a8 <__ssvfscanf_r+0x4a0>
   27d9e:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   27da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   27da6:	f47f ad7f 	bne.w	278a8 <__ssvfscanf_r+0x4a0>
   27daa:	f424 7400 	bic.w	r4, r4, #512	; 0x200
   27dae:	f04f 0910 	mov.w	r9, #16
   27db2:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
   27db6:	e56a      	b.n	2788e <__ssvfscanf_r+0x486>
   27db8:	f044 0401 	orr.w	r4, r4, #1
   27dbc:	2602      	movs	r6, #2
   27dbe:	63f9      	str	r1, [r7, #60]	; 0x3c
   27dc0:	e431      	b.n	27626 <__ssvfscanf_r+0x21e>
   27dc2:	f044 0401 	orr.w	r4, r4, #1
   27dc6:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   27dca:	2600      	movs	r6, #0
   27dcc:	63f9      	str	r1, [r7, #60]	; 0x3c
   27dce:	e42a      	b.n	27626 <__ssvfscanf_r+0x21e>
   27dd0:	f044 0401 	orr.w	r4, r4, #1
   27dd4:	4b58      	ldr	r3, [pc, #352]	; (27f38 <__ssvfscanf_r+0xb30>)
   27dd6:	2603      	movs	r6, #3
   27dd8:	63f9      	str	r1, [r7, #60]	; 0x3c
   27dda:	623b      	str	r3, [r7, #32]
   27ddc:	2308      	movs	r3, #8
   27dde:	627b      	str	r3, [r7, #36]	; 0x24
   27de0:	e421      	b.n	27626 <__ssvfscanf_r+0x21e>
   27de2:	f044 0401 	orr.w	r4, r4, #1
   27de6:	4b56      	ldr	r3, [pc, #344]	; (27f40 <__ssvfscanf_r+0xb38>)
   27de8:	2603      	movs	r6, #3
   27dea:	63f9      	str	r1, [r7, #60]	; 0x3c
   27dec:	623b      	str	r3, [r7, #32]
   27dee:	230a      	movs	r3, #10
   27df0:	627b      	str	r3, [r7, #36]	; 0x24
   27df2:	e418      	b.n	27626 <__ssvfscanf_r+0x21e>
   27df4:	f107 0058 	add.w	r0, r7, #88	; 0x58
   27df8:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   27dfc:	f003 fe02 	bl	2ba04 <__sccl>
   27e00:	2601      	movs	r6, #1
   27e02:	63f8      	str	r0, [r7, #60]	; 0x3c
   27e04:	e40f      	b.n	27626 <__ssvfscanf_r+0x21e>
   27e06:	0726      	lsls	r6, r4, #28
   27e08:	f47f aba6 	bne.w	27558 <__ssvfscanf_r+0x150>
   27e0c:	7842      	ldrb	r2, [r0, #1]
   27e0e:	2a6c      	cmp	r2, #108	; 0x6c
   27e10:	f000 83d8 	beq.w	285c4 <_flash_used+0x554>
   27e14:	f044 0401 	orr.w	r4, r4, #1
   27e18:	4608      	mov	r0, r1
   27e1a:	f7ff bb2a 	b.w	27472 <__ssvfscanf_r+0x6a>
   27e1e:	ea58 0804 	orrs.w	r8, r8, r4
   27e22:	f47f ab99 	bne.w	27558 <__ssvfscanf_r+0x150>
   27e26:	7842      	ldrb	r2, [r0, #1]
   27e28:	2410      	movs	r4, #16
   27e2a:	4608      	mov	r0, r1
   27e2c:	f7ff bb21 	b.w	27472 <__ssvfscanf_r+0x6a>
   27e30:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   27e34:	f47f ab90 	bne.w	27558 <__ssvfscanf_r+0x150>
   27e38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27e3a:	2a00      	cmp	r2, #0
   27e3c:	f000 83f7 	beq.w	2862e <_flash_used+0x5be>
   27e40:	7842      	ldrb	r2, [r0, #1]
   27e42:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   27e46:	4608      	mov	r0, r1
   27e48:	f7ff bb13 	b.w	27472 <__ssvfscanf_r+0x6a>
   27e4c:	06e2      	lsls	r2, r4, #27
   27e4e:	f100 81aa 	bmi.w	281a6 <_flash_used+0x136>
   27e52:	0723      	lsls	r3, r4, #28
   27e54:	f140 840d 	bpl.w	28672 <_flash_used+0x602>
   27e58:	6abe      	ldr	r6, [r7, #40]	; 0x28
   27e5a:	63f9      	str	r1, [r7, #60]	; 0x3c
   27e5c:	f856 3b04 	ldr.w	r3, [r6], #4
   27e60:	f883 a000 	strb.w	sl, [r3]
   27e64:	62be      	str	r6, [r7, #40]	; 0x28
   27e66:	f7ff bb9c 	b.w	275a2 <__ssvfscanf_r+0x19a>
   27e6a:	0722      	lsls	r2, r4, #28
   27e6c:	f47f ab74 	bne.w	27558 <__ssvfscanf_r+0x150>
   27e70:	7842      	ldrb	r2, [r0, #1]
   27e72:	2a68      	cmp	r2, #104	; 0x68
   27e74:	f000 83b0 	beq.w	285d8 <_flash_used+0x568>
   27e78:	f044 0404 	orr.w	r4, r4, #4
   27e7c:	4608      	mov	r0, r1
   27e7e:	f7ff baf8 	b.w	27472 <__ssvfscanf_r+0x6a>
   27e82:	4b2f      	ldr	r3, [pc, #188]	; (27f40 <__ssvfscanf_r+0xb38>)
   27e84:	2603      	movs	r6, #3
   27e86:	63f9      	str	r1, [r7, #60]	; 0x3c
   27e88:	623b      	str	r3, [r7, #32]
   27e8a:	2300      	movs	r3, #0
   27e8c:	627b      	str	r3, [r7, #36]	; 0x24
   27e8e:	f7ff bbca 	b.w	27626 <__ssvfscanf_r+0x21e>
   27e92:	4b29      	ldr	r3, [pc, #164]	; (27f38 <__ssvfscanf_r+0xb30>)
   27e94:	2603      	movs	r6, #3
   27e96:	63f9      	str	r1, [r7, #60]	; 0x3c
   27e98:	623b      	str	r3, [r7, #32]
   27e9a:	230a      	movs	r3, #10
   27e9c:	627b      	str	r3, [r7, #36]	; 0x24
   27e9e:	f7ff bbc2 	b.w	27626 <__ssvfscanf_r+0x21e>
   27ea2:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   27ea6:	e72f      	b.n	27d08 <__ssvfscanf_r+0x900>
   27ea8:	0521      	lsls	r1, r4, #20
   27eaa:	f57f acf0 	bpl.w	2788e <__ssvfscanf_r+0x486>
   27eae:	f1b9 0f00 	cmp.w	r9, #0
   27eb2:	d103      	bne.n	27ebc <__ssvfscanf_r+0xab4>
   27eb4:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   27eb8:	f04f 0908 	mov.w	r9, #8
   27ebc:	0563      	lsls	r3, r4, #21
   27ebe:	f140 8166 	bpl.w	2818e <_flash_used+0x11e>
   27ec2:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   27ec6:	e4e2      	b.n	2788e <__ssvfscanf_r+0x486>
   27ec8:	4641      	mov	r1, r8
   27eca:	ee18 0a10 	vmov	r0, s16
   27ece:	f004 f8a9 	bl	2c024 <__ssrefill_r>
   27ed2:	2800      	cmp	r0, #0
   27ed4:	f47f ac55 	bne.w	27782 <__ssvfscanf_r+0x37a>
   27ed8:	2d00      	cmp	r5, #0
   27eda:	f47f abdc 	bne.w	27696 <__ssvfscanf_r+0x28e>
   27ede:	e450      	b.n	27782 <__ssvfscanf_r+0x37a>
   27ee0:	2c03      	cmp	r4, #3
   27ee2:	f43f ae70 	beq.w	27bc6 <__ssvfscanf_r+0x7be>
   27ee6:	2c05      	cmp	r4, #5
   27ee8:	f43f ae6d 	beq.w	27bc6 <__ssvfscanf_r+0x7be>
   27eec:	e449      	b.n	27782 <__ssvfscanf_r+0x37a>
   27eee:	4631      	mov	r1, r6
   27ef0:	ee18 0a10 	vmov	r0, s16
   27ef4:	f004 f896 	bl	2c024 <__ssrefill_r>
   27ef8:	2800      	cmp	r0, #0
   27efa:	f43f acd2 	beq.w	278a2 <__ssvfscanf_r+0x49a>
   27efe:	e4d3      	b.n	278a8 <__ssvfscanf_r+0x4a0>
   27f00:	6abc      	ldr	r4, [r7, #40]	; 0x28
   27f02:	f854 3b04 	ldr.w	r3, [r4], #4
   27f06:	6018      	str	r0, [r3, #0]
   27f08:	62bc      	str	r4, [r7, #40]	; 0x28
   27f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27f0c:	3301      	adds	r3, #1
   27f0e:	633b      	str	r3, [r7, #48]	; 0x30
   27f10:	69fb      	ldr	r3, [r7, #28]
   27f12:	1aed      	subs	r5, r5, r3
   27f14:	4643      	mov	r3, r8
   27f16:	442b      	add	r3, r5
   27f18:	461e      	mov	r6, r3
   27f1a:	44b2      	add	sl, r6
   27f1c:	f7ff bb41 	b.w	275a2 <__ssvfscanf_r+0x19a>
   27f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27f22:	2b02      	cmp	r3, #2
   27f24:	f47f ae4a 	bne.w	27bbc <__ssvfscanf_r+0x7b4>
   27f28:	2303      	movs	r3, #3
   27f2a:	63bb      	str	r3, [r7, #56]	; 0x38
   27f2c:	e417      	b.n	2775e <__ssvfscanf_r+0x356>
   27f2e:	f04f 0900 	mov.w	r9, #0
   27f32:	e444      	b.n	277be <__ssvfscanf_r+0x3b6>
   27f34:	0002fb08 	.word	0x0002fb08
   27f38:	000273ed 	.word	0x000273ed
   27f3c:	0002f961 	.word	0x0002f961
   27f40:	000272bd 	.word	0x000272bd
   27f44:	06e6      	lsls	r6, r4, #27
   27f46:	f100 83a9 	bmi.w	2869c <_flash_used+0x62c>
   27f4a:	f014 0380 	ands.w	r3, r4, #128	; 0x80
   27f4e:	6abe      	ldr	r6, [r7, #40]	; 0x28
   27f50:	f000 8351 	beq.w	285f6 <_flash_used+0x586>
   27f54:	f856 3b04 	ldr.w	r3, [r6], #4
   27f58:	63bb      	str	r3, [r7, #56]	; 0x38
   27f5a:	2b00      	cmp	r3, #0
   27f5c:	f43f aafc 	beq.w	27558 <__ssvfscanf_r+0x150>
   27f60:	2020      	movs	r0, #32
   27f62:	f7fd feff 	bl	25d64 <malloc>
   27f66:	4605      	mov	r5, r0
   27f68:	2800      	cmp	r0, #0
   27f6a:	f000 81fc 	beq.w	28366 <_flash_used+0x2f6>
   27f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27f72:	f8b2 9006 	ldrh.w	r9, [r2, #6]
   27f76:	8894      	ldrh	r4, [r2, #4]
   27f78:	6018      	str	r0, [r3, #0]
   27f7a:	45a1      	cmp	r9, r4
   27f7c:	f080 8116 	bcs.w	281ac <_flash_used+0x13c>
   27f80:	6810      	ldr	r0, [r2, #0]
   27f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
   27f84:	f109 0301 	add.w	r3, r9, #1
   27f88:	62be      	str	r6, [r7, #40]	; 0x28
   27f8a:	f840 2029 	str.w	r2, [r0, r9, lsl #2]
   27f8e:	2201      	movs	r2, #1
   27f90:	f04f 0920 	mov.w	r9, #32
   27f94:	61fa      	str	r2, [r7, #28]
   27f96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   27f98:	80d3      	strh	r3, [r2, #6]
   27f9a:	f8db 3000 	ldr.w	r3, [fp]
   27f9e:	49b5      	ldr	r1, [pc, #724]	; (28274 <_flash_used+0x204>)
   27fa0:	781a      	ldrb	r2, [r3, #0]
   27fa2:	5c8a      	ldrb	r2, [r1, r2]
   27fa4:	0711      	lsls	r1, r2, #28
   27fa6:	f100 82b8 	bmi.w	2851a <_flash_used+0x4aa>
   27faa:	462c      	mov	r4, r5
   27fac:	f8db 2004 	ldr.w	r2, [fp, #4]
   27fb0:	1c59      	adds	r1, r3, #1
   27fb2:	462e      	mov	r6, r5
   27fb4:	3a01      	subs	r2, #1
   27fb6:	e9cb 1200 	strd	r1, r2, [fp]
   27fba:	781b      	ldrb	r3, [r3, #0]
   27fbc:	f806 3b01 	strb.w	r3, [r6], #1
   27fc0:	1b35      	subs	r5, r6, r4
   27fc2:	45a9      	cmp	r9, r5
   27fc4:	d80e      	bhi.n	27fe4 <__ssvfscanf_r+0xbdc>
   27fc6:	69fb      	ldr	r3, [r7, #28]
   27fc8:	4620      	mov	r0, r4
   27fca:	b15b      	cbz	r3, 27fe4 <__ssvfscanf_r+0xbdc>
   27fcc:	ea4f 0949 	mov.w	r9, r9, lsl #1
   27fd0:	4649      	mov	r1, r9
   27fd2:	f7fe fa6d 	bl	264b0 <realloc>
   27fd6:	4604      	mov	r4, r0
   27fd8:	2800      	cmp	r0, #0
   27fda:	f000 81c4 	beq.w	28366 <_flash_used+0x2f6>
   27fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27fe0:	1946      	adds	r6, r0, r5
   27fe2:	6018      	str	r0, [r3, #0]
   27fe4:	f1b8 0801 	subs.w	r8, r8, #1
   27fe8:	4635      	mov	r5, r6
   27fea:	f000 8292 	beq.w	28512 <_flash_used+0x4a2>
   27fee:	f8db 3004 	ldr.w	r3, [fp, #4]
   27ff2:	2b00      	cmp	r3, #0
   27ff4:	f340 8349 	ble.w	2868a <_flash_used+0x61a>
   27ff8:	f8db 3000 	ldr.w	r3, [fp]
   27ffc:	499d      	ldr	r1, [pc, #628]	; (28274 <_flash_used+0x204>)
   27ffe:	781a      	ldrb	r2, [r3, #0]
   28000:	5c8a      	ldrb	r2, [r1, r2]
   28002:	0712      	lsls	r2, r2, #28
   28004:	d5d2      	bpl.n	27fac <__ssvfscanf_r+0xba4>
   28006:	1b31      	subs	r1, r6, r4
   28008:	4635      	mov	r5, r6
   2800a:	448a      	add	sl, r1
   2800c:	3101      	adds	r1, #1
   2800e:	2300      	movs	r3, #0
   28010:	4589      	cmp	r9, r1
   28012:	702b      	strb	r3, [r5, #0]
   28014:	f67f ae2c 	bls.w	27c70 <__ssvfscanf_r+0x868>
   28018:	69fb      	ldr	r3, [r7, #28]
   2801a:	2b00      	cmp	r3, #0
   2801c:	f43f ae28 	beq.w	27c70 <__ssvfscanf_r+0x868>
   28020:	6bbc      	ldr	r4, [r7, #56]	; 0x38
   28022:	6820      	ldr	r0, [r4, #0]
   28024:	f7fe fa44 	bl	264b0 <realloc>
   28028:	2800      	cmp	r0, #0
   2802a:	f47f acbc 	bne.w	279a6 <__ssvfscanf_r+0x59e>
   2802e:	e61f      	b.n	27c70 <__ssvfscanf_r+0x868>
   28030:	2300      	movs	r3, #0
   28032:	60fb      	str	r3, [r7, #12]
   28034:	f7ff bb1f 	b.w	27676 <__ssvfscanf_r+0x26e>
   28038:	06e1      	lsls	r1, r4, #27
   2803a:	f100 827d 	bmi.w	28538 <_flash_used+0x4c8>
   2803e:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   28042:	6abe      	ldr	r6, [r7, #40]	; 0x28
   28044:	f000 8307 	beq.w	28656 <_flash_used+0x5e6>
   28048:	f856 3b04 	ldr.w	r3, [r6], #4
   2804c:	61fb      	str	r3, [r7, #28]
   2804e:	2b00      	cmp	r3, #0
   28050:	f43f aa82 	beq.w	27558 <__ssvfscanf_r+0x150>
   28054:	2020      	movs	r0, #32
   28056:	f7fd fe85 	bl	25d64 <malloc>
   2805a:	4605      	mov	r5, r0
   2805c:	2800      	cmp	r0, #0
   2805e:	f000 8182 	beq.w	28366 <_flash_used+0x2f6>
   28062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   28064:	69fb      	ldr	r3, [r7, #28]
   28066:	f8b2 9006 	ldrh.w	r9, [r2, #6]
   2806a:	8894      	ldrh	r4, [r2, #4]
   2806c:	6018      	str	r0, [r3, #0]
   2806e:	45a1      	cmp	r9, r4
   28070:	f080 80c0 	bcs.w	281f4 <_flash_used+0x184>
   28074:	6810      	ldr	r0, [r2, #0]
   28076:	69fa      	ldr	r2, [r7, #28]
   28078:	f109 0301 	add.w	r3, r9, #1
   2807c:	2420      	movs	r4, #32
   2807e:	62be      	str	r6, [r7, #40]	; 0x28
   28080:	f840 2029 	str.w	r2, [r0, r9, lsl #2]
   28084:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   28086:	80d3      	strh	r3, [r2, #6]
   28088:	f107 0358 	add.w	r3, r7, #88	; 0x58
   2808c:	f8db 2000 	ldr.w	r2, [fp]
   28090:	4619      	mov	r1, r3
   28092:	4618      	mov	r0, r3
   28094:	7813      	ldrb	r3, [r2, #0]
   28096:	5ccb      	ldrb	r3, [r1, r3]
   28098:	2b00      	cmp	r3, #0
   2809a:	f43f aa5d 	beq.w	27558 <__ssvfscanf_r+0x150>
   2809e:	69fb      	ldr	r3, [r7, #28]
   280a0:	462e      	mov	r6, r5
   280a2:	f8c7 a018 	str.w	sl, [r7, #24]
   280a6:	4611      	mov	r1, r2
   280a8:	3b00      	subs	r3, #0
   280aa:	46a2      	mov	sl, r4
   280ac:	4681      	mov	r9, r0
   280ae:	bf18      	it	ne
   280b0:	2301      	movne	r3, #1
   280b2:	63bb      	str	r3, [r7, #56]	; 0x38
   280b4:	e007      	b.n	280c6 <_flash_used+0x56>
   280b6:	f8db 1000 	ldr.w	r1, [fp]
   280ba:	780b      	ldrb	r3, [r1, #0]
   280bc:	f819 3003 	ldrb.w	r3, [r9, r3]
   280c0:	2b00      	cmp	r3, #0
   280c2:	f000 8180 	beq.w	283c6 <_flash_used+0x356>
   280c6:	f8db 3004 	ldr.w	r3, [fp, #4]
   280ca:	1c48      	adds	r0, r1, #1
   280cc:	3b01      	subs	r3, #1
   280ce:	e9cb 0300 	strd	r0, r3, [fp]
   280d2:	780b      	ldrb	r3, [r1, #0]
   280d4:	f805 3b01 	strb.w	r3, [r5], #1
   280d8:	1bac      	subs	r4, r5, r6
   280da:	4554      	cmp	r4, sl
   280dc:	d30e      	bcc.n	280fc <_flash_used+0x8c>
   280de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   280e0:	4630      	mov	r0, r6
   280e2:	b15b      	cbz	r3, 280fc <_flash_used+0x8c>
   280e4:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   280e8:	4651      	mov	r1, sl
   280ea:	f7fe f9e1 	bl	264b0 <realloc>
   280ee:	4606      	mov	r6, r0
   280f0:	2800      	cmp	r0, #0
   280f2:	f000 8138 	beq.w	28366 <_flash_used+0x2f6>
   280f6:	69fb      	ldr	r3, [r7, #28]
   280f8:	1905      	adds	r5, r0, r4
   280fa:	6018      	str	r0, [r3, #0]
   280fc:	f1b8 0801 	subs.w	r8, r8, #1
   28100:	f000 8161 	beq.w	283c6 <_flash_used+0x356>
   28104:	f8db 3004 	ldr.w	r3, [fp, #4]
   28108:	2b00      	cmp	r3, #0
   2810a:	dcd4      	bgt.n	280b6 <_flash_used+0x46>
   2810c:	4659      	mov	r1, fp
   2810e:	ee18 0a10 	vmov	r0, s16
   28112:	f003 ff87 	bl	2c024 <__ssrefill_r>
   28116:	2800      	cmp	r0, #0
   28118:	d0cd      	beq.n	280b6 <_flash_used+0x46>
   2811a:	42b5      	cmp	r5, r6
   2811c:	4654      	mov	r4, sl
   2811e:	f8d7 a018 	ldr.w	sl, [r7, #24]
   28122:	f43f aa10 	beq.w	27546 <__ssvfscanf_r+0x13e>
   28126:	1bae      	subs	r6, r5, r6
   28128:	f43f aa16 	beq.w	27558 <__ssvfscanf_r+0x150>
   2812c:	1c71      	adds	r1, r6, #1
   2812e:	2300      	movs	r3, #0
   28130:	428c      	cmp	r4, r1
   28132:	702b      	strb	r3, [r5, #0]
   28134:	d907      	bls.n	28146 <_flash_used+0xd6>
   28136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28138:	b12b      	cbz	r3, 28146 <_flash_used+0xd6>
   2813a:	69fc      	ldr	r4, [r7, #28]
   2813c:	6820      	ldr	r0, [r4, #0]
   2813e:	f7fe f9b7 	bl	264b0 <realloc>
   28142:	b100      	cbz	r0, 28146 <_flash_used+0xd6>
   28144:	6020      	str	r0, [r4, #0]
   28146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28148:	44b2      	add	sl, r6
   2814a:	3301      	adds	r3, #1
   2814c:	633b      	str	r3, [r7, #48]	; 0x30
   2814e:	f7ff ba28 	b.w	275a2 <__ssvfscanf_r+0x19a>
   28152:	68fb      	ldr	r3, [r7, #12]
   28154:	3b01      	subs	r3, #1
   28156:	60fb      	str	r3, [r7, #12]
   28158:	f7ff bb04 	b.w	27764 <__ssvfscanf_r+0x35c>
   2815c:	2d02      	cmp	r5, #2
   2815e:	f240 836a 	bls.w	28836 <_flash_used+0x7c6>
   28162:	2d03      	cmp	r5, #3
   28164:	f43f ad4c 	beq.w	27c00 <__ssvfscanf_r+0x7f8>
   28168:	3d04      	subs	r5, #4
   2816a:	ee18 8a10 	vmov	r8, s16
   2816e:	b2ee      	uxtb	r6, r5
   28170:	43f5      	mvns	r5, r6
   28172:	444d      	add	r5, r9
   28174:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   28178:	465a      	mov	r2, fp
   2817a:	4640      	mov	r0, r8
   2817c:	f003 ff12 	bl	2bfa4 <_sungetc_r>
   28180:	454d      	cmp	r5, r9
   28182:	d1f7      	bne.n	28174 <_flash_used+0x104>
   28184:	f10a 33ff 	add.w	r3, sl, #4294967295
   28188:	eba3 0a06 	sub.w	sl, r3, r6
   2818c:	e538      	b.n	27c00 <__ssvfscanf_r+0x7f8>
   2818e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28190:	f424 7460 	bic.w	r4, r4, #896	; 0x380
   28194:	b11b      	cbz	r3, 2819e <_flash_used+0x12e>
   28196:	3b01      	subs	r3, #1
   28198:	f108 0801 	add.w	r8, r8, #1
   2819c:	63bb      	str	r3, [r7, #56]	; 0x38
   2819e:	f10a 0a01 	add.w	sl, sl, #1
   281a2:	f7ff bb76 	b.w	27892 <__ssvfscanf_r+0x48a>
   281a6:	63f9      	str	r1, [r7, #60]	; 0x3c
   281a8:	f7ff b9fb 	b.w	275a2 <__ssvfscanf_r+0x19a>
   281ac:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   281b0:	429c      	cmp	r4, r3
   281b2:	f200 80dc 	bhi.w	2836e <_flash_used+0x2fe>
   281b6:	3408      	adds	r4, #8
   281b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   281ba:	00a1      	lsls	r1, r4, #2
   281bc:	6810      	ldr	r0, [r2, #0]
   281be:	f7fe f977 	bl	264b0 <realloc>
   281c2:	2800      	cmp	r0, #0
   281c4:	f000 80d3 	beq.w	2836e <_flash_used+0x2fe>
   281c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   281ca:	6018      	str	r0, [r3, #0]
   281cc:	809c      	strh	r4, [r3, #4]
   281ce:	e6d8      	b.n	27f82 <__ssvfscanf_r+0xb7a>
   281d0:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   281d4:	429c      	cmp	r4, r3
   281d6:	f200 80ca 	bhi.w	2836e <_flash_used+0x2fe>
   281da:	3408      	adds	r4, #8
   281dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   281de:	00a1      	lsls	r1, r4, #2
   281e0:	6810      	ldr	r0, [r2, #0]
   281e2:	f7fe f965 	bl	264b0 <realloc>
   281e6:	2800      	cmp	r0, #0
   281e8:	f000 80c1 	beq.w	2836e <_flash_used+0x2fe>
   281ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   281ee:	6018      	str	r0, [r3, #0]
   281f0:	809c      	strh	r4, [r3, #4]
   281f2:	e401      	b.n	279f8 <__ssvfscanf_r+0x5f0>
   281f4:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   281f8:	429c      	cmp	r4, r3
   281fa:	f200 80b8 	bhi.w	2836e <_flash_used+0x2fe>
   281fe:	3408      	adds	r4, #8
   28200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   28202:	00a1      	lsls	r1, r4, #2
   28204:	6810      	ldr	r0, [r2, #0]
   28206:	f7fe f953 	bl	264b0 <realloc>
   2820a:	2800      	cmp	r0, #0
   2820c:	f000 80af 	beq.w	2836e <_flash_used+0x2fe>
   28210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28212:	6018      	str	r0, [r3, #0]
   28214:	809c      	strh	r4, [r3, #4]
   28216:	e72e      	b.n	28076 <_flash_used+0x6>
   28218:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   2821c:	429c      	cmp	r4, r3
   2821e:	f200 80a6 	bhi.w	2836e <_flash_used+0x2fe>
   28222:	3408      	adds	r4, #8
   28224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   28226:	00a1      	lsls	r1, r4, #2
   28228:	6810      	ldr	r0, [r2, #0]
   2822a:	f7fe f941 	bl	264b0 <realloc>
   2822e:	2800      	cmp	r0, #0
   28230:	f000 809d 	beq.w	2836e <_flash_used+0x2fe>
   28234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28236:	6018      	str	r0, [r3, #0]
   28238:	809c      	strh	r4, [r3, #4]
   2823a:	f7ff bb86 	b.w	2794a <__ssvfscanf_r+0x542>
   2823e:	6abc      	ldr	r4, [r7, #40]	; 0x28
   28240:	f854 3b04 	ldr.w	r3, [r4], #4
   28244:	7018      	strb	r0, [r3, #0]
   28246:	62bc      	str	r4, [r7, #40]	; 0x28
   28248:	e65f      	b.n	27f0a <__ssvfscanf_r+0xb02>
   2824a:	6abe      	ldr	r6, [r7, #40]	; 0x28
   2824c:	ee10 2a10 	vmov	r2, s0
   28250:	464b      	mov	r3, r9
   28252:	ee10 0a10 	vmov	r0, s0
   28256:	4649      	mov	r1, r9
   28258:	f7e4 ffde 	bl	d218 <__aeabi_dcmpun>
   2825c:	f856 4b04 	ldr.w	r4, [r6], #4
   28260:	2800      	cmp	r0, #0
   28262:	f040 82e0 	bne.w	28826 <_flash_used+0x7b6>
   28266:	4640      	mov	r0, r8
   28268:	4649      	mov	r1, r9
   2826a:	f7e4 fa55 	bl	c718 <__aeabi_d2f>
   2826e:	62be      	str	r6, [r7, #40]	; 0x28
   28270:	6020      	str	r0, [r4, #0]
   28272:	e4fd      	b.n	27c70 <__ssvfscanf_r+0x868>
   28274:	0002f961 	.word	0x0002f961
   28278:	68bd      	ldr	r5, [r7, #8]
   2827a:	230a      	movs	r3, #10
   2827c:	ee18 0a10 	vmov	r0, s16
   28280:	1c69      	adds	r1, r5, #1
   28282:	46a9      	mov	r9, r5
   28284:	f7ff f81a 	bl	272bc <_strtol_r>
   28288:	693b      	ldr	r3, [r7, #16]
   2828a:	1ac2      	subs	r2, r0, r3
   2828c:	f207 23ab 	addw	r3, r7, #683	; 0x2ab
   28290:	49cf      	ldr	r1, [pc, #828]	; (285d0 <_flash_used+0x560>)
   28292:	4599      	cmp	r9, r3
   28294:	bf28      	it	cs
   28296:	f207 29aa 	addwcs	r9, r7, #682	; 0x2aa
   2829a:	4648      	mov	r0, r9
   2829c:	f003 fc48 	bl	2bb30 <sprintf>
   282a0:	e4d3      	b.n	27c4a <__ssvfscanf_r+0x842>
   282a2:	4645      	mov	r5, r8
   282a4:	2d01      	cmp	r5, #1
   282a6:	bf38      	it	cc
   282a8:	2501      	movcc	r5, #1
   282aa:	f014 0301 	ands.w	r3, r4, #1
   282ae:	f000 82e6 	beq.w	2887e <_flash_used+0x80e>
   282b2:	f014 0310 	ands.w	r3, r4, #16
   282b6:	61fb      	str	r3, [r7, #28]
   282b8:	f000 8334 	beq.w	28924 <_flash_used+0x8b4>
   282bc:	f04f 0900 	mov.w	r9, #0
   282c0:	46c8      	mov	r8, r9
   282c2:	464e      	mov	r6, r9
   282c4:	f8c7 9038 	str.w	r9, [r7, #56]	; 0x38
   282c8:	2400      	movs	r4, #0
   282ca:	f002 fd5d 	bl	2ad88 <__locale_mb_cur_max>
   282ce:	42a0      	cmp	r0, r4
   282d0:	f43f a939 	beq.w	27546 <__ssvfscanf_r+0x13e>
   282d4:	f8db 1000 	ldr.w	r1, [fp]
   282d8:	f507 7cac 	add.w	ip, r7, #344	; 0x158
   282dc:	f8db 2004 	ldr.w	r2, [fp, #4]
   282e0:	1c63      	adds	r3, r4, #1
   282e2:	f811 0b01 	ldrb.w	r0, [r1], #1
   282e6:	3a01      	subs	r2, #1
   282e8:	f80c 0004 	strb.w	r0, [ip, r4]
   282ec:	f107 0450 	add.w	r4, r7, #80	; 0x50
   282f0:	e9cb 1200 	strd	r1, r2, [fp]
   282f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   282f6:	2a03      	cmp	r2, #3
   282f8:	d102      	bne.n	28300 <_flash_used+0x290>
   282fa:	6822      	ldr	r2, [r4, #0]
   282fc:	2a04      	cmp	r2, #4
   282fe:	d006      	beq.n	2830e <_flash_used+0x29e>
   28300:	2208      	movs	r2, #8
   28302:	2100      	movs	r1, #0
   28304:	4620      	mov	r0, r4
   28306:	62fb      	str	r3, [r7, #44]	; 0x2c
   28308:	f7fe f876 	bl	263f8 <memset>
   2830c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2830e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   28312:	4631      	mov	r1, r6
   28314:	ee18 0a10 	vmov	r0, s16
   28318:	9400      	str	r4, [sp, #0]
   2831a:	61bb      	str	r3, [r7, #24]
   2831c:	f002 fdd6 	bl	2aecc <_mbrtowc_r>
   28320:	1c42      	adds	r2, r0, #1
   28322:	62f8      	str	r0, [r7, #44]	; 0x2c
   28324:	f43f a90f 	beq.w	27546 <__ssvfscanf_r+0x13e>
   28328:	69fa      	ldr	r2, [r7, #28]
   2832a:	69bb      	ldr	r3, [r7, #24]
   2832c:	4302      	orrs	r2, r0
   2832e:	f040 837d 	bne.w	28a2c <_flash_used+0x9bc>
   28332:	449a      	add	sl, r3
   28334:	6032      	str	r2, [r6, #0]
   28336:	3d01      	subs	r5, #1
   28338:	69fb      	ldr	r3, [r7, #28]
   2833a:	2b00      	cmp	r3, #0
   2833c:	f040 83a8 	bne.w	28a90 <_flash_used+0xa20>
   28340:	eba6 0408 	sub.w	r4, r6, r8
   28344:	ebb9 0fa4 	cmp.w	r9, r4, asr #2
   28348:	f200 83a1 	bhi.w	28a8e <_flash_used+0xa1e>
   2834c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2834e:	2b00      	cmp	r3, #0
   28350:	f000 839d 	beq.w	28a8e <_flash_used+0xa1e>
   28354:	4640      	mov	r0, r8
   28356:	ea4f 01c9 	mov.w	r1, r9, lsl #3
   2835a:	f7fe f8a9 	bl	264b0 <realloc>
   2835e:	4680      	mov	r8, r0
   28360:	2800      	cmp	r0, #0
   28362:	f040 838f 	bne.w	28a84 <_flash_used+0xa14>
   28366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28368:	2b00      	cmp	r3, #0
   2836a:	f000 8166 	beq.w	2863a <_flash_used+0x5ca>
   2836e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28370:	88dd      	ldrh	r5, [r3, #6]
   28372:	2d00      	cmp	r5, #0
   28374:	f000 8136 	beq.w	285e4 <_flash_used+0x574>
   28378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2837a:	f04f 0800 	mov.w	r8, #0
   2837e:	681e      	ldr	r6, [r3, #0]
   28380:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   28384:	4634      	mov	r4, r6
   28386:	6823      	ldr	r3, [r4, #0]
   28388:	6818      	ldr	r0, [r3, #0]
   2838a:	f7fd fcf3 	bl	25d74 <free>
   2838e:	f854 3b04 	ldr.w	r3, [r4], #4
   28392:	42ac      	cmp	r4, r5
   28394:	f8c3 8000 	str.w	r8, [r3]
   28398:	d1f5      	bne.n	28386 <_flash_used+0x316>
   2839a:	f04f 33ff 	mov.w	r3, #4294967295
   2839e:	633b      	str	r3, [r7, #48]	; 0x30
   283a0:	2e00      	cmp	r6, #0
   283a2:	f47f a8de 	bne.w	27562 <__ssvfscanf_r+0x15a>
   283a6:	f7ff b8df 	b.w	27568 <__ssvfscanf_r+0x160>
   283aa:	2400      	movs	r4, #0
   283ac:	f7ff bb81 	b.w	27ab2 <__ssvfscanf_r+0x6aa>
   283b0:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
   283b4:	f7ff bb4d 	b.w	27a52 <__ssvfscanf_r+0x64a>
   283b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   283ba:	681b      	ldr	r3, [r3, #0]
   283bc:	2b04      	cmp	r3, #4
   283be:	f47f ab54 	bne.w	27a6a <__ssvfscanf_r+0x662>
   283c2:	f7ff bb55 	b.w	27a70 <__ssvfscanf_r+0x668>
   283c6:	4654      	mov	r4, sl
   283c8:	f8d7 a018 	ldr.w	sl, [r7, #24]
   283cc:	e6ab      	b.n	28126 <_flash_used+0xb6>
   283ce:	f42b 6bf0 	bic.w	fp, fp, #1920	; 0x780
   283d2:	2401      	movs	r4, #1
   283d4:	f7ff b9c3 	b.w	2775e <__ssvfscanf_r+0x356>
   283d8:	2301      	movs	r3, #1
   283da:	f42b 6bf0 	bic.w	fp, fp, #1920	; 0x780
   283de:	63bb      	str	r3, [r7, #56]	; 0x38
   283e0:	f7ff b9bd 	b.w	2775e <__ssvfscanf_r+0x356>
   283e4:	1e6b      	subs	r3, r5, #1
   283e6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   283ea:	4632      	mov	r2, r6
   283ec:	ee18 0a10 	vmov	r0, s16
   283f0:	461d      	mov	r5, r3
   283f2:	f003 fdd7 	bl	2bfa4 <_sungetc_r>
   283f6:	f7ff ba62 	b.w	278be <__ssvfscanf_r+0x4b6>
   283fa:	f8c7 8010 	str.w	r8, [r7, #16]
   283fe:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
   28402:	f002 fcc1 	bl	2ad88 <__locale_mb_cur_max>
   28406:	42a8      	cmp	r0, r5
   28408:	f43f a89d 	beq.w	27546 <__ssvfscanf_r+0x13e>
   2840c:	f8db 2000 	ldr.w	r2, [fp]
   28410:	f507 70ac 	add.w	r0, r7, #344	; 0x158
   28414:	f8db 3004 	ldr.w	r3, [fp, #4]
   28418:	f1b8 0f03 	cmp.w	r8, #3
   2841c:	f812 1b01 	ldrb.w	r1, [r2], #1
   28420:	f105 0601 	add.w	r6, r5, #1
   28424:	f103 33ff 	add.w	r3, r3, #4294967295
   28428:	f107 0450 	add.w	r4, r7, #80	; 0x50
   2842c:	5541      	strb	r1, [r0, r5]
   2842e:	e9cb 2300 	strd	r2, r3, [fp]
   28432:	d102      	bne.n	2843a <_flash_used+0x3ca>
   28434:	6823      	ldr	r3, [r4, #0]
   28436:	2b04      	cmp	r3, #4
   28438:	d004      	beq.n	28444 <_flash_used+0x3d4>
   2843a:	2208      	movs	r2, #8
   2843c:	2100      	movs	r1, #0
   2843e:	4620      	mov	r0, r4
   28440:	f7fd ffda 	bl	263f8 <memset>
   28444:	4633      	mov	r3, r6
   28446:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   2844a:	4649      	mov	r1, r9
   2844c:	ee18 0a10 	vmov	r0, s16
   28450:	9400      	str	r4, [sp, #0]
   28452:	f002 fd3b 	bl	2aecc <_mbrtowc_r>
   28456:	f1b0 3fff 	cmp.w	r0, #4294967295
   2845a:	4680      	mov	r8, r0
   2845c:	f43f a873 	beq.w	27546 <__ssvfscanf_r+0x13e>
   28460:	2800      	cmp	r0, #0
   28462:	f040 80cf 	bne.w	28604 <_flash_used+0x594>
   28466:	f8c9 0000 	str.w	r0, [r9]
   2846a:	f002 fc7d 	bl	2ad68 <iswspace>
   2846e:	2800      	cmp	r0, #0
   28470:	f040 817c 	bne.w	2876c <_flash_used+0x6fc>
   28474:	44b2      	add	sl, r6
   28476:	693b      	ldr	r3, [r7, #16]
   28478:	3b01      	subs	r3, #1
   2847a:	613b      	str	r3, [r7, #16]
   2847c:	69fe      	ldr	r6, [r7, #28]
   2847e:	2e00      	cmp	r6, #0
   28480:	f040 8140 	bne.w	28704 <_flash_used+0x694>
   28484:	f109 0904 	add.w	r9, r9, #4
   28488:	69b8      	ldr	r0, [r7, #24]
   2848a:	697b      	ldr	r3, [r7, #20]
   2848c:	eba9 0400 	sub.w	r4, r9, r0
   28490:	461d      	mov	r5, r3
   28492:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   28496:	f200 8135 	bhi.w	28704 <_flash_used+0x694>
   2849a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2849c:	2a00      	cmp	r2, #0
   2849e:	f000 8131 	beq.w	28704 <_flash_used+0x694>
   284a2:	00d9      	lsls	r1, r3, #3
   284a4:	f7fe f804 	bl	264b0 <realloc>
   284a8:	61b8      	str	r0, [r7, #24]
   284aa:	2800      	cmp	r0, #0
   284ac:	f43f af5b 	beq.w	28366 <_flash_used+0x2f6>
   284b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   284b2:	006b      	lsls	r3, r5, #1
   284b4:	eb00 0904 	add.w	r9, r0, r4
   284b8:	6010      	str	r0, [r2, #0]
   284ba:	617b      	str	r3, [r7, #20]
   284bc:	f8db 3004 	ldr.w	r3, [fp, #4]
   284c0:	2b00      	cmp	r3, #0
   284c2:	f77f a833 	ble.w	2752c <__ssvfscanf_r+0x124>
   284c6:	f8db 3000 	ldr.w	r3, [fp]
   284ca:	4a42      	ldr	r2, [pc, #264]	; (285d4 <_flash_used+0x564>)
   284cc:	781b      	ldrb	r3, [r3, #0]
   284ce:	5cd3      	ldrb	r3, [r2, r3]
   284d0:	071b      	lsls	r3, r3, #28
   284d2:	d42d      	bmi.n	28530 <_flash_used+0x4c0>
   284d4:	693b      	ldr	r3, [r7, #16]
   284d6:	b35b      	cbz	r3, 28530 <_flash_used+0x4c0>
   284d8:	4635      	mov	r5, r6
   284da:	f002 fc55 	bl	2ad88 <__locale_mb_cur_max>
   284de:	42a8      	cmp	r0, r5
   284e0:	d194      	bne.n	2840c <_flash_used+0x39c>
   284e2:	f7ff b830 	b.w	27546 <__ssvfscanf_r+0x13e>
   284e6:	e9d7 1305 	ldrd	r1, r3, [r7, #20]
   284ea:	428b      	cmp	r3, r1
   284ec:	eba3 0201 	sub.w	r2, r3, r1
   284f0:	f47f aecc 	bne.w	2828c <_flash_used+0x21c>
   284f4:	f7ff bba9 	b.w	27c4a <__ssvfscanf_r+0x842>
   284f8:	465a      	mov	r2, fp
   284fa:	ee18 0a10 	vmov	r0, s16
   284fe:	f003 fd51 	bl	2bfa4 <_sungetc_r>
   28502:	f1aa 0a02 	sub.w	sl, sl, #2
   28506:	f819 1c02 	ldrb.w	r1, [r9, #-2]
   2850a:	f1a9 0902 	sub.w	r9, r9, #2
   2850e:	f7ff bb87 	b.w	27c20 <__ssvfscanf_r+0x818>
   28512:	1b31      	subs	r1, r6, r4
   28514:	448a      	add	sl, r1
   28516:	3101      	adds	r1, #1
   28518:	e579      	b.n	2800e <__ssvfscanf_r+0xc06>
   2851a:	2101      	movs	r1, #1
   2851c:	e577      	b.n	2800e <__ssvfscanf_r+0xc06>
   2851e:	2300      	movs	r3, #0
   28520:	f107 0244 	add.w	r2, r7, #68	; 0x44
   28524:	617b      	str	r3, [r7, #20]
   28526:	4691      	mov	r9, r2
   28528:	61bb      	str	r3, [r7, #24]
   2852a:	63bb      	str	r3, [r7, #56]	; 0x38
   2852c:	f7ff ba18 	b.w	27960 <__ssvfscanf_r+0x558>
   28530:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   28534:	f7ff ba1d 	b.w	27972 <__ssvfscanf_r+0x56a>
   28538:	f107 0358 	add.w	r3, r7, #88	; 0x58
   2853c:	f8db 2000 	ldr.w	r2, [fp]
   28540:	4619      	mov	r1, r3
   28542:	7813      	ldrb	r3, [r2, #0]
   28544:	5ccb      	ldrb	r3, [r1, r3]
   28546:	2b00      	cmp	r3, #0
   28548:	f43f a806 	beq.w	27558 <__ssvfscanf_r+0x150>
   2854c:	f8db 3004 	ldr.w	r3, [fp, #4]
   28550:	3201      	adds	r2, #1
   28552:	f1b8 0f01 	cmp.w	r8, #1
   28556:	f103 33ff 	add.w	r3, r3, #4294967295
   2855a:	e9cb 2300 	strd	r2, r3, [fp]
   2855e:	f43f acdc 	beq.w	27f1a <__ssvfscanf_r+0xb12>
   28562:	461a      	mov	r2, r3
   28564:	ee18 4a10 	vmov	r4, s16
   28568:	460d      	mov	r5, r1
   2856a:	e012      	b.n	28592 <_flash_used+0x522>
   2856c:	f8db 3000 	ldr.w	r3, [fp]
   28570:	781a      	ldrb	r2, [r3, #0]
   28572:	3301      	adds	r3, #1
   28574:	5caa      	ldrb	r2, [r5, r2]
   28576:	2a00      	cmp	r2, #0
   28578:	f43f accf 	beq.w	27f1a <__ssvfscanf_r+0xb12>
   2857c:	f8db 2004 	ldr.w	r2, [fp, #4]
   28580:	3601      	adds	r6, #1
   28582:	f8cb 3000 	str.w	r3, [fp]
   28586:	3a01      	subs	r2, #1
   28588:	45b0      	cmp	r8, r6
   2858a:	f8cb 2004 	str.w	r2, [fp, #4]
   2858e:	f43f acc4 	beq.w	27f1a <__ssvfscanf_r+0xb12>
   28592:	2a00      	cmp	r2, #0
   28594:	dcea      	bgt.n	2856c <_flash_used+0x4fc>
   28596:	4659      	mov	r1, fp
   28598:	4620      	mov	r0, r4
   2859a:	f003 fd43 	bl	2c024 <__ssrefill_r>
   2859e:	2800      	cmp	r0, #0
   285a0:	d0e4      	beq.n	2856c <_flash_used+0x4fc>
   285a2:	44b2      	add	sl, r6
   285a4:	f7fe bffd 	b.w	275a2 <__ssvfscanf_r+0x19a>
   285a8:	2300      	movs	r3, #0
   285aa:	f107 0244 	add.w	r2, r7, #68	; 0x44
   285ae:	613b      	str	r3, [r7, #16]
   285b0:	4691      	mov	r9, r2
   285b2:	e9c7 3302 	strd	r3, r3, [r7, #8]
   285b6:	f7ff ba2a 	b.w	27a0e <__ssvfscanf_r+0x606>
   285ba:	f8d7 a01c 	ldr.w	sl, [r7, #28]
   285be:	62fe      	str	r6, [r7, #44]	; 0x2c
   285c0:	f7ff bac4 	b.w	27b4c <__ssvfscanf_r+0x744>
   285c4:	7882      	ldrb	r2, [r0, #2]
   285c6:	f044 0402 	orr.w	r4, r4, #2
   285ca:	3002      	adds	r0, #2
   285cc:	f7fe bf51 	b.w	27472 <__ssvfscanf_r+0x6a>
   285d0:	0002fb00 	.word	0x0002fb00
   285d4:	0002f961 	.word	0x0002f961
   285d8:	7882      	ldrb	r2, [r0, #2]
   285da:	f044 0408 	orr.w	r4, r4, #8
   285de:	3002      	adds	r0, #2
   285e0:	f7fe bf47 	b.w	27472 <__ssvfscanf_r+0x6a>
   285e4:	681e      	ldr	r6, [r3, #0]
   285e6:	f04f 33ff 	mov.w	r3, #4294967295
   285ea:	633b      	str	r3, [r7, #48]	; 0x30
   285ec:	2e00      	cmp	r6, #0
   285ee:	f47e afb8 	bne.w	27562 <__ssvfscanf_r+0x15a>
   285f2:	f7fe bfb9 	b.w	27568 <__ssvfscanf_r+0x160>
   285f6:	f856 5b04 	ldr.w	r5, [r6], #4
   285fa:	4699      	mov	r9, r3
   285fc:	61fb      	str	r3, [r7, #28]
   285fe:	63bb      	str	r3, [r7, #56]	; 0x38
   28600:	62be      	str	r6, [r7, #40]	; 0x28
   28602:	e4ca      	b.n	27f9a <__ssvfscanf_r+0xb92>
   28604:	f110 0f02 	cmn.w	r0, #2
   28608:	f43f af58 	beq.w	284bc <_flash_used+0x44c>
   2860c:	f8d9 0000 	ldr.w	r0, [r9]
   28610:	f002 fbaa 	bl	2ad68 <iswspace>
   28614:	2800      	cmp	r0, #0
   28616:	f040 80a9 	bne.w	2876c <_flash_used+0x6fc>
   2861a:	f1b8 0f03 	cmp.w	r8, #3
   2861e:	44b2      	add	sl, r6
   28620:	f47f af29 	bne.w	28476 <_flash_used+0x406>
   28624:	6823      	ldr	r3, [r4, #0]
   28626:	2b04      	cmp	r3, #4
   28628:	f47f af25 	bne.w	28476 <_flash_used+0x406>
   2862c:	e726      	b.n	2847c <_flash_used+0x40c>
   2862e:	b082      	sub	sp, #8
   28630:	aa02      	add	r2, sp, #8
   28632:	6013      	str	r3, [r2, #0]
   28634:	9303      	str	r3, [sp, #12]
   28636:	637a      	str	r2, [r7, #52]	; 0x34
   28638:	e402      	b.n	27e40 <__ssvfscanf_r+0xa38>
   2863a:	f04f 33ff 	mov.w	r3, #4294967295
   2863e:	633b      	str	r3, [r7, #48]	; 0x30
   28640:	f7fe bf92 	b.w	27568 <__ssvfscanf_r+0x160>
   28644:	69fb      	ldr	r3, [r7, #28]
   28646:	f856 9b04 	ldr.w	r9, [r6], #4
   2864a:	63bb      	str	r3, [r7, #56]	; 0x38
   2864c:	62be      	str	r6, [r7, #40]	; 0x28
   2864e:	e9c7 3305 	strd	r3, r3, [r7, #20]
   28652:	f7ff b985 	b.w	27960 <__ssvfscanf_r+0x558>
   28656:	f856 5b04 	ldr.w	r5, [r6], #4
   2865a:	61fc      	str	r4, [r7, #28]
   2865c:	62be      	str	r6, [r7, #40]	; 0x28
   2865e:	e513      	b.n	28088 <_flash_used+0x18>
   28660:	697b      	ldr	r3, [r7, #20]
   28662:	f856 9b04 	ldr.w	r9, [r6], #4
   28666:	60bb      	str	r3, [r7, #8]
   28668:	62be      	str	r6, [r7, #40]	; 0x28
   2866a:	e9c7 3303 	strd	r3, r3, [r7, #12]
   2866e:	f7ff b9ce 	b.w	27a0e <__ssvfscanf_r+0x606>
   28672:	0766      	lsls	r6, r4, #29
   28674:	f140 8091 	bpl.w	2879a <_flash_used+0x72a>
   28678:	6abe      	ldr	r6, [r7, #40]	; 0x28
   2867a:	63f9      	str	r1, [r7, #60]	; 0x3c
   2867c:	f856 3b04 	ldr.w	r3, [r6], #4
   28680:	f8a3 a000 	strh.w	sl, [r3]
   28684:	62be      	str	r6, [r7, #40]	; 0x28
   28686:	f7fe bf8c 	b.w	275a2 <__ssvfscanf_r+0x19a>
   2868a:	4659      	mov	r1, fp
   2868c:	ee18 0a10 	vmov	r0, s16
   28690:	f003 fcc8 	bl	2c024 <__ssrefill_r>
   28694:	2800      	cmp	r0, #0
   28696:	f43f acaf 	beq.w	27ff8 <__ssvfscanf_r+0xbf0>
   2869a:	e4b4      	b.n	28006 <__ssvfscanf_r+0xbfe>
   2869c:	f8db 2000 	ldr.w	r2, [fp]
   286a0:	49c0      	ldr	r1, [pc, #768]	; (289a4 <_flash_used+0x934>)
   286a2:	7813      	ldrb	r3, [r2, #0]
   286a4:	5ccb      	ldrb	r3, [r1, r3]
   286a6:	071c      	lsls	r4, r3, #28
   286a8:	d429      	bmi.n	286fe <_flash_used+0x68e>
   286aa:	f8db 3004 	ldr.w	r3, [fp, #4]
   286ae:	3201      	adds	r2, #1
   286b0:	f1b8 0f01 	cmp.w	r8, #1
   286b4:	f103 33ff 	add.w	r3, r3, #4294967295
   286b8:	e9cb 2300 	strd	r2, r3, [fp]
   286bc:	f000 80cc 	beq.w	28858 <_flash_used+0x7e8>
   286c0:	2501      	movs	r5, #1
   286c2:	461a      	mov	r2, r3
   286c4:	ee18 4a10 	vmov	r4, s16
   286c8:	e011      	b.n	286ee <_flash_used+0x67e>
   286ca:	f8db 3000 	ldr.w	r3, [fp]
   286ce:	49b5      	ldr	r1, [pc, #724]	; (289a4 <_flash_used+0x934>)
   286d0:	781a      	ldrb	r2, [r3, #0]
   286d2:	3301      	adds	r3, #1
   286d4:	5c8a      	ldrb	r2, [r1, r2]
   286d6:	0710      	lsls	r0, r2, #28
   286d8:	d411      	bmi.n	286fe <_flash_used+0x68e>
   286da:	f8db 2004 	ldr.w	r2, [fp, #4]
   286de:	3501      	adds	r5, #1
   286e0:	f8cb 3000 	str.w	r3, [fp]
   286e4:	3a01      	subs	r2, #1
   286e6:	45a8      	cmp	r8, r5
   286e8:	f8cb 2004 	str.w	r2, [fp, #4]
   286ec:	d007      	beq.n	286fe <_flash_used+0x68e>
   286ee:	2a00      	cmp	r2, #0
   286f0:	dceb      	bgt.n	286ca <_flash_used+0x65a>
   286f2:	4659      	mov	r1, fp
   286f4:	4620      	mov	r0, r4
   286f6:	f003 fc95 	bl	2c024 <__ssrefill_r>
   286fa:	2800      	cmp	r0, #0
   286fc:	d0e5      	beq.n	286ca <_flash_used+0x65a>
   286fe:	44aa      	add	sl, r5
   28700:	f7fe bf4f 	b.w	275a2 <__ssvfscanf_r+0x19a>
   28704:	2600      	movs	r6, #0
   28706:	e6d9      	b.n	284bc <_flash_used+0x44c>
   28708:	f014 0201 	ands.w	r2, r4, #1
   2870c:	f47f abf8 	bne.w	27f00 <__ssvfscanf_r+0xaf8>
   28710:	07a3      	lsls	r3, r4, #30
   28712:	d571      	bpl.n	287f8 <_flash_used+0x788>
   28714:	4ba4      	ldr	r3, [pc, #656]	; (289a8 <_flash_used+0x938>)
   28716:	ee18 0a10 	vmov	r0, s16
   2871a:	6a39      	ldr	r1, [r7, #32]
   2871c:	4299      	cmp	r1, r3
   2871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28720:	69f9      	ldr	r1, [r7, #28]
   28722:	f000 809d 	beq.w	28860 <_flash_used+0x7f0>
   28726:	f003 faef 	bl	2bd08 <_strtoll_r>
   2872a:	6abc      	ldr	r4, [r7, #40]	; 0x28
   2872c:	f854 3b04 	ldr.w	r3, [r4], #4
   28730:	6018      	str	r0, [r3, #0]
   28732:	62bc      	str	r4, [r7, #40]	; 0x28
   28734:	6059      	str	r1, [r3, #4]
   28736:	f7ff bbe8 	b.w	27f0a <__ssvfscanf_r+0xb02>
   2873a:	4645      	mov	r5, r8
   2873c:	f8d7 a01c 	ldr.w	sl, [r7, #28]
   28740:	62fe      	str	r6, [r7, #44]	; 0x2c
   28742:	2d00      	cmp	r5, #0
   28744:	f43f aa02 	beq.w	27b4c <__ssvfscanf_r+0x744>
   28748:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   2874c:	ee18 6a10 	vmov	r6, s16
   28750:	441c      	add	r4, r3
   28752:	7821      	ldrb	r1, [r4, #0]
   28754:	465a      	mov	r2, fp
   28756:	4630      	mov	r0, r6
   28758:	f003 fc24 	bl	2bfa4 <_sungetc_r>
   2875c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   28760:	429c      	cmp	r4, r3
   28762:	f104 34ff 	add.w	r4, r4, #4294967295
   28766:	d1f4      	bne.n	28752 <_flash_used+0x6e2>
   28768:	f7ff b9f0 	b.w	27b4c <__ssvfscanf_r+0x744>
   2876c:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   28770:	2e00      	cmp	r6, #0
   28772:	f43f a8fe 	beq.w	27972 <__ssvfscanf_r+0x56a>
   28776:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   2877a:	ee18 6a10 	vmov	r6, s16
   2877e:	441d      	add	r5, r3
   28780:	7829      	ldrb	r1, [r5, #0]
   28782:	465a      	mov	r2, fp
   28784:	4630      	mov	r0, r6
   28786:	f003 fc0d 	bl	2bfa4 <_sungetc_r>
   2878a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
   2878e:	42ab      	cmp	r3, r5
   28790:	f105 35ff 	add.w	r5, r5, #4294967295
   28794:	d1f4      	bne.n	28780 <_flash_used+0x710>
   28796:	f7ff b8ec 	b.w	27972 <__ssvfscanf_r+0x56a>
   2879a:	07e5      	lsls	r5, r4, #31
   2879c:	d40c      	bmi.n	287b8 <_flash_used+0x748>
   2879e:	07a0      	lsls	r0, r4, #30
   287a0:	d50a      	bpl.n	287b8 <_flash_used+0x748>
   287a2:	6abe      	ldr	r6, [r7, #40]	; 0x28
   287a4:	4652      	mov	r2, sl
   287a6:	63f9      	str	r1, [r7, #60]	; 0x3c
   287a8:	17d3      	asrs	r3, r2, #31
   287aa:	f856 1b04 	ldr.w	r1, [r6], #4
   287ae:	62be      	str	r6, [r7, #40]	; 0x28
   287b0:	e9c1 2300 	strd	r2, r3, [r1]
   287b4:	f7fe bef5 	b.w	275a2 <__ssvfscanf_r+0x19a>
   287b8:	6abe      	ldr	r6, [r7, #40]	; 0x28
   287ba:	63f9      	str	r1, [r7, #60]	; 0x3c
   287bc:	f856 3b04 	ldr.w	r3, [r6], #4
   287c0:	f8c3 a000 	str.w	sl, [r3]
   287c4:	62be      	str	r6, [r7, #40]	; 0x28
   287c6:	f7fe beec 	b.w	275a2 <__ssvfscanf_r+0x19a>
   287ca:	617e      	str	r6, [r7, #20]
   287cc:	4626      	mov	r6, r4
   287ce:	465c      	mov	r4, fp
   287d0:	46c3      	mov	fp, r8
   287d2:	4635      	mov	r5, r6
   287d4:	f7ff ba0b 	b.w	27bee <__ssvfscanf_r+0x7e6>
   287d8:	69fc      	ldr	r4, [r7, #28]
   287da:	ee18 aa10 	vmov	sl, s16
   287de:	45a1      	cmp	r9, r4
   287e0:	f67e aeba 	bls.w	27558 <__ssvfscanf_r+0x150>
   287e4:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   287e8:	465a      	mov	r2, fp
   287ea:	4650      	mov	r0, sl
   287ec:	f003 fbda 	bl	2bfa4 <_sungetc_r>
   287f0:	45a1      	cmp	r9, r4
   287f2:	d1f7      	bne.n	287e4 <_flash_used+0x774>
   287f4:	f7fe beb0 	b.w	27558 <__ssvfscanf_r+0x150>
   287f8:	6abc      	ldr	r4, [r7, #40]	; 0x28
   287fa:	f854 3b04 	ldr.w	r3, [r4], #4
   287fe:	62bc      	str	r4, [r7, #40]	; 0x28
   28800:	6018      	str	r0, [r3, #0]
   28802:	f7ff bb82 	b.w	27f0a <__ssvfscanf_r+0xb02>
   28806:	69fc      	ldr	r4, [r7, #28]
   28808:	ee18 aa10 	vmov	sl, s16
   2880c:	45a1      	cmp	r9, r4
   2880e:	f67e aea3 	bls.w	27558 <__ssvfscanf_r+0x150>
   28812:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   28816:	465a      	mov	r2, fp
   28818:	4650      	mov	r0, sl
   2881a:	f003 fbc3 	bl	2bfa4 <_sungetc_r>
   2881e:	45a1      	cmp	r9, r4
   28820:	d1f7      	bne.n	28812 <_flash_used+0x7a2>
   28822:	f7fe be99 	b.w	27558 <__ssvfscanf_r+0x150>
   28826:	4861      	ldr	r0, [pc, #388]	; (289ac <_flash_used+0x93c>)
   28828:	62be      	str	r6, [r7, #40]	; 0x28
   2882a:	f003 f92f 	bl	2ba8c <nanf>
   2882e:	ed84 0a00 	vstr	s0, [r4]
   28832:	f7ff ba1d 	b.w	27c70 <__ssvfscanf_r+0x868>
   28836:	69fb      	ldr	r3, [r7, #28]
   28838:	ee18 aa10 	vmov	sl, s16
   2883c:	4599      	cmp	r9, r3
   2883e:	f67e ae8b 	bls.w	27558 <__ssvfscanf_r+0x150>
   28842:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
   28846:	465a      	mov	r2, fp
   28848:	4650      	mov	r0, sl
   2884a:	f003 fbab 	bl	2bfa4 <_sungetc_r>
   2884e:	69fb      	ldr	r3, [r7, #28]
   28850:	4599      	cmp	r9, r3
   28852:	d1f6      	bne.n	28842 <_flash_used+0x7d2>
   28854:	f7fe be80 	b.w	27558 <__ssvfscanf_r+0x150>
   28858:	4645      	mov	r5, r8
   2885a:	44aa      	add	sl, r5
   2885c:	f7fe bea1 	b.w	275a2 <__ssvfscanf_r+0x19a>
   28860:	f003 fb1a 	bl	2be98 <_strtoull_r>
   28864:	e761      	b.n	2872a <_flash_used+0x6ba>
   28866:	4635      	mov	r5, r6
   28868:	f7ff b9c1 	b.w	27bee <__ssvfscanf_r+0x7e6>
   2886c:	f8d9 3000 	ldr.w	r3, [r9]
   28870:	461d      	mov	r5, r3
   28872:	3301      	adds	r3, #1
   28874:	f47f a8d7 	bne.w	27a26 <__ssvfscanf_r+0x61e>
   28878:	462a      	mov	r2, r5
   2887a:	f7ff b8ea 	b.w	27a52 <__ssvfscanf_r+0x64a>
   2887e:	06e1      	lsls	r1, r4, #27
   28880:	f100 8096 	bmi.w	289b0 <_flash_used+0x940>
   28884:	f014 0f80 	tst.w	r4, #128	; 0x80
   28888:	6abc      	ldr	r4, [r7, #40]	; 0x28
   2888a:	f000 80aa 	beq.w	289e2 <_flash_used+0x972>
   2888e:	f854 6b04 	ldr.w	r6, [r4], #4
   28892:	2e00      	cmp	r6, #0
   28894:	f43e ae60 	beq.w	27558 <__ssvfscanf_r+0x150>
   28898:	4628      	mov	r0, r5
   2889a:	f7fd fa63 	bl	25d64 <malloc>
   2889e:	4681      	mov	r9, r0
   288a0:	2800      	cmp	r0, #0
   288a2:	f43f ad60 	beq.w	28366 <_flash_used+0x2f6>
   288a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   288a8:	6030      	str	r0, [r6, #0]
   288aa:	f8b3 8006 	ldrh.w	r8, [r3, #6]
   288ae:	889a      	ldrh	r2, [r3, #4]
   288b0:	4590      	cmp	r8, r2
   288b2:	f0c0 80af 	bcc.w	28a14 <_flash_used+0x9a4>
   288b6:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   288ba:	429a      	cmp	r2, r3
   288bc:	f63f ad57 	bhi.w	2836e <_flash_used+0x2fe>
   288c0:	f102 0308 	add.w	r3, r2, #8
   288c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   288c6:	0099      	lsls	r1, r3, #2
   288c8:	6810      	ldr	r0, [r2, #0]
   288ca:	63bb      	str	r3, [r7, #56]	; 0x38
   288cc:	f7fd fdf0 	bl	264b0 <realloc>
   288d0:	2800      	cmp	r0, #0
   288d2:	f43f ad4c 	beq.w	2836e <_flash_used+0x2fe>
   288d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   288d8:	461a      	mov	r2, r3
   288da:	6018      	str	r0, [r3, #0]
   288dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   288de:	8093      	strh	r3, [r2, #4]
   288e0:	f840 6028 	str.w	r6, [r0, r8, lsl #2]
   288e4:	f108 0201 	add.w	r2, r8, #1
   288e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
   288ea:	4649      	mov	r1, r9
   288ec:	462b      	mov	r3, r5
   288ee:	80c2      	strh	r2, [r0, #6]
   288f0:	2201      	movs	r2, #1
   288f2:	ee18 0a10 	vmov	r0, s16
   288f6:	f8cd b000 	str.w	fp, [sp]
   288fa:	f003 fbb1 	bl	2c060 <_sfread_r>
   288fe:	4680      	mov	r8, r0
   28900:	2800      	cmp	r0, #0
   28902:	f000 8089 	beq.w	28a18 <_flash_used+0x9a8>
   28906:	4285      	cmp	r5, r0
   28908:	d905      	bls.n	28916 <_flash_used+0x8a6>
   2890a:	4601      	mov	r1, r0
   2890c:	6830      	ldr	r0, [r6, #0]
   2890e:	f7fd fdcf 	bl	264b0 <realloc>
   28912:	b100      	cbz	r0, 28916 <_flash_used+0x8a6>
   28914:	6030      	str	r0, [r6, #0]
   28916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28918:	44c2      	add	sl, r8
   2891a:	62bc      	str	r4, [r7, #40]	; 0x28
   2891c:	3301      	adds	r3, #1
   2891e:	633b      	str	r3, [r7, #48]	; 0x30
   28920:	f7fe be3f 	b.w	275a2 <__ssvfscanf_r+0x19a>
   28924:	0621      	lsls	r1, r4, #24
   28926:	d534      	bpl.n	28992 <_flash_used+0x922>
   28928:	f8d7 8028 	ldr.w	r8, [r7, #40]	; 0x28
   2892c:	f858 3b04 	ldr.w	r3, [r8], #4
   28930:	63bb      	str	r3, [r7, #56]	; 0x38
   28932:	2b00      	cmp	r3, #0
   28934:	f43e ae10 	beq.w	27558 <__ssvfscanf_r+0x150>
   28938:	2080      	movs	r0, #128	; 0x80
   2893a:	f7fd fa13 	bl	25d64 <malloc>
   2893e:	4606      	mov	r6, r0
   28940:	2800      	cmp	r0, #0
   28942:	f43f ad10 	beq.w	28366 <_flash_used+0x2f6>
   28946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28948:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2894a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
   2894e:	889c      	ldrh	r4, [r3, #4]
   28950:	6010      	str	r0, [r2, #0]
   28952:	45a1      	cmp	r9, r4
   28954:	d35c      	bcc.n	28a10 <_flash_used+0x9a0>
   28956:	f64f 73f6 	movw	r3, #65526	; 0xfff6
   2895a:	429c      	cmp	r4, r3
   2895c:	f63f ad07 	bhi.w	2836e <_flash_used+0x2fe>
   28960:	3408      	adds	r4, #8
   28962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28964:	00a1      	lsls	r1, r4, #2
   28966:	6818      	ldr	r0, [r3, #0]
   28968:	f7fd fda2 	bl	264b0 <realloc>
   2896c:	2800      	cmp	r0, #0
   2896e:	f43f acfe 	beq.w	2836e <_flash_used+0x2fe>
   28972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28974:	6018      	str	r0, [r3, #0]
   28976:	809c      	strh	r4, [r3, #4]
   28978:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2897a:	f109 0301 	add.w	r3, r9, #1
   2897e:	f8c7 8028 	str.w	r8, [r7, #40]	; 0x28
   28982:	46b0      	mov	r8, r6
   28984:	f840 2029 	str.w	r2, [r0, r9, lsl #2]
   28988:	f04f 0920 	mov.w	r9, #32
   2898c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2898e:	80d3      	strh	r3, [r2, #6]
   28990:	e49a      	b.n	282c8 <_flash_used+0x258>
   28992:	6abc      	ldr	r4, [r7, #40]	; 0x28
   28994:	69fb      	ldr	r3, [r7, #28]
   28996:	f854 6b04 	ldr.w	r6, [r4], #4
   2899a:	4699      	mov	r9, r3
   2899c:	4698      	mov	r8, r3
   2899e:	63bb      	str	r3, [r7, #56]	; 0x38
   289a0:	62bc      	str	r4, [r7, #40]	; 0x28
   289a2:	e491      	b.n	282c8 <_flash_used+0x258>
   289a4:	0002f961 	.word	0x0002f961
   289a8:	000273ed 	.word	0x000273ed
   289ac:	0002f92c 	.word	0x0002f92c
   289b0:	461c      	mov	r4, r3
   289b2:	f8db 2004 	ldr.w	r2, [fp, #4]
   289b6:	4659      	mov	r1, fp
   289b8:	ee18 0a10 	vmov	r0, s16
   289bc:	f8db 3000 	ldr.w	r3, [fp]
   289c0:	4295      	cmp	r5, r2
   289c2:	dd1d      	ble.n	28a00 <_flash_used+0x990>
   289c4:	4413      	add	r3, r2
   289c6:	4414      	add	r4, r2
   289c8:	1aad      	subs	r5, r5, r2
   289ca:	f8cb 3000 	str.w	r3, [fp]
   289ce:	f003 fb29 	bl	2c024 <__ssrefill_r>
   289d2:	2800      	cmp	r0, #0
   289d4:	d0ed      	beq.n	289b2 <_flash_used+0x942>
   289d6:	2c00      	cmp	r4, #0
   289d8:	f43e adb5 	beq.w	27546 <__ssvfscanf_r+0x13e>
   289dc:	44a2      	add	sl, r4
   289de:	f7fe bde0 	b.w	275a2 <__ssvfscanf_r+0x19a>
   289e2:	f854 1b04 	ldr.w	r1, [r4], #4
   289e6:	462b      	mov	r3, r5
   289e8:	2201      	movs	r2, #1
   289ea:	ee18 0a10 	vmov	r0, s16
   289ee:	f8cd b000 	str.w	fp, [sp]
   289f2:	f003 fb35 	bl	2c060 <_sfread_r>
   289f6:	4680      	mov	r8, r0
   289f8:	2800      	cmp	r0, #0
   289fa:	d18c      	bne.n	28916 <_flash_used+0x8a6>
   289fc:	f7fe bda3 	b.w	27546 <__ssvfscanf_r+0x13e>
   28a00:	1b52      	subs	r2, r2, r5
   28a02:	442c      	add	r4, r5
   28a04:	442b      	add	r3, r5
   28a06:	44a2      	add	sl, r4
   28a08:	e9cb 3200 	strd	r3, r2, [fp]
   28a0c:	f7fe bdc9 	b.w	275a2 <__ssvfscanf_r+0x19a>
   28a10:	6818      	ldr	r0, [r3, #0]
   28a12:	e7b1      	b.n	28978 <_flash_used+0x908>
   28a14:	6818      	ldr	r0, [r3, #0]
   28a16:	e763      	b.n	288e0 <_flash_used+0x870>
   28a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28a1a:	2b00      	cmp	r3, #0
   28a1c:	f43f aca7 	beq.w	2836e <_flash_used+0x2fe>
   28a20:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   28a24:	065b      	lsls	r3, r3, #25
   28a26:	f57e ad99 	bpl.w	2755c <__ssvfscanf_r+0x154>
   28a2a:	e49c      	b.n	28366 <_flash_used+0x2f6>
   28a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   28a2e:	1c90      	adds	r0, r2, #2
   28a30:	d008      	beq.n	28a44 <_flash_used+0x9d4>
   28a32:	2a03      	cmp	r2, #3
   28a34:	449a      	add	sl, r3
   28a36:	f47f ac7e 	bne.w	28336 <_flash_used+0x2c6>
   28a3a:	6823      	ldr	r3, [r4, #0]
   28a3c:	2b04      	cmp	r3, #4
   28a3e:	f47f ac7a 	bne.w	28336 <_flash_used+0x2c6>
   28a42:	e479      	b.n	28338 <_flash_used+0x2c8>
   28a44:	f8db 2004 	ldr.w	r2, [fp, #4]
   28a48:	461c      	mov	r4, r3
   28a4a:	2a00      	cmp	r2, #0
   28a4c:	f73f ac3d 	bgt.w	282ca <_flash_used+0x25a>
   28a50:	4659      	mov	r1, fp
   28a52:	ee18 0a10 	vmov	r0, s16
   28a56:	f003 fae5 	bl	2c024 <__ssrefill_r>
   28a5a:	b978      	cbnz	r0, 28a7c <_flash_used+0xa0c>
   28a5c:	2d00      	cmp	r5, #0
   28a5e:	f47f ac34 	bne.w	282ca <_flash_used+0x25a>
   28a62:	eba6 0108 	sub.w	r1, r6, r8
   28a66:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
   28a6a:	d901      	bls.n	28a70 <_flash_used+0xa00>
   28a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28a6e:	b9c3      	cbnz	r3, 28aa2 <_flash_used+0xa32>
   28a70:	69fb      	ldr	r3, [r7, #28]
   28a72:	2b00      	cmp	r3, #0
   28a74:	f47e ad95 	bne.w	275a2 <__ssvfscanf_r+0x19a>
   28a78:	f7ff b8fa 	b.w	27c70 <__ssvfscanf_r+0x868>
   28a7c:	2c00      	cmp	r4, #0
   28a7e:	d0f0      	beq.n	28a62 <_flash_used+0x9f2>
   28a80:	f7fe bd61 	b.w	27546 <__ssvfscanf_r+0x13e>
   28a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28a86:	1906      	adds	r6, r0, r4
   28a88:	ea4f 0949 	mov.w	r9, r9, lsl #1
   28a8c:	6018      	str	r0, [r3, #0]
   28a8e:	3604      	adds	r6, #4
   28a90:	f8db 3004 	ldr.w	r3, [fp, #4]
   28a94:	2400      	movs	r4, #0
   28a96:	2b00      	cmp	r3, #0
   28a98:	ddda      	ble.n	28a50 <_flash_used+0x9e0>
   28a9a:	2d00      	cmp	r5, #0
   28a9c:	f47f ac15 	bne.w	282ca <_flash_used+0x25a>
   28aa0:	e7df      	b.n	28a62 <_flash_used+0x9f2>
   28aa2:	6bbc      	ldr	r4, [r7, #56]	; 0x38
   28aa4:	6820      	ldr	r0, [r4, #0]
   28aa6:	f7fd fd03 	bl	264b0 <realloc>
   28aaa:	2800      	cmp	r0, #0
   28aac:	d0e0      	beq.n	28a70 <_flash_used+0xa00>
   28aae:	6020      	str	r0, [r4, #0]
   28ab0:	e7de      	b.n	28a70 <_flash_used+0xa00>
   28ab2:	bf00      	nop

00028ab4 <__sprint_r.part.0>:
   28ab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28ab8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   28aba:	4690      	mov	r8, r2
   28abc:	049c      	lsls	r4, r3, #18
   28abe:	d52c      	bpl.n	28b1a <__sprint_r.part.0+0x66>
   28ac0:	6893      	ldr	r3, [r2, #8]
   28ac2:	6812      	ldr	r2, [r2, #0]
   28ac4:	b33b      	cbz	r3, 28b16 <__sprint_r.part.0+0x62>
   28ac6:	468b      	mov	fp, r1
   28ac8:	4606      	mov	r6, r0
   28aca:	f102 0908 	add.w	r9, r2, #8
   28ace:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   28ad2:	ea5f 079a 	movs.w	r7, sl, lsr #2
   28ad6:	d014      	beq.n	28b02 <__sprint_r.part.0+0x4e>
   28ad8:	3d04      	subs	r5, #4
   28ada:	2400      	movs	r4, #0
   28adc:	e001      	b.n	28ae2 <__sprint_r.part.0+0x2e>
   28ade:	42a7      	cmp	r7, r4
   28ae0:	d00d      	beq.n	28afe <__sprint_r.part.0+0x4a>
   28ae2:	465a      	mov	r2, fp
   28ae4:	f855 1f04 	ldr.w	r1, [r5, #4]!
   28ae8:	4630      	mov	r0, r6
   28aea:	3401      	adds	r4, #1
   28aec:	f001 fa30 	bl	29f50 <_fputwc_r>
   28af0:	1c43      	adds	r3, r0, #1
   28af2:	d1f4      	bne.n	28ade <__sprint_r.part.0+0x2a>
   28af4:	2300      	movs	r3, #0
   28af6:	e9c8 3301 	strd	r3, r3, [r8, #4]
   28afa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28afe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   28b02:	f02a 0a03 	bic.w	sl, sl, #3
   28b06:	f109 0908 	add.w	r9, r9, #8
   28b0a:	eba3 030a 	sub.w	r3, r3, sl
   28b0e:	f8c8 3008 	str.w	r3, [r8, #8]
   28b12:	2b00      	cmp	r3, #0
   28b14:	d1db      	bne.n	28ace <__sprint_r.part.0+0x1a>
   28b16:	2000      	movs	r0, #0
   28b18:	e7ec      	b.n	28af4 <__sprint_r.part.0+0x40>
   28b1a:	f001 fba3 	bl	2a264 <__sfvwrite_r>
   28b1e:	2300      	movs	r3, #0
   28b20:	e9c8 3301 	strd	r3, r3, [r8, #4]
   28b24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00028b28 <_vfiprintf_r>:
   28b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b2c:	ed2d 8b02 	vpush	{d8}
   28b30:	b0bd      	sub	sp, #244	; 0xf4
   28b32:	461c      	mov	r4, r3
   28b34:	468a      	mov	sl, r1
   28b36:	4691      	mov	r9, r2
   28b38:	ee08 0a10 	vmov	s16, r0
   28b3c:	9306      	str	r3, [sp, #24]
   28b3e:	b118      	cbz	r0, 28b48 <_vfiprintf_r+0x20>
   28b40:	6b83      	ldr	r3, [r0, #56]	; 0x38
   28b42:	2b00      	cmp	r3, #0
   28b44:	f000 8279 	beq.w	2903a <_vfiprintf_r+0x512>
   28b48:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   28b4c:	f9ba 100c 	ldrsh.w	r1, [sl, #12]
   28b50:	07db      	lsls	r3, r3, #31
   28b52:	b28a      	uxth	r2, r1
   28b54:	d402      	bmi.n	28b5c <_vfiprintf_r+0x34>
   28b56:	058f      	lsls	r7, r1, #22
   28b58:	f140 8508 	bpl.w	2956c <_vfiprintf_r+0xa44>
   28b5c:	0496      	lsls	r6, r2, #18
   28b5e:	d40a      	bmi.n	28b76 <_vfiprintf_r+0x4e>
   28b60:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   28b64:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   28b68:	b28a      	uxth	r2, r1
   28b6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   28b6e:	f8aa 100c 	strh.w	r1, [sl, #12]
   28b72:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
   28b76:	0715      	lsls	r5, r2, #28
   28b78:	f140 80f3 	bpl.w	28d62 <_vfiprintf_r+0x23a>
   28b7c:	f8da 3010 	ldr.w	r3, [sl, #16]
   28b80:	2b00      	cmp	r3, #0
   28b82:	f000 80ee 	beq.w	28d62 <_vfiprintf_r+0x23a>
   28b86:	f002 031a 	and.w	r3, r2, #26
   28b8a:	2b0a      	cmp	r3, #10
   28b8c:	f000 80f8 	beq.w	28d80 <_vfiprintf_r+0x258>
   28b90:	2300      	movs	r3, #0
   28b92:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28b96:	ee18 ba10 	vmov	fp, s16
   28b9a:	9309      	str	r3, [sp, #36]	; 0x24
   28b9c:	9312      	str	r3, [sp, #72]	; 0x48
   28b9e:	930a      	str	r3, [sp, #40]	; 0x28
   28ba0:	9305      	str	r3, [sp, #20]
   28ba2:	9311      	str	r3, [sp, #68]	; 0x44
   28ba4:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   28ba8:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
   28bac:	f899 3000 	ldrb.w	r3, [r9]
   28bb0:	464c      	mov	r4, r9
   28bb2:	2b25      	cmp	r3, #37	; 0x25
   28bb4:	d01c      	beq.n	28bf0 <_vfiprintf_r+0xc8>
   28bb6:	b1db      	cbz	r3, 28bf0 <_vfiprintf_r+0xc8>
   28bb8:	4625      	mov	r5, r4
   28bba:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   28bbe:	b10b      	cbz	r3, 28bc4 <_vfiprintf_r+0x9c>
   28bc0:	2b25      	cmp	r3, #37	; 0x25
   28bc2:	d1f9      	bne.n	28bb8 <_vfiprintf_r+0x90>
   28bc4:	ebb4 0609 	subs.w	r6, r4, r9
   28bc8:	d012      	beq.n	28bf0 <_vfiprintf_r+0xc8>
   28bca:	f8c8 9000 	str.w	r9, [r8]
   28bce:	f8c8 6004 	str.w	r6, [r8, #4]
   28bd2:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
   28bd6:	3301      	adds	r3, #1
   28bd8:	4432      	add	r2, r6
   28bda:	2b07      	cmp	r3, #7
   28bdc:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   28be0:	f300 812b 	bgt.w	28e3a <_vfiprintf_r+0x312>
   28be4:	f108 0808 	add.w	r8, r8, #8
   28be8:	9b05      	ldr	r3, [sp, #20]
   28bea:	4433      	add	r3, r6
   28bec:	9305      	str	r3, [sp, #20]
   28bee:	786b      	ldrb	r3, [r5, #1]
   28bf0:	2b00      	cmp	r3, #0
   28bf2:	f000 812e 	beq.w	28e52 <_vfiprintf_r+0x32a>
   28bf6:	f04f 0300 	mov.w	r3, #0
   28bfa:	2600      	movs	r6, #0
   28bfc:	f04f 32ff 	mov.w	r2, #4294967295
   28c00:	f104 0901 	add.w	r9, r4, #1
   28c04:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   28c08:	252b      	movs	r5, #43	; 0x2b
   28c0a:	7863      	ldrb	r3, [r4, #1]
   28c0c:	9604      	str	r6, [sp, #16]
   28c0e:	9202      	str	r2, [sp, #8]
   28c10:	f109 0901 	add.w	r9, r9, #1
   28c14:	f1a3 0220 	sub.w	r2, r3, #32
   28c18:	2a5a      	cmp	r2, #90	; 0x5a
   28c1a:	f200 8131 	bhi.w	28e80 <_vfiprintf_r+0x358>
   28c1e:	e8df f012 	tbh	[pc, r2, lsl #1]
   28c22:	006a      	.short	0x006a
   28c24:	012f012f 	.word	0x012f012f
   28c28:	012f0262 	.word	0x012f0262
   28c2c:	012f012f 	.word	0x012f012f
   28c30:	012f0242 	.word	0x012f0242
   28c34:	020f012f 	.word	0x020f012f
   28c38:	012f021f 	.word	0x012f021f
   28c3c:	0229021a 	.word	0x0229021a
   28c40:	0224012f 	.word	0x0224012f
   28c44:	005b005b 	.word	0x005b005b
   28c48:	005b005b 	.word	0x005b005b
   28c4c:	005b005b 	.word	0x005b005b
   28c50:	005b005b 	.word	0x005b005b
   28c54:	012f005b 	.word	0x012f005b
   28c58:	012f012f 	.word	0x012f012f
   28c5c:	012f012f 	.word	0x012f012f
   28c60:	012f012f 	.word	0x012f012f
   28c64:	012f012f 	.word	0x012f012f
   28c68:	007701fd 	.word	0x007701fd
   28c6c:	012f012f 	.word	0x012f012f
   28c70:	012f012f 	.word	0x012f012f
   28c74:	012f012f 	.word	0x012f012f
   28c78:	012f012f 	.word	0x012f012f
   28c7c:	012f012f 	.word	0x012f012f
   28c80:	012f00c9 	.word	0x012f00c9
   28c84:	012f012f 	.word	0x012f012f
   28c88:	012f01e1 	.word	0x012f01e1
   28c8c:	012f0277 	.word	0x012f0277
   28c90:	04e8012f 	.word	0x04e8012f
   28c94:	012f012f 	.word	0x012f012f
   28c98:	012f012f 	.word	0x012f012f
   28c9c:	012f012f 	.word	0x012f012f
   28ca0:	012f012f 	.word	0x012f012f
   28ca4:	012f012f 	.word	0x012f012f
   28ca8:	007901fd 	.word	0x007901fd
   28cac:	012f012f 	.word	0x012f012f
   28cb0:	026f012f 	.word	0x026f012f
   28cb4:	00720079 	.word	0x00720079
   28cb8:	0267012f 	.word	0x0267012f
   28cbc:	0298012f 	.word	0x0298012f
   28cc0:	028700cb 	.word	0x028700cb
   28cc4:	012f0072 	.word	0x012f0072
   28cc8:	006f01e1 	.word	0x006f01e1
   28ccc:	012f04e6 	.word	0x012f04e6
   28cd0:	0505012f 	.word	0x0505012f
   28cd4:	006f012f 	.word	0x006f012f
   28cd8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   28cdc:	2100      	movs	r1, #0
   28cde:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   28ce2:	f819 3b01 	ldrb.w	r3, [r9], #1
   28ce6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   28cea:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   28cee:	2a09      	cmp	r2, #9
   28cf0:	d9f5      	bls.n	28cde <_vfiprintf_r+0x1b6>
   28cf2:	9104      	str	r1, [sp, #16]
   28cf4:	e78e      	b.n	28c14 <_vfiprintf_r+0xec>
   28cf6:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   28cfa:	2b00      	cmp	r3, #0
   28cfc:	f000 8453 	beq.w	295a6 <_vfiprintf_r+0xa7e>
   28d00:	f899 3000 	ldrb.w	r3, [r9]
   28d04:	e784      	b.n	28c10 <_vfiprintf_r+0xe8>
   28d06:	f046 0620 	orr.w	r6, r6, #32
   28d0a:	f899 3000 	ldrb.w	r3, [r9]
   28d0e:	e77f      	b.n	28c10 <_vfiprintf_r+0xe8>
   28d10:	f046 0610 	orr.w	r6, r6, #16
   28d14:	06b7      	lsls	r7, r6, #26
   28d16:	f140 814a 	bpl.w	28fae <_vfiprintf_r+0x486>
   28d1a:	9c06      	ldr	r4, [sp, #24]
   28d1c:	3407      	adds	r4, #7
   28d1e:	f024 0307 	bic.w	r3, r4, #7
   28d22:	4619      	mov	r1, r3
   28d24:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   28d28:	4614      	mov	r4, r2
   28d2a:	461d      	mov	r5, r3
   28d2c:	9106      	str	r1, [sp, #24]
   28d2e:	2a00      	cmp	r2, #0
   28d30:	f173 0300 	sbcs.w	r3, r3, #0
   28d34:	f2c0 83f9 	blt.w	2952a <_vfiprintf_r+0xa02>
   28d38:	9b02      	ldr	r3, [sp, #8]
   28d3a:	3301      	adds	r3, #1
   28d3c:	f000 83b3 	beq.w	294a6 <_vfiprintf_r+0x97e>
   28d40:	ea54 0305 	orrs.w	r3, r4, r5
   28d44:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   28d48:	f040 83ad 	bne.w	294a6 <_vfiprintf_r+0x97e>
   28d4c:	9a02      	ldr	r2, [sp, #8]
   28d4e:	1e13      	subs	r3, r2, #0
   28d50:	bf18      	it	ne
   28d52:	2301      	movne	r3, #1
   28d54:	2a00      	cmp	r2, #0
   28d56:	f040 83a6 	bne.w	294a6 <_vfiprintf_r+0x97e>
   28d5a:	af3c      	add	r7, sp, #240	; 0xf0
   28d5c:	9302      	str	r3, [sp, #8]
   28d5e:	9303      	str	r3, [sp, #12]
   28d60:	e05e      	b.n	28e20 <_vfiprintf_r+0x2f8>
   28d62:	4651      	mov	r1, sl
   28d64:	ee18 0a10 	vmov	r0, s16
   28d68:	f000 fe4a 	bl	29a00 <__swsetup_r>
   28d6c:	2800      	cmp	r0, #0
   28d6e:	f040 856b 	bne.w	29848 <_vfiprintf_r+0xd20>
   28d72:	f8ba 200c 	ldrh.w	r2, [sl, #12]
   28d76:	f002 031a 	and.w	r3, r2, #26
   28d7a:	2b0a      	cmp	r3, #10
   28d7c:	f47f af08 	bne.w	28b90 <_vfiprintf_r+0x68>
   28d80:	f9ba 300e 	ldrsh.w	r3, [sl, #14]
   28d84:	2b00      	cmp	r3, #0
   28d86:	f6ff af03 	blt.w	28b90 <_vfiprintf_r+0x68>
   28d8a:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   28d8e:	07d9      	lsls	r1, r3, #31
   28d90:	d402      	bmi.n	28d98 <_vfiprintf_r+0x270>
   28d92:	0593      	lsls	r3, r2, #22
   28d94:	f140 850c 	bpl.w	297b0 <_vfiprintf_r+0xc88>
   28d98:	4623      	mov	r3, r4
   28d9a:	464a      	mov	r2, r9
   28d9c:	4651      	mov	r1, sl
   28d9e:	ee18 0a10 	vmov	r0, s16
   28da2:	f000 fd6d 	bl	29880 <__sbprintf>
   28da6:	9005      	str	r0, [sp, #20]
   28da8:	9805      	ldr	r0, [sp, #20]
   28daa:	b03d      	add	sp, #244	; 0xf4
   28dac:	ecbd 8b02 	vpop	{d8}
   28db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28db4:	f046 0610 	orr.w	r6, r6, #16
   28db8:	06b5      	lsls	r5, r6, #26
   28dba:	9c06      	ldr	r4, [sp, #24]
   28dbc:	f140 8106 	bpl.w	28fcc <_vfiprintf_r+0x4a4>
   28dc0:	3407      	adds	r4, #7
   28dc2:	f024 0307 	bic.w	r3, r4, #7
   28dc6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   28dca:	9306      	str	r3, [sp, #24]
   28dcc:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   28dd0:	9301      	str	r3, [sp, #4]
   28dd2:	2300      	movs	r3, #0
   28dd4:	f04f 0200 	mov.w	r2, #0
   28dd8:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   28ddc:	9a02      	ldr	r2, [sp, #8]
   28dde:	4611      	mov	r1, r2
   28de0:	3101      	adds	r1, #1
   28de2:	f000 81d5 	beq.w	29190 <_vfiprintf_r+0x668>
   28de6:	9901      	ldr	r1, [sp, #4]
   28de8:	f021 0680 	bic.w	r6, r1, #128	; 0x80
   28dec:	ea54 0105 	orrs.w	r1, r4, r5
   28df0:	f040 81cd 	bne.w	2918e <_vfiprintf_r+0x666>
   28df4:	4611      	mov	r1, r2
   28df6:	3a00      	subs	r2, #0
   28df8:	bf18      	it	ne
   28dfa:	2201      	movne	r2, #1
   28dfc:	2900      	cmp	r1, #0
   28dfe:	f040 81c6 	bne.w	2918e <_vfiprintf_r+0x666>
   28e02:	2b00      	cmp	r3, #0
   28e04:	f040 834b 	bne.w	2949e <_vfiprintf_r+0x976>
   28e08:	9a01      	ldr	r2, [sp, #4]
   28e0a:	f012 0201 	ands.w	r2, r2, #1
   28e0e:	9203      	str	r2, [sp, #12]
   28e10:	f000 8379 	beq.w	29506 <_vfiprintf_r+0x9de>
   28e14:	2230      	movs	r2, #48	; 0x30
   28e16:	f10d 07ef 	add.w	r7, sp, #239	; 0xef
   28e1a:	9302      	str	r3, [sp, #8]
   28e1c:	f88d 20ef 	strb.w	r2, [sp, #239]	; 0xef
   28e20:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   28e24:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   28e28:	428a      	cmp	r2, r1
   28e2a:	bfb8      	it	lt
   28e2c:	460a      	movlt	r2, r1
   28e2e:	9201      	str	r2, [sp, #4]
   28e30:	2b00      	cmp	r3, #0
   28e32:	d033      	beq.n	28e9c <_vfiprintf_r+0x374>
   28e34:	3201      	adds	r2, #1
   28e36:	9201      	str	r2, [sp, #4]
   28e38:	e030      	b.n	28e9c <_vfiprintf_r+0x374>
   28e3a:	2a00      	cmp	r2, #0
   28e3c:	f000 835e 	beq.w	294fc <_vfiprintf_r+0x9d4>
   28e40:	aa10      	add	r2, sp, #64	; 0x40
   28e42:	4651      	mov	r1, sl
   28e44:	4658      	mov	r0, fp
   28e46:	f7ff fe35 	bl	28ab4 <__sprint_r.part.0>
   28e4a:	b940      	cbnz	r0, 28e5e <_vfiprintf_r+0x336>
   28e4c:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28e50:	e6ca      	b.n	28be8 <_vfiprintf_r+0xc0>
   28e52:	9b12      	ldr	r3, [sp, #72]	; 0x48
   28e54:	2b00      	cmp	r3, #0
   28e56:	f040 84d8 	bne.w	2980a <_vfiprintf_r+0xce2>
   28e5a:	2300      	movs	r3, #0
   28e5c:	9311      	str	r3, [sp, #68]	; 0x44
   28e5e:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   28e62:	f013 0f01 	tst.w	r3, #1
   28e66:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   28e6a:	f000 8096 	beq.w	28f9a <_vfiprintf_r+0x472>
   28e6e:	065b      	lsls	r3, r3, #25
   28e70:	f100 84d6 	bmi.w	29820 <_vfiprintf_r+0xcf8>
   28e74:	9805      	ldr	r0, [sp, #20]
   28e76:	b03d      	add	sp, #244	; 0xf4
   28e78:	ecbd 8b02 	vpop	{d8}
   28e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28e80:	2b00      	cmp	r3, #0
   28e82:	d0e6      	beq.n	28e52 <_vfiprintf_r+0x32a>
   28e84:	2201      	movs	r2, #1
   28e86:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   28e8a:	af23      	add	r7, sp, #140	; 0x8c
   28e8c:	f04f 0300 	mov.w	r3, #0
   28e90:	9201      	str	r2, [sp, #4]
   28e92:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   28e96:	9203      	str	r2, [sp, #12]
   28e98:	2300      	movs	r3, #0
   28e9a:	9302      	str	r3, [sp, #8]
   28e9c:	f016 0302 	ands.w	r3, r6, #2
   28ea0:	9307      	str	r3, [sp, #28]
   28ea2:	d002      	beq.n	28eaa <_vfiprintf_r+0x382>
   28ea4:	9b01      	ldr	r3, [sp, #4]
   28ea6:	3302      	adds	r3, #2
   28ea8:	9301      	str	r3, [sp, #4]
   28eaa:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   28eae:	9308      	str	r3, [sp, #32]
   28eb0:	d105      	bne.n	28ebe <_vfiprintf_r+0x396>
   28eb2:	9b04      	ldr	r3, [sp, #16]
   28eb4:	9a01      	ldr	r2, [sp, #4]
   28eb6:	1a9c      	subs	r4, r3, r2
   28eb8:	2c00      	cmp	r4, #0
   28eba:	f300 8259 	bgt.w	29370 <_vfiprintf_r+0x848>
   28ebe:	e9dd 2c11 	ldrd	r2, ip, [sp, #68]	; 0x44
   28ec2:	1c51      	adds	r1, r2, #1
   28ec4:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   28ec8:	b178      	cbz	r0, 28eea <_vfiprintf_r+0x3c2>
   28eca:	f10c 0c01 	add.w	ip, ip, #1
   28ece:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   28ed2:	2201      	movs	r2, #1
   28ed4:	2907      	cmp	r1, #7
   28ed6:	e9cd 1c11 	strd	r1, ip, [sp, #68]	; 0x44
   28eda:	e9c8 0200 	strd	r0, r2, [r8]
   28ede:	f300 8227 	bgt.w	29330 <_vfiprintf_r+0x808>
   28ee2:	460a      	mov	r2, r1
   28ee4:	f108 0808 	add.w	r8, r8, #8
   28ee8:	3101      	adds	r1, #1
   28eea:	9b07      	ldr	r3, [sp, #28]
   28eec:	b1db      	cbz	r3, 28f26 <_vfiprintf_r+0x3fe>
   28eee:	f10c 0c02 	add.w	ip, ip, #2
   28ef2:	aa0f      	add	r2, sp, #60	; 0x3c
   28ef4:	2302      	movs	r3, #2
   28ef6:	2907      	cmp	r1, #7
   28ef8:	e9cd 1c11 	strd	r1, ip, [sp, #68]	; 0x44
   28efc:	e9c8 2300 	strd	r2, r3, [r8]
   28f00:	f340 8231 	ble.w	29366 <_vfiprintf_r+0x83e>
   28f04:	f1bc 0f00 	cmp.w	ip, #0
   28f08:	f000 82e0 	beq.w	294cc <_vfiprintf_r+0x9a4>
   28f0c:	aa10      	add	r2, sp, #64	; 0x40
   28f0e:	4651      	mov	r1, sl
   28f10:	4658      	mov	r0, fp
   28f12:	f7ff fdcf 	bl	28ab4 <__sprint_r.part.0>
   28f16:	2800      	cmp	r0, #0
   28f18:	d1a1      	bne.n	28e5e <_vfiprintf_r+0x336>
   28f1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   28f1c:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28f20:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   28f24:	1c51      	adds	r1, r2, #1
   28f26:	9b08      	ldr	r3, [sp, #32]
   28f28:	2b80      	cmp	r3, #128	; 0x80
   28f2a:	f000 8169 	beq.w	29200 <_vfiprintf_r+0x6d8>
   28f2e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   28f32:	1a1c      	subs	r4, r3, r0
   28f34:	2c00      	cmp	r4, #0
   28f36:	f300 81b8 	bgt.w	292aa <_vfiprintf_r+0x782>
   28f3a:	9a03      	ldr	r2, [sp, #12]
   28f3c:	2907      	cmp	r1, #7
   28f3e:	4613      	mov	r3, r2
   28f40:	4463      	add	r3, ip
   28f42:	e9c8 7200 	strd	r7, r2, [r8]
   28f46:	e9cd 1311 	strd	r1, r3, [sp, #68]	; 0x44
   28f4a:	f340 811d 	ble.w	29188 <_vfiprintf_r+0x660>
   28f4e:	2b00      	cmp	r3, #0
   28f50:	f000 824a 	beq.w	293e8 <_vfiprintf_r+0x8c0>
   28f54:	aa10      	add	r2, sp, #64	; 0x40
   28f56:	4651      	mov	r1, sl
   28f58:	4658      	mov	r0, fp
   28f5a:	f7ff fdab 	bl	28ab4 <__sprint_r.part.0>
   28f5e:	2800      	cmp	r0, #0
   28f60:	f47f af7d 	bne.w	28e5e <_vfiprintf_r+0x336>
   28f64:	9b12      	ldr	r3, [sp, #72]	; 0x48
   28f66:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28f6a:	0771      	lsls	r1, r6, #29
   28f6c:	d505      	bpl.n	28f7a <_vfiprintf_r+0x452>
   28f6e:	9a04      	ldr	r2, [sp, #16]
   28f70:	9901      	ldr	r1, [sp, #4]
   28f72:	1a54      	subs	r4, r2, r1
   28f74:	2c00      	cmp	r4, #0
   28f76:	f300 8241 	bgt.w	293fc <_vfiprintf_r+0x8d4>
   28f7a:	9801      	ldr	r0, [sp, #4]
   28f7c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   28f80:	4281      	cmp	r1, r0
   28f82:	bfac      	ite	ge
   28f84:	1852      	addge	r2, r2, r1
   28f86:	1812      	addlt	r2, r2, r0
   28f88:	9205      	str	r2, [sp, #20]
   28f8a:	2b00      	cmp	r3, #0
   28f8c:	f040 81c7 	bne.w	2931e <_vfiprintf_r+0x7f6>
   28f90:	2300      	movs	r3, #0
   28f92:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   28f96:	9311      	str	r3, [sp, #68]	; 0x44
   28f98:	e608      	b.n	28bac <_vfiprintf_r+0x84>
   28f9a:	059a      	lsls	r2, r3, #22
   28f9c:	f53f af67 	bmi.w	28e6e <_vfiprintf_r+0x346>
   28fa0:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   28fa4:	f001 ff00 	bl	2ada8 <__retarget_lock_release_recursive>
   28fa8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   28fac:	e75f      	b.n	28e6e <_vfiprintf_r+0x346>
   28fae:	9b06      	ldr	r3, [sp, #24]
   28fb0:	06f5      	lsls	r5, r6, #27
   28fb2:	f853 4b04 	ldr.w	r4, [r3], #4
   28fb6:	f100 82ea 	bmi.w	2958e <_vfiprintf_r+0xa66>
   28fba:	0670      	lsls	r0, r6, #25
   28fbc:	f140 82e4 	bpl.w	29588 <_vfiprintf_r+0xa60>
   28fc0:	b224      	sxth	r4, r4
   28fc2:	9306      	str	r3, [sp, #24]
   28fc4:	17e5      	asrs	r5, r4, #31
   28fc6:	4622      	mov	r2, r4
   28fc8:	462b      	mov	r3, r5
   28fca:	e6b0      	b.n	28d2e <_vfiprintf_r+0x206>
   28fcc:	f854 3b04 	ldr.w	r3, [r4], #4
   28fd0:	06f0      	lsls	r0, r6, #27
   28fd2:	9406      	str	r4, [sp, #24]
   28fd4:	f100 82e4 	bmi.w	295a0 <_vfiprintf_r+0xa78>
   28fd8:	0671      	lsls	r1, r6, #25
   28fda:	f140 82de 	bpl.w	2959a <_vfiprintf_r+0xa72>
   28fde:	b29c      	uxth	r4, r3
   28fe0:	2500      	movs	r5, #0
   28fe2:	e6f3      	b.n	28dcc <_vfiprintf_r+0x2a4>
   28fe4:	9c06      	ldr	r4, [sp, #24]
   28fe6:	f04f 0300 	mov.w	r3, #0
   28fea:	f854 7b04 	ldr.w	r7, [r4], #4
   28fee:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   28ff2:	2f00      	cmp	r7, #0
   28ff4:	f000 839d 	beq.w	29732 <_vfiprintf_r+0xc0a>
   28ff8:	9a02      	ldr	r2, [sp, #8]
   28ffa:	4613      	mov	r3, r2
   28ffc:	3301      	adds	r3, #1
   28ffe:	f000 8318 	beq.w	29632 <_vfiprintf_r+0xb0a>
   29002:	2100      	movs	r1, #0
   29004:	4638      	mov	r0, r7
   29006:	f7fd f98b 	bl	26320 <memchr>
   2900a:	2800      	cmp	r0, #0
   2900c:	f000 83ea 	beq.w	297e4 <_vfiprintf_r+0xcbc>
   29010:	1bc3      	subs	r3, r0, r7
   29012:	9406      	str	r4, [sp, #24]
   29014:	9303      	str	r3, [sp, #12]
   29016:	2300      	movs	r3, #0
   29018:	9302      	str	r3, [sp, #8]
   2901a:	e701      	b.n	28e20 <_vfiprintf_r+0x2f8>
   2901c:	9c06      	ldr	r4, [sp, #24]
   2901e:	f04f 0300 	mov.w	r3, #0
   29022:	2201      	movs	r2, #1
   29024:	af23      	add	r7, sp, #140	; 0x8c
   29026:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   2902a:	f854 3b04 	ldr.w	r3, [r4], #4
   2902e:	9201      	str	r2, [sp, #4]
   29030:	9203      	str	r2, [sp, #12]
   29032:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   29036:	9406      	str	r4, [sp, #24]
   29038:	e72e      	b.n	28e98 <_vfiprintf_r+0x370>
   2903a:	f000 fefd 	bl	29e38 <__sinit>
   2903e:	e583      	b.n	28b48 <_vfiprintf_r+0x20>
   29040:	9b06      	ldr	r3, [sp, #24]
   29042:	f853 2b04 	ldr.w	r2, [r3], #4
   29046:	2a00      	cmp	r2, #0
   29048:	9204      	str	r2, [sp, #16]
   2904a:	f280 828a 	bge.w	29562 <_vfiprintf_r+0xa3a>
   2904e:	9a04      	ldr	r2, [sp, #16]
   29050:	9306      	str	r3, [sp, #24]
   29052:	4252      	negs	r2, r2
   29054:	9204      	str	r2, [sp, #16]
   29056:	f046 0604 	orr.w	r6, r6, #4
   2905a:	f899 3000 	ldrb.w	r3, [r9]
   2905e:	e5d7      	b.n	28c10 <_vfiprintf_r+0xe8>
   29060:	f899 3000 	ldrb.w	r3, [r9]
   29064:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
   29068:	e5d2      	b.n	28c10 <_vfiprintf_r+0xe8>
   2906a:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   2906e:	f899 3000 	ldrb.w	r3, [r9]
   29072:	e5cd      	b.n	28c10 <_vfiprintf_r+0xe8>
   29074:	4649      	mov	r1, r9
   29076:	f811 3b01 	ldrb.w	r3, [r1], #1
   2907a:	2b2a      	cmp	r3, #42	; 0x2a
   2907c:	f000 83d8 	beq.w	29830 <_vfiprintf_r+0xd08>
   29080:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   29084:	4689      	mov	r9, r1
   29086:	2a09      	cmp	r2, #9
   29088:	f200 83b7 	bhi.w	297fa <_vfiprintf_r+0xcd2>
   2908c:	2100      	movs	r1, #0
   2908e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   29092:	f819 3b01 	ldrb.w	r3, [r9], #1
   29096:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   2909a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   2909e:	2a09      	cmp	r2, #9
   290a0:	d9f5      	bls.n	2908e <_vfiprintf_r+0x566>
   290a2:	9102      	str	r1, [sp, #8]
   290a4:	e5b6      	b.n	28c14 <_vfiprintf_r+0xec>
   290a6:	4658      	mov	r0, fp
   290a8:	f001 fe74 	bl	2ad94 <_localeconv_r>
   290ac:	6843      	ldr	r3, [r0, #4]
   290ae:	4618      	mov	r0, r3
   290b0:	930b      	str	r3, [sp, #44]	; 0x2c
   290b2:	f7fd fdb1 	bl	26c18 <strlen>
   290b6:	4603      	mov	r3, r0
   290b8:	4658      	mov	r0, fp
   290ba:	461c      	mov	r4, r3
   290bc:	930c      	str	r3, [sp, #48]	; 0x30
   290be:	f001 fe69 	bl	2ad94 <_localeconv_r>
   290c2:	6882      	ldr	r2, [r0, #8]
   290c4:	920a      	str	r2, [sp, #40]	; 0x28
   290c6:	2c00      	cmp	r4, #0
   290c8:	f43f ae1a 	beq.w	28d00 <_vfiprintf_r+0x1d8>
   290cc:	2a00      	cmp	r2, #0
   290ce:	f43f ae17 	beq.w	28d00 <_vfiprintf_r+0x1d8>
   290d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   290d4:	781b      	ldrb	r3, [r3, #0]
   290d6:	2b00      	cmp	r3, #0
   290d8:	f43f ae12 	beq.w	28d00 <_vfiprintf_r+0x1d8>
   290dc:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   290e0:	f899 3000 	ldrb.w	r3, [r9]
   290e4:	e594      	b.n	28c10 <_vfiprintf_r+0xe8>
   290e6:	f046 0601 	orr.w	r6, r6, #1
   290ea:	f899 3000 	ldrb.w	r3, [r9]
   290ee:	e58f      	b.n	28c10 <_vfiprintf_r+0xe8>
   290f0:	f899 3000 	ldrb.w	r3, [r9]
   290f4:	2b6c      	cmp	r3, #108	; 0x6c
   290f6:	f000 830c 	beq.w	29712 <_vfiprintf_r+0xbea>
   290fa:	f046 0610 	orr.w	r6, r6, #16
   290fe:	e587      	b.n	28c10 <_vfiprintf_r+0xe8>
   29100:	f899 3000 	ldrb.w	r3, [r9]
   29104:	2b68      	cmp	r3, #104	; 0x68
   29106:	f000 82fc 	beq.w	29702 <_vfiprintf_r+0xbda>
   2910a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   2910e:	e57f      	b.n	28c10 <_vfiprintf_r+0xe8>
   29110:	f046 0310 	orr.w	r3, r6, #16
   29114:	9301      	str	r3, [sp, #4]
   29116:	9b01      	ldr	r3, [sp, #4]
   29118:	069b      	lsls	r3, r3, #26
   2911a:	f140 81f7 	bpl.w	2950c <_vfiprintf_r+0x9e4>
   2911e:	9c06      	ldr	r4, [sp, #24]
   29120:	2301      	movs	r3, #1
   29122:	3407      	adds	r4, #7
   29124:	f024 0207 	bic.w	r2, r4, #7
   29128:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   2912c:	9206      	str	r2, [sp, #24]
   2912e:	e651      	b.n	28dd4 <_vfiprintf_r+0x2ac>
   29130:	9c06      	ldr	r4, [sp, #24]
   29132:	f046 0302 	orr.w	r3, r6, #2
   29136:	f647 0130 	movw	r1, #30768	; 0x7830
   2913a:	2500      	movs	r5, #0
   2913c:	f854 2b04 	ldr.w	r2, [r4], #4
   29140:	9301      	str	r3, [sp, #4]
   29142:	4bb2      	ldr	r3, [pc, #712]	; (2940c <_vfiprintf_r+0x8e4>)
   29144:	9406      	str	r4, [sp, #24]
   29146:	4614      	mov	r4, r2
   29148:	9309      	str	r3, [sp, #36]	; 0x24
   2914a:	2302      	movs	r3, #2
   2914c:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
   29150:	e640      	b.n	28dd4 <_vfiprintf_r+0x2ac>
   29152:	06b2      	lsls	r2, r6, #26
   29154:	f100 822e 	bmi.w	295b4 <_vfiprintf_r+0xa8c>
   29158:	06f3      	lsls	r3, r6, #27
   2915a:	f100 82e2 	bmi.w	29722 <_vfiprintf_r+0xbfa>
   2915e:	0677      	lsls	r7, r6, #25
   29160:	f100 8310 	bmi.w	29784 <_vfiprintf_r+0xc5c>
   29164:	05b6      	lsls	r6, r6, #22
   29166:	f140 82dc 	bpl.w	29722 <_vfiprintf_r+0xbfa>
   2916a:	9c06      	ldr	r4, [sp, #24]
   2916c:	9a05      	ldr	r2, [sp, #20]
   2916e:	f854 3b04 	ldr.w	r3, [r4], #4
   29172:	701a      	strb	r2, [r3, #0]
   29174:	9406      	str	r4, [sp, #24]
   29176:	e519      	b.n	28bac <_vfiprintf_r+0x84>
   29178:	9b03      	ldr	r3, [sp, #12]
   2917a:	2201      	movs	r2, #1
   2917c:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29180:	9713      	str	r7, [sp, #76]	; 0x4c
   29182:	9314      	str	r3, [sp, #80]	; 0x50
   29184:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
   29188:	f108 0808 	add.w	r8, r8, #8
   2918c:	e6ed      	b.n	28f6a <_vfiprintf_r+0x442>
   2918e:	9601      	str	r6, [sp, #4]
   29190:	2b01      	cmp	r3, #1
   29192:	f000 8189 	beq.w	294a8 <_vfiprintf_r+0x980>
   29196:	2b02      	cmp	r3, #2
   29198:	af3c      	add	r7, sp, #240	; 0xf0
   2919a:	d113      	bne.n	291c4 <_vfiprintf_r+0x69c>
   2919c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2919e:	0923      	lsrs	r3, r4, #4
   291a0:	f004 010f 	and.w	r1, r4, #15
   291a4:	092a      	lsrs	r2, r5, #4
   291a6:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   291aa:	4615      	mov	r5, r2
   291ac:	461c      	mov	r4, r3
   291ae:	5c43      	ldrb	r3, [r0, r1]
   291b0:	f807 3d01 	strb.w	r3, [r7, #-1]!
   291b4:	ea54 0305 	orrs.w	r3, r4, r5
   291b8:	d1f1      	bne.n	2919e <_vfiprintf_r+0x676>
   291ba:	ab3c      	add	r3, sp, #240	; 0xf0
   291bc:	9e01      	ldr	r6, [sp, #4]
   291be:	1bdb      	subs	r3, r3, r7
   291c0:	9303      	str	r3, [sp, #12]
   291c2:	e62d      	b.n	28e20 <_vfiprintf_r+0x2f8>
   291c4:	08e2      	lsrs	r2, r4, #3
   291c6:	f004 0307 	and.w	r3, r4, #7
   291ca:	08e9      	lsrs	r1, r5, #3
   291cc:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   291d0:	3330      	adds	r3, #48	; 0x30
   291d2:	460d      	mov	r5, r1
   291d4:	4614      	mov	r4, r2
   291d6:	463a      	mov	r2, r7
   291d8:	f807 3d01 	strb.w	r3, [r7, #-1]!
   291dc:	ea54 0105 	orrs.w	r1, r4, r5
   291e0:	d1f0      	bne.n	291c4 <_vfiprintf_r+0x69c>
   291e2:	2b30      	cmp	r3, #48	; 0x30
   291e4:	d0e9      	beq.n	291ba <_vfiprintf_r+0x692>
   291e6:	9b01      	ldr	r3, [sp, #4]
   291e8:	07dc      	lsls	r4, r3, #31
   291ea:	d5e6      	bpl.n	291ba <_vfiprintf_r+0x692>
   291ec:	2330      	movs	r3, #48	; 0x30
   291ee:	3a02      	subs	r2, #2
   291f0:	9e01      	ldr	r6, [sp, #4]
   291f2:	f807 3c01 	strb.w	r3, [r7, #-1]
   291f6:	ab3c      	add	r3, sp, #240	; 0xf0
   291f8:	4617      	mov	r7, r2
   291fa:	1a9b      	subs	r3, r3, r2
   291fc:	9303      	str	r3, [sp, #12]
   291fe:	e60f      	b.n	28e20 <_vfiprintf_r+0x2f8>
   29200:	9b04      	ldr	r3, [sp, #16]
   29202:	9801      	ldr	r0, [sp, #4]
   29204:	1a1c      	subs	r4, r3, r0
   29206:	2c00      	cmp	r4, #0
   29208:	f77f ae91 	ble.w	28f2e <_vfiprintf_r+0x406>
   2920c:	2c10      	cmp	r4, #16
   2920e:	f340 830c 	ble.w	2982a <_vfiprintf_r+0xd02>
   29212:	9607      	str	r6, [sp, #28]
   29214:	4666      	mov	r6, ip
   29216:	4d7e      	ldr	r5, [pc, #504]	; (29410 <_vfiprintf_r+0x8e8>)
   29218:	e00a      	b.n	29230 <_vfiprintf_r+0x708>
   2921a:	f7ff fc4b 	bl	28ab4 <__sprint_r.part.0>
   2921e:	2800      	cmp	r0, #0
   29220:	f47f ae1d 	bne.w	28e5e <_vfiprintf_r+0x336>
   29224:	e9dd 2611 	ldrd	r2, r6, [sp, #68]	; 0x44
   29228:	1c50      	adds	r0, r2, #1
   2922a:	3c10      	subs	r4, #16
   2922c:	2c10      	cmp	r4, #16
   2922e:	dd1a      	ble.n	29266 <_vfiprintf_r+0x73e>
   29230:	1c53      	adds	r3, r2, #1
   29232:	3610      	adds	r6, #16
   29234:	2110      	movs	r1, #16
   29236:	1c90      	adds	r0, r2, #2
   29238:	2b07      	cmp	r3, #7
   2923a:	f8c8 5000 	str.w	r5, [r8]
   2923e:	f8c8 1004 	str.w	r1, [r8, #4]
   29242:	461a      	mov	r2, r3
   29244:	f108 0808 	add.w	r8, r8, #8
   29248:	9612      	str	r6, [sp, #72]	; 0x48
   2924a:	9311      	str	r3, [sp, #68]	; 0x44
   2924c:	dded      	ble.n	2922a <_vfiprintf_r+0x702>
   2924e:	aa10      	add	r2, sp, #64	; 0x40
   29250:	4651      	mov	r1, sl
   29252:	4658      	mov	r0, fp
   29254:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29258:	2e00      	cmp	r6, #0
   2925a:	d1de      	bne.n	2921a <_vfiprintf_r+0x6f2>
   2925c:	3c10      	subs	r4, #16
   2925e:	2001      	movs	r0, #1
   29260:	4632      	mov	r2, r6
   29262:	2c10      	cmp	r4, #16
   29264:	dce4      	bgt.n	29230 <_vfiprintf_r+0x708>
   29266:	46b4      	mov	ip, r6
   29268:	9e07      	ldr	r6, [sp, #28]
   2926a:	44a4      	add	ip, r4
   2926c:	2807      	cmp	r0, #7
   2926e:	e9c8 5400 	strd	r5, r4, [r8]
   29272:	e9cd 0c11 	strd	r0, ip, [sp, #68]	; 0x44
   29276:	f340 8182 	ble.w	2957e <_vfiprintf_r+0xa56>
   2927a:	f1bc 0f00 	cmp.w	ip, #0
   2927e:	f000 8271 	beq.w	29764 <_vfiprintf_r+0xc3c>
   29282:	aa10      	add	r2, sp, #64	; 0x40
   29284:	4651      	mov	r1, sl
   29286:	4658      	mov	r0, fp
   29288:	f7ff fc14 	bl	28ab4 <__sprint_r.part.0>
   2928c:	2800      	cmp	r0, #0
   2928e:	f47f ade6 	bne.w	28e5e <_vfiprintf_r+0x336>
   29292:	9a11      	ldr	r2, [sp, #68]	; 0x44
   29294:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29298:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   2929c:	1c51      	adds	r1, r2, #1
   2929e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   292a2:	1a1c      	subs	r4, r3, r0
   292a4:	2c00      	cmp	r4, #0
   292a6:	f77f ae48 	ble.w	28f3a <_vfiprintf_r+0x412>
   292aa:	2c10      	cmp	r4, #16
   292ac:	4d58      	ldr	r5, [pc, #352]	; (29410 <_vfiprintf_r+0x8e8>)
   292ae:	dd2a      	ble.n	29306 <_vfiprintf_r+0x7de>
   292b0:	9602      	str	r6, [sp, #8]
   292b2:	4666      	mov	r6, ip
   292b4:	e00a      	b.n	292cc <_vfiprintf_r+0x7a4>
   292b6:	f7ff fbfd 	bl	28ab4 <__sprint_r.part.0>
   292ba:	2800      	cmp	r0, #0
   292bc:	f47f adcf 	bne.w	28e5e <_vfiprintf_r+0x336>
   292c0:	e9dd 2611 	ldrd	r2, r6, [sp, #68]	; 0x44
   292c4:	1c51      	adds	r1, r2, #1
   292c6:	3c10      	subs	r4, #16
   292c8:	2c10      	cmp	r4, #16
   292ca:	dd1a      	ble.n	29302 <_vfiprintf_r+0x7da>
   292cc:	1c53      	adds	r3, r2, #1
   292ce:	3610      	adds	r6, #16
   292d0:	2010      	movs	r0, #16
   292d2:	1c91      	adds	r1, r2, #2
   292d4:	2b07      	cmp	r3, #7
   292d6:	f8c8 5000 	str.w	r5, [r8]
   292da:	f8c8 0004 	str.w	r0, [r8, #4]
   292de:	461a      	mov	r2, r3
   292e0:	f108 0808 	add.w	r8, r8, #8
   292e4:	9612      	str	r6, [sp, #72]	; 0x48
   292e6:	9311      	str	r3, [sp, #68]	; 0x44
   292e8:	dded      	ble.n	292c6 <_vfiprintf_r+0x79e>
   292ea:	aa10      	add	r2, sp, #64	; 0x40
   292ec:	4651      	mov	r1, sl
   292ee:	4658      	mov	r0, fp
   292f0:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   292f4:	2e00      	cmp	r6, #0
   292f6:	d1de      	bne.n	292b6 <_vfiprintf_r+0x78e>
   292f8:	3c10      	subs	r4, #16
   292fa:	2101      	movs	r1, #1
   292fc:	4632      	mov	r2, r6
   292fe:	2c10      	cmp	r4, #16
   29300:	dce4      	bgt.n	292cc <_vfiprintf_r+0x7a4>
   29302:	46b4      	mov	ip, r6
   29304:	9e02      	ldr	r6, [sp, #8]
   29306:	44a4      	add	ip, r4
   29308:	2907      	cmp	r1, #7
   2930a:	e9c8 5400 	strd	r5, r4, [r8]
   2930e:	e9cd 1c11 	strd	r1, ip, [sp, #68]	; 0x44
   29312:	f300 80e0 	bgt.w	294d6 <_vfiprintf_r+0x9ae>
   29316:	f108 0808 	add.w	r8, r8, #8
   2931a:	3101      	adds	r1, #1
   2931c:	e60d      	b.n	28f3a <_vfiprintf_r+0x412>
   2931e:	aa10      	add	r2, sp, #64	; 0x40
   29320:	4651      	mov	r1, sl
   29322:	4658      	mov	r0, fp
   29324:	f7ff fbc6 	bl	28ab4 <__sprint_r.part.0>
   29328:	2800      	cmp	r0, #0
   2932a:	f43f ae31 	beq.w	28f90 <_vfiprintf_r+0x468>
   2932e:	e596      	b.n	28e5e <_vfiprintf_r+0x336>
   29330:	f1bc 0f00 	cmp.w	ip, #0
   29334:	f000 80c6 	beq.w	294c4 <_vfiprintf_r+0x99c>
   29338:	aa10      	add	r2, sp, #64	; 0x40
   2933a:	4651      	mov	r1, sl
   2933c:	4658      	mov	r0, fp
   2933e:	f7ff fbb9 	bl	28ab4 <__sprint_r.part.0>
   29342:	2800      	cmp	r0, #0
   29344:	f47f ad8b 	bne.w	28e5e <_vfiprintf_r+0x336>
   29348:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2934a:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   2934e:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   29352:	1c51      	adds	r1, r2, #1
   29354:	e5c9      	b.n	28eea <_vfiprintf_r+0x3c2>
   29356:	2302      	movs	r3, #2
   29358:	aa0f      	add	r2, sp, #60	; 0x3c
   2935a:	2101      	movs	r1, #1
   2935c:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29360:	469c      	mov	ip, r3
   29362:	9213      	str	r2, [sp, #76]	; 0x4c
   29364:	9314      	str	r3, [sp, #80]	; 0x50
   29366:	460a      	mov	r2, r1
   29368:	f108 0808 	add.w	r8, r8, #8
   2936c:	1c51      	adds	r1, r2, #1
   2936e:	e5da      	b.n	28f26 <_vfiprintf_r+0x3fe>
   29370:	2c10      	cmp	r4, #16
   29372:	f340 823d 	ble.w	297f0 <_vfiprintf_r+0xcc8>
   29376:	4d27      	ldr	r5, [pc, #156]	; (29414 <_vfiprintf_r+0x8ec>)
   29378:	960d      	str	r6, [sp, #52]	; 0x34
   2937a:	e9dd 0311 	ldrd	r0, r3, [sp, #68]	; 0x44
   2937e:	e00a      	b.n	29396 <_vfiprintf_r+0x86e>
   29380:	f7ff fb98 	bl	28ab4 <__sprint_r.part.0>
   29384:	2800      	cmp	r0, #0
   29386:	f47f ad6a 	bne.w	28e5e <_vfiprintf_r+0x336>
   2938a:	e9dd 0311 	ldrd	r0, r3, [sp, #68]	; 0x44
   2938e:	1c42      	adds	r2, r0, #1
   29390:	3c10      	subs	r4, #16
   29392:	2c10      	cmp	r4, #16
   29394:	dd1a      	ble.n	293cc <_vfiprintf_r+0x8a4>
   29396:	1c41      	adds	r1, r0, #1
   29398:	3310      	adds	r3, #16
   2939a:	2610      	movs	r6, #16
   2939c:	1c82      	adds	r2, r0, #2
   2939e:	2907      	cmp	r1, #7
   293a0:	f8c8 5000 	str.w	r5, [r8]
   293a4:	f8c8 6004 	str.w	r6, [r8, #4]
   293a8:	4608      	mov	r0, r1
   293aa:	f108 0808 	add.w	r8, r8, #8
   293ae:	9312      	str	r3, [sp, #72]	; 0x48
   293b0:	9111      	str	r1, [sp, #68]	; 0x44
   293b2:	dded      	ble.n	29390 <_vfiprintf_r+0x868>
   293b4:	aa10      	add	r2, sp, #64	; 0x40
   293b6:	4651      	mov	r1, sl
   293b8:	4658      	mov	r0, fp
   293ba:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   293be:	2b00      	cmp	r3, #0
   293c0:	d1de      	bne.n	29380 <_vfiprintf_r+0x858>
   293c2:	3c10      	subs	r4, #16
   293c4:	4618      	mov	r0, r3
   293c6:	2201      	movs	r2, #1
   293c8:	2c10      	cmp	r4, #16
   293ca:	dce4      	bgt.n	29396 <_vfiprintf_r+0x86e>
   293cc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   293ce:	eb04 0c03 	add.w	ip, r4, r3
   293d2:	2a07      	cmp	r2, #7
   293d4:	e9c8 5400 	strd	r5, r4, [r8]
   293d8:	e9cd 2c11 	strd	r2, ip, [sp, #68]	; 0x44
   293dc:	f300 80af 	bgt.w	2953e <_vfiprintf_r+0xa16>
   293e0:	f108 0808 	add.w	r8, r8, #8
   293e4:	1c51      	adds	r1, r2, #1
   293e6:	e56d      	b.n	28ec4 <_vfiprintf_r+0x39c>
   293e8:	0770      	lsls	r0, r6, #29
   293ea:	9311      	str	r3, [sp, #68]	; 0x44
   293ec:	d54e      	bpl.n	2948c <_vfiprintf_r+0x964>
   293ee:	9a04      	ldr	r2, [sp, #16]
   293f0:	9901      	ldr	r1, [sp, #4]
   293f2:	1a54      	subs	r4, r2, r1
   293f4:	2c00      	cmp	r4, #0
   293f6:	dd49      	ble.n	2948c <_vfiprintf_r+0x964>
   293f8:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   293fc:	2c10      	cmp	r4, #16
   293fe:	f340 8200 	ble.w	29802 <_vfiprintf_r+0xcda>
   29402:	9911      	ldr	r1, [sp, #68]	; 0x44
   29404:	2610      	movs	r6, #16
   29406:	4d03      	ldr	r5, [pc, #12]	; (29414 <_vfiprintf_r+0x8ec>)
   29408:	e013      	b.n	29432 <_vfiprintf_r+0x90a>
   2940a:	bf00      	nop
   2940c:	0002faac 	.word	0x0002faac
   29410:	0002fb3c 	.word	0x0002fb3c
   29414:	0002fb2c 	.word	0x0002fb2c
   29418:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   2941c:	f7ff fb4a 	bl	28ab4 <__sprint_r.part.0>
   29420:	2800      	cmp	r0, #0
   29422:	f47f ad1c 	bne.w	28e5e <_vfiprintf_r+0x336>
   29426:	e9dd 1311 	ldrd	r1, r3, [sp, #68]	; 0x44
   2942a:	1c48      	adds	r0, r1, #1
   2942c:	3c10      	subs	r4, #16
   2942e:	2c10      	cmp	r4, #16
   29430:	dd19      	ble.n	29466 <_vfiprintf_r+0x93e>
   29432:	1c4a      	adds	r2, r1, #1
   29434:	3310      	adds	r3, #16
   29436:	1c88      	adds	r0, r1, #2
   29438:	f8c8 5000 	str.w	r5, [r8]
   2943c:	2a07      	cmp	r2, #7
   2943e:	f8c8 6004 	str.w	r6, [r8, #4]
   29442:	4611      	mov	r1, r2
   29444:	f108 0808 	add.w	r8, r8, #8
   29448:	9312      	str	r3, [sp, #72]	; 0x48
   2944a:	9211      	str	r2, [sp, #68]	; 0x44
   2944c:	ddee      	ble.n	2942c <_vfiprintf_r+0x904>
   2944e:	aa10      	add	r2, sp, #64	; 0x40
   29450:	4651      	mov	r1, sl
   29452:	4658      	mov	r0, fp
   29454:	2b00      	cmp	r3, #0
   29456:	d1df      	bne.n	29418 <_vfiprintf_r+0x8f0>
   29458:	3c10      	subs	r4, #16
   2945a:	2001      	movs	r0, #1
   2945c:	4619      	mov	r1, r3
   2945e:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29462:	2c10      	cmp	r4, #16
   29464:	dce5      	bgt.n	29432 <_vfiprintf_r+0x90a>
   29466:	4423      	add	r3, r4
   29468:	2807      	cmp	r0, #7
   2946a:	e9c8 5400 	strd	r5, r4, [r8]
   2946e:	e9cd 0311 	strd	r0, r3, [sp, #68]	; 0x44
   29472:	f77f ad82 	ble.w	28f7a <_vfiprintf_r+0x452>
   29476:	b14b      	cbz	r3, 2948c <_vfiprintf_r+0x964>
   29478:	aa10      	add	r2, sp, #64	; 0x40
   2947a:	4651      	mov	r1, sl
   2947c:	4658      	mov	r0, fp
   2947e:	f7ff fb19 	bl	28ab4 <__sprint_r.part.0>
   29482:	2800      	cmp	r0, #0
   29484:	f47f aceb 	bne.w	28e5e <_vfiprintf_r+0x336>
   29488:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2948a:	e576      	b.n	28f7a <_vfiprintf_r+0x452>
   2948c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   29490:	9901      	ldr	r1, [sp, #4]
   29492:	428a      	cmp	r2, r1
   29494:	bfac      	ite	ge
   29496:	189b      	addge	r3, r3, r2
   29498:	185b      	addlt	r3, r3, r1
   2949a:	9305      	str	r3, [sp, #20]
   2949c:	e578      	b.n	28f90 <_vfiprintf_r+0x468>
   2949e:	af3c      	add	r7, sp, #240	; 0xf0
   294a0:	9202      	str	r2, [sp, #8]
   294a2:	9203      	str	r2, [sp, #12]
   294a4:	e4bc      	b.n	28e20 <_vfiprintf_r+0x2f8>
   294a6:	9601      	str	r6, [sp, #4]
   294a8:	2d00      	cmp	r5, #0
   294aa:	bf08      	it	eq
   294ac:	2c0a      	cmpeq	r4, #10
   294ae:	f080 80e8 	bcs.w	29682 <_vfiprintf_r+0xb5a>
   294b2:	3430      	adds	r4, #48	; 0x30
   294b4:	2301      	movs	r3, #1
   294b6:	9e01      	ldr	r6, [sp, #4]
   294b8:	f10d 07ef 	add.w	r7, sp, #239	; 0xef
   294bc:	9303      	str	r3, [sp, #12]
   294be:	f88d 40ef 	strb.w	r4, [sp, #239]	; 0xef
   294c2:	e4ad      	b.n	28e20 <_vfiprintf_r+0x2f8>
   294c4:	9b07      	ldr	r3, [sp, #28]
   294c6:	2b00      	cmp	r3, #0
   294c8:	f040 8089 	bne.w	295de <_vfiprintf_r+0xab6>
   294cc:	2101      	movs	r1, #1
   294ce:	4662      	mov	r2, ip
   294d0:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   294d4:	e527      	b.n	28f26 <_vfiprintf_r+0x3fe>
   294d6:	f1bc 0f00 	cmp.w	ip, #0
   294da:	f43f ae4d 	beq.w	29178 <_vfiprintf_r+0x650>
   294de:	aa10      	add	r2, sp, #64	; 0x40
   294e0:	4651      	mov	r1, sl
   294e2:	4658      	mov	r0, fp
   294e4:	f7ff fae6 	bl	28ab4 <__sprint_r.part.0>
   294e8:	2800      	cmp	r0, #0
   294ea:	f47f acb8 	bne.w	28e5e <_vfiprintf_r+0x336>
   294ee:	9911      	ldr	r1, [sp, #68]	; 0x44
   294f0:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   294f4:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   294f8:	3101      	adds	r1, #1
   294fa:	e51e      	b.n	28f3a <_vfiprintf_r+0x412>
   294fc:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29500:	9211      	str	r2, [sp, #68]	; 0x44
   29502:	f7ff bb71 	b.w	28be8 <_vfiprintf_r+0xc0>
   29506:	af3c      	add	r7, sp, #240	; 0xf0
   29508:	9302      	str	r3, [sp, #8]
   2950a:	e489      	b.n	28e20 <_vfiprintf_r+0x2f8>
   2950c:	9b01      	ldr	r3, [sp, #4]
   2950e:	06df      	lsls	r7, r3, #27
   29510:	d45c      	bmi.n	295cc <_vfiprintf_r+0xaa4>
   29512:	9b01      	ldr	r3, [sp, #4]
   29514:	065e      	lsls	r6, r3, #25
   29516:	f140 8116 	bpl.w	29746 <_vfiprintf_r+0xc1e>
   2951a:	9c06      	ldr	r4, [sp, #24]
   2951c:	2301      	movs	r3, #1
   2951e:	2500      	movs	r5, #0
   29520:	f854 2b04 	ldr.w	r2, [r4], #4
   29524:	9406      	str	r4, [sp, #24]
   29526:	b294      	uxth	r4, r2
   29528:	e454      	b.n	28dd4 <_vfiprintf_r+0x2ac>
   2952a:	222d      	movs	r2, #45	; 0x2d
   2952c:	4264      	negs	r4, r4
   2952e:	f04f 0301 	mov.w	r3, #1
   29532:	9601      	str	r6, [sp, #4]
   29534:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   29538:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   2953c:	e44e      	b.n	28ddc <_vfiprintf_r+0x2b4>
   2953e:	f1bc 0f00 	cmp.w	ip, #0
   29542:	d07f      	beq.n	29644 <_vfiprintf_r+0xb1c>
   29544:	aa10      	add	r2, sp, #64	; 0x40
   29546:	4651      	mov	r1, sl
   29548:	4658      	mov	r0, fp
   2954a:	f7ff fab3 	bl	28ab4 <__sprint_r.part.0>
   2954e:	2800      	cmp	r0, #0
   29550:	f47f ac85 	bne.w	28e5e <_vfiprintf_r+0x336>
   29554:	9a11      	ldr	r2, [sp, #68]	; 0x44
   29556:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   2955a:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   2955e:	1c51      	adds	r1, r2, #1
   29560:	e4b0      	b.n	28ec4 <_vfiprintf_r+0x39c>
   29562:	9306      	str	r3, [sp, #24]
   29564:	f899 3000 	ldrb.w	r3, [r9]
   29568:	f7ff bb52 	b.w	28c10 <_vfiprintf_r+0xe8>
   2956c:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   29570:	f001 fc18 	bl	2ada4 <__retarget_lock_acquire_recursive>
   29574:	f9ba 100c 	ldrsh.w	r1, [sl, #12]
   29578:	b28a      	uxth	r2, r1
   2957a:	f7ff baef 	b.w	28b5c <_vfiprintf_r+0x34>
   2957e:	f108 0808 	add.w	r8, r8, #8
   29582:	1c41      	adds	r1, r0, #1
   29584:	4602      	mov	r2, r0
   29586:	e4d2      	b.n	28f2e <_vfiprintf_r+0x406>
   29588:	05b1      	lsls	r1, r6, #22
   2958a:	f100 8103 	bmi.w	29794 <_vfiprintf_r+0xc6c>
   2958e:	17e5      	asrs	r5, r4, #31
   29590:	9306      	str	r3, [sp, #24]
   29592:	4622      	mov	r2, r4
   29594:	462b      	mov	r3, r5
   29596:	f7ff bbca 	b.w	28d2e <_vfiprintf_r+0x206>
   2959a:	05b2      	lsls	r2, r6, #22
   2959c:	f100 8101 	bmi.w	297a2 <_vfiprintf_r+0xc7a>
   295a0:	461c      	mov	r4, r3
   295a2:	2500      	movs	r5, #0
   295a4:	e412      	b.n	28dcc <_vfiprintf_r+0x2a4>
   295a6:	2220      	movs	r2, #32
   295a8:	f899 3000 	ldrb.w	r3, [r9]
   295ac:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   295b0:	f7ff bb2e 	b.w	28c10 <_vfiprintf_r+0xe8>
   295b4:	9b05      	ldr	r3, [sp, #20]
   295b6:	9c06      	ldr	r4, [sp, #24]
   295b8:	17dd      	asrs	r5, r3, #31
   295ba:	461a      	mov	r2, r3
   295bc:	f854 1b04 	ldr.w	r1, [r4], #4
   295c0:	462b      	mov	r3, r5
   295c2:	9406      	str	r4, [sp, #24]
   295c4:	e9c1 2300 	strd	r2, r3, [r1]
   295c8:	f7ff baf0 	b.w	28bac <_vfiprintf_r+0x84>
   295cc:	9c06      	ldr	r4, [sp, #24]
   295ce:	2301      	movs	r3, #1
   295d0:	2500      	movs	r5, #0
   295d2:	f854 2b04 	ldr.w	r2, [r4], #4
   295d6:	9406      	str	r4, [sp, #24]
   295d8:	4614      	mov	r4, r2
   295da:	f7ff bbfb 	b.w	28dd4 <_vfiprintf_r+0x2ac>
   295de:	2302      	movs	r3, #2
   295e0:	a90f      	add	r1, sp, #60	; 0x3c
   295e2:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   295e6:	469c      	mov	ip, r3
   295e8:	9113      	str	r1, [sp, #76]	; 0x4c
   295ea:	9314      	str	r3, [sp, #80]	; 0x50
   295ec:	e6bc      	b.n	29368 <_vfiprintf_r+0x840>
   295ee:	9601      	str	r6, [sp, #4]
   295f0:	e591      	b.n	29116 <_vfiprintf_r+0x5ee>
   295f2:	4a9e      	ldr	r2, [pc, #632]	; (2986c <_vfiprintf_r+0xd44>)
   295f4:	9209      	str	r2, [sp, #36]	; 0x24
   295f6:	06b5      	lsls	r5, r6, #26
   295f8:	9c06      	ldr	r4, [sp, #24]
   295fa:	d532      	bpl.n	29662 <_vfiprintf_r+0xb3a>
   295fc:	3407      	adds	r4, #7
   295fe:	f024 0207 	bic.w	r2, r4, #7
   29602:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   29606:	9206      	str	r2, [sp, #24]
   29608:	ea54 0205 	orrs.w	r2, r4, r5
   2960c:	d008      	beq.n	29620 <_vfiprintf_r+0xaf8>
   2960e:	07f7      	lsls	r7, r6, #31
   29610:	d506      	bpl.n	29620 <_vfiprintf_r+0xaf8>
   29612:	2230      	movs	r2, #48	; 0x30
   29614:	f046 0602 	orr.w	r6, r6, #2
   29618:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   2961c:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   29620:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   29624:	9301      	str	r3, [sp, #4]
   29626:	2302      	movs	r3, #2
   29628:	f7ff bbd4 	b.w	28dd4 <_vfiprintf_r+0x2ac>
   2962c:	4a90      	ldr	r2, [pc, #576]	; (29870 <_vfiprintf_r+0xd48>)
   2962e:	9209      	str	r2, [sp, #36]	; 0x24
   29630:	e7e1      	b.n	295f6 <_vfiprintf_r+0xace>
   29632:	4638      	mov	r0, r7
   29634:	9406      	str	r4, [sp, #24]
   29636:	f7fd faef 	bl	26c18 <strlen>
   2963a:	2300      	movs	r3, #0
   2963c:	e9cd 3002 	strd	r3, r0, [sp, #8]
   29640:	f7ff bbee 	b.w	28e20 <_vfiprintf_r+0x2f8>
   29644:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   29648:	2a00      	cmp	r2, #0
   2964a:	f000 8091 	beq.w	29770 <_vfiprintf_r+0xc48>
   2964e:	2201      	movs	r2, #1
   29650:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   29654:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29658:	4611      	mov	r1, r2
   2965a:	4694      	mov	ip, r2
   2965c:	e9cd 0213 	strd	r0, r2, [sp, #76]	; 0x4c
   29660:	e43f      	b.n	28ee2 <_vfiprintf_r+0x3ba>
   29662:	f854 2b04 	ldr.w	r2, [r4], #4
   29666:	9406      	str	r4, [sp, #24]
   29668:	06f4      	lsls	r4, r6, #27
   2966a:	d407      	bmi.n	2967c <_vfiprintf_r+0xb54>
   2966c:	0670      	lsls	r0, r6, #25
   2966e:	d502      	bpl.n	29676 <_vfiprintf_r+0xb4e>
   29670:	b294      	uxth	r4, r2
   29672:	2500      	movs	r5, #0
   29674:	e7c8      	b.n	29608 <_vfiprintf_r+0xae0>
   29676:	05b1      	lsls	r1, r6, #22
   29678:	f100 8097 	bmi.w	297aa <_vfiprintf_r+0xc82>
   2967c:	4614      	mov	r4, r2
   2967e:	2500      	movs	r5, #0
   29680:	e7c2      	b.n	29608 <_vfiprintf_r+0xae0>
   29682:	9b01      	ldr	r3, [sp, #4]
   29684:	2600      	movs	r6, #0
   29686:	f8cd 800c 	str.w	r8, [sp, #12]
   2968a:	af3c      	add	r7, sp, #240	; 0xf0
   2968c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   29690:	f8cd 901c 	str.w	r9, [sp, #28]
   29694:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   29698:	4698      	mov	r8, r3
   2969a:	e007      	b.n	296ac <_vfiprintf_r+0xb84>
   2969c:	f7e3 f8dc 	bl	c858 <__aeabi_uldivmod>
   296a0:	2d00      	cmp	r5, #0
   296a2:	bf08      	it	eq
   296a4:	2c0a      	cmpeq	r4, #10
   296a6:	d320      	bcc.n	296ea <_vfiprintf_r+0xbc2>
   296a8:	4604      	mov	r4, r0
   296aa:	460d      	mov	r5, r1
   296ac:	220a      	movs	r2, #10
   296ae:	2300      	movs	r3, #0
   296b0:	4620      	mov	r0, r4
   296b2:	4629      	mov	r1, r5
   296b4:	f7e3 f8d0 	bl	c858 <__aeabi_uldivmod>
   296b8:	4694      	mov	ip, r2
   296ba:	4620      	mov	r0, r4
   296bc:	4629      	mov	r1, r5
   296be:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   296c2:	220a      	movs	r2, #10
   296c4:	2300      	movs	r3, #0
   296c6:	3601      	adds	r6, #1
   296c8:	f807 cc01 	strb.w	ip, [r7, #-1]
   296cc:	3f01      	subs	r7, #1
   296ce:	f1b8 0f00 	cmp.w	r8, #0
   296d2:	d0e3      	beq.n	2969c <_vfiprintf_r+0xb74>
   296d4:	f899 c000 	ldrb.w	ip, [r9]
   296d8:	45b4      	cmp	ip, r6
   296da:	d1df      	bne.n	2969c <_vfiprintf_r+0xb74>
   296dc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   296e0:	d0dc      	beq.n	2969c <_vfiprintf_r+0xb74>
   296e2:	429d      	cmp	r5, r3
   296e4:	bf08      	it	eq
   296e6:	4294      	cmpeq	r4, r2
   296e8:	d268      	bcs.n	297bc <_vfiprintf_r+0xc94>
   296ea:	ab3c      	add	r3, sp, #240	; 0xf0
   296ec:	f8dd 800c 	ldr.w	r8, [sp, #12]
   296f0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   296f4:	1bdb      	subs	r3, r3, r7
   296f6:	f8dd 901c 	ldr.w	r9, [sp, #28]
   296fa:	9e01      	ldr	r6, [sp, #4]
   296fc:	9303      	str	r3, [sp, #12]
   296fe:	f7ff bb8f 	b.w	28e20 <_vfiprintf_r+0x2f8>
   29702:	f899 3001 	ldrb.w	r3, [r9, #1]
   29706:	f446 7600 	orr.w	r6, r6, #512	; 0x200
   2970a:	f109 0901 	add.w	r9, r9, #1
   2970e:	f7ff ba7f 	b.w	28c10 <_vfiprintf_r+0xe8>
   29712:	f899 3001 	ldrb.w	r3, [r9, #1]
   29716:	f046 0620 	orr.w	r6, r6, #32
   2971a:	f109 0901 	add.w	r9, r9, #1
   2971e:	f7ff ba77 	b.w	28c10 <_vfiprintf_r+0xe8>
   29722:	9c06      	ldr	r4, [sp, #24]
   29724:	9a05      	ldr	r2, [sp, #20]
   29726:	f854 3b04 	ldr.w	r3, [r4], #4
   2972a:	601a      	str	r2, [r3, #0]
   2972c:	9406      	str	r4, [sp, #24]
   2972e:	f7ff ba3d 	b.w	28bac <_vfiprintf_r+0x84>
   29732:	9b02      	ldr	r3, [sp, #8]
   29734:	4f4f      	ldr	r7, [pc, #316]	; (29874 <_vfiprintf_r+0xd4c>)
   29736:	2b06      	cmp	r3, #6
   29738:	9406      	str	r4, [sp, #24]
   2973a:	bf28      	it	cs
   2973c:	2306      	movcs	r3, #6
   2973e:	9303      	str	r3, [sp, #12]
   29740:	9301      	str	r3, [sp, #4]
   29742:	f7ff bba9 	b.w	28e98 <_vfiprintf_r+0x370>
   29746:	9c06      	ldr	r4, [sp, #24]
   29748:	2500      	movs	r5, #0
   2974a:	9b01      	ldr	r3, [sp, #4]
   2974c:	f854 2b04 	ldr.w	r2, [r4], #4
   29750:	f413 7f00 	tst.w	r3, #512	; 0x200
   29754:	f04f 0301 	mov.w	r3, #1
   29758:	9406      	str	r4, [sp, #24]
   2975a:	bf14      	ite	ne
   2975c:	b2d4      	uxtbne	r4, r2
   2975e:	4614      	moveq	r4, r2
   29760:	f7ff bb38 	b.w	28dd4 <_vfiprintf_r+0x2ac>
   29764:	2101      	movs	r1, #1
   29766:	4662      	mov	r2, ip
   29768:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   2976c:	f7ff bbdf 	b.w	28f2e <_vfiprintf_r+0x406>
   29770:	9b07      	ldr	r3, [sp, #28]
   29772:	2b00      	cmp	r3, #0
   29774:	f47f adef 	bne.w	29356 <_vfiprintf_r+0x82e>
   29778:	4662      	mov	r2, ip
   2977a:	2101      	movs	r1, #1
   2977c:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   29780:	f7ff bbd5 	b.w	28f2e <_vfiprintf_r+0x406>
   29784:	9c06      	ldr	r4, [sp, #24]
   29786:	9a05      	ldr	r2, [sp, #20]
   29788:	f854 3b04 	ldr.w	r3, [r4], #4
   2978c:	801a      	strh	r2, [r3, #0]
   2978e:	9406      	str	r4, [sp, #24]
   29790:	f7ff ba0c 	b.w	28bac <_vfiprintf_r+0x84>
   29794:	b264      	sxtb	r4, r4
   29796:	9306      	str	r3, [sp, #24]
   29798:	17e5      	asrs	r5, r4, #31
   2979a:	4622      	mov	r2, r4
   2979c:	462b      	mov	r3, r5
   2979e:	f7ff bac6 	b.w	28d2e <_vfiprintf_r+0x206>
   297a2:	b2dc      	uxtb	r4, r3
   297a4:	2500      	movs	r5, #0
   297a6:	f7ff bb11 	b.w	28dcc <_vfiprintf_r+0x2a4>
   297aa:	b2d4      	uxtb	r4, r2
   297ac:	2500      	movs	r5, #0
   297ae:	e72b      	b.n	29608 <_vfiprintf_r+0xae0>
   297b0:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   297b4:	f001 faf8 	bl	2ada8 <__retarget_lock_release_recursive>
   297b8:	f7ff baee 	b.w	28d98 <_vfiprintf_r+0x270>
   297bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   297be:	990b      	ldr	r1, [sp, #44]	; 0x2c
   297c0:	1aff      	subs	r7, r7, r3
   297c2:	461a      	mov	r2, r3
   297c4:	4638      	mov	r0, r7
   297c6:	f7fd fa8f 	bl	26ce8 <strncpy>
   297ca:	f899 3001 	ldrb.w	r3, [r9, #1]
   297ce:	b10b      	cbz	r3, 297d4 <_vfiprintf_r+0xcac>
   297d0:	f109 0901 	add.w	r9, r9, #1
   297d4:	4620      	mov	r0, r4
   297d6:	4629      	mov	r1, r5
   297d8:	220a      	movs	r2, #10
   297da:	2300      	movs	r3, #0
   297dc:	2600      	movs	r6, #0
   297de:	f7e3 f83b 	bl	c858 <__aeabi_uldivmod>
   297e2:	e761      	b.n	296a8 <_vfiprintf_r+0xb80>
   297e4:	9b02      	ldr	r3, [sp, #8]
   297e6:	9406      	str	r4, [sp, #24]
   297e8:	9303      	str	r3, [sp, #12]
   297ea:	9002      	str	r0, [sp, #8]
   297ec:	f7ff bb18 	b.w	28e20 <_vfiprintf_r+0x2f8>
   297f0:	e9dd 2311 	ldrd	r2, r3, [sp, #68]	; 0x44
   297f4:	4d20      	ldr	r5, [pc, #128]	; (29878 <_vfiprintf_r+0xd50>)
   297f6:	3201      	adds	r2, #1
   297f8:	e5e9      	b.n	293ce <_vfiprintf_r+0x8a6>
   297fa:	2200      	movs	r2, #0
   297fc:	9202      	str	r2, [sp, #8]
   297fe:	f7ff ba09 	b.w	28c14 <_vfiprintf_r+0xec>
   29802:	9811      	ldr	r0, [sp, #68]	; 0x44
   29804:	4d1c      	ldr	r5, [pc, #112]	; (29878 <_vfiprintf_r+0xd50>)
   29806:	3001      	adds	r0, #1
   29808:	e62d      	b.n	29466 <_vfiprintf_r+0x93e>
   2980a:	ee18 0a10 	vmov	r0, s16
   2980e:	aa10      	add	r2, sp, #64	; 0x40
   29810:	4651      	mov	r1, sl
   29812:	f7ff f94f 	bl	28ab4 <__sprint_r.part.0>
   29816:	2800      	cmp	r0, #0
   29818:	f43f ab1f 	beq.w	28e5a <_vfiprintf_r+0x332>
   2981c:	f7ff bb1f 	b.w	28e5e <_vfiprintf_r+0x336>
   29820:	f04f 33ff 	mov.w	r3, #4294967295
   29824:	9305      	str	r3, [sp, #20]
   29826:	f7ff bb25 	b.w	28e74 <_vfiprintf_r+0x34c>
   2982a:	4608      	mov	r0, r1
   2982c:	4d13      	ldr	r5, [pc, #76]	; (2987c <_vfiprintf_r+0xd54>)
   2982e:	e51c      	b.n	2926a <_vfiprintf_r+0x742>
   29830:	9a06      	ldr	r2, [sp, #24]
   29832:	f899 3001 	ldrb.w	r3, [r9, #1]
   29836:	4689      	mov	r9, r1
   29838:	f852 1b04 	ldr.w	r1, [r2], #4
   2983c:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   29840:	9206      	str	r2, [sp, #24]
   29842:	9102      	str	r1, [sp, #8]
   29844:	f7ff b9e4 	b.w	28c10 <_vfiprintf_r+0xe8>
   29848:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
   2984c:	07dc      	lsls	r4, r3, #31
   2984e:	d4e7      	bmi.n	29820 <_vfiprintf_r+0xcf8>
   29850:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   29854:	0598      	lsls	r0, r3, #22
   29856:	d4e3      	bmi.n	29820 <_vfiprintf_r+0xcf8>
   29858:	f04f 33ff 	mov.w	r3, #4294967295
   2985c:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
   29860:	9305      	str	r3, [sp, #20]
   29862:	f001 faa1 	bl	2ada8 <__retarget_lock_release_recursive>
   29866:	f7ff bb05 	b.w	28e74 <_vfiprintf_r+0x34c>
   2986a:	bf00      	nop
   2986c:	0002fac0 	.word	0x0002fac0
   29870:	0002faac 	.word	0x0002faac
   29874:	0002fad4 	.word	0x0002fad4
   29878:	0002fb2c 	.word	0x0002fb2c
   2987c:	0002fb3c 	.word	0x0002fb3c

00029880 <__sbprintf>:
   29880:	b5f0      	push	{r4, r5, r6, r7, lr}
   29882:	460c      	mov	r4, r1
   29884:	8989      	ldrh	r1, [r1, #12]
   29886:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
   2988a:	2700      	movs	r7, #0
   2988c:	f021 0102 	bic.w	r1, r1, #2
   29890:	4606      	mov	r6, r0
   29892:	ad1c      	add	r5, sp, #112	; 0x70
   29894:	9708      	str	r7, [sp, #32]
   29896:	f8ad 1014 	strh.w	r1, [sp, #20]
   2989a:	f44f 6780 	mov.w	r7, #1024	; 0x400
   2989e:	89e1      	ldrh	r1, [r4, #14]
   298a0:	a818      	add	r0, sp, #96	; 0x60
   298a2:	9502      	str	r5, [sp, #8]
   298a4:	f8ad 1016 	strh.w	r1, [sp, #22]
   298a8:	69e1      	ldr	r1, [r4, #28]
   298aa:	9506      	str	r5, [sp, #24]
   298ac:	9109      	str	r1, [sp, #36]	; 0x24
   298ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
   298b0:	9704      	str	r7, [sp, #16]
   298b2:	910b      	str	r1, [sp, #44]	; 0x2c
   298b4:	9707      	str	r7, [sp, #28]
   298b6:	e9cd 3200 	strd	r3, r2, [sp]
   298ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
   298bc:	931b      	str	r3, [sp, #108]	; 0x6c
   298be:	f001 fa6d 	bl	2ad9c <__retarget_lock_init_recursive>
   298c2:	a902      	add	r1, sp, #8
   298c4:	4630      	mov	r0, r6
   298c6:	e9dd 3200 	ldrd	r3, r2, [sp]
   298ca:	f7ff f92d 	bl	28b28 <_vfiprintf_r>
   298ce:	1e05      	subs	r5, r0, #0
   298d0:	db07      	blt.n	298e2 <__sbprintf+0x62>
   298d2:	4630      	mov	r0, r6
   298d4:	a902      	add	r1, sp, #8
   298d6:	f000 fa51 	bl	29d7c <_fflush_r>
   298da:	2800      	cmp	r0, #0
   298dc:	bf18      	it	ne
   298de:	f04f 35ff 	movne.w	r5, #4294967295
   298e2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   298e6:	065b      	lsls	r3, r3, #25
   298e8:	d503      	bpl.n	298f2 <__sbprintf+0x72>
   298ea:	89a3      	ldrh	r3, [r4, #12]
   298ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   298f0:	81a3      	strh	r3, [r4, #12]
   298f2:	9818      	ldr	r0, [sp, #96]	; 0x60
   298f4:	f001 fa54 	bl	2ada0 <__retarget_lock_close_recursive>
   298f8:	4628      	mov	r0, r5
   298fa:	f20d 4d74 	addw	sp, sp, #1140	; 0x474
   298fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029900 <_vsnprintf_r>:
   29900:	b570      	push	{r4, r5, r6, lr}
   29902:	1e14      	subs	r4, r2, #0
   29904:	b09a      	sub	sp, #104	; 0x68
   29906:	4605      	mov	r5, r0
   29908:	db2c      	blt.n	29964 <_vsnprintf_r+0x64>
   2990a:	f44f 7202 	mov.w	r2, #520	; 0x208
   2990e:	9100      	str	r1, [sp, #0]
   29910:	9104      	str	r1, [sp, #16]
   29912:	f8ad 200c 	strh.w	r2, [sp, #12]
   29916:	d014      	beq.n	29942 <_vsnprintf_r+0x42>
   29918:	3c01      	subs	r4, #1
   2991a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   2991e:	461a      	mov	r2, r3
   29920:	4669      	mov	r1, sp
   29922:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   29924:	9402      	str	r4, [sp, #8]
   29926:	9405      	str	r4, [sp, #20]
   29928:	f8ad 600e 	strh.w	r6, [sp, #14]
   2992c:	f7e4 ffc4 	bl	e8b8 <_svfprintf_r>
   29930:	1c42      	adds	r2, r0, #1
   29932:	da01      	bge.n	29938 <_vsnprintf_r+0x38>
   29934:	238b      	movs	r3, #139	; 0x8b
   29936:	602b      	str	r3, [r5, #0]
   29938:	9b00      	ldr	r3, [sp, #0]
   2993a:	2200      	movs	r2, #0
   2993c:	701a      	strb	r2, [r3, #0]
   2993e:	b01a      	add	sp, #104	; 0x68
   29940:	bd70      	pop	{r4, r5, r6, pc}
   29942:	f64f 76ff 	movw	r6, #65535	; 0xffff
   29946:	461a      	mov	r2, r3
   29948:	4669      	mov	r1, sp
   2994a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2994c:	9402      	str	r4, [sp, #8]
   2994e:	9405      	str	r4, [sp, #20]
   29950:	f8ad 600e 	strh.w	r6, [sp, #14]
   29954:	f7e4 ffb0 	bl	e8b8 <_svfprintf_r>
   29958:	1c43      	adds	r3, r0, #1
   2995a:	da01      	bge.n	29960 <_vsnprintf_r+0x60>
   2995c:	238b      	movs	r3, #139	; 0x8b
   2995e:	602b      	str	r3, [r5, #0]
   29960:	b01a      	add	sp, #104	; 0x68
   29962:	bd70      	pop	{r4, r5, r6, pc}
   29964:	238b      	movs	r3, #139	; 0x8b
   29966:	f04f 30ff 	mov.w	r0, #4294967295
   2996a:	602b      	str	r3, [r5, #0]
   2996c:	e7f8      	b.n	29960 <_vsnprintf_r+0x60>
   2996e:	bf00      	nop

00029970 <vsnprintf>:
   29970:	b570      	push	{r4, r5, r6, lr}
   29972:	460e      	mov	r6, r1
   29974:	b082      	sub	sp, #8
   29976:	4615      	mov	r5, r2
   29978:	4c04      	ldr	r4, [pc, #16]	; (2998c <vsnprintf+0x1c>)
   2997a:	4601      	mov	r1, r0
   2997c:	9300      	str	r3, [sp, #0]
   2997e:	4632      	mov	r2, r6
   29980:	462b      	mov	r3, r5
   29982:	6820      	ldr	r0, [r4, #0]
   29984:	f7ff ffbc 	bl	29900 <_vsnprintf_r>
   29988:	b002      	add	sp, #8
   2998a:	bd70      	pop	{r4, r5, r6, pc}
   2998c:	200204d8 	.word	0x200204d8

00029990 <_vsprintf_r>:
   29990:	b570      	push	{r4, r5, r6, lr}
   29992:	b09a      	sub	sp, #104	; 0x68
   29994:	460c      	mov	r4, r1
   29996:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   2999a:	4e07      	ldr	r6, [pc, #28]	; (299b8 <_vsprintf_r+0x28>)
   2999c:	4669      	mov	r1, sp
   2999e:	9400      	str	r4, [sp, #0]
   299a0:	9505      	str	r5, [sp, #20]
   299a2:	9502      	str	r5, [sp, #8]
   299a4:	e9cd 6403 	strd	r6, r4, [sp, #12]
   299a8:	f7e4 ff86 	bl	e8b8 <_svfprintf_r>
   299ac:	9b00      	ldr	r3, [sp, #0]
   299ae:	2200      	movs	r2, #0
   299b0:	701a      	strb	r2, [r3, #0]
   299b2:	b01a      	add	sp, #104	; 0x68
   299b4:	bd70      	pop	{r4, r5, r6, pc}
   299b6:	bf00      	nop
   299b8:	ffff0208 	.word	0xffff0208

000299bc <vsprintf>:
   299bc:	b430      	push	{r4, r5}
   299be:	460d      	mov	r5, r1
   299c0:	4c03      	ldr	r4, [pc, #12]	; (299d0 <vsprintf+0x14>)
   299c2:	4613      	mov	r3, r2
   299c4:	4601      	mov	r1, r0
   299c6:	462a      	mov	r2, r5
   299c8:	6820      	ldr	r0, [r4, #0]
   299ca:	bc30      	pop	{r4, r5}
   299cc:	f7ff bfe0 	b.w	29990 <_vsprintf_r>
   299d0:	200204d8 	.word	0x200204d8

000299d4 <_write_r>:
   299d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   299d6:	460f      	mov	r7, r1
   299d8:	4d08      	ldr	r5, [pc, #32]	; (299fc <_write_r+0x28>)
   299da:	2600      	movs	r6, #0
   299dc:	4611      	mov	r1, r2
   299de:	4604      	mov	r4, r0
   299e0:	461a      	mov	r2, r3
   299e2:	4638      	mov	r0, r7
   299e4:	602e      	str	r6, [r5, #0]
   299e6:	f003 fb5e 	bl	2d0a6 <_write>
   299ea:	1c43      	adds	r3, r0, #1
   299ec:	d000      	beq.n	299f0 <_write_r+0x1c>
   299ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   299f0:	682b      	ldr	r3, [r5, #0]
   299f2:	2b00      	cmp	r3, #0
   299f4:	d0fb      	beq.n	299ee <_write_r+0x1a>
   299f6:	6023      	str	r3, [r4, #0]
   299f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   299fa:	bf00      	nop
   299fc:	20026430 	.word	0x20026430

00029a00 <__swsetup_r>:
   29a00:	b538      	push	{r3, r4, r5, lr}
   29a02:	4b32      	ldr	r3, [pc, #200]	; (29acc <__swsetup_r+0xcc>)
   29a04:	4605      	mov	r5, r0
   29a06:	460c      	mov	r4, r1
   29a08:	681b      	ldr	r3, [r3, #0]
   29a0a:	b113      	cbz	r3, 29a12 <__swsetup_r+0x12>
   29a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   29a0e:	2a00      	cmp	r2, #0
   29a10:	d036      	beq.n	29a80 <__swsetup_r+0x80>
   29a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29a16:	0718      	lsls	r0, r3, #28
   29a18:	b29a      	uxth	r2, r3
   29a1a:	d50c      	bpl.n	29a36 <__swsetup_r+0x36>
   29a1c:	6921      	ldr	r1, [r4, #16]
   29a1e:	b1a9      	cbz	r1, 29a4c <__swsetup_r+0x4c>
   29a20:	f012 0001 	ands.w	r0, r2, #1
   29a24:	d022      	beq.n	29a6c <__swsetup_r+0x6c>
   29a26:	6960      	ldr	r0, [r4, #20]
   29a28:	2500      	movs	r5, #0
   29a2a:	4240      	negs	r0, r0
   29a2c:	60a5      	str	r5, [r4, #8]
   29a2e:	61a0      	str	r0, [r4, #24]
   29a30:	b311      	cbz	r1, 29a78 <__swsetup_r+0x78>
   29a32:	2000      	movs	r0, #0
   29a34:	bd38      	pop	{r3, r4, r5, pc}
   29a36:	06d1      	lsls	r1, r2, #27
   29a38:	d53a      	bpl.n	29ab0 <__swsetup_r+0xb0>
   29a3a:	0752      	lsls	r2, r2, #29
   29a3c:	d424      	bmi.n	29a88 <__swsetup_r+0x88>
   29a3e:	6921      	ldr	r1, [r4, #16]
   29a40:	f043 0308 	orr.w	r3, r3, #8
   29a44:	b29a      	uxth	r2, r3
   29a46:	81a3      	strh	r3, [r4, #12]
   29a48:	2900      	cmp	r1, #0
   29a4a:	d1e9      	bne.n	29a20 <__swsetup_r+0x20>
   29a4c:	f402 7020 	and.w	r0, r2, #640	; 0x280
   29a50:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   29a54:	d0e4      	beq.n	29a20 <__swsetup_r+0x20>
   29a56:	4628      	mov	r0, r5
   29a58:	4621      	mov	r1, r4
   29a5a:	f001 f9eb 	bl	2ae34 <__smakebuf_r>
   29a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29a62:	6921      	ldr	r1, [r4, #16]
   29a64:	b29a      	uxth	r2, r3
   29a66:	f012 0001 	ands.w	r0, r2, #1
   29a6a:	d1dc      	bne.n	29a26 <__swsetup_r+0x26>
   29a6c:	0795      	lsls	r5, r2, #30
   29a6e:	bf58      	it	pl
   29a70:	6960      	ldrpl	r0, [r4, #20]
   29a72:	60a0      	str	r0, [r4, #8]
   29a74:	2900      	cmp	r1, #0
   29a76:	d1dc      	bne.n	29a32 <__swsetup_r+0x32>
   29a78:	0612      	lsls	r2, r2, #24
   29a7a:	d421      	bmi.n	29ac0 <__swsetup_r+0xc0>
   29a7c:	4608      	mov	r0, r1
   29a7e:	bd38      	pop	{r3, r4, r5, pc}
   29a80:	4618      	mov	r0, r3
   29a82:	f000 f9d9 	bl	29e38 <__sinit>
   29a86:	e7c4      	b.n	29a12 <__swsetup_r+0x12>
   29a88:	6b21      	ldr	r1, [r4, #48]	; 0x30
   29a8a:	b151      	cbz	r1, 29aa2 <__swsetup_r+0xa2>
   29a8c:	f104 0240 	add.w	r2, r4, #64	; 0x40
   29a90:	4291      	cmp	r1, r2
   29a92:	d004      	beq.n	29a9e <__swsetup_r+0x9e>
   29a94:	4628      	mov	r0, r5
   29a96:	f000 fadf 	bl	2a058 <_free_r>
   29a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29a9e:	2200      	movs	r2, #0
   29aa0:	6322      	str	r2, [r4, #48]	; 0x30
   29aa2:	2200      	movs	r2, #0
   29aa4:	6921      	ldr	r1, [r4, #16]
   29aa6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   29aaa:	e9c4 1200 	strd	r1, r2, [r4]
   29aae:	e7c7      	b.n	29a40 <__swsetup_r+0x40>
   29ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29ab4:	2209      	movs	r2, #9
   29ab6:	f04f 30ff 	mov.w	r0, #4294967295
   29aba:	602a      	str	r2, [r5, #0]
   29abc:	81a3      	strh	r3, [r4, #12]
   29abe:	bd38      	pop	{r3, r4, r5, pc}
   29ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29ac4:	f04f 30ff 	mov.w	r0, #4294967295
   29ac8:	81a3      	strh	r3, [r4, #12]
   29aca:	bd38      	pop	{r3, r4, r5, pc}
   29acc:	200204d8 	.word	0x200204d8

00029ad0 <abort>:
   29ad0:	2006      	movs	r0, #6
   29ad2:	b508      	push	{r3, lr}
   29ad4:	f002 f80c 	bl	2baf0 <raise>
   29ad8:	2001      	movs	r0, #1
   29ada:	f7eb fc17 	bl	1530c <_exit>
   29ade:	bf00      	nop

00029ae0 <_close_r>:
   29ae0:	b538      	push	{r3, r4, r5, lr}
   29ae2:	2200      	movs	r2, #0
   29ae4:	4d06      	ldr	r5, [pc, #24]	; (29b00 <_close_r+0x20>)
   29ae6:	4604      	mov	r4, r0
   29ae8:	4608      	mov	r0, r1
   29aea:	602a      	str	r2, [r5, #0]
   29aec:	f003 fadf 	bl	2d0ae <_close>
   29af0:	1c43      	adds	r3, r0, #1
   29af2:	d000      	beq.n	29af6 <_close_r+0x16>
   29af4:	bd38      	pop	{r3, r4, r5, pc}
   29af6:	682b      	ldr	r3, [r5, #0]
   29af8:	2b00      	cmp	r3, #0
   29afa:	d0fb      	beq.n	29af4 <_close_r+0x14>
   29afc:	6023      	str	r3, [r4, #0]
   29afe:	bd38      	pop	{r3, r4, r5, pc}
   29b00:	20026430 	.word	0x20026430

00029b04 <quorem>:
   29b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29b08:	6903      	ldr	r3, [r0, #16]
   29b0a:	b085      	sub	sp, #20
   29b0c:	690c      	ldr	r4, [r1, #16]
   29b0e:	9101      	str	r1, [sp, #4]
   29b10:	42a3      	cmp	r3, r4
   29b12:	f2c0 808c 	blt.w	29c2e <quorem+0x12a>
   29b16:	3c01      	subs	r4, #1
   29b18:	f101 0514 	add.w	r5, r1, #20
   29b1c:	f100 0914 	add.w	r9, r0, #20
   29b20:	4682      	mov	sl, r0
   29b22:	00a2      	lsls	r2, r4, #2
   29b24:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   29b28:	eb09 0184 	add.w	r1, r9, r4, lsl #2
   29b2c:	3301      	adds	r3, #1
   29b2e:	9202      	str	r2, [sp, #8]
   29b30:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
   29b34:	eb05 0884 	add.w	r8, r5, r4, lsl #2
   29b38:	9103      	str	r1, [sp, #12]
   29b3a:	429a      	cmp	r2, r3
   29b3c:	fbb2 f6f3 	udiv	r6, r2, r3
   29b40:	d33c      	bcc.n	29bbc <quorem+0xb8>
   29b42:	2300      	movs	r3, #0
   29b44:	4628      	mov	r0, r5
   29b46:	464f      	mov	r7, r9
   29b48:	461a      	mov	r2, r3
   29b4a:	f850 1b04 	ldr.w	r1, [r0], #4
   29b4e:	f8d7 e000 	ldr.w	lr, [r7]
   29b52:	fa1f fc81 	uxth.w	ip, r1
   29b56:	4580      	cmp	r8, r0
   29b58:	ea4f 4111 	mov.w	r1, r1, lsr #16
   29b5c:	fb06 3c0c 	mla	ip, r6, ip, r3
   29b60:	fa1f fb8e 	uxth.w	fp, lr
   29b64:	ea4f 431c 	mov.w	r3, ip, lsr #16
   29b68:	fa1f fc8c 	uxth.w	ip, ip
   29b6c:	fb06 3301 	mla	r3, r6, r1, r3
   29b70:	eba2 010c 	sub.w	r1, r2, ip
   29b74:	b29a      	uxth	r2, r3
   29b76:	4459      	add	r1, fp
   29b78:	ea4f 4313 	mov.w	r3, r3, lsr #16
   29b7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   29b80:	fa1f fc81 	uxth.w	ip, r1
   29b84:	eb02 4221 	add.w	r2, r2, r1, asr #16
   29b88:	ea4c 4102 	orr.w	r1, ip, r2, lsl #16
   29b8c:	ea4f 4222 	mov.w	r2, r2, asr #16
   29b90:	f847 1b04 	str.w	r1, [r7], #4
   29b94:	d2d9      	bcs.n	29b4a <quorem+0x46>
   29b96:	9b02      	ldr	r3, [sp, #8]
   29b98:	f859 3003 	ldr.w	r3, [r9, r3]
   29b9c:	b973      	cbnz	r3, 29bbc <quorem+0xb8>
   29b9e:	9b03      	ldr	r3, [sp, #12]
   29ba0:	3b04      	subs	r3, #4
   29ba2:	4599      	cmp	r9, r3
   29ba4:	d304      	bcc.n	29bb0 <quorem+0xac>
   29ba6:	e007      	b.n	29bb8 <quorem+0xb4>
   29ba8:	4599      	cmp	r9, r3
   29baa:	f104 34ff 	add.w	r4, r4, #4294967295
   29bae:	d203      	bcs.n	29bb8 <quorem+0xb4>
   29bb0:	f853 2904 	ldr.w	r2, [r3], #-4
   29bb4:	2a00      	cmp	r2, #0
   29bb6:	d0f7      	beq.n	29ba8 <quorem+0xa4>
   29bb8:	f8ca 4010 	str.w	r4, [sl, #16]
   29bbc:	9901      	ldr	r1, [sp, #4]
   29bbe:	4650      	mov	r0, sl
   29bc0:	f001 fca0 	bl	2b504 <__mcmp>
   29bc4:	2800      	cmp	r0, #0
   29bc6:	db2e      	blt.n	29c26 <quorem+0x122>
   29bc8:	3601      	adds	r6, #1
   29bca:	4648      	mov	r0, r9
   29bcc:	2200      	movs	r2, #0
   29bce:	f855 1b04 	ldr.w	r1, [r5], #4
   29bd2:	f8d0 c000 	ldr.w	ip, [r0]
   29bd6:	b28b      	uxth	r3, r1
   29bd8:	45a8      	cmp	r8, r5
   29bda:	ea4f 4111 	mov.w	r1, r1, lsr #16
   29bde:	eba2 0303 	sub.w	r3, r2, r3
   29be2:	fa1f f28c 	uxth.w	r2, ip
   29be6:	ebc1 411c 	rsb	r1, r1, ip, lsr #16
   29bea:	4413      	add	r3, r2
   29bec:	eb01 4123 	add.w	r1, r1, r3, asr #16
   29bf0:	b29b      	uxth	r3, r3
   29bf2:	ea4f 4221 	mov.w	r2, r1, asr #16
   29bf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   29bfa:	f840 3b04 	str.w	r3, [r0], #4
   29bfe:	d2e6      	bcs.n	29bce <quorem+0xca>
   29c00:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
   29c04:	eb09 0384 	add.w	r3, r9, r4, lsl #2
   29c08:	b96a      	cbnz	r2, 29c26 <quorem+0x122>
   29c0a:	3b04      	subs	r3, #4
   29c0c:	4599      	cmp	r9, r3
   29c0e:	d304      	bcc.n	29c1a <quorem+0x116>
   29c10:	e007      	b.n	29c22 <quorem+0x11e>
   29c12:	4599      	cmp	r9, r3
   29c14:	f104 34ff 	add.w	r4, r4, #4294967295
   29c18:	d203      	bcs.n	29c22 <quorem+0x11e>
   29c1a:	f853 2904 	ldr.w	r2, [r3], #-4
   29c1e:	2a00      	cmp	r2, #0
   29c20:	d0f7      	beq.n	29c12 <quorem+0x10e>
   29c22:	f8ca 4010 	str.w	r4, [sl, #16]
   29c26:	4630      	mov	r0, r6
   29c28:	b005      	add	sp, #20
   29c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29c2e:	2000      	movs	r0, #0
   29c30:	b005      	add	sp, #20
   29c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29c36:	bf00      	nop

00029c38 <__sflush_r>:
   29c38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   29c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29c40:	460d      	mov	r5, r1
   29c42:	0711      	lsls	r1, r2, #28
   29c44:	4680      	mov	r8, r0
   29c46:	d431      	bmi.n	29cac <__sflush_r+0x74>
   29c48:	686b      	ldr	r3, [r5, #4]
   29c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   29c4e:	2b00      	cmp	r3, #0
   29c50:	81aa      	strh	r2, [r5, #12]
   29c52:	dd48      	ble.n	29ce6 <__sflush_r+0xae>
   29c54:	6aac      	ldr	r4, [r5, #40]	; 0x28
   29c56:	2c00      	cmp	r4, #0
   29c58:	d042      	beq.n	29ce0 <__sflush_r+0xa8>
   29c5a:	2100      	movs	r1, #0
   29c5c:	b293      	uxth	r3, r2
   29c5e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   29c62:	f8d8 6000 	ldr.w	r6, [r8]
   29c66:	f8c8 1000 	str.w	r1, [r8]
   29c6a:	d140      	bne.n	29cee <__sflush_r+0xb6>
   29c6c:	2301      	movs	r3, #1
   29c6e:	69e9      	ldr	r1, [r5, #28]
   29c70:	4640      	mov	r0, r8
   29c72:	47a0      	blx	r4
   29c74:	1c43      	adds	r3, r0, #1
   29c76:	d073      	beq.n	29d60 <__sflush_r+0x128>
   29c78:	89ab      	ldrh	r3, [r5, #12]
   29c7a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   29c7c:	075f      	lsls	r7, r3, #29
   29c7e:	d505      	bpl.n	29c8c <__sflush_r+0x54>
   29c80:	686a      	ldr	r2, [r5, #4]
   29c82:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   29c84:	1a80      	subs	r0, r0, r2
   29c86:	b10b      	cbz	r3, 29c8c <__sflush_r+0x54>
   29c88:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   29c8a:	1ac0      	subs	r0, r0, r3
   29c8c:	4602      	mov	r2, r0
   29c8e:	2300      	movs	r3, #0
   29c90:	69e9      	ldr	r1, [r5, #28]
   29c92:	4640      	mov	r0, r8
   29c94:	47a0      	blx	r4
   29c96:	1c44      	adds	r4, r0, #1
   29c98:	d133      	bne.n	29d02 <__sflush_r+0xca>
   29c9a:	f8d8 4000 	ldr.w	r4, [r8]
   29c9e:	2c1d      	cmp	r4, #29
   29ca0:	d94b      	bls.n	29d3a <__sflush_r+0x102>
   29ca2:	89ab      	ldrh	r3, [r5, #12]
   29ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29ca8:	81ab      	strh	r3, [r5, #12]
   29caa:	e01a      	b.n	29ce2 <__sflush_r+0xaa>
   29cac:	692f      	ldr	r7, [r5, #16]
   29cae:	b1bf      	cbz	r7, 29ce0 <__sflush_r+0xa8>
   29cb0:	b293      	uxth	r3, r2
   29cb2:	682e      	ldr	r6, [r5, #0]
   29cb4:	602f      	str	r7, [r5, #0]
   29cb6:	0799      	lsls	r1, r3, #30
   29cb8:	eba6 0607 	sub.w	r6, r6, r7
   29cbc:	bf0c      	ite	eq
   29cbe:	696b      	ldreq	r3, [r5, #20]
   29cc0:	2300      	movne	r3, #0
   29cc2:	60ab      	str	r3, [r5, #8]
   29cc4:	e00a      	b.n	29cdc <__sflush_r+0xa4>
   29cc6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   29cc8:	4633      	mov	r3, r6
   29cca:	463a      	mov	r2, r7
   29ccc:	69e9      	ldr	r1, [r5, #28]
   29cce:	4640      	mov	r0, r8
   29cd0:	47a0      	blx	r4
   29cd2:	1e04      	subs	r4, r0, #0
   29cd4:	eba6 0604 	sub.w	r6, r6, r4
   29cd8:	4427      	add	r7, r4
   29cda:	dd0a      	ble.n	29cf2 <__sflush_r+0xba>
   29cdc:	2e00      	cmp	r6, #0
   29cde:	dcf2      	bgt.n	29cc6 <__sflush_r+0x8e>
   29ce0:	2000      	movs	r0, #0
   29ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29ce6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   29ce8:	2b00      	cmp	r3, #0
   29cea:	dcb3      	bgt.n	29c54 <__sflush_r+0x1c>
   29cec:	e7f8      	b.n	29ce0 <__sflush_r+0xa8>
   29cee:	6d28      	ldr	r0, [r5, #80]	; 0x50
   29cf0:	e7c4      	b.n	29c7c <__sflush_r+0x44>
   29cf2:	89ab      	ldrh	r3, [r5, #12]
   29cf4:	f04f 30ff 	mov.w	r0, #4294967295
   29cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29cfc:	81ab      	strh	r3, [r5, #12]
   29cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29d02:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   29d06:	2100      	movs	r1, #0
   29d08:	692a      	ldr	r2, [r5, #16]
   29d0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   29d0e:	e9c5 2100 	strd	r2, r1, [r5]
   29d12:	04da      	lsls	r2, r3, #19
   29d14:	81ab      	strh	r3, [r5, #12]
   29d16:	d500      	bpl.n	29d1a <__sflush_r+0xe2>
   29d18:	6528      	str	r0, [r5, #80]	; 0x50
   29d1a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   29d1c:	f8c8 6000 	str.w	r6, [r8]
   29d20:	2900      	cmp	r1, #0
   29d22:	d0dd      	beq.n	29ce0 <__sflush_r+0xa8>
   29d24:	f105 0340 	add.w	r3, r5, #64	; 0x40
   29d28:	4299      	cmp	r1, r3
   29d2a:	d002      	beq.n	29d32 <__sflush_r+0xfa>
   29d2c:	4640      	mov	r0, r8
   29d2e:	f000 f993 	bl	2a058 <_free_r>
   29d32:	2000      	movs	r0, #0
   29d34:	6328      	str	r0, [r5, #48]	; 0x30
   29d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29d3a:	4a0f      	ldr	r2, [pc, #60]	; (29d78 <__sflush_r+0x140>)
   29d3c:	40e2      	lsrs	r2, r4
   29d3e:	43d2      	mvns	r2, r2
   29d40:	f012 0201 	ands.w	r2, r2, #1
   29d44:	d1ad      	bne.n	29ca2 <__sflush_r+0x6a>
   29d46:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   29d4a:	6929      	ldr	r1, [r5, #16]
   29d4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   29d50:	81ab      	strh	r3, [r5, #12]
   29d52:	04db      	lsls	r3, r3, #19
   29d54:	e9c5 1200 	strd	r1, r2, [r5]
   29d58:	d5df      	bpl.n	29d1a <__sflush_r+0xe2>
   29d5a:	2c00      	cmp	r4, #0
   29d5c:	d1dd      	bne.n	29d1a <__sflush_r+0xe2>
   29d5e:	e7db      	b.n	29d18 <__sflush_r+0xe0>
   29d60:	f8d8 3000 	ldr.w	r3, [r8]
   29d64:	2b00      	cmp	r3, #0
   29d66:	d087      	beq.n	29c78 <__sflush_r+0x40>
   29d68:	2b1d      	cmp	r3, #29
   29d6a:	d001      	beq.n	29d70 <__sflush_r+0x138>
   29d6c:	2b16      	cmp	r3, #22
   29d6e:	d198      	bne.n	29ca2 <__sflush_r+0x6a>
   29d70:	f8c8 6000 	str.w	r6, [r8]
   29d74:	e7b4      	b.n	29ce0 <__sflush_r+0xa8>
   29d76:	bf00      	nop
   29d78:	20400001 	.word	0x20400001

00029d7c <_fflush_r>:
   29d7c:	b538      	push	{r3, r4, r5, lr}
   29d7e:	460c      	mov	r4, r1
   29d80:	4605      	mov	r5, r0
   29d82:	b108      	cbz	r0, 29d88 <_fflush_r+0xc>
   29d84:	6b83      	ldr	r3, [r0, #56]	; 0x38
   29d86:	b1a3      	cbz	r3, 29db2 <_fflush_r+0x36>
   29d88:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   29d8c:	b1b8      	cbz	r0, 29dbe <_fflush_r+0x42>
   29d8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   29d90:	07db      	lsls	r3, r3, #31
   29d92:	d401      	bmi.n	29d98 <_fflush_r+0x1c>
   29d94:	0581      	lsls	r1, r0, #22
   29d96:	d515      	bpl.n	29dc4 <_fflush_r+0x48>
   29d98:	4628      	mov	r0, r5
   29d9a:	4621      	mov	r1, r4
   29d9c:	f7ff ff4c 	bl	29c38 <__sflush_r>
   29da0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   29da2:	4605      	mov	r5, r0
   29da4:	07da      	lsls	r2, r3, #31
   29da6:	d402      	bmi.n	29dae <_fflush_r+0x32>
   29da8:	89a3      	ldrh	r3, [r4, #12]
   29daa:	059b      	lsls	r3, r3, #22
   29dac:	d50e      	bpl.n	29dcc <_fflush_r+0x50>
   29dae:	4628      	mov	r0, r5
   29db0:	bd38      	pop	{r3, r4, r5, pc}
   29db2:	f000 f841 	bl	29e38 <__sinit>
   29db6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   29dba:	2800      	cmp	r0, #0
   29dbc:	d1e7      	bne.n	29d8e <_fflush_r+0x12>
   29dbe:	4605      	mov	r5, r0
   29dc0:	4628      	mov	r0, r5
   29dc2:	bd38      	pop	{r3, r4, r5, pc}
   29dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29dc6:	f000 ffed 	bl	2ada4 <__retarget_lock_acquire_recursive>
   29dca:	e7e5      	b.n	29d98 <_fflush_r+0x1c>
   29dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29dce:	f000 ffeb 	bl	2ada8 <__retarget_lock_release_recursive>
   29dd2:	4628      	mov	r0, r5
   29dd4:	bd38      	pop	{r3, r4, r5, pc}
   29dd6:	bf00      	nop

00029dd8 <std>:
   29dd8:	b538      	push	{r3, r4, r5, lr}
   29dda:	4604      	mov	r4, r0
   29ddc:	4613      	mov	r3, r2
   29dde:	460d      	mov	r5, r1
   29de0:	2100      	movs	r1, #0
   29de2:	2208      	movs	r2, #8
   29de4:	305c      	adds	r0, #92	; 0x5c
   29de6:	f820 5c50 	strh.w	r5, [r0, #-80]
   29dea:	81e3      	strh	r3, [r4, #14]
   29dec:	60a1      	str	r1, [r4, #8]
   29dee:	6661      	str	r1, [r4, #100]	; 0x64
   29df0:	61a1      	str	r1, [r4, #24]
   29df2:	4d0a      	ldr	r5, [pc, #40]	; (29e1c <std+0x44>)
   29df4:	e9c4 1100 	strd	r1, r1, [r4]
   29df8:	e9c4 1104 	strd	r1, r1, [r4, #16]
   29dfc:	f7fc fafc 	bl	263f8 <memset>
   29e00:	4b07      	ldr	r3, [pc, #28]	; (29e20 <std+0x48>)
   29e02:	4908      	ldr	r1, [pc, #32]	; (29e24 <std+0x4c>)
   29e04:	f104 0058 	add.w	r0, r4, #88	; 0x58
   29e08:	4a07      	ldr	r2, [pc, #28]	; (29e28 <std+0x50>)
   29e0a:	62e3      	str	r3, [r4, #44]	; 0x2c
   29e0c:	e9c4 4507 	strd	r4, r5, [r4, #28]
   29e10:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   29e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29e18:	f000 bfc0 	b.w	2ad9c <__retarget_lock_init_recursive>
   29e1c:	000269f9 	.word	0x000269f9
   29e20:	00026a85 	.word	0x00026a85
   29e24:	00026a21 	.word	0x00026a21
   29e28:	00026a61 	.word	0x00026a61

00029e2c <_cleanup_r>:
   29e2c:	4901      	ldr	r1, [pc, #4]	; (29e34 <_cleanup_r+0x8>)
   29e2e:	f000 bb8f 	b.w	2a550 <_fwalk_reent>
   29e32:	bf00      	nop
   29e34:	0002c2c5 	.word	0x0002c2c5

00029e38 <__sinit>:
   29e38:	b510      	push	{r4, lr}
   29e3a:	4604      	mov	r4, r0
   29e3c:	4814      	ldr	r0, [pc, #80]	; (29e90 <__sinit+0x58>)
   29e3e:	f000 ffb1 	bl	2ada4 <__retarget_lock_acquire_recursive>
   29e42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   29e44:	b9fa      	cbnz	r2, 29e86 <__sinit+0x4e>
   29e46:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   29e4a:	4812      	ldr	r0, [pc, #72]	; (29e94 <__sinit+0x5c>)
   29e4c:	2103      	movs	r1, #3
   29e4e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   29e52:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   29e56:	63e0      	str	r0, [r4, #60]	; 0x3c
   29e58:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
   29e5c:	2104      	movs	r1, #4
   29e5e:	6860      	ldr	r0, [r4, #4]
   29e60:	f7ff ffba 	bl	29dd8 <std>
   29e64:	68a0      	ldr	r0, [r4, #8]
   29e66:	2201      	movs	r2, #1
   29e68:	2109      	movs	r1, #9
   29e6a:	f7ff ffb5 	bl	29dd8 <std>
   29e6e:	68e0      	ldr	r0, [r4, #12]
   29e70:	2202      	movs	r2, #2
   29e72:	2112      	movs	r1, #18
   29e74:	f7ff ffb0 	bl	29dd8 <std>
   29e78:	2301      	movs	r3, #1
   29e7a:	4805      	ldr	r0, [pc, #20]	; (29e90 <__sinit+0x58>)
   29e7c:	63a3      	str	r3, [r4, #56]	; 0x38
   29e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29e82:	f000 bf91 	b.w	2ada8 <__retarget_lock_release_recursive>
   29e86:	4802      	ldr	r0, [pc, #8]	; (29e90 <__sinit+0x58>)
   29e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29e8c:	f000 bf8c 	b.w	2ada8 <__retarget_lock_release_recursive>
   29e90:	20026418 	.word	0x20026418
   29e94:	00029e2d 	.word	0x00029e2d

00029e98 <__sfp_lock_acquire>:
   29e98:	4801      	ldr	r0, [pc, #4]	; (29ea0 <__sfp_lock_acquire+0x8>)
   29e9a:	f000 bf83 	b.w	2ada4 <__retarget_lock_acquire_recursive>
   29e9e:	bf00      	nop
   29ea0:	2002642c 	.word	0x2002642c

00029ea4 <__sfp_lock_release>:
   29ea4:	4801      	ldr	r0, [pc, #4]	; (29eac <__sfp_lock_release+0x8>)
   29ea6:	f000 bf7f 	b.w	2ada8 <__retarget_lock_release_recursive>
   29eaa:	bf00      	nop
   29eac:	2002642c 	.word	0x2002642c

00029eb0 <__fputwc>:
   29eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29eb4:	b082      	sub	sp, #8
   29eb6:	4680      	mov	r8, r0
   29eb8:	4689      	mov	r9, r1
   29eba:	4614      	mov	r4, r2
   29ebc:	f000 ff64 	bl	2ad88 <__locale_mb_cur_max>
   29ec0:	2801      	cmp	r0, #1
   29ec2:	d103      	bne.n	29ecc <__fputwc+0x1c>
   29ec4:	f109 33ff 	add.w	r3, r9, #4294967295
   29ec8:	2bfe      	cmp	r3, #254	; 0xfe
   29eca:	d931      	bls.n	29f30 <__fputwc+0x80>
   29ecc:	464a      	mov	r2, r9
   29ece:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   29ed2:	a901      	add	r1, sp, #4
   29ed4:	4640      	mov	r0, r8
   29ed6:	f002 f999 	bl	2c20c <_wcrtomb_r>
   29eda:	1c42      	adds	r2, r0, #1
   29edc:	4606      	mov	r6, r0
   29ede:	d032      	beq.n	29f46 <__fputwc+0x96>
   29ee0:	b360      	cbz	r0, 29f3c <__fputwc+0x8c>
   29ee2:	f89d c004 	ldrb.w	ip, [sp, #4]
   29ee6:	2500      	movs	r5, #0
   29ee8:	f10d 0a04 	add.w	sl, sp, #4
   29eec:	e00c      	b.n	29f08 <__fputwc+0x58>
   29eee:	f1bc 0f0a 	cmp.w	ip, #10
   29ef2:	d014      	beq.n	29f1e <__fputwc+0x6e>
   29ef4:	6823      	ldr	r3, [r4, #0]
   29ef6:	1c5a      	adds	r2, r3, #1
   29ef8:	6022      	str	r2, [r4, #0]
   29efa:	f883 c000 	strb.w	ip, [r3]
   29efe:	3501      	adds	r5, #1
   29f00:	42b5      	cmp	r5, r6
   29f02:	d21b      	bcs.n	29f3c <__fputwc+0x8c>
   29f04:	f815 c00a 	ldrb.w	ip, [r5, sl]
   29f08:	68a3      	ldr	r3, [r4, #8]
   29f0a:	3b01      	subs	r3, #1
   29f0c:	2b00      	cmp	r3, #0
   29f0e:	60a3      	str	r3, [r4, #8]
   29f10:	daf0      	bge.n	29ef4 <__fputwc+0x44>
   29f12:	69a7      	ldr	r7, [r4, #24]
   29f14:	4661      	mov	r1, ip
   29f16:	4622      	mov	r2, r4
   29f18:	4640      	mov	r0, r8
   29f1a:	42bb      	cmp	r3, r7
   29f1c:	dae7      	bge.n	29eee <__fputwc+0x3e>
   29f1e:	f002 f91d 	bl	2c15c <__swbuf_r>
   29f22:	1c43      	adds	r3, r0, #1
   29f24:	d1eb      	bne.n	29efe <__fputwc+0x4e>
   29f26:	4606      	mov	r6, r0
   29f28:	4630      	mov	r0, r6
   29f2a:	b002      	add	sp, #8
   29f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29f30:	fa5f fc89 	uxtb.w	ip, r9
   29f34:	4606      	mov	r6, r0
   29f36:	f88d c004 	strb.w	ip, [sp, #4]
   29f3a:	e7d4      	b.n	29ee6 <__fputwc+0x36>
   29f3c:	464e      	mov	r6, r9
   29f3e:	4630      	mov	r0, r6
   29f40:	b002      	add	sp, #8
   29f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29f46:	89a3      	ldrh	r3, [r4, #12]
   29f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29f4c:	81a3      	strh	r3, [r4, #12]
   29f4e:	e7eb      	b.n	29f28 <__fputwc+0x78>

00029f50 <_fputwc_r>:
   29f50:	6e53      	ldr	r3, [r2, #100]	; 0x64
   29f52:	f013 0f01 	tst.w	r3, #1
   29f56:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   29f5a:	b530      	push	{r4, r5, lr}
   29f5c:	4614      	mov	r4, r2
   29f5e:	b083      	sub	sp, #12
   29f60:	4605      	mov	r5, r0
   29f62:	b29a      	uxth	r2, r3
   29f64:	d101      	bne.n	29f6a <_fputwc_r+0x1a>
   29f66:	0598      	lsls	r0, r3, #22
   29f68:	d51c      	bpl.n	29fa4 <_fputwc_r+0x54>
   29f6a:	0490      	lsls	r0, r2, #18
   29f6c:	d406      	bmi.n	29f7c <_fputwc_r+0x2c>
   29f6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   29f70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   29f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   29f78:	81a3      	strh	r3, [r4, #12]
   29f7a:	6662      	str	r2, [r4, #100]	; 0x64
   29f7c:	4628      	mov	r0, r5
   29f7e:	4622      	mov	r2, r4
   29f80:	f7ff ff96 	bl	29eb0 <__fputwc>
   29f84:	6e63      	ldr	r3, [r4, #100]	; 0x64
   29f86:	4605      	mov	r5, r0
   29f88:	07da      	lsls	r2, r3, #31
   29f8a:	d402      	bmi.n	29f92 <_fputwc_r+0x42>
   29f8c:	89a3      	ldrh	r3, [r4, #12]
   29f8e:	059b      	lsls	r3, r3, #22
   29f90:	d502      	bpl.n	29f98 <_fputwc_r+0x48>
   29f92:	4628      	mov	r0, r5
   29f94:	b003      	add	sp, #12
   29f96:	bd30      	pop	{r4, r5, pc}
   29f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29f9a:	f000 ff05 	bl	2ada8 <__retarget_lock_release_recursive>
   29f9e:	4628      	mov	r0, r5
   29fa0:	b003      	add	sp, #12
   29fa2:	bd30      	pop	{r4, r5, pc}
   29fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29fa6:	9101      	str	r1, [sp, #4]
   29fa8:	f000 fefc 	bl	2ada4 <__retarget_lock_acquire_recursive>
   29fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29fb0:	9901      	ldr	r1, [sp, #4]
   29fb2:	b29a      	uxth	r2, r3
   29fb4:	e7d9      	b.n	29f6a <_fputwc_r+0x1a>
   29fb6:	bf00      	nop

00029fb8 <_malloc_trim_r>:
   29fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29fba:	4f23      	ldr	r7, [pc, #140]	; (2a048 <_malloc_trim_r+0x90>)
   29fbc:	460c      	mov	r4, r1
   29fbe:	4606      	mov	r6, r0
   29fc0:	f7fc fa6a 	bl	26498 <__malloc_lock>
   29fc4:	68b9      	ldr	r1, [r7, #8]
   29fc6:	f640 73ef 	movw	r3, #4079	; 0xfef
   29fca:	4a20      	ldr	r2, [pc, #128]	; (2a04c <_malloc_trim_r+0x94>)
   29fcc:	684d      	ldr	r5, [r1, #4]
   29fce:	1b1b      	subs	r3, r3, r4
   29fd0:	f025 0503 	bic.w	r5, r5, #3
   29fd4:	442b      	add	r3, r5
   29fd6:	401a      	ands	r2, r3
   29fd8:	f5a2 5480 	sub.w	r4, r2, #4096	; 0x1000
   29fdc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   29fe0:	db07      	blt.n	29ff2 <_malloc_trim_r+0x3a>
   29fe2:	2100      	movs	r1, #0
   29fe4:	4630      	mov	r0, r6
   29fe6:	f7fc fc65 	bl	268b4 <_sbrk_r>
   29fea:	68bb      	ldr	r3, [r7, #8]
   29fec:	442b      	add	r3, r5
   29fee:	4298      	cmp	r0, r3
   29ff0:	d004      	beq.n	29ffc <_malloc_trim_r+0x44>
   29ff2:	4630      	mov	r0, r6
   29ff4:	f7fc fa56 	bl	264a4 <__malloc_unlock>
   29ff8:	2000      	movs	r0, #0
   29ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29ffc:	4261      	negs	r1, r4
   29ffe:	4630      	mov	r0, r6
   2a000:	f7fc fc58 	bl	268b4 <_sbrk_r>
   2a004:	3001      	adds	r0, #1
   2a006:	d00d      	beq.n	2a024 <_malloc_trim_r+0x6c>
   2a008:	4b11      	ldr	r3, [pc, #68]	; (2a050 <_malloc_trim_r+0x98>)
   2a00a:	1b2d      	subs	r5, r5, r4
   2a00c:	68b9      	ldr	r1, [r7, #8]
   2a00e:	4630      	mov	r0, r6
   2a010:	681a      	ldr	r2, [r3, #0]
   2a012:	f045 0501 	orr.w	r5, r5, #1
   2a016:	1b12      	subs	r2, r2, r4
   2a018:	604d      	str	r5, [r1, #4]
   2a01a:	601a      	str	r2, [r3, #0]
   2a01c:	f7fc fa42 	bl	264a4 <__malloc_unlock>
   2a020:	2001      	movs	r0, #1
   2a022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a024:	2100      	movs	r1, #0
   2a026:	4630      	mov	r0, r6
   2a028:	f7fc fc44 	bl	268b4 <_sbrk_r>
   2a02c:	68ba      	ldr	r2, [r7, #8]
   2a02e:	1a83      	subs	r3, r0, r2
   2a030:	2b0f      	cmp	r3, #15
   2a032:	ddde      	ble.n	29ff2 <_malloc_trim_r+0x3a>
   2a034:	4c07      	ldr	r4, [pc, #28]	; (2a054 <_malloc_trim_r+0x9c>)
   2a036:	f043 0301 	orr.w	r3, r3, #1
   2a03a:	4905      	ldr	r1, [pc, #20]	; (2a050 <_malloc_trim_r+0x98>)
   2a03c:	6824      	ldr	r4, [r4, #0]
   2a03e:	6053      	str	r3, [r2, #4]
   2a040:	1b00      	subs	r0, r0, r4
   2a042:	6008      	str	r0, [r1, #0]
   2a044:	e7d5      	b.n	29ff2 <_malloc_trim_r+0x3a>
   2a046:	bf00      	nop
   2a048:	200204dc 	.word	0x200204dc
   2a04c:	fffff000 	.word	0xfffff000
   2a050:	20024278 	.word	0x20024278
   2a054:	200208e4 	.word	0x200208e4

0002a058 <_free_r>:
   2a058:	2900      	cmp	r1, #0
   2a05a:	d05f      	beq.n	2a11c <_free_r+0xc4>
   2a05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a05e:	460c      	mov	r4, r1
   2a060:	4606      	mov	r6, r0
   2a062:	f7fc fa19 	bl	26498 <__malloc_lock>
   2a066:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 2a260 <_free_r+0x208>
   2a06a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2a06e:	f1a4 0008 	sub.w	r0, r4, #8
   2a072:	f8dc 7008 	ldr.w	r7, [ip, #8]
   2a076:	f023 0101 	bic.w	r1, r3, #1
   2a07a:	1842      	adds	r2, r0, r1
   2a07c:	6855      	ldr	r5, [r2, #4]
   2a07e:	4297      	cmp	r7, r2
   2a080:	f025 0503 	bic.w	r5, r5, #3
   2a084:	f000 8089 	beq.w	2a19a <_free_r+0x142>
   2a088:	07df      	lsls	r7, r3, #31
   2a08a:	6055      	str	r5, [r2, #4]
   2a08c:	d434      	bmi.n	2a0f8 <_free_r+0xa0>
   2a08e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2a092:	f10c 0408 	add.w	r4, ip, #8
   2a096:	1ac0      	subs	r0, r0, r3
   2a098:	4419      	add	r1, r3
   2a09a:	6883      	ldr	r3, [r0, #8]
   2a09c:	42a3      	cmp	r3, r4
   2a09e:	d06a      	beq.n	2a176 <_free_r+0x11e>
   2a0a0:	1957      	adds	r7, r2, r5
   2a0a2:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   2a0a6:	687f      	ldr	r7, [r7, #4]
   2a0a8:	f8c3 e00c 	str.w	lr, [r3, #12]
   2a0ac:	f8ce 3008 	str.w	r3, [lr, #8]
   2a0b0:	07fb      	lsls	r3, r7, #31
   2a0b2:	f140 8097 	bpl.w	2a1e4 <_free_r+0x18c>
   2a0b6:	f041 0301 	orr.w	r3, r1, #1
   2a0ba:	6043      	str	r3, [r0, #4]
   2a0bc:	6011      	str	r1, [r2, #0]
   2a0be:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2a0c2:	d234      	bcs.n	2a12e <_free_r+0xd6>
   2a0c4:	2201      	movs	r2, #1
   2a0c6:	08cb      	lsrs	r3, r1, #3
   2a0c8:	0949      	lsrs	r1, r1, #5
   2a0ca:	f8dc 4004 	ldr.w	r4, [ip, #4]
   2a0ce:	4413      	add	r3, r2
   2a0d0:	fa02 f101 	lsl.w	r1, r2, r1
   2a0d4:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   2a0d8:	4321      	orrs	r1, r4
   2a0da:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   2a0de:	3a08      	subs	r2, #8
   2a0e0:	f8cc 1004 	str.w	r1, [ip, #4]
   2a0e4:	e9c0 4202 	strd	r4, r2, [r0, #8]
   2a0e8:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   2a0ec:	60e0      	str	r0, [r4, #12]
   2a0ee:	4630      	mov	r0, r6
   2a0f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2a0f4:	f7fc b9d6 	b.w	264a4 <__malloc_unlock>
   2a0f8:	1953      	adds	r3, r2, r5
   2a0fa:	685b      	ldr	r3, [r3, #4]
   2a0fc:	07df      	lsls	r7, r3, #31
   2a0fe:	d40e      	bmi.n	2a11e <_free_r+0xc6>
   2a100:	4429      	add	r1, r5
   2a102:	f10c 0408 	add.w	r4, ip, #8
   2a106:	6893      	ldr	r3, [r2, #8]
   2a108:	42a3      	cmp	r3, r4
   2a10a:	d073      	beq.n	2a1f4 <_free_r+0x19c>
   2a10c:	68d4      	ldr	r4, [r2, #12]
   2a10e:	f041 0201 	orr.w	r2, r1, #1
   2a112:	60dc      	str	r4, [r3, #12]
   2a114:	60a3      	str	r3, [r4, #8]
   2a116:	6042      	str	r2, [r0, #4]
   2a118:	5041      	str	r1, [r0, r1]
   2a11a:	e7d0      	b.n	2a0be <_free_r+0x66>
   2a11c:	4770      	bx	lr
   2a11e:	f041 0301 	orr.w	r3, r1, #1
   2a122:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2a126:	f844 3c04 	str.w	r3, [r4, #-4]
   2a12a:	6011      	str	r1, [r2, #0]
   2a12c:	d3ca      	bcc.n	2a0c4 <_free_r+0x6c>
   2a12e:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   2a132:	ea4f 2351 	mov.w	r3, r1, lsr #9
   2a136:	d24a      	bcs.n	2a1ce <_free_r+0x176>
   2a138:	098b      	lsrs	r3, r1, #6
   2a13a:	f103 0439 	add.w	r4, r3, #57	; 0x39
   2a13e:	f103 0238 	add.w	r2, r3, #56	; 0x38
   2a142:	00e3      	lsls	r3, r4, #3
   2a144:	eb0c 0403 	add.w	r4, ip, r3
   2a148:	f85c 3003 	ldr.w	r3, [ip, r3]
   2a14c:	3c08      	subs	r4, #8
   2a14e:	429c      	cmp	r4, r3
   2a150:	d059      	beq.n	2a206 <_free_r+0x1ae>
   2a152:	685a      	ldr	r2, [r3, #4]
   2a154:	f022 0203 	bic.w	r2, r2, #3
   2a158:	428a      	cmp	r2, r1
   2a15a:	d902      	bls.n	2a162 <_free_r+0x10a>
   2a15c:	689b      	ldr	r3, [r3, #8]
   2a15e:	429c      	cmp	r4, r3
   2a160:	d1f7      	bne.n	2a152 <_free_r+0xfa>
   2a162:	68dc      	ldr	r4, [r3, #12]
   2a164:	e9c0 3402 	strd	r3, r4, [r0, #8]
   2a168:	60a0      	str	r0, [r4, #8]
   2a16a:	60d8      	str	r0, [r3, #12]
   2a16c:	4630      	mov	r0, r6
   2a16e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2a172:	f7fc b997 	b.w	264a4 <__malloc_unlock>
   2a176:	1953      	adds	r3, r2, r5
   2a178:	685b      	ldr	r3, [r3, #4]
   2a17a:	07db      	lsls	r3, r3, #31
   2a17c:	d466      	bmi.n	2a24c <_free_r+0x1f4>
   2a17e:	4429      	add	r1, r5
   2a180:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   2a184:	f041 0401 	orr.w	r4, r1, #1
   2a188:	60d3      	str	r3, [r2, #12]
   2a18a:	609a      	str	r2, [r3, #8]
   2a18c:	6044      	str	r4, [r0, #4]
   2a18e:	5041      	str	r1, [r0, r1]
   2a190:	4630      	mov	r0, r6
   2a192:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2a196:	f7fc b985 	b.w	264a4 <__malloc_unlock>
   2a19a:	07db      	lsls	r3, r3, #31
   2a19c:	4429      	add	r1, r5
   2a19e:	d407      	bmi.n	2a1b0 <_free_r+0x158>
   2a1a0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2a1a4:	1ac0      	subs	r0, r0, r3
   2a1a6:	4419      	add	r1, r3
   2a1a8:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   2a1ac:	60d3      	str	r3, [r2, #12]
   2a1ae:	609a      	str	r2, [r3, #8]
   2a1b0:	4b29      	ldr	r3, [pc, #164]	; (2a258 <_free_r+0x200>)
   2a1b2:	f041 0201 	orr.w	r2, r1, #1
   2a1b6:	681b      	ldr	r3, [r3, #0]
   2a1b8:	6042      	str	r2, [r0, #4]
   2a1ba:	428b      	cmp	r3, r1
   2a1bc:	f8cc 0008 	str.w	r0, [ip, #8]
   2a1c0:	d895      	bhi.n	2a0ee <_free_r+0x96>
   2a1c2:	4b26      	ldr	r3, [pc, #152]	; (2a25c <_free_r+0x204>)
   2a1c4:	4630      	mov	r0, r6
   2a1c6:	6819      	ldr	r1, [r3, #0]
   2a1c8:	f7ff fef6 	bl	29fb8 <_malloc_trim_r>
   2a1cc:	e78f      	b.n	2a0ee <_free_r+0x96>
   2a1ce:	2b14      	cmp	r3, #20
   2a1d0:	d90a      	bls.n	2a1e8 <_free_r+0x190>
   2a1d2:	2b54      	cmp	r3, #84	; 0x54
   2a1d4:	d821      	bhi.n	2a21a <_free_r+0x1c2>
   2a1d6:	0b0b      	lsrs	r3, r1, #12
   2a1d8:	f103 046f 	add.w	r4, r3, #111	; 0x6f
   2a1dc:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   2a1e0:	00e3      	lsls	r3, r4, #3
   2a1e2:	e7af      	b.n	2a144 <_free_r+0xec>
   2a1e4:	4429      	add	r1, r5
   2a1e6:	e78e      	b.n	2a106 <_free_r+0xae>
   2a1e8:	f103 045c 	add.w	r4, r3, #92	; 0x5c
   2a1ec:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   2a1f0:	00e3      	lsls	r3, r4, #3
   2a1f2:	e7a7      	b.n	2a144 <_free_r+0xec>
   2a1f4:	f041 0301 	orr.w	r3, r1, #1
   2a1f8:	e9cc 0004 	strd	r0, r0, [ip, #16]
   2a1fc:	e9c0 4402 	strd	r4, r4, [r0, #8]
   2a200:	6043      	str	r3, [r0, #4]
   2a202:	5041      	str	r1, [r0, r1]
   2a204:	e773      	b.n	2a0ee <_free_r+0x96>
   2a206:	1092      	asrs	r2, r2, #2
   2a208:	2501      	movs	r5, #1
   2a20a:	f8dc 1004 	ldr.w	r1, [ip, #4]
   2a20e:	fa05 f202 	lsl.w	r2, r5, r2
   2a212:	430a      	orrs	r2, r1
   2a214:	f8cc 2004 	str.w	r2, [ip, #4]
   2a218:	e7a4      	b.n	2a164 <_free_r+0x10c>
   2a21a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   2a21e:	d806      	bhi.n	2a22e <_free_r+0x1d6>
   2a220:	0bcb      	lsrs	r3, r1, #15
   2a222:	f103 0478 	add.w	r4, r3, #120	; 0x78
   2a226:	f103 0277 	add.w	r2, r3, #119	; 0x77
   2a22a:	00e3      	lsls	r3, r4, #3
   2a22c:	e78a      	b.n	2a144 <_free_r+0xec>
   2a22e:	f240 5254 	movw	r2, #1364	; 0x554
   2a232:	4293      	cmp	r3, r2
   2a234:	d806      	bhi.n	2a244 <_free_r+0x1ec>
   2a236:	0c8b      	lsrs	r3, r1, #18
   2a238:	f103 047d 	add.w	r4, r3, #125	; 0x7d
   2a23c:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   2a240:	00e3      	lsls	r3, r4, #3
   2a242:	e77f      	b.n	2a144 <_free_r+0xec>
   2a244:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   2a248:	227e      	movs	r2, #126	; 0x7e
   2a24a:	e77b      	b.n	2a144 <_free_r+0xec>
   2a24c:	f041 0301 	orr.w	r3, r1, #1
   2a250:	6043      	str	r3, [r0, #4]
   2a252:	6011      	str	r1, [r2, #0]
   2a254:	e74b      	b.n	2a0ee <_free_r+0x96>
   2a256:	bf00      	nop
   2a258:	200208e8 	.word	0x200208e8
   2a25c:	200242a8 	.word	0x200242a8
   2a260:	200204dc 	.word	0x200204dc

0002a264 <__sfvwrite_r>:
   2a264:	6893      	ldr	r3, [r2, #8]
   2a266:	2b00      	cmp	r3, #0
   2a268:	f000 808d 	beq.w	2a386 <__sfvwrite_r+0x122>
   2a26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a270:	4690      	mov	r8, r2
   2a272:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2a276:	460c      	mov	r4, r1
   2a278:	b083      	sub	sp, #12
   2a27a:	0711      	lsls	r1, r2, #28
   2a27c:	4681      	mov	r9, r0
   2a27e:	b293      	uxth	r3, r2
   2a280:	d525      	bpl.n	2a2ce <__sfvwrite_r+0x6a>
   2a282:	6922      	ldr	r2, [r4, #16]
   2a284:	b31a      	cbz	r2, 2a2ce <__sfvwrite_r+0x6a>
   2a286:	f013 0702 	ands.w	r7, r3, #2
   2a28a:	f8d8 5000 	ldr.w	r5, [r8]
   2a28e:	d02d      	beq.n	2a2ec <__sfvwrite_r+0x88>
   2a290:	2600      	movs	r6, #0
   2a292:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 2a54c <__sfvwrite_r+0x2e8>
   2a296:	46aa      	mov	sl, r5
   2a298:	4637      	mov	r7, r6
   2a29a:	455f      	cmp	r7, fp
   2a29c:	463b      	mov	r3, r7
   2a29e:	4632      	mov	r2, r6
   2a2a0:	4648      	mov	r0, r9
   2a2a2:	bf28      	it	cs
   2a2a4:	465b      	movcs	r3, fp
   2a2a6:	2f00      	cmp	r7, #0
   2a2a8:	d052      	beq.n	2a350 <__sfvwrite_r+0xec>
   2a2aa:	69e1      	ldr	r1, [r4, #28]
   2a2ac:	6a65      	ldr	r5, [r4, #36]	; 0x24
   2a2ae:	47a8      	blx	r5
   2a2b0:	2800      	cmp	r0, #0
   2a2b2:	dd5e      	ble.n	2a372 <__sfvwrite_r+0x10e>
   2a2b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2a2b8:	4406      	add	r6, r0
   2a2ba:	1a3f      	subs	r7, r7, r0
   2a2bc:	1a18      	subs	r0, r3, r0
   2a2be:	f8c8 0008 	str.w	r0, [r8, #8]
   2a2c2:	2800      	cmp	r0, #0
   2a2c4:	d1e9      	bne.n	2a29a <__sfvwrite_r+0x36>
   2a2c6:	2000      	movs	r0, #0
   2a2c8:	b003      	add	sp, #12
   2a2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a2ce:	4621      	mov	r1, r4
   2a2d0:	4648      	mov	r0, r9
   2a2d2:	f7ff fb95 	bl	29a00 <__swsetup_r>
   2a2d6:	2800      	cmp	r0, #0
   2a2d8:	f040 8135 	bne.w	2a546 <__sfvwrite_r+0x2e2>
   2a2dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2a2e0:	f8d8 5000 	ldr.w	r5, [r8]
   2a2e4:	b293      	uxth	r3, r2
   2a2e6:	f013 0702 	ands.w	r7, r3, #2
   2a2ea:	d1d1      	bne.n	2a290 <__sfvwrite_r+0x2c>
   2a2ec:	f013 0a01 	ands.w	sl, r3, #1
   2a2f0:	d14b      	bne.n	2a38a <__sfvwrite_r+0x126>
   2a2f2:	4656      	mov	r6, sl
   2a2f4:	b346      	cbz	r6, 2a348 <__sfvwrite_r+0xe4>
   2a2f6:	059a      	lsls	r2, r3, #22
   2a2f8:	f8d4 b008 	ldr.w	fp, [r4, #8]
   2a2fc:	f140 8090 	bpl.w	2a420 <__sfvwrite_r+0x1bc>
   2a300:	45b3      	cmp	fp, r6
   2a302:	465a      	mov	r2, fp
   2a304:	f200 80bc 	bhi.w	2a480 <__sfvwrite_r+0x21c>
   2a308:	f413 6f90 	tst.w	r3, #1152	; 0x480
   2a30c:	f040 80d0 	bne.w	2a4b0 <__sfvwrite_r+0x24c>
   2a310:	6820      	ldr	r0, [r4, #0]
   2a312:	4651      	mov	r1, sl
   2a314:	9200      	str	r2, [sp, #0]
   2a316:	f000 fe13 	bl	2af40 <memmove>
   2a31a:	68a1      	ldr	r1, [r4, #8]
   2a31c:	6823      	ldr	r3, [r4, #0]
   2a31e:	4637      	mov	r7, r6
   2a320:	9a00      	ldr	r2, [sp, #0]
   2a322:	eba1 010b 	sub.w	r1, r1, fp
   2a326:	2600      	movs	r6, #0
   2a328:	4413      	add	r3, r2
   2a32a:	60a1      	str	r1, [r4, #8]
   2a32c:	6023      	str	r3, [r4, #0]
   2a32e:	f8d8 0008 	ldr.w	r0, [r8, #8]
   2a332:	44ba      	add	sl, r7
   2a334:	1bc7      	subs	r7, r0, r7
   2a336:	f8c8 7008 	str.w	r7, [r8, #8]
   2a33a:	2f00      	cmp	r7, #0
   2a33c:	d0c3      	beq.n	2a2c6 <__sfvwrite_r+0x62>
   2a33e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a342:	b29b      	uxth	r3, r3
   2a344:	2e00      	cmp	r6, #0
   2a346:	d1d6      	bne.n	2a2f6 <__sfvwrite_r+0x92>
   2a348:	e9d5 a600 	ldrd	sl, r6, [r5]
   2a34c:	3508      	adds	r5, #8
   2a34e:	e7d1      	b.n	2a2f4 <__sfvwrite_r+0x90>
   2a350:	e9da 6700 	ldrd	r6, r7, [sl]
   2a354:	f10a 0a08 	add.w	sl, sl, #8
   2a358:	e79f      	b.n	2a29a <__sfvwrite_r+0x36>
   2a35a:	4629      	mov	r1, r5
   2a35c:	465a      	mov	r2, fp
   2a35e:	f000 fdef 	bl	2af40 <memmove>
   2a362:	6823      	ldr	r3, [r4, #0]
   2a364:	4621      	mov	r1, r4
   2a366:	4648      	mov	r0, r9
   2a368:	445b      	add	r3, fp
   2a36a:	6023      	str	r3, [r4, #0]
   2a36c:	f7ff fd06 	bl	29d7c <_fflush_r>
   2a370:	b358      	cbz	r0, 2a3ca <__sfvwrite_r+0x166>
   2a372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2a37a:	f04f 30ff 	mov.w	r0, #4294967295
   2a37e:	81a3      	strh	r3, [r4, #12]
   2a380:	b003      	add	sp, #12
   2a382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a386:	2000      	movs	r0, #0
   2a388:	4770      	bx	lr
   2a38a:	463e      	mov	r6, r7
   2a38c:	46aa      	mov	sl, r5
   2a38e:	4638      	mov	r0, r7
   2a390:	463d      	mov	r5, r7
   2a392:	9700      	str	r7, [sp, #0]
   2a394:	b36e      	cbz	r6, 2a3f2 <__sfvwrite_r+0x18e>
   2a396:	2800      	cmp	r0, #0
   2a398:	d035      	beq.n	2a406 <__sfvwrite_r+0x1a2>
   2a39a:	9a00      	ldr	r2, [sp, #0]
   2a39c:	42b2      	cmp	r2, r6
   2a39e:	6820      	ldr	r0, [r4, #0]
   2a3a0:	6921      	ldr	r1, [r4, #16]
   2a3a2:	6963      	ldr	r3, [r4, #20]
   2a3a4:	bf28      	it	cs
   2a3a6:	4632      	movcs	r2, r6
   2a3a8:	68a7      	ldr	r7, [r4, #8]
   2a3aa:	4288      	cmp	r0, r1
   2a3ac:	eb03 0b07 	add.w	fp, r3, r7
   2a3b0:	d901      	bls.n	2a3b6 <__sfvwrite_r+0x152>
   2a3b2:	455a      	cmp	r2, fp
   2a3b4:	dcd1      	bgt.n	2a35a <__sfvwrite_r+0xf6>
   2a3b6:	4293      	cmp	r3, r2
   2a3b8:	dc6d      	bgt.n	2a496 <__sfvwrite_r+0x232>
   2a3ba:	462a      	mov	r2, r5
   2a3bc:	69e1      	ldr	r1, [r4, #28]
   2a3be:	4648      	mov	r0, r9
   2a3c0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   2a3c2:	47b8      	blx	r7
   2a3c4:	f1b0 0b00 	subs.w	fp, r0, #0
   2a3c8:	ddd3      	ble.n	2a372 <__sfvwrite_r+0x10e>
   2a3ca:	9b00      	ldr	r3, [sp, #0]
   2a3cc:	ebb3 030b 	subs.w	r3, r3, fp
   2a3d0:	9300      	str	r3, [sp, #0]
   2a3d2:	d059      	beq.n	2a488 <__sfvwrite_r+0x224>
   2a3d4:	2001      	movs	r0, #1
   2a3d6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2a3da:	445d      	add	r5, fp
   2a3dc:	eba6 060b 	sub.w	r6, r6, fp
   2a3e0:	eba2 020b 	sub.w	r2, r2, fp
   2a3e4:	f8c8 2008 	str.w	r2, [r8, #8]
   2a3e8:	2a00      	cmp	r2, #0
   2a3ea:	f43f af6c 	beq.w	2a2c6 <__sfvwrite_r+0x62>
   2a3ee:	2e00      	cmp	r6, #0
   2a3f0:	d1d1      	bne.n	2a396 <__sfvwrite_r+0x132>
   2a3f2:	f10a 0308 	add.w	r3, sl, #8
   2a3f6:	f853 6c04 	ldr.w	r6, [r3, #-4]
   2a3fa:	469a      	mov	sl, r3
   2a3fc:	f853 5c08 	ldr.w	r5, [r3, #-8]
   2a400:	3308      	adds	r3, #8
   2a402:	2e00      	cmp	r6, #0
   2a404:	d0f7      	beq.n	2a3f6 <__sfvwrite_r+0x192>
   2a406:	4632      	mov	r2, r6
   2a408:	210a      	movs	r1, #10
   2a40a:	4628      	mov	r0, r5
   2a40c:	f7fb ff88 	bl	26320 <memchr>
   2a410:	2800      	cmp	r0, #0
   2a412:	f000 808f 	beq.w	2a534 <__sfvwrite_r+0x2d0>
   2a416:	3001      	adds	r0, #1
   2a418:	1b43      	subs	r3, r0, r5
   2a41a:	461a      	mov	r2, r3
   2a41c:	9300      	str	r3, [sp, #0]
   2a41e:	e7bd      	b.n	2a39c <__sfvwrite_r+0x138>
   2a420:	6820      	ldr	r0, [r4, #0]
   2a422:	6923      	ldr	r3, [r4, #16]
   2a424:	4298      	cmp	r0, r3
   2a426:	d814      	bhi.n	2a452 <__sfvwrite_r+0x1ee>
   2a428:	6963      	ldr	r3, [r4, #20]
   2a42a:	42b3      	cmp	r3, r6
   2a42c:	d811      	bhi.n	2a452 <__sfvwrite_r+0x1ee>
   2a42e:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   2a432:	6a67      	ldr	r7, [r4, #36]	; 0x24
   2a434:	4652      	mov	r2, sl
   2a436:	69e1      	ldr	r1, [r4, #28]
   2a438:	45b4      	cmp	ip, r6
   2a43a:	4648      	mov	r0, r9
   2a43c:	bf28      	it	cs
   2a43e:	46b4      	movcs	ip, r6
   2a440:	fb9c fcf3 	sdiv	ip, ip, r3
   2a444:	fb03 f30c 	mul.w	r3, r3, ip
   2a448:	47b8      	blx	r7
   2a44a:	1e07      	subs	r7, r0, #0
   2a44c:	dd91      	ble.n	2a372 <__sfvwrite_r+0x10e>
   2a44e:	1bf6      	subs	r6, r6, r7
   2a450:	e76d      	b.n	2a32e <__sfvwrite_r+0xca>
   2a452:	45b3      	cmp	fp, r6
   2a454:	465f      	mov	r7, fp
   2a456:	4651      	mov	r1, sl
   2a458:	bf28      	it	cs
   2a45a:	4637      	movcs	r7, r6
   2a45c:	463a      	mov	r2, r7
   2a45e:	f000 fd6f 	bl	2af40 <memmove>
   2a462:	68a3      	ldr	r3, [r4, #8]
   2a464:	6822      	ldr	r2, [r4, #0]
   2a466:	1bdb      	subs	r3, r3, r7
   2a468:	443a      	add	r2, r7
   2a46a:	60a3      	str	r3, [r4, #8]
   2a46c:	6022      	str	r2, [r4, #0]
   2a46e:	2b00      	cmp	r3, #0
   2a470:	d1ed      	bne.n	2a44e <__sfvwrite_r+0x1ea>
   2a472:	4621      	mov	r1, r4
   2a474:	4648      	mov	r0, r9
   2a476:	f7ff fc81 	bl	29d7c <_fflush_r>
   2a47a:	2800      	cmp	r0, #0
   2a47c:	d0e7      	beq.n	2a44e <__sfvwrite_r+0x1ea>
   2a47e:	e778      	b.n	2a372 <__sfvwrite_r+0x10e>
   2a480:	46b3      	mov	fp, r6
   2a482:	6820      	ldr	r0, [r4, #0]
   2a484:	4632      	mov	r2, r6
   2a486:	e744      	b.n	2a312 <__sfvwrite_r+0xae>
   2a488:	4621      	mov	r1, r4
   2a48a:	4648      	mov	r0, r9
   2a48c:	f7ff fc76 	bl	29d7c <_fflush_r>
   2a490:	2800      	cmp	r0, #0
   2a492:	d0a0      	beq.n	2a3d6 <__sfvwrite_r+0x172>
   2a494:	e76d      	b.n	2a372 <__sfvwrite_r+0x10e>
   2a496:	4629      	mov	r1, r5
   2a498:	4693      	mov	fp, r2
   2a49a:	9201      	str	r2, [sp, #4]
   2a49c:	f000 fd50 	bl	2af40 <memmove>
   2a4a0:	68a1      	ldr	r1, [r4, #8]
   2a4a2:	6823      	ldr	r3, [r4, #0]
   2a4a4:	9a01      	ldr	r2, [sp, #4]
   2a4a6:	1a89      	subs	r1, r1, r2
   2a4a8:	441a      	add	r2, r3
   2a4aa:	60a1      	str	r1, [r4, #8]
   2a4ac:	6022      	str	r2, [r4, #0]
   2a4ae:	e78c      	b.n	2a3ca <__sfvwrite_r+0x166>
   2a4b0:	6822      	ldr	r2, [r4, #0]
   2a4b2:	6921      	ldr	r1, [r4, #16]
   2a4b4:	6967      	ldr	r7, [r4, #20]
   2a4b6:	eba2 0b01 	sub.w	fp, r2, r1
   2a4ba:	eb17 0747 	adds.w	r7, r7, r7, lsl #1
   2a4be:	f10b 0001 	add.w	r0, fp, #1
   2a4c2:	bf48      	it	mi
   2a4c4:	3701      	addmi	r7, #1
   2a4c6:	4430      	add	r0, r6
   2a4c8:	107f      	asrs	r7, r7, #1
   2a4ca:	42b8      	cmp	r0, r7
   2a4cc:	463a      	mov	r2, r7
   2a4ce:	d901      	bls.n	2a4d4 <__sfvwrite_r+0x270>
   2a4d0:	4607      	mov	r7, r0
   2a4d2:	4602      	mov	r2, r0
   2a4d4:	055b      	lsls	r3, r3, #21
   2a4d6:	d51b      	bpl.n	2a510 <__sfvwrite_r+0x2ac>
   2a4d8:	4611      	mov	r1, r2
   2a4da:	4648      	mov	r0, r9
   2a4dc:	f7fb fc52 	bl	25d84 <_malloc_r>
   2a4e0:	b358      	cbz	r0, 2a53a <__sfvwrite_r+0x2d6>
   2a4e2:	465a      	mov	r2, fp
   2a4e4:	6921      	ldr	r1, [r4, #16]
   2a4e6:	9000      	str	r0, [sp, #0]
   2a4e8:	f7e2 fb30 	bl	cb4c <memcpy>
   2a4ec:	89a2      	ldrh	r2, [r4, #12]
   2a4ee:	9b00      	ldr	r3, [sp, #0]
   2a4f0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2a4f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2a4f8:	81a2      	strh	r2, [r4, #12]
   2a4fa:	eba7 020b 	sub.w	r2, r7, fp
   2a4fe:	eb03 000b 	add.w	r0, r3, fp
   2a502:	6123      	str	r3, [r4, #16]
   2a504:	46b3      	mov	fp, r6
   2a506:	60a2      	str	r2, [r4, #8]
   2a508:	4632      	mov	r2, r6
   2a50a:	6020      	str	r0, [r4, #0]
   2a50c:	6167      	str	r7, [r4, #20]
   2a50e:	e700      	b.n	2a312 <__sfvwrite_r+0xae>
   2a510:	4648      	mov	r0, r9
   2a512:	f7fb ffd5 	bl	264c0 <_realloc_r>
   2a516:	4603      	mov	r3, r0
   2a518:	2800      	cmp	r0, #0
   2a51a:	d1ee      	bne.n	2a4fa <__sfvwrite_r+0x296>
   2a51c:	6921      	ldr	r1, [r4, #16]
   2a51e:	4648      	mov	r0, r9
   2a520:	f7ff fd9a 	bl	2a058 <_free_r>
   2a524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a528:	220c      	movs	r2, #12
   2a52a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   2a52e:	f8c9 2000 	str.w	r2, [r9]
   2a532:	e720      	b.n	2a376 <__sfvwrite_r+0x112>
   2a534:	1c72      	adds	r2, r6, #1
   2a536:	9200      	str	r2, [sp, #0]
   2a538:	e730      	b.n	2a39c <__sfvwrite_r+0x138>
   2a53a:	220c      	movs	r2, #12
   2a53c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2a540:	f8c9 2000 	str.w	r2, [r9]
   2a544:	e717      	b.n	2a376 <__sfvwrite_r+0x112>
   2a546:	f04f 30ff 	mov.w	r0, #4294967295
   2a54a:	e6bd      	b.n	2a2c8 <__sfvwrite_r+0x64>
   2a54c:	7ffffc00 	.word	0x7ffffc00

0002a550 <_fwalk_reent>:
   2a550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a554:	2600      	movs	r6, #0
   2a556:	4681      	mov	r9, r0
   2a558:	4688      	mov	r8, r1
   2a55a:	f500 7738 	add.w	r7, r0, #736	; 0x2e0
   2a55e:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
   2a562:	3d01      	subs	r5, #1
   2a564:	d40f      	bmi.n	2a586 <_fwalk_reent+0x36>
   2a566:	89a3      	ldrh	r3, [r4, #12]
   2a568:	3d01      	subs	r5, #1
   2a56a:	2b01      	cmp	r3, #1
   2a56c:	d907      	bls.n	2a57e <_fwalk_reent+0x2e>
   2a56e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   2a572:	4621      	mov	r1, r4
   2a574:	4648      	mov	r0, r9
   2a576:	3301      	adds	r3, #1
   2a578:	d001      	beq.n	2a57e <_fwalk_reent+0x2e>
   2a57a:	47c0      	blx	r8
   2a57c:	4306      	orrs	r6, r0
   2a57e:	1c6b      	adds	r3, r5, #1
   2a580:	f104 0468 	add.w	r4, r4, #104	; 0x68
   2a584:	d1ef      	bne.n	2a566 <_fwalk_reent+0x16>
   2a586:	683f      	ldr	r7, [r7, #0]
   2a588:	2f00      	cmp	r7, #0
   2a58a:	d1e8      	bne.n	2a55e <_fwalk_reent+0xe>
   2a58c:	4630      	mov	r0, r6
   2a58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a592:	bf00      	nop

0002a594 <rshift>:
   2a594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a598:	6906      	ldr	r6, [r0, #16]
   2a59a:	ebb6 1f61 	cmp.w	r6, r1, asr #5
   2a59e:	dd2d      	ble.n	2a5fc <rshift+0x68>
   2a5a0:	f100 0414 	add.w	r4, r0, #20
   2a5a4:	ea4f 1c61 	mov.w	ip, r1, asr #5
   2a5a8:	f011 051f 	ands.w	r5, r1, #31
   2a5ac:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   2a5b0:	eb04 038c 	add.w	r3, r4, ip, lsl #2
   2a5b4:	d028      	beq.n	2a608 <rshift+0x74>
   2a5b6:	3304      	adds	r3, #4
   2a5b8:	f854 202c 	ldr.w	r2, [r4, ip, lsl #2]
   2a5bc:	f1c5 0e20 	rsb	lr, r5, #32
   2a5c0:	429f      	cmp	r7, r3
   2a5c2:	fa22 f105 	lsr.w	r1, r2, r5
   2a5c6:	d935      	bls.n	2a634 <rshift+0xa0>
   2a5c8:	46a0      	mov	r8, r4
   2a5ca:	681a      	ldr	r2, [r3, #0]
   2a5cc:	fa02 f20e 	lsl.w	r2, r2, lr
   2a5d0:	430a      	orrs	r2, r1
   2a5d2:	f848 2b04 	str.w	r2, [r8], #4
   2a5d6:	f853 1b04 	ldr.w	r1, [r3], #4
   2a5da:	429f      	cmp	r7, r3
   2a5dc:	fa21 f105 	lsr.w	r1, r1, r5
   2a5e0:	d8f3      	bhi.n	2a5ca <rshift+0x36>
   2a5e2:	eba6 030c 	sub.w	r3, r6, ip
   2a5e6:	009b      	lsls	r3, r3, #2
   2a5e8:	3b05      	subs	r3, #5
   2a5ea:	089b      	lsrs	r3, r3, #2
   2a5ec:	3301      	adds	r3, #1
   2a5ee:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
   2a5f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   2a5f6:	b1a9      	cbz	r1, 2a624 <rshift+0x90>
   2a5f8:	3304      	adds	r3, #4
   2a5fa:	e013      	b.n	2a624 <rshift+0x90>
   2a5fc:	2300      	movs	r3, #0
   2a5fe:	6103      	str	r3, [r0, #16]
   2a600:	2300      	movs	r3, #0
   2a602:	6143      	str	r3, [r0, #20]
   2a604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a608:	429f      	cmp	r7, r3
   2a60a:	d9f7      	bls.n	2a5fc <rshift+0x68>
   2a60c:	f100 0210 	add.w	r2, r0, #16
   2a610:	f853 1b04 	ldr.w	r1, [r3], #4
   2a614:	429f      	cmp	r7, r3
   2a616:	f842 1f04 	str.w	r1, [r2, #4]!
   2a61a:	d8f9      	bhi.n	2a610 <rshift+0x7c>
   2a61c:	eba6 030c 	sub.w	r3, r6, ip
   2a620:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   2a624:	1b1a      	subs	r2, r3, r4
   2a626:	42a3      	cmp	r3, r4
   2a628:	ea4f 02a2 	mov.w	r2, r2, asr #2
   2a62c:	6102      	str	r2, [r0, #16]
   2a62e:	d0e7      	beq.n	2a600 <rshift+0x6c>
   2a630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a634:	6141      	str	r1, [r0, #20]
   2a636:	2900      	cmp	r1, #0
   2a638:	d0e0      	beq.n	2a5fc <rshift+0x68>
   2a63a:	4623      	mov	r3, r4
   2a63c:	e7dc      	b.n	2a5f8 <rshift+0x64>
   2a63e:	bf00      	nop

0002a640 <__gethex>:
   2a640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a644:	4cc2      	ldr	r4, [pc, #776]	; (2a950 <__gethex+0x310>)
   2a646:	4689      	mov	r9, r1
   2a648:	6824      	ldr	r4, [r4, #0]
   2a64a:	ed2d 8b02 	vpush	{d8}
   2a64e:	b08b      	sub	sp, #44	; 0x2c
   2a650:	ee08 0a10 	vmov	s16, r0
   2a654:	4620      	mov	r0, r4
   2a656:	9202      	str	r2, [sp, #8]
   2a658:	9307      	str	r3, [sp, #28]
   2a65a:	9404      	str	r4, [sp, #16]
   2a65c:	f7fc fadc 	bl	26c18 <strlen>
   2a660:	f8d9 5000 	ldr.w	r5, [r9]
   2a664:	1823      	adds	r3, r4, r0
   2a666:	4602      	mov	r2, r0
   2a668:	78a9      	ldrb	r1, [r5, #2]
   2a66a:	f813 bc01 	ldrb.w	fp, [r3, #-1]
   2a66e:	2930      	cmp	r1, #48	; 0x30
   2a670:	f040 81ef 	bne.w	2aa52 <__gethex+0x412>
   2a674:	f06f 0001 	mvn.w	r0, #1
   2a678:	1ceb      	adds	r3, r5, #3
   2a67a:	1b40      	subs	r0, r0, r5
   2a67c:	eb00 0a03 	add.w	sl, r0, r3
   2a680:	461d      	mov	r5, r3
   2a682:	f813 1b01 	ldrb.w	r1, [r3], #1
   2a686:	2930      	cmp	r1, #48	; 0x30
   2a688:	d0f8      	beq.n	2a67c <__gethex+0x3c>
   2a68a:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 2a954 <__gethex+0x314>
   2a68e:	f818 3001 	ldrb.w	r3, [r8, r1]
   2a692:	2b00      	cmp	r3, #0
   2a694:	f000 80da 	beq.w	2a84c <__gethex+0x20c>
   2a698:	782b      	ldrb	r3, [r5, #0]
   2a69a:	2700      	movs	r7, #0
   2a69c:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a6a0:	463c      	mov	r4, r7
   2a6a2:	462e      	mov	r6, r5
   2a6a4:	b12b      	cbz	r3, 2a6b2 <__gethex+0x72>
   2a6a6:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   2a6aa:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a6ae:	2b00      	cmp	r3, #0
   2a6b0:	d1f9      	bne.n	2a6a6 <__gethex+0x66>
   2a6b2:	9904      	ldr	r1, [sp, #16]
   2a6b4:	4630      	mov	r0, r6
   2a6b6:	9203      	str	r2, [sp, #12]
   2a6b8:	f7fc fadc 	bl	26c74 <strncmp>
   2a6bc:	9a03      	ldr	r2, [sp, #12]
   2a6be:	9001      	str	r0, [sp, #4]
   2a6c0:	2800      	cmp	r0, #0
   2a6c2:	f000 8091 	beq.w	2a7e8 <__gethex+0x1a8>
   2a6c6:	2c00      	cmp	r4, #0
   2a6c8:	f040 8091 	bne.w	2a7ee <__gethex+0x1ae>
   2a6cc:	7833      	ldrb	r3, [r6, #0]
   2a6ce:	9401      	str	r4, [sp, #4]
   2a6d0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2a6d4:	4634      	mov	r4, r6
   2a6d6:	2b50      	cmp	r3, #80	; 0x50
   2a6d8:	f000 8093 	beq.w	2a802 <__gethex+0x1c2>
   2a6dc:	f8c9 6000 	str.w	r6, [r9]
   2a6e0:	2f00      	cmp	r7, #0
   2a6e2:	f040 80a2 	bne.w	2a82a <__gethex+0x1ea>
   2a6e6:	1b63      	subs	r3, r4, r5
   2a6e8:	4639      	mov	r1, r7
   2a6ea:	3b01      	subs	r3, #1
   2a6ec:	2b07      	cmp	r3, #7
   2a6ee:	dd03      	ble.n	2a6f8 <__gethex+0xb8>
   2a6f0:	105b      	asrs	r3, r3, #1
   2a6f2:	3101      	adds	r1, #1
   2a6f4:	2b07      	cmp	r3, #7
   2a6f6:	dcfb      	bgt.n	2a6f0 <__gethex+0xb0>
   2a6f8:	ee18 0a10 	vmov	r0, s16
   2a6fc:	9205      	str	r2, [sp, #20]
   2a6fe:	f000 fc89 	bl	2b014 <_Balloc>
   2a702:	42a5      	cmp	r5, r4
   2a704:	f100 0614 	add.w	r6, r0, #20
   2a708:	9003      	str	r0, [sp, #12]
   2a70a:	9606      	str	r6, [sp, #24]
   2a70c:	f080 81ca 	bcs.w	2aaa4 <__gethex+0x464>
   2a710:	9a05      	ldr	r2, [sp, #20]
   2a712:	2700      	movs	r7, #0
   2a714:	f1c2 0301 	rsb	r3, r2, #1
   2a718:	46b9      	mov	r9, r7
   2a71a:	9305      	str	r3, [sp, #20]
   2a71c:	e011      	b.n	2a742 <__gethex+0x102>
   2a71e:	2f20      	cmp	r7, #32
   2a720:	f000 808e 	beq.w	2a840 <__gethex+0x200>
   2a724:	4639      	mov	r1, r7
   2a726:	3704      	adds	r7, #4
   2a728:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   2a72c:	4654      	mov	r4, sl
   2a72e:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a732:	42ac      	cmp	r4, r5
   2a734:	f003 030f 	and.w	r3, r3, #15
   2a738:	fa03 f301 	lsl.w	r3, r3, r1
   2a73c:	ea49 0903 	orr.w	r9, r9, r3
   2a740:	d916      	bls.n	2a770 <__gethex+0x130>
   2a742:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   2a746:	f104 3aff 	add.w	sl, r4, #4294967295
   2a74a:	455b      	cmp	r3, fp
   2a74c:	d1e7      	bne.n	2a71e <__gethex+0xde>
   2a74e:	9b05      	ldr	r3, [sp, #20]
   2a750:	4453      	add	r3, sl
   2a752:	42ab      	cmp	r3, r5
   2a754:	d3e3      	bcc.n	2a71e <__gethex+0xde>
   2a756:	4618      	mov	r0, r3
   2a758:	9904      	ldr	r1, [sp, #16]
   2a75a:	9209      	str	r2, [sp, #36]	; 0x24
   2a75c:	9308      	str	r3, [sp, #32]
   2a75e:	f7fc fa89 	bl	26c74 <strncmp>
   2a762:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   2a766:	2800      	cmp	r0, #0
   2a768:	d1d9      	bne.n	2a71e <__gethex+0xde>
   2a76a:	461c      	mov	r4, r3
   2a76c:	42ac      	cmp	r4, r5
   2a76e:	d8e8      	bhi.n	2a742 <__gethex+0x102>
   2a770:	9b06      	ldr	r3, [sp, #24]
   2a772:	4648      	mov	r0, r9
   2a774:	f846 9b04 	str.w	r9, [r6], #4
   2a778:	1af6      	subs	r6, r6, r3
   2a77a:	9b03      	ldr	r3, [sp, #12]
   2a77c:	10b6      	asrs	r6, r6, #2
   2a77e:	611e      	str	r6, [r3, #16]
   2a780:	0176      	lsls	r6, r6, #5
   2a782:	f000 fd09 	bl	2b198 <__hi0bits>
   2a786:	9b02      	ldr	r3, [sp, #8]
   2a788:	1a30      	subs	r0, r6, r0
   2a78a:	681c      	ldr	r4, [r3, #0]
   2a78c:	42a0      	cmp	r0, r4
   2a78e:	f300 80be 	bgt.w	2a90e <__gethex+0x2ce>
   2a792:	f2c0 813d 	blt.w	2aa10 <__gethex+0x3d0>
   2a796:	2700      	movs	r7, #0
   2a798:	9b02      	ldr	r3, [sp, #8]
   2a79a:	9a01      	ldr	r2, [sp, #4]
   2a79c:	689b      	ldr	r3, [r3, #8]
   2a79e:	4293      	cmp	r3, r2
   2a7a0:	f2c0 8176 	blt.w	2aa90 <__gethex+0x450>
   2a7a4:	9802      	ldr	r0, [sp, #8]
   2a7a6:	9a01      	ldr	r2, [sp, #4]
   2a7a8:	6843      	ldr	r3, [r0, #4]
   2a7aa:	4293      	cmp	r3, r2
   2a7ac:	dd6d      	ble.n	2a88a <__gethex+0x24a>
   2a7ae:	1a9d      	subs	r5, r3, r2
   2a7b0:	42ac      	cmp	r4, r5
   2a7b2:	f300 80d1 	bgt.w	2a958 <__gethex+0x318>
   2a7b6:	68c2      	ldr	r2, [r0, #12]
   2a7b8:	2a02      	cmp	r2, #2
   2a7ba:	f000 818c 	beq.w	2aad6 <__gethex+0x496>
   2a7be:	2a03      	cmp	r2, #3
   2a7c0:	f000 81a7 	beq.w	2ab12 <__gethex+0x4d2>
   2a7c4:	2a01      	cmp	r2, #1
   2a7c6:	f000 8195 	beq.w	2aaf4 <__gethex+0x4b4>
   2a7ca:	2550      	movs	r5, #80	; 0x50
   2a7cc:	ee18 0a10 	vmov	r0, s16
   2a7d0:	9903      	ldr	r1, [sp, #12]
   2a7d2:	f000 fc45 	bl	2b060 <_Bfree>
   2a7d6:	2300      	movs	r3, #0
   2a7d8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2a7da:	4628      	mov	r0, r5
   2a7dc:	6013      	str	r3, [r2, #0]
   2a7de:	b00b      	add	sp, #44	; 0x2c
   2a7e0:	ecbd 8b02 	vpop	{d8}
   2a7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a7e8:	2c00      	cmp	r4, #0
   2a7ea:	f000 8120 	beq.w	2aa2e <__gethex+0x3ee>
   2a7ee:	7833      	ldrb	r3, [r6, #0]
   2a7f0:	1ba4      	subs	r4, r4, r6
   2a7f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2a7f6:	00a1      	lsls	r1, r4, #2
   2a7f8:	4634      	mov	r4, r6
   2a7fa:	2b50      	cmp	r3, #80	; 0x50
   2a7fc:	9101      	str	r1, [sp, #4]
   2a7fe:	f47f af6d 	bne.w	2a6dc <__gethex+0x9c>
   2a802:	7863      	ldrb	r3, [r4, #1]
   2a804:	2b2b      	cmp	r3, #43	; 0x2b
   2a806:	f000 8100 	beq.w	2aa0a <__gethex+0x3ca>
   2a80a:	2b2d      	cmp	r3, #45	; 0x2d
   2a80c:	d05a      	beq.n	2a8c4 <__gethex+0x284>
   2a80e:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a812:	1c66      	adds	r6, r4, #1
   2a814:	f04f 0c00 	mov.w	ip, #0
   2a818:	1e59      	subs	r1, r3, #1
   2a81a:	2918      	cmp	r1, #24
   2a81c:	d95b      	bls.n	2a8d6 <__gethex+0x296>
   2a81e:	4626      	mov	r6, r4
   2a820:	f8c9 6000 	str.w	r6, [r9]
   2a824:	2f00      	cmp	r7, #0
   2a826:	f43f af5e 	beq.w	2a6e6 <__gethex+0xa6>
   2a82a:	f1ba 0f00 	cmp.w	sl, #0
   2a82e:	bf14      	ite	ne
   2a830:	2500      	movne	r5, #0
   2a832:	2506      	moveq	r5, #6
   2a834:	4628      	mov	r0, r5
   2a836:	b00b      	add	sp, #44	; 0x2c
   2a838:	ecbd 8b02 	vpop	{d8}
   2a83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a840:	2100      	movs	r1, #0
   2a842:	f846 9b04 	str.w	r9, [r6], #4
   2a846:	2704      	movs	r7, #4
   2a848:	4689      	mov	r9, r1
   2a84a:	e76d      	b.n	2a728 <__gethex+0xe8>
   2a84c:	9904      	ldr	r1, [sp, #16]
   2a84e:	4628      	mov	r0, r5
   2a850:	9201      	str	r2, [sp, #4]
   2a852:	f7fc fa0f 	bl	26c74 <strncmp>
   2a856:	9a01      	ldr	r2, [sp, #4]
   2a858:	2800      	cmp	r0, #0
   2a85a:	f040 809b 	bne.w	2a994 <__gethex+0x354>
   2a85e:	5ca9      	ldrb	r1, [r5, r2]
   2a860:	18ac      	adds	r4, r5, r2
   2a862:	f818 3001 	ldrb.w	r3, [r8, r1]
   2a866:	2b00      	cmp	r3, #0
   2a868:	f000 8096 	beq.w	2a998 <__gethex+0x358>
   2a86c:	2930      	cmp	r1, #48	; 0x30
   2a86e:	4625      	mov	r5, r4
   2a870:	d105      	bne.n	2a87e <__gethex+0x23e>
   2a872:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   2a876:	2b30      	cmp	r3, #48	; 0x30
   2a878:	d0fb      	beq.n	2a872 <__gethex+0x232>
   2a87a:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a87e:	fab3 f783 	clz	r7, r3
   2a882:	f04f 0a01 	mov.w	sl, #1
   2a886:	097f      	lsrs	r7, r7, #5
   2a888:	e70b      	b.n	2a6a2 <__gethex+0x62>
   2a88a:	2501      	movs	r5, #1
   2a88c:	b167      	cbz	r7, 2a8a8 <__gethex+0x268>
   2a88e:	9b02      	ldr	r3, [sp, #8]
   2a890:	68db      	ldr	r3, [r3, #12]
   2a892:	2b02      	cmp	r3, #2
   2a894:	f000 8088 	beq.w	2a9a8 <__gethex+0x368>
   2a898:	2b03      	cmp	r3, #3
   2a89a:	f000 8089 	beq.w	2a9b0 <__gethex+0x370>
   2a89e:	2b01      	cmp	r3, #1
   2a8a0:	f000 80aa 	beq.w	2a9f8 <__gethex+0x3b8>
   2a8a4:	f045 0510 	orr.w	r5, r5, #16
   2a8a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2a8aa:	4628      	mov	r0, r5
   2a8ac:	461a      	mov	r2, r3
   2a8ae:	9b03      	ldr	r3, [sp, #12]
   2a8b0:	6013      	str	r3, [r2, #0]
   2a8b2:	9b07      	ldr	r3, [sp, #28]
   2a8b4:	461a      	mov	r2, r3
   2a8b6:	9b01      	ldr	r3, [sp, #4]
   2a8b8:	6013      	str	r3, [r2, #0]
   2a8ba:	b00b      	add	sp, #44	; 0x2c
   2a8bc:	ecbd 8b02 	vpop	{d8}
   2a8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a8c4:	f04f 0c01 	mov.w	ip, #1
   2a8c8:	78a3      	ldrb	r3, [r4, #2]
   2a8ca:	1ca6      	adds	r6, r4, #2
   2a8cc:	f818 3003 	ldrb.w	r3, [r8, r3]
   2a8d0:	1e59      	subs	r1, r3, #1
   2a8d2:	2918      	cmp	r1, #24
   2a8d4:	d8a3      	bhi.n	2a81e <__gethex+0x1de>
   2a8d6:	7871      	ldrb	r1, [r6, #1]
   2a8d8:	3b10      	subs	r3, #16
   2a8da:	3601      	adds	r6, #1
   2a8dc:	f818 1001 	ldrb.w	r1, [r8, r1]
   2a8e0:	1e48      	subs	r0, r1, #1
   2a8e2:	2818      	cmp	r0, #24
   2a8e4:	d80b      	bhi.n	2a8fe <__gethex+0x2be>
   2a8e6:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   2a8ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   2a8ee:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   2a8f2:	f818 1000 	ldrb.w	r1, [r8, r0]
   2a8f6:	1e48      	subs	r0, r1, #1
   2a8f8:	3b10      	subs	r3, #16
   2a8fa:	2818      	cmp	r0, #24
   2a8fc:	d9f3      	bls.n	2a8e6 <__gethex+0x2a6>
   2a8fe:	f1bc 0f00 	cmp.w	ip, #0
   2a902:	d000      	beq.n	2a906 <__gethex+0x2c6>
   2a904:	425b      	negs	r3, r3
   2a906:	9901      	ldr	r1, [sp, #4]
   2a908:	4419      	add	r1, r3
   2a90a:	9101      	str	r1, [sp, #4]
   2a90c:	e6e6      	b.n	2a6dc <__gethex+0x9c>
   2a90e:	1b06      	subs	r6, r0, r4
   2a910:	f8dd 800c 	ldr.w	r8, [sp, #12]
   2a914:	4631      	mov	r1, r6
   2a916:	4640      	mov	r0, r8
   2a918:	f000 fff6 	bl	2b908 <__any_on>
   2a91c:	4607      	mov	r7, r0
   2a91e:	b178      	cbz	r0, 2a940 <__gethex+0x300>
   2a920:	1e72      	subs	r2, r6, #1
   2a922:	2701      	movs	r7, #1
   2a924:	9d06      	ldr	r5, [sp, #24]
   2a926:	1151      	asrs	r1, r2, #5
   2a928:	f002 031f 	and.w	r3, r2, #31
   2a92c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
   2a930:	fa07 f303 	lsl.w	r3, r7, r3
   2a934:	420b      	tst	r3, r1
   2a936:	d003      	beq.n	2a940 <__gethex+0x300>
   2a938:	42ba      	cmp	r2, r7
   2a93a:	f300 80bf 	bgt.w	2aabc <__gethex+0x47c>
   2a93e:	2702      	movs	r7, #2
   2a940:	9b01      	ldr	r3, [sp, #4]
   2a942:	4631      	mov	r1, r6
   2a944:	9803      	ldr	r0, [sp, #12]
   2a946:	4433      	add	r3, r6
   2a948:	9301      	str	r3, [sp, #4]
   2a94a:	f7ff fe23 	bl	2a594 <rshift>
   2a94e:	e723      	b.n	2a798 <__gethex+0x158>
   2a950:	0002fc60 	.word	0x0002fc60
   2a954:	0002fb5c 	.word	0x0002fb5c
   2a958:	1e6e      	subs	r6, r5, #1
   2a95a:	2f00      	cmp	r7, #0
   2a95c:	f040 80a6 	bne.w	2aaac <__gethex+0x46c>
   2a960:	2e00      	cmp	r6, #0
   2a962:	f040 80a5 	bne.w	2aab0 <__gethex+0x470>
   2a966:	2301      	movs	r3, #1
   2a968:	9906      	ldr	r1, [sp, #24]
   2a96a:	1172      	asrs	r2, r6, #5
   2a96c:	f006 061f 	and.w	r6, r6, #31
   2a970:	9803      	ldr	r0, [sp, #12]
   2a972:	1b64      	subs	r4, r4, r5
   2a974:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   2a978:	fa03 f606 	lsl.w	r6, r3, r6
   2a97c:	4629      	mov	r1, r5
   2a97e:	2502      	movs	r5, #2
   2a980:	4216      	tst	r6, r2
   2a982:	bf18      	it	ne
   2a984:	f047 0702 	orrne.w	r7, r7, #2
   2a988:	f7ff fe04 	bl	2a594 <rshift>
   2a98c:	9b02      	ldr	r3, [sp, #8]
   2a98e:	685b      	ldr	r3, [r3, #4]
   2a990:	9301      	str	r3, [sp, #4]
   2a992:	e77b      	b.n	2a88c <__gethex+0x24c>
   2a994:	7829      	ldrb	r1, [r5, #0]
   2a996:	462c      	mov	r4, r5
   2a998:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   2a99c:	2950      	cmp	r1, #80	; 0x50
   2a99e:	f000 8096 	beq.w	2aace <__gethex+0x48e>
   2a9a2:	f8c9 4000 	str.w	r4, [r9]
   2a9a6:	e740      	b.n	2a82a <__gethex+0x1ea>
   2a9a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2a9aa:	f1c3 0301 	rsb	r3, r3, #1
   2a9ae:	9317      	str	r3, [sp, #92]	; 0x5c
   2a9b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2a9b2:	2b00      	cmp	r3, #0
   2a9b4:	f43f af76 	beq.w	2a8a4 <__gethex+0x264>
   2a9b8:	9b03      	ldr	r3, [sp, #12]
   2a9ba:	2700      	movs	r7, #0
   2a9bc:	f8dd c018 	ldr.w	ip, [sp, #24]
   2a9c0:	691e      	ldr	r6, [r3, #16]
   2a9c2:	4663      	mov	r3, ip
   2a9c4:	eb0c 0086 	add.w	r0, ip, r6, lsl #2
   2a9c8:	ea4f 0986 	mov.w	r9, r6, lsl #2
   2a9cc:	e003      	b.n	2a9d6 <__gethex+0x396>
   2a9ce:	4298      	cmp	r0, r3
   2a9d0:	f843 7c04 	str.w	r7, [r3, #-4]
   2a9d4:	d941      	bls.n	2aa5a <__gethex+0x41a>
   2a9d6:	4619      	mov	r1, r3
   2a9d8:	f853 2b04 	ldr.w	r2, [r3], #4
   2a9dc:	f1b2 3fff 	cmp.w	r2, #4294967295
   2a9e0:	d0f5      	beq.n	2a9ce <__gethex+0x38e>
   2a9e2:	3201      	adds	r2, #1
   2a9e4:	2d02      	cmp	r5, #2
   2a9e6:	600a      	str	r2, [r1, #0]
   2a9e8:	f000 8098 	beq.w	2ab1c <__gethex+0x4dc>
   2a9ec:	f014 041f 	ands.w	r4, r4, #31
   2a9f0:	f040 80b7 	bne.w	2ab62 <__gethex+0x522>
   2a9f4:	2521      	movs	r5, #33	; 0x21
   2a9f6:	e757      	b.n	2a8a8 <__gethex+0x268>
   2a9f8:	07ba      	lsls	r2, r7, #30
   2a9fa:	f57f af53 	bpl.w	2a8a4 <__gethex+0x264>
   2a9fe:	9b06      	ldr	r3, [sp, #24]
   2aa00:	681b      	ldr	r3, [r3, #0]
   2aa02:	431f      	orrs	r7, r3
   2aa04:	07fb      	lsls	r3, r7, #31
   2aa06:	d4d7      	bmi.n	2a9b8 <__gethex+0x378>
   2aa08:	e74c      	b.n	2a8a4 <__gethex+0x264>
   2aa0a:	f04f 0c00 	mov.w	ip, #0
   2aa0e:	e75b      	b.n	2a8c8 <__gethex+0x288>
   2aa10:	1a22      	subs	r2, r4, r0
   2aa12:	9b01      	ldr	r3, [sp, #4]
   2aa14:	9903      	ldr	r1, [sp, #12]
   2aa16:	ee18 0a10 	vmov	r0, s16
   2aa1a:	1a9b      	subs	r3, r3, r2
   2aa1c:	2700      	movs	r7, #0
   2aa1e:	9301      	str	r3, [sp, #4]
   2aa20:	f000 fd08 	bl	2b434 <__lshift>
   2aa24:	4603      	mov	r3, r0
   2aa26:	9003      	str	r0, [sp, #12]
   2aa28:	3314      	adds	r3, #20
   2aa2a:	9306      	str	r3, [sp, #24]
   2aa2c:	e6b4      	b.n	2a798 <__gethex+0x158>
   2aa2e:	5cb3      	ldrb	r3, [r6, r2]
   2aa30:	18b0      	adds	r0, r6, r2
   2aa32:	f818 1003 	ldrb.w	r1, [r8, r3]
   2aa36:	4606      	mov	r6, r0
   2aa38:	2900      	cmp	r1, #0
   2aa3a:	f43f ae49 	beq.w	2a6d0 <__gethex+0x90>
   2aa3e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   2aa42:	f818 1003 	ldrb.w	r1, [r8, r3]
   2aa46:	2900      	cmp	r1, #0
   2aa48:	d1f9      	bne.n	2aa3e <__gethex+0x3fe>
   2aa4a:	1b80      	subs	r0, r0, r6
   2aa4c:	0081      	lsls	r1, r0, #2
   2aa4e:	9101      	str	r1, [sp, #4]
   2aa50:	e63e      	b.n	2a6d0 <__gethex+0x90>
   2aa52:	3502      	adds	r5, #2
   2aa54:	f04f 0a00 	mov.w	sl, #0
   2aa58:	e617      	b.n	2a68a <__gethex+0x4a>
   2aa5a:	9b03      	ldr	r3, [sp, #12]
   2aa5c:	689b      	ldr	r3, [r3, #8]
   2aa5e:	429e      	cmp	r6, r3
   2aa60:	da63      	bge.n	2ab2a <__gethex+0x4ea>
   2aa62:	4633      	mov	r3, r6
   2aa64:	9803      	ldr	r0, [sp, #12]
   2aa66:	1c5a      	adds	r2, r3, #1
   2aa68:	2101      	movs	r1, #1
   2aa6a:	2d02      	cmp	r5, #2
   2aa6c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2aa70:	6102      	str	r2, [r0, #16]
   2aa72:	6159      	str	r1, [r3, #20]
   2aa74:	d052      	beq.n	2ab1c <__gethex+0x4dc>
   2aa76:	4296      	cmp	r6, r2
   2aa78:	dab8      	bge.n	2a9ec <__gethex+0x3ac>
   2aa7a:	9c01      	ldr	r4, [sp, #4]
   2aa7c:	2101      	movs	r1, #1
   2aa7e:	9803      	ldr	r0, [sp, #12]
   2aa80:	440c      	add	r4, r1
   2aa82:	9401      	str	r4, [sp, #4]
   2aa84:	f7ff fd86 	bl	2a594 <rshift>
   2aa88:	9b02      	ldr	r3, [sp, #8]
   2aa8a:	689b      	ldr	r3, [r3, #8]
   2aa8c:	42a3      	cmp	r3, r4
   2aa8e:	dab1      	bge.n	2a9f4 <__gethex+0x3b4>
   2aa90:	9903      	ldr	r1, [sp, #12]
   2aa92:	ee18 0a10 	vmov	r0, s16
   2aa96:	f000 fae3 	bl	2b060 <_Bfree>
   2aa9a:	2300      	movs	r3, #0
   2aa9c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2aa9e:	25a3      	movs	r5, #163	; 0xa3
   2aaa0:	6013      	str	r3, [r2, #0]
   2aaa2:	e6c7      	b.n	2a834 <__gethex+0x1f4>
   2aaa4:	9e06      	ldr	r6, [sp, #24]
   2aaa6:	f04f 0900 	mov.w	r9, #0
   2aaaa:	e661      	b.n	2a770 <__gethex+0x130>
   2aaac:	2701      	movs	r7, #1
   2aaae:	e75a      	b.n	2a966 <__gethex+0x326>
   2aab0:	4631      	mov	r1, r6
   2aab2:	9803      	ldr	r0, [sp, #12]
   2aab4:	f000 ff28 	bl	2b908 <__any_on>
   2aab8:	4607      	mov	r7, r0
   2aaba:	e754      	b.n	2a966 <__gethex+0x326>
   2aabc:	1eb1      	subs	r1, r6, #2
   2aabe:	4640      	mov	r0, r8
   2aac0:	f000 ff22 	bl	2b908 <__any_on>
   2aac4:	2800      	cmp	r0, #0
   2aac6:	f43f af3a 	beq.w	2a93e <__gethex+0x2fe>
   2aaca:	2703      	movs	r7, #3
   2aacc:	e738      	b.n	2a940 <__gethex+0x300>
   2aace:	2300      	movs	r3, #0
   2aad0:	2701      	movs	r7, #1
   2aad2:	9301      	str	r3, [sp, #4]
   2aad4:	e695      	b.n	2a802 <__gethex+0x1c2>
   2aad6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2aad8:	2a00      	cmp	r2, #0
   2aada:	f47f ae76 	bne.w	2a7ca <__gethex+0x18a>
   2aade:	9907      	ldr	r1, [sp, #28]
   2aae0:	2201      	movs	r2, #1
   2aae2:	2562      	movs	r5, #98	; 0x62
   2aae4:	600b      	str	r3, [r1, #0]
   2aae6:	9b03      	ldr	r3, [sp, #12]
   2aae8:	9906      	ldr	r1, [sp, #24]
   2aaea:	611a      	str	r2, [r3, #16]
   2aaec:	600a      	str	r2, [r1, #0]
   2aaee:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2aaf0:	6013      	str	r3, [r2, #0]
   2aaf2:	e69f      	b.n	2a834 <__gethex+0x1f4>
   2aaf4:	42ac      	cmp	r4, r5
   2aaf6:	f47f ae68 	bne.w	2a7ca <__gethex+0x18a>
   2aafa:	2c01      	cmp	r4, #1
   2aafc:	d0ef      	beq.n	2aade <__gethex+0x49e>
   2aafe:	1e61      	subs	r1, r4, #1
   2ab00:	9803      	ldr	r0, [sp, #12]
   2ab02:	f000 ff01 	bl	2b908 <__any_on>
   2ab06:	2800      	cmp	r0, #0
   2ab08:	f43f ae5f 	beq.w	2a7ca <__gethex+0x18a>
   2ab0c:	9b02      	ldr	r3, [sp, #8]
   2ab0e:	685b      	ldr	r3, [r3, #4]
   2ab10:	e7e5      	b.n	2aade <__gethex+0x49e>
   2ab12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2ab14:	2a00      	cmp	r2, #0
   2ab16:	f43f ae58 	beq.w	2a7ca <__gethex+0x18a>
   2ab1a:	e7e0      	b.n	2aade <__gethex+0x49e>
   2ab1c:	9b02      	ldr	r3, [sp, #8]
   2ab1e:	681b      	ldr	r3, [r3, #0]
   2ab20:	3b01      	subs	r3, #1
   2ab22:	42a3      	cmp	r3, r4
   2ab24:	d029      	beq.n	2ab7a <__gethex+0x53a>
   2ab26:	2522      	movs	r5, #34	; 0x22
   2ab28:	e6be      	b.n	2a8a8 <__gethex+0x268>
   2ab2a:	9f03      	ldr	r7, [sp, #12]
   2ab2c:	ee18 0a10 	vmov	r0, s16
   2ab30:	6879      	ldr	r1, [r7, #4]
   2ab32:	3101      	adds	r1, #1
   2ab34:	f000 fa6e 	bl	2b014 <_Balloc>
   2ab38:	693b      	ldr	r3, [r7, #16]
   2ab3a:	4680      	mov	r8, r0
   2ab3c:	f107 010c 	add.w	r1, r7, #12
   2ab40:	3302      	adds	r3, #2
   2ab42:	300c      	adds	r0, #12
   2ab44:	009a      	lsls	r2, r3, #2
   2ab46:	f7e2 f801 	bl	cb4c <memcpy>
   2ab4a:	4639      	mov	r1, r7
   2ab4c:	ee18 0a10 	vmov	r0, s16
   2ab50:	f8cd 800c 	str.w	r8, [sp, #12]
   2ab54:	f000 fa84 	bl	2b060 <_Bfree>
   2ab58:	f108 0c14 	add.w	ip, r8, #20
   2ab5c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2ab60:	e780      	b.n	2aa64 <__gethex+0x424>
   2ab62:	eb0c 0709 	add.w	r7, ip, r9
   2ab66:	f1c4 0420 	rsb	r4, r4, #32
   2ab6a:	f857 0c04 	ldr.w	r0, [r7, #-4]
   2ab6e:	f000 fb13 	bl	2b198 <__hi0bits>
   2ab72:	42a0      	cmp	r0, r4
   2ab74:	f6bf af3e 	bge.w	2a9f4 <__gethex+0x3b4>
   2ab78:	e77f      	b.n	2aa7a <__gethex+0x43a>
   2ab7a:	1162      	asrs	r2, r4, #5
   2ab7c:	2301      	movs	r3, #1
   2ab7e:	f004 041f 	and.w	r4, r4, #31
   2ab82:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
   2ab86:	40a3      	lsls	r3, r4
   2ab88:	4213      	tst	r3, r2
   2ab8a:	bf0c      	ite	eq
   2ab8c:	2522      	moveq	r5, #34	; 0x22
   2ab8e:	2521      	movne	r5, #33	; 0x21
   2ab90:	e68a      	b.n	2a8a8 <__gethex+0x268>
   2ab92:	bf00      	nop

0002ab94 <__match>:
   2ab94:	b470      	push	{r4, r5, r6}
   2ab96:	4606      	mov	r6, r0
   2ab98:	6804      	ldr	r4, [r0, #0]
   2ab9a:	e008      	b.n	2abae <__match+0x1a>
   2ab9c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2aba0:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
   2aba4:	2d19      	cmp	r5, #25
   2aba6:	bf98      	it	ls
   2aba8:	3320      	addls	r3, #32
   2abaa:	4293      	cmp	r3, r2
   2abac:	d108      	bne.n	2abc0 <__match+0x2c>
   2abae:	f811 2b01 	ldrb.w	r2, [r1], #1
   2abb2:	2a00      	cmp	r2, #0
   2abb4:	d1f2      	bne.n	2ab9c <__match+0x8>
   2abb6:	3401      	adds	r4, #1
   2abb8:	2001      	movs	r0, #1
   2abba:	6034      	str	r4, [r6, #0]
   2abbc:	bc70      	pop	{r4, r5, r6}
   2abbe:	4770      	bx	lr
   2abc0:	2000      	movs	r0, #0
   2abc2:	bc70      	pop	{r4, r5, r6}
   2abc4:	4770      	bx	lr
   2abc6:	bf00      	nop

0002abc8 <__hexnan>:
   2abc8:	6809      	ldr	r1, [r1, #0]
   2abca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2abce:	114b      	asrs	r3, r1, #5
   2abd0:	b085      	sub	sp, #20
   2abd2:	f011 011f 	ands.w	r1, r1, #31
   2abd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2abda:	9002      	str	r0, [sp, #8]
   2abdc:	9103      	str	r1, [sp, #12]
   2abde:	f040 809c 	bne.w	2ad1a <__hexnan+0x152>
   2abe2:	f1a3 0c04 	sub.w	ip, r3, #4
   2abe6:	9301      	str	r3, [sp, #4]
   2abe8:	9902      	ldr	r1, [sp, #8]
   2abea:	2300      	movs	r3, #0
   2abec:	9801      	ldr	r0, [sp, #4]
   2abee:	6809      	ldr	r1, [r1, #0]
   2abf0:	f840 3c04 	str.w	r3, [r0, #-4]
   2abf4:	1c4f      	adds	r7, r1, #1
   2abf6:	7849      	ldrb	r1, [r1, #1]
   2abf8:	2900      	cmp	r1, #0
   2abfa:	f000 80a4 	beq.w	2ad46 <__hexnan+0x17e>
   2abfe:	46e0      	mov	r8, ip
   2ac00:	4664      	mov	r4, ip
   2ac02:	f8df 9160 	ldr.w	r9, [pc, #352]	; 2ad64 <__hexnan+0x19c>
   2ac06:	469a      	mov	sl, r3
   2ac08:	469e      	mov	lr, r3
   2ac0a:	e00e      	b.n	2ac2a <__hexnan+0x62>
   2ac0c:	2920      	cmp	r1, #32
   2ac0e:	f200 8098 	bhi.w	2ad42 <__hexnan+0x17a>
   2ac12:	45f2      	cmp	sl, lr
   2ac14:	da06      	bge.n	2ac24 <__hexnan+0x5c>
   2ac16:	4544      	cmp	r4, r8
   2ac18:	d201      	bcs.n	2ac1e <__hexnan+0x56>
   2ac1a:	2b07      	cmp	r3, #7
   2ac1c:	dd6a      	ble.n	2acf4 <__hexnan+0x12c>
   2ac1e:	42a2      	cmp	r2, r4
   2ac20:	d360      	bcc.n	2ace4 <__hexnan+0x11c>
   2ac22:	2308      	movs	r3, #8
   2ac24:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   2ac28:	b191      	cbz	r1, 2ac50 <__hexnan+0x88>
   2ac2a:	f819 0001 	ldrb.w	r0, [r9, r1]
   2ac2e:	2800      	cmp	r0, #0
   2ac30:	d0ec      	beq.n	2ac0c <__hexnan+0x44>
   2ac32:	3301      	adds	r3, #1
   2ac34:	f10e 0e01 	add.w	lr, lr, #1
   2ac38:	2b08      	cmp	r3, #8
   2ac3a:	dc4b      	bgt.n	2acd4 <__hexnan+0x10c>
   2ac3c:	6821      	ldr	r1, [r4, #0]
   2ac3e:	0109      	lsls	r1, r1, #4
   2ac40:	f000 000f 	and.w	r0, r0, #15
   2ac44:	4308      	orrs	r0, r1
   2ac46:	6020      	str	r0, [r4, #0]
   2ac48:	f817 1f01 	ldrb.w	r1, [r7, #1]!
   2ac4c:	2900      	cmp	r1, #0
   2ac4e:	d1ec      	bne.n	2ac2a <__hexnan+0x62>
   2ac50:	f1be 0f00 	cmp.w	lr, #0
   2ac54:	d077      	beq.n	2ad46 <__hexnan+0x17e>
   2ac56:	45a0      	cmp	r8, r4
   2ac58:	d913      	bls.n	2ac82 <__hexnan+0xba>
   2ac5a:	2b07      	cmp	r3, #7
   2ac5c:	dc11      	bgt.n	2ac82 <__hexnan+0xba>
   2ac5e:	f1c3 0308 	rsb	r3, r3, #8
   2ac62:	6825      	ldr	r5, [r4, #0]
   2ac64:	4621      	mov	r1, r4
   2ac66:	009b      	lsls	r3, r3, #2
   2ac68:	f1c3 0720 	rsb	r7, r3, #32
   2ac6c:	684e      	ldr	r6, [r1, #4]
   2ac6e:	fa06 f007 	lsl.w	r0, r6, r7
   2ac72:	4328      	orrs	r0, r5
   2ac74:	fa26 f503 	lsr.w	r5, r6, r3
   2ac78:	6008      	str	r0, [r1, #0]
   2ac7a:	f841 5f04 	str.w	r5, [r1, #4]!
   2ac7e:	4588      	cmp	r8, r1
   2ac80:	d8f4      	bhi.n	2ac6c <__hexnan+0xa4>
   2ac82:	42a2      	cmp	r2, r4
   2ac84:	d24d      	bcs.n	2ad22 <__hexnan+0x15a>
   2ac86:	1f11      	subs	r1, r2, #4
   2ac88:	4623      	mov	r3, r4
   2ac8a:	f853 0b04 	ldr.w	r0, [r3], #4
   2ac8e:	4563      	cmp	r3, ip
   2ac90:	f841 0f04 	str.w	r0, [r1, #4]!
   2ac94:	d9f9      	bls.n	2ac8a <__hexnan+0xc2>
   2ac96:	ebac 0304 	sub.w	r3, ip, r4
   2ac9a:	f10c 0001 	add.w	r0, ip, #1
   2ac9e:	3401      	adds	r4, #1
   2aca0:	2100      	movs	r1, #0
   2aca2:	f023 0303 	bic.w	r3, r3, #3
   2aca6:	3304      	adds	r3, #4
   2aca8:	42a0      	cmp	r0, r4
   2acaa:	bf38      	it	cc
   2acac:	2304      	movcc	r3, #4
   2acae:	4413      	add	r3, r2
   2acb0:	f843 1b04 	str.w	r1, [r3], #4
   2acb4:	4563      	cmp	r3, ip
   2acb6:	d9fb      	bls.n	2acb0 <__hexnan+0xe8>
   2acb8:	9b01      	ldr	r3, [sp, #4]
   2acba:	f853 3c04 	ldr.w	r3, [r3, #-4]
   2acbe:	b92b      	cbnz	r3, 2accc <__hexnan+0x104>
   2acc0:	4562      	cmp	r2, ip
   2acc2:	d044      	beq.n	2ad4e <__hexnan+0x186>
   2acc4:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   2acc8:	2b00      	cmp	r3, #0
   2acca:	d0f9      	beq.n	2acc0 <__hexnan+0xf8>
   2accc:	2005      	movs	r0, #5
   2acce:	b005      	add	sp, #20
   2acd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2acd4:	42a2      	cmp	r2, r4
   2acd6:	d2a5      	bcs.n	2ac24 <__hexnan+0x5c>
   2acd8:	2300      	movs	r3, #0
   2acda:	3c04      	subs	r4, #4
   2acdc:	6023      	str	r3, [r4, #0]
   2acde:	4619      	mov	r1, r3
   2ace0:	2301      	movs	r3, #1
   2ace2:	e7ad      	b.n	2ac40 <__hexnan+0x78>
   2ace4:	f1a4 0804 	sub.w	r8, r4, #4
   2ace8:	2300      	movs	r3, #0
   2acea:	46f2      	mov	sl, lr
   2acec:	f844 3c04 	str.w	r3, [r4, #-4]
   2acf0:	4644      	mov	r4, r8
   2acf2:	e797      	b.n	2ac24 <__hexnan+0x5c>
   2acf4:	f1c3 0108 	rsb	r1, r3, #8
   2acf8:	6825      	ldr	r5, [r4, #0]
   2acfa:	4623      	mov	r3, r4
   2acfc:	0089      	lsls	r1, r1, #2
   2acfe:	f1c1 0b20 	rsb	fp, r1, #32
   2ad02:	685e      	ldr	r6, [r3, #4]
   2ad04:	fa06 f00b 	lsl.w	r0, r6, fp
   2ad08:	4328      	orrs	r0, r5
   2ad0a:	fa26 f501 	lsr.w	r5, r6, r1
   2ad0e:	6018      	str	r0, [r3, #0]
   2ad10:	f843 5f04 	str.w	r5, [r3, #4]!
   2ad14:	4543      	cmp	r3, r8
   2ad16:	d3f4      	bcc.n	2ad02 <__hexnan+0x13a>
   2ad18:	e781      	b.n	2ac1e <__hexnan+0x56>
   2ad1a:	1d19      	adds	r1, r3, #4
   2ad1c:	469c      	mov	ip, r3
   2ad1e:	9101      	str	r1, [sp, #4]
   2ad20:	e762      	b.n	2abe8 <__hexnan+0x20>
   2ad22:	9b03      	ldr	r3, [sp, #12]
   2ad24:	2b00      	cmp	r3, #0
   2ad26:	d0c7      	beq.n	2acb8 <__hexnan+0xf0>
   2ad28:	9b03      	ldr	r3, [sp, #12]
   2ad2a:	9c01      	ldr	r4, [sp, #4]
   2ad2c:	f1c3 0120 	rsb	r1, r3, #32
   2ad30:	f04f 33ff 	mov.w	r3, #4294967295
   2ad34:	f854 0c04 	ldr.w	r0, [r4, #-4]
   2ad38:	40cb      	lsrs	r3, r1
   2ad3a:	4003      	ands	r3, r0
   2ad3c:	f844 3c04 	str.w	r3, [r4, #-4]
   2ad40:	e7bd      	b.n	2acbe <__hexnan+0xf6>
   2ad42:	2929      	cmp	r1, #41	; 0x29
   2ad44:	d00a      	beq.n	2ad5c <__hexnan+0x194>
   2ad46:	2004      	movs	r0, #4
   2ad48:	b005      	add	sp, #20
   2ad4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ad4e:	2301      	movs	r3, #1
   2ad50:	2005      	movs	r0, #5
   2ad52:	f8cc 3000 	str.w	r3, [ip]
   2ad56:	b005      	add	sp, #20
   2ad58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ad5c:	3701      	adds	r7, #1
   2ad5e:	9902      	ldr	r1, [sp, #8]
   2ad60:	600f      	str	r7, [r1, #0]
   2ad62:	e775      	b.n	2ac50 <__hexnan+0x88>
   2ad64:	0002fb5c 	.word	0x0002fb5c

0002ad68 <iswspace>:
   2ad68:	2100      	movs	r1, #0
   2ad6a:	f000 b801 	b.w	2ad70 <iswspace_l>
   2ad6e:	bf00      	nop

0002ad70 <iswspace_l>:
   2ad70:	28ff      	cmp	r0, #255	; 0xff
   2ad72:	d804      	bhi.n	2ad7e <iswspace_l+0xe>
   2ad74:	4b03      	ldr	r3, [pc, #12]	; (2ad84 <iswspace_l+0x14>)
   2ad76:	5cc0      	ldrb	r0, [r0, r3]
   2ad78:	f000 0008 	and.w	r0, r0, #8
   2ad7c:	4770      	bx	lr
   2ad7e:	2000      	movs	r0, #0
   2ad80:	4770      	bx	lr
   2ad82:	bf00      	nop
   2ad84:	0002f961 	.word	0x0002f961

0002ad88 <__locale_mb_cur_max>:
   2ad88:	4b01      	ldr	r3, [pc, #4]	; (2ad90 <__locale_mb_cur_max+0x8>)
   2ad8a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   2ad8e:	4770      	bx	lr
   2ad90:	200208f0 	.word	0x200208f0

0002ad94 <_localeconv_r>:
   2ad94:	4800      	ldr	r0, [pc, #0]	; (2ad98 <_localeconv_r+0x4>)
   2ad96:	4770      	bx	lr
   2ad98:	200209e0 	.word	0x200209e0

0002ad9c <__retarget_lock_init_recursive>:
   2ad9c:	4770      	bx	lr
   2ad9e:	bf00      	nop

0002ada0 <__retarget_lock_close_recursive>:
   2ada0:	4770      	bx	lr
   2ada2:	bf00      	nop

0002ada4 <__retarget_lock_acquire_recursive>:
   2ada4:	4770      	bx	lr
   2ada6:	bf00      	nop

0002ada8 <__retarget_lock_release_recursive>:
   2ada8:	4770      	bx	lr
   2adaa:	bf00      	nop

0002adac <_lseek_r>:
   2adac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2adae:	460f      	mov	r7, r1
   2adb0:	4d08      	ldr	r5, [pc, #32]	; (2add4 <_lseek_r+0x28>)
   2adb2:	2600      	movs	r6, #0
   2adb4:	4611      	mov	r1, r2
   2adb6:	4604      	mov	r4, r0
   2adb8:	461a      	mov	r2, r3
   2adba:	4638      	mov	r0, r7
   2adbc:	602e      	str	r6, [r5, #0]
   2adbe:	f002 f979 	bl	2d0b4 <_lseek>
   2adc2:	1c43      	adds	r3, r0, #1
   2adc4:	d000      	beq.n	2adc8 <_lseek_r+0x1c>
   2adc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2adc8:	682b      	ldr	r3, [r5, #0]
   2adca:	2b00      	cmp	r3, #0
   2adcc:	d0fb      	beq.n	2adc6 <_lseek_r+0x1a>
   2adce:	6023      	str	r3, [r4, #0]
   2add0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2add2:	bf00      	nop
   2add4:	20026430 	.word	0x20026430

0002add8 <__swhatbuf_r>:
   2add8:	b570      	push	{r4, r5, r6, lr}
   2adda:	460c      	mov	r4, r1
   2addc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2ade0:	b096      	sub	sp, #88	; 0x58
   2ade2:	4615      	mov	r5, r2
   2ade4:	2900      	cmp	r1, #0
   2ade6:	461e      	mov	r6, r3
   2ade8:	db14      	blt.n	2ae14 <__swhatbuf_r+0x3c>
   2adea:	466a      	mov	r2, sp
   2adec:	f001 fad0 	bl	2c390 <_fstat_r>
   2adf0:	2800      	cmp	r0, #0
   2adf2:	db0f      	blt.n	2ae14 <__swhatbuf_r+0x3c>
   2adf4:	9a01      	ldr	r2, [sp, #4]
   2adf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2adfa:	f44f 6000 	mov.w	r0, #2048	; 0x800
   2adfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   2ae02:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   2ae06:	fab2 f282 	clz	r2, r2
   2ae0a:	0952      	lsrs	r2, r2, #5
   2ae0c:	6032      	str	r2, [r6, #0]
   2ae0e:	602b      	str	r3, [r5, #0]
   2ae10:	b016      	add	sp, #88	; 0x58
   2ae12:	bd70      	pop	{r4, r5, r6, pc}
   2ae14:	89a1      	ldrh	r1, [r4, #12]
   2ae16:	2300      	movs	r3, #0
   2ae18:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   2ae1c:	6033      	str	r3, [r6, #0]
   2ae1e:	d004      	beq.n	2ae2a <__swhatbuf_r+0x52>
   2ae20:	2240      	movs	r2, #64	; 0x40
   2ae22:	4618      	mov	r0, r3
   2ae24:	602a      	str	r2, [r5, #0]
   2ae26:	b016      	add	sp, #88	; 0x58
   2ae28:	bd70      	pop	{r4, r5, r6, pc}
   2ae2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2ae2e:	602b      	str	r3, [r5, #0]
   2ae30:	b016      	add	sp, #88	; 0x58
   2ae32:	bd70      	pop	{r4, r5, r6, pc}

0002ae34 <__smakebuf_r>:
   2ae34:	898b      	ldrh	r3, [r1, #12]
   2ae36:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ae38:	079d      	lsls	r5, r3, #30
   2ae3a:	b083      	sub	sp, #12
   2ae3c:	460c      	mov	r4, r1
   2ae3e:	d507      	bpl.n	2ae50 <__smakebuf_r+0x1c>
   2ae40:	f101 0343 	add.w	r3, r1, #67	; 0x43
   2ae44:	2201      	movs	r2, #1
   2ae46:	600b      	str	r3, [r1, #0]
   2ae48:	e9c1 3204 	strd	r3, r2, [r1, #16]
   2ae4c:	b003      	add	sp, #12
   2ae4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ae50:	4606      	mov	r6, r0
   2ae52:	ab01      	add	r3, sp, #4
   2ae54:	466a      	mov	r2, sp
   2ae56:	f7ff ffbf 	bl	2add8 <__swhatbuf_r>
   2ae5a:	9900      	ldr	r1, [sp, #0]
   2ae5c:	4605      	mov	r5, r0
   2ae5e:	4630      	mov	r0, r6
   2ae60:	f7fa ff90 	bl	25d84 <_malloc_r>
   2ae64:	b180      	cbz	r0, 2ae88 <__smakebuf_r+0x54>
   2ae66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2ae6a:	4f17      	ldr	r7, [pc, #92]	; (2aec8 <__smakebuf_r+0x94>)
   2ae6c:	f042 0380 	orr.w	r3, r2, #128	; 0x80
   2ae70:	9900      	ldr	r1, [sp, #0]
   2ae72:	9a01      	ldr	r2, [sp, #4]
   2ae74:	63f7      	str	r7, [r6, #60]	; 0x3c
   2ae76:	81a3      	strh	r3, [r4, #12]
   2ae78:	6020      	str	r0, [r4, #0]
   2ae7a:	e9c4 0104 	strd	r0, r1, [r4, #16]
   2ae7e:	b99a      	cbnz	r2, 2aea8 <__smakebuf_r+0x74>
   2ae80:	432b      	orrs	r3, r5
   2ae82:	81a3      	strh	r3, [r4, #12]
   2ae84:	b003      	add	sp, #12
   2ae86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ae88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2ae8c:	059a      	lsls	r2, r3, #22
   2ae8e:	d4dd      	bmi.n	2ae4c <__smakebuf_r+0x18>
   2ae90:	f023 0303 	bic.w	r3, r3, #3
   2ae94:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2ae98:	2101      	movs	r1, #1
   2ae9a:	f043 0302 	orr.w	r3, r3, #2
   2ae9e:	6022      	str	r2, [r4, #0]
   2aea0:	6122      	str	r2, [r4, #16]
   2aea2:	81a3      	strh	r3, [r4, #12]
   2aea4:	6161      	str	r1, [r4, #20]
   2aea6:	e7d1      	b.n	2ae4c <__smakebuf_r+0x18>
   2aea8:	4630      	mov	r0, r6
   2aeaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2aeae:	f001 fa85 	bl	2c3bc <_isatty_r>
   2aeb2:	b910      	cbnz	r0, 2aeba <__smakebuf_r+0x86>
   2aeb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2aeb8:	e7e2      	b.n	2ae80 <__smakebuf_r+0x4c>
   2aeba:	89a2      	ldrh	r2, [r4, #12]
   2aebc:	f022 0203 	bic.w	r2, r2, #3
   2aec0:	f042 0201 	orr.w	r2, r2, #1
   2aec4:	b213      	sxth	r3, r2
   2aec6:	e7db      	b.n	2ae80 <__smakebuf_r+0x4c>
   2aec8:	00029e2d 	.word	0x00029e2d

0002aecc <_mbrtowc_r>:
   2aecc:	b570      	push	{r4, r5, r6, lr}
   2aece:	b082      	sub	sp, #8
   2aed0:	4606      	mov	r6, r0
   2aed2:	9c06      	ldr	r4, [sp, #24]
   2aed4:	b142      	cbz	r2, 2aee8 <_mbrtowc_r+0x1c>
   2aed6:	4d0d      	ldr	r5, [pc, #52]	; (2af0c <_mbrtowc_r+0x40>)
   2aed8:	9400      	str	r4, [sp, #0]
   2aeda:	f8d5 50e4 	ldr.w	r5, [r5, #228]	; 0xe4
   2aede:	47a8      	blx	r5
   2aee0:	1c43      	adds	r3, r0, #1
   2aee2:	d00c      	beq.n	2aefe <_mbrtowc_r+0x32>
   2aee4:	b002      	add	sp, #8
   2aee6:	bd70      	pop	{r4, r5, r6, pc}
   2aee8:	4615      	mov	r5, r2
   2aeea:	4a08      	ldr	r2, [pc, #32]	; (2af0c <_mbrtowc_r+0x40>)
   2aeec:	2301      	movs	r3, #1
   2aeee:	9400      	str	r4, [sp, #0]
   2aef0:	4629      	mov	r1, r5
   2aef2:	f8d2 50e4 	ldr.w	r5, [r2, #228]	; 0xe4
   2aef6:	4a06      	ldr	r2, [pc, #24]	; (2af10 <_mbrtowc_r+0x44>)
   2aef8:	47a8      	blx	r5
   2aefa:	1c43      	adds	r3, r0, #1
   2aefc:	d1f2      	bne.n	2aee4 <_mbrtowc_r+0x18>
   2aefe:	2200      	movs	r2, #0
   2af00:	238a      	movs	r3, #138	; 0x8a
   2af02:	6022      	str	r2, [r4, #0]
   2af04:	6033      	str	r3, [r6, #0]
   2af06:	b002      	add	sp, #8
   2af08:	bd70      	pop	{r4, r5, r6, pc}
   2af0a:	bf00      	nop
   2af0c:	200208f0 	.word	0x200208f0
   2af10:	0002f92c 	.word	0x0002f92c

0002af14 <__ascii_mbtowc>:
   2af14:	b082      	sub	sp, #8
   2af16:	b149      	cbz	r1, 2af2c <__ascii_mbtowc+0x18>
   2af18:	b15a      	cbz	r2, 2af32 <__ascii_mbtowc+0x1e>
   2af1a:	b16b      	cbz	r3, 2af38 <__ascii_mbtowc+0x24>
   2af1c:	7813      	ldrb	r3, [r2, #0]
   2af1e:	600b      	str	r3, [r1, #0]
   2af20:	7812      	ldrb	r2, [r2, #0]
   2af22:	1e10      	subs	r0, r2, #0
   2af24:	bf18      	it	ne
   2af26:	2001      	movne	r0, #1
   2af28:	b002      	add	sp, #8
   2af2a:	4770      	bx	lr
   2af2c:	a901      	add	r1, sp, #4
   2af2e:	2a00      	cmp	r2, #0
   2af30:	d1f3      	bne.n	2af1a <__ascii_mbtowc+0x6>
   2af32:	4610      	mov	r0, r2
   2af34:	b002      	add	sp, #8
   2af36:	4770      	bx	lr
   2af38:	f06f 0001 	mvn.w	r0, #1
   2af3c:	e7f4      	b.n	2af28 <__ascii_mbtowc+0x14>
   2af3e:	bf00      	nop

0002af40 <memmove>:
   2af40:	4288      	cmp	r0, r1
   2af42:	b4f0      	push	{r4, r5, r6, r7}
   2af44:	d90d      	bls.n	2af62 <memmove+0x22>
   2af46:	188b      	adds	r3, r1, r2
   2af48:	4283      	cmp	r3, r0
   2af4a:	d90a      	bls.n	2af62 <memmove+0x22>
   2af4c:	1884      	adds	r4, r0, r2
   2af4e:	b132      	cbz	r2, 2af5e <memmove+0x1e>
   2af50:	4622      	mov	r2, r4
   2af52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2af56:	4299      	cmp	r1, r3
   2af58:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2af5c:	d1f9      	bne.n	2af52 <memmove+0x12>
   2af5e:	bcf0      	pop	{r4, r5, r6, r7}
   2af60:	4770      	bx	lr
   2af62:	2a0f      	cmp	r2, #15
   2af64:	d80e      	bhi.n	2af84 <memmove+0x44>
   2af66:	4603      	mov	r3, r0
   2af68:	1e54      	subs	r4, r2, #1
   2af6a:	2a00      	cmp	r2, #0
   2af6c:	d0f7      	beq.n	2af5e <memmove+0x1e>
   2af6e:	3401      	adds	r4, #1
   2af70:	3b01      	subs	r3, #1
   2af72:	440c      	add	r4, r1
   2af74:	f811 2b01 	ldrb.w	r2, [r1], #1
   2af78:	42a1      	cmp	r1, r4
   2af7a:	f803 2f01 	strb.w	r2, [r3, #1]!
   2af7e:	d1f9      	bne.n	2af74 <memmove+0x34>
   2af80:	bcf0      	pop	{r4, r5, r6, r7}
   2af82:	4770      	bx	lr
   2af84:	ea40 0301 	orr.w	r3, r0, r1
   2af88:	079b      	lsls	r3, r3, #30
   2af8a:	d13e      	bne.n	2b00a <memmove+0xca>
   2af8c:	f1a2 0310 	sub.w	r3, r2, #16
   2af90:	f101 0520 	add.w	r5, r1, #32
   2af94:	f101 0610 	add.w	r6, r1, #16
   2af98:	f100 0710 	add.w	r7, r0, #16
   2af9c:	f023 040f 	bic.w	r4, r3, #15
   2afa0:	091b      	lsrs	r3, r3, #4
   2afa2:	4425      	add	r5, r4
   2afa4:	f856 4c10 	ldr.w	r4, [r6, #-16]
   2afa8:	3610      	adds	r6, #16
   2afaa:	3710      	adds	r7, #16
   2afac:	f847 4c20 	str.w	r4, [r7, #-32]
   2afb0:	f856 4c1c 	ldr.w	r4, [r6, #-28]
   2afb4:	f847 4c1c 	str.w	r4, [r7, #-28]
   2afb8:	f856 4c18 	ldr.w	r4, [r6, #-24]
   2afbc:	f847 4c18 	str.w	r4, [r7, #-24]
   2afc0:	f856 4c14 	ldr.w	r4, [r6, #-20]
   2afc4:	42ae      	cmp	r6, r5
   2afc6:	f847 4c14 	str.w	r4, [r7, #-20]
   2afca:	d1eb      	bne.n	2afa4 <memmove+0x64>
   2afcc:	3301      	adds	r3, #1
   2afce:	f012 0f0c 	tst.w	r2, #12
   2afd2:	f002 050f 	and.w	r5, r2, #15
   2afd6:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   2afda:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   2afde:	d017      	beq.n	2b010 <memmove+0xd0>
   2afe0:	3d04      	subs	r5, #4
   2afe2:	1f1c      	subs	r4, r3, #4
   2afe4:	460e      	mov	r6, r1
   2afe6:	f025 0c03 	bic.w	ip, r5, #3
   2afea:	08ad      	lsrs	r5, r5, #2
   2afec:	449c      	add	ip, r3
   2afee:	f856 7b04 	ldr.w	r7, [r6], #4
   2aff2:	f844 7f04 	str.w	r7, [r4, #4]!
   2aff6:	4564      	cmp	r4, ip
   2aff8:	d1f9      	bne.n	2afee <memmove+0xae>
   2affa:	3501      	adds	r5, #1
   2affc:	f002 0203 	and.w	r2, r2, #3
   2b000:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   2b004:	eb01 0185 	add.w	r1, r1, r5, lsl #2
   2b008:	e7ae      	b.n	2af68 <memmove+0x28>
   2b00a:	1e54      	subs	r4, r2, #1
   2b00c:	4603      	mov	r3, r0
   2b00e:	e7ae      	b.n	2af6e <memmove+0x2e>
   2b010:	462a      	mov	r2, r5
   2b012:	e7a9      	b.n	2af68 <memmove+0x28>

0002b014 <_Balloc>:
   2b014:	b538      	push	{r3, r4, r5, lr}
   2b016:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2b018:	4605      	mov	r5, r0
   2b01a:	460c      	mov	r4, r1
   2b01c:	b14b      	cbz	r3, 2b032 <_Balloc+0x1e>
   2b01e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2b022:	b180      	cbz	r0, 2b046 <_Balloc+0x32>
   2b024:	6802      	ldr	r2, [r0, #0]
   2b026:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2b02a:	2300      	movs	r3, #0
   2b02c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   2b030:	bd38      	pop	{r3, r4, r5, pc}
   2b032:	2221      	movs	r2, #33	; 0x21
   2b034:	2104      	movs	r1, #4
   2b036:	f001 f915 	bl	2c264 <_calloc_r>
   2b03a:	4603      	mov	r3, r0
   2b03c:	64e8      	str	r0, [r5, #76]	; 0x4c
   2b03e:	2800      	cmp	r0, #0
   2b040:	d1ed      	bne.n	2b01e <_Balloc+0xa>
   2b042:	2000      	movs	r0, #0
   2b044:	bd38      	pop	{r3, r4, r5, pc}
   2b046:	2101      	movs	r1, #1
   2b048:	4628      	mov	r0, r5
   2b04a:	fa01 f504 	lsl.w	r5, r1, r4
   2b04e:	1d6a      	adds	r2, r5, #5
   2b050:	0092      	lsls	r2, r2, #2
   2b052:	f001 f907 	bl	2c264 <_calloc_r>
   2b056:	2800      	cmp	r0, #0
   2b058:	d0f3      	beq.n	2b042 <_Balloc+0x2e>
   2b05a:	e9c0 4501 	strd	r4, r5, [r0, #4]
   2b05e:	e7e4      	b.n	2b02a <_Balloc+0x16>

0002b060 <_Bfree>:
   2b060:	b131      	cbz	r1, 2b070 <_Bfree+0x10>
   2b062:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2b064:	684a      	ldr	r2, [r1, #4]
   2b066:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2b06a:	6008      	str	r0, [r1, #0]
   2b06c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   2b070:	4770      	bx	lr
   2b072:	bf00      	nop

0002b074 <__multadd>:
   2b074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b078:	460f      	mov	r7, r1
   2b07a:	4680      	mov	r8, r0
   2b07c:	690e      	ldr	r6, [r1, #16]
   2b07e:	f101 0014 	add.w	r0, r1, #20
   2b082:	b082      	sub	sp, #8
   2b084:	2100      	movs	r1, #0
   2b086:	6805      	ldr	r5, [r0, #0]
   2b088:	3101      	adds	r1, #1
   2b08a:	b2ac      	uxth	r4, r5
   2b08c:	428e      	cmp	r6, r1
   2b08e:	ea4f 4515 	mov.w	r5, r5, lsr #16
   2b092:	fb02 3304 	mla	r3, r2, r4, r3
   2b096:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   2b09a:	b29c      	uxth	r4, r3
   2b09c:	fb02 c305 	mla	r3, r2, r5, ip
   2b0a0:	eb04 4403 	add.w	r4, r4, r3, lsl #16
   2b0a4:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2b0a8:	f840 4b04 	str.w	r4, [r0], #4
   2b0ac:	dceb      	bgt.n	2b086 <__multadd+0x12>
   2b0ae:	b13b      	cbz	r3, 2b0c0 <__multadd+0x4c>
   2b0b0:	68ba      	ldr	r2, [r7, #8]
   2b0b2:	42b2      	cmp	r2, r6
   2b0b4:	dd08      	ble.n	2b0c8 <__multadd+0x54>
   2b0b6:	eb07 0286 	add.w	r2, r7, r6, lsl #2
   2b0ba:	3601      	adds	r6, #1
   2b0bc:	6153      	str	r3, [r2, #20]
   2b0be:	613e      	str	r6, [r7, #16]
   2b0c0:	4638      	mov	r0, r7
   2b0c2:	b002      	add	sp, #8
   2b0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b0c8:	6879      	ldr	r1, [r7, #4]
   2b0ca:	4640      	mov	r0, r8
   2b0cc:	9301      	str	r3, [sp, #4]
   2b0ce:	3101      	adds	r1, #1
   2b0d0:	f7ff ffa0 	bl	2b014 <_Balloc>
   2b0d4:	693a      	ldr	r2, [r7, #16]
   2b0d6:	f107 010c 	add.w	r1, r7, #12
   2b0da:	4604      	mov	r4, r0
   2b0dc:	3202      	adds	r2, #2
   2b0de:	300c      	adds	r0, #12
   2b0e0:	0092      	lsls	r2, r2, #2
   2b0e2:	f7e1 fd33 	bl	cb4c <memcpy>
   2b0e6:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
   2b0ea:	6879      	ldr	r1, [r7, #4]
   2b0ec:	9b01      	ldr	r3, [sp, #4]
   2b0ee:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2b0f2:	6038      	str	r0, [r7, #0]
   2b0f4:	f842 7021 	str.w	r7, [r2, r1, lsl #2]
   2b0f8:	4627      	mov	r7, r4
   2b0fa:	e7dc      	b.n	2b0b6 <__multadd+0x42>

0002b0fc <__s2b>:
   2b0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b100:	461f      	mov	r7, r3
   2b102:	4c24      	ldr	r4, [pc, #144]	; (2b194 <__s2b+0x98>)
   2b104:	4606      	mov	r6, r0
   2b106:	f103 0008 	add.w	r0, r3, #8
   2b10a:	2f09      	cmp	r7, #9
   2b10c:	4689      	mov	r9, r1
   2b10e:	fb84 3c00 	smull	r3, ip, r4, r0
   2b112:	ea4f 73e0 	mov.w	r3, r0, asr #31
   2b116:	4690      	mov	r8, r2
   2b118:	9d08      	ldr	r5, [sp, #32]
   2b11a:	ebc3 036c 	rsb	r3, r3, ip, asr #1
   2b11e:	dd37      	ble.n	2b190 <__s2b+0x94>
   2b120:	2401      	movs	r4, #1
   2b122:	2100      	movs	r1, #0
   2b124:	0064      	lsls	r4, r4, #1
   2b126:	3101      	adds	r1, #1
   2b128:	42a3      	cmp	r3, r4
   2b12a:	dcfb      	bgt.n	2b124 <__s2b+0x28>
   2b12c:	4630      	mov	r0, r6
   2b12e:	f7ff ff71 	bl	2b014 <_Balloc>
   2b132:	2301      	movs	r3, #1
   2b134:	f1b8 0f09 	cmp.w	r8, #9
   2b138:	4601      	mov	r1, r0
   2b13a:	e9c0 3504 	strd	r3, r5, [r0, #16]
   2b13e:	dd22      	ble.n	2b186 <__s2b+0x8a>
   2b140:	f109 0a09 	add.w	sl, r9, #9
   2b144:	44c1      	add	r9, r8
   2b146:	4655      	mov	r5, sl
   2b148:	f815 3b01 	ldrb.w	r3, [r5], #1
   2b14c:	220a      	movs	r2, #10
   2b14e:	4630      	mov	r0, r6
   2b150:	3b30      	subs	r3, #48	; 0x30
   2b152:	f7ff ff8f 	bl	2b074 <__multadd>
   2b156:	454d      	cmp	r5, r9
   2b158:	4601      	mov	r1, r0
   2b15a:	d1f5      	bne.n	2b148 <__s2b+0x4c>
   2b15c:	f1a8 0408 	sub.w	r4, r8, #8
   2b160:	4454      	add	r4, sl
   2b162:	4547      	cmp	r7, r8
   2b164:	dd0c      	ble.n	2b180 <__s2b+0x84>
   2b166:	eba7 0508 	sub.w	r5, r7, r8
   2b16a:	4425      	add	r5, r4
   2b16c:	f814 3b01 	ldrb.w	r3, [r4], #1
   2b170:	220a      	movs	r2, #10
   2b172:	4630      	mov	r0, r6
   2b174:	3b30      	subs	r3, #48	; 0x30
   2b176:	f7ff ff7d 	bl	2b074 <__multadd>
   2b17a:	42a5      	cmp	r5, r4
   2b17c:	4601      	mov	r1, r0
   2b17e:	d1f5      	bne.n	2b16c <__s2b+0x70>
   2b180:	4608      	mov	r0, r1
   2b182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b186:	f109 040a 	add.w	r4, r9, #10
   2b18a:	f04f 0809 	mov.w	r8, #9
   2b18e:	e7e8      	b.n	2b162 <__s2b+0x66>
   2b190:	2100      	movs	r1, #0
   2b192:	e7cb      	b.n	2b12c <__s2b+0x30>
   2b194:	38e38e39 	.word	0x38e38e39

0002b198 <__hi0bits>:
   2b198:	4b0f      	ldr	r3, [pc, #60]	; (2b1d8 <__hi0bits+0x40>)
   2b19a:	4003      	ands	r3, r0
   2b19c:	b9d3      	cbnz	r3, 2b1d4 <__hi0bits+0x3c>
   2b19e:	0400      	lsls	r0, r0, #16
   2b1a0:	2310      	movs	r3, #16
   2b1a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   2b1a6:	d101      	bne.n	2b1ac <__hi0bits+0x14>
   2b1a8:	3308      	adds	r3, #8
   2b1aa:	0200      	lsls	r0, r0, #8
   2b1ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   2b1b0:	d101      	bne.n	2b1b6 <__hi0bits+0x1e>
   2b1b2:	3304      	adds	r3, #4
   2b1b4:	0100      	lsls	r0, r0, #4
   2b1b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   2b1ba:	d101      	bne.n	2b1c0 <__hi0bits+0x28>
   2b1bc:	3302      	adds	r3, #2
   2b1be:	0080      	lsls	r0, r0, #2
   2b1c0:	2800      	cmp	r0, #0
   2b1c2:	db05      	blt.n	2b1d0 <__hi0bits+0x38>
   2b1c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   2b1c8:	f103 0301 	add.w	r3, r3, #1
   2b1cc:	bf08      	it	eq
   2b1ce:	2320      	moveq	r3, #32
   2b1d0:	4618      	mov	r0, r3
   2b1d2:	4770      	bx	lr
   2b1d4:	2300      	movs	r3, #0
   2b1d6:	e7e4      	b.n	2b1a2 <__hi0bits+0xa>
   2b1d8:	ffff0000 	.word	0xffff0000

0002b1dc <__lo0bits>:
   2b1dc:	6803      	ldr	r3, [r0, #0]
   2b1de:	4601      	mov	r1, r0
   2b1e0:	f013 0207 	ands.w	r2, r3, #7
   2b1e4:	d007      	beq.n	2b1f6 <__lo0bits+0x1a>
   2b1e6:	07da      	lsls	r2, r3, #31
   2b1e8:	d420      	bmi.n	2b22c <__lo0bits+0x50>
   2b1ea:	0798      	lsls	r0, r3, #30
   2b1ec:	d522      	bpl.n	2b234 <__lo0bits+0x58>
   2b1ee:	085b      	lsrs	r3, r3, #1
   2b1f0:	2001      	movs	r0, #1
   2b1f2:	600b      	str	r3, [r1, #0]
   2b1f4:	4770      	bx	lr
   2b1f6:	b298      	uxth	r0, r3
   2b1f8:	b1a8      	cbz	r0, 2b226 <__lo0bits+0x4a>
   2b1fa:	4610      	mov	r0, r2
   2b1fc:	f013 0fff 	tst.w	r3, #255	; 0xff
   2b200:	d101      	bne.n	2b206 <__lo0bits+0x2a>
   2b202:	3008      	adds	r0, #8
   2b204:	0a1b      	lsrs	r3, r3, #8
   2b206:	071a      	lsls	r2, r3, #28
   2b208:	d101      	bne.n	2b20e <__lo0bits+0x32>
   2b20a:	3004      	adds	r0, #4
   2b20c:	091b      	lsrs	r3, r3, #4
   2b20e:	079a      	lsls	r2, r3, #30
   2b210:	d101      	bne.n	2b216 <__lo0bits+0x3a>
   2b212:	3002      	adds	r0, #2
   2b214:	089b      	lsrs	r3, r3, #2
   2b216:	07da      	lsls	r2, r3, #31
   2b218:	d403      	bmi.n	2b222 <__lo0bits+0x46>
   2b21a:	085b      	lsrs	r3, r3, #1
   2b21c:	f100 0001 	add.w	r0, r0, #1
   2b220:	d006      	beq.n	2b230 <__lo0bits+0x54>
   2b222:	600b      	str	r3, [r1, #0]
   2b224:	4770      	bx	lr
   2b226:	0c1b      	lsrs	r3, r3, #16
   2b228:	2010      	movs	r0, #16
   2b22a:	e7e7      	b.n	2b1fc <__lo0bits+0x20>
   2b22c:	2000      	movs	r0, #0
   2b22e:	4770      	bx	lr
   2b230:	2020      	movs	r0, #32
   2b232:	4770      	bx	lr
   2b234:	089b      	lsrs	r3, r3, #2
   2b236:	2002      	movs	r0, #2
   2b238:	600b      	str	r3, [r1, #0]
   2b23a:	4770      	bx	lr

0002b23c <__i2b>:
   2b23c:	b510      	push	{r4, lr}
   2b23e:	460c      	mov	r4, r1
   2b240:	2101      	movs	r1, #1
   2b242:	f7ff fee7 	bl	2b014 <_Balloc>
   2b246:	2201      	movs	r2, #1
   2b248:	e9c0 2404 	strd	r2, r4, [r0, #16]
   2b24c:	bd10      	pop	{r4, pc}
   2b24e:	bf00      	nop

0002b250 <__multiply>:
   2b250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b254:	690e      	ldr	r6, [r1, #16]
   2b256:	b085      	sub	sp, #20
   2b258:	6917      	ldr	r7, [r2, #16]
   2b25a:	460d      	mov	r5, r1
   2b25c:	4614      	mov	r4, r2
   2b25e:	42be      	cmp	r6, r7
   2b260:	db05      	blt.n	2b26e <__multiply+0x1e>
   2b262:	463a      	mov	r2, r7
   2b264:	4623      	mov	r3, r4
   2b266:	4637      	mov	r7, r6
   2b268:	460c      	mov	r4, r1
   2b26a:	4616      	mov	r6, r2
   2b26c:	461d      	mov	r5, r3
   2b26e:	eb07 0806 	add.w	r8, r7, r6
   2b272:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   2b276:	4543      	cmp	r3, r8
   2b278:	bfb8      	it	lt
   2b27a:	3101      	addlt	r1, #1
   2b27c:	f7ff feca 	bl	2b014 <_Balloc>
   2b280:	f100 0914 	add.w	r9, r0, #20
   2b284:	9001      	str	r0, [sp, #4]
   2b286:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   2b28a:	45d1      	cmp	r9, sl
   2b28c:	d205      	bcs.n	2b29a <__multiply+0x4a>
   2b28e:	464b      	mov	r3, r9
   2b290:	2200      	movs	r2, #0
   2b292:	f843 2b04 	str.w	r2, [r3], #4
   2b296:	459a      	cmp	sl, r3
   2b298:	d8fb      	bhi.n	2b292 <__multiply+0x42>
   2b29a:	f105 0e14 	add.w	lr, r5, #20
   2b29e:	f104 0314 	add.w	r3, r4, #20
   2b2a2:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
   2b2a6:	461a      	mov	r2, r3
   2b2a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   2b2ac:	45de      	cmp	lr, fp
   2b2ae:	d260      	bcs.n	2b372 <__multiply+0x122>
   2b2b0:	1b3b      	subs	r3, r7, r4
   2b2b2:	3415      	adds	r4, #21
   2b2b4:	3b15      	subs	r3, #21
   2b2b6:	f023 0303 	bic.w	r3, r3, #3
   2b2ba:	3304      	adds	r3, #4
   2b2bc:	42a7      	cmp	r7, r4
   2b2be:	bf38      	it	cc
   2b2c0:	2304      	movcc	r3, #4
   2b2c2:	e9cd a802 	strd	sl, r8, [sp, #8]
   2b2c6:	4698      	mov	r8, r3
   2b2c8:	4692      	mov	sl, r2
   2b2ca:	e005      	b.n	2b2d8 <__multiply+0x88>
   2b2cc:	0c24      	lsrs	r4, r4, #16
   2b2ce:	d12b      	bne.n	2b328 <__multiply+0xd8>
   2b2d0:	45f3      	cmp	fp, lr
   2b2d2:	f109 0904 	add.w	r9, r9, #4
   2b2d6:	d94a      	bls.n	2b36e <__multiply+0x11e>
   2b2d8:	f85e 4b04 	ldr.w	r4, [lr], #4
   2b2dc:	b2a6      	uxth	r6, r4
   2b2de:	2e00      	cmp	r6, #0
   2b2e0:	d0f4      	beq.n	2b2cc <__multiply+0x7c>
   2b2e2:	4655      	mov	r5, sl
   2b2e4:	464c      	mov	r4, r9
   2b2e6:	2200      	movs	r2, #0
   2b2e8:	f855 3b04 	ldr.w	r3, [r5], #4
   2b2ec:	6820      	ldr	r0, [r4, #0]
   2b2ee:	b299      	uxth	r1, r3
   2b2f0:	42af      	cmp	r7, r5
   2b2f2:	fa1f fc80 	uxth.w	ip, r0
   2b2f6:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2b2fa:	fb06 c101 	mla	r1, r6, r1, ip
   2b2fe:	ea4f 4010 	mov.w	r0, r0, lsr #16
   2b302:	4411      	add	r1, r2
   2b304:	fb06 0203 	mla	r2, r6, r3, r0
   2b308:	b28b      	uxth	r3, r1
   2b30a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   2b30e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2b312:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2b316:	f844 3b04 	str.w	r3, [r4], #4
   2b31a:	d8e5      	bhi.n	2b2e8 <__multiply+0x98>
   2b31c:	f849 2008 	str.w	r2, [r9, r8]
   2b320:	f85e 4c04 	ldr.w	r4, [lr, #-4]
   2b324:	0c24      	lsrs	r4, r4, #16
   2b326:	d0d3      	beq.n	2b2d0 <__multiply+0x80>
   2b328:	f8d9 3000 	ldr.w	r3, [r9]
   2b32c:	4655      	mov	r5, sl
   2b32e:	464e      	mov	r6, r9
   2b330:	2200      	movs	r2, #0
   2b332:	4618      	mov	r0, r3
   2b334:	0c01      	lsrs	r1, r0, #16
   2b336:	8828      	ldrh	r0, [r5, #0]
   2b338:	b29b      	uxth	r3, r3
   2b33a:	fb04 1000 	mla	r0, r4, r0, r1
   2b33e:	4402      	add	r2, r0
   2b340:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2b344:	f846 3b04 	str.w	r3, [r6], #4
   2b348:	f855 3b04 	ldr.w	r3, [r5], #4
   2b34c:	6830      	ldr	r0, [r6, #0]
   2b34e:	0c1b      	lsrs	r3, r3, #16
   2b350:	42af      	cmp	r7, r5
   2b352:	b281      	uxth	r1, r0
   2b354:	fb04 1303 	mla	r3, r4, r3, r1
   2b358:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   2b35c:	ea4f 4213 	mov.w	r2, r3, lsr #16
   2b360:	d8e8      	bhi.n	2b334 <__multiply+0xe4>
   2b362:	45f3      	cmp	fp, lr
   2b364:	f849 3008 	str.w	r3, [r9, r8]
   2b368:	f109 0904 	add.w	r9, r9, #4
   2b36c:	d8b4      	bhi.n	2b2d8 <__multiply+0x88>
   2b36e:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   2b372:	f1b8 0f00 	cmp.w	r8, #0
   2b376:	dc03      	bgt.n	2b380 <__multiply+0x130>
   2b378:	e006      	b.n	2b388 <__multiply+0x138>
   2b37a:	f1b8 0801 	subs.w	r8, r8, #1
   2b37e:	d003      	beq.n	2b388 <__multiply+0x138>
   2b380:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   2b384:	2b00      	cmp	r3, #0
   2b386:	d0f8      	beq.n	2b37a <__multiply+0x12a>
   2b388:	9801      	ldr	r0, [sp, #4]
   2b38a:	f8c0 8010 	str.w	r8, [r0, #16]
   2b38e:	b005      	add	sp, #20
   2b390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b394 <__pow5mult>:
   2b394:	f012 0303 	ands.w	r3, r2, #3
   2b398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b39c:	4614      	mov	r4, r2
   2b39e:	4607      	mov	r7, r0
   2b3a0:	d12e      	bne.n	2b400 <__pow5mult+0x6c>
   2b3a2:	460e      	mov	r6, r1
   2b3a4:	10a4      	asrs	r4, r4, #2
   2b3a6:	d01c      	beq.n	2b3e2 <__pow5mult+0x4e>
   2b3a8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   2b3aa:	b395      	cbz	r5, 2b412 <__pow5mult+0x7e>
   2b3ac:	07e3      	lsls	r3, r4, #31
   2b3ae:	f04f 0800 	mov.w	r8, #0
   2b3b2:	d406      	bmi.n	2b3c2 <__pow5mult+0x2e>
   2b3b4:	1064      	asrs	r4, r4, #1
   2b3b6:	d014      	beq.n	2b3e2 <__pow5mult+0x4e>
   2b3b8:	6828      	ldr	r0, [r5, #0]
   2b3ba:	b1a8      	cbz	r0, 2b3e8 <__pow5mult+0x54>
   2b3bc:	4605      	mov	r5, r0
   2b3be:	07e3      	lsls	r3, r4, #31
   2b3c0:	d5f8      	bpl.n	2b3b4 <__pow5mult+0x20>
   2b3c2:	462a      	mov	r2, r5
   2b3c4:	4631      	mov	r1, r6
   2b3c6:	4638      	mov	r0, r7
   2b3c8:	f7ff ff42 	bl	2b250 <__multiply>
   2b3cc:	b1b6      	cbz	r6, 2b3fc <__pow5mult+0x68>
   2b3ce:	6871      	ldr	r1, [r6, #4]
   2b3d0:	1064      	asrs	r4, r4, #1
   2b3d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2b3d4:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   2b3d8:	6032      	str	r2, [r6, #0]
   2b3da:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   2b3de:	4606      	mov	r6, r0
   2b3e0:	d1ea      	bne.n	2b3b8 <__pow5mult+0x24>
   2b3e2:	4630      	mov	r0, r6
   2b3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b3e8:	462a      	mov	r2, r5
   2b3ea:	4629      	mov	r1, r5
   2b3ec:	4638      	mov	r0, r7
   2b3ee:	f7ff ff2f 	bl	2b250 <__multiply>
   2b3f2:	6028      	str	r0, [r5, #0]
   2b3f4:	4605      	mov	r5, r0
   2b3f6:	f8c0 8000 	str.w	r8, [r0]
   2b3fa:	e7e0      	b.n	2b3be <__pow5mult+0x2a>
   2b3fc:	4606      	mov	r6, r0
   2b3fe:	e7d9      	b.n	2b3b4 <__pow5mult+0x20>
   2b400:	1e5a      	subs	r2, r3, #1
   2b402:	4d0b      	ldr	r5, [pc, #44]	; (2b430 <__pow5mult+0x9c>)
   2b404:	2300      	movs	r3, #0
   2b406:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   2b40a:	f7ff fe33 	bl	2b074 <__multadd>
   2b40e:	4606      	mov	r6, r0
   2b410:	e7c8      	b.n	2b3a4 <__pow5mult+0x10>
   2b412:	2101      	movs	r1, #1
   2b414:	4638      	mov	r0, r7
   2b416:	f7ff fdfd 	bl	2b014 <_Balloc>
   2b41a:	f240 2271 	movw	r2, #625	; 0x271
   2b41e:	2101      	movs	r1, #1
   2b420:	2300      	movs	r3, #0
   2b422:	4605      	mov	r5, r0
   2b424:	e9c0 1204 	strd	r1, r2, [r0, #16]
   2b428:	64b8      	str	r0, [r7, #72]	; 0x48
   2b42a:	6003      	str	r3, [r0, #0]
   2b42c:	e7be      	b.n	2b3ac <__pow5mult+0x18>
   2b42e:	bf00      	nop
   2b430:	0002fc78 	.word	0x0002fc78

0002b434 <__lshift>:
   2b434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b438:	690e      	ldr	r6, [r1, #16]
   2b43a:	460c      	mov	r4, r1
   2b43c:	688b      	ldr	r3, [r1, #8]
   2b43e:	4690      	mov	r8, r2
   2b440:	eb06 1662 	add.w	r6, r6, r2, asr #5
   2b444:	4607      	mov	r7, r0
   2b446:	ea4f 1962 	mov.w	r9, r2, asr #5
   2b44a:	6849      	ldr	r1, [r1, #4]
   2b44c:	1c75      	adds	r5, r6, #1
   2b44e:	429d      	cmp	r5, r3
   2b450:	dd03      	ble.n	2b45a <__lshift+0x26>
   2b452:	005b      	lsls	r3, r3, #1
   2b454:	3101      	adds	r1, #1
   2b456:	429d      	cmp	r5, r3
   2b458:	dcfb      	bgt.n	2b452 <__lshift+0x1e>
   2b45a:	4638      	mov	r0, r7
   2b45c:	f7ff fdda 	bl	2b014 <_Balloc>
   2b460:	f1b9 0f00 	cmp.w	r9, #0
   2b464:	f100 0114 	add.w	r1, r0, #20
   2b468:	dd0f      	ble.n	2b48a <__lshift+0x56>
   2b46a:	f109 0205 	add.w	r2, r9, #5
   2b46e:	460b      	mov	r3, r1
   2b470:	f04f 0c00 	mov.w	ip, #0
   2b474:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   2b478:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   2b47c:	f843 cb04 	str.w	ip, [r3], #4
   2b480:	4293      	cmp	r3, r2
   2b482:	d1fb      	bne.n	2b47c <__lshift+0x48>
   2b484:	f1ae 0314 	sub.w	r3, lr, #20
   2b488:	4419      	add	r1, r3
   2b48a:	f104 0314 	add.w	r3, r4, #20
   2b48e:	6922      	ldr	r2, [r4, #16]
   2b490:	f018 081f 	ands.w	r8, r8, #31
   2b494:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   2b498:	d02c      	beq.n	2b4f4 <__lshift+0xc0>
   2b49a:	f1c8 0920 	rsb	r9, r8, #32
   2b49e:	468e      	mov	lr, r1
   2b4a0:	f04f 0a00 	mov.w	sl, #0
   2b4a4:	681a      	ldr	r2, [r3, #0]
   2b4a6:	fa02 f208 	lsl.w	r2, r2, r8
   2b4aa:	ea42 020a 	orr.w	r2, r2, sl
   2b4ae:	f84e 2b04 	str.w	r2, [lr], #4
   2b4b2:	f853 2b04 	ldr.w	r2, [r3], #4
   2b4b6:	459c      	cmp	ip, r3
   2b4b8:	fa22 fa09 	lsr.w	sl, r2, r9
   2b4bc:	d8f2      	bhi.n	2b4a4 <__lshift+0x70>
   2b4be:	ebac 0304 	sub.w	r3, ip, r4
   2b4c2:	f104 0215 	add.w	r2, r4, #21
   2b4c6:	f1ba 0f00 	cmp.w	sl, #0
   2b4ca:	bf18      	it	ne
   2b4cc:	462e      	movne	r6, r5
   2b4ce:	3b15      	subs	r3, #21
   2b4d0:	f023 0303 	bic.w	r3, r3, #3
   2b4d4:	3304      	adds	r3, #4
   2b4d6:	4594      	cmp	ip, r2
   2b4d8:	bf38      	it	cc
   2b4da:	2304      	movcc	r3, #4
   2b4dc:	f841 a003 	str.w	sl, [r1, r3]
   2b4e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2b4e2:	6862      	ldr	r2, [r4, #4]
   2b4e4:	6106      	str	r6, [r0, #16]
   2b4e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2b4ea:	6021      	str	r1, [r4, #0]
   2b4ec:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   2b4f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b4f4:	3904      	subs	r1, #4
   2b4f6:	f853 2b04 	ldr.w	r2, [r3], #4
   2b4fa:	459c      	cmp	ip, r3
   2b4fc:	f841 2f04 	str.w	r2, [r1, #4]!
   2b500:	d8f9      	bhi.n	2b4f6 <__lshift+0xc2>
   2b502:	e7ed      	b.n	2b4e0 <__lshift+0xac>

0002b504 <__mcmp>:
   2b504:	690b      	ldr	r3, [r1, #16]
   2b506:	b430      	push	{r4, r5}
   2b508:	4605      	mov	r5, r0
   2b50a:	6900      	ldr	r0, [r0, #16]
   2b50c:	1ac0      	subs	r0, r0, r3
   2b50e:	d111      	bne.n	2b534 <__mcmp+0x30>
   2b510:	3514      	adds	r5, #20
   2b512:	3114      	adds	r1, #20
   2b514:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   2b518:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   2b51c:	e001      	b.n	2b522 <__mcmp+0x1e>
   2b51e:	4295      	cmp	r5, r2
   2b520:	d208      	bcs.n	2b534 <__mcmp+0x30>
   2b522:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   2b526:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2b52a:	428c      	cmp	r4, r1
   2b52c:	d0f7      	beq.n	2b51e <__mcmp+0x1a>
   2b52e:	d203      	bcs.n	2b538 <__mcmp+0x34>
   2b530:	f04f 30ff 	mov.w	r0, #4294967295
   2b534:	bc30      	pop	{r4, r5}
   2b536:	4770      	bx	lr
   2b538:	2001      	movs	r0, #1
   2b53a:	bc30      	pop	{r4, r5}
   2b53c:	4770      	bx	lr
   2b53e:	bf00      	nop

0002b540 <__mdiff>:
   2b540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b544:	690b      	ldr	r3, [r1, #16]
   2b546:	b083      	sub	sp, #12
   2b548:	6914      	ldr	r4, [r2, #16]
   2b54a:	460e      	mov	r6, r1
   2b54c:	4617      	mov	r7, r2
   2b54e:	1b1b      	subs	r3, r3, r4
   2b550:	2b00      	cmp	r3, #0
   2b552:	d119      	bne.n	2b588 <__mdiff+0x48>
   2b554:	f101 0814 	add.w	r8, r1, #20
   2b558:	f102 0914 	add.w	r9, r2, #20
   2b55c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   2b560:	eb09 0484 	add.w	r4, r9, r4, lsl #2
   2b564:	e001      	b.n	2b56a <__mdiff+0x2a>
   2b566:	4598      	cmp	r8, r3
   2b568:	d27f      	bcs.n	2b66a <__mdiff+0x12a>
   2b56a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2b56e:	f854 2d04 	ldr.w	r2, [r4, #-4]!
   2b572:	4291      	cmp	r1, r2
   2b574:	d0f7      	beq.n	2b566 <__mdiff+0x26>
   2b576:	d20c      	bcs.n	2b592 <__mdiff+0x52>
   2b578:	4642      	mov	r2, r8
   2b57a:	4633      	mov	r3, r6
   2b57c:	46c8      	mov	r8, r9
   2b57e:	463e      	mov	r6, r7
   2b580:	4691      	mov	r9, r2
   2b582:	461f      	mov	r7, r3
   2b584:	2501      	movs	r5, #1
   2b586:	e005      	b.n	2b594 <__mdiff+0x54>
   2b588:	db67      	blt.n	2b65a <__mdiff+0x11a>
   2b58a:	f101 0814 	add.w	r8, r1, #20
   2b58e:	f102 0914 	add.w	r9, r2, #20
   2b592:	2500      	movs	r5, #0
   2b594:	6871      	ldr	r1, [r6, #4]
   2b596:	464c      	mov	r4, r9
   2b598:	f7ff fd3c 	bl	2b014 <_Balloc>
   2b59c:	693b      	ldr	r3, [r7, #16]
   2b59e:	6936      	ldr	r6, [r6, #16]
   2b5a0:	f100 0714 	add.w	r7, r0, #20
   2b5a4:	eb09 0a83 	add.w	sl, r9, r3, lsl #2
   2b5a8:	f1a8 0c04 	sub.w	ip, r8, #4
   2b5ac:	eb08 0e86 	add.w	lr, r8, r6, lsl #2
   2b5b0:	2300      	movs	r3, #0
   2b5b2:	9701      	str	r7, [sp, #4]
   2b5b4:	60c5      	str	r5, [r0, #12]
   2b5b6:	f85c 1f04 	ldr.w	r1, [ip, #4]!
   2b5ba:	f854 2b04 	ldr.w	r2, [r4], #4
   2b5be:	b28d      	uxth	r5, r1
   2b5c0:	fa1f fb82 	uxth.w	fp, r2
   2b5c4:	45a2      	cmp	sl, r4
   2b5c6:	441d      	add	r5, r3
   2b5c8:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2b5cc:	eba5 050b 	sub.w	r5, r5, fp
   2b5d0:	ebc2 4311 	rsb	r3, r2, r1, lsr #16
   2b5d4:	b2a9      	uxth	r1, r5
   2b5d6:	eb03 4325 	add.w	r3, r3, r5, asr #16
   2b5da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   2b5de:	ea4f 4323 	mov.w	r3, r3, asr #16
   2b5e2:	f847 1b04 	str.w	r1, [r7], #4
   2b5e6:	d8e6      	bhi.n	2b5b6 <__mdiff+0x76>
   2b5e8:	ea6f 0209 	mvn.w	r2, r9
   2b5ec:	f109 0901 	add.w	r9, r9, #1
   2b5f0:	9c01      	ldr	r4, [sp, #4]
   2b5f2:	4452      	add	r2, sl
   2b5f4:	45ca      	cmp	sl, r9
   2b5f6:	f022 0503 	bic.w	r5, r2, #3
   2b5fa:	462a      	mov	r2, r5
   2b5fc:	f105 0504 	add.w	r5, r5, #4
   2b600:	bf3c      	itt	cc
   2b602:	2504      	movcc	r5, #4
   2b604:	2200      	movcc	r2, #0
   2b606:	44a8      	add	r8, r5
   2b608:	4422      	add	r2, r4
   2b60a:	4425      	add	r5, r4
   2b60c:	45c6      	cmp	lr, r8
   2b60e:	d91a      	bls.n	2b646 <__mdiff+0x106>
   2b610:	462f      	mov	r7, r5
   2b612:	4644      	mov	r4, r8
   2b614:	f854 cb04 	ldr.w	ip, [r4], #4
   2b618:	fa1f f28c 	uxth.w	r2, ip
   2b61c:	45a6      	cmp	lr, r4
   2b61e:	4413      	add	r3, r2
   2b620:	ea4f 4223 	mov.w	r2, r3, asr #16
   2b624:	b299      	uxth	r1, r3
   2b626:	eb02 431c 	add.w	r3, r2, ip, lsr #16
   2b62a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   2b62e:	ea4f 4323 	mov.w	r3, r3, asr #16
   2b632:	f847 1b04 	str.w	r1, [r7], #4
   2b636:	d8ed      	bhi.n	2b614 <__mdiff+0xd4>
   2b638:	f10e 32ff 	add.w	r2, lr, #4294967295
   2b63c:	eba2 0808 	sub.w	r8, r2, r8
   2b640:	f028 0203 	bic.w	r2, r8, #3
   2b644:	442a      	add	r2, r5
   2b646:	b921      	cbnz	r1, 2b652 <__mdiff+0x112>
   2b648:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   2b64c:	3e01      	subs	r6, #1
   2b64e:	2b00      	cmp	r3, #0
   2b650:	d0fa      	beq.n	2b648 <__mdiff+0x108>
   2b652:	6106      	str	r6, [r0, #16]
   2b654:	b003      	add	sp, #12
   2b656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b65a:	f101 0914 	add.w	r9, r1, #20
   2b65e:	f102 0814 	add.w	r8, r2, #20
   2b662:	4616      	mov	r6, r2
   2b664:	2501      	movs	r5, #1
   2b666:	460f      	mov	r7, r1
   2b668:	e794      	b.n	2b594 <__mdiff+0x54>
   2b66a:	2100      	movs	r1, #0
   2b66c:	f7ff fcd2 	bl	2b014 <_Balloc>
   2b670:	2201      	movs	r2, #1
   2b672:	2300      	movs	r3, #0
   2b674:	e9c0 2304 	strd	r2, r3, [r0, #16]
   2b678:	b003      	add	sp, #12
   2b67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b67e:	bf00      	nop

0002b680 <__ulp>:
   2b680:	b082      	sub	sp, #8
   2b682:	4b17      	ldr	r3, [pc, #92]	; (2b6e0 <__ulp+0x60>)
   2b684:	ed8d 0b00 	vstr	d0, [sp]
   2b688:	9a01      	ldr	r2, [sp, #4]
   2b68a:	4013      	ands	r3, r2
   2b68c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   2b690:	2b00      	cmp	r3, #0
   2b692:	dd05      	ble.n	2b6a0 <__ulp+0x20>
   2b694:	2000      	movs	r0, #0
   2b696:	4619      	mov	r1, r3
   2b698:	ec41 0b10 	vmov	d0, r0, r1
   2b69c:	b002      	add	sp, #8
   2b69e:	4770      	bx	lr
   2b6a0:	425b      	negs	r3, r3
   2b6a2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   2b6a6:	ea4f 5223 	mov.w	r2, r3, asr #20
   2b6aa:	da08      	bge.n	2b6be <__ulp+0x3e>
   2b6ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   2b6b0:	2000      	movs	r0, #0
   2b6b2:	fa43 f102 	asr.w	r1, r3, r2
   2b6b6:	ec41 0b10 	vmov	d0, r0, r1
   2b6ba:	b002      	add	sp, #8
   2b6bc:	4770      	bx	lr
   2b6be:	3a14      	subs	r2, #20
   2b6c0:	2100      	movs	r1, #0
   2b6c2:	2a1e      	cmp	r2, #30
   2b6c4:	dc08      	bgt.n	2b6d8 <__ulp+0x58>
   2b6c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   2b6ca:	fa23 f202 	lsr.w	r2, r3, r2
   2b6ce:	4610      	mov	r0, r2
   2b6d0:	ec41 0b10 	vmov	d0, r0, r1
   2b6d4:	b002      	add	sp, #8
   2b6d6:	4770      	bx	lr
   2b6d8:	2201      	movs	r2, #1
   2b6da:	4610      	mov	r0, r2
   2b6dc:	e7f8      	b.n	2b6d0 <__ulp+0x50>
   2b6de:	bf00      	nop
   2b6e0:	7ff00000 	.word	0x7ff00000

0002b6e4 <__b2d>:
   2b6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b6e6:	6904      	ldr	r4, [r0, #16]
   2b6e8:	f100 0614 	add.w	r6, r0, #20
   2b6ec:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   2b6f0:	f854 5c04 	ldr.w	r5, [r4, #-4]
   2b6f4:	1f27      	subs	r7, r4, #4
   2b6f6:	4628      	mov	r0, r5
   2b6f8:	f7ff fd4e 	bl	2b198 <__hi0bits>
   2b6fc:	f1c0 0320 	rsb	r3, r0, #32
   2b700:	280a      	cmp	r0, #10
   2b702:	600b      	str	r3, [r1, #0]
   2b704:	dd34      	ble.n	2b770 <__b2d+0x8c>
   2b706:	42be      	cmp	r6, r7
   2b708:	d21e      	bcs.n	2b748 <__b2d+0x64>
   2b70a:	380b      	subs	r0, #11
   2b70c:	f854 7c08 	ldr.w	r7, [r4, #-8]
   2b710:	d026      	beq.n	2b760 <__b2d+0x7c>
   2b712:	f1c0 0e20 	rsb	lr, r0, #32
   2b716:	fa05 fc00 	lsl.w	ip, r5, r0
   2b71a:	f1a4 0508 	sub.w	r5, r4, #8
   2b71e:	fa27 f10e 	lsr.w	r1, r7, lr
   2b722:	42ae      	cmp	r6, r5
   2b724:	ea4c 0c01 	orr.w	ip, ip, r1
   2b728:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
   2b72c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   2b730:	d236      	bcs.n	2b7a0 <__b2d+0xbc>
   2b732:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   2b736:	fa07 f000 	lsl.w	r0, r7, r0
   2b73a:	fa21 f10e 	lsr.w	r1, r1, lr
   2b73e:	4301      	orrs	r1, r0
   2b740:	460a      	mov	r2, r1
   2b742:	ec43 2b10 	vmov	d0, r2, r3
   2b746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b748:	380b      	subs	r0, #11
   2b74a:	d008      	beq.n	2b75e <__b2d+0x7a>
   2b74c:	fa05 f000 	lsl.w	r0, r5, r0
   2b750:	2100      	movs	r1, #0
   2b752:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
   2b756:	460a      	mov	r2, r1
   2b758:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   2b75c:	e7f1      	b.n	2b742 <__b2d+0x5e>
   2b75e:	4607      	mov	r7, r0
   2b760:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   2b764:	463a      	mov	r2, r7
   2b766:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   2b76a:	ec43 2b10 	vmov	d0, r2, r3
   2b76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b770:	f1c0 0c0b 	rsb	ip, r0, #11
   2b774:	42be      	cmp	r6, r7
   2b776:	fa25 f10c 	lsr.w	r1, r5, ip
   2b77a:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   2b77e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   2b782:	d308      	bcc.n	2b796 <__b2d+0xb2>
   2b784:	2100      	movs	r1, #0
   2b786:	3015      	adds	r0, #21
   2b788:	fa05 f000 	lsl.w	r0, r5, r0
   2b78c:	ea40 0201 	orr.w	r2, r0, r1
   2b790:	ec43 2b10 	vmov	d0, r2, r3
   2b794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b796:	f854 1c08 	ldr.w	r1, [r4, #-8]
   2b79a:	fa21 f10c 	lsr.w	r1, r1, ip
   2b79e:	e7f2      	b.n	2b786 <__b2d+0xa2>
   2b7a0:	fa07 f100 	lsl.w	r1, r7, r0
   2b7a4:	460a      	mov	r2, r1
   2b7a6:	e7cc      	b.n	2b742 <__b2d+0x5e>

0002b7a8 <__d2b>:
   2b7a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b7ac:	ec55 4b10 	vmov	r4, r5, d0
   2b7b0:	f3c5 590a 	ubfx	r9, r5, #20, #11
   2b7b4:	b083      	sub	sp, #12
   2b7b6:	4688      	mov	r8, r1
   2b7b8:	2101      	movs	r1, #1
   2b7ba:	4617      	mov	r7, r2
   2b7bc:	f7ff fc2a 	bl	2b014 <_Balloc>
   2b7c0:	f3c5 0313 	ubfx	r3, r5, #0, #20
   2b7c4:	4606      	mov	r6, r0
   2b7c6:	f1b9 0f00 	cmp.w	r9, #0
   2b7ca:	d001      	beq.n	2b7d0 <__d2b+0x28>
   2b7cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2b7d0:	2c00      	cmp	r4, #0
   2b7d2:	9301      	str	r3, [sp, #4]
   2b7d4:	d01d      	beq.n	2b812 <__d2b+0x6a>
   2b7d6:	4668      	mov	r0, sp
   2b7d8:	9400      	str	r4, [sp, #0]
   2b7da:	f7ff fcff 	bl	2b1dc <__lo0bits>
   2b7de:	2800      	cmp	r0, #0
   2b7e0:	d133      	bne.n	2b84a <__d2b+0xa2>
   2b7e2:	e9dd 2300 	ldrd	r2, r3, [sp]
   2b7e6:	6172      	str	r2, [r6, #20]
   2b7e8:	2b00      	cmp	r3, #0
   2b7ea:	61b3      	str	r3, [r6, #24]
   2b7ec:	bf14      	ite	ne
   2b7ee:	2202      	movne	r2, #2
   2b7f0:	2201      	moveq	r2, #1
   2b7f2:	6132      	str	r2, [r6, #16]
   2b7f4:	f1b9 0f00 	cmp.w	r9, #0
   2b7f8:	d017      	beq.n	2b82a <__d2b+0x82>
   2b7fa:	f2a9 4333 	subw	r3, r9, #1075	; 0x433
   2b7fe:	f1c0 0235 	rsb	r2, r0, #53	; 0x35
   2b802:	4418      	add	r0, r3
   2b804:	f8c8 0000 	str.w	r0, [r8]
   2b808:	4630      	mov	r0, r6
   2b80a:	603a      	str	r2, [r7, #0]
   2b80c:	b003      	add	sp, #12
   2b80e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b812:	a801      	add	r0, sp, #4
   2b814:	f7ff fce2 	bl	2b1dc <__lo0bits>
   2b818:	2301      	movs	r3, #1
   2b81a:	9901      	ldr	r1, [sp, #4]
   2b81c:	3020      	adds	r0, #32
   2b81e:	461a      	mov	r2, r3
   2b820:	e9c6 3104 	strd	r3, r1, [r6, #16]
   2b824:	f1b9 0f00 	cmp.w	r9, #0
   2b828:	d1e7      	bne.n	2b7fa <__d2b+0x52>
   2b82a:	eb06 0382 	add.w	r3, r6, r2, lsl #2
   2b82e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2b832:	f8c8 0000 	str.w	r0, [r8]
   2b836:	6918      	ldr	r0, [r3, #16]
   2b838:	f7ff fcae 	bl	2b198 <__hi0bits>
   2b83c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   2b840:	6038      	str	r0, [r7, #0]
   2b842:	4630      	mov	r0, r6
   2b844:	b003      	add	sp, #12
   2b846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b84a:	9b01      	ldr	r3, [sp, #4]
   2b84c:	f1c0 0220 	rsb	r2, r0, #32
   2b850:	9900      	ldr	r1, [sp, #0]
   2b852:	fa03 f202 	lsl.w	r2, r3, r2
   2b856:	40c3      	lsrs	r3, r0
   2b858:	430a      	orrs	r2, r1
   2b85a:	9301      	str	r3, [sp, #4]
   2b85c:	6172      	str	r2, [r6, #20]
   2b85e:	e7c3      	b.n	2b7e8 <__d2b+0x40>

0002b860 <__ratio>:
   2b860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b864:	b083      	sub	sp, #12
   2b866:	460e      	mov	r6, r1
   2b868:	4607      	mov	r7, r0
   2b86a:	4669      	mov	r1, sp
   2b86c:	f7ff ff3a 	bl	2b6e4 <__b2d>
   2b870:	4630      	mov	r0, r6
   2b872:	a901      	add	r1, sp, #4
   2b874:	ec55 4b10 	vmov	r4, r5, d0
   2b878:	f7ff ff34 	bl	2b6e4 <__b2d>
   2b87c:	693b      	ldr	r3, [r7, #16]
   2b87e:	6936      	ldr	r6, [r6, #16]
   2b880:	e9dd 2700 	ldrd	r2, r7, [sp]
   2b884:	1b9e      	subs	r6, r3, r6
   2b886:	1bd3      	subs	r3, r2, r7
   2b888:	eb03 1346 	add.w	r3, r3, r6, lsl #5
   2b88c:	2b00      	cmp	r3, #0
   2b88e:	ec57 6b10 	vmov	r6, r7, d0
   2b892:	dd0d      	ble.n	2b8b0 <__ratio+0x50>
   2b894:	eb05 5103 	add.w	r1, r5, r3, lsl #20
   2b898:	460d      	mov	r5, r1
   2b89a:	4632      	mov	r2, r6
   2b89c:	463b      	mov	r3, r7
   2b89e:	4620      	mov	r0, r4
   2b8a0:	4629      	mov	r1, r5
   2b8a2:	f7e1 fbd1 	bl	d048 <__aeabi_ddiv>
   2b8a6:	ec41 0b10 	vmov	d0, r0, r1
   2b8aa:	b003      	add	sp, #12
   2b8ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b8b0:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   2b8b4:	ee10 6a10 	vmov	r6, s0
   2b8b8:	eb07 5903 	add.w	r9, r7, r3, lsl #20
   2b8bc:	464f      	mov	r7, r9
   2b8be:	e7ec      	b.n	2b89a <__ratio+0x3a>

0002b8c0 <__copybits>:
   2b8c0:	f102 0314 	add.w	r3, r2, #20
   2b8c4:	b470      	push	{r4, r5, r6}
   2b8c6:	1e4c      	subs	r4, r1, #1
   2b8c8:	6911      	ldr	r1, [r2, #16]
   2b8ca:	1164      	asrs	r4, r4, #5
   2b8cc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2b8d0:	3401      	adds	r4, #1
   2b8d2:	428b      	cmp	r3, r1
   2b8d4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   2b8d8:	d20c      	bcs.n	2b8f4 <__copybits+0x34>
   2b8da:	1f05      	subs	r5, r0, #4
   2b8dc:	f853 6b04 	ldr.w	r6, [r3], #4
   2b8e0:	4299      	cmp	r1, r3
   2b8e2:	f845 6f04 	str.w	r6, [r5, #4]!
   2b8e6:	d8f9      	bhi.n	2b8dc <__copybits+0x1c>
   2b8e8:	1a8b      	subs	r3, r1, r2
   2b8ea:	3b15      	subs	r3, #21
   2b8ec:	f023 0303 	bic.w	r3, r3, #3
   2b8f0:	3304      	adds	r3, #4
   2b8f2:	4418      	add	r0, r3
   2b8f4:	4284      	cmp	r4, r0
   2b8f6:	d904      	bls.n	2b902 <__copybits+0x42>
   2b8f8:	2300      	movs	r3, #0
   2b8fa:	f840 3b04 	str.w	r3, [r0], #4
   2b8fe:	4284      	cmp	r4, r0
   2b900:	d8fb      	bhi.n	2b8fa <__copybits+0x3a>
   2b902:	bc70      	pop	{r4, r5, r6}
   2b904:	4770      	bx	lr
   2b906:	bf00      	nop

0002b908 <__any_on>:
   2b908:	6903      	ldr	r3, [r0, #16]
   2b90a:	114a      	asrs	r2, r1, #5
   2b90c:	3014      	adds	r0, #20
   2b90e:	4293      	cmp	r3, r2
   2b910:	da09      	bge.n	2b926 <__any_on+0x1e>
   2b912:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2b916:	e002      	b.n	2b91e <__any_on+0x16>
   2b918:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   2b91c:	b9ca      	cbnz	r2, 2b952 <__any_on+0x4a>
   2b91e:	4283      	cmp	r3, r0
   2b920:	d8fa      	bhi.n	2b918 <__any_on+0x10>
   2b922:	2000      	movs	r0, #0
   2b924:	4770      	bx	lr
   2b926:	dd11      	ble.n	2b94c <__any_on+0x44>
   2b928:	f011 011f 	ands.w	r1, r1, #31
   2b92c:	d00e      	beq.n	2b94c <__any_on+0x44>
   2b92e:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   2b932:	b410      	push	{r4}
   2b934:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   2b938:	fa24 f201 	lsr.w	r2, r4, r1
   2b93c:	fa02 f101 	lsl.w	r1, r2, r1
   2b940:	428c      	cmp	r4, r1
   2b942:	d00c      	beq.n	2b95e <__any_on+0x56>
   2b944:	2001      	movs	r0, #1
   2b946:	f85d 4b04 	ldr.w	r4, [sp], #4
   2b94a:	4770      	bx	lr
   2b94c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   2b950:	e7e5      	b.n	2b91e <__any_on+0x16>
   2b952:	2001      	movs	r0, #1
   2b954:	4770      	bx	lr
   2b956:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   2b95a:	2a00      	cmp	r2, #0
   2b95c:	d1f2      	bne.n	2b944 <__any_on+0x3c>
   2b95e:	4283      	cmp	r3, r0
   2b960:	d8f9      	bhi.n	2b956 <__any_on+0x4e>
   2b962:	2000      	movs	r0, #0
   2b964:	f85d 4b04 	ldr.w	r4, [sp], #4
   2b968:	4770      	bx	lr
   2b96a:	bf00      	nop

0002b96c <_read_r>:
   2b96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b96e:	460f      	mov	r7, r1
   2b970:	4d08      	ldr	r5, [pc, #32]	; (2b994 <_read_r+0x28>)
   2b972:	2600      	movs	r6, #0
   2b974:	4611      	mov	r1, r2
   2b976:	4604      	mov	r4, r0
   2b978:	461a      	mov	r2, r3
   2b97a:	4638      	mov	r0, r7
   2b97c:	602e      	str	r6, [r5, #0]
   2b97e:	f001 fb8e 	bl	2d09e <_read>
   2b982:	1c43      	adds	r3, r0, #1
   2b984:	d000      	beq.n	2b988 <_read_r+0x1c>
   2b986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b988:	682b      	ldr	r3, [r5, #0]
   2b98a:	2b00      	cmp	r3, #0
   2b98c:	d0fb      	beq.n	2b986 <_read_r+0x1a>
   2b98e:	6023      	str	r3, [r4, #0]
   2b990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b992:	bf00      	nop
   2b994:	20026430 	.word	0x20026430

0002b998 <frexp>:
   2b998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b99a:	ec53 2b10 	vmov	r2, r3, d0
   2b99e:	4f15      	ldr	r7, [pc, #84]	; (2b9f4 <frexp+0x5c>)
   2b9a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   2b9a4:	2600      	movs	r6, #0
   2b9a6:	42b9      	cmp	r1, r7
   2b9a8:	6006      	str	r6, [r0, #0]
   2b9aa:	dc20      	bgt.n	2b9ee <frexp+0x56>
   2b9ac:	4604      	mov	r4, r0
   2b9ae:	ee10 0a10 	vmov	r0, s0
   2b9b2:	4308      	orrs	r0, r1
   2b9b4:	d01b      	beq.n	2b9ee <frexp+0x56>
   2b9b6:	4810      	ldr	r0, [pc, #64]	; (2b9f8 <frexp+0x60>)
   2b9b8:	461d      	mov	r5, r3
   2b9ba:	4018      	ands	r0, r3
   2b9bc:	b960      	cbnz	r0, 2b9d8 <frexp+0x40>
   2b9be:	4619      	mov	r1, r3
   2b9c0:	2200      	movs	r2, #0
   2b9c2:	ee10 0a10 	vmov	r0, s0
   2b9c6:	4b0d      	ldr	r3, [pc, #52]	; (2b9fc <frexp+0x64>)
   2b9c8:	f7e1 fa14 	bl	cdf4 <__aeabi_dmul>
   2b9cc:	f06f 0635 	mvn.w	r6, #53	; 0x35
   2b9d0:	460d      	mov	r5, r1
   2b9d2:	4602      	mov	r2, r0
   2b9d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   2b9d8:	4809      	ldr	r0, [pc, #36]	; (2ba00 <frexp+0x68>)
   2b9da:	1509      	asrs	r1, r1, #20
   2b9dc:	4028      	ands	r0, r5
   2b9de:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
   2b9e2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
   2b9e6:	4431      	add	r1, r6
   2b9e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   2b9ec:	6021      	str	r1, [r4, #0]
   2b9ee:	ec43 2b10 	vmov	d0, r2, r3
   2b9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b9f4:	7fefffff 	.word	0x7fefffff
   2b9f8:	7ff00000 	.word	0x7ff00000
   2b9fc:	43500000 	.word	0x43500000
   2ba00:	800fffff 	.word	0x800fffff

0002ba04 <__sccl>:
   2ba04:	b4f0      	push	{r4, r5, r6, r7}
   2ba06:	780c      	ldrb	r4, [r1, #0]
   2ba08:	2c5e      	cmp	r4, #94	; 0x5e
   2ba0a:	d023      	beq.n	2ba54 <__sccl+0x50>
   2ba0c:	2200      	movs	r2, #0
   2ba0e:	1c4e      	adds	r6, r1, #1
   2ba10:	4615      	mov	r5, r2
   2ba12:	1e43      	subs	r3, r0, #1
   2ba14:	f100 01ff 	add.w	r1, r0, #255	; 0xff
   2ba18:	f803 2f01 	strb.w	r2, [r3, #1]!
   2ba1c:	428b      	cmp	r3, r1
   2ba1e:	d1fb      	bne.n	2ba18 <__sccl+0x14>
   2ba20:	b1a4      	cbz	r4, 2ba4c <__sccl+0x48>
   2ba22:	f085 0201 	eor.w	r2, r5, #1
   2ba26:	ea6f 0c00 	mvn.w	ip, r0
   2ba2a:	1c71      	adds	r1, r6, #1
   2ba2c:	5502      	strb	r2, [r0, r4]
   2ba2e:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   2ba32:	1e4d      	subs	r5, r1, #1
   2ba34:	460e      	mov	r6, r1
   2ba36:	2b2d      	cmp	r3, #45	; 0x2d
   2ba38:	d011      	beq.n	2ba5e <__sccl+0x5a>
   2ba3a:	2b5d      	cmp	r3, #93	; 0x5d
   2ba3c:	d003      	beq.n	2ba46 <__sccl+0x42>
   2ba3e:	b10b      	cbz	r3, 2ba44 <__sccl+0x40>
   2ba40:	461c      	mov	r4, r3
   2ba42:	e7f2      	b.n	2ba2a <__sccl+0x26>
   2ba44:	462e      	mov	r6, r5
   2ba46:	4630      	mov	r0, r6
   2ba48:	bcf0      	pop	{r4, r5, r6, r7}
   2ba4a:	4770      	bx	lr
   2ba4c:	3e01      	subs	r6, #1
   2ba4e:	4630      	mov	r0, r6
   2ba50:	bcf0      	pop	{r4, r5, r6, r7}
   2ba52:	4770      	bx	lr
   2ba54:	2201      	movs	r2, #1
   2ba56:	1c8e      	adds	r6, r1, #2
   2ba58:	784c      	ldrb	r4, [r1, #1]
   2ba5a:	4615      	mov	r5, r2
   2ba5c:	e7d9      	b.n	2ba12 <__sccl+0xe>
   2ba5e:	780f      	ldrb	r7, [r1, #0]
   2ba60:	2f5d      	cmp	r7, #93	; 0x5d
   2ba62:	d011      	beq.n	2ba88 <__sccl+0x84>
   2ba64:	42bc      	cmp	r4, r7
   2ba66:	dc0f      	bgt.n	2ba88 <__sccl+0x84>
   2ba68:	1c66      	adds	r6, r4, #1
   2ba6a:	1983      	adds	r3, r0, r6
   2ba6c:	f803 2b01 	strb.w	r2, [r3], #1
   2ba70:	eb0c 0503 	add.w	r5, ip, r3
   2ba74:	42af      	cmp	r7, r5
   2ba76:	dcf9      	bgt.n	2ba6c <__sccl+0x68>
   2ba78:	43e3      	mvns	r3, r4
   2ba7a:	3102      	adds	r1, #2
   2ba7c:	443b      	add	r3, r7
   2ba7e:	42bc      	cmp	r4, r7
   2ba80:	bfa8      	it	ge
   2ba82:	2300      	movge	r3, #0
   2ba84:	199c      	adds	r4, r3, r6
   2ba86:	e7d2      	b.n	2ba2e <__sccl+0x2a>
   2ba88:	242d      	movs	r4, #45	; 0x2d
   2ba8a:	e7ce      	b.n	2ba2a <__sccl+0x26>

0002ba8c <nanf>:
   2ba8c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2ba94 <nanf+0x8>
   2ba90:	4770      	bx	lr
   2ba92:	bf00      	nop
   2ba94:	7fc00000 	.word	0x7fc00000

0002ba98 <_raise_r>:
   2ba98:	291f      	cmp	r1, #31
   2ba9a:	b538      	push	{r3, r4, r5, lr}
   2ba9c:	4605      	mov	r5, r0
   2ba9e:	d821      	bhi.n	2bae4 <_raise_r+0x4c>
   2baa0:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   2baa4:	460c      	mov	r4, r1
   2baa6:	b16a      	cbz	r2, 2bac4 <_raise_r+0x2c>
   2baa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   2baac:	b153      	cbz	r3, 2bac4 <_raise_r+0x2c>
   2baae:	2b01      	cmp	r3, #1
   2bab0:	d016      	beq.n	2bae0 <_raise_r+0x48>
   2bab2:	1c59      	adds	r1, r3, #1
   2bab4:	d010      	beq.n	2bad8 <_raise_r+0x40>
   2bab6:	2500      	movs	r5, #0
   2bab8:	4620      	mov	r0, r4
   2baba:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   2babe:	4798      	blx	r3
   2bac0:	4628      	mov	r0, r5
   2bac2:	bd38      	pop	{r3, r4, r5, pc}
   2bac4:	4628      	mov	r0, r5
   2bac6:	f000 f831 	bl	2bb2c <_getpid_r>
   2baca:	4622      	mov	r2, r4
   2bacc:	4601      	mov	r1, r0
   2bace:	4628      	mov	r0, r5
   2bad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2bad4:	f000 b814 	b.w	2bb00 <_kill_r>
   2bad8:	2316      	movs	r3, #22
   2bada:	2001      	movs	r0, #1
   2badc:	602b      	str	r3, [r5, #0]
   2bade:	bd38      	pop	{r3, r4, r5, pc}
   2bae0:	2000      	movs	r0, #0
   2bae2:	bd38      	pop	{r3, r4, r5, pc}
   2bae4:	2316      	movs	r3, #22
   2bae6:	f04f 30ff 	mov.w	r0, #4294967295
   2baea:	602b      	str	r3, [r5, #0]
   2baec:	bd38      	pop	{r3, r4, r5, pc}
   2baee:	bf00      	nop

0002baf0 <raise>:
   2baf0:	4b02      	ldr	r3, [pc, #8]	; (2bafc <raise+0xc>)
   2baf2:	4601      	mov	r1, r0
   2baf4:	6818      	ldr	r0, [r3, #0]
   2baf6:	f7ff bfcf 	b.w	2ba98 <_raise_r>
   2bafa:	bf00      	nop
   2bafc:	200204d8 	.word	0x200204d8

0002bb00 <_kill_r>:
   2bb00:	b570      	push	{r4, r5, r6, lr}
   2bb02:	460c      	mov	r4, r1
   2bb04:	4603      	mov	r3, r0
   2bb06:	4d08      	ldr	r5, [pc, #32]	; (2bb28 <_kill_r+0x28>)
   2bb08:	2600      	movs	r6, #0
   2bb0a:	4620      	mov	r0, r4
   2bb0c:	4611      	mov	r1, r2
   2bb0e:	461c      	mov	r4, r3
   2bb10:	602e      	str	r6, [r5, #0]
   2bb12:	f001 fad3 	bl	2d0bc <_kill>
   2bb16:	1c43      	adds	r3, r0, #1
   2bb18:	d000      	beq.n	2bb1c <_kill_r+0x1c>
   2bb1a:	bd70      	pop	{r4, r5, r6, pc}
   2bb1c:	682b      	ldr	r3, [r5, #0]
   2bb1e:	2b00      	cmp	r3, #0
   2bb20:	d0fb      	beq.n	2bb1a <_kill_r+0x1a>
   2bb22:	6023      	str	r3, [r4, #0]
   2bb24:	bd70      	pop	{r4, r5, r6, pc}
   2bb26:	bf00      	nop
   2bb28:	20026430 	.word	0x20026430

0002bb2c <_getpid_r>:
   2bb2c:	f001 bac8 	b.w	2d0c0 <_getpid>

0002bb30 <sprintf>:
   2bb30:	b40e      	push	{r1, r2, r3}
   2bb32:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bb34:	b09c      	sub	sp, #112	; 0x70
   2bb36:	4f0d      	ldr	r7, [pc, #52]	; (2bb6c <sprintf+0x3c>)
   2bb38:	4604      	mov	r4, r0
   2bb3a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   2bb3e:	ab21      	add	r3, sp, #132	; 0x84
   2bb40:	4e0b      	ldr	r6, [pc, #44]	; (2bb70 <sprintf+0x40>)
   2bb42:	a902      	add	r1, sp, #8
   2bb44:	6838      	ldr	r0, [r7, #0]
   2bb46:	f853 2b04 	ldr.w	r2, [r3], #4
   2bb4a:	9402      	str	r4, [sp, #8]
   2bb4c:	9301      	str	r3, [sp, #4]
   2bb4e:	9406      	str	r4, [sp, #24]
   2bb50:	9507      	str	r5, [sp, #28]
   2bb52:	e9cd 5604 	strd	r5, r6, [sp, #16]
   2bb56:	f7e2 feaf 	bl	e8b8 <_svfprintf_r>
   2bb5a:	9b02      	ldr	r3, [sp, #8]
   2bb5c:	2200      	movs	r2, #0
   2bb5e:	701a      	strb	r2, [r3, #0]
   2bb60:	b01c      	add	sp, #112	; 0x70
   2bb62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2bb66:	b003      	add	sp, #12
   2bb68:	4770      	bx	lr
   2bb6a:	bf00      	nop
   2bb6c:	200204d8 	.word	0x200204d8
   2bb70:	ffff0208 	.word	0xffff0208

0002bb74 <strnlen>:
   2bb74:	b191      	cbz	r1, 2bb9c <strnlen+0x28>
   2bb76:	4603      	mov	r3, r0
   2bb78:	b410      	push	{r4}
   2bb7a:	1844      	adds	r4, r0, r1
   2bb7c:	e001      	b.n	2bb82 <strnlen+0xe>
   2bb7e:	42a3      	cmp	r3, r4
   2bb80:	d008      	beq.n	2bb94 <strnlen+0x20>
   2bb82:	461a      	mov	r2, r3
   2bb84:	3301      	adds	r3, #1
   2bb86:	7811      	ldrb	r1, [r2, #0]
   2bb88:	2900      	cmp	r1, #0
   2bb8a:	d1f8      	bne.n	2bb7e <strnlen+0xa>
   2bb8c:	1a10      	subs	r0, r2, r0
   2bb8e:	f85d 4b04 	ldr.w	r4, [sp], #4
   2bb92:	4770      	bx	lr
   2bb94:	1a18      	subs	r0, r3, r0
   2bb96:	f85d 4b04 	ldr.w	r4, [sp], #4
   2bb9a:	4770      	bx	lr
   2bb9c:	4608      	mov	r0, r1
   2bb9e:	4770      	bx	lr

0002bba0 <_strtoll_l.isra.0>:
   2bba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bba4:	b087      	sub	sp, #28
   2bba6:	4698      	mov	r8, r3
   2bba8:	460d      	mov	r5, r1
   2bbaa:	9201      	str	r2, [sp, #4]
   2bbac:	4a55      	ldr	r2, [pc, #340]	; (2bd04 <_strtoll_l.isra.0+0x164>)
   2bbae:	9103      	str	r1, [sp, #12]
   2bbb0:	9005      	str	r0, [sp, #20]
   2bbb2:	4629      	mov	r1, r5
   2bbb4:	f815 4b01 	ldrb.w	r4, [r5], #1
   2bbb8:	5d13      	ldrb	r3, [r2, r4]
   2bbba:	f013 0308 	ands.w	r3, r3, #8
   2bbbe:	d1f8      	bne.n	2bbb2 <_strtoll_l.isra.0+0x12>
   2bbc0:	2c2d      	cmp	r4, #45	; 0x2d
   2bbc2:	d079      	beq.n	2bcb8 <_strtoll_l.isra.0+0x118>
   2bbc4:	2c2b      	cmp	r4, #43	; 0x2b
   2bbc6:	d012      	beq.n	2bbee <_strtoll_l.isra.0+0x4e>
   2bbc8:	9304      	str	r3, [sp, #16]
   2bbca:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   2bbce:	f04f 33ff 	mov.w	r3, #4294967295
   2bbd2:	9302      	str	r3, [sp, #8]
   2bbd4:	f038 0310 	bics.w	r3, r8, #16
   2bbd8:	d115      	bne.n	2bc06 <_strtoll_l.isra.0+0x66>
   2bbda:	2c30      	cmp	r4, #48	; 0x30
   2bbdc:	d075      	beq.n	2bcca <_strtoll_l.isra.0+0x12a>
   2bbde:	f1b8 0f00 	cmp.w	r8, #0
   2bbe2:	d110      	bne.n	2bc06 <_strtoll_l.isra.0+0x66>
   2bbe4:	260a      	movs	r6, #10
   2bbe6:	2700      	movs	r7, #0
   2bbe8:	f04f 080a 	mov.w	r8, #10
   2bbec:	e00d      	b.n	2bc0a <_strtoll_l.isra.0+0x6a>
   2bbee:	9304      	str	r3, [sp, #16]
   2bbf0:	f04f 33ff 	mov.w	r3, #4294967295
   2bbf4:	782c      	ldrb	r4, [r5, #0]
   2bbf6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   2bbfa:	9302      	str	r3, [sp, #8]
   2bbfc:	f038 0310 	bics.w	r3, r8, #16
   2bc00:	f101 0502 	add.w	r5, r1, #2
   2bc04:	d0e9      	beq.n	2bbda <_strtoll_l.isra.0+0x3a>
   2bc06:	4646      	mov	r6, r8
   2bc08:	17f7      	asrs	r7, r6, #31
   2bc0a:	4632      	mov	r2, r6
   2bc0c:	463b      	mov	r3, r7
   2bc0e:	9802      	ldr	r0, [sp, #8]
   2bc10:	4649      	mov	r1, r9
   2bc12:	f7e0 fe21 	bl	c858 <__aeabi_uldivmod>
   2bc16:	468c      	mov	ip, r1
   2bc18:	4682      	mov	sl, r0
   2bc1a:	2300      	movs	r3, #0
   2bc1c:	46e3      	mov	fp, ip
   2bc1e:	2000      	movs	r0, #0
   2bc20:	2100      	movs	r1, #0
   2bc22:	46a4      	mov	ip, r4
   2bc24:	e010      	b.n	2bc48 <_strtoll_l.isra.0+0xa8>
   2bc26:	f1ac 0437 	sub.w	r4, ip, #55	; 0x37
   2bc2a:	45a0      	cmp	r8, r4
   2bc2c:	dd1c      	ble.n	2bc68 <_strtoll_l.isra.0+0xc8>
   2bc2e:	2b00      	cmp	r3, #0
   2bc30:	db06      	blt.n	2bc40 <_strtoll_l.isra.0+0xa0>
   2bc32:	458b      	cmp	fp, r1
   2bc34:	bf08      	it	eq
   2bc36:	4582      	cmpeq	sl, r0
   2bc38:	d302      	bcc.n	2bc40 <_strtoll_l.isra.0+0xa0>
   2bc3a:	d127      	bne.n	2bc8c <_strtoll_l.isra.0+0xec>
   2bc3c:	42a2      	cmp	r2, r4
   2bc3e:	da25      	bge.n	2bc8c <_strtoll_l.isra.0+0xec>
   2bc40:	f04f 33ff 	mov.w	r3, #4294967295
   2bc44:	f815 cb01 	ldrb.w	ip, [r5], #1
   2bc48:	f1ac 0430 	sub.w	r4, ip, #48	; 0x30
   2bc4c:	2c09      	cmp	r4, #9
   2bc4e:	d9ec      	bls.n	2bc2a <_strtoll_l.isra.0+0x8a>
   2bc50:	f1ac 0441 	sub.w	r4, ip, #65	; 0x41
   2bc54:	2c19      	cmp	r4, #25
   2bc56:	d9e6      	bls.n	2bc26 <_strtoll_l.isra.0+0x86>
   2bc58:	f1ac 0461 	sub.w	r4, ip, #97	; 0x61
   2bc5c:	2c19      	cmp	r4, #25
   2bc5e:	d803      	bhi.n	2bc68 <_strtoll_l.isra.0+0xc8>
   2bc60:	f1ac 0457 	sub.w	r4, ip, #87	; 0x57
   2bc64:	45a0      	cmp	r8, r4
   2bc66:	dce2      	bgt.n	2bc2e <_strtoll_l.isra.0+0x8e>
   2bc68:	1c5a      	adds	r2, r3, #1
   2bc6a:	d01b      	beq.n	2bca4 <_strtoll_l.isra.0+0x104>
   2bc6c:	9a04      	ldr	r2, [sp, #16]
   2bc6e:	b112      	cbz	r2, 2bc76 <_strtoll_l.isra.0+0xd6>
   2bc70:	4240      	negs	r0, r0
   2bc72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2bc76:	9a01      	ldr	r2, [sp, #4]
   2bc78:	b12a      	cbz	r2, 2bc86 <_strtoll_l.isra.0+0xe6>
   2bc7a:	2b00      	cmp	r3, #0
   2bc7c:	d13e      	bne.n	2bcfc <_strtoll_l.isra.0+0x15c>
   2bc7e:	9b01      	ldr	r3, [sp, #4]
   2bc80:	461a      	mov	r2, r3
   2bc82:	9b03      	ldr	r3, [sp, #12]
   2bc84:	6013      	str	r3, [r2, #0]
   2bc86:	b007      	add	sp, #28
   2bc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bc8c:	fb00 fc07 	mul.w	ip, r0, r7
   2bc90:	2301      	movs	r3, #1
   2bc92:	fb06 cc01 	mla	ip, r6, r1, ip
   2bc96:	fba0 0106 	umull	r0, r1, r0, r6
   2bc9a:	4461      	add	r1, ip
   2bc9c:	1900      	adds	r0, r0, r4
   2bc9e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   2bca2:	e7cf      	b.n	2bc44 <_strtoll_l.isra.0+0xa4>
   2bca4:	2322      	movs	r3, #34	; 0x22
   2bca6:	9a05      	ldr	r2, [sp, #20]
   2bca8:	6013      	str	r3, [r2, #0]
   2bcaa:	9b01      	ldr	r3, [sp, #4]
   2bcac:	b1cb      	cbz	r3, 2bce2 <_strtoll_l.isra.0+0x142>
   2bcae:	1e6b      	subs	r3, r5, #1
   2bcb0:	9802      	ldr	r0, [sp, #8]
   2bcb2:	4649      	mov	r1, r9
   2bcb4:	9303      	str	r3, [sp, #12]
   2bcb6:	e7e2      	b.n	2bc7e <_strtoll_l.isra.0+0xde>
   2bcb8:	2300      	movs	r3, #0
   2bcba:	782c      	ldrb	r4, [r5, #0]
   2bcbc:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   2bcc0:	1c8d      	adds	r5, r1, #2
   2bcc2:	9302      	str	r3, [sp, #8]
   2bcc4:	2301      	movs	r3, #1
   2bcc6:	9304      	str	r3, [sp, #16]
   2bcc8:	e784      	b.n	2bbd4 <_strtoll_l.isra.0+0x34>
   2bcca:	782b      	ldrb	r3, [r5, #0]
   2bccc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2bcd0:	2b58      	cmp	r3, #88	; 0x58
   2bcd2:	d10b      	bne.n	2bcec <_strtoll_l.isra.0+0x14c>
   2bcd4:	786c      	ldrb	r4, [r5, #1]
   2bcd6:	2610      	movs	r6, #16
   2bcd8:	2700      	movs	r7, #0
   2bcda:	3502      	adds	r5, #2
   2bcdc:	f04f 0810 	mov.w	r8, #16
   2bce0:	e793      	b.n	2bc0a <_strtoll_l.isra.0+0x6a>
   2bce2:	9802      	ldr	r0, [sp, #8]
   2bce4:	4649      	mov	r1, r9
   2bce6:	b007      	add	sp, #28
   2bce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bcec:	f1b8 0f00 	cmp.w	r8, #0
   2bcf0:	d189      	bne.n	2bc06 <_strtoll_l.isra.0+0x66>
   2bcf2:	2608      	movs	r6, #8
   2bcf4:	2700      	movs	r7, #0
   2bcf6:	f04f 0808 	mov.w	r8, #8
   2bcfa:	e786      	b.n	2bc0a <_strtoll_l.isra.0+0x6a>
   2bcfc:	4689      	mov	r9, r1
   2bcfe:	9002      	str	r0, [sp, #8]
   2bd00:	e7d5      	b.n	2bcae <_strtoll_l.isra.0+0x10e>
   2bd02:	bf00      	nop
   2bd04:	0002f961 	.word	0x0002f961

0002bd08 <_strtoll_r>:
   2bd08:	f7ff bf4a 	b.w	2bba0 <_strtoll_l.isra.0>

0002bd0c <_strtoull_l.isra.0>:
   2bd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bd10:	b085      	sub	sp, #20
   2bd12:	468b      	mov	fp, r1
   2bd14:	469a      	mov	sl, r3
   2bd16:	460d      	mov	r5, r1
   2bd18:	9201      	str	r2, [sp, #4]
   2bd1a:	4a5d      	ldr	r2, [pc, #372]	; (2be90 <_strtoull_l.isra.0+0x184>)
   2bd1c:	9003      	str	r0, [sp, #12]
   2bd1e:	4629      	mov	r1, r5
   2bd20:	f815 4b01 	ldrb.w	r4, [r5], #1
   2bd24:	5d13      	ldrb	r3, [r2, r4]
   2bd26:	f013 0308 	ands.w	r3, r3, #8
   2bd2a:	d1f8      	bne.n	2bd1e <_strtoull_l.isra.0+0x12>
   2bd2c:	2c2d      	cmp	r4, #45	; 0x2d
   2bd2e:	f000 8086 	beq.w	2be3e <_strtoull_l.isra.0+0x132>
   2bd32:	2c2b      	cmp	r4, #43	; 0x2b
   2bd34:	d014      	beq.n	2bd60 <_strtoull_l.isra.0+0x54>
   2bd36:	9302      	str	r3, [sp, #8]
   2bd38:	f03a 0310 	bics.w	r3, sl, #16
   2bd3c:	d117      	bne.n	2bd6e <_strtoull_l.isra.0+0x62>
   2bd3e:	2c30      	cmp	r4, #48	; 0x30
   2bd40:	f000 8082 	beq.w	2be48 <_strtoull_l.isra.0+0x13c>
   2bd44:	f1ba 0f00 	cmp.w	sl, #0
   2bd48:	d111      	bne.n	2bd6e <_strtoull_l.isra.0+0x62>
   2bd4a:	2205      	movs	r2, #5
   2bd4c:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
   2bd50:	4f50      	ldr	r7, [pc, #320]	; (2be94 <_strtoull_l.isra.0+0x188>)
   2bd52:	f04f 080a 	mov.w	r8, #10
   2bd56:	f04f 0900 	mov.w	r9, #0
   2bd5a:	f04f 0a0a 	mov.w	sl, #10
   2bd5e:	e01c      	b.n	2bd9a <_strtoull_l.isra.0+0x8e>
   2bd60:	9302      	str	r3, [sp, #8]
   2bd62:	f03a 0310 	bics.w	r3, sl, #16
   2bd66:	782c      	ldrb	r4, [r5, #0]
   2bd68:	f101 0502 	add.w	r5, r1, #2
   2bd6c:	d0e7      	beq.n	2bd3e <_strtoull_l.isra.0+0x32>
   2bd6e:	ea4f 79ea 	mov.w	r9, sl, asr #31
   2bd72:	4652      	mov	r2, sl
   2bd74:	f04f 30ff 	mov.w	r0, #4294967295
   2bd78:	f04f 31ff 	mov.w	r1, #4294967295
   2bd7c:	464b      	mov	r3, r9
   2bd7e:	46d0      	mov	r8, sl
   2bd80:	f7e0 fd6a 	bl	c858 <__aeabi_uldivmod>
   2bd84:	468c      	mov	ip, r1
   2bd86:	4606      	mov	r6, r0
   2bd88:	4652      	mov	r2, sl
   2bd8a:	464b      	mov	r3, r9
   2bd8c:	f04f 30ff 	mov.w	r0, #4294967295
   2bd90:	f04f 31ff 	mov.w	r1, #4294967295
   2bd94:	4667      	mov	r7, ip
   2bd96:	f7e0 fd5f 	bl	c858 <__aeabi_uldivmod>
   2bd9a:	2300      	movs	r3, #0
   2bd9c:	2000      	movs	r0, #0
   2bd9e:	2100      	movs	r1, #0
   2bda0:	46a4      	mov	ip, r4
   2bda2:	e013      	b.n	2bdcc <_strtoull_l.isra.0+0xc0>
   2bda4:	f1ac 0437 	sub.w	r4, ip, #55	; 0x37
   2bda8:	45a2      	cmp	sl, r4
   2bdaa:	dd1f      	ble.n	2bdec <_strtoull_l.isra.0+0xe0>
   2bdac:	2b00      	cmp	r3, #0
   2bdae:	db09      	blt.n	2bdc4 <_strtoull_l.isra.0+0xb8>
   2bdb0:	428f      	cmp	r7, r1
   2bdb2:	bf08      	it	eq
   2bdb4:	4286      	cmpeq	r6, r0
   2bdb6:	d305      	bcc.n	2bdc4 <_strtoull_l.isra.0+0xb8>
   2bdb8:	42b9      	cmp	r1, r7
   2bdba:	bf08      	it	eq
   2bdbc:	42b0      	cmpeq	r0, r6
   2bdbe:	d125      	bne.n	2be0c <_strtoull_l.isra.0+0x100>
   2bdc0:	4294      	cmp	r4, r2
   2bdc2:	dd23      	ble.n	2be0c <_strtoull_l.isra.0+0x100>
   2bdc4:	f04f 33ff 	mov.w	r3, #4294967295
   2bdc8:	f815 cb01 	ldrb.w	ip, [r5], #1
   2bdcc:	f1ac 0430 	sub.w	r4, ip, #48	; 0x30
   2bdd0:	2c09      	cmp	r4, #9
   2bdd2:	d9e9      	bls.n	2bda8 <_strtoull_l.isra.0+0x9c>
   2bdd4:	f1ac 0441 	sub.w	r4, ip, #65	; 0x41
   2bdd8:	2c19      	cmp	r4, #25
   2bdda:	d9e3      	bls.n	2bda4 <_strtoull_l.isra.0+0x98>
   2bddc:	f1ac 0461 	sub.w	r4, ip, #97	; 0x61
   2bde0:	2c19      	cmp	r4, #25
   2bde2:	d803      	bhi.n	2bdec <_strtoull_l.isra.0+0xe0>
   2bde4:	f1ac 0457 	sub.w	r4, ip, #87	; 0x57
   2bde8:	45a2      	cmp	sl, r4
   2bdea:	dcdf      	bgt.n	2bdac <_strtoull_l.isra.0+0xa0>
   2bdec:	1c5a      	adds	r2, r3, #1
   2bdee:	d019      	beq.n	2be24 <_strtoull_l.isra.0+0x118>
   2bdf0:	9a02      	ldr	r2, [sp, #8]
   2bdf2:	b112      	cbz	r2, 2bdfa <_strtoull_l.isra.0+0xee>
   2bdf4:	4240      	negs	r0, r0
   2bdf6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2bdfa:	9a01      	ldr	r2, [sp, #4]
   2bdfc:	b11a      	cbz	r2, 2be06 <_strtoull_l.isra.0+0xfa>
   2bdfe:	b9db      	cbnz	r3, 2be38 <_strtoull_l.isra.0+0x12c>
   2be00:	9b01      	ldr	r3, [sp, #4]
   2be02:	f8c3 b000 	str.w	fp, [r3]
   2be06:	b005      	add	sp, #20
   2be08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2be0c:	fb00 fc09 	mul.w	ip, r0, r9
   2be10:	2301      	movs	r3, #1
   2be12:	fb08 cc01 	mla	ip, r8, r1, ip
   2be16:	fba0 0108 	umull	r0, r1, r0, r8
   2be1a:	4461      	add	r1, ip
   2be1c:	1900      	adds	r0, r0, r4
   2be1e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   2be22:	e7d1      	b.n	2bdc8 <_strtoull_l.isra.0+0xbc>
   2be24:	2322      	movs	r3, #34	; 0x22
   2be26:	9a03      	ldr	r2, [sp, #12]
   2be28:	f04f 30ff 	mov.w	r0, #4294967295
   2be2c:	f04f 31ff 	mov.w	r1, #4294967295
   2be30:	6013      	str	r3, [r2, #0]
   2be32:	9b01      	ldr	r3, [sp, #4]
   2be34:	2b00      	cmp	r3, #0
   2be36:	d0e6      	beq.n	2be06 <_strtoull_l.isra.0+0xfa>
   2be38:	f105 3bff 	add.w	fp, r5, #4294967295
   2be3c:	e7e0      	b.n	2be00 <_strtoull_l.isra.0+0xf4>
   2be3e:	2301      	movs	r3, #1
   2be40:	782c      	ldrb	r4, [r5, #0]
   2be42:	1c8d      	adds	r5, r1, #2
   2be44:	9302      	str	r3, [sp, #8]
   2be46:	e777      	b.n	2bd38 <_strtoull_l.isra.0+0x2c>
   2be48:	782b      	ldrb	r3, [r5, #0]
   2be4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2be4e:	2b58      	cmp	r3, #88	; 0x58
   2be50:	d10d      	bne.n	2be6e <_strtoull_l.isra.0+0x162>
   2be52:	786c      	ldrb	r4, [r5, #1]
   2be54:	220f      	movs	r2, #15
   2be56:	3502      	adds	r5, #2
   2be58:	f04f 36ff 	mov.w	r6, #4294967295
   2be5c:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   2be60:	f04f 0810 	mov.w	r8, #16
   2be64:	f04f 0900 	mov.w	r9, #0
   2be68:	f04f 0a10 	mov.w	sl, #16
   2be6c:	e795      	b.n	2bd9a <_strtoull_l.isra.0+0x8e>
   2be6e:	f1ba 0f00 	cmp.w	sl, #0
   2be72:	f47f af7c 	bne.w	2bd6e <_strtoull_l.isra.0+0x62>
   2be76:	2207      	movs	r2, #7
   2be78:	f04f 36ff 	mov.w	r6, #4294967295
   2be7c:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
   2be80:	f04f 0808 	mov.w	r8, #8
   2be84:	f04f 0900 	mov.w	r9, #0
   2be88:	f04f 0a08 	mov.w	sl, #8
   2be8c:	e785      	b.n	2bd9a <_strtoull_l.isra.0+0x8e>
   2be8e:	bf00      	nop
   2be90:	0002f961 	.word	0x0002f961
   2be94:	19999999 	.word	0x19999999

0002be98 <_strtoull_r>:
   2be98:	f7ff bf38 	b.w	2bd0c <_strtoull_l.isra.0>

0002be9c <__ssprint_r>:
   2be9c:	6893      	ldr	r3, [r2, #8]
   2be9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bea2:	4691      	mov	r9, r2
   2bea4:	b083      	sub	sp, #12
   2bea6:	2b00      	cmp	r3, #0
   2bea8:	d076      	beq.n	2bf98 <__ssprint_r+0xfc>
   2beaa:	6817      	ldr	r7, [r2, #0]
   2beac:	4680      	mov	r8, r0
   2beae:	460c      	mov	r4, r1
   2beb0:	6808      	ldr	r0, [r1, #0]
   2beb2:	3708      	adds	r7, #8
   2beb4:	688d      	ldr	r5, [r1, #8]
   2beb6:	e04b      	b.n	2bf50 <__ssprint_r+0xb4>
   2beb8:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   2bebc:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   2bec0:	d034      	beq.n	2bf2c <__ssprint_r+0x90>
   2bec2:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2bec6:	eb12 0242 	adds.w	r2, r2, r2, lsl #1
   2beca:	eba0 0501 	sub.w	r5, r0, r1
   2bece:	bf48      	it	mi
   2bed0:	3201      	addmi	r2, #1
   2bed2:	19a8      	adds	r0, r5, r6
   2bed4:	ea4f 0b62 	mov.w	fp, r2, asr #1
   2bed8:	3001      	adds	r0, #1
   2beda:	4558      	cmp	r0, fp
   2bedc:	465a      	mov	r2, fp
   2bede:	d901      	bls.n	2bee4 <__ssprint_r+0x48>
   2bee0:	4683      	mov	fp, r0
   2bee2:	4602      	mov	r2, r0
   2bee4:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   2bee8:	9301      	str	r3, [sp, #4]
   2beea:	d03b      	beq.n	2bf64 <__ssprint_r+0xc8>
   2beec:	4611      	mov	r1, r2
   2beee:	4640      	mov	r0, r8
   2bef0:	f7f9 ff48 	bl	25d84 <_malloc_r>
   2bef4:	9b01      	ldr	r3, [sp, #4]
   2bef6:	4682      	mov	sl, r0
   2bef8:	2800      	cmp	r0, #0
   2befa:	d03e      	beq.n	2bf7a <__ssprint_r+0xde>
   2befc:	462a      	mov	r2, r5
   2befe:	6921      	ldr	r1, [r4, #16]
   2bf00:	9301      	str	r3, [sp, #4]
   2bf02:	f7e0 fe23 	bl	cb4c <memcpy>
   2bf06:	89a2      	ldrh	r2, [r4, #12]
   2bf08:	9b01      	ldr	r3, [sp, #4]
   2bf0a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2bf0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2bf12:	81a2      	strh	r2, [r4, #12]
   2bf14:	eb0a 0005 	add.w	r0, sl, r5
   2bf18:	ebab 0205 	sub.w	r2, fp, r5
   2bf1c:	f8c4 a010 	str.w	sl, [r4, #16]
   2bf20:	4635      	mov	r5, r6
   2bf22:	46b2      	mov	sl, r6
   2bf24:	6020      	str	r0, [r4, #0]
   2bf26:	60a2      	str	r2, [r4, #8]
   2bf28:	f8c4 b014 	str.w	fp, [r4, #20]
   2bf2c:	4619      	mov	r1, r3
   2bf2e:	4652      	mov	r2, sl
   2bf30:	f7ff f806 	bl	2af40 <memmove>
   2bf34:	68a0      	ldr	r0, [r4, #8]
   2bf36:	f8d9 1008 	ldr.w	r1, [r9, #8]
   2bf3a:	6823      	ldr	r3, [r4, #0]
   2bf3c:	1b45      	subs	r5, r0, r5
   2bf3e:	1b8e      	subs	r6, r1, r6
   2bf40:	eb03 000a 	add.w	r0, r3, sl
   2bf44:	60a5      	str	r5, [r4, #8]
   2bf46:	6020      	str	r0, [r4, #0]
   2bf48:	f8c9 6008 	str.w	r6, [r9, #8]
   2bf4c:	b326      	cbz	r6, 2bf98 <__ssprint_r+0xfc>
   2bf4e:	3708      	adds	r7, #8
   2bf50:	e957 3602 	ldrd	r3, r6, [r7, #-8]
   2bf54:	2e00      	cmp	r6, #0
   2bf56:	d0fa      	beq.n	2bf4e <__ssprint_r+0xb2>
   2bf58:	42b5      	cmp	r5, r6
   2bf5a:	46aa      	mov	sl, r5
   2bf5c:	d9ac      	bls.n	2beb8 <__ssprint_r+0x1c>
   2bf5e:	4635      	mov	r5, r6
   2bf60:	46b2      	mov	sl, r6
   2bf62:	e7e3      	b.n	2bf2c <__ssprint_r+0x90>
   2bf64:	4640      	mov	r0, r8
   2bf66:	f7fa faab 	bl	264c0 <_realloc_r>
   2bf6a:	9b01      	ldr	r3, [sp, #4]
   2bf6c:	4682      	mov	sl, r0
   2bf6e:	2800      	cmp	r0, #0
   2bf70:	d1d0      	bne.n	2bf14 <__ssprint_r+0x78>
   2bf72:	6921      	ldr	r1, [r4, #16]
   2bf74:	4640      	mov	r0, r8
   2bf76:	f7fe f86f 	bl	2a058 <_free_r>
   2bf7a:	230c      	movs	r3, #12
   2bf7c:	2200      	movs	r2, #0
   2bf7e:	f04f 30ff 	mov.w	r0, #4294967295
   2bf82:	f8c8 3000 	str.w	r3, [r8]
   2bf86:	89a3      	ldrh	r3, [r4, #12]
   2bf88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2bf8c:	81a3      	strh	r3, [r4, #12]
   2bf8e:	e9c9 2201 	strd	r2, r2, [r9, #4]
   2bf92:	b003      	add	sp, #12
   2bf94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bf98:	2000      	movs	r0, #0
   2bf9a:	f8c9 0004 	str.w	r0, [r9, #4]
   2bf9e:	b003      	add	sp, #12
   2bfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002bfa4 <_sungetc_r>:
   2bfa4:	b538      	push	{r3, r4, r5, lr}
   2bfa6:	1c4b      	adds	r3, r1, #1
   2bfa8:	d01a      	beq.n	2bfe0 <_sungetc_r+0x3c>
   2bfaa:	8993      	ldrh	r3, [r2, #12]
   2bfac:	4614      	mov	r4, r2
   2bfae:	6b12      	ldr	r2, [r2, #48]	; 0x30
   2bfb0:	b2cd      	uxtb	r5, r1
   2bfb2:	f023 0320 	bic.w	r3, r3, #32
   2bfb6:	81a3      	strh	r3, [r4, #12]
   2bfb8:	b1aa      	cbz	r2, 2bfe6 <_sungetc_r+0x42>
   2bfba:	6862      	ldr	r2, [r4, #4]
   2bfbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2bfbe:	429a      	cmp	r2, r3
   2bfc0:	da09      	bge.n	2bfd6 <_sungetc_r+0x32>
   2bfc2:	6823      	ldr	r3, [r4, #0]
   2bfc4:	1e5a      	subs	r2, r3, #1
   2bfc6:	6022      	str	r2, [r4, #0]
   2bfc8:	f803 5c01 	strb.w	r5, [r3, #-1]
   2bfcc:	6863      	ldr	r3, [r4, #4]
   2bfce:	3301      	adds	r3, #1
   2bfd0:	6063      	str	r3, [r4, #4]
   2bfd2:	4628      	mov	r0, r5
   2bfd4:	bd38      	pop	{r3, r4, r5, pc}
   2bfd6:	4621      	mov	r1, r4
   2bfd8:	f000 f884 	bl	2c0e4 <__submore>
   2bfdc:	2800      	cmp	r0, #0
   2bfde:	d0f0      	beq.n	2bfc2 <_sungetc_r+0x1e>
   2bfe0:	f04f 35ff 	mov.w	r5, #4294967295
   2bfe4:	e7f5      	b.n	2bfd2 <_sungetc_r+0x2e>
   2bfe6:	6922      	ldr	r2, [r4, #16]
   2bfe8:	6823      	ldr	r3, [r4, #0]
   2bfea:	b12a      	cbz	r2, 2bff8 <_sungetc_r+0x54>
   2bfec:	429a      	cmp	r2, r3
   2bfee:	d203      	bcs.n	2bff8 <_sungetc_r+0x54>
   2bff0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   2bff4:	42aa      	cmp	r2, r5
   2bff6:	d00f      	beq.n	2c018 <_sungetc_r+0x74>
   2bff8:	6862      	ldr	r2, [r4, #4]
   2bffa:	f104 0040 	add.w	r0, r4, #64	; 0x40
   2bffe:	63a3      	str	r3, [r4, #56]	; 0x38
   2c000:	2103      	movs	r1, #3
   2c002:	4623      	mov	r3, r4
   2c004:	63e2      	str	r2, [r4, #60]	; 0x3c
   2c006:	2201      	movs	r2, #1
   2c008:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
   2c00c:	f803 5f42 	strb.w	r5, [r3, #66]!
   2c010:	4628      	mov	r0, r5
   2c012:	e9c4 3200 	strd	r3, r2, [r4]
   2c016:	bd38      	pop	{r3, r4, r5, pc}
   2c018:	6862      	ldr	r2, [r4, #4]
   2c01a:	3b01      	subs	r3, #1
   2c01c:	3201      	adds	r2, #1
   2c01e:	e9c4 3200 	strd	r3, r2, [r4]
   2c022:	e7d6      	b.n	2bfd2 <_sungetc_r+0x2e>

0002c024 <__ssrefill_r>:
   2c024:	b510      	push	{r4, lr}
   2c026:	460c      	mov	r4, r1
   2c028:	6b09      	ldr	r1, [r1, #48]	; 0x30
   2c02a:	b169      	cbz	r1, 2c048 <__ssrefill_r+0x24>
   2c02c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2c030:	4299      	cmp	r1, r3
   2c032:	d001      	beq.n	2c038 <__ssrefill_r+0x14>
   2c034:	f7fe f810 	bl	2a058 <_free_r>
   2c038:	2000      	movs	r0, #0
   2c03a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2c03c:	6320      	str	r0, [r4, #48]	; 0x30
   2c03e:	6063      	str	r3, [r4, #4]
   2c040:	b113      	cbz	r3, 2c048 <__ssrefill_r+0x24>
   2c042:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2c044:	6023      	str	r3, [r4, #0]
   2c046:	bd10      	pop	{r4, pc}
   2c048:	89a3      	ldrh	r3, [r4, #12]
   2c04a:	2100      	movs	r1, #0
   2c04c:	6922      	ldr	r2, [r4, #16]
   2c04e:	f04f 30ff 	mov.w	r0, #4294967295
   2c052:	f043 0320 	orr.w	r3, r3, #32
   2c056:	e9c4 2100 	strd	r2, r1, [r4]
   2c05a:	81a3      	strh	r3, [r4, #12]
   2c05c:	bd10      	pop	{r4, pc}
   2c05e:	bf00      	nop

0002c060 <_sfread_r>:
   2c060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c064:	fb02 fa03 	mul.w	sl, r2, r3
   2c068:	b083      	sub	sp, #12
   2c06a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c06c:	e9cd 3200 	strd	r3, r2, [sp]
   2c070:	f1ba 0f00 	cmp.w	sl, #0
   2c074:	d027      	beq.n	2c0c6 <_sfread_r+0x66>
   2c076:	4680      	mov	r8, r0
   2c078:	460e      	mov	r6, r1
   2c07a:	4657      	mov	r7, sl
   2c07c:	f04f 0900 	mov.w	r9, #0
   2c080:	e00e      	b.n	2c0a0 <_sfread_r+0x40>
   2c082:	6821      	ldr	r1, [r4, #0]
   2c084:	442e      	add	r6, r5
   2c086:	f7e0 fd61 	bl	cb4c <memcpy>
   2c08a:	6823      	ldr	r3, [r4, #0]
   2c08c:	4621      	mov	r1, r4
   2c08e:	4640      	mov	r0, r8
   2c090:	442b      	add	r3, r5
   2c092:	f8c4 9004 	str.w	r9, [r4, #4]
   2c096:	6023      	str	r3, [r4, #0]
   2c098:	f7ff ffc4 	bl	2c024 <__ssrefill_r>
   2c09c:	b9b8      	cbnz	r0, 2c0ce <_sfread_r+0x6e>
   2c09e:	465f      	mov	r7, fp
   2c0a0:	6865      	ldr	r5, [r4, #4]
   2c0a2:	4630      	mov	r0, r6
   2c0a4:	42bd      	cmp	r5, r7
   2c0a6:	462a      	mov	r2, r5
   2c0a8:	eba7 0b05 	sub.w	fp, r7, r5
   2c0ac:	d3e9      	bcc.n	2c082 <_sfread_r+0x22>
   2c0ae:	463a      	mov	r2, r7
   2c0b0:	6821      	ldr	r1, [r4, #0]
   2c0b2:	f8dd a000 	ldr.w	sl, [sp]
   2c0b6:	f7e0 fd49 	bl	cb4c <memcpy>
   2c0ba:	e9d4 3200 	ldrd	r3, r2, [r4]
   2c0be:	1bd2      	subs	r2, r2, r7
   2c0c0:	441f      	add	r7, r3
   2c0c2:	e9c4 7200 	strd	r7, r2, [r4]
   2c0c6:	4650      	mov	r0, sl
   2c0c8:	b003      	add	sp, #12
   2c0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c0ce:	44aa      	add	sl, r5
   2c0d0:	9b01      	ldr	r3, [sp, #4]
   2c0d2:	ebaa 0707 	sub.w	r7, sl, r7
   2c0d6:	fbb7 faf3 	udiv	sl, r7, r3
   2c0da:	4650      	mov	r0, sl
   2c0dc:	b003      	add	sp, #12
   2c0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c0e2:	bf00      	nop

0002c0e4 <__submore>:
   2c0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c0e8:	460c      	mov	r4, r1
   2c0ea:	6b09      	ldr	r1, [r1, #48]	; 0x30
   2c0ec:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2c0f0:	4299      	cmp	r1, r3
   2c0f2:	d014      	beq.n	2c11e <__submore+0x3a>
   2c0f4:	6b66      	ldr	r6, [r4, #52]	; 0x34
   2c0f6:	0077      	lsls	r7, r6, #1
   2c0f8:	463a      	mov	r2, r7
   2c0fa:	f7fa f9e1 	bl	264c0 <_realloc_r>
   2c0fe:	4605      	mov	r5, r0
   2c100:	b348      	cbz	r0, 2c156 <__submore+0x72>
   2c102:	eb00 0806 	add.w	r8, r0, r6
   2c106:	4601      	mov	r1, r0
   2c108:	4632      	mov	r2, r6
   2c10a:	4640      	mov	r0, r8
   2c10c:	f7e0 fd1e 	bl	cb4c <memcpy>
   2c110:	2000      	movs	r0, #0
   2c112:	f8c4 8000 	str.w	r8, [r4]
   2c116:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   2c11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c11e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2c122:	f7f9 fe2f 	bl	25d84 <_malloc_r>
   2c126:	4603      	mov	r3, r0
   2c128:	b1a8      	cbz	r0, 2c156 <__submore+0x72>
   2c12a:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
   2c12e:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2c132:	6323      	str	r3, [r4, #48]	; 0x30
   2c134:	f203 32fd 	addw	r2, r3, #1021	; 0x3fd
   2c138:	6360      	str	r0, [r4, #52]	; 0x34
   2c13a:	2000      	movs	r0, #0
   2c13c:	f883 13ff 	strb.w	r1, [r3, #1023]	; 0x3ff
   2c140:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
   2c144:	f883 13fe 	strb.w	r1, [r3, #1022]	; 0x3fe
   2c148:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   2c14c:	f883 13fd 	strb.w	r1, [r3, #1021]	; 0x3fd
   2c150:	6022      	str	r2, [r4, #0]
   2c152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c156:	f04f 30ff 	mov.w	r0, #4294967295
   2c15a:	e7de      	b.n	2c11a <__submore+0x36>

0002c15c <__swbuf_r>:
   2c15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c15e:	460d      	mov	r5, r1
   2c160:	4614      	mov	r4, r2
   2c162:	4606      	mov	r6, r0
   2c164:	b110      	cbz	r0, 2c16c <__swbuf_r+0x10>
   2c166:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2c168:	2b00      	cmp	r3, #0
   2c16a:	d043      	beq.n	2c1f4 <__swbuf_r+0x98>
   2c16c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2c170:	69a3      	ldr	r3, [r4, #24]
   2c172:	0717      	lsls	r7, r2, #28
   2c174:	b290      	uxth	r0, r2
   2c176:	60a3      	str	r3, [r4, #8]
   2c178:	d51b      	bpl.n	2c1b2 <__swbuf_r+0x56>
   2c17a:	6923      	ldr	r3, [r4, #16]
   2c17c:	b1cb      	cbz	r3, 2c1b2 <__swbuf_r+0x56>
   2c17e:	b2ed      	uxtb	r5, r5
   2c180:	0481      	lsls	r1, r0, #18
   2c182:	462f      	mov	r7, r5
   2c184:	d522      	bpl.n	2c1cc <__swbuf_r+0x70>
   2c186:	6822      	ldr	r2, [r4, #0]
   2c188:	6961      	ldr	r1, [r4, #20]
   2c18a:	1ad3      	subs	r3, r2, r3
   2c18c:	4299      	cmp	r1, r3
   2c18e:	dd29      	ble.n	2c1e4 <__swbuf_r+0x88>
   2c190:	3301      	adds	r3, #1
   2c192:	68a1      	ldr	r1, [r4, #8]
   2c194:	1c50      	adds	r0, r2, #1
   2c196:	3901      	subs	r1, #1
   2c198:	6020      	str	r0, [r4, #0]
   2c19a:	60a1      	str	r1, [r4, #8]
   2c19c:	7015      	strb	r5, [r2, #0]
   2c19e:	6962      	ldr	r2, [r4, #20]
   2c1a0:	429a      	cmp	r2, r3
   2c1a2:	d02a      	beq.n	2c1fa <__swbuf_r+0x9e>
   2c1a4:	2d0a      	cmp	r5, #10
   2c1a6:	d102      	bne.n	2c1ae <__swbuf_r+0x52>
   2c1a8:	7b23      	ldrb	r3, [r4, #12]
   2c1aa:	07db      	lsls	r3, r3, #31
   2c1ac:	d425      	bmi.n	2c1fa <__swbuf_r+0x9e>
   2c1ae:	4638      	mov	r0, r7
   2c1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c1b2:	4621      	mov	r1, r4
   2c1b4:	4630      	mov	r0, r6
   2c1b6:	f7fd fc23 	bl	29a00 <__swsetup_r>
   2c1ba:	bb20      	cbnz	r0, 2c206 <__swbuf_r+0xaa>
   2c1bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2c1c0:	b2ed      	uxtb	r5, r5
   2c1c2:	6923      	ldr	r3, [r4, #16]
   2c1c4:	b290      	uxth	r0, r2
   2c1c6:	462f      	mov	r7, r5
   2c1c8:	0481      	lsls	r1, r0, #18
   2c1ca:	d4dc      	bmi.n	2c186 <__swbuf_r+0x2a>
   2c1cc:	6e61      	ldr	r1, [r4, #100]	; 0x64
   2c1ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2c1d2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   2c1d6:	81a2      	strh	r2, [r4, #12]
   2c1d8:	6822      	ldr	r2, [r4, #0]
   2c1da:	6661      	str	r1, [r4, #100]	; 0x64
   2c1dc:	1ad3      	subs	r3, r2, r3
   2c1de:	6961      	ldr	r1, [r4, #20]
   2c1e0:	4299      	cmp	r1, r3
   2c1e2:	dcd5      	bgt.n	2c190 <__swbuf_r+0x34>
   2c1e4:	4621      	mov	r1, r4
   2c1e6:	4630      	mov	r0, r6
   2c1e8:	f7fd fdc8 	bl	29d7c <_fflush_r>
   2c1ec:	b958      	cbnz	r0, 2c206 <__swbuf_r+0xaa>
   2c1ee:	6822      	ldr	r2, [r4, #0]
   2c1f0:	2301      	movs	r3, #1
   2c1f2:	e7ce      	b.n	2c192 <__swbuf_r+0x36>
   2c1f4:	f7fd fe20 	bl	29e38 <__sinit>
   2c1f8:	e7b8      	b.n	2c16c <__swbuf_r+0x10>
   2c1fa:	4621      	mov	r1, r4
   2c1fc:	4630      	mov	r0, r6
   2c1fe:	f7fd fdbd 	bl	29d7c <_fflush_r>
   2c202:	2800      	cmp	r0, #0
   2c204:	d0d3      	beq.n	2c1ae <__swbuf_r+0x52>
   2c206:	f04f 37ff 	mov.w	r7, #4294967295
   2c20a:	e7d0      	b.n	2c1ae <__swbuf_r+0x52>

0002c20c <_wcrtomb_r>:
   2c20c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c20e:	4606      	mov	r6, r0
   2c210:	b085      	sub	sp, #20
   2c212:	461d      	mov	r5, r3
   2c214:	b139      	cbz	r1, 2c226 <_wcrtomb_r+0x1a>
   2c216:	4c0b      	ldr	r4, [pc, #44]	; (2c244 <_wcrtomb_r+0x38>)
   2c218:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   2c21c:	47a0      	blx	r4
   2c21e:	1c43      	adds	r3, r0, #1
   2c220:	d009      	beq.n	2c236 <_wcrtomb_r+0x2a>
   2c222:	b005      	add	sp, #20
   2c224:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c226:	4f07      	ldr	r7, [pc, #28]	; (2c244 <_wcrtomb_r+0x38>)
   2c228:	460a      	mov	r2, r1
   2c22a:	a901      	add	r1, sp, #4
   2c22c:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
   2c230:	47a0      	blx	r4
   2c232:	1c43      	adds	r3, r0, #1
   2c234:	d1f5      	bne.n	2c222 <_wcrtomb_r+0x16>
   2c236:	2200      	movs	r2, #0
   2c238:	238a      	movs	r3, #138	; 0x8a
   2c23a:	602a      	str	r2, [r5, #0]
   2c23c:	6033      	str	r3, [r6, #0]
   2c23e:	b005      	add	sp, #20
   2c240:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c242:	bf00      	nop
   2c244:	200208f0 	.word	0x200208f0

0002c248 <__ascii_wctomb>:
   2c248:	4603      	mov	r3, r0
   2c24a:	b149      	cbz	r1, 2c260 <__ascii_wctomb+0x18>
   2c24c:	2aff      	cmp	r2, #255	; 0xff
   2c24e:	d802      	bhi.n	2c256 <__ascii_wctomb+0xe>
   2c250:	2001      	movs	r0, #1
   2c252:	700a      	strb	r2, [r1, #0]
   2c254:	4770      	bx	lr
   2c256:	228a      	movs	r2, #138	; 0x8a
   2c258:	f04f 30ff 	mov.w	r0, #4294967295
   2c25c:	601a      	str	r2, [r3, #0]
   2c25e:	4770      	bx	lr
   2c260:	4608      	mov	r0, r1
   2c262:	4770      	bx	lr

0002c264 <_calloc_r>:
   2c264:	b510      	push	{r4, lr}
   2c266:	fb02 f101 	mul.w	r1, r2, r1
   2c26a:	f7f9 fd8b 	bl	25d84 <_malloc_r>
   2c26e:	4604      	mov	r4, r0
   2c270:	b168      	cbz	r0, 2c28e <_calloc_r+0x2a>
   2c272:	f850 2c04 	ldr.w	r2, [r0, #-4]
   2c276:	f022 0203 	bic.w	r2, r2, #3
   2c27a:	3a04      	subs	r2, #4
   2c27c:	2a24      	cmp	r2, #36	; 0x24
   2c27e:	d814      	bhi.n	2c2aa <_calloc_r+0x46>
   2c280:	2a13      	cmp	r2, #19
   2c282:	d806      	bhi.n	2c292 <_calloc_r+0x2e>
   2c284:	4602      	mov	r2, r0
   2c286:	2300      	movs	r3, #0
   2c288:	e9c2 3300 	strd	r3, r3, [r2]
   2c28c:	6093      	str	r3, [r2, #8]
   2c28e:	4620      	mov	r0, r4
   2c290:	bd10      	pop	{r4, pc}
   2c292:	2300      	movs	r3, #0
   2c294:	2a1b      	cmp	r2, #27
   2c296:	e9c0 3300 	strd	r3, r3, [r0]
   2c29a:	d90b      	bls.n	2c2b4 <_calloc_r+0x50>
   2c29c:	2a24      	cmp	r2, #36	; 0x24
   2c29e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   2c2a2:	d00a      	beq.n	2c2ba <_calloc_r+0x56>
   2c2a4:	f100 0210 	add.w	r2, r0, #16
   2c2a8:	e7ed      	b.n	2c286 <_calloc_r+0x22>
   2c2aa:	2100      	movs	r1, #0
   2c2ac:	f7fa f8a4 	bl	263f8 <memset>
   2c2b0:	4620      	mov	r0, r4
   2c2b2:	bd10      	pop	{r4, pc}
   2c2b4:	f100 0208 	add.w	r2, r0, #8
   2c2b8:	e7e5      	b.n	2c286 <_calloc_r+0x22>
   2c2ba:	f100 0218 	add.w	r2, r0, #24
   2c2be:	6103      	str	r3, [r0, #16]
   2c2c0:	6143      	str	r3, [r0, #20]
   2c2c2:	e7e0      	b.n	2c286 <_calloc_r+0x22>

0002c2c4 <_fclose_r>:
   2c2c4:	b570      	push	{r4, r5, r6, lr}
   2c2c6:	2900      	cmp	r1, #0
   2c2c8:	d04b      	beq.n	2c362 <_fclose_r+0x9e>
   2c2ca:	460c      	mov	r4, r1
   2c2cc:	4605      	mov	r5, r0
   2c2ce:	b110      	cbz	r0, 2c2d6 <_fclose_r+0x12>
   2c2d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2c2d2:	2b00      	cmp	r3, #0
   2c2d4:	d048      	beq.n	2c368 <_fclose_r+0xa4>
   2c2d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2c2d8:	07d8      	lsls	r0, r3, #31
   2c2da:	d534      	bpl.n	2c346 <_fclose_r+0x82>
   2c2dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c2e0:	2b00      	cmp	r3, #0
   2c2e2:	d03e      	beq.n	2c362 <_fclose_r+0x9e>
   2c2e4:	4621      	mov	r1, r4
   2c2e6:	4628      	mov	r0, r5
   2c2e8:	f7fd fca6 	bl	29c38 <__sflush_r>
   2c2ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2c2ee:	4606      	mov	r6, r0
   2c2f0:	b133      	cbz	r3, 2c300 <_fclose_r+0x3c>
   2c2f2:	69e1      	ldr	r1, [r4, #28]
   2c2f4:	4628      	mov	r0, r5
   2c2f6:	4798      	blx	r3
   2c2f8:	2800      	cmp	r0, #0
   2c2fa:	bfb8      	it	lt
   2c2fc:	f04f 36ff 	movlt.w	r6, #4294967295
   2c300:	89a3      	ldrh	r3, [r4, #12]
   2c302:	061a      	lsls	r2, r3, #24
   2c304:	d43b      	bmi.n	2c37e <_fclose_r+0xba>
   2c306:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2c308:	b141      	cbz	r1, 2c31c <_fclose_r+0x58>
   2c30a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2c30e:	4299      	cmp	r1, r3
   2c310:	d002      	beq.n	2c318 <_fclose_r+0x54>
   2c312:	4628      	mov	r0, r5
   2c314:	f7fd fea0 	bl	2a058 <_free_r>
   2c318:	2300      	movs	r3, #0
   2c31a:	6323      	str	r3, [r4, #48]	; 0x30
   2c31c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   2c31e:	b121      	cbz	r1, 2c32a <_fclose_r+0x66>
   2c320:	4628      	mov	r0, r5
   2c322:	f7fd fe99 	bl	2a058 <_free_r>
   2c326:	2300      	movs	r3, #0
   2c328:	6463      	str	r3, [r4, #68]	; 0x44
   2c32a:	f7fd fdb5 	bl	29e98 <__sfp_lock_acquire>
   2c32e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2c330:	2200      	movs	r2, #0
   2c332:	07db      	lsls	r3, r3, #31
   2c334:	81a2      	strh	r2, [r4, #12]
   2c336:	d527      	bpl.n	2c388 <_fclose_r+0xc4>
   2c338:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2c33a:	f7fe fd31 	bl	2ada0 <__retarget_lock_close_recursive>
   2c33e:	f7fd fdb1 	bl	29ea4 <__sfp_lock_release>
   2c342:	4630      	mov	r0, r6
   2c344:	bd70      	pop	{r4, r5, r6, pc}
   2c346:	89a3      	ldrh	r3, [r4, #12]
   2c348:	0599      	lsls	r1, r3, #22
   2c34a:	d4cb      	bmi.n	2c2e4 <_fclose_r+0x20>
   2c34c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2c34e:	f7fe fd29 	bl	2ada4 <__retarget_lock_acquire_recursive>
   2c352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2c356:	2b00      	cmp	r3, #0
   2c358:	d1c4      	bne.n	2c2e4 <_fclose_r+0x20>
   2c35a:	6e66      	ldr	r6, [r4, #100]	; 0x64
   2c35c:	f016 0601 	ands.w	r6, r6, #1
   2c360:	d008      	beq.n	2c374 <_fclose_r+0xb0>
   2c362:	2600      	movs	r6, #0
   2c364:	4630      	mov	r0, r6
   2c366:	bd70      	pop	{r4, r5, r6, pc}
   2c368:	f7fd fd66 	bl	29e38 <__sinit>
   2c36c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2c36e:	07d8      	lsls	r0, r3, #31
   2c370:	d4b4      	bmi.n	2c2dc <_fclose_r+0x18>
   2c372:	e7e8      	b.n	2c346 <_fclose_r+0x82>
   2c374:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2c376:	f7fe fd17 	bl	2ada8 <__retarget_lock_release_recursive>
   2c37a:	4630      	mov	r0, r6
   2c37c:	bd70      	pop	{r4, r5, r6, pc}
   2c37e:	6921      	ldr	r1, [r4, #16]
   2c380:	4628      	mov	r0, r5
   2c382:	f7fd fe69 	bl	2a058 <_free_r>
   2c386:	e7be      	b.n	2c306 <_fclose_r+0x42>
   2c388:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2c38a:	f7fe fd0d 	bl	2ada8 <__retarget_lock_release_recursive>
   2c38e:	e7d3      	b.n	2c338 <_fclose_r+0x74>

0002c390 <_fstat_r>:
   2c390:	b570      	push	{r4, r5, r6, lr}
   2c392:	460c      	mov	r4, r1
   2c394:	4603      	mov	r3, r0
   2c396:	4d08      	ldr	r5, [pc, #32]	; (2c3b8 <_fstat_r+0x28>)
   2c398:	2600      	movs	r6, #0
   2c39a:	4620      	mov	r0, r4
   2c39c:	4611      	mov	r1, r2
   2c39e:	461c      	mov	r4, r3
   2c3a0:	602e      	str	r6, [r5, #0]
   2c3a2:	f000 fe8f 	bl	2d0c4 <_fstat>
   2c3a6:	1c43      	adds	r3, r0, #1
   2c3a8:	d000      	beq.n	2c3ac <_fstat_r+0x1c>
   2c3aa:	bd70      	pop	{r4, r5, r6, pc}
   2c3ac:	682b      	ldr	r3, [r5, #0]
   2c3ae:	2b00      	cmp	r3, #0
   2c3b0:	d0fb      	beq.n	2c3aa <_fstat_r+0x1a>
   2c3b2:	6023      	str	r3, [r4, #0]
   2c3b4:	bd70      	pop	{r4, r5, r6, pc}
   2c3b6:	bf00      	nop
   2c3b8:	20026430 	.word	0x20026430

0002c3bc <_isatty_r>:
   2c3bc:	b538      	push	{r3, r4, r5, lr}
   2c3be:	2200      	movs	r2, #0
   2c3c0:	4d06      	ldr	r5, [pc, #24]	; (2c3dc <_isatty_r+0x20>)
   2c3c2:	4604      	mov	r4, r0
   2c3c4:	4608      	mov	r0, r1
   2c3c6:	602a      	str	r2, [r5, #0]
   2c3c8:	f000 fe76 	bl	2d0b8 <_isatty>
   2c3cc:	1c43      	adds	r3, r0, #1
   2c3ce:	d000      	beq.n	2c3d2 <_isatty_r+0x16>
   2c3d0:	bd38      	pop	{r3, r4, r5, pc}
   2c3d2:	682b      	ldr	r3, [r5, #0]
   2c3d4:	2b00      	cmp	r3, #0
   2c3d6:	d0fb      	beq.n	2c3d0 <_isatty_r+0x14>
   2c3d8:	6023      	str	r3, [r4, #0]
   2c3da:	bd38      	pop	{r3, r4, r5, pc}
   2c3dc:	20026430 	.word	0x20026430

0002c3e0 <sys_notify_validate>:
	if (notify == NULL) {
   2c3e0:	b140      	cbz	r0, 2c3f4 <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2c3e2:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2c3e4:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   2c3e8:	2b02      	cmp	r3, #2
   2c3ea:	d006      	beq.n	2c3fa <sys_notify_validate+0x1a>
   2c3ec:	2b03      	cmp	r3, #3
   2c3ee:	d004      	beq.n	2c3fa <sys_notify_validate+0x1a>
   2c3f0:	2b01      	cmp	r3, #1
   2c3f2:	d005      	beq.n	2c400 <sys_notify_validate+0x20>
		return -EINVAL;
   2c3f4:	f06f 0015 	mvn.w	r0, #21
}
   2c3f8:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2c3fa:	6803      	ldr	r3, [r0, #0]
   2c3fc:	2b00      	cmp	r3, #0
   2c3fe:	d0f9      	beq.n	2c3f4 <sys_notify_validate+0x14>
		notify->result = 0;
   2c400:	2300      	movs	r3, #0
   2c402:	6083      	str	r3, [r0, #8]
   2c404:	4618      	mov	r0, r3
   2c406:	4770      	bx	lr

0002c408 <arch_printk_char_out>:
}
   2c408:	2000      	movs	r0, #0
   2c40a:	4770      	bx	lr

0002c40c <str_out>:
{
   2c40c:	b530      	push	{r4, r5, lr}
   2c40e:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2c410:	680c      	ldr	r4, [r1, #0]
   2c412:	1c55      	adds	r5, r2, #1
   2c414:	b114      	cbz	r4, 2c41c <str_out+0x10>
   2c416:	684b      	ldr	r3, [r1, #4]
   2c418:	4293      	cmp	r3, r2
   2c41a:	dc01      	bgt.n	2c420 <str_out+0x14>
		ctx->count++;
   2c41c:	608d      	str	r5, [r1, #8]
}
   2c41e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2c420:	3b01      	subs	r3, #1
   2c422:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2c424:	bf08      	it	eq
   2c426:	2200      	moveq	r2, #0
   2c428:	608d      	str	r5, [r1, #8]
   2c42a:	bf0c      	ite	eq
   2c42c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2c42e:	54a0      	strbne	r0, [r4, r2]
   2c430:	e7f5      	b.n	2c41e <str_out+0x12>

0002c432 <printk>:
{
   2c432:	b40f      	push	{r0, r1, r2, r3}
   2c434:	b507      	push	{r0, r1, r2, lr}
   2c436:	a904      	add	r1, sp, #16
   2c438:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2c43c:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   2c43e:	f7e5 ff69 	bl	12314 <vprintk>
}
   2c442:	b003      	add	sp, #12
   2c444:	f85d eb04 	ldr.w	lr, [sp], #4
   2c448:	b004      	add	sp, #16
   2c44a:	4770      	bx	lr

0002c44c <snprintk>:
{
   2c44c:	b40c      	push	{r2, r3}
   2c44e:	b507      	push	{r0, r1, r2, lr}
   2c450:	ab04      	add	r3, sp, #16
   2c452:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2c456:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2c458:	f7e5 ff6a 	bl	12330 <vsnprintk>
}
   2c45c:	b003      	add	sp, #12
   2c45e:	f85d eb04 	ldr.w	lr, [sp], #4
   2c462:	b002      	add	sp, #8
   2c464:	4770      	bx	lr

0002c466 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2c466:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2c468:	f013 0307 	ands.w	r3, r3, #7
   2c46c:	d105      	bne.n	2c47a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2c46e:	6803      	ldr	r3, [r0, #0]
   2c470:	2b00      	cmp	r3, #0
		evt = EVT_START;
   2c472:	bf0c      	ite	eq
   2c474:	2000      	moveq	r0, #0
   2c476:	2003      	movne	r0, #3
   2c478:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2c47a:	2b02      	cmp	r3, #2
   2c47c:	d105      	bne.n	2c48a <process_recheck+0x24>
		   && (mgr->refs == 0)) {
   2c47e:	8bc3      	ldrh	r3, [r0, #30]
   2c480:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   2c482:	bf14      	ite	ne
   2c484:	2000      	movne	r0, #0
   2c486:	2004      	moveq	r0, #4
   2c488:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2c48a:	2b01      	cmp	r3, #1
   2c48c:	d105      	bne.n	2c49a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2c48e:	6803      	ldr	r3, [r0, #0]
   2c490:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   2c492:	bf0c      	ite	eq
   2c494:	2000      	moveq	r0, #0
   2c496:	2005      	movne	r0, #5
   2c498:	4770      	bx	lr
	int evt = EVT_NOP;
   2c49a:	2000      	movs	r0, #0
}
   2c49c:	4770      	bx	lr

0002c49e <notify_one>:
{
   2c49e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c4a0:	460d      	mov	r5, r1
   2c4a2:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2c4a4:	4619      	mov	r1, r3
   2c4a6:	1d28      	adds	r0, r5, #4
{
   2c4a8:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2c4aa:	9300      	str	r3, [sp, #0]
   2c4ac:	f7e5 fd78 	bl	11fa0 <sys_notify_finalize>
	if (cb) {
   2c4b0:	4604      	mov	r4, r0
   2c4b2:	b140      	cbz	r0, 2c4c6 <notify_one+0x28>
		cb(mgr, cli, state, res);
   2c4b4:	e9dd 3200 	ldrd	r3, r2, [sp]
   2c4b8:	4629      	mov	r1, r5
   2c4ba:	4630      	mov	r0, r6
   2c4bc:	46a4      	mov	ip, r4
}
   2c4be:	b002      	add	sp, #8
   2c4c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   2c4c4:	4760      	bx	ip
}
   2c4c6:	b002      	add	sp, #8
   2c4c8:	bd70      	pop	{r4, r5, r6, pc}

0002c4ca <validate_args>:
{
   2c4ca:	b510      	push	{r4, lr}
   2c4cc:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2c4ce:	b140      	cbz	r0, 2c4e2 <validate_args+0x18>
   2c4d0:	b139      	cbz	r1, 2c4e2 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   2c4d2:	1d08      	adds	r0, r1, #4
   2c4d4:	f7ff ff84 	bl	2c3e0 <sys_notify_validate>
	if ((rv == 0)
   2c4d8:	b928      	cbnz	r0, 2c4e6 <validate_args+0x1c>
	    && ((cli->notify.flags
   2c4da:	68a3      	ldr	r3, [r4, #8]
   2c4dc:	f033 0303 	bics.w	r3, r3, #3
   2c4e0:	d001      	beq.n	2c4e6 <validate_args+0x1c>
		rv = -EINVAL;
   2c4e2:	f06f 0015 	mvn.w	r0, #21
}
   2c4e6:	bd10      	pop	{r4, pc}

0002c4e8 <onoff_manager_init>:
{
   2c4e8:	b538      	push	{r3, r4, r5, lr}
   2c4ea:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2c4ec:	4605      	mov	r5, r0
   2c4ee:	b158      	cbz	r0, 2c508 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2c4f0:	b151      	cbz	r1, 2c508 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2c4f2:	680b      	ldr	r3, [r1, #0]
   2c4f4:	b143      	cbz	r3, 2c508 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2c4f6:	684b      	ldr	r3, [r1, #4]
   2c4f8:	b133      	cbz	r3, 2c508 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2c4fa:	2220      	movs	r2, #32
   2c4fc:	2100      	movs	r1, #0
   2c4fe:	f7f9 ff7b 	bl	263f8 <memset>
	return 0;
   2c502:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2c504:	612c      	str	r4, [r5, #16]
}
   2c506:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2c508:	f06f 0015 	mvn.w	r0, #21
   2c50c:	e7fb      	b.n	2c506 <onoff_manager_init+0x1e>

0002c50e <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   2c50e:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   2c510:	f7f8 f9d8 	bl	248c4 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   2c514:	2000      	movs	r0, #0
   2c516:	bd08      	pop	{r3, pc}

0002c518 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   2c518:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   2c51a:	f7f8 fa17 	bl	2494c <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   2c51e:	f110 0f0b 	cmn.w	r0, #11
   2c522:	d005      	beq.n	2c530 <sys_sem_take+0x18>
   2c524:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   2c528:	bf08      	it	eq
   2c52a:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   2c52e:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   2c530:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   2c534:	e7fb      	b.n	2c52e <sys_sem_take+0x16>

0002c536 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2c536:	4604      	mov	r4, r0
   2c538:	b508      	push	{r3, lr}
   2c53a:	4608      	mov	r0, r1
   2c53c:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   2c53e:	461a      	mov	r2, r3
   2c540:	47a0      	blx	r4
	return z_impl_k_current_get();
   2c542:	f7f8 f9b9 	bl	248b8 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   2c546:	f7e8 fc6f 	bl	14e28 <z_impl_k_thread_abort>

0002c54a <chunk_field>:
	if (big_heap(h)) {
   2c54a:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   2c54c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2c550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   2c554:	bf2c      	ite	cs
   2c556:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   2c55a:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   2c55e:	4770      	bx	lr

0002c560 <chunk_set>:
	void *cmem = &buf[c];
   2c560:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2c564:	6880      	ldr	r0, [r0, #8]
   2c566:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   2c56a:	bf2c      	ite	cs
   2c56c:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2c570:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   2c574:	4770      	bx	lr

0002c576 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2c576:	2201      	movs	r2, #1
{
   2c578:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2c57a:	f7ff ffe6 	bl	2c54a <chunk_field>
}
   2c57e:	0840      	lsrs	r0, r0, #1
   2c580:	bd08      	pop	{r3, pc}

0002c582 <set_chunk_used>:
	if (big_heap(h)) {
   2c582:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   2c584:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2c588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2c58c:	d308      	bcc.n	2c5a0 <set_chunk_used+0x1e>
		if (used) {
   2c58e:	684b      	ldr	r3, [r1, #4]
   2c590:	b11a      	cbz	r2, 2c59a <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   2c592:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   2c596:	604b      	str	r3, [r1, #4]
   2c598:	4770      	bx	lr
   2c59a:	f023 0301 	bic.w	r3, r3, #1
   2c59e:	e7fa      	b.n	2c596 <set_chunk_used+0x14>
		if (used) {
   2c5a0:	884b      	ldrh	r3, [r1, #2]
   2c5a2:	b11a      	cbz	r2, 2c5ac <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   2c5a4:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   2c5a8:	804b      	strh	r3, [r1, #2]
}
   2c5aa:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   2c5ac:	f023 0301 	bic.w	r3, r3, #1
   2c5b0:	e7fa      	b.n	2c5a8 <set_chunk_used+0x26>

0002c5b2 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2c5b2:	0053      	lsls	r3, r2, #1
   2c5b4:	2201      	movs	r2, #1
   2c5b6:	f7ff bfd3 	b.w	2c560 <chunk_set>

0002c5ba <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   2c5ba:	6883      	ldr	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   2c5bc:	3107      	adds	r1, #7
	return big_heap(h) ? 8 : 4;
   2c5be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2c5c2:	bf2c      	ite	cs
   2c5c4:	2008      	movcs	r0, #8
   2c5c6:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   2c5c8:	4408      	add	r0, r1
}
   2c5ca:	08c0      	lsrs	r0, r0, #3
   2c5cc:	4770      	bx	lr

0002c5ce <bucket_idx>:
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
   2c5ce:	460a      	mov	r2, r1
   2c5d0:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   2c5d2:	2101      	movs	r1, #1
   2c5d4:	f7ff fff1 	bl	2c5ba <bytes_to_chunksz>
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   2c5d8:	3201      	adds	r2, #1
   2c5da:	1a10      	subs	r0, r2, r0
	return 31 - __builtin_clz(usable_sz);
   2c5dc:	fab0 f080 	clz	r0, r0
}
   2c5e0:	f1c0 001f 	rsb	r0, r0, #31
   2c5e4:	bd08      	pop	{r3, pc}

0002c5e6 <merge_chunks>:
{
   2c5e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c5e8:	4616      	mov	r6, r2
   2c5ea:	4604      	mov	r4, r0
   2c5ec:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2c5ee:	f7ff ffc2 	bl	2c576 <chunk_size>
   2c5f2:	4631      	mov	r1, r6
   2c5f4:	4605      	mov	r5, r0
   2c5f6:	4620      	mov	r0, r4
   2c5f8:	f7ff ffbd 	bl	2c576 <chunk_size>
   2c5fc:	182b      	adds	r3, r5, r0
	set_chunk_size(h, lc, newsz);
   2c5fe:	461a      	mov	r2, r3
   2c600:	4639      	mov	r1, r7
   2c602:	4620      	mov	r0, r4
   2c604:	9301      	str	r3, [sp, #4]
   2c606:	f7ff ffd4 	bl	2c5b2 <set_chunk_size>
	return c + chunk_size(h, c);
   2c60a:	4631      	mov	r1, r6
   2c60c:	4620      	mov	r0, r4
   2c60e:	f7ff ffb2 	bl	2c576 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2c612:	2200      	movs	r2, #0
   2c614:	1831      	adds	r1, r6, r0
   2c616:	4620      	mov	r0, r4
   2c618:	9b01      	ldr	r3, [sp, #4]
}
   2c61a:	b003      	add	sp, #12
   2c61c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2c620:	f7ff bf9e 	b.w	2c560 <chunk_set>

0002c624 <split_chunks>:
{
   2c624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c626:	4614      	mov	r4, r2
   2c628:	460e      	mov	r6, r1
   2c62a:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   2c62c:	f7ff ffa3 	bl	2c576 <chunk_size>
	size_t lsz = rc - lc;
   2c630:	1ba3      	subs	r3, r4, r6
	size_t rsz = sz0 - lsz;
   2c632:	1b32      	subs	r2, r6, r4
   2c634:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
   2c636:	4631      	mov	r1, r6
   2c638:	461a      	mov	r2, r3
   2c63a:	4628      	mov	r0, r5
   2c63c:	9301      	str	r3, [sp, #4]
   2c63e:	f7ff ffb8 	bl	2c5b2 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   2c642:	463a      	mov	r2, r7
   2c644:	4621      	mov	r1, r4
   2c646:	4628      	mov	r0, r5
   2c648:	f7ff ffb3 	bl	2c5b2 <set_chunk_size>
   2c64c:	9b01      	ldr	r3, [sp, #4]
   2c64e:	2200      	movs	r2, #0
   2c650:	4621      	mov	r1, r4
   2c652:	4628      	mov	r0, r5
   2c654:	f7ff ff84 	bl	2c560 <chunk_set>
	return c + chunk_size(h, c);
   2c658:	4621      	mov	r1, r4
   2c65a:	4628      	mov	r0, r5
   2c65c:	f7ff ff8b 	bl	2c576 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2c660:	463b      	mov	r3, r7
   2c662:	1821      	adds	r1, r4, r0
   2c664:	2200      	movs	r2, #0
   2c666:	4628      	mov	r0, r5
}
   2c668:	b003      	add	sp, #12
   2c66a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2c66e:	f7ff bf77 	b.w	2c560 <chunk_set>

0002c672 <free_list_remove_bidx>:
{
   2c672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c676:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   2c678:	2203      	movs	r2, #3
   2c67a:	460e      	mov	r6, r1
   2c67c:	4604      	mov	r4, r0
   2c67e:	f7ff ff64 	bl	2c54a <chunk_field>
	if (next_free_chunk(h, c) == c) {
   2c682:	4286      	cmp	r6, r0
   2c684:	4605      	mov	r5, r0
   2c686:	f107 0804 	add.w	r8, r7, #4
   2c68a:	d10b      	bne.n	2c6a4 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   2c68c:	2301      	movs	r3, #1
   2c68e:	fa03 f707 	lsl.w	r7, r3, r7
   2c692:	68e3      	ldr	r3, [r4, #12]
   2c694:	ea23 0307 	bic.w	r3, r3, r7
   2c698:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   2c69a:	2300      	movs	r3, #0
   2c69c:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   2c6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   2c6a4:	4631      	mov	r1, r6
   2c6a6:	2202      	movs	r2, #2
   2c6a8:	4620      	mov	r0, r4
   2c6aa:	f7ff ff4e 	bl	2c54a <chunk_field>
   2c6ae:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   2c6b0:	462b      	mov	r3, r5
   2c6b2:	4601      	mov	r1, r0
   2c6b4:	2203      	movs	r2, #3
   2c6b6:	4620      	mov	r0, r4
		b->next = second;
   2c6b8:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   2c6bc:	f7ff ff50 	bl	2c560 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   2c6c0:	4633      	mov	r3, r6
   2c6c2:	4629      	mov	r1, r5
   2c6c4:	4620      	mov	r0, r4
}
   2c6c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2c6ca:	2202      	movs	r2, #2
   2c6cc:	f7ff bf48 	b.w	2c560 <chunk_set>

0002c6d0 <free_list_remove>:
{
   2c6d0:	b538      	push	{r3, r4, r5, lr}
   2c6d2:	4604      	mov	r4, r0
   2c6d4:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   2c6d6:	f7ff ff4e 	bl	2c576 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   2c6da:	68a3      	ldr	r3, [r4, #8]
   2c6dc:	4601      	mov	r1, r0
   2c6de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2c6e2:	d301      	bcc.n	2c6e8 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   2c6e4:	2801      	cmp	r0, #1
   2c6e6:	d009      	beq.n	2c6fc <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   2c6e8:	4620      	mov	r0, r4
   2c6ea:	f7ff ff70 	bl	2c5ce <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   2c6ee:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   2c6f0:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2c6f2:	4620      	mov	r0, r4
}
   2c6f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   2c6f8:	f7ff bfbb 	b.w	2c672 <free_list_remove_bidx>
}
   2c6fc:	bd38      	pop	{r3, r4, r5, pc}

0002c6fe <alloc_chunk>:
{
   2c6fe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2c702:	4604      	mov	r4, r0
   2c704:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
   2c706:	f7ff ff62 	bl	2c5ce <bucket_idx>
	if (bi > bucket_idx(h, h->len)) {
   2c70a:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   2c70c:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   2c70e:	4620      	mov	r0, r4
   2c710:	f7ff ff5d 	bl	2c5ce <bucket_idx>
   2c714:	42a8      	cmp	r0, r5
   2c716:	da04      	bge.n	2c722 <alloc_chunk+0x24>
		return 0;
   2c718:	2100      	movs	r1, #0
}
   2c71a:	4608      	mov	r0, r1
   2c71c:	b003      	add	sp, #12
   2c71e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (b->next) {
   2c722:	eb04 0985 	add.w	r9, r4, r5, lsl #2
   2c726:	f8d9 8010 	ldr.w	r8, [r9, #16]
   2c72a:	f1b8 0f00 	cmp.w	r8, #0
   2c72e:	d019      	beq.n	2c764 <alloc_chunk+0x66>
   2c730:	2603      	movs	r6, #3
			chunkid_t c = b->next;
   2c732:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
   2c736:	4620      	mov	r0, r4
   2c738:	9101      	str	r1, [sp, #4]
   2c73a:	f7ff ff1c 	bl	2c576 <chunk_size>
   2c73e:	42b8      	cmp	r0, r7
   2c740:	9901      	ldr	r1, [sp, #4]
   2c742:	d305      	bcc.n	2c750 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   2c744:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   2c746:	4620      	mov	r0, r4
   2c748:	f7ff ff93 	bl	2c672 <free_list_remove_bidx>
   2c74c:	9901      	ldr	r1, [sp, #4]
		return c;
   2c74e:	e7e4      	b.n	2c71a <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   2c750:	2203      	movs	r2, #3
   2c752:	4620      	mov	r0, r4
   2c754:	f7ff fef9 	bl	2c54a <chunk_field>
		} while (--i && b->next != first);
   2c758:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
   2c75a:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
   2c75e:	d001      	beq.n	2c764 <alloc_chunk+0x66>
   2c760:	4580      	cmp	r8, r0
   2c762:	d1e6      	bne.n	2c732 <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   2c764:	f04f 32ff 	mov.w	r2, #4294967295
   2c768:	68e3      	ldr	r3, [r4, #12]
   2c76a:	3501      	adds	r5, #1
   2c76c:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0) {
   2c76e:	401a      	ands	r2, r3
   2c770:	d0d2      	beq.n	2c718 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   2c772:	fa92 f2a2 	rbit	r2, r2
   2c776:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2c77a:	1d13      	adds	r3, r2, #4
   2c77c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2c780:	9101      	str	r1, [sp, #4]
   2c782:	e7e0      	b.n	2c746 <alloc_chunk+0x48>

0002c784 <free_list_add>:
{
   2c784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c788:	4604      	mov	r4, r0
   2c78a:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   2c78c:	f7ff fef3 	bl	2c576 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   2c790:	68a3      	ldr	r3, [r4, #8]
   2c792:	4601      	mov	r1, r0
   2c794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2c798:	d301      	bcc.n	2c79e <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   2c79a:	2801      	cmp	r0, #1
   2c79c:	d035      	beq.n	2c80a <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   2c79e:	4620      	mov	r0, r4
   2c7a0:	f7ff ff15 	bl	2c5ce <bucket_idx>
	if (b->next == 0) {
   2c7a4:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   2c7a8:	6916      	ldr	r6, [r2, #16]
   2c7aa:	b99e      	cbnz	r6, 2c7d4 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   2c7ac:	2301      	movs	r3, #1
   2c7ae:	fa03 f000 	lsl.w	r0, r3, r0
   2c7b2:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   2c7b4:	4629      	mov	r1, r5
   2c7b6:	4303      	orrs	r3, r0
   2c7b8:	60e3      	str	r3, [r4, #12]
   2c7ba:	4620      	mov	r0, r4
		b->next = c;
   2c7bc:	6115      	str	r5, [r2, #16]
   2c7be:	462b      	mov	r3, r5
   2c7c0:	2202      	movs	r2, #2
   2c7c2:	f7ff fecd 	bl	2c560 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2c7c6:	2203      	movs	r2, #3
   2c7c8:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   2c7ca:	4620      	mov	r0, r4
}
   2c7cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2c7d0:	f7ff bec6 	b.w	2c560 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   2c7d4:	2202      	movs	r2, #2
   2c7d6:	4631      	mov	r1, r6
   2c7d8:	4620      	mov	r0, r4
   2c7da:	f7ff feb6 	bl	2c54a <chunk_field>
   2c7de:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   2c7e0:	4603      	mov	r3, r0
   2c7e2:	2202      	movs	r2, #2
   2c7e4:	4629      	mov	r1, r5
   2c7e6:	4620      	mov	r0, r4
   2c7e8:	f7ff feba 	bl	2c560 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2c7ec:	4633      	mov	r3, r6
   2c7ee:	2203      	movs	r2, #3
   2c7f0:	4629      	mov	r1, r5
   2c7f2:	4620      	mov	r0, r4
   2c7f4:	f7ff feb4 	bl	2c560 <chunk_set>
   2c7f8:	2203      	movs	r2, #3
   2c7fa:	4639      	mov	r1, r7
   2c7fc:	462b      	mov	r3, r5
   2c7fe:	4620      	mov	r0, r4
   2c800:	f7ff feae 	bl	2c560 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   2c804:	2202      	movs	r2, #2
   2c806:	4631      	mov	r1, r6
   2c808:	e7df      	b.n	2c7ca <free_list_add+0x46>
   2c80a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c80e <sys_heap_alloc>:
{
   2c80e:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0) {
   2c810:	b909      	cbnz	r1, 2c816 <sys_heap_alloc+0x8>
		return NULL;
   2c812:	2000      	movs	r0, #0
}
   2c814:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   2c816:	6804      	ldr	r4, [r0, #0]
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   2c818:	4620      	mov	r0, r4
   2c81a:	f7ff fece 	bl	2c5ba <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2c81e:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   2c820:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2c822:	4620      	mov	r0, r4
   2c824:	f7ff ff6b 	bl	2c6fe <alloc_chunk>
	if (c == 0) {
   2c828:	4605      	mov	r5, r0
   2c82a:	2800      	cmp	r0, #0
   2c82c:	d0f1      	beq.n	2c812 <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   2c82e:	4601      	mov	r1, r0
   2c830:	4620      	mov	r0, r4
   2c832:	f7ff fea0 	bl	2c576 <chunk_size>
   2c836:	42b0      	cmp	r0, r6
   2c838:	d909      	bls.n	2c84e <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2c83a:	442e      	add	r6, r5
   2c83c:	4629      	mov	r1, r5
   2c83e:	4620      	mov	r0, r4
   2c840:	4632      	mov	r2, r6
   2c842:	f7ff feef 	bl	2c624 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2c846:	4631      	mov	r1, r6
   2c848:	4620      	mov	r0, r4
   2c84a:	f7ff ff9b 	bl	2c784 <free_list_add>
	set_chunk_used(h, c, true);
   2c84e:	4620      	mov	r0, r4
   2c850:	2201      	movs	r2, #1
   2c852:	4629      	mov	r1, r5
   2c854:	f7ff fe95 	bl	2c582 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   2c858:	68a3      	ldr	r3, [r4, #8]
   2c85a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2c85e:	bf2c      	ite	cs
   2c860:	2008      	movcs	r0, #8
   2c862:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2c864:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   2c868:	4420      	add	r0, r4
	return chunk_mem(h, c);
   2c86a:	e7d3      	b.n	2c814 <sys_heap_alloc+0x6>

0002c86c <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2c86c:	4040      	eors	r0, r0
   2c86e:	f380 8811 	msr	BASEPRI, r0
   2c872:	f04f 0004 	mov.w	r0, #4
   2c876:	df02      	svc	2
}
   2c878:	4770      	bx	lr

0002c87a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_MQTT_DEMO_LOG_LEVEL_DBG, 1);
GEN_ABSOLUTE_SYM(CONFIG_MQTT_DEMO_LOG_LEVEL, 4);

GEN_ABS_SYM_END
   2c87a:	4770      	bx	lr

0002c87c <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   2c87c:	f7f5 bb1e 	b.w	21ebc <SystemInit>

0002c880 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   2c880:	2300      	movs	r3, #0
	list->head = NULL;
   2c882:	e9c0 3300 	strd	r3, r3, [r0]
}
   2c886:	4770      	bx	lr

0002c888 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   2c888:	6803      	ldr	r3, [r0, #0]
   2c88a:	b923      	cbnz	r3, 2c896 <log_list_add_tail+0xe>
		list->head = msg;
   2c88c:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   2c88e:	2300      	movs	r3, #0
	list->tail = msg;
   2c890:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   2c892:	600b      	str	r3, [r1, #0]
}
   2c894:	4770      	bx	lr
		list->tail->next = msg;
   2c896:	6843      	ldr	r3, [r0, #4]
   2c898:	6019      	str	r1, [r3, #0]
   2c89a:	e7f8      	b.n	2c88e <log_list_add_tail+0x6>

0002c89c <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   2c89c:	6800      	ldr	r0, [r0, #0]
   2c89e:	4770      	bx	lr

0002c8a0 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   2c8a0:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   2c8a2:	b10b      	cbz	r3, 2c8a8 <log_list_head_get+0x8>
		list->head = list->head->next;
   2c8a4:	681a      	ldr	r2, [r3, #0]
   2c8a6:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   2c8a8:	4618      	mov	r0, r3
   2c8aa:	4770      	bx	lr

0002c8ac <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   2c8ac:	6843      	ldr	r3, [r0, #4]
}
   2c8ae:	7958      	ldrb	r0, [r3, #5]
   2c8b0:	4770      	bx	lr

0002c8b2 <z_log_msg_std_alloc>:
{
   2c8b2:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   2c8b4:	f7e6 fd4c 	bl	13350 <log_msg_chunk_alloc>
	if (msg != NULL) {
   2c8b8:	b118      	cbz	r0, 2c8c2 <z_log_msg_std_alloc+0x10>
		msg->hdr.ref_cnt = 1;
   2c8ba:	2301      	movs	r3, #1
   2c8bc:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   2c8be:	2300      	movs	r3, #0
   2c8c0:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   2c8c2:	bd08      	pop	{r3, pc}

0002c8c4 <k_cycle_get_32_wrapper>:
   2c8c4:	f7e7 bdb8 	b.w	14438 <z_timer_cycle_get_32>

0002c8c8 <dummy_timestamp>:
   2c8c8:	2000      	movs	r0, #0
   2c8ca:	4770      	bx	lr

0002c8cc <log_0>:
{
   2c8cc:	b513      	push	{r0, r1, r4, lr}
   2c8ce:	4604      	mov	r4, r0
   2c8d0:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   2c8d2:	f7ff ffee 	bl	2c8b2 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2c8d6:	b130      	cbz	r0, 2c8e6 <log_0+0x1a>
		msg_finalize(msg, src_level);
   2c8d8:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   2c8da:	6104      	str	r4, [r0, #16]
}
   2c8dc:	b002      	add	sp, #8
   2c8de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   2c8e2:	f7e6 bc3b 	b.w	1315c <msg_finalize>
}
   2c8e6:	b002      	add	sp, #8
   2c8e8:	bd10      	pop	{r4, pc}

0002c8ea <log_1>:
{
   2c8ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c8ec:	460c      	mov	r4, r1
   2c8ee:	4611      	mov	r1, r2
   2c8f0:	4605      	mov	r5, r0
   2c8f2:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2c8f4:	f7ff ffdd 	bl	2c8b2 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2c8f8:	b160      	cbz	r0, 2c914 <log_1+0x2a>
		msg->str = str;
   2c8fa:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   2c8fc:	2501      	movs	r5, #1
   2c8fe:	7a42      	ldrb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   2c900:	6144      	str	r4, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   2c902:	f365 1207 	bfi	r2, r5, #4, #4
   2c906:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   2c908:	9901      	ldr	r1, [sp, #4]
}
   2c90a:	b003      	add	sp, #12
   2c90c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
   2c910:	f7e6 bc24 	b.w	1315c <msg_finalize>
}
   2c914:	b003      	add	sp, #12
   2c916:	bd30      	pop	{r4, r5, pc}

0002c918 <log_2>:
{
   2c918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c91a:	460e      	mov	r6, r1
   2c91c:	4619      	mov	r1, r3
   2c91e:	4607      	mov	r7, r0
   2c920:	4615      	mov	r5, r2
   2c922:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2c924:	f7ff ffc5 	bl	2c8b2 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2c928:	b168      	cbz	r0, 2c946 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   2c92a:	2202      	movs	r2, #2
   2c92c:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   2c92e:	e9c0 6505 	strd	r6, r5, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   2c932:	f362 1307 	bfi	r3, r2, #4, #4
   2c936:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   2c938:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   2c93a:	6107      	str	r7, [r0, #16]
}
   2c93c:	b003      	add	sp, #12
   2c93e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
   2c942:	f7e6 bc0b 	b.w	1315c <msg_finalize>
}
   2c946:	b003      	add	sp, #12
   2c948:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c94a <log_3>:
{
   2c94a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2c94e:	460f      	mov	r7, r1
   2c950:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   2c954:	4680      	mov	r8, r0
   2c956:	4616      	mov	r6, r2
   2c958:	461d      	mov	r5, r3
   2c95a:	9101      	str	r1, [sp, #4]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2c95c:	f7ff ffa9 	bl	2c8b2 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2c960:	b178      	cbz	r0, 2c982 <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   2c962:	2203      	movs	r2, #3
   2c964:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   2c966:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   2c96a:	f362 1307 	bfi	r3, r2, #4, #4
   2c96e:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   2c970:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   2c972:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   2c976:	61c5      	str	r5, [r0, #28]
}
   2c978:	b002      	add	sp, #8
   2c97a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   2c97e:	f7e6 bbed 	b.w	1315c <msg_finalize>
}
   2c982:	b002      	add	sp, #8
   2c984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c988 <log_n>:
{
   2c988:	b510      	push	{r4, lr}
   2c98a:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   2c98c:	f7e6 fd32 	bl	133f4 <log_msg_create_n>
		if (msg == NULL) {
   2c990:	b120      	cbz	r0, 2c99c <log_n+0x14>
		msg_finalize(msg, src_level);
   2c992:	4621      	mov	r1, r4
}
   2c994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   2c998:	f7e6 bbe0 	b.w	1315c <msg_finalize>
}
   2c99c:	bd10      	pop	{r4, pc}

0002c99e <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   2c99e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c9a2:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   2c9a4:	8903      	ldrh	r3, [r0, #8]
{
   2c9a6:	460e      	mov	r6, r1
	uint32_t available_len = msg->hdr.params.hexdump.length;
   2c9a8:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   2c9ac:	42a3      	cmp	r3, r4
{
   2c9ae:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   2c9b2:	d803      	bhi.n	2c9bc <log_msg_hexdump_data_op+0x1e>
		*length = 0;
   2c9b4:	2300      	movs	r3, #0
   2c9b6:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   2c9b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   2c9bc:	6811      	ldr	r1, [r2, #0]
   2c9be:	4421      	add	r1, r4
   2c9c0:	4299      	cmp	r1, r3
		*length = available_len - offset;
   2c9c2:	bf84      	itt	hi
   2c9c4:	1b19      	subhi	r1, r3, r4
   2c9c6:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2c9c8:	2b0c      	cmp	r3, #12
	req_len = *length;
   2c9ca:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2c9ce:	d92b      	bls.n	2ca28 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   2c9d0:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   2c9d2:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   2c9d6:	d82e      	bhi.n	2ca36 <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2c9d8:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   2c9da:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2c9dc:	454b      	cmp	r3, r9
   2c9de:	bf28      	it	cs
   2c9e0:	464b      	movcs	r3, r9
   2c9e2:	4420      	add	r0, r4
   2c9e4:	461d      	mov	r5, r3
   2c9e6:	461a      	mov	r2, r3
		if (put_op) {
   2c9e8:	b317      	cbz	r7, 2ca30 <log_msg_hexdump_data_op+0x92>
   2c9ea:	4631      	mov	r1, r6
   2c9ec:	f7e0 f8ae 	bl	cb4c <memcpy>
		req_len -= cpy_len;
   2c9f0:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   2c9f4:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   2c9f6:	f1b9 0f00 	cmp.w	r9, #0
   2c9fa:	d0dd      	beq.n	2c9b8 <log_msg_hexdump_data_op+0x1a>
   2c9fc:	f1b8 0f00 	cmp.w	r8, #0
   2ca00:	d0da      	beq.n	2c9b8 <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   2ca02:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2ca06:	454d      	cmp	r5, r9
   2ca08:	bf28      	it	cs
   2ca0a:	464d      	movcs	r5, r9
		if (put_op) {
   2ca0c:	1d20      	adds	r0, r4, #4
   2ca0e:	462a      	mov	r2, r5
   2ca10:	4440      	add	r0, r8
   2ca12:	b1bf      	cbz	r7, 2ca44 <log_msg_hexdump_data_op+0xa6>
   2ca14:	4631      	mov	r1, r6
   2ca16:	f7e0 f899 	bl	cb4c <memcpy>
		offset = 0;
   2ca1a:	2400      	movs	r4, #0
		cont = cont->next;
   2ca1c:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   2ca20:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   2ca24:	442e      	add	r6, r5
   2ca26:	e7e6      	b.n	2c9f6 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   2ca28:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   2ca2c:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   2ca2e:	e7d5      	b.n	2c9dc <log_msg_hexdump_data_op+0x3e>
   2ca30:	4601      	mov	r1, r0
   2ca32:	4630      	mov	r0, r6
   2ca34:	e7da      	b.n	2c9ec <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   2ca36:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   2ca38:	2c1b      	cmp	r4, #27
   2ca3a:	d9dc      	bls.n	2c9f6 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   2ca3c:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   2ca40:	3c1c      	subs	r4, #28
   2ca42:	e7f9      	b.n	2ca38 <log_msg_hexdump_data_op+0x9a>
   2ca44:	4601      	mov	r1, r0
   2ca46:	4630      	mov	r0, r6
   2ca48:	e7e5      	b.n	2ca16 <log_msg_hexdump_data_op+0x78>

0002ca4a <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2ca4a:	3004      	adds	r0, #4
   2ca4c:	e8d0 3fef 	ldaex	r3, [r0]
   2ca50:	3301      	adds	r3, #1
   2ca52:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2ca56:	2a00      	cmp	r2, #0
   2ca58:	d1f8      	bne.n	2ca4c <log_msg_get+0x2>
}
   2ca5a:	4770      	bx	lr

0002ca5c <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   2ca5c:	7a40      	ldrb	r0, [r0, #9]
}
   2ca5e:	0900      	lsrs	r0, r0, #4
   2ca60:	4770      	bx	lr

0002ca62 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   2ca62:	7a43      	ldrb	r3, [r0, #9]
   2ca64:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   2ca68:	ea4f 1213 	mov.w	r2, r3, lsr #4
   2ca6c:	d216      	bcs.n	2ca9c <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   2ca6e:	2a03      	cmp	r2, #3
   2ca70:	d803      	bhi.n	2ca7a <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   2ca72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2ca76:	6948      	ldr	r0, [r1, #20]
   2ca78:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   2ca7a:	2901      	cmp	r1, #1
   2ca7c:	d803      	bhi.n	2ca86 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   2ca7e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2ca82:	6988      	ldr	r0, [r1, #24]
   2ca84:	4770      	bx	lr
	cont = msg->payload.ext.next;
   2ca86:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   2ca88:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   2ca8a:	2906      	cmp	r1, #6
   2ca8c:	d803      	bhi.n	2ca96 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   2ca8e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2ca92:	6848      	ldr	r0, [r1, #4]
   2ca94:	4770      	bx	lr
		cont = cont->next;
   2ca96:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   2ca98:	3907      	subs	r1, #7
		cont = cont->next;
   2ca9a:	e7f6      	b.n	2ca8a <log_msg_arg_get+0x28>
		return 0;
   2ca9c:	2000      	movs	r0, #0
}
   2ca9e:	4770      	bx	lr

0002caa0 <log_msg_put>:
{
   2caa0:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2caa2:	1d02      	adds	r2, r0, #4
   2caa4:	e8d2 1fef 	ldaex	r1, [r2]
   2caa8:	3901      	subs	r1, #1
   2caaa:	e8c2 1fec 	stlex	ip, r1, [r2]
   2caae:	f1bc 0f00 	cmp.w	ip, #0
   2cab2:	d1f7      	bne.n	2caa4 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   2cab4:	685b      	ldr	r3, [r3, #4]
   2cab6:	b90b      	cbnz	r3, 2cabc <log_msg_put+0x1c>
		msg_free(msg);
   2cab8:	f7e6 bc5e 	b.w	13378 <msg_free>
}
   2cabc:	4770      	bx	lr

0002cabe <log_msg_str_get>:
}
   2cabe:	6900      	ldr	r0, [r0, #16]
   2cac0:	4770      	bx	lr

0002cac2 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   2cac2:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   2cac4:	2400      	movs	r4, #0
   2cac6:	9400      	str	r4, [sp, #0]
   2cac8:	f7ff ff69 	bl	2c99e <log_msg_hexdump_data_op>
}
   2cacc:	b002      	add	sp, #8
   2cace:	bd10      	pop	{r4, pc}

0002cad0 <buffer_write>:
{
   2cad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cad2:	4606      	mov	r6, r0
   2cad4:	460d      	mov	r5, r1
   2cad6:	4614      	mov	r4, r2
   2cad8:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2cada:	4621      	mov	r1, r4
   2cadc:	4628      	mov	r0, r5
   2cade:	463a      	mov	r2, r7
   2cae0:	47b0      	blx	r6
	} while (len != 0);
   2cae2:	1a24      	subs	r4, r4, r0
		buf += processed;
   2cae4:	4405      	add	r5, r0
	} while (len != 0);
   2cae6:	d1f8      	bne.n	2cada <buffer_write+0xa>
}
   2cae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002caea <std_print>:
{
   2caea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2caee:	b08e      	sub	sp, #56	; 0x38
   2caf0:	af0e      	add	r7, sp, #56	; 0x38
   2caf2:	4680      	mov	r8, r0
   2caf4:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   2caf6:	f7ff ffe2 	bl	2cabe <log_msg_str_get>
   2cafa:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   2cafc:	4640      	mov	r0, r8
   2cafe:	f7ff ffad 	bl	2ca5c <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   2cb02:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   2cb06:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   2cb08:	0083      	lsls	r3, r0, #2
   2cb0a:	3307      	adds	r3, #7
   2cb0c:	f023 0307 	bic.w	r3, r3, #7
   2cb10:	ebad 0d03 	sub.w	sp, sp, r3
   2cb14:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   2cb16:	45d1      	cmp	r9, sl
   2cb18:	d116      	bne.n	2cb48 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   2cb1a:	4640      	mov	r0, r8
   2cb1c:	f7ff ff9e 	bl	2ca5c <log_msg_nargs_get>
   2cb20:	280f      	cmp	r0, #15
   2cb22:	d81e      	bhi.n	2cb62 <std_print+0x78>
   2cb24:	e8df f010 	tbh	[pc, r0, lsl #1]
   2cb28:	00200019 	.word	0x00200019
   2cb2c:	002d0026 	.word	0x002d0026
   2cb30:	00410036 	.word	0x00410036
   2cb34:	005d004e 	.word	0x005d004e
   2cb38:	0081006e 	.word	0x0081006e
   2cb3c:	00ad0096 	.word	0x00ad0096
   2cb40:	00e100c6 	.word	0x00e100c6
   2cb44:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   2cb48:	4649      	mov	r1, r9
   2cb4a:	4640      	mov	r0, r8
   2cb4c:	f7ff ff89 	bl	2ca62 <log_msg_arg_get>
   2cb50:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   2cb54:	f109 0901 	add.w	r9, r9, #1
   2cb58:	e7dd      	b.n	2cb16 <std_print+0x2c>
		print_formatted(log_output, str);
   2cb5a:	4631      	mov	r1, r6
   2cb5c:	4628      	mov	r0, r5
   2cb5e:	f7e6 fcb1 	bl	134c4 <print_formatted>
}
   2cb62:	46bd      	mov	sp, r7
   2cb64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   2cb68:	4631      	mov	r1, r6
   2cb6a:	4628      	mov	r0, r5
   2cb6c:	6822      	ldr	r2, [r4, #0]
   2cb6e:	f7e6 fca9 	bl	134c4 <print_formatted>
		break;
   2cb72:	e7f6      	b.n	2cb62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   2cb74:	4631      	mov	r1, r6
   2cb76:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cb7a:	4628      	mov	r0, r5
   2cb7c:	f7e6 fca2 	bl	134c4 <print_formatted>
		break;
   2cb80:	e7ef      	b.n	2cb62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   2cb82:	68a3      	ldr	r3, [r4, #8]
   2cb84:	4631      	mov	r1, r6
   2cb86:	9300      	str	r3, [sp, #0]
   2cb88:	4628      	mov	r0, r5
   2cb8a:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cb8e:	f7e6 fc99 	bl	134c4 <print_formatted>
		break;
   2cb92:	e7e6      	b.n	2cb62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2cb94:	68e3      	ldr	r3, [r4, #12]
   2cb96:	4631      	mov	r1, r6
   2cb98:	9301      	str	r3, [sp, #4]
   2cb9a:	68a3      	ldr	r3, [r4, #8]
   2cb9c:	4628      	mov	r0, r5
   2cb9e:	9300      	str	r3, [sp, #0]
   2cba0:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cba4:	f7e6 fc8e 	bl	134c4 <print_formatted>
		break;
   2cba8:	e7db      	b.n	2cb62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2cbaa:	6923      	ldr	r3, [r4, #16]
   2cbac:	4631      	mov	r1, r6
   2cbae:	9302      	str	r3, [sp, #8]
   2cbb0:	68e3      	ldr	r3, [r4, #12]
   2cbb2:	4628      	mov	r0, r5
   2cbb4:	9301      	str	r3, [sp, #4]
   2cbb6:	68a3      	ldr	r3, [r4, #8]
   2cbb8:	9300      	str	r3, [sp, #0]
   2cbba:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cbbe:	f7e6 fc81 	bl	134c4 <print_formatted>
		break;
   2cbc2:	e7ce      	b.n	2cb62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2cbc4:	6963      	ldr	r3, [r4, #20]
   2cbc6:	4631      	mov	r1, r6
   2cbc8:	9303      	str	r3, [sp, #12]
   2cbca:	6923      	ldr	r3, [r4, #16]
   2cbcc:	4628      	mov	r0, r5
   2cbce:	9302      	str	r3, [sp, #8]
   2cbd0:	68e3      	ldr	r3, [r4, #12]
   2cbd2:	9301      	str	r3, [sp, #4]
   2cbd4:	68a3      	ldr	r3, [r4, #8]
   2cbd6:	9300      	str	r3, [sp, #0]
   2cbd8:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cbdc:	f7e6 fc72 	bl	134c4 <print_formatted>
		break;
   2cbe0:	e7bf      	b.n	2cb62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2cbe2:	69a3      	ldr	r3, [r4, #24]
   2cbe4:	4631      	mov	r1, r6
   2cbe6:	9304      	str	r3, [sp, #16]
   2cbe8:	6963      	ldr	r3, [r4, #20]
   2cbea:	4628      	mov	r0, r5
   2cbec:	9303      	str	r3, [sp, #12]
   2cbee:	6923      	ldr	r3, [r4, #16]
   2cbf0:	9302      	str	r3, [sp, #8]
   2cbf2:	68e3      	ldr	r3, [r4, #12]
   2cbf4:	9301      	str	r3, [sp, #4]
   2cbf6:	68a3      	ldr	r3, [r4, #8]
   2cbf8:	9300      	str	r3, [sp, #0]
   2cbfa:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cbfe:	f7e6 fc61 	bl	134c4 <print_formatted>
		break;
   2cc02:	e7ae      	b.n	2cb62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2cc04:	69e3      	ldr	r3, [r4, #28]
   2cc06:	4631      	mov	r1, r6
   2cc08:	9305      	str	r3, [sp, #20]
   2cc0a:	69a3      	ldr	r3, [r4, #24]
   2cc0c:	4628      	mov	r0, r5
   2cc0e:	9304      	str	r3, [sp, #16]
   2cc10:	6963      	ldr	r3, [r4, #20]
   2cc12:	9303      	str	r3, [sp, #12]
   2cc14:	6923      	ldr	r3, [r4, #16]
   2cc16:	9302      	str	r3, [sp, #8]
   2cc18:	68e3      	ldr	r3, [r4, #12]
   2cc1a:	9301      	str	r3, [sp, #4]
   2cc1c:	68a3      	ldr	r3, [r4, #8]
   2cc1e:	9300      	str	r3, [sp, #0]
   2cc20:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cc24:	f7e6 fc4e 	bl	134c4 <print_formatted>
		break;
   2cc28:	e79b      	b.n	2cb62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2cc2a:	6a23      	ldr	r3, [r4, #32]
   2cc2c:	4631      	mov	r1, r6
   2cc2e:	9306      	str	r3, [sp, #24]
   2cc30:	69e3      	ldr	r3, [r4, #28]
   2cc32:	4628      	mov	r0, r5
   2cc34:	9305      	str	r3, [sp, #20]
   2cc36:	69a3      	ldr	r3, [r4, #24]
   2cc38:	9304      	str	r3, [sp, #16]
   2cc3a:	6963      	ldr	r3, [r4, #20]
   2cc3c:	9303      	str	r3, [sp, #12]
   2cc3e:	6923      	ldr	r3, [r4, #16]
   2cc40:	9302      	str	r3, [sp, #8]
   2cc42:	68e3      	ldr	r3, [r4, #12]
   2cc44:	9301      	str	r3, [sp, #4]
   2cc46:	68a3      	ldr	r3, [r4, #8]
   2cc48:	9300      	str	r3, [sp, #0]
   2cc4a:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cc4e:	f7e6 fc39 	bl	134c4 <print_formatted>
		break;
   2cc52:	e786      	b.n	2cb62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2cc54:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2cc56:	4631      	mov	r1, r6
   2cc58:	9307      	str	r3, [sp, #28]
   2cc5a:	6a23      	ldr	r3, [r4, #32]
   2cc5c:	4628      	mov	r0, r5
   2cc5e:	9306      	str	r3, [sp, #24]
   2cc60:	69e3      	ldr	r3, [r4, #28]
   2cc62:	9305      	str	r3, [sp, #20]
   2cc64:	69a3      	ldr	r3, [r4, #24]
   2cc66:	9304      	str	r3, [sp, #16]
   2cc68:	6963      	ldr	r3, [r4, #20]
   2cc6a:	9303      	str	r3, [sp, #12]
   2cc6c:	6923      	ldr	r3, [r4, #16]
   2cc6e:	9302      	str	r3, [sp, #8]
   2cc70:	68e3      	ldr	r3, [r4, #12]
   2cc72:	9301      	str	r3, [sp, #4]
   2cc74:	68a3      	ldr	r3, [r4, #8]
   2cc76:	9300      	str	r3, [sp, #0]
   2cc78:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cc7c:	f7e6 fc22 	bl	134c4 <print_formatted>
		break;
   2cc80:	e76f      	b.n	2cb62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2cc82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2cc84:	4631      	mov	r1, r6
   2cc86:	9308      	str	r3, [sp, #32]
   2cc88:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2cc8a:	4628      	mov	r0, r5
   2cc8c:	9307      	str	r3, [sp, #28]
   2cc8e:	6a23      	ldr	r3, [r4, #32]
   2cc90:	9306      	str	r3, [sp, #24]
   2cc92:	69e3      	ldr	r3, [r4, #28]
   2cc94:	9305      	str	r3, [sp, #20]
   2cc96:	69a3      	ldr	r3, [r4, #24]
   2cc98:	9304      	str	r3, [sp, #16]
   2cc9a:	6963      	ldr	r3, [r4, #20]
   2cc9c:	9303      	str	r3, [sp, #12]
   2cc9e:	6923      	ldr	r3, [r4, #16]
   2cca0:	9302      	str	r3, [sp, #8]
   2cca2:	68e3      	ldr	r3, [r4, #12]
   2cca4:	9301      	str	r3, [sp, #4]
   2cca6:	68a3      	ldr	r3, [r4, #8]
   2cca8:	9300      	str	r3, [sp, #0]
   2ccaa:	e9d4 2300 	ldrd	r2, r3, [r4]
   2ccae:	f7e6 fc09 	bl	134c4 <print_formatted>
		break;
   2ccb2:	e756      	b.n	2cb62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2ccb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2ccb6:	4631      	mov	r1, r6
   2ccb8:	9309      	str	r3, [sp, #36]	; 0x24
   2ccba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2ccbc:	4628      	mov	r0, r5
   2ccbe:	9308      	str	r3, [sp, #32]
   2ccc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ccc2:	9307      	str	r3, [sp, #28]
   2ccc4:	6a23      	ldr	r3, [r4, #32]
   2ccc6:	9306      	str	r3, [sp, #24]
   2ccc8:	69e3      	ldr	r3, [r4, #28]
   2ccca:	9305      	str	r3, [sp, #20]
   2cccc:	69a3      	ldr	r3, [r4, #24]
   2ccce:	9304      	str	r3, [sp, #16]
   2ccd0:	6963      	ldr	r3, [r4, #20]
   2ccd2:	9303      	str	r3, [sp, #12]
   2ccd4:	6923      	ldr	r3, [r4, #16]
   2ccd6:	9302      	str	r3, [sp, #8]
   2ccd8:	68e3      	ldr	r3, [r4, #12]
   2ccda:	9301      	str	r3, [sp, #4]
   2ccdc:	68a3      	ldr	r3, [r4, #8]
   2ccde:	9300      	str	r3, [sp, #0]
   2cce0:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cce4:	f7e6 fbee 	bl	134c4 <print_formatted>
		break;
   2cce8:	e73b      	b.n	2cb62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2ccea:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2ccec:	4631      	mov	r1, r6
   2ccee:	930a      	str	r3, [sp, #40]	; 0x28
   2ccf0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2ccf2:	4628      	mov	r0, r5
   2ccf4:	9309      	str	r3, [sp, #36]	; 0x24
   2ccf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2ccf8:	9308      	str	r3, [sp, #32]
   2ccfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ccfc:	9307      	str	r3, [sp, #28]
   2ccfe:	6a23      	ldr	r3, [r4, #32]
   2cd00:	9306      	str	r3, [sp, #24]
   2cd02:	69e3      	ldr	r3, [r4, #28]
   2cd04:	9305      	str	r3, [sp, #20]
   2cd06:	69a3      	ldr	r3, [r4, #24]
   2cd08:	9304      	str	r3, [sp, #16]
   2cd0a:	6963      	ldr	r3, [r4, #20]
   2cd0c:	9303      	str	r3, [sp, #12]
   2cd0e:	6923      	ldr	r3, [r4, #16]
   2cd10:	9302      	str	r3, [sp, #8]
   2cd12:	68e3      	ldr	r3, [r4, #12]
   2cd14:	9301      	str	r3, [sp, #4]
   2cd16:	68a3      	ldr	r3, [r4, #8]
   2cd18:	9300      	str	r3, [sp, #0]
   2cd1a:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cd1e:	f7e6 fbd1 	bl	134c4 <print_formatted>
		break;
   2cd22:	e71e      	b.n	2cb62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2cd24:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2cd26:	4631      	mov	r1, r6
   2cd28:	930b      	str	r3, [sp, #44]	; 0x2c
   2cd2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2cd2c:	4628      	mov	r0, r5
   2cd2e:	930a      	str	r3, [sp, #40]	; 0x28
   2cd30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2cd32:	9309      	str	r3, [sp, #36]	; 0x24
   2cd34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2cd36:	9308      	str	r3, [sp, #32]
   2cd38:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2cd3a:	9307      	str	r3, [sp, #28]
   2cd3c:	6a23      	ldr	r3, [r4, #32]
   2cd3e:	9306      	str	r3, [sp, #24]
   2cd40:	69e3      	ldr	r3, [r4, #28]
   2cd42:	9305      	str	r3, [sp, #20]
   2cd44:	69a3      	ldr	r3, [r4, #24]
   2cd46:	9304      	str	r3, [sp, #16]
   2cd48:	6963      	ldr	r3, [r4, #20]
   2cd4a:	9303      	str	r3, [sp, #12]
   2cd4c:	6923      	ldr	r3, [r4, #16]
   2cd4e:	9302      	str	r3, [sp, #8]
   2cd50:	68e3      	ldr	r3, [r4, #12]
   2cd52:	9301      	str	r3, [sp, #4]
   2cd54:	68a3      	ldr	r3, [r4, #8]
   2cd56:	9300      	str	r3, [sp, #0]
   2cd58:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cd5c:	f7e6 fbb2 	bl	134c4 <print_formatted>
		break;
   2cd60:	e6ff      	b.n	2cb62 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2cd62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2cd64:	4631      	mov	r1, r6
   2cd66:	930c      	str	r3, [sp, #48]	; 0x30
   2cd68:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2cd6a:	4628      	mov	r0, r5
   2cd6c:	930b      	str	r3, [sp, #44]	; 0x2c
   2cd6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2cd70:	930a      	str	r3, [sp, #40]	; 0x28
   2cd72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2cd74:	9309      	str	r3, [sp, #36]	; 0x24
   2cd76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2cd78:	9308      	str	r3, [sp, #32]
   2cd7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2cd7c:	9307      	str	r3, [sp, #28]
   2cd7e:	6a23      	ldr	r3, [r4, #32]
   2cd80:	9306      	str	r3, [sp, #24]
   2cd82:	69e3      	ldr	r3, [r4, #28]
   2cd84:	9305      	str	r3, [sp, #20]
   2cd86:	69a3      	ldr	r3, [r4, #24]
   2cd88:	9304      	str	r3, [sp, #16]
   2cd8a:	6963      	ldr	r3, [r4, #20]
   2cd8c:	9303      	str	r3, [sp, #12]
   2cd8e:	6923      	ldr	r3, [r4, #16]
   2cd90:	9302      	str	r3, [sp, #8]
   2cd92:	68e3      	ldr	r3, [r4, #12]
   2cd94:	9301      	str	r3, [sp, #4]
   2cd96:	68a3      	ldr	r3, [r4, #8]
   2cd98:	9300      	str	r3, [sp, #0]
   2cd9a:	e9d4 2300 	ldrd	r2, r3, [r4]
   2cd9e:	f7e6 fb91 	bl	134c4 <print_formatted>
}
   2cda2:	e6de      	b.n	2cb62 <std_print+0x78>

0002cda4 <log_output_flush>:
		     log_output->control_block->offset,
   2cda4:	6842      	ldr	r2, [r0, #4]
{
   2cda6:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   2cda8:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   2cdac:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   2cdae:	6881      	ldr	r1, [r0, #8]
   2cdb0:	6800      	ldr	r0, [r0, #0]
   2cdb2:	f7ff fe8d 	bl	2cad0 <buffer_write>
	log_output->control_block->offset = 0;
   2cdb6:	2200      	movs	r2, #0
   2cdb8:	6863      	ldr	r3, [r4, #4]
   2cdba:	601a      	str	r2, [r3, #0]
}
   2cdbc:	bd10      	pop	{r4, pc}

0002cdbe <sntp_init>:
{
   2cdbe:	b570      	push	{r4, r5, r6, lr}
   2cdc0:	460d      	mov	r5, r1
   2cdc2:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   2cdc4:	4604      	mov	r4, r0
   2cdc6:	b330      	cbz	r0, 2ce16 <sntp_init+0x58>
   2cdc8:	b329      	cbz	r1, 2ce16 <sntp_init+0x58>
__ssp_bos_icheck3(memset, void *, int)
   2cdca:	2214      	movs	r2, #20
   2cdcc:	2100      	movs	r1, #0
   2cdce:	f7f9 fb13 	bl	263f8 <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   2cdd2:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   2cdd4:	2211      	movs	r2, #17
   2cdd6:	2102      	movs	r1, #2
   2cdd8:	f7e6 fdee 	bl	139b8 <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   2cddc:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   2cdde:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   2cde0:	da04      	bge.n	2cdec <sntp_init+0x2e>
		return -errno;
   2cde2:	f000 f974 	bl	2d0ce <__errno>
   2cde6:	6800      	ldr	r0, [r0, #0]
   2cde8:	4240      	negs	r0, r0
}
   2cdea:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   2cdec:	4632      	mov	r2, r6
   2cdee:	4629      	mov	r1, r5
   2cdf0:	f000 f843 	bl	2ce7a <z_impl_zsock_connect>
	if (ret < 0) {
   2cdf4:	2800      	cmp	r0, #0
   2cdf6:	68e0      	ldr	r0, [r4, #12]
   2cdf8:	da02      	bge.n	2ce00 <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   2cdfa:	f000 f827 	bl	2ce4c <z_impl_zsock_close>
   2cdfe:	e7f0      	b.n	2cde2 <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2ce00:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   2ce02:	68a3      	ldr	r3, [r4, #8]
   2ce04:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2ce08:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   2ce0c:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2ce0e:	8091      	strh	r1, [r2, #4]
	return 0;
   2ce10:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   2ce12:	60a3      	str	r3, [r4, #8]
	return 0;
   2ce14:	e7e9      	b.n	2cdea <sntp_init+0x2c>
		return -EFAULT;
   2ce16:	f06f 000d 	mvn.w	r0, #13
   2ce1a:	e7e6      	b.n	2cdea <sntp_init+0x2c>

0002ce1c <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   2ce1c:	b110      	cbz	r0, 2ce24 <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   2ce1e:	68c0      	ldr	r0, [r0, #12]
   2ce20:	f000 b814 	b.w	2ce4c <z_impl_zsock_close>
	}
}
   2ce24:	4770      	bx	lr

0002ce26 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   2ce26:	f7e6 bf3f 	b.w	13ca8 <socket_offload_getaddrinfo>

0002ce2a <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   2ce2a:	f7e6 bf71 	b.w	13d10 <socket_offload_freeaddrinfo>

0002ce2e <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   2ce2e:	b40c      	push	{r2, r3}
   2ce30:	4603      	mov	r3, r0
   2ce32:	b507      	push	{r0, r1, r2, lr}
   2ce34:	aa04      	add	r2, sp, #16
   2ce36:	4608      	mov	r0, r1
   2ce38:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   2ce3c:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   2ce3e:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   2ce40:	4798      	blx	r3
	va_end(args);

	return res;
}
   2ce42:	b003      	add	sp, #12
   2ce44:	f85d eb04 	ldr.w	lr, [sp], #4
   2ce48:	b002      	add	sp, #8
   2ce4a:	4770      	bx	lr

0002ce4c <z_impl_zsock_close>:
{
   2ce4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   2ce4e:	a901      	add	r1, sp, #4
{
   2ce50:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   2ce52:	f7e5 f835 	bl	11ec0 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   2ce56:	b940      	cbnz	r0, 2ce6a <z_impl_zsock_close+0x1e>
		errno = EBADF;
   2ce58:	f000 f939 	bl	2d0ce <__errno>
   2ce5c:	2309      	movs	r3, #9
		return -1;
   2ce5e:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   2ce62:	6003      	str	r3, [r0, #0]
}
   2ce64:	4620      	mov	r0, r4
   2ce66:	b003      	add	sp, #12
   2ce68:	bd30      	pop	{r4, r5, pc}
	ret = vtable->fd_vtable.close(ctx);
   2ce6a:	9b01      	ldr	r3, [sp, #4]
   2ce6c:	689b      	ldr	r3, [r3, #8]
   2ce6e:	4798      	blx	r3
   2ce70:	4604      	mov	r4, r0
	z_free_fd(sock);
   2ce72:	4628      	mov	r0, r5
   2ce74:	f7e5 f874 	bl	11f60 <z_free_fd>
	return ret;
   2ce78:	e7f4      	b.n	2ce64 <z_impl_zsock_close+0x18>

0002ce7a <z_impl_zsock_connect>:
{
   2ce7a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2ce7c:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   2ce7e:	a903      	add	r1, sp, #12
{
   2ce80:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   2ce82:	f7e5 f81d 	bl	11ec0 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   2ce86:	b118      	cbz	r0, 2ce90 <z_impl_zsock_connect+0x16>
   2ce88:	9b03      	ldr	r3, [sp, #12]
   2ce8a:	9a01      	ldr	r2, [sp, #4]
   2ce8c:	695b      	ldr	r3, [r3, #20]
   2ce8e:	b93b      	cbnz	r3, 2cea0 <z_impl_zsock_connect+0x26>
   2ce90:	f000 f91d 	bl	2d0ce <__errno>
   2ce94:	2309      	movs	r3, #9
   2ce96:	6003      	str	r3, [r0, #0]
   2ce98:	f04f 30ff 	mov.w	r0, #4294967295
}
   2ce9c:	b004      	add	sp, #16
   2ce9e:	bd10      	pop	{r4, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   2cea0:	4621      	mov	r1, r4
   2cea2:	4798      	blx	r3
   2cea4:	e7fa      	b.n	2ce9c <z_impl_zsock_connect+0x22>

0002cea6 <z_impl_zsock_sendto>:
{
   2cea6:	b530      	push	{r4, r5, lr}
   2cea8:	b087      	sub	sp, #28
   2ceaa:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   2ceac:	a905      	add	r1, sp, #20
{
   2ceae:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   2ceb2:	f7e5 f805 	bl	11ec0 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2ceb6:	b120      	cbz	r0, 2cec2 <z_impl_zsock_sendto+0x1c>
   2ceb8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2cebc:	9905      	ldr	r1, [sp, #20]
   2cebe:	6a0d      	ldr	r5, [r1, #32]
   2cec0:	b93d      	cbnz	r5, 2ced2 <z_impl_zsock_sendto+0x2c>
   2cec2:	f000 f904 	bl	2d0ce <__errno>
   2cec6:	2309      	movs	r3, #9
   2cec8:	6003      	str	r3, [r0, #0]
   2ceca:	f04f 30ff 	mov.w	r0, #4294967295
}
   2cece:	b007      	add	sp, #28
   2ced0:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2ced2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2ced4:	9101      	str	r1, [sp, #4]
   2ced6:	990a      	ldr	r1, [sp, #40]	; 0x28
   2ced8:	9100      	str	r1, [sp, #0]
   2ceda:	4621      	mov	r1, r4
   2cedc:	47a8      	blx	r5
   2cede:	e7f6      	b.n	2cece <z_impl_zsock_sendto+0x28>

0002cee0 <z_impl_zsock_sendmsg>:
{
   2cee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2cee2:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   2cee4:	a903      	add	r1, sp, #12
{
   2cee6:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   2cee8:	f7e4 ffea 	bl	11ec0 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2ceec:	b118      	cbz	r0, 2cef6 <z_impl_zsock_sendmsg+0x16>
   2ceee:	9b03      	ldr	r3, [sp, #12]
   2cef0:	9a01      	ldr	r2, [sp, #4]
   2cef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2cef4:	b93b      	cbnz	r3, 2cf06 <z_impl_zsock_sendmsg+0x26>
   2cef6:	f000 f8ea 	bl	2d0ce <__errno>
   2cefa:	2309      	movs	r3, #9
   2cefc:	6003      	str	r3, [r0, #0]
   2cefe:	f04f 30ff 	mov.w	r0, #4294967295
}
   2cf02:	b004      	add	sp, #16
   2cf04:	bd10      	pop	{r4, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2cf06:	4621      	mov	r1, r4
   2cf08:	4798      	blx	r3
   2cf0a:	e7fa      	b.n	2cf02 <z_impl_zsock_sendmsg+0x22>

0002cf0c <z_impl_zsock_recvfrom>:
{
   2cf0c:	b530      	push	{r4, r5, lr}
   2cf0e:	b087      	sub	sp, #28
   2cf10:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   2cf12:	a905      	add	r1, sp, #20
{
   2cf14:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   2cf18:	f7e4 ffd2 	bl	11ec0 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2cf1c:	b120      	cbz	r0, 2cf28 <z_impl_zsock_recvfrom+0x1c>
   2cf1e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2cf22:	9905      	ldr	r1, [sp, #20]
   2cf24:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   2cf26:	b93d      	cbnz	r5, 2cf38 <z_impl_zsock_recvfrom+0x2c>
   2cf28:	f000 f8d1 	bl	2d0ce <__errno>
   2cf2c:	2309      	movs	r3, #9
   2cf2e:	6003      	str	r3, [r0, #0]
   2cf30:	f04f 30ff 	mov.w	r0, #4294967295
}
   2cf34:	b007      	add	sp, #28
   2cf36:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2cf38:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2cf3a:	9101      	str	r1, [sp, #4]
   2cf3c:	990a      	ldr	r1, [sp, #40]	; 0x28
   2cf3e:	9100      	str	r1, [sp, #0]
   2cf40:	4621      	mov	r1, r4
   2cf42:	47a8      	blx	r5
   2cf44:	e7f6      	b.n	2cf34 <z_impl_zsock_recvfrom+0x28>

0002cf46 <set_starting_state>:
{
   2cf46:	b510      	push	{r4, lr}
	__asm__ volatile(
   2cf48:	f04f 0320 	mov.w	r3, #32
   2cf4c:	f3ef 8211 	mrs	r2, BASEPRI
   2cf50:	f383 8811 	msr	BASEPRI, r3
   2cf54:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2cf58:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2cf5a:	f003 0407 	and.w	r4, r3, #7
   2cf5e:	2c01      	cmp	r4, #1
   2cf60:	d106      	bne.n	2cf70 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2cf62:	6001      	str	r1, [r0, #0]
	int err = 0;
   2cf64:	2000      	movs	r0, #0
	__asm__ volatile(
   2cf66:	f382 8811 	msr	BASEPRI, r2
   2cf6a:	f3bf 8f6f 	isb	sy
}
   2cf6e:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2cf70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2cf74:	428b      	cmp	r3, r1
		err = -EBUSY;
   2cf76:	bf14      	ite	ne
   2cf78:	f04f 30ff 	movne.w	r0, #4294967295
   2cf7c:	f06f 000f 	mvneq.w	r0, #15
   2cf80:	e7f1      	b.n	2cf66 <set_starting_state+0x20>

0002cf82 <set_on_state>:
	__asm__ volatile(
   2cf82:	f04f 0320 	mov.w	r3, #32
   2cf86:	f3ef 8211 	mrs	r2, BASEPRI
   2cf8a:	f383 8811 	msr	BASEPRI, r3
   2cf8e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2cf92:	6803      	ldr	r3, [r0, #0]
   2cf94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2cf98:	f043 0302 	orr.w	r3, r3, #2
   2cf9c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2cf9e:	f382 8811 	msr	BASEPRI, r2
   2cfa2:	f3bf 8f6f 	isb	sy
}
   2cfa6:	4770      	bx	lr

0002cfa8 <onoff_started_callback>:
	return &data->mgr[type];
   2cfa8:	68c0      	ldr	r0, [r0, #12]
   2cfaa:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2cfac:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2cfb0:	2100      	movs	r1, #0
   2cfb2:	4710      	bx	r2

0002cfb4 <api_stop>:
	return stop(dev, subsys, CTX_API);
   2cfb4:	2280      	movs	r2, #128	; 0x80
   2cfb6:	f7e6 bf43 	b.w	13e40 <stop>

0002cfba <blocking_start_callback>:
{
   2cfba:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2cfbc:	f7f7 bc82 	b.w	248c4 <z_impl_k_sem_give>

0002cfc0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2cfc0:	2000      	movs	r0, #0
   2cfc2:	f7f5 b85b 	b.w	2207c <nrfx_clock_stop>

0002cfc6 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2cfc6:	2000      	movs	r0, #0
   2cfc8:	f7f5 b802 	b.w	21fd0 <nrfx_clock_start>

0002cfcc <api_start>:
{
   2cfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = set_starting_state(&subdata->flags, ctx);
   2cfce:	240c      	movs	r4, #12
   2cfd0:	b2c9      	uxtb	r1, r1
   2cfd2:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2cfd4:	68c5      	ldr	r5, [r0, #12]
{
   2cfd6:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   2cfd8:	f104 0048 	add.w	r0, r4, #72	; 0x48
   2cfdc:	2180      	movs	r1, #128	; 0x80
   2cfde:	4428      	add	r0, r5
{
   2cfe0:	4617      	mov	r7, r2
	err = set_starting_state(&subdata->flags, ctx);
   2cfe2:	f7ff ffb0 	bl	2cf46 <set_starting_state>
	if (err < 0) {
   2cfe6:	2800      	cmp	r0, #0
   2cfe8:	db08      	blt.n	2cffc <api_start+0x30>
	subdata->cb = data->cb;
   2cfea:	687b      	ldr	r3, [r7, #4]
   2cfec:	4425      	add	r5, r4
   2cfee:	642b      	str	r3, [r5, #64]	; 0x40
	subdata->user_data = data->user_data;
   2cff0:	68bb      	ldr	r3, [r7, #8]
   2cff2:	646b      	str	r3, [r5, #68]	; 0x44
	 get_sub_config(dev, type)->start();
   2cff4:	6873      	ldr	r3, [r6, #4]
   2cff6:	591b      	ldr	r3, [r3, r4]
   2cff8:	4798      	blx	r3
	return 0;
   2cffa:	2000      	movs	r0, #0
}
   2cffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002cffe <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   2cffe:	4770      	bx	lr

0002d000 <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   2d000:	b510      	push	{r4, lr}
   2d002:	b40f      	push	{r0, r1, r2, r3}
   2d004:	f7f6 fc10 	bl	23828 <k_sched_lock>
   2d008:	bc0f      	pop	{r0, r1, r2, r3}
   2d00a:	f7da ffed 	bl	7fe8 <spm_request_random_number_nse>
   2d00e:	b40f      	push	{r0, r1, r2, r3}
   2d010:	f7f6 fd20 	bl	23a54 <k_sched_unlock>
   2d014:	bc0f      	pop	{r0, r1, r2, r3}
   2d016:	bd10      	pop	{r4, pc}

0002d018 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2d018:	2100      	movs	r1, #0
   2d01a:	2001      	movs	r0, #1
   2d01c:	f7e7 bba0 	b.w	14760 <z_arm_fatal_error>

0002d020 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2d020:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2d022:	f383 880b 	msr	PSPLIM, r3
}
   2d026:	4770      	bx	lr

0002d028 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2d028:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2d02a:	6800      	ldr	r0, [r0, #0]
   2d02c:	f7e7 bb98 	b.w	14760 <z_arm_fatal_error>

0002d030 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2d030:	b508      	push	{r3, lr}
	handler();
   2d032:	f7e7 fc09 	bl	14848 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2d036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2d03a:	f7e7 bec9 	b.w	14dd0 <z_arm_exc_exit>

0002d03e <mpu_configure_region>:
{
   2d03e:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   2d040:	890a      	ldrh	r2, [r1, #8]
   2d042:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   2d044:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   2d046:	684c      	ldr	r4, [r1, #4]
   2d048:	f002 021f 	and.w	r2, r2, #31
{
   2d04c:	b085      	sub	sp, #20
   2d04e:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   2d052:	9300      	str	r3, [sp, #0]
   2d054:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2d058:	f023 031f 	bic.w	r3, r3, #31
   2d05c:	1e62      	subs	r2, r4, #1
   2d05e:	4413      	add	r3, r2
   2d060:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   2d064:	280f      	cmp	r0, #15
   2d066:	4604      	mov	r4, r0
   2d068:	9303      	str	r3, [sp, #12]
   2d06a:	d905      	bls.n	2d078 <mpu_configure_region+0x3a>
   2d06c:	f7e7 ff4a 	bl	14f04 <region_allocate_and_init.part.0>
   2d070:	4604      	mov	r4, r0
}
   2d072:	4620      	mov	r0, r4
   2d074:	b005      	add	sp, #20
   2d076:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   2d078:	4669      	mov	r1, sp
   2d07a:	f7e7 ff2b 	bl	14ed4 <region_init>
	return region_allocate_and_init(index,
   2d07e:	e7f8      	b.n	2d072 <mpu_configure_region+0x34>

0002d080 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2d080:	e840 f000 	tt	r0, r0
   2d084:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   2d086:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   2d08a:	bf14      	ite	ne
   2d08c:	4618      	movne	r0, r3
   2d08e:	f06f 0015 	mvneq.w	r0, #21
   2d092:	4770      	bx	lr

0002d094 <_stdout_hook_default>:
}
   2d094:	f04f 30ff 	mov.w	r0, #4294967295
   2d098:	4770      	bx	lr

0002d09a <_stdin_hook_default>:
}
   2d09a:	2000      	movs	r0, #0
   2d09c:	4770      	bx	lr

0002d09e <_read>:
{
   2d09e:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2d0a0:	4611      	mov	r1, r2
   2d0a2:	f7e8 b907 	b.w	152b4 <z_impl_zephyr_read_stdin>

0002d0a6 <_write>:
{
   2d0a6:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2d0a8:	4611      	mov	r1, r2
   2d0aa:	f7e8 b917 	b.w	152dc <z_impl_zephyr_write_stdout>

0002d0ae <_close>:
   2d0ae:	f04f 30ff 	mov.w	r0, #4294967295
   2d0b2:	4770      	bx	lr

0002d0b4 <_lseek>:
}
   2d0b4:	2000      	movs	r0, #0
   2d0b6:	4770      	bx	lr

0002d0b8 <_isatty>:
}
   2d0b8:	2001      	movs	r0, #1
   2d0ba:	4770      	bx	lr

0002d0bc <_kill>:
}
   2d0bc:	2000      	movs	r0, #0
   2d0be:	4770      	bx	lr

0002d0c0 <_getpid>:
}
   2d0c0:	2000      	movs	r0, #0
   2d0c2:	4770      	bx	lr

0002d0c4 <_fstat>:
	st->st_mode = S_IFCHR;
   2d0c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   2d0c8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   2d0ca:	604b      	str	r3, [r1, #4]
}
   2d0cc:	4770      	bx	lr

0002d0ce <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2d0ce:	f7f5 ba95 	b.w	225fc <z_impl_z_errno>

0002d0d2 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   2d0d2:	b508      	push	{r3, lr}
	net_if_init();
   2d0d4:	f7e8 f9d8 	bl	15488 <net_if_init>
	net_if_post_init();
   2d0d8:	f7e8 fa0a 	bl	154f0 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   2d0dc:	2000      	movs	r0, #0
   2d0de:	bd08      	pop	{r3, pc}

0002d0e0 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   2d0e0:	b110      	cbz	r0, 2d0e8 <net_if_l2+0x8>
   2d0e2:	6800      	ldr	r0, [r0, #0]
   2d0e4:	b100      	cbz	r0, 2d0e8 <net_if_l2+0x8>
	return iface->if_dev->l2;
   2d0e6:	6840      	ldr	r0, [r0, #4]
}
   2d0e8:	4770      	bx	lr

0002d0ea <l2_flags_get>:
{
   2d0ea:	b510      	push	{r4, lr}
   2d0ec:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   2d0ee:	f7ff fff7 	bl	2d0e0 <net_if_l2>
   2d0f2:	b128      	cbz	r0, 2d100 <l2_flags_get+0x16>
   2d0f4:	68c2      	ldr	r2, [r0, #12]
   2d0f6:	b11a      	cbz	r2, 2d100 <l2_flags_get+0x16>
}
   2d0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   2d0fc:	4618      	mov	r0, r3
   2d0fe:	4710      	bx	r2
}
   2d100:	2000      	movs	r0, #0
   2d102:	bd10      	pop	{r4, pc}

0002d104 <net_byte_to_hex>:
{
   2d104:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   2d106:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   2d108:	b1bb      	cbz	r3, 2d13a <net_byte_to_hex+0x36>
		if (val < 10) {
   2d10a:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   2d10c:	b26b      	sxtb	r3, r5
   2d10e:	bf86      	itte	hi
   2d110:	f1a2 050a 	subhi.w	r5, r2, #10
   2d114:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   2d116:	3330      	addls	r3, #48	; 0x30
   2d118:	1c44      	adds	r4, r0, #1
   2d11a:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   2d11c:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   2d120:	4619      	mov	r1, r3
   2d122:	2b09      	cmp	r3, #9
	*ptr = '\0';
   2d124:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   2d128:	bf83      	ittte	hi
   2d12a:	3a0a      	subhi	r2, #10
   2d12c:	1889      	addhi	r1, r1, r2
   2d12e:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   2d130:	3130      	addls	r1, #48	; 0x30
   2d132:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   2d134:	7063      	strb	r3, [r4, #1]
   2d136:	1c60      	adds	r0, r4, #1
}
   2d138:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   2d13a:	2d00      	cmp	r5, #0
   2d13c:	d1e5      	bne.n	2d10a <net_byte_to_hex+0x6>
   2d13e:	4604      	mov	r4, r0
   2d140:	e7ec      	b.n	2d11c <net_byte_to_hex+0x18>

0002d142 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   2d142:	e9d0 2300 	ldrd	r2, r3, [r0]
   2d146:	1a9b      	subs	r3, r3, r2
   2d148:	2b01      	cmp	r3, #1
{
   2d14a:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   2d14c:	d90c      	bls.n	2d168 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   2d14e:	4614      	mov	r4, r2
   2d150:	1c53      	adds	r3, r2, #1
   2d152:	6003      	str	r3, [r0, #0]
   2d154:	f814 3b02 	ldrb.w	r3, [r4], #2
   2d158:	021b      	lsls	r3, r3, #8
   2d15a:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   2d15c:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   2d15e:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   2d160:	7852      	ldrb	r2, [r2, #1]
   2d162:	4313      	orrs	r3, r2
   2d164:	800b      	strh	r3, [r1, #0]
}
   2d166:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2d168:	f06f 0015 	mvn.w	r0, #21
   2d16c:	e7fb      	b.n	2d166 <unpack_uint16+0x24>

0002d16e <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   2d16e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2d170:	e9d0 3400 	ldrd	r3, r4, [r0]
   2d174:	429c      	cmp	r4, r3
   2d176:	d01f      	beq.n	2d1b8 <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   2d178:	1c5c      	adds	r4, r3, #1
   2d17a:	6004      	str	r4, [r0, #0]
   2d17c:	781b      	ldrb	r3, [r3, #0]
   2d17e:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   2d180:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   2d182:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   2d184:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   2d186:	6804      	ldr	r4, [r0, #0]
   2d188:	42bc      	cmp	r4, r7
   2d18a:	d218      	bcs.n	2d1be <fixed_header_decode+0x50>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   2d18c:	4625      	mov	r5, r4
   2d18e:	f815 3b01 	ldrb.w	r3, [r5], #1
   2d192:	6816      	ldr	r6, [r2, #0]
   2d194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   2d198:	408b      	lsls	r3, r1
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   2d19a:	4433      	add	r3, r6
   2d19c:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   2d19e:	6005      	str	r5, [r0, #0]
   2d1a0:	f994 4000 	ldrsb.w	r4, [r4]
   2d1a4:	2c00      	cmp	r4, #0
   2d1a6:	db04      	blt.n	2d1b2 <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   2d1a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   2d1ac:	d204      	bcs.n	2d1b8 <fixed_header_decode+0x4a>
	return 0;
   2d1ae:	2000      	movs	r0, #0
   2d1b0:	e004      	b.n	2d1bc <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   2d1b2:	3107      	adds	r1, #7
   2d1b4:	291c      	cmp	r1, #28
   2d1b6:	d1e6      	bne.n	2d186 <fixed_header_decode+0x18>
		return -EINVAL;
   2d1b8:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   2d1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   2d1be:	f06f 000a 	mvn.w	r0, #10
   2d1c2:	e7fb      	b.n	2d1bc <fixed_header_decode+0x4e>

0002d1c4 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   2d1c4:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2d1c6:	e9d1 3500 	ldrd	r3, r5, [r1]
   2d1ca:	429d      	cmp	r5, r3
   2d1cc:	d102      	bne.n	2d1d4 <connect_ack_decode+0x10>
		return -EINVAL;
   2d1ce:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   2d1d2:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   2d1d4:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2d1d6:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   2d1d8:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2d1da:	d0f8      	beq.n	2d1ce <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   2d1dc:	461d      	mov	r5, r3
   2d1de:	f815 4b02 	ldrb.w	r4, [r5], #2
   2d1e2:	600d      	str	r5, [r1, #0]
   2d1e4:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   2d1e6:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
	return 0;
   2d1ea:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   2d1ec:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   2d1ee:	bf04      	itt	eq
   2d1f0:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   2d1f4:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   2d1f6:	7051      	strb	r1, [r2, #1]
	return 0;
   2d1f8:	e7eb      	b.n	2d1d2 <connect_ack_decode+0xe>

0002d1fa <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   2d1fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2d1fe:	461c      	mov	r4, r3
   2d200:	4617      	mov	r7, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   2d202:	7da2      	ldrb	r2, [r4, #22]
   2d204:	0043      	lsls	r3, r0, #1
   2d206:	f022 0203 	bic.w	r2, r2, #3
   2d20a:	f003 0302 	and.w	r3, r3, #2
   2d20e:	4313      	orrs	r3, r2
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   2d210:	f3c0 0041 	ubfx	r0, r0, #1, #2
   2d214:	7220      	strb	r0, [r4, #8]
{
   2d216:	4688      	mov	r8, r1
	err_code = unpack_uint16(buf, &utf8_strlen);
   2d218:	4638      	mov	r0, r7
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   2d21a:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   2d21c:	f10d 0106 	add.w	r1, sp, #6
   2d220:	f7ff ff8f 	bl	2d142 <unpack_uint16>
	if (err_code != 0) {
   2d224:	4606      	mov	r6, r0
   2d226:	b9c0      	cbnz	r0, 2d25a <publish_decode+0x60>
	if ((buf->end - buf->cur) < utf8_strlen) {
   2d228:	683b      	ldr	r3, [r7, #0]
   2d22a:	687a      	ldr	r2, [r7, #4]
   2d22c:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   2d230:	1ad2      	subs	r2, r2, r3
   2d232:	42aa      	cmp	r2, r5
   2d234:	da02      	bge.n	2d23c <publish_decode+0x42>

	if (var_length < var_header_length) {
		MQTT_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   2d236:	f06f 0615 	mvn.w	r6, #21
   2d23a:	e00e      	b.n	2d25a <publish_decode+0x60>
	str->size = utf8_strlen;
   2d23c:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   2d23e:	b185      	cbz	r5, 2d262 <publish_decode+0x68>
		str->utf8 = buf->cur;
   2d240:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   2d242:	442b      	add	r3, r5
   2d244:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   2d246:	7a23      	ldrb	r3, [r4, #8]
   2d248:	b96b      	cbnz	r3, 2d266 <publish_decode+0x6c>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   2d24a:	3502      	adds	r5, #2
	if (var_length < var_header_length) {
   2d24c:	4545      	cmp	r5, r8
   2d24e:	d8f2      	bhi.n	2d236 <publish_decode+0x3c>
	}

	param->message.payload.data = NULL;
   2d250:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   2d252:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   2d256:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   2d258:	6125      	str	r5, [r4, #16]

	return 0;
}
   2d25a:	4630      	mov	r0, r6
   2d25c:	b002      	add	sp, #8
   2d25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   2d262:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   2d264:	e7ef      	b.n	2d246 <publish_decode+0x4c>
		err_code = unpack_uint16(buf, &param->message_id);
   2d266:	4638      	mov	r0, r7
   2d268:	f104 0114 	add.w	r1, r4, #20
   2d26c:	f7ff ff69 	bl	2d142 <unpack_uint16>
		if (err_code != 0) {
   2d270:	b908      	cbnz	r0, 2d276 <publish_decode+0x7c>
		var_header_length += sizeof(uint16_t);
   2d272:	3504      	adds	r5, #4
   2d274:	e7ea      	b.n	2d24c <publish_decode+0x52>
   2d276:	4606      	mov	r6, r0
   2d278:	e7ef      	b.n	2d25a <publish_decode+0x60>

0002d27a <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2d27a:	f7ff bf62 	b.w	2d142 <unpack_uint16>

0002d27e <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2d27e:	f7ff bf60 	b.w	2d142 <unpack_uint16>

0002d282 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2d282:	f7ff bf5e 	b.w	2d142 <unpack_uint16>

0002d286 <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2d286:	f7ff bf5c 	b.w	2d142 <unpack_uint16>

0002d28a <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   2d28a:	b538      	push	{r3, r4, r5, lr}
   2d28c:	4605      	mov	r5, r0
   2d28e:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   2d290:	f7ff ff57 	bl	2d142 <unpack_uint16>
	if (err_code != 0) {
   2d294:	b930      	cbnz	r0, 2d2a4 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   2d296:	e9d5 2300 	ldrd	r2, r3, [r5]
   2d29a:	1a99      	subs	r1, r3, r2
	str->len = length;
   2d29c:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   2d29e:	b111      	cbz	r1, 2d2a6 <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   2d2a0:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   2d2a2:	602b      	str	r3, [r5, #0]
}
   2d2a4:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   2d2a6:	6060      	str	r0, [r4, #4]
   2d2a8:	e7fc      	b.n	2d2a4 <subscribe_ack_decode+0x1a>

0002d2aa <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   2d2aa:	f7ff bf4a 	b.w	2d142 <unpack_uint16>

0002d2ae <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   2d2ae:	e9d1 3200 	ldrd	r3, r2, [r1]
   2d2b2:	1ad2      	subs	r2, r2, r3
   2d2b4:	2a01      	cmp	r2, #1
   2d2b6:	d909      	bls.n	2d2cc <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   2d2b8:	1c5a      	adds	r2, r3, #1
   2d2ba:	600a      	str	r2, [r1, #0]
   2d2bc:	0a02      	lsrs	r2, r0, #8
   2d2be:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   2d2c0:	680b      	ldr	r3, [r1, #0]
   2d2c2:	1c5a      	adds	r2, r3, #1
   2d2c4:	600a      	str	r2, [r1, #0]
   2d2c6:	7018      	strb	r0, [r3, #0]
	return 0;
   2d2c8:	2000      	movs	r0, #0
   2d2ca:	4770      	bx	lr
		return -ENOMEM;
   2d2cc:	f06f 000b 	mvn.w	r0, #11
}
   2d2d0:	4770      	bx	lr

0002d2d2 <pack_utf8_str>:
{
   2d2d2:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   2d2d4:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   2d2d8:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   2d2da:	6840      	ldr	r0, [r0, #4]
   2d2dc:	1a9b      	subs	r3, r3, r2
   2d2de:	1c82      	adds	r2, r0, #2
   2d2e0:	4293      	cmp	r3, r2
{
   2d2e2:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   2d2e4:	d30d      	bcc.n	2d302 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   2d2e6:	b280      	uxth	r0, r0
   2d2e8:	f7ff ffe1 	bl	2d2ae <pack_uint16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d2ec:	e9d5 1200 	ldrd	r1, r2, [r5]
   2d2f0:	6820      	ldr	r0, [r4, #0]
   2d2f2:	f7df fc2b 	bl	cb4c <memcpy>
	return 0;
   2d2f6:	2000      	movs	r0, #0
	buf->cur += str->size;
   2d2f8:	6823      	ldr	r3, [r4, #0]
   2d2fa:	686a      	ldr	r2, [r5, #4]
   2d2fc:	4413      	add	r3, r2
   2d2fe:	6023      	str	r3, [r4, #0]
}
   2d300:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   2d302:	f06f 000b 	mvn.w	r0, #11
   2d306:	e7fb      	b.n	2d300 <pack_utf8_str+0x2e>

0002d308 <mqtt_encode_fixed_header>:
	uint32_t length = buf->cur - start;
   2d308:	6813      	ldr	r3, [r2, #0]
{
   2d30a:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   2d30c:	1a5c      	subs	r4, r3, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   2d30e:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   2d312:	d227      	bcs.n	2d364 <mqtt_encode_fixed_header+0x5c>
   2d314:	4625      	mov	r5, r4
   2d316:	2600      	movs	r6, #0
	} while (length > 0);
   2d318:	09ed      	lsrs	r5, r5, #7
   2d31a:	b2f3      	uxtb	r3, r6
   2d31c:	f106 0601 	add.w	r6, r6, #1
   2d320:	d1fa      	bne.n	2d318 <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   2d322:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2d324:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   2d326:	b2db      	uxtb	r3, r3
   2d328:	425d      	negs	r5, r3
   2d32a:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2d32c:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   2d32e:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   2d330:	bf1e      	ittt	ne
   2d332:	3301      	addne	r3, #1
   2d334:	6013      	strne	r3, [r2, #0]
   2d336:	5548      	strbne	r0, [r1, r5]
	return 0;
   2d338:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   2d33a:	6813      	ldr	r3, [r2, #0]
   2d33c:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   2d340:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   2d342:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   2d344:	bf1f      	itttt	ne
   2d346:	6811      	ldrne	r1, [r2, #0]
   2d348:	780b      	ldrbne	r3, [r1, #0]
   2d34a:	f063 037f 	ornne	r3, r3, #127	; 0x7f
   2d34e:	700b      	strbne	r3, [r1, #0]
			buf->cur++;
   2d350:	6813      	ldr	r3, [r2, #0]
   2d352:	3301      	adds	r3, #1
   2d354:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   2d356:	2800      	cmp	r0, #0
   2d358:	d1ef      	bne.n	2d33a <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   2d35a:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   2d35c:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   2d35e:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   2d360:	6053      	str	r3, [r2, #4]
}
   2d362:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   2d364:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2d368:	e7fb      	b.n	2d362 <mqtt_encode_fixed_header+0x5a>

0002d36a <publish_encode>:
{
   2d36a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2d36e:	7d87      	ldrb	r7, [r0, #22]
   2d370:	7a04      	ldrb	r4, [r0, #8]
   2d372:	f007 0801 	and.w	r8, r7, #1
{
   2d376:	4605      	mov	r5, r0
   2d378:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2d37a:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   2d37e:	b10c      	cbz	r4, 2d384 <publish_encode+0x1a>
   2d380:	8a83      	ldrh	r3, [r0, #20]
   2d382:	b383      	cbz	r3, 2d3e6 <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2d384:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   2d388:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2d38a:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   2d38c:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2d38e:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   2d392:	f7ff ff9e 	bl	2d2d2 <pack_utf8_str>
	if (err_code != 0) {
   2d396:	b9b0      	cbnz	r0, 2d3c6 <publish_encode+0x5c>
	if (param->message.topic.qos) {
   2d398:	7a2b      	ldrb	r3, [r5, #8]
   2d39a:	b9b3      	cbnz	r3, 2d3ca <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2d39c:	0060      	lsls	r0, r4, #1
   2d39e:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   2d3a2:	692a      	ldr	r2, [r5, #16]
   2d3a4:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2d3a8:	4338      	orrs	r0, r7
   2d3aa:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   2d3ae:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   2d3b0:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   2d3b4:	464a      	mov	r2, r9
   2d3b6:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   2d3b8:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   2d3bc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2d3c0:	f7ff ffa2 	bl	2d308 <mqtt_encode_fixed_header>
	if (err_code != 0) {
   2d3c4:	b140      	cbz	r0, 2d3d8 <publish_encode+0x6e>
}
   2d3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   2d3ca:	4649      	mov	r1, r9
   2d3cc:	8aa8      	ldrh	r0, [r5, #20]
   2d3ce:	f7ff ff6e 	bl	2d2ae <pack_uint16>
		if (err_code != 0) {
   2d3d2:	2800      	cmp	r0, #0
   2d3d4:	d0e2      	beq.n	2d39c <publish_encode+0x32>
   2d3d6:	e7f6      	b.n	2d3c6 <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   2d3d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2d3dc:	692a      	ldr	r2, [r5, #16]
   2d3de:	1a9b      	subs	r3, r3, r2
   2d3e0:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   2d3e4:	e7ef      	b.n	2d3c6 <publish_encode+0x5c>
		return -EINVAL;
   2d3e6:	f06f 0015 	mvn.w	r0, #21
   2d3ea:	e7ec      	b.n	2d3c6 <publish_encode+0x5c>

0002d3ec <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   2d3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d3ee:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   2d3f0:	e9d1 3100 	ldrd	r3, r1, [r1]
   2d3f4:	1acb      	subs	r3, r1, r3
   2d3f6:	4293      	cmp	r3, r2
{
   2d3f8:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   2d3fa:	d301      	bcc.n	2d400 <mqtt_read_message_chunk+0x14>
		return 0;
   2d3fc:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   2d3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   2d400:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   2d402:	190f      	adds	r7, r1, r4
   2d404:	e9d0 2313 	ldrd	r2, r3, [r0, #76]	; 0x4c
   2d408:	4413      	add	r3, r2
   2d40a:	429f      	cmp	r7, r3
   2d40c:	d813      	bhi.n	2d436 <mqtt_read_message_chunk+0x4a>
   2d40e:	4297      	cmp	r7, r2
   2d410:	d311      	bcc.n	2d436 <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   2d412:	2300      	movs	r3, #0
   2d414:	4622      	mov	r2, r4
   2d416:	f7e8 fa49 	bl	158ac <mqtt_transport_read>
	if (len < 0) {
   2d41a:	2800      	cmp	r0, #0
   2d41c:	dbef      	blt.n	2d3fe <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   2d41e:	d00d      	beq.n	2d43c <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   2d420:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   2d422:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   2d424:	4403      	add	r3, r0
   2d426:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   2d428:	686b      	ldr	r3, [r5, #4]
   2d42a:	4403      	add	r3, r0
   2d42c:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   2d42e:	d2e5      	bcs.n	2d3fc <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   2d430:	f06f 000a 	mvn.w	r0, #10
   2d434:	e7e3      	b.n	2d3fe <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   2d436:	f06f 000b 	mvn.w	r0, #11
   2d43a:	e7e0      	b.n	2d3fe <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   2d43c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2d440:	e7dd      	b.n	2d3fe <mqtt_read_message_chunk+0x12>

0002d442 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   2d442:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   2d444:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   2d446:	69c2      	ldr	r2, [r0, #28]
{
   2d448:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   2d44a:	9302      	str	r3, [sp, #8]
{
   2d44c:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   2d44e:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   2d450:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   2d452:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   2d454:	4628      	mov	r0, r5
   2d456:	a902      	add	r1, sp, #8
   2d458:	f7ff ffc8 	bl	2d3ec <mqtt_read_message_chunk>
		if (err_code < 0) {
   2d45c:	1e04      	subs	r4, r0, #0
   2d45e:	db2d      	blt.n	2d4bc <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   2d460:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2d462:	aa01      	add	r2, sp, #4
   2d464:	f10d 0103 	add.w	r1, sp, #3
   2d468:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   2d46a:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2d46c:	f7ff fe7f 	bl	2d16e <fixed_header_decode>
	} while (err_code == -EAGAIN);
   2d470:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2d474:	4604      	mov	r4, r0
		chunk_size = 1U;
   2d476:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   2d47a:	d0eb      	beq.n	2d454 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   2d47c:	2800      	cmp	r0, #0
   2d47e:	db21      	blt.n	2d4c4 <mqtt_handle_rx+0x82>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   2d480:	f89d 6003 	ldrb.w	r6, [sp, #3]
   2d484:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   2d488:	2b30      	cmp	r3, #48	; 0x30
   2d48a:	d11e      	bne.n	2d4ca <mqtt_handle_rx+0x88>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   2d48c:	2202      	movs	r2, #2
   2d48e:	4628      	mov	r0, r5
   2d490:	a902      	add	r1, sp, #8
   2d492:	f7ff ffab 	bl	2d3ec <mqtt_read_message_chunk>
	if (err_code < 0) {
   2d496:	1e04      	subs	r4, r0, #0
   2d498:	db10      	blt.n	2d4bc <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   2d49a:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   2d49c:	f016 0f06 	tst.w	r6, #6
   2d4a0:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   2d4a2:	4628      	mov	r0, r5
   2d4a4:	ba52      	rev16	r2, r2
   2d4a6:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   2d4a8:	bf0c      	ite	eq
   2d4aa:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   2d4ac:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   2d4ae:	a902      	add	r1, sp, #8
   2d4b0:	f7ff ff9c 	bl	2d3ec <mqtt_read_message_chunk>
	if (err_code < 0) {
   2d4b4:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   2d4b8:	2c00      	cmp	r4, #0
   2d4ba:	da0d      	bge.n	2d4d8 <mqtt_handle_rx+0x96>
		return (err_code == -EAGAIN) ? 0 : err_code;
   2d4bc:	f114 0f0b 	cmn.w	r4, #11
   2d4c0:	d100      	bne.n	2d4c4 <mqtt_handle_rx+0x82>
   2d4c2:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   2d4c4:	4620      	mov	r0, r4
   2d4c6:	b00c      	add	sp, #48	; 0x30
   2d4c8:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   2d4ca:	4628      	mov	r0, r5
   2d4cc:	9a01      	ldr	r2, [sp, #4]
   2d4ce:	a902      	add	r1, sp, #8
   2d4d0:	f7ff ff8c 	bl	2d3ec <mqtt_read_message_chunk>
   2d4d4:	4604      	mov	r4, r0
   2d4d6:	e7ef      	b.n	2d4b8 <mqtt_handle_rx+0x76>
	evt.result = 0;
   2d4d8:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   2d4da:	f89d 0003 	ldrb.w	r0, [sp, #3]
   2d4de:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   2d4e0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   2d4e4:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   2d4e6:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   2d4e8:	d066      	beq.n	2d5b8 <mqtt_handle_rx+0x176>
   2d4ea:	d813      	bhi.n	2d514 <mqtt_handle_rx+0xd2>
   2d4ec:	2b40      	cmp	r3, #64	; 0x40
   2d4ee:	d059      	beq.n	2d5a4 <mqtt_handle_rx+0x162>
   2d4f0:	d806      	bhi.n	2d500 <mqtt_handle_rx+0xbe>
   2d4f2:	2b20      	cmp	r3, #32
   2d4f4:	d02f      	beq.n	2d556 <mqtt_handle_rx+0x114>
   2d4f6:	2b30      	cmp	r3, #48	; 0x30
   2d4f8:	d048      	beq.n	2d58c <mqtt_handle_rx+0x14a>
	client->internal.rx_buf_datalen = 0U;
   2d4fa:	2400      	movs	r4, #0
   2d4fc:	61ec      	str	r4, [r5, #28]
	return 0;
   2d4fe:	e7e1      	b.n	2d4c4 <mqtt_handle_rx+0x82>
	switch (type_and_flags & 0xF0) {
   2d500:	2b50      	cmp	r3, #80	; 0x50
   2d502:	d1fa      	bne.n	2d4fa <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBREC;
   2d504:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   2d506:	a905      	add	r1, sp, #20
   2d508:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   2d50a:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   2d50e:	f7ff feb6 	bl	2d27e <publish_receive_decode>
   2d512:	e04e      	b.n	2d5b2 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   2d514:	2bb0      	cmp	r3, #176	; 0xb0
   2d516:	d05f      	beq.n	2d5d8 <mqtt_handle_rx+0x196>
   2d518:	d80b      	bhi.n	2d532 <mqtt_handle_rx+0xf0>
   2d51a:	2b70      	cmp	r3, #112	; 0x70
   2d51c:	d054      	beq.n	2d5c8 <mqtt_handle_rx+0x186>
   2d51e:	2b90      	cmp	r3, #144	; 0x90
   2d520:	d1eb      	bne.n	2d4fa <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_SUBACK;
   2d522:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   2d524:	a905      	add	r1, sp, #20
   2d526:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   2d528:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   2d52c:	f7ff fead 	bl	2d28a <subscribe_ack_decode>
   2d530:	e03f      	b.n	2d5b2 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   2d532:	2bd0      	cmp	r3, #208	; 0xd0
   2d534:	d1e1      	bne.n	2d4fa <mqtt_handle_rx+0xb8>
		if (client->unacked_ping <= 0) {
   2d536:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
	int err_code = 0;
   2d53a:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   2d53c:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   2d53e:	bfc8      	it	gt
   2d540:	f103 32ff 	addgt.w	r2, r3, #4294967295
		evt.type = MQTT_EVT_PINGRESP;
   2d544:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   2d548:	bfc8      	it	gt
   2d54a:	b252      	sxtbgt	r2, r2
   2d54c:	f885 205f 	strb.w	r2, [r5, #95]	; 0x5f
		evt.type = MQTT_EVT_PINGRESP;
   2d550:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   2d554:	e010      	b.n	2d578 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_CONNACK;
   2d556:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   2d55a:	4628      	mov	r0, r5
   2d55c:	aa05      	add	r2, sp, #20
   2d55e:	a902      	add	r1, sp, #8
   2d560:	f7ff fe30 	bl	2d1c4 <connect_ack_decode>
		if (err_code == 0) {
   2d564:	4604      	mov	r4, r0
   2d566:	bb28      	cbnz	r0, 2d5b4 <mqtt_handle_rx+0x172>
			if (evt.param.connack.return_code ==
   2d568:	f89d 2015 	ldrb.w	r2, [sp, #21]
   2d56c:	b95a      	cbnz	r2, 2d586 <mqtt_handle_rx+0x144>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   2d56e:	69ab      	ldr	r3, [r5, #24]
   2d570:	f043 0304 	orr.w	r3, r3, #4
   2d574:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   2d576:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   2d578:	4628      	mov	r0, r5
   2d57a:	a904      	add	r1, sp, #16
   2d57c:	f000 f8bf 	bl	2d6fe <event_notify>
	if (err_code < 0) {
   2d580:	2c00      	cmp	r4, #0
   2d582:	daba      	bge.n	2d4fa <mqtt_handle_rx+0xb8>
   2d584:	e79e      	b.n	2d4c4 <mqtt_handle_rx+0x82>
				err_code = -ECONNREFUSED;
   2d586:	f06f 046e 	mvn.w	r4, #110	; 0x6e
   2d58a:	e7f4      	b.n	2d576 <mqtt_handle_rx+0x134>
		evt.type = MQTT_EVT_PUBLISH;
   2d58c:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   2d58e:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   2d590:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   2d594:	ab05      	add	r3, sp, #20
   2d596:	f7ff fe30 	bl	2d1fa <publish_decode>
		client->internal.remaining_payload =
   2d59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   2d59c:	4604      	mov	r4, r0
		evt.result = err_code;
   2d59e:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   2d5a0:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   2d5a2:	e7e9      	b.n	2d578 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBACK;
   2d5a4:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   2d5a6:	a905      	add	r1, sp, #20
   2d5a8:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   2d5aa:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   2d5ae:	f7ff fe64 	bl	2d27a <publish_ack_decode>
   2d5b2:	4604      	mov	r4, r0
		evt.result = err_code;
   2d5b4:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   2d5b6:	e7df      	b.n	2d578 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBREL;
   2d5b8:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   2d5ba:	a905      	add	r1, sp, #20
   2d5bc:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   2d5be:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   2d5c2:	f7ff fe5e 	bl	2d282 <publish_release_decode>
   2d5c6:	e7f4      	b.n	2d5b2 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_PUBCOMP;
   2d5c8:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   2d5ca:	a905      	add	r1, sp, #20
   2d5cc:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   2d5ce:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   2d5d2:	f7ff fe58 	bl	2d286 <publish_complete_decode>
   2d5d6:	e7ec      	b.n	2d5b2 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_UNSUBACK;
   2d5d8:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   2d5da:	a905      	add	r1, sp, #20
   2d5dc:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   2d5e0:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   2d5e4:	f7ff fe61 	bl	2d2aa <unsubscribe_ack_decode>
   2d5e8:	e7e3      	b.n	2d5b2 <mqtt_handle_rx+0x170>

0002d5ea <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   2d5ea:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   2d5ec:	6b45      	ldr	r5, [r0, #52]	; 0x34
{
   2d5ee:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   2d5f0:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   2d5f2:	2206      	movs	r2, #6
   2d5f4:	2101      	movs	r1, #1
   2d5f6:	f7e6 f9df 	bl	139b8 <z_impl_zsock_socket>
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   2d5fa:	2800      	cmp	r0, #0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   2d5fc:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   2d5fe:	da04      	bge.n	2d60a <mqtt_client_tcp_connect+0x20>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   2d600:	f7ff fd65 	bl	2d0ce <__errno>
   2d604:	6800      	ldr	r0, [r0, #0]
   2d606:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   2d608:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   2d60a:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   2d60c:	6b61      	ldr	r1, [r4, #52]	; 0x34
	if (broker->sa_family == AF_INET) {
   2d60e:	2b01      	cmp	r3, #1
		peer_addr_size = sizeof(struct sockaddr_in);
   2d610:	bf14      	ite	ne
   2d612:	2218      	movne	r2, #24
   2d614:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   2d616:	f7ff fc30 	bl	2ce7a <z_impl_zsock_connect>
	if (ret < 0) {
   2d61a:	2800      	cmp	r0, #0
   2d61c:	da03      	bge.n	2d626 <mqtt_client_tcp_connect+0x3c>
		(void)close(client->transport.tcp.sock);
   2d61e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   2d620:	f7ff fc14 	bl	2ce4c <z_impl_zsock_close>
   2d624:	e7ec      	b.n	2d600 <mqtt_client_tcp_connect+0x16>
	return 0;
   2d626:	2000      	movs	r0, #0
   2d628:	e7ee      	b.n	2d608 <mqtt_client_tcp_connect+0x1e>

0002d62a <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   2d62a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   2d62e:	2400      	movs	r4, #0
{
   2d630:	4606      	mov	r6, r0
   2d632:	460f      	mov	r7, r1
   2d634:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2d636:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   2d638:	42ac      	cmp	r4, r5
   2d63a:	d301      	bcc.n	2d640 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   2d63c:	2000      	movs	r0, #0
   2d63e:	e00d      	b.n	2d65c <mqtt_client_tcp_write+0x32>
		ret = send(client->transport.tcp.sock, data + offset,
   2d640:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   2d642:	2300      	movs	r3, #0
   2d644:	e9cd 8800 	strd	r8, r8, [sp]
   2d648:	1b2a      	subs	r2, r5, r4
   2d64a:	1939      	adds	r1, r7, r4
   2d64c:	f7ff fc2b 	bl	2cea6 <z_impl_zsock_sendto>
		if (ret < 0) {
   2d650:	1e03      	subs	r3, r0, #0
   2d652:	da06      	bge.n	2d662 <mqtt_client_tcp_write+0x38>
			return -errno;
   2d654:	f7ff fd3b 	bl	2d0ce <__errno>
   2d658:	6800      	ldr	r0, [r0, #0]
   2d65a:	4240      	negs	r0, r0
}
   2d65c:	b002      	add	sp, #8
   2d65e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   2d662:	441c      	add	r4, r3
   2d664:	e7e8      	b.n	2d638 <mqtt_client_tcp_write+0xe>

0002d666 <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   2d666:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tcp.sock, message, 0);
   2d668:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   2d66a:	2200      	movs	r2, #0
   2d66c:	f7ff fc38 	bl	2cee0 <z_impl_zsock_sendmsg>
	if (ret < 0) {
   2d670:	2800      	cmp	r0, #0
   2d672:	da04      	bge.n	2d67e <mqtt_client_tcp_write_msg+0x18>
		return -errno;
   2d674:	f7ff fd2b 	bl	2d0ce <__errno>
   2d678:	6800      	ldr	r0, [r0, #0]
   2d67a:	4240      	negs	r0, r0
	}

	return 0;
}
   2d67c:	bd08      	pop	{r3, pc}
	return 0;
   2d67e:	2000      	movs	r0, #0
   2d680:	e7fc      	b.n	2d67c <mqtt_client_tcp_write_msg+0x16>

0002d682 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   2d682:	b513      	push	{r0, r1, r4, lr}
   2d684:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   2d686:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   2d688:	bf14      	ite	ne
   2d68a:	4623      	movne	r3, r4
   2d68c:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   2d68e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   2d690:	e9cd 4400 	strd	r4, r4, [sp]
   2d694:	f7ff fc3a 	bl	2cf0c <z_impl_zsock_recvfrom>
	if (ret < 0) {
   2d698:	2800      	cmp	r0, #0
   2d69a:	da03      	bge.n	2d6a4 <mqtt_client_tcp_read+0x22>
		return -errno;
   2d69c:	f7ff fd17 	bl	2d0ce <__errno>
   2d6a0:	6800      	ldr	r0, [r0, #0]
   2d6a2:	4240      	negs	r0, r0
	}

	return ret;
}
   2d6a4:	b002      	add	sp, #8
   2d6a6:	bd10      	pop	{r4, pc}

0002d6a8 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   2d6a8:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   2d6aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   2d6ac:	f7ff fbce 	bl	2ce4c <z_impl_zsock_close>
	if (ret < 0) {
   2d6b0:	2800      	cmp	r0, #0
   2d6b2:	da04      	bge.n	2d6be <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   2d6b4:	f7ff fd0b 	bl	2d0ce <__errno>
   2d6b8:	6800      	ldr	r0, [r0, #0]
   2d6ba:	4240      	negs	r0, r0
	}

	return 0;
}
   2d6bc:	bd08      	pop	{r3, pc}
	return 0;
   2d6be:	2000      	movs	r0, #0
   2d6c0:	e7fc      	b.n	2d6bc <mqtt_client_tcp_disconnect+0x14>

0002d6c2 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   2d6c2:	f7ff bff1 	b.w	2d6a8 <mqtt_client_tcp_disconnect>

0002d6c6 <k_uptime_get>:
{
   2d6c6:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   2d6c8:	f001 fa49 	bl	2eb5e <z_impl_k_uptime_ticks>
   2d6cc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2d6d0:	fba0 2304 	umull	r2, r3, r0, r4
   2d6d4:	fb04 3301 	mla	r3, r4, r1, r3
   2d6d8:	0bd0      	lsrs	r0, r2, #15
}
   2d6da:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2d6de:	0bd9      	lsrs	r1, r3, #15
   2d6e0:	bd10      	pop	{r4, pc}

0002d6e2 <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   2d6e2:	b538      	push	{r3, r4, r5, lr}
   2d6e4:	4604      	mov	r4, r0
   2d6e6:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   2d6e8:	6d82      	ldr	r2, [r0, #88]	; 0x58
   2d6ea:	2100      	movs	r1, #0
   2d6ec:	6d40      	ldr	r0, [r0, #84]	; 0x54
   2d6ee:	f7f8 fe83 	bl	263f8 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   2d6f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
	buf->end = client->tx_buf + client->tx_buf_size;
   2d6f4:	6da2      	ldr	r2, [r4, #88]	; 0x58
	buf->cur = client->tx_buf;
   2d6f6:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   2d6f8:	4413      	add	r3, r2
   2d6fa:	606b      	str	r3, [r5, #4]
}
   2d6fc:	bd38      	pop	{r3, r4, r5, pc}

0002d6fe <event_notify>:

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   2d6fe:	b513      	push	{r0, r1, r4, lr}
	if (client->evt_cb != NULL) {
   2d700:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   2d702:	4604      	mov	r4, r0
   2d704:	9101      	str	r1, [sp, #4]
	if (client->evt_cb != NULL) {
   2d706:	b15b      	cbz	r3, 2d720 <event_notify+0x22>
		mqtt_mutex_unlock(client);
   2d708:	f7e8 f8de 	bl	158c8 <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   2d70c:	4620      	mov	r0, r4
   2d70e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2d710:	9901      	ldr	r1, [sp, #4]
   2d712:	4798      	blx	r3

		mqtt_mutex_lock(client);
   2d714:	4620      	mov	r0, r4
	}
}
   2d716:	b002      	add	sp, #8
   2d718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mqtt_mutex_lock(client);
   2d71c:	f7e8 b900 	b.w	15920 <mqtt_mutex_lock>
}
   2d720:	b002      	add	sp, #8
   2d722:	bd10      	pop	{r4, pc}

0002d724 <client_disconnect.constprop.0>:

static void client_disconnect(struct mqtt_client *client, int result,
   2d724:	b530      	push	{r4, r5, lr}
   2d726:	b089      	sub	sp, #36	; 0x24
   2d728:	4604      	mov	r4, r0
   2d72a:	460d      	mov	r5, r1
			      bool notify)
{
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   2d72c:	f7ff ffc9 	bl	2d6c2 <mqtt_transport_disconnect>
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	if (notify) {
		struct mqtt_evt evt = {
   2d730:	221c      	movs	r2, #28
   2d732:	2100      	movs	r1, #0
   2d734:	4668      	mov	r0, sp
   2d736:	f7f8 fe5f 	bl	263f8 <memset>
   2d73a:	2301      	movs	r3, #1
			.type = MQTT_EVT_DISCONNECT,
			.result = result,
		};

		/* Notify application. */
		event_notify(client, &evt);
   2d73c:	4669      	mov	r1, sp
   2d73e:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   2d740:	f88d 3000 	strb.w	r3, [sp]
   2d744:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   2d746:	f7ff ffda 	bl	2d6fe <event_notify>
	MQTT_STATE_INIT(client);
   2d74a:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   2d74c:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   2d750:	e9c4 3307 	strd	r3, r3, [r4, #28]
	}

	/* Reset internal state. */
	client_reset(client);
}
   2d754:	b009      	add	sp, #36	; 0x24
   2d756:	bd30      	pop	{r4, r5, pc}

0002d758 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   2d758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d75a:	4617      	mov	r7, r2
   2d75c:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   2d75e:	4605      	mov	r5, r0
{
   2d760:	9101      	str	r1, [sp, #4]
	NULL_PARAM_CHECK(client);
   2d762:	b320      	cbz	r0, 2d7ae <read_publish_payload+0x56>

	mqtt_mutex_lock(client);
   2d764:	f7e8 f8dc 	bl	15920 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   2d768:	6a2c      	ldr	r4, [r5, #32]
   2d76a:	b1b4      	cbz	r4, 2d79a <read_publish_payload+0x42>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   2d76c:	42bc      	cmp	r4, r7
   2d76e:	4622      	mov	r2, r4
   2d770:	4633      	mov	r3, r6
   2d772:	bf28      	it	cs
   2d774:	463a      	movcs	r2, r7
   2d776:	4628      	mov	r0, r5
   2d778:	9901      	ldr	r1, [sp, #4]
   2d77a:	f7e8 f897 	bl	158ac <mqtt_transport_read>
   2d77e:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   2d780:	b916      	cbnz	r6, 2d788 <read_publish_payload+0x30>
   2d782:	f110 0f0b 	cmn.w	r0, #11
   2d786:	d008      	beq.n	2d79a <read_publish_payload+0x42>
		goto exit;
	}

	if (ret <= 0) {
   2d788:	2c00      	cmp	r4, #0
   2d78a:	dc0c      	bgt.n	2d7a6 <read_publish_payload+0x4e>
		if (ret == 0) {
			ret = -ENOTCONN;
   2d78c:	bf08      	it	eq
   2d78e:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   2d792:	4628      	mov	r0, r5
   2d794:	4621      	mov	r1, r4
   2d796:	f7ff ffc5 	bl	2d724 <client_disconnect.constprop.0>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   2d79a:	4628      	mov	r0, r5
   2d79c:	f7e8 f894 	bl	158c8 <mqtt_mutex_unlock>

	return ret;
}
   2d7a0:	4620      	mov	r0, r4
   2d7a2:	b003      	add	sp, #12
   2d7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	client->internal.remaining_payload -= ret;
   2d7a6:	6a2b      	ldr	r3, [r5, #32]
   2d7a8:	1b1b      	subs	r3, r3, r4
   2d7aa:	622b      	str	r3, [r5, #32]
   2d7ac:	e7f5      	b.n	2d79a <read_publish_payload+0x42>
	NULL_PARAM_CHECK(client);
   2d7ae:	f06f 0415 	mvn.w	r4, #21
   2d7b2:	e7f5      	b.n	2d7a0 <read_publish_payload+0x48>

0002d7b4 <client_write>:
{
   2d7b4:	b538      	push	{r3, r4, r5, lr}
   2d7b6:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   2d7b8:	f7e8 f85e 	bl	15878 <mqtt_transport_write>
	if (err_code < 0) {
   2d7bc:	1e04      	subs	r4, r0, #0
   2d7be:	da05      	bge.n	2d7cc <client_write+0x18>
		client_disconnect(client, err_code, true);
   2d7c0:	4621      	mov	r1, r4
   2d7c2:	4628      	mov	r0, r5
   2d7c4:	f7ff ffae 	bl	2d724 <client_disconnect.constprop.0>
}
   2d7c8:	4620      	mov	r0, r4
   2d7ca:	bd38      	pop	{r3, r4, r5, pc}
	return (uint32_t)k_uptime_get();
   2d7cc:	f7ff ff7b 	bl	2d6c6 <k_uptime_get>
	return 0;
   2d7d0:	2400      	movs	r4, #0
   2d7d2:	6168      	str	r0, [r5, #20]
   2d7d4:	e7f8      	b.n	2d7c8 <client_write+0x14>

0002d7d6 <mqtt_client_init>:
{
   2d7d6:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK_VOID(client);
   2d7d8:	4604      	mov	r4, r0
   2d7da:	b1a8      	cbz	r0, 2d808 <mqtt_client_init+0x32>
	MQTT_STATE_INIT(client);
   2d7dc:	2500      	movs	r5, #0
   2d7de:	2264      	movs	r2, #100	; 0x64
   2d7e0:	2100      	movs	r1, #0
   2d7e2:	f7f8 fe09 	bl	263f8 <memset>
   2d7e6:	61a5      	str	r5, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   2d7e8:	4620      	mov	r0, r4
   2d7ea:	f001 f8c6 	bl	2e97a <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   2d7ee:	2304      	movs	r3, #4
   2d7f0:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	client->clean_session = MQTT_CLEAN_SESSION;
   2d7f4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   2d7f8:	f365 0341 	bfi	r3, r5, #1, #1
   2d7fc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	client->keepalive = MQTT_KEEPALIVE;
   2d800:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   2d804:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
}
   2d808:	bd38      	pop	{r3, r4, r5, pc}

0002d80a <mqtt_connect>:
{
   2d80a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2d80c:	4605      	mov	r5, r0
   2d80e:	2800      	cmp	r0, #0
   2d810:	d03b      	beq.n	2d88a <mqtt_connect+0x80>
	NULL_PARAM_CHECK(client->client_id.utf8);
   2d812:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2d814:	2b00      	cmp	r3, #0
   2d816:	d038      	beq.n	2d88a <mqtt_connect+0x80>
	mqtt_mutex_lock(client);
   2d818:	f7e8 f882 	bl	15920 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   2d81c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   2d81e:	b38b      	cbz	r3, 2d884 <mqtt_connect+0x7a>
   2d820:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   2d822:	b37b      	cbz	r3, 2d884 <mqtt_connect+0x7a>
	err_code = mqtt_transport_connect(client);
   2d824:	4628      	mov	r0, r5
   2d826:	f7e8 f81d 	bl	15864 <mqtt_transport_connect>
	if (err_code < 0) {
   2d82a:	1e04      	subs	r4, r0, #0
   2d82c:	db24      	blt.n	2d878 <mqtt_connect+0x6e>
	tx_buf_init(client, &packet);
   2d82e:	4669      	mov	r1, sp
   2d830:	4628      	mov	r0, r5
   2d832:	f7ff ff56 	bl	2d6e2 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   2d836:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   2d838:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   2d83a:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   2d83e:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   2d840:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   2d842:	f7e7 ff6b 	bl	1571c <connect_request_encode>
	if (err_code < 0) {
   2d846:	1e04      	subs	r4, r0, #0
   2d848:	db13      	blt.n	2d872 <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   2d84a:	e9dd 1200 	ldrd	r1, r2, [sp]
   2d84e:	4628      	mov	r0, r5
   2d850:	1a52      	subs	r2, r2, r1
   2d852:	f7e8 f811 	bl	15878 <mqtt_transport_write>
	if (err_code < 0) {
   2d856:	1e04      	subs	r4, r0, #0
   2d858:	db0b      	blt.n	2d872 <mqtt_connect+0x68>
   2d85a:	f7ff ff34 	bl	2d6c6 <k_uptime_get>
	client->unacked_ping = 0;
   2d85e:	2400      	movs	r4, #0
   2d860:	6168      	str	r0, [r5, #20]
   2d862:	f885 405f 	strb.w	r4, [r5, #95]	; 0x5f
	mqtt_mutex_unlock(client);
   2d866:	4628      	mov	r0, r5
   2d868:	f7e8 f82e 	bl	158c8 <mqtt_mutex_unlock>
}
   2d86c:	4620      	mov	r0, r4
   2d86e:	b003      	add	sp, #12
   2d870:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   2d872:	4628      	mov	r0, r5
   2d874:	f7ff ff25 	bl	2d6c2 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   2d878:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   2d87a:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   2d87e:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   2d882:	e7f0      	b.n	2d866 <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   2d884:	f06f 040b 	mvn.w	r4, #11
   2d888:	e7f6      	b.n	2d878 <mqtt_connect+0x6e>
	NULL_PARAM_CHECK(client);
   2d88a:	f06f 0415 	mvn.w	r4, #21
   2d88e:	e7ed      	b.n	2d86c <mqtt_connect+0x62>

0002d890 <mqtt_publish>:
{
   2d890:	b570      	push	{r4, r5, r6, lr}
   2d892:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   2d894:	4605      	mov	r5, r0
{
   2d896:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   2d898:	2800      	cmp	r0, #0
   2d89a:	d03b      	beq.n	2d914 <mqtt_publish+0x84>
	NULL_PARAM_CHECK(param);
   2d89c:	2900      	cmp	r1, #0
   2d89e:	d039      	beq.n	2d914 <mqtt_publish+0x84>
	mqtt_mutex_lock(client);
   2d8a0:	f7e8 f83e 	bl	15920 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   2d8a4:	4628      	mov	r0, r5
   2d8a6:	a901      	add	r1, sp, #4
   2d8a8:	f7ff ff1b 	bl	2d6e2 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   2d8ac:	69ab      	ldr	r3, [r5, #24]
   2d8ae:	075b      	lsls	r3, r3, #29
   2d8b0:	d52d      	bpl.n	2d90e <mqtt_publish+0x7e>
	err_code = publish_encode(param, &packet);
   2d8b2:	4630      	mov	r0, r6
   2d8b4:	a901      	add	r1, sp, #4
   2d8b6:	f7ff fd58 	bl	2d36a <publish_encode>
	if (err_code < 0) {
   2d8ba:	1e04      	subs	r4, r0, #0
   2d8bc:	db1c      	blt.n	2d8f8 <mqtt_publish+0x68>
	io_vector[0].iov_base = packet.cur;
   2d8be:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   2d8c0:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   2d8c2:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   2d8c4:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   2d8c6:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   2d8c8:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   2d8ca:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   2d8cc:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   2d8ce:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   2d8d0:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   2d8d2:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   2d8d6:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   2d8d8:	f7f8 fd8e 	bl	263f8 <memset>
	msg.msg_iov = io_vector;
   2d8dc:	ab03      	add	r3, sp, #12
   2d8de:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   2d8e0:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   2d8e2:	4628      	mov	r0, r5
   2d8e4:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   2d8e6:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   2d8e8:	f7e7 ffd2 	bl	15890 <mqtt_transport_write_msg>
	if (err_code < 0) {
   2d8ec:	1e04      	subs	r4, r0, #0
   2d8ee:	da09      	bge.n	2d904 <mqtt_publish+0x74>
		client_disconnect(client, err_code, true);
   2d8f0:	4621      	mov	r1, r4
   2d8f2:	4628      	mov	r0, r5
   2d8f4:	f7ff ff16 	bl	2d724 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   2d8f8:	4628      	mov	r0, r5
   2d8fa:	f7e7 ffe5 	bl	158c8 <mqtt_mutex_unlock>
}
   2d8fe:	4620      	mov	r0, r4
   2d900:	b00e      	add	sp, #56	; 0x38
   2d902:	bd70      	pop	{r4, r5, r6, pc}
   2d904:	f7ff fedf 	bl	2d6c6 <k_uptime_get>
	return 0;
   2d908:	2400      	movs	r4, #0
   2d90a:	6168      	str	r0, [r5, #20]
   2d90c:	e7f4      	b.n	2d8f8 <mqtt_publish+0x68>
		return -ENOTCONN;
   2d90e:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2d912:	e7f1      	b.n	2d8f8 <mqtt_publish+0x68>
	NULL_PARAM_CHECK(client);
   2d914:	f06f 0415 	mvn.w	r4, #21
   2d918:	e7f1      	b.n	2d8fe <mqtt_publish+0x6e>

0002d91a <mqtt_disconnect>:
{
   2d91a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2d91c:	4605      	mov	r5, r0
   2d91e:	b310      	cbz	r0, 2d966 <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   2d920:	f7e7 fffe 	bl	15920 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   2d924:	4669      	mov	r1, sp
   2d926:	4628      	mov	r0, r5
   2d928:	f7ff fedb 	bl	2d6e2 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   2d92c:	69ab      	ldr	r3, [r5, #24]
   2d92e:	075b      	lsls	r3, r3, #29
   2d930:	d516      	bpl.n	2d960 <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   2d932:	4668      	mov	r0, sp
   2d934:	f7e7 ff72 	bl	1581c <disconnect_encode>
	if (err_code < 0) {
   2d938:	1e04      	subs	r4, r0, #0
   2d93a:	db0b      	blt.n	2d954 <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2d93c:	e9dd 1200 	ldrd	r1, r2, [sp]
   2d940:	4628      	mov	r0, r5
   2d942:	1a52      	subs	r2, r2, r1
   2d944:	f7ff ff36 	bl	2d7b4 <client_write>
	if (err_code < 0) {
   2d948:	1e04      	subs	r4, r0, #0
   2d94a:	db03      	blt.n	2d954 <mqtt_disconnect+0x3a>
	client_disconnect(client, 0, true);
   2d94c:	2100      	movs	r1, #0
   2d94e:	4628      	mov	r0, r5
   2d950:	f7ff fee8 	bl	2d724 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   2d954:	4628      	mov	r0, r5
   2d956:	f7e7 ffb7 	bl	158c8 <mqtt_mutex_unlock>
}
   2d95a:	4620      	mov	r0, r4
   2d95c:	b003      	add	sp, #12
   2d95e:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   2d960:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2d964:	e7f6      	b.n	2d954 <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   2d966:	f06f 0415 	mvn.w	r4, #21
   2d96a:	e7f6      	b.n	2d95a <mqtt_disconnect+0x40>

0002d96c <mqtt_ping>:
{
   2d96c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2d96e:	4605      	mov	r5, r0
   2d970:	b320      	cbz	r0, 2d9bc <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   2d972:	f7e7 ffd5 	bl	15920 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   2d976:	4669      	mov	r1, sp
   2d978:	4628      	mov	r0, r5
   2d97a:	f7ff feb2 	bl	2d6e2 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   2d97e:	69ab      	ldr	r3, [r5, #24]
   2d980:	075b      	lsls	r3, r3, #29
   2d982:	d518      	bpl.n	2d9b6 <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   2d984:	4668      	mov	r0, sp
   2d986:	f7e7 ff5b 	bl	15840 <ping_request_encode>
	if (err_code < 0) {
   2d98a:	1e04      	subs	r4, r0, #0
   2d98c:	db0d      	blt.n	2d9aa <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2d98e:	e9dd 1200 	ldrd	r1, r2, [sp]
   2d992:	4628      	mov	r0, r5
   2d994:	1a52      	subs	r2, r2, r1
   2d996:	f7ff ff0d 	bl	2d7b4 <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   2d99a:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2d99e:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   2d9a0:	2b7f      	cmp	r3, #127	; 0x7f
   2d9a2:	d002      	beq.n	2d9aa <mqtt_ping+0x3e>
		client->unacked_ping++;
   2d9a4:	3301      	adds	r3, #1
   2d9a6:	f885 305f 	strb.w	r3, [r5, #95]	; 0x5f
	mqtt_mutex_unlock(client);
   2d9aa:	4628      	mov	r0, r5
   2d9ac:	f7e7 ff8c 	bl	158c8 <mqtt_mutex_unlock>
}
   2d9b0:	4620      	mov	r0, r4
   2d9b2:	b003      	add	sp, #12
   2d9b4:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   2d9b6:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2d9ba:	e7f6      	b.n	2d9aa <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   2d9bc:	f06f 0415 	mvn.w	r4, #21
   2d9c0:	e7f6      	b.n	2d9b0 <mqtt_ping+0x44>

0002d9c2 <mqtt_abort>:
{
   2d9c2:	b510      	push	{r4, lr}
   2d9c4:	4604      	mov	r4, r0
	mqtt_mutex_lock(client);
   2d9c6:	f7e7 ffab 	bl	15920 <mqtt_mutex_lock>
	NULL_PARAM_CHECK(client);
   2d9ca:	b15c      	cbz	r4, 2d9e4 <mqtt_abort+0x22>
	if (client->internal.state != MQTT_STATE_IDLE) {
   2d9cc:	69a3      	ldr	r3, [r4, #24]
   2d9ce:	b123      	cbz	r3, 2d9da <mqtt_abort+0x18>
		client_disconnect(client, -ECONNABORTED, true);
   2d9d0:	f06f 0170 	mvn.w	r1, #112	; 0x70
   2d9d4:	4620      	mov	r0, r4
   2d9d6:	f7ff fea5 	bl	2d724 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   2d9da:	4620      	mov	r0, r4
   2d9dc:	f7e7 ff74 	bl	158c8 <mqtt_mutex_unlock>
	return 0;
   2d9e0:	2000      	movs	r0, #0
}
   2d9e2:	bd10      	pop	{r4, pc}
	NULL_PARAM_CHECK(client);
   2d9e4:	f06f 0015 	mvn.w	r0, #21
   2d9e8:	e7fb      	b.n	2d9e2 <mqtt_abort+0x20>

0002d9ea <mqtt_live>:
{
   2d9ea:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   2d9ec:	4606      	mov	r6, r0
   2d9ee:	b300      	cbz	r0, 2da32 <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   2d9f0:	f7e7 ff96 	bl	15920 <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   2d9f4:	6974      	ldr	r4, [r6, #20]
   2d9f6:	f7ff fe66 	bl	2d6c6 <k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   2d9fa:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   2d9fc:	f8b6 405c 	ldrh.w	r4, [r6, #92]	; 0x5c

	if (diff < 0) {
		return 0;
   2da00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2da04:	b19c      	cbz	r4, 2da2e <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   2da06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2da0a:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   2da0c:	4284      	cmp	r4, r0
   2da0e:	d80d      	bhi.n	2da2c <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   2da10:	4630      	mov	r0, r6
   2da12:	f7ff ffab 	bl	2d96c <mqtt_ping>
		ping_sent = true;
   2da16:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   2da18:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   2da1a:	4630      	mov	r0, r6
   2da1c:	f7e7 ff54 	bl	158c8 <mqtt_mutex_unlock>
		return -EAGAIN;
   2da20:	2c00      	cmp	r4, #0
   2da22:	bf08      	it	eq
   2da24:	f06f 050a 	mvneq.w	r5, #10
}
   2da28:	4628      	mov	r0, r5
   2da2a:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   2da2c:	2400      	movs	r4, #0
	int err_code = 0;
   2da2e:	4625      	mov	r5, r4
   2da30:	e7f3      	b.n	2da1a <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   2da32:	f06f 0515 	mvn.w	r5, #21
   2da36:	e7f7      	b.n	2da28 <mqtt_live+0x3e>

0002da38 <mqtt_keepalive_time_left>:
{
   2da38:	b538      	push	{r3, r4, r5, lr}
   2da3a:	4604      	mov	r4, r0
	uint32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   2da3c:	6945      	ldr	r5, [r0, #20]
   2da3e:	f7ff fe42 	bl	2d6c6 <k_uptime_get>
	uint32_t keepalive_ms = 1000U * client->keepalive;
   2da42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2da46:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
	int32_t diff = k_uptime_get_32() - last_activity;
   2da4a:	1b42      	subs	r2, r0, r5
   2da4c:	434b      	muls	r3, r1
		return 0;
   2da4e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (client->keepalive == 0) {
   2da52:	b119      	cbz	r1, 2da5c <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   2da54:	4293      	cmp	r3, r2
   2da56:	d904      	bls.n	2da62 <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   2da58:	1a98      	subs	r0, r3, r2
}
   2da5a:	bd38      	pop	{r3, r4, r5, pc}
		return UINT32_MAX;
   2da5c:	f04f 30ff 	mov.w	r0, #4294967295
   2da60:	e7fb      	b.n	2da5a <mqtt_keepalive_time_left+0x22>
		return 0;
   2da62:	2000      	movs	r0, #0
   2da64:	e7f9      	b.n	2da5a <mqtt_keepalive_time_left+0x22>

0002da66 <mqtt_input>:
{
   2da66:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   2da68:	4605      	mov	r5, r0
   2da6a:	b1d0      	cbz	r0, 2daa2 <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   2da6c:	f7e7 ff58 	bl	15920 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   2da70:	69ab      	ldr	r3, [r5, #24]
   2da72:	079b      	lsls	r3, r3, #30
   2da74:	d50f      	bpl.n	2da96 <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   2da76:	6a2b      	ldr	r3, [r5, #32]
   2da78:	b983      	cbnz	r3, 2da9c <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   2da7a:	4628      	mov	r0, r5
   2da7c:	f7ff fce1 	bl	2d442 <mqtt_handle_rx>
	if (err_code < 0) {
   2da80:	1e04      	subs	r4, r0, #0
   2da82:	da03      	bge.n	2da8c <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   2da84:	4621      	mov	r1, r4
   2da86:	4628      	mov	r0, r5
   2da88:	f7ff fe4c 	bl	2d724 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   2da8c:	4628      	mov	r0, r5
   2da8e:	f7e7 ff1b 	bl	158c8 <mqtt_mutex_unlock>
}
   2da92:	4620      	mov	r0, r4
   2da94:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   2da96:	f06f 040c 	mvn.w	r4, #12
   2da9a:	e7f7      	b.n	2da8c <mqtt_input+0x26>
		return -EBUSY;
   2da9c:	f06f 040f 	mvn.w	r4, #15
   2daa0:	e7f4      	b.n	2da8c <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   2daa2:	f06f 0415 	mvn.w	r4, #21
   2daa6:	e7f4      	b.n	2da92 <mqtt_input+0x2c>

0002daa8 <mqtt_read_publish_payload>:

int mqtt_read_publish_payload(struct mqtt_client *client, void *buffer,
			      size_t length)
{
	return read_publish_payload(client, buffer, length, false);
   2daa8:	2300      	movs	r3, #0
   2daaa:	f7ff be55 	b.w	2d758 <read_publish_payload>

0002daae <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2daae:	6843      	ldr	r3, [r0, #4]
}
   2dab0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2dab2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2dab4:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2dab6:	600b      	str	r3, [r1, #0]
}
   2dab8:	4770      	bx	lr

0002daba <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2daba:	6843      	ldr	r3, [r0, #4]
   2dabc:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2dabe:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2dac0:	4042      	eors	r2, r0
   2dac2:	400a      	ands	r2, r1
   2dac4:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2dac6:	605a      	str	r2, [r3, #4]
}
   2dac8:	2000      	movs	r0, #0
   2daca:	4770      	bx	lr

0002dacc <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2dacc:	6843      	ldr	r3, [r0, #4]
}
   2dace:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2dad0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2dad2:	6099      	str	r1, [r3, #8]
}
   2dad4:	4770      	bx	lr

0002dad6 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2dad6:	6843      	ldr	r3, [r0, #4]
}
   2dad8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2dada:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2dadc:	60d9      	str	r1, [r3, #12]
}
   2dade:	4770      	bx	lr

0002dae0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2dae0:	6843      	ldr	r3, [r0, #4]
}
   2dae2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2dae4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2dae6:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   2dae8:	4059      	eors	r1, r3
    p_reg->OUT = value;
   2daea:	6051      	str	r1, [r2, #4]
}
   2daec:	4770      	bx	lr

0002daee <nrf_gpio_cfg_sense_set>:
{
   2daee:	b513      	push	{r0, r1, r4, lr}
   2daf0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2daf2:	a801      	add	r0, sp, #4
{
   2daf4:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2daf6:	f7e7 ff8b 	bl	15a10 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   2dafa:	9b01      	ldr	r3, [sp, #4]
   2dafc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2db00:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   2db04:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   2db08:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   2db0c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   2db10:	b002      	add	sp, #8
   2db12:	bd10      	pop	{r4, pc}

0002db14 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   2db14:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   2db16:	6843      	ldr	r3, [r0, #4]
	if (data->int_driven->disable_tx_irq &&
   2db18:	68d2      	ldr	r2, [r2, #12]
	return config->uarte_regs;
   2db1a:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   2db1c:	7b91      	ldrb	r1, [r2, #14]
   2db1e:	b159      	cbz	r1, 2db38 <uarte_nrfx_isr_int+0x24>
   2db20:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2db24:	b141      	cbz	r1, 2db38 <uarte_nrfx_isr_int+0x24>
    p_reg->INTENCLR = mask;
   2db26:	f44f 7180 	mov.w	r1, #256	; 0x100
   2db2a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2db2e:	2101      	movs	r1, #1
   2db30:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   2db32:	2300      	movs	r3, #0
   2db34:	7393      	strb	r3, [r2, #14]
		return;
   2db36:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2db38:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2db3c:	b121      	cbz	r1, 2db48 <uarte_nrfx_isr_int+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2db3e:	2100      	movs	r1, #0
   2db40:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   2db44:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   2db48:	6813      	ldr	r3, [r2, #0]
   2db4a:	b10b      	cbz	r3, 2db50 <uarte_nrfx_isr_int+0x3c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2db4c:	6851      	ldr	r1, [r2, #4]
   2db4e:	4718      	bx	r3
}
   2db50:	4770      	bx	lr

0002db52 <uarte_nrfx_config_get>:
{
   2db52:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2db54:	68c2      	ldr	r2, [r0, #12]
   2db56:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2db5a:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2db5e:	2000      	movs	r0, #0
   2db60:	4770      	bx	lr

0002db62 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2db62:	6843      	ldr	r3, [r0, #4]
   2db64:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2db66:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2db6a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2db6e:	4770      	bx	lr

0002db70 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2db70:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2db72:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   2db74:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2db76:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2db7a:	b148      	cbz	r0, 2db90 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2db7c:	2000      	movs	r0, #0
	*c = data->rx_data;
   2db7e:	7d12      	ldrb	r2, [r2, #20]
   2db80:	700a      	strb	r2, [r1, #0]
   2db82:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2db86:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2db8a:	2201      	movs	r2, #1
   2db8c:	601a      	str	r2, [r3, #0]
	return 0;
   2db8e:	4770      	bx	lr
		return -1;
   2db90:	f04f 30ff 	mov.w	r0, #4294967295
}
   2db94:	4770      	bx	lr

0002db96 <uarte_nrfx_fifo_fill>:
	return config->uarte_regs;
   2db96:	6843      	ldr	r3, [r0, #4]
{
   2db98:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   2db9a:	681c      	ldr	r4, [r3, #0]
{
   2db9c:	4605      	mov	r5, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2db9e:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2dba2:	b1a0      	cbz	r0, 2dbce <uarte_nrfx_fifo_fill+0x38>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2dba4:	68ed      	ldr	r5, [r5, #12]
	if (len > data->int_driven->tx_buff_size) {
   2dba6:	68eb      	ldr	r3, [r5, #12]
   2dba8:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2dbaa:	2300      	movs	r3, #0
   2dbac:	4290      	cmp	r0, r2
   2dbae:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   2dbb2:	bfa8      	it	ge
   2dbb4:	4610      	movge	r0, r2
   2dbb6:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   2dbba:	68ea      	ldr	r2, [r5, #12]
   2dbbc:	4283      	cmp	r3, r0
   2dbbe:	6892      	ldr	r2, [r2, #8]
   2dbc0:	db06      	blt.n	2dbd0 <uarte_nrfx_fifo_fill+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dbc2:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2dbc4:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2dbc8:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dbcc:	60a3      	str	r3, [r4, #8]
}
   2dbce:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   2dbd0:	5cce      	ldrb	r6, [r1, r3]
   2dbd2:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   2dbd4:	3301      	adds	r3, #1
   2dbd6:	e7f0      	b.n	2dbba <uarte_nrfx_fifo_fill+0x24>

0002dbd8 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   2dbd8:	6843      	ldr	r3, [r0, #4]
   2dbda:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2dbdc:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2dbe0:	b153      	cbz	r3, 2dbf8 <uarte_nrfx_fifo_read+0x20>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2dbe2:	68c3      	ldr	r3, [r0, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2dbe4:	2000      	movs	r0, #0
   2dbe6:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   2dbea:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dbee:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   2dbf0:	7d1b      	ldrb	r3, [r3, #20]
   2dbf2:	700b      	strb	r3, [r1, #0]
   2dbf4:	6010      	str	r0, [r2, #0]
}
   2dbf6:	4770      	bx	lr
	int num_rx = 0;
   2dbf8:	4618      	mov	r0, r3
}
   2dbfa:	4770      	bx	lr

0002dbfc <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   2dbfc:	2100      	movs	r1, #0
   2dbfe:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   2dc00:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
   2dc02:	68d2      	ldr	r2, [r2, #12]
	return config->uarte_regs;
   2dc04:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   2dc06:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   2dc08:	f44f 7280 	mov.w	r2, #256	; 0x100
   2dc0c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2dc10:	4770      	bx	lr

0002dc12 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2dc12:	2201      	movs	r2, #1
   2dc14:	68c3      	ldr	r3, [r0, #12]
   2dc16:	68db      	ldr	r3, [r3, #12]
   2dc18:	739a      	strb	r2, [r3, #14]
}
   2dc1a:	4770      	bx	lr

0002dc1c <uarte_nrfx_irq_tx_ready_complete>:
	return !data->int_driven->disable_tx_irq &&
   2dc1c:	68c3      	ldr	r3, [r0, #12]
   2dc1e:	68db      	ldr	r3, [r3, #12]
   2dc20:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   2dc22:	b94b      	cbnz	r3, 2dc38 <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   2dc24:	6843      	ldr	r3, [r0, #4]
   2dc26:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2dc28:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
   2dc2c:	b128      	cbz	r0, 2dc3a <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   2dc2e:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   2dc32:	f3c0 2000 	ubfx	r0, r0, #8, #1
   2dc36:	4770      	bx	lr
   2dc38:	2000      	movs	r0, #0
}
   2dc3a:	4770      	bx	lr

0002dc3c <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   2dc3c:	6843      	ldr	r3, [r0, #4]
   2dc3e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2dc40:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2dc44:	3800      	subs	r0, #0
   2dc46:	bf18      	it	ne
   2dc48:	2001      	movne	r0, #1
   2dc4a:	4770      	bx	lr

0002dc4c <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   2dc4c:	2210      	movs	r2, #16
	return config->uarte_regs;
   2dc4e:	6843      	ldr	r3, [r0, #4]
   2dc50:	681b      	ldr	r3, [r3, #0]
   2dc52:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2dc56:	4770      	bx	lr

0002dc58 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   2dc58:	2210      	movs	r2, #16
	return config->uarte_regs;
   2dc5a:	6843      	ldr	r3, [r0, #4]
   2dc5c:	681b      	ldr	r3, [r3, #0]
   2dc5e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2dc62:	4770      	bx	lr

0002dc64 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   2dc64:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   2dc68:	6843      	ldr	r3, [r0, #4]
   2dc6a:	681b      	ldr	r3, [r3, #0]
   2dc6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2dc70:	4770      	bx	lr

0002dc72 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   2dc72:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   2dc76:	6843      	ldr	r3, [r0, #4]
   2dc78:	681b      	ldr	r3, [r3, #0]
   2dc7a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2dc7e:	4770      	bx	lr

0002dc80 <uarte_nrfx_irq_update>:
}
   2dc80:	2001      	movs	r0, #1
   2dc82:	4770      	bx	lr

0002dc84 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   2dc84:	68c3      	ldr	r3, [r0, #12]
   2dc86:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   2dc88:	e9c3 1200 	strd	r1, r2, [r3]
}
   2dc8c:	4770      	bx	lr

0002dc8e <uarte_nrfx_irq_is_pending>:
{
   2dc8e:	b508      	push	{r3, lr}
	return config->uarte_regs;
   2dc90:	6843      	ldr	r3, [r0, #4]
{
   2dc92:	4602      	mov	r2, r0
	return config->uarte_regs;
   2dc94:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   2dc96:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   2dc9a:	05db      	lsls	r3, r3, #23
   2dc9c:	d405      	bmi.n	2dcaa <uarte_nrfx_irq_is_pending+0x1c>
   2dc9e:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   2dca2:	f010 0010 	ands.w	r0, r0, #16
   2dca6:	d106      	bne.n	2dcb6 <uarte_nrfx_irq_is_pending+0x28>
}
   2dca8:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   2dcaa:	f7ff ffb7 	bl	2dc1c <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   2dcae:	2800      	cmp	r0, #0
   2dcb0:	d0f5      	beq.n	2dc9e <uarte_nrfx_irq_is_pending+0x10>
		||
   2dcb2:	2001      	movs	r0, #1
   2dcb4:	e7f8      	b.n	2dca8 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   2dcb6:	4610      	mov	r0, r2
   2dcb8:	f7ff ffc0 	bl	2dc3c <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   2dcbc:	3800      	subs	r0, #0
   2dcbe:	bf18      	it	ne
   2dcc0:	2001      	movne	r0, #1
   2dcc2:	e7f1      	b.n	2dca8 <uarte_nrfx_irq_is_pending+0x1a>

0002dcc4 <uarte_nrfx_poll_out>:
{
   2dcc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   2dcc8:	6843      	ldr	r3, [r0, #4]
{
   2dcca:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   2dcce:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2dcd0:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   2dcd2:	f000 fecf 	bl	2ea74 <k_is_in_isr>
   2dcd6:	bb98      	cbnz	r0, 2dd40 <uarte_nrfx_poll_out+0x7c>
		lock = &data->poll_out_lock;
   2dcd8:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2dcda:	f04f 0801 	mov.w	r8, #1
   2dcde:	f106 0710 	add.w	r7, r6, #16
   2dce2:	e8d7 3fef 	ldaex	r3, [r7]
   2dce6:	2b00      	cmp	r3, #0
   2dce8:	d103      	bne.n	2dcf2 <uarte_nrfx_poll_out+0x2e>
   2dcea:	e8c7 8fe2 	stlex	r2, r8, [r7]
   2dcee:	2a00      	cmp	r2, #0
   2dcf0:	d1f7      	bne.n	2dce2 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   2dcf2:	d007      	beq.n	2dd04 <uarte_nrfx_poll_out+0x40>
	return z_impl_k_sleep(timeout);
   2dcf4:	2021      	movs	r0, #33	; 0x21
   2dcf6:	2100      	movs	r1, #0
   2dcf8:	3d01      	subs	r5, #1
   2dcfa:	f7f6 fda7 	bl	2484c <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   2dcfe:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   2dd02:	d1ee      	bne.n	2dce2 <uarte_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2dd04:	2300      	movs	r3, #0
   2dd06:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   2dd0a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2dd0e:	f10d 0307 	add.w	r3, sp, #7
   2dd12:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2dd16:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dd18:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   2dd1c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dd20:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2dd22:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   2dd26:	b923      	cbnz	r3, 2dd32 <uarte_nrfx_poll_out+0x6e>
   2dd28:	2001      	movs	r0, #1
   2dd2a:	f000 fde1 	bl	2e8f0 <nrfx_busy_wait>
   2dd2e:	3d01      	subs	r5, #1
   2dd30:	d1f7      	bne.n	2dd22 <uarte_nrfx_poll_out+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dd32:	2301      	movs	r3, #1
   2dd34:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   2dd36:	2300      	movs	r3, #0
   2dd38:	6133      	str	r3, [r6, #16]
}
   2dd3a:	b002      	add	sp, #8
   2dd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   2dd40:	2301      	movs	r3, #1
   2dd42:	6133      	str	r3, [r6, #16]
   2dd44:	e7de      	b.n	2dd04 <uarte_nrfx_poll_out+0x40>

0002dd46 <uarte_instance_init.constprop.0>:
static int uarte_instance_init(const struct device *dev,
   2dd46:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2dd4a:	f04f 0800 	mov.w	r8, #0
	return config->uarte_regs;
   2dd4e:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2dd50:	68c7      	ldr	r7, [r0, #12]
	return config->uarte_regs;
   2dd52:	681c      	ldr	r4, [r3, #0]
   2dd54:	680b      	ldr	r3, [r1, #0]
   2dd56:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
   2dd5a:	4606      	mov	r6, r0
	data->dev = dev;
   2dd5c:	6038      	str	r0, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2dd5e:	a801      	add	r0, sp, #4
static int uarte_instance_init(const struct device *dev,
   2dd60:	460d      	mov	r5, r1
   2dd62:	9301      	str	r3, [sp, #4]
   2dd64:	f7e8 f962 	bl	1602c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2dd68:	2301      	movs	r3, #1
   2dd6a:	9a01      	ldr	r2, [sp, #4]
   2dd6c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2dd6e:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   2dd70:	682b      	ldr	r3, [r5, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2dd72:	a801      	add	r0, sp, #4
   2dd74:	9301      	str	r3, [sp, #4]
   2dd76:	f7e8 f959 	bl	1602c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2dd7a:	2203      	movs	r2, #3
   2dd7c:	9b01      	ldr	r3, [sp, #4]
   2dd7e:	3380      	adds	r3, #128	; 0x80
   2dd80:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   2dd84:	686b      	ldr	r3, [r5, #4]
   2dd86:	1c58      	adds	r0, r3, #1
   2dd88:	d007      	beq.n	2dd9a <uarte_instance_init.constprop.0+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2dd8a:	a801      	add	r0, sp, #4
   2dd8c:	9301      	str	r3, [sp, #4]
   2dd8e:	f7e8 f94d 	bl	1602c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2dd92:	9b01      	ldr	r3, [sp, #4]
   2dd94:	3380      	adds	r3, #128	; 0x80
   2dd96:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   2dd9a:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   2dd9e:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   2dda2:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   2dda6:	68ab      	ldr	r3, [r5, #8]
   2dda8:	1c59      	adds	r1, r3, #1
   2ddaa:	d008      	beq.n	2ddbe <uarte_instance_init.constprop.0+0x78>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ddac:	a801      	add	r0, sp, #4
   2ddae:	9301      	str	r3, [sp, #4]
   2ddb0:	f7e8 f93c 	bl	1602c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2ddb4:	2200      	movs	r2, #0
   2ddb6:	9b01      	ldr	r3, [sp, #4]
   2ddb8:	3380      	adds	r3, #128	; 0x80
   2ddba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   2ddbe:	68eb      	ldr	r3, [r5, #12]
   2ddc0:	1c5a      	adds	r2, r3, #1
   2ddc2:	d011      	beq.n	2dde8 <uarte_instance_init.constprop.0+0xa2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ddc4:	a801      	add	r0, sp, #4
   2ddc6:	9301      	str	r3, [sp, #4]
   2ddc8:	f7e8 f930 	bl	1602c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2ddcc:	2301      	movs	r3, #1
   2ddce:	9a01      	ldr	r2, [sp, #4]
   2ddd0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2ddd2:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   2ddd4:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ddd6:	a801      	add	r0, sp, #4
   2ddd8:	9301      	str	r3, [sp, #4]
   2ddda:	f7e8 f927 	bl	1602c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2ddde:	2203      	movs	r2, #3
   2dde0:	9b01      	ldr	r3, [sp, #4]
   2dde2:	3380      	adds	r3, #128	; 0x80
   2dde4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   2dde8:	68f1      	ldr	r1, [r6, #12]
	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   2ddea:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   2ddee:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
   2ddf0:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   2ddf4:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   2ddf6:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   2ddfa:	f7e8 f861 	bl	15ec0 <uarte_nrfx_configure>
	if (err) {
   2ddfe:	b9d8      	cbnz	r0, 2de38 <uarte_instance_init.constprop.0+0xf2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2de00:	2308      	movs	r3, #8
   2de02:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   2de06:	686b      	ldr	r3, [r5, #4]
   2de08:	3301      	adds	r3, #1
   2de0a:	d00b      	beq.n	2de24 <uarte_instance_init.constprop.0+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2de0c:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   2de10:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   2de14:	f107 0314 	add.w	r3, r7, #20

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2de18:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2de1c:	2301      	movs	r3, #1
   2de1e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2de22:	6023      	str	r3, [r4, #0]
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   2de24:	68fb      	ldr	r3, [r7, #12]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2de26:	689b      	ldr	r3, [r3, #8]
   2de28:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2de2c:	2300      	movs	r3, #0
   2de2e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2de32:	2301      	movs	r3, #1
   2de34:	60a3      	str	r3, [r4, #8]
   2de36:	60e3      	str	r3, [r4, #12]
}
   2de38:	b002      	add	sp, #8
   2de3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002de3e <entropy_cc3xx_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   2de3e:	2000      	movs	r0, #0
   2de40:	4770      	bx	lr

0002de42 <update_offset>:
{
   2de42:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   2de44:	4604      	mov	r4, r0
   2de46:	b140      	cbz	r0, 2de5a <update_offset+0x18>
   2de48:	6803      	ldr	r3, [r0, #0]
   2de4a:	b133      	cbz	r3, 2de5a <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   2de4c:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   2de4e:	4418      	add	r0, r3
   2de50:	f7f8 fee2 	bl	26c18 <strlen>
   2de54:	68a3      	ldr	r3, [r4, #8]
   2de56:	4418      	add	r0, r3
   2de58:	60a0      	str	r0, [r4, #8]
}
   2de5a:	bd10      	pop	{r4, pc}

0002de5c <add_item_to_array>:
    if ((item == NULL) || (array == NULL))
   2de5c:	b161      	cbz	r1, 2de78 <add_item_to_array+0x1c>
   2de5e:	b160      	cbz	r0, 2de7a <add_item_to_array+0x1e>
    child = array->child;
   2de60:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   2de62:	b913      	cbnz	r3, 2de6a <add_item_to_array+0xe>
        array->child = item;
   2de64:	6081      	str	r1, [r0, #8]
}
   2de66:	2001      	movs	r0, #1
   2de68:	4770      	bx	lr
        while (child->next)
   2de6a:	461a      	mov	r2, r3
   2de6c:	681b      	ldr	r3, [r3, #0]
   2de6e:	2b00      	cmp	r3, #0
   2de70:	d1fb      	bne.n	2de6a <add_item_to_array+0xe>
    prev->next = item;
   2de72:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   2de74:	604a      	str	r2, [r1, #4]
   2de76:	e7f6      	b.n	2de66 <add_item_to_array+0xa>
        return false;
   2de78:	4608      	mov	r0, r1
}
   2de7a:	4770      	bx	lr

0002de7c <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   2de7c:	4603      	mov	r3, r0
   2de7e:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   2de80:	2028      	movs	r0, #40	; 0x28
   2de82:	4798      	blx	r3
    if (node)
   2de84:	4604      	mov	r4, r0
   2de86:	b118      	cbz	r0, 2de90 <cJSON_New_Item.isra.0+0x14>
   2de88:	2228      	movs	r2, #40	; 0x28
   2de8a:	2100      	movs	r1, #0
   2de8c:	f7f8 fab4 	bl	263f8 <memset>
}
   2de90:	4620      	mov	r0, r4
   2de92:	bd10      	pop	{r4, pc}

0002de94 <ensure>:
{
   2de94:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   2de96:	4604      	mov	r4, r0
   2de98:	b1b8      	cbz	r0, 2deca <ensure+0x36>
   2de9a:	6805      	ldr	r5, [r0, #0]
   2de9c:	b165      	cbz	r5, 2deb8 <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   2de9e:	6842      	ldr	r2, [r0, #4]
   2dea0:	b112      	cbz	r2, 2dea8 <ensure+0x14>
   2dea2:	6883      	ldr	r3, [r0, #8]
   2dea4:	429a      	cmp	r2, r3
   2dea6:	d910      	bls.n	2deca <ensure+0x36>
    if (needed > INT_MAX)
   2dea8:	2900      	cmp	r1, #0
   2deaa:	db0e      	blt.n	2deca <ensure+0x36>
    needed += p->offset + 1;
   2deac:	68a0      	ldr	r0, [r4, #8]
   2deae:	4401      	add	r1, r0
   2deb0:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   2deb2:	429a      	cmp	r2, r3
   2deb4:	d302      	bcc.n	2debc <ensure+0x28>
        return p->buffer + p->offset;
   2deb6:	4405      	add	r5, r0
}
   2deb8:	4628      	mov	r0, r5
   2deba:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   2debc:	6922      	ldr	r2, [r4, #16]
   2debe:	b922      	cbnz	r2, 2deca <ensure+0x36>
    if (needed > (INT_MAX / 2))
   2dec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   2dec4:	d303      	bcc.n	2dece <ensure+0x3a>
        if (needed <= INT_MAX)
   2dec6:	2b00      	cmp	r3, #0
   2dec8:	da0f      	bge.n	2deea <ensure+0x56>
        return NULL;
   2deca:	2500      	movs	r5, #0
   2decc:	e7f4      	b.n	2deb8 <ensure+0x24>
        newsize = needed + 1;
   2dece:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   2ded0:	6a23      	ldr	r3, [r4, #32]
   2ded2:	b16b      	cbz	r3, 2def0 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   2ded4:	4628      	mov	r0, r5
   2ded6:	4631      	mov	r1, r6
   2ded8:	4798      	blx	r3
        if (newbuffer == NULL)
   2deda:	4605      	mov	r5, r0
   2dedc:	b9b0      	cbnz	r0, 2df0c <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   2dede:	69e3      	ldr	r3, [r4, #28]
   2dee0:	6820      	ldr	r0, [r4, #0]
   2dee2:	4798      	blx	r3
            p->buffer = NULL;
   2dee4:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   2dee8:	e7e6      	b.n	2deb8 <ensure+0x24>
            newsize = INT_MAX;
   2deea:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   2deee:	e7ef      	b.n	2ded0 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   2def0:	4630      	mov	r0, r6
   2def2:	69a3      	ldr	r3, [r4, #24]
   2def4:	4798      	blx	r3
        if (!newbuffer)
   2def6:	4605      	mov	r5, r0
   2def8:	2800      	cmp	r0, #0
   2defa:	d0f0      	beq.n	2dede <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   2defc:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2defe:	6821      	ldr	r1, [r4, #0]
   2df00:	3201      	adds	r2, #1
   2df02:	f7de fe23 	bl	cb4c <memcpy>
        p->hooks.deallocate(p->buffer);
   2df06:	69e3      	ldr	r3, [r4, #28]
   2df08:	6820      	ldr	r0, [r4, #0]
   2df0a:	4798      	blx	r3
    return newbuffer + p->offset;
   2df0c:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   2df0e:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   2df12:	441d      	add	r5, r3
   2df14:	e7d0      	b.n	2deb8 <ensure+0x24>

0002df16 <cJSON_Print>:
    return (char*)print(item, true, &global_hooks);
   2df16:	2101      	movs	r1, #1
   2df18:	f7e8 bbd6 	b.w	166c8 <print.constprop.0>

0002df1c <cJSON_AddStringToObject>:
{
   2df1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2df1e:	4605      	mov	r5, r0
    cJSON *string_item = cJSON_CreateString(string);
   2df20:	4610      	mov	r0, r2
{
   2df22:	9101      	str	r1, [sp, #4]
    cJSON *string_item = cJSON_CreateString(string);
   2df24:	f7e8 fc40 	bl	167a8 <cJSON_CreateString>
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   2df28:	2300      	movs	r3, #0
   2df2a:	4602      	mov	r2, r0
    cJSON *string_item = cJSON_CreateString(string);
   2df2c:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   2df2e:	9901      	ldr	r1, [sp, #4]
   2df30:	4628      	mov	r0, r5
   2df32:	f7e8 fba1 	bl	16678 <add_item_to_object.constprop.0>
   2df36:	4605      	mov	r5, r0
   2df38:	b918      	cbnz	r0, 2df42 <cJSON_AddStringToObject+0x26>
    cJSON_Delete(string_item);
   2df3a:	4620      	mov	r0, r4
   2df3c:	f7e8 fc10 	bl	16760 <cJSON_Delete>
    return NULL;
   2df40:	462c      	mov	r4, r5
}
   2df42:	4620      	mov	r0, r4
   2df44:	b003      	add	sp, #12
   2df46:	bd30      	pop	{r4, r5, pc}

0002df48 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   2df48:	4668      	mov	r0, sp
   2df4a:	f020 0107 	bic.w	r1, r0, #7
   2df4e:	468d      	mov	sp, r1
   2df50:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   2df52:	f7ec f853 	bl	19ffc <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2df56:	f7e6 fb93 	bl	14680 <_arch_isr_direct_pm>
   2df5a:	f7e6 ff39 	bl	14dd0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   2df5e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2df62:	4685      	mov	sp, r0
   2df64:	4770      	bx	lr

0002df66 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   2df66:	4668      	mov	r0, sp
   2df68:	f020 0107 	bic.w	r1, r0, #7
   2df6c:	468d      	mov	sp, r1
   2df6e:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   2df70:	f7ec fbea 	bl	1a748 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2df74:	f7e6 fb84 	bl	14680 <_arch_isr_direct_pm>
   2df78:	f7e6 ff2a 	bl	14dd0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   2df7c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2df80:	4685      	mov	sp, r0
   2df82:	4770      	bx	lr

0002df84 <trace_task_create>:
{
   2df84:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   2df86:	201d      	movs	r0, #29
   2df88:	2200      	movs	r2, #0
   2df8a:	2106      	movs	r1, #6
   2df8c:	f7e6 fb46 	bl	1461c <z_arm_irq_priority_set>
}
   2df90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   2df94:	201d      	movs	r0, #29
   2df96:	f7e6 bb23 	b.w	145e0 <arch_irq_enable>

0002df9a <read_task_create>:
{
   2df9a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   2df9c:	201c      	movs	r0, #28
   2df9e:	2200      	movs	r2, #0
   2dfa0:	2106      	movs	r1, #6
   2dfa2:	f7e6 fb3b 	bl	1461c <z_arm_irq_priority_set>
}
   2dfa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   2dfaa:	201c      	movs	r0, #28
   2dfac:	f7e6 bb18 	b.w	145e0 <arch_irq_enable>

0002dfb0 <z_to_nrf_flags>:
{
   2dfb0:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   2dfb2:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   2dfb6:	bf18      	it	ne
   2dfb8:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   2dfba:	079a      	lsls	r2, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   2dfbc:	bf48      	it	mi
   2dfbe:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   2dfc2:	06db      	lsls	r3, r3, #27
		nrf_flags |= NRF_MSG_TRUNC;
   2dfc4:	bf48      	it	mi
   2dfc6:	f040 0020 	orrmi.w	r0, r0, #32
}
   2dfca:	4770      	bx	lr

0002dfcc <z_to_nrf_family>:
	switch (z_family) {
   2dfcc:	2806      	cmp	r0, #6
   2dfce:	d80a      	bhi.n	2dfe6 <z_to_nrf_family+0x1a>
   2dfd0:	b198      	cbz	r0, 2dffa <z_to_nrf_family+0x2e>
   2dfd2:	3801      	subs	r0, #1
   2dfd4:	2805      	cmp	r0, #5
   2dfd6:	d810      	bhi.n	2dffa <z_to_nrf_family+0x2e>
   2dfd8:	e8df f000 	tbb	[pc, r0]
   2dfdc:	0f0d0312 	.word	0x0f0d0312
   2dfe0:	0b0f      	.short	0x0b0f
   2dfe2:	200a      	movs	r0, #10
   2dfe4:	4770      	bx	lr
   2dfe6:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   2dfe8:	bf14      	ite	ne
   2dfea:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   2dfee:	2066      	moveq	r0, #102	; 0x66
   2dff0:	4770      	bx	lr
		return NRF_AF_LOCAL;
   2dff2:	2001      	movs	r0, #1
   2dff4:	4770      	bx	lr
		return NRF_AF_PACKET;
   2dff6:	2005      	movs	r0, #5
   2dff8:	4770      	bx	lr
		return -EAFNOSUPPORT;
   2dffa:	f06f 0069 	mvn.w	r0, #105	; 0x69
   2dffe:	4770      	bx	lr
		return NRF_AF_INET;
   2e000:	2002      	movs	r0, #2
}
   2e002:	4770      	bx	lr

0002e004 <z_to_nrf_protocol>:
	switch (proto) {
   2e004:	f240 1311 	movw	r3, #273	; 0x111
   2e008:	4298      	cmp	r0, r3
   2e00a:	d023      	beq.n	2e054 <z_to_nrf_protocol+0x50>
   2e00c:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   2e010:	da11      	bge.n	2e036 <z_to_nrf_protocol+0x32>
   2e012:	2811      	cmp	r0, #17
   2e014:	d021      	beq.n	2e05a <z_to_nrf_protocol+0x56>
   2e016:	dc06      	bgt.n	2e026 <z_to_nrf_protocol+0x22>
   2e018:	b300      	cbz	r0, 2e05c <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   2e01a:	2806      	cmp	r0, #6
   2e01c:	bf14      	ite	ne
   2e01e:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2e022:	2001      	moveq	r0, #1
   2e024:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   2e026:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2e02a:	bf14      	ite	ne
   2e02c:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2e030:	f44f 7082 	moveq.w	r0, #260	; 0x104
   2e034:	4770      	bx	lr
	switch (proto) {
   2e036:	f240 2302 	movw	r3, #514	; 0x202
   2e03a:	4298      	cmp	r0, r3
   2e03c:	d00e      	beq.n	2e05c <z_to_nrf_protocol+0x58>
   2e03e:	f240 2303 	movw	r3, #515	; 0x203
   2e042:	4298      	cmp	r0, r3
   2e044:	d00a      	beq.n	2e05c <z_to_nrf_protocol+0x58>
   2e046:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   2e04a:	4298      	cmp	r0, r3
   2e04c:	bf18      	it	ne
   2e04e:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2e052:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   2e054:	f44f 7087 	mov.w	r0, #270	; 0x10e
   2e058:	4770      	bx	lr
	switch (proto) {
   2e05a:	2002      	movs	r0, #2
}
   2e05c:	4770      	bx	lr

0002e05e <nrf91_socket_is_supported>:
}
   2e05e:	2001      	movs	r0, #1
   2e060:	4770      	bx	lr

0002e062 <nrf91_bsdlib_socket_offload_init>:
}
   2e062:	2000      	movs	r0, #0
   2e064:	4770      	bx	lr

0002e066 <nrf91_socket_offload_getsockopt>:
{
   2e066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e06a:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   2e06c:	2300      	movs	r3, #0
{
   2e06e:	b086      	sub	sp, #24
   2e070:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   2e074:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2e078:	f8d8 3000 	ldr.w	r3, [r8]
{
   2e07c:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2e07e:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   2e080:	f240 2302 	movw	r3, #514	; 0x202
   2e084:	4299      	cmp	r1, r3
{
   2e086:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   2e088:	f100 37ff 	add.w	r7, r0, #4294967295
	switch (z_in_level) {
   2e08c:	d005      	beq.n	2e09a <nrf91_socket_offload_getsockopt+0x34>
   2e08e:	dc30      	bgt.n	2e0f2 <nrf91_socket_offload_getsockopt+0x8c>
   2e090:	2901      	cmp	r1, #1
   2e092:	d002      	beq.n	2e09a <nrf91_socket_offload_getsockopt+0x34>
   2e094:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2e098:	d13c      	bne.n	2e114 <nrf91_socket_offload_getsockopt+0xae>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   2e09a:	4631      	mov	r1, r6
   2e09c:	4620      	mov	r0, r4
   2e09e:	aa02      	add	r2, sp, #8
   2e0a0:	f7e8 ff30 	bl	16f04 <z_to_nrf_optname>
   2e0a4:	2800      	cmp	r0, #0
   2e0a6:	db35      	blt.n	2e114 <nrf91_socket_offload_getsockopt+0xae>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   2e0a8:	2c01      	cmp	r4, #1
   2e0aa:	d126      	bne.n	2e0fa <nrf91_socket_offload_getsockopt+0x94>
   2e0ac:	f1a6 0314 	sub.w	r3, r6, #20
   2e0b0:	2b01      	cmp	r3, #1
   2e0b2:	d822      	bhi.n	2e0fa <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   2e0b4:	2308      	movs	r3, #8
   2e0b6:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   2e0b8:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2e0ba:	aa03      	add	r2, sp, #12
   2e0bc:	4638      	mov	r0, r7
   2e0be:	9200      	str	r2, [sp, #0]
   2e0c0:	4621      	mov	r1, r4
   2e0c2:	9a02      	ldr	r2, [sp, #8]
   2e0c4:	f7f2 f93c 	bl	20340 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   2e0c8:	4607      	mov	r7, r0
   2e0ca:	b970      	cbnz	r0, 2e0ea <nrf91_socket_offload_getsockopt+0x84>
   2e0cc:	b16d      	cbz	r5, 2e0ea <nrf91_socket_offload_getsockopt+0x84>
		*optlen = nrf_optlen;
   2e0ce:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   2e0d0:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   2e0d2:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   2e0d6:	d108      	bne.n	2e0ea <nrf91_socket_offload_getsockopt+0x84>
			if (optname == SO_ERROR) {
   2e0d8:	2e04      	cmp	r6, #4
   2e0da:	d110      	bne.n	2e0fe <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   2e0dc:	6828      	ldr	r0, [r5, #0]
   2e0de:	f7e8 fd15 	bl	16b0c <bsd_os_errno_set>
				*(int *)optval = errno;
   2e0e2:	f7fe fff4 	bl	2d0ce <__errno>
   2e0e6:	6803      	ldr	r3, [r0, #0]
   2e0e8:	602b      	str	r3, [r5, #0]
}
   2e0ea:	4638      	mov	r0, r7
   2e0ec:	b006      	add	sp, #24
   2e0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   2e0f2:	f240 2303 	movw	r3, #515	; 0x203
   2e0f6:	4299      	cmp	r1, r3
   2e0f8:	e7ce      	b.n	2e098 <nrf91_socket_offload_getsockopt+0x32>
   2e0fa:	462b      	mov	r3, r5
   2e0fc:	e7dd      	b.n	2e0ba <nrf91_socket_offload_getsockopt+0x54>
			} else if ((optname == SO_RCVTIMEO) ||
   2e0fe:	3e14      	subs	r6, #20
   2e100:	2e01      	cmp	r6, #1
   2e102:	d8f2      	bhi.n	2e0ea <nrf91_socket_offload_getsockopt+0x84>
				((struct timeval *)optval)->tv_sec =
   2e104:	9b04      	ldr	r3, [sp, #16]
   2e106:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   2e108:	9b05      	ldr	r3, [sp, #20]
   2e10a:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   2e10c:	2308      	movs	r3, #8
   2e10e:	f8c8 3000 	str.w	r3, [r8]
   2e112:	e7ea      	b.n	2e0ea <nrf91_socket_offload_getsockopt+0x84>
	errno = ENOPROTOOPT;
   2e114:	f7fe ffdb 	bl	2d0ce <__errno>
   2e118:	236d      	movs	r3, #109	; 0x6d
	return retval;
   2e11a:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   2e11e:	6003      	str	r3, [r0, #0]
	return retval;
   2e120:	e7e3      	b.n	2e0ea <nrf91_socket_offload_getsockopt+0x84>

0002e122 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   2e122:	3801      	subs	r0, #1
   2e124:	f7f2 b8b8 	b.w	20298 <nrf_listen>

0002e128 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   2e128:	3801      	subs	r0, #1
   2e12a:	f7f2 b85d 	b.w	201e8 <nrf_close>

0002e12e <nrf91_socket_offload_freeaddrinfo>:
{
   2e12e:	b538      	push	{r3, r4, r5, lr}
   2e130:	4604      	mov	r4, r0
	while (next != NULL) {
   2e132:	b904      	cbnz	r4, 2e136 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   2e134:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   2e136:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   2e138:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   2e13a:	f000 fddb 	bl	2ecf4 <k_free>
		k_free(this);
   2e13e:	4620      	mov	r0, r4
   2e140:	f000 fdd8 	bl	2ecf4 <k_free>
		next = next->ai_next;
   2e144:	462c      	mov	r4, r5
   2e146:	e7f4      	b.n	2e132 <nrf91_socket_offload_freeaddrinfo+0x4>

0002e148 <z_to_nrf_addrinfo_hints>:
{
   2e148:	b538      	push	{r3, r4, r5, lr}
   2e14a:	460c      	mov	r4, r1
   2e14c:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   2e14e:	221c      	movs	r2, #28
   2e150:	2100      	movs	r1, #0
   2e152:	1d20      	adds	r0, r4, #4
   2e154:	f7f8 f950 	bl	263f8 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   2e158:	2300      	movs	r3, #0
   2e15a:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   2e15c:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   2e15e:	2b03      	cmp	r3, #3
   2e160:	d003      	beq.n	2e16a <z_to_nrf_addrinfo_hints+0x22>
   2e162:	2b04      	cmp	r3, #4
   2e164:	bf08      	it	eq
   2e166:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   2e16a:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   2e16c:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   2e16e:	f7ff ff2d 	bl	2dfcc <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   2e172:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   2e176:	d00b      	beq.n	2e190 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   2e178:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   2e17a:	6928      	ldr	r0, [r5, #16]
   2e17c:	f7ff ff42 	bl	2e004 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2e180:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   2e184:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   2e186:	d003      	beq.n	2e190 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   2e188:	69e8      	ldr	r0, [r5, #28]
   2e18a:	b108      	cbz	r0, 2e190 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   2e18c:	61a0      	str	r0, [r4, #24]
	return 0;
   2e18e:	2000      	movs	r0, #0
}
   2e190:	bd38      	pop	{r3, r4, r5, pc}

0002e192 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   2e192:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   2e194:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   2e196:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   2e198:	4603      	mov	r3, r0
{
   2e19a:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   2e19c:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2e1a0:	f101 0420 	add.w	r4, r1, #32
   2e1a4:	f101 0210 	add.w	r2, r1, #16
   2e1a8:	f852 5b04 	ldr.w	r5, [r2], #4
   2e1ac:	42a2      	cmp	r2, r4
   2e1ae:	f843 5b04 	str.w	r5, [r3], #4
   2e1b2:	d1f9      	bne.n	2e1a8 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   2e1b4:	6a0b      	ldr	r3, [r1, #32]
   2e1b6:	7503      	strb	r3, [r0, #20]
}
   2e1b8:	bd30      	pop	{r4, r5, pc}

0002e1ba <nrf91_socket_offload_recvfrom>:
{
   2e1ba:	b5f0      	push	{r4, r5, r6, r7, lr}
	int sd = OBJ_TO_SD(obj);
   2e1bc:	1e45      	subs	r5, r0, #1
{
   2e1be:	b08f      	sub	sp, #60	; 0x3c
   2e1c0:	4618      	mov	r0, r3
   2e1c2:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   2e1c6:	9203      	str	r2, [sp, #12]
   2e1c8:	f7ff fef2 	bl	2dfb0 <z_to_nrf_flags>
	if (from == NULL) {
   2e1cc:	9a03      	ldr	r2, [sp, #12]
   2e1ce:	4603      	mov	r3, r0
   2e1d0:	b944      	cbnz	r4, 2e1e4 <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2e1d2:	4628      	mov	r0, r5
   2e1d4:	e9cd 4400 	strd	r4, r4, [sp]
   2e1d8:	f7f2 f830 	bl	2023c <nrf_recvfrom>
   2e1dc:	4605      	mov	r5, r0
}
   2e1de:	4628      	mov	r0, r5
   2e1e0:	b00f      	add	sp, #60	; 0x3c
   2e1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   2e1e4:	2024      	movs	r0, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2e1e6:	af05      	add	r7, sp, #20
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   2e1e8:	9004      	str	r0, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2e1ea:	a804      	add	r0, sp, #16
   2e1ec:	9001      	str	r0, [sp, #4]
   2e1ee:	9700      	str	r7, [sp, #0]
   2e1f0:	4628      	mov	r0, r5
   2e1f2:	f7f2 f823 	bl	2023c <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   2e1f6:	9b06      	ldr	r3, [sp, #24]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2e1f8:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   2e1fa:	2b02      	cmp	r3, #2
   2e1fc:	d109      	bne.n	2e212 <nrf91_socket_offload_recvfrom+0x58>
	ptr->sin_port = nrf_in->sin_port;
   2e1fe:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2e202:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   2e204:	2301      	movs	r3, #1
   2e206:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2e208:	9b08      	ldr	r3, [sp, #32]
   2e20a:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   2e20c:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   2e20e:	6033      	str	r3, [r6, #0]
	return retval;
   2e210:	e7e5      	b.n	2e1de <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   2e212:	2b0a      	cmp	r3, #10
   2e214:	d1e3      	bne.n	2e1de <nrf91_socket_offload_recvfrom+0x24>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   2e216:	4639      	mov	r1, r7
   2e218:	4620      	mov	r0, r4
   2e21a:	f7ff ffba 	bl	2e192 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   2e21e:	2318      	movs	r3, #24
   2e220:	e7f5      	b.n	2e20e <nrf91_socket_offload_recvfrom+0x54>

0002e222 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   2e222:	2300      	movs	r3, #0
{
   2e224:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   2e226:	e9cd 3300 	strd	r3, r3, [sp]
   2e22a:	f7ff ffc6 	bl	2e1ba <nrf91_socket_offload_recvfrom>
}
   2e22e:	b003      	add	sp, #12
   2e230:	f85d fb04 	ldr.w	pc, [sp], #4

0002e234 <nrf91_socket_offload_getaddrinfo>:
{
   2e234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e238:	4614      	mov	r4, r2
   2e23a:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   2e23c:	2100      	movs	r1, #0
{
   2e23e:	b093      	sub	sp, #76	; 0x4c
   2e240:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   2e242:	2220      	movs	r2, #32
   2e244:	a802      	add	r0, sp, #8
{
   2e246:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   2e248:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   2e24a:	f7f8 f8d5 	bl	263f8 <memset>
	if (hints != NULL) {
   2e24e:	b194      	cbz	r4, 2e276 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   2e250:	4620      	mov	r0, r4
   2e252:	a902      	add	r1, sp, #8
   2e254:	f7ff ff78 	bl	2e148 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   2e258:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   2e25c:	f000 80d0 	beq.w	2e400 <nrf91_socket_offload_getaddrinfo+0x1cc>
		} else if (error == -EAFNOSUPPORT) {
   2e260:	306a      	adds	r0, #106	; 0x6a
   2e262:	f000 80d0 	beq.w	2e406 <nrf91_socket_offload_getaddrinfo+0x1d2>
		if (hints->ai_next != NULL) {
   2e266:	6820      	ldr	r0, [r4, #0]
   2e268:	b120      	cbz	r0, 2e274 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   2e26a:	ac0a      	add	r4, sp, #40	; 0x28
   2e26c:	4621      	mov	r1, r4
   2e26e:	f7ff ff6b 	bl	2e148 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   2e272:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   2e274:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   2e276:	4628      	mov	r0, r5
   2e278:	4622      	mov	r2, r4
   2e27a:	4631      	mov	r1, r6
   2e27c:	ab01      	add	r3, sp, #4
   2e27e:	f7f2 f87b 	bl	20378 <nrf_getaddrinfo>
	if (retval != 0) {
   2e282:	4605      	mov	r5, r0
   2e284:	b300      	cbz	r0, 2e2c8 <nrf91_socket_offload_getaddrinfo+0x94>
	switch (nrf_error) {
   2e286:	282f      	cmp	r0, #47	; 0x2f
   2e288:	f000 80c0 	beq.w	2e40c <nrf91_socket_offload_getaddrinfo+0x1d8>
   2e28c:	dc0c      	bgt.n	2e2a8 <nrf91_socket_offload_getaddrinfo+0x74>
   2e28e:	280c      	cmp	r0, #12
   2e290:	f000 80bf 	beq.w	2e412 <nrf91_socket_offload_getaddrinfo+0x1de>
		return DNS_EAI_AGAIN;
   2e294:	2823      	cmp	r0, #35	; 0x23
   2e296:	bf14      	ite	ne
   2e298:	f06f 050a 	mvnne.w	r5, #10
   2e29c:	f06f 0502 	mvneq.w	r5, #2
}
   2e2a0:	4628      	mov	r0, r5
   2e2a2:	b013      	add	sp, #76	; 0x4c
   2e2a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   2e2a8:	2833      	cmp	r0, #51	; 0x33
   2e2aa:	d006      	beq.n	2e2ba <nrf91_socket_offload_getaddrinfo+0x86>
		return DNS_EAI_INPROGRESS;
   2e2ac:	2873      	cmp	r0, #115	; 0x73
   2e2ae:	bf14      	ite	ne
   2e2b0:	f06f 050a 	mvnne.w	r5, #10
   2e2b4:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   2e2b8:	e7f2      	b.n	2e2a0 <nrf91_socket_offload_getaddrinfo+0x6c>
		errno = ENETUNREACH;
   2e2ba:	f7fe ff08 	bl	2d0ce <__errno>
   2e2be:	2372      	movs	r3, #114	; 0x72
		return DNS_EAI_SYSTEM;
   2e2c0:	f06f 050a 	mvn.w	r5, #10
		errno = ENETUNREACH;
   2e2c4:	6003      	str	r3, [r0, #0]
   2e2c6:	e7eb      	b.n	2e2a0 <nrf91_socket_offload_getaddrinfo+0x6c>
	struct zsock_addrinfo *latest_z_res = NULL;
   2e2c8:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   2e2ca:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   2e2cc:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   2e2ce:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   2e2d0:	b91e      	cbnz	r6, 2e2da <nrf91_socket_offload_getaddrinfo+0xa6>
	nrf_freeaddrinfo(nrf_res);
   2e2d2:	9801      	ldr	r0, [sp, #4]
   2e2d4:	f7f2 f852 	bl	2037c <nrf_freeaddrinfo>
	return retval;
   2e2d8:	e7e2      	b.n	2e2a0 <nrf91_socket_offload_getaddrinfo+0x6c>
					k_malloc(sizeof(struct zsock_addrinfo));
   2e2da:	2050      	movs	r0, #80	; 0x50
   2e2dc:	f7f7 fcec 	bl	25cb8 <k_malloc>
		if (next_z_res == NULL) {
   2e2e0:	4604      	mov	r4, r0
   2e2e2:	2800      	cmp	r0, #0
   2e2e4:	f000 8081 	beq.w	2e3ea <nrf91_socket_offload_getaddrinfo+0x1b6>
	family = nrf_to_z_family(nrf_in->ai_family);
   2e2e8:	6871      	ldr	r1, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2e2ea:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   2e2ec:	290a      	cmp	r1, #10
	z_out->ai_next = NULL;
   2e2ee:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   2e2f2:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   2e2f6:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2e2fa:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   2e2fc:	dc23      	bgt.n	2e346 <nrf91_socket_offload_getaddrinfo+0x112>
   2e2fe:	2900      	cmp	r1, #0
   2e300:	dd23      	ble.n	2e34a <nrf91_socket_offload_getaddrinfo+0x116>
   2e302:	1e4b      	subs	r3, r1, #1
   2e304:	2b09      	cmp	r3, #9
   2e306:	d820      	bhi.n	2e34a <nrf91_socket_offload_getaddrinfo+0x116>
   2e308:	e8df f003 	tbb	[pc, r3]
   2e30c:	1f1f2905 	.word	0x1f1f2905
   2e310:	1f1f1f25 	.word	0x1f1f1f25
   2e314:	271f      	.short	0x271f
		return AF_LOCAL;
   2e316:	2306      	movs	r3, #6
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2e318:	68f2      	ldr	r2, [r6, #12]
	z_out->ai_family = family;
   2e31a:	60a3      	str	r3, [r4, #8]
	switch (proto) {
   2e31c:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   2e320:	d04b      	beq.n	2e3ba <nrf91_socket_offload_getaddrinfo+0x186>
   2e322:	dc26      	bgt.n	2e372 <nrf91_socket_offload_getaddrinfo+0x13e>
   2e324:	2a02      	cmp	r2, #2
   2e326:	d04c      	beq.n	2e3c2 <nrf91_socket_offload_getaddrinfo+0x18e>
   2e328:	dc1d      	bgt.n	2e366 <nrf91_socket_offload_getaddrinfo+0x132>
   2e32a:	b372      	cbz	r2, 2e38a <nrf91_socket_offload_getaddrinfo+0x156>
   2e32c:	2a01      	cmp	r2, #1
   2e32e:	d04a      	beq.n	2e3c6 <nrf91_socket_offload_getaddrinfo+0x192>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2e330:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   2e334:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   2e336:	2300      	movs	r3, #0
   2e338:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   2e33a:	4620      	mov	r0, r4
   2e33c:	f000 fcda 	bl	2ecf4 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   2e340:	f06f 0506 	mvn.w	r5, #6
   2e344:	e053      	b.n	2e3ee <nrf91_socket_offload_getaddrinfo+0x1ba>
	switch (nrf_family) {
   2e346:	2966      	cmp	r1, #102	; 0x66
   2e348:	d00b      	beq.n	2e362 <nrf91_socket_offload_getaddrinfo+0x12e>
			k_free(next_z_res);
   2e34a:	4620      	mov	r0, r4
   2e34c:	f000 fcd2 	bl	2ecf4 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   2e350:	f06f 0508 	mvn.w	r5, #8
   2e354:	e04b      	b.n	2e3ee <nrf91_socket_offload_getaddrinfo+0x1ba>
		return AF_PACKET;
   2e356:	2303      	movs	r3, #3
   2e358:	e7de      	b.n	2e318 <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_INET6;
   2e35a:	2302      	movs	r3, #2
   2e35c:	e7dc      	b.n	2e318 <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (nrf_family) {
   2e35e:	2301      	movs	r3, #1
   2e360:	e7da      	b.n	2e318 <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_LTE;
   2e362:	460b      	mov	r3, r1
   2e364:	e7d8      	b.n	2e318 <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (proto) {
   2e366:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   2e36a:	d1e1      	bne.n	2e330 <nrf91_socket_offload_getaddrinfo+0xfc>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2e36c:	f44f 7381 	mov.w	r3, #258	; 0x102
   2e370:	e025      	b.n	2e3be <nrf91_socket_offload_getaddrinfo+0x18a>
	switch (proto) {
   2e372:	f240 2302 	movw	r3, #514	; 0x202
   2e376:	429a      	cmp	r2, r3
   2e378:	d007      	beq.n	2e38a <nrf91_socket_offload_getaddrinfo+0x156>
   2e37a:	f240 2303 	movw	r3, #515	; 0x203
   2e37e:	429a      	cmp	r2, r3
   2e380:	d003      	beq.n	2e38a <nrf91_socket_offload_getaddrinfo+0x156>
   2e382:	f240 2301 	movw	r3, #513	; 0x201
   2e386:	429a      	cmp	r2, r3
   2e388:	d1d2      	bne.n	2e330 <nrf91_socket_offload_getaddrinfo+0xfc>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2e38a:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   2e38c:	2902      	cmp	r1, #2
   2e38e:	d11c      	bne.n	2e3ca <nrf91_socket_offload_getaddrinfo+0x196>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   2e390:	2008      	movs	r0, #8
   2e392:	f7f7 fc91 	bl	25cb8 <k_malloc>
   2e396:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   2e398:	b320      	cbz	r0, 2e3e4 <nrf91_socket_offload_getaddrinfo+0x1b0>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   2e39a:	2308      	movs	r3, #8
   2e39c:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   2e39e:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   2e3a0:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2e3a2:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   2e3a4:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   2e3a6:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2e3a8:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   2e3aa:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   2e3ac:	f1b8 0f00 	cmp.w	r8, #0
   2e3b0:	d123      	bne.n	2e3fa <nrf91_socket_offload_getaddrinfo+0x1c6>
			*res = next_z_res;
   2e3b2:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   2e3b4:	46a0      	mov	r8, r4
   2e3b6:	69f6      	ldr	r6, [r6, #28]
   2e3b8:	e78a      	b.n	2e2d0 <nrf91_socket_offload_getaddrinfo+0x9c>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2e3ba:	f240 1311 	movw	r3, #273	; 0x111
   2e3be:	6123      	str	r3, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   2e3c0:	e7e4      	b.n	2e38c <nrf91_socket_offload_getaddrinfo+0x158>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2e3c2:	2311      	movs	r3, #17
   2e3c4:	e7fb      	b.n	2e3be <nrf91_socket_offload_getaddrinfo+0x18a>
   2e3c6:	2306      	movs	r3, #6
   2e3c8:	e7f9      	b.n	2e3be <nrf91_socket_offload_getaddrinfo+0x18a>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   2e3ca:	290a      	cmp	r1, #10
   2e3cc:	d1b5      	bne.n	2e33a <nrf91_socket_offload_getaddrinfo+0x106>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   2e3ce:	2018      	movs	r0, #24
   2e3d0:	f7f7 fc72 	bl	25cb8 <k_malloc>
   2e3d4:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   2e3d6:	b128      	cbz	r0, 2e3e4 <nrf91_socket_offload_getaddrinfo+0x1b0>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2e3d8:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   2e3da:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2e3dc:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   2e3de:	f7ff fed8 	bl	2e192 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   2e3e2:	e7e3      	b.n	2e3ac <nrf91_socket_offload_getaddrinfo+0x178>
			k_free(next_z_res);
   2e3e4:	4620      	mov	r0, r4
   2e3e6:	f000 fc85 	bl	2ecf4 <k_free>
			retval = DNS_EAI_MEMORY;
   2e3ea:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   2e3ee:	6838      	ldr	r0, [r7, #0]
   2e3f0:	f7ff fe9d 	bl	2e12e <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   2e3f4:	2300      	movs	r3, #0
   2e3f6:	603b      	str	r3, [r7, #0]
   2e3f8:	e76b      	b.n	2e2d2 <nrf91_socket_offload_getaddrinfo+0x9e>
			latest_z_res->ai_next = next_z_res;
   2e3fa:	f8c8 4000 	str.w	r4, [r8]
   2e3fe:	e7d9      	b.n	2e3b4 <nrf91_socket_offload_getaddrinfo+0x180>
			return DNS_EAI_SOCKTYPE;
   2e400:	f06f 0506 	mvn.w	r5, #6
   2e404:	e74c      	b.n	2e2a0 <nrf91_socket_offload_getaddrinfo+0x6c>
			return DNS_EAI_ADDRFAMILY;
   2e406:	f06f 0508 	mvn.w	r5, #8
   2e40a:	e749      	b.n	2e2a0 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_NONAME;
   2e40c:	f06f 0501 	mvn.w	r5, #1
   2e410:	e746      	b.n	2e2a0 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_MEMORY;
   2e412:	f06f 0509 	mvn.w	r5, #9
   2e416:	e743      	b.n	2e2a0 <nrf91_socket_offload_getaddrinfo+0x6c>

0002e418 <z_to_nrf_ipv6>:
{
   2e418:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   2e41a:	2124      	movs	r1, #36	; 0x24
   2e41c:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   2e41e:	8841      	ldrh	r1, [r0, #2]
{
   2e420:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   2e422:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   2e424:	210a      	movs	r1, #10
{
   2e426:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   2e428:	6059      	str	r1, [r3, #4]
   2e42a:	1d04      	adds	r4, r0, #4
   2e42c:	f103 0610 	add.w	r6, r3, #16
   2e430:	f100 0714 	add.w	r7, r0, #20
   2e434:	4635      	mov	r5, r6
   2e436:	6820      	ldr	r0, [r4, #0]
   2e438:	6861      	ldr	r1, [r4, #4]
   2e43a:	3408      	adds	r4, #8
   2e43c:	c503      	stmia	r5!, {r0, r1}
   2e43e:	42bc      	cmp	r4, r7
   2e440:	462e      	mov	r6, r5
   2e442:	d1f7      	bne.n	2e434 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   2e444:	7d12      	ldrb	r2, [r2, #20]
   2e446:	621a      	str	r2, [r3, #32]
}
   2e448:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002e44a <nrf91_socket_offload_sendto>:
{
   2e44a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e44e:	b08e      	sub	sp, #56	; 0x38
   2e450:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2e452:	460e      	mov	r6, r1
   2e454:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   2e456:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   2e458:	b974      	cbnz	r4, 2e478 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2e45a:	4618      	mov	r0, r3
   2e45c:	9203      	str	r2, [sp, #12]
   2e45e:	f7ff fda7 	bl	2dfb0 <z_to_nrf_flags>
   2e462:	4603      	mov	r3, r0
   2e464:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2e468:	4631      	mov	r1, r6
   2e46a:	4628      	mov	r0, r5
   2e46c:	9a03      	ldr	r2, [sp, #12]
   2e46e:	f7f1 fec9 	bl	20204 <nrf_sendto>
}
   2e472:	b00e      	add	sp, #56	; 0x38
   2e474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET) {
   2e478:	8823      	ldrh	r3, [r4, #0]
   2e47a:	9203      	str	r2, [sp, #12]
   2e47c:	2b01      	cmp	r3, #1
   2e47e:	d111      	bne.n	2e4a4 <nrf91_socket_offload_sendto+0x5a>
	nrf_out->sin_port = ptr->sin_port;
   2e480:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e482:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   2e484:	f8ad 301c 	strh.w	r3, [sp, #28]
	nrf_out->sin_family = NRF_AF_INET;
   2e488:	2302      	movs	r3, #2
   2e48a:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e48c:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2e48e:	4638      	mov	r0, r7
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e490:	f88d 1014 	strb.w	r1, [sp, #20]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e494:	9308      	str	r3, [sp, #32]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2e496:	f7ff fd8b 	bl	2dfb0 <z_to_nrf_flags>
   2e49a:	9101      	str	r1, [sp, #4]
   2e49c:	a905      	add	r1, sp, #20
   2e49e:	4603      	mov	r3, r0
   2e4a0:	9100      	str	r1, [sp, #0]
   2e4a2:	e7e1      	b.n	2e468 <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   2e4a4:	2b02      	cmp	r3, #2
   2e4a6:	d10d      	bne.n	2e4c4 <nrf91_socket_offload_sendto+0x7a>
		z_to_nrf_ipv6(to, &ipv6);
   2e4a8:	f10d 0814 	add.w	r8, sp, #20
   2e4ac:	4641      	mov	r1, r8
   2e4ae:	4620      	mov	r0, r4
   2e4b0:	f7ff ffb2 	bl	2e418 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2e4b4:	4638      	mov	r0, r7
   2e4b6:	f7ff fd7b 	bl	2dfb0 <z_to_nrf_flags>
   2e4ba:	2124      	movs	r1, #36	; 0x24
   2e4bc:	4603      	mov	r3, r0
   2e4be:	e9cd 8100 	strd	r8, r1, [sp]
   2e4c2:	e7d1      	b.n	2e468 <nrf91_socket_offload_sendto+0x1e>
	errno = ENOTSUP;
   2e4c4:	f7fe fe03 	bl	2d0ce <__errno>
   2e4c8:	2386      	movs	r3, #134	; 0x86
   2e4ca:	6003      	str	r3, [r0, #0]
	return retval;
   2e4cc:	f04f 30ff 	mov.w	r0, #4294967295
   2e4d0:	e7cf      	b.n	2e472 <nrf91_socket_offload_sendto+0x28>

0002e4d2 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2e4d2:	2300      	movs	r3, #0
{
   2e4d4:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2e4d6:	e9cd 3300 	strd	r3, r3, [sp]
   2e4da:	f7ff ffb6 	bl	2e44a <nrf91_socket_offload_sendto>
}
   2e4de:	b003      	add	sp, #12
   2e4e0:	f85d fb04 	ldr.w	pc, [sp], #4

0002e4e4 <nrf91_socket_offload_connect>:
{
   2e4e4:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   2e4e6:	1e44      	subs	r4, r0, #1
	if (addr->sa_family == AF_INET) {
   2e4e8:	8808      	ldrh	r0, [r1, #0]
{
   2e4ea:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   2e4ec:	2801      	cmp	r0, #1
{
   2e4ee:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   2e4f0:	d10f      	bne.n	2e512 <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   2e4f2:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e4f4:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2e4f6:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   2e4fa:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e4fc:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e4fe:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   2e502:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e504:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2e506:	4620      	mov	r0, r4
   2e508:	a901      	add	r1, sp, #4
   2e50a:	f7f1 feb3 	bl	20274 <nrf_connect>
}
   2e50e:	b00a      	add	sp, #40	; 0x28
   2e510:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2e512:	2802      	cmp	r0, #2
   2e514:	d105      	bne.n	2e522 <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   2e516:	4618      	mov	r0, r3
   2e518:	a901      	add	r1, sp, #4
   2e51a:	f7ff ff7d 	bl	2e418 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2e51e:	2224      	movs	r2, #36	; 0x24
   2e520:	e7f1      	b.n	2e506 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   2e522:	4620      	mov	r0, r4
   2e524:	f7f1 fea6 	bl	20274 <nrf_connect>
		if (retval < 0) {
   2e528:	2800      	cmp	r0, #0
   2e52a:	daf0      	bge.n	2e50e <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   2e52c:	f7fe fdcf 	bl	2d0ce <__errno>
   2e530:	2386      	movs	r3, #134	; 0x86
   2e532:	6003      	str	r3, [r0, #0]
   2e534:	f04f 30ff 	mov.w	r0, #4294967295
   2e538:	e7e9      	b.n	2e50e <nrf91_socket_offload_connect+0x2a>

0002e53a <nrf91_socket_offload_setsockopt>:
{
   2e53a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e53e:	461e      	mov	r6, r3
	switch (z_in_level) {
   2e540:	f240 2302 	movw	r3, #514	; 0x202
{
   2e544:	b086      	sub	sp, #24
	switch (z_in_level) {
   2e546:	4299      	cmp	r1, r3
{
   2e548:	460c      	mov	r4, r1
   2e54a:	4615      	mov	r5, r2
   2e54c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   2e54e:	f100 38ff 	add.w	r8, r0, #4294967295
	switch (z_in_level) {
   2e552:	d005      	beq.n	2e560 <nrf91_socket_offload_setsockopt+0x26>
   2e554:	dc20      	bgt.n	2e598 <nrf91_socket_offload_setsockopt+0x5e>
   2e556:	2901      	cmp	r1, #1
   2e558:	d002      	beq.n	2e560 <nrf91_socket_offload_setsockopt+0x26>
   2e55a:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2e55e:	d126      	bne.n	2e5ae <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   2e560:	4629      	mov	r1, r5
   2e562:	4620      	mov	r0, r4
   2e564:	aa03      	add	r2, sp, #12
   2e566:	f7e8 fccd 	bl	16f04 <z_to_nrf_optname>
   2e56a:	2800      	cmp	r0, #0
   2e56c:	db1f      	blt.n	2e5ae <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   2e56e:	2c01      	cmp	r4, #1
   2e570:	d116      	bne.n	2e5a0 <nrf91_socket_offload_setsockopt+0x66>
   2e572:	3d14      	subs	r5, #20
   2e574:	2d01      	cmp	r5, #1
   2e576:	d805      	bhi.n	2e584 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(struct nrf_timeval);
   2e578:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   2e57a:	6832      	ldr	r2, [r6, #0]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2e57c:	6873      	ldr	r3, [r6, #4]
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   2e57e:	9204      	str	r2, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2e580:	9305      	str	r3, [sp, #20]
		nrf_optval = &nrf_timeo;
   2e582:	ae04      	add	r6, sp, #16
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2e584:	4633      	mov	r3, r6
   2e586:	4621      	mov	r1, r4
   2e588:	4640      	mov	r0, r8
   2e58a:	9a03      	ldr	r2, [sp, #12]
   2e58c:	9700      	str	r7, [sp, #0]
   2e58e:	f7f1 febb 	bl	20308 <nrf_setsockopt>
}
   2e592:	b006      	add	sp, #24
   2e594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   2e598:	f240 2303 	movw	r3, #515	; 0x203
   2e59c:	4299      	cmp	r1, r3
   2e59e:	e7de      	b.n	2e55e <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   2e5a0:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   2e5a4:	d1ee      	bne.n	2e584 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   2e5a6:	2d07      	cmp	r5, #7
   2e5a8:	bf08      	it	eq
   2e5aa:	2701      	moveq	r7, #1
   2e5ac:	e7ea      	b.n	2e584 <nrf91_socket_offload_setsockopt+0x4a>
	errno = ENOPROTOOPT;
   2e5ae:	f7fe fd8e 	bl	2d0ce <__errno>
   2e5b2:	236d      	movs	r3, #109	; 0x6d
   2e5b4:	6003      	str	r3, [r0, #0]
   2e5b6:	f04f 30ff 	mov.w	r0, #4294967295
   2e5ba:	e7ea      	b.n	2e592 <nrf91_socket_offload_setsockopt+0x58>

0002e5bc <nrf91_socket_offload_bind>:
{
   2e5bc:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   2e5be:	880a      	ldrh	r2, [r1, #0]
{
   2e5c0:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   2e5c2:	2a01      	cmp	r2, #1
{
   2e5c4:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   2e5c6:	f100 34ff 	add.w	r4, r0, #4294967295
	if (addr->sa_family == AF_INET) {
   2e5ca:	d10f      	bne.n	2e5ec <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   2e5cc:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e5ce:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2e5d0:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   2e5d4:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e5d6:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2e5d8:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   2e5dc:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2e5de:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2e5e0:	4620      	mov	r0, r4
   2e5e2:	a901      	add	r1, sp, #4
   2e5e4:	f7f1 fe7e 	bl	202e4 <nrf_bind>
}
   2e5e8:	b00a      	add	sp, #40	; 0x28
   2e5ea:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2e5ec:	2a02      	cmp	r2, #2
   2e5ee:	d105      	bne.n	2e5fc <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   2e5f0:	4618      	mov	r0, r3
   2e5f2:	a901      	add	r1, sp, #4
   2e5f4:	f7ff ff10 	bl	2e418 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2e5f8:	2224      	movs	r2, #36	; 0x24
   2e5fa:	e7f1      	b.n	2e5e0 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   2e5fc:	f7fe fd67 	bl	2d0ce <__errno>
   2e600:	2386      	movs	r3, #134	; 0x86
   2e602:	6003      	str	r3, [r0, #0]
   2e604:	f04f 30ff 	mov.w	r0, #4294967295
   2e608:	e7ee      	b.n	2e5e8 <nrf91_socket_offload_bind+0x2c>

0002e60a <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   2e60a:	ea40 0301 	orr.w	r3, r0, r1
   2e60e:	f033 030f 	bics.w	r3, r3, #15
   2e612:	d101      	bne.n	2e618 <dk_set_leds_state+0xe>
   2e614:	f7e8 bfa4 	b.w	17560 <dk_set_leds_state.part.0>
}
   2e618:	f06f 0015 	mvn.w	r0, #21
   2e61c:	4770      	bx	lr

0002e61e <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   2e61e:	6883      	ldr	r3, [r0, #8]
   2e620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2e622:	b103      	cbz	r3, 2e626 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   2e624:	4718      	bx	r3
}
   2e626:	4770      	bx	lr

0002e628 <response_handler>:
	write_uart_string(response);
   2e628:	4608      	mov	r0, r1
   2e62a:	f7e9 be63 	b.w	182f4 <write_uart_string>

0002e62e <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   2e62e:	280d      	cmp	r0, #13
   2e630:	d004      	beq.n	2e63c <is_lfcr+0xe>
   2e632:	f1a0 030a 	sub.w	r3, r0, #10
   2e636:	4258      	negs	r0, r3
   2e638:	4158      	adcs	r0, r3
   2e63a:	4770      	bx	lr
		return true;
   2e63c:	2001      	movs	r0, #1
}
   2e63e:	4770      	bx	lr

0002e640 <skip_command_prefix>:
{
   2e640:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   2e642:	6801      	ldr	r1, [r0, #0]
{
   2e644:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   2e646:	1c8b      	adds	r3, r1, #2
   2e648:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   2e64a:	788c      	ldrb	r4, [r1, #2]
   2e64c:	4620      	mov	r0, r4
   2e64e:	f7ff ffee 	bl	2e62e <is_lfcr>
   2e652:	b910      	cbnz	r0, 2e65a <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2e654:	b10c      	cbz	r4, 2e65a <skip_command_prefix+0x1a>
	(*cmd)++;
   2e656:	3103      	adds	r1, #3
   2e658:	6011      	str	r1, [r2, #0]
}
   2e65a:	bd10      	pop	{r4, pc}

0002e65c <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   2e65c:	6813      	ldr	r3, [r2, #0]
   2e65e:	f7ea b991 	b.w	18984 <at_parser_max_params_from_str>

0002e662 <at_params_list_init>:
{
   2e662:	b538      	push	{r3, r4, r5, lr}
   2e664:	460d      	mov	r5, r1
	if (list == NULL) {
   2e666:	4604      	mov	r4, r0
   2e668:	b140      	cbz	r0, 2e67c <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   2e66a:	210c      	movs	r1, #12
   2e66c:	4628      	mov	r0, r5
   2e66e:	f000 fb46 	bl	2ecfe <k_calloc>
   2e672:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   2e674:	b128      	cbz	r0, 2e682 <at_params_list_init+0x20>
	return 0;
   2e676:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   2e678:	6025      	str	r5, [r4, #0]
}
   2e67a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2e67c:	f06f 0015 	mvn.w	r0, #21
   2e680:	e7fb      	b.n	2e67a <at_params_list_init+0x18>
		return -ENOMEM;
   2e682:	f06f 000b 	mvn.w	r0, #11
   2e686:	e7f8      	b.n	2e67a <at_params_list_init+0x18>

0002e688 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   2e688:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   2e68a:	4604      	mov	r4, r0
   2e68c:	b148      	cbz	r0, 2e6a2 <at_params_list_free+0x1a>
   2e68e:	6843      	ldr	r3, [r0, #4]
   2e690:	b13b      	cbz	r3, 2e6a2 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   2e692:	2500      	movs	r5, #0
	at_params_list_clear(list);
   2e694:	f7ea fa72 	bl	18b7c <at_params_list_clear>
	k_free(list->params);
   2e698:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   2e69a:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   2e69c:	f000 fb2a 	bl	2ecf4 <k_free>
	list->params = NULL;
   2e6a0:	6065      	str	r5, [r4, #4]
}
   2e6a2:	bd38      	pop	{r3, r4, r5, pc}

0002e6a4 <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			uint16_t value)
{
   2e6a4:	b538      	push	{r3, r4, r5, lr}
   2e6a6:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   2e6a8:	b910      	cbnz	r0, 2e6b0 <at_params_short_put+0xc>
		return -EINVAL;
   2e6aa:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
	return 0;
}
   2e6ae:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   2e6b0:	6843      	ldr	r3, [r0, #4]
   2e6b2:	2b00      	cmp	r3, #0
   2e6b4:	d0f9      	beq.n	2e6aa <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   2e6b6:	f7ea f9f5 	bl	18aa4 <at_params_get>
	if (param == NULL) {
   2e6ba:	4604      	mov	r4, r0
   2e6bc:	2800      	cmp	r0, #0
   2e6be:	d0f4      	beq.n	2e6aa <at_params_short_put+0x6>
	at_param_clear(param);
   2e6c0:	f7ea fa3a 	bl	18b38 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   2e6c4:	2301      	movs	r3, #1
	return 0;
   2e6c6:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   2e6c8:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
   2e6ca:	60a5      	str	r5, [r4, #8]
	return 0;
   2e6cc:	e7ef      	b.n	2e6ae <at_params_short_put+0xa>

0002e6ce <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   2e6ce:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   2e6d0:	b910      	cbnz	r0, 2e6d8 <at_params_empty_put+0xa>
		return -EINVAL;
   2e6d2:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   2e6d6:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   2e6d8:	6843      	ldr	r3, [r0, #4]
   2e6da:	2b00      	cmp	r3, #0
   2e6dc:	d0f9      	beq.n	2e6d2 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   2e6de:	f7ea f9e1 	bl	18aa4 <at_params_get>
	if (param == NULL) {
   2e6e2:	4604      	mov	r4, r0
   2e6e4:	2800      	cmp	r0, #0
   2e6e6:	d0f4      	beq.n	2e6d2 <at_params_empty_put+0x4>
	at_param_clear(param);
   2e6e8:	f7ea fa26 	bl	18b38 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   2e6ec:	2305      	movs	r3, #5
	param->value.int_val = 0;
   2e6ee:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   2e6f0:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   2e6f2:	60a0      	str	r0, [r4, #8]
	return 0;
   2e6f4:	e7ef      	b.n	2e6d6 <at_params_empty_put+0x8>

0002e6f6 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      uint32_t value)
{
   2e6f6:	b538      	push	{r3, r4, r5, lr}
   2e6f8:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   2e6fa:	b910      	cbnz	r0, 2e702 <at_params_int_put+0xc>
		return -EINVAL;
   2e6fc:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   2e700:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   2e702:	6843      	ldr	r3, [r0, #4]
   2e704:	2b00      	cmp	r3, #0
   2e706:	d0f9      	beq.n	2e6fc <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   2e708:	f7ea f9cc 	bl	18aa4 <at_params_get>
	if (param == NULL) {
   2e70c:	4604      	mov	r4, r0
   2e70e:	2800      	cmp	r0, #0
   2e710:	d0f4      	beq.n	2e6fc <at_params_int_put+0x6>
	at_param_clear(param);
   2e712:	f7ea fa11 	bl	18b38 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   2e716:	2302      	movs	r3, #2
	return 0;
   2e718:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   2e71a:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   2e71c:	60a5      	str	r5, [r4, #8]
	return 0;
   2e71e:	e7ef      	b.n	2e700 <at_params_int_put+0xa>

0002e720 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   2e720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e722:	4617      	mov	r7, r2
   2e724:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   2e726:	b910      	cbnz	r0, 2e72e <at_params_string_put+0xe>
		return -EINVAL;
   2e728:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   2e72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   2e72e:	6843      	ldr	r3, [r0, #4]
   2e730:	2b00      	cmp	r3, #0
   2e732:	d0f9      	beq.n	2e728 <at_params_string_put+0x8>
   2e734:	2a00      	cmp	r2, #0
   2e736:	d0f7      	beq.n	2e728 <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   2e738:	f7ea f9b4 	bl	18aa4 <at_params_get>
	if (param == NULL) {
   2e73c:	4604      	mov	r4, r0
   2e73e:	2800      	cmp	r0, #0
   2e740:	d0f2      	beq.n	2e728 <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   2e742:	1c68      	adds	r0, r5, #1
   2e744:	f7f7 fab8 	bl	25cb8 <k_malloc>
	if (param_value == NULL) {
   2e748:	4606      	mov	r6, r0
   2e74a:	b160      	cbz	r0, 2e766 <at_params_string_put+0x46>
   2e74c:	462a      	mov	r2, r5
   2e74e:	4639      	mov	r1, r7
   2e750:	f7de f9fc 	bl	cb4c <memcpy>
	at_param_clear(param);
   2e754:	4620      	mov	r0, r4
   2e756:	f7ea f9ef 	bl	18b38 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   2e75a:	2303      	movs	r3, #3
	return 0;
   2e75c:	2000      	movs	r0, #0
	param->size = str_len;
   2e75e:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   2e760:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   2e762:	60a6      	str	r6, [r4, #8]
	return 0;
   2e764:	e7e2      	b.n	2e72c <at_params_string_put+0xc>
		return -ENOMEM;
   2e766:	f06f 000b 	mvn.w	r0, #11
   2e76a:	e7df      	b.n	2e72c <at_params_string_put+0xc>

0002e76c <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   2e76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e76e:	4617      	mov	r7, r2
   2e770:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   2e772:	b910      	cbnz	r0, 2e77a <at_params_array_put+0xe>
		return -EINVAL;
   2e774:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   2e778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   2e77a:	6843      	ldr	r3, [r0, #4]
   2e77c:	2b00      	cmp	r3, #0
   2e77e:	d0f9      	beq.n	2e774 <at_params_array_put+0x8>
   2e780:	2a00      	cmp	r2, #0
   2e782:	d0f7      	beq.n	2e774 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   2e784:	f7ea f98e 	bl	18aa4 <at_params_get>
	if (param == NULL) {
   2e788:	4604      	mov	r4, r0
   2e78a:	2800      	cmp	r0, #0
   2e78c:	d0f2      	beq.n	2e774 <at_params_array_put+0x8>
	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   2e78e:	4628      	mov	r0, r5
   2e790:	f7f7 fa92 	bl	25cb8 <k_malloc>
	if (param_value == NULL) {
   2e794:	4606      	mov	r6, r0
   2e796:	b160      	cbz	r0, 2e7b2 <at_params_array_put+0x46>
   2e798:	462a      	mov	r2, r5
   2e79a:	4639      	mov	r1, r7
   2e79c:	f7de f9d6 	bl	cb4c <memcpy>
	at_param_clear(param);
   2e7a0:	4620      	mov	r0, r4
   2e7a2:	f7ea f9c9 	bl	18b38 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   2e7a6:	2304      	movs	r3, #4
	return 0;
   2e7a8:	2000      	movs	r0, #0
	param->size = array_len;
   2e7aa:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   2e7ac:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   2e7ae:	60a6      	str	r6, [r4, #8]
	return 0;
   2e7b0:	e7e2      	b.n	2e778 <at_params_array_put+0xc>
		return -ENOMEM;
   2e7b2:	f06f 000b 	mvn.w	r0, #11
   2e7b6:	e7df      	b.n	2e778 <at_params_array_put+0xc>

0002e7b8 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   2e7b8:	b510      	push	{r4, lr}
   2e7ba:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2e7bc:	b910      	cbnz	r0, 2e7c4 <at_params_short_get+0xc>
		return -EINVAL;
   2e7be:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
}
   2e7c2:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   2e7c4:	6843      	ldr	r3, [r0, #4]
   2e7c6:	2b00      	cmp	r3, #0
   2e7c8:	d0f9      	beq.n	2e7be <at_params_short_get+0x6>
   2e7ca:	2a00      	cmp	r2, #0
   2e7cc:	d0f7      	beq.n	2e7be <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   2e7ce:	f7ea f969 	bl	18aa4 <at_params_get>
	if (param == NULL) {
   2e7d2:	2800      	cmp	r0, #0
   2e7d4:	d0f3      	beq.n	2e7be <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   2e7d6:	7803      	ldrb	r3, [r0, #0]
   2e7d8:	2b01      	cmp	r3, #1
   2e7da:	d1f0      	bne.n	2e7be <at_params_short_get+0x6>
	*value = (uint16_t)param->value.int_val;
   2e7dc:	6883      	ldr	r3, [r0, #8]
	return 0;
   2e7de:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   2e7e0:	8023      	strh	r3, [r4, #0]
	return 0;
   2e7e2:	e7ee      	b.n	2e7c2 <at_params_short_get+0xa>

0002e7e4 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      uint32_t *value)
{
   2e7e4:	b510      	push	{r4, lr}
   2e7e6:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2e7e8:	b910      	cbnz	r0, 2e7f0 <at_params_int_get+0xc>
		return -EINVAL;
   2e7ea:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   2e7ee:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   2e7f0:	6843      	ldr	r3, [r0, #4]
   2e7f2:	2b00      	cmp	r3, #0
   2e7f4:	d0f9      	beq.n	2e7ea <at_params_int_get+0x6>
   2e7f6:	2a00      	cmp	r2, #0
   2e7f8:	d0f7      	beq.n	2e7ea <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   2e7fa:	f7ea f953 	bl	18aa4 <at_params_get>
	if (param == NULL) {
   2e7fe:	2800      	cmp	r0, #0
   2e800:	d0f3      	beq.n	2e7ea <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   2e802:	7803      	ldrb	r3, [r0, #0]
   2e804:	3b01      	subs	r3, #1
   2e806:	2b01      	cmp	r3, #1
   2e808:	d8ef      	bhi.n	2e7ea <at_params_int_get+0x6>
	*value = param->value.int_val;
   2e80a:	6883      	ldr	r3, [r0, #8]
	return 0;
   2e80c:	2000      	movs	r0, #0
	*value = param->value.int_val;
   2e80e:	6023      	str	r3, [r4, #0]
	return 0;
   2e810:	e7ed      	b.n	2e7ee <at_params_int_get+0xa>

0002e812 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   2e812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e814:	4617      	mov	r7, r2
   2e816:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   2e818:	b910      	cbnz	r0, 2e820 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   2e81a:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   2e81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   2e820:	6843      	ldr	r3, [r0, #4]
   2e822:	2b00      	cmp	r3, #0
   2e824:	d0f9      	beq.n	2e81a <at_params_string_get+0x8>
   2e826:	2a00      	cmp	r2, #0
   2e828:	d0f7      	beq.n	2e81a <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   2e82a:	2c00      	cmp	r4, #0
   2e82c:	d0f5      	beq.n	2e81a <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   2e82e:	f7ea f939 	bl	18aa4 <at_params_get>
	if (param == NULL) {
   2e832:	4606      	mov	r6, r0
   2e834:	2800      	cmp	r0, #0
   2e836:	d0f0      	beq.n	2e81a <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   2e838:	7803      	ldrb	r3, [r0, #0]
   2e83a:	2b03      	cmp	r3, #3
   2e83c:	d1ed      	bne.n	2e81a <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   2e83e:	f7ea f953 	bl	18ae8 <at_param_size>
	if (*len < param_len) {
   2e842:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   2e844:	4605      	mov	r5, r0
	if (*len < param_len) {
   2e846:	4283      	cmp	r3, r0
   2e848:	d307      	bcc.n	2e85a <at_params_string_get+0x48>
   2e84a:	4602      	mov	r2, r0
   2e84c:	68b1      	ldr	r1, [r6, #8]
   2e84e:	4638      	mov	r0, r7
   2e850:	f7de f97c 	bl	cb4c <memcpy>
	return 0;
   2e854:	2000      	movs	r0, #0
	*len = param_len;
   2e856:	6025      	str	r5, [r4, #0]
	return 0;
   2e858:	e7e1      	b.n	2e81e <at_params_string_get+0xc>
		return -ENOMEM;
   2e85a:	f06f 000b 	mvn.w	r0, #11
   2e85e:	e7de      	b.n	2e81e <at_params_string_get+0xc>

0002e860 <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   2e860:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   2e862:	4605      	mov	r5, r0
   2e864:	b180      	cbz	r0, 2e888 <at_params_valid_count_get+0x28>
   2e866:	6843      	ldr	r3, [r0, #4]
   2e868:	b173      	cbz	r3, 2e888 <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   2e86a:	2100      	movs	r1, #0
   2e86c:	f7ea f91a 	bl	18aa4 <at_params_get>
	size_t valid_i = 0;
   2e870:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   2e872:	b108      	cbz	r0, 2e878 <at_params_valid_count_get+0x18>
   2e874:	7803      	ldrb	r3, [r0, #0]
   2e876:	b90b      	cbnz	r3, 2e87c <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   2e878:	4620      	mov	r0, r4
   2e87a:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   2e87c:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   2e87e:	4621      	mov	r1, r4
   2e880:	4628      	mov	r0, r5
   2e882:	f7ea f90f 	bl	18aa4 <at_params_get>
   2e886:	e7f4      	b.n	2e872 <at_params_valid_count_get+0x12>
		return -EINVAL;
   2e888:	f06f 0415 	mvn.w	r4, #21
   2e88c:	e7f4      	b.n	2e878 <at_params_valid_count_get+0x18>

0002e88e <response_is_valid>:
{
   2e88e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2e890:	4605      	mov	r5, r0
	if ((response_len < strlen(check)) ||
   2e892:	4610      	mov	r0, r2
{
   2e894:	460c      	mov	r4, r1
	if ((response_len < strlen(check)) ||
   2e896:	9201      	str	r2, [sp, #4]
   2e898:	f7f8 f9be 	bl	26c18 <strlen>
   2e89c:	42a0      	cmp	r0, r4
   2e89e:	d809      	bhi.n	2e8b4 <response_is_valid+0x26>
	    (memcmp(response, check, response_len) != 0)) {
   2e8a0:	4622      	mov	r2, r4
   2e8a2:	4628      	mov	r0, r5
   2e8a4:	9901      	ldr	r1, [sp, #4]
   2e8a6:	f7f7 fd79 	bl	2639c <memcmp>
	if ((response_len < strlen(check)) ||
   2e8aa:	fab0 f080 	clz	r0, r0
   2e8ae:	0940      	lsrs	r0, r0, #5
}
   2e8b0:	b003      	add	sp, #12
   2e8b2:	bd30      	pop	{r4, r5, pc}
		return false;
   2e8b4:	2000      	movs	r0, #0
   2e8b6:	e7fb      	b.n	2e8b0 <response_is_valid+0x22>

0002e8b8 <lte_lc_connect>:
	return w_lte_lc_connect(true);
   2e8b8:	2001      	movs	r0, #1
   2e8ba:	f7ea ba9d 	b.w	18df8 <w_lte_lc_connect>

0002e8be <lte_lc_init_and_connect>:
{
   2e8be:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   2e8c0:	f7ea fbd4 	bl	1906c <w_lte_lc_init>
	if (ret) {
   2e8c4:	b920      	cbnz	r0, 2e8d0 <lte_lc_init_and_connect+0x12>
}
   2e8c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect(true);
   2e8ca:	2001      	movs	r0, #1
   2e8cc:	f7ea ba94 	b.w	18df8 <w_lte_lc_connect>
}
   2e8d0:	bd08      	pop	{r3, pc}

0002e8d2 <k_uptime_get>:
{
   2e8d2:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   2e8d4:	f000 f943 	bl	2eb5e <z_impl_k_uptime_ticks>
   2e8d8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2e8dc:	fba0 2304 	umull	r2, r3, r0, r4
   2e8e0:	fb04 3301 	mla	r3, r4, r1, r3
   2e8e4:	0bd0      	lsrs	r0, r2, #15
}
   2e8e6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2e8ea:	0bd9      	lsrs	r1, r3, #15
   2e8ec:	bd10      	pop	{r4, pc}

0002e8ee <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2e8ee:	4700      	bx	r0

0002e8f0 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2e8f0:	f000 b8c6 	b.w	2ea80 <z_impl_k_busy_wait>

0002e8f4 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   2e8f4:	f7fe bb83 	b.w	2cffe <z_clock_idle_exit>

0002e8f8 <k_heap_init>:
{
   2e8f8:	b410      	push	{r4}
   2e8fa:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2e8fe:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2e902:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   2e906:	f7e4 b947 	b.w	12b98 <sys_heap_init>

0002e90a <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   2e90a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e90c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   2e910:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   2e912:	6800      	ldr	r0, [r0, #0]
{
   2e914:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   2e916:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   2e918:	4632      	mov	r2, r6
   2e91a:	463b      	mov	r3, r7
   2e91c:	4621      	mov	r1, r4
   2e91e:	f7f3 ffff 	bl	22920 <k_heap_alloc>
   2e922:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   2e924:	b144      	cbz	r4, 2e938 <k_mem_pool_alloc+0x2e>
   2e926:	b938      	cbnz	r0, 2e938 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   2e928:	ea56 0307 	orrs.w	r3, r6, r7
   2e92c:	bf0c      	ite	eq
   2e92e:	f06f 000b 	mvneq.w	r0, #11
   2e932:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   2e936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   2e938:	2000      	movs	r0, #0
   2e93a:	e7fc      	b.n	2e936 <k_mem_pool_alloc+0x2c>

0002e93c <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   2e93c:	e9d0 1000 	ldrd	r1, r0, [r0]
   2e940:	f7f4 b89c 	b.w	22a7c <k_heap_free>

0002e944 <k_mem_slab_init>:
{
   2e944:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2e946:	2400      	movs	r4, #0
   2e948:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2e94a:	ea41 0402 	orr.w	r4, r1, r2
   2e94e:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2e952:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2e956:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2e958:	d10c      	bne.n	2e974 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   2e95a:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2e95c:	42a3      	cmp	r3, r4
   2e95e:	d103      	bne.n	2e968 <k_mem_slab_init+0x24>
   2e960:	e9c0 0000 	strd	r0, r0, [r0]
}
   2e964:	2000      	movs	r0, #0
}
   2e966:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2e968:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2e96a:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   2e96c:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   2e96e:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   2e970:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2e972:	e7f3      	b.n	2e95c <k_mem_slab_init+0x18>
		return -EINVAL;
   2e974:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2e978:	e7f5      	b.n	2e966 <k_mem_slab_init+0x22>

0002e97a <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   2e97a:	2300      	movs	r3, #0
   2e97c:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   2e980:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   2e984:	4618      	mov	r0, r3
   2e986:	4770      	bx	lr

0002e988 <z_queue_node_peek>:
{
   2e988:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2e98a:	4604      	mov	r4, r0
   2e98c:	b130      	cbz	r0, 2e99c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2e98e:	6802      	ldr	r2, [r0, #0]
   2e990:	0793      	lsls	r3, r2, #30
   2e992:	d003      	beq.n	2e99c <z_queue_node_peek+0x14>
		ret = anode->data;
   2e994:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2e996:	b109      	cbz	r1, 2e99c <z_queue_node_peek+0x14>
			k_free(anode);
   2e998:	f000 f9ac 	bl	2ecf4 <k_free>
}
   2e99c:	4620      	mov	r0, r4
   2e99e:	bd10      	pop	{r4, pc}

0002e9a0 <z_impl_k_queue_init>:
	list->head = NULL;
   2e9a0:	2300      	movs	r3, #0
	list->tail = NULL;
   2e9a2:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2e9a6:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
   2e9a8:	f100 030c 	add.w	r3, r0, #12
   2e9ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2e9b0:	f100 0314 	add.w	r3, r0, #20
   2e9b4:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2e9b8:	4770      	bx	lr

0002e9ba <k_queue_append>:
{
   2e9ba:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   2e9bc:	2300      	movs	r3, #0
   2e9be:	6841      	ldr	r1, [r0, #4]
   2e9c0:	f7f4 bccc 	b.w	2335c <queue_insert>

0002e9c4 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   2e9c4:	f990 000e 	ldrsb.w	r0, [r0, #14]
   2e9c8:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   2e9cc:	4298      	cmp	r0, r3
   2e9ce:	bfac      	ite	ge
   2e9d0:	2000      	movge	r0, #0
   2e9d2:	2001      	movlt	r0, #1
   2e9d4:	4770      	bx	lr

0002e9d6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2e9d6:	4603      	mov	r3, r0
   2e9d8:	b920      	cbnz	r0, 2e9e4 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2e9da:	f3ef 8205 	mrs	r2, IPSR
   2e9de:	b90a      	cbnz	r2, 2e9e4 <z_reschedule_irqlock+0xe>
   2e9e0:	f7e5 bd7c 	b.w	144dc <arch_swap>
   2e9e4:	f383 8811 	msr	BASEPRI, r3
   2e9e8:	f3bf 8f6f 	isb	sy
}
   2e9ec:	4770      	bx	lr

0002e9ee <z_reschedule_unlocked>:
	__asm__ volatile(
   2e9ee:	f04f 0320 	mov.w	r3, #32
   2e9f2:	f3ef 8011 	mrs	r0, BASEPRI
   2e9f6:	f383 8811 	msr	BASEPRI, r3
   2e9fa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2e9fe:	f7ff bfea 	b.w	2e9d6 <z_reschedule_irqlock>

0002ea02 <unpend_thread_no_timeout>:
{
   2ea02:	b510      	push	{r4, lr}
   2ea04:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2ea06:	3008      	adds	r0, #8
   2ea08:	f7f4 fdaa 	bl	23560 <pended_on.isra.0>
   2ea0c:	4621      	mov	r1, r4
   2ea0e:	f7f4 ff83 	bl	23918 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2ea12:	7b63      	ldrb	r3, [r4, #13]
   2ea14:	f023 0302 	bic.w	r3, r3, #2
   2ea18:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2ea1a:	2300      	movs	r3, #0
   2ea1c:	60a3      	str	r3, [r4, #8]
}
   2ea1e:	bd10      	pop	{r4, pc}

0002ea20 <z_priq_dumb_best>:
	return list->head == list;
   2ea20:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ea22:	4298      	cmp	r0, r3
   2ea24:	d004      	beq.n	2ea30 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   2ea26:	2b00      	cmp	r3, #0
   2ea28:	bf38      	it	cc
   2ea2a:	2300      	movcc	r3, #0
   2ea2c:	4618      	mov	r0, r3
   2ea2e:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2ea30:	2000      	movs	r0, #0
}
   2ea32:	4770      	bx	lr

0002ea34 <z_unpend_all>:
{
   2ea34:	b538      	push	{r3, r4, r5, lr}
   2ea36:	4605      	mov	r5, r0
	int need_sched = 0;
   2ea38:	2000      	movs	r0, #0
	return list->head == list;
   2ea3a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ea3c:	42a5      	cmp	r5, r4
   2ea3e:	d000      	beq.n	2ea42 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2ea40:	b904      	cbnz	r4, 2ea44 <z_unpend_all+0x10>
}
   2ea42:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2ea44:	4620      	mov	r0, r4
   2ea46:	f7f4 ff95 	bl	23974 <z_unpend_thread>
		z_ready_thread(thread);
   2ea4a:	4620      	mov	r0, r4
   2ea4c:	f7f5 f8cc 	bl	23be8 <z_ready_thread>
		need_sched = 1;
   2ea50:	2001      	movs	r0, #1
   2ea52:	e7f2      	b.n	2ea3a <z_unpend_all+0x6>

0002ea54 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   2ea54:	b15a      	cbz	r2, 2ea6e <z_impl_k_sem_init+0x1a>
   2ea56:	428a      	cmp	r2, r1
   2ea58:	d309      	bcc.n	2ea6e <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2ea5a:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2ea5e:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2ea62:	e9c0 0000 	strd	r0, r0, [r0]
   2ea66:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2ea6a:	2000      	movs	r0, #0
   2ea6c:	4770      	bx	lr
		return -EINVAL;
   2ea6e:	f06f 0015 	mvn.w	r0, #21
}
   2ea72:	4770      	bx	lr

0002ea74 <k_is_in_isr>:
   2ea74:	f3ef 8005 	mrs	r0, IPSR
}
   2ea78:	3800      	subs	r0, #0
   2ea7a:	bf18      	it	ne
   2ea7c:	2001      	movne	r0, #1
   2ea7e:	4770      	bx	lr

0002ea80 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   2ea80:	f7e4 b93a 	b.w	12cf8 <arch_busy_wait>

0002ea84 <z_impl_k_thread_name_set>:
}
   2ea84:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2ea88:	4770      	bx	lr

0002ea8a <k_thread_name_get>:
}
   2ea8a:	2000      	movs	r0, #0
   2ea8c:	4770      	bx	lr

0002ea8e <k_work_submit_to_queue>:
{
   2ea8e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ea90:	f101 0308 	add.w	r3, r1, #8
   2ea94:	e8d3 2fef 	ldaex	r2, [r3]
   2ea98:	f042 0c01 	orr.w	ip, r2, #1
   2ea9c:	e8c3 cfee 	stlex	lr, ip, [r3]
   2eaa0:	f1be 0f00 	cmp.w	lr, #0
   2eaa4:	d1f6      	bne.n	2ea94 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2eaa6:	07d3      	lsls	r3, r2, #31
   2eaa8:	d403      	bmi.n	2eab2 <k_work_submit_to_queue+0x24>
}
   2eaaa:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2eaae:	f7ff bf84 	b.w	2e9ba <k_queue_append>
}
   2eab2:	f85d fb04 	ldr.w	pc, [sp], #4

0002eab6 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   2eab6:	f1a0 0110 	sub.w	r1, r0, #16
   2eaba:	6980      	ldr	r0, [r0, #24]
   2eabc:	f7ff bfe7 	b.w	2ea8e <k_work_submit_to_queue>

0002eac0 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   2eac0:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   2eac2:	b570      	push	{r4, r5, r6, lr}
   2eac4:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   2eac6:	b913      	cbnz	r3, 2eace <work_cancel+0xe>
		return -EALREADY;
   2eac8:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   2eacc:	bd70      	pop	{r4, r5, r6, pc}
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   2eace:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ead2:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   2ead6:	07db      	lsls	r3, r3, #31
   2ead8:	d52f      	bpl.n	2eb3a <work_cancel+0x7a>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2eada:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2eadc:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2eade:	6813      	ldr	r3, [r2, #0]
   2eae0:	b913      	cbnz	r3, 2eae8 <work_cancel+0x28>
			return -EINVAL;
   2eae2:	f06f 0015 	mvn.w	r0, #21
   2eae6:	e7f1      	b.n	2eacc <work_cancel+0xc>
   2eae8:	429c      	cmp	r4, r3
   2eaea:	d121      	bne.n	2eb30 <work_cancel+0x70>
Z_GENLIST_REMOVE(sflist, sfnode)
   2eaec:	6823      	ldr	r3, [r4, #0]
   2eaee:	6856      	ldr	r6, [r2, #4]
   2eaf0:	f023 0003 	bic.w	r0, r3, #3
   2eaf4:	b991      	cbnz	r1, 2eb1c <work_cancel+0x5c>
   2eaf6:	42b4      	cmp	r4, r6
	list->head = node;
   2eaf8:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2eafa:	d100      	bne.n	2eafe <work_cancel+0x3e>
	list->tail = node;
   2eafc:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2eafe:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2eb00:	f003 0303 	and.w	r3, r3, #3
   2eb04:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   2eb06:	2000      	movs	r0, #0
   2eb08:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2eb0a:	e8d5 3fef 	ldaex	r3, [r5]
   2eb0e:	f023 0301 	bic.w	r3, r3, #1
   2eb12:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2eb16:	2a00      	cmp	r2, #0
   2eb18:	d0d8      	beq.n	2eacc <work_cancel+0xc>
   2eb1a:	e7f6      	b.n	2eb0a <work_cancel+0x4a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2eb1c:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2eb1e:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   2eb20:	f003 0303 	and.w	r3, r3, #3
   2eb24:	ea43 0300 	orr.w	r3, r3, r0
   2eb28:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2eb2a:	bf08      	it	eq
   2eb2c:	6051      	streq	r1, [r2, #4]
}
   2eb2e:	e7e6      	b.n	2eafe <work_cancel+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2eb30:	6818      	ldr	r0, [r3, #0]
   2eb32:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2eb34:	f020 0303 	bic.w	r3, r0, #3
   2eb38:	e7d2      	b.n	2eae0 <work_cancel+0x20>
		int err = z_abort_timeout(&work->timeout);
   2eb3a:	3010      	adds	r0, #16
   2eb3c:	f7f6 fada 	bl	250f4 <z_abort_timeout>
		if (err) {
   2eb40:	2800      	cmp	r0, #0
   2eb42:	d0e0      	beq.n	2eb06 <work_cancel+0x46>
   2eb44:	e7c0      	b.n	2eac8 <work_cancel+0x8>

0002eb46 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2eb46:	2300      	movs	r3, #0
   2eb48:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   2eb4c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   2eb50:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   2eb52:	6283      	str	r3, [r0, #40]	; 0x28
}
   2eb54:	4770      	bx	lr

0002eb56 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   2eb56:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   2eb58:	f7f6 fc7c 	bl	25454 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2eb5c:	bd08      	pop	{r3, pc}

0002eb5e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   2eb5e:	f7f6 bc79 	b.w	25454 <z_tick_get>

0002eb62 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   2eb62:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2eb64:	1c4b      	adds	r3, r1, #1
   2eb66:	bf08      	it	eq
   2eb68:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2eb6c:	4604      	mov	r4, r0
   2eb6e:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2eb70:	d013      	beq.n	2eb9a <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2eb72:	ea54 0105 	orrs.w	r1, r4, r5
   2eb76:	d103      	bne.n	2eb80 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   2eb78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   2eb7c:	f7f6 bc6a 	b.w	25454 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2eb80:	f06f 0101 	mvn.w	r1, #1
   2eb84:	1a0a      	subs	r2, r1, r0
   2eb86:	f04f 31ff 	mov.w	r1, #4294967295
   2eb8a:	eb61 0305 	sbc.w	r3, r1, r5
   2eb8e:	2a00      	cmp	r2, #0
   2eb90:	f173 0100 	sbcs.w	r1, r3, #0
   2eb94:	db02      	blt.n	2eb9c <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   2eb96:	4610      	mov	r0, r2
   2eb98:	4619      	mov	r1, r3
}
   2eb9a:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   2eb9c:	f7f6 fc5a 	bl	25454 <z_tick_get>
   2eba0:	2c01      	cmp	r4, #1
   2eba2:	f175 0300 	sbcs.w	r3, r5, #0
   2eba6:	bfbc      	itt	lt
   2eba8:	2401      	movlt	r4, #1
   2ebaa:	2500      	movlt	r5, #0
   2ebac:	1820      	adds	r0, r4, r0
   2ebae:	eb45 0101 	adc.w	r1, r5, r1
   2ebb2:	e7f2      	b.n	2eb9a <z_timeout_end_calc+0x38>

0002ebb4 <k_timer_init>:
	timer->status = 0U;
   2ebb4:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2ebb6:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2ebba:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2ebbe:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2ebc2:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2ebc6:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2ebc8:	6343      	str	r3, [r0, #52]	; 0x34
}
   2ebca:	4770      	bx	lr

0002ebcc <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2ebcc:	b510      	push	{r4, lr}
   2ebce:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2ebd0:	f7f6 fa90 	bl	250f4 <z_abort_timeout>

	if (inactive) {
   2ebd4:	b9d8      	cbnz	r0, 2ec0e <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   2ebd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ebd8:	b10b      	cbz	r3, 2ebde <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2ebda:	4620      	mov	r0, r4
   2ebdc:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   2ebde:	f104 0018 	add.w	r0, r4, #24
   2ebe2:	2100      	movs	r1, #0
   2ebe4:	f7f4 fd4a 	bl	2367c <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   2ebe8:	4604      	mov	r4, r0
   2ebea:	b180      	cbz	r0, 2ec0e <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   2ebec:	f7f4 fd90 	bl	23710 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   2ebf0:	4620      	mov	r0, r4
   2ebf2:	f7f4 fff9 	bl	23be8 <z_ready_thread>
   2ebf6:	f04f 0320 	mov.w	r3, #32
   2ebfa:	f3ef 8011 	mrs	r0, BASEPRI
   2ebfe:	f383 8811 	msr	BASEPRI, r3
   2ec02:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   2ec06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2ec0a:	f7ff bee4 	b.w	2e9d6 <z_reschedule_irqlock>
   2ec0e:	bd10      	pop	{r4, pc}

0002ec10 <signal_poll_event>:
{
   2ec10:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   2ec12:	6884      	ldr	r4, [r0, #8]
{
   2ec14:	4605      	mov	r5, r0
   2ec16:	460e      	mov	r6, r1
	if (poller) {
   2ec18:	b19c      	cbz	r4, 2ec42 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   2ec1a:	68a3      	ldr	r3, [r4, #8]
   2ec1c:	b95b      	cbnz	r3, 2ec36 <signal_poll_event+0x26>
	int retcode = 0;
   2ec1e:	4618      	mov	r0, r3
		poller->is_polling = false;
   2ec20:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2ec22:	2300      	movs	r3, #0
   2ec24:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   2ec26:	68eb      	ldr	r3, [r5, #12]
   2ec28:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2ec2c:	430e      	orrs	r6, r1
   2ec2e:	f366 3310 	bfi	r3, r6, #12, #5
   2ec32:	60eb      	str	r3, [r5, #12]
	return retcode;
   2ec34:	e004      	b.n	2ec40 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   2ec36:	4798      	blx	r3
		poller->is_polling = false;
   2ec38:	2300      	movs	r3, #0
		if (retcode < 0) {
   2ec3a:	2800      	cmp	r0, #0
		poller->is_polling = false;
   2ec3c:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   2ec3e:	daf0      	bge.n	2ec22 <signal_poll_event+0x12>
}
   2ec40:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   2ec42:	4620      	mov	r0, r4
   2ec44:	e7ed      	b.n	2ec22 <signal_poll_event+0x12>

0002ec46 <add_event>:
{
   2ec46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ec48:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2ec4a:	e9d0 2300 	ldrd	r2, r3, [r0]
   2ec4e:	4290      	cmp	r0, r2
   2ec50:	4604      	mov	r4, r0
   2ec52:	460d      	mov	r5, r1
   2ec54:	d106      	bne.n	2ec64 <add_event+0x1e>
	node->prev = list->tail;
   2ec56:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2ec58:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   2ec5a:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   2ec5c:	6863      	ldr	r3, [r4, #4]
   2ec5e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2ec60:	6065      	str	r5, [r4, #4]
}
   2ec62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2ec64:	2b00      	cmp	r3, #0
   2ec66:	d0f6      	beq.n	2ec56 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   2ec68:	689b      	ldr	r3, [r3, #8]
   2ec6a:	6879      	ldr	r1, [r7, #4]
   2ec6c:	6858      	ldr	r0, [r3, #4]
   2ec6e:	f7ff fea9 	bl	2e9c4 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   2ec72:	2800      	cmp	r0, #0
   2ec74:	d1ef      	bne.n	2ec56 <add_event+0x10>
	return list->head == list;
   2ec76:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ec78:	42b4      	cmp	r4, r6
   2ec7a:	d0ec      	beq.n	2ec56 <add_event+0x10>
   2ec7c:	2e00      	cmp	r6, #0
   2ec7e:	bf38      	it	cc
   2ec80:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2ec82:	2e00      	cmp	r6, #0
   2ec84:	d0e7      	beq.n	2ec56 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   2ec86:	68b3      	ldr	r3, [r6, #8]
   2ec88:	6878      	ldr	r0, [r7, #4]
   2ec8a:	6859      	ldr	r1, [r3, #4]
   2ec8c:	f7ff fe9a 	bl	2e9c4 <z_is_t1_higher_prio_than_t2>
   2ec90:	b128      	cbz	r0, 2ec9e <add_event+0x58>
	node->prev = successor->prev;
   2ec92:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2ec94:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   2ec98:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2ec9a:	6075      	str	r5, [r6, #4]
			return;
   2ec9c:	e7e1      	b.n	2ec62 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   2ec9e:	6863      	ldr	r3, [r4, #4]
   2eca0:	42b3      	cmp	r3, r6
   2eca2:	d0d8      	beq.n	2ec56 <add_event+0x10>
   2eca4:	6836      	ldr	r6, [r6, #0]
   2eca6:	e7ec      	b.n	2ec82 <add_event+0x3c>

0002eca8 <z_handle_obj_poll_events>:
{
   2eca8:	4603      	mov	r3, r0
	return list->head == list;
   2ecaa:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2ecac:	4283      	cmp	r3, r0
   2ecae:	d008      	beq.n	2ecc2 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   2ecb0:	e9d0 3200 	ldrd	r3, r2, [r0]
   2ecb4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2ecb6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2ecb8:	2300      	movs	r3, #0
	node->prev = NULL;
   2ecba:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2ecbe:	f7ff bfa7 	b.w	2ec10 <signal_poll_event>
}
   2ecc2:	4770      	bx	lr

0002ecc4 <k_mem_pool_malloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   2ecc4:	2208      	movs	r2, #8
{
   2ecc6:	b530      	push	{r4, r5, lr}
   2ecc8:	188a      	adds	r2, r1, r2
   2ecca:	b085      	sub	sp, #20
   2eccc:	d207      	bcs.n	2ecde <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   2ecce:	2400      	movs	r4, #0
   2ecd0:	2500      	movs	r5, #0
   2ecd2:	a902      	add	r1, sp, #8
   2ecd4:	e9cd 4500 	strd	r4, r5, [sp]
   2ecd8:	f7ff fe17 	bl	2e90a <k_mem_pool_alloc>
   2ecdc:	b110      	cbz	r0, 2ece4 <k_mem_pool_malloc+0x20>
		return NULL;
   2ecde:	2000      	movs	r0, #0
}
   2ece0:	b005      	add	sp, #20
   2ece2:	bd30      	pop	{r4, r5, pc}
   2ece4:	9a02      	ldr	r2, [sp, #8]
   2ece6:	ab02      	add	r3, sp, #8
   2ece8:	cb03      	ldmia	r3!, {r0, r1}
   2ecea:	6010      	str	r0, [r2, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   2ecec:	9802      	ldr	r0, [sp, #8]
   2ecee:	6051      	str	r1, [r2, #4]
   2ecf0:	3008      	adds	r0, #8
   2ecf2:	e7f5      	b.n	2ece0 <k_mem_pool_malloc+0x1c>

0002ecf4 <k_free>:
	if (ptr != NULL) {
   2ecf4:	b110      	cbz	r0, 2ecfc <k_free+0x8>
		k_mem_pool_free_id(ptr);
   2ecf6:	3808      	subs	r0, #8
   2ecf8:	f7ff be20 	b.w	2e93c <k_mem_pool_free_id>
}
   2ecfc:	4770      	bx	lr

0002ecfe <k_calloc>:
{
   2ecfe:	b513      	push	{r0, r1, r4, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   2ed00:	fb01 f200 	mul.w	r2, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   2ed04:	b118      	cbz	r0, 2ed0e <k_calloc+0x10>
   2ed06:	fbb2 f0f0 	udiv	r0, r2, r0
   2ed0a:	4281      	cmp	r1, r0
   2ed0c:	d10c      	bne.n	2ed28 <k_calloc+0x2a>
	ret = k_malloc(bounds);
   2ed0e:	4610      	mov	r0, r2
   2ed10:	9201      	str	r2, [sp, #4]
   2ed12:	f7f6 ffd1 	bl	25cb8 <k_malloc>
	if (ret != NULL) {
   2ed16:	4604      	mov	r4, r0
   2ed18:	b118      	cbz	r0, 2ed22 <k_calloc+0x24>
__ssp_bos_icheck3(memset, void *, int)
   2ed1a:	2100      	movs	r1, #0
   2ed1c:	9a01      	ldr	r2, [sp, #4]
   2ed1e:	f7f7 fb6b 	bl	263f8 <memset>
}
   2ed22:	4620      	mov	r0, r4
   2ed24:	b002      	add	sp, #8
   2ed26:	bd10      	pop	{r4, pc}
		return NULL;
   2ed28:	2400      	movs	r4, #0
   2ed2a:	e7fa      	b.n	2ed22 <k_calloc+0x24>

0002ed2c <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   2ed2c:	4770      	bx	lr
